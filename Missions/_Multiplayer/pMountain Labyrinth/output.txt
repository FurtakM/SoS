// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2734 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3080 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 35
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 37
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 36
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 33
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 51634 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 51634 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 51634 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 51634 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 51634 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 51634 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 11480 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 51467 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 51467 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 51467 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 51467 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 51467 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 51467 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 51467 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 51467 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 51467 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 51467 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 51467 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 51467 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 51634 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 51634 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 51634 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 51634 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 51634 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 51634 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 51634 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 51634 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 51634 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 51634 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 51634 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 51634 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 51634 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 51634 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 51634 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 51634 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 51634 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 51634 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 48450 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 52342 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 7678 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 52359 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 8343 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 52400 0 2
2709: PPOPN 2
2711: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL 8396 0 3
2731: PPOPN 3
2733: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
// disable ( mpActive ) ;
2738: LD_INT 100
2740: DISABLE_MARKED
// disable ( mpWin ) ;
2741: LD_INT 101
2743: DISABLE_MARKED
// disable ( mpLose ) ;
2744: LD_INT 102
2746: DISABLE_MARKED
// mpGameType := 0 ;
2747: LD_ADDR_EXP 3
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// mpGameSettings := [ ] ;
2755: LD_ADDR_EXP 6
2759: PUSH
2760: EMPTY
2761: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2762: LD_ADDR_EXP 4
2766: PUSH
2767: EMPTY
2768: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2769: LD_ADDR_EXP 5
2773: PUSH
2774: EMPTY
2775: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2776: LD_ADDR_EXP 29
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2791: LD_ADDR_EXP 12
2795: PUSH
2796: EMPTY
2797: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2798: LD_ADDR_EXP 13
2802: PUSH
2803: EMPTY
2804: ST_TO_ADDR
// mpDepots := [ ] ;
2805: LD_ADDR_EXP 14
2809: PUSH
2810: EMPTY
2811: ST_TO_ADDR
// mpBuildings := [ ] ;
2812: LD_ADDR_EXP 17
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2819: LD_ADDR_EXP 18
2823: PUSH
2824: EMPTY
2825: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2826: LD_ADDR_EXP 19
2830: PUSH
2831: EMPTY
2832: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2833: LD_ADDR_EXP 20
2837: PUSH
2838: EMPTY
2839: ST_TO_ADDR
// mpStartingResources := [ ] ;
2840: LD_ADDR_EXP 15
2844: PUSH
2845: EMPTY
2846: ST_TO_ADDR
// mpStartPos := [ ] ;
2847: LD_ADDR_EXP 21
2851: PUSH
2852: EMPTY
2853: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2854: LD_ADDR_EXP 22
2858: PUSH
2859: LD_INT 1
2861: NEG
2862: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2863: LD_ADDR_EXP 23
2867: PUSH
2868: EMPTY
2869: ST_TO_ADDR
// mpApemans := [ ] ;
2870: LD_ADDR_EXP 30
2874: PUSH
2875: EMPTY
2876: ST_TO_ADDR
// mpApemansArea := [ ] ;
2877: LD_ADDR_EXP 31
2881: PUSH
2882: EMPTY
2883: ST_TO_ADDR
// mpRespawn := [ ] ;
2884: LD_ADDR_EXP 33
2888: PUSH
2889: EMPTY
2890: ST_TO_ADDR
// mpKingArea := 0 ;
2891: LD_ADDR_EXP 34
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// mpPoints := [ ] ;
2899: LD_ADDR_EXP 35
2903: PUSH
2904: EMPTY
2905: ST_TO_ADDR
// mpVehicles := 0 ;
2906: LD_ADDR_EXP 36
2910: PUSH
2911: LD_INT 0
2913: ST_TO_ADDR
// mpShipments := 0 ;
2914: LD_ADDR_EXP 27
2918: PUSH
2919: LD_INT 0
2921: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2922: LD_ADDR_EXP 40
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2953: LD_ADDR_EXP 32
2957: PUSH
2958: EMPTY
2959: PUSH
2960: EMPTY
2961: PUSH
2962: EMPTY
2963: PUSH
2964: EMPTY
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: ST_TO_ADDR
// mpEmissions := 0 ;
2984: LD_ADDR_EXP 37
2988: PUSH
2989: LD_INT 0
2991: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2992: LD_ADDR_EXP 25
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3000: LD_ADDR_EXP 24
3004: PUSH
3005: LD_INT 15
3007: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3008: LD_ADDR_EXP 38
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// mpGameActive := false ;
3016: LD_ADDR_EXP 39
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// mpBlockRespThread := false ;
3024: LD_ADDR_EXP 41
3028: PUSH
3029: LD_INT 0
3031: ST_TO_ADDR
// for i := 1 to 32 do
3032: LD_ADDR_VAR 0 2
3036: PUSH
3037: DOUBLE
3038: LD_INT 1
3040: DEC
3041: ST_TO_ADDR
3042: LD_INT 32
3044: PUSH
3045: FOR_TO
3046: IFFALSE 3073
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3048: LD_ADDR_EXP 6
3052: PUSH
3053: LD_EXP 6
3057: PPUSH
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 0
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
3071: GO 3045
3073: POP
3074: POP
// end ;
3075: LD_VAR 0 1
3079: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3080: LD_INT 0
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
3095: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3096: LD_ADDR_VAR 0 14
3100: PUSH
3101: LD_INT 1
3103: PUSH
3104: LD_INT 2
3106: PUSH
3107: LD_INT 3
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: ST_TO_ADDR
// for i in gameTypes do
3115: LD_ADDR_VAR 0 2
3119: PUSH
3120: LD_VAR 0 14
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3135
// disable ( i ) ;
3128: LD_VAR 0 2
3132: DISABLE_MARKED
3133: GO 3125
3135: POP
3136: POP
// if Multiplayer then
3137: LD_OWVAR 4
3141: IFFALSE 3325
// begin mpGameType := mp_game_type ;
3143: LD_ADDR_EXP 3
3147: PUSH
3148: LD_OWVAR 6
3152: ST_TO_ADDR
// your_side := mp_player_side ;
3153: LD_ADDR_OWVAR 2
3157: PUSH
3158: LD_OWVAR 7
3162: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3163: LD_ADDR_EXP 7
3167: PUSH
3168: LD_OWVAR 17
3172: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3173: LD_ADDR_EXP 8
3177: PUSH
3178: LD_OWVAR 15
3182: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3183: LD_ADDR_EXP 9
3187: PUSH
3188: LD_OWVAR 16
3192: ST_TO_ADDR
// mpTeams := mp_teams ;
3193: LD_ADDR_EXP 10
3197: PUSH
3198: LD_OWVAR 12
3202: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: DOUBLE
3209: LD_INT 1
3211: DEC
3212: ST_TO_ADDR
3213: LD_EXP 4
3217: PPUSH
3218: CALL 11480 0 1
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3300
// begin setting := mpGameSettingsKeys [ i ] ;
3226: LD_ADDR_VAR 0 12
3230: PUSH
3231: LD_EXP 4
3235: PUSH
3236: LD_VAR 0 2
3240: ARRAY
3241: ST_TO_ADDR
// if setting then
3242: LD_VAR 0 12
3246: IFFALSE 3298
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3248: LD_ADDR_EXP 6
3252: PUSH
3253: LD_EXP 6
3257: PPUSH
3258: LD_VAR 0 2
3262: PPUSH
3263: LD_EXP 5
3267: PUSH
3268: LD_VAR 0 2
3272: ARRAY
3273: PUSH
3274: LD_VAR 0 2
3278: PUSH
3279: LD_INT 1
3281: MINUS
3282: PPUSH
3283: CALL_OW 426
3287: PUSH
3288: LD_INT 1
3290: PLUS
3291: ARRAY
3292: PPUSH
3293: CALL_OW 1
3297: ST_TO_ADDR
// end ;
3298: GO 3223
3300: POP
3301: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3302: LD_ADDR_EXP 11
3306: PUSH
3307: LD_EXP 8
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: EMPTY
3316: LIST
3317: DIFF
3318: PUSH
3319: LD_INT 1
3321: GREATER
3322: ST_TO_ADDR
// end else
3323: GO 3325
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3325: LD_EXP 3
3329: PPUSH
3330: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3334: LD_EXP 18
3338: PPUSH
3339: CALL 11480 0 1
3343: IFFALSE 3374
// begin for i in mpMarkedAreas do
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: LD_EXP 18
3354: PUSH
3355: FOR_IN
3356: IFFALSE 3372
// SetAreaMapShow ( i , 0 ) ;
3358: LD_VAR 0 2
3362: PPUSH
3363: LD_INT 0
3365: PPUSH
3366: CALL_OW 424
3370: GO 3355
3372: POP
3373: POP
// end ; for i := 1 to 8 do
3374: LD_ADDR_VAR 0 2
3378: PUSH
3379: DOUBLE
3380: LD_INT 1
3382: DEC
3383: ST_TO_ADDR
3384: LD_INT 8
3386: PUSH
3387: FOR_TO
3388: IFFALSE 4645
// begin if not mpSidePositions [ i ] then
3390: LD_EXP 7
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: NOT
3401: IFFALSE 3405
// continue ;
3403: GO 3387
// side := i ;
3405: LD_ADDR_VAR 0 7
3409: PUSH
3410: LD_VAR 0 2
3414: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3415: LD_ADDR_VAR 0 9
3419: PUSH
3420: LD_EXP 9
3424: PUSH
3425: LD_VAR 0 2
3429: ARRAY
3430: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3431: LD_ADDR_VAR 0 8
3435: PUSH
3436: LD_EXP 7
3440: PUSH
3441: LD_VAR 0 2
3445: ARRAY
3446: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3447: LD_EXP 12
3451: PPUSH
3452: CALL 11480 0 1
3456: IFFALSE 3533
// begin for j in mpOilDeposits [ pos ] do
3458: LD_ADDR_VAR 0 3
3462: PUSH
3463: LD_EXP 12
3467: PUSH
3468: LD_VAR 0 8
3472: ARRAY
3473: PUSH
3474: FOR_IN
3475: IFFALSE 3531
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3477: LD_VAR 0 3
3481: PUSH
3482: LD_INT 1
3484: ARRAY
3485: PPUSH
3486: LD_VAR 0 3
3490: PUSH
3491: LD_INT 2
3493: ARRAY
3494: PPUSH
3495: LD_INT 2
3497: PPUSH
3498: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3502: LD_VAR 0 3
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: LD_VAR 0 3
3515: PUSH
3516: LD_INT 2
3518: ARRAY
3519: PPUSH
3520: LD_VAR 0 7
3524: PPUSH
3525: CALL_OW 441
// end ;
3529: GO 3474
3531: POP
3532: POP
// end ; if Count ( mpSibDeposits ) then
3533: LD_EXP 13
3537: PPUSH
3538: CALL 11480 0 1
3542: IFFALSE 3619
// begin for j in mpSibDeposits [ pos ] do
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_EXP 13
3553: PUSH
3554: LD_VAR 0 8
3558: ARRAY
3559: PUSH
3560: FOR_IN
3561: IFFALSE 3617
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3563: LD_VAR 0 3
3567: PUSH
3568: LD_INT 1
3570: ARRAY
3571: PPUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_INT 2
3579: ARRAY
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3588: LD_VAR 0 3
3592: PUSH
3593: LD_INT 1
3595: ARRAY
3596: PPUSH
3597: LD_VAR 0 3
3601: PUSH
3602: LD_INT 2
3604: ARRAY
3605: PPUSH
3606: LD_VAR 0 7
3610: PPUSH
3611: CALL_OW 441
// end ;
3615: GO 3560
3617: POP
3618: POP
// end ; InitBc ;
3619: CALL_OW 21
// InitUc ;
3623: CALL_OW 18
// uc_side := side ;
3627: LD_ADDR_OWVAR 20
3631: PUSH
3632: LD_VAR 0 7
3636: ST_TO_ADDR
// uc_nation := nation ;
3637: LD_ADDR_OWVAR 21
3641: PUSH
3642: LD_VAR 0 9
3646: ST_TO_ADDR
// if Count ( mpDepots ) then
3647: LD_EXP 14
3651: PPUSH
3652: CALL 11480 0 1
3656: IFFALSE 3840
// begin if mpGameType = GameTypeSurvival then
3658: LD_EXP 3
3662: PUSH
3663: LD_INT 2
3665: EQUAL
3666: IFFALSE 3686
// begin bc_level := 10 ;
3668: LD_ADDR_OWVAR 43
3672: PUSH
3673: LD_INT 10
3675: ST_TO_ADDR
// bc_type := b_warehouse ;
3676: LD_ADDR_OWVAR 42
3680: PUSH
3681: LD_INT 1
3683: ST_TO_ADDR
// end else
3684: GO 3702
// begin bc_level := 0 ;
3686: LD_ADDR_OWVAR 43
3690: PUSH
3691: LD_INT 0
3693: ST_TO_ADDR
// bc_type := b_depot ;
3694: LD_ADDR_OWVAR 42
3698: PUSH
3699: LD_INT 0
3701: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3702: LD_ADDR_VAR 0 4
3706: PUSH
3707: LD_EXP 14
3711: PUSH
3712: LD_VAR 0 8
3716: ARRAY
3717: PUSH
3718: LD_INT 1
3720: ARRAY
3721: PPUSH
3722: LD_EXP 14
3726: PUSH
3727: LD_VAR 0 8
3731: ARRAY
3732: PUSH
3733: LD_INT 2
3735: ARRAY
3736: PPUSH
3737: LD_EXP 14
3741: PUSH
3742: LD_VAR 0 8
3746: ARRAY
3747: PUSH
3748: LD_INT 3
3750: ARRAY
3751: PPUSH
3752: CALL_OW 47
3756: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3757: LD_VAR 0 4
3761: PPUSH
3762: LD_STRING @
3764: PUSH
3765: LD_VAR 0 7
3769: STR
3770: PPUSH
3771: CALL_OW 500
// if Count ( mpStartingResources ) then
3775: LD_EXP 15
3779: PPUSH
3780: CALL 11480 0 1
3784: IFFALSE 3838
// begin for j := 1 to mpStartingResources do
3786: LD_ADDR_VAR 0 3
3790: PUSH
3791: DOUBLE
3792: LD_INT 1
3794: DEC
3795: ST_TO_ADDR
3796: LD_EXP 15
3800: PUSH
3801: FOR_TO
3802: IFFALSE 3836
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3804: LD_VAR 0 4
3808: PPUSH
3809: CALL_OW 274
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_EXP 15
3823: PUSH
3824: LD_VAR 0 3
3828: ARRAY
3829: PPUSH
3830: CALL_OW 277
3834: GO 3801
3836: POP
3837: POP
// end ; end else
3838: GO 3987
// if Count ( mpStartingResources ) then
3840: LD_EXP 15
3844: PPUSH
3845: CALL 11480 0 1
3849: IFFALSE 3987
// begin for j := 1 to mpStartingResources do
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: DOUBLE
3857: LD_INT 1
3859: DEC
3860: ST_TO_ADDR
3861: LD_EXP 15
3865: PUSH
3866: FOR_TO
3867: IFFALSE 3985
// begin resources := mpStartingResources [ j ] ;
3869: LD_ADDR_VAR 0 13
3873: PUSH
3874: LD_EXP 15
3878: PUSH
3879: LD_VAR 0 3
3883: ARRAY
3884: ST_TO_ADDR
// repeat if resources >= 50 then
3885: LD_VAR 0 13
3889: PUSH
3890: LD_INT 50
3892: GREATEREQUAL
3893: IFFALSE 3939
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 5
3902: PPUSH
3903: LD_VAR 0 5
3907: PPUSH
3908: LD_VAR 0 6
3912: PPUSH
3913: LD_INT 4
3915: PPUSH
3916: LD_INT 0
3918: PPUSH
3919: CALL_OW 60
// resources := resources - 50 ;
3923: LD_ADDR_VAR 0 13
3927: PUSH
3928: LD_VAR 0 13
3932: PUSH
3933: LD_INT 50
3935: MINUS
3936: ST_TO_ADDR
// end else
3937: GO 3973
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_VAR 0 13
3948: PUSH
3949: LD_INT 10
3951: DIV
3952: PPUSH
3953: LD_VAR 0 5
3957: PPUSH
3958: LD_VAR 0 6
3962: PPUSH
3963: LD_INT 4
3965: PPUSH
3966: LD_INT 0
3968: PPUSH
3969: CALL_OW 60
// until resources <= 0 ;
3973: LD_VAR 0 13
3977: PUSH
3978: LD_INT 0
3980: LESSEQUAL
3981: IFFALSE 3885
// end ;
3983: GO 3866
3985: POP
3986: POP
// end ; if Count ( mpBuildings ) then
3987: LD_EXP 17
3991: PPUSH
3992: CALL 11480 0 1
3996: IFFALSE 4074
// begin for j in mpBuildings [ pos ] do
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: LD_EXP 17
4007: PUSH
4008: LD_VAR 0 8
4012: ARRAY
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4072
// begin bc_level := 0 ;
4017: LD_ADDR_OWVAR 43
4021: PUSH
4022: LD_INT 0
4024: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4025: LD_ADDR_OWVAR 42
4029: PUSH
4030: LD_VAR 0 3
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4039: LD_VAR 0 3
4043: PUSH
4044: LD_INT 2
4046: ARRAY
4047: PPUSH
4048: LD_VAR 0 3
4052: PUSH
4053: LD_INT 3
4055: ARRAY
4056: PPUSH
4057: LD_VAR 0 3
4061: PUSH
4062: LD_INT 4
4064: ARRAY
4065: PPUSH
4066: CALL_OW 47
// end ;
4070: GO 4014
4072: POP
4073: POP
// end ; if mpBattleFlag > - 1 then
4074: LD_EXP 22
4078: PUSH
4079: LD_INT 1
4081: NEG
4082: GREATER
4083: IFFALSE 4242
// begin x := mpStartPos [ pos ] [ 1 ] ;
4085: LD_ADDR_VAR 0 5
4089: PUSH
4090: LD_EXP 21
4094: PUSH
4095: LD_VAR 0 8
4099: ARRAY
4100: PUSH
4101: LD_INT 1
4103: ARRAY
4104: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4105: LD_ADDR_VAR 0 6
4109: PUSH
4110: LD_EXP 21
4114: PUSH
4115: LD_VAR 0 8
4119: ARRAY
4120: PUSH
4121: LD_INT 2
4123: ARRAY
4124: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4125: LD_VAR 0 5
4129: PPUSH
4130: LD_VAR 0 6
4134: PPUSH
4135: LD_INT 12
4137: PPUSH
4138: LD_INT 2
4140: PPUSH
4141: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4145: LD_ADDR_EXP 23
4149: PUSH
4150: LD_EXP 23
4154: PPUSH
4155: LD_VAR 0 7
4159: PPUSH
4160: LD_VAR 0 7
4164: PPUSH
4165: LD_VAR 0 5
4169: PPUSH
4170: LD_VAR 0 6
4174: PPUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 100
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 2
4187: PUSH
4188: LD_INT 70
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 40
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 10
4207: PUSH
4208: LD_INT 25
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 20
4217: PUSH
4218: LD_INT 100
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: PPUSH
4232: CALL_OW 418
4236: PPUSH
4237: CALL_OW 1
4241: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4242: LD_EXP 26
4246: PUSH
4247: LD_INT 20
4249: PPUSH
4250: LD_VAR 0 7
4254: PPUSH
4255: CALL_OW 321
4259: PUSH
4260: LD_INT 1
4262: EQUAL
4263: AND
4264: IFFALSE 4281
// SetTech ( tech_SibDet , side , state_researched ) ;
4266: LD_INT 20
4268: PPUSH
4269: LD_VAR 0 7
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4281: LD_INT 24
4283: PPUSH
4284: LD_VAR 0 7
4288: PPUSH
4289: LD_INT 0
4291: PPUSH
4292: CALL_OW 322
// if mpSibBomb = 1 then
4296: LD_EXP 28
4300: PUSH
4301: LD_INT 1
4303: EQUAL
4304: IFFALSE 4323
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4306: LD_INT 25
4308: PPUSH
4309: LD_VAR 0 7
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL_OW 322
// end else
4321: GO 4338
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4323: LD_INT 25
4325: PPUSH
4326: LD_VAR 0 7
4330: PPUSH
4331: LD_INT 0
4333: PPUSH
4334: CALL_OW 322
// end ; if mpVehicles then
4338: LD_EXP 36
4342: IFFALSE 4441
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: LD_VAR 0 7
4353: PPUSH
4354: LD_VAR 0 9
4358: PPUSH
4359: LD_EXP 36
4363: PPUSH
4364: CALL 5555 0 3
4368: PUSH
4369: FOR_IN
4370: IFFALSE 4439
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4372: LD_VAR 0 3
4376: PPUSH
4377: LD_INT 0
4379: PPUSH
4380: LD_INT 5
4382: PPUSH
4383: CALL_OW 12
4387: PPUSH
4388: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4392: LD_VAR 0 3
4396: PPUSH
4397: LD_EXP 21
4401: PUSH
4402: LD_VAR 0 8
4406: ARRAY
4407: PUSH
4408: LD_INT 1
4410: ARRAY
4411: PPUSH
4412: LD_EXP 21
4416: PUSH
4417: LD_VAR 0 8
4421: ARRAY
4422: PUSH
4423: LD_INT 2
4425: ARRAY
4426: PPUSH
4427: LD_INT 12
4429: PPUSH
4430: LD_INT 0
4432: PPUSH
4433: CALL_OW 50
// end ;
4437: GO 4369
4439: POP
4440: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4441: LD_ADDR_VAR 0 11
4445: PUSH
4446: LD_VAR 0 7
4450: PPUSH
4451: LD_VAR 0 9
4455: PPUSH
4456: LD_EXP 24
4460: PPUSH
4461: LD_EXP 25
4465: PPUSH
4466: CALL 5057 0 4
4470: ST_TO_ADDR
// for j in team do
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: LD_VAR 0 11
4480: PUSH
4481: FOR_IN
4482: IFFALSE 4531
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4484: LD_VAR 0 3
4488: PPUSH
4489: LD_EXP 21
4493: PUSH
4494: LD_VAR 0 8
4498: ARRAY
4499: PUSH
4500: LD_INT 1
4502: ARRAY
4503: PPUSH
4504: LD_EXP 21
4508: PUSH
4509: LD_VAR 0 8
4513: ARRAY
4514: PUSH
4515: LD_INT 2
4517: ARRAY
4518: PPUSH
4519: LD_INT 12
4521: PPUSH
4522: LD_INT 0
4524: PPUSH
4525: CALL_OW 50
4529: GO 4481
4531: POP
4532: POP
// if mpApemans then
4533: LD_EXP 30
4537: IFFALSE 4643
// begin for j := 1 to mpApemans do
4539: LD_ADDR_VAR 0 3
4543: PUSH
4544: DOUBLE
4545: LD_INT 1
4547: DEC
4548: ST_TO_ADDR
4549: LD_EXP 30
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4641
// begin PrepareApeman ( - 5 ) ;
4557: LD_INT 5
4559: NEG
4560: PPUSH
4561: CALL 43337 0 1
// ape := CreateHuman ;
4565: LD_ADDR_VAR 0 10
4569: PUSH
4570: CALL_OW 44
4574: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4575: LD_ADDR_EXP 32
4579: PUSH
4580: LD_EXP 32
4584: PPUSH
4585: LD_VAR 0 8
4589: PPUSH
4590: LD_EXP 32
4594: PUSH
4595: LD_VAR 0 8
4599: ARRAY
4600: PPUSH
4601: LD_VAR 0 10
4605: PPUSH
4606: CALL 47089 0 2
4610: PPUSH
4611: CALL_OW 1
4615: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4616: LD_VAR 0 10
4620: PPUSH
4621: LD_EXP 31
4625: PUSH
4626: LD_VAR 0 8
4630: ARRAY
4631: PPUSH
4632: LD_INT 0
4634: PPUSH
4635: CALL_OW 49
// end ;
4639: GO 4554
4641: POP
4642: POP
// end ; end ;
4643: GO 3387
4645: POP
4646: POP
// if not mpTeamGame then
4647: LD_EXP 11
4651: NOT
4652: IFFALSE 4750
// begin for i := 1 to 8 do
4654: LD_ADDR_VAR 0 2
4658: PUSH
4659: DOUBLE
4660: LD_INT 1
4662: DEC
4663: ST_TO_ADDR
4664: LD_INT 8
4666: PUSH
4667: FOR_TO
4668: IFFALSE 4746
// for j := 1 to 8 do
4670: LD_ADDR_VAR 0 3
4674: PUSH
4675: DOUBLE
4676: LD_INT 1
4678: DEC
4679: ST_TO_ADDR
4680: LD_INT 8
4682: PUSH
4683: FOR_TO
4684: IFFALSE 4742
// if i <> j then
4686: LD_VAR 0 2
4690: PUSH
4691: LD_VAR 0 3
4695: NONEQUAL
4696: IFFALSE 4720
// SetAttitude ( i , j , att_neutral , true ) else
4698: LD_VAR 0 2
4702: PPUSH
4703: LD_VAR 0 3
4707: PPUSH
4708: LD_INT 0
4710: PPUSH
4711: LD_INT 1
4713: PPUSH
4714: CALL_OW 80
4718: GO 4740
// SetAttitude ( i , j , att_friend , true ) ;
4720: LD_VAR 0 2
4724: PPUSH
4725: LD_VAR 0 3
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: CALL_OW 80
4740: GO 4683
4742: POP
4743: POP
4744: GO 4667
4746: POP
4747: POP
// end else
4748: GO 4925
// begin if mpSharedVision then
4750: LD_EXP 16
4754: IFFALSE 4819
// begin for i in mpTeams do
4756: LD_ADDR_VAR 0 2
4760: PUSH
4761: LD_EXP 10
4765: PUSH
4766: FOR_IN
4767: IFFALSE 4817
// for j := 2 to i do
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: DOUBLE
4775: LD_INT 2
4777: DEC
4778: ST_TO_ADDR
4779: LD_VAR 0 2
4783: PUSH
4784: FOR_TO
4785: IFFALSE 4813
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4787: LD_VAR 0 2
4791: PUSH
4792: LD_VAR 0 3
4796: ARRAY
4797: PPUSH
4798: LD_VAR 0 2
4802: PUSH
4803: LD_INT 1
4805: ARRAY
4806: PPUSH
4807: CALL_OW 343
4811: GO 4784
4813: POP
4814: POP
4815: GO 4766
4817: POP
4818: POP
// end ; for i := 1 to 8 do
4819: LD_ADDR_VAR 0 2
4823: PUSH
4824: DOUBLE
4825: LD_INT 1
4827: DEC
4828: ST_TO_ADDR
4829: LD_INT 8
4831: PUSH
4832: FOR_TO
4833: IFFALSE 4923
// for j := 1 to 8 do
4835: LD_ADDR_VAR 0 3
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 8
4847: PUSH
4848: FOR_TO
4849: IFFALSE 4919
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4851: LD_EXP 8
4855: PUSH
4856: LD_VAR 0 2
4860: ARRAY
4861: PUSH
4862: LD_EXP 8
4866: PUSH
4867: LD_VAR 0 3
4871: ARRAY
4872: EQUAL
4873: IFFALSE 4897
// SetAttitude ( i , j , att_friend , true ) else
4875: LD_VAR 0 2
4879: PPUSH
4880: LD_VAR 0 3
4884: PPUSH
4885: LD_INT 1
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: CALL_OW 80
4895: GO 4917
// SetAttitude ( i , j , att_enemy , true ) ;
4897: LD_VAR 0 2
4901: PPUSH
4902: LD_VAR 0 3
4906: PPUSH
4907: LD_INT 2
4909: PPUSH
4910: LD_INT 1
4912: PPUSH
4913: CALL_OW 80
4917: GO 4848
4919: POP
4920: POP
4921: GO 4832
4923: POP
4924: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4925: LD_ADDR_OWVAR 71
4929: PUSH
4930: LD_EXP 9
4934: PUSH
4935: LD_OWVAR 2
4939: ARRAY
4940: ST_TO_ADDR
// if IAmSpec then
4941: CALL_OW 531
4945: IFFALSE 4986
// begin FogOff ( true ) ;
4947: LD_INT 1
4949: PPUSH
4950: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4954: LD_EXP 29
4958: PUSH
4959: LD_INT 1
4961: ARRAY
4962: PUSH
4963: LD_INT 2
4965: DIV
4966: PPUSH
4967: LD_EXP 29
4971: PUSH
4972: LD_INT 2
4974: ARRAY
4975: PUSH
4976: LD_INT 2
4978: DIV
4979: PPUSH
4980: CALL_OW 86
// end else
4984: GO 5032
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4986: LD_EXP 21
4990: PUSH
4991: LD_EXP 7
4995: PUSH
4996: LD_OWVAR 2
5000: ARRAY
5001: ARRAY
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: LD_EXP 21
5011: PUSH
5012: LD_EXP 7
5016: PUSH
5017: LD_OWVAR 2
5021: ARRAY
5022: ARRAY
5023: PUSH
5024: LD_INT 2
5026: ARRAY
5027: PPUSH
5028: CALL_OW 86
// end ; BeginBuildUp ;
5032: CALL 6033 0 0
// enable ( mpActive ) ;
5036: LD_INT 100
5038: ENABLE_MARKED
// enable ( mpGameType ) ;
5039: LD_EXP 3
5043: ENABLE_MARKED
// mpGameActive := true ;
5044: LD_ADDR_EXP 39
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// end ;
5052: LD_VAR 0 1
5056: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
5061: PPUSH
5062: PPUSH
// result := [ ] ;
5063: LD_ADDR_VAR 0 5
5067: PUSH
5068: EMPTY
5069: ST_TO_ADDR
// class := class_soldier ;
5070: LD_ADDR_VAR 0 8
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// uc_side := side ;
5078: LD_ADDR_OWVAR 20
5082: PUSH
5083: LD_VAR 0 1
5087: ST_TO_ADDR
// uc_nation := nation ;
5088: LD_ADDR_OWVAR 21
5092: PUSH
5093: LD_VAR 0 2
5097: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5098: LD_ADDR_OWVAR 26
5102: PUSH
5103: LD_OWVAR 19
5107: PUSH
5108: LD_VAR 0 1
5112: ARRAY
5113: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5114: LD_INT 1
5116: PPUSH
5117: LD_INT 2
5119: PPUSH
5120: CALL_OW 12
5124: PPUSH
5125: LD_VAR 0 8
5129: PPUSH
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: PLUS
5138: PPUSH
5139: CALL_OW 380
// hc_importance := 105 ;
5143: LD_ADDR_OWVAR 32
5147: PUSH
5148: LD_INT 105
5150: ST_TO_ADDR
// if Multiplayer then
5151: LD_OWVAR 4
5155: IFFALSE 5195
// begin hc_gallery := MULTIAVATARS ;
5157: LD_ADDR_OWVAR 33
5161: PUSH
5162: LD_STRING MULTIAVATARS
5164: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5165: LD_ADDR_OWVAR 34
5169: PUSH
5170: LD_VAR 0 1
5174: PPUSH
5175: CALL_OW 525
5179: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5180: LD_ADDR_OWVAR 27
5184: PUSH
5185: LD_VAR 0 1
5189: PPUSH
5190: CALL_OW 526
5194: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5195: LD_ADDR_VAR 0 5
5199: PUSH
5200: LD_VAR 0 5
5204: PPUSH
5205: CALL_OW 44
5209: PPUSH
5210: CALL 47089 0 2
5214: ST_TO_ADDR
// if mpTeamPreset then
5215: LD_LOC 1
5219: IFFALSE 5315
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5221: LD_LOC 1
5225: PUSH
5226: LD_INT 1
5228: ARRAY
5229: PPUSH
5230: LD_VAR 0 5
5234: PUSH
5235: LD_VAR 0 5
5239: ARRAY
5240: PPUSH
5241: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5245: LD_VAR 0 5
5249: PUSH
5250: LD_VAR 0 5
5254: ARRAY
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: LD_LOC 1
5263: PUSH
5264: LD_INT 1
5266: ARRAY
5267: PPUSH
5268: LD_INT 1
5270: PPUSH
5271: CALL_OW 260
5275: PPUSH
5276: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5280: LD_VAR 0 5
5284: PUSH
5285: LD_VAR 0 5
5289: ARRAY
5290: PPUSH
5291: LD_INT 2
5293: PPUSH
5294: LD_LOC 1
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: CALL_OW 260
5310: PPUSH
5311: CALL_OW 239
// end ; InitHc_All ( ) ;
5315: CALL_OW 584
// class := 2 ;
5319: LD_ADDR_VAR 0 8
5323: PUSH
5324: LD_INT 2
5326: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5327: LD_ADDR_VAR 0 6
5331: PUSH
5332: DOUBLE
5333: LD_INT 1
5335: DEC
5336: ST_TO_ADDR
5337: LD_VAR 0 3
5341: PUSH
5342: LD_INT 1
5344: MINUS
5345: PUSH
5346: FOR_TO
5347: IFFALSE 5531
// begin PrepareHuman ( false , class , skill ) ;
5349: LD_INT 0
5351: PPUSH
5352: LD_VAR 0 8
5356: PPUSH
5357: LD_VAR 0 4
5361: PPUSH
5362: CALL_OW 380
// un := CreateHuman ;
5366: LD_ADDR_VAR 0 7
5370: PUSH
5371: CALL_OW 44
5375: ST_TO_ADDR
// result := Join ( result , un ) ;
5376: LD_ADDR_VAR 0 5
5380: PUSH
5381: LD_VAR 0 5
5385: PPUSH
5386: LD_VAR 0 7
5390: PPUSH
5391: CALL 47089 0 2
5395: ST_TO_ADDR
// if mpTeamPreset then
5396: LD_LOC 1
5400: IFFALSE 5496
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5402: LD_LOC 1
5406: PUSH
5407: LD_VAR 0 6
5411: PUSH
5412: LD_INT 1
5414: PLUS
5415: ARRAY
5416: PPUSH
5417: LD_VAR 0 7
5421: PPUSH
5422: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5426: LD_VAR 0 7
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: LD_LOC 1
5438: PUSH
5439: LD_VAR 0 6
5443: PUSH
5444: LD_INT 1
5446: PLUS
5447: ARRAY
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: CALL_OW 260
5456: PPUSH
5457: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5461: LD_VAR 0 7
5465: PPUSH
5466: LD_INT 2
5468: PPUSH
5469: LD_LOC 1
5473: PUSH
5474: LD_VAR 0 6
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: ARRAY
5483: PPUSH
5484: LD_INT 2
5486: PPUSH
5487: CALL_OW 260
5491: PPUSH
5492: CALL_OW 239
// end ; class := Inc ( class ) ;
5496: LD_ADDR_VAR 0 8
5500: PUSH
5501: LD_VAR 0 8
5505: PPUSH
5506: CALL 48450 0 1
5510: ST_TO_ADDR
// if class = 5 then
5511: LD_VAR 0 8
5515: PUSH
5516: LD_INT 5
5518: EQUAL
5519: IFFALSE 5529
// class := 1 ;
5521: LD_ADDR_VAR 0 8
5525: PUSH
5526: LD_INT 1
5528: ST_TO_ADDR
// end ;
5529: GO 5346
5531: POP
5532: POP
// if not mpTeamPreset then
5533: LD_LOC 1
5537: NOT
5538: IFFALSE 5550
// mpTeamPreset := result ;
5540: LD_ADDR_LOC 1
5544: PUSH
5545: LD_VAR 0 5
5549: ST_TO_ADDR
// end ;
5550: LD_VAR 0 5
5554: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5555: LD_INT 0
5557: PPUSH
5558: PPUSH
// result := [ ] ;
5559: LD_ADDR_VAR 0 4
5563: PUSH
5564: EMPTY
5565: ST_TO_ADDR
// if not vehicles then
5566: LD_VAR 0 3
5570: NOT
5571: IFFALSE 5575
// exit ;
5573: GO 5734
// for i := 1 to vehicles [ nation ] do
5575: LD_ADDR_VAR 0 5
5579: PUSH
5580: DOUBLE
5581: LD_INT 1
5583: DEC
5584: ST_TO_ADDR
5585: LD_VAR 0 3
5589: PUSH
5590: LD_VAR 0 2
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5732
// begin uc_side := side ;
5599: LD_ADDR_OWVAR 20
5603: PUSH
5604: LD_VAR 0 1
5608: ST_TO_ADDR
// uc_nation := nation ;
5609: LD_ADDR_OWVAR 21
5613: PUSH
5614: LD_VAR 0 2
5618: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5619: LD_VAR 0 3
5623: PUSH
5624: LD_VAR 0 2
5628: ARRAY
5629: PUSH
5630: LD_VAR 0 5
5634: ARRAY
5635: PUSH
5636: LD_INT 1
5638: ARRAY
5639: PPUSH
5640: LD_VAR 0 3
5644: PUSH
5645: LD_VAR 0 2
5649: ARRAY
5650: PUSH
5651: LD_VAR 0 5
5655: ARRAY
5656: PUSH
5657: LD_INT 2
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 3
5665: PUSH
5666: LD_VAR 0 2
5670: ARRAY
5671: PUSH
5672: LD_VAR 0 5
5676: ARRAY
5677: PUSH
5678: LD_INT 3
5680: ARRAY
5681: PPUSH
5682: LD_VAR 0 3
5686: PUSH
5687: LD_VAR 0 2
5691: ARRAY
5692: PUSH
5693: LD_VAR 0 5
5697: ARRAY
5698: PUSH
5699: LD_INT 4
5701: ARRAY
5702: PPUSH
5703: LD_INT 80
5705: PPUSH
5706: CALL 14218 0 5
// result := Join ( result , CreateVehicle ) ;
5710: LD_ADDR_VAR 0 4
5714: PUSH
5715: LD_VAR 0 4
5719: PPUSH
5720: CALL_OW 45
5724: PPUSH
5725: CALL 47089 0 2
5729: ST_TO_ADDR
// end ;
5730: GO 5596
5732: POP
5733: POP
// end ;
5734: LD_VAR 0 4
5738: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
// for i in mpBattleFlags do
5743: LD_ADDR_VAR 0 3
5747: PUSH
5748: LD_EXP 23
5752: PUSH
5753: FOR_IN
5754: IFFALSE 5831
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: LD_INT 1
5763: PUSH
5764: LD_VAR 0 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 2
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: LD_REAL  7.00000000000000E-0001
5784: MUL
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: LD_INT 3
5792: PUSH
5793: LD_VAR 0 1
5797: PUSH
5798: LD_REAL  4.00000000000000E-0001
5801: MUL
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 20
5809: PUSH
5810: LD_VAR 0 1
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 423
5829: GO 5753
5831: POP
5832: POP
// end ;
5833: LD_VAR 0 2
5837: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5838: LD_INT 100
5840: IFFALSE 5935
5842: GO 5844
5844: DISABLE
5845: LD_INT 0
5847: PPUSH
5848: PPUSH
// begin if mpBattleFlag <= 0 then
5849: LD_EXP 22
5853: PUSH
5854: LD_INT 0
5856: LESSEQUAL
5857: IFFALSE 5861
// exit ;
5859: GO 5935
// strength := 100 ;
5861: LD_ADDR_VAR 0 2
5865: PUSH
5866: LD_INT 100
5868: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5869: LD_EXP 22
5873: PPUSH
5874: CALL_OW 67
// strength := Dec ( strength ) ;
5878: LD_ADDR_VAR 0 2
5882: PUSH
5883: LD_VAR 0 2
5887: PPUSH
5888: CALL 48472 0 1
5892: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5893: LD_VAR 0 2
5897: PPUSH
5898: CALL 5739 0 1
// until not strength ;
5902: LD_VAR 0 2
5906: NOT
5907: IFFALSE 5869
// for i in mpBattleFlags do
5909: LD_ADDR_VAR 0 1
5913: PUSH
5914: LD_EXP 23
5918: PUSH
5919: FOR_IN
5920: IFFALSE 5933
// KillBattleFlag ( i ) ;
5922: LD_VAR 0 1
5926: PPUSH
5927: CALL_OW 419
5931: GO 5919
5933: POP
5934: POP
// end ;
5935: PPOPN 2
5937: END
// every 0 0$1 marked mpActive do var side , tmp ;
5938: GO 5940
5940: DISABLE
5941: LD_INT 0
5943: PPUSH
5944: PPUSH
// begin if mpSibBomb <= 1 then
5945: LD_EXP 28
5949: PUSH
5950: LD_INT 1
5952: LESSEQUAL
5953: IFFALSE 5957
// exit ;
5955: GO 6030
// tmp := mpSibBomb ;
5957: LD_ADDR_VAR 0 2
5961: PUSH
5962: LD_EXP 28
5966: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5967: LD_INT 35
5969: PPUSH
5970: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: LD_VAR 0 2
5983: PUSH
5984: LD_INT 35
5986: MINUS
5987: ST_TO_ADDR
// until not tmp ;
5988: LD_VAR 0 2
5992: NOT
5993: IFFALSE 5967
// for side := 1 to 8 do
5995: LD_ADDR_VAR 0 1
5999: PUSH
6000: DOUBLE
6001: LD_INT 1
6003: DEC
6004: ST_TO_ADDR
6005: LD_INT 8
6007: PUSH
6008: FOR_TO
6009: IFFALSE 6028
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6011: LD_INT 25
6013: PPUSH
6014: LD_VAR 0 1
6018: PPUSH
6019: LD_INT 1
6021: PPUSH
6022: CALL_OW 322
6026: GO 6008
6028: POP
6029: POP
// end ;
6030: PPOPN 2
6032: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6033: LD_INT 0
6035: PPUSH
6036: PPUSH
6037: PPUSH
// mpBuildUpTimeDelay := 0 ;
6038: LD_ADDR_EXP 42
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// if not mpBuildUpTime then
6046: LD_EXP 20
6050: NOT
6051: IFFALSE 6055
// exit ;
6053: GO 6238
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6055: LD_ADDR_EXP 42
6059: PUSH
6060: LD_INT 8400
6062: PUSH
6063: LD_INT 2100
6065: PUSH
6066: LD_EXP 20
6070: MUL
6071: PLUS
6072: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6073: LD_ADDR_EXP 43
6077: PUSH
6078: LD_INT 1
6080: ST_TO_ADDR
// for i := 1 to 8 do
6081: LD_ADDR_VAR 0 2
6085: PUSH
6086: DOUBLE
6087: LD_INT 1
6089: DEC
6090: ST_TO_ADDR
6091: LD_INT 8
6093: PUSH
6094: FOR_TO
6095: IFFALSE 6236
// if mpSidePositions [ i ] then
6097: LD_EXP 7
6101: PUSH
6102: LD_VAR 0 2
6106: ARRAY
6107: IFFALSE 6234
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6109: LD_EXP 19
6113: PUSH
6114: LD_EXP 7
6118: PUSH
6119: LD_VAR 0 2
6123: ARRAY
6124: ARRAY
6125: PPUSH
6126: LD_INT 5
6128: PPUSH
6129: CALL_OW 424
// for j := 1 to 8 do
6133: LD_ADDR_VAR 0 3
6137: PUSH
6138: DOUBLE
6139: LD_INT 1
6141: DEC
6142: ST_TO_ADDR
6143: LD_INT 8
6145: PUSH
6146: FOR_TO
6147: IFFALSE 6232
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6149: LD_EXP 7
6153: PUSH
6154: LD_VAR 0 3
6158: ARRAY
6159: PUSH
6160: LD_EXP 8
6164: PUSH
6165: LD_VAR 0 2
6169: ARRAY
6170: PUSH
6171: LD_EXP 8
6175: PUSH
6176: LD_VAR 0 3
6180: ARRAY
6181: NONEQUAL
6182: PUSH
6183: LD_EXP 11
6187: NOT
6188: PUSH
6189: LD_VAR 0 2
6193: PUSH
6194: LD_VAR 0 3
6198: NONEQUAL
6199: AND
6200: OR
6201: AND
6202: IFFALSE 6230
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6204: LD_VAR 0 3
6208: PPUSH
6209: LD_EXP 19
6213: PUSH
6214: LD_EXP 7
6218: PUSH
6219: LD_VAR 0 2
6223: ARRAY
6224: ARRAY
6225: PPUSH
6226: CALL_OW 333
6230: GO 6146
6232: POP
6233: POP
// end ;
6234: GO 6094
6236: POP
6237: POP
// end ;
6238: LD_VAR 0 1
6242: RET
// function EndBuildUp ; var i , j ; begin
6243: LD_INT 0
6245: PPUSH
6246: PPUSH
6247: PPUSH
// mpBuildUpTimeActive := false ;
6248: LD_ADDR_EXP 43
6252: PUSH
6253: LD_INT 0
6255: ST_TO_ADDR
// for i := 1 to 8 do
6256: LD_ADDR_VAR 0 2
6260: PUSH
6261: DOUBLE
6262: LD_INT 1
6264: DEC
6265: ST_TO_ADDR
6266: LD_INT 8
6268: PUSH
6269: FOR_TO
6270: IFFALSE 6411
// if mpSidePositions [ i ] then
6272: LD_EXP 7
6276: PUSH
6277: LD_VAR 0 2
6281: ARRAY
6282: IFFALSE 6409
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6284: LD_EXP 19
6288: PUSH
6289: LD_EXP 7
6293: PUSH
6294: LD_VAR 0 2
6298: ARRAY
6299: ARRAY
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 424
// for j := 1 to 8 do
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: DOUBLE
6314: LD_INT 1
6316: DEC
6317: ST_TO_ADDR
6318: LD_INT 8
6320: PUSH
6321: FOR_TO
6322: IFFALSE 6407
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6324: LD_EXP 7
6328: PUSH
6329: LD_VAR 0 3
6333: ARRAY
6334: PUSH
6335: LD_EXP 8
6339: PUSH
6340: LD_VAR 0 2
6344: ARRAY
6345: PUSH
6346: LD_EXP 8
6350: PUSH
6351: LD_VAR 0 3
6355: ARRAY
6356: NONEQUAL
6357: PUSH
6358: LD_EXP 11
6362: NOT
6363: PUSH
6364: LD_VAR 0 2
6368: PUSH
6369: LD_VAR 0 3
6373: NONEQUAL
6374: AND
6375: OR
6376: AND
6377: IFFALSE 6405
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6379: LD_VAR 0 3
6383: PPUSH
6384: LD_EXP 19
6388: PUSH
6389: LD_EXP 7
6393: PUSH
6394: LD_VAR 0 2
6398: ARRAY
6399: ARRAY
6400: PPUSH
6401: CALL_OW 334
6405: GO 6321
6407: POP
6408: POP
// end ;
6409: GO 6269
6411: POP
6412: POP
// end ;
6413: LD_VAR 0 1
6417: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6418: LD_EXP 43
6422: IFFALSE 6597
6424: GO 6426
6426: DISABLE
6427: LD_INT 0
6429: PPUSH
6430: PPUSH
// begin for i := 1 to 8 do
6431: LD_ADDR_VAR 0 1
6435: PUSH
6436: DOUBLE
6437: LD_INT 1
6439: DEC
6440: ST_TO_ADDR
6441: LD_INT 8
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6594
// if mpSidePositions [ i ] then
6447: LD_EXP 7
6451: PUSH
6452: LD_VAR 0 1
6456: ARRAY
6457: IFFALSE 6592
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6459: LD_ADDR_VAR 0 2
6463: PUSH
6464: LD_EXP 19
6468: PUSH
6469: LD_EXP 7
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: ARRAY
6480: PPUSH
6481: LD_INT 2
6483: PUSH
6484: LD_INT 21
6486: PUSH
6487: LD_INT 1
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 21
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 22
6511: PUSH
6512: LD_OWVAR 2
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 70
6529: PUSH
6530: FOR_IN
6531: IFFALSE 6590
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6533: LD_EXP 8
6537: PUSH
6538: LD_VAR 0 1
6542: ARRAY
6543: PUSH
6544: LD_EXP 8
6548: PUSH
6549: LD_OWVAR 2
6553: ARRAY
6554: NONEQUAL
6555: PUSH
6556: LD_EXP 11
6560: NOT
6561: PUSH
6562: LD_VAR 0 1
6566: PUSH
6567: LD_OWVAR 2
6571: NONEQUAL
6572: AND
6573: OR
6574: IFFALSE 6588
// ComMoveToArea ( un , BuildUpEscape ) ;
6576: LD_VAR 0 2
6580: PPUSH
6581: LD_INT 16
6583: PPUSH
6584: CALL_OW 113
6588: GO 6530
6590: POP
6591: POP
6592: GO 6444
6594: POP
6595: POP
// enable ;
6596: ENABLE
// end ;
6597: PPOPN 2
6599: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6600: LD_EXP 20
6604: IFFALSE 6654
6606: GO 6608
6608: DISABLE
6609: LD_INT 0
6611: PPUSH
// begin tmp := mpBuildUpTime ;
6612: LD_ADDR_VAR 0 1
6616: PUSH
6617: LD_EXP 20
6621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6622: LD_INT 35
6624: PPUSH
6625: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6629: LD_ADDR_VAR 0 1
6633: PUSH
6634: LD_VAR 0 1
6638: PUSH
6639: LD_INT 35
6641: MINUS
6642: ST_TO_ADDR
// until not tmp ;
6643: LD_VAR 0 1
6647: NOT
6648: IFFALSE 6622
// EndBuildUp ;
6650: CALL 6243 0 0
// end ;
6654: PPOPN 1
6656: END
// every 0 0$1 trigger mpActive marked mpWin do
6657: LD_INT 100
6659: IFFALSE 6693
6661: GO 6663
6663: DISABLE
// begin if IAmServer then
6664: CALL_OW 518
6668: IFFALSE 6677
// wait ( 0 0$3 ) ;
6670: LD_INT 105
6672: PPUSH
6673: CALL_OW 67
// if Multiplayer then
6677: LD_OWVAR 4
6681: IFFALSE 6689
// YouWinInMultiplayer else
6683: CALL_OW 106
6687: GO 6693
// YouWin ;
6689: CALL_OW 103
// end ;
6693: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6694: LD_INT 0
6696: PPUSH
// result := false ;
6697: LD_ADDR_VAR 0 3
6701: PUSH
6702: LD_INT 0
6704: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6705: LD_VAR 0 1
6709: PUSH
6710: LD_INT 1
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6724
6716: LD_INT 5
6718: DOUBLE
6719: EQUAL
6720: IFTRUE 6724
6722: GO 6797
6724: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6725: LD_ADDR_VAR 0 3
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 1
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 33
6757: PUSH
6758: LD_INT 3
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 33
6767: PUSH
6768: LD_INT 5
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PPUSH
6785: CALL_OW 69
6789: PPUSH
6790: CALL 11480 0 1
6794: ST_TO_ADDR
// end ; GameTypeSurvival :
6795: GO 7032
6797: LD_INT 2
6799: DOUBLE
6800: EQUAL
6801: IFTRUE 6805
6803: GO 6933
6805: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6806: LD_ADDR_VAR 0 3
6810: PUSH
6811: LD_INT 22
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 2
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 0
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: LD_INT 1
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: CALL 11480 0 1
6864: PUSH
6865: LD_INT 22
6867: PUSH
6868: LD_VAR 0 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 2
6879: PUSH
6880: LD_INT 21
6882: PUSH
6883: LD_INT 1
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 33
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 33
6902: PUSH
6903: LD_INT 5
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 69
6924: PPUSH
6925: CALL 11480 0 1
6929: AND
6930: ST_TO_ADDR
// end ; GameTypeKing :
6931: GO 7032
6933: LD_INT 3
6935: DOUBLE
6936: EQUAL
6937: IFTRUE 6941
6939: GO 7031
6941: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6942: LD_ADDR_VAR 0 3
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_VAR 0 2
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 2
6961: PUSH
6962: LD_INT 21
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 33
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 33
6984: PUSH
6985: LD_INT 5
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: PPUSH
7007: CALL 11480 0 1
7011: PUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL 58725 0 1
7021: PUSH
7022: LD_EXP 35
7026: LESS
7027: AND
7028: ST_TO_ADDR
// end ; end ;
7029: GO 7032
7031: POP
// end ;
7032: LD_VAR 0 3
7036: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7037: LD_INT 100
7039: IFFALSE 7261
7041: GO 7043
7043: DISABLE
7044: LD_INT 0
7046: PPUSH
7047: PPUSH
// begin if Multiplayer then
7048: LD_OWVAR 4
7052: IFFALSE 7060
// SetPlayerSpectator ( ) else
7054: CALL_OW 572
7058: GO 7069
// FogOff ( your_side ) ;
7060: LD_OWVAR 2
7064: PPUSH
7065: CALL_OW 344
// repeat gameIsOn := false ;
7069: LD_ADDR_VAR 0 1
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// for i := 1 to 8 do
7077: LD_ADDR_VAR 0 2
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_INT 8
7089: PUSH
7090: FOR_TO
7091: IFFALSE 7213
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7093: LD_EXP 7
7097: PUSH
7098: LD_VAR 0 2
7102: ARRAY
7103: PUSH
7104: LD_VAR 0 2
7108: PPUSH
7109: CALL_OW 108
7113: AND
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_OWVAR 2
7124: NONEQUAL
7125: AND
7126: IFFALSE 7211
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7128: LD_EXP 8
7132: PUSH
7133: LD_VAR 0 2
7137: ARRAY
7138: NOT
7139: PUSH
7140: LD_EXP 8
7144: PUSH
7145: LD_VAR 0 2
7149: ARRAY
7150: PUSH
7151: LD_EXP 8
7155: PUSH
7156: LD_OWVAR 2
7160: ARRAY
7161: NONEQUAL
7162: PUSH
7163: LD_OWVAR 2
7167: PPUSH
7168: LD_VAR 0 2
7172: PPUSH
7173: CALL_OW 81
7177: PUSH
7178: LD_INT 1
7180: NONEQUAL
7181: AND
7182: OR
7183: IFFALSE 7211
// if HasPowerByGameType ( mpGameType , i ) then
7185: LD_EXP 3
7189: PPUSH
7190: LD_VAR 0 2
7194: PPUSH
7195: CALL 6694 0 2
7199: IFFALSE 7211
// begin gameIsOn := true ;
7201: LD_ADDR_VAR 0 1
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// break ;
7209: GO 7213
// end ;
7211: GO 7090
7213: POP
7214: POP
// wait ( 100 ) ;
7215: LD_INT 100
7217: PPUSH
7218: CALL_OW 67
// until not gameIsOn ;
7222: LD_VAR 0 1
7226: NOT
7227: IFFALSE 7069
// if IAmServer then
7229: CALL_OW 518
7233: IFFALSE 7242
// wait ( 0 0$3 ) ;
7235: LD_INT 105
7237: PPUSH
7238: CALL_OW 67
// if Multiplayer then
7242: LD_OWVAR 4
7246: IFFALSE 7254
// YouLostInMultiplayer else
7248: CALL_OW 107
7252: GO 7261
// YouLost (  ) ;
7254: LD_STRING 
7256: PPUSH
7257: CALL_OW 104
// end ;
7261: PPOPN 2
7263: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7264: LD_EXP 33
7268: IFFALSE 7644
7270: GO 7272
7272: DISABLE
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
7277: PPUSH
7278: PPUSH
7279: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7280: LD_ADDR_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PUSH
7288: LD_INT 2
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: LD_INT 4
7296: PUSH
7297: LD_INT 5
7299: PUSH
7300: LD_INT 6
7302: PUSH
7303: LD_INT 7
7305: PUSH
7306: LD_INT 8
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7319: LD_INT 350
7321: PPUSH
7322: CALL_OW 67
// for i := 1 to 8 do
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_INT 8
7338: PUSH
7339: FOR_TO
7340: IFFALSE 7614
// begin j := sides [ i ] ;
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_VAR 0 5
7351: PUSH
7352: LD_VAR 0 1
7356: ARRAY
7357: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7358: LD_EXP 40
7362: PUSH
7363: LD_VAR 0 2
7367: ARRAY
7368: PPUSH
7369: CALL 11480 0 1
7373: PUSH
7374: LD_VAR 0 2
7378: PPUSH
7379: CALL_OW 108
7383: AND
7384: PUSH
7385: LD_EXP 3
7389: PPUSH
7390: LD_VAR 0 2
7394: PPUSH
7395: CALL 6694 0 2
7399: AND
7400: IFFALSE 7612
// begin wait ( mpRespawn div 3 ) ;
7402: LD_EXP 33
7406: PUSH
7407: LD_INT 3
7409: DIV
7410: PPUSH
7411: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7415: LD_ADDR_VAR 0 3
7419: PUSH
7420: LD_INT 22
7422: PUSH
7423: LD_VAR 0 2
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 50
7434: PUSH
7435: EMPTY
7436: LIST
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 0
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 30
7453: PUSH
7454: LD_INT 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: PPUSH
7471: CALL_OW 69
7475: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7476: LD_VAR 0 3
7480: NOT
7481: PUSH
7482: LD_VAR 0 2
7486: PPUSH
7487: CALL_OW 108
7491: NOT
7492: OR
7493: PUSH
7494: LD_EXP 3
7498: PPUSH
7499: LD_VAR 0 2
7503: PPUSH
7504: CALL 6694 0 2
7508: NOT
7509: OR
7510: IFFALSE 7514
// continue ;
7512: GO 7339
// spawn := tmp [ 1 ] ;
7514: LD_ADDR_VAR 0 4
7518: PUSH
7519: LD_VAR 0 3
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7528: LD_EXP 40
7532: PUSH
7533: LD_VAR 0 2
7537: ARRAY
7538: PUSH
7539: LD_INT 1
7541: ARRAY
7542: PPUSH
7543: LD_VAR 0 4
7547: PPUSH
7548: CALL_OW 250
7552: PPUSH
7553: LD_VAR 0 4
7557: PPUSH
7558: CALL_OW 251
7562: PPUSH
7563: LD_INT 32
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7573: LD_ADDR_EXP 40
7577: PUSH
7578: LD_EXP 40
7582: PPUSH
7583: LD_VAR 0 2
7587: PPUSH
7588: LD_EXP 40
7592: PUSH
7593: LD_VAR 0 2
7597: ARRAY
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: CALL_OW 3
7606: PPUSH
7607: CALL_OW 1
7611: ST_TO_ADDR
// end ; end ;
7612: GO 7339
7614: POP
7615: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7616: LD_ADDR_VAR 0 5
7620: PUSH
7621: LD_VAR 0 5
7625: PPUSH
7626: LD_INT 1
7628: PPUSH
7629: LD_INT 8
7631: PPUSH
7632: LD_INT 1
7634: PPUSH
7635: CALL 13758 0 4
7639: ST_TO_ADDR
// until false ;
7640: LD_INT 0
7642: IFFALSE 7319
// end ;
7644: PPOPN 5
7646: END
// every 0 0$1 marked mpActive do
7647: GO 7649
7649: DISABLE
// begin enable ;
7650: ENABLE
// if not mpDisplayStrings then
7651: LD_EXP 38
7655: NOT
7656: IFFALSE 7667
// begin display_strings := [ ] ;
7658: LD_ADDR_OWVAR 47
7662: PUSH
7663: EMPTY
7664: ST_TO_ADDR
// exit ;
7665: GO 7677
// end ; display_strings := mpDisplayStrings ;
7667: LD_ADDR_OWVAR 47
7671: PUSH
7672: LD_EXP 38
7676: ST_TO_ADDR
// end ; end_of_file
7677: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7678: LD_INT 0
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
// if GetType ( un ) = unit_vehicle then
7689: LD_VAR 0 1
7693: PPUSH
7694: CALL_OW 247
7698: PUSH
7699: LD_INT 2
7701: EQUAL
7702: IFFALSE 7706
// exit ;
7704: GO 8338
// side := GetSide ( un ) ;
7706: LD_ADDR_VAR 0 9
7710: PUSH
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 255
7720: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7721: LD_EXP 3
7725: PUSH
7726: LD_INT 2
7728: EQUAL
7729: IFFALSE 7805
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 266
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: IN
7751: IFFALSE 7805
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7753: LD_ADDR_VAR 0 3
7757: PUSH
7758: LD_INT 22
7760: PUSH
7761: LD_VAR 0 9
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 21
7772: PUSH
7773: LD_INT 1
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: PUSH
7789: FOR_IN
7790: IFFALSE 7803
// KillUnit ( i ) ;
7792: LD_VAR 0 3
7796: PPUSH
7797: CALL_OW 66
7801: GO 7789
7803: POP
7804: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 257
7814: PUSH
7815: LD_INT 12
7817: PUSH
7818: LD_INT 17
7820: PUSH
7821: LD_INT 15
7823: PUSH
7824: LD_INT 16
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: IN
7833: PUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 263
7843: PUSH
7844: LD_INT 5
7846: EQUAL
7847: OR
7848: IFFALSE 8067
// begin tag := 0 ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: LD_INT 0
7857: ST_TO_ADDR
// for i := 1 to 8 do
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: DOUBLE
7864: LD_INT 1
7866: DEC
7867: ST_TO_ADDR
7868: LD_INT 8
7870: PUSH
7871: FOR_TO
7872: IFFALSE 7906
// if un in mpApePosIndex [ i ] then
7874: LD_VAR 0 1
7878: PUSH
7879: LD_EXP 32
7883: PUSH
7884: LD_VAR 0 3
7888: ARRAY
7889: IN
7890: IFFALSE 7904
// begin tag := i ;
7892: LD_ADDR_VAR 0 5
7896: PUSH
7897: LD_VAR 0 3
7901: ST_TO_ADDR
// break ;
7902: GO 7906
// end ;
7904: GO 7871
7906: POP
7907: POP
// if not tag then
7908: LD_VAR 0 5
7912: NOT
7913: IFFALSE 7917
// exit ;
7915: GO 8338
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7917: LD_ADDR_VAR 0 7
7921: PUSH
7922: LD_EXP 31
7926: PUSH
7927: LD_EXP 7
7931: PUSH
7932: LD_VAR 0 5
7936: ARRAY
7937: ARRAY
7938: ST_TO_ADDR
// if not area then
7939: LD_VAR 0 7
7943: NOT
7944: IFFALSE 7948
// exit ;
7946: GO 8338
// wait ( 4 4$00 ) ;
7948: LD_INT 8400
7950: PPUSH
7951: CALL_OW 67
// repeat wait ( 10 ) ;
7955: LD_INT 10
7957: PPUSH
7958: CALL_OW 67
// until not mpBlockRespThread ;
7962: LD_EXP 41
7966: NOT
7967: IFFALSE 7955
// mpBlockRespThread := true ;
7969: LD_ADDR_EXP 41
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7977: LD_INT 0
7979: PPUSH
7980: CALL 43337 0 1
// ape := CreateHuman ;
7984: LD_ADDR_VAR 0 4
7988: PUSH
7989: CALL_OW 44
7993: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
7994: LD_ADDR_EXP 32
7998: PUSH
7999: LD_EXP 32
8003: PPUSH
8004: LD_VAR 0 5
8008: PPUSH
8009: LD_EXP 32
8013: PUSH
8014: LD_VAR 0 5
8018: ARRAY
8019: PPUSH
8020: LD_VAR 0 4
8024: PPUSH
8025: CALL 47089 0 2
8029: PPUSH
8030: CALL_OW 1
8034: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8035: LD_VAR 0 4
8039: PPUSH
8040: LD_VAR 0 7
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 49
// wait ( 10 ) ;
8052: LD_INT 10
8054: PPUSH
8055: CALL_OW 67
// mpBlockRespThread := false ;
8059: LD_ADDR_EXP 41
8063: PUSH
8064: LD_INT 0
8066: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8067: LD_VAR 0 1
8071: PPUSH
8072: CALL_OW 247
8076: PUSH
8077: LD_INT 1
8079: EQUAL
8080: PUSH
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 248
8090: PUSH
8091: LD_INT 0
8093: GREATER
8094: AND
8095: IFFALSE 8338
// begin if not mpRespawn then
8097: LD_EXP 33
8101: NOT
8102: IFFALSE 8106
// exit ;
8104: GO 8338
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8106: LD_VAR 0 9
8110: PPUSH
8111: CALL_OW 108
8115: NOT
8116: PUSH
8117: LD_EXP 3
8121: PPUSH
8122: LD_VAR 0 9
8126: PPUSH
8127: CALL 6694 0 2
8131: NOT
8132: AND
8133: IFFALSE 8137
// exit ;
8135: GO 8338
// side := GetSide ( un ) ;
8137: LD_ADDR_VAR 0 9
8141: PUSH
8142: LD_VAR 0 1
8146: PPUSH
8147: CALL_OW 255
8151: ST_TO_ADDR
// nation := GetNation ( un ) ;
8152: LD_ADDR_VAR 0 8
8156: PUSH
8157: LD_VAR 0 1
8161: PPUSH
8162: CALL_OW 248
8166: ST_TO_ADDR
// class := GetClass ( un ) ;
8167: LD_ADDR_VAR 0 6
8171: PUSH
8172: LD_VAR 0 1
8176: PPUSH
8177: CALL_OW 257
8181: ST_TO_ADDR
// if class > 4 then
8182: LD_VAR 0 6
8186: PUSH
8187: LD_INT 4
8189: GREATER
8190: IFFALSE 8200
// class := 1 ;
8192: LD_ADDR_VAR 0 6
8196: PUSH
8197: LD_INT 1
8199: ST_TO_ADDR
// repeat wait ( 10 ) ;
8200: LD_INT 10
8202: PPUSH
8203: CALL_OW 67
// until not mpBlockRespThread ;
8207: LD_EXP 41
8211: NOT
8212: IFFALSE 8200
// mpBlockRespThread := true ;
8214: LD_ADDR_EXP 41
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// uc_side := side ;
8222: LD_ADDR_OWVAR 20
8226: PUSH
8227: LD_VAR 0 9
8231: ST_TO_ADDR
// uc_nation := nation ;
8232: LD_ADDR_OWVAR 21
8236: PUSH
8237: LD_VAR 0 8
8241: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8242: LD_INT 0
8244: PPUSH
8245: LD_VAR 0 6
8249: PPUSH
8250: LD_INT 2
8252: PPUSH
8253: CALL_OW 380
// un := CreateHuman ;
8257: LD_ADDR_VAR 0 1
8261: PUSH
8262: CALL_OW 44
8266: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8267: LD_ADDR_EXP 40
8271: PUSH
8272: LD_EXP 40
8276: PPUSH
8277: LD_VAR 0 9
8281: PPUSH
8282: LD_EXP 40
8286: PUSH
8287: LD_VAR 0 9
8291: ARRAY
8292: PPUSH
8293: LD_EXP 40
8297: PUSH
8298: LD_VAR 0 9
8302: ARRAY
8303: PUSH
8304: LD_INT 1
8306: PLUS
8307: PPUSH
8308: LD_VAR 0 1
8312: PPUSH
8313: CALL_OW 1
8317: PPUSH
8318: CALL_OW 1
8322: ST_TO_ADDR
// wait ( 10 ) ;
8323: LD_INT 10
8325: PPUSH
8326: CALL_OW 67
// mpBlockRespThread := false ;
8330: LD_ADDR_EXP 41
8334: PUSH
8335: LD_INT 0
8337: ST_TO_ADDR
// end ; end ;
8338: LD_VAR 0 2
8342: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8343: LD_INT 0
8345: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 266
8355: PUSH
8356: LD_INT 0
8358: PUSH
8359: LD_INT 1
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: IN
8366: IFFALSE 8391
// SetBName ( building , @ & GetSide ( building ) ) ;
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_STRING @
8375: PUSH
8376: LD_VAR 0 1
8380: PPUSH
8381: CALL_OW 255
8385: STR
8386: PPUSH
8387: CALL_OW 500
// end ;
8391: LD_VAR 0 2
8395: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8396: LD_INT 0
8398: PPUSH
8399: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8400: LD_EXP 3
8404: PUSH
8405: LD_INT 2
8407: EQUAL
8408: PUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: CALL_OW 266
8418: PUSH
8419: LD_INT 0
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: IN
8429: AND
8430: IFFALSE 8495
// begin KillUnit ( building ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8441: LD_ADDR_VAR 0 5
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_VAR 0 2
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 21
8460: PUSH
8461: LD_INT 1
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PPUSH
8472: CALL_OW 69
8476: PUSH
8477: FOR_IN
8478: IFFALSE 8491
// KillUnit ( i ) ;
8480: LD_VAR 0 5
8484: PPUSH
8485: CALL_OW 66
8489: GO 8477
8491: POP
8492: POP
// exit ;
8493: GO 8540
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8495: LD_VAR 0 1
8499: PPUSH
8500: CALL_OW 266
8504: PUSH
8505: LD_INT 0
8507: PUSH
8508: LD_INT 1
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: IN
8515: IFFALSE 8540
// SetBName ( building , @ & GetSide ( building ) ) ;
8517: LD_VAR 0 1
8521: PPUSH
8522: LD_STRING @
8524: PUSH
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 255
8534: STR
8535: PPUSH
8536: CALL_OW 500
// end ; end_of_file
8540: LD_VAR 0 4
8544: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8545: LD_EXP 39
8549: PUSH
8550: CALL 8755 0 0
8554: AND
8555: PUSH
8556: LD_OWVAR 4
8560: AND
8561: IFFALSE 8752
8563: GO 8565
8565: DISABLE
8566: LD_INT 0
8568: PPUSH
8569: PPUSH
// begin canWin := false ;
8570: LD_ADDR_VAR 0 2
8574: PUSH
8575: LD_INT 0
8577: ST_TO_ADDR
// if not HasPower ( your_side ) then
8578: LD_OWVAR 2
8582: PPUSH
8583: CALL 8795 0 1
8587: NOT
8588: IFFALSE 8599
// begin Multiplayer_Loose_Message ;
8590: CALL_OW 521
// enable ( mpLose ) ;
8594: LD_INT 102
8596: ENABLE_MARKED
// end else
8597: GO 8752
// begin canWin := true ;
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// for i := 1 to 8 do
8607: LD_ADDR_VAR 0 1
8611: PUSH
8612: DOUBLE
8613: LD_INT 1
8615: DEC
8616: ST_TO_ADDR
8617: LD_INT 8
8619: PUSH
8620: FOR_TO
8621: IFFALSE 8738
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8623: LD_EXP 7
8627: PUSH
8628: LD_VAR 0 1
8632: ARRAY
8633: PUSH
8634: LD_VAR 0 1
8638: PPUSH
8639: CALL_OW 108
8643: AND
8644: PUSH
8645: LD_VAR 0 1
8649: PUSH
8650: LD_OWVAR 2
8654: NONEQUAL
8655: AND
8656: IFFALSE 8736
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8658: LD_EXP 8
8662: PUSH
8663: LD_VAR 0 1
8667: ARRAY
8668: NOT
8669: PUSH
8670: LD_EXP 8
8674: PUSH
8675: LD_VAR 0 1
8679: ARRAY
8680: PUSH
8681: LD_EXP 8
8685: PUSH
8686: LD_OWVAR 2
8690: ARRAY
8691: NONEQUAL
8692: PUSH
8693: LD_OWVAR 2
8697: PPUSH
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 81
8707: PUSH
8708: LD_INT 1
8710: NONEQUAL
8711: AND
8712: OR
8713: IFFALSE 8736
// if HasPower ( i ) then
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL 8795 0 1
8724: IFFALSE 8736
// begin canWin := false ;
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 0
8733: ST_TO_ADDR
// break ;
8734: GO 8738
// end ;
8736: GO 8620
8738: POP
8739: POP
// if canWin then
8740: LD_VAR 0 2
8744: IFFALSE 8751
// enable ( mpWin ) else
8746: LD_INT 101
8748: ENABLE_MARKED
8749: GO 8752
// enable ;
8751: ENABLE
// end ; end ;
8752: PPOPN 2
8754: END
// function CanWinLoose ; begin
8755: LD_INT 0
8757: PPUSH
// result := true ;
8758: LD_ADDR_VAR 0 1
8762: PUSH
8763: LD_INT 1
8765: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8766: CALL_OW 531
8770: PUSH
8771: CALL_OW 519
8775: PUSH
8776: LD_INT 1
8778: GREATER
8779: AND
8780: IFFALSE 8790
// result := false ;
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_INT 0
8789: ST_TO_ADDR
// end ;
8790: LD_VAR 0 1
8794: RET
// function HasPower ( i ) ; begin
8795: LD_INT 0
8797: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8798: LD_ADDR_VAR 0 2
8802: PUSH
8803: LD_INT 22
8805: PUSH
8806: LD_VAR 0 1
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: LD_INT 21
8820: PUSH
8821: LD_INT 1
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 33
8830: PUSH
8831: LD_INT 3
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 33
8840: PUSH
8841: LD_INT 5
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PPUSH
8858: CALL_OW 69
8862: ST_TO_ADDR
// end ; end_of_file
8863: LD_VAR 0 2
8867: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8868: LD_EXP 39
8872: IFFALSE 8915
8874: GO 8876
8876: DISABLE
8877: LD_INT 0
8879: PPUSH
// begin for i := 1 to 8 do
8880: LD_ADDR_VAR 0 1
8884: PUSH
8885: DOUBLE
8886: LD_INT 1
8888: DEC
8889: ST_TO_ADDR
8890: LD_INT 8
8892: PUSH
8893: FOR_TO
8894: IFFALSE 8913
// SetRestrict ( b_depot , i , state_disabled ) ;
8896: LD_INT 0
8898: PPUSH
8899: LD_VAR 0 1
8903: PPUSH
8904: LD_INT 0
8906: PPUSH
8907: CALL_OW 324
8911: GO 8893
8913: POP
8914: POP
// end ;
8915: PPOPN 1
8917: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8918: LD_EXP 39
8922: PUSH
8923: CALL 9128 0 0
8927: AND
8928: PUSH
8929: LD_OWVAR 4
8933: AND
8934: IFFALSE 9125
8936: GO 8938
8938: DISABLE
8939: LD_INT 0
8941: PPUSH
8942: PPUSH
// begin canWin := false ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_INT 0
8950: ST_TO_ADDR
// if not HasPower ( your_side ) then
8951: LD_OWVAR 2
8955: PPUSH
8956: CALL 9168 0 1
8960: NOT
8961: IFFALSE 8972
// begin Multiplayer_Loose_Message ;
8963: CALL_OW 521
// enable ( mpLose ) ;
8967: LD_INT 102
8969: ENABLE_MARKED
// end else
8970: GO 9125
// begin canWin := true ;
8972: LD_ADDR_VAR 0 2
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
// for i := 1 to 8 do
8980: LD_ADDR_VAR 0 1
8984: PUSH
8985: DOUBLE
8986: LD_INT 1
8988: DEC
8989: ST_TO_ADDR
8990: LD_INT 8
8992: PUSH
8993: FOR_TO
8994: IFFALSE 9111
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8996: LD_EXP 7
9000: PUSH
9001: LD_VAR 0 1
9005: ARRAY
9006: PUSH
9007: LD_VAR 0 1
9011: PPUSH
9012: CALL_OW 108
9016: AND
9017: PUSH
9018: LD_VAR 0 1
9022: PUSH
9023: LD_OWVAR 2
9027: NONEQUAL
9028: AND
9029: IFFALSE 9109
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9031: LD_EXP 8
9035: PUSH
9036: LD_VAR 0 1
9040: ARRAY
9041: NOT
9042: PUSH
9043: LD_EXP 8
9047: PUSH
9048: LD_VAR 0 1
9052: ARRAY
9053: PUSH
9054: LD_EXP 8
9058: PUSH
9059: LD_OWVAR 2
9063: ARRAY
9064: NONEQUAL
9065: PUSH
9066: LD_OWVAR 2
9070: PPUSH
9071: LD_VAR 0 1
9075: PPUSH
9076: CALL_OW 81
9080: PUSH
9081: LD_INT 1
9083: NONEQUAL
9084: AND
9085: OR
9086: IFFALSE 9109
// if HasPower ( i ) then
9088: LD_VAR 0 1
9092: PPUSH
9093: CALL 9168 0 1
9097: IFFALSE 9109
// begin canWin := false ;
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// break ;
9107: GO 9111
// end ;
9109: GO 8993
9111: POP
9112: POP
// if canWin then
9113: LD_VAR 0 2
9117: IFFALSE 9124
// enable ( mpWin ) else
9119: LD_INT 101
9121: ENABLE_MARKED
9122: GO 9125
// enable ;
9124: ENABLE
// end ; end ;
9125: PPOPN 2
9127: END
// function CanWinLoose ; begin
9128: LD_INT 0
9130: PPUSH
// result := true ;
9131: LD_ADDR_VAR 0 1
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9139: CALL_OW 531
9143: PUSH
9144: CALL_OW 519
9148: PUSH
9149: LD_INT 1
9151: GREATER
9152: AND
9153: IFFALSE 9163
// result := false ;
9155: LD_ADDR_VAR 0 1
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// end ;
9163: LD_VAR 0 1
9167: RET
// function HasPower ( i ) ; begin
9168: LD_INT 0
9170: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9171: LD_INT 22
9173: PUSH
9174: LD_VAR 0 1
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 2
9185: PUSH
9186: LD_INT 30
9188: PUSH
9189: LD_INT 0
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 30
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: NOT
9220: IFFALSE 9224
// exit ;
9222: GO 9289
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 22
9231: PUSH
9232: LD_VAR 0 1
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 2
9243: PUSH
9244: LD_INT 21
9246: PUSH
9247: LD_INT 1
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 33
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 33
9266: PUSH
9267: LD_INT 5
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PPUSH
9284: CALL_OW 69
9288: ST_TO_ADDR
// end ; end_of_file
9289: LD_VAR 0 2
9293: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9294: LD_INT 0
9296: PPUSH
9297: PPUSH
// if exist_mode then
9298: LD_VAR 0 2
9302: IFFALSE 9348
// begin unit := CreateCharacter ( prefix & ident ) ;
9304: LD_ADDR_VAR 0 5
9308: PUSH
9309: LD_VAR 0 3
9313: PUSH
9314: LD_VAR 0 1
9318: STR
9319: PPUSH
9320: CALL_OW 34
9324: ST_TO_ADDR
// if unit then
9325: LD_VAR 0 5
9329: IFFALSE 9346
// DeleteCharacters ( prefix & ident ) ;
9331: LD_VAR 0 3
9335: PUSH
9336: LD_VAR 0 1
9340: STR
9341: PPUSH
9342: CALL_OW 40
// end else
9346: GO 9363
// unit := NewCharacter ( ident ) ;
9348: LD_ADDR_VAR 0 5
9352: PUSH
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 25
9362: ST_TO_ADDR
// result := unit ;
9363: LD_ADDR_VAR 0 4
9367: PUSH
9368: LD_VAR 0 5
9372: ST_TO_ADDR
// end ;
9373: LD_VAR 0 4
9377: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9378: LD_INT 0
9380: PPUSH
9381: PPUSH
// if exist_mode then
9382: LD_VAR 0 2
9386: IFFALSE 9411
// unit := CreateCharacter ( prefix & ident ) else
9388: LD_ADDR_VAR 0 5
9392: PUSH
9393: LD_VAR 0 3
9397: PUSH
9398: LD_VAR 0 1
9402: STR
9403: PPUSH
9404: CALL_OW 34
9408: ST_TO_ADDR
9409: GO 9426
// unit := NewCharacter ( ident ) ;
9411: LD_ADDR_VAR 0 5
9415: PUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 25
9425: ST_TO_ADDR
// result := unit ;
9426: LD_ADDR_VAR 0 4
9430: PUSH
9431: LD_VAR 0 5
9435: ST_TO_ADDR
// end ;
9436: LD_VAR 0 4
9440: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9441: LD_INT 0
9443: PPUSH
9444: PPUSH
// if not side or not nation then
9445: LD_VAR 0 1
9449: NOT
9450: PUSH
9451: LD_VAR 0 2
9455: NOT
9456: OR
9457: IFFALSE 9461
// exit ;
9459: GO 10229
// case nation of nation_american :
9461: LD_VAR 0 2
9465: PUSH
9466: LD_INT 1
9468: DOUBLE
9469: EQUAL
9470: IFTRUE 9474
9472: GO 9688
9474: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9475: LD_ADDR_VAR 0 4
9479: PUSH
9480: LD_INT 35
9482: PUSH
9483: LD_INT 45
9485: PUSH
9486: LD_INT 46
9488: PUSH
9489: LD_INT 47
9491: PUSH
9492: LD_INT 82
9494: PUSH
9495: LD_INT 83
9497: PUSH
9498: LD_INT 84
9500: PUSH
9501: LD_INT 85
9503: PUSH
9504: LD_INT 86
9506: PUSH
9507: LD_INT 1
9509: PUSH
9510: LD_INT 2
9512: PUSH
9513: LD_INT 6
9515: PUSH
9516: LD_INT 15
9518: PUSH
9519: LD_INT 16
9521: PUSH
9522: LD_INT 7
9524: PUSH
9525: LD_INT 12
9527: PUSH
9528: LD_INT 13
9530: PUSH
9531: LD_INT 10
9533: PUSH
9534: LD_INT 14
9536: PUSH
9537: LD_INT 20
9539: PUSH
9540: LD_INT 21
9542: PUSH
9543: LD_INT 22
9545: PUSH
9546: LD_INT 25
9548: PUSH
9549: LD_INT 32
9551: PUSH
9552: LD_INT 27
9554: PUSH
9555: LD_INT 36
9557: PUSH
9558: LD_INT 69
9560: PUSH
9561: LD_INT 39
9563: PUSH
9564: LD_INT 34
9566: PUSH
9567: LD_INT 40
9569: PUSH
9570: LD_INT 48
9572: PUSH
9573: LD_INT 49
9575: PUSH
9576: LD_INT 50
9578: PUSH
9579: LD_INT 51
9581: PUSH
9582: LD_INT 52
9584: PUSH
9585: LD_INT 53
9587: PUSH
9588: LD_INT 54
9590: PUSH
9591: LD_INT 55
9593: PUSH
9594: LD_INT 56
9596: PUSH
9597: LD_INT 57
9599: PUSH
9600: LD_INT 58
9602: PUSH
9603: LD_INT 59
9605: PUSH
9606: LD_INT 60
9608: PUSH
9609: LD_INT 61
9611: PUSH
9612: LD_INT 62
9614: PUSH
9615: LD_INT 80
9617: PUSH
9618: LD_INT 82
9620: PUSH
9621: LD_INT 83
9623: PUSH
9624: LD_INT 84
9626: PUSH
9627: LD_INT 85
9629: PUSH
9630: LD_INT 86
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: ST_TO_ADDR
9686: GO 10153
9688: LD_INT 2
9690: DOUBLE
9691: EQUAL
9692: IFTRUE 9696
9694: GO 9922
9696: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9697: LD_ADDR_VAR 0 4
9701: PUSH
9702: LD_INT 35
9704: PUSH
9705: LD_INT 45
9707: PUSH
9708: LD_INT 46
9710: PUSH
9711: LD_INT 47
9713: PUSH
9714: LD_INT 82
9716: PUSH
9717: LD_INT 83
9719: PUSH
9720: LD_INT 84
9722: PUSH
9723: LD_INT 85
9725: PUSH
9726: LD_INT 87
9728: PUSH
9729: LD_INT 70
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: LD_INT 11
9737: PUSH
9738: LD_INT 3
9740: PUSH
9741: LD_INT 4
9743: PUSH
9744: LD_INT 5
9746: PUSH
9747: LD_INT 6
9749: PUSH
9750: LD_INT 15
9752: PUSH
9753: LD_INT 18
9755: PUSH
9756: LD_INT 7
9758: PUSH
9759: LD_INT 17
9761: PUSH
9762: LD_INT 8
9764: PUSH
9765: LD_INT 20
9767: PUSH
9768: LD_INT 21
9770: PUSH
9771: LD_INT 22
9773: PUSH
9774: LD_INT 72
9776: PUSH
9777: LD_INT 26
9779: PUSH
9780: LD_INT 69
9782: PUSH
9783: LD_INT 39
9785: PUSH
9786: LD_INT 40
9788: PUSH
9789: LD_INT 41
9791: PUSH
9792: LD_INT 42
9794: PUSH
9795: LD_INT 43
9797: PUSH
9798: LD_INT 48
9800: PUSH
9801: LD_INT 49
9803: PUSH
9804: LD_INT 50
9806: PUSH
9807: LD_INT 51
9809: PUSH
9810: LD_INT 52
9812: PUSH
9813: LD_INT 53
9815: PUSH
9816: LD_INT 54
9818: PUSH
9819: LD_INT 55
9821: PUSH
9822: LD_INT 56
9824: PUSH
9825: LD_INT 60
9827: PUSH
9828: LD_INT 61
9830: PUSH
9831: LD_INT 62
9833: PUSH
9834: LD_INT 66
9836: PUSH
9837: LD_INT 67
9839: PUSH
9840: LD_INT 68
9842: PUSH
9843: LD_INT 81
9845: PUSH
9846: LD_INT 82
9848: PUSH
9849: LD_INT 83
9851: PUSH
9852: LD_INT 84
9854: PUSH
9855: LD_INT 85
9857: PUSH
9858: LD_INT 87
9860: PUSH
9861: LD_INT 88
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: ST_TO_ADDR
9920: GO 10153
9922: LD_INT 3
9924: DOUBLE
9925: EQUAL
9926: IFTRUE 9930
9928: GO 10152
9930: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9931: LD_ADDR_VAR 0 4
9935: PUSH
9936: LD_INT 46
9938: PUSH
9939: LD_INT 47
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: LD_INT 82
9950: PUSH
9951: LD_INT 83
9953: PUSH
9954: LD_INT 84
9956: PUSH
9957: LD_INT 85
9959: PUSH
9960: LD_INT 86
9962: PUSH
9963: LD_INT 11
9965: PUSH
9966: LD_INT 9
9968: PUSH
9969: LD_INT 20
9971: PUSH
9972: LD_INT 19
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 24
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_INT 25
9986: PUSH
9987: LD_INT 28
9989: PUSH
9990: LD_INT 29
9992: PUSH
9993: LD_INT 30
9995: PUSH
9996: LD_INT 31
9998: PUSH
9999: LD_INT 37
10001: PUSH
10002: LD_INT 38
10004: PUSH
10005: LD_INT 32
10007: PUSH
10008: LD_INT 27
10010: PUSH
10011: LD_INT 33
10013: PUSH
10014: LD_INT 69
10016: PUSH
10017: LD_INT 39
10019: PUSH
10020: LD_INT 34
10022: PUSH
10023: LD_INT 40
10025: PUSH
10026: LD_INT 71
10028: PUSH
10029: LD_INT 23
10031: PUSH
10032: LD_INT 44
10034: PUSH
10035: LD_INT 48
10037: PUSH
10038: LD_INT 49
10040: PUSH
10041: LD_INT 50
10043: PUSH
10044: LD_INT 51
10046: PUSH
10047: LD_INT 52
10049: PUSH
10050: LD_INT 53
10052: PUSH
10053: LD_INT 54
10055: PUSH
10056: LD_INT 55
10058: PUSH
10059: LD_INT 56
10061: PUSH
10062: LD_INT 57
10064: PUSH
10065: LD_INT 58
10067: PUSH
10068: LD_INT 59
10070: PUSH
10071: LD_INT 63
10073: PUSH
10074: LD_INT 64
10076: PUSH
10077: LD_INT 65
10079: PUSH
10080: LD_INT 82
10082: PUSH
10083: LD_INT 83
10085: PUSH
10086: LD_INT 84
10088: PUSH
10089: LD_INT 85
10091: PUSH
10092: LD_INT 86
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: ST_TO_ADDR
10150: GO 10153
10152: POP
// if state > - 1 and state < 3 then
10153: LD_VAR 0 3
10157: PUSH
10158: LD_INT 1
10160: NEG
10161: GREATER
10162: PUSH
10163: LD_VAR 0 3
10167: PUSH
10168: LD_INT 3
10170: LESS
10171: AND
10172: IFFALSE 10229
// for i in result do
10174: LD_ADDR_VAR 0 5
10178: PUSH
10179: LD_VAR 0 4
10183: PUSH
10184: FOR_IN
10185: IFFALSE 10227
// if GetTech ( i , side ) <> state then
10187: LD_VAR 0 5
10191: PPUSH
10192: LD_VAR 0 1
10196: PPUSH
10197: CALL_OW 321
10201: PUSH
10202: LD_VAR 0 3
10206: NONEQUAL
10207: IFFALSE 10225
// result := result diff i ;
10209: LD_ADDR_VAR 0 4
10213: PUSH
10214: LD_VAR 0 4
10218: PUSH
10219: LD_VAR 0 5
10223: DIFF
10224: ST_TO_ADDR
10225: GO 10184
10227: POP
10228: POP
// end ;
10229: LD_VAR 0 4
10233: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10234: LD_INT 0
10236: PPUSH
10237: PPUSH
10238: PPUSH
// result := true ;
10239: LD_ADDR_VAR 0 3
10243: PUSH
10244: LD_INT 1
10246: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10247: LD_ADDR_VAR 0 5
10251: PUSH
10252: LD_VAR 0 2
10256: PPUSH
10257: CALL_OW 480
10261: ST_TO_ADDR
// if not tmp then
10262: LD_VAR 0 5
10266: NOT
10267: IFFALSE 10271
// exit ;
10269: GO 10320
// for i in tmp do
10271: LD_ADDR_VAR 0 4
10275: PUSH
10276: LD_VAR 0 5
10280: PUSH
10281: FOR_IN
10282: IFFALSE 10318
// if GetTech ( i , side ) <> state_researched then
10284: LD_VAR 0 4
10288: PPUSH
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL_OW 321
10298: PUSH
10299: LD_INT 2
10301: NONEQUAL
10302: IFFALSE 10316
// begin result := false ;
10304: LD_ADDR_VAR 0 3
10308: PUSH
10309: LD_INT 0
10311: ST_TO_ADDR
// exit ;
10312: POP
10313: POP
10314: GO 10320
// end ;
10316: GO 10281
10318: POP
10319: POP
// end ;
10320: LD_VAR 0 3
10324: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10325: LD_INT 0
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
10338: PPUSH
10339: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10340: LD_VAR 0 1
10344: NOT
10345: PUSH
10346: LD_VAR 0 1
10350: PPUSH
10351: CALL_OW 257
10355: PUSH
10356: LD_INT 9
10358: NONEQUAL
10359: OR
10360: IFFALSE 10364
// exit ;
10362: GO 10937
// side := GetSide ( unit ) ;
10364: LD_ADDR_VAR 0 9
10368: PUSH
10369: LD_VAR 0 1
10373: PPUSH
10374: CALL_OW 255
10378: ST_TO_ADDR
// tech_space := tech_spacanom ;
10379: LD_ADDR_VAR 0 12
10383: PUSH
10384: LD_INT 29
10386: ST_TO_ADDR
// tech_time := tech_taurad ;
10387: LD_ADDR_VAR 0 13
10391: PUSH
10392: LD_INT 28
10394: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10395: LD_ADDR_VAR 0 11
10399: PUSH
10400: LD_VAR 0 1
10404: PPUSH
10405: CALL_OW 310
10409: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10410: LD_VAR 0 11
10414: PPUSH
10415: CALL_OW 247
10419: PUSH
10420: LD_INT 2
10422: EQUAL
10423: IFFALSE 10427
// exit ;
10425: GO 10937
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10427: LD_ADDR_VAR 0 8
10431: PUSH
10432: LD_INT 81
10434: PUSH
10435: LD_VAR 0 9
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: LD_INT 21
10449: PUSH
10450: LD_INT 3
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: ST_TO_ADDR
// if not tmp then
10470: LD_VAR 0 8
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 10937
// if in_unit then
10479: LD_VAR 0 11
10483: IFFALSE 10507
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10485: LD_ADDR_VAR 0 10
10489: PUSH
10490: LD_VAR 0 8
10494: PPUSH
10495: LD_VAR 0 11
10499: PPUSH
10500: CALL_OW 74
10504: ST_TO_ADDR
10505: GO 10527
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10507: LD_ADDR_VAR 0 10
10511: PUSH
10512: LD_VAR 0 8
10516: PPUSH
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 74
10526: ST_TO_ADDR
// if not enemy then
10527: LD_VAR 0 10
10531: NOT
10532: IFFALSE 10536
// exit ;
10534: GO 10937
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10536: LD_VAR 0 11
10540: PUSH
10541: LD_VAR 0 11
10545: PPUSH
10546: LD_VAR 0 10
10550: PPUSH
10551: CALL_OW 296
10555: PUSH
10556: LD_INT 13
10558: GREATER
10559: AND
10560: PUSH
10561: LD_VAR 0 1
10565: PPUSH
10566: LD_VAR 0 10
10570: PPUSH
10571: CALL_OW 296
10575: PUSH
10576: LD_INT 12
10578: GREATER
10579: OR
10580: IFFALSE 10584
// exit ;
10582: GO 10937
// missile := [ 1 ] ;
10584: LD_ADDR_VAR 0 14
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10595: LD_VAR 0 9
10599: PPUSH
10600: LD_VAR 0 12
10604: PPUSH
10605: CALL_OW 325
10609: IFFALSE 10638
// missile := Replace ( missile , missile + 1 , 2 ) ;
10611: LD_ADDR_VAR 0 14
10615: PUSH
10616: LD_VAR 0 14
10620: PPUSH
10621: LD_VAR 0 14
10625: PUSH
10626: LD_INT 1
10628: PLUS
10629: PPUSH
10630: LD_INT 2
10632: PPUSH
10633: CALL_OW 1
10637: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10638: LD_VAR 0 9
10642: PPUSH
10643: LD_VAR 0 13
10647: PPUSH
10648: CALL_OW 325
10652: PUSH
10653: LD_VAR 0 10
10657: PPUSH
10658: CALL_OW 255
10662: PPUSH
10663: LD_VAR 0 13
10667: PPUSH
10668: CALL_OW 325
10672: NOT
10673: AND
10674: IFFALSE 10703
// missile := Replace ( missile , missile + 1 , 3 ) ;
10676: LD_ADDR_VAR 0 14
10680: PUSH
10681: LD_VAR 0 14
10685: PPUSH
10686: LD_VAR 0 14
10690: PUSH
10691: LD_INT 1
10693: PLUS
10694: PPUSH
10695: LD_INT 3
10697: PPUSH
10698: CALL_OW 1
10702: ST_TO_ADDR
// if missile < 2 then
10703: LD_VAR 0 14
10707: PUSH
10708: LD_INT 2
10710: LESS
10711: IFFALSE 10715
// exit ;
10713: GO 10937
// x := GetX ( enemy ) ;
10715: LD_ADDR_VAR 0 4
10719: PUSH
10720: LD_VAR 0 10
10724: PPUSH
10725: CALL_OW 250
10729: ST_TO_ADDR
// y := GetY ( enemy ) ;
10730: LD_ADDR_VAR 0 5
10734: PUSH
10735: LD_VAR 0 10
10739: PPUSH
10740: CALL_OW 251
10744: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10745: LD_ADDR_VAR 0 6
10749: PUSH
10750: LD_VAR 0 4
10754: PUSH
10755: LD_INT 1
10757: NEG
10758: PPUSH
10759: LD_INT 1
10761: PPUSH
10762: CALL_OW 12
10766: PLUS
10767: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10768: LD_ADDR_VAR 0 7
10772: PUSH
10773: LD_VAR 0 5
10777: PUSH
10778: LD_INT 1
10780: NEG
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 12
10789: PLUS
10790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10791: LD_VAR 0 6
10795: PPUSH
10796: LD_VAR 0 7
10800: PPUSH
10801: CALL_OW 488
10805: NOT
10806: IFFALSE 10828
// begin _x := x ;
10808: LD_ADDR_VAR 0 6
10812: PUSH
10813: LD_VAR 0 4
10817: ST_TO_ADDR
// _y := y ;
10818: LD_ADDR_VAR 0 7
10822: PUSH
10823: LD_VAR 0 5
10827: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10828: LD_ADDR_VAR 0 3
10832: PUSH
10833: LD_INT 1
10835: PPUSH
10836: LD_VAR 0 14
10840: PPUSH
10841: CALL_OW 12
10845: ST_TO_ADDR
// case i of 1 :
10846: LD_VAR 0 3
10850: PUSH
10851: LD_INT 1
10853: DOUBLE
10854: EQUAL
10855: IFTRUE 10859
10857: GO 10876
10859: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10860: LD_VAR 0 1
10864: PPUSH
10865: LD_VAR 0 10
10869: PPUSH
10870: CALL_OW 115
10874: GO 10937
10876: LD_INT 2
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10906
10884: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10885: LD_VAR 0 1
10889: PPUSH
10890: LD_VAR 0 6
10894: PPUSH
10895: LD_VAR 0 7
10899: PPUSH
10900: CALL_OW 153
10904: GO 10937
10906: LD_INT 3
10908: DOUBLE
10909: EQUAL
10910: IFTRUE 10914
10912: GO 10936
10914: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10915: LD_VAR 0 1
10919: PPUSH
10920: LD_VAR 0 6
10924: PPUSH
10925: LD_VAR 0 7
10929: PPUSH
10930: CALL_OW 154
10934: GO 10937
10936: POP
// end ;
10937: LD_VAR 0 2
10941: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10942: LD_INT 0
10944: PPUSH
10945: PPUSH
10946: PPUSH
10947: PPUSH
10948: PPUSH
10949: PPUSH
// if not unit or not building then
10950: LD_VAR 0 1
10954: NOT
10955: PUSH
10956: LD_VAR 0 2
10960: NOT
10961: OR
10962: IFFALSE 10966
// exit ;
10964: GO 11124
// x := GetX ( building ) ;
10966: LD_ADDR_VAR 0 5
10970: PUSH
10971: LD_VAR 0 2
10975: PPUSH
10976: CALL_OW 250
10980: ST_TO_ADDR
// y := GetY ( building ) ;
10981: LD_ADDR_VAR 0 6
10985: PUSH
10986: LD_VAR 0 2
10990: PPUSH
10991: CALL_OW 251
10995: ST_TO_ADDR
// for i = 0 to 5 do
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: DOUBLE
11002: LD_INT 0
11004: DEC
11005: ST_TO_ADDR
11006: LD_INT 5
11008: PUSH
11009: FOR_TO
11010: IFFALSE 11122
// begin _x := ShiftX ( x , i , 3 ) ;
11012: LD_ADDR_VAR 0 7
11016: PUSH
11017: LD_VAR 0 5
11021: PPUSH
11022: LD_VAR 0 4
11026: PPUSH
11027: LD_INT 3
11029: PPUSH
11030: CALL_OW 272
11034: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11035: LD_ADDR_VAR 0 8
11039: PUSH
11040: LD_VAR 0 6
11044: PPUSH
11045: LD_VAR 0 4
11049: PPUSH
11050: LD_INT 3
11052: PPUSH
11053: CALL_OW 273
11057: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11058: LD_VAR 0 7
11062: PPUSH
11063: LD_VAR 0 8
11067: PPUSH
11068: CALL_OW 488
11072: NOT
11073: IFFALSE 11077
// continue ;
11075: GO 11009
// if HexInfo ( _x , _y ) = 0 then
11077: LD_VAR 0 7
11081: PPUSH
11082: LD_VAR 0 8
11086: PPUSH
11087: CALL_OW 428
11091: PUSH
11092: LD_INT 0
11094: EQUAL
11095: IFFALSE 11120
// begin ComMoveXY ( unit , _x , _y ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_VAR 0 7
11106: PPUSH
11107: LD_VAR 0 8
11111: PPUSH
11112: CALL_OW 111
// exit ;
11116: POP
11117: POP
11118: GO 11124
// end ; end ;
11120: GO 11009
11122: POP
11123: POP
// end ;
11124: LD_VAR 0 3
11128: RET
// export function ScanBase ( side , base_area ) ; begin
11129: LD_INT 0
11131: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11132: LD_ADDR_VAR 0 3
11136: PUSH
11137: LD_VAR 0 2
11141: PPUSH
11142: LD_INT 81
11144: PUSH
11145: LD_VAR 0 1
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PPUSH
11154: CALL_OW 70
11158: ST_TO_ADDR
// end ;
11159: LD_VAR 0 3
11163: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
11168: PPUSH
11169: PPUSH
// result := false ;
11170: LD_ADDR_VAR 0 2
11174: PUSH
11175: LD_INT 0
11177: ST_TO_ADDR
// side := GetSide ( unit ) ;
11178: LD_ADDR_VAR 0 3
11182: PUSH
11183: LD_VAR 0 1
11187: PPUSH
11188: CALL_OW 255
11192: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11193: LD_ADDR_VAR 0 4
11197: PUSH
11198: LD_VAR 0 1
11202: PPUSH
11203: CALL_OW 248
11207: ST_TO_ADDR
// case nat of 1 :
11208: LD_VAR 0 4
11212: PUSH
11213: LD_INT 1
11215: DOUBLE
11216: EQUAL
11217: IFTRUE 11221
11219: GO 11232
11221: POP
// tech := tech_lassight ; 2 :
11222: LD_ADDR_VAR 0 5
11226: PUSH
11227: LD_INT 12
11229: ST_TO_ADDR
11230: GO 11271
11232: LD_INT 2
11234: DOUBLE
11235: EQUAL
11236: IFTRUE 11240
11238: GO 11251
11240: POP
// tech := tech_mortar ; 3 :
11241: LD_ADDR_VAR 0 5
11245: PUSH
11246: LD_INT 41
11248: ST_TO_ADDR
11249: GO 11271
11251: LD_INT 3
11253: DOUBLE
11254: EQUAL
11255: IFTRUE 11259
11257: GO 11270
11259: POP
// tech := tech_bazooka ; end ;
11260: LD_ADDR_VAR 0 5
11264: PUSH
11265: LD_INT 44
11267: ST_TO_ADDR
11268: GO 11271
11270: POP
// if Researched ( side , tech ) then
11271: LD_VAR 0 3
11275: PPUSH
11276: LD_VAR 0 5
11280: PPUSH
11281: CALL_OW 325
11285: IFFALSE 11312
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11287: LD_ADDR_VAR 0 2
11291: PUSH
11292: LD_INT 5
11294: PUSH
11295: LD_INT 8
11297: PUSH
11298: LD_INT 9
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: PUSH
11306: LD_VAR 0 4
11310: ARRAY
11311: ST_TO_ADDR
// end ;
11312: LD_VAR 0 2
11316: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11317: LD_INT 0
11319: PPUSH
11320: PPUSH
11321: PPUSH
// if not mines then
11322: LD_VAR 0 2
11326: NOT
11327: IFFALSE 11331
// exit ;
11329: GO 11475
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11331: LD_ADDR_VAR 0 5
11335: PUSH
11336: LD_INT 81
11338: PUSH
11339: LD_VAR 0 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 3
11350: PUSH
11351: LD_INT 21
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PPUSH
11369: CALL_OW 69
11373: ST_TO_ADDR
// for i in mines do
11374: LD_ADDR_VAR 0 4
11378: PUSH
11379: LD_VAR 0 2
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11473
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11387: LD_VAR 0 4
11391: PUSH
11392: LD_INT 1
11394: ARRAY
11395: PPUSH
11396: LD_VAR 0 4
11400: PUSH
11401: LD_INT 2
11403: ARRAY
11404: PPUSH
11405: CALL_OW 458
11409: NOT
11410: IFFALSE 11414
// continue ;
11412: GO 11384
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11414: LD_VAR 0 4
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PPUSH
11423: LD_VAR 0 4
11427: PUSH
11428: LD_INT 2
11430: ARRAY
11431: PPUSH
11432: CALL_OW 428
11436: PUSH
11437: LD_VAR 0 5
11441: IN
11442: IFFALSE 11471
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11444: LD_VAR 0 4
11448: PUSH
11449: LD_INT 1
11451: ARRAY
11452: PPUSH
11453: LD_VAR 0 4
11457: PUSH
11458: LD_INT 2
11460: ARRAY
11461: PPUSH
11462: LD_VAR 0 1
11466: PPUSH
11467: CALL_OW 456
// end ;
11471: GO 11384
11473: POP
11474: POP
// end ;
11475: LD_VAR 0 3
11479: RET
// export function Count ( array ) ; begin
11480: LD_INT 0
11482: PPUSH
// result := array + 0 ;
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: LD_VAR 0 1
11492: PUSH
11493: LD_INT 0
11495: PLUS
11496: ST_TO_ADDR
// end ;
11497: LD_VAR 0 2
11501: RET
// export function IsEmpty ( building ) ; begin
11502: LD_INT 0
11504: PPUSH
// if not building then
11505: LD_VAR 0 1
11509: NOT
11510: IFFALSE 11514
// exit ;
11512: GO 11557
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11514: LD_ADDR_VAR 0 2
11518: PUSH
11519: LD_VAR 0 1
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 255
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 58
11543: PUSH
11544: EMPTY
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 69
11555: IN
11556: ST_TO_ADDR
// end ;
11557: LD_VAR 0 2
11561: RET
// export function IsNotFull ( building ) ; var places ; begin
11562: LD_INT 0
11564: PPUSH
11565: PPUSH
// if not building then
11566: LD_VAR 0 1
11570: NOT
11571: IFFALSE 11575
// exit ;
11573: GO 11603
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: LD_VAR 0 1
11584: PPUSH
11585: LD_INT 3
11587: PUSH
11588: LD_INT 62
11590: PUSH
11591: EMPTY
11592: LIST
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PPUSH
11598: CALL_OW 72
11602: ST_TO_ADDR
// end ;
11603: LD_VAR 0 2
11607: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
// tmp := [ ] ;
11614: LD_ADDR_VAR 0 3
11618: PUSH
11619: EMPTY
11620: ST_TO_ADDR
// list := [ ] ;
11621: LD_ADDR_VAR 0 5
11625: PUSH
11626: EMPTY
11627: ST_TO_ADDR
// for i = 16 to 25 do
11628: LD_ADDR_VAR 0 4
11632: PUSH
11633: DOUBLE
11634: LD_INT 16
11636: DEC
11637: ST_TO_ADDR
11638: LD_INT 25
11640: PUSH
11641: FOR_TO
11642: IFFALSE 11715
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11644: LD_ADDR_VAR 0 3
11648: PUSH
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 22
11656: PUSH
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL_OW 255
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 91
11673: PUSH
11674: LD_VAR 0 1
11678: PUSH
11679: LD_INT 6
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 30
11689: PUSH
11690: LD_VAR 0 4
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: PPUSH
11707: CALL_OW 69
11711: ADD
11712: ST_TO_ADDR
11713: GO 11641
11715: POP
11716: POP
// for i = 1 to tmp do
11717: LD_ADDR_VAR 0 4
11721: PUSH
11722: DOUBLE
11723: LD_INT 1
11725: DEC
11726: ST_TO_ADDR
11727: LD_VAR 0 3
11731: PUSH
11732: FOR_TO
11733: IFFALSE 11821
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_VAR 0 5
11744: PUSH
11745: LD_VAR 0 3
11749: PUSH
11750: LD_VAR 0 4
11754: ARRAY
11755: PPUSH
11756: CALL_OW 266
11760: PUSH
11761: LD_VAR 0 3
11765: PUSH
11766: LD_VAR 0 4
11770: ARRAY
11771: PPUSH
11772: CALL_OW 250
11776: PUSH
11777: LD_VAR 0 3
11781: PUSH
11782: LD_VAR 0 4
11786: ARRAY
11787: PPUSH
11788: CALL_OW 251
11792: PUSH
11793: LD_VAR 0 3
11797: PUSH
11798: LD_VAR 0 4
11802: ARRAY
11803: PPUSH
11804: CALL_OW 254
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: ADD
11818: ST_TO_ADDR
11819: GO 11732
11821: POP
11822: POP
// result := list ;
11823: LD_ADDR_VAR 0 2
11827: PUSH
11828: LD_VAR 0 5
11832: ST_TO_ADDR
// end ;
11833: LD_VAR 0 2
11837: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11838: LD_INT 0
11840: PPUSH
11841: PPUSH
11842: PPUSH
11843: PPUSH
11844: PPUSH
11845: PPUSH
11846: PPUSH
// if not factory then
11847: LD_VAR 0 1
11851: NOT
11852: IFFALSE 11856
// exit ;
11854: GO 12449
// if control = control_apeman then
11856: LD_VAR 0 4
11860: PUSH
11861: LD_INT 5
11863: EQUAL
11864: IFFALSE 11973
// begin tmp := UnitsInside ( factory ) ;
11866: LD_ADDR_VAR 0 8
11870: PUSH
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 313
11880: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11881: LD_VAR 0 8
11885: PPUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 12
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 72
11900: NOT
11901: IFFALSE 11911
// control := control_manual ;
11903: LD_ADDR_VAR 0 4
11907: PUSH
11908: LD_INT 1
11910: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11911: LD_ADDR_VAR 0 8
11915: PUSH
11916: LD_VAR 0 1
11920: PPUSH
11921: CALL 11608 0 1
11925: ST_TO_ADDR
// if tmp then
11926: LD_VAR 0 8
11930: IFFALSE 11973
// begin for i in tmp do
11932: LD_ADDR_VAR 0 7
11936: PUSH
11937: LD_VAR 0 8
11941: PUSH
11942: FOR_IN
11943: IFFALSE 11971
// if i [ 1 ] = b_ext_radio then
11945: LD_VAR 0 7
11949: PUSH
11950: LD_INT 1
11952: ARRAY
11953: PUSH
11954: LD_INT 22
11956: EQUAL
11957: IFFALSE 11969
// begin control := control_remote ;
11959: LD_ADDR_VAR 0 4
11963: PUSH
11964: LD_INT 2
11966: ST_TO_ADDR
// break ;
11967: GO 11971
// end ;
11969: GO 11942
11971: POP
11972: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_VAR 0 2
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_VAR 0 4
11992: PPUSH
11993: LD_VAR 0 5
11997: PPUSH
11998: CALL_OW 448
12002: IFFALSE 12037
// begin result := [ chassis , engine , control , weapon ] ;
12004: LD_ADDR_VAR 0 6
12008: PUSH
12009: LD_VAR 0 2
12013: PUSH
12014: LD_VAR 0 3
12018: PUSH
12019: LD_VAR 0 4
12023: PUSH
12024: LD_VAR 0 5
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: ST_TO_ADDR
// exit ;
12035: GO 12449
// end ; _chassis := AvailableChassisList ( factory ) ;
12037: LD_ADDR_VAR 0 9
12041: PUSH
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 475
12051: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12052: LD_ADDR_VAR 0 11
12056: PUSH
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL_OW 476
12066: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12067: LD_ADDR_VAR 0 12
12071: PUSH
12072: LD_VAR 0 1
12076: PPUSH
12077: CALL_OW 477
12081: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12082: LD_ADDR_VAR 0 10
12086: PUSH
12087: LD_VAR 0 1
12091: PPUSH
12092: CALL_OW 478
12096: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12097: LD_VAR 0 9
12101: NOT
12102: PUSH
12103: LD_VAR 0 11
12107: NOT
12108: OR
12109: PUSH
12110: LD_VAR 0 12
12114: NOT
12115: OR
12116: PUSH
12117: LD_VAR 0 10
12121: NOT
12122: OR
12123: IFFALSE 12158
// begin result := [ chassis , engine , control , weapon ] ;
12125: LD_ADDR_VAR 0 6
12129: PUSH
12130: LD_VAR 0 2
12134: PUSH
12135: LD_VAR 0 3
12139: PUSH
12140: LD_VAR 0 4
12144: PUSH
12145: LD_VAR 0 5
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: ST_TO_ADDR
// exit ;
12156: GO 12449
// end ; if not chassis in _chassis then
12158: LD_VAR 0 2
12162: PUSH
12163: LD_VAR 0 9
12167: IN
12168: NOT
12169: IFFALSE 12195
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12171: LD_ADDR_VAR 0 2
12175: PUSH
12176: LD_VAR 0 9
12180: PUSH
12181: LD_INT 1
12183: PPUSH
12184: LD_VAR 0 9
12188: PPUSH
12189: CALL_OW 12
12193: ARRAY
12194: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12195: LD_VAR 0 2
12199: PPUSH
12200: LD_VAR 0 3
12204: PPUSH
12205: CALL 12454 0 2
12209: NOT
12210: IFFALSE 12269
// repeat engine := _engine [ 1 ] ;
12212: LD_ADDR_VAR 0 3
12216: PUSH
12217: LD_VAR 0 11
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12226: LD_ADDR_VAR 0 11
12230: PUSH
12231: LD_VAR 0 11
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 3
12243: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12244: LD_VAR 0 2
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: CALL 12454 0 2
12258: PUSH
12259: LD_VAR 0 11
12263: PUSH
12264: EMPTY
12265: EQUAL
12266: OR
12267: IFFALSE 12212
// if not control in _control then
12269: LD_VAR 0 4
12273: PUSH
12274: LD_VAR 0 12
12278: IN
12279: NOT
12280: IFFALSE 12306
// control := _control [ rand ( 1 , _control ) ] ;
12282: LD_ADDR_VAR 0 4
12286: PUSH
12287: LD_VAR 0 12
12291: PUSH
12292: LD_INT 1
12294: PPUSH
12295: LD_VAR 0 12
12299: PPUSH
12300: CALL_OW 12
12304: ARRAY
12305: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12306: LD_VAR 0 2
12310: PPUSH
12311: LD_VAR 0 5
12315: PPUSH
12316: CALL 12674 0 2
12320: NOT
12321: IFFALSE 12380
// repeat weapon := _weapon [ 1 ] ;
12323: LD_ADDR_VAR 0 5
12327: PUSH
12328: LD_VAR 0 10
12332: PUSH
12333: LD_INT 1
12335: ARRAY
12336: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12337: LD_ADDR_VAR 0 10
12341: PUSH
12342: LD_VAR 0 10
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 3
12354: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12355: LD_VAR 0 2
12359: PPUSH
12360: LD_VAR 0 5
12364: PPUSH
12365: CALL 12674 0 2
12369: PUSH
12370: LD_VAR 0 10
12374: PUSH
12375: EMPTY
12376: EQUAL
12377: OR
12378: IFFALSE 12323
// result := [ ] ;
12380: LD_ADDR_VAR 0 6
12384: PUSH
12385: EMPTY
12386: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12387: LD_VAR 0 1
12391: PPUSH
12392: LD_VAR 0 2
12396: PPUSH
12397: LD_VAR 0 3
12401: PPUSH
12402: LD_VAR 0 4
12406: PPUSH
12407: LD_VAR 0 5
12411: PPUSH
12412: CALL_OW 448
12416: IFFALSE 12449
// result := [ chassis , engine , control , weapon ] ;
12418: LD_ADDR_VAR 0 6
12422: PUSH
12423: LD_VAR 0 2
12427: PUSH
12428: LD_VAR 0 3
12432: PUSH
12433: LD_VAR 0 4
12437: PUSH
12438: LD_VAR 0 5
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: ST_TO_ADDR
// end ;
12449: LD_VAR 0 6
12453: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12454: LD_INT 0
12456: PPUSH
// if not chassis or not engine then
12457: LD_VAR 0 1
12461: NOT
12462: PUSH
12463: LD_VAR 0 2
12467: NOT
12468: OR
12469: IFFALSE 12473
// exit ;
12471: GO 12669
// case engine of engine_solar :
12473: LD_VAR 0 2
12477: PUSH
12478: LD_INT 2
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12524
12486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12487: LD_ADDR_VAR 0 3
12491: PUSH
12492: LD_INT 11
12494: PUSH
12495: LD_INT 12
12497: PUSH
12498: LD_INT 13
12500: PUSH
12501: LD_INT 14
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: LD_INT 3
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: ST_TO_ADDR
12522: GO 12653
12524: LD_INT 1
12526: DOUBLE
12527: EQUAL
12528: IFTRUE 12532
12530: GO 12594
12532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12533: LD_ADDR_VAR 0 3
12537: PUSH
12538: LD_INT 11
12540: PUSH
12541: LD_INT 12
12543: PUSH
12544: LD_INT 13
12546: PUSH
12547: LD_INT 14
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: LD_INT 4
12561: PUSH
12562: LD_INT 5
12564: PUSH
12565: LD_INT 21
12567: PUSH
12568: LD_INT 23
12570: PUSH
12571: LD_INT 22
12573: PUSH
12574: LD_INT 24
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: ST_TO_ADDR
12592: GO 12653
12594: LD_INT 3
12596: DOUBLE
12597: EQUAL
12598: IFTRUE 12602
12600: GO 12652
12602: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12603: LD_ADDR_VAR 0 3
12607: PUSH
12608: LD_INT 13
12610: PUSH
12611: LD_INT 14
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: LD_INT 3
12619: PUSH
12620: LD_INT 4
12622: PUSH
12623: LD_INT 5
12625: PUSH
12626: LD_INT 21
12628: PUSH
12629: LD_INT 22
12631: PUSH
12632: LD_INT 23
12634: PUSH
12635: LD_INT 24
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: ST_TO_ADDR
12650: GO 12653
12652: POP
// result := ( chassis in result ) ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: LD_VAR 0 1
12662: PUSH
12663: LD_VAR 0 3
12667: IN
12668: ST_TO_ADDR
// end ;
12669: LD_VAR 0 3
12673: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12674: LD_INT 0
12676: PPUSH
// if not chassis or not weapon then
12677: LD_VAR 0 1
12681: NOT
12682: PUSH
12683: LD_VAR 0 2
12687: NOT
12688: OR
12689: IFFALSE 12693
// exit ;
12691: GO 13753
// case weapon of us_machine_gun :
12693: LD_VAR 0 2
12697: PUSH
12698: LD_INT 2
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12736
12706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: LD_INT 3
12720: PUSH
12721: LD_INT 4
12723: PUSH
12724: LD_INT 5
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: ST_TO_ADDR
12734: GO 13737
12736: LD_INT 3
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12774
12744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12745: LD_ADDR_VAR 0 3
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: LD_INT 3
12758: PUSH
12759: LD_INT 4
12761: PUSH
12762: LD_INT 5
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: ST_TO_ADDR
12772: GO 13737
12774: LD_INT 11
12776: DOUBLE
12777: EQUAL
12778: IFTRUE 12782
12780: GO 12812
12782: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12783: LD_ADDR_VAR 0 3
12787: PUSH
12788: LD_INT 1
12790: PUSH
12791: LD_INT 2
12793: PUSH
12794: LD_INT 3
12796: PUSH
12797: LD_INT 4
12799: PUSH
12800: LD_INT 5
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: ST_TO_ADDR
12810: GO 13737
12812: LD_INT 4
12814: DOUBLE
12815: EQUAL
12816: IFTRUE 12820
12818: GO 12846
12820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12821: LD_ADDR_VAR 0 3
12825: PUSH
12826: LD_INT 2
12828: PUSH
12829: LD_INT 3
12831: PUSH
12832: LD_INT 4
12834: PUSH
12835: LD_INT 5
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: ST_TO_ADDR
12844: GO 13737
12846: LD_INT 5
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 12880
12854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12855: LD_ADDR_VAR 0 3
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: LD_INT 4
12868: PUSH
12869: LD_INT 5
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: ST_TO_ADDR
12878: GO 13737
12880: LD_INT 9
12882: DOUBLE
12883: EQUAL
12884: IFTRUE 12888
12886: GO 12914
12888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12889: LD_ADDR_VAR 0 3
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: LD_INT 3
12899: PUSH
12900: LD_INT 4
12902: PUSH
12903: LD_INT 5
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: ST_TO_ADDR
12912: GO 13737
12914: LD_INT 7
12916: DOUBLE
12917: EQUAL
12918: IFTRUE 12922
12920: GO 12948
12922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12923: LD_ADDR_VAR 0 3
12927: PUSH
12928: LD_INT 2
12930: PUSH
12931: LD_INT 3
12933: PUSH
12934: LD_INT 4
12936: PUSH
12937: LD_INT 5
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: ST_TO_ADDR
12946: GO 13737
12948: LD_INT 12
12950: DOUBLE
12951: EQUAL
12952: IFTRUE 12956
12954: GO 12982
12956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: LD_INT 2
12964: PUSH
12965: LD_INT 3
12967: PUSH
12968: LD_INT 4
12970: PUSH
12971: LD_INT 5
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: ST_TO_ADDR
12980: GO 13737
12982: LD_INT 13
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 13016
12990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12991: LD_ADDR_VAR 0 3
12995: PUSH
12996: LD_INT 2
12998: PUSH
12999: LD_INT 3
13001: PUSH
13002: LD_INT 4
13004: PUSH
13005: LD_INT 5
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: ST_TO_ADDR
13014: GO 13737
13016: LD_INT 14
13018: DOUBLE
13019: EQUAL
13020: IFTRUE 13024
13022: GO 13042
13024: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13025: LD_ADDR_VAR 0 3
13029: PUSH
13030: LD_INT 4
13032: PUSH
13033: LD_INT 5
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: ST_TO_ADDR
13040: GO 13737
13042: LD_INT 6
13044: DOUBLE
13045: EQUAL
13046: IFTRUE 13050
13048: GO 13068
13050: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13051: LD_ADDR_VAR 0 3
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: ST_TO_ADDR
13066: GO 13737
13068: LD_INT 10
13070: DOUBLE
13071: EQUAL
13072: IFTRUE 13076
13074: GO 13094
13076: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: LD_INT 4
13084: PUSH
13085: LD_INT 5
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: ST_TO_ADDR
13092: GO 13737
13094: LD_INT 22
13096: DOUBLE
13097: EQUAL
13098: IFTRUE 13102
13100: GO 13128
13102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13103: LD_ADDR_VAR 0 3
13107: PUSH
13108: LD_INT 11
13110: PUSH
13111: LD_INT 12
13113: PUSH
13114: LD_INT 13
13116: PUSH
13117: LD_INT 14
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: ST_TO_ADDR
13126: GO 13737
13128: LD_INT 23
13130: DOUBLE
13131: EQUAL
13132: IFTRUE 13136
13134: GO 13162
13136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13137: LD_ADDR_VAR 0 3
13141: PUSH
13142: LD_INT 11
13144: PUSH
13145: LD_INT 12
13147: PUSH
13148: LD_INT 13
13150: PUSH
13151: LD_INT 14
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: ST_TO_ADDR
13160: GO 13737
13162: LD_INT 24
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13196
13170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13171: LD_ADDR_VAR 0 3
13175: PUSH
13176: LD_INT 11
13178: PUSH
13179: LD_INT 12
13181: PUSH
13182: LD_INT 13
13184: PUSH
13185: LD_INT 14
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: ST_TO_ADDR
13194: GO 13737
13196: LD_INT 30
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13204
13202: GO 13230
13204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13205: LD_ADDR_VAR 0 3
13209: PUSH
13210: LD_INT 11
13212: PUSH
13213: LD_INT 12
13215: PUSH
13216: LD_INT 13
13218: PUSH
13219: LD_INT 14
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: ST_TO_ADDR
13228: GO 13737
13230: LD_INT 25
13232: DOUBLE
13233: EQUAL
13234: IFTRUE 13238
13236: GO 13256
13238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13239: LD_ADDR_VAR 0 3
13243: PUSH
13244: LD_INT 13
13246: PUSH
13247: LD_INT 14
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: ST_TO_ADDR
13254: GO 13737
13256: LD_INT 27
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13282
13264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13265: LD_ADDR_VAR 0 3
13269: PUSH
13270: LD_INT 13
13272: PUSH
13273: LD_INT 14
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: ST_TO_ADDR
13280: GO 13737
13282: LD_INT 92
13284: DOUBLE
13285: EQUAL
13286: IFTRUE 13290
13288: GO 13316
13290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_INT 11
13298: PUSH
13299: LD_INT 12
13301: PUSH
13302: LD_INT 13
13304: PUSH
13305: LD_INT 14
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: ST_TO_ADDR
13314: GO 13737
13316: LD_INT 28
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13324
13322: GO 13342
13324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13325: LD_ADDR_VAR 0 3
13329: PUSH
13330: LD_INT 13
13332: PUSH
13333: LD_INT 14
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: ST_TO_ADDR
13340: GO 13737
13342: LD_INT 29
13344: DOUBLE
13345: EQUAL
13346: IFTRUE 13350
13348: GO 13368
13350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13351: LD_ADDR_VAR 0 3
13355: PUSH
13356: LD_INT 13
13358: PUSH
13359: LD_INT 14
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: ST_TO_ADDR
13366: GO 13737
13368: LD_INT 31
13370: DOUBLE
13371: EQUAL
13372: IFTRUE 13376
13374: GO 13394
13376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13377: LD_ADDR_VAR 0 3
13381: PUSH
13382: LD_INT 13
13384: PUSH
13385: LD_INT 14
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: ST_TO_ADDR
13392: GO 13737
13394: LD_INT 26
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13420
13402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 13
13410: PUSH
13411: LD_INT 14
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: ST_TO_ADDR
13418: GO 13737
13420: LD_INT 42
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13454
13428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13429: LD_ADDR_VAR 0 3
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 22
13439: PUSH
13440: LD_INT 23
13442: PUSH
13443: LD_INT 24
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: ST_TO_ADDR
13452: GO 13737
13454: LD_INT 43
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13488
13462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13463: LD_ADDR_VAR 0 3
13467: PUSH
13468: LD_INT 21
13470: PUSH
13471: LD_INT 22
13473: PUSH
13474: LD_INT 23
13476: PUSH
13477: LD_INT 24
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: ST_TO_ADDR
13486: GO 13737
13488: LD_INT 44
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13522
13496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13497: LD_ADDR_VAR 0 3
13501: PUSH
13502: LD_INT 21
13504: PUSH
13505: LD_INT 22
13507: PUSH
13508: LD_INT 23
13510: PUSH
13511: LD_INT 24
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: ST_TO_ADDR
13520: GO 13737
13522: LD_INT 45
13524: DOUBLE
13525: EQUAL
13526: IFTRUE 13530
13528: GO 13556
13530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13531: LD_ADDR_VAR 0 3
13535: PUSH
13536: LD_INT 21
13538: PUSH
13539: LD_INT 22
13541: PUSH
13542: LD_INT 23
13544: PUSH
13545: LD_INT 24
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: ST_TO_ADDR
13554: GO 13737
13556: LD_INT 49
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13590
13564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13565: LD_ADDR_VAR 0 3
13569: PUSH
13570: LD_INT 21
13572: PUSH
13573: LD_INT 22
13575: PUSH
13576: LD_INT 23
13578: PUSH
13579: LD_INT 24
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
13588: GO 13737
13590: LD_INT 51
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13624
13598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13599: LD_ADDR_VAR 0 3
13603: PUSH
13604: LD_INT 21
13606: PUSH
13607: LD_INT 22
13609: PUSH
13610: LD_INT 23
13612: PUSH
13613: LD_INT 24
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: ST_TO_ADDR
13622: GO 13737
13624: LD_INT 52
13626: DOUBLE
13627: EQUAL
13628: IFTRUE 13632
13630: GO 13658
13632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13633: LD_ADDR_VAR 0 3
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 22
13643: PUSH
13644: LD_INT 23
13646: PUSH
13647: LD_INT 24
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: ST_TO_ADDR
13656: GO 13737
13658: LD_INT 53
13660: DOUBLE
13661: EQUAL
13662: IFTRUE 13666
13664: GO 13684
13666: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13667: LD_ADDR_VAR 0 3
13671: PUSH
13672: LD_INT 23
13674: PUSH
13675: LD_INT 24
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: ST_TO_ADDR
13682: GO 13737
13684: LD_INT 46
13686: DOUBLE
13687: EQUAL
13688: IFTRUE 13692
13690: GO 13710
13692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_INT 23
13700: PUSH
13701: LD_INT 24
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: ST_TO_ADDR
13708: GO 13737
13710: LD_INT 47
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13736
13718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_INT 23
13726: PUSH
13727: LD_INT 24
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
13734: GO 13737
13736: POP
// result := ( chassis in result ) ;
13737: LD_ADDR_VAR 0 3
13741: PUSH
13742: LD_VAR 0 1
13746: PUSH
13747: LD_VAR 0 3
13751: IN
13752: ST_TO_ADDR
// end ;
13753: LD_VAR 0 3
13757: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13758: LD_INT 0
13760: PPUSH
13761: PPUSH
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
// result := array ;
13767: LD_ADDR_VAR 0 5
13771: PUSH
13772: LD_VAR 0 1
13776: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13777: LD_VAR 0 1
13781: NOT
13782: PUSH
13783: LD_VAR 0 2
13787: NOT
13788: OR
13789: PUSH
13790: LD_VAR 0 3
13794: NOT
13795: OR
13796: PUSH
13797: LD_VAR 0 2
13801: PUSH
13802: LD_VAR 0 1
13806: GREATER
13807: OR
13808: PUSH
13809: LD_VAR 0 3
13813: PUSH
13814: LD_VAR 0 1
13818: GREATER
13819: OR
13820: IFFALSE 13824
// exit ;
13822: GO 14120
// if direction then
13824: LD_VAR 0 4
13828: IFFALSE 13892
// begin d := 1 ;
13830: LD_ADDR_VAR 0 9
13834: PUSH
13835: LD_INT 1
13837: ST_TO_ADDR
// if i_from > i_to then
13838: LD_VAR 0 2
13842: PUSH
13843: LD_VAR 0 3
13847: GREATER
13848: IFFALSE 13874
// length := ( array - i_from ) + i_to else
13850: LD_ADDR_VAR 0 11
13854: PUSH
13855: LD_VAR 0 1
13859: PUSH
13860: LD_VAR 0 2
13864: MINUS
13865: PUSH
13866: LD_VAR 0 3
13870: PLUS
13871: ST_TO_ADDR
13872: GO 13890
// length := i_to - i_from ;
13874: LD_ADDR_VAR 0 11
13878: PUSH
13879: LD_VAR 0 3
13883: PUSH
13884: LD_VAR 0 2
13888: MINUS
13889: ST_TO_ADDR
// end else
13890: GO 13953
// begin d := - 1 ;
13892: LD_ADDR_VAR 0 9
13896: PUSH
13897: LD_INT 1
13899: NEG
13900: ST_TO_ADDR
// if i_from > i_to then
13901: LD_VAR 0 2
13905: PUSH
13906: LD_VAR 0 3
13910: GREATER
13911: IFFALSE 13931
// length := i_from - i_to else
13913: LD_ADDR_VAR 0 11
13917: PUSH
13918: LD_VAR 0 2
13922: PUSH
13923: LD_VAR 0 3
13927: MINUS
13928: ST_TO_ADDR
13929: GO 13953
// length := ( array - i_to ) + i_from ;
13931: LD_ADDR_VAR 0 11
13935: PUSH
13936: LD_VAR 0 1
13940: PUSH
13941: LD_VAR 0 3
13945: MINUS
13946: PUSH
13947: LD_VAR 0 2
13951: PLUS
13952: ST_TO_ADDR
// end ; if not length then
13953: LD_VAR 0 11
13957: NOT
13958: IFFALSE 13962
// exit ;
13960: GO 14120
// tmp := array ;
13962: LD_ADDR_VAR 0 10
13966: PUSH
13967: LD_VAR 0 1
13971: ST_TO_ADDR
// for i = 1 to length do
13972: LD_ADDR_VAR 0 6
13976: PUSH
13977: DOUBLE
13978: LD_INT 1
13980: DEC
13981: ST_TO_ADDR
13982: LD_VAR 0 11
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14108
// begin for j = 1 to array do
13990: LD_ADDR_VAR 0 7
13994: PUSH
13995: DOUBLE
13996: LD_INT 1
13998: DEC
13999: ST_TO_ADDR
14000: LD_VAR 0 1
14004: PUSH
14005: FOR_TO
14006: IFFALSE 14094
// begin k := j + d ;
14008: LD_ADDR_VAR 0 8
14012: PUSH
14013: LD_VAR 0 7
14017: PUSH
14018: LD_VAR 0 9
14022: PLUS
14023: ST_TO_ADDR
// if k > array then
14024: LD_VAR 0 8
14028: PUSH
14029: LD_VAR 0 1
14033: GREATER
14034: IFFALSE 14044
// k := 1 ;
14036: LD_ADDR_VAR 0 8
14040: PUSH
14041: LD_INT 1
14043: ST_TO_ADDR
// if not k then
14044: LD_VAR 0 8
14048: NOT
14049: IFFALSE 14061
// k := array ;
14051: LD_ADDR_VAR 0 8
14055: PUSH
14056: LD_VAR 0 1
14060: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14061: LD_ADDR_VAR 0 10
14065: PUSH
14066: LD_VAR 0 10
14070: PPUSH
14071: LD_VAR 0 8
14075: PPUSH
14076: LD_VAR 0 1
14080: PUSH
14081: LD_VAR 0 7
14085: ARRAY
14086: PPUSH
14087: CALL_OW 1
14091: ST_TO_ADDR
// end ;
14092: GO 14005
14094: POP
14095: POP
// array := tmp ;
14096: LD_ADDR_VAR 0 1
14100: PUSH
14101: LD_VAR 0 10
14105: ST_TO_ADDR
// end ;
14106: GO 13987
14108: POP
14109: POP
// result := array ;
14110: LD_ADDR_VAR 0 5
14114: PUSH
14115: LD_VAR 0 1
14119: ST_TO_ADDR
// end ;
14120: LD_VAR 0 5
14124: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14125: LD_INT 0
14127: PPUSH
14128: PPUSH
// result := 0 ;
14129: LD_ADDR_VAR 0 3
14133: PUSH
14134: LD_INT 0
14136: ST_TO_ADDR
// if not array or not value in array then
14137: LD_VAR 0 1
14141: NOT
14142: PUSH
14143: LD_VAR 0 2
14147: PUSH
14148: LD_VAR 0 1
14152: IN
14153: NOT
14154: OR
14155: IFFALSE 14159
// exit ;
14157: GO 14213
// for i = 1 to array do
14159: LD_ADDR_VAR 0 4
14163: PUSH
14164: DOUBLE
14165: LD_INT 1
14167: DEC
14168: ST_TO_ADDR
14169: LD_VAR 0 1
14173: PUSH
14174: FOR_TO
14175: IFFALSE 14211
// if value = array [ i ] then
14177: LD_VAR 0 2
14181: PUSH
14182: LD_VAR 0 1
14186: PUSH
14187: LD_VAR 0 4
14191: ARRAY
14192: EQUAL
14193: IFFALSE 14209
// begin result := i ;
14195: LD_ADDR_VAR 0 3
14199: PUSH
14200: LD_VAR 0 4
14204: ST_TO_ADDR
// exit ;
14205: POP
14206: POP
14207: GO 14213
// end ;
14209: GO 14174
14211: POP
14212: POP
// end ;
14213: LD_VAR 0 3
14217: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14218: LD_INT 0
14220: PPUSH
// vc_chassis := chassis ;
14221: LD_ADDR_OWVAR 37
14225: PUSH
14226: LD_VAR 0 1
14230: ST_TO_ADDR
// vc_engine := engine ;
14231: LD_ADDR_OWVAR 39
14235: PUSH
14236: LD_VAR 0 2
14240: ST_TO_ADDR
// vc_control := control ;
14241: LD_ADDR_OWVAR 38
14245: PUSH
14246: LD_VAR 0 3
14250: ST_TO_ADDR
// vc_weapon := weapon ;
14251: LD_ADDR_OWVAR 40
14255: PUSH
14256: LD_VAR 0 4
14260: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14261: LD_ADDR_OWVAR 41
14265: PUSH
14266: LD_VAR 0 5
14270: ST_TO_ADDR
// end ;
14271: LD_VAR 0 6
14275: RET
// export function WantPlant ( unit ) ; var task ; begin
14276: LD_INT 0
14278: PPUSH
14279: PPUSH
// result := false ;
14280: LD_ADDR_VAR 0 2
14284: PUSH
14285: LD_INT 0
14287: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14288: LD_ADDR_VAR 0 3
14292: PUSH
14293: LD_VAR 0 1
14297: PPUSH
14298: CALL_OW 437
14302: ST_TO_ADDR
// if task then
14303: LD_VAR 0 3
14307: IFFALSE 14335
// if task [ 1 ] [ 1 ] = p then
14309: LD_VAR 0 3
14313: PUSH
14314: LD_INT 1
14316: ARRAY
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: PUSH
14322: LD_STRING p
14324: EQUAL
14325: IFFALSE 14335
// result := true ;
14327: LD_ADDR_VAR 0 2
14331: PUSH
14332: LD_INT 1
14334: ST_TO_ADDR
// end ;
14335: LD_VAR 0 2
14339: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14340: LD_INT 0
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
// if pos < 1 then
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 1
14353: LESS
14354: IFFALSE 14358
// exit ;
14356: GO 14661
// if pos = 1 then
14358: LD_VAR 0 2
14362: PUSH
14363: LD_INT 1
14365: EQUAL
14366: IFFALSE 14399
// result := Replace ( arr , pos [ 1 ] , value ) else
14368: LD_ADDR_VAR 0 4
14372: PUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: LD_VAR 0 2
14382: PUSH
14383: LD_INT 1
14385: ARRAY
14386: PPUSH
14387: LD_VAR 0 3
14391: PPUSH
14392: CALL_OW 1
14396: ST_TO_ADDR
14397: GO 14661
// begin tmp := arr ;
14399: LD_ADDR_VAR 0 6
14403: PUSH
14404: LD_VAR 0 1
14408: ST_TO_ADDR
// s_arr := [ tmp ] ;
14409: LD_ADDR_VAR 0 7
14413: PUSH
14414: LD_VAR 0 6
14418: PUSH
14419: EMPTY
14420: LIST
14421: ST_TO_ADDR
// for i = 1 to pos - 1 do
14422: LD_ADDR_VAR 0 5
14426: PUSH
14427: DOUBLE
14428: LD_INT 1
14430: DEC
14431: ST_TO_ADDR
14432: LD_VAR 0 2
14436: PUSH
14437: LD_INT 1
14439: MINUS
14440: PUSH
14441: FOR_TO
14442: IFFALSE 14487
// begin tmp := tmp [ pos [ i ] ] ;
14444: LD_ADDR_VAR 0 6
14448: PUSH
14449: LD_VAR 0 6
14453: PUSH
14454: LD_VAR 0 2
14458: PUSH
14459: LD_VAR 0 5
14463: ARRAY
14464: ARRAY
14465: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14466: LD_ADDR_VAR 0 7
14470: PUSH
14471: LD_VAR 0 7
14475: PUSH
14476: LD_VAR 0 6
14480: PUSH
14481: EMPTY
14482: LIST
14483: ADD
14484: ST_TO_ADDR
// end ;
14485: GO 14441
14487: POP
14488: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14489: LD_ADDR_VAR 0 6
14493: PUSH
14494: LD_VAR 0 6
14498: PPUSH
14499: LD_VAR 0 2
14503: PUSH
14504: LD_VAR 0 2
14508: ARRAY
14509: PPUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: CALL_OW 1
14519: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14520: LD_ADDR_VAR 0 7
14524: PUSH
14525: LD_VAR 0 7
14529: PPUSH
14530: LD_VAR 0 7
14534: PPUSH
14535: LD_VAR 0 6
14539: PPUSH
14540: CALL_OW 1
14544: ST_TO_ADDR
// for i = s_arr downto 2 do
14545: LD_ADDR_VAR 0 5
14549: PUSH
14550: DOUBLE
14551: LD_VAR 0 7
14555: INC
14556: ST_TO_ADDR
14557: LD_INT 2
14559: PUSH
14560: FOR_DOWNTO
14561: IFFALSE 14645
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14563: LD_ADDR_VAR 0 6
14567: PUSH
14568: LD_VAR 0 7
14572: PUSH
14573: LD_VAR 0 5
14577: PUSH
14578: LD_INT 1
14580: MINUS
14581: ARRAY
14582: PPUSH
14583: LD_VAR 0 2
14587: PUSH
14588: LD_VAR 0 5
14592: PUSH
14593: LD_INT 1
14595: MINUS
14596: ARRAY
14597: PPUSH
14598: LD_VAR 0 7
14602: PUSH
14603: LD_VAR 0 5
14607: ARRAY
14608: PPUSH
14609: CALL_OW 1
14613: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14614: LD_ADDR_VAR 0 7
14618: PUSH
14619: LD_VAR 0 7
14623: PPUSH
14624: LD_VAR 0 5
14628: PUSH
14629: LD_INT 1
14631: MINUS
14632: PPUSH
14633: LD_VAR 0 6
14637: PPUSH
14638: CALL_OW 1
14642: ST_TO_ADDR
// end ;
14643: GO 14560
14645: POP
14646: POP
// result := s_arr [ 1 ] ;
14647: LD_ADDR_VAR 0 4
14651: PUSH
14652: LD_VAR 0 7
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: ST_TO_ADDR
// end ; end ;
14661: LD_VAR 0 4
14665: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
// if not list then
14670: LD_VAR 0 1
14674: NOT
14675: IFFALSE 14679
// exit ;
14677: GO 14770
// i := list [ pos1 ] ;
14679: LD_ADDR_VAR 0 5
14683: PUSH
14684: LD_VAR 0 1
14688: PUSH
14689: LD_VAR 0 2
14693: ARRAY
14694: ST_TO_ADDR
// if not i then
14695: LD_VAR 0 5
14699: NOT
14700: IFFALSE 14704
// exit ;
14702: GO 14770
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14704: LD_ADDR_VAR 0 1
14708: PUSH
14709: LD_VAR 0 1
14713: PPUSH
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_VAR 0 1
14723: PUSH
14724: LD_VAR 0 3
14728: ARRAY
14729: PPUSH
14730: CALL_OW 1
14734: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14735: LD_ADDR_VAR 0 1
14739: PUSH
14740: LD_VAR 0 1
14744: PPUSH
14745: LD_VAR 0 3
14749: PPUSH
14750: LD_VAR 0 5
14754: PPUSH
14755: CALL_OW 1
14759: ST_TO_ADDR
// result := list ;
14760: LD_ADDR_VAR 0 4
14764: PUSH
14765: LD_VAR 0 1
14769: ST_TO_ADDR
// end ;
14770: LD_VAR 0 4
14774: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14775: LD_INT 0
14777: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14778: LD_ADDR_VAR 0 5
14782: PUSH
14783: LD_VAR 0 1
14787: PPUSH
14788: CALL_OW 250
14792: PPUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 251
14802: PPUSH
14803: LD_VAR 0 2
14807: PPUSH
14808: LD_VAR 0 3
14812: PPUSH
14813: LD_VAR 0 4
14817: PPUSH
14818: CALL 15196 0 5
14822: ST_TO_ADDR
// end ;
14823: LD_VAR 0 5
14827: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14828: LD_INT 0
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
// if not list or not unit then
14834: LD_VAR 0 2
14838: NOT
14839: PUSH
14840: LD_VAR 0 1
14844: NOT
14845: OR
14846: IFFALSE 14850
// exit ;
14848: GO 15191
// result := [ ] ;
14850: LD_ADDR_VAR 0 5
14854: PUSH
14855: EMPTY
14856: ST_TO_ADDR
// for i in list do
14857: LD_ADDR_VAR 0 6
14861: PUSH
14862: LD_VAR 0 2
14866: PUSH
14867: FOR_IN
14868: IFFALSE 15086
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14870: LD_ADDR_VAR 0 8
14874: PUSH
14875: LD_VAR 0 1
14879: PPUSH
14880: LD_VAR 0 6
14884: PUSH
14885: LD_INT 1
14887: ARRAY
14888: PPUSH
14889: LD_VAR 0 6
14893: PUSH
14894: LD_INT 2
14896: ARRAY
14897: PPUSH
14898: CALL_OW 297
14902: ST_TO_ADDR
// if not Count ( result ) then
14903: LD_VAR 0 5
14907: PPUSH
14908: CALL 11480 0 1
14912: NOT
14913: IFFALSE 14946
// begin result := Join ( result , [ i , tmp ] ) ;
14915: LD_ADDR_VAR 0 5
14919: PUSH
14920: LD_VAR 0 5
14924: PPUSH
14925: LD_VAR 0 6
14929: PUSH
14930: LD_VAR 0 8
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL 47089 0 2
14943: ST_TO_ADDR
// continue ;
14944: GO 14867
// end ; if result [ result ] [ 2 ] <= tmp then
14946: LD_VAR 0 5
14950: PUSH
14951: LD_VAR 0 5
14955: ARRAY
14956: PUSH
14957: LD_INT 2
14959: ARRAY
14960: PUSH
14961: LD_VAR 0 8
14965: LESSEQUAL
14966: IFFALSE 14999
// result := Join ( result , [ i , tmp ] ) else
14968: LD_ADDR_VAR 0 5
14972: PUSH
14973: LD_VAR 0 5
14977: PPUSH
14978: LD_VAR 0 6
14982: PUSH
14983: LD_VAR 0 8
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL 47089 0 2
14996: ST_TO_ADDR
14997: GO 15084
// begin for j := 1 to Count ( result ) do
14999: LD_ADDR_VAR 0 7
15003: PUSH
15004: DOUBLE
15005: LD_INT 1
15007: DEC
15008: ST_TO_ADDR
15009: LD_VAR 0 5
15013: PPUSH
15014: CALL 11480 0 1
15018: PUSH
15019: FOR_TO
15020: IFFALSE 15082
// begin if tmp < result [ j ] [ 2 ] then
15022: LD_VAR 0 8
15026: PUSH
15027: LD_VAR 0 5
15031: PUSH
15032: LD_VAR 0 7
15036: ARRAY
15037: PUSH
15038: LD_INT 2
15040: ARRAY
15041: LESS
15042: IFFALSE 15080
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15044: LD_ADDR_VAR 0 5
15048: PUSH
15049: LD_VAR 0 5
15053: PPUSH
15054: LD_VAR 0 7
15058: PPUSH
15059: LD_VAR 0 6
15063: PUSH
15064: LD_VAR 0 8
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 2
15077: ST_TO_ADDR
// break ;
15078: GO 15082
// end ; end ;
15080: GO 15019
15082: POP
15083: POP
// end ; end ;
15084: GO 14867
15086: POP
15087: POP
// if result and not asc then
15088: LD_VAR 0 5
15092: PUSH
15093: LD_VAR 0 3
15097: NOT
15098: AND
15099: IFFALSE 15116
// result := ReverseArray ( result ) ;
15101: LD_ADDR_VAR 0 5
15105: PUSH
15106: LD_VAR 0 5
15110: PPUSH
15111: CALL 42356 0 1
15115: ST_TO_ADDR
// tmp := [ ] ;
15116: LD_ADDR_VAR 0 8
15120: PUSH
15121: EMPTY
15122: ST_TO_ADDR
// if mode then
15123: LD_VAR 0 4
15127: IFFALSE 15191
// begin for i := 1 to result do
15129: LD_ADDR_VAR 0 6
15133: PUSH
15134: DOUBLE
15135: LD_INT 1
15137: DEC
15138: ST_TO_ADDR
15139: LD_VAR 0 5
15143: PUSH
15144: FOR_TO
15145: IFFALSE 15179
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15147: LD_ADDR_VAR 0 8
15151: PUSH
15152: LD_VAR 0 8
15156: PPUSH
15157: LD_VAR 0 5
15161: PUSH
15162: LD_VAR 0 6
15166: ARRAY
15167: PUSH
15168: LD_INT 1
15170: ARRAY
15171: PPUSH
15172: CALL 47089 0 2
15176: ST_TO_ADDR
15177: GO 15144
15179: POP
15180: POP
// result := tmp ;
15181: LD_ADDR_VAR 0 5
15185: PUSH
15186: LD_VAR 0 8
15190: ST_TO_ADDR
// end ; end ;
15191: LD_VAR 0 5
15195: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15196: LD_INT 0
15198: PPUSH
15199: PPUSH
15200: PPUSH
15201: PPUSH
// if not list then
15202: LD_VAR 0 3
15206: NOT
15207: IFFALSE 15211
// exit ;
15209: GO 15599
// result := [ ] ;
15211: LD_ADDR_VAR 0 6
15215: PUSH
15216: EMPTY
15217: ST_TO_ADDR
// for i in list do
15218: LD_ADDR_VAR 0 7
15222: PUSH
15223: LD_VAR 0 3
15227: PUSH
15228: FOR_IN
15229: IFFALSE 15431
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15231: LD_ADDR_VAR 0 9
15235: PUSH
15236: LD_VAR 0 7
15240: PPUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: LD_VAR 0 2
15250: PPUSH
15251: CALL_OW 297
15255: ST_TO_ADDR
// if not result then
15256: LD_VAR 0 6
15260: NOT
15261: IFFALSE 15287
// result := [ [ i , tmp ] ] else
15263: LD_ADDR_VAR 0 6
15267: PUSH
15268: LD_VAR 0 7
15272: PUSH
15273: LD_VAR 0 9
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: ST_TO_ADDR
15285: GO 15429
// begin if result [ result ] [ 2 ] <= tmp then
15287: LD_VAR 0 6
15291: PUSH
15292: LD_VAR 0 6
15296: ARRAY
15297: PUSH
15298: LD_INT 2
15300: ARRAY
15301: PUSH
15302: LD_VAR 0 9
15306: LESSEQUAL
15307: IFFALSE 15349
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15309: LD_ADDR_VAR 0 6
15313: PUSH
15314: LD_VAR 0 6
15318: PPUSH
15319: LD_VAR 0 6
15323: PUSH
15324: LD_INT 1
15326: PLUS
15327: PPUSH
15328: LD_VAR 0 7
15332: PUSH
15333: LD_VAR 0 9
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 2
15346: ST_TO_ADDR
15347: GO 15429
// for j := 1 to result do
15349: LD_ADDR_VAR 0 8
15353: PUSH
15354: DOUBLE
15355: LD_INT 1
15357: DEC
15358: ST_TO_ADDR
15359: LD_VAR 0 6
15363: PUSH
15364: FOR_TO
15365: IFFALSE 15427
// begin if tmp < result [ j ] [ 2 ] then
15367: LD_VAR 0 9
15371: PUSH
15372: LD_VAR 0 6
15376: PUSH
15377: LD_VAR 0 8
15381: ARRAY
15382: PUSH
15383: LD_INT 2
15385: ARRAY
15386: LESS
15387: IFFALSE 15425
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15389: LD_ADDR_VAR 0 6
15393: PUSH
15394: LD_VAR 0 6
15398: PPUSH
15399: LD_VAR 0 8
15403: PPUSH
15404: LD_VAR 0 7
15408: PUSH
15409: LD_VAR 0 9
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 2
15422: ST_TO_ADDR
// break ;
15423: GO 15427
// end ; end ;
15425: GO 15364
15427: POP
15428: POP
// end ; end ;
15429: GO 15228
15431: POP
15432: POP
// if result and not asc then
15433: LD_VAR 0 6
15437: PUSH
15438: LD_VAR 0 4
15442: NOT
15443: AND
15444: IFFALSE 15519
// begin tmp := result ;
15446: LD_ADDR_VAR 0 9
15450: PUSH
15451: LD_VAR 0 6
15455: ST_TO_ADDR
// for i = tmp downto 1 do
15456: LD_ADDR_VAR 0 7
15460: PUSH
15461: DOUBLE
15462: LD_VAR 0 9
15466: INC
15467: ST_TO_ADDR
15468: LD_INT 1
15470: PUSH
15471: FOR_DOWNTO
15472: IFFALSE 15517
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15474: LD_ADDR_VAR 0 6
15478: PUSH
15479: LD_VAR 0 6
15483: PPUSH
15484: LD_VAR 0 9
15488: PUSH
15489: LD_VAR 0 7
15493: MINUS
15494: PUSH
15495: LD_INT 1
15497: PLUS
15498: PPUSH
15499: LD_VAR 0 9
15503: PUSH
15504: LD_VAR 0 7
15508: ARRAY
15509: PPUSH
15510: CALL_OW 1
15514: ST_TO_ADDR
15515: GO 15471
15517: POP
15518: POP
// end ; tmp := [ ] ;
15519: LD_ADDR_VAR 0 9
15523: PUSH
15524: EMPTY
15525: ST_TO_ADDR
// if mode then
15526: LD_VAR 0 5
15530: IFFALSE 15599
// begin for i = 1 to result do
15532: LD_ADDR_VAR 0 7
15536: PUSH
15537: DOUBLE
15538: LD_INT 1
15540: DEC
15541: ST_TO_ADDR
15542: LD_VAR 0 6
15546: PUSH
15547: FOR_TO
15548: IFFALSE 15587
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15550: LD_ADDR_VAR 0 9
15554: PUSH
15555: LD_VAR 0 9
15559: PPUSH
15560: LD_VAR 0 7
15564: PPUSH
15565: LD_VAR 0 6
15569: PUSH
15570: LD_VAR 0 7
15574: ARRAY
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PPUSH
15580: CALL_OW 1
15584: ST_TO_ADDR
15585: GO 15547
15587: POP
15588: POP
// result := tmp ;
15589: LD_ADDR_VAR 0 6
15593: PUSH
15594: LD_VAR 0 9
15598: ST_TO_ADDR
// end ; end ;
15599: LD_VAR 0 6
15603: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15612: LD_ADDR_VAR 0 5
15616: PUSH
15617: LD_INT 0
15619: PUSH
15620: LD_INT 0
15622: PUSH
15623: LD_INT 0
15625: PUSH
15626: EMPTY
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: ST_TO_ADDR
// if not x or not y then
15634: LD_VAR 0 2
15638: NOT
15639: PUSH
15640: LD_VAR 0 3
15644: NOT
15645: OR
15646: IFFALSE 15650
// exit ;
15648: GO 17300
// if not range then
15650: LD_VAR 0 4
15654: NOT
15655: IFFALSE 15665
// range := 10 ;
15657: LD_ADDR_VAR 0 4
15661: PUSH
15662: LD_INT 10
15664: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15665: LD_ADDR_VAR 0 8
15669: PUSH
15670: LD_INT 81
15672: PUSH
15673: LD_VAR 0 1
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 92
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_VAR 0 3
15694: PUSH
15695: LD_VAR 0 4
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 3
15708: PUSH
15709: LD_INT 21
15711: PUSH
15712: LD_INT 3
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 69
15732: ST_TO_ADDR
// if not tmp then
15733: LD_VAR 0 8
15737: NOT
15738: IFFALSE 15742
// exit ;
15740: GO 17300
// for i in tmp do
15742: LD_ADDR_VAR 0 6
15746: PUSH
15747: LD_VAR 0 8
15751: PUSH
15752: FOR_IN
15753: IFFALSE 17275
// begin points := [ 0 , 0 , 0 ] ;
15755: LD_ADDR_VAR 0 9
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: LD_INT 0
15765: PUSH
15766: LD_INT 0
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: ST_TO_ADDR
// bpoints := 1 ;
15774: LD_ADDR_VAR 0 10
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15782: LD_VAR 0 6
15786: PPUSH
15787: CALL_OW 247
15791: PUSH
15792: LD_INT 1
15794: DOUBLE
15795: EQUAL
15796: IFTRUE 15800
15798: GO 16378
15800: POP
// begin if GetClass ( i ) = 1 then
15801: LD_VAR 0 6
15805: PPUSH
15806: CALL_OW 257
15810: PUSH
15811: LD_INT 1
15813: EQUAL
15814: IFFALSE 15835
// points := [ 10 , 5 , 3 ] ;
15816: LD_ADDR_VAR 0 9
15820: PUSH
15821: LD_INT 10
15823: PUSH
15824: LD_INT 5
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15835: LD_VAR 0 6
15839: PPUSH
15840: CALL_OW 257
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: LD_INT 3
15850: PUSH
15851: LD_INT 4
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: IN
15859: IFFALSE 15880
// points := [ 3 , 2 , 1 ] ;
15861: LD_ADDR_VAR 0 9
15865: PUSH
15866: LD_INT 3
15868: PUSH
15869: LD_INT 2
15871: PUSH
15872: LD_INT 1
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15880: LD_VAR 0 6
15884: PPUSH
15885: CALL_OW 257
15889: PUSH
15890: LD_INT 5
15892: EQUAL
15893: IFFALSE 15914
// points := [ 130 , 5 , 2 ] ;
15895: LD_ADDR_VAR 0 9
15899: PUSH
15900: LD_INT 130
15902: PUSH
15903: LD_INT 5
15905: PUSH
15906: LD_INT 2
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15914: LD_VAR 0 6
15918: PPUSH
15919: CALL_OW 257
15923: PUSH
15924: LD_INT 8
15926: EQUAL
15927: IFFALSE 15948
// points := [ 35 , 35 , 30 ] ;
15929: LD_ADDR_VAR 0 9
15933: PUSH
15934: LD_INT 35
15936: PUSH
15937: LD_INT 35
15939: PUSH
15940: LD_INT 30
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15948: LD_VAR 0 6
15952: PPUSH
15953: CALL_OW 257
15957: PUSH
15958: LD_INT 9
15960: EQUAL
15961: IFFALSE 15982
// points := [ 20 , 55 , 40 ] ;
15963: LD_ADDR_VAR 0 9
15967: PUSH
15968: LD_INT 20
15970: PUSH
15971: LD_INT 55
15973: PUSH
15974: LD_INT 40
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15982: LD_VAR 0 6
15986: PPUSH
15987: CALL_OW 257
15991: PUSH
15992: LD_INT 12
15994: PUSH
15995: LD_INT 16
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: IN
16002: IFFALSE 16023
// points := [ 5 , 3 , 2 ] ;
16004: LD_ADDR_VAR 0 9
16008: PUSH
16009: LD_INT 5
16011: PUSH
16012: LD_INT 3
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16023: LD_VAR 0 6
16027: PPUSH
16028: CALL_OW 257
16032: PUSH
16033: LD_INT 17
16035: EQUAL
16036: IFFALSE 16057
// points := [ 100 , 50 , 75 ] ;
16038: LD_ADDR_VAR 0 9
16042: PUSH
16043: LD_INT 100
16045: PUSH
16046: LD_INT 50
16048: PUSH
16049: LD_INT 75
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16057: LD_VAR 0 6
16061: PPUSH
16062: CALL_OW 257
16066: PUSH
16067: LD_INT 15
16069: EQUAL
16070: IFFALSE 16091
// points := [ 10 , 5 , 3 ] ;
16072: LD_ADDR_VAR 0 9
16076: PUSH
16077: LD_INT 10
16079: PUSH
16080: LD_INT 5
16082: PUSH
16083: LD_INT 3
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16091: LD_VAR 0 6
16095: PPUSH
16096: CALL_OW 257
16100: PUSH
16101: LD_INT 14
16103: EQUAL
16104: IFFALSE 16125
// points := [ 10 , 0 , 0 ] ;
16106: LD_ADDR_VAR 0 9
16110: PUSH
16111: LD_INT 10
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: LD_INT 0
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16125: LD_VAR 0 6
16129: PPUSH
16130: CALL_OW 257
16134: PUSH
16135: LD_INT 11
16137: EQUAL
16138: IFFALSE 16159
// points := [ 30 , 10 , 5 ] ;
16140: LD_ADDR_VAR 0 9
16144: PUSH
16145: LD_INT 30
16147: PUSH
16148: LD_INT 10
16150: PUSH
16151: LD_INT 5
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 5
16166: PPUSH
16167: CALL_OW 321
16171: PUSH
16172: LD_INT 2
16174: EQUAL
16175: IFFALSE 16192
// bpoints := bpoints * 1.8 ;
16177: LD_ADDR_VAR 0 10
16181: PUSH
16182: LD_VAR 0 10
16186: PUSH
16187: LD_REAL  1.80000000000000E+0000
16190: MUL
16191: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16192: LD_VAR 0 6
16196: PPUSH
16197: CALL_OW 257
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: LD_INT 2
16207: PUSH
16208: LD_INT 3
16210: PUSH
16211: LD_INT 4
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: IN
16220: PUSH
16221: LD_VAR 0 1
16225: PPUSH
16226: LD_INT 51
16228: PPUSH
16229: CALL_OW 321
16233: PUSH
16234: LD_INT 2
16236: EQUAL
16237: AND
16238: IFFALSE 16255
// bpoints := bpoints * 1.2 ;
16240: LD_ADDR_VAR 0 10
16244: PUSH
16245: LD_VAR 0 10
16249: PUSH
16250: LD_REAL  1.20000000000000E+0000
16253: MUL
16254: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16255: LD_VAR 0 6
16259: PPUSH
16260: CALL_OW 257
16264: PUSH
16265: LD_INT 5
16267: PUSH
16268: LD_INT 7
16270: PUSH
16271: LD_INT 9
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: IN
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_INT 52
16287: PPUSH
16288: CALL_OW 321
16292: PUSH
16293: LD_INT 2
16295: EQUAL
16296: AND
16297: IFFALSE 16314
// bpoints := bpoints * 1.5 ;
16299: LD_ADDR_VAR 0 10
16303: PUSH
16304: LD_VAR 0 10
16308: PUSH
16309: LD_REAL  1.50000000000000E+0000
16312: MUL
16313: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16314: LD_VAR 0 1
16318: PPUSH
16319: LD_INT 66
16321: PPUSH
16322: CALL_OW 321
16326: PUSH
16327: LD_INT 2
16329: EQUAL
16330: IFFALSE 16347
// bpoints := bpoints * 1.1 ;
16332: LD_ADDR_VAR 0 10
16336: PUSH
16337: LD_VAR 0 10
16341: PUSH
16342: LD_REAL  1.10000000000000E+0000
16345: MUL
16346: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16347: LD_ADDR_VAR 0 10
16351: PUSH
16352: LD_VAR 0 10
16356: PUSH
16357: LD_VAR 0 6
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL_OW 259
16369: PUSH
16370: LD_REAL  1.15000000000000E+0000
16373: MUL
16374: MUL
16375: ST_TO_ADDR
// end ; unit_vehicle :
16376: GO 17204
16378: LD_INT 2
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 17192
16386: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16387: LD_VAR 0 6
16391: PPUSH
16392: CALL_OW 264
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 42
16402: PUSH
16403: LD_INT 24
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: IN
16411: IFFALSE 16432
// points := [ 25 , 5 , 3 ] ;
16413: LD_ADDR_VAR 0 9
16417: PUSH
16418: LD_INT 25
16420: PUSH
16421: LD_INT 5
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16432: LD_VAR 0 6
16436: PPUSH
16437: CALL_OW 264
16441: PUSH
16442: LD_INT 4
16444: PUSH
16445: LD_INT 43
16447: PUSH
16448: LD_INT 25
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: IN
16456: IFFALSE 16477
// points := [ 40 , 15 , 5 ] ;
16458: LD_ADDR_VAR 0 9
16462: PUSH
16463: LD_INT 40
16465: PUSH
16466: LD_INT 15
16468: PUSH
16469: LD_INT 5
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16477: LD_VAR 0 6
16481: PPUSH
16482: CALL_OW 264
16486: PUSH
16487: LD_INT 3
16489: PUSH
16490: LD_INT 23
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: IN
16497: IFFALSE 16518
// points := [ 7 , 25 , 8 ] ;
16499: LD_ADDR_VAR 0 9
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: LD_INT 25
16509: PUSH
16510: LD_INT 8
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16518: LD_VAR 0 6
16522: PPUSH
16523: CALL_OW 264
16527: PUSH
16528: LD_INT 5
16530: PUSH
16531: LD_INT 27
16533: PUSH
16534: LD_INT 44
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: IN
16542: IFFALSE 16563
// points := [ 14 , 50 , 16 ] ;
16544: LD_ADDR_VAR 0 9
16548: PUSH
16549: LD_INT 14
16551: PUSH
16552: LD_INT 50
16554: PUSH
16555: LD_INT 16
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16563: LD_VAR 0 6
16567: PPUSH
16568: CALL_OW 264
16572: PUSH
16573: LD_INT 6
16575: PUSH
16576: LD_INT 46
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: IN
16583: IFFALSE 16604
// points := [ 32 , 120 , 70 ] ;
16585: LD_ADDR_VAR 0 9
16589: PUSH
16590: LD_INT 32
16592: PUSH
16593: LD_INT 120
16595: PUSH
16596: LD_INT 70
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: LIST
16603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16604: LD_VAR 0 6
16608: PPUSH
16609: CALL_OW 264
16613: PUSH
16614: LD_INT 7
16616: PUSH
16617: LD_INT 28
16619: PUSH
16620: LD_INT 45
16622: PUSH
16623: LD_INT 92
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: IN
16632: IFFALSE 16653
// points := [ 35 , 20 , 45 ] ;
16634: LD_ADDR_VAR 0 9
16638: PUSH
16639: LD_INT 35
16641: PUSH
16642: LD_INT 20
16644: PUSH
16645: LD_INT 45
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16653: LD_VAR 0 6
16657: PPUSH
16658: CALL_OW 264
16662: PUSH
16663: LD_INT 47
16665: PUSH
16666: EMPTY
16667: LIST
16668: IN
16669: IFFALSE 16690
// points := [ 67 , 45 , 75 ] ;
16671: LD_ADDR_VAR 0 9
16675: PUSH
16676: LD_INT 67
16678: PUSH
16679: LD_INT 45
16681: PUSH
16682: LD_INT 75
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16690: LD_VAR 0 6
16694: PPUSH
16695: CALL_OW 264
16699: PUSH
16700: LD_INT 26
16702: PUSH
16703: EMPTY
16704: LIST
16705: IN
16706: IFFALSE 16727
// points := [ 120 , 30 , 80 ] ;
16708: LD_ADDR_VAR 0 9
16712: PUSH
16713: LD_INT 120
16715: PUSH
16716: LD_INT 30
16718: PUSH
16719: LD_INT 80
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16727: LD_VAR 0 6
16731: PPUSH
16732: CALL_OW 264
16736: PUSH
16737: LD_INT 22
16739: PUSH
16740: EMPTY
16741: LIST
16742: IN
16743: IFFALSE 16764
// points := [ 40 , 1 , 1 ] ;
16745: LD_ADDR_VAR 0 9
16749: PUSH
16750: LD_INT 40
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: LD_INT 1
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: LIST
16763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16764: LD_VAR 0 6
16768: PPUSH
16769: CALL_OW 264
16773: PUSH
16774: LD_INT 29
16776: PUSH
16777: EMPTY
16778: LIST
16779: IN
16780: IFFALSE 16801
// points := [ 70 , 200 , 400 ] ;
16782: LD_ADDR_VAR 0 9
16786: PUSH
16787: LD_INT 70
16789: PUSH
16790: LD_INT 200
16792: PUSH
16793: LD_INT 400
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16801: LD_VAR 0 6
16805: PPUSH
16806: CALL_OW 264
16810: PUSH
16811: LD_INT 14
16813: PUSH
16814: LD_INT 53
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: IN
16821: IFFALSE 16842
// points := [ 40 , 10 , 20 ] ;
16823: LD_ADDR_VAR 0 9
16827: PUSH
16828: LD_INT 40
16830: PUSH
16831: LD_INT 10
16833: PUSH
16834: LD_INT 20
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16842: LD_VAR 0 6
16846: PPUSH
16847: CALL_OW 264
16851: PUSH
16852: LD_INT 9
16854: PUSH
16855: EMPTY
16856: LIST
16857: IN
16858: IFFALSE 16879
// points := [ 5 , 70 , 20 ] ;
16860: LD_ADDR_VAR 0 9
16864: PUSH
16865: LD_INT 5
16867: PUSH
16868: LD_INT 70
16870: PUSH
16871: LD_INT 20
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: LIST
16878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16879: LD_VAR 0 6
16883: PPUSH
16884: CALL_OW 264
16888: PUSH
16889: LD_INT 10
16891: PUSH
16892: EMPTY
16893: LIST
16894: IN
16895: IFFALSE 16916
// points := [ 35 , 110 , 70 ] ;
16897: LD_ADDR_VAR 0 9
16901: PUSH
16902: LD_INT 35
16904: PUSH
16905: LD_INT 110
16907: PUSH
16908: LD_INT 70
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: LIST
16915: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16916: LD_VAR 0 6
16920: PPUSH
16921: CALL_OW 265
16925: PUSH
16926: LD_INT 25
16928: EQUAL
16929: IFFALSE 16950
// points := [ 80 , 65 , 100 ] ;
16931: LD_ADDR_VAR 0 9
16935: PUSH
16936: LD_INT 80
16938: PUSH
16939: LD_INT 65
16941: PUSH
16942: LD_INT 100
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16950: LD_VAR 0 6
16954: PPUSH
16955: CALL_OW 263
16959: PUSH
16960: LD_INT 1
16962: EQUAL
16963: IFFALSE 16998
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16965: LD_ADDR_VAR 0 10
16969: PUSH
16970: LD_VAR 0 10
16974: PUSH
16975: LD_VAR 0 6
16979: PPUSH
16980: CALL_OW 311
16984: PPUSH
16985: LD_INT 3
16987: PPUSH
16988: CALL_OW 259
16992: PUSH
16993: LD_INT 4
16995: MUL
16996: MUL
16997: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16998: LD_VAR 0 6
17002: PPUSH
17003: CALL_OW 263
17007: PUSH
17008: LD_INT 2
17010: EQUAL
17011: IFFALSE 17062
// begin j := IsControledBy ( i ) ;
17013: LD_ADDR_VAR 0 7
17017: PUSH
17018: LD_VAR 0 6
17022: PPUSH
17023: CALL_OW 312
17027: ST_TO_ADDR
// if j then
17028: LD_VAR 0 7
17032: IFFALSE 17062
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17034: LD_ADDR_VAR 0 10
17038: PUSH
17039: LD_VAR 0 10
17043: PUSH
17044: LD_VAR 0 7
17048: PPUSH
17049: LD_INT 3
17051: PPUSH
17052: CALL_OW 259
17056: PUSH
17057: LD_INT 3
17059: MUL
17060: MUL
17061: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17062: LD_VAR 0 6
17066: PPUSH
17067: CALL_OW 264
17071: PUSH
17072: LD_INT 5
17074: PUSH
17075: LD_INT 6
17077: PUSH
17078: LD_INT 46
17080: PUSH
17081: LD_INT 44
17083: PUSH
17084: LD_INT 47
17086: PUSH
17087: LD_INT 45
17089: PUSH
17090: LD_INT 28
17092: PUSH
17093: LD_INT 7
17095: PUSH
17096: LD_INT 27
17098: PUSH
17099: LD_INT 29
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: IN
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: LD_INT 52
17122: PPUSH
17123: CALL_OW 321
17127: PUSH
17128: LD_INT 2
17130: EQUAL
17131: AND
17132: IFFALSE 17149
// bpoints := bpoints * 1.2 ;
17134: LD_ADDR_VAR 0 10
17138: PUSH
17139: LD_VAR 0 10
17143: PUSH
17144: LD_REAL  1.20000000000000E+0000
17147: MUL
17148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17149: LD_VAR 0 6
17153: PPUSH
17154: CALL_OW 264
17158: PUSH
17159: LD_INT 6
17161: PUSH
17162: LD_INT 46
17164: PUSH
17165: LD_INT 47
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: IN
17173: IFFALSE 17190
// bpoints := bpoints * 1.2 ;
17175: LD_ADDR_VAR 0 10
17179: PUSH
17180: LD_VAR 0 10
17184: PUSH
17185: LD_REAL  1.20000000000000E+0000
17188: MUL
17189: ST_TO_ADDR
// end ; unit_building :
17190: GO 17204
17192: LD_INT 3
17194: DOUBLE
17195: EQUAL
17196: IFTRUE 17200
17198: GO 17203
17200: POP
// ; end ;
17201: GO 17204
17203: POP
// for j = 1 to 3 do
17204: LD_ADDR_VAR 0 7
17208: PUSH
17209: DOUBLE
17210: LD_INT 1
17212: DEC
17213: ST_TO_ADDR
17214: LD_INT 3
17216: PUSH
17217: FOR_TO
17218: IFFALSE 17271
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17220: LD_ADDR_VAR 0 5
17224: PUSH
17225: LD_VAR 0 5
17229: PPUSH
17230: LD_VAR 0 7
17234: PPUSH
17235: LD_VAR 0 5
17239: PUSH
17240: LD_VAR 0 7
17244: ARRAY
17245: PUSH
17246: LD_VAR 0 9
17250: PUSH
17251: LD_VAR 0 7
17255: ARRAY
17256: PUSH
17257: LD_VAR 0 10
17261: MUL
17262: PLUS
17263: PPUSH
17264: CALL_OW 1
17268: ST_TO_ADDR
17269: GO 17217
17271: POP
17272: POP
// end ;
17273: GO 15752
17275: POP
17276: POP
// result := Replace ( result , 4 , tmp ) ;
17277: LD_ADDR_VAR 0 5
17281: PUSH
17282: LD_VAR 0 5
17286: PPUSH
17287: LD_INT 4
17289: PPUSH
17290: LD_VAR 0 8
17294: PPUSH
17295: CALL_OW 1
17299: ST_TO_ADDR
// end ;
17300: LD_VAR 0 5
17304: RET
// export function DangerAtRange ( unit , range ) ; begin
17305: LD_INT 0
17307: PPUSH
// if not unit then
17308: LD_VAR 0 1
17312: NOT
17313: IFFALSE 17317
// exit ;
17315: GO 17362
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17317: LD_ADDR_VAR 0 3
17321: PUSH
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 255
17331: PPUSH
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 250
17341: PPUSH
17342: LD_VAR 0 1
17346: PPUSH
17347: CALL_OW 251
17351: PPUSH
17352: LD_VAR 0 2
17356: PPUSH
17357: CALL 15604 0 4
17361: ST_TO_ADDR
// end ;
17362: LD_VAR 0 3
17366: RET
// export function DangerInArea ( side , area ) ; begin
17367: LD_INT 0
17369: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17370: LD_ADDR_VAR 0 3
17374: PUSH
17375: LD_VAR 0 2
17379: PPUSH
17380: LD_INT 81
17382: PUSH
17383: LD_VAR 0 1
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PPUSH
17392: CALL_OW 70
17396: ST_TO_ADDR
// end ;
17397: LD_VAR 0 3
17401: RET
// export function IsExtension ( b ) ; begin
17402: LD_INT 0
17404: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_VAR 0 1
17414: PUSH
17415: LD_INT 23
17417: PUSH
17418: LD_INT 20
17420: PUSH
17421: LD_INT 22
17423: PUSH
17424: LD_INT 17
17426: PUSH
17427: LD_INT 24
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: LD_INT 19
17435: PUSH
17436: LD_INT 16
17438: PUSH
17439: LD_INT 25
17441: PUSH
17442: LD_INT 18
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: IN
17457: ST_TO_ADDR
// end ;
17458: LD_VAR 0 2
17462: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// result := [ ] ;
17468: LD_ADDR_VAR 0 4
17472: PUSH
17473: EMPTY
17474: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17475: LD_ADDR_VAR 0 5
17479: PUSH
17480: LD_VAR 0 2
17484: PPUSH
17485: LD_INT 21
17487: PUSH
17488: LD_INT 3
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PPUSH
17495: CALL_OW 70
17499: ST_TO_ADDR
// if not tmp then
17500: LD_VAR 0 5
17504: NOT
17505: IFFALSE 17509
// exit ;
17507: GO 17573
// if checkLink then
17509: LD_VAR 0 3
17513: IFFALSE 17563
// begin for i in tmp do
17515: LD_ADDR_VAR 0 6
17519: PUSH
17520: LD_VAR 0 5
17524: PUSH
17525: FOR_IN
17526: IFFALSE 17561
// if GetBase ( i ) <> base then
17528: LD_VAR 0 6
17532: PPUSH
17533: CALL_OW 274
17537: PUSH
17538: LD_VAR 0 1
17542: NONEQUAL
17543: IFFALSE 17559
// ComLinkToBase ( base , i ) ;
17545: LD_VAR 0 1
17549: PPUSH
17550: LD_VAR 0 6
17554: PPUSH
17555: CALL_OW 169
17559: GO 17525
17561: POP
17562: POP
// end ; result := tmp ;
17563: LD_ADDR_VAR 0 4
17567: PUSH
17568: LD_VAR 0 5
17572: ST_TO_ADDR
// end ;
17573: LD_VAR 0 4
17577: RET
// export function ComComplete ( units , b ) ; var i ; begin
17578: LD_INT 0
17580: PPUSH
17581: PPUSH
// if not units then
17582: LD_VAR 0 1
17586: NOT
17587: IFFALSE 17591
// exit ;
17589: GO 17681
// for i in units do
17591: LD_ADDR_VAR 0 4
17595: PUSH
17596: LD_VAR 0 1
17600: PUSH
17601: FOR_IN
17602: IFFALSE 17679
// if BuildingStatus ( b ) = bs_build then
17604: LD_VAR 0 2
17608: PPUSH
17609: CALL_OW 461
17613: PUSH
17614: LD_INT 1
17616: EQUAL
17617: IFFALSE 17677
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17619: LD_VAR 0 4
17623: PPUSH
17624: LD_STRING h
17626: PUSH
17627: LD_VAR 0 2
17631: PPUSH
17632: CALL_OW 250
17636: PUSH
17637: LD_VAR 0 2
17641: PPUSH
17642: CALL_OW 251
17646: PUSH
17647: LD_VAR 0 2
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: PPUSH
17673: CALL_OW 446
17677: GO 17601
17679: POP
17680: POP
// end ;
17681: LD_VAR 0 3
17685: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17686: LD_INT 0
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17694: LD_VAR 0 1
17698: NOT
17699: PUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 263
17709: PUSH
17710: LD_INT 2
17712: NONEQUAL
17713: OR
17714: IFFALSE 17718
// exit ;
17716: GO 18034
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17718: LD_ADDR_VAR 0 6
17722: PUSH
17723: LD_INT 22
17725: PUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 255
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: LD_INT 30
17745: PUSH
17746: LD_INT 36
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 34
17755: PUSH
17756: LD_INT 31
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 6
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 18034
// result := [ ] ;
17786: LD_ADDR_VAR 0 2
17790: PUSH
17791: EMPTY
17792: ST_TO_ADDR
// for i in tmp do
17793: LD_ADDR_VAR 0 3
17797: PUSH
17798: LD_VAR 0 6
17802: PUSH
17803: FOR_IN
17804: IFFALSE 17875
// begin t := UnitsInside ( i ) ;
17806: LD_ADDR_VAR 0 4
17810: PUSH
17811: LD_VAR 0 3
17815: PPUSH
17816: CALL_OW 313
17820: ST_TO_ADDR
// if t then
17821: LD_VAR 0 4
17825: IFFALSE 17873
// for j in t do
17827: LD_ADDR_VAR 0 7
17831: PUSH
17832: LD_VAR 0 4
17836: PUSH
17837: FOR_IN
17838: IFFALSE 17871
// result := Replace ( result , result + 1 , j ) ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_VAR 0 2
17849: PPUSH
17850: LD_VAR 0 2
17854: PUSH
17855: LD_INT 1
17857: PLUS
17858: PPUSH
17859: LD_VAR 0 7
17863: PPUSH
17864: CALL_OW 1
17868: ST_TO_ADDR
17869: GO 17837
17871: POP
17872: POP
// end ;
17873: GO 17803
17875: POP
17876: POP
// if not result then
17877: LD_VAR 0 2
17881: NOT
17882: IFFALSE 17886
// exit ;
17884: GO 18034
// mech := result [ 1 ] ;
17886: LD_ADDR_VAR 0 5
17890: PUSH
17891: LD_VAR 0 2
17895: PUSH
17896: LD_INT 1
17898: ARRAY
17899: ST_TO_ADDR
// if result > 1 then
17900: LD_VAR 0 2
17904: PUSH
17905: LD_INT 1
17907: GREATER
17908: IFFALSE 18020
// begin for i = 2 to result do
17910: LD_ADDR_VAR 0 3
17914: PUSH
17915: DOUBLE
17916: LD_INT 2
17918: DEC
17919: ST_TO_ADDR
17920: LD_VAR 0 2
17924: PUSH
17925: FOR_TO
17926: IFFALSE 18018
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17928: LD_ADDR_VAR 0 4
17932: PUSH
17933: LD_VAR 0 2
17937: PUSH
17938: LD_VAR 0 3
17942: ARRAY
17943: PPUSH
17944: LD_INT 3
17946: PPUSH
17947: CALL_OW 259
17951: PUSH
17952: LD_VAR 0 2
17956: PUSH
17957: LD_VAR 0 3
17961: ARRAY
17962: PPUSH
17963: CALL_OW 432
17967: MINUS
17968: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17969: LD_VAR 0 4
17973: PUSH
17974: LD_VAR 0 5
17978: PPUSH
17979: LD_INT 3
17981: PPUSH
17982: CALL_OW 259
17986: PUSH
17987: LD_VAR 0 5
17991: PPUSH
17992: CALL_OW 432
17996: MINUS
17997: GREATEREQUAL
17998: IFFALSE 18016
// mech := result [ i ] ;
18000: LD_ADDR_VAR 0 5
18004: PUSH
18005: LD_VAR 0 2
18009: PUSH
18010: LD_VAR 0 3
18014: ARRAY
18015: ST_TO_ADDR
// end ;
18016: GO 17925
18018: POP
18019: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18020: LD_VAR 0 1
18024: PPUSH
18025: LD_VAR 0 5
18029: PPUSH
18030: CALL_OW 135
// end ;
18034: LD_VAR 0 2
18038: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18039: LD_INT 0
18041: PPUSH
18042: PPUSH
18043: PPUSH
18044: PPUSH
18045: PPUSH
18046: PPUSH
18047: PPUSH
18048: PPUSH
18049: PPUSH
18050: PPUSH
18051: PPUSH
18052: PPUSH
18053: PPUSH
// result := [ ] ;
18054: LD_ADDR_VAR 0 7
18058: PUSH
18059: EMPTY
18060: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18061: LD_VAR 0 1
18065: PPUSH
18066: CALL_OW 266
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: IN
18081: NOT
18082: IFFALSE 18086
// exit ;
18084: GO 19720
// if name then
18086: LD_VAR 0 3
18090: IFFALSE 18106
// SetBName ( base_dep , name ) ;
18092: LD_VAR 0 1
18096: PPUSH
18097: LD_VAR 0 3
18101: PPUSH
18102: CALL_OW 500
// base := GetBase ( base_dep ) ;
18106: LD_ADDR_VAR 0 15
18110: PUSH
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 274
18120: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18121: LD_ADDR_VAR 0 16
18125: PUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 255
18135: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18136: LD_ADDR_VAR 0 17
18140: PUSH
18141: LD_VAR 0 1
18145: PPUSH
18146: CALL_OW 248
18150: ST_TO_ADDR
// if sources then
18151: LD_VAR 0 5
18155: IFFALSE 18202
// for i = 1 to 3 do
18157: LD_ADDR_VAR 0 8
18161: PUSH
18162: DOUBLE
18163: LD_INT 1
18165: DEC
18166: ST_TO_ADDR
18167: LD_INT 3
18169: PUSH
18170: FOR_TO
18171: IFFALSE 18200
// AddResourceType ( base , i , sources [ i ] ) ;
18173: LD_VAR 0 15
18177: PPUSH
18178: LD_VAR 0 8
18182: PPUSH
18183: LD_VAR 0 5
18187: PUSH
18188: LD_VAR 0 8
18192: ARRAY
18193: PPUSH
18194: CALL_OW 276
18198: GO 18170
18200: POP
18201: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18202: LD_ADDR_VAR 0 18
18206: PUSH
18207: LD_VAR 0 15
18211: PPUSH
18212: LD_VAR 0 2
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: CALL 17463 0 3
18224: ST_TO_ADDR
// InitHc ;
18225: CALL_OW 19
// InitUc ;
18229: CALL_OW 18
// uc_side := side ;
18233: LD_ADDR_OWVAR 20
18237: PUSH
18238: LD_VAR 0 16
18242: ST_TO_ADDR
// uc_nation := nation ;
18243: LD_ADDR_OWVAR 21
18247: PUSH
18248: LD_VAR 0 17
18252: ST_TO_ADDR
// if buildings then
18253: LD_VAR 0 18
18257: IFFALSE 19579
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18259: LD_ADDR_VAR 0 19
18263: PUSH
18264: LD_VAR 0 18
18268: PPUSH
18269: LD_INT 2
18271: PUSH
18272: LD_INT 30
18274: PUSH
18275: LD_INT 29
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 30
18284: PUSH
18285: LD_INT 30
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 72
18301: ST_TO_ADDR
// if tmp then
18302: LD_VAR 0 19
18306: IFFALSE 18354
// for i in tmp do
18308: LD_ADDR_VAR 0 8
18312: PUSH
18313: LD_VAR 0 19
18317: PUSH
18318: FOR_IN
18319: IFFALSE 18352
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18321: LD_VAR 0 8
18325: PPUSH
18326: CALL_OW 250
18330: PPUSH
18331: LD_VAR 0 8
18335: PPUSH
18336: CALL_OW 251
18340: PPUSH
18341: LD_VAR 0 16
18345: PPUSH
18346: CALL_OW 441
18350: GO 18318
18352: POP
18353: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18354: LD_VAR 0 18
18358: PPUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 30
18364: PUSH
18365: LD_INT 32
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 30
18374: PUSH
18375: LD_INT 33
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 72
18391: IFFALSE 18479
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18393: LD_ADDR_VAR 0 8
18397: PUSH
18398: LD_VAR 0 18
18402: PPUSH
18403: LD_INT 2
18405: PUSH
18406: LD_INT 30
18408: PUSH
18409: LD_INT 32
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 30
18418: PUSH
18419: LD_INT 33
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 72
18435: PUSH
18436: FOR_IN
18437: IFFALSE 18477
// begin if not GetBWeapon ( i ) then
18439: LD_VAR 0 8
18443: PPUSH
18444: CALL_OW 269
18448: NOT
18449: IFFALSE 18475
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18451: LD_VAR 0 8
18455: PPUSH
18456: LD_VAR 0 8
18460: PPUSH
18461: LD_VAR 0 2
18465: PPUSH
18466: CALL 19725 0 2
18470: PPUSH
18471: CALL_OW 431
// end ;
18475: GO 18436
18477: POP
18478: POP
// end ; for i = 1 to personel do
18479: LD_ADDR_VAR 0 8
18483: PUSH
18484: DOUBLE
18485: LD_INT 1
18487: DEC
18488: ST_TO_ADDR
18489: LD_VAR 0 6
18493: PUSH
18494: FOR_TO
18495: IFFALSE 19559
// begin if i > 4 then
18497: LD_VAR 0 8
18501: PUSH
18502: LD_INT 4
18504: GREATER
18505: IFFALSE 18509
// break ;
18507: GO 19559
// case i of 1 :
18509: LD_VAR 0 8
18513: PUSH
18514: LD_INT 1
18516: DOUBLE
18517: EQUAL
18518: IFTRUE 18522
18520: GO 18602
18522: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18523: LD_ADDR_VAR 0 12
18527: PUSH
18528: LD_VAR 0 18
18532: PPUSH
18533: LD_INT 22
18535: PUSH
18536: LD_VAR 0 16
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 58
18547: PUSH
18548: EMPTY
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 30
18556: PUSH
18557: LD_INT 32
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 30
18566: PUSH
18567: LD_INT 4
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 30
18576: PUSH
18577: LD_INT 5
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 72
18599: ST_TO_ADDR
18600: GO 18824
18602: LD_INT 2
18604: DOUBLE
18605: EQUAL
18606: IFTRUE 18610
18608: GO 18672
18610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18611: LD_ADDR_VAR 0 12
18615: PUSH
18616: LD_VAR 0 18
18620: PPUSH
18621: LD_INT 22
18623: PUSH
18624: LD_VAR 0 16
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 30
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 30
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 72
18669: ST_TO_ADDR
18670: GO 18824
18672: LD_INT 3
18674: DOUBLE
18675: EQUAL
18676: IFTRUE 18680
18678: GO 18742
18680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18681: LD_ADDR_VAR 0 12
18685: PUSH
18686: LD_VAR 0 18
18690: PPUSH
18691: LD_INT 22
18693: PUSH
18694: LD_VAR 0 16
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 30
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 30
18718: PUSH
18719: LD_INT 3
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PPUSH
18735: CALL_OW 72
18739: ST_TO_ADDR
18740: GO 18824
18742: LD_INT 4
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18750
18748: GO 18823
18750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18751: LD_ADDR_VAR 0 12
18755: PUSH
18756: LD_VAR 0 18
18760: PPUSH
18761: LD_INT 22
18763: PUSH
18764: LD_VAR 0 16
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 2
18775: PUSH
18776: LD_INT 30
18778: PUSH
18779: LD_INT 6
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 30
18788: PUSH
18789: LD_INT 7
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 30
18798: PUSH
18799: LD_INT 8
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PPUSH
18816: CALL_OW 72
18820: ST_TO_ADDR
18821: GO 18824
18823: POP
// if i = 1 then
18824: LD_VAR 0 8
18828: PUSH
18829: LD_INT 1
18831: EQUAL
18832: IFFALSE 18943
// begin tmp := [ ] ;
18834: LD_ADDR_VAR 0 19
18838: PUSH
18839: EMPTY
18840: ST_TO_ADDR
// for j in f do
18841: LD_ADDR_VAR 0 9
18845: PUSH
18846: LD_VAR 0 12
18850: PUSH
18851: FOR_IN
18852: IFFALSE 18925
// if GetBType ( j ) = b_bunker then
18854: LD_VAR 0 9
18858: PPUSH
18859: CALL_OW 266
18863: PUSH
18864: LD_INT 32
18866: EQUAL
18867: IFFALSE 18894
// tmp := Insert ( tmp , 1 , j ) else
18869: LD_ADDR_VAR 0 19
18873: PUSH
18874: LD_VAR 0 19
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: LD_VAR 0 9
18886: PPUSH
18887: CALL_OW 2
18891: ST_TO_ADDR
18892: GO 18923
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18894: LD_ADDR_VAR 0 19
18898: PUSH
18899: LD_VAR 0 19
18903: PPUSH
18904: LD_VAR 0 19
18908: PUSH
18909: LD_INT 1
18911: PLUS
18912: PPUSH
18913: LD_VAR 0 9
18917: PPUSH
18918: CALL_OW 2
18922: ST_TO_ADDR
18923: GO 18851
18925: POP
18926: POP
// if tmp then
18927: LD_VAR 0 19
18931: IFFALSE 18943
// f := tmp ;
18933: LD_ADDR_VAR 0 12
18937: PUSH
18938: LD_VAR 0 19
18942: ST_TO_ADDR
// end ; x := personel [ i ] ;
18943: LD_ADDR_VAR 0 13
18947: PUSH
18948: LD_VAR 0 6
18952: PUSH
18953: LD_VAR 0 8
18957: ARRAY
18958: ST_TO_ADDR
// if x = - 1 then
18959: LD_VAR 0 13
18963: PUSH
18964: LD_INT 1
18966: NEG
18967: EQUAL
18968: IFFALSE 19177
// begin for j in f do
18970: LD_ADDR_VAR 0 9
18974: PUSH
18975: LD_VAR 0 12
18979: PUSH
18980: FOR_IN
18981: IFFALSE 19173
// repeat InitHc ;
18983: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18987: LD_VAR 0 9
18991: PPUSH
18992: CALL_OW 266
18996: PUSH
18997: LD_INT 5
18999: EQUAL
19000: IFFALSE 19070
// begin if UnitsInside ( j ) < 3 then
19002: LD_VAR 0 9
19006: PPUSH
19007: CALL_OW 313
19011: PUSH
19012: LD_INT 3
19014: LESS
19015: IFFALSE 19051
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19017: LD_INT 0
19019: PPUSH
19020: LD_INT 5
19022: PUSH
19023: LD_INT 8
19025: PUSH
19026: LD_INT 9
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: PUSH
19034: LD_VAR 0 17
19038: ARRAY
19039: PPUSH
19040: LD_VAR 0 4
19044: PPUSH
19045: CALL_OW 380
19049: GO 19068
// PrepareHuman ( false , i , skill ) ;
19051: LD_INT 0
19053: PPUSH
19054: LD_VAR 0 8
19058: PPUSH
19059: LD_VAR 0 4
19063: PPUSH
19064: CALL_OW 380
// end else
19068: GO 19087
// PrepareHuman ( false , i , skill ) ;
19070: LD_INT 0
19072: PPUSH
19073: LD_VAR 0 8
19077: PPUSH
19078: LD_VAR 0 4
19082: PPUSH
19083: CALL_OW 380
// un := CreateHuman ;
19087: LD_ADDR_VAR 0 14
19091: PUSH
19092: CALL_OW 44
19096: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19097: LD_ADDR_VAR 0 7
19101: PUSH
19102: LD_VAR 0 7
19106: PPUSH
19107: LD_INT 1
19109: PPUSH
19110: LD_VAR 0 14
19114: PPUSH
19115: CALL_OW 2
19119: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19120: LD_VAR 0 14
19124: PPUSH
19125: LD_VAR 0 9
19129: PPUSH
19130: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19134: LD_VAR 0 9
19138: PPUSH
19139: CALL_OW 313
19143: PUSH
19144: LD_INT 6
19146: EQUAL
19147: PUSH
19148: LD_VAR 0 9
19152: PPUSH
19153: CALL_OW 266
19157: PUSH
19158: LD_INT 32
19160: PUSH
19161: LD_INT 31
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: IN
19168: OR
19169: IFFALSE 18983
19171: GO 18980
19173: POP
19174: POP
// end else
19175: GO 19557
// for j = 1 to x do
19177: LD_ADDR_VAR 0 9
19181: PUSH
19182: DOUBLE
19183: LD_INT 1
19185: DEC
19186: ST_TO_ADDR
19187: LD_VAR 0 13
19191: PUSH
19192: FOR_TO
19193: IFFALSE 19555
// begin InitHc ;
19195: CALL_OW 19
// if not f then
19199: LD_VAR 0 12
19203: NOT
19204: IFFALSE 19293
// begin PrepareHuman ( false , i , skill ) ;
19206: LD_INT 0
19208: PPUSH
19209: LD_VAR 0 8
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL_OW 380
// un := CreateHuman ;
19223: LD_ADDR_VAR 0 14
19227: PUSH
19228: CALL_OW 44
19232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19233: LD_ADDR_VAR 0 7
19237: PUSH
19238: LD_VAR 0 7
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: LD_VAR 0 14
19250: PPUSH
19251: CALL_OW 2
19255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19256: LD_VAR 0 14
19260: PPUSH
19261: LD_VAR 0 1
19265: PPUSH
19266: CALL_OW 250
19270: PPUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: CALL_OW 251
19280: PPUSH
19281: LD_INT 10
19283: PPUSH
19284: LD_INT 0
19286: PPUSH
19287: CALL_OW 50
// continue ;
19291: GO 19192
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19293: LD_VAR 0 12
19297: PUSH
19298: LD_INT 1
19300: ARRAY
19301: PPUSH
19302: CALL_OW 313
19306: PUSH
19307: LD_VAR 0 12
19311: PUSH
19312: LD_INT 1
19314: ARRAY
19315: PPUSH
19316: CALL_OW 266
19320: PUSH
19321: LD_INT 32
19323: PUSH
19324: LD_INT 31
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: IN
19331: AND
19332: PUSH
19333: LD_VAR 0 12
19337: PUSH
19338: LD_INT 1
19340: ARRAY
19341: PPUSH
19342: CALL_OW 313
19346: PUSH
19347: LD_INT 6
19349: EQUAL
19350: OR
19351: IFFALSE 19371
// f := Delete ( f , 1 ) ;
19353: LD_ADDR_VAR 0 12
19357: PUSH
19358: LD_VAR 0 12
19362: PPUSH
19363: LD_INT 1
19365: PPUSH
19366: CALL_OW 3
19370: ST_TO_ADDR
// if not f then
19371: LD_VAR 0 12
19375: NOT
19376: IFFALSE 19394
// begin x := x + 2 ;
19378: LD_ADDR_VAR 0 13
19382: PUSH
19383: LD_VAR 0 13
19387: PUSH
19388: LD_INT 2
19390: PLUS
19391: ST_TO_ADDR
// continue ;
19392: GO 19192
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19394: LD_VAR 0 12
19398: PUSH
19399: LD_INT 1
19401: ARRAY
19402: PPUSH
19403: CALL_OW 266
19407: PUSH
19408: LD_INT 5
19410: EQUAL
19411: IFFALSE 19485
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19413: LD_VAR 0 12
19417: PUSH
19418: LD_INT 1
19420: ARRAY
19421: PPUSH
19422: CALL_OW 313
19426: PUSH
19427: LD_INT 3
19429: LESS
19430: IFFALSE 19466
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19432: LD_INT 0
19434: PPUSH
19435: LD_INT 5
19437: PUSH
19438: LD_INT 8
19440: PUSH
19441: LD_INT 9
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: PUSH
19449: LD_VAR 0 17
19453: ARRAY
19454: PPUSH
19455: LD_VAR 0 4
19459: PPUSH
19460: CALL_OW 380
19464: GO 19483
// PrepareHuman ( false , i , skill ) ;
19466: LD_INT 0
19468: PPUSH
19469: LD_VAR 0 8
19473: PPUSH
19474: LD_VAR 0 4
19478: PPUSH
19479: CALL_OW 380
// end else
19483: GO 19502
// PrepareHuman ( false , i , skill ) ;
19485: LD_INT 0
19487: PPUSH
19488: LD_VAR 0 8
19492: PPUSH
19493: LD_VAR 0 4
19497: PPUSH
19498: CALL_OW 380
// un := CreateHuman ;
19502: LD_ADDR_VAR 0 14
19506: PUSH
19507: CALL_OW 44
19511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19512: LD_ADDR_VAR 0 7
19516: PUSH
19517: LD_VAR 0 7
19521: PPUSH
19522: LD_INT 1
19524: PPUSH
19525: LD_VAR 0 14
19529: PPUSH
19530: CALL_OW 2
19534: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19535: LD_VAR 0 14
19539: PPUSH
19540: LD_VAR 0 12
19544: PUSH
19545: LD_INT 1
19547: ARRAY
19548: PPUSH
19549: CALL_OW 52
// end ;
19553: GO 19192
19555: POP
19556: POP
// end ;
19557: GO 18494
19559: POP
19560: POP
// result := result ^ buildings ;
19561: LD_ADDR_VAR 0 7
19565: PUSH
19566: LD_VAR 0 7
19570: PUSH
19571: LD_VAR 0 18
19575: ADD
19576: ST_TO_ADDR
// end else
19577: GO 19720
// begin for i = 1 to personel do
19579: LD_ADDR_VAR 0 8
19583: PUSH
19584: DOUBLE
19585: LD_INT 1
19587: DEC
19588: ST_TO_ADDR
19589: LD_VAR 0 6
19593: PUSH
19594: FOR_TO
19595: IFFALSE 19718
// begin if i > 4 then
19597: LD_VAR 0 8
19601: PUSH
19602: LD_INT 4
19604: GREATER
19605: IFFALSE 19609
// break ;
19607: GO 19718
// x := personel [ i ] ;
19609: LD_ADDR_VAR 0 13
19613: PUSH
19614: LD_VAR 0 6
19618: PUSH
19619: LD_VAR 0 8
19623: ARRAY
19624: ST_TO_ADDR
// if x = - 1 then
19625: LD_VAR 0 13
19629: PUSH
19630: LD_INT 1
19632: NEG
19633: EQUAL
19634: IFFALSE 19638
// continue ;
19636: GO 19594
// PrepareHuman ( false , i , skill ) ;
19638: LD_INT 0
19640: PPUSH
19641: LD_VAR 0 8
19645: PPUSH
19646: LD_VAR 0 4
19650: PPUSH
19651: CALL_OW 380
// un := CreateHuman ;
19655: LD_ADDR_VAR 0 14
19659: PUSH
19660: CALL_OW 44
19664: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19665: LD_VAR 0 14
19669: PPUSH
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 250
19679: PPUSH
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 251
19689: PPUSH
19690: LD_INT 10
19692: PPUSH
19693: LD_INT 0
19695: PPUSH
19696: CALL_OW 50
// result := result ^ un ;
19700: LD_ADDR_VAR 0 7
19704: PUSH
19705: LD_VAR 0 7
19709: PUSH
19710: LD_VAR 0 14
19714: ADD
19715: ST_TO_ADDR
// end ;
19716: GO 19594
19718: POP
19719: POP
// end ; end ;
19720: LD_VAR 0 7
19724: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19725: LD_INT 0
19727: PPUSH
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
19735: PPUSH
19736: PPUSH
19737: PPUSH
19738: PPUSH
19739: PPUSH
19740: PPUSH
19741: PPUSH
19742: PPUSH
// result := false ;
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19751: LD_VAR 0 1
19755: NOT
19756: PUSH
19757: LD_VAR 0 1
19761: PPUSH
19762: CALL_OW 266
19766: PUSH
19767: LD_INT 32
19769: PUSH
19770: LD_INT 33
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: IN
19777: NOT
19778: OR
19779: IFFALSE 19783
// exit ;
19781: GO 20892
// nat := GetNation ( tower ) ;
19783: LD_ADDR_VAR 0 12
19787: PUSH
19788: LD_VAR 0 1
19792: PPUSH
19793: CALL_OW 248
19797: ST_TO_ADDR
// side := GetSide ( tower ) ;
19798: LD_ADDR_VAR 0 16
19802: PUSH
19803: LD_VAR 0 1
19807: PPUSH
19808: CALL_OW 255
19812: ST_TO_ADDR
// x := GetX ( tower ) ;
19813: LD_ADDR_VAR 0 10
19817: PUSH
19818: LD_VAR 0 1
19822: PPUSH
19823: CALL_OW 250
19827: ST_TO_ADDR
// y := GetY ( tower ) ;
19828: LD_ADDR_VAR 0 11
19832: PUSH
19833: LD_VAR 0 1
19837: PPUSH
19838: CALL_OW 251
19842: ST_TO_ADDR
// if not x or not y then
19843: LD_VAR 0 10
19847: NOT
19848: PUSH
19849: LD_VAR 0 11
19853: NOT
19854: OR
19855: IFFALSE 19859
// exit ;
19857: GO 20892
// weapon := 0 ;
19859: LD_ADDR_VAR 0 18
19863: PUSH
19864: LD_INT 0
19866: ST_TO_ADDR
// fac_list := [ ] ;
19867: LD_ADDR_VAR 0 17
19871: PUSH
19872: EMPTY
19873: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19874: LD_ADDR_VAR 0 6
19878: PUSH
19879: LD_VAR 0 1
19883: PPUSH
19884: CALL_OW 274
19888: PPUSH
19889: LD_VAR 0 2
19893: PPUSH
19894: LD_INT 0
19896: PPUSH
19897: CALL 17463 0 3
19901: PPUSH
19902: LD_INT 30
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 72
19916: ST_TO_ADDR
// if not factories then
19917: LD_VAR 0 6
19921: NOT
19922: IFFALSE 19926
// exit ;
19924: GO 20892
// for i in factories do
19926: LD_ADDR_VAR 0 8
19930: PUSH
19931: LD_VAR 0 6
19935: PUSH
19936: FOR_IN
19937: IFFALSE 19962
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19939: LD_ADDR_VAR 0 17
19943: PUSH
19944: LD_VAR 0 17
19948: PUSH
19949: LD_VAR 0 8
19953: PPUSH
19954: CALL_OW 478
19958: UNION
19959: ST_TO_ADDR
19960: GO 19936
19962: POP
19963: POP
// if not fac_list then
19964: LD_VAR 0 17
19968: NOT
19969: IFFALSE 19973
// exit ;
19971: GO 20892
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19973: LD_ADDR_VAR 0 5
19977: PUSH
19978: LD_INT 4
19980: PUSH
19981: LD_INT 5
19983: PUSH
19984: LD_INT 9
19986: PUSH
19987: LD_INT 10
19989: PUSH
19990: LD_INT 6
19992: PUSH
19993: LD_INT 7
19995: PUSH
19996: LD_INT 11
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 27
20010: PUSH
20011: LD_INT 28
20013: PUSH
20014: LD_INT 26
20016: PUSH
20017: LD_INT 30
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 43
20028: PUSH
20029: LD_INT 44
20031: PUSH
20032: LD_INT 46
20034: PUSH
20035: LD_INT 45
20037: PUSH
20038: LD_INT 47
20040: PUSH
20041: LD_INT 49
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: LD_VAR 0 12
20061: ARRAY
20062: ST_TO_ADDR
// list := list isect fac_list ;
20063: LD_ADDR_VAR 0 5
20067: PUSH
20068: LD_VAR 0 5
20072: PUSH
20073: LD_VAR 0 17
20077: ISECT
20078: ST_TO_ADDR
// if not list then
20079: LD_VAR 0 5
20083: NOT
20084: IFFALSE 20088
// exit ;
20086: GO 20892
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20088: LD_VAR 0 12
20092: PUSH
20093: LD_INT 3
20095: EQUAL
20096: PUSH
20097: LD_INT 49
20099: PUSH
20100: LD_VAR 0 5
20104: IN
20105: AND
20106: PUSH
20107: LD_INT 31
20109: PPUSH
20110: LD_VAR 0 16
20114: PPUSH
20115: CALL_OW 321
20119: PUSH
20120: LD_INT 2
20122: EQUAL
20123: AND
20124: IFFALSE 20184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20126: LD_INT 22
20128: PUSH
20129: LD_VAR 0 16
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 35
20140: PUSH
20141: LD_INT 49
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 91
20150: PUSH
20151: LD_VAR 0 1
20155: PUSH
20156: LD_INT 10
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: LIST
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: PPUSH
20169: CALL_OW 69
20173: NOT
20174: IFFALSE 20184
// weapon := ru_time_lapser ;
20176: LD_ADDR_VAR 0 18
20180: PUSH
20181: LD_INT 49
20183: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20184: LD_VAR 0 12
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: IN
20199: PUSH
20200: LD_INT 11
20202: PUSH
20203: LD_VAR 0 5
20207: IN
20208: PUSH
20209: LD_INT 30
20211: PUSH
20212: LD_VAR 0 5
20216: IN
20217: OR
20218: AND
20219: PUSH
20220: LD_INT 6
20222: PPUSH
20223: LD_VAR 0 16
20227: PPUSH
20228: CALL_OW 321
20232: PUSH
20233: LD_INT 2
20235: EQUAL
20236: AND
20237: IFFALSE 20402
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20239: LD_INT 22
20241: PUSH
20242: LD_VAR 0 16
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: LD_INT 35
20256: PUSH
20257: LD_INT 11
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 35
20266: PUSH
20267: LD_INT 30
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 91
20281: PUSH
20282: LD_VAR 0 1
20286: PUSH
20287: LD_INT 18
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: NOT
20305: PUSH
20306: LD_INT 22
20308: PUSH
20309: LD_VAR 0 16
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: LD_INT 30
20323: PUSH
20324: LD_INT 32
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 30
20333: PUSH
20334: LD_INT 33
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 91
20348: PUSH
20349: LD_VAR 0 1
20353: PUSH
20354: LD_INT 12
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: PUSH
20375: LD_INT 2
20377: GREATER
20378: AND
20379: IFFALSE 20402
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20381: LD_ADDR_VAR 0 18
20385: PUSH
20386: LD_INT 11
20388: PUSH
20389: LD_INT 30
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_VAR 0 12
20400: ARRAY
20401: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20402: LD_VAR 0 18
20406: NOT
20407: PUSH
20408: LD_INT 40
20410: PPUSH
20411: LD_VAR 0 16
20415: PPUSH
20416: CALL_OW 321
20420: PUSH
20421: LD_INT 2
20423: EQUAL
20424: AND
20425: PUSH
20426: LD_INT 7
20428: PUSH
20429: LD_VAR 0 5
20433: IN
20434: PUSH
20435: LD_INT 28
20437: PUSH
20438: LD_VAR 0 5
20442: IN
20443: OR
20444: PUSH
20445: LD_INT 45
20447: PUSH
20448: LD_VAR 0 5
20452: IN
20453: OR
20454: AND
20455: IFFALSE 20709
// begin hex := GetHexInfo ( x , y ) ;
20457: LD_ADDR_VAR 0 4
20461: PUSH
20462: LD_VAR 0 10
20466: PPUSH
20467: LD_VAR 0 11
20471: PPUSH
20472: CALL_OW 546
20476: ST_TO_ADDR
// if hex [ 1 ] then
20477: LD_VAR 0 4
20481: PUSH
20482: LD_INT 1
20484: ARRAY
20485: IFFALSE 20489
// exit ;
20487: GO 20892
// height := hex [ 2 ] ;
20489: LD_ADDR_VAR 0 15
20493: PUSH
20494: LD_VAR 0 4
20498: PUSH
20499: LD_INT 2
20501: ARRAY
20502: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20503: LD_ADDR_VAR 0 14
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: LD_INT 3
20516: PUSH
20517: LD_INT 5
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: ST_TO_ADDR
// for i in tmp do
20526: LD_ADDR_VAR 0 8
20530: PUSH
20531: LD_VAR 0 14
20535: PUSH
20536: FOR_IN
20537: IFFALSE 20707
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20539: LD_ADDR_VAR 0 9
20543: PUSH
20544: LD_VAR 0 10
20548: PPUSH
20549: LD_VAR 0 8
20553: PPUSH
20554: LD_INT 5
20556: PPUSH
20557: CALL_OW 272
20561: PUSH
20562: LD_VAR 0 11
20566: PPUSH
20567: LD_VAR 0 8
20571: PPUSH
20572: LD_INT 5
20574: PPUSH
20575: CALL_OW 273
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20584: LD_VAR 0 9
20588: PUSH
20589: LD_INT 1
20591: ARRAY
20592: PPUSH
20593: LD_VAR 0 9
20597: PUSH
20598: LD_INT 2
20600: ARRAY
20601: PPUSH
20602: CALL_OW 488
20606: IFFALSE 20705
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20608: LD_ADDR_VAR 0 4
20612: PUSH
20613: LD_VAR 0 9
20617: PUSH
20618: LD_INT 1
20620: ARRAY
20621: PPUSH
20622: LD_VAR 0 9
20626: PUSH
20627: LD_INT 2
20629: ARRAY
20630: PPUSH
20631: CALL_OW 546
20635: ST_TO_ADDR
// if hex [ 1 ] then
20636: LD_VAR 0 4
20640: PUSH
20641: LD_INT 1
20643: ARRAY
20644: IFFALSE 20648
// continue ;
20646: GO 20536
// h := hex [ 2 ] ;
20648: LD_ADDR_VAR 0 13
20652: PUSH
20653: LD_VAR 0 4
20657: PUSH
20658: LD_INT 2
20660: ARRAY
20661: ST_TO_ADDR
// if h + 7 < height then
20662: LD_VAR 0 13
20666: PUSH
20667: LD_INT 7
20669: PLUS
20670: PUSH
20671: LD_VAR 0 15
20675: LESS
20676: IFFALSE 20705
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20678: LD_ADDR_VAR 0 18
20682: PUSH
20683: LD_INT 7
20685: PUSH
20686: LD_INT 28
20688: PUSH
20689: LD_INT 45
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: PUSH
20697: LD_VAR 0 12
20701: ARRAY
20702: ST_TO_ADDR
// break ;
20703: GO 20707
// end ; end ; end ;
20705: GO 20536
20707: POP
20708: POP
// end ; if not weapon then
20709: LD_VAR 0 18
20713: NOT
20714: IFFALSE 20774
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20716: LD_ADDR_VAR 0 5
20720: PUSH
20721: LD_VAR 0 5
20725: PUSH
20726: LD_INT 11
20728: PUSH
20729: LD_INT 30
20731: PUSH
20732: LD_INT 49
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: DIFF
20740: ST_TO_ADDR
// if not list then
20741: LD_VAR 0 5
20745: NOT
20746: IFFALSE 20750
// exit ;
20748: GO 20892
// weapon := list [ rand ( 1 , list ) ] ;
20750: LD_ADDR_VAR 0 18
20754: PUSH
20755: LD_VAR 0 5
20759: PUSH
20760: LD_INT 1
20762: PPUSH
20763: LD_VAR 0 5
20767: PPUSH
20768: CALL_OW 12
20772: ARRAY
20773: ST_TO_ADDR
// end ; if weapon then
20774: LD_VAR 0 18
20778: IFFALSE 20892
// begin tmp := CostOfWeapon ( weapon ) ;
20780: LD_ADDR_VAR 0 14
20784: PUSH
20785: LD_VAR 0 18
20789: PPUSH
20790: CALL_OW 451
20794: ST_TO_ADDR
// j := GetBase ( tower ) ;
20795: LD_ADDR_VAR 0 9
20799: PUSH
20800: LD_VAR 0 1
20804: PPUSH
20805: CALL_OW 274
20809: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20810: LD_VAR 0 9
20814: PPUSH
20815: LD_INT 1
20817: PPUSH
20818: CALL_OW 275
20822: PUSH
20823: LD_VAR 0 14
20827: PUSH
20828: LD_INT 1
20830: ARRAY
20831: GREATEREQUAL
20832: PUSH
20833: LD_VAR 0 9
20837: PPUSH
20838: LD_INT 2
20840: PPUSH
20841: CALL_OW 275
20845: PUSH
20846: LD_VAR 0 14
20850: PUSH
20851: LD_INT 2
20853: ARRAY
20854: GREATEREQUAL
20855: AND
20856: PUSH
20857: LD_VAR 0 9
20861: PPUSH
20862: LD_INT 3
20864: PPUSH
20865: CALL_OW 275
20869: PUSH
20870: LD_VAR 0 14
20874: PUSH
20875: LD_INT 3
20877: ARRAY
20878: GREATEREQUAL
20879: AND
20880: IFFALSE 20892
// result := weapon ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_VAR 0 18
20891: ST_TO_ADDR
// end ; end ;
20892: LD_VAR 0 3
20896: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20897: LD_INT 0
20899: PPUSH
20900: PPUSH
// result := true ;
20901: LD_ADDR_VAR 0 3
20905: PUSH
20906: LD_INT 1
20908: ST_TO_ADDR
// if array1 = array2 then
20909: LD_VAR 0 1
20913: PUSH
20914: LD_VAR 0 2
20918: EQUAL
20919: IFFALSE 20979
// begin for i = 1 to array1 do
20921: LD_ADDR_VAR 0 4
20925: PUSH
20926: DOUBLE
20927: LD_INT 1
20929: DEC
20930: ST_TO_ADDR
20931: LD_VAR 0 1
20935: PUSH
20936: FOR_TO
20937: IFFALSE 20975
// if array1 [ i ] <> array2 [ i ] then
20939: LD_VAR 0 1
20943: PUSH
20944: LD_VAR 0 4
20948: ARRAY
20949: PUSH
20950: LD_VAR 0 2
20954: PUSH
20955: LD_VAR 0 4
20959: ARRAY
20960: NONEQUAL
20961: IFFALSE 20973
// begin result := false ;
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// break ;
20971: GO 20975
// end ;
20973: GO 20936
20975: POP
20976: POP
// end else
20977: GO 20987
// result := false ;
20979: LD_ADDR_VAR 0 3
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
// end ;
20987: LD_VAR 0 3
20991: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20992: LD_INT 0
20994: PPUSH
20995: PPUSH
// if not array1 or not array2 then
20996: LD_VAR 0 1
21000: NOT
21001: PUSH
21002: LD_VAR 0 2
21006: NOT
21007: OR
21008: IFFALSE 21012
// exit ;
21010: GO 21076
// result := true ;
21012: LD_ADDR_VAR 0 3
21016: PUSH
21017: LD_INT 1
21019: ST_TO_ADDR
// for i = 1 to array1 do
21020: LD_ADDR_VAR 0 4
21024: PUSH
21025: DOUBLE
21026: LD_INT 1
21028: DEC
21029: ST_TO_ADDR
21030: LD_VAR 0 1
21034: PUSH
21035: FOR_TO
21036: IFFALSE 21074
// if array1 [ i ] <> array2 [ i ] then
21038: LD_VAR 0 1
21042: PUSH
21043: LD_VAR 0 4
21047: ARRAY
21048: PUSH
21049: LD_VAR 0 2
21053: PUSH
21054: LD_VAR 0 4
21058: ARRAY
21059: NONEQUAL
21060: IFFALSE 21072
// begin result := false ;
21062: LD_ADDR_VAR 0 3
21066: PUSH
21067: LD_INT 0
21069: ST_TO_ADDR
// break ;
21070: GO 21074
// end ;
21072: GO 21035
21074: POP
21075: POP
// end ;
21076: LD_VAR 0 3
21080: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21081: LD_INT 0
21083: PPUSH
21084: PPUSH
21085: PPUSH
// pom := GetBase ( fac ) ;
21086: LD_ADDR_VAR 0 5
21090: PUSH
21091: LD_VAR 0 1
21095: PPUSH
21096: CALL_OW 274
21100: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21101: LD_ADDR_VAR 0 4
21105: PUSH
21106: LD_VAR 0 2
21110: PUSH
21111: LD_INT 1
21113: ARRAY
21114: PPUSH
21115: LD_VAR 0 2
21119: PUSH
21120: LD_INT 2
21122: ARRAY
21123: PPUSH
21124: LD_VAR 0 2
21128: PUSH
21129: LD_INT 3
21131: ARRAY
21132: PPUSH
21133: LD_VAR 0 2
21137: PUSH
21138: LD_INT 4
21140: ARRAY
21141: PPUSH
21142: CALL_OW 449
21146: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21147: LD_ADDR_VAR 0 3
21151: PUSH
21152: LD_VAR 0 5
21156: PPUSH
21157: LD_INT 1
21159: PPUSH
21160: CALL_OW 275
21164: PUSH
21165: LD_VAR 0 4
21169: PUSH
21170: LD_INT 1
21172: ARRAY
21173: GREATEREQUAL
21174: PUSH
21175: LD_VAR 0 5
21179: PPUSH
21180: LD_INT 2
21182: PPUSH
21183: CALL_OW 275
21187: PUSH
21188: LD_VAR 0 4
21192: PUSH
21193: LD_INT 2
21195: ARRAY
21196: GREATEREQUAL
21197: AND
21198: PUSH
21199: LD_VAR 0 5
21203: PPUSH
21204: LD_INT 3
21206: PPUSH
21207: CALL_OW 275
21211: PUSH
21212: LD_VAR 0 4
21216: PUSH
21217: LD_INT 3
21219: ARRAY
21220: GREATEREQUAL
21221: AND
21222: ST_TO_ADDR
// end ;
21223: LD_VAR 0 3
21227: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21228: LD_INT 0
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
// pom := GetBase ( building ) ;
21234: LD_ADDR_VAR 0 3
21238: PUSH
21239: LD_VAR 0 1
21243: PPUSH
21244: CALL_OW 274
21248: ST_TO_ADDR
// if not pom then
21249: LD_VAR 0 3
21253: NOT
21254: IFFALSE 21258
// exit ;
21256: GO 21428
// btype := GetBType ( building ) ;
21258: LD_ADDR_VAR 0 5
21262: PUSH
21263: LD_VAR 0 1
21267: PPUSH
21268: CALL_OW 266
21272: ST_TO_ADDR
// if btype = b_armoury then
21273: LD_VAR 0 5
21277: PUSH
21278: LD_INT 4
21280: EQUAL
21281: IFFALSE 21291
// btype := b_barracks ;
21283: LD_ADDR_VAR 0 5
21287: PUSH
21288: LD_INT 5
21290: ST_TO_ADDR
// if btype = b_depot then
21291: LD_VAR 0 5
21295: PUSH
21296: LD_INT 0
21298: EQUAL
21299: IFFALSE 21309
// btype := b_warehouse ;
21301: LD_ADDR_VAR 0 5
21305: PUSH
21306: LD_INT 1
21308: ST_TO_ADDR
// if btype = b_workshop then
21309: LD_VAR 0 5
21313: PUSH
21314: LD_INT 2
21316: EQUAL
21317: IFFALSE 21327
// btype := b_factory ;
21319: LD_ADDR_VAR 0 5
21323: PUSH
21324: LD_INT 3
21326: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21327: LD_ADDR_VAR 0 4
21331: PUSH
21332: LD_VAR 0 5
21336: PPUSH
21337: LD_VAR 0 1
21341: PPUSH
21342: CALL_OW 248
21346: PPUSH
21347: CALL_OW 450
21351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: CALL_OW 275
21369: PUSH
21370: LD_VAR 0 4
21374: PUSH
21375: LD_INT 1
21377: ARRAY
21378: GREATEREQUAL
21379: PUSH
21380: LD_VAR 0 3
21384: PPUSH
21385: LD_INT 2
21387: PPUSH
21388: CALL_OW 275
21392: PUSH
21393: LD_VAR 0 4
21397: PUSH
21398: LD_INT 2
21400: ARRAY
21401: GREATEREQUAL
21402: AND
21403: PUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: LD_INT 3
21411: PPUSH
21412: CALL_OW 275
21416: PUSH
21417: LD_VAR 0 4
21421: PUSH
21422: LD_INT 3
21424: ARRAY
21425: GREATEREQUAL
21426: AND
21427: ST_TO_ADDR
// end ;
21428: LD_VAR 0 2
21432: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21433: LD_INT 0
21435: PPUSH
21436: PPUSH
21437: PPUSH
// pom := GetBase ( building ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 274
21452: ST_TO_ADDR
// if not pom then
21453: LD_VAR 0 4
21457: NOT
21458: IFFALSE 21462
// exit ;
21460: GO 21563
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21462: LD_ADDR_VAR 0 5
21466: PUSH
21467: LD_VAR 0 2
21471: PPUSH
21472: LD_VAR 0 1
21476: PPUSH
21477: CALL_OW 248
21481: PPUSH
21482: CALL_OW 450
21486: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21487: LD_ADDR_VAR 0 3
21491: PUSH
21492: LD_VAR 0 4
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 275
21504: PUSH
21505: LD_VAR 0 5
21509: PUSH
21510: LD_INT 1
21512: ARRAY
21513: GREATEREQUAL
21514: PUSH
21515: LD_VAR 0 4
21519: PPUSH
21520: LD_INT 2
21522: PPUSH
21523: CALL_OW 275
21527: PUSH
21528: LD_VAR 0 5
21532: PUSH
21533: LD_INT 2
21535: ARRAY
21536: GREATEREQUAL
21537: AND
21538: PUSH
21539: LD_VAR 0 4
21543: PPUSH
21544: LD_INT 3
21546: PPUSH
21547: CALL_OW 275
21551: PUSH
21552: LD_VAR 0 5
21556: PUSH
21557: LD_INT 3
21559: ARRAY
21560: GREATEREQUAL
21561: AND
21562: ST_TO_ADDR
// end ;
21563: LD_VAR 0 3
21567: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21568: LD_INT 0
21570: PPUSH
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
// result := false ;
21581: LD_ADDR_VAR 0 8
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21589: LD_VAR 0 5
21593: NOT
21594: PUSH
21595: LD_VAR 0 1
21599: NOT
21600: OR
21601: PUSH
21602: LD_VAR 0 2
21606: NOT
21607: OR
21608: PUSH
21609: LD_VAR 0 3
21613: NOT
21614: OR
21615: IFFALSE 21619
// exit ;
21617: GO 22433
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21619: LD_ADDR_VAR 0 14
21623: PUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: LD_VAR 0 2
21633: PPUSH
21634: LD_VAR 0 3
21638: PPUSH
21639: LD_VAR 0 4
21643: PPUSH
21644: LD_VAR 0 5
21648: PUSH
21649: LD_INT 1
21651: ARRAY
21652: PPUSH
21653: CALL_OW 248
21657: PPUSH
21658: LD_INT 0
21660: PPUSH
21661: CALL 23686 0 6
21665: ST_TO_ADDR
// if not hexes then
21666: LD_VAR 0 14
21670: NOT
21671: IFFALSE 21675
// exit ;
21673: GO 22433
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21675: LD_ADDR_VAR 0 17
21679: PUSH
21680: LD_VAR 0 5
21684: PPUSH
21685: LD_INT 22
21687: PUSH
21688: LD_VAR 0 13
21692: PPUSH
21693: CALL_OW 255
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 2
21704: PUSH
21705: LD_INT 30
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 30
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 72
21738: ST_TO_ADDR
// for i = 1 to hexes do
21739: LD_ADDR_VAR 0 9
21743: PUSH
21744: DOUBLE
21745: LD_INT 1
21747: DEC
21748: ST_TO_ADDR
21749: LD_VAR 0 14
21753: PUSH
21754: FOR_TO
21755: IFFALSE 22431
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21757: LD_ADDR_VAR 0 13
21761: PUSH
21762: LD_VAR 0 14
21766: PUSH
21767: LD_VAR 0 9
21771: ARRAY
21772: PUSH
21773: LD_INT 1
21775: ARRAY
21776: PPUSH
21777: LD_VAR 0 14
21781: PUSH
21782: LD_VAR 0 9
21786: ARRAY
21787: PUSH
21788: LD_INT 2
21790: ARRAY
21791: PPUSH
21792: CALL_OW 428
21796: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21797: LD_VAR 0 14
21801: PUSH
21802: LD_VAR 0 9
21806: ARRAY
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PPUSH
21812: LD_VAR 0 14
21816: PUSH
21817: LD_VAR 0 9
21821: ARRAY
21822: PUSH
21823: LD_INT 2
21825: ARRAY
21826: PPUSH
21827: CALL_OW 351
21831: PUSH
21832: LD_VAR 0 14
21836: PUSH
21837: LD_VAR 0 9
21841: ARRAY
21842: PUSH
21843: LD_INT 1
21845: ARRAY
21846: PPUSH
21847: LD_VAR 0 14
21851: PUSH
21852: LD_VAR 0 9
21856: ARRAY
21857: PUSH
21858: LD_INT 2
21860: ARRAY
21861: PPUSH
21862: CALL_OW 488
21866: NOT
21867: OR
21868: PUSH
21869: LD_VAR 0 13
21873: PPUSH
21874: CALL_OW 247
21878: PUSH
21879: LD_INT 3
21881: EQUAL
21882: OR
21883: IFFALSE 21889
// exit ;
21885: POP
21886: POP
21887: GO 22433
// if not tmp then
21889: LD_VAR 0 13
21893: NOT
21894: IFFALSE 21898
// continue ;
21896: GO 21754
// result := true ;
21898: LD_ADDR_VAR 0 8
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21906: LD_VAR 0 6
21910: PUSH
21911: LD_VAR 0 13
21915: PPUSH
21916: CALL_OW 247
21920: PUSH
21921: LD_INT 2
21923: EQUAL
21924: AND
21925: PUSH
21926: LD_VAR 0 13
21930: PPUSH
21931: CALL_OW 263
21935: PUSH
21936: LD_INT 1
21938: EQUAL
21939: AND
21940: IFFALSE 22104
// begin if IsDrivenBy ( tmp ) then
21942: LD_VAR 0 13
21946: PPUSH
21947: CALL_OW 311
21951: IFFALSE 21955
// continue ;
21953: GO 21754
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21955: LD_VAR 0 6
21959: PPUSH
21960: LD_INT 3
21962: PUSH
21963: LD_INT 60
21965: PUSH
21966: EMPTY
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 3
21975: PUSH
21976: LD_INT 55
21978: PUSH
21979: EMPTY
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PPUSH
21990: CALL_OW 72
21994: IFFALSE 22102
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21996: LD_ADDR_VAR 0 18
22000: PUSH
22001: LD_VAR 0 6
22005: PPUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 60
22011: PUSH
22012: EMPTY
22013: LIST
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 3
22021: PUSH
22022: LD_INT 55
22024: PUSH
22025: EMPTY
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PPUSH
22036: CALL_OW 72
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: ST_TO_ADDR
// if IsInUnit ( driver ) then
22045: LD_VAR 0 18
22049: PPUSH
22050: CALL_OW 310
22054: IFFALSE 22065
// ComExit ( driver ) ;
22056: LD_VAR 0 18
22060: PPUSH
22061: CALL 47487 0 1
// AddComEnterUnit ( driver , tmp ) ;
22065: LD_VAR 0 18
22069: PPUSH
22070: LD_VAR 0 13
22074: PPUSH
22075: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22079: LD_VAR 0 18
22083: PPUSH
22084: LD_VAR 0 7
22088: PPUSH
22089: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22093: LD_VAR 0 18
22097: PPUSH
22098: CALL_OW 181
// end ; continue ;
22102: GO 21754
// end ; if not cleaners or not tmp in cleaners then
22104: LD_VAR 0 6
22108: NOT
22109: PUSH
22110: LD_VAR 0 13
22114: PUSH
22115: LD_VAR 0 6
22119: IN
22120: NOT
22121: OR
22122: IFFALSE 22429
// begin if dep then
22124: LD_VAR 0 17
22128: IFFALSE 22264
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22130: LD_ADDR_VAR 0 16
22134: PUSH
22135: LD_VAR 0 17
22139: PUSH
22140: LD_INT 1
22142: ARRAY
22143: PPUSH
22144: CALL_OW 250
22148: PPUSH
22149: LD_VAR 0 17
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: PPUSH
22158: CALL_OW 254
22162: PPUSH
22163: LD_INT 5
22165: PPUSH
22166: CALL_OW 272
22170: PUSH
22171: LD_VAR 0 17
22175: PUSH
22176: LD_INT 1
22178: ARRAY
22179: PPUSH
22180: CALL_OW 251
22184: PPUSH
22185: LD_VAR 0 17
22189: PUSH
22190: LD_INT 1
22192: ARRAY
22193: PPUSH
22194: CALL_OW 254
22198: PPUSH
22199: LD_INT 5
22201: PPUSH
22202: CALL_OW 273
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22211: LD_VAR 0 16
22215: PUSH
22216: LD_INT 1
22218: ARRAY
22219: PPUSH
22220: LD_VAR 0 16
22224: PUSH
22225: LD_INT 2
22227: ARRAY
22228: PPUSH
22229: CALL_OW 488
22233: IFFALSE 22264
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22235: LD_VAR 0 13
22239: PPUSH
22240: LD_VAR 0 16
22244: PUSH
22245: LD_INT 1
22247: ARRAY
22248: PPUSH
22249: LD_VAR 0 16
22253: PUSH
22254: LD_INT 2
22256: ARRAY
22257: PPUSH
22258: CALL_OW 111
// continue ;
22262: GO 21754
// end ; end ; r := GetDir ( tmp ) ;
22264: LD_ADDR_VAR 0 15
22268: PUSH
22269: LD_VAR 0 13
22273: PPUSH
22274: CALL_OW 254
22278: ST_TO_ADDR
// if r = 5 then
22279: LD_VAR 0 15
22283: PUSH
22284: LD_INT 5
22286: EQUAL
22287: IFFALSE 22297
// r := 0 ;
22289: LD_ADDR_VAR 0 15
22293: PUSH
22294: LD_INT 0
22296: ST_TO_ADDR
// for j = r to 5 do
22297: LD_ADDR_VAR 0 10
22301: PUSH
22302: DOUBLE
22303: LD_VAR 0 15
22307: DEC
22308: ST_TO_ADDR
22309: LD_INT 5
22311: PUSH
22312: FOR_TO
22313: IFFALSE 22427
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22315: LD_ADDR_VAR 0 11
22319: PUSH
22320: LD_VAR 0 13
22324: PPUSH
22325: CALL_OW 250
22329: PPUSH
22330: LD_VAR 0 10
22334: PPUSH
22335: LD_INT 2
22337: PPUSH
22338: CALL_OW 272
22342: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22343: LD_ADDR_VAR 0 12
22347: PUSH
22348: LD_VAR 0 13
22352: PPUSH
22353: CALL_OW 251
22357: PPUSH
22358: LD_VAR 0 10
22362: PPUSH
22363: LD_INT 2
22365: PPUSH
22366: CALL_OW 273
22370: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22371: LD_VAR 0 11
22375: PPUSH
22376: LD_VAR 0 12
22380: PPUSH
22381: CALL_OW 488
22385: PUSH
22386: LD_VAR 0 11
22390: PPUSH
22391: LD_VAR 0 12
22395: PPUSH
22396: CALL_OW 428
22400: NOT
22401: AND
22402: IFFALSE 22425
// begin ComMoveXY ( tmp , _x , _y ) ;
22404: LD_VAR 0 13
22408: PPUSH
22409: LD_VAR 0 11
22413: PPUSH
22414: LD_VAR 0 12
22418: PPUSH
22419: CALL_OW 111
// break ;
22423: GO 22427
// end ; end ;
22425: GO 22312
22427: POP
22428: POP
// end ; end ;
22429: GO 21754
22431: POP
22432: POP
// end ;
22433: LD_VAR 0 8
22437: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22438: LD_INT 0
22440: PPUSH
// result := true ;
22441: LD_ADDR_VAR 0 3
22445: PUSH
22446: LD_INT 1
22448: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22449: LD_VAR 0 2
22453: PUSH
22454: LD_INT 24
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22468
22460: LD_INT 33
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22493
22468: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_INT 32
22476: PPUSH
22477: LD_VAR 0 1
22481: PPUSH
22482: CALL_OW 321
22486: PUSH
22487: LD_INT 2
22489: EQUAL
22490: ST_TO_ADDR
22491: GO 22809
22493: LD_INT 20
22495: DOUBLE
22496: EQUAL
22497: IFTRUE 22501
22499: GO 22526
22501: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22502: LD_ADDR_VAR 0 3
22506: PUSH
22507: LD_INT 6
22509: PPUSH
22510: LD_VAR 0 1
22514: PPUSH
22515: CALL_OW 321
22519: PUSH
22520: LD_INT 2
22522: EQUAL
22523: ST_TO_ADDR
22524: GO 22809
22526: LD_INT 22
22528: DOUBLE
22529: EQUAL
22530: IFTRUE 22540
22532: LD_INT 36
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22540
22538: GO 22565
22540: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22541: LD_ADDR_VAR 0 3
22545: PUSH
22546: LD_INT 15
22548: PPUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 321
22558: PUSH
22559: LD_INT 2
22561: EQUAL
22562: ST_TO_ADDR
22563: GO 22809
22565: LD_INT 30
22567: DOUBLE
22568: EQUAL
22569: IFTRUE 22573
22571: GO 22598
22573: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22574: LD_ADDR_VAR 0 3
22578: PUSH
22579: LD_INT 20
22581: PPUSH
22582: LD_VAR 0 1
22586: PPUSH
22587: CALL_OW 321
22591: PUSH
22592: LD_INT 2
22594: EQUAL
22595: ST_TO_ADDR
22596: GO 22809
22598: LD_INT 28
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22612
22604: LD_INT 21
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22637
22612: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22613: LD_ADDR_VAR 0 3
22617: PUSH
22618: LD_INT 21
22620: PPUSH
22621: LD_VAR 0 1
22625: PPUSH
22626: CALL_OW 321
22630: PUSH
22631: LD_INT 2
22633: EQUAL
22634: ST_TO_ADDR
22635: GO 22809
22637: LD_INT 16
22639: DOUBLE
22640: EQUAL
22641: IFTRUE 22645
22643: GO 22670
22645: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22646: LD_ADDR_VAR 0 3
22650: PUSH
22651: LD_INT 84
22653: PPUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 321
22663: PUSH
22664: LD_INT 2
22666: EQUAL
22667: ST_TO_ADDR
22668: GO 22809
22670: LD_INT 19
22672: DOUBLE
22673: EQUAL
22674: IFTRUE 22684
22676: LD_INT 23
22678: DOUBLE
22679: EQUAL
22680: IFTRUE 22684
22682: GO 22709
22684: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22685: LD_ADDR_VAR 0 3
22689: PUSH
22690: LD_INT 83
22692: PPUSH
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 321
22702: PUSH
22703: LD_INT 2
22705: EQUAL
22706: ST_TO_ADDR
22707: GO 22809
22709: LD_INT 17
22711: DOUBLE
22712: EQUAL
22713: IFTRUE 22717
22715: GO 22742
22717: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22718: LD_ADDR_VAR 0 3
22722: PUSH
22723: LD_INT 39
22725: PPUSH
22726: LD_VAR 0 1
22730: PPUSH
22731: CALL_OW 321
22735: PUSH
22736: LD_INT 2
22738: EQUAL
22739: ST_TO_ADDR
22740: GO 22809
22742: LD_INT 18
22744: DOUBLE
22745: EQUAL
22746: IFTRUE 22750
22748: GO 22775
22750: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22751: LD_ADDR_VAR 0 3
22755: PUSH
22756: LD_INT 40
22758: PPUSH
22759: LD_VAR 0 1
22763: PPUSH
22764: CALL_OW 321
22768: PUSH
22769: LD_INT 2
22771: EQUAL
22772: ST_TO_ADDR
22773: GO 22809
22775: LD_INT 27
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22808
22783: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22784: LD_ADDR_VAR 0 3
22788: PUSH
22789: LD_INT 35
22791: PPUSH
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 321
22801: PUSH
22802: LD_INT 2
22804: EQUAL
22805: ST_TO_ADDR
22806: GO 22809
22808: POP
// end ;
22809: LD_VAR 0 3
22813: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22814: LD_INT 0
22816: PPUSH
22817: PPUSH
22818: PPUSH
22819: PPUSH
22820: PPUSH
22821: PPUSH
22822: PPUSH
22823: PPUSH
22824: PPUSH
22825: PPUSH
22826: PPUSH
// result := false ;
22827: LD_ADDR_VAR 0 6
22831: PUSH
22832: LD_INT 0
22834: ST_TO_ADDR
// if btype = b_depot then
22835: LD_VAR 0 2
22839: PUSH
22840: LD_INT 0
22842: EQUAL
22843: IFFALSE 22855
// begin result := true ;
22845: LD_ADDR_VAR 0 6
22849: PUSH
22850: LD_INT 1
22852: ST_TO_ADDR
// exit ;
22853: GO 23681
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22855: LD_VAR 0 1
22859: NOT
22860: PUSH
22861: LD_VAR 0 1
22865: PPUSH
22866: CALL_OW 266
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: IN
22881: NOT
22882: OR
22883: PUSH
22884: LD_VAR 0 2
22888: NOT
22889: OR
22890: PUSH
22891: LD_VAR 0 5
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: LD_INT 3
22907: PUSH
22908: LD_INT 4
22910: PUSH
22911: LD_INT 5
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: IN
22922: NOT
22923: OR
22924: PUSH
22925: LD_VAR 0 3
22929: PPUSH
22930: LD_VAR 0 4
22934: PPUSH
22935: CALL_OW 488
22939: NOT
22940: OR
22941: IFFALSE 22945
// exit ;
22943: GO 23681
// side := GetSide ( depot ) ;
22945: LD_ADDR_VAR 0 9
22949: PUSH
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 255
22959: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22960: LD_VAR 0 9
22964: PPUSH
22965: LD_VAR 0 2
22969: PPUSH
22970: CALL 22438 0 2
22974: NOT
22975: IFFALSE 22979
// exit ;
22977: GO 23681
// pom := GetBase ( depot ) ;
22979: LD_ADDR_VAR 0 10
22983: PUSH
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL_OW 274
22993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22994: LD_ADDR_VAR 0 11
22998: PUSH
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 248
23013: PPUSH
23014: CALL_OW 450
23018: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23019: LD_VAR 0 10
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: CALL_OW 275
23031: PUSH
23032: LD_VAR 0 11
23036: PUSH
23037: LD_INT 1
23039: ARRAY
23040: GREATEREQUAL
23041: PUSH
23042: LD_VAR 0 10
23046: PPUSH
23047: LD_INT 2
23049: PPUSH
23050: CALL_OW 275
23054: PUSH
23055: LD_VAR 0 11
23059: PUSH
23060: LD_INT 2
23062: ARRAY
23063: GREATEREQUAL
23064: AND
23065: PUSH
23066: LD_VAR 0 10
23070: PPUSH
23071: LD_INT 3
23073: PPUSH
23074: CALL_OW 275
23078: PUSH
23079: LD_VAR 0 11
23083: PUSH
23084: LD_INT 3
23086: ARRAY
23087: GREATEREQUAL
23088: AND
23089: NOT
23090: IFFALSE 23094
// exit ;
23092: GO 23681
// if GetBType ( depot ) = b_depot then
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 266
23103: PUSH
23104: LD_INT 0
23106: EQUAL
23107: IFFALSE 23119
// dist := 28 else
23109: LD_ADDR_VAR 0 14
23113: PUSH
23114: LD_INT 28
23116: ST_TO_ADDR
23117: GO 23127
// dist := 36 ;
23119: LD_ADDR_VAR 0 14
23123: PUSH
23124: LD_INT 36
23126: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23127: LD_VAR 0 1
23131: PPUSH
23132: LD_VAR 0 3
23136: PPUSH
23137: LD_VAR 0 4
23141: PPUSH
23142: CALL_OW 297
23146: PUSH
23147: LD_VAR 0 14
23151: GREATER
23152: IFFALSE 23156
// exit ;
23154: GO 23681
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23156: LD_ADDR_VAR 0 12
23160: PUSH
23161: LD_VAR 0 2
23165: PPUSH
23166: LD_VAR 0 3
23170: PPUSH
23171: LD_VAR 0 4
23175: PPUSH
23176: LD_VAR 0 5
23180: PPUSH
23181: LD_VAR 0 1
23185: PPUSH
23186: CALL_OW 248
23190: PPUSH
23191: LD_INT 0
23193: PPUSH
23194: CALL 23686 0 6
23198: ST_TO_ADDR
// if not hexes then
23199: LD_VAR 0 12
23203: NOT
23204: IFFALSE 23208
// exit ;
23206: GO 23681
// hex := GetHexInfo ( x , y ) ;
23208: LD_ADDR_VAR 0 15
23212: PUSH
23213: LD_VAR 0 3
23217: PPUSH
23218: LD_VAR 0 4
23222: PPUSH
23223: CALL_OW 546
23227: ST_TO_ADDR
// if hex [ 1 ] then
23228: LD_VAR 0 15
23232: PUSH
23233: LD_INT 1
23235: ARRAY
23236: IFFALSE 23240
// exit ;
23238: GO 23681
// height := hex [ 2 ] ;
23240: LD_ADDR_VAR 0 13
23244: PUSH
23245: LD_VAR 0 15
23249: PUSH
23250: LD_INT 2
23252: ARRAY
23253: ST_TO_ADDR
// for i = 1 to hexes do
23254: LD_ADDR_VAR 0 7
23258: PUSH
23259: DOUBLE
23260: LD_INT 1
23262: DEC
23263: ST_TO_ADDR
23264: LD_VAR 0 12
23268: PUSH
23269: FOR_TO
23270: IFFALSE 23600
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23272: LD_VAR 0 12
23276: PUSH
23277: LD_VAR 0 7
23281: ARRAY
23282: PUSH
23283: LD_INT 1
23285: ARRAY
23286: PPUSH
23287: LD_VAR 0 12
23291: PUSH
23292: LD_VAR 0 7
23296: ARRAY
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: CALL_OW 488
23306: NOT
23307: PUSH
23308: LD_VAR 0 12
23312: PUSH
23313: LD_VAR 0 7
23317: ARRAY
23318: PUSH
23319: LD_INT 1
23321: ARRAY
23322: PPUSH
23323: LD_VAR 0 12
23327: PUSH
23328: LD_VAR 0 7
23332: ARRAY
23333: PUSH
23334: LD_INT 2
23336: ARRAY
23337: PPUSH
23338: CALL_OW 428
23342: PUSH
23343: LD_INT 0
23345: GREATER
23346: OR
23347: PUSH
23348: LD_VAR 0 12
23352: PUSH
23353: LD_VAR 0 7
23357: ARRAY
23358: PUSH
23359: LD_INT 1
23361: ARRAY
23362: PPUSH
23363: LD_VAR 0 12
23367: PUSH
23368: LD_VAR 0 7
23372: ARRAY
23373: PUSH
23374: LD_INT 2
23376: ARRAY
23377: PPUSH
23378: CALL_OW 351
23382: OR
23383: IFFALSE 23389
// exit ;
23385: POP
23386: POP
23387: GO 23681
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23389: LD_ADDR_VAR 0 8
23393: PUSH
23394: LD_VAR 0 12
23398: PUSH
23399: LD_VAR 0 7
23403: ARRAY
23404: PUSH
23405: LD_INT 1
23407: ARRAY
23408: PPUSH
23409: LD_VAR 0 12
23413: PUSH
23414: LD_VAR 0 7
23418: ARRAY
23419: PUSH
23420: LD_INT 2
23422: ARRAY
23423: PPUSH
23424: CALL_OW 546
23428: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23429: LD_VAR 0 8
23433: PUSH
23434: LD_INT 1
23436: ARRAY
23437: PUSH
23438: LD_VAR 0 8
23442: PUSH
23443: LD_INT 2
23445: ARRAY
23446: PUSH
23447: LD_VAR 0 13
23451: PUSH
23452: LD_INT 2
23454: PLUS
23455: GREATER
23456: OR
23457: PUSH
23458: LD_VAR 0 8
23462: PUSH
23463: LD_INT 2
23465: ARRAY
23466: PUSH
23467: LD_VAR 0 13
23471: PUSH
23472: LD_INT 2
23474: MINUS
23475: LESS
23476: OR
23477: PUSH
23478: LD_VAR 0 8
23482: PUSH
23483: LD_INT 3
23485: ARRAY
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 8
23492: PUSH
23493: LD_INT 9
23495: PUSH
23496: LD_INT 10
23498: PUSH
23499: LD_INT 11
23501: PUSH
23502: LD_INT 12
23504: PUSH
23505: LD_INT 13
23507: PUSH
23508: LD_INT 16
23510: PUSH
23511: LD_INT 17
23513: PUSH
23514: LD_INT 18
23516: PUSH
23517: LD_INT 19
23519: PUSH
23520: LD_INT 20
23522: PUSH
23523: LD_INT 21
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: IN
23541: NOT
23542: OR
23543: PUSH
23544: LD_VAR 0 8
23548: PUSH
23549: LD_INT 5
23551: ARRAY
23552: NOT
23553: OR
23554: PUSH
23555: LD_VAR 0 8
23559: PUSH
23560: LD_INT 6
23562: ARRAY
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: LD_INT 2
23569: PUSH
23570: LD_INT 7
23572: PUSH
23573: LD_INT 9
23575: PUSH
23576: LD_INT 10
23578: PUSH
23579: LD_INT 11
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: IN
23590: NOT
23591: OR
23592: IFFALSE 23598
// exit ;
23594: POP
23595: POP
23596: GO 23681
// end ;
23598: GO 23269
23600: POP
23601: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23602: LD_VAR 0 9
23606: PPUSH
23607: LD_VAR 0 3
23611: PPUSH
23612: LD_VAR 0 4
23616: PPUSH
23617: LD_INT 20
23619: PPUSH
23620: CALL 15604 0 4
23624: PUSH
23625: LD_INT 4
23627: ARRAY
23628: IFFALSE 23632
// exit ;
23630: GO 23681
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23632: LD_VAR 0 2
23636: PUSH
23637: LD_INT 29
23639: PUSH
23640: LD_INT 30
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: IN
23647: PUSH
23648: LD_VAR 0 3
23652: PPUSH
23653: LD_VAR 0 4
23657: PPUSH
23658: LD_VAR 0 9
23662: PPUSH
23663: CALL_OW 440
23667: NOT
23668: AND
23669: IFFALSE 23673
// exit ;
23671: GO 23681
// result := true ;
23673: LD_ADDR_VAR 0 6
23677: PUSH
23678: LD_INT 1
23680: ST_TO_ADDR
// end ;
23681: LD_VAR 0 6
23685: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23686: LD_INT 0
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
23729: PPUSH
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
23743: PPUSH
23744: PPUSH
23745: PPUSH
// result = [ ] ;
23746: LD_ADDR_VAR 0 7
23750: PUSH
23751: EMPTY
23752: ST_TO_ADDR
// temp_list = [ ] ;
23753: LD_ADDR_VAR 0 9
23757: PUSH
23758: EMPTY
23759: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23760: LD_VAR 0 4
23764: PUSH
23765: LD_INT 0
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 3
23776: PUSH
23777: LD_INT 4
23779: PUSH
23780: LD_INT 5
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: IN
23791: NOT
23792: PUSH
23793: LD_VAR 0 1
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: IN
23808: PUSH
23809: LD_VAR 0 5
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: LIST
23827: IN
23828: NOT
23829: AND
23830: OR
23831: IFFALSE 23835
// exit ;
23833: GO 42226
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23835: LD_VAR 0 1
23839: PUSH
23840: LD_INT 6
23842: PUSH
23843: LD_INT 7
23845: PUSH
23846: LD_INT 8
23848: PUSH
23849: LD_INT 13
23851: PUSH
23852: LD_INT 12
23854: PUSH
23855: LD_INT 15
23857: PUSH
23858: LD_INT 11
23860: PUSH
23861: LD_INT 14
23863: PUSH
23864: LD_INT 10
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: IN
23878: IFFALSE 23888
// btype = b_lab ;
23880: LD_ADDR_VAR 0 1
23884: PUSH
23885: LD_INT 6
23887: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23888: LD_VAR 0 6
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: LD_INT 2
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: IN
23907: NOT
23908: PUSH
23909: LD_VAR 0 1
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: LD_INT 2
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: LD_INT 6
23928: PUSH
23929: LD_INT 36
23931: PUSH
23932: LD_INT 4
23934: PUSH
23935: LD_INT 5
23937: PUSH
23938: LD_INT 31
23940: PUSH
23941: LD_INT 32
23943: PUSH
23944: LD_INT 33
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: IN
23960: NOT
23961: PUSH
23962: LD_VAR 0 6
23966: PUSH
23967: LD_INT 1
23969: EQUAL
23970: AND
23971: OR
23972: PUSH
23973: LD_VAR 0 1
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 3
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: IN
23988: NOT
23989: PUSH
23990: LD_VAR 0 6
23994: PUSH
23995: LD_INT 2
23997: EQUAL
23998: AND
23999: OR
24000: IFFALSE 24010
// mode = 0 ;
24002: LD_ADDR_VAR 0 6
24006: PUSH
24007: LD_INT 0
24009: ST_TO_ADDR
// case mode of 0 :
24010: LD_VAR 0 6
24014: PUSH
24015: LD_INT 0
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 35476
24023: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24024: LD_ADDR_VAR 0 11
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 3
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: LD_INT 3
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24217: LD_ADDR_VAR 0 12
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: NEG
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 3
24374: NEG
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 3
24385: NEG
24386: PUSH
24387: LD_INT 1
24389: NEG
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24413: LD_ADDR_VAR 0 13
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: LD_INT 2
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: LD_INT 3
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 3
24572: NEG
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 3
24584: NEG
24585: PUSH
24586: LD_INT 3
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24612: LD_ADDR_VAR 0 14
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 0
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: LD_INT 3
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 3
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24808: LD_ADDR_VAR 0 15
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: NEG
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 3
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 3
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25001: LD_ADDR_VAR 0 16
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 2
25104: PUSH
25105: LD_INT 2
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: NEG
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 3
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 3
25158: PUSH
25159: LD_INT 3
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 3
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25194: LD_ADDR_VAR 0 17
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 0
25287: PUSH
25288: LD_INT 2
25290: NEG
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: NEG
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: NEG
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 2
25393: NEG
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25424: LD_ADDR_VAR 0 18
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: LD_INT 2
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: LD_INT 2
25627: NEG
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25654: LD_ADDR_VAR 0 19
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: LD_INT 2
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: LD_INT 2
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: NEG
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25884: LD_ADDR_VAR 0 20
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 2
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 2
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 2
26060: NEG
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 2
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26114: LD_ADDR_VAR 0 21
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: LD_INT 2
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: LD_INT 2
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 2
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: LD_INT 2
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26344: LD_ADDR_VAR 0 22
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: LD_INT 2
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 2
26440: NEG
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 2
26520: NEG
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: NEG
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: LD_INT 2
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26574: LD_ADDR_VAR 0 23
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 2
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 2
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 2
26750: NEG
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 2
26761: NEG
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: LD_INT 2
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: LD_INT 3
26789: NEG
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: LD_INT 3
26801: NEG
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26854: LD_ADDR_VAR 0 24
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: LD_INT 1
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: NEG
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 2
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 2
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 2
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 2
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 2
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: NEG
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 2
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27130: LD_ADDR_VAR 0 25
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: NEG
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 3
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 3
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 3
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27404: LD_ADDR_VAR 0 26
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: LD_INT 2
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 2
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 2
27580: NEG
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: NEG
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: NEG
27604: PUSH
27605: LD_INT 2
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 3
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 2
27646: NEG
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27680: LD_ADDR_VAR 0 27
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: LD_INT 2
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 2
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: NEG
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 3
27913: NEG
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 3
27925: NEG
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27960: LD_ADDR_VAR 0 28
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 2
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: NEG
28172: PUSH
28173: LD_INT 3
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: LD_INT 3
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 3
28195: NEG
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 3
28207: NEG
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28242: LD_ADDR_VAR 0 29
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: LD_INT 2
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 2
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 2
28408: NEG
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: NEG
28421: PUSH
28422: LD_INT 2
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 2
28432: NEG
28433: PUSH
28434: LD_INT 3
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 3
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 3
28486: NEG
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28521: LD_ADDR_VAR 0 30
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: LD_INT 2
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: LD_INT 2
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 2
28687: NEG
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: NEG
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: LD_INT 3
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 3
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: LD_INT 3
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: NEG
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 3
28764: NEG
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28799: LD_ADDR_VAR 0 31
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 2
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 2
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 2
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: LD_INT 2
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: LD_INT 2
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: NEG
28977: PUSH
28978: LD_INT 2
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 2
28988: NEG
28989: PUSH
28990: LD_INT 3
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 3
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 3
29042: NEG
29043: PUSH
29044: LD_INT 2
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29077: LD_ADDR_VAR 0 32
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 2
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 2
29254: NEG
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: LD_INT 3
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: LD_INT 2
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 3
29320: NEG
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29355: LD_ADDR_VAR 0 33
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: LD_INT 1
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: LD_INT 1
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: LD_INT 2
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: NEG
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 2
29545: NEG
29546: PUSH
29547: LD_INT 3
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: LD_INT 3
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 3
29599: NEG
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29634: LD_ADDR_VAR 0 34
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: LD_INT 2
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: NEG
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 3
29848: PUSH
29849: LD_INT 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 3
29879: NEG
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29914: LD_ADDR_VAR 0 35
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30026: LD_ADDR_VAR 0 36
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: LD_INT 2
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: LD_INT 2
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30138: LD_ADDR_VAR 0 37
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30250: LD_ADDR_VAR 0 38
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30362: LD_ADDR_VAR 0 39
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30474: LD_ADDR_VAR 0 40
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: LD_INT 1
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30586: LD_ADDR_VAR 0 41
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: LD_INT 2
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 2
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: NEG
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: NEG
30777: PUSH
30778: LD_INT 3
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 3
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 3
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 3
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 3
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 3
30895: NEG
30896: PUSH
30897: LD_INT 3
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30936: LD_ADDR_VAR 0 42
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: LD_INT 2
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 1
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: LD_INT 3
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 3
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 3
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 3
31233: NEG
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 3
31245: NEG
31246: PUSH
31247: LD_INT 3
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31286: LD_ADDR_VAR 0 43
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: LD_INT 3
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 3
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 2
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: NEG
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31634: LD_ADDR_VAR 0 44
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 2
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 2
31789: NEG
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: NEG
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: NEG
31825: PUSH
31826: LD_INT 3
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 3
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: NEG
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 3
31943: NEG
31944: PUSH
31945: LD_INT 3
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31984: LD_ADDR_VAR 0 45
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 2
32162: NEG
32163: PUSH
32164: LD_INT 2
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: LD_INT 3
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: LD_INT 3
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 3
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: LD_INT 2
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: LD_INT 3
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: NEG
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32334: LD_ADDR_VAR 0 46
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 3
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 3
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: LD_INT 3
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 3
32630: NEG
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32682: LD_ADDR_VAR 0 47
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32833: LD_ADDR_VAR 0 48
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: LD_INT 2
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 2
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32980: LD_ADDR_VAR 0 49
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33124: LD_ADDR_VAR 0 50
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33268: LD_ADDR_VAR 0 51
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33415: LD_ADDR_VAR 0 52
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 2
33542: NEG
33543: PUSH
33544: LD_INT 2
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33566: LD_ADDR_VAR 0 53
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 2
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: LD_INT 2
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33796: LD_ADDR_VAR 0 54
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: LD_INT 2
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34026: LD_ADDR_VAR 0 55
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 1
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: NEG
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 2
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34256: LD_ADDR_VAR 0 56
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 2
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 2
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 2
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34486: LD_ADDR_VAR 0 57
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: NEG
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34716: LD_ADDR_VAR 0 58
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 2
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34946: LD_ADDR_VAR 0 59
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35034: LD_ADDR_VAR 0 60
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35122: LD_ADDR_VAR 0 61
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35210: LD_ADDR_VAR 0 62
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: LD_INT 1
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35298: LD_ADDR_VAR 0 63
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35386: LD_ADDR_VAR 0 64
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// end ; 1 :
35474: GO 41371
35476: LD_INT 1
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35484
35482: GO 38107
35484: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35485: LD_ADDR_VAR 0 11
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 3
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 3
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35529: LD_ADDR_VAR 0 12
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 3
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35570: LD_ADDR_VAR 0 13
35574: PUSH
35575: LD_INT 3
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35610: LD_ADDR_VAR 0 14
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 3
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35651: LD_ADDR_VAR 0 15
35655: PUSH
35656: LD_INT 2
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 3
35669: NEG
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35695: LD_ADDR_VAR 0 16
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: LD_INT 3
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 3
35714: NEG
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 3
35726: NEG
35727: PUSH
35728: LD_INT 3
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35741: LD_ADDR_VAR 0 17
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: LD_INT 3
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 3
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 2
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35785: LD_ADDR_VAR 0 18
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 3
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35826: LD_ADDR_VAR 0 19
35830: PUSH
35831: LD_INT 3
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35866: LD_ADDR_VAR 0 20
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 3
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35907: LD_ADDR_VAR 0 21
35911: PUSH
35912: LD_INT 2
35914: NEG
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 3
35925: NEG
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 3
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: LIST
35950: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35951: LD_ADDR_VAR 0 22
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: LD_INT 3
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 3
35970: NEG
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: LD_INT 3
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35997: LD_ADDR_VAR 0 23
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 3
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 4
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 3
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36041: LD_ADDR_VAR 0 24
36045: PUSH
36046: LD_INT 3
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 3
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 4
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36082: LD_ADDR_VAR 0 25
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 4
36099: PUSH
36100: LD_INT 3
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 3
36109: PUSH
36110: LD_INT 4
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36122: LD_ADDR_VAR 0 26
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: LD_INT 4
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36163: LD_ADDR_VAR 0 27
36167: PUSH
36168: LD_INT 3
36170: NEG
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 3
36181: NEG
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 4
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36207: LD_ADDR_VAR 0 28
36211: PUSH
36212: LD_INT 3
36214: NEG
36215: PUSH
36216: LD_INT 3
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 3
36226: NEG
36227: PUSH
36228: LD_INT 4
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 4
36238: NEG
36239: PUSH
36240: LD_INT 3
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36253: LD_ADDR_VAR 0 29
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: LD_INT 3
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 4
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 4
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: LD_INT 3
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 5
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: LD_INT 5
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: LD_INT 4
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: LD_INT 6
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 6
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: LD_INT 5
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36408: LD_ADDR_VAR 0 30
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 3
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 4
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 4
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 4
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 5
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 5
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 5
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 6
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 6
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36551: LD_ADDR_VAR 0 31
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 3
36568: PUSH
36569: LD_INT 3
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 4
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 4
36598: PUSH
36599: LD_INT 4
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 3
36608: PUSH
36609: LD_INT 4
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 5
36618: PUSH
36619: LD_INT 4
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 5
36628: PUSH
36629: LD_INT 5
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 4
36638: PUSH
36639: LD_INT 5
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 6
36648: PUSH
36649: LD_INT 5
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 6
36658: PUSH
36659: LD_INT 6
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 5
36668: PUSH
36669: LD_INT 6
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36690: LD_ADDR_VAR 0 32
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 3
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 3
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 4
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 4
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 3
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 5
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: LD_INT 5
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 4
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: LD_INT 6
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: LD_INT 6
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: LD_INT 5
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36833: LD_ADDR_VAR 0 33
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 3
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 4
36885: NEG
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 4
36896: NEG
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 4
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 5
36919: NEG
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 5
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 5
36942: NEG
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 6
36953: NEG
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 6
36964: NEG
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36988: LD_ADDR_VAR 0 34
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: LD_INT 3
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 3
37007: NEG
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 3
37019: NEG
37020: PUSH
37021: LD_INT 3
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: NEG
37032: PUSH
37033: LD_INT 4
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 4
37043: NEG
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 4
37055: NEG
37056: PUSH
37057: LD_INT 4
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 4
37067: NEG
37068: PUSH
37069: LD_INT 5
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 5
37079: NEG
37080: PUSH
37081: LD_INT 4
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 5
37091: NEG
37092: PUSH
37093: LD_INT 5
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 5
37103: NEG
37104: PUSH
37105: LD_INT 6
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 6
37115: NEG
37116: PUSH
37117: LD_INT 5
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 6
37127: NEG
37128: PUSH
37129: LD_INT 6
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37151: LD_ADDR_VAR 0 41
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37195: LD_ADDR_VAR 0 42
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37236: LD_ADDR_VAR 0 43
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37276: LD_ADDR_VAR 0 44
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37317: LD_ADDR_VAR 0 45
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 3
37346: NEG
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37361: LD_ADDR_VAR 0 46
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: LD_INT 3
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 3
37392: NEG
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37407: LD_ADDR_VAR 0 47
37411: PUSH
37412: LD_INT 2
37414: NEG
37415: PUSH
37416: LD_INT 3
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 3
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37440: LD_ADDR_VAR 0 48
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37471: LD_ADDR_VAR 0 49
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37500: LD_ADDR_VAR 0 50
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: LD_INT 3
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 3
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37529: LD_ADDR_VAR 0 51
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37560: LD_ADDR_VAR 0 52
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 3
37579: NEG
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37593: LD_ADDR_VAR 0 53
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 3
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 3
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 2
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37637: LD_ADDR_VAR 0 54
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 3
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37678: LD_ADDR_VAR 0 55
37682: PUSH
37683: LD_INT 3
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37718: LD_ADDR_VAR 0 56
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 3
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37759: LD_ADDR_VAR 0 57
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 3
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37803: LD_ADDR_VAR 0 58
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 3
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: NEG
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 3
37834: NEG
37835: PUSH
37836: LD_INT 3
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37849: LD_ADDR_VAR 0 59
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 2
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 2
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37893: LD_ADDR_VAR 0 60
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37934: LD_ADDR_VAR 0 61
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37974: LD_ADDR_VAR 0 62
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38015: LD_ADDR_VAR 0 63
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38059: LD_ADDR_VAR 0 64
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 2
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: ST_TO_ADDR
// end ; 2 :
38105: GO 41371
38107: LD_INT 2
38109: DOUBLE
38110: EQUAL
38111: IFTRUE 38115
38113: GO 41370
38115: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38116: LD_ADDR_VAR 0 29
38120: PUSH
38121: LD_INT 4
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 4
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 5
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 5
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 4
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 3
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 5
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 3
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 4
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 4
38246: PUSH
38247: LD_INT 4
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 3
38256: PUSH
38257: LD_INT 4
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: LD_INT 3
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 4
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: LD_INT 4
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: LD_INT 4
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 3
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 4
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 5
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 5
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 4
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 5
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: NEG
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: LD_INT 1
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: NEG
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 4
38455: NEG
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 4
38466: NEG
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 4
38478: NEG
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 4
38501: NEG
38502: PUSH
38503: LD_INT 4
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 4
38513: NEG
38514: PUSH
38515: LD_INT 5
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: LD_INT 4
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 4
38549: NEG
38550: PUSH
38551: LD_INT 3
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 5
38561: NEG
38562: PUSH
38563: LD_INT 4
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 5
38573: NEG
38574: PUSH
38575: LD_INT 5
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 3
38585: NEG
38586: PUSH
38587: LD_INT 5
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 5
38597: NEG
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38654: LD_ADDR_VAR 0 30
38658: PUSH
38659: LD_INT 4
38661: PUSH
38662: LD_INT 4
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 4
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 5
38681: PUSH
38682: LD_INT 4
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 5
38691: PUSH
38692: LD_INT 5
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 4
38701: PUSH
38702: LD_INT 5
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 3
38711: PUSH
38712: LD_INT 4
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 3
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 3
38741: PUSH
38742: LD_INT 5
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 3
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 3
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 4
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 4
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 3
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 4
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: NEG
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 4
38844: NEG
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 4
38855: NEG
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: NEG
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 3
38878: NEG
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 4
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 5
38900: NEG
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 5
38911: NEG
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 5
38923: NEG
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 3
38935: NEG
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 3
38946: NEG
38947: PUSH
38948: LD_INT 3
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 3
38958: NEG
38959: PUSH
38960: LD_INT 4
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 3
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: NEG
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 4
39006: NEG
39007: PUSH
39008: LD_INT 3
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 4
39018: NEG
39019: PUSH
39020: LD_INT 4
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: LD_INT 4
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 4
39042: NEG
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 4
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: LD_INT 5
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 4
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 3
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 4
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 5
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: PUSH
39134: LD_INT 3
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: LD_INT 5
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39201: LD_ADDR_VAR 0 31
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 4
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 3
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 4
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 5
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 5
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: LD_INT 4
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 3
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: LD_INT 5
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 2
39290: NEG
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 3
39312: NEG
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 3
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 4
39357: NEG
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 4
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 4
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 4
39403: NEG
39404: PUSH
39405: LD_INT 4
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 4
39415: NEG
39416: PUSH
39417: LD_INT 5
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: NEG
39428: PUSH
39429: LD_INT 4
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 3
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 4
39451: NEG
39452: PUSH
39453: LD_INT 3
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 5
39463: NEG
39464: PUSH
39465: LD_INT 4
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 5
39475: NEG
39476: PUSH
39477: LD_INT 5
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 3
39487: NEG
39488: PUSH
39489: LD_INT 5
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 5
39499: NEG
39500: PUSH
39501: LD_INT 3
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 3
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 4
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: LD_INT 3
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 4
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: LD_INT 4
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 4
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 4
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 5
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 5
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 4
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 5
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39751: LD_ADDR_VAR 0 32
39755: PUSH
39756: LD_INT 4
39758: NEG
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 4
39769: NEG
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 3
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 3
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 4
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 5
39814: NEG
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 5
39825: NEG
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 5
39837: NEG
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: LD_INT 3
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 4
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 3
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: LD_INT 3
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 4
39932: NEG
39933: PUSH
39934: LD_INT 4
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 4
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 4
39956: NEG
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 4
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 5
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 4
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 4
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 5
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: LD_INT 5
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 3
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 4
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 4
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 4
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 4
40163: PUSH
40164: LD_INT 4
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 4
40173: PUSH
40174: LD_INT 3
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 5
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 5
40193: PUSH
40194: LD_INT 5
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 4
40203: PUSH
40204: LD_INT 5
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: LD_INT 4
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 3
40223: PUSH
40224: LD_INT 3
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 5
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 3
40243: PUSH
40244: LD_INT 5
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40298: LD_ADDR_VAR 0 33
40302: PUSH
40303: LD_INT 4
40305: NEG
40306: PUSH
40307: LD_INT 4
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 4
40317: NEG
40318: PUSH
40319: LD_INT 5
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 3
40329: NEG
40330: PUSH
40331: LD_INT 4
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 4
40353: NEG
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 5
40365: NEG
40366: PUSH
40367: LD_INT 4
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 5
40377: NEG
40378: PUSH
40379: LD_INT 5
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 3
40389: NEG
40390: PUSH
40391: LD_INT 5
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 5
40401: NEG
40402: PUSH
40403: LD_INT 3
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 3
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 4
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 3
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 3
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 4
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: LD_INT 4
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 4
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 4
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 5
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 5
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 4
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 3
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 3
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 5
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 3
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 4
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 4
40638: PUSH
40639: LD_INT 4
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 3
40648: PUSH
40649: LD_INT 4
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 3
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 4
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: LD_INT 4
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 4
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 4
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 5
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 5
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 4
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 3
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 5
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 3
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40836: LD_ADDR_VAR 0 34
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 5
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 4
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 3
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 3
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 4
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 5
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 3
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 5
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 3
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 3
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 4
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 4
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 4
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 4
41038: PUSH
41039: LD_INT 4
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 4
41048: PUSH
41049: LD_INT 3
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 5
41058: PUSH
41059: LD_INT 4
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 5
41068: PUSH
41069: LD_INT 5
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 4
41078: PUSH
41079: LD_INT 5
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: LD_INT 4
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: LD_INT 3
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: LD_INT 5
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 4
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 4
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 3
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 4
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 4
41221: NEG
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 4
41232: NEG
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 3
41244: NEG
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 4
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 5
41277: NEG
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 5
41288: NEG
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 5
41300: NEG
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 3
41312: NEG
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: ST_TO_ADDR
// end ; end ;
41368: GO 41371
41370: POP
// case btype of b_depot , b_warehouse :
41371: LD_VAR 0 1
41375: PUSH
41376: LD_INT 0
41378: DOUBLE
41379: EQUAL
41380: IFTRUE 41390
41382: LD_INT 1
41384: DOUBLE
41385: EQUAL
41386: IFTRUE 41390
41388: GO 41591
41390: POP
// case nation of nation_american :
41391: LD_VAR 0 5
41395: PUSH
41396: LD_INT 1
41398: DOUBLE
41399: EQUAL
41400: IFTRUE 41404
41402: GO 41460
41404: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41405: LD_ADDR_VAR 0 9
41409: PUSH
41410: LD_VAR 0 11
41414: PUSH
41415: LD_VAR 0 12
41419: PUSH
41420: LD_VAR 0 13
41424: PUSH
41425: LD_VAR 0 14
41429: PUSH
41430: LD_VAR 0 15
41434: PUSH
41435: LD_VAR 0 16
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: PUSH
41448: LD_VAR 0 4
41452: PUSH
41453: LD_INT 1
41455: PLUS
41456: ARRAY
41457: ST_TO_ADDR
41458: GO 41589
41460: LD_INT 2
41462: DOUBLE
41463: EQUAL
41464: IFTRUE 41468
41466: GO 41524
41468: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41469: LD_ADDR_VAR 0 9
41473: PUSH
41474: LD_VAR 0 17
41478: PUSH
41479: LD_VAR 0 18
41483: PUSH
41484: LD_VAR 0 19
41488: PUSH
41489: LD_VAR 0 20
41493: PUSH
41494: LD_VAR 0 21
41498: PUSH
41499: LD_VAR 0 22
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: PUSH
41512: LD_VAR 0 4
41516: PUSH
41517: LD_INT 1
41519: PLUS
41520: ARRAY
41521: ST_TO_ADDR
41522: GO 41589
41524: LD_INT 3
41526: DOUBLE
41527: EQUAL
41528: IFTRUE 41532
41530: GO 41588
41532: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41533: LD_ADDR_VAR 0 9
41537: PUSH
41538: LD_VAR 0 23
41542: PUSH
41543: LD_VAR 0 24
41547: PUSH
41548: LD_VAR 0 25
41552: PUSH
41553: LD_VAR 0 26
41557: PUSH
41558: LD_VAR 0 27
41562: PUSH
41563: LD_VAR 0 28
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: PUSH
41576: LD_VAR 0 4
41580: PUSH
41581: LD_INT 1
41583: PLUS
41584: ARRAY
41585: ST_TO_ADDR
41586: GO 41589
41588: POP
41589: GO 42144
41591: LD_INT 2
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41605
41597: LD_INT 3
41599: DOUBLE
41600: EQUAL
41601: IFTRUE 41605
41603: GO 41661
41605: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: LD_VAR 0 29
41615: PUSH
41616: LD_VAR 0 30
41620: PUSH
41621: LD_VAR 0 31
41625: PUSH
41626: LD_VAR 0 32
41630: PUSH
41631: LD_VAR 0 33
41635: PUSH
41636: LD_VAR 0 34
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: PUSH
41649: LD_VAR 0 4
41653: PUSH
41654: LD_INT 1
41656: PLUS
41657: ARRAY
41658: ST_TO_ADDR
41659: GO 42144
41661: LD_INT 16
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41723
41667: LD_INT 17
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41723
41673: LD_INT 18
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41723
41679: LD_INT 19
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41723
41685: LD_INT 22
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41723
41691: LD_INT 20
41693: DOUBLE
41694: EQUAL
41695: IFTRUE 41723
41697: LD_INT 21
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41723
41703: LD_INT 23
41705: DOUBLE
41706: EQUAL
41707: IFTRUE 41723
41709: LD_INT 24
41711: DOUBLE
41712: EQUAL
41713: IFTRUE 41723
41715: LD_INT 25
41717: DOUBLE
41718: EQUAL
41719: IFTRUE 41723
41721: GO 41779
41723: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41724: LD_ADDR_VAR 0 9
41728: PUSH
41729: LD_VAR 0 35
41733: PUSH
41734: LD_VAR 0 36
41738: PUSH
41739: LD_VAR 0 37
41743: PUSH
41744: LD_VAR 0 38
41748: PUSH
41749: LD_VAR 0 39
41753: PUSH
41754: LD_VAR 0 40
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: PUSH
41767: LD_VAR 0 4
41771: PUSH
41772: LD_INT 1
41774: PLUS
41775: ARRAY
41776: ST_TO_ADDR
41777: GO 42144
41779: LD_INT 6
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41835
41785: LD_INT 7
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41835
41791: LD_INT 8
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41835
41797: LD_INT 13
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41835
41803: LD_INT 12
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41835
41809: LD_INT 15
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41835
41815: LD_INT 11
41817: DOUBLE
41818: EQUAL
41819: IFTRUE 41835
41821: LD_INT 14
41823: DOUBLE
41824: EQUAL
41825: IFTRUE 41835
41827: LD_INT 10
41829: DOUBLE
41830: EQUAL
41831: IFTRUE 41835
41833: GO 41891
41835: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41836: LD_ADDR_VAR 0 9
41840: PUSH
41841: LD_VAR 0 41
41845: PUSH
41846: LD_VAR 0 42
41850: PUSH
41851: LD_VAR 0 43
41855: PUSH
41856: LD_VAR 0 44
41860: PUSH
41861: LD_VAR 0 45
41865: PUSH
41866: LD_VAR 0 46
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: PUSH
41879: LD_VAR 0 4
41883: PUSH
41884: LD_INT 1
41886: PLUS
41887: ARRAY
41888: ST_TO_ADDR
41889: GO 42144
41891: LD_INT 36
41893: DOUBLE
41894: EQUAL
41895: IFTRUE 41899
41897: GO 41955
41899: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41900: LD_ADDR_VAR 0 9
41904: PUSH
41905: LD_VAR 0 47
41909: PUSH
41910: LD_VAR 0 48
41914: PUSH
41915: LD_VAR 0 49
41919: PUSH
41920: LD_VAR 0 50
41924: PUSH
41925: LD_VAR 0 51
41929: PUSH
41930: LD_VAR 0 52
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: PUSH
41943: LD_VAR 0 4
41947: PUSH
41948: LD_INT 1
41950: PLUS
41951: ARRAY
41952: ST_TO_ADDR
41953: GO 42144
41955: LD_INT 4
41957: DOUBLE
41958: EQUAL
41959: IFTRUE 41981
41961: LD_INT 5
41963: DOUBLE
41964: EQUAL
41965: IFTRUE 41981
41967: LD_INT 34
41969: DOUBLE
41970: EQUAL
41971: IFTRUE 41981
41973: LD_INT 37
41975: DOUBLE
41976: EQUAL
41977: IFTRUE 41981
41979: GO 42037
41981: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41982: LD_ADDR_VAR 0 9
41986: PUSH
41987: LD_VAR 0 53
41991: PUSH
41992: LD_VAR 0 54
41996: PUSH
41997: LD_VAR 0 55
42001: PUSH
42002: LD_VAR 0 56
42006: PUSH
42007: LD_VAR 0 57
42011: PUSH
42012: LD_VAR 0 58
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: LD_VAR 0 4
42029: PUSH
42030: LD_INT 1
42032: PLUS
42033: ARRAY
42034: ST_TO_ADDR
42035: GO 42144
42037: LD_INT 31
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42087
42043: LD_INT 32
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42087
42049: LD_INT 33
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42087
42055: LD_INT 27
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42087
42061: LD_INT 26
42063: DOUBLE
42064: EQUAL
42065: IFTRUE 42087
42067: LD_INT 28
42069: DOUBLE
42070: EQUAL
42071: IFTRUE 42087
42073: LD_INT 29
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42087
42079: LD_INT 30
42081: DOUBLE
42082: EQUAL
42083: IFTRUE 42087
42085: GO 42143
42087: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42088: LD_ADDR_VAR 0 9
42092: PUSH
42093: LD_VAR 0 59
42097: PUSH
42098: LD_VAR 0 60
42102: PUSH
42103: LD_VAR 0 61
42107: PUSH
42108: LD_VAR 0 62
42112: PUSH
42113: LD_VAR 0 63
42117: PUSH
42118: LD_VAR 0 64
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: PUSH
42131: LD_VAR 0 4
42135: PUSH
42136: LD_INT 1
42138: PLUS
42139: ARRAY
42140: ST_TO_ADDR
42141: GO 42144
42143: POP
// temp_list2 = [ ] ;
42144: LD_ADDR_VAR 0 10
42148: PUSH
42149: EMPTY
42150: ST_TO_ADDR
// for i in temp_list do
42151: LD_ADDR_VAR 0 8
42155: PUSH
42156: LD_VAR 0 9
42160: PUSH
42161: FOR_IN
42162: IFFALSE 42214
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42164: LD_ADDR_VAR 0 10
42168: PUSH
42169: LD_VAR 0 10
42173: PUSH
42174: LD_VAR 0 8
42178: PUSH
42179: LD_INT 1
42181: ARRAY
42182: PUSH
42183: LD_VAR 0 2
42187: PLUS
42188: PUSH
42189: LD_VAR 0 8
42193: PUSH
42194: LD_INT 2
42196: ARRAY
42197: PUSH
42198: LD_VAR 0 3
42202: PLUS
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: EMPTY
42209: LIST
42210: ADD
42211: ST_TO_ADDR
42212: GO 42161
42214: POP
42215: POP
// result = temp_list2 ;
42216: LD_ADDR_VAR 0 7
42220: PUSH
42221: LD_VAR 0 10
42225: ST_TO_ADDR
// end ;
42226: LD_VAR 0 7
42230: RET
// export function EnemyInRange ( unit , dist ) ; begin
42231: LD_INT 0
42233: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42234: LD_ADDR_VAR 0 3
42238: PUSH
42239: LD_VAR 0 1
42243: PPUSH
42244: CALL_OW 255
42248: PPUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 250
42258: PPUSH
42259: LD_VAR 0 1
42263: PPUSH
42264: CALL_OW 251
42268: PPUSH
42269: LD_VAR 0 2
42273: PPUSH
42274: CALL 15604 0 4
42278: PUSH
42279: LD_INT 4
42281: ARRAY
42282: ST_TO_ADDR
// end ;
42283: LD_VAR 0 3
42287: RET
// export function PlayerSeeMe ( unit ) ; begin
42288: LD_INT 0
42290: PPUSH
// result := See ( your_side , unit ) ;
42291: LD_ADDR_VAR 0 2
42295: PUSH
42296: LD_OWVAR 2
42300: PPUSH
42301: LD_VAR 0 1
42305: PPUSH
42306: CALL_OW 292
42310: ST_TO_ADDR
// end ;
42311: LD_VAR 0 2
42315: RET
// export function ReverseDir ( unit ) ; begin
42316: LD_INT 0
42318: PPUSH
// if not unit then
42319: LD_VAR 0 1
42323: NOT
42324: IFFALSE 42328
// exit ;
42326: GO 42351
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42328: LD_ADDR_VAR 0 2
42332: PUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 254
42342: PUSH
42343: LD_INT 3
42345: PLUS
42346: PUSH
42347: LD_INT 6
42349: MOD
42350: ST_TO_ADDR
// end ;
42351: LD_VAR 0 2
42355: RET
// export function ReverseArray ( array ) ; var i ; begin
42356: LD_INT 0
42358: PPUSH
42359: PPUSH
// if not array then
42360: LD_VAR 0 1
42364: NOT
42365: IFFALSE 42369
// exit ;
42367: GO 42424
// result := [ ] ;
42369: LD_ADDR_VAR 0 2
42373: PUSH
42374: EMPTY
42375: ST_TO_ADDR
// for i := array downto 1 do
42376: LD_ADDR_VAR 0 3
42380: PUSH
42381: DOUBLE
42382: LD_VAR 0 1
42386: INC
42387: ST_TO_ADDR
42388: LD_INT 1
42390: PUSH
42391: FOR_DOWNTO
42392: IFFALSE 42422
// result := Join ( result , array [ i ] ) ;
42394: LD_ADDR_VAR 0 2
42398: PUSH
42399: LD_VAR 0 2
42403: PPUSH
42404: LD_VAR 0 1
42408: PUSH
42409: LD_VAR 0 3
42413: ARRAY
42414: PPUSH
42415: CALL 47089 0 2
42419: ST_TO_ADDR
42420: GO 42391
42422: POP
42423: POP
// end ;
42424: LD_VAR 0 2
42428: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42429: LD_INT 0
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
// if not unit or not hexes then
42437: LD_VAR 0 1
42441: NOT
42442: PUSH
42443: LD_VAR 0 2
42447: NOT
42448: OR
42449: IFFALSE 42453
// exit ;
42451: GO 42576
// dist := 9999 ;
42453: LD_ADDR_VAR 0 5
42457: PUSH
42458: LD_INT 9999
42460: ST_TO_ADDR
// for i = 1 to hexes do
42461: LD_ADDR_VAR 0 4
42465: PUSH
42466: DOUBLE
42467: LD_INT 1
42469: DEC
42470: ST_TO_ADDR
42471: LD_VAR 0 2
42475: PUSH
42476: FOR_TO
42477: IFFALSE 42564
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42479: LD_ADDR_VAR 0 6
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: LD_VAR 0 2
42493: PUSH
42494: LD_VAR 0 4
42498: ARRAY
42499: PUSH
42500: LD_INT 1
42502: ARRAY
42503: PPUSH
42504: LD_VAR 0 2
42508: PUSH
42509: LD_VAR 0 4
42513: ARRAY
42514: PUSH
42515: LD_INT 2
42517: ARRAY
42518: PPUSH
42519: CALL_OW 297
42523: ST_TO_ADDR
// if tdist < dist then
42524: LD_VAR 0 6
42528: PUSH
42529: LD_VAR 0 5
42533: LESS
42534: IFFALSE 42562
// begin hex := hexes [ i ] ;
42536: LD_ADDR_VAR 0 8
42540: PUSH
42541: LD_VAR 0 2
42545: PUSH
42546: LD_VAR 0 4
42550: ARRAY
42551: ST_TO_ADDR
// dist := tdist ;
42552: LD_ADDR_VAR 0 5
42556: PUSH
42557: LD_VAR 0 6
42561: ST_TO_ADDR
// end ; end ;
42562: GO 42476
42564: POP
42565: POP
// result := hex ;
42566: LD_ADDR_VAR 0 3
42570: PUSH
42571: LD_VAR 0 8
42575: ST_TO_ADDR
// end ;
42576: LD_VAR 0 3
42580: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42581: LD_INT 0
42583: PPUSH
42584: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42585: LD_VAR 0 1
42589: NOT
42590: PUSH
42591: LD_VAR 0 1
42595: PUSH
42596: LD_INT 21
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 23
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PPUSH
42620: CALL_OW 69
42624: IN
42625: NOT
42626: OR
42627: IFFALSE 42631
// exit ;
42629: GO 42678
// for i = 1 to 3 do
42631: LD_ADDR_VAR 0 3
42635: PUSH
42636: DOUBLE
42637: LD_INT 1
42639: DEC
42640: ST_TO_ADDR
42641: LD_INT 3
42643: PUSH
42644: FOR_TO
42645: IFFALSE 42676
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42647: LD_VAR 0 1
42651: PPUSH
42652: CALL_OW 250
42656: PPUSH
42657: LD_VAR 0 1
42661: PPUSH
42662: CALL_OW 251
42666: PPUSH
42667: LD_INT 1
42669: PPUSH
42670: CALL_OW 453
42674: GO 42644
42676: POP
42677: POP
// end ;
42678: LD_VAR 0 2
42682: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42683: LD_INT 0
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
// if not unit or not enemy_unit then
42691: LD_VAR 0 1
42695: NOT
42696: PUSH
42697: LD_VAR 0 2
42701: NOT
42702: OR
42703: IFFALSE 42707
// exit ;
42705: GO 43174
// if GetLives ( i ) < 250 then
42707: LD_VAR 0 4
42711: PPUSH
42712: CALL_OW 256
42716: PUSH
42717: LD_INT 250
42719: LESS
42720: IFFALSE 42733
// begin ComAutodestruct ( i ) ;
42722: LD_VAR 0 4
42726: PPUSH
42727: CALL 42581 0 1
// exit ;
42731: GO 43174
// end ; x := GetX ( enemy_unit ) ;
42733: LD_ADDR_VAR 0 7
42737: PUSH
42738: LD_VAR 0 2
42742: PPUSH
42743: CALL_OW 250
42747: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42748: LD_ADDR_VAR 0 8
42752: PUSH
42753: LD_VAR 0 2
42757: PPUSH
42758: CALL_OW 251
42762: ST_TO_ADDR
// if not x or not y then
42763: LD_VAR 0 7
42767: NOT
42768: PUSH
42769: LD_VAR 0 8
42773: NOT
42774: OR
42775: IFFALSE 42779
// exit ;
42777: GO 43174
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42779: LD_ADDR_VAR 0 6
42783: PUSH
42784: LD_VAR 0 7
42788: PPUSH
42789: LD_INT 0
42791: PPUSH
42792: LD_INT 4
42794: PPUSH
42795: CALL_OW 272
42799: PUSH
42800: LD_VAR 0 8
42804: PPUSH
42805: LD_INT 0
42807: PPUSH
42808: LD_INT 4
42810: PPUSH
42811: CALL_OW 273
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_VAR 0 7
42824: PPUSH
42825: LD_INT 1
42827: PPUSH
42828: LD_INT 4
42830: PPUSH
42831: CALL_OW 272
42835: PUSH
42836: LD_VAR 0 8
42840: PPUSH
42841: LD_INT 1
42843: PPUSH
42844: LD_INT 4
42846: PPUSH
42847: CALL_OW 273
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_VAR 0 7
42860: PPUSH
42861: LD_INT 2
42863: PPUSH
42864: LD_INT 4
42866: PPUSH
42867: CALL_OW 272
42871: PUSH
42872: LD_VAR 0 8
42876: PPUSH
42877: LD_INT 2
42879: PPUSH
42880: LD_INT 4
42882: PPUSH
42883: CALL_OW 273
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_VAR 0 7
42896: PPUSH
42897: LD_INT 3
42899: PPUSH
42900: LD_INT 4
42902: PPUSH
42903: CALL_OW 272
42907: PUSH
42908: LD_VAR 0 8
42912: PPUSH
42913: LD_INT 3
42915: PPUSH
42916: LD_INT 4
42918: PPUSH
42919: CALL_OW 273
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_VAR 0 7
42932: PPUSH
42933: LD_INT 4
42935: PPUSH
42936: LD_INT 4
42938: PPUSH
42939: CALL_OW 272
42943: PUSH
42944: LD_VAR 0 8
42948: PPUSH
42949: LD_INT 4
42951: PPUSH
42952: LD_INT 4
42954: PPUSH
42955: CALL_OW 273
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_VAR 0 7
42968: PPUSH
42969: LD_INT 5
42971: PPUSH
42972: LD_INT 4
42974: PPUSH
42975: CALL_OW 272
42979: PUSH
42980: LD_VAR 0 8
42984: PPUSH
42985: LD_INT 5
42987: PPUSH
42988: LD_INT 4
42990: PPUSH
42991: CALL_OW 273
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// for i = tmp downto 1 do
43008: LD_ADDR_VAR 0 4
43012: PUSH
43013: DOUBLE
43014: LD_VAR 0 6
43018: INC
43019: ST_TO_ADDR
43020: LD_INT 1
43022: PUSH
43023: FOR_DOWNTO
43024: IFFALSE 43125
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43026: LD_VAR 0 6
43030: PUSH
43031: LD_VAR 0 4
43035: ARRAY
43036: PUSH
43037: LD_INT 1
43039: ARRAY
43040: PPUSH
43041: LD_VAR 0 6
43045: PUSH
43046: LD_VAR 0 4
43050: ARRAY
43051: PUSH
43052: LD_INT 2
43054: ARRAY
43055: PPUSH
43056: CALL_OW 488
43060: NOT
43061: PUSH
43062: LD_VAR 0 6
43066: PUSH
43067: LD_VAR 0 4
43071: ARRAY
43072: PUSH
43073: LD_INT 1
43075: ARRAY
43076: PPUSH
43077: LD_VAR 0 6
43081: PUSH
43082: LD_VAR 0 4
43086: ARRAY
43087: PUSH
43088: LD_INT 2
43090: ARRAY
43091: PPUSH
43092: CALL_OW 428
43096: PUSH
43097: LD_INT 0
43099: NONEQUAL
43100: OR
43101: IFFALSE 43123
// tmp := Delete ( tmp , i ) ;
43103: LD_ADDR_VAR 0 6
43107: PUSH
43108: LD_VAR 0 6
43112: PPUSH
43113: LD_VAR 0 4
43117: PPUSH
43118: CALL_OW 3
43122: ST_TO_ADDR
43123: GO 43023
43125: POP
43126: POP
// j := GetClosestHex ( unit , tmp ) ;
43127: LD_ADDR_VAR 0 5
43131: PUSH
43132: LD_VAR 0 1
43136: PPUSH
43137: LD_VAR 0 6
43141: PPUSH
43142: CALL 42429 0 2
43146: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43147: LD_VAR 0 1
43151: PPUSH
43152: LD_VAR 0 5
43156: PUSH
43157: LD_INT 1
43159: ARRAY
43160: PPUSH
43161: LD_VAR 0 5
43165: PUSH
43166: LD_INT 2
43168: ARRAY
43169: PPUSH
43170: CALL_OW 111
// end ;
43174: LD_VAR 0 3
43178: RET
// export function PrepareApemanSoldier ( ) ; begin
43179: LD_INT 0
43181: PPUSH
// uc_nation := 0 ;
43182: LD_ADDR_OWVAR 21
43186: PUSH
43187: LD_INT 0
43189: ST_TO_ADDR
// hc_sex := sex_male ;
43190: LD_ADDR_OWVAR 27
43194: PUSH
43195: LD_INT 1
43197: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43198: LD_ADDR_OWVAR 28
43202: PUSH
43203: LD_INT 15
43205: ST_TO_ADDR
// hc_gallery :=  ;
43206: LD_ADDR_OWVAR 33
43210: PUSH
43211: LD_STRING 
43213: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43214: LD_ADDR_OWVAR 31
43218: PUSH
43219: LD_INT 0
43221: PPUSH
43222: LD_INT 3
43224: PPUSH
43225: CALL_OW 12
43229: PUSH
43230: LD_INT 0
43232: PPUSH
43233: LD_INT 3
43235: PPUSH
43236: CALL_OW 12
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// end ;
43253: LD_VAR 0 1
43257: RET
// export function PrepareApemanEngineer ( ) ; begin
43258: LD_INT 0
43260: PPUSH
// uc_nation := 0 ;
43261: LD_ADDR_OWVAR 21
43265: PUSH
43266: LD_INT 0
43268: ST_TO_ADDR
// hc_sex := sex_male ;
43269: LD_ADDR_OWVAR 27
43273: PUSH
43274: LD_INT 1
43276: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43277: LD_ADDR_OWVAR 28
43281: PUSH
43282: LD_INT 16
43284: ST_TO_ADDR
// hc_gallery :=  ;
43285: LD_ADDR_OWVAR 33
43289: PUSH
43290: LD_STRING 
43292: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43293: LD_ADDR_OWVAR 31
43297: PUSH
43298: LD_INT 0
43300: PPUSH
43301: LD_INT 3
43303: PPUSH
43304: CALL_OW 12
43308: PUSH
43309: LD_INT 0
43311: PPUSH
43312: LD_INT 3
43314: PPUSH
43315: CALL_OW 12
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: ST_TO_ADDR
// end ;
43332: LD_VAR 0 1
43336: RET
// export function PrepareApeman ( agressivity ) ; begin
43337: LD_INT 0
43339: PPUSH
// uc_side := 0 ;
43340: LD_ADDR_OWVAR 20
43344: PUSH
43345: LD_INT 0
43347: ST_TO_ADDR
// uc_nation := 0 ;
43348: LD_ADDR_OWVAR 21
43352: PUSH
43353: LD_INT 0
43355: ST_TO_ADDR
// hc_sex := sex_male ;
43356: LD_ADDR_OWVAR 27
43360: PUSH
43361: LD_INT 1
43363: ST_TO_ADDR
// hc_class := class_apeman ;
43364: LD_ADDR_OWVAR 28
43368: PUSH
43369: LD_INT 12
43371: ST_TO_ADDR
// hc_gallery :=  ;
43372: LD_ADDR_OWVAR 33
43376: PUSH
43377: LD_STRING 
43379: ST_TO_ADDR
// if agressivity = 0 then
43380: LD_VAR 0 1
43384: PUSH
43385: LD_INT 0
43387: EQUAL
43388: IFFALSE 43400
// hc_agressivity := 0 else
43390: LD_ADDR_OWVAR 35
43394: PUSH
43395: LD_INT 0
43397: ST_TO_ADDR
43398: GO 43421
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43400: LD_ADDR_OWVAR 35
43404: PUSH
43405: LD_VAR 0 1
43409: NEG
43410: PPUSH
43411: LD_VAR 0 1
43415: PPUSH
43416: CALL_OW 12
43420: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43421: LD_ADDR_OWVAR 31
43425: PUSH
43426: LD_INT 0
43428: PPUSH
43429: LD_INT 3
43431: PPUSH
43432: CALL_OW 12
43436: PUSH
43437: LD_INT 0
43439: PPUSH
43440: LD_INT 3
43442: PPUSH
43443: CALL_OW 12
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// end ;
43460: LD_VAR 0 2
43464: RET
// export function PrepareTiger ( agressivity ) ; begin
43465: LD_INT 0
43467: PPUSH
// uc_side := 0 ;
43468: LD_ADDR_OWVAR 20
43472: PUSH
43473: LD_INT 0
43475: ST_TO_ADDR
// uc_nation := 0 ;
43476: LD_ADDR_OWVAR 21
43480: PUSH
43481: LD_INT 0
43483: ST_TO_ADDR
// hc_class := class_tiger ;
43484: LD_ADDR_OWVAR 28
43488: PUSH
43489: LD_INT 14
43491: ST_TO_ADDR
// hc_gallery :=  ;
43492: LD_ADDR_OWVAR 33
43496: PUSH
43497: LD_STRING 
43499: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43500: LD_ADDR_OWVAR 35
43504: PUSH
43505: LD_VAR 0 1
43509: NEG
43510: PPUSH
43511: LD_VAR 0 1
43515: PPUSH
43516: CALL_OW 12
43520: ST_TO_ADDR
// end ;
43521: LD_VAR 0 2
43525: RET
// export function PrepareEnchidna ( ) ; begin
43526: LD_INT 0
43528: PPUSH
// uc_side := 0 ;
43529: LD_ADDR_OWVAR 20
43533: PUSH
43534: LD_INT 0
43536: ST_TO_ADDR
// uc_nation := 0 ;
43537: LD_ADDR_OWVAR 21
43541: PUSH
43542: LD_INT 0
43544: ST_TO_ADDR
// hc_class := class_baggie ;
43545: LD_ADDR_OWVAR 28
43549: PUSH
43550: LD_INT 13
43552: ST_TO_ADDR
// hc_gallery :=  ;
43553: LD_ADDR_OWVAR 33
43557: PUSH
43558: LD_STRING 
43560: ST_TO_ADDR
// end ;
43561: LD_VAR 0 1
43565: RET
// export function PrepareFrog ( ) ; begin
43566: LD_INT 0
43568: PPUSH
// uc_side := 0 ;
43569: LD_ADDR_OWVAR 20
43573: PUSH
43574: LD_INT 0
43576: ST_TO_ADDR
// uc_nation := 0 ;
43577: LD_ADDR_OWVAR 21
43581: PUSH
43582: LD_INT 0
43584: ST_TO_ADDR
// hc_class := class_frog ;
43585: LD_ADDR_OWVAR 28
43589: PUSH
43590: LD_INT 19
43592: ST_TO_ADDR
// hc_gallery :=  ;
43593: LD_ADDR_OWVAR 33
43597: PUSH
43598: LD_STRING 
43600: ST_TO_ADDR
// end ;
43601: LD_VAR 0 1
43605: RET
// export function PrepareFish ( ) ; begin
43606: LD_INT 0
43608: PPUSH
// uc_side := 0 ;
43609: LD_ADDR_OWVAR 20
43613: PUSH
43614: LD_INT 0
43616: ST_TO_ADDR
// uc_nation := 0 ;
43617: LD_ADDR_OWVAR 21
43621: PUSH
43622: LD_INT 0
43624: ST_TO_ADDR
// hc_class := class_fish ;
43625: LD_ADDR_OWVAR 28
43629: PUSH
43630: LD_INT 20
43632: ST_TO_ADDR
// hc_gallery :=  ;
43633: LD_ADDR_OWVAR 33
43637: PUSH
43638: LD_STRING 
43640: ST_TO_ADDR
// end ;
43641: LD_VAR 0 1
43645: RET
// export function PrepareBird ( ) ; begin
43646: LD_INT 0
43648: PPUSH
// uc_side := 0 ;
43649: LD_ADDR_OWVAR 20
43653: PUSH
43654: LD_INT 0
43656: ST_TO_ADDR
// uc_nation := 0 ;
43657: LD_ADDR_OWVAR 21
43661: PUSH
43662: LD_INT 0
43664: ST_TO_ADDR
// hc_class := class_phororhacos ;
43665: LD_ADDR_OWVAR 28
43669: PUSH
43670: LD_INT 18
43672: ST_TO_ADDR
// hc_gallery :=  ;
43673: LD_ADDR_OWVAR 33
43677: PUSH
43678: LD_STRING 
43680: ST_TO_ADDR
// end ;
43681: LD_VAR 0 1
43685: RET
// export function PrepareHorse ( ) ; begin
43686: LD_INT 0
43688: PPUSH
// uc_side := 0 ;
43689: LD_ADDR_OWVAR 20
43693: PUSH
43694: LD_INT 0
43696: ST_TO_ADDR
// uc_nation := 0 ;
43697: LD_ADDR_OWVAR 21
43701: PUSH
43702: LD_INT 0
43704: ST_TO_ADDR
// hc_class := class_horse ;
43705: LD_ADDR_OWVAR 28
43709: PUSH
43710: LD_INT 21
43712: ST_TO_ADDR
// hc_gallery :=  ;
43713: LD_ADDR_OWVAR 33
43717: PUSH
43718: LD_STRING 
43720: ST_TO_ADDR
// end ;
43721: LD_VAR 0 1
43725: RET
// export function PrepareMastodont ( ) ; begin
43726: LD_INT 0
43728: PPUSH
// uc_side := 0 ;
43729: LD_ADDR_OWVAR 20
43733: PUSH
43734: LD_INT 0
43736: ST_TO_ADDR
// uc_nation := 0 ;
43737: LD_ADDR_OWVAR 21
43741: PUSH
43742: LD_INT 0
43744: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43745: LD_ADDR_OWVAR 37
43749: PUSH
43750: LD_INT 31
43752: ST_TO_ADDR
// vc_control := control_rider ;
43753: LD_ADDR_OWVAR 38
43757: PUSH
43758: LD_INT 4
43760: ST_TO_ADDR
// end ;
43761: LD_VAR 0 1
43765: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43766: LD_INT 0
43768: PPUSH
43769: PPUSH
43770: PPUSH
// uc_side = 0 ;
43771: LD_ADDR_OWVAR 20
43775: PUSH
43776: LD_INT 0
43778: ST_TO_ADDR
// uc_nation = 0 ;
43779: LD_ADDR_OWVAR 21
43783: PUSH
43784: LD_INT 0
43786: ST_TO_ADDR
// InitHc_All ( ) ;
43787: CALL_OW 584
// InitVc ;
43791: CALL_OW 20
// if mastodonts then
43795: LD_VAR 0 6
43799: IFFALSE 43866
// for i = 1 to mastodonts do
43801: LD_ADDR_VAR 0 11
43805: PUSH
43806: DOUBLE
43807: LD_INT 1
43809: DEC
43810: ST_TO_ADDR
43811: LD_VAR 0 6
43815: PUSH
43816: FOR_TO
43817: IFFALSE 43864
// begin vc_chassis := 31 ;
43819: LD_ADDR_OWVAR 37
43823: PUSH
43824: LD_INT 31
43826: ST_TO_ADDR
// vc_control := control_rider ;
43827: LD_ADDR_OWVAR 38
43831: PUSH
43832: LD_INT 4
43834: ST_TO_ADDR
// animal := CreateVehicle ;
43835: LD_ADDR_VAR 0 12
43839: PUSH
43840: CALL_OW 45
43844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43845: LD_VAR 0 12
43849: PPUSH
43850: LD_VAR 0 8
43854: PPUSH
43855: LD_INT 0
43857: PPUSH
43858: CALL 45994 0 3
// end ;
43862: GO 43816
43864: POP
43865: POP
// if horses then
43866: LD_VAR 0 5
43870: IFFALSE 43937
// for i = 1 to horses do
43872: LD_ADDR_VAR 0 11
43876: PUSH
43877: DOUBLE
43878: LD_INT 1
43880: DEC
43881: ST_TO_ADDR
43882: LD_VAR 0 5
43886: PUSH
43887: FOR_TO
43888: IFFALSE 43935
// begin hc_class := 21 ;
43890: LD_ADDR_OWVAR 28
43894: PUSH
43895: LD_INT 21
43897: ST_TO_ADDR
// hc_gallery :=  ;
43898: LD_ADDR_OWVAR 33
43902: PUSH
43903: LD_STRING 
43905: ST_TO_ADDR
// animal := CreateHuman ;
43906: LD_ADDR_VAR 0 12
43910: PUSH
43911: CALL_OW 44
43915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43916: LD_VAR 0 12
43920: PPUSH
43921: LD_VAR 0 8
43925: PPUSH
43926: LD_INT 0
43928: PPUSH
43929: CALL 45994 0 3
// end ;
43933: GO 43887
43935: POP
43936: POP
// if birds then
43937: LD_VAR 0 1
43941: IFFALSE 44008
// for i = 1 to birds do
43943: LD_ADDR_VAR 0 11
43947: PUSH
43948: DOUBLE
43949: LD_INT 1
43951: DEC
43952: ST_TO_ADDR
43953: LD_VAR 0 1
43957: PUSH
43958: FOR_TO
43959: IFFALSE 44006
// begin hc_class := 18 ;
43961: LD_ADDR_OWVAR 28
43965: PUSH
43966: LD_INT 18
43968: ST_TO_ADDR
// hc_gallery =  ;
43969: LD_ADDR_OWVAR 33
43973: PUSH
43974: LD_STRING 
43976: ST_TO_ADDR
// animal := CreateHuman ;
43977: LD_ADDR_VAR 0 12
43981: PUSH
43982: CALL_OW 44
43986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43987: LD_VAR 0 12
43991: PPUSH
43992: LD_VAR 0 8
43996: PPUSH
43997: LD_INT 0
43999: PPUSH
44000: CALL 45994 0 3
// end ;
44004: GO 43958
44006: POP
44007: POP
// if tigers then
44008: LD_VAR 0 2
44012: IFFALSE 44096
// for i = 1 to tigers do
44014: LD_ADDR_VAR 0 11
44018: PUSH
44019: DOUBLE
44020: LD_INT 1
44022: DEC
44023: ST_TO_ADDR
44024: LD_VAR 0 2
44028: PUSH
44029: FOR_TO
44030: IFFALSE 44094
// begin hc_class = class_tiger ;
44032: LD_ADDR_OWVAR 28
44036: PUSH
44037: LD_INT 14
44039: ST_TO_ADDR
// hc_gallery =  ;
44040: LD_ADDR_OWVAR 33
44044: PUSH
44045: LD_STRING 
44047: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44048: LD_ADDR_OWVAR 35
44052: PUSH
44053: LD_INT 7
44055: NEG
44056: PPUSH
44057: LD_INT 7
44059: PPUSH
44060: CALL_OW 12
44064: ST_TO_ADDR
// animal := CreateHuman ;
44065: LD_ADDR_VAR 0 12
44069: PUSH
44070: CALL_OW 44
44074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44075: LD_VAR 0 12
44079: PPUSH
44080: LD_VAR 0 8
44084: PPUSH
44085: LD_INT 0
44087: PPUSH
44088: CALL 45994 0 3
// end ;
44092: GO 44029
44094: POP
44095: POP
// if apemans then
44096: LD_VAR 0 3
44100: IFFALSE 44223
// for i = 1 to apemans do
44102: LD_ADDR_VAR 0 11
44106: PUSH
44107: DOUBLE
44108: LD_INT 1
44110: DEC
44111: ST_TO_ADDR
44112: LD_VAR 0 3
44116: PUSH
44117: FOR_TO
44118: IFFALSE 44221
// begin hc_class = class_apeman ;
44120: LD_ADDR_OWVAR 28
44124: PUSH
44125: LD_INT 12
44127: ST_TO_ADDR
// hc_gallery =  ;
44128: LD_ADDR_OWVAR 33
44132: PUSH
44133: LD_STRING 
44135: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44136: LD_ADDR_OWVAR 35
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PPUSH
44145: LD_INT 2
44147: PPUSH
44148: CALL_OW 12
44152: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44153: LD_ADDR_OWVAR 31
44157: PUSH
44158: LD_INT 1
44160: PPUSH
44161: LD_INT 3
44163: PPUSH
44164: CALL_OW 12
44168: PUSH
44169: LD_INT 1
44171: PPUSH
44172: LD_INT 3
44174: PPUSH
44175: CALL_OW 12
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: ST_TO_ADDR
// animal := CreateHuman ;
44192: LD_ADDR_VAR 0 12
44196: PUSH
44197: CALL_OW 44
44201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44202: LD_VAR 0 12
44206: PPUSH
44207: LD_VAR 0 8
44211: PPUSH
44212: LD_INT 0
44214: PPUSH
44215: CALL 45994 0 3
// end ;
44219: GO 44117
44221: POP
44222: POP
// if enchidnas then
44223: LD_VAR 0 4
44227: IFFALSE 44294
// for i = 1 to enchidnas do
44229: LD_ADDR_VAR 0 11
44233: PUSH
44234: DOUBLE
44235: LD_INT 1
44237: DEC
44238: ST_TO_ADDR
44239: LD_VAR 0 4
44243: PUSH
44244: FOR_TO
44245: IFFALSE 44292
// begin hc_class = 13 ;
44247: LD_ADDR_OWVAR 28
44251: PUSH
44252: LD_INT 13
44254: ST_TO_ADDR
// hc_gallery =  ;
44255: LD_ADDR_OWVAR 33
44259: PUSH
44260: LD_STRING 
44262: ST_TO_ADDR
// animal := CreateHuman ;
44263: LD_ADDR_VAR 0 12
44267: PUSH
44268: CALL_OW 44
44272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44273: LD_VAR 0 12
44277: PPUSH
44278: LD_VAR 0 8
44282: PPUSH
44283: LD_INT 0
44285: PPUSH
44286: CALL 45994 0 3
// end ;
44290: GO 44244
44292: POP
44293: POP
// if fishes then
44294: LD_VAR 0 7
44298: IFFALSE 44365
// for i = 1 to fishes do
44300: LD_ADDR_VAR 0 11
44304: PUSH
44305: DOUBLE
44306: LD_INT 1
44308: DEC
44309: ST_TO_ADDR
44310: LD_VAR 0 7
44314: PUSH
44315: FOR_TO
44316: IFFALSE 44363
// begin hc_class = 20 ;
44318: LD_ADDR_OWVAR 28
44322: PUSH
44323: LD_INT 20
44325: ST_TO_ADDR
// hc_gallery =  ;
44326: LD_ADDR_OWVAR 33
44330: PUSH
44331: LD_STRING 
44333: ST_TO_ADDR
// animal := CreateHuman ;
44334: LD_ADDR_VAR 0 12
44338: PUSH
44339: CALL_OW 44
44343: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44344: LD_VAR 0 12
44348: PPUSH
44349: LD_VAR 0 9
44353: PPUSH
44354: LD_INT 0
44356: PPUSH
44357: CALL 45994 0 3
// end ;
44361: GO 44315
44363: POP
44364: POP
// end ;
44365: LD_VAR 0 10
44369: RET
// export function WantHeal ( sci , unit ) ; begin
44370: LD_INT 0
44372: PPUSH
// if GetTaskList ( sci ) > 0 then
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 437
44382: PUSH
44383: LD_INT 0
44385: GREATER
44386: IFFALSE 44456
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44388: LD_VAR 0 1
44392: PPUSH
44393: CALL_OW 437
44397: PUSH
44398: LD_INT 1
44400: ARRAY
44401: PUSH
44402: LD_INT 1
44404: ARRAY
44405: PUSH
44406: LD_STRING l
44408: EQUAL
44409: PUSH
44410: LD_VAR 0 1
44414: PPUSH
44415: CALL_OW 437
44419: PUSH
44420: LD_INT 1
44422: ARRAY
44423: PUSH
44424: LD_INT 4
44426: ARRAY
44427: PUSH
44428: LD_VAR 0 2
44432: EQUAL
44433: AND
44434: IFFALSE 44446
// result := true else
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_INT 1
44443: ST_TO_ADDR
44444: GO 44454
// result := false ;
44446: LD_ADDR_VAR 0 3
44450: PUSH
44451: LD_INT 0
44453: ST_TO_ADDR
// end else
44454: GO 44464
// result := false ;
44456: LD_ADDR_VAR 0 3
44460: PUSH
44461: LD_INT 0
44463: ST_TO_ADDR
// end ;
44464: LD_VAR 0 3
44468: RET
// export function HealTarget ( sci ) ; begin
44469: LD_INT 0
44471: PPUSH
// if not sci then
44472: LD_VAR 0 1
44476: NOT
44477: IFFALSE 44481
// exit ;
44479: GO 44546
// result := 0 ;
44481: LD_ADDR_VAR 0 2
44485: PUSH
44486: LD_INT 0
44488: ST_TO_ADDR
// if GetTaskList ( sci ) then
44489: LD_VAR 0 1
44493: PPUSH
44494: CALL_OW 437
44498: IFFALSE 44546
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44500: LD_VAR 0 1
44504: PPUSH
44505: CALL_OW 437
44509: PUSH
44510: LD_INT 1
44512: ARRAY
44513: PUSH
44514: LD_INT 1
44516: ARRAY
44517: PUSH
44518: LD_STRING l
44520: EQUAL
44521: IFFALSE 44546
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44523: LD_ADDR_VAR 0 2
44527: PUSH
44528: LD_VAR 0 1
44532: PPUSH
44533: CALL_OW 437
44537: PUSH
44538: LD_INT 1
44540: ARRAY
44541: PUSH
44542: LD_INT 4
44544: ARRAY
44545: ST_TO_ADDR
// end ;
44546: LD_VAR 0 2
44550: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44551: LD_INT 0
44553: PPUSH
44554: PPUSH
44555: PPUSH
44556: PPUSH
// if not base_units then
44557: LD_VAR 0 1
44561: NOT
44562: IFFALSE 44566
// exit ;
44564: GO 44653
// result := false ;
44566: LD_ADDR_VAR 0 2
44570: PUSH
44571: LD_INT 0
44573: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44574: LD_ADDR_VAR 0 5
44578: PUSH
44579: LD_VAR 0 1
44583: PPUSH
44584: LD_INT 21
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PPUSH
44594: CALL_OW 72
44598: ST_TO_ADDR
// if not tmp then
44599: LD_VAR 0 5
44603: NOT
44604: IFFALSE 44608
// exit ;
44606: GO 44653
// for i in tmp do
44608: LD_ADDR_VAR 0 3
44612: PUSH
44613: LD_VAR 0 5
44617: PUSH
44618: FOR_IN
44619: IFFALSE 44651
// begin result := EnemyInRange ( i , 22 ) ;
44621: LD_ADDR_VAR 0 2
44625: PUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: LD_INT 22
44633: PPUSH
44634: CALL 42231 0 2
44638: ST_TO_ADDR
// if result then
44639: LD_VAR 0 2
44643: IFFALSE 44649
// exit ;
44645: POP
44646: POP
44647: GO 44653
// end ;
44649: GO 44618
44651: POP
44652: POP
// end ;
44653: LD_VAR 0 2
44657: RET
// export function FilterByTag ( units , tag ) ; begin
44658: LD_INT 0
44660: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44661: LD_ADDR_VAR 0 3
44665: PUSH
44666: LD_VAR 0 1
44670: PPUSH
44671: LD_INT 120
44673: PUSH
44674: LD_VAR 0 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PPUSH
44683: CALL_OW 72
44687: ST_TO_ADDR
// end ;
44688: LD_VAR 0 3
44692: RET
// export function IsDriver ( un ) ; begin
44693: LD_INT 0
44695: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44696: LD_ADDR_VAR 0 2
44700: PUSH
44701: LD_VAR 0 1
44705: PUSH
44706: LD_INT 55
44708: PUSH
44709: EMPTY
44710: LIST
44711: PPUSH
44712: CALL_OW 69
44716: IN
44717: ST_TO_ADDR
// end ;
44718: LD_VAR 0 2
44722: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44723: LD_INT 0
44725: PPUSH
44726: PPUSH
// list := [ ] ;
44727: LD_ADDR_VAR 0 5
44731: PUSH
44732: EMPTY
44733: ST_TO_ADDR
// case d of 0 :
44734: LD_VAR 0 3
44738: PUSH
44739: LD_INT 0
44741: DOUBLE
44742: EQUAL
44743: IFTRUE 44747
44745: GO 44880
44747: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44748: LD_ADDR_VAR 0 5
44752: PUSH
44753: LD_VAR 0 1
44757: PUSH
44758: LD_INT 4
44760: MINUS
44761: PUSH
44762: LD_VAR 0 2
44766: PUSH
44767: LD_INT 4
44769: MINUS
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: PUSH
44779: LD_VAR 0 1
44783: PUSH
44784: LD_INT 3
44786: MINUS
44787: PUSH
44788: LD_VAR 0 2
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: PUSH
44801: LD_VAR 0 1
44805: PUSH
44806: LD_INT 4
44808: PLUS
44809: PUSH
44810: LD_VAR 0 2
44814: PUSH
44815: LD_INT 4
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: PUSH
44823: LD_VAR 0 1
44827: PUSH
44828: LD_INT 3
44830: PLUS
44831: PUSH
44832: LD_VAR 0 2
44836: PUSH
44837: LD_INT 3
44839: PLUS
44840: PUSH
44841: LD_INT 5
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: PUSH
44849: LD_VAR 0 1
44853: PUSH
44854: LD_VAR 0 2
44858: PUSH
44859: LD_INT 4
44861: PLUS
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: ST_TO_ADDR
// end ; 1 :
44878: GO 45578
44880: LD_INT 1
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44888
44886: GO 45021
44888: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44889: LD_ADDR_VAR 0 5
44893: PUSH
44894: LD_VAR 0 1
44898: PUSH
44899: LD_VAR 0 2
44903: PUSH
44904: LD_INT 4
44906: MINUS
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: PUSH
44916: LD_VAR 0 1
44920: PUSH
44921: LD_INT 3
44923: MINUS
44924: PUSH
44925: LD_VAR 0 2
44929: PUSH
44930: LD_INT 3
44932: MINUS
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: PUSH
44942: LD_VAR 0 1
44946: PUSH
44947: LD_INT 4
44949: MINUS
44950: PUSH
44951: LD_VAR 0 2
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: PUSH
44964: LD_VAR 0 1
44968: PUSH
44969: LD_VAR 0 2
44973: PUSH
44974: LD_INT 3
44976: PLUS
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: PUSH
44986: LD_VAR 0 1
44990: PUSH
44991: LD_INT 4
44993: PLUS
44994: PUSH
44995: LD_VAR 0 2
44999: PUSH
45000: LD_INT 4
45002: PLUS
45003: PUSH
45004: LD_INT 5
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: ST_TO_ADDR
// end ; 2 :
45019: GO 45578
45021: LD_INT 2
45023: DOUBLE
45024: EQUAL
45025: IFTRUE 45029
45027: GO 45158
45029: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45030: LD_ADDR_VAR 0 5
45034: PUSH
45035: LD_VAR 0 1
45039: PUSH
45040: LD_VAR 0 2
45044: PUSH
45045: LD_INT 3
45047: MINUS
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: PUSH
45057: LD_VAR 0 1
45061: PUSH
45062: LD_INT 4
45064: PLUS
45065: PUSH
45066: LD_VAR 0 2
45070: PUSH
45071: LD_INT 4
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: PUSH
45079: LD_VAR 0 1
45083: PUSH
45084: LD_VAR 0 2
45088: PUSH
45089: LD_INT 4
45091: PLUS
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: PUSH
45101: LD_VAR 0 1
45105: PUSH
45106: LD_INT 3
45108: MINUS
45109: PUSH
45110: LD_VAR 0 2
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: LIST
45122: PUSH
45123: LD_VAR 0 1
45127: PUSH
45128: LD_INT 4
45130: MINUS
45131: PUSH
45132: LD_VAR 0 2
45136: PUSH
45137: LD_INT 4
45139: MINUS
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// end ; 3 :
45156: GO 45578
45158: LD_INT 3
45160: DOUBLE
45161: EQUAL
45162: IFTRUE 45166
45164: GO 45299
45166: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45167: LD_ADDR_VAR 0 5
45171: PUSH
45172: LD_VAR 0 1
45176: PUSH
45177: LD_INT 3
45179: PLUS
45180: PUSH
45181: LD_VAR 0 2
45185: PUSH
45186: LD_INT 4
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: PUSH
45194: LD_VAR 0 1
45198: PUSH
45199: LD_INT 4
45201: PLUS
45202: PUSH
45203: LD_VAR 0 2
45207: PUSH
45208: LD_INT 4
45210: PLUS
45211: PUSH
45212: LD_INT 5
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: PUSH
45220: LD_VAR 0 1
45224: PUSH
45225: LD_INT 4
45227: MINUS
45228: PUSH
45229: LD_VAR 0 2
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: PUSH
45242: LD_VAR 0 1
45246: PUSH
45247: LD_VAR 0 2
45251: PUSH
45252: LD_INT 4
45254: MINUS
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: LIST
45263: PUSH
45264: LD_VAR 0 1
45268: PUSH
45269: LD_INT 3
45271: MINUS
45272: PUSH
45273: LD_VAR 0 2
45277: PUSH
45278: LD_INT 3
45280: MINUS
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: ST_TO_ADDR
// end ; 4 :
45297: GO 45578
45299: LD_INT 4
45301: DOUBLE
45302: EQUAL
45303: IFTRUE 45307
45305: GO 45440
45307: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45308: LD_ADDR_VAR 0 5
45312: PUSH
45313: LD_VAR 0 1
45317: PUSH
45318: LD_VAR 0 2
45322: PUSH
45323: LD_INT 4
45325: PLUS
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: PUSH
45335: LD_VAR 0 1
45339: PUSH
45340: LD_INT 3
45342: PLUS
45343: PUSH
45344: LD_VAR 0 2
45348: PUSH
45349: LD_INT 3
45351: PLUS
45352: PUSH
45353: LD_INT 5
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: PUSH
45361: LD_VAR 0 1
45365: PUSH
45366: LD_INT 4
45368: PLUS
45369: PUSH
45370: LD_VAR 0 2
45374: PUSH
45375: LD_INT 4
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: PUSH
45383: LD_VAR 0 1
45387: PUSH
45388: LD_VAR 0 2
45392: PUSH
45393: LD_INT 3
45395: MINUS
45396: PUSH
45397: LD_INT 3
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: PUSH
45405: LD_VAR 0 1
45409: PUSH
45410: LD_INT 4
45412: MINUS
45413: PUSH
45414: LD_VAR 0 2
45418: PUSH
45419: LD_INT 4
45421: MINUS
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// end ; 5 :
45438: GO 45578
45440: LD_INT 5
45442: DOUBLE
45443: EQUAL
45444: IFTRUE 45448
45446: GO 45577
45448: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45449: LD_ADDR_VAR 0 5
45453: PUSH
45454: LD_VAR 0 1
45458: PUSH
45459: LD_INT 4
45461: MINUS
45462: PUSH
45463: LD_VAR 0 2
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: PUSH
45476: LD_VAR 0 1
45480: PUSH
45481: LD_VAR 0 2
45485: PUSH
45486: LD_INT 4
45488: MINUS
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: PUSH
45498: LD_VAR 0 1
45502: PUSH
45503: LD_INT 4
45505: PLUS
45506: PUSH
45507: LD_VAR 0 2
45511: PUSH
45512: LD_INT 4
45514: PLUS
45515: PUSH
45516: LD_INT 5
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: PUSH
45524: LD_VAR 0 1
45528: PUSH
45529: LD_INT 3
45531: PLUS
45532: PUSH
45533: LD_VAR 0 2
45537: PUSH
45538: LD_INT 4
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: PUSH
45546: LD_VAR 0 1
45550: PUSH
45551: LD_VAR 0 2
45555: PUSH
45556: LD_INT 3
45558: PLUS
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// end ; end ;
45575: GO 45578
45577: POP
// result := list ;
45578: LD_ADDR_VAR 0 4
45582: PUSH
45583: LD_VAR 0 5
45587: ST_TO_ADDR
// end ;
45588: LD_VAR 0 4
45592: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45593: LD_INT 0
45595: PPUSH
45596: PPUSH
45597: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45598: LD_VAR 0 1
45602: NOT
45603: PUSH
45604: LD_VAR 0 2
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: LD_INT 4
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: IN
45627: NOT
45628: OR
45629: IFFALSE 45633
// exit ;
45631: GO 45716
// tmp := [ ] ;
45633: LD_ADDR_VAR 0 5
45637: PUSH
45638: EMPTY
45639: ST_TO_ADDR
// for i in units do
45640: LD_ADDR_VAR 0 4
45644: PUSH
45645: LD_VAR 0 1
45649: PUSH
45650: FOR_IN
45651: IFFALSE 45685
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45653: LD_ADDR_VAR 0 5
45657: PUSH
45658: LD_VAR 0 5
45662: PPUSH
45663: LD_VAR 0 4
45667: PPUSH
45668: LD_VAR 0 2
45672: PPUSH
45673: CALL_OW 259
45677: PPUSH
45678: CALL 47089 0 2
45682: ST_TO_ADDR
45683: GO 45650
45685: POP
45686: POP
// if not tmp then
45687: LD_VAR 0 5
45691: NOT
45692: IFFALSE 45696
// exit ;
45694: GO 45716
// result := SortListByListDesc ( units , tmp ) ;
45696: LD_ADDR_VAR 0 3
45700: PUSH
45701: LD_VAR 0 1
45705: PPUSH
45706: LD_VAR 0 5
45710: PPUSH
45711: CALL_OW 77
45715: ST_TO_ADDR
// end ;
45716: LD_VAR 0 3
45720: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45721: LD_INT 0
45723: PPUSH
45724: PPUSH
45725: PPUSH
// result := false ;
45726: LD_ADDR_VAR 0 3
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// if not building then
45734: LD_VAR 0 2
45738: NOT
45739: IFFALSE 45743
// exit ;
45741: GO 45881
// x := GetX ( building ) ;
45743: LD_ADDR_VAR 0 4
45747: PUSH
45748: LD_VAR 0 2
45752: PPUSH
45753: CALL_OW 250
45757: ST_TO_ADDR
// y := GetY ( building ) ;
45758: LD_ADDR_VAR 0 5
45762: PUSH
45763: LD_VAR 0 2
45767: PPUSH
45768: CALL_OW 251
45772: ST_TO_ADDR
// if not x or not y then
45773: LD_VAR 0 4
45777: NOT
45778: PUSH
45779: LD_VAR 0 5
45783: NOT
45784: OR
45785: IFFALSE 45789
// exit ;
45787: GO 45881
// if GetTaskList ( unit ) then
45789: LD_VAR 0 1
45793: PPUSH
45794: CALL_OW 437
45798: IFFALSE 45881
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45800: LD_STRING e
45802: PUSH
45803: LD_VAR 0 1
45807: PPUSH
45808: CALL_OW 437
45812: PUSH
45813: LD_INT 1
45815: ARRAY
45816: PUSH
45817: LD_INT 1
45819: ARRAY
45820: EQUAL
45821: PUSH
45822: LD_VAR 0 4
45826: PUSH
45827: LD_VAR 0 1
45831: PPUSH
45832: CALL_OW 437
45836: PUSH
45837: LD_INT 1
45839: ARRAY
45840: PUSH
45841: LD_INT 2
45843: ARRAY
45844: EQUAL
45845: AND
45846: PUSH
45847: LD_VAR 0 5
45851: PUSH
45852: LD_VAR 0 1
45856: PPUSH
45857: CALL_OW 437
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: PUSH
45866: LD_INT 3
45868: ARRAY
45869: EQUAL
45870: AND
45871: IFFALSE 45881
// result := true end ;
45873: LD_ADDR_VAR 0 3
45877: PUSH
45878: LD_INT 1
45880: ST_TO_ADDR
// end ;
45881: LD_VAR 0 3
45885: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45886: LD_INT 0
45888: PPUSH
// result := false ;
45889: LD_ADDR_VAR 0 4
45893: PUSH
45894: LD_INT 0
45896: ST_TO_ADDR
// if GetTaskList ( unit ) then
45897: LD_VAR 0 1
45901: PPUSH
45902: CALL_OW 437
45906: IFFALSE 45989
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45908: LD_STRING M
45910: PUSH
45911: LD_VAR 0 1
45915: PPUSH
45916: CALL_OW 437
45920: PUSH
45921: LD_INT 1
45923: ARRAY
45924: PUSH
45925: LD_INT 1
45927: ARRAY
45928: EQUAL
45929: PUSH
45930: LD_VAR 0 2
45934: PUSH
45935: LD_VAR 0 1
45939: PPUSH
45940: CALL_OW 437
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PUSH
45949: LD_INT 2
45951: ARRAY
45952: EQUAL
45953: AND
45954: PUSH
45955: LD_VAR 0 3
45959: PUSH
45960: LD_VAR 0 1
45964: PPUSH
45965: CALL_OW 437
45969: PUSH
45970: LD_INT 1
45972: ARRAY
45973: PUSH
45974: LD_INT 3
45976: ARRAY
45977: EQUAL
45978: AND
45979: IFFALSE 45989
// result := true ;
45981: LD_ADDR_VAR 0 4
45985: PUSH
45986: LD_INT 1
45988: ST_TO_ADDR
// end ; end ;
45989: LD_VAR 0 4
45993: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45994: LD_INT 0
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
// if not unit or not area then
46000: LD_VAR 0 1
46004: NOT
46005: PUSH
46006: LD_VAR 0 2
46010: NOT
46011: OR
46012: IFFALSE 46016
// exit ;
46014: GO 46192
// tmp := AreaToList ( area , i ) ;
46016: LD_ADDR_VAR 0 6
46020: PUSH
46021: LD_VAR 0 2
46025: PPUSH
46026: LD_VAR 0 5
46030: PPUSH
46031: CALL_OW 517
46035: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: DOUBLE
46042: LD_INT 1
46044: DEC
46045: ST_TO_ADDR
46046: LD_VAR 0 6
46050: PUSH
46051: LD_INT 1
46053: ARRAY
46054: PUSH
46055: FOR_TO
46056: IFFALSE 46190
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46058: LD_ADDR_VAR 0 7
46062: PUSH
46063: LD_VAR 0 6
46067: PUSH
46068: LD_INT 1
46070: ARRAY
46071: PUSH
46072: LD_VAR 0 5
46076: ARRAY
46077: PUSH
46078: LD_VAR 0 6
46082: PUSH
46083: LD_INT 2
46085: ARRAY
46086: PUSH
46087: LD_VAR 0 5
46091: ARRAY
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46097: LD_INT 92
46099: PUSH
46100: LD_VAR 0 7
46104: PUSH
46105: LD_INT 1
46107: ARRAY
46108: PUSH
46109: LD_VAR 0 7
46113: PUSH
46114: LD_INT 2
46116: ARRAY
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: PPUSH
46127: CALL_OW 69
46131: PUSH
46132: LD_INT 0
46134: EQUAL
46135: IFFALSE 46188
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46137: LD_VAR 0 1
46141: PPUSH
46142: LD_VAR 0 7
46146: PUSH
46147: LD_INT 1
46149: ARRAY
46150: PPUSH
46151: LD_VAR 0 7
46155: PUSH
46156: LD_INT 2
46158: ARRAY
46159: PPUSH
46160: LD_VAR 0 3
46164: PPUSH
46165: CALL_OW 48
// result := IsPlaced ( unit ) ;
46169: LD_ADDR_VAR 0 4
46173: PUSH
46174: LD_VAR 0 1
46178: PPUSH
46179: CALL_OW 305
46183: ST_TO_ADDR
// exit ;
46184: POP
46185: POP
46186: GO 46192
// end ; end ;
46188: GO 46055
46190: POP
46191: POP
// end ;
46192: LD_VAR 0 4
46196: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46197: LD_INT 0
46199: PPUSH
46200: PPUSH
46201: PPUSH
// if not side or side > 8 then
46202: LD_VAR 0 1
46206: NOT
46207: PUSH
46208: LD_VAR 0 1
46212: PUSH
46213: LD_INT 8
46215: GREATER
46216: OR
46217: IFFALSE 46221
// exit ;
46219: GO 46408
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46221: LD_ADDR_VAR 0 4
46225: PUSH
46226: LD_INT 22
46228: PUSH
46229: LD_VAR 0 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 21
46240: PUSH
46241: LD_INT 3
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PPUSH
46252: CALL_OW 69
46256: ST_TO_ADDR
// if not tmp then
46257: LD_VAR 0 4
46261: NOT
46262: IFFALSE 46266
// exit ;
46264: GO 46408
// enable_addtolog := true ;
46266: LD_ADDR_OWVAR 81
46270: PUSH
46271: LD_INT 1
46273: ST_TO_ADDR
// AddToLog ( [ ) ;
46274: LD_STRING [
46276: PPUSH
46277: CALL_OW 561
// for i in tmp do
46281: LD_ADDR_VAR 0 3
46285: PUSH
46286: LD_VAR 0 4
46290: PUSH
46291: FOR_IN
46292: IFFALSE 46399
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46294: LD_STRING [
46296: PUSH
46297: LD_VAR 0 3
46301: PPUSH
46302: CALL_OW 266
46306: STR
46307: PUSH
46308: LD_STRING , 
46310: STR
46311: PUSH
46312: LD_VAR 0 3
46316: PPUSH
46317: CALL_OW 250
46321: STR
46322: PUSH
46323: LD_STRING , 
46325: STR
46326: PUSH
46327: LD_VAR 0 3
46331: PPUSH
46332: CALL_OW 251
46336: STR
46337: PUSH
46338: LD_STRING , 
46340: STR
46341: PUSH
46342: LD_VAR 0 3
46346: PPUSH
46347: CALL_OW 254
46351: STR
46352: PUSH
46353: LD_STRING , 
46355: STR
46356: PUSH
46357: LD_VAR 0 3
46361: PPUSH
46362: LD_INT 1
46364: PPUSH
46365: CALL_OW 268
46369: STR
46370: PUSH
46371: LD_STRING , 
46373: STR
46374: PUSH
46375: LD_VAR 0 3
46379: PPUSH
46380: LD_INT 2
46382: PPUSH
46383: CALL_OW 268
46387: STR
46388: PUSH
46389: LD_STRING ],
46391: STR
46392: PPUSH
46393: CALL_OW 561
// end ;
46397: GO 46291
46399: POP
46400: POP
// AddToLog ( ]; ) ;
46401: LD_STRING ];
46403: PPUSH
46404: CALL_OW 561
// end ;
46408: LD_VAR 0 2
46412: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46413: LD_INT 0
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
// if not area or not rate or not max then
46420: LD_VAR 0 1
46424: NOT
46425: PUSH
46426: LD_VAR 0 2
46430: NOT
46431: OR
46432: PUSH
46433: LD_VAR 0 4
46437: NOT
46438: OR
46439: IFFALSE 46443
// exit ;
46441: GO 46632
// while 1 do
46443: LD_INT 1
46445: IFFALSE 46632
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46447: LD_ADDR_VAR 0 9
46451: PUSH
46452: LD_VAR 0 1
46456: PPUSH
46457: LD_INT 1
46459: PPUSH
46460: CALL_OW 287
46464: PUSH
46465: LD_INT 10
46467: MUL
46468: ST_TO_ADDR
// r := rate / 10 ;
46469: LD_ADDR_VAR 0 7
46473: PUSH
46474: LD_VAR 0 2
46478: PUSH
46479: LD_INT 10
46481: DIVREAL
46482: ST_TO_ADDR
// time := 1 1$00 ;
46483: LD_ADDR_VAR 0 8
46487: PUSH
46488: LD_INT 2100
46490: ST_TO_ADDR
// if amount < min then
46491: LD_VAR 0 9
46495: PUSH
46496: LD_VAR 0 3
46500: LESS
46501: IFFALSE 46519
// r := r * 2 else
46503: LD_ADDR_VAR 0 7
46507: PUSH
46508: LD_VAR 0 7
46512: PUSH
46513: LD_INT 2
46515: MUL
46516: ST_TO_ADDR
46517: GO 46545
// if amount > max then
46519: LD_VAR 0 9
46523: PUSH
46524: LD_VAR 0 4
46528: GREATER
46529: IFFALSE 46545
// r := r / 2 ;
46531: LD_ADDR_VAR 0 7
46535: PUSH
46536: LD_VAR 0 7
46540: PUSH
46541: LD_INT 2
46543: DIVREAL
46544: ST_TO_ADDR
// time := time / r ;
46545: LD_ADDR_VAR 0 8
46549: PUSH
46550: LD_VAR 0 8
46554: PUSH
46555: LD_VAR 0 7
46559: DIVREAL
46560: ST_TO_ADDR
// if time < 0 then
46561: LD_VAR 0 8
46565: PUSH
46566: LD_INT 0
46568: LESS
46569: IFFALSE 46586
// time := time * - 1 ;
46571: LD_ADDR_VAR 0 8
46575: PUSH
46576: LD_VAR 0 8
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: MUL
46585: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46586: LD_VAR 0 8
46590: PUSH
46591: LD_INT 35
46593: PPUSH
46594: LD_INT 875
46596: PPUSH
46597: CALL_OW 12
46601: PLUS
46602: PPUSH
46603: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46607: LD_INT 1
46609: PPUSH
46610: LD_INT 5
46612: PPUSH
46613: CALL_OW 12
46617: PPUSH
46618: LD_VAR 0 1
46622: PPUSH
46623: LD_INT 1
46625: PPUSH
46626: CALL_OW 55
// end ;
46630: GO 46443
// end ;
46632: LD_VAR 0 5
46636: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46637: LD_INT 0
46639: PPUSH
46640: PPUSH
46641: PPUSH
46642: PPUSH
46643: PPUSH
46644: PPUSH
46645: PPUSH
46646: PPUSH
// if not turrets or not factories then
46647: LD_VAR 0 1
46651: NOT
46652: PUSH
46653: LD_VAR 0 2
46657: NOT
46658: OR
46659: IFFALSE 46663
// exit ;
46661: GO 46970
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46663: LD_ADDR_VAR 0 10
46667: PUSH
46668: LD_INT 5
46670: PUSH
46671: LD_INT 6
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 4
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: LD_INT 5
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 24
46705: PUSH
46706: LD_INT 25
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 23
46715: PUSH
46716: LD_INT 27
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 42
46729: PUSH
46730: LD_INT 43
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 44
46739: PUSH
46740: LD_INT 46
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 45
46749: PUSH
46750: LD_INT 47
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: ST_TO_ADDR
// result := [ ] ;
46767: LD_ADDR_VAR 0 3
46771: PUSH
46772: EMPTY
46773: ST_TO_ADDR
// for i in turrets do
46774: LD_ADDR_VAR 0 4
46778: PUSH
46779: LD_VAR 0 1
46783: PUSH
46784: FOR_IN
46785: IFFALSE 46968
// begin nat := GetNation ( i ) ;
46787: LD_ADDR_VAR 0 7
46791: PUSH
46792: LD_VAR 0 4
46796: PPUSH
46797: CALL_OW 248
46801: ST_TO_ADDR
// weapon := 0 ;
46802: LD_ADDR_VAR 0 8
46806: PUSH
46807: LD_INT 0
46809: ST_TO_ADDR
// if not nat then
46810: LD_VAR 0 7
46814: NOT
46815: IFFALSE 46819
// continue ;
46817: GO 46784
// for j in list [ nat ] do
46819: LD_ADDR_VAR 0 5
46823: PUSH
46824: LD_VAR 0 10
46828: PUSH
46829: LD_VAR 0 7
46833: ARRAY
46834: PUSH
46835: FOR_IN
46836: IFFALSE 46877
// if GetBWeapon ( i ) = j [ 1 ] then
46838: LD_VAR 0 4
46842: PPUSH
46843: CALL_OW 269
46847: PUSH
46848: LD_VAR 0 5
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: EQUAL
46857: IFFALSE 46875
// begin weapon := j [ 2 ] ;
46859: LD_ADDR_VAR 0 8
46863: PUSH
46864: LD_VAR 0 5
46868: PUSH
46869: LD_INT 2
46871: ARRAY
46872: ST_TO_ADDR
// break ;
46873: GO 46877
// end ;
46875: GO 46835
46877: POP
46878: POP
// if not weapon then
46879: LD_VAR 0 8
46883: NOT
46884: IFFALSE 46888
// continue ;
46886: GO 46784
// for k in factories do
46888: LD_ADDR_VAR 0 6
46892: PUSH
46893: LD_VAR 0 2
46897: PUSH
46898: FOR_IN
46899: IFFALSE 46964
// begin weapons := AvailableWeaponList ( k ) ;
46901: LD_ADDR_VAR 0 9
46905: PUSH
46906: LD_VAR 0 6
46910: PPUSH
46911: CALL_OW 478
46915: ST_TO_ADDR
// if not weapons then
46916: LD_VAR 0 9
46920: NOT
46921: IFFALSE 46925
// continue ;
46923: GO 46898
// if weapon in weapons then
46925: LD_VAR 0 8
46929: PUSH
46930: LD_VAR 0 9
46934: IN
46935: IFFALSE 46962
// begin result := [ i , weapon ] ;
46937: LD_ADDR_VAR 0 3
46941: PUSH
46942: LD_VAR 0 4
46946: PUSH
46947: LD_VAR 0 8
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// exit ;
46956: POP
46957: POP
46958: POP
46959: POP
46960: GO 46970
// end ; end ;
46962: GO 46898
46964: POP
46965: POP
// end ;
46966: GO 46784
46968: POP
46969: POP
// end ;
46970: LD_VAR 0 3
46974: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46975: LD_INT 0
46977: PPUSH
// if not side or side > 8 then
46978: LD_VAR 0 3
46982: NOT
46983: PUSH
46984: LD_VAR 0 3
46988: PUSH
46989: LD_INT 8
46991: GREATER
46992: OR
46993: IFFALSE 46997
// exit ;
46995: GO 47056
// if not range then
46997: LD_VAR 0 4
47001: NOT
47002: IFFALSE 47013
// range := - 12 ;
47004: LD_ADDR_VAR 0 4
47008: PUSH
47009: LD_INT 12
47011: NEG
47012: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47013: LD_VAR 0 1
47017: PPUSH
47018: LD_VAR 0 2
47022: PPUSH
47023: LD_VAR 0 3
47027: PPUSH
47028: LD_VAR 0 4
47032: PPUSH
47033: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47037: LD_VAR 0 1
47041: PPUSH
47042: LD_VAR 0 2
47046: PPUSH
47047: LD_VAR 0 3
47051: PPUSH
47052: CALL_OW 331
// end ;
47056: LD_VAR 0 5
47060: RET
// export function Video ( mode ) ; begin
47061: LD_INT 0
47063: PPUSH
// ingame_video = mode ;
47064: LD_ADDR_OWVAR 52
47068: PUSH
47069: LD_VAR 0 1
47073: ST_TO_ADDR
// interface_hidden = mode ;
47074: LD_ADDR_OWVAR 54
47078: PUSH
47079: LD_VAR 0 1
47083: ST_TO_ADDR
// end ;
47084: LD_VAR 0 2
47088: RET
// export function Join ( array , element ) ; begin
47089: LD_INT 0
47091: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47092: LD_ADDR_VAR 0 3
47096: PUSH
47097: LD_VAR 0 1
47101: PPUSH
47102: LD_VAR 0 1
47106: PUSH
47107: LD_INT 1
47109: PLUS
47110: PPUSH
47111: LD_VAR 0 2
47115: PPUSH
47116: CALL_OW 1
47120: ST_TO_ADDR
// end ;
47121: LD_VAR 0 3
47125: RET
// export function JoinUnion ( array , element ) ; begin
47126: LD_INT 0
47128: PPUSH
// result := array union element ;
47129: LD_ADDR_VAR 0 3
47133: PUSH
47134: LD_VAR 0 1
47138: PUSH
47139: LD_VAR 0 2
47143: UNION
47144: ST_TO_ADDR
// end ;
47145: LD_VAR 0 3
47149: RET
// export function GetBehemoths ( side ) ; begin
47150: LD_INT 0
47152: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47153: LD_ADDR_VAR 0 2
47157: PUSH
47158: LD_INT 22
47160: PUSH
47161: LD_VAR 0 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 31
47172: PUSH
47173: LD_INT 25
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PPUSH
47184: CALL_OW 69
47188: ST_TO_ADDR
// end ;
47189: LD_VAR 0 2
47193: RET
// export function Shuffle ( array ) ; var i , index ; begin
47194: LD_INT 0
47196: PPUSH
47197: PPUSH
47198: PPUSH
// result := [ ] ;
47199: LD_ADDR_VAR 0 2
47203: PUSH
47204: EMPTY
47205: ST_TO_ADDR
// if not array then
47206: LD_VAR 0 1
47210: NOT
47211: IFFALSE 47215
// exit ;
47213: GO 47314
// Randomize ;
47215: CALL_OW 10
// for i = array downto 1 do
47219: LD_ADDR_VAR 0 3
47223: PUSH
47224: DOUBLE
47225: LD_VAR 0 1
47229: INC
47230: ST_TO_ADDR
47231: LD_INT 1
47233: PUSH
47234: FOR_DOWNTO
47235: IFFALSE 47312
// begin index := rand ( 1 , array ) ;
47237: LD_ADDR_VAR 0 4
47241: PUSH
47242: LD_INT 1
47244: PPUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: CALL_OW 12
47254: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47255: LD_ADDR_VAR 0 2
47259: PUSH
47260: LD_VAR 0 2
47264: PPUSH
47265: LD_VAR 0 2
47269: PUSH
47270: LD_INT 1
47272: PLUS
47273: PPUSH
47274: LD_VAR 0 1
47278: PUSH
47279: LD_VAR 0 4
47283: ARRAY
47284: PPUSH
47285: CALL_OW 2
47289: ST_TO_ADDR
// array := Delete ( array , index ) ;
47290: LD_ADDR_VAR 0 1
47294: PUSH
47295: LD_VAR 0 1
47299: PPUSH
47300: LD_VAR 0 4
47304: PPUSH
47305: CALL_OW 3
47309: ST_TO_ADDR
// end ;
47310: GO 47234
47312: POP
47313: POP
// end ;
47314: LD_VAR 0 2
47318: RET
// export function GetBaseMaterials ( base ) ; begin
47319: LD_INT 0
47321: PPUSH
// result := [ 0 , 0 , 0 ] ;
47322: LD_ADDR_VAR 0 2
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: LIST
47340: ST_TO_ADDR
// if not base then
47341: LD_VAR 0 1
47345: NOT
47346: IFFALSE 47350
// exit ;
47348: GO 47399
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47350: LD_ADDR_VAR 0 2
47354: PUSH
47355: LD_VAR 0 1
47359: PPUSH
47360: LD_INT 1
47362: PPUSH
47363: CALL_OW 275
47367: PUSH
47368: LD_VAR 0 1
47372: PPUSH
47373: LD_INT 2
47375: PPUSH
47376: CALL_OW 275
47380: PUSH
47381: LD_VAR 0 1
47385: PPUSH
47386: LD_INT 3
47388: PPUSH
47389: CALL_OW 275
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: ST_TO_ADDR
// end ;
47399: LD_VAR 0 2
47403: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47404: LD_INT 0
47406: PPUSH
47407: PPUSH
// result := array ;
47408: LD_ADDR_VAR 0 3
47412: PUSH
47413: LD_VAR 0 1
47417: ST_TO_ADDR
// if size >= result then
47418: LD_VAR 0 2
47422: PUSH
47423: LD_VAR 0 3
47427: GREATEREQUAL
47428: IFFALSE 47432
// exit ;
47430: GO 47482
// if size then
47432: LD_VAR 0 2
47436: IFFALSE 47482
// for i := array downto size do
47438: LD_ADDR_VAR 0 4
47442: PUSH
47443: DOUBLE
47444: LD_VAR 0 1
47448: INC
47449: ST_TO_ADDR
47450: LD_VAR 0 2
47454: PUSH
47455: FOR_DOWNTO
47456: IFFALSE 47480
// result := Delete ( result , result ) ;
47458: LD_ADDR_VAR 0 3
47462: PUSH
47463: LD_VAR 0 3
47467: PPUSH
47468: LD_VAR 0 3
47472: PPUSH
47473: CALL_OW 3
47477: ST_TO_ADDR
47478: GO 47455
47480: POP
47481: POP
// end ;
47482: LD_VAR 0 3
47486: RET
// export function ComExit ( unit ) ; var tmp ; begin
47487: LD_INT 0
47489: PPUSH
47490: PPUSH
// if not IsInUnit ( unit ) then
47491: LD_VAR 0 1
47495: PPUSH
47496: CALL_OW 310
47500: NOT
47501: IFFALSE 47505
// exit ;
47503: GO 47565
// tmp := IsInUnit ( unit ) ;
47505: LD_ADDR_VAR 0 3
47509: PUSH
47510: LD_VAR 0 1
47514: PPUSH
47515: CALL_OW 310
47519: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47520: LD_VAR 0 3
47524: PPUSH
47525: CALL_OW 247
47529: PUSH
47530: LD_INT 2
47532: EQUAL
47533: IFFALSE 47546
// ComExitVehicle ( unit ) else
47535: LD_VAR 0 1
47539: PPUSH
47540: CALL_OW 121
47544: GO 47555
// ComExitBuilding ( unit ) ;
47546: LD_VAR 0 1
47550: PPUSH
47551: CALL_OW 122
// result := tmp ;
47555: LD_ADDR_VAR 0 2
47559: PUSH
47560: LD_VAR 0 3
47564: ST_TO_ADDR
// end ;
47565: LD_VAR 0 2
47569: RET
// export function ComExitAll ( units ) ; var i ; begin
47570: LD_INT 0
47572: PPUSH
47573: PPUSH
// if not units then
47574: LD_VAR 0 1
47578: NOT
47579: IFFALSE 47583
// exit ;
47581: GO 47609
// for i in units do
47583: LD_ADDR_VAR 0 3
47587: PUSH
47588: LD_VAR 0 1
47592: PUSH
47593: FOR_IN
47594: IFFALSE 47607
// ComExit ( i ) ;
47596: LD_VAR 0 3
47600: PPUSH
47601: CALL 47487 0 1
47605: GO 47593
47607: POP
47608: POP
// end ;
47609: LD_VAR 0 2
47613: RET
// export function ResetHc ; begin
47614: LD_INT 0
47616: PPUSH
// InitHc ;
47617: CALL_OW 19
// hc_importance := 0 ;
47621: LD_ADDR_OWVAR 32
47625: PUSH
47626: LD_INT 0
47628: ST_TO_ADDR
// end ;
47629: LD_VAR 0 1
47633: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47634: LD_INT 0
47636: PPUSH
47637: PPUSH
47638: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47639: LD_ADDR_VAR 0 6
47643: PUSH
47644: LD_VAR 0 1
47648: PUSH
47649: LD_VAR 0 3
47653: PLUS
47654: PUSH
47655: LD_INT 2
47657: DIV
47658: ST_TO_ADDR
// if _x < 0 then
47659: LD_VAR 0 6
47663: PUSH
47664: LD_INT 0
47666: LESS
47667: IFFALSE 47684
// _x := _x * - 1 ;
47669: LD_ADDR_VAR 0 6
47673: PUSH
47674: LD_VAR 0 6
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: MUL
47683: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47684: LD_ADDR_VAR 0 7
47688: PUSH
47689: LD_VAR 0 2
47693: PUSH
47694: LD_VAR 0 4
47698: PLUS
47699: PUSH
47700: LD_INT 2
47702: DIV
47703: ST_TO_ADDR
// if _y < 0 then
47704: LD_VAR 0 7
47708: PUSH
47709: LD_INT 0
47711: LESS
47712: IFFALSE 47729
// _y := _y * - 1 ;
47714: LD_ADDR_VAR 0 7
47718: PUSH
47719: LD_VAR 0 7
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: MUL
47728: ST_TO_ADDR
// result := [ _x , _y ] ;
47729: LD_ADDR_VAR 0 5
47733: PUSH
47734: LD_VAR 0 6
47738: PUSH
47739: LD_VAR 0 7
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// end ;
47748: LD_VAR 0 5
47752: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47753: LD_INT 0
47755: PPUSH
47756: PPUSH
47757: PPUSH
47758: PPUSH
// task := GetTaskList ( unit ) ;
47759: LD_ADDR_VAR 0 7
47763: PUSH
47764: LD_VAR 0 1
47768: PPUSH
47769: CALL_OW 437
47773: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47774: LD_VAR 0 7
47778: NOT
47779: PUSH
47780: LD_VAR 0 1
47784: PPUSH
47785: LD_VAR 0 2
47789: PPUSH
47790: CALL_OW 308
47794: NOT
47795: AND
47796: IFFALSE 47800
// exit ;
47798: GO 47918
// if IsInArea ( unit , area ) then
47800: LD_VAR 0 1
47804: PPUSH
47805: LD_VAR 0 2
47809: PPUSH
47810: CALL_OW 308
47814: IFFALSE 47832
// begin ComMoveToArea ( unit , goAway ) ;
47816: LD_VAR 0 1
47820: PPUSH
47821: LD_VAR 0 3
47825: PPUSH
47826: CALL_OW 113
// exit ;
47830: GO 47918
// end ; if task [ 1 ] [ 1 ] <> M then
47832: LD_VAR 0 7
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: PUSH
47841: LD_INT 1
47843: ARRAY
47844: PUSH
47845: LD_STRING M
47847: NONEQUAL
47848: IFFALSE 47852
// exit ;
47850: GO 47918
// x := task [ 1 ] [ 2 ] ;
47852: LD_ADDR_VAR 0 5
47856: PUSH
47857: LD_VAR 0 7
47861: PUSH
47862: LD_INT 1
47864: ARRAY
47865: PUSH
47866: LD_INT 2
47868: ARRAY
47869: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47870: LD_ADDR_VAR 0 6
47874: PUSH
47875: LD_VAR 0 7
47879: PUSH
47880: LD_INT 1
47882: ARRAY
47883: PUSH
47884: LD_INT 3
47886: ARRAY
47887: ST_TO_ADDR
// if InArea ( x , y , area ) then
47888: LD_VAR 0 5
47892: PPUSH
47893: LD_VAR 0 6
47897: PPUSH
47898: LD_VAR 0 2
47902: PPUSH
47903: CALL_OW 309
47907: IFFALSE 47918
// ComStop ( unit ) ;
47909: LD_VAR 0 1
47913: PPUSH
47914: CALL_OW 141
// end ;
47918: LD_VAR 0 4
47922: RET
// export function Abs ( value ) ; begin
47923: LD_INT 0
47925: PPUSH
// result := value ;
47926: LD_ADDR_VAR 0 2
47930: PUSH
47931: LD_VAR 0 1
47935: ST_TO_ADDR
// if value < 0 then
47936: LD_VAR 0 1
47940: PUSH
47941: LD_INT 0
47943: LESS
47944: IFFALSE 47961
// result := value * - 1 ;
47946: LD_ADDR_VAR 0 2
47950: PUSH
47951: LD_VAR 0 1
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: MUL
47960: ST_TO_ADDR
// end ;
47961: LD_VAR 0 2
47965: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47966: LD_INT 0
47968: PPUSH
47969: PPUSH
47970: PPUSH
47971: PPUSH
47972: PPUSH
47973: PPUSH
47974: PPUSH
47975: PPUSH
// if not unit or not building then
47976: LD_VAR 0 1
47980: NOT
47981: PUSH
47982: LD_VAR 0 2
47986: NOT
47987: OR
47988: IFFALSE 47992
// exit ;
47990: GO 48218
// x := GetX ( building ) ;
47992: LD_ADDR_VAR 0 4
47996: PUSH
47997: LD_VAR 0 2
48001: PPUSH
48002: CALL_OW 250
48006: ST_TO_ADDR
// y := GetY ( building ) ;
48007: LD_ADDR_VAR 0 6
48011: PUSH
48012: LD_VAR 0 2
48016: PPUSH
48017: CALL_OW 251
48021: ST_TO_ADDR
// d := GetDir ( building ) ;
48022: LD_ADDR_VAR 0 8
48026: PUSH
48027: LD_VAR 0 2
48031: PPUSH
48032: CALL_OW 254
48036: ST_TO_ADDR
// r := 4 ;
48037: LD_ADDR_VAR 0 9
48041: PUSH
48042: LD_INT 4
48044: ST_TO_ADDR
// for i := 1 to 5 do
48045: LD_ADDR_VAR 0 10
48049: PUSH
48050: DOUBLE
48051: LD_INT 1
48053: DEC
48054: ST_TO_ADDR
48055: LD_INT 5
48057: PUSH
48058: FOR_TO
48059: IFFALSE 48216
// begin _x := ShiftX ( x , d , r + i ) ;
48061: LD_ADDR_VAR 0 5
48065: PUSH
48066: LD_VAR 0 4
48070: PPUSH
48071: LD_VAR 0 8
48075: PPUSH
48076: LD_VAR 0 9
48080: PUSH
48081: LD_VAR 0 10
48085: PLUS
48086: PPUSH
48087: CALL_OW 272
48091: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48092: LD_ADDR_VAR 0 7
48096: PUSH
48097: LD_VAR 0 6
48101: PPUSH
48102: LD_VAR 0 8
48106: PPUSH
48107: LD_VAR 0 9
48111: PUSH
48112: LD_VAR 0 10
48116: PLUS
48117: PPUSH
48118: CALL_OW 273
48122: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48123: LD_VAR 0 5
48127: PPUSH
48128: LD_VAR 0 7
48132: PPUSH
48133: CALL_OW 488
48137: PUSH
48138: LD_VAR 0 5
48142: PPUSH
48143: LD_VAR 0 7
48147: PPUSH
48148: CALL_OW 428
48152: PPUSH
48153: CALL_OW 247
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: IN
48168: NOT
48169: AND
48170: IFFALSE 48214
// begin ComMoveXY ( unit , _x , _y ) ;
48172: LD_VAR 0 1
48176: PPUSH
48177: LD_VAR 0 5
48181: PPUSH
48182: LD_VAR 0 7
48186: PPUSH
48187: CALL_OW 111
// result := [ _x , _y ] ;
48191: LD_ADDR_VAR 0 3
48195: PUSH
48196: LD_VAR 0 5
48200: PUSH
48201: LD_VAR 0 7
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: ST_TO_ADDR
// exit ;
48210: POP
48211: POP
48212: GO 48218
// end ; end ;
48214: GO 48058
48216: POP
48217: POP
// end ;
48218: LD_VAR 0 3
48222: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48223: LD_INT 0
48225: PPUSH
48226: PPUSH
48227: PPUSH
// result := 0 ;
48228: LD_ADDR_VAR 0 3
48232: PUSH
48233: LD_INT 0
48235: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48236: LD_VAR 0 1
48240: PUSH
48241: LD_INT 0
48243: LESS
48244: PUSH
48245: LD_VAR 0 1
48249: PUSH
48250: LD_INT 8
48252: GREATER
48253: OR
48254: PUSH
48255: LD_VAR 0 2
48259: PUSH
48260: LD_INT 0
48262: LESS
48263: OR
48264: PUSH
48265: LD_VAR 0 2
48269: PUSH
48270: LD_INT 8
48272: GREATER
48273: OR
48274: IFFALSE 48278
// exit ;
48276: GO 48353
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48278: LD_ADDR_VAR 0 4
48282: PUSH
48283: LD_INT 22
48285: PUSH
48286: LD_VAR 0 2
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PPUSH
48295: CALL_OW 69
48299: PUSH
48300: FOR_IN
48301: IFFALSE 48351
// begin un := UnitShoot ( i ) ;
48303: LD_ADDR_VAR 0 5
48307: PUSH
48308: LD_VAR 0 4
48312: PPUSH
48313: CALL_OW 504
48317: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48318: LD_VAR 0 5
48322: PPUSH
48323: CALL_OW 255
48327: PUSH
48328: LD_VAR 0 1
48332: EQUAL
48333: IFFALSE 48349
// begin result := un ;
48335: LD_ADDR_VAR 0 3
48339: PUSH
48340: LD_VAR 0 5
48344: ST_TO_ADDR
// exit ;
48345: POP
48346: POP
48347: GO 48353
// end ; end ;
48349: GO 48300
48351: POP
48352: POP
// end ;
48353: LD_VAR 0 3
48357: RET
// export function GetCargoBay ( units ) ; begin
48358: LD_INT 0
48360: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48361: LD_ADDR_VAR 0 2
48365: PUSH
48366: LD_VAR 0 1
48370: PPUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 34
48376: PUSH
48377: LD_INT 12
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 34
48386: PUSH
48387: LD_INT 51
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 34
48396: PUSH
48397: LD_INT 32
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 34
48406: PUSH
48407: LD_INT 89
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: PPUSH
48421: CALL_OW 72
48425: ST_TO_ADDR
// end ;
48426: LD_VAR 0 2
48430: RET
// export function Negate ( value ) ; begin
48431: LD_INT 0
48433: PPUSH
// result := not value ;
48434: LD_ADDR_VAR 0 2
48438: PUSH
48439: LD_VAR 0 1
48443: NOT
48444: ST_TO_ADDR
// end ;
48445: LD_VAR 0 2
48449: RET
// export function Inc ( value ) ; begin
48450: LD_INT 0
48452: PPUSH
// result := value + 1 ;
48453: LD_ADDR_VAR 0 2
48457: PUSH
48458: LD_VAR 0 1
48462: PUSH
48463: LD_INT 1
48465: PLUS
48466: ST_TO_ADDR
// end ;
48467: LD_VAR 0 2
48471: RET
// export function Dec ( value ) ; begin
48472: LD_INT 0
48474: PPUSH
// result := value - 1 ;
48475: LD_ADDR_VAR 0 2
48479: PUSH
48480: LD_VAR 0 1
48484: PUSH
48485: LD_INT 1
48487: MINUS
48488: ST_TO_ADDR
// end ;
48489: LD_VAR 0 2
48493: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48494: LD_INT 0
48496: PPUSH
48497: PPUSH
48498: PPUSH
48499: PPUSH
48500: PPUSH
48501: PPUSH
48502: PPUSH
48503: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48504: LD_VAR 0 1
48508: PPUSH
48509: LD_VAR 0 2
48513: PPUSH
48514: CALL_OW 488
48518: NOT
48519: PUSH
48520: LD_VAR 0 3
48524: PPUSH
48525: LD_VAR 0 4
48529: PPUSH
48530: CALL_OW 488
48534: NOT
48535: OR
48536: IFFALSE 48549
// begin result := - 1 ;
48538: LD_ADDR_VAR 0 5
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: ST_TO_ADDR
// exit ;
48547: GO 48784
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48549: LD_ADDR_VAR 0 12
48553: PUSH
48554: LD_VAR 0 1
48558: PPUSH
48559: LD_VAR 0 2
48563: PPUSH
48564: LD_VAR 0 3
48568: PPUSH
48569: LD_VAR 0 4
48573: PPUSH
48574: CALL 47634 0 4
48578: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48579: LD_ADDR_VAR 0 11
48583: PUSH
48584: LD_VAR 0 1
48588: PPUSH
48589: LD_VAR 0 2
48593: PPUSH
48594: LD_VAR 0 12
48598: PUSH
48599: LD_INT 1
48601: ARRAY
48602: PPUSH
48603: LD_VAR 0 12
48607: PUSH
48608: LD_INT 2
48610: ARRAY
48611: PPUSH
48612: CALL_OW 298
48616: ST_TO_ADDR
// distance := 9999 ;
48617: LD_ADDR_VAR 0 10
48621: PUSH
48622: LD_INT 9999
48624: ST_TO_ADDR
// for i := 0 to 5 do
48625: LD_ADDR_VAR 0 6
48629: PUSH
48630: DOUBLE
48631: LD_INT 0
48633: DEC
48634: ST_TO_ADDR
48635: LD_INT 5
48637: PUSH
48638: FOR_TO
48639: IFFALSE 48782
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48641: LD_ADDR_VAR 0 7
48645: PUSH
48646: LD_VAR 0 1
48650: PPUSH
48651: LD_VAR 0 6
48655: PPUSH
48656: LD_VAR 0 11
48660: PPUSH
48661: CALL_OW 272
48665: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48666: LD_ADDR_VAR 0 8
48670: PUSH
48671: LD_VAR 0 2
48675: PPUSH
48676: LD_VAR 0 6
48680: PPUSH
48681: LD_VAR 0 11
48685: PPUSH
48686: CALL_OW 273
48690: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48691: LD_VAR 0 7
48695: PPUSH
48696: LD_VAR 0 8
48700: PPUSH
48701: CALL_OW 488
48705: NOT
48706: IFFALSE 48710
// continue ;
48708: GO 48638
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48710: LD_ADDR_VAR 0 9
48714: PUSH
48715: LD_VAR 0 12
48719: PUSH
48720: LD_INT 1
48722: ARRAY
48723: PPUSH
48724: LD_VAR 0 12
48728: PUSH
48729: LD_INT 2
48731: ARRAY
48732: PPUSH
48733: LD_VAR 0 7
48737: PPUSH
48738: LD_VAR 0 8
48742: PPUSH
48743: CALL_OW 298
48747: ST_TO_ADDR
// if tmp < distance then
48748: LD_VAR 0 9
48752: PUSH
48753: LD_VAR 0 10
48757: LESS
48758: IFFALSE 48780
// begin result := i ;
48760: LD_ADDR_VAR 0 5
48764: PUSH
48765: LD_VAR 0 6
48769: ST_TO_ADDR
// distance := tmp ;
48770: LD_ADDR_VAR 0 10
48774: PUSH
48775: LD_VAR 0 9
48779: ST_TO_ADDR
// end ; end ;
48780: GO 48638
48782: POP
48783: POP
// end ;
48784: LD_VAR 0 5
48788: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48789: LD_INT 0
48791: PPUSH
48792: PPUSH
// if not driver or not IsInUnit ( driver ) then
48793: LD_VAR 0 1
48797: NOT
48798: PUSH
48799: LD_VAR 0 1
48803: PPUSH
48804: CALL_OW 310
48808: NOT
48809: OR
48810: IFFALSE 48814
// exit ;
48812: GO 48904
// vehicle := IsInUnit ( driver ) ;
48814: LD_ADDR_VAR 0 3
48818: PUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 310
48828: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48829: LD_VAR 0 1
48833: PPUSH
48834: LD_STRING \
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: PUSH
48864: LD_STRING E
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_VAR 0 3
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PPUSH
48900: CALL_OW 446
// end ;
48904: LD_VAR 0 2
48908: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48909: LD_INT 0
48911: PPUSH
48912: PPUSH
// if not driver or not IsInUnit ( driver ) then
48913: LD_VAR 0 1
48917: NOT
48918: PUSH
48919: LD_VAR 0 1
48923: PPUSH
48924: CALL_OW 310
48928: NOT
48929: OR
48930: IFFALSE 48934
// exit ;
48932: GO 49024
// vehicle := IsInUnit ( driver ) ;
48934: LD_ADDR_VAR 0 3
48938: PUSH
48939: LD_VAR 0 1
48943: PPUSH
48944: CALL_OW 310
48948: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48949: LD_VAR 0 1
48953: PPUSH
48954: LD_STRING \
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: PUSH
48984: LD_STRING E
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_VAR 0 3
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PPUSH
49020: CALL_OW 447
// end ;
49024: LD_VAR 0 2
49028: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49029: LD_INT 0
49031: PPUSH
49032: PPUSH
49033: PPUSH
// tmp := [ ] ;
49034: LD_ADDR_VAR 0 5
49038: PUSH
49039: EMPTY
49040: ST_TO_ADDR
// for i in units do
49041: LD_ADDR_VAR 0 4
49045: PUSH
49046: LD_VAR 0 1
49050: PUSH
49051: FOR_IN
49052: IFFALSE 49090
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49054: LD_ADDR_VAR 0 5
49058: PUSH
49059: LD_VAR 0 5
49063: PPUSH
49064: LD_VAR 0 5
49068: PUSH
49069: LD_INT 1
49071: PLUS
49072: PPUSH
49073: LD_VAR 0 4
49077: PPUSH
49078: CALL_OW 256
49082: PPUSH
49083: CALL_OW 2
49087: ST_TO_ADDR
49088: GO 49051
49090: POP
49091: POP
// if not tmp then
49092: LD_VAR 0 5
49096: NOT
49097: IFFALSE 49101
// exit ;
49099: GO 49149
// if asc then
49101: LD_VAR 0 2
49105: IFFALSE 49129
// result := SortListByListAsc ( units , tmp ) else
49107: LD_ADDR_VAR 0 3
49111: PUSH
49112: LD_VAR 0 1
49116: PPUSH
49117: LD_VAR 0 5
49121: PPUSH
49122: CALL_OW 76
49126: ST_TO_ADDR
49127: GO 49149
// result := SortListByListDesc ( units , tmp ) ;
49129: LD_ADDR_VAR 0 3
49133: PUSH
49134: LD_VAR 0 1
49138: PPUSH
49139: LD_VAR 0 5
49143: PPUSH
49144: CALL_OW 77
49148: ST_TO_ADDR
// end ;
49149: LD_VAR 0 3
49153: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49154: LD_INT 0
49156: PPUSH
49157: PPUSH
// task := GetTaskList ( mech ) ;
49158: LD_ADDR_VAR 0 4
49162: PUSH
49163: LD_VAR 0 1
49167: PPUSH
49168: CALL_OW 437
49172: ST_TO_ADDR
// if not task then
49173: LD_VAR 0 4
49177: NOT
49178: IFFALSE 49182
// exit ;
49180: GO 49224
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49182: LD_ADDR_VAR 0 3
49186: PUSH
49187: LD_VAR 0 4
49191: PUSH
49192: LD_INT 1
49194: ARRAY
49195: PUSH
49196: LD_INT 1
49198: ARRAY
49199: PUSH
49200: LD_STRING r
49202: EQUAL
49203: PUSH
49204: LD_VAR 0 4
49208: PUSH
49209: LD_INT 1
49211: ARRAY
49212: PUSH
49213: LD_INT 4
49215: ARRAY
49216: PUSH
49217: LD_VAR 0 2
49221: EQUAL
49222: AND
49223: ST_TO_ADDR
// end ;
49224: LD_VAR 0 3
49228: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49229: LD_INT 0
49231: PPUSH
// SetDir ( unit , d ) ;
49232: LD_VAR 0 1
49236: PPUSH
49237: LD_VAR 0 4
49241: PPUSH
49242: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49246: LD_ADDR_VAR 0 6
49250: PUSH
49251: LD_VAR 0 1
49255: PPUSH
49256: LD_VAR 0 2
49260: PPUSH
49261: LD_VAR 0 3
49265: PPUSH
49266: LD_VAR 0 5
49270: PPUSH
49271: CALL_OW 48
49275: ST_TO_ADDR
// end ;
49276: LD_VAR 0 6
49280: RET
// export function ToNaturalNumber ( number ) ; begin
49281: LD_INT 0
49283: PPUSH
// result := number div 1 ;
49284: LD_ADDR_VAR 0 2
49288: PUSH
49289: LD_VAR 0 1
49293: PUSH
49294: LD_INT 1
49296: DIV
49297: ST_TO_ADDR
// if number < 0 then
49298: LD_VAR 0 1
49302: PUSH
49303: LD_INT 0
49305: LESS
49306: IFFALSE 49316
// result := 0 ;
49308: LD_ADDR_VAR 0 2
49312: PUSH
49313: LD_INT 0
49315: ST_TO_ADDR
// end ;
49316: LD_VAR 0 2
49320: RET
// export function SortByClass ( units , class ) ; var un ; begin
49321: LD_INT 0
49323: PPUSH
49324: PPUSH
// if not units or not class then
49325: LD_VAR 0 1
49329: NOT
49330: PUSH
49331: LD_VAR 0 2
49335: NOT
49336: OR
49337: IFFALSE 49341
// exit ;
49339: GO 49436
// result := [ ] ;
49341: LD_ADDR_VAR 0 3
49345: PUSH
49346: EMPTY
49347: ST_TO_ADDR
// for un in units do
49348: LD_ADDR_VAR 0 4
49352: PUSH
49353: LD_VAR 0 1
49357: PUSH
49358: FOR_IN
49359: IFFALSE 49434
// if GetClass ( un ) = class then
49361: LD_VAR 0 4
49365: PPUSH
49366: CALL_OW 257
49370: PUSH
49371: LD_VAR 0 2
49375: EQUAL
49376: IFFALSE 49403
// result := Insert ( result , 1 , un ) else
49378: LD_ADDR_VAR 0 3
49382: PUSH
49383: LD_VAR 0 3
49387: PPUSH
49388: LD_INT 1
49390: PPUSH
49391: LD_VAR 0 4
49395: PPUSH
49396: CALL_OW 2
49400: ST_TO_ADDR
49401: GO 49432
// result := Replace ( result , result + 1 , un ) ;
49403: LD_ADDR_VAR 0 3
49407: PUSH
49408: LD_VAR 0 3
49412: PPUSH
49413: LD_VAR 0 3
49417: PUSH
49418: LD_INT 1
49420: PLUS
49421: PPUSH
49422: LD_VAR 0 4
49426: PPUSH
49427: CALL_OW 1
49431: ST_TO_ADDR
49432: GO 49358
49434: POP
49435: POP
// end ;
49436: LD_VAR 0 3
49440: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49441: LD_INT 0
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
49447: PPUSH
49448: PPUSH
49449: PPUSH
// result := [ ] ;
49450: LD_ADDR_VAR 0 4
49454: PUSH
49455: EMPTY
49456: ST_TO_ADDR
// if x - r < 0 then
49457: LD_VAR 0 1
49461: PUSH
49462: LD_VAR 0 3
49466: MINUS
49467: PUSH
49468: LD_INT 0
49470: LESS
49471: IFFALSE 49483
// min_x := 0 else
49473: LD_ADDR_VAR 0 8
49477: PUSH
49478: LD_INT 0
49480: ST_TO_ADDR
49481: GO 49499
// min_x := x - r ;
49483: LD_ADDR_VAR 0 8
49487: PUSH
49488: LD_VAR 0 1
49492: PUSH
49493: LD_VAR 0 3
49497: MINUS
49498: ST_TO_ADDR
// if y - r < 0 then
49499: LD_VAR 0 2
49503: PUSH
49504: LD_VAR 0 3
49508: MINUS
49509: PUSH
49510: LD_INT 0
49512: LESS
49513: IFFALSE 49525
// min_y := 0 else
49515: LD_ADDR_VAR 0 7
49519: PUSH
49520: LD_INT 0
49522: ST_TO_ADDR
49523: GO 49541
// min_y := y - r ;
49525: LD_ADDR_VAR 0 7
49529: PUSH
49530: LD_VAR 0 2
49534: PUSH
49535: LD_VAR 0 3
49539: MINUS
49540: ST_TO_ADDR
// max_x := x + r ;
49541: LD_ADDR_VAR 0 9
49545: PUSH
49546: LD_VAR 0 1
49550: PUSH
49551: LD_VAR 0 3
49555: PLUS
49556: ST_TO_ADDR
// max_y := y + r ;
49557: LD_ADDR_VAR 0 10
49561: PUSH
49562: LD_VAR 0 2
49566: PUSH
49567: LD_VAR 0 3
49571: PLUS
49572: ST_TO_ADDR
// for _x = min_x to max_x do
49573: LD_ADDR_VAR 0 5
49577: PUSH
49578: DOUBLE
49579: LD_VAR 0 8
49583: DEC
49584: ST_TO_ADDR
49585: LD_VAR 0 9
49589: PUSH
49590: FOR_TO
49591: IFFALSE 49692
// for _y = min_y to max_y do
49593: LD_ADDR_VAR 0 6
49597: PUSH
49598: DOUBLE
49599: LD_VAR 0 7
49603: DEC
49604: ST_TO_ADDR
49605: LD_VAR 0 10
49609: PUSH
49610: FOR_TO
49611: IFFALSE 49688
// begin if not ValidHex ( _x , _y ) then
49613: LD_VAR 0 5
49617: PPUSH
49618: LD_VAR 0 6
49622: PPUSH
49623: CALL_OW 488
49627: NOT
49628: IFFALSE 49632
// continue ;
49630: GO 49610
// if GetResourceTypeXY ( _x , _y ) then
49632: LD_VAR 0 5
49636: PPUSH
49637: LD_VAR 0 6
49641: PPUSH
49642: CALL_OW 283
49646: IFFALSE 49686
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49648: LD_ADDR_VAR 0 4
49652: PUSH
49653: LD_VAR 0 4
49657: PPUSH
49658: LD_VAR 0 4
49662: PUSH
49663: LD_INT 1
49665: PLUS
49666: PPUSH
49667: LD_VAR 0 5
49671: PUSH
49672: LD_VAR 0 6
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PPUSH
49681: CALL_OW 1
49685: ST_TO_ADDR
// end ;
49686: GO 49610
49688: POP
49689: POP
49690: GO 49590
49692: POP
49693: POP
// end ;
49694: LD_VAR 0 4
49698: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49699: LD_INT 0
49701: PPUSH
49702: PPUSH
49703: PPUSH
49704: PPUSH
49705: PPUSH
49706: PPUSH
49707: PPUSH
49708: PPUSH
// if not units then
49709: LD_VAR 0 1
49713: NOT
49714: IFFALSE 49718
// exit ;
49716: GO 50246
// result := UnitFilter ( units , [ f_ok ] ) ;
49718: LD_ADDR_VAR 0 3
49722: PUSH
49723: LD_VAR 0 1
49727: PPUSH
49728: LD_INT 50
49730: PUSH
49731: EMPTY
49732: LIST
49733: PPUSH
49734: CALL_OW 72
49738: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49739: LD_ADDR_VAR 0 8
49743: PUSH
49744: LD_VAR 0 1
49748: PUSH
49749: LD_INT 1
49751: ARRAY
49752: PPUSH
49753: CALL_OW 255
49757: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49758: LD_ADDR_VAR 0 10
49762: PUSH
49763: LD_INT 29
49765: PUSH
49766: LD_INT 91
49768: PUSH
49769: LD_INT 49
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: ST_TO_ADDR
// if not result then
49777: LD_VAR 0 3
49781: NOT
49782: IFFALSE 49786
// exit ;
49784: GO 50246
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49786: LD_ADDR_VAR 0 5
49790: PUSH
49791: LD_INT 81
49793: PUSH
49794: LD_VAR 0 8
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PPUSH
49803: CALL_OW 69
49807: ST_TO_ADDR
// for i in result do
49808: LD_ADDR_VAR 0 4
49812: PUSH
49813: LD_VAR 0 3
49817: PUSH
49818: FOR_IN
49819: IFFALSE 50244
// begin tag := GetTag ( i ) + 1 ;
49821: LD_ADDR_VAR 0 9
49825: PUSH
49826: LD_VAR 0 4
49830: PPUSH
49831: CALL_OW 110
49835: PUSH
49836: LD_INT 1
49838: PLUS
49839: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49840: LD_ADDR_VAR 0 7
49844: PUSH
49845: LD_VAR 0 4
49849: PPUSH
49850: CALL_OW 250
49854: PPUSH
49855: LD_VAR 0 4
49859: PPUSH
49860: CALL_OW 251
49864: PPUSH
49865: LD_INT 4
49867: PPUSH
49868: CALL 49441 0 3
49872: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49873: LD_VAR 0 4
49877: PPUSH
49878: CALL_OW 247
49882: PUSH
49883: LD_INT 2
49885: EQUAL
49886: PUSH
49887: LD_VAR 0 7
49891: PUSH
49892: LD_INT 2
49894: GREATER
49895: AND
49896: PUSH
49897: LD_VAR 0 4
49901: PPUSH
49902: CALL_OW 264
49906: PUSH
49907: LD_VAR 0 10
49911: IN
49912: NOT
49913: AND
49914: IFFALSE 49953
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49916: LD_VAR 0 4
49920: PPUSH
49921: LD_VAR 0 7
49925: PUSH
49926: LD_INT 1
49928: ARRAY
49929: PUSH
49930: LD_INT 1
49932: ARRAY
49933: PPUSH
49934: LD_VAR 0 7
49938: PUSH
49939: LD_INT 1
49941: ARRAY
49942: PUSH
49943: LD_INT 2
49945: ARRAY
49946: PPUSH
49947: CALL_OW 116
49951: GO 50242
// if path > tag then
49953: LD_VAR 0 2
49957: PUSH
49958: LD_VAR 0 9
49962: GREATER
49963: IFFALSE 50171
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49965: LD_ADDR_VAR 0 6
49969: PUSH
49970: LD_VAR 0 5
49974: PPUSH
49975: LD_INT 91
49977: PUSH
49978: LD_VAR 0 4
49982: PUSH
49983: LD_INT 8
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: PPUSH
49991: CALL_OW 72
49995: ST_TO_ADDR
// if nearEnemy then
49996: LD_VAR 0 6
50000: IFFALSE 50069
// begin if GetWeapon ( i ) = ru_time_lapser then
50002: LD_VAR 0 4
50006: PPUSH
50007: CALL_OW 264
50011: PUSH
50012: LD_INT 49
50014: EQUAL
50015: IFFALSE 50043
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50017: LD_VAR 0 4
50021: PPUSH
50022: LD_VAR 0 6
50026: PPUSH
50027: LD_VAR 0 4
50031: PPUSH
50032: CALL_OW 74
50036: PPUSH
50037: CALL_OW 112
50041: GO 50067
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50043: LD_VAR 0 4
50047: PPUSH
50048: LD_VAR 0 6
50052: PPUSH
50053: LD_VAR 0 4
50057: PPUSH
50058: CALL_OW 74
50062: PPUSH
50063: CALL 51317 0 2
// end else
50067: GO 50169
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50069: LD_VAR 0 4
50073: PPUSH
50074: LD_VAR 0 2
50078: PUSH
50079: LD_VAR 0 9
50083: ARRAY
50084: PUSH
50085: LD_INT 1
50087: ARRAY
50088: PPUSH
50089: LD_VAR 0 2
50093: PUSH
50094: LD_VAR 0 9
50098: ARRAY
50099: PUSH
50100: LD_INT 2
50102: ARRAY
50103: PPUSH
50104: CALL_OW 297
50108: PUSH
50109: LD_INT 6
50111: GREATER
50112: IFFALSE 50155
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50114: LD_VAR 0 4
50118: PPUSH
50119: LD_VAR 0 2
50123: PUSH
50124: LD_VAR 0 9
50128: ARRAY
50129: PUSH
50130: LD_INT 1
50132: ARRAY
50133: PPUSH
50134: LD_VAR 0 2
50138: PUSH
50139: LD_VAR 0 9
50143: ARRAY
50144: PUSH
50145: LD_INT 2
50147: ARRAY
50148: PPUSH
50149: CALL_OW 114
50153: GO 50169
// SetTag ( i , tag ) ;
50155: LD_VAR 0 4
50159: PPUSH
50160: LD_VAR 0 9
50164: PPUSH
50165: CALL_OW 109
// end else
50169: GO 50242
// if enemy then
50171: LD_VAR 0 5
50175: IFFALSE 50242
// begin if GetWeapon ( i ) = ru_time_lapser then
50177: LD_VAR 0 4
50181: PPUSH
50182: CALL_OW 264
50186: PUSH
50187: LD_INT 49
50189: EQUAL
50190: IFFALSE 50218
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50192: LD_VAR 0 4
50196: PPUSH
50197: LD_VAR 0 5
50201: PPUSH
50202: LD_VAR 0 4
50206: PPUSH
50207: CALL_OW 74
50211: PPUSH
50212: CALL_OW 112
50216: GO 50242
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50218: LD_VAR 0 4
50222: PPUSH
50223: LD_VAR 0 5
50227: PPUSH
50228: LD_VAR 0 4
50232: PPUSH
50233: CALL_OW 74
50237: PPUSH
50238: CALL 51317 0 2
// end ; end ;
50242: GO 49818
50244: POP
50245: POP
// end ;
50246: LD_VAR 0 3
50250: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50251: LD_INT 0
50253: PPUSH
50254: PPUSH
50255: PPUSH
// if not unit or IsInUnit ( unit ) then
50256: LD_VAR 0 1
50260: NOT
50261: PUSH
50262: LD_VAR 0 1
50266: PPUSH
50267: CALL_OW 310
50271: OR
50272: IFFALSE 50276
// exit ;
50274: GO 50367
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50276: LD_ADDR_VAR 0 4
50280: PUSH
50281: LD_VAR 0 1
50285: PPUSH
50286: CALL_OW 250
50290: PPUSH
50291: LD_VAR 0 2
50295: PPUSH
50296: LD_INT 1
50298: PPUSH
50299: CALL_OW 272
50303: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50304: LD_ADDR_VAR 0 5
50308: PUSH
50309: LD_VAR 0 1
50313: PPUSH
50314: CALL_OW 251
50318: PPUSH
50319: LD_VAR 0 2
50323: PPUSH
50324: LD_INT 1
50326: PPUSH
50327: CALL_OW 273
50331: ST_TO_ADDR
// if ValidHex ( x , y ) then
50332: LD_VAR 0 4
50336: PPUSH
50337: LD_VAR 0 5
50341: PPUSH
50342: CALL_OW 488
50346: IFFALSE 50367
// ComTurnXY ( unit , x , y ) ;
50348: LD_VAR 0 1
50352: PPUSH
50353: LD_VAR 0 4
50357: PPUSH
50358: LD_VAR 0 5
50362: PPUSH
50363: CALL_OW 118
// end ;
50367: LD_VAR 0 3
50371: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50372: LD_INT 0
50374: PPUSH
50375: PPUSH
// result := false ;
50376: LD_ADDR_VAR 0 3
50380: PUSH
50381: LD_INT 0
50383: ST_TO_ADDR
// if not units then
50384: LD_VAR 0 2
50388: NOT
50389: IFFALSE 50393
// exit ;
50391: GO 50438
// for i in units do
50393: LD_ADDR_VAR 0 4
50397: PUSH
50398: LD_VAR 0 2
50402: PUSH
50403: FOR_IN
50404: IFFALSE 50436
// if See ( side , i ) then
50406: LD_VAR 0 1
50410: PPUSH
50411: LD_VAR 0 4
50415: PPUSH
50416: CALL_OW 292
50420: IFFALSE 50434
// begin result := true ;
50422: LD_ADDR_VAR 0 3
50426: PUSH
50427: LD_INT 1
50429: ST_TO_ADDR
// exit ;
50430: POP
50431: POP
50432: GO 50438
// end ;
50434: GO 50403
50436: POP
50437: POP
// end ;
50438: LD_VAR 0 3
50442: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50443: LD_INT 0
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
// if not unit or not points then
50449: LD_VAR 0 1
50453: NOT
50454: PUSH
50455: LD_VAR 0 2
50459: NOT
50460: OR
50461: IFFALSE 50465
// exit ;
50463: GO 50555
// dist := 99999 ;
50465: LD_ADDR_VAR 0 5
50469: PUSH
50470: LD_INT 99999
50472: ST_TO_ADDR
// for i in points do
50473: LD_ADDR_VAR 0 4
50477: PUSH
50478: LD_VAR 0 2
50482: PUSH
50483: FOR_IN
50484: IFFALSE 50553
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50486: LD_ADDR_VAR 0 6
50490: PUSH
50491: LD_VAR 0 1
50495: PPUSH
50496: LD_VAR 0 4
50500: PUSH
50501: LD_INT 1
50503: ARRAY
50504: PPUSH
50505: LD_VAR 0 4
50509: PUSH
50510: LD_INT 2
50512: ARRAY
50513: PPUSH
50514: CALL_OW 297
50518: ST_TO_ADDR
// if tmpDist < dist then
50519: LD_VAR 0 6
50523: PUSH
50524: LD_VAR 0 5
50528: LESS
50529: IFFALSE 50551
// begin result := i ;
50531: LD_ADDR_VAR 0 3
50535: PUSH
50536: LD_VAR 0 4
50540: ST_TO_ADDR
// dist := tmpDist ;
50541: LD_ADDR_VAR 0 5
50545: PUSH
50546: LD_VAR 0 6
50550: ST_TO_ADDR
// end ; end ;
50551: GO 50483
50553: POP
50554: POP
// end ;
50555: LD_VAR 0 3
50559: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50560: LD_INT 0
50562: PPUSH
// uc_side := side ;
50563: LD_ADDR_OWVAR 20
50567: PUSH
50568: LD_VAR 0 1
50572: ST_TO_ADDR
// uc_nation := 3 ;
50573: LD_ADDR_OWVAR 21
50577: PUSH
50578: LD_INT 3
50580: ST_TO_ADDR
// vc_chassis := 25 ;
50581: LD_ADDR_OWVAR 37
50585: PUSH
50586: LD_INT 25
50588: ST_TO_ADDR
// vc_engine := engine_siberite ;
50589: LD_ADDR_OWVAR 39
50593: PUSH
50594: LD_INT 3
50596: ST_TO_ADDR
// vc_control := control_computer ;
50597: LD_ADDR_OWVAR 38
50601: PUSH
50602: LD_INT 3
50604: ST_TO_ADDR
// vc_weapon := 59 ;
50605: LD_ADDR_OWVAR 40
50609: PUSH
50610: LD_INT 59
50612: ST_TO_ADDR
// result := CreateVehicle ;
50613: LD_ADDR_VAR 0 5
50617: PUSH
50618: CALL_OW 45
50622: ST_TO_ADDR
// SetDir ( result , d ) ;
50623: LD_VAR 0 5
50627: PPUSH
50628: LD_VAR 0 4
50632: PPUSH
50633: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50637: LD_VAR 0 5
50641: PPUSH
50642: LD_VAR 0 2
50646: PPUSH
50647: LD_VAR 0 3
50651: PPUSH
50652: LD_INT 0
50654: PPUSH
50655: CALL_OW 48
// end ;
50659: LD_VAR 0 5
50663: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50664: LD_INT 0
50666: PPUSH
50667: PPUSH
50668: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50669: LD_ADDR_VAR 0 2
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50692: LD_VAR 0 1
50696: NOT
50697: PUSH
50698: LD_VAR 0 1
50702: PPUSH
50703: CALL_OW 264
50707: PUSH
50708: LD_INT 12
50710: PUSH
50711: LD_INT 51
50713: PUSH
50714: LD_INT 32
50716: PUSH
50717: LD_INT 89
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: IN
50726: NOT
50727: OR
50728: IFFALSE 50732
// exit ;
50730: GO 50830
// for i := 1 to 3 do
50732: LD_ADDR_VAR 0 3
50736: PUSH
50737: DOUBLE
50738: LD_INT 1
50740: DEC
50741: ST_TO_ADDR
50742: LD_INT 3
50744: PUSH
50745: FOR_TO
50746: IFFALSE 50828
// begin tmp := GetCargo ( cargo , i ) ;
50748: LD_ADDR_VAR 0 4
50752: PUSH
50753: LD_VAR 0 1
50757: PPUSH
50758: LD_VAR 0 3
50762: PPUSH
50763: CALL_OW 289
50767: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50768: LD_ADDR_VAR 0 2
50772: PUSH
50773: LD_VAR 0 2
50777: PPUSH
50778: LD_VAR 0 3
50782: PPUSH
50783: LD_VAR 0 4
50787: PPUSH
50788: CALL_OW 1
50792: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50793: LD_ADDR_VAR 0 2
50797: PUSH
50798: LD_VAR 0 2
50802: PPUSH
50803: LD_INT 4
50805: PPUSH
50806: LD_VAR 0 2
50810: PUSH
50811: LD_INT 4
50813: ARRAY
50814: PUSH
50815: LD_VAR 0 4
50819: PLUS
50820: PPUSH
50821: CALL_OW 1
50825: ST_TO_ADDR
// end ;
50826: GO 50745
50828: POP
50829: POP
// end ;
50830: LD_VAR 0 2
50834: RET
// export function Length ( array ) ; begin
50835: LD_INT 0
50837: PPUSH
// result := array + 0 ;
50838: LD_ADDR_VAR 0 2
50842: PUSH
50843: LD_VAR 0 1
50847: PUSH
50848: LD_INT 0
50850: PLUS
50851: ST_TO_ADDR
// end ;
50852: LD_VAR 0 2
50856: RET
// export function PrepareArray ( array ) ; begin
50857: LD_INT 0
50859: PPUSH
// result := array diff 0 ;
50860: LD_ADDR_VAR 0 2
50864: PUSH
50865: LD_VAR 0 1
50869: PUSH
50870: LD_INT 0
50872: DIFF
50873: ST_TO_ADDR
// if not result [ 1 ] then
50874: LD_VAR 0 2
50878: PUSH
50879: LD_INT 1
50881: ARRAY
50882: NOT
50883: IFFALSE 50903
// result := Delete ( result , 1 ) ;
50885: LD_ADDR_VAR 0 2
50889: PUSH
50890: LD_VAR 0 2
50894: PPUSH
50895: LD_INT 1
50897: PPUSH
50898: CALL_OW 3
50902: ST_TO_ADDR
// end ;
50903: LD_VAR 0 2
50907: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50908: LD_INT 0
50910: PPUSH
50911: PPUSH
50912: PPUSH
50913: PPUSH
// sibRocketRange := 25 ;
50914: LD_ADDR_VAR 0 6
50918: PUSH
50919: LD_INT 25
50921: ST_TO_ADDR
// result := false ;
50922: LD_ADDR_VAR 0 4
50926: PUSH
50927: LD_INT 0
50929: ST_TO_ADDR
// for i := 0 to 5 do
50930: LD_ADDR_VAR 0 5
50934: PUSH
50935: DOUBLE
50936: LD_INT 0
50938: DEC
50939: ST_TO_ADDR
50940: LD_INT 5
50942: PUSH
50943: FOR_TO
50944: IFFALSE 51011
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50946: LD_VAR 0 1
50950: PPUSH
50951: LD_VAR 0 5
50955: PPUSH
50956: LD_VAR 0 6
50960: PPUSH
50961: CALL_OW 272
50965: PPUSH
50966: LD_VAR 0 2
50970: PPUSH
50971: LD_VAR 0 5
50975: PPUSH
50976: LD_VAR 0 6
50980: PPUSH
50981: CALL_OW 273
50985: PPUSH
50986: LD_VAR 0 3
50990: PPUSH
50991: CALL_OW 309
50995: IFFALSE 51009
// begin result := true ;
50997: LD_ADDR_VAR 0 4
51001: PUSH
51002: LD_INT 1
51004: ST_TO_ADDR
// exit ;
51005: POP
51006: POP
51007: GO 51013
// end ;
51009: GO 50943
51011: POP
51012: POP
// end ;
51013: LD_VAR 0 4
51017: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51018: LD_INT 0
51020: PPUSH
51021: PPUSH
51022: PPUSH
// if btype = b_depot then
51023: LD_VAR 0 2
51027: PUSH
51028: LD_INT 0
51030: EQUAL
51031: IFFALSE 51043
// begin result := true ;
51033: LD_ADDR_VAR 0 3
51037: PUSH
51038: LD_INT 1
51040: ST_TO_ADDR
// exit ;
51041: GO 51159
// end ; pom := GetBase ( depot ) ;
51043: LD_ADDR_VAR 0 4
51047: PUSH
51048: LD_VAR 0 1
51052: PPUSH
51053: CALL_OW 274
51057: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51058: LD_ADDR_VAR 0 5
51062: PUSH
51063: LD_VAR 0 2
51067: PPUSH
51068: LD_VAR 0 1
51072: PPUSH
51073: CALL_OW 248
51077: PPUSH
51078: CALL_OW 450
51082: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51083: LD_ADDR_VAR 0 3
51087: PUSH
51088: LD_VAR 0 4
51092: PPUSH
51093: LD_INT 1
51095: PPUSH
51096: CALL_OW 275
51100: PUSH
51101: LD_VAR 0 5
51105: PUSH
51106: LD_INT 1
51108: ARRAY
51109: GREATEREQUAL
51110: PUSH
51111: LD_VAR 0 4
51115: PPUSH
51116: LD_INT 2
51118: PPUSH
51119: CALL_OW 275
51123: PUSH
51124: LD_VAR 0 5
51128: PUSH
51129: LD_INT 2
51131: ARRAY
51132: GREATEREQUAL
51133: AND
51134: PUSH
51135: LD_VAR 0 4
51139: PPUSH
51140: LD_INT 3
51142: PPUSH
51143: CALL_OW 275
51147: PUSH
51148: LD_VAR 0 5
51152: PUSH
51153: LD_INT 3
51155: ARRAY
51156: GREATEREQUAL
51157: AND
51158: ST_TO_ADDR
// end ;
51159: LD_VAR 0 3
51163: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51164: LD_INT 0
51166: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51167: LD_VAR 0 1
51171: PPUSH
51172: LD_VAR 0 2
51176: PPUSH
51177: LD_INT 0
51179: PPUSH
51180: LD_INT 0
51182: PPUSH
51183: LD_INT 1
51185: PPUSH
51186: LD_INT 0
51188: PPUSH
51189: CALL_OW 587
// end ;
51193: LD_VAR 0 3
51197: RET
// export function CenterOnNow ( unit ) ; begin
51198: LD_INT 0
51200: PPUSH
// result := IsInUnit ( unit ) ;
51201: LD_ADDR_VAR 0 2
51205: PUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: CALL_OW 310
51215: ST_TO_ADDR
// if not result then
51216: LD_VAR 0 2
51220: NOT
51221: IFFALSE 51233
// result := unit ;
51223: LD_ADDR_VAR 0 2
51227: PUSH
51228: LD_VAR 0 1
51232: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51233: LD_VAR 0 1
51237: PPUSH
51238: CALL_OW 87
// end ;
51242: LD_VAR 0 2
51246: RET
// export function ComMoveHex ( unit , hex ) ; begin
51247: LD_INT 0
51249: PPUSH
// if not hex then
51250: LD_VAR 0 2
51254: NOT
51255: IFFALSE 51259
// exit ;
51257: GO 51312
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51259: LD_VAR 0 2
51263: PUSH
51264: LD_INT 1
51266: ARRAY
51267: PPUSH
51268: LD_VAR 0 2
51272: PUSH
51273: LD_INT 2
51275: ARRAY
51276: PPUSH
51277: CALL_OW 428
51281: IFFALSE 51285
// exit ;
51283: GO 51312
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51285: LD_VAR 0 1
51289: PPUSH
51290: LD_VAR 0 2
51294: PUSH
51295: LD_INT 1
51297: ARRAY
51298: PPUSH
51299: LD_VAR 0 2
51303: PUSH
51304: LD_INT 2
51306: ARRAY
51307: PPUSH
51308: CALL_OW 111
// end ;
51312: LD_VAR 0 3
51316: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51317: LD_INT 0
51319: PPUSH
51320: PPUSH
51321: PPUSH
// if not unit or not enemy then
51322: LD_VAR 0 1
51326: NOT
51327: PUSH
51328: LD_VAR 0 2
51332: NOT
51333: OR
51334: IFFALSE 51338
// exit ;
51336: GO 51462
// x := GetX ( enemy ) ;
51338: LD_ADDR_VAR 0 4
51342: PUSH
51343: LD_VAR 0 2
51347: PPUSH
51348: CALL_OW 250
51352: ST_TO_ADDR
// y := GetY ( enemy ) ;
51353: LD_ADDR_VAR 0 5
51357: PUSH
51358: LD_VAR 0 2
51362: PPUSH
51363: CALL_OW 251
51367: ST_TO_ADDR
// if ValidHex ( x , y ) then
51368: LD_VAR 0 4
51372: PPUSH
51373: LD_VAR 0 5
51377: PPUSH
51378: CALL_OW 488
51382: IFFALSE 51462
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51384: LD_VAR 0 2
51388: PPUSH
51389: CALL_OW 247
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: IN
51404: PUSH
51405: LD_VAR 0 1
51409: PPUSH
51410: CALL_OW 255
51414: PPUSH
51415: LD_VAR 0 2
51419: PPUSH
51420: CALL_OW 292
51424: OR
51425: IFFALSE 51443
// ComAttackUnit ( unit , enemy ) else
51427: LD_VAR 0 1
51431: PPUSH
51432: LD_VAR 0 2
51436: PPUSH
51437: CALL_OW 115
51441: GO 51462
// ComAgressiveMove ( unit , x , y ) ;
51443: LD_VAR 0 1
51447: PPUSH
51448: LD_VAR 0 4
51452: PPUSH
51453: LD_VAR 0 5
51457: PPUSH
51458: CALL_OW 114
// end ;
51462: LD_VAR 0 3
51466: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51467: LD_INT 0
51469: PPUSH
51470: PPUSH
51471: PPUSH
// list := AreaToList ( area , 0 ) ;
51472: LD_ADDR_VAR 0 5
51476: PUSH
51477: LD_VAR 0 1
51481: PPUSH
51482: LD_INT 0
51484: PPUSH
51485: CALL_OW 517
51489: ST_TO_ADDR
// if not list then
51490: LD_VAR 0 5
51494: NOT
51495: IFFALSE 51499
// exit ;
51497: GO 51629
// if all then
51499: LD_VAR 0 2
51503: IFFALSE 51591
// begin for i := 1 to list [ 1 ] do
51505: LD_ADDR_VAR 0 4
51509: PUSH
51510: DOUBLE
51511: LD_INT 1
51513: DEC
51514: ST_TO_ADDR
51515: LD_VAR 0 5
51519: PUSH
51520: LD_INT 1
51522: ARRAY
51523: PUSH
51524: FOR_TO
51525: IFFALSE 51587
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51527: LD_ADDR_VAR 0 3
51531: PUSH
51532: LD_VAR 0 3
51536: PPUSH
51537: LD_VAR 0 3
51541: PUSH
51542: LD_INT 1
51544: PLUS
51545: PPUSH
51546: LD_VAR 0 5
51550: PUSH
51551: LD_INT 1
51553: ARRAY
51554: PUSH
51555: LD_VAR 0 4
51559: ARRAY
51560: PUSH
51561: LD_VAR 0 5
51565: PUSH
51566: LD_INT 2
51568: ARRAY
51569: PUSH
51570: LD_VAR 0 4
51574: ARRAY
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PPUSH
51580: CALL_OW 1
51584: ST_TO_ADDR
51585: GO 51524
51587: POP
51588: POP
// exit ;
51589: GO 51629
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51591: LD_ADDR_VAR 0 3
51595: PUSH
51596: LD_VAR 0 5
51600: PUSH
51601: LD_INT 1
51603: ARRAY
51604: PUSH
51605: LD_INT 1
51607: ARRAY
51608: PUSH
51609: LD_VAR 0 5
51613: PUSH
51614: LD_INT 2
51616: ARRAY
51617: PUSH
51618: LD_INT 1
51620: ARRAY
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: ST_TO_ADDR
// end ;
51629: LD_VAR 0 3
51633: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51634: LD_INT 0
51636: PPUSH
51637: PPUSH
// list := AreaToList ( area , 0 ) ;
51638: LD_ADDR_VAR 0 4
51642: PUSH
51643: LD_VAR 0 1
51647: PPUSH
51648: LD_INT 0
51650: PPUSH
51651: CALL_OW 517
51655: ST_TO_ADDR
// if not list then
51656: LD_VAR 0 4
51660: NOT
51661: IFFALSE 51665
// exit ;
51663: GO 51706
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51665: LD_ADDR_VAR 0 3
51669: PUSH
51670: LD_VAR 0 4
51674: PUSH
51675: LD_INT 1
51677: ARRAY
51678: PUSH
51679: LD_INT 1
51681: ARRAY
51682: PUSH
51683: LD_VAR 0 4
51687: PUSH
51688: LD_INT 2
51690: ARRAY
51691: PUSH
51692: LD_INT 1
51694: ARRAY
51695: PUSH
51696: LD_VAR 0 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// end ;
51706: LD_VAR 0 3
51710: RET
// export function First ( array ) ; begin
51711: LD_INT 0
51713: PPUSH
// if not array then
51714: LD_VAR 0 1
51718: NOT
51719: IFFALSE 51723
// exit ;
51721: GO 51737
// result := array [ 1 ] ;
51723: LD_ADDR_VAR 0 2
51727: PUSH
51728: LD_VAR 0 1
51732: PUSH
51733: LD_INT 1
51735: ARRAY
51736: ST_TO_ADDR
// end ;
51737: LD_VAR 0 2
51741: RET
// export function Last ( array ) ; begin
51742: LD_INT 0
51744: PPUSH
// if not array then
51745: LD_VAR 0 1
51749: NOT
51750: IFFALSE 51754
// exit ;
51752: GO 51770
// result := array [ array ] ;
51754: LD_ADDR_VAR 0 2
51758: PUSH
51759: LD_VAR 0 1
51763: PUSH
51764: LD_VAR 0 1
51768: ARRAY
51769: ST_TO_ADDR
// end ;
51770: LD_VAR 0 2
51774: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51775: LD_INT 0
51777: PPUSH
51778: PPUSH
// result := [ ] ;
51779: LD_ADDR_VAR 0 5
51783: PUSH
51784: EMPTY
51785: ST_TO_ADDR
// if not array then
51786: LD_VAR 0 1
51790: NOT
51791: IFFALSE 51795
// exit ;
51793: GO 51907
// for i := 1 to array do
51795: LD_ADDR_VAR 0 6
51799: PUSH
51800: DOUBLE
51801: LD_INT 1
51803: DEC
51804: ST_TO_ADDR
51805: LD_VAR 0 1
51809: PUSH
51810: FOR_TO
51811: IFFALSE 51905
// if array [ i ] [ index ] = value then
51813: LD_VAR 0 1
51817: PUSH
51818: LD_VAR 0 6
51822: ARRAY
51823: PUSH
51824: LD_VAR 0 2
51828: ARRAY
51829: PUSH
51830: LD_VAR 0 3
51834: EQUAL
51835: IFFALSE 51903
// begin if indexColumn then
51837: LD_VAR 0 4
51841: IFFALSE 51877
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51843: LD_ADDR_VAR 0 5
51847: PUSH
51848: LD_VAR 0 5
51852: PPUSH
51853: LD_VAR 0 1
51857: PUSH
51858: LD_VAR 0 6
51862: ARRAY
51863: PUSH
51864: LD_VAR 0 4
51868: ARRAY
51869: PPUSH
51870: CALL 47089 0 2
51874: ST_TO_ADDR
51875: GO 51903
// result := Join ( result , array [ i ] ) ;
51877: LD_ADDR_VAR 0 5
51881: PUSH
51882: LD_VAR 0 5
51886: PPUSH
51887: LD_VAR 0 1
51891: PUSH
51892: LD_VAR 0 6
51896: ARRAY
51897: PPUSH
51898: CALL 47089 0 2
51902: ST_TO_ADDR
// end ;
51903: GO 51810
51905: POP
51906: POP
// end ;
51907: LD_VAR 0 5
51911: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51912: LD_INT 0
51914: PPUSH
// if not vehicles or not parkingPoint then
51915: LD_VAR 0 1
51919: NOT
51920: PUSH
51921: LD_VAR 0 2
51925: NOT
51926: OR
51927: IFFALSE 51931
// exit ;
51929: GO 52029
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51931: LD_ADDR_VAR 0 1
51935: PUSH
51936: LD_VAR 0 1
51940: PPUSH
51941: LD_INT 50
51943: PUSH
51944: EMPTY
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: LD_INT 92
51952: PUSH
51953: LD_VAR 0 2
51957: PUSH
51958: LD_INT 1
51960: ARRAY
51961: PUSH
51962: LD_VAR 0 2
51966: PUSH
51967: LD_INT 2
51969: ARRAY
51970: PUSH
51971: LD_INT 8
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PPUSH
51988: CALL_OW 72
51992: ST_TO_ADDR
// if not vehicles then
51993: LD_VAR 0 1
51997: NOT
51998: IFFALSE 52002
// exit ;
52000: GO 52029
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52002: LD_VAR 0 1
52006: PPUSH
52007: LD_VAR 0 2
52011: PUSH
52012: LD_INT 1
52014: ARRAY
52015: PPUSH
52016: LD_VAR 0 2
52020: PUSH
52021: LD_INT 2
52023: ARRAY
52024: PPUSH
52025: CALL_OW 111
// end ;
52029: LD_VAR 0 3
52033: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52034: LD_INT 0
52036: PPUSH
52037: PPUSH
52038: PPUSH
// if not side or not area then
52039: LD_VAR 0 1
52043: NOT
52044: PUSH
52045: LD_VAR 0 2
52049: NOT
52050: OR
52051: IFFALSE 52055
// exit ;
52053: GO 52174
// tmp := AreaToList ( area , 0 ) ;
52055: LD_ADDR_VAR 0 5
52059: PUSH
52060: LD_VAR 0 2
52064: PPUSH
52065: LD_INT 0
52067: PPUSH
52068: CALL_OW 517
52072: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52073: LD_ADDR_VAR 0 4
52077: PUSH
52078: DOUBLE
52079: LD_INT 1
52081: DEC
52082: ST_TO_ADDR
52083: LD_VAR 0 5
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PUSH
52092: FOR_TO
52093: IFFALSE 52172
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52095: LD_VAR 0 5
52099: PUSH
52100: LD_INT 1
52102: ARRAY
52103: PUSH
52104: LD_VAR 0 4
52108: ARRAY
52109: PPUSH
52110: LD_VAR 0 5
52114: PUSH
52115: LD_INT 2
52117: ARRAY
52118: PUSH
52119: LD_VAR 0 4
52123: ARRAY
52124: PPUSH
52125: CALL_OW 351
52129: IFFALSE 52170
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52131: LD_VAR 0 5
52135: PUSH
52136: LD_INT 1
52138: ARRAY
52139: PUSH
52140: LD_VAR 0 4
52144: ARRAY
52145: PPUSH
52146: LD_VAR 0 5
52150: PUSH
52151: LD_INT 2
52153: ARRAY
52154: PUSH
52155: LD_VAR 0 4
52159: ARRAY
52160: PPUSH
52161: LD_VAR 0 1
52165: PPUSH
52166: CALL_OW 244
// end ;
52170: GO 52092
52172: POP
52173: POP
// end ; end_of_file
52174: LD_VAR 0 3
52178: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52179: LD_VAR 0 1
52183: PUSH
52184: LD_INT 200
52186: DOUBLE
52187: GREATEREQUAL
52188: IFFALSE 52196
52190: LD_INT 299
52192: DOUBLE
52193: LESSEQUAL
52194: IFTRUE 52198
52196: GO 52230
52198: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52199: LD_VAR 0 1
52203: PPUSH
52204: LD_VAR 0 2
52208: PPUSH
52209: LD_VAR 0 3
52213: PPUSH
52214: LD_VAR 0 4
52218: PPUSH
52219: LD_VAR 0 5
52223: PPUSH
52224: CALL 53007 0 5
52228: GO 52307
52230: LD_INT 300
52232: DOUBLE
52233: GREATEREQUAL
52234: IFFALSE 52242
52236: LD_INT 399
52238: DOUBLE
52239: LESSEQUAL
52240: IFTRUE 52244
52242: GO 52306
52244: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52245: LD_VAR 0 1
52249: PPUSH
52250: LD_VAR 0 2
52254: PPUSH
52255: LD_VAR 0 3
52259: PPUSH
52260: LD_VAR 0 4
52264: PPUSH
52265: LD_VAR 0 5
52269: PPUSH
52270: LD_VAR 0 6
52274: PPUSH
52275: LD_VAR 0 7
52279: PPUSH
52280: LD_VAR 0 8
52284: PPUSH
52285: LD_VAR 0 9
52289: PPUSH
52290: LD_VAR 0 10
52294: PPUSH
52295: LD_VAR 0 11
52299: PPUSH
52300: CALL 59934 0 11
52304: GO 52307
52306: POP
// end ;
52307: PPOPN 11
52309: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52310: LD_VAR 0 1
52314: PPUSH
52315: LD_VAR 0 2
52319: PPUSH
52320: LD_VAR 0 3
52324: PPUSH
52325: LD_VAR 0 4
52329: PPUSH
52330: LD_VAR 0 5
52334: PPUSH
52335: CALL 52392 0 5
// end ; end_of_file
52339: PPOPN 5
52341: END
// export function SOS_UnitDestroyed ( un ) ; begin
52342: LD_INT 0
52344: PPUSH
// ComRadiation ( un ) ;
52345: LD_VAR 0 1
52349: PPUSH
52350: CALL 53411 0 1
// end ;
52354: LD_VAR 0 2
52358: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52359: LD_INT 0
52361: PPUSH
// ComRadiation ( un ) ;
52362: LD_VAR 0 1
52366: PPUSH
52367: CALL 53411 0 1
// end ;
52371: LD_VAR 0 2
52375: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52376: LD_INT 0
52378: PPUSH
// end ;
52379: LD_VAR 0 4
52383: RET
// export function SOS_Command ( cmd ) ; begin
52384: LD_INT 0
52386: PPUSH
// end ;
52387: LD_VAR 0 2
52391: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52392: LD_INT 0
52394: PPUSH
// end ;
52395: LD_VAR 0 6
52399: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
52400: LD_INT 0
52402: PPUSH
52403: PPUSH
52404: PPUSH
52405: PPUSH
// if not vehicle or not factory then
52406: LD_VAR 0 1
52410: NOT
52411: PUSH
52412: LD_VAR 0 2
52416: NOT
52417: OR
52418: IFFALSE 52422
// exit ;
52420: GO 53002
// if not factoryWaypoints then
52422: LD_EXP 55
52426: NOT
52427: IFFALSE 52431
// exit ;
52429: GO 53002
// for i := 1 to Count ( factoryWaypoints ) do
52431: LD_ADDR_VAR 0 4
52435: PUSH
52436: DOUBLE
52437: LD_INT 1
52439: DEC
52440: ST_TO_ADDR
52441: LD_EXP 55
52445: PPUSH
52446: CALL 11480 0 1
52450: PUSH
52451: FOR_TO
52452: IFFALSE 53000
// if factoryWaypoints [ i ] [ 2 ] = factory then
52454: LD_EXP 55
52458: PUSH
52459: LD_VAR 0 4
52463: ARRAY
52464: PUSH
52465: LD_INT 2
52467: ARRAY
52468: PUSH
52469: LD_VAR 0 2
52473: EQUAL
52474: IFFALSE 52998
// begin if GetControl ( vehicle ) = control_manual then
52476: LD_VAR 0 1
52480: PPUSH
52481: CALL_OW 263
52485: PUSH
52486: LD_INT 1
52488: EQUAL
52489: IFFALSE 52851
// begin driver := IsDrivenBy ( vehicle ) ;
52491: LD_ADDR_VAR 0 5
52495: PUSH
52496: LD_VAR 0 1
52500: PPUSH
52501: CALL_OW 311
52505: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
52506: LD_VAR 0 5
52510: PUSH
52511: LD_EXP 56
52515: IN
52516: PUSH
52517: LD_VAR 0 1
52521: PUSH
52522: LD_EXP 56
52526: IN
52527: OR
52528: IFFALSE 52534
// exit ;
52530: POP
52531: POP
52532: GO 53002
// if not HasTask ( driver ) then
52534: LD_VAR 0 5
52538: PPUSH
52539: CALL_OW 314
52543: NOT
52544: IFFALSE 52849
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
52546: LD_ADDR_EXP 56
52550: PUSH
52551: LD_EXP 56
52555: PPUSH
52556: LD_VAR 0 5
52560: PPUSH
52561: CALL 47089 0 2
52565: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
52566: LD_ADDR_EXP 56
52570: PUSH
52571: LD_EXP 56
52575: PPUSH
52576: LD_VAR 0 1
52580: PPUSH
52581: CALL 47089 0 2
52585: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52586: LD_ADDR_VAR 0 6
52590: PUSH
52591: LD_EXP 55
52595: PUSH
52596: LD_VAR 0 4
52600: ARRAY
52601: PUSH
52602: LD_INT 3
52604: ARRAY
52605: PPUSH
52606: LD_EXP 55
52610: PUSH
52611: LD_VAR 0 4
52615: ARRAY
52616: PUSH
52617: LD_INT 4
52619: ARRAY
52620: PPUSH
52621: CALL_OW 428
52625: ST_TO_ADDR
// if hex then
52626: LD_VAR 0 6
52630: IFFALSE 52648
// ComMoveUnit ( driver , hex ) else
52632: LD_VAR 0 5
52636: PPUSH
52637: LD_VAR 0 6
52641: PPUSH
52642: CALL_OW 112
52646: GO 52732
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
52648: LD_VAR 0 1
52652: PPUSH
52653: LD_EXP 55
52657: PUSH
52658: LD_VAR 0 4
52662: ARRAY
52663: PUSH
52664: LD_INT 3
52666: ARRAY
52667: PPUSH
52668: LD_EXP 55
52672: PUSH
52673: LD_VAR 0 4
52677: ARRAY
52678: PUSH
52679: LD_INT 4
52681: ARRAY
52682: PPUSH
52683: CALL_OW 297
52687: PUSH
52688: LD_INT 0
52690: GREATER
52691: IFFALSE 52732
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52693: LD_VAR 0 5
52697: PPUSH
52698: LD_EXP 55
52702: PUSH
52703: LD_VAR 0 4
52707: ARRAY
52708: PUSH
52709: LD_INT 3
52711: ARRAY
52712: PPUSH
52713: LD_EXP 55
52717: PUSH
52718: LD_VAR 0 4
52722: ARRAY
52723: PUSH
52724: LD_INT 4
52726: ARRAY
52727: PPUSH
52728: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52732: LD_VAR 0 5
52736: PPUSH
52737: CALL_OW 181
// if Multiplayer then
52741: LD_OWVAR 4
52745: IFFALSE 52794
// begin repeat wait ( 10 ) ;
52747: LD_INT 10
52749: PPUSH
52750: CALL_OW 67
// until not IsInUnit ( driver ) ;
52754: LD_VAR 0 5
52758: PPUSH
52759: CALL_OW 310
52763: NOT
52764: IFFALSE 52747
// if not HasTask ( driver ) then
52766: LD_VAR 0 5
52770: PPUSH
52771: CALL_OW 314
52775: NOT
52776: IFFALSE 52792
// ComEnterUnit ( driver , factory ) ;
52778: LD_VAR 0 5
52782: PPUSH
52783: LD_VAR 0 2
52787: PPUSH
52788: CALL_OW 120
// end else
52792: GO 52808
// AddComEnterUnit ( driver , factory ) ;
52794: LD_VAR 0 5
52798: PPUSH
52799: LD_VAR 0 2
52803: PPUSH
52804: CALL_OW 180
// wait ( 0 0$1 ) ;
52808: LD_INT 35
52810: PPUSH
52811: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
52815: LD_ADDR_EXP 56
52819: PUSH
52820: LD_EXP 56
52824: PUSH
52825: LD_VAR 0 5
52829: DIFF
52830: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
52831: LD_ADDR_EXP 56
52835: PUSH
52836: LD_EXP 56
52840: PUSH
52841: LD_VAR 0 1
52845: DIFF
52846: ST_TO_ADDR
// break ;
52847: GO 53000
// end ; end else
52849: GO 52998
// if GetControl ( vehicle ) = control_remote then
52851: LD_VAR 0 1
52855: PPUSH
52856: CALL_OW 263
52860: PUSH
52861: LD_INT 2
52863: EQUAL
52864: IFFALSE 52950
// begin wait ( 0 0$2 ) ;
52866: LD_INT 70
52868: PPUSH
52869: CALL_OW 67
// repeat wait ( 10 ) ;
52873: LD_INT 10
52875: PPUSH
52876: CALL_OW 67
// Connect ( vehicle ) ;
52880: LD_VAR 0 1
52884: PPUSH
52885: CALL 17686 0 1
// until IsControledBy ( vehicle ) ;
52889: LD_VAR 0 1
52893: PPUSH
52894: CALL_OW 312
52898: IFFALSE 52873
// wait ( 10 ) ;
52900: LD_INT 10
52902: PPUSH
52903: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52907: LD_VAR 0 1
52911: PPUSH
52912: LD_EXP 55
52916: PUSH
52917: LD_VAR 0 4
52921: ARRAY
52922: PUSH
52923: LD_INT 3
52925: ARRAY
52926: PPUSH
52927: LD_EXP 55
52931: PUSH
52932: LD_VAR 0 4
52936: ARRAY
52937: PUSH
52938: LD_INT 4
52940: ARRAY
52941: PPUSH
52942: CALL_OW 111
// break ;
52946: GO 53000
// end else
52948: GO 52998
// begin wait ( 0 0$3 ) ;
52950: LD_INT 105
52952: PPUSH
52953: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52957: LD_VAR 0 1
52961: PPUSH
52962: LD_EXP 55
52966: PUSH
52967: LD_VAR 0 4
52971: ARRAY
52972: PUSH
52973: LD_INT 3
52975: ARRAY
52976: PPUSH
52977: LD_EXP 55
52981: PUSH
52982: LD_VAR 0 4
52986: ARRAY
52987: PUSH
52988: LD_INT 4
52990: ARRAY
52991: PPUSH
52992: CALL_OW 111
// break ;
52996: GO 53000
// end ; end ;
52998: GO 52451
53000: POP
53001: POP
// end ;
53002: LD_VAR 0 3
53006: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53007: LD_INT 0
53009: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53010: LD_VAR 0 1
53014: PUSH
53015: LD_INT 250
53017: EQUAL
53018: PUSH
53019: LD_VAR 0 2
53023: PPUSH
53024: CALL_OW 264
53028: PUSH
53029: LD_INT 81
53031: EQUAL
53032: AND
53033: IFFALSE 53054
// MinerPlaceMine ( unit , x , y ) ;
53035: LD_VAR 0 2
53039: PPUSH
53040: LD_VAR 0 4
53044: PPUSH
53045: LD_VAR 0 5
53049: PPUSH
53050: CALL 56146 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53054: LD_VAR 0 1
53058: PUSH
53059: LD_INT 251
53061: EQUAL
53062: PUSH
53063: LD_VAR 0 2
53067: PPUSH
53068: CALL_OW 264
53072: PUSH
53073: LD_INT 81
53075: EQUAL
53076: AND
53077: IFFALSE 53098
// MinerDetonateMine ( unit , x , y ) ;
53079: LD_VAR 0 2
53083: PPUSH
53084: LD_VAR 0 4
53088: PPUSH
53089: LD_VAR 0 5
53093: PPUSH
53094: CALL 56421 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53098: LD_VAR 0 1
53102: PUSH
53103: LD_INT 252
53105: EQUAL
53106: PUSH
53107: LD_VAR 0 2
53111: PPUSH
53112: CALL_OW 264
53116: PUSH
53117: LD_INT 81
53119: EQUAL
53120: AND
53121: IFFALSE 53142
// MinerCreateMinefield ( unit , x , y ) ;
53123: LD_VAR 0 2
53127: PPUSH
53128: LD_VAR 0 4
53132: PPUSH
53133: LD_VAR 0 5
53137: PPUSH
53138: CALL 56838 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53142: LD_VAR 0 1
53146: PUSH
53147: LD_INT 253
53149: EQUAL
53150: PUSH
53151: LD_VAR 0 2
53155: PPUSH
53156: CALL_OW 257
53160: PUSH
53161: LD_INT 5
53163: EQUAL
53164: AND
53165: IFFALSE 53186
// ComBinocular ( unit , x , y ) ;
53167: LD_VAR 0 2
53171: PPUSH
53172: LD_VAR 0 4
53176: PPUSH
53177: LD_VAR 0 5
53181: PPUSH
53182: CALL 57207 0 3
// if selectedUnit then
53186: LD_VAR 0 3
53190: IFFALSE 53246
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53192: LD_VAR 0 1
53196: PUSH
53197: LD_INT 254
53199: EQUAL
53200: PUSH
53201: LD_VAR 0 2
53205: PPUSH
53206: CALL_OW 264
53210: PUSH
53211: LD_INT 99
53213: EQUAL
53214: AND
53215: PUSH
53216: LD_VAR 0 3
53220: PPUSH
53221: CALL_OW 263
53225: PUSH
53226: LD_INT 3
53228: EQUAL
53229: AND
53230: IFFALSE 53246
// HackDestroyVehicle ( unit , selectedUnit ) ;
53232: LD_VAR 0 2
53236: PPUSH
53237: LD_VAR 0 3
53241: PPUSH
53242: CALL 55510 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53246: LD_VAR 0 1
53250: PUSH
53251: LD_INT 255
53253: EQUAL
53254: PUSH
53255: LD_VAR 0 2
53259: PPUSH
53260: CALL_OW 264
53264: PUSH
53265: LD_INT 14
53267: PUSH
53268: LD_INT 53
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: IN
53275: AND
53276: PUSH
53277: LD_VAR 0 4
53281: PPUSH
53282: LD_VAR 0 5
53286: PPUSH
53287: CALL_OW 488
53291: AND
53292: IFFALSE 53316
// CutTreeXYR ( unit , x , y , 12 ) ;
53294: LD_VAR 0 2
53298: PPUSH
53299: LD_VAR 0 4
53303: PPUSH
53304: LD_VAR 0 5
53308: PPUSH
53309: LD_INT 12
53311: PPUSH
53312: CALL 53507 0 4
// if cmd = 256 then
53316: LD_VAR 0 1
53320: PUSH
53321: LD_INT 256
53323: EQUAL
53324: IFFALSE 53345
// SetFactoryWaypoint ( unit , x , y ) ;
53326: LD_VAR 0 2
53330: PPUSH
53331: LD_VAR 0 4
53335: PPUSH
53336: LD_VAR 0 5
53340: PPUSH
53341: CALL 59942 0 3
// if cmd = 257 then
53345: LD_VAR 0 1
53349: PUSH
53350: LD_INT 257
53352: EQUAL
53353: IFFALSE 53374
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53355: LD_VAR 0 2
53359: PPUSH
53360: LD_VAR 0 4
53364: PPUSH
53365: LD_VAR 0 5
53369: PPUSH
53370: CALL 60432 0 3
// if cmd = 258 then
53374: LD_VAR 0 1
53378: PUSH
53379: LD_INT 258
53381: EQUAL
53382: IFFALSE 53406
// BurnTreeXYR ( unit , x , y , 8 ) ;
53384: LD_VAR 0 2
53388: PPUSH
53389: LD_VAR 0 4
53393: PPUSH
53394: LD_VAR 0 5
53398: PPUSH
53399: LD_INT 8
53401: PPUSH
53402: CALL 53901 0 4
// end ;
53406: LD_VAR 0 6
53410: RET
// export function ComRadiation ( un ) ; var eff ; begin
53411: LD_INT 0
53413: PPUSH
53414: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53415: LD_VAR 0 1
53419: PPUSH
53420: CALL_OW 264
53424: PUSH
53425: LD_INT 91
53427: NONEQUAL
53428: IFFALSE 53432
// exit ;
53430: GO 53502
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53432: LD_INT 68
53434: PPUSH
53435: LD_VAR 0 1
53439: PPUSH
53440: CALL_OW 255
53444: PPUSH
53445: CALL_OW 321
53449: PUSH
53450: LD_INT 2
53452: EQUAL
53453: IFFALSE 53465
// eff := 50 else
53455: LD_ADDR_VAR 0 3
53459: PUSH
53460: LD_INT 50
53462: ST_TO_ADDR
53463: GO 53473
// eff := 25 ;
53465: LD_ADDR_VAR 0 3
53469: PUSH
53470: LD_INT 25
53472: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53473: LD_VAR 0 1
53477: PPUSH
53478: CALL_OW 250
53482: PPUSH
53483: LD_VAR 0 1
53487: PPUSH
53488: CALL_OW 251
53492: PPUSH
53493: LD_VAR 0 3
53497: PPUSH
53498: CALL_OW 495
// end ;
53502: LD_VAR 0 2
53506: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53507: LD_INT 0
53509: PPUSH
53510: PPUSH
53511: PPUSH
53512: PPUSH
53513: PPUSH
53514: PPUSH
53515: PPUSH
53516: PPUSH
53517: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53518: LD_VAR 0 1
53522: PPUSH
53523: CALL_OW 302
53527: NOT
53528: PUSH
53529: LD_VAR 0 2
53533: PPUSH
53534: LD_VAR 0 3
53538: PPUSH
53539: CALL_OW 488
53543: NOT
53544: OR
53545: PUSH
53546: LD_VAR 0 4
53550: NOT
53551: OR
53552: IFFALSE 53556
// exit ;
53554: GO 53896
// list := [ ] ;
53556: LD_ADDR_VAR 0 13
53560: PUSH
53561: EMPTY
53562: ST_TO_ADDR
// if x - r < 0 then
53563: LD_VAR 0 2
53567: PUSH
53568: LD_VAR 0 4
53572: MINUS
53573: PUSH
53574: LD_INT 0
53576: LESS
53577: IFFALSE 53589
// min_x := 0 else
53579: LD_ADDR_VAR 0 7
53583: PUSH
53584: LD_INT 0
53586: ST_TO_ADDR
53587: GO 53605
// min_x := x - r ;
53589: LD_ADDR_VAR 0 7
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: LD_VAR 0 4
53603: MINUS
53604: ST_TO_ADDR
// if y - r < 0 then
53605: LD_VAR 0 3
53609: PUSH
53610: LD_VAR 0 4
53614: MINUS
53615: PUSH
53616: LD_INT 0
53618: LESS
53619: IFFALSE 53631
// min_y := 0 else
53621: LD_ADDR_VAR 0 8
53625: PUSH
53626: LD_INT 0
53628: ST_TO_ADDR
53629: GO 53647
// min_y := y - r ;
53631: LD_ADDR_VAR 0 8
53635: PUSH
53636: LD_VAR 0 3
53640: PUSH
53641: LD_VAR 0 4
53645: MINUS
53646: ST_TO_ADDR
// max_x := x + r ;
53647: LD_ADDR_VAR 0 9
53651: PUSH
53652: LD_VAR 0 2
53656: PUSH
53657: LD_VAR 0 4
53661: PLUS
53662: ST_TO_ADDR
// max_y := y + r ;
53663: LD_ADDR_VAR 0 10
53667: PUSH
53668: LD_VAR 0 3
53672: PUSH
53673: LD_VAR 0 4
53677: PLUS
53678: ST_TO_ADDR
// for _x = min_x to max_x do
53679: LD_ADDR_VAR 0 11
53683: PUSH
53684: DOUBLE
53685: LD_VAR 0 7
53689: DEC
53690: ST_TO_ADDR
53691: LD_VAR 0 9
53695: PUSH
53696: FOR_TO
53697: IFFALSE 53814
// for _y = min_y to max_y do
53699: LD_ADDR_VAR 0 12
53703: PUSH
53704: DOUBLE
53705: LD_VAR 0 8
53709: DEC
53710: ST_TO_ADDR
53711: LD_VAR 0 10
53715: PUSH
53716: FOR_TO
53717: IFFALSE 53810
// begin if not ValidHex ( _x , _y ) then
53719: LD_VAR 0 11
53723: PPUSH
53724: LD_VAR 0 12
53728: PPUSH
53729: CALL_OW 488
53733: NOT
53734: IFFALSE 53738
// continue ;
53736: GO 53716
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53738: LD_VAR 0 11
53742: PPUSH
53743: LD_VAR 0 12
53747: PPUSH
53748: CALL_OW 351
53752: PUSH
53753: LD_VAR 0 11
53757: PPUSH
53758: LD_VAR 0 12
53762: PPUSH
53763: CALL_OW 554
53767: AND
53768: IFFALSE 53808
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53770: LD_ADDR_VAR 0 13
53774: PUSH
53775: LD_VAR 0 13
53779: PPUSH
53780: LD_VAR 0 13
53784: PUSH
53785: LD_INT 1
53787: PLUS
53788: PPUSH
53789: LD_VAR 0 11
53793: PUSH
53794: LD_VAR 0 12
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PPUSH
53803: CALL_OW 2
53807: ST_TO_ADDR
// end ;
53808: GO 53716
53810: POP
53811: POP
53812: GO 53696
53814: POP
53815: POP
// if not list then
53816: LD_VAR 0 13
53820: NOT
53821: IFFALSE 53825
// exit ;
53823: GO 53896
// for i in list do
53825: LD_ADDR_VAR 0 6
53829: PUSH
53830: LD_VAR 0 13
53834: PUSH
53835: FOR_IN
53836: IFFALSE 53894
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53838: LD_VAR 0 1
53842: PPUSH
53843: LD_STRING M
53845: PUSH
53846: LD_VAR 0 6
53850: PUSH
53851: LD_INT 1
53853: ARRAY
53854: PUSH
53855: LD_VAR 0 6
53859: PUSH
53860: LD_INT 2
53862: ARRAY
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: PPUSH
53888: CALL_OW 447
53892: GO 53835
53894: POP
53895: POP
// end ;
53896: LD_VAR 0 5
53900: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53901: LD_INT 0
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
53908: PPUSH
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53913: LD_VAR 0 1
53917: PPUSH
53918: CALL_OW 302
53922: NOT
53923: PUSH
53924: LD_VAR 0 2
53928: PPUSH
53929: LD_VAR 0 3
53933: PPUSH
53934: CALL_OW 488
53938: NOT
53939: OR
53940: PUSH
53941: LD_VAR 0 4
53945: NOT
53946: OR
53947: IFFALSE 53951
// exit ;
53949: GO 54464
// list := [ ] ;
53951: LD_ADDR_VAR 0 13
53955: PUSH
53956: EMPTY
53957: ST_TO_ADDR
// if x - r < 0 then
53958: LD_VAR 0 2
53962: PUSH
53963: LD_VAR 0 4
53967: MINUS
53968: PUSH
53969: LD_INT 0
53971: LESS
53972: IFFALSE 53984
// min_x := 0 else
53974: LD_ADDR_VAR 0 7
53978: PUSH
53979: LD_INT 0
53981: ST_TO_ADDR
53982: GO 54000
// min_x := x - r ;
53984: LD_ADDR_VAR 0 7
53988: PUSH
53989: LD_VAR 0 2
53993: PUSH
53994: LD_VAR 0 4
53998: MINUS
53999: ST_TO_ADDR
// if y - r < 0 then
54000: LD_VAR 0 3
54004: PUSH
54005: LD_VAR 0 4
54009: MINUS
54010: PUSH
54011: LD_INT 0
54013: LESS
54014: IFFALSE 54026
// min_y := 0 else
54016: LD_ADDR_VAR 0 8
54020: PUSH
54021: LD_INT 0
54023: ST_TO_ADDR
54024: GO 54042
// min_y := y - r ;
54026: LD_ADDR_VAR 0 8
54030: PUSH
54031: LD_VAR 0 3
54035: PUSH
54036: LD_VAR 0 4
54040: MINUS
54041: ST_TO_ADDR
// max_x := x + r ;
54042: LD_ADDR_VAR 0 9
54046: PUSH
54047: LD_VAR 0 2
54051: PUSH
54052: LD_VAR 0 4
54056: PLUS
54057: ST_TO_ADDR
// max_y := y + r ;
54058: LD_ADDR_VAR 0 10
54062: PUSH
54063: LD_VAR 0 3
54067: PUSH
54068: LD_VAR 0 4
54072: PLUS
54073: ST_TO_ADDR
// for _x = min_x to max_x do
54074: LD_ADDR_VAR 0 11
54078: PUSH
54079: DOUBLE
54080: LD_VAR 0 7
54084: DEC
54085: ST_TO_ADDR
54086: LD_VAR 0 9
54090: PUSH
54091: FOR_TO
54092: IFFALSE 54209
// for _y = min_y to max_y do
54094: LD_ADDR_VAR 0 12
54098: PUSH
54099: DOUBLE
54100: LD_VAR 0 8
54104: DEC
54105: ST_TO_ADDR
54106: LD_VAR 0 10
54110: PUSH
54111: FOR_TO
54112: IFFALSE 54205
// begin if not ValidHex ( _x , _y ) then
54114: LD_VAR 0 11
54118: PPUSH
54119: LD_VAR 0 12
54123: PPUSH
54124: CALL_OW 488
54128: NOT
54129: IFFALSE 54133
// continue ;
54131: GO 54111
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54133: LD_VAR 0 11
54137: PPUSH
54138: LD_VAR 0 12
54142: PPUSH
54143: CALL_OW 351
54147: PUSH
54148: LD_VAR 0 11
54152: PPUSH
54153: LD_VAR 0 12
54157: PPUSH
54158: CALL_OW 554
54162: AND
54163: IFFALSE 54203
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54165: LD_ADDR_VAR 0 13
54169: PUSH
54170: LD_VAR 0 13
54174: PPUSH
54175: LD_VAR 0 13
54179: PUSH
54180: LD_INT 1
54182: PLUS
54183: PPUSH
54184: LD_VAR 0 11
54188: PUSH
54189: LD_VAR 0 12
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PPUSH
54198: CALL_OW 2
54202: ST_TO_ADDR
// end ;
54203: GO 54111
54205: POP
54206: POP
54207: GO 54091
54209: POP
54210: POP
// if not list then
54211: LD_VAR 0 13
54215: NOT
54216: IFFALSE 54220
// exit ;
54218: GO 54464
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54220: LD_ADDR_VAR 0 13
54224: PUSH
54225: LD_VAR 0 1
54229: PPUSH
54230: LD_VAR 0 13
54234: PPUSH
54235: LD_INT 1
54237: PPUSH
54238: LD_INT 1
54240: PPUSH
54241: CALL 14828 0 4
54245: ST_TO_ADDR
// ComStop ( flame ) ;
54246: LD_VAR 0 1
54250: PPUSH
54251: CALL_OW 141
// for i in list do
54255: LD_ADDR_VAR 0 6
54259: PUSH
54260: LD_VAR 0 13
54264: PUSH
54265: FOR_IN
54266: IFFALSE 54297
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54268: LD_VAR 0 1
54272: PPUSH
54273: LD_VAR 0 6
54277: PUSH
54278: LD_INT 1
54280: ARRAY
54281: PPUSH
54282: LD_VAR 0 6
54286: PUSH
54287: LD_INT 2
54289: ARRAY
54290: PPUSH
54291: CALL_OW 176
54295: GO 54265
54297: POP
54298: POP
// repeat wait ( 0 0$1 ) ;
54299: LD_INT 35
54301: PPUSH
54302: CALL_OW 67
// task := GetTaskList ( flame ) ;
54306: LD_ADDR_VAR 0 14
54310: PUSH
54311: LD_VAR 0 1
54315: PPUSH
54316: CALL_OW 437
54320: ST_TO_ADDR
// if not task then
54321: LD_VAR 0 14
54325: NOT
54326: IFFALSE 54330
// exit ;
54328: GO 54464
// if task [ 1 ] [ 1 ] <> | then
54330: LD_VAR 0 14
54334: PUSH
54335: LD_INT 1
54337: ARRAY
54338: PUSH
54339: LD_INT 1
54341: ARRAY
54342: PUSH
54343: LD_STRING |
54345: NONEQUAL
54346: IFFALSE 54350
// exit ;
54348: GO 54464
// _x := task [ 1 ] [ 2 ] ;
54350: LD_ADDR_VAR 0 11
54354: PUSH
54355: LD_VAR 0 14
54359: PUSH
54360: LD_INT 1
54362: ARRAY
54363: PUSH
54364: LD_INT 2
54366: ARRAY
54367: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54368: LD_ADDR_VAR 0 12
54372: PUSH
54373: LD_VAR 0 14
54377: PUSH
54378: LD_INT 1
54380: ARRAY
54381: PUSH
54382: LD_INT 3
54384: ARRAY
54385: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54386: LD_VAR 0 11
54390: PPUSH
54391: LD_VAR 0 12
54395: PPUSH
54396: CALL_OW 351
54400: NOT
54401: PUSH
54402: LD_VAR 0 11
54406: PPUSH
54407: LD_VAR 0 12
54411: PPUSH
54412: CALL_OW 554
54416: NOT
54417: OR
54418: IFFALSE 54452
// begin task := Delete ( task , 1 ) ;
54420: LD_ADDR_VAR 0 14
54424: PUSH
54425: LD_VAR 0 14
54429: PPUSH
54430: LD_INT 1
54432: PPUSH
54433: CALL_OW 3
54437: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54438: LD_VAR 0 1
54442: PPUSH
54443: LD_VAR 0 14
54447: PPUSH
54448: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54452: LD_VAR 0 1
54456: PPUSH
54457: CALL_OW 314
54461: NOT
54462: IFFALSE 54299
// end ;
54464: LD_VAR 0 5
54468: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54469: LD_EXP 44
54473: NOT
54474: IFFALSE 54524
54476: GO 54478
54478: DISABLE
// begin initHack := true ;
54479: LD_ADDR_EXP 44
54483: PUSH
54484: LD_INT 1
54486: ST_TO_ADDR
// hackTanks := [ ] ;
54487: LD_ADDR_EXP 45
54491: PUSH
54492: EMPTY
54493: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54494: LD_ADDR_EXP 46
54498: PUSH
54499: EMPTY
54500: ST_TO_ADDR
// hackLimit := 3 ;
54501: LD_ADDR_EXP 47
54505: PUSH
54506: LD_INT 3
54508: ST_TO_ADDR
// hackDist := 12 ;
54509: LD_ADDR_EXP 48
54513: PUSH
54514: LD_INT 12
54516: ST_TO_ADDR
// hackCounter := [ ] ;
54517: LD_ADDR_EXP 49
54521: PUSH
54522: EMPTY
54523: ST_TO_ADDR
// end ;
54524: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54525: LD_EXP 44
54529: PUSH
54530: LD_INT 34
54532: PUSH
54533: LD_INT 99
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PPUSH
54540: CALL_OW 69
54544: AND
54545: IFFALSE 54798
54547: GO 54549
54549: DISABLE
54550: LD_INT 0
54552: PPUSH
54553: PPUSH
// begin enable ;
54554: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54555: LD_ADDR_VAR 0 1
54559: PUSH
54560: LD_INT 34
54562: PUSH
54563: LD_INT 99
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PPUSH
54570: CALL_OW 69
54574: PUSH
54575: FOR_IN
54576: IFFALSE 54796
// begin if not i in hackTanks then
54578: LD_VAR 0 1
54582: PUSH
54583: LD_EXP 45
54587: IN
54588: NOT
54589: IFFALSE 54672
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54591: LD_ADDR_EXP 45
54595: PUSH
54596: LD_EXP 45
54600: PPUSH
54601: LD_EXP 45
54605: PUSH
54606: LD_INT 1
54608: PLUS
54609: PPUSH
54610: LD_VAR 0 1
54614: PPUSH
54615: CALL_OW 1
54619: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54620: LD_ADDR_EXP 46
54624: PUSH
54625: LD_EXP 46
54629: PPUSH
54630: LD_EXP 46
54634: PUSH
54635: LD_INT 1
54637: PLUS
54638: PPUSH
54639: EMPTY
54640: PPUSH
54641: CALL_OW 1
54645: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54646: LD_ADDR_EXP 49
54650: PUSH
54651: LD_EXP 49
54655: PPUSH
54656: LD_EXP 49
54660: PUSH
54661: LD_INT 1
54663: PLUS
54664: PPUSH
54665: EMPTY
54666: PPUSH
54667: CALL_OW 1
54671: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54672: LD_VAR 0 1
54676: PPUSH
54677: CALL_OW 302
54681: NOT
54682: IFFALSE 54695
// begin HackUnlinkAll ( i ) ;
54684: LD_VAR 0 1
54688: PPUSH
54689: CALL 54801 0 1
// continue ;
54693: GO 54575
// end ; HackCheckCapturedStatus ( i ) ;
54695: LD_VAR 0 1
54699: PPUSH
54700: CALL 55244 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54704: LD_ADDR_VAR 0 2
54708: PUSH
54709: LD_INT 81
54711: PUSH
54712: LD_VAR 0 1
54716: PPUSH
54717: CALL_OW 255
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 33
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 91
54738: PUSH
54739: LD_VAR 0 1
54743: PUSH
54744: LD_EXP 48
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 50
54756: PUSH
54757: EMPTY
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: PPUSH
54766: CALL_OW 69
54770: ST_TO_ADDR
// if not tmp then
54771: LD_VAR 0 2
54775: NOT
54776: IFFALSE 54780
// continue ;
54778: GO 54575
// HackLink ( i , tmp ) ;
54780: LD_VAR 0 1
54784: PPUSH
54785: LD_VAR 0 2
54789: PPUSH
54790: CALL 54937 0 2
// end ;
54794: GO 54575
54796: POP
54797: POP
// end ;
54798: PPOPN 2
54800: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54801: LD_INT 0
54803: PPUSH
54804: PPUSH
54805: PPUSH
// if not hack in hackTanks then
54806: LD_VAR 0 1
54810: PUSH
54811: LD_EXP 45
54815: IN
54816: NOT
54817: IFFALSE 54821
// exit ;
54819: GO 54932
// index := GetElementIndex ( hackTanks , hack ) ;
54821: LD_ADDR_VAR 0 4
54825: PUSH
54826: LD_EXP 45
54830: PPUSH
54831: LD_VAR 0 1
54835: PPUSH
54836: CALL 14125 0 2
54840: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54841: LD_EXP 46
54845: PUSH
54846: LD_VAR 0 4
54850: ARRAY
54851: IFFALSE 54932
// begin for i in hackTanksCaptured [ index ] do
54853: LD_ADDR_VAR 0 3
54857: PUSH
54858: LD_EXP 46
54862: PUSH
54863: LD_VAR 0 4
54867: ARRAY
54868: PUSH
54869: FOR_IN
54870: IFFALSE 54896
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54872: LD_VAR 0 3
54876: PUSH
54877: LD_INT 1
54879: ARRAY
54880: PPUSH
54881: LD_VAR 0 3
54885: PUSH
54886: LD_INT 2
54888: ARRAY
54889: PPUSH
54890: CALL_OW 235
54894: GO 54869
54896: POP
54897: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54898: LD_ADDR_EXP 46
54902: PUSH
54903: LD_EXP 46
54907: PPUSH
54908: LD_VAR 0 4
54912: PPUSH
54913: EMPTY
54914: PPUSH
54915: CALL_OW 1
54919: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54920: LD_VAR 0 1
54924: PPUSH
54925: LD_INT 0
54927: PPUSH
54928: CALL_OW 505
// end ; end ;
54932: LD_VAR 0 2
54936: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54937: LD_INT 0
54939: PPUSH
54940: PPUSH
54941: PPUSH
// if not hack in hackTanks or not vehicles then
54942: LD_VAR 0 1
54946: PUSH
54947: LD_EXP 45
54951: IN
54952: NOT
54953: PUSH
54954: LD_VAR 0 2
54958: NOT
54959: OR
54960: IFFALSE 54964
// exit ;
54962: GO 55239
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54964: LD_ADDR_VAR 0 2
54968: PUSH
54969: LD_VAR 0 1
54973: PPUSH
54974: LD_VAR 0 2
54978: PPUSH
54979: LD_INT 1
54981: PPUSH
54982: LD_INT 1
54984: PPUSH
54985: CALL 14775 0 4
54989: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54990: LD_ADDR_VAR 0 5
54994: PUSH
54995: LD_EXP 45
54999: PPUSH
55000: LD_VAR 0 1
55004: PPUSH
55005: CALL 14125 0 2
55009: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55010: LD_EXP 46
55014: PUSH
55015: LD_VAR 0 5
55019: ARRAY
55020: PUSH
55021: LD_EXP 47
55025: LESS
55026: IFFALSE 55215
// begin for i := 1 to vehicles do
55028: LD_ADDR_VAR 0 4
55032: PUSH
55033: DOUBLE
55034: LD_INT 1
55036: DEC
55037: ST_TO_ADDR
55038: LD_VAR 0 2
55042: PUSH
55043: FOR_TO
55044: IFFALSE 55213
// begin if hackTanksCaptured [ index ] = hackLimit then
55046: LD_EXP 46
55050: PUSH
55051: LD_VAR 0 5
55055: ARRAY
55056: PUSH
55057: LD_EXP 47
55061: EQUAL
55062: IFFALSE 55066
// break ;
55064: GO 55213
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55066: LD_ADDR_EXP 49
55070: PUSH
55071: LD_EXP 49
55075: PPUSH
55076: LD_VAR 0 5
55080: PPUSH
55081: LD_EXP 49
55085: PUSH
55086: LD_VAR 0 5
55090: ARRAY
55091: PUSH
55092: LD_INT 1
55094: PLUS
55095: PPUSH
55096: CALL_OW 1
55100: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55101: LD_ADDR_EXP 46
55105: PUSH
55106: LD_EXP 46
55110: PPUSH
55111: LD_VAR 0 5
55115: PUSH
55116: LD_EXP 46
55120: PUSH
55121: LD_VAR 0 5
55125: ARRAY
55126: PUSH
55127: LD_INT 1
55129: PLUS
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PPUSH
55135: LD_VAR 0 2
55139: PUSH
55140: LD_VAR 0 4
55144: ARRAY
55145: PUSH
55146: LD_VAR 0 2
55150: PUSH
55151: LD_VAR 0 4
55155: ARRAY
55156: PPUSH
55157: CALL_OW 255
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PPUSH
55166: CALL 14340 0 3
55170: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55171: LD_VAR 0 2
55175: PUSH
55176: LD_VAR 0 4
55180: ARRAY
55181: PPUSH
55182: LD_VAR 0 1
55186: PPUSH
55187: CALL_OW 255
55191: PPUSH
55192: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55196: LD_VAR 0 2
55200: PUSH
55201: LD_VAR 0 4
55205: ARRAY
55206: PPUSH
55207: CALL_OW 141
// end ;
55211: GO 55043
55213: POP
55214: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55215: LD_VAR 0 1
55219: PPUSH
55220: LD_EXP 46
55224: PUSH
55225: LD_VAR 0 5
55229: ARRAY
55230: PUSH
55231: LD_INT 0
55233: PLUS
55234: PPUSH
55235: CALL_OW 505
// end ;
55239: LD_VAR 0 3
55243: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55244: LD_INT 0
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
// if not hack in hackTanks then
55250: LD_VAR 0 1
55254: PUSH
55255: LD_EXP 45
55259: IN
55260: NOT
55261: IFFALSE 55265
// exit ;
55263: GO 55505
// index := GetElementIndex ( hackTanks , hack ) ;
55265: LD_ADDR_VAR 0 4
55269: PUSH
55270: LD_EXP 45
55274: PPUSH
55275: LD_VAR 0 1
55279: PPUSH
55280: CALL 14125 0 2
55284: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55285: LD_ADDR_VAR 0 3
55289: PUSH
55290: DOUBLE
55291: LD_EXP 46
55295: PUSH
55296: LD_VAR 0 4
55300: ARRAY
55301: INC
55302: ST_TO_ADDR
55303: LD_INT 1
55305: PUSH
55306: FOR_DOWNTO
55307: IFFALSE 55479
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55309: LD_ADDR_VAR 0 5
55313: PUSH
55314: LD_EXP 46
55318: PUSH
55319: LD_VAR 0 4
55323: ARRAY
55324: PUSH
55325: LD_VAR 0 3
55329: ARRAY
55330: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55331: LD_VAR 0 5
55335: PUSH
55336: LD_INT 1
55338: ARRAY
55339: PPUSH
55340: CALL_OW 302
55344: NOT
55345: PUSH
55346: LD_VAR 0 5
55350: PUSH
55351: LD_INT 1
55353: ARRAY
55354: PPUSH
55355: CALL_OW 255
55359: PUSH
55360: LD_VAR 0 1
55364: PPUSH
55365: CALL_OW 255
55369: NONEQUAL
55370: OR
55371: IFFALSE 55477
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55373: LD_VAR 0 5
55377: PUSH
55378: LD_INT 1
55380: ARRAY
55381: PPUSH
55382: CALL_OW 305
55386: PUSH
55387: LD_VAR 0 5
55391: PUSH
55392: LD_INT 1
55394: ARRAY
55395: PPUSH
55396: CALL_OW 255
55400: PUSH
55401: LD_VAR 0 1
55405: PPUSH
55406: CALL_OW 255
55410: EQUAL
55411: AND
55412: IFFALSE 55436
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55414: LD_VAR 0 5
55418: PUSH
55419: LD_INT 1
55421: ARRAY
55422: PPUSH
55423: LD_VAR 0 5
55427: PUSH
55428: LD_INT 2
55430: ARRAY
55431: PPUSH
55432: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55436: LD_ADDR_EXP 46
55440: PUSH
55441: LD_EXP 46
55445: PPUSH
55446: LD_VAR 0 4
55450: PPUSH
55451: LD_EXP 46
55455: PUSH
55456: LD_VAR 0 4
55460: ARRAY
55461: PPUSH
55462: LD_VAR 0 3
55466: PPUSH
55467: CALL_OW 3
55471: PPUSH
55472: CALL_OW 1
55476: ST_TO_ADDR
// end ; end ;
55477: GO 55306
55479: POP
55480: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55481: LD_VAR 0 1
55485: PPUSH
55486: LD_EXP 46
55490: PUSH
55491: LD_VAR 0 4
55495: ARRAY
55496: PUSH
55497: LD_INT 0
55499: PLUS
55500: PPUSH
55501: CALL_OW 505
// end ;
55505: LD_VAR 0 2
55509: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55510: LD_INT 0
55512: PPUSH
55513: PPUSH
55514: PPUSH
55515: PPUSH
// if not hack in hackTanks then
55516: LD_VAR 0 1
55520: PUSH
55521: LD_EXP 45
55525: IN
55526: NOT
55527: IFFALSE 55531
// exit ;
55529: GO 55616
// index := GetElementIndex ( hackTanks , hack ) ;
55531: LD_ADDR_VAR 0 5
55535: PUSH
55536: LD_EXP 45
55540: PPUSH
55541: LD_VAR 0 1
55545: PPUSH
55546: CALL 14125 0 2
55550: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55551: LD_ADDR_VAR 0 4
55555: PUSH
55556: DOUBLE
55557: LD_INT 1
55559: DEC
55560: ST_TO_ADDR
55561: LD_EXP 46
55565: PUSH
55566: LD_VAR 0 5
55570: ARRAY
55571: PUSH
55572: FOR_TO
55573: IFFALSE 55614
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55575: LD_EXP 46
55579: PUSH
55580: LD_VAR 0 5
55584: ARRAY
55585: PUSH
55586: LD_VAR 0 4
55590: ARRAY
55591: PUSH
55592: LD_INT 1
55594: ARRAY
55595: PUSH
55596: LD_VAR 0 2
55600: EQUAL
55601: IFFALSE 55612
// KillUnit ( vehicle ) ;
55603: LD_VAR 0 2
55607: PPUSH
55608: CALL_OW 66
55612: GO 55572
55614: POP
55615: POP
// end ;
55616: LD_VAR 0 3
55620: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55621: LD_EXP 50
55625: NOT
55626: IFFALSE 55661
55628: GO 55630
55630: DISABLE
// begin initMiner := true ;
55631: LD_ADDR_EXP 50
55635: PUSH
55636: LD_INT 1
55638: ST_TO_ADDR
// minersList := [ ] ;
55639: LD_ADDR_EXP 51
55643: PUSH
55644: EMPTY
55645: ST_TO_ADDR
// minerMinesList := [ ] ;
55646: LD_ADDR_EXP 52
55650: PUSH
55651: EMPTY
55652: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55653: LD_ADDR_EXP 53
55657: PUSH
55658: LD_INT 5
55660: ST_TO_ADDR
// end ;
55661: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55662: LD_EXP 50
55666: PUSH
55667: LD_INT 34
55669: PUSH
55670: LD_INT 81
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PPUSH
55677: CALL_OW 69
55681: AND
55682: IFFALSE 56143
55684: GO 55686
55686: DISABLE
55687: LD_INT 0
55689: PPUSH
55690: PPUSH
55691: PPUSH
55692: PPUSH
// begin enable ;
55693: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55694: LD_ADDR_VAR 0 1
55698: PUSH
55699: LD_INT 34
55701: PUSH
55702: LD_INT 81
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PPUSH
55709: CALL_OW 69
55713: PUSH
55714: FOR_IN
55715: IFFALSE 55787
// begin if not i in minersList then
55717: LD_VAR 0 1
55721: PUSH
55722: LD_EXP 51
55726: IN
55727: NOT
55728: IFFALSE 55785
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55730: LD_ADDR_EXP 51
55734: PUSH
55735: LD_EXP 51
55739: PPUSH
55740: LD_EXP 51
55744: PUSH
55745: LD_INT 1
55747: PLUS
55748: PPUSH
55749: LD_VAR 0 1
55753: PPUSH
55754: CALL_OW 1
55758: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55759: LD_ADDR_EXP 52
55763: PUSH
55764: LD_EXP 52
55768: PPUSH
55769: LD_EXP 52
55773: PUSH
55774: LD_INT 1
55776: PLUS
55777: PPUSH
55778: EMPTY
55779: PPUSH
55780: CALL_OW 1
55784: ST_TO_ADDR
// end end ;
55785: GO 55714
55787: POP
55788: POP
// for i := minerMinesList downto 1 do
55789: LD_ADDR_VAR 0 1
55793: PUSH
55794: DOUBLE
55795: LD_EXP 52
55799: INC
55800: ST_TO_ADDR
55801: LD_INT 1
55803: PUSH
55804: FOR_DOWNTO
55805: IFFALSE 56141
// begin if IsLive ( minersList [ i ] ) then
55807: LD_EXP 51
55811: PUSH
55812: LD_VAR 0 1
55816: ARRAY
55817: PPUSH
55818: CALL_OW 300
55822: IFFALSE 55850
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55824: LD_EXP 51
55828: PUSH
55829: LD_VAR 0 1
55833: ARRAY
55834: PPUSH
55835: LD_EXP 52
55839: PUSH
55840: LD_VAR 0 1
55844: ARRAY
55845: PPUSH
55846: CALL_OW 505
// if not minerMinesList [ i ] then
55850: LD_EXP 52
55854: PUSH
55855: LD_VAR 0 1
55859: ARRAY
55860: NOT
55861: IFFALSE 55865
// continue ;
55863: GO 55804
// for j := minerMinesList [ i ] downto 1 do
55865: LD_ADDR_VAR 0 2
55869: PUSH
55870: DOUBLE
55871: LD_EXP 52
55875: PUSH
55876: LD_VAR 0 1
55880: ARRAY
55881: INC
55882: ST_TO_ADDR
55883: LD_INT 1
55885: PUSH
55886: FOR_DOWNTO
55887: IFFALSE 56137
// begin side := GetSide ( minersList [ i ] ) ;
55889: LD_ADDR_VAR 0 3
55893: PUSH
55894: LD_EXP 51
55898: PUSH
55899: LD_VAR 0 1
55903: ARRAY
55904: PPUSH
55905: CALL_OW 255
55909: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55910: LD_ADDR_VAR 0 4
55914: PUSH
55915: LD_EXP 52
55919: PUSH
55920: LD_VAR 0 1
55924: ARRAY
55925: PUSH
55926: LD_VAR 0 2
55930: ARRAY
55931: PUSH
55932: LD_INT 1
55934: ARRAY
55935: PPUSH
55936: LD_EXP 52
55940: PUSH
55941: LD_VAR 0 1
55945: ARRAY
55946: PUSH
55947: LD_VAR 0 2
55951: ARRAY
55952: PUSH
55953: LD_INT 2
55955: ARRAY
55956: PPUSH
55957: CALL_OW 428
55961: ST_TO_ADDR
// if not tmp then
55962: LD_VAR 0 4
55966: NOT
55967: IFFALSE 55971
// continue ;
55969: GO 55886
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55971: LD_VAR 0 4
55975: PUSH
55976: LD_INT 81
55978: PUSH
55979: LD_VAR 0 3
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PPUSH
55988: CALL_OW 69
55992: IN
55993: PUSH
55994: LD_EXP 52
55998: PUSH
55999: LD_VAR 0 1
56003: ARRAY
56004: PUSH
56005: LD_VAR 0 2
56009: ARRAY
56010: PUSH
56011: LD_INT 1
56013: ARRAY
56014: PPUSH
56015: LD_EXP 52
56019: PUSH
56020: LD_VAR 0 1
56024: ARRAY
56025: PUSH
56026: LD_VAR 0 2
56030: ARRAY
56031: PUSH
56032: LD_INT 2
56034: ARRAY
56035: PPUSH
56036: CALL_OW 458
56040: AND
56041: IFFALSE 56135
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56043: LD_EXP 52
56047: PUSH
56048: LD_VAR 0 1
56052: ARRAY
56053: PUSH
56054: LD_VAR 0 2
56058: ARRAY
56059: PUSH
56060: LD_INT 1
56062: ARRAY
56063: PPUSH
56064: LD_EXP 52
56068: PUSH
56069: LD_VAR 0 1
56073: ARRAY
56074: PUSH
56075: LD_VAR 0 2
56079: ARRAY
56080: PUSH
56081: LD_INT 2
56083: ARRAY
56084: PPUSH
56085: LD_VAR 0 3
56089: PPUSH
56090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56094: LD_ADDR_EXP 52
56098: PUSH
56099: LD_EXP 52
56103: PPUSH
56104: LD_VAR 0 1
56108: PPUSH
56109: LD_EXP 52
56113: PUSH
56114: LD_VAR 0 1
56118: ARRAY
56119: PPUSH
56120: LD_VAR 0 2
56124: PPUSH
56125: CALL_OW 3
56129: PPUSH
56130: CALL_OW 1
56134: ST_TO_ADDR
// end ; end ;
56135: GO 55886
56137: POP
56138: POP
// end ;
56139: GO 55804
56141: POP
56142: POP
// end ;
56143: PPOPN 4
56145: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56146: LD_INT 0
56148: PPUSH
56149: PPUSH
// result := false ;
56150: LD_ADDR_VAR 0 4
56154: PUSH
56155: LD_INT 0
56157: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56158: LD_VAR 0 1
56162: PPUSH
56163: CALL_OW 264
56167: PUSH
56168: LD_INT 81
56170: EQUAL
56171: NOT
56172: IFFALSE 56176
// exit ;
56174: GO 56416
// index := GetElementIndex ( minersList , unit ) ;
56176: LD_ADDR_VAR 0 5
56180: PUSH
56181: LD_EXP 51
56185: PPUSH
56186: LD_VAR 0 1
56190: PPUSH
56191: CALL 14125 0 2
56195: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56196: LD_EXP 52
56200: PUSH
56201: LD_VAR 0 5
56205: ARRAY
56206: PUSH
56207: LD_EXP 53
56211: GREATEREQUAL
56212: IFFALSE 56216
// exit ;
56214: GO 56416
// ComMoveXY ( unit , x , y ) ;
56216: LD_VAR 0 1
56220: PPUSH
56221: LD_VAR 0 2
56225: PPUSH
56226: LD_VAR 0 3
56230: PPUSH
56231: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56235: LD_INT 35
56237: PPUSH
56238: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56242: LD_VAR 0 1
56246: PPUSH
56247: LD_VAR 0 2
56251: PPUSH
56252: LD_VAR 0 3
56256: PPUSH
56257: CALL 45886 0 3
56261: NOT
56262: PUSH
56263: LD_VAR 0 1
56267: PPUSH
56268: CALL_OW 314
56272: AND
56273: IFFALSE 56277
// exit ;
56275: GO 56416
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56277: LD_VAR 0 2
56281: PPUSH
56282: LD_VAR 0 3
56286: PPUSH
56287: CALL_OW 428
56291: PUSH
56292: LD_VAR 0 1
56296: EQUAL
56297: PUSH
56298: LD_VAR 0 1
56302: PPUSH
56303: CALL_OW 314
56307: NOT
56308: AND
56309: IFFALSE 56235
// PlaySoundXY ( x , y , PlantMine ) ;
56311: LD_VAR 0 2
56315: PPUSH
56316: LD_VAR 0 3
56320: PPUSH
56321: LD_STRING PlantMine
56323: PPUSH
56324: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56328: LD_VAR 0 2
56332: PPUSH
56333: LD_VAR 0 3
56337: PPUSH
56338: LD_VAR 0 1
56342: PPUSH
56343: CALL_OW 255
56347: PPUSH
56348: LD_INT 0
56350: PPUSH
56351: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56355: LD_ADDR_EXP 52
56359: PUSH
56360: LD_EXP 52
56364: PPUSH
56365: LD_VAR 0 5
56369: PUSH
56370: LD_EXP 52
56374: PUSH
56375: LD_VAR 0 5
56379: ARRAY
56380: PUSH
56381: LD_INT 1
56383: PLUS
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PPUSH
56389: LD_VAR 0 2
56393: PUSH
56394: LD_VAR 0 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PPUSH
56403: CALL 14340 0 3
56407: ST_TO_ADDR
// result := true ;
56408: LD_ADDR_VAR 0 4
56412: PUSH
56413: LD_INT 1
56415: ST_TO_ADDR
// end ;
56416: LD_VAR 0 4
56420: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56421: LD_INT 0
56423: PPUSH
56424: PPUSH
56425: PPUSH
// if not unit in minersList then
56426: LD_VAR 0 1
56430: PUSH
56431: LD_EXP 51
56435: IN
56436: NOT
56437: IFFALSE 56441
// exit ;
56439: GO 56833
// index := GetElementIndex ( minersList , unit ) ;
56441: LD_ADDR_VAR 0 6
56445: PUSH
56446: LD_EXP 51
56450: PPUSH
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL 14125 0 2
56460: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56461: LD_ADDR_VAR 0 5
56465: PUSH
56466: DOUBLE
56467: LD_EXP 52
56471: PUSH
56472: LD_VAR 0 6
56476: ARRAY
56477: INC
56478: ST_TO_ADDR
56479: LD_INT 1
56481: PUSH
56482: FOR_DOWNTO
56483: IFFALSE 56644
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56485: LD_EXP 52
56489: PUSH
56490: LD_VAR 0 6
56494: ARRAY
56495: PUSH
56496: LD_VAR 0 5
56500: ARRAY
56501: PUSH
56502: LD_INT 1
56504: ARRAY
56505: PUSH
56506: LD_VAR 0 2
56510: EQUAL
56511: PUSH
56512: LD_EXP 52
56516: PUSH
56517: LD_VAR 0 6
56521: ARRAY
56522: PUSH
56523: LD_VAR 0 5
56527: ARRAY
56528: PUSH
56529: LD_INT 2
56531: ARRAY
56532: PUSH
56533: LD_VAR 0 3
56537: EQUAL
56538: AND
56539: IFFALSE 56642
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56541: LD_EXP 52
56545: PUSH
56546: LD_VAR 0 6
56550: ARRAY
56551: PUSH
56552: LD_VAR 0 5
56556: ARRAY
56557: PUSH
56558: LD_INT 1
56560: ARRAY
56561: PPUSH
56562: LD_EXP 52
56566: PUSH
56567: LD_VAR 0 6
56571: ARRAY
56572: PUSH
56573: LD_VAR 0 5
56577: ARRAY
56578: PUSH
56579: LD_INT 2
56581: ARRAY
56582: PPUSH
56583: LD_VAR 0 1
56587: PPUSH
56588: CALL_OW 255
56592: PPUSH
56593: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56597: LD_ADDR_EXP 52
56601: PUSH
56602: LD_EXP 52
56606: PPUSH
56607: LD_VAR 0 6
56611: PPUSH
56612: LD_EXP 52
56616: PUSH
56617: LD_VAR 0 6
56621: ARRAY
56622: PPUSH
56623: LD_VAR 0 5
56627: PPUSH
56628: CALL_OW 3
56632: PPUSH
56633: CALL_OW 1
56637: ST_TO_ADDR
// exit ;
56638: POP
56639: POP
56640: GO 56833
// end ; end ;
56642: GO 56482
56644: POP
56645: POP
// for i := minerMinesList [ index ] downto 1 do
56646: LD_ADDR_VAR 0 5
56650: PUSH
56651: DOUBLE
56652: LD_EXP 52
56656: PUSH
56657: LD_VAR 0 6
56661: ARRAY
56662: INC
56663: ST_TO_ADDR
56664: LD_INT 1
56666: PUSH
56667: FOR_DOWNTO
56668: IFFALSE 56831
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56670: LD_EXP 52
56674: PUSH
56675: LD_VAR 0 6
56679: ARRAY
56680: PUSH
56681: LD_VAR 0 5
56685: ARRAY
56686: PUSH
56687: LD_INT 1
56689: ARRAY
56690: PPUSH
56691: LD_EXP 52
56695: PUSH
56696: LD_VAR 0 6
56700: ARRAY
56701: PUSH
56702: LD_VAR 0 5
56706: ARRAY
56707: PUSH
56708: LD_INT 2
56710: ARRAY
56711: PPUSH
56712: LD_VAR 0 2
56716: PPUSH
56717: LD_VAR 0 3
56721: PPUSH
56722: CALL_OW 298
56726: PUSH
56727: LD_INT 6
56729: LESS
56730: IFFALSE 56829
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56732: LD_EXP 52
56736: PUSH
56737: LD_VAR 0 6
56741: ARRAY
56742: PUSH
56743: LD_VAR 0 5
56747: ARRAY
56748: PUSH
56749: LD_INT 1
56751: ARRAY
56752: PPUSH
56753: LD_EXP 52
56757: PUSH
56758: LD_VAR 0 6
56762: ARRAY
56763: PUSH
56764: LD_VAR 0 5
56768: ARRAY
56769: PUSH
56770: LD_INT 2
56772: ARRAY
56773: PPUSH
56774: LD_VAR 0 1
56778: PPUSH
56779: CALL_OW 255
56783: PPUSH
56784: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56788: LD_ADDR_EXP 52
56792: PUSH
56793: LD_EXP 52
56797: PPUSH
56798: LD_VAR 0 6
56802: PPUSH
56803: LD_EXP 52
56807: PUSH
56808: LD_VAR 0 6
56812: ARRAY
56813: PPUSH
56814: LD_VAR 0 5
56818: PPUSH
56819: CALL_OW 3
56823: PPUSH
56824: CALL_OW 1
56828: ST_TO_ADDR
// end ; end ;
56829: GO 56667
56831: POP
56832: POP
// end ;
56833: LD_VAR 0 4
56837: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56838: LD_INT 0
56840: PPUSH
56841: PPUSH
56842: PPUSH
56843: PPUSH
56844: PPUSH
56845: PPUSH
56846: PPUSH
56847: PPUSH
56848: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56849: LD_VAR 0 1
56853: PPUSH
56854: CALL_OW 264
56858: PUSH
56859: LD_INT 81
56861: EQUAL
56862: NOT
56863: PUSH
56864: LD_VAR 0 1
56868: PUSH
56869: LD_EXP 51
56873: IN
56874: NOT
56875: OR
56876: IFFALSE 56880
// exit ;
56878: GO 57202
// index := GetElementIndex ( minersList , unit ) ;
56880: LD_ADDR_VAR 0 6
56884: PUSH
56885: LD_EXP 51
56889: PPUSH
56890: LD_VAR 0 1
56894: PPUSH
56895: CALL 14125 0 2
56899: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56900: LD_ADDR_VAR 0 8
56904: PUSH
56905: LD_EXP 53
56909: PUSH
56910: LD_EXP 52
56914: PUSH
56915: LD_VAR 0 6
56919: ARRAY
56920: MINUS
56921: ST_TO_ADDR
// if not minesFreeAmount then
56922: LD_VAR 0 8
56926: NOT
56927: IFFALSE 56931
// exit ;
56929: GO 57202
// tmp := [ ] ;
56931: LD_ADDR_VAR 0 7
56935: PUSH
56936: EMPTY
56937: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56938: LD_ADDR_VAR 0 5
56942: PUSH
56943: DOUBLE
56944: LD_INT 1
56946: DEC
56947: ST_TO_ADDR
56948: LD_VAR 0 8
56952: PUSH
56953: FOR_TO
56954: IFFALSE 57149
// begin _d := rand ( 0 , 5 ) ;
56956: LD_ADDR_VAR 0 11
56960: PUSH
56961: LD_INT 0
56963: PPUSH
56964: LD_INT 5
56966: PPUSH
56967: CALL_OW 12
56971: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56972: LD_ADDR_VAR 0 12
56976: PUSH
56977: LD_INT 2
56979: PPUSH
56980: LD_INT 6
56982: PPUSH
56983: CALL_OW 12
56987: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56988: LD_ADDR_VAR 0 9
56992: PUSH
56993: LD_VAR 0 2
56997: PPUSH
56998: LD_VAR 0 11
57002: PPUSH
57003: LD_VAR 0 12
57007: PPUSH
57008: CALL_OW 272
57012: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57013: LD_ADDR_VAR 0 10
57017: PUSH
57018: LD_VAR 0 3
57022: PPUSH
57023: LD_VAR 0 11
57027: PPUSH
57028: LD_VAR 0 12
57032: PPUSH
57033: CALL_OW 273
57037: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57038: LD_VAR 0 9
57042: PPUSH
57043: LD_VAR 0 10
57047: PPUSH
57048: CALL_OW 488
57052: PUSH
57053: LD_VAR 0 9
57057: PUSH
57058: LD_VAR 0 10
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_VAR 0 7
57071: IN
57072: NOT
57073: AND
57074: PUSH
57075: LD_VAR 0 9
57079: PPUSH
57080: LD_VAR 0 10
57084: PPUSH
57085: CALL_OW 458
57089: NOT
57090: AND
57091: IFFALSE 57133
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57093: LD_ADDR_VAR 0 7
57097: PUSH
57098: LD_VAR 0 7
57102: PPUSH
57103: LD_VAR 0 7
57107: PUSH
57108: LD_INT 1
57110: PLUS
57111: PPUSH
57112: LD_VAR 0 9
57116: PUSH
57117: LD_VAR 0 10
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PPUSH
57126: CALL_OW 1
57130: ST_TO_ADDR
57131: GO 57147
// i := i - 1 ;
57133: LD_ADDR_VAR 0 5
57137: PUSH
57138: LD_VAR 0 5
57142: PUSH
57143: LD_INT 1
57145: MINUS
57146: ST_TO_ADDR
// end ;
57147: GO 56953
57149: POP
57150: POP
// for i in tmp do
57151: LD_ADDR_VAR 0 5
57155: PUSH
57156: LD_VAR 0 7
57160: PUSH
57161: FOR_IN
57162: IFFALSE 57200
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57164: LD_VAR 0 1
57168: PPUSH
57169: LD_VAR 0 5
57173: PUSH
57174: LD_INT 1
57176: ARRAY
57177: PPUSH
57178: LD_VAR 0 5
57182: PUSH
57183: LD_INT 2
57185: ARRAY
57186: PPUSH
57187: CALL 56146 0 3
57191: NOT
57192: IFFALSE 57198
// exit ;
57194: POP
57195: POP
57196: GO 57202
57198: GO 57161
57200: POP
57201: POP
// end ;
57202: LD_VAR 0 4
57206: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57207: LD_INT 0
57209: PPUSH
57210: PPUSH
57211: PPUSH
57212: PPUSH
57213: PPUSH
57214: PPUSH
57215: PPUSH
57216: PPUSH
57217: PPUSH
// if GetClass ( unit ) <> class_sniper then
57218: LD_VAR 0 1
57222: PPUSH
57223: CALL_OW 257
57227: PUSH
57228: LD_INT 5
57230: NONEQUAL
57231: IFFALSE 57235
// exit ;
57233: GO 57701
// dist := 8 ;
57235: LD_ADDR_VAR 0 5
57239: PUSH
57240: LD_INT 8
57242: ST_TO_ADDR
// viewRange := 12 ;
57243: LD_ADDR_VAR 0 8
57247: PUSH
57248: LD_INT 12
57250: ST_TO_ADDR
// side := GetSide ( unit ) ;
57251: LD_ADDR_VAR 0 6
57255: PUSH
57256: LD_VAR 0 1
57260: PPUSH
57261: CALL_OW 255
57265: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57266: LD_INT 61
57268: PPUSH
57269: LD_VAR 0 6
57273: PPUSH
57274: CALL_OW 321
57278: PUSH
57279: LD_INT 2
57281: EQUAL
57282: IFFALSE 57292
// viewRange := 16 ;
57284: LD_ADDR_VAR 0 8
57288: PUSH
57289: LD_INT 16
57291: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57292: LD_VAR 0 1
57296: PPUSH
57297: LD_VAR 0 2
57301: PPUSH
57302: LD_VAR 0 3
57306: PPUSH
57307: CALL_OW 297
57311: PUSH
57312: LD_VAR 0 5
57316: GREATER
57317: IFFALSE 57396
// begin ComMoveXY ( unit , x , y ) ;
57319: LD_VAR 0 1
57323: PPUSH
57324: LD_VAR 0 2
57328: PPUSH
57329: LD_VAR 0 3
57333: PPUSH
57334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57338: LD_INT 35
57340: PPUSH
57341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57345: LD_VAR 0 1
57349: PPUSH
57350: LD_VAR 0 2
57354: PPUSH
57355: LD_VAR 0 3
57359: PPUSH
57360: CALL 45886 0 3
57364: NOT
57365: IFFALSE 57369
// exit ;
57367: GO 57701
// until GetDistUnitXY ( unit , x , y ) < dist ;
57369: LD_VAR 0 1
57373: PPUSH
57374: LD_VAR 0 2
57378: PPUSH
57379: LD_VAR 0 3
57383: PPUSH
57384: CALL_OW 297
57388: PUSH
57389: LD_VAR 0 5
57393: LESS
57394: IFFALSE 57338
// end ; ComTurnXY ( unit , x , y ) ;
57396: LD_VAR 0 1
57400: PPUSH
57401: LD_VAR 0 2
57405: PPUSH
57406: LD_VAR 0 3
57410: PPUSH
57411: CALL_OW 118
// repeat if Multiplayer then
57415: LD_OWVAR 4
57419: IFFALSE 57430
// wait ( 35 ) else
57421: LD_INT 35
57423: PPUSH
57424: CALL_OW 67
57428: GO 57437
// wait ( 5 ) ;
57430: LD_INT 5
57432: PPUSH
57433: CALL_OW 67
// _d := GetDir ( unit ) ;
57437: LD_ADDR_VAR 0 11
57441: PUSH
57442: LD_VAR 0 1
57446: PPUSH
57447: CALL_OW 254
57451: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57452: LD_ADDR_VAR 0 7
57456: PUSH
57457: LD_VAR 0 1
57461: PPUSH
57462: CALL_OW 250
57466: PPUSH
57467: LD_VAR 0 1
57471: PPUSH
57472: CALL_OW 251
57476: PPUSH
57477: LD_VAR 0 2
57481: PPUSH
57482: LD_VAR 0 3
57486: PPUSH
57487: CALL 48494 0 4
57491: ST_TO_ADDR
// until dir = _d ;
57492: LD_VAR 0 7
57496: PUSH
57497: LD_VAR 0 11
57501: EQUAL
57502: IFFALSE 57415
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57504: LD_ADDR_VAR 0 9
57508: PUSH
57509: LD_VAR 0 1
57513: PPUSH
57514: CALL_OW 250
57518: PPUSH
57519: LD_VAR 0 7
57523: PPUSH
57524: LD_VAR 0 5
57528: PPUSH
57529: CALL_OW 272
57533: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57534: LD_ADDR_VAR 0 10
57538: PUSH
57539: LD_VAR 0 1
57543: PPUSH
57544: CALL_OW 251
57548: PPUSH
57549: LD_VAR 0 7
57553: PPUSH
57554: LD_VAR 0 5
57558: PPUSH
57559: CALL_OW 273
57563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57564: LD_VAR 0 9
57568: PPUSH
57569: LD_VAR 0 10
57573: PPUSH
57574: CALL_OW 488
57578: NOT
57579: IFFALSE 57583
// exit ;
57581: GO 57701
// ComAnimCustom ( unit , 1 ) ;
57583: LD_VAR 0 1
57587: PPUSH
57588: LD_INT 1
57590: PPUSH
57591: CALL_OW 592
// p := 0 ;
57595: LD_ADDR_VAR 0 12
57599: PUSH
57600: LD_INT 0
57602: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57603: LD_VAR 0 9
57607: PPUSH
57608: LD_VAR 0 10
57612: PPUSH
57613: LD_VAR 0 6
57617: PPUSH
57618: LD_VAR 0 8
57622: PPUSH
57623: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57627: LD_INT 35
57629: PPUSH
57630: CALL_OW 67
// p := Inc ( p ) ;
57634: LD_ADDR_VAR 0 12
57638: PUSH
57639: LD_VAR 0 12
57643: PPUSH
57644: CALL 48450 0 1
57648: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57649: LD_VAR 0 12
57653: PUSH
57654: LD_INT 3
57656: EQUAL
57657: PUSH
57658: LD_VAR 0 1
57662: PPUSH
57663: CALL_OW 302
57667: NOT
57668: OR
57669: PUSH
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL_OW 301
57679: OR
57680: IFFALSE 57627
// RemoveSeeing ( _x , _y , side ) ;
57682: LD_VAR 0 9
57686: PPUSH
57687: LD_VAR 0 10
57691: PPUSH
57692: LD_VAR 0 6
57696: PPUSH
57697: CALL_OW 331
// end ; end_of_file
57701: LD_VAR 0 4
57705: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57706: LD_EXP 39
57710: IFFALSE 58051
57712: GO 57714
57714: DISABLE
57715: LD_INT 0
57717: PPUSH
57718: PPUSH
57719: PPUSH
// begin mpKingPoints := [ ] ;
57720: LD_ADDR_EXP 54
57724: PUSH
57725: EMPTY
57726: ST_TO_ADDR
// if mpTeamGame then
57727: LD_EXP 11
57731: IFFALSE 57785
// begin for i := 1 to Count ( mpTeams ) do
57733: LD_ADDR_VAR 0 1
57737: PUSH
57738: DOUBLE
57739: LD_INT 1
57741: DEC
57742: ST_TO_ADDR
57743: LD_EXP 10
57747: PPUSH
57748: CALL 11480 0 1
57752: PUSH
57753: FOR_TO
57754: IFFALSE 57781
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57756: LD_ADDR_EXP 54
57760: PUSH
57761: LD_EXP 54
57765: PPUSH
57766: LD_VAR 0 1
57770: PPUSH
57771: LD_INT 0
57773: PPUSH
57774: CALL_OW 1
57778: ST_TO_ADDR
57779: GO 57753
57781: POP
57782: POP
// end else
57783: GO 57828
// begin for i := 1 to 8 do
57785: LD_ADDR_VAR 0 1
57789: PUSH
57790: DOUBLE
57791: LD_INT 1
57793: DEC
57794: ST_TO_ADDR
57795: LD_INT 8
57797: PUSH
57798: FOR_TO
57799: IFFALSE 57826
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57801: LD_ADDR_EXP 54
57805: PUSH
57806: LD_EXP 54
57810: PPUSH
57811: LD_VAR 0 1
57815: PPUSH
57816: LD_INT 0
57818: PPUSH
57819: CALL_OW 1
57823: ST_TO_ADDR
57824: GO 57798
57826: POP
57827: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57828: LD_ADDR_VAR 0 3
57832: PUSH
57833: LD_EXP 2
57837: PPUSH
57838: LD_INT 0
57840: PPUSH
57841: CALL_OW 517
57845: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57846: LD_ADDR_VAR 0 1
57850: PUSH
57851: DOUBLE
57852: LD_INT 1
57854: DEC
57855: ST_TO_ADDR
57856: LD_VAR 0 3
57860: PUSH
57861: LD_INT 1
57863: ARRAY
57864: PUSH
57865: FOR_TO
57866: IFFALSE 57933
// for j := 1 to 8 do
57868: LD_ADDR_VAR 0 2
57872: PUSH
57873: DOUBLE
57874: LD_INT 1
57876: DEC
57877: ST_TO_ADDR
57878: LD_INT 8
57880: PUSH
57881: FOR_TO
57882: IFFALSE 57929
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57884: LD_VAR 0 3
57888: PUSH
57889: LD_INT 1
57891: ARRAY
57892: PUSH
57893: LD_VAR 0 1
57897: ARRAY
57898: PPUSH
57899: LD_VAR 0 3
57903: PUSH
57904: LD_INT 2
57906: ARRAY
57907: PUSH
57908: LD_VAR 0 1
57912: ARRAY
57913: PPUSH
57914: LD_VAR 0 2
57918: PPUSH
57919: LD_INT 12
57921: NEG
57922: PPUSH
57923: CALL_OW 330
57927: GO 57881
57929: POP
57930: POP
57931: GO 57865
57933: POP
57934: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57935: LD_EXP 34
57939: PPUSH
57940: LD_INT 1
57942: PPUSH
57943: CALL_OW 424
// UpdateCounter ;
57947: CALL 58555 0 0
// repeat wait ( 0 0$1 ) ;
57951: LD_INT 35
57953: PPUSH
57954: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57958: LD_ADDR_VAR 0 3
57962: PUSH
57963: LD_EXP 34
57967: PPUSH
57968: LD_INT 3
57970: PUSH
57971: LD_INT 57
57973: PUSH
57974: EMPTY
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 50
57983: PUSH
57984: EMPTY
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 30
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 30
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: PPUSH
58020: CALL_OW 70
58024: ST_TO_ADDR
// if not tmp then
58025: LD_VAR 0 3
58029: NOT
58030: IFFALSE 58034
// continue ;
58032: GO 57951
// AddPoints ( tmp ) ;
58034: LD_VAR 0 3
58038: PPUSH
58039: CALL 58233 0 1
// UpdateCounter ;
58043: CALL 58555 0 0
// until false ;
58047: LD_INT 0
58049: IFFALSE 57951
// end ;
58051: PPOPN 3
58053: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58054: LD_EXP 39
58058: PUSH
58059: LD_EXP 37
58063: AND
58064: IFFALSE 58230
58066: GO 58068
58068: DISABLE
58069: LD_INT 0
58071: PPUSH
58072: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58073: LD_ADDR_VAR 0 2
58077: PUSH
58078: LD_EXP 2
58082: PPUSH
58083: LD_INT 0
58085: PPUSH
58086: CALL_OW 517
58090: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58091: LD_ADDR_VAR 0 1
58095: PUSH
58096: DOUBLE
58097: LD_INT 1
58099: DEC
58100: ST_TO_ADDR
58101: LD_VAR 0 2
58105: PUSH
58106: LD_INT 1
58108: ARRAY
58109: PUSH
58110: FOR_TO
58111: IFFALSE 58152
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58113: LD_VAR 0 2
58117: PUSH
58118: LD_INT 1
58120: ARRAY
58121: PUSH
58122: LD_VAR 0 1
58126: ARRAY
58127: PPUSH
58128: LD_VAR 0 2
58132: PUSH
58133: LD_INT 2
58135: ARRAY
58136: PUSH
58137: LD_VAR 0 1
58141: ARRAY
58142: PPUSH
58143: LD_INT 125
58145: PPUSH
58146: CALL_OW 495
58150: GO 58110
58152: POP
58153: POP
// repeat wait ( mpEmissions ) ;
58154: LD_EXP 37
58158: PPUSH
58159: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58163: LD_ADDR_VAR 0 1
58167: PUSH
58168: DOUBLE
58169: LD_INT 1
58171: DEC
58172: ST_TO_ADDR
58173: LD_VAR 0 2
58177: PUSH
58178: LD_INT 1
58180: ARRAY
58181: PUSH
58182: FOR_TO
58183: IFFALSE 58224
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58185: LD_VAR 0 2
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PUSH
58194: LD_VAR 0 1
58198: ARRAY
58199: PPUSH
58200: LD_VAR 0 2
58204: PUSH
58205: LD_INT 2
58207: ARRAY
58208: PUSH
58209: LD_VAR 0 1
58213: ARRAY
58214: PPUSH
58215: LD_INT 15
58217: PPUSH
58218: CALL_OW 495
58222: GO 58182
58224: POP
58225: POP
// until false ;
58226: LD_INT 0
58228: IFFALSE 58154
// end ;
58230: PPOPN 2
58232: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58233: LD_INT 0
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
58239: PPUSH
// if mpTeamGame then
58240: LD_EXP 11
58244: IFFALSE 58441
// begin first := depots [ 1 ] ;
58246: LD_ADDR_VAR 0 4
58250: PUSH
58251: LD_VAR 0 1
58255: PUSH
58256: LD_INT 1
58258: ARRAY
58259: ST_TO_ADDR
// side := GetSide ( first ) ;
58260: LD_ADDR_VAR 0 6
58264: PUSH
58265: LD_VAR 0 4
58269: PPUSH
58270: CALL_OW 255
58274: ST_TO_ADDR
// for i := 1 to mpTeams do
58275: LD_ADDR_VAR 0 3
58279: PUSH
58280: DOUBLE
58281: LD_INT 1
58283: DEC
58284: ST_TO_ADDR
58285: LD_EXP 10
58289: PUSH
58290: FOR_TO
58291: IFFALSE 58325
// if side in mpTeams [ i ] then
58293: LD_VAR 0 6
58297: PUSH
58298: LD_EXP 10
58302: PUSH
58303: LD_VAR 0 3
58307: ARRAY
58308: IN
58309: IFFALSE 58323
// begin team := i ;
58311: LD_ADDR_VAR 0 5
58315: PUSH
58316: LD_VAR 0 3
58320: ST_TO_ADDR
// break ;
58321: GO 58325
// end ;
58323: GO 58290
58325: POP
58326: POP
// if not team then
58327: LD_VAR 0 5
58331: NOT
58332: IFFALSE 58336
// exit ;
58334: GO 58550
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58336: LD_EXP 34
58340: PPUSH
58341: LD_INT 81
58343: PUSH
58344: LD_VAR 0 6
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PPUSH
58353: CALL_OW 70
58357: IFFALSE 58361
// exit ;
58359: GO 58550
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58361: LD_ADDR_EXP 54
58365: PUSH
58366: LD_EXP 54
58370: PPUSH
58371: LD_VAR 0 5
58375: PPUSH
58376: LD_EXP 54
58380: PUSH
58381: LD_VAR 0 5
58385: ARRAY
58386: PUSH
58387: LD_INT 1
58389: PLUS
58390: PPUSH
58391: CALL_OW 1
58395: ST_TO_ADDR
// for i in mpTeams [ team ] do
58396: LD_ADDR_VAR 0 3
58400: PUSH
58401: LD_EXP 10
58405: PUSH
58406: LD_VAR 0 5
58410: ARRAY
58411: PUSH
58412: FOR_IN
58413: IFFALSE 58437
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58415: LD_VAR 0 3
58419: PPUSH
58420: LD_EXP 54
58424: PUSH
58425: LD_VAR 0 5
58429: ARRAY
58430: PPUSH
58431: CALL_OW 506
58435: GO 58412
58437: POP
58438: POP
// end else
58439: GO 58550
// begin first := depots [ 1 ] ;
58441: LD_ADDR_VAR 0 4
58445: PUSH
58446: LD_VAR 0 1
58450: PUSH
58451: LD_INT 1
58453: ARRAY
58454: ST_TO_ADDR
// side := GetSide ( first ) ;
58455: LD_ADDR_VAR 0 6
58459: PUSH
58460: LD_VAR 0 4
58464: PPUSH
58465: CALL_OW 255
58469: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58470: LD_EXP 34
58474: PPUSH
58475: LD_INT 81
58477: PUSH
58478: LD_VAR 0 6
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PPUSH
58487: CALL_OW 70
58491: IFFALSE 58495
// exit ;
58493: GO 58550
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58495: LD_ADDR_EXP 54
58499: PUSH
58500: LD_EXP 54
58504: PPUSH
58505: LD_VAR 0 6
58509: PPUSH
58510: LD_EXP 54
58514: PUSH
58515: LD_VAR 0 6
58519: ARRAY
58520: PUSH
58521: LD_INT 1
58523: PLUS
58524: PPUSH
58525: CALL_OW 1
58529: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58530: LD_VAR 0 6
58534: PPUSH
58535: LD_EXP 54
58539: PUSH
58540: LD_VAR 0 6
58544: ARRAY
58545: PPUSH
58546: CALL_OW 506
// end ; end ;
58550: LD_VAR 0 2
58554: RET
// function UpdateCounter ; var i ; begin
58555: LD_INT 0
58557: PPUSH
58558: PPUSH
// result := [ ] ;
58559: LD_ADDR_VAR 0 1
58563: PUSH
58564: EMPTY
58565: ST_TO_ADDR
// if mpTeamGame then
58566: LD_EXP 11
58570: IFFALSE 58637
// begin for i := 1 to mpTeams do
58572: LD_ADDR_VAR 0 2
58576: PUSH
58577: DOUBLE
58578: LD_INT 1
58580: DEC
58581: ST_TO_ADDR
58582: LD_EXP 10
58586: PUSH
58587: FOR_TO
58588: IFFALSE 58633
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58590: LD_ADDR_VAR 0 1
58594: PUSH
58595: LD_VAR 0 1
58599: PUSH
58600: LD_STRING #KingoftheHill-Team
58602: PUSH
58603: LD_VAR 0 2
58607: PUSH
58608: LD_EXP 54
58612: PUSH
58613: LD_VAR 0 2
58617: ARRAY
58618: PUSH
58619: LD_EXP 35
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: ADD
58630: ST_TO_ADDR
58631: GO 58587
58633: POP
58634: POP
// end else
58635: GO 58710
// begin for i := 1 to 8 do
58637: LD_ADDR_VAR 0 2
58641: PUSH
58642: DOUBLE
58643: LD_INT 1
58645: DEC
58646: ST_TO_ADDR
58647: LD_INT 8
58649: PUSH
58650: FOR_TO
58651: IFFALSE 58708
// if mpSidePositions [ i ] then
58653: LD_EXP 7
58657: PUSH
58658: LD_VAR 0 2
58662: ARRAY
58663: IFFALSE 58706
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58665: LD_ADDR_VAR 0 1
58669: PUSH
58670: LD_VAR 0 1
58674: PUSH
58675: LD_STRING #KingoftheHill-Player
58677: PUSH
58678: LD_VAR 0 2
58682: PUSH
58683: LD_EXP 54
58687: PUSH
58688: LD_VAR 0 2
58692: ARRAY
58693: PUSH
58694: LD_EXP 35
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: ADD
58705: ST_TO_ADDR
58706: GO 58650
58708: POP
58709: POP
// end ; mpDisplayStrings := result ;
58710: LD_ADDR_EXP 38
58714: PUSH
58715: LD_VAR 0 1
58719: ST_TO_ADDR
// end ;
58720: LD_VAR 0 1
58724: RET
// export function HowMuchPointsKing ( side ) ; begin
58725: LD_INT 0
58727: PPUSH
// result := HowMuchPoints ( side ) ;
58728: LD_ADDR_VAR 0 2
58732: PUSH
58733: LD_VAR 0 1
58737: PPUSH
58738: CALL 58748 0 1
58742: ST_TO_ADDR
// end ;
58743: LD_VAR 0 2
58747: RET
// function HowMuchPoints ( side ) ; var i ; begin
58748: LD_INT 0
58750: PPUSH
58751: PPUSH
// if mpTeamGame then
58752: LD_EXP 11
58756: IFFALSE 58825
// begin for i := 1 to Count ( mpTeams ) do
58758: LD_ADDR_VAR 0 3
58762: PUSH
58763: DOUBLE
58764: LD_INT 1
58766: DEC
58767: ST_TO_ADDR
58768: LD_EXP 10
58772: PPUSH
58773: CALL 11480 0 1
58777: PUSH
58778: FOR_TO
58779: IFFALSE 58821
// begin if side in mpTeams [ i ] then
58781: LD_VAR 0 1
58785: PUSH
58786: LD_EXP 10
58790: PUSH
58791: LD_VAR 0 3
58795: ARRAY
58796: IN
58797: IFFALSE 58819
// begin result := mpKingPoints [ i ] ;
58799: LD_ADDR_VAR 0 2
58803: PUSH
58804: LD_EXP 54
58808: PUSH
58809: LD_VAR 0 3
58813: ARRAY
58814: ST_TO_ADDR
// exit ;
58815: POP
58816: POP
58817: GO 58841
// end ; end ;
58819: GO 58778
58821: POP
58822: POP
// end else
58823: GO 58841
// result := mpKingPoints [ side ] ;
58825: LD_ADDR_VAR 0 2
58829: PUSH
58830: LD_EXP 54
58834: PUSH
58835: LD_VAR 0 1
58839: ARRAY
58840: ST_TO_ADDR
// end ;
58841: LD_VAR 0 2
58845: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58846: LD_EXP 39
58850: PUSH
58851: CALL 59173 0 0
58855: AND
58856: PUSH
58857: LD_OWVAR 4
58861: AND
58862: IFFALSE 59098
58864: GO 58866
58866: DISABLE
58867: LD_INT 0
58869: PPUSH
58870: PPUSH
// begin canWin := false ;
58871: LD_ADDR_VAR 0 2
58875: PUSH
58876: LD_INT 0
58878: ST_TO_ADDR
// if not HasPower ( your_side ) then
58879: LD_OWVAR 2
58883: PPUSH
58884: CALL 59213 0 1
58888: NOT
58889: IFFALSE 58900
// begin Multiplayer_Loose_Message ;
58891: CALL_OW 521
// enable ( mpLose ) ;
58895: LD_INT 102
58897: ENABLE_MARKED
// end else
58898: GO 59098
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58900: LD_ADDR_VAR 0 2
58904: PUSH
58905: LD_OWVAR 2
58909: PPUSH
58910: CALL 58748 0 1
58914: PUSH
58915: LD_EXP 35
58919: GREATEREQUAL
58920: PUSH
58921: LD_OWVAR 2
58925: PPUSH
58926: CALL 59213 0 1
58930: AND
58931: PUSH
58932: CALL 59101 0 0
58936: NOT
58937: OR
58938: ST_TO_ADDR
// for i := 1 to 8 do
58939: LD_ADDR_VAR 0 1
58943: PUSH
58944: DOUBLE
58945: LD_INT 1
58947: DEC
58948: ST_TO_ADDR
58949: LD_INT 8
58951: PUSH
58952: FOR_TO
58953: IFFALSE 59084
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58955: LD_EXP 7
58959: PUSH
58960: LD_VAR 0 1
58964: ARRAY
58965: PUSH
58966: LD_VAR 0 1
58970: PPUSH
58971: CALL_OW 108
58975: AND
58976: PUSH
58977: LD_VAR 0 1
58981: PUSH
58982: LD_OWVAR 2
58986: NONEQUAL
58987: AND
58988: IFFALSE 59082
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58990: LD_EXP 8
58994: PUSH
58995: LD_VAR 0 1
58999: ARRAY
59000: NOT
59001: PUSH
59002: LD_EXP 8
59006: PUSH
59007: LD_VAR 0 1
59011: ARRAY
59012: PUSH
59013: LD_EXP 8
59017: PUSH
59018: LD_OWVAR 2
59022: ARRAY
59023: NONEQUAL
59024: PUSH
59025: LD_OWVAR 2
59029: PPUSH
59030: LD_VAR 0 1
59034: PPUSH
59035: CALL_OW 81
59039: PUSH
59040: LD_INT 1
59042: NONEQUAL
59043: AND
59044: OR
59045: IFFALSE 59082
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59047: LD_VAR 0 1
59051: PPUSH
59052: CALL 58748 0 1
59056: PUSH
59057: LD_EXP 35
59061: GREATEREQUAL
59062: PUSH
59063: LD_VAR 0 1
59067: PPUSH
59068: CALL 59213 0 1
59072: AND
59073: IFFALSE 59082
// begin enable ( mpLose ) ;
59075: LD_INT 102
59077: ENABLE_MARKED
// exit ;
59078: POP
59079: POP
59080: GO 59098
// end ;
59082: GO 58952
59084: POP
59085: POP
// if canWin then
59086: LD_VAR 0 2
59090: IFFALSE 59097
// enable ( mpWin ) else
59092: LD_INT 101
59094: ENABLE_MARKED
59095: GO 59098
// enable ;
59097: ENABLE
// end ; end ;
59098: PPOPN 2
59100: END
// function EnemiesInGame ; var i ; begin
59101: LD_INT 0
59103: PPUSH
59104: PPUSH
// result := false ;
59105: LD_ADDR_VAR 0 1
59109: PUSH
59110: LD_INT 0
59112: ST_TO_ADDR
// for i := 1 to 8 do
59113: LD_ADDR_VAR 0 2
59117: PUSH
59118: DOUBLE
59119: LD_INT 1
59121: DEC
59122: ST_TO_ADDR
59123: LD_INT 8
59125: PUSH
59126: FOR_TO
59127: IFFALSE 59166
// if i <> your_side and HasPower ( i ) then
59129: LD_VAR 0 2
59133: PUSH
59134: LD_OWVAR 2
59138: NONEQUAL
59139: PUSH
59140: LD_VAR 0 2
59144: PPUSH
59145: CALL 59213 0 1
59149: AND
59150: IFFALSE 59164
// begin result := true ;
59152: LD_ADDR_VAR 0 1
59156: PUSH
59157: LD_INT 1
59159: ST_TO_ADDR
// exit ;
59160: POP
59161: POP
59162: GO 59168
// end ;
59164: GO 59126
59166: POP
59167: POP
// end ;
59168: LD_VAR 0 1
59172: RET
// function CanWinLoose ; begin
59173: LD_INT 0
59175: PPUSH
// result := true ;
59176: LD_ADDR_VAR 0 1
59180: PUSH
59181: LD_INT 1
59183: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59184: CALL_OW 531
59188: PUSH
59189: CALL_OW 519
59193: PUSH
59194: LD_INT 1
59196: GREATER
59197: AND
59198: IFFALSE 59208
// result := false ;
59200: LD_ADDR_VAR 0 1
59204: PUSH
59205: LD_INT 0
59207: ST_TO_ADDR
// end ;
59208: LD_VAR 0 1
59212: RET
// function HasPower ( i ) ; begin
59213: LD_INT 0
59215: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59216: LD_ADDR_VAR 0 2
59220: PUSH
59221: LD_INT 22
59223: PUSH
59224: LD_VAR 0 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: LD_INT 21
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 33
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 33
59258: PUSH
59259: LD_INT 5
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PPUSH
59276: CALL_OW 69
59280: ST_TO_ADDR
// end ; end_of_file
59281: LD_VAR 0 2
59285: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59286: PPOPN 6
59288: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59289: LD_EXP 3
59293: PUSH
59294: LD_INT 4
59296: EQUAL
59297: IFFALSE 59333
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59299: LD_STRING setGameDifficulty(
59301: PUSH
59302: LD_OWVAR 67
59306: STR
59307: PUSH
59308: LD_STRING )
59310: STR
59311: PPUSH
59312: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59316: LD_STRING displayDifficulty(
59318: PUSH
59319: LD_OWVAR 67
59323: STR
59324: PUSH
59325: LD_STRING )
59327: STR
59328: PPUSH
59329: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59333: CALL 59362 0 0
// end ; end_of_file
59337: PPOPN 1
59339: END
// every 0 0$1 do
59340: GO 59342
59342: DISABLE
// begin enable ;
59343: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59344: LD_STRING updateTimer(
59346: PUSH
59347: LD_OWVAR 1
59351: STR
59352: PUSH
59353: LD_STRING );
59355: STR
59356: PPUSH
59357: CALL_OW 559
// end ;
59361: END
// export function SOS_MapStart ( ) ; begin
59362: LD_INT 0
59364: PPUSH
// UpdateFactoryWaypoints ( ) ;
59365: CALL 60290 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59369: CALL 60542 0 0
// ParseMultiDataToLua ( ) ;
59373: CALL 60689 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59377: LD_STRING setSpecLogoNumber(
59379: PUSH
59380: LD_INT 2
59382: STR
59383: PUSH
59384: LD_STRING ,
59386: STR
59387: PUSH
59388: LD_INT 1
59390: STR
59391: PUSH
59392: LD_STRING )
59394: STR
59395: PPUSH
59396: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59400: LD_STRING setSpecLogoNumber(
59402: PUSH
59403: LD_INT 3
59405: STR
59406: PUSH
59407: LD_STRING ,
59409: STR
59410: PUSH
59411: LD_INT 2
59413: STR
59414: PUSH
59415: LD_STRING )
59417: STR
59418: PPUSH
59419: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59423: LD_STRING setSpecLogoNumber(
59425: PUSH
59426: LD_INT 4
59428: STR
59429: PUSH
59430: LD_STRING ,
59432: STR
59433: PUSH
59434: LD_INT 3
59436: STR
59437: PUSH
59438: LD_STRING )
59440: STR
59441: PPUSH
59442: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59446: LD_STRING setSpecLogoNumber(
59448: PUSH
59449: LD_INT 5
59451: STR
59452: PUSH
59453: LD_STRING ,
59455: STR
59456: PUSH
59457: LD_INT 4
59459: STR
59460: PUSH
59461: LD_STRING )
59463: STR
59464: PPUSH
59465: CALL_OW 559
// end ;
59469: LD_VAR 0 1
59473: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59474: LD_INT 0
59476: PPUSH
59477: PPUSH
59478: PPUSH
59479: PPUSH
59480: PPUSH
59481: PPUSH
59482: PPUSH
59483: PPUSH
59484: PPUSH
// for i := 1 to 8 do
59485: LD_ADDR_VAR 0 2
59489: PUSH
59490: DOUBLE
59491: LD_INT 1
59493: DEC
59494: ST_TO_ADDR
59495: LD_INT 8
59497: PUSH
59498: FOR_TO
59499: IFFALSE 59884
// begin if mpSidePositions [ i ] then
59501: LD_EXP 7
59505: PUSH
59506: LD_VAR 0 2
59510: ARRAY
59511: IFFALSE 59882
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59513: LD_ADDR_VAR 0 7
59517: PUSH
59518: LD_INT 22
59520: PUSH
59521: LD_VAR 0 2
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 21
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PPUSH
59544: CALL_OW 69
59548: PPUSH
59549: CALL 11480 0 1
59553: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59554: LD_ADDR_VAR 0 9
59558: PUSH
59559: LD_INT 22
59561: PUSH
59562: LD_VAR 0 2
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: LD_INT 30
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 30
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PPUSH
59603: CALL_OW 69
59607: ST_TO_ADDR
// crates := 0 ;
59608: LD_ADDR_VAR 0 4
59612: PUSH
59613: LD_INT 0
59615: ST_TO_ADDR
// oil := 0 ;
59616: LD_ADDR_VAR 0 5
59620: PUSH
59621: LD_INT 0
59623: ST_TO_ADDR
// sib := 0 ;
59624: LD_ADDR_VAR 0 6
59628: PUSH
59629: LD_INT 0
59631: ST_TO_ADDR
// if bases then
59632: LD_VAR 0 9
59636: IFFALSE 59742
// begin for j in bases do
59638: LD_ADDR_VAR 0 3
59642: PUSH
59643: LD_VAR 0 9
59647: PUSH
59648: FOR_IN
59649: IFFALSE 59740
// begin base := GetBase ( j ) ;
59651: LD_ADDR_VAR 0 8
59655: PUSH
59656: LD_VAR 0 3
59660: PPUSH
59661: CALL_OW 274
59665: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
59666: LD_ADDR_VAR 0 4
59670: PUSH
59671: LD_VAR 0 4
59675: PUSH
59676: LD_VAR 0 8
59680: PPUSH
59681: LD_INT 1
59683: PPUSH
59684: CALL_OW 275
59688: PLUS
59689: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
59690: LD_ADDR_VAR 0 5
59694: PUSH
59695: LD_VAR 0 5
59699: PUSH
59700: LD_VAR 0 8
59704: PPUSH
59705: LD_INT 2
59707: PPUSH
59708: CALL_OW 275
59712: PLUS
59713: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
59714: LD_ADDR_VAR 0 6
59718: PUSH
59719: LD_VAR 0 6
59723: PUSH
59724: LD_VAR 0 8
59728: PPUSH
59729: LD_INT 3
59731: PPUSH
59732: CALL_OW 275
59736: PLUS
59737: ST_TO_ADDR
// end ;
59738: GO 59648
59740: POP
59741: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
59742: LD_STRING setSpecText(
59744: PUSH
59745: LD_VAR 0 2
59749: STR
59750: PUSH
59751: LD_STRING ,
59753: STR
59754: PUSH
59755: LD_INT 2
59757: STR
59758: PUSH
59759: LD_STRING ,
59761: STR
59762: PUSH
59763: LD_VAR 0 4
59767: STR
59768: PUSH
59769: LD_STRING )
59771: STR
59772: PPUSH
59773: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
59777: LD_STRING setSpecText(
59779: PUSH
59780: LD_VAR 0 2
59784: STR
59785: PUSH
59786: LD_STRING ,
59788: STR
59789: PUSH
59790: LD_INT 3
59792: STR
59793: PUSH
59794: LD_STRING ,
59796: STR
59797: PUSH
59798: LD_VAR 0 5
59802: STR
59803: PUSH
59804: LD_STRING )
59806: STR
59807: PPUSH
59808: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
59812: LD_STRING setSpecText(
59814: PUSH
59815: LD_VAR 0 2
59819: STR
59820: PUSH
59821: LD_STRING ,
59823: STR
59824: PUSH
59825: LD_INT 4
59827: STR
59828: PUSH
59829: LD_STRING ,
59831: STR
59832: PUSH
59833: LD_VAR 0 6
59837: STR
59838: PUSH
59839: LD_STRING )
59841: STR
59842: PPUSH
59843: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
59847: LD_STRING setSpecText(
59849: PUSH
59850: LD_VAR 0 2
59854: STR
59855: PUSH
59856: LD_STRING ,
59858: STR
59859: PUSH
59860: LD_INT 5
59862: STR
59863: PUSH
59864: LD_STRING ,
59866: STR
59867: PUSH
59868: LD_VAR 0 7
59872: STR
59873: PUSH
59874: LD_STRING )
59876: STR
59877: PPUSH
59878: CALL_OW 559
// end ; end ;
59882: GO 59498
59884: POP
59885: POP
// end ;
59886: LD_VAR 0 1
59890: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
59891: LD_INT 2
59893: PUSH
59894: LD_INT 30
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 30
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: PPUSH
59919: CALL_OW 69
59923: IFFALSE 59933
59925: GO 59927
59927: DISABLE
// begin enable ;
59928: ENABLE
// UpdateSpectatorBar ;
59929: CALL 59474 0 0
// end ;
59933: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59934: LD_INT 0
59936: PPUSH
// end ;
59937: LD_VAR 0 12
59941: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59942: LD_INT 0
59944: PPUSH
59945: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59946: LD_VAR 0 1
59950: NOT
59951: PUSH
59952: LD_VAR 0 2
59956: PPUSH
59957: LD_VAR 0 3
59961: PPUSH
59962: CALL_OW 488
59966: NOT
59967: OR
59968: PUSH
59969: LD_VAR 0 1
59973: PPUSH
59974: CALL_OW 266
59978: PUSH
59979: LD_INT 3
59981: NONEQUAL
59982: PUSH
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 247
59992: PUSH
59993: LD_INT 1
59995: EQUAL
59996: NOT
59997: AND
59998: OR
59999: IFFALSE 60003
// exit ;
60001: GO 60285
// if GetType ( factory ) = unit_human then
60003: LD_VAR 0 1
60007: PPUSH
60008: CALL_OW 247
60012: PUSH
60013: LD_INT 1
60015: EQUAL
60016: IFFALSE 60033
// factory := IsInUnit ( factory ) ;
60018: LD_ADDR_VAR 0 1
60022: PUSH
60023: LD_VAR 0 1
60027: PPUSH
60028: CALL_OW 310
60032: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60033: LD_VAR 0 1
60037: PPUSH
60038: CALL_OW 266
60042: PUSH
60043: LD_INT 3
60045: NONEQUAL
60046: IFFALSE 60050
// exit ;
60048: GO 60285
// for i := 1 to Count ( factoryWaypoints ) do
60050: LD_ADDR_VAR 0 5
60054: PUSH
60055: DOUBLE
60056: LD_INT 1
60058: DEC
60059: ST_TO_ADDR
60060: LD_EXP 55
60064: PPUSH
60065: CALL 11480 0 1
60069: PUSH
60070: FOR_TO
60071: IFFALSE 60233
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60073: LD_VAR 0 2
60077: PPUSH
60078: LD_VAR 0 3
60082: PPUSH
60083: CALL_OW 428
60087: PUSH
60088: LD_EXP 55
60092: PUSH
60093: LD_VAR 0 5
60097: ARRAY
60098: PUSH
60099: LD_INT 2
60101: ARRAY
60102: EQUAL
60103: IFFALSE 60135
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60105: LD_ADDR_EXP 55
60109: PUSH
60110: LD_EXP 55
60114: PPUSH
60115: LD_VAR 0 5
60119: PPUSH
60120: CALL_OW 3
60124: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60125: CALL 60290 0 0
// exit ;
60129: POP
60130: POP
60131: GO 60285
// end else
60133: GO 60231
// if factory = factoryWaypoints [ i ] [ 2 ] then
60135: LD_VAR 0 1
60139: PUSH
60140: LD_EXP 55
60144: PUSH
60145: LD_VAR 0 5
60149: ARRAY
60150: PUSH
60151: LD_INT 2
60153: ARRAY
60154: EQUAL
60155: IFFALSE 60231
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60157: LD_ADDR_EXP 55
60161: PUSH
60162: LD_EXP 55
60166: PPUSH
60167: LD_VAR 0 5
60171: PPUSH
60172: CALL_OW 3
60176: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60177: LD_ADDR_EXP 55
60181: PUSH
60182: LD_EXP 55
60186: PPUSH
60187: LD_VAR 0 1
60191: PPUSH
60192: CALL_OW 255
60196: PUSH
60197: LD_VAR 0 1
60201: PUSH
60202: LD_VAR 0 2
60206: PUSH
60207: LD_VAR 0 3
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: PPUSH
60218: CALL 47089 0 2
60222: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60223: CALL 60290 0 0
// exit ;
60227: POP
60228: POP
60229: GO 60285
// end ; end ;
60231: GO 60070
60233: POP
60234: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60235: LD_ADDR_EXP 55
60239: PUSH
60240: LD_EXP 55
60244: PPUSH
60245: LD_VAR 0 1
60249: PPUSH
60250: CALL_OW 255
60254: PUSH
60255: LD_VAR 0 1
60259: PUSH
60260: LD_VAR 0 2
60264: PUSH
60265: LD_VAR 0 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: PPUSH
60276: CALL 47089 0 2
60280: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60281: CALL 60290 0 0
// end ;
60285: LD_VAR 0 4
60289: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60290: LD_INT 0
60292: PPUSH
60293: PPUSH
60294: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60295: LD_STRING resetFactoryWaypoint();
60297: PPUSH
60298: CALL_OW 559
// if factoryWaypoints then
60302: LD_EXP 55
60306: IFFALSE 60427
// begin list := factoryWaypoints ;
60308: LD_ADDR_VAR 0 3
60312: PUSH
60313: LD_EXP 55
60317: ST_TO_ADDR
// for i := 1 to list do
60318: LD_ADDR_VAR 0 2
60322: PUSH
60323: DOUBLE
60324: LD_INT 1
60326: DEC
60327: ST_TO_ADDR
60328: LD_VAR 0 3
60332: PUSH
60333: FOR_TO
60334: IFFALSE 60425
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60336: LD_STRING setFactoryWaypointXY(
60338: PUSH
60339: LD_VAR 0 3
60343: PUSH
60344: LD_VAR 0 2
60348: ARRAY
60349: PUSH
60350: LD_INT 1
60352: ARRAY
60353: STR
60354: PUSH
60355: LD_STRING ,
60357: STR
60358: PUSH
60359: LD_VAR 0 3
60363: PUSH
60364: LD_VAR 0 2
60368: ARRAY
60369: PUSH
60370: LD_INT 2
60372: ARRAY
60373: STR
60374: PUSH
60375: LD_STRING ,
60377: STR
60378: PUSH
60379: LD_VAR 0 3
60383: PUSH
60384: LD_VAR 0 2
60388: ARRAY
60389: PUSH
60390: LD_INT 3
60392: ARRAY
60393: STR
60394: PUSH
60395: LD_STRING ,
60397: STR
60398: PUSH
60399: LD_VAR 0 3
60403: PUSH
60404: LD_VAR 0 2
60408: ARRAY
60409: PUSH
60410: LD_INT 4
60412: ARRAY
60413: STR
60414: PUSH
60415: LD_STRING )
60417: STR
60418: PPUSH
60419: CALL_OW 559
60423: GO 60333
60425: POP
60426: POP
// end ; end ;
60427: LD_VAR 0 1
60431: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60432: LD_INT 0
60434: PPUSH
// if HexInfo ( x , y ) = warehouse then
60435: LD_VAR 0 2
60439: PPUSH
60440: LD_VAR 0 3
60444: PPUSH
60445: CALL_OW 428
60449: PUSH
60450: LD_VAR 0 1
60454: EQUAL
60455: IFFALSE 60482
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60457: LD_ADDR_EXP 57
60461: PUSH
60462: LD_EXP 57
60466: PPUSH
60467: LD_VAR 0 1
60471: PPUSH
60472: LD_INT 0
60474: PPUSH
60475: CALL_OW 1
60479: ST_TO_ADDR
60480: GO 60533
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60482: LD_ADDR_EXP 57
60486: PUSH
60487: LD_EXP 57
60491: PPUSH
60492: LD_VAR 0 1
60496: PPUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL_OW 255
60506: PUSH
60507: LD_VAR 0 1
60511: PUSH
60512: LD_VAR 0 2
60516: PUSH
60517: LD_VAR 0 3
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: PPUSH
60528: CALL_OW 1
60532: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60533: CALL 60542 0 0
// end ;
60537: LD_VAR 0 4
60541: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60542: LD_INT 0
60544: PPUSH
60545: PPUSH
60546: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60547: LD_STRING resetWarehouseGatheringPoints();
60549: PPUSH
60550: CALL_OW 559
// if warehouseGatheringPoints then
60554: LD_EXP 57
60558: IFFALSE 60684
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60560: LD_ADDR_VAR 0 3
60564: PUSH
60565: LD_EXP 57
60569: PPUSH
60570: CALL 50857 0 1
60574: ST_TO_ADDR
// for i := 1 to list do
60575: LD_ADDR_VAR 0 2
60579: PUSH
60580: DOUBLE
60581: LD_INT 1
60583: DEC
60584: ST_TO_ADDR
60585: LD_VAR 0 3
60589: PUSH
60590: FOR_TO
60591: IFFALSE 60682
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60593: LD_STRING setWarehouseGatheringPointXY(
60595: PUSH
60596: LD_VAR 0 3
60600: PUSH
60601: LD_VAR 0 2
60605: ARRAY
60606: PUSH
60607: LD_INT 1
60609: ARRAY
60610: STR
60611: PUSH
60612: LD_STRING ,
60614: STR
60615: PUSH
60616: LD_VAR 0 3
60620: PUSH
60621: LD_VAR 0 2
60625: ARRAY
60626: PUSH
60627: LD_INT 2
60629: ARRAY
60630: STR
60631: PUSH
60632: LD_STRING ,
60634: STR
60635: PUSH
60636: LD_VAR 0 3
60640: PUSH
60641: LD_VAR 0 2
60645: ARRAY
60646: PUSH
60647: LD_INT 3
60649: ARRAY
60650: STR
60651: PUSH
60652: LD_STRING ,
60654: STR
60655: PUSH
60656: LD_VAR 0 3
60660: PUSH
60661: LD_VAR 0 2
60665: ARRAY
60666: PUSH
60667: LD_INT 4
60669: ARRAY
60670: STR
60671: PUSH
60672: LD_STRING )
60674: STR
60675: PPUSH
60676: CALL_OW 559
60680: GO 60590
60682: POP
60683: POP
// end ; end ;
60684: LD_VAR 0 1
60688: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60689: LD_INT 0
60691: PPUSH
60692: PPUSH
// if not mpSidePositions then
60693: LD_EXP 7
60697: NOT
60698: IFFALSE 60702
// exit ;
60700: GO 60773
// result :=  ;
60702: LD_ADDR_VAR 0 1
60706: PUSH
60707: LD_STRING 
60709: ST_TO_ADDR
// for i := 1 to 8 do
60710: LD_ADDR_VAR 0 2
60714: PUSH
60715: DOUBLE
60716: LD_INT 1
60718: DEC
60719: ST_TO_ADDR
60720: LD_INT 8
60722: PUSH
60723: FOR_TO
60724: IFFALSE 60754
// begin result := result & mpSidePositions [ i ] & ; ;
60726: LD_ADDR_VAR 0 1
60730: PUSH
60731: LD_VAR 0 1
60735: PUSH
60736: LD_EXP 7
60740: PUSH
60741: LD_VAR 0 2
60745: ARRAY
60746: STR
60747: PUSH
60748: LD_STRING ;
60750: STR
60751: ST_TO_ADDR
// end ;
60752: GO 60723
60754: POP
60755: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60756: LD_STRING setMultiplayerRealPosition("
60758: PUSH
60759: LD_VAR 0 1
60763: STR
60764: PUSH
60765: LD_STRING ");
60767: STR
60768: PPUSH
60769: CALL_OW 559
// end ;
60773: LD_VAR 0 1
60777: RET
