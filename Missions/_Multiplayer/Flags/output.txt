// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 43454 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 43577 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 0 , 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ ] , [ ] , [ ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 1
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 3
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: LD_INT 1
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: EMPTY
 279: PUSH
 280: EMPTY
 281: PUSH
 282: EMPTY
 283: PUSH
 284: LD_INT 0
 286: PUSH
 287: LD_INT 1
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 1
 296: NEG
 297: PUSH
 298: LD_INT 350
 300: PUSH
 301: LD_INT 700
 303: PUSH
 304: LD_INT 1400
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 0
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 0
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: LD_INT 2
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 0
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: LD_INT 2
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: LD_INT 1
 360: PUSH
 361: LD_INT 31500
 363: PUSH
 364: LD_INT 52500
 366: PUSH
 367: LD_INT 63000
 369: PUSH
 370: LD_INT 94500
 372: PUSH
 373: LD_INT 126000
 375: PUSH
 376: LD_INT 189000
 378: PUSH
 379: LD_INT 210000
 381: PUSH
 382: LD_INT 252000
 384: PUSH
 385: LD_INT 378000
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: PUSH
 403: EMPTY
 404: PUSH
 405: LD_INT 0
 407: PUSH
 408: LD_INT 6300
 410: PUSH
 411: LD_INT 10500
 413: PUSH
 414: LD_INT 16800
 416: PUSH
 417: LD_INT 21000
 419: PUSH
 420: LD_INT 25200
 422: PUSH
 423: LD_INT 31500
 425: PUSH
 426: LD_INT 42000
 428: PUSH
 429: LD_INT 63000
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 3 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 0 , 0 , 0 , 1 , 0 0$20 , 1 , 1 , 1 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 464: LD_ADDR_EXP 4
 468: PUSH
 469: LD_INT 1
 471: PUSH
 472: LD_INT 15
 474: PUSH
 475: LD_INT 3
 477: PUSH
 478: LD_INT 100
 480: PUSH
 481: LD_INT 30
 483: PUSH
 484: LD_INT 0
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 3
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: LD_INT 2
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: LD_INT 0
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: LD_INT 1
 512: PUSH
 513: LD_INT 700
 515: PUSH
 516: LD_INT 1
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: LD_INT 31500
 527: PUSH
 528: LD_INT 0
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 6300
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// mpGameType := 1 ;
 558: LD_ADDR_EXP 1
 562: PUSH
 563: LD_INT 1
 565: ST_TO_ADDR
// your_side := 1 ;
 566: LD_ADDR_OWVAR 2
 570: PUSH
 571: LD_INT 1
 573: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 574: LD_ADDR_EXP 5
 578: PUSH
 579: LD_INT 8
 581: PUSH
 582: LD_INT 2
 584: PUSH
 585: LD_INT 3
 587: PUSH
 588: LD_INT 4
 590: PUSH
 591: LD_INT 5
 593: PUSH
 594: LD_INT 6
 596: PUSH
 597: LD_INT 7
 599: PUSH
 600: LD_INT 1
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: ST_TO_ADDR
// mpSideTeams := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 613: LD_ADDR_EXP 6
 617: PUSH
 618: LD_INT 8
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 3
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: LD_INT 5
 632: PUSH
 633: LD_INT 6
 635: PUSH
 636: LD_INT 7
 638: PUSH
 639: LD_INT 1
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: LD_INT 2
 671: PUSH
 672: LD_INT 3
 674: PUSH
 675: LD_INT 1
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpTeams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: EMPTY
 700: LIST
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: EMPTY
 706: LIST
 707: PUSH
 708: LD_INT 3
 710: PUSH
 711: EMPTY
 712: LIST
 713: PUSH
 714: LD_INT 4
 716: PUSH
 717: EMPTY
 718: LIST
 719: PUSH
 720: LD_INT 5
 722: PUSH
 723: EMPTY
 724: LIST
 725: PUSH
 726: LD_INT 6
 728: PUSH
 729: EMPTY
 730: LIST
 731: PUSH
 732: LD_INT 7
 734: PUSH
 735: EMPTY
 736: LIST
 737: PUSH
 738: LD_INT 8
 740: PUSH
 741: EMPTY
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: ST_TO_ADDR
// mpTeamGame := false ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_INT 0
 761: ST_TO_ADDR
// end ;
 762: LD_VAR 0 1
 766: RET
// export function GetMultiplayerMapData ; var all , hasOil , hasSib ; begin
 767: LD_INT 0
 769: PPUSH
 770: PPUSH
 771: PPUSH
 772: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 773: LD_ADDR_EXP 15
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 11
 786: PUSH
 787: LD_INT 12
 789: PUSH
 790: LD_INT 13
 792: PUSH
 793: LD_INT 14
 795: PUSH
 796: LD_INT 15
 798: PUSH
 799: LD_INT 16
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 812: LD_ADDR_EXP 14
 816: PUSH
 817: LD_INT 18
 819: PUSH
 820: LD_INT 19
 822: PUSH
 823: LD_INT 20
 825: PUSH
 826: LD_INT 21
 828: PUSH
 829: LD_INT 22
 831: PUSH
 832: LD_INT 23
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: LD_EXP 15
 847: UNION
 848: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 849: LD_ADDR_VAR 0 3
 853: PUSH
 854: LD_EXP 4
 858: PUSH
 859: LD_INT 6
 861: ARRAY
 862: PUSH
 863: LD_INT 0
 865: GREATER
 866: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 867: LD_ADDR_VAR 0 4
 871: PUSH
 872: LD_EXP 4
 876: PUSH
 877: LD_INT 7
 879: ARRAY
 880: PUSH
 881: LD_INT 0
 883: GREATER
 884: ST_TO_ADDR
// if hasOil then
 885: LD_VAR 0 3
 889: IFFALSE 1028
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
 891: LD_ADDR_VAR 0 2
 895: PUSH
 896: LD_EXP 4
 900: PUSH
 901: LD_INT 6
 903: ARRAY
 904: PUSH
 905: LD_INT 2
 907: EQUAL
 908: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
 909: LD_ADDR_EXP 10
 913: PUSH
 914: LD_INT 24
 916: PPUSH
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL 43210 0 2
 926: PUSH
 927: LD_INT 25
 929: PPUSH
 930: LD_VAR 0 2
 934: PPUSH
 935: CALL 43210 0 2
 939: PUSH
 940: LD_INT 26
 942: PPUSH
 943: LD_VAR 0 2
 947: PPUSH
 948: CALL 43210 0 2
 952: PUSH
 953: LD_INT 27
 955: PPUSH
 956: LD_VAR 0 2
 960: PPUSH
 961: CALL 43210 0 2
 965: PUSH
 966: LD_INT 28
 968: PPUSH
 969: LD_VAR 0 2
 973: PPUSH
 974: CALL 43210 0 2
 978: PUSH
 979: LD_INT 29
 981: PPUSH
 982: LD_VAR 0 2
 986: PPUSH
 987: CALL 43210 0 2
 991: PUSH
 992: LD_INT 30
 994: PPUSH
 995: LD_VAR 0 2
 999: PPUSH
1000: CALL 43210 0 2
1004: PUSH
1005: LD_INT 31
1007: PPUSH
1008: LD_VAR 0 2
1012: PPUSH
1013: CALL 43210 0 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: ST_TO_ADDR
// end ; if hasSib then
1028: LD_VAR 0 4
1032: IFFALSE 1171
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_EXP 4
1043: PUSH
1044: LD_INT 7
1046: ARRAY
1047: PUSH
1048: LD_INT 2
1050: EQUAL
1051: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1052: LD_ADDR_EXP 11
1056: PUSH
1057: LD_INT 32
1059: PPUSH
1060: LD_VAR 0 2
1064: PPUSH
1065: CALL 43210 0 2
1069: PUSH
1070: LD_INT 33
1072: PPUSH
1073: LD_VAR 0 2
1077: PPUSH
1078: CALL 43210 0 2
1082: PUSH
1083: LD_INT 34
1085: PPUSH
1086: LD_VAR 0 2
1090: PPUSH
1091: CALL 43210 0 2
1095: PUSH
1096: LD_INT 35
1098: PPUSH
1099: LD_VAR 0 2
1103: PPUSH
1104: CALL 43210 0 2
1108: PUSH
1109: LD_INT 36
1111: PPUSH
1112: LD_VAR 0 2
1116: PPUSH
1117: CALL 43210 0 2
1121: PUSH
1122: LD_INT 37
1124: PPUSH
1125: LD_VAR 0 2
1129: PPUSH
1130: CALL 43210 0 2
1134: PUSH
1135: LD_INT 38
1137: PPUSH
1138: LD_VAR 0 2
1142: PPUSH
1143: CALL 43210 0 2
1147: PUSH
1148: LD_INT 39
1150: PPUSH
1151: LD_VAR 0 2
1155: PPUSH
1156: CALL 43210 0 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: ST_TO_ADDR
// end ; mpDepots := [ GetBuildingFromArea ( depotArea1 , 5 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 1 ) , GetBuildingFromArea ( depotArea5 , 2 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 3 ) , GetBuildingFromArea ( depotArea8 , 4 ) ] ;
1171: LD_ADDR_EXP 12
1175: PUSH
1176: LD_INT 40
1178: PPUSH
1179: LD_INT 5
1181: PPUSH
1182: CALL 43377 0 2
1186: PUSH
1187: LD_INT 41
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: CALL 43377 0 2
1197: PUSH
1198: LD_INT 42
1200: PPUSH
1201: LD_INT 0
1203: PPUSH
1204: CALL 43377 0 2
1208: PUSH
1209: LD_INT 43
1211: PPUSH
1212: LD_INT 1
1214: PPUSH
1215: CALL 43377 0 2
1219: PUSH
1220: LD_INT 44
1222: PPUSH
1223: LD_INT 2
1225: PPUSH
1226: CALL 43377 0 2
1230: PUSH
1231: LD_INT 45
1233: PPUSH
1234: LD_INT 5
1236: PPUSH
1237: CALL 43377 0 2
1241: PUSH
1242: LD_INT 46
1244: PPUSH
1245: LD_INT 3
1247: PPUSH
1248: CALL 43377 0 2
1252: PUSH
1253: LD_INT 47
1255: PPUSH
1256: LD_INT 4
1258: PPUSH
1259: CALL 43377 0 2
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// mpBuildings := [ ] ;
1274: LD_ADDR_EXP 13
1278: PUSH
1279: EMPTY
1280: ST_TO_ADDR
// end ; end_of_file
1281: LD_VAR 0 1
1285: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1286: LD_INT 0
1288: PPUSH
1289: PPUSH
// if exist_mode then
1290: LD_VAR 0 2
1294: IFFALSE 1319
// unit := CreateCharacter ( prefix & ident ) else
1296: LD_ADDR_VAR 0 5
1300: PUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_VAR 0 1
1310: STR
1311: PPUSH
1312: CALL_OW 34
1316: ST_TO_ADDR
1317: GO 1334
// unit := NewCharacter ( ident ) ;
1319: LD_ADDR_VAR 0 5
1323: PUSH
1324: LD_VAR 0 1
1328: PPUSH
1329: CALL_OW 25
1333: ST_TO_ADDR
// result := unit ;
1334: LD_ADDR_VAR 0 4
1338: PUSH
1339: LD_VAR 0 5
1343: ST_TO_ADDR
// end ;
1344: LD_VAR 0 4
1348: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1349: LD_INT 0
1351: PPUSH
1352: PPUSH
// if not side or not nation then
1353: LD_VAR 0 1
1357: NOT
1358: PUSH
1359: LD_VAR 0 2
1363: NOT
1364: OR
1365: IFFALSE 1369
// exit ;
1367: GO 2137
// case nation of nation_american :
1369: LD_VAR 0 2
1373: PUSH
1374: LD_INT 1
1376: DOUBLE
1377: EQUAL
1378: IFTRUE 1382
1380: GO 1596
1382: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: LD_INT 35
1390: PUSH
1391: LD_INT 45
1393: PUSH
1394: LD_INT 46
1396: PUSH
1397: LD_INT 47
1399: PUSH
1400: LD_INT 82
1402: PUSH
1403: LD_INT 83
1405: PUSH
1406: LD_INT 84
1408: PUSH
1409: LD_INT 85
1411: PUSH
1412: LD_INT 86
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: LD_INT 2
1420: PUSH
1421: LD_INT 6
1423: PUSH
1424: LD_INT 15
1426: PUSH
1427: LD_INT 16
1429: PUSH
1430: LD_INT 7
1432: PUSH
1433: LD_INT 12
1435: PUSH
1436: LD_INT 13
1438: PUSH
1439: LD_INT 10
1441: PUSH
1442: LD_INT 14
1444: PUSH
1445: LD_INT 20
1447: PUSH
1448: LD_INT 21
1450: PUSH
1451: LD_INT 22
1453: PUSH
1454: LD_INT 25
1456: PUSH
1457: LD_INT 32
1459: PUSH
1460: LD_INT 27
1462: PUSH
1463: LD_INT 36
1465: PUSH
1466: LD_INT 69
1468: PUSH
1469: LD_INT 39
1471: PUSH
1472: LD_INT 34
1474: PUSH
1475: LD_INT 40
1477: PUSH
1478: LD_INT 48
1480: PUSH
1481: LD_INT 49
1483: PUSH
1484: LD_INT 50
1486: PUSH
1487: LD_INT 51
1489: PUSH
1490: LD_INT 52
1492: PUSH
1493: LD_INT 53
1495: PUSH
1496: LD_INT 54
1498: PUSH
1499: LD_INT 55
1501: PUSH
1502: LD_INT 56
1504: PUSH
1505: LD_INT 57
1507: PUSH
1508: LD_INT 58
1510: PUSH
1511: LD_INT 59
1513: PUSH
1514: LD_INT 60
1516: PUSH
1517: LD_INT 61
1519: PUSH
1520: LD_INT 62
1522: PUSH
1523: LD_INT 80
1525: PUSH
1526: LD_INT 82
1528: PUSH
1529: LD_INT 83
1531: PUSH
1532: LD_INT 84
1534: PUSH
1535: LD_INT 85
1537: PUSH
1538: LD_INT 86
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: ST_TO_ADDR
1594: GO 2061
1596: LD_INT 2
1598: DOUBLE
1599: EQUAL
1600: IFTRUE 1604
1602: GO 1830
1604: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1605: LD_ADDR_VAR 0 4
1609: PUSH
1610: LD_INT 35
1612: PUSH
1613: LD_INT 45
1615: PUSH
1616: LD_INT 46
1618: PUSH
1619: LD_INT 47
1621: PUSH
1622: LD_INT 82
1624: PUSH
1625: LD_INT 83
1627: PUSH
1628: LD_INT 84
1630: PUSH
1631: LD_INT 85
1633: PUSH
1634: LD_INT 87
1636: PUSH
1637: LD_INT 70
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: LD_INT 11
1645: PUSH
1646: LD_INT 3
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: LD_INT 5
1654: PUSH
1655: LD_INT 6
1657: PUSH
1658: LD_INT 15
1660: PUSH
1661: LD_INT 18
1663: PUSH
1664: LD_INT 7
1666: PUSH
1667: LD_INT 17
1669: PUSH
1670: LD_INT 8
1672: PUSH
1673: LD_INT 20
1675: PUSH
1676: LD_INT 21
1678: PUSH
1679: LD_INT 22
1681: PUSH
1682: LD_INT 72
1684: PUSH
1685: LD_INT 26
1687: PUSH
1688: LD_INT 69
1690: PUSH
1691: LD_INT 39
1693: PUSH
1694: LD_INT 40
1696: PUSH
1697: LD_INT 41
1699: PUSH
1700: LD_INT 42
1702: PUSH
1703: LD_INT 43
1705: PUSH
1706: LD_INT 48
1708: PUSH
1709: LD_INT 49
1711: PUSH
1712: LD_INT 50
1714: PUSH
1715: LD_INT 51
1717: PUSH
1718: LD_INT 52
1720: PUSH
1721: LD_INT 53
1723: PUSH
1724: LD_INT 54
1726: PUSH
1727: LD_INT 55
1729: PUSH
1730: LD_INT 56
1732: PUSH
1733: LD_INT 60
1735: PUSH
1736: LD_INT 61
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: LD_INT 66
1744: PUSH
1745: LD_INT 67
1747: PUSH
1748: LD_INT 68
1750: PUSH
1751: LD_INT 81
1753: PUSH
1754: LD_INT 82
1756: PUSH
1757: LD_INT 83
1759: PUSH
1760: LD_INT 84
1762: PUSH
1763: LD_INT 85
1765: PUSH
1766: LD_INT 87
1768: PUSH
1769: LD_INT 88
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: ST_TO_ADDR
1828: GO 2061
1830: LD_INT 3
1832: DOUBLE
1833: EQUAL
1834: IFTRUE 1838
1836: GO 2060
1838: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_INT 46
1846: PUSH
1847: LD_INT 47
1849: PUSH
1850: LD_INT 1
1852: PUSH
1853: LD_INT 2
1855: PUSH
1856: LD_INT 82
1858: PUSH
1859: LD_INT 83
1861: PUSH
1862: LD_INT 84
1864: PUSH
1865: LD_INT 85
1867: PUSH
1868: LD_INT 86
1870: PUSH
1871: LD_INT 11
1873: PUSH
1874: LD_INT 9
1876: PUSH
1877: LD_INT 20
1879: PUSH
1880: LD_INT 19
1882: PUSH
1883: LD_INT 21
1885: PUSH
1886: LD_INT 24
1888: PUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 25
1894: PUSH
1895: LD_INT 28
1897: PUSH
1898: LD_INT 29
1900: PUSH
1901: LD_INT 30
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 37
1909: PUSH
1910: LD_INT 38
1912: PUSH
1913: LD_INT 32
1915: PUSH
1916: LD_INT 27
1918: PUSH
1919: LD_INT 33
1921: PUSH
1922: LD_INT 69
1924: PUSH
1925: LD_INT 39
1927: PUSH
1928: LD_INT 34
1930: PUSH
1931: LD_INT 40
1933: PUSH
1934: LD_INT 71
1936: PUSH
1937: LD_INT 23
1939: PUSH
1940: LD_INT 44
1942: PUSH
1943: LD_INT 48
1945: PUSH
1946: LD_INT 49
1948: PUSH
1949: LD_INT 50
1951: PUSH
1952: LD_INT 51
1954: PUSH
1955: LD_INT 52
1957: PUSH
1958: LD_INT 53
1960: PUSH
1961: LD_INT 54
1963: PUSH
1964: LD_INT 55
1966: PUSH
1967: LD_INT 56
1969: PUSH
1970: LD_INT 57
1972: PUSH
1973: LD_INT 58
1975: PUSH
1976: LD_INT 59
1978: PUSH
1979: LD_INT 63
1981: PUSH
1982: LD_INT 64
1984: PUSH
1985: LD_INT 65
1987: PUSH
1988: LD_INT 82
1990: PUSH
1991: LD_INT 83
1993: PUSH
1994: LD_INT 84
1996: PUSH
1997: LD_INT 85
1999: PUSH
2000: LD_INT 86
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: ST_TO_ADDR
2058: GO 2061
2060: POP
// if state > - 1 and state < 3 then
2061: LD_VAR 0 3
2065: PUSH
2066: LD_INT 1
2068: NEG
2069: GREATER
2070: PUSH
2071: LD_VAR 0 3
2075: PUSH
2076: LD_INT 3
2078: LESS
2079: AND
2080: IFFALSE 2137
// for i in result do
2082: LD_ADDR_VAR 0 5
2086: PUSH
2087: LD_VAR 0 4
2091: PUSH
2092: FOR_IN
2093: IFFALSE 2135
// if GetTech ( i , side ) <> state then
2095: LD_VAR 0 5
2099: PPUSH
2100: LD_VAR 0 1
2104: PPUSH
2105: CALL_OW 321
2109: PUSH
2110: LD_VAR 0 3
2114: NONEQUAL
2115: IFFALSE 2133
// result := result diff i ;
2117: LD_ADDR_VAR 0 4
2121: PUSH
2122: LD_VAR 0 4
2126: PUSH
2127: LD_VAR 0 5
2131: DIFF
2132: ST_TO_ADDR
2133: GO 2092
2135: POP
2136: POP
// end ;
2137: LD_VAR 0 4
2141: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2142: LD_INT 0
2144: PPUSH
2145: PPUSH
2146: PPUSH
// result := true ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2155: LD_ADDR_VAR 0 5
2159: PUSH
2160: LD_VAR 0 2
2164: PPUSH
2165: CALL_OW 480
2169: ST_TO_ADDR
// if not tmp then
2170: LD_VAR 0 5
2174: NOT
2175: IFFALSE 2179
// exit ;
2177: GO 2228
// for i in tmp do
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_VAR 0 5
2188: PUSH
2189: FOR_IN
2190: IFFALSE 2226
// if GetTech ( i , side ) <> state_researched then
2192: LD_VAR 0 4
2196: PPUSH
2197: LD_VAR 0 1
2201: PPUSH
2202: CALL_OW 321
2206: PUSH
2207: LD_INT 2
2209: NONEQUAL
2210: IFFALSE 2224
// begin result := false ;
2212: LD_ADDR_VAR 0 3
2216: PUSH
2217: LD_INT 0
2219: ST_TO_ADDR
// exit ;
2220: POP
2221: POP
2222: GO 2228
// end ;
2224: GO 2189
2226: POP
2227: POP
// end ;
2228: LD_VAR 0 3
2232: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2233: LD_INT 0
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
2245: PPUSH
2246: PPUSH
2247: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2248: LD_VAR 0 1
2252: NOT
2253: PUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: CALL_OW 257
2263: PUSH
2264: LD_INT 9
2266: NONEQUAL
2267: OR
2268: IFFALSE 2272
// exit ;
2270: GO 2845
// side := GetSide ( unit ) ;
2272: LD_ADDR_VAR 0 9
2276: PUSH
2277: LD_VAR 0 1
2281: PPUSH
2282: CALL_OW 255
2286: ST_TO_ADDR
// tech_space := tech_spacanom ;
2287: LD_ADDR_VAR 0 12
2291: PUSH
2292: LD_INT 29
2294: ST_TO_ADDR
// tech_time := tech_taurad ;
2295: LD_ADDR_VAR 0 13
2299: PUSH
2300: LD_INT 28
2302: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2303: LD_ADDR_VAR 0 11
2307: PUSH
2308: LD_VAR 0 1
2312: PPUSH
2313: CALL_OW 310
2317: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2318: LD_VAR 0 11
2322: PPUSH
2323: CALL_OW 247
2327: PUSH
2328: LD_INT 2
2330: EQUAL
2331: IFFALSE 2335
// exit ;
2333: GO 2845
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2335: LD_ADDR_VAR 0 8
2339: PUSH
2340: LD_INT 81
2342: PUSH
2343: LD_VAR 0 9
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: LD_INT 21
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 69
2377: ST_TO_ADDR
// if not tmp then
2378: LD_VAR 0 8
2382: NOT
2383: IFFALSE 2387
// exit ;
2385: GO 2845
// if in_unit then
2387: LD_VAR 0 11
2391: IFFALSE 2415
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2393: LD_ADDR_VAR 0 10
2397: PUSH
2398: LD_VAR 0 8
2402: PPUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: CALL_OW 74
2412: ST_TO_ADDR
2413: GO 2435
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2415: LD_ADDR_VAR 0 10
2419: PUSH
2420: LD_VAR 0 8
2424: PPUSH
2425: LD_VAR 0 1
2429: PPUSH
2430: CALL_OW 74
2434: ST_TO_ADDR
// if not enemy then
2435: LD_VAR 0 10
2439: NOT
2440: IFFALSE 2444
// exit ;
2442: GO 2845
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2444: LD_VAR 0 11
2448: PUSH
2449: LD_VAR 0 11
2453: PPUSH
2454: LD_VAR 0 10
2458: PPUSH
2459: CALL_OW 296
2463: PUSH
2464: LD_INT 13
2466: GREATER
2467: AND
2468: PUSH
2469: LD_VAR 0 1
2473: PPUSH
2474: LD_VAR 0 10
2478: PPUSH
2479: CALL_OW 296
2483: PUSH
2484: LD_INT 12
2486: GREATER
2487: OR
2488: IFFALSE 2492
// exit ;
2490: GO 2845
// missile := [ 1 ] ;
2492: LD_ADDR_VAR 0 14
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2503: LD_VAR 0 9
2507: PPUSH
2508: LD_VAR 0 12
2512: PPUSH
2513: CALL_OW 325
2517: IFFALSE 2546
// missile := Replace ( missile , missile + 1 , 2 ) ;
2519: LD_ADDR_VAR 0 14
2523: PUSH
2524: LD_VAR 0 14
2528: PPUSH
2529: LD_VAR 0 14
2533: PUSH
2534: LD_INT 1
2536: PLUS
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 1
2545: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2546: LD_VAR 0 9
2550: PPUSH
2551: LD_VAR 0 13
2555: PPUSH
2556: CALL_OW 325
2560: PUSH
2561: LD_VAR 0 10
2565: PPUSH
2566: CALL_OW 255
2570: PPUSH
2571: LD_VAR 0 13
2575: PPUSH
2576: CALL_OW 325
2580: NOT
2581: AND
2582: IFFALSE 2611
// missile := Replace ( missile , missile + 1 , 3 ) ;
2584: LD_ADDR_VAR 0 14
2588: PUSH
2589: LD_VAR 0 14
2593: PPUSH
2594: LD_VAR 0 14
2598: PUSH
2599: LD_INT 1
2601: PLUS
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: CALL_OW 1
2610: ST_TO_ADDR
// if missile < 2 then
2611: LD_VAR 0 14
2615: PUSH
2616: LD_INT 2
2618: LESS
2619: IFFALSE 2623
// exit ;
2621: GO 2845
// x := GetX ( enemy ) ;
2623: LD_ADDR_VAR 0 4
2627: PUSH
2628: LD_VAR 0 10
2632: PPUSH
2633: CALL_OW 250
2637: ST_TO_ADDR
// y := GetY ( enemy ) ;
2638: LD_ADDR_VAR 0 5
2642: PUSH
2643: LD_VAR 0 10
2647: PPUSH
2648: CALL_OW 251
2652: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2653: LD_ADDR_VAR 0 6
2657: PUSH
2658: LD_VAR 0 4
2662: PUSH
2663: LD_INT 1
2665: NEG
2666: PPUSH
2667: LD_INT 1
2669: PPUSH
2670: CALL_OW 12
2674: PLUS
2675: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2676: LD_ADDR_VAR 0 7
2680: PUSH
2681: LD_VAR 0 5
2685: PUSH
2686: LD_INT 1
2688: NEG
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: CALL_OW 12
2697: PLUS
2698: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2699: LD_VAR 0 6
2703: PPUSH
2704: LD_VAR 0 7
2708: PPUSH
2709: CALL_OW 488
2713: NOT
2714: IFFALSE 2736
// begin _x := x ;
2716: LD_ADDR_VAR 0 6
2720: PUSH
2721: LD_VAR 0 4
2725: ST_TO_ADDR
// _y := y ;
2726: LD_ADDR_VAR 0 7
2730: PUSH
2731: LD_VAR 0 5
2735: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2736: LD_ADDR_VAR 0 3
2740: PUSH
2741: LD_INT 1
2743: PPUSH
2744: LD_VAR 0 14
2748: PPUSH
2749: CALL_OW 12
2753: ST_TO_ADDR
// case i of 1 :
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 1
2761: DOUBLE
2762: EQUAL
2763: IFTRUE 2767
2765: GO 2784
2767: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2768: LD_VAR 0 1
2772: PPUSH
2773: LD_VAR 0 10
2777: PPUSH
2778: CALL_OW 115
2782: GO 2845
2784: LD_INT 2
2786: DOUBLE
2787: EQUAL
2788: IFTRUE 2792
2790: GO 2814
2792: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_VAR 0 6
2802: PPUSH
2803: LD_VAR 0 7
2807: PPUSH
2808: CALL_OW 153
2812: GO 2845
2814: LD_INT 3
2816: DOUBLE
2817: EQUAL
2818: IFTRUE 2822
2820: GO 2844
2822: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 7
2837: PPUSH
2838: CALL_OW 154
2842: GO 2845
2844: POP
// end ;
2845: LD_VAR 0 2
2849: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2850: LD_INT 0
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
// if not unit or not building then
2858: LD_VAR 0 1
2862: NOT
2863: PUSH
2864: LD_VAR 0 2
2868: NOT
2869: OR
2870: IFFALSE 2874
// exit ;
2872: GO 3032
// x := GetX ( building ) ;
2874: LD_ADDR_VAR 0 5
2878: PUSH
2879: LD_VAR 0 2
2883: PPUSH
2884: CALL_OW 250
2888: ST_TO_ADDR
// y := GetY ( building ) ;
2889: LD_ADDR_VAR 0 6
2893: PUSH
2894: LD_VAR 0 2
2898: PPUSH
2899: CALL_OW 251
2903: ST_TO_ADDR
// for i = 0 to 5 do
2904: LD_ADDR_VAR 0 4
2908: PUSH
2909: DOUBLE
2910: LD_INT 0
2912: DEC
2913: ST_TO_ADDR
2914: LD_INT 5
2916: PUSH
2917: FOR_TO
2918: IFFALSE 3030
// begin _x := ShiftX ( x , i , 3 ) ;
2920: LD_ADDR_VAR 0 7
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: LD_VAR 0 4
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: CALL_OW 272
2942: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2943: LD_ADDR_VAR 0 8
2947: PUSH
2948: LD_VAR 0 6
2952: PPUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: LD_INT 3
2960: PPUSH
2961: CALL_OW 273
2965: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2966: LD_VAR 0 7
2970: PPUSH
2971: LD_VAR 0 8
2975: PPUSH
2976: CALL_OW 488
2980: NOT
2981: IFFALSE 2985
// continue ;
2983: GO 2917
// if HexInfo ( _x , _y ) = 0 then
2985: LD_VAR 0 7
2989: PPUSH
2990: LD_VAR 0 8
2994: PPUSH
2995: CALL_OW 428
2999: PUSH
3000: LD_INT 0
3002: EQUAL
3003: IFFALSE 3028
// begin ComMoveXY ( unit , _x , _y ) ;
3005: LD_VAR 0 1
3009: PPUSH
3010: LD_VAR 0 7
3014: PPUSH
3015: LD_VAR 0 8
3019: PPUSH
3020: CALL_OW 111
// exit ;
3024: POP
3025: POP
3026: GO 3032
// end ; end ;
3028: GO 2917
3030: POP
3031: POP
// end ;
3032: LD_VAR 0 3
3036: RET
// export function ScanBase ( side , base_area ) ; begin
3037: LD_INT 0
3039: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3040: LD_ADDR_VAR 0 3
3044: PUSH
3045: LD_VAR 0 2
3049: PPUSH
3050: LD_INT 81
3052: PUSH
3053: LD_VAR 0 1
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PPUSH
3062: CALL_OW 70
3066: ST_TO_ADDR
// end ;
3067: LD_VAR 0 3
3071: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3072: LD_INT 0
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// result := false ;
3078: LD_ADDR_VAR 0 2
3082: PUSH
3083: LD_INT 0
3085: ST_TO_ADDR
// side := GetSide ( unit ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_VAR 0 1
3095: PPUSH
3096: CALL_OW 255
3100: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_VAR 0 1
3110: PPUSH
3111: CALL_OW 248
3115: ST_TO_ADDR
// case nat of 1 :
3116: LD_VAR 0 4
3120: PUSH
3121: LD_INT 1
3123: DOUBLE
3124: EQUAL
3125: IFTRUE 3129
3127: GO 3140
3129: POP
// tech := tech_lassight ; 2 :
3130: LD_ADDR_VAR 0 5
3134: PUSH
3135: LD_INT 12
3137: ST_TO_ADDR
3138: GO 3179
3140: LD_INT 2
3142: DOUBLE
3143: EQUAL
3144: IFTRUE 3148
3146: GO 3159
3148: POP
// tech := tech_mortar ; 3 :
3149: LD_ADDR_VAR 0 5
3153: PUSH
3154: LD_INT 41
3156: ST_TO_ADDR
3157: GO 3179
3159: LD_INT 3
3161: DOUBLE
3162: EQUAL
3163: IFTRUE 3167
3165: GO 3178
3167: POP
// tech := tech_bazooka ; end ;
3168: LD_ADDR_VAR 0 5
3172: PUSH
3173: LD_INT 44
3175: ST_TO_ADDR
3176: GO 3179
3178: POP
// if Researched ( side , tech ) then
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_VAR 0 5
3188: PPUSH
3189: CALL_OW 325
3193: IFFALSE 3220
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_INT 5
3202: PUSH
3203: LD_INT 8
3205: PUSH
3206: LD_INT 9
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_VAR 0 4
3218: ARRAY
3219: ST_TO_ADDR
// end ;
3220: LD_VAR 0 2
3224: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3225: LD_INT 0
3227: PPUSH
3228: PPUSH
3229: PPUSH
// if not mines then
3230: LD_VAR 0 2
3234: NOT
3235: IFFALSE 3239
// exit ;
3237: GO 3383
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3239: LD_ADDR_VAR 0 5
3243: PUSH
3244: LD_INT 81
3246: PUSH
3247: LD_VAR 0 1
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 3
3258: PUSH
3259: LD_INT 21
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PPUSH
3277: CALL_OW 69
3281: ST_TO_ADDR
// for i in mines do
3282: LD_ADDR_VAR 0 4
3286: PUSH
3287: LD_VAR 0 2
3291: PUSH
3292: FOR_IN
3293: IFFALSE 3381
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3295: LD_VAR 0 4
3299: PUSH
3300: LD_INT 1
3302: ARRAY
3303: PPUSH
3304: LD_VAR 0 4
3308: PUSH
3309: LD_INT 2
3311: ARRAY
3312: PPUSH
3313: CALL_OW 458
3317: NOT
3318: IFFALSE 3322
// continue ;
3320: GO 3292
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3322: LD_VAR 0 4
3326: PUSH
3327: LD_INT 1
3329: ARRAY
3330: PPUSH
3331: LD_VAR 0 4
3335: PUSH
3336: LD_INT 2
3338: ARRAY
3339: PPUSH
3340: CALL_OW 428
3344: PUSH
3345: LD_VAR 0 5
3349: IN
3350: IFFALSE 3379
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3352: LD_VAR 0 4
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: PPUSH
3361: LD_VAR 0 4
3365: PUSH
3366: LD_INT 2
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 1
3374: PPUSH
3375: CALL_OW 456
// end ;
3379: GO 3292
3381: POP
3382: POP
// end ;
3383: LD_VAR 0 3
3387: RET
// export function Count ( array ) ; begin
3388: LD_INT 0
3390: PPUSH
// result := array + 0 ;
3391: LD_ADDR_VAR 0 2
3395: PUSH
3396: LD_VAR 0 1
3400: PUSH
3401: LD_INT 0
3403: PLUS
3404: ST_TO_ADDR
// end ;
3405: LD_VAR 0 2
3409: RET
// export function IsEmpty ( building ) ; begin
3410: LD_INT 0
3412: PPUSH
// if not building then
3413: LD_VAR 0 1
3417: NOT
3418: IFFALSE 3422
// exit ;
3420: GO 3465
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: LD_VAR 0 1
3431: PUSH
3432: LD_INT 22
3434: PUSH
3435: LD_VAR 0 1
3439: PPUSH
3440: CALL_OW 255
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 58
3451: PUSH
3452: EMPTY
3453: LIST
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: IN
3464: ST_TO_ADDR
// end ;
3465: LD_VAR 0 2
3469: RET
// export function IsNotFull ( building ) ; var places ; begin
3470: LD_INT 0
3472: PPUSH
3473: PPUSH
// if not building then
3474: LD_VAR 0 1
3478: NOT
3479: IFFALSE 3483
// exit ;
3481: GO 3511
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3483: LD_ADDR_VAR 0 2
3487: PUSH
3488: LD_VAR 0 1
3492: PPUSH
3493: LD_INT 3
3495: PUSH
3496: LD_INT 62
3498: PUSH
3499: EMPTY
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 72
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 2
3515: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// tmp := [ ] ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: EMPTY
3528: ST_TO_ADDR
// list := [ ] ;
3529: LD_ADDR_VAR 0 5
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// for i = 16 to 25 do
3536: LD_ADDR_VAR 0 4
3540: PUSH
3541: DOUBLE
3542: LD_INT 16
3544: DEC
3545: ST_TO_ADDR
3546: LD_INT 25
3548: PUSH
3549: FOR_TO
3550: IFFALSE 3623
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 22
3564: PUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 255
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 91
3581: PUSH
3582: LD_VAR 0 1
3586: PUSH
3587: LD_INT 6
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_INT 30
3597: PUSH
3598: LD_VAR 0 4
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: PPUSH
3615: CALL_OW 69
3619: ADD
3620: ST_TO_ADDR
3621: GO 3549
3623: POP
3624: POP
// for i = 1 to tmp do
3625: LD_ADDR_VAR 0 4
3629: PUSH
3630: DOUBLE
3631: LD_INT 1
3633: DEC
3634: ST_TO_ADDR
3635: LD_VAR 0 3
3639: PUSH
3640: FOR_TO
3641: IFFALSE 3729
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3643: LD_ADDR_VAR 0 5
3647: PUSH
3648: LD_VAR 0 5
3652: PUSH
3653: LD_VAR 0 3
3657: PUSH
3658: LD_VAR 0 4
3662: ARRAY
3663: PPUSH
3664: CALL_OW 266
3668: PUSH
3669: LD_VAR 0 3
3673: PUSH
3674: LD_VAR 0 4
3678: ARRAY
3679: PPUSH
3680: CALL_OW 250
3684: PUSH
3685: LD_VAR 0 3
3689: PUSH
3690: LD_VAR 0 4
3694: ARRAY
3695: PPUSH
3696: CALL_OW 251
3700: PUSH
3701: LD_VAR 0 3
3705: PUSH
3706: LD_VAR 0 4
3710: ARRAY
3711: PPUSH
3712: CALL_OW 254
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: ADD
3726: ST_TO_ADDR
3727: GO 3640
3729: POP
3730: POP
// result := list ;
3731: LD_ADDR_VAR 0 2
3735: PUSH
3736: LD_VAR 0 5
3740: ST_TO_ADDR
// end ;
3741: LD_VAR 0 2
3745: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3746: LD_INT 0
3748: PPUSH
3749: PPUSH
3750: PPUSH
3751: PPUSH
3752: PPUSH
3753: PPUSH
3754: PPUSH
// if not factory then
3755: LD_VAR 0 1
3759: NOT
3760: IFFALSE 3764
// exit ;
3762: GO 4357
// if control = control_apeman then
3764: LD_VAR 0 4
3768: PUSH
3769: LD_INT 5
3771: EQUAL
3772: IFFALSE 3881
// begin tmp := UnitsInside ( factory ) ;
3774: LD_ADDR_VAR 0 8
3778: PUSH
3779: LD_VAR 0 1
3783: PPUSH
3784: CALL_OW 313
3788: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3789: LD_VAR 0 8
3793: PPUSH
3794: LD_INT 25
3796: PUSH
3797: LD_INT 12
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PPUSH
3804: CALL_OW 72
3808: NOT
3809: IFFALSE 3819
// control := control_manual ;
3811: LD_ADDR_VAR 0 4
3815: PUSH
3816: LD_INT 1
3818: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 3516 0 1
3833: ST_TO_ADDR
// if tmp then
3834: LD_VAR 0 8
3838: IFFALSE 3881
// begin for i in tmp do
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_VAR 0 8
3849: PUSH
3850: FOR_IN
3851: IFFALSE 3879
// if i [ 1 ] = b_ext_radio then
3853: LD_VAR 0 7
3857: PUSH
3858: LD_INT 1
3860: ARRAY
3861: PUSH
3862: LD_INT 22
3864: EQUAL
3865: IFFALSE 3877
// begin control := control_remote ;
3867: LD_ADDR_VAR 0 4
3871: PUSH
3872: LD_INT 2
3874: ST_TO_ADDR
// break ;
3875: GO 3879
// end ;
3877: GO 3850
3879: POP
3880: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3881: LD_VAR 0 1
3885: PPUSH
3886: LD_VAR 0 2
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_VAR 0 4
3900: PPUSH
3901: LD_VAR 0 5
3905: PPUSH
3906: CALL_OW 448
3910: IFFALSE 3945
// begin result := [ chassis , engine , control , weapon ] ;
3912: LD_ADDR_VAR 0 6
3916: PUSH
3917: LD_VAR 0 2
3921: PUSH
3922: LD_VAR 0 3
3926: PUSH
3927: LD_VAR 0 4
3931: PUSH
3932: LD_VAR 0 5
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: ST_TO_ADDR
// exit ;
3943: GO 4357
// end ; _chassis := AvailableChassisList ( factory ) ;
3945: LD_ADDR_VAR 0 9
3949: PUSH
3950: LD_VAR 0 1
3954: PPUSH
3955: CALL_OW 475
3959: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3960: LD_ADDR_VAR 0 11
3964: PUSH
3965: LD_VAR 0 1
3969: PPUSH
3970: CALL_OW 476
3974: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3975: LD_ADDR_VAR 0 12
3979: PUSH
3980: LD_VAR 0 1
3984: PPUSH
3985: CALL_OW 477
3989: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3990: LD_ADDR_VAR 0 10
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 478
4004: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4005: LD_VAR 0 9
4009: NOT
4010: PUSH
4011: LD_VAR 0 11
4015: NOT
4016: OR
4017: PUSH
4018: LD_VAR 0 12
4022: NOT
4023: OR
4024: PUSH
4025: LD_VAR 0 10
4029: NOT
4030: OR
4031: IFFALSE 4066
// begin result := [ chassis , engine , control , weapon ] ;
4033: LD_ADDR_VAR 0 6
4037: PUSH
4038: LD_VAR 0 2
4042: PUSH
4043: LD_VAR 0 3
4047: PUSH
4048: LD_VAR 0 4
4052: PUSH
4053: LD_VAR 0 5
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: ST_TO_ADDR
// exit ;
4064: GO 4357
// end ; if not chassis in _chassis then
4066: LD_VAR 0 2
4070: PUSH
4071: LD_VAR 0 9
4075: IN
4076: NOT
4077: IFFALSE 4103
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: LD_VAR 0 9
4088: PUSH
4089: LD_INT 1
4091: PPUSH
4092: LD_VAR 0 9
4096: PPUSH
4097: CALL_OW 12
4101: ARRAY
4102: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4103: LD_VAR 0 2
4107: PPUSH
4108: LD_VAR 0 3
4112: PPUSH
4113: CALL 4362 0 2
4117: NOT
4118: IFFALSE 4177
// repeat engine := _engine [ 1 ] ;
4120: LD_ADDR_VAR 0 3
4124: PUSH
4125: LD_VAR 0 11
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4134: LD_ADDR_VAR 0 11
4138: PUSH
4139: LD_VAR 0 11
4143: PPUSH
4144: LD_INT 1
4146: PPUSH
4147: CALL_OW 3
4151: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4152: LD_VAR 0 2
4156: PPUSH
4157: LD_VAR 0 3
4161: PPUSH
4162: CALL 4362 0 2
4166: PUSH
4167: LD_VAR 0 11
4171: PUSH
4172: EMPTY
4173: EQUAL
4174: OR
4175: IFFALSE 4120
// if not control in _control then
4177: LD_VAR 0 4
4181: PUSH
4182: LD_VAR 0 12
4186: IN
4187: NOT
4188: IFFALSE 4214
// control := _control [ rand ( 1 , _control ) ] ;
4190: LD_ADDR_VAR 0 4
4194: PUSH
4195: LD_VAR 0 12
4199: PUSH
4200: LD_INT 1
4202: PPUSH
4203: LD_VAR 0 12
4207: PPUSH
4208: CALL_OW 12
4212: ARRAY
4213: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_VAR 0 5
4223: PPUSH
4224: CALL 4582 0 2
4228: NOT
4229: IFFALSE 4288
// repeat weapon := _weapon [ 1 ] ;
4231: LD_ADDR_VAR 0 5
4235: PUSH
4236: LD_VAR 0 10
4240: PUSH
4241: LD_INT 1
4243: ARRAY
4244: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4245: LD_ADDR_VAR 0 10
4249: PUSH
4250: LD_VAR 0 10
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: CALL_OW 3
4262: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4263: LD_VAR 0 2
4267: PPUSH
4268: LD_VAR 0 5
4272: PPUSH
4273: CALL 4582 0 2
4277: PUSH
4278: LD_VAR 0 10
4282: PUSH
4283: EMPTY
4284: EQUAL
4285: OR
4286: IFFALSE 4231
// result := [ ] ;
4288: LD_ADDR_VAR 0 6
4292: PUSH
4293: EMPTY
4294: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_VAR 0 2
4304: PPUSH
4305: LD_VAR 0 3
4309: PPUSH
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_VAR 0 5
4319: PPUSH
4320: CALL_OW 448
4324: IFFALSE 4357
// result := [ chassis , engine , control , weapon ] ;
4326: LD_ADDR_VAR 0 6
4330: PUSH
4331: LD_VAR 0 2
4335: PUSH
4336: LD_VAR 0 3
4340: PUSH
4341: LD_VAR 0 4
4345: PUSH
4346: LD_VAR 0 5
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: ST_TO_ADDR
// end ;
4357: LD_VAR 0 6
4361: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4362: LD_INT 0
4364: PPUSH
// if not chassis or not engine then
4365: LD_VAR 0 1
4369: NOT
4370: PUSH
4371: LD_VAR 0 2
4375: NOT
4376: OR
4377: IFFALSE 4381
// exit ;
4379: GO 4577
// case engine of engine_solar :
4381: LD_VAR 0 2
4385: PUSH
4386: LD_INT 2
4388: DOUBLE
4389: EQUAL
4390: IFTRUE 4394
4392: GO 4432
4394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_INT 11
4402: PUSH
4403: LD_INT 12
4405: PUSH
4406: LD_INT 13
4408: PUSH
4409: LD_INT 14
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 3
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: ST_TO_ADDR
4430: GO 4561
4432: LD_INT 1
4434: DOUBLE
4435: EQUAL
4436: IFTRUE 4440
4438: GO 4502
4440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4441: LD_ADDR_VAR 0 3
4445: PUSH
4446: LD_INT 11
4448: PUSH
4449: LD_INT 12
4451: PUSH
4452: LD_INT 13
4454: PUSH
4455: LD_INT 14
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: LD_INT 2
4463: PUSH
4464: LD_INT 3
4466: PUSH
4467: LD_INT 4
4469: PUSH
4470: LD_INT 5
4472: PUSH
4473: LD_INT 21
4475: PUSH
4476: LD_INT 23
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 24
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: ST_TO_ADDR
4500: GO 4561
4502: LD_INT 3
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4560
4510: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 13
4518: PUSH
4519: LD_INT 14
4521: PUSH
4522: LD_INT 2
4524: PUSH
4525: LD_INT 3
4527: PUSH
4528: LD_INT 4
4530: PUSH
4531: LD_INT 5
4533: PUSH
4534: LD_INT 21
4536: PUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 23
4542: PUSH
4543: LD_INT 24
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
4558: GO 4561
4560: POP
// result := ( chassis in result ) ;
4561: LD_ADDR_VAR 0 3
4565: PUSH
4566: LD_VAR 0 1
4570: PUSH
4571: LD_VAR 0 3
4575: IN
4576: ST_TO_ADDR
// end ;
4577: LD_VAR 0 3
4581: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4582: LD_INT 0
4584: PPUSH
// if not chassis or not weapon then
4585: LD_VAR 0 1
4589: NOT
4590: PUSH
4591: LD_VAR 0 2
4595: NOT
4596: OR
4597: IFFALSE 4601
// exit ;
4599: GO 5661
// case weapon of us_machine_gun :
4601: LD_VAR 0 2
4605: PUSH
4606: LD_INT 2
4608: DOUBLE
4609: EQUAL
4610: IFTRUE 4614
4612: GO 4644
4614: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4615: LD_ADDR_VAR 0 3
4619: PUSH
4620: LD_INT 1
4622: PUSH
4623: LD_INT 2
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: ST_TO_ADDR
4642: GO 5645
4644: LD_INT 3
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4652
4650: GO 4682
4652: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 1
4660: PUSH
4661: LD_INT 2
4663: PUSH
4664: LD_INT 3
4666: PUSH
4667: LD_INT 4
4669: PUSH
4670: LD_INT 5
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: ST_TO_ADDR
4680: GO 5645
4682: LD_INT 11
4684: DOUBLE
4685: EQUAL
4686: IFTRUE 4690
4688: GO 4720
4690: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_INT 1
4698: PUSH
4699: LD_INT 2
4701: PUSH
4702: LD_INT 3
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: LD_INT 5
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: ST_TO_ADDR
4718: GO 5645
4720: LD_INT 4
4722: DOUBLE
4723: EQUAL
4724: IFTRUE 4728
4726: GO 4754
4728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4729: LD_ADDR_VAR 0 3
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: LD_INT 4
4742: PUSH
4743: LD_INT 5
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: ST_TO_ADDR
4752: GO 5645
4754: LD_INT 5
4756: DOUBLE
4757: EQUAL
4758: IFTRUE 4762
4760: GO 4788
4762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: LD_INT 2
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: LD_INT 4
4776: PUSH
4777: LD_INT 5
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: ST_TO_ADDR
4786: GO 5645
4788: LD_INT 9
4790: DOUBLE
4791: EQUAL
4792: IFTRUE 4796
4794: GO 4822
4796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: LD_INT 4
4810: PUSH
4811: LD_INT 5
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: ST_TO_ADDR
4820: GO 5645
4822: LD_INT 7
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4830
4828: GO 4856
4830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: LD_INT 2
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: LD_INT 4
4844: PUSH
4845: LD_INT 5
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: ST_TO_ADDR
4854: GO 5645
4856: LD_INT 12
4858: DOUBLE
4859: EQUAL
4860: IFTRUE 4864
4862: GO 4890
4864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: LD_INT 3
4875: PUSH
4876: LD_INT 4
4878: PUSH
4879: LD_INT 5
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: ST_TO_ADDR
4888: GO 5645
4890: LD_INT 13
4892: DOUBLE
4893: EQUAL
4894: IFTRUE 4898
4896: GO 4924
4898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_INT 2
4906: PUSH
4907: LD_INT 3
4909: PUSH
4910: LD_INT 4
4912: PUSH
4913: LD_INT 5
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: ST_TO_ADDR
4922: GO 5645
4924: LD_INT 14
4926: DOUBLE
4927: EQUAL
4928: IFTRUE 4932
4930: GO 4950
4932: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4933: LD_ADDR_VAR 0 3
4937: PUSH
4938: LD_INT 4
4940: PUSH
4941: LD_INT 5
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: ST_TO_ADDR
4948: GO 5645
4950: LD_INT 6
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 4958
4956: GO 4976
4958: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4959: LD_ADDR_VAR 0 3
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: LD_INT 5
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: ST_TO_ADDR
4974: GO 5645
4976: LD_INT 10
4978: DOUBLE
4979: EQUAL
4980: IFTRUE 4984
4982: GO 5002
4984: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: LD_INT 4
4992: PUSH
4993: LD_INT 5
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: ST_TO_ADDR
5000: GO 5645
5002: LD_INT 22
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5010
5008: GO 5036
5010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5011: LD_ADDR_VAR 0 3
5015: PUSH
5016: LD_INT 11
5018: PUSH
5019: LD_INT 12
5021: PUSH
5022: LD_INT 13
5024: PUSH
5025: LD_INT 14
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: ST_TO_ADDR
5034: GO 5645
5036: LD_INT 23
5038: DOUBLE
5039: EQUAL
5040: IFTRUE 5044
5042: GO 5070
5044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5045: LD_ADDR_VAR 0 3
5049: PUSH
5050: LD_INT 11
5052: PUSH
5053: LD_INT 12
5055: PUSH
5056: LD_INT 13
5058: PUSH
5059: LD_INT 14
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: ST_TO_ADDR
5068: GO 5645
5070: LD_INT 24
5072: DOUBLE
5073: EQUAL
5074: IFTRUE 5078
5076: GO 5104
5078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5079: LD_ADDR_VAR 0 3
5083: PUSH
5084: LD_INT 11
5086: PUSH
5087: LD_INT 12
5089: PUSH
5090: LD_INT 13
5092: PUSH
5093: LD_INT 14
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 5645
5104: LD_INT 30
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5138
5112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: LD_INT 11
5120: PUSH
5121: LD_INT 12
5123: PUSH
5124: LD_INT 13
5126: PUSH
5127: LD_INT 14
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: ST_TO_ADDR
5136: GO 5645
5138: LD_INT 25
5140: DOUBLE
5141: EQUAL
5142: IFTRUE 5146
5144: GO 5164
5146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 13
5154: PUSH
5155: LD_INT 14
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: ST_TO_ADDR
5162: GO 5645
5164: LD_INT 27
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5190
5172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: LD_INT 13
5180: PUSH
5181: LD_INT 14
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: ST_TO_ADDR
5188: GO 5645
5190: LD_INT 92
5192: DOUBLE
5193: EQUAL
5194: IFTRUE 5198
5196: GO 5224
5198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_INT 11
5206: PUSH
5207: LD_INT 12
5209: PUSH
5210: LD_INT 13
5212: PUSH
5213: LD_INT 14
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: ST_TO_ADDR
5222: GO 5645
5224: LD_INT 28
5226: DOUBLE
5227: EQUAL
5228: IFTRUE 5232
5230: GO 5250
5232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5233: LD_ADDR_VAR 0 3
5237: PUSH
5238: LD_INT 13
5240: PUSH
5241: LD_INT 14
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: ST_TO_ADDR
5248: GO 5645
5250: LD_INT 29
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5276
5258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5259: LD_ADDR_VAR 0 3
5263: PUSH
5264: LD_INT 13
5266: PUSH
5267: LD_INT 14
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: ST_TO_ADDR
5274: GO 5645
5276: LD_INT 31
5278: DOUBLE
5279: EQUAL
5280: IFTRUE 5284
5282: GO 5302
5284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5285: LD_ADDR_VAR 0 3
5289: PUSH
5290: LD_INT 13
5292: PUSH
5293: LD_INT 14
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: ST_TO_ADDR
5300: GO 5645
5302: LD_INT 26
5304: DOUBLE
5305: EQUAL
5306: IFTRUE 5310
5308: GO 5328
5310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5311: LD_ADDR_VAR 0 3
5315: PUSH
5316: LD_INT 13
5318: PUSH
5319: LD_INT 14
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: ST_TO_ADDR
5326: GO 5645
5328: LD_INT 42
5330: DOUBLE
5331: EQUAL
5332: IFTRUE 5336
5334: GO 5362
5336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5337: LD_ADDR_VAR 0 3
5341: PUSH
5342: LD_INT 21
5344: PUSH
5345: LD_INT 22
5347: PUSH
5348: LD_INT 23
5350: PUSH
5351: LD_INT 24
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: ST_TO_ADDR
5360: GO 5645
5362: LD_INT 43
5364: DOUBLE
5365: EQUAL
5366: IFTRUE 5370
5368: GO 5396
5370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5371: LD_ADDR_VAR 0 3
5375: PUSH
5376: LD_INT 21
5378: PUSH
5379: LD_INT 22
5381: PUSH
5382: LD_INT 23
5384: PUSH
5385: LD_INT 24
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: ST_TO_ADDR
5394: GO 5645
5396: LD_INT 44
5398: DOUBLE
5399: EQUAL
5400: IFTRUE 5404
5402: GO 5430
5404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5405: LD_ADDR_VAR 0 3
5409: PUSH
5410: LD_INT 21
5412: PUSH
5413: LD_INT 22
5415: PUSH
5416: LD_INT 23
5418: PUSH
5419: LD_INT 24
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: ST_TO_ADDR
5428: GO 5645
5430: LD_INT 45
5432: DOUBLE
5433: EQUAL
5434: IFTRUE 5438
5436: GO 5464
5438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5439: LD_ADDR_VAR 0 3
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 22
5449: PUSH
5450: LD_INT 23
5452: PUSH
5453: LD_INT 24
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: ST_TO_ADDR
5462: GO 5645
5464: LD_INT 49
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5472
5470: GO 5498
5472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5473: LD_ADDR_VAR 0 3
5477: PUSH
5478: LD_INT 21
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 23
5486: PUSH
5487: LD_INT 24
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: ST_TO_ADDR
5496: GO 5645
5498: LD_INT 51
5500: DOUBLE
5501: EQUAL
5502: IFTRUE 5506
5504: GO 5532
5506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5507: LD_ADDR_VAR 0 3
5511: PUSH
5512: LD_INT 21
5514: PUSH
5515: LD_INT 22
5517: PUSH
5518: LD_INT 23
5520: PUSH
5521: LD_INT 24
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: ST_TO_ADDR
5530: GO 5645
5532: LD_INT 52
5534: DOUBLE
5535: EQUAL
5536: IFTRUE 5540
5538: GO 5566
5540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5541: LD_ADDR_VAR 0 3
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_INT 23
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: ST_TO_ADDR
5564: GO 5645
5566: LD_INT 53
5568: DOUBLE
5569: EQUAL
5570: IFTRUE 5574
5572: GO 5592
5574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5575: LD_ADDR_VAR 0 3
5579: PUSH
5580: LD_INT 23
5582: PUSH
5583: LD_INT 24
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: ST_TO_ADDR
5590: GO 5645
5592: LD_INT 46
5594: DOUBLE
5595: EQUAL
5596: IFTRUE 5600
5598: GO 5618
5600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5601: LD_ADDR_VAR 0 3
5605: PUSH
5606: LD_INT 23
5608: PUSH
5609: LD_INT 24
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: ST_TO_ADDR
5616: GO 5645
5618: LD_INT 47
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5644
5626: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5627: LD_ADDR_VAR 0 3
5631: PUSH
5632: LD_INT 23
5634: PUSH
5635: LD_INT 24
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: ST_TO_ADDR
5642: GO 5645
5644: POP
// result := ( chassis in result ) ;
5645: LD_ADDR_VAR 0 3
5649: PUSH
5650: LD_VAR 0 1
5654: PUSH
5655: LD_VAR 0 3
5659: IN
5660: ST_TO_ADDR
// end ;
5661: LD_VAR 0 3
5665: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5666: LD_INT 0
5668: PPUSH
5669: PPUSH
5670: PPUSH
5671: PPUSH
5672: PPUSH
5673: PPUSH
5674: PPUSH
// result := array ;
5675: LD_ADDR_VAR 0 5
5679: PUSH
5680: LD_VAR 0 1
5684: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5685: LD_VAR 0 1
5689: NOT
5690: PUSH
5691: LD_VAR 0 2
5695: NOT
5696: OR
5697: PUSH
5698: LD_VAR 0 3
5702: NOT
5703: OR
5704: PUSH
5705: LD_VAR 0 2
5709: PUSH
5710: LD_VAR 0 1
5714: GREATER
5715: OR
5716: PUSH
5717: LD_VAR 0 3
5721: PUSH
5722: LD_VAR 0 1
5726: GREATER
5727: OR
5728: IFFALSE 5732
// exit ;
5730: GO 6028
// if direction then
5732: LD_VAR 0 4
5736: IFFALSE 5800
// begin d := 1 ;
5738: LD_ADDR_VAR 0 9
5742: PUSH
5743: LD_INT 1
5745: ST_TO_ADDR
// if i_from > i_to then
5746: LD_VAR 0 2
5750: PUSH
5751: LD_VAR 0 3
5755: GREATER
5756: IFFALSE 5782
// length := ( array - i_from ) + i_to else
5758: LD_ADDR_VAR 0 11
5762: PUSH
5763: LD_VAR 0 1
5767: PUSH
5768: LD_VAR 0 2
5772: MINUS
5773: PUSH
5774: LD_VAR 0 3
5778: PLUS
5779: ST_TO_ADDR
5780: GO 5798
// length := i_to - i_from ;
5782: LD_ADDR_VAR 0 11
5786: PUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_VAR 0 2
5796: MINUS
5797: ST_TO_ADDR
// end else
5798: GO 5861
// begin d := - 1 ;
5800: LD_ADDR_VAR 0 9
5804: PUSH
5805: LD_INT 1
5807: NEG
5808: ST_TO_ADDR
// if i_from > i_to then
5809: LD_VAR 0 2
5813: PUSH
5814: LD_VAR 0 3
5818: GREATER
5819: IFFALSE 5839
// length := i_from - i_to else
5821: LD_ADDR_VAR 0 11
5825: PUSH
5826: LD_VAR 0 2
5830: PUSH
5831: LD_VAR 0 3
5835: MINUS
5836: ST_TO_ADDR
5837: GO 5861
// length := ( array - i_to ) + i_from ;
5839: LD_ADDR_VAR 0 11
5843: PUSH
5844: LD_VAR 0 1
5848: PUSH
5849: LD_VAR 0 3
5853: MINUS
5854: PUSH
5855: LD_VAR 0 2
5859: PLUS
5860: ST_TO_ADDR
// end ; if not length then
5861: LD_VAR 0 11
5865: NOT
5866: IFFALSE 5870
// exit ;
5868: GO 6028
// tmp := array ;
5870: LD_ADDR_VAR 0 10
5874: PUSH
5875: LD_VAR 0 1
5879: ST_TO_ADDR
// for i = 1 to length do
5880: LD_ADDR_VAR 0 6
5884: PUSH
5885: DOUBLE
5886: LD_INT 1
5888: DEC
5889: ST_TO_ADDR
5890: LD_VAR 0 11
5894: PUSH
5895: FOR_TO
5896: IFFALSE 6016
// begin for j = 1 to array do
5898: LD_ADDR_VAR 0 7
5902: PUSH
5903: DOUBLE
5904: LD_INT 1
5906: DEC
5907: ST_TO_ADDR
5908: LD_VAR 0 1
5912: PUSH
5913: FOR_TO
5914: IFFALSE 6002
// begin k := j + d ;
5916: LD_ADDR_VAR 0 8
5920: PUSH
5921: LD_VAR 0 7
5925: PUSH
5926: LD_VAR 0 9
5930: PLUS
5931: ST_TO_ADDR
// if k > array then
5932: LD_VAR 0 8
5936: PUSH
5937: LD_VAR 0 1
5941: GREATER
5942: IFFALSE 5952
// k := 1 ;
5944: LD_ADDR_VAR 0 8
5948: PUSH
5949: LD_INT 1
5951: ST_TO_ADDR
// if not k then
5952: LD_VAR 0 8
5956: NOT
5957: IFFALSE 5969
// k := array ;
5959: LD_ADDR_VAR 0 8
5963: PUSH
5964: LD_VAR 0 1
5968: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5969: LD_ADDR_VAR 0 10
5973: PUSH
5974: LD_VAR 0 10
5978: PPUSH
5979: LD_VAR 0 8
5983: PPUSH
5984: LD_VAR 0 1
5988: PUSH
5989: LD_VAR 0 7
5993: ARRAY
5994: PPUSH
5995: CALL_OW 1
5999: ST_TO_ADDR
// end ;
6000: GO 5913
6002: POP
6003: POP
// array := tmp ;
6004: LD_ADDR_VAR 0 1
6008: PUSH
6009: LD_VAR 0 10
6013: ST_TO_ADDR
// end ;
6014: GO 5895
6016: POP
6017: POP
// result := array ;
6018: LD_ADDR_VAR 0 5
6022: PUSH
6023: LD_VAR 0 1
6027: ST_TO_ADDR
// end ;
6028: LD_VAR 0 5
6032: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6033: LD_INT 0
6035: PPUSH
6036: PPUSH
// result := 0 ;
6037: LD_ADDR_VAR 0 3
6041: PUSH
6042: LD_INT 0
6044: ST_TO_ADDR
// if not array or not value in array then
6045: LD_VAR 0 1
6049: NOT
6050: PUSH
6051: LD_VAR 0 2
6055: PUSH
6056: LD_VAR 0 1
6060: IN
6061: NOT
6062: OR
6063: IFFALSE 6067
// exit ;
6065: GO 6121
// for i = 1 to array do
6067: LD_ADDR_VAR 0 4
6071: PUSH
6072: DOUBLE
6073: LD_INT 1
6075: DEC
6076: ST_TO_ADDR
6077: LD_VAR 0 1
6081: PUSH
6082: FOR_TO
6083: IFFALSE 6119
// if value = array [ i ] then
6085: LD_VAR 0 2
6089: PUSH
6090: LD_VAR 0 1
6094: PUSH
6095: LD_VAR 0 4
6099: ARRAY
6100: EQUAL
6101: IFFALSE 6117
// begin result := i ;
6103: LD_ADDR_VAR 0 3
6107: PUSH
6108: LD_VAR 0 4
6112: ST_TO_ADDR
// exit ;
6113: POP
6114: POP
6115: GO 6121
// end ;
6117: GO 6082
6119: POP
6120: POP
// end ;
6121: LD_VAR 0 3
6125: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6126: LD_INT 0
6128: PPUSH
// vc_chassis := chassis ;
6129: LD_ADDR_OWVAR 37
6133: PUSH
6134: LD_VAR 0 1
6138: ST_TO_ADDR
// vc_engine := engine ;
6139: LD_ADDR_OWVAR 39
6143: PUSH
6144: LD_VAR 0 2
6148: ST_TO_ADDR
// vc_control := control ;
6149: LD_ADDR_OWVAR 38
6153: PUSH
6154: LD_VAR 0 3
6158: ST_TO_ADDR
// vc_weapon := weapon ;
6159: LD_ADDR_OWVAR 40
6163: PUSH
6164: LD_VAR 0 4
6168: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6169: LD_ADDR_OWVAR 41
6173: PUSH
6174: LD_VAR 0 5
6178: ST_TO_ADDR
// end ;
6179: LD_VAR 0 6
6183: RET
// export function WantPlant ( unit ) ; var task ; begin
6184: LD_INT 0
6186: PPUSH
6187: PPUSH
// result := false ;
6188: LD_ADDR_VAR 0 2
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6196: LD_ADDR_VAR 0 3
6200: PUSH
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL_OW 437
6210: ST_TO_ADDR
// if task then
6211: LD_VAR 0 3
6215: IFFALSE 6243
// if task [ 1 ] [ 1 ] = p then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PUSH
6226: LD_INT 1
6228: ARRAY
6229: PUSH
6230: LD_STRING p
6232: EQUAL
6233: IFFALSE 6243
// result := true ;
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// end ;
6243: LD_VAR 0 2
6247: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6248: LD_INT 0
6250: PPUSH
6251: PPUSH
6252: PPUSH
6253: PPUSH
// if pos < 1 then
6254: LD_VAR 0 2
6258: PUSH
6259: LD_INT 1
6261: LESS
6262: IFFALSE 6266
// exit ;
6264: GO 6569
// if pos = 1 then
6266: LD_VAR 0 2
6270: PUSH
6271: LD_INT 1
6273: EQUAL
6274: IFFALSE 6307
// result := Replace ( arr , pos [ 1 ] , value ) else
6276: LD_ADDR_VAR 0 4
6280: PUSH
6281: LD_VAR 0 1
6285: PPUSH
6286: LD_VAR 0 2
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: LD_VAR 0 3
6299: PPUSH
6300: CALL_OW 1
6304: ST_TO_ADDR
6305: GO 6569
// begin tmp := arr ;
6307: LD_ADDR_VAR 0 6
6311: PUSH
6312: LD_VAR 0 1
6316: ST_TO_ADDR
// s_arr := [ tmp ] ;
6317: LD_ADDR_VAR 0 7
6321: PUSH
6322: LD_VAR 0 6
6326: PUSH
6327: EMPTY
6328: LIST
6329: ST_TO_ADDR
// for i = 1 to pos - 1 do
6330: LD_ADDR_VAR 0 5
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_VAR 0 2
6344: PUSH
6345: LD_INT 1
6347: MINUS
6348: PUSH
6349: FOR_TO
6350: IFFALSE 6395
// begin tmp := tmp [ pos [ i ] ] ;
6352: LD_ADDR_VAR 0 6
6356: PUSH
6357: LD_VAR 0 6
6361: PUSH
6362: LD_VAR 0 2
6366: PUSH
6367: LD_VAR 0 5
6371: ARRAY
6372: ARRAY
6373: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6374: LD_ADDR_VAR 0 7
6378: PUSH
6379: LD_VAR 0 7
6383: PUSH
6384: LD_VAR 0 6
6388: PUSH
6389: EMPTY
6390: LIST
6391: ADD
6392: ST_TO_ADDR
// end ;
6393: GO 6349
6395: POP
6396: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6397: LD_ADDR_VAR 0 6
6401: PUSH
6402: LD_VAR 0 6
6406: PPUSH
6407: LD_VAR 0 2
6411: PUSH
6412: LD_VAR 0 2
6416: ARRAY
6417: PPUSH
6418: LD_VAR 0 3
6422: PPUSH
6423: CALL_OW 1
6427: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6428: LD_ADDR_VAR 0 7
6432: PUSH
6433: LD_VAR 0 7
6437: PPUSH
6438: LD_VAR 0 7
6442: PPUSH
6443: LD_VAR 0 6
6447: PPUSH
6448: CALL_OW 1
6452: ST_TO_ADDR
// for i = s_arr downto 2 do
6453: LD_ADDR_VAR 0 5
6457: PUSH
6458: DOUBLE
6459: LD_VAR 0 7
6463: INC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_DOWNTO
6469: IFFALSE 6553
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6471: LD_ADDR_VAR 0 6
6475: PUSH
6476: LD_VAR 0 7
6480: PUSH
6481: LD_VAR 0 5
6485: PUSH
6486: LD_INT 1
6488: MINUS
6489: ARRAY
6490: PPUSH
6491: LD_VAR 0 2
6495: PUSH
6496: LD_VAR 0 5
6500: PUSH
6501: LD_INT 1
6503: MINUS
6504: ARRAY
6505: PPUSH
6506: LD_VAR 0 7
6510: PUSH
6511: LD_VAR 0 5
6515: ARRAY
6516: PPUSH
6517: CALL_OW 1
6521: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6522: LD_ADDR_VAR 0 7
6526: PUSH
6527: LD_VAR 0 7
6531: PPUSH
6532: LD_VAR 0 5
6536: PUSH
6537: LD_INT 1
6539: MINUS
6540: PPUSH
6541: LD_VAR 0 6
6545: PPUSH
6546: CALL_OW 1
6550: ST_TO_ADDR
// end ;
6551: GO 6468
6553: POP
6554: POP
// result := s_arr [ 1 ] ;
6555: LD_ADDR_VAR 0 4
6559: PUSH
6560: LD_VAR 0 7
6564: PUSH
6565: LD_INT 1
6567: ARRAY
6568: ST_TO_ADDR
// end ; end ;
6569: LD_VAR 0 4
6573: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
// if not list then
6578: LD_VAR 0 1
6582: NOT
6583: IFFALSE 6587
// exit ;
6585: GO 6678
// i := list [ pos1 ] ;
6587: LD_ADDR_VAR 0 5
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: LD_VAR 0 2
6601: ARRAY
6602: ST_TO_ADDR
// if not i then
6603: LD_VAR 0 5
6607: NOT
6608: IFFALSE 6612
// exit ;
6610: GO 6678
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6612: LD_ADDR_VAR 0 1
6616: PUSH
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_VAR 0 2
6626: PPUSH
6627: LD_VAR 0 1
6631: PUSH
6632: LD_VAR 0 3
6636: ARRAY
6637: PPUSH
6638: CALL_OW 1
6642: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6643: LD_ADDR_VAR 0 1
6647: PUSH
6648: LD_VAR 0 1
6652: PPUSH
6653: LD_VAR 0 3
6657: PPUSH
6658: LD_VAR 0 5
6662: PPUSH
6663: CALL_OW 1
6667: ST_TO_ADDR
// result := list ;
6668: LD_ADDR_VAR 0 4
6672: PUSH
6673: LD_VAR 0 1
6677: ST_TO_ADDR
// end ;
6678: LD_VAR 0 4
6682: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6683: LD_INT 0
6685: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 250
6700: PPUSH
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL_OW 251
6710: PPUSH
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_VAR 0 4
6725: PPUSH
6726: CALL 7104 0 5
6730: ST_TO_ADDR
// end ;
6731: LD_VAR 0 5
6735: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6736: LD_INT 0
6738: PPUSH
6739: PPUSH
6740: PPUSH
6741: PPUSH
// if not list or not unit then
6742: LD_VAR 0 2
6746: NOT
6747: PUSH
6748: LD_VAR 0 1
6752: NOT
6753: OR
6754: IFFALSE 6758
// exit ;
6756: GO 7099
// result := [ ] ;
6758: LD_ADDR_VAR 0 5
6762: PUSH
6763: EMPTY
6764: ST_TO_ADDR
// for i in list do
6765: LD_ADDR_VAR 0 6
6769: PUSH
6770: LD_VAR 0 2
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6994
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6778: LD_ADDR_VAR 0 8
6782: PUSH
6783: LD_VAR 0 1
6787: PPUSH
6788: LD_VAR 0 6
6792: PUSH
6793: LD_INT 1
6795: ARRAY
6796: PPUSH
6797: LD_VAR 0 6
6801: PUSH
6802: LD_INT 2
6804: ARRAY
6805: PPUSH
6806: CALL_OW 297
6810: ST_TO_ADDR
// if not Count ( result ) then
6811: LD_VAR 0 5
6815: PPUSH
6816: CALL 3388 0 1
6820: NOT
6821: IFFALSE 6854
// begin result := Join ( result , [ i , tmp ] ) ;
6823: LD_ADDR_VAR 0 5
6827: PUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: LD_VAR 0 6
6837: PUSH
6838: LD_VAR 0 8
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PPUSH
6847: CALL 38988 0 2
6851: ST_TO_ADDR
// continue ;
6852: GO 6775
// end ; if result [ result ] [ 2 ] <= tmp then
6854: LD_VAR 0 5
6858: PUSH
6859: LD_VAR 0 5
6863: ARRAY
6864: PUSH
6865: LD_INT 2
6867: ARRAY
6868: PUSH
6869: LD_VAR 0 8
6873: LESSEQUAL
6874: IFFALSE 6907
// result := Join ( result , [ i , tmp ] ) else
6876: LD_ADDR_VAR 0 5
6880: PUSH
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_VAR 0 6
6890: PUSH
6891: LD_VAR 0 8
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PPUSH
6900: CALL 38988 0 2
6904: ST_TO_ADDR
6905: GO 6992
// begin for j := 1 to Count ( result ) do
6907: LD_ADDR_VAR 0 7
6911: PUSH
6912: DOUBLE
6913: LD_INT 1
6915: DEC
6916: ST_TO_ADDR
6917: LD_VAR 0 5
6921: PPUSH
6922: CALL 3388 0 1
6926: PUSH
6927: FOR_TO
6928: IFFALSE 6990
// begin if tmp < result [ j ] [ 2 ] then
6930: LD_VAR 0 8
6934: PUSH
6935: LD_VAR 0 5
6939: PUSH
6940: LD_VAR 0 7
6944: ARRAY
6945: PUSH
6946: LD_INT 2
6948: ARRAY
6949: LESS
6950: IFFALSE 6988
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6952: LD_ADDR_VAR 0 5
6956: PUSH
6957: LD_VAR 0 5
6961: PPUSH
6962: LD_VAR 0 7
6966: PPUSH
6967: LD_VAR 0 6
6971: PUSH
6972: LD_VAR 0 8
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 2
6985: ST_TO_ADDR
// break ;
6986: GO 6990
// end ; end ;
6988: GO 6927
6990: POP
6991: POP
// end ; end ;
6992: GO 6775
6994: POP
6995: POP
// if result and not asc then
6996: LD_VAR 0 5
7000: PUSH
7001: LD_VAR 0 3
7005: NOT
7006: AND
7007: IFFALSE 7024
// result := ReverseArray ( result ) ;
7009: LD_ADDR_VAR 0 5
7013: PUSH
7014: LD_VAR 0 5
7018: PPUSH
7019: CALL 34264 0 1
7023: ST_TO_ADDR
// tmp := [ ] ;
7024: LD_ADDR_VAR 0 8
7028: PUSH
7029: EMPTY
7030: ST_TO_ADDR
// if mode then
7031: LD_VAR 0 4
7035: IFFALSE 7099
// begin for i := 1 to result do
7037: LD_ADDR_VAR 0 6
7041: PUSH
7042: DOUBLE
7043: LD_INT 1
7045: DEC
7046: ST_TO_ADDR
7047: LD_VAR 0 5
7051: PUSH
7052: FOR_TO
7053: IFFALSE 7087
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7055: LD_ADDR_VAR 0 8
7059: PUSH
7060: LD_VAR 0 8
7064: PPUSH
7065: LD_VAR 0 5
7069: PUSH
7070: LD_VAR 0 6
7074: ARRAY
7075: PUSH
7076: LD_INT 1
7078: ARRAY
7079: PPUSH
7080: CALL 38988 0 2
7084: ST_TO_ADDR
7085: GO 7052
7087: POP
7088: POP
// result := tmp ;
7089: LD_ADDR_VAR 0 5
7093: PUSH
7094: LD_VAR 0 8
7098: ST_TO_ADDR
// end ; end ;
7099: LD_VAR 0 5
7103: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7104: LD_INT 0
7106: PPUSH
7107: PPUSH
7108: PPUSH
7109: PPUSH
// if not list then
7110: LD_VAR 0 3
7114: NOT
7115: IFFALSE 7119
// exit ;
7117: GO 7507
// result := [ ] ;
7119: LD_ADDR_VAR 0 6
7123: PUSH
7124: EMPTY
7125: ST_TO_ADDR
// for i in list do
7126: LD_ADDR_VAR 0 7
7130: PUSH
7131: LD_VAR 0 3
7135: PUSH
7136: FOR_IN
7137: IFFALSE 7339
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7139: LD_ADDR_VAR 0 9
7143: PUSH
7144: LD_VAR 0 7
7148: PPUSH
7149: LD_VAR 0 1
7153: PPUSH
7154: LD_VAR 0 2
7158: PPUSH
7159: CALL_OW 297
7163: ST_TO_ADDR
// if not result then
7164: LD_VAR 0 6
7168: NOT
7169: IFFALSE 7195
// result := [ [ i , tmp ] ] else
7171: LD_ADDR_VAR 0 6
7175: PUSH
7176: LD_VAR 0 7
7180: PUSH
7181: LD_VAR 0 9
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: ST_TO_ADDR
7193: GO 7337
// begin if result [ result ] [ 2 ] < tmp then
7195: LD_VAR 0 6
7199: PUSH
7200: LD_VAR 0 6
7204: ARRAY
7205: PUSH
7206: LD_INT 2
7208: ARRAY
7209: PUSH
7210: LD_VAR 0 9
7214: LESS
7215: IFFALSE 7257
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7217: LD_ADDR_VAR 0 6
7221: PUSH
7222: LD_VAR 0 6
7226: PPUSH
7227: LD_VAR 0 6
7231: PUSH
7232: LD_INT 1
7234: PLUS
7235: PPUSH
7236: LD_VAR 0 7
7240: PUSH
7241: LD_VAR 0 9
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PPUSH
7250: CALL_OW 2
7254: ST_TO_ADDR
7255: GO 7337
// for j = 1 to result do
7257: LD_ADDR_VAR 0 8
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_VAR 0 6
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7335
// begin if tmp < result [ j ] [ 2 ] then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_VAR 0 6
7284: PUSH
7285: LD_VAR 0 8
7289: ARRAY
7290: PUSH
7291: LD_INT 2
7293: ARRAY
7294: LESS
7295: IFFALSE 7333
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7297: LD_ADDR_VAR 0 6
7301: PUSH
7302: LD_VAR 0 6
7306: PPUSH
7307: LD_VAR 0 8
7311: PPUSH
7312: LD_VAR 0 7
7316: PUSH
7317: LD_VAR 0 9
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 2
7330: ST_TO_ADDR
// break ;
7331: GO 7335
// end ; end ;
7333: GO 7272
7335: POP
7336: POP
// end ; end ;
7337: GO 7136
7339: POP
7340: POP
// if result and not asc then
7341: LD_VAR 0 6
7345: PUSH
7346: LD_VAR 0 4
7350: NOT
7351: AND
7352: IFFALSE 7427
// begin tmp := result ;
7354: LD_ADDR_VAR 0 9
7358: PUSH
7359: LD_VAR 0 6
7363: ST_TO_ADDR
// for i = tmp downto 1 do
7364: LD_ADDR_VAR 0 7
7368: PUSH
7369: DOUBLE
7370: LD_VAR 0 9
7374: INC
7375: ST_TO_ADDR
7376: LD_INT 1
7378: PUSH
7379: FOR_DOWNTO
7380: IFFALSE 7425
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7382: LD_ADDR_VAR 0 6
7386: PUSH
7387: LD_VAR 0 6
7391: PPUSH
7392: LD_VAR 0 9
7396: PUSH
7397: LD_VAR 0 7
7401: MINUS
7402: PUSH
7403: LD_INT 1
7405: PLUS
7406: PPUSH
7407: LD_VAR 0 9
7411: PUSH
7412: LD_VAR 0 7
7416: ARRAY
7417: PPUSH
7418: CALL_OW 1
7422: ST_TO_ADDR
7423: GO 7379
7425: POP
7426: POP
// end ; tmp := [ ] ;
7427: LD_ADDR_VAR 0 9
7431: PUSH
7432: EMPTY
7433: ST_TO_ADDR
// if mode then
7434: LD_VAR 0 5
7438: IFFALSE 7507
// begin for i = 1 to result do
7440: LD_ADDR_VAR 0 7
7444: PUSH
7445: DOUBLE
7446: LD_INT 1
7448: DEC
7449: ST_TO_ADDR
7450: LD_VAR 0 6
7454: PUSH
7455: FOR_TO
7456: IFFALSE 7495
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7458: LD_ADDR_VAR 0 9
7462: PUSH
7463: LD_VAR 0 9
7467: PPUSH
7468: LD_VAR 0 7
7472: PPUSH
7473: LD_VAR 0 6
7477: PUSH
7478: LD_VAR 0 7
7482: ARRAY
7483: PUSH
7484: LD_INT 1
7486: ARRAY
7487: PPUSH
7488: CALL_OW 1
7492: ST_TO_ADDR
7493: GO 7455
7495: POP
7496: POP
// result := tmp ;
7497: LD_ADDR_VAR 0 6
7501: PUSH
7502: LD_VAR 0 9
7506: ST_TO_ADDR
// end ; end ;
7507: LD_VAR 0 6
7511: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7512: LD_INT 0
7514: PPUSH
7515: PPUSH
7516: PPUSH
7517: PPUSH
7518: PPUSH
7519: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7520: LD_ADDR_VAR 0 5
7524: PUSH
7525: LD_INT 0
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: LD_INT 0
7533: PUSH
7534: EMPTY
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
// if not x or not y then
7542: LD_VAR 0 2
7546: NOT
7547: PUSH
7548: LD_VAR 0 3
7552: NOT
7553: OR
7554: IFFALSE 7558
// exit ;
7556: GO 9208
// if not range then
7558: LD_VAR 0 4
7562: NOT
7563: IFFALSE 7573
// range := 10 ;
7565: LD_ADDR_VAR 0 4
7569: PUSH
7570: LD_INT 10
7572: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7573: LD_ADDR_VAR 0 8
7577: PUSH
7578: LD_INT 81
7580: PUSH
7581: LD_VAR 0 1
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 92
7592: PUSH
7593: LD_VAR 0 2
7597: PUSH
7598: LD_VAR 0 3
7602: PUSH
7603: LD_VAR 0 4
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 21
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: ST_TO_ADDR
// if not tmp then
7641: LD_VAR 0 8
7645: NOT
7646: IFFALSE 7650
// exit ;
7648: GO 9208
// for i in tmp do
7650: LD_ADDR_VAR 0 6
7654: PUSH
7655: LD_VAR 0 8
7659: PUSH
7660: FOR_IN
7661: IFFALSE 9183
// begin points := [ 0 , 0 , 0 ] ;
7663: LD_ADDR_VAR 0 9
7667: PUSH
7668: LD_INT 0
7670: PUSH
7671: LD_INT 0
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: ST_TO_ADDR
// bpoints := 1 ;
7682: LD_ADDR_VAR 0 10
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7690: LD_VAR 0 6
7694: PPUSH
7695: CALL_OW 247
7699: PUSH
7700: LD_INT 1
7702: DOUBLE
7703: EQUAL
7704: IFTRUE 7708
7706: GO 8286
7708: POP
// begin if GetClass ( i ) = 1 then
7709: LD_VAR 0 6
7713: PPUSH
7714: CALL_OW 257
7718: PUSH
7719: LD_INT 1
7721: EQUAL
7722: IFFALSE 7743
// points := [ 10 , 5 , 3 ] ;
7724: LD_ADDR_VAR 0 9
7728: PUSH
7729: LD_INT 10
7731: PUSH
7732: LD_INT 5
7734: PUSH
7735: LD_INT 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7743: LD_VAR 0 6
7747: PPUSH
7748: CALL_OW 257
7752: PUSH
7753: LD_INT 2
7755: PUSH
7756: LD_INT 3
7758: PUSH
7759: LD_INT 4
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: IN
7767: IFFALSE 7788
// points := [ 3 , 2 , 1 ] ;
7769: LD_ADDR_VAR 0 9
7773: PUSH
7774: LD_INT 3
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: LD_INT 1
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7788: LD_VAR 0 6
7792: PPUSH
7793: CALL_OW 257
7797: PUSH
7798: LD_INT 5
7800: EQUAL
7801: IFFALSE 7822
// points := [ 130 , 5 , 2 ] ;
7803: LD_ADDR_VAR 0 9
7807: PUSH
7808: LD_INT 130
7810: PUSH
7811: LD_INT 5
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7822: LD_VAR 0 6
7826: PPUSH
7827: CALL_OW 257
7831: PUSH
7832: LD_INT 8
7834: EQUAL
7835: IFFALSE 7856
// points := [ 35 , 35 , 30 ] ;
7837: LD_ADDR_VAR 0 9
7841: PUSH
7842: LD_INT 35
7844: PUSH
7845: LD_INT 35
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7856: LD_VAR 0 6
7860: PPUSH
7861: CALL_OW 257
7865: PUSH
7866: LD_INT 9
7868: EQUAL
7869: IFFALSE 7890
// points := [ 20 , 55 , 40 ] ;
7871: LD_ADDR_VAR 0 9
7875: PUSH
7876: LD_INT 20
7878: PUSH
7879: LD_INT 55
7881: PUSH
7882: LD_INT 40
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7890: LD_VAR 0 6
7894: PPUSH
7895: CALL_OW 257
7899: PUSH
7900: LD_INT 12
7902: PUSH
7903: LD_INT 16
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: IN
7910: IFFALSE 7931
// points := [ 5 , 3 , 2 ] ;
7912: LD_ADDR_VAR 0 9
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 3
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7931: LD_VAR 0 6
7935: PPUSH
7936: CALL_OW 257
7940: PUSH
7941: LD_INT 17
7943: EQUAL
7944: IFFALSE 7965
// points := [ 100 , 50 , 75 ] ;
7946: LD_ADDR_VAR 0 9
7950: PUSH
7951: LD_INT 100
7953: PUSH
7954: LD_INT 50
7956: PUSH
7957: LD_INT 75
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7965: LD_VAR 0 6
7969: PPUSH
7970: CALL_OW 257
7974: PUSH
7975: LD_INT 15
7977: EQUAL
7978: IFFALSE 7999
// points := [ 10 , 5 , 3 ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 10
7987: PUSH
7988: LD_INT 5
7990: PUSH
7991: LD_INT 3
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7999: LD_VAR 0 6
8003: PPUSH
8004: CALL_OW 257
8008: PUSH
8009: LD_INT 14
8011: EQUAL
8012: IFFALSE 8033
// points := [ 10 , 0 , 0 ] ;
8014: LD_ADDR_VAR 0 9
8018: PUSH
8019: LD_INT 10
8021: PUSH
8022: LD_INT 0
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8033: LD_VAR 0 6
8037: PPUSH
8038: CALL_OW 257
8042: PUSH
8043: LD_INT 11
8045: EQUAL
8046: IFFALSE 8067
// points := [ 30 , 10 , 5 ] ;
8048: LD_ADDR_VAR 0 9
8052: PUSH
8053: LD_INT 30
8055: PUSH
8056: LD_INT 10
8058: PUSH
8059: LD_INT 5
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8067: LD_VAR 0 1
8071: PPUSH
8072: LD_INT 5
8074: PPUSH
8075: CALL_OW 321
8079: PUSH
8080: LD_INT 2
8082: EQUAL
8083: IFFALSE 8100
// bpoints := bpoints * 1.8 ;
8085: LD_ADDR_VAR 0 10
8089: PUSH
8090: LD_VAR 0 10
8094: PUSH
8095: LD_REAL  1.80000000000000E+0000
8098: MUL
8099: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8100: LD_VAR 0 6
8104: PPUSH
8105: CALL_OW 257
8109: PUSH
8110: LD_INT 1
8112: PUSH
8113: LD_INT 2
8115: PUSH
8116: LD_INT 3
8118: PUSH
8119: LD_INT 4
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: IN
8128: PUSH
8129: LD_VAR 0 1
8133: PPUSH
8134: LD_INT 51
8136: PPUSH
8137: CALL_OW 321
8141: PUSH
8142: LD_INT 2
8144: EQUAL
8145: AND
8146: IFFALSE 8163
// bpoints := bpoints * 1.2 ;
8148: LD_ADDR_VAR 0 10
8152: PUSH
8153: LD_VAR 0 10
8157: PUSH
8158: LD_REAL  1.20000000000000E+0000
8161: MUL
8162: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8163: LD_VAR 0 6
8167: PPUSH
8168: CALL_OW 257
8172: PUSH
8173: LD_INT 5
8175: PUSH
8176: LD_INT 7
8178: PUSH
8179: LD_INT 9
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: IN
8187: PUSH
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 52
8195: PPUSH
8196: CALL_OW 321
8200: PUSH
8201: LD_INT 2
8203: EQUAL
8204: AND
8205: IFFALSE 8222
// bpoints := bpoints * 1.5 ;
8207: LD_ADDR_VAR 0 10
8211: PUSH
8212: LD_VAR 0 10
8216: PUSH
8217: LD_REAL  1.50000000000000E+0000
8220: MUL
8221: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8222: LD_VAR 0 1
8226: PPUSH
8227: LD_INT 66
8229: PPUSH
8230: CALL_OW 321
8234: PUSH
8235: LD_INT 2
8237: EQUAL
8238: IFFALSE 8255
// bpoints := bpoints * 1.1 ;
8240: LD_ADDR_VAR 0 10
8244: PUSH
8245: LD_VAR 0 10
8249: PUSH
8250: LD_REAL  1.10000000000000E+0000
8253: MUL
8254: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8255: LD_ADDR_VAR 0 10
8259: PUSH
8260: LD_VAR 0 10
8264: PUSH
8265: LD_VAR 0 6
8269: PPUSH
8270: LD_INT 1
8272: PPUSH
8273: CALL_OW 259
8277: PUSH
8278: LD_REAL  1.15000000000000E+0000
8281: MUL
8282: MUL
8283: ST_TO_ADDR
// end ; unit_vehicle :
8284: GO 9112
8286: LD_INT 2
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 9100
8294: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8295: LD_VAR 0 6
8299: PPUSH
8300: CALL_OW 264
8304: PUSH
8305: LD_INT 2
8307: PUSH
8308: LD_INT 42
8310: PUSH
8311: LD_INT 24
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: IN
8319: IFFALSE 8340
// points := [ 25 , 5 , 3 ] ;
8321: LD_ADDR_VAR 0 9
8325: PUSH
8326: LD_INT 25
8328: PUSH
8329: LD_INT 5
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: LIST
8339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8340: LD_VAR 0 6
8344: PPUSH
8345: CALL_OW 264
8349: PUSH
8350: LD_INT 4
8352: PUSH
8353: LD_INT 43
8355: PUSH
8356: LD_INT 25
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: IN
8364: IFFALSE 8385
// points := [ 40 , 15 , 5 ] ;
8366: LD_ADDR_VAR 0 9
8370: PUSH
8371: LD_INT 40
8373: PUSH
8374: LD_INT 15
8376: PUSH
8377: LD_INT 5
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8385: LD_VAR 0 6
8389: PPUSH
8390: CALL_OW 264
8394: PUSH
8395: LD_INT 3
8397: PUSH
8398: LD_INT 23
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: IN
8405: IFFALSE 8426
// points := [ 7 , 25 , 8 ] ;
8407: LD_ADDR_VAR 0 9
8411: PUSH
8412: LD_INT 7
8414: PUSH
8415: LD_INT 25
8417: PUSH
8418: LD_INT 8
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8426: LD_VAR 0 6
8430: PPUSH
8431: CALL_OW 264
8435: PUSH
8436: LD_INT 5
8438: PUSH
8439: LD_INT 27
8441: PUSH
8442: LD_INT 44
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: LIST
8449: IN
8450: IFFALSE 8471
// points := [ 14 , 50 , 16 ] ;
8452: LD_ADDR_VAR 0 9
8456: PUSH
8457: LD_INT 14
8459: PUSH
8460: LD_INT 50
8462: PUSH
8463: LD_INT 16
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8471: LD_VAR 0 6
8475: PPUSH
8476: CALL_OW 264
8480: PUSH
8481: LD_INT 6
8483: PUSH
8484: LD_INT 46
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: IN
8491: IFFALSE 8512
// points := [ 32 , 120 , 70 ] ;
8493: LD_ADDR_VAR 0 9
8497: PUSH
8498: LD_INT 32
8500: PUSH
8501: LD_INT 120
8503: PUSH
8504: LD_INT 70
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8512: LD_VAR 0 6
8516: PPUSH
8517: CALL_OW 264
8521: PUSH
8522: LD_INT 7
8524: PUSH
8525: LD_INT 28
8527: PUSH
8528: LD_INT 45
8530: PUSH
8531: LD_INT 92
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: IN
8540: IFFALSE 8561
// points := [ 35 , 20 , 45 ] ;
8542: LD_ADDR_VAR 0 9
8546: PUSH
8547: LD_INT 35
8549: PUSH
8550: LD_INT 20
8552: PUSH
8553: LD_INT 45
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8561: LD_VAR 0 6
8565: PPUSH
8566: CALL_OW 264
8570: PUSH
8571: LD_INT 47
8573: PUSH
8574: EMPTY
8575: LIST
8576: IN
8577: IFFALSE 8598
// points := [ 67 , 45 , 75 ] ;
8579: LD_ADDR_VAR 0 9
8583: PUSH
8584: LD_INT 67
8586: PUSH
8587: LD_INT 45
8589: PUSH
8590: LD_INT 75
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8598: LD_VAR 0 6
8602: PPUSH
8603: CALL_OW 264
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: EMPTY
8612: LIST
8613: IN
8614: IFFALSE 8635
// points := [ 120 , 30 , 80 ] ;
8616: LD_ADDR_VAR 0 9
8620: PUSH
8621: LD_INT 120
8623: PUSH
8624: LD_INT 30
8626: PUSH
8627: LD_INT 80
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8635: LD_VAR 0 6
8639: PPUSH
8640: CALL_OW 264
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: EMPTY
8649: LIST
8650: IN
8651: IFFALSE 8672
// points := [ 40 , 1 , 1 ] ;
8653: LD_ADDR_VAR 0 9
8657: PUSH
8658: LD_INT 40
8660: PUSH
8661: LD_INT 1
8663: PUSH
8664: LD_INT 1
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: LIST
8671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8672: LD_VAR 0 6
8676: PPUSH
8677: CALL_OW 264
8681: PUSH
8682: LD_INT 29
8684: PUSH
8685: EMPTY
8686: LIST
8687: IN
8688: IFFALSE 8709
// points := [ 70 , 200 , 400 ] ;
8690: LD_ADDR_VAR 0 9
8694: PUSH
8695: LD_INT 70
8697: PUSH
8698: LD_INT 200
8700: PUSH
8701: LD_INT 400
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8709: LD_VAR 0 6
8713: PPUSH
8714: CALL_OW 264
8718: PUSH
8719: LD_INT 14
8721: PUSH
8722: LD_INT 53
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: IN
8729: IFFALSE 8750
// points := [ 40 , 10 , 20 ] ;
8731: LD_ADDR_VAR 0 9
8735: PUSH
8736: LD_INT 40
8738: PUSH
8739: LD_INT 10
8741: PUSH
8742: LD_INT 20
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8750: LD_VAR 0 6
8754: PPUSH
8755: CALL_OW 264
8759: PUSH
8760: LD_INT 9
8762: PUSH
8763: EMPTY
8764: LIST
8765: IN
8766: IFFALSE 8787
// points := [ 5 , 70 , 20 ] ;
8768: LD_ADDR_VAR 0 9
8772: PUSH
8773: LD_INT 5
8775: PUSH
8776: LD_INT 70
8778: PUSH
8779: LD_INT 20
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8787: LD_VAR 0 6
8791: PPUSH
8792: CALL_OW 264
8796: PUSH
8797: LD_INT 10
8799: PUSH
8800: EMPTY
8801: LIST
8802: IN
8803: IFFALSE 8824
// points := [ 35 , 110 , 70 ] ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: LD_INT 35
8812: PUSH
8813: LD_INT 110
8815: PUSH
8816: LD_INT 70
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8824: LD_VAR 0 6
8828: PPUSH
8829: CALL_OW 265
8833: PUSH
8834: LD_INT 25
8836: EQUAL
8837: IFFALSE 8858
// points := [ 80 , 65 , 100 ] ;
8839: LD_ADDR_VAR 0 9
8843: PUSH
8844: LD_INT 80
8846: PUSH
8847: LD_INT 65
8849: PUSH
8850: LD_INT 100
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8858: LD_VAR 0 6
8862: PPUSH
8863: CALL_OW 263
8867: PUSH
8868: LD_INT 1
8870: EQUAL
8871: IFFALSE 8906
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8873: LD_ADDR_VAR 0 10
8877: PUSH
8878: LD_VAR 0 10
8882: PUSH
8883: LD_VAR 0 6
8887: PPUSH
8888: CALL_OW 311
8892: PPUSH
8893: LD_INT 3
8895: PPUSH
8896: CALL_OW 259
8900: PUSH
8901: LD_INT 4
8903: MUL
8904: MUL
8905: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8906: LD_VAR 0 6
8910: PPUSH
8911: CALL_OW 263
8915: PUSH
8916: LD_INT 2
8918: EQUAL
8919: IFFALSE 8970
// begin j := IsControledBy ( i ) ;
8921: LD_ADDR_VAR 0 7
8925: PUSH
8926: LD_VAR 0 6
8930: PPUSH
8931: CALL_OW 312
8935: ST_TO_ADDR
// if j then
8936: LD_VAR 0 7
8940: IFFALSE 8970
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8942: LD_ADDR_VAR 0 10
8946: PUSH
8947: LD_VAR 0 10
8951: PUSH
8952: LD_VAR 0 7
8956: PPUSH
8957: LD_INT 3
8959: PPUSH
8960: CALL_OW 259
8964: PUSH
8965: LD_INT 3
8967: MUL
8968: MUL
8969: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8970: LD_VAR 0 6
8974: PPUSH
8975: CALL_OW 264
8979: PUSH
8980: LD_INT 5
8982: PUSH
8983: LD_INT 6
8985: PUSH
8986: LD_INT 46
8988: PUSH
8989: LD_INT 44
8991: PUSH
8992: LD_INT 47
8994: PUSH
8995: LD_INT 45
8997: PUSH
8998: LD_INT 28
9000: PUSH
9001: LD_INT 7
9003: PUSH
9004: LD_INT 27
9006: PUSH
9007: LD_INT 29
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: IN
9022: PUSH
9023: LD_VAR 0 1
9027: PPUSH
9028: LD_INT 52
9030: PPUSH
9031: CALL_OW 321
9035: PUSH
9036: LD_INT 2
9038: EQUAL
9039: AND
9040: IFFALSE 9057
// bpoints := bpoints * 1.2 ;
9042: LD_ADDR_VAR 0 10
9046: PUSH
9047: LD_VAR 0 10
9051: PUSH
9052: LD_REAL  1.20000000000000E+0000
9055: MUL
9056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9057: LD_VAR 0 6
9061: PPUSH
9062: CALL_OW 264
9066: PUSH
9067: LD_INT 6
9069: PUSH
9070: LD_INT 46
9072: PUSH
9073: LD_INT 47
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9098
// bpoints := bpoints * 1.2 ;
9083: LD_ADDR_VAR 0 10
9087: PUSH
9088: LD_VAR 0 10
9092: PUSH
9093: LD_REAL  1.20000000000000E+0000
9096: MUL
9097: ST_TO_ADDR
// end ; unit_building :
9098: GO 9112
9100: LD_INT 3
9102: DOUBLE
9103: EQUAL
9104: IFTRUE 9108
9106: GO 9111
9108: POP
// ; end ;
9109: GO 9112
9111: POP
// for j = 1 to 3 do
9112: LD_ADDR_VAR 0 7
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_INT 3
9124: PUSH
9125: FOR_TO
9126: IFFALSE 9179
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9128: LD_ADDR_VAR 0 5
9132: PUSH
9133: LD_VAR 0 5
9137: PPUSH
9138: LD_VAR 0 7
9142: PPUSH
9143: LD_VAR 0 5
9147: PUSH
9148: LD_VAR 0 7
9152: ARRAY
9153: PUSH
9154: LD_VAR 0 9
9158: PUSH
9159: LD_VAR 0 7
9163: ARRAY
9164: PUSH
9165: LD_VAR 0 10
9169: MUL
9170: PLUS
9171: PPUSH
9172: CALL_OW 1
9176: ST_TO_ADDR
9177: GO 9125
9179: POP
9180: POP
// end ;
9181: GO 7660
9183: POP
9184: POP
// result := Replace ( result , 4 , tmp ) ;
9185: LD_ADDR_VAR 0 5
9189: PUSH
9190: LD_VAR 0 5
9194: PPUSH
9195: LD_INT 4
9197: PPUSH
9198: LD_VAR 0 8
9202: PPUSH
9203: CALL_OW 1
9207: ST_TO_ADDR
// end ;
9208: LD_VAR 0 5
9212: RET
// export function DangerAtRange ( unit , range ) ; begin
9213: LD_INT 0
9215: PPUSH
// if not unit then
9216: LD_VAR 0 1
9220: NOT
9221: IFFALSE 9225
// exit ;
9223: GO 9270
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9225: LD_ADDR_VAR 0 3
9229: PUSH
9230: LD_VAR 0 1
9234: PPUSH
9235: CALL_OW 255
9239: PPUSH
9240: LD_VAR 0 1
9244: PPUSH
9245: CALL_OW 250
9249: PPUSH
9250: LD_VAR 0 1
9254: PPUSH
9255: CALL_OW 251
9259: PPUSH
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL 7512 0 4
9269: ST_TO_ADDR
// end ;
9270: LD_VAR 0 3
9274: RET
// export function DangerInArea ( side , area ) ; begin
9275: LD_INT 0
9277: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: LD_VAR 0 2
9287: PPUSH
9288: LD_INT 81
9290: PUSH
9291: LD_VAR 0 1
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PPUSH
9300: CALL_OW 70
9304: ST_TO_ADDR
// end ;
9305: LD_VAR 0 3
9309: RET
// export function IsExtension ( b ) ; begin
9310: LD_INT 0
9312: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_VAR 0 1
9322: PUSH
9323: LD_INT 23
9325: PUSH
9326: LD_INT 20
9328: PUSH
9329: LD_INT 22
9331: PUSH
9332: LD_INT 17
9334: PUSH
9335: LD_INT 24
9337: PUSH
9338: LD_INT 21
9340: PUSH
9341: LD_INT 19
9343: PUSH
9344: LD_INT 16
9346: PUSH
9347: LD_INT 25
9349: PUSH
9350: LD_INT 18
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: IN
9365: ST_TO_ADDR
// end ;
9366: LD_VAR 0 2
9370: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9371: LD_INT 0
9373: PPUSH
9374: PPUSH
9375: PPUSH
// result := [ ] ;
9376: LD_ADDR_VAR 0 4
9380: PUSH
9381: EMPTY
9382: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9383: LD_ADDR_VAR 0 5
9387: PUSH
9388: LD_VAR 0 2
9392: PPUSH
9393: LD_INT 21
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 70
9407: ST_TO_ADDR
// if not tmp then
9408: LD_VAR 0 5
9412: NOT
9413: IFFALSE 9417
// exit ;
9415: GO 9481
// if checkLink then
9417: LD_VAR 0 3
9421: IFFALSE 9471
// begin for i in tmp do
9423: LD_ADDR_VAR 0 6
9427: PUSH
9428: LD_VAR 0 5
9432: PUSH
9433: FOR_IN
9434: IFFALSE 9469
// if GetBase ( i ) <> base then
9436: LD_VAR 0 6
9440: PPUSH
9441: CALL_OW 274
9445: PUSH
9446: LD_VAR 0 1
9450: NONEQUAL
9451: IFFALSE 9467
// ComLinkToBase ( base , i ) ;
9453: LD_VAR 0 1
9457: PPUSH
9458: LD_VAR 0 6
9462: PPUSH
9463: CALL_OW 169
9467: GO 9433
9469: POP
9470: POP
// end ; result := tmp ;
9471: LD_ADDR_VAR 0 4
9475: PUSH
9476: LD_VAR 0 5
9480: ST_TO_ADDR
// end ;
9481: LD_VAR 0 4
9485: RET
// export function ComComplete ( units , b ) ; var i ; begin
9486: LD_INT 0
9488: PPUSH
9489: PPUSH
// if not units then
9490: LD_VAR 0 1
9494: NOT
9495: IFFALSE 9499
// exit ;
9497: GO 9589
// for i in units do
9499: LD_ADDR_VAR 0 4
9503: PUSH
9504: LD_VAR 0 1
9508: PUSH
9509: FOR_IN
9510: IFFALSE 9587
// if BuildingStatus ( b ) = bs_build then
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 461
9521: PUSH
9522: LD_INT 1
9524: EQUAL
9525: IFFALSE 9585
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9527: LD_VAR 0 4
9531: PPUSH
9532: LD_STRING h
9534: PUSH
9535: LD_VAR 0 2
9539: PPUSH
9540: CALL_OW 250
9544: PUSH
9545: LD_VAR 0 2
9549: PPUSH
9550: CALL_OW 251
9554: PUSH
9555: LD_VAR 0 2
9559: PUSH
9560: LD_INT 0
9562: PUSH
9563: LD_INT 0
9565: PUSH
9566: LD_INT 0
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: PPUSH
9581: CALL_OW 446
9585: GO 9509
9587: POP
9588: POP
// end ;
9589: LD_VAR 0 3
9593: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9594: LD_INT 0
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
9601: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9602: LD_VAR 0 1
9606: NOT
9607: PUSH
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 263
9617: PUSH
9618: LD_INT 2
9620: NONEQUAL
9621: OR
9622: IFFALSE 9626
// exit ;
9624: GO 9942
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9626: LD_ADDR_VAR 0 6
9630: PUSH
9631: LD_INT 22
9633: PUSH
9634: LD_VAR 0 1
9638: PPUSH
9639: CALL_OW 255
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: LD_INT 30
9653: PUSH
9654: LD_INT 36
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 34
9663: PUSH
9664: LD_INT 31
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PPUSH
9680: CALL_OW 69
9684: ST_TO_ADDR
// if not tmp then
9685: LD_VAR 0 6
9689: NOT
9690: IFFALSE 9694
// exit ;
9692: GO 9942
// result := [ ] ;
9694: LD_ADDR_VAR 0 2
9698: PUSH
9699: EMPTY
9700: ST_TO_ADDR
// for i in tmp do
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_VAR 0 6
9710: PUSH
9711: FOR_IN
9712: IFFALSE 9783
// begin t := UnitsInside ( i ) ;
9714: LD_ADDR_VAR 0 4
9718: PUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: CALL_OW 313
9728: ST_TO_ADDR
// if t then
9729: LD_VAR 0 4
9733: IFFALSE 9781
// for j in t do
9735: LD_ADDR_VAR 0 7
9739: PUSH
9740: LD_VAR 0 4
9744: PUSH
9745: FOR_IN
9746: IFFALSE 9779
// result := Replace ( result , result + 1 , j ) ;
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: LD_VAR 0 2
9757: PPUSH
9758: LD_VAR 0 2
9762: PUSH
9763: LD_INT 1
9765: PLUS
9766: PPUSH
9767: LD_VAR 0 7
9771: PPUSH
9772: CALL_OW 1
9776: ST_TO_ADDR
9777: GO 9745
9779: POP
9780: POP
// end ;
9781: GO 9711
9783: POP
9784: POP
// if not result then
9785: LD_VAR 0 2
9789: NOT
9790: IFFALSE 9794
// exit ;
9792: GO 9942
// mech := result [ 1 ] ;
9794: LD_ADDR_VAR 0 5
9798: PUSH
9799: LD_VAR 0 2
9803: PUSH
9804: LD_INT 1
9806: ARRAY
9807: ST_TO_ADDR
// if result > 1 then
9808: LD_VAR 0 2
9812: PUSH
9813: LD_INT 1
9815: GREATER
9816: IFFALSE 9928
// begin for i = 2 to result do
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: DOUBLE
9824: LD_INT 2
9826: DEC
9827: ST_TO_ADDR
9828: LD_VAR 0 2
9832: PUSH
9833: FOR_TO
9834: IFFALSE 9926
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9836: LD_ADDR_VAR 0 4
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: LD_VAR 0 3
9850: ARRAY
9851: PPUSH
9852: LD_INT 3
9854: PPUSH
9855: CALL_OW 259
9859: PUSH
9860: LD_VAR 0 2
9864: PUSH
9865: LD_VAR 0 3
9869: ARRAY
9870: PPUSH
9871: CALL_OW 432
9875: MINUS
9876: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9877: LD_VAR 0 4
9881: PUSH
9882: LD_VAR 0 5
9886: PPUSH
9887: LD_INT 3
9889: PPUSH
9890: CALL_OW 259
9894: PUSH
9895: LD_VAR 0 5
9899: PPUSH
9900: CALL_OW 432
9904: MINUS
9905: GREATEREQUAL
9906: IFFALSE 9924
// mech := result [ i ] ;
9908: LD_ADDR_VAR 0 5
9912: PUSH
9913: LD_VAR 0 2
9917: PUSH
9918: LD_VAR 0 3
9922: ARRAY
9923: ST_TO_ADDR
// end ;
9924: GO 9833
9926: POP
9927: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9928: LD_VAR 0 1
9932: PPUSH
9933: LD_VAR 0 5
9937: PPUSH
9938: CALL_OW 135
// end ;
9942: LD_VAR 0 2
9946: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9947: LD_INT 0
9949: PPUSH
9950: PPUSH
9951: PPUSH
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
9956: PPUSH
9957: PPUSH
9958: PPUSH
9959: PPUSH
9960: PPUSH
9961: PPUSH
// result := [ ] ;
9962: LD_ADDR_VAR 0 7
9966: PUSH
9967: EMPTY
9968: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9969: LD_VAR 0 1
9973: PPUSH
9974: CALL_OW 266
9978: PUSH
9979: LD_INT 0
9981: PUSH
9982: LD_INT 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: IN
9989: NOT
9990: IFFALSE 9994
// exit ;
9992: GO 11628
// if name then
9994: LD_VAR 0 3
9998: IFFALSE 10014
// SetBName ( base_dep , name ) ;
10000: LD_VAR 0 1
10004: PPUSH
10005: LD_VAR 0 3
10009: PPUSH
10010: CALL_OW 500
// base := GetBase ( base_dep ) ;
10014: LD_ADDR_VAR 0 15
10018: PUSH
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 274
10028: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10029: LD_ADDR_VAR 0 16
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 255
10043: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10044: LD_ADDR_VAR 0 17
10048: PUSH
10049: LD_VAR 0 1
10053: PPUSH
10054: CALL_OW 248
10058: ST_TO_ADDR
// if sources then
10059: LD_VAR 0 5
10063: IFFALSE 10110
// for i = 1 to 3 do
10065: LD_ADDR_VAR 0 8
10069: PUSH
10070: DOUBLE
10071: LD_INT 1
10073: DEC
10074: ST_TO_ADDR
10075: LD_INT 3
10077: PUSH
10078: FOR_TO
10079: IFFALSE 10108
// AddResourceType ( base , i , sources [ i ] ) ;
10081: LD_VAR 0 15
10085: PPUSH
10086: LD_VAR 0 8
10090: PPUSH
10091: LD_VAR 0 5
10095: PUSH
10096: LD_VAR 0 8
10100: ARRAY
10101: PPUSH
10102: CALL_OW 276
10106: GO 10078
10108: POP
10109: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10110: LD_ADDR_VAR 0 18
10114: PUSH
10115: LD_VAR 0 15
10119: PPUSH
10120: LD_VAR 0 2
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: CALL 9371 0 3
10132: ST_TO_ADDR
// InitHc ;
10133: CALL_OW 19
// InitUc ;
10137: CALL_OW 18
// uc_side := side ;
10141: LD_ADDR_OWVAR 20
10145: PUSH
10146: LD_VAR 0 16
10150: ST_TO_ADDR
// uc_nation := nation ;
10151: LD_ADDR_OWVAR 21
10155: PUSH
10156: LD_VAR 0 17
10160: ST_TO_ADDR
// if buildings then
10161: LD_VAR 0 18
10165: IFFALSE 11487
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10167: LD_ADDR_VAR 0 19
10171: PUSH
10172: LD_VAR 0 18
10176: PPUSH
10177: LD_INT 2
10179: PUSH
10180: LD_INT 30
10182: PUSH
10183: LD_INT 29
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: LD_INT 30
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 72
10209: ST_TO_ADDR
// if tmp then
10210: LD_VAR 0 19
10214: IFFALSE 10262
// for i in tmp do
10216: LD_ADDR_VAR 0 8
10220: PUSH
10221: LD_VAR 0 19
10225: PUSH
10226: FOR_IN
10227: IFFALSE 10260
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10229: LD_VAR 0 8
10233: PPUSH
10234: CALL_OW 250
10238: PPUSH
10239: LD_VAR 0 8
10243: PPUSH
10244: CALL_OW 251
10248: PPUSH
10249: LD_VAR 0 16
10253: PPUSH
10254: CALL_OW 441
10258: GO 10226
10260: POP
10261: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10262: LD_VAR 0 18
10266: PPUSH
10267: LD_INT 2
10269: PUSH
10270: LD_INT 30
10272: PUSH
10273: LD_INT 32
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 30
10282: PUSH
10283: LD_INT 33
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 72
10299: IFFALSE 10387
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10301: LD_ADDR_VAR 0 8
10305: PUSH
10306: LD_VAR 0 18
10310: PPUSH
10311: LD_INT 2
10313: PUSH
10314: LD_INT 30
10316: PUSH
10317: LD_INT 32
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 30
10326: PUSH
10327: LD_INT 33
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: LIST
10338: PPUSH
10339: CALL_OW 72
10343: PUSH
10344: FOR_IN
10345: IFFALSE 10385
// begin if not GetBWeapon ( i ) then
10347: LD_VAR 0 8
10351: PPUSH
10352: CALL_OW 269
10356: NOT
10357: IFFALSE 10383
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10359: LD_VAR 0 8
10363: PPUSH
10364: LD_VAR 0 8
10368: PPUSH
10369: LD_VAR 0 2
10373: PPUSH
10374: CALL 11633 0 2
10378: PPUSH
10379: CALL_OW 431
// end ;
10383: GO 10344
10385: POP
10386: POP
// end ; for i = 1 to personel do
10387: LD_ADDR_VAR 0 8
10391: PUSH
10392: DOUBLE
10393: LD_INT 1
10395: DEC
10396: ST_TO_ADDR
10397: LD_VAR 0 6
10401: PUSH
10402: FOR_TO
10403: IFFALSE 11467
// begin if i > 4 then
10405: LD_VAR 0 8
10409: PUSH
10410: LD_INT 4
10412: GREATER
10413: IFFALSE 10417
// break ;
10415: GO 11467
// case i of 1 :
10417: LD_VAR 0 8
10421: PUSH
10422: LD_INT 1
10424: DOUBLE
10425: EQUAL
10426: IFTRUE 10430
10428: GO 10510
10430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10431: LD_ADDR_VAR 0 12
10435: PUSH
10436: LD_VAR 0 18
10440: PPUSH
10441: LD_INT 22
10443: PUSH
10444: LD_VAR 0 16
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 58
10455: PUSH
10456: EMPTY
10457: LIST
10458: PUSH
10459: LD_INT 2
10461: PUSH
10462: LD_INT 30
10464: PUSH
10465: LD_INT 32
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 30
10474: PUSH
10475: LD_INT 4
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 30
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: PPUSH
10503: CALL_OW 72
10507: ST_TO_ADDR
10508: GO 10732
10510: LD_INT 2
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10580
10518: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10519: LD_ADDR_VAR 0 12
10523: PUSH
10524: LD_VAR 0 18
10528: PPUSH
10529: LD_INT 22
10531: PUSH
10532: LD_VAR 0 16
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 2
10543: PUSH
10544: LD_INT 30
10546: PUSH
10547: LD_INT 0
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 30
10556: PUSH
10557: LD_INT 1
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PPUSH
10573: CALL_OW 72
10577: ST_TO_ADDR
10578: GO 10732
10580: LD_INT 3
10582: DOUBLE
10583: EQUAL
10584: IFTRUE 10588
10586: GO 10650
10588: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10589: LD_ADDR_VAR 0 12
10593: PUSH
10594: LD_VAR 0 18
10598: PPUSH
10599: LD_INT 22
10601: PUSH
10602: LD_VAR 0 16
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 2
10613: PUSH
10614: LD_INT 30
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 30
10626: PUSH
10627: LD_INT 3
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 72
10647: ST_TO_ADDR
10648: GO 10732
10650: LD_INT 4
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 10731
10658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10659: LD_ADDR_VAR 0 12
10663: PUSH
10664: LD_VAR 0 18
10668: PPUSH
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 16
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 2
10683: PUSH
10684: LD_INT 30
10686: PUSH
10687: LD_INT 6
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 30
10696: PUSH
10697: LD_INT 7
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 30
10706: PUSH
10707: LD_INT 8
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 72
10728: ST_TO_ADDR
10729: GO 10732
10731: POP
// if i = 1 then
10732: LD_VAR 0 8
10736: PUSH
10737: LD_INT 1
10739: EQUAL
10740: IFFALSE 10851
// begin tmp := [ ] ;
10742: LD_ADDR_VAR 0 19
10746: PUSH
10747: EMPTY
10748: ST_TO_ADDR
// for j in f do
10749: LD_ADDR_VAR 0 9
10753: PUSH
10754: LD_VAR 0 12
10758: PUSH
10759: FOR_IN
10760: IFFALSE 10833
// if GetBType ( j ) = b_bunker then
10762: LD_VAR 0 9
10766: PPUSH
10767: CALL_OW 266
10771: PUSH
10772: LD_INT 32
10774: EQUAL
10775: IFFALSE 10802
// tmp := Insert ( tmp , 1 , j ) else
10777: LD_ADDR_VAR 0 19
10781: PUSH
10782: LD_VAR 0 19
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: LD_VAR 0 9
10794: PPUSH
10795: CALL_OW 2
10799: ST_TO_ADDR
10800: GO 10831
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10802: LD_ADDR_VAR 0 19
10806: PUSH
10807: LD_VAR 0 19
10811: PPUSH
10812: LD_VAR 0 19
10816: PUSH
10817: LD_INT 1
10819: PLUS
10820: PPUSH
10821: LD_VAR 0 9
10825: PPUSH
10826: CALL_OW 2
10830: ST_TO_ADDR
10831: GO 10759
10833: POP
10834: POP
// if tmp then
10835: LD_VAR 0 19
10839: IFFALSE 10851
// f := tmp ;
10841: LD_ADDR_VAR 0 12
10845: PUSH
10846: LD_VAR 0 19
10850: ST_TO_ADDR
// end ; x := personel [ i ] ;
10851: LD_ADDR_VAR 0 13
10855: PUSH
10856: LD_VAR 0 6
10860: PUSH
10861: LD_VAR 0 8
10865: ARRAY
10866: ST_TO_ADDR
// if x = - 1 then
10867: LD_VAR 0 13
10871: PUSH
10872: LD_INT 1
10874: NEG
10875: EQUAL
10876: IFFALSE 11085
// begin for j in f do
10878: LD_ADDR_VAR 0 9
10882: PUSH
10883: LD_VAR 0 12
10887: PUSH
10888: FOR_IN
10889: IFFALSE 11081
// repeat InitHc ;
10891: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10895: LD_VAR 0 9
10899: PPUSH
10900: CALL_OW 266
10904: PUSH
10905: LD_INT 5
10907: EQUAL
10908: IFFALSE 10978
// begin if UnitsInside ( j ) < 3 then
10910: LD_VAR 0 9
10914: PPUSH
10915: CALL_OW 313
10919: PUSH
10920: LD_INT 3
10922: LESS
10923: IFFALSE 10959
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10925: LD_INT 0
10927: PPUSH
10928: LD_INT 5
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: LD_INT 9
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: PUSH
10942: LD_VAR 0 17
10946: ARRAY
10947: PPUSH
10948: LD_VAR 0 4
10952: PPUSH
10953: CALL_OW 380
10957: GO 10976
// PrepareHuman ( false , i , skill ) ;
10959: LD_INT 0
10961: PPUSH
10962: LD_VAR 0 8
10966: PPUSH
10967: LD_VAR 0 4
10971: PPUSH
10972: CALL_OW 380
// end else
10976: GO 10995
// PrepareHuman ( false , i , skill ) ;
10978: LD_INT 0
10980: PPUSH
10981: LD_VAR 0 8
10985: PPUSH
10986: LD_VAR 0 4
10990: PPUSH
10991: CALL_OW 380
// un := CreateHuman ;
10995: LD_ADDR_VAR 0 14
10999: PUSH
11000: CALL_OW 44
11004: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11005: LD_ADDR_VAR 0 7
11009: PUSH
11010: LD_VAR 0 7
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: LD_VAR 0 14
11022: PPUSH
11023: CALL_OW 2
11027: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11028: LD_VAR 0 14
11032: PPUSH
11033: LD_VAR 0 9
11037: PPUSH
11038: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11042: LD_VAR 0 9
11046: PPUSH
11047: CALL_OW 313
11051: PUSH
11052: LD_INT 6
11054: EQUAL
11055: PUSH
11056: LD_VAR 0 9
11060: PPUSH
11061: CALL_OW 266
11065: PUSH
11066: LD_INT 32
11068: PUSH
11069: LD_INT 31
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: IN
11076: OR
11077: IFFALSE 10891
11079: GO 10888
11081: POP
11082: POP
// end else
11083: GO 11465
// for j = 1 to x do
11085: LD_ADDR_VAR 0 9
11089: PUSH
11090: DOUBLE
11091: LD_INT 1
11093: DEC
11094: ST_TO_ADDR
11095: LD_VAR 0 13
11099: PUSH
11100: FOR_TO
11101: IFFALSE 11463
// begin InitHc ;
11103: CALL_OW 19
// if not f then
11107: LD_VAR 0 12
11111: NOT
11112: IFFALSE 11201
// begin PrepareHuman ( false , i , skill ) ;
11114: LD_INT 0
11116: PPUSH
11117: LD_VAR 0 8
11121: PPUSH
11122: LD_VAR 0 4
11126: PPUSH
11127: CALL_OW 380
// un := CreateHuman ;
11131: LD_ADDR_VAR 0 14
11135: PUSH
11136: CALL_OW 44
11140: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11141: LD_ADDR_VAR 0 7
11145: PUSH
11146: LD_VAR 0 7
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: LD_VAR 0 14
11158: PPUSH
11159: CALL_OW 2
11163: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11164: LD_VAR 0 14
11168: PPUSH
11169: LD_VAR 0 1
11173: PPUSH
11174: CALL_OW 250
11178: PPUSH
11179: LD_VAR 0 1
11183: PPUSH
11184: CALL_OW 251
11188: PPUSH
11189: LD_INT 10
11191: PPUSH
11192: LD_INT 0
11194: PPUSH
11195: CALL_OW 50
// continue ;
11199: GO 11100
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11201: LD_VAR 0 12
11205: PUSH
11206: LD_INT 1
11208: ARRAY
11209: PPUSH
11210: CALL_OW 313
11214: PUSH
11215: LD_VAR 0 12
11219: PUSH
11220: LD_INT 1
11222: ARRAY
11223: PPUSH
11224: CALL_OW 266
11228: PUSH
11229: LD_INT 32
11231: PUSH
11232: LD_INT 31
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: IN
11239: AND
11240: PUSH
11241: LD_VAR 0 12
11245: PUSH
11246: LD_INT 1
11248: ARRAY
11249: PPUSH
11250: CALL_OW 313
11254: PUSH
11255: LD_INT 6
11257: EQUAL
11258: OR
11259: IFFALSE 11279
// f := Delete ( f , 1 ) ;
11261: LD_ADDR_VAR 0 12
11265: PUSH
11266: LD_VAR 0 12
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 3
11278: ST_TO_ADDR
// if not f then
11279: LD_VAR 0 12
11283: NOT
11284: IFFALSE 11302
// begin x := x + 2 ;
11286: LD_ADDR_VAR 0 13
11290: PUSH
11291: LD_VAR 0 13
11295: PUSH
11296: LD_INT 2
11298: PLUS
11299: ST_TO_ADDR
// continue ;
11300: GO 11100
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11302: LD_VAR 0 12
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PPUSH
11311: CALL_OW 266
11315: PUSH
11316: LD_INT 5
11318: EQUAL
11319: IFFALSE 11393
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11321: LD_VAR 0 12
11325: PUSH
11326: LD_INT 1
11328: ARRAY
11329: PPUSH
11330: CALL_OW 313
11334: PUSH
11335: LD_INT 3
11337: LESS
11338: IFFALSE 11374
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11340: LD_INT 0
11342: PPUSH
11343: LD_INT 5
11345: PUSH
11346: LD_INT 8
11348: PUSH
11349: LD_INT 9
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_VAR 0 17
11361: ARRAY
11362: PPUSH
11363: LD_VAR 0 4
11367: PPUSH
11368: CALL_OW 380
11372: GO 11391
// PrepareHuman ( false , i , skill ) ;
11374: LD_INT 0
11376: PPUSH
11377: LD_VAR 0 8
11381: PPUSH
11382: LD_VAR 0 4
11386: PPUSH
11387: CALL_OW 380
// end else
11391: GO 11410
// PrepareHuman ( false , i , skill ) ;
11393: LD_INT 0
11395: PPUSH
11396: LD_VAR 0 8
11400: PPUSH
11401: LD_VAR 0 4
11405: PPUSH
11406: CALL_OW 380
// un := CreateHuman ;
11410: LD_ADDR_VAR 0 14
11414: PUSH
11415: CALL_OW 44
11419: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11420: LD_ADDR_VAR 0 7
11424: PUSH
11425: LD_VAR 0 7
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: LD_VAR 0 14
11437: PPUSH
11438: CALL_OW 2
11442: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11443: LD_VAR 0 14
11447: PPUSH
11448: LD_VAR 0 12
11452: PUSH
11453: LD_INT 1
11455: ARRAY
11456: PPUSH
11457: CALL_OW 52
// end ;
11461: GO 11100
11463: POP
11464: POP
// end ;
11465: GO 10402
11467: POP
11468: POP
// result := result ^ buildings ;
11469: LD_ADDR_VAR 0 7
11473: PUSH
11474: LD_VAR 0 7
11478: PUSH
11479: LD_VAR 0 18
11483: ADD
11484: ST_TO_ADDR
// end else
11485: GO 11628
// begin for i = 1 to personel do
11487: LD_ADDR_VAR 0 8
11491: PUSH
11492: DOUBLE
11493: LD_INT 1
11495: DEC
11496: ST_TO_ADDR
11497: LD_VAR 0 6
11501: PUSH
11502: FOR_TO
11503: IFFALSE 11626
// begin if i > 4 then
11505: LD_VAR 0 8
11509: PUSH
11510: LD_INT 4
11512: GREATER
11513: IFFALSE 11517
// break ;
11515: GO 11626
// x := personel [ i ] ;
11517: LD_ADDR_VAR 0 13
11521: PUSH
11522: LD_VAR 0 6
11526: PUSH
11527: LD_VAR 0 8
11531: ARRAY
11532: ST_TO_ADDR
// if x = - 1 then
11533: LD_VAR 0 13
11537: PUSH
11538: LD_INT 1
11540: NEG
11541: EQUAL
11542: IFFALSE 11546
// continue ;
11544: GO 11502
// PrepareHuman ( false , i , skill ) ;
11546: LD_INT 0
11548: PPUSH
11549: LD_VAR 0 8
11553: PPUSH
11554: LD_VAR 0 4
11558: PPUSH
11559: CALL_OW 380
// un := CreateHuman ;
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: CALL_OW 44
11572: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11573: LD_VAR 0 14
11577: PPUSH
11578: LD_VAR 0 1
11582: PPUSH
11583: CALL_OW 250
11587: PPUSH
11588: LD_VAR 0 1
11592: PPUSH
11593: CALL_OW 251
11597: PPUSH
11598: LD_INT 10
11600: PPUSH
11601: LD_INT 0
11603: PPUSH
11604: CALL_OW 50
// result := result ^ un ;
11608: LD_ADDR_VAR 0 7
11612: PUSH
11613: LD_VAR 0 7
11617: PUSH
11618: LD_VAR 0 14
11622: ADD
11623: ST_TO_ADDR
// end ;
11624: GO 11502
11626: POP
11627: POP
// end ; end ;
11628: LD_VAR 0 7
11632: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
11637: PPUSH
11638: PPUSH
11639: PPUSH
11640: PPUSH
11641: PPUSH
11642: PPUSH
11643: PPUSH
11644: PPUSH
11645: PPUSH
11646: PPUSH
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
// result := false ;
11651: LD_ADDR_VAR 0 3
11655: PUSH
11656: LD_INT 0
11658: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11659: LD_VAR 0 1
11663: NOT
11664: PUSH
11665: LD_VAR 0 1
11669: PPUSH
11670: CALL_OW 266
11674: PUSH
11675: LD_INT 32
11677: PUSH
11678: LD_INT 33
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: IN
11685: NOT
11686: OR
11687: IFFALSE 11691
// exit ;
11689: GO 12800
// nat := GetNation ( tower ) ;
11691: LD_ADDR_VAR 0 12
11695: PUSH
11696: LD_VAR 0 1
11700: PPUSH
11701: CALL_OW 248
11705: ST_TO_ADDR
// side := GetSide ( tower ) ;
11706: LD_ADDR_VAR 0 16
11710: PUSH
11711: LD_VAR 0 1
11715: PPUSH
11716: CALL_OW 255
11720: ST_TO_ADDR
// x := GetX ( tower ) ;
11721: LD_ADDR_VAR 0 10
11725: PUSH
11726: LD_VAR 0 1
11730: PPUSH
11731: CALL_OW 250
11735: ST_TO_ADDR
// y := GetY ( tower ) ;
11736: LD_ADDR_VAR 0 11
11740: PUSH
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 251
11750: ST_TO_ADDR
// if not x or not y then
11751: LD_VAR 0 10
11755: NOT
11756: PUSH
11757: LD_VAR 0 11
11761: NOT
11762: OR
11763: IFFALSE 11767
// exit ;
11765: GO 12800
// weapon := 0 ;
11767: LD_ADDR_VAR 0 18
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// fac_list := [ ] ;
11775: LD_ADDR_VAR 0 17
11779: PUSH
11780: EMPTY
11781: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11782: LD_ADDR_VAR 0 6
11786: PUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: CALL_OW 274
11796: PPUSH
11797: LD_VAR 0 2
11801: PPUSH
11802: LD_INT 0
11804: PPUSH
11805: CALL 9371 0 3
11809: PPUSH
11810: LD_INT 30
11812: PUSH
11813: LD_INT 3
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PPUSH
11820: CALL_OW 72
11824: ST_TO_ADDR
// if not factories then
11825: LD_VAR 0 6
11829: NOT
11830: IFFALSE 11834
// exit ;
11832: GO 12800
// for i in factories do
11834: LD_ADDR_VAR 0 8
11838: PUSH
11839: LD_VAR 0 6
11843: PUSH
11844: FOR_IN
11845: IFFALSE 11870
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11847: LD_ADDR_VAR 0 17
11851: PUSH
11852: LD_VAR 0 17
11856: PUSH
11857: LD_VAR 0 8
11861: PPUSH
11862: CALL_OW 478
11866: UNION
11867: ST_TO_ADDR
11868: GO 11844
11870: POP
11871: POP
// if not fac_list then
11872: LD_VAR 0 17
11876: NOT
11877: IFFALSE 11881
// exit ;
11879: GO 12800
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11881: LD_ADDR_VAR 0 5
11885: PUSH
11886: LD_INT 4
11888: PUSH
11889: LD_INT 5
11891: PUSH
11892: LD_INT 9
11894: PUSH
11895: LD_INT 10
11897: PUSH
11898: LD_INT 6
11900: PUSH
11901: LD_INT 7
11903: PUSH
11904: LD_INT 11
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 27
11918: PUSH
11919: LD_INT 28
11921: PUSH
11922: LD_INT 26
11924: PUSH
11925: LD_INT 30
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 43
11936: PUSH
11937: LD_INT 44
11939: PUSH
11940: LD_INT 46
11942: PUSH
11943: LD_INT 45
11945: PUSH
11946: LD_INT 47
11948: PUSH
11949: LD_INT 49
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: LIST
11964: PUSH
11965: LD_VAR 0 12
11969: ARRAY
11970: ST_TO_ADDR
// list := list isect fac_list ;
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 5
11980: PUSH
11981: LD_VAR 0 17
11985: ISECT
11986: ST_TO_ADDR
// if not list then
11987: LD_VAR 0 5
11991: NOT
11992: IFFALSE 11996
// exit ;
11994: GO 12800
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11996: LD_VAR 0 12
12000: PUSH
12001: LD_INT 3
12003: EQUAL
12004: PUSH
12005: LD_INT 49
12007: PUSH
12008: LD_VAR 0 5
12012: IN
12013: AND
12014: PUSH
12015: LD_INT 31
12017: PPUSH
12018: LD_VAR 0 16
12022: PPUSH
12023: CALL_OW 321
12027: PUSH
12028: LD_INT 2
12030: EQUAL
12031: AND
12032: IFFALSE 12092
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12034: LD_INT 22
12036: PUSH
12037: LD_VAR 0 16
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 35
12048: PUSH
12049: LD_INT 49
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 91
12058: PUSH
12059: LD_VAR 0 1
12063: PUSH
12064: LD_INT 10
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 69
12081: NOT
12082: IFFALSE 12092
// weapon := ru_time_lapser ;
12084: LD_ADDR_VAR 0 18
12088: PUSH
12089: LD_INT 49
12091: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12092: LD_VAR 0 12
12096: PUSH
12097: LD_INT 1
12099: PUSH
12100: LD_INT 2
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: IN
12107: PUSH
12108: LD_INT 11
12110: PUSH
12111: LD_VAR 0 5
12115: IN
12116: PUSH
12117: LD_INT 30
12119: PUSH
12120: LD_VAR 0 5
12124: IN
12125: OR
12126: AND
12127: PUSH
12128: LD_INT 6
12130: PPUSH
12131: LD_VAR 0 16
12135: PPUSH
12136: CALL_OW 321
12140: PUSH
12141: LD_INT 2
12143: EQUAL
12144: AND
12145: IFFALSE 12310
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12147: LD_INT 22
12149: PUSH
12150: LD_VAR 0 16
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 2
12161: PUSH
12162: LD_INT 35
12164: PUSH
12165: LD_INT 11
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 35
12174: PUSH
12175: LD_INT 30
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 91
12189: PUSH
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 18
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 69
12212: NOT
12213: PUSH
12214: LD_INT 22
12216: PUSH
12217: LD_VAR 0 16
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 2
12228: PUSH
12229: LD_INT 30
12231: PUSH
12232: LD_INT 32
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 30
12241: PUSH
12242: LD_INT 33
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 91
12256: PUSH
12257: LD_VAR 0 1
12261: PUSH
12262: LD_INT 12
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: PUSH
12283: LD_INT 2
12285: GREATER
12286: AND
12287: IFFALSE 12310
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12289: LD_ADDR_VAR 0 18
12293: PUSH
12294: LD_INT 11
12296: PUSH
12297: LD_INT 30
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_VAR 0 12
12308: ARRAY
12309: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12310: LD_VAR 0 18
12314: NOT
12315: PUSH
12316: LD_INT 40
12318: PPUSH
12319: LD_VAR 0 16
12323: PPUSH
12324: CALL_OW 321
12328: PUSH
12329: LD_INT 2
12331: EQUAL
12332: AND
12333: PUSH
12334: LD_INT 7
12336: PUSH
12337: LD_VAR 0 5
12341: IN
12342: PUSH
12343: LD_INT 28
12345: PUSH
12346: LD_VAR 0 5
12350: IN
12351: OR
12352: PUSH
12353: LD_INT 45
12355: PUSH
12356: LD_VAR 0 5
12360: IN
12361: OR
12362: AND
12363: IFFALSE 12617
// begin hex := GetHexInfo ( x , y ) ;
12365: LD_ADDR_VAR 0 4
12369: PUSH
12370: LD_VAR 0 10
12374: PPUSH
12375: LD_VAR 0 11
12379: PPUSH
12380: CALL_OW 546
12384: ST_TO_ADDR
// if hex [ 1 ] then
12385: LD_VAR 0 4
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: IFFALSE 12397
// exit ;
12395: GO 12800
// height := hex [ 2 ] ;
12397: LD_ADDR_VAR 0 15
12401: PUSH
12402: LD_VAR 0 4
12406: PUSH
12407: LD_INT 2
12409: ARRAY
12410: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12411: LD_ADDR_VAR 0 14
12415: PUSH
12416: LD_INT 0
12418: PUSH
12419: LD_INT 2
12421: PUSH
12422: LD_INT 3
12424: PUSH
12425: LD_INT 5
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: ST_TO_ADDR
// for i in tmp do
12434: LD_ADDR_VAR 0 8
12438: PUSH
12439: LD_VAR 0 14
12443: PUSH
12444: FOR_IN
12445: IFFALSE 12615
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12447: LD_ADDR_VAR 0 9
12451: PUSH
12452: LD_VAR 0 10
12456: PPUSH
12457: LD_VAR 0 8
12461: PPUSH
12462: LD_INT 5
12464: PPUSH
12465: CALL_OW 272
12469: PUSH
12470: LD_VAR 0 11
12474: PPUSH
12475: LD_VAR 0 8
12479: PPUSH
12480: LD_INT 5
12482: PPUSH
12483: CALL_OW 273
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12492: LD_VAR 0 9
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PPUSH
12501: LD_VAR 0 9
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: PPUSH
12510: CALL_OW 488
12514: IFFALSE 12613
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12516: LD_ADDR_VAR 0 4
12520: PUSH
12521: LD_VAR 0 9
12525: PUSH
12526: LD_INT 1
12528: ARRAY
12529: PPUSH
12530: LD_VAR 0 9
12534: PUSH
12535: LD_INT 2
12537: ARRAY
12538: PPUSH
12539: CALL_OW 546
12543: ST_TO_ADDR
// if hex [ 1 ] then
12544: LD_VAR 0 4
12548: PUSH
12549: LD_INT 1
12551: ARRAY
12552: IFFALSE 12556
// continue ;
12554: GO 12444
// h := hex [ 2 ] ;
12556: LD_ADDR_VAR 0 13
12560: PUSH
12561: LD_VAR 0 4
12565: PUSH
12566: LD_INT 2
12568: ARRAY
12569: ST_TO_ADDR
// if h + 7 < height then
12570: LD_VAR 0 13
12574: PUSH
12575: LD_INT 7
12577: PLUS
12578: PUSH
12579: LD_VAR 0 15
12583: LESS
12584: IFFALSE 12613
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12586: LD_ADDR_VAR 0 18
12590: PUSH
12591: LD_INT 7
12593: PUSH
12594: LD_INT 28
12596: PUSH
12597: LD_INT 45
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PUSH
12605: LD_VAR 0 12
12609: ARRAY
12610: ST_TO_ADDR
// break ;
12611: GO 12615
// end ; end ; end ;
12613: GO 12444
12615: POP
12616: POP
// end ; if not weapon then
12617: LD_VAR 0 18
12621: NOT
12622: IFFALSE 12682
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12624: LD_ADDR_VAR 0 5
12628: PUSH
12629: LD_VAR 0 5
12633: PUSH
12634: LD_INT 11
12636: PUSH
12637: LD_INT 30
12639: PUSH
12640: LD_INT 49
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: DIFF
12648: ST_TO_ADDR
// if not list then
12649: LD_VAR 0 5
12653: NOT
12654: IFFALSE 12658
// exit ;
12656: GO 12800
// weapon := list [ rand ( 1 , list ) ] ;
12658: LD_ADDR_VAR 0 18
12662: PUSH
12663: LD_VAR 0 5
12667: PUSH
12668: LD_INT 1
12670: PPUSH
12671: LD_VAR 0 5
12675: PPUSH
12676: CALL_OW 12
12680: ARRAY
12681: ST_TO_ADDR
// end ; if weapon then
12682: LD_VAR 0 18
12686: IFFALSE 12800
// begin tmp := CostOfWeapon ( weapon ) ;
12688: LD_ADDR_VAR 0 14
12692: PUSH
12693: LD_VAR 0 18
12697: PPUSH
12698: CALL_OW 451
12702: ST_TO_ADDR
// j := GetBase ( tower ) ;
12703: LD_ADDR_VAR 0 9
12707: PUSH
12708: LD_VAR 0 1
12712: PPUSH
12713: CALL_OW 274
12717: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12718: LD_VAR 0 9
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: CALL_OW 275
12730: PUSH
12731: LD_VAR 0 14
12735: PUSH
12736: LD_INT 1
12738: ARRAY
12739: GREATEREQUAL
12740: PUSH
12741: LD_VAR 0 9
12745: PPUSH
12746: LD_INT 2
12748: PPUSH
12749: CALL_OW 275
12753: PUSH
12754: LD_VAR 0 14
12758: PUSH
12759: LD_INT 2
12761: ARRAY
12762: GREATEREQUAL
12763: AND
12764: PUSH
12765: LD_VAR 0 9
12769: PPUSH
12770: LD_INT 3
12772: PPUSH
12773: CALL_OW 275
12777: PUSH
12778: LD_VAR 0 14
12782: PUSH
12783: LD_INT 3
12785: ARRAY
12786: GREATEREQUAL
12787: AND
12788: IFFALSE 12800
// result := weapon ;
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_VAR 0 18
12799: ST_TO_ADDR
// end ; end ;
12800: LD_VAR 0 3
12804: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12805: LD_INT 0
12807: PPUSH
12808: PPUSH
// result := true ;
12809: LD_ADDR_VAR 0 3
12813: PUSH
12814: LD_INT 1
12816: ST_TO_ADDR
// if array1 = array2 then
12817: LD_VAR 0 1
12821: PUSH
12822: LD_VAR 0 2
12826: EQUAL
12827: IFFALSE 12887
// begin for i = 1 to array1 do
12829: LD_ADDR_VAR 0 4
12833: PUSH
12834: DOUBLE
12835: LD_INT 1
12837: DEC
12838: ST_TO_ADDR
12839: LD_VAR 0 1
12843: PUSH
12844: FOR_TO
12845: IFFALSE 12883
// if array1 [ i ] <> array2 [ i ] then
12847: LD_VAR 0 1
12851: PUSH
12852: LD_VAR 0 4
12856: ARRAY
12857: PUSH
12858: LD_VAR 0 2
12862: PUSH
12863: LD_VAR 0 4
12867: ARRAY
12868: NONEQUAL
12869: IFFALSE 12881
// begin result := false ;
12871: LD_ADDR_VAR 0 3
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// break ;
12879: GO 12883
// end ;
12881: GO 12844
12883: POP
12884: POP
// end else
12885: GO 12895
// result := false ;
12887: LD_ADDR_VAR 0 3
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// end ;
12895: LD_VAR 0 3
12899: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12900: LD_INT 0
12902: PPUSH
12903: PPUSH
// if not array1 or not array2 then
12904: LD_VAR 0 1
12908: NOT
12909: PUSH
12910: LD_VAR 0 2
12914: NOT
12915: OR
12916: IFFALSE 12920
// exit ;
12918: GO 12984
// result := true ;
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: LD_INT 1
12927: ST_TO_ADDR
// for i = 1 to array1 do
12928: LD_ADDR_VAR 0 4
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: LD_VAR 0 1
12942: PUSH
12943: FOR_TO
12944: IFFALSE 12982
// if array1 [ i ] <> array2 [ i ] then
12946: LD_VAR 0 1
12950: PUSH
12951: LD_VAR 0 4
12955: ARRAY
12956: PUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_VAR 0 4
12966: ARRAY
12967: NONEQUAL
12968: IFFALSE 12980
// begin result := false ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// break ;
12978: GO 12982
// end ;
12980: GO 12943
12982: POP
12983: POP
// end ;
12984: LD_VAR 0 3
12988: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12989: LD_INT 0
12991: PPUSH
12992: PPUSH
12993: PPUSH
// pom := GetBase ( fac ) ;
12994: LD_ADDR_VAR 0 5
12998: PUSH
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 274
13008: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13009: LD_ADDR_VAR 0 4
13013: PUSH
13014: LD_VAR 0 2
13018: PUSH
13019: LD_INT 1
13021: ARRAY
13022: PPUSH
13023: LD_VAR 0 2
13027: PUSH
13028: LD_INT 2
13030: ARRAY
13031: PPUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_INT 3
13039: ARRAY
13040: PPUSH
13041: LD_VAR 0 2
13045: PUSH
13046: LD_INT 4
13048: ARRAY
13049: PPUSH
13050: CALL_OW 449
13054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13055: LD_ADDR_VAR 0 3
13059: PUSH
13060: LD_VAR 0 5
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 275
13072: PUSH
13073: LD_VAR 0 4
13077: PUSH
13078: LD_INT 1
13080: ARRAY
13081: GREATEREQUAL
13082: PUSH
13083: LD_VAR 0 5
13087: PPUSH
13088: LD_INT 2
13090: PPUSH
13091: CALL_OW 275
13095: PUSH
13096: LD_VAR 0 4
13100: PUSH
13101: LD_INT 2
13103: ARRAY
13104: GREATEREQUAL
13105: AND
13106: PUSH
13107: LD_VAR 0 5
13111: PPUSH
13112: LD_INT 3
13114: PPUSH
13115: CALL_OW 275
13119: PUSH
13120: LD_VAR 0 4
13124: PUSH
13125: LD_INT 3
13127: ARRAY
13128: GREATEREQUAL
13129: AND
13130: ST_TO_ADDR
// end ;
13131: LD_VAR 0 3
13135: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13136: LD_INT 0
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
// pom := GetBase ( building ) ;
13142: LD_ADDR_VAR 0 3
13146: PUSH
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 274
13156: ST_TO_ADDR
// if not pom then
13157: LD_VAR 0 3
13161: NOT
13162: IFFALSE 13166
// exit ;
13164: GO 13336
// btype := GetBType ( building ) ;
13166: LD_ADDR_VAR 0 5
13170: PUSH
13171: LD_VAR 0 1
13175: PPUSH
13176: CALL_OW 266
13180: ST_TO_ADDR
// if btype = b_armoury then
13181: LD_VAR 0 5
13185: PUSH
13186: LD_INT 4
13188: EQUAL
13189: IFFALSE 13199
// btype := b_barracks ;
13191: LD_ADDR_VAR 0 5
13195: PUSH
13196: LD_INT 5
13198: ST_TO_ADDR
// if btype = b_depot then
13199: LD_VAR 0 5
13203: PUSH
13204: LD_INT 0
13206: EQUAL
13207: IFFALSE 13217
// btype := b_warehouse ;
13209: LD_ADDR_VAR 0 5
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// if btype = b_workshop then
13217: LD_VAR 0 5
13221: PUSH
13222: LD_INT 2
13224: EQUAL
13225: IFFALSE 13235
// btype := b_factory ;
13227: LD_ADDR_VAR 0 5
13231: PUSH
13232: LD_INT 3
13234: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13235: LD_ADDR_VAR 0 4
13239: PUSH
13240: LD_VAR 0 5
13244: PPUSH
13245: LD_VAR 0 1
13249: PPUSH
13250: CALL_OW 248
13254: PPUSH
13255: CALL_OW 450
13259: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13260: LD_ADDR_VAR 0 2
13264: PUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 275
13277: PUSH
13278: LD_VAR 0 4
13282: PUSH
13283: LD_INT 1
13285: ARRAY
13286: GREATEREQUAL
13287: PUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_INT 2
13295: PPUSH
13296: CALL_OW 275
13300: PUSH
13301: LD_VAR 0 4
13305: PUSH
13306: LD_INT 2
13308: ARRAY
13309: GREATEREQUAL
13310: AND
13311: PUSH
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_INT 3
13319: PPUSH
13320: CALL_OW 275
13324: PUSH
13325: LD_VAR 0 4
13329: PUSH
13330: LD_INT 3
13332: ARRAY
13333: GREATEREQUAL
13334: AND
13335: ST_TO_ADDR
// end ;
13336: LD_VAR 0 2
13340: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13341: LD_INT 0
13343: PPUSH
13344: PPUSH
13345: PPUSH
// pom := GetBase ( building ) ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_VAR 0 1
13355: PPUSH
13356: CALL_OW 274
13360: ST_TO_ADDR
// if not pom then
13361: LD_VAR 0 4
13365: NOT
13366: IFFALSE 13370
// exit ;
13368: GO 13471
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13370: LD_ADDR_VAR 0 5
13374: PUSH
13375: LD_VAR 0 2
13379: PPUSH
13380: LD_VAR 0 1
13384: PPUSH
13385: CALL_OW 248
13389: PPUSH
13390: CALL_OW 450
13394: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13395: LD_ADDR_VAR 0 3
13399: PUSH
13400: LD_VAR 0 4
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 275
13412: PUSH
13413: LD_VAR 0 5
13417: PUSH
13418: LD_INT 1
13420: ARRAY
13421: GREATEREQUAL
13422: PUSH
13423: LD_VAR 0 4
13427: PPUSH
13428: LD_INT 2
13430: PPUSH
13431: CALL_OW 275
13435: PUSH
13436: LD_VAR 0 5
13440: PUSH
13441: LD_INT 2
13443: ARRAY
13444: GREATEREQUAL
13445: AND
13446: PUSH
13447: LD_VAR 0 4
13451: PPUSH
13452: LD_INT 3
13454: PPUSH
13455: CALL_OW 275
13459: PUSH
13460: LD_VAR 0 5
13464: PUSH
13465: LD_INT 3
13467: ARRAY
13468: GREATEREQUAL
13469: AND
13470: ST_TO_ADDR
// end ;
13471: LD_VAR 0 3
13475: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13476: LD_INT 0
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
// result := false ;
13489: LD_ADDR_VAR 0 8
13493: PUSH
13494: LD_INT 0
13496: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13497: LD_VAR 0 5
13501: NOT
13502: PUSH
13503: LD_VAR 0 1
13507: NOT
13508: OR
13509: PUSH
13510: LD_VAR 0 2
13514: NOT
13515: OR
13516: PUSH
13517: LD_VAR 0 3
13521: NOT
13522: OR
13523: IFFALSE 13527
// exit ;
13525: GO 14341
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13527: LD_ADDR_VAR 0 14
13531: PUSH
13532: LD_VAR 0 1
13536: PPUSH
13537: LD_VAR 0 2
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: LD_VAR 0 4
13551: PPUSH
13552: LD_VAR 0 5
13556: PUSH
13557: LD_INT 1
13559: ARRAY
13560: PPUSH
13561: CALL_OW 248
13565: PPUSH
13566: LD_INT 0
13568: PPUSH
13569: CALL 15594 0 6
13573: ST_TO_ADDR
// if not hexes then
13574: LD_VAR 0 14
13578: NOT
13579: IFFALSE 13583
// exit ;
13581: GO 14341
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13583: LD_ADDR_VAR 0 17
13587: PUSH
13588: LD_VAR 0 5
13592: PPUSH
13593: LD_INT 22
13595: PUSH
13596: LD_VAR 0 13
13600: PPUSH
13601: CALL_OW 255
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 2
13612: PUSH
13613: LD_INT 30
13615: PUSH
13616: LD_INT 0
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 1
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PPUSH
13642: CALL_OW 72
13646: ST_TO_ADDR
// for i = 1 to hexes do
13647: LD_ADDR_VAR 0 9
13651: PUSH
13652: DOUBLE
13653: LD_INT 1
13655: DEC
13656: ST_TO_ADDR
13657: LD_VAR 0 14
13661: PUSH
13662: FOR_TO
13663: IFFALSE 14339
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13665: LD_ADDR_VAR 0 13
13669: PUSH
13670: LD_VAR 0 14
13674: PUSH
13675: LD_VAR 0 9
13679: ARRAY
13680: PUSH
13681: LD_INT 1
13683: ARRAY
13684: PPUSH
13685: LD_VAR 0 14
13689: PUSH
13690: LD_VAR 0 9
13694: ARRAY
13695: PUSH
13696: LD_INT 2
13698: ARRAY
13699: PPUSH
13700: CALL_OW 428
13704: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13705: LD_VAR 0 14
13709: PUSH
13710: LD_VAR 0 9
13714: ARRAY
13715: PUSH
13716: LD_INT 1
13718: ARRAY
13719: PPUSH
13720: LD_VAR 0 14
13724: PUSH
13725: LD_VAR 0 9
13729: ARRAY
13730: PUSH
13731: LD_INT 2
13733: ARRAY
13734: PPUSH
13735: CALL_OW 351
13739: PUSH
13740: LD_VAR 0 14
13744: PUSH
13745: LD_VAR 0 9
13749: ARRAY
13750: PUSH
13751: LD_INT 1
13753: ARRAY
13754: PPUSH
13755: LD_VAR 0 14
13759: PUSH
13760: LD_VAR 0 9
13764: ARRAY
13765: PUSH
13766: LD_INT 2
13768: ARRAY
13769: PPUSH
13770: CALL_OW 488
13774: NOT
13775: OR
13776: PUSH
13777: LD_VAR 0 13
13781: PPUSH
13782: CALL_OW 247
13786: PUSH
13787: LD_INT 3
13789: EQUAL
13790: OR
13791: IFFALSE 13797
// exit ;
13793: POP
13794: POP
13795: GO 14341
// if not tmp then
13797: LD_VAR 0 13
13801: NOT
13802: IFFALSE 13806
// continue ;
13804: GO 13662
// result := true ;
13806: LD_ADDR_VAR 0 8
13810: PUSH
13811: LD_INT 1
13813: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13814: LD_VAR 0 6
13818: PUSH
13819: LD_VAR 0 13
13823: PPUSH
13824: CALL_OW 247
13828: PUSH
13829: LD_INT 2
13831: EQUAL
13832: AND
13833: PUSH
13834: LD_VAR 0 13
13838: PPUSH
13839: CALL_OW 263
13843: PUSH
13844: LD_INT 1
13846: EQUAL
13847: AND
13848: IFFALSE 14012
// begin if IsDrivenBy ( tmp ) then
13850: LD_VAR 0 13
13854: PPUSH
13855: CALL_OW 311
13859: IFFALSE 13863
// continue ;
13861: GO 13662
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13863: LD_VAR 0 6
13867: PPUSH
13868: LD_INT 3
13870: PUSH
13871: LD_INT 60
13873: PUSH
13874: EMPTY
13875: LIST
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 3
13883: PUSH
13884: LD_INT 55
13886: PUSH
13887: EMPTY
13888: LIST
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 72
13902: IFFALSE 14010
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13904: LD_ADDR_VAR 0 18
13908: PUSH
13909: LD_VAR 0 6
13913: PPUSH
13914: LD_INT 3
13916: PUSH
13917: LD_INT 60
13919: PUSH
13920: EMPTY
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 3
13929: PUSH
13930: LD_INT 55
13932: PUSH
13933: EMPTY
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 72
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: ST_TO_ADDR
// if IsInUnit ( driver ) then
13953: LD_VAR 0 18
13957: PPUSH
13958: CALL_OW 310
13962: IFFALSE 13973
// ComExit ( driver ) ;
13964: LD_VAR 0 18
13968: PPUSH
13969: CALL 39386 0 1
// AddComEnterUnit ( driver , tmp ) ;
13973: LD_VAR 0 18
13977: PPUSH
13978: LD_VAR 0 13
13982: PPUSH
13983: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13987: LD_VAR 0 18
13991: PPUSH
13992: LD_VAR 0 7
13996: PPUSH
13997: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14001: LD_VAR 0 18
14005: PPUSH
14006: CALL_OW 181
// end ; continue ;
14010: GO 13662
// end ; if not cleaners or not tmp in cleaners then
14012: LD_VAR 0 6
14016: NOT
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_VAR 0 6
14027: IN
14028: NOT
14029: OR
14030: IFFALSE 14337
// begin if dep then
14032: LD_VAR 0 17
14036: IFFALSE 14172
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14038: LD_ADDR_VAR 0 16
14042: PUSH
14043: LD_VAR 0 17
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: CALL_OW 250
14056: PPUSH
14057: LD_VAR 0 17
14061: PUSH
14062: LD_INT 1
14064: ARRAY
14065: PPUSH
14066: CALL_OW 254
14070: PPUSH
14071: LD_INT 5
14073: PPUSH
14074: CALL_OW 272
14078: PUSH
14079: LD_VAR 0 17
14083: PUSH
14084: LD_INT 1
14086: ARRAY
14087: PPUSH
14088: CALL_OW 251
14092: PPUSH
14093: LD_VAR 0 17
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PPUSH
14102: CALL_OW 254
14106: PPUSH
14107: LD_INT 5
14109: PPUSH
14110: CALL_OW 273
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14119: LD_VAR 0 16
14123: PUSH
14124: LD_INT 1
14126: ARRAY
14127: PPUSH
14128: LD_VAR 0 16
14132: PUSH
14133: LD_INT 2
14135: ARRAY
14136: PPUSH
14137: CALL_OW 488
14141: IFFALSE 14172
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14143: LD_VAR 0 13
14147: PPUSH
14148: LD_VAR 0 16
14152: PUSH
14153: LD_INT 1
14155: ARRAY
14156: PPUSH
14157: LD_VAR 0 16
14161: PUSH
14162: LD_INT 2
14164: ARRAY
14165: PPUSH
14166: CALL_OW 111
// continue ;
14170: GO 13662
// end ; end ; r := GetDir ( tmp ) ;
14172: LD_ADDR_VAR 0 15
14176: PUSH
14177: LD_VAR 0 13
14181: PPUSH
14182: CALL_OW 254
14186: ST_TO_ADDR
// if r = 5 then
14187: LD_VAR 0 15
14191: PUSH
14192: LD_INT 5
14194: EQUAL
14195: IFFALSE 14205
// r := 0 ;
14197: LD_ADDR_VAR 0 15
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// for j = r to 5 do
14205: LD_ADDR_VAR 0 10
14209: PUSH
14210: DOUBLE
14211: LD_VAR 0 15
14215: DEC
14216: ST_TO_ADDR
14217: LD_INT 5
14219: PUSH
14220: FOR_TO
14221: IFFALSE 14335
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14223: LD_ADDR_VAR 0 11
14227: PUSH
14228: LD_VAR 0 13
14232: PPUSH
14233: CALL_OW 250
14237: PPUSH
14238: LD_VAR 0 10
14242: PPUSH
14243: LD_INT 2
14245: PPUSH
14246: CALL_OW 272
14250: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14251: LD_ADDR_VAR 0 12
14255: PUSH
14256: LD_VAR 0 13
14260: PPUSH
14261: CALL_OW 251
14265: PPUSH
14266: LD_VAR 0 10
14270: PPUSH
14271: LD_INT 2
14273: PPUSH
14274: CALL_OW 273
14278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14279: LD_VAR 0 11
14283: PPUSH
14284: LD_VAR 0 12
14288: PPUSH
14289: CALL_OW 488
14293: PUSH
14294: LD_VAR 0 11
14298: PPUSH
14299: LD_VAR 0 12
14303: PPUSH
14304: CALL_OW 428
14308: NOT
14309: AND
14310: IFFALSE 14333
// begin ComMoveXY ( tmp , _x , _y ) ;
14312: LD_VAR 0 13
14316: PPUSH
14317: LD_VAR 0 11
14321: PPUSH
14322: LD_VAR 0 12
14326: PPUSH
14327: CALL_OW 111
// break ;
14331: GO 14335
// end ; end ;
14333: GO 14220
14335: POP
14336: POP
// end ; end ;
14337: GO 13662
14339: POP
14340: POP
// end ;
14341: LD_VAR 0 8
14345: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14346: LD_INT 0
14348: PPUSH
// result := true ;
14349: LD_ADDR_VAR 0 3
14353: PUSH
14354: LD_INT 1
14356: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14357: LD_VAR 0 2
14361: PUSH
14362: LD_INT 24
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14376
14368: LD_INT 33
14370: DOUBLE
14371: EQUAL
14372: IFTRUE 14376
14374: GO 14401
14376: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14377: LD_ADDR_VAR 0 3
14381: PUSH
14382: LD_INT 32
14384: PPUSH
14385: LD_VAR 0 1
14389: PPUSH
14390: CALL_OW 321
14394: PUSH
14395: LD_INT 2
14397: EQUAL
14398: ST_TO_ADDR
14399: GO 14717
14401: LD_INT 20
14403: DOUBLE
14404: EQUAL
14405: IFTRUE 14409
14407: GO 14434
14409: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14410: LD_ADDR_VAR 0 3
14414: PUSH
14415: LD_INT 6
14417: PPUSH
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 321
14427: PUSH
14428: LD_INT 2
14430: EQUAL
14431: ST_TO_ADDR
14432: GO 14717
14434: LD_INT 22
14436: DOUBLE
14437: EQUAL
14438: IFTRUE 14448
14440: LD_INT 36
14442: DOUBLE
14443: EQUAL
14444: IFTRUE 14448
14446: GO 14473
14448: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_INT 15
14456: PPUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 321
14466: PUSH
14467: LD_INT 2
14469: EQUAL
14470: ST_TO_ADDR
14471: GO 14717
14473: LD_INT 30
14475: DOUBLE
14476: EQUAL
14477: IFTRUE 14481
14479: GO 14506
14481: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14482: LD_ADDR_VAR 0 3
14486: PUSH
14487: LD_INT 20
14489: PPUSH
14490: LD_VAR 0 1
14494: PPUSH
14495: CALL_OW 321
14499: PUSH
14500: LD_INT 2
14502: EQUAL
14503: ST_TO_ADDR
14504: GO 14717
14506: LD_INT 28
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14520
14512: LD_INT 21
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 14545
14520: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14521: LD_ADDR_VAR 0 3
14525: PUSH
14526: LD_INT 21
14528: PPUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 321
14538: PUSH
14539: LD_INT 2
14541: EQUAL
14542: ST_TO_ADDR
14543: GO 14717
14545: LD_INT 16
14547: DOUBLE
14548: EQUAL
14549: IFTRUE 14553
14551: GO 14578
14553: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14554: LD_ADDR_VAR 0 3
14558: PUSH
14559: LD_INT 84
14561: PPUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 321
14571: PUSH
14572: LD_INT 2
14574: EQUAL
14575: ST_TO_ADDR
14576: GO 14717
14578: LD_INT 19
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14592
14584: LD_INT 23
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14617
14592: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14593: LD_ADDR_VAR 0 3
14597: PUSH
14598: LD_INT 83
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 321
14610: PUSH
14611: LD_INT 2
14613: EQUAL
14614: ST_TO_ADDR
14615: GO 14717
14617: LD_INT 17
14619: DOUBLE
14620: EQUAL
14621: IFTRUE 14625
14623: GO 14650
14625: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_INT 39
14633: PPUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 321
14643: PUSH
14644: LD_INT 2
14646: EQUAL
14647: ST_TO_ADDR
14648: GO 14717
14650: LD_INT 18
14652: DOUBLE
14653: EQUAL
14654: IFTRUE 14658
14656: GO 14683
14658: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14659: LD_ADDR_VAR 0 3
14663: PUSH
14664: LD_INT 40
14666: PPUSH
14667: LD_VAR 0 1
14671: PPUSH
14672: CALL_OW 321
14676: PUSH
14677: LD_INT 2
14679: EQUAL
14680: ST_TO_ADDR
14681: GO 14717
14683: LD_INT 27
14685: DOUBLE
14686: EQUAL
14687: IFTRUE 14691
14689: GO 14716
14691: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14692: LD_ADDR_VAR 0 3
14696: PUSH
14697: LD_INT 35
14699: PPUSH
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 321
14709: PUSH
14710: LD_INT 2
14712: EQUAL
14713: ST_TO_ADDR
14714: GO 14717
14716: POP
// end ;
14717: LD_VAR 0 3
14721: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14722: LD_INT 0
14724: PPUSH
14725: PPUSH
14726: PPUSH
14727: PPUSH
14728: PPUSH
14729: PPUSH
14730: PPUSH
14731: PPUSH
14732: PPUSH
14733: PPUSH
14734: PPUSH
// result := false ;
14735: LD_ADDR_VAR 0 6
14739: PUSH
14740: LD_INT 0
14742: ST_TO_ADDR
// if btype = b_depot then
14743: LD_VAR 0 2
14747: PUSH
14748: LD_INT 0
14750: EQUAL
14751: IFFALSE 14763
// begin result := true ;
14753: LD_ADDR_VAR 0 6
14757: PUSH
14758: LD_INT 1
14760: ST_TO_ADDR
// exit ;
14761: GO 15589
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14763: LD_VAR 0 1
14767: NOT
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 266
14778: PUSH
14779: LD_INT 0
14781: PUSH
14782: LD_INT 1
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: IN
14789: NOT
14790: OR
14791: PUSH
14792: LD_VAR 0 2
14796: NOT
14797: OR
14798: PUSH
14799: LD_VAR 0 5
14803: PUSH
14804: LD_INT 0
14806: PUSH
14807: LD_INT 1
14809: PUSH
14810: LD_INT 2
14812: PUSH
14813: LD_INT 3
14815: PUSH
14816: LD_INT 4
14818: PUSH
14819: LD_INT 5
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: IN
14830: NOT
14831: OR
14832: PUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: LD_VAR 0 4
14842: PPUSH
14843: CALL_OW 488
14847: NOT
14848: OR
14849: IFFALSE 14853
// exit ;
14851: GO 15589
// side := GetSide ( depot ) ;
14853: LD_ADDR_VAR 0 9
14857: PUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 255
14867: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14868: LD_VAR 0 9
14872: PPUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: CALL 14346 0 2
14882: NOT
14883: IFFALSE 14887
// exit ;
14885: GO 15589
// pom := GetBase ( depot ) ;
14887: LD_ADDR_VAR 0 10
14891: PUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 274
14901: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14902: LD_ADDR_VAR 0 11
14906: PUSH
14907: LD_VAR 0 2
14911: PPUSH
14912: LD_VAR 0 1
14916: PPUSH
14917: CALL_OW 248
14921: PPUSH
14922: CALL_OW 450
14926: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14927: LD_VAR 0 10
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 275
14939: PUSH
14940: LD_VAR 0 11
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: GREATEREQUAL
14949: PUSH
14950: LD_VAR 0 10
14954: PPUSH
14955: LD_INT 2
14957: PPUSH
14958: CALL_OW 275
14962: PUSH
14963: LD_VAR 0 11
14967: PUSH
14968: LD_INT 2
14970: ARRAY
14971: GREATEREQUAL
14972: AND
14973: PUSH
14974: LD_VAR 0 10
14978: PPUSH
14979: LD_INT 3
14981: PPUSH
14982: CALL_OW 275
14986: PUSH
14987: LD_VAR 0 11
14991: PUSH
14992: LD_INT 3
14994: ARRAY
14995: GREATEREQUAL
14996: AND
14997: NOT
14998: IFFALSE 15002
// exit ;
15000: GO 15589
// if GetBType ( depot ) = b_depot then
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 266
15011: PUSH
15012: LD_INT 0
15014: EQUAL
15015: IFFALSE 15027
// dist := 28 else
15017: LD_ADDR_VAR 0 14
15021: PUSH
15022: LD_INT 28
15024: ST_TO_ADDR
15025: GO 15035
// dist := 36 ;
15027: LD_ADDR_VAR 0 14
15031: PUSH
15032: LD_INT 36
15034: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_VAR 0 3
15044: PPUSH
15045: LD_VAR 0 4
15049: PPUSH
15050: CALL_OW 297
15054: PUSH
15055: LD_VAR 0 14
15059: GREATER
15060: IFFALSE 15064
// exit ;
15062: GO 15589
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15064: LD_ADDR_VAR 0 12
15068: PUSH
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_VAR 0 3
15078: PPUSH
15079: LD_VAR 0 4
15083: PPUSH
15084: LD_VAR 0 5
15088: PPUSH
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 248
15098: PPUSH
15099: LD_INT 0
15101: PPUSH
15102: CALL 15594 0 6
15106: ST_TO_ADDR
// if not hexes then
15107: LD_VAR 0 12
15111: NOT
15112: IFFALSE 15116
// exit ;
15114: GO 15589
// hex := GetHexInfo ( x , y ) ;
15116: LD_ADDR_VAR 0 15
15120: PUSH
15121: LD_VAR 0 3
15125: PPUSH
15126: LD_VAR 0 4
15130: PPUSH
15131: CALL_OW 546
15135: ST_TO_ADDR
// if hex [ 1 ] then
15136: LD_VAR 0 15
15140: PUSH
15141: LD_INT 1
15143: ARRAY
15144: IFFALSE 15148
// exit ;
15146: GO 15589
// height := hex [ 2 ] ;
15148: LD_ADDR_VAR 0 13
15152: PUSH
15153: LD_VAR 0 15
15157: PUSH
15158: LD_INT 2
15160: ARRAY
15161: ST_TO_ADDR
// for i = 1 to hexes do
15162: LD_ADDR_VAR 0 7
15166: PUSH
15167: DOUBLE
15168: LD_INT 1
15170: DEC
15171: ST_TO_ADDR
15172: LD_VAR 0 12
15176: PUSH
15177: FOR_TO
15178: IFFALSE 15508
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15180: LD_VAR 0 12
15184: PUSH
15185: LD_VAR 0 7
15189: ARRAY
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: PPUSH
15195: LD_VAR 0 12
15199: PUSH
15200: LD_VAR 0 7
15204: ARRAY
15205: PUSH
15206: LD_INT 2
15208: ARRAY
15209: PPUSH
15210: CALL_OW 488
15214: NOT
15215: PUSH
15216: LD_VAR 0 12
15220: PUSH
15221: LD_VAR 0 7
15225: ARRAY
15226: PUSH
15227: LD_INT 1
15229: ARRAY
15230: PPUSH
15231: LD_VAR 0 12
15235: PUSH
15236: LD_VAR 0 7
15240: ARRAY
15241: PUSH
15242: LD_INT 2
15244: ARRAY
15245: PPUSH
15246: CALL_OW 428
15250: PUSH
15251: LD_INT 0
15253: GREATER
15254: OR
15255: PUSH
15256: LD_VAR 0 12
15260: PUSH
15261: LD_VAR 0 7
15265: ARRAY
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: LD_VAR 0 12
15275: PUSH
15276: LD_VAR 0 7
15280: ARRAY
15281: PUSH
15282: LD_INT 2
15284: ARRAY
15285: PPUSH
15286: CALL_OW 351
15290: OR
15291: IFFALSE 15297
// exit ;
15293: POP
15294: POP
15295: GO 15589
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15297: LD_ADDR_VAR 0 8
15301: PUSH
15302: LD_VAR 0 12
15306: PUSH
15307: LD_VAR 0 7
15311: ARRAY
15312: PUSH
15313: LD_INT 1
15315: ARRAY
15316: PPUSH
15317: LD_VAR 0 12
15321: PUSH
15322: LD_VAR 0 7
15326: ARRAY
15327: PUSH
15328: LD_INT 2
15330: ARRAY
15331: PPUSH
15332: CALL_OW 546
15336: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15337: LD_VAR 0 8
15341: PUSH
15342: LD_INT 1
15344: ARRAY
15345: PUSH
15346: LD_VAR 0 8
15350: PUSH
15351: LD_INT 2
15353: ARRAY
15354: PUSH
15355: LD_VAR 0 13
15359: PUSH
15360: LD_INT 2
15362: PLUS
15363: GREATER
15364: OR
15365: PUSH
15366: LD_VAR 0 8
15370: PUSH
15371: LD_INT 2
15373: ARRAY
15374: PUSH
15375: LD_VAR 0 13
15379: PUSH
15380: LD_INT 2
15382: MINUS
15383: LESS
15384: OR
15385: PUSH
15386: LD_VAR 0 8
15390: PUSH
15391: LD_INT 3
15393: ARRAY
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: LD_INT 8
15400: PUSH
15401: LD_INT 9
15403: PUSH
15404: LD_INT 10
15406: PUSH
15407: LD_INT 11
15409: PUSH
15410: LD_INT 12
15412: PUSH
15413: LD_INT 13
15415: PUSH
15416: LD_INT 16
15418: PUSH
15419: LD_INT 17
15421: PUSH
15422: LD_INT 18
15424: PUSH
15425: LD_INT 19
15427: PUSH
15428: LD_INT 20
15430: PUSH
15431: LD_INT 21
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: IN
15449: NOT
15450: OR
15451: PUSH
15452: LD_VAR 0 8
15456: PUSH
15457: LD_INT 5
15459: ARRAY
15460: NOT
15461: OR
15462: PUSH
15463: LD_VAR 0 8
15467: PUSH
15468: LD_INT 6
15470: ARRAY
15471: PUSH
15472: LD_INT 1
15474: PUSH
15475: LD_INT 2
15477: PUSH
15478: LD_INT 7
15480: PUSH
15481: LD_INT 9
15483: PUSH
15484: LD_INT 10
15486: PUSH
15487: LD_INT 11
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: IN
15498: NOT
15499: OR
15500: IFFALSE 15506
// exit ;
15502: POP
15503: POP
15504: GO 15589
// end ;
15506: GO 15177
15508: POP
15509: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15510: LD_VAR 0 9
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_VAR 0 4
15524: PPUSH
15525: LD_INT 20
15527: PPUSH
15528: CALL 7512 0 4
15532: PUSH
15533: LD_INT 4
15535: ARRAY
15536: IFFALSE 15540
// exit ;
15538: GO 15589
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15540: LD_VAR 0 2
15544: PUSH
15545: LD_INT 29
15547: PUSH
15548: LD_INT 30
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: IN
15555: PUSH
15556: LD_VAR 0 3
15560: PPUSH
15561: LD_VAR 0 4
15565: PPUSH
15566: LD_VAR 0 9
15570: PPUSH
15571: CALL_OW 440
15575: NOT
15576: AND
15577: IFFALSE 15581
// exit ;
15579: GO 15589
// result := true ;
15581: LD_ADDR_VAR 0 6
15585: PUSH
15586: LD_INT 1
15588: ST_TO_ADDR
// end ;
15589: LD_VAR 0 6
15593: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15594: LD_INT 0
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
15632: PPUSH
15633: PPUSH
15634: PPUSH
15635: PPUSH
15636: PPUSH
15637: PPUSH
15638: PPUSH
15639: PPUSH
15640: PPUSH
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
// result = [ ] ;
15654: LD_ADDR_VAR 0 7
15658: PUSH
15659: EMPTY
15660: ST_TO_ADDR
// temp_list = [ ] ;
15661: LD_ADDR_VAR 0 9
15665: PUSH
15666: EMPTY
15667: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15668: LD_VAR 0 4
15672: PUSH
15673: LD_INT 0
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: LD_INT 4
15687: PUSH
15688: LD_INT 5
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: IN
15699: NOT
15700: PUSH
15701: LD_VAR 0 1
15705: PUSH
15706: LD_INT 0
15708: PUSH
15709: LD_INT 1
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: IN
15716: PUSH
15717: LD_VAR 0 5
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: LIST
15735: IN
15736: NOT
15737: AND
15738: OR
15739: IFFALSE 15743
// exit ;
15741: GO 34134
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15743: LD_VAR 0 1
15747: PUSH
15748: LD_INT 6
15750: PUSH
15751: LD_INT 7
15753: PUSH
15754: LD_INT 8
15756: PUSH
15757: LD_INT 13
15759: PUSH
15760: LD_INT 12
15762: PUSH
15763: LD_INT 15
15765: PUSH
15766: LD_INT 11
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: LD_INT 10
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: IN
15786: IFFALSE 15796
// btype = b_lab ;
15788: LD_ADDR_VAR 0 1
15792: PUSH
15793: LD_INT 6
15795: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15796: LD_VAR 0 6
15800: PUSH
15801: LD_INT 0
15803: PUSH
15804: LD_INT 1
15806: PUSH
15807: LD_INT 2
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: IN
15815: NOT
15816: PUSH
15817: LD_VAR 0 1
15821: PUSH
15822: LD_INT 0
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 3
15833: PUSH
15834: LD_INT 6
15836: PUSH
15837: LD_INT 36
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: LD_INT 5
15845: PUSH
15846: LD_INT 31
15848: PUSH
15849: LD_INT 32
15851: PUSH
15852: LD_INT 33
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: IN
15868: NOT
15869: PUSH
15870: LD_VAR 0 6
15874: PUSH
15875: LD_INT 1
15877: EQUAL
15878: AND
15879: OR
15880: PUSH
15881: LD_VAR 0 1
15885: PUSH
15886: LD_INT 2
15888: PUSH
15889: LD_INT 3
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: IN
15896: NOT
15897: PUSH
15898: LD_VAR 0 6
15902: PUSH
15903: LD_INT 2
15905: EQUAL
15906: AND
15907: OR
15908: IFFALSE 15918
// mode = 0 ;
15910: LD_ADDR_VAR 0 6
15914: PUSH
15915: LD_INT 0
15917: ST_TO_ADDR
// case mode of 0 :
15918: LD_VAR 0 6
15922: PUSH
15923: LD_INT 0
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 27384
15931: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15932: LD_ADDR_VAR 0 11
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 0
15949: PUSH
15950: LD_INT 1
15952: NEG
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: LD_INT 1
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 0
15980: PUSH
15981: LD_INT 1
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 1
15990: NEG
15991: PUSH
15992: LD_INT 0
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 1
16001: NEG
16002: PUSH
16003: LD_INT 1
16005: NEG
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 1
16013: NEG
16014: PUSH
16015: LD_INT 2
16017: NEG
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 0
16025: PUSH
16026: LD_INT 2
16028: NEG
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: LD_INT 1
16039: NEG
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 0
16057: PUSH
16058: LD_INT 2
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 1
16067: NEG
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: LD_INT 3
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 0
16088: PUSH
16089: LD_INT 3
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 1
16098: NEG
16099: PUSH
16100: LD_INT 2
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16125: LD_ADDR_VAR 0 12
16129: PUSH
16130: LD_INT 0
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 0
16142: PUSH
16143: LD_INT 1
16145: NEG
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 1
16183: NEG
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 1
16194: NEG
16195: PUSH
16196: LD_INT 1
16198: NEG
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: LD_INT 1
16209: NEG
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 1
16237: NEG
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 2
16248: NEG
16249: PUSH
16250: LD_INT 0
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 2
16259: NEG
16260: PUSH
16261: LD_INT 1
16263: NEG
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 2
16271: NEG
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 3
16282: NEG
16283: PUSH
16284: LD_INT 0
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 3
16293: NEG
16294: PUSH
16295: LD_INT 1
16297: NEG
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16321: LD_ADDR_VAR 0 13
16325: PUSH
16326: LD_INT 0
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 0
16338: PUSH
16339: LD_INT 1
16341: NEG
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 1
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: NEG
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 1
16390: NEG
16391: PUSH
16392: LD_INT 1
16394: NEG
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 1
16402: NEG
16403: PUSH
16404: LD_INT 2
16406: NEG
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: LD_INT 2
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: LD_INT 2
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 2
16444: NEG
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 2
16456: NEG
16457: PUSH
16458: LD_INT 2
16460: NEG
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 2
16468: NEG
16469: PUSH
16470: LD_INT 3
16472: NEG
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 3
16480: NEG
16481: PUSH
16482: LD_INT 2
16484: NEG
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 3
16492: NEG
16493: PUSH
16494: LD_INT 3
16496: NEG
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16520: LD_ADDR_VAR 0 14
16524: PUSH
16525: LD_INT 0
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 0
16537: PUSH
16538: LD_INT 1
16540: NEG
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: LD_INT 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 1
16578: NEG
16579: PUSH
16580: LD_INT 0
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: LD_INT 1
16593: NEG
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 1
16601: NEG
16602: PUSH
16603: LD_INT 2
16605: NEG
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 0
16613: PUSH
16614: LD_INT 2
16616: NEG
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: LD_INT 1
16627: NEG
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 1
16635: PUSH
16636: LD_INT 2
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 0
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 1
16655: NEG
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 1
16666: NEG
16667: PUSH
16668: LD_INT 3
16670: NEG
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 0
16678: PUSH
16679: LD_INT 3
16681: NEG
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: LD_INT 2
16692: NEG
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16716: LD_ADDR_VAR 0 15
16720: PUSH
16721: LD_INT 0
16723: PUSH
16724: LD_INT 0
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 0
16733: PUSH
16734: LD_INT 1
16736: NEG
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: LD_INT 0
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 0
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 1
16774: NEG
16775: PUSH
16776: LD_INT 0
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: NEG
16786: PUSH
16787: LD_INT 1
16789: NEG
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: LD_INT 1
16800: NEG
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 2
16808: PUSH
16809: LD_INT 0
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 2
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 2
16839: NEG
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 2
16850: NEG
16851: PUSH
16852: LD_INT 1
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: LD_INT 1
16865: NEG
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16909: LD_ADDR_VAR 0 16
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 0
16926: PUSH
16927: LD_INT 1
16929: NEG
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: LD_INT 0
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: LD_INT 1
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 0
16957: PUSH
16958: LD_INT 1
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 1
16967: NEG
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: LD_INT 1
16982: NEG
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 1
16990: NEG
16991: PUSH
16992: LD_INT 2
16994: NEG
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: LD_INT 2
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 1
17022: PUSH
17023: LD_INT 2
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 2
17032: NEG
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 2
17044: NEG
17045: PUSH
17046: LD_INT 2
17048: NEG
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 3
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 2
17076: PUSH
17077: LD_INT 3
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17102: LD_ADDR_VAR 0 17
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: LD_INT 0
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: LD_INT 1
17122: NEG
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 0
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 0
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 1
17160: NEG
17161: PUSH
17162: LD_INT 0
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 1
17171: NEG
17172: PUSH
17173: LD_INT 1
17175: NEG
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 1
17183: NEG
17184: PUSH
17185: LD_INT 2
17187: NEG
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 0
17195: PUSH
17196: LD_INT 2
17198: NEG
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: LD_INT 1
17209: NEG
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 2
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: LD_INT 1
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: NEG
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: NEG
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 2
17301: NEG
17302: PUSH
17303: LD_INT 2
17305: NEG
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17332: LD_ADDR_VAR 0 18
17336: PUSH
17337: LD_INT 0
17339: PUSH
17340: LD_INT 0
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: LD_INT 1
17352: NEG
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: LD_INT 0
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 1
17390: NEG
17391: PUSH
17392: LD_INT 0
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 1
17401: NEG
17402: PUSH
17403: LD_INT 1
17405: NEG
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 1
17413: NEG
17414: PUSH
17415: LD_INT 2
17417: NEG
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 0
17425: PUSH
17426: LD_INT 2
17428: NEG
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 1
17436: PUSH
17437: LD_INT 1
17439: NEG
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 2
17447: PUSH
17448: LD_INT 0
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 2
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 0
17487: PUSH
17488: LD_INT 2
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 2
17508: NEG
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 2
17519: NEG
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 2
17531: NEG
17532: PUSH
17533: LD_INT 2
17535: NEG
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17562: LD_ADDR_VAR 0 19
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: LD_INT 0
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 1
17631: NEG
17632: PUSH
17633: LD_INT 1
17635: NEG
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 1
17643: NEG
17644: PUSH
17645: LD_INT 2
17647: NEG
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: LD_INT 2
17658: NEG
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 0
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 2
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: LD_INT 2
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 0
17717: PUSH
17718: LD_INT 2
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 2
17738: NEG
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: NEG
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 2
17761: NEG
17762: PUSH
17763: LD_INT 2
17765: NEG
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17792: LD_ADDR_VAR 0 20
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: LD_INT 1
17812: NEG
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 0
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 1
17850: NEG
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 1
17861: NEG
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: LD_INT 2
17877: NEG
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: LD_INT 1
17899: NEG
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 2
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 1
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: LD_INT 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 2
17968: NEG
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 2
17979: NEG
17980: PUSH
17981: LD_INT 1
17983: NEG
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: NEG
17992: PUSH
17993: LD_INT 2
17995: NEG
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18022: LD_ADDR_VAR 0 21
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: LD_INT 1
18042: NEG
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 1
18050: PUSH
18051: LD_INT 0
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: NEG
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 1
18091: NEG
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 2
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 0
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 2
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 2
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 2
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 2
18198: NEG
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 2
18209: NEG
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: LD_INT 2
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18252: LD_ADDR_VAR 0 22
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 1
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: NEG
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 1
18321: NEG
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: NEG
18334: PUSH
18335: LD_INT 2
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 2
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 2
18428: NEG
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: NEG
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: NEG
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18482: LD_ADDR_VAR 0 23
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: LD_INT 0
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: LD_INT 1
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 0
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 1
18551: NEG
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 2
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: LD_INT 2
18578: NEG
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 2
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 1
18647: NEG
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 2
18658: NEG
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: NEG
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 2
18681: NEG
18682: PUSH
18683: LD_INT 2
18685: NEG
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: LD_INT 3
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: LD_INT 3
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 2
18728: PUSH
18729: LD_INT 1
18731: NEG
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18762: LD_ADDR_VAR 0 24
18766: PUSH
18767: LD_INT 0
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: LD_INT 0
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: LD_INT 1
18835: NEG
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: NEG
18844: PUSH
18845: LD_INT 2
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: LD_INT 2
18858: NEG
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 2
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: LD_INT 2
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 2
18938: NEG
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 2
18949: NEG
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 2
18961: NEG
18962: PUSH
18963: LD_INT 2
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: LD_INT 2
18976: NEG
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 3
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 3
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19038: LD_ADDR_VAR 0 25
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: LD_INT 0
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 1
19107: NEG
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: LD_INT 2
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 0
19131: PUSH
19132: LD_INT 2
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 2
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 0
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 1
19203: NEG
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 2
19225: NEG
19226: PUSH
19227: LD_INT 1
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: LD_INT 2
19241: NEG
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 3
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 3
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: LD_INT 3
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: LD_INT 3
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19312: LD_ADDR_VAR 0 26
19316: PUSH
19317: LD_INT 0
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: LD_INT 2
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: NEG
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 2
19499: NEG
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 2
19511: NEG
19512: PUSH
19513: LD_INT 2
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 3
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 3
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19588: LD_ADDR_VAR 0 27
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 0
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 0
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: LD_INT 2
19673: NEG
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: LD_INT 2
19684: NEG
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: LD_INT 1
19695: NEG
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: NEG
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: NEG
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: NEG
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: NEG
19788: PUSH
19789: LD_INT 2
19791: NEG
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 1
19799: NEG
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: NEG
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 3
19821: NEG
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 3
19833: NEG
19834: PUSH
19835: LD_INT 2
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19868: LD_ADDR_VAR 0 28
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 0
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: LD_INT 2
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 2
20044: NEG
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 2
20055: NEG
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 2
20067: NEG
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: NEG
20080: PUSH
20081: LD_INT 3
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 3
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 3
20103: NEG
20104: PUSH
20105: LD_INT 1
20107: NEG
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 3
20115: NEG
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20150: LD_ADDR_VAR 0 29
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: LD_INT 0
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: LD_INT 1
20223: NEG
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: LD_INT 2
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: LD_INT 2
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: NEG
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 2
20316: NEG
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 2
20328: NEG
20329: PUSH
20330: LD_INT 2
20332: NEG
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 2
20340: NEG
20341: PUSH
20342: LD_INT 3
20344: NEG
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 3
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: NEG
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 3
20394: NEG
20395: PUSH
20396: LD_INT 2
20398: NEG
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20429: LD_ADDR_VAR 0 30
20433: PUSH
20434: LD_INT 0
20436: PUSH
20437: LD_INT 0
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 0
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 1
20498: NEG
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: LD_INT 2
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: LD_INT 1
20536: NEG
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 2
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 2
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: LD_INT 2
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 2
20595: NEG
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 2
20606: NEG
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: LD_INT 3
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: LD_INT 2
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 3
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: LD_INT 3
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 3
20672: NEG
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20707: LD_ADDR_VAR 0 31
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 0
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: LD_INT 2
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 1
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 1
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: NEG
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 2
20884: NEG
20885: PUSH
20886: LD_INT 2
20888: NEG
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 2
20896: NEG
20897: PUSH
20898: LD_INT 3
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 3
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: LD_INT 3
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 3
20950: NEG
20951: PUSH
20952: LD_INT 2
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20985: LD_ADDR_VAR 0 32
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 1
21013: PUSH
21014: LD_INT 0
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: NEG
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: LD_INT 1
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: LD_INT 2
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: LD_INT 2
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: PUSH
21090: LD_INT 1
21092: NEG
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 2
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: LD_INT 2
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 2
21151: NEG
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 2
21162: NEG
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: LD_INT 3
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 3
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 3
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 2
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 3
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21263: LD_ADDR_VAR 0 33
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: LD_INT 2
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 1
21407: NEG
21408: PUSH
21409: LD_INT 1
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 2
21418: NEG
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 2
21429: NEG
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 2
21441: NEG
21442: PUSH
21443: LD_INT 2
21445: NEG
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: NEG
21454: PUSH
21455: LD_INT 3
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 3
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: LD_INT 3
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 3
21507: NEG
21508: PUSH
21509: LD_INT 2
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21542: LD_ADDR_VAR 0 34
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 1
21611: NEG
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: LD_INT 2
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: LD_INT 2
21638: NEG
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 2
21698: NEG
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 2
21709: NEG
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: NEG
21722: PUSH
21723: LD_INT 2
21725: NEG
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: LD_INT 3
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 3
21787: NEG
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21822: LD_ADDR_VAR 0 35
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: NEG
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: NEG
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: NEG
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21934: LD_ADDR_VAR 0 36
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 1
21954: NEG
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: LD_INT 0
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: LD_INT 2
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22046: LD_ADDR_VAR 0 37
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: LD_INT 1
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22158: LD_ADDR_VAR 0 38
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: LD_INT 1
22231: NEG
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 2
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 2
22249: NEG
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22270: LD_ADDR_VAR 0 39
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: NEG
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22382: LD_ADDR_VAR 0 40
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: LD_INT 1
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22494: LD_ADDR_VAR 0 41
22498: PUSH
22499: LD_INT 0
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: NEG
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: LD_INT 2
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: LD_INT 0
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: NEG
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: NEG
22673: PUSH
22674: LD_INT 2
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: LD_INT 3
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 3
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: LD_INT 2
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 3
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 2
22757: NEG
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 3
22768: NEG
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 3
22779: NEG
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 3
22791: NEG
22792: PUSH
22793: LD_INT 2
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 3
22803: NEG
22804: PUSH
22805: LD_INT 3
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22844: LD_ADDR_VAR 0 42
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 1
22913: NEG
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: LD_INT 2
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 0
22937: PUSH
22938: LD_INT 2
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 2
23010: NEG
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 2
23022: NEG
23023: PUSH
23024: LD_INT 2
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 3
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: LD_INT 3
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 3
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 2
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 3
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: LD_INT 3
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 3
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 3
23141: NEG
23142: PUSH
23143: LD_INT 2
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 3
23153: NEG
23154: PUSH
23155: LD_INT 3
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23194: LD_ADDR_VAR 0 43
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: LD_INT 2
23279: NEG
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: LD_INT 2
23290: NEG
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: NEG
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: NEG
23372: PUSH
23373: LD_INT 1
23375: NEG
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: LD_INT 3
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: LD_INT 3
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 3
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 3
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 3
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: LD_INT 3
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 3
23490: NEG
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 3
23501: NEG
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23542: LD_ADDR_VAR 0 44
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 0
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: LD_INT 2
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 2
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: NEG
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 2
23720: NEG
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: NEG
23733: PUSH
23734: LD_INT 3
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 3
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 3
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 3
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: LD_INT 3
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: NEG
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 3
23816: NEG
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 3
23827: NEG
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 3
23839: NEG
23840: PUSH
23841: LD_INT 2
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 3
23851: NEG
23852: PUSH
23853: LD_INT 3
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23892: LD_ADDR_VAR 0 45
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 2
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 2
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: NEG
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 2
24070: NEG
24071: PUSH
24072: LD_INT 2
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: LD_INT 3
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: LD_INT 3
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 3
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 3
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 3
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: LD_INT 3
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: LD_INT 3
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 3
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 3
24189: NEG
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 3
24201: NEG
24202: PUSH
24203: LD_INT 3
24205: NEG
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24242: LD_ADDR_VAR 0 46
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: NEG
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: LD_INT 2
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 2
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 2
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: NEG
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 3
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: LD_INT 3
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 2
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 3
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 3
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 3
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 3
24538: NEG
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 3
24549: NEG
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24590: LD_ADDR_VAR 0 47
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: NEG
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: LD_INT 2
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: LD_INT 2
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 2
24705: NEG
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 2
24717: NEG
24718: PUSH
24719: LD_INT 2
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24741: LD_ADDR_VAR 0 48
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: NEG
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: LD_INT 2
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24888: LD_ADDR_VAR 0 49
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 2
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25032: LD_ADDR_VAR 0 50
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25176: LD_ADDR_VAR 0 51
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 2
25288: NEG
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: NEG
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25323: LD_ADDR_VAR 0 52
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: LD_INT 2
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: LD_INT 2
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25474: LD_ADDR_VAR 0 53
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 2
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 2
25650: NEG
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25704: LD_ADDR_VAR 0 54
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: LD_INT 2
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 2
25880: NEG
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: NEG
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: LD_INT 2
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25934: LD_ADDR_VAR 0 55
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 2
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: LD_INT 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 2
26110: NEG
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26164: LD_ADDR_VAR 0 56
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 2
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: NEG
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: LD_INT 2
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26394: LD_ADDR_VAR 0 57
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 1
26414: NEG
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 2
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: LD_INT 2
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: LD_INT 2
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 2
26570: NEG
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: NEG
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: LD_INT 2
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26624: LD_ADDR_VAR 0 58
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 2
26811: NEG
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 2
26823: NEG
26824: PUSH
26825: LD_INT 2
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26854: LD_ADDR_VAR 0 59
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: LD_INT 1
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: NEG
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26942: LD_ADDR_VAR 0 60
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27030: LD_ADDR_VAR 0 61
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: NEG
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27118: LD_ADDR_VAR 0 62
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27206: LD_ADDR_VAR 0 63
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27294: LD_ADDR_VAR 0 64
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: ST_TO_ADDR
// end ; 1 :
27382: GO 33279
27384: LD_INT 1
27386: DOUBLE
27387: EQUAL
27388: IFTRUE 27392
27390: GO 30015
27392: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27393: LD_ADDR_VAR 0 11
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 3
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: LD_INT 3
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27437: LD_ADDR_VAR 0 12
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 3
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27478: LD_ADDR_VAR 0 13
27482: PUSH
27483: LD_INT 3
27485: PUSH
27486: LD_INT 2
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 3
27495: PUSH
27496: LD_INT 3
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 3
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27518: LD_ADDR_VAR 0 14
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 3
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 3
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: LD_INT 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27559: LD_ADDR_VAR 0 15
27563: PUSH
27564: LD_INT 2
27566: NEG
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 3
27577: NEG
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 3
27588: NEG
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27603: LD_ADDR_VAR 0 16
27607: PUSH
27608: LD_INT 2
27610: NEG
27611: PUSH
27612: LD_INT 3
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 3
27622: NEG
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 3
27634: NEG
27635: PUSH
27636: LD_INT 3
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27649: LD_ADDR_VAR 0 17
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 3
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: LD_INT 3
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 2
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27693: LD_ADDR_VAR 0 18
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 3
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27734: LD_ADDR_VAR 0 19
27738: PUSH
27739: LD_INT 3
27741: PUSH
27742: LD_INT 2
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 3
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: LD_INT 3
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27774: LD_ADDR_VAR 0 20
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 3
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: LD_INT 3
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27815: LD_ADDR_VAR 0 21
27819: PUSH
27820: LD_INT 2
27822: NEG
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 3
27833: NEG
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 3
27844: NEG
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27859: LD_ADDR_VAR 0 22
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: LD_INT 3
27870: NEG
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 3
27878: NEG
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 3
27890: NEG
27891: PUSH
27892: LD_INT 3
27894: NEG
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27905: LD_ADDR_VAR 0 23
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 3
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 4
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: PUSH
27936: LD_INT 3
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27949: LD_ADDR_VAR 0 24
27953: PUSH
27954: LD_INT 3
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 4
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27990: LD_ADDR_VAR 0 25
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: LD_INT 3
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 4
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 3
28017: PUSH
28018: LD_INT 4
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28030: LD_ADDR_VAR 0 26
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 3
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: LD_INT 4
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: LD_INT 3
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28071: LD_ADDR_VAR 0 27
28075: PUSH
28076: LD_INT 3
28078: NEG
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 3
28089: NEG
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 4
28100: NEG
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28115: LD_ADDR_VAR 0 28
28119: PUSH
28120: LD_INT 3
28122: NEG
28123: PUSH
28124: LD_INT 3
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 3
28134: NEG
28135: PUSH
28136: LD_INT 4
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 4
28146: NEG
28147: PUSH
28148: LD_INT 3
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28161: LD_ADDR_VAR 0 29
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: LD_INT 3
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 3
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: LD_INT 4
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: LD_INT 4
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: LD_INT 3
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 5
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 5
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: LD_INT 4
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: LD_INT 6
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 6
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 5
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28316: LD_ADDR_VAR 0 30
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 3
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 3
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 3
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 4
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 4
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 4
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 5
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 5
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 5
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 6
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 6
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28459: LD_ADDR_VAR 0 31
28463: PUSH
28464: LD_INT 3
28466: PUSH
28467: LD_INT 2
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: LD_INT 3
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 3
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 4
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 4
28506: PUSH
28507: LD_INT 4
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 3
28516: PUSH
28517: LD_INT 4
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 5
28526: PUSH
28527: LD_INT 4
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 5
28536: PUSH
28537: LD_INT 5
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 4
28546: PUSH
28547: LD_INT 5
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 6
28556: PUSH
28557: LD_INT 5
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 6
28566: PUSH
28567: LD_INT 6
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 5
28576: PUSH
28577: LD_INT 6
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28598: LD_ADDR_VAR 0 32
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: LD_INT 3
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 3
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 4
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 4
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 3
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 5
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 5
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 4
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 6
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 6
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 5
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28741: LD_ADDR_VAR 0 33
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 3
28759: NEG
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 3
28770: NEG
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 3
28782: NEG
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 4
28793: NEG
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 4
28804: NEG
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 4
28816: NEG
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 5
28827: NEG
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 5
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 5
28850: NEG
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 6
28861: NEG
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 6
28872: NEG
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28896: LD_ADDR_VAR 0 34
28900: PUSH
28901: LD_INT 2
28903: NEG
28904: PUSH
28905: LD_INT 3
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 3
28915: NEG
28916: PUSH
28917: LD_INT 2
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 3
28927: NEG
28928: PUSH
28929: LD_INT 3
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 3
28939: NEG
28940: PUSH
28941: LD_INT 4
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 4
28951: NEG
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 4
28963: NEG
28964: PUSH
28965: LD_INT 4
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 4
28975: NEG
28976: PUSH
28977: LD_INT 5
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 5
28987: NEG
28988: PUSH
28989: LD_INT 4
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 5
28999: NEG
29000: PUSH
29001: LD_INT 5
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 5
29011: NEG
29012: PUSH
29013: LD_INT 6
29015: NEG
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 6
29023: NEG
29024: PUSH
29025: LD_INT 5
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 6
29035: NEG
29036: PUSH
29037: LD_INT 6
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29059: LD_ADDR_VAR 0 41
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: LD_INT 3
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 2
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29103: LD_ADDR_VAR 0 42
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 3
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: LIST
29143: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29144: LD_ADDR_VAR 0 43
29148: PUSH
29149: LD_INT 2
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: PUSH
29172: LD_INT 3
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29184: LD_ADDR_VAR 0 44
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 3
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29225: LD_ADDR_VAR 0 45
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 3
29254: NEG
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29269: LD_ADDR_VAR 0 46
29273: PUSH
29274: LD_INT 2
29276: NEG
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: LD_INT 3
29292: NEG
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 3
29300: NEG
29301: PUSH
29302: LD_INT 2
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29315: LD_ADDR_VAR 0 47
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: LD_INT 3
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: LD_INT 3
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29348: LD_ADDR_VAR 0 48
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29379: LD_ADDR_VAR 0 49
29383: PUSH
29384: LD_INT 3
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: LD_INT 2
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29408: LD_ADDR_VAR 0 50
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: LD_INT 3
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29437: LD_ADDR_VAR 0 51
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: NEG
29456: PUSH
29457: LD_INT 1
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29468: LD_ADDR_VAR 0 52
29472: PUSH
29473: LD_INT 3
29475: NEG
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 3
29487: NEG
29488: PUSH
29489: LD_INT 2
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29501: LD_ADDR_VAR 0 53
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: LD_INT 3
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: LD_INT 3
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29545: LD_ADDR_VAR 0 54
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29586: LD_ADDR_VAR 0 55
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29626: LD_ADDR_VAR 0 56
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29667: LD_ADDR_VAR 0 57
29671: PUSH
29672: LD_INT 2
29674: NEG
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29711: LD_ADDR_VAR 0 58
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: LD_INT 3
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29757: LD_ADDR_VAR 0 59
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: LD_INT 2
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29801: LD_ADDR_VAR 0 60
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29842: LD_ADDR_VAR 0 61
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 2
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29882: LD_ADDR_VAR 0 62
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29923: LD_ADDR_VAR 0 63
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29967: LD_ADDR_VAR 0 64
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: LD_INT 2
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 2
29998: NEG
29999: PUSH
30000: LD_INT 2
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: ST_TO_ADDR
// end ; 2 :
30013: GO 33279
30015: LD_INT 2
30017: DOUBLE
30018: EQUAL
30019: IFTRUE 30023
30021: GO 33278
30023: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30024: LD_ADDR_VAR 0 29
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 5
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 5
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 4
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: LD_INT 2
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 5
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 3
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 3
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 4
30144: PUSH
30145: LD_INT 3
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 4
30154: PUSH
30155: LD_INT 4
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 3
30164: PUSH
30165: LD_INT 4
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: LD_INT 3
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 4
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: LD_INT 4
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: LD_INT 4
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: LD_INT 4
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 5
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 5
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: LD_INT 4
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 3
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: LD_INT 5
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 2
30296: NEG
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: NEG
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 3
30318: NEG
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: NEG
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 3
30352: NEG
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 4
30363: NEG
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 4
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 4
30386: NEG
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 4
30409: NEG
30410: PUSH
30411: LD_INT 4
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 4
30421: NEG
30422: PUSH
30423: LD_INT 5
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 3
30433: NEG
30434: PUSH
30435: LD_INT 4
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 3
30445: NEG
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 4
30457: NEG
30458: PUSH
30459: LD_INT 3
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 5
30469: NEG
30470: PUSH
30471: LD_INT 4
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 5
30481: NEG
30482: PUSH
30483: LD_INT 5
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 3
30493: NEG
30494: PUSH
30495: LD_INT 5
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 5
30505: NEG
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30562: LD_ADDR_VAR 0 30
30566: PUSH
30567: LD_INT 4
30569: PUSH
30570: LD_INT 4
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 4
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 5
30589: PUSH
30590: LD_INT 4
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 5
30599: PUSH
30600: LD_INT 5
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 4
30609: PUSH
30610: LD_INT 5
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: PUSH
30620: LD_INT 4
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 3
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 5
30639: PUSH
30640: LD_INT 3
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: LD_INT 5
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 4
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: LD_INT 2
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 4
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: NEG
30742: PUSH
30743: LD_INT 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 4
30752: NEG
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 4
30763: NEG
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 3
30775: NEG
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 3
30786: NEG
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 4
30797: NEG
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 5
30808: NEG
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 5
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 5
30831: NEG
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: LD_INT 3
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: LD_INT 4
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: NEG
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: NEG
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 4
30914: NEG
30915: PUSH
30916: LD_INT 3
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 4
30926: NEG
30927: PUSH
30928: LD_INT 4
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: NEG
30939: PUSH
30940: LD_INT 4
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 4
30950: NEG
30951: PUSH
30952: LD_INT 2
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 4
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: LD_INT 5
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 4
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: LD_INT 4
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 5
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: NEG
31053: PUSH
31054: LD_INT 5
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31109: LD_ADDR_VAR 0 31
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 4
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 3
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 4
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: LD_INT 5
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 5
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: LD_INT 4
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: LD_INT 3
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 5
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: NEG
31199: PUSH
31200: LD_INT 3
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 3
31209: NEG
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: NEG
31221: PUSH
31222: LD_INT 1
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: NEG
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 4
31265: NEG
31266: PUSH
31267: LD_INT 0
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 4
31276: NEG
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 4
31288: NEG
31289: PUSH
31290: LD_INT 2
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 4
31311: NEG
31312: PUSH
31313: LD_INT 4
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 4
31323: NEG
31324: PUSH
31325: LD_INT 5
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: LD_INT 4
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 4
31359: NEG
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 5
31371: NEG
31372: PUSH
31373: LD_INT 4
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 5
31383: NEG
31384: PUSH
31385: LD_INT 5
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: LD_INT 5
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 5
31407: NEG
31408: PUSH
31409: LD_INT 3
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 3
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 4
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: LD_INT 3
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: LD_INT 3
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: LD_INT 4
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: LD_INT 2
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: LD_INT 4
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 4
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 4
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 5
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 5
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 4
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 3
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 5
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31659: LD_ADDR_VAR 0 32
31663: PUSH
31664: LD_INT 4
31666: NEG
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 4
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 3
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 4
31711: NEG
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 5
31722: NEG
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 5
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 5
31745: NEG
31746: PUSH
31747: LD_INT 2
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 3
31757: NEG
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: LD_INT 3
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: NEG
31781: PUSH
31782: LD_INT 4
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: LD_INT 3
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: LD_INT 2
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: NEG
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 4
31828: NEG
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 4
31840: NEG
31841: PUSH
31842: LD_INT 4
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 4
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 4
31864: NEG
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 4
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 5
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 4
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 3
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 4
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: LD_INT 5
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: LD_INT 5
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 4
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 4
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 2
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 4
32061: PUSH
32062: LD_INT 2
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 4
32071: PUSH
32072: LD_INT 4
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 4
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 5
32091: PUSH
32092: LD_INT 4
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 5
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 4
32111: PUSH
32112: LD_INT 5
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: LD_INT 4
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 5
32141: PUSH
32142: LD_INT 3
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 5
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32206: LD_ADDR_VAR 0 33
32210: PUSH
32211: LD_INT 4
32213: NEG
32214: PUSH
32215: LD_INT 4
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 4
32225: NEG
32226: PUSH
32227: LD_INT 5
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: LD_INT 4
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: LD_INT 3
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: NEG
32262: PUSH
32263: LD_INT 3
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 5
32273: NEG
32274: PUSH
32275: LD_INT 4
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 5
32285: NEG
32286: PUSH
32287: LD_INT 5
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: LD_INT 5
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 5
32309: NEG
32310: PUSH
32311: LD_INT 3
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: LD_INT 3
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 4
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: LD_INT 3
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 3
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 2
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: LD_INT 4
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 4
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 4
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 5
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 5
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 4
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 5
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 4
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 4
32546: PUSH
32547: LD_INT 4
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: LD_INT 4
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 4
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 4
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 4
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 3
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: LD_INT 4
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 5
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: LD_INT 5
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32744: LD_ADDR_VAR 0 34
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 4
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 5
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 4
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: LD_INT 3
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 3
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 4
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: LD_INT 5
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 3
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: LD_INT 5
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 4
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 4
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 4
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 4
32946: PUSH
32947: LD_INT 4
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 5
32966: PUSH
32967: LD_INT 4
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 5
32976: PUSH
32977: LD_INT 5
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 4
32986: PUSH
32987: LD_INT 5
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: PUSH
32997: LD_INT 4
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 5
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: LD_INT 5
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 3
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 4
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: LD_INT 4
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 4
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 4
33129: NEG
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 4
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 3
33152: NEG
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 3
33163: NEG
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 4
33174: NEG
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 5
33185: NEG
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 5
33196: NEG
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 5
33208: NEG
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 3
33220: NEG
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: ST_TO_ADDR
// end ; end ;
33276: GO 33279
33278: POP
// case btype of b_depot , b_warehouse :
33279: LD_VAR 0 1
33283: PUSH
33284: LD_INT 0
33286: DOUBLE
33287: EQUAL
33288: IFTRUE 33298
33290: LD_INT 1
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33499
33298: POP
// case nation of nation_american :
33299: LD_VAR 0 5
33303: PUSH
33304: LD_INT 1
33306: DOUBLE
33307: EQUAL
33308: IFTRUE 33312
33310: GO 33368
33312: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33313: LD_ADDR_VAR 0 9
33317: PUSH
33318: LD_VAR 0 11
33322: PUSH
33323: LD_VAR 0 12
33327: PUSH
33328: LD_VAR 0 13
33332: PUSH
33333: LD_VAR 0 14
33337: PUSH
33338: LD_VAR 0 15
33342: PUSH
33343: LD_VAR 0 16
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: PUSH
33356: LD_VAR 0 4
33360: PUSH
33361: LD_INT 1
33363: PLUS
33364: ARRAY
33365: ST_TO_ADDR
33366: GO 33497
33368: LD_INT 2
33370: DOUBLE
33371: EQUAL
33372: IFTRUE 33376
33374: GO 33432
33376: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33377: LD_ADDR_VAR 0 9
33381: PUSH
33382: LD_VAR 0 17
33386: PUSH
33387: LD_VAR 0 18
33391: PUSH
33392: LD_VAR 0 19
33396: PUSH
33397: LD_VAR 0 20
33401: PUSH
33402: LD_VAR 0 21
33406: PUSH
33407: LD_VAR 0 22
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: PUSH
33420: LD_VAR 0 4
33424: PUSH
33425: LD_INT 1
33427: PLUS
33428: ARRAY
33429: ST_TO_ADDR
33430: GO 33497
33432: LD_INT 3
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33496
33440: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33441: LD_ADDR_VAR 0 9
33445: PUSH
33446: LD_VAR 0 23
33450: PUSH
33451: LD_VAR 0 24
33455: PUSH
33456: LD_VAR 0 25
33460: PUSH
33461: LD_VAR 0 26
33465: PUSH
33466: LD_VAR 0 27
33470: PUSH
33471: LD_VAR 0 28
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: LD_VAR 0 4
33488: PUSH
33489: LD_INT 1
33491: PLUS
33492: ARRAY
33493: ST_TO_ADDR
33494: GO 33497
33496: POP
33497: GO 34052
33499: LD_INT 2
33501: DOUBLE
33502: EQUAL
33503: IFTRUE 33513
33505: LD_INT 3
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33569
33513: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33514: LD_ADDR_VAR 0 9
33518: PUSH
33519: LD_VAR 0 29
33523: PUSH
33524: LD_VAR 0 30
33528: PUSH
33529: LD_VAR 0 31
33533: PUSH
33534: LD_VAR 0 32
33538: PUSH
33539: LD_VAR 0 33
33543: PUSH
33544: LD_VAR 0 34
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: PUSH
33557: LD_VAR 0 4
33561: PUSH
33562: LD_INT 1
33564: PLUS
33565: ARRAY
33566: ST_TO_ADDR
33567: GO 34052
33569: LD_INT 16
33571: DOUBLE
33572: EQUAL
33573: IFTRUE 33631
33575: LD_INT 17
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33631
33581: LD_INT 18
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33631
33587: LD_INT 19
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33631
33593: LD_INT 22
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33631
33599: LD_INT 20
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33631
33605: LD_INT 21
33607: DOUBLE
33608: EQUAL
33609: IFTRUE 33631
33611: LD_INT 23
33613: DOUBLE
33614: EQUAL
33615: IFTRUE 33631
33617: LD_INT 24
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33631
33623: LD_INT 25
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33631
33629: GO 33687
33631: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33632: LD_ADDR_VAR 0 9
33636: PUSH
33637: LD_VAR 0 35
33641: PUSH
33642: LD_VAR 0 36
33646: PUSH
33647: LD_VAR 0 37
33651: PUSH
33652: LD_VAR 0 38
33656: PUSH
33657: LD_VAR 0 39
33661: PUSH
33662: LD_VAR 0 40
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: PUSH
33675: LD_VAR 0 4
33679: PUSH
33680: LD_INT 1
33682: PLUS
33683: ARRAY
33684: ST_TO_ADDR
33685: GO 34052
33687: LD_INT 6
33689: DOUBLE
33690: EQUAL
33691: IFTRUE 33743
33693: LD_INT 7
33695: DOUBLE
33696: EQUAL
33697: IFTRUE 33743
33699: LD_INT 8
33701: DOUBLE
33702: EQUAL
33703: IFTRUE 33743
33705: LD_INT 13
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33743
33711: LD_INT 12
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33743
33717: LD_INT 15
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33743
33723: LD_INT 11
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33743
33729: LD_INT 14
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33743
33735: LD_INT 10
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33799
33743: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33744: LD_ADDR_VAR 0 9
33748: PUSH
33749: LD_VAR 0 41
33753: PUSH
33754: LD_VAR 0 42
33758: PUSH
33759: LD_VAR 0 43
33763: PUSH
33764: LD_VAR 0 44
33768: PUSH
33769: LD_VAR 0 45
33773: PUSH
33774: LD_VAR 0 46
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: PUSH
33787: LD_VAR 0 4
33791: PUSH
33792: LD_INT 1
33794: PLUS
33795: ARRAY
33796: ST_TO_ADDR
33797: GO 34052
33799: LD_INT 36
33801: DOUBLE
33802: EQUAL
33803: IFTRUE 33807
33805: GO 33863
33807: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33808: LD_ADDR_VAR 0 9
33812: PUSH
33813: LD_VAR 0 47
33817: PUSH
33818: LD_VAR 0 48
33822: PUSH
33823: LD_VAR 0 49
33827: PUSH
33828: LD_VAR 0 50
33832: PUSH
33833: LD_VAR 0 51
33837: PUSH
33838: LD_VAR 0 52
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: PUSH
33851: LD_VAR 0 4
33855: PUSH
33856: LD_INT 1
33858: PLUS
33859: ARRAY
33860: ST_TO_ADDR
33861: GO 34052
33863: LD_INT 4
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33889
33869: LD_INT 5
33871: DOUBLE
33872: EQUAL
33873: IFTRUE 33889
33875: LD_INT 34
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33889
33881: LD_INT 37
33883: DOUBLE
33884: EQUAL
33885: IFTRUE 33889
33887: GO 33945
33889: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33890: LD_ADDR_VAR 0 9
33894: PUSH
33895: LD_VAR 0 53
33899: PUSH
33900: LD_VAR 0 54
33904: PUSH
33905: LD_VAR 0 55
33909: PUSH
33910: LD_VAR 0 56
33914: PUSH
33915: LD_VAR 0 57
33919: PUSH
33920: LD_VAR 0 58
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: PUSH
33933: LD_VAR 0 4
33937: PUSH
33938: LD_INT 1
33940: PLUS
33941: ARRAY
33942: ST_TO_ADDR
33943: GO 34052
33945: LD_INT 31
33947: DOUBLE
33948: EQUAL
33949: IFTRUE 33995
33951: LD_INT 32
33953: DOUBLE
33954: EQUAL
33955: IFTRUE 33995
33957: LD_INT 33
33959: DOUBLE
33960: EQUAL
33961: IFTRUE 33995
33963: LD_INT 27
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33995
33969: LD_INT 26
33971: DOUBLE
33972: EQUAL
33973: IFTRUE 33995
33975: LD_INT 28
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 33995
33981: LD_INT 29
33983: DOUBLE
33984: EQUAL
33985: IFTRUE 33995
33987: LD_INT 30
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 33995
33993: GO 34051
33995: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33996: LD_ADDR_VAR 0 9
34000: PUSH
34001: LD_VAR 0 59
34005: PUSH
34006: LD_VAR 0 60
34010: PUSH
34011: LD_VAR 0 61
34015: PUSH
34016: LD_VAR 0 62
34020: PUSH
34021: LD_VAR 0 63
34025: PUSH
34026: LD_VAR 0 64
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: PUSH
34039: LD_VAR 0 4
34043: PUSH
34044: LD_INT 1
34046: PLUS
34047: ARRAY
34048: ST_TO_ADDR
34049: GO 34052
34051: POP
// temp_list2 = [ ] ;
34052: LD_ADDR_VAR 0 10
34056: PUSH
34057: EMPTY
34058: ST_TO_ADDR
// for i in temp_list do
34059: LD_ADDR_VAR 0 8
34063: PUSH
34064: LD_VAR 0 9
34068: PUSH
34069: FOR_IN
34070: IFFALSE 34122
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34072: LD_ADDR_VAR 0 10
34076: PUSH
34077: LD_VAR 0 10
34081: PUSH
34082: LD_VAR 0 8
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: PUSH
34091: LD_VAR 0 2
34095: PLUS
34096: PUSH
34097: LD_VAR 0 8
34101: PUSH
34102: LD_INT 2
34104: ARRAY
34105: PUSH
34106: LD_VAR 0 3
34110: PLUS
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: EMPTY
34117: LIST
34118: ADD
34119: ST_TO_ADDR
34120: GO 34069
34122: POP
34123: POP
// result = temp_list2 ;
34124: LD_ADDR_VAR 0 7
34128: PUSH
34129: LD_VAR 0 10
34133: ST_TO_ADDR
// end ;
34134: LD_VAR 0 7
34138: RET
// export function EnemyInRange ( unit , dist ) ; begin
34139: LD_INT 0
34141: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34142: LD_ADDR_VAR 0 3
34146: PUSH
34147: LD_VAR 0 1
34151: PPUSH
34152: CALL_OW 255
34156: PPUSH
34157: LD_VAR 0 1
34161: PPUSH
34162: CALL_OW 250
34166: PPUSH
34167: LD_VAR 0 1
34171: PPUSH
34172: CALL_OW 251
34176: PPUSH
34177: LD_VAR 0 2
34181: PPUSH
34182: CALL 7512 0 4
34186: PUSH
34187: LD_INT 4
34189: ARRAY
34190: ST_TO_ADDR
// end ;
34191: LD_VAR 0 3
34195: RET
// export function PlayerSeeMe ( unit ) ; begin
34196: LD_INT 0
34198: PPUSH
// result := See ( your_side , unit ) ;
34199: LD_ADDR_VAR 0 2
34203: PUSH
34204: LD_OWVAR 2
34208: PPUSH
34209: LD_VAR 0 1
34213: PPUSH
34214: CALL_OW 292
34218: ST_TO_ADDR
// end ;
34219: LD_VAR 0 2
34223: RET
// export function ReverseDir ( unit ) ; begin
34224: LD_INT 0
34226: PPUSH
// if not unit then
34227: LD_VAR 0 1
34231: NOT
34232: IFFALSE 34236
// exit ;
34234: GO 34259
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34236: LD_ADDR_VAR 0 2
34240: PUSH
34241: LD_VAR 0 1
34245: PPUSH
34246: CALL_OW 254
34250: PUSH
34251: LD_INT 3
34253: PLUS
34254: PUSH
34255: LD_INT 6
34257: MOD
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 2
34263: RET
// export function ReverseArray ( array ) ; var i ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
// if not array then
34268: LD_VAR 0 1
34272: NOT
34273: IFFALSE 34277
// exit ;
34275: GO 34332
// result := [ ] ;
34277: LD_ADDR_VAR 0 2
34281: PUSH
34282: EMPTY
34283: ST_TO_ADDR
// for i := array downto 1 do
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: DOUBLE
34290: LD_VAR 0 1
34294: INC
34295: ST_TO_ADDR
34296: LD_INT 1
34298: PUSH
34299: FOR_DOWNTO
34300: IFFALSE 34330
// result := Join ( result , array [ i ] ) ;
34302: LD_ADDR_VAR 0 2
34306: PUSH
34307: LD_VAR 0 2
34311: PPUSH
34312: LD_VAR 0 1
34316: PUSH
34317: LD_VAR 0 3
34321: ARRAY
34322: PPUSH
34323: CALL 38988 0 2
34327: ST_TO_ADDR
34328: GO 34299
34330: POP
34331: POP
// end ;
34332: LD_VAR 0 2
34336: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34337: LD_INT 0
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
// if not unit or not hexes then
34345: LD_VAR 0 1
34349: NOT
34350: PUSH
34351: LD_VAR 0 2
34355: NOT
34356: OR
34357: IFFALSE 34361
// exit ;
34359: GO 34484
// dist := 9999 ;
34361: LD_ADDR_VAR 0 5
34365: PUSH
34366: LD_INT 9999
34368: ST_TO_ADDR
// for i = 1 to hexes do
34369: LD_ADDR_VAR 0 4
34373: PUSH
34374: DOUBLE
34375: LD_INT 1
34377: DEC
34378: ST_TO_ADDR
34379: LD_VAR 0 2
34383: PUSH
34384: FOR_TO
34385: IFFALSE 34472
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34387: LD_ADDR_VAR 0 6
34391: PUSH
34392: LD_VAR 0 1
34396: PPUSH
34397: LD_VAR 0 2
34401: PUSH
34402: LD_VAR 0 4
34406: ARRAY
34407: PUSH
34408: LD_INT 1
34410: ARRAY
34411: PPUSH
34412: LD_VAR 0 2
34416: PUSH
34417: LD_VAR 0 4
34421: ARRAY
34422: PUSH
34423: LD_INT 2
34425: ARRAY
34426: PPUSH
34427: CALL_OW 297
34431: ST_TO_ADDR
// if tdist < dist then
34432: LD_VAR 0 6
34436: PUSH
34437: LD_VAR 0 5
34441: LESS
34442: IFFALSE 34470
// begin hex := hexes [ i ] ;
34444: LD_ADDR_VAR 0 8
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_VAR 0 4
34458: ARRAY
34459: ST_TO_ADDR
// dist := tdist ;
34460: LD_ADDR_VAR 0 5
34464: PUSH
34465: LD_VAR 0 6
34469: ST_TO_ADDR
// end ; end ;
34470: GO 34384
34472: POP
34473: POP
// result := hex ;
34474: LD_ADDR_VAR 0 3
34478: PUSH
34479: LD_VAR 0 8
34483: ST_TO_ADDR
// end ;
34484: LD_VAR 0 3
34488: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34489: LD_INT 0
34491: PPUSH
34492: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34493: LD_VAR 0 1
34497: NOT
34498: PUSH
34499: LD_VAR 0 1
34503: PUSH
34504: LD_INT 21
34506: PUSH
34507: LD_INT 2
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 23
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PPUSH
34528: CALL_OW 69
34532: IN
34533: NOT
34534: OR
34535: IFFALSE 34539
// exit ;
34537: GO 34586
// for i = 1 to 3 do
34539: LD_ADDR_VAR 0 3
34543: PUSH
34544: DOUBLE
34545: LD_INT 1
34547: DEC
34548: ST_TO_ADDR
34549: LD_INT 3
34551: PUSH
34552: FOR_TO
34553: IFFALSE 34584
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 250
34564: PPUSH
34565: LD_VAR 0 1
34569: PPUSH
34570: CALL_OW 251
34574: PPUSH
34575: LD_INT 1
34577: PPUSH
34578: CALL_OW 453
34582: GO 34552
34584: POP
34585: POP
// end ;
34586: LD_VAR 0 2
34590: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34591: LD_INT 0
34593: PPUSH
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34599: LD_VAR 0 1
34603: NOT
34604: PUSH
34605: LD_VAR 0 2
34609: NOT
34610: OR
34611: PUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 314
34621: OR
34622: IFFALSE 34626
// exit ;
34624: GO 35093
// if GetLives ( i ) < 250 then
34626: LD_VAR 0 4
34630: PPUSH
34631: CALL_OW 256
34635: PUSH
34636: LD_INT 250
34638: LESS
34639: IFFALSE 34652
// begin ComAutodestruct ( i ) ;
34641: LD_VAR 0 4
34645: PPUSH
34646: CALL 34489 0 1
// exit ;
34650: GO 35093
// end ; x := GetX ( enemy_unit ) ;
34652: LD_ADDR_VAR 0 7
34656: PUSH
34657: LD_VAR 0 2
34661: PPUSH
34662: CALL_OW 250
34666: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34667: LD_ADDR_VAR 0 8
34671: PUSH
34672: LD_VAR 0 2
34676: PPUSH
34677: CALL_OW 251
34681: ST_TO_ADDR
// if not x or not y then
34682: LD_VAR 0 7
34686: NOT
34687: PUSH
34688: LD_VAR 0 8
34692: NOT
34693: OR
34694: IFFALSE 34698
// exit ;
34696: GO 35093
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34698: LD_ADDR_VAR 0 6
34702: PUSH
34703: LD_VAR 0 7
34707: PPUSH
34708: LD_INT 0
34710: PPUSH
34711: LD_INT 4
34713: PPUSH
34714: CALL_OW 272
34718: PUSH
34719: LD_VAR 0 8
34723: PPUSH
34724: LD_INT 0
34726: PPUSH
34727: LD_INT 4
34729: PPUSH
34730: CALL_OW 273
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_VAR 0 7
34743: PPUSH
34744: LD_INT 1
34746: PPUSH
34747: LD_INT 4
34749: PPUSH
34750: CALL_OW 272
34754: PUSH
34755: LD_VAR 0 8
34759: PPUSH
34760: LD_INT 1
34762: PPUSH
34763: LD_INT 4
34765: PPUSH
34766: CALL_OW 273
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_VAR 0 7
34779: PPUSH
34780: LD_INT 2
34782: PPUSH
34783: LD_INT 4
34785: PPUSH
34786: CALL_OW 272
34790: PUSH
34791: LD_VAR 0 8
34795: PPUSH
34796: LD_INT 2
34798: PPUSH
34799: LD_INT 4
34801: PPUSH
34802: CALL_OW 273
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_VAR 0 7
34815: PPUSH
34816: LD_INT 3
34818: PPUSH
34819: LD_INT 4
34821: PPUSH
34822: CALL_OW 272
34826: PUSH
34827: LD_VAR 0 8
34831: PPUSH
34832: LD_INT 3
34834: PPUSH
34835: LD_INT 4
34837: PPUSH
34838: CALL_OW 273
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_VAR 0 7
34851: PPUSH
34852: LD_INT 4
34854: PPUSH
34855: LD_INT 4
34857: PPUSH
34858: CALL_OW 272
34862: PUSH
34863: LD_VAR 0 8
34867: PPUSH
34868: LD_INT 4
34870: PPUSH
34871: LD_INT 4
34873: PPUSH
34874: CALL_OW 273
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_VAR 0 7
34887: PPUSH
34888: LD_INT 5
34890: PPUSH
34891: LD_INT 4
34893: PPUSH
34894: CALL_OW 272
34898: PUSH
34899: LD_VAR 0 8
34903: PPUSH
34904: LD_INT 5
34906: PPUSH
34907: LD_INT 4
34909: PPUSH
34910: CALL_OW 273
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: ST_TO_ADDR
// for i = tmp downto 1 do
34927: LD_ADDR_VAR 0 4
34931: PUSH
34932: DOUBLE
34933: LD_VAR 0 6
34937: INC
34938: ST_TO_ADDR
34939: LD_INT 1
34941: PUSH
34942: FOR_DOWNTO
34943: IFFALSE 35044
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34945: LD_VAR 0 6
34949: PUSH
34950: LD_VAR 0 4
34954: ARRAY
34955: PUSH
34956: LD_INT 1
34958: ARRAY
34959: PPUSH
34960: LD_VAR 0 6
34964: PUSH
34965: LD_VAR 0 4
34969: ARRAY
34970: PUSH
34971: LD_INT 2
34973: ARRAY
34974: PPUSH
34975: CALL_OW 488
34979: NOT
34980: PUSH
34981: LD_VAR 0 6
34985: PUSH
34986: LD_VAR 0 4
34990: ARRAY
34991: PUSH
34992: LD_INT 1
34994: ARRAY
34995: PPUSH
34996: LD_VAR 0 6
35000: PUSH
35001: LD_VAR 0 4
35005: ARRAY
35006: PUSH
35007: LD_INT 2
35009: ARRAY
35010: PPUSH
35011: CALL_OW 428
35015: PUSH
35016: LD_INT 0
35018: NONEQUAL
35019: OR
35020: IFFALSE 35042
// tmp := Delete ( tmp , i ) ;
35022: LD_ADDR_VAR 0 6
35026: PUSH
35027: LD_VAR 0 6
35031: PPUSH
35032: LD_VAR 0 4
35036: PPUSH
35037: CALL_OW 3
35041: ST_TO_ADDR
35042: GO 34942
35044: POP
35045: POP
// j := GetClosestHex ( unit , tmp ) ;
35046: LD_ADDR_VAR 0 5
35050: PUSH
35051: LD_VAR 0 1
35055: PPUSH
35056: LD_VAR 0 6
35060: PPUSH
35061: CALL 34337 0 2
35065: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35066: LD_VAR 0 1
35070: PPUSH
35071: LD_VAR 0 5
35075: PUSH
35076: LD_INT 1
35078: ARRAY
35079: PPUSH
35080: LD_VAR 0 5
35084: PUSH
35085: LD_INT 2
35087: ARRAY
35088: PPUSH
35089: CALL_OW 111
// end ;
35093: LD_VAR 0 3
35097: RET
// export function PrepareApemanSoldier ( ) ; begin
35098: LD_INT 0
35100: PPUSH
// uc_nation := 0 ;
35101: LD_ADDR_OWVAR 21
35105: PUSH
35106: LD_INT 0
35108: ST_TO_ADDR
// hc_sex := sex_male ;
35109: LD_ADDR_OWVAR 27
35113: PUSH
35114: LD_INT 1
35116: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35117: LD_ADDR_OWVAR 28
35121: PUSH
35122: LD_INT 15
35124: ST_TO_ADDR
// hc_gallery :=  ;
35125: LD_ADDR_OWVAR 33
35129: PUSH
35130: LD_STRING 
35132: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35133: LD_ADDR_OWVAR 31
35137: PUSH
35138: LD_INT 0
35140: PPUSH
35141: LD_INT 3
35143: PPUSH
35144: CALL_OW 12
35148: PUSH
35149: LD_INT 0
35151: PPUSH
35152: LD_INT 3
35154: PPUSH
35155: CALL_OW 12
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// end ;
35172: LD_VAR 0 1
35176: RET
// export function PrepareApemanEngineer ( ) ; begin
35177: LD_INT 0
35179: PPUSH
// uc_nation := 0 ;
35180: LD_ADDR_OWVAR 21
35184: PUSH
35185: LD_INT 0
35187: ST_TO_ADDR
// hc_sex := sex_male ;
35188: LD_ADDR_OWVAR 27
35192: PUSH
35193: LD_INT 1
35195: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35196: LD_ADDR_OWVAR 28
35200: PUSH
35201: LD_INT 16
35203: ST_TO_ADDR
// hc_gallery :=  ;
35204: LD_ADDR_OWVAR 33
35208: PUSH
35209: LD_STRING 
35211: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35212: LD_ADDR_OWVAR 31
35216: PUSH
35217: LD_INT 0
35219: PPUSH
35220: LD_INT 3
35222: PPUSH
35223: CALL_OW 12
35227: PUSH
35228: LD_INT 0
35230: PPUSH
35231: LD_INT 3
35233: PPUSH
35234: CALL_OW 12
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: ST_TO_ADDR
// end ;
35251: LD_VAR 0 1
35255: RET
// export function PrepareApeman ( agressivity ) ; begin
35256: LD_INT 0
35258: PPUSH
// uc_side := 0 ;
35259: LD_ADDR_OWVAR 20
35263: PUSH
35264: LD_INT 0
35266: ST_TO_ADDR
// uc_nation := 0 ;
35267: LD_ADDR_OWVAR 21
35271: PUSH
35272: LD_INT 0
35274: ST_TO_ADDR
// hc_sex := sex_male ;
35275: LD_ADDR_OWVAR 27
35279: PUSH
35280: LD_INT 1
35282: ST_TO_ADDR
// hc_class := class_apeman ;
35283: LD_ADDR_OWVAR 28
35287: PUSH
35288: LD_INT 12
35290: ST_TO_ADDR
// hc_gallery :=  ;
35291: LD_ADDR_OWVAR 33
35295: PUSH
35296: LD_STRING 
35298: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35299: LD_ADDR_OWVAR 35
35303: PUSH
35304: LD_VAR 0 1
35308: NEG
35309: PPUSH
35310: LD_VAR 0 1
35314: PPUSH
35315: CALL_OW 12
35319: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35320: LD_ADDR_OWVAR 31
35324: PUSH
35325: LD_INT 0
35327: PPUSH
35328: LD_INT 3
35330: PPUSH
35331: CALL_OW 12
35335: PUSH
35336: LD_INT 0
35338: PPUSH
35339: LD_INT 3
35341: PPUSH
35342: CALL_OW 12
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: ST_TO_ADDR
// end ;
35359: LD_VAR 0 2
35363: RET
// export function PrepareTiger ( agressivity ) ; begin
35364: LD_INT 0
35366: PPUSH
// uc_side := 0 ;
35367: LD_ADDR_OWVAR 20
35371: PUSH
35372: LD_INT 0
35374: ST_TO_ADDR
// uc_nation := 0 ;
35375: LD_ADDR_OWVAR 21
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// hc_class := class_tiger ;
35383: LD_ADDR_OWVAR 28
35387: PUSH
35388: LD_INT 14
35390: ST_TO_ADDR
// hc_gallery :=  ;
35391: LD_ADDR_OWVAR 33
35395: PUSH
35396: LD_STRING 
35398: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35399: LD_ADDR_OWVAR 35
35403: PUSH
35404: LD_VAR 0 1
35408: NEG
35409: PPUSH
35410: LD_VAR 0 1
35414: PPUSH
35415: CALL_OW 12
35419: ST_TO_ADDR
// end ;
35420: LD_VAR 0 2
35424: RET
// export function PrepareEnchidna ( ) ; begin
35425: LD_INT 0
35427: PPUSH
// uc_side := 0 ;
35428: LD_ADDR_OWVAR 20
35432: PUSH
35433: LD_INT 0
35435: ST_TO_ADDR
// uc_nation := 0 ;
35436: LD_ADDR_OWVAR 21
35440: PUSH
35441: LD_INT 0
35443: ST_TO_ADDR
// hc_class := class_baggie ;
35444: LD_ADDR_OWVAR 28
35448: PUSH
35449: LD_INT 13
35451: ST_TO_ADDR
// hc_gallery :=  ;
35452: LD_ADDR_OWVAR 33
35456: PUSH
35457: LD_STRING 
35459: ST_TO_ADDR
// end ;
35460: LD_VAR 0 1
35464: RET
// export function PrepareFrog ( ) ; begin
35465: LD_INT 0
35467: PPUSH
// uc_side := 0 ;
35468: LD_ADDR_OWVAR 20
35472: PUSH
35473: LD_INT 0
35475: ST_TO_ADDR
// uc_nation := 0 ;
35476: LD_ADDR_OWVAR 21
35480: PUSH
35481: LD_INT 0
35483: ST_TO_ADDR
// hc_class := class_frog ;
35484: LD_ADDR_OWVAR 28
35488: PUSH
35489: LD_INT 19
35491: ST_TO_ADDR
// hc_gallery :=  ;
35492: LD_ADDR_OWVAR 33
35496: PUSH
35497: LD_STRING 
35499: ST_TO_ADDR
// end ;
35500: LD_VAR 0 1
35504: RET
// export function PrepareFish ( ) ; begin
35505: LD_INT 0
35507: PPUSH
// uc_side := 0 ;
35508: LD_ADDR_OWVAR 20
35512: PUSH
35513: LD_INT 0
35515: ST_TO_ADDR
// uc_nation := 0 ;
35516: LD_ADDR_OWVAR 21
35520: PUSH
35521: LD_INT 0
35523: ST_TO_ADDR
// hc_class := class_fish ;
35524: LD_ADDR_OWVAR 28
35528: PUSH
35529: LD_INT 20
35531: ST_TO_ADDR
// hc_gallery :=  ;
35532: LD_ADDR_OWVAR 33
35536: PUSH
35537: LD_STRING 
35539: ST_TO_ADDR
// end ;
35540: LD_VAR 0 1
35544: RET
// export function PrepareBird ( ) ; begin
35545: LD_INT 0
35547: PPUSH
// uc_side := 0 ;
35548: LD_ADDR_OWVAR 20
35552: PUSH
35553: LD_INT 0
35555: ST_TO_ADDR
// uc_nation := 0 ;
35556: LD_ADDR_OWVAR 21
35560: PUSH
35561: LD_INT 0
35563: ST_TO_ADDR
// hc_class := class_phororhacos ;
35564: LD_ADDR_OWVAR 28
35568: PUSH
35569: LD_INT 18
35571: ST_TO_ADDR
// hc_gallery :=  ;
35572: LD_ADDR_OWVAR 33
35576: PUSH
35577: LD_STRING 
35579: ST_TO_ADDR
// end ;
35580: LD_VAR 0 1
35584: RET
// export function PrepareHorse ( ) ; begin
35585: LD_INT 0
35587: PPUSH
// uc_side := 0 ;
35588: LD_ADDR_OWVAR 20
35592: PUSH
35593: LD_INT 0
35595: ST_TO_ADDR
// uc_nation := 0 ;
35596: LD_ADDR_OWVAR 21
35600: PUSH
35601: LD_INT 0
35603: ST_TO_ADDR
// hc_class := class_horse ;
35604: LD_ADDR_OWVAR 28
35608: PUSH
35609: LD_INT 21
35611: ST_TO_ADDR
// hc_gallery :=  ;
35612: LD_ADDR_OWVAR 33
35616: PUSH
35617: LD_STRING 
35619: ST_TO_ADDR
// end ;
35620: LD_VAR 0 1
35624: RET
// export function PrepareMastodont ( ) ; begin
35625: LD_INT 0
35627: PPUSH
// uc_side := 0 ;
35628: LD_ADDR_OWVAR 20
35632: PUSH
35633: LD_INT 0
35635: ST_TO_ADDR
// uc_nation := 0 ;
35636: LD_ADDR_OWVAR 21
35640: PUSH
35641: LD_INT 0
35643: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35644: LD_ADDR_OWVAR 37
35648: PUSH
35649: LD_INT 31
35651: ST_TO_ADDR
// vc_control := control_rider ;
35652: LD_ADDR_OWVAR 38
35656: PUSH
35657: LD_INT 4
35659: ST_TO_ADDR
// end ;
35660: LD_VAR 0 1
35664: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35665: LD_INT 0
35667: PPUSH
35668: PPUSH
35669: PPUSH
// uc_side = 0 ;
35670: LD_ADDR_OWVAR 20
35674: PUSH
35675: LD_INT 0
35677: ST_TO_ADDR
// uc_nation = 0 ;
35678: LD_ADDR_OWVAR 21
35682: PUSH
35683: LD_INT 0
35685: ST_TO_ADDR
// InitHc_All ( ) ;
35686: CALL_OW 584
// InitVc ;
35690: CALL_OW 20
// if mastodonts then
35694: LD_VAR 0 6
35698: IFFALSE 35765
// for i = 1 to mastodonts do
35700: LD_ADDR_VAR 0 11
35704: PUSH
35705: DOUBLE
35706: LD_INT 1
35708: DEC
35709: ST_TO_ADDR
35710: LD_VAR 0 6
35714: PUSH
35715: FOR_TO
35716: IFFALSE 35763
// begin vc_chassis := 31 ;
35718: LD_ADDR_OWVAR 37
35722: PUSH
35723: LD_INT 31
35725: ST_TO_ADDR
// vc_control := control_rider ;
35726: LD_ADDR_OWVAR 38
35730: PUSH
35731: LD_INT 4
35733: ST_TO_ADDR
// animal := CreateVehicle ;
35734: LD_ADDR_VAR 0 12
35738: PUSH
35739: CALL_OW 45
35743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35744: LD_VAR 0 12
35748: PPUSH
35749: LD_VAR 0 8
35753: PPUSH
35754: LD_INT 0
35756: PPUSH
35757: CALL 37893 0 3
// end ;
35761: GO 35715
35763: POP
35764: POP
// if horses then
35765: LD_VAR 0 5
35769: IFFALSE 35836
// for i = 1 to horses do
35771: LD_ADDR_VAR 0 11
35775: PUSH
35776: DOUBLE
35777: LD_INT 1
35779: DEC
35780: ST_TO_ADDR
35781: LD_VAR 0 5
35785: PUSH
35786: FOR_TO
35787: IFFALSE 35834
// begin hc_class := 21 ;
35789: LD_ADDR_OWVAR 28
35793: PUSH
35794: LD_INT 21
35796: ST_TO_ADDR
// hc_gallery :=  ;
35797: LD_ADDR_OWVAR 33
35801: PUSH
35802: LD_STRING 
35804: ST_TO_ADDR
// animal := CreateHuman ;
35805: LD_ADDR_VAR 0 12
35809: PUSH
35810: CALL_OW 44
35814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35815: LD_VAR 0 12
35819: PPUSH
35820: LD_VAR 0 8
35824: PPUSH
35825: LD_INT 0
35827: PPUSH
35828: CALL 37893 0 3
// end ;
35832: GO 35786
35834: POP
35835: POP
// if birds then
35836: LD_VAR 0 1
35840: IFFALSE 35907
// for i = 1 to birds do
35842: LD_ADDR_VAR 0 11
35846: PUSH
35847: DOUBLE
35848: LD_INT 1
35850: DEC
35851: ST_TO_ADDR
35852: LD_VAR 0 1
35856: PUSH
35857: FOR_TO
35858: IFFALSE 35905
// begin hc_class := 18 ;
35860: LD_ADDR_OWVAR 28
35864: PUSH
35865: LD_INT 18
35867: ST_TO_ADDR
// hc_gallery =  ;
35868: LD_ADDR_OWVAR 33
35872: PUSH
35873: LD_STRING 
35875: ST_TO_ADDR
// animal := CreateHuman ;
35876: LD_ADDR_VAR 0 12
35880: PUSH
35881: CALL_OW 44
35885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35886: LD_VAR 0 12
35890: PPUSH
35891: LD_VAR 0 8
35895: PPUSH
35896: LD_INT 0
35898: PPUSH
35899: CALL 37893 0 3
// end ;
35903: GO 35857
35905: POP
35906: POP
// if tigers then
35907: LD_VAR 0 2
35911: IFFALSE 35995
// for i = 1 to tigers do
35913: LD_ADDR_VAR 0 11
35917: PUSH
35918: DOUBLE
35919: LD_INT 1
35921: DEC
35922: ST_TO_ADDR
35923: LD_VAR 0 2
35927: PUSH
35928: FOR_TO
35929: IFFALSE 35993
// begin hc_class = class_tiger ;
35931: LD_ADDR_OWVAR 28
35935: PUSH
35936: LD_INT 14
35938: ST_TO_ADDR
// hc_gallery =  ;
35939: LD_ADDR_OWVAR 33
35943: PUSH
35944: LD_STRING 
35946: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35947: LD_ADDR_OWVAR 35
35951: PUSH
35952: LD_INT 7
35954: NEG
35955: PPUSH
35956: LD_INT 7
35958: PPUSH
35959: CALL_OW 12
35963: ST_TO_ADDR
// animal := CreateHuman ;
35964: LD_ADDR_VAR 0 12
35968: PUSH
35969: CALL_OW 44
35973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35974: LD_VAR 0 12
35978: PPUSH
35979: LD_VAR 0 8
35983: PPUSH
35984: LD_INT 0
35986: PPUSH
35987: CALL 37893 0 3
// end ;
35991: GO 35928
35993: POP
35994: POP
// if apemans then
35995: LD_VAR 0 3
35999: IFFALSE 36122
// for i = 1 to apemans do
36001: LD_ADDR_VAR 0 11
36005: PUSH
36006: DOUBLE
36007: LD_INT 1
36009: DEC
36010: ST_TO_ADDR
36011: LD_VAR 0 3
36015: PUSH
36016: FOR_TO
36017: IFFALSE 36120
// begin hc_class = class_apeman ;
36019: LD_ADDR_OWVAR 28
36023: PUSH
36024: LD_INT 12
36026: ST_TO_ADDR
// hc_gallery =  ;
36027: LD_ADDR_OWVAR 33
36031: PUSH
36032: LD_STRING 
36034: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36035: LD_ADDR_OWVAR 35
36039: PUSH
36040: LD_INT 2
36042: NEG
36043: PPUSH
36044: LD_INT 2
36046: PPUSH
36047: CALL_OW 12
36051: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36052: LD_ADDR_OWVAR 31
36056: PUSH
36057: LD_INT 1
36059: PPUSH
36060: LD_INT 3
36062: PPUSH
36063: CALL_OW 12
36067: PUSH
36068: LD_INT 1
36070: PPUSH
36071: LD_INT 3
36073: PPUSH
36074: CALL_OW 12
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: ST_TO_ADDR
// animal := CreateHuman ;
36091: LD_ADDR_VAR 0 12
36095: PUSH
36096: CALL_OW 44
36100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36101: LD_VAR 0 12
36105: PPUSH
36106: LD_VAR 0 8
36110: PPUSH
36111: LD_INT 0
36113: PPUSH
36114: CALL 37893 0 3
// end ;
36118: GO 36016
36120: POP
36121: POP
// if enchidnas then
36122: LD_VAR 0 4
36126: IFFALSE 36193
// for i = 1 to enchidnas do
36128: LD_ADDR_VAR 0 11
36132: PUSH
36133: DOUBLE
36134: LD_INT 1
36136: DEC
36137: ST_TO_ADDR
36138: LD_VAR 0 4
36142: PUSH
36143: FOR_TO
36144: IFFALSE 36191
// begin hc_class = 13 ;
36146: LD_ADDR_OWVAR 28
36150: PUSH
36151: LD_INT 13
36153: ST_TO_ADDR
// hc_gallery =  ;
36154: LD_ADDR_OWVAR 33
36158: PUSH
36159: LD_STRING 
36161: ST_TO_ADDR
// animal := CreateHuman ;
36162: LD_ADDR_VAR 0 12
36166: PUSH
36167: CALL_OW 44
36171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36172: LD_VAR 0 12
36176: PPUSH
36177: LD_VAR 0 8
36181: PPUSH
36182: LD_INT 0
36184: PPUSH
36185: CALL 37893 0 3
// end ;
36189: GO 36143
36191: POP
36192: POP
// if fishes then
36193: LD_VAR 0 7
36197: IFFALSE 36264
// for i = 1 to fishes do
36199: LD_ADDR_VAR 0 11
36203: PUSH
36204: DOUBLE
36205: LD_INT 1
36207: DEC
36208: ST_TO_ADDR
36209: LD_VAR 0 7
36213: PUSH
36214: FOR_TO
36215: IFFALSE 36262
// begin hc_class = 20 ;
36217: LD_ADDR_OWVAR 28
36221: PUSH
36222: LD_INT 20
36224: ST_TO_ADDR
// hc_gallery =  ;
36225: LD_ADDR_OWVAR 33
36229: PUSH
36230: LD_STRING 
36232: ST_TO_ADDR
// animal := CreateHuman ;
36233: LD_ADDR_VAR 0 12
36237: PUSH
36238: CALL_OW 44
36242: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36243: LD_VAR 0 12
36247: PPUSH
36248: LD_VAR 0 9
36252: PPUSH
36253: LD_INT 0
36255: PPUSH
36256: CALL 37893 0 3
// end ;
36260: GO 36214
36262: POP
36263: POP
// end ;
36264: LD_VAR 0 10
36268: RET
// export function WantHeal ( sci , unit ) ; begin
36269: LD_INT 0
36271: PPUSH
// if GetTaskList ( sci ) > 0 then
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 437
36281: PUSH
36282: LD_INT 0
36284: GREATER
36285: IFFALSE 36355
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36287: LD_VAR 0 1
36291: PPUSH
36292: CALL_OW 437
36296: PUSH
36297: LD_INT 1
36299: ARRAY
36300: PUSH
36301: LD_INT 1
36303: ARRAY
36304: PUSH
36305: LD_STRING l
36307: EQUAL
36308: PUSH
36309: LD_VAR 0 1
36313: PPUSH
36314: CALL_OW 437
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PUSH
36323: LD_INT 4
36325: ARRAY
36326: PUSH
36327: LD_VAR 0 2
36331: EQUAL
36332: AND
36333: IFFALSE 36345
// result := true else
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_INT 1
36342: ST_TO_ADDR
36343: GO 36353
// result := false ;
36345: LD_ADDR_VAR 0 3
36349: PUSH
36350: LD_INT 0
36352: ST_TO_ADDR
// end else
36353: GO 36363
// result := false ;
36355: LD_ADDR_VAR 0 3
36359: PUSH
36360: LD_INT 0
36362: ST_TO_ADDR
// end ;
36363: LD_VAR 0 3
36367: RET
// export function HealTarget ( sci ) ; begin
36368: LD_INT 0
36370: PPUSH
// if not sci then
36371: LD_VAR 0 1
36375: NOT
36376: IFFALSE 36380
// exit ;
36378: GO 36445
// result := 0 ;
36380: LD_ADDR_VAR 0 2
36384: PUSH
36385: LD_INT 0
36387: ST_TO_ADDR
// if GetTaskList ( sci ) then
36388: LD_VAR 0 1
36392: PPUSH
36393: CALL_OW 437
36397: IFFALSE 36445
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36399: LD_VAR 0 1
36403: PPUSH
36404: CALL_OW 437
36408: PUSH
36409: LD_INT 1
36411: ARRAY
36412: PUSH
36413: LD_INT 1
36415: ARRAY
36416: PUSH
36417: LD_STRING l
36419: EQUAL
36420: IFFALSE 36445
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36422: LD_ADDR_VAR 0 2
36426: PUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 437
36436: PUSH
36437: LD_INT 1
36439: ARRAY
36440: PUSH
36441: LD_INT 4
36443: ARRAY
36444: ST_TO_ADDR
// end ;
36445: LD_VAR 0 2
36449: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36450: LD_INT 0
36452: PPUSH
36453: PPUSH
36454: PPUSH
36455: PPUSH
// if not base_units then
36456: LD_VAR 0 1
36460: NOT
36461: IFFALSE 36465
// exit ;
36463: GO 36552
// result := false ;
36465: LD_ADDR_VAR 0 2
36469: PUSH
36470: LD_INT 0
36472: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36473: LD_ADDR_VAR 0 5
36477: PUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: LD_INT 21
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PPUSH
36493: CALL_OW 72
36497: ST_TO_ADDR
// if not tmp then
36498: LD_VAR 0 5
36502: NOT
36503: IFFALSE 36507
// exit ;
36505: GO 36552
// for i in tmp do
36507: LD_ADDR_VAR 0 3
36511: PUSH
36512: LD_VAR 0 5
36516: PUSH
36517: FOR_IN
36518: IFFALSE 36550
// begin result := EnemyInRange ( i , 22 ) ;
36520: LD_ADDR_VAR 0 2
36524: PUSH
36525: LD_VAR 0 3
36529: PPUSH
36530: LD_INT 22
36532: PPUSH
36533: CALL 34139 0 2
36537: ST_TO_ADDR
// if result then
36538: LD_VAR 0 2
36542: IFFALSE 36548
// exit ;
36544: POP
36545: POP
36546: GO 36552
// end ;
36548: GO 36517
36550: POP
36551: POP
// end ;
36552: LD_VAR 0 2
36556: RET
// export function FilterByTag ( units , tag ) ; begin
36557: LD_INT 0
36559: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36560: LD_ADDR_VAR 0 3
36564: PUSH
36565: LD_VAR 0 1
36569: PPUSH
36570: LD_INT 120
36572: PUSH
36573: LD_VAR 0 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PPUSH
36582: CALL_OW 72
36586: ST_TO_ADDR
// end ;
36587: LD_VAR 0 3
36591: RET
// export function IsDriver ( un ) ; begin
36592: LD_INT 0
36594: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36595: LD_ADDR_VAR 0 2
36599: PUSH
36600: LD_VAR 0 1
36604: PUSH
36605: LD_INT 55
36607: PUSH
36608: EMPTY
36609: LIST
36610: PPUSH
36611: CALL_OW 69
36615: IN
36616: ST_TO_ADDR
// end ;
36617: LD_VAR 0 2
36621: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36622: LD_INT 0
36624: PPUSH
36625: PPUSH
// list := [ ] ;
36626: LD_ADDR_VAR 0 5
36630: PUSH
36631: EMPTY
36632: ST_TO_ADDR
// case d of 0 :
36633: LD_VAR 0 3
36637: PUSH
36638: LD_INT 0
36640: DOUBLE
36641: EQUAL
36642: IFTRUE 36646
36644: GO 36779
36646: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36647: LD_ADDR_VAR 0 5
36651: PUSH
36652: LD_VAR 0 1
36656: PUSH
36657: LD_INT 4
36659: MINUS
36660: PUSH
36661: LD_VAR 0 2
36665: PUSH
36666: LD_INT 4
36668: MINUS
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: PUSH
36678: LD_VAR 0 1
36682: PUSH
36683: LD_INT 3
36685: MINUS
36686: PUSH
36687: LD_VAR 0 2
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: PUSH
36700: LD_VAR 0 1
36704: PUSH
36705: LD_INT 4
36707: PLUS
36708: PUSH
36709: LD_VAR 0 2
36713: PUSH
36714: LD_INT 4
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: PUSH
36722: LD_VAR 0 1
36726: PUSH
36727: LD_INT 3
36729: PLUS
36730: PUSH
36731: LD_VAR 0 2
36735: PUSH
36736: LD_INT 3
36738: PLUS
36739: PUSH
36740: LD_INT 5
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: LD_VAR 0 1
36752: PUSH
36753: LD_VAR 0 2
36757: PUSH
36758: LD_INT 4
36760: PLUS
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: ST_TO_ADDR
// end ; 1 :
36777: GO 37477
36779: LD_INT 1
36781: DOUBLE
36782: EQUAL
36783: IFTRUE 36787
36785: GO 36920
36787: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36788: LD_ADDR_VAR 0 5
36792: PUSH
36793: LD_VAR 0 1
36797: PUSH
36798: LD_VAR 0 2
36802: PUSH
36803: LD_INT 4
36805: MINUS
36806: PUSH
36807: LD_INT 3
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: PUSH
36815: LD_VAR 0 1
36819: PUSH
36820: LD_INT 3
36822: MINUS
36823: PUSH
36824: LD_VAR 0 2
36828: PUSH
36829: LD_INT 3
36831: MINUS
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: PUSH
36841: LD_VAR 0 1
36845: PUSH
36846: LD_INT 4
36848: MINUS
36849: PUSH
36850: LD_VAR 0 2
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: PUSH
36863: LD_VAR 0 1
36867: PUSH
36868: LD_VAR 0 2
36872: PUSH
36873: LD_INT 3
36875: PLUS
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: PUSH
36885: LD_VAR 0 1
36889: PUSH
36890: LD_INT 4
36892: PLUS
36893: PUSH
36894: LD_VAR 0 2
36898: PUSH
36899: LD_INT 4
36901: PLUS
36902: PUSH
36903: LD_INT 5
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: ST_TO_ADDR
// end ; 2 :
36918: GO 37477
36920: LD_INT 2
36922: DOUBLE
36923: EQUAL
36924: IFTRUE 36928
36926: GO 37057
36928: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36929: LD_ADDR_VAR 0 5
36933: PUSH
36934: LD_VAR 0 1
36938: PUSH
36939: LD_VAR 0 2
36943: PUSH
36944: LD_INT 3
36946: MINUS
36947: PUSH
36948: LD_INT 3
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: PUSH
36956: LD_VAR 0 1
36960: PUSH
36961: LD_INT 4
36963: PLUS
36964: PUSH
36965: LD_VAR 0 2
36969: PUSH
36970: LD_INT 4
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: PUSH
36978: LD_VAR 0 1
36982: PUSH
36983: LD_VAR 0 2
36987: PUSH
36988: LD_INT 4
36990: PLUS
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: LD_VAR 0 1
37004: PUSH
37005: LD_INT 3
37007: MINUS
37008: PUSH
37009: LD_VAR 0 2
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: PUSH
37022: LD_VAR 0 1
37026: PUSH
37027: LD_INT 4
37029: MINUS
37030: PUSH
37031: LD_VAR 0 2
37035: PUSH
37036: LD_INT 4
37038: MINUS
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// end ; 3 :
37055: GO 37477
37057: LD_INT 3
37059: DOUBLE
37060: EQUAL
37061: IFTRUE 37065
37063: GO 37198
37065: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37066: LD_ADDR_VAR 0 5
37070: PUSH
37071: LD_VAR 0 1
37075: PUSH
37076: LD_INT 3
37078: PLUS
37079: PUSH
37080: LD_VAR 0 2
37084: PUSH
37085: LD_INT 4
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: PUSH
37093: LD_VAR 0 1
37097: PUSH
37098: LD_INT 4
37100: PLUS
37101: PUSH
37102: LD_VAR 0 2
37106: PUSH
37107: LD_INT 4
37109: PLUS
37110: PUSH
37111: LD_INT 5
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: PUSH
37119: LD_VAR 0 1
37123: PUSH
37124: LD_INT 4
37126: MINUS
37127: PUSH
37128: LD_VAR 0 2
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: PUSH
37141: LD_VAR 0 1
37145: PUSH
37146: LD_VAR 0 2
37150: PUSH
37151: LD_INT 4
37153: MINUS
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: PUSH
37163: LD_VAR 0 1
37167: PUSH
37168: LD_INT 3
37170: MINUS
37171: PUSH
37172: LD_VAR 0 2
37176: PUSH
37177: LD_INT 3
37179: MINUS
37180: PUSH
37181: LD_INT 2
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// end ; 4 :
37196: GO 37477
37198: LD_INT 4
37200: DOUBLE
37201: EQUAL
37202: IFTRUE 37206
37204: GO 37339
37206: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37207: LD_ADDR_VAR 0 5
37211: PUSH
37212: LD_VAR 0 1
37216: PUSH
37217: LD_VAR 0 2
37221: PUSH
37222: LD_INT 4
37224: PLUS
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: PUSH
37234: LD_VAR 0 1
37238: PUSH
37239: LD_INT 3
37241: PLUS
37242: PUSH
37243: LD_VAR 0 2
37247: PUSH
37248: LD_INT 3
37250: PLUS
37251: PUSH
37252: LD_INT 5
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: PUSH
37260: LD_VAR 0 1
37264: PUSH
37265: LD_INT 4
37267: PLUS
37268: PUSH
37269: LD_VAR 0 2
37273: PUSH
37274: LD_INT 4
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: LD_VAR 0 1
37286: PUSH
37287: LD_VAR 0 2
37291: PUSH
37292: LD_INT 3
37294: MINUS
37295: PUSH
37296: LD_INT 3
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: PUSH
37304: LD_VAR 0 1
37308: PUSH
37309: LD_INT 4
37311: MINUS
37312: PUSH
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 4
37320: MINUS
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// end ; 5 :
37337: GO 37477
37339: LD_INT 5
37341: DOUBLE
37342: EQUAL
37343: IFTRUE 37347
37345: GO 37476
37347: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37348: LD_ADDR_VAR 0 5
37352: PUSH
37353: LD_VAR 0 1
37357: PUSH
37358: LD_INT 4
37360: MINUS
37361: PUSH
37362: LD_VAR 0 2
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: PUSH
37375: LD_VAR 0 1
37379: PUSH
37380: LD_VAR 0 2
37384: PUSH
37385: LD_INT 4
37387: MINUS
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: PUSH
37397: LD_VAR 0 1
37401: PUSH
37402: LD_INT 4
37404: PLUS
37405: PUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_INT 4
37413: PLUS
37414: PUSH
37415: LD_INT 5
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: LD_INT 3
37430: PLUS
37431: PUSH
37432: LD_VAR 0 2
37436: PUSH
37437: LD_INT 4
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: PUSH
37445: LD_VAR 0 1
37449: PUSH
37450: LD_VAR 0 2
37454: PUSH
37455: LD_INT 3
37457: PLUS
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: ST_TO_ADDR
// end ; end ;
37474: GO 37477
37476: POP
// result := list ;
37477: LD_ADDR_VAR 0 4
37481: PUSH
37482: LD_VAR 0 5
37486: ST_TO_ADDR
// end ;
37487: LD_VAR 0 4
37491: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37492: LD_INT 0
37494: PPUSH
37495: PPUSH
37496: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37497: LD_VAR 0 1
37501: NOT
37502: PUSH
37503: LD_VAR 0 2
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 3
37516: PUSH
37517: LD_INT 4
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: IN
37526: NOT
37527: OR
37528: IFFALSE 37532
// exit ;
37530: GO 37615
// tmp := [ ] ;
37532: LD_ADDR_VAR 0 5
37536: PUSH
37537: EMPTY
37538: ST_TO_ADDR
// for i in units do
37539: LD_ADDR_VAR 0 4
37543: PUSH
37544: LD_VAR 0 1
37548: PUSH
37549: FOR_IN
37550: IFFALSE 37584
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37552: LD_ADDR_VAR 0 5
37556: PUSH
37557: LD_VAR 0 5
37561: PPUSH
37562: LD_VAR 0 4
37566: PPUSH
37567: LD_VAR 0 2
37571: PPUSH
37572: CALL_OW 259
37576: PPUSH
37577: CALL 38988 0 2
37581: ST_TO_ADDR
37582: GO 37549
37584: POP
37585: POP
// if not tmp then
37586: LD_VAR 0 5
37590: NOT
37591: IFFALSE 37595
// exit ;
37593: GO 37615
// result := SortListByListDesc ( units , tmp ) ;
37595: LD_ADDR_VAR 0 3
37599: PUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: LD_VAR 0 5
37609: PPUSH
37610: CALL_OW 77
37614: ST_TO_ADDR
// end ;
37615: LD_VAR 0 3
37619: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37620: LD_INT 0
37622: PPUSH
37623: PPUSH
37624: PPUSH
// result := false ;
37625: LD_ADDR_VAR 0 3
37629: PUSH
37630: LD_INT 0
37632: ST_TO_ADDR
// if not building then
37633: LD_VAR 0 2
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 37780
// x := GetX ( building ) ;
37642: LD_ADDR_VAR 0 4
37646: PUSH
37647: LD_VAR 0 2
37651: PPUSH
37652: CALL_OW 250
37656: ST_TO_ADDR
// y := GetY ( building ) ;
37657: LD_ADDR_VAR 0 5
37661: PUSH
37662: LD_VAR 0 2
37666: PPUSH
37667: CALL_OW 251
37671: ST_TO_ADDR
// if not x or not y then
37672: LD_VAR 0 4
37676: NOT
37677: PUSH
37678: LD_VAR 0 5
37682: NOT
37683: OR
37684: IFFALSE 37688
// exit ;
37686: GO 37780
// if GetTaskList ( unit ) then
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL_OW 437
37697: IFFALSE 37780
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37699: LD_STRING e
37701: PUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 437
37711: PUSH
37712: LD_INT 1
37714: ARRAY
37715: PUSH
37716: LD_INT 1
37718: ARRAY
37719: EQUAL
37720: PUSH
37721: LD_VAR 0 4
37725: PUSH
37726: LD_VAR 0 1
37730: PPUSH
37731: CALL_OW 437
37735: PUSH
37736: LD_INT 1
37738: ARRAY
37739: PUSH
37740: LD_INT 2
37742: ARRAY
37743: EQUAL
37744: AND
37745: PUSH
37746: LD_VAR 0 5
37750: PUSH
37751: LD_VAR 0 1
37755: PPUSH
37756: CALL_OW 437
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: PUSH
37765: LD_INT 3
37767: ARRAY
37768: EQUAL
37769: AND
37770: IFFALSE 37780
// result := true end ;
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_INT 1
37779: ST_TO_ADDR
// end ;
37780: LD_VAR 0 3
37784: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37785: LD_INT 0
37787: PPUSH
// result := false ;
37788: LD_ADDR_VAR 0 4
37792: PUSH
37793: LD_INT 0
37795: ST_TO_ADDR
// if GetTaskList ( unit ) then
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 437
37805: IFFALSE 37888
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37807: LD_STRING M
37809: PUSH
37810: LD_VAR 0 1
37814: PPUSH
37815: CALL_OW 437
37819: PUSH
37820: LD_INT 1
37822: ARRAY
37823: PUSH
37824: LD_INT 1
37826: ARRAY
37827: EQUAL
37828: PUSH
37829: LD_VAR 0 2
37833: PUSH
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL_OW 437
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: PUSH
37848: LD_INT 2
37850: ARRAY
37851: EQUAL
37852: AND
37853: PUSH
37854: LD_VAR 0 3
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 437
37868: PUSH
37869: LD_INT 1
37871: ARRAY
37872: PUSH
37873: LD_INT 3
37875: ARRAY
37876: EQUAL
37877: AND
37878: IFFALSE 37888
// result := true ;
37880: LD_ADDR_VAR 0 4
37884: PUSH
37885: LD_INT 1
37887: ST_TO_ADDR
// end ; end ;
37888: LD_VAR 0 4
37892: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37893: LD_INT 0
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
// if not unit or not area then
37899: LD_VAR 0 1
37903: NOT
37904: PUSH
37905: LD_VAR 0 2
37909: NOT
37910: OR
37911: IFFALSE 37915
// exit ;
37913: GO 38091
// tmp := AreaToList ( area , i ) ;
37915: LD_ADDR_VAR 0 6
37919: PUSH
37920: LD_VAR 0 2
37924: PPUSH
37925: LD_VAR 0 5
37929: PPUSH
37930: CALL_OW 517
37934: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37935: LD_ADDR_VAR 0 5
37939: PUSH
37940: DOUBLE
37941: LD_INT 1
37943: DEC
37944: ST_TO_ADDR
37945: LD_VAR 0 6
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PUSH
37954: FOR_TO
37955: IFFALSE 38089
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37957: LD_ADDR_VAR 0 7
37961: PUSH
37962: LD_VAR 0 6
37966: PUSH
37967: LD_INT 1
37969: ARRAY
37970: PUSH
37971: LD_VAR 0 5
37975: ARRAY
37976: PUSH
37977: LD_VAR 0 6
37981: PUSH
37982: LD_INT 2
37984: ARRAY
37985: PUSH
37986: LD_VAR 0 5
37990: ARRAY
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37996: LD_INT 92
37998: PUSH
37999: LD_VAR 0 7
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PUSH
38008: LD_VAR 0 7
38012: PUSH
38013: LD_INT 2
38015: ARRAY
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: PPUSH
38026: CALL_OW 69
38030: PUSH
38031: LD_INT 0
38033: EQUAL
38034: IFFALSE 38087
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38036: LD_VAR 0 1
38040: PPUSH
38041: LD_VAR 0 7
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PPUSH
38050: LD_VAR 0 7
38054: PUSH
38055: LD_INT 2
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 3
38063: PPUSH
38064: CALL_OW 48
// result := IsPlaced ( unit ) ;
38068: LD_ADDR_VAR 0 4
38072: PUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 305
38082: ST_TO_ADDR
// exit ;
38083: POP
38084: POP
38085: GO 38091
// end ; end ;
38087: GO 37954
38089: POP
38090: POP
// end ;
38091: LD_VAR 0 4
38095: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38096: LD_INT 0
38098: PPUSH
38099: PPUSH
38100: PPUSH
// if not side or side > 8 then
38101: LD_VAR 0 1
38105: NOT
38106: PUSH
38107: LD_VAR 0 1
38111: PUSH
38112: LD_INT 8
38114: GREATER
38115: OR
38116: IFFALSE 38120
// exit ;
38118: GO 38307
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38120: LD_ADDR_VAR 0 4
38124: PUSH
38125: LD_INT 22
38127: PUSH
38128: LD_VAR 0 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 21
38139: PUSH
38140: LD_INT 3
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PPUSH
38151: CALL_OW 69
38155: ST_TO_ADDR
// if not tmp then
38156: LD_VAR 0 4
38160: NOT
38161: IFFALSE 38165
// exit ;
38163: GO 38307
// enable_addtolog := true ;
38165: LD_ADDR_OWVAR 81
38169: PUSH
38170: LD_INT 1
38172: ST_TO_ADDR
// AddToLog ( [ ) ;
38173: LD_STRING [
38175: PPUSH
38176: CALL_OW 561
// for i in tmp do
38180: LD_ADDR_VAR 0 3
38184: PUSH
38185: LD_VAR 0 4
38189: PUSH
38190: FOR_IN
38191: IFFALSE 38298
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38193: LD_STRING [
38195: PUSH
38196: LD_VAR 0 3
38200: PPUSH
38201: CALL_OW 266
38205: STR
38206: PUSH
38207: LD_STRING , 
38209: STR
38210: PUSH
38211: LD_VAR 0 3
38215: PPUSH
38216: CALL_OW 250
38220: STR
38221: PUSH
38222: LD_STRING , 
38224: STR
38225: PUSH
38226: LD_VAR 0 3
38230: PPUSH
38231: CALL_OW 251
38235: STR
38236: PUSH
38237: LD_STRING , 
38239: STR
38240: PUSH
38241: LD_VAR 0 3
38245: PPUSH
38246: CALL_OW 254
38250: STR
38251: PUSH
38252: LD_STRING , 
38254: STR
38255: PUSH
38256: LD_VAR 0 3
38260: PPUSH
38261: LD_INT 1
38263: PPUSH
38264: CALL_OW 268
38268: STR
38269: PUSH
38270: LD_STRING , 
38272: STR
38273: PUSH
38274: LD_VAR 0 3
38278: PPUSH
38279: LD_INT 2
38281: PPUSH
38282: CALL_OW 268
38286: STR
38287: PUSH
38288: LD_STRING ],
38290: STR
38291: PPUSH
38292: CALL_OW 561
// end ;
38296: GO 38190
38298: POP
38299: POP
// AddToLog ( ]; ) ;
38300: LD_STRING ];
38302: PPUSH
38303: CALL_OW 561
// end ;
38307: LD_VAR 0 2
38311: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38312: LD_INT 0
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
// if not area or not rate or not max then
38319: LD_VAR 0 1
38323: NOT
38324: PUSH
38325: LD_VAR 0 2
38329: NOT
38330: OR
38331: PUSH
38332: LD_VAR 0 4
38336: NOT
38337: OR
38338: IFFALSE 38342
// exit ;
38340: GO 38531
// while 1 do
38342: LD_INT 1
38344: IFFALSE 38531
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: LD_VAR 0 1
38355: PPUSH
38356: LD_INT 1
38358: PPUSH
38359: CALL_OW 287
38363: PUSH
38364: LD_INT 10
38366: MUL
38367: ST_TO_ADDR
// r := rate / 10 ;
38368: LD_ADDR_VAR 0 7
38372: PUSH
38373: LD_VAR 0 2
38377: PUSH
38378: LD_INT 10
38380: DIVREAL
38381: ST_TO_ADDR
// time := 1 1$00 ;
38382: LD_ADDR_VAR 0 8
38386: PUSH
38387: LD_INT 2100
38389: ST_TO_ADDR
// if amount < min then
38390: LD_VAR 0 9
38394: PUSH
38395: LD_VAR 0 3
38399: LESS
38400: IFFALSE 38418
// r := r * 2 else
38402: LD_ADDR_VAR 0 7
38406: PUSH
38407: LD_VAR 0 7
38411: PUSH
38412: LD_INT 2
38414: MUL
38415: ST_TO_ADDR
38416: GO 38444
// if amount > max then
38418: LD_VAR 0 9
38422: PUSH
38423: LD_VAR 0 4
38427: GREATER
38428: IFFALSE 38444
// r := r / 2 ;
38430: LD_ADDR_VAR 0 7
38434: PUSH
38435: LD_VAR 0 7
38439: PUSH
38440: LD_INT 2
38442: DIVREAL
38443: ST_TO_ADDR
// time := time / r ;
38444: LD_ADDR_VAR 0 8
38448: PUSH
38449: LD_VAR 0 8
38453: PUSH
38454: LD_VAR 0 7
38458: DIVREAL
38459: ST_TO_ADDR
// if time < 0 then
38460: LD_VAR 0 8
38464: PUSH
38465: LD_INT 0
38467: LESS
38468: IFFALSE 38485
// time := time * - 1 ;
38470: LD_ADDR_VAR 0 8
38474: PUSH
38475: LD_VAR 0 8
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: MUL
38484: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38485: LD_VAR 0 8
38489: PUSH
38490: LD_INT 35
38492: PPUSH
38493: LD_INT 875
38495: PPUSH
38496: CALL_OW 12
38500: PLUS
38501: PPUSH
38502: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38506: LD_INT 1
38508: PPUSH
38509: LD_INT 5
38511: PPUSH
38512: CALL_OW 12
38516: PPUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: LD_INT 1
38524: PPUSH
38525: CALL_OW 55
// end ;
38529: GO 38342
// end ;
38531: LD_VAR 0 5
38535: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38536: LD_INT 0
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
// if not turrets or not factories then
38546: LD_VAR 0 1
38550: NOT
38551: PUSH
38552: LD_VAR 0 2
38556: NOT
38557: OR
38558: IFFALSE 38562
// exit ;
38560: GO 38869
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38562: LD_ADDR_VAR 0 10
38566: PUSH
38567: LD_INT 5
38569: PUSH
38570: LD_INT 6
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 4
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 5
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 24
38604: PUSH
38605: LD_INT 25
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 23
38614: PUSH
38615: LD_INT 27
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 42
38628: PUSH
38629: LD_INT 43
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 44
38638: PUSH
38639: LD_INT 46
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 45
38648: PUSH
38649: LD_INT 47
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// result := [ ] ;
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: EMPTY
38672: ST_TO_ADDR
// for i in turrets do
38673: LD_ADDR_VAR 0 4
38677: PUSH
38678: LD_VAR 0 1
38682: PUSH
38683: FOR_IN
38684: IFFALSE 38867
// begin nat := GetNation ( i ) ;
38686: LD_ADDR_VAR 0 7
38690: PUSH
38691: LD_VAR 0 4
38695: PPUSH
38696: CALL_OW 248
38700: ST_TO_ADDR
// weapon := 0 ;
38701: LD_ADDR_VAR 0 8
38705: PUSH
38706: LD_INT 0
38708: ST_TO_ADDR
// if not nat then
38709: LD_VAR 0 7
38713: NOT
38714: IFFALSE 38718
// continue ;
38716: GO 38683
// for j in list [ nat ] do
38718: LD_ADDR_VAR 0 5
38722: PUSH
38723: LD_VAR 0 10
38727: PUSH
38728: LD_VAR 0 7
38732: ARRAY
38733: PUSH
38734: FOR_IN
38735: IFFALSE 38776
// if GetBWeapon ( i ) = j [ 1 ] then
38737: LD_VAR 0 4
38741: PPUSH
38742: CALL_OW 269
38746: PUSH
38747: LD_VAR 0 5
38751: PUSH
38752: LD_INT 1
38754: ARRAY
38755: EQUAL
38756: IFFALSE 38774
// begin weapon := j [ 2 ] ;
38758: LD_ADDR_VAR 0 8
38762: PUSH
38763: LD_VAR 0 5
38767: PUSH
38768: LD_INT 2
38770: ARRAY
38771: ST_TO_ADDR
// break ;
38772: GO 38776
// end ;
38774: GO 38734
38776: POP
38777: POP
// if not weapon then
38778: LD_VAR 0 8
38782: NOT
38783: IFFALSE 38787
// continue ;
38785: GO 38683
// for k in factories do
38787: LD_ADDR_VAR 0 6
38791: PUSH
38792: LD_VAR 0 2
38796: PUSH
38797: FOR_IN
38798: IFFALSE 38863
// begin weapons := AvailableWeaponList ( k ) ;
38800: LD_ADDR_VAR 0 9
38804: PUSH
38805: LD_VAR 0 6
38809: PPUSH
38810: CALL_OW 478
38814: ST_TO_ADDR
// if not weapons then
38815: LD_VAR 0 9
38819: NOT
38820: IFFALSE 38824
// continue ;
38822: GO 38797
// if weapon in weapons then
38824: LD_VAR 0 8
38828: PUSH
38829: LD_VAR 0 9
38833: IN
38834: IFFALSE 38861
// begin result := [ i , weapon ] ;
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_VAR 0 4
38845: PUSH
38846: LD_VAR 0 8
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: ST_TO_ADDR
// exit ;
38855: POP
38856: POP
38857: POP
38858: POP
38859: GO 38869
// end ; end ;
38861: GO 38797
38863: POP
38864: POP
// end ;
38865: GO 38683
38867: POP
38868: POP
// end ;
38869: LD_VAR 0 3
38873: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38874: LD_INT 0
38876: PPUSH
// if not side or side > 8 then
38877: LD_VAR 0 3
38881: NOT
38882: PUSH
38883: LD_VAR 0 3
38887: PUSH
38888: LD_INT 8
38890: GREATER
38891: OR
38892: IFFALSE 38896
// exit ;
38894: GO 38955
// if not range then
38896: LD_VAR 0 4
38900: NOT
38901: IFFALSE 38912
// range := - 12 ;
38903: LD_ADDR_VAR 0 4
38907: PUSH
38908: LD_INT 12
38910: NEG
38911: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38912: LD_VAR 0 1
38916: PPUSH
38917: LD_VAR 0 2
38921: PPUSH
38922: LD_VAR 0 3
38926: PPUSH
38927: LD_VAR 0 4
38931: PPUSH
38932: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38936: LD_VAR 0 1
38940: PPUSH
38941: LD_VAR 0 2
38945: PPUSH
38946: LD_VAR 0 3
38950: PPUSH
38951: CALL_OW 331
// end ;
38955: LD_VAR 0 5
38959: RET
// export function Video ( mode ) ; begin
38960: LD_INT 0
38962: PPUSH
// ingame_video = mode ;
38963: LD_ADDR_OWVAR 52
38967: PUSH
38968: LD_VAR 0 1
38972: ST_TO_ADDR
// interface_hidden = mode ;
38973: LD_ADDR_OWVAR 54
38977: PUSH
38978: LD_VAR 0 1
38982: ST_TO_ADDR
// end ;
38983: LD_VAR 0 2
38987: RET
// export function Join ( array , element ) ; begin
38988: LD_INT 0
38990: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38991: LD_ADDR_VAR 0 3
38995: PUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: LD_VAR 0 1
39005: PUSH
39006: LD_INT 1
39008: PLUS
39009: PPUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: CALL_OW 1
39019: ST_TO_ADDR
// end ;
39020: LD_VAR 0 3
39024: RET
// export function JoinUnion ( array , element ) ; begin
39025: LD_INT 0
39027: PPUSH
// result := array union element ;
39028: LD_ADDR_VAR 0 3
39032: PUSH
39033: LD_VAR 0 1
39037: PUSH
39038: LD_VAR 0 2
39042: UNION
39043: ST_TO_ADDR
// end ;
39044: LD_VAR 0 3
39048: RET
// export function GetBehemoths ( side ) ; begin
39049: LD_INT 0
39051: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39052: LD_ADDR_VAR 0 2
39056: PUSH
39057: LD_INT 22
39059: PUSH
39060: LD_VAR 0 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 31
39071: PUSH
39072: LD_INT 25
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PPUSH
39083: CALL_OW 69
39087: ST_TO_ADDR
// end ;
39088: LD_VAR 0 2
39092: RET
// export function Shuffle ( array ) ; var i , index ; begin
39093: LD_INT 0
39095: PPUSH
39096: PPUSH
39097: PPUSH
// result := [ ] ;
39098: LD_ADDR_VAR 0 2
39102: PUSH
39103: EMPTY
39104: ST_TO_ADDR
// if not array then
39105: LD_VAR 0 1
39109: NOT
39110: IFFALSE 39114
// exit ;
39112: GO 39213
// Randomize ;
39114: CALL_OW 10
// for i = array downto 1 do
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: DOUBLE
39124: LD_VAR 0 1
39128: INC
39129: ST_TO_ADDR
39130: LD_INT 1
39132: PUSH
39133: FOR_DOWNTO
39134: IFFALSE 39211
// begin index := rand ( 1 , array ) ;
39136: LD_ADDR_VAR 0 4
39140: PUSH
39141: LD_INT 1
39143: PPUSH
39144: LD_VAR 0 1
39148: PPUSH
39149: CALL_OW 12
39153: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39154: LD_ADDR_VAR 0 2
39158: PUSH
39159: LD_VAR 0 2
39163: PPUSH
39164: LD_VAR 0 2
39168: PUSH
39169: LD_INT 1
39171: PLUS
39172: PPUSH
39173: LD_VAR 0 1
39177: PUSH
39178: LD_VAR 0 4
39182: ARRAY
39183: PPUSH
39184: CALL_OW 2
39188: ST_TO_ADDR
// array := Delete ( array , index ) ;
39189: LD_ADDR_VAR 0 1
39193: PUSH
39194: LD_VAR 0 1
39198: PPUSH
39199: LD_VAR 0 4
39203: PPUSH
39204: CALL_OW 3
39208: ST_TO_ADDR
// end ;
39209: GO 39133
39211: POP
39212: POP
// end ;
39213: LD_VAR 0 2
39217: RET
// export function GetBaseMaterials ( base ) ; begin
39218: LD_INT 0
39220: PPUSH
// result := [ 0 , 0 , 0 ] ;
39221: LD_ADDR_VAR 0 2
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: ST_TO_ADDR
// if not base then
39240: LD_VAR 0 1
39244: NOT
39245: IFFALSE 39249
// exit ;
39247: GO 39298
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39249: LD_ADDR_VAR 0 2
39253: PUSH
39254: LD_VAR 0 1
39258: PPUSH
39259: LD_INT 1
39261: PPUSH
39262: CALL_OW 275
39266: PUSH
39267: LD_VAR 0 1
39271: PPUSH
39272: LD_INT 2
39274: PPUSH
39275: CALL_OW 275
39279: PUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: LD_INT 3
39287: PPUSH
39288: CALL_OW 275
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
// end ;
39298: LD_VAR 0 2
39302: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39303: LD_INT 0
39305: PPUSH
39306: PPUSH
// result := array ;
39307: LD_ADDR_VAR 0 3
39311: PUSH
39312: LD_VAR 0 1
39316: ST_TO_ADDR
// if size >= result then
39317: LD_VAR 0 2
39321: PUSH
39322: LD_VAR 0 3
39326: GREATEREQUAL
39327: IFFALSE 39331
// exit ;
39329: GO 39381
// if size then
39331: LD_VAR 0 2
39335: IFFALSE 39381
// for i := array downto size do
39337: LD_ADDR_VAR 0 4
39341: PUSH
39342: DOUBLE
39343: LD_VAR 0 1
39347: INC
39348: ST_TO_ADDR
39349: LD_VAR 0 2
39353: PUSH
39354: FOR_DOWNTO
39355: IFFALSE 39379
// result := Delete ( result , result ) ;
39357: LD_ADDR_VAR 0 3
39361: PUSH
39362: LD_VAR 0 3
39366: PPUSH
39367: LD_VAR 0 3
39371: PPUSH
39372: CALL_OW 3
39376: ST_TO_ADDR
39377: GO 39354
39379: POP
39380: POP
// end ;
39381: LD_VAR 0 3
39385: RET
// export function ComExit ( unit ) ; var tmp ; begin
39386: LD_INT 0
39388: PPUSH
39389: PPUSH
// if not IsInUnit ( unit ) then
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 310
39399: NOT
39400: IFFALSE 39404
// exit ;
39402: GO 39464
// tmp := IsInUnit ( unit ) ;
39404: LD_ADDR_VAR 0 3
39408: PUSH
39409: LD_VAR 0 1
39413: PPUSH
39414: CALL_OW 310
39418: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39419: LD_VAR 0 3
39423: PPUSH
39424: CALL_OW 247
39428: PUSH
39429: LD_INT 2
39431: EQUAL
39432: IFFALSE 39445
// ComExitVehicle ( unit ) else
39434: LD_VAR 0 1
39438: PPUSH
39439: CALL_OW 121
39443: GO 39454
// ComExitBuilding ( unit ) ;
39445: LD_VAR 0 1
39449: PPUSH
39450: CALL_OW 122
// result := tmp ;
39454: LD_ADDR_VAR 0 2
39458: PUSH
39459: LD_VAR 0 3
39463: ST_TO_ADDR
// end ;
39464: LD_VAR 0 2
39468: RET
// export function ComExitAll ( units ) ; var i ; begin
39469: LD_INT 0
39471: PPUSH
39472: PPUSH
// if not units then
39473: LD_VAR 0 1
39477: NOT
39478: IFFALSE 39482
// exit ;
39480: GO 39508
// for i in units do
39482: LD_ADDR_VAR 0 3
39486: PUSH
39487: LD_VAR 0 1
39491: PUSH
39492: FOR_IN
39493: IFFALSE 39506
// ComExit ( i ) ;
39495: LD_VAR 0 3
39499: PPUSH
39500: CALL 39386 0 1
39504: GO 39492
39506: POP
39507: POP
// end ;
39508: LD_VAR 0 2
39512: RET
// export function ResetHc ; begin
39513: LD_INT 0
39515: PPUSH
// InitHc ;
39516: CALL_OW 19
// hc_importance := 0 ;
39520: LD_ADDR_OWVAR 32
39524: PUSH
39525: LD_INT 0
39527: ST_TO_ADDR
// end ;
39528: LD_VAR 0 1
39532: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39533: LD_INT 0
39535: PPUSH
39536: PPUSH
39537: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39538: LD_ADDR_VAR 0 6
39542: PUSH
39543: LD_VAR 0 1
39547: PUSH
39548: LD_VAR 0 3
39552: PLUS
39553: PUSH
39554: LD_INT 2
39556: DIV
39557: ST_TO_ADDR
// if _x < 0 then
39558: LD_VAR 0 6
39562: PUSH
39563: LD_INT 0
39565: LESS
39566: IFFALSE 39583
// _x := _x * - 1 ;
39568: LD_ADDR_VAR 0 6
39572: PUSH
39573: LD_VAR 0 6
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: MUL
39582: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39583: LD_ADDR_VAR 0 7
39587: PUSH
39588: LD_VAR 0 2
39592: PUSH
39593: LD_VAR 0 4
39597: PLUS
39598: PUSH
39599: LD_INT 2
39601: DIV
39602: ST_TO_ADDR
// if _y < 0 then
39603: LD_VAR 0 7
39607: PUSH
39608: LD_INT 0
39610: LESS
39611: IFFALSE 39628
// _y := _y * - 1 ;
39613: LD_ADDR_VAR 0 7
39617: PUSH
39618: LD_VAR 0 7
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: MUL
39627: ST_TO_ADDR
// result := [ _x , _y ] ;
39628: LD_ADDR_VAR 0 5
39632: PUSH
39633: LD_VAR 0 6
39637: PUSH
39638: LD_VAR 0 7
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: ST_TO_ADDR
// end ;
39647: LD_VAR 0 5
39651: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39652: LD_INT 0
39654: PPUSH
39655: PPUSH
39656: PPUSH
39657: PPUSH
// task := GetTaskList ( unit ) ;
39658: LD_ADDR_VAR 0 7
39662: PUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 437
39672: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39673: LD_VAR 0 7
39677: NOT
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: LD_VAR 0 2
39688: PPUSH
39689: CALL_OW 308
39693: NOT
39694: AND
39695: IFFALSE 39699
// exit ;
39697: GO 39817
// if IsInArea ( unit , area ) then
39699: LD_VAR 0 1
39703: PPUSH
39704: LD_VAR 0 2
39708: PPUSH
39709: CALL_OW 308
39713: IFFALSE 39731
// begin ComMoveToArea ( unit , goAway ) ;
39715: LD_VAR 0 1
39719: PPUSH
39720: LD_VAR 0 3
39724: PPUSH
39725: CALL_OW 113
// exit ;
39729: GO 39817
// end ; if task [ 1 ] [ 1 ] <> M then
39731: LD_VAR 0 7
39735: PUSH
39736: LD_INT 1
39738: ARRAY
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PUSH
39744: LD_STRING M
39746: NONEQUAL
39747: IFFALSE 39751
// exit ;
39749: GO 39817
// x := task [ 1 ] [ 2 ] ;
39751: LD_ADDR_VAR 0 5
39755: PUSH
39756: LD_VAR 0 7
39760: PUSH
39761: LD_INT 1
39763: ARRAY
39764: PUSH
39765: LD_INT 2
39767: ARRAY
39768: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39769: LD_ADDR_VAR 0 6
39773: PUSH
39774: LD_VAR 0 7
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PUSH
39783: LD_INT 3
39785: ARRAY
39786: ST_TO_ADDR
// if InArea ( x , y , area ) then
39787: LD_VAR 0 5
39791: PPUSH
39792: LD_VAR 0 6
39796: PPUSH
39797: LD_VAR 0 2
39801: PPUSH
39802: CALL_OW 309
39806: IFFALSE 39817
// ComStop ( unit ) ;
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 141
// end ;
39817: LD_VAR 0 4
39821: RET
// export function Abs ( value ) ; begin
39822: LD_INT 0
39824: PPUSH
// result := value ;
39825: LD_ADDR_VAR 0 2
39829: PUSH
39830: LD_VAR 0 1
39834: ST_TO_ADDR
// if value < 0 then
39835: LD_VAR 0 1
39839: PUSH
39840: LD_INT 0
39842: LESS
39843: IFFALSE 39860
// result := value * - 1 ;
39845: LD_ADDR_VAR 0 2
39849: PUSH
39850: LD_VAR 0 1
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: MUL
39859: ST_TO_ADDR
// end ;
39860: LD_VAR 0 2
39864: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39865: LD_INT 0
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
// if not unit or not building then
39875: LD_VAR 0 1
39879: NOT
39880: PUSH
39881: LD_VAR 0 2
39885: NOT
39886: OR
39887: IFFALSE 39891
// exit ;
39889: GO 40117
// x := GetX ( building ) ;
39891: LD_ADDR_VAR 0 4
39895: PUSH
39896: LD_VAR 0 2
39900: PPUSH
39901: CALL_OW 250
39905: ST_TO_ADDR
// y := GetY ( building ) ;
39906: LD_ADDR_VAR 0 6
39910: PUSH
39911: LD_VAR 0 2
39915: PPUSH
39916: CALL_OW 251
39920: ST_TO_ADDR
// d := GetDir ( building ) ;
39921: LD_ADDR_VAR 0 8
39925: PUSH
39926: LD_VAR 0 2
39930: PPUSH
39931: CALL_OW 254
39935: ST_TO_ADDR
// r := 4 ;
39936: LD_ADDR_VAR 0 9
39940: PUSH
39941: LD_INT 4
39943: ST_TO_ADDR
// for i := 1 to 5 do
39944: LD_ADDR_VAR 0 10
39948: PUSH
39949: DOUBLE
39950: LD_INT 1
39952: DEC
39953: ST_TO_ADDR
39954: LD_INT 5
39956: PUSH
39957: FOR_TO
39958: IFFALSE 40115
// begin _x := ShiftX ( x , d , r + i ) ;
39960: LD_ADDR_VAR 0 5
39964: PUSH
39965: LD_VAR 0 4
39969: PPUSH
39970: LD_VAR 0 8
39974: PPUSH
39975: LD_VAR 0 9
39979: PUSH
39980: LD_VAR 0 10
39984: PLUS
39985: PPUSH
39986: CALL_OW 272
39990: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39991: LD_ADDR_VAR 0 7
39995: PUSH
39996: LD_VAR 0 6
40000: PPUSH
40001: LD_VAR 0 8
40005: PPUSH
40006: LD_VAR 0 9
40010: PUSH
40011: LD_VAR 0 10
40015: PLUS
40016: PPUSH
40017: CALL_OW 273
40021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40022: LD_VAR 0 5
40026: PPUSH
40027: LD_VAR 0 7
40031: PPUSH
40032: CALL_OW 488
40036: PUSH
40037: LD_VAR 0 5
40041: PPUSH
40042: LD_VAR 0 7
40046: PPUSH
40047: CALL_OW 428
40051: PPUSH
40052: CALL_OW 247
40056: PUSH
40057: LD_INT 3
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: IN
40067: NOT
40068: AND
40069: IFFALSE 40113
// begin ComMoveXY ( unit , _x , _y ) ;
40071: LD_VAR 0 1
40075: PPUSH
40076: LD_VAR 0 5
40080: PPUSH
40081: LD_VAR 0 7
40085: PPUSH
40086: CALL_OW 111
// result := [ _x , _y ] ;
40090: LD_ADDR_VAR 0 3
40094: PUSH
40095: LD_VAR 0 5
40099: PUSH
40100: LD_VAR 0 7
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: ST_TO_ADDR
// exit ;
40109: POP
40110: POP
40111: GO 40117
// end ; end ;
40113: GO 39957
40115: POP
40116: POP
// end ;
40117: LD_VAR 0 3
40121: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40122: LD_INT 0
40124: PPUSH
40125: PPUSH
40126: PPUSH
// result := 0 ;
40127: LD_ADDR_VAR 0 3
40131: PUSH
40132: LD_INT 0
40134: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40135: LD_VAR 0 1
40139: PUSH
40140: LD_INT 0
40142: LESS
40143: PUSH
40144: LD_VAR 0 1
40148: PUSH
40149: LD_INT 8
40151: GREATER
40152: OR
40153: PUSH
40154: LD_VAR 0 2
40158: PUSH
40159: LD_INT 0
40161: LESS
40162: OR
40163: PUSH
40164: LD_VAR 0 2
40168: PUSH
40169: LD_INT 8
40171: GREATER
40172: OR
40173: IFFALSE 40177
// exit ;
40175: GO 40252
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: LD_INT 22
40184: PUSH
40185: LD_VAR 0 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PPUSH
40194: CALL_OW 69
40198: PUSH
40199: FOR_IN
40200: IFFALSE 40250
// begin un := UnitShoot ( i ) ;
40202: LD_ADDR_VAR 0 5
40206: PUSH
40207: LD_VAR 0 4
40211: PPUSH
40212: CALL_OW 504
40216: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40217: LD_VAR 0 5
40221: PPUSH
40222: CALL_OW 255
40226: PUSH
40227: LD_VAR 0 1
40231: EQUAL
40232: IFFALSE 40248
// begin result := un ;
40234: LD_ADDR_VAR 0 3
40238: PUSH
40239: LD_VAR 0 5
40243: ST_TO_ADDR
// exit ;
40244: POP
40245: POP
40246: GO 40252
// end ; end ;
40248: GO 40199
40250: POP
40251: POP
// end ;
40252: LD_VAR 0 3
40256: RET
// export function GetCargoBay ( units ) ; begin
40257: LD_INT 0
40259: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40260: LD_ADDR_VAR 0 2
40264: PUSH
40265: LD_VAR 0 1
40269: PPUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 34
40275: PUSH
40276: LD_INT 12
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 34
40285: PUSH
40286: LD_INT 51
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 34
40295: PUSH
40296: LD_INT 32
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 34
40305: PUSH
40306: LD_INT 89
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: PPUSH
40320: CALL_OW 72
40324: ST_TO_ADDR
// end ;
40325: LD_VAR 0 2
40329: RET
// export function Negate ( value ) ; begin
40330: LD_INT 0
40332: PPUSH
// result := not value ;
40333: LD_ADDR_VAR 0 2
40337: PUSH
40338: LD_VAR 0 1
40342: NOT
40343: ST_TO_ADDR
// end ;
40344: LD_VAR 0 2
40348: RET
// export function Inc ( value ) ; begin
40349: LD_INT 0
40351: PPUSH
// result := value + 1 ;
40352: LD_ADDR_VAR 0 2
40356: PUSH
40357: LD_VAR 0 1
40361: PUSH
40362: LD_INT 1
40364: PLUS
40365: ST_TO_ADDR
// end ;
40366: LD_VAR 0 2
40370: RET
// export function Dec ( value ) ; begin
40371: LD_INT 0
40373: PPUSH
// result := value - 1 ;
40374: LD_ADDR_VAR 0 2
40378: PUSH
40379: LD_VAR 0 1
40383: PUSH
40384: LD_INT 1
40386: MINUS
40387: ST_TO_ADDR
// end ;
40388: LD_VAR 0 2
40392: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40393: LD_INT 0
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_VAR 0 2
40412: PPUSH
40413: CALL_OW 488
40417: NOT
40418: PUSH
40419: LD_VAR 0 3
40423: PPUSH
40424: LD_VAR 0 4
40428: PPUSH
40429: CALL_OW 488
40433: NOT
40434: OR
40435: IFFALSE 40448
// begin result := - 1 ;
40437: LD_ADDR_VAR 0 5
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: ST_TO_ADDR
// exit ;
40446: GO 40683
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40448: LD_ADDR_VAR 0 12
40452: PUSH
40453: LD_VAR 0 1
40457: PPUSH
40458: LD_VAR 0 2
40462: PPUSH
40463: LD_VAR 0 3
40467: PPUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: CALL 39533 0 4
40477: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40478: LD_ADDR_VAR 0 11
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: LD_VAR 0 2
40492: PPUSH
40493: LD_VAR 0 12
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: PPUSH
40502: LD_VAR 0 12
40506: PUSH
40507: LD_INT 2
40509: ARRAY
40510: PPUSH
40511: CALL_OW 298
40515: ST_TO_ADDR
// distance := 9999 ;
40516: LD_ADDR_VAR 0 10
40520: PUSH
40521: LD_INT 9999
40523: ST_TO_ADDR
// for i := 0 to 5 do
40524: LD_ADDR_VAR 0 6
40528: PUSH
40529: DOUBLE
40530: LD_INT 0
40532: DEC
40533: ST_TO_ADDR
40534: LD_INT 5
40536: PUSH
40537: FOR_TO
40538: IFFALSE 40681
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40540: LD_ADDR_VAR 0 7
40544: PUSH
40545: LD_VAR 0 1
40549: PPUSH
40550: LD_VAR 0 6
40554: PPUSH
40555: LD_VAR 0 11
40559: PPUSH
40560: CALL_OW 272
40564: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40565: LD_ADDR_VAR 0 8
40569: PUSH
40570: LD_VAR 0 2
40574: PPUSH
40575: LD_VAR 0 6
40579: PPUSH
40580: LD_VAR 0 11
40584: PPUSH
40585: CALL_OW 273
40589: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40590: LD_VAR 0 7
40594: PPUSH
40595: LD_VAR 0 8
40599: PPUSH
40600: CALL_OW 488
40604: NOT
40605: IFFALSE 40609
// continue ;
40607: GO 40537
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40609: LD_ADDR_VAR 0 9
40613: PUSH
40614: LD_VAR 0 12
40618: PUSH
40619: LD_INT 1
40621: ARRAY
40622: PPUSH
40623: LD_VAR 0 12
40627: PUSH
40628: LD_INT 2
40630: ARRAY
40631: PPUSH
40632: LD_VAR 0 7
40636: PPUSH
40637: LD_VAR 0 8
40641: PPUSH
40642: CALL_OW 298
40646: ST_TO_ADDR
// if tmp < distance then
40647: LD_VAR 0 9
40651: PUSH
40652: LD_VAR 0 10
40656: LESS
40657: IFFALSE 40679
// begin result := i ;
40659: LD_ADDR_VAR 0 5
40663: PUSH
40664: LD_VAR 0 6
40668: ST_TO_ADDR
// distance := tmp ;
40669: LD_ADDR_VAR 0 10
40673: PUSH
40674: LD_VAR 0 9
40678: ST_TO_ADDR
// end ; end ;
40679: GO 40537
40681: POP
40682: POP
// end ;
40683: LD_VAR 0 5
40687: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40688: LD_INT 0
40690: PPUSH
40691: PPUSH
// if not driver or not IsInUnit ( driver ) then
40692: LD_VAR 0 1
40696: NOT
40697: PUSH
40698: LD_VAR 0 1
40702: PPUSH
40703: CALL_OW 310
40707: NOT
40708: OR
40709: IFFALSE 40713
// exit ;
40711: GO 40803
// vehicle := IsInUnit ( driver ) ;
40713: LD_ADDR_VAR 0 3
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 310
40727: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_STRING \
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: PUSH
40763: LD_STRING E
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_VAR 0 3
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PPUSH
40799: CALL_OW 446
// end ;
40803: LD_VAR 0 2
40807: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40808: LD_INT 0
40810: PPUSH
40811: PPUSH
// if not driver or not IsInUnit ( driver ) then
40812: LD_VAR 0 1
40816: NOT
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 310
40827: NOT
40828: OR
40829: IFFALSE 40833
// exit ;
40831: GO 40923
// vehicle := IsInUnit ( driver ) ;
40833: LD_ADDR_VAR 0 3
40837: PUSH
40838: LD_VAR 0 1
40842: PPUSH
40843: CALL_OW 310
40847: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40848: LD_VAR 0 1
40852: PPUSH
40853: LD_STRING \
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: PUSH
40883: LD_STRING E
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_VAR 0 3
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PPUSH
40919: CALL_OW 447
// end ;
40923: LD_VAR 0 2
40927: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40928: LD_INT 0
40930: PPUSH
40931: PPUSH
40932: PPUSH
// tmp := [ ] ;
40933: LD_ADDR_VAR 0 5
40937: PUSH
40938: EMPTY
40939: ST_TO_ADDR
// for i in units do
40940: LD_ADDR_VAR 0 4
40944: PUSH
40945: LD_VAR 0 1
40949: PUSH
40950: FOR_IN
40951: IFFALSE 40989
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40953: LD_ADDR_VAR 0 5
40957: PUSH
40958: LD_VAR 0 5
40962: PPUSH
40963: LD_VAR 0 5
40967: PUSH
40968: LD_INT 1
40970: PLUS
40971: PPUSH
40972: LD_VAR 0 4
40976: PPUSH
40977: CALL_OW 256
40981: PPUSH
40982: CALL_OW 2
40986: ST_TO_ADDR
40987: GO 40950
40989: POP
40990: POP
// if not tmp then
40991: LD_VAR 0 5
40995: NOT
40996: IFFALSE 41000
// exit ;
40998: GO 41048
// if asc then
41000: LD_VAR 0 2
41004: IFFALSE 41028
// result := SortListByListAsc ( units , tmp ) else
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: LD_VAR 0 5
41020: PPUSH
41021: CALL_OW 76
41025: ST_TO_ADDR
41026: GO 41048
// result := SortListByListDesc ( units , tmp ) ;
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_VAR 0 1
41037: PPUSH
41038: LD_VAR 0 5
41042: PPUSH
41043: CALL_OW 77
41047: ST_TO_ADDR
// end ;
41048: LD_VAR 0 3
41052: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41053: LD_INT 0
41055: PPUSH
41056: PPUSH
// task := GetTaskList ( mech ) ;
41057: LD_ADDR_VAR 0 4
41061: PUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 437
41071: ST_TO_ADDR
// if not task then
41072: LD_VAR 0 4
41076: NOT
41077: IFFALSE 41081
// exit ;
41079: GO 41123
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41081: LD_ADDR_VAR 0 3
41085: PUSH
41086: LD_VAR 0 4
41090: PUSH
41091: LD_INT 1
41093: ARRAY
41094: PUSH
41095: LD_INT 1
41097: ARRAY
41098: PUSH
41099: LD_STRING r
41101: EQUAL
41102: PUSH
41103: LD_VAR 0 4
41107: PUSH
41108: LD_INT 1
41110: ARRAY
41111: PUSH
41112: LD_INT 4
41114: ARRAY
41115: PUSH
41116: LD_VAR 0 2
41120: EQUAL
41121: AND
41122: ST_TO_ADDR
// end ;
41123: LD_VAR 0 3
41127: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41128: LD_INT 0
41130: PPUSH
// SetDir ( unit , d ) ;
41131: LD_VAR 0 1
41135: PPUSH
41136: LD_VAR 0 4
41140: PPUSH
41141: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41145: LD_VAR 0 1
41149: PPUSH
41150: LD_VAR 0 2
41154: PPUSH
41155: LD_VAR 0 3
41159: PPUSH
41160: LD_VAR 0 5
41164: PPUSH
41165: CALL_OW 48
// end ;
41169: LD_VAR 0 6
41173: RET
// export function ToNaturalNumber ( number ) ; begin
41174: LD_INT 0
41176: PPUSH
// result := number div 1 ;
41177: LD_ADDR_VAR 0 2
41181: PUSH
41182: LD_VAR 0 1
41186: PUSH
41187: LD_INT 1
41189: DIV
41190: ST_TO_ADDR
// if number < 0 then
41191: LD_VAR 0 1
41195: PUSH
41196: LD_INT 0
41198: LESS
41199: IFFALSE 41209
// result := 0 ;
41201: LD_ADDR_VAR 0 2
41205: PUSH
41206: LD_INT 0
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 2
41213: RET
// export function SortByClass ( units , class ) ; var un ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
// if not units or not class then
41218: LD_VAR 0 1
41222: NOT
41223: PUSH
41224: LD_VAR 0 2
41228: NOT
41229: OR
41230: IFFALSE 41234
// exit ;
41232: GO 41329
// result := [ ] ;
41234: LD_ADDR_VAR 0 3
41238: PUSH
41239: EMPTY
41240: ST_TO_ADDR
// for un in units do
41241: LD_ADDR_VAR 0 4
41245: PUSH
41246: LD_VAR 0 1
41250: PUSH
41251: FOR_IN
41252: IFFALSE 41327
// if GetClass ( un ) = class then
41254: LD_VAR 0 4
41258: PPUSH
41259: CALL_OW 257
41263: PUSH
41264: LD_VAR 0 2
41268: EQUAL
41269: IFFALSE 41296
// result := Insert ( result , 1 , un ) else
41271: LD_ADDR_VAR 0 3
41275: PUSH
41276: LD_VAR 0 3
41280: PPUSH
41281: LD_INT 1
41283: PPUSH
41284: LD_VAR 0 4
41288: PPUSH
41289: CALL_OW 2
41293: ST_TO_ADDR
41294: GO 41325
// result := Replace ( result , result + 1 , un ) ;
41296: LD_ADDR_VAR 0 3
41300: PUSH
41301: LD_VAR 0 3
41305: PPUSH
41306: LD_VAR 0 3
41310: PUSH
41311: LD_INT 1
41313: PLUS
41314: PPUSH
41315: LD_VAR 0 4
41319: PPUSH
41320: CALL_OW 1
41324: ST_TO_ADDR
41325: GO 41251
41327: POP
41328: POP
// end ;
41329: LD_VAR 0 3
41333: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41334: LD_INT 0
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
// result := [ ] ;
41343: LD_ADDR_VAR 0 4
41347: PUSH
41348: EMPTY
41349: ST_TO_ADDR
// if x - r < 0 then
41350: LD_VAR 0 1
41354: PUSH
41355: LD_VAR 0 3
41359: MINUS
41360: PUSH
41361: LD_INT 0
41363: LESS
41364: IFFALSE 41376
// min_x := 0 else
41366: LD_ADDR_VAR 0 8
41370: PUSH
41371: LD_INT 0
41373: ST_TO_ADDR
41374: GO 41392
// min_x := x - r ;
41376: LD_ADDR_VAR 0 8
41380: PUSH
41381: LD_VAR 0 1
41385: PUSH
41386: LD_VAR 0 3
41390: MINUS
41391: ST_TO_ADDR
// if y - r < 0 then
41392: LD_VAR 0 2
41396: PUSH
41397: LD_VAR 0 3
41401: MINUS
41402: PUSH
41403: LD_INT 0
41405: LESS
41406: IFFALSE 41418
// min_y := 0 else
41408: LD_ADDR_VAR 0 7
41412: PUSH
41413: LD_INT 0
41415: ST_TO_ADDR
41416: GO 41434
// min_y := y - r ;
41418: LD_ADDR_VAR 0 7
41422: PUSH
41423: LD_VAR 0 2
41427: PUSH
41428: LD_VAR 0 3
41432: MINUS
41433: ST_TO_ADDR
// max_x := x + r ;
41434: LD_ADDR_VAR 0 9
41438: PUSH
41439: LD_VAR 0 1
41443: PUSH
41444: LD_VAR 0 3
41448: PLUS
41449: ST_TO_ADDR
// max_y := y + r ;
41450: LD_ADDR_VAR 0 10
41454: PUSH
41455: LD_VAR 0 2
41459: PUSH
41460: LD_VAR 0 3
41464: PLUS
41465: ST_TO_ADDR
// for _x = min_x to max_x do
41466: LD_ADDR_VAR 0 5
41470: PUSH
41471: DOUBLE
41472: LD_VAR 0 8
41476: DEC
41477: ST_TO_ADDR
41478: LD_VAR 0 9
41482: PUSH
41483: FOR_TO
41484: IFFALSE 41585
// for _y = min_y to max_y do
41486: LD_ADDR_VAR 0 6
41490: PUSH
41491: DOUBLE
41492: LD_VAR 0 7
41496: DEC
41497: ST_TO_ADDR
41498: LD_VAR 0 10
41502: PUSH
41503: FOR_TO
41504: IFFALSE 41581
// begin if not ValidHex ( _x , _y ) then
41506: LD_VAR 0 5
41510: PPUSH
41511: LD_VAR 0 6
41515: PPUSH
41516: CALL_OW 488
41520: NOT
41521: IFFALSE 41525
// continue ;
41523: GO 41503
// if GetResourceTypeXY ( _x , _y ) then
41525: LD_VAR 0 5
41529: PPUSH
41530: LD_VAR 0 6
41534: PPUSH
41535: CALL_OW 283
41539: IFFALSE 41579
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41541: LD_ADDR_VAR 0 4
41545: PUSH
41546: LD_VAR 0 4
41550: PPUSH
41551: LD_VAR 0 4
41555: PUSH
41556: LD_INT 1
41558: PLUS
41559: PPUSH
41560: LD_VAR 0 5
41564: PUSH
41565: LD_VAR 0 6
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PPUSH
41574: CALL_OW 1
41578: ST_TO_ADDR
// end ;
41579: GO 41503
41581: POP
41582: POP
41583: GO 41483
41585: POP
41586: POP
// end ;
41587: LD_VAR 0 4
41591: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41592: LD_INT 0
41594: PPUSH
41595: PPUSH
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
// if not units then
41602: LD_VAR 0 1
41606: NOT
41607: IFFALSE 41611
// exit ;
41609: GO 42135
// result := UnitFilter ( units , [ f_ok ] ) ;
41611: LD_ADDR_VAR 0 3
41615: PUSH
41616: LD_VAR 0 1
41620: PPUSH
41621: LD_INT 50
41623: PUSH
41624: EMPTY
41625: LIST
41626: PPUSH
41627: CALL_OW 72
41631: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41632: LD_ADDR_VAR 0 8
41636: PUSH
41637: LD_VAR 0 1
41641: PUSH
41642: LD_INT 1
41644: ARRAY
41645: PPUSH
41646: CALL_OW 255
41650: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41651: LD_ADDR_VAR 0 10
41655: PUSH
41656: LD_INT 29
41658: PUSH
41659: LD_INT 91
41661: PUSH
41662: LD_INT 49
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: ST_TO_ADDR
// if not result then
41670: LD_VAR 0 3
41674: NOT
41675: IFFALSE 41679
// exit ;
41677: GO 42135
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41679: LD_ADDR_VAR 0 5
41683: PUSH
41684: LD_INT 81
41686: PUSH
41687: LD_VAR 0 8
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PPUSH
41696: CALL_OW 69
41700: ST_TO_ADDR
// for i in result do
41701: LD_ADDR_VAR 0 4
41705: PUSH
41706: LD_VAR 0 3
41710: PUSH
41711: FOR_IN
41712: IFFALSE 42133
// begin tag := GetTag ( i ) + 1 ;
41714: LD_ADDR_VAR 0 9
41718: PUSH
41719: LD_VAR 0 4
41723: PPUSH
41724: CALL_OW 110
41728: PUSH
41729: LD_INT 1
41731: PLUS
41732: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41733: LD_ADDR_VAR 0 7
41737: PUSH
41738: LD_VAR 0 4
41742: PPUSH
41743: CALL_OW 250
41747: PPUSH
41748: LD_VAR 0 4
41752: PPUSH
41753: CALL_OW 251
41757: PPUSH
41758: LD_INT 6
41760: PPUSH
41761: CALL 41334 0 3
41765: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41766: LD_VAR 0 4
41770: PPUSH
41771: CALL_OW 247
41775: PUSH
41776: LD_INT 2
41778: EQUAL
41779: PUSH
41780: LD_VAR 0 7
41784: AND
41785: PUSH
41786: LD_VAR 0 4
41790: PPUSH
41791: CALL_OW 264
41795: PUSH
41796: LD_VAR 0 10
41800: IN
41801: NOT
41802: AND
41803: IFFALSE 41842
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41805: LD_VAR 0 4
41809: PPUSH
41810: LD_VAR 0 7
41814: PUSH
41815: LD_INT 1
41817: ARRAY
41818: PUSH
41819: LD_INT 1
41821: ARRAY
41822: PPUSH
41823: LD_VAR 0 7
41827: PUSH
41828: LD_INT 1
41830: ARRAY
41831: PUSH
41832: LD_INT 2
41834: ARRAY
41835: PPUSH
41836: CALL_OW 116
41840: GO 42131
// if path > tag then
41842: LD_VAR 0 2
41846: PUSH
41847: LD_VAR 0 9
41851: GREATER
41852: IFFALSE 42060
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41854: LD_ADDR_VAR 0 6
41858: PUSH
41859: LD_VAR 0 5
41863: PPUSH
41864: LD_INT 91
41866: PUSH
41867: LD_VAR 0 4
41871: PUSH
41872: LD_INT 8
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: PPUSH
41880: CALL_OW 72
41884: ST_TO_ADDR
// if nearEnemy then
41885: LD_VAR 0 6
41889: IFFALSE 41958
// begin if GetWeapon ( i ) = ru_time_lapser then
41891: LD_VAR 0 4
41895: PPUSH
41896: CALL_OW 264
41900: PUSH
41901: LD_INT 49
41903: EQUAL
41904: IFFALSE 41932
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41906: LD_VAR 0 4
41910: PPUSH
41911: LD_VAR 0 6
41915: PPUSH
41916: LD_VAR 0 4
41920: PPUSH
41921: CALL_OW 74
41925: PPUSH
41926: CALL_OW 112
41930: GO 41956
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41932: LD_VAR 0 4
41936: PPUSH
41937: LD_VAR 0 6
41941: PPUSH
41942: LD_VAR 0 4
41946: PPUSH
41947: CALL_OW 74
41951: PPUSH
41952: CALL 43060 0 2
// end else
41956: GO 42058
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41958: LD_VAR 0 4
41962: PPUSH
41963: LD_VAR 0 2
41967: PUSH
41968: LD_VAR 0 9
41972: ARRAY
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: PPUSH
41978: LD_VAR 0 2
41982: PUSH
41983: LD_VAR 0 9
41987: ARRAY
41988: PUSH
41989: LD_INT 2
41991: ARRAY
41992: PPUSH
41993: CALL_OW 297
41997: PUSH
41998: LD_INT 6
42000: GREATER
42001: IFFALSE 42044
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42003: LD_VAR 0 4
42007: PPUSH
42008: LD_VAR 0 2
42012: PUSH
42013: LD_VAR 0 9
42017: ARRAY
42018: PUSH
42019: LD_INT 1
42021: ARRAY
42022: PPUSH
42023: LD_VAR 0 2
42027: PUSH
42028: LD_VAR 0 9
42032: ARRAY
42033: PUSH
42034: LD_INT 2
42036: ARRAY
42037: PPUSH
42038: CALL_OW 114
42042: GO 42058
// SetTag ( i , tag ) ;
42044: LD_VAR 0 4
42048: PPUSH
42049: LD_VAR 0 9
42053: PPUSH
42054: CALL_OW 109
// end else
42058: GO 42131
// if enemy then
42060: LD_VAR 0 5
42064: IFFALSE 42131
// begin if GetWeapon ( i ) = ru_time_lapser then
42066: LD_VAR 0 4
42070: PPUSH
42071: CALL_OW 264
42075: PUSH
42076: LD_INT 49
42078: EQUAL
42079: IFFALSE 42107
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42081: LD_VAR 0 4
42085: PPUSH
42086: LD_VAR 0 5
42090: PPUSH
42091: LD_VAR 0 4
42095: PPUSH
42096: CALL_OW 74
42100: PPUSH
42101: CALL_OW 112
42105: GO 42131
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42107: LD_VAR 0 4
42111: PPUSH
42112: LD_VAR 0 5
42116: PPUSH
42117: LD_VAR 0 4
42121: PPUSH
42122: CALL_OW 74
42126: PPUSH
42127: CALL 43060 0 2
// end ; end ;
42131: GO 41711
42133: POP
42134: POP
// end ;
42135: LD_VAR 0 3
42139: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42140: LD_INT 0
42142: PPUSH
42143: PPUSH
42144: PPUSH
// if not unit or IsInUnit ( unit ) then
42145: LD_VAR 0 1
42149: NOT
42150: PUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL_OW 310
42160: OR
42161: IFFALSE 42165
// exit ;
42163: GO 42256
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: LD_VAR 0 1
42174: PPUSH
42175: CALL_OW 250
42179: PPUSH
42180: LD_VAR 0 2
42184: PPUSH
42185: LD_INT 1
42187: PPUSH
42188: CALL_OW 272
42192: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42193: LD_ADDR_VAR 0 5
42197: PUSH
42198: LD_VAR 0 1
42202: PPUSH
42203: CALL_OW 251
42207: PPUSH
42208: LD_VAR 0 2
42212: PPUSH
42213: LD_INT 1
42215: PPUSH
42216: CALL_OW 273
42220: ST_TO_ADDR
// if ValidHex ( x , y ) then
42221: LD_VAR 0 4
42225: PPUSH
42226: LD_VAR 0 5
42230: PPUSH
42231: CALL_OW 488
42235: IFFALSE 42256
// ComTurnXY ( unit , x , y ) ;
42237: LD_VAR 0 1
42241: PPUSH
42242: LD_VAR 0 4
42246: PPUSH
42247: LD_VAR 0 5
42251: PPUSH
42252: CALL_OW 118
// end ;
42256: LD_VAR 0 3
42260: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42261: LD_INT 0
42263: PPUSH
42264: PPUSH
// result := false ;
42265: LD_ADDR_VAR 0 3
42269: PUSH
42270: LD_INT 0
42272: ST_TO_ADDR
// if not units then
42273: LD_VAR 0 2
42277: NOT
42278: IFFALSE 42282
// exit ;
42280: GO 42327
// for i in units do
42282: LD_ADDR_VAR 0 4
42286: PUSH
42287: LD_VAR 0 2
42291: PUSH
42292: FOR_IN
42293: IFFALSE 42325
// if See ( side , i ) then
42295: LD_VAR 0 1
42299: PPUSH
42300: LD_VAR 0 4
42304: PPUSH
42305: CALL_OW 292
42309: IFFALSE 42323
// begin result := true ;
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_INT 1
42318: ST_TO_ADDR
// exit ;
42319: POP
42320: POP
42321: GO 42327
// end ;
42323: GO 42292
42325: POP
42326: POP
// end ;
42327: LD_VAR 0 3
42331: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42332: LD_INT 0
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
// if not unit or not points then
42338: LD_VAR 0 1
42342: NOT
42343: PUSH
42344: LD_VAR 0 2
42348: NOT
42349: OR
42350: IFFALSE 42354
// exit ;
42352: GO 42444
// dist := 99999 ;
42354: LD_ADDR_VAR 0 5
42358: PUSH
42359: LD_INT 99999
42361: ST_TO_ADDR
// for i in points do
42362: LD_ADDR_VAR 0 4
42366: PUSH
42367: LD_VAR 0 2
42371: PUSH
42372: FOR_IN
42373: IFFALSE 42442
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42375: LD_ADDR_VAR 0 6
42379: PUSH
42380: LD_VAR 0 1
42384: PPUSH
42385: LD_VAR 0 4
42389: PUSH
42390: LD_INT 1
42392: ARRAY
42393: PPUSH
42394: LD_VAR 0 4
42398: PUSH
42399: LD_INT 2
42401: ARRAY
42402: PPUSH
42403: CALL_OW 297
42407: ST_TO_ADDR
// if tmpDist < dist then
42408: LD_VAR 0 6
42412: PUSH
42413: LD_VAR 0 5
42417: LESS
42418: IFFALSE 42440
// begin result := i ;
42420: LD_ADDR_VAR 0 3
42424: PUSH
42425: LD_VAR 0 4
42429: ST_TO_ADDR
// dist := tmpDist ;
42430: LD_ADDR_VAR 0 5
42434: PUSH
42435: LD_VAR 0 6
42439: ST_TO_ADDR
// end ; end ;
42440: GO 42372
42442: POP
42443: POP
// end ;
42444: LD_VAR 0 3
42448: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42449: LD_INT 0
42451: PPUSH
// uc_side := side ;
42452: LD_ADDR_OWVAR 20
42456: PUSH
42457: LD_VAR 0 1
42461: ST_TO_ADDR
// uc_nation := 3 ;
42462: LD_ADDR_OWVAR 21
42466: PUSH
42467: LD_INT 3
42469: ST_TO_ADDR
// vc_chassis := 25 ;
42470: LD_ADDR_OWVAR 37
42474: PUSH
42475: LD_INT 25
42477: ST_TO_ADDR
// vc_engine := engine_siberite ;
42478: LD_ADDR_OWVAR 39
42482: PUSH
42483: LD_INT 3
42485: ST_TO_ADDR
// vc_control := control_computer ;
42486: LD_ADDR_OWVAR 38
42490: PUSH
42491: LD_INT 3
42493: ST_TO_ADDR
// vc_weapon := 59 ;
42494: LD_ADDR_OWVAR 40
42498: PUSH
42499: LD_INT 59
42501: ST_TO_ADDR
// result := CreateVehicle ;
42502: LD_ADDR_VAR 0 5
42506: PUSH
42507: CALL_OW 45
42511: ST_TO_ADDR
// SetDir ( result , d ) ;
42512: LD_VAR 0 5
42516: PPUSH
42517: LD_VAR 0 4
42521: PPUSH
42522: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42526: LD_VAR 0 5
42530: PPUSH
42531: LD_VAR 0 2
42535: PPUSH
42536: LD_VAR 0 3
42540: PPUSH
42541: LD_INT 0
42543: PPUSH
42544: CALL_OW 48
// end ;
42548: LD_VAR 0 5
42552: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42553: LD_INT 0
42555: PPUSH
42556: PPUSH
42557: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42558: LD_ADDR_VAR 0 2
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42581: LD_VAR 0 1
42585: NOT
42586: PUSH
42587: LD_VAR 0 1
42591: PPUSH
42592: CALL_OW 264
42596: PUSH
42597: LD_INT 12
42599: PUSH
42600: LD_INT 51
42602: PUSH
42603: LD_INT 32
42605: PUSH
42606: LD_INT 89
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: IN
42615: NOT
42616: OR
42617: IFFALSE 42621
// exit ;
42619: GO 42719
// for i := 1 to 3 do
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: DOUBLE
42627: LD_INT 1
42629: DEC
42630: ST_TO_ADDR
42631: LD_INT 3
42633: PUSH
42634: FOR_TO
42635: IFFALSE 42717
// begin tmp := GetCargo ( cargo , i ) ;
42637: LD_ADDR_VAR 0 4
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: LD_VAR 0 3
42651: PPUSH
42652: CALL_OW 289
42656: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42657: LD_ADDR_VAR 0 2
42661: PUSH
42662: LD_VAR 0 2
42666: PPUSH
42667: LD_VAR 0 3
42671: PPUSH
42672: LD_VAR 0 4
42676: PPUSH
42677: CALL_OW 1
42681: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42682: LD_ADDR_VAR 0 2
42686: PUSH
42687: LD_VAR 0 2
42691: PPUSH
42692: LD_INT 4
42694: PPUSH
42695: LD_VAR 0 2
42699: PUSH
42700: LD_INT 4
42702: ARRAY
42703: PUSH
42704: LD_VAR 0 4
42708: PLUS
42709: PPUSH
42710: CALL_OW 1
42714: ST_TO_ADDR
// end ;
42715: GO 42634
42717: POP
42718: POP
// end ;
42719: LD_VAR 0 2
42723: RET
// export function Length ( array ) ; begin
42724: LD_INT 0
42726: PPUSH
// result := array + 0 ;
42727: LD_ADDR_VAR 0 2
42731: PUSH
42732: LD_VAR 0 1
42736: PUSH
42737: LD_INT 0
42739: PLUS
42740: ST_TO_ADDR
// end ;
42741: LD_VAR 0 2
42745: RET
// export function PrepareArray ( array ) ; begin
42746: LD_INT 0
42748: PPUSH
// result := array diff 0 ;
42749: LD_ADDR_VAR 0 2
42753: PUSH
42754: LD_VAR 0 1
42758: PUSH
42759: LD_INT 0
42761: DIFF
42762: ST_TO_ADDR
// if not result [ 1 ] then
42763: LD_VAR 0 2
42767: PUSH
42768: LD_INT 1
42770: ARRAY
42771: NOT
42772: IFFALSE 42792
// result := Delete ( result , 1 ) ;
42774: LD_ADDR_VAR 0 2
42778: PUSH
42779: LD_VAR 0 2
42783: PPUSH
42784: LD_INT 1
42786: PPUSH
42787: CALL_OW 3
42791: ST_TO_ADDR
// end ;
42792: LD_VAR 0 2
42796: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42797: LD_INT 0
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
// sibRocketRange := 25 ;
42803: LD_ADDR_VAR 0 6
42807: PUSH
42808: LD_INT 25
42810: ST_TO_ADDR
// result := false ;
42811: LD_ADDR_VAR 0 4
42815: PUSH
42816: LD_INT 0
42818: ST_TO_ADDR
// for i := 0 to 5 do
42819: LD_ADDR_VAR 0 5
42823: PUSH
42824: DOUBLE
42825: LD_INT 0
42827: DEC
42828: ST_TO_ADDR
42829: LD_INT 5
42831: PUSH
42832: FOR_TO
42833: IFFALSE 42900
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42835: LD_VAR 0 1
42839: PPUSH
42840: LD_VAR 0 5
42844: PPUSH
42845: LD_VAR 0 6
42849: PPUSH
42850: CALL_OW 272
42854: PPUSH
42855: LD_VAR 0 2
42859: PPUSH
42860: LD_VAR 0 5
42864: PPUSH
42865: LD_VAR 0 6
42869: PPUSH
42870: CALL_OW 273
42874: PPUSH
42875: LD_VAR 0 3
42879: PPUSH
42880: CALL_OW 309
42884: IFFALSE 42898
// begin result := true ;
42886: LD_ADDR_VAR 0 4
42890: PUSH
42891: LD_INT 1
42893: ST_TO_ADDR
// exit ;
42894: POP
42895: POP
42896: GO 42902
// end ;
42898: GO 42832
42900: POP
42901: POP
// end ;
42902: LD_VAR 0 4
42906: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42907: LD_INT 0
42909: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42910: LD_VAR 0 1
42914: PPUSH
42915: LD_VAR 0 2
42919: PPUSH
42920: LD_INT 0
42922: PPUSH
42923: LD_INT 0
42925: PPUSH
42926: LD_INT 1
42928: PPUSH
42929: LD_INT 0
42931: PPUSH
42932: CALL_OW 587
// end ;
42936: LD_VAR 0 3
42940: RET
// export function CenterOnNow ( unit ) ; begin
42941: LD_INT 0
42943: PPUSH
// result := IsInUnit ( unit ) ;
42944: LD_ADDR_VAR 0 2
42948: PUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 310
42958: ST_TO_ADDR
// if not result then
42959: LD_VAR 0 2
42963: NOT
42964: IFFALSE 42976
// result := unit ;
42966: LD_ADDR_VAR 0 2
42970: PUSH
42971: LD_VAR 0 1
42975: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42976: LD_VAR 0 1
42980: PPUSH
42981: CALL_OW 87
// end ;
42985: LD_VAR 0 2
42989: RET
// export function ComMoveHex ( unit , hex ) ; begin
42990: LD_INT 0
42992: PPUSH
// if not hex then
42993: LD_VAR 0 2
42997: NOT
42998: IFFALSE 43002
// exit ;
43000: GO 43055
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43002: LD_VAR 0 2
43006: PUSH
43007: LD_INT 1
43009: ARRAY
43010: PPUSH
43011: LD_VAR 0 2
43015: PUSH
43016: LD_INT 2
43018: ARRAY
43019: PPUSH
43020: CALL_OW 428
43024: IFFALSE 43028
// exit ;
43026: GO 43055
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43028: LD_VAR 0 1
43032: PPUSH
43033: LD_VAR 0 2
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: PPUSH
43042: LD_VAR 0 2
43046: PUSH
43047: LD_INT 2
43049: ARRAY
43050: PPUSH
43051: CALL_OW 111
// end ;
43055: LD_VAR 0 3
43059: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43060: LD_INT 0
43062: PPUSH
43063: PPUSH
43064: PPUSH
// if not unit or not enemy then
43065: LD_VAR 0 1
43069: NOT
43070: PUSH
43071: LD_VAR 0 2
43075: NOT
43076: OR
43077: IFFALSE 43081
// exit ;
43079: GO 43205
// x := GetX ( enemy ) ;
43081: LD_ADDR_VAR 0 4
43085: PUSH
43086: LD_VAR 0 2
43090: PPUSH
43091: CALL_OW 250
43095: ST_TO_ADDR
// y := GetY ( enemy ) ;
43096: LD_ADDR_VAR 0 5
43100: PUSH
43101: LD_VAR 0 2
43105: PPUSH
43106: CALL_OW 251
43110: ST_TO_ADDR
// if ValidHex ( x , y ) then
43111: LD_VAR 0 4
43115: PPUSH
43116: LD_VAR 0 5
43120: PPUSH
43121: CALL_OW 488
43125: IFFALSE 43205
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
43127: LD_VAR 0 2
43131: PPUSH
43132: CALL_OW 247
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: IN
43147: PUSH
43148: LD_VAR 0 1
43152: PPUSH
43153: CALL_OW 255
43157: PPUSH
43158: LD_VAR 0 2
43162: PPUSH
43163: CALL_OW 292
43167: AND
43168: IFFALSE 43186
// ComAttackUnit ( unit , enemy ) else
43170: LD_VAR 0 1
43174: PPUSH
43175: LD_VAR 0 2
43179: PPUSH
43180: CALL_OW 115
43184: GO 43205
// ComAgressiveMove ( unit , x , y ) ;
43186: LD_VAR 0 1
43190: PPUSH
43191: LD_VAR 0 4
43195: PPUSH
43196: LD_VAR 0 5
43200: PPUSH
43201: CALL_OW 114
// end ;
43205: LD_VAR 0 3
43209: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43210: LD_INT 0
43212: PPUSH
43213: PPUSH
43214: PPUSH
// list := AreaToList ( area , 0 ) ;
43215: LD_ADDR_VAR 0 5
43219: PUSH
43220: LD_VAR 0 1
43224: PPUSH
43225: LD_INT 0
43227: PPUSH
43228: CALL_OW 517
43232: ST_TO_ADDR
// if not list then
43233: LD_VAR 0 5
43237: NOT
43238: IFFALSE 43242
// exit ;
43240: GO 43372
// if all then
43242: LD_VAR 0 2
43246: IFFALSE 43334
// begin for i := 1 to list [ 1 ] do
43248: LD_ADDR_VAR 0 4
43252: PUSH
43253: DOUBLE
43254: LD_INT 1
43256: DEC
43257: ST_TO_ADDR
43258: LD_VAR 0 5
43262: PUSH
43263: LD_INT 1
43265: ARRAY
43266: PUSH
43267: FOR_TO
43268: IFFALSE 43330
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43270: LD_ADDR_VAR 0 3
43274: PUSH
43275: LD_VAR 0 3
43279: PPUSH
43280: LD_VAR 0 3
43284: PUSH
43285: LD_INT 1
43287: PLUS
43288: PPUSH
43289: LD_VAR 0 5
43293: PUSH
43294: LD_INT 1
43296: ARRAY
43297: PUSH
43298: LD_VAR 0 4
43302: ARRAY
43303: PUSH
43304: LD_VAR 0 5
43308: PUSH
43309: LD_INT 2
43311: ARRAY
43312: PUSH
43313: LD_VAR 0 4
43317: ARRAY
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PPUSH
43323: CALL_OW 1
43327: ST_TO_ADDR
43328: GO 43267
43330: POP
43331: POP
// exit ;
43332: GO 43372
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43334: LD_ADDR_VAR 0 3
43338: PUSH
43339: LD_VAR 0 5
43343: PUSH
43344: LD_INT 1
43346: ARRAY
43347: PUSH
43348: LD_INT 1
43350: ARRAY
43351: PUSH
43352: LD_VAR 0 5
43356: PUSH
43357: LD_INT 2
43359: ARRAY
43360: PUSH
43361: LD_INT 1
43363: ARRAY
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: EMPTY
43370: LIST
43371: ST_TO_ADDR
// end ;
43372: LD_VAR 0 3
43376: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43377: LD_INT 0
43379: PPUSH
43380: PPUSH
// list := AreaToList ( area , 0 ) ;
43381: LD_ADDR_VAR 0 4
43385: PUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: LD_INT 0
43393: PPUSH
43394: CALL_OW 517
43398: ST_TO_ADDR
// if not list then
43399: LD_VAR 0 4
43403: NOT
43404: IFFALSE 43408
// exit ;
43406: GO 43449
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43408: LD_ADDR_VAR 0 3
43412: PUSH
43413: LD_VAR 0 4
43417: PUSH
43418: LD_INT 1
43420: ARRAY
43421: PUSH
43422: LD_INT 1
43424: ARRAY
43425: PUSH
43426: LD_VAR 0 4
43430: PUSH
43431: LD_INT 2
43433: ARRAY
43434: PUSH
43435: LD_INT 1
43437: ARRAY
43438: PUSH
43439: LD_VAR 0 2
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// end ; end_of_file
43449: LD_VAR 0 3
43453: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpBuildings , mpMarkedAreas , mpBuildUpAreas ; export function InitMultiplayer ; var i ; begin
43454: LD_INT 0
43456: PPUSH
43457: PPUSH
// mpGameType := 0 ;
43458: LD_ADDR_EXP 1
43462: PUSH
43463: LD_INT 0
43465: ST_TO_ADDR
// mpGameSettings := [ ] ;
43466: LD_ADDR_EXP 4
43470: PUSH
43471: EMPTY
43472: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
43473: LD_ADDR_EXP 2
43477: PUSH
43478: EMPTY
43479: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
43480: LD_ADDR_EXP 3
43484: PUSH
43485: EMPTY
43486: ST_TO_ADDR
// mpOilDeposits := [ ] ;
43487: LD_ADDR_EXP 10
43491: PUSH
43492: EMPTY
43493: ST_TO_ADDR
// mpSibDeposits := [ ] ;
43494: LD_ADDR_EXP 11
43498: PUSH
43499: EMPTY
43500: ST_TO_ADDR
// mpDepots := [ ] ;
43501: LD_ADDR_EXP 12
43505: PUSH
43506: EMPTY
43507: ST_TO_ADDR
// mpBuildings := [ ] ;
43508: LD_ADDR_EXP 13
43512: PUSH
43513: EMPTY
43514: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
43515: LD_ADDR_EXP 14
43519: PUSH
43520: EMPTY
43521: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
43522: LD_ADDR_EXP 15
43526: PUSH
43527: EMPTY
43528: ST_TO_ADDR
// for i := 1 to 32 do
43529: LD_ADDR_VAR 0 2
43533: PUSH
43534: DOUBLE
43535: LD_INT 1
43537: DEC
43538: ST_TO_ADDR
43539: LD_INT 32
43541: PUSH
43542: FOR_TO
43543: IFFALSE 43570
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
43545: LD_ADDR_EXP 4
43549: PUSH
43550: LD_EXP 4
43554: PPUSH
43555: LD_VAR 0 2
43559: PPUSH
43560: LD_INT 0
43562: PPUSH
43563: CALL_OW 1
43567: ST_TO_ADDR
43568: GO 43542
43570: POP
43571: POP
// end ;
43572: LD_VAR 0 1
43576: RET
// export function StartMultiplayer ; var i , j , side , pos , nation , setting ; begin
43577: LD_INT 0
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
// if Multiplayer then
43586: LD_OWVAR 4
43590: IFFALSE 43768
// begin mpGameType := mp_game_type ;
43592: LD_ADDR_EXP 1
43596: PUSH
43597: LD_OWVAR 6
43601: ST_TO_ADDR
// your_side := mp_player_side ;
43602: LD_ADDR_OWVAR 2
43606: PUSH
43607: LD_OWVAR 7
43611: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
43612: LD_ADDR_EXP 5
43616: PUSH
43617: LD_OWVAR 17
43621: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
43622: LD_ADDR_EXP 6
43626: PUSH
43627: LD_OWVAR 15
43631: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
43632: LD_ADDR_EXP 7
43636: PUSH
43637: LD_OWVAR 16
43641: ST_TO_ADDR
// mpTeams := mp_teams ;
43642: LD_ADDR_EXP 8
43646: PUSH
43647: LD_OWVAR 12
43651: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
43652: LD_ADDR_VAR 0 2
43656: PUSH
43657: DOUBLE
43658: LD_INT 1
43660: DEC
43661: ST_TO_ADDR
43662: LD_EXP 2
43666: PPUSH
43667: CALL 3388 0 1
43671: PUSH
43672: FOR_TO
43673: IFFALSE 43743
// begin setting := mpGameSettingsKeys [ i - 1 ] ;
43675: LD_ADDR_VAR 0 7
43679: PUSH
43680: LD_EXP 2
43684: PUSH
43685: LD_VAR 0 2
43689: PUSH
43690: LD_INT 1
43692: MINUS
43693: ARRAY
43694: ST_TO_ADDR
// if setting then
43695: LD_VAR 0 7
43699: IFFALSE 43741
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ GetMultiplayerSetting ( i - 1 ) ] ) ;
43701: LD_ADDR_EXP 4
43705: PUSH
43706: LD_EXP 4
43710: PPUSH
43711: LD_VAR 0 2
43715: PPUSH
43716: LD_EXP 3
43720: PUSH
43721: LD_VAR 0 2
43725: PUSH
43726: LD_INT 1
43728: MINUS
43729: PPUSH
43730: CALL_OW 426
43734: ARRAY
43735: PPUSH
43736: CALL_OW 1
43740: ST_TO_ADDR
// end ;
43741: GO 43672
43743: POP
43744: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
43745: LD_ADDR_EXP 9
43749: PUSH
43750: LD_EXP 6
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: DIFF
43761: PUSH
43762: LD_INT 1
43764: GREATER
43765: ST_TO_ADDR
// end else
43766: GO 43768
// begin end ; GetMultiplayerMapData ;
43768: CALL 767 0 0
// if Count ( mpMarkedAreas ) then
43772: LD_EXP 14
43776: PPUSH
43777: CALL 3388 0 1
43781: IFFALSE 43812
// begin for i in mpMarkedAreas do
43783: LD_ADDR_VAR 0 2
43787: PUSH
43788: LD_EXP 14
43792: PUSH
43793: FOR_IN
43794: IFFALSE 43810
// SetAreaMapShow ( i , 0 ) ;
43796: LD_VAR 0 2
43800: PPUSH
43801: LD_INT 0
43803: PPUSH
43804: CALL_OW 424
43808: GO 43793
43810: POP
43811: POP
// end ; for i := 1 to 8 do
43812: LD_ADDR_VAR 0 2
43816: PUSH
43817: DOUBLE
43818: LD_INT 1
43820: DEC
43821: ST_TO_ADDR
43822: LD_INT 8
43824: PUSH
43825: FOR_TO
43826: IFFALSE 44059
// begin if not mpSidePositions [ i ] then
43828: LD_EXP 5
43832: PUSH
43833: LD_VAR 0 2
43837: ARRAY
43838: NOT
43839: IFFALSE 43843
// continue ;
43841: GO 43825
// side := i ;
43843: LD_ADDR_VAR 0 4
43847: PUSH
43848: LD_VAR 0 2
43852: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
43853: LD_ADDR_VAR 0 6
43857: PUSH
43858: LD_EXP 7
43862: PUSH
43863: LD_VAR 0 2
43867: ARRAY
43868: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
43869: LD_ADDR_VAR 0 5
43873: PUSH
43874: LD_EXP 5
43878: PUSH
43879: LD_VAR 0 2
43883: ARRAY
43884: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
43885: LD_EXP 10
43889: PPUSH
43890: CALL 3388 0 1
43894: IFFALSE 43971
// begin for j in mpOilDeposits [ pos ] do
43896: LD_ADDR_VAR 0 3
43900: PUSH
43901: LD_EXP 10
43905: PUSH
43906: LD_VAR 0 5
43910: ARRAY
43911: PUSH
43912: FOR_IN
43913: IFFALSE 43969
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
43915: LD_VAR 0 3
43919: PUSH
43920: LD_INT 1
43922: ARRAY
43923: PPUSH
43924: LD_VAR 0 3
43928: PUSH
43929: LD_INT 2
43931: ARRAY
43932: PPUSH
43933: LD_INT 2
43935: PPUSH
43936: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
43940: LD_VAR 0 3
43944: PUSH
43945: LD_INT 1
43947: ARRAY
43948: PPUSH
43949: LD_VAR 0 3
43953: PUSH
43954: LD_INT 2
43956: ARRAY
43957: PPUSH
43958: LD_VAR 0 4
43962: PPUSH
43963: CALL_OW 441
// end ;
43967: GO 43912
43969: POP
43970: POP
// end ; if Count ( mpSibDeposits ) then
43971: LD_EXP 11
43975: PPUSH
43976: CALL 3388 0 1
43980: IFFALSE 44057
// begin for j in mpSibDeposits [ pos ] do
43982: LD_ADDR_VAR 0 3
43986: PUSH
43987: LD_EXP 11
43991: PUSH
43992: LD_VAR 0 5
43996: ARRAY
43997: PUSH
43998: FOR_IN
43999: IFFALSE 44055
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
44001: LD_VAR 0 3
44005: PUSH
44006: LD_INT 1
44008: ARRAY
44009: PPUSH
44010: LD_VAR 0 3
44014: PUSH
44015: LD_INT 2
44017: ARRAY
44018: PPUSH
44019: LD_INT 3
44021: PPUSH
44022: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
44026: LD_VAR 0 3
44030: PUSH
44031: LD_INT 1
44033: ARRAY
44034: PPUSH
44035: LD_VAR 0 3
44039: PUSH
44040: LD_INT 2
44042: ARRAY
44043: PPUSH
44044: LD_VAR 0 4
44048: PPUSH
44049: CALL_OW 441
// end ;
44053: GO 43998
44055: POP
44056: POP
// end ; end ;
44057: GO 43825
44059: POP
44060: POP
// end ;
44061: LD_VAR 0 1
44065: RET
