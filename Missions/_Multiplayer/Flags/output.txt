// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 2 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 2
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 50 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 50
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 9246 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 9393 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_EXP 5
1052: MINUS
1053: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1054: LD_ADDR_EXP 27
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 10500
1064: PUSH
1065: LD_INT 6300
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_EXP 11
1077: PUSH
1078: LD_INT 1
1080: PLUS
1081: ARRAY
1082: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1083: LD_ADDR_EXP 28
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 31500
1093: PUSH
1094: LD_INT 10500
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 11
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1112: LD_ADDR_EXP 25
1116: PUSH
1117: LD_INT 0
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 12
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1145: LD_ADDR_EXP 24
1149: PUSH
1150: LD_INT 1
1152: NEG
1153: PUSH
1154: LD_INT 350
1156: PUSH
1157: LD_INT 700
1159: PUSH
1160: LD_INT 1400
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_EXP 9
1177: PUSH
1178: LD_INT 1
1180: PLUS
1181: ARRAY
1182: ST_TO_ADDR
// battle_flags_id = [ ] ;
1183: LD_ADDR_EXP 44
1187: PUSH
1188: EMPTY
1189: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1190: LD_EXP 13
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: IFFALSE 1210
// siberite_bomb_Delay = 0 else
1200: LD_ADDR_EXP 29
1204: PUSH
1205: LD_INT 0
1207: ST_TO_ADDR
1208: GO 1232
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1210: LD_ADDR_EXP 29
1214: PUSH
1215: LD_EXP 13
1219: PUSH
1220: LD_INT 1
1222: MINUS
1223: PUSH
1224: LD_INT 21000
1226: MUL
1227: PUSH
1228: LD_INT 1
1230: PLUS
1231: ST_TO_ADDR
// end ;
1232: LD_VAR 0 1
1236: RET
// function init_map ; var i , j ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
1241: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1242: LD_ADDR_EXP 40
1246: PUSH
1247: LD_INT 17
1249: PUSH
1250: LD_INT 4
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 72
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 157
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 205
1279: PUSH
1280: LD_INT 111
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 221
1289: PUSH
1290: LD_INT 195
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 169
1299: PUSH
1300: LD_INT 196
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 93
1309: PUSH
1310: LD_INT 177
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 52
1319: PUSH
1320: LD_INT 92
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1337: LD_ADDR_EXP 41
1341: PUSH
1342: LD_INT 17
1344: PUSH
1345: LD_INT 4
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 16
1354: PUSH
1355: LD_INT 23
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 72
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 88
1378: PUSH
1379: LD_INT 28
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 157
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 133
1402: PUSH
1403: LD_INT 12
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 205
1416: PUSH
1417: LD_INT 111
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 200
1426: PUSH
1427: LD_INT 95
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 221
1440: PUSH
1441: LD_INT 195
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: LD_INT 249
1450: PUSH
1451: LD_INT 190
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 169
1464: PUSH
1465: LD_INT 196
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 180
1474: PUSH
1475: LD_INT 197
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 93
1488: PUSH
1489: LD_INT 177
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 114
1498: PUSH
1499: LD_INT 194
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 52
1512: PUSH
1513: LD_INT 92
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 58
1522: PUSH
1523: LD_INT 107
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1544: LD_ADDR_EXP 42
1548: PUSH
1549: LD_INT 12
1551: PUSH
1552: LD_INT 12
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 99
1561: PUSH
1562: LD_INT 19
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 139
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 207
1581: PUSH
1582: LD_INT 100
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 244
1591: PUSH
1592: LD_INT 181
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 183
1601: PUSH
1602: LD_INT 196
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 117
1611: PUSH
1612: LD_INT 195
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 54
1621: PUSH
1622: LD_INT 104
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1639: LD_ADDR_EXP 43
1643: PUSH
1644: EMPTY
1645: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1646: LD_ADDR_EXP 37
1650: PUSH
1651: LD_INT 32
1653: PUSH
1654: LD_INT 24
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 87
1667: PUSH
1668: LD_INT 18
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 146
1681: PUSH
1682: LD_INT 28
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 188
1695: PUSH
1696: LD_INT 103
1698: PUSH
1699: LD_INT 4
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 224
1709: PUSH
1710: LD_INT 180
1712: PUSH
1713: LD_INT 5
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 168
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 0
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 105
1737: PUSH
1738: LD_INT 170
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: LD_INT 102
1754: PUSH
1755: LD_INT 1
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: ST_TO_ADDR
// for i in depot_def do
1773: LD_ADDR_VAR 0 2
1777: PUSH
1778: LD_EXP 37
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1860
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1786: LD_ADDR_EXP 39
1790: PUSH
1791: LD_EXP 39
1795: PUSH
1796: LD_VAR 0 2
1800: PUSH
1801: LD_INT 1
1803: ARRAY
1804: PPUSH
1805: LD_VAR 0 2
1809: PUSH
1810: LD_INT 3
1812: ARRAY
1813: PPUSH
1814: LD_INT 4
1816: NEG
1817: PPUSH
1818: CALL_OW 272
1822: PUSH
1823: LD_VAR 0 2
1827: PUSH
1828: LD_INT 2
1830: ARRAY
1831: PPUSH
1832: LD_VAR 0 2
1836: PUSH
1837: LD_INT 3
1839: ARRAY
1840: PPUSH
1841: LD_INT 4
1843: NEG
1844: PPUSH
1845: CALL_OW 273
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: ADD
1857: ST_TO_ADDR
1858: GO 1783
1860: POP
1861: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_INT 50
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 5
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 47
1883: PUSH
1884: LD_INT 17
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 29
1897: PUSH
1898: LD_INT 39
1900: PUSH
1901: LD_INT 0
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 107
1916: PUSH
1917: LD_INT 27
1919: PUSH
1920: LD_INT 4
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 67
1930: PUSH
1931: LD_INT 10
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 91
1944: PUSH
1945: LD_INT 35
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: PUSH
1961: LD_INT 165
1963: PUSH
1964: LD_INT 44
1966: PUSH
1967: LD_INT 5
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 123
1977: PUSH
1978: LD_INT 16
1980: PUSH
1981: LD_INT 2
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 141
1991: PUSH
1992: LD_INT 39
1994: PUSH
1995: LD_INT 0
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 179
2010: PUSH
2011: LD_INT 85
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 172
2024: PUSH
2025: LD_INT 102
2027: PUSH
2028: LD_INT 1
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 196
2038: PUSH
2039: LD_INT 118
2041: PUSH
2042: LD_INT 5
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 210
2057: PUSH
2058: LD_INT 182
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 226
2071: PUSH
2072: LD_INT 164
2074: PUSH
2075: LD_INT 3
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 209
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 2
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 156
2104: PUSH
2105: LD_INT 183
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 184
2118: PUSH
2119: LD_INT 184
2121: PUSH
2122: LD_INT 4
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 161
2132: PUSH
2133: LD_INT 166
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 86
2151: PUSH
2152: LD_INT 156
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 124
2165: PUSH
2166: LD_INT 180
2168: PUSH
2169: LD_INT 4
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 106
2179: PUSH
2180: LD_INT 155
2182: PUSH
2183: LD_INT 3
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 87
2198: PUSH
2199: LD_INT 102
2201: PUSH
2202: LD_INT 4
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 63
2212: PUSH
2213: LD_INT 83
2215: PUSH
2216: LD_INT 3
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 79
2226: PUSH
2227: LD_INT 120
2229: PUSH
2230: LD_INT 0
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// for i = 1 to Side_Positions do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_EXP 34
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2399
// begin if not Side_Positions [ i ] then
2271: LD_EXP 34
2275: PUSH
2276: LD_VAR 0 2
2280: ARRAY
2281: NOT
2282: IFFALSE 2286
// continue ;
2284: GO 2268
// if def_extra_oil_deposits then
2286: LD_EXP 6
2290: IFFALSE 2348
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2292: LD_ADDR_VAR 0 3
2296: PUSH
2297: LD_EXP 41
2301: PUSH
2302: LD_EXP 34
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: ARRAY
2313: PUSH
2314: FOR_IN
2315: IFFALSE 2344
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2317: LD_VAR 0 3
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PPUSH
2326: LD_VAR 0 3
2330: PUSH
2331: LD_INT 2
2333: ARRAY
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: CALL_OW 62
2342: GO 2314
2344: POP
2345: POP
2346: GO 2397
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2348: LD_EXP 40
2352: PUSH
2353: LD_EXP 34
2357: PUSH
2358: LD_VAR 0 2
2362: ARRAY
2363: ARRAY
2364: PUSH
2365: LD_INT 1
2367: ARRAY
2368: PPUSH
2369: LD_EXP 40
2373: PUSH
2374: LD_EXP 34
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: ARRAY
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PPUSH
2390: LD_INT 2
2392: PPUSH
2393: CALL_OW 62
// end ;
2397: GO 2268
2399: POP
2400: POP
// if def_extra_sib_deposits then
2401: LD_EXP 7
2405: IFFALSE 2559
// for i = 1 to Side_Positions do
2407: LD_ADDR_VAR 0 2
2411: PUSH
2412: DOUBLE
2413: LD_INT 1
2415: DEC
2416: ST_TO_ADDR
2417: LD_EXP 34
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2557
// begin if not Side_Positions [ i ] then
2425: LD_EXP 34
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: NOT
2436: IFFALSE 2440
// continue ;
2438: GO 2422
// if def_extra_sib_deposits = 2 then
2440: LD_EXP 7
2444: PUSH
2445: LD_INT 2
2447: EQUAL
2448: IFFALSE 2506
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2450: LD_ADDR_VAR 0 3
2454: PUSH
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: FOR_IN
2473: IFFALSE 2502
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: LD_VAR 0 3
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 3
2495: PPUSH
2496: CALL_OW 62
2500: GO 2472
2502: POP
2503: POP
2504: GO 2555
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2506: LD_EXP 42
2510: PUSH
2511: LD_EXP 34
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: ARRAY
2522: PUSH
2523: LD_INT 1
2525: ARRAY
2526: PPUSH
2527: LD_EXP 42
2531: PUSH
2532: LD_EXP 34
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: ARRAY
2543: PUSH
2544: LD_INT 2
2546: ARRAY
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: CALL_OW 62
// end ;
2555: GO 2422
2557: POP
2558: POP
// end ;
2559: LD_VAR 0 1
2563: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2564: LD_INT 0
2566: PPUSH
2567: PPUSH
2568: PPUSH
// if not Team_Game then
2569: LD_EXP 36
2573: NOT
2574: IFFALSE 2672
// begin for i = 1 to 8 do
2576: LD_ADDR_VAR 0 2
2580: PUSH
2581: DOUBLE
2582: LD_INT 1
2584: DEC
2585: ST_TO_ADDR
2586: LD_INT 8
2588: PUSH
2589: FOR_TO
2590: IFFALSE 2668
// for j = 1 to 8 do
2592: LD_ADDR_VAR 0 3
2596: PUSH
2597: DOUBLE
2598: LD_INT 1
2600: DEC
2601: ST_TO_ADDR
2602: LD_INT 8
2604: PUSH
2605: FOR_TO
2606: IFFALSE 2664
// if i <> j then
2608: LD_VAR 0 2
2612: PUSH
2613: LD_VAR 0 3
2617: NONEQUAL
2618: IFFALSE 2642
// SetAttitude ( i , j , att_neutral , true ) else
2620: LD_VAR 0 2
2624: PPUSH
2625: LD_VAR 0 3
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: CALL_OW 80
2640: GO 2662
// SetAttitude ( i , j , att_friend , true ) ;
2642: LD_VAR 0 2
2646: PPUSH
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: CALL_OW 80
2662: GO 2605
2664: POP
2665: POP
2666: GO 2589
2668: POP
2669: POP
// end else
2670: GO 2847
// begin if def_shared_vision then
2672: LD_EXP 8
2676: IFFALSE 2741
// begin for i in Teams do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_EXP 32
2687: PUSH
2688: FOR_IN
2689: IFFALSE 2739
// for j = 2 to i do
2691: LD_ADDR_VAR 0 3
2695: PUSH
2696: DOUBLE
2697: LD_INT 2
2699: DEC
2700: ST_TO_ADDR
2701: LD_VAR 0 2
2705: PUSH
2706: FOR_TO
2707: IFFALSE 2735
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2709: LD_VAR 0 2
2713: PUSH
2714: LD_VAR 0 3
2718: ARRAY
2719: PPUSH
2720: LD_VAR 0 2
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 343
2733: GO 2706
2735: POP
2736: POP
2737: GO 2688
2739: POP
2740: POP
// end ; for i = 1 to 8 do
2741: LD_ADDR_VAR 0 2
2745: PUSH
2746: DOUBLE
2747: LD_INT 1
2749: DEC
2750: ST_TO_ADDR
2751: LD_INT 8
2753: PUSH
2754: FOR_TO
2755: IFFALSE 2845
// for j = 1 to 8 do
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: DOUBLE
2763: LD_INT 1
2765: DEC
2766: ST_TO_ADDR
2767: LD_INT 8
2769: PUSH
2770: FOR_TO
2771: IFFALSE 2841
// if Side_Teams [ i ] = Side_Teams [ j ] then
2773: LD_EXP 31
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_EXP 31
2788: PUSH
2789: LD_VAR 0 3
2793: ARRAY
2794: EQUAL
2795: IFFALSE 2819
// SetAttitude ( i , j , att_friend , true ) else
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 80
2817: GO 2839
// SetAttitude ( i , j , att_enemy , true ) ;
2819: LD_VAR 0 2
2823: PPUSH
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_INT 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 80
2839: GO 2770
2841: POP
2842: POP
2843: GO 2754
2845: POP
2846: POP
// end ; end ;
2847: LD_VAR 0 1
2851: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2852: LD_INT 0
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
// result := [ ] ;
2858: LD_ADDR_VAR 0 7
2862: PUSH
2863: EMPTY
2864: ST_TO_ADDR
// for i := 1 to count do
2865: LD_ADDR_VAR 0 8
2869: PUSH
2870: DOUBLE
2871: LD_INT 1
2873: DEC
2874: ST_TO_ADDR
2875: LD_VAR 0 1
2879: PUSH
2880: FOR_TO
2881: IFFALSE 3299
// begin uc_direction := Rand ( 0 , 5 ) ;
2883: LD_ADDR_OWVAR 24
2887: PUSH
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 5
2893: PPUSH
2894: CALL_OW 12
2898: ST_TO_ADDR
// if commander then
2899: LD_LOC 1
2903: IFFALSE 3012
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2905: LD_ADDR_OWVAR 26
2909: PUSH
2910: LD_OWVAR 19
2914: PUSH
2915: LD_OWVAR 20
2919: ARRAY
2920: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 2
2926: PPUSH
2927: CALL_OW 12
2931: PPUSH
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_EXP 20
2941: PUSH
2942: LD_INT 2
2944: PLUS
2945: PPUSH
2946: CALL_OW 380
// hc_importance := 105 ;
2950: LD_ADDR_OWVAR 32
2954: PUSH
2955: LD_INT 105
2957: ST_TO_ADDR
// commander := false ;
2958: LD_ADDR_LOC 1
2962: PUSH
2963: LD_INT 0
2965: ST_TO_ADDR
// if Multiplayer then
2966: LD_OWVAR 4
2970: IFFALSE 3010
// begin hc_gallery := MULTIAVATARS ;
2972: LD_ADDR_OWVAR 33
2976: PUSH
2977: LD_STRING MULTIAVATARS
2979: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2980: LD_ADDR_OWVAR 34
2984: PUSH
2985: LD_OWVAR 20
2989: PPUSH
2990: CALL_OW 525
2994: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2995: LD_ADDR_OWVAR 27
2999: PUSH
3000: LD_OWVAR 20
3004: PPUSH
3005: CALL_OW 526
3009: ST_TO_ADDR
// end ; end else
3010: GO 3075
// begin hc_name :=  ;
3012: LD_ADDR_OWVAR 26
3016: PUSH
3017: LD_STRING 
3019: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3020: LD_INT 1
3022: PPUSH
3023: LD_INT 2
3025: PPUSH
3026: CALL_OW 12
3030: PPUSH
3031: LD_VAR 0 2
3035: PPUSH
3036: LD_EXP 20
3040: PPUSH
3041: CALL_OW 380
// hc_importance := 0 ;
3045: LD_ADDR_OWVAR 32
3049: PUSH
3050: LD_INT 0
3052: ST_TO_ADDR
// if Multiplayer then
3053: LD_OWVAR 4
3057: IFFALSE 3075
// begin hc_gallery :=  ;
3059: LD_ADDR_OWVAR 33
3063: PUSH
3064: LD_STRING 
3066: ST_TO_ADDR
// hc_face_number := 0 ;
3067: LD_ADDR_OWVAR 34
3071: PUSH
3072: LD_INT 0
3074: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3075: LD_ADDR_VAR 0 10
3079: PUSH
3080: CALL_OW 44
3084: ST_TO_ADDR
// if global_defined then
3085: LD_LOC 3
3089: IFFALSE 3229
// begin if ( cl = class_soldier ) then
3091: LD_VAR 0 2
3095: PUSH
3096: LD_INT 1
3098: EQUAL
3099: IFFALSE 3119
// j := i + soldiers_created else
3101: LD_ADDR_VAR 0 9
3105: PUSH
3106: LD_VAR 0 8
3110: PUSH
3111: LD_LOC 4
3115: PLUS
3116: ST_TO_ADDR
3117: GO 3129
// j := i ;
3119: LD_ADDR_VAR 0 9
3123: PUSH
3124: LD_VAR 0 8
3128: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3129: LD_LOC 2
3133: PUSH
3134: LD_VAR 0 2
3138: ARRAY
3139: PUSH
3140: LD_VAR 0 9
3144: ARRAY
3145: PPUSH
3146: LD_VAR 0 10
3150: PPUSH
3151: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3155: LD_VAR 0 10
3159: PPUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_LOC 2
3167: PUSH
3168: LD_VAR 0 2
3172: ARRAY
3173: PUSH
3174: LD_VAR 0 9
3178: ARRAY
3179: PPUSH
3180: LD_INT 2
3182: PPUSH
3183: CALL_OW 260
3187: PPUSH
3188: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3192: LD_VAR 0 10
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_LOC 2
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: PUSH
3211: LD_VAR 0 9
3215: ARRAY
3216: PPUSH
3217: LD_INT 1
3219: PPUSH
3220: CALL_OW 260
3224: PPUSH
3225: CALL_OW 239
// end ; if building then
3229: LD_VAR 0 6
3233: IFFALSE 3251
// PlaceHumanInUnit ( un , building ) else
3235: LD_VAR 0 10
3239: PPUSH
3240: LD_VAR 0 6
3244: PPUSH
3245: CALL_OW 52
3249: GO 3278
// PlaceUnitXYR ( un , x , y , r , false ) ;
3251: LD_VAR 0 10
3255: PPUSH
3256: LD_VAR 0 3
3260: PPUSH
3261: LD_VAR 0 4
3265: PPUSH
3266: LD_VAR 0 5
3270: PPUSH
3271: LD_INT 0
3273: PPUSH
3274: CALL_OW 50
// result := result ^ [ un ] ;
3278: LD_ADDR_VAR 0 7
3282: PUSH
3283: LD_VAR 0 7
3287: PUSH
3288: LD_VAR 0 10
3292: PUSH
3293: EMPTY
3294: LIST
3295: ADD
3296: ST_TO_ADDR
// end ;
3297: GO 2880
3299: POP
3300: POP
// if not global_defined then
3301: LD_LOC 3
3305: NOT
3306: IFFALSE 3384
// if ( global_units >= cl ) then
3308: LD_LOC 2
3312: PUSH
3313: LD_VAR 0 2
3317: GREATEREQUAL
3318: IFFALSE 3359
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3320: LD_ADDR_LOC 2
3324: PUSH
3325: LD_LOC 2
3329: PPUSH
3330: LD_VAR 0 2
3334: PPUSH
3335: LD_LOC 2
3339: PUSH
3340: LD_VAR 0 2
3344: ARRAY
3345: PUSH
3346: LD_VAR 0 7
3350: ADD
3351: PPUSH
3352: CALL_OW 1
3356: ST_TO_ADDR
3357: GO 3384
// global_units := Replace ( global_units , cl , result ) ;
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PPUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_VAR 0 7
3378: PPUSH
3379: CALL_OW 1
3383: ST_TO_ADDR
// if commander then
3384: LD_LOC 1
3388: IFFALSE 3435
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3390: LD_ADDR_EXP 45
3394: PUSH
3395: LD_EXP 45
3399: PPUSH
3400: LD_OWVAR 20
3404: PPUSH
3405: LD_EXP 45
3409: PUSH
3410: LD_OWVAR 20
3414: ARRAY
3415: PUSH
3416: LD_VAR 0 10
3420: ADD
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// commander := false ;
3427: LD_ADDR_LOC 1
3431: PUSH
3432: LD_INT 0
3434: ST_TO_ADDR
// end ; end ;
3435: LD_VAR 0 7
3439: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3440: LD_INT 0
3442: PPUSH
3443: PPUSH
3444: PPUSH
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
3450: PPUSH
// if side in [ 0 , 9 ] then
3451: LD_VAR 0 1
3455: PUSH
3456: LD_INT 0
3458: PUSH
3459: LD_INT 9
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: IN
3466: IFFALSE 3470
// exit ;
3468: GO 4520
// pos := Side_Positions [ side ] ;
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: LD_EXP 34
3479: PUSH
3480: LD_VAR 0 1
3484: ARRAY
3485: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3486: LD_ADDR_OWVAR 21
3490: PUSH
3491: LD_EXP 35
3495: PUSH
3496: LD_VAR 0 1
3500: ARRAY
3501: ST_TO_ADDR
// uc_side := side ;
3502: LD_ADDR_OWVAR 20
3506: PUSH
3507: LD_VAR 0 1
3511: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: LD_EXP 37
3521: PUSH
3522: LD_VAR 0 3
3526: ARRAY
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3532: LD_ADDR_VAR 0 5
3536: PUSH
3537: LD_EXP 37
3541: PUSH
3542: LD_VAR 0 3
3546: ARRAY
3547: PUSH
3548: LD_INT 2
3550: ARRAY
3551: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3552: LD_ADDR_VAR 0 6
3556: PUSH
3557: LD_EXP 37
3561: PUSH
3562: LD_VAR 0 3
3566: ARRAY
3567: PUSH
3568: LD_INT 3
3570: ARRAY
3571: ST_TO_ADDR
// if is_depot then
3572: LD_EXP 17
3576: IFFALSE 3709
// begin bc_type = b_depot ;
3578: LD_ADDR_OWVAR 42
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3586: LD_ADDR_VAR 0 10
3590: PUSH
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 5
3600: PPUSH
3601: LD_VAR 0 6
3605: PPUSH
3606: CALL_OW 47
3610: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3611: LD_VAR 0 10
3615: PPUSH
3616: LD_STRING @
3618: PUSH
3619: LD_VAR 0 1
3623: STR
3624: PPUSH
3625: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3629: LD_VAR 0 10
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_EXP 22
3646: PUSH
3647: LD_INT 1
3649: ARRAY
3650: PPUSH
3651: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3655: LD_VAR 0 10
3659: PPUSH
3660: CALL_OW 274
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: LD_EXP 22
3672: PUSH
3673: LD_INT 2
3675: ARRAY
3676: PPUSH
3677: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3681: LD_VAR 0 10
3685: PPUSH
3686: CALL_OW 274
3690: PPUSH
3691: LD_INT 3
3693: PPUSH
3694: LD_EXP 22
3698: PUSH
3699: LD_INT 3
3701: ARRAY
3702: PPUSH
3703: CALL_OW 277
// end else
3707: GO 3853
// begin for i := 1 to 3 do
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: FOR_TO
3723: IFFALSE 3851
// begin r := starting_resources [ i ] ;
3725: LD_ADDR_VAR 0 8
3729: PUSH
3730: LD_EXP 22
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: ST_TO_ADDR
// while r >= 10 do
3741: LD_VAR 0 8
3745: PUSH
3746: LD_INT 10
3748: GREATEREQUAL
3749: IFFALSE 3849
// if r > 50 then
3751: LD_VAR 0 8
3755: PUSH
3756: LD_INT 50
3758: GREATER
3759: IFFALSE 3805
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3761: LD_VAR 0 7
3765: PPUSH
3766: LD_INT 5
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 4
3781: PPUSH
3782: LD_INT 0
3784: PPUSH
3785: CALL_OW 60
// r := r - 50 ;
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: LD_VAR 0 8
3798: PUSH
3799: LD_INT 50
3801: MINUS
3802: ST_TO_ADDR
// end else
3803: GO 3847
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3805: LD_VAR 0 7
3809: PPUSH
3810: LD_VAR 0 8
3814: PUSH
3815: LD_INT 10
3817: DIV
3818: PPUSH
3819: LD_VAR 0 4
3823: PPUSH
3824: LD_VAR 0 5
3828: PPUSH
3829: LD_INT 4
3831: PPUSH
3832: LD_INT 0
3834: PPUSH
3835: CALL_OW 60
// r := 0 ;
3839: LD_ADDR_VAR 0 8
3843: PUSH
3844: LD_INT 0
3846: ST_TO_ADDR
// end ;
3847: GO 3741
// end ;
3849: GO 3722
3851: POP
3852: POP
// end ; for r in starting_crates do
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_EXP 21
3862: PUSH
3863: FOR_IN
3864: IFFALSE 3896
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: LD_VAR 0 5
3881: PPUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_INT 0
3889: PPUSH
3890: CALL_OW 60
3894: GO 3863
3896: POP
3897: POP
// if def_morale_flags then
3898: LD_EXP 9
3902: IFFALSE 4041
// begin x := start_def [ pos ] [ 1 ] ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_EXP 39
3913: PUSH
3914: LD_VAR 0 3
3918: ARRAY
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3924: LD_ADDR_VAR 0 5
3928: PUSH
3929: LD_EXP 39
3933: PUSH
3934: LD_VAR 0 3
3938: ARRAY
3939: PUSH
3940: LD_INT 2
3942: ARRAY
3943: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3944: LD_VAR 0 4
3948: PPUSH
3949: LD_VAR 0 5
3953: PPUSH
3954: LD_INT 12
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3964: LD_ADDR_EXP 44
3968: PUSH
3969: LD_EXP 44
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: LD_VAR 0 4
3983: PPUSH
3984: LD_VAR 0 5
3988: PPUSH
3989: LD_INT 1
3991: PUSH
3992: LD_INT 100
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: LD_INT 50
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 20
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 20
4021: PUSH
4022: LD_INT 100
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 418
4039: ADD
4040: ST_TO_ADDR
// end ; commander := true ;
4041: LD_ADDR_LOC 1
4045: PUSH
4046: LD_INT 1
4048: ST_TO_ADDR
// soldiers_created := 0 ;
4049: LD_ADDR_LOC 4
4053: PUSH
4054: LD_INT 0
4056: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4057: LD_ADDR_VAR 0 7
4061: PUSH
4062: DOUBLE
4063: LD_INT 1
4065: DEC
4066: ST_TO_ADDR
4067: LD_EXP 18
4071: PUSH
4072: FOR_TO
4073: IFFALSE 4226
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4075: LD_ADDR_VAR 0 4
4079: PUSH
4080: LD_EXP 38
4084: PUSH
4085: LD_VAR 0 3
4089: ARRAY
4090: PUSH
4091: LD_VAR 0 7
4095: ARRAY
4096: PUSH
4097: LD_INT 1
4099: ARRAY
4100: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4101: LD_ADDR_VAR 0 5
4105: PUSH
4106: LD_EXP 38
4110: PUSH
4111: LD_VAR 0 3
4115: ARRAY
4116: PUSH
4117: LD_VAR 0 7
4121: ARRAY
4122: PUSH
4123: LD_INT 2
4125: ARRAY
4126: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4127: LD_ADDR_VAR 0 6
4131: PUSH
4132: LD_EXP 38
4136: PUSH
4137: LD_VAR 0 3
4141: ARRAY
4142: PUSH
4143: LD_VAR 0 7
4147: ARRAY
4148: PUSH
4149: LD_INT 3
4151: ARRAY
4152: ST_TO_ADDR
// bc_type := b_breastwork ;
4153: LD_ADDR_OWVAR 42
4157: PUSH
4158: LD_INT 31
4160: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_VAR 0 4
4170: PPUSH
4171: LD_VAR 0 5
4175: PPUSH
4176: LD_VAR 0 6
4180: PPUSH
4181: CALL_OW 47
4185: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4186: LD_INT 1
4188: PPUSH
4189: LD_INT 1
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: LD_INT 0
4200: PPUSH
4201: LD_VAR 0 9
4205: PPUSH
4206: CALL 2852 0 6
// soldiers_created := soldiers_created + 1 ;
4210: LD_ADDR_LOC 4
4214: PUSH
4215: LD_LOC 4
4219: PUSH
4220: LD_INT 1
4222: PLUS
4223: ST_TO_ADDR
// end ;
4224: GO 4072
4226: POP
4227: POP
// x := start_def [ pos ] [ 1 ] ;
4228: LD_ADDR_VAR 0 4
4232: PUSH
4233: LD_EXP 39
4237: PUSH
4238: LD_VAR 0 3
4242: ARRAY
4243: PUSH
4244: LD_INT 1
4246: ARRAY
4247: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_EXP 39
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4268: LD_LOC 8
4272: PUSH
4273: LD_EXP 18
4277: MINUS
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_VAR 0 4
4286: PPUSH
4287: LD_VAR 0 5
4291: PPUSH
4292: LD_INT 5
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL 2852 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4302: LD_LOC 5
4306: PPUSH
4307: LD_INT 2
4309: PPUSH
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 5
4322: PPUSH
4323: LD_INT 0
4325: PPUSH
4326: CALL 2852 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4330: LD_LOC 7
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: LD_VAR 0 4
4342: PPUSH
4343: LD_VAR 0 5
4347: PPUSH
4348: LD_INT 5
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL 2852 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4358: LD_LOC 6
4362: PPUSH
4363: LD_INT 4
4365: PPUSH
4366: LD_VAR 0 4
4370: PPUSH
4371: LD_VAR 0 5
4375: PPUSH
4376: LD_INT 5
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL 2852 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4386: LD_EXP 10
4390: PUSH
4391: LD_INT 20
4393: PPUSH
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 321
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: AND
4408: IFFALSE 4425
// SetTech ( tech_SibDet , side , state_researched ) ;
4410: LD_INT 20
4412: PPUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 2
4420: PPUSH
4421: CALL_OW 322
// if def_siberite_bomb = 1 then
4425: LD_EXP 13
4429: PUSH
4430: LD_INT 1
4432: EQUAL
4433: IFFALSE 4467
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4435: LD_INT 25
4437: PPUSH
4438: LD_VAR 0 1
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4450: LD_INT 73
4452: PPUSH
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 1
4460: PPUSH
4461: CALL_OW 322
// end else
4465: GO 4497
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4467: LD_INT 25
4469: PPUSH
4470: LD_VAR 0 1
4474: PPUSH
4475: LD_INT 0
4477: PPUSH
4478: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4482: LD_INT 73
4484: PPUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 0
4492: PPUSH
4493: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4497: LD_INT 24
4499: PPUSH
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 322
// global_defined := true ;
4512: LD_ADDR_LOC 3
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// end ;
4520: LD_VAR 0 2
4524: RET
// function prepare_sides ; var i ; begin
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
// global_units := [ ] ;
4529: LD_ADDR_LOC 2
4533: PUSH
4534: EMPTY
4535: ST_TO_ADDR
// global_defined := false ;
4536: LD_ADDR_LOC 3
4540: PUSH
4541: LD_INT 0
4543: ST_TO_ADDR
// CountClassMembers ;
4544: CALL 4594 0 0
// for i := 1 to 8 do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: DOUBLE
4554: LD_INT 1
4556: DEC
4557: ST_TO_ADDR
4558: LD_INT 8
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4587
// if Side_Positions [ i ] then
4564: LD_EXP 34
4568: PUSH
4569: LD_VAR 0 2
4573: ARRAY
4574: IFFALSE 4585
// prepare_side ( i ) ;
4576: LD_VAR 0 2
4580: PPUSH
4581: CALL 3440 0 1
4585: GO 4561
4587: POP
4588: POP
// end ;
4589: LD_VAR 0 1
4593: RET
// function CountClassMembers ; var Mode ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
// if No_Mechs then
4598: LD_EXP 15
4602: IFFALSE 4614
// Mode := 2 else
4604: LD_ADDR_VAR 0 2
4608: PUSH
4609: LD_INT 2
4611: ST_TO_ADDR
4612: GO 4622
// Mode := 1 ;
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// neng := number_of_people ;
4622: LD_ADDR_LOC 5
4626: PUSH
4627: LD_EXP 19
4631: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4632: LD_ADDR_LOC 8
4636: PUSH
4637: LD_LOC 5
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: LD_INT 3
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_VAR 0 2
4656: ARRAY
4657: DIV
4658: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4659: LD_LOC 8
4663: PUSH
4664: LD_EXP 18
4668: LESS
4669: IFFALSE 4681
// nsol := number_of_breastworks ;
4671: LD_ADDR_LOC 8
4675: PUSH
4676: LD_EXP 18
4680: ST_TO_ADDR
// neng := neng - nsol ;
4681: LD_ADDR_LOC 5
4685: PUSH
4686: LD_LOC 5
4690: PUSH
4691: LD_LOC 8
4695: MINUS
4696: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4697: LD_ADDR_LOC 6
4701: PUSH
4702: LD_LOC 5
4706: PUSH
4707: LD_INT 3
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_VAR 0 2
4721: ARRAY
4722: DIV
4723: ST_TO_ADDR
// if ( nsci < 1 ) then
4724: LD_LOC 6
4728: PUSH
4729: LD_INT 1
4731: LESS
4732: IFFALSE 4742
// nsci := 1 ;
4734: LD_ADDR_LOC 6
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// neng := neng - nsci ;
4742: LD_ADDR_LOC 5
4746: PUSH
4747: LD_LOC 5
4751: PUSH
4752: LD_LOC 6
4756: MINUS
4757: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4758: LD_ADDR_LOC 7
4762: PUSH
4763: LD_LOC 5
4767: PUSH
4768: LD_INT 2
4770: DIV
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_VAR 0 2
4783: ARRAY
4784: ST_TO_ADDR
// neng := neng - nmech ;
4785: LD_ADDR_LOC 5
4789: PUSH
4790: LD_LOC 5
4794: PUSH
4795: LD_LOC 7
4799: MINUS
4800: ST_TO_ADDR
// if ( neng < 1 ) then
4801: LD_LOC 5
4805: PUSH
4806: LD_INT 1
4808: LESS
4809: IFFALSE 4819
// neng := 1 ;
4811: LD_ADDR_LOC 5
4815: PUSH
4816: LD_INT 1
4818: ST_TO_ADDR
// end ;
4819: LD_VAR 0 1
4823: RET
// starting begin disable ( 98 ) ;
4824: LD_INT 98
4826: DISABLE_MARKED
// disable ( 99 ) ;
4827: LD_INT 99
4829: DISABLE_MARKED
// disable ( 400 ) ;
4830: LD_INT 400
4832: DISABLE_MARKED
// disable ( 401 ) ;
4833: LD_INT 401
4835: DISABLE_MARKED
// mp_selectmsg := true ;
4836: LD_ADDR_OWVAR 13
4840: PUSH
4841: LD_INT 1
4843: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4844: CALL 68 0 0
// init_map ;
4848: CALL 1237 0 0
// init_respawning ;
4852: CALL 13970 0 0
// set_shared_visions_and_alliances ;
4856: CALL 2564 0 0
// ResetFog ;
4860: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4864: LD_OWVAR 2
4868: PPUSH
4869: CALL_OW 520
// AnimateTrees ( true ) ;
4873: LD_INT 1
4875: PPUSH
4876: CALL_OW 573
// prepare_sides ;
4880: CALL 4525 0 0
// Init_Win_Condition ;
4884: CALL 7951 0 0
// ShowTimer ;
4888: CALL 7529 0 0
// music_nat := Side_Nations [ your_side ] ;
4892: LD_ADDR_OWVAR 71
4896: PUSH
4897: LD_EXP 35
4901: PUSH
4902: LD_OWVAR 2
4906: ARRAY
4907: ST_TO_ADDR
// if IAmSpec then
4908: CALL_OW 531
4912: IFFALSE 4936
// begin fogoff ( true ) ;
4914: LD_INT 1
4916: PPUSH
4917: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4921: LD_INT 130
4923: PPUSH
4924: LD_INT 100
4926: PPUSH
4927: CALL_OW 86
// enable ( 400 ) ;
4931: LD_INT 400
4933: ENABLE_MARKED
// end else
4934: GO 4982
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4936: LD_EXP 39
4940: PUSH
4941: LD_EXP 34
4945: PUSH
4946: LD_OWVAR 2
4950: ARRAY
4951: ARRAY
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PPUSH
4957: LD_EXP 39
4961: PUSH
4962: LD_EXP 34
4966: PUSH
4967: LD_OWVAR 2
4971: ARRAY
4972: ARRAY
4973: PUSH
4974: LD_INT 2
4976: ARRAY
4977: PPUSH
4978: CALL_OW 86
// end ; InitApeman ;
4982: CALL 6059 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
4986: LD_ADDR_EXP 55
4990: PUSH
4991: LD_INT 9
4993: PUSH
4994: LD_INT 10
4996: PUSH
4997: LD_INT 11
4999: PUSH
5000: LD_INT 12
5002: PUSH
5003: LD_INT 13
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 15
5011: PUSH
5012: LD_INT 16
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: ST_TO_ADDR
// BeginBuildUp ;
5025: CALL 14464 0 0
// end ;
5029: END
// every 0 0$1 do
5030: GO 5032
5032: DISABLE
// if ( def_siberite_bomb > 1 ) then
5033: LD_EXP 13
5037: PUSH
5038: LD_INT 1
5040: GREATER
5041: IFFALSE 5056
// begin wait ( siberite_bomb_Delay ) ;
5043: LD_EXP 29
5047: PPUSH
5048: CALL_OW 67
// EnableSibFiss ;
5052: CALL 5057 0 0
// end ;
5056: END
// function EnableSibFiss ; var i ; begin
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// for i := 1 to 8 do
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: DOUBLE
5067: LD_INT 1
5069: DEC
5070: ST_TO_ADDR
5071: LD_INT 8
5073: PUSH
5074: FOR_TO
5075: IFFALSE 5121
// if Side_Positions [ i ] then
5077: LD_EXP 34
5081: PUSH
5082: LD_VAR 0 2
5086: ARRAY
5087: IFFALSE 5119
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5089: LD_INT 25
5091: PPUSH
5092: LD_VAR 0 2
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5104: LD_INT 73
5106: PPUSH
5107: LD_VAR 0 2
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 322
// end ;
5119: GO 5074
5121: POP
5122: POP
// end ; end_of_file
5123: LD_VAR 0 1
5127: RET
// every 0 0$25 + 0 0$1.0 do
5128: GO 5130
5130: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5131: LD_INT 18
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5182
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_INT 18
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5182: LD_INT 19
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 287
5192: PUSH
5193: LD_INT 200
5195: PUSH
5196: LD_EXP 23
5200: MINUS
5201: PUSH
5202: LD_INT 50
5204: DIVREAL
5205: PUSH
5206: LD_INT 5
5208: MUL
5209: LESS
5210: IFFALSE 5233
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5212: LD_INT 3
5214: PPUSH
5215: LD_INT 4
5217: PPUSH
5218: CALL_OW 12
5222: PPUSH
5223: LD_INT 19
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5233: LD_INT 20
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 287
5243: PUSH
5244: LD_INT 200
5246: PUSH
5247: LD_EXP 23
5251: MINUS
5252: PUSH
5253: LD_INT 50
5255: DIVREAL
5256: PUSH
5257: LD_INT 5
5259: MUL
5260: LESS
5261: IFFALSE 5284
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5263: LD_INT 3
5265: PPUSH
5266: LD_INT 4
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: LD_INT 20
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5284: LD_INT 21
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 287
5294: PUSH
5295: LD_INT 200
5297: PUSH
5298: LD_EXP 23
5302: MINUS
5303: PUSH
5304: LD_INT 50
5306: DIVREAL
5307: PUSH
5308: LD_INT 5
5310: MUL
5311: LESS
5312: IFFALSE 5335
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5314: LD_INT 3
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: CALL_OW 12
5324: PPUSH
5325: LD_INT 21
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5335: LD_INT 22
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: CALL_OW 287
5345: PUSH
5346: LD_INT 200
5348: PUSH
5349: LD_EXP 23
5353: MINUS
5354: PUSH
5355: LD_INT 25
5357: DIVREAL
5358: PUSH
5359: LD_INT 5
5361: MUL
5362: LESS
5363: IFFALSE 5378
// CreateCratesArea ( 5 , Center1 , true ) ;
5365: LD_INT 5
5367: PPUSH
5368: LD_INT 22
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5378: LD_INT 23
5380: PPUSH
5381: LD_INT 1
5383: PPUSH
5384: CALL_OW 287
5388: PUSH
5389: LD_INT 200
5391: PUSH
5392: LD_EXP 23
5396: MINUS
5397: PUSH
5398: LD_INT 25
5400: DIVREAL
5401: PUSH
5402: LD_INT 5
5404: MUL
5405: LESS
5406: IFFALSE 5421
// CreateCratesArea ( 5 , Center2 , true ) ;
5408: LD_INT 5
5410: PPUSH
5411: LD_INT 23
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: CALL_OW 55
// enable ;
5421: ENABLE
// end ;
5422: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5423: GO 5425
5425: DISABLE
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
// begin case tick of 1 .. 1 1$0 :
5430: LD_OWVAR 1
5434: PUSH
5435: LD_INT 1
5437: DOUBLE
5438: GREATEREQUAL
5439: IFFALSE 5447
5441: LD_INT 2100
5443: DOUBLE
5444: LESSEQUAL
5445: IFTRUE 5449
5447: GO 5477
5449: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5450: LD_EXP 23
5454: PUSH
5455: LD_INT 100
5457: DIVREAL
5458: PUSH
5459: LD_INT 525
5461: PPUSH
5462: LD_INT 1050
5464: PPUSH
5465: CALL_OW 12
5469: MUL
5470: PPUSH
5471: CALL_OW 67
5475: GO 5779
5477: LD_INT 2100
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: DOUBLE
5484: GREATEREQUAL
5485: IFFALSE 5493
5487: LD_INT 10500
5489: DOUBLE
5490: LESSEQUAL
5491: IFTRUE 5495
5493: GO 5523
5495: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5496: LD_EXP 23
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 1050
5507: PPUSH
5508: LD_INT 1750
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
5521: GO 5779
5523: LD_INT 10500
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: DOUBLE
5530: GREATEREQUAL
5531: IFFALSE 5539
5533: LD_INT 21000
5535: DOUBLE
5536: LESSEQUAL
5537: IFTRUE 5541
5539: GO 5569
5541: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5542: LD_EXP 23
5546: PUSH
5547: LD_INT 100
5549: DIVREAL
5550: PUSH
5551: LD_INT 1750
5553: PPUSH
5554: LD_INT 2100
5556: PPUSH
5557: CALL_OW 12
5561: MUL
5562: PPUSH
5563: CALL_OW 67
5567: GO 5779
5569: LD_INT 21000
5571: PUSH
5572: LD_INT 1
5574: PLUS
5575: DOUBLE
5576: GREATEREQUAL
5577: IFFALSE 5585
5579: LD_INT 42000
5581: DOUBLE
5582: LESSEQUAL
5583: IFTRUE 5587
5585: GO 5615
5587: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5588: LD_EXP 23
5592: PUSH
5593: LD_INT 100
5595: DIVREAL
5596: PUSH
5597: LD_INT 2100
5599: PPUSH
5600: LD_INT 2275
5602: PPUSH
5603: CALL_OW 12
5607: MUL
5608: PPUSH
5609: CALL_OW 67
5613: GO 5779
5615: LD_INT 42000
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: DOUBLE
5622: GREATEREQUAL
5623: IFFALSE 5631
5625: LD_INT 63000
5627: DOUBLE
5628: LESSEQUAL
5629: IFTRUE 5633
5631: GO 5661
5633: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5634: LD_EXP 23
5638: PUSH
5639: LD_INT 100
5641: DIVREAL
5642: PUSH
5643: LD_INT 2275
5645: PPUSH
5646: LD_INT 2450
5648: PPUSH
5649: CALL_OW 12
5653: MUL
5654: PPUSH
5655: CALL_OW 67
5659: GO 5779
5661: LD_INT 63000
5663: PUSH
5664: LD_INT 1
5666: PLUS
5667: DOUBLE
5668: GREATEREQUAL
5669: IFFALSE 5677
5671: LD_INT 105000
5673: DOUBLE
5674: LESSEQUAL
5675: IFTRUE 5679
5677: GO 5707
5679: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5680: LD_EXP 23
5684: PUSH
5685: LD_INT 100
5687: DIVREAL
5688: PUSH
5689: LD_INT 2450
5691: PPUSH
5692: LD_INT 2800
5694: PPUSH
5695: CALL_OW 12
5699: MUL
5700: PPUSH
5701: CALL_OW 67
5705: GO 5779
5707: LD_INT 105000
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: DOUBLE
5714: GREATEREQUAL
5715: IFFALSE 5723
5717: LD_INT 630000
5719: DOUBLE
5720: LESSEQUAL
5721: IFTRUE 5725
5723: GO 5753
5725: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5726: LD_EXP 23
5730: PUSH
5731: LD_INT 100
5733: DIVREAL
5734: PUSH
5735: LD_INT 2800
5737: PPUSH
5738: LD_INT 3500
5740: PPUSH
5741: CALL_OW 12
5745: MUL
5746: PPUSH
5747: CALL_OW 67
5751: GO 5779
5753: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5754: LD_EXP 23
5758: PUSH
5759: LD_INT 100
5761: DIVREAL
5762: PUSH
5763: LD_INT 3500
5765: PPUSH
5766: LD_INT 3850
5768: PPUSH
5769: CALL_OW 12
5773: MUL
5774: PPUSH
5775: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5779: LD_ADDR_VAR 0 2
5783: PUSH
5784: LD_INT 3
5786: PPUSH
5787: LD_INT 5
5789: PPUSH
5790: CALL_OW 12
5794: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5795: LD_ADDR_VAR 0 1
5799: PUSH
5800: LD_EXP 34
5804: PUSH
5805: LD_INT 0
5807: PUSH
5808: EMPTY
5809: LIST
5810: DIFF
5811: PUSH
5812: FOR_IN
5813: IFFALSE 5862
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5815: LD_VAR 0 2
5819: PPUSH
5820: LD_EXP 39
5824: PUSH
5825: LD_VAR 0 1
5829: ARRAY
5830: PUSH
5831: LD_INT 1
5833: ARRAY
5834: PPUSH
5835: LD_EXP 39
5839: PUSH
5840: LD_VAR 0 1
5844: ARRAY
5845: PUSH
5846: LD_INT 2
5848: ARRAY
5849: PPUSH
5850: LD_INT 20
5852: PPUSH
5853: LD_INT 1
5855: PPUSH
5856: CALL_OW 56
5860: GO 5812
5862: POP
5863: POP
// enable ;
5864: ENABLE
// end ; end_of_file
5865: PPOPN 2
5867: END
// every 20 20$00 trigger apemanNumber do
5868: LD_EXP 46
5872: IFFALSE 5905
5874: GO 5876
5876: DISABLE
// begin enable ;
5877: ENABLE
// if apeLevel >= 8 then
5878: LD_EXP 51
5882: PUSH
5883: LD_INT 8
5885: GREATEREQUAL
5886: IFFALSE 5891
// disable else
5888: DISABLE
5889: GO 5905
// apeLevel := apeLevel + 1 ;
5891: LD_ADDR_EXP 51
5895: PUSH
5896: LD_EXP 51
5900: PUSH
5901: LD_INT 1
5903: PLUS
5904: ST_TO_ADDR
// end ;
5905: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5906: LD_EXP 46
5910: PUSH
5911: LD_EXP 47
5915: LESS
5916: IFFALSE 6056
5918: GO 5920
5920: DISABLE
5921: LD_INT 0
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
// begin enable ;
5927: ENABLE
// for i := 1 to apemanPos do
5928: LD_ADDR_VAR 0 1
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_EXP 49
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6054
// begin if apemanPlayerCount [ i ] then
5946: LD_EXP 50
5950: PUSH
5951: LD_VAR 0 1
5955: ARRAY
5956: IFFALSE 6052
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5958: LD_EXP 50
5962: PUSH
5963: LD_VAR 0 1
5967: ARRAY
5968: PUSH
5969: LD_EXP 49
5973: PUSH
5974: LD_VAR 0 1
5978: ARRAY
5979: GREATER
5980: IFFALSE 6052
// begin ape := PrepareApeman ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: CALL 6575 0 0
5991: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5992: LD_VAR 0 2
5996: PPUSH
5997: LD_EXP 52
6001: PUSH
6002: LD_VAR 0 1
6006: ARRAY
6007: PPUSH
6008: LD_INT 0
6010: PPUSH
6011: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6015: LD_ADDR_EXP 49
6019: PUSH
6020: LD_EXP 49
6024: PPUSH
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_EXP 49
6034: PUSH
6035: LD_VAR 0 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: UNION
6046: PPUSH
6047: CALL_OW 1
6051: ST_TO_ADDR
// end ; end ; end ;
6052: GO 5943
6054: POP
6055: POP
// end ;
6056: PPOPN 4
6058: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6059: LD_INT 0
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
// playersAmount := 0 ;
6068: LD_ADDR_VAR 0 3
6072: PUSH
6073: LD_INT 0
6075: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6076: LD_ADDR_VAR 0 7
6080: PUSH
6081: LD_INT 1
6083: PUSH
6084: LD_INT 2
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: LD_INT 4
6092: PUSH
6093: LD_INT 5
6095: PUSH
6096: LD_INT 6
6098: PUSH
6099: LD_INT 7
6101: PUSH
6102: LD_INT 8
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6115: LD_ADDR_EXP 52
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: LD_INT 0
6131: PUSH
6132: LD_INT 0
6134: PUSH
6135: LD_INT 0
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
// for j = 1 to Side_Positions do
6154: LD_ADDR_VAR 0 4
6158: PUSH
6159: DOUBLE
6160: LD_INT 1
6162: DEC
6163: ST_TO_ADDR
6164: LD_EXP 34
6168: PUSH
6169: FOR_TO
6170: IFFALSE 6237
// if Side_Positions [ j ] then
6172: LD_EXP 34
6176: PUSH
6177: LD_VAR 0 4
6181: ARRAY
6182: IFFALSE 6235
// begin playersAmount := playersAmount + 1 ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_VAR 0 3
6193: PUSH
6194: LD_INT 1
6196: PLUS
6197: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6198: LD_ADDR_EXP 52
6202: PUSH
6203: LD_EXP 52
6207: PPUSH
6208: LD_VAR 0 4
6212: PPUSH
6213: LD_VAR 0 7
6217: PUSH
6218: LD_EXP 34
6222: PUSH
6223: LD_VAR 0 4
6227: ARRAY
6228: ARRAY
6229: PPUSH
6230: CALL_OW 1
6234: ST_TO_ADDR
// end ;
6235: GO 6169
6237: POP
6238: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6239: LD_ADDR_EXP 48
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_EXP 25
6251: MUL
6252: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6253: LD_ADDR_EXP 46
6257: PUSH
6258: LD_VAR 0 3
6262: PUSH
6263: LD_EXP 48
6267: MUL
6268: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6269: LD_ADDR_EXP 47
6273: PUSH
6274: LD_EXP 46
6278: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6279: LD_ADDR_EXP 49
6283: PUSH
6284: LD_INT 0
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6318: LD_ADDR_EXP 50
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: LD_INT 0
6337: PUSH
6338: LD_INT 0
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// apeLevel := 1 ;
6357: LD_ADDR_EXP 51
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// if not apemanNumber then
6365: LD_EXP 46
6369: NOT
6370: IFFALSE 6374
// exit ;
6372: GO 6570
// for i := 1 to apemanPerPlayer do
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_EXP 48
6388: PUSH
6389: FOR_TO
6390: IFFALSE 6568
// begin for j := 1 to Side_Positions do
6392: LD_ADDR_VAR 0 4
6396: PUSH
6397: DOUBLE
6398: LD_INT 1
6400: DEC
6401: ST_TO_ADDR
6402: LD_EXP 34
6406: PUSH
6407: FOR_TO
6408: IFFALSE 6564
// if Side_Positions [ j ] then
6410: LD_EXP 34
6414: PUSH
6415: LD_VAR 0 4
6419: ARRAY
6420: IFFALSE 6562
// begin pos := Side_Positions [ j ] ;
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_EXP 34
6431: PUSH
6432: LD_VAR 0 4
6436: ARRAY
6437: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6438: LD_ADDR_EXP 50
6442: PUSH
6443: LD_EXP 50
6447: PPUSH
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_EXP 50
6457: PUSH
6458: LD_VAR 0 4
6462: ARRAY
6463: PUSH
6464: LD_INT 1
6466: PLUS
6467: PPUSH
6468: CALL_OW 1
6472: ST_TO_ADDR
// ape := PrepareApeman ;
6473: LD_ADDR_VAR 0 5
6477: PUSH
6478: CALL 6575 0 0
6482: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6483: LD_ADDR_EXP 49
6487: PUSH
6488: LD_EXP 49
6492: PPUSH
6493: LD_VAR 0 4
6497: PPUSH
6498: LD_EXP 49
6502: PUSH
6503: LD_VAR 0 4
6507: ARRAY
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_VAR 0 4
6518: ARRAY
6519: PUSH
6520: LD_INT 1
6522: PLUS
6523: PPUSH
6524: LD_VAR 0 5
6528: PPUSH
6529: CALL_OW 1
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6539: LD_VAR 0 5
6543: PPUSH
6544: LD_EXP 52
6548: PUSH
6549: LD_VAR 0 4
6553: ARRAY
6554: PPUSH
6555: LD_INT 0
6557: PPUSH
6558: CALL_OW 49
// end ;
6562: GO 6407
6564: POP
6565: POP
// end ;
6566: GO 6389
6568: POP
6569: POP
// end ;
6570: LD_VAR 0 1
6574: RET
// export function PrepareApeman ; var bonus ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
// uc_side := 0 ;
6579: LD_ADDR_OWVAR 20
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// uc_nation := 0 ;
6587: LD_ADDR_OWVAR 21
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// InitHc ;
6595: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6599: LD_ADDR_VAR 0 2
6603: PUSH
6604: LD_INT 1
6606: NEG
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 12
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL_OW 69
6633: PUSH
6634: LD_INT 3
6636: MOD
6637: PUSH
6638: LD_INT 1
6640: PLUS
6641: ARRAY
6642: ST_TO_ADDR
// hc_class := class_apeman ;
6643: LD_ADDR_OWVAR 28
6647: PUSH
6648: LD_INT 12
6650: ST_TO_ADDR
// hc_gallery :=  ;
6651: LD_ADDR_OWVAR 33
6655: PUSH
6656: LD_STRING 
6658: ST_TO_ADDR
// hc_name :=  ;
6659: LD_ADDR_OWVAR 26
6663: PUSH
6664: LD_STRING 
6666: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6667: LD_ADDR_OWVAR 31
6671: PUSH
6672: LD_EXP 51
6676: PUSH
6677: LD_VAR 0 2
6681: PLUS
6682: PUSH
6683: LD_EXP 51
6687: PUSH
6688: LD_VAR 0 2
6692: PLUS
6693: PUSH
6694: LD_EXP 51
6698: PUSH
6699: LD_VAR 0 2
6703: PLUS
6704: PUSH
6705: LD_EXP 51
6709: PUSH
6710: LD_VAR 0 2
6714: PLUS
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6722: LD_ADDR_OWVAR 35
6726: PUSH
6727: LD_INT 10
6729: PUSH
6730: LD_VAR 0 2
6734: MUL
6735: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6736: LD_ADDR_OWVAR 29
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 12
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: ST_TO_ADDR
// result := CreateHuman ;
6751: LD_ADDR_VAR 0 1
6755: PUSH
6756: CALL_OW 44
6760: ST_TO_ADDR
// end ;
6761: LD_VAR 0 1
6765: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6766: LD_INT 0
6768: PPUSH
6769: PPUSH
6770: PPUSH
// if not ape then
6771: LD_VAR 0 1
6775: NOT
6776: IFFALSE 6780
// exit ;
6778: GO 6883
// for i = 1 to apemanPos do
6780: LD_ADDR_VAR 0 4
6784: PUSH
6785: DOUBLE
6786: LD_INT 1
6788: DEC
6789: ST_TO_ADDR
6790: LD_EXP 49
6794: PUSH
6795: FOR_TO
6796: IFFALSE 6830
// if ape in apemanPos [ i ] then
6798: LD_VAR 0 1
6802: PUSH
6803: LD_EXP 49
6807: PUSH
6808: LD_VAR 0 4
6812: ARRAY
6813: IN
6814: IFFALSE 6828
// begin s := i ;
6816: LD_ADDR_VAR 0 3
6820: PUSH
6821: LD_VAR 0 4
6825: ST_TO_ADDR
// break ;
6826: GO 6830
// end ;
6828: GO 6795
6830: POP
6831: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6832: LD_ADDR_EXP 49
6836: PUSH
6837: LD_EXP 49
6841: PPUSH
6842: LD_VAR 0 3
6846: PPUSH
6847: LD_EXP 49
6851: PUSH
6852: LD_VAR 0 3
6856: ARRAY
6857: PUSH
6858: LD_VAR 0 1
6862: DIFF
6863: PPUSH
6864: CALL_OW 1
6868: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6869: LD_ADDR_EXP 46
6873: PUSH
6874: LD_EXP 46
6878: PUSH
6879: LD_INT 1
6881: MINUS
6882: ST_TO_ADDR
// end ; end_of_file
6883: LD_VAR 0 2
6887: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6888: LD_VAR 0 1
6892: PPUSH
6893: CALL_OW 266
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: IN
6908: IFFALSE 6933
// SetBName ( b , @ & GetSide ( b ) ) ;
6910: LD_VAR 0 1
6914: PPUSH
6915: LD_STRING @
6917: PUSH
6918: LD_VAR 0 1
6922: PPUSH
6923: CALL_OW 255
6927: STR
6928: PPUSH
6929: CALL_OW 500
// end ;
6933: PPOPN 2
6935: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6936: LD_VAR 0 1
6940: PPUSH
6941: CALL_OW 266
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: LD_INT 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: IN
6956: IFFALSE 6981
// SetBName ( b , @ & GetSide ( b ) ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_STRING @
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 255
6975: STR
6976: PPUSH
6977: CALL_OW 500
// end ;
6981: PPOPN 3
6983: END
// on VehicleConstructed ( veh , fac ) do var side ;
6984: LD_INT 0
6986: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6987: LD_VAR 0 1
6991: PPUSH
6992: CALL_OW 263
6996: PUSH
6997: LD_INT 5
6999: EQUAL
7000: IFFALSE 7142
// begin side := GetSide ( veh ) ;
7002: LD_ADDR_VAR 0 3
7006: PUSH
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 255
7016: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7017: LD_ADDR_EXP 49
7021: PUSH
7022: LD_EXP 49
7026: PPUSH
7027: LD_VAR 0 3
7031: PPUSH
7032: LD_EXP 49
7036: PUSH
7037: LD_VAR 0 3
7041: ARRAY
7042: PPUSH
7043: LD_INT 52
7045: PUSH
7046: EMPTY
7047: LIST
7048: PPUSH
7049: CALL_OW 72
7053: PUSH
7054: LD_INT 22
7056: PUSH
7057: LD_VAR 0 3
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 2
7068: PUSH
7069: LD_INT 33
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 25
7081: PUSH
7082: LD_INT 12
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 25
7091: PUSH
7092: LD_INT 15
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 25
7101: PUSH
7102: LD_INT 16
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 17
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: UNION
7136: PPUSH
7137: CALL_OW 1
7141: ST_TO_ADDR
// end ; end ;
7142: PPOPN 3
7144: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
7149: PPUSH
7150: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 257
7160: PUSH
7161: LD_INT 12
7163: PUSH
7164: LD_INT 15
7166: PUSH
7167: LD_INT 17
7169: PUSH
7170: LD_INT 16
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: IN
7179: PUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: CALL_OW 263
7189: PUSH
7190: LD_INT 5
7192: EQUAL
7193: OR
7194: IFFALSE 7205
// ApeKilled ( j ) ;
7196: LD_VAR 0 1
7200: PPUSH
7201: CALL 6766 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 266
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 1
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: IN
7225: IFFALSE 7307
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7227: LD_ADDR_VAR 0 4
7231: PUSH
7232: LD_EXP 34
7236: PUSH
7237: LD_VAR 0 1
7241: PPUSH
7242: CALL_OW 255
7246: ARRAY
7247: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7248: LD_ADDR_VAR 0 2
7252: PUSH
7253: LD_EXP 39
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_EXP 39
7277: PUSH
7278: LD_VAR 0 4
7282: ARRAY
7283: PUSH
7284: LD_INT 2
7286: ARRAY
7287: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7288: LD_VAR 0 2
7292: PPUSH
7293: LD_VAR 0 3
7297: PPUSH
7298: CALL_OW 420
7302: PPUSH
7303: CALL_OW 419
// end ; end ;
7307: PPOPN 5
7309: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7310: LD_VAR 0 1
7314: PPUSH
7315: LD_VAR 0 2
7319: PPUSH
7320: LD_VAR 0 3
7324: PPUSH
7325: LD_OWVAR 2
7329: PPUSH
7330: CALL 7712 0 4
7334: PPOPN 3
7336: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7337: LD_INT 0
7339: PPUSH
7340: PPUSH
// for un in battle_flags_id do
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_EXP 44
7350: PUSH
7351: FOR_IN
7352: IFFALSE 7427
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7354: LD_VAR 0 2
7358: PPUSH
7359: LD_INT 1
7361: PUSH
7362: LD_LOC 9
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 2
7373: PUSH
7374: LD_LOC 9
7378: PUSH
7379: LD_INT 2
7381: DIV
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_LOC 9
7394: PUSH
7395: LD_INT 5
7397: DIV
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 20
7405: PUSH
7406: LD_LOC 9
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PPUSH
7421: CALL_OW 423
7425: GO 7351
7427: POP
7428: POP
// end ;
7429: LD_VAR 0 1
7433: RET
// every 1 do var un ;
7434: GO 7436
7436: DISABLE
7437: LD_INT 0
7439: PPUSH
// begin if not def_morale_flags then
7440: LD_EXP 9
7444: NOT
7445: IFFALSE 7449
// exit ;
7447: GO 7526
// if not morale_decreasing_time then
7449: LD_EXP 24
7453: NOT
7454: IFFALSE 7458
// exit ;
7456: GO 7526
// strength = 100 ;
7458: LD_ADDR_LOC 9
7462: PUSH
7463: LD_INT 100
7465: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7466: LD_EXP 24
7470: PPUSH
7471: CALL_OW 67
// strength := strength - 1 ;
7475: LD_ADDR_LOC 9
7479: PUSH
7480: LD_LOC 9
7484: PUSH
7485: LD_INT 1
7487: MINUS
7488: ST_TO_ADDR
// Update_Flags ;
7489: CALL 7337 0 0
// until not strength ;
7493: LD_LOC 9
7497: NOT
7498: IFFALSE 7466
// for un in battle_flags_id do
7500: LD_ADDR_VAR 0 1
7504: PUSH
7505: LD_EXP 44
7509: PUSH
7510: FOR_IN
7511: IFFALSE 7524
// KillBattleFlag ( un ) ;
7513: LD_VAR 0 1
7517: PPUSH
7518: CALL_OW 419
7522: GO 7510
7524: POP
7525: POP
// end ; end_of_file
7526: PPOPN 1
7528: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7529: LD_INT 0
7531: PPUSH
7532: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7533: LD_ADDR_VAR 0 2
7537: PUSH
7538: LD_STRING #Multi1x1-Time
7540: PUSH
7541: LD_OWVAR 1
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: ST_TO_ADDR
// if WaitServerStrings then
7550: LD_EXP 54
7554: IFFALSE 7572
// AllStrings = AllStrings ^ WaitServerStrings ;
7556: LD_ADDR_VAR 0 2
7560: PUSH
7561: LD_VAR 0 2
7565: PUSH
7566: LD_EXP 54
7570: ADD
7571: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7572: LD_INT 0
7574: PUSH
7575: LD_EXP 29
7579: PUSH
7580: LD_OWVAR 1
7584: MINUS
7585: LESSEQUAL
7586: IFFALSE 7617
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7588: LD_ADDR_VAR 0 2
7592: PUSH
7593: LD_VAR 0 2
7597: PUSH
7598: LD_STRING #allowedsibbomb
7600: PUSH
7601: LD_EXP 29
7605: PUSH
7606: LD_OWVAR 1
7610: MINUS
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: ADD
7616: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7617: LD_INT 0
7619: PUSH
7620: LD_EXP 57
7624: PUSH
7625: LD_OWVAR 1
7629: MINUS
7630: LESSEQUAL
7631: IFFALSE 7662
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7633: LD_ADDR_VAR 0 2
7637: PUSH
7638: LD_VAR 0 2
7642: PUSH
7643: LD_STRING #builduptime
7645: PUSH
7646: LD_EXP 57
7650: PUSH
7651: LD_OWVAR 1
7655: MINUS
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: ADD
7661: ST_TO_ADDR
// if ( ExtraStrings ) then
7662: LD_EXP 53
7666: IFFALSE 7688
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7668: LD_ADDR_VAR 0 2
7672: PUSH
7673: LD_VAR 0 2
7677: PUSH
7678: LD_STRING 
7680: ADD
7681: PUSH
7682: LD_EXP 53
7686: ADD
7687: ST_TO_ADDR
// Display_Strings := AllStrings ;
7688: LD_ADDR_OWVAR 47
7692: PUSH
7693: LD_VAR 0 2
7697: ST_TO_ADDR
// end ;
7698: LD_VAR 0 1
7702: RET
// every 0 0$1 do
7703: GO 7705
7705: DISABLE
// begin ShowTimer ;
7706: CALL 7529 0 0
// enable ;
7710: ENABLE
// end ; end_of_file
7711: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7712: LD_INT 0
7714: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 255
7724: PUSH
7725: LD_VAR 0 4
7729: EQUAL
7730: IFFALSE 7749
// begin SetAchievement ( ACH_RAD ) ;
7732: LD_STRING ACH_RAD
7734: PPUSH
7735: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7739: LD_STRING ACH_NL
7741: PPUSH
7742: LD_INT 1
7744: PPUSH
7745: CALL_OW 564
// end end ;
7749: LD_VAR 0 5
7753: RET
// export function SA_Win ( side ) ; begin
7754: LD_INT 0
7756: PPUSH
// case side of 1 :
7757: LD_VAR 0 1
7761: PUSH
7762: LD_INT 1
7764: DOUBLE
7765: EQUAL
7766: IFTRUE 7770
7768: GO 7783
7770: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7771: LD_STRING ACH_AH
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: CALL_OW 564
7781: GO 7946
7783: LD_INT 2
7785: DOUBLE
7786: EQUAL
7787: IFTRUE 7791
7789: GO 7804
7791: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7792: LD_STRING ACH_E
7794: PPUSH
7795: LD_INT 1
7797: PPUSH
7798: CALL_OW 564
7802: GO 7946
7804: LD_INT 3
7806: DOUBLE
7807: EQUAL
7808: IFTRUE 7812
7810: GO 7825
7812: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7813: LD_STRING ACH_OOL
7815: PPUSH
7816: LD_INT 1
7818: PPUSH
7819: CALL_OW 564
7823: GO 7946
7825: LD_INT 1
7827: PUSH
7828: LD_INT 2
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: DOUBLE
7835: EQUAL
7836: IFTRUE 7840
7838: GO 7865
7840: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7841: LD_STRING ACH_AH
7843: PPUSH
7844: LD_REAL  5.00000000000000E-0001
7847: PPUSH
7848: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7852: LD_STRING ACH_E
7854: PPUSH
7855: LD_REAL  5.00000000000000E-0001
7858: PPUSH
7859: CALL_OW 564
// end ; [ 2 , 3 ] :
7863: GO 7946
7865: LD_INT 2
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: DOUBLE
7875: EQUAL
7876: IFTRUE 7880
7878: GO 7905
7880: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7881: LD_STRING ACH_OOL
7883: PPUSH
7884: LD_REAL  5.00000000000000E-0001
7887: PPUSH
7888: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7892: LD_STRING ACH_E
7894: PPUSH
7895: LD_REAL  5.00000000000000E-0001
7898: PPUSH
7899: CALL_OW 564
// end ; [ 3 , 1 ] :
7903: GO 7946
7905: LD_INT 3
7907: PUSH
7908: LD_INT 1
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7945
7920: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7921: LD_STRING ACH_AH
7923: PPUSH
7924: LD_REAL  5.00000000000000E-0001
7927: PPUSH
7928: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7932: LD_STRING ACH_OOL
7934: PPUSH
7935: LD_REAL  5.00000000000000E-0001
7938: PPUSH
7939: CALL_OW 564
// end ; end ;
7943: GO 7946
7945: POP
// end ; end_of_file
7946: LD_VAR 0 2
7950: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7951: LD_INT 0
7953: PPUSH
7954: PPUSH
// enable ( 98 ) ;
7955: LD_INT 98
7957: ENABLE_MARKED
// GameEnded = false ;
7958: LD_ADDR_LOC 15
7962: PUSH
7963: LD_INT 0
7965: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7966: LD_ADDR_LOC 14
7970: PUSH
7971: LD_INT 0
7973: PUSH
7974: LD_INT 0
7976: PUSH
7977: LD_INT 0
7979: PUSH
7980: LD_INT 0
7982: PUSH
7983: LD_INT 0
7985: PUSH
7986: LD_INT 0
7988: PUSH
7989: LD_INT 0
7991: PUSH
7992: LD_INT 0
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: ST_TO_ADDR
// unfoged = false ;
8005: LD_ADDR_LOC 16
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// defeated_specs := [ ] ;
8013: LD_ADDR_LOC 17
8017: PUSH
8018: EMPTY
8019: ST_TO_ADDR
// for i = 1 to side_positions do
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: DOUBLE
8026: LD_INT 1
8028: DEC
8029: ST_TO_ADDR
8030: LD_EXP 34
8034: PUSH
8035: FOR_TO
8036: IFFALSE 8076
// if not side_positions [ i ] then
8038: LD_EXP 34
8042: PUSH
8043: LD_VAR 0 2
8047: ARRAY
8048: NOT
8049: IFFALSE 8074
// defeated = replace ( defeated , i , true ) ;
8051: LD_ADDR_LOC 14
8055: PUSH
8056: LD_LOC 14
8060: PPUSH
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: CALL_OW 1
8073: ST_TO_ADDR
8074: GO 8035
8076: POP
8077: POP
// end ;
8078: LD_VAR 0 1
8082: RET
// function CanWinLoose ; begin
8083: LD_INT 0
8085: PPUSH
// Result := true ;
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8094: CALL_OW 518
8098: PUSH
8099: CALL_OW 519
8103: PUSH
8104: LD_INT 0
8106: GREATER
8107: AND
8108: IFFALSE 8118
// Result := false ;
8110: LD_ADDR_VAR 0 1
8114: PUSH
8115: LD_INT 0
8117: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8118: CALL_OW 531
8122: PUSH
8123: CALL_OW 519
8127: PUSH
8128: LD_INT 1
8130: GREATER
8131: AND
8132: IFFALSE 8142
// Result := false ;
8134: LD_ADDR_VAR 0 1
8138: PUSH
8139: LD_INT 0
8141: ST_TO_ADDR
// end ;
8142: LD_VAR 0 1
8146: RET
// export function HasPower ( i ) ; var k , h ; begin
8147: LD_INT 0
8149: PPUSH
8150: PPUSH
8151: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8152: LD_VAR 0 1
8156: PPUSH
8157: CALL_OW 108
8161: NOT
8162: PUSH
8163: LD_EXP 33
8167: PUSH
8168: LD_VAR 0 1
8172: ARRAY
8173: NOT
8174: AND
8175: PUSH
8176: LD_OWVAR 4
8180: AND
8181: IFFALSE 8193
// begin result = false ;
8183: LD_ADDR_VAR 0 2
8187: PUSH
8188: LD_INT 0
8190: ST_TO_ADDR
// end else
8191: GO 8488
// case def_win_rules of 0 :
8193: LD_EXP 30
8197: PUSH
8198: LD_INT 0
8200: DOUBLE
8201: EQUAL
8202: IFTRUE 8206
8204: GO 8369
8206: POP
// if def_people_respawning then
8207: LD_EXP 11
8211: IFFALSE 8302
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8213: LD_ADDR_VAR 0 2
8217: PUSH
8218: LD_INT 22
8220: PUSH
8221: LD_VAR 0 1
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 21
8235: PUSH
8236: LD_INT 1
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PUSH
8243: LD_INT 33
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 33
8255: PUSH
8256: LD_INT 5
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 30
8265: PUSH
8266: LD_INT 0
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 30
8275: PUSH
8276: LD_INT 1
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PPUSH
8295: CALL_OW 69
8299: ST_TO_ADDR
8300: GO 8367
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8302: LD_ADDR_VAR 0 2
8306: PUSH
8307: LD_INT 22
8309: PUSH
8310: LD_VAR 0 1
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: LD_INT 21
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 33
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 33
8344: PUSH
8345: LD_INT 5
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: ST_TO_ADDR
8367: GO 8488
8369: LD_INT 1
8371: DOUBLE
8372: EQUAL
8373: IFTRUE 8377
8375: GO 8416
8377: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8378: LD_ADDR_VAR 0 2
8382: PUSH
8383: LD_INT 22
8385: PUSH
8386: LD_VAR 0 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 69
8413: ST_TO_ADDR
8414: GO 8488
8416: LD_INT 2
8418: DOUBLE
8419: EQUAL
8420: IFTRUE 8424
8422: GO 8487
8424: POP
// begin h = false ;
8425: LD_ADDR_VAR 0 4
8429: PUSH
8430: LD_INT 0
8432: ST_TO_ADDR
// for k in heroes [ i ] do
8433: LD_ADDR_VAR 0 3
8437: PUSH
8438: LD_EXP 45
8442: PUSH
8443: LD_VAR 0 1
8447: ARRAY
8448: PUSH
8449: FOR_IN
8450: IFFALSE 8473
// if IsLive ( k ) then
8452: LD_VAR 0 3
8456: PPUSH
8457: CALL_OW 300
8461: IFFALSE 8471
// h = true ;
8463: LD_ADDR_VAR 0 4
8467: PUSH
8468: LD_INT 1
8470: ST_TO_ADDR
8471: GO 8449
8473: POP
8474: POP
// Result := h ;
8475: LD_ADDR_VAR 0 2
8479: PUSH
8480: LD_VAR 0 4
8484: ST_TO_ADDR
// end ; end ;
8485: GO 8488
8487: POP
// end ;
8488: LD_VAR 0 2
8492: RET
// function AlliedSides ( i , j ) ; begin
8493: LD_INT 0
8495: PPUSH
// Result := false ;
8496: LD_ADDR_VAR 0 3
8500: PUSH
8501: LD_INT 0
8503: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8504: LD_VAR 0 1
8508: PPUSH
8509: LD_VAR 0 2
8513: PPUSH
8514: CALL_OW 81
8518: PUSH
8519: LD_INT 1
8521: EQUAL
8522: PUSH
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 81
8537: PUSH
8538: LD_INT 1
8540: EQUAL
8541: AND
8542: PUSH
8543: LD_VAR 0 1
8547: PPUSH
8548: CALL_OW 83
8552: AND
8553: PUSH
8554: LD_VAR 0 2
8558: PPUSH
8559: CALL_OW 83
8563: AND
8564: IFFALSE 8574
// Result := true ;
8566: LD_ADDR_VAR 0 3
8570: PUSH
8571: LD_INT 1
8573: ST_TO_ADDR
// end ;
8574: LD_VAR 0 3
8578: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8579: CALL 8083 0 0
8583: PUSH
8584: LD_LOC 15
8588: NOT
8589: AND
8590: IFFALSE 8606
8592: GO 8594
8594: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8595: LD_ADDR_EXP 54
8599: PUSH
8600: LD_STRING #Player-Ended
8602: PUSH
8603: EMPTY
8604: LIST
8605: ST_TO_ADDR
8606: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8607: CALL 8083 0 0
8611: PUSH
8612: LD_LOC 15
8616: AND
8617: IFFALSE 8626
8619: GO 8621
8621: DISABLE
// YouLostInMultiplayer ;
8622: CALL_OW 107
8626: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8627: CALL 8083 0 0
8631: NOT
8632: PUSH
8633: CALL_OW 531
8637: NOT
8638: AND
8639: IFFALSE 8655
8641: GO 8643
8643: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8644: LD_ADDR_EXP 54
8648: PUSH
8649: LD_STRING #server-wait
8651: PUSH
8652: EMPTY
8653: LIST
8654: ST_TO_ADDR
8655: END
// every 100 trigger IAmSpec do
8656: CALL_OW 531
8660: IFFALSE 8676
8662: GO 8664
8664: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8665: LD_ADDR_EXP 54
8669: PUSH
8670: LD_STRING #Player-IAmSpec
8672: PUSH
8673: EMPTY
8674: LIST
8675: ST_TO_ADDR
8676: END
// every 100 trigger GameEnded and IAmSpec do
8677: LD_LOC 15
8681: PUSH
8682: CALL_OW 531
8686: AND
8687: IFFALSE 8696
8689: GO 8691
8691: DISABLE
// YouLostInMultiplayer ;
8692: CALL_OW 107
8696: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8697: CALL 8083 0 0
8701: PUSH
8702: LD_LOC 15
8706: NOT
8707: AND
8708: IFFALSE 8724
8710: GO 8712
8712: DISABLE
// WaitServerStrings = [ $player-win ] ;
8713: LD_ADDR_EXP 54
8717: PUSH
8718: LD_STRING $player-win
8720: PUSH
8721: EMPTY
8722: LIST
8723: ST_TO_ADDR
8724: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8725: CALL 8083 0 0
8729: PUSH
8730: LD_LOC 15
8734: AND
8735: IFFALSE 8759
8737: GO 8739
8739: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8740: LD_EXP 35
8744: PUSH
8745: LD_OWVAR 7
8749: ARRAY
8750: PPUSH
8751: CALL 7754 0 1
// YouWinInMultiplayer ;
8755: CALL_OW 106
// end ;
8759: END
// every 100 trigger isEditor marked 401 do
8760: LD_OWVAR 84
8764: IFFALSE 8780
8766: GO 8768
8768: DISABLE
// Debug_Strings = [ You won ] ;
8769: LD_ADDR_OWVAR 48
8773: PUSH
8774: LD_STRING You won
8776: PUSH
8777: EMPTY
8778: LIST
8779: ST_TO_ADDR
8780: END
// every 100 trigger isEditor marked 400 do
8781: LD_OWVAR 84
8785: IFFALSE 8801
8787: GO 8789
8789: DISABLE
// Debug_Strings = [ You loss ] ;
8790: LD_ADDR_OWVAR 48
8794: PUSH
8795: LD_STRING You loss
8797: PUSH
8798: EMPTY
8799: LIST
8800: ST_TO_ADDR
8801: END
// every 100 marked 98 do var i , un ;
8802: GO 8804
8804: DISABLE
8805: LD_INT 0
8807: PPUSH
8808: PPUSH
// begin for i = 1 to side_positions do
8809: LD_ADDR_VAR 0 1
8813: PUSH
8814: DOUBLE
8815: LD_INT 1
8817: DEC
8818: ST_TO_ADDR
8819: LD_EXP 34
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8912
// begin if side_positions [ i ] then
8827: LD_EXP 34
8831: PUSH
8832: LD_VAR 0 1
8836: ARRAY
8837: IFFALSE 8910
// if not HasPower ( i ) and not defeated [ i ] then
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL 8147 0 1
8848: NOT
8849: PUSH
8850: LD_LOC 14
8854: PUSH
8855: LD_VAR 0 1
8859: ARRAY
8860: NOT
8861: AND
8862: IFFALSE 8910
// begin defeated = replace ( defeated , i , true ) ;
8864: LD_ADDR_LOC 14
8868: PUSH
8869: LD_LOC 14
8873: PPUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: LD_INT 1
8881: PPUSH
8882: CALL_OW 1
8886: ST_TO_ADDR
// if i = mp_player_side then
8887: LD_VAR 0 1
8891: PUSH
8892: LD_OWVAR 7
8896: EQUAL
8897: IFFALSE 8910
// begin Multiplayer_Loose_Message ;
8899: CALL_OW 521
// SetPlayerSpectator ( ) ;
8903: CALL_OW 572
// enable ( 400 ) ;
8907: LD_INT 400
8909: ENABLE_MARKED
// end ; end ; end ;
8910: GO 8824
8912: POP
8913: POP
// DidGameEnd ;
8914: CALL 8929 0 0
// if not GameEnded then
8918: LD_LOC 15
8922: NOT
8923: IFFALSE 8926
// enable ;
8925: ENABLE
// end ;
8926: PPOPN 2
8928: END
// function DidGameEnd ; var i , k , enemy ; begin
8929: LD_INT 0
8931: PPUSH
8932: PPUSH
8933: PPUSH
8934: PPUSH
// enemy = [ ] ;
8935: LD_ADDR_VAR 0 4
8939: PUSH
8940: EMPTY
8941: ST_TO_ADDR
// for i = 1 to side_positions do
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: DOUBLE
8948: LD_INT 1
8950: DEC
8951: ST_TO_ADDR
8952: LD_EXP 34
8956: PUSH
8957: FOR_TO
8958: IFFALSE 9052
// if not defeated [ i ] then
8960: LD_LOC 14
8964: PUSH
8965: LD_VAR 0 2
8969: ARRAY
8970: NOT
8971: IFFALSE 9050
// for k = 1 to side_positions do
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: DOUBLE
8979: LD_INT 1
8981: DEC
8982: ST_TO_ADDR
8983: LD_EXP 34
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9048
// if not defeated [ k ] then
8991: LD_LOC 14
8995: PUSH
8996: LD_VAR 0 3
9000: ARRAY
9001: NOT
9002: IFFALSE 9046
// if not AlliedSides ( i , k ) then
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_VAR 0 3
9013: PPUSH
9014: CALL 8493 0 2
9018: NOT
9019: IFFALSE 9046
// enemy = enemy ^ [ i , k ] ;
9021: LD_ADDR_VAR 0 4
9025: PUSH
9026: LD_VAR 0 4
9030: PUSH
9031: LD_VAR 0 2
9035: PUSH
9036: LD_VAR 0 3
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: ADD
9045: ST_TO_ADDR
9046: GO 8988
9048: POP
9049: POP
9050: GO 8957
9052: POP
9053: POP
// if not enemy then
9054: LD_VAR 0 4
9058: NOT
9059: IFFALSE 9085
// begin GameEnded = true ;
9061: LD_ADDR_LOC 15
9065: PUSH
9066: LD_INT 1
9068: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9069: LD_LOC 14
9073: PUSH
9074: LD_OWVAR 7
9078: ARRAY
9079: NOT
9080: IFFALSE 9085
// enable ( 401 ) ;
9082: LD_INT 401
9084: ENABLE_MARKED
// end ; end ;
9085: LD_VAR 0 1
9089: RET
// function unfog ; var k , friends ; begin
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
9094: PPUSH
// for k = 1 to side_positions do
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: DOUBLE
9101: LD_INT 1
9103: DEC
9104: ST_TO_ADDR
9105: LD_EXP 34
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9167
// if not defeated [ k ] then
9113: LD_LOC 14
9117: PUSH
9118: LD_VAR 0 2
9122: ARRAY
9123: NOT
9124: IFFALSE 9165
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9126: LD_OWVAR 7
9130: PPUSH
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 81
9140: PUSH
9141: LD_INT 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: IN
9147: IFFALSE 9165
// friends = friends ^ k ;
9149: LD_ADDR_VAR 0 3
9153: PUSH
9154: LD_VAR 0 3
9158: PUSH
9159: LD_VAR 0 2
9163: ADD
9164: ST_TO_ADDR
9165: GO 9110
9167: POP
9168: POP
// if not friends then
9169: LD_VAR 0 3
9173: NOT
9174: IFFALSE 9188
// begin SetPlayerSpectator ( ) ;
9176: CALL_OW 572
// unfoged = true ;
9180: LD_ADDR_LOC 16
9184: PUSH
9185: LD_INT 1
9187: ST_TO_ADDR
// end ; end ;
9188: LD_VAR 0 1
9192: RET
// export function MakeGameEnd ; begin
9193: LD_INT 0
9195: PPUSH
// SetPlayerSpectator ( ) ;
9196: CALL_OW 572
// unfoged = true ;
9200: LD_ADDR_LOC 16
9204: PUSH
9205: LD_INT 1
9207: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9208: LD_INT 175
9210: PPUSH
9211: CALL_OW 67
// GameEnded = true ;
9215: LD_ADDR_LOC 15
9219: PUSH
9220: LD_INT 1
9222: ST_TO_ADDR
// end ;
9223: LD_VAR 0 1
9227: RET
// export function GetGameEnded ; begin
9228: LD_INT 0
9230: PPUSH
// result = GameEnded ;
9231: LD_ADDR_VAR 0 1
9235: PUSH
9236: LD_LOC 15
9240: ST_TO_ADDR
// end ; end_of_file
9241: LD_VAR 0 1
9245: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9246: LD_INT 0
9248: PPUSH
9249: PPUSH
9250: PPUSH
// for side = 1 to 8 do
9251: LD_ADDR_VAR 0 2
9255: PUSH
9256: DOUBLE
9257: LD_INT 1
9259: DEC
9260: ST_TO_ADDR
9261: LD_INT 8
9263: PUSH
9264: FOR_TO
9265: IFFALSE 9386
// begin for i = 1 to 72 do
9267: LD_ADDR_VAR 0 3
9271: PUSH
9272: DOUBLE
9273: LD_INT 1
9275: DEC
9276: ST_TO_ADDR
9277: LD_INT 72
9279: PUSH
9280: FOR_TO
9281: IFFALSE 9312
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9283: LD_VAR 0 3
9287: PPUSH
9288: LD_VAR 0 2
9292: PPUSH
9293: LD_INT 0
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: CALL_OW 565
9305: PPUSH
9306: CALL_OW 322
9310: GO 9280
9312: POP
9313: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9314: LD_INT 73
9316: PPUSH
9317: LD_VAR 0 2
9321: PPUSH
9322: LD_INT 0
9324: PPUSH
9325: LD_INT 25
9327: PPUSH
9328: CALL_OW 565
9332: PPUSH
9333: CALL_OW 322
// for i = 0 to 40 do
9337: LD_ADDR_VAR 0 3
9341: PUSH
9342: DOUBLE
9343: LD_INT 0
9345: DEC
9346: ST_TO_ADDR
9347: LD_INT 40
9349: PUSH
9350: FOR_TO
9351: IFFALSE 9382
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9353: LD_VAR 0 3
9357: PPUSH
9358: LD_VAR 0 2
9362: PPUSH
9363: LD_INT 1
9365: PPUSH
9366: LD_VAR 0 3
9370: PPUSH
9371: CALL_OW 565
9375: PPUSH
9376: CALL_OW 324
9380: GO 9350
9382: POP
9383: POP
// end ;
9384: GO 9264
9386: POP
9387: POP
// end ;
9388: LD_VAR 0 1
9392: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9393: LD_INT 0
9395: PPUSH
9396: PPUSH
9397: PPUSH
// for side = 1 to 8 do
9398: LD_ADDR_VAR 0 3
9402: PUSH
9403: DOUBLE
9404: LD_INT 1
9406: DEC
9407: ST_TO_ADDR
9408: LD_INT 8
9410: PUSH
9411: FOR_TO
9412: IFFALSE 13408
// begin for i = 1 to 73 do
9414: LD_ADDR_VAR 0 4
9418: PUSH
9419: DOUBLE
9420: LD_INT 1
9422: DEC
9423: ST_TO_ADDR
9424: LD_INT 73
9426: PUSH
9427: FOR_TO
9428: IFFALSE 9449
// SetTech ( i , side , state_disabled ) ;
9430: LD_VAR 0 4
9434: PPUSH
9435: LD_VAR 0 3
9439: PPUSH
9440: LD_INT 0
9442: PPUSH
9443: CALL_OW 322
9447: GO 9427
9449: POP
9450: POP
// for i = 0 to 40 do
9451: LD_ADDR_VAR 0 4
9455: PUSH
9456: DOUBLE
9457: LD_INT 0
9459: DEC
9460: ST_TO_ADDR
9461: LD_INT 40
9463: PUSH
9464: FOR_TO
9465: IFFALSE 9486
// SetRestrict ( i , side , false ) ;
9467: LD_VAR 0 4
9471: PPUSH
9472: LD_VAR 0 3
9476: PPUSH
9477: LD_INT 0
9479: PPUSH
9480: CALL_OW 324
9484: GO 9464
9486: POP
9487: POP
// case level of 1 :
9488: LD_VAR 0 1
9492: PUSH
9493: LD_INT 1
9495: DOUBLE
9496: EQUAL
9497: IFTRUE 9501
9499: GO 9654
9501: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9502: LD_INT 35
9504: PPUSH
9505: LD_VAR 0 3
9509: PPUSH
9510: LD_INT 1
9512: PPUSH
9513: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9517: LD_INT 45
9519: PPUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: LD_INT 1
9527: PPUSH
9528: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9532: LD_INT 46
9534: PPUSH
9535: LD_VAR 0 3
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9547: LD_INT 47
9549: PPUSH
9550: LD_VAR 0 3
9554: PPUSH
9555: LD_INT 1
9557: PPUSH
9558: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9562: LD_INT 0
9564: PPUSH
9565: LD_VAR 0 3
9569: PPUSH
9570: LD_INT 1
9572: PPUSH
9573: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9577: LD_INT 2
9579: PPUSH
9580: LD_VAR 0 3
9584: PPUSH
9585: LD_INT 1
9587: PPUSH
9588: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9592: LD_INT 4
9594: PPUSH
9595: LD_VAR 0 3
9599: PPUSH
9600: LD_INT 1
9602: PPUSH
9603: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9607: LD_INT 6
9609: PPUSH
9610: LD_VAR 0 3
9614: PPUSH
9615: LD_INT 1
9617: PPUSH
9618: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9622: LD_INT 29
9624: PPUSH
9625: LD_VAR 0 3
9629: PPUSH
9630: LD_INT 1
9632: PPUSH
9633: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9637: LD_INT 31
9639: PPUSH
9640: LD_VAR 0 3
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: CALL_OW 324
// end ; 2 :
9652: GO 13406
9654: LD_INT 2
9656: DOUBLE
9657: EQUAL
9658: IFTRUE 9662
9660: GO 9860
9662: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9663: LD_INT 35
9665: PPUSH
9666: LD_VAR 0 3
9670: PPUSH
9671: LD_INT 1
9673: PPUSH
9674: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9678: LD_INT 45
9680: PPUSH
9681: LD_VAR 0 3
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9693: LD_INT 46
9695: PPUSH
9696: LD_VAR 0 3
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9708: LD_INT 47
9710: PPUSH
9711: LD_VAR 0 3
9715: PPUSH
9716: LD_INT 1
9718: PPUSH
9719: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9723: LD_INT 1
9725: PPUSH
9726: LD_VAR 0 3
9730: PPUSH
9731: LD_INT 1
9733: PPUSH
9734: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9738: LD_INT 2
9740: PPUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: LD_INT 1
9748: PPUSH
9749: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9753: LD_INT 11
9755: PPUSH
9756: LD_VAR 0 3
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9768: LD_INT 0
9770: PPUSH
9771: LD_VAR 0 3
9775: PPUSH
9776: LD_INT 1
9778: PPUSH
9779: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9783: LD_INT 2
9785: PPUSH
9786: LD_VAR 0 3
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9798: LD_INT 4
9800: PPUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9813: LD_INT 6
9815: PPUSH
9816: LD_VAR 0 3
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9828: LD_INT 29
9830: PPUSH
9831: LD_VAR 0 3
9835: PPUSH
9836: LD_INT 1
9838: PPUSH
9839: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9843: LD_INT 31
9845: PPUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL_OW 324
// end ; 3 :
9858: GO 13406
9860: LD_INT 3
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 10321
9868: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9869: LD_INT 35
9871: PPUSH
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 1
9879: PPUSH
9880: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9884: LD_INT 45
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9899: LD_INT 46
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9914: LD_INT 47
9916: PPUSH
9917: LD_VAR 0 3
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9929: LD_INT 1
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9944: LD_INT 2
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9959: LD_INT 11
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9974: LD_INT 48
9976: PPUSH
9977: LD_VAR 0 3
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9989: LD_INT 69
9991: PPUSH
9992: LD_VAR 0 3
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10004: LD_INT 39
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10019: LD_INT 43
10021: PPUSH
10022: LD_VAR 0 3
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10034: LD_INT 51
10036: PPUSH
10037: LD_VAR 0 3
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10049: LD_INT 6
10051: PPUSH
10052: LD_VAR 0 3
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10064: LD_INT 0
10066: PPUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10079: LD_INT 2
10081: PPUSH
10082: LD_VAR 0 3
10086: PPUSH
10087: LD_INT 1
10089: PPUSH
10090: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10094: LD_INT 3
10096: PPUSH
10097: LD_VAR 0 3
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10109: LD_INT 4
10111: PPUSH
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 1
10119: PPUSH
10120: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10124: LD_INT 6
10126: PPUSH
10127: LD_VAR 0 3
10131: PPUSH
10132: LD_INT 1
10134: PPUSH
10135: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10139: LD_INT 7
10141: PPUSH
10142: LD_VAR 0 3
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10154: LD_INT 8
10156: PPUSH
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10169: LD_INT 10
10171: PPUSH
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10184: LD_INT 15
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10199: LD_INT 16
10201: PPUSH
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10214: LD_INT 17
10216: PPUSH
10217: LD_VAR 0 3
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10229: LD_INT 20
10231: PPUSH
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10244: LD_INT 26
10246: PPUSH
10247: LD_VAR 0 3
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10259: LD_INT 27
10261: PPUSH
10262: LD_VAR 0 3
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10274: LD_INT 29
10276: PPUSH
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10289: LD_INT 31
10291: PPUSH
10292: LD_VAR 0 3
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10304: LD_INT 32
10306: PPUSH
10307: LD_VAR 0 3
10311: PPUSH
10312: LD_INT 1
10314: PPUSH
10315: CALL_OW 324
// end ; 4 :
10319: GO 13406
10321: LD_INT 4
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 11277
10329: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10330: LD_INT 35
10332: PPUSH
10333: LD_VAR 0 3
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10345: LD_INT 45
10347: PPUSH
10348: LD_VAR 0 3
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10360: LD_INT 46
10362: PPUSH
10363: LD_VAR 0 3
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10375: LD_INT 47
10377: PPUSH
10378: LD_VAR 0 3
10382: PPUSH
10383: LD_INT 1
10385: PPUSH
10386: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10390: LD_INT 1
10392: PPUSH
10393: LD_VAR 0 3
10397: PPUSH
10398: LD_INT 1
10400: PPUSH
10401: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10405: LD_INT 2
10407: PPUSH
10408: LD_VAR 0 3
10412: PPUSH
10413: LD_INT 1
10415: PPUSH
10416: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10420: LD_INT 11
10422: PPUSH
10423: LD_VAR 0 3
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10435: LD_INT 20
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10450: LD_INT 48
10452: PPUSH
10453: LD_VAR 0 3
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10465: LD_INT 49
10467: PPUSH
10468: LD_VAR 0 3
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10480: LD_INT 69
10482: PPUSH
10483: LD_VAR 0 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10495: LD_INT 39
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10510: LD_INT 34
10512: PPUSH
10513: LD_VAR 0 3
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10525: LD_INT 42
10527: PPUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: LD_INT 1
10535: PPUSH
10536: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10540: LD_INT 44
10542: PPUSH
10543: LD_VAR 0 3
10547: PPUSH
10548: LD_INT 1
10550: PPUSH
10551: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10555: LD_INT 41
10557: PPUSH
10558: LD_VAR 0 3
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10570: LD_INT 43
10572: PPUSH
10573: LD_VAR 0 3
10577: PPUSH
10578: LD_INT 1
10580: PPUSH
10581: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10585: LD_INT 70
10587: PPUSH
10588: LD_VAR 0 3
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10600: LD_INT 51
10602: PPUSH
10603: LD_VAR 0 3
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10615: LD_INT 52
10617: PPUSH
10618: LD_VAR 0 3
10622: PPUSH
10623: LD_INT 1
10625: PPUSH
10626: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10630: LD_INT 6
10632: PPUSH
10633: LD_VAR 0 3
10637: PPUSH
10638: LD_INT 1
10640: PPUSH
10641: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10645: LD_INT 15
10647: PPUSH
10648: LD_VAR 0 3
10652: PPUSH
10653: LD_INT 1
10655: PPUSH
10656: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10660: LD_INT 7
10662: PPUSH
10663: LD_VAR 0 3
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10675: LD_INT 12
10677: PPUSH
10678: LD_VAR 0 3
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10690: LD_INT 18
10692: PPUSH
10693: LD_VAR 0 3
10697: PPUSH
10698: LD_INT 1
10700: PPUSH
10701: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10705: LD_INT 60
10707: PPUSH
10708: LD_VAR 0 3
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10720: LD_INT 9
10722: PPUSH
10723: LD_VAR 0 3
10727: PPUSH
10728: LD_INT 1
10730: PPUSH
10731: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10735: LD_INT 30
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10750: LD_INT 37
10752: PPUSH
10753: LD_VAR 0 3
10757: PPUSH
10758: LD_INT 1
10760: PPUSH
10761: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10765: LD_INT 5
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10780: LD_INT 66
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10795: LD_INT 21
10797: PPUSH
10798: LD_VAR 0 3
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10810: LD_INT 22
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10825: LD_INT 54
10827: PPUSH
10828: LD_VAR 0 3
10832: PPUSH
10833: LD_INT 1
10835: PPUSH
10836: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10840: LD_INT 0
10842: PPUSH
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10855: LD_INT 1
10857: PPUSH
10858: LD_VAR 0 3
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10870: LD_INT 2
10872: PPUSH
10873: LD_VAR 0 3
10877: PPUSH
10878: LD_INT 1
10880: PPUSH
10881: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10885: LD_INT 3
10887: PPUSH
10888: LD_VAR 0 3
10892: PPUSH
10893: LD_INT 1
10895: PPUSH
10896: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10900: LD_INT 4
10902: PPUSH
10903: LD_VAR 0 3
10907: PPUSH
10908: LD_INT 1
10910: PPUSH
10911: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10915: LD_INT 5
10917: PPUSH
10918: LD_VAR 0 3
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10930: LD_INT 6
10932: PPUSH
10933: LD_VAR 0 3
10937: PPUSH
10938: LD_INT 1
10940: PPUSH
10941: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10945: LD_INT 7
10947: PPUSH
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10960: LD_INT 8
10962: PPUSH
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10975: LD_INT 10
10977: PPUSH
10978: LD_VAR 0 3
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10990: LD_INT 11
10992: PPUSH
10993: LD_VAR 0 3
10997: PPUSH
10998: LD_INT 1
11000: PPUSH
11001: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11005: LD_INT 12
11007: PPUSH
11008: LD_VAR 0 3
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11020: LD_INT 13
11022: PPUSH
11023: LD_VAR 0 3
11027: PPUSH
11028: LD_INT 1
11030: PPUSH
11031: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11035: LD_INT 14
11037: PPUSH
11038: LD_VAR 0 3
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11050: LD_INT 15
11052: PPUSH
11053: LD_VAR 0 3
11057: PPUSH
11058: LD_INT 1
11060: PPUSH
11061: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11065: LD_INT 16
11067: PPUSH
11068: LD_VAR 0 3
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11080: LD_INT 17
11082: PPUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11095: LD_INT 19
11097: PPUSH
11098: LD_VAR 0 3
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11110: LD_INT 20
11112: PPUSH
11113: LD_VAR 0 3
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11125: LD_INT 21
11127: PPUSH
11128: LD_VAR 0 3
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11140: LD_INT 23
11142: PPUSH
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11155: LD_INT 26
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11170: LD_INT 27
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11185: LD_INT 28
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11200: LD_INT 29
11202: PPUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11215: LD_INT 30
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11230: LD_INT 31
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11245: LD_INT 32
11247: PPUSH
11248: LD_VAR 0 3
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11260: LD_INT 36
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 324
// end ; 5 :
11275: GO 13406
11277: LD_INT 5
11279: DOUBLE
11280: EQUAL
11281: IFTRUE 11285
11283: GO 12398
11285: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11286: LD_INT 35
11288: PPUSH
11289: LD_VAR 0 3
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11301: LD_INT 45
11303: PPUSH
11304: LD_VAR 0 3
11308: PPUSH
11309: LD_INT 1
11311: PPUSH
11312: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11316: LD_INT 46
11318: PPUSH
11319: LD_VAR 0 3
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11331: LD_INT 47
11333: PPUSH
11334: LD_VAR 0 3
11338: PPUSH
11339: LD_INT 1
11341: PPUSH
11342: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11346: LD_INT 1
11348: PPUSH
11349: LD_VAR 0 3
11353: PPUSH
11354: LD_INT 1
11356: PPUSH
11357: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11361: LD_INT 2
11363: PPUSH
11364: LD_VAR 0 3
11368: PPUSH
11369: LD_INT 1
11371: PPUSH
11372: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11376: LD_INT 11
11378: PPUSH
11379: LD_VAR 0 3
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11391: LD_INT 20
11393: PPUSH
11394: LD_VAR 0 3
11398: PPUSH
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11406: LD_INT 48
11408: PPUSH
11409: LD_VAR 0 3
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11421: LD_INT 49
11423: PPUSH
11424: LD_VAR 0 3
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11436: LD_INT 69
11438: PPUSH
11439: LD_VAR 0 3
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11451: LD_INT 39
11453: PPUSH
11454: LD_VAR 0 3
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11466: LD_INT 34
11468: PPUSH
11469: LD_VAR 0 3
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11481: LD_INT 42
11483: PPUSH
11484: LD_VAR 0 3
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11496: LD_INT 44
11498: PPUSH
11499: LD_VAR 0 3
11503: PPUSH
11504: LD_INT 1
11506: PPUSH
11507: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11511: LD_INT 41
11513: PPUSH
11514: LD_VAR 0 3
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11526: LD_INT 40
11528: PPUSH
11529: LD_VAR 0 3
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11541: LD_INT 43
11543: PPUSH
11544: LD_VAR 0 3
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11556: LD_INT 70
11558: PPUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 1
11566: PPUSH
11567: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11571: LD_INT 51
11573: PPUSH
11574: LD_VAR 0 3
11578: PPUSH
11579: LD_INT 1
11581: PPUSH
11582: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11586: LD_INT 52
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: LD_INT 1
11596: PPUSH
11597: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11601: LD_INT 6
11603: PPUSH
11604: LD_VAR 0 3
11608: PPUSH
11609: LD_INT 1
11611: PPUSH
11612: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11616: LD_INT 15
11618: PPUSH
11619: LD_VAR 0 3
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11631: LD_INT 7
11633: PPUSH
11634: LD_VAR 0 3
11638: PPUSH
11639: LD_INT 1
11641: PPUSH
11642: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11646: LD_INT 12
11648: PPUSH
11649: LD_VAR 0 3
11653: PPUSH
11654: LD_INT 1
11656: PPUSH
11657: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11661: LD_INT 17
11663: PPUSH
11664: LD_VAR 0 3
11668: PPUSH
11669: LD_INT 1
11671: PPUSH
11672: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11676: LD_INT 18
11678: PPUSH
11679: LD_VAR 0 3
11683: PPUSH
11684: LD_INT 1
11686: PPUSH
11687: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11691: LD_INT 60
11693: PPUSH
11694: LD_VAR 0 3
11698: PPUSH
11699: LD_INT 1
11701: PPUSH
11702: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11706: LD_INT 32
11708: PPUSH
11709: LD_VAR 0 3
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11721: LD_INT 9
11723: PPUSH
11724: LD_VAR 0 3
11728: PPUSH
11729: LD_INT 1
11731: PPUSH
11732: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11736: LD_INT 57
11738: PPUSH
11739: LD_VAR 0 3
11743: PPUSH
11744: LD_INT 1
11746: PPUSH
11747: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11751: LD_INT 30
11753: PPUSH
11754: LD_VAR 0 3
11758: PPUSH
11759: LD_INT 1
11761: PPUSH
11762: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11766: LD_INT 37
11768: PPUSH
11769: LD_VAR 0 3
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11781: LD_INT 63
11783: PPUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: LD_INT 1
11791: PPUSH
11792: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11796: LD_INT 3
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: LD_INT 1
11806: PPUSH
11807: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11811: LD_INT 4
11813: PPUSH
11814: LD_VAR 0 3
11818: PPUSH
11819: LD_INT 1
11821: PPUSH
11822: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11826: LD_INT 5
11828: PPUSH
11829: LD_VAR 0 3
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11841: LD_INT 66
11843: PPUSH
11844: LD_VAR 0 3
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11856: LD_INT 21
11858: PPUSH
11859: LD_VAR 0 3
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11871: LD_INT 22
11873: PPUSH
11874: LD_VAR 0 3
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11886: LD_INT 19
11888: PPUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11901: LD_INT 54
11903: PPUSH
11904: LD_VAR 0 3
11908: PPUSH
11909: LD_INT 1
11911: PPUSH
11912: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11916: LD_INT 55
11918: PPUSH
11919: LD_VAR 0 3
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11931: LD_INT 0
11933: PPUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_INT 1
11941: PPUSH
11942: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11946: LD_INT 1
11948: PPUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: LD_INT 1
11956: PPUSH
11957: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11961: LD_INT 2
11963: PPUSH
11964: LD_VAR 0 3
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11976: LD_INT 3
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: LD_INT 1
11986: PPUSH
11987: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11991: LD_INT 4
11993: PPUSH
11994: LD_VAR 0 3
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12006: LD_INT 5
12008: PPUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12021: LD_INT 6
12023: PPUSH
12024: LD_VAR 0 3
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12036: LD_INT 7
12038: PPUSH
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12051: LD_INT 8
12053: PPUSH
12054: LD_VAR 0 3
12058: PPUSH
12059: LD_INT 1
12061: PPUSH
12062: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12066: LD_INT 10
12068: PPUSH
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12081: LD_INT 11
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12096: LD_INT 12
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12111: LD_INT 13
12113: PPUSH
12114: LD_VAR 0 3
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12126: LD_INT 14
12128: PPUSH
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12141: LD_INT 15
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12156: LD_INT 16
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12171: LD_INT 17
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12186: LD_INT 18
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12201: LD_INT 19
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12216: LD_INT 20
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12231: LD_INT 21
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12246: LD_INT 23
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12261: LD_INT 26
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12276: LD_INT 27
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12291: LD_INT 28
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12306: LD_INT 29
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12321: LD_INT 30
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12336: LD_INT 31
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12351: LD_INT 32
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12366: LD_INT 33
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12381: LD_INT 36
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 324
// end ; 6 :
12396: GO 13406
12398: LD_INT 6
12400: DOUBLE
12401: EQUAL
12402: IFTRUE 12406
12404: GO 13331
12406: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12407: LD_INT 35
12409: PPUSH
12410: LD_VAR 0 3
12414: PPUSH
12415: LD_INT 1
12417: PPUSH
12418: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12422: LD_INT 45
12424: PPUSH
12425: LD_VAR 0 3
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12437: LD_INT 46
12439: PPUSH
12440: LD_VAR 0 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12452: LD_INT 47
12454: PPUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: LD_INT 1
12462: PPUSH
12463: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12467: LD_INT 1
12469: PPUSH
12470: LD_VAR 0 3
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12482: LD_INT 2
12484: PPUSH
12485: LD_VAR 0 3
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12497: LD_INT 11
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12512: LD_INT 20
12514: PPUSH
12515: LD_VAR 0 3
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12527: LD_INT 48
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12542: LD_INT 49
12544: PPUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 1
12552: PPUSH
12553: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12557: LD_INT 50
12559: PPUSH
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12572: LD_INT 69
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12587: LD_INT 39
12589: PPUSH
12590: LD_VAR 0 3
12594: PPUSH
12595: LD_INT 1
12597: PPUSH
12598: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12602: LD_INT 34
12604: PPUSH
12605: LD_VAR 0 3
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12617: LD_INT 42
12619: PPUSH
12620: LD_VAR 0 3
12624: PPUSH
12625: LD_INT 1
12627: PPUSH
12628: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12632: LD_INT 44
12634: PPUSH
12635: LD_VAR 0 3
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12647: LD_INT 41
12649: PPUSH
12650: LD_VAR 0 3
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12662: LD_INT 13
12664: PPUSH
12665: LD_VAR 0 3
12669: PPUSH
12670: LD_INT 1
12672: PPUSH
12673: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12677: LD_INT 40
12679: PPUSH
12680: LD_VAR 0 3
12684: PPUSH
12685: LD_INT 1
12687: PPUSH
12688: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12692: LD_INT 43
12694: PPUSH
12695: LD_VAR 0 3
12699: PPUSH
12700: LD_INT 1
12702: PPUSH
12703: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12707: LD_INT 70
12709: PPUSH
12710: LD_VAR 0 3
12714: PPUSH
12715: LD_INT 1
12717: PPUSH
12718: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12722: LD_INT 23
12724: PPUSH
12725: LD_VAR 0 3
12729: PPUSH
12730: LD_INT 1
12732: PPUSH
12733: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12737: LD_INT 51
12739: PPUSH
12740: LD_VAR 0 3
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12752: LD_INT 52
12754: PPUSH
12755: LD_VAR 0 3
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12767: LD_INT 6
12769: PPUSH
12770: LD_VAR 0 3
12774: PPUSH
12775: LD_INT 1
12777: PPUSH
12778: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12782: LD_INT 15
12784: PPUSH
12785: LD_VAR 0 3
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12797: LD_INT 7
12799: PPUSH
12800: LD_VAR 0 3
12804: PPUSH
12805: LD_INT 1
12807: PPUSH
12808: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12812: LD_INT 12
12814: PPUSH
12815: LD_VAR 0 3
12819: PPUSH
12820: LD_INT 1
12822: PPUSH
12823: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12827: LD_INT 10
12829: PPUSH
12830: LD_VAR 0 3
12834: PPUSH
12835: LD_INT 1
12837: PPUSH
12838: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12842: LD_INT 17
12844: PPUSH
12845: LD_VAR 0 3
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12857: LD_INT 18
12859: PPUSH
12860: LD_VAR 0 3
12864: PPUSH
12865: LD_INT 1
12867: PPUSH
12868: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12872: LD_INT 60
12874: PPUSH
12875: LD_VAR 0 3
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12887: LD_INT 61
12889: PPUSH
12890: LD_VAR 0 3
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12902: LD_INT 32
12904: PPUSH
12905: LD_VAR 0 3
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12917: LD_INT 27
12919: PPUSH
12920: LD_VAR 0 3
12924: PPUSH
12925: LD_INT 1
12927: PPUSH
12928: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12932: LD_INT 36
12934: PPUSH
12935: LD_VAR 0 3
12939: PPUSH
12940: LD_INT 1
12942: PPUSH
12943: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12947: LD_INT 33
12949: PPUSH
12950: LD_VAR 0 3
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12962: LD_INT 9
12964: PPUSH
12965: LD_VAR 0 3
12969: PPUSH
12970: LD_INT 1
12972: PPUSH
12973: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12977: LD_INT 38
12979: PPUSH
12980: LD_VAR 0 3
12984: PPUSH
12985: LD_INT 1
12987: PPUSH
12988: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12992: LD_INT 57
12994: PPUSH
12995: LD_VAR 0 3
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13007: LD_INT 58
13009: PPUSH
13010: LD_VAR 0 3
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13022: LD_INT 28
13024: PPUSH
13025: LD_VAR 0 3
13029: PPUSH
13030: LD_INT 1
13032: PPUSH
13033: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13037: LD_INT 29
13039: PPUSH
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_INT 1
13047: PPUSH
13048: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13052: LD_INT 30
13054: PPUSH
13055: LD_VAR 0 3
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13067: LD_INT 37
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13082: LD_INT 63
13084: PPUSH
13085: LD_VAR 0 3
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13097: LD_INT 64
13099: PPUSH
13100: LD_VAR 0 3
13104: PPUSH
13105: LD_INT 1
13107: PPUSH
13108: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13112: LD_INT 3
13114: PPUSH
13115: LD_VAR 0 3
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13127: LD_INT 4
13129: PPUSH
13130: LD_VAR 0 3
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13142: LD_INT 5
13144: PPUSH
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13157: LD_INT 8
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13172: LD_INT 66
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13187: LD_INT 67
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13202: LD_INT 21
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13217: LD_INT 22
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13232: LD_INT 19
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13247: LD_INT 26
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13262: LD_INT 54
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13277: LD_INT 55
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// for i = 0 to 39 do
13292: LD_ADDR_VAR 0 4
13296: PUSH
13297: DOUBLE
13298: LD_INT 0
13300: DEC
13301: ST_TO_ADDR
13302: LD_INT 39
13304: PUSH
13305: FOR_TO
13306: IFFALSE 13327
// SetRestrict ( i , side , true ) ;
13308: LD_VAR 0 4
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 324
13325: GO 13305
13327: POP
13328: POP
// end ; else
13329: GO 13406
13331: POP
// begin for i = 1 to 73 do
13332: LD_ADDR_VAR 0 4
13336: PUSH
13337: DOUBLE
13338: LD_INT 1
13340: DEC
13341: ST_TO_ADDR
13342: LD_INT 73
13344: PUSH
13345: FOR_TO
13346: IFFALSE 13367
// SetTech ( i , side , state_enabled ) ;
13348: LD_VAR 0 4
13352: PPUSH
13353: LD_VAR 0 3
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: CALL_OW 322
13365: GO 13345
13367: POP
13368: POP
// for i = 0 to 39 do
13369: LD_ADDR_VAR 0 4
13373: PUSH
13374: DOUBLE
13375: LD_INT 0
13377: DEC
13378: ST_TO_ADDR
13379: LD_INT 39
13381: PUSH
13382: FOR_TO
13383: IFFALSE 13404
// SetRestrict ( i , side , true ) ;
13385: LD_VAR 0 4
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 324
13402: GO 13382
13404: POP
13405: POP
// end ; end ; end ;
13406: GO 9411
13408: POP
13409: POP
// end ; end_of_file
13410: LD_VAR 0 2
13414: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13415: LD_INT 0
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
13423: PPUSH
13424: PPUSH
13425: PPUSH
// for i := 1 to 8 do
13426: LD_ADDR_VAR 0 2
13430: PUSH
13431: DOUBLE
13432: LD_INT 1
13434: DEC
13435: ST_TO_ADDR
13436: LD_INT 8
13438: PUSH
13439: FOR_TO
13440: IFFALSE 13824
// begin if Side_Positions [ i ] then
13442: LD_EXP 34
13446: PUSH
13447: LD_VAR 0 2
13451: ARRAY
13452: IFFALSE 13822
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13454: LD_ADDR_VAR 0 7
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_VAR 0 2
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 21
13473: PUSH
13474: LD_INT 1
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PPUSH
13485: CALL_OW 69
13489: PUSH
13490: LD_INT 0
13492: PLUS
13493: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13494: LD_ADDR_VAR 0 9
13498: PUSH
13499: LD_INT 22
13501: PUSH
13502: LD_VAR 0 2
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: LD_INT 30
13516: PUSH
13517: LD_INT 0
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 30
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: ST_TO_ADDR
// crates := 0 ;
13548: LD_ADDR_VAR 0 4
13552: PUSH
13553: LD_INT 0
13555: ST_TO_ADDR
// oil := 0 ;
13556: LD_ADDR_VAR 0 5
13560: PUSH
13561: LD_INT 0
13563: ST_TO_ADDR
// sib := 0 ;
13564: LD_ADDR_VAR 0 6
13568: PUSH
13569: LD_INT 0
13571: ST_TO_ADDR
// if bases then
13572: LD_VAR 0 9
13576: IFFALSE 13682
// begin for j in bases do
13578: LD_ADDR_VAR 0 3
13582: PUSH
13583: LD_VAR 0 9
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13680
// begin base := GetBase ( j ) ;
13591: LD_ADDR_VAR 0 8
13595: PUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: CALL_OW 274
13605: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13606: LD_ADDR_VAR 0 4
13610: PUSH
13611: LD_VAR 0 4
13615: PUSH
13616: LD_VAR 0 8
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 275
13628: PLUS
13629: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13630: LD_ADDR_VAR 0 5
13634: PUSH
13635: LD_VAR 0 5
13639: PUSH
13640: LD_VAR 0 8
13644: PPUSH
13645: LD_INT 2
13647: PPUSH
13648: CALL_OW 275
13652: PLUS
13653: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13654: LD_ADDR_VAR 0 6
13658: PUSH
13659: LD_VAR 0 6
13663: PUSH
13664: LD_VAR 0 8
13668: PPUSH
13669: LD_INT 3
13671: PPUSH
13672: CALL_OW 275
13676: PLUS
13677: ST_TO_ADDR
// end ;
13678: GO 13588
13680: POP
13681: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13682: LD_STRING setSpecText(
13684: PUSH
13685: LD_VAR 0 2
13689: STR
13690: PUSH
13691: LD_STRING ,
13693: STR
13694: PUSH
13695: LD_INT 2
13697: STR
13698: PUSH
13699: LD_STRING ,
13701: STR
13702: PUSH
13703: LD_VAR 0 4
13707: STR
13708: PUSH
13709: LD_STRING )
13711: STR
13712: PPUSH
13713: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13717: LD_STRING setSpecText(
13719: PUSH
13720: LD_VAR 0 2
13724: STR
13725: PUSH
13726: LD_STRING ,
13728: STR
13729: PUSH
13730: LD_INT 3
13732: STR
13733: PUSH
13734: LD_STRING ,
13736: STR
13737: PUSH
13738: LD_VAR 0 5
13742: STR
13743: PUSH
13744: LD_STRING )
13746: STR
13747: PPUSH
13748: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13752: LD_STRING setSpecText(
13754: PUSH
13755: LD_VAR 0 2
13759: STR
13760: PUSH
13761: LD_STRING ,
13763: STR
13764: PUSH
13765: LD_INT 4
13767: STR
13768: PUSH
13769: LD_STRING ,
13771: STR
13772: PUSH
13773: LD_VAR 0 6
13777: STR
13778: PUSH
13779: LD_STRING )
13781: STR
13782: PPUSH
13783: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13787: LD_STRING setSpecText(
13789: PUSH
13790: LD_VAR 0 2
13794: STR
13795: PUSH
13796: LD_STRING ,
13798: STR
13799: PUSH
13800: LD_INT 5
13802: STR
13803: PUSH
13804: LD_STRING ,
13806: STR
13807: PUSH
13808: LD_VAR 0 7
13812: STR
13813: PUSH
13814: LD_STRING )
13816: STR
13817: PPUSH
13818: CALL_OW 559
// end ; end ;
13822: GO 13439
13824: POP
13825: POP
// end ;
13826: LD_VAR 0 1
13830: RET
// every 0 0$1 do
13831: GO 13833
13833: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13834: LD_STRING setSpecLogoNumber(
13836: PUSH
13837: LD_INT 2
13839: STR
13840: PUSH
13841: LD_STRING ,
13843: STR
13844: PUSH
13845: LD_INT 1
13847: STR
13848: PUSH
13849: LD_STRING )
13851: STR
13852: PPUSH
13853: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13857: LD_STRING setSpecLogoNumber(
13859: PUSH
13860: LD_INT 3
13862: STR
13863: PUSH
13864: LD_STRING ,
13866: STR
13867: PUSH
13868: LD_INT 2
13870: STR
13871: PUSH
13872: LD_STRING )
13874: STR
13875: PPUSH
13876: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13880: LD_STRING setSpecLogoNumber(
13882: PUSH
13883: LD_INT 4
13885: STR
13886: PUSH
13887: LD_STRING ,
13889: STR
13890: PUSH
13891: LD_INT 3
13893: STR
13894: PUSH
13895: LD_STRING )
13897: STR
13898: PPUSH
13899: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13903: LD_STRING setSpecLogoNumber(
13905: PUSH
13906: LD_INT 5
13908: STR
13909: PUSH
13910: LD_STRING ,
13912: STR
13913: PUSH
13914: LD_INT 4
13916: STR
13917: PUSH
13918: LD_STRING )
13920: STR
13921: PPUSH
13922: CALL_OW 559
// end ;
13926: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13927: LD_INT 2
13929: PUSH
13930: LD_INT 30
13932: PUSH
13933: LD_INT 0
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 30
13942: PUSH
13943: LD_INT 1
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: PPUSH
13955: CALL_OW 69
13959: IFFALSE 13969
13961: GO 13963
13963: DISABLE
// begin enable ;
13964: ENABLE
// UpdateSpectatorBar ;
13965: CALL 13415 0 0
// end ; end_of_file
13969: END
// var respawn , inqueue ; export function init_respawning ; begin
13970: LD_INT 0
13972: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13973: LD_ADDR_LOC 18
13977: PUSH
13978: LD_INT 1
13980: PPUSH
13981: LD_INT 8
13983: PPUSH
13984: CALL_OW 12
13988: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13989: LD_ADDR_LOC 19
13993: PUSH
13994: LD_INT 0
13996: PUSH
13997: LD_INT 0
13999: PUSH
14000: LD_INT 0
14002: PUSH
14003: LD_INT 0
14005: PUSH
14006: LD_INT 0
14008: PUSH
14009: LD_INT 0
14011: PUSH
14012: LD_INT 0
14014: PUSH
14015: LD_INT 0
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: ST_TO_ADDR
// end ;
14028: LD_VAR 0 1
14032: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14033: GO 14035
14035: DISABLE
14036: LD_INT 0
14038: PPUSH
14039: PPUSH
14040: PPUSH
// begin if respawning_time_max = 0 then
14041: LD_EXP 28
14045: PUSH
14046: LD_INT 0
14048: EQUAL
14049: IFFALSE 14053
// exit ;
14051: GO 14461
// if respawn = 8 then
14053: LD_LOC 18
14057: PUSH
14058: LD_INT 8
14060: EQUAL
14061: IFFALSE 14073
// respawn := 1 else
14063: LD_ADDR_LOC 18
14067: PUSH
14068: LD_INT 1
14070: ST_TO_ADDR
14071: GO 14087
// respawn := respawn + 1 ;
14073: LD_ADDR_LOC 18
14077: PUSH
14078: LD_LOC 18
14082: PUSH
14083: LD_INT 1
14085: PLUS
14086: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14087: LD_EXP 34
14091: PUSH
14092: LD_LOC 18
14096: ARRAY
14097: PUSH
14098: LD_LOC 19
14102: PUSH
14103: LD_LOC 18
14107: ARRAY
14108: NOT
14109: AND
14110: IFFALSE 14460
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14112: LD_ADDR_VAR 0 1
14116: PUSH
14117: LD_INT 21
14119: PUSH
14120: LD_INT 1
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 22
14129: PUSH
14130: LD_LOC 18
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 23
14144: PUSH
14145: LD_INT 0
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: PPUSH
14158: CALL_OW 69
14162: ST_TO_ADDR
// if n < number_of_people then
14163: LD_VAR 0 1
14167: PUSH
14168: LD_EXP 19
14172: LESS
14173: IFFALSE 14457
// begin aktresp := respawn ;
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_LOC 18
14184: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14185: LD_ADDR_LOC 19
14189: PUSH
14190: LD_LOC 19
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: CALL_OW 1
14207: ST_TO_ADDR
// enable ;
14208: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14209: LD_EXP 27
14213: PPUSH
14214: LD_EXP 28
14218: PPUSH
14219: CALL_OW 12
14223: PPUSH
14224: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14228: LD_ADDR_LOC 19
14232: PUSH
14233: LD_LOC 19
14237: PPUSH
14238: LD_VAR 0 3
14242: PPUSH
14243: LD_INT 0
14245: PPUSH
14246: CALL_OW 1
14250: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14251: LD_ADDR_VAR 0 2
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 3
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: LD_INT 30
14271: PUSH
14272: LD_INT 0
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: LD_INT 30
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 50
14296: PUSH
14297: EMPTY
14298: LIST
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_VAR 0 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 69
14322: ST_TO_ADDR
// if dep = 0 then
14323: LD_VAR 0 2
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14335
// exit ;
14333: GO 14461
// hc_name :=  ;
14335: LD_ADDR_OWVAR 26
14339: PUSH
14340: LD_STRING 
14342: ST_TO_ADDR
// hc_importance := 0 ;
14343: LD_ADDR_OWVAR 32
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14351: LD_INT 0
14353: PPUSH
14354: LD_INT 0
14356: PPUSH
14357: LD_EXP 20
14361: PUSH
14362: LD_INT 2
14364: DIV
14365: PPUSH
14366: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14370: LD_ADDR_OWVAR 21
14374: PUSH
14375: LD_EXP 35
14379: PUSH
14380: LD_VAR 0 3
14384: ARRAY
14385: ST_TO_ADDR
// uc_side := aktresp ;
14386: LD_ADDR_OWVAR 20
14390: PUSH
14391: LD_VAR 0 3
14395: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14396: LD_ADDR_VAR 0 2
14400: PUSH
14401: LD_VAR 0 2
14405: PUSH
14406: LD_INT 1
14408: PPUSH
14409: LD_VAR 0 2
14413: PPUSH
14414: CALL_OW 12
14418: ARRAY
14419: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14420: CALL_OW 44
14424: PPUSH
14425: LD_VAR 0 2
14429: PPUSH
14430: CALL_OW 250
14434: PPUSH
14435: LD_VAR 0 2
14439: PPUSH
14440: CALL_OW 251
14444: PPUSH
14445: LD_INT 7
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 50
// end else
14455: GO 14458
// enable ;
14457: ENABLE
// end else
14458: GO 14461
// enable ;
14460: ENABLE
// end ; end_of_file
14461: PPOPN 3
14463: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14464: LD_INT 0
14466: PPUSH
14467: PPUSH
14468: PPUSH
// BuildUpTime_Delay = 0 ;
14469: LD_ADDR_EXP 57
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// if not def_builduptime then
14477: LD_EXP 14
14481: NOT
14482: IFFALSE 14486
// exit ;
14484: GO 14669
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14486: LD_ADDR_EXP 57
14490: PUSH
14491: LD_INT 8400
14493: PUSH
14494: LD_INT 2100
14496: PUSH
14497: LD_EXP 14
14501: MUL
14502: PLUS
14503: ST_TO_ADDR
// BuildUpTimeActive := true ;
14504: LD_ADDR_EXP 56
14508: PUSH
14509: LD_INT 1
14511: ST_TO_ADDR
// for i := 1 to 8 do
14512: LD_ADDR_VAR 0 2
14516: PUSH
14517: DOUBLE
14518: LD_INT 1
14520: DEC
14521: ST_TO_ADDR
14522: LD_INT 8
14524: PUSH
14525: FOR_TO
14526: IFFALSE 14667
// if Side_Positions [ i ] then
14528: LD_EXP 34
14532: PUSH
14533: LD_VAR 0 2
14537: ARRAY
14538: IFFALSE 14665
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14540: LD_EXP 55
14544: PUSH
14545: LD_EXP 34
14549: PUSH
14550: LD_VAR 0 2
14554: ARRAY
14555: ARRAY
14556: PPUSH
14557: LD_INT 5
14559: PPUSH
14560: CALL_OW 424
// for j := 1 to 8 do
14564: LD_ADDR_VAR 0 3
14568: PUSH
14569: DOUBLE
14570: LD_INT 1
14572: DEC
14573: ST_TO_ADDR
14574: LD_INT 8
14576: PUSH
14577: FOR_TO
14578: IFFALSE 14663
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14580: LD_EXP 34
14584: PUSH
14585: LD_VAR 0 3
14589: ARRAY
14590: PUSH
14591: LD_EXP 31
14595: PUSH
14596: LD_VAR 0 2
14600: ARRAY
14601: PUSH
14602: LD_EXP 31
14606: PUSH
14607: LD_VAR 0 3
14611: ARRAY
14612: NONEQUAL
14613: PUSH
14614: LD_EXP 36
14618: NOT
14619: PUSH
14620: LD_VAR 0 2
14624: PUSH
14625: LD_VAR 0 3
14629: NONEQUAL
14630: AND
14631: OR
14632: AND
14633: IFFALSE 14661
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14635: LD_VAR 0 3
14639: PPUSH
14640: LD_EXP 55
14644: PUSH
14645: LD_EXP 34
14649: PUSH
14650: LD_VAR 0 2
14654: ARRAY
14655: ARRAY
14656: PPUSH
14657: CALL_OW 333
14661: GO 14577
14663: POP
14664: POP
// end ;
14665: GO 14525
14667: POP
14668: POP
// end ;
14669: LD_VAR 0 1
14673: RET
// export function EndBuildUp ; var i , j ; begin
14674: LD_INT 0
14676: PPUSH
14677: PPUSH
14678: PPUSH
// BuildUpTimeActive := false ;
14679: LD_ADDR_EXP 56
14683: PUSH
14684: LD_INT 0
14686: ST_TO_ADDR
// for i := 1 to 8 do
14687: LD_ADDR_VAR 0 2
14691: PUSH
14692: DOUBLE
14693: LD_INT 1
14695: DEC
14696: ST_TO_ADDR
14697: LD_INT 8
14699: PUSH
14700: FOR_TO
14701: IFFALSE 14842
// if Side_Positions [ i ] then
14703: LD_EXP 34
14707: PUSH
14708: LD_VAR 0 2
14712: ARRAY
14713: IFFALSE 14840
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14715: LD_EXP 55
14719: PUSH
14720: LD_EXP 34
14724: PUSH
14725: LD_VAR 0 2
14729: ARRAY
14730: ARRAY
14731: PPUSH
14732: LD_INT 0
14734: PPUSH
14735: CALL_OW 424
// for j := 1 to 8 do
14739: LD_ADDR_VAR 0 3
14743: PUSH
14744: DOUBLE
14745: LD_INT 1
14747: DEC
14748: ST_TO_ADDR
14749: LD_INT 8
14751: PUSH
14752: FOR_TO
14753: IFFALSE 14838
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14755: LD_EXP 34
14759: PUSH
14760: LD_VAR 0 3
14764: ARRAY
14765: PUSH
14766: LD_EXP 31
14770: PUSH
14771: LD_VAR 0 2
14775: ARRAY
14776: PUSH
14777: LD_EXP 31
14781: PUSH
14782: LD_VAR 0 3
14786: ARRAY
14787: NONEQUAL
14788: PUSH
14789: LD_EXP 36
14793: NOT
14794: PUSH
14795: LD_VAR 0 2
14799: PUSH
14800: LD_VAR 0 3
14804: NONEQUAL
14805: AND
14806: OR
14807: AND
14808: IFFALSE 14836
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14810: LD_VAR 0 3
14814: PPUSH
14815: LD_EXP 55
14819: PUSH
14820: LD_EXP 34
14824: PUSH
14825: LD_VAR 0 2
14829: ARRAY
14830: ARRAY
14831: PPUSH
14832: CALL_OW 334
14836: GO 14752
14838: POP
14839: POP
// end ;
14840: GO 14700
14842: POP
14843: POP
// end ;
14844: LD_VAR 0 1
14848: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14849: LD_EXP 56
14853: IFFALSE 15028
14855: GO 14857
14857: DISABLE
14858: LD_INT 0
14860: PPUSH
14861: PPUSH
// begin for i := 1 to 8 do
14862: LD_ADDR_VAR 0 1
14866: PUSH
14867: DOUBLE
14868: LD_INT 1
14870: DEC
14871: ST_TO_ADDR
14872: LD_INT 8
14874: PUSH
14875: FOR_TO
14876: IFFALSE 15025
// if Side_Positions [ i ] then
14878: LD_EXP 34
14882: PUSH
14883: LD_VAR 0 1
14887: ARRAY
14888: IFFALSE 15023
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14890: LD_ADDR_VAR 0 2
14894: PUSH
14895: LD_EXP 55
14899: PUSH
14900: LD_EXP 34
14904: PUSH
14905: LD_VAR 0 1
14909: ARRAY
14910: ARRAY
14911: PPUSH
14912: LD_INT 2
14914: PUSH
14915: LD_INT 21
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 21
14927: PUSH
14928: LD_INT 2
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 22
14942: PUSH
14943: LD_OWVAR 2
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PPUSH
14956: CALL_OW 70
14960: PUSH
14961: FOR_IN
14962: IFFALSE 15021
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14964: LD_EXP 31
14968: PUSH
14969: LD_VAR 0 1
14973: ARRAY
14974: PUSH
14975: LD_EXP 31
14979: PUSH
14980: LD_OWVAR 2
14984: ARRAY
14985: NONEQUAL
14986: PUSH
14987: LD_EXP 36
14991: NOT
14992: PUSH
14993: LD_VAR 0 1
14997: PUSH
14998: LD_OWVAR 2
15002: NONEQUAL
15003: AND
15004: OR
15005: IFFALSE 15019
// ComMoveToArea ( un , BuildUpEscape ) ;
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_INT 17
15014: PPUSH
15015: CALL_OW 113
15019: GO 14961
15021: POP
15022: POP
15023: GO 14875
15025: POP
15026: POP
// enable ;
15027: ENABLE
// end ;
15028: PPOPN 2
15030: END
// every 0 0$1 trigger def_builduptime do
15031: LD_EXP 14
15035: IFFALSE 15061
15037: GO 15039
15039: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15040: LD_INT 8400
15042: PUSH
15043: LD_EXP 14
15047: PUSH
15048: LD_INT 2100
15050: MUL
15051: PLUS
15052: PPUSH
15053: CALL_OW 67
// EndBuildUp ;
15057: CALL 14674 0 0
// end ;
15061: END
