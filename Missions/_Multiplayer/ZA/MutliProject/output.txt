// export game_type , mp_settings , max_settings , player_side , players_pos , players_nat , players_team , position_sides , team_game , teams , timer , vision ; export function CheckMultiSettings ( ) ; var i , tmp ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// if Multiplayer then
   5: LD_OWVAR 4
   9: IFFALSE 73
// begin game_type := mp_game_type ;
  11: LD_ADDR_EXP 1
  15: PUSH
  16: LD_OWVAR 6
  20: ST_TO_ADDR
// your_side := mp_player_side ;
  21: LD_ADDR_OWVAR 2
  25: PUSH
  26: LD_OWVAR 7
  30: ST_TO_ADDR
// players_pos := mp_sides_positions ;
  31: LD_ADDR_EXP 5
  35: PUSH
  36: LD_OWVAR 17
  40: ST_TO_ADDR
// players_team := mp_sides_teams ;
  41: LD_ADDR_EXP 7
  45: PUSH
  46: LD_OWVAR 15
  50: ST_TO_ADDR
// players_nat := mp_sides_nations ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_OWVAR 16
  60: ST_TO_ADDR
// teams := mp_teams ;
  61: LD_ADDR_EXP 10
  65: PUSH
  66: LD_OWVAR 12
  70: ST_TO_ADDR
// end else
  71: GO 261
// begin game_type := 1 ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 1
  80: ST_TO_ADDR
// players_pos := [ 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ] ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 1
  88: PUSH
  89: LD_INT 0
  91: PUSH
  92: LD_INT 0
  94: PUSH
  95: LD_INT 1
  97: PUSH
  98: LD_INT 0
 100: PUSH
 101: LD_INT 0
 103: PUSH
 104: LD_INT 0
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: LIST
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: ST_TO_ADDR
// players_team := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 1
 127: PUSH
 128: LD_INT 2
 130: PUSH
 131: LD_INT 3
 133: PUSH
 134: LD_INT 4
 136: PUSH
 137: LD_INT 5
 139: PUSH
 140: LD_INT 6
 142: PUSH
 143: LD_INT 7
 145: PUSH
 146: LD_INT 8
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: ST_TO_ADDR
// players_nat := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 159: LD_ADDR_EXP 6
 163: PUSH
 164: LD_INT 1
 166: PUSH
 167: LD_INT 2
 169: PUSH
 170: LD_INT 3
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 2
 178: PUSH
 179: LD_INT 3
 181: PUSH
 182: LD_INT 1
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: ST_TO_ADDR
// teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 198: LD_ADDR_EXP 10
 202: PUSH
 203: LD_INT 1
 205: PUSH
 206: EMPTY
 207: LIST
 208: PUSH
 209: LD_INT 2
 211: PUSH
 212: EMPTY
 213: LIST
 214: PUSH
 215: LD_INT 3
 217: PUSH
 218: EMPTY
 219: LIST
 220: PUSH
 221: LD_INT 4
 223: PUSH
 224: EMPTY
 225: LIST
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: EMPTY
 231: LIST
 232: PUSH
 233: LD_INT 6
 235: PUSH
 236: EMPTY
 237: LIST
 238: PUSH
 239: LD_INT 7
 241: PUSH
 242: EMPTY
 243: LIST
 244: PUSH
 245: LD_INT 8
 247: PUSH
 248: EMPTY
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// end ; if Multiplayer then
 261: LD_OWVAR 4
 265: IFFALSE 360
// begin case game_type of 1 :
 267: LD_EXP 1
 271: PUSH
 272: LD_INT 1
 274: DOUBLE
 275: EQUAL
 276: IFTRUE 280
 278: GO 291
 280: POP
// max_settings := 9 ; 2 :
 281: LD_ADDR_EXP 3
 285: PUSH
 286: LD_INT 9
 288: ST_TO_ADDR
 289: GO 311
 291: LD_INT 2
 293: DOUBLE
 294: EQUAL
 295: IFTRUE 299
 297: GO 310
 299: POP
// max_settings := 9 ; end ;
 300: LD_ADDR_EXP 3
 304: PUSH
 305: LD_INT 9
 307: ST_TO_ADDR
 308: GO 311
 310: POP
// for i = 1 to max_settings do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_EXP 3
 325: PUSH
 326: FOR_TO
 327: IFFALSE 356
// mp_settings := mp_settings ^ GetMultiplayerSetting ( i - 1 ) ;
 329: LD_ADDR_EXP 2
 333: PUSH
 334: LD_EXP 2
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 1
 346: MINUS
 347: PPUSH
 348: CALL_OW 426
 352: ADD
 353: ST_TO_ADDR
 354: GO 326
 356: POP
 357: POP
// end else
 358: GO 411
// begin max_settings := 9 ;
 360: LD_ADDR_EXP 3
 364: PUSH
 365: LD_INT 9
 367: ST_TO_ADDR
// mp_settings := [ 4 , 3 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
 368: LD_ADDR_EXP 2
 372: PUSH
 373: LD_INT 4
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 1
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// end ; end ;
 411: LD_VAR 0 1
 415: RET
// starting begin ResetFog ;
 416: CALL_OW 335
// RandomizeAll ;
 420: CALL_OW 11
// CheckMultiSettings ( ) ;
 424: CALL 0 0 0
// SetDiplomatic ( ) ;
 428: CALL 3975 0 0
// LoadGame ( ) ;
 432: CALL 508 0 0
// LoadSpec ( ) ;
 436: CALL 2657 0 0
// if not Multiplayer then
 440: LD_OWVAR 4
 444: NOT
 445: IFFALSE 482
// begin timer := false ;
 447: LD_ADDR_EXP 11
 451: PUSH
 452: LD_INT 0
 454: ST_TO_ADDR
// display_strings := RandPointsFromArea ( 1 , 1 , 21 , 12 , 12 ) ;
 455: LD_ADDR_OWVAR 47
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: LD_INT 21
 468: PPUSH
 469: LD_INT 12
 471: PPUSH
 472: LD_INT 12
 474: PPUSH
 475: CALL 3742 0 5
 479: ST_TO_ADDR
// end else
 480: GO 492
// display_strings := game_type ;
 482: LD_ADDR_OWVAR 47
 486: PUSH
 487: LD_EXP 1
 491: ST_TO_ADDR
// disable ( 01 ) ;
 492: LD_INT 1
 494: DISABLE_MARKED
// disable ( 02 ) ;
 495: LD_INT 2
 497: DISABLE_MARKED
// FogOff ( your_side ) ;
 498: LD_OWVAR 2
 502: PPUSH
 503: CALL_OW 344
// end ; end_of_file
 507: END
// export deposits , base_xy , human_amount , source , apeman_amount , crates_spawn , base_lvl , skill , reinforce , start_pos , depot_pos , bunker_pos , deposits_pos , area_pos ; export function LoadGame ( ) ; var i , x , y , d , p , b , base ; begin
 508: LD_INT 0
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
// music_nat := players_nat [ your_side ] ;
 518: LD_ADDR_OWVAR 71
 522: PUSH
 523: LD_EXP 6
 527: PUSH
 528: LD_OWVAR 2
 532: ARRAY
 533: ST_TO_ADDR
// if not Multiplayer then
 534: LD_OWVAR 4
 538: NOT
 539: IFFALSE 549
// game_type := 1 ;
 541: LD_ADDR_EXP 1
 545: PUSH
 546: LD_INT 1
 548: ST_TO_ADDR
// case game_type of 1 :
 549: LD_EXP 1
 553: PUSH
 554: LD_INT 1
 556: DOUBLE
 557: EQUAL
 558: IFTRUE 562
 560: GO 2651
 562: POP
// begin base_lvl := [ 0 , 1 , 2 , 3 ] [ mp_settings [ 1 ] ] ;
 563: LD_ADDR_EXP 19
 567: PUSH
 568: LD_INT 0
 570: PUSH
 571: LD_INT 1
 573: PUSH
 574: LD_INT 2
 576: PUSH
 577: LD_INT 3
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: PUSH
 586: LD_EXP 2
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: ARRAY
 595: ST_TO_ADDR
// human_amount := [ 6 , 9 , 12 , 15 , 18 , 21 ] [ mp_settings [ 2 ] ] ;
 596: LD_ADDR_EXP 15
 600: PUSH
 601: LD_INT 6
 603: PUSH
 604: LD_INT 9
 606: PUSH
 607: LD_INT 12
 609: PUSH
 610: LD_INT 15
 612: PUSH
 613: LD_INT 18
 615: PUSH
 616: LD_INT 21
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: PUSH
 627: LD_EXP 2
 631: PUSH
 632: LD_INT 2
 634: ARRAY
 635: ARRAY
 636: ST_TO_ADDR
// skill := [ 2 , 4 , 5 , 6 , 8 ] [ mp_settings [ 3 ] ] ;
 637: LD_ADDR_EXP 20
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: LD_INT 4
 647: PUSH
 648: LD_INT 5
 650: PUSH
 651: LD_INT 6
 653: PUSH
 654: LD_INT 8
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: LD_EXP 2
 668: PUSH
 669: LD_INT 3
 671: ARRAY
 672: ARRAY
 673: ST_TO_ADDR
// source := [ 0 , 1 , 2 , 3 ] [ mp_settings [ 4 ] ] ;
 674: LD_ADDR_EXP 16
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 1
 684: PUSH
 685: LD_INT 2
 687: PUSH
 688: LD_INT 3
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_EXP 2
 701: PUSH
 702: LD_INT 4
 704: ARRAY
 705: ARRAY
 706: ST_TO_ADDR
// deposits := [ 0 , 1 ] [ mp_settings [ 5 ] ] ;
 707: LD_ADDR_EXP 13
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: LD_EXP 2
 726: PUSH
 727: LD_INT 5
 729: ARRAY
 730: ARRAY
 731: ST_TO_ADDR
// crates_spawn := [ 1 , 2 , 3 , 4 , 5 ] [ mp_settings [ 6 ] ] ;
 732: LD_ADDR_EXP 18
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 3
 745: PUSH
 746: LD_INT 4
 748: PUSH
 749: LD_INT 5
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_EXP 2
 763: PUSH
 764: LD_INT 6
 766: ARRAY
 767: ARRAY
 768: ST_TO_ADDR
// apeman_amount := [ 0 , 2 , 3 , 5 ] [ mp_settings [ 7 ] ] ;
 769: LD_ADDR_EXP 17
 773: PUSH
 774: LD_INT 0
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: LD_INT 3
 782: PUSH
 783: LD_INT 5
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: PUSH
 792: LD_EXP 2
 796: PUSH
 797: LD_INT 7
 799: ARRAY
 800: ARRAY
 801: ST_TO_ADDR
// reinforce := [ 0 , 1 , 2 , 3 ] [ mp_settings [ 8 ] ] ;
 802: LD_ADDR_EXP 21
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 2
 815: PUSH
 816: LD_INT 3
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: PUSH
 825: LD_EXP 2
 829: PUSH
 830: LD_INT 8
 832: ARRAY
 833: ARRAY
 834: ST_TO_ADDR
// vision := [ 0 , 1 ] [ mp_settings [ 9 ] ] ;
 835: LD_ADDR_EXP 12
 839: PUSH
 840: LD_INT 0
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_EXP 2
 854: PUSH
 855: LD_INT 9
 857: ARRAY
 858: ARRAY
 859: ST_TO_ADDR
// timer := 1 ;
 860: LD_ADDR_EXP 11
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// start_pos := [ [ 4 , 3 , 12 , 6 ] , [ 81 , 72 , 89 , 75 ] , [ 3 , 3 ] , [ 4 , 4 ] , [ 5 , 5 ] , [ 6 , 6 ] , [ 7 , 7 ] , [ 8 , 8 ] ] ;
 868: LD_ADDR_EXP 22
 872: PUSH
 873: LD_INT 4
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: LD_INT 12
 881: PUSH
 882: LD_INT 6
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 81
 893: PUSH
 894: LD_INT 72
 896: PUSH
 897: LD_INT 89
 899: PUSH
 900: LD_INT 75
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 3
 911: PUSH
 912: LD_INT 3
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 4
 921: PUSH
 922: LD_INT 4
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 5
 931: PUSH
 932: LD_INT 5
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 6
 941: PUSH
 942: LD_INT 6
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 7
 951: PUSH
 952: LD_INT 7
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 8
 961: PUSH
 962: LD_INT 8
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: ST_TO_ADDR
// area_pos := [ area1 , area2 ] ;
 979: LD_ADDR_EXP 26
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: LD_INT 2
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: ST_TO_ADDR
// depot_pos := [ [ 15 , 6 , 0 ] , [ 90 , 73 , 2 ] , [ 3 , 3 , 3 ] , [ 4 , 4 , 4 ] , [ 5 , 5 , 5 ] , [ 6 , 6 , 0 ] , [ 7 , 7 , 1 ] , [ 8 , 8 , 2 ] ] ;
 994: LD_ADDR_EXP 23
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 6
1004: PUSH
1005: LD_INT 0
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 90
1015: PUSH
1016: LD_INT 73
1018: PUSH
1019: LD_INT 2
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 3
1029: PUSH
1030: LD_INT 3
1032: PUSH
1033: LD_INT 3
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 4
1043: PUSH
1044: LD_INT 4
1046: PUSH
1047: LD_INT 4
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 5
1057: PUSH
1058: LD_INT 5
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_INT 6
1071: PUSH
1072: LD_INT 6
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 7
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 8
1102: PUSH
1103: LD_INT 2
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: ST_TO_ADDR
// bunker_pos := [ [ [ 14 , 17 , 0 ] , [ 24 , 8 , 5 ] ] , [ [ 78 , 73 , 1 ] , [ 85 , 63 , 2 ] ] , [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] , [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] , [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] , [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] , [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] , [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] ] ;
1121: LD_ADDR_EXP 24
1125: PUSH
1126: LD_INT 14
1128: PUSH
1129: LD_INT 17
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 24
1142: PUSH
1143: LD_INT 8
1145: PUSH
1146: LD_INT 5
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 78
1160: PUSH
1161: LD_INT 73
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_INT 85
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 2
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 1
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: LD_INT 1
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 1
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: LD_INT 1
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 1
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: ST_TO_ADDR
// deposits_pos := [ [ 7 , 6 ] , [ 84 , 73 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 18 , 9 ] , [ 88 , 67 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] , [ 1 , 1 ] ] ;
1392: LD_ADDR_EXP 25
1396: PUSH
1397: LD_INT 7
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 84
1409: PUSH
1410: LD_INT 73
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: LD_INT 1
1449: PUSH
1450: LD_INT 1
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: LD_INT 1
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: LD_INT 1
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: PUSH
1487: LD_INT 1
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 1
1499: PUSH
1500: LD_INT 1
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: LD_INT 1
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: LD_INT 1
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 1
1549: PUSH
1550: LD_INT 1
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 18
1559: PUSH
1560: LD_INT 9
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 88
1569: PUSH
1570: LD_INT 67
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 1
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: LD_INT 1
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 1
1659: PUSH
1660: LD_INT 1
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 1
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: LD_INT 1
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: ST_TO_ADDR
// for i = 1 to 8 do
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_INT 8
1763: PUSH
1764: FOR_TO
1765: IFFALSE 2647
// if players_pos [ i ] > 0 then
1767: LD_EXP 5
1771: PUSH
1772: LD_VAR 0 2
1776: ARRAY
1777: PUSH
1778: LD_INT 0
1780: GREATER
1781: IFFALSE 2645
// begin uc_side := players_pos [ i ] ;
1783: LD_ADDR_OWVAR 20
1787: PUSH
1788: LD_EXP 5
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// uc_nation := players_nat [ i ] ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_EXP 6
1808: PUSH
1809: LD_VAR 0 2
1813: ARRAY
1814: ST_TO_ADDR
// if base_lvl > 0 then
1815: LD_EXP 19
1819: PUSH
1820: LD_INT 0
1822: GREATER
1823: IFFALSE 2065
// begin x := depot_pos [ i ] [ 1 ] ;
1825: LD_ADDR_VAR 0 3
1829: PUSH
1830: LD_EXP 23
1834: PUSH
1835: LD_VAR 0 2
1839: ARRAY
1840: PUSH
1841: LD_INT 1
1843: ARRAY
1844: ST_TO_ADDR
// y := depot_pos [ i ] [ 2 ] ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: LD_EXP 23
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PUSH
1861: LD_INT 2
1863: ARRAY
1864: ST_TO_ADDR
// d := depot_pos [ i ] [ 3 ] ;
1865: LD_ADDR_VAR 0 5
1869: PUSH
1870: LD_EXP 23
1874: PUSH
1875: LD_VAR 0 2
1879: ARRAY
1880: PUSH
1881: LD_INT 3
1883: ARRAY
1884: ST_TO_ADDR
// bc_type = b_depot ;
1885: LD_ADDR_OWVAR 42
1889: PUSH
1890: LD_INT 0
1892: ST_TO_ADDR
// base = CreateAndPlaceBuildingXYD ( x , y , d ) ;
1893: LD_ADDR_VAR 0 8
1897: PUSH
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_VAR 0 5
1912: PPUSH
1913: CALL_OW 47
1917: ST_TO_ADDR
// SetBName ( base , @ & players_pos [ i ] ) ;
1918: LD_VAR 0 8
1922: PPUSH
1923: LD_STRING @
1925: PUSH
1926: LD_EXP 5
1930: PUSH
1931: LD_VAR 0 2
1935: ARRAY
1936: STR
1937: PPUSH
1938: CALL_OW 500
// SetResourceType ( GetBase ( base ) , mat_cans , [ 0 , 50 , 100 , 250 ] [ source ] ) ;
1942: LD_VAR 0 8
1946: PPUSH
1947: CALL_OW 274
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 0
1957: PUSH
1958: LD_INT 50
1960: PUSH
1961: LD_INT 100
1963: PUSH
1964: LD_INT 250
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_EXP 16
1977: ARRAY
1978: PPUSH
1979: CALL_OW 277
// SetResourceType ( GetBase ( base ) , mat_oil , [ 0 , 30 , 50 , 150 ] [ source ] ) ;
1983: LD_VAR 0 8
1987: PPUSH
1988: CALL_OW 274
1992: PPUSH
1993: LD_INT 2
1995: PPUSH
1996: LD_INT 0
1998: PUSH
1999: LD_INT 30
2001: PUSH
2002: LD_INT 50
2004: PUSH
2005: LD_INT 150
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: LD_EXP 16
2018: ARRAY
2019: PPUSH
2020: CALL_OW 277
// SetResourceType ( GetBase ( base ) , mat_siberit , [ 0 , 15 , 25 , 50 ] [ source ] ) ;
2024: LD_VAR 0 8
2028: PPUSH
2029: CALL_OW 274
2033: PPUSH
2034: LD_INT 3
2036: PPUSH
2037: LD_INT 0
2039: PUSH
2040: LD_INT 15
2042: PUSH
2043: LD_INT 25
2045: PUSH
2046: LD_INT 50
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: PUSH
2055: LD_EXP 16
2059: ARRAY
2060: PPUSH
2061: CALL_OW 277
// end ; if base_lvl = 2 then
2065: LD_EXP 19
2069: PUSH
2070: LD_INT 2
2072: EQUAL
2073: IFFALSE 2206
// begin bc_type := b_breastwork ;
2075: LD_ADDR_OWVAR 42
2079: PUSH
2080: LD_INT 31
2082: ST_TO_ADDR
// for p = 1 to 2 do
2083: LD_ADDR_VAR 0 6
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_INT 2
2095: PUSH
2096: FOR_TO
2097: IFFALSE 2204
// begin x := bunker_pos [ i ] [ p ] [ 1 ] ;
2099: LD_ADDR_VAR 0 3
2103: PUSH
2104: LD_EXP 24
2108: PUSH
2109: LD_VAR 0 2
2113: ARRAY
2114: PUSH
2115: LD_VAR 0 6
2119: ARRAY
2120: PUSH
2121: LD_INT 1
2123: ARRAY
2124: ST_TO_ADDR
// y := bunker_pos [ i ] [ p ] [ 2 ] ;
2125: LD_ADDR_VAR 0 4
2129: PUSH
2130: LD_EXP 24
2134: PUSH
2135: LD_VAR 0 2
2139: ARRAY
2140: PUSH
2141: LD_VAR 0 6
2145: ARRAY
2146: PUSH
2147: LD_INT 2
2149: ARRAY
2150: ST_TO_ADDR
// d := bunker_pos [ i ] [ p ] [ 3 ] ;
2151: LD_ADDR_VAR 0 5
2155: PUSH
2156: LD_EXP 24
2160: PUSH
2161: LD_VAR 0 2
2165: ARRAY
2166: PUSH
2167: LD_VAR 0 6
2171: ARRAY
2172: PUSH
2173: LD_INT 3
2175: ARRAY
2176: ST_TO_ADDR
// b = CreateAndPlaceBuildingXYD ( x , y , d ) ;
2177: LD_ADDR_VAR 0 7
2181: PUSH
2182: LD_VAR 0 3
2186: PPUSH
2187: LD_VAR 0 4
2191: PPUSH
2192: LD_VAR 0 5
2196: PPUSH
2197: CALL_OW 47
2201: ST_TO_ADDR
// end ;
2202: GO 2096
2204: POP
2205: POP
// end ; if base_lvl = 3 then
2206: LD_EXP 19
2210: PUSH
2211: LD_INT 3
2213: EQUAL
2214: IFFALSE 2321
// begin bc_type := b_armoury ;
2216: LD_ADDR_OWVAR 42
2220: PUSH
2221: LD_INT 4
2223: ST_TO_ADDR
// x := bunker_pos [ i ] [ 1 ] [ 1 ] ;
2224: LD_ADDR_VAR 0 3
2228: PUSH
2229: LD_EXP 24
2233: PUSH
2234: LD_VAR 0 2
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PUSH
2244: LD_INT 1
2246: ARRAY
2247: ST_TO_ADDR
// y := bunker_pos [ i ] [ 1 ] [ 2 ] ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_EXP 24
2257: PUSH
2258: LD_VAR 0 2
2262: ARRAY
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: PUSH
2268: LD_INT 2
2270: ARRAY
2271: ST_TO_ADDR
// d := bunker_pos [ i ] [ 1 ] [ 3 ] ;
2272: LD_ADDR_VAR 0 5
2276: PUSH
2277: LD_EXP 24
2281: PUSH
2282: LD_VAR 0 2
2286: ARRAY
2287: PUSH
2288: LD_INT 1
2290: ARRAY
2291: PUSH
2292: LD_INT 3
2294: ARRAY
2295: ST_TO_ADDR
// b = CreateAndPlaceBuildingXYD ( x , y , d ) ;
2296: LD_ADDR_VAR 0 7
2300: PUSH
2301: LD_VAR 0 3
2305: PPUSH
2306: LD_VAR 0 4
2310: PPUSH
2311: LD_VAR 0 5
2315: PPUSH
2316: CALL_OW 47
2320: ST_TO_ADDR
// end ; if deposits = 0 then
2321: LD_EXP 13
2325: PUSH
2326: LD_INT 0
2328: EQUAL
2329: IFFALSE 2415
// begin CreateDepositXY ( deposits_pos [ i ] [ 1 ] , deposits_pos [ i ] [ 2 ] , mat_oil ) ;
2331: LD_EXP 25
2335: PUSH
2336: LD_VAR 0 2
2340: ARRAY
2341: PUSH
2342: LD_INT 1
2344: ARRAY
2345: PPUSH
2346: LD_EXP 25
2350: PUSH
2351: LD_VAR 0 2
2355: ARRAY
2356: PUSH
2357: LD_INT 2
2359: ARRAY
2360: PPUSH
2361: LD_INT 2
2363: PPUSH
2364: CALL_OW 62
// CreateDepositXY ( deposits_pos [ i + 16 ] [ 1 ] , deposits_pos [ i + 16 ] [ 2 ] , mat_siberit ) ;
2368: LD_EXP 25
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_INT 16
2380: PLUS
2381: ARRAY
2382: PUSH
2383: LD_INT 1
2385: ARRAY
2386: PPUSH
2387: LD_EXP 25
2391: PUSH
2392: LD_VAR 0 2
2396: PUSH
2397: LD_INT 16
2399: PLUS
2400: ARRAY
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: PPUSH
2406: LD_INT 3
2408: PPUSH
2409: CALL_OW 62
// end else
2413: GO 2587
// begin CreateDepositXY ( deposits_pos [ i ] [ 1 ] , deposits_pos [ i ] [ 2 ] , mat_oil ) ;
2415: LD_EXP 25
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_EXP 25
2434: PUSH
2435: LD_VAR 0 2
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 62
// CreateDepositXY ( deposits_pos [ i + 8 ] [ 1 ] , deposits_pos [ i + 8 ] [ 2 ] , mat_oil ) ;
2452: LD_EXP 25
2456: PUSH
2457: LD_VAR 0 2
2461: PUSH
2462: LD_INT 8
2464: PLUS
2465: ARRAY
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: LD_EXP 25
2475: PUSH
2476: LD_VAR 0 2
2480: PUSH
2481: LD_INT 8
2483: PLUS
2484: ARRAY
2485: PUSH
2486: LD_INT 2
2488: ARRAY
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: CALL_OW 62
// CreateDepositXY ( deposits_pos [ i + 16 ] [ 1 ] , deposits_pos [ i + 16 ] [ 2 ] , mat_siberit ) ;
2497: LD_EXP 25
2501: PUSH
2502: LD_VAR 0 2
2506: PUSH
2507: LD_INT 16
2509: PLUS
2510: ARRAY
2511: PUSH
2512: LD_INT 1
2514: ARRAY
2515: PPUSH
2516: LD_EXP 25
2520: PUSH
2521: LD_VAR 0 2
2525: PUSH
2526: LD_INT 16
2528: PLUS
2529: ARRAY
2530: PUSH
2531: LD_INT 2
2533: ARRAY
2534: PPUSH
2535: LD_INT 3
2537: PPUSH
2538: CALL_OW 62
// CreateDepositXY ( deposits_pos [ i + 24 ] [ 1 ] , deposits_pos [ i + 24 ] [ 2 ] , mat_siberit ) ;
2542: LD_EXP 25
2546: PUSH
2547: LD_VAR 0 2
2551: PUSH
2552: LD_INT 24
2554: PLUS
2555: ARRAY
2556: PUSH
2557: LD_INT 1
2559: ARRAY
2560: PPUSH
2561: LD_EXP 25
2565: PUSH
2566: LD_VAR 0 2
2570: PUSH
2571: LD_INT 24
2573: PLUS
2574: ARRAY
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: CALL_OW 62
// end ; CreateSquad ( players_pos [ i ] , players_nat [ i ] , human_amount , skill , start_pos [ i ] , area_pos [ i ] ) ;
2587: LD_EXP 5
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: PPUSH
2598: LD_EXP 6
2602: PUSH
2603: LD_VAR 0 2
2607: ARRAY
2608: PPUSH
2609: LD_EXP 15
2613: PPUSH
2614: LD_EXP 20
2618: PPUSH
2619: LD_EXP 22
2623: PUSH
2624: LD_VAR 0 2
2628: ARRAY
2629: PPUSH
2630: LD_EXP 26
2634: PUSH
2635: LD_VAR 0 2
2639: ARRAY
2640: PPUSH
2641: CALL 3183 0 6
// end ;
2645: GO 1764
2647: POP
2648: POP
// end ; end ;
2649: GO 2652
2651: POP
// end ; end_of_file
2652: LD_VAR 0 1
2656: RET
// export function LoadSpec ( ) ; var i ; begin
2657: LD_INT 0
2659: PPUSH
2660: PPUSH
// for i = 1 to 8 do
2661: LD_ADDR_VAR 0 2
2665: PUSH
2666: DOUBLE
2667: LD_INT 1
2669: DEC
2670: ST_TO_ADDR
2671: LD_INT 8
2673: PUSH
2674: FOR_TO
2675: IFFALSE 2762
// if Multiplayer_GetPlayerIsSpec ( i ) then
2677: LD_VAR 0 2
2681: PPUSH
2682: CALL_OW 530
2686: IFFALSE 2760
// begin players_pos = Replace ( players_pos , i , 0 ) ;
2688: LD_ADDR_EXP 5
2692: PUSH
2693: LD_EXP 5
2697: PPUSH
2698: LD_VAR 0 2
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 1
2710: ST_TO_ADDR
// teams = Replace ( teams , players_team [ i ] , players_team [ players_team [ i ] ] diff i ) ;
2711: LD_ADDR_EXP 10
2715: PUSH
2716: LD_EXP 10
2720: PPUSH
2721: LD_EXP 7
2725: PUSH
2726: LD_VAR 0 2
2730: ARRAY
2731: PPUSH
2732: LD_EXP 7
2736: PUSH
2737: LD_EXP 7
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: ARRAY
2748: PUSH
2749: LD_VAR 0 2
2753: DIFF
2754: PPUSH
2755: CALL_OW 1
2759: ST_TO_ADDR
// end ;
2760: GO 2674
2762: POP
2763: POP
// position_sides = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2764: LD_ADDR_EXP 8
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: LD_INT 0
2774: PUSH
2775: LD_INT 0
2777: PUSH
2778: LD_INT 0
2780: PUSH
2781: LD_INT 0
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 0
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// for i = 1 to 8 do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 8
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2864
// if players_pos [ i ] then
2819: LD_EXP 5
2823: PUSH
2824: LD_VAR 0 2
2828: ARRAY
2829: IFFALSE 2862
// position_sides = Replace ( position_sides , players_pos [ i ] , i ) ;
2831: LD_ADDR_EXP 8
2835: PUSH
2836: LD_EXP 8
2840: PPUSH
2841: LD_EXP 5
2845: PUSH
2846: LD_VAR 0 2
2850: ARRAY
2851: PPUSH
2852: LD_VAR 0 2
2856: PPUSH
2857: CALL_OW 1
2861: ST_TO_ADDR
2862: GO 2816
2864: POP
2865: POP
// team_game := players_team [ your_side ] ;
2866: LD_ADDR_EXP 9
2870: PUSH
2871: LD_EXP 7
2875: PUSH
2876: LD_OWVAR 2
2880: ARRAY
2881: ST_TO_ADDR
// if IAmSpec then
2882: CALL_OW 531
2886: IFFALSE 2907
// PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: LD_OWVAR 2
2898: PPUSH
2899: LD_INT 32767
2901: NEG
2902: PPUSH
2903: CALL_OW 330
// result := true ;
2907: LD_ADDR_VAR 0 1
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// end ;
2915: LD_VAR 0 1
2919: RET
// export function CreatePlayerCommander ( side , nation , skill , mode ) ; var sex ; begin
2920: LD_INT 0
2922: PPUSH
2923: PPUSH
// if MultiPlayer then
2924: LD_OWVAR 4
2928: IFFALSE 3097
// begin if mode = 0 then
2930: LD_VAR 0 4
2934: PUSH
2935: LD_INT 0
2937: EQUAL
2938: IFFALSE 3014
// begin hc_skills := skill ;
2940: LD_ADDR_OWVAR 31
2944: PUSH
2945: LD_VAR 0 3
2949: ST_TO_ADDR
// hc_importance := 100 ;
2950: LD_ADDR_OWVAR 32
2954: PUSH
2955: LD_INT 100
2957: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
2958: LD_ADDR_OWVAR 26
2962: PUSH
2963: LD_OWVAR 19
2967: PUSH
2968: LD_VAR 0 1
2972: ARRAY
2973: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2974: LD_ADDR_OWVAR 33
2978: PUSH
2979: LD_STRING MULTIAVATARS
2981: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
2982: LD_ADDR_OWVAR 34
2986: PUSH
2987: LD_VAR 0 1
2991: PPUSH
2992: CALL_OW 525
2996: ST_TO_ADDR
// sex := Multiplayer_GetPlayerSex ( side ) ;
2997: LD_ADDR_VAR 0 6
3001: PUSH
3002: LD_VAR 0 1
3006: PPUSH
3007: CALL_OW 526
3011: ST_TO_ADDR
// end else
3012: GO 3064
// begin hc_skills := skill ;
3014: LD_ADDR_OWVAR 31
3018: PUSH
3019: LD_VAR 0 3
3023: ST_TO_ADDR
// hc_importance := 100 ;
3024: LD_ADDR_OWVAR 32
3028: PUSH
3029: LD_INT 100
3031: ST_TO_ADDR
// hc_name :=  ;
3032: LD_ADDR_OWVAR 26
3036: PUSH
3037: LD_STRING 
3039: ST_TO_ADDR
// hc_gallery :=  ;
3040: LD_ADDR_OWVAR 33
3044: PUSH
3045: LD_STRING 
3047: ST_TO_ADDR
// sex := Rand ( sex_male , sex_female ) ;
3048: LD_ADDR_VAR 0 6
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 12
3063: ST_TO_ADDR
// end ; PrepareHuman ( sex , 1 , skill + 1 ) ;
3064: LD_VAR 0 6
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: LD_VAR 0 3
3076: PUSH
3077: LD_INT 1
3079: PLUS
3080: PPUSH
3081: CALL_OW 380
// result := CreateHuman ;
3085: LD_ADDR_VAR 0 5
3089: PUSH
3090: CALL_OW 44
3094: ST_TO_ADDR
// end else
3095: GO 3178
// begin hc_skills := skill ;
3097: LD_ADDR_OWVAR 31
3101: PUSH
3102: LD_VAR 0 3
3106: ST_TO_ADDR
// hc_importance := 100 ;
3107: LD_ADDR_OWVAR 32
3111: PUSH
3112: LD_INT 100
3114: ST_TO_ADDR
// hc_name :=  ;
3115: LD_ADDR_OWVAR 26
3119: PUSH
3120: LD_STRING 
3122: ST_TO_ADDR
// hc_gallery :=  ;
3123: LD_ADDR_OWVAR 33
3127: PUSH
3128: LD_STRING 
3130: ST_TO_ADDR
// sex := Rand ( sex_male , sex_female ) ;
3131: LD_ADDR_VAR 0 6
3135: PUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 2
3141: PPUSH
3142: CALL_OW 12
3146: ST_TO_ADDR
// PrepareHuman ( sex , 1 , skill + 1 ) ;
3147: LD_VAR 0 6
3151: PPUSH
3152: LD_INT 1
3154: PPUSH
3155: LD_VAR 0 3
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: CALL_OW 380
// result := CreateHuman ;
3168: LD_ADDR_VAR 0 5
3172: PUSH
3173: CALL_OW 44
3177: ST_TO_ADDR
// end ; end ;
3178: LD_VAR 0 5
3182: RET
// export function CreateSquad ( side , nat , amount , skill , areaxy , area ) ; var i , un , force , tmp , tmp2 , tmp3 , p , pom ; begin
3183: LD_INT 0
3185: PPUSH
3186: PPUSH
3187: PPUSH
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
3193: PPUSH
// uc_side := side ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_VAR 0 1
3203: ST_TO_ADDR
// uc_nation := nat ;
3204: LD_ADDR_OWVAR 21
3208: PUSH
3209: LD_VAR 0 2
3213: ST_TO_ADDR
// hc_gallery :=  ;
3214: LD_ADDR_OWVAR 33
3218: PUSH
3219: LD_STRING 
3221: ST_TO_ADDR
// hc_name :=  ;
3222: LD_ADDR_OWVAR 26
3226: PUSH
3227: LD_STRING 
3229: ST_TO_ADDR
// hc_importance := 0 ;
3230: LD_ADDR_OWVAR 32
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// force := [ ] ;
3238: LD_ADDR_VAR 0 10
3242: PUSH
3243: EMPTY
3244: ST_TO_ADDR
// tmp := amount / 4 ;
3245: LD_ADDR_VAR 0 11
3249: PUSH
3250: LD_VAR 0 3
3254: PUSH
3255: LD_INT 4
3257: DIVREAL
3258: ST_TO_ADDR
// tmp2 := tmp * 2 ;
3259: LD_ADDR_VAR 0 12
3263: PUSH
3264: LD_VAR 0 11
3268: PUSH
3269: LD_INT 2
3271: MUL
3272: ST_TO_ADDR
// tmp3 := tmp2 + tmp ;
3273: LD_ADDR_VAR 0 13
3277: PUSH
3278: LD_VAR 0 12
3282: PUSH
3283: LD_VAR 0 11
3287: PLUS
3288: ST_TO_ADDR
// for i = 1 to amount do
3289: LD_ADDR_VAR 0 8
3293: PUSH
3294: DOUBLE
3295: LD_INT 1
3297: DEC
3298: ST_TO_ADDR
3299: LD_VAR 0 3
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3485
// begin if i <= tmp then
3307: LD_VAR 0 8
3311: PUSH
3312: LD_VAR 0 11
3316: LESSEQUAL
3317: IFFALSE 3336
// PrepareHuman ( false , 1 , skill ) else
3319: LD_INT 0
3321: PPUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_VAR 0 4
3329: PPUSH
3330: CALL_OW 380
3334: GO 3409
// if i <= tmp2 then
3336: LD_VAR 0 8
3340: PUSH
3341: LD_VAR 0 12
3345: LESSEQUAL
3346: IFFALSE 3365
// PrepareHuman ( false , 2 , skill ) else
3348: LD_INT 0
3350: PPUSH
3351: LD_INT 2
3353: PPUSH
3354: LD_VAR 0 4
3358: PPUSH
3359: CALL_OW 380
3363: GO 3409
// if i <= tmp3 then
3365: LD_VAR 0 8
3369: PUSH
3370: LD_VAR 0 13
3374: LESSEQUAL
3375: IFFALSE 3394
// PrepareHuman ( false , 3 , skill ) else
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 3
3382: PPUSH
3383: LD_VAR 0 4
3387: PPUSH
3388: CALL_OW 380
3392: GO 3409
// PrepareHuman ( false , 4 , skill ) ;
3394: LD_INT 0
3396: PPUSH
3397: LD_INT 4
3399: PPUSH
3400: LD_VAR 0 4
3404: PPUSH
3405: CALL_OW 380
// if i = 1 then
3409: LD_VAR 0 8
3413: PUSH
3414: LD_INT 1
3416: EQUAL
3417: IFFALSE 3449
// un := CreatePlayerCommander ( side , nat , skill , 0 ) else
3419: LD_ADDR_VAR 0 9
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_VAR 0 2
3433: PPUSH
3434: LD_VAR 0 4
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL 2920 0 4
3446: ST_TO_ADDR
3447: GO 3467
// begin hc_importance := 0 ;
3449: LD_ADDR_OWVAR 32
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// un := CreateHuman ;
3457: LD_ADDR_VAR 0 9
3461: PUSH
3462: CALL_OW 44
3466: ST_TO_ADDR
// end ; force := force ^ un ;
3467: LD_ADDR_VAR 0 10
3471: PUSH
3472: LD_VAR 0 10
3476: PUSH
3477: LD_VAR 0 9
3481: ADD
3482: ST_TO_ADDR
// end ;
3483: GO 3304
3485: POP
3486: POP
// p := 1 ;
3487: LD_ADDR_VAR 0 14
3491: PUSH
3492: LD_INT 1
3494: ST_TO_ADDR
// if areaxy = 0 then
3495: LD_VAR 0 5
3499: PUSH
3500: LD_INT 0
3502: EQUAL
3503: IFFALSE 3552
// begin for i = 1 to force do
3505: LD_ADDR_VAR 0 8
3509: PUSH
3510: DOUBLE
3511: LD_INT 1
3513: DEC
3514: ST_TO_ADDR
3515: LD_VAR 0 10
3519: PUSH
3520: FOR_TO
3521: IFFALSE 3548
// PlaceUnitArea ( force [ i ] , area , false ) end else
3523: LD_VAR 0 10
3527: PUSH
3528: LD_VAR 0 8
3532: ARRAY
3533: PPUSH
3534: LD_VAR 0 6
3538: PPUSH
3539: LD_INT 0
3541: PPUSH
3542: CALL_OW 49
3546: GO 3520
3548: POP
3549: POP
3550: GO 3737
// begin pom := RandPointsFromArea ( areaxy [ 1 ] , areaxy [ 2 ] , areaxy [ 3 ] , areaxy [ 4 ] , amount + 3 ) ;
3552: LD_ADDR_VAR 0 15
3556: PUSH
3557: LD_VAR 0 5
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 5
3570: PUSH
3571: LD_INT 2
3573: ARRAY
3574: PPUSH
3575: LD_VAR 0 5
3579: PUSH
3580: LD_INT 3
3582: ARRAY
3583: PPUSH
3584: LD_VAR 0 5
3588: PUSH
3589: LD_INT 4
3591: ARRAY
3592: PPUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_INT 3
3600: PLUS
3601: PPUSH
3602: CALL 3742 0 5
3606: ST_TO_ADDR
// for i = 1 to force do
3607: LD_ADDR_VAR 0 8
3611: PUSH
3612: DOUBLE
3613: LD_INT 1
3615: DEC
3616: ST_TO_ADDR
3617: LD_VAR 0 10
3621: PUSH
3622: FOR_TO
3623: IFFALSE 3735
// begin if HexInfo ( pom [ p ] , pom [ p + 1 ] ) = 0 then
3625: LD_VAR 0 15
3629: PUSH
3630: LD_VAR 0 14
3634: ARRAY
3635: PPUSH
3636: LD_VAR 0 15
3640: PUSH
3641: LD_VAR 0 14
3645: PUSH
3646: LD_INT 1
3648: PLUS
3649: ARRAY
3650: PPUSH
3651: CALL_OW 428
3655: PUSH
3656: LD_INT 0
3658: EQUAL
3659: IFFALSE 3719
// PlaceUnitXYR ( force [ i ] , pom [ p ] , pom [ p + 1 ] , MultiRand ( 0 , 5 , 1 ) , false ) ;
3661: LD_VAR 0 10
3665: PUSH
3666: LD_VAR 0 8
3670: ARRAY
3671: PPUSH
3672: LD_VAR 0 15
3676: PUSH
3677: LD_VAR 0 14
3681: ARRAY
3682: PPUSH
3683: LD_VAR 0 15
3687: PUSH
3688: LD_VAR 0 14
3692: PUSH
3693: LD_INT 1
3695: PLUS
3696: ARRAY
3697: PPUSH
3698: LD_INT 0
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: LD_INT 1
3706: PPUSH
3707: CALL_OW 14
3711: PPUSH
3712: LD_INT 0
3714: PPUSH
3715: CALL_OW 50
// p := p + 2 ;
3719: LD_ADDR_VAR 0 14
3723: PUSH
3724: LD_VAR 0 14
3728: PUSH
3729: LD_INT 2
3731: PLUS
3732: ST_TO_ADDR
// end ;
3733: GO 3622
3735: POP
3736: POP
// end ; end ;
3737: LD_VAR 0 7
3741: RET
// export function RandPointsFromArea ( x1 , y1 , x2 , y2 , num ) ; var list , i , x , y ; begin
3742: LD_INT 0
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// list := [ ] ;
3749: LD_ADDR_VAR 0 7
3753: PUSH
3754: EMPTY
3755: ST_TO_ADDR
// if num = 0 then
3756: LD_VAR 0 5
3760: PUSH
3761: LD_INT 0
3763: EQUAL
3764: IFFALSE 3802
// num := ( x2 - x1 - 1 ) ^ ( y2 - y1 - 1 ) ;
3766: LD_ADDR_VAR 0 5
3770: PUSH
3771: LD_VAR 0 3
3775: PUSH
3776: LD_VAR 0 1
3780: MINUS
3781: PUSH
3782: LD_INT 1
3784: MINUS
3785: PUSH
3786: LD_VAR 0 4
3790: PUSH
3791: LD_VAR 0 2
3795: MINUS
3796: PUSH
3797: LD_INT 1
3799: MINUS
3800: ADD
3801: ST_TO_ADDR
// for i = 1 to num do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_VAR 0 5
3816: PUSH
3817: FOR_TO
3818: IFFALSE 3958
// begin x := MultiRand ( x1 , x2 , 1 ) ;
3820: LD_ADDR_VAR 0 9
3824: PUSH
3825: LD_VAR 0 1
3829: PPUSH
3830: LD_VAR 0 3
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 14
3842: ST_TO_ADDR
// y := MultiRand ( y1 , y2 , 1 ) ;
3843: LD_ADDR_VAR 0 10
3847: PUSH
3848: LD_VAR 0 2
3852: PPUSH
3853: LD_VAR 0 4
3857: PPUSH
3858: LD_INT 1
3860: PPUSH
3861: CALL_OW 14
3865: ST_TO_ADDR
// if HexInfo ( x , y ) = 0 and not [ x , y ] in list then
3866: LD_VAR 0 9
3870: PPUSH
3871: LD_VAR 0 10
3875: PPUSH
3876: CALL_OW 428
3880: PUSH
3881: LD_INT 0
3883: EQUAL
3884: PUSH
3885: LD_VAR 0 9
3889: PUSH
3890: LD_VAR 0 10
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: LD_VAR 0 7
3903: IN
3904: NOT
3905: AND
3906: IFFALSE 3942
// begin list := list ^ x ;
3908: LD_ADDR_VAR 0 7
3912: PUSH
3913: LD_VAR 0 7
3917: PUSH
3918: LD_VAR 0 9
3922: ADD
3923: ST_TO_ADDR
// list := list ^ y ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_VAR 0 7
3933: PUSH
3934: LD_VAR 0 10
3938: ADD
3939: ST_TO_ADDR
// end else
3940: GO 3956
// num := num + 1 ;
3942: LD_ADDR_VAR 0 5
3946: PUSH
3947: LD_VAR 0 5
3951: PUSH
3952: LD_INT 1
3954: PLUS
3955: ST_TO_ADDR
// end ;
3956: GO 3817
3958: POP
3959: POP
// result := list ;
3960: LD_ADDR_VAR 0 6
3964: PUSH
3965: LD_VAR 0 7
3969: ST_TO_ADDR
// end ;
3970: LD_VAR 0 6
3974: RET
// export function SetDiplomatic ( ) ; var i , j ; begin
3975: LD_INT 0
3977: PPUSH
3978: PPUSH
3979: PPUSH
// if not team_game then
3980: LD_EXP 9
3984: NOT
3985: IFFALSE 4083
// begin for i = 1 to 8 do
3987: LD_ADDR_VAR 0 2
3991: PUSH
3992: DOUBLE
3993: LD_INT 1
3995: DEC
3996: ST_TO_ADDR
3997: LD_INT 8
3999: PUSH
4000: FOR_TO
4001: IFFALSE 4079
// for j = 1 to 8 do
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: DOUBLE
4009: LD_INT 1
4011: DEC
4012: ST_TO_ADDR
4013: LD_INT 8
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4075
// if i <> j then
4019: LD_VAR 0 2
4023: PUSH
4024: LD_VAR 0 3
4028: NONEQUAL
4029: IFFALSE 4053
// SetAttitude ( i , j , att_neutral , true ) else
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 3
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: LD_INT 1
4046: PPUSH
4047: CALL_OW 80
4051: GO 4073
// SetAttitude ( i , j , att_friend , true ) ;
4053: LD_VAR 0 2
4057: PPUSH
4058: LD_VAR 0 3
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 1
4068: PPUSH
4069: CALL_OW 80
4073: GO 4016
4075: POP
4076: POP
4077: GO 4000
4079: POP
4080: POP
// end else
4081: GO 4258
// begin if vision then
4083: LD_EXP 12
4087: IFFALSE 4152
// begin for i in teams do
4089: LD_ADDR_VAR 0 2
4093: PUSH
4094: LD_EXP 10
4098: PUSH
4099: FOR_IN
4100: IFFALSE 4150
// for j = 2 to i do
4102: LD_ADDR_VAR 0 3
4106: PUSH
4107: DOUBLE
4108: LD_INT 2
4110: DEC
4111: ST_TO_ADDR
4112: LD_VAR 0 2
4116: PUSH
4117: FOR_TO
4118: IFFALSE 4146
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4120: LD_VAR 0 2
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PPUSH
4131: LD_VAR 0 2
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 343
4144: GO 4117
4146: POP
4147: POP
4148: GO 4099
4150: POP
4151: POP
// end ; for i = 1 to 8 do
4152: LD_ADDR_VAR 0 2
4156: PUSH
4157: DOUBLE
4158: LD_INT 1
4160: DEC
4161: ST_TO_ADDR
4162: LD_INT 8
4164: PUSH
4165: FOR_TO
4166: IFFALSE 4256
// for j = 1 to 8 do
4168: LD_ADDR_VAR 0 3
4172: PUSH
4173: DOUBLE
4174: LD_INT 1
4176: DEC
4177: ST_TO_ADDR
4178: LD_INT 8
4180: PUSH
4181: FOR_TO
4182: IFFALSE 4252
// if players_pos [ i ] = players_team [ j ] then
4184: LD_EXP 5
4188: PUSH
4189: LD_VAR 0 2
4193: ARRAY
4194: PUSH
4195: LD_EXP 7
4199: PUSH
4200: LD_VAR 0 3
4204: ARRAY
4205: EQUAL
4206: IFFALSE 4230
// SetAttitude ( i , j , att_friend , true ) else
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 3
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: CALL_OW 80
4228: GO 4250
// SetAttitude ( i , j , att_enemy , true ) ;
4230: LD_VAR 0 2
4234: PPUSH
4235: LD_VAR 0 3
4239: PPUSH
4240: LD_INT 2
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: CALL_OW 80
4250: GO 4181
4252: POP
4253: POP
4254: GO 4165
4256: POP
4257: POP
// end ; end ; end_of_file
4258: LD_VAR 0 1
4262: RET
// every 0 0$01 trigger timer do
4263: LD_EXP 11
4267: IFFALSE 4290
4269: GO 4271
4271: DISABLE
// begin enable ;
4272: ENABLE
// display_strings := [ #Multi1x1-Time , tick ] ;
4273: LD_ADDR_OWVAR 47
4277: PUSH
4278: LD_STRING #Multi1x1-Time
4280: PUSH
4281: LD_OWVAR 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: ST_TO_ADDR
// end ; end_of_file
4290: END
// every 0 0$3 trigger CanWinLoose marked 01 do
4291: CALL 4640 0 0
4295: IFFALSE 4304
4297: GO 4299
4299: DISABLE
// YouLostInMultiplayer ;
4300: CALL_OW 107
4304: END
// every 0 0$3 trigger CanWinLoose marked 02 do
4305: CALL 4640 0 0
4309: IFFALSE 4318
4311: GO 4313
4313: DISABLE
// YouWinInMultiplayer ;
4314: CALL_OW 106
4318: END
// every 0 0$3 trigger team_game do var i , CanWin ;
4319: LD_EXP 9
4323: IFFALSE 4486
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
// begin if not HasPower ( your_side ) then
4332: LD_OWVAR 2
4336: PPUSH
4337: CALL 4704 0 1
4341: NOT
4342: IFFALSE 4353
// begin Multiplayer_Loose_Message ;
4344: CALL_OW 521
// enable ( 02 ) ;
4348: LD_INT 2
4350: ENABLE_MARKED
// end else
4351: GO 4486
// begin CanWin := true ;
4353: LD_ADDR_VAR 0 2
4357: PUSH
4358: LD_INT 1
4360: ST_TO_ADDR
// for i := 1 to 8 do
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: DOUBLE
4367: LD_INT 1
4369: DEC
4370: ST_TO_ADDR
4371: LD_INT 8
4373: PUSH
4374: FOR_TO
4375: IFFALSE 4472
// if players_pos [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
4377: LD_EXP 5
4381: PUSH
4382: LD_VAR 0 1
4386: ARRAY
4387: PUSH
4388: LD_VAR 0 1
4392: PPUSH
4393: CALL_OW 108
4397: AND
4398: PUSH
4399: LD_VAR 0 1
4403: PUSH
4404: LD_OWVAR 2
4408: NONEQUAL
4409: AND
4410: IFFALSE 4470
// if not players_team [ i ] or ( players_team [ i ] <> players_team [ your_side ] ) then
4412: LD_EXP 7
4416: PUSH
4417: LD_VAR 0 1
4421: ARRAY
4422: NOT
4423: PUSH
4424: LD_EXP 7
4428: PUSH
4429: LD_VAR 0 1
4433: ARRAY
4434: PUSH
4435: LD_EXP 7
4439: PUSH
4440: LD_OWVAR 2
4444: ARRAY
4445: NONEQUAL
4446: OR
4447: IFFALSE 4470
// if HasPower ( i ) then
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL 4704 0 1
4458: IFFALSE 4470
// begin CanWin := false ;
4460: LD_ADDR_VAR 0 2
4464: PUSH
4465: LD_INT 0
4467: ST_TO_ADDR
// break ;
4468: GO 4472
// end ;
4470: GO 4374
4472: POP
4473: POP
// if CanWin then
4474: LD_VAR 0 2
4478: IFFALSE 4485
// enable ( 01 ) else
4480: LD_INT 1
4482: ENABLE_MARKED
4483: GO 4486
// enable ;
4485: ENABLE
// end ; end ;
4486: PPOPN 2
4488: END
// every 0 0$3 trigger not team_game do var i , CanWin ;
4489: LD_EXP 9
4493: NOT
4494: IFFALSE 4637
4496: GO 4498
4498: DISABLE
4499: LD_INT 0
4501: PPUSH
4502: PPUSH
// begin if not HasPower ( your_side ) then
4503: LD_OWVAR 2
4507: PPUSH
4508: CALL 4704 0 1
4512: NOT
4513: IFFALSE 4524
// begin Multiplayer_Loose_Message ;
4515: CALL_OW 521
// enable ( 02 ) ;
4519: LD_INT 2
4521: ENABLE_MARKED
// end else
4522: GO 4637
// begin CanWin := true ;
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// for i := 1 to 8 do
4532: LD_ADDR_VAR 0 1
4536: PUSH
4537: DOUBLE
4538: LD_INT 1
4540: DEC
4541: ST_TO_ADDR
4542: LD_INT 8
4544: PUSH
4545: FOR_TO
4546: IFFALSE 4623
// if players_pos [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
4548: LD_EXP 5
4552: PUSH
4553: LD_VAR 0 1
4557: ARRAY
4558: PUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: CALL_OW 108
4568: AND
4569: PUSH
4570: LD_VAR 0 1
4574: PUSH
4575: LD_OWVAR 2
4579: NONEQUAL
4580: AND
4581: IFFALSE 4621
// if not AlliedSides ( i , your_side ) then
4583: LD_VAR 0 1
4587: PPUSH
4588: LD_OWVAR 2
4592: PPUSH
4593: CALL 4876 0 2
4597: NOT
4598: IFFALSE 4621
// if HasPower ( i ) then
4600: LD_VAR 0 1
4604: PPUSH
4605: CALL 4704 0 1
4609: IFFALSE 4621
// begin CanWin := false ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: LD_INT 0
4618: ST_TO_ADDR
// break ;
4619: GO 4623
// end ;
4621: GO 4545
4623: POP
4624: POP
// if CanWin then
4625: LD_VAR 0 2
4629: IFFALSE 4636
// enable ( 01 ) else
4631: LD_INT 1
4633: ENABLE_MARKED
4634: GO 4637
// enable ;
4636: ENABLE
// end ; end ;
4637: PPOPN 2
4639: END
// function CanWinLoose ; begin
4640: LD_INT 0
4642: PPUSH
// Result := true ;
4643: LD_ADDR_VAR 0 1
4647: PUSH
4648: LD_INT 1
4650: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
4651: CALL_OW 518
4655: PUSH
4656: CALL_OW 519
4660: PUSH
4661: LD_INT 0
4663: GREATER
4664: AND
4665: IFFALSE 4675
// Result := false ;
4667: LD_ADDR_VAR 0 1
4671: PUSH
4672: LD_INT 0
4674: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
4675: CALL_OW 531
4679: PUSH
4680: CALL_OW 519
4684: PUSH
4685: LD_INT 1
4687: GREATER
4688: AND
4689: IFFALSE 4699
// Result := false ;
4691: LD_ADDR_VAR 0 1
4695: PUSH
4696: LD_INT 0
4698: ST_TO_ADDR
// end ;
4699: LD_VAR 0 1
4703: RET
// function HasPower ( i ) ; begin
4704: LD_INT 0
4706: PPUSH
// if reinforce > 0 then
4707: LD_EXP 21
4711: PUSH
4712: LD_INT 0
4714: GREATER
4715: IFFALSE 4806
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: LD_INT 22
4724: PUSH
4725: LD_VAR 0 1
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: LD_INT 21
4739: PUSH
4740: LD_INT 1
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 33
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 33
4759: PUSH
4760: LD_INT 5
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 30
4769: PUSH
4770: LD_INT 0
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PUSH
4777: LD_INT 30
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 69
4803: ST_TO_ADDR
4804: GO 4871
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
4806: LD_ADDR_VAR 0 2
4810: PUSH
4811: LD_INT 22
4813: PUSH
4814: LD_VAR 0 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 2
4825: PUSH
4826: LD_INT 21
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 33
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 33
4848: PUSH
4849: LD_INT 5
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PPUSH
4866: CALL_OW 69
4870: ST_TO_ADDR
// end ;
4871: LD_VAR 0 2
4875: RET
// function AlliedSides ( i , j ) ; begin
4876: LD_INT 0
4878: PPUSH
// Result := false ;
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: LD_INT 0
4886: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 81
4901: PUSH
4902: LD_INT 1
4904: EQUAL
4905: PUSH
4906: LD_VAR 0 2
4910: PPUSH
4911: LD_VAR 0 1
4915: PPUSH
4916: CALL_OW 81
4920: PUSH
4921: LD_INT 1
4923: EQUAL
4924: AND
4925: PUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 83
4935: AND
4936: PUSH
4937: LD_VAR 0 2
4941: PPUSH
4942: CALL_OW 83
4946: AND
4947: IFFALSE 4957
// Result := true ;
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// end ;
4957: LD_VAR 0 3
4961: RET
