// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2709 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3016 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 6
 397: PUSH
 398: LD_INT 9
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 34
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 36
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 35
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 32
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 50928 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 50928 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 50928 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 50928 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 50928 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 50928 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 10800 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 50761 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 50761 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 50761 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 50761 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 50761 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 50761 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 50761 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 50761 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 50761 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 50761 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 50761 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 50761 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 50928 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 50928 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 50928 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 50928 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 50928 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 50928 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 50928 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 50928 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 50928 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 50928 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 50928 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 50928 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 50928 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 50928 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 50928 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 50928 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 50928 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 50928 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2634
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// repeat wait ( time ) ;
2431: LD_VAR 0 4
2435: PPUSH
2436: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2440: LD_ADDR_VAR 0 2
2444: PUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 5
2450: PPUSH
2451: CALL_OW 12
2455: ST_TO_ADDR
// for i in areas do
2456: LD_ADDR_VAR 0 1
2460: PUSH
2461: LD_VAR 0 5
2465: PUSH
2466: FOR_IN
2467: IFFALSE 2506
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2469: LD_VAR 0 1
2473: PPUSH
2474: LD_INT 1
2476: PPUSH
2477: CALL_OW 287
2481: PUSH
2482: LD_INT 20
2484: LESS
2485: IFFALSE 2504
// begin CreateCratesArea ( x , i , true ) ;
2487: LD_VAR 0 2
2491: PPUSH
2492: LD_VAR 0 1
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 55
// end ; end ;
2504: GO 2466
2506: POP
2507: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2508: LD_INT 20
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 287
2518: PUSH
2519: LD_INT 0
2521: EQUAL
2522: IFFALSE 2561
// begin for i := 1 to 3 do
2524: LD_ADDR_VAR 0 1
2528: PUSH
2529: DOUBLE
2530: LD_INT 1
2532: DEC
2533: ST_TO_ADDR
2534: LD_INT 3
2536: PUSH
2537: FOR_TO
2538: IFFALSE 2557
// CreateCratesArea ( x , CenterArea , true ) ;
2540: LD_VAR 0 2
2544: PPUSH
2545: LD_INT 20
2547: PPUSH
2548: LD_INT 1
2550: PPUSH
2551: CALL_OW 55
2555: GO 2537
2557: POP
2558: POP
// end else
2559: GO 2592
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2561: LD_INT 20
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 287
2571: PUSH
2572: LD_INT 30
2574: LESS
2575: IFFALSE 2592
// CreateCratesArea ( x , CenterArea , true ) ;
2577: LD_VAR 0 2
2581: PPUSH
2582: LD_INT 20
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: CALL_OW 55
// time := time + delayTime ;
2592: LD_ADDR_VAR 0 4
2596: PUSH
2597: LD_VAR 0 4
2601: PUSH
2602: LD_VAR 0 7
2606: PLUS
2607: ST_TO_ADDR
// if time > maxTime then
2608: LD_VAR 0 4
2612: PUSH
2613: LD_VAR 0 8
2617: GREATER
2618: IFFALSE 2630
// time := normalTime ;
2620: LD_ADDR_VAR 0 4
2624: PUSH
2625: LD_VAR 0 6
2629: ST_TO_ADDR
// until false ;
2630: LD_INT 0
2632: IFFALSE 2431
// end ; end_of_file
2634: PPOPN 8
2636: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2637: LD_VAR 0 1
2641: PPUSH
2642: CALL 67514 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL 7301 0 1
// end ;
2655: PPOPN 1
2657: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2658: LD_VAR 0 1
2662: PPUSH
2663: CALL 67531 0 1
// end ;
2667: PPOPN 1
2669: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2670: LD_VAR 0 1
2674: PPUSH
2675: LD_VAR 0 2
2679: PPUSH
2680: CALL 67572 0 2
2684: PPOPN 2
2686: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_VAR 0 2
2696: PPUSH
2697: LD_VAR 0 3
2701: PPUSH
2702: CALL 7800 0 3
2706: PPOPN 3
2708: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull ; export function InitMultiplayer ; var i ; begin
2709: LD_INT 0
2711: PPUSH
2712: PPUSH
// disable ( mpActive ) ;
2713: LD_INT 100
2715: DISABLE_MARKED
// disable ( mpWin ) ;
2716: LD_INT 101
2718: DISABLE_MARKED
// disable ( mpLose ) ;
2719: LD_INT 102
2721: DISABLE_MARKED
// mpGameType := 0 ;
2722: LD_ADDR_EXP 3
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// mpGameSettings := [ ] ;
2730: LD_ADDR_EXP 6
2734: PUSH
2735: EMPTY
2736: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2737: LD_ADDR_EXP 4
2741: PUSH
2742: EMPTY
2743: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2744: LD_ADDR_EXP 5
2748: PUSH
2749: EMPTY
2750: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2751: LD_ADDR_EXP 29
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2766: LD_ADDR_EXP 12
2770: PUSH
2771: EMPTY
2772: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2773: LD_ADDR_EXP 13
2777: PUSH
2778: EMPTY
2779: ST_TO_ADDR
// mpDepots := [ ] ;
2780: LD_ADDR_EXP 14
2784: PUSH
2785: EMPTY
2786: ST_TO_ADDR
// mpBuildings := [ ] ;
2787: LD_ADDR_EXP 17
2791: PUSH
2792: EMPTY
2793: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2794: LD_ADDR_EXP 18
2798: PUSH
2799: EMPTY
2800: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: EMPTY
2807: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2808: LD_ADDR_EXP 20
2812: PUSH
2813: EMPTY
2814: ST_TO_ADDR
// mpStartingResources := [ ] ;
2815: LD_ADDR_EXP 15
2819: PUSH
2820: EMPTY
2821: ST_TO_ADDR
// mpStartPos := [ ] ;
2822: LD_ADDR_EXP 21
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2829: LD_ADDR_EXP 22
2833: PUSH
2834: LD_INT 1
2836: NEG
2837: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2838: LD_ADDR_EXP 23
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpApemans := [ ] ;
2845: LD_ADDR_EXP 30
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpApemansArea := [ ] ;
2852: LD_ADDR_EXP 31
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// mpRespawn := [ ] ;
2859: LD_ADDR_EXP 32
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpKingArea := 0 ;
2866: LD_ADDR_EXP 33
2870: PUSH
2871: LD_INT 0
2873: ST_TO_ADDR
// mpPoints := [ ] ;
2874: LD_ADDR_EXP 34
2878: PUSH
2879: EMPTY
2880: ST_TO_ADDR
// mpVehicles := 0 ;
2881: LD_ADDR_EXP 35
2885: PUSH
2886: LD_INT 0
2888: ST_TO_ADDR
// mpShipments := 0 ;
2889: LD_ADDR_EXP 27
2893: PUSH
2894: LD_INT 0
2896: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2897: LD_ADDR_EXP 39
2901: PUSH
2902: EMPTY
2903: PUSH
2904: EMPTY
2905: PUSH
2906: EMPTY
2907: PUSH
2908: EMPTY
2909: PUSH
2910: EMPTY
2911: PUSH
2912: EMPTY
2913: PUSH
2914: EMPTY
2915: PUSH
2916: EMPTY
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: ST_TO_ADDR
// mpEmissions := 0 ;
2928: LD_ADDR_EXP 36
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2936: LD_ADDR_EXP 25
2940: PUSH
2941: LD_INT 3
2943: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2944: LD_ADDR_EXP 24
2948: PUSH
2949: LD_INT 15
2951: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2952: LD_ADDR_EXP 37
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// mpGameActive := false ;
2960: LD_ADDR_EXP 38
2964: PUSH
2965: LD_INT 0
2967: ST_TO_ADDR
// for i := 1 to 32 do
2968: LD_ADDR_VAR 0 2
2972: PUSH
2973: DOUBLE
2974: LD_INT 1
2976: DEC
2977: ST_TO_ADDR
2978: LD_INT 32
2980: PUSH
2981: FOR_TO
2982: IFFALSE 3009
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2984: LD_ADDR_EXP 6
2988: PUSH
2989: LD_EXP 6
2993: PPUSH
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 1
3006: ST_TO_ADDR
3007: GO 2981
3009: POP
3010: POP
// end ;
3011: LD_VAR 0 1
3015: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
3023: PPUSH
3024: PPUSH
3025: PPUSH
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
3030: PPUSH
3031: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3032: LD_ADDR_VAR 0 14
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: LD_INT 2
3042: PUSH
3043: LD_INT 3
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: ST_TO_ADDR
// for i in gameTypes do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 14
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3071
// disable ( i ) ;
3064: LD_VAR 0 2
3068: DISABLE_MARKED
3069: GO 3061
3071: POP
3072: POP
// if Multiplayer then
3073: LD_OWVAR 4
3077: IFFALSE 3261
// begin mpGameType := mp_game_type ;
3079: LD_ADDR_EXP 3
3083: PUSH
3084: LD_OWVAR 6
3088: ST_TO_ADDR
// your_side := mp_player_side ;
3089: LD_ADDR_OWVAR 2
3093: PUSH
3094: LD_OWVAR 7
3098: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3099: LD_ADDR_EXP 7
3103: PUSH
3104: LD_OWVAR 17
3108: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3109: LD_ADDR_EXP 8
3113: PUSH
3114: LD_OWVAR 15
3118: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3119: LD_ADDR_EXP 9
3123: PUSH
3124: LD_OWVAR 16
3128: ST_TO_ADDR
// mpTeams := mp_teams ;
3129: LD_ADDR_EXP 10
3133: PUSH
3134: LD_OWVAR 12
3138: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3139: LD_ADDR_VAR 0 2
3143: PUSH
3144: DOUBLE
3145: LD_INT 1
3147: DEC
3148: ST_TO_ADDR
3149: LD_EXP 4
3153: PPUSH
3154: CALL 10800 0 1
3158: PUSH
3159: FOR_TO
3160: IFFALSE 3236
// begin setting := mpGameSettingsKeys [ i ] ;
3162: LD_ADDR_VAR 0 12
3166: PUSH
3167: LD_EXP 4
3171: PUSH
3172: LD_VAR 0 2
3176: ARRAY
3177: ST_TO_ADDR
// if setting then
3178: LD_VAR 0 12
3182: IFFALSE 3234
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3184: LD_ADDR_EXP 6
3188: PUSH
3189: LD_EXP 6
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 5
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: PUSH
3210: LD_VAR 0 2
3214: PUSH
3215: LD_INT 1
3217: MINUS
3218: PPUSH
3219: CALL_OW 426
3223: PUSH
3224: LD_INT 1
3226: PLUS
3227: ARRAY
3228: PPUSH
3229: CALL_OW 1
3233: ST_TO_ADDR
// end ;
3234: GO 3159
3236: POP
3237: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3238: LD_ADDR_EXP 11
3242: PUSH
3243: LD_EXP 8
3247: PUSH
3248: LD_INT 0
3250: PUSH
3251: EMPTY
3252: LIST
3253: DIFF
3254: PUSH
3255: LD_INT 1
3257: GREATER
3258: ST_TO_ADDR
// end else
3259: GO 3261
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3261: LD_EXP 3
3265: PPUSH
3266: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3270: LD_EXP 18
3274: PPUSH
3275: CALL 10800 0 1
3279: IFFALSE 3310
// begin for i in mpMarkedAreas do
3281: LD_ADDR_VAR 0 2
3285: PUSH
3286: LD_EXP 18
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3308
// SetAreaMapShow ( i , 0 ) ;
3294: LD_VAR 0 2
3298: PPUSH
3299: LD_INT 0
3301: PPUSH
3302: CALL_OW 424
3306: GO 3291
3308: POP
3309: POP
// end ; for i := 1 to 8 do
3310: LD_ADDR_VAR 0 2
3314: PUSH
3315: DOUBLE
3316: LD_INT 1
3318: DEC
3319: ST_TO_ADDR
3320: LD_INT 8
3322: PUSH
3323: FOR_TO
3324: IFFALSE 4540
// begin if not mpSidePositions [ i ] then
3326: LD_EXP 7
3330: PUSH
3331: LD_VAR 0 2
3335: ARRAY
3336: NOT
3337: IFFALSE 3341
// continue ;
3339: GO 3323
// side := i ;
3341: LD_ADDR_VAR 0 7
3345: PUSH
3346: LD_VAR 0 2
3350: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3351: LD_ADDR_VAR 0 9
3355: PUSH
3356: LD_EXP 9
3360: PUSH
3361: LD_VAR 0 2
3365: ARRAY
3366: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3367: LD_ADDR_VAR 0 8
3371: PUSH
3372: LD_EXP 7
3376: PUSH
3377: LD_VAR 0 2
3381: ARRAY
3382: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3383: LD_EXP 12
3387: PPUSH
3388: CALL 10800 0 1
3392: IFFALSE 3469
// begin for j in mpOilDeposits [ pos ] do
3394: LD_ADDR_VAR 0 3
3398: PUSH
3399: LD_EXP 12
3403: PUSH
3404: LD_VAR 0 8
3408: ARRAY
3409: PUSH
3410: FOR_IN
3411: IFFALSE 3467
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3413: LD_VAR 0 3
3417: PUSH
3418: LD_INT 1
3420: ARRAY
3421: PPUSH
3422: LD_VAR 0 3
3426: PUSH
3427: LD_INT 2
3429: ARRAY
3430: PPUSH
3431: LD_INT 2
3433: PPUSH
3434: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3438: LD_VAR 0 3
3442: PUSH
3443: LD_INT 1
3445: ARRAY
3446: PPUSH
3447: LD_VAR 0 3
3451: PUSH
3452: LD_INT 2
3454: ARRAY
3455: PPUSH
3456: LD_VAR 0 7
3460: PPUSH
3461: CALL_OW 441
// end ;
3465: GO 3410
3467: POP
3468: POP
// end ; if Count ( mpSibDeposits ) then
3469: LD_EXP 13
3473: PPUSH
3474: CALL 10800 0 1
3478: IFFALSE 3555
// begin for j in mpSibDeposits [ pos ] do
3480: LD_ADDR_VAR 0 3
3484: PUSH
3485: LD_EXP 13
3489: PUSH
3490: LD_VAR 0 8
3494: ARRAY
3495: PUSH
3496: FOR_IN
3497: IFFALSE 3553
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3499: LD_VAR 0 3
3503: PUSH
3504: LD_INT 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 3
3512: PUSH
3513: LD_INT 2
3515: ARRAY
3516: PPUSH
3517: LD_INT 3
3519: PPUSH
3520: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3524: LD_VAR 0 3
3528: PUSH
3529: LD_INT 1
3531: ARRAY
3532: PPUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_INT 2
3540: ARRAY
3541: PPUSH
3542: LD_VAR 0 7
3546: PPUSH
3547: CALL_OW 441
// end ;
3551: GO 3496
3553: POP
3554: POP
// end ; InitBc ;
3555: CALL_OW 21
// InitUc ;
3559: CALL_OW 18
// uc_side := side ;
3563: LD_ADDR_OWVAR 20
3567: PUSH
3568: LD_VAR 0 7
3572: ST_TO_ADDR
// uc_nation := nation ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_VAR 0 9
3582: ST_TO_ADDR
// if Count ( mpDepots ) then
3583: LD_EXP 14
3587: PPUSH
3588: CALL 10800 0 1
3592: IFFALSE 3762
// begin bc_level := 0 ;
3594: LD_ADDR_OWVAR 43
3598: PUSH
3599: LD_INT 0
3601: ST_TO_ADDR
// bc_type := b_depot ;
3602: LD_ADDR_OWVAR 42
3606: PUSH
3607: LD_INT 0
3609: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3610: LD_ADDR_VAR 0 4
3614: PUSH
3615: LD_EXP 14
3619: PUSH
3620: LD_VAR 0 8
3624: ARRAY
3625: PUSH
3626: LD_INT 1
3628: ARRAY
3629: PPUSH
3630: LD_EXP 14
3634: PUSH
3635: LD_VAR 0 8
3639: ARRAY
3640: PUSH
3641: LD_INT 2
3643: ARRAY
3644: PPUSH
3645: LD_EXP 14
3649: PUSH
3650: LD_VAR 0 8
3654: ARRAY
3655: PUSH
3656: LD_INT 3
3658: ARRAY
3659: PPUSH
3660: CALL_OW 47
3664: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3665: LD_VAR 0 4
3669: PPUSH
3670: LD_STRING @
3672: PUSH
3673: LD_VAR 0 7
3677: STR
3678: PPUSH
3679: CALL_OW 500
// SetTag ( b , side ) ;
3683: LD_VAR 0 4
3687: PPUSH
3688: LD_VAR 0 7
3692: PPUSH
3693: CALL_OW 109
// if Count ( mpStartingResources ) then
3697: LD_EXP 15
3701: PPUSH
3702: CALL 10800 0 1
3706: IFFALSE 3760
// begin for j := 1 to mpStartingResources do
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: DOUBLE
3714: LD_INT 1
3716: DEC
3717: ST_TO_ADDR
3718: LD_EXP 15
3722: PUSH
3723: FOR_TO
3724: IFFALSE 3758
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3726: LD_VAR 0 4
3730: PPUSH
3731: CALL_OW 274
3735: PPUSH
3736: LD_VAR 0 3
3740: PPUSH
3741: LD_EXP 15
3745: PUSH
3746: LD_VAR 0 3
3750: ARRAY
3751: PPUSH
3752: CALL_OW 277
3756: GO 3723
3758: POP
3759: POP
// end ; end else
3760: GO 3909
// if Count ( mpStartingResources ) then
3762: LD_EXP 15
3766: PPUSH
3767: CALL 10800 0 1
3771: IFFALSE 3909
// begin for j := 1 to mpStartingResources do
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_EXP 15
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3907
// begin resources := mpStartingResources [ j ] ;
3791: LD_ADDR_VAR 0 13
3795: PUSH
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: ARRAY
3806: ST_TO_ADDR
// repeat if resources >= 50 then
3807: LD_VAR 0 13
3811: PUSH
3812: LD_INT 50
3814: GREATEREQUAL
3815: IFFALSE 3861
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3817: LD_VAR 0 3
3821: PPUSH
3822: LD_INT 5
3824: PPUSH
3825: LD_VAR 0 5
3829: PPUSH
3830: LD_VAR 0 6
3834: PPUSH
3835: LD_INT 4
3837: PPUSH
3838: LD_INT 0
3840: PPUSH
3841: CALL_OW 60
// resources := resources - 50 ;
3845: LD_ADDR_VAR 0 13
3849: PUSH
3850: LD_VAR 0 13
3854: PUSH
3855: LD_INT 50
3857: MINUS
3858: ST_TO_ADDR
// end else
3859: GO 3895
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3861: LD_VAR 0 3
3865: PPUSH
3866: LD_VAR 0 13
3870: PUSH
3871: LD_INT 10
3873: DIV
3874: PPUSH
3875: LD_VAR 0 5
3879: PPUSH
3880: LD_VAR 0 6
3884: PPUSH
3885: LD_INT 4
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 60
// until resources <= 0 ;
3895: LD_VAR 0 13
3899: PUSH
3900: LD_INT 0
3902: LESSEQUAL
3903: IFFALSE 3807
// end ;
3905: GO 3788
3907: POP
3908: POP
// end ; if Count ( mpBuildings ) then
3909: LD_EXP 17
3913: PPUSH
3914: CALL 10800 0 1
3918: IFFALSE 3996
// begin for j in mpBuildings [ pos ] do
3920: LD_ADDR_VAR 0 3
3924: PUSH
3925: LD_EXP 17
3929: PUSH
3930: LD_VAR 0 8
3934: ARRAY
3935: PUSH
3936: FOR_IN
3937: IFFALSE 3994
// begin bc_level := 0 ;
3939: LD_ADDR_OWVAR 43
3943: PUSH
3944: LD_INT 0
3946: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3947: LD_ADDR_OWVAR 42
3951: PUSH
3952: LD_VAR 0 3
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3961: LD_VAR 0 3
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: PPUSH
3970: LD_VAR 0 3
3974: PUSH
3975: LD_INT 3
3977: ARRAY
3978: PPUSH
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 4
3986: ARRAY
3987: PPUSH
3988: CALL_OW 47
// end ;
3992: GO 3936
3994: POP
3995: POP
// end ; if mpBattleFlag > - 1 then
3996: LD_EXP 22
4000: PUSH
4001: LD_INT 1
4003: NEG
4004: GREATER
4005: IFFALSE 4164
// begin x := mpStartPos [ pos ] [ 1 ] ;
4007: LD_ADDR_VAR 0 5
4011: PUSH
4012: LD_EXP 21
4016: PUSH
4017: LD_VAR 0 8
4021: ARRAY
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4027: LD_ADDR_VAR 0 6
4031: PUSH
4032: LD_EXP 21
4036: PUSH
4037: LD_VAR 0 8
4041: ARRAY
4042: PUSH
4043: LD_INT 2
4045: ARRAY
4046: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4047: LD_VAR 0 5
4051: PPUSH
4052: LD_VAR 0 6
4056: PPUSH
4057: LD_INT 12
4059: PPUSH
4060: LD_INT 2
4062: PPUSH
4063: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4067: LD_ADDR_EXP 23
4071: PUSH
4072: LD_EXP 23
4076: PPUSH
4077: LD_VAR 0 7
4081: PPUSH
4082: LD_VAR 0 7
4086: PPUSH
4087: LD_VAR 0 5
4091: PPUSH
4092: LD_VAR 0 6
4096: PPUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 100
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 2
4109: PUSH
4110: LD_INT 70
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: LD_INT 40
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 10
4129: PUSH
4130: LD_INT 25
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: LD_INT 20
4139: PUSH
4140: LD_INT 100
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: PPUSH
4154: CALL_OW 418
4158: PPUSH
4159: CALL_OW 1
4163: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4164: LD_EXP 26
4168: PUSH
4169: LD_INT 20
4171: PPUSH
4172: LD_VAR 0 7
4176: PPUSH
4177: CALL_OW 321
4181: PUSH
4182: LD_INT 1
4184: EQUAL
4185: AND
4186: IFFALSE 4203
// SetTech ( tech_SibDet , side , state_researched ) ;
4188: LD_INT 20
4190: PPUSH
4191: LD_VAR 0 7
4195: PPUSH
4196: LD_INT 2
4198: PPUSH
4199: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4203: LD_INT 24
4205: PPUSH
4206: LD_VAR 0 7
4210: PPUSH
4211: LD_INT 0
4213: PPUSH
4214: CALL_OW 322
// if mpSibBomb = 1 then
4218: LD_EXP 28
4222: PUSH
4223: LD_INT 1
4225: EQUAL
4226: IFFALSE 4245
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4228: LD_INT 25
4230: PPUSH
4231: LD_VAR 0 7
4235: PPUSH
4236: LD_INT 1
4238: PPUSH
4239: CALL_OW 322
// end else
4243: GO 4260
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4245: LD_INT 25
4247: PPUSH
4248: LD_VAR 0 7
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: CALL_OW 322
// end ; if mpVehicles then
4260: LD_EXP 35
4264: IFFALSE 4363
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4266: LD_ADDR_VAR 0 3
4270: PUSH
4271: LD_VAR 0 7
4275: PPUSH
4276: LD_VAR 0 9
4280: PPUSH
4281: LD_EXP 35
4285: PPUSH
4286: CALL 5222 0 3
4290: PUSH
4291: FOR_IN
4292: IFFALSE 4361
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: LD_INT 5
4304: PPUSH
4305: CALL_OW 12
4309: PPUSH
4310: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4314: LD_VAR 0 3
4318: PPUSH
4319: LD_EXP 21
4323: PUSH
4324: LD_VAR 0 8
4328: ARRAY
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: PPUSH
4334: LD_EXP 21
4338: PUSH
4339: LD_VAR 0 8
4343: ARRAY
4344: PUSH
4345: LD_INT 2
4347: ARRAY
4348: PPUSH
4349: LD_INT 12
4351: PPUSH
4352: LD_INT 0
4354: PPUSH
4355: CALL_OW 50
// end ;
4359: GO 4291
4361: POP
4362: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4363: LD_ADDR_VAR 0 11
4367: PUSH
4368: LD_VAR 0 7
4372: PPUSH
4373: LD_VAR 0 9
4377: PPUSH
4378: LD_EXP 24
4382: PPUSH
4383: LD_EXP 25
4387: PPUSH
4388: CALL 4952 0 4
4392: ST_TO_ADDR
// for j in team do
4393: LD_ADDR_VAR 0 3
4397: PUSH
4398: LD_VAR 0 11
4402: PUSH
4403: FOR_IN
4404: IFFALSE 4453
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4406: LD_VAR 0 3
4410: PPUSH
4411: LD_EXP 21
4415: PUSH
4416: LD_VAR 0 8
4420: ARRAY
4421: PUSH
4422: LD_INT 1
4424: ARRAY
4425: PPUSH
4426: LD_EXP 21
4430: PUSH
4431: LD_VAR 0 8
4435: ARRAY
4436: PUSH
4437: LD_INT 2
4439: ARRAY
4440: PPUSH
4441: LD_INT 12
4443: PPUSH
4444: LD_INT 0
4446: PPUSH
4447: CALL_OW 50
4451: GO 4403
4453: POP
4454: POP
// if mpApemans then
4455: LD_EXP 30
4459: IFFALSE 4538
// begin for j := 1 to mpApemans do
4461: LD_ADDR_VAR 0 3
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_EXP 30
4475: PUSH
4476: FOR_TO
4477: IFFALSE 4536
// begin PrepareApeman ( - 5 ) ;
4479: LD_INT 5
4481: NEG
4482: PPUSH
4483: CALL 42657 0 1
// ape := CreateHuman ;
4487: LD_ADDR_VAR 0 10
4491: PUSH
4492: CALL_OW 44
4496: ST_TO_ADDR
// SetTag ( ape , side ) ;
4497: LD_VAR 0 10
4501: PPUSH
4502: LD_VAR 0 7
4506: PPUSH
4507: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4511: LD_VAR 0 10
4515: PPUSH
4516: LD_EXP 31
4520: PUSH
4521: LD_VAR 0 8
4525: ARRAY
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 49
// end ;
4534: GO 4476
4536: POP
4537: POP
// end ; end ;
4538: GO 3323
4540: POP
4541: POP
// if not mpTeamGame then
4542: LD_EXP 11
4546: NOT
4547: IFFALSE 4645
// begin for i := 1 to 8 do
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: DOUBLE
4555: LD_INT 1
4557: DEC
4558: ST_TO_ADDR
4559: LD_INT 8
4561: PUSH
4562: FOR_TO
4563: IFFALSE 4641
// for j := 1 to 8 do
4565: LD_ADDR_VAR 0 3
4569: PUSH
4570: DOUBLE
4571: LD_INT 1
4573: DEC
4574: ST_TO_ADDR
4575: LD_INT 8
4577: PUSH
4578: FOR_TO
4579: IFFALSE 4637
// if i <> j then
4581: LD_VAR 0 2
4585: PUSH
4586: LD_VAR 0 3
4590: NONEQUAL
4591: IFFALSE 4615
// SetAttitude ( i , j , att_neutral , true ) else
4593: LD_VAR 0 2
4597: PPUSH
4598: LD_VAR 0 3
4602: PPUSH
4603: LD_INT 0
4605: PPUSH
4606: LD_INT 1
4608: PPUSH
4609: CALL_OW 80
4613: GO 4635
// SetAttitude ( i , j , att_friend , true ) ;
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 3
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: CALL_OW 80
4635: GO 4578
4637: POP
4638: POP
4639: GO 4562
4641: POP
4642: POP
// end else
4643: GO 4714
// begin if mpSharedVision then
4645: LD_EXP 16
4649: IFFALSE 4714
// begin for i in mpTeams do
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: LD_EXP 10
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4712
// for j := 2 to i do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: DOUBLE
4670: LD_INT 2
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 2
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4708
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4682: LD_VAR 0 2
4686: PUSH
4687: LD_VAR 0 3
4691: ARRAY
4692: PPUSH
4693: LD_VAR 0 2
4697: PUSH
4698: LD_INT 1
4700: ARRAY
4701: PPUSH
4702: CALL_OW 343
4706: GO 4679
4708: POP
4709: POP
4710: GO 4661
4712: POP
4713: POP
// end ; end ; for i := 1 to 8 do
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: DOUBLE
4720: LD_INT 1
4722: DEC
4723: ST_TO_ADDR
4724: LD_INT 8
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4818
// for j := 1 to 8 do
4730: LD_ADDR_VAR 0 3
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_INT 8
4742: PUSH
4743: FOR_TO
4744: IFFALSE 4814
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4746: LD_EXP 8
4750: PUSH
4751: LD_VAR 0 2
4755: ARRAY
4756: PUSH
4757: LD_EXP 8
4761: PUSH
4762: LD_VAR 0 3
4766: ARRAY
4767: EQUAL
4768: IFFALSE 4792
// SetAttitude ( i , j , att_friend , true ) else
4770: LD_VAR 0 2
4774: PPUSH
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_INT 1
4782: PPUSH
4783: LD_INT 1
4785: PPUSH
4786: CALL_OW 80
4790: GO 4812
// SetAttitude ( i , j , att_enemy , true ) ;
4792: LD_VAR 0 2
4796: PPUSH
4797: LD_VAR 0 3
4801: PPUSH
4802: LD_INT 2
4804: PPUSH
4805: LD_INT 1
4807: PPUSH
4808: CALL_OW 80
4812: GO 4743
4814: POP
4815: POP
4816: GO 4727
4818: POP
4819: POP
// music_nat := mpSideNations [ your_side ] ;
4820: LD_ADDR_OWVAR 71
4824: PUSH
4825: LD_EXP 9
4829: PUSH
4830: LD_OWVAR 2
4834: ARRAY
4835: ST_TO_ADDR
// if IAmSpec then
4836: CALL_OW 531
4840: IFFALSE 4881
// begin FogOff ( true ) ;
4842: LD_INT 1
4844: PPUSH
4845: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4849: LD_EXP 29
4853: PUSH
4854: LD_INT 1
4856: ARRAY
4857: PUSH
4858: LD_INT 2
4860: DIV
4861: PPUSH
4862: LD_EXP 29
4866: PUSH
4867: LD_INT 2
4869: ARRAY
4870: PUSH
4871: LD_INT 2
4873: DIV
4874: PPUSH
4875: CALL_OW 86
// end else
4879: GO 4927
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4881: LD_EXP 21
4885: PUSH
4886: LD_EXP 7
4890: PUSH
4891: LD_OWVAR 2
4895: ARRAY
4896: ARRAY
4897: PUSH
4898: LD_INT 1
4900: ARRAY
4901: PPUSH
4902: LD_EXP 21
4906: PUSH
4907: LD_EXP 7
4911: PUSH
4912: LD_OWVAR 2
4916: ARRAY
4917: ARRAY
4918: PUSH
4919: LD_INT 2
4921: ARRAY
4922: PPUSH
4923: CALL_OW 86
// end ; BeginBuildUp ;
4927: CALL 5700 0 0
// enable ( mpActive ) ;
4931: LD_INT 100
4933: ENABLE_MARKED
// enable ( mpGameType ) ;
4934: LD_EXP 3
4938: ENABLE_MARKED
// mpGameActive := true ;
4939: LD_ADDR_EXP 38
4943: PUSH
4944: LD_INT 1
4946: ST_TO_ADDR
// end ;
4947: LD_VAR 0 1
4951: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
4952: LD_INT 0
4954: PPUSH
4955: PPUSH
4956: PPUSH
// result := [ ] ;
4957: LD_ADDR_VAR 0 5
4961: PUSH
4962: EMPTY
4963: ST_TO_ADDR
// class := class_soldier ;
4964: LD_ADDR_VAR 0 7
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// uc_side := side ;
4972: LD_ADDR_OWVAR 20
4976: PUSH
4977: LD_VAR 0 1
4981: ST_TO_ADDR
// uc_nation := nation ;
4982: LD_ADDR_OWVAR 21
4986: PUSH
4987: LD_VAR 0 2
4991: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
4992: LD_ADDR_OWVAR 26
4996: PUSH
4997: LD_OWVAR 19
5001: PUSH
5002: LD_VAR 0 1
5006: ARRAY
5007: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5008: LD_INT 1
5010: PPUSH
5011: LD_INT 2
5013: PPUSH
5014: CALL_OW 12
5018: PPUSH
5019: LD_VAR 0 7
5023: PPUSH
5024: LD_VAR 0 4
5028: PUSH
5029: LD_INT 2
5031: PLUS
5032: PPUSH
5033: CALL_OW 380
// hc_importance := 105 ;
5037: LD_ADDR_OWVAR 32
5041: PUSH
5042: LD_INT 105
5044: ST_TO_ADDR
// if Multiplayer then
5045: LD_OWVAR 4
5049: IFFALSE 5089
// begin hc_gallery := MULTIAVATARS ;
5051: LD_ADDR_OWVAR 33
5055: PUSH
5056: LD_STRING MULTIAVATARS
5058: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5059: LD_ADDR_OWVAR 34
5063: PUSH
5064: LD_VAR 0 1
5068: PPUSH
5069: CALL_OW 525
5073: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5074: LD_ADDR_OWVAR 27
5078: PUSH
5079: LD_VAR 0 1
5083: PPUSH
5084: CALL_OW 526
5088: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5089: LD_ADDR_VAR 0 5
5093: PUSH
5094: LD_VAR 0 5
5098: PPUSH
5099: CALL_OW 44
5103: PPUSH
5104: CALL 46389 0 2
5108: ST_TO_ADDR
// InitHc_All ( ) ;
5109: CALL_OW 584
// class := 2 ;
5113: LD_ADDR_VAR 0 7
5117: PUSH
5118: LD_INT 2
5120: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5121: LD_ADDR_VAR 0 6
5125: PUSH
5126: DOUBLE
5127: LD_INT 1
5129: DEC
5130: ST_TO_ADDR
5131: LD_VAR 0 3
5135: PUSH
5136: LD_INT 1
5138: MINUS
5139: PUSH
5140: FOR_TO
5141: IFFALSE 5215
// begin PrepareHuman ( false , class , skill ) ;
5143: LD_INT 0
5145: PPUSH
5146: LD_VAR 0 7
5150: PPUSH
5151: LD_VAR 0 4
5155: PPUSH
5156: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
5160: LD_ADDR_VAR 0 5
5164: PUSH
5165: LD_VAR 0 5
5169: PPUSH
5170: CALL_OW 44
5174: PPUSH
5175: CALL 46389 0 2
5179: ST_TO_ADDR
// class := Inc ( class ) ;
5180: LD_ADDR_VAR 0 7
5184: PUSH
5185: LD_VAR 0 7
5189: PPUSH
5190: CALL 47750 0 1
5194: ST_TO_ADDR
// if class = 5 then
5195: LD_VAR 0 7
5199: PUSH
5200: LD_INT 5
5202: EQUAL
5203: IFFALSE 5213
// class := 1 ;
5205: LD_ADDR_VAR 0 7
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// end ;
5213: GO 5140
5215: POP
5216: POP
// end ;
5217: LD_VAR 0 5
5221: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
// result := [ ] ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: EMPTY
5232: ST_TO_ADDR
// if not vehicles then
5233: LD_VAR 0 3
5237: NOT
5238: IFFALSE 5242
// exit ;
5240: GO 5401
// for i := 1 to vehicles [ nation ] do
5242: LD_ADDR_VAR 0 5
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_VAR 0 3
5256: PUSH
5257: LD_VAR 0 2
5261: ARRAY
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5399
// begin uc_side := side ;
5266: LD_ADDR_OWVAR 20
5270: PUSH
5271: LD_VAR 0 1
5275: ST_TO_ADDR
// uc_nation := nation ;
5276: LD_ADDR_OWVAR 21
5280: PUSH
5281: LD_VAR 0 2
5285: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5286: LD_VAR 0 3
5290: PUSH
5291: LD_VAR 0 2
5295: ARRAY
5296: PUSH
5297: LD_VAR 0 5
5301: ARRAY
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_VAR 0 3
5311: PUSH
5312: LD_VAR 0 2
5316: ARRAY
5317: PUSH
5318: LD_VAR 0 5
5322: ARRAY
5323: PUSH
5324: LD_INT 2
5326: ARRAY
5327: PPUSH
5328: LD_VAR 0 3
5332: PUSH
5333: LD_VAR 0 2
5337: ARRAY
5338: PUSH
5339: LD_VAR 0 5
5343: ARRAY
5344: PUSH
5345: LD_INT 3
5347: ARRAY
5348: PPUSH
5349: LD_VAR 0 3
5353: PUSH
5354: LD_VAR 0 2
5358: ARRAY
5359: PUSH
5360: LD_VAR 0 5
5364: ARRAY
5365: PUSH
5366: LD_INT 4
5368: ARRAY
5369: PPUSH
5370: LD_INT 80
5372: PPUSH
5373: CALL 13538 0 5
// result := Join ( result , CreateVehicle ) ;
5377: LD_ADDR_VAR 0 4
5381: PUSH
5382: LD_VAR 0 4
5386: PPUSH
5387: CALL_OW 45
5391: PPUSH
5392: CALL 46389 0 2
5396: ST_TO_ADDR
// end ;
5397: GO 5263
5399: POP
5400: POP
// end ;
5401: LD_VAR 0 4
5405: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5406: LD_INT 0
5408: PPUSH
5409: PPUSH
// for i in mpBattleFlags do
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_EXP 23
5419: PUSH
5420: FOR_IN
5421: IFFALSE 5498
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 1
5430: PUSH
5431: LD_VAR 0 1
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 2
5442: PUSH
5443: LD_VAR 0 1
5447: PUSH
5448: LD_REAL  7.00000000000000E-0001
5451: MUL
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_INT 3
5459: PUSH
5460: LD_VAR 0 1
5464: PUSH
5465: LD_REAL  4.00000000000000E-0001
5468: MUL
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 20
5476: PUSH
5477: LD_VAR 0 1
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 423
5496: GO 5420
5498: POP
5499: POP
// end ;
5500: LD_VAR 0 2
5504: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5505: LD_INT 100
5507: IFFALSE 5602
5509: GO 5511
5511: DISABLE
5512: LD_INT 0
5514: PPUSH
5515: PPUSH
// begin if mpBattleFlag <= 0 then
5516: LD_EXP 22
5520: PUSH
5521: LD_INT 0
5523: LESSEQUAL
5524: IFFALSE 5528
// exit ;
5526: GO 5602
// strength := 100 ;
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_INT 100
5535: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5536: LD_EXP 22
5540: PPUSH
5541: CALL_OW 67
// strength := Dec ( strength ) ;
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: LD_VAR 0 2
5554: PPUSH
5555: CALL 47772 0 1
5559: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL 5406 0 1
// until not strength ;
5569: LD_VAR 0 2
5573: NOT
5574: IFFALSE 5536
// for i in mpBattleFlags do
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: LD_EXP 23
5585: PUSH
5586: FOR_IN
5587: IFFALSE 5600
// KillBattleFlag ( i ) ;
5589: LD_VAR 0 1
5593: PPUSH
5594: CALL_OW 419
5598: GO 5586
5600: POP
5601: POP
// end ;
5602: PPOPN 2
5604: END
// every 0 0$1 marked mpActive do var side , tmp ;
5605: GO 5607
5607: DISABLE
5608: LD_INT 0
5610: PPUSH
5611: PPUSH
// begin if mpSibBomb <= 1 then
5612: LD_EXP 28
5616: PUSH
5617: LD_INT 1
5619: LESSEQUAL
5620: IFFALSE 5624
// exit ;
5622: GO 5697
// tmp := mpSibBomb ;
5624: LD_ADDR_VAR 0 2
5628: PUSH
5629: LD_EXP 28
5633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5634: LD_INT 35
5636: PPUSH
5637: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: LD_VAR 0 2
5650: PUSH
5651: LD_INT 35
5653: MINUS
5654: ST_TO_ADDR
// until not tmp ;
5655: LD_VAR 0 2
5659: NOT
5660: IFFALSE 5634
// for side := 1 to 8 do
5662: LD_ADDR_VAR 0 1
5666: PUSH
5667: DOUBLE
5668: LD_INT 1
5670: DEC
5671: ST_TO_ADDR
5672: LD_INT 8
5674: PUSH
5675: FOR_TO
5676: IFFALSE 5695
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5678: LD_INT 25
5680: PPUSH
5681: LD_VAR 0 1
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
5693: GO 5675
5695: POP
5696: POP
// end ;
5697: PPOPN 2
5699: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5700: LD_INT 0
5702: PPUSH
5703: PPUSH
5704: PPUSH
// mpBuildUpTimeDelay := 0 ;
5705: LD_ADDR_EXP 40
5709: PUSH
5710: LD_INT 0
5712: ST_TO_ADDR
// if not mpBuildUpTime then
5713: LD_EXP 20
5717: NOT
5718: IFFALSE 5722
// exit ;
5720: GO 5905
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5722: LD_ADDR_EXP 40
5726: PUSH
5727: LD_INT 8400
5729: PUSH
5730: LD_INT 2100
5732: PUSH
5733: LD_EXP 20
5737: MUL
5738: PLUS
5739: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5740: LD_ADDR_EXP 41
5744: PUSH
5745: LD_INT 1
5747: ST_TO_ADDR
// for i := 1 to 8 do
5748: LD_ADDR_VAR 0 2
5752: PUSH
5753: DOUBLE
5754: LD_INT 1
5756: DEC
5757: ST_TO_ADDR
5758: LD_INT 8
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5903
// if mpSidePositions [ i ] then
5764: LD_EXP 7
5768: PUSH
5769: LD_VAR 0 2
5773: ARRAY
5774: IFFALSE 5901
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
5776: LD_EXP 19
5780: PUSH
5781: LD_EXP 7
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: ARRAY
5792: PPUSH
5793: LD_INT 5
5795: PPUSH
5796: CALL_OW 424
// for j := 1 to 8 do
5800: LD_ADDR_VAR 0 3
5804: PUSH
5805: DOUBLE
5806: LD_INT 1
5808: DEC
5809: ST_TO_ADDR
5810: LD_INT 8
5812: PUSH
5813: FOR_TO
5814: IFFALSE 5899
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
5816: LD_EXP 7
5820: PUSH
5821: LD_VAR 0 3
5825: ARRAY
5826: PUSH
5827: LD_EXP 8
5831: PUSH
5832: LD_VAR 0 2
5836: ARRAY
5837: PUSH
5838: LD_EXP 8
5842: PUSH
5843: LD_VAR 0 3
5847: ARRAY
5848: NONEQUAL
5849: PUSH
5850: LD_EXP 11
5854: NOT
5855: PUSH
5856: LD_VAR 0 2
5860: PUSH
5861: LD_VAR 0 3
5865: NONEQUAL
5866: AND
5867: OR
5868: AND
5869: IFFALSE 5897
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_EXP 19
5880: PUSH
5881: LD_EXP 7
5885: PUSH
5886: LD_VAR 0 2
5890: ARRAY
5891: ARRAY
5892: PPUSH
5893: CALL_OW 333
5897: GO 5813
5899: POP
5900: POP
// end ;
5901: GO 5761
5903: POP
5904: POP
// end ;
5905: LD_VAR 0 1
5909: RET
// function EndBuildUp ; var i , j ; begin
5910: LD_INT 0
5912: PPUSH
5913: PPUSH
5914: PPUSH
// mpBuildUpTimeActive := false ;
5915: LD_ADDR_EXP 41
5919: PUSH
5920: LD_INT 0
5922: ST_TO_ADDR
// for i := 1 to 8 do
5923: LD_ADDR_VAR 0 2
5927: PUSH
5928: DOUBLE
5929: LD_INT 1
5931: DEC
5932: ST_TO_ADDR
5933: LD_INT 8
5935: PUSH
5936: FOR_TO
5937: IFFALSE 6078
// if mpSidePositions [ i ] then
5939: LD_EXP 7
5943: PUSH
5944: LD_VAR 0 2
5948: ARRAY
5949: IFFALSE 6076
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
5951: LD_EXP 19
5955: PUSH
5956: LD_EXP 7
5960: PUSH
5961: LD_VAR 0 2
5965: ARRAY
5966: ARRAY
5967: PPUSH
5968: LD_INT 0
5970: PPUSH
5971: CALL_OW 424
// for j := 1 to 8 do
5975: LD_ADDR_VAR 0 3
5979: PUSH
5980: DOUBLE
5981: LD_INT 1
5983: DEC
5984: ST_TO_ADDR
5985: LD_INT 8
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6074
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
5991: LD_EXP 7
5995: PUSH
5996: LD_VAR 0 3
6000: ARRAY
6001: PUSH
6002: LD_EXP 8
6006: PUSH
6007: LD_VAR 0 2
6011: ARRAY
6012: PUSH
6013: LD_EXP 8
6017: PUSH
6018: LD_VAR 0 3
6022: ARRAY
6023: NONEQUAL
6024: PUSH
6025: LD_EXP 11
6029: NOT
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_VAR 0 3
6040: NONEQUAL
6041: AND
6042: OR
6043: AND
6044: IFFALSE 6072
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_EXP 19
6055: PUSH
6056: LD_EXP 7
6060: PUSH
6061: LD_VAR 0 2
6065: ARRAY
6066: ARRAY
6067: PPUSH
6068: CALL_OW 334
6072: GO 5988
6074: POP
6075: POP
// end ;
6076: GO 5936
6078: POP
6079: POP
// end ;
6080: LD_VAR 0 1
6084: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6085: LD_EXP 41
6089: IFFALSE 6264
6091: GO 6093
6093: DISABLE
6094: LD_INT 0
6096: PPUSH
6097: PPUSH
// begin for i := 1 to 8 do
6098: LD_ADDR_VAR 0 1
6102: PUSH
6103: DOUBLE
6104: LD_INT 1
6106: DEC
6107: ST_TO_ADDR
6108: LD_INT 8
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6261
// if mpSidePositions [ i ] then
6114: LD_EXP 7
6118: PUSH
6119: LD_VAR 0 1
6123: ARRAY
6124: IFFALSE 6259
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6126: LD_ADDR_VAR 0 2
6130: PUSH
6131: LD_EXP 19
6135: PUSH
6136: LD_EXP 7
6140: PUSH
6141: LD_VAR 0 1
6145: ARRAY
6146: ARRAY
6147: PPUSH
6148: LD_INT 2
6150: PUSH
6151: LD_INT 21
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_OWVAR 2
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PPUSH
6192: CALL_OW 70
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6257
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6200: LD_EXP 8
6204: PUSH
6205: LD_VAR 0 1
6209: ARRAY
6210: PUSH
6211: LD_EXP 8
6215: PUSH
6216: LD_OWVAR 2
6220: ARRAY
6221: NONEQUAL
6222: PUSH
6223: LD_EXP 11
6227: NOT
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: LD_OWVAR 2
6238: NONEQUAL
6239: AND
6240: OR
6241: IFFALSE 6255
// ComMoveToArea ( un , BuildUpEscape ) ;
6243: LD_VAR 0 2
6247: PPUSH
6248: LD_INT 15
6250: PPUSH
6251: CALL_OW 113
6255: GO 6197
6257: POP
6258: POP
6259: GO 6111
6261: POP
6262: POP
// enable ;
6263: ENABLE
// end ;
6264: PPOPN 2
6266: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6267: LD_EXP 20
6271: IFFALSE 6321
6273: GO 6275
6275: DISABLE
6276: LD_INT 0
6278: PPUSH
// begin tmp := mpBuildUpTime ;
6279: LD_ADDR_VAR 0 1
6283: PUSH
6284: LD_EXP 20
6288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6289: LD_INT 35
6291: PPUSH
6292: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6296: LD_ADDR_VAR 0 1
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 35
6308: MINUS
6309: ST_TO_ADDR
// until not tmp ;
6310: LD_VAR 0 1
6314: NOT
6315: IFFALSE 6289
// EndBuildUp ;
6317: CALL 5910 0 0
// end ;
6321: PPOPN 1
6323: END
// every 0 0$1 trigger mpActive marked mpWin do
6324: LD_INT 100
6326: IFFALSE 6360
6328: GO 6330
6330: DISABLE
// begin if IAmServer then
6331: CALL_OW 518
6335: IFFALSE 6344
// wait ( 0 0$3 ) ;
6337: LD_INT 105
6339: PPUSH
6340: CALL_OW 67
// if Multiplayer then
6344: LD_OWVAR 4
6348: IFFALSE 6356
// YouWinInMultiplayer else
6350: CALL_OW 106
6354: GO 6360
// YouWin ;
6356: CALL_OW 103
// end ;
6360: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6361: LD_INT 0
6363: PPUSH
// result := false ;
6364: LD_ADDR_VAR 0 3
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// case gameType of GameTypeNormal :
6372: LD_VAR 0 1
6376: PUSH
6377: LD_INT 1
6379: DOUBLE
6380: EQUAL
6381: IFTRUE 6385
6383: GO 6458
6385: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6386: LD_ADDR_VAR 0 3
6390: PUSH
6391: LD_INT 22
6393: PUSH
6394: LD_VAR 0 2
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: LD_INT 21
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 33
6418: PUSH
6419: LD_INT 3
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 33
6428: PUSH
6429: LD_INT 5
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 69
6450: PPUSH
6451: CALL 10800 0 1
6455: ST_TO_ADDR
// end ; GameTypeSurvival :
6456: GO 6693
6458: LD_INT 2
6460: DOUBLE
6461: EQUAL
6462: IFTRUE 6466
6464: GO 6594
6466: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_INT 22
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 2
6486: PUSH
6487: LD_INT 30
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 30
6499: PUSH
6500: LD_INT 1
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PPUSH
6516: CALL_OW 69
6520: PPUSH
6521: CALL 10800 0 1
6525: PUSH
6526: LD_INT 22
6528: PUSH
6529: LD_VAR 0 2
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 2
6540: PUSH
6541: LD_INT 21
6543: PUSH
6544: LD_INT 1
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 33
6553: PUSH
6554: LD_INT 3
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 33
6563: PUSH
6564: LD_INT 5
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 69
6585: PPUSH
6586: CALL 10800 0 1
6590: AND
6591: ST_TO_ADDR
// end ; GameTypeKing :
6592: GO 6693
6594: LD_INT 3
6596: DOUBLE
6597: EQUAL
6598: IFTRUE 6602
6600: GO 6692
6602: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6603: LD_ADDR_VAR 0 3
6607: PUSH
6608: LD_INT 22
6610: PUSH
6611: LD_VAR 0 2
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 2
6622: PUSH
6623: LD_INT 21
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 33
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 33
6645: PUSH
6646: LD_INT 5
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: PPUSH
6668: CALL 10800 0 1
6672: PUSH
6673: LD_VAR 0 2
6677: PPUSH
6678: CALL 73721 0 1
6682: PUSH
6683: LD_EXP 34
6687: LESS
6688: AND
6689: ST_TO_ADDR
// end ; end ;
6690: GO 6693
6692: POP
// end ;
6693: LD_VAR 0 3
6697: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6698: LD_INT 100
6700: IFFALSE 6922
6702: GO 6704
6704: DISABLE
6705: LD_INT 0
6707: PPUSH
6708: PPUSH
// begin if Multiplayer then
6709: LD_OWVAR 4
6713: IFFALSE 6721
// SetPlayerSpectator ( ) else
6715: CALL_OW 572
6719: GO 6730
// FogOff ( your_side ) ;
6721: LD_OWVAR 2
6725: PPUSH
6726: CALL_OW 344
// repeat gameIsOn := false ;
6730: LD_ADDR_VAR 0 1
6734: PUSH
6735: LD_INT 0
6737: ST_TO_ADDR
// for i := 1 to 8 do
6738: LD_ADDR_VAR 0 2
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_INT 8
6750: PUSH
6751: FOR_TO
6752: IFFALSE 6874
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6754: LD_EXP 7
6758: PUSH
6759: LD_VAR 0 2
6763: ARRAY
6764: PUSH
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 108
6774: AND
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_OWVAR 2
6785: NONEQUAL
6786: AND
6787: IFFALSE 6872
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
6789: LD_EXP 8
6793: PUSH
6794: LD_VAR 0 2
6798: ARRAY
6799: NOT
6800: PUSH
6801: LD_EXP 8
6805: PUSH
6806: LD_VAR 0 2
6810: ARRAY
6811: PUSH
6812: LD_EXP 8
6816: PUSH
6817: LD_OWVAR 2
6821: ARRAY
6822: NONEQUAL
6823: PUSH
6824: LD_OWVAR 2
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 81
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: OR
6844: IFFALSE 6872
// if HasPowerByGameType ( mpGameType , i ) then
6846: LD_EXP 3
6850: PPUSH
6851: LD_VAR 0 2
6855: PPUSH
6856: CALL 6361 0 2
6860: IFFALSE 6872
// begin gameIsOn := true ;
6862: LD_ADDR_VAR 0 1
6866: PUSH
6867: LD_INT 1
6869: ST_TO_ADDR
// break ;
6870: GO 6874
// end ;
6872: GO 6751
6874: POP
6875: POP
// wait ( 100 ) ;
6876: LD_INT 100
6878: PPUSH
6879: CALL_OW 67
// until not gameIsOn ;
6883: LD_VAR 0 1
6887: NOT
6888: IFFALSE 6730
// if IAmServer then
6890: CALL_OW 518
6894: IFFALSE 6903
// wait ( 0 0$3 ) ;
6896: LD_INT 105
6898: PPUSH
6899: CALL_OW 67
// if Multiplayer then
6903: LD_OWVAR 4
6907: IFFALSE 6915
// YouLostInMultiplayer else
6909: CALL_OW 107
6913: GO 6922
// YouLost (  ) ;
6915: LD_STRING 
6917: PPUSH
6918: CALL_OW 104
// end ;
6922: PPOPN 2
6924: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
6925: LD_EXP 32
6929: IFFALSE 7267
6931: GO 6933
6933: DISABLE
6934: LD_INT 0
6936: PPUSH
6937: PPUSH
6938: PPUSH
6939: PPUSH
6940: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
6941: LD_ADDR_VAR 0 5
6945: PUSH
6946: LD_INT 1
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: LD_INT 3
6954: PUSH
6955: LD_INT 4
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: LD_INT 6
6963: PUSH
6964: LD_INT 7
6966: PUSH
6967: LD_INT 8
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6980: LD_INT 1050
6982: PPUSH
6983: CALL_OW 67
// for i := 1 to 8 do
6987: LD_ADDR_VAR 0 1
6991: PUSH
6992: DOUBLE
6993: LD_INT 1
6995: DEC
6996: ST_TO_ADDR
6997: LD_INT 8
6999: PUSH
7000: FOR_TO
7001: IFFALSE 7246
// begin j := sides [ i ] ;
7003: LD_ADDR_VAR 0 2
7007: PUSH
7008: LD_VAR 0 5
7012: PUSH
7013: LD_VAR 0 1
7017: ARRAY
7018: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7019: LD_EXP 39
7023: PUSH
7024: LD_VAR 0 2
7028: ARRAY
7029: PPUSH
7030: CALL 10800 0 1
7034: PUSH
7035: LD_VAR 0 2
7039: PPUSH
7040: CALL_OW 108
7044: AND
7045: PUSH
7046: LD_EXP 3
7050: PPUSH
7051: LD_VAR 0 2
7055: PPUSH
7056: CALL 6361 0 2
7060: AND
7061: IFFALSE 7244
// begin wait ( mpRespawn div 2 ) ;
7063: LD_EXP 32
7067: PUSH
7068: LD_INT 2
7070: DIV
7071: PPUSH
7072: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 22
7083: PUSH
7084: LD_VAR 0 2
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: LD_INT 50
7095: PUSH
7096: EMPTY
7097: LIST
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: LD_INT 30
7104: PUSH
7105: LD_INT 0
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 30
7114: PUSH
7115: LD_INT 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: ST_TO_ADDR
// if not tmp then
7137: LD_VAR 0 3
7141: NOT
7142: IFFALSE 7146
// continue ;
7144: GO 7000
// spawn := tmp [ 1 ] ;
7146: LD_ADDR_VAR 0 4
7150: PUSH
7151: LD_VAR 0 3
7155: PUSH
7156: LD_INT 1
7158: ARRAY
7159: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7160: LD_EXP 39
7164: PUSH
7165: LD_VAR 0 2
7169: ARRAY
7170: PUSH
7171: LD_INT 1
7173: ARRAY
7174: PPUSH
7175: LD_VAR 0 4
7179: PPUSH
7180: CALL_OW 250
7184: PPUSH
7185: LD_VAR 0 4
7189: PPUSH
7190: CALL_OW 251
7194: PPUSH
7195: LD_INT 32
7197: PPUSH
7198: LD_INT 1
7200: PPUSH
7201: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7205: LD_ADDR_EXP 39
7209: PUSH
7210: LD_EXP 39
7214: PPUSH
7215: LD_VAR 0 2
7219: PPUSH
7220: LD_EXP 39
7224: PUSH
7225: LD_VAR 0 2
7229: ARRAY
7230: PPUSH
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 3
7238: PPUSH
7239: CALL_OW 1
7243: ST_TO_ADDR
// end ; end ;
7244: GO 7000
7246: POP
7247: POP
// sides := Shuffle ( sides ) ;
7248: LD_ADDR_VAR 0 5
7252: PUSH
7253: LD_VAR 0 5
7257: PPUSH
7258: CALL 46494 0 1
7262: ST_TO_ADDR
// until false ;
7263: LD_INT 0
7265: IFFALSE 6980
// end ;
7267: PPOPN 5
7269: END
// every 0 0$1 marked mpActive do
7270: GO 7272
7272: DISABLE
// begin enable ;
7273: ENABLE
// if not mpDisplayStrings then
7274: LD_EXP 37
7278: NOT
7279: IFFALSE 7290
// begin display_strings := [ ] ;
7281: LD_ADDR_OWVAR 47
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// exit ;
7288: GO 7300
// end ; display_strings := mpDisplayStrings ;
7290: LD_ADDR_OWVAR 47
7294: PUSH
7295: LD_EXP 37
7299: ST_TO_ADDR
// end ; end_of_file
7300: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7301: LD_INT 0
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
7309: PPUSH
7310: PPUSH
7311: PPUSH
// if GetType ( un ) = unit_vehicle then
7312: LD_VAR 0 1
7316: PPUSH
7317: CALL_OW 247
7321: PUSH
7322: LD_INT 2
7324: EQUAL
7325: IFFALSE 7329
// exit ;
7327: GO 7795
// side := GetSide ( un ) ;
7329: LD_ADDR_VAR 0 9
7333: PUSH
7334: LD_VAR 0 1
7338: PPUSH
7339: CALL_OW 255
7343: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7344: LD_EXP 3
7348: PUSH
7349: LD_INT 2
7351: EQUAL
7352: IFFALSE 7445
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 266
7363: PUSH
7364: LD_INT 0
7366: PUSH
7367: LD_INT 1
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: IN
7374: PUSH
7375: LD_VAR 0 1
7379: PPUSH
7380: CALL_OW 110
7384: PUSH
7385: LD_VAR 0 9
7389: EQUAL
7390: AND
7391: IFFALSE 7445
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7393: LD_ADDR_VAR 0 3
7397: PUSH
7398: LD_INT 22
7400: PUSH
7401: LD_VAR 0 9
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: PUSH
7410: LD_INT 21
7412: PUSH
7413: LD_INT 1
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PPUSH
7424: CALL_OW 69
7428: PUSH
7429: FOR_IN
7430: IFFALSE 7443
// KillUnit ( i ) ;
7432: LD_VAR 0 3
7436: PPUSH
7437: CALL_OW 66
7441: GO 7429
7443: POP
7444: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7445: LD_VAR 0 1
7449: PPUSH
7450: CALL_OW 257
7454: PUSH
7455: LD_INT 12
7457: PUSH
7458: LD_INT 17
7460: PUSH
7461: LD_INT 15
7463: PUSH
7464: LD_INT 16
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: IN
7473: PUSH
7474: LD_VAR 0 1
7478: PPUSH
7479: CALL_OW 263
7483: PUSH
7484: LD_INT 5
7486: EQUAL
7487: OR
7488: IFFALSE 7577
// begin tag := GetTag ( un ) ;
7490: LD_ADDR_VAR 0 5
7494: PUSH
7495: LD_VAR 0 1
7499: PPUSH
7500: CALL_OW 110
7504: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
7505: LD_ADDR_VAR 0 7
7509: PUSH
7510: LD_EXP 31
7514: PUSH
7515: LD_VAR 0 5
7519: ARRAY
7520: ST_TO_ADDR
// wait ( 4 4$00 ) ;
7521: LD_INT 8400
7523: PPUSH
7524: CALL_OW 67
// PrepareApeman ( - 5 ) ;
7528: LD_INT 5
7530: NEG
7531: PPUSH
7532: CALL 42657 0 1
// ape := CreateHuman ;
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: CALL_OW 44
7545: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7546: LD_VAR 0 4
7550: PPUSH
7551: LD_VAR 0 5
7555: PPUSH
7556: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7560: LD_VAR 0 4
7564: PPUSH
7565: LD_VAR 0 7
7569: PPUSH
7570: LD_INT 0
7572: PPUSH
7573: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 247
7586: PUSH
7587: LD_INT 1
7589: EQUAL
7590: PUSH
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 248
7600: PUSH
7601: LD_INT 0
7603: GREATER
7604: AND
7605: IFFALSE 7795
// begin if not mpRespawn then
7607: LD_EXP 32
7611: NOT
7612: IFFALSE 7616
// exit ;
7614: GO 7795
// side := GetSide ( un ) ;
7616: LD_ADDR_VAR 0 9
7620: PUSH
7621: LD_VAR 0 1
7625: PPUSH
7626: CALL_OW 255
7630: ST_TO_ADDR
// nation := GetNation ( un ) ;
7631: LD_ADDR_VAR 0 8
7635: PUSH
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 248
7645: ST_TO_ADDR
// class := GetClass ( un ) ;
7646: LD_ADDR_VAR 0 6
7650: PUSH
7651: LD_VAR 0 1
7655: PPUSH
7656: CALL_OW 257
7660: ST_TO_ADDR
// if class > 4 then
7661: LD_VAR 0 6
7665: PUSH
7666: LD_INT 4
7668: GREATER
7669: IFFALSE 7679
// class := 1 ;
7671: LD_ADDR_VAR 0 6
7675: PUSH
7676: LD_INT 1
7678: ST_TO_ADDR
// wait ( mpRespawn ) ;
7679: LD_EXP 32
7683: PPUSH
7684: CALL_OW 67
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7688: LD_VAR 0 9
7692: PPUSH
7693: CALL_OW 108
7697: NOT
7698: PUSH
7699: LD_EXP 3
7703: PPUSH
7704: LD_VAR 0 9
7708: PPUSH
7709: CALL 6361 0 2
7713: NOT
7714: AND
7715: IFFALSE 7719
// exit ;
7717: GO 7795
// uc_side := side ;
7719: LD_ADDR_OWVAR 20
7723: PUSH
7724: LD_VAR 0 9
7728: ST_TO_ADDR
// uc_nation := nation ;
7729: LD_ADDR_OWVAR 21
7733: PUSH
7734: LD_VAR 0 8
7738: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
7739: LD_INT 0
7741: PPUSH
7742: LD_VAR 0 6
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 380
// mpRespawnPull := Replace ( mpRespawnPull , side , Join ( mpRespawnPull [ side ] , CreateHuman ) ) ;
7754: LD_ADDR_EXP 39
7758: PUSH
7759: LD_EXP 39
7763: PPUSH
7764: LD_VAR 0 9
7768: PPUSH
7769: LD_EXP 39
7773: PUSH
7774: LD_VAR 0 9
7778: ARRAY
7779: PPUSH
7780: CALL_OW 44
7784: PPUSH
7785: CALL 46389 0 2
7789: PPUSH
7790: CALL_OW 1
7794: ST_TO_ADDR
// end ; end ;
7795: LD_VAR 0 2
7799: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
7800: LD_INT 0
7802: PPUSH
7803: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
7804: LD_EXP 3
7808: PUSH
7809: LD_INT 2
7811: EQUAL
7812: PUSH
7813: LD_VAR 0 1
7817: PPUSH
7818: CALL_OW 266
7822: PUSH
7823: LD_INT 0
7825: PUSH
7826: LD_INT 1
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: IN
7833: AND
7834: IFFALSE 7899
// begin KillUnit ( building ) ;
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
7845: LD_ADDR_VAR 0 5
7849: PUSH
7850: LD_INT 22
7852: PUSH
7853: LD_VAR 0 2
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 21
7864: PUSH
7865: LD_INT 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PPUSH
7876: CALL_OW 69
7880: PUSH
7881: FOR_IN
7882: IFFALSE 7895
// KillUnit ( i ) ;
7884: LD_VAR 0 5
7888: PPUSH
7889: CALL_OW 66
7893: GO 7881
7895: POP
7896: POP
// exit ;
7897: GO 7944
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
7899: LD_VAR 0 1
7903: PPUSH
7904: CALL_OW 266
7908: PUSH
7909: LD_INT 0
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: IN
7919: IFFALSE 7944
// SetBName ( building , @ & GetSide ( building ) ) ;
7921: LD_VAR 0 1
7925: PPUSH
7926: LD_STRING @
7928: PUSH
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL_OW 255
7938: STR
7939: PPUSH
7940: CALL_OW 500
// end ; end_of_file
7944: LD_VAR 0 4
7948: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
7949: LD_EXP 38
7953: PUSH
7954: CALL 8159 0 0
7958: AND
7959: PUSH
7960: LD_OWVAR 4
7964: AND
7965: IFFALSE 8156
7967: GO 7969
7969: DISABLE
7970: LD_INT 0
7972: PPUSH
7973: PPUSH
// begin canWin := false ;
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_INT 0
7981: ST_TO_ADDR
// if not HasPower ( your_side ) then
7982: LD_OWVAR 2
7986: PPUSH
7987: CALL 8199 0 1
7991: NOT
7992: IFFALSE 8003
// begin Multiplayer_Loose_Message ;
7994: CALL_OW 521
// enable ( mpLose ) ;
7998: LD_INT 102
8000: ENABLE_MARKED
// end else
8001: GO 8156
// begin canWin := true ;
8003: LD_ADDR_VAR 0 2
8007: PUSH
8008: LD_INT 1
8010: ST_TO_ADDR
// for i := 1 to 8 do
8011: LD_ADDR_VAR 0 1
8015: PUSH
8016: DOUBLE
8017: LD_INT 1
8019: DEC
8020: ST_TO_ADDR
8021: LD_INT 8
8023: PUSH
8024: FOR_TO
8025: IFFALSE 8142
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8027: LD_EXP 7
8031: PUSH
8032: LD_VAR 0 1
8036: ARRAY
8037: PUSH
8038: LD_VAR 0 1
8042: PPUSH
8043: CALL_OW 108
8047: AND
8048: PUSH
8049: LD_VAR 0 1
8053: PUSH
8054: LD_OWVAR 2
8058: NONEQUAL
8059: AND
8060: IFFALSE 8140
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8062: LD_EXP 8
8066: PUSH
8067: LD_VAR 0 1
8071: ARRAY
8072: NOT
8073: PUSH
8074: LD_EXP 8
8078: PUSH
8079: LD_VAR 0 1
8083: ARRAY
8084: PUSH
8085: LD_EXP 8
8089: PUSH
8090: LD_OWVAR 2
8094: ARRAY
8095: NONEQUAL
8096: PUSH
8097: LD_OWVAR 2
8101: PPUSH
8102: LD_VAR 0 1
8106: PPUSH
8107: CALL_OW 81
8111: PUSH
8112: LD_INT 1
8114: NONEQUAL
8115: AND
8116: OR
8117: IFFALSE 8140
// if HasPower ( i ) then
8119: LD_VAR 0 1
8123: PPUSH
8124: CALL 8199 0 1
8128: IFFALSE 8140
// begin canWin := false ;
8130: LD_ADDR_VAR 0 2
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// break ;
8138: GO 8142
// end ;
8140: GO 8024
8142: POP
8143: POP
// if canWin then
8144: LD_VAR 0 2
8148: IFFALSE 8155
// enable ( mpWin ) else
8150: LD_INT 101
8152: ENABLE_MARKED
8153: GO 8156
// enable ;
8155: ENABLE
// end ; end ;
8156: PPOPN 2
8158: END
// function CanWinLoose ; begin
8159: LD_INT 0
8161: PPUSH
// result := true ;
8162: LD_ADDR_VAR 0 1
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8170: CALL_OW 531
8174: PUSH
8175: CALL_OW 519
8179: PUSH
8180: LD_INT 1
8182: GREATER
8183: AND
8184: IFFALSE 8194
// result := false ;
8186: LD_ADDR_VAR 0 1
8190: PUSH
8191: LD_INT 0
8193: ST_TO_ADDR
// end ;
8194: LD_VAR 0 1
8198: RET
// function HasPower ( i ) ; begin
8199: LD_INT 0
8201: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8202: LD_ADDR_VAR 0 2
8206: PUSH
8207: LD_INT 22
8209: PUSH
8210: LD_VAR 0 1
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 2
8221: PUSH
8222: LD_INT 21
8224: PUSH
8225: LD_INT 1
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 33
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 33
8244: PUSH
8245: LD_INT 5
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: ST_TO_ADDR
// end ; end_of_file
8267: LD_VAR 0 2
8271: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8272: LD_EXP 38
8276: IFFALSE 8319
8278: GO 8280
8280: DISABLE
8281: LD_INT 0
8283: PPUSH
// begin for i := 1 to 8 do
8284: LD_ADDR_VAR 0 1
8288: PUSH
8289: DOUBLE
8290: LD_INT 1
8292: DEC
8293: ST_TO_ADDR
8294: LD_INT 8
8296: PUSH
8297: FOR_TO
8298: IFFALSE 8317
// SetRestrict ( b_depot , i , state_disabled ) ;
8300: LD_INT 0
8302: PPUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: LD_INT 0
8310: PPUSH
8311: CALL_OW 324
8315: GO 8297
8317: POP
8318: POP
// end ;
8319: PPOPN 1
8321: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8322: LD_EXP 38
8326: PUSH
8327: CALL 8532 0 0
8331: AND
8332: PUSH
8333: LD_OWVAR 4
8337: AND
8338: IFFALSE 8529
8340: GO 8342
8342: DISABLE
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
// begin canWin := false ;
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: LD_INT 0
8354: ST_TO_ADDR
// if not HasPower ( your_side ) then
8355: LD_OWVAR 2
8359: PPUSH
8360: CALL 8572 0 1
8364: NOT
8365: IFFALSE 8376
// begin Multiplayer_Loose_Message ;
8367: CALL_OW 521
// enable ( mpLose ) ;
8371: LD_INT 102
8373: ENABLE_MARKED
// end else
8374: GO 8529
// begin canWin := true ;
8376: LD_ADDR_VAR 0 2
8380: PUSH
8381: LD_INT 1
8383: ST_TO_ADDR
// for i := 1 to 8 do
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 8
8396: PUSH
8397: FOR_TO
8398: IFFALSE 8515
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8400: LD_EXP 7
8404: PUSH
8405: LD_VAR 0 1
8409: ARRAY
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: CALL_OW 108
8420: AND
8421: PUSH
8422: LD_VAR 0 1
8426: PUSH
8427: LD_OWVAR 2
8431: NONEQUAL
8432: AND
8433: IFFALSE 8513
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8435: LD_EXP 8
8439: PUSH
8440: LD_VAR 0 1
8444: ARRAY
8445: NOT
8446: PUSH
8447: LD_EXP 8
8451: PUSH
8452: LD_VAR 0 1
8456: ARRAY
8457: PUSH
8458: LD_EXP 8
8462: PUSH
8463: LD_OWVAR 2
8467: ARRAY
8468: NONEQUAL
8469: PUSH
8470: LD_OWVAR 2
8474: PPUSH
8475: LD_VAR 0 1
8479: PPUSH
8480: CALL_OW 81
8484: PUSH
8485: LD_INT 1
8487: NONEQUAL
8488: AND
8489: OR
8490: IFFALSE 8513
// if HasPower ( i ) then
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL 8572 0 1
8501: IFFALSE 8513
// begin canWin := false ;
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// break ;
8511: GO 8515
// end ;
8513: GO 8397
8515: POP
8516: POP
// if canWin then
8517: LD_VAR 0 2
8521: IFFALSE 8528
// enable ( mpWin ) else
8523: LD_INT 101
8525: ENABLE_MARKED
8526: GO 8529
// enable ;
8528: ENABLE
// end ; end ;
8529: PPOPN 2
8531: END
// function CanWinLoose ; begin
8532: LD_INT 0
8534: PPUSH
// result := true ;
8535: LD_ADDR_VAR 0 1
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8543: CALL_OW 531
8547: PUSH
8548: CALL_OW 519
8552: PUSH
8553: LD_INT 1
8555: GREATER
8556: AND
8557: IFFALSE 8567
// result := false ;
8559: LD_ADDR_VAR 0 1
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// end ;
8567: LD_VAR 0 1
8571: RET
// function HasPower ( i ) ; begin
8572: LD_INT 0
8574: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8575: LD_INT 22
8577: PUSH
8578: LD_VAR 0 1
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 2
8589: PUSH
8590: LD_INT 30
8592: PUSH
8593: LD_INT 0
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 30
8602: PUSH
8603: LD_INT 1
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PPUSH
8619: CALL_OW 69
8623: NOT
8624: IFFALSE 8628
// exit ;
8626: GO 8693
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8628: LD_ADDR_VAR 0 2
8632: PUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 21
8650: PUSH
8651: LD_INT 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 33
8660: PUSH
8661: LD_INT 3
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 33
8670: PUSH
8671: LD_INT 5
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 69
8692: ST_TO_ADDR
// end ; end_of_file
8693: LD_VAR 0 2
8697: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8698: LD_INT 0
8700: PPUSH
8701: PPUSH
// if exist_mode then
8702: LD_VAR 0 2
8706: IFFALSE 8731
// unit := CreateCharacter ( prefix & ident ) else
8708: LD_ADDR_VAR 0 5
8712: PUSH
8713: LD_VAR 0 3
8717: PUSH
8718: LD_VAR 0 1
8722: STR
8723: PPUSH
8724: CALL_OW 34
8728: ST_TO_ADDR
8729: GO 8746
// unit := NewCharacter ( ident ) ;
8731: LD_ADDR_VAR 0 5
8735: PUSH
8736: LD_VAR 0 1
8740: PPUSH
8741: CALL_OW 25
8745: ST_TO_ADDR
// result := unit ;
8746: LD_ADDR_VAR 0 4
8750: PUSH
8751: LD_VAR 0 5
8755: ST_TO_ADDR
// end ;
8756: LD_VAR 0 4
8760: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8761: LD_INT 0
8763: PPUSH
8764: PPUSH
// if not side or not nation then
8765: LD_VAR 0 1
8769: NOT
8770: PUSH
8771: LD_VAR 0 2
8775: NOT
8776: OR
8777: IFFALSE 8781
// exit ;
8779: GO 9549
// case nation of nation_american :
8781: LD_VAR 0 2
8785: PUSH
8786: LD_INT 1
8788: DOUBLE
8789: EQUAL
8790: IFTRUE 8794
8792: GO 9008
8794: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8795: LD_ADDR_VAR 0 4
8799: PUSH
8800: LD_INT 35
8802: PUSH
8803: LD_INT 45
8805: PUSH
8806: LD_INT 46
8808: PUSH
8809: LD_INT 47
8811: PUSH
8812: LD_INT 82
8814: PUSH
8815: LD_INT 83
8817: PUSH
8818: LD_INT 84
8820: PUSH
8821: LD_INT 85
8823: PUSH
8824: LD_INT 86
8826: PUSH
8827: LD_INT 1
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 6
8835: PUSH
8836: LD_INT 15
8838: PUSH
8839: LD_INT 16
8841: PUSH
8842: LD_INT 7
8844: PUSH
8845: LD_INT 12
8847: PUSH
8848: LD_INT 13
8850: PUSH
8851: LD_INT 10
8853: PUSH
8854: LD_INT 14
8856: PUSH
8857: LD_INT 20
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_INT 25
8868: PUSH
8869: LD_INT 32
8871: PUSH
8872: LD_INT 27
8874: PUSH
8875: LD_INT 36
8877: PUSH
8878: LD_INT 69
8880: PUSH
8881: LD_INT 39
8883: PUSH
8884: LD_INT 34
8886: PUSH
8887: LD_INT 40
8889: PUSH
8890: LD_INT 48
8892: PUSH
8893: LD_INT 49
8895: PUSH
8896: LD_INT 50
8898: PUSH
8899: LD_INT 51
8901: PUSH
8902: LD_INT 52
8904: PUSH
8905: LD_INT 53
8907: PUSH
8908: LD_INT 54
8910: PUSH
8911: LD_INT 55
8913: PUSH
8914: LD_INT 56
8916: PUSH
8917: LD_INT 57
8919: PUSH
8920: LD_INT 58
8922: PUSH
8923: LD_INT 59
8925: PUSH
8926: LD_INT 60
8928: PUSH
8929: LD_INT 61
8931: PUSH
8932: LD_INT 62
8934: PUSH
8935: LD_INT 80
8937: PUSH
8938: LD_INT 82
8940: PUSH
8941: LD_INT 83
8943: PUSH
8944: LD_INT 84
8946: PUSH
8947: LD_INT 85
8949: PUSH
8950: LD_INT 86
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: ST_TO_ADDR
9006: GO 9473
9008: LD_INT 2
9010: DOUBLE
9011: EQUAL
9012: IFTRUE 9016
9014: GO 9242
9016: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: LD_INT 35
9024: PUSH
9025: LD_INT 45
9027: PUSH
9028: LD_INT 46
9030: PUSH
9031: LD_INT 47
9033: PUSH
9034: LD_INT 82
9036: PUSH
9037: LD_INT 83
9039: PUSH
9040: LD_INT 84
9042: PUSH
9043: LD_INT 85
9045: PUSH
9046: LD_INT 87
9048: PUSH
9049: LD_INT 70
9051: PUSH
9052: LD_INT 1
9054: PUSH
9055: LD_INT 11
9057: PUSH
9058: LD_INT 3
9060: PUSH
9061: LD_INT 4
9063: PUSH
9064: LD_INT 5
9066: PUSH
9067: LD_INT 6
9069: PUSH
9070: LD_INT 15
9072: PUSH
9073: LD_INT 18
9075: PUSH
9076: LD_INT 7
9078: PUSH
9079: LD_INT 17
9081: PUSH
9082: LD_INT 8
9084: PUSH
9085: LD_INT 20
9087: PUSH
9088: LD_INT 21
9090: PUSH
9091: LD_INT 22
9093: PUSH
9094: LD_INT 72
9096: PUSH
9097: LD_INT 26
9099: PUSH
9100: LD_INT 69
9102: PUSH
9103: LD_INT 39
9105: PUSH
9106: LD_INT 40
9108: PUSH
9109: LD_INT 41
9111: PUSH
9112: LD_INT 42
9114: PUSH
9115: LD_INT 43
9117: PUSH
9118: LD_INT 48
9120: PUSH
9121: LD_INT 49
9123: PUSH
9124: LD_INT 50
9126: PUSH
9127: LD_INT 51
9129: PUSH
9130: LD_INT 52
9132: PUSH
9133: LD_INT 53
9135: PUSH
9136: LD_INT 54
9138: PUSH
9139: LD_INT 55
9141: PUSH
9142: LD_INT 56
9144: PUSH
9145: LD_INT 60
9147: PUSH
9148: LD_INT 61
9150: PUSH
9151: LD_INT 62
9153: PUSH
9154: LD_INT 66
9156: PUSH
9157: LD_INT 67
9159: PUSH
9160: LD_INT 68
9162: PUSH
9163: LD_INT 81
9165: PUSH
9166: LD_INT 82
9168: PUSH
9169: LD_INT 83
9171: PUSH
9172: LD_INT 84
9174: PUSH
9175: LD_INT 85
9177: PUSH
9178: LD_INT 87
9180: PUSH
9181: LD_INT 88
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: ST_TO_ADDR
9240: GO 9473
9242: LD_INT 3
9244: DOUBLE
9245: EQUAL
9246: IFTRUE 9250
9248: GO 9472
9250: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9251: LD_ADDR_VAR 0 4
9255: PUSH
9256: LD_INT 46
9258: PUSH
9259: LD_INT 47
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: LD_INT 2
9267: PUSH
9268: LD_INT 82
9270: PUSH
9271: LD_INT 83
9273: PUSH
9274: LD_INT 84
9276: PUSH
9277: LD_INT 85
9279: PUSH
9280: LD_INT 86
9282: PUSH
9283: LD_INT 11
9285: PUSH
9286: LD_INT 9
9288: PUSH
9289: LD_INT 20
9291: PUSH
9292: LD_INT 19
9294: PUSH
9295: LD_INT 21
9297: PUSH
9298: LD_INT 24
9300: PUSH
9301: LD_INT 22
9303: PUSH
9304: LD_INT 25
9306: PUSH
9307: LD_INT 28
9309: PUSH
9310: LD_INT 29
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 31
9318: PUSH
9319: LD_INT 37
9321: PUSH
9322: LD_INT 38
9324: PUSH
9325: LD_INT 32
9327: PUSH
9328: LD_INT 27
9330: PUSH
9331: LD_INT 33
9333: PUSH
9334: LD_INT 69
9336: PUSH
9337: LD_INT 39
9339: PUSH
9340: LD_INT 34
9342: PUSH
9343: LD_INT 40
9345: PUSH
9346: LD_INT 71
9348: PUSH
9349: LD_INT 23
9351: PUSH
9352: LD_INT 44
9354: PUSH
9355: LD_INT 48
9357: PUSH
9358: LD_INT 49
9360: PUSH
9361: LD_INT 50
9363: PUSH
9364: LD_INT 51
9366: PUSH
9367: LD_INT 52
9369: PUSH
9370: LD_INT 53
9372: PUSH
9373: LD_INT 54
9375: PUSH
9376: LD_INT 55
9378: PUSH
9379: LD_INT 56
9381: PUSH
9382: LD_INT 57
9384: PUSH
9385: LD_INT 58
9387: PUSH
9388: LD_INT 59
9390: PUSH
9391: LD_INT 63
9393: PUSH
9394: LD_INT 64
9396: PUSH
9397: LD_INT 65
9399: PUSH
9400: LD_INT 82
9402: PUSH
9403: LD_INT 83
9405: PUSH
9406: LD_INT 84
9408: PUSH
9409: LD_INT 85
9411: PUSH
9412: LD_INT 86
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: ST_TO_ADDR
9470: GO 9473
9472: POP
// if state > - 1 and state < 3 then
9473: LD_VAR 0 3
9477: PUSH
9478: LD_INT 1
9480: NEG
9481: GREATER
9482: PUSH
9483: LD_VAR 0 3
9487: PUSH
9488: LD_INT 3
9490: LESS
9491: AND
9492: IFFALSE 9549
// for i in result do
9494: LD_ADDR_VAR 0 5
9498: PUSH
9499: LD_VAR 0 4
9503: PUSH
9504: FOR_IN
9505: IFFALSE 9547
// if GetTech ( i , side ) <> state then
9507: LD_VAR 0 5
9511: PPUSH
9512: LD_VAR 0 1
9516: PPUSH
9517: CALL_OW 321
9521: PUSH
9522: LD_VAR 0 3
9526: NONEQUAL
9527: IFFALSE 9545
// result := result diff i ;
9529: LD_ADDR_VAR 0 4
9533: PUSH
9534: LD_VAR 0 4
9538: PUSH
9539: LD_VAR 0 5
9543: DIFF
9544: ST_TO_ADDR
9545: GO 9504
9547: POP
9548: POP
// end ;
9549: LD_VAR 0 4
9553: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
// result := true ;
9559: LD_ADDR_VAR 0 3
9563: PUSH
9564: LD_INT 1
9566: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9567: LD_ADDR_VAR 0 5
9571: PUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 480
9581: ST_TO_ADDR
// if not tmp then
9582: LD_VAR 0 5
9586: NOT
9587: IFFALSE 9591
// exit ;
9589: GO 9640
// for i in tmp do
9591: LD_ADDR_VAR 0 4
9595: PUSH
9596: LD_VAR 0 5
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9638
// if GetTech ( i , side ) <> state_researched then
9604: LD_VAR 0 4
9608: PPUSH
9609: LD_VAR 0 1
9613: PPUSH
9614: CALL_OW 321
9618: PUSH
9619: LD_INT 2
9621: NONEQUAL
9622: IFFALSE 9636
// begin result := false ;
9624: LD_ADDR_VAR 0 3
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// exit ;
9632: POP
9633: POP
9634: GO 9640
// end ;
9636: GO 9601
9638: POP
9639: POP
// end ;
9640: LD_VAR 0 3
9644: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9645: LD_INT 0
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
9651: PPUSH
9652: PPUSH
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
9657: PPUSH
9658: PPUSH
9659: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9660: LD_VAR 0 1
9664: NOT
9665: PUSH
9666: LD_VAR 0 1
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 9
9678: NONEQUAL
9679: OR
9680: IFFALSE 9684
// exit ;
9682: GO 10257
// side := GetSide ( unit ) ;
9684: LD_ADDR_VAR 0 9
9688: PUSH
9689: LD_VAR 0 1
9693: PPUSH
9694: CALL_OW 255
9698: ST_TO_ADDR
// tech_space := tech_spacanom ;
9699: LD_ADDR_VAR 0 12
9703: PUSH
9704: LD_INT 29
9706: ST_TO_ADDR
// tech_time := tech_taurad ;
9707: LD_ADDR_VAR 0 13
9711: PUSH
9712: LD_INT 28
9714: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9715: LD_ADDR_VAR 0 11
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 310
9729: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9730: LD_VAR 0 11
9734: PPUSH
9735: CALL_OW 247
9739: PUSH
9740: LD_INT 2
9742: EQUAL
9743: IFFALSE 9747
// exit ;
9745: GO 10257
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9747: LD_ADDR_VAR 0 8
9751: PUSH
9752: LD_INT 81
9754: PUSH
9755: LD_VAR 0 9
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 3
9766: PUSH
9767: LD_INT 21
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: CALL_OW 69
9789: ST_TO_ADDR
// if not tmp then
9790: LD_VAR 0 8
9794: NOT
9795: IFFALSE 9799
// exit ;
9797: GO 10257
// if in_unit then
9799: LD_VAR 0 11
9803: IFFALSE 9827
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9805: LD_ADDR_VAR 0 10
9809: PUSH
9810: LD_VAR 0 8
9814: PPUSH
9815: LD_VAR 0 11
9819: PPUSH
9820: CALL_OW 74
9824: ST_TO_ADDR
9825: GO 9847
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9827: LD_ADDR_VAR 0 10
9831: PUSH
9832: LD_VAR 0 8
9836: PPUSH
9837: LD_VAR 0 1
9841: PPUSH
9842: CALL_OW 74
9846: ST_TO_ADDR
// if not enemy then
9847: LD_VAR 0 10
9851: NOT
9852: IFFALSE 9856
// exit ;
9854: GO 10257
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9856: LD_VAR 0 11
9860: PUSH
9861: LD_VAR 0 11
9865: PPUSH
9866: LD_VAR 0 10
9870: PPUSH
9871: CALL_OW 296
9875: PUSH
9876: LD_INT 13
9878: GREATER
9879: AND
9880: PUSH
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_VAR 0 10
9890: PPUSH
9891: CALL_OW 296
9895: PUSH
9896: LD_INT 12
9898: GREATER
9899: OR
9900: IFFALSE 9904
// exit ;
9902: GO 10257
// missile := [ 1 ] ;
9904: LD_ADDR_VAR 0 14
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: EMPTY
9913: LIST
9914: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9915: LD_VAR 0 9
9919: PPUSH
9920: LD_VAR 0 12
9924: PPUSH
9925: CALL_OW 325
9929: IFFALSE 9958
// missile := Replace ( missile , missile + 1 , 2 ) ;
9931: LD_ADDR_VAR 0 14
9935: PUSH
9936: LD_VAR 0 14
9940: PPUSH
9941: LD_VAR 0 14
9945: PUSH
9946: LD_INT 1
9948: PLUS
9949: PPUSH
9950: LD_INT 2
9952: PPUSH
9953: CALL_OW 1
9957: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9958: LD_VAR 0 9
9962: PPUSH
9963: LD_VAR 0 13
9967: PPUSH
9968: CALL_OW 325
9972: PUSH
9973: LD_VAR 0 10
9977: PPUSH
9978: CALL_OW 255
9982: PPUSH
9983: LD_VAR 0 13
9987: PPUSH
9988: CALL_OW 325
9992: NOT
9993: AND
9994: IFFALSE 10023
// missile := Replace ( missile , missile + 1 , 3 ) ;
9996: LD_ADDR_VAR 0 14
10000: PUSH
10001: LD_VAR 0 14
10005: PPUSH
10006: LD_VAR 0 14
10010: PUSH
10011: LD_INT 1
10013: PLUS
10014: PPUSH
10015: LD_INT 3
10017: PPUSH
10018: CALL_OW 1
10022: ST_TO_ADDR
// if missile < 2 then
10023: LD_VAR 0 14
10027: PUSH
10028: LD_INT 2
10030: LESS
10031: IFFALSE 10035
// exit ;
10033: GO 10257
// x := GetX ( enemy ) ;
10035: LD_ADDR_VAR 0 4
10039: PUSH
10040: LD_VAR 0 10
10044: PPUSH
10045: CALL_OW 250
10049: ST_TO_ADDR
// y := GetY ( enemy ) ;
10050: LD_ADDR_VAR 0 5
10054: PUSH
10055: LD_VAR 0 10
10059: PPUSH
10060: CALL_OW 251
10064: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10065: LD_ADDR_VAR 0 6
10069: PUSH
10070: LD_VAR 0 4
10074: PUSH
10075: LD_INT 1
10077: NEG
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: CALL_OW 12
10086: PLUS
10087: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10088: LD_ADDR_VAR 0 7
10092: PUSH
10093: LD_VAR 0 5
10097: PUSH
10098: LD_INT 1
10100: NEG
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 12
10109: PLUS
10110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10111: LD_VAR 0 6
10115: PPUSH
10116: LD_VAR 0 7
10120: PPUSH
10121: CALL_OW 488
10125: NOT
10126: IFFALSE 10148
// begin _x := x ;
10128: LD_ADDR_VAR 0 6
10132: PUSH
10133: LD_VAR 0 4
10137: ST_TO_ADDR
// _y := y ;
10138: LD_ADDR_VAR 0 7
10142: PUSH
10143: LD_VAR 0 5
10147: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10148: LD_ADDR_VAR 0 3
10152: PUSH
10153: LD_INT 1
10155: PPUSH
10156: LD_VAR 0 14
10160: PPUSH
10161: CALL_OW 12
10165: ST_TO_ADDR
// case i of 1 :
10166: LD_VAR 0 3
10170: PUSH
10171: LD_INT 1
10173: DOUBLE
10174: EQUAL
10175: IFTRUE 10179
10177: GO 10196
10179: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10180: LD_VAR 0 1
10184: PPUSH
10185: LD_VAR 0 10
10189: PPUSH
10190: CALL_OW 115
10194: GO 10257
10196: LD_INT 2
10198: DOUBLE
10199: EQUAL
10200: IFTRUE 10204
10202: GO 10226
10204: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10205: LD_VAR 0 1
10209: PPUSH
10210: LD_VAR 0 6
10214: PPUSH
10215: LD_VAR 0 7
10219: PPUSH
10220: CALL_OW 153
10224: GO 10257
10226: LD_INT 3
10228: DOUBLE
10229: EQUAL
10230: IFTRUE 10234
10232: GO 10256
10234: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10235: LD_VAR 0 1
10239: PPUSH
10240: LD_VAR 0 6
10244: PPUSH
10245: LD_VAR 0 7
10249: PPUSH
10250: CALL_OW 154
10254: GO 10257
10256: POP
// end ;
10257: LD_VAR 0 2
10261: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10262: LD_INT 0
10264: PPUSH
10265: PPUSH
10266: PPUSH
10267: PPUSH
10268: PPUSH
10269: PPUSH
// if not unit or not building then
10270: LD_VAR 0 1
10274: NOT
10275: PUSH
10276: LD_VAR 0 2
10280: NOT
10281: OR
10282: IFFALSE 10286
// exit ;
10284: GO 10444
// x := GetX ( building ) ;
10286: LD_ADDR_VAR 0 5
10290: PUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: CALL_OW 250
10300: ST_TO_ADDR
// y := GetY ( building ) ;
10301: LD_ADDR_VAR 0 6
10305: PUSH
10306: LD_VAR 0 2
10310: PPUSH
10311: CALL_OW 251
10315: ST_TO_ADDR
// for i = 0 to 5 do
10316: LD_ADDR_VAR 0 4
10320: PUSH
10321: DOUBLE
10322: LD_INT 0
10324: DEC
10325: ST_TO_ADDR
10326: LD_INT 5
10328: PUSH
10329: FOR_TO
10330: IFFALSE 10442
// begin _x := ShiftX ( x , i , 3 ) ;
10332: LD_ADDR_VAR 0 7
10336: PUSH
10337: LD_VAR 0 5
10341: PPUSH
10342: LD_VAR 0 4
10346: PPUSH
10347: LD_INT 3
10349: PPUSH
10350: CALL_OW 272
10354: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10355: LD_ADDR_VAR 0 8
10359: PUSH
10360: LD_VAR 0 6
10364: PPUSH
10365: LD_VAR 0 4
10369: PPUSH
10370: LD_INT 3
10372: PPUSH
10373: CALL_OW 273
10377: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10378: LD_VAR 0 7
10382: PPUSH
10383: LD_VAR 0 8
10387: PPUSH
10388: CALL_OW 488
10392: NOT
10393: IFFALSE 10397
// continue ;
10395: GO 10329
// if HexInfo ( _x , _y ) = 0 then
10397: LD_VAR 0 7
10401: PPUSH
10402: LD_VAR 0 8
10406: PPUSH
10407: CALL_OW 428
10411: PUSH
10412: LD_INT 0
10414: EQUAL
10415: IFFALSE 10440
// begin ComMoveXY ( unit , _x , _y ) ;
10417: LD_VAR 0 1
10421: PPUSH
10422: LD_VAR 0 7
10426: PPUSH
10427: LD_VAR 0 8
10431: PPUSH
10432: CALL_OW 111
// exit ;
10436: POP
10437: POP
10438: GO 10444
// end ; end ;
10440: GO 10329
10442: POP
10443: POP
// end ;
10444: LD_VAR 0 3
10448: RET
// export function ScanBase ( side , base_area ) ; begin
10449: LD_INT 0
10451: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10452: LD_ADDR_VAR 0 3
10456: PUSH
10457: LD_VAR 0 2
10461: PPUSH
10462: LD_INT 81
10464: PUSH
10465: LD_VAR 0 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 70
10478: ST_TO_ADDR
// end ;
10479: LD_VAR 0 3
10483: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
10489: PPUSH
// result := false ;
10490: LD_ADDR_VAR 0 2
10494: PUSH
10495: LD_INT 0
10497: ST_TO_ADDR
// side := GetSide ( unit ) ;
10498: LD_ADDR_VAR 0 3
10502: PUSH
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 255
10512: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10513: LD_ADDR_VAR 0 4
10517: PUSH
10518: LD_VAR 0 1
10522: PPUSH
10523: CALL_OW 248
10527: ST_TO_ADDR
// case nat of 1 :
10528: LD_VAR 0 4
10532: PUSH
10533: LD_INT 1
10535: DOUBLE
10536: EQUAL
10537: IFTRUE 10541
10539: GO 10552
10541: POP
// tech := tech_lassight ; 2 :
10542: LD_ADDR_VAR 0 5
10546: PUSH
10547: LD_INT 12
10549: ST_TO_ADDR
10550: GO 10591
10552: LD_INT 2
10554: DOUBLE
10555: EQUAL
10556: IFTRUE 10560
10558: GO 10571
10560: POP
// tech := tech_mortar ; 3 :
10561: LD_ADDR_VAR 0 5
10565: PUSH
10566: LD_INT 41
10568: ST_TO_ADDR
10569: GO 10591
10571: LD_INT 3
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10590
10579: POP
// tech := tech_bazooka ; end ;
10580: LD_ADDR_VAR 0 5
10584: PUSH
10585: LD_INT 44
10587: ST_TO_ADDR
10588: GO 10591
10590: POP
// if Researched ( side , tech ) then
10591: LD_VAR 0 3
10595: PPUSH
10596: LD_VAR 0 5
10600: PPUSH
10601: CALL_OW 325
10605: IFFALSE 10632
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10607: LD_ADDR_VAR 0 2
10611: PUSH
10612: LD_INT 5
10614: PUSH
10615: LD_INT 8
10617: PUSH
10618: LD_INT 9
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: PUSH
10626: LD_VAR 0 4
10630: ARRAY
10631: ST_TO_ADDR
// end ;
10632: LD_VAR 0 2
10636: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10637: LD_INT 0
10639: PPUSH
10640: PPUSH
10641: PPUSH
// if not mines then
10642: LD_VAR 0 2
10646: NOT
10647: IFFALSE 10651
// exit ;
10649: GO 10795
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_INT 81
10658: PUSH
10659: LD_VAR 0 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 3
10670: PUSH
10671: LD_INT 21
10673: PUSH
10674: LD_INT 3
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 69
10693: ST_TO_ADDR
// for i in mines do
10694: LD_ADDR_VAR 0 4
10698: PUSH
10699: LD_VAR 0 2
10703: PUSH
10704: FOR_IN
10705: IFFALSE 10793
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: ARRAY
10715: PPUSH
10716: LD_VAR 0 4
10720: PUSH
10721: LD_INT 2
10723: ARRAY
10724: PPUSH
10725: CALL_OW 458
10729: NOT
10730: IFFALSE 10734
// continue ;
10732: GO 10704
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10734: LD_VAR 0 4
10738: PUSH
10739: LD_INT 1
10741: ARRAY
10742: PPUSH
10743: LD_VAR 0 4
10747: PUSH
10748: LD_INT 2
10750: ARRAY
10751: PPUSH
10752: CALL_OW 428
10756: PUSH
10757: LD_VAR 0 5
10761: IN
10762: IFFALSE 10791
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10764: LD_VAR 0 4
10768: PUSH
10769: LD_INT 1
10771: ARRAY
10772: PPUSH
10773: LD_VAR 0 4
10777: PUSH
10778: LD_INT 2
10780: ARRAY
10781: PPUSH
10782: LD_VAR 0 1
10786: PPUSH
10787: CALL_OW 456
// end ;
10791: GO 10704
10793: POP
10794: POP
// end ;
10795: LD_VAR 0 3
10799: RET
// export function Count ( array ) ; begin
10800: LD_INT 0
10802: PPUSH
// result := array + 0 ;
10803: LD_ADDR_VAR 0 2
10807: PUSH
10808: LD_VAR 0 1
10812: PUSH
10813: LD_INT 0
10815: PLUS
10816: ST_TO_ADDR
// end ;
10817: LD_VAR 0 2
10821: RET
// export function IsEmpty ( building ) ; begin
10822: LD_INT 0
10824: PPUSH
// if not building then
10825: LD_VAR 0 1
10829: NOT
10830: IFFALSE 10834
// exit ;
10832: GO 10877
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10834: LD_ADDR_VAR 0 2
10838: PUSH
10839: LD_VAR 0 1
10843: PUSH
10844: LD_INT 22
10846: PUSH
10847: LD_VAR 0 1
10851: PPUSH
10852: CALL_OW 255
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 58
10863: PUSH
10864: EMPTY
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 69
10875: IN
10876: ST_TO_ADDR
// end ;
10877: LD_VAR 0 2
10881: RET
// export function IsNotFull ( building ) ; var places ; begin
10882: LD_INT 0
10884: PPUSH
10885: PPUSH
// if not building then
10886: LD_VAR 0 1
10890: NOT
10891: IFFALSE 10895
// exit ;
10893: GO 10923
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_VAR 0 1
10904: PPUSH
10905: LD_INT 3
10907: PUSH
10908: LD_INT 62
10910: PUSH
10911: EMPTY
10912: LIST
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 72
10922: ST_TO_ADDR
// end ;
10923: LD_VAR 0 2
10927: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10928: LD_INT 0
10930: PPUSH
10931: PPUSH
10932: PPUSH
10933: PPUSH
// tmp := [ ] ;
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: EMPTY
10940: ST_TO_ADDR
// list := [ ] ;
10941: LD_ADDR_VAR 0 5
10945: PUSH
10946: EMPTY
10947: ST_TO_ADDR
// for i = 16 to 25 do
10948: LD_ADDR_VAR 0 4
10952: PUSH
10953: DOUBLE
10954: LD_INT 16
10956: DEC
10957: ST_TO_ADDR
10958: LD_INT 25
10960: PUSH
10961: FOR_TO
10962: IFFALSE 11035
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10964: LD_ADDR_VAR 0 3
10968: PUSH
10969: LD_VAR 0 3
10973: PUSH
10974: LD_INT 22
10976: PUSH
10977: LD_VAR 0 1
10981: PPUSH
10982: CALL_OW 255
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 91
10993: PUSH
10994: LD_VAR 0 1
10998: PUSH
10999: LD_INT 6
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 30
11009: PUSH
11010: LD_VAR 0 4
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: ADD
11032: ST_TO_ADDR
11033: GO 10961
11035: POP
11036: POP
// for i = 1 to tmp do
11037: LD_ADDR_VAR 0 4
11041: PUSH
11042: DOUBLE
11043: LD_INT 1
11045: DEC
11046: ST_TO_ADDR
11047: LD_VAR 0 3
11051: PUSH
11052: FOR_TO
11053: IFFALSE 11141
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11055: LD_ADDR_VAR 0 5
11059: PUSH
11060: LD_VAR 0 5
11064: PUSH
11065: LD_VAR 0 3
11069: PUSH
11070: LD_VAR 0 4
11074: ARRAY
11075: PPUSH
11076: CALL_OW 266
11080: PUSH
11081: LD_VAR 0 3
11085: PUSH
11086: LD_VAR 0 4
11090: ARRAY
11091: PPUSH
11092: CALL_OW 250
11096: PUSH
11097: LD_VAR 0 3
11101: PUSH
11102: LD_VAR 0 4
11106: ARRAY
11107: PPUSH
11108: CALL_OW 251
11112: PUSH
11113: LD_VAR 0 3
11117: PUSH
11118: LD_VAR 0 4
11122: ARRAY
11123: PPUSH
11124: CALL_OW 254
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: ADD
11138: ST_TO_ADDR
11139: GO 11052
11141: POP
11142: POP
// result := list ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_VAR 0 5
11152: ST_TO_ADDR
// end ;
11153: LD_VAR 0 2
11157: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11158: LD_INT 0
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// if not factory then
11167: LD_VAR 0 1
11171: NOT
11172: IFFALSE 11176
// exit ;
11174: GO 11769
// if control = control_apeman then
11176: LD_VAR 0 4
11180: PUSH
11181: LD_INT 5
11183: EQUAL
11184: IFFALSE 11293
// begin tmp := UnitsInside ( factory ) ;
11186: LD_ADDR_VAR 0 8
11190: PUSH
11191: LD_VAR 0 1
11195: PPUSH
11196: CALL_OW 313
11200: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11201: LD_VAR 0 8
11205: PPUSH
11206: LD_INT 25
11208: PUSH
11209: LD_INT 12
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 72
11220: NOT
11221: IFFALSE 11231
// control := control_manual ;
11223: LD_ADDR_VAR 0 4
11227: PUSH
11228: LD_INT 1
11230: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11231: LD_ADDR_VAR 0 8
11235: PUSH
11236: LD_VAR 0 1
11240: PPUSH
11241: CALL 10928 0 1
11245: ST_TO_ADDR
// if tmp then
11246: LD_VAR 0 8
11250: IFFALSE 11293
// begin for i in tmp do
11252: LD_ADDR_VAR 0 7
11256: PUSH
11257: LD_VAR 0 8
11261: PUSH
11262: FOR_IN
11263: IFFALSE 11291
// if i [ 1 ] = b_ext_radio then
11265: LD_VAR 0 7
11269: PUSH
11270: LD_INT 1
11272: ARRAY
11273: PUSH
11274: LD_INT 22
11276: EQUAL
11277: IFFALSE 11289
// begin control := control_remote ;
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_INT 2
11286: ST_TO_ADDR
// break ;
11287: GO 11291
// end ;
11289: GO 11262
11291: POP
11292: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11293: LD_VAR 0 1
11297: PPUSH
11298: LD_VAR 0 2
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_VAR 0 4
11312: PPUSH
11313: LD_VAR 0 5
11317: PPUSH
11318: CALL_OW 448
11322: IFFALSE 11357
// begin result := [ chassis , engine , control , weapon ] ;
11324: LD_ADDR_VAR 0 6
11328: PUSH
11329: LD_VAR 0 2
11333: PUSH
11334: LD_VAR 0 3
11338: PUSH
11339: LD_VAR 0 4
11343: PUSH
11344: LD_VAR 0 5
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: ST_TO_ADDR
// exit ;
11355: GO 11769
// end ; _chassis := AvailableChassisList ( factory ) ;
11357: LD_ADDR_VAR 0 9
11361: PUSH
11362: LD_VAR 0 1
11366: PPUSH
11367: CALL_OW 475
11371: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11372: LD_ADDR_VAR 0 11
11376: PUSH
11377: LD_VAR 0 1
11381: PPUSH
11382: CALL_OW 476
11386: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11387: LD_ADDR_VAR 0 12
11391: PUSH
11392: LD_VAR 0 1
11396: PPUSH
11397: CALL_OW 477
11401: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11402: LD_ADDR_VAR 0 10
11406: PUSH
11407: LD_VAR 0 1
11411: PPUSH
11412: CALL_OW 478
11416: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11417: LD_VAR 0 9
11421: NOT
11422: PUSH
11423: LD_VAR 0 11
11427: NOT
11428: OR
11429: PUSH
11430: LD_VAR 0 12
11434: NOT
11435: OR
11436: PUSH
11437: LD_VAR 0 10
11441: NOT
11442: OR
11443: IFFALSE 11478
// begin result := [ chassis , engine , control , weapon ] ;
11445: LD_ADDR_VAR 0 6
11449: PUSH
11450: LD_VAR 0 2
11454: PUSH
11455: LD_VAR 0 3
11459: PUSH
11460: LD_VAR 0 4
11464: PUSH
11465: LD_VAR 0 5
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: ST_TO_ADDR
// exit ;
11476: GO 11769
// end ; if not chassis in _chassis then
11478: LD_VAR 0 2
11482: PUSH
11483: LD_VAR 0 9
11487: IN
11488: NOT
11489: IFFALSE 11515
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11491: LD_ADDR_VAR 0 2
11495: PUSH
11496: LD_VAR 0 9
11500: PUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_VAR 0 9
11508: PPUSH
11509: CALL_OW 12
11513: ARRAY
11514: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11515: LD_VAR 0 2
11519: PPUSH
11520: LD_VAR 0 3
11524: PPUSH
11525: CALL 11774 0 2
11529: NOT
11530: IFFALSE 11589
// repeat engine := _engine [ 1 ] ;
11532: LD_ADDR_VAR 0 3
11536: PUSH
11537: LD_VAR 0 11
11541: PUSH
11542: LD_INT 1
11544: ARRAY
11545: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11546: LD_ADDR_VAR 0 11
11550: PUSH
11551: LD_VAR 0 11
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 3
11563: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11564: LD_VAR 0 2
11568: PPUSH
11569: LD_VAR 0 3
11573: PPUSH
11574: CALL 11774 0 2
11578: PUSH
11579: LD_VAR 0 11
11583: PUSH
11584: EMPTY
11585: EQUAL
11586: OR
11587: IFFALSE 11532
// if not control in _control then
11589: LD_VAR 0 4
11593: PUSH
11594: LD_VAR 0 12
11598: IN
11599: NOT
11600: IFFALSE 11626
// control := _control [ rand ( 1 , _control ) ] ;
11602: LD_ADDR_VAR 0 4
11606: PUSH
11607: LD_VAR 0 12
11611: PUSH
11612: LD_INT 1
11614: PPUSH
11615: LD_VAR 0 12
11619: PPUSH
11620: CALL_OW 12
11624: ARRAY
11625: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11626: LD_VAR 0 2
11630: PPUSH
11631: LD_VAR 0 5
11635: PPUSH
11636: CALL 11994 0 2
11640: NOT
11641: IFFALSE 11700
// repeat weapon := _weapon [ 1 ] ;
11643: LD_ADDR_VAR 0 5
11647: PUSH
11648: LD_VAR 0 10
11652: PUSH
11653: LD_INT 1
11655: ARRAY
11656: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11657: LD_ADDR_VAR 0 10
11661: PUSH
11662: LD_VAR 0 10
11666: PPUSH
11667: LD_INT 1
11669: PPUSH
11670: CALL_OW 3
11674: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11675: LD_VAR 0 2
11679: PPUSH
11680: LD_VAR 0 5
11684: PPUSH
11685: CALL 11994 0 2
11689: PUSH
11690: LD_VAR 0 10
11694: PUSH
11695: EMPTY
11696: EQUAL
11697: OR
11698: IFFALSE 11643
// result := [ ] ;
11700: LD_ADDR_VAR 0 6
11704: PUSH
11705: EMPTY
11706: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11707: LD_VAR 0 1
11711: PPUSH
11712: LD_VAR 0 2
11716: PPUSH
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_VAR 0 4
11726: PPUSH
11727: LD_VAR 0 5
11731: PPUSH
11732: CALL_OW 448
11736: IFFALSE 11769
// result := [ chassis , engine , control , weapon ] ;
11738: LD_ADDR_VAR 0 6
11742: PUSH
11743: LD_VAR 0 2
11747: PUSH
11748: LD_VAR 0 3
11752: PUSH
11753: LD_VAR 0 4
11757: PUSH
11758: LD_VAR 0 5
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: ST_TO_ADDR
// end ;
11769: LD_VAR 0 6
11773: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11774: LD_INT 0
11776: PPUSH
// if not chassis or not engine then
11777: LD_VAR 0 1
11781: NOT
11782: PUSH
11783: LD_VAR 0 2
11787: NOT
11788: OR
11789: IFFALSE 11793
// exit ;
11791: GO 11989
// case engine of engine_solar :
11793: LD_VAR 0 2
11797: PUSH
11798: LD_INT 2
11800: DOUBLE
11801: EQUAL
11802: IFTRUE 11806
11804: GO 11844
11806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11807: LD_ADDR_VAR 0 3
11811: PUSH
11812: LD_INT 11
11814: PUSH
11815: LD_INT 12
11817: PUSH
11818: LD_INT 13
11820: PUSH
11821: LD_INT 14
11823: PUSH
11824: LD_INT 1
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: LD_INT 3
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: ST_TO_ADDR
11842: GO 11973
11844: LD_INT 1
11846: DOUBLE
11847: EQUAL
11848: IFTRUE 11852
11850: GO 11914
11852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11853: LD_ADDR_VAR 0 3
11857: PUSH
11858: LD_INT 11
11860: PUSH
11861: LD_INT 12
11863: PUSH
11864: LD_INT 13
11866: PUSH
11867: LD_INT 14
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: LD_INT 4
11881: PUSH
11882: LD_INT 5
11884: PUSH
11885: LD_INT 21
11887: PUSH
11888: LD_INT 23
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_INT 24
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: ST_TO_ADDR
11912: GO 11973
11914: LD_INT 3
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 11972
11922: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11923: LD_ADDR_VAR 0 3
11927: PUSH
11928: LD_INT 13
11930: PUSH
11931: LD_INT 14
11933: PUSH
11934: LD_INT 2
11936: PUSH
11937: LD_INT 3
11939: PUSH
11940: LD_INT 4
11942: PUSH
11943: LD_INT 5
11945: PUSH
11946: LD_INT 21
11948: PUSH
11949: LD_INT 22
11951: PUSH
11952: LD_INT 23
11954: PUSH
11955: LD_INT 24
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: ST_TO_ADDR
11970: GO 11973
11972: POP
// result := ( chassis in result ) ;
11973: LD_ADDR_VAR 0 3
11977: PUSH
11978: LD_VAR 0 1
11982: PUSH
11983: LD_VAR 0 3
11987: IN
11988: ST_TO_ADDR
// end ;
11989: LD_VAR 0 3
11993: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11994: LD_INT 0
11996: PPUSH
// if not chassis or not weapon then
11997: LD_VAR 0 1
12001: NOT
12002: PUSH
12003: LD_VAR 0 2
12007: NOT
12008: OR
12009: IFFALSE 12013
// exit ;
12011: GO 13073
// case weapon of us_machine_gun :
12013: LD_VAR 0 2
12017: PUSH
12018: LD_INT 2
12020: DOUBLE
12021: EQUAL
12022: IFTRUE 12026
12024: GO 12056
12026: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12027: LD_ADDR_VAR 0 3
12031: PUSH
12032: LD_INT 1
12034: PUSH
12035: LD_INT 2
12037: PUSH
12038: LD_INT 3
12040: PUSH
12041: LD_INT 4
12043: PUSH
12044: LD_INT 5
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: ST_TO_ADDR
12054: GO 13057
12056: LD_INT 3
12058: DOUBLE
12059: EQUAL
12060: IFTRUE 12064
12062: GO 12094
12064: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12065: LD_ADDR_VAR 0 3
12069: PUSH
12070: LD_INT 1
12072: PUSH
12073: LD_INT 2
12075: PUSH
12076: LD_INT 3
12078: PUSH
12079: LD_INT 4
12081: PUSH
12082: LD_INT 5
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: ST_TO_ADDR
12092: GO 13057
12094: LD_INT 11
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 12132
12102: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12103: LD_ADDR_VAR 0 3
12107: PUSH
12108: LD_INT 1
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: LD_INT 4
12119: PUSH
12120: LD_INT 5
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: ST_TO_ADDR
12130: GO 13057
12132: LD_INT 4
12134: DOUBLE
12135: EQUAL
12136: IFTRUE 12140
12138: GO 12166
12140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_INT 2
12148: PUSH
12149: LD_INT 3
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 5
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: ST_TO_ADDR
12164: GO 13057
12166: LD_INT 5
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 12200
12174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: LD_INT 3
12185: PUSH
12186: LD_INT 4
12188: PUSH
12189: LD_INT 5
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: ST_TO_ADDR
12198: GO 13057
12200: LD_INT 9
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12234
12208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: LD_INT 3
12219: PUSH
12220: LD_INT 4
12222: PUSH
12223: LD_INT 5
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: ST_TO_ADDR
12232: GO 13057
12234: LD_INT 7
12236: DOUBLE
12237: EQUAL
12238: IFTRUE 12242
12240: GO 12268
12242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12243: LD_ADDR_VAR 0 3
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: LD_INT 4
12256: PUSH
12257: LD_INT 5
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: ST_TO_ADDR
12266: GO 13057
12268: LD_INT 12
12270: DOUBLE
12271: EQUAL
12272: IFTRUE 12276
12274: GO 12302
12276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12277: LD_ADDR_VAR 0 3
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: LD_INT 3
12287: PUSH
12288: LD_INT 4
12290: PUSH
12291: LD_INT 5
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: ST_TO_ADDR
12300: GO 13057
12302: LD_INT 13
12304: DOUBLE
12305: EQUAL
12306: IFTRUE 12310
12308: GO 12336
12310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12311: LD_ADDR_VAR 0 3
12315: PUSH
12316: LD_INT 2
12318: PUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 4
12324: PUSH
12325: LD_INT 5
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: ST_TO_ADDR
12334: GO 13057
12336: LD_INT 14
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12362
12344: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12345: LD_ADDR_VAR 0 3
12349: PUSH
12350: LD_INT 4
12352: PUSH
12353: LD_INT 5
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: ST_TO_ADDR
12360: GO 13057
12362: LD_INT 6
12364: DOUBLE
12365: EQUAL
12366: IFTRUE 12370
12368: GO 12388
12370: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12371: LD_ADDR_VAR 0 3
12375: PUSH
12376: LD_INT 4
12378: PUSH
12379: LD_INT 5
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: ST_TO_ADDR
12386: GO 13057
12388: LD_INT 10
12390: DOUBLE
12391: EQUAL
12392: IFTRUE 12396
12394: GO 12414
12396: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12397: LD_ADDR_VAR 0 3
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: LD_INT 5
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: ST_TO_ADDR
12412: GO 13057
12414: LD_INT 22
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12448
12422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12423: LD_ADDR_VAR 0 3
12427: PUSH
12428: LD_INT 11
12430: PUSH
12431: LD_INT 12
12433: PUSH
12434: LD_INT 13
12436: PUSH
12437: LD_INT 14
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: ST_TO_ADDR
12446: GO 13057
12448: LD_INT 23
12450: DOUBLE
12451: EQUAL
12452: IFTRUE 12456
12454: GO 12482
12456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12457: LD_ADDR_VAR 0 3
12461: PUSH
12462: LD_INT 11
12464: PUSH
12465: LD_INT 12
12467: PUSH
12468: LD_INT 13
12470: PUSH
12471: LD_INT 14
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: ST_TO_ADDR
12480: GO 13057
12482: LD_INT 24
12484: DOUBLE
12485: EQUAL
12486: IFTRUE 12490
12488: GO 12516
12490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12491: LD_ADDR_VAR 0 3
12495: PUSH
12496: LD_INT 11
12498: PUSH
12499: LD_INT 12
12501: PUSH
12502: LD_INT 13
12504: PUSH
12505: LD_INT 14
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: ST_TO_ADDR
12514: GO 13057
12516: LD_INT 30
12518: DOUBLE
12519: EQUAL
12520: IFTRUE 12524
12522: GO 12550
12524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12525: LD_ADDR_VAR 0 3
12529: PUSH
12530: LD_INT 11
12532: PUSH
12533: LD_INT 12
12535: PUSH
12536: LD_INT 13
12538: PUSH
12539: LD_INT 14
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: ST_TO_ADDR
12548: GO 13057
12550: LD_INT 25
12552: DOUBLE
12553: EQUAL
12554: IFTRUE 12558
12556: GO 12576
12558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: LD_INT 13
12566: PUSH
12567: LD_INT 14
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: ST_TO_ADDR
12574: GO 13057
12576: LD_INT 27
12578: DOUBLE
12579: EQUAL
12580: IFTRUE 12584
12582: GO 12602
12584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12585: LD_ADDR_VAR 0 3
12589: PUSH
12590: LD_INT 13
12592: PUSH
12593: LD_INT 14
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
12600: GO 13057
12602: LD_INT 92
12604: DOUBLE
12605: EQUAL
12606: IFTRUE 12610
12608: GO 12636
12610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12611: LD_ADDR_VAR 0 3
12615: PUSH
12616: LD_INT 11
12618: PUSH
12619: LD_INT 12
12621: PUSH
12622: LD_INT 13
12624: PUSH
12625: LD_INT 14
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: ST_TO_ADDR
12634: GO 13057
12636: LD_INT 28
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12662
12644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12645: LD_ADDR_VAR 0 3
12649: PUSH
12650: LD_INT 13
12652: PUSH
12653: LD_INT 14
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: ST_TO_ADDR
12660: GO 13057
12662: LD_INT 29
12664: DOUBLE
12665: EQUAL
12666: IFTRUE 12670
12668: GO 12688
12670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12671: LD_ADDR_VAR 0 3
12675: PUSH
12676: LD_INT 13
12678: PUSH
12679: LD_INT 14
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: ST_TO_ADDR
12686: GO 13057
12688: LD_INT 31
12690: DOUBLE
12691: EQUAL
12692: IFTRUE 12696
12694: GO 12714
12696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12697: LD_ADDR_VAR 0 3
12701: PUSH
12702: LD_INT 13
12704: PUSH
12705: LD_INT 14
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: ST_TO_ADDR
12712: GO 13057
12714: LD_INT 26
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12740
12722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12723: LD_ADDR_VAR 0 3
12727: PUSH
12728: LD_INT 13
12730: PUSH
12731: LD_INT 14
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: ST_TO_ADDR
12738: GO 13057
12740: LD_INT 42
12742: DOUBLE
12743: EQUAL
12744: IFTRUE 12748
12746: GO 12774
12748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12749: LD_ADDR_VAR 0 3
12753: PUSH
12754: LD_INT 21
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_INT 23
12762: PUSH
12763: LD_INT 24
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: ST_TO_ADDR
12772: GO 13057
12774: LD_INT 43
12776: DOUBLE
12777: EQUAL
12778: IFTRUE 12782
12780: GO 12808
12782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12783: LD_ADDR_VAR 0 3
12787: PUSH
12788: LD_INT 21
12790: PUSH
12791: LD_INT 22
12793: PUSH
12794: LD_INT 23
12796: PUSH
12797: LD_INT 24
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: ST_TO_ADDR
12806: GO 13057
12808: LD_INT 44
12810: DOUBLE
12811: EQUAL
12812: IFTRUE 12816
12814: GO 12842
12816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: LD_INT 21
12824: PUSH
12825: LD_INT 22
12827: PUSH
12828: LD_INT 23
12830: PUSH
12831: LD_INT 24
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: ST_TO_ADDR
12840: GO 13057
12842: LD_INT 45
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 12876
12850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12851: LD_ADDR_VAR 0 3
12855: PUSH
12856: LD_INT 21
12858: PUSH
12859: LD_INT 22
12861: PUSH
12862: LD_INT 23
12864: PUSH
12865: LD_INT 24
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: ST_TO_ADDR
12874: GO 13057
12876: LD_INT 49
12878: DOUBLE
12879: EQUAL
12880: IFTRUE 12884
12882: GO 12910
12884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12885: LD_ADDR_VAR 0 3
12889: PUSH
12890: LD_INT 21
12892: PUSH
12893: LD_INT 22
12895: PUSH
12896: LD_INT 23
12898: PUSH
12899: LD_INT 24
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: ST_TO_ADDR
12908: GO 13057
12910: LD_INT 51
12912: DOUBLE
12913: EQUAL
12914: IFTRUE 12918
12916: GO 12944
12918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12919: LD_ADDR_VAR 0 3
12923: PUSH
12924: LD_INT 21
12926: PUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 23
12932: PUSH
12933: LD_INT 24
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: ST_TO_ADDR
12942: GO 13057
12944: LD_INT 52
12946: DOUBLE
12947: EQUAL
12948: IFTRUE 12952
12950: GO 12978
12952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12953: LD_ADDR_VAR 0 3
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 22
12963: PUSH
12964: LD_INT 23
12966: PUSH
12967: LD_INT 24
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: ST_TO_ADDR
12976: GO 13057
12978: LD_INT 53
12980: DOUBLE
12981: EQUAL
12982: IFTRUE 12986
12984: GO 13004
12986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12987: LD_ADDR_VAR 0 3
12991: PUSH
12992: LD_INT 23
12994: PUSH
12995: LD_INT 24
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: ST_TO_ADDR
13002: GO 13057
13004: LD_INT 46
13006: DOUBLE
13007: EQUAL
13008: IFTRUE 13012
13010: GO 13030
13012: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13013: LD_ADDR_VAR 0 3
13017: PUSH
13018: LD_INT 23
13020: PUSH
13021: LD_INT 24
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: ST_TO_ADDR
13028: GO 13057
13030: LD_INT 47
13032: DOUBLE
13033: EQUAL
13034: IFTRUE 13038
13036: GO 13056
13038: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13039: LD_ADDR_VAR 0 3
13043: PUSH
13044: LD_INT 23
13046: PUSH
13047: LD_INT 24
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: ST_TO_ADDR
13054: GO 13057
13056: POP
// result := ( chassis in result ) ;
13057: LD_ADDR_VAR 0 3
13061: PUSH
13062: LD_VAR 0 1
13066: PUSH
13067: LD_VAR 0 3
13071: IN
13072: ST_TO_ADDR
// end ;
13073: LD_VAR 0 3
13077: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13078: LD_INT 0
13080: PPUSH
13081: PPUSH
13082: PPUSH
13083: PPUSH
13084: PPUSH
13085: PPUSH
13086: PPUSH
// result := array ;
13087: LD_ADDR_VAR 0 5
13091: PUSH
13092: LD_VAR 0 1
13096: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13097: LD_VAR 0 1
13101: NOT
13102: PUSH
13103: LD_VAR 0 2
13107: NOT
13108: OR
13109: PUSH
13110: LD_VAR 0 3
13114: NOT
13115: OR
13116: PUSH
13117: LD_VAR 0 2
13121: PUSH
13122: LD_VAR 0 1
13126: GREATER
13127: OR
13128: PUSH
13129: LD_VAR 0 3
13133: PUSH
13134: LD_VAR 0 1
13138: GREATER
13139: OR
13140: IFFALSE 13144
// exit ;
13142: GO 13440
// if direction then
13144: LD_VAR 0 4
13148: IFFALSE 13212
// begin d := 1 ;
13150: LD_ADDR_VAR 0 9
13154: PUSH
13155: LD_INT 1
13157: ST_TO_ADDR
// if i_from > i_to then
13158: LD_VAR 0 2
13162: PUSH
13163: LD_VAR 0 3
13167: GREATER
13168: IFFALSE 13194
// length := ( array - i_from ) + i_to else
13170: LD_ADDR_VAR 0 11
13174: PUSH
13175: LD_VAR 0 1
13179: PUSH
13180: LD_VAR 0 2
13184: MINUS
13185: PUSH
13186: LD_VAR 0 3
13190: PLUS
13191: ST_TO_ADDR
13192: GO 13210
// length := i_to - i_from ;
13194: LD_ADDR_VAR 0 11
13198: PUSH
13199: LD_VAR 0 3
13203: PUSH
13204: LD_VAR 0 2
13208: MINUS
13209: ST_TO_ADDR
// end else
13210: GO 13273
// begin d := - 1 ;
13212: LD_ADDR_VAR 0 9
13216: PUSH
13217: LD_INT 1
13219: NEG
13220: ST_TO_ADDR
// if i_from > i_to then
13221: LD_VAR 0 2
13225: PUSH
13226: LD_VAR 0 3
13230: GREATER
13231: IFFALSE 13251
// length := i_from - i_to else
13233: LD_ADDR_VAR 0 11
13237: PUSH
13238: LD_VAR 0 2
13242: PUSH
13243: LD_VAR 0 3
13247: MINUS
13248: ST_TO_ADDR
13249: GO 13273
// length := ( array - i_to ) + i_from ;
13251: LD_ADDR_VAR 0 11
13255: PUSH
13256: LD_VAR 0 1
13260: PUSH
13261: LD_VAR 0 3
13265: MINUS
13266: PUSH
13267: LD_VAR 0 2
13271: PLUS
13272: ST_TO_ADDR
// end ; if not length then
13273: LD_VAR 0 11
13277: NOT
13278: IFFALSE 13282
// exit ;
13280: GO 13440
// tmp := array ;
13282: LD_ADDR_VAR 0 10
13286: PUSH
13287: LD_VAR 0 1
13291: ST_TO_ADDR
// for i = 1 to length do
13292: LD_ADDR_VAR 0 6
13296: PUSH
13297: DOUBLE
13298: LD_INT 1
13300: DEC
13301: ST_TO_ADDR
13302: LD_VAR 0 11
13306: PUSH
13307: FOR_TO
13308: IFFALSE 13428
// begin for j = 1 to array do
13310: LD_ADDR_VAR 0 7
13314: PUSH
13315: DOUBLE
13316: LD_INT 1
13318: DEC
13319: ST_TO_ADDR
13320: LD_VAR 0 1
13324: PUSH
13325: FOR_TO
13326: IFFALSE 13414
// begin k := j + d ;
13328: LD_ADDR_VAR 0 8
13332: PUSH
13333: LD_VAR 0 7
13337: PUSH
13338: LD_VAR 0 9
13342: PLUS
13343: ST_TO_ADDR
// if k > array then
13344: LD_VAR 0 8
13348: PUSH
13349: LD_VAR 0 1
13353: GREATER
13354: IFFALSE 13364
// k := 1 ;
13356: LD_ADDR_VAR 0 8
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// if not k then
13364: LD_VAR 0 8
13368: NOT
13369: IFFALSE 13381
// k := array ;
13371: LD_ADDR_VAR 0 8
13375: PUSH
13376: LD_VAR 0 1
13380: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13381: LD_ADDR_VAR 0 10
13385: PUSH
13386: LD_VAR 0 10
13390: PPUSH
13391: LD_VAR 0 8
13395: PPUSH
13396: LD_VAR 0 1
13400: PUSH
13401: LD_VAR 0 7
13405: ARRAY
13406: PPUSH
13407: CALL_OW 1
13411: ST_TO_ADDR
// end ;
13412: GO 13325
13414: POP
13415: POP
// array := tmp ;
13416: LD_ADDR_VAR 0 1
13420: PUSH
13421: LD_VAR 0 10
13425: ST_TO_ADDR
// end ;
13426: GO 13307
13428: POP
13429: POP
// result := array ;
13430: LD_ADDR_VAR 0 5
13434: PUSH
13435: LD_VAR 0 1
13439: ST_TO_ADDR
// end ;
13440: LD_VAR 0 5
13444: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13445: LD_INT 0
13447: PPUSH
13448: PPUSH
// result := 0 ;
13449: LD_ADDR_VAR 0 3
13453: PUSH
13454: LD_INT 0
13456: ST_TO_ADDR
// if not array or not value in array then
13457: LD_VAR 0 1
13461: NOT
13462: PUSH
13463: LD_VAR 0 2
13467: PUSH
13468: LD_VAR 0 1
13472: IN
13473: NOT
13474: OR
13475: IFFALSE 13479
// exit ;
13477: GO 13533
// for i = 1 to array do
13479: LD_ADDR_VAR 0 4
13483: PUSH
13484: DOUBLE
13485: LD_INT 1
13487: DEC
13488: ST_TO_ADDR
13489: LD_VAR 0 1
13493: PUSH
13494: FOR_TO
13495: IFFALSE 13531
// if value = array [ i ] then
13497: LD_VAR 0 2
13501: PUSH
13502: LD_VAR 0 1
13506: PUSH
13507: LD_VAR 0 4
13511: ARRAY
13512: EQUAL
13513: IFFALSE 13529
// begin result := i ;
13515: LD_ADDR_VAR 0 3
13519: PUSH
13520: LD_VAR 0 4
13524: ST_TO_ADDR
// exit ;
13525: POP
13526: POP
13527: GO 13533
// end ;
13529: GO 13494
13531: POP
13532: POP
// end ;
13533: LD_VAR 0 3
13537: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13538: LD_INT 0
13540: PPUSH
// vc_chassis := chassis ;
13541: LD_ADDR_OWVAR 37
13545: PUSH
13546: LD_VAR 0 1
13550: ST_TO_ADDR
// vc_engine := engine ;
13551: LD_ADDR_OWVAR 39
13555: PUSH
13556: LD_VAR 0 2
13560: ST_TO_ADDR
// vc_control := control ;
13561: LD_ADDR_OWVAR 38
13565: PUSH
13566: LD_VAR 0 3
13570: ST_TO_ADDR
// vc_weapon := weapon ;
13571: LD_ADDR_OWVAR 40
13575: PUSH
13576: LD_VAR 0 4
13580: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13581: LD_ADDR_OWVAR 41
13585: PUSH
13586: LD_VAR 0 5
13590: ST_TO_ADDR
// end ;
13591: LD_VAR 0 6
13595: RET
// export function WantPlant ( unit ) ; var task ; begin
13596: LD_INT 0
13598: PPUSH
13599: PPUSH
// result := false ;
13600: LD_ADDR_VAR 0 2
13604: PUSH
13605: LD_INT 0
13607: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13608: LD_ADDR_VAR 0 3
13612: PUSH
13613: LD_VAR 0 1
13617: PPUSH
13618: CALL_OW 437
13622: ST_TO_ADDR
// if task then
13623: LD_VAR 0 3
13627: IFFALSE 13655
// if task [ 1 ] [ 1 ] = p then
13629: LD_VAR 0 3
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: PUSH
13642: LD_STRING p
13644: EQUAL
13645: IFFALSE 13655
// result := true ;
13647: LD_ADDR_VAR 0 2
13651: PUSH
13652: LD_INT 1
13654: ST_TO_ADDR
// end ;
13655: LD_VAR 0 2
13659: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13660: LD_INT 0
13662: PPUSH
13663: PPUSH
13664: PPUSH
13665: PPUSH
// if pos < 1 then
13666: LD_VAR 0 2
13670: PUSH
13671: LD_INT 1
13673: LESS
13674: IFFALSE 13678
// exit ;
13676: GO 13981
// if pos = 1 then
13678: LD_VAR 0 2
13682: PUSH
13683: LD_INT 1
13685: EQUAL
13686: IFFALSE 13719
// result := Replace ( arr , pos [ 1 ] , value ) else
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: LD_VAR 0 1
13697: PPUSH
13698: LD_VAR 0 2
13702: PUSH
13703: LD_INT 1
13705: ARRAY
13706: PPUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: CALL_OW 1
13716: ST_TO_ADDR
13717: GO 13981
// begin tmp := arr ;
13719: LD_ADDR_VAR 0 6
13723: PUSH
13724: LD_VAR 0 1
13728: ST_TO_ADDR
// s_arr := [ tmp ] ;
13729: LD_ADDR_VAR 0 7
13733: PUSH
13734: LD_VAR 0 6
13738: PUSH
13739: EMPTY
13740: LIST
13741: ST_TO_ADDR
// for i = 1 to pos - 1 do
13742: LD_ADDR_VAR 0 5
13746: PUSH
13747: DOUBLE
13748: LD_INT 1
13750: DEC
13751: ST_TO_ADDR
13752: LD_VAR 0 2
13756: PUSH
13757: LD_INT 1
13759: MINUS
13760: PUSH
13761: FOR_TO
13762: IFFALSE 13807
// begin tmp := tmp [ pos [ i ] ] ;
13764: LD_ADDR_VAR 0 6
13768: PUSH
13769: LD_VAR 0 6
13773: PUSH
13774: LD_VAR 0 2
13778: PUSH
13779: LD_VAR 0 5
13783: ARRAY
13784: ARRAY
13785: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13786: LD_ADDR_VAR 0 7
13790: PUSH
13791: LD_VAR 0 7
13795: PUSH
13796: LD_VAR 0 6
13800: PUSH
13801: EMPTY
13802: LIST
13803: ADD
13804: ST_TO_ADDR
// end ;
13805: GO 13761
13807: POP
13808: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13809: LD_ADDR_VAR 0 6
13813: PUSH
13814: LD_VAR 0 6
13818: PPUSH
13819: LD_VAR 0 2
13823: PUSH
13824: LD_VAR 0 2
13828: ARRAY
13829: PPUSH
13830: LD_VAR 0 3
13834: PPUSH
13835: CALL_OW 1
13839: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13840: LD_ADDR_VAR 0 7
13844: PUSH
13845: LD_VAR 0 7
13849: PPUSH
13850: LD_VAR 0 7
13854: PPUSH
13855: LD_VAR 0 6
13859: PPUSH
13860: CALL_OW 1
13864: ST_TO_ADDR
// for i = s_arr downto 2 do
13865: LD_ADDR_VAR 0 5
13869: PUSH
13870: DOUBLE
13871: LD_VAR 0 7
13875: INC
13876: ST_TO_ADDR
13877: LD_INT 2
13879: PUSH
13880: FOR_DOWNTO
13881: IFFALSE 13965
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13883: LD_ADDR_VAR 0 6
13887: PUSH
13888: LD_VAR 0 7
13892: PUSH
13893: LD_VAR 0 5
13897: PUSH
13898: LD_INT 1
13900: MINUS
13901: ARRAY
13902: PPUSH
13903: LD_VAR 0 2
13907: PUSH
13908: LD_VAR 0 5
13912: PUSH
13913: LD_INT 1
13915: MINUS
13916: ARRAY
13917: PPUSH
13918: LD_VAR 0 7
13922: PUSH
13923: LD_VAR 0 5
13927: ARRAY
13928: PPUSH
13929: CALL_OW 1
13933: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13934: LD_ADDR_VAR 0 7
13938: PUSH
13939: LD_VAR 0 7
13943: PPUSH
13944: LD_VAR 0 5
13948: PUSH
13949: LD_INT 1
13951: MINUS
13952: PPUSH
13953: LD_VAR 0 6
13957: PPUSH
13958: CALL_OW 1
13962: ST_TO_ADDR
// end ;
13963: GO 13880
13965: POP
13966: POP
// result := s_arr [ 1 ] ;
13967: LD_ADDR_VAR 0 4
13971: PUSH
13972: LD_VAR 0 7
13976: PUSH
13977: LD_INT 1
13979: ARRAY
13980: ST_TO_ADDR
// end ; end ;
13981: LD_VAR 0 4
13985: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
// if not list then
13990: LD_VAR 0 1
13994: NOT
13995: IFFALSE 13999
// exit ;
13997: GO 14090
// i := list [ pos1 ] ;
13999: LD_ADDR_VAR 0 5
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_VAR 0 2
14013: ARRAY
14014: ST_TO_ADDR
// if not i then
14015: LD_VAR 0 5
14019: NOT
14020: IFFALSE 14024
// exit ;
14022: GO 14090
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14024: LD_ADDR_VAR 0 1
14028: PUSH
14029: LD_VAR 0 1
14033: PPUSH
14034: LD_VAR 0 2
14038: PPUSH
14039: LD_VAR 0 1
14043: PUSH
14044: LD_VAR 0 3
14048: ARRAY
14049: PPUSH
14050: CALL_OW 1
14054: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14055: LD_ADDR_VAR 0 1
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_VAR 0 3
14069: PPUSH
14070: LD_VAR 0 5
14074: PPUSH
14075: CALL_OW 1
14079: ST_TO_ADDR
// result := list ;
14080: LD_ADDR_VAR 0 4
14084: PUSH
14085: LD_VAR 0 1
14089: ST_TO_ADDR
// end ;
14090: LD_VAR 0 4
14094: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14095: LD_INT 0
14097: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14098: LD_ADDR_VAR 0 5
14102: PUSH
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 250
14112: PPUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 251
14122: PPUSH
14123: LD_VAR 0 2
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_VAR 0 4
14137: PPUSH
14138: CALL 14516 0 5
14142: ST_TO_ADDR
// end ;
14143: LD_VAR 0 5
14147: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14148: LD_INT 0
14150: PPUSH
14151: PPUSH
14152: PPUSH
14153: PPUSH
// if not list or not unit then
14154: LD_VAR 0 2
14158: NOT
14159: PUSH
14160: LD_VAR 0 1
14164: NOT
14165: OR
14166: IFFALSE 14170
// exit ;
14168: GO 14511
// result := [ ] ;
14170: LD_ADDR_VAR 0 5
14174: PUSH
14175: EMPTY
14176: ST_TO_ADDR
// for i in list do
14177: LD_ADDR_VAR 0 6
14181: PUSH
14182: LD_VAR 0 2
14186: PUSH
14187: FOR_IN
14188: IFFALSE 14406
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14190: LD_ADDR_VAR 0 8
14194: PUSH
14195: LD_VAR 0 1
14199: PPUSH
14200: LD_VAR 0 6
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: PPUSH
14209: LD_VAR 0 6
14213: PUSH
14214: LD_INT 2
14216: ARRAY
14217: PPUSH
14218: CALL_OW 297
14222: ST_TO_ADDR
// if not Count ( result ) then
14223: LD_VAR 0 5
14227: PPUSH
14228: CALL 10800 0 1
14232: NOT
14233: IFFALSE 14266
// begin result := Join ( result , [ i , tmp ] ) ;
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: LD_VAR 0 5
14244: PPUSH
14245: LD_VAR 0 6
14249: PUSH
14250: LD_VAR 0 8
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PPUSH
14259: CALL 46389 0 2
14263: ST_TO_ADDR
// continue ;
14264: GO 14187
// end ; if result [ result ] [ 2 ] <= tmp then
14266: LD_VAR 0 5
14270: PUSH
14271: LD_VAR 0 5
14275: ARRAY
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PUSH
14281: LD_VAR 0 8
14285: LESSEQUAL
14286: IFFALSE 14319
// result := Join ( result , [ i , tmp ] ) else
14288: LD_ADDR_VAR 0 5
14292: PUSH
14293: LD_VAR 0 5
14297: PPUSH
14298: LD_VAR 0 6
14302: PUSH
14303: LD_VAR 0 8
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL 46389 0 2
14316: ST_TO_ADDR
14317: GO 14404
// begin for j := 1 to Count ( result ) do
14319: LD_ADDR_VAR 0 7
14323: PUSH
14324: DOUBLE
14325: LD_INT 1
14327: DEC
14328: ST_TO_ADDR
14329: LD_VAR 0 5
14333: PPUSH
14334: CALL 10800 0 1
14338: PUSH
14339: FOR_TO
14340: IFFALSE 14402
// begin if tmp < result [ j ] [ 2 ] then
14342: LD_VAR 0 8
14346: PUSH
14347: LD_VAR 0 5
14351: PUSH
14352: LD_VAR 0 7
14356: ARRAY
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: LESS
14362: IFFALSE 14400
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14364: LD_ADDR_VAR 0 5
14368: PUSH
14369: LD_VAR 0 5
14373: PPUSH
14374: LD_VAR 0 7
14378: PPUSH
14379: LD_VAR 0 6
14383: PUSH
14384: LD_VAR 0 8
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 2
14397: ST_TO_ADDR
// break ;
14398: GO 14402
// end ; end ;
14400: GO 14339
14402: POP
14403: POP
// end ; end ;
14404: GO 14187
14406: POP
14407: POP
// if result and not asc then
14408: LD_VAR 0 5
14412: PUSH
14413: LD_VAR 0 3
14417: NOT
14418: AND
14419: IFFALSE 14436
// result := ReverseArray ( result ) ;
14421: LD_ADDR_VAR 0 5
14425: PUSH
14426: LD_VAR 0 5
14430: PPUSH
14431: CALL 41676 0 1
14435: ST_TO_ADDR
// tmp := [ ] ;
14436: LD_ADDR_VAR 0 8
14440: PUSH
14441: EMPTY
14442: ST_TO_ADDR
// if mode then
14443: LD_VAR 0 4
14447: IFFALSE 14511
// begin for i := 1 to result do
14449: LD_ADDR_VAR 0 6
14453: PUSH
14454: DOUBLE
14455: LD_INT 1
14457: DEC
14458: ST_TO_ADDR
14459: LD_VAR 0 5
14463: PUSH
14464: FOR_TO
14465: IFFALSE 14499
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14467: LD_ADDR_VAR 0 8
14471: PUSH
14472: LD_VAR 0 8
14476: PPUSH
14477: LD_VAR 0 5
14481: PUSH
14482: LD_VAR 0 6
14486: ARRAY
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: CALL 46389 0 2
14496: ST_TO_ADDR
14497: GO 14464
14499: POP
14500: POP
// result := tmp ;
14501: LD_ADDR_VAR 0 5
14505: PUSH
14506: LD_VAR 0 8
14510: ST_TO_ADDR
// end ; end ;
14511: LD_VAR 0 5
14515: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14516: LD_INT 0
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
// if not list then
14522: LD_VAR 0 3
14526: NOT
14527: IFFALSE 14531
// exit ;
14529: GO 14919
// result := [ ] ;
14531: LD_ADDR_VAR 0 6
14535: PUSH
14536: EMPTY
14537: ST_TO_ADDR
// for i in list do
14538: LD_ADDR_VAR 0 7
14542: PUSH
14543: LD_VAR 0 3
14547: PUSH
14548: FOR_IN
14549: IFFALSE 14751
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14551: LD_ADDR_VAR 0 9
14555: PUSH
14556: LD_VAR 0 7
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: LD_VAR 0 2
14570: PPUSH
14571: CALL_OW 297
14575: ST_TO_ADDR
// if not result then
14576: LD_VAR 0 6
14580: NOT
14581: IFFALSE 14607
// result := [ [ i , tmp ] ] else
14583: LD_ADDR_VAR 0 6
14587: PUSH
14588: LD_VAR 0 7
14592: PUSH
14593: LD_VAR 0 9
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: ST_TO_ADDR
14605: GO 14749
// begin if result [ result ] [ 2 ] < tmp then
14607: LD_VAR 0 6
14611: PUSH
14612: LD_VAR 0 6
14616: ARRAY
14617: PUSH
14618: LD_INT 2
14620: ARRAY
14621: PUSH
14622: LD_VAR 0 9
14626: LESS
14627: IFFALSE 14669
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14629: LD_ADDR_VAR 0 6
14633: PUSH
14634: LD_VAR 0 6
14638: PPUSH
14639: LD_VAR 0 6
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: PPUSH
14648: LD_VAR 0 7
14652: PUSH
14653: LD_VAR 0 9
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PPUSH
14662: CALL_OW 2
14666: ST_TO_ADDR
14667: GO 14749
// for j = 1 to result do
14669: LD_ADDR_VAR 0 8
14673: PUSH
14674: DOUBLE
14675: LD_INT 1
14677: DEC
14678: ST_TO_ADDR
14679: LD_VAR 0 6
14683: PUSH
14684: FOR_TO
14685: IFFALSE 14747
// begin if tmp < result [ j ] [ 2 ] then
14687: LD_VAR 0 9
14691: PUSH
14692: LD_VAR 0 6
14696: PUSH
14697: LD_VAR 0 8
14701: ARRAY
14702: PUSH
14703: LD_INT 2
14705: ARRAY
14706: LESS
14707: IFFALSE 14745
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14709: LD_ADDR_VAR 0 6
14713: PUSH
14714: LD_VAR 0 6
14718: PPUSH
14719: LD_VAR 0 8
14723: PPUSH
14724: LD_VAR 0 7
14728: PUSH
14729: LD_VAR 0 9
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 2
14742: ST_TO_ADDR
// break ;
14743: GO 14747
// end ; end ;
14745: GO 14684
14747: POP
14748: POP
// end ; end ;
14749: GO 14548
14751: POP
14752: POP
// if result and not asc then
14753: LD_VAR 0 6
14757: PUSH
14758: LD_VAR 0 4
14762: NOT
14763: AND
14764: IFFALSE 14839
// begin tmp := result ;
14766: LD_ADDR_VAR 0 9
14770: PUSH
14771: LD_VAR 0 6
14775: ST_TO_ADDR
// for i = tmp downto 1 do
14776: LD_ADDR_VAR 0 7
14780: PUSH
14781: DOUBLE
14782: LD_VAR 0 9
14786: INC
14787: ST_TO_ADDR
14788: LD_INT 1
14790: PUSH
14791: FOR_DOWNTO
14792: IFFALSE 14837
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14794: LD_ADDR_VAR 0 6
14798: PUSH
14799: LD_VAR 0 6
14803: PPUSH
14804: LD_VAR 0 9
14808: PUSH
14809: LD_VAR 0 7
14813: MINUS
14814: PUSH
14815: LD_INT 1
14817: PLUS
14818: PPUSH
14819: LD_VAR 0 9
14823: PUSH
14824: LD_VAR 0 7
14828: ARRAY
14829: PPUSH
14830: CALL_OW 1
14834: ST_TO_ADDR
14835: GO 14791
14837: POP
14838: POP
// end ; tmp := [ ] ;
14839: LD_ADDR_VAR 0 9
14843: PUSH
14844: EMPTY
14845: ST_TO_ADDR
// if mode then
14846: LD_VAR 0 5
14850: IFFALSE 14919
// begin for i = 1 to result do
14852: LD_ADDR_VAR 0 7
14856: PUSH
14857: DOUBLE
14858: LD_INT 1
14860: DEC
14861: ST_TO_ADDR
14862: LD_VAR 0 6
14866: PUSH
14867: FOR_TO
14868: IFFALSE 14907
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14870: LD_ADDR_VAR 0 9
14874: PUSH
14875: LD_VAR 0 9
14879: PPUSH
14880: LD_VAR 0 7
14884: PPUSH
14885: LD_VAR 0 6
14889: PUSH
14890: LD_VAR 0 7
14894: ARRAY
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 1
14904: ST_TO_ADDR
14905: GO 14867
14907: POP
14908: POP
// result := tmp ;
14909: LD_ADDR_VAR 0 6
14913: PUSH
14914: LD_VAR 0 9
14918: ST_TO_ADDR
// end ; end ;
14919: LD_VAR 0 6
14923: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14924: LD_INT 0
14926: PPUSH
14927: PPUSH
14928: PPUSH
14929: PPUSH
14930: PPUSH
14931: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14932: LD_ADDR_VAR 0 5
14936: PUSH
14937: LD_INT 0
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: LD_INT 0
14945: PUSH
14946: EMPTY
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: ST_TO_ADDR
// if not x or not y then
14954: LD_VAR 0 2
14958: NOT
14959: PUSH
14960: LD_VAR 0 3
14964: NOT
14965: OR
14966: IFFALSE 14970
// exit ;
14968: GO 16620
// if not range then
14970: LD_VAR 0 4
14974: NOT
14975: IFFALSE 14985
// range := 10 ;
14977: LD_ADDR_VAR 0 4
14981: PUSH
14982: LD_INT 10
14984: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14985: LD_ADDR_VAR 0 8
14989: PUSH
14990: LD_INT 81
14992: PUSH
14993: LD_VAR 0 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 92
15004: PUSH
15005: LD_VAR 0 2
15009: PUSH
15010: LD_VAR 0 3
15014: PUSH
15015: LD_VAR 0 4
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 3
15028: PUSH
15029: LD_INT 21
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: ST_TO_ADDR
// if not tmp then
15053: LD_VAR 0 8
15057: NOT
15058: IFFALSE 15062
// exit ;
15060: GO 16620
// for i in tmp do
15062: LD_ADDR_VAR 0 6
15066: PUSH
15067: LD_VAR 0 8
15071: PUSH
15072: FOR_IN
15073: IFFALSE 16595
// begin points := [ 0 , 0 , 0 ] ;
15075: LD_ADDR_VAR 0 9
15079: PUSH
15080: LD_INT 0
15082: PUSH
15083: LD_INT 0
15085: PUSH
15086: LD_INT 0
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: ST_TO_ADDR
// bpoints := 1 ;
15094: LD_ADDR_VAR 0 10
15098: PUSH
15099: LD_INT 1
15101: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15102: LD_VAR 0 6
15106: PPUSH
15107: CALL_OW 247
15111: PUSH
15112: LD_INT 1
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15698
15120: POP
// begin if GetClass ( i ) = 1 then
15121: LD_VAR 0 6
15125: PPUSH
15126: CALL_OW 257
15130: PUSH
15131: LD_INT 1
15133: EQUAL
15134: IFFALSE 15155
// points := [ 10 , 5 , 3 ] ;
15136: LD_ADDR_VAR 0 9
15140: PUSH
15141: LD_INT 10
15143: PUSH
15144: LD_INT 5
15146: PUSH
15147: LD_INT 3
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15155: LD_VAR 0 6
15159: PPUSH
15160: CALL_OW 257
15164: PUSH
15165: LD_INT 2
15167: PUSH
15168: LD_INT 3
15170: PUSH
15171: LD_INT 4
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: IN
15179: IFFALSE 15200
// points := [ 3 , 2 , 1 ] ;
15181: LD_ADDR_VAR 0 9
15185: PUSH
15186: LD_INT 3
15188: PUSH
15189: LD_INT 2
15191: PUSH
15192: LD_INT 1
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15200: LD_VAR 0 6
15204: PPUSH
15205: CALL_OW 257
15209: PUSH
15210: LD_INT 5
15212: EQUAL
15213: IFFALSE 15234
// points := [ 130 , 5 , 2 ] ;
15215: LD_ADDR_VAR 0 9
15219: PUSH
15220: LD_INT 130
15222: PUSH
15223: LD_INT 5
15225: PUSH
15226: LD_INT 2
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15234: LD_VAR 0 6
15238: PPUSH
15239: CALL_OW 257
15243: PUSH
15244: LD_INT 8
15246: EQUAL
15247: IFFALSE 15268
// points := [ 35 , 35 , 30 ] ;
15249: LD_ADDR_VAR 0 9
15253: PUSH
15254: LD_INT 35
15256: PUSH
15257: LD_INT 35
15259: PUSH
15260: LD_INT 30
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15268: LD_VAR 0 6
15272: PPUSH
15273: CALL_OW 257
15277: PUSH
15278: LD_INT 9
15280: EQUAL
15281: IFFALSE 15302
// points := [ 20 , 55 , 40 ] ;
15283: LD_ADDR_VAR 0 9
15287: PUSH
15288: LD_INT 20
15290: PUSH
15291: LD_INT 55
15293: PUSH
15294: LD_INT 40
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: LIST
15301: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15302: LD_VAR 0 6
15306: PPUSH
15307: CALL_OW 257
15311: PUSH
15312: LD_INT 12
15314: PUSH
15315: LD_INT 16
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: IN
15322: IFFALSE 15343
// points := [ 5 , 3 , 2 ] ;
15324: LD_ADDR_VAR 0 9
15328: PUSH
15329: LD_INT 5
15331: PUSH
15332: LD_INT 3
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15343: LD_VAR 0 6
15347: PPUSH
15348: CALL_OW 257
15352: PUSH
15353: LD_INT 17
15355: EQUAL
15356: IFFALSE 15377
// points := [ 100 , 50 , 75 ] ;
15358: LD_ADDR_VAR 0 9
15362: PUSH
15363: LD_INT 100
15365: PUSH
15366: LD_INT 50
15368: PUSH
15369: LD_INT 75
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15377: LD_VAR 0 6
15381: PPUSH
15382: CALL_OW 257
15386: PUSH
15387: LD_INT 15
15389: EQUAL
15390: IFFALSE 15411
// points := [ 10 , 5 , 3 ] ;
15392: LD_ADDR_VAR 0 9
15396: PUSH
15397: LD_INT 10
15399: PUSH
15400: LD_INT 5
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15411: LD_VAR 0 6
15415: PPUSH
15416: CALL_OW 257
15420: PUSH
15421: LD_INT 14
15423: EQUAL
15424: IFFALSE 15445
// points := [ 10 , 0 , 0 ] ;
15426: LD_ADDR_VAR 0 9
15430: PUSH
15431: LD_INT 10
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15445: LD_VAR 0 6
15449: PPUSH
15450: CALL_OW 257
15454: PUSH
15455: LD_INT 11
15457: EQUAL
15458: IFFALSE 15479
// points := [ 30 , 10 , 5 ] ;
15460: LD_ADDR_VAR 0 9
15464: PUSH
15465: LD_INT 30
15467: PUSH
15468: LD_INT 10
15470: PUSH
15471: LD_INT 5
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_INT 5
15486: PPUSH
15487: CALL_OW 321
15491: PUSH
15492: LD_INT 2
15494: EQUAL
15495: IFFALSE 15512
// bpoints := bpoints * 1.8 ;
15497: LD_ADDR_VAR 0 10
15501: PUSH
15502: LD_VAR 0 10
15506: PUSH
15507: LD_REAL  1.80000000000000E+0000
15510: MUL
15511: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15512: LD_VAR 0 6
15516: PPUSH
15517: CALL_OW 257
15521: PUSH
15522: LD_INT 1
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: LD_INT 4
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: IN
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: LD_INT 51
15548: PPUSH
15549: CALL_OW 321
15553: PUSH
15554: LD_INT 2
15556: EQUAL
15557: AND
15558: IFFALSE 15575
// bpoints := bpoints * 1.2 ;
15560: LD_ADDR_VAR 0 10
15564: PUSH
15565: LD_VAR 0 10
15569: PUSH
15570: LD_REAL  1.20000000000000E+0000
15573: MUL
15574: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15575: LD_VAR 0 6
15579: PPUSH
15580: CALL_OW 257
15584: PUSH
15585: LD_INT 5
15587: PUSH
15588: LD_INT 7
15590: PUSH
15591: LD_INT 9
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: IN
15599: PUSH
15600: LD_VAR 0 1
15604: PPUSH
15605: LD_INT 52
15607: PPUSH
15608: CALL_OW 321
15612: PUSH
15613: LD_INT 2
15615: EQUAL
15616: AND
15617: IFFALSE 15634
// bpoints := bpoints * 1.5 ;
15619: LD_ADDR_VAR 0 10
15623: PUSH
15624: LD_VAR 0 10
15628: PUSH
15629: LD_REAL  1.50000000000000E+0000
15632: MUL
15633: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15634: LD_VAR 0 1
15638: PPUSH
15639: LD_INT 66
15641: PPUSH
15642: CALL_OW 321
15646: PUSH
15647: LD_INT 2
15649: EQUAL
15650: IFFALSE 15667
// bpoints := bpoints * 1.1 ;
15652: LD_ADDR_VAR 0 10
15656: PUSH
15657: LD_VAR 0 10
15661: PUSH
15662: LD_REAL  1.10000000000000E+0000
15665: MUL
15666: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15667: LD_ADDR_VAR 0 10
15671: PUSH
15672: LD_VAR 0 10
15676: PUSH
15677: LD_VAR 0 6
15681: PPUSH
15682: LD_INT 1
15684: PPUSH
15685: CALL_OW 259
15689: PUSH
15690: LD_REAL  1.15000000000000E+0000
15693: MUL
15694: MUL
15695: ST_TO_ADDR
// end ; unit_vehicle :
15696: GO 16524
15698: LD_INT 2
15700: DOUBLE
15701: EQUAL
15702: IFTRUE 15706
15704: GO 16512
15706: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15707: LD_VAR 0 6
15711: PPUSH
15712: CALL_OW 264
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: LD_INT 42
15722: PUSH
15723: LD_INT 24
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: IN
15731: IFFALSE 15752
// points := [ 25 , 5 , 3 ] ;
15733: LD_ADDR_VAR 0 9
15737: PUSH
15738: LD_INT 25
15740: PUSH
15741: LD_INT 5
15743: PUSH
15744: LD_INT 3
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15752: LD_VAR 0 6
15756: PPUSH
15757: CALL_OW 264
15761: PUSH
15762: LD_INT 4
15764: PUSH
15765: LD_INT 43
15767: PUSH
15768: LD_INT 25
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: IN
15776: IFFALSE 15797
// points := [ 40 , 15 , 5 ] ;
15778: LD_ADDR_VAR 0 9
15782: PUSH
15783: LD_INT 40
15785: PUSH
15786: LD_INT 15
15788: PUSH
15789: LD_INT 5
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15797: LD_VAR 0 6
15801: PPUSH
15802: CALL_OW 264
15806: PUSH
15807: LD_INT 3
15809: PUSH
15810: LD_INT 23
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: IN
15817: IFFALSE 15838
// points := [ 7 , 25 , 8 ] ;
15819: LD_ADDR_VAR 0 9
15823: PUSH
15824: LD_INT 7
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 8
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: LIST
15837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15838: LD_VAR 0 6
15842: PPUSH
15843: CALL_OW 264
15847: PUSH
15848: LD_INT 5
15850: PUSH
15851: LD_INT 27
15853: PUSH
15854: LD_INT 44
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: LIST
15861: IN
15862: IFFALSE 15883
// points := [ 14 , 50 , 16 ] ;
15864: LD_ADDR_VAR 0 9
15868: PUSH
15869: LD_INT 14
15871: PUSH
15872: LD_INT 50
15874: PUSH
15875: LD_INT 16
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15883: LD_VAR 0 6
15887: PPUSH
15888: CALL_OW 264
15892: PUSH
15893: LD_INT 6
15895: PUSH
15896: LD_INT 46
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: IN
15903: IFFALSE 15924
// points := [ 32 , 120 , 70 ] ;
15905: LD_ADDR_VAR 0 9
15909: PUSH
15910: LD_INT 32
15912: PUSH
15913: LD_INT 120
15915: PUSH
15916: LD_INT 70
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: LIST
15923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15924: LD_VAR 0 6
15928: PPUSH
15929: CALL_OW 264
15933: PUSH
15934: LD_INT 7
15936: PUSH
15937: LD_INT 28
15939: PUSH
15940: LD_INT 45
15942: PUSH
15943: LD_INT 92
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: IN
15952: IFFALSE 15973
// points := [ 35 , 20 , 45 ] ;
15954: LD_ADDR_VAR 0 9
15958: PUSH
15959: LD_INT 35
15961: PUSH
15962: LD_INT 20
15964: PUSH
15965: LD_INT 45
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15973: LD_VAR 0 6
15977: PPUSH
15978: CALL_OW 264
15982: PUSH
15983: LD_INT 47
15985: PUSH
15986: EMPTY
15987: LIST
15988: IN
15989: IFFALSE 16010
// points := [ 67 , 45 , 75 ] ;
15991: LD_ADDR_VAR 0 9
15995: PUSH
15996: LD_INT 67
15998: PUSH
15999: LD_INT 45
16001: PUSH
16002: LD_INT 75
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16010: LD_VAR 0 6
16014: PPUSH
16015: CALL_OW 264
16019: PUSH
16020: LD_INT 26
16022: PUSH
16023: EMPTY
16024: LIST
16025: IN
16026: IFFALSE 16047
// points := [ 120 , 30 , 80 ] ;
16028: LD_ADDR_VAR 0 9
16032: PUSH
16033: LD_INT 120
16035: PUSH
16036: LD_INT 30
16038: PUSH
16039: LD_INT 80
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16047: LD_VAR 0 6
16051: PPUSH
16052: CALL_OW 264
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: EMPTY
16061: LIST
16062: IN
16063: IFFALSE 16084
// points := [ 40 , 1 , 1 ] ;
16065: LD_ADDR_VAR 0 9
16069: PUSH
16070: LD_INT 40
16072: PUSH
16073: LD_INT 1
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16084: LD_VAR 0 6
16088: PPUSH
16089: CALL_OW 264
16093: PUSH
16094: LD_INT 29
16096: PUSH
16097: EMPTY
16098: LIST
16099: IN
16100: IFFALSE 16121
// points := [ 70 , 200 , 400 ] ;
16102: LD_ADDR_VAR 0 9
16106: PUSH
16107: LD_INT 70
16109: PUSH
16110: LD_INT 200
16112: PUSH
16113: LD_INT 400
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16121: LD_VAR 0 6
16125: PPUSH
16126: CALL_OW 264
16130: PUSH
16131: LD_INT 14
16133: PUSH
16134: LD_INT 53
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: IN
16141: IFFALSE 16162
// points := [ 40 , 10 , 20 ] ;
16143: LD_ADDR_VAR 0 9
16147: PUSH
16148: LD_INT 40
16150: PUSH
16151: LD_INT 10
16153: PUSH
16154: LD_INT 20
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16162: LD_VAR 0 6
16166: PPUSH
16167: CALL_OW 264
16171: PUSH
16172: LD_INT 9
16174: PUSH
16175: EMPTY
16176: LIST
16177: IN
16178: IFFALSE 16199
// points := [ 5 , 70 , 20 ] ;
16180: LD_ADDR_VAR 0 9
16184: PUSH
16185: LD_INT 5
16187: PUSH
16188: LD_INT 70
16190: PUSH
16191: LD_INT 20
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16199: LD_VAR 0 6
16203: PPUSH
16204: CALL_OW 264
16208: PUSH
16209: LD_INT 10
16211: PUSH
16212: EMPTY
16213: LIST
16214: IN
16215: IFFALSE 16236
// points := [ 35 , 110 , 70 ] ;
16217: LD_ADDR_VAR 0 9
16221: PUSH
16222: LD_INT 35
16224: PUSH
16225: LD_INT 110
16227: PUSH
16228: LD_INT 70
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16236: LD_VAR 0 6
16240: PPUSH
16241: CALL_OW 265
16245: PUSH
16246: LD_INT 25
16248: EQUAL
16249: IFFALSE 16270
// points := [ 80 , 65 , 100 ] ;
16251: LD_ADDR_VAR 0 9
16255: PUSH
16256: LD_INT 80
16258: PUSH
16259: LD_INT 65
16261: PUSH
16262: LD_INT 100
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: LIST
16269: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16270: LD_VAR 0 6
16274: PPUSH
16275: CALL_OW 263
16279: PUSH
16280: LD_INT 1
16282: EQUAL
16283: IFFALSE 16318
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16285: LD_ADDR_VAR 0 10
16289: PUSH
16290: LD_VAR 0 10
16294: PUSH
16295: LD_VAR 0 6
16299: PPUSH
16300: CALL_OW 311
16304: PPUSH
16305: LD_INT 3
16307: PPUSH
16308: CALL_OW 259
16312: PUSH
16313: LD_INT 4
16315: MUL
16316: MUL
16317: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16318: LD_VAR 0 6
16322: PPUSH
16323: CALL_OW 263
16327: PUSH
16328: LD_INT 2
16330: EQUAL
16331: IFFALSE 16382
// begin j := IsControledBy ( i ) ;
16333: LD_ADDR_VAR 0 7
16337: PUSH
16338: LD_VAR 0 6
16342: PPUSH
16343: CALL_OW 312
16347: ST_TO_ADDR
// if j then
16348: LD_VAR 0 7
16352: IFFALSE 16382
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16354: LD_ADDR_VAR 0 10
16358: PUSH
16359: LD_VAR 0 10
16363: PUSH
16364: LD_VAR 0 7
16368: PPUSH
16369: LD_INT 3
16371: PPUSH
16372: CALL_OW 259
16376: PUSH
16377: LD_INT 3
16379: MUL
16380: MUL
16381: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16382: LD_VAR 0 6
16386: PPUSH
16387: CALL_OW 264
16391: PUSH
16392: LD_INT 5
16394: PUSH
16395: LD_INT 6
16397: PUSH
16398: LD_INT 46
16400: PUSH
16401: LD_INT 44
16403: PUSH
16404: LD_INT 47
16406: PUSH
16407: LD_INT 45
16409: PUSH
16410: LD_INT 28
16412: PUSH
16413: LD_INT 7
16415: PUSH
16416: LD_INT 27
16418: PUSH
16419: LD_INT 29
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: IN
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: LD_INT 52
16442: PPUSH
16443: CALL_OW 321
16447: PUSH
16448: LD_INT 2
16450: EQUAL
16451: AND
16452: IFFALSE 16469
// bpoints := bpoints * 1.2 ;
16454: LD_ADDR_VAR 0 10
16458: PUSH
16459: LD_VAR 0 10
16463: PUSH
16464: LD_REAL  1.20000000000000E+0000
16467: MUL
16468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16469: LD_VAR 0 6
16473: PPUSH
16474: CALL_OW 264
16478: PUSH
16479: LD_INT 6
16481: PUSH
16482: LD_INT 46
16484: PUSH
16485: LD_INT 47
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: LIST
16492: IN
16493: IFFALSE 16510
// bpoints := bpoints * 1.2 ;
16495: LD_ADDR_VAR 0 10
16499: PUSH
16500: LD_VAR 0 10
16504: PUSH
16505: LD_REAL  1.20000000000000E+0000
16508: MUL
16509: ST_TO_ADDR
// end ; unit_building :
16510: GO 16524
16512: LD_INT 3
16514: DOUBLE
16515: EQUAL
16516: IFTRUE 16520
16518: GO 16523
16520: POP
// ; end ;
16521: GO 16524
16523: POP
// for j = 1 to 3 do
16524: LD_ADDR_VAR 0 7
16528: PUSH
16529: DOUBLE
16530: LD_INT 1
16532: DEC
16533: ST_TO_ADDR
16534: LD_INT 3
16536: PUSH
16537: FOR_TO
16538: IFFALSE 16591
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16540: LD_ADDR_VAR 0 5
16544: PUSH
16545: LD_VAR 0 5
16549: PPUSH
16550: LD_VAR 0 7
16554: PPUSH
16555: LD_VAR 0 5
16559: PUSH
16560: LD_VAR 0 7
16564: ARRAY
16565: PUSH
16566: LD_VAR 0 9
16570: PUSH
16571: LD_VAR 0 7
16575: ARRAY
16576: PUSH
16577: LD_VAR 0 10
16581: MUL
16582: PLUS
16583: PPUSH
16584: CALL_OW 1
16588: ST_TO_ADDR
16589: GO 16537
16591: POP
16592: POP
// end ;
16593: GO 15072
16595: POP
16596: POP
// result := Replace ( result , 4 , tmp ) ;
16597: LD_ADDR_VAR 0 5
16601: PUSH
16602: LD_VAR 0 5
16606: PPUSH
16607: LD_INT 4
16609: PPUSH
16610: LD_VAR 0 8
16614: PPUSH
16615: CALL_OW 1
16619: ST_TO_ADDR
// end ;
16620: LD_VAR 0 5
16624: RET
// export function DangerAtRange ( unit , range ) ; begin
16625: LD_INT 0
16627: PPUSH
// if not unit then
16628: LD_VAR 0 1
16632: NOT
16633: IFFALSE 16637
// exit ;
16635: GO 16682
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 255
16651: PPUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 250
16661: PPUSH
16662: LD_VAR 0 1
16666: PPUSH
16667: CALL_OW 251
16671: PPUSH
16672: LD_VAR 0 2
16676: PPUSH
16677: CALL 14924 0 4
16681: ST_TO_ADDR
// end ;
16682: LD_VAR 0 3
16686: RET
// export function DangerInArea ( side , area ) ; begin
16687: LD_INT 0
16689: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16690: LD_ADDR_VAR 0 3
16694: PUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_INT 81
16702: PUSH
16703: LD_VAR 0 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PPUSH
16712: CALL_OW 70
16716: ST_TO_ADDR
// end ;
16717: LD_VAR 0 3
16721: RET
// export function IsExtension ( b ) ; begin
16722: LD_INT 0
16724: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16725: LD_ADDR_VAR 0 2
16729: PUSH
16730: LD_VAR 0 1
16734: PUSH
16735: LD_INT 23
16737: PUSH
16738: LD_INT 20
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_INT 17
16746: PUSH
16747: LD_INT 24
16749: PUSH
16750: LD_INT 21
16752: PUSH
16753: LD_INT 19
16755: PUSH
16756: LD_INT 16
16758: PUSH
16759: LD_INT 25
16761: PUSH
16762: LD_INT 18
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: IN
16777: ST_TO_ADDR
// end ;
16778: LD_VAR 0 2
16782: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16783: LD_INT 0
16785: PPUSH
16786: PPUSH
16787: PPUSH
// result := [ ] ;
16788: LD_ADDR_VAR 0 4
16792: PUSH
16793: EMPTY
16794: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16795: LD_ADDR_VAR 0 5
16799: PUSH
16800: LD_VAR 0 2
16804: PPUSH
16805: LD_INT 21
16807: PUSH
16808: LD_INT 3
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PPUSH
16815: CALL_OW 70
16819: ST_TO_ADDR
// if not tmp then
16820: LD_VAR 0 5
16824: NOT
16825: IFFALSE 16829
// exit ;
16827: GO 16893
// if checkLink then
16829: LD_VAR 0 3
16833: IFFALSE 16883
// begin for i in tmp do
16835: LD_ADDR_VAR 0 6
16839: PUSH
16840: LD_VAR 0 5
16844: PUSH
16845: FOR_IN
16846: IFFALSE 16881
// if GetBase ( i ) <> base then
16848: LD_VAR 0 6
16852: PPUSH
16853: CALL_OW 274
16857: PUSH
16858: LD_VAR 0 1
16862: NONEQUAL
16863: IFFALSE 16879
// ComLinkToBase ( base , i ) ;
16865: LD_VAR 0 1
16869: PPUSH
16870: LD_VAR 0 6
16874: PPUSH
16875: CALL_OW 169
16879: GO 16845
16881: POP
16882: POP
// end ; result := tmp ;
16883: LD_ADDR_VAR 0 4
16887: PUSH
16888: LD_VAR 0 5
16892: ST_TO_ADDR
// end ;
16893: LD_VAR 0 4
16897: RET
// export function ComComplete ( units , b ) ; var i ; begin
16898: LD_INT 0
16900: PPUSH
16901: PPUSH
// if not units then
16902: LD_VAR 0 1
16906: NOT
16907: IFFALSE 16911
// exit ;
16909: GO 17001
// for i in units do
16911: LD_ADDR_VAR 0 4
16915: PUSH
16916: LD_VAR 0 1
16920: PUSH
16921: FOR_IN
16922: IFFALSE 16999
// if BuildingStatus ( b ) = bs_build then
16924: LD_VAR 0 2
16928: PPUSH
16929: CALL_OW 461
16933: PUSH
16934: LD_INT 1
16936: EQUAL
16937: IFFALSE 16997
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16939: LD_VAR 0 4
16943: PPUSH
16944: LD_STRING h
16946: PUSH
16947: LD_VAR 0 2
16951: PPUSH
16952: CALL_OW 250
16956: PUSH
16957: LD_VAR 0 2
16961: PPUSH
16962: CALL_OW 251
16966: PUSH
16967: LD_VAR 0 2
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: LD_INT 0
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: PPUSH
16993: CALL_OW 446
16997: GO 16921
16999: POP
17000: POP
// end ;
17001: LD_VAR 0 3
17005: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
17013: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17014: LD_VAR 0 1
17018: NOT
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 263
17029: PUSH
17030: LD_INT 2
17032: NONEQUAL
17033: OR
17034: IFFALSE 17038
// exit ;
17036: GO 17354
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17038: LD_ADDR_VAR 0 6
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 255
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: LD_INT 36
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 34
17075: PUSH
17076: LD_INT 31
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 69
17096: ST_TO_ADDR
// if not tmp then
17097: LD_VAR 0 6
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17354
// result := [ ] ;
17106: LD_ADDR_VAR 0 2
17110: PUSH
17111: EMPTY
17112: ST_TO_ADDR
// for i in tmp do
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: LD_VAR 0 6
17122: PUSH
17123: FOR_IN
17124: IFFALSE 17195
// begin t := UnitsInside ( i ) ;
17126: LD_ADDR_VAR 0 4
17130: PUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: CALL_OW 313
17140: ST_TO_ADDR
// if t then
17141: LD_VAR 0 4
17145: IFFALSE 17193
// for j in t do
17147: LD_ADDR_VAR 0 7
17151: PUSH
17152: LD_VAR 0 4
17156: PUSH
17157: FOR_IN
17158: IFFALSE 17191
// result := Replace ( result , result + 1 , j ) ;
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_VAR 0 2
17169: PPUSH
17170: LD_VAR 0 2
17174: PUSH
17175: LD_INT 1
17177: PLUS
17178: PPUSH
17179: LD_VAR 0 7
17183: PPUSH
17184: CALL_OW 1
17188: ST_TO_ADDR
17189: GO 17157
17191: POP
17192: POP
// end ;
17193: GO 17123
17195: POP
17196: POP
// if not result then
17197: LD_VAR 0 2
17201: NOT
17202: IFFALSE 17206
// exit ;
17204: GO 17354
// mech := result [ 1 ] ;
17206: LD_ADDR_VAR 0 5
17210: PUSH
17211: LD_VAR 0 2
17215: PUSH
17216: LD_INT 1
17218: ARRAY
17219: ST_TO_ADDR
// if result > 1 then
17220: LD_VAR 0 2
17224: PUSH
17225: LD_INT 1
17227: GREATER
17228: IFFALSE 17340
// begin for i = 2 to result do
17230: LD_ADDR_VAR 0 3
17234: PUSH
17235: DOUBLE
17236: LD_INT 2
17238: DEC
17239: ST_TO_ADDR
17240: LD_VAR 0 2
17244: PUSH
17245: FOR_TO
17246: IFFALSE 17338
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17248: LD_ADDR_VAR 0 4
17252: PUSH
17253: LD_VAR 0 2
17257: PUSH
17258: LD_VAR 0 3
17262: ARRAY
17263: PPUSH
17264: LD_INT 3
17266: PPUSH
17267: CALL_OW 259
17271: PUSH
17272: LD_VAR 0 2
17276: PUSH
17277: LD_VAR 0 3
17281: ARRAY
17282: PPUSH
17283: CALL_OW 432
17287: MINUS
17288: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17289: LD_VAR 0 4
17293: PUSH
17294: LD_VAR 0 5
17298: PPUSH
17299: LD_INT 3
17301: PPUSH
17302: CALL_OW 259
17306: PUSH
17307: LD_VAR 0 5
17311: PPUSH
17312: CALL_OW 432
17316: MINUS
17317: GREATEREQUAL
17318: IFFALSE 17336
// mech := result [ i ] ;
17320: LD_ADDR_VAR 0 5
17324: PUSH
17325: LD_VAR 0 2
17329: PUSH
17330: LD_VAR 0 3
17334: ARRAY
17335: ST_TO_ADDR
// end ;
17336: GO 17245
17338: POP
17339: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17340: LD_VAR 0 1
17344: PPUSH
17345: LD_VAR 0 5
17349: PPUSH
17350: CALL_OW 135
// end ;
17354: LD_VAR 0 2
17358: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17359: LD_INT 0
17361: PPUSH
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
// result := [ ] ;
17374: LD_ADDR_VAR 0 7
17378: PUSH
17379: EMPTY
17380: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 266
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: IN
17401: NOT
17402: IFFALSE 17406
// exit ;
17404: GO 19040
// if name then
17406: LD_VAR 0 3
17410: IFFALSE 17426
// SetBName ( base_dep , name ) ;
17412: LD_VAR 0 1
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 500
// base := GetBase ( base_dep ) ;
17426: LD_ADDR_VAR 0 15
17430: PUSH
17431: LD_VAR 0 1
17435: PPUSH
17436: CALL_OW 274
17440: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17441: LD_ADDR_VAR 0 16
17445: PUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: CALL_OW 255
17455: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17456: LD_ADDR_VAR 0 17
17460: PUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 248
17470: ST_TO_ADDR
// if sources then
17471: LD_VAR 0 5
17475: IFFALSE 17522
// for i = 1 to 3 do
17477: LD_ADDR_VAR 0 8
17481: PUSH
17482: DOUBLE
17483: LD_INT 1
17485: DEC
17486: ST_TO_ADDR
17487: LD_INT 3
17489: PUSH
17490: FOR_TO
17491: IFFALSE 17520
// AddResourceType ( base , i , sources [ i ] ) ;
17493: LD_VAR 0 15
17497: PPUSH
17498: LD_VAR 0 8
17502: PPUSH
17503: LD_VAR 0 5
17507: PUSH
17508: LD_VAR 0 8
17512: ARRAY
17513: PPUSH
17514: CALL_OW 276
17518: GO 17490
17520: POP
17521: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17522: LD_ADDR_VAR 0 18
17526: PUSH
17527: LD_VAR 0 15
17531: PPUSH
17532: LD_VAR 0 2
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: CALL 16783 0 3
17544: ST_TO_ADDR
// InitHc ;
17545: CALL_OW 19
// InitUc ;
17549: CALL_OW 18
// uc_side := side ;
17553: LD_ADDR_OWVAR 20
17557: PUSH
17558: LD_VAR 0 16
17562: ST_TO_ADDR
// uc_nation := nation ;
17563: LD_ADDR_OWVAR 21
17567: PUSH
17568: LD_VAR 0 17
17572: ST_TO_ADDR
// if buildings then
17573: LD_VAR 0 18
17577: IFFALSE 18899
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17579: LD_ADDR_VAR 0 19
17583: PUSH
17584: LD_VAR 0 18
17588: PPUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 30
17594: PUSH
17595: LD_INT 29
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PPUSH
17617: CALL_OW 72
17621: ST_TO_ADDR
// if tmp then
17622: LD_VAR 0 19
17626: IFFALSE 17674
// for i in tmp do
17628: LD_ADDR_VAR 0 8
17632: PUSH
17633: LD_VAR 0 19
17637: PUSH
17638: FOR_IN
17639: IFFALSE 17672
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17641: LD_VAR 0 8
17645: PPUSH
17646: CALL_OW 250
17650: PPUSH
17651: LD_VAR 0 8
17655: PPUSH
17656: CALL_OW 251
17660: PPUSH
17661: LD_VAR 0 16
17665: PPUSH
17666: CALL_OW 441
17670: GO 17638
17672: POP
17673: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17674: LD_VAR 0 18
17678: PPUSH
17679: LD_INT 2
17681: PUSH
17682: LD_INT 30
17684: PUSH
17685: LD_INT 32
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 30
17694: PUSH
17695: LD_INT 33
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: PPUSH
17707: CALL_OW 72
17711: IFFALSE 17799
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17713: LD_ADDR_VAR 0 8
17717: PUSH
17718: LD_VAR 0 18
17722: PPUSH
17723: LD_INT 2
17725: PUSH
17726: LD_INT 30
17728: PUSH
17729: LD_INT 32
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 30
17738: PUSH
17739: LD_INT 33
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: PPUSH
17751: CALL_OW 72
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17797
// begin if not GetBWeapon ( i ) then
17759: LD_VAR 0 8
17763: PPUSH
17764: CALL_OW 269
17768: NOT
17769: IFFALSE 17795
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17771: LD_VAR 0 8
17775: PPUSH
17776: LD_VAR 0 8
17780: PPUSH
17781: LD_VAR 0 2
17785: PPUSH
17786: CALL 19045 0 2
17790: PPUSH
17791: CALL_OW 431
// end ;
17795: GO 17756
17797: POP
17798: POP
// end ; for i = 1 to personel do
17799: LD_ADDR_VAR 0 8
17803: PUSH
17804: DOUBLE
17805: LD_INT 1
17807: DEC
17808: ST_TO_ADDR
17809: LD_VAR 0 6
17813: PUSH
17814: FOR_TO
17815: IFFALSE 18879
// begin if i > 4 then
17817: LD_VAR 0 8
17821: PUSH
17822: LD_INT 4
17824: GREATER
17825: IFFALSE 17829
// break ;
17827: GO 18879
// case i of 1 :
17829: LD_VAR 0 8
17833: PUSH
17834: LD_INT 1
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17922
17842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17843: LD_ADDR_VAR 0 12
17847: PUSH
17848: LD_VAR 0 18
17852: PPUSH
17853: LD_INT 22
17855: PUSH
17856: LD_VAR 0 16
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 58
17867: PUSH
17868: EMPTY
17869: LIST
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: LD_INT 30
17876: PUSH
17877: LD_INT 32
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 30
17886: PUSH
17887: LD_INT 4
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 30
17896: PUSH
17897: LD_INT 5
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: LIST
17914: PPUSH
17915: CALL_OW 72
17919: ST_TO_ADDR
17920: GO 18144
17922: LD_INT 2
17924: DOUBLE
17925: EQUAL
17926: IFTRUE 17930
17928: GO 17992
17930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17931: LD_ADDR_VAR 0 12
17935: PUSH
17936: LD_VAR 0 18
17940: PPUSH
17941: LD_INT 22
17943: PUSH
17944: LD_VAR 0 16
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: LD_INT 30
17958: PUSH
17959: LD_INT 0
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 30
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PPUSH
17985: CALL_OW 72
17989: ST_TO_ADDR
17990: GO 18144
17992: LD_INT 3
17994: DOUBLE
17995: EQUAL
17996: IFTRUE 18000
17998: GO 18062
18000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18001: LD_ADDR_VAR 0 12
18005: PUSH
18006: LD_VAR 0 18
18010: PPUSH
18011: LD_INT 22
18013: PUSH
18014: LD_VAR 0 16
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 2
18025: PUSH
18026: LD_INT 30
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 30
18038: PUSH
18039: LD_INT 3
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 72
18059: ST_TO_ADDR
18060: GO 18144
18062: LD_INT 4
18064: DOUBLE
18065: EQUAL
18066: IFTRUE 18070
18068: GO 18143
18070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18071: LD_ADDR_VAR 0 12
18075: PUSH
18076: LD_VAR 0 18
18080: PPUSH
18081: LD_INT 22
18083: PUSH
18084: LD_VAR 0 16
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 2
18095: PUSH
18096: LD_INT 30
18098: PUSH
18099: LD_INT 6
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 30
18108: PUSH
18109: LD_INT 7
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 30
18118: PUSH
18119: LD_INT 8
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PPUSH
18136: CALL_OW 72
18140: ST_TO_ADDR
18141: GO 18144
18143: POP
// if i = 1 then
18144: LD_VAR 0 8
18148: PUSH
18149: LD_INT 1
18151: EQUAL
18152: IFFALSE 18263
// begin tmp := [ ] ;
18154: LD_ADDR_VAR 0 19
18158: PUSH
18159: EMPTY
18160: ST_TO_ADDR
// for j in f do
18161: LD_ADDR_VAR 0 9
18165: PUSH
18166: LD_VAR 0 12
18170: PUSH
18171: FOR_IN
18172: IFFALSE 18245
// if GetBType ( j ) = b_bunker then
18174: LD_VAR 0 9
18178: PPUSH
18179: CALL_OW 266
18183: PUSH
18184: LD_INT 32
18186: EQUAL
18187: IFFALSE 18214
// tmp := Insert ( tmp , 1 , j ) else
18189: LD_ADDR_VAR 0 19
18193: PUSH
18194: LD_VAR 0 19
18198: PPUSH
18199: LD_INT 1
18201: PPUSH
18202: LD_VAR 0 9
18206: PPUSH
18207: CALL_OW 2
18211: ST_TO_ADDR
18212: GO 18243
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18214: LD_ADDR_VAR 0 19
18218: PUSH
18219: LD_VAR 0 19
18223: PPUSH
18224: LD_VAR 0 19
18228: PUSH
18229: LD_INT 1
18231: PLUS
18232: PPUSH
18233: LD_VAR 0 9
18237: PPUSH
18238: CALL_OW 2
18242: ST_TO_ADDR
18243: GO 18171
18245: POP
18246: POP
// if tmp then
18247: LD_VAR 0 19
18251: IFFALSE 18263
// f := tmp ;
18253: LD_ADDR_VAR 0 12
18257: PUSH
18258: LD_VAR 0 19
18262: ST_TO_ADDR
// end ; x := personel [ i ] ;
18263: LD_ADDR_VAR 0 13
18267: PUSH
18268: LD_VAR 0 6
18272: PUSH
18273: LD_VAR 0 8
18277: ARRAY
18278: ST_TO_ADDR
// if x = - 1 then
18279: LD_VAR 0 13
18283: PUSH
18284: LD_INT 1
18286: NEG
18287: EQUAL
18288: IFFALSE 18497
// begin for j in f do
18290: LD_ADDR_VAR 0 9
18294: PUSH
18295: LD_VAR 0 12
18299: PUSH
18300: FOR_IN
18301: IFFALSE 18493
// repeat InitHc ;
18303: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18307: LD_VAR 0 9
18311: PPUSH
18312: CALL_OW 266
18316: PUSH
18317: LD_INT 5
18319: EQUAL
18320: IFFALSE 18390
// begin if UnitsInside ( j ) < 3 then
18322: LD_VAR 0 9
18326: PPUSH
18327: CALL_OW 313
18331: PUSH
18332: LD_INT 3
18334: LESS
18335: IFFALSE 18371
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18337: LD_INT 0
18339: PPUSH
18340: LD_INT 5
18342: PUSH
18343: LD_INT 8
18345: PUSH
18346: LD_INT 9
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_VAR 0 17
18358: ARRAY
18359: PPUSH
18360: LD_VAR 0 4
18364: PPUSH
18365: CALL_OW 380
18369: GO 18388
// PrepareHuman ( false , i , skill ) ;
18371: LD_INT 0
18373: PPUSH
18374: LD_VAR 0 8
18378: PPUSH
18379: LD_VAR 0 4
18383: PPUSH
18384: CALL_OW 380
// end else
18388: GO 18407
// PrepareHuman ( false , i , skill ) ;
18390: LD_INT 0
18392: PPUSH
18393: LD_VAR 0 8
18397: PPUSH
18398: LD_VAR 0 4
18402: PPUSH
18403: CALL_OW 380
// un := CreateHuman ;
18407: LD_ADDR_VAR 0 14
18411: PUSH
18412: CALL_OW 44
18416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18417: LD_ADDR_VAR 0 7
18421: PUSH
18422: LD_VAR 0 7
18426: PPUSH
18427: LD_INT 1
18429: PPUSH
18430: LD_VAR 0 14
18434: PPUSH
18435: CALL_OW 2
18439: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18440: LD_VAR 0 14
18444: PPUSH
18445: LD_VAR 0 9
18449: PPUSH
18450: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18454: LD_VAR 0 9
18458: PPUSH
18459: CALL_OW 313
18463: PUSH
18464: LD_INT 6
18466: EQUAL
18467: PUSH
18468: LD_VAR 0 9
18472: PPUSH
18473: CALL_OW 266
18477: PUSH
18478: LD_INT 32
18480: PUSH
18481: LD_INT 31
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: IN
18488: OR
18489: IFFALSE 18303
18491: GO 18300
18493: POP
18494: POP
// end else
18495: GO 18877
// for j = 1 to x do
18497: LD_ADDR_VAR 0 9
18501: PUSH
18502: DOUBLE
18503: LD_INT 1
18505: DEC
18506: ST_TO_ADDR
18507: LD_VAR 0 13
18511: PUSH
18512: FOR_TO
18513: IFFALSE 18875
// begin InitHc ;
18515: CALL_OW 19
// if not f then
18519: LD_VAR 0 12
18523: NOT
18524: IFFALSE 18613
// begin PrepareHuman ( false , i , skill ) ;
18526: LD_INT 0
18528: PPUSH
18529: LD_VAR 0 8
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 380
// un := CreateHuman ;
18543: LD_ADDR_VAR 0 14
18547: PUSH
18548: CALL_OW 44
18552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18553: LD_ADDR_VAR 0 7
18557: PUSH
18558: LD_VAR 0 7
18562: PPUSH
18563: LD_INT 1
18565: PPUSH
18566: LD_VAR 0 14
18570: PPUSH
18571: CALL_OW 2
18575: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18576: LD_VAR 0 14
18580: PPUSH
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 250
18590: PPUSH
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 251
18600: PPUSH
18601: LD_INT 10
18603: PPUSH
18604: LD_INT 0
18606: PPUSH
18607: CALL_OW 50
// continue ;
18611: GO 18512
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18613: LD_VAR 0 12
18617: PUSH
18618: LD_INT 1
18620: ARRAY
18621: PPUSH
18622: CALL_OW 313
18626: PUSH
18627: LD_VAR 0 12
18631: PUSH
18632: LD_INT 1
18634: ARRAY
18635: PPUSH
18636: CALL_OW 266
18640: PUSH
18641: LD_INT 32
18643: PUSH
18644: LD_INT 31
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: IN
18651: AND
18652: PUSH
18653: LD_VAR 0 12
18657: PUSH
18658: LD_INT 1
18660: ARRAY
18661: PPUSH
18662: CALL_OW 313
18666: PUSH
18667: LD_INT 6
18669: EQUAL
18670: OR
18671: IFFALSE 18691
// f := Delete ( f , 1 ) ;
18673: LD_ADDR_VAR 0 12
18677: PUSH
18678: LD_VAR 0 12
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: CALL_OW 3
18690: ST_TO_ADDR
// if not f then
18691: LD_VAR 0 12
18695: NOT
18696: IFFALSE 18714
// begin x := x + 2 ;
18698: LD_ADDR_VAR 0 13
18702: PUSH
18703: LD_VAR 0 13
18707: PUSH
18708: LD_INT 2
18710: PLUS
18711: ST_TO_ADDR
// continue ;
18712: GO 18512
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18714: LD_VAR 0 12
18718: PUSH
18719: LD_INT 1
18721: ARRAY
18722: PPUSH
18723: CALL_OW 266
18727: PUSH
18728: LD_INT 5
18730: EQUAL
18731: IFFALSE 18805
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18733: LD_VAR 0 12
18737: PUSH
18738: LD_INT 1
18740: ARRAY
18741: PPUSH
18742: CALL_OW 313
18746: PUSH
18747: LD_INT 3
18749: LESS
18750: IFFALSE 18786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18752: LD_INT 0
18754: PPUSH
18755: LD_INT 5
18757: PUSH
18758: LD_INT 8
18760: PUSH
18761: LD_INT 9
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: LIST
18768: PUSH
18769: LD_VAR 0 17
18773: ARRAY
18774: PPUSH
18775: LD_VAR 0 4
18779: PPUSH
18780: CALL_OW 380
18784: GO 18803
// PrepareHuman ( false , i , skill ) ;
18786: LD_INT 0
18788: PPUSH
18789: LD_VAR 0 8
18793: PPUSH
18794: LD_VAR 0 4
18798: PPUSH
18799: CALL_OW 380
// end else
18803: GO 18822
// PrepareHuman ( false , i , skill ) ;
18805: LD_INT 0
18807: PPUSH
18808: LD_VAR 0 8
18812: PPUSH
18813: LD_VAR 0 4
18817: PPUSH
18818: CALL_OW 380
// un := CreateHuman ;
18822: LD_ADDR_VAR 0 14
18826: PUSH
18827: CALL_OW 44
18831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18832: LD_ADDR_VAR 0 7
18836: PUSH
18837: LD_VAR 0 7
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: LD_VAR 0 14
18849: PPUSH
18850: CALL_OW 2
18854: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18855: LD_VAR 0 14
18859: PPUSH
18860: LD_VAR 0 12
18864: PUSH
18865: LD_INT 1
18867: ARRAY
18868: PPUSH
18869: CALL_OW 52
// end ;
18873: GO 18512
18875: POP
18876: POP
// end ;
18877: GO 17814
18879: POP
18880: POP
// result := result ^ buildings ;
18881: LD_ADDR_VAR 0 7
18885: PUSH
18886: LD_VAR 0 7
18890: PUSH
18891: LD_VAR 0 18
18895: ADD
18896: ST_TO_ADDR
// end else
18897: GO 19040
// begin for i = 1 to personel do
18899: LD_ADDR_VAR 0 8
18903: PUSH
18904: DOUBLE
18905: LD_INT 1
18907: DEC
18908: ST_TO_ADDR
18909: LD_VAR 0 6
18913: PUSH
18914: FOR_TO
18915: IFFALSE 19038
// begin if i > 4 then
18917: LD_VAR 0 8
18921: PUSH
18922: LD_INT 4
18924: GREATER
18925: IFFALSE 18929
// break ;
18927: GO 19038
// x := personel [ i ] ;
18929: LD_ADDR_VAR 0 13
18933: PUSH
18934: LD_VAR 0 6
18938: PUSH
18939: LD_VAR 0 8
18943: ARRAY
18944: ST_TO_ADDR
// if x = - 1 then
18945: LD_VAR 0 13
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: EQUAL
18954: IFFALSE 18958
// continue ;
18956: GO 18914
// PrepareHuman ( false , i , skill ) ;
18958: LD_INT 0
18960: PPUSH
18961: LD_VAR 0 8
18965: PPUSH
18966: LD_VAR 0 4
18970: PPUSH
18971: CALL_OW 380
// un := CreateHuman ;
18975: LD_ADDR_VAR 0 14
18979: PUSH
18980: CALL_OW 44
18984: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18985: LD_VAR 0 14
18989: PPUSH
18990: LD_VAR 0 1
18994: PPUSH
18995: CALL_OW 250
18999: PPUSH
19000: LD_VAR 0 1
19004: PPUSH
19005: CALL_OW 251
19009: PPUSH
19010: LD_INT 10
19012: PPUSH
19013: LD_INT 0
19015: PPUSH
19016: CALL_OW 50
// result := result ^ un ;
19020: LD_ADDR_VAR 0 7
19024: PUSH
19025: LD_VAR 0 7
19029: PUSH
19030: LD_VAR 0 14
19034: ADD
19035: ST_TO_ADDR
// end ;
19036: GO 18914
19038: POP
19039: POP
// end ; end ;
19040: LD_VAR 0 7
19044: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
19055: PPUSH
19056: PPUSH
19057: PPUSH
19058: PPUSH
19059: PPUSH
19060: PPUSH
19061: PPUSH
19062: PPUSH
// result := false ;
19063: LD_ADDR_VAR 0 3
19067: PUSH
19068: LD_INT 0
19070: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19071: LD_VAR 0 1
19075: NOT
19076: PUSH
19077: LD_VAR 0 1
19081: PPUSH
19082: CALL_OW 266
19086: PUSH
19087: LD_INT 32
19089: PUSH
19090: LD_INT 33
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: IN
19097: NOT
19098: OR
19099: IFFALSE 19103
// exit ;
19101: GO 20212
// nat := GetNation ( tower ) ;
19103: LD_ADDR_VAR 0 12
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 248
19117: ST_TO_ADDR
// side := GetSide ( tower ) ;
19118: LD_ADDR_VAR 0 16
19122: PUSH
19123: LD_VAR 0 1
19127: PPUSH
19128: CALL_OW 255
19132: ST_TO_ADDR
// x := GetX ( tower ) ;
19133: LD_ADDR_VAR 0 10
19137: PUSH
19138: LD_VAR 0 1
19142: PPUSH
19143: CALL_OW 250
19147: ST_TO_ADDR
// y := GetY ( tower ) ;
19148: LD_ADDR_VAR 0 11
19152: PUSH
19153: LD_VAR 0 1
19157: PPUSH
19158: CALL_OW 251
19162: ST_TO_ADDR
// if not x or not y then
19163: LD_VAR 0 10
19167: NOT
19168: PUSH
19169: LD_VAR 0 11
19173: NOT
19174: OR
19175: IFFALSE 19179
// exit ;
19177: GO 20212
// weapon := 0 ;
19179: LD_ADDR_VAR 0 18
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
// fac_list := [ ] ;
19187: LD_ADDR_VAR 0 17
19191: PUSH
19192: EMPTY
19193: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19194: LD_ADDR_VAR 0 6
19198: PUSH
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 274
19208: PPUSH
19209: LD_VAR 0 2
19213: PPUSH
19214: LD_INT 0
19216: PPUSH
19217: CALL 16783 0 3
19221: PPUSH
19222: LD_INT 30
19224: PUSH
19225: LD_INT 3
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 72
19236: ST_TO_ADDR
// if not factories then
19237: LD_VAR 0 6
19241: NOT
19242: IFFALSE 19246
// exit ;
19244: GO 20212
// for i in factories do
19246: LD_ADDR_VAR 0 8
19250: PUSH
19251: LD_VAR 0 6
19255: PUSH
19256: FOR_IN
19257: IFFALSE 19282
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19259: LD_ADDR_VAR 0 17
19263: PUSH
19264: LD_VAR 0 17
19268: PUSH
19269: LD_VAR 0 8
19273: PPUSH
19274: CALL_OW 478
19278: UNION
19279: ST_TO_ADDR
19280: GO 19256
19282: POP
19283: POP
// if not fac_list then
19284: LD_VAR 0 17
19288: NOT
19289: IFFALSE 19293
// exit ;
19291: GO 20212
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19293: LD_ADDR_VAR 0 5
19297: PUSH
19298: LD_INT 4
19300: PUSH
19301: LD_INT 5
19303: PUSH
19304: LD_INT 9
19306: PUSH
19307: LD_INT 10
19309: PUSH
19310: LD_INT 6
19312: PUSH
19313: LD_INT 7
19315: PUSH
19316: LD_INT 11
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 27
19330: PUSH
19331: LD_INT 28
19333: PUSH
19334: LD_INT 26
19336: PUSH
19337: LD_INT 30
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 43
19348: PUSH
19349: LD_INT 44
19351: PUSH
19352: LD_INT 46
19354: PUSH
19355: LD_INT 45
19357: PUSH
19358: LD_INT 47
19360: PUSH
19361: LD_INT 49
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_VAR 0 12
19381: ARRAY
19382: ST_TO_ADDR
// list := list isect fac_list ;
19383: LD_ADDR_VAR 0 5
19387: PUSH
19388: LD_VAR 0 5
19392: PUSH
19393: LD_VAR 0 17
19397: ISECT
19398: ST_TO_ADDR
// if not list then
19399: LD_VAR 0 5
19403: NOT
19404: IFFALSE 19408
// exit ;
19406: GO 20212
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19408: LD_VAR 0 12
19412: PUSH
19413: LD_INT 3
19415: EQUAL
19416: PUSH
19417: LD_INT 49
19419: PUSH
19420: LD_VAR 0 5
19424: IN
19425: AND
19426: PUSH
19427: LD_INT 31
19429: PPUSH
19430: LD_VAR 0 16
19434: PPUSH
19435: CALL_OW 321
19439: PUSH
19440: LD_INT 2
19442: EQUAL
19443: AND
19444: IFFALSE 19504
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19446: LD_INT 22
19448: PUSH
19449: LD_VAR 0 16
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 35
19460: PUSH
19461: LD_INT 49
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 91
19470: PUSH
19471: LD_VAR 0 1
19475: PUSH
19476: LD_INT 10
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: PPUSH
19489: CALL_OW 69
19493: NOT
19494: IFFALSE 19504
// weapon := ru_time_lapser ;
19496: LD_ADDR_VAR 0 18
19500: PUSH
19501: LD_INT 49
19503: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19504: LD_VAR 0 12
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: IN
19519: PUSH
19520: LD_INT 11
19522: PUSH
19523: LD_VAR 0 5
19527: IN
19528: PUSH
19529: LD_INT 30
19531: PUSH
19532: LD_VAR 0 5
19536: IN
19537: OR
19538: AND
19539: PUSH
19540: LD_INT 6
19542: PPUSH
19543: LD_VAR 0 16
19547: PPUSH
19548: CALL_OW 321
19552: PUSH
19553: LD_INT 2
19555: EQUAL
19556: AND
19557: IFFALSE 19722
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19559: LD_INT 22
19561: PUSH
19562: LD_VAR 0 16
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 35
19576: PUSH
19577: LD_INT 11
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 35
19586: PUSH
19587: LD_INT 30
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 91
19601: PUSH
19602: LD_VAR 0 1
19606: PUSH
19607: LD_INT 18
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: LIST
19619: PPUSH
19620: CALL_OW 69
19624: NOT
19625: PUSH
19626: LD_INT 22
19628: PUSH
19629: LD_VAR 0 16
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: LD_INT 30
19643: PUSH
19644: LD_INT 32
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 30
19653: PUSH
19654: LD_INT 33
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 91
19668: PUSH
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 12
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: PPUSH
19690: CALL_OW 69
19694: PUSH
19695: LD_INT 2
19697: GREATER
19698: AND
19699: IFFALSE 19722
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19701: LD_ADDR_VAR 0 18
19705: PUSH
19706: LD_INT 11
19708: PUSH
19709: LD_INT 30
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_VAR 0 12
19720: ARRAY
19721: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19722: LD_VAR 0 18
19726: NOT
19727: PUSH
19728: LD_INT 40
19730: PPUSH
19731: LD_VAR 0 16
19735: PPUSH
19736: CALL_OW 321
19740: PUSH
19741: LD_INT 2
19743: EQUAL
19744: AND
19745: PUSH
19746: LD_INT 7
19748: PUSH
19749: LD_VAR 0 5
19753: IN
19754: PUSH
19755: LD_INT 28
19757: PUSH
19758: LD_VAR 0 5
19762: IN
19763: OR
19764: PUSH
19765: LD_INT 45
19767: PUSH
19768: LD_VAR 0 5
19772: IN
19773: OR
19774: AND
19775: IFFALSE 20029
// begin hex := GetHexInfo ( x , y ) ;
19777: LD_ADDR_VAR 0 4
19781: PUSH
19782: LD_VAR 0 10
19786: PPUSH
19787: LD_VAR 0 11
19791: PPUSH
19792: CALL_OW 546
19796: ST_TO_ADDR
// if hex [ 1 ] then
19797: LD_VAR 0 4
19801: PUSH
19802: LD_INT 1
19804: ARRAY
19805: IFFALSE 19809
// exit ;
19807: GO 20212
// height := hex [ 2 ] ;
19809: LD_ADDR_VAR 0 15
19813: PUSH
19814: LD_VAR 0 4
19818: PUSH
19819: LD_INT 2
19821: ARRAY
19822: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19823: LD_ADDR_VAR 0 14
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: LD_INT 3
19836: PUSH
19837: LD_INT 5
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: ST_TO_ADDR
// for i in tmp do
19846: LD_ADDR_VAR 0 8
19850: PUSH
19851: LD_VAR 0 14
19855: PUSH
19856: FOR_IN
19857: IFFALSE 20027
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19859: LD_ADDR_VAR 0 9
19863: PUSH
19864: LD_VAR 0 10
19868: PPUSH
19869: LD_VAR 0 8
19873: PPUSH
19874: LD_INT 5
19876: PPUSH
19877: CALL_OW 272
19881: PUSH
19882: LD_VAR 0 11
19886: PPUSH
19887: LD_VAR 0 8
19891: PPUSH
19892: LD_INT 5
19894: PPUSH
19895: CALL_OW 273
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19904: LD_VAR 0 9
19908: PUSH
19909: LD_INT 1
19911: ARRAY
19912: PPUSH
19913: LD_VAR 0 9
19917: PUSH
19918: LD_INT 2
19920: ARRAY
19921: PPUSH
19922: CALL_OW 488
19926: IFFALSE 20025
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19928: LD_ADDR_VAR 0 4
19932: PUSH
19933: LD_VAR 0 9
19937: PUSH
19938: LD_INT 1
19940: ARRAY
19941: PPUSH
19942: LD_VAR 0 9
19946: PUSH
19947: LD_INT 2
19949: ARRAY
19950: PPUSH
19951: CALL_OW 546
19955: ST_TO_ADDR
// if hex [ 1 ] then
19956: LD_VAR 0 4
19960: PUSH
19961: LD_INT 1
19963: ARRAY
19964: IFFALSE 19968
// continue ;
19966: GO 19856
// h := hex [ 2 ] ;
19968: LD_ADDR_VAR 0 13
19972: PUSH
19973: LD_VAR 0 4
19977: PUSH
19978: LD_INT 2
19980: ARRAY
19981: ST_TO_ADDR
// if h + 7 < height then
19982: LD_VAR 0 13
19986: PUSH
19987: LD_INT 7
19989: PLUS
19990: PUSH
19991: LD_VAR 0 15
19995: LESS
19996: IFFALSE 20025
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19998: LD_ADDR_VAR 0 18
20002: PUSH
20003: LD_INT 7
20005: PUSH
20006: LD_INT 28
20008: PUSH
20009: LD_INT 45
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: PUSH
20017: LD_VAR 0 12
20021: ARRAY
20022: ST_TO_ADDR
// break ;
20023: GO 20027
// end ; end ; end ;
20025: GO 19856
20027: POP
20028: POP
// end ; if not weapon then
20029: LD_VAR 0 18
20033: NOT
20034: IFFALSE 20094
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20036: LD_ADDR_VAR 0 5
20040: PUSH
20041: LD_VAR 0 5
20045: PUSH
20046: LD_INT 11
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: LD_INT 49
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: DIFF
20060: ST_TO_ADDR
// if not list then
20061: LD_VAR 0 5
20065: NOT
20066: IFFALSE 20070
// exit ;
20068: GO 20212
// weapon := list [ rand ( 1 , list ) ] ;
20070: LD_ADDR_VAR 0 18
20074: PUSH
20075: LD_VAR 0 5
20079: PUSH
20080: LD_INT 1
20082: PPUSH
20083: LD_VAR 0 5
20087: PPUSH
20088: CALL_OW 12
20092: ARRAY
20093: ST_TO_ADDR
// end ; if weapon then
20094: LD_VAR 0 18
20098: IFFALSE 20212
// begin tmp := CostOfWeapon ( weapon ) ;
20100: LD_ADDR_VAR 0 14
20104: PUSH
20105: LD_VAR 0 18
20109: PPUSH
20110: CALL_OW 451
20114: ST_TO_ADDR
// j := GetBase ( tower ) ;
20115: LD_ADDR_VAR 0 9
20119: PUSH
20120: LD_VAR 0 1
20124: PPUSH
20125: CALL_OW 274
20129: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20130: LD_VAR 0 9
20134: PPUSH
20135: LD_INT 1
20137: PPUSH
20138: CALL_OW 275
20142: PUSH
20143: LD_VAR 0 14
20147: PUSH
20148: LD_INT 1
20150: ARRAY
20151: GREATEREQUAL
20152: PUSH
20153: LD_VAR 0 9
20157: PPUSH
20158: LD_INT 2
20160: PPUSH
20161: CALL_OW 275
20165: PUSH
20166: LD_VAR 0 14
20170: PUSH
20171: LD_INT 2
20173: ARRAY
20174: GREATEREQUAL
20175: AND
20176: PUSH
20177: LD_VAR 0 9
20181: PPUSH
20182: LD_INT 3
20184: PPUSH
20185: CALL_OW 275
20189: PUSH
20190: LD_VAR 0 14
20194: PUSH
20195: LD_INT 3
20197: ARRAY
20198: GREATEREQUAL
20199: AND
20200: IFFALSE 20212
// result := weapon ;
20202: LD_ADDR_VAR 0 3
20206: PUSH
20207: LD_VAR 0 18
20211: ST_TO_ADDR
// end ; end ;
20212: LD_VAR 0 3
20216: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20217: LD_INT 0
20219: PPUSH
20220: PPUSH
// result := true ;
20221: LD_ADDR_VAR 0 3
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if array1 = array2 then
20229: LD_VAR 0 1
20233: PUSH
20234: LD_VAR 0 2
20238: EQUAL
20239: IFFALSE 20299
// begin for i = 1 to array1 do
20241: LD_ADDR_VAR 0 4
20245: PUSH
20246: DOUBLE
20247: LD_INT 1
20249: DEC
20250: ST_TO_ADDR
20251: LD_VAR 0 1
20255: PUSH
20256: FOR_TO
20257: IFFALSE 20295
// if array1 [ i ] <> array2 [ i ] then
20259: LD_VAR 0 1
20263: PUSH
20264: LD_VAR 0 4
20268: ARRAY
20269: PUSH
20270: LD_VAR 0 2
20274: PUSH
20275: LD_VAR 0 4
20279: ARRAY
20280: NONEQUAL
20281: IFFALSE 20293
// begin result := false ;
20283: LD_ADDR_VAR 0 3
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// break ;
20291: GO 20295
// end ;
20293: GO 20256
20295: POP
20296: POP
// end else
20297: GO 20307
// result := false ;
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// end ;
20307: LD_VAR 0 3
20311: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
// if not array1 or not array2 then
20316: LD_VAR 0 1
20320: NOT
20321: PUSH
20322: LD_VAR 0 2
20326: NOT
20327: OR
20328: IFFALSE 20332
// exit ;
20330: GO 20396
// result := true ;
20332: LD_ADDR_VAR 0 3
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// for i = 1 to array1 do
20340: LD_ADDR_VAR 0 4
20344: PUSH
20345: DOUBLE
20346: LD_INT 1
20348: DEC
20349: ST_TO_ADDR
20350: LD_VAR 0 1
20354: PUSH
20355: FOR_TO
20356: IFFALSE 20394
// if array1 [ i ] <> array2 [ i ] then
20358: LD_VAR 0 1
20362: PUSH
20363: LD_VAR 0 4
20367: ARRAY
20368: PUSH
20369: LD_VAR 0 2
20373: PUSH
20374: LD_VAR 0 4
20378: ARRAY
20379: NONEQUAL
20380: IFFALSE 20392
// begin result := false ;
20382: LD_ADDR_VAR 0 3
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// break ;
20390: GO 20394
// end ;
20392: GO 20355
20394: POP
20395: POP
// end ;
20396: LD_VAR 0 3
20400: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20401: LD_INT 0
20403: PPUSH
20404: PPUSH
20405: PPUSH
// pom := GetBase ( fac ) ;
20406: LD_ADDR_VAR 0 5
20410: PUSH
20411: LD_VAR 0 1
20415: PPUSH
20416: CALL_OW 274
20420: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20421: LD_ADDR_VAR 0 4
20425: PUSH
20426: LD_VAR 0 2
20430: PUSH
20431: LD_INT 1
20433: ARRAY
20434: PPUSH
20435: LD_VAR 0 2
20439: PUSH
20440: LD_INT 2
20442: ARRAY
20443: PPUSH
20444: LD_VAR 0 2
20448: PUSH
20449: LD_INT 3
20451: ARRAY
20452: PPUSH
20453: LD_VAR 0 2
20457: PUSH
20458: LD_INT 4
20460: ARRAY
20461: PPUSH
20462: CALL_OW 449
20466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20467: LD_ADDR_VAR 0 3
20471: PUSH
20472: LD_VAR 0 5
20476: PPUSH
20477: LD_INT 1
20479: PPUSH
20480: CALL_OW 275
20484: PUSH
20485: LD_VAR 0 4
20489: PUSH
20490: LD_INT 1
20492: ARRAY
20493: GREATEREQUAL
20494: PUSH
20495: LD_VAR 0 5
20499: PPUSH
20500: LD_INT 2
20502: PPUSH
20503: CALL_OW 275
20507: PUSH
20508: LD_VAR 0 4
20512: PUSH
20513: LD_INT 2
20515: ARRAY
20516: GREATEREQUAL
20517: AND
20518: PUSH
20519: LD_VAR 0 5
20523: PPUSH
20524: LD_INT 3
20526: PPUSH
20527: CALL_OW 275
20531: PUSH
20532: LD_VAR 0 4
20536: PUSH
20537: LD_INT 3
20539: ARRAY
20540: GREATEREQUAL
20541: AND
20542: ST_TO_ADDR
// end ;
20543: LD_VAR 0 3
20547: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20548: LD_INT 0
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
// pom := GetBase ( building ) ;
20554: LD_ADDR_VAR 0 3
20558: PUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 274
20568: ST_TO_ADDR
// if not pom then
20569: LD_VAR 0 3
20573: NOT
20574: IFFALSE 20578
// exit ;
20576: GO 20748
// btype := GetBType ( building ) ;
20578: LD_ADDR_VAR 0 5
20582: PUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 266
20592: ST_TO_ADDR
// if btype = b_armoury then
20593: LD_VAR 0 5
20597: PUSH
20598: LD_INT 4
20600: EQUAL
20601: IFFALSE 20611
// btype := b_barracks ;
20603: LD_ADDR_VAR 0 5
20607: PUSH
20608: LD_INT 5
20610: ST_TO_ADDR
// if btype = b_depot then
20611: LD_VAR 0 5
20615: PUSH
20616: LD_INT 0
20618: EQUAL
20619: IFFALSE 20629
// btype := b_warehouse ;
20621: LD_ADDR_VAR 0 5
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// if btype = b_workshop then
20629: LD_VAR 0 5
20633: PUSH
20634: LD_INT 2
20636: EQUAL
20637: IFFALSE 20647
// btype := b_factory ;
20639: LD_ADDR_VAR 0 5
20643: PUSH
20644: LD_INT 3
20646: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20647: LD_ADDR_VAR 0 4
20651: PUSH
20652: LD_VAR 0 5
20656: PPUSH
20657: LD_VAR 0 1
20661: PPUSH
20662: CALL_OW 248
20666: PPUSH
20667: CALL_OW 450
20671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20672: LD_ADDR_VAR 0 2
20676: PUSH
20677: LD_VAR 0 3
20681: PPUSH
20682: LD_INT 1
20684: PPUSH
20685: CALL_OW 275
20689: PUSH
20690: LD_VAR 0 4
20694: PUSH
20695: LD_INT 1
20697: ARRAY
20698: GREATEREQUAL
20699: PUSH
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_INT 2
20707: PPUSH
20708: CALL_OW 275
20712: PUSH
20713: LD_VAR 0 4
20717: PUSH
20718: LD_INT 2
20720: ARRAY
20721: GREATEREQUAL
20722: AND
20723: PUSH
20724: LD_VAR 0 3
20728: PPUSH
20729: LD_INT 3
20731: PPUSH
20732: CALL_OW 275
20736: PUSH
20737: LD_VAR 0 4
20741: PUSH
20742: LD_INT 3
20744: ARRAY
20745: GREATEREQUAL
20746: AND
20747: ST_TO_ADDR
// end ;
20748: LD_VAR 0 2
20752: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20753: LD_INT 0
20755: PPUSH
20756: PPUSH
20757: PPUSH
// pom := GetBase ( building ) ;
20758: LD_ADDR_VAR 0 4
20762: PUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 274
20772: ST_TO_ADDR
// if not pom then
20773: LD_VAR 0 4
20777: NOT
20778: IFFALSE 20782
// exit ;
20780: GO 20883
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20782: LD_ADDR_VAR 0 5
20786: PUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 248
20801: PPUSH
20802: CALL_OW 450
20806: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20807: LD_ADDR_VAR 0 3
20811: PUSH
20812: LD_VAR 0 4
20816: PPUSH
20817: LD_INT 1
20819: PPUSH
20820: CALL_OW 275
20824: PUSH
20825: LD_VAR 0 5
20829: PUSH
20830: LD_INT 1
20832: ARRAY
20833: GREATEREQUAL
20834: PUSH
20835: LD_VAR 0 4
20839: PPUSH
20840: LD_INT 2
20842: PPUSH
20843: CALL_OW 275
20847: PUSH
20848: LD_VAR 0 5
20852: PUSH
20853: LD_INT 2
20855: ARRAY
20856: GREATEREQUAL
20857: AND
20858: PUSH
20859: LD_VAR 0 4
20863: PPUSH
20864: LD_INT 3
20866: PPUSH
20867: CALL_OW 275
20871: PUSH
20872: LD_VAR 0 5
20876: PUSH
20877: LD_INT 3
20879: ARRAY
20880: GREATEREQUAL
20881: AND
20882: ST_TO_ADDR
// end ;
20883: LD_VAR 0 3
20887: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20888: LD_INT 0
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
20894: PPUSH
20895: PPUSH
20896: PPUSH
20897: PPUSH
20898: PPUSH
20899: PPUSH
20900: PPUSH
// result := false ;
20901: LD_ADDR_VAR 0 8
20905: PUSH
20906: LD_INT 0
20908: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20909: LD_VAR 0 5
20913: NOT
20914: PUSH
20915: LD_VAR 0 1
20919: NOT
20920: OR
20921: PUSH
20922: LD_VAR 0 2
20926: NOT
20927: OR
20928: PUSH
20929: LD_VAR 0 3
20933: NOT
20934: OR
20935: IFFALSE 20939
// exit ;
20937: GO 21753
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20939: LD_ADDR_VAR 0 14
20943: PUSH
20944: LD_VAR 0 1
20948: PPUSH
20949: LD_VAR 0 2
20953: PPUSH
20954: LD_VAR 0 3
20958: PPUSH
20959: LD_VAR 0 4
20963: PPUSH
20964: LD_VAR 0 5
20968: PUSH
20969: LD_INT 1
20971: ARRAY
20972: PPUSH
20973: CALL_OW 248
20977: PPUSH
20978: LD_INT 0
20980: PPUSH
20981: CALL 23006 0 6
20985: ST_TO_ADDR
// if not hexes then
20986: LD_VAR 0 14
20990: NOT
20991: IFFALSE 20995
// exit ;
20993: GO 21753
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20995: LD_ADDR_VAR 0 17
20999: PUSH
21000: LD_VAR 0 5
21004: PPUSH
21005: LD_INT 22
21007: PUSH
21008: LD_VAR 0 13
21012: PPUSH
21013: CALL_OW 255
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 2
21024: PUSH
21025: LD_INT 30
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 30
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PPUSH
21054: CALL_OW 72
21058: ST_TO_ADDR
// for i = 1 to hexes do
21059: LD_ADDR_VAR 0 9
21063: PUSH
21064: DOUBLE
21065: LD_INT 1
21067: DEC
21068: ST_TO_ADDR
21069: LD_VAR 0 14
21073: PUSH
21074: FOR_TO
21075: IFFALSE 21751
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21077: LD_ADDR_VAR 0 13
21081: PUSH
21082: LD_VAR 0 14
21086: PUSH
21087: LD_VAR 0 9
21091: ARRAY
21092: PUSH
21093: LD_INT 1
21095: ARRAY
21096: PPUSH
21097: LD_VAR 0 14
21101: PUSH
21102: LD_VAR 0 9
21106: ARRAY
21107: PUSH
21108: LD_INT 2
21110: ARRAY
21111: PPUSH
21112: CALL_OW 428
21116: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21117: LD_VAR 0 14
21121: PUSH
21122: LD_VAR 0 9
21126: ARRAY
21127: PUSH
21128: LD_INT 1
21130: ARRAY
21131: PPUSH
21132: LD_VAR 0 14
21136: PUSH
21137: LD_VAR 0 9
21141: ARRAY
21142: PUSH
21143: LD_INT 2
21145: ARRAY
21146: PPUSH
21147: CALL_OW 351
21151: PUSH
21152: LD_VAR 0 14
21156: PUSH
21157: LD_VAR 0 9
21161: ARRAY
21162: PUSH
21163: LD_INT 1
21165: ARRAY
21166: PPUSH
21167: LD_VAR 0 14
21171: PUSH
21172: LD_VAR 0 9
21176: ARRAY
21177: PUSH
21178: LD_INT 2
21180: ARRAY
21181: PPUSH
21182: CALL_OW 488
21186: NOT
21187: OR
21188: PUSH
21189: LD_VAR 0 13
21193: PPUSH
21194: CALL_OW 247
21198: PUSH
21199: LD_INT 3
21201: EQUAL
21202: OR
21203: IFFALSE 21209
// exit ;
21205: POP
21206: POP
21207: GO 21753
// if not tmp then
21209: LD_VAR 0 13
21213: NOT
21214: IFFALSE 21218
// continue ;
21216: GO 21074
// result := true ;
21218: LD_ADDR_VAR 0 8
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21226: LD_VAR 0 6
21230: PUSH
21231: LD_VAR 0 13
21235: PPUSH
21236: CALL_OW 247
21240: PUSH
21241: LD_INT 2
21243: EQUAL
21244: AND
21245: PUSH
21246: LD_VAR 0 13
21250: PPUSH
21251: CALL_OW 263
21255: PUSH
21256: LD_INT 1
21258: EQUAL
21259: AND
21260: IFFALSE 21424
// begin if IsDrivenBy ( tmp ) then
21262: LD_VAR 0 13
21266: PPUSH
21267: CALL_OW 311
21271: IFFALSE 21275
// continue ;
21273: GO 21074
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21275: LD_VAR 0 6
21279: PPUSH
21280: LD_INT 3
21282: PUSH
21283: LD_INT 60
21285: PUSH
21286: EMPTY
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 3
21295: PUSH
21296: LD_INT 55
21298: PUSH
21299: EMPTY
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 72
21314: IFFALSE 21422
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21316: LD_ADDR_VAR 0 18
21320: PUSH
21321: LD_VAR 0 6
21325: PPUSH
21326: LD_INT 3
21328: PUSH
21329: LD_INT 60
21331: PUSH
21332: EMPTY
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 3
21341: PUSH
21342: LD_INT 55
21344: PUSH
21345: EMPTY
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PPUSH
21356: CALL_OW 72
21360: PUSH
21361: LD_INT 1
21363: ARRAY
21364: ST_TO_ADDR
// if IsInUnit ( driver ) then
21365: LD_VAR 0 18
21369: PPUSH
21370: CALL_OW 310
21374: IFFALSE 21385
// ComExit ( driver ) ;
21376: LD_VAR 0 18
21380: PPUSH
21381: CALL 46787 0 1
// AddComEnterUnit ( driver , tmp ) ;
21385: LD_VAR 0 18
21389: PPUSH
21390: LD_VAR 0 13
21394: PPUSH
21395: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21399: LD_VAR 0 18
21403: PPUSH
21404: LD_VAR 0 7
21408: PPUSH
21409: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21413: LD_VAR 0 18
21417: PPUSH
21418: CALL_OW 181
// end ; continue ;
21422: GO 21074
// end ; if not cleaners or not tmp in cleaners then
21424: LD_VAR 0 6
21428: NOT
21429: PUSH
21430: LD_VAR 0 13
21434: PUSH
21435: LD_VAR 0 6
21439: IN
21440: NOT
21441: OR
21442: IFFALSE 21749
// begin if dep then
21444: LD_VAR 0 17
21448: IFFALSE 21584
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21450: LD_ADDR_VAR 0 16
21454: PUSH
21455: LD_VAR 0 17
21459: PUSH
21460: LD_INT 1
21462: ARRAY
21463: PPUSH
21464: CALL_OW 250
21468: PPUSH
21469: LD_VAR 0 17
21473: PUSH
21474: LD_INT 1
21476: ARRAY
21477: PPUSH
21478: CALL_OW 254
21482: PPUSH
21483: LD_INT 5
21485: PPUSH
21486: CALL_OW 272
21490: PUSH
21491: LD_VAR 0 17
21495: PUSH
21496: LD_INT 1
21498: ARRAY
21499: PPUSH
21500: CALL_OW 251
21504: PPUSH
21505: LD_VAR 0 17
21509: PUSH
21510: LD_INT 1
21512: ARRAY
21513: PPUSH
21514: CALL_OW 254
21518: PPUSH
21519: LD_INT 5
21521: PPUSH
21522: CALL_OW 273
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21531: LD_VAR 0 16
21535: PUSH
21536: LD_INT 1
21538: ARRAY
21539: PPUSH
21540: LD_VAR 0 16
21544: PUSH
21545: LD_INT 2
21547: ARRAY
21548: PPUSH
21549: CALL_OW 488
21553: IFFALSE 21584
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21555: LD_VAR 0 13
21559: PPUSH
21560: LD_VAR 0 16
21564: PUSH
21565: LD_INT 1
21567: ARRAY
21568: PPUSH
21569: LD_VAR 0 16
21573: PUSH
21574: LD_INT 2
21576: ARRAY
21577: PPUSH
21578: CALL_OW 111
// continue ;
21582: GO 21074
// end ; end ; r := GetDir ( tmp ) ;
21584: LD_ADDR_VAR 0 15
21588: PUSH
21589: LD_VAR 0 13
21593: PPUSH
21594: CALL_OW 254
21598: ST_TO_ADDR
// if r = 5 then
21599: LD_VAR 0 15
21603: PUSH
21604: LD_INT 5
21606: EQUAL
21607: IFFALSE 21617
// r := 0 ;
21609: LD_ADDR_VAR 0 15
21613: PUSH
21614: LD_INT 0
21616: ST_TO_ADDR
// for j = r to 5 do
21617: LD_ADDR_VAR 0 10
21621: PUSH
21622: DOUBLE
21623: LD_VAR 0 15
21627: DEC
21628: ST_TO_ADDR
21629: LD_INT 5
21631: PUSH
21632: FOR_TO
21633: IFFALSE 21747
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21635: LD_ADDR_VAR 0 11
21639: PUSH
21640: LD_VAR 0 13
21644: PPUSH
21645: CALL_OW 250
21649: PPUSH
21650: LD_VAR 0 10
21654: PPUSH
21655: LD_INT 2
21657: PPUSH
21658: CALL_OW 272
21662: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21663: LD_ADDR_VAR 0 12
21667: PUSH
21668: LD_VAR 0 13
21672: PPUSH
21673: CALL_OW 251
21677: PPUSH
21678: LD_VAR 0 10
21682: PPUSH
21683: LD_INT 2
21685: PPUSH
21686: CALL_OW 273
21690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21691: LD_VAR 0 11
21695: PPUSH
21696: LD_VAR 0 12
21700: PPUSH
21701: CALL_OW 488
21705: PUSH
21706: LD_VAR 0 11
21710: PPUSH
21711: LD_VAR 0 12
21715: PPUSH
21716: CALL_OW 428
21720: NOT
21721: AND
21722: IFFALSE 21745
// begin ComMoveXY ( tmp , _x , _y ) ;
21724: LD_VAR 0 13
21728: PPUSH
21729: LD_VAR 0 11
21733: PPUSH
21734: LD_VAR 0 12
21738: PPUSH
21739: CALL_OW 111
// break ;
21743: GO 21747
// end ; end ;
21745: GO 21632
21747: POP
21748: POP
// end ; end ;
21749: GO 21074
21751: POP
21752: POP
// end ;
21753: LD_VAR 0 8
21757: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21758: LD_INT 0
21760: PPUSH
// result := true ;
21761: LD_ADDR_VAR 0 3
21765: PUSH
21766: LD_INT 1
21768: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21769: LD_VAR 0 2
21773: PUSH
21774: LD_INT 24
21776: DOUBLE
21777: EQUAL
21778: IFTRUE 21788
21780: LD_INT 33
21782: DOUBLE
21783: EQUAL
21784: IFTRUE 21788
21786: GO 21813
21788: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21789: LD_ADDR_VAR 0 3
21793: PUSH
21794: LD_INT 32
21796: PPUSH
21797: LD_VAR 0 1
21801: PPUSH
21802: CALL_OW 321
21806: PUSH
21807: LD_INT 2
21809: EQUAL
21810: ST_TO_ADDR
21811: GO 22129
21813: LD_INT 20
21815: DOUBLE
21816: EQUAL
21817: IFTRUE 21821
21819: GO 21846
21821: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21822: LD_ADDR_VAR 0 3
21826: PUSH
21827: LD_INT 6
21829: PPUSH
21830: LD_VAR 0 1
21834: PPUSH
21835: CALL_OW 321
21839: PUSH
21840: LD_INT 2
21842: EQUAL
21843: ST_TO_ADDR
21844: GO 22129
21846: LD_INT 22
21848: DOUBLE
21849: EQUAL
21850: IFTRUE 21860
21852: LD_INT 36
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21885
21860: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21861: LD_ADDR_VAR 0 3
21865: PUSH
21866: LD_INT 15
21868: PPUSH
21869: LD_VAR 0 1
21873: PPUSH
21874: CALL_OW 321
21878: PUSH
21879: LD_INT 2
21881: EQUAL
21882: ST_TO_ADDR
21883: GO 22129
21885: LD_INT 30
21887: DOUBLE
21888: EQUAL
21889: IFTRUE 21893
21891: GO 21918
21893: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21894: LD_ADDR_VAR 0 3
21898: PUSH
21899: LD_INT 20
21901: PPUSH
21902: LD_VAR 0 1
21906: PPUSH
21907: CALL_OW 321
21911: PUSH
21912: LD_INT 2
21914: EQUAL
21915: ST_TO_ADDR
21916: GO 22129
21918: LD_INT 28
21920: DOUBLE
21921: EQUAL
21922: IFTRUE 21932
21924: LD_INT 21
21926: DOUBLE
21927: EQUAL
21928: IFTRUE 21932
21930: GO 21957
21932: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21933: LD_ADDR_VAR 0 3
21937: PUSH
21938: LD_INT 21
21940: PPUSH
21941: LD_VAR 0 1
21945: PPUSH
21946: CALL_OW 321
21950: PUSH
21951: LD_INT 2
21953: EQUAL
21954: ST_TO_ADDR
21955: GO 22129
21957: LD_INT 16
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 21990
21965: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21966: LD_ADDR_VAR 0 3
21970: PUSH
21971: LD_INT 84
21973: PPUSH
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 321
21983: PUSH
21984: LD_INT 2
21986: EQUAL
21987: ST_TO_ADDR
21988: GO 22129
21990: LD_INT 19
21992: DOUBLE
21993: EQUAL
21994: IFTRUE 22004
21996: LD_INT 23
21998: DOUBLE
21999: EQUAL
22000: IFTRUE 22004
22002: GO 22029
22004: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22005: LD_ADDR_VAR 0 3
22009: PUSH
22010: LD_INT 83
22012: PPUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 321
22022: PUSH
22023: LD_INT 2
22025: EQUAL
22026: ST_TO_ADDR
22027: GO 22129
22029: LD_INT 17
22031: DOUBLE
22032: EQUAL
22033: IFTRUE 22037
22035: GO 22062
22037: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22038: LD_ADDR_VAR 0 3
22042: PUSH
22043: LD_INT 39
22045: PPUSH
22046: LD_VAR 0 1
22050: PPUSH
22051: CALL_OW 321
22055: PUSH
22056: LD_INT 2
22058: EQUAL
22059: ST_TO_ADDR
22060: GO 22129
22062: LD_INT 18
22064: DOUBLE
22065: EQUAL
22066: IFTRUE 22070
22068: GO 22095
22070: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22071: LD_ADDR_VAR 0 3
22075: PUSH
22076: LD_INT 40
22078: PPUSH
22079: LD_VAR 0 1
22083: PPUSH
22084: CALL_OW 321
22088: PUSH
22089: LD_INT 2
22091: EQUAL
22092: ST_TO_ADDR
22093: GO 22129
22095: LD_INT 27
22097: DOUBLE
22098: EQUAL
22099: IFTRUE 22103
22101: GO 22128
22103: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22104: LD_ADDR_VAR 0 3
22108: PUSH
22109: LD_INT 35
22111: PPUSH
22112: LD_VAR 0 1
22116: PPUSH
22117: CALL_OW 321
22121: PUSH
22122: LD_INT 2
22124: EQUAL
22125: ST_TO_ADDR
22126: GO 22129
22128: POP
// end ;
22129: LD_VAR 0 3
22133: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22134: LD_INT 0
22136: PPUSH
22137: PPUSH
22138: PPUSH
22139: PPUSH
22140: PPUSH
22141: PPUSH
22142: PPUSH
22143: PPUSH
22144: PPUSH
22145: PPUSH
22146: PPUSH
// result := false ;
22147: LD_ADDR_VAR 0 6
22151: PUSH
22152: LD_INT 0
22154: ST_TO_ADDR
// if btype = b_depot then
22155: LD_VAR 0 2
22159: PUSH
22160: LD_INT 0
22162: EQUAL
22163: IFFALSE 22175
// begin result := true ;
22165: LD_ADDR_VAR 0 6
22169: PUSH
22170: LD_INT 1
22172: ST_TO_ADDR
// exit ;
22173: GO 23001
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22175: LD_VAR 0 1
22179: NOT
22180: PUSH
22181: LD_VAR 0 1
22185: PPUSH
22186: CALL_OW 266
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: IN
22201: NOT
22202: OR
22203: PUSH
22204: LD_VAR 0 2
22208: NOT
22209: OR
22210: PUSH
22211: LD_VAR 0 5
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: LD_INT 4
22230: PUSH
22231: LD_INT 5
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: IN
22242: NOT
22243: OR
22244: PUSH
22245: LD_VAR 0 3
22249: PPUSH
22250: LD_VAR 0 4
22254: PPUSH
22255: CALL_OW 488
22259: NOT
22260: OR
22261: IFFALSE 22265
// exit ;
22263: GO 23001
// side := GetSide ( depot ) ;
22265: LD_ADDR_VAR 0 9
22269: PUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 255
22279: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22280: LD_VAR 0 9
22284: PPUSH
22285: LD_VAR 0 2
22289: PPUSH
22290: CALL 21758 0 2
22294: NOT
22295: IFFALSE 22299
// exit ;
22297: GO 23001
// pom := GetBase ( depot ) ;
22299: LD_ADDR_VAR 0 10
22303: PUSH
22304: LD_VAR 0 1
22308: PPUSH
22309: CALL_OW 274
22313: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22314: LD_ADDR_VAR 0 11
22318: PUSH
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 248
22333: PPUSH
22334: CALL_OW 450
22338: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22339: LD_VAR 0 10
22343: PPUSH
22344: LD_INT 1
22346: PPUSH
22347: CALL_OW 275
22351: PUSH
22352: LD_VAR 0 11
22356: PUSH
22357: LD_INT 1
22359: ARRAY
22360: GREATEREQUAL
22361: PUSH
22362: LD_VAR 0 10
22366: PPUSH
22367: LD_INT 2
22369: PPUSH
22370: CALL_OW 275
22374: PUSH
22375: LD_VAR 0 11
22379: PUSH
22380: LD_INT 2
22382: ARRAY
22383: GREATEREQUAL
22384: AND
22385: PUSH
22386: LD_VAR 0 10
22390: PPUSH
22391: LD_INT 3
22393: PPUSH
22394: CALL_OW 275
22398: PUSH
22399: LD_VAR 0 11
22403: PUSH
22404: LD_INT 3
22406: ARRAY
22407: GREATEREQUAL
22408: AND
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 23001
// if GetBType ( depot ) = b_depot then
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 266
22423: PUSH
22424: LD_INT 0
22426: EQUAL
22427: IFFALSE 22439
// dist := 28 else
22429: LD_ADDR_VAR 0 14
22433: PUSH
22434: LD_INT 28
22436: ST_TO_ADDR
22437: GO 22447
// dist := 36 ;
22439: LD_ADDR_VAR 0 14
22443: PUSH
22444: LD_INT 36
22446: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22447: LD_VAR 0 1
22451: PPUSH
22452: LD_VAR 0 3
22456: PPUSH
22457: LD_VAR 0 4
22461: PPUSH
22462: CALL_OW 297
22466: PUSH
22467: LD_VAR 0 14
22471: GREATER
22472: IFFALSE 22476
// exit ;
22474: GO 23001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22476: LD_ADDR_VAR 0 12
22480: PUSH
22481: LD_VAR 0 2
22485: PPUSH
22486: LD_VAR 0 3
22490: PPUSH
22491: LD_VAR 0 4
22495: PPUSH
22496: LD_VAR 0 5
22500: PPUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL_OW 248
22510: PPUSH
22511: LD_INT 0
22513: PPUSH
22514: CALL 23006 0 6
22518: ST_TO_ADDR
// if not hexes then
22519: LD_VAR 0 12
22523: NOT
22524: IFFALSE 22528
// exit ;
22526: GO 23001
// hex := GetHexInfo ( x , y ) ;
22528: LD_ADDR_VAR 0 15
22532: PUSH
22533: LD_VAR 0 3
22537: PPUSH
22538: LD_VAR 0 4
22542: PPUSH
22543: CALL_OW 546
22547: ST_TO_ADDR
// if hex [ 1 ] then
22548: LD_VAR 0 15
22552: PUSH
22553: LD_INT 1
22555: ARRAY
22556: IFFALSE 22560
// exit ;
22558: GO 23001
// height := hex [ 2 ] ;
22560: LD_ADDR_VAR 0 13
22564: PUSH
22565: LD_VAR 0 15
22569: PUSH
22570: LD_INT 2
22572: ARRAY
22573: ST_TO_ADDR
// for i = 1 to hexes do
22574: LD_ADDR_VAR 0 7
22578: PUSH
22579: DOUBLE
22580: LD_INT 1
22582: DEC
22583: ST_TO_ADDR
22584: LD_VAR 0 12
22588: PUSH
22589: FOR_TO
22590: IFFALSE 22920
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22592: LD_VAR 0 12
22596: PUSH
22597: LD_VAR 0 7
22601: ARRAY
22602: PUSH
22603: LD_INT 1
22605: ARRAY
22606: PPUSH
22607: LD_VAR 0 12
22611: PUSH
22612: LD_VAR 0 7
22616: ARRAY
22617: PUSH
22618: LD_INT 2
22620: ARRAY
22621: PPUSH
22622: CALL_OW 488
22626: NOT
22627: PUSH
22628: LD_VAR 0 12
22632: PUSH
22633: LD_VAR 0 7
22637: ARRAY
22638: PUSH
22639: LD_INT 1
22641: ARRAY
22642: PPUSH
22643: LD_VAR 0 12
22647: PUSH
22648: LD_VAR 0 7
22652: ARRAY
22653: PUSH
22654: LD_INT 2
22656: ARRAY
22657: PPUSH
22658: CALL_OW 428
22662: PUSH
22663: LD_INT 0
22665: GREATER
22666: OR
22667: PUSH
22668: LD_VAR 0 12
22672: PUSH
22673: LD_VAR 0 7
22677: ARRAY
22678: PUSH
22679: LD_INT 1
22681: ARRAY
22682: PPUSH
22683: LD_VAR 0 12
22687: PUSH
22688: LD_VAR 0 7
22692: ARRAY
22693: PUSH
22694: LD_INT 2
22696: ARRAY
22697: PPUSH
22698: CALL_OW 351
22702: OR
22703: IFFALSE 22709
// exit ;
22705: POP
22706: POP
22707: GO 23001
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22709: LD_ADDR_VAR 0 8
22713: PUSH
22714: LD_VAR 0 12
22718: PUSH
22719: LD_VAR 0 7
22723: ARRAY
22724: PUSH
22725: LD_INT 1
22727: ARRAY
22728: PPUSH
22729: LD_VAR 0 12
22733: PUSH
22734: LD_VAR 0 7
22738: ARRAY
22739: PUSH
22740: LD_INT 2
22742: ARRAY
22743: PPUSH
22744: CALL_OW 546
22748: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22749: LD_VAR 0 8
22753: PUSH
22754: LD_INT 1
22756: ARRAY
22757: PUSH
22758: LD_VAR 0 8
22762: PUSH
22763: LD_INT 2
22765: ARRAY
22766: PUSH
22767: LD_VAR 0 13
22771: PUSH
22772: LD_INT 2
22774: PLUS
22775: GREATER
22776: OR
22777: PUSH
22778: LD_VAR 0 8
22782: PUSH
22783: LD_INT 2
22785: ARRAY
22786: PUSH
22787: LD_VAR 0 13
22791: PUSH
22792: LD_INT 2
22794: MINUS
22795: LESS
22796: OR
22797: PUSH
22798: LD_VAR 0 8
22802: PUSH
22803: LD_INT 3
22805: ARRAY
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: LD_INT 8
22812: PUSH
22813: LD_INT 9
22815: PUSH
22816: LD_INT 10
22818: PUSH
22819: LD_INT 11
22821: PUSH
22822: LD_INT 12
22824: PUSH
22825: LD_INT 13
22827: PUSH
22828: LD_INT 16
22830: PUSH
22831: LD_INT 17
22833: PUSH
22834: LD_INT 18
22836: PUSH
22837: LD_INT 19
22839: PUSH
22840: LD_INT 20
22842: PUSH
22843: LD_INT 21
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: IN
22861: NOT
22862: OR
22863: PUSH
22864: LD_VAR 0 8
22868: PUSH
22869: LD_INT 5
22871: ARRAY
22872: NOT
22873: OR
22874: PUSH
22875: LD_VAR 0 8
22879: PUSH
22880: LD_INT 6
22882: ARRAY
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 7
22892: PUSH
22893: LD_INT 9
22895: PUSH
22896: LD_INT 10
22898: PUSH
22899: LD_INT 11
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: IN
22910: NOT
22911: OR
22912: IFFALSE 22918
// exit ;
22914: POP
22915: POP
22916: GO 23001
// end ;
22918: GO 22589
22920: POP
22921: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22922: LD_VAR 0 9
22926: PPUSH
22927: LD_VAR 0 3
22931: PPUSH
22932: LD_VAR 0 4
22936: PPUSH
22937: LD_INT 20
22939: PPUSH
22940: CALL 14924 0 4
22944: PUSH
22945: LD_INT 4
22947: ARRAY
22948: IFFALSE 22952
// exit ;
22950: GO 23001
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22952: LD_VAR 0 2
22956: PUSH
22957: LD_INT 29
22959: PUSH
22960: LD_INT 30
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: IN
22967: PUSH
22968: LD_VAR 0 3
22972: PPUSH
22973: LD_VAR 0 4
22977: PPUSH
22978: LD_VAR 0 9
22982: PPUSH
22983: CALL_OW 440
22987: NOT
22988: AND
22989: IFFALSE 22993
// exit ;
22991: GO 23001
// result := true ;
22993: LD_ADDR_VAR 0 6
22997: PUSH
22998: LD_INT 1
23000: ST_TO_ADDR
// end ;
23001: LD_VAR 0 6
23005: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23006: LD_INT 0
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
23013: PPUSH
23014: PPUSH
23015: PPUSH
23016: PPUSH
23017: PPUSH
23018: PPUSH
23019: PPUSH
23020: PPUSH
23021: PPUSH
23022: PPUSH
23023: PPUSH
23024: PPUSH
23025: PPUSH
23026: PPUSH
23027: PPUSH
23028: PPUSH
23029: PPUSH
23030: PPUSH
23031: PPUSH
23032: PPUSH
23033: PPUSH
23034: PPUSH
23035: PPUSH
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
23040: PPUSH
23041: PPUSH
23042: PPUSH
23043: PPUSH
23044: PPUSH
23045: PPUSH
23046: PPUSH
23047: PPUSH
23048: PPUSH
23049: PPUSH
23050: PPUSH
23051: PPUSH
23052: PPUSH
23053: PPUSH
23054: PPUSH
23055: PPUSH
23056: PPUSH
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
23061: PPUSH
23062: PPUSH
23063: PPUSH
23064: PPUSH
23065: PPUSH
// result = [ ] ;
23066: LD_ADDR_VAR 0 7
23070: PUSH
23071: EMPTY
23072: ST_TO_ADDR
// temp_list = [ ] ;
23073: LD_ADDR_VAR 0 9
23077: PUSH
23078: EMPTY
23079: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23080: LD_VAR 0 4
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: LD_INT 4
23099: PUSH
23100: LD_INT 5
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: IN
23111: NOT
23112: PUSH
23113: LD_VAR 0 1
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: IN
23128: PUSH
23129: LD_VAR 0 5
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 3
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: IN
23148: NOT
23149: AND
23150: OR
23151: IFFALSE 23155
// exit ;
23153: GO 41546
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23155: LD_VAR 0 1
23159: PUSH
23160: LD_INT 6
23162: PUSH
23163: LD_INT 7
23165: PUSH
23166: LD_INT 8
23168: PUSH
23169: LD_INT 13
23171: PUSH
23172: LD_INT 12
23174: PUSH
23175: LD_INT 15
23177: PUSH
23178: LD_INT 11
23180: PUSH
23181: LD_INT 14
23183: PUSH
23184: LD_INT 10
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: IN
23198: IFFALSE 23208
// btype = b_lab ;
23200: LD_ADDR_VAR 0 1
23204: PUSH
23205: LD_INT 6
23207: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23208: LD_VAR 0 6
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: LD_INT 2
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: IN
23227: NOT
23228: PUSH
23229: LD_VAR 0 1
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: LD_INT 3
23245: PUSH
23246: LD_INT 6
23248: PUSH
23249: LD_INT 36
23251: PUSH
23252: LD_INT 4
23254: PUSH
23255: LD_INT 5
23257: PUSH
23258: LD_INT 31
23260: PUSH
23261: LD_INT 32
23263: PUSH
23264: LD_INT 33
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: IN
23280: NOT
23281: PUSH
23282: LD_VAR 0 6
23286: PUSH
23287: LD_INT 1
23289: EQUAL
23290: AND
23291: OR
23292: PUSH
23293: LD_VAR 0 1
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: LD_INT 3
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: IN
23308: NOT
23309: PUSH
23310: LD_VAR 0 6
23314: PUSH
23315: LD_INT 2
23317: EQUAL
23318: AND
23319: OR
23320: IFFALSE 23330
// mode = 0 ;
23322: LD_ADDR_VAR 0 6
23326: PUSH
23327: LD_INT 0
23329: ST_TO_ADDR
// case mode of 0 :
23330: LD_VAR 0 6
23334: PUSH
23335: LD_INT 0
23337: DOUBLE
23338: EQUAL
23339: IFTRUE 23343
23341: GO 34796
23343: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23344: LD_ADDR_VAR 0 11
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: LD_INT 2
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 2
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 0
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 0
23500: PUSH
23501: LD_INT 3
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23537: LD_ADDR_VAR 0 12
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 2
23660: NEG
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: NEG
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 2
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 3
23694: NEG
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 3
23705: NEG
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23733: LD_ADDR_VAR 0 13
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 0
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 1
23802: NEG
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 2
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 2
23868: NEG
23869: PUSH
23870: LD_INT 2
23872: NEG
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: LD_INT 3
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 3
23892: NEG
23893: PUSH
23894: LD_INT 2
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 3
23904: NEG
23905: PUSH
23906: LD_INT 3
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23932: LD_ADDR_VAR 0 14
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: LD_INT 2
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 2
24028: NEG
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: LD_INT 2
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: LD_INT 3
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 3
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24128: LD_ADDR_VAR 0 15
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: NEG
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 1
24277: NEG
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 3
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 3
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24321: LD_ADDR_VAR 0 16
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 0
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: LD_INT 2
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 2
24444: NEG
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 3
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 3
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 3
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24514: LD_ADDR_VAR 0 17
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 2
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 2
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: NEG
24714: PUSH
24715: LD_INT 2
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24744: LD_ADDR_VAR 0 18
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: LD_INT 2
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24974: LD_ADDR_VAR 0 19
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 1
25032: NEG
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 2
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: NEG
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: NEG
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: LD_INT 2
25177: NEG
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25204: LD_ADDR_VAR 0 20
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25434: LD_ADDR_VAR 0 21
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 2
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 2
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25664: LD_ADDR_VAR 0 22
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25894: LD_ADDR_VAR 0 23
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: LD_INT 3
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: PUSH
26119: LD_INT 3
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26174: LD_ADDR_VAR 0 24
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: NEG
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 2
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 2
26350: NEG
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: NEG
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: LD_INT 2
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 3
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 3
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26450: LD_ADDR_VAR 0 25
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 2
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 3
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 3
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: LD_INT 3
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26724: LD_ADDR_VAR 0 26
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: LD_INT 2
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 2
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 2
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: LD_INT 2
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 2
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 2
26911: NEG
26912: PUSH
26913: LD_INT 1
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: LD_INT 2
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 3
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 3
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 2
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27000: LD_ADDR_VAR 0 27
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 2
27222: NEG
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 3
27233: NEG
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 3
27245: NEG
27246: PUSH
27247: LD_INT 2
27249: NEG
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27280: LD_ADDR_VAR 0 28
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 2
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 2
27491: NEG
27492: PUSH
27493: LD_INT 3
27495: NEG
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: LD_INT 3
27507: NEG
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 3
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 3
27527: NEG
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27562: LD_ADDR_VAR 0 29
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 2
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: LD_INT 2
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: LD_INT 3
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 3
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: LD_INT 3
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 3
27806: NEG
27807: PUSH
27808: LD_INT 2
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27841: LD_ADDR_VAR 0 30
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 1
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: LD_INT 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 2
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: LD_INT 3
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 3
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 3
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 3
28084: NEG
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28119: LD_ADDR_VAR 0 31
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: LD_INT 2
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: LD_INT 3
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 3
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 3
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 3
28362: NEG
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28397: LD_ADDR_VAR 0 32
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 3
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: LD_INT 2
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 3
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: LD_INT 3
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 3
28640: NEG
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28675: LD_ADDR_VAR 0 33
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: LD_INT 3
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 3
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 3
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 3
28919: NEG
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28954: LD_ADDR_VAR 0 34
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 2
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 3
29199: NEG
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29234: LD_ADDR_VAR 0 35
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: NEG
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: NEG
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29346: LD_ADDR_VAR 0 36
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 1
29404: NEG
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: LD_INT 2
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29458: LD_ADDR_VAR 0 37
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29570: LD_ADDR_VAR 0 38
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: NEG
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29682: LD_ADDR_VAR 0 39
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29794: LD_ADDR_VAR 0 40
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29906: LD_ADDR_VAR 0 41
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: LD_INT 2
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 2
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: NEG
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: NEG
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: LD_INT 3
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 3
30180: NEG
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 3
30191: NEG
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 3
30203: NEG
30204: PUSH
30205: LD_INT 2
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: NEG
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30256: LD_ADDR_VAR 0 42
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: LD_INT 2
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 2
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 2
30422: NEG
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 3
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 2
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 3
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: LD_INT 3
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30606: LD_ADDR_VAR 0 43
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: NEG
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 2
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 2
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: NEG
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: NEG
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 2
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 3
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: NEG
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: NEG
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30954: LD_ADDR_VAR 0 44
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 2
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 3
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 3
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 3
31239: NEG
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 3
31251: NEG
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: LD_INT 3
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31304: LD_ADDR_VAR 0 45
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: NEG
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 2
31494: NEG
31495: PUSH
31496: LD_INT 3
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: LD_INT 3
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 3
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 2
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 3
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: LD_INT 3
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31654: LD_ADDR_VAR 0 46
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: LD_INT 2
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 2
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 3
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 3
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: NEG
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 3
31961: NEG
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32002: LD_ADDR_VAR 0 47
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 0
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32153: LD_ADDR_VAR 0 48
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 1
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: LD_INT 2
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 2
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32300: LD_ADDR_VAR 0 49
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32444: LD_ADDR_VAR 0 50
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32588: LD_ADDR_VAR 0 51
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 2
32700: NEG
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32735: LD_ADDR_VAR 0 52
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: NEG
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 2
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32886: LD_ADDR_VAR 0 53
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33116: LD_ADDR_VAR 0 54
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 0
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 2
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33346: LD_ADDR_VAR 0 55
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 2
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33576: LD_ADDR_VAR 0 56
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 2
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33806: LD_ADDR_VAR 0 57
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: LD_INT 2
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34036: LD_ADDR_VAR 0 58
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 2
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34266: LD_ADDR_VAR 0 59
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34354: LD_ADDR_VAR 0 60
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34442: LD_ADDR_VAR 0 61
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34530: LD_ADDR_VAR 0 62
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34618: LD_ADDR_VAR 0 63
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34706: LD_ADDR_VAR 0 64
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: ST_TO_ADDR
// end ; 1 :
34794: GO 40691
34796: LD_INT 1
34798: DOUBLE
34799: EQUAL
34800: IFTRUE 34804
34802: GO 37427
34804: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34805: LD_ADDR_VAR 0 11
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: LD_INT 3
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34849: LD_ADDR_VAR 0 12
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34890: LD_ADDR_VAR 0 13
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34930: LD_ADDR_VAR 0 14
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: LIST
34970: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34971: LD_ADDR_VAR 0 15
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 3
34989: NEG
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 3
35000: NEG
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: LIST
35014: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35015: LD_ADDR_VAR 0 16
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 3
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 3
35034: NEG
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: NEG
35047: PUSH
35048: LD_INT 3
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35061: LD_ADDR_VAR 0 17
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: LD_INT 3
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 3
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35105: LD_ADDR_VAR 0 18
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 3
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35146: LD_ADDR_VAR 0 19
35150: PUSH
35151: LD_INT 3
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 3
35163: PUSH
35164: LD_INT 3
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: LD_INT 3
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35186: LD_ADDR_VAR 0 20
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: LD_INT 3
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: LD_INT 3
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35227: LD_ADDR_VAR 0 21
35231: PUSH
35232: LD_INT 2
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 3
35245: NEG
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 3
35256: NEG
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35271: LD_ADDR_VAR 0 22
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 3
35290: NEG
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 3
35302: NEG
35303: PUSH
35304: LD_INT 3
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35317: LD_ADDR_VAR 0 23
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 3
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 4
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: LD_INT 3
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35361: LD_ADDR_VAR 0 24
35365: PUSH
35366: LD_INT 3
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 3
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 4
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35402: LD_ADDR_VAR 0 25
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 4
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 3
35429: PUSH
35430: LD_INT 4
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35442: LD_ADDR_VAR 0 26
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: LD_INT 3
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 4
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: LD_INT 3
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35483: LD_ADDR_VAR 0 27
35487: PUSH
35488: LD_INT 3
35490: NEG
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 3
35501: NEG
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 4
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35527: LD_ADDR_VAR 0 28
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: LD_INT 3
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: NEG
35547: PUSH
35548: LD_INT 4
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 4
35558: NEG
35559: PUSH
35560: LD_INT 3
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35573: LD_ADDR_VAR 0 29
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 3
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: LD_INT 4
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 4
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 3
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: LD_INT 5
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: LD_INT 5
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 4
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: LD_INT 6
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 6
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 5
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35728: LD_ADDR_VAR 0 30
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 3
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 3
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 3
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 4
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 4
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 4
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 5
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 5
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 5
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 6
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 6
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35871: LD_ADDR_VAR 0 31
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 3
35888: PUSH
35889: LD_INT 3
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: LD_INT 3
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 4
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 4
35918: PUSH
35919: LD_INT 4
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: LD_INT 4
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 5
35938: PUSH
35939: LD_INT 4
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 5
35948: PUSH
35949: LD_INT 5
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 4
35958: PUSH
35959: LD_INT 5
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 6
35968: PUSH
35969: LD_INT 5
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 6
35978: PUSH
35979: LD_INT 6
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 5
35988: PUSH
35989: LD_INT 6
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36010: LD_ADDR_VAR 0 32
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 3
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 4
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 4
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: LD_INT 3
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 5
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 5
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: LD_INT 4
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 6
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 6
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 5
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36153: LD_ADDR_VAR 0 33
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 3
36171: NEG
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 3
36182: NEG
36183: PUSH
36184: LD_INT 1
36186: NEG
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 3
36194: NEG
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 4
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 4
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 4
36228: NEG
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 5
36239: NEG
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 5
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 5
36262: NEG
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 6
36273: NEG
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 6
36284: NEG
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36308: LD_ADDR_VAR 0 34
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: LD_INT 3
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 3
36327: NEG
36328: PUSH
36329: LD_INT 2
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 3
36339: NEG
36340: PUSH
36341: LD_INT 3
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 3
36351: NEG
36352: PUSH
36353: LD_INT 4
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 4
36363: NEG
36364: PUSH
36365: LD_INT 3
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 4
36375: NEG
36376: PUSH
36377: LD_INT 4
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 4
36387: NEG
36388: PUSH
36389: LD_INT 5
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 5
36399: NEG
36400: PUSH
36401: LD_INT 4
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 5
36411: NEG
36412: PUSH
36413: LD_INT 5
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 5
36423: NEG
36424: PUSH
36425: LD_INT 6
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 6
36435: NEG
36436: PUSH
36437: LD_INT 5
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 6
36447: NEG
36448: PUSH
36449: LD_INT 6
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36471: LD_ADDR_VAR 0 41
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 2
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 3
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 2
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36515: LD_ADDR_VAR 0 42
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 3
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36556: LD_ADDR_VAR 0 43
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: LD_INT 3
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36596: LD_ADDR_VAR 0 44
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 3
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36637: LD_ADDR_VAR 0 45
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 3
36666: NEG
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36681: LD_ADDR_VAR 0 46
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: LD_INT 3
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 3
36712: NEG
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36727: LD_ADDR_VAR 0 47
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: LD_INT 3
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: LD_INT 3
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36760: LD_ADDR_VAR 0 48
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 2
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 2
36778: PUSH
36779: LD_INT 1
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36791: LD_ADDR_VAR 0 49
36795: PUSH
36796: LD_INT 3
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 3
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36820: LD_ADDR_VAR 0 50
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: LD_INT 3
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 3
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36849: LD_ADDR_VAR 0 51
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 2
36867: NEG
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36880: LD_ADDR_VAR 0 52
36884: PUSH
36885: LD_INT 3
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 3
36899: NEG
36900: PUSH
36901: LD_INT 2
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36913: LD_ADDR_VAR 0 53
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: LD_INT 3
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 3
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36957: LD_ADDR_VAR 0 54
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 3
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36998: LD_ADDR_VAR 0 55
37002: PUSH
37003: LD_INT 3
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37038: LD_ADDR_VAR 0 56
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 3
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37079: LD_ADDR_VAR 0 57
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 3
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37123: LD_ADDR_VAR 0 58
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: LD_INT 3
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 3
37142: NEG
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: LD_INT 3
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37169: LD_ADDR_VAR 0 59
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37213: LD_ADDR_VAR 0 60
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: LIST
37253: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37254: LD_ADDR_VAR 0 61
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: LD_INT 2
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37294: LD_ADDR_VAR 0 62
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37335: LD_ADDR_VAR 0 63
37339: PUSH
37340: LD_INT 1
37342: NEG
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37379: LD_ADDR_VAR 0 64
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: LD_INT 2
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// end ; 2 :
37425: GO 40691
37427: LD_INT 2
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37435
37433: GO 40690
37435: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37436: LD_ADDR_VAR 0 29
37440: PUSH
37441: LD_INT 4
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 4
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 5
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 5
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 4
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 5
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 3
37536: PUSH
37537: LD_INT 3
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 3
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 4
37556: PUSH
37557: LD_INT 3
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 4
37566: PUSH
37567: LD_INT 4
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 4
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 4
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 4
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 4
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: LD_INT 4
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: LD_INT 5
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 5
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: LD_INT 4
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: LD_INT 5
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: LD_INT 3
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 3
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 3
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 3
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 4
37775: NEG
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 4
37798: NEG
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 4
37821: NEG
37822: PUSH
37823: LD_INT 4
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 4
37833: NEG
37834: PUSH
37835: LD_INT 5
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: NEG
37846: PUSH
37847: LD_INT 4
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: NEG
37858: PUSH
37859: LD_INT 3
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 4
37869: NEG
37870: PUSH
37871: LD_INT 3
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 5
37881: NEG
37882: PUSH
37883: LD_INT 4
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 5
37893: NEG
37894: PUSH
37895: LD_INT 5
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 3
37905: NEG
37906: PUSH
37907: LD_INT 5
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 5
37917: NEG
37918: PUSH
37919: LD_INT 3
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37974: LD_ADDR_VAR 0 30
37978: PUSH
37979: LD_INT 4
37981: PUSH
37982: LD_INT 4
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 4
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 5
38001: PUSH
38002: LD_INT 4
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 5
38011: PUSH
38012: LD_INT 5
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 4
38021: PUSH
38022: LD_INT 5
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 3
38031: PUSH
38032: LD_INT 4
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 3
38041: PUSH
38042: LD_INT 3
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 5
38051: PUSH
38052: LD_INT 3
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 5
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: LD_INT 3
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 4
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 4
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 3
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 4
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 4
38164: NEG
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 4
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 3
38187: NEG
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 3
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 4
38209: NEG
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 5
38220: NEG
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 5
38231: NEG
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 5
38243: NEG
38244: PUSH
38245: LD_INT 2
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 3
38266: NEG
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: LD_INT 4
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: NEG
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 3
38314: NEG
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 4
38326: NEG
38327: PUSH
38328: LD_INT 3
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 4
38338: NEG
38339: PUSH
38340: LD_INT 4
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: LD_INT 4
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 4
38362: NEG
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 4
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: LD_INT 5
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 4
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 3
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: LD_INT 4
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: LD_INT 5
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 2
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 5
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38521: LD_ADDR_VAR 0 31
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 4
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 3
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 4
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 5
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 5
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: LD_INT 4
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 5
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 3
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 3
38666: NEG
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 4
38677: NEG
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 4
38688: NEG
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 4
38700: NEG
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 4
38723: NEG
38724: PUSH
38725: LD_INT 4
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 4
38735: NEG
38736: PUSH
38737: LD_INT 5
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: LD_INT 4
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 3
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 4
38771: NEG
38772: PUSH
38773: LD_INT 3
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 5
38783: NEG
38784: PUSH
38785: LD_INT 4
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 5
38795: NEG
38796: PUSH
38797: LD_INT 5
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 5
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 5
38819: NEG
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 4
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 3
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: LD_INT 3
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 4
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: LD_INT 4
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 4
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 4
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 5
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 5
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 4
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 3
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 5
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39071: LD_ADDR_VAR 0 32
39075: PUSH
39076: LD_INT 4
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 4
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 3
39101: NEG
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 4
39123: NEG
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 5
39134: NEG
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 5
39145: NEG
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 5
39157: NEG
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 3
39169: NEG
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 3
39180: NEG
39181: PUSH
39182: LD_INT 3
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: NEG
39193: PUSH
39194: LD_INT 4
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: LD_INT 3
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 3
39228: NEG
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 4
39240: NEG
39241: PUSH
39242: LD_INT 3
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 4
39252: NEG
39253: PUSH
39254: LD_INT 4
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: LD_INT 4
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 4
39276: NEG
39277: PUSH
39278: LD_INT 2
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 4
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 5
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 4
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 3
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 4
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: LD_INT 5
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 3
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: LD_INT 5
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 4
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 4
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 4
39483: PUSH
39484: LD_INT 4
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 4
39493: PUSH
39494: LD_INT 3
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 5
39503: PUSH
39504: LD_INT 4
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 5
39513: PUSH
39514: LD_INT 5
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 4
39523: PUSH
39524: LD_INT 5
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 3
39533: PUSH
39534: LD_INT 4
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 3
39543: PUSH
39544: LD_INT 3
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 5
39553: PUSH
39554: LD_INT 3
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: LD_INT 5
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39618: LD_ADDR_VAR 0 33
39622: PUSH
39623: LD_INT 4
39625: NEG
39626: PUSH
39627: LD_INT 4
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 4
39637: NEG
39638: PUSH
39639: LD_INT 5
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: NEG
39650: PUSH
39651: LD_INT 4
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 3
39661: NEG
39662: PUSH
39663: LD_INT 3
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 4
39673: NEG
39674: PUSH
39675: LD_INT 3
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 5
39685: NEG
39686: PUSH
39687: LD_INT 4
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 5
39697: NEG
39698: PUSH
39699: LD_INT 5
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 3
39709: NEG
39710: PUSH
39711: LD_INT 5
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 5
39721: NEG
39722: PUSH
39723: LD_INT 3
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 3
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 4
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 3
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 3
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 4
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: LD_INT 4
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 4
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 4
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 5
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 5
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 4
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 3
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 3
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 5
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 4
39948: PUSH
39949: LD_INT 3
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 4
39958: PUSH
39959: LD_INT 4
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 4
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 4
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: LD_INT 4
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: LD_INT 4
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 4
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 5
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 5
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 4
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 3
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 5
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40156: LD_ADDR_VAR 0 34
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: LD_INT 4
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 5
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: LD_INT 4
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 3
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: LD_INT 3
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 4
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 5
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 3
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: LD_INT 5
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 4
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 4
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 4
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 4
40358: PUSH
40359: LD_INT 4
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 4
40368: PUSH
40369: LD_INT 3
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 5
40378: PUSH
40379: LD_INT 4
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 5
40388: PUSH
40389: LD_INT 5
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 4
40398: PUSH
40399: LD_INT 5
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: LD_INT 4
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 3
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 5
40428: PUSH
40429: LD_INT 3
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 5
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 4
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: LD_INT 2
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 4
40541: NEG
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 4
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 4
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 5
40597: NEG
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 5
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 5
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 3
40632: NEG
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: ST_TO_ADDR
// end ; end ;
40688: GO 40691
40690: POP
// case btype of b_depot , b_warehouse :
40691: LD_VAR 0 1
40695: PUSH
40696: LD_INT 0
40698: DOUBLE
40699: EQUAL
40700: IFTRUE 40710
40702: LD_INT 1
40704: DOUBLE
40705: EQUAL
40706: IFTRUE 40710
40708: GO 40911
40710: POP
// case nation of nation_american :
40711: LD_VAR 0 5
40715: PUSH
40716: LD_INT 1
40718: DOUBLE
40719: EQUAL
40720: IFTRUE 40724
40722: GO 40780
40724: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40725: LD_ADDR_VAR 0 9
40729: PUSH
40730: LD_VAR 0 11
40734: PUSH
40735: LD_VAR 0 12
40739: PUSH
40740: LD_VAR 0 13
40744: PUSH
40745: LD_VAR 0 14
40749: PUSH
40750: LD_VAR 0 15
40754: PUSH
40755: LD_VAR 0 16
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: PUSH
40768: LD_VAR 0 4
40772: PUSH
40773: LD_INT 1
40775: PLUS
40776: ARRAY
40777: ST_TO_ADDR
40778: GO 40909
40780: LD_INT 2
40782: DOUBLE
40783: EQUAL
40784: IFTRUE 40788
40786: GO 40844
40788: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40789: LD_ADDR_VAR 0 9
40793: PUSH
40794: LD_VAR 0 17
40798: PUSH
40799: LD_VAR 0 18
40803: PUSH
40804: LD_VAR 0 19
40808: PUSH
40809: LD_VAR 0 20
40813: PUSH
40814: LD_VAR 0 21
40818: PUSH
40819: LD_VAR 0 22
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: PUSH
40832: LD_VAR 0 4
40836: PUSH
40837: LD_INT 1
40839: PLUS
40840: ARRAY
40841: ST_TO_ADDR
40842: GO 40909
40844: LD_INT 3
40846: DOUBLE
40847: EQUAL
40848: IFTRUE 40852
40850: GO 40908
40852: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40853: LD_ADDR_VAR 0 9
40857: PUSH
40858: LD_VAR 0 23
40862: PUSH
40863: LD_VAR 0 24
40867: PUSH
40868: LD_VAR 0 25
40872: PUSH
40873: LD_VAR 0 26
40877: PUSH
40878: LD_VAR 0 27
40882: PUSH
40883: LD_VAR 0 28
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: PUSH
40896: LD_VAR 0 4
40900: PUSH
40901: LD_INT 1
40903: PLUS
40904: ARRAY
40905: ST_TO_ADDR
40906: GO 40909
40908: POP
40909: GO 41464
40911: LD_INT 2
40913: DOUBLE
40914: EQUAL
40915: IFTRUE 40925
40917: LD_INT 3
40919: DOUBLE
40920: EQUAL
40921: IFTRUE 40925
40923: GO 40981
40925: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40926: LD_ADDR_VAR 0 9
40930: PUSH
40931: LD_VAR 0 29
40935: PUSH
40936: LD_VAR 0 30
40940: PUSH
40941: LD_VAR 0 31
40945: PUSH
40946: LD_VAR 0 32
40950: PUSH
40951: LD_VAR 0 33
40955: PUSH
40956: LD_VAR 0 34
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: PUSH
40969: LD_VAR 0 4
40973: PUSH
40974: LD_INT 1
40976: PLUS
40977: ARRAY
40978: ST_TO_ADDR
40979: GO 41464
40981: LD_INT 16
40983: DOUBLE
40984: EQUAL
40985: IFTRUE 41043
40987: LD_INT 17
40989: DOUBLE
40990: EQUAL
40991: IFTRUE 41043
40993: LD_INT 18
40995: DOUBLE
40996: EQUAL
40997: IFTRUE 41043
40999: LD_INT 19
41001: DOUBLE
41002: EQUAL
41003: IFTRUE 41043
41005: LD_INT 22
41007: DOUBLE
41008: EQUAL
41009: IFTRUE 41043
41011: LD_INT 20
41013: DOUBLE
41014: EQUAL
41015: IFTRUE 41043
41017: LD_INT 21
41019: DOUBLE
41020: EQUAL
41021: IFTRUE 41043
41023: LD_INT 23
41025: DOUBLE
41026: EQUAL
41027: IFTRUE 41043
41029: LD_INT 24
41031: DOUBLE
41032: EQUAL
41033: IFTRUE 41043
41035: LD_INT 25
41037: DOUBLE
41038: EQUAL
41039: IFTRUE 41043
41041: GO 41099
41043: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41044: LD_ADDR_VAR 0 9
41048: PUSH
41049: LD_VAR 0 35
41053: PUSH
41054: LD_VAR 0 36
41058: PUSH
41059: LD_VAR 0 37
41063: PUSH
41064: LD_VAR 0 38
41068: PUSH
41069: LD_VAR 0 39
41073: PUSH
41074: LD_VAR 0 40
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: PUSH
41087: LD_VAR 0 4
41091: PUSH
41092: LD_INT 1
41094: PLUS
41095: ARRAY
41096: ST_TO_ADDR
41097: GO 41464
41099: LD_INT 6
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41155
41105: LD_INT 7
41107: DOUBLE
41108: EQUAL
41109: IFTRUE 41155
41111: LD_INT 8
41113: DOUBLE
41114: EQUAL
41115: IFTRUE 41155
41117: LD_INT 13
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41155
41123: LD_INT 12
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41155
41129: LD_INT 15
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41155
41135: LD_INT 11
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41155
41141: LD_INT 14
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41155
41147: LD_INT 10
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 41211
41155: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41156: LD_ADDR_VAR 0 9
41160: PUSH
41161: LD_VAR 0 41
41165: PUSH
41166: LD_VAR 0 42
41170: PUSH
41171: LD_VAR 0 43
41175: PUSH
41176: LD_VAR 0 44
41180: PUSH
41181: LD_VAR 0 45
41185: PUSH
41186: LD_VAR 0 46
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: PUSH
41199: LD_VAR 0 4
41203: PUSH
41204: LD_INT 1
41206: PLUS
41207: ARRAY
41208: ST_TO_ADDR
41209: GO 41464
41211: LD_INT 36
41213: DOUBLE
41214: EQUAL
41215: IFTRUE 41219
41217: GO 41275
41219: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41220: LD_ADDR_VAR 0 9
41224: PUSH
41225: LD_VAR 0 47
41229: PUSH
41230: LD_VAR 0 48
41234: PUSH
41235: LD_VAR 0 49
41239: PUSH
41240: LD_VAR 0 50
41244: PUSH
41245: LD_VAR 0 51
41249: PUSH
41250: LD_VAR 0 52
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: PUSH
41263: LD_VAR 0 4
41267: PUSH
41268: LD_INT 1
41270: PLUS
41271: ARRAY
41272: ST_TO_ADDR
41273: GO 41464
41275: LD_INT 4
41277: DOUBLE
41278: EQUAL
41279: IFTRUE 41301
41281: LD_INT 5
41283: DOUBLE
41284: EQUAL
41285: IFTRUE 41301
41287: LD_INT 34
41289: DOUBLE
41290: EQUAL
41291: IFTRUE 41301
41293: LD_INT 37
41295: DOUBLE
41296: EQUAL
41297: IFTRUE 41301
41299: GO 41357
41301: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41302: LD_ADDR_VAR 0 9
41306: PUSH
41307: LD_VAR 0 53
41311: PUSH
41312: LD_VAR 0 54
41316: PUSH
41317: LD_VAR 0 55
41321: PUSH
41322: LD_VAR 0 56
41326: PUSH
41327: LD_VAR 0 57
41331: PUSH
41332: LD_VAR 0 58
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: PUSH
41345: LD_VAR 0 4
41349: PUSH
41350: LD_INT 1
41352: PLUS
41353: ARRAY
41354: ST_TO_ADDR
41355: GO 41464
41357: LD_INT 31
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41407
41363: LD_INT 32
41365: DOUBLE
41366: EQUAL
41367: IFTRUE 41407
41369: LD_INT 33
41371: DOUBLE
41372: EQUAL
41373: IFTRUE 41407
41375: LD_INT 27
41377: DOUBLE
41378: EQUAL
41379: IFTRUE 41407
41381: LD_INT 26
41383: DOUBLE
41384: EQUAL
41385: IFTRUE 41407
41387: LD_INT 28
41389: DOUBLE
41390: EQUAL
41391: IFTRUE 41407
41393: LD_INT 29
41395: DOUBLE
41396: EQUAL
41397: IFTRUE 41407
41399: LD_INT 30
41401: DOUBLE
41402: EQUAL
41403: IFTRUE 41407
41405: GO 41463
41407: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41408: LD_ADDR_VAR 0 9
41412: PUSH
41413: LD_VAR 0 59
41417: PUSH
41418: LD_VAR 0 60
41422: PUSH
41423: LD_VAR 0 61
41427: PUSH
41428: LD_VAR 0 62
41432: PUSH
41433: LD_VAR 0 63
41437: PUSH
41438: LD_VAR 0 64
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: PUSH
41451: LD_VAR 0 4
41455: PUSH
41456: LD_INT 1
41458: PLUS
41459: ARRAY
41460: ST_TO_ADDR
41461: GO 41464
41463: POP
// temp_list2 = [ ] ;
41464: LD_ADDR_VAR 0 10
41468: PUSH
41469: EMPTY
41470: ST_TO_ADDR
// for i in temp_list do
41471: LD_ADDR_VAR 0 8
41475: PUSH
41476: LD_VAR 0 9
41480: PUSH
41481: FOR_IN
41482: IFFALSE 41534
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41484: LD_ADDR_VAR 0 10
41488: PUSH
41489: LD_VAR 0 10
41493: PUSH
41494: LD_VAR 0 8
41498: PUSH
41499: LD_INT 1
41501: ARRAY
41502: PUSH
41503: LD_VAR 0 2
41507: PLUS
41508: PUSH
41509: LD_VAR 0 8
41513: PUSH
41514: LD_INT 2
41516: ARRAY
41517: PUSH
41518: LD_VAR 0 3
41522: PLUS
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: EMPTY
41529: LIST
41530: ADD
41531: ST_TO_ADDR
41532: GO 41481
41534: POP
41535: POP
// result = temp_list2 ;
41536: LD_ADDR_VAR 0 7
41540: PUSH
41541: LD_VAR 0 10
41545: ST_TO_ADDR
// end ;
41546: LD_VAR 0 7
41550: RET
// export function EnemyInRange ( unit , dist ) ; begin
41551: LD_INT 0
41553: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 255
41568: PPUSH
41569: LD_VAR 0 1
41573: PPUSH
41574: CALL_OW 250
41578: PPUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: CALL_OW 251
41588: PPUSH
41589: LD_VAR 0 2
41593: PPUSH
41594: CALL 14924 0 4
41598: PUSH
41599: LD_INT 4
41601: ARRAY
41602: ST_TO_ADDR
// end ;
41603: LD_VAR 0 3
41607: RET
// export function PlayerSeeMe ( unit ) ; begin
41608: LD_INT 0
41610: PPUSH
// result := See ( your_side , unit ) ;
41611: LD_ADDR_VAR 0 2
41615: PUSH
41616: LD_OWVAR 2
41620: PPUSH
41621: LD_VAR 0 1
41625: PPUSH
41626: CALL_OW 292
41630: ST_TO_ADDR
// end ;
41631: LD_VAR 0 2
41635: RET
// export function ReverseDir ( unit ) ; begin
41636: LD_INT 0
41638: PPUSH
// if not unit then
41639: LD_VAR 0 1
41643: NOT
41644: IFFALSE 41648
// exit ;
41646: GO 41671
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41648: LD_ADDR_VAR 0 2
41652: PUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: CALL_OW 254
41662: PUSH
41663: LD_INT 3
41665: PLUS
41666: PUSH
41667: LD_INT 6
41669: MOD
41670: ST_TO_ADDR
// end ;
41671: LD_VAR 0 2
41675: RET
// export function ReverseArray ( array ) ; var i ; begin
41676: LD_INT 0
41678: PPUSH
41679: PPUSH
// if not array then
41680: LD_VAR 0 1
41684: NOT
41685: IFFALSE 41689
// exit ;
41687: GO 41744
// result := [ ] ;
41689: LD_ADDR_VAR 0 2
41693: PUSH
41694: EMPTY
41695: ST_TO_ADDR
// for i := array downto 1 do
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: DOUBLE
41702: LD_VAR 0 1
41706: INC
41707: ST_TO_ADDR
41708: LD_INT 1
41710: PUSH
41711: FOR_DOWNTO
41712: IFFALSE 41742
// result := Join ( result , array [ i ] ) ;
41714: LD_ADDR_VAR 0 2
41718: PUSH
41719: LD_VAR 0 2
41723: PPUSH
41724: LD_VAR 0 1
41728: PUSH
41729: LD_VAR 0 3
41733: ARRAY
41734: PPUSH
41735: CALL 46389 0 2
41739: ST_TO_ADDR
41740: GO 41711
41742: POP
41743: POP
// end ;
41744: LD_VAR 0 2
41748: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41749: LD_INT 0
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
// if not unit or not hexes then
41757: LD_VAR 0 1
41761: NOT
41762: PUSH
41763: LD_VAR 0 2
41767: NOT
41768: OR
41769: IFFALSE 41773
// exit ;
41771: GO 41896
// dist := 9999 ;
41773: LD_ADDR_VAR 0 5
41777: PUSH
41778: LD_INT 9999
41780: ST_TO_ADDR
// for i = 1 to hexes do
41781: LD_ADDR_VAR 0 4
41785: PUSH
41786: DOUBLE
41787: LD_INT 1
41789: DEC
41790: ST_TO_ADDR
41791: LD_VAR 0 2
41795: PUSH
41796: FOR_TO
41797: IFFALSE 41884
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41799: LD_ADDR_VAR 0 6
41803: PUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: LD_VAR 0 2
41813: PUSH
41814: LD_VAR 0 4
41818: ARRAY
41819: PUSH
41820: LD_INT 1
41822: ARRAY
41823: PPUSH
41824: LD_VAR 0 2
41828: PUSH
41829: LD_VAR 0 4
41833: ARRAY
41834: PUSH
41835: LD_INT 2
41837: ARRAY
41838: PPUSH
41839: CALL_OW 297
41843: ST_TO_ADDR
// if tdist < dist then
41844: LD_VAR 0 6
41848: PUSH
41849: LD_VAR 0 5
41853: LESS
41854: IFFALSE 41882
// begin hex := hexes [ i ] ;
41856: LD_ADDR_VAR 0 8
41860: PUSH
41861: LD_VAR 0 2
41865: PUSH
41866: LD_VAR 0 4
41870: ARRAY
41871: ST_TO_ADDR
// dist := tdist ;
41872: LD_ADDR_VAR 0 5
41876: PUSH
41877: LD_VAR 0 6
41881: ST_TO_ADDR
// end ; end ;
41882: GO 41796
41884: POP
41885: POP
// result := hex ;
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_VAR 0 8
41895: ST_TO_ADDR
// end ;
41896: LD_VAR 0 3
41900: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41901: LD_INT 0
41903: PPUSH
41904: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41905: LD_VAR 0 1
41909: NOT
41910: PUSH
41911: LD_VAR 0 1
41915: PUSH
41916: LD_INT 21
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 23
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PPUSH
41940: CALL_OW 69
41944: IN
41945: NOT
41946: OR
41947: IFFALSE 41951
// exit ;
41949: GO 41998
// for i = 1 to 3 do
41951: LD_ADDR_VAR 0 3
41955: PUSH
41956: DOUBLE
41957: LD_INT 1
41959: DEC
41960: ST_TO_ADDR
41961: LD_INT 3
41963: PUSH
41964: FOR_TO
41965: IFFALSE 41996
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41967: LD_VAR 0 1
41971: PPUSH
41972: CALL_OW 250
41976: PPUSH
41977: LD_VAR 0 1
41981: PPUSH
41982: CALL_OW 251
41986: PPUSH
41987: LD_INT 1
41989: PPUSH
41990: CALL_OW 453
41994: GO 41964
41996: POP
41997: POP
// end ;
41998: LD_VAR 0 2
42002: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42003: LD_INT 0
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
// if not unit or not enemy_unit then
42011: LD_VAR 0 1
42015: NOT
42016: PUSH
42017: LD_VAR 0 2
42021: NOT
42022: OR
42023: IFFALSE 42027
// exit ;
42025: GO 42494
// if GetLives ( i ) < 250 then
42027: LD_VAR 0 4
42031: PPUSH
42032: CALL_OW 256
42036: PUSH
42037: LD_INT 250
42039: LESS
42040: IFFALSE 42053
// begin ComAutodestruct ( i ) ;
42042: LD_VAR 0 4
42046: PPUSH
42047: CALL 41901 0 1
// exit ;
42051: GO 42494
// end ; x := GetX ( enemy_unit ) ;
42053: LD_ADDR_VAR 0 7
42057: PUSH
42058: LD_VAR 0 2
42062: PPUSH
42063: CALL_OW 250
42067: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42068: LD_ADDR_VAR 0 8
42072: PUSH
42073: LD_VAR 0 2
42077: PPUSH
42078: CALL_OW 251
42082: ST_TO_ADDR
// if not x or not y then
42083: LD_VAR 0 7
42087: NOT
42088: PUSH
42089: LD_VAR 0 8
42093: NOT
42094: OR
42095: IFFALSE 42099
// exit ;
42097: GO 42494
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42099: LD_ADDR_VAR 0 6
42103: PUSH
42104: LD_VAR 0 7
42108: PPUSH
42109: LD_INT 0
42111: PPUSH
42112: LD_INT 4
42114: PPUSH
42115: CALL_OW 272
42119: PUSH
42120: LD_VAR 0 8
42124: PPUSH
42125: LD_INT 0
42127: PPUSH
42128: LD_INT 4
42130: PPUSH
42131: CALL_OW 273
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_VAR 0 7
42144: PPUSH
42145: LD_INT 1
42147: PPUSH
42148: LD_INT 4
42150: PPUSH
42151: CALL_OW 272
42155: PUSH
42156: LD_VAR 0 8
42160: PPUSH
42161: LD_INT 1
42163: PPUSH
42164: LD_INT 4
42166: PPUSH
42167: CALL_OW 273
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_VAR 0 7
42180: PPUSH
42181: LD_INT 2
42183: PPUSH
42184: LD_INT 4
42186: PPUSH
42187: CALL_OW 272
42191: PUSH
42192: LD_VAR 0 8
42196: PPUSH
42197: LD_INT 2
42199: PPUSH
42200: LD_INT 4
42202: PPUSH
42203: CALL_OW 273
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_VAR 0 7
42216: PPUSH
42217: LD_INT 3
42219: PPUSH
42220: LD_INT 4
42222: PPUSH
42223: CALL_OW 272
42227: PUSH
42228: LD_VAR 0 8
42232: PPUSH
42233: LD_INT 3
42235: PPUSH
42236: LD_INT 4
42238: PPUSH
42239: CALL_OW 273
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_VAR 0 7
42252: PPUSH
42253: LD_INT 4
42255: PPUSH
42256: LD_INT 4
42258: PPUSH
42259: CALL_OW 272
42263: PUSH
42264: LD_VAR 0 8
42268: PPUSH
42269: LD_INT 4
42271: PPUSH
42272: LD_INT 4
42274: PPUSH
42275: CALL_OW 273
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_VAR 0 7
42288: PPUSH
42289: LD_INT 5
42291: PPUSH
42292: LD_INT 4
42294: PPUSH
42295: CALL_OW 272
42299: PUSH
42300: LD_VAR 0 8
42304: PPUSH
42305: LD_INT 5
42307: PPUSH
42308: LD_INT 4
42310: PPUSH
42311: CALL_OW 273
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// for i = tmp downto 1 do
42328: LD_ADDR_VAR 0 4
42332: PUSH
42333: DOUBLE
42334: LD_VAR 0 6
42338: INC
42339: ST_TO_ADDR
42340: LD_INT 1
42342: PUSH
42343: FOR_DOWNTO
42344: IFFALSE 42445
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42346: LD_VAR 0 6
42350: PUSH
42351: LD_VAR 0 4
42355: ARRAY
42356: PUSH
42357: LD_INT 1
42359: ARRAY
42360: PPUSH
42361: LD_VAR 0 6
42365: PUSH
42366: LD_VAR 0 4
42370: ARRAY
42371: PUSH
42372: LD_INT 2
42374: ARRAY
42375: PPUSH
42376: CALL_OW 488
42380: NOT
42381: PUSH
42382: LD_VAR 0 6
42386: PUSH
42387: LD_VAR 0 4
42391: ARRAY
42392: PUSH
42393: LD_INT 1
42395: ARRAY
42396: PPUSH
42397: LD_VAR 0 6
42401: PUSH
42402: LD_VAR 0 4
42406: ARRAY
42407: PUSH
42408: LD_INT 2
42410: ARRAY
42411: PPUSH
42412: CALL_OW 428
42416: PUSH
42417: LD_INT 0
42419: NONEQUAL
42420: OR
42421: IFFALSE 42443
// tmp := Delete ( tmp , i ) ;
42423: LD_ADDR_VAR 0 6
42427: PUSH
42428: LD_VAR 0 6
42432: PPUSH
42433: LD_VAR 0 4
42437: PPUSH
42438: CALL_OW 3
42442: ST_TO_ADDR
42443: GO 42343
42445: POP
42446: POP
// j := GetClosestHex ( unit , tmp ) ;
42447: LD_ADDR_VAR 0 5
42451: PUSH
42452: LD_VAR 0 1
42456: PPUSH
42457: LD_VAR 0 6
42461: PPUSH
42462: CALL 41749 0 2
42466: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42467: LD_VAR 0 1
42471: PPUSH
42472: LD_VAR 0 5
42476: PUSH
42477: LD_INT 1
42479: ARRAY
42480: PPUSH
42481: LD_VAR 0 5
42485: PUSH
42486: LD_INT 2
42488: ARRAY
42489: PPUSH
42490: CALL_OW 111
// end ;
42494: LD_VAR 0 3
42498: RET
// export function PrepareApemanSoldier ( ) ; begin
42499: LD_INT 0
42501: PPUSH
// uc_nation := 0 ;
42502: LD_ADDR_OWVAR 21
42506: PUSH
42507: LD_INT 0
42509: ST_TO_ADDR
// hc_sex := sex_male ;
42510: LD_ADDR_OWVAR 27
42514: PUSH
42515: LD_INT 1
42517: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42518: LD_ADDR_OWVAR 28
42522: PUSH
42523: LD_INT 15
42525: ST_TO_ADDR
// hc_gallery :=  ;
42526: LD_ADDR_OWVAR 33
42530: PUSH
42531: LD_STRING 
42533: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42534: LD_ADDR_OWVAR 31
42538: PUSH
42539: LD_INT 0
42541: PPUSH
42542: LD_INT 3
42544: PPUSH
42545: CALL_OW 12
42549: PUSH
42550: LD_INT 0
42552: PPUSH
42553: LD_INT 3
42555: PPUSH
42556: CALL_OW 12
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: ST_TO_ADDR
// end ;
42573: LD_VAR 0 1
42577: RET
// export function PrepareApemanEngineer ( ) ; begin
42578: LD_INT 0
42580: PPUSH
// uc_nation := 0 ;
42581: LD_ADDR_OWVAR 21
42585: PUSH
42586: LD_INT 0
42588: ST_TO_ADDR
// hc_sex := sex_male ;
42589: LD_ADDR_OWVAR 27
42593: PUSH
42594: LD_INT 1
42596: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42597: LD_ADDR_OWVAR 28
42601: PUSH
42602: LD_INT 16
42604: ST_TO_ADDR
// hc_gallery :=  ;
42605: LD_ADDR_OWVAR 33
42609: PUSH
42610: LD_STRING 
42612: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42613: LD_ADDR_OWVAR 31
42617: PUSH
42618: LD_INT 0
42620: PPUSH
42621: LD_INT 3
42623: PPUSH
42624: CALL_OW 12
42628: PUSH
42629: LD_INT 0
42631: PPUSH
42632: LD_INT 3
42634: PPUSH
42635: CALL_OW 12
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: ST_TO_ADDR
// end ;
42652: LD_VAR 0 1
42656: RET
// export function PrepareApeman ( agressivity ) ; begin
42657: LD_INT 0
42659: PPUSH
// uc_side := 0 ;
42660: LD_ADDR_OWVAR 20
42664: PUSH
42665: LD_INT 0
42667: ST_TO_ADDR
// uc_nation := 0 ;
42668: LD_ADDR_OWVAR 21
42672: PUSH
42673: LD_INT 0
42675: ST_TO_ADDR
// hc_sex := sex_male ;
42676: LD_ADDR_OWVAR 27
42680: PUSH
42681: LD_INT 1
42683: ST_TO_ADDR
// hc_class := class_apeman ;
42684: LD_ADDR_OWVAR 28
42688: PUSH
42689: LD_INT 12
42691: ST_TO_ADDR
// hc_gallery :=  ;
42692: LD_ADDR_OWVAR 33
42696: PUSH
42697: LD_STRING 
42699: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42700: LD_ADDR_OWVAR 35
42704: PUSH
42705: LD_VAR 0 1
42709: NEG
42710: PPUSH
42711: LD_VAR 0 1
42715: PPUSH
42716: CALL_OW 12
42720: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42721: LD_ADDR_OWVAR 31
42725: PUSH
42726: LD_INT 0
42728: PPUSH
42729: LD_INT 3
42731: PPUSH
42732: CALL_OW 12
42736: PUSH
42737: LD_INT 0
42739: PPUSH
42740: LD_INT 3
42742: PPUSH
42743: CALL_OW 12
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// end ;
42760: LD_VAR 0 2
42764: RET
// export function PrepareTiger ( agressivity ) ; begin
42765: LD_INT 0
42767: PPUSH
// uc_side := 0 ;
42768: LD_ADDR_OWVAR 20
42772: PUSH
42773: LD_INT 0
42775: ST_TO_ADDR
// uc_nation := 0 ;
42776: LD_ADDR_OWVAR 21
42780: PUSH
42781: LD_INT 0
42783: ST_TO_ADDR
// hc_class := class_tiger ;
42784: LD_ADDR_OWVAR 28
42788: PUSH
42789: LD_INT 14
42791: ST_TO_ADDR
// hc_gallery :=  ;
42792: LD_ADDR_OWVAR 33
42796: PUSH
42797: LD_STRING 
42799: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42800: LD_ADDR_OWVAR 35
42804: PUSH
42805: LD_VAR 0 1
42809: NEG
42810: PPUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 12
42820: ST_TO_ADDR
// end ;
42821: LD_VAR 0 2
42825: RET
// export function PrepareEnchidna ( ) ; begin
42826: LD_INT 0
42828: PPUSH
// uc_side := 0 ;
42829: LD_ADDR_OWVAR 20
42833: PUSH
42834: LD_INT 0
42836: ST_TO_ADDR
// uc_nation := 0 ;
42837: LD_ADDR_OWVAR 21
42841: PUSH
42842: LD_INT 0
42844: ST_TO_ADDR
// hc_class := class_baggie ;
42845: LD_ADDR_OWVAR 28
42849: PUSH
42850: LD_INT 13
42852: ST_TO_ADDR
// hc_gallery :=  ;
42853: LD_ADDR_OWVAR 33
42857: PUSH
42858: LD_STRING 
42860: ST_TO_ADDR
// end ;
42861: LD_VAR 0 1
42865: RET
// export function PrepareFrog ( ) ; begin
42866: LD_INT 0
42868: PPUSH
// uc_side := 0 ;
42869: LD_ADDR_OWVAR 20
42873: PUSH
42874: LD_INT 0
42876: ST_TO_ADDR
// uc_nation := 0 ;
42877: LD_ADDR_OWVAR 21
42881: PUSH
42882: LD_INT 0
42884: ST_TO_ADDR
// hc_class := class_frog ;
42885: LD_ADDR_OWVAR 28
42889: PUSH
42890: LD_INT 19
42892: ST_TO_ADDR
// hc_gallery :=  ;
42893: LD_ADDR_OWVAR 33
42897: PUSH
42898: LD_STRING 
42900: ST_TO_ADDR
// end ;
42901: LD_VAR 0 1
42905: RET
// export function PrepareFish ( ) ; begin
42906: LD_INT 0
42908: PPUSH
// uc_side := 0 ;
42909: LD_ADDR_OWVAR 20
42913: PUSH
42914: LD_INT 0
42916: ST_TO_ADDR
// uc_nation := 0 ;
42917: LD_ADDR_OWVAR 21
42921: PUSH
42922: LD_INT 0
42924: ST_TO_ADDR
// hc_class := class_fish ;
42925: LD_ADDR_OWVAR 28
42929: PUSH
42930: LD_INT 20
42932: ST_TO_ADDR
// hc_gallery :=  ;
42933: LD_ADDR_OWVAR 33
42937: PUSH
42938: LD_STRING 
42940: ST_TO_ADDR
// end ;
42941: LD_VAR 0 1
42945: RET
// export function PrepareBird ( ) ; begin
42946: LD_INT 0
42948: PPUSH
// uc_side := 0 ;
42949: LD_ADDR_OWVAR 20
42953: PUSH
42954: LD_INT 0
42956: ST_TO_ADDR
// uc_nation := 0 ;
42957: LD_ADDR_OWVAR 21
42961: PUSH
42962: LD_INT 0
42964: ST_TO_ADDR
// hc_class := class_phororhacos ;
42965: LD_ADDR_OWVAR 28
42969: PUSH
42970: LD_INT 18
42972: ST_TO_ADDR
// hc_gallery :=  ;
42973: LD_ADDR_OWVAR 33
42977: PUSH
42978: LD_STRING 
42980: ST_TO_ADDR
// end ;
42981: LD_VAR 0 1
42985: RET
// export function PrepareHorse ( ) ; begin
42986: LD_INT 0
42988: PPUSH
// uc_side := 0 ;
42989: LD_ADDR_OWVAR 20
42993: PUSH
42994: LD_INT 0
42996: ST_TO_ADDR
// uc_nation := 0 ;
42997: LD_ADDR_OWVAR 21
43001: PUSH
43002: LD_INT 0
43004: ST_TO_ADDR
// hc_class := class_horse ;
43005: LD_ADDR_OWVAR 28
43009: PUSH
43010: LD_INT 21
43012: ST_TO_ADDR
// hc_gallery :=  ;
43013: LD_ADDR_OWVAR 33
43017: PUSH
43018: LD_STRING 
43020: ST_TO_ADDR
// end ;
43021: LD_VAR 0 1
43025: RET
// export function PrepareMastodont ( ) ; begin
43026: LD_INT 0
43028: PPUSH
// uc_side := 0 ;
43029: LD_ADDR_OWVAR 20
43033: PUSH
43034: LD_INT 0
43036: ST_TO_ADDR
// uc_nation := 0 ;
43037: LD_ADDR_OWVAR 21
43041: PUSH
43042: LD_INT 0
43044: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43045: LD_ADDR_OWVAR 37
43049: PUSH
43050: LD_INT 31
43052: ST_TO_ADDR
// vc_control := control_rider ;
43053: LD_ADDR_OWVAR 38
43057: PUSH
43058: LD_INT 4
43060: ST_TO_ADDR
// end ;
43061: LD_VAR 0 1
43065: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43066: LD_INT 0
43068: PPUSH
43069: PPUSH
43070: PPUSH
// uc_side = 0 ;
43071: LD_ADDR_OWVAR 20
43075: PUSH
43076: LD_INT 0
43078: ST_TO_ADDR
// uc_nation = 0 ;
43079: LD_ADDR_OWVAR 21
43083: PUSH
43084: LD_INT 0
43086: ST_TO_ADDR
// InitHc_All ( ) ;
43087: CALL_OW 584
// InitVc ;
43091: CALL_OW 20
// if mastodonts then
43095: LD_VAR 0 6
43099: IFFALSE 43166
// for i = 1 to mastodonts do
43101: LD_ADDR_VAR 0 11
43105: PUSH
43106: DOUBLE
43107: LD_INT 1
43109: DEC
43110: ST_TO_ADDR
43111: LD_VAR 0 6
43115: PUSH
43116: FOR_TO
43117: IFFALSE 43164
// begin vc_chassis := 31 ;
43119: LD_ADDR_OWVAR 37
43123: PUSH
43124: LD_INT 31
43126: ST_TO_ADDR
// vc_control := control_rider ;
43127: LD_ADDR_OWVAR 38
43131: PUSH
43132: LD_INT 4
43134: ST_TO_ADDR
// animal := CreateVehicle ;
43135: LD_ADDR_VAR 0 12
43139: PUSH
43140: CALL_OW 45
43144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43145: LD_VAR 0 12
43149: PPUSH
43150: LD_VAR 0 8
43154: PPUSH
43155: LD_INT 0
43157: PPUSH
43158: CALL 45294 0 3
// end ;
43162: GO 43116
43164: POP
43165: POP
// if horses then
43166: LD_VAR 0 5
43170: IFFALSE 43237
// for i = 1 to horses do
43172: LD_ADDR_VAR 0 11
43176: PUSH
43177: DOUBLE
43178: LD_INT 1
43180: DEC
43181: ST_TO_ADDR
43182: LD_VAR 0 5
43186: PUSH
43187: FOR_TO
43188: IFFALSE 43235
// begin hc_class := 21 ;
43190: LD_ADDR_OWVAR 28
43194: PUSH
43195: LD_INT 21
43197: ST_TO_ADDR
// hc_gallery :=  ;
43198: LD_ADDR_OWVAR 33
43202: PUSH
43203: LD_STRING 
43205: ST_TO_ADDR
// animal := CreateHuman ;
43206: LD_ADDR_VAR 0 12
43210: PUSH
43211: CALL_OW 44
43215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43216: LD_VAR 0 12
43220: PPUSH
43221: LD_VAR 0 8
43225: PPUSH
43226: LD_INT 0
43228: PPUSH
43229: CALL 45294 0 3
// end ;
43233: GO 43187
43235: POP
43236: POP
// if birds then
43237: LD_VAR 0 1
43241: IFFALSE 43308
// for i = 1 to birds do
43243: LD_ADDR_VAR 0 11
43247: PUSH
43248: DOUBLE
43249: LD_INT 1
43251: DEC
43252: ST_TO_ADDR
43253: LD_VAR 0 1
43257: PUSH
43258: FOR_TO
43259: IFFALSE 43306
// begin hc_class := 18 ;
43261: LD_ADDR_OWVAR 28
43265: PUSH
43266: LD_INT 18
43268: ST_TO_ADDR
// hc_gallery =  ;
43269: LD_ADDR_OWVAR 33
43273: PUSH
43274: LD_STRING 
43276: ST_TO_ADDR
// animal := CreateHuman ;
43277: LD_ADDR_VAR 0 12
43281: PUSH
43282: CALL_OW 44
43286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43287: LD_VAR 0 12
43291: PPUSH
43292: LD_VAR 0 8
43296: PPUSH
43297: LD_INT 0
43299: PPUSH
43300: CALL 45294 0 3
// end ;
43304: GO 43258
43306: POP
43307: POP
// if tigers then
43308: LD_VAR 0 2
43312: IFFALSE 43396
// for i = 1 to tigers do
43314: LD_ADDR_VAR 0 11
43318: PUSH
43319: DOUBLE
43320: LD_INT 1
43322: DEC
43323: ST_TO_ADDR
43324: LD_VAR 0 2
43328: PUSH
43329: FOR_TO
43330: IFFALSE 43394
// begin hc_class = class_tiger ;
43332: LD_ADDR_OWVAR 28
43336: PUSH
43337: LD_INT 14
43339: ST_TO_ADDR
// hc_gallery =  ;
43340: LD_ADDR_OWVAR 33
43344: PUSH
43345: LD_STRING 
43347: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43348: LD_ADDR_OWVAR 35
43352: PUSH
43353: LD_INT 7
43355: NEG
43356: PPUSH
43357: LD_INT 7
43359: PPUSH
43360: CALL_OW 12
43364: ST_TO_ADDR
// animal := CreateHuman ;
43365: LD_ADDR_VAR 0 12
43369: PUSH
43370: CALL_OW 44
43374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43375: LD_VAR 0 12
43379: PPUSH
43380: LD_VAR 0 8
43384: PPUSH
43385: LD_INT 0
43387: PPUSH
43388: CALL 45294 0 3
// end ;
43392: GO 43329
43394: POP
43395: POP
// if apemans then
43396: LD_VAR 0 3
43400: IFFALSE 43523
// for i = 1 to apemans do
43402: LD_ADDR_VAR 0 11
43406: PUSH
43407: DOUBLE
43408: LD_INT 1
43410: DEC
43411: ST_TO_ADDR
43412: LD_VAR 0 3
43416: PUSH
43417: FOR_TO
43418: IFFALSE 43521
// begin hc_class = class_apeman ;
43420: LD_ADDR_OWVAR 28
43424: PUSH
43425: LD_INT 12
43427: ST_TO_ADDR
// hc_gallery =  ;
43428: LD_ADDR_OWVAR 33
43432: PUSH
43433: LD_STRING 
43435: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43436: LD_ADDR_OWVAR 35
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PPUSH
43445: LD_INT 2
43447: PPUSH
43448: CALL_OW 12
43452: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43453: LD_ADDR_OWVAR 31
43457: PUSH
43458: LD_INT 1
43460: PPUSH
43461: LD_INT 3
43463: PPUSH
43464: CALL_OW 12
43468: PUSH
43469: LD_INT 1
43471: PPUSH
43472: LD_INT 3
43474: PPUSH
43475: CALL_OW 12
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: ST_TO_ADDR
// animal := CreateHuman ;
43492: LD_ADDR_VAR 0 12
43496: PUSH
43497: CALL_OW 44
43501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43502: LD_VAR 0 12
43506: PPUSH
43507: LD_VAR 0 8
43511: PPUSH
43512: LD_INT 0
43514: PPUSH
43515: CALL 45294 0 3
// end ;
43519: GO 43417
43521: POP
43522: POP
// if enchidnas then
43523: LD_VAR 0 4
43527: IFFALSE 43594
// for i = 1 to enchidnas do
43529: LD_ADDR_VAR 0 11
43533: PUSH
43534: DOUBLE
43535: LD_INT 1
43537: DEC
43538: ST_TO_ADDR
43539: LD_VAR 0 4
43543: PUSH
43544: FOR_TO
43545: IFFALSE 43592
// begin hc_class = 13 ;
43547: LD_ADDR_OWVAR 28
43551: PUSH
43552: LD_INT 13
43554: ST_TO_ADDR
// hc_gallery =  ;
43555: LD_ADDR_OWVAR 33
43559: PUSH
43560: LD_STRING 
43562: ST_TO_ADDR
// animal := CreateHuman ;
43563: LD_ADDR_VAR 0 12
43567: PUSH
43568: CALL_OW 44
43572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43573: LD_VAR 0 12
43577: PPUSH
43578: LD_VAR 0 8
43582: PPUSH
43583: LD_INT 0
43585: PPUSH
43586: CALL 45294 0 3
// end ;
43590: GO 43544
43592: POP
43593: POP
// if fishes then
43594: LD_VAR 0 7
43598: IFFALSE 43665
// for i = 1 to fishes do
43600: LD_ADDR_VAR 0 11
43604: PUSH
43605: DOUBLE
43606: LD_INT 1
43608: DEC
43609: ST_TO_ADDR
43610: LD_VAR 0 7
43614: PUSH
43615: FOR_TO
43616: IFFALSE 43663
// begin hc_class = 20 ;
43618: LD_ADDR_OWVAR 28
43622: PUSH
43623: LD_INT 20
43625: ST_TO_ADDR
// hc_gallery =  ;
43626: LD_ADDR_OWVAR 33
43630: PUSH
43631: LD_STRING 
43633: ST_TO_ADDR
// animal := CreateHuman ;
43634: LD_ADDR_VAR 0 12
43638: PUSH
43639: CALL_OW 44
43643: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43644: LD_VAR 0 12
43648: PPUSH
43649: LD_VAR 0 9
43653: PPUSH
43654: LD_INT 0
43656: PPUSH
43657: CALL 45294 0 3
// end ;
43661: GO 43615
43663: POP
43664: POP
// end ;
43665: LD_VAR 0 10
43669: RET
// export function WantHeal ( sci , unit ) ; begin
43670: LD_INT 0
43672: PPUSH
// if GetTaskList ( sci ) > 0 then
43673: LD_VAR 0 1
43677: PPUSH
43678: CALL_OW 437
43682: PUSH
43683: LD_INT 0
43685: GREATER
43686: IFFALSE 43756
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43688: LD_VAR 0 1
43692: PPUSH
43693: CALL_OW 437
43697: PUSH
43698: LD_INT 1
43700: ARRAY
43701: PUSH
43702: LD_INT 1
43704: ARRAY
43705: PUSH
43706: LD_STRING l
43708: EQUAL
43709: PUSH
43710: LD_VAR 0 1
43714: PPUSH
43715: CALL_OW 437
43719: PUSH
43720: LD_INT 1
43722: ARRAY
43723: PUSH
43724: LD_INT 4
43726: ARRAY
43727: PUSH
43728: LD_VAR 0 2
43732: EQUAL
43733: AND
43734: IFFALSE 43746
// result := true else
43736: LD_ADDR_VAR 0 3
43740: PUSH
43741: LD_INT 1
43743: ST_TO_ADDR
43744: GO 43754
// result := false ;
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_INT 0
43753: ST_TO_ADDR
// end else
43754: GO 43764
// result := false ;
43756: LD_ADDR_VAR 0 3
43760: PUSH
43761: LD_INT 0
43763: ST_TO_ADDR
// end ;
43764: LD_VAR 0 3
43768: RET
// export function HealTarget ( sci ) ; begin
43769: LD_INT 0
43771: PPUSH
// if not sci then
43772: LD_VAR 0 1
43776: NOT
43777: IFFALSE 43781
// exit ;
43779: GO 43846
// result := 0 ;
43781: LD_ADDR_VAR 0 2
43785: PUSH
43786: LD_INT 0
43788: ST_TO_ADDR
// if GetTaskList ( sci ) then
43789: LD_VAR 0 1
43793: PPUSH
43794: CALL_OW 437
43798: IFFALSE 43846
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43800: LD_VAR 0 1
43804: PPUSH
43805: CALL_OW 437
43809: PUSH
43810: LD_INT 1
43812: ARRAY
43813: PUSH
43814: LD_INT 1
43816: ARRAY
43817: PUSH
43818: LD_STRING l
43820: EQUAL
43821: IFFALSE 43846
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43823: LD_ADDR_VAR 0 2
43827: PUSH
43828: LD_VAR 0 1
43832: PPUSH
43833: CALL_OW 437
43837: PUSH
43838: LD_INT 1
43840: ARRAY
43841: PUSH
43842: LD_INT 4
43844: ARRAY
43845: ST_TO_ADDR
// end ;
43846: LD_VAR 0 2
43850: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43851: LD_INT 0
43853: PPUSH
43854: PPUSH
43855: PPUSH
43856: PPUSH
// if not base_units then
43857: LD_VAR 0 1
43861: NOT
43862: IFFALSE 43866
// exit ;
43864: GO 43953
// result := false ;
43866: LD_ADDR_VAR 0 2
43870: PUSH
43871: LD_INT 0
43873: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43874: LD_ADDR_VAR 0 5
43878: PUSH
43879: LD_VAR 0 1
43883: PPUSH
43884: LD_INT 21
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PPUSH
43894: CALL_OW 72
43898: ST_TO_ADDR
// if not tmp then
43899: LD_VAR 0 5
43903: NOT
43904: IFFALSE 43908
// exit ;
43906: GO 43953
// for i in tmp do
43908: LD_ADDR_VAR 0 3
43912: PUSH
43913: LD_VAR 0 5
43917: PUSH
43918: FOR_IN
43919: IFFALSE 43951
// begin result := EnemyInRange ( i , 22 ) ;
43921: LD_ADDR_VAR 0 2
43925: PUSH
43926: LD_VAR 0 3
43930: PPUSH
43931: LD_INT 22
43933: PPUSH
43934: CALL 41551 0 2
43938: ST_TO_ADDR
// if result then
43939: LD_VAR 0 2
43943: IFFALSE 43949
// exit ;
43945: POP
43946: POP
43947: GO 43953
// end ;
43949: GO 43918
43951: POP
43952: POP
// end ;
43953: LD_VAR 0 2
43957: RET
// export function FilterByTag ( units , tag ) ; begin
43958: LD_INT 0
43960: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43961: LD_ADDR_VAR 0 3
43965: PUSH
43966: LD_VAR 0 1
43970: PPUSH
43971: LD_INT 120
43973: PUSH
43974: LD_VAR 0 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PPUSH
43983: CALL_OW 72
43987: ST_TO_ADDR
// end ;
43988: LD_VAR 0 3
43992: RET
// export function IsDriver ( un ) ; begin
43993: LD_INT 0
43995: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43996: LD_ADDR_VAR 0 2
44000: PUSH
44001: LD_VAR 0 1
44005: PUSH
44006: LD_INT 55
44008: PUSH
44009: EMPTY
44010: LIST
44011: PPUSH
44012: CALL_OW 69
44016: IN
44017: ST_TO_ADDR
// end ;
44018: LD_VAR 0 2
44022: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44023: LD_INT 0
44025: PPUSH
44026: PPUSH
// list := [ ] ;
44027: LD_ADDR_VAR 0 5
44031: PUSH
44032: EMPTY
44033: ST_TO_ADDR
// case d of 0 :
44034: LD_VAR 0 3
44038: PUSH
44039: LD_INT 0
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44180
44047: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44048: LD_ADDR_VAR 0 5
44052: PUSH
44053: LD_VAR 0 1
44057: PUSH
44058: LD_INT 4
44060: MINUS
44061: PUSH
44062: LD_VAR 0 2
44066: PUSH
44067: LD_INT 4
44069: MINUS
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: LIST
44078: PUSH
44079: LD_VAR 0 1
44083: PUSH
44084: LD_INT 3
44086: MINUS
44087: PUSH
44088: LD_VAR 0 2
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: PUSH
44101: LD_VAR 0 1
44105: PUSH
44106: LD_INT 4
44108: PLUS
44109: PUSH
44110: LD_VAR 0 2
44114: PUSH
44115: LD_INT 4
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: LIST
44122: PUSH
44123: LD_VAR 0 1
44127: PUSH
44128: LD_INT 3
44130: PLUS
44131: PUSH
44132: LD_VAR 0 2
44136: PUSH
44137: LD_INT 3
44139: PLUS
44140: PUSH
44141: LD_INT 5
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: PUSH
44149: LD_VAR 0 1
44153: PUSH
44154: LD_VAR 0 2
44158: PUSH
44159: LD_INT 4
44161: PLUS
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
// end ; 1 :
44178: GO 44878
44180: LD_INT 1
44182: DOUBLE
44183: EQUAL
44184: IFTRUE 44188
44186: GO 44321
44188: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44189: LD_ADDR_VAR 0 5
44193: PUSH
44194: LD_VAR 0 1
44198: PUSH
44199: LD_VAR 0 2
44203: PUSH
44204: LD_INT 4
44206: MINUS
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: PUSH
44216: LD_VAR 0 1
44220: PUSH
44221: LD_INT 3
44223: MINUS
44224: PUSH
44225: LD_VAR 0 2
44229: PUSH
44230: LD_INT 3
44232: MINUS
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: PUSH
44242: LD_VAR 0 1
44246: PUSH
44247: LD_INT 4
44249: MINUS
44250: PUSH
44251: LD_VAR 0 2
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: PUSH
44264: LD_VAR 0 1
44268: PUSH
44269: LD_VAR 0 2
44273: PUSH
44274: LD_INT 3
44276: PLUS
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: PUSH
44286: LD_VAR 0 1
44290: PUSH
44291: LD_INT 4
44293: PLUS
44294: PUSH
44295: LD_VAR 0 2
44299: PUSH
44300: LD_INT 4
44302: PLUS
44303: PUSH
44304: LD_INT 5
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: ST_TO_ADDR
// end ; 2 :
44319: GO 44878
44321: LD_INT 2
44323: DOUBLE
44324: EQUAL
44325: IFTRUE 44329
44327: GO 44458
44329: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: LD_VAR 0 1
44339: PUSH
44340: LD_VAR 0 2
44344: PUSH
44345: LD_INT 3
44347: MINUS
44348: PUSH
44349: LD_INT 3
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: PUSH
44357: LD_VAR 0 1
44361: PUSH
44362: LD_INT 4
44364: PLUS
44365: PUSH
44366: LD_VAR 0 2
44370: PUSH
44371: LD_INT 4
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: PUSH
44379: LD_VAR 0 1
44383: PUSH
44384: LD_VAR 0 2
44388: PUSH
44389: LD_INT 4
44391: PLUS
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: PUSH
44401: LD_VAR 0 1
44405: PUSH
44406: LD_INT 3
44408: MINUS
44409: PUSH
44410: LD_VAR 0 2
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: PUSH
44423: LD_VAR 0 1
44427: PUSH
44428: LD_INT 4
44430: MINUS
44431: PUSH
44432: LD_VAR 0 2
44436: PUSH
44437: LD_INT 4
44439: MINUS
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// end ; 3 :
44456: GO 44878
44458: LD_INT 3
44460: DOUBLE
44461: EQUAL
44462: IFTRUE 44466
44464: GO 44599
44466: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44467: LD_ADDR_VAR 0 5
44471: PUSH
44472: LD_VAR 0 1
44476: PUSH
44477: LD_INT 3
44479: PLUS
44480: PUSH
44481: LD_VAR 0 2
44485: PUSH
44486: LD_INT 4
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PUSH
44494: LD_VAR 0 1
44498: PUSH
44499: LD_INT 4
44501: PLUS
44502: PUSH
44503: LD_VAR 0 2
44507: PUSH
44508: LD_INT 4
44510: PLUS
44511: PUSH
44512: LD_INT 5
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: PUSH
44520: LD_VAR 0 1
44524: PUSH
44525: LD_INT 4
44527: MINUS
44528: PUSH
44529: LD_VAR 0 2
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: PUSH
44542: LD_VAR 0 1
44546: PUSH
44547: LD_VAR 0 2
44551: PUSH
44552: LD_INT 4
44554: MINUS
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: PUSH
44564: LD_VAR 0 1
44568: PUSH
44569: LD_INT 3
44571: MINUS
44572: PUSH
44573: LD_VAR 0 2
44577: PUSH
44578: LD_INT 3
44580: MINUS
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// end ; 4 :
44597: GO 44878
44599: LD_INT 4
44601: DOUBLE
44602: EQUAL
44603: IFTRUE 44607
44605: GO 44740
44607: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44608: LD_ADDR_VAR 0 5
44612: PUSH
44613: LD_VAR 0 1
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: LD_INT 4
44625: PLUS
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: PUSH
44635: LD_VAR 0 1
44639: PUSH
44640: LD_INT 3
44642: PLUS
44643: PUSH
44644: LD_VAR 0 2
44648: PUSH
44649: LD_INT 3
44651: PLUS
44652: PUSH
44653: LD_INT 5
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: PUSH
44661: LD_VAR 0 1
44665: PUSH
44666: LD_INT 4
44668: PLUS
44669: PUSH
44670: LD_VAR 0 2
44674: PUSH
44675: LD_INT 4
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: PUSH
44683: LD_VAR 0 1
44687: PUSH
44688: LD_VAR 0 2
44692: PUSH
44693: LD_INT 3
44695: MINUS
44696: PUSH
44697: LD_INT 3
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: LD_VAR 0 1
44709: PUSH
44710: LD_INT 4
44712: MINUS
44713: PUSH
44714: LD_VAR 0 2
44718: PUSH
44719: LD_INT 4
44721: MINUS
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: LIST
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// end ; 5 :
44738: GO 44878
44740: LD_INT 5
44742: DOUBLE
44743: EQUAL
44744: IFTRUE 44748
44746: GO 44877
44748: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44749: LD_ADDR_VAR 0 5
44753: PUSH
44754: LD_VAR 0 1
44758: PUSH
44759: LD_INT 4
44761: MINUS
44762: PUSH
44763: LD_VAR 0 2
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: PUSH
44776: LD_VAR 0 1
44780: PUSH
44781: LD_VAR 0 2
44785: PUSH
44786: LD_INT 4
44788: MINUS
44789: PUSH
44790: LD_INT 3
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: PUSH
44798: LD_VAR 0 1
44802: PUSH
44803: LD_INT 4
44805: PLUS
44806: PUSH
44807: LD_VAR 0 2
44811: PUSH
44812: LD_INT 4
44814: PLUS
44815: PUSH
44816: LD_INT 5
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: PUSH
44824: LD_VAR 0 1
44828: PUSH
44829: LD_INT 3
44831: PLUS
44832: PUSH
44833: LD_VAR 0 2
44837: PUSH
44838: LD_INT 4
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: PUSH
44846: LD_VAR 0 1
44850: PUSH
44851: LD_VAR 0 2
44855: PUSH
44856: LD_INT 3
44858: PLUS
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: ST_TO_ADDR
// end ; end ;
44875: GO 44878
44877: POP
// result := list ;
44878: LD_ADDR_VAR 0 4
44882: PUSH
44883: LD_VAR 0 5
44887: ST_TO_ADDR
// end ;
44888: LD_VAR 0 4
44892: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44893: LD_INT 0
44895: PPUSH
44896: PPUSH
44897: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44898: LD_VAR 0 1
44902: NOT
44903: PUSH
44904: LD_VAR 0 2
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: LD_INT 4
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: IN
44927: NOT
44928: OR
44929: IFFALSE 44933
// exit ;
44931: GO 45016
// tmp := [ ] ;
44933: LD_ADDR_VAR 0 5
44937: PUSH
44938: EMPTY
44939: ST_TO_ADDR
// for i in units do
44940: LD_ADDR_VAR 0 4
44944: PUSH
44945: LD_VAR 0 1
44949: PUSH
44950: FOR_IN
44951: IFFALSE 44985
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44953: LD_ADDR_VAR 0 5
44957: PUSH
44958: LD_VAR 0 5
44962: PPUSH
44963: LD_VAR 0 4
44967: PPUSH
44968: LD_VAR 0 2
44972: PPUSH
44973: CALL_OW 259
44977: PPUSH
44978: CALL 46389 0 2
44982: ST_TO_ADDR
44983: GO 44950
44985: POP
44986: POP
// if not tmp then
44987: LD_VAR 0 5
44991: NOT
44992: IFFALSE 44996
// exit ;
44994: GO 45016
// result := SortListByListDesc ( units , tmp ) ;
44996: LD_ADDR_VAR 0 3
45000: PUSH
45001: LD_VAR 0 1
45005: PPUSH
45006: LD_VAR 0 5
45010: PPUSH
45011: CALL_OW 77
45015: ST_TO_ADDR
// end ;
45016: LD_VAR 0 3
45020: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45021: LD_INT 0
45023: PPUSH
45024: PPUSH
45025: PPUSH
// result := false ;
45026: LD_ADDR_VAR 0 3
45030: PUSH
45031: LD_INT 0
45033: ST_TO_ADDR
// if not building then
45034: LD_VAR 0 2
45038: NOT
45039: IFFALSE 45043
// exit ;
45041: GO 45181
// x := GetX ( building ) ;
45043: LD_ADDR_VAR 0 4
45047: PUSH
45048: LD_VAR 0 2
45052: PPUSH
45053: CALL_OW 250
45057: ST_TO_ADDR
// y := GetY ( building ) ;
45058: LD_ADDR_VAR 0 5
45062: PUSH
45063: LD_VAR 0 2
45067: PPUSH
45068: CALL_OW 251
45072: ST_TO_ADDR
// if not x or not y then
45073: LD_VAR 0 4
45077: NOT
45078: PUSH
45079: LD_VAR 0 5
45083: NOT
45084: OR
45085: IFFALSE 45089
// exit ;
45087: GO 45181
// if GetTaskList ( unit ) then
45089: LD_VAR 0 1
45093: PPUSH
45094: CALL_OW 437
45098: IFFALSE 45181
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45100: LD_STRING e
45102: PUSH
45103: LD_VAR 0 1
45107: PPUSH
45108: CALL_OW 437
45112: PUSH
45113: LD_INT 1
45115: ARRAY
45116: PUSH
45117: LD_INT 1
45119: ARRAY
45120: EQUAL
45121: PUSH
45122: LD_VAR 0 4
45126: PUSH
45127: LD_VAR 0 1
45131: PPUSH
45132: CALL_OW 437
45136: PUSH
45137: LD_INT 1
45139: ARRAY
45140: PUSH
45141: LD_INT 2
45143: ARRAY
45144: EQUAL
45145: AND
45146: PUSH
45147: LD_VAR 0 5
45151: PUSH
45152: LD_VAR 0 1
45156: PPUSH
45157: CALL_OW 437
45161: PUSH
45162: LD_INT 1
45164: ARRAY
45165: PUSH
45166: LD_INT 3
45168: ARRAY
45169: EQUAL
45170: AND
45171: IFFALSE 45181
// result := true end ;
45173: LD_ADDR_VAR 0 3
45177: PUSH
45178: LD_INT 1
45180: ST_TO_ADDR
// end ;
45181: LD_VAR 0 3
45185: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45186: LD_INT 0
45188: PPUSH
// result := false ;
45189: LD_ADDR_VAR 0 4
45193: PUSH
45194: LD_INT 0
45196: ST_TO_ADDR
// if GetTaskList ( unit ) then
45197: LD_VAR 0 1
45201: PPUSH
45202: CALL_OW 437
45206: IFFALSE 45289
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45208: LD_STRING M
45210: PUSH
45211: LD_VAR 0 1
45215: PPUSH
45216: CALL_OW 437
45220: PUSH
45221: LD_INT 1
45223: ARRAY
45224: PUSH
45225: LD_INT 1
45227: ARRAY
45228: EQUAL
45229: PUSH
45230: LD_VAR 0 2
45234: PUSH
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 437
45244: PUSH
45245: LD_INT 1
45247: ARRAY
45248: PUSH
45249: LD_INT 2
45251: ARRAY
45252: EQUAL
45253: AND
45254: PUSH
45255: LD_VAR 0 3
45259: PUSH
45260: LD_VAR 0 1
45264: PPUSH
45265: CALL_OW 437
45269: PUSH
45270: LD_INT 1
45272: ARRAY
45273: PUSH
45274: LD_INT 3
45276: ARRAY
45277: EQUAL
45278: AND
45279: IFFALSE 45289
// result := true ;
45281: LD_ADDR_VAR 0 4
45285: PUSH
45286: LD_INT 1
45288: ST_TO_ADDR
// end ; end ;
45289: LD_VAR 0 4
45293: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45294: LD_INT 0
45296: PPUSH
45297: PPUSH
45298: PPUSH
45299: PPUSH
// if not unit or not area then
45300: LD_VAR 0 1
45304: NOT
45305: PUSH
45306: LD_VAR 0 2
45310: NOT
45311: OR
45312: IFFALSE 45316
// exit ;
45314: GO 45492
// tmp := AreaToList ( area , i ) ;
45316: LD_ADDR_VAR 0 6
45320: PUSH
45321: LD_VAR 0 2
45325: PPUSH
45326: LD_VAR 0 5
45330: PPUSH
45331: CALL_OW 517
45335: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45336: LD_ADDR_VAR 0 5
45340: PUSH
45341: DOUBLE
45342: LD_INT 1
45344: DEC
45345: ST_TO_ADDR
45346: LD_VAR 0 6
45350: PUSH
45351: LD_INT 1
45353: ARRAY
45354: PUSH
45355: FOR_TO
45356: IFFALSE 45490
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45358: LD_ADDR_VAR 0 7
45362: PUSH
45363: LD_VAR 0 6
45367: PUSH
45368: LD_INT 1
45370: ARRAY
45371: PUSH
45372: LD_VAR 0 5
45376: ARRAY
45377: PUSH
45378: LD_VAR 0 6
45382: PUSH
45383: LD_INT 2
45385: ARRAY
45386: PUSH
45387: LD_VAR 0 5
45391: ARRAY
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45397: LD_INT 92
45399: PUSH
45400: LD_VAR 0 7
45404: PUSH
45405: LD_INT 1
45407: ARRAY
45408: PUSH
45409: LD_VAR 0 7
45413: PUSH
45414: LD_INT 2
45416: ARRAY
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: PPUSH
45427: CALL_OW 69
45431: PUSH
45432: LD_INT 0
45434: EQUAL
45435: IFFALSE 45488
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45437: LD_VAR 0 1
45441: PPUSH
45442: LD_VAR 0 7
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PPUSH
45451: LD_VAR 0 7
45455: PUSH
45456: LD_INT 2
45458: ARRAY
45459: PPUSH
45460: LD_VAR 0 3
45464: PPUSH
45465: CALL_OW 48
// result := IsPlaced ( unit ) ;
45469: LD_ADDR_VAR 0 4
45473: PUSH
45474: LD_VAR 0 1
45478: PPUSH
45479: CALL_OW 305
45483: ST_TO_ADDR
// exit ;
45484: POP
45485: POP
45486: GO 45492
// end ; end ;
45488: GO 45355
45490: POP
45491: POP
// end ;
45492: LD_VAR 0 4
45496: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45497: LD_INT 0
45499: PPUSH
45500: PPUSH
45501: PPUSH
// if not side or side > 8 then
45502: LD_VAR 0 1
45506: NOT
45507: PUSH
45508: LD_VAR 0 1
45512: PUSH
45513: LD_INT 8
45515: GREATER
45516: OR
45517: IFFALSE 45521
// exit ;
45519: GO 45708
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45521: LD_ADDR_VAR 0 4
45525: PUSH
45526: LD_INT 22
45528: PUSH
45529: LD_VAR 0 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 21
45540: PUSH
45541: LD_INT 3
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PPUSH
45552: CALL_OW 69
45556: ST_TO_ADDR
// if not tmp then
45557: LD_VAR 0 4
45561: NOT
45562: IFFALSE 45566
// exit ;
45564: GO 45708
// enable_addtolog := true ;
45566: LD_ADDR_OWVAR 81
45570: PUSH
45571: LD_INT 1
45573: ST_TO_ADDR
// AddToLog ( [ ) ;
45574: LD_STRING [
45576: PPUSH
45577: CALL_OW 561
// for i in tmp do
45581: LD_ADDR_VAR 0 3
45585: PUSH
45586: LD_VAR 0 4
45590: PUSH
45591: FOR_IN
45592: IFFALSE 45699
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45594: LD_STRING [
45596: PUSH
45597: LD_VAR 0 3
45601: PPUSH
45602: CALL_OW 266
45606: STR
45607: PUSH
45608: LD_STRING , 
45610: STR
45611: PUSH
45612: LD_VAR 0 3
45616: PPUSH
45617: CALL_OW 250
45621: STR
45622: PUSH
45623: LD_STRING , 
45625: STR
45626: PUSH
45627: LD_VAR 0 3
45631: PPUSH
45632: CALL_OW 251
45636: STR
45637: PUSH
45638: LD_STRING , 
45640: STR
45641: PUSH
45642: LD_VAR 0 3
45646: PPUSH
45647: CALL_OW 254
45651: STR
45652: PUSH
45653: LD_STRING , 
45655: STR
45656: PUSH
45657: LD_VAR 0 3
45661: PPUSH
45662: LD_INT 1
45664: PPUSH
45665: CALL_OW 268
45669: STR
45670: PUSH
45671: LD_STRING , 
45673: STR
45674: PUSH
45675: LD_VAR 0 3
45679: PPUSH
45680: LD_INT 2
45682: PPUSH
45683: CALL_OW 268
45687: STR
45688: PUSH
45689: LD_STRING ],
45691: STR
45692: PPUSH
45693: CALL_OW 561
// end ;
45697: GO 45591
45699: POP
45700: POP
// AddToLog ( ]; ) ;
45701: LD_STRING ];
45703: PPUSH
45704: CALL_OW 561
// end ;
45708: LD_VAR 0 2
45712: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45713: LD_INT 0
45715: PPUSH
45716: PPUSH
45717: PPUSH
45718: PPUSH
45719: PPUSH
// if not area or not rate or not max then
45720: LD_VAR 0 1
45724: NOT
45725: PUSH
45726: LD_VAR 0 2
45730: NOT
45731: OR
45732: PUSH
45733: LD_VAR 0 4
45737: NOT
45738: OR
45739: IFFALSE 45743
// exit ;
45741: GO 45932
// while 1 do
45743: LD_INT 1
45745: IFFALSE 45932
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45747: LD_ADDR_VAR 0 9
45751: PUSH
45752: LD_VAR 0 1
45756: PPUSH
45757: LD_INT 1
45759: PPUSH
45760: CALL_OW 287
45764: PUSH
45765: LD_INT 10
45767: MUL
45768: ST_TO_ADDR
// r := rate / 10 ;
45769: LD_ADDR_VAR 0 7
45773: PUSH
45774: LD_VAR 0 2
45778: PUSH
45779: LD_INT 10
45781: DIVREAL
45782: ST_TO_ADDR
// time := 1 1$00 ;
45783: LD_ADDR_VAR 0 8
45787: PUSH
45788: LD_INT 2100
45790: ST_TO_ADDR
// if amount < min then
45791: LD_VAR 0 9
45795: PUSH
45796: LD_VAR 0 3
45800: LESS
45801: IFFALSE 45819
// r := r * 2 else
45803: LD_ADDR_VAR 0 7
45807: PUSH
45808: LD_VAR 0 7
45812: PUSH
45813: LD_INT 2
45815: MUL
45816: ST_TO_ADDR
45817: GO 45845
// if amount > max then
45819: LD_VAR 0 9
45823: PUSH
45824: LD_VAR 0 4
45828: GREATER
45829: IFFALSE 45845
// r := r / 2 ;
45831: LD_ADDR_VAR 0 7
45835: PUSH
45836: LD_VAR 0 7
45840: PUSH
45841: LD_INT 2
45843: DIVREAL
45844: ST_TO_ADDR
// time := time / r ;
45845: LD_ADDR_VAR 0 8
45849: PUSH
45850: LD_VAR 0 8
45854: PUSH
45855: LD_VAR 0 7
45859: DIVREAL
45860: ST_TO_ADDR
// if time < 0 then
45861: LD_VAR 0 8
45865: PUSH
45866: LD_INT 0
45868: LESS
45869: IFFALSE 45886
// time := time * - 1 ;
45871: LD_ADDR_VAR 0 8
45875: PUSH
45876: LD_VAR 0 8
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: MUL
45885: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45886: LD_VAR 0 8
45890: PUSH
45891: LD_INT 35
45893: PPUSH
45894: LD_INT 875
45896: PPUSH
45897: CALL_OW 12
45901: PLUS
45902: PPUSH
45903: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45907: LD_INT 1
45909: PPUSH
45910: LD_INT 5
45912: PPUSH
45913: CALL_OW 12
45917: PPUSH
45918: LD_VAR 0 1
45922: PPUSH
45923: LD_INT 1
45925: PPUSH
45926: CALL_OW 55
// end ;
45930: GO 45743
// end ;
45932: LD_VAR 0 5
45936: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45937: LD_INT 0
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
// if not turrets or not factories then
45947: LD_VAR 0 1
45951: NOT
45952: PUSH
45953: LD_VAR 0 2
45957: NOT
45958: OR
45959: IFFALSE 45963
// exit ;
45961: GO 46270
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45963: LD_ADDR_VAR 0 10
45967: PUSH
45968: LD_INT 5
45970: PUSH
45971: LD_INT 6
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 4
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: LD_INT 5
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 24
46005: PUSH
46006: LD_INT 25
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 23
46015: PUSH
46016: LD_INT 27
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 42
46029: PUSH
46030: LD_INT 43
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 44
46039: PUSH
46040: LD_INT 46
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 45
46049: PUSH
46050: LD_INT 47
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: ST_TO_ADDR
// result := [ ] ;
46067: LD_ADDR_VAR 0 3
46071: PUSH
46072: EMPTY
46073: ST_TO_ADDR
// for i in turrets do
46074: LD_ADDR_VAR 0 4
46078: PUSH
46079: LD_VAR 0 1
46083: PUSH
46084: FOR_IN
46085: IFFALSE 46268
// begin nat := GetNation ( i ) ;
46087: LD_ADDR_VAR 0 7
46091: PUSH
46092: LD_VAR 0 4
46096: PPUSH
46097: CALL_OW 248
46101: ST_TO_ADDR
// weapon := 0 ;
46102: LD_ADDR_VAR 0 8
46106: PUSH
46107: LD_INT 0
46109: ST_TO_ADDR
// if not nat then
46110: LD_VAR 0 7
46114: NOT
46115: IFFALSE 46119
// continue ;
46117: GO 46084
// for j in list [ nat ] do
46119: LD_ADDR_VAR 0 5
46123: PUSH
46124: LD_VAR 0 10
46128: PUSH
46129: LD_VAR 0 7
46133: ARRAY
46134: PUSH
46135: FOR_IN
46136: IFFALSE 46177
// if GetBWeapon ( i ) = j [ 1 ] then
46138: LD_VAR 0 4
46142: PPUSH
46143: CALL_OW 269
46147: PUSH
46148: LD_VAR 0 5
46152: PUSH
46153: LD_INT 1
46155: ARRAY
46156: EQUAL
46157: IFFALSE 46175
// begin weapon := j [ 2 ] ;
46159: LD_ADDR_VAR 0 8
46163: PUSH
46164: LD_VAR 0 5
46168: PUSH
46169: LD_INT 2
46171: ARRAY
46172: ST_TO_ADDR
// break ;
46173: GO 46177
// end ;
46175: GO 46135
46177: POP
46178: POP
// if not weapon then
46179: LD_VAR 0 8
46183: NOT
46184: IFFALSE 46188
// continue ;
46186: GO 46084
// for k in factories do
46188: LD_ADDR_VAR 0 6
46192: PUSH
46193: LD_VAR 0 2
46197: PUSH
46198: FOR_IN
46199: IFFALSE 46264
// begin weapons := AvailableWeaponList ( k ) ;
46201: LD_ADDR_VAR 0 9
46205: PUSH
46206: LD_VAR 0 6
46210: PPUSH
46211: CALL_OW 478
46215: ST_TO_ADDR
// if not weapons then
46216: LD_VAR 0 9
46220: NOT
46221: IFFALSE 46225
// continue ;
46223: GO 46198
// if weapon in weapons then
46225: LD_VAR 0 8
46229: PUSH
46230: LD_VAR 0 9
46234: IN
46235: IFFALSE 46262
// begin result := [ i , weapon ] ;
46237: LD_ADDR_VAR 0 3
46241: PUSH
46242: LD_VAR 0 4
46246: PUSH
46247: LD_VAR 0 8
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// exit ;
46256: POP
46257: POP
46258: POP
46259: POP
46260: GO 46270
// end ; end ;
46262: GO 46198
46264: POP
46265: POP
// end ;
46266: GO 46084
46268: POP
46269: POP
// end ;
46270: LD_VAR 0 3
46274: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46275: LD_INT 0
46277: PPUSH
// if not side or side > 8 then
46278: LD_VAR 0 3
46282: NOT
46283: PUSH
46284: LD_VAR 0 3
46288: PUSH
46289: LD_INT 8
46291: GREATER
46292: OR
46293: IFFALSE 46297
// exit ;
46295: GO 46356
// if not range then
46297: LD_VAR 0 4
46301: NOT
46302: IFFALSE 46313
// range := - 12 ;
46304: LD_ADDR_VAR 0 4
46308: PUSH
46309: LD_INT 12
46311: NEG
46312: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46313: LD_VAR 0 1
46317: PPUSH
46318: LD_VAR 0 2
46322: PPUSH
46323: LD_VAR 0 3
46327: PPUSH
46328: LD_VAR 0 4
46332: PPUSH
46333: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46337: LD_VAR 0 1
46341: PPUSH
46342: LD_VAR 0 2
46346: PPUSH
46347: LD_VAR 0 3
46351: PPUSH
46352: CALL_OW 331
// end ;
46356: LD_VAR 0 5
46360: RET
// export function Video ( mode ) ; begin
46361: LD_INT 0
46363: PPUSH
// ingame_video = mode ;
46364: LD_ADDR_OWVAR 52
46368: PUSH
46369: LD_VAR 0 1
46373: ST_TO_ADDR
// interface_hidden = mode ;
46374: LD_ADDR_OWVAR 54
46378: PUSH
46379: LD_VAR 0 1
46383: ST_TO_ADDR
// end ;
46384: LD_VAR 0 2
46388: RET
// export function Join ( array , element ) ; begin
46389: LD_INT 0
46391: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46392: LD_ADDR_VAR 0 3
46396: PUSH
46397: LD_VAR 0 1
46401: PPUSH
46402: LD_VAR 0 1
46406: PUSH
46407: LD_INT 1
46409: PLUS
46410: PPUSH
46411: LD_VAR 0 2
46415: PPUSH
46416: CALL_OW 1
46420: ST_TO_ADDR
// end ;
46421: LD_VAR 0 3
46425: RET
// export function JoinUnion ( array , element ) ; begin
46426: LD_INT 0
46428: PPUSH
// result := array union element ;
46429: LD_ADDR_VAR 0 3
46433: PUSH
46434: LD_VAR 0 1
46438: PUSH
46439: LD_VAR 0 2
46443: UNION
46444: ST_TO_ADDR
// end ;
46445: LD_VAR 0 3
46449: RET
// export function GetBehemoths ( side ) ; begin
46450: LD_INT 0
46452: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46453: LD_ADDR_VAR 0 2
46457: PUSH
46458: LD_INT 22
46460: PUSH
46461: LD_VAR 0 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 31
46472: PUSH
46473: LD_INT 25
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PPUSH
46484: CALL_OW 69
46488: ST_TO_ADDR
// end ;
46489: LD_VAR 0 2
46493: RET
// export function Shuffle ( array ) ; var i , index ; begin
46494: LD_INT 0
46496: PPUSH
46497: PPUSH
46498: PPUSH
// result := [ ] ;
46499: LD_ADDR_VAR 0 2
46503: PUSH
46504: EMPTY
46505: ST_TO_ADDR
// if not array then
46506: LD_VAR 0 1
46510: NOT
46511: IFFALSE 46515
// exit ;
46513: GO 46614
// Randomize ;
46515: CALL_OW 10
// for i = array downto 1 do
46519: LD_ADDR_VAR 0 3
46523: PUSH
46524: DOUBLE
46525: LD_VAR 0 1
46529: INC
46530: ST_TO_ADDR
46531: LD_INT 1
46533: PUSH
46534: FOR_DOWNTO
46535: IFFALSE 46612
// begin index := rand ( 1 , array ) ;
46537: LD_ADDR_VAR 0 4
46541: PUSH
46542: LD_INT 1
46544: PPUSH
46545: LD_VAR 0 1
46549: PPUSH
46550: CALL_OW 12
46554: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46555: LD_ADDR_VAR 0 2
46559: PUSH
46560: LD_VAR 0 2
46564: PPUSH
46565: LD_VAR 0 2
46569: PUSH
46570: LD_INT 1
46572: PLUS
46573: PPUSH
46574: LD_VAR 0 1
46578: PUSH
46579: LD_VAR 0 4
46583: ARRAY
46584: PPUSH
46585: CALL_OW 2
46589: ST_TO_ADDR
// array := Delete ( array , index ) ;
46590: LD_ADDR_VAR 0 1
46594: PUSH
46595: LD_VAR 0 1
46599: PPUSH
46600: LD_VAR 0 4
46604: PPUSH
46605: CALL_OW 3
46609: ST_TO_ADDR
// end ;
46610: GO 46534
46612: POP
46613: POP
// end ;
46614: LD_VAR 0 2
46618: RET
// export function GetBaseMaterials ( base ) ; begin
46619: LD_INT 0
46621: PPUSH
// result := [ 0 , 0 , 0 ] ;
46622: LD_ADDR_VAR 0 2
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// if not base then
46641: LD_VAR 0 1
46645: NOT
46646: IFFALSE 46650
// exit ;
46648: GO 46699
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46650: LD_ADDR_VAR 0 2
46654: PUSH
46655: LD_VAR 0 1
46659: PPUSH
46660: LD_INT 1
46662: PPUSH
46663: CALL_OW 275
46667: PUSH
46668: LD_VAR 0 1
46672: PPUSH
46673: LD_INT 2
46675: PPUSH
46676: CALL_OW 275
46680: PUSH
46681: LD_VAR 0 1
46685: PPUSH
46686: LD_INT 3
46688: PPUSH
46689: CALL_OW 275
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: LIST
46698: ST_TO_ADDR
// end ;
46699: LD_VAR 0 2
46703: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46704: LD_INT 0
46706: PPUSH
46707: PPUSH
// result := array ;
46708: LD_ADDR_VAR 0 3
46712: PUSH
46713: LD_VAR 0 1
46717: ST_TO_ADDR
// if size >= result then
46718: LD_VAR 0 2
46722: PUSH
46723: LD_VAR 0 3
46727: GREATEREQUAL
46728: IFFALSE 46732
// exit ;
46730: GO 46782
// if size then
46732: LD_VAR 0 2
46736: IFFALSE 46782
// for i := array downto size do
46738: LD_ADDR_VAR 0 4
46742: PUSH
46743: DOUBLE
46744: LD_VAR 0 1
46748: INC
46749: ST_TO_ADDR
46750: LD_VAR 0 2
46754: PUSH
46755: FOR_DOWNTO
46756: IFFALSE 46780
// result := Delete ( result , result ) ;
46758: LD_ADDR_VAR 0 3
46762: PUSH
46763: LD_VAR 0 3
46767: PPUSH
46768: LD_VAR 0 3
46772: PPUSH
46773: CALL_OW 3
46777: ST_TO_ADDR
46778: GO 46755
46780: POP
46781: POP
// end ;
46782: LD_VAR 0 3
46786: RET
// export function ComExit ( unit ) ; var tmp ; begin
46787: LD_INT 0
46789: PPUSH
46790: PPUSH
// if not IsInUnit ( unit ) then
46791: LD_VAR 0 1
46795: PPUSH
46796: CALL_OW 310
46800: NOT
46801: IFFALSE 46805
// exit ;
46803: GO 46865
// tmp := IsInUnit ( unit ) ;
46805: LD_ADDR_VAR 0 3
46809: PUSH
46810: LD_VAR 0 1
46814: PPUSH
46815: CALL_OW 310
46819: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46820: LD_VAR 0 3
46824: PPUSH
46825: CALL_OW 247
46829: PUSH
46830: LD_INT 2
46832: EQUAL
46833: IFFALSE 46846
// ComExitVehicle ( unit ) else
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 121
46844: GO 46855
// ComExitBuilding ( unit ) ;
46846: LD_VAR 0 1
46850: PPUSH
46851: CALL_OW 122
// result := tmp ;
46855: LD_ADDR_VAR 0 2
46859: PUSH
46860: LD_VAR 0 3
46864: ST_TO_ADDR
// end ;
46865: LD_VAR 0 2
46869: RET
// export function ComExitAll ( units ) ; var i ; begin
46870: LD_INT 0
46872: PPUSH
46873: PPUSH
// if not units then
46874: LD_VAR 0 1
46878: NOT
46879: IFFALSE 46883
// exit ;
46881: GO 46909
// for i in units do
46883: LD_ADDR_VAR 0 3
46887: PUSH
46888: LD_VAR 0 1
46892: PUSH
46893: FOR_IN
46894: IFFALSE 46907
// ComExit ( i ) ;
46896: LD_VAR 0 3
46900: PPUSH
46901: CALL 46787 0 1
46905: GO 46893
46907: POP
46908: POP
// end ;
46909: LD_VAR 0 2
46913: RET
// export function ResetHc ; begin
46914: LD_INT 0
46916: PPUSH
// InitHc ;
46917: CALL_OW 19
// hc_importance := 0 ;
46921: LD_ADDR_OWVAR 32
46925: PUSH
46926: LD_INT 0
46928: ST_TO_ADDR
// end ;
46929: LD_VAR 0 1
46933: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46934: LD_INT 0
46936: PPUSH
46937: PPUSH
46938: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46939: LD_ADDR_VAR 0 6
46943: PUSH
46944: LD_VAR 0 1
46948: PUSH
46949: LD_VAR 0 3
46953: PLUS
46954: PUSH
46955: LD_INT 2
46957: DIV
46958: ST_TO_ADDR
// if _x < 0 then
46959: LD_VAR 0 6
46963: PUSH
46964: LD_INT 0
46966: LESS
46967: IFFALSE 46984
// _x := _x * - 1 ;
46969: LD_ADDR_VAR 0 6
46973: PUSH
46974: LD_VAR 0 6
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: MUL
46983: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46984: LD_ADDR_VAR 0 7
46988: PUSH
46989: LD_VAR 0 2
46993: PUSH
46994: LD_VAR 0 4
46998: PLUS
46999: PUSH
47000: LD_INT 2
47002: DIV
47003: ST_TO_ADDR
// if _y < 0 then
47004: LD_VAR 0 7
47008: PUSH
47009: LD_INT 0
47011: LESS
47012: IFFALSE 47029
// _y := _y * - 1 ;
47014: LD_ADDR_VAR 0 7
47018: PUSH
47019: LD_VAR 0 7
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: MUL
47028: ST_TO_ADDR
// result := [ _x , _y ] ;
47029: LD_ADDR_VAR 0 5
47033: PUSH
47034: LD_VAR 0 6
47038: PUSH
47039: LD_VAR 0 7
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: ST_TO_ADDR
// end ;
47048: LD_VAR 0 5
47052: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47053: LD_INT 0
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
// task := GetTaskList ( unit ) ;
47059: LD_ADDR_VAR 0 7
47063: PUSH
47064: LD_VAR 0 1
47068: PPUSH
47069: CALL_OW 437
47073: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47074: LD_VAR 0 7
47078: NOT
47079: PUSH
47080: LD_VAR 0 1
47084: PPUSH
47085: LD_VAR 0 2
47089: PPUSH
47090: CALL_OW 308
47094: NOT
47095: AND
47096: IFFALSE 47100
// exit ;
47098: GO 47218
// if IsInArea ( unit , area ) then
47100: LD_VAR 0 1
47104: PPUSH
47105: LD_VAR 0 2
47109: PPUSH
47110: CALL_OW 308
47114: IFFALSE 47132
// begin ComMoveToArea ( unit , goAway ) ;
47116: LD_VAR 0 1
47120: PPUSH
47121: LD_VAR 0 3
47125: PPUSH
47126: CALL_OW 113
// exit ;
47130: GO 47218
// end ; if task [ 1 ] [ 1 ] <> M then
47132: LD_VAR 0 7
47136: PUSH
47137: LD_INT 1
47139: ARRAY
47140: PUSH
47141: LD_INT 1
47143: ARRAY
47144: PUSH
47145: LD_STRING M
47147: NONEQUAL
47148: IFFALSE 47152
// exit ;
47150: GO 47218
// x := task [ 1 ] [ 2 ] ;
47152: LD_ADDR_VAR 0 5
47156: PUSH
47157: LD_VAR 0 7
47161: PUSH
47162: LD_INT 1
47164: ARRAY
47165: PUSH
47166: LD_INT 2
47168: ARRAY
47169: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47170: LD_ADDR_VAR 0 6
47174: PUSH
47175: LD_VAR 0 7
47179: PUSH
47180: LD_INT 1
47182: ARRAY
47183: PUSH
47184: LD_INT 3
47186: ARRAY
47187: ST_TO_ADDR
// if InArea ( x , y , area ) then
47188: LD_VAR 0 5
47192: PPUSH
47193: LD_VAR 0 6
47197: PPUSH
47198: LD_VAR 0 2
47202: PPUSH
47203: CALL_OW 309
47207: IFFALSE 47218
// ComStop ( unit ) ;
47209: LD_VAR 0 1
47213: PPUSH
47214: CALL_OW 141
// end ;
47218: LD_VAR 0 4
47222: RET
// export function Abs ( value ) ; begin
47223: LD_INT 0
47225: PPUSH
// result := value ;
47226: LD_ADDR_VAR 0 2
47230: PUSH
47231: LD_VAR 0 1
47235: ST_TO_ADDR
// if value < 0 then
47236: LD_VAR 0 1
47240: PUSH
47241: LD_INT 0
47243: LESS
47244: IFFALSE 47261
// result := value * - 1 ;
47246: LD_ADDR_VAR 0 2
47250: PUSH
47251: LD_VAR 0 1
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: MUL
47260: ST_TO_ADDR
// end ;
47261: LD_VAR 0 2
47265: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47266: LD_INT 0
47268: PPUSH
47269: PPUSH
47270: PPUSH
47271: PPUSH
47272: PPUSH
47273: PPUSH
47274: PPUSH
47275: PPUSH
// if not unit or not building then
47276: LD_VAR 0 1
47280: NOT
47281: PUSH
47282: LD_VAR 0 2
47286: NOT
47287: OR
47288: IFFALSE 47292
// exit ;
47290: GO 47518
// x := GetX ( building ) ;
47292: LD_ADDR_VAR 0 4
47296: PUSH
47297: LD_VAR 0 2
47301: PPUSH
47302: CALL_OW 250
47306: ST_TO_ADDR
// y := GetY ( building ) ;
47307: LD_ADDR_VAR 0 6
47311: PUSH
47312: LD_VAR 0 2
47316: PPUSH
47317: CALL_OW 251
47321: ST_TO_ADDR
// d := GetDir ( building ) ;
47322: LD_ADDR_VAR 0 8
47326: PUSH
47327: LD_VAR 0 2
47331: PPUSH
47332: CALL_OW 254
47336: ST_TO_ADDR
// r := 4 ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_INT 4
47344: ST_TO_ADDR
// for i := 1 to 5 do
47345: LD_ADDR_VAR 0 10
47349: PUSH
47350: DOUBLE
47351: LD_INT 1
47353: DEC
47354: ST_TO_ADDR
47355: LD_INT 5
47357: PUSH
47358: FOR_TO
47359: IFFALSE 47516
// begin _x := ShiftX ( x , d , r + i ) ;
47361: LD_ADDR_VAR 0 5
47365: PUSH
47366: LD_VAR 0 4
47370: PPUSH
47371: LD_VAR 0 8
47375: PPUSH
47376: LD_VAR 0 9
47380: PUSH
47381: LD_VAR 0 10
47385: PLUS
47386: PPUSH
47387: CALL_OW 272
47391: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47392: LD_ADDR_VAR 0 7
47396: PUSH
47397: LD_VAR 0 6
47401: PPUSH
47402: LD_VAR 0 8
47406: PPUSH
47407: LD_VAR 0 9
47411: PUSH
47412: LD_VAR 0 10
47416: PLUS
47417: PPUSH
47418: CALL_OW 273
47422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47423: LD_VAR 0 5
47427: PPUSH
47428: LD_VAR 0 7
47432: PPUSH
47433: CALL_OW 488
47437: PUSH
47438: LD_VAR 0 5
47442: PPUSH
47443: LD_VAR 0 7
47447: PPUSH
47448: CALL_OW 428
47452: PPUSH
47453: CALL_OW 247
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: IN
47468: NOT
47469: AND
47470: IFFALSE 47514
// begin ComMoveXY ( unit , _x , _y ) ;
47472: LD_VAR 0 1
47476: PPUSH
47477: LD_VAR 0 5
47481: PPUSH
47482: LD_VAR 0 7
47486: PPUSH
47487: CALL_OW 111
// result := [ _x , _y ] ;
47491: LD_ADDR_VAR 0 3
47495: PUSH
47496: LD_VAR 0 5
47500: PUSH
47501: LD_VAR 0 7
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// exit ;
47510: POP
47511: POP
47512: GO 47518
// end ; end ;
47514: GO 47358
47516: POP
47517: POP
// end ;
47518: LD_VAR 0 3
47522: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47523: LD_INT 0
47525: PPUSH
47526: PPUSH
47527: PPUSH
// result := 0 ;
47528: LD_ADDR_VAR 0 3
47532: PUSH
47533: LD_INT 0
47535: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47536: LD_VAR 0 1
47540: PUSH
47541: LD_INT 0
47543: LESS
47544: PUSH
47545: LD_VAR 0 1
47549: PUSH
47550: LD_INT 8
47552: GREATER
47553: OR
47554: PUSH
47555: LD_VAR 0 2
47559: PUSH
47560: LD_INT 0
47562: LESS
47563: OR
47564: PUSH
47565: LD_VAR 0 2
47569: PUSH
47570: LD_INT 8
47572: GREATER
47573: OR
47574: IFFALSE 47578
// exit ;
47576: GO 47653
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47578: LD_ADDR_VAR 0 4
47582: PUSH
47583: LD_INT 22
47585: PUSH
47586: LD_VAR 0 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PPUSH
47595: CALL_OW 69
47599: PUSH
47600: FOR_IN
47601: IFFALSE 47651
// begin un := UnitShoot ( i ) ;
47603: LD_ADDR_VAR 0 5
47607: PUSH
47608: LD_VAR 0 4
47612: PPUSH
47613: CALL_OW 504
47617: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47618: LD_VAR 0 5
47622: PPUSH
47623: CALL_OW 255
47627: PUSH
47628: LD_VAR 0 1
47632: EQUAL
47633: IFFALSE 47649
// begin result := un ;
47635: LD_ADDR_VAR 0 3
47639: PUSH
47640: LD_VAR 0 5
47644: ST_TO_ADDR
// exit ;
47645: POP
47646: POP
47647: GO 47653
// end ; end ;
47649: GO 47600
47651: POP
47652: POP
// end ;
47653: LD_VAR 0 3
47657: RET
// export function GetCargoBay ( units ) ; begin
47658: LD_INT 0
47660: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47661: LD_ADDR_VAR 0 2
47665: PUSH
47666: LD_VAR 0 1
47670: PPUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 34
47676: PUSH
47677: LD_INT 12
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 34
47686: PUSH
47687: LD_INT 51
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 34
47696: PUSH
47697: LD_INT 32
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 34
47706: PUSH
47707: LD_INT 89
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: PPUSH
47721: CALL_OW 72
47725: ST_TO_ADDR
// end ;
47726: LD_VAR 0 2
47730: RET
// export function Negate ( value ) ; begin
47731: LD_INT 0
47733: PPUSH
// result := not value ;
47734: LD_ADDR_VAR 0 2
47738: PUSH
47739: LD_VAR 0 1
47743: NOT
47744: ST_TO_ADDR
// end ;
47745: LD_VAR 0 2
47749: RET
// export function Inc ( value ) ; begin
47750: LD_INT 0
47752: PPUSH
// result := value + 1 ;
47753: LD_ADDR_VAR 0 2
47757: PUSH
47758: LD_VAR 0 1
47762: PUSH
47763: LD_INT 1
47765: PLUS
47766: ST_TO_ADDR
// end ;
47767: LD_VAR 0 2
47771: RET
// export function Dec ( value ) ; begin
47772: LD_INT 0
47774: PPUSH
// result := value - 1 ;
47775: LD_ADDR_VAR 0 2
47779: PUSH
47780: LD_VAR 0 1
47784: PUSH
47785: LD_INT 1
47787: MINUS
47788: ST_TO_ADDR
// end ;
47789: LD_VAR 0 2
47793: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47794: LD_INT 0
47796: PPUSH
47797: PPUSH
47798: PPUSH
47799: PPUSH
47800: PPUSH
47801: PPUSH
47802: PPUSH
47803: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47804: LD_VAR 0 1
47808: PPUSH
47809: LD_VAR 0 2
47813: PPUSH
47814: CALL_OW 488
47818: NOT
47819: PUSH
47820: LD_VAR 0 3
47824: PPUSH
47825: LD_VAR 0 4
47829: PPUSH
47830: CALL_OW 488
47834: NOT
47835: OR
47836: IFFALSE 47849
// begin result := - 1 ;
47838: LD_ADDR_VAR 0 5
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: ST_TO_ADDR
// exit ;
47847: GO 48084
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47849: LD_ADDR_VAR 0 12
47853: PUSH
47854: LD_VAR 0 1
47858: PPUSH
47859: LD_VAR 0 2
47863: PPUSH
47864: LD_VAR 0 3
47868: PPUSH
47869: LD_VAR 0 4
47873: PPUSH
47874: CALL 46934 0 4
47878: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47879: LD_ADDR_VAR 0 11
47883: PUSH
47884: LD_VAR 0 1
47888: PPUSH
47889: LD_VAR 0 2
47893: PPUSH
47894: LD_VAR 0 12
47898: PUSH
47899: LD_INT 1
47901: ARRAY
47902: PPUSH
47903: LD_VAR 0 12
47907: PUSH
47908: LD_INT 2
47910: ARRAY
47911: PPUSH
47912: CALL_OW 298
47916: ST_TO_ADDR
// distance := 9999 ;
47917: LD_ADDR_VAR 0 10
47921: PUSH
47922: LD_INT 9999
47924: ST_TO_ADDR
// for i := 0 to 5 do
47925: LD_ADDR_VAR 0 6
47929: PUSH
47930: DOUBLE
47931: LD_INT 0
47933: DEC
47934: ST_TO_ADDR
47935: LD_INT 5
47937: PUSH
47938: FOR_TO
47939: IFFALSE 48082
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47941: LD_ADDR_VAR 0 7
47945: PUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: LD_VAR 0 6
47955: PPUSH
47956: LD_VAR 0 11
47960: PPUSH
47961: CALL_OW 272
47965: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47966: LD_ADDR_VAR 0 8
47970: PUSH
47971: LD_VAR 0 2
47975: PPUSH
47976: LD_VAR 0 6
47980: PPUSH
47981: LD_VAR 0 11
47985: PPUSH
47986: CALL_OW 273
47990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47991: LD_VAR 0 7
47995: PPUSH
47996: LD_VAR 0 8
48000: PPUSH
48001: CALL_OW 488
48005: NOT
48006: IFFALSE 48010
// continue ;
48008: GO 47938
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48010: LD_ADDR_VAR 0 9
48014: PUSH
48015: LD_VAR 0 12
48019: PUSH
48020: LD_INT 1
48022: ARRAY
48023: PPUSH
48024: LD_VAR 0 12
48028: PUSH
48029: LD_INT 2
48031: ARRAY
48032: PPUSH
48033: LD_VAR 0 7
48037: PPUSH
48038: LD_VAR 0 8
48042: PPUSH
48043: CALL_OW 298
48047: ST_TO_ADDR
// if tmp < distance then
48048: LD_VAR 0 9
48052: PUSH
48053: LD_VAR 0 10
48057: LESS
48058: IFFALSE 48080
// begin result := i ;
48060: LD_ADDR_VAR 0 5
48064: PUSH
48065: LD_VAR 0 6
48069: ST_TO_ADDR
// distance := tmp ;
48070: LD_ADDR_VAR 0 10
48074: PUSH
48075: LD_VAR 0 9
48079: ST_TO_ADDR
// end ; end ;
48080: GO 47938
48082: POP
48083: POP
// end ;
48084: LD_VAR 0 5
48088: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48089: LD_INT 0
48091: PPUSH
48092: PPUSH
// if not driver or not IsInUnit ( driver ) then
48093: LD_VAR 0 1
48097: NOT
48098: PUSH
48099: LD_VAR 0 1
48103: PPUSH
48104: CALL_OW 310
48108: NOT
48109: OR
48110: IFFALSE 48114
// exit ;
48112: GO 48204
// vehicle := IsInUnit ( driver ) ;
48114: LD_ADDR_VAR 0 3
48118: PUSH
48119: LD_VAR 0 1
48123: PPUSH
48124: CALL_OW 310
48128: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48129: LD_VAR 0 1
48133: PPUSH
48134: LD_STRING \
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: PUSH
48164: LD_STRING E
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_VAR 0 3
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PPUSH
48200: CALL_OW 446
// end ;
48204: LD_VAR 0 2
48208: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48209: LD_INT 0
48211: PPUSH
48212: PPUSH
// if not driver or not IsInUnit ( driver ) then
48213: LD_VAR 0 1
48217: NOT
48218: PUSH
48219: LD_VAR 0 1
48223: PPUSH
48224: CALL_OW 310
48228: NOT
48229: OR
48230: IFFALSE 48234
// exit ;
48232: GO 48324
// vehicle := IsInUnit ( driver ) ;
48234: LD_ADDR_VAR 0 3
48238: PUSH
48239: LD_VAR 0 1
48243: PPUSH
48244: CALL_OW 310
48248: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48249: LD_VAR 0 1
48253: PPUSH
48254: LD_STRING \
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: PUSH
48284: LD_STRING E
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_VAR 0 3
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PPUSH
48320: CALL_OW 447
// end ;
48324: LD_VAR 0 2
48328: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48329: LD_INT 0
48331: PPUSH
48332: PPUSH
48333: PPUSH
// tmp := [ ] ;
48334: LD_ADDR_VAR 0 5
48338: PUSH
48339: EMPTY
48340: ST_TO_ADDR
// for i in units do
48341: LD_ADDR_VAR 0 4
48345: PUSH
48346: LD_VAR 0 1
48350: PUSH
48351: FOR_IN
48352: IFFALSE 48390
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48354: LD_ADDR_VAR 0 5
48358: PUSH
48359: LD_VAR 0 5
48363: PPUSH
48364: LD_VAR 0 5
48368: PUSH
48369: LD_INT 1
48371: PLUS
48372: PPUSH
48373: LD_VAR 0 4
48377: PPUSH
48378: CALL_OW 256
48382: PPUSH
48383: CALL_OW 2
48387: ST_TO_ADDR
48388: GO 48351
48390: POP
48391: POP
// if not tmp then
48392: LD_VAR 0 5
48396: NOT
48397: IFFALSE 48401
// exit ;
48399: GO 48449
// if asc then
48401: LD_VAR 0 2
48405: IFFALSE 48429
// result := SortListByListAsc ( units , tmp ) else
48407: LD_ADDR_VAR 0 3
48411: PUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: LD_VAR 0 5
48421: PPUSH
48422: CALL_OW 76
48426: ST_TO_ADDR
48427: GO 48449
// result := SortListByListDesc ( units , tmp ) ;
48429: LD_ADDR_VAR 0 3
48433: PUSH
48434: LD_VAR 0 1
48438: PPUSH
48439: LD_VAR 0 5
48443: PPUSH
48444: CALL_OW 77
48448: ST_TO_ADDR
// end ;
48449: LD_VAR 0 3
48453: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48454: LD_INT 0
48456: PPUSH
48457: PPUSH
// task := GetTaskList ( mech ) ;
48458: LD_ADDR_VAR 0 4
48462: PUSH
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 437
48472: ST_TO_ADDR
// if not task then
48473: LD_VAR 0 4
48477: NOT
48478: IFFALSE 48482
// exit ;
48480: GO 48524
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48482: LD_ADDR_VAR 0 3
48486: PUSH
48487: LD_VAR 0 4
48491: PUSH
48492: LD_INT 1
48494: ARRAY
48495: PUSH
48496: LD_INT 1
48498: ARRAY
48499: PUSH
48500: LD_STRING r
48502: EQUAL
48503: PUSH
48504: LD_VAR 0 4
48508: PUSH
48509: LD_INT 1
48511: ARRAY
48512: PUSH
48513: LD_INT 4
48515: ARRAY
48516: PUSH
48517: LD_VAR 0 2
48521: EQUAL
48522: AND
48523: ST_TO_ADDR
// end ;
48524: LD_VAR 0 3
48528: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48529: LD_INT 0
48531: PPUSH
// SetDir ( unit , d ) ;
48532: LD_VAR 0 1
48536: PPUSH
48537: LD_VAR 0 4
48541: PPUSH
48542: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48546: LD_VAR 0 1
48550: PPUSH
48551: LD_VAR 0 2
48555: PPUSH
48556: LD_VAR 0 3
48560: PPUSH
48561: LD_VAR 0 5
48565: PPUSH
48566: CALL_OW 48
// end ;
48570: LD_VAR 0 6
48574: RET
// export function ToNaturalNumber ( number ) ; begin
48575: LD_INT 0
48577: PPUSH
// result := number div 1 ;
48578: LD_ADDR_VAR 0 2
48582: PUSH
48583: LD_VAR 0 1
48587: PUSH
48588: LD_INT 1
48590: DIV
48591: ST_TO_ADDR
// if number < 0 then
48592: LD_VAR 0 1
48596: PUSH
48597: LD_INT 0
48599: LESS
48600: IFFALSE 48610
// result := 0 ;
48602: LD_ADDR_VAR 0 2
48606: PUSH
48607: LD_INT 0
48609: ST_TO_ADDR
// end ;
48610: LD_VAR 0 2
48614: RET
// export function SortByClass ( units , class ) ; var un ; begin
48615: LD_INT 0
48617: PPUSH
48618: PPUSH
// if not units or not class then
48619: LD_VAR 0 1
48623: NOT
48624: PUSH
48625: LD_VAR 0 2
48629: NOT
48630: OR
48631: IFFALSE 48635
// exit ;
48633: GO 48730
// result := [ ] ;
48635: LD_ADDR_VAR 0 3
48639: PUSH
48640: EMPTY
48641: ST_TO_ADDR
// for un in units do
48642: LD_ADDR_VAR 0 4
48646: PUSH
48647: LD_VAR 0 1
48651: PUSH
48652: FOR_IN
48653: IFFALSE 48728
// if GetClass ( un ) = class then
48655: LD_VAR 0 4
48659: PPUSH
48660: CALL_OW 257
48664: PUSH
48665: LD_VAR 0 2
48669: EQUAL
48670: IFFALSE 48697
// result := Insert ( result , 1 , un ) else
48672: LD_ADDR_VAR 0 3
48676: PUSH
48677: LD_VAR 0 3
48681: PPUSH
48682: LD_INT 1
48684: PPUSH
48685: LD_VAR 0 4
48689: PPUSH
48690: CALL_OW 2
48694: ST_TO_ADDR
48695: GO 48726
// result := Replace ( result , result + 1 , un ) ;
48697: LD_ADDR_VAR 0 3
48701: PUSH
48702: LD_VAR 0 3
48706: PPUSH
48707: LD_VAR 0 3
48711: PUSH
48712: LD_INT 1
48714: PLUS
48715: PPUSH
48716: LD_VAR 0 4
48720: PPUSH
48721: CALL_OW 1
48725: ST_TO_ADDR
48726: GO 48652
48728: POP
48729: POP
// end ;
48730: LD_VAR 0 3
48734: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48735: LD_INT 0
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
48743: PPUSH
// result := [ ] ;
48744: LD_ADDR_VAR 0 4
48748: PUSH
48749: EMPTY
48750: ST_TO_ADDR
// if x - r < 0 then
48751: LD_VAR 0 1
48755: PUSH
48756: LD_VAR 0 3
48760: MINUS
48761: PUSH
48762: LD_INT 0
48764: LESS
48765: IFFALSE 48777
// min_x := 0 else
48767: LD_ADDR_VAR 0 8
48771: PUSH
48772: LD_INT 0
48774: ST_TO_ADDR
48775: GO 48793
// min_x := x - r ;
48777: LD_ADDR_VAR 0 8
48781: PUSH
48782: LD_VAR 0 1
48786: PUSH
48787: LD_VAR 0 3
48791: MINUS
48792: ST_TO_ADDR
// if y - r < 0 then
48793: LD_VAR 0 2
48797: PUSH
48798: LD_VAR 0 3
48802: MINUS
48803: PUSH
48804: LD_INT 0
48806: LESS
48807: IFFALSE 48819
// min_y := 0 else
48809: LD_ADDR_VAR 0 7
48813: PUSH
48814: LD_INT 0
48816: ST_TO_ADDR
48817: GO 48835
// min_y := y - r ;
48819: LD_ADDR_VAR 0 7
48823: PUSH
48824: LD_VAR 0 2
48828: PUSH
48829: LD_VAR 0 3
48833: MINUS
48834: ST_TO_ADDR
// max_x := x + r ;
48835: LD_ADDR_VAR 0 9
48839: PUSH
48840: LD_VAR 0 1
48844: PUSH
48845: LD_VAR 0 3
48849: PLUS
48850: ST_TO_ADDR
// max_y := y + r ;
48851: LD_ADDR_VAR 0 10
48855: PUSH
48856: LD_VAR 0 2
48860: PUSH
48861: LD_VAR 0 3
48865: PLUS
48866: ST_TO_ADDR
// for _x = min_x to max_x do
48867: LD_ADDR_VAR 0 5
48871: PUSH
48872: DOUBLE
48873: LD_VAR 0 8
48877: DEC
48878: ST_TO_ADDR
48879: LD_VAR 0 9
48883: PUSH
48884: FOR_TO
48885: IFFALSE 48986
// for _y = min_y to max_y do
48887: LD_ADDR_VAR 0 6
48891: PUSH
48892: DOUBLE
48893: LD_VAR 0 7
48897: DEC
48898: ST_TO_ADDR
48899: LD_VAR 0 10
48903: PUSH
48904: FOR_TO
48905: IFFALSE 48982
// begin if not ValidHex ( _x , _y ) then
48907: LD_VAR 0 5
48911: PPUSH
48912: LD_VAR 0 6
48916: PPUSH
48917: CALL_OW 488
48921: NOT
48922: IFFALSE 48926
// continue ;
48924: GO 48904
// if GetResourceTypeXY ( _x , _y ) then
48926: LD_VAR 0 5
48930: PPUSH
48931: LD_VAR 0 6
48935: PPUSH
48936: CALL_OW 283
48940: IFFALSE 48980
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48942: LD_ADDR_VAR 0 4
48946: PUSH
48947: LD_VAR 0 4
48951: PPUSH
48952: LD_VAR 0 4
48956: PUSH
48957: LD_INT 1
48959: PLUS
48960: PPUSH
48961: LD_VAR 0 5
48965: PUSH
48966: LD_VAR 0 6
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PPUSH
48975: CALL_OW 1
48979: ST_TO_ADDR
// end ;
48980: GO 48904
48982: POP
48983: POP
48984: GO 48884
48986: POP
48987: POP
// end ;
48988: LD_VAR 0 4
48992: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48993: LD_INT 0
48995: PPUSH
48996: PPUSH
48997: PPUSH
48998: PPUSH
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
// if not units then
49003: LD_VAR 0 1
49007: NOT
49008: IFFALSE 49012
// exit ;
49010: GO 49540
// result := UnitFilter ( units , [ f_ok ] ) ;
49012: LD_ADDR_VAR 0 3
49016: PUSH
49017: LD_VAR 0 1
49021: PPUSH
49022: LD_INT 50
49024: PUSH
49025: EMPTY
49026: LIST
49027: PPUSH
49028: CALL_OW 72
49032: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49033: LD_ADDR_VAR 0 8
49037: PUSH
49038: LD_VAR 0 1
49042: PUSH
49043: LD_INT 1
49045: ARRAY
49046: PPUSH
49047: CALL_OW 255
49051: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49052: LD_ADDR_VAR 0 10
49056: PUSH
49057: LD_INT 29
49059: PUSH
49060: LD_INT 91
49062: PUSH
49063: LD_INT 49
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// if not result then
49071: LD_VAR 0 3
49075: NOT
49076: IFFALSE 49080
// exit ;
49078: GO 49540
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49080: LD_ADDR_VAR 0 5
49084: PUSH
49085: LD_INT 81
49087: PUSH
49088: LD_VAR 0 8
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PPUSH
49097: CALL_OW 69
49101: ST_TO_ADDR
// for i in result do
49102: LD_ADDR_VAR 0 4
49106: PUSH
49107: LD_VAR 0 3
49111: PUSH
49112: FOR_IN
49113: IFFALSE 49538
// begin tag := GetTag ( i ) + 1 ;
49115: LD_ADDR_VAR 0 9
49119: PUSH
49120: LD_VAR 0 4
49124: PPUSH
49125: CALL_OW 110
49129: PUSH
49130: LD_INT 1
49132: PLUS
49133: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49134: LD_ADDR_VAR 0 7
49138: PUSH
49139: LD_VAR 0 4
49143: PPUSH
49144: CALL_OW 250
49148: PPUSH
49149: LD_VAR 0 4
49153: PPUSH
49154: CALL_OW 251
49158: PPUSH
49159: LD_INT 4
49161: PPUSH
49162: CALL 48735 0 3
49166: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49167: LD_VAR 0 4
49171: PPUSH
49172: CALL_OW 247
49176: PUSH
49177: LD_INT 2
49179: EQUAL
49180: PUSH
49181: LD_VAR 0 7
49185: PUSH
49186: LD_INT 2
49188: GREATER
49189: AND
49190: PUSH
49191: LD_VAR 0 4
49195: PPUSH
49196: CALL_OW 264
49200: PUSH
49201: LD_VAR 0 10
49205: IN
49206: NOT
49207: AND
49208: IFFALSE 49247
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49210: LD_VAR 0 4
49214: PPUSH
49215: LD_VAR 0 7
49219: PUSH
49220: LD_INT 1
49222: ARRAY
49223: PUSH
49224: LD_INT 1
49226: ARRAY
49227: PPUSH
49228: LD_VAR 0 7
49232: PUSH
49233: LD_INT 1
49235: ARRAY
49236: PUSH
49237: LD_INT 2
49239: ARRAY
49240: PPUSH
49241: CALL_OW 116
49245: GO 49536
// if path > tag then
49247: LD_VAR 0 2
49251: PUSH
49252: LD_VAR 0 9
49256: GREATER
49257: IFFALSE 49465
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49259: LD_ADDR_VAR 0 6
49263: PUSH
49264: LD_VAR 0 5
49268: PPUSH
49269: LD_INT 91
49271: PUSH
49272: LD_VAR 0 4
49276: PUSH
49277: LD_INT 8
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: PPUSH
49285: CALL_OW 72
49289: ST_TO_ADDR
// if nearEnemy then
49290: LD_VAR 0 6
49294: IFFALSE 49363
// begin if GetWeapon ( i ) = ru_time_lapser then
49296: LD_VAR 0 4
49300: PPUSH
49301: CALL_OW 264
49305: PUSH
49306: LD_INT 49
49308: EQUAL
49309: IFFALSE 49337
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49311: LD_VAR 0 4
49315: PPUSH
49316: LD_VAR 0 6
49320: PPUSH
49321: LD_VAR 0 4
49325: PPUSH
49326: CALL_OW 74
49330: PPUSH
49331: CALL_OW 112
49335: GO 49361
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49337: LD_VAR 0 4
49341: PPUSH
49342: LD_VAR 0 6
49346: PPUSH
49347: LD_VAR 0 4
49351: PPUSH
49352: CALL_OW 74
49356: PPUSH
49357: CALL 50611 0 2
// end else
49361: GO 49463
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49363: LD_VAR 0 4
49367: PPUSH
49368: LD_VAR 0 2
49372: PUSH
49373: LD_VAR 0 9
49377: ARRAY
49378: PUSH
49379: LD_INT 1
49381: ARRAY
49382: PPUSH
49383: LD_VAR 0 2
49387: PUSH
49388: LD_VAR 0 9
49392: ARRAY
49393: PUSH
49394: LD_INT 2
49396: ARRAY
49397: PPUSH
49398: CALL_OW 297
49402: PUSH
49403: LD_INT 6
49405: GREATER
49406: IFFALSE 49449
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49408: LD_VAR 0 4
49412: PPUSH
49413: LD_VAR 0 2
49417: PUSH
49418: LD_VAR 0 9
49422: ARRAY
49423: PUSH
49424: LD_INT 1
49426: ARRAY
49427: PPUSH
49428: LD_VAR 0 2
49432: PUSH
49433: LD_VAR 0 9
49437: ARRAY
49438: PUSH
49439: LD_INT 2
49441: ARRAY
49442: PPUSH
49443: CALL_OW 114
49447: GO 49463
// SetTag ( i , tag ) ;
49449: LD_VAR 0 4
49453: PPUSH
49454: LD_VAR 0 9
49458: PPUSH
49459: CALL_OW 109
// end else
49463: GO 49536
// if enemy then
49465: LD_VAR 0 5
49469: IFFALSE 49536
// begin if GetWeapon ( i ) = ru_time_lapser then
49471: LD_VAR 0 4
49475: PPUSH
49476: CALL_OW 264
49480: PUSH
49481: LD_INT 49
49483: EQUAL
49484: IFFALSE 49512
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49486: LD_VAR 0 4
49490: PPUSH
49491: LD_VAR 0 5
49495: PPUSH
49496: LD_VAR 0 4
49500: PPUSH
49501: CALL_OW 74
49505: PPUSH
49506: CALL_OW 112
49510: GO 49536
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49512: LD_VAR 0 4
49516: PPUSH
49517: LD_VAR 0 5
49521: PPUSH
49522: LD_VAR 0 4
49526: PPUSH
49527: CALL_OW 74
49531: PPUSH
49532: CALL 50611 0 2
// end ; end ;
49536: GO 49112
49538: POP
49539: POP
// end ;
49540: LD_VAR 0 3
49544: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49545: LD_INT 0
49547: PPUSH
49548: PPUSH
49549: PPUSH
// if not unit or IsInUnit ( unit ) then
49550: LD_VAR 0 1
49554: NOT
49555: PUSH
49556: LD_VAR 0 1
49560: PPUSH
49561: CALL_OW 310
49565: OR
49566: IFFALSE 49570
// exit ;
49568: GO 49661
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49570: LD_ADDR_VAR 0 4
49574: PUSH
49575: LD_VAR 0 1
49579: PPUSH
49580: CALL_OW 250
49584: PPUSH
49585: LD_VAR 0 2
49589: PPUSH
49590: LD_INT 1
49592: PPUSH
49593: CALL_OW 272
49597: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49598: LD_ADDR_VAR 0 5
49602: PUSH
49603: LD_VAR 0 1
49607: PPUSH
49608: CALL_OW 251
49612: PPUSH
49613: LD_VAR 0 2
49617: PPUSH
49618: LD_INT 1
49620: PPUSH
49621: CALL_OW 273
49625: ST_TO_ADDR
// if ValidHex ( x , y ) then
49626: LD_VAR 0 4
49630: PPUSH
49631: LD_VAR 0 5
49635: PPUSH
49636: CALL_OW 488
49640: IFFALSE 49661
// ComTurnXY ( unit , x , y ) ;
49642: LD_VAR 0 1
49646: PPUSH
49647: LD_VAR 0 4
49651: PPUSH
49652: LD_VAR 0 5
49656: PPUSH
49657: CALL_OW 118
// end ;
49661: LD_VAR 0 3
49665: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49666: LD_INT 0
49668: PPUSH
49669: PPUSH
// result := false ;
49670: LD_ADDR_VAR 0 3
49674: PUSH
49675: LD_INT 0
49677: ST_TO_ADDR
// if not units then
49678: LD_VAR 0 2
49682: NOT
49683: IFFALSE 49687
// exit ;
49685: GO 49732
// for i in units do
49687: LD_ADDR_VAR 0 4
49691: PUSH
49692: LD_VAR 0 2
49696: PUSH
49697: FOR_IN
49698: IFFALSE 49730
// if See ( side , i ) then
49700: LD_VAR 0 1
49704: PPUSH
49705: LD_VAR 0 4
49709: PPUSH
49710: CALL_OW 292
49714: IFFALSE 49728
// begin result := true ;
49716: LD_ADDR_VAR 0 3
49720: PUSH
49721: LD_INT 1
49723: ST_TO_ADDR
// exit ;
49724: POP
49725: POP
49726: GO 49732
// end ;
49728: GO 49697
49730: POP
49731: POP
// end ;
49732: LD_VAR 0 3
49736: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49737: LD_INT 0
49739: PPUSH
49740: PPUSH
49741: PPUSH
49742: PPUSH
// if not unit or not points then
49743: LD_VAR 0 1
49747: NOT
49748: PUSH
49749: LD_VAR 0 2
49753: NOT
49754: OR
49755: IFFALSE 49759
// exit ;
49757: GO 49849
// dist := 99999 ;
49759: LD_ADDR_VAR 0 5
49763: PUSH
49764: LD_INT 99999
49766: ST_TO_ADDR
// for i in points do
49767: LD_ADDR_VAR 0 4
49771: PUSH
49772: LD_VAR 0 2
49776: PUSH
49777: FOR_IN
49778: IFFALSE 49847
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49780: LD_ADDR_VAR 0 6
49784: PUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: LD_VAR 0 4
49794: PUSH
49795: LD_INT 1
49797: ARRAY
49798: PPUSH
49799: LD_VAR 0 4
49803: PUSH
49804: LD_INT 2
49806: ARRAY
49807: PPUSH
49808: CALL_OW 297
49812: ST_TO_ADDR
// if tmpDist < dist then
49813: LD_VAR 0 6
49817: PUSH
49818: LD_VAR 0 5
49822: LESS
49823: IFFALSE 49845
// begin result := i ;
49825: LD_ADDR_VAR 0 3
49829: PUSH
49830: LD_VAR 0 4
49834: ST_TO_ADDR
// dist := tmpDist ;
49835: LD_ADDR_VAR 0 5
49839: PUSH
49840: LD_VAR 0 6
49844: ST_TO_ADDR
// end ; end ;
49845: GO 49777
49847: POP
49848: POP
// end ;
49849: LD_VAR 0 3
49853: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49854: LD_INT 0
49856: PPUSH
// uc_side := side ;
49857: LD_ADDR_OWVAR 20
49861: PUSH
49862: LD_VAR 0 1
49866: ST_TO_ADDR
// uc_nation := 3 ;
49867: LD_ADDR_OWVAR 21
49871: PUSH
49872: LD_INT 3
49874: ST_TO_ADDR
// vc_chassis := 25 ;
49875: LD_ADDR_OWVAR 37
49879: PUSH
49880: LD_INT 25
49882: ST_TO_ADDR
// vc_engine := engine_siberite ;
49883: LD_ADDR_OWVAR 39
49887: PUSH
49888: LD_INT 3
49890: ST_TO_ADDR
// vc_control := control_computer ;
49891: LD_ADDR_OWVAR 38
49895: PUSH
49896: LD_INT 3
49898: ST_TO_ADDR
// vc_weapon := 59 ;
49899: LD_ADDR_OWVAR 40
49903: PUSH
49904: LD_INT 59
49906: ST_TO_ADDR
// result := CreateVehicle ;
49907: LD_ADDR_VAR 0 5
49911: PUSH
49912: CALL_OW 45
49916: ST_TO_ADDR
// SetDir ( result , d ) ;
49917: LD_VAR 0 5
49921: PPUSH
49922: LD_VAR 0 4
49926: PPUSH
49927: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49931: LD_VAR 0 5
49935: PPUSH
49936: LD_VAR 0 2
49940: PPUSH
49941: LD_VAR 0 3
49945: PPUSH
49946: LD_INT 0
49948: PPUSH
49949: CALL_OW 48
// end ;
49953: LD_VAR 0 5
49957: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49958: LD_INT 0
49960: PPUSH
49961: PPUSH
49962: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49963: LD_ADDR_VAR 0 2
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49986: LD_VAR 0 1
49990: NOT
49991: PUSH
49992: LD_VAR 0 1
49996: PPUSH
49997: CALL_OW 264
50001: PUSH
50002: LD_INT 12
50004: PUSH
50005: LD_INT 51
50007: PUSH
50008: LD_INT 32
50010: PUSH
50011: LD_INT 89
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: IN
50020: NOT
50021: OR
50022: IFFALSE 50026
// exit ;
50024: GO 50124
// for i := 1 to 3 do
50026: LD_ADDR_VAR 0 3
50030: PUSH
50031: DOUBLE
50032: LD_INT 1
50034: DEC
50035: ST_TO_ADDR
50036: LD_INT 3
50038: PUSH
50039: FOR_TO
50040: IFFALSE 50122
// begin tmp := GetCargo ( cargo , i ) ;
50042: LD_ADDR_VAR 0 4
50046: PUSH
50047: LD_VAR 0 1
50051: PPUSH
50052: LD_VAR 0 3
50056: PPUSH
50057: CALL_OW 289
50061: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50062: LD_ADDR_VAR 0 2
50066: PUSH
50067: LD_VAR 0 2
50071: PPUSH
50072: LD_VAR 0 3
50076: PPUSH
50077: LD_VAR 0 4
50081: PPUSH
50082: CALL_OW 1
50086: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50087: LD_ADDR_VAR 0 2
50091: PUSH
50092: LD_VAR 0 2
50096: PPUSH
50097: LD_INT 4
50099: PPUSH
50100: LD_VAR 0 2
50104: PUSH
50105: LD_INT 4
50107: ARRAY
50108: PUSH
50109: LD_VAR 0 4
50113: PLUS
50114: PPUSH
50115: CALL_OW 1
50119: ST_TO_ADDR
// end ;
50120: GO 50039
50122: POP
50123: POP
// end ;
50124: LD_VAR 0 2
50128: RET
// export function Length ( array ) ; begin
50129: LD_INT 0
50131: PPUSH
// result := array + 0 ;
50132: LD_ADDR_VAR 0 2
50136: PUSH
50137: LD_VAR 0 1
50141: PUSH
50142: LD_INT 0
50144: PLUS
50145: ST_TO_ADDR
// end ;
50146: LD_VAR 0 2
50150: RET
// export function PrepareArray ( array ) ; begin
50151: LD_INT 0
50153: PPUSH
// result := array diff 0 ;
50154: LD_ADDR_VAR 0 2
50158: PUSH
50159: LD_VAR 0 1
50163: PUSH
50164: LD_INT 0
50166: DIFF
50167: ST_TO_ADDR
// if not result [ 1 ] then
50168: LD_VAR 0 2
50172: PUSH
50173: LD_INT 1
50175: ARRAY
50176: NOT
50177: IFFALSE 50197
// result := Delete ( result , 1 ) ;
50179: LD_ADDR_VAR 0 2
50183: PUSH
50184: LD_VAR 0 2
50188: PPUSH
50189: LD_INT 1
50191: PPUSH
50192: CALL_OW 3
50196: ST_TO_ADDR
// end ;
50197: LD_VAR 0 2
50201: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50202: LD_INT 0
50204: PPUSH
50205: PPUSH
50206: PPUSH
50207: PPUSH
// sibRocketRange := 25 ;
50208: LD_ADDR_VAR 0 6
50212: PUSH
50213: LD_INT 25
50215: ST_TO_ADDR
// result := false ;
50216: LD_ADDR_VAR 0 4
50220: PUSH
50221: LD_INT 0
50223: ST_TO_ADDR
// for i := 0 to 5 do
50224: LD_ADDR_VAR 0 5
50228: PUSH
50229: DOUBLE
50230: LD_INT 0
50232: DEC
50233: ST_TO_ADDR
50234: LD_INT 5
50236: PUSH
50237: FOR_TO
50238: IFFALSE 50305
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50240: LD_VAR 0 1
50244: PPUSH
50245: LD_VAR 0 5
50249: PPUSH
50250: LD_VAR 0 6
50254: PPUSH
50255: CALL_OW 272
50259: PPUSH
50260: LD_VAR 0 2
50264: PPUSH
50265: LD_VAR 0 5
50269: PPUSH
50270: LD_VAR 0 6
50274: PPUSH
50275: CALL_OW 273
50279: PPUSH
50280: LD_VAR 0 3
50284: PPUSH
50285: CALL_OW 309
50289: IFFALSE 50303
// begin result := true ;
50291: LD_ADDR_VAR 0 4
50295: PUSH
50296: LD_INT 1
50298: ST_TO_ADDR
// exit ;
50299: POP
50300: POP
50301: GO 50307
// end ;
50303: GO 50237
50305: POP
50306: POP
// end ;
50307: LD_VAR 0 4
50311: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50312: LD_INT 0
50314: PPUSH
50315: PPUSH
50316: PPUSH
// if btype = b_depot then
50317: LD_VAR 0 2
50321: PUSH
50322: LD_INT 0
50324: EQUAL
50325: IFFALSE 50337
// begin result := true ;
50327: LD_ADDR_VAR 0 3
50331: PUSH
50332: LD_INT 1
50334: ST_TO_ADDR
// exit ;
50335: GO 50453
// end ; pom := GetBase ( depot ) ;
50337: LD_ADDR_VAR 0 4
50341: PUSH
50342: LD_VAR 0 1
50346: PPUSH
50347: CALL_OW 274
50351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50352: LD_ADDR_VAR 0 5
50356: PUSH
50357: LD_VAR 0 2
50361: PPUSH
50362: LD_VAR 0 1
50366: PPUSH
50367: CALL_OW 248
50371: PPUSH
50372: CALL_OW 450
50376: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50377: LD_ADDR_VAR 0 3
50381: PUSH
50382: LD_VAR 0 4
50386: PPUSH
50387: LD_INT 1
50389: PPUSH
50390: CALL_OW 275
50394: PUSH
50395: LD_VAR 0 5
50399: PUSH
50400: LD_INT 1
50402: ARRAY
50403: GREATEREQUAL
50404: PUSH
50405: LD_VAR 0 4
50409: PPUSH
50410: LD_INT 2
50412: PPUSH
50413: CALL_OW 275
50417: PUSH
50418: LD_VAR 0 5
50422: PUSH
50423: LD_INT 2
50425: ARRAY
50426: GREATEREQUAL
50427: AND
50428: PUSH
50429: LD_VAR 0 4
50433: PPUSH
50434: LD_INT 3
50436: PPUSH
50437: CALL_OW 275
50441: PUSH
50442: LD_VAR 0 5
50446: PUSH
50447: LD_INT 3
50449: ARRAY
50450: GREATEREQUAL
50451: AND
50452: ST_TO_ADDR
// end ;
50453: LD_VAR 0 3
50457: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50458: LD_INT 0
50460: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50461: LD_VAR 0 1
50465: PPUSH
50466: LD_VAR 0 2
50470: PPUSH
50471: LD_INT 0
50473: PPUSH
50474: LD_INT 0
50476: PPUSH
50477: LD_INT 1
50479: PPUSH
50480: LD_INT 0
50482: PPUSH
50483: CALL_OW 587
// end ;
50487: LD_VAR 0 3
50491: RET
// export function CenterOnNow ( unit ) ; begin
50492: LD_INT 0
50494: PPUSH
// result := IsInUnit ( unit ) ;
50495: LD_ADDR_VAR 0 2
50499: PUSH
50500: LD_VAR 0 1
50504: PPUSH
50505: CALL_OW 310
50509: ST_TO_ADDR
// if not result then
50510: LD_VAR 0 2
50514: NOT
50515: IFFALSE 50527
// result := unit ;
50517: LD_ADDR_VAR 0 2
50521: PUSH
50522: LD_VAR 0 1
50526: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50527: LD_VAR 0 1
50531: PPUSH
50532: CALL_OW 87
// end ;
50536: LD_VAR 0 2
50540: RET
// export function ComMoveHex ( unit , hex ) ; begin
50541: LD_INT 0
50543: PPUSH
// if not hex then
50544: LD_VAR 0 2
50548: NOT
50549: IFFALSE 50553
// exit ;
50551: GO 50606
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50553: LD_VAR 0 2
50557: PUSH
50558: LD_INT 1
50560: ARRAY
50561: PPUSH
50562: LD_VAR 0 2
50566: PUSH
50567: LD_INT 2
50569: ARRAY
50570: PPUSH
50571: CALL_OW 428
50575: IFFALSE 50579
// exit ;
50577: GO 50606
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
50579: LD_VAR 0 1
50583: PPUSH
50584: LD_VAR 0 2
50588: PUSH
50589: LD_INT 1
50591: ARRAY
50592: PPUSH
50593: LD_VAR 0 2
50597: PUSH
50598: LD_INT 2
50600: ARRAY
50601: PPUSH
50602: CALL_OW 111
// end ;
50606: LD_VAR 0 3
50610: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50611: LD_INT 0
50613: PPUSH
50614: PPUSH
50615: PPUSH
// if not unit or not enemy then
50616: LD_VAR 0 1
50620: NOT
50621: PUSH
50622: LD_VAR 0 2
50626: NOT
50627: OR
50628: IFFALSE 50632
// exit ;
50630: GO 50756
// x := GetX ( enemy ) ;
50632: LD_ADDR_VAR 0 4
50636: PUSH
50637: LD_VAR 0 2
50641: PPUSH
50642: CALL_OW 250
50646: ST_TO_ADDR
// y := GetY ( enemy ) ;
50647: LD_ADDR_VAR 0 5
50651: PUSH
50652: LD_VAR 0 2
50656: PPUSH
50657: CALL_OW 251
50661: ST_TO_ADDR
// if ValidHex ( x , y ) then
50662: LD_VAR 0 4
50666: PPUSH
50667: LD_VAR 0 5
50671: PPUSH
50672: CALL_OW 488
50676: IFFALSE 50756
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
50678: LD_VAR 0 2
50682: PPUSH
50683: CALL_OW 247
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: IN
50698: PUSH
50699: LD_VAR 0 1
50703: PPUSH
50704: CALL_OW 255
50708: PPUSH
50709: LD_VAR 0 2
50713: PPUSH
50714: CALL_OW 292
50718: OR
50719: IFFALSE 50737
// ComAttackUnit ( unit , enemy ) else
50721: LD_VAR 0 1
50725: PPUSH
50726: LD_VAR 0 2
50730: PPUSH
50731: CALL_OW 115
50735: GO 50756
// ComAgressiveMove ( unit , x , y ) ;
50737: LD_VAR 0 1
50741: PPUSH
50742: LD_VAR 0 4
50746: PPUSH
50747: LD_VAR 0 5
50751: PPUSH
50752: CALL_OW 114
// end ;
50756: LD_VAR 0 3
50760: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
50761: LD_INT 0
50763: PPUSH
50764: PPUSH
50765: PPUSH
// list := AreaToList ( area , 0 ) ;
50766: LD_ADDR_VAR 0 5
50770: PUSH
50771: LD_VAR 0 1
50775: PPUSH
50776: LD_INT 0
50778: PPUSH
50779: CALL_OW 517
50783: ST_TO_ADDR
// if not list then
50784: LD_VAR 0 5
50788: NOT
50789: IFFALSE 50793
// exit ;
50791: GO 50923
// if all then
50793: LD_VAR 0 2
50797: IFFALSE 50885
// begin for i := 1 to list [ 1 ] do
50799: LD_ADDR_VAR 0 4
50803: PUSH
50804: DOUBLE
50805: LD_INT 1
50807: DEC
50808: ST_TO_ADDR
50809: LD_VAR 0 5
50813: PUSH
50814: LD_INT 1
50816: ARRAY
50817: PUSH
50818: FOR_TO
50819: IFFALSE 50881
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
50821: LD_ADDR_VAR 0 3
50825: PUSH
50826: LD_VAR 0 3
50830: PPUSH
50831: LD_VAR 0 3
50835: PUSH
50836: LD_INT 1
50838: PLUS
50839: PPUSH
50840: LD_VAR 0 5
50844: PUSH
50845: LD_INT 1
50847: ARRAY
50848: PUSH
50849: LD_VAR 0 4
50853: ARRAY
50854: PUSH
50855: LD_VAR 0 5
50859: PUSH
50860: LD_INT 2
50862: ARRAY
50863: PUSH
50864: LD_VAR 0 4
50868: ARRAY
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PPUSH
50874: CALL_OW 1
50878: ST_TO_ADDR
50879: GO 50818
50881: POP
50882: POP
// exit ;
50883: GO 50923
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
50885: LD_ADDR_VAR 0 3
50889: PUSH
50890: LD_VAR 0 5
50894: PUSH
50895: LD_INT 1
50897: ARRAY
50898: PUSH
50899: LD_INT 1
50901: ARRAY
50902: PUSH
50903: LD_VAR 0 5
50907: PUSH
50908: LD_INT 2
50910: ARRAY
50911: PUSH
50912: LD_INT 1
50914: ARRAY
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: ST_TO_ADDR
// end ;
50923: LD_VAR 0 3
50927: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
50928: LD_INT 0
50930: PPUSH
50931: PPUSH
// list := AreaToList ( area , 0 ) ;
50932: LD_ADDR_VAR 0 4
50936: PUSH
50937: LD_VAR 0 1
50941: PPUSH
50942: LD_INT 0
50944: PPUSH
50945: CALL_OW 517
50949: ST_TO_ADDR
// if not list then
50950: LD_VAR 0 4
50954: NOT
50955: IFFALSE 50959
// exit ;
50957: GO 51000
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
50959: LD_ADDR_VAR 0 3
50963: PUSH
50964: LD_VAR 0 4
50968: PUSH
50969: LD_INT 1
50971: ARRAY
50972: PUSH
50973: LD_INT 1
50975: ARRAY
50976: PUSH
50977: LD_VAR 0 4
50981: PUSH
50982: LD_INT 2
50984: ARRAY
50985: PUSH
50986: LD_INT 1
50988: ARRAY
50989: PUSH
50990: LD_VAR 0 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// end ;
51000: LD_VAR 0 3
51004: RET
// export function First ( array ) ; begin
51005: LD_INT 0
51007: PPUSH
// if not array then
51008: LD_VAR 0 1
51012: NOT
51013: IFFALSE 51017
// exit ;
51015: GO 51031
// result := array [ 1 ] ;
51017: LD_ADDR_VAR 0 2
51021: PUSH
51022: LD_VAR 0 1
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: ST_TO_ADDR
// end ;
51031: LD_VAR 0 2
51035: RET
// export function Last ( array ) ; begin
51036: LD_INT 0
51038: PPUSH
// if not array then
51039: LD_VAR 0 1
51043: NOT
51044: IFFALSE 51048
// exit ;
51046: GO 51064
// result := array [ array ] ;
51048: LD_ADDR_VAR 0 2
51052: PUSH
51053: LD_VAR 0 1
51057: PUSH
51058: LD_VAR 0 1
51062: ARRAY
51063: ST_TO_ADDR
// end ;
51064: LD_VAR 0 2
51068: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51069: LD_INT 0
51071: PPUSH
51072: PPUSH
// result := [ ] ;
51073: LD_ADDR_VAR 0 5
51077: PUSH
51078: EMPTY
51079: ST_TO_ADDR
// if not array then
51080: LD_VAR 0 1
51084: NOT
51085: IFFALSE 51089
// exit ;
51087: GO 51201
// for i := 1 to array do
51089: LD_ADDR_VAR 0 6
51093: PUSH
51094: DOUBLE
51095: LD_INT 1
51097: DEC
51098: ST_TO_ADDR
51099: LD_VAR 0 1
51103: PUSH
51104: FOR_TO
51105: IFFALSE 51199
// if array [ i ] [ index ] = value then
51107: LD_VAR 0 1
51111: PUSH
51112: LD_VAR 0 6
51116: ARRAY
51117: PUSH
51118: LD_VAR 0 2
51122: ARRAY
51123: PUSH
51124: LD_VAR 0 3
51128: EQUAL
51129: IFFALSE 51197
// begin if indexColumn then
51131: LD_VAR 0 4
51135: IFFALSE 51171
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51137: LD_ADDR_VAR 0 5
51141: PUSH
51142: LD_VAR 0 5
51146: PPUSH
51147: LD_VAR 0 1
51151: PUSH
51152: LD_VAR 0 6
51156: ARRAY
51157: PUSH
51158: LD_VAR 0 4
51162: ARRAY
51163: PPUSH
51164: CALL 46389 0 2
51168: ST_TO_ADDR
51169: GO 51197
// result := Join ( result , array [ i ] ) ;
51171: LD_ADDR_VAR 0 5
51175: PUSH
51176: LD_VAR 0 5
51180: PPUSH
51181: LD_VAR 0 1
51185: PUSH
51186: LD_VAR 0 6
51190: ARRAY
51191: PPUSH
51192: CALL 46389 0 2
51196: ST_TO_ADDR
// end ;
51197: GO 51104
51199: POP
51200: POP
// end ;
51201: LD_VAR 0 5
51205: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51206: LD_INT 0
51208: PPUSH
// if not vehicles or not parkingPoint then
51209: LD_VAR 0 1
51213: NOT
51214: PUSH
51215: LD_VAR 0 2
51219: NOT
51220: OR
51221: IFFALSE 51225
// exit ;
51223: GO 51323
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51225: LD_ADDR_VAR 0 1
51229: PUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: LD_INT 50
51237: PUSH
51238: EMPTY
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: LD_INT 92
51246: PUSH
51247: LD_VAR 0 2
51251: PUSH
51252: LD_INT 1
51254: ARRAY
51255: PUSH
51256: LD_VAR 0 2
51260: PUSH
51261: LD_INT 2
51263: ARRAY
51264: PUSH
51265: LD_INT 8
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PPUSH
51282: CALL_OW 72
51286: ST_TO_ADDR
// if not vehicles then
51287: LD_VAR 0 1
51291: NOT
51292: IFFALSE 51296
// exit ;
51294: GO 51323
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51296: LD_VAR 0 1
51300: PPUSH
51301: LD_VAR 0 2
51305: PUSH
51306: LD_INT 1
51308: ARRAY
51309: PPUSH
51310: LD_VAR 0 2
51314: PUSH
51315: LD_INT 2
51317: ARRAY
51318: PPUSH
51319: CALL_OW 111
// end ;
51323: LD_VAR 0 3
51327: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51328: LD_INT 0
51330: PPUSH
51331: PPUSH
51332: PPUSH
// if not side or not area then
51333: LD_VAR 0 1
51337: NOT
51338: PUSH
51339: LD_VAR 0 2
51343: NOT
51344: OR
51345: IFFALSE 51349
// exit ;
51347: GO 51468
// tmp := AreaToList ( area , 0 ) ;
51349: LD_ADDR_VAR 0 5
51353: PUSH
51354: LD_VAR 0 2
51358: PPUSH
51359: LD_INT 0
51361: PPUSH
51362: CALL_OW 517
51366: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51367: LD_ADDR_VAR 0 4
51371: PUSH
51372: DOUBLE
51373: LD_INT 1
51375: DEC
51376: ST_TO_ADDR
51377: LD_VAR 0 5
51381: PUSH
51382: LD_INT 1
51384: ARRAY
51385: PUSH
51386: FOR_TO
51387: IFFALSE 51466
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51389: LD_VAR 0 5
51393: PUSH
51394: LD_INT 1
51396: ARRAY
51397: PUSH
51398: LD_VAR 0 4
51402: ARRAY
51403: PPUSH
51404: LD_VAR 0 5
51408: PUSH
51409: LD_INT 2
51411: ARRAY
51412: PUSH
51413: LD_VAR 0 4
51417: ARRAY
51418: PPUSH
51419: CALL_OW 351
51423: IFFALSE 51464
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51425: LD_VAR 0 5
51429: PUSH
51430: LD_INT 1
51432: ARRAY
51433: PUSH
51434: LD_VAR 0 4
51438: ARRAY
51439: PPUSH
51440: LD_VAR 0 5
51444: PUSH
51445: LD_INT 2
51447: ARRAY
51448: PUSH
51449: LD_VAR 0 4
51453: ARRAY
51454: PPUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: CALL_OW 244
// end ;
51464: GO 51386
51466: POP
51467: POP
// end ; end_of_file
51468: LD_VAR 0 3
51472: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
51473: LD_VAR 0 1
51477: PPUSH
51478: LD_VAR 0 2
51482: PPUSH
51483: LD_VAR 0 3
51487: PPUSH
51488: LD_VAR 0 4
51492: PPUSH
51493: LD_VAR 0 5
51497: PPUSH
51498: LD_VAR 0 6
51502: PPUSH
51503: CALL 51704 0 6
// end ;
51507: PPOPN 6
51509: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
51510: LD_INT 0
51512: PPUSH
// begin if not units then
51513: LD_VAR 0 1
51517: NOT
51518: IFFALSE 51522
// exit ;
51520: GO 51522
// end ;
51522: PPOPN 7
51524: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
51525: CALL 51591 0 0
// end ; end_of_file
51529: PPOPN 1
51531: END
// export globalGameSaveCounter ; every 0 0$1 do
51532: GO 51534
51534: DISABLE
// begin enable ;
51535: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51536: LD_STRING updateTimer(
51538: PUSH
51539: LD_OWVAR 1
51543: STR
51544: PUSH
51545: LD_STRING );
51547: STR
51548: PPUSH
51549: CALL_OW 559
// end ;
51553: END
// every 0 0$1 do
51554: GO 51556
51556: DISABLE
// begin globalGameSaveCounter := 0 ;
51557: LD_ADDR_EXP 42
51561: PUSH
51562: LD_INT 0
51564: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51565: LD_STRING setGameSaveCounter(0)
51567: PPUSH
51568: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51572: LD_STRING initStreamRollete();
51574: PPUSH
51575: CALL_OW 559
// InitStreamMode ;
51579: CALL 52922 0 0
// DefineStreamItems ( false ) ;
51583: LD_INT 0
51585: PPUSH
51586: CALL 53386 0 1
// end ;
51590: END
// export function SOS_MapStart ( ) ; begin
51591: LD_INT 0
51593: PPUSH
// if streamModeActive then
51594: LD_EXP 43
51598: IFFALSE 51607
// DefineStreamItems ( true ) ;
51600: LD_INT 1
51602: PPUSH
51603: CALL 53386 0 1
// UpdateLuaVariables ( ) ;
51607: CALL 51624 0 0
// UpdateFactoryWaypoints ( ) ;
51611: CALL 66255 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51615: CALL 66512 0 0
// end ;
51619: LD_VAR 0 1
51623: RET
// function UpdateLuaVariables ( ) ; begin
51624: LD_INT 0
51626: PPUSH
// if globalGameSaveCounter then
51627: LD_EXP 42
51631: IFFALSE 51665
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51633: LD_ADDR_EXP 42
51637: PUSH
51638: LD_EXP 42
51642: PPUSH
51643: CALL 47750 0 1
51647: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51648: LD_STRING setGameSaveCounter(
51650: PUSH
51651: LD_EXP 42
51655: STR
51656: PUSH
51657: LD_STRING )
51659: STR
51660: PPUSH
51661: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51665: LD_STRING setGameDifficulty(
51667: PUSH
51668: LD_OWVAR 67
51672: STR
51673: PUSH
51674: LD_STRING )
51676: STR
51677: PPUSH
51678: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
51682: LD_STRING displayDifficulty(
51684: PUSH
51685: LD_OWVAR 67
51689: STR
51690: PUSH
51691: LD_STRING )
51693: STR
51694: PPUSH
51695: CALL_OW 559
// end ;
51699: LD_VAR 0 1
51703: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51704: LD_INT 0
51706: PPUSH
// if p2 = stream_mode then
51707: LD_VAR 0 2
51711: PUSH
51712: LD_INT 100
51714: EQUAL
51715: IFFALSE 52718
// begin if not StreamModeActive then
51717: LD_EXP 43
51721: NOT
51722: IFFALSE 51732
// StreamModeActive := true ;
51724: LD_ADDR_EXP 43
51728: PUSH
51729: LD_INT 1
51731: ST_TO_ADDR
// if p3 = 0 then
51732: LD_VAR 0 3
51736: PUSH
51737: LD_INT 0
51739: EQUAL
51740: IFFALSE 51746
// InitStreamMode ;
51742: CALL 52922 0 0
// if p3 = 1 then
51746: LD_VAR 0 3
51750: PUSH
51751: LD_INT 1
51753: EQUAL
51754: IFFALSE 51764
// sRocket := true ;
51756: LD_ADDR_EXP 48
51760: PUSH
51761: LD_INT 1
51763: ST_TO_ADDR
// if p3 = 2 then
51764: LD_VAR 0 3
51768: PUSH
51769: LD_INT 2
51771: EQUAL
51772: IFFALSE 51782
// sSpeed := true ;
51774: LD_ADDR_EXP 47
51778: PUSH
51779: LD_INT 1
51781: ST_TO_ADDR
// if p3 = 3 then
51782: LD_VAR 0 3
51786: PUSH
51787: LD_INT 3
51789: EQUAL
51790: IFFALSE 51800
// sEngine := true ;
51792: LD_ADDR_EXP 49
51796: PUSH
51797: LD_INT 1
51799: ST_TO_ADDR
// if p3 = 4 then
51800: LD_VAR 0 3
51804: PUSH
51805: LD_INT 4
51807: EQUAL
51808: IFFALSE 51818
// sSpec := true ;
51810: LD_ADDR_EXP 46
51814: PUSH
51815: LD_INT 1
51817: ST_TO_ADDR
// if p3 = 5 then
51818: LD_VAR 0 3
51822: PUSH
51823: LD_INT 5
51825: EQUAL
51826: IFFALSE 51836
// sLevel := true ;
51828: LD_ADDR_EXP 50
51832: PUSH
51833: LD_INT 1
51835: ST_TO_ADDR
// if p3 = 6 then
51836: LD_VAR 0 3
51840: PUSH
51841: LD_INT 6
51843: EQUAL
51844: IFFALSE 51854
// sArmoury := true ;
51846: LD_ADDR_EXP 51
51850: PUSH
51851: LD_INT 1
51853: ST_TO_ADDR
// if p3 = 7 then
51854: LD_VAR 0 3
51858: PUSH
51859: LD_INT 7
51861: EQUAL
51862: IFFALSE 51872
// sRadar := true ;
51864: LD_ADDR_EXP 52
51868: PUSH
51869: LD_INT 1
51871: ST_TO_ADDR
// if p3 = 8 then
51872: LD_VAR 0 3
51876: PUSH
51877: LD_INT 8
51879: EQUAL
51880: IFFALSE 51890
// sBunker := true ;
51882: LD_ADDR_EXP 53
51886: PUSH
51887: LD_INT 1
51889: ST_TO_ADDR
// if p3 = 9 then
51890: LD_VAR 0 3
51894: PUSH
51895: LD_INT 9
51897: EQUAL
51898: IFFALSE 51908
// sHack := true ;
51900: LD_ADDR_EXP 54
51904: PUSH
51905: LD_INT 1
51907: ST_TO_ADDR
// if p3 = 10 then
51908: LD_VAR 0 3
51912: PUSH
51913: LD_INT 10
51915: EQUAL
51916: IFFALSE 51926
// sFire := true ;
51918: LD_ADDR_EXP 55
51922: PUSH
51923: LD_INT 1
51925: ST_TO_ADDR
// if p3 = 11 then
51926: LD_VAR 0 3
51930: PUSH
51931: LD_INT 11
51933: EQUAL
51934: IFFALSE 51944
// sRefresh := true ;
51936: LD_ADDR_EXP 56
51940: PUSH
51941: LD_INT 1
51943: ST_TO_ADDR
// if p3 = 12 then
51944: LD_VAR 0 3
51948: PUSH
51949: LD_INT 12
51951: EQUAL
51952: IFFALSE 51962
// sExp := true ;
51954: LD_ADDR_EXP 57
51958: PUSH
51959: LD_INT 1
51961: ST_TO_ADDR
// if p3 = 13 then
51962: LD_VAR 0 3
51966: PUSH
51967: LD_INT 13
51969: EQUAL
51970: IFFALSE 51980
// sDepot := true ;
51972: LD_ADDR_EXP 58
51976: PUSH
51977: LD_INT 1
51979: ST_TO_ADDR
// if p3 = 14 then
51980: LD_VAR 0 3
51984: PUSH
51985: LD_INT 14
51987: EQUAL
51988: IFFALSE 51998
// sFlag := true ;
51990: LD_ADDR_EXP 59
51994: PUSH
51995: LD_INT 1
51997: ST_TO_ADDR
// if p3 = 15 then
51998: LD_VAR 0 3
52002: PUSH
52003: LD_INT 15
52005: EQUAL
52006: IFFALSE 52016
// sKamikadze := true ;
52008: LD_ADDR_EXP 67
52012: PUSH
52013: LD_INT 1
52015: ST_TO_ADDR
// if p3 = 16 then
52016: LD_VAR 0 3
52020: PUSH
52021: LD_INT 16
52023: EQUAL
52024: IFFALSE 52034
// sTroll := true ;
52026: LD_ADDR_EXP 68
52030: PUSH
52031: LD_INT 1
52033: ST_TO_ADDR
// if p3 = 17 then
52034: LD_VAR 0 3
52038: PUSH
52039: LD_INT 17
52041: EQUAL
52042: IFFALSE 52052
// sSlow := true ;
52044: LD_ADDR_EXP 69
52048: PUSH
52049: LD_INT 1
52051: ST_TO_ADDR
// if p3 = 18 then
52052: LD_VAR 0 3
52056: PUSH
52057: LD_INT 18
52059: EQUAL
52060: IFFALSE 52070
// sLack := true ;
52062: LD_ADDR_EXP 70
52066: PUSH
52067: LD_INT 1
52069: ST_TO_ADDR
// if p3 = 19 then
52070: LD_VAR 0 3
52074: PUSH
52075: LD_INT 19
52077: EQUAL
52078: IFFALSE 52088
// sTank := true ;
52080: LD_ADDR_EXP 72
52084: PUSH
52085: LD_INT 1
52087: ST_TO_ADDR
// if p3 = 20 then
52088: LD_VAR 0 3
52092: PUSH
52093: LD_INT 20
52095: EQUAL
52096: IFFALSE 52106
// sRemote := true ;
52098: LD_ADDR_EXP 73
52102: PUSH
52103: LD_INT 1
52105: ST_TO_ADDR
// if p3 = 21 then
52106: LD_VAR 0 3
52110: PUSH
52111: LD_INT 21
52113: EQUAL
52114: IFFALSE 52124
// sPowell := true ;
52116: LD_ADDR_EXP 74
52120: PUSH
52121: LD_INT 1
52123: ST_TO_ADDR
// if p3 = 22 then
52124: LD_VAR 0 3
52128: PUSH
52129: LD_INT 22
52131: EQUAL
52132: IFFALSE 52142
// sTeleport := true ;
52134: LD_ADDR_EXP 77
52138: PUSH
52139: LD_INT 1
52141: ST_TO_ADDR
// if p3 = 23 then
52142: LD_VAR 0 3
52146: PUSH
52147: LD_INT 23
52149: EQUAL
52150: IFFALSE 52160
// sOilTower := true ;
52152: LD_ADDR_EXP 79
52156: PUSH
52157: LD_INT 1
52159: ST_TO_ADDR
// if p3 = 24 then
52160: LD_VAR 0 3
52164: PUSH
52165: LD_INT 24
52167: EQUAL
52168: IFFALSE 52178
// sShovel := true ;
52170: LD_ADDR_EXP 80
52174: PUSH
52175: LD_INT 1
52177: ST_TO_ADDR
// if p3 = 25 then
52178: LD_VAR 0 3
52182: PUSH
52183: LD_INT 25
52185: EQUAL
52186: IFFALSE 52196
// sSheik := true ;
52188: LD_ADDR_EXP 81
52192: PUSH
52193: LD_INT 1
52195: ST_TO_ADDR
// if p3 = 26 then
52196: LD_VAR 0 3
52200: PUSH
52201: LD_INT 26
52203: EQUAL
52204: IFFALSE 52214
// sEarthquake := true ;
52206: LD_ADDR_EXP 83
52210: PUSH
52211: LD_INT 1
52213: ST_TO_ADDR
// if p3 = 27 then
52214: LD_VAR 0 3
52218: PUSH
52219: LD_INT 27
52221: EQUAL
52222: IFFALSE 52232
// sAI := true ;
52224: LD_ADDR_EXP 84
52228: PUSH
52229: LD_INT 1
52231: ST_TO_ADDR
// if p3 = 28 then
52232: LD_VAR 0 3
52236: PUSH
52237: LD_INT 28
52239: EQUAL
52240: IFFALSE 52250
// sCargo := true ;
52242: LD_ADDR_EXP 87
52246: PUSH
52247: LD_INT 1
52249: ST_TO_ADDR
// if p3 = 29 then
52250: LD_VAR 0 3
52254: PUSH
52255: LD_INT 29
52257: EQUAL
52258: IFFALSE 52268
// sDLaser := true ;
52260: LD_ADDR_EXP 88
52264: PUSH
52265: LD_INT 1
52267: ST_TO_ADDR
// if p3 = 30 then
52268: LD_VAR 0 3
52272: PUSH
52273: LD_INT 30
52275: EQUAL
52276: IFFALSE 52286
// sExchange := true ;
52278: LD_ADDR_EXP 89
52282: PUSH
52283: LD_INT 1
52285: ST_TO_ADDR
// if p3 = 31 then
52286: LD_VAR 0 3
52290: PUSH
52291: LD_INT 31
52293: EQUAL
52294: IFFALSE 52304
// sFac := true ;
52296: LD_ADDR_EXP 90
52300: PUSH
52301: LD_INT 1
52303: ST_TO_ADDR
// if p3 = 32 then
52304: LD_VAR 0 3
52308: PUSH
52309: LD_INT 32
52311: EQUAL
52312: IFFALSE 52322
// sPower := true ;
52314: LD_ADDR_EXP 91
52318: PUSH
52319: LD_INT 1
52321: ST_TO_ADDR
// if p3 = 33 then
52322: LD_VAR 0 3
52326: PUSH
52327: LD_INT 33
52329: EQUAL
52330: IFFALSE 52340
// sRandom := true ;
52332: LD_ADDR_EXP 92
52336: PUSH
52337: LD_INT 1
52339: ST_TO_ADDR
// if p3 = 34 then
52340: LD_VAR 0 3
52344: PUSH
52345: LD_INT 34
52347: EQUAL
52348: IFFALSE 52358
// sShield := true ;
52350: LD_ADDR_EXP 93
52354: PUSH
52355: LD_INT 1
52357: ST_TO_ADDR
// if p3 = 35 then
52358: LD_VAR 0 3
52362: PUSH
52363: LD_INT 35
52365: EQUAL
52366: IFFALSE 52376
// sTime := true ;
52368: LD_ADDR_EXP 94
52372: PUSH
52373: LD_INT 1
52375: ST_TO_ADDR
// if p3 = 36 then
52376: LD_VAR 0 3
52380: PUSH
52381: LD_INT 36
52383: EQUAL
52384: IFFALSE 52394
// sTools := true ;
52386: LD_ADDR_EXP 95
52390: PUSH
52391: LD_INT 1
52393: ST_TO_ADDR
// if p3 = 101 then
52394: LD_VAR 0 3
52398: PUSH
52399: LD_INT 101
52401: EQUAL
52402: IFFALSE 52412
// sSold := true ;
52404: LD_ADDR_EXP 60
52408: PUSH
52409: LD_INT 1
52411: ST_TO_ADDR
// if p3 = 102 then
52412: LD_VAR 0 3
52416: PUSH
52417: LD_INT 102
52419: EQUAL
52420: IFFALSE 52430
// sDiff := true ;
52422: LD_ADDR_EXP 61
52426: PUSH
52427: LD_INT 1
52429: ST_TO_ADDR
// if p3 = 103 then
52430: LD_VAR 0 3
52434: PUSH
52435: LD_INT 103
52437: EQUAL
52438: IFFALSE 52448
// sFog := true ;
52440: LD_ADDR_EXP 64
52444: PUSH
52445: LD_INT 1
52447: ST_TO_ADDR
// if p3 = 104 then
52448: LD_VAR 0 3
52452: PUSH
52453: LD_INT 104
52455: EQUAL
52456: IFFALSE 52466
// sReset := true ;
52458: LD_ADDR_EXP 65
52462: PUSH
52463: LD_INT 1
52465: ST_TO_ADDR
// if p3 = 105 then
52466: LD_VAR 0 3
52470: PUSH
52471: LD_INT 105
52473: EQUAL
52474: IFFALSE 52484
// sSun := true ;
52476: LD_ADDR_EXP 66
52480: PUSH
52481: LD_INT 1
52483: ST_TO_ADDR
// if p3 = 106 then
52484: LD_VAR 0 3
52488: PUSH
52489: LD_INT 106
52491: EQUAL
52492: IFFALSE 52502
// sTiger := true ;
52494: LD_ADDR_EXP 62
52498: PUSH
52499: LD_INT 1
52501: ST_TO_ADDR
// if p3 = 107 then
52502: LD_VAR 0 3
52506: PUSH
52507: LD_INT 107
52509: EQUAL
52510: IFFALSE 52520
// sBomb := true ;
52512: LD_ADDR_EXP 63
52516: PUSH
52517: LD_INT 1
52519: ST_TO_ADDR
// if p3 = 108 then
52520: LD_VAR 0 3
52524: PUSH
52525: LD_INT 108
52527: EQUAL
52528: IFFALSE 52538
// sWound := true ;
52530: LD_ADDR_EXP 71
52534: PUSH
52535: LD_INT 1
52537: ST_TO_ADDR
// if p3 = 109 then
52538: LD_VAR 0 3
52542: PUSH
52543: LD_INT 109
52545: EQUAL
52546: IFFALSE 52556
// sBetray := true ;
52548: LD_ADDR_EXP 75
52552: PUSH
52553: LD_INT 1
52555: ST_TO_ADDR
// if p3 = 110 then
52556: LD_VAR 0 3
52560: PUSH
52561: LD_INT 110
52563: EQUAL
52564: IFFALSE 52574
// sContamin := true ;
52566: LD_ADDR_EXP 76
52570: PUSH
52571: LD_INT 1
52573: ST_TO_ADDR
// if p3 = 111 then
52574: LD_VAR 0 3
52578: PUSH
52579: LD_INT 111
52581: EQUAL
52582: IFFALSE 52592
// sOil := true ;
52584: LD_ADDR_EXP 78
52588: PUSH
52589: LD_INT 1
52591: ST_TO_ADDR
// if p3 = 112 then
52592: LD_VAR 0 3
52596: PUSH
52597: LD_INT 112
52599: EQUAL
52600: IFFALSE 52610
// sStu := true ;
52602: LD_ADDR_EXP 82
52606: PUSH
52607: LD_INT 1
52609: ST_TO_ADDR
// if p3 = 113 then
52610: LD_VAR 0 3
52614: PUSH
52615: LD_INT 113
52617: EQUAL
52618: IFFALSE 52628
// sBazooka := true ;
52620: LD_ADDR_EXP 85
52624: PUSH
52625: LD_INT 1
52627: ST_TO_ADDR
// if p3 = 114 then
52628: LD_VAR 0 3
52632: PUSH
52633: LD_INT 114
52635: EQUAL
52636: IFFALSE 52646
// sMortar := true ;
52638: LD_ADDR_EXP 86
52642: PUSH
52643: LD_INT 1
52645: ST_TO_ADDR
// if p3 = 115 then
52646: LD_VAR 0 3
52650: PUSH
52651: LD_INT 115
52653: EQUAL
52654: IFFALSE 52664
// sRanger := true ;
52656: LD_ADDR_EXP 96
52660: PUSH
52661: LD_INT 1
52663: ST_TO_ADDR
// if p3 = 116 then
52664: LD_VAR 0 3
52668: PUSH
52669: LD_INT 116
52671: EQUAL
52672: IFFALSE 52682
// sComputer := true ;
52674: LD_ADDR_EXP 97
52678: PUSH
52679: LD_INT 1
52681: ST_TO_ADDR
// if p3 = 117 then
52682: LD_VAR 0 3
52686: PUSH
52687: LD_INT 117
52689: EQUAL
52690: IFFALSE 52700
// s30 := true ;
52692: LD_ADDR_EXP 98
52696: PUSH
52697: LD_INT 1
52699: ST_TO_ADDR
// if p3 = 118 then
52700: LD_VAR 0 3
52704: PUSH
52705: LD_INT 118
52707: EQUAL
52708: IFFALSE 52718
// s60 := true ;
52710: LD_ADDR_EXP 99
52714: PUSH
52715: LD_INT 1
52717: ST_TO_ADDR
// end ; if p2 = hack_mode then
52718: LD_VAR 0 2
52722: PUSH
52723: LD_INT 101
52725: EQUAL
52726: IFFALSE 52854
// begin case p3 of 1 :
52728: LD_VAR 0 3
52732: PUSH
52733: LD_INT 1
52735: DOUBLE
52736: EQUAL
52737: IFTRUE 52741
52739: GO 52748
52741: POP
// hHackUnlimitedResources ; 2 :
52742: CALL 65001 0 0
52746: GO 52854
52748: LD_INT 2
52750: DOUBLE
52751: EQUAL
52752: IFTRUE 52756
52754: GO 52763
52756: POP
// hHackSetLevel10 ; 3 :
52757: CALL 65134 0 0
52761: GO 52854
52763: LD_INT 3
52765: DOUBLE
52766: EQUAL
52767: IFTRUE 52771
52769: GO 52778
52771: POP
// hHackSetLevel10YourUnits ; 4 :
52772: CALL 65219 0 0
52776: GO 52854
52778: LD_INT 4
52780: DOUBLE
52781: EQUAL
52782: IFTRUE 52786
52784: GO 52793
52786: POP
// hHackInvincible ; 5 :
52787: CALL 65667 0 0
52791: GO 52854
52793: LD_INT 5
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52801
52799: GO 52808
52801: POP
// hHackInvisible ; 6 :
52802: CALL 65778 0 0
52806: GO 52854
52808: LD_INT 6
52810: DOUBLE
52811: EQUAL
52812: IFTRUE 52816
52814: GO 52823
52816: POP
// hHackChangeYourSide ; 7 :
52817: CALL 65835 0 0
52821: GO 52854
52823: LD_INT 7
52825: DOUBLE
52826: EQUAL
52827: IFTRUE 52831
52829: GO 52838
52831: POP
// hHackChangeUnitSide ; 8 :
52832: CALL 65877 0 0
52836: GO 52854
52838: LD_INT 8
52840: DOUBLE
52841: EQUAL
52842: IFTRUE 52846
52844: GO 52853
52846: POP
// hHackFog ; end ;
52847: CALL 65978 0 0
52851: GO 52854
52853: POP
// end ; if p2 = game_save_mode then
52854: LD_VAR 0 2
52858: PUSH
52859: LD_INT 102
52861: EQUAL
52862: IFFALSE 52917
// begin if p3 = 1 then
52864: LD_VAR 0 3
52868: PUSH
52869: LD_INT 1
52871: EQUAL
52872: IFFALSE 52884
// globalGameSaveCounter := p4 ;
52874: LD_ADDR_EXP 42
52878: PUSH
52879: LD_VAR 0 4
52883: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
52884: LD_VAR 0 3
52888: PUSH
52889: LD_INT 2
52891: EQUAL
52892: PUSH
52893: LD_EXP 42
52897: AND
52898: IFFALSE 52917
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52900: LD_STRING setGameSaveCounter(
52902: PUSH
52903: LD_EXP 42
52907: STR
52908: PUSH
52909: LD_STRING )
52911: STR
52912: PPUSH
52913: CALL_OW 559
// end ; end ;
52917: LD_VAR 0 7
52921: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
52922: LD_INT 0
52924: PPUSH
// streamModeActive := false ;
52925: LD_ADDR_EXP 43
52929: PUSH
52930: LD_INT 0
52932: ST_TO_ADDR
// normalCounter := 36 ;
52933: LD_ADDR_EXP 44
52937: PUSH
52938: LD_INT 36
52940: ST_TO_ADDR
// hardcoreCounter := 18 ;
52941: LD_ADDR_EXP 45
52945: PUSH
52946: LD_INT 18
52948: ST_TO_ADDR
// sRocket := false ;
52949: LD_ADDR_EXP 48
52953: PUSH
52954: LD_INT 0
52956: ST_TO_ADDR
// sSpeed := false ;
52957: LD_ADDR_EXP 47
52961: PUSH
52962: LD_INT 0
52964: ST_TO_ADDR
// sEngine := false ;
52965: LD_ADDR_EXP 49
52969: PUSH
52970: LD_INT 0
52972: ST_TO_ADDR
// sSpec := false ;
52973: LD_ADDR_EXP 46
52977: PUSH
52978: LD_INT 0
52980: ST_TO_ADDR
// sLevel := false ;
52981: LD_ADDR_EXP 50
52985: PUSH
52986: LD_INT 0
52988: ST_TO_ADDR
// sArmoury := false ;
52989: LD_ADDR_EXP 51
52993: PUSH
52994: LD_INT 0
52996: ST_TO_ADDR
// sRadar := false ;
52997: LD_ADDR_EXP 52
53001: PUSH
53002: LD_INT 0
53004: ST_TO_ADDR
// sBunker := false ;
53005: LD_ADDR_EXP 53
53009: PUSH
53010: LD_INT 0
53012: ST_TO_ADDR
// sHack := false ;
53013: LD_ADDR_EXP 54
53017: PUSH
53018: LD_INT 0
53020: ST_TO_ADDR
// sFire := false ;
53021: LD_ADDR_EXP 55
53025: PUSH
53026: LD_INT 0
53028: ST_TO_ADDR
// sRefresh := false ;
53029: LD_ADDR_EXP 56
53033: PUSH
53034: LD_INT 0
53036: ST_TO_ADDR
// sExp := false ;
53037: LD_ADDR_EXP 57
53041: PUSH
53042: LD_INT 0
53044: ST_TO_ADDR
// sDepot := false ;
53045: LD_ADDR_EXP 58
53049: PUSH
53050: LD_INT 0
53052: ST_TO_ADDR
// sFlag := false ;
53053: LD_ADDR_EXP 59
53057: PUSH
53058: LD_INT 0
53060: ST_TO_ADDR
// sKamikadze := false ;
53061: LD_ADDR_EXP 67
53065: PUSH
53066: LD_INT 0
53068: ST_TO_ADDR
// sTroll := false ;
53069: LD_ADDR_EXP 68
53073: PUSH
53074: LD_INT 0
53076: ST_TO_ADDR
// sSlow := false ;
53077: LD_ADDR_EXP 69
53081: PUSH
53082: LD_INT 0
53084: ST_TO_ADDR
// sLack := false ;
53085: LD_ADDR_EXP 70
53089: PUSH
53090: LD_INT 0
53092: ST_TO_ADDR
// sTank := false ;
53093: LD_ADDR_EXP 72
53097: PUSH
53098: LD_INT 0
53100: ST_TO_ADDR
// sRemote := false ;
53101: LD_ADDR_EXP 73
53105: PUSH
53106: LD_INT 0
53108: ST_TO_ADDR
// sPowell := false ;
53109: LD_ADDR_EXP 74
53113: PUSH
53114: LD_INT 0
53116: ST_TO_ADDR
// sTeleport := false ;
53117: LD_ADDR_EXP 77
53121: PUSH
53122: LD_INT 0
53124: ST_TO_ADDR
// sOilTower := false ;
53125: LD_ADDR_EXP 79
53129: PUSH
53130: LD_INT 0
53132: ST_TO_ADDR
// sShovel := false ;
53133: LD_ADDR_EXP 80
53137: PUSH
53138: LD_INT 0
53140: ST_TO_ADDR
// sSheik := false ;
53141: LD_ADDR_EXP 81
53145: PUSH
53146: LD_INT 0
53148: ST_TO_ADDR
// sEarthquake := false ;
53149: LD_ADDR_EXP 83
53153: PUSH
53154: LD_INT 0
53156: ST_TO_ADDR
// sAI := false ;
53157: LD_ADDR_EXP 84
53161: PUSH
53162: LD_INT 0
53164: ST_TO_ADDR
// sCargo := false ;
53165: LD_ADDR_EXP 87
53169: PUSH
53170: LD_INT 0
53172: ST_TO_ADDR
// sDLaser := false ;
53173: LD_ADDR_EXP 88
53177: PUSH
53178: LD_INT 0
53180: ST_TO_ADDR
// sExchange := false ;
53181: LD_ADDR_EXP 89
53185: PUSH
53186: LD_INT 0
53188: ST_TO_ADDR
// sFac := false ;
53189: LD_ADDR_EXP 90
53193: PUSH
53194: LD_INT 0
53196: ST_TO_ADDR
// sPower := false ;
53197: LD_ADDR_EXP 91
53201: PUSH
53202: LD_INT 0
53204: ST_TO_ADDR
// sRandom := false ;
53205: LD_ADDR_EXP 92
53209: PUSH
53210: LD_INT 0
53212: ST_TO_ADDR
// sShield := false ;
53213: LD_ADDR_EXP 93
53217: PUSH
53218: LD_INT 0
53220: ST_TO_ADDR
// sTime := false ;
53221: LD_ADDR_EXP 94
53225: PUSH
53226: LD_INT 0
53228: ST_TO_ADDR
// sTools := false ;
53229: LD_ADDR_EXP 95
53233: PUSH
53234: LD_INT 0
53236: ST_TO_ADDR
// sSold := false ;
53237: LD_ADDR_EXP 60
53241: PUSH
53242: LD_INT 0
53244: ST_TO_ADDR
// sDiff := false ;
53245: LD_ADDR_EXP 61
53249: PUSH
53250: LD_INT 0
53252: ST_TO_ADDR
// sFog := false ;
53253: LD_ADDR_EXP 64
53257: PUSH
53258: LD_INT 0
53260: ST_TO_ADDR
// sReset := false ;
53261: LD_ADDR_EXP 65
53265: PUSH
53266: LD_INT 0
53268: ST_TO_ADDR
// sSun := false ;
53269: LD_ADDR_EXP 66
53273: PUSH
53274: LD_INT 0
53276: ST_TO_ADDR
// sTiger := false ;
53277: LD_ADDR_EXP 62
53281: PUSH
53282: LD_INT 0
53284: ST_TO_ADDR
// sBomb := false ;
53285: LD_ADDR_EXP 63
53289: PUSH
53290: LD_INT 0
53292: ST_TO_ADDR
// sWound := false ;
53293: LD_ADDR_EXP 71
53297: PUSH
53298: LD_INT 0
53300: ST_TO_ADDR
// sBetray := false ;
53301: LD_ADDR_EXP 75
53305: PUSH
53306: LD_INT 0
53308: ST_TO_ADDR
// sContamin := false ;
53309: LD_ADDR_EXP 76
53313: PUSH
53314: LD_INT 0
53316: ST_TO_ADDR
// sOil := false ;
53317: LD_ADDR_EXP 78
53321: PUSH
53322: LD_INT 0
53324: ST_TO_ADDR
// sStu := false ;
53325: LD_ADDR_EXP 82
53329: PUSH
53330: LD_INT 0
53332: ST_TO_ADDR
// sBazooka := false ;
53333: LD_ADDR_EXP 85
53337: PUSH
53338: LD_INT 0
53340: ST_TO_ADDR
// sMortar := false ;
53341: LD_ADDR_EXP 86
53345: PUSH
53346: LD_INT 0
53348: ST_TO_ADDR
// sRanger := false ;
53349: LD_ADDR_EXP 96
53353: PUSH
53354: LD_INT 0
53356: ST_TO_ADDR
// sComputer := false ;
53357: LD_ADDR_EXP 97
53361: PUSH
53362: LD_INT 0
53364: ST_TO_ADDR
// s30 := false ;
53365: LD_ADDR_EXP 98
53369: PUSH
53370: LD_INT 0
53372: ST_TO_ADDR
// s60 := false ;
53373: LD_ADDR_EXP 99
53377: PUSH
53378: LD_INT 0
53380: ST_TO_ADDR
// end ;
53381: LD_VAR 0 1
53385: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53386: LD_INT 0
53388: PPUSH
53389: PPUSH
53390: PPUSH
53391: PPUSH
53392: PPUSH
53393: PPUSH
53394: PPUSH
// result := [ ] ;
53395: LD_ADDR_VAR 0 2
53399: PUSH
53400: EMPTY
53401: ST_TO_ADDR
// if campaign_id = 1 then
53402: LD_OWVAR 69
53406: PUSH
53407: LD_INT 1
53409: EQUAL
53410: IFFALSE 56576
// begin case mission_number of 1 :
53412: LD_OWVAR 70
53416: PUSH
53417: LD_INT 1
53419: DOUBLE
53420: EQUAL
53421: IFTRUE 53425
53423: GO 53501
53425: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53426: LD_ADDR_VAR 0 2
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: LD_INT 4
53436: PUSH
53437: LD_INT 11
53439: PUSH
53440: LD_INT 12
53442: PUSH
53443: LD_INT 15
53445: PUSH
53446: LD_INT 16
53448: PUSH
53449: LD_INT 22
53451: PUSH
53452: LD_INT 23
53454: PUSH
53455: LD_INT 26
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 101
53471: PUSH
53472: LD_INT 102
53474: PUSH
53475: LD_INT 106
53477: PUSH
53478: LD_INT 116
53480: PUSH
53481: LD_INT 117
53483: PUSH
53484: LD_INT 118
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: ST_TO_ADDR
53499: GO 56574
53501: LD_INT 2
53503: DOUBLE
53504: EQUAL
53505: IFTRUE 53509
53507: GO 53593
53509: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53510: LD_ADDR_VAR 0 2
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 4
53520: PUSH
53521: LD_INT 11
53523: PUSH
53524: LD_INT 12
53526: PUSH
53527: LD_INT 15
53529: PUSH
53530: LD_INT 16
53532: PUSH
53533: LD_INT 22
53535: PUSH
53536: LD_INT 23
53538: PUSH
53539: LD_INT 26
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 101
53555: PUSH
53556: LD_INT 102
53558: PUSH
53559: LD_INT 105
53561: PUSH
53562: LD_INT 106
53564: PUSH
53565: LD_INT 108
53567: PUSH
53568: LD_INT 116
53570: PUSH
53571: LD_INT 117
53573: PUSH
53574: LD_INT 118
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: ST_TO_ADDR
53591: GO 56574
53593: LD_INT 3
53595: DOUBLE
53596: EQUAL
53597: IFTRUE 53601
53599: GO 53689
53601: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53602: LD_ADDR_VAR 0 2
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 4
53612: PUSH
53613: LD_INT 5
53615: PUSH
53616: LD_INT 11
53618: PUSH
53619: LD_INT 12
53621: PUSH
53622: LD_INT 15
53624: PUSH
53625: LD_INT 16
53627: PUSH
53628: LD_INT 22
53630: PUSH
53631: LD_INT 26
53633: PUSH
53634: LD_INT 36
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 101
53651: PUSH
53652: LD_INT 102
53654: PUSH
53655: LD_INT 105
53657: PUSH
53658: LD_INT 106
53660: PUSH
53661: LD_INT 108
53663: PUSH
53664: LD_INT 116
53666: PUSH
53667: LD_INT 117
53669: PUSH
53670: LD_INT 118
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: ST_TO_ADDR
53687: GO 56574
53689: LD_INT 4
53691: DOUBLE
53692: EQUAL
53693: IFTRUE 53697
53695: GO 53793
53697: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53698: LD_ADDR_VAR 0 2
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 4
53708: PUSH
53709: LD_INT 5
53711: PUSH
53712: LD_INT 8
53714: PUSH
53715: LD_INT 11
53717: PUSH
53718: LD_INT 12
53720: PUSH
53721: LD_INT 15
53723: PUSH
53724: LD_INT 16
53726: PUSH
53727: LD_INT 22
53729: PUSH
53730: LD_INT 23
53732: PUSH
53733: LD_INT 26
53735: PUSH
53736: LD_INT 36
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 101
53755: PUSH
53756: LD_INT 102
53758: PUSH
53759: LD_INT 105
53761: PUSH
53762: LD_INT 106
53764: PUSH
53765: LD_INT 108
53767: PUSH
53768: LD_INT 116
53770: PUSH
53771: LD_INT 117
53773: PUSH
53774: LD_INT 118
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: ST_TO_ADDR
53791: GO 56574
53793: LD_INT 5
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53801
53799: GO 53913
53801: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53802: LD_ADDR_VAR 0 2
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 4
53812: PUSH
53813: LD_INT 5
53815: PUSH
53816: LD_INT 6
53818: PUSH
53819: LD_INT 8
53821: PUSH
53822: LD_INT 11
53824: PUSH
53825: LD_INT 12
53827: PUSH
53828: LD_INT 15
53830: PUSH
53831: LD_INT 16
53833: PUSH
53834: LD_INT 22
53836: PUSH
53837: LD_INT 23
53839: PUSH
53840: LD_INT 25
53842: PUSH
53843: LD_INT 26
53845: PUSH
53846: LD_INT 36
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 101
53867: PUSH
53868: LD_INT 102
53870: PUSH
53871: LD_INT 105
53873: PUSH
53874: LD_INT 106
53876: PUSH
53877: LD_INT 108
53879: PUSH
53880: LD_INT 109
53882: PUSH
53883: LD_INT 112
53885: PUSH
53886: LD_INT 116
53888: PUSH
53889: LD_INT 117
53891: PUSH
53892: LD_INT 118
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: ST_TO_ADDR
53911: GO 56574
53913: LD_INT 6
53915: DOUBLE
53916: EQUAL
53917: IFTRUE 53921
53919: GO 54053
53921: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53922: LD_ADDR_VAR 0 2
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 4
53932: PUSH
53933: LD_INT 5
53935: PUSH
53936: LD_INT 6
53938: PUSH
53939: LD_INT 8
53941: PUSH
53942: LD_INT 11
53944: PUSH
53945: LD_INT 12
53947: PUSH
53948: LD_INT 15
53950: PUSH
53951: LD_INT 16
53953: PUSH
53954: LD_INT 20
53956: PUSH
53957: LD_INT 21
53959: PUSH
53960: LD_INT 22
53962: PUSH
53963: LD_INT 23
53965: PUSH
53966: LD_INT 25
53968: PUSH
53969: LD_INT 26
53971: PUSH
53972: LD_INT 30
53974: PUSH
53975: LD_INT 31
53977: PUSH
53978: LD_INT 32
53980: PUSH
53981: LD_INT 36
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 101
54007: PUSH
54008: LD_INT 102
54010: PUSH
54011: LD_INT 105
54013: PUSH
54014: LD_INT 106
54016: PUSH
54017: LD_INT 108
54019: PUSH
54020: LD_INT 109
54022: PUSH
54023: LD_INT 112
54025: PUSH
54026: LD_INT 116
54028: PUSH
54029: LD_INT 117
54031: PUSH
54032: LD_INT 118
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: ST_TO_ADDR
54051: GO 56574
54053: LD_INT 7
54055: DOUBLE
54056: EQUAL
54057: IFTRUE 54061
54059: GO 54173
54061: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54062: LD_ADDR_VAR 0 2
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: LD_INT 4
54072: PUSH
54073: LD_INT 5
54075: PUSH
54076: LD_INT 7
54078: PUSH
54079: LD_INT 11
54081: PUSH
54082: LD_INT 12
54084: PUSH
54085: LD_INT 15
54087: PUSH
54088: LD_INT 16
54090: PUSH
54091: LD_INT 20
54093: PUSH
54094: LD_INT 21
54096: PUSH
54097: LD_INT 22
54099: PUSH
54100: LD_INT 23
54102: PUSH
54103: LD_INT 25
54105: PUSH
54106: LD_INT 26
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 101
54127: PUSH
54128: LD_INT 102
54130: PUSH
54131: LD_INT 103
54133: PUSH
54134: LD_INT 105
54136: PUSH
54137: LD_INT 106
54139: PUSH
54140: LD_INT 108
54142: PUSH
54143: LD_INT 112
54145: PUSH
54146: LD_INT 116
54148: PUSH
54149: LD_INT 117
54151: PUSH
54152: LD_INT 118
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: ST_TO_ADDR
54171: GO 56574
54173: LD_INT 8
54175: DOUBLE
54176: EQUAL
54177: IFTRUE 54181
54179: GO 54321
54181: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54182: LD_ADDR_VAR 0 2
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 4
54192: PUSH
54193: LD_INT 5
54195: PUSH
54196: LD_INT 6
54198: PUSH
54199: LD_INT 7
54201: PUSH
54202: LD_INT 8
54204: PUSH
54205: LD_INT 11
54207: PUSH
54208: LD_INT 12
54210: PUSH
54211: LD_INT 15
54213: PUSH
54214: LD_INT 16
54216: PUSH
54217: LD_INT 20
54219: PUSH
54220: LD_INT 21
54222: PUSH
54223: LD_INT 22
54225: PUSH
54226: LD_INT 23
54228: PUSH
54229: LD_INT 25
54231: PUSH
54232: LD_INT 26
54234: PUSH
54235: LD_INT 30
54237: PUSH
54238: LD_INT 31
54240: PUSH
54241: LD_INT 32
54243: PUSH
54244: LD_INT 36
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 101
54271: PUSH
54272: LD_INT 102
54274: PUSH
54275: LD_INT 103
54277: PUSH
54278: LD_INT 105
54280: PUSH
54281: LD_INT 106
54283: PUSH
54284: LD_INT 108
54286: PUSH
54287: LD_INT 109
54289: PUSH
54290: LD_INT 112
54292: PUSH
54293: LD_INT 116
54295: PUSH
54296: LD_INT 117
54298: PUSH
54299: LD_INT 118
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: ST_TO_ADDR
54319: GO 56574
54321: LD_INT 9
54323: DOUBLE
54324: EQUAL
54325: IFTRUE 54329
54327: GO 54477
54329: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54330: LD_ADDR_VAR 0 2
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 4
54340: PUSH
54341: LD_INT 5
54343: PUSH
54344: LD_INT 6
54346: PUSH
54347: LD_INT 7
54349: PUSH
54350: LD_INT 8
54352: PUSH
54353: LD_INT 11
54355: PUSH
54356: LD_INT 12
54358: PUSH
54359: LD_INT 15
54361: PUSH
54362: LD_INT 16
54364: PUSH
54365: LD_INT 20
54367: PUSH
54368: LD_INT 21
54370: PUSH
54371: LD_INT 22
54373: PUSH
54374: LD_INT 23
54376: PUSH
54377: LD_INT 25
54379: PUSH
54380: LD_INT 26
54382: PUSH
54383: LD_INT 28
54385: PUSH
54386: LD_INT 30
54388: PUSH
54389: LD_INT 31
54391: PUSH
54392: LD_INT 32
54394: PUSH
54395: LD_INT 36
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 101
54423: PUSH
54424: LD_INT 102
54426: PUSH
54427: LD_INT 103
54429: PUSH
54430: LD_INT 105
54432: PUSH
54433: LD_INT 106
54435: PUSH
54436: LD_INT 108
54438: PUSH
54439: LD_INT 109
54441: PUSH
54442: LD_INT 112
54444: PUSH
54445: LD_INT 114
54447: PUSH
54448: LD_INT 116
54450: PUSH
54451: LD_INT 117
54453: PUSH
54454: LD_INT 118
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: ST_TO_ADDR
54475: GO 56574
54477: LD_INT 10
54479: DOUBLE
54480: EQUAL
54481: IFTRUE 54485
54483: GO 54681
54485: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54486: LD_ADDR_VAR 0 2
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: LD_INT 4
54496: PUSH
54497: LD_INT 5
54499: PUSH
54500: LD_INT 6
54502: PUSH
54503: LD_INT 7
54505: PUSH
54506: LD_INT 8
54508: PUSH
54509: LD_INT 9
54511: PUSH
54512: LD_INT 10
54514: PUSH
54515: LD_INT 11
54517: PUSH
54518: LD_INT 12
54520: PUSH
54521: LD_INT 13
54523: PUSH
54524: LD_INT 14
54526: PUSH
54527: LD_INT 15
54529: PUSH
54530: LD_INT 16
54532: PUSH
54533: LD_INT 17
54535: PUSH
54536: LD_INT 18
54538: PUSH
54539: LD_INT 19
54541: PUSH
54542: LD_INT 20
54544: PUSH
54545: LD_INT 21
54547: PUSH
54548: LD_INT 22
54550: PUSH
54551: LD_INT 23
54553: PUSH
54554: LD_INT 24
54556: PUSH
54557: LD_INT 25
54559: PUSH
54560: LD_INT 26
54562: PUSH
54563: LD_INT 28
54565: PUSH
54566: LD_INT 30
54568: PUSH
54569: LD_INT 31
54571: PUSH
54572: LD_INT 32
54574: PUSH
54575: LD_INT 36
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 101
54611: PUSH
54612: LD_INT 102
54614: PUSH
54615: LD_INT 103
54617: PUSH
54618: LD_INT 104
54620: PUSH
54621: LD_INT 105
54623: PUSH
54624: LD_INT 106
54626: PUSH
54627: LD_INT 107
54629: PUSH
54630: LD_INT 108
54632: PUSH
54633: LD_INT 109
54635: PUSH
54636: LD_INT 110
54638: PUSH
54639: LD_INT 111
54641: PUSH
54642: LD_INT 112
54644: PUSH
54645: LD_INT 114
54647: PUSH
54648: LD_INT 116
54650: PUSH
54651: LD_INT 117
54653: PUSH
54654: LD_INT 118
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: ST_TO_ADDR
54679: GO 56574
54681: LD_INT 11
54683: DOUBLE
54684: EQUAL
54685: IFTRUE 54689
54687: GO 54893
54689: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54690: LD_ADDR_VAR 0 2
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 3
54700: PUSH
54701: LD_INT 4
54703: PUSH
54704: LD_INT 5
54706: PUSH
54707: LD_INT 6
54709: PUSH
54710: LD_INT 7
54712: PUSH
54713: LD_INT 8
54715: PUSH
54716: LD_INT 9
54718: PUSH
54719: LD_INT 10
54721: PUSH
54722: LD_INT 11
54724: PUSH
54725: LD_INT 12
54727: PUSH
54728: LD_INT 13
54730: PUSH
54731: LD_INT 14
54733: PUSH
54734: LD_INT 15
54736: PUSH
54737: LD_INT 16
54739: PUSH
54740: LD_INT 17
54742: PUSH
54743: LD_INT 18
54745: PUSH
54746: LD_INT 19
54748: PUSH
54749: LD_INT 20
54751: PUSH
54752: LD_INT 21
54754: PUSH
54755: LD_INT 22
54757: PUSH
54758: LD_INT 23
54760: PUSH
54761: LD_INT 24
54763: PUSH
54764: LD_INT 25
54766: PUSH
54767: LD_INT 26
54769: PUSH
54770: LD_INT 28
54772: PUSH
54773: LD_INT 30
54775: PUSH
54776: LD_INT 31
54778: PUSH
54779: LD_INT 32
54781: PUSH
54782: LD_INT 34
54784: PUSH
54785: LD_INT 36
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 101
54823: PUSH
54824: LD_INT 102
54826: PUSH
54827: LD_INT 103
54829: PUSH
54830: LD_INT 104
54832: PUSH
54833: LD_INT 105
54835: PUSH
54836: LD_INT 106
54838: PUSH
54839: LD_INT 107
54841: PUSH
54842: LD_INT 108
54844: PUSH
54845: LD_INT 109
54847: PUSH
54848: LD_INT 110
54850: PUSH
54851: LD_INT 111
54853: PUSH
54854: LD_INT 112
54856: PUSH
54857: LD_INT 114
54859: PUSH
54860: LD_INT 116
54862: PUSH
54863: LD_INT 117
54865: PUSH
54866: LD_INT 118
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: ST_TO_ADDR
54891: GO 56574
54893: LD_INT 12
54895: DOUBLE
54896: EQUAL
54897: IFTRUE 54901
54899: GO 55121
54901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54902: LD_ADDR_VAR 0 2
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: LD_INT 5
54921: PUSH
54922: LD_INT 6
54924: PUSH
54925: LD_INT 7
54927: PUSH
54928: LD_INT 8
54930: PUSH
54931: LD_INT 9
54933: PUSH
54934: LD_INT 10
54936: PUSH
54937: LD_INT 11
54939: PUSH
54940: LD_INT 12
54942: PUSH
54943: LD_INT 13
54945: PUSH
54946: LD_INT 14
54948: PUSH
54949: LD_INT 15
54951: PUSH
54952: LD_INT 16
54954: PUSH
54955: LD_INT 17
54957: PUSH
54958: LD_INT 18
54960: PUSH
54961: LD_INT 19
54963: PUSH
54964: LD_INT 20
54966: PUSH
54967: LD_INT 21
54969: PUSH
54970: LD_INT 22
54972: PUSH
54973: LD_INT 23
54975: PUSH
54976: LD_INT 24
54978: PUSH
54979: LD_INT 25
54981: PUSH
54982: LD_INT 26
54984: PUSH
54985: LD_INT 27
54987: PUSH
54988: LD_INT 28
54990: PUSH
54991: LD_INT 30
54993: PUSH
54994: LD_INT 31
54996: PUSH
54997: LD_INT 32
54999: PUSH
55000: LD_INT 33
55002: PUSH
55003: LD_INT 34
55005: PUSH
55006: LD_INT 36
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 101
55047: PUSH
55048: LD_INT 102
55050: PUSH
55051: LD_INT 103
55053: PUSH
55054: LD_INT 104
55056: PUSH
55057: LD_INT 105
55059: PUSH
55060: LD_INT 106
55062: PUSH
55063: LD_INT 107
55065: PUSH
55066: LD_INT 108
55068: PUSH
55069: LD_INT 109
55071: PUSH
55072: LD_INT 110
55074: PUSH
55075: LD_INT 111
55077: PUSH
55078: LD_INT 112
55080: PUSH
55081: LD_INT 113
55083: PUSH
55084: LD_INT 114
55086: PUSH
55087: LD_INT 116
55089: PUSH
55090: LD_INT 117
55092: PUSH
55093: LD_INT 118
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: ST_TO_ADDR
55119: GO 56574
55121: LD_INT 13
55123: DOUBLE
55124: EQUAL
55125: IFTRUE 55129
55127: GO 55337
55129: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55130: LD_ADDR_VAR 0 2
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: LD_INT 4
55146: PUSH
55147: LD_INT 5
55149: PUSH
55150: LD_INT 8
55152: PUSH
55153: LD_INT 9
55155: PUSH
55156: LD_INT 10
55158: PUSH
55159: LD_INT 11
55161: PUSH
55162: LD_INT 12
55164: PUSH
55165: LD_INT 14
55167: PUSH
55168: LD_INT 15
55170: PUSH
55171: LD_INT 16
55173: PUSH
55174: LD_INT 17
55176: PUSH
55177: LD_INT 18
55179: PUSH
55180: LD_INT 19
55182: PUSH
55183: LD_INT 20
55185: PUSH
55186: LD_INT 21
55188: PUSH
55189: LD_INT 22
55191: PUSH
55192: LD_INT 23
55194: PUSH
55195: LD_INT 24
55197: PUSH
55198: LD_INT 25
55200: PUSH
55201: LD_INT 26
55203: PUSH
55204: LD_INT 27
55206: PUSH
55207: LD_INT 28
55209: PUSH
55210: LD_INT 30
55212: PUSH
55213: LD_INT 31
55215: PUSH
55216: LD_INT 32
55218: PUSH
55219: LD_INT 33
55221: PUSH
55222: LD_INT 34
55224: PUSH
55225: LD_INT 36
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 101
55263: PUSH
55264: LD_INT 102
55266: PUSH
55267: LD_INT 103
55269: PUSH
55270: LD_INT 104
55272: PUSH
55273: LD_INT 105
55275: PUSH
55276: LD_INT 106
55278: PUSH
55279: LD_INT 107
55281: PUSH
55282: LD_INT 108
55284: PUSH
55285: LD_INT 109
55287: PUSH
55288: LD_INT 110
55290: PUSH
55291: LD_INT 111
55293: PUSH
55294: LD_INT 112
55296: PUSH
55297: LD_INT 113
55299: PUSH
55300: LD_INT 114
55302: PUSH
55303: LD_INT 116
55305: PUSH
55306: LD_INT 117
55308: PUSH
55309: LD_INT 118
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: ST_TO_ADDR
55335: GO 56574
55337: LD_INT 14
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55345
55343: GO 55569
55345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 4
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: LD_INT 6
55368: PUSH
55369: LD_INT 7
55371: PUSH
55372: LD_INT 8
55374: PUSH
55375: LD_INT 9
55377: PUSH
55378: LD_INT 10
55380: PUSH
55381: LD_INT 11
55383: PUSH
55384: LD_INT 12
55386: PUSH
55387: LD_INT 13
55389: PUSH
55390: LD_INT 14
55392: PUSH
55393: LD_INT 15
55395: PUSH
55396: LD_INT 16
55398: PUSH
55399: LD_INT 17
55401: PUSH
55402: LD_INT 18
55404: PUSH
55405: LD_INT 19
55407: PUSH
55408: LD_INT 20
55410: PUSH
55411: LD_INT 21
55413: PUSH
55414: LD_INT 22
55416: PUSH
55417: LD_INT 23
55419: PUSH
55420: LD_INT 24
55422: PUSH
55423: LD_INT 25
55425: PUSH
55426: LD_INT 26
55428: PUSH
55429: LD_INT 27
55431: PUSH
55432: LD_INT 28
55434: PUSH
55435: LD_INT 29
55437: PUSH
55438: LD_INT 30
55440: PUSH
55441: LD_INT 31
55443: PUSH
55444: LD_INT 32
55446: PUSH
55447: LD_INT 33
55449: PUSH
55450: LD_INT 34
55452: PUSH
55453: LD_INT 36
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 101
55495: PUSH
55496: LD_INT 102
55498: PUSH
55499: LD_INT 103
55501: PUSH
55502: LD_INT 104
55504: PUSH
55505: LD_INT 105
55507: PUSH
55508: LD_INT 106
55510: PUSH
55511: LD_INT 107
55513: PUSH
55514: LD_INT 108
55516: PUSH
55517: LD_INT 109
55519: PUSH
55520: LD_INT 110
55522: PUSH
55523: LD_INT 111
55525: PUSH
55526: LD_INT 112
55528: PUSH
55529: LD_INT 113
55531: PUSH
55532: LD_INT 114
55534: PUSH
55535: LD_INT 116
55537: PUSH
55538: LD_INT 117
55540: PUSH
55541: LD_INT 118
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: ST_TO_ADDR
55567: GO 56574
55569: LD_INT 15
55571: DOUBLE
55572: EQUAL
55573: IFTRUE 55577
55575: GO 55801
55577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55578: LD_ADDR_VAR 0 2
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 4
55594: PUSH
55595: LD_INT 5
55597: PUSH
55598: LD_INT 6
55600: PUSH
55601: LD_INT 7
55603: PUSH
55604: LD_INT 8
55606: PUSH
55607: LD_INT 9
55609: PUSH
55610: LD_INT 10
55612: PUSH
55613: LD_INT 11
55615: PUSH
55616: LD_INT 12
55618: PUSH
55619: LD_INT 13
55621: PUSH
55622: LD_INT 14
55624: PUSH
55625: LD_INT 15
55627: PUSH
55628: LD_INT 16
55630: PUSH
55631: LD_INT 17
55633: PUSH
55634: LD_INT 18
55636: PUSH
55637: LD_INT 19
55639: PUSH
55640: LD_INT 20
55642: PUSH
55643: LD_INT 21
55645: PUSH
55646: LD_INT 22
55648: PUSH
55649: LD_INT 23
55651: PUSH
55652: LD_INT 24
55654: PUSH
55655: LD_INT 25
55657: PUSH
55658: LD_INT 26
55660: PUSH
55661: LD_INT 27
55663: PUSH
55664: LD_INT 28
55666: PUSH
55667: LD_INT 29
55669: PUSH
55670: LD_INT 30
55672: PUSH
55673: LD_INT 31
55675: PUSH
55676: LD_INT 32
55678: PUSH
55679: LD_INT 33
55681: PUSH
55682: LD_INT 34
55684: PUSH
55685: LD_INT 36
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 101
55727: PUSH
55728: LD_INT 102
55730: PUSH
55731: LD_INT 103
55733: PUSH
55734: LD_INT 104
55736: PUSH
55737: LD_INT 105
55739: PUSH
55740: LD_INT 106
55742: PUSH
55743: LD_INT 107
55745: PUSH
55746: LD_INT 108
55748: PUSH
55749: LD_INT 109
55751: PUSH
55752: LD_INT 110
55754: PUSH
55755: LD_INT 111
55757: PUSH
55758: LD_INT 112
55760: PUSH
55761: LD_INT 113
55763: PUSH
55764: LD_INT 114
55766: PUSH
55767: LD_INT 116
55769: PUSH
55770: LD_INT 117
55772: PUSH
55773: LD_INT 118
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: ST_TO_ADDR
55799: GO 56574
55801: LD_INT 16
55803: DOUBLE
55804: EQUAL
55805: IFTRUE 55809
55807: GO 55945
55809: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55810: LD_ADDR_VAR 0 2
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: LD_INT 4
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: LD_INT 7
55826: PUSH
55827: LD_INT 11
55829: PUSH
55830: LD_INT 12
55832: PUSH
55833: LD_INT 15
55835: PUSH
55836: LD_INT 16
55838: PUSH
55839: LD_INT 20
55841: PUSH
55842: LD_INT 21
55844: PUSH
55845: LD_INT 22
55847: PUSH
55848: LD_INT 23
55850: PUSH
55851: LD_INT 25
55853: PUSH
55854: LD_INT 26
55856: PUSH
55857: LD_INT 30
55859: PUSH
55860: LD_INT 31
55862: PUSH
55863: LD_INT 32
55865: PUSH
55866: LD_INT 33
55868: PUSH
55869: LD_INT 34
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 101
55895: PUSH
55896: LD_INT 102
55898: PUSH
55899: LD_INT 103
55901: PUSH
55902: LD_INT 106
55904: PUSH
55905: LD_INT 108
55907: PUSH
55908: LD_INT 112
55910: PUSH
55911: LD_INT 113
55913: PUSH
55914: LD_INT 114
55916: PUSH
55917: LD_INT 116
55919: PUSH
55920: LD_INT 117
55922: PUSH
55923: LD_INT 118
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: ST_TO_ADDR
55943: GO 56574
55945: LD_INT 17
55947: DOUBLE
55948: EQUAL
55949: IFTRUE 55953
55951: GO 56177
55953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55954: LD_ADDR_VAR 0 2
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: LD_INT 4
55970: PUSH
55971: LD_INT 5
55973: PUSH
55974: LD_INT 6
55976: PUSH
55977: LD_INT 7
55979: PUSH
55980: LD_INT 8
55982: PUSH
55983: LD_INT 9
55985: PUSH
55986: LD_INT 10
55988: PUSH
55989: LD_INT 11
55991: PUSH
55992: LD_INT 12
55994: PUSH
55995: LD_INT 13
55997: PUSH
55998: LD_INT 14
56000: PUSH
56001: LD_INT 15
56003: PUSH
56004: LD_INT 16
56006: PUSH
56007: LD_INT 17
56009: PUSH
56010: LD_INT 18
56012: PUSH
56013: LD_INT 19
56015: PUSH
56016: LD_INT 20
56018: PUSH
56019: LD_INT 21
56021: PUSH
56022: LD_INT 22
56024: PUSH
56025: LD_INT 23
56027: PUSH
56028: LD_INT 24
56030: PUSH
56031: LD_INT 25
56033: PUSH
56034: LD_INT 26
56036: PUSH
56037: LD_INT 27
56039: PUSH
56040: LD_INT 28
56042: PUSH
56043: LD_INT 29
56045: PUSH
56046: LD_INT 30
56048: PUSH
56049: LD_INT 31
56051: PUSH
56052: LD_INT 32
56054: PUSH
56055: LD_INT 33
56057: PUSH
56058: LD_INT 34
56060: PUSH
56061: LD_INT 36
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 101
56103: PUSH
56104: LD_INT 102
56106: PUSH
56107: LD_INT 103
56109: PUSH
56110: LD_INT 104
56112: PUSH
56113: LD_INT 105
56115: PUSH
56116: LD_INT 106
56118: PUSH
56119: LD_INT 107
56121: PUSH
56122: LD_INT 108
56124: PUSH
56125: LD_INT 109
56127: PUSH
56128: LD_INT 110
56130: PUSH
56131: LD_INT 111
56133: PUSH
56134: LD_INT 112
56136: PUSH
56137: LD_INT 113
56139: PUSH
56140: LD_INT 114
56142: PUSH
56143: LD_INT 116
56145: PUSH
56146: LD_INT 117
56148: PUSH
56149: LD_INT 118
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: ST_TO_ADDR
56175: GO 56574
56177: LD_INT 18
56179: DOUBLE
56180: EQUAL
56181: IFTRUE 56185
56183: GO 56333
56185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56186: LD_ADDR_VAR 0 2
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 4
56196: PUSH
56197: LD_INT 5
56199: PUSH
56200: LD_INT 7
56202: PUSH
56203: LD_INT 11
56205: PUSH
56206: LD_INT 12
56208: PUSH
56209: LD_INT 15
56211: PUSH
56212: LD_INT 16
56214: PUSH
56215: LD_INT 20
56217: PUSH
56218: LD_INT 21
56220: PUSH
56221: LD_INT 22
56223: PUSH
56224: LD_INT 23
56226: PUSH
56227: LD_INT 25
56229: PUSH
56230: LD_INT 26
56232: PUSH
56233: LD_INT 30
56235: PUSH
56236: LD_INT 31
56238: PUSH
56239: LD_INT 32
56241: PUSH
56242: LD_INT 33
56244: PUSH
56245: LD_INT 34
56247: PUSH
56248: LD_INT 35
56250: PUSH
56251: LD_INT 36
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 101
56279: PUSH
56280: LD_INT 102
56282: PUSH
56283: LD_INT 103
56285: PUSH
56286: LD_INT 106
56288: PUSH
56289: LD_INT 108
56291: PUSH
56292: LD_INT 112
56294: PUSH
56295: LD_INT 113
56297: PUSH
56298: LD_INT 114
56300: PUSH
56301: LD_INT 115
56303: PUSH
56304: LD_INT 116
56306: PUSH
56307: LD_INT 117
56309: PUSH
56310: LD_INT 118
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: ST_TO_ADDR
56331: GO 56574
56333: LD_INT 19
56335: DOUBLE
56336: EQUAL
56337: IFTRUE 56341
56339: GO 56573
56341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56342: LD_ADDR_VAR 0 2
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: LD_INT 4
56358: PUSH
56359: LD_INT 5
56361: PUSH
56362: LD_INT 6
56364: PUSH
56365: LD_INT 7
56367: PUSH
56368: LD_INT 8
56370: PUSH
56371: LD_INT 9
56373: PUSH
56374: LD_INT 10
56376: PUSH
56377: LD_INT 11
56379: PUSH
56380: LD_INT 12
56382: PUSH
56383: LD_INT 13
56385: PUSH
56386: LD_INT 14
56388: PUSH
56389: LD_INT 15
56391: PUSH
56392: LD_INT 16
56394: PUSH
56395: LD_INT 17
56397: PUSH
56398: LD_INT 18
56400: PUSH
56401: LD_INT 19
56403: PUSH
56404: LD_INT 20
56406: PUSH
56407: LD_INT 21
56409: PUSH
56410: LD_INT 22
56412: PUSH
56413: LD_INT 23
56415: PUSH
56416: LD_INT 24
56418: PUSH
56419: LD_INT 25
56421: PUSH
56422: LD_INT 26
56424: PUSH
56425: LD_INT 27
56427: PUSH
56428: LD_INT 28
56430: PUSH
56431: LD_INT 29
56433: PUSH
56434: LD_INT 30
56436: PUSH
56437: LD_INT 31
56439: PUSH
56440: LD_INT 32
56442: PUSH
56443: LD_INT 33
56445: PUSH
56446: LD_INT 34
56448: PUSH
56449: LD_INT 35
56451: PUSH
56452: LD_INT 36
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 101
56495: PUSH
56496: LD_INT 102
56498: PUSH
56499: LD_INT 103
56501: PUSH
56502: LD_INT 104
56504: PUSH
56505: LD_INT 105
56507: PUSH
56508: LD_INT 106
56510: PUSH
56511: LD_INT 107
56513: PUSH
56514: LD_INT 108
56516: PUSH
56517: LD_INT 109
56519: PUSH
56520: LD_INT 110
56522: PUSH
56523: LD_INT 111
56525: PUSH
56526: LD_INT 112
56528: PUSH
56529: LD_INT 113
56531: PUSH
56532: LD_INT 114
56534: PUSH
56535: LD_INT 115
56537: PUSH
56538: LD_INT 116
56540: PUSH
56541: LD_INT 117
56543: PUSH
56544: LD_INT 118
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: ST_TO_ADDR
56571: GO 56574
56573: POP
// end else
56574: GO 56805
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56576: LD_ADDR_VAR 0 2
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 3
56589: PUSH
56590: LD_INT 4
56592: PUSH
56593: LD_INT 5
56595: PUSH
56596: LD_INT 6
56598: PUSH
56599: LD_INT 7
56601: PUSH
56602: LD_INT 8
56604: PUSH
56605: LD_INT 9
56607: PUSH
56608: LD_INT 10
56610: PUSH
56611: LD_INT 11
56613: PUSH
56614: LD_INT 12
56616: PUSH
56617: LD_INT 13
56619: PUSH
56620: LD_INT 14
56622: PUSH
56623: LD_INT 15
56625: PUSH
56626: LD_INT 16
56628: PUSH
56629: LD_INT 17
56631: PUSH
56632: LD_INT 18
56634: PUSH
56635: LD_INT 19
56637: PUSH
56638: LD_INT 20
56640: PUSH
56641: LD_INT 21
56643: PUSH
56644: LD_INT 22
56646: PUSH
56647: LD_INT 23
56649: PUSH
56650: LD_INT 24
56652: PUSH
56653: LD_INT 25
56655: PUSH
56656: LD_INT 26
56658: PUSH
56659: LD_INT 27
56661: PUSH
56662: LD_INT 28
56664: PUSH
56665: LD_INT 29
56667: PUSH
56668: LD_INT 30
56670: PUSH
56671: LD_INT 31
56673: PUSH
56674: LD_INT 32
56676: PUSH
56677: LD_INT 33
56679: PUSH
56680: LD_INT 34
56682: PUSH
56683: LD_INT 35
56685: PUSH
56686: LD_INT 36
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 101
56729: PUSH
56730: LD_INT 102
56732: PUSH
56733: LD_INT 103
56735: PUSH
56736: LD_INT 104
56738: PUSH
56739: LD_INT 105
56741: PUSH
56742: LD_INT 106
56744: PUSH
56745: LD_INT 107
56747: PUSH
56748: LD_INT 108
56750: PUSH
56751: LD_INT 109
56753: PUSH
56754: LD_INT 110
56756: PUSH
56757: LD_INT 111
56759: PUSH
56760: LD_INT 112
56762: PUSH
56763: LD_INT 113
56765: PUSH
56766: LD_INT 114
56768: PUSH
56769: LD_INT 115
56771: PUSH
56772: LD_INT 116
56774: PUSH
56775: LD_INT 117
56777: PUSH
56778: LD_INT 118
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: ST_TO_ADDR
// if result then
56805: LD_VAR 0 2
56809: IFFALSE 57595
// begin normal :=  ;
56811: LD_ADDR_VAR 0 5
56815: PUSH
56816: LD_STRING 
56818: ST_TO_ADDR
// hardcore :=  ;
56819: LD_ADDR_VAR 0 6
56823: PUSH
56824: LD_STRING 
56826: ST_TO_ADDR
// active :=  ;
56827: LD_ADDR_VAR 0 7
56831: PUSH
56832: LD_STRING 
56834: ST_TO_ADDR
// for i = 1 to normalCounter do
56835: LD_ADDR_VAR 0 8
56839: PUSH
56840: DOUBLE
56841: LD_INT 1
56843: DEC
56844: ST_TO_ADDR
56845: LD_EXP 44
56849: PUSH
56850: FOR_TO
56851: IFFALSE 56952
// begin tmp := 0 ;
56853: LD_ADDR_VAR 0 3
56857: PUSH
56858: LD_STRING 0
56860: ST_TO_ADDR
// if result [ 1 ] then
56861: LD_VAR 0 2
56865: PUSH
56866: LD_INT 1
56868: ARRAY
56869: IFFALSE 56934
// if result [ 1 ] [ 1 ] = i then
56871: LD_VAR 0 2
56875: PUSH
56876: LD_INT 1
56878: ARRAY
56879: PUSH
56880: LD_INT 1
56882: ARRAY
56883: PUSH
56884: LD_VAR 0 8
56888: EQUAL
56889: IFFALSE 56934
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56891: LD_ADDR_VAR 0 2
56895: PUSH
56896: LD_VAR 0 2
56900: PPUSH
56901: LD_INT 1
56903: PPUSH
56904: LD_VAR 0 2
56908: PUSH
56909: LD_INT 1
56911: ARRAY
56912: PPUSH
56913: LD_INT 1
56915: PPUSH
56916: CALL_OW 3
56920: PPUSH
56921: CALL_OW 1
56925: ST_TO_ADDR
// tmp := 1 ;
56926: LD_ADDR_VAR 0 3
56930: PUSH
56931: LD_STRING 1
56933: ST_TO_ADDR
// end ; normal := normal & tmp ;
56934: LD_ADDR_VAR 0 5
56938: PUSH
56939: LD_VAR 0 5
56943: PUSH
56944: LD_VAR 0 3
56948: STR
56949: ST_TO_ADDR
// end ;
56950: GO 56850
56952: POP
56953: POP
// for i = 1 to hardcoreCounter do
56954: LD_ADDR_VAR 0 8
56958: PUSH
56959: DOUBLE
56960: LD_INT 1
56962: DEC
56963: ST_TO_ADDR
56964: LD_EXP 45
56968: PUSH
56969: FOR_TO
56970: IFFALSE 57075
// begin tmp := 0 ;
56972: LD_ADDR_VAR 0 3
56976: PUSH
56977: LD_STRING 0
56979: ST_TO_ADDR
// if result [ 2 ] then
56980: LD_VAR 0 2
56984: PUSH
56985: LD_INT 2
56987: ARRAY
56988: IFFALSE 57057
// if result [ 2 ] [ 1 ] = 100 + i then
56990: LD_VAR 0 2
56994: PUSH
56995: LD_INT 2
56997: ARRAY
56998: PUSH
56999: LD_INT 1
57001: ARRAY
57002: PUSH
57003: LD_INT 100
57005: PUSH
57006: LD_VAR 0 8
57010: PLUS
57011: EQUAL
57012: IFFALSE 57057
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57014: LD_ADDR_VAR 0 2
57018: PUSH
57019: LD_VAR 0 2
57023: PPUSH
57024: LD_INT 2
57026: PPUSH
57027: LD_VAR 0 2
57031: PUSH
57032: LD_INT 2
57034: ARRAY
57035: PPUSH
57036: LD_INT 1
57038: PPUSH
57039: CALL_OW 3
57043: PPUSH
57044: CALL_OW 1
57048: ST_TO_ADDR
// tmp := 1 ;
57049: LD_ADDR_VAR 0 3
57053: PUSH
57054: LD_STRING 1
57056: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57057: LD_ADDR_VAR 0 6
57061: PUSH
57062: LD_VAR 0 6
57066: PUSH
57067: LD_VAR 0 3
57071: STR
57072: ST_TO_ADDR
// end ;
57073: GO 56969
57075: POP
57076: POP
// if isGameLoad then
57077: LD_VAR 0 1
57081: IFFALSE 57556
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57083: LD_ADDR_VAR 0 4
57087: PUSH
57088: LD_EXP 48
57092: PUSH
57093: LD_EXP 47
57097: PUSH
57098: LD_EXP 49
57102: PUSH
57103: LD_EXP 46
57107: PUSH
57108: LD_EXP 50
57112: PUSH
57113: LD_EXP 51
57117: PUSH
57118: LD_EXP 52
57122: PUSH
57123: LD_EXP 53
57127: PUSH
57128: LD_EXP 54
57132: PUSH
57133: LD_EXP 55
57137: PUSH
57138: LD_EXP 56
57142: PUSH
57143: LD_EXP 57
57147: PUSH
57148: LD_EXP 58
57152: PUSH
57153: LD_EXP 59
57157: PUSH
57158: LD_EXP 67
57162: PUSH
57163: LD_EXP 68
57167: PUSH
57168: LD_EXP 69
57172: PUSH
57173: LD_EXP 70
57177: PUSH
57178: LD_EXP 72
57182: PUSH
57183: LD_EXP 73
57187: PUSH
57188: LD_EXP 74
57192: PUSH
57193: LD_EXP 77
57197: PUSH
57198: LD_EXP 79
57202: PUSH
57203: LD_EXP 80
57207: PUSH
57208: LD_EXP 81
57212: PUSH
57213: LD_EXP 83
57217: PUSH
57218: LD_EXP 84
57222: PUSH
57223: LD_EXP 87
57227: PUSH
57228: LD_EXP 88
57232: PUSH
57233: LD_EXP 89
57237: PUSH
57238: LD_EXP 90
57242: PUSH
57243: LD_EXP 91
57247: PUSH
57248: LD_EXP 92
57252: PUSH
57253: LD_EXP 93
57257: PUSH
57258: LD_EXP 94
57262: PUSH
57263: LD_EXP 95
57267: PUSH
57268: LD_EXP 60
57272: PUSH
57273: LD_EXP 61
57277: PUSH
57278: LD_EXP 64
57282: PUSH
57283: LD_EXP 65
57287: PUSH
57288: LD_EXP 66
57292: PUSH
57293: LD_EXP 62
57297: PUSH
57298: LD_EXP 63
57302: PUSH
57303: LD_EXP 71
57307: PUSH
57308: LD_EXP 75
57312: PUSH
57313: LD_EXP 76
57317: PUSH
57318: LD_EXP 78
57322: PUSH
57323: LD_EXP 82
57327: PUSH
57328: LD_EXP 85
57332: PUSH
57333: LD_EXP 86
57337: PUSH
57338: LD_EXP 96
57342: PUSH
57343: LD_EXP 97
57347: PUSH
57348: LD_EXP 98
57352: PUSH
57353: LD_EXP 99
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// tmp :=  ;
57414: LD_ADDR_VAR 0 3
57418: PUSH
57419: LD_STRING 
57421: ST_TO_ADDR
// for i = 1 to normalCounter do
57422: LD_ADDR_VAR 0 8
57426: PUSH
57427: DOUBLE
57428: LD_INT 1
57430: DEC
57431: ST_TO_ADDR
57432: LD_EXP 44
57436: PUSH
57437: FOR_TO
57438: IFFALSE 57474
// begin if flags [ i ] then
57440: LD_VAR 0 4
57444: PUSH
57445: LD_VAR 0 8
57449: ARRAY
57450: IFFALSE 57472
// tmp := tmp & i & ; ;
57452: LD_ADDR_VAR 0 3
57456: PUSH
57457: LD_VAR 0 3
57461: PUSH
57462: LD_VAR 0 8
57466: STR
57467: PUSH
57468: LD_STRING ;
57470: STR
57471: ST_TO_ADDR
// end ;
57472: GO 57437
57474: POP
57475: POP
// for i = 1 to hardcoreCounter do
57476: LD_ADDR_VAR 0 8
57480: PUSH
57481: DOUBLE
57482: LD_INT 1
57484: DEC
57485: ST_TO_ADDR
57486: LD_EXP 45
57490: PUSH
57491: FOR_TO
57492: IFFALSE 57538
// begin if flags [ normalCounter + i ] then
57494: LD_VAR 0 4
57498: PUSH
57499: LD_EXP 44
57503: PUSH
57504: LD_VAR 0 8
57508: PLUS
57509: ARRAY
57510: IFFALSE 57536
// tmp := tmp & ( 100 + i ) & ; ;
57512: LD_ADDR_VAR 0 3
57516: PUSH
57517: LD_VAR 0 3
57521: PUSH
57522: LD_INT 100
57524: PUSH
57525: LD_VAR 0 8
57529: PLUS
57530: STR
57531: PUSH
57532: LD_STRING ;
57534: STR
57535: ST_TO_ADDR
// end ;
57536: GO 57491
57538: POP
57539: POP
// if tmp then
57540: LD_VAR 0 3
57544: IFFALSE 57556
// active := tmp ;
57546: LD_ADDR_VAR 0 7
57550: PUSH
57551: LD_VAR 0 3
57555: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57556: LD_STRING getStreamItemsFromMission("
57558: PUSH
57559: LD_VAR 0 5
57563: STR
57564: PUSH
57565: LD_STRING ","
57567: STR
57568: PUSH
57569: LD_VAR 0 6
57573: STR
57574: PUSH
57575: LD_STRING ","
57577: STR
57578: PUSH
57579: LD_VAR 0 7
57583: STR
57584: PUSH
57585: LD_STRING ")
57587: STR
57588: PPUSH
57589: CALL_OW 559
// end else
57593: GO 57602
// ToLua ( getStreamItemsFromMission("","","") ) ;
57595: LD_STRING getStreamItemsFromMission("","","")
57597: PPUSH
57598: CALL_OW 559
// end ;
57602: LD_VAR 0 2
57606: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57607: LD_EXP 43
57611: PUSH
57612: LD_EXP 48
57616: AND
57617: IFFALSE 57741
57619: GO 57621
57621: DISABLE
57622: LD_INT 0
57624: PPUSH
57625: PPUSH
// begin enable ;
57626: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57627: LD_ADDR_VAR 0 2
57631: PUSH
57632: LD_INT 22
57634: PUSH
57635: LD_OWVAR 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: LD_INT 34
57649: PUSH
57650: LD_INT 7
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 34
57659: PUSH
57660: LD_INT 45
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 34
57669: PUSH
57670: LD_INT 28
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 34
57679: PUSH
57680: LD_INT 47
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PPUSH
57698: CALL_OW 69
57702: ST_TO_ADDR
// if not tmp then
57703: LD_VAR 0 2
57707: NOT
57708: IFFALSE 57712
// exit ;
57710: GO 57741
// for i in tmp do
57712: LD_ADDR_VAR 0 1
57716: PUSH
57717: LD_VAR 0 2
57721: PUSH
57722: FOR_IN
57723: IFFALSE 57739
// begin SetLives ( i , 0 ) ;
57725: LD_VAR 0 1
57729: PPUSH
57730: LD_INT 0
57732: PPUSH
57733: CALL_OW 234
// end ;
57737: GO 57722
57739: POP
57740: POP
// end ;
57741: PPOPN 2
57743: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57744: LD_EXP 43
57748: PUSH
57749: LD_EXP 49
57753: AND
57754: IFFALSE 57838
57756: GO 57758
57758: DISABLE
57759: LD_INT 0
57761: PPUSH
57762: PPUSH
// begin enable ;
57763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57764: LD_ADDR_VAR 0 2
57768: PUSH
57769: LD_INT 22
57771: PUSH
57772: LD_OWVAR 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 32
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PPUSH
57795: CALL_OW 69
57799: ST_TO_ADDR
// if not tmp then
57800: LD_VAR 0 2
57804: NOT
57805: IFFALSE 57809
// exit ;
57807: GO 57838
// for i in tmp do
57809: LD_ADDR_VAR 0 1
57813: PUSH
57814: LD_VAR 0 2
57818: PUSH
57819: FOR_IN
57820: IFFALSE 57836
// begin SetLives ( i , 0 ) ;
57822: LD_VAR 0 1
57826: PPUSH
57827: LD_INT 0
57829: PPUSH
57830: CALL_OW 234
// end ;
57834: GO 57819
57836: POP
57837: POP
// end ;
57838: PPOPN 2
57840: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57841: LD_EXP 43
57845: PUSH
57846: LD_EXP 46
57850: AND
57851: IFFALSE 57944
57853: GO 57855
57855: DISABLE
57856: LD_INT 0
57858: PPUSH
// begin enable ;
57859: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57860: LD_ADDR_VAR 0 1
57864: PUSH
57865: LD_INT 22
57867: PUSH
57868: LD_OWVAR 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: LD_INT 25
57882: PUSH
57883: LD_INT 5
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 25
57892: PUSH
57893: LD_INT 9
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 25
57902: PUSH
57903: LD_INT 8
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PPUSH
57920: CALL_OW 69
57924: PUSH
57925: FOR_IN
57926: IFFALSE 57942
// begin SetClass ( i , 1 ) ;
57928: LD_VAR 0 1
57932: PPUSH
57933: LD_INT 1
57935: PPUSH
57936: CALL_OW 336
// end ;
57940: GO 57925
57942: POP
57943: POP
// end ;
57944: PPOPN 1
57946: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57947: LD_EXP 43
57951: PUSH
57952: LD_EXP 47
57956: AND
57957: PUSH
57958: LD_OWVAR 65
57962: PUSH
57963: LD_INT 7
57965: LESS
57966: AND
57967: IFFALSE 57981
57969: GO 57971
57971: DISABLE
// begin enable ;
57972: ENABLE
// game_speed := 7 ;
57973: LD_ADDR_OWVAR 65
57977: PUSH
57978: LD_INT 7
57980: ST_TO_ADDR
// end ;
57981: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57982: LD_EXP 43
57986: PUSH
57987: LD_EXP 50
57991: AND
57992: IFFALSE 58194
57994: GO 57996
57996: DISABLE
57997: LD_INT 0
57999: PPUSH
58000: PPUSH
58001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58002: LD_ADDR_VAR 0 3
58006: PUSH
58007: LD_INT 81
58009: PUSH
58010: LD_OWVAR 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 21
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PPUSH
58033: CALL_OW 69
58037: ST_TO_ADDR
// if not tmp then
58038: LD_VAR 0 3
58042: NOT
58043: IFFALSE 58047
// exit ;
58045: GO 58194
// if tmp > 5 then
58047: LD_VAR 0 3
58051: PUSH
58052: LD_INT 5
58054: GREATER
58055: IFFALSE 58067
// k := 5 else
58057: LD_ADDR_VAR 0 2
58061: PUSH
58062: LD_INT 5
58064: ST_TO_ADDR
58065: GO 58077
// k := tmp ;
58067: LD_ADDR_VAR 0 2
58071: PUSH
58072: LD_VAR 0 3
58076: ST_TO_ADDR
// for i := 1 to k do
58077: LD_ADDR_VAR 0 1
58081: PUSH
58082: DOUBLE
58083: LD_INT 1
58085: DEC
58086: ST_TO_ADDR
58087: LD_VAR 0 2
58091: PUSH
58092: FOR_TO
58093: IFFALSE 58192
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58095: LD_VAR 0 3
58099: PUSH
58100: LD_VAR 0 1
58104: ARRAY
58105: PPUSH
58106: LD_VAR 0 1
58110: PUSH
58111: LD_INT 4
58113: MOD
58114: PUSH
58115: LD_INT 1
58117: PLUS
58118: PPUSH
58119: CALL_OW 259
58123: PUSH
58124: LD_INT 10
58126: LESS
58127: IFFALSE 58190
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58129: LD_VAR 0 3
58133: PUSH
58134: LD_VAR 0 1
58138: ARRAY
58139: PPUSH
58140: LD_VAR 0 1
58144: PUSH
58145: LD_INT 4
58147: MOD
58148: PUSH
58149: LD_INT 1
58151: PLUS
58152: PPUSH
58153: LD_VAR 0 3
58157: PUSH
58158: LD_VAR 0 1
58162: ARRAY
58163: PPUSH
58164: LD_VAR 0 1
58168: PUSH
58169: LD_INT 4
58171: MOD
58172: PUSH
58173: LD_INT 1
58175: PLUS
58176: PPUSH
58177: CALL_OW 259
58181: PUSH
58182: LD_INT 1
58184: PLUS
58185: PPUSH
58186: CALL_OW 237
58190: GO 58092
58192: POP
58193: POP
// end ;
58194: PPOPN 3
58196: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58197: LD_EXP 43
58201: PUSH
58202: LD_EXP 51
58206: AND
58207: IFFALSE 58227
58209: GO 58211
58211: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58212: LD_INT 4
58214: PPUSH
58215: LD_OWVAR 2
58219: PPUSH
58220: LD_INT 0
58222: PPUSH
58223: CALL_OW 324
58227: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58228: LD_EXP 43
58232: PUSH
58233: LD_EXP 80
58237: AND
58238: IFFALSE 58258
58240: GO 58242
58242: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58243: LD_INT 19
58245: PPUSH
58246: LD_OWVAR 2
58250: PPUSH
58251: LD_INT 0
58253: PPUSH
58254: CALL_OW 324
58258: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58259: LD_EXP 43
58263: PUSH
58264: LD_EXP 52
58268: AND
58269: IFFALSE 58371
58271: GO 58273
58273: DISABLE
58274: LD_INT 0
58276: PPUSH
58277: PPUSH
// begin enable ;
58278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58279: LD_ADDR_VAR 0 2
58283: PUSH
58284: LD_INT 22
58286: PUSH
58287: LD_OWVAR 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 34
58301: PUSH
58302: LD_INT 11
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 34
58311: PUSH
58312: LD_INT 30
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PPUSH
58328: CALL_OW 69
58332: ST_TO_ADDR
// if not tmp then
58333: LD_VAR 0 2
58337: NOT
58338: IFFALSE 58342
// exit ;
58340: GO 58371
// for i in tmp do
58342: LD_ADDR_VAR 0 1
58346: PUSH
58347: LD_VAR 0 2
58351: PUSH
58352: FOR_IN
58353: IFFALSE 58369
// begin SetLives ( i , 0 ) ;
58355: LD_VAR 0 1
58359: PPUSH
58360: LD_INT 0
58362: PPUSH
58363: CALL_OW 234
// end ;
58367: GO 58352
58369: POP
58370: POP
// end ;
58371: PPOPN 2
58373: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58374: LD_EXP 43
58378: PUSH
58379: LD_EXP 53
58383: AND
58384: IFFALSE 58404
58386: GO 58388
58388: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58389: LD_INT 32
58391: PPUSH
58392: LD_OWVAR 2
58396: PPUSH
58397: LD_INT 0
58399: PPUSH
58400: CALL_OW 324
58404: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58405: LD_EXP 43
58409: PUSH
58410: LD_EXP 54
58414: AND
58415: IFFALSE 58596
58417: GO 58419
58419: DISABLE
58420: LD_INT 0
58422: PPUSH
58423: PPUSH
58424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58425: LD_ADDR_VAR 0 2
58429: PUSH
58430: LD_INT 22
58432: PUSH
58433: LD_OWVAR 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 33
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PPUSH
58456: CALL_OW 69
58460: ST_TO_ADDR
// if not tmp then
58461: LD_VAR 0 2
58465: NOT
58466: IFFALSE 58470
// exit ;
58468: GO 58596
// side := 0 ;
58470: LD_ADDR_VAR 0 3
58474: PUSH
58475: LD_INT 0
58477: ST_TO_ADDR
// for i := 1 to 8 do
58478: LD_ADDR_VAR 0 1
58482: PUSH
58483: DOUBLE
58484: LD_INT 1
58486: DEC
58487: ST_TO_ADDR
58488: LD_INT 8
58490: PUSH
58491: FOR_TO
58492: IFFALSE 58540
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58494: LD_OWVAR 2
58498: PUSH
58499: LD_VAR 0 1
58503: NONEQUAL
58504: PUSH
58505: LD_OWVAR 2
58509: PPUSH
58510: LD_VAR 0 1
58514: PPUSH
58515: CALL_OW 81
58519: PUSH
58520: LD_INT 2
58522: EQUAL
58523: AND
58524: IFFALSE 58538
// begin side := i ;
58526: LD_ADDR_VAR 0 3
58530: PUSH
58531: LD_VAR 0 1
58535: ST_TO_ADDR
// break ;
58536: GO 58540
// end ;
58538: GO 58491
58540: POP
58541: POP
// if not side then
58542: LD_VAR 0 3
58546: NOT
58547: IFFALSE 58551
// exit ;
58549: GO 58596
// for i := 1 to tmp do
58551: LD_ADDR_VAR 0 1
58555: PUSH
58556: DOUBLE
58557: LD_INT 1
58559: DEC
58560: ST_TO_ADDR
58561: LD_VAR 0 2
58565: PUSH
58566: FOR_TO
58567: IFFALSE 58594
// if Prob ( 60 ) then
58569: LD_INT 60
58571: PPUSH
58572: CALL_OW 13
58576: IFFALSE 58592
// SetSide ( i , side ) ;
58578: LD_VAR 0 1
58582: PPUSH
58583: LD_VAR 0 3
58587: PPUSH
58588: CALL_OW 235
58592: GO 58566
58594: POP
58595: POP
// end ;
58596: PPOPN 3
58598: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58599: LD_EXP 43
58603: PUSH
58604: LD_EXP 56
58608: AND
58609: IFFALSE 58728
58611: GO 58613
58613: DISABLE
58614: LD_INT 0
58616: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58617: LD_ADDR_VAR 0 1
58621: PUSH
58622: LD_INT 22
58624: PUSH
58625: LD_OWVAR 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 21
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: LD_INT 23
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: PPUSH
58666: CALL_OW 69
58670: PUSH
58671: FOR_IN
58672: IFFALSE 58726
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 257
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: LD_INT 4
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: IN
58702: IFFALSE 58724
// SetClass ( un , rand ( 1 , 4 ) ) ;
58704: LD_VAR 0 1
58708: PPUSH
58709: LD_INT 1
58711: PPUSH
58712: LD_INT 4
58714: PPUSH
58715: CALL_OW 12
58719: PPUSH
58720: CALL_OW 336
58724: GO 58671
58726: POP
58727: POP
// end ;
58728: PPOPN 1
58730: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58731: LD_EXP 43
58735: PUSH
58736: LD_EXP 55
58740: AND
58741: IFFALSE 58820
58743: GO 58745
58745: DISABLE
58746: LD_INT 0
58748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58749: LD_ADDR_VAR 0 1
58753: PUSH
58754: LD_INT 22
58756: PUSH
58757: LD_OWVAR 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 21
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PPUSH
58780: CALL_OW 69
58784: ST_TO_ADDR
// if not tmp then
58785: LD_VAR 0 1
58789: NOT
58790: IFFALSE 58794
// exit ;
58792: GO 58820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58794: LD_VAR 0 1
58798: PUSH
58799: LD_INT 1
58801: PPUSH
58802: LD_VAR 0 1
58806: PPUSH
58807: CALL_OW 12
58811: ARRAY
58812: PPUSH
58813: LD_INT 100
58815: PPUSH
58816: CALL_OW 234
// end ;
58820: PPOPN 1
58822: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58823: LD_EXP 43
58827: PUSH
58828: LD_EXP 57
58832: AND
58833: IFFALSE 58931
58835: GO 58837
58837: DISABLE
58838: LD_INT 0
58840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58841: LD_ADDR_VAR 0 1
58845: PUSH
58846: LD_INT 22
58848: PUSH
58849: LD_OWVAR 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 21
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PPUSH
58872: CALL_OW 69
58876: ST_TO_ADDR
// if not tmp then
58877: LD_VAR 0 1
58881: NOT
58882: IFFALSE 58886
// exit ;
58884: GO 58931
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58886: LD_VAR 0 1
58890: PUSH
58891: LD_INT 1
58893: PPUSH
58894: LD_VAR 0 1
58898: PPUSH
58899: CALL_OW 12
58903: ARRAY
58904: PPUSH
58905: LD_INT 1
58907: PPUSH
58908: LD_INT 4
58910: PPUSH
58911: CALL_OW 12
58915: PPUSH
58916: LD_INT 3000
58918: PPUSH
58919: LD_INT 9000
58921: PPUSH
58922: CALL_OW 12
58926: PPUSH
58927: CALL_OW 492
// end ;
58931: PPOPN 1
58933: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58934: LD_EXP 43
58938: PUSH
58939: LD_EXP 58
58943: AND
58944: IFFALSE 58964
58946: GO 58948
58948: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58949: LD_INT 1
58951: PPUSH
58952: LD_OWVAR 2
58956: PPUSH
58957: LD_INT 0
58959: PPUSH
58960: CALL_OW 324
58964: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58965: LD_EXP 43
58969: PUSH
58970: LD_EXP 59
58974: AND
58975: IFFALSE 59058
58977: GO 58979
58979: DISABLE
58980: LD_INT 0
58982: PPUSH
58983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58984: LD_ADDR_VAR 0 2
58988: PUSH
58989: LD_INT 22
58991: PUSH
58992: LD_OWVAR 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 21
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PPUSH
59015: CALL_OW 69
59019: ST_TO_ADDR
// if not tmp then
59020: LD_VAR 0 2
59024: NOT
59025: IFFALSE 59029
// exit ;
59027: GO 59058
// for i in tmp do
59029: LD_ADDR_VAR 0 1
59033: PUSH
59034: LD_VAR 0 2
59038: PUSH
59039: FOR_IN
59040: IFFALSE 59056
// SetBLevel ( i , 10 ) ;
59042: LD_VAR 0 1
59046: PPUSH
59047: LD_INT 10
59049: PPUSH
59050: CALL_OW 241
59054: GO 59039
59056: POP
59057: POP
// end ;
59058: PPOPN 2
59060: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59061: LD_EXP 43
59065: PUSH
59066: LD_EXP 60
59070: AND
59071: IFFALSE 59182
59073: GO 59075
59075: DISABLE
59076: LD_INT 0
59078: PPUSH
59079: PPUSH
59080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59081: LD_ADDR_VAR 0 3
59085: PUSH
59086: LD_INT 22
59088: PUSH
59089: LD_OWVAR 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 25
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PPUSH
59112: CALL_OW 69
59116: ST_TO_ADDR
// if not tmp then
59117: LD_VAR 0 3
59121: NOT
59122: IFFALSE 59126
// exit ;
59124: GO 59182
// un := tmp [ rand ( 1 , tmp ) ] ;
59126: LD_ADDR_VAR 0 2
59130: PUSH
59131: LD_VAR 0 3
59135: PUSH
59136: LD_INT 1
59138: PPUSH
59139: LD_VAR 0 3
59143: PPUSH
59144: CALL_OW 12
59148: ARRAY
59149: ST_TO_ADDR
// if Crawls ( un ) then
59150: LD_VAR 0 2
59154: PPUSH
59155: CALL_OW 318
59159: IFFALSE 59170
// ComWalk ( un ) ;
59161: LD_VAR 0 2
59165: PPUSH
59166: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59170: LD_VAR 0 2
59174: PPUSH
59175: LD_INT 5
59177: PPUSH
59178: CALL_OW 336
// end ;
59182: PPOPN 3
59184: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59185: LD_EXP 43
59189: PUSH
59190: LD_EXP 61
59194: AND
59195: PUSH
59196: LD_OWVAR 67
59200: PUSH
59201: LD_INT 4
59203: LESS
59204: AND
59205: IFFALSE 59224
59207: GO 59209
59209: DISABLE
// begin Difficulty := Difficulty + 1 ;
59210: LD_ADDR_OWVAR 67
59214: PUSH
59215: LD_OWVAR 67
59219: PUSH
59220: LD_INT 1
59222: PLUS
59223: ST_TO_ADDR
// end ;
59224: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59225: LD_EXP 43
59229: PUSH
59230: LD_EXP 62
59234: AND
59235: IFFALSE 59338
59237: GO 59239
59239: DISABLE
59240: LD_INT 0
59242: PPUSH
// begin for i := 1 to 5 do
59243: LD_ADDR_VAR 0 1
59247: PUSH
59248: DOUBLE
59249: LD_INT 1
59251: DEC
59252: ST_TO_ADDR
59253: LD_INT 5
59255: PUSH
59256: FOR_TO
59257: IFFALSE 59336
// begin uc_nation := nation_nature ;
59259: LD_ADDR_OWVAR 21
59263: PUSH
59264: LD_INT 0
59266: ST_TO_ADDR
// uc_side := 0 ;
59267: LD_ADDR_OWVAR 20
59271: PUSH
59272: LD_INT 0
59274: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59275: LD_ADDR_OWVAR 29
59279: PUSH
59280: LD_INT 12
59282: PUSH
59283: LD_INT 12
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// hc_agressivity := 20 ;
59290: LD_ADDR_OWVAR 35
59294: PUSH
59295: LD_INT 20
59297: ST_TO_ADDR
// hc_class := class_tiger ;
59298: LD_ADDR_OWVAR 28
59302: PUSH
59303: LD_INT 14
59305: ST_TO_ADDR
// hc_gallery :=  ;
59306: LD_ADDR_OWVAR 33
59310: PUSH
59311: LD_STRING 
59313: ST_TO_ADDR
// hc_name :=  ;
59314: LD_ADDR_OWVAR 26
59318: PUSH
59319: LD_STRING 
59321: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59322: CALL_OW 44
59326: PPUSH
59327: LD_INT 0
59329: PPUSH
59330: CALL_OW 51
// end ;
59334: GO 59256
59336: POP
59337: POP
// end ;
59338: PPOPN 1
59340: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59341: LD_EXP 43
59345: PUSH
59346: LD_EXP 63
59350: AND
59351: IFFALSE 59360
59353: GO 59355
59355: DISABLE
// StreamSibBomb ;
59356: CALL 59361 0 0
59360: END
// export function StreamSibBomb ; var i , x , y ; begin
59361: LD_INT 0
59363: PPUSH
59364: PPUSH
59365: PPUSH
59366: PPUSH
// result := false ;
59367: LD_ADDR_VAR 0 1
59371: PUSH
59372: LD_INT 0
59374: ST_TO_ADDR
// for i := 1 to 16 do
59375: LD_ADDR_VAR 0 2
59379: PUSH
59380: DOUBLE
59381: LD_INT 1
59383: DEC
59384: ST_TO_ADDR
59385: LD_INT 16
59387: PUSH
59388: FOR_TO
59389: IFFALSE 59588
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59391: LD_ADDR_VAR 0 3
59395: PUSH
59396: LD_INT 10
59398: PUSH
59399: LD_INT 20
59401: PUSH
59402: LD_INT 30
59404: PUSH
59405: LD_INT 40
59407: PUSH
59408: LD_INT 50
59410: PUSH
59411: LD_INT 60
59413: PUSH
59414: LD_INT 70
59416: PUSH
59417: LD_INT 80
59419: PUSH
59420: LD_INT 90
59422: PUSH
59423: LD_INT 100
59425: PUSH
59426: LD_INT 110
59428: PUSH
59429: LD_INT 120
59431: PUSH
59432: LD_INT 130
59434: PUSH
59435: LD_INT 140
59437: PUSH
59438: LD_INT 150
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PPUSH
59461: LD_INT 15
59463: PPUSH
59464: CALL_OW 12
59468: ARRAY
59469: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59470: LD_ADDR_VAR 0 4
59474: PUSH
59475: LD_INT 10
59477: PUSH
59478: LD_INT 20
59480: PUSH
59481: LD_INT 30
59483: PUSH
59484: LD_INT 40
59486: PUSH
59487: LD_INT 50
59489: PUSH
59490: LD_INT 60
59492: PUSH
59493: LD_INT 70
59495: PUSH
59496: LD_INT 80
59498: PUSH
59499: LD_INT 90
59501: PUSH
59502: LD_INT 100
59504: PUSH
59505: LD_INT 110
59507: PUSH
59508: LD_INT 120
59510: PUSH
59511: LD_INT 130
59513: PUSH
59514: LD_INT 140
59516: PUSH
59517: LD_INT 150
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: PPUSH
59540: LD_INT 15
59542: PPUSH
59543: CALL_OW 12
59547: ARRAY
59548: ST_TO_ADDR
// if ValidHex ( x , y ) then
59549: LD_VAR 0 3
59553: PPUSH
59554: LD_VAR 0 4
59558: PPUSH
59559: CALL_OW 488
59563: IFFALSE 59586
// begin result := [ x , y ] ;
59565: LD_ADDR_VAR 0 1
59569: PUSH
59570: LD_VAR 0 3
59574: PUSH
59575: LD_VAR 0 4
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: ST_TO_ADDR
// break ;
59584: GO 59588
// end ; end ;
59586: GO 59388
59588: POP
59589: POP
// if result then
59590: LD_VAR 0 1
59594: IFFALSE 59654
// begin ToLua ( playSibBomb() ) ;
59596: LD_STRING playSibBomb()
59598: PPUSH
59599: CALL_OW 559
// wait ( 0 0$14 ) ;
59603: LD_INT 490
59605: PPUSH
59606: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59610: LD_VAR 0 1
59614: PUSH
59615: LD_INT 1
59617: ARRAY
59618: PPUSH
59619: LD_VAR 0 1
59623: PUSH
59624: LD_INT 2
59626: ARRAY
59627: PPUSH
59628: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59632: LD_VAR 0 1
59636: PUSH
59637: LD_INT 1
59639: ARRAY
59640: PPUSH
59641: LD_VAR 0 1
59645: PUSH
59646: LD_INT 2
59648: ARRAY
59649: PPUSH
59650: CALL_OW 429
// end ; end ;
59654: LD_VAR 0 1
59658: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59659: LD_EXP 43
59663: PUSH
59664: LD_EXP 65
59668: AND
59669: IFFALSE 59681
59671: GO 59673
59673: DISABLE
// YouLost (  ) ;
59674: LD_STRING 
59676: PPUSH
59677: CALL_OW 104
59681: END
// every 0 0$1 trigger StreamModeActive and sFog do
59682: LD_EXP 43
59686: PUSH
59687: LD_EXP 64
59691: AND
59692: IFFALSE 59706
59694: GO 59696
59696: DISABLE
// FogOff ( your_side ) ;
59697: LD_OWVAR 2
59701: PPUSH
59702: CALL_OW 344
59706: END
// every 0 0$1 trigger StreamModeActive and sSun do
59707: LD_EXP 43
59711: PUSH
59712: LD_EXP 66
59716: AND
59717: IFFALSE 59745
59719: GO 59721
59721: DISABLE
// begin solar_recharge_percent := 0 ;
59722: LD_ADDR_OWVAR 79
59726: PUSH
59727: LD_INT 0
59729: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59730: LD_INT 10500
59732: PPUSH
59733: CALL_OW 67
// solar_recharge_percent := 100 ;
59737: LD_ADDR_OWVAR 79
59741: PUSH
59742: LD_INT 100
59744: ST_TO_ADDR
// end ;
59745: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59746: LD_EXP 43
59750: PUSH
59751: LD_EXP 67
59755: AND
59756: IFFALSE 59995
59758: GO 59760
59760: DISABLE
59761: LD_INT 0
59763: PPUSH
59764: PPUSH
59765: PPUSH
// begin tmp := [ ] ;
59766: LD_ADDR_VAR 0 3
59770: PUSH
59771: EMPTY
59772: ST_TO_ADDR
// for i := 1 to 6 do
59773: LD_ADDR_VAR 0 1
59777: PUSH
59778: DOUBLE
59779: LD_INT 1
59781: DEC
59782: ST_TO_ADDR
59783: LD_INT 6
59785: PUSH
59786: FOR_TO
59787: IFFALSE 59892
// begin uc_nation := nation_nature ;
59789: LD_ADDR_OWVAR 21
59793: PUSH
59794: LD_INT 0
59796: ST_TO_ADDR
// uc_side := 0 ;
59797: LD_ADDR_OWVAR 20
59801: PUSH
59802: LD_INT 0
59804: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59805: LD_ADDR_OWVAR 29
59809: PUSH
59810: LD_INT 12
59812: PUSH
59813: LD_INT 12
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// hc_agressivity := 20 ;
59820: LD_ADDR_OWVAR 35
59824: PUSH
59825: LD_INT 20
59827: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59828: LD_ADDR_OWVAR 28
59832: PUSH
59833: LD_INT 17
59835: ST_TO_ADDR
// hc_gallery :=  ;
59836: LD_ADDR_OWVAR 33
59840: PUSH
59841: LD_STRING 
59843: ST_TO_ADDR
// hc_name :=  ;
59844: LD_ADDR_OWVAR 26
59848: PUSH
59849: LD_STRING 
59851: ST_TO_ADDR
// un := CreateHuman ;
59852: LD_ADDR_VAR 0 2
59856: PUSH
59857: CALL_OW 44
59861: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59862: LD_VAR 0 2
59866: PPUSH
59867: LD_INT 1
59869: PPUSH
59870: CALL_OW 51
// tmp := tmp ^ un ;
59874: LD_ADDR_VAR 0 3
59878: PUSH
59879: LD_VAR 0 3
59883: PUSH
59884: LD_VAR 0 2
59888: ADD
59889: ST_TO_ADDR
// end ;
59890: GO 59786
59892: POP
59893: POP
// repeat wait ( 0 0$1 ) ;
59894: LD_INT 35
59896: PPUSH
59897: CALL_OW 67
// for un in tmp do
59901: LD_ADDR_VAR 0 2
59905: PUSH
59906: LD_VAR 0 3
59910: PUSH
59911: FOR_IN
59912: IFFALSE 59986
// begin if IsDead ( un ) then
59914: LD_VAR 0 2
59918: PPUSH
59919: CALL_OW 301
59923: IFFALSE 59943
// begin tmp := tmp diff un ;
59925: LD_ADDR_VAR 0 3
59929: PUSH
59930: LD_VAR 0 3
59934: PUSH
59935: LD_VAR 0 2
59939: DIFF
59940: ST_TO_ADDR
// continue ;
59941: GO 59911
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59943: LD_VAR 0 2
59947: PPUSH
59948: LD_INT 3
59950: PUSH
59951: LD_INT 22
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PPUSH
59965: CALL_OW 69
59969: PPUSH
59970: LD_VAR 0 2
59974: PPUSH
59975: CALL_OW 74
59979: PPUSH
59980: CALL_OW 115
// end ;
59984: GO 59911
59986: POP
59987: POP
// until not tmp ;
59988: LD_VAR 0 3
59992: NOT
59993: IFFALSE 59894
// end ;
59995: PPOPN 3
59997: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59998: LD_EXP 43
60002: PUSH
60003: LD_EXP 68
60007: AND
60008: IFFALSE 60062
60010: GO 60012
60012: DISABLE
// begin ToLua ( displayTroll(); ) ;
60013: LD_STRING displayTroll();
60015: PPUSH
60016: CALL_OW 559
// wait ( 3 3$00 ) ;
60020: LD_INT 6300
60022: PPUSH
60023: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60027: LD_STRING hideTroll();
60029: PPUSH
60030: CALL_OW 559
// wait ( 1 1$00 ) ;
60034: LD_INT 2100
60036: PPUSH
60037: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60041: LD_STRING displayTroll();
60043: PPUSH
60044: CALL_OW 559
// wait ( 1 1$00 ) ;
60048: LD_INT 2100
60050: PPUSH
60051: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60055: LD_STRING hideTroll();
60057: PPUSH
60058: CALL_OW 559
// end ;
60062: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60063: LD_EXP 43
60067: PUSH
60068: LD_EXP 69
60072: AND
60073: IFFALSE 60136
60075: GO 60077
60077: DISABLE
60078: LD_INT 0
60080: PPUSH
// begin p := 0 ;
60081: LD_ADDR_VAR 0 1
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// repeat game_speed := 1 ;
60089: LD_ADDR_OWVAR 65
60093: PUSH
60094: LD_INT 1
60096: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60097: LD_INT 35
60099: PPUSH
60100: CALL_OW 67
// p := p + 1 ;
60104: LD_ADDR_VAR 0 1
60108: PUSH
60109: LD_VAR 0 1
60113: PUSH
60114: LD_INT 1
60116: PLUS
60117: ST_TO_ADDR
// until p >= 60 ;
60118: LD_VAR 0 1
60122: PUSH
60123: LD_INT 60
60125: GREATEREQUAL
60126: IFFALSE 60089
// game_speed := 4 ;
60128: LD_ADDR_OWVAR 65
60132: PUSH
60133: LD_INT 4
60135: ST_TO_ADDR
// end ;
60136: PPOPN 1
60138: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60139: LD_EXP 43
60143: PUSH
60144: LD_EXP 70
60148: AND
60149: IFFALSE 60295
60151: GO 60153
60153: DISABLE
60154: LD_INT 0
60156: PPUSH
60157: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60158: LD_ADDR_VAR 0 1
60162: PUSH
60163: LD_INT 22
60165: PUSH
60166: LD_OWVAR 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: LD_INT 30
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 30
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PPUSH
60207: CALL_OW 69
60211: ST_TO_ADDR
// if not depot then
60212: LD_VAR 0 1
60216: NOT
60217: IFFALSE 60221
// exit ;
60219: GO 60295
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60221: LD_ADDR_VAR 0 2
60225: PUSH
60226: LD_VAR 0 1
60230: PUSH
60231: LD_INT 1
60233: PPUSH
60234: LD_VAR 0 1
60238: PPUSH
60239: CALL_OW 12
60243: ARRAY
60244: PPUSH
60245: CALL_OW 274
60249: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60250: LD_VAR 0 2
60254: PPUSH
60255: LD_INT 1
60257: PPUSH
60258: LD_INT 0
60260: PPUSH
60261: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60265: LD_VAR 0 2
60269: PPUSH
60270: LD_INT 2
60272: PPUSH
60273: LD_INT 0
60275: PPUSH
60276: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60280: LD_VAR 0 2
60284: PPUSH
60285: LD_INT 3
60287: PPUSH
60288: LD_INT 0
60290: PPUSH
60291: CALL_OW 277
// end ;
60295: PPOPN 2
60297: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60298: LD_EXP 43
60302: PUSH
60303: LD_EXP 71
60307: AND
60308: IFFALSE 60405
60310: GO 60312
60312: DISABLE
60313: LD_INT 0
60315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60316: LD_ADDR_VAR 0 1
60320: PUSH
60321: LD_INT 22
60323: PUSH
60324: LD_OWVAR 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 21
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 3
60345: PUSH
60346: LD_INT 23
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: PPUSH
60365: CALL_OW 69
60369: ST_TO_ADDR
// if not tmp then
60370: LD_VAR 0 1
60374: NOT
60375: IFFALSE 60379
// exit ;
60377: GO 60405
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60379: LD_VAR 0 1
60383: PUSH
60384: LD_INT 1
60386: PPUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 12
60396: ARRAY
60397: PPUSH
60398: LD_INT 200
60400: PPUSH
60401: CALL_OW 234
// end ;
60405: PPOPN 1
60407: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60408: LD_EXP 43
60412: PUSH
60413: LD_EXP 72
60417: AND
60418: IFFALSE 60497
60420: GO 60422
60422: DISABLE
60423: LD_INT 0
60425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60426: LD_ADDR_VAR 0 1
60430: PUSH
60431: LD_INT 22
60433: PUSH
60434: LD_OWVAR 2
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 21
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PPUSH
60457: CALL_OW 69
60461: ST_TO_ADDR
// if not tmp then
60462: LD_VAR 0 1
60466: NOT
60467: IFFALSE 60471
// exit ;
60469: GO 60497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60471: LD_VAR 0 1
60475: PUSH
60476: LD_INT 1
60478: PPUSH
60479: LD_VAR 0 1
60483: PPUSH
60484: CALL_OW 12
60488: ARRAY
60489: PPUSH
60490: LD_INT 60
60492: PPUSH
60493: CALL_OW 234
// end ;
60497: PPOPN 1
60499: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60500: LD_EXP 43
60504: PUSH
60505: LD_EXP 73
60509: AND
60510: IFFALSE 60609
60512: GO 60514
60514: DISABLE
60515: LD_INT 0
60517: PPUSH
60518: PPUSH
// begin enable ;
60519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60520: LD_ADDR_VAR 0 1
60524: PUSH
60525: LD_INT 22
60527: PUSH
60528: LD_OWVAR 2
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 61
60539: PUSH
60540: EMPTY
60541: LIST
60542: PUSH
60543: LD_INT 33
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: PPUSH
60558: CALL_OW 69
60562: ST_TO_ADDR
// if not tmp then
60563: LD_VAR 0 1
60567: NOT
60568: IFFALSE 60572
// exit ;
60570: GO 60609
// for i in tmp do
60572: LD_ADDR_VAR 0 2
60576: PUSH
60577: LD_VAR 0 1
60581: PUSH
60582: FOR_IN
60583: IFFALSE 60607
// if IsControledBy ( i ) then
60585: LD_VAR 0 2
60589: PPUSH
60590: CALL_OW 312
60594: IFFALSE 60605
// ComUnlink ( i ) ;
60596: LD_VAR 0 2
60600: PPUSH
60601: CALL_OW 136
60605: GO 60582
60607: POP
60608: POP
// end ;
60609: PPOPN 2
60611: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60612: LD_EXP 43
60616: PUSH
60617: LD_EXP 74
60621: AND
60622: IFFALSE 60762
60624: GO 60626
60626: DISABLE
60627: LD_INT 0
60629: PPUSH
60630: PPUSH
// begin ToLua ( displayPowell(); ) ;
60631: LD_STRING displayPowell();
60633: PPUSH
60634: CALL_OW 559
// uc_side := 0 ;
60638: LD_ADDR_OWVAR 20
60642: PUSH
60643: LD_INT 0
60645: ST_TO_ADDR
// uc_nation := 2 ;
60646: LD_ADDR_OWVAR 21
60650: PUSH
60651: LD_INT 2
60653: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60654: LD_ADDR_OWVAR 37
60658: PUSH
60659: LD_INT 14
60661: ST_TO_ADDR
// vc_engine := engine_siberite ;
60662: LD_ADDR_OWVAR 39
60666: PUSH
60667: LD_INT 3
60669: ST_TO_ADDR
// vc_control := control_apeman ;
60670: LD_ADDR_OWVAR 38
60674: PUSH
60675: LD_INT 5
60677: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60678: LD_ADDR_OWVAR 40
60682: PUSH
60683: LD_INT 29
60685: ST_TO_ADDR
// un := CreateVehicle ;
60686: LD_ADDR_VAR 0 2
60690: PUSH
60691: CALL_OW 45
60695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60696: LD_VAR 0 2
60700: PPUSH
60701: LD_INT 1
60703: PPUSH
60704: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60708: LD_INT 35
60710: PPUSH
60711: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60715: LD_VAR 0 2
60719: PPUSH
60720: LD_INT 22
60722: PUSH
60723: LD_OWVAR 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PPUSH
60732: CALL_OW 69
60736: PPUSH
60737: LD_VAR 0 2
60741: PPUSH
60742: CALL_OW 74
60746: PPUSH
60747: CALL_OW 115
// until IsDead ( un ) ;
60751: LD_VAR 0 2
60755: PPUSH
60756: CALL_OW 301
60760: IFFALSE 60708
// end ;
60762: PPOPN 2
60764: END
// every 0 0$1 trigger StreamModeActive and sStu do
60765: LD_EXP 43
60769: PUSH
60770: LD_EXP 82
60774: AND
60775: IFFALSE 60791
60777: GO 60779
60779: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60780: LD_STRING displayStucuk();
60782: PPUSH
60783: CALL_OW 559
// ResetFog ;
60787: CALL_OW 335
// end ;
60791: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60792: LD_EXP 43
60796: PUSH
60797: LD_EXP 75
60801: AND
60802: IFFALSE 60943
60804: GO 60806
60806: DISABLE
60807: LD_INT 0
60809: PPUSH
60810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60811: LD_ADDR_VAR 0 2
60815: PUSH
60816: LD_INT 22
60818: PUSH
60819: LD_OWVAR 2
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 21
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PPUSH
60842: CALL_OW 69
60846: ST_TO_ADDR
// if not tmp then
60847: LD_VAR 0 2
60851: NOT
60852: IFFALSE 60856
// exit ;
60854: GO 60943
// un := tmp [ rand ( 1 , tmp ) ] ;
60856: LD_ADDR_VAR 0 1
60860: PUSH
60861: LD_VAR 0 2
60865: PUSH
60866: LD_INT 1
60868: PPUSH
60869: LD_VAR 0 2
60873: PPUSH
60874: CALL_OW 12
60878: ARRAY
60879: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60880: LD_VAR 0 1
60884: PPUSH
60885: LD_INT 0
60887: PPUSH
60888: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60892: LD_VAR 0 1
60896: PPUSH
60897: LD_OWVAR 3
60901: PUSH
60902: LD_VAR 0 1
60906: DIFF
60907: PPUSH
60908: LD_VAR 0 1
60912: PPUSH
60913: CALL_OW 74
60917: PPUSH
60918: CALL_OW 115
// wait ( 0 0$20 ) ;
60922: LD_INT 700
60924: PPUSH
60925: CALL_OW 67
// SetSide ( un , your_side ) ;
60929: LD_VAR 0 1
60933: PPUSH
60934: LD_OWVAR 2
60938: PPUSH
60939: CALL_OW 235
// end ;
60943: PPOPN 2
60945: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60946: LD_EXP 43
60950: PUSH
60951: LD_EXP 76
60955: AND
60956: IFFALSE 61062
60958: GO 60960
60960: DISABLE
60961: LD_INT 0
60963: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60964: LD_ADDR_VAR 0 1
60968: PUSH
60969: LD_INT 22
60971: PUSH
60972: LD_OWVAR 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 30
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 30
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PPUSH
61013: CALL_OW 69
61017: ST_TO_ADDR
// if not depot then
61018: LD_VAR 0 1
61022: NOT
61023: IFFALSE 61027
// exit ;
61025: GO 61062
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61027: LD_VAR 0 1
61031: PUSH
61032: LD_INT 1
61034: ARRAY
61035: PPUSH
61036: CALL_OW 250
61040: PPUSH
61041: LD_VAR 0 1
61045: PUSH
61046: LD_INT 1
61048: ARRAY
61049: PPUSH
61050: CALL_OW 251
61054: PPUSH
61055: LD_INT 70
61057: PPUSH
61058: CALL_OW 495
// end ;
61062: PPOPN 1
61064: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61065: LD_EXP 43
61069: PUSH
61070: LD_EXP 77
61074: AND
61075: IFFALSE 61286
61077: GO 61079
61079: DISABLE
61080: LD_INT 0
61082: PPUSH
61083: PPUSH
61084: PPUSH
61085: PPUSH
61086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61087: LD_ADDR_VAR 0 5
61091: PUSH
61092: LD_INT 22
61094: PUSH
61095: LD_OWVAR 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 21
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PPUSH
61118: CALL_OW 69
61122: ST_TO_ADDR
// if not tmp then
61123: LD_VAR 0 5
61127: NOT
61128: IFFALSE 61132
// exit ;
61130: GO 61286
// for i in tmp do
61132: LD_ADDR_VAR 0 1
61136: PUSH
61137: LD_VAR 0 5
61141: PUSH
61142: FOR_IN
61143: IFFALSE 61284
// begin d := rand ( 0 , 5 ) ;
61145: LD_ADDR_VAR 0 4
61149: PUSH
61150: LD_INT 0
61152: PPUSH
61153: LD_INT 5
61155: PPUSH
61156: CALL_OW 12
61160: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61161: LD_ADDR_VAR 0 2
61165: PUSH
61166: LD_VAR 0 1
61170: PPUSH
61171: CALL_OW 250
61175: PPUSH
61176: LD_VAR 0 4
61180: PPUSH
61181: LD_INT 3
61183: PPUSH
61184: LD_INT 12
61186: PPUSH
61187: CALL_OW 12
61191: PPUSH
61192: CALL_OW 272
61196: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61197: LD_ADDR_VAR 0 3
61201: PUSH
61202: LD_VAR 0 1
61206: PPUSH
61207: CALL_OW 251
61211: PPUSH
61212: LD_VAR 0 4
61216: PPUSH
61217: LD_INT 3
61219: PPUSH
61220: LD_INT 12
61222: PPUSH
61223: CALL_OW 12
61227: PPUSH
61228: CALL_OW 273
61232: ST_TO_ADDR
// if ValidHex ( x , y ) then
61233: LD_VAR 0 2
61237: PPUSH
61238: LD_VAR 0 3
61242: PPUSH
61243: CALL_OW 488
61247: IFFALSE 61282
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61249: LD_VAR 0 1
61253: PPUSH
61254: LD_VAR 0 2
61258: PPUSH
61259: LD_VAR 0 3
61263: PPUSH
61264: LD_INT 3
61266: PPUSH
61267: LD_INT 6
61269: PPUSH
61270: CALL_OW 12
61274: PPUSH
61275: LD_INT 1
61277: PPUSH
61278: CALL_OW 483
// end ;
61282: GO 61142
61284: POP
61285: POP
// end ;
61286: PPOPN 5
61288: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61289: LD_EXP 43
61293: PUSH
61294: LD_EXP 78
61298: AND
61299: IFFALSE 61393
61301: GO 61303
61303: DISABLE
61304: LD_INT 0
61306: PPUSH
61307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61308: LD_ADDR_VAR 0 2
61312: PUSH
61313: LD_INT 22
61315: PUSH
61316: LD_OWVAR 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 32
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 21
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: PPUSH
61350: CALL_OW 69
61354: ST_TO_ADDR
// if not tmp then
61355: LD_VAR 0 2
61359: NOT
61360: IFFALSE 61364
// exit ;
61362: GO 61393
// for i in tmp do
61364: LD_ADDR_VAR 0 1
61368: PUSH
61369: LD_VAR 0 2
61373: PUSH
61374: FOR_IN
61375: IFFALSE 61391
// SetFuel ( i , 0 ) ;
61377: LD_VAR 0 1
61381: PPUSH
61382: LD_INT 0
61384: PPUSH
61385: CALL_OW 240
61389: GO 61374
61391: POP
61392: POP
// end ;
61393: PPOPN 2
61395: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61396: LD_EXP 43
61400: PUSH
61401: LD_EXP 79
61405: AND
61406: IFFALSE 61472
61408: GO 61410
61410: DISABLE
61411: LD_INT 0
61413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61414: LD_ADDR_VAR 0 1
61418: PUSH
61419: LD_INT 22
61421: PUSH
61422: LD_OWVAR 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 30
61433: PUSH
61434: LD_INT 29
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PPUSH
61445: CALL_OW 69
61449: ST_TO_ADDR
// if not tmp then
61450: LD_VAR 0 1
61454: NOT
61455: IFFALSE 61459
// exit ;
61457: GO 61472
// DestroyUnit ( tmp [ 1 ] ) ;
61459: LD_VAR 0 1
61463: PUSH
61464: LD_INT 1
61466: ARRAY
61467: PPUSH
61468: CALL_OW 65
// end ;
61472: PPOPN 1
61474: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61475: LD_EXP 43
61479: PUSH
61480: LD_EXP 81
61484: AND
61485: IFFALSE 61614
61487: GO 61489
61489: DISABLE
61490: LD_INT 0
61492: PPUSH
// begin uc_side := 0 ;
61493: LD_ADDR_OWVAR 20
61497: PUSH
61498: LD_INT 0
61500: ST_TO_ADDR
// uc_nation := nation_arabian ;
61501: LD_ADDR_OWVAR 21
61505: PUSH
61506: LD_INT 2
61508: ST_TO_ADDR
// hc_gallery :=  ;
61509: LD_ADDR_OWVAR 33
61513: PUSH
61514: LD_STRING 
61516: ST_TO_ADDR
// hc_name :=  ;
61517: LD_ADDR_OWVAR 26
61521: PUSH
61522: LD_STRING 
61524: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61525: LD_INT 1
61527: PPUSH
61528: LD_INT 11
61530: PPUSH
61531: LD_INT 10
61533: PPUSH
61534: CALL_OW 380
// un := CreateHuman ;
61538: LD_ADDR_VAR 0 1
61542: PUSH
61543: CALL_OW 44
61547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61548: LD_VAR 0 1
61552: PPUSH
61553: LD_INT 1
61555: PPUSH
61556: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61560: LD_INT 35
61562: PPUSH
61563: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61567: LD_VAR 0 1
61571: PPUSH
61572: LD_INT 22
61574: PUSH
61575: LD_OWVAR 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PPUSH
61584: CALL_OW 69
61588: PPUSH
61589: LD_VAR 0 1
61593: PPUSH
61594: CALL_OW 74
61598: PPUSH
61599: CALL_OW 115
// until IsDead ( un ) ;
61603: LD_VAR 0 1
61607: PPUSH
61608: CALL_OW 301
61612: IFFALSE 61560
// end ;
61614: PPOPN 1
61616: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61617: LD_EXP 43
61621: PUSH
61622: LD_EXP 83
61626: AND
61627: IFFALSE 61639
61629: GO 61631
61631: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61632: LD_STRING earthquake(getX(game), 0, 32)
61634: PPUSH
61635: CALL_OW 559
61639: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61640: LD_EXP 43
61644: PUSH
61645: LD_EXP 84
61649: AND
61650: IFFALSE 61741
61652: GO 61654
61654: DISABLE
61655: LD_INT 0
61657: PPUSH
// begin enable ;
61658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61659: LD_ADDR_VAR 0 1
61663: PUSH
61664: LD_INT 22
61666: PUSH
61667: LD_OWVAR 2
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 21
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 33
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: PPUSH
61701: CALL_OW 69
61705: ST_TO_ADDR
// if not tmp then
61706: LD_VAR 0 1
61710: NOT
61711: IFFALSE 61715
// exit ;
61713: GO 61741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61715: LD_VAR 0 1
61719: PUSH
61720: LD_INT 1
61722: PPUSH
61723: LD_VAR 0 1
61727: PPUSH
61728: CALL_OW 12
61732: ARRAY
61733: PPUSH
61734: LD_INT 1
61736: PPUSH
61737: CALL_OW 234
// end ;
61741: PPOPN 1
61743: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61744: LD_EXP 43
61748: PUSH
61749: LD_EXP 85
61753: AND
61754: IFFALSE 61895
61756: GO 61758
61758: DISABLE
61759: LD_INT 0
61761: PPUSH
61762: PPUSH
61763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61764: LD_ADDR_VAR 0 3
61768: PUSH
61769: LD_INT 22
61771: PUSH
61772: LD_OWVAR 2
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 25
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PPUSH
61795: CALL_OW 69
61799: ST_TO_ADDR
// if not tmp then
61800: LD_VAR 0 3
61804: NOT
61805: IFFALSE 61809
// exit ;
61807: GO 61895
// un := tmp [ rand ( 1 , tmp ) ] ;
61809: LD_ADDR_VAR 0 2
61813: PUSH
61814: LD_VAR 0 3
61818: PUSH
61819: LD_INT 1
61821: PPUSH
61822: LD_VAR 0 3
61826: PPUSH
61827: CALL_OW 12
61831: ARRAY
61832: ST_TO_ADDR
// if Crawls ( un ) then
61833: LD_VAR 0 2
61837: PPUSH
61838: CALL_OW 318
61842: IFFALSE 61853
// ComWalk ( un ) ;
61844: LD_VAR 0 2
61848: PPUSH
61849: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61853: LD_VAR 0 2
61857: PPUSH
61858: LD_INT 9
61860: PPUSH
61861: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61865: LD_INT 28
61867: PPUSH
61868: LD_OWVAR 2
61872: PPUSH
61873: LD_INT 2
61875: PPUSH
61876: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61880: LD_INT 29
61882: PPUSH
61883: LD_OWVAR 2
61887: PPUSH
61888: LD_INT 2
61890: PPUSH
61891: CALL_OW 322
// end ;
61895: PPOPN 3
61897: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61898: LD_EXP 43
61902: PUSH
61903: LD_EXP 86
61907: AND
61908: IFFALSE 62019
61910: GO 61912
61912: DISABLE
61913: LD_INT 0
61915: PPUSH
61916: PPUSH
61917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61918: LD_ADDR_VAR 0 3
61922: PUSH
61923: LD_INT 22
61925: PUSH
61926: LD_OWVAR 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 25
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PPUSH
61949: CALL_OW 69
61953: ST_TO_ADDR
// if not tmp then
61954: LD_VAR 0 3
61958: NOT
61959: IFFALSE 61963
// exit ;
61961: GO 62019
// un := tmp [ rand ( 1 , tmp ) ] ;
61963: LD_ADDR_VAR 0 2
61967: PUSH
61968: LD_VAR 0 3
61972: PUSH
61973: LD_INT 1
61975: PPUSH
61976: LD_VAR 0 3
61980: PPUSH
61981: CALL_OW 12
61985: ARRAY
61986: ST_TO_ADDR
// if Crawls ( un ) then
61987: LD_VAR 0 2
61991: PPUSH
61992: CALL_OW 318
61996: IFFALSE 62007
// ComWalk ( un ) ;
61998: LD_VAR 0 2
62002: PPUSH
62003: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62007: LD_VAR 0 2
62011: PPUSH
62012: LD_INT 8
62014: PPUSH
62015: CALL_OW 336
// end ;
62019: PPOPN 3
62021: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62022: LD_EXP 43
62026: PUSH
62027: LD_EXP 87
62031: AND
62032: IFFALSE 62176
62034: GO 62036
62036: DISABLE
62037: LD_INT 0
62039: PPUSH
62040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62041: LD_ADDR_VAR 0 2
62045: PUSH
62046: LD_INT 22
62048: PUSH
62049: LD_OWVAR 2
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 21
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 34
62073: PUSH
62074: LD_INT 12
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 34
62083: PUSH
62084: LD_INT 51
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 34
62093: PUSH
62094: LD_INT 32
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: LIST
62111: PPUSH
62112: CALL_OW 69
62116: ST_TO_ADDR
// if not tmp then
62117: LD_VAR 0 2
62121: NOT
62122: IFFALSE 62126
// exit ;
62124: GO 62176
// for i in tmp do
62126: LD_ADDR_VAR 0 1
62130: PUSH
62131: LD_VAR 0 2
62135: PUSH
62136: FOR_IN
62137: IFFALSE 62174
// if GetCargo ( i , mat_artifact ) = 0 then
62139: LD_VAR 0 1
62143: PPUSH
62144: LD_INT 4
62146: PPUSH
62147: CALL_OW 289
62151: PUSH
62152: LD_INT 0
62154: EQUAL
62155: IFFALSE 62172
// SetCargo ( i , mat_siberit , 100 ) ;
62157: LD_VAR 0 1
62161: PPUSH
62162: LD_INT 3
62164: PPUSH
62165: LD_INT 100
62167: PPUSH
62168: CALL_OW 290
62172: GO 62136
62174: POP
62175: POP
// end ;
62176: PPOPN 2
62178: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62179: LD_EXP 43
62183: PUSH
62184: LD_EXP 88
62188: AND
62189: IFFALSE 62372
62191: GO 62193
62193: DISABLE
62194: LD_INT 0
62196: PPUSH
62197: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62198: LD_ADDR_VAR 0 2
62202: PUSH
62203: LD_INT 22
62205: PUSH
62206: LD_OWVAR 2
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PPUSH
62215: CALL_OW 69
62219: ST_TO_ADDR
// if not tmp then
62220: LD_VAR 0 2
62224: NOT
62225: IFFALSE 62229
// exit ;
62227: GO 62372
// for i := 1 to 2 do
62229: LD_ADDR_VAR 0 1
62233: PUSH
62234: DOUBLE
62235: LD_INT 1
62237: DEC
62238: ST_TO_ADDR
62239: LD_INT 2
62241: PUSH
62242: FOR_TO
62243: IFFALSE 62370
// begin uc_side := your_side ;
62245: LD_ADDR_OWVAR 20
62249: PUSH
62250: LD_OWVAR 2
62254: ST_TO_ADDR
// uc_nation := nation_american ;
62255: LD_ADDR_OWVAR 21
62259: PUSH
62260: LD_INT 1
62262: ST_TO_ADDR
// vc_chassis := us_morphling ;
62263: LD_ADDR_OWVAR 37
62267: PUSH
62268: LD_INT 5
62270: ST_TO_ADDR
// vc_engine := engine_siberite ;
62271: LD_ADDR_OWVAR 39
62275: PUSH
62276: LD_INT 3
62278: ST_TO_ADDR
// vc_control := control_computer ;
62279: LD_ADDR_OWVAR 38
62283: PUSH
62284: LD_INT 3
62286: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62287: LD_ADDR_OWVAR 40
62291: PUSH
62292: LD_INT 10
62294: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62295: LD_VAR 0 2
62299: PUSH
62300: LD_INT 1
62302: ARRAY
62303: PPUSH
62304: CALL_OW 310
62308: NOT
62309: IFFALSE 62356
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62311: CALL_OW 45
62315: PPUSH
62316: LD_VAR 0 2
62320: PUSH
62321: LD_INT 1
62323: ARRAY
62324: PPUSH
62325: CALL_OW 250
62329: PPUSH
62330: LD_VAR 0 2
62334: PUSH
62335: LD_INT 1
62337: ARRAY
62338: PPUSH
62339: CALL_OW 251
62343: PPUSH
62344: LD_INT 12
62346: PPUSH
62347: LD_INT 1
62349: PPUSH
62350: CALL_OW 50
62354: GO 62368
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62356: CALL_OW 45
62360: PPUSH
62361: LD_INT 1
62363: PPUSH
62364: CALL_OW 51
// end ;
62368: GO 62242
62370: POP
62371: POP
// end ;
62372: PPOPN 2
62374: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62375: LD_EXP 43
62379: PUSH
62380: LD_EXP 89
62384: AND
62385: IFFALSE 62607
62387: GO 62389
62389: DISABLE
62390: LD_INT 0
62392: PPUSH
62393: PPUSH
62394: PPUSH
62395: PPUSH
62396: PPUSH
62397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62398: LD_ADDR_VAR 0 6
62402: PUSH
62403: LD_INT 22
62405: PUSH
62406: LD_OWVAR 2
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 21
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: LD_INT 23
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: PPUSH
62447: CALL_OW 69
62451: ST_TO_ADDR
// if not tmp then
62452: LD_VAR 0 6
62456: NOT
62457: IFFALSE 62461
// exit ;
62459: GO 62607
// s1 := rand ( 1 , 4 ) ;
62461: LD_ADDR_VAR 0 2
62465: PUSH
62466: LD_INT 1
62468: PPUSH
62469: LD_INT 4
62471: PPUSH
62472: CALL_OW 12
62476: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62477: LD_ADDR_VAR 0 4
62481: PUSH
62482: LD_VAR 0 6
62486: PUSH
62487: LD_INT 1
62489: ARRAY
62490: PPUSH
62491: LD_VAR 0 2
62495: PPUSH
62496: CALL_OW 259
62500: ST_TO_ADDR
// if s1 = 1 then
62501: LD_VAR 0 2
62505: PUSH
62506: LD_INT 1
62508: EQUAL
62509: IFFALSE 62529
// s2 := rand ( 2 , 4 ) else
62511: LD_ADDR_VAR 0 3
62515: PUSH
62516: LD_INT 2
62518: PPUSH
62519: LD_INT 4
62521: PPUSH
62522: CALL_OW 12
62526: ST_TO_ADDR
62527: GO 62537
// s2 := 1 ;
62529: LD_ADDR_VAR 0 3
62533: PUSH
62534: LD_INT 1
62536: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62537: LD_ADDR_VAR 0 5
62541: PUSH
62542: LD_VAR 0 6
62546: PUSH
62547: LD_INT 1
62549: ARRAY
62550: PPUSH
62551: LD_VAR 0 3
62555: PPUSH
62556: CALL_OW 259
62560: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62561: LD_VAR 0 6
62565: PUSH
62566: LD_INT 1
62568: ARRAY
62569: PPUSH
62570: LD_VAR 0 2
62574: PPUSH
62575: LD_VAR 0 5
62579: PPUSH
62580: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62584: LD_VAR 0 6
62588: PUSH
62589: LD_INT 1
62591: ARRAY
62592: PPUSH
62593: LD_VAR 0 3
62597: PPUSH
62598: LD_VAR 0 4
62602: PPUSH
62603: CALL_OW 237
// end ;
62607: PPOPN 6
62609: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62610: LD_EXP 43
62614: PUSH
62615: LD_EXP 90
62619: AND
62620: IFFALSE 62699
62622: GO 62624
62624: DISABLE
62625: LD_INT 0
62627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62628: LD_ADDR_VAR 0 1
62632: PUSH
62633: LD_INT 22
62635: PUSH
62636: LD_OWVAR 2
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 30
62647: PUSH
62648: LD_INT 3
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PPUSH
62659: CALL_OW 69
62663: ST_TO_ADDR
// if not tmp then
62664: LD_VAR 0 1
62668: NOT
62669: IFFALSE 62673
// exit ;
62671: GO 62699
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62673: LD_VAR 0 1
62677: PUSH
62678: LD_INT 1
62680: PPUSH
62681: LD_VAR 0 1
62685: PPUSH
62686: CALL_OW 12
62690: ARRAY
62691: PPUSH
62692: LD_INT 1
62694: PPUSH
62695: CALL_OW 234
// end ;
62699: PPOPN 1
62701: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62702: LD_EXP 43
62706: PUSH
62707: LD_EXP 91
62711: AND
62712: IFFALSE 62824
62714: GO 62716
62716: DISABLE
62717: LD_INT 0
62719: PPUSH
62720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62721: LD_ADDR_VAR 0 2
62725: PUSH
62726: LD_INT 22
62728: PUSH
62729: LD_OWVAR 2
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 30
62743: PUSH
62744: LD_INT 27
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 30
62753: PUSH
62754: LD_INT 26
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 30
62763: PUSH
62764: LD_INT 28
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PPUSH
62781: CALL_OW 69
62785: ST_TO_ADDR
// if not tmp then
62786: LD_VAR 0 2
62790: NOT
62791: IFFALSE 62795
// exit ;
62793: GO 62824
// for i in tmp do
62795: LD_ADDR_VAR 0 1
62799: PUSH
62800: LD_VAR 0 2
62804: PUSH
62805: FOR_IN
62806: IFFALSE 62822
// SetLives ( i , 1 ) ;
62808: LD_VAR 0 1
62812: PPUSH
62813: LD_INT 1
62815: PPUSH
62816: CALL_OW 234
62820: GO 62805
62822: POP
62823: POP
// end ;
62824: PPOPN 2
62826: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62827: LD_EXP 43
62831: PUSH
62832: LD_EXP 92
62836: AND
62837: IFFALSE 63124
62839: GO 62841
62841: DISABLE
62842: LD_INT 0
62844: PPUSH
62845: PPUSH
62846: PPUSH
// begin i := rand ( 1 , 7 ) ;
62847: LD_ADDR_VAR 0 1
62851: PUSH
62852: LD_INT 1
62854: PPUSH
62855: LD_INT 7
62857: PPUSH
62858: CALL_OW 12
62862: ST_TO_ADDR
// case i of 1 :
62863: LD_VAR 0 1
62867: PUSH
62868: LD_INT 1
62870: DOUBLE
62871: EQUAL
62872: IFTRUE 62876
62874: GO 62886
62876: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62877: LD_STRING earthquake(getX(game), 0, 32)
62879: PPUSH
62880: CALL_OW 559
62884: GO 63124
62886: LD_INT 2
62888: DOUBLE
62889: EQUAL
62890: IFTRUE 62894
62892: GO 62908
62894: POP
// begin ToLua ( displayStucuk(); ) ;
62895: LD_STRING displayStucuk();
62897: PPUSH
62898: CALL_OW 559
// ResetFog ;
62902: CALL_OW 335
// end ; 3 :
62906: GO 63124
62908: LD_INT 3
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 63020
62916: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62917: LD_ADDR_VAR 0 2
62921: PUSH
62922: LD_INT 22
62924: PUSH
62925: LD_OWVAR 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 25
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PPUSH
62948: CALL_OW 69
62952: ST_TO_ADDR
// if not tmp then
62953: LD_VAR 0 2
62957: NOT
62958: IFFALSE 62962
// exit ;
62960: GO 63124
// un := tmp [ rand ( 1 , tmp ) ] ;
62962: LD_ADDR_VAR 0 3
62966: PUSH
62967: LD_VAR 0 2
62971: PUSH
62972: LD_INT 1
62974: PPUSH
62975: LD_VAR 0 2
62979: PPUSH
62980: CALL_OW 12
62984: ARRAY
62985: ST_TO_ADDR
// if Crawls ( un ) then
62986: LD_VAR 0 3
62990: PPUSH
62991: CALL_OW 318
62995: IFFALSE 63006
// ComWalk ( un ) ;
62997: LD_VAR 0 3
63001: PPUSH
63002: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63006: LD_VAR 0 3
63010: PPUSH
63011: LD_INT 8
63013: PPUSH
63014: CALL_OW 336
// end ; 4 :
63018: GO 63124
63020: LD_INT 4
63022: DOUBLE
63023: EQUAL
63024: IFTRUE 63028
63026: GO 63102
63028: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63029: LD_ADDR_VAR 0 2
63033: PUSH
63034: LD_INT 22
63036: PUSH
63037: LD_OWVAR 2
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 30
63048: PUSH
63049: LD_INT 29
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PPUSH
63060: CALL_OW 69
63064: ST_TO_ADDR
// if not tmp then
63065: LD_VAR 0 2
63069: NOT
63070: IFFALSE 63074
// exit ;
63072: GO 63124
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63074: LD_VAR 0 2
63078: PUSH
63079: LD_INT 1
63081: ARRAY
63082: PPUSH
63083: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63087: LD_VAR 0 2
63091: PUSH
63092: LD_INT 1
63094: ARRAY
63095: PPUSH
63096: CALL_OW 65
// end ; 5 .. 7 :
63100: GO 63124
63102: LD_INT 5
63104: DOUBLE
63105: GREATEREQUAL
63106: IFFALSE 63114
63108: LD_INT 7
63110: DOUBLE
63111: LESSEQUAL
63112: IFTRUE 63116
63114: GO 63123
63116: POP
// StreamSibBomb ; end ;
63117: CALL 59361 0 0
63121: GO 63124
63123: POP
// end ;
63124: PPOPN 3
63126: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63127: LD_EXP 43
63131: PUSH
63132: LD_EXP 93
63136: AND
63137: IFFALSE 63293
63139: GO 63141
63141: DISABLE
63142: LD_INT 0
63144: PPUSH
63145: PPUSH
63146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63147: LD_ADDR_VAR 0 2
63151: PUSH
63152: LD_INT 81
63154: PUSH
63155: LD_OWVAR 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: LD_INT 21
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 21
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PPUSH
63196: CALL_OW 69
63200: ST_TO_ADDR
// if not tmp then
63201: LD_VAR 0 2
63205: NOT
63206: IFFALSE 63210
// exit ;
63208: GO 63293
// p := 0 ;
63210: LD_ADDR_VAR 0 3
63214: PUSH
63215: LD_INT 0
63217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63218: LD_INT 35
63220: PPUSH
63221: CALL_OW 67
// p := p + 1 ;
63225: LD_ADDR_VAR 0 3
63229: PUSH
63230: LD_VAR 0 3
63234: PUSH
63235: LD_INT 1
63237: PLUS
63238: ST_TO_ADDR
// for i in tmp do
63239: LD_ADDR_VAR 0 1
63243: PUSH
63244: LD_VAR 0 2
63248: PUSH
63249: FOR_IN
63250: IFFALSE 63281
// if GetLives ( i ) < 1000 then
63252: LD_VAR 0 1
63256: PPUSH
63257: CALL_OW 256
63261: PUSH
63262: LD_INT 1000
63264: LESS
63265: IFFALSE 63279
// SetLives ( i , 1000 ) ;
63267: LD_VAR 0 1
63271: PPUSH
63272: LD_INT 1000
63274: PPUSH
63275: CALL_OW 234
63279: GO 63249
63281: POP
63282: POP
// until p > 20 ;
63283: LD_VAR 0 3
63287: PUSH
63288: LD_INT 20
63290: GREATER
63291: IFFALSE 63218
// end ;
63293: PPOPN 3
63295: END
// every 0 0$1 trigger StreamModeActive and sTime do
63296: LD_EXP 43
63300: PUSH
63301: LD_EXP 94
63305: AND
63306: IFFALSE 63341
63308: GO 63310
63310: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63311: LD_INT 28
63313: PPUSH
63314: LD_OWVAR 2
63318: PPUSH
63319: LD_INT 2
63321: PPUSH
63322: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63326: LD_INT 30
63328: PPUSH
63329: LD_OWVAR 2
63333: PPUSH
63334: LD_INT 2
63336: PPUSH
63337: CALL_OW 322
// end ;
63341: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63342: LD_EXP 43
63346: PUSH
63347: LD_EXP 95
63351: AND
63352: IFFALSE 63473
63354: GO 63356
63356: DISABLE
63357: LD_INT 0
63359: PPUSH
63360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63361: LD_ADDR_VAR 0 2
63365: PUSH
63366: LD_INT 22
63368: PUSH
63369: LD_OWVAR 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 21
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: LD_INT 23
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PPUSH
63410: CALL_OW 69
63414: ST_TO_ADDR
// if not tmp then
63415: LD_VAR 0 2
63419: NOT
63420: IFFALSE 63424
// exit ;
63422: GO 63473
// for i in tmp do
63424: LD_ADDR_VAR 0 1
63428: PUSH
63429: LD_VAR 0 2
63433: PUSH
63434: FOR_IN
63435: IFFALSE 63471
// begin if Crawls ( i ) then
63437: LD_VAR 0 1
63441: PPUSH
63442: CALL_OW 318
63446: IFFALSE 63457
// ComWalk ( i ) ;
63448: LD_VAR 0 1
63452: PPUSH
63453: CALL_OW 138
// SetClass ( i , 2 ) ;
63457: LD_VAR 0 1
63461: PPUSH
63462: LD_INT 2
63464: PPUSH
63465: CALL_OW 336
// end ;
63469: GO 63434
63471: POP
63472: POP
// end ;
63473: PPOPN 2
63475: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63476: LD_EXP 43
63480: PUSH
63481: LD_EXP 96
63485: AND
63486: IFFALSE 63774
63488: GO 63490
63490: DISABLE
63491: LD_INT 0
63493: PPUSH
63494: PPUSH
63495: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63496: LD_OWVAR 2
63500: PPUSH
63501: LD_INT 9
63503: PPUSH
63504: LD_INT 1
63506: PPUSH
63507: LD_INT 1
63509: PPUSH
63510: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63514: LD_INT 9
63516: PPUSH
63517: LD_OWVAR 2
63521: PPUSH
63522: CALL_OW 343
// uc_side := 9 ;
63526: LD_ADDR_OWVAR 20
63530: PUSH
63531: LD_INT 9
63533: ST_TO_ADDR
// uc_nation := 2 ;
63534: LD_ADDR_OWVAR 21
63538: PUSH
63539: LD_INT 2
63541: ST_TO_ADDR
// hc_name := Dark Warrior ;
63542: LD_ADDR_OWVAR 26
63546: PUSH
63547: LD_STRING Dark Warrior
63549: ST_TO_ADDR
// hc_gallery :=  ;
63550: LD_ADDR_OWVAR 33
63554: PUSH
63555: LD_STRING 
63557: ST_TO_ADDR
// hc_noskilllimit := true ;
63558: LD_ADDR_OWVAR 76
63562: PUSH
63563: LD_INT 1
63565: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63566: LD_ADDR_OWVAR 31
63570: PUSH
63571: LD_INT 30
63573: PUSH
63574: LD_INT 30
63576: PUSH
63577: LD_INT 30
63579: PUSH
63580: LD_INT 30
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: ST_TO_ADDR
// un := CreateHuman ;
63589: LD_ADDR_VAR 0 3
63593: PUSH
63594: CALL_OW 44
63598: ST_TO_ADDR
// hc_noskilllimit := false ;
63599: LD_ADDR_OWVAR 76
63603: PUSH
63604: LD_INT 0
63606: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63607: LD_VAR 0 3
63611: PPUSH
63612: LD_INT 1
63614: PPUSH
63615: CALL_OW 51
// ToLua ( playRanger() ) ;
63619: LD_STRING playRanger()
63621: PPUSH
63622: CALL_OW 559
// p := 0 ;
63626: LD_ADDR_VAR 0 2
63630: PUSH
63631: LD_INT 0
63633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63634: LD_INT 35
63636: PPUSH
63637: CALL_OW 67
// p := p + 1 ;
63641: LD_ADDR_VAR 0 2
63645: PUSH
63646: LD_VAR 0 2
63650: PUSH
63651: LD_INT 1
63653: PLUS
63654: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63655: LD_VAR 0 3
63659: PPUSH
63660: CALL_OW 256
63664: PUSH
63665: LD_INT 1000
63667: LESS
63668: IFFALSE 63682
// SetLives ( un , 1000 ) ;
63670: LD_VAR 0 3
63674: PPUSH
63675: LD_INT 1000
63677: PPUSH
63678: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63682: LD_VAR 0 3
63686: PPUSH
63687: LD_INT 81
63689: PUSH
63690: LD_OWVAR 2
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 91
63701: PUSH
63702: LD_VAR 0 3
63706: PUSH
63707: LD_INT 30
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: LIST
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PPUSH
63719: CALL_OW 69
63723: PPUSH
63724: LD_VAR 0 3
63728: PPUSH
63729: CALL_OW 74
63733: PPUSH
63734: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63738: LD_VAR 0 2
63742: PUSH
63743: LD_INT 80
63745: GREATER
63746: PUSH
63747: LD_VAR 0 3
63751: PPUSH
63752: CALL_OW 301
63756: OR
63757: IFFALSE 63634
// if un then
63759: LD_VAR 0 3
63763: IFFALSE 63774
// RemoveUnit ( un ) ;
63765: LD_VAR 0 3
63769: PPUSH
63770: CALL_OW 64
// end ;
63774: PPOPN 3
63776: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63777: LD_EXP 97
63781: IFFALSE 63897
63783: GO 63785
63785: DISABLE
63786: LD_INT 0
63788: PPUSH
63789: PPUSH
63790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63791: LD_ADDR_VAR 0 2
63795: PUSH
63796: LD_INT 81
63798: PUSH
63799: LD_OWVAR 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 21
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PPUSH
63822: CALL_OW 69
63826: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63827: LD_STRING playComputer()
63829: PPUSH
63830: CALL_OW 559
// if not tmp then
63834: LD_VAR 0 2
63838: NOT
63839: IFFALSE 63843
// exit ;
63841: GO 63897
// for i in tmp do
63843: LD_ADDR_VAR 0 1
63847: PUSH
63848: LD_VAR 0 2
63852: PUSH
63853: FOR_IN
63854: IFFALSE 63895
// for j := 1 to 4 do
63856: LD_ADDR_VAR 0 3
63860: PUSH
63861: DOUBLE
63862: LD_INT 1
63864: DEC
63865: ST_TO_ADDR
63866: LD_INT 4
63868: PUSH
63869: FOR_TO
63870: IFFALSE 63891
// SetSkill ( i , j , 10 ) ;
63872: LD_VAR 0 1
63876: PPUSH
63877: LD_VAR 0 3
63881: PPUSH
63882: LD_INT 10
63884: PPUSH
63885: CALL_OW 237
63889: GO 63869
63891: POP
63892: POP
63893: GO 63853
63895: POP
63896: POP
// end ;
63897: PPOPN 3
63899: END
// every 0 0$1 trigger s30 do var i , tmp ;
63900: LD_EXP 98
63904: IFFALSE 63973
63906: GO 63908
63908: DISABLE
63909: LD_INT 0
63911: PPUSH
63912: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63913: LD_ADDR_VAR 0 2
63917: PUSH
63918: LD_INT 22
63920: PUSH
63921: LD_OWVAR 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PPUSH
63930: CALL_OW 69
63934: ST_TO_ADDR
// if not tmp then
63935: LD_VAR 0 2
63939: NOT
63940: IFFALSE 63944
// exit ;
63942: GO 63973
// for i in tmp do
63944: LD_ADDR_VAR 0 1
63948: PUSH
63949: LD_VAR 0 2
63953: PUSH
63954: FOR_IN
63955: IFFALSE 63971
// SetLives ( i , 300 ) ;
63957: LD_VAR 0 1
63961: PPUSH
63962: LD_INT 300
63964: PPUSH
63965: CALL_OW 234
63969: GO 63954
63971: POP
63972: POP
// end ;
63973: PPOPN 2
63975: END
// every 0 0$1 trigger s60 do var i , tmp ;
63976: LD_EXP 99
63980: IFFALSE 64049
63982: GO 63984
63984: DISABLE
63985: LD_INT 0
63987: PPUSH
63988: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63989: LD_ADDR_VAR 0 2
63993: PUSH
63994: LD_INT 22
63996: PUSH
63997: LD_OWVAR 2
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PPUSH
64006: CALL_OW 69
64010: ST_TO_ADDR
// if not tmp then
64011: LD_VAR 0 2
64015: NOT
64016: IFFALSE 64020
// exit ;
64018: GO 64049
// for i in tmp do
64020: LD_ADDR_VAR 0 1
64024: PUSH
64025: LD_VAR 0 2
64029: PUSH
64030: FOR_IN
64031: IFFALSE 64047
// SetLives ( i , 600 ) ;
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_INT 600
64040: PPUSH
64041: CALL_OW 234
64045: GO 64030
64047: POP
64048: POP
// end ;
64049: PPOPN 2
64051: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64052: LD_INT 0
64054: PPUSH
// case cmd of 301 :
64055: LD_VAR 0 1
64059: PUSH
64060: LD_INT 301
64062: DOUBLE
64063: EQUAL
64064: IFTRUE 64068
64066: GO 64100
64068: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64069: LD_VAR 0 6
64073: PPUSH
64074: LD_VAR 0 7
64078: PPUSH
64079: LD_VAR 0 8
64083: PPUSH
64084: LD_VAR 0 4
64088: PPUSH
64089: LD_VAR 0 5
64093: PPUSH
64094: CALL 65309 0 5
64098: GO 64221
64100: LD_INT 302
64102: DOUBLE
64103: EQUAL
64104: IFTRUE 64108
64106: GO 64145
64108: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64109: LD_VAR 0 6
64113: PPUSH
64114: LD_VAR 0 7
64118: PPUSH
64119: LD_VAR 0 8
64123: PPUSH
64124: LD_VAR 0 9
64128: PPUSH
64129: LD_VAR 0 4
64133: PPUSH
64134: LD_VAR 0 5
64138: PPUSH
64139: CALL 65400 0 6
64143: GO 64221
64145: LD_INT 303
64147: DOUBLE
64148: EQUAL
64149: IFTRUE 64153
64151: GO 64190
64153: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64154: LD_VAR 0 6
64158: PPUSH
64159: LD_VAR 0 7
64163: PPUSH
64164: LD_VAR 0 8
64168: PPUSH
64169: LD_VAR 0 9
64173: PPUSH
64174: LD_VAR 0 4
64178: PPUSH
64179: LD_VAR 0 5
64183: PPUSH
64184: CALL 64226 0 6
64188: GO 64221
64190: LD_INT 304
64192: DOUBLE
64193: EQUAL
64194: IFTRUE 64198
64196: GO 64220
64198: POP
// hHackTeleport ( unit , x , y ) ; end ;
64199: LD_VAR 0 2
64203: PPUSH
64204: LD_VAR 0 4
64208: PPUSH
64209: LD_VAR 0 5
64213: PPUSH
64214: CALL 65993 0 3
64218: GO 64221
64220: POP
// end ;
64221: LD_VAR 0 12
64225: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64226: LD_INT 0
64228: PPUSH
64229: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64230: LD_VAR 0 1
64234: PUSH
64235: LD_INT 1
64237: LESS
64238: PUSH
64239: LD_VAR 0 1
64243: PUSH
64244: LD_INT 3
64246: GREATER
64247: OR
64248: PUSH
64249: LD_VAR 0 5
64253: PPUSH
64254: LD_VAR 0 6
64258: PPUSH
64259: CALL_OW 428
64263: OR
64264: IFFALSE 64268
// exit ;
64266: GO 64996
// uc_side := your_side ;
64268: LD_ADDR_OWVAR 20
64272: PUSH
64273: LD_OWVAR 2
64277: ST_TO_ADDR
// uc_nation := nation ;
64278: LD_ADDR_OWVAR 21
64282: PUSH
64283: LD_VAR 0 1
64287: ST_TO_ADDR
// bc_level = 1 ;
64288: LD_ADDR_OWVAR 43
64292: PUSH
64293: LD_INT 1
64295: ST_TO_ADDR
// case btype of 1 :
64296: LD_VAR 0 2
64300: PUSH
64301: LD_INT 1
64303: DOUBLE
64304: EQUAL
64305: IFTRUE 64309
64307: GO 64320
64309: POP
// bc_type := b_depot ; 2 :
64310: LD_ADDR_OWVAR 42
64314: PUSH
64315: LD_INT 0
64317: ST_TO_ADDR
64318: GO 64940
64320: LD_INT 2
64322: DOUBLE
64323: EQUAL
64324: IFTRUE 64328
64326: GO 64339
64328: POP
// bc_type := b_warehouse ; 3 :
64329: LD_ADDR_OWVAR 42
64333: PUSH
64334: LD_INT 1
64336: ST_TO_ADDR
64337: GO 64940
64339: LD_INT 3
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64347
64345: GO 64358
64347: POP
// bc_type := b_lab ; 4 .. 9 :
64348: LD_ADDR_OWVAR 42
64352: PUSH
64353: LD_INT 6
64355: ST_TO_ADDR
64356: GO 64940
64358: LD_INT 4
64360: DOUBLE
64361: GREATEREQUAL
64362: IFFALSE 64370
64364: LD_INT 9
64366: DOUBLE
64367: LESSEQUAL
64368: IFTRUE 64372
64370: GO 64432
64372: POP
// begin bc_type := b_lab_half ;
64373: LD_ADDR_OWVAR 42
64377: PUSH
64378: LD_INT 7
64380: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64381: LD_ADDR_OWVAR 44
64385: PUSH
64386: LD_INT 10
64388: PUSH
64389: LD_INT 11
64391: PUSH
64392: LD_INT 12
64394: PUSH
64395: LD_INT 15
64397: PUSH
64398: LD_INT 14
64400: PUSH
64401: LD_INT 13
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_INT 3
64419: MINUS
64420: ARRAY
64421: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
64422: LD_ADDR_OWVAR 45
64426: PUSH
64427: LD_INT 9
64429: ST_TO_ADDR
// end ; 10 .. 13 :
64430: GO 64940
64432: LD_INT 10
64434: DOUBLE
64435: GREATEREQUAL
64436: IFFALSE 64444
64438: LD_INT 13
64440: DOUBLE
64441: LESSEQUAL
64442: IFTRUE 64446
64444: GO 64523
64446: POP
// begin bc_type := b_lab_full ;
64447: LD_ADDR_OWVAR 42
64451: PUSH
64452: LD_INT 8
64454: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64455: LD_ADDR_OWVAR 44
64459: PUSH
64460: LD_INT 10
64462: PUSH
64463: LD_INT 12
64465: PUSH
64466: LD_INT 14
64468: PUSH
64469: LD_INT 13
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: LD_VAR 0 2
64482: PUSH
64483: LD_INT 9
64485: MINUS
64486: ARRAY
64487: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64488: LD_ADDR_OWVAR 45
64492: PUSH
64493: LD_INT 11
64495: PUSH
64496: LD_INT 15
64498: PUSH
64499: LD_INT 12
64501: PUSH
64502: LD_INT 15
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: PUSH
64511: LD_VAR 0 2
64515: PUSH
64516: LD_INT 9
64518: MINUS
64519: ARRAY
64520: ST_TO_ADDR
// end ; 14 :
64521: GO 64940
64523: LD_INT 14
64525: DOUBLE
64526: EQUAL
64527: IFTRUE 64531
64529: GO 64542
64531: POP
// bc_type := b_workshop ; 15 :
64532: LD_ADDR_OWVAR 42
64536: PUSH
64537: LD_INT 2
64539: ST_TO_ADDR
64540: GO 64940
64542: LD_INT 15
64544: DOUBLE
64545: EQUAL
64546: IFTRUE 64550
64548: GO 64561
64550: POP
// bc_type := b_factory ; 16 :
64551: LD_ADDR_OWVAR 42
64555: PUSH
64556: LD_INT 3
64558: ST_TO_ADDR
64559: GO 64940
64561: LD_INT 16
64563: DOUBLE
64564: EQUAL
64565: IFTRUE 64569
64567: GO 64580
64569: POP
// bc_type := b_ext_gun ; 17 :
64570: LD_ADDR_OWVAR 42
64574: PUSH
64575: LD_INT 17
64577: ST_TO_ADDR
64578: GO 64940
64580: LD_INT 17
64582: DOUBLE
64583: EQUAL
64584: IFTRUE 64588
64586: GO 64616
64588: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64589: LD_ADDR_OWVAR 42
64593: PUSH
64594: LD_INT 19
64596: PUSH
64597: LD_INT 23
64599: PUSH
64600: LD_INT 19
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: PUSH
64608: LD_VAR 0 1
64612: ARRAY
64613: ST_TO_ADDR
64614: GO 64940
64616: LD_INT 18
64618: DOUBLE
64619: EQUAL
64620: IFTRUE 64624
64622: GO 64635
64624: POP
// bc_type := b_ext_radar ; 19 :
64625: LD_ADDR_OWVAR 42
64629: PUSH
64630: LD_INT 20
64632: ST_TO_ADDR
64633: GO 64940
64635: LD_INT 19
64637: DOUBLE
64638: EQUAL
64639: IFTRUE 64643
64641: GO 64654
64643: POP
// bc_type := b_ext_radio ; 20 :
64644: LD_ADDR_OWVAR 42
64648: PUSH
64649: LD_INT 22
64651: ST_TO_ADDR
64652: GO 64940
64654: LD_INT 20
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64662
64660: GO 64673
64662: POP
// bc_type := b_ext_siberium ; 21 :
64663: LD_ADDR_OWVAR 42
64667: PUSH
64668: LD_INT 21
64670: ST_TO_ADDR
64671: GO 64940
64673: LD_INT 21
64675: DOUBLE
64676: EQUAL
64677: IFTRUE 64681
64679: GO 64692
64681: POP
// bc_type := b_ext_computer ; 22 :
64682: LD_ADDR_OWVAR 42
64686: PUSH
64687: LD_INT 24
64689: ST_TO_ADDR
64690: GO 64940
64692: LD_INT 22
64694: DOUBLE
64695: EQUAL
64696: IFTRUE 64700
64698: GO 64711
64700: POP
// bc_type := b_ext_track ; 23 :
64701: LD_ADDR_OWVAR 42
64705: PUSH
64706: LD_INT 16
64708: ST_TO_ADDR
64709: GO 64940
64711: LD_INT 23
64713: DOUBLE
64714: EQUAL
64715: IFTRUE 64719
64717: GO 64730
64719: POP
// bc_type := b_ext_laser ; 24 :
64720: LD_ADDR_OWVAR 42
64724: PUSH
64725: LD_INT 25
64727: ST_TO_ADDR
64728: GO 64940
64730: LD_INT 24
64732: DOUBLE
64733: EQUAL
64734: IFTRUE 64738
64736: GO 64749
64738: POP
// bc_type := b_control_tower ; 25 :
64739: LD_ADDR_OWVAR 42
64743: PUSH
64744: LD_INT 36
64746: ST_TO_ADDR
64747: GO 64940
64749: LD_INT 25
64751: DOUBLE
64752: EQUAL
64753: IFTRUE 64757
64755: GO 64768
64757: POP
// bc_type := b_breastwork ; 26 :
64758: LD_ADDR_OWVAR 42
64762: PUSH
64763: LD_INT 31
64765: ST_TO_ADDR
64766: GO 64940
64768: LD_INT 26
64770: DOUBLE
64771: EQUAL
64772: IFTRUE 64776
64774: GO 64787
64776: POP
// bc_type := b_bunker ; 27 :
64777: LD_ADDR_OWVAR 42
64781: PUSH
64782: LD_INT 32
64784: ST_TO_ADDR
64785: GO 64940
64787: LD_INT 27
64789: DOUBLE
64790: EQUAL
64791: IFTRUE 64795
64793: GO 64806
64795: POP
// bc_type := b_turret ; 28 :
64796: LD_ADDR_OWVAR 42
64800: PUSH
64801: LD_INT 33
64803: ST_TO_ADDR
64804: GO 64940
64806: LD_INT 28
64808: DOUBLE
64809: EQUAL
64810: IFTRUE 64814
64812: GO 64825
64814: POP
// bc_type := b_armoury ; 29 :
64815: LD_ADDR_OWVAR 42
64819: PUSH
64820: LD_INT 4
64822: ST_TO_ADDR
64823: GO 64940
64825: LD_INT 29
64827: DOUBLE
64828: EQUAL
64829: IFTRUE 64833
64831: GO 64844
64833: POP
// bc_type := b_barracks ; 30 :
64834: LD_ADDR_OWVAR 42
64838: PUSH
64839: LD_INT 5
64841: ST_TO_ADDR
64842: GO 64940
64844: LD_INT 30
64846: DOUBLE
64847: EQUAL
64848: IFTRUE 64852
64850: GO 64863
64852: POP
// bc_type := b_solar_power ; 31 :
64853: LD_ADDR_OWVAR 42
64857: PUSH
64858: LD_INT 27
64860: ST_TO_ADDR
64861: GO 64940
64863: LD_INT 31
64865: DOUBLE
64866: EQUAL
64867: IFTRUE 64871
64869: GO 64882
64871: POP
// bc_type := b_oil_power ; 32 :
64872: LD_ADDR_OWVAR 42
64876: PUSH
64877: LD_INT 26
64879: ST_TO_ADDR
64880: GO 64940
64882: LD_INT 32
64884: DOUBLE
64885: EQUAL
64886: IFTRUE 64890
64888: GO 64901
64890: POP
// bc_type := b_siberite_power ; 33 :
64891: LD_ADDR_OWVAR 42
64895: PUSH
64896: LD_INT 28
64898: ST_TO_ADDR
64899: GO 64940
64901: LD_INT 33
64903: DOUBLE
64904: EQUAL
64905: IFTRUE 64909
64907: GO 64920
64909: POP
// bc_type := b_oil_mine ; 34 :
64910: LD_ADDR_OWVAR 42
64914: PUSH
64915: LD_INT 29
64917: ST_TO_ADDR
64918: GO 64940
64920: LD_INT 34
64922: DOUBLE
64923: EQUAL
64924: IFTRUE 64928
64926: GO 64939
64928: POP
// bc_type := b_siberite_mine ; end ;
64929: LD_ADDR_OWVAR 42
64933: PUSH
64934: LD_INT 30
64936: ST_TO_ADDR
64937: GO 64940
64939: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64940: LD_ADDR_VAR 0 8
64944: PUSH
64945: LD_VAR 0 5
64949: PPUSH
64950: LD_VAR 0 6
64954: PPUSH
64955: LD_VAR 0 3
64959: PPUSH
64960: CALL_OW 47
64964: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64965: LD_OWVAR 42
64969: PUSH
64970: LD_INT 32
64972: PUSH
64973: LD_INT 33
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: IN
64980: IFFALSE 64996
// PlaceWeaponTurret ( b , weapon ) ;
64982: LD_VAR 0 8
64986: PPUSH
64987: LD_VAR 0 4
64991: PPUSH
64992: CALL_OW 431
// end ;
64996: LD_VAR 0 7
65000: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65001: LD_INT 0
65003: PPUSH
65004: PPUSH
65005: PPUSH
65006: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65007: LD_ADDR_VAR 0 4
65011: PUSH
65012: LD_INT 22
65014: PUSH
65015: LD_OWVAR 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: LD_INT 30
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 30
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PPUSH
65056: CALL_OW 69
65060: ST_TO_ADDR
// if not tmp then
65061: LD_VAR 0 4
65065: NOT
65066: IFFALSE 65070
// exit ;
65068: GO 65129
// for i in tmp do
65070: LD_ADDR_VAR 0 2
65074: PUSH
65075: LD_VAR 0 4
65079: PUSH
65080: FOR_IN
65081: IFFALSE 65127
// for j = 1 to 3 do
65083: LD_ADDR_VAR 0 3
65087: PUSH
65088: DOUBLE
65089: LD_INT 1
65091: DEC
65092: ST_TO_ADDR
65093: LD_INT 3
65095: PUSH
65096: FOR_TO
65097: IFFALSE 65123
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65099: LD_VAR 0 2
65103: PPUSH
65104: CALL_OW 274
65108: PPUSH
65109: LD_VAR 0 3
65113: PPUSH
65114: LD_INT 99999
65116: PPUSH
65117: CALL_OW 277
65121: GO 65096
65123: POP
65124: POP
65125: GO 65080
65127: POP
65128: POP
// end ;
65129: LD_VAR 0 1
65133: RET
// export function hHackSetLevel10 ; var i , j ; begin
65134: LD_INT 0
65136: PPUSH
65137: PPUSH
65138: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65139: LD_ADDR_VAR 0 2
65143: PUSH
65144: LD_INT 21
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PPUSH
65154: CALL_OW 69
65158: PUSH
65159: FOR_IN
65160: IFFALSE 65212
// if IsSelected ( i ) then
65162: LD_VAR 0 2
65166: PPUSH
65167: CALL_OW 306
65171: IFFALSE 65210
// begin for j := 1 to 4 do
65173: LD_ADDR_VAR 0 3
65177: PUSH
65178: DOUBLE
65179: LD_INT 1
65181: DEC
65182: ST_TO_ADDR
65183: LD_INT 4
65185: PUSH
65186: FOR_TO
65187: IFFALSE 65208
// SetSkill ( i , j , 10 ) ;
65189: LD_VAR 0 2
65193: PPUSH
65194: LD_VAR 0 3
65198: PPUSH
65199: LD_INT 10
65201: PPUSH
65202: CALL_OW 237
65206: GO 65186
65208: POP
65209: POP
// end ;
65210: GO 65159
65212: POP
65213: POP
// end ;
65214: LD_VAR 0 1
65218: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65219: LD_INT 0
65221: PPUSH
65222: PPUSH
65223: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65224: LD_ADDR_VAR 0 2
65228: PUSH
65229: LD_INT 22
65231: PUSH
65232: LD_OWVAR 2
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 21
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PPUSH
65255: CALL_OW 69
65259: PUSH
65260: FOR_IN
65261: IFFALSE 65302
// begin for j := 1 to 4 do
65263: LD_ADDR_VAR 0 3
65267: PUSH
65268: DOUBLE
65269: LD_INT 1
65271: DEC
65272: ST_TO_ADDR
65273: LD_INT 4
65275: PUSH
65276: FOR_TO
65277: IFFALSE 65298
// SetSkill ( i , j , 10 ) ;
65279: LD_VAR 0 2
65283: PPUSH
65284: LD_VAR 0 3
65288: PPUSH
65289: LD_INT 10
65291: PPUSH
65292: CALL_OW 237
65296: GO 65276
65298: POP
65299: POP
// end ;
65300: GO 65260
65302: POP
65303: POP
// end ;
65304: LD_VAR 0 1
65308: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65309: LD_INT 0
65311: PPUSH
// uc_side := your_side ;
65312: LD_ADDR_OWVAR 20
65316: PUSH
65317: LD_OWVAR 2
65321: ST_TO_ADDR
// uc_nation := nation ;
65322: LD_ADDR_OWVAR 21
65326: PUSH
65327: LD_VAR 0 1
65331: ST_TO_ADDR
// InitHc ;
65332: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65336: LD_INT 0
65338: PPUSH
65339: LD_VAR 0 2
65343: PPUSH
65344: LD_VAR 0 3
65348: PPUSH
65349: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65353: LD_VAR 0 4
65357: PPUSH
65358: LD_VAR 0 5
65362: PPUSH
65363: CALL_OW 428
65367: PUSH
65368: LD_INT 0
65370: EQUAL
65371: IFFALSE 65395
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65373: CALL_OW 44
65377: PPUSH
65378: LD_VAR 0 4
65382: PPUSH
65383: LD_VAR 0 5
65387: PPUSH
65388: LD_INT 1
65390: PPUSH
65391: CALL_OW 48
// end ;
65395: LD_VAR 0 6
65399: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65400: LD_INT 0
65402: PPUSH
65403: PPUSH
// uc_side := your_side ;
65404: LD_ADDR_OWVAR 20
65408: PUSH
65409: LD_OWVAR 2
65413: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65414: LD_VAR 0 1
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: LD_INT 2
65424: PUSH
65425: LD_INT 3
65427: PUSH
65428: LD_INT 4
65430: PUSH
65431: LD_INT 5
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: IN
65441: IFFALSE 65453
// uc_nation := nation_american else
65443: LD_ADDR_OWVAR 21
65447: PUSH
65448: LD_INT 1
65450: ST_TO_ADDR
65451: GO 65496
// if chassis in [ 11 , 12 , 13 , 14 ] then
65453: LD_VAR 0 1
65457: PUSH
65458: LD_INT 11
65460: PUSH
65461: LD_INT 12
65463: PUSH
65464: LD_INT 13
65466: PUSH
65467: LD_INT 14
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: IN
65476: IFFALSE 65488
// uc_nation := nation_arabian else
65478: LD_ADDR_OWVAR 21
65482: PUSH
65483: LD_INT 2
65485: ST_TO_ADDR
65486: GO 65496
// uc_nation := nation_russian ;
65488: LD_ADDR_OWVAR 21
65492: PUSH
65493: LD_INT 3
65495: ST_TO_ADDR
// vc_chassis := chassis ;
65496: LD_ADDR_OWVAR 37
65500: PUSH
65501: LD_VAR 0 1
65505: ST_TO_ADDR
// vc_engine := engine ;
65506: LD_ADDR_OWVAR 39
65510: PUSH
65511: LD_VAR 0 2
65515: ST_TO_ADDR
// vc_control := control ;
65516: LD_ADDR_OWVAR 38
65520: PUSH
65521: LD_VAR 0 3
65525: ST_TO_ADDR
// vc_weapon := weapon ;
65526: LD_ADDR_OWVAR 40
65530: PUSH
65531: LD_VAR 0 4
65535: ST_TO_ADDR
// un := CreateVehicle ;
65536: LD_ADDR_VAR 0 8
65540: PUSH
65541: CALL_OW 45
65545: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65546: LD_VAR 0 8
65550: PPUSH
65551: LD_INT 0
65553: PPUSH
65554: LD_INT 5
65556: PPUSH
65557: CALL_OW 12
65561: PPUSH
65562: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65566: LD_VAR 0 8
65570: PPUSH
65571: LD_VAR 0 5
65575: PPUSH
65576: LD_VAR 0 6
65580: PPUSH
65581: LD_INT 1
65583: PPUSH
65584: CALL_OW 48
// end ;
65588: LD_VAR 0 7
65592: RET
// export hInvincible ; every 1 do
65593: GO 65595
65595: DISABLE
// hInvincible := [ ] ;
65596: LD_ADDR_EXP 100
65600: PUSH
65601: EMPTY
65602: ST_TO_ADDR
65603: END
// every 10 do var i ;
65604: GO 65606
65606: DISABLE
65607: LD_INT 0
65609: PPUSH
// begin enable ;
65610: ENABLE
// if not hInvincible then
65611: LD_EXP 100
65615: NOT
65616: IFFALSE 65620
// exit ;
65618: GO 65664
// for i in hInvincible do
65620: LD_ADDR_VAR 0 1
65624: PUSH
65625: LD_EXP 100
65629: PUSH
65630: FOR_IN
65631: IFFALSE 65662
// if GetLives ( i ) < 1000 then
65633: LD_VAR 0 1
65637: PPUSH
65638: CALL_OW 256
65642: PUSH
65643: LD_INT 1000
65645: LESS
65646: IFFALSE 65660
// SetLives ( i , 1000 ) ;
65648: LD_VAR 0 1
65652: PPUSH
65653: LD_INT 1000
65655: PPUSH
65656: CALL_OW 234
65660: GO 65630
65662: POP
65663: POP
// end ;
65664: PPOPN 1
65666: END
// export function hHackInvincible ; var i ; begin
65667: LD_INT 0
65669: PPUSH
65670: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65671: LD_ADDR_VAR 0 2
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: LD_INT 21
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 21
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: LIST
65703: PPUSH
65704: CALL_OW 69
65708: PUSH
65709: FOR_IN
65710: IFFALSE 65771
// if IsSelected ( i ) then
65712: LD_VAR 0 2
65716: PPUSH
65717: CALL_OW 306
65721: IFFALSE 65769
// begin if i in hInvincible then
65723: LD_VAR 0 2
65727: PUSH
65728: LD_EXP 100
65732: IN
65733: IFFALSE 65753
// hInvincible := hInvincible diff i else
65735: LD_ADDR_EXP 100
65739: PUSH
65740: LD_EXP 100
65744: PUSH
65745: LD_VAR 0 2
65749: DIFF
65750: ST_TO_ADDR
65751: GO 65769
// hInvincible := hInvincible union i ;
65753: LD_ADDR_EXP 100
65757: PUSH
65758: LD_EXP 100
65762: PUSH
65763: LD_VAR 0 2
65767: UNION
65768: ST_TO_ADDR
// end ;
65769: GO 65709
65771: POP
65772: POP
// end ;
65773: LD_VAR 0 1
65777: RET
// export function hHackInvisible ; var i , j ; begin
65778: LD_INT 0
65780: PPUSH
65781: PPUSH
65782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65783: LD_ADDR_VAR 0 2
65787: PUSH
65788: LD_INT 21
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PPUSH
65798: CALL_OW 69
65802: PUSH
65803: FOR_IN
65804: IFFALSE 65828
// if IsSelected ( i ) then
65806: LD_VAR 0 2
65810: PPUSH
65811: CALL_OW 306
65815: IFFALSE 65826
// ComForceInvisible ( i ) ;
65817: LD_VAR 0 2
65821: PPUSH
65822: CALL_OW 496
65826: GO 65803
65828: POP
65829: POP
// end ;
65830: LD_VAR 0 1
65834: RET
// export function hHackChangeYourSide ; begin
65835: LD_INT 0
65837: PPUSH
// if your_side = 8 then
65838: LD_OWVAR 2
65842: PUSH
65843: LD_INT 8
65845: EQUAL
65846: IFFALSE 65858
// your_side := 0 else
65848: LD_ADDR_OWVAR 2
65852: PUSH
65853: LD_INT 0
65855: ST_TO_ADDR
65856: GO 65872
// your_side := your_side + 1 ;
65858: LD_ADDR_OWVAR 2
65862: PUSH
65863: LD_OWVAR 2
65867: PUSH
65868: LD_INT 1
65870: PLUS
65871: ST_TO_ADDR
// end ;
65872: LD_VAR 0 1
65876: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65877: LD_INT 0
65879: PPUSH
65880: PPUSH
65881: PPUSH
// for i in all_units do
65882: LD_ADDR_VAR 0 2
65886: PUSH
65887: LD_OWVAR 3
65891: PUSH
65892: FOR_IN
65893: IFFALSE 65971
// if IsSelected ( i ) then
65895: LD_VAR 0 2
65899: PPUSH
65900: CALL_OW 306
65904: IFFALSE 65969
// begin j := GetSide ( i ) ;
65906: LD_ADDR_VAR 0 3
65910: PUSH
65911: LD_VAR 0 2
65915: PPUSH
65916: CALL_OW 255
65920: ST_TO_ADDR
// if j = 8 then
65921: LD_VAR 0 3
65925: PUSH
65926: LD_INT 8
65928: EQUAL
65929: IFFALSE 65941
// j := 0 else
65931: LD_ADDR_VAR 0 3
65935: PUSH
65936: LD_INT 0
65938: ST_TO_ADDR
65939: GO 65955
// j := j + 1 ;
65941: LD_ADDR_VAR 0 3
65945: PUSH
65946: LD_VAR 0 3
65950: PUSH
65951: LD_INT 1
65953: PLUS
65954: ST_TO_ADDR
// SetSide ( i , j ) ;
65955: LD_VAR 0 2
65959: PPUSH
65960: LD_VAR 0 3
65964: PPUSH
65965: CALL_OW 235
// end ;
65969: GO 65892
65971: POP
65972: POP
// end ;
65973: LD_VAR 0 1
65977: RET
// export function hHackFog ; begin
65978: LD_INT 0
65980: PPUSH
// FogOff ( true ) ;
65981: LD_INT 1
65983: PPUSH
65984: CALL_OW 344
// end ;
65988: LD_VAR 0 1
65992: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65993: LD_INT 0
65995: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65996: LD_VAR 0 1
66000: PPUSH
66001: LD_VAR 0 2
66005: PPUSH
66006: LD_VAR 0 3
66010: PPUSH
66011: LD_INT 1
66013: PPUSH
66014: LD_INT 1
66016: PPUSH
66017: CALL_OW 483
// CenterOnXY ( x , y ) ;
66021: LD_VAR 0 2
66025: PPUSH
66026: LD_VAR 0 3
66030: PPUSH
66031: CALL_OW 84
// end ;
66035: LD_VAR 0 4
66039: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66040: LD_INT 0
66042: PPUSH
66043: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66044: LD_VAR 0 1
66048: NOT
66049: PUSH
66050: LD_VAR 0 2
66054: PPUSH
66055: LD_VAR 0 3
66059: PPUSH
66060: CALL_OW 488
66064: NOT
66065: OR
66066: PUSH
66067: LD_VAR 0 1
66071: PPUSH
66072: CALL_OW 266
66076: PUSH
66077: LD_INT 3
66079: NONEQUAL
66080: PUSH
66081: LD_VAR 0 1
66085: PPUSH
66086: CALL_OW 247
66090: PUSH
66091: LD_INT 1
66093: EQUAL
66094: NOT
66095: AND
66096: OR
66097: IFFALSE 66101
// exit ;
66099: GO 66250
// if GetType ( factory ) = unit_human then
66101: LD_VAR 0 1
66105: PPUSH
66106: CALL_OW 247
66110: PUSH
66111: LD_INT 1
66113: EQUAL
66114: IFFALSE 66131
// factory := IsInUnit ( factory ) ;
66116: LD_ADDR_VAR 0 1
66120: PUSH
66121: LD_VAR 0 1
66125: PPUSH
66126: CALL_OW 310
66130: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66131: LD_VAR 0 1
66135: PPUSH
66136: CALL_OW 266
66140: PUSH
66141: LD_INT 3
66143: NONEQUAL
66144: IFFALSE 66148
// exit ;
66146: GO 66250
// if HexInfo ( x , y ) = factory then
66148: LD_VAR 0 2
66152: PPUSH
66153: LD_VAR 0 3
66157: PPUSH
66158: CALL_OW 428
66162: PUSH
66163: LD_VAR 0 1
66167: EQUAL
66168: IFFALSE 66195
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66170: LD_ADDR_EXP 101
66174: PUSH
66175: LD_EXP 101
66179: PPUSH
66180: LD_VAR 0 1
66184: PPUSH
66185: LD_INT 0
66187: PPUSH
66188: CALL_OW 1
66192: ST_TO_ADDR
66193: GO 66246
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66195: LD_ADDR_EXP 101
66199: PUSH
66200: LD_EXP 101
66204: PPUSH
66205: LD_VAR 0 1
66209: PPUSH
66210: LD_VAR 0 1
66214: PPUSH
66215: CALL_OW 255
66219: PUSH
66220: LD_VAR 0 1
66224: PUSH
66225: LD_VAR 0 2
66229: PUSH
66230: LD_VAR 0 3
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: PPUSH
66241: CALL_OW 1
66245: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66246: CALL 66255 0 0
// end ;
66250: LD_VAR 0 4
66254: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66255: LD_INT 0
66257: PPUSH
66258: PPUSH
66259: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66260: LD_STRING resetFactoryWaypoint();
66262: PPUSH
66263: CALL_OW 559
// if factoryWaypoints then
66267: LD_EXP 101
66271: IFFALSE 66397
// begin list := PrepareArray ( factoryWaypoints ) ;
66273: LD_ADDR_VAR 0 3
66277: PUSH
66278: LD_EXP 101
66282: PPUSH
66283: CALL 50151 0 1
66287: ST_TO_ADDR
// for i := 1 to list do
66288: LD_ADDR_VAR 0 2
66292: PUSH
66293: DOUBLE
66294: LD_INT 1
66296: DEC
66297: ST_TO_ADDR
66298: LD_VAR 0 3
66302: PUSH
66303: FOR_TO
66304: IFFALSE 66395
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66306: LD_STRING setFactoryWaypointXY(
66308: PUSH
66309: LD_VAR 0 3
66313: PUSH
66314: LD_VAR 0 2
66318: ARRAY
66319: PUSH
66320: LD_INT 1
66322: ARRAY
66323: STR
66324: PUSH
66325: LD_STRING ,
66327: STR
66328: PUSH
66329: LD_VAR 0 3
66333: PUSH
66334: LD_VAR 0 2
66338: ARRAY
66339: PUSH
66340: LD_INT 2
66342: ARRAY
66343: STR
66344: PUSH
66345: LD_STRING ,
66347: STR
66348: PUSH
66349: LD_VAR 0 3
66353: PUSH
66354: LD_VAR 0 2
66358: ARRAY
66359: PUSH
66360: LD_INT 3
66362: ARRAY
66363: STR
66364: PUSH
66365: LD_STRING ,
66367: STR
66368: PUSH
66369: LD_VAR 0 3
66373: PUSH
66374: LD_VAR 0 2
66378: ARRAY
66379: PUSH
66380: LD_INT 4
66382: ARRAY
66383: STR
66384: PUSH
66385: LD_STRING )
66387: STR
66388: PPUSH
66389: CALL_OW 559
66393: GO 66303
66395: POP
66396: POP
// end ; end ;
66397: LD_VAR 0 1
66401: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66402: LD_INT 0
66404: PPUSH
// if HexInfo ( x , y ) = warehouse then
66405: LD_VAR 0 2
66409: PPUSH
66410: LD_VAR 0 3
66414: PPUSH
66415: CALL_OW 428
66419: PUSH
66420: LD_VAR 0 1
66424: EQUAL
66425: IFFALSE 66452
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66427: LD_ADDR_EXP 102
66431: PUSH
66432: LD_EXP 102
66436: PPUSH
66437: LD_VAR 0 1
66441: PPUSH
66442: LD_INT 0
66444: PPUSH
66445: CALL_OW 1
66449: ST_TO_ADDR
66450: GO 66503
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66452: LD_ADDR_EXP 102
66456: PUSH
66457: LD_EXP 102
66461: PPUSH
66462: LD_VAR 0 1
66466: PPUSH
66467: LD_VAR 0 1
66471: PPUSH
66472: CALL_OW 255
66476: PUSH
66477: LD_VAR 0 1
66481: PUSH
66482: LD_VAR 0 2
66486: PUSH
66487: LD_VAR 0 3
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: PPUSH
66498: CALL_OW 1
66502: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66503: CALL 66512 0 0
// end ;
66507: LD_VAR 0 4
66511: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66512: LD_INT 0
66514: PPUSH
66515: PPUSH
66516: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66517: LD_STRING resetWarehouseGatheringPoints();
66519: PPUSH
66520: CALL_OW 559
// if warehouseGatheringPoints then
66524: LD_EXP 102
66528: IFFALSE 66654
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66530: LD_ADDR_VAR 0 3
66534: PUSH
66535: LD_EXP 102
66539: PPUSH
66540: CALL 50151 0 1
66544: ST_TO_ADDR
// for i := 1 to list do
66545: LD_ADDR_VAR 0 2
66549: PUSH
66550: DOUBLE
66551: LD_INT 1
66553: DEC
66554: ST_TO_ADDR
66555: LD_VAR 0 3
66559: PUSH
66560: FOR_TO
66561: IFFALSE 66652
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66563: LD_STRING setWarehouseGatheringPointXY(
66565: PUSH
66566: LD_VAR 0 3
66570: PUSH
66571: LD_VAR 0 2
66575: ARRAY
66576: PUSH
66577: LD_INT 1
66579: ARRAY
66580: STR
66581: PUSH
66582: LD_STRING ,
66584: STR
66585: PUSH
66586: LD_VAR 0 3
66590: PUSH
66591: LD_VAR 0 2
66595: ARRAY
66596: PUSH
66597: LD_INT 2
66599: ARRAY
66600: STR
66601: PUSH
66602: LD_STRING ,
66604: STR
66605: PUSH
66606: LD_VAR 0 3
66610: PUSH
66611: LD_VAR 0 2
66615: ARRAY
66616: PUSH
66617: LD_INT 3
66619: ARRAY
66620: STR
66621: PUSH
66622: LD_STRING ,
66624: STR
66625: PUSH
66626: LD_VAR 0 3
66630: PUSH
66631: LD_VAR 0 2
66635: ARRAY
66636: PUSH
66637: LD_INT 4
66639: ARRAY
66640: STR
66641: PUSH
66642: LD_STRING )
66644: STR
66645: PPUSH
66646: CALL_OW 559
66650: GO 66560
66652: POP
66653: POP
// end ; end ;
66654: LD_VAR 0 1
66658: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66659: LD_EXP 102
66663: IFFALSE 67348
66665: GO 66667
66667: DISABLE
66668: LD_INT 0
66670: PPUSH
66671: PPUSH
66672: PPUSH
66673: PPUSH
66674: PPUSH
66675: PPUSH
66676: PPUSH
66677: PPUSH
66678: PPUSH
// begin enable ;
66679: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66680: LD_ADDR_VAR 0 3
66684: PUSH
66685: LD_EXP 102
66689: PPUSH
66690: CALL 50151 0 1
66694: ST_TO_ADDR
// if not list then
66695: LD_VAR 0 3
66699: NOT
66700: IFFALSE 66704
// exit ;
66702: GO 67348
// for i := 1 to list do
66704: LD_ADDR_VAR 0 1
66708: PUSH
66709: DOUBLE
66710: LD_INT 1
66712: DEC
66713: ST_TO_ADDR
66714: LD_VAR 0 3
66718: PUSH
66719: FOR_TO
66720: IFFALSE 67346
// begin depot := list [ i ] [ 2 ] ;
66722: LD_ADDR_VAR 0 8
66726: PUSH
66727: LD_VAR 0 3
66731: PUSH
66732: LD_VAR 0 1
66736: ARRAY
66737: PUSH
66738: LD_INT 2
66740: ARRAY
66741: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66742: LD_ADDR_VAR 0 5
66746: PUSH
66747: LD_VAR 0 3
66751: PUSH
66752: LD_VAR 0 1
66756: ARRAY
66757: PUSH
66758: LD_INT 1
66760: ARRAY
66761: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66762: LD_VAR 0 8
66766: PPUSH
66767: CALL_OW 301
66771: PUSH
66772: LD_VAR 0 5
66776: PUSH
66777: LD_VAR 0 8
66781: PPUSH
66782: CALL_OW 255
66786: NONEQUAL
66787: OR
66788: IFFALSE 66817
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66790: LD_ADDR_EXP 102
66794: PUSH
66795: LD_EXP 102
66799: PPUSH
66800: LD_VAR 0 8
66804: PPUSH
66805: LD_INT 0
66807: PPUSH
66808: CALL_OW 1
66812: ST_TO_ADDR
// exit ;
66813: POP
66814: POP
66815: GO 67348
// end ; x := list [ i ] [ 3 ] ;
66817: LD_ADDR_VAR 0 6
66821: PUSH
66822: LD_VAR 0 3
66826: PUSH
66827: LD_VAR 0 1
66831: ARRAY
66832: PUSH
66833: LD_INT 3
66835: ARRAY
66836: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66837: LD_ADDR_VAR 0 7
66841: PUSH
66842: LD_VAR 0 3
66846: PUSH
66847: LD_VAR 0 1
66851: ARRAY
66852: PUSH
66853: LD_INT 4
66855: ARRAY
66856: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
66857: LD_ADDR_VAR 0 9
66861: PUSH
66862: LD_VAR 0 6
66866: PPUSH
66867: LD_VAR 0 7
66871: PPUSH
66872: LD_INT 16
66874: PPUSH
66875: CALL 48735 0 3
66879: ST_TO_ADDR
// if not cratesNearbyPoint then
66880: LD_VAR 0 9
66884: NOT
66885: IFFALSE 66891
// exit ;
66887: POP
66888: POP
66889: GO 67348
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66891: LD_ADDR_VAR 0 4
66895: PUSH
66896: LD_INT 22
66898: PUSH
66899: LD_VAR 0 5
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 3
66910: PUSH
66911: LD_INT 60
66913: PUSH
66914: EMPTY
66915: LIST
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 91
66923: PUSH
66924: LD_VAR 0 8
66928: PUSH
66929: LD_INT 6
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: LD_INT 25
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 25
66952: PUSH
66953: LD_INT 16
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: PPUSH
66971: CALL_OW 69
66975: PUSH
66976: LD_VAR 0 8
66980: PPUSH
66981: CALL_OW 313
66985: PPUSH
66986: LD_INT 3
66988: PUSH
66989: LD_INT 60
66991: PUSH
66992: EMPTY
66993: LIST
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: LD_INT 25
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 25
67014: PUSH
67015: LD_INT 16
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PPUSH
67031: CALL_OW 72
67035: UNION
67036: ST_TO_ADDR
// if tmp then
67037: LD_VAR 0 4
67041: IFFALSE 67121
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67043: LD_ADDR_VAR 0 4
67047: PUSH
67048: LD_VAR 0 4
67052: PPUSH
67053: LD_INT 3
67055: PPUSH
67056: CALL 46704 0 2
67060: ST_TO_ADDR
// for j in tmp do
67061: LD_ADDR_VAR 0 2
67065: PUSH
67066: LD_VAR 0 4
67070: PUSH
67071: FOR_IN
67072: IFFALSE 67115
// begin if IsInUnit ( j ) then
67074: LD_VAR 0 2
67078: PPUSH
67079: CALL_OW 310
67083: IFFALSE 67094
// ComExit ( j ) ;
67085: LD_VAR 0 2
67089: PPUSH
67090: CALL 46787 0 1
// AddComCollect ( j , x , y ) ;
67094: LD_VAR 0 2
67098: PPUSH
67099: LD_VAR 0 6
67103: PPUSH
67104: LD_VAR 0 7
67108: PPUSH
67109: CALL_OW 177
// end ;
67113: GO 67071
67115: POP
67116: POP
// exit ;
67117: POP
67118: POP
67119: GO 67348
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67121: LD_ADDR_VAR 0 4
67125: PUSH
67126: LD_INT 22
67128: PUSH
67129: LD_VAR 0 5
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 91
67140: PUSH
67141: LD_VAR 0 8
67145: PUSH
67146: LD_INT 8
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: LD_INT 34
67159: PUSH
67160: LD_INT 12
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 34
67169: PUSH
67170: LD_INT 51
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 34
67179: PUSH
67180: LD_INT 32
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 34
67189: PUSH
67190: LD_INT 89
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: PPUSH
67209: CALL_OW 69
67213: ST_TO_ADDR
// if tmp then
67214: LD_VAR 0 4
67218: IFFALSE 67344
// begin for j in tmp do
67220: LD_ADDR_VAR 0 2
67224: PUSH
67225: LD_VAR 0 4
67229: PUSH
67230: FOR_IN
67231: IFFALSE 67342
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67233: LD_VAR 0 2
67237: PPUSH
67238: CALL_OW 262
67242: PUSH
67243: LD_INT 3
67245: EQUAL
67246: PUSH
67247: LD_VAR 0 2
67251: PPUSH
67252: CALL_OW 261
67256: PUSH
67257: LD_INT 20
67259: GREATER
67260: OR
67261: PUSH
67262: LD_VAR 0 2
67266: PPUSH
67267: CALL_OW 314
67271: NOT
67272: AND
67273: PUSH
67274: LD_VAR 0 2
67278: PPUSH
67279: CALL_OW 263
67283: PUSH
67284: LD_INT 1
67286: NONEQUAL
67287: PUSH
67288: LD_VAR 0 2
67292: PPUSH
67293: CALL_OW 311
67297: OR
67298: AND
67299: IFFALSE 67340
// begin ComCollect ( j , x , y ) ;
67301: LD_VAR 0 2
67305: PPUSH
67306: LD_VAR 0 6
67310: PPUSH
67311: LD_VAR 0 7
67315: PPUSH
67316: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67320: LD_VAR 0 2
67324: PPUSH
67325: LD_VAR 0 8
67329: PPUSH
67330: CALL_OW 172
// exit ;
67334: POP
67335: POP
67336: POP
67337: POP
67338: GO 67348
// end ;
67340: GO 67230
67342: POP
67343: POP
// end ; end ;
67344: GO 66719
67346: POP
67347: POP
// end ; end_of_file
67348: PPOPN 9
67350: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67351: LD_VAR 0 1
67355: PUSH
67356: LD_INT 200
67358: DOUBLE
67359: GREATEREQUAL
67360: IFFALSE 67368
67362: LD_INT 299
67364: DOUBLE
67365: LESSEQUAL
67366: IFTRUE 67370
67368: GO 67402
67370: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67371: LD_VAR 0 1
67375: PPUSH
67376: LD_VAR 0 2
67380: PPUSH
67381: LD_VAR 0 3
67385: PPUSH
67386: LD_VAR 0 4
67390: PPUSH
67391: LD_VAR 0 5
67395: PPUSH
67396: CALL 68003 0 5
67400: GO 67479
67402: LD_INT 300
67404: DOUBLE
67405: GREATEREQUAL
67406: IFFALSE 67414
67408: LD_INT 399
67410: DOUBLE
67411: LESSEQUAL
67412: IFTRUE 67416
67414: GO 67478
67416: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67417: LD_VAR 0 1
67421: PPUSH
67422: LD_VAR 0 2
67426: PPUSH
67427: LD_VAR 0 3
67431: PPUSH
67432: LD_VAR 0 4
67436: PPUSH
67437: LD_VAR 0 5
67441: PPUSH
67442: LD_VAR 0 6
67446: PPUSH
67447: LD_VAR 0 7
67451: PPUSH
67452: LD_VAR 0 8
67456: PPUSH
67457: LD_VAR 0 9
67461: PPUSH
67462: LD_VAR 0 10
67466: PPUSH
67467: LD_VAR 0 11
67471: PPUSH
67472: CALL 64052 0 11
67476: GO 67479
67478: POP
// end ;
67479: PPOPN 11
67481: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67482: LD_VAR 0 1
67486: PPUSH
67487: LD_VAR 0 2
67491: PPUSH
67492: LD_VAR 0 3
67496: PPUSH
67497: LD_VAR 0 4
67501: PPUSH
67502: LD_VAR 0 5
67506: PPUSH
67507: CALL 67564 0 5
// end ; end_of_file
67511: PPOPN 5
67513: END
// export function SOS_UnitDestroyed ( un ) ; begin
67514: LD_INT 0
67516: PPUSH
// ComRadiation ( un ) ;
67517: LD_VAR 0 1
67521: PPUSH
67522: CALL 68407 0 1
// end ;
67526: LD_VAR 0 2
67530: RET
// export function SOS_UnitKamikazed ( un ) ; begin
67531: LD_INT 0
67533: PPUSH
// ComRadiation ( un ) ;
67534: LD_VAR 0 1
67538: PPUSH
67539: CALL 68407 0 1
// end ;
67543: LD_VAR 0 2
67547: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67548: LD_INT 0
67550: PPUSH
// end ;
67551: LD_VAR 0 4
67555: RET
// export function SOS_Command ( cmd ) ; begin
67556: LD_INT 0
67558: PPUSH
// end ;
67559: LD_VAR 0 2
67563: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67564: LD_INT 0
67566: PPUSH
// end ;
67567: LD_VAR 0 6
67571: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
67572: LD_INT 0
67574: PPUSH
67575: PPUSH
67576: PPUSH
67577: PPUSH
// if not vehicle or not factory then
67578: LD_VAR 0 1
67582: NOT
67583: PUSH
67584: LD_VAR 0 2
67588: NOT
67589: OR
67590: IFFALSE 67594
// exit ;
67592: GO 67998
// if factoryWaypoints >= factory then
67594: LD_EXP 101
67598: PUSH
67599: LD_VAR 0 2
67603: GREATEREQUAL
67604: IFFALSE 67998
// if factoryWaypoints [ factory ] then
67606: LD_EXP 101
67610: PUSH
67611: LD_VAR 0 2
67615: ARRAY
67616: IFFALSE 67998
// begin if GetControl ( vehicle ) = control_manual then
67618: LD_VAR 0 1
67622: PPUSH
67623: CALL_OW 263
67627: PUSH
67628: LD_INT 1
67630: EQUAL
67631: IFFALSE 67885
// begin driver := IsDrivenBy ( vehicle ) ;
67633: LD_ADDR_VAR 0 5
67637: PUSH
67638: LD_VAR 0 1
67642: PPUSH
67643: CALL_OW 311
67647: ST_TO_ADDR
// tag := GetTag ( driver ) ;
67648: LD_ADDR_VAR 0 4
67652: PUSH
67653: LD_VAR 0 5
67657: PPUSH
67658: CALL_OW 110
67662: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
67663: LD_VAR 0 4
67667: PUSH
67668: LD_INT 501
67670: EQUAL
67671: PUSH
67672: LD_VAR 0 1
67676: PPUSH
67677: CALL_OW 110
67681: PUSH
67682: LD_INT 501
67684: EQUAL
67685: OR
67686: IFFALSE 67690
// exit ;
67688: GO 67998
// if not HasTask ( driver ) then
67690: LD_VAR 0 5
67694: PPUSH
67695: CALL_OW 314
67699: NOT
67700: IFFALSE 67883
// begin SetTag ( driver , tDriver ) ;
67702: LD_VAR 0 5
67706: PPUSH
67707: LD_INT 501
67709: PPUSH
67710: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
67714: LD_VAR 0 1
67718: PPUSH
67719: LD_INT 501
67721: PPUSH
67722: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67726: LD_ADDR_VAR 0 6
67730: PUSH
67731: LD_EXP 101
67735: PUSH
67736: LD_VAR 0 2
67740: ARRAY
67741: PUSH
67742: LD_INT 3
67744: ARRAY
67745: PPUSH
67746: LD_EXP 101
67750: PUSH
67751: LD_VAR 0 2
67755: ARRAY
67756: PUSH
67757: LD_INT 4
67759: ARRAY
67760: PPUSH
67761: CALL_OW 428
67765: ST_TO_ADDR
// if hex then
67766: LD_VAR 0 6
67770: IFFALSE 67788
// ComMoveUnit ( driver , hex ) else
67772: LD_VAR 0 5
67776: PPUSH
67777: LD_VAR 0 6
67781: PPUSH
67782: CALL_OW 112
67786: GO 67827
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67788: LD_VAR 0 5
67792: PPUSH
67793: LD_EXP 101
67797: PUSH
67798: LD_VAR 0 2
67802: ARRAY
67803: PUSH
67804: LD_INT 3
67806: ARRAY
67807: PPUSH
67808: LD_EXP 101
67812: PUSH
67813: LD_VAR 0 2
67817: ARRAY
67818: PUSH
67819: LD_INT 4
67821: ARRAY
67822: PPUSH
67823: CALL_OW 111
// AddComExitVehicle ( driver ) ;
67827: LD_VAR 0 5
67831: PPUSH
67832: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
67836: LD_VAR 0 5
67840: PPUSH
67841: LD_VAR 0 2
67845: PPUSH
67846: CALL_OW 180
// wait ( 0 0$1 ) ;
67850: LD_INT 35
67852: PPUSH
67853: CALL_OW 67
// SetTag ( driver , tag ) ;
67857: LD_VAR 0 5
67861: PPUSH
67862: LD_VAR 0 4
67866: PPUSH
67867: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_INT 0
67878: PPUSH
67879: CALL_OW 109
// end ; end else
67883: GO 67998
// if GetControl ( vehicle ) = control_remote then
67885: LD_VAR 0 1
67889: PPUSH
67890: CALL_OW 263
67894: PUSH
67895: LD_INT 2
67897: EQUAL
67898: IFFALSE 67959
// begin wait ( 0 0$2 ) ;
67900: LD_INT 70
67902: PPUSH
67903: CALL_OW 67
// if Connect ( vehicle ) then
67907: LD_VAR 0 1
67911: PPUSH
67912: CALL 17006 0 1
67916: IFFALSE 67957
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67918: LD_VAR 0 1
67922: PPUSH
67923: LD_EXP 101
67927: PUSH
67928: LD_VAR 0 2
67932: ARRAY
67933: PUSH
67934: LD_INT 3
67936: ARRAY
67937: PPUSH
67938: LD_EXP 101
67942: PUSH
67943: LD_VAR 0 2
67947: ARRAY
67948: PUSH
67949: LD_INT 4
67951: ARRAY
67952: PPUSH
67953: CALL_OW 171
// end else
67957: GO 67998
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67959: LD_VAR 0 1
67963: PPUSH
67964: LD_EXP 101
67968: PUSH
67969: LD_VAR 0 2
67973: ARRAY
67974: PUSH
67975: LD_INT 3
67977: ARRAY
67978: PPUSH
67979: LD_EXP 101
67983: PUSH
67984: LD_VAR 0 2
67988: ARRAY
67989: PUSH
67990: LD_INT 4
67992: ARRAY
67993: PPUSH
67994: CALL_OW 171
// end ; end ;
67998: LD_VAR 0 3
68002: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68003: LD_INT 0
68005: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68006: LD_VAR 0 1
68010: PUSH
68011: LD_INT 250
68013: EQUAL
68014: PUSH
68015: LD_VAR 0 2
68019: PPUSH
68020: CALL_OW 264
68024: PUSH
68025: LD_INT 81
68027: EQUAL
68028: AND
68029: IFFALSE 68050
// MinerPlaceMine ( unit , x , y ) ;
68031: LD_VAR 0 2
68035: PPUSH
68036: LD_VAR 0 4
68040: PPUSH
68041: LD_VAR 0 5
68045: PPUSH
68046: CALL 71142 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68050: LD_VAR 0 1
68054: PUSH
68055: LD_INT 251
68057: EQUAL
68058: PUSH
68059: LD_VAR 0 2
68063: PPUSH
68064: CALL_OW 264
68068: PUSH
68069: LD_INT 81
68071: EQUAL
68072: AND
68073: IFFALSE 68094
// MinerDetonateMine ( unit , x , y ) ;
68075: LD_VAR 0 2
68079: PPUSH
68080: LD_VAR 0 4
68084: PPUSH
68085: LD_VAR 0 5
68089: PPUSH
68090: CALL 71417 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68094: LD_VAR 0 1
68098: PUSH
68099: LD_INT 252
68101: EQUAL
68102: PUSH
68103: LD_VAR 0 2
68107: PPUSH
68108: CALL_OW 264
68112: PUSH
68113: LD_INT 81
68115: EQUAL
68116: AND
68117: IFFALSE 68138
// MinerCreateMinefield ( unit , x , y ) ;
68119: LD_VAR 0 2
68123: PPUSH
68124: LD_VAR 0 4
68128: PPUSH
68129: LD_VAR 0 5
68133: PPUSH
68134: CALL 71834 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68138: LD_VAR 0 1
68142: PUSH
68143: LD_INT 253
68145: EQUAL
68146: PUSH
68147: LD_VAR 0 2
68151: PPUSH
68152: CALL_OW 257
68156: PUSH
68157: LD_INT 5
68159: EQUAL
68160: AND
68161: IFFALSE 68182
// ComBinocular ( unit , x , y ) ;
68163: LD_VAR 0 2
68167: PPUSH
68168: LD_VAR 0 4
68172: PPUSH
68173: LD_VAR 0 5
68177: PPUSH
68178: CALL 72203 0 3
// if selectedUnit then
68182: LD_VAR 0 3
68186: IFFALSE 68242
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68188: LD_VAR 0 1
68192: PUSH
68193: LD_INT 254
68195: EQUAL
68196: PUSH
68197: LD_VAR 0 2
68201: PPUSH
68202: CALL_OW 264
68206: PUSH
68207: LD_INT 99
68209: EQUAL
68210: AND
68211: PUSH
68212: LD_VAR 0 3
68216: PPUSH
68217: CALL_OW 263
68221: PUSH
68222: LD_INT 3
68224: EQUAL
68225: AND
68226: IFFALSE 68242
// HackDestroyVehicle ( unit , selectedUnit ) ;
68228: LD_VAR 0 2
68232: PPUSH
68233: LD_VAR 0 3
68237: PPUSH
68238: CALL 70506 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68242: LD_VAR 0 1
68246: PUSH
68247: LD_INT 255
68249: EQUAL
68250: PUSH
68251: LD_VAR 0 2
68255: PPUSH
68256: CALL_OW 264
68260: PUSH
68261: LD_INT 14
68263: PUSH
68264: LD_INT 53
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: IN
68271: AND
68272: PUSH
68273: LD_VAR 0 4
68277: PPUSH
68278: LD_VAR 0 5
68282: PPUSH
68283: CALL_OW 488
68287: AND
68288: IFFALSE 68312
// CutTreeXYR ( unit , x , y , 12 ) ;
68290: LD_VAR 0 2
68294: PPUSH
68295: LD_VAR 0 4
68299: PPUSH
68300: LD_VAR 0 5
68304: PPUSH
68305: LD_INT 12
68307: PPUSH
68308: CALL 68503 0 4
// if cmd = 256 then
68312: LD_VAR 0 1
68316: PUSH
68317: LD_INT 256
68319: EQUAL
68320: IFFALSE 68341
// SetFactoryWaypoint ( unit , x , y ) ;
68322: LD_VAR 0 2
68326: PPUSH
68327: LD_VAR 0 4
68331: PPUSH
68332: LD_VAR 0 5
68336: PPUSH
68337: CALL 66040 0 3
// if cmd = 257 then
68341: LD_VAR 0 1
68345: PUSH
68346: LD_INT 257
68348: EQUAL
68349: IFFALSE 68370
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68351: LD_VAR 0 2
68355: PPUSH
68356: LD_VAR 0 4
68360: PPUSH
68361: LD_VAR 0 5
68365: PPUSH
68366: CALL 66402 0 3
// if cmd = 258 then
68370: LD_VAR 0 1
68374: PUSH
68375: LD_INT 258
68377: EQUAL
68378: IFFALSE 68402
// BurnTreeXYR ( unit , x , y , 8 ) ;
68380: LD_VAR 0 2
68384: PPUSH
68385: LD_VAR 0 4
68389: PPUSH
68390: LD_VAR 0 5
68394: PPUSH
68395: LD_INT 8
68397: PPUSH
68398: CALL 68897 0 4
// end ;
68402: LD_VAR 0 6
68406: RET
// export function ComRadiation ( un ) ; var eff ; begin
68407: LD_INT 0
68409: PPUSH
68410: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
68411: LD_VAR 0 1
68415: PPUSH
68416: CALL_OW 264
68420: PUSH
68421: LD_INT 91
68423: NONEQUAL
68424: IFFALSE 68428
// exit ;
68426: GO 68498
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68428: LD_INT 68
68430: PPUSH
68431: LD_VAR 0 1
68435: PPUSH
68436: CALL_OW 255
68440: PPUSH
68441: CALL_OW 321
68445: PUSH
68446: LD_INT 2
68448: EQUAL
68449: IFFALSE 68461
// eff := 70 else
68451: LD_ADDR_VAR 0 3
68455: PUSH
68456: LD_INT 70
68458: ST_TO_ADDR
68459: GO 68469
// eff := 30 ;
68461: LD_ADDR_VAR 0 3
68465: PUSH
68466: LD_INT 30
68468: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68469: LD_VAR 0 1
68473: PPUSH
68474: CALL_OW 250
68478: PPUSH
68479: LD_VAR 0 1
68483: PPUSH
68484: CALL_OW 251
68488: PPUSH
68489: LD_VAR 0 3
68493: PPUSH
68494: CALL_OW 495
// end ;
68498: LD_VAR 0 2
68502: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68503: LD_INT 0
68505: PPUSH
68506: PPUSH
68507: PPUSH
68508: PPUSH
68509: PPUSH
68510: PPUSH
68511: PPUSH
68512: PPUSH
68513: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
68514: LD_VAR 0 1
68518: PPUSH
68519: CALL_OW 302
68523: NOT
68524: PUSH
68525: LD_VAR 0 2
68529: PPUSH
68530: LD_VAR 0 3
68534: PPUSH
68535: CALL_OW 488
68539: NOT
68540: OR
68541: PUSH
68542: LD_VAR 0 4
68546: NOT
68547: OR
68548: IFFALSE 68552
// exit ;
68550: GO 68892
// list := [ ] ;
68552: LD_ADDR_VAR 0 13
68556: PUSH
68557: EMPTY
68558: ST_TO_ADDR
// if x - r < 0 then
68559: LD_VAR 0 2
68563: PUSH
68564: LD_VAR 0 4
68568: MINUS
68569: PUSH
68570: LD_INT 0
68572: LESS
68573: IFFALSE 68585
// min_x := 0 else
68575: LD_ADDR_VAR 0 7
68579: PUSH
68580: LD_INT 0
68582: ST_TO_ADDR
68583: GO 68601
// min_x := x - r ;
68585: LD_ADDR_VAR 0 7
68589: PUSH
68590: LD_VAR 0 2
68594: PUSH
68595: LD_VAR 0 4
68599: MINUS
68600: ST_TO_ADDR
// if y - r < 0 then
68601: LD_VAR 0 3
68605: PUSH
68606: LD_VAR 0 4
68610: MINUS
68611: PUSH
68612: LD_INT 0
68614: LESS
68615: IFFALSE 68627
// min_y := 0 else
68617: LD_ADDR_VAR 0 8
68621: PUSH
68622: LD_INT 0
68624: ST_TO_ADDR
68625: GO 68643
// min_y := y - r ;
68627: LD_ADDR_VAR 0 8
68631: PUSH
68632: LD_VAR 0 3
68636: PUSH
68637: LD_VAR 0 4
68641: MINUS
68642: ST_TO_ADDR
// max_x := x + r ;
68643: LD_ADDR_VAR 0 9
68647: PUSH
68648: LD_VAR 0 2
68652: PUSH
68653: LD_VAR 0 4
68657: PLUS
68658: ST_TO_ADDR
// max_y := y + r ;
68659: LD_ADDR_VAR 0 10
68663: PUSH
68664: LD_VAR 0 3
68668: PUSH
68669: LD_VAR 0 4
68673: PLUS
68674: ST_TO_ADDR
// for _x = min_x to max_x do
68675: LD_ADDR_VAR 0 11
68679: PUSH
68680: DOUBLE
68681: LD_VAR 0 7
68685: DEC
68686: ST_TO_ADDR
68687: LD_VAR 0 9
68691: PUSH
68692: FOR_TO
68693: IFFALSE 68810
// for _y = min_y to max_y do
68695: LD_ADDR_VAR 0 12
68699: PUSH
68700: DOUBLE
68701: LD_VAR 0 8
68705: DEC
68706: ST_TO_ADDR
68707: LD_VAR 0 10
68711: PUSH
68712: FOR_TO
68713: IFFALSE 68806
// begin if not ValidHex ( _x , _y ) then
68715: LD_VAR 0 11
68719: PPUSH
68720: LD_VAR 0 12
68724: PPUSH
68725: CALL_OW 488
68729: NOT
68730: IFFALSE 68734
// continue ;
68732: GO 68712
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68734: LD_VAR 0 11
68738: PPUSH
68739: LD_VAR 0 12
68743: PPUSH
68744: CALL_OW 351
68748: PUSH
68749: LD_VAR 0 11
68753: PPUSH
68754: LD_VAR 0 12
68758: PPUSH
68759: CALL_OW 554
68763: AND
68764: IFFALSE 68804
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68766: LD_ADDR_VAR 0 13
68770: PUSH
68771: LD_VAR 0 13
68775: PPUSH
68776: LD_VAR 0 13
68780: PUSH
68781: LD_INT 1
68783: PLUS
68784: PPUSH
68785: LD_VAR 0 11
68789: PUSH
68790: LD_VAR 0 12
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PPUSH
68799: CALL_OW 2
68803: ST_TO_ADDR
// end ;
68804: GO 68712
68806: POP
68807: POP
68808: GO 68692
68810: POP
68811: POP
// if not list then
68812: LD_VAR 0 13
68816: NOT
68817: IFFALSE 68821
// exit ;
68819: GO 68892
// for i in list do
68821: LD_ADDR_VAR 0 6
68825: PUSH
68826: LD_VAR 0 13
68830: PUSH
68831: FOR_IN
68832: IFFALSE 68890
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
68834: LD_VAR 0 1
68838: PPUSH
68839: LD_STRING M
68841: PUSH
68842: LD_VAR 0 6
68846: PUSH
68847: LD_INT 1
68849: ARRAY
68850: PUSH
68851: LD_VAR 0 6
68855: PUSH
68856: LD_INT 2
68858: ARRAY
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: PUSH
68881: EMPTY
68882: LIST
68883: PPUSH
68884: CALL_OW 447
68888: GO 68831
68890: POP
68891: POP
// end ;
68892: LD_VAR 0 5
68896: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
68897: LD_INT 0
68899: PPUSH
68900: PPUSH
68901: PPUSH
68902: PPUSH
68903: PPUSH
68904: PPUSH
68905: PPUSH
68906: PPUSH
68907: PPUSH
68908: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
68909: LD_VAR 0 1
68913: PPUSH
68914: CALL_OW 302
68918: NOT
68919: PUSH
68920: LD_VAR 0 2
68924: PPUSH
68925: LD_VAR 0 3
68929: PPUSH
68930: CALL_OW 488
68934: NOT
68935: OR
68936: PUSH
68937: LD_VAR 0 4
68941: NOT
68942: OR
68943: IFFALSE 68947
// exit ;
68945: GO 69460
// list := [ ] ;
68947: LD_ADDR_VAR 0 13
68951: PUSH
68952: EMPTY
68953: ST_TO_ADDR
// if x - r < 0 then
68954: LD_VAR 0 2
68958: PUSH
68959: LD_VAR 0 4
68963: MINUS
68964: PUSH
68965: LD_INT 0
68967: LESS
68968: IFFALSE 68980
// min_x := 0 else
68970: LD_ADDR_VAR 0 7
68974: PUSH
68975: LD_INT 0
68977: ST_TO_ADDR
68978: GO 68996
// min_x := x - r ;
68980: LD_ADDR_VAR 0 7
68984: PUSH
68985: LD_VAR 0 2
68989: PUSH
68990: LD_VAR 0 4
68994: MINUS
68995: ST_TO_ADDR
// if y - r < 0 then
68996: LD_VAR 0 3
69000: PUSH
69001: LD_VAR 0 4
69005: MINUS
69006: PUSH
69007: LD_INT 0
69009: LESS
69010: IFFALSE 69022
// min_y := 0 else
69012: LD_ADDR_VAR 0 8
69016: PUSH
69017: LD_INT 0
69019: ST_TO_ADDR
69020: GO 69038
// min_y := y - r ;
69022: LD_ADDR_VAR 0 8
69026: PUSH
69027: LD_VAR 0 3
69031: PUSH
69032: LD_VAR 0 4
69036: MINUS
69037: ST_TO_ADDR
// max_x := x + r ;
69038: LD_ADDR_VAR 0 9
69042: PUSH
69043: LD_VAR 0 2
69047: PUSH
69048: LD_VAR 0 4
69052: PLUS
69053: ST_TO_ADDR
// max_y := y + r ;
69054: LD_ADDR_VAR 0 10
69058: PUSH
69059: LD_VAR 0 3
69063: PUSH
69064: LD_VAR 0 4
69068: PLUS
69069: ST_TO_ADDR
// for _x = min_x to max_x do
69070: LD_ADDR_VAR 0 11
69074: PUSH
69075: DOUBLE
69076: LD_VAR 0 7
69080: DEC
69081: ST_TO_ADDR
69082: LD_VAR 0 9
69086: PUSH
69087: FOR_TO
69088: IFFALSE 69205
// for _y = min_y to max_y do
69090: LD_ADDR_VAR 0 12
69094: PUSH
69095: DOUBLE
69096: LD_VAR 0 8
69100: DEC
69101: ST_TO_ADDR
69102: LD_VAR 0 10
69106: PUSH
69107: FOR_TO
69108: IFFALSE 69201
// begin if not ValidHex ( _x , _y ) then
69110: LD_VAR 0 11
69114: PPUSH
69115: LD_VAR 0 12
69119: PPUSH
69120: CALL_OW 488
69124: NOT
69125: IFFALSE 69129
// continue ;
69127: GO 69107
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69129: LD_VAR 0 11
69133: PPUSH
69134: LD_VAR 0 12
69138: PPUSH
69139: CALL_OW 351
69143: PUSH
69144: LD_VAR 0 11
69148: PPUSH
69149: LD_VAR 0 12
69153: PPUSH
69154: CALL_OW 554
69158: AND
69159: IFFALSE 69199
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69161: LD_ADDR_VAR 0 13
69165: PUSH
69166: LD_VAR 0 13
69170: PPUSH
69171: LD_VAR 0 13
69175: PUSH
69176: LD_INT 1
69178: PLUS
69179: PPUSH
69180: LD_VAR 0 11
69184: PUSH
69185: LD_VAR 0 12
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PPUSH
69194: CALL_OW 2
69198: ST_TO_ADDR
// end ;
69199: GO 69107
69201: POP
69202: POP
69203: GO 69087
69205: POP
69206: POP
// if not list then
69207: LD_VAR 0 13
69211: NOT
69212: IFFALSE 69216
// exit ;
69214: GO 69460
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
69216: LD_ADDR_VAR 0 13
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: LD_VAR 0 13
69230: PPUSH
69231: LD_INT 1
69233: PPUSH
69234: LD_INT 1
69236: PPUSH
69237: CALL 14148 0 4
69241: ST_TO_ADDR
// ComStop ( flame ) ;
69242: LD_VAR 0 1
69246: PPUSH
69247: CALL_OW 141
// for i in list do
69251: LD_ADDR_VAR 0 6
69255: PUSH
69256: LD_VAR 0 13
69260: PUSH
69261: FOR_IN
69262: IFFALSE 69293
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
69264: LD_VAR 0 1
69268: PPUSH
69269: LD_VAR 0 6
69273: PUSH
69274: LD_INT 1
69276: ARRAY
69277: PPUSH
69278: LD_VAR 0 6
69282: PUSH
69283: LD_INT 2
69285: ARRAY
69286: PPUSH
69287: CALL_OW 176
69291: GO 69261
69293: POP
69294: POP
// repeat wait ( 0 0$1 ) ;
69295: LD_INT 35
69297: PPUSH
69298: CALL_OW 67
// task := GetTaskList ( flame ) ;
69302: LD_ADDR_VAR 0 14
69306: PUSH
69307: LD_VAR 0 1
69311: PPUSH
69312: CALL_OW 437
69316: ST_TO_ADDR
// if not task then
69317: LD_VAR 0 14
69321: NOT
69322: IFFALSE 69326
// exit ;
69324: GO 69460
// if task [ 1 ] [ 1 ] <> | then
69326: LD_VAR 0 14
69330: PUSH
69331: LD_INT 1
69333: ARRAY
69334: PUSH
69335: LD_INT 1
69337: ARRAY
69338: PUSH
69339: LD_STRING |
69341: NONEQUAL
69342: IFFALSE 69346
// exit ;
69344: GO 69460
// _x := task [ 1 ] [ 2 ] ;
69346: LD_ADDR_VAR 0 11
69350: PUSH
69351: LD_VAR 0 14
69355: PUSH
69356: LD_INT 1
69358: ARRAY
69359: PUSH
69360: LD_INT 2
69362: ARRAY
69363: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69364: LD_ADDR_VAR 0 12
69368: PUSH
69369: LD_VAR 0 14
69373: PUSH
69374: LD_INT 1
69376: ARRAY
69377: PUSH
69378: LD_INT 3
69380: ARRAY
69381: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69382: LD_VAR 0 11
69386: PPUSH
69387: LD_VAR 0 12
69391: PPUSH
69392: CALL_OW 351
69396: NOT
69397: PUSH
69398: LD_VAR 0 11
69402: PPUSH
69403: LD_VAR 0 12
69407: PPUSH
69408: CALL_OW 554
69412: NOT
69413: OR
69414: IFFALSE 69448
// begin task := Delete ( task , 1 ) ;
69416: LD_ADDR_VAR 0 14
69420: PUSH
69421: LD_VAR 0 14
69425: PPUSH
69426: LD_INT 1
69428: PPUSH
69429: CALL_OW 3
69433: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69434: LD_VAR 0 1
69438: PPUSH
69439: LD_VAR 0 14
69443: PPUSH
69444: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69448: LD_VAR 0 1
69452: PPUSH
69453: CALL_OW 314
69457: NOT
69458: IFFALSE 69295
// end ;
69460: LD_VAR 0 5
69464: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69465: LD_EXP 104
69469: NOT
69470: IFFALSE 69520
69472: GO 69474
69474: DISABLE
// begin initHack := true ;
69475: LD_ADDR_EXP 104
69479: PUSH
69480: LD_INT 1
69482: ST_TO_ADDR
// hackTanks := [ ] ;
69483: LD_ADDR_EXP 105
69487: PUSH
69488: EMPTY
69489: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69490: LD_ADDR_EXP 106
69494: PUSH
69495: EMPTY
69496: ST_TO_ADDR
// hackLimit := 3 ;
69497: LD_ADDR_EXP 107
69501: PUSH
69502: LD_INT 3
69504: ST_TO_ADDR
// hackDist := 12 ;
69505: LD_ADDR_EXP 108
69509: PUSH
69510: LD_INT 12
69512: ST_TO_ADDR
// hackCounter := [ ] ;
69513: LD_ADDR_EXP 109
69517: PUSH
69518: EMPTY
69519: ST_TO_ADDR
// end ;
69520: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69521: LD_EXP 104
69525: PUSH
69526: LD_INT 34
69528: PUSH
69529: LD_INT 99
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PPUSH
69536: CALL_OW 69
69540: AND
69541: IFFALSE 69794
69543: GO 69545
69545: DISABLE
69546: LD_INT 0
69548: PPUSH
69549: PPUSH
// begin enable ;
69550: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69551: LD_ADDR_VAR 0 1
69555: PUSH
69556: LD_INT 34
69558: PUSH
69559: LD_INT 99
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PPUSH
69566: CALL_OW 69
69570: PUSH
69571: FOR_IN
69572: IFFALSE 69792
// begin if not i in hackTanks then
69574: LD_VAR 0 1
69578: PUSH
69579: LD_EXP 105
69583: IN
69584: NOT
69585: IFFALSE 69668
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69587: LD_ADDR_EXP 105
69591: PUSH
69592: LD_EXP 105
69596: PPUSH
69597: LD_EXP 105
69601: PUSH
69602: LD_INT 1
69604: PLUS
69605: PPUSH
69606: LD_VAR 0 1
69610: PPUSH
69611: CALL_OW 1
69615: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69616: LD_ADDR_EXP 106
69620: PUSH
69621: LD_EXP 106
69625: PPUSH
69626: LD_EXP 106
69630: PUSH
69631: LD_INT 1
69633: PLUS
69634: PPUSH
69635: EMPTY
69636: PPUSH
69637: CALL_OW 1
69641: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69642: LD_ADDR_EXP 109
69646: PUSH
69647: LD_EXP 109
69651: PPUSH
69652: LD_EXP 109
69656: PUSH
69657: LD_INT 1
69659: PLUS
69660: PPUSH
69661: EMPTY
69662: PPUSH
69663: CALL_OW 1
69667: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69668: LD_VAR 0 1
69672: PPUSH
69673: CALL_OW 302
69677: NOT
69678: IFFALSE 69691
// begin HackUnlinkAll ( i ) ;
69680: LD_VAR 0 1
69684: PPUSH
69685: CALL 69797 0 1
// continue ;
69689: GO 69571
// end ; HackCheckCapturedStatus ( i ) ;
69691: LD_VAR 0 1
69695: PPUSH
69696: CALL 70240 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69700: LD_ADDR_VAR 0 2
69704: PUSH
69705: LD_INT 81
69707: PUSH
69708: LD_VAR 0 1
69712: PPUSH
69713: CALL_OW 255
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 33
69724: PUSH
69725: LD_INT 3
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 91
69734: PUSH
69735: LD_VAR 0 1
69739: PUSH
69740: LD_EXP 108
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 50
69752: PUSH
69753: EMPTY
69754: LIST
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: PPUSH
69762: CALL_OW 69
69766: ST_TO_ADDR
// if not tmp then
69767: LD_VAR 0 2
69771: NOT
69772: IFFALSE 69776
// continue ;
69774: GO 69571
// HackLink ( i , tmp ) ;
69776: LD_VAR 0 1
69780: PPUSH
69781: LD_VAR 0 2
69785: PPUSH
69786: CALL 69933 0 2
// end ;
69790: GO 69571
69792: POP
69793: POP
// end ;
69794: PPOPN 2
69796: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69797: LD_INT 0
69799: PPUSH
69800: PPUSH
69801: PPUSH
// if not hack in hackTanks then
69802: LD_VAR 0 1
69806: PUSH
69807: LD_EXP 105
69811: IN
69812: NOT
69813: IFFALSE 69817
// exit ;
69815: GO 69928
// index := GetElementIndex ( hackTanks , hack ) ;
69817: LD_ADDR_VAR 0 4
69821: PUSH
69822: LD_EXP 105
69826: PPUSH
69827: LD_VAR 0 1
69831: PPUSH
69832: CALL 13445 0 2
69836: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69837: LD_EXP 106
69841: PUSH
69842: LD_VAR 0 4
69846: ARRAY
69847: IFFALSE 69928
// begin for i in hackTanksCaptured [ index ] do
69849: LD_ADDR_VAR 0 3
69853: PUSH
69854: LD_EXP 106
69858: PUSH
69859: LD_VAR 0 4
69863: ARRAY
69864: PUSH
69865: FOR_IN
69866: IFFALSE 69892
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69868: LD_VAR 0 3
69872: PUSH
69873: LD_INT 1
69875: ARRAY
69876: PPUSH
69877: LD_VAR 0 3
69881: PUSH
69882: LD_INT 2
69884: ARRAY
69885: PPUSH
69886: CALL_OW 235
69890: GO 69865
69892: POP
69893: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69894: LD_ADDR_EXP 106
69898: PUSH
69899: LD_EXP 106
69903: PPUSH
69904: LD_VAR 0 4
69908: PPUSH
69909: EMPTY
69910: PPUSH
69911: CALL_OW 1
69915: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69916: LD_VAR 0 1
69920: PPUSH
69921: LD_INT 0
69923: PPUSH
69924: CALL_OW 505
// end ; end ;
69928: LD_VAR 0 2
69932: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69933: LD_INT 0
69935: PPUSH
69936: PPUSH
69937: PPUSH
// if not hack in hackTanks or not vehicles then
69938: LD_VAR 0 1
69942: PUSH
69943: LD_EXP 105
69947: IN
69948: NOT
69949: PUSH
69950: LD_VAR 0 2
69954: NOT
69955: OR
69956: IFFALSE 69960
// exit ;
69958: GO 70235
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69960: LD_ADDR_VAR 0 2
69964: PUSH
69965: LD_VAR 0 1
69969: PPUSH
69970: LD_VAR 0 2
69974: PPUSH
69975: LD_INT 1
69977: PPUSH
69978: LD_INT 1
69980: PPUSH
69981: CALL 14095 0 4
69985: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69986: LD_ADDR_VAR 0 5
69990: PUSH
69991: LD_EXP 105
69995: PPUSH
69996: LD_VAR 0 1
70000: PPUSH
70001: CALL 13445 0 2
70005: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70006: LD_EXP 106
70010: PUSH
70011: LD_VAR 0 5
70015: ARRAY
70016: PUSH
70017: LD_EXP 107
70021: LESS
70022: IFFALSE 70211
// begin for i := 1 to vehicles do
70024: LD_ADDR_VAR 0 4
70028: PUSH
70029: DOUBLE
70030: LD_INT 1
70032: DEC
70033: ST_TO_ADDR
70034: LD_VAR 0 2
70038: PUSH
70039: FOR_TO
70040: IFFALSE 70209
// begin if hackTanksCaptured [ index ] = hackLimit then
70042: LD_EXP 106
70046: PUSH
70047: LD_VAR 0 5
70051: ARRAY
70052: PUSH
70053: LD_EXP 107
70057: EQUAL
70058: IFFALSE 70062
// break ;
70060: GO 70209
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70062: LD_ADDR_EXP 109
70066: PUSH
70067: LD_EXP 109
70071: PPUSH
70072: LD_VAR 0 5
70076: PPUSH
70077: LD_EXP 109
70081: PUSH
70082: LD_VAR 0 5
70086: ARRAY
70087: PUSH
70088: LD_INT 1
70090: PLUS
70091: PPUSH
70092: CALL_OW 1
70096: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70097: LD_ADDR_EXP 106
70101: PUSH
70102: LD_EXP 106
70106: PPUSH
70107: LD_VAR 0 5
70111: PUSH
70112: LD_EXP 106
70116: PUSH
70117: LD_VAR 0 5
70121: ARRAY
70122: PUSH
70123: LD_INT 1
70125: PLUS
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PPUSH
70131: LD_VAR 0 2
70135: PUSH
70136: LD_VAR 0 4
70140: ARRAY
70141: PUSH
70142: LD_VAR 0 2
70146: PUSH
70147: LD_VAR 0 4
70151: ARRAY
70152: PPUSH
70153: CALL_OW 255
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PPUSH
70162: CALL 13660 0 3
70166: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70167: LD_VAR 0 2
70171: PUSH
70172: LD_VAR 0 4
70176: ARRAY
70177: PPUSH
70178: LD_VAR 0 1
70182: PPUSH
70183: CALL_OW 255
70187: PPUSH
70188: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70192: LD_VAR 0 2
70196: PUSH
70197: LD_VAR 0 4
70201: ARRAY
70202: PPUSH
70203: CALL_OW 141
// end ;
70207: GO 70039
70209: POP
70210: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70211: LD_VAR 0 1
70215: PPUSH
70216: LD_EXP 106
70220: PUSH
70221: LD_VAR 0 5
70225: ARRAY
70226: PUSH
70227: LD_INT 0
70229: PLUS
70230: PPUSH
70231: CALL_OW 505
// end ;
70235: LD_VAR 0 3
70239: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70240: LD_INT 0
70242: PPUSH
70243: PPUSH
70244: PPUSH
70245: PPUSH
// if not hack in hackTanks then
70246: LD_VAR 0 1
70250: PUSH
70251: LD_EXP 105
70255: IN
70256: NOT
70257: IFFALSE 70261
// exit ;
70259: GO 70501
// index := GetElementIndex ( hackTanks , hack ) ;
70261: LD_ADDR_VAR 0 4
70265: PUSH
70266: LD_EXP 105
70270: PPUSH
70271: LD_VAR 0 1
70275: PPUSH
70276: CALL 13445 0 2
70280: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70281: LD_ADDR_VAR 0 3
70285: PUSH
70286: DOUBLE
70287: LD_EXP 106
70291: PUSH
70292: LD_VAR 0 4
70296: ARRAY
70297: INC
70298: ST_TO_ADDR
70299: LD_INT 1
70301: PUSH
70302: FOR_DOWNTO
70303: IFFALSE 70475
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70305: LD_ADDR_VAR 0 5
70309: PUSH
70310: LD_EXP 106
70314: PUSH
70315: LD_VAR 0 4
70319: ARRAY
70320: PUSH
70321: LD_VAR 0 3
70325: ARRAY
70326: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70327: LD_VAR 0 5
70331: PUSH
70332: LD_INT 1
70334: ARRAY
70335: PPUSH
70336: CALL_OW 302
70340: NOT
70341: PUSH
70342: LD_VAR 0 5
70346: PUSH
70347: LD_INT 1
70349: ARRAY
70350: PPUSH
70351: CALL_OW 255
70355: PUSH
70356: LD_VAR 0 1
70360: PPUSH
70361: CALL_OW 255
70365: NONEQUAL
70366: OR
70367: IFFALSE 70473
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70369: LD_VAR 0 5
70373: PUSH
70374: LD_INT 1
70376: ARRAY
70377: PPUSH
70378: CALL_OW 305
70382: PUSH
70383: LD_VAR 0 5
70387: PUSH
70388: LD_INT 1
70390: ARRAY
70391: PPUSH
70392: CALL_OW 255
70396: PUSH
70397: LD_VAR 0 1
70401: PPUSH
70402: CALL_OW 255
70406: EQUAL
70407: AND
70408: IFFALSE 70432
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70410: LD_VAR 0 5
70414: PUSH
70415: LD_INT 1
70417: ARRAY
70418: PPUSH
70419: LD_VAR 0 5
70423: PUSH
70424: LD_INT 2
70426: ARRAY
70427: PPUSH
70428: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70432: LD_ADDR_EXP 106
70436: PUSH
70437: LD_EXP 106
70441: PPUSH
70442: LD_VAR 0 4
70446: PPUSH
70447: LD_EXP 106
70451: PUSH
70452: LD_VAR 0 4
70456: ARRAY
70457: PPUSH
70458: LD_VAR 0 3
70462: PPUSH
70463: CALL_OW 3
70467: PPUSH
70468: CALL_OW 1
70472: ST_TO_ADDR
// end ; end ;
70473: GO 70302
70475: POP
70476: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70477: LD_VAR 0 1
70481: PPUSH
70482: LD_EXP 106
70486: PUSH
70487: LD_VAR 0 4
70491: ARRAY
70492: PUSH
70493: LD_INT 0
70495: PLUS
70496: PPUSH
70497: CALL_OW 505
// end ;
70501: LD_VAR 0 2
70505: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70506: LD_INT 0
70508: PPUSH
70509: PPUSH
70510: PPUSH
70511: PPUSH
// if not hack in hackTanks then
70512: LD_VAR 0 1
70516: PUSH
70517: LD_EXP 105
70521: IN
70522: NOT
70523: IFFALSE 70527
// exit ;
70525: GO 70612
// index := GetElementIndex ( hackTanks , hack ) ;
70527: LD_ADDR_VAR 0 5
70531: PUSH
70532: LD_EXP 105
70536: PPUSH
70537: LD_VAR 0 1
70541: PPUSH
70542: CALL 13445 0 2
70546: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70547: LD_ADDR_VAR 0 4
70551: PUSH
70552: DOUBLE
70553: LD_INT 1
70555: DEC
70556: ST_TO_ADDR
70557: LD_EXP 106
70561: PUSH
70562: LD_VAR 0 5
70566: ARRAY
70567: PUSH
70568: FOR_TO
70569: IFFALSE 70610
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70571: LD_EXP 106
70575: PUSH
70576: LD_VAR 0 5
70580: ARRAY
70581: PUSH
70582: LD_VAR 0 4
70586: ARRAY
70587: PUSH
70588: LD_INT 1
70590: ARRAY
70591: PUSH
70592: LD_VAR 0 2
70596: EQUAL
70597: IFFALSE 70608
// KillUnit ( vehicle ) ;
70599: LD_VAR 0 2
70603: PPUSH
70604: CALL_OW 66
70608: GO 70568
70610: POP
70611: POP
// end ;
70612: LD_VAR 0 3
70616: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70617: LD_EXP 110
70621: NOT
70622: IFFALSE 70657
70624: GO 70626
70626: DISABLE
// begin initMiner := true ;
70627: LD_ADDR_EXP 110
70631: PUSH
70632: LD_INT 1
70634: ST_TO_ADDR
// minersList := [ ] ;
70635: LD_ADDR_EXP 111
70639: PUSH
70640: EMPTY
70641: ST_TO_ADDR
// minerMinesList := [ ] ;
70642: LD_ADDR_EXP 112
70646: PUSH
70647: EMPTY
70648: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70649: LD_ADDR_EXP 113
70653: PUSH
70654: LD_INT 5
70656: ST_TO_ADDR
// end ;
70657: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70658: LD_EXP 110
70662: PUSH
70663: LD_INT 34
70665: PUSH
70666: LD_INT 81
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PPUSH
70673: CALL_OW 69
70677: AND
70678: IFFALSE 71139
70680: GO 70682
70682: DISABLE
70683: LD_INT 0
70685: PPUSH
70686: PPUSH
70687: PPUSH
70688: PPUSH
// begin enable ;
70689: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70690: LD_ADDR_VAR 0 1
70694: PUSH
70695: LD_INT 34
70697: PUSH
70698: LD_INT 81
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PPUSH
70705: CALL_OW 69
70709: PUSH
70710: FOR_IN
70711: IFFALSE 70783
// begin if not i in minersList then
70713: LD_VAR 0 1
70717: PUSH
70718: LD_EXP 111
70722: IN
70723: NOT
70724: IFFALSE 70781
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70726: LD_ADDR_EXP 111
70730: PUSH
70731: LD_EXP 111
70735: PPUSH
70736: LD_EXP 111
70740: PUSH
70741: LD_INT 1
70743: PLUS
70744: PPUSH
70745: LD_VAR 0 1
70749: PPUSH
70750: CALL_OW 1
70754: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70755: LD_ADDR_EXP 112
70759: PUSH
70760: LD_EXP 112
70764: PPUSH
70765: LD_EXP 112
70769: PUSH
70770: LD_INT 1
70772: PLUS
70773: PPUSH
70774: EMPTY
70775: PPUSH
70776: CALL_OW 1
70780: ST_TO_ADDR
// end end ;
70781: GO 70710
70783: POP
70784: POP
// for i := minerMinesList downto 1 do
70785: LD_ADDR_VAR 0 1
70789: PUSH
70790: DOUBLE
70791: LD_EXP 112
70795: INC
70796: ST_TO_ADDR
70797: LD_INT 1
70799: PUSH
70800: FOR_DOWNTO
70801: IFFALSE 71137
// begin if IsLive ( minersList [ i ] ) then
70803: LD_EXP 111
70807: PUSH
70808: LD_VAR 0 1
70812: ARRAY
70813: PPUSH
70814: CALL_OW 300
70818: IFFALSE 70846
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70820: LD_EXP 111
70824: PUSH
70825: LD_VAR 0 1
70829: ARRAY
70830: PPUSH
70831: LD_EXP 112
70835: PUSH
70836: LD_VAR 0 1
70840: ARRAY
70841: PPUSH
70842: CALL_OW 505
// if not minerMinesList [ i ] then
70846: LD_EXP 112
70850: PUSH
70851: LD_VAR 0 1
70855: ARRAY
70856: NOT
70857: IFFALSE 70861
// continue ;
70859: GO 70800
// for j := minerMinesList [ i ] downto 1 do
70861: LD_ADDR_VAR 0 2
70865: PUSH
70866: DOUBLE
70867: LD_EXP 112
70871: PUSH
70872: LD_VAR 0 1
70876: ARRAY
70877: INC
70878: ST_TO_ADDR
70879: LD_INT 1
70881: PUSH
70882: FOR_DOWNTO
70883: IFFALSE 71133
// begin side := GetSide ( minersList [ i ] ) ;
70885: LD_ADDR_VAR 0 3
70889: PUSH
70890: LD_EXP 111
70894: PUSH
70895: LD_VAR 0 1
70899: ARRAY
70900: PPUSH
70901: CALL_OW 255
70905: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70906: LD_ADDR_VAR 0 4
70910: PUSH
70911: LD_EXP 112
70915: PUSH
70916: LD_VAR 0 1
70920: ARRAY
70921: PUSH
70922: LD_VAR 0 2
70926: ARRAY
70927: PUSH
70928: LD_INT 1
70930: ARRAY
70931: PPUSH
70932: LD_EXP 112
70936: PUSH
70937: LD_VAR 0 1
70941: ARRAY
70942: PUSH
70943: LD_VAR 0 2
70947: ARRAY
70948: PUSH
70949: LD_INT 2
70951: ARRAY
70952: PPUSH
70953: CALL_OW 428
70957: ST_TO_ADDR
// if not tmp then
70958: LD_VAR 0 4
70962: NOT
70963: IFFALSE 70967
// continue ;
70965: GO 70882
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70967: LD_VAR 0 4
70971: PUSH
70972: LD_INT 81
70974: PUSH
70975: LD_VAR 0 3
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PPUSH
70984: CALL_OW 69
70988: IN
70989: PUSH
70990: LD_EXP 112
70994: PUSH
70995: LD_VAR 0 1
70999: ARRAY
71000: PUSH
71001: LD_VAR 0 2
71005: ARRAY
71006: PUSH
71007: LD_INT 1
71009: ARRAY
71010: PPUSH
71011: LD_EXP 112
71015: PUSH
71016: LD_VAR 0 1
71020: ARRAY
71021: PUSH
71022: LD_VAR 0 2
71026: ARRAY
71027: PUSH
71028: LD_INT 2
71030: ARRAY
71031: PPUSH
71032: CALL_OW 458
71036: AND
71037: IFFALSE 71131
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71039: LD_EXP 112
71043: PUSH
71044: LD_VAR 0 1
71048: ARRAY
71049: PUSH
71050: LD_VAR 0 2
71054: ARRAY
71055: PUSH
71056: LD_INT 1
71058: ARRAY
71059: PPUSH
71060: LD_EXP 112
71064: PUSH
71065: LD_VAR 0 1
71069: ARRAY
71070: PUSH
71071: LD_VAR 0 2
71075: ARRAY
71076: PUSH
71077: LD_INT 2
71079: ARRAY
71080: PPUSH
71081: LD_VAR 0 3
71085: PPUSH
71086: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71090: LD_ADDR_EXP 112
71094: PUSH
71095: LD_EXP 112
71099: PPUSH
71100: LD_VAR 0 1
71104: PPUSH
71105: LD_EXP 112
71109: PUSH
71110: LD_VAR 0 1
71114: ARRAY
71115: PPUSH
71116: LD_VAR 0 2
71120: PPUSH
71121: CALL_OW 3
71125: PPUSH
71126: CALL_OW 1
71130: ST_TO_ADDR
// end ; end ;
71131: GO 70882
71133: POP
71134: POP
// end ;
71135: GO 70800
71137: POP
71138: POP
// end ;
71139: PPOPN 4
71141: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71142: LD_INT 0
71144: PPUSH
71145: PPUSH
// result := false ;
71146: LD_ADDR_VAR 0 4
71150: PUSH
71151: LD_INT 0
71153: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71154: LD_VAR 0 1
71158: PPUSH
71159: CALL_OW 264
71163: PUSH
71164: LD_INT 81
71166: EQUAL
71167: NOT
71168: IFFALSE 71172
// exit ;
71170: GO 71412
// index := GetElementIndex ( minersList , unit ) ;
71172: LD_ADDR_VAR 0 5
71176: PUSH
71177: LD_EXP 111
71181: PPUSH
71182: LD_VAR 0 1
71186: PPUSH
71187: CALL 13445 0 2
71191: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71192: LD_EXP 112
71196: PUSH
71197: LD_VAR 0 5
71201: ARRAY
71202: PUSH
71203: LD_EXP 113
71207: GREATEREQUAL
71208: IFFALSE 71212
// exit ;
71210: GO 71412
// ComMoveXY ( unit , x , y ) ;
71212: LD_VAR 0 1
71216: PPUSH
71217: LD_VAR 0 2
71221: PPUSH
71222: LD_VAR 0 3
71226: PPUSH
71227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71231: LD_INT 35
71233: PPUSH
71234: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71238: LD_VAR 0 1
71242: PPUSH
71243: LD_VAR 0 2
71247: PPUSH
71248: LD_VAR 0 3
71252: PPUSH
71253: CALL 45186 0 3
71257: NOT
71258: PUSH
71259: LD_VAR 0 1
71263: PPUSH
71264: CALL_OW 314
71268: AND
71269: IFFALSE 71273
// exit ;
71271: GO 71412
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71273: LD_VAR 0 2
71277: PPUSH
71278: LD_VAR 0 3
71282: PPUSH
71283: CALL_OW 428
71287: PUSH
71288: LD_VAR 0 1
71292: EQUAL
71293: PUSH
71294: LD_VAR 0 1
71298: PPUSH
71299: CALL_OW 314
71303: NOT
71304: AND
71305: IFFALSE 71231
// PlaySoundXY ( x , y , PlantMine ) ;
71307: LD_VAR 0 2
71311: PPUSH
71312: LD_VAR 0 3
71316: PPUSH
71317: LD_STRING PlantMine
71319: PPUSH
71320: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71324: LD_VAR 0 2
71328: PPUSH
71329: LD_VAR 0 3
71333: PPUSH
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 255
71343: PPUSH
71344: LD_INT 0
71346: PPUSH
71347: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71351: LD_ADDR_EXP 112
71355: PUSH
71356: LD_EXP 112
71360: PPUSH
71361: LD_VAR 0 5
71365: PUSH
71366: LD_EXP 112
71370: PUSH
71371: LD_VAR 0 5
71375: ARRAY
71376: PUSH
71377: LD_INT 1
71379: PLUS
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PPUSH
71385: LD_VAR 0 2
71389: PUSH
71390: LD_VAR 0 3
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PPUSH
71399: CALL 13660 0 3
71403: ST_TO_ADDR
// result := true ;
71404: LD_ADDR_VAR 0 4
71408: PUSH
71409: LD_INT 1
71411: ST_TO_ADDR
// end ;
71412: LD_VAR 0 4
71416: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71417: LD_INT 0
71419: PPUSH
71420: PPUSH
71421: PPUSH
// if not unit in minersList then
71422: LD_VAR 0 1
71426: PUSH
71427: LD_EXP 111
71431: IN
71432: NOT
71433: IFFALSE 71437
// exit ;
71435: GO 71829
// index := GetElementIndex ( minersList , unit ) ;
71437: LD_ADDR_VAR 0 6
71441: PUSH
71442: LD_EXP 111
71446: PPUSH
71447: LD_VAR 0 1
71451: PPUSH
71452: CALL 13445 0 2
71456: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71457: LD_ADDR_VAR 0 5
71461: PUSH
71462: DOUBLE
71463: LD_EXP 112
71467: PUSH
71468: LD_VAR 0 6
71472: ARRAY
71473: INC
71474: ST_TO_ADDR
71475: LD_INT 1
71477: PUSH
71478: FOR_DOWNTO
71479: IFFALSE 71640
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71481: LD_EXP 112
71485: PUSH
71486: LD_VAR 0 6
71490: ARRAY
71491: PUSH
71492: LD_VAR 0 5
71496: ARRAY
71497: PUSH
71498: LD_INT 1
71500: ARRAY
71501: PUSH
71502: LD_VAR 0 2
71506: EQUAL
71507: PUSH
71508: LD_EXP 112
71512: PUSH
71513: LD_VAR 0 6
71517: ARRAY
71518: PUSH
71519: LD_VAR 0 5
71523: ARRAY
71524: PUSH
71525: LD_INT 2
71527: ARRAY
71528: PUSH
71529: LD_VAR 0 3
71533: EQUAL
71534: AND
71535: IFFALSE 71638
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71537: LD_EXP 112
71541: PUSH
71542: LD_VAR 0 6
71546: ARRAY
71547: PUSH
71548: LD_VAR 0 5
71552: ARRAY
71553: PUSH
71554: LD_INT 1
71556: ARRAY
71557: PPUSH
71558: LD_EXP 112
71562: PUSH
71563: LD_VAR 0 6
71567: ARRAY
71568: PUSH
71569: LD_VAR 0 5
71573: ARRAY
71574: PUSH
71575: LD_INT 2
71577: ARRAY
71578: PPUSH
71579: LD_VAR 0 1
71583: PPUSH
71584: CALL_OW 255
71588: PPUSH
71589: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71593: LD_ADDR_EXP 112
71597: PUSH
71598: LD_EXP 112
71602: PPUSH
71603: LD_VAR 0 6
71607: PPUSH
71608: LD_EXP 112
71612: PUSH
71613: LD_VAR 0 6
71617: ARRAY
71618: PPUSH
71619: LD_VAR 0 5
71623: PPUSH
71624: CALL_OW 3
71628: PPUSH
71629: CALL_OW 1
71633: ST_TO_ADDR
// exit ;
71634: POP
71635: POP
71636: GO 71829
// end ; end ;
71638: GO 71478
71640: POP
71641: POP
// for i := minerMinesList [ index ] downto 1 do
71642: LD_ADDR_VAR 0 5
71646: PUSH
71647: DOUBLE
71648: LD_EXP 112
71652: PUSH
71653: LD_VAR 0 6
71657: ARRAY
71658: INC
71659: ST_TO_ADDR
71660: LD_INT 1
71662: PUSH
71663: FOR_DOWNTO
71664: IFFALSE 71827
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71666: LD_EXP 112
71670: PUSH
71671: LD_VAR 0 6
71675: ARRAY
71676: PUSH
71677: LD_VAR 0 5
71681: ARRAY
71682: PUSH
71683: LD_INT 1
71685: ARRAY
71686: PPUSH
71687: LD_EXP 112
71691: PUSH
71692: LD_VAR 0 6
71696: ARRAY
71697: PUSH
71698: LD_VAR 0 5
71702: ARRAY
71703: PUSH
71704: LD_INT 2
71706: ARRAY
71707: PPUSH
71708: LD_VAR 0 2
71712: PPUSH
71713: LD_VAR 0 3
71717: PPUSH
71718: CALL_OW 298
71722: PUSH
71723: LD_INT 6
71725: LESS
71726: IFFALSE 71825
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71728: LD_EXP 112
71732: PUSH
71733: LD_VAR 0 6
71737: ARRAY
71738: PUSH
71739: LD_VAR 0 5
71743: ARRAY
71744: PUSH
71745: LD_INT 1
71747: ARRAY
71748: PPUSH
71749: LD_EXP 112
71753: PUSH
71754: LD_VAR 0 6
71758: ARRAY
71759: PUSH
71760: LD_VAR 0 5
71764: ARRAY
71765: PUSH
71766: LD_INT 2
71768: ARRAY
71769: PPUSH
71770: LD_VAR 0 1
71774: PPUSH
71775: CALL_OW 255
71779: PPUSH
71780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71784: LD_ADDR_EXP 112
71788: PUSH
71789: LD_EXP 112
71793: PPUSH
71794: LD_VAR 0 6
71798: PPUSH
71799: LD_EXP 112
71803: PUSH
71804: LD_VAR 0 6
71808: ARRAY
71809: PPUSH
71810: LD_VAR 0 5
71814: PPUSH
71815: CALL_OW 3
71819: PPUSH
71820: CALL_OW 1
71824: ST_TO_ADDR
// end ; end ;
71825: GO 71663
71827: POP
71828: POP
// end ;
71829: LD_VAR 0 4
71833: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71834: LD_INT 0
71836: PPUSH
71837: PPUSH
71838: PPUSH
71839: PPUSH
71840: PPUSH
71841: PPUSH
71842: PPUSH
71843: PPUSH
71844: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71845: LD_VAR 0 1
71849: PPUSH
71850: CALL_OW 264
71854: PUSH
71855: LD_INT 81
71857: EQUAL
71858: NOT
71859: PUSH
71860: LD_VAR 0 1
71864: PUSH
71865: LD_EXP 111
71869: IN
71870: NOT
71871: OR
71872: IFFALSE 71876
// exit ;
71874: GO 72198
// index := GetElementIndex ( minersList , unit ) ;
71876: LD_ADDR_VAR 0 6
71880: PUSH
71881: LD_EXP 111
71885: PPUSH
71886: LD_VAR 0 1
71890: PPUSH
71891: CALL 13445 0 2
71895: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71896: LD_ADDR_VAR 0 8
71900: PUSH
71901: LD_EXP 113
71905: PUSH
71906: LD_EXP 112
71910: PUSH
71911: LD_VAR 0 6
71915: ARRAY
71916: MINUS
71917: ST_TO_ADDR
// if not minesFreeAmount then
71918: LD_VAR 0 8
71922: NOT
71923: IFFALSE 71927
// exit ;
71925: GO 72198
// tmp := [ ] ;
71927: LD_ADDR_VAR 0 7
71931: PUSH
71932: EMPTY
71933: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71934: LD_ADDR_VAR 0 5
71938: PUSH
71939: DOUBLE
71940: LD_INT 1
71942: DEC
71943: ST_TO_ADDR
71944: LD_VAR 0 8
71948: PUSH
71949: FOR_TO
71950: IFFALSE 72145
// begin _d := rand ( 0 , 5 ) ;
71952: LD_ADDR_VAR 0 11
71956: PUSH
71957: LD_INT 0
71959: PPUSH
71960: LD_INT 5
71962: PPUSH
71963: CALL_OW 12
71967: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71968: LD_ADDR_VAR 0 12
71972: PUSH
71973: LD_INT 2
71975: PPUSH
71976: LD_INT 6
71978: PPUSH
71979: CALL_OW 12
71983: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71984: LD_ADDR_VAR 0 9
71988: PUSH
71989: LD_VAR 0 2
71993: PPUSH
71994: LD_VAR 0 11
71998: PPUSH
71999: LD_VAR 0 12
72003: PPUSH
72004: CALL_OW 272
72008: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72009: LD_ADDR_VAR 0 10
72013: PUSH
72014: LD_VAR 0 3
72018: PPUSH
72019: LD_VAR 0 11
72023: PPUSH
72024: LD_VAR 0 12
72028: PPUSH
72029: CALL_OW 273
72033: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72034: LD_VAR 0 9
72038: PPUSH
72039: LD_VAR 0 10
72043: PPUSH
72044: CALL_OW 488
72048: PUSH
72049: LD_VAR 0 9
72053: PUSH
72054: LD_VAR 0 10
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_VAR 0 7
72067: IN
72068: NOT
72069: AND
72070: PUSH
72071: LD_VAR 0 9
72075: PPUSH
72076: LD_VAR 0 10
72080: PPUSH
72081: CALL_OW 458
72085: NOT
72086: AND
72087: IFFALSE 72129
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72089: LD_ADDR_VAR 0 7
72093: PUSH
72094: LD_VAR 0 7
72098: PPUSH
72099: LD_VAR 0 7
72103: PUSH
72104: LD_INT 1
72106: PLUS
72107: PPUSH
72108: LD_VAR 0 9
72112: PUSH
72113: LD_VAR 0 10
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PPUSH
72122: CALL_OW 1
72126: ST_TO_ADDR
72127: GO 72143
// i := i - 1 ;
72129: LD_ADDR_VAR 0 5
72133: PUSH
72134: LD_VAR 0 5
72138: PUSH
72139: LD_INT 1
72141: MINUS
72142: ST_TO_ADDR
// end ;
72143: GO 71949
72145: POP
72146: POP
// for i in tmp do
72147: LD_ADDR_VAR 0 5
72151: PUSH
72152: LD_VAR 0 7
72156: PUSH
72157: FOR_IN
72158: IFFALSE 72196
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72160: LD_VAR 0 1
72164: PPUSH
72165: LD_VAR 0 5
72169: PUSH
72170: LD_INT 1
72172: ARRAY
72173: PPUSH
72174: LD_VAR 0 5
72178: PUSH
72179: LD_INT 2
72181: ARRAY
72182: PPUSH
72183: CALL 71142 0 3
72187: NOT
72188: IFFALSE 72194
// exit ;
72190: POP
72191: POP
72192: GO 72198
72194: GO 72157
72196: POP
72197: POP
// end ;
72198: LD_VAR 0 4
72202: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
72203: LD_INT 0
72205: PPUSH
72206: PPUSH
72207: PPUSH
72208: PPUSH
72209: PPUSH
72210: PPUSH
72211: PPUSH
72212: PPUSH
72213: PPUSH
// if GetClass ( unit ) <> class_sniper then
72214: LD_VAR 0 1
72218: PPUSH
72219: CALL_OW 257
72223: PUSH
72224: LD_INT 5
72226: NONEQUAL
72227: IFFALSE 72231
// exit ;
72229: GO 72697
// dist := 8 ;
72231: LD_ADDR_VAR 0 5
72235: PUSH
72236: LD_INT 8
72238: ST_TO_ADDR
// viewRange := 12 ;
72239: LD_ADDR_VAR 0 8
72243: PUSH
72244: LD_INT 12
72246: ST_TO_ADDR
// side := GetSide ( unit ) ;
72247: LD_ADDR_VAR 0 6
72251: PUSH
72252: LD_VAR 0 1
72256: PPUSH
72257: CALL_OW 255
72261: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72262: LD_INT 61
72264: PPUSH
72265: LD_VAR 0 6
72269: PPUSH
72270: CALL_OW 321
72274: PUSH
72275: LD_INT 2
72277: EQUAL
72278: IFFALSE 72288
// viewRange := 16 ;
72280: LD_ADDR_VAR 0 8
72284: PUSH
72285: LD_INT 16
72287: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72288: LD_VAR 0 1
72292: PPUSH
72293: LD_VAR 0 2
72297: PPUSH
72298: LD_VAR 0 3
72302: PPUSH
72303: CALL_OW 297
72307: PUSH
72308: LD_VAR 0 5
72312: GREATER
72313: IFFALSE 72392
// begin ComMoveXY ( unit , x , y ) ;
72315: LD_VAR 0 1
72319: PPUSH
72320: LD_VAR 0 2
72324: PPUSH
72325: LD_VAR 0 3
72329: PPUSH
72330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72334: LD_INT 35
72336: PPUSH
72337: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72341: LD_VAR 0 1
72345: PPUSH
72346: LD_VAR 0 2
72350: PPUSH
72351: LD_VAR 0 3
72355: PPUSH
72356: CALL 45186 0 3
72360: NOT
72361: IFFALSE 72365
// exit ;
72363: GO 72697
// until GetDistUnitXY ( unit , x , y ) < dist ;
72365: LD_VAR 0 1
72369: PPUSH
72370: LD_VAR 0 2
72374: PPUSH
72375: LD_VAR 0 3
72379: PPUSH
72380: CALL_OW 297
72384: PUSH
72385: LD_VAR 0 5
72389: LESS
72390: IFFALSE 72334
// end ; ComTurnXY ( unit , x , y ) ;
72392: LD_VAR 0 1
72396: PPUSH
72397: LD_VAR 0 2
72401: PPUSH
72402: LD_VAR 0 3
72406: PPUSH
72407: CALL_OW 118
// repeat if Multiplayer then
72411: LD_OWVAR 4
72415: IFFALSE 72426
// wait ( 35 ) else
72417: LD_INT 35
72419: PPUSH
72420: CALL_OW 67
72424: GO 72433
// wait ( 5 ) ;
72426: LD_INT 5
72428: PPUSH
72429: CALL_OW 67
// _d := GetDir ( unit ) ;
72433: LD_ADDR_VAR 0 11
72437: PUSH
72438: LD_VAR 0 1
72442: PPUSH
72443: CALL_OW 254
72447: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
72448: LD_ADDR_VAR 0 7
72452: PUSH
72453: LD_VAR 0 1
72457: PPUSH
72458: CALL_OW 250
72462: PPUSH
72463: LD_VAR 0 1
72467: PPUSH
72468: CALL_OW 251
72472: PPUSH
72473: LD_VAR 0 2
72477: PPUSH
72478: LD_VAR 0 3
72482: PPUSH
72483: CALL 47794 0 4
72487: ST_TO_ADDR
// until dir = _d ;
72488: LD_VAR 0 7
72492: PUSH
72493: LD_VAR 0 11
72497: EQUAL
72498: IFFALSE 72411
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
72500: LD_ADDR_VAR 0 9
72504: PUSH
72505: LD_VAR 0 1
72509: PPUSH
72510: CALL_OW 250
72514: PPUSH
72515: LD_VAR 0 7
72519: PPUSH
72520: LD_VAR 0 5
72524: PPUSH
72525: CALL_OW 272
72529: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
72530: LD_ADDR_VAR 0 10
72534: PUSH
72535: LD_VAR 0 1
72539: PPUSH
72540: CALL_OW 251
72544: PPUSH
72545: LD_VAR 0 7
72549: PPUSH
72550: LD_VAR 0 5
72554: PPUSH
72555: CALL_OW 273
72559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72560: LD_VAR 0 9
72564: PPUSH
72565: LD_VAR 0 10
72569: PPUSH
72570: CALL_OW 488
72574: NOT
72575: IFFALSE 72579
// exit ;
72577: GO 72697
// ComAnimCustom ( unit , 1 ) ;
72579: LD_VAR 0 1
72583: PPUSH
72584: LD_INT 1
72586: PPUSH
72587: CALL_OW 592
// p := 0 ;
72591: LD_ADDR_VAR 0 12
72595: PUSH
72596: LD_INT 0
72598: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72599: LD_VAR 0 9
72603: PPUSH
72604: LD_VAR 0 10
72608: PPUSH
72609: LD_VAR 0 6
72613: PPUSH
72614: LD_VAR 0 8
72618: PPUSH
72619: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
72623: LD_INT 35
72625: PPUSH
72626: CALL_OW 67
// p := Inc ( p ) ;
72630: LD_ADDR_VAR 0 12
72634: PUSH
72635: LD_VAR 0 12
72639: PPUSH
72640: CALL 47750 0 1
72644: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
72645: LD_VAR 0 12
72649: PUSH
72650: LD_INT 3
72652: EQUAL
72653: PUSH
72654: LD_VAR 0 1
72658: PPUSH
72659: CALL_OW 302
72663: NOT
72664: OR
72665: PUSH
72666: LD_VAR 0 1
72670: PPUSH
72671: CALL_OW 301
72675: OR
72676: IFFALSE 72623
// RemoveSeeing ( _x , _y , side ) ;
72678: LD_VAR 0 9
72682: PPUSH
72683: LD_VAR 0 10
72687: PPUSH
72688: LD_VAR 0 6
72692: PPUSH
72693: CALL_OW 331
// end ; end_of_file
72697: LD_VAR 0 4
72701: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
72702: LD_EXP 38
72706: IFFALSE 73047
72708: GO 72710
72710: DISABLE
72711: LD_INT 0
72713: PPUSH
72714: PPUSH
72715: PPUSH
// begin mpKingPoints := [ ] ;
72716: LD_ADDR_EXP 114
72720: PUSH
72721: EMPTY
72722: ST_TO_ADDR
// if mpTeamGame then
72723: LD_EXP 11
72727: IFFALSE 72781
// begin for i := 1 to Count ( mpTeams ) do
72729: LD_ADDR_VAR 0 1
72733: PUSH
72734: DOUBLE
72735: LD_INT 1
72737: DEC
72738: ST_TO_ADDR
72739: LD_EXP 10
72743: PPUSH
72744: CALL 10800 0 1
72748: PUSH
72749: FOR_TO
72750: IFFALSE 72777
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
72752: LD_ADDR_EXP 114
72756: PUSH
72757: LD_EXP 114
72761: PPUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: LD_INT 0
72769: PPUSH
72770: CALL_OW 1
72774: ST_TO_ADDR
72775: GO 72749
72777: POP
72778: POP
// end else
72779: GO 72824
// begin for i := 1 to 8 do
72781: LD_ADDR_VAR 0 1
72785: PUSH
72786: DOUBLE
72787: LD_INT 1
72789: DEC
72790: ST_TO_ADDR
72791: LD_INT 8
72793: PUSH
72794: FOR_TO
72795: IFFALSE 72822
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
72797: LD_ADDR_EXP 114
72801: PUSH
72802: LD_EXP 114
72806: PPUSH
72807: LD_VAR 0 1
72811: PPUSH
72812: LD_INT 0
72814: PPUSH
72815: CALL_OW 1
72819: ST_TO_ADDR
72820: GO 72794
72822: POP
72823: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
72824: LD_ADDR_VAR 0 3
72828: PUSH
72829: LD_EXP 2
72833: PPUSH
72834: LD_INT 0
72836: PPUSH
72837: CALL_OW 517
72841: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72842: LD_ADDR_VAR 0 1
72846: PUSH
72847: DOUBLE
72848: LD_INT 1
72850: DEC
72851: ST_TO_ADDR
72852: LD_VAR 0 3
72856: PUSH
72857: LD_INT 1
72859: ARRAY
72860: PUSH
72861: FOR_TO
72862: IFFALSE 72929
// for j := 1 to 8 do
72864: LD_ADDR_VAR 0 2
72868: PUSH
72869: DOUBLE
72870: LD_INT 1
72872: DEC
72873: ST_TO_ADDR
72874: LD_INT 8
72876: PUSH
72877: FOR_TO
72878: IFFALSE 72925
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
72880: LD_VAR 0 3
72884: PUSH
72885: LD_INT 1
72887: ARRAY
72888: PUSH
72889: LD_VAR 0 1
72893: ARRAY
72894: PPUSH
72895: LD_VAR 0 3
72899: PUSH
72900: LD_INT 2
72902: ARRAY
72903: PUSH
72904: LD_VAR 0 1
72908: ARRAY
72909: PPUSH
72910: LD_VAR 0 2
72914: PPUSH
72915: LD_INT 12
72917: NEG
72918: PPUSH
72919: CALL_OW 330
72923: GO 72877
72925: POP
72926: POP
72927: GO 72861
72929: POP
72930: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
72931: LD_EXP 33
72935: PPUSH
72936: LD_INT 1
72938: PPUSH
72939: CALL_OW 424
// UpdateCounter ;
72943: CALL 73551 0 0
// repeat wait ( 0 0$1 ) ;
72947: LD_INT 35
72949: PPUSH
72950: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72954: LD_ADDR_VAR 0 3
72958: PUSH
72959: LD_EXP 33
72963: PPUSH
72964: LD_INT 3
72966: PUSH
72967: LD_INT 57
72969: PUSH
72970: EMPTY
72971: LIST
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 50
72979: PUSH
72980: EMPTY
72981: LIST
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: LD_INT 30
72988: PUSH
72989: LD_INT 0
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 30
72998: PUSH
72999: LD_INT 1
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: LIST
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: PPUSH
73016: CALL_OW 70
73020: ST_TO_ADDR
// if not tmp then
73021: LD_VAR 0 3
73025: NOT
73026: IFFALSE 73030
// continue ;
73028: GO 72947
// AddPoints ( tmp ) ;
73030: LD_VAR 0 3
73034: PPUSH
73035: CALL 73229 0 1
// UpdateCounter ;
73039: CALL 73551 0 0
// until false ;
73043: LD_INT 0
73045: IFFALSE 72947
// end ;
73047: PPOPN 3
73049: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
73050: LD_EXP 38
73054: PUSH
73055: LD_EXP 36
73059: AND
73060: IFFALSE 73226
73062: GO 73064
73064: DISABLE
73065: LD_INT 0
73067: PPUSH
73068: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
73069: LD_ADDR_VAR 0 2
73073: PUSH
73074: LD_EXP 2
73078: PPUSH
73079: LD_INT 0
73081: PPUSH
73082: CALL_OW 517
73086: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73087: LD_ADDR_VAR 0 1
73091: PUSH
73092: DOUBLE
73093: LD_INT 1
73095: DEC
73096: ST_TO_ADDR
73097: LD_VAR 0 2
73101: PUSH
73102: LD_INT 1
73104: ARRAY
73105: PUSH
73106: FOR_TO
73107: IFFALSE 73148
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
73109: LD_VAR 0 2
73113: PUSH
73114: LD_INT 1
73116: ARRAY
73117: PUSH
73118: LD_VAR 0 1
73122: ARRAY
73123: PPUSH
73124: LD_VAR 0 2
73128: PUSH
73129: LD_INT 2
73131: ARRAY
73132: PUSH
73133: LD_VAR 0 1
73137: ARRAY
73138: PPUSH
73139: LD_INT 125
73141: PPUSH
73142: CALL_OW 495
73146: GO 73106
73148: POP
73149: POP
// repeat wait ( mpEmissions ) ;
73150: LD_EXP 36
73154: PPUSH
73155: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
73159: LD_ADDR_VAR 0 1
73163: PUSH
73164: DOUBLE
73165: LD_INT 1
73167: DEC
73168: ST_TO_ADDR
73169: LD_VAR 0 2
73173: PUSH
73174: LD_INT 1
73176: ARRAY
73177: PUSH
73178: FOR_TO
73179: IFFALSE 73220
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
73181: LD_VAR 0 2
73185: PUSH
73186: LD_INT 1
73188: ARRAY
73189: PUSH
73190: LD_VAR 0 1
73194: ARRAY
73195: PPUSH
73196: LD_VAR 0 2
73200: PUSH
73201: LD_INT 2
73203: ARRAY
73204: PUSH
73205: LD_VAR 0 1
73209: ARRAY
73210: PPUSH
73211: LD_INT 15
73213: PPUSH
73214: CALL_OW 495
73218: GO 73178
73220: POP
73221: POP
// until false ;
73222: LD_INT 0
73224: IFFALSE 73150
// end ;
73226: PPOPN 2
73228: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
73229: LD_INT 0
73231: PPUSH
73232: PPUSH
73233: PPUSH
73234: PPUSH
73235: PPUSH
// if mpTeamGame then
73236: LD_EXP 11
73240: IFFALSE 73437
// begin first := depots [ 1 ] ;
73242: LD_ADDR_VAR 0 4
73246: PUSH
73247: LD_VAR 0 1
73251: PUSH
73252: LD_INT 1
73254: ARRAY
73255: ST_TO_ADDR
// side := GetSide ( first ) ;
73256: LD_ADDR_VAR 0 6
73260: PUSH
73261: LD_VAR 0 4
73265: PPUSH
73266: CALL_OW 255
73270: ST_TO_ADDR
// for i := 1 to mpTeams do
73271: LD_ADDR_VAR 0 3
73275: PUSH
73276: DOUBLE
73277: LD_INT 1
73279: DEC
73280: ST_TO_ADDR
73281: LD_EXP 10
73285: PUSH
73286: FOR_TO
73287: IFFALSE 73321
// if side in mpTeams [ i ] then
73289: LD_VAR 0 6
73293: PUSH
73294: LD_EXP 10
73298: PUSH
73299: LD_VAR 0 3
73303: ARRAY
73304: IN
73305: IFFALSE 73319
// begin team := i ;
73307: LD_ADDR_VAR 0 5
73311: PUSH
73312: LD_VAR 0 3
73316: ST_TO_ADDR
// break ;
73317: GO 73321
// end ;
73319: GO 73286
73321: POP
73322: POP
// if not team then
73323: LD_VAR 0 5
73327: NOT
73328: IFFALSE 73332
// exit ;
73330: GO 73546
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73332: LD_EXP 33
73336: PPUSH
73337: LD_INT 81
73339: PUSH
73340: LD_VAR 0 6
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PPUSH
73349: CALL_OW 70
73353: IFFALSE 73357
// exit ;
73355: GO 73546
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
73357: LD_ADDR_EXP 114
73361: PUSH
73362: LD_EXP 114
73366: PPUSH
73367: LD_VAR 0 5
73371: PPUSH
73372: LD_EXP 114
73376: PUSH
73377: LD_VAR 0 5
73381: ARRAY
73382: PUSH
73383: LD_INT 1
73385: PLUS
73386: PPUSH
73387: CALL_OW 1
73391: ST_TO_ADDR
// for i in mpTeams [ team ] do
73392: LD_ADDR_VAR 0 3
73396: PUSH
73397: LD_EXP 10
73401: PUSH
73402: LD_VAR 0 5
73406: ARRAY
73407: PUSH
73408: FOR_IN
73409: IFFALSE 73433
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
73411: LD_VAR 0 3
73415: PPUSH
73416: LD_EXP 114
73420: PUSH
73421: LD_VAR 0 5
73425: ARRAY
73426: PPUSH
73427: CALL_OW 506
73431: GO 73408
73433: POP
73434: POP
// end else
73435: GO 73546
// begin first := depots [ 1 ] ;
73437: LD_ADDR_VAR 0 4
73441: PUSH
73442: LD_VAR 0 1
73446: PUSH
73447: LD_INT 1
73449: ARRAY
73450: ST_TO_ADDR
// side := GetSide ( first ) ;
73451: LD_ADDR_VAR 0 6
73455: PUSH
73456: LD_VAR 0 4
73460: PPUSH
73461: CALL_OW 255
73465: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73466: LD_EXP 33
73470: PPUSH
73471: LD_INT 81
73473: PUSH
73474: LD_VAR 0 6
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PPUSH
73483: CALL_OW 70
73487: IFFALSE 73491
// exit ;
73489: GO 73546
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
73491: LD_ADDR_EXP 114
73495: PUSH
73496: LD_EXP 114
73500: PPUSH
73501: LD_VAR 0 6
73505: PPUSH
73506: LD_EXP 114
73510: PUSH
73511: LD_VAR 0 6
73515: ARRAY
73516: PUSH
73517: LD_INT 1
73519: PLUS
73520: PPUSH
73521: CALL_OW 1
73525: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
73526: LD_VAR 0 6
73530: PPUSH
73531: LD_EXP 114
73535: PUSH
73536: LD_VAR 0 6
73540: ARRAY
73541: PPUSH
73542: CALL_OW 506
// end ; end ;
73546: LD_VAR 0 2
73550: RET
// function UpdateCounter ; var i ; begin
73551: LD_INT 0
73553: PPUSH
73554: PPUSH
// result := [ ] ;
73555: LD_ADDR_VAR 0 1
73559: PUSH
73560: EMPTY
73561: ST_TO_ADDR
// if mpTeamGame then
73562: LD_EXP 11
73566: IFFALSE 73633
// begin for i := 1 to mpTeams do
73568: LD_ADDR_VAR 0 2
73572: PUSH
73573: DOUBLE
73574: LD_INT 1
73576: DEC
73577: ST_TO_ADDR
73578: LD_EXP 10
73582: PUSH
73583: FOR_TO
73584: IFFALSE 73629
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
73586: LD_ADDR_VAR 0 1
73590: PUSH
73591: LD_VAR 0 1
73595: PUSH
73596: LD_STRING #KingoftheHill-Team
73598: PUSH
73599: LD_VAR 0 2
73603: PUSH
73604: LD_EXP 114
73608: PUSH
73609: LD_VAR 0 2
73613: ARRAY
73614: PUSH
73615: LD_EXP 34
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: ADD
73626: ST_TO_ADDR
73627: GO 73583
73629: POP
73630: POP
// end else
73631: GO 73706
// begin for i := 1 to 8 do
73633: LD_ADDR_VAR 0 2
73637: PUSH
73638: DOUBLE
73639: LD_INT 1
73641: DEC
73642: ST_TO_ADDR
73643: LD_INT 8
73645: PUSH
73646: FOR_TO
73647: IFFALSE 73704
// if mpSidePositions [ i ] then
73649: LD_EXP 7
73653: PUSH
73654: LD_VAR 0 2
73658: ARRAY
73659: IFFALSE 73702
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
73661: LD_ADDR_VAR 0 1
73665: PUSH
73666: LD_VAR 0 1
73670: PUSH
73671: LD_STRING #KingoftheHill-Player
73673: PUSH
73674: LD_VAR 0 2
73678: PUSH
73679: LD_EXP 114
73683: PUSH
73684: LD_VAR 0 2
73688: ARRAY
73689: PUSH
73690: LD_EXP 34
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: ADD
73701: ST_TO_ADDR
73702: GO 73646
73704: POP
73705: POP
// end ; mpDisplayStrings := result ;
73706: LD_ADDR_EXP 37
73710: PUSH
73711: LD_VAR 0 1
73715: ST_TO_ADDR
// end ;
73716: LD_VAR 0 1
73720: RET
// export function HowMuchPointsKing ( side ) ; begin
73721: LD_INT 0
73723: PPUSH
// result := HowMuchPoints ( side ) ;
73724: LD_ADDR_VAR 0 2
73728: PUSH
73729: LD_VAR 0 1
73733: PPUSH
73734: CALL 73744 0 1
73738: ST_TO_ADDR
// end ;
73739: LD_VAR 0 2
73743: RET
// function HowMuchPoints ( side ) ; var i ; begin
73744: LD_INT 0
73746: PPUSH
73747: PPUSH
// if mpTeamGame then
73748: LD_EXP 11
73752: IFFALSE 73821
// begin for i := 1 to Count ( mpTeams ) do
73754: LD_ADDR_VAR 0 3
73758: PUSH
73759: DOUBLE
73760: LD_INT 1
73762: DEC
73763: ST_TO_ADDR
73764: LD_EXP 10
73768: PPUSH
73769: CALL 10800 0 1
73773: PUSH
73774: FOR_TO
73775: IFFALSE 73817
// begin if side in mpTeams [ i ] then
73777: LD_VAR 0 1
73781: PUSH
73782: LD_EXP 10
73786: PUSH
73787: LD_VAR 0 3
73791: ARRAY
73792: IN
73793: IFFALSE 73815
// begin result := mpKingPoints [ i ] ;
73795: LD_ADDR_VAR 0 2
73799: PUSH
73800: LD_EXP 114
73804: PUSH
73805: LD_VAR 0 3
73809: ARRAY
73810: ST_TO_ADDR
// exit ;
73811: POP
73812: POP
73813: GO 73837
// end ; end ;
73815: GO 73774
73817: POP
73818: POP
// end else
73819: GO 73837
// result := mpKingPoints [ side ] ;
73821: LD_ADDR_VAR 0 2
73825: PUSH
73826: LD_EXP 114
73830: PUSH
73831: LD_VAR 0 1
73835: ARRAY
73836: ST_TO_ADDR
// end ;
73837: LD_VAR 0 2
73841: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
73842: LD_EXP 38
73846: PUSH
73847: CALL 74169 0 0
73851: AND
73852: PUSH
73853: LD_OWVAR 4
73857: AND
73858: IFFALSE 74094
73860: GO 73862
73862: DISABLE
73863: LD_INT 0
73865: PPUSH
73866: PPUSH
// begin canWin := false ;
73867: LD_ADDR_VAR 0 2
73871: PUSH
73872: LD_INT 0
73874: ST_TO_ADDR
// if not HasPower ( your_side ) then
73875: LD_OWVAR 2
73879: PPUSH
73880: CALL 74209 0 1
73884: NOT
73885: IFFALSE 73896
// begin Multiplayer_Loose_Message ;
73887: CALL_OW 521
// enable ( mpLose ) ;
73891: LD_INT 102
73893: ENABLE_MARKED
// end else
73894: GO 74094
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
73896: LD_ADDR_VAR 0 2
73900: PUSH
73901: LD_OWVAR 2
73905: PPUSH
73906: CALL 73744 0 1
73910: PUSH
73911: LD_EXP 34
73915: GREATEREQUAL
73916: PUSH
73917: LD_OWVAR 2
73921: PPUSH
73922: CALL 74209 0 1
73926: AND
73927: PUSH
73928: CALL 74097 0 0
73932: NOT
73933: OR
73934: ST_TO_ADDR
// for i := 1 to 8 do
73935: LD_ADDR_VAR 0 1
73939: PUSH
73940: DOUBLE
73941: LD_INT 1
73943: DEC
73944: ST_TO_ADDR
73945: LD_INT 8
73947: PUSH
73948: FOR_TO
73949: IFFALSE 74080
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
73951: LD_EXP 7
73955: PUSH
73956: LD_VAR 0 1
73960: ARRAY
73961: PUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: CALL_OW 108
73971: AND
73972: PUSH
73973: LD_VAR 0 1
73977: PUSH
73978: LD_OWVAR 2
73982: NONEQUAL
73983: AND
73984: IFFALSE 74078
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
73986: LD_EXP 8
73990: PUSH
73991: LD_VAR 0 1
73995: ARRAY
73996: NOT
73997: PUSH
73998: LD_EXP 8
74002: PUSH
74003: LD_VAR 0 1
74007: ARRAY
74008: PUSH
74009: LD_EXP 8
74013: PUSH
74014: LD_OWVAR 2
74018: ARRAY
74019: NONEQUAL
74020: PUSH
74021: LD_OWVAR 2
74025: PPUSH
74026: LD_VAR 0 1
74030: PPUSH
74031: CALL_OW 81
74035: PUSH
74036: LD_INT 1
74038: NONEQUAL
74039: AND
74040: OR
74041: IFFALSE 74078
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
74043: LD_VAR 0 1
74047: PPUSH
74048: CALL 73744 0 1
74052: PUSH
74053: LD_EXP 34
74057: GREATEREQUAL
74058: PUSH
74059: LD_VAR 0 1
74063: PPUSH
74064: CALL 74209 0 1
74068: AND
74069: IFFALSE 74078
// begin enable ( mpLose ) ;
74071: LD_INT 102
74073: ENABLE_MARKED
// exit ;
74074: POP
74075: POP
74076: GO 74094
// end ;
74078: GO 73948
74080: POP
74081: POP
// if canWin then
74082: LD_VAR 0 2
74086: IFFALSE 74093
// enable ( mpWin ) else
74088: LD_INT 101
74090: ENABLE_MARKED
74091: GO 74094
// enable ;
74093: ENABLE
// end ; end ;
74094: PPOPN 2
74096: END
// function EnemiesInGame ; var i ; begin
74097: LD_INT 0
74099: PPUSH
74100: PPUSH
// result := false ;
74101: LD_ADDR_VAR 0 1
74105: PUSH
74106: LD_INT 0
74108: ST_TO_ADDR
// for i := 1 to 8 do
74109: LD_ADDR_VAR 0 2
74113: PUSH
74114: DOUBLE
74115: LD_INT 1
74117: DEC
74118: ST_TO_ADDR
74119: LD_INT 8
74121: PUSH
74122: FOR_TO
74123: IFFALSE 74162
// if i <> your_side and MultiplayerSideAlive ( i ) then
74125: LD_VAR 0 2
74129: PUSH
74130: LD_OWVAR 2
74134: NONEQUAL
74135: PUSH
74136: LD_VAR 0 2
74140: PPUSH
74141: CALL_OW 108
74145: AND
74146: IFFALSE 74160
// begin result := true ;
74148: LD_ADDR_VAR 0 1
74152: PUSH
74153: LD_INT 1
74155: ST_TO_ADDR
// exit ;
74156: POP
74157: POP
74158: GO 74164
// end ;
74160: GO 74122
74162: POP
74163: POP
// end ;
74164: LD_VAR 0 1
74168: RET
// function CanWinLoose ; begin
74169: LD_INT 0
74171: PPUSH
// result := true ;
74172: LD_ADDR_VAR 0 1
74176: PUSH
74177: LD_INT 1
74179: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
74180: CALL_OW 531
74184: PUSH
74185: CALL_OW 519
74189: PUSH
74190: LD_INT 1
74192: GREATER
74193: AND
74194: IFFALSE 74204
// result := false ;
74196: LD_ADDR_VAR 0 1
74200: PUSH
74201: LD_INT 0
74203: ST_TO_ADDR
// end ;
74204: LD_VAR 0 1
74208: RET
// function HasPower ( i ) ; begin
74209: LD_INT 0
74211: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
74212: LD_ADDR_VAR 0 2
74216: PUSH
74217: LD_INT 22
74219: PUSH
74220: LD_VAR 0 1
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 2
74231: PUSH
74232: LD_INT 21
74234: PUSH
74235: LD_INT 1
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 33
74244: PUSH
74245: LD_INT 3
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 33
74254: PUSH
74255: LD_INT 5
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PPUSH
74272: CALL_OW 69
74276: ST_TO_ADDR
// end ;
74277: LD_VAR 0 2
74281: RET
