// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2746 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3061 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 34
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 36
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 35
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 32
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 51126 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 51126 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 51126 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 51126 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 51126 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 51126 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 10998 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 50959 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 50959 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 50959 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 50959 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 50959 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 50959 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 50959 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 50959 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 50959 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 50959 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 50959 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 50959 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 51126 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 51126 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 51126 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 51126 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 51126 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 51126 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 51126 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 51126 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 51126 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 51126 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 51126 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 51126 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 51126 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 51126 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 51126 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 51126 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 51126 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 51126 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 47948 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 67712 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 7355 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 67729 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 7945 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 67770 0 2
2721: PPOPN 2
2723: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 7998 0 3
2743: PPOPN 3
2745: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
// disable ( mpActive ) ;
2750: LD_INT 100
2752: DISABLE_MARKED
// disable ( mpWin ) ;
2753: LD_INT 101
2755: DISABLE_MARKED
// disable ( mpLose ) ;
2756: LD_INT 102
2758: DISABLE_MARKED
// mpGameType := 0 ;
2759: LD_ADDR_EXP 3
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// mpGameSettings := [ ] ;
2767: LD_ADDR_EXP 6
2771: PUSH
2772: EMPTY
2773: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2774: LD_ADDR_EXP 4
2778: PUSH
2779: EMPTY
2780: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2781: LD_ADDR_EXP 5
2785: PUSH
2786: EMPTY
2787: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2788: LD_ADDR_EXP 29
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2803: LD_ADDR_EXP 12
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2810: LD_ADDR_EXP 13
2814: PUSH
2815: EMPTY
2816: ST_TO_ADDR
// mpDepots := [ ] ;
2817: LD_ADDR_EXP 14
2821: PUSH
2822: EMPTY
2823: ST_TO_ADDR
// mpBuildings := [ ] ;
2824: LD_ADDR_EXP 17
2828: PUSH
2829: EMPTY
2830: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2831: LD_ADDR_EXP 18
2835: PUSH
2836: EMPTY
2837: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2838: LD_ADDR_EXP 19
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2845: LD_ADDR_EXP 20
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpStartingResources := [ ] ;
2852: LD_ADDR_EXP 15
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// mpStartPos := [ ] ;
2859: LD_ADDR_EXP 21
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2866: LD_ADDR_EXP 22
2870: PUSH
2871: LD_INT 1
2873: NEG
2874: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2875: LD_ADDR_EXP 23
2879: PUSH
2880: EMPTY
2881: ST_TO_ADDR
// mpApemans := [ ] ;
2882: LD_ADDR_EXP 30
2886: PUSH
2887: EMPTY
2888: ST_TO_ADDR
// mpApemansArea := [ ] ;
2889: LD_ADDR_EXP 31
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpRespawn := [ ] ;
2896: LD_ADDR_EXP 32
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpKingArea := 0 ;
2903: LD_ADDR_EXP 33
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// mpPoints := [ ] ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: EMPTY
2917: ST_TO_ADDR
// mpVehicles := 0 ;
2918: LD_ADDR_EXP 35
2922: PUSH
2923: LD_INT 0
2925: ST_TO_ADDR
// mpShipments := 0 ;
2926: LD_ADDR_EXP 27
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2934: LD_ADDR_EXP 39
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: ST_TO_ADDR
// mpEmissions := 0 ;
2965: LD_ADDR_EXP 36
2969: PUSH
2970: LD_INT 0
2972: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2973: LD_ADDR_EXP 25
2977: PUSH
2978: LD_INT 3
2980: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2981: LD_ADDR_EXP 24
2985: PUSH
2986: LD_INT 15
2988: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2989: LD_ADDR_EXP 37
2993: PUSH
2994: LD_INT 0
2996: ST_TO_ADDR
// mpGameActive := false ;
2997: LD_ADDR_EXP 38
3001: PUSH
3002: LD_INT 0
3004: ST_TO_ADDR
// mpBlockRespThread := false ;
3005: LD_ADDR_EXP 40
3009: PUSH
3010: LD_INT 0
3012: ST_TO_ADDR
// for i := 1 to 32 do
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: DOUBLE
3019: LD_INT 1
3021: DEC
3022: ST_TO_ADDR
3023: LD_INT 32
3025: PUSH
3026: FOR_TO
3027: IFFALSE 3054
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3029: LD_ADDR_EXP 6
3033: PUSH
3034: LD_EXP 6
3038: PPUSH
3039: LD_VAR 0 2
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 1
3051: ST_TO_ADDR
3052: GO 3026
3054: POP
3055: POP
// end ;
3056: LD_VAR 0 1
3060: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3061: LD_INT 0
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3077: LD_ADDR_VAR 0 14
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: LD_INT 2
3087: PUSH
3088: LD_INT 3
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: ST_TO_ADDR
// for i in gameTypes do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_VAR 0 14
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3116
// disable ( i ) ;
3109: LD_VAR 0 2
3113: DISABLE_MARKED
3114: GO 3106
3116: POP
3117: POP
// if Multiplayer then
3118: LD_OWVAR 4
3122: IFFALSE 3306
// begin mpGameType := mp_game_type ;
3124: LD_ADDR_EXP 3
3128: PUSH
3129: LD_OWVAR 6
3133: ST_TO_ADDR
// your_side := mp_player_side ;
3134: LD_ADDR_OWVAR 2
3138: PUSH
3139: LD_OWVAR 7
3143: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_OWVAR 17
3153: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3154: LD_ADDR_EXP 8
3158: PUSH
3159: LD_OWVAR 15
3163: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3164: LD_ADDR_EXP 9
3168: PUSH
3169: LD_OWVAR 16
3173: ST_TO_ADDR
// mpTeams := mp_teams ;
3174: LD_ADDR_EXP 10
3178: PUSH
3179: LD_OWVAR 12
3183: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3184: LD_ADDR_VAR 0 2
3188: PUSH
3189: DOUBLE
3190: LD_INT 1
3192: DEC
3193: ST_TO_ADDR
3194: LD_EXP 4
3198: PPUSH
3199: CALL 10998 0 1
3203: PUSH
3204: FOR_TO
3205: IFFALSE 3281
// begin setting := mpGameSettingsKeys [ i ] ;
3207: LD_ADDR_VAR 0 12
3211: PUSH
3212: LD_EXP 4
3216: PUSH
3217: LD_VAR 0 2
3221: ARRAY
3222: ST_TO_ADDR
// if setting then
3223: LD_VAR 0 12
3227: IFFALSE 3279
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3229: LD_ADDR_EXP 6
3233: PUSH
3234: LD_EXP 6
3238: PPUSH
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_EXP 5
3248: PUSH
3249: LD_VAR 0 2
3253: ARRAY
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: MINUS
3263: PPUSH
3264: CALL_OW 426
3268: PUSH
3269: LD_INT 1
3271: PLUS
3272: ARRAY
3273: PPUSH
3274: CALL_OW 1
3278: ST_TO_ADDR
// end ;
3279: GO 3204
3281: POP
3282: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3283: LD_ADDR_EXP 11
3287: PUSH
3288: LD_EXP 8
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: EMPTY
3297: LIST
3298: DIFF
3299: PUSH
3300: LD_INT 1
3302: GREATER
3303: ST_TO_ADDR
// end else
3304: GO 3306
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3306: LD_EXP 3
3310: PPUSH
3311: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3315: LD_EXP 18
3319: PPUSH
3320: CALL 10998 0 1
3324: IFFALSE 3355
// begin for i in mpMarkedAreas do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_EXP 18
3335: PUSH
3336: FOR_IN
3337: IFFALSE 3353
// SetAreaMapShow ( i , 0 ) ;
3339: LD_VAR 0 2
3343: PPUSH
3344: LD_INT 0
3346: PPUSH
3347: CALL_OW 424
3351: GO 3336
3353: POP
3354: POP
// end ; for i := 1 to 8 do
3355: LD_ADDR_VAR 0 2
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_INT 8
3367: PUSH
3368: FOR_TO
3369: IFFALSE 4585
// begin if not mpSidePositions [ i ] then
3371: LD_EXP 7
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: NOT
3382: IFFALSE 3386
// continue ;
3384: GO 3368
// side := i ;
3386: LD_ADDR_VAR 0 7
3390: PUSH
3391: LD_VAR 0 2
3395: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3396: LD_ADDR_VAR 0 9
3400: PUSH
3401: LD_EXP 9
3405: PUSH
3406: LD_VAR 0 2
3410: ARRAY
3411: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3412: LD_ADDR_VAR 0 8
3416: PUSH
3417: LD_EXP 7
3421: PUSH
3422: LD_VAR 0 2
3426: ARRAY
3427: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3428: LD_EXP 12
3432: PPUSH
3433: CALL 10998 0 1
3437: IFFALSE 3514
// begin for j in mpOilDeposits [ pos ] do
3439: LD_ADDR_VAR 0 3
3443: PUSH
3444: LD_EXP 12
3448: PUSH
3449: LD_VAR 0 8
3453: ARRAY
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3512
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3458: LD_VAR 0 3
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: LD_VAR 0 3
3471: PUSH
3472: LD_INT 2
3474: ARRAY
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3483: LD_VAR 0 3
3487: PUSH
3488: LD_INT 1
3490: ARRAY
3491: PPUSH
3492: LD_VAR 0 3
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: PPUSH
3501: LD_VAR 0 7
3505: PPUSH
3506: CALL_OW 441
// end ;
3510: GO 3455
3512: POP
3513: POP
// end ; if Count ( mpSibDeposits ) then
3514: LD_EXP 13
3518: PPUSH
3519: CALL 10998 0 1
3523: IFFALSE 3600
// begin for j in mpSibDeposits [ pos ] do
3525: LD_ADDR_VAR 0 3
3529: PUSH
3530: LD_EXP 13
3534: PUSH
3535: LD_VAR 0 8
3539: ARRAY
3540: PUSH
3541: FOR_IN
3542: IFFALSE 3598
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3544: LD_VAR 0 3
3548: PUSH
3549: LD_INT 1
3551: ARRAY
3552: PPUSH
3553: LD_VAR 0 3
3557: PUSH
3558: LD_INT 2
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PPUSH
3565: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3569: LD_VAR 0 3
3573: PUSH
3574: LD_INT 1
3576: ARRAY
3577: PPUSH
3578: LD_VAR 0 3
3582: PUSH
3583: LD_INT 2
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PPUSH
3592: CALL_OW 441
// end ;
3596: GO 3541
3598: POP
3599: POP
// end ; InitBc ;
3600: CALL_OW 21
// InitUc ;
3604: CALL_OW 18
// uc_side := side ;
3608: LD_ADDR_OWVAR 20
3612: PUSH
3613: LD_VAR 0 7
3617: ST_TO_ADDR
// uc_nation := nation ;
3618: LD_ADDR_OWVAR 21
3622: PUSH
3623: LD_VAR 0 9
3627: ST_TO_ADDR
// if Count ( mpDepots ) then
3628: LD_EXP 14
3632: PPUSH
3633: CALL 10998 0 1
3637: IFFALSE 3807
// begin bc_level := 0 ;
3639: LD_ADDR_OWVAR 43
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// bc_type := b_depot ;
3647: LD_ADDR_OWVAR 42
3651: PUSH
3652: LD_INT 0
3654: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3655: LD_ADDR_VAR 0 4
3659: PUSH
3660: LD_EXP 14
3664: PUSH
3665: LD_VAR 0 8
3669: ARRAY
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_EXP 14
3679: PUSH
3680: LD_VAR 0 8
3684: ARRAY
3685: PUSH
3686: LD_INT 2
3688: ARRAY
3689: PPUSH
3690: LD_EXP 14
3694: PUSH
3695: LD_VAR 0 8
3699: ARRAY
3700: PUSH
3701: LD_INT 3
3703: ARRAY
3704: PPUSH
3705: CALL_OW 47
3709: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_STRING @
3717: PUSH
3718: LD_VAR 0 7
3722: STR
3723: PPUSH
3724: CALL_OW 500
// SetTag ( b , side ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_VAR 0 7
3737: PPUSH
3738: CALL_OW 109
// if Count ( mpStartingResources ) then
3742: LD_EXP 15
3746: PPUSH
3747: CALL 10998 0 1
3751: IFFALSE 3805
// begin for j := 1 to mpStartingResources do
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_EXP 15
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3803
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3771: LD_VAR 0 4
3775: PPUSH
3776: CALL_OW 274
3780: PPUSH
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_EXP 15
3790: PUSH
3791: LD_VAR 0 3
3795: ARRAY
3796: PPUSH
3797: CALL_OW 277
3801: GO 3768
3803: POP
3804: POP
// end ; end else
3805: GO 3954
// if Count ( mpStartingResources ) then
3807: LD_EXP 15
3811: PPUSH
3812: CALL 10998 0 1
3816: IFFALSE 3954
// begin for j := 1 to mpStartingResources do
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_EXP 15
3832: PUSH
3833: FOR_TO
3834: IFFALSE 3952
// begin resources := mpStartingResources [ j ] ;
3836: LD_ADDR_VAR 0 13
3840: PUSH
3841: LD_EXP 15
3845: PUSH
3846: LD_VAR 0 3
3850: ARRAY
3851: ST_TO_ADDR
// repeat if resources >= 50 then
3852: LD_VAR 0 13
3856: PUSH
3857: LD_INT 50
3859: GREATEREQUAL
3860: IFFALSE 3906
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3862: LD_VAR 0 3
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_VAR 0 6
3879: PPUSH
3880: LD_INT 4
3882: PPUSH
3883: LD_INT 0
3885: PPUSH
3886: CALL_OW 60
// resources := resources - 50 ;
3890: LD_ADDR_VAR 0 13
3894: PUSH
3895: LD_VAR 0 13
3899: PUSH
3900: LD_INT 50
3902: MINUS
3903: ST_TO_ADDR
// end else
3904: GO 3940
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3906: LD_VAR 0 3
3910: PPUSH
3911: LD_VAR 0 13
3915: PUSH
3916: LD_INT 10
3918: DIV
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: LD_VAR 0 6
3929: PPUSH
3930: LD_INT 4
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 60
// until resources <= 0 ;
3940: LD_VAR 0 13
3944: PUSH
3945: LD_INT 0
3947: LESSEQUAL
3948: IFFALSE 3852
// end ;
3950: GO 3833
3952: POP
3953: POP
// end ; if Count ( mpBuildings ) then
3954: LD_EXP 17
3958: PPUSH
3959: CALL 10998 0 1
3963: IFFALSE 4041
// begin for j in mpBuildings [ pos ] do
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: LD_EXP 17
3974: PUSH
3975: LD_VAR 0 8
3979: ARRAY
3980: PUSH
3981: FOR_IN
3982: IFFALSE 4039
// begin bc_level := 0 ;
3984: LD_ADDR_OWVAR 43
3988: PUSH
3989: LD_INT 0
3991: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3992: LD_ADDR_OWVAR 42
3996: PUSH
3997: LD_VAR 0 3
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4006: LD_VAR 0 3
4010: PUSH
4011: LD_INT 2
4013: ARRAY
4014: PPUSH
4015: LD_VAR 0 3
4019: PUSH
4020: LD_INT 3
4022: ARRAY
4023: PPUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_INT 4
4031: ARRAY
4032: PPUSH
4033: CALL_OW 47
// end ;
4037: GO 3981
4039: POP
4040: POP
// end ; if mpBattleFlag > - 1 then
4041: LD_EXP 22
4045: PUSH
4046: LD_INT 1
4048: NEG
4049: GREATER
4050: IFFALSE 4209
// begin x := mpStartPos [ pos ] [ 1 ] ;
4052: LD_ADDR_VAR 0 5
4056: PUSH
4057: LD_EXP 21
4061: PUSH
4062: LD_VAR 0 8
4066: ARRAY
4067: PUSH
4068: LD_INT 1
4070: ARRAY
4071: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4072: LD_ADDR_VAR 0 6
4076: PUSH
4077: LD_EXP 21
4081: PUSH
4082: LD_VAR 0 8
4086: ARRAY
4087: PUSH
4088: LD_INT 2
4090: ARRAY
4091: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4092: LD_VAR 0 5
4096: PPUSH
4097: LD_VAR 0 6
4101: PPUSH
4102: LD_INT 12
4104: PPUSH
4105: LD_INT 2
4107: PPUSH
4108: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4112: LD_ADDR_EXP 23
4116: PUSH
4117: LD_EXP 23
4121: PPUSH
4122: LD_VAR 0 7
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: LD_VAR 0 5
4136: PPUSH
4137: LD_VAR 0 6
4141: PPUSH
4142: LD_INT 1
4144: PUSH
4145: LD_INT 100
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 70
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 3
4164: PUSH
4165: LD_INT 40
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 10
4174: PUSH
4175: LD_INT 25
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 20
4184: PUSH
4185: LD_INT 100
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 418
4203: PPUSH
4204: CALL_OW 1
4208: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4209: LD_EXP 26
4213: PUSH
4214: LD_INT 20
4216: PPUSH
4217: LD_VAR 0 7
4221: PPUSH
4222: CALL_OW 321
4226: PUSH
4227: LD_INT 1
4229: EQUAL
4230: AND
4231: IFFALSE 4248
// SetTech ( tech_SibDet , side , state_researched ) ;
4233: LD_INT 20
4235: PPUSH
4236: LD_VAR 0 7
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4248: LD_INT 24
4250: PPUSH
4251: LD_VAR 0 7
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 322
// if mpSibBomb = 1 then
4263: LD_EXP 28
4267: PUSH
4268: LD_INT 1
4270: EQUAL
4271: IFFALSE 4290
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4273: LD_INT 25
4275: PPUSH
4276: LD_VAR 0 7
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: CALL_OW 322
// end else
4288: GO 4305
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4290: LD_INT 25
4292: PPUSH
4293: LD_VAR 0 7
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 322
// end ; if mpVehicles then
4305: LD_EXP 35
4309: IFFALSE 4408
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: LD_VAR 0 7
4320: PPUSH
4321: LD_VAR 0 9
4325: PPUSH
4326: LD_EXP 35
4330: PPUSH
4331: CALL 5267 0 3
4335: PUSH
4336: FOR_IN
4337: IFFALSE 4406
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4339: LD_VAR 0 3
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: LD_INT 5
4349: PPUSH
4350: CALL_OW 12
4354: PPUSH
4355: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4359: LD_VAR 0 3
4363: PPUSH
4364: LD_EXP 21
4368: PUSH
4369: LD_VAR 0 8
4373: ARRAY
4374: PUSH
4375: LD_INT 1
4377: ARRAY
4378: PPUSH
4379: LD_EXP 21
4383: PUSH
4384: LD_VAR 0 8
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: LD_INT 12
4396: PPUSH
4397: LD_INT 0
4399: PPUSH
4400: CALL_OW 50
// end ;
4404: GO 4336
4406: POP
4407: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4408: LD_ADDR_VAR 0 11
4412: PUSH
4413: LD_VAR 0 7
4417: PPUSH
4418: LD_VAR 0 9
4422: PPUSH
4423: LD_EXP 24
4427: PPUSH
4428: LD_EXP 25
4432: PPUSH
4433: CALL 4997 0 4
4437: ST_TO_ADDR
// for j in team do
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: LD_VAR 0 11
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4498
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_EXP 21
4460: PUSH
4461: LD_VAR 0 8
4465: ARRAY
4466: PUSH
4467: LD_INT 1
4469: ARRAY
4470: PPUSH
4471: LD_EXP 21
4475: PUSH
4476: LD_VAR 0 8
4480: ARRAY
4481: PUSH
4482: LD_INT 2
4484: ARRAY
4485: PPUSH
4486: LD_INT 12
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 50
4496: GO 4448
4498: POP
4499: POP
// if mpApemans then
4500: LD_EXP 30
4504: IFFALSE 4583
// begin for j := 1 to mpApemans do
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 30
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4581
// begin PrepareApeman ( - 5 ) ;
4524: LD_INT 5
4526: NEG
4527: PPUSH
4528: CALL 42855 0 1
// ape := CreateHuman ;
4532: LD_ADDR_VAR 0 10
4536: PUSH
4537: CALL_OW 44
4541: ST_TO_ADDR
// SetTag ( ape , side ) ;
4542: LD_VAR 0 10
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4556: LD_VAR 0 10
4560: PPUSH
4561: LD_EXP 31
4565: PUSH
4566: LD_VAR 0 8
4570: ARRAY
4571: PPUSH
4572: LD_INT 0
4574: PPUSH
4575: CALL_OW 49
// end ;
4579: GO 4521
4581: POP
4582: POP
// end ; end ;
4583: GO 3368
4585: POP
4586: POP
// if not mpTeamGame then
4587: LD_EXP 11
4591: NOT
4592: IFFALSE 4690
// begin for i := 1 to 8 do
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: DOUBLE
4600: LD_INT 1
4602: DEC
4603: ST_TO_ADDR
4604: LD_INT 8
4606: PUSH
4607: FOR_TO
4608: IFFALSE 4686
// for j := 1 to 8 do
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: DOUBLE
4616: LD_INT 1
4618: DEC
4619: ST_TO_ADDR
4620: LD_INT 8
4622: PUSH
4623: FOR_TO
4624: IFFALSE 4682
// if i <> j then
4626: LD_VAR 0 2
4630: PUSH
4631: LD_VAR 0 3
4635: NONEQUAL
4636: IFFALSE 4660
// SetAttitude ( i , j , att_neutral , true ) else
4638: LD_VAR 0 2
4642: PPUSH
4643: LD_VAR 0 3
4647: PPUSH
4648: LD_INT 0
4650: PPUSH
4651: LD_INT 1
4653: PPUSH
4654: CALL_OW 80
4658: GO 4680
// SetAttitude ( i , j , att_friend , true ) ;
4660: LD_VAR 0 2
4664: PPUSH
4665: LD_VAR 0 3
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 80
4680: GO 4623
4682: POP
4683: POP
4684: GO 4607
4686: POP
4687: POP
// end else
4688: GO 4865
// begin if mpSharedVision then
4690: LD_EXP 16
4694: IFFALSE 4759
// begin for i in mpTeams do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: LD_EXP 10
4705: PUSH
4706: FOR_IN
4707: IFFALSE 4757
// for j := 2 to i do
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: DOUBLE
4715: LD_INT 2
4717: DEC
4718: ST_TO_ADDR
4719: LD_VAR 0 2
4723: PUSH
4724: FOR_TO
4725: IFFALSE 4753
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4727: LD_VAR 0 2
4731: PUSH
4732: LD_VAR 0 3
4736: ARRAY
4737: PPUSH
4738: LD_VAR 0 2
4742: PUSH
4743: LD_INT 1
4745: ARRAY
4746: PPUSH
4747: CALL_OW 343
4751: GO 4724
4753: POP
4754: POP
4755: GO 4706
4757: POP
4758: POP
// end ; for i := 1 to 8 do
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 8
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4863
// for j := 1 to 8 do
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 8
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4859
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4791: LD_EXP 8
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PUSH
4802: LD_EXP 8
4806: PUSH
4807: LD_VAR 0 3
4811: ARRAY
4812: EQUAL
4813: IFFALSE 4837
// SetAttitude ( i , j , att_friend , true ) else
4815: LD_VAR 0 2
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_INT 1
4830: PPUSH
4831: CALL_OW 80
4835: GO 4857
// SetAttitude ( i , j , att_enemy , true ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 2
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 80
4857: GO 4788
4859: POP
4860: POP
4861: GO 4772
4863: POP
4864: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4865: LD_ADDR_OWVAR 71
4869: PUSH
4870: LD_EXP 9
4874: PUSH
4875: LD_OWVAR 2
4879: ARRAY
4880: ST_TO_ADDR
// if IAmSpec then
4881: CALL_OW 531
4885: IFFALSE 4926
// begin FogOff ( true ) ;
4887: LD_INT 1
4889: PPUSH
4890: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PUSH
4903: LD_INT 2
4905: DIV
4906: PPUSH
4907: LD_EXP 29
4911: PUSH
4912: LD_INT 2
4914: ARRAY
4915: PUSH
4916: LD_INT 2
4918: DIV
4919: PPUSH
4920: CALL_OW 86
// end else
4924: GO 4972
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4926: LD_EXP 21
4930: PUSH
4931: LD_EXP 7
4935: PUSH
4936: LD_OWVAR 2
4940: ARRAY
4941: ARRAY
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: PPUSH
4947: LD_EXP 21
4951: PUSH
4952: LD_EXP 7
4956: PUSH
4957: LD_OWVAR 2
4961: ARRAY
4962: ARRAY
4963: PUSH
4964: LD_INT 2
4966: ARRAY
4967: PPUSH
4968: CALL_OW 86
// end ; BeginBuildUp ;
4972: CALL 5745 0 0
// enable ( mpActive ) ;
4976: LD_INT 100
4978: ENABLE_MARKED
// enable ( mpGameType ) ;
4979: LD_EXP 3
4983: ENABLE_MARKED
// mpGameActive := true ;
4984: LD_ADDR_EXP 38
4988: PUSH
4989: LD_INT 1
4991: ST_TO_ADDR
// end ;
4992: LD_VAR 0 1
4996: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// result := [ ] ;
5002: LD_ADDR_VAR 0 5
5006: PUSH
5007: EMPTY
5008: ST_TO_ADDR
// class := class_soldier ;
5009: LD_ADDR_VAR 0 7
5013: PUSH
5014: LD_INT 1
5016: ST_TO_ADDR
// uc_side := side ;
5017: LD_ADDR_OWVAR 20
5021: PUSH
5022: LD_VAR 0 1
5026: ST_TO_ADDR
// uc_nation := nation ;
5027: LD_ADDR_OWVAR 21
5031: PUSH
5032: LD_VAR 0 2
5036: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5037: LD_ADDR_OWVAR 26
5041: PUSH
5042: LD_OWVAR 19
5046: PUSH
5047: LD_VAR 0 1
5051: ARRAY
5052: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 2
5058: PPUSH
5059: CALL_OW 12
5063: PPUSH
5064: LD_VAR 0 7
5068: PPUSH
5069: LD_VAR 0 4
5073: PUSH
5074: LD_INT 2
5076: PLUS
5077: PPUSH
5078: CALL_OW 380
// hc_importance := 105 ;
5082: LD_ADDR_OWVAR 32
5086: PUSH
5087: LD_INT 105
5089: ST_TO_ADDR
// if Multiplayer then
5090: LD_OWVAR 4
5094: IFFALSE 5134
// begin hc_gallery := MULTIAVATARS ;
5096: LD_ADDR_OWVAR 33
5100: PUSH
5101: LD_STRING MULTIAVATARS
5103: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5104: LD_ADDR_OWVAR 34
5108: PUSH
5109: LD_VAR 0 1
5113: PPUSH
5114: CALL_OW 525
5118: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5119: LD_ADDR_OWVAR 27
5123: PUSH
5124: LD_VAR 0 1
5128: PPUSH
5129: CALL_OW 526
5133: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5134: LD_ADDR_VAR 0 5
5138: PUSH
5139: LD_VAR 0 5
5143: PPUSH
5144: CALL_OW 44
5148: PPUSH
5149: CALL 46587 0 2
5153: ST_TO_ADDR
// InitHc_All ( ) ;
5154: CALL_OW 584
// class := 2 ;
5158: LD_ADDR_VAR 0 7
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5166: LD_ADDR_VAR 0 6
5170: PUSH
5171: DOUBLE
5172: LD_INT 1
5174: DEC
5175: ST_TO_ADDR
5176: LD_VAR 0 3
5180: PUSH
5181: LD_INT 1
5183: MINUS
5184: PUSH
5185: FOR_TO
5186: IFFALSE 5260
// begin PrepareHuman ( false , class , skill ) ;
5188: LD_INT 0
5190: PPUSH
5191: LD_VAR 0 7
5195: PPUSH
5196: LD_VAR 0 4
5200: PPUSH
5201: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
5205: LD_ADDR_VAR 0 5
5209: PUSH
5210: LD_VAR 0 5
5214: PPUSH
5215: CALL_OW 44
5219: PPUSH
5220: CALL 46587 0 2
5224: ST_TO_ADDR
// class := Inc ( class ) ;
5225: LD_ADDR_VAR 0 7
5229: PUSH
5230: LD_VAR 0 7
5234: PPUSH
5235: CALL 47948 0 1
5239: ST_TO_ADDR
// if class = 5 then
5240: LD_VAR 0 7
5244: PUSH
5245: LD_INT 5
5247: EQUAL
5248: IFFALSE 5258
// class := 1 ;
5250: LD_ADDR_VAR 0 7
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// end ;
5258: GO 5185
5260: POP
5261: POP
// end ;
5262: LD_VAR 0 5
5266: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5267: LD_INT 0
5269: PPUSH
5270: PPUSH
// result := [ ] ;
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: EMPTY
5277: ST_TO_ADDR
// if not vehicles then
5278: LD_VAR 0 3
5282: NOT
5283: IFFALSE 5287
// exit ;
5285: GO 5446
// for i := 1 to vehicles [ nation ] do
5287: LD_ADDR_VAR 0 5
5291: PUSH
5292: DOUBLE
5293: LD_INT 1
5295: DEC
5296: ST_TO_ADDR
5297: LD_VAR 0 3
5301: PUSH
5302: LD_VAR 0 2
5306: ARRAY
5307: PUSH
5308: FOR_TO
5309: IFFALSE 5444
// begin uc_side := side ;
5311: LD_ADDR_OWVAR 20
5315: PUSH
5316: LD_VAR 0 1
5320: ST_TO_ADDR
// uc_nation := nation ;
5321: LD_ADDR_OWVAR 21
5325: PUSH
5326: LD_VAR 0 2
5330: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5331: LD_VAR 0 3
5335: PUSH
5336: LD_VAR 0 2
5340: ARRAY
5341: PUSH
5342: LD_VAR 0 5
5346: ARRAY
5347: PUSH
5348: LD_INT 1
5350: ARRAY
5351: PPUSH
5352: LD_VAR 0 3
5356: PUSH
5357: LD_VAR 0 2
5361: ARRAY
5362: PUSH
5363: LD_VAR 0 5
5367: ARRAY
5368: PUSH
5369: LD_INT 2
5371: ARRAY
5372: PPUSH
5373: LD_VAR 0 3
5377: PUSH
5378: LD_VAR 0 2
5382: ARRAY
5383: PUSH
5384: LD_VAR 0 5
5388: ARRAY
5389: PUSH
5390: LD_INT 3
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PUSH
5399: LD_VAR 0 2
5403: ARRAY
5404: PUSH
5405: LD_VAR 0 5
5409: ARRAY
5410: PUSH
5411: LD_INT 4
5413: ARRAY
5414: PPUSH
5415: LD_INT 80
5417: PPUSH
5418: CALL 13736 0 5
// result := Join ( result , CreateVehicle ) ;
5422: LD_ADDR_VAR 0 4
5426: PUSH
5427: LD_VAR 0 4
5431: PPUSH
5432: CALL_OW 45
5436: PPUSH
5437: CALL 46587 0 2
5441: ST_TO_ADDR
// end ;
5442: GO 5308
5444: POP
5445: POP
// end ;
5446: LD_VAR 0 4
5450: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// for i in mpBattleFlags do
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_EXP 23
5464: PUSH
5465: FOR_IN
5466: IFFALSE 5543
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5468: LD_VAR 0 3
5472: PPUSH
5473: LD_INT 1
5475: PUSH
5476: LD_VAR 0 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 2
5487: PUSH
5488: LD_VAR 0 1
5492: PUSH
5493: LD_REAL  7.00000000000000E-0001
5496: MUL
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 3
5504: PUSH
5505: LD_VAR 0 1
5509: PUSH
5510: LD_REAL  4.00000000000000E-0001
5513: MUL
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 20
5521: PUSH
5522: LD_VAR 0 1
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 423
5541: GO 5465
5543: POP
5544: POP
// end ;
5545: LD_VAR 0 2
5549: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5550: LD_INT 100
5552: IFFALSE 5647
5554: GO 5556
5556: DISABLE
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
// begin if mpBattleFlag <= 0 then
5561: LD_EXP 22
5565: PUSH
5566: LD_INT 0
5568: LESSEQUAL
5569: IFFALSE 5573
// exit ;
5571: GO 5647
// strength := 100 ;
5573: LD_ADDR_VAR 0 2
5577: PUSH
5578: LD_INT 100
5580: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5581: LD_EXP 22
5585: PPUSH
5586: CALL_OW 67
// strength := Dec ( strength ) ;
5590: LD_ADDR_VAR 0 2
5594: PUSH
5595: LD_VAR 0 2
5599: PPUSH
5600: CALL 47970 0 1
5604: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5605: LD_VAR 0 2
5609: PPUSH
5610: CALL 5451 0 1
// until not strength ;
5614: LD_VAR 0 2
5618: NOT
5619: IFFALSE 5581
// for i in mpBattleFlags do
5621: LD_ADDR_VAR 0 1
5625: PUSH
5626: LD_EXP 23
5630: PUSH
5631: FOR_IN
5632: IFFALSE 5645
// KillBattleFlag ( i ) ;
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 419
5643: GO 5631
5645: POP
5646: POP
// end ;
5647: PPOPN 2
5649: END
// every 0 0$1 marked mpActive do var side , tmp ;
5650: GO 5652
5652: DISABLE
5653: LD_INT 0
5655: PPUSH
5656: PPUSH
// begin if mpSibBomb <= 1 then
5657: LD_EXP 28
5661: PUSH
5662: LD_INT 1
5664: LESSEQUAL
5665: IFFALSE 5669
// exit ;
5667: GO 5742
// tmp := mpSibBomb ;
5669: LD_ADDR_VAR 0 2
5673: PUSH
5674: LD_EXP 28
5678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5679: LD_INT 35
5681: PPUSH
5682: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5686: LD_ADDR_VAR 0 2
5690: PUSH
5691: LD_VAR 0 2
5695: PUSH
5696: LD_INT 35
5698: MINUS
5699: ST_TO_ADDR
// until not tmp ;
5700: LD_VAR 0 2
5704: NOT
5705: IFFALSE 5679
// for side := 1 to 8 do
5707: LD_ADDR_VAR 0 1
5711: PUSH
5712: DOUBLE
5713: LD_INT 1
5715: DEC
5716: ST_TO_ADDR
5717: LD_INT 8
5719: PUSH
5720: FOR_TO
5721: IFFALSE 5740
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5723: LD_INT 25
5725: PPUSH
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_INT 1
5733: PPUSH
5734: CALL_OW 322
5738: GO 5720
5740: POP
5741: POP
// end ;
5742: PPOPN 2
5744: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
// mpBuildUpTimeDelay := 0 ;
5750: LD_ADDR_EXP 41
5754: PUSH
5755: LD_INT 0
5757: ST_TO_ADDR
// if not mpBuildUpTime then
5758: LD_EXP 20
5762: NOT
5763: IFFALSE 5767
// exit ;
5765: GO 5950
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5767: LD_ADDR_EXP 41
5771: PUSH
5772: LD_INT 8400
5774: PUSH
5775: LD_INT 2100
5777: PUSH
5778: LD_EXP 20
5782: MUL
5783: PLUS
5784: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5785: LD_ADDR_EXP 42
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// for i := 1 to 8 do
5793: LD_ADDR_VAR 0 2
5797: PUSH
5798: DOUBLE
5799: LD_INT 1
5801: DEC
5802: ST_TO_ADDR
5803: LD_INT 8
5805: PUSH
5806: FOR_TO
5807: IFFALSE 5948
// if mpSidePositions [ i ] then
5809: LD_EXP 7
5813: PUSH
5814: LD_VAR 0 2
5818: ARRAY
5819: IFFALSE 5946
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
5821: LD_EXP 19
5825: PUSH
5826: LD_EXP 7
5830: PUSH
5831: LD_VAR 0 2
5835: ARRAY
5836: ARRAY
5837: PPUSH
5838: LD_INT 5
5840: PPUSH
5841: CALL_OW 424
// for j := 1 to 8 do
5845: LD_ADDR_VAR 0 3
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_INT 8
5857: PUSH
5858: FOR_TO
5859: IFFALSE 5944
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
5861: LD_EXP 7
5865: PUSH
5866: LD_VAR 0 3
5870: ARRAY
5871: PUSH
5872: LD_EXP 8
5876: PUSH
5877: LD_VAR 0 2
5881: ARRAY
5882: PUSH
5883: LD_EXP 8
5887: PUSH
5888: LD_VAR 0 3
5892: ARRAY
5893: NONEQUAL
5894: PUSH
5895: LD_EXP 11
5899: NOT
5900: PUSH
5901: LD_VAR 0 2
5905: PUSH
5906: LD_VAR 0 3
5910: NONEQUAL
5911: AND
5912: OR
5913: AND
5914: IFFALSE 5942
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
5916: LD_VAR 0 3
5920: PPUSH
5921: LD_EXP 19
5925: PUSH
5926: LD_EXP 7
5930: PUSH
5931: LD_VAR 0 2
5935: ARRAY
5936: ARRAY
5937: PPUSH
5938: CALL_OW 333
5942: GO 5858
5944: POP
5945: POP
// end ;
5946: GO 5806
5948: POP
5949: POP
// end ;
5950: LD_VAR 0 1
5954: RET
// function EndBuildUp ; var i , j ; begin
5955: LD_INT 0
5957: PPUSH
5958: PPUSH
5959: PPUSH
// mpBuildUpTimeActive := false ;
5960: LD_ADDR_EXP 42
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// for i := 1 to 8 do
5968: LD_ADDR_VAR 0 2
5972: PUSH
5973: DOUBLE
5974: LD_INT 1
5976: DEC
5977: ST_TO_ADDR
5978: LD_INT 8
5980: PUSH
5981: FOR_TO
5982: IFFALSE 6123
// if mpSidePositions [ i ] then
5984: LD_EXP 7
5988: PUSH
5989: LD_VAR 0 2
5993: ARRAY
5994: IFFALSE 6121
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
5996: LD_EXP 19
6000: PUSH
6001: LD_EXP 7
6005: PUSH
6006: LD_VAR 0 2
6010: ARRAY
6011: ARRAY
6012: PPUSH
6013: LD_INT 0
6015: PPUSH
6016: CALL_OW 424
// for j := 1 to 8 do
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: DOUBLE
6026: LD_INT 1
6028: DEC
6029: ST_TO_ADDR
6030: LD_INT 8
6032: PUSH
6033: FOR_TO
6034: IFFALSE 6119
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6036: LD_EXP 7
6040: PUSH
6041: LD_VAR 0 3
6045: ARRAY
6046: PUSH
6047: LD_EXP 8
6051: PUSH
6052: LD_VAR 0 2
6056: ARRAY
6057: PUSH
6058: LD_EXP 8
6062: PUSH
6063: LD_VAR 0 3
6067: ARRAY
6068: NONEQUAL
6069: PUSH
6070: LD_EXP 11
6074: NOT
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_VAR 0 3
6085: NONEQUAL
6086: AND
6087: OR
6088: AND
6089: IFFALSE 6117
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6091: LD_VAR 0 3
6095: PPUSH
6096: LD_EXP 19
6100: PUSH
6101: LD_EXP 7
6105: PUSH
6106: LD_VAR 0 2
6110: ARRAY
6111: ARRAY
6112: PPUSH
6113: CALL_OW 334
6117: GO 6033
6119: POP
6120: POP
// end ;
6121: GO 5981
6123: POP
6124: POP
// end ;
6125: LD_VAR 0 1
6129: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6130: LD_EXP 42
6134: IFFALSE 6309
6136: GO 6138
6138: DISABLE
6139: LD_INT 0
6141: PPUSH
6142: PPUSH
// begin for i := 1 to 8 do
6143: LD_ADDR_VAR 0 1
6147: PUSH
6148: DOUBLE
6149: LD_INT 1
6151: DEC
6152: ST_TO_ADDR
6153: LD_INT 8
6155: PUSH
6156: FOR_TO
6157: IFFALSE 6306
// if mpSidePositions [ i ] then
6159: LD_EXP 7
6163: PUSH
6164: LD_VAR 0 1
6168: ARRAY
6169: IFFALSE 6304
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: LD_EXP 19
6180: PUSH
6181: LD_EXP 7
6185: PUSH
6186: LD_VAR 0 1
6190: ARRAY
6191: ARRAY
6192: PPUSH
6193: LD_INT 2
6195: PUSH
6196: LD_INT 21
6198: PUSH
6199: LD_INT 1
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 21
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_OWVAR 2
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PPUSH
6237: CALL_OW 70
6241: PUSH
6242: FOR_IN
6243: IFFALSE 6302
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6245: LD_EXP 8
6249: PUSH
6250: LD_VAR 0 1
6254: ARRAY
6255: PUSH
6256: LD_EXP 8
6260: PUSH
6261: LD_OWVAR 2
6265: ARRAY
6266: NONEQUAL
6267: PUSH
6268: LD_EXP 11
6272: NOT
6273: PUSH
6274: LD_VAR 0 1
6278: PUSH
6279: LD_OWVAR 2
6283: NONEQUAL
6284: AND
6285: OR
6286: IFFALSE 6300
// ComMoveToArea ( un , BuildUpEscape ) ;
6288: LD_VAR 0 2
6292: PPUSH
6293: LD_INT 15
6295: PPUSH
6296: CALL_OW 113
6300: GO 6242
6302: POP
6303: POP
6304: GO 6156
6306: POP
6307: POP
// enable ;
6308: ENABLE
// end ;
6309: PPOPN 2
6311: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6312: LD_EXP 20
6316: IFFALSE 6366
6318: GO 6320
6320: DISABLE
6321: LD_INT 0
6323: PPUSH
// begin tmp := mpBuildUpTime ;
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_EXP 20
6333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6334: LD_INT 35
6336: PPUSH
6337: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6341: LD_ADDR_VAR 0 1
6345: PUSH
6346: LD_VAR 0 1
6350: PUSH
6351: LD_INT 35
6353: MINUS
6354: ST_TO_ADDR
// until not tmp ;
6355: LD_VAR 0 1
6359: NOT
6360: IFFALSE 6334
// EndBuildUp ;
6362: CALL 5955 0 0
// end ;
6366: PPOPN 1
6368: END
// every 0 0$1 trigger mpActive marked mpWin do
6369: LD_INT 100
6371: IFFALSE 6405
6373: GO 6375
6375: DISABLE
// begin if IAmServer then
6376: CALL_OW 518
6380: IFFALSE 6389
// wait ( 0 0$3 ) ;
6382: LD_INT 105
6384: PPUSH
6385: CALL_OW 67
// if Multiplayer then
6389: LD_OWVAR 4
6393: IFFALSE 6401
// YouWinInMultiplayer else
6395: CALL_OW 106
6399: GO 6405
// YouWin ;
6401: CALL_OW 103
// end ;
6405: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6406: LD_INT 0
6408: PPUSH
// result := false ;
6409: LD_ADDR_VAR 0 3
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// case gameType of GameTypeNormal :
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 1
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 6503
6430: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6431: LD_ADDR_VAR 0 3
6435: PUSH
6436: LD_INT 22
6438: PUSH
6439: LD_VAR 0 2
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 21
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 33
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 33
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 69
6495: PPUSH
6496: CALL 10998 0 1
6500: ST_TO_ADDR
// end ; GameTypeSurvival :
6501: GO 6738
6503: LD_INT 2
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6639
6511: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6512: LD_ADDR_VAR 0 3
6516: PUSH
6517: LD_INT 22
6519: PUSH
6520: LD_VAR 0 2
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: LD_INT 30
6534: PUSH
6535: LD_INT 0
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 30
6544: PUSH
6545: LD_INT 1
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 69
6565: PPUSH
6566: CALL 10998 0 1
6570: PUSH
6571: LD_INT 22
6573: PUSH
6574: LD_VAR 0 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 2
6585: PUSH
6586: LD_INT 21
6588: PUSH
6589: LD_INT 1
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 33
6598: PUSH
6599: LD_INT 3
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 33
6608: PUSH
6609: LD_INT 5
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 69
6630: PPUSH
6631: CALL 10998 0 1
6635: AND
6636: ST_TO_ADDR
// end ; GameTypeKing :
6637: GO 6738
6639: LD_INT 3
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6737
6647: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 22
6655: PUSH
6656: LD_VAR 0 2
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 33
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 33
6690: PUSH
6691: LD_INT 5
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PPUSH
6708: CALL_OW 69
6712: PPUSH
6713: CALL 10998 0 1
6717: PUSH
6718: LD_VAR 0 2
6722: PPUSH
6723: CALL 73972 0 1
6727: PUSH
6728: LD_EXP 34
6732: GREATEREQUAL
6733: OR
6734: ST_TO_ADDR
// end ; end ;
6735: GO 6738
6737: POP
// end ;
6738: LD_VAR 0 3
6742: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6743: LD_INT 100
6745: IFFALSE 6967
6747: GO 6749
6749: DISABLE
6750: LD_INT 0
6752: PPUSH
6753: PPUSH
// begin if Multiplayer then
6754: LD_OWVAR 4
6758: IFFALSE 6766
// SetPlayerSpectator ( ) else
6760: CALL_OW 572
6764: GO 6775
// FogOff ( your_side ) ;
6766: LD_OWVAR 2
6770: PPUSH
6771: CALL_OW 344
// repeat gameIsOn := false ;
6775: LD_ADDR_VAR 0 1
6779: PUSH
6780: LD_INT 0
6782: ST_TO_ADDR
// for i := 1 to 8 do
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: DOUBLE
6789: LD_INT 1
6791: DEC
6792: ST_TO_ADDR
6793: LD_INT 8
6795: PUSH
6796: FOR_TO
6797: IFFALSE 6919
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6799: LD_EXP 7
6803: PUSH
6804: LD_VAR 0 2
6808: ARRAY
6809: PUSH
6810: LD_VAR 0 2
6814: PPUSH
6815: CALL_OW 108
6819: AND
6820: PUSH
6821: LD_VAR 0 2
6825: PUSH
6826: LD_OWVAR 2
6830: NONEQUAL
6831: AND
6832: IFFALSE 6917
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
6834: LD_EXP 8
6838: PUSH
6839: LD_VAR 0 2
6843: ARRAY
6844: NOT
6845: PUSH
6846: LD_EXP 8
6850: PUSH
6851: LD_VAR 0 2
6855: ARRAY
6856: PUSH
6857: LD_EXP 8
6861: PUSH
6862: LD_OWVAR 2
6866: ARRAY
6867: NONEQUAL
6868: PUSH
6869: LD_OWVAR 2
6873: PPUSH
6874: LD_VAR 0 2
6878: PPUSH
6879: CALL_OW 81
6883: PUSH
6884: LD_INT 1
6886: NONEQUAL
6887: AND
6888: OR
6889: IFFALSE 6917
// if HasPowerByGameType ( mpGameType , i ) then
6891: LD_EXP 3
6895: PPUSH
6896: LD_VAR 0 2
6900: PPUSH
6901: CALL 6406 0 2
6905: IFFALSE 6917
// begin gameIsOn := true ;
6907: LD_ADDR_VAR 0 1
6911: PUSH
6912: LD_INT 1
6914: ST_TO_ADDR
// break ;
6915: GO 6919
// end ;
6917: GO 6796
6919: POP
6920: POP
// wait ( 100 ) ;
6921: LD_INT 100
6923: PPUSH
6924: CALL_OW 67
// until not gameIsOn ;
6928: LD_VAR 0 1
6932: NOT
6933: IFFALSE 6775
// if IAmServer then
6935: CALL_OW 518
6939: IFFALSE 6948
// wait ( 0 0$3 ) ;
6941: LD_INT 105
6943: PPUSH
6944: CALL_OW 67
// if Multiplayer then
6948: LD_OWVAR 4
6952: IFFALSE 6960
// YouLostInMultiplayer else
6954: CALL_OW 107
6958: GO 6967
// YouLost (  ) ;
6960: LD_STRING 
6962: PPUSH
6963: CALL_OW 104
// end ;
6967: PPOPN 2
6969: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
6970: LD_EXP 32
6974: IFFALSE 7321
6976: GO 6978
6978: DISABLE
6979: LD_INT 0
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
6986: LD_ADDR_VAR 0 5
6990: PUSH
6991: LD_INT 1
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 3
6999: PUSH
7000: LD_INT 4
7002: PUSH
7003: LD_INT 5
7005: PUSH
7006: LD_INT 6
7008: PUSH
7009: LD_INT 7
7011: PUSH
7012: LD_INT 8
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7025: LD_INT 350
7027: PPUSH
7028: CALL_OW 67
// for i := 1 to 8 do
7032: LD_ADDR_VAR 0 1
7036: PUSH
7037: DOUBLE
7038: LD_INT 1
7040: DEC
7041: ST_TO_ADDR
7042: LD_INT 8
7044: PUSH
7045: FOR_TO
7046: IFFALSE 7291
// begin j := sides [ i ] ;
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_VAR 0 5
7057: PUSH
7058: LD_VAR 0 1
7062: ARRAY
7063: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7064: LD_EXP 39
7068: PUSH
7069: LD_VAR 0 2
7073: ARRAY
7074: PPUSH
7075: CALL 10998 0 1
7079: PUSH
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL_OW 108
7089: AND
7090: PUSH
7091: LD_EXP 3
7095: PPUSH
7096: LD_VAR 0 2
7100: PPUSH
7101: CALL 6406 0 2
7105: AND
7106: IFFALSE 7289
// begin wait ( mpRespawn div 3 ) ;
7108: LD_EXP 32
7112: PUSH
7113: LD_INT 3
7115: DIV
7116: PPUSH
7117: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7121: LD_ADDR_VAR 0 3
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_VAR 0 2
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 50
7140: PUSH
7141: EMPTY
7142: LIST
7143: PUSH
7144: LD_INT 2
7146: PUSH
7147: LD_INT 30
7149: PUSH
7150: LD_INT 0
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 30
7159: PUSH
7160: LD_INT 1
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: PPUSH
7177: CALL_OW 69
7181: ST_TO_ADDR
// if not tmp then
7182: LD_VAR 0 3
7186: NOT
7187: IFFALSE 7191
// continue ;
7189: GO 7045
// spawn := tmp [ 1 ] ;
7191: LD_ADDR_VAR 0 4
7195: PUSH
7196: LD_VAR 0 3
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7205: LD_EXP 39
7209: PUSH
7210: LD_VAR 0 2
7214: ARRAY
7215: PUSH
7216: LD_INT 1
7218: ARRAY
7219: PPUSH
7220: LD_VAR 0 4
7224: PPUSH
7225: CALL_OW 250
7229: PPUSH
7230: LD_VAR 0 4
7234: PPUSH
7235: CALL_OW 251
7239: PPUSH
7240: LD_INT 32
7242: PPUSH
7243: LD_INT 1
7245: PPUSH
7246: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7250: LD_ADDR_EXP 39
7254: PUSH
7255: LD_EXP 39
7259: PPUSH
7260: LD_VAR 0 2
7264: PPUSH
7265: LD_EXP 39
7269: PUSH
7270: LD_VAR 0 2
7274: ARRAY
7275: PPUSH
7276: LD_INT 1
7278: PPUSH
7279: CALL_OW 3
7283: PPUSH
7284: CALL_OW 1
7288: ST_TO_ADDR
// end ; end ;
7289: GO 7045
7291: POP
7292: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7293: LD_ADDR_VAR 0 5
7297: PUSH
7298: LD_VAR 0 5
7302: PPUSH
7303: LD_INT 1
7305: PPUSH
7306: LD_INT 8
7308: PPUSH
7309: LD_INT 1
7311: PPUSH
7312: CALL 13276 0 4
7316: ST_TO_ADDR
// until false ;
7317: LD_INT 0
7319: IFFALSE 7025
// end ;
7321: PPOPN 5
7323: END
// every 0 0$1 marked mpActive do
7324: GO 7326
7326: DISABLE
// begin enable ;
7327: ENABLE
// if not mpDisplayStrings then
7328: LD_EXP 37
7332: NOT
7333: IFFALSE 7344
// begin display_strings := [ ] ;
7335: LD_ADDR_OWVAR 47
7339: PUSH
7340: EMPTY
7341: ST_TO_ADDR
// exit ;
7342: GO 7354
// end ; display_strings := mpDisplayStrings ;
7344: LD_ADDR_OWVAR 47
7348: PUSH
7349: LD_EXP 37
7353: ST_TO_ADDR
// end ; end_of_file
7354: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7355: LD_INT 0
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
7363: PPUSH
7364: PPUSH
7365: PPUSH
// if GetType ( un ) = unit_vehicle then
7366: LD_VAR 0 1
7370: PPUSH
7371: CALL_OW 247
7375: PUSH
7376: LD_INT 2
7378: EQUAL
7379: IFFALSE 7383
// exit ;
7381: GO 7940
// side := GetSide ( un ) ;
7383: LD_ADDR_VAR 0 9
7387: PUSH
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 255
7397: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7398: LD_EXP 3
7402: PUSH
7403: LD_INT 2
7405: EQUAL
7406: IFFALSE 7499
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 266
7417: PUSH
7418: LD_INT 0
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: IN
7428: PUSH
7429: LD_VAR 0 1
7433: PPUSH
7434: CALL_OW 110
7438: PUSH
7439: LD_VAR 0 9
7443: EQUAL
7444: AND
7445: IFFALSE 7499
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7447: LD_ADDR_VAR 0 3
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_VAR 0 9
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: PUSH
7483: FOR_IN
7484: IFFALSE 7497
// KillUnit ( i ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: CALL_OW 66
7495: GO 7483
7497: POP
7498: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7499: LD_VAR 0 1
7503: PPUSH
7504: CALL_OW 257
7508: PUSH
7509: LD_INT 12
7511: PUSH
7512: LD_INT 17
7514: PUSH
7515: LD_INT 15
7517: PUSH
7518: LD_INT 16
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: IN
7527: PUSH
7528: LD_VAR 0 1
7532: PPUSH
7533: CALL_OW 263
7537: PUSH
7538: LD_INT 5
7540: EQUAL
7541: OR
7542: IFFALSE 7676
// begin tag := GetTag ( un ) ;
7544: LD_ADDR_VAR 0 5
7548: PUSH
7549: LD_VAR 0 1
7553: PPUSH
7554: CALL_OW 110
7558: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7559: LD_ADDR_VAR 0 7
7563: PUSH
7564: LD_EXP 31
7568: PUSH
7569: LD_EXP 7
7573: PUSH
7574: LD_VAR 0 5
7578: ARRAY
7579: ARRAY
7580: ST_TO_ADDR
// if not area then
7581: LD_VAR 0 7
7585: NOT
7586: IFFALSE 7590
// exit ;
7588: GO 7940
// wait ( 4 4$00 ) ;
7590: LD_INT 8400
7592: PPUSH
7593: CALL_OW 67
// repeat wait ( 10 ) ;
7597: LD_INT 10
7599: PPUSH
7600: CALL_OW 67
// until not mpBlockRespThread ;
7604: LD_EXP 40
7608: NOT
7609: IFFALSE 7597
// mpBlockRespThread := true ;
7611: LD_ADDR_EXP 40
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7619: LD_INT 5
7621: NEG
7622: PPUSH
7623: CALL 42855 0 1
// ape := CreateHuman ;
7627: LD_ADDR_VAR 0 4
7631: PUSH
7632: CALL_OW 44
7636: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 5
7646: PPUSH
7647: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7651: LD_VAR 0 4
7655: PPUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: LD_INT 0
7663: PPUSH
7664: CALL_OW 49
// mpBlockRespThread := false ;
7668: LD_ADDR_EXP 40
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 247
7685: PUSH
7686: LD_INT 1
7688: EQUAL
7689: PUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 248
7699: PUSH
7700: LD_INT 0
7702: GREATER
7703: AND
7704: IFFALSE 7940
// begin if not mpRespawn then
7706: LD_EXP 32
7710: NOT
7711: IFFALSE 7715
// exit ;
7713: GO 7940
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7715: LD_VAR 0 9
7719: PPUSH
7720: CALL_OW 108
7724: NOT
7725: PUSH
7726: LD_EXP 3
7730: PPUSH
7731: LD_VAR 0 9
7735: PPUSH
7736: CALL 6406 0 2
7740: NOT
7741: AND
7742: IFFALSE 7746
// exit ;
7744: GO 7940
// side := GetSide ( un ) ;
7746: LD_ADDR_VAR 0 9
7750: PUSH
7751: LD_VAR 0 1
7755: PPUSH
7756: CALL_OW 255
7760: ST_TO_ADDR
// nation := GetNation ( un ) ;
7761: LD_ADDR_VAR 0 8
7765: PUSH
7766: LD_VAR 0 1
7770: PPUSH
7771: CALL_OW 248
7775: ST_TO_ADDR
// class := GetClass ( un ) ;
7776: LD_ADDR_VAR 0 6
7780: PUSH
7781: LD_VAR 0 1
7785: PPUSH
7786: CALL_OW 257
7790: ST_TO_ADDR
// if class > 4 then
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 4
7798: GREATER
7799: IFFALSE 7809
// class := 1 ;
7801: LD_ADDR_VAR 0 6
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// repeat wait ( 10 ) ;
7809: LD_INT 10
7811: PPUSH
7812: CALL_OW 67
// until not mpBlockRespThread ;
7816: LD_EXP 40
7820: NOT
7821: IFFALSE 7809
// mpBlockRespThread := true ;
7823: LD_ADDR_EXP 40
7827: PUSH
7828: LD_INT 1
7830: ST_TO_ADDR
// uc_side := side ;
7831: LD_ADDR_OWVAR 20
7835: PUSH
7836: LD_VAR 0 9
7840: ST_TO_ADDR
// uc_nation := nation ;
7841: LD_ADDR_OWVAR 21
7845: PUSH
7846: LD_VAR 0 8
7850: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
7851: LD_INT 0
7853: PPUSH
7854: LD_VAR 0 6
7858: PPUSH
7859: LD_INT 2
7861: PPUSH
7862: CALL_OW 380
// un := CreateHuman ;
7866: LD_ADDR_VAR 0 1
7870: PUSH
7871: CALL_OW 44
7875: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
7876: LD_ADDR_EXP 39
7880: PUSH
7881: LD_EXP 39
7885: PPUSH
7886: LD_VAR 0 9
7890: PPUSH
7891: LD_EXP 39
7895: PUSH
7896: LD_VAR 0 9
7900: ARRAY
7901: PPUSH
7902: LD_EXP 39
7906: PUSH
7907: LD_VAR 0 9
7911: ARRAY
7912: PUSH
7913: LD_INT 1
7915: PLUS
7916: PPUSH
7917: LD_VAR 0 1
7921: PPUSH
7922: CALL_OW 1
7926: PPUSH
7927: CALL_OW 1
7931: ST_TO_ADDR
// mpBlockRespThread := false ;
7932: LD_ADDR_EXP 40
7936: PUSH
7937: LD_INT 0
7939: ST_TO_ADDR
// end ; end ;
7940: LD_VAR 0 2
7944: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
7945: LD_INT 0
7947: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 266
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: IN
7968: IFFALSE 7993
// SetBName ( building , @ & GetSide ( building ) ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_STRING @
7977: PUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 255
7987: STR
7988: PPUSH
7989: CALL_OW 500
// end ;
7993: LD_VAR 0 2
7997: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
7998: LD_INT 0
8000: PPUSH
8001: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8002: LD_EXP 3
8006: PUSH
8007: LD_INT 2
8009: EQUAL
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 266
8020: PUSH
8021: LD_INT 0
8023: PUSH
8024: LD_INT 1
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: IN
8031: AND
8032: IFFALSE 8097
// begin KillUnit ( building ) ;
8034: LD_VAR 0 1
8038: PPUSH
8039: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8043: LD_ADDR_VAR 0 5
8047: PUSH
8048: LD_INT 22
8050: PUSH
8051: LD_VAR 0 2
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 21
8062: PUSH
8063: LD_INT 1
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PPUSH
8074: CALL_OW 69
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8093
// KillUnit ( i ) ;
8082: LD_VAR 0 5
8086: PPUSH
8087: CALL_OW 66
8091: GO 8079
8093: POP
8094: POP
// exit ;
8095: GO 8142
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 266
8106: PUSH
8107: LD_INT 0
8109: PUSH
8110: LD_INT 1
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: IN
8117: IFFALSE 8142
// SetBName ( building , @ & GetSide ( building ) ) ;
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_STRING @
8126: PUSH
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 255
8136: STR
8137: PPUSH
8138: CALL_OW 500
// end ; end_of_file
8142: LD_VAR 0 4
8146: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8147: LD_EXP 38
8151: PUSH
8152: CALL 8357 0 0
8156: AND
8157: PUSH
8158: LD_OWVAR 4
8162: AND
8163: IFFALSE 8354
8165: GO 8167
8167: DISABLE
8168: LD_INT 0
8170: PPUSH
8171: PPUSH
// begin canWin := false ;
8172: LD_ADDR_VAR 0 2
8176: PUSH
8177: LD_INT 0
8179: ST_TO_ADDR
// if not HasPower ( your_side ) then
8180: LD_OWVAR 2
8184: PPUSH
8185: CALL 8397 0 1
8189: NOT
8190: IFFALSE 8201
// begin Multiplayer_Loose_Message ;
8192: CALL_OW 521
// enable ( mpLose ) ;
8196: LD_INT 102
8198: ENABLE_MARKED
// end else
8199: GO 8354
// begin canWin := true ;
8201: LD_ADDR_VAR 0 2
8205: PUSH
8206: LD_INT 1
8208: ST_TO_ADDR
// for i := 1 to 8 do
8209: LD_ADDR_VAR 0 1
8213: PUSH
8214: DOUBLE
8215: LD_INT 1
8217: DEC
8218: ST_TO_ADDR
8219: LD_INT 8
8221: PUSH
8222: FOR_TO
8223: IFFALSE 8340
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8225: LD_EXP 7
8229: PUSH
8230: LD_VAR 0 1
8234: ARRAY
8235: PUSH
8236: LD_VAR 0 1
8240: PPUSH
8241: CALL_OW 108
8245: AND
8246: PUSH
8247: LD_VAR 0 1
8251: PUSH
8252: LD_OWVAR 2
8256: NONEQUAL
8257: AND
8258: IFFALSE 8338
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8260: LD_EXP 8
8264: PUSH
8265: LD_VAR 0 1
8269: ARRAY
8270: NOT
8271: PUSH
8272: LD_EXP 8
8276: PUSH
8277: LD_VAR 0 1
8281: ARRAY
8282: PUSH
8283: LD_EXP 8
8287: PUSH
8288: LD_OWVAR 2
8292: ARRAY
8293: NONEQUAL
8294: PUSH
8295: LD_OWVAR 2
8299: PPUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 81
8309: PUSH
8310: LD_INT 1
8312: NONEQUAL
8313: AND
8314: OR
8315: IFFALSE 8338
// if HasPower ( i ) then
8317: LD_VAR 0 1
8321: PPUSH
8322: CALL 8397 0 1
8326: IFFALSE 8338
// begin canWin := false ;
8328: LD_ADDR_VAR 0 2
8332: PUSH
8333: LD_INT 0
8335: ST_TO_ADDR
// break ;
8336: GO 8340
// end ;
8338: GO 8222
8340: POP
8341: POP
// if canWin then
8342: LD_VAR 0 2
8346: IFFALSE 8353
// enable ( mpWin ) else
8348: LD_INT 101
8350: ENABLE_MARKED
8351: GO 8354
// enable ;
8353: ENABLE
// end ; end ;
8354: PPOPN 2
8356: END
// function CanWinLoose ; begin
8357: LD_INT 0
8359: PPUSH
// result := true ;
8360: LD_ADDR_VAR 0 1
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8368: CALL_OW 531
8372: PUSH
8373: CALL_OW 519
8377: PUSH
8378: LD_INT 1
8380: GREATER
8381: AND
8382: IFFALSE 8392
// result := false ;
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: LD_INT 0
8391: ST_TO_ADDR
// end ;
8392: LD_VAR 0 1
8396: RET
// function HasPower ( i ) ; begin
8397: LD_INT 0
8399: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8400: LD_ADDR_VAR 0 2
8404: PUSH
8405: LD_INT 22
8407: PUSH
8408: LD_VAR 0 1
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: LD_INT 21
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 33
8432: PUSH
8433: LD_INT 3
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: LD_INT 33
8442: PUSH
8443: LD_INT 5
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PPUSH
8460: CALL_OW 69
8464: ST_TO_ADDR
// end ; end_of_file
8465: LD_VAR 0 2
8469: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8470: LD_EXP 38
8474: IFFALSE 8517
8476: GO 8478
8478: DISABLE
8479: LD_INT 0
8481: PPUSH
// begin for i := 1 to 8 do
8482: LD_ADDR_VAR 0 1
8486: PUSH
8487: DOUBLE
8488: LD_INT 1
8490: DEC
8491: ST_TO_ADDR
8492: LD_INT 8
8494: PUSH
8495: FOR_TO
8496: IFFALSE 8515
// SetRestrict ( b_depot , i , state_disabled ) ;
8498: LD_INT 0
8500: PPUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: LD_INT 0
8508: PPUSH
8509: CALL_OW 324
8513: GO 8495
8515: POP
8516: POP
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8520: LD_EXP 38
8524: PUSH
8525: CALL 8730 0 0
8529: AND
8530: PUSH
8531: LD_OWVAR 4
8535: AND
8536: IFFALSE 8727
8538: GO 8540
8540: DISABLE
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
// begin canWin := false ;
8545: LD_ADDR_VAR 0 2
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// if not HasPower ( your_side ) then
8553: LD_OWVAR 2
8557: PPUSH
8558: CALL 8770 0 1
8562: NOT
8563: IFFALSE 8574
// begin Multiplayer_Loose_Message ;
8565: CALL_OW 521
// enable ( mpLose ) ;
8569: LD_INT 102
8571: ENABLE_MARKED
// end else
8572: GO 8727
// begin canWin := true ;
8574: LD_ADDR_VAR 0 2
8578: PUSH
8579: LD_INT 1
8581: ST_TO_ADDR
// for i := 1 to 8 do
8582: LD_ADDR_VAR 0 1
8586: PUSH
8587: DOUBLE
8588: LD_INT 1
8590: DEC
8591: ST_TO_ADDR
8592: LD_INT 8
8594: PUSH
8595: FOR_TO
8596: IFFALSE 8713
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8598: LD_EXP 7
8602: PUSH
8603: LD_VAR 0 1
8607: ARRAY
8608: PUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 108
8618: AND
8619: PUSH
8620: LD_VAR 0 1
8624: PUSH
8625: LD_OWVAR 2
8629: NONEQUAL
8630: AND
8631: IFFALSE 8711
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8633: LD_EXP 8
8637: PUSH
8638: LD_VAR 0 1
8642: ARRAY
8643: NOT
8644: PUSH
8645: LD_EXP 8
8649: PUSH
8650: LD_VAR 0 1
8654: ARRAY
8655: PUSH
8656: LD_EXP 8
8660: PUSH
8661: LD_OWVAR 2
8665: ARRAY
8666: NONEQUAL
8667: PUSH
8668: LD_OWVAR 2
8672: PPUSH
8673: LD_VAR 0 1
8677: PPUSH
8678: CALL_OW 81
8682: PUSH
8683: LD_INT 1
8685: NONEQUAL
8686: AND
8687: OR
8688: IFFALSE 8711
// if HasPower ( i ) then
8690: LD_VAR 0 1
8694: PPUSH
8695: CALL 8770 0 1
8699: IFFALSE 8711
// begin canWin := false ;
8701: LD_ADDR_VAR 0 2
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// break ;
8709: GO 8713
// end ;
8711: GO 8595
8713: POP
8714: POP
// if canWin then
8715: LD_VAR 0 2
8719: IFFALSE 8726
// enable ( mpWin ) else
8721: LD_INT 101
8723: ENABLE_MARKED
8724: GO 8727
// enable ;
8726: ENABLE
// end ; end ;
8727: PPOPN 2
8729: END
// function CanWinLoose ; begin
8730: LD_INT 0
8732: PPUSH
// result := true ;
8733: LD_ADDR_VAR 0 1
8737: PUSH
8738: LD_INT 1
8740: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8741: CALL_OW 531
8745: PUSH
8746: CALL_OW 519
8750: PUSH
8751: LD_INT 1
8753: GREATER
8754: AND
8755: IFFALSE 8765
// result := false ;
8757: LD_ADDR_VAR 0 1
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// end ;
8765: LD_VAR 0 1
8769: RET
// function HasPower ( i ) ; begin
8770: LD_INT 0
8772: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8773: LD_INT 22
8775: PUSH
8776: LD_VAR 0 1
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: LD_INT 30
8790: PUSH
8791: LD_INT 0
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 30
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PPUSH
8817: CALL_OW 69
8821: NOT
8822: IFFALSE 8826
// exit ;
8824: GO 8891
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8826: LD_ADDR_VAR 0 2
8830: PUSH
8831: LD_INT 22
8833: PUSH
8834: LD_VAR 0 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 2
8845: PUSH
8846: LD_INT 21
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 33
8858: PUSH
8859: LD_INT 3
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 33
8868: PUSH
8869: LD_INT 5
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 69
8890: ST_TO_ADDR
// end ; end_of_file
8891: LD_VAR 0 2
8895: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8896: LD_INT 0
8898: PPUSH
8899: PPUSH
// if exist_mode then
8900: LD_VAR 0 2
8904: IFFALSE 8929
// unit := CreateCharacter ( prefix & ident ) else
8906: LD_ADDR_VAR 0 5
8910: PUSH
8911: LD_VAR 0 3
8915: PUSH
8916: LD_VAR 0 1
8920: STR
8921: PPUSH
8922: CALL_OW 34
8926: ST_TO_ADDR
8927: GO 8944
// unit := NewCharacter ( ident ) ;
8929: LD_ADDR_VAR 0 5
8933: PUSH
8934: LD_VAR 0 1
8938: PPUSH
8939: CALL_OW 25
8943: ST_TO_ADDR
// result := unit ;
8944: LD_ADDR_VAR 0 4
8948: PUSH
8949: LD_VAR 0 5
8953: ST_TO_ADDR
// end ;
8954: LD_VAR 0 4
8958: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8959: LD_INT 0
8961: PPUSH
8962: PPUSH
// if not side or not nation then
8963: LD_VAR 0 1
8967: NOT
8968: PUSH
8969: LD_VAR 0 2
8973: NOT
8974: OR
8975: IFFALSE 8979
// exit ;
8977: GO 9747
// case nation of nation_american :
8979: LD_VAR 0 2
8983: PUSH
8984: LD_INT 1
8986: DOUBLE
8987: EQUAL
8988: IFTRUE 8992
8990: GO 9206
8992: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8993: LD_ADDR_VAR 0 4
8997: PUSH
8998: LD_INT 35
9000: PUSH
9001: LD_INT 45
9003: PUSH
9004: LD_INT 46
9006: PUSH
9007: LD_INT 47
9009: PUSH
9010: LD_INT 82
9012: PUSH
9013: LD_INT 83
9015: PUSH
9016: LD_INT 84
9018: PUSH
9019: LD_INT 85
9021: PUSH
9022: LD_INT 86
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: LD_INT 2
9030: PUSH
9031: LD_INT 6
9033: PUSH
9034: LD_INT 15
9036: PUSH
9037: LD_INT 16
9039: PUSH
9040: LD_INT 7
9042: PUSH
9043: LD_INT 12
9045: PUSH
9046: LD_INT 13
9048: PUSH
9049: LD_INT 10
9051: PUSH
9052: LD_INT 14
9054: PUSH
9055: LD_INT 20
9057: PUSH
9058: LD_INT 21
9060: PUSH
9061: LD_INT 22
9063: PUSH
9064: LD_INT 25
9066: PUSH
9067: LD_INT 32
9069: PUSH
9070: LD_INT 27
9072: PUSH
9073: LD_INT 36
9075: PUSH
9076: LD_INT 69
9078: PUSH
9079: LD_INT 39
9081: PUSH
9082: LD_INT 34
9084: PUSH
9085: LD_INT 40
9087: PUSH
9088: LD_INT 48
9090: PUSH
9091: LD_INT 49
9093: PUSH
9094: LD_INT 50
9096: PUSH
9097: LD_INT 51
9099: PUSH
9100: LD_INT 52
9102: PUSH
9103: LD_INT 53
9105: PUSH
9106: LD_INT 54
9108: PUSH
9109: LD_INT 55
9111: PUSH
9112: LD_INT 56
9114: PUSH
9115: LD_INT 57
9117: PUSH
9118: LD_INT 58
9120: PUSH
9121: LD_INT 59
9123: PUSH
9124: LD_INT 60
9126: PUSH
9127: LD_INT 61
9129: PUSH
9130: LD_INT 62
9132: PUSH
9133: LD_INT 80
9135: PUSH
9136: LD_INT 82
9138: PUSH
9139: LD_INT 83
9141: PUSH
9142: LD_INT 84
9144: PUSH
9145: LD_INT 85
9147: PUSH
9148: LD_INT 86
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: ST_TO_ADDR
9204: GO 9671
9206: LD_INT 2
9208: DOUBLE
9209: EQUAL
9210: IFTRUE 9214
9212: GO 9440
9214: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9215: LD_ADDR_VAR 0 4
9219: PUSH
9220: LD_INT 35
9222: PUSH
9223: LD_INT 45
9225: PUSH
9226: LD_INT 46
9228: PUSH
9229: LD_INT 47
9231: PUSH
9232: LD_INT 82
9234: PUSH
9235: LD_INT 83
9237: PUSH
9238: LD_INT 84
9240: PUSH
9241: LD_INT 85
9243: PUSH
9244: LD_INT 87
9246: PUSH
9247: LD_INT 70
9249: PUSH
9250: LD_INT 1
9252: PUSH
9253: LD_INT 11
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: LD_INT 4
9261: PUSH
9262: LD_INT 5
9264: PUSH
9265: LD_INT 6
9267: PUSH
9268: LD_INT 15
9270: PUSH
9271: LD_INT 18
9273: PUSH
9274: LD_INT 7
9276: PUSH
9277: LD_INT 17
9279: PUSH
9280: LD_INT 8
9282: PUSH
9283: LD_INT 20
9285: PUSH
9286: LD_INT 21
9288: PUSH
9289: LD_INT 22
9291: PUSH
9292: LD_INT 72
9294: PUSH
9295: LD_INT 26
9297: PUSH
9298: LD_INT 69
9300: PUSH
9301: LD_INT 39
9303: PUSH
9304: LD_INT 40
9306: PUSH
9307: LD_INT 41
9309: PUSH
9310: LD_INT 42
9312: PUSH
9313: LD_INT 43
9315: PUSH
9316: LD_INT 48
9318: PUSH
9319: LD_INT 49
9321: PUSH
9322: LD_INT 50
9324: PUSH
9325: LD_INT 51
9327: PUSH
9328: LD_INT 52
9330: PUSH
9331: LD_INT 53
9333: PUSH
9334: LD_INT 54
9336: PUSH
9337: LD_INT 55
9339: PUSH
9340: LD_INT 56
9342: PUSH
9343: LD_INT 60
9345: PUSH
9346: LD_INT 61
9348: PUSH
9349: LD_INT 62
9351: PUSH
9352: LD_INT 66
9354: PUSH
9355: LD_INT 67
9357: PUSH
9358: LD_INT 68
9360: PUSH
9361: LD_INT 81
9363: PUSH
9364: LD_INT 82
9366: PUSH
9367: LD_INT 83
9369: PUSH
9370: LD_INT 84
9372: PUSH
9373: LD_INT 85
9375: PUSH
9376: LD_INT 87
9378: PUSH
9379: LD_INT 88
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
9438: GO 9671
9440: LD_INT 3
9442: DOUBLE
9443: EQUAL
9444: IFTRUE 9448
9446: GO 9670
9448: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9449: LD_ADDR_VAR 0 4
9453: PUSH
9454: LD_INT 46
9456: PUSH
9457: LD_INT 47
9459: PUSH
9460: LD_INT 1
9462: PUSH
9463: LD_INT 2
9465: PUSH
9466: LD_INT 82
9468: PUSH
9469: LD_INT 83
9471: PUSH
9472: LD_INT 84
9474: PUSH
9475: LD_INT 85
9477: PUSH
9478: LD_INT 86
9480: PUSH
9481: LD_INT 11
9483: PUSH
9484: LD_INT 9
9486: PUSH
9487: LD_INT 20
9489: PUSH
9490: LD_INT 19
9492: PUSH
9493: LD_INT 21
9495: PUSH
9496: LD_INT 24
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 25
9504: PUSH
9505: LD_INT 28
9507: PUSH
9508: LD_INT 29
9510: PUSH
9511: LD_INT 30
9513: PUSH
9514: LD_INT 31
9516: PUSH
9517: LD_INT 37
9519: PUSH
9520: LD_INT 38
9522: PUSH
9523: LD_INT 32
9525: PUSH
9526: LD_INT 27
9528: PUSH
9529: LD_INT 33
9531: PUSH
9532: LD_INT 69
9534: PUSH
9535: LD_INT 39
9537: PUSH
9538: LD_INT 34
9540: PUSH
9541: LD_INT 40
9543: PUSH
9544: LD_INT 71
9546: PUSH
9547: LD_INT 23
9549: PUSH
9550: LD_INT 44
9552: PUSH
9553: LD_INT 48
9555: PUSH
9556: LD_INT 49
9558: PUSH
9559: LD_INT 50
9561: PUSH
9562: LD_INT 51
9564: PUSH
9565: LD_INT 52
9567: PUSH
9568: LD_INT 53
9570: PUSH
9571: LD_INT 54
9573: PUSH
9574: LD_INT 55
9576: PUSH
9577: LD_INT 56
9579: PUSH
9580: LD_INT 57
9582: PUSH
9583: LD_INT 58
9585: PUSH
9586: LD_INT 59
9588: PUSH
9589: LD_INT 63
9591: PUSH
9592: LD_INT 64
9594: PUSH
9595: LD_INT 65
9597: PUSH
9598: LD_INT 82
9600: PUSH
9601: LD_INT 83
9603: PUSH
9604: LD_INT 84
9606: PUSH
9607: LD_INT 85
9609: PUSH
9610: LD_INT 86
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: ST_TO_ADDR
9668: GO 9671
9670: POP
// if state > - 1 and state < 3 then
9671: LD_VAR 0 3
9675: PUSH
9676: LD_INT 1
9678: NEG
9679: GREATER
9680: PUSH
9681: LD_VAR 0 3
9685: PUSH
9686: LD_INT 3
9688: LESS
9689: AND
9690: IFFALSE 9747
// for i in result do
9692: LD_ADDR_VAR 0 5
9696: PUSH
9697: LD_VAR 0 4
9701: PUSH
9702: FOR_IN
9703: IFFALSE 9745
// if GetTech ( i , side ) <> state then
9705: LD_VAR 0 5
9709: PPUSH
9710: LD_VAR 0 1
9714: PPUSH
9715: CALL_OW 321
9719: PUSH
9720: LD_VAR 0 3
9724: NONEQUAL
9725: IFFALSE 9743
// result := result diff i ;
9727: LD_ADDR_VAR 0 4
9731: PUSH
9732: LD_VAR 0 4
9736: PUSH
9737: LD_VAR 0 5
9741: DIFF
9742: ST_TO_ADDR
9743: GO 9702
9745: POP
9746: POP
// end ;
9747: LD_VAR 0 4
9751: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
9756: PPUSH
// result := true ;
9757: LD_ADDR_VAR 0 3
9761: PUSH
9762: LD_INT 1
9764: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9765: LD_ADDR_VAR 0 5
9769: PUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: CALL_OW 480
9779: ST_TO_ADDR
// if not tmp then
9780: LD_VAR 0 5
9784: NOT
9785: IFFALSE 9789
// exit ;
9787: GO 9838
// for i in tmp do
9789: LD_ADDR_VAR 0 4
9793: PUSH
9794: LD_VAR 0 5
9798: PUSH
9799: FOR_IN
9800: IFFALSE 9836
// if GetTech ( i , side ) <> state_researched then
9802: LD_VAR 0 4
9806: PPUSH
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 321
9816: PUSH
9817: LD_INT 2
9819: NONEQUAL
9820: IFFALSE 9834
// begin result := false ;
9822: LD_ADDR_VAR 0 3
9826: PUSH
9827: LD_INT 0
9829: ST_TO_ADDR
// exit ;
9830: POP
9831: POP
9832: GO 9838
// end ;
9834: GO 9799
9836: POP
9837: POP
// end ;
9838: LD_VAR 0 3
9842: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9843: LD_INT 0
9845: PPUSH
9846: PPUSH
9847: PPUSH
9848: PPUSH
9849: PPUSH
9850: PPUSH
9851: PPUSH
9852: PPUSH
9853: PPUSH
9854: PPUSH
9855: PPUSH
9856: PPUSH
9857: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9858: LD_VAR 0 1
9862: NOT
9863: PUSH
9864: LD_VAR 0 1
9868: PPUSH
9869: CALL_OW 257
9873: PUSH
9874: LD_INT 9
9876: NONEQUAL
9877: OR
9878: IFFALSE 9882
// exit ;
9880: GO 10455
// side := GetSide ( unit ) ;
9882: LD_ADDR_VAR 0 9
9886: PUSH
9887: LD_VAR 0 1
9891: PPUSH
9892: CALL_OW 255
9896: ST_TO_ADDR
// tech_space := tech_spacanom ;
9897: LD_ADDR_VAR 0 12
9901: PUSH
9902: LD_INT 29
9904: ST_TO_ADDR
// tech_time := tech_taurad ;
9905: LD_ADDR_VAR 0 13
9909: PUSH
9910: LD_INT 28
9912: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9913: LD_ADDR_VAR 0 11
9917: PUSH
9918: LD_VAR 0 1
9922: PPUSH
9923: CALL_OW 310
9927: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9928: LD_VAR 0 11
9932: PPUSH
9933: CALL_OW 247
9937: PUSH
9938: LD_INT 2
9940: EQUAL
9941: IFFALSE 9945
// exit ;
9943: GO 10455
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9945: LD_ADDR_VAR 0 8
9949: PUSH
9950: LD_INT 81
9952: PUSH
9953: LD_VAR 0 9
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: LD_INT 21
9967: PUSH
9968: LD_INT 3
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: ST_TO_ADDR
// if not tmp then
9988: LD_VAR 0 8
9992: NOT
9993: IFFALSE 9997
// exit ;
9995: GO 10455
// if in_unit then
9997: LD_VAR 0 11
10001: IFFALSE 10025
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10003: LD_ADDR_VAR 0 10
10007: PUSH
10008: LD_VAR 0 8
10012: PPUSH
10013: LD_VAR 0 11
10017: PPUSH
10018: CALL_OW 74
10022: ST_TO_ADDR
10023: GO 10045
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10025: LD_ADDR_VAR 0 10
10029: PUSH
10030: LD_VAR 0 8
10034: PPUSH
10035: LD_VAR 0 1
10039: PPUSH
10040: CALL_OW 74
10044: ST_TO_ADDR
// if not enemy then
10045: LD_VAR 0 10
10049: NOT
10050: IFFALSE 10054
// exit ;
10052: GO 10455
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10054: LD_VAR 0 11
10058: PUSH
10059: LD_VAR 0 11
10063: PPUSH
10064: LD_VAR 0 10
10068: PPUSH
10069: CALL_OW 296
10073: PUSH
10074: LD_INT 13
10076: GREATER
10077: AND
10078: PUSH
10079: LD_VAR 0 1
10083: PPUSH
10084: LD_VAR 0 10
10088: PPUSH
10089: CALL_OW 296
10093: PUSH
10094: LD_INT 12
10096: GREATER
10097: OR
10098: IFFALSE 10102
// exit ;
10100: GO 10455
// missile := [ 1 ] ;
10102: LD_ADDR_VAR 0 14
10106: PUSH
10107: LD_INT 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10113: LD_VAR 0 9
10117: PPUSH
10118: LD_VAR 0 12
10122: PPUSH
10123: CALL_OW 325
10127: IFFALSE 10156
// missile := Replace ( missile , missile + 1 , 2 ) ;
10129: LD_ADDR_VAR 0 14
10133: PUSH
10134: LD_VAR 0 14
10138: PPUSH
10139: LD_VAR 0 14
10143: PUSH
10144: LD_INT 1
10146: PLUS
10147: PPUSH
10148: LD_INT 2
10150: PPUSH
10151: CALL_OW 1
10155: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10156: LD_VAR 0 9
10160: PPUSH
10161: LD_VAR 0 13
10165: PPUSH
10166: CALL_OW 325
10170: PUSH
10171: LD_VAR 0 10
10175: PPUSH
10176: CALL_OW 255
10180: PPUSH
10181: LD_VAR 0 13
10185: PPUSH
10186: CALL_OW 325
10190: NOT
10191: AND
10192: IFFALSE 10221
// missile := Replace ( missile , missile + 1 , 3 ) ;
10194: LD_ADDR_VAR 0 14
10198: PUSH
10199: LD_VAR 0 14
10203: PPUSH
10204: LD_VAR 0 14
10208: PUSH
10209: LD_INT 1
10211: PLUS
10212: PPUSH
10213: LD_INT 3
10215: PPUSH
10216: CALL_OW 1
10220: ST_TO_ADDR
// if missile < 2 then
10221: LD_VAR 0 14
10225: PUSH
10226: LD_INT 2
10228: LESS
10229: IFFALSE 10233
// exit ;
10231: GO 10455
// x := GetX ( enemy ) ;
10233: LD_ADDR_VAR 0 4
10237: PUSH
10238: LD_VAR 0 10
10242: PPUSH
10243: CALL_OW 250
10247: ST_TO_ADDR
// y := GetY ( enemy ) ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_VAR 0 10
10257: PPUSH
10258: CALL_OW 251
10262: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10263: LD_ADDR_VAR 0 6
10267: PUSH
10268: LD_VAR 0 4
10272: PUSH
10273: LD_INT 1
10275: NEG
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: CALL_OW 12
10284: PLUS
10285: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10286: LD_ADDR_VAR 0 7
10290: PUSH
10291: LD_VAR 0 5
10295: PUSH
10296: LD_INT 1
10298: NEG
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: CALL_OW 12
10307: PLUS
10308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10309: LD_VAR 0 6
10313: PPUSH
10314: LD_VAR 0 7
10318: PPUSH
10319: CALL_OW 488
10323: NOT
10324: IFFALSE 10346
// begin _x := x ;
10326: LD_ADDR_VAR 0 6
10330: PUSH
10331: LD_VAR 0 4
10335: ST_TO_ADDR
// _y := y ;
10336: LD_ADDR_VAR 0 7
10340: PUSH
10341: LD_VAR 0 5
10345: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10346: LD_ADDR_VAR 0 3
10350: PUSH
10351: LD_INT 1
10353: PPUSH
10354: LD_VAR 0 14
10358: PPUSH
10359: CALL_OW 12
10363: ST_TO_ADDR
// case i of 1 :
10364: LD_VAR 0 3
10368: PUSH
10369: LD_INT 1
10371: DOUBLE
10372: EQUAL
10373: IFTRUE 10377
10375: GO 10394
10377: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10378: LD_VAR 0 1
10382: PPUSH
10383: LD_VAR 0 10
10387: PPUSH
10388: CALL_OW 115
10392: GO 10455
10394: LD_INT 2
10396: DOUBLE
10397: EQUAL
10398: IFTRUE 10402
10400: GO 10424
10402: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10403: LD_VAR 0 1
10407: PPUSH
10408: LD_VAR 0 6
10412: PPUSH
10413: LD_VAR 0 7
10417: PPUSH
10418: CALL_OW 153
10422: GO 10455
10424: LD_INT 3
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10454
10432: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10433: LD_VAR 0 1
10437: PPUSH
10438: LD_VAR 0 6
10442: PPUSH
10443: LD_VAR 0 7
10447: PPUSH
10448: CALL_OW 154
10452: GO 10455
10454: POP
// end ;
10455: LD_VAR 0 2
10459: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10460: LD_INT 0
10462: PPUSH
10463: PPUSH
10464: PPUSH
10465: PPUSH
10466: PPUSH
10467: PPUSH
// if not unit or not building then
10468: LD_VAR 0 1
10472: NOT
10473: PUSH
10474: LD_VAR 0 2
10478: NOT
10479: OR
10480: IFFALSE 10484
// exit ;
10482: GO 10642
// x := GetX ( building ) ;
10484: LD_ADDR_VAR 0 5
10488: PUSH
10489: LD_VAR 0 2
10493: PPUSH
10494: CALL_OW 250
10498: ST_TO_ADDR
// y := GetY ( building ) ;
10499: LD_ADDR_VAR 0 6
10503: PUSH
10504: LD_VAR 0 2
10508: PPUSH
10509: CALL_OW 251
10513: ST_TO_ADDR
// for i = 0 to 5 do
10514: LD_ADDR_VAR 0 4
10518: PUSH
10519: DOUBLE
10520: LD_INT 0
10522: DEC
10523: ST_TO_ADDR
10524: LD_INT 5
10526: PUSH
10527: FOR_TO
10528: IFFALSE 10640
// begin _x := ShiftX ( x , i , 3 ) ;
10530: LD_ADDR_VAR 0 7
10534: PUSH
10535: LD_VAR 0 5
10539: PPUSH
10540: LD_VAR 0 4
10544: PPUSH
10545: LD_INT 3
10547: PPUSH
10548: CALL_OW 272
10552: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10553: LD_ADDR_VAR 0 8
10557: PUSH
10558: LD_VAR 0 6
10562: PPUSH
10563: LD_VAR 0 4
10567: PPUSH
10568: LD_INT 3
10570: PPUSH
10571: CALL_OW 273
10575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10576: LD_VAR 0 7
10580: PPUSH
10581: LD_VAR 0 8
10585: PPUSH
10586: CALL_OW 488
10590: NOT
10591: IFFALSE 10595
// continue ;
10593: GO 10527
// if HexInfo ( _x , _y ) = 0 then
10595: LD_VAR 0 7
10599: PPUSH
10600: LD_VAR 0 8
10604: PPUSH
10605: CALL_OW 428
10609: PUSH
10610: LD_INT 0
10612: EQUAL
10613: IFFALSE 10638
// begin ComMoveXY ( unit , _x , _y ) ;
10615: LD_VAR 0 1
10619: PPUSH
10620: LD_VAR 0 7
10624: PPUSH
10625: LD_VAR 0 8
10629: PPUSH
10630: CALL_OW 111
// exit ;
10634: POP
10635: POP
10636: GO 10642
// end ; end ;
10638: GO 10527
10640: POP
10641: POP
// end ;
10642: LD_VAR 0 3
10646: RET
// export function ScanBase ( side , base_area ) ; begin
10647: LD_INT 0
10649: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10650: LD_ADDR_VAR 0 3
10654: PUSH
10655: LD_VAR 0 2
10659: PPUSH
10660: LD_INT 81
10662: PUSH
10663: LD_VAR 0 1
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 70
10676: ST_TO_ADDR
// end ;
10677: LD_VAR 0 3
10681: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10682: LD_INT 0
10684: PPUSH
10685: PPUSH
10686: PPUSH
10687: PPUSH
// result := false ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_INT 0
10695: ST_TO_ADDR
// side := GetSide ( unit ) ;
10696: LD_ADDR_VAR 0 3
10700: PUSH
10701: LD_VAR 0 1
10705: PPUSH
10706: CALL_OW 255
10710: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10711: LD_ADDR_VAR 0 4
10715: PUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: CALL_OW 248
10725: ST_TO_ADDR
// case nat of 1 :
10726: LD_VAR 0 4
10730: PUSH
10731: LD_INT 1
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10750
10739: POP
// tech := tech_lassight ; 2 :
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_INT 12
10747: ST_TO_ADDR
10748: GO 10789
10750: LD_INT 2
10752: DOUBLE
10753: EQUAL
10754: IFTRUE 10758
10756: GO 10769
10758: POP
// tech := tech_mortar ; 3 :
10759: LD_ADDR_VAR 0 5
10763: PUSH
10764: LD_INT 41
10766: ST_TO_ADDR
10767: GO 10789
10769: LD_INT 3
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10788
10777: POP
// tech := tech_bazooka ; end ;
10778: LD_ADDR_VAR 0 5
10782: PUSH
10783: LD_INT 44
10785: ST_TO_ADDR
10786: GO 10789
10788: POP
// if Researched ( side , tech ) then
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_VAR 0 5
10798: PPUSH
10799: CALL_OW 325
10803: IFFALSE 10830
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10805: LD_ADDR_VAR 0 2
10809: PUSH
10810: LD_INT 5
10812: PUSH
10813: LD_INT 8
10815: PUSH
10816: LD_INT 9
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: LD_VAR 0 4
10828: ARRAY
10829: ST_TO_ADDR
// end ;
10830: LD_VAR 0 2
10834: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10835: LD_INT 0
10837: PPUSH
10838: PPUSH
10839: PPUSH
// if not mines then
10840: LD_VAR 0 2
10844: NOT
10845: IFFALSE 10849
// exit ;
10847: GO 10993
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10849: LD_ADDR_VAR 0 5
10853: PUSH
10854: LD_INT 81
10856: PUSH
10857: LD_VAR 0 1
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 3
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 3
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 69
10891: ST_TO_ADDR
// for i in mines do
10892: LD_ADDR_VAR 0 4
10896: PUSH
10897: LD_VAR 0 2
10901: PUSH
10902: FOR_IN
10903: IFFALSE 10991
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10905: LD_VAR 0 4
10909: PUSH
10910: LD_INT 1
10912: ARRAY
10913: PPUSH
10914: LD_VAR 0 4
10918: PUSH
10919: LD_INT 2
10921: ARRAY
10922: PPUSH
10923: CALL_OW 458
10927: NOT
10928: IFFALSE 10932
// continue ;
10930: GO 10902
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10932: LD_VAR 0 4
10936: PUSH
10937: LD_INT 1
10939: ARRAY
10940: PPUSH
10941: LD_VAR 0 4
10945: PUSH
10946: LD_INT 2
10948: ARRAY
10949: PPUSH
10950: CALL_OW 428
10954: PUSH
10955: LD_VAR 0 5
10959: IN
10960: IFFALSE 10989
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10962: LD_VAR 0 4
10966: PUSH
10967: LD_INT 1
10969: ARRAY
10970: PPUSH
10971: LD_VAR 0 4
10975: PUSH
10976: LD_INT 2
10978: ARRAY
10979: PPUSH
10980: LD_VAR 0 1
10984: PPUSH
10985: CALL_OW 456
// end ;
10989: GO 10902
10991: POP
10992: POP
// end ;
10993: LD_VAR 0 3
10997: RET
// export function Count ( array ) ; begin
10998: LD_INT 0
11000: PPUSH
// result := array + 0 ;
11001: LD_ADDR_VAR 0 2
11005: PUSH
11006: LD_VAR 0 1
11010: PUSH
11011: LD_INT 0
11013: PLUS
11014: ST_TO_ADDR
// end ;
11015: LD_VAR 0 2
11019: RET
// export function IsEmpty ( building ) ; begin
11020: LD_INT 0
11022: PPUSH
// if not building then
11023: LD_VAR 0 1
11027: NOT
11028: IFFALSE 11032
// exit ;
11030: GO 11075
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: LD_VAR 0 1
11041: PUSH
11042: LD_INT 22
11044: PUSH
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 255
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 58
11061: PUSH
11062: EMPTY
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 69
11073: IN
11074: ST_TO_ADDR
// end ;
11075: LD_VAR 0 2
11079: RET
// export function IsNotFull ( building ) ; var places ; begin
11080: LD_INT 0
11082: PPUSH
11083: PPUSH
// if not building then
11084: LD_VAR 0 1
11088: NOT
11089: IFFALSE 11093
// exit ;
11091: GO 11121
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_VAR 0 1
11102: PPUSH
11103: LD_INT 3
11105: PUSH
11106: LD_INT 62
11108: PUSH
11109: EMPTY
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PPUSH
11116: CALL_OW 72
11120: ST_TO_ADDR
// end ;
11121: LD_VAR 0 2
11125: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11126: LD_INT 0
11128: PPUSH
11129: PPUSH
11130: PPUSH
11131: PPUSH
// tmp := [ ] ;
11132: LD_ADDR_VAR 0 3
11136: PUSH
11137: EMPTY
11138: ST_TO_ADDR
// list := [ ] ;
11139: LD_ADDR_VAR 0 5
11143: PUSH
11144: EMPTY
11145: ST_TO_ADDR
// for i = 16 to 25 do
11146: LD_ADDR_VAR 0 4
11150: PUSH
11151: DOUBLE
11152: LD_INT 16
11154: DEC
11155: ST_TO_ADDR
11156: LD_INT 25
11158: PUSH
11159: FOR_TO
11160: IFFALSE 11233
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11162: LD_ADDR_VAR 0 3
11166: PUSH
11167: LD_VAR 0 3
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_VAR 0 1
11179: PPUSH
11180: CALL_OW 255
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 91
11191: PUSH
11192: LD_VAR 0 1
11196: PUSH
11197: LD_INT 6
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 30
11207: PUSH
11208: LD_VAR 0 4
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: PUSH
11222: EMPTY
11223: LIST
11224: PPUSH
11225: CALL_OW 69
11229: ADD
11230: ST_TO_ADDR
11231: GO 11159
11233: POP
11234: POP
// for i = 1 to tmp do
11235: LD_ADDR_VAR 0 4
11239: PUSH
11240: DOUBLE
11241: LD_INT 1
11243: DEC
11244: ST_TO_ADDR
11245: LD_VAR 0 3
11249: PUSH
11250: FOR_TO
11251: IFFALSE 11339
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11253: LD_ADDR_VAR 0 5
11257: PUSH
11258: LD_VAR 0 5
11262: PUSH
11263: LD_VAR 0 3
11267: PUSH
11268: LD_VAR 0 4
11272: ARRAY
11273: PPUSH
11274: CALL_OW 266
11278: PUSH
11279: LD_VAR 0 3
11283: PUSH
11284: LD_VAR 0 4
11288: ARRAY
11289: PPUSH
11290: CALL_OW 250
11294: PUSH
11295: LD_VAR 0 3
11299: PUSH
11300: LD_VAR 0 4
11304: ARRAY
11305: PPUSH
11306: CALL_OW 251
11310: PUSH
11311: LD_VAR 0 3
11315: PUSH
11316: LD_VAR 0 4
11320: ARRAY
11321: PPUSH
11322: CALL_OW 254
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: ADD
11336: ST_TO_ADDR
11337: GO 11250
11339: POP
11340: POP
// result := list ;
11341: LD_ADDR_VAR 0 2
11345: PUSH
11346: LD_VAR 0 5
11350: ST_TO_ADDR
// end ;
11351: LD_VAR 0 2
11355: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
11360: PPUSH
11361: PPUSH
11362: PPUSH
11363: PPUSH
11364: PPUSH
// if not factory then
11365: LD_VAR 0 1
11369: NOT
11370: IFFALSE 11374
// exit ;
11372: GO 11967
// if control = control_apeman then
11374: LD_VAR 0 4
11378: PUSH
11379: LD_INT 5
11381: EQUAL
11382: IFFALSE 11491
// begin tmp := UnitsInside ( factory ) ;
11384: LD_ADDR_VAR 0 8
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 313
11398: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11399: LD_VAR 0 8
11403: PPUSH
11404: LD_INT 25
11406: PUSH
11407: LD_INT 12
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PPUSH
11414: CALL_OW 72
11418: NOT
11419: IFFALSE 11429
// control := control_manual ;
11421: LD_ADDR_VAR 0 4
11425: PUSH
11426: LD_INT 1
11428: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11429: LD_ADDR_VAR 0 8
11433: PUSH
11434: LD_VAR 0 1
11438: PPUSH
11439: CALL 11126 0 1
11443: ST_TO_ADDR
// if tmp then
11444: LD_VAR 0 8
11448: IFFALSE 11491
// begin for i in tmp do
11450: LD_ADDR_VAR 0 7
11454: PUSH
11455: LD_VAR 0 8
11459: PUSH
11460: FOR_IN
11461: IFFALSE 11489
// if i [ 1 ] = b_ext_radio then
11463: LD_VAR 0 7
11467: PUSH
11468: LD_INT 1
11470: ARRAY
11471: PUSH
11472: LD_INT 22
11474: EQUAL
11475: IFFALSE 11487
// begin control := control_remote ;
11477: LD_ADDR_VAR 0 4
11481: PUSH
11482: LD_INT 2
11484: ST_TO_ADDR
// break ;
11485: GO 11489
// end ;
11487: GO 11460
11489: POP
11490: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11491: LD_VAR 0 1
11495: PPUSH
11496: LD_VAR 0 2
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_VAR 0 4
11510: PPUSH
11511: LD_VAR 0 5
11515: PPUSH
11516: CALL_OW 448
11520: IFFALSE 11555
// begin result := [ chassis , engine , control , weapon ] ;
11522: LD_ADDR_VAR 0 6
11526: PUSH
11527: LD_VAR 0 2
11531: PUSH
11532: LD_VAR 0 3
11536: PUSH
11537: LD_VAR 0 4
11541: PUSH
11542: LD_VAR 0 5
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: ST_TO_ADDR
// exit ;
11553: GO 11967
// end ; _chassis := AvailableChassisList ( factory ) ;
11555: LD_ADDR_VAR 0 9
11559: PUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 475
11569: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11570: LD_ADDR_VAR 0 11
11574: PUSH
11575: LD_VAR 0 1
11579: PPUSH
11580: CALL_OW 476
11584: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11585: LD_ADDR_VAR 0 12
11589: PUSH
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 477
11599: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11600: LD_ADDR_VAR 0 10
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: CALL_OW 478
11614: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11615: LD_VAR 0 9
11619: NOT
11620: PUSH
11621: LD_VAR 0 11
11625: NOT
11626: OR
11627: PUSH
11628: LD_VAR 0 12
11632: NOT
11633: OR
11634: PUSH
11635: LD_VAR 0 10
11639: NOT
11640: OR
11641: IFFALSE 11676
// begin result := [ chassis , engine , control , weapon ] ;
11643: LD_ADDR_VAR 0 6
11647: PUSH
11648: LD_VAR 0 2
11652: PUSH
11653: LD_VAR 0 3
11657: PUSH
11658: LD_VAR 0 4
11662: PUSH
11663: LD_VAR 0 5
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: ST_TO_ADDR
// exit ;
11674: GO 11967
// end ; if not chassis in _chassis then
11676: LD_VAR 0 2
11680: PUSH
11681: LD_VAR 0 9
11685: IN
11686: NOT
11687: IFFALSE 11713
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11689: LD_ADDR_VAR 0 2
11693: PUSH
11694: LD_VAR 0 9
11698: PUSH
11699: LD_INT 1
11701: PPUSH
11702: LD_VAR 0 9
11706: PPUSH
11707: CALL_OW 12
11711: ARRAY
11712: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11713: LD_VAR 0 2
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: CALL 11972 0 2
11727: NOT
11728: IFFALSE 11787
// repeat engine := _engine [ 1 ] ;
11730: LD_ADDR_VAR 0 3
11734: PUSH
11735: LD_VAR 0 11
11739: PUSH
11740: LD_INT 1
11742: ARRAY
11743: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11744: LD_ADDR_VAR 0 11
11748: PUSH
11749: LD_VAR 0 11
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: CALL_OW 3
11761: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11762: LD_VAR 0 2
11766: PPUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: CALL 11972 0 2
11776: PUSH
11777: LD_VAR 0 11
11781: PUSH
11782: EMPTY
11783: EQUAL
11784: OR
11785: IFFALSE 11730
// if not control in _control then
11787: LD_VAR 0 4
11791: PUSH
11792: LD_VAR 0 12
11796: IN
11797: NOT
11798: IFFALSE 11824
// control := _control [ rand ( 1 , _control ) ] ;
11800: LD_ADDR_VAR 0 4
11804: PUSH
11805: LD_VAR 0 12
11809: PUSH
11810: LD_INT 1
11812: PPUSH
11813: LD_VAR 0 12
11817: PPUSH
11818: CALL_OW 12
11822: ARRAY
11823: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11824: LD_VAR 0 2
11828: PPUSH
11829: LD_VAR 0 5
11833: PPUSH
11834: CALL 12192 0 2
11838: NOT
11839: IFFALSE 11898
// repeat weapon := _weapon [ 1 ] ;
11841: LD_ADDR_VAR 0 5
11845: PUSH
11846: LD_VAR 0 10
11850: PUSH
11851: LD_INT 1
11853: ARRAY
11854: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11855: LD_ADDR_VAR 0 10
11859: PUSH
11860: LD_VAR 0 10
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 3
11872: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11873: LD_VAR 0 2
11877: PPUSH
11878: LD_VAR 0 5
11882: PPUSH
11883: CALL 12192 0 2
11887: PUSH
11888: LD_VAR 0 10
11892: PUSH
11893: EMPTY
11894: EQUAL
11895: OR
11896: IFFALSE 11841
// result := [ ] ;
11898: LD_ADDR_VAR 0 6
11902: PUSH
11903: EMPTY
11904: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11905: LD_VAR 0 1
11909: PPUSH
11910: LD_VAR 0 2
11914: PPUSH
11915: LD_VAR 0 3
11919: PPUSH
11920: LD_VAR 0 4
11924: PPUSH
11925: LD_VAR 0 5
11929: PPUSH
11930: CALL_OW 448
11934: IFFALSE 11967
// result := [ chassis , engine , control , weapon ] ;
11936: LD_ADDR_VAR 0 6
11940: PUSH
11941: LD_VAR 0 2
11945: PUSH
11946: LD_VAR 0 3
11950: PUSH
11951: LD_VAR 0 4
11955: PUSH
11956: LD_VAR 0 5
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: ST_TO_ADDR
// end ;
11967: LD_VAR 0 6
11971: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11972: LD_INT 0
11974: PPUSH
// if not chassis or not engine then
11975: LD_VAR 0 1
11979: NOT
11980: PUSH
11981: LD_VAR 0 2
11985: NOT
11986: OR
11987: IFFALSE 11991
// exit ;
11989: GO 12187
// case engine of engine_solar :
11991: LD_VAR 0 2
11995: PUSH
11996: LD_INT 2
11998: DOUBLE
11999: EQUAL
12000: IFTRUE 12004
12002: GO 12042
12004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12005: LD_ADDR_VAR 0 3
12009: PUSH
12010: LD_INT 11
12012: PUSH
12013: LD_INT 12
12015: PUSH
12016: LD_INT 13
12018: PUSH
12019: LD_INT 14
12021: PUSH
12022: LD_INT 1
12024: PUSH
12025: LD_INT 2
12027: PUSH
12028: LD_INT 3
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: ST_TO_ADDR
12040: GO 12171
12042: LD_INT 1
12044: DOUBLE
12045: EQUAL
12046: IFTRUE 12050
12048: GO 12112
12050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12051: LD_ADDR_VAR 0 3
12055: PUSH
12056: LD_INT 11
12058: PUSH
12059: LD_INT 12
12061: PUSH
12062: LD_INT 13
12064: PUSH
12065: LD_INT 14
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 4
12079: PUSH
12080: LD_INT 5
12082: PUSH
12083: LD_INT 21
12085: PUSH
12086: LD_INT 23
12088: PUSH
12089: LD_INT 22
12091: PUSH
12092: LD_INT 24
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: ST_TO_ADDR
12110: GO 12171
12112: LD_INT 3
12114: DOUBLE
12115: EQUAL
12116: IFTRUE 12120
12118: GO 12170
12120: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12121: LD_ADDR_VAR 0 3
12125: PUSH
12126: LD_INT 13
12128: PUSH
12129: LD_INT 14
12131: PUSH
12132: LD_INT 2
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: LD_INT 4
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: LD_INT 21
12146: PUSH
12147: LD_INT 22
12149: PUSH
12150: LD_INT 23
12152: PUSH
12153: LD_INT 24
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: ST_TO_ADDR
12168: GO 12171
12170: POP
// result := ( chassis in result ) ;
12171: LD_ADDR_VAR 0 3
12175: PUSH
12176: LD_VAR 0 1
12180: PUSH
12181: LD_VAR 0 3
12185: IN
12186: ST_TO_ADDR
// end ;
12187: LD_VAR 0 3
12191: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12192: LD_INT 0
12194: PPUSH
// if not chassis or not weapon then
12195: LD_VAR 0 1
12199: NOT
12200: PUSH
12201: LD_VAR 0 2
12205: NOT
12206: OR
12207: IFFALSE 12211
// exit ;
12209: GO 13271
// case weapon of us_machine_gun :
12211: LD_VAR 0 2
12215: PUSH
12216: LD_INT 2
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12254
12224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12225: LD_ADDR_VAR 0 3
12229: PUSH
12230: LD_INT 1
12232: PUSH
12233: LD_INT 2
12235: PUSH
12236: LD_INT 3
12238: PUSH
12239: LD_INT 4
12241: PUSH
12242: LD_INT 5
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: ST_TO_ADDR
12252: GO 13255
12254: LD_INT 3
12256: DOUBLE
12257: EQUAL
12258: IFTRUE 12262
12260: GO 12292
12262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12263: LD_ADDR_VAR 0 3
12267: PUSH
12268: LD_INT 1
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: LD_INT 3
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: LD_INT 5
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: ST_TO_ADDR
12290: GO 13255
12292: LD_INT 11
12294: DOUBLE
12295: EQUAL
12296: IFTRUE 12300
12298: GO 12330
12300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12301: LD_ADDR_VAR 0 3
12305: PUSH
12306: LD_INT 1
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: LD_INT 4
12317: PUSH
12318: LD_INT 5
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: ST_TO_ADDR
12328: GO 13255
12330: LD_INT 4
12332: DOUBLE
12333: EQUAL
12334: IFTRUE 12338
12336: GO 12364
12338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12339: LD_ADDR_VAR 0 3
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: LD_INT 3
12349: PUSH
12350: LD_INT 4
12352: PUSH
12353: LD_INT 5
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: ST_TO_ADDR
12362: GO 13255
12364: LD_INT 5
12366: DOUBLE
12367: EQUAL
12368: IFTRUE 12372
12370: GO 12398
12372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12373: LD_ADDR_VAR 0 3
12377: PUSH
12378: LD_INT 2
12380: PUSH
12381: LD_INT 3
12383: PUSH
12384: LD_INT 4
12386: PUSH
12387: LD_INT 5
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: ST_TO_ADDR
12396: GO 13255
12398: LD_INT 9
12400: DOUBLE
12401: EQUAL
12402: IFTRUE 12406
12404: GO 12432
12406: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12407: LD_ADDR_VAR 0 3
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: LD_INT 3
12417: PUSH
12418: LD_INT 4
12420: PUSH
12421: LD_INT 5
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: ST_TO_ADDR
12430: GO 13255
12432: LD_INT 7
12434: DOUBLE
12435: EQUAL
12436: IFTRUE 12440
12438: GO 12466
12440: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: LD_INT 4
12454: PUSH
12455: LD_INT 5
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: ST_TO_ADDR
12464: GO 13255
12466: LD_INT 12
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12500
12474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: LD_INT 4
12488: PUSH
12489: LD_INT 5
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: ST_TO_ADDR
12498: GO 13255
12500: LD_INT 13
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12534
12508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: LD_INT 4
12522: PUSH
12523: LD_INT 5
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: ST_TO_ADDR
12532: GO 13255
12534: LD_INT 14
12536: DOUBLE
12537: EQUAL
12538: IFTRUE 12542
12540: GO 12560
12542: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12543: LD_ADDR_VAR 0 3
12547: PUSH
12548: LD_INT 4
12550: PUSH
12551: LD_INT 5
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: ST_TO_ADDR
12558: GO 13255
12560: LD_INT 6
12562: DOUBLE
12563: EQUAL
12564: IFTRUE 12568
12566: GO 12586
12568: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12569: LD_ADDR_VAR 0 3
12573: PUSH
12574: LD_INT 4
12576: PUSH
12577: LD_INT 5
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: ST_TO_ADDR
12584: GO 13255
12586: LD_INT 10
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12612
12594: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12595: LD_ADDR_VAR 0 3
12599: PUSH
12600: LD_INT 4
12602: PUSH
12603: LD_INT 5
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: ST_TO_ADDR
12610: GO 13255
12612: LD_INT 22
12614: DOUBLE
12615: EQUAL
12616: IFTRUE 12620
12618: GO 12646
12620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12621: LD_ADDR_VAR 0 3
12625: PUSH
12626: LD_INT 11
12628: PUSH
12629: LD_INT 12
12631: PUSH
12632: LD_INT 13
12634: PUSH
12635: LD_INT 14
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: ST_TO_ADDR
12644: GO 13255
12646: LD_INT 23
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12680
12654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12655: LD_ADDR_VAR 0 3
12659: PUSH
12660: LD_INT 11
12662: PUSH
12663: LD_INT 12
12665: PUSH
12666: LD_INT 13
12668: PUSH
12669: LD_INT 14
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: ST_TO_ADDR
12678: GO 13255
12680: LD_INT 24
12682: DOUBLE
12683: EQUAL
12684: IFTRUE 12688
12686: GO 12714
12688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12689: LD_ADDR_VAR 0 3
12693: PUSH
12694: LD_INT 11
12696: PUSH
12697: LD_INT 12
12699: PUSH
12700: LD_INT 13
12702: PUSH
12703: LD_INT 14
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: ST_TO_ADDR
12712: GO 13255
12714: LD_INT 30
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12748
12722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12723: LD_ADDR_VAR 0 3
12727: PUSH
12728: LD_INT 11
12730: PUSH
12731: LD_INT 12
12733: PUSH
12734: LD_INT 13
12736: PUSH
12737: LD_INT 14
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: ST_TO_ADDR
12746: GO 13255
12748: LD_INT 25
12750: DOUBLE
12751: EQUAL
12752: IFTRUE 12756
12754: GO 12774
12756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12757: LD_ADDR_VAR 0 3
12761: PUSH
12762: LD_INT 13
12764: PUSH
12765: LD_INT 14
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: ST_TO_ADDR
12772: GO 13255
12774: LD_INT 27
12776: DOUBLE
12777: EQUAL
12778: IFTRUE 12782
12780: GO 12800
12782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12783: LD_ADDR_VAR 0 3
12787: PUSH
12788: LD_INT 13
12790: PUSH
12791: LD_INT 14
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: ST_TO_ADDR
12798: GO 13255
12800: LD_INT 92
12802: DOUBLE
12803: EQUAL
12804: IFTRUE 12808
12806: GO 12834
12808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12809: LD_ADDR_VAR 0 3
12813: PUSH
12814: LD_INT 11
12816: PUSH
12817: LD_INT 12
12819: PUSH
12820: LD_INT 13
12822: PUSH
12823: LD_INT 14
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: ST_TO_ADDR
12832: GO 13255
12834: LD_INT 28
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12842
12840: GO 12860
12842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12843: LD_ADDR_VAR 0 3
12847: PUSH
12848: LD_INT 13
12850: PUSH
12851: LD_INT 14
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: ST_TO_ADDR
12858: GO 13255
12860: LD_INT 29
12862: DOUBLE
12863: EQUAL
12864: IFTRUE 12868
12866: GO 12886
12868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: LD_INT 13
12876: PUSH
12877: LD_INT 14
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 13255
12886: LD_INT 31
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12912
12894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12895: LD_ADDR_VAR 0 3
12899: PUSH
12900: LD_INT 13
12902: PUSH
12903: LD_INT 14
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: ST_TO_ADDR
12910: GO 13255
12912: LD_INT 26
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 12938
12920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_INT 13
12928: PUSH
12929: LD_INT 14
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: ST_TO_ADDR
12936: GO 13255
12938: LD_INT 42
12940: DOUBLE
12941: EQUAL
12942: IFTRUE 12946
12944: GO 12972
12946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12947: LD_ADDR_VAR 0 3
12951: PUSH
12952: LD_INT 21
12954: PUSH
12955: LD_INT 22
12957: PUSH
12958: LD_INT 23
12960: PUSH
12961: LD_INT 24
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: ST_TO_ADDR
12970: GO 13255
12972: LD_INT 43
12974: DOUBLE
12975: EQUAL
12976: IFTRUE 12980
12978: GO 13006
12980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12981: LD_ADDR_VAR 0 3
12985: PUSH
12986: LD_INT 21
12988: PUSH
12989: LD_INT 22
12991: PUSH
12992: LD_INT 23
12994: PUSH
12995: LD_INT 24
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: ST_TO_ADDR
13004: GO 13255
13006: LD_INT 44
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13040
13014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13015: LD_ADDR_VAR 0 3
13019: PUSH
13020: LD_INT 21
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_INT 23
13028: PUSH
13029: LD_INT 24
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: ST_TO_ADDR
13038: GO 13255
13040: LD_INT 45
13042: DOUBLE
13043: EQUAL
13044: IFTRUE 13048
13046: GO 13074
13048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13049: LD_ADDR_VAR 0 3
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 23
13062: PUSH
13063: LD_INT 24
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: ST_TO_ADDR
13072: GO 13255
13074: LD_INT 49
13076: DOUBLE
13077: EQUAL
13078: IFTRUE 13082
13080: GO 13108
13082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13083: LD_ADDR_VAR 0 3
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_INT 23
13096: PUSH
13097: LD_INT 24
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: ST_TO_ADDR
13106: GO 13255
13108: LD_INT 51
13110: DOUBLE
13111: EQUAL
13112: IFTRUE 13116
13114: GO 13142
13116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 23
13130: PUSH
13131: LD_INT 24
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: ST_TO_ADDR
13140: GO 13255
13142: LD_INT 52
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13176
13150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_INT 21
13158: PUSH
13159: LD_INT 22
13161: PUSH
13162: LD_INT 23
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: ST_TO_ADDR
13174: GO 13255
13176: LD_INT 53
13178: DOUBLE
13179: EQUAL
13180: IFTRUE 13184
13182: GO 13202
13184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13185: LD_ADDR_VAR 0 3
13189: PUSH
13190: LD_INT 23
13192: PUSH
13193: LD_INT 24
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: ST_TO_ADDR
13200: GO 13255
13202: LD_INT 46
13204: DOUBLE
13205: EQUAL
13206: IFTRUE 13210
13208: GO 13228
13210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13211: LD_ADDR_VAR 0 3
13215: PUSH
13216: LD_INT 23
13218: PUSH
13219: LD_INT 24
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: ST_TO_ADDR
13226: GO 13255
13228: LD_INT 47
13230: DOUBLE
13231: EQUAL
13232: IFTRUE 13236
13234: GO 13254
13236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13237: LD_ADDR_VAR 0 3
13241: PUSH
13242: LD_INT 23
13244: PUSH
13245: LD_INT 24
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: ST_TO_ADDR
13252: GO 13255
13254: POP
// result := ( chassis in result ) ;
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_VAR 0 1
13264: PUSH
13265: LD_VAR 0 3
13269: IN
13270: ST_TO_ADDR
// end ;
13271: LD_VAR 0 3
13275: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13276: LD_INT 0
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
13283: PPUSH
13284: PPUSH
// result := array ;
13285: LD_ADDR_VAR 0 5
13289: PUSH
13290: LD_VAR 0 1
13294: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13295: LD_VAR 0 1
13299: NOT
13300: PUSH
13301: LD_VAR 0 2
13305: NOT
13306: OR
13307: PUSH
13308: LD_VAR 0 3
13312: NOT
13313: OR
13314: PUSH
13315: LD_VAR 0 2
13319: PUSH
13320: LD_VAR 0 1
13324: GREATER
13325: OR
13326: PUSH
13327: LD_VAR 0 3
13331: PUSH
13332: LD_VAR 0 1
13336: GREATER
13337: OR
13338: IFFALSE 13342
// exit ;
13340: GO 13638
// if direction then
13342: LD_VAR 0 4
13346: IFFALSE 13410
// begin d := 1 ;
13348: LD_ADDR_VAR 0 9
13352: PUSH
13353: LD_INT 1
13355: ST_TO_ADDR
// if i_from > i_to then
13356: LD_VAR 0 2
13360: PUSH
13361: LD_VAR 0 3
13365: GREATER
13366: IFFALSE 13392
// length := ( array - i_from ) + i_to else
13368: LD_ADDR_VAR 0 11
13372: PUSH
13373: LD_VAR 0 1
13377: PUSH
13378: LD_VAR 0 2
13382: MINUS
13383: PUSH
13384: LD_VAR 0 3
13388: PLUS
13389: ST_TO_ADDR
13390: GO 13408
// length := i_to - i_from ;
13392: LD_ADDR_VAR 0 11
13396: PUSH
13397: LD_VAR 0 3
13401: PUSH
13402: LD_VAR 0 2
13406: MINUS
13407: ST_TO_ADDR
// end else
13408: GO 13471
// begin d := - 1 ;
13410: LD_ADDR_VAR 0 9
13414: PUSH
13415: LD_INT 1
13417: NEG
13418: ST_TO_ADDR
// if i_from > i_to then
13419: LD_VAR 0 2
13423: PUSH
13424: LD_VAR 0 3
13428: GREATER
13429: IFFALSE 13449
// length := i_from - i_to else
13431: LD_ADDR_VAR 0 11
13435: PUSH
13436: LD_VAR 0 2
13440: PUSH
13441: LD_VAR 0 3
13445: MINUS
13446: ST_TO_ADDR
13447: GO 13471
// length := ( array - i_to ) + i_from ;
13449: LD_ADDR_VAR 0 11
13453: PUSH
13454: LD_VAR 0 1
13458: PUSH
13459: LD_VAR 0 3
13463: MINUS
13464: PUSH
13465: LD_VAR 0 2
13469: PLUS
13470: ST_TO_ADDR
// end ; if not length then
13471: LD_VAR 0 11
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 13638
// tmp := array ;
13480: LD_ADDR_VAR 0 10
13484: PUSH
13485: LD_VAR 0 1
13489: ST_TO_ADDR
// for i = 1 to length do
13490: LD_ADDR_VAR 0 6
13494: PUSH
13495: DOUBLE
13496: LD_INT 1
13498: DEC
13499: ST_TO_ADDR
13500: LD_VAR 0 11
13504: PUSH
13505: FOR_TO
13506: IFFALSE 13626
// begin for j = 1 to array do
13508: LD_ADDR_VAR 0 7
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_VAR 0 1
13522: PUSH
13523: FOR_TO
13524: IFFALSE 13612
// begin k := j + d ;
13526: LD_ADDR_VAR 0 8
13530: PUSH
13531: LD_VAR 0 7
13535: PUSH
13536: LD_VAR 0 9
13540: PLUS
13541: ST_TO_ADDR
// if k > array then
13542: LD_VAR 0 8
13546: PUSH
13547: LD_VAR 0 1
13551: GREATER
13552: IFFALSE 13562
// k := 1 ;
13554: LD_ADDR_VAR 0 8
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// if not k then
13562: LD_VAR 0 8
13566: NOT
13567: IFFALSE 13579
// k := array ;
13569: LD_ADDR_VAR 0 8
13573: PUSH
13574: LD_VAR 0 1
13578: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13579: LD_ADDR_VAR 0 10
13583: PUSH
13584: LD_VAR 0 10
13588: PPUSH
13589: LD_VAR 0 8
13593: PPUSH
13594: LD_VAR 0 1
13598: PUSH
13599: LD_VAR 0 7
13603: ARRAY
13604: PPUSH
13605: CALL_OW 1
13609: ST_TO_ADDR
// end ;
13610: GO 13523
13612: POP
13613: POP
// array := tmp ;
13614: LD_ADDR_VAR 0 1
13618: PUSH
13619: LD_VAR 0 10
13623: ST_TO_ADDR
// end ;
13624: GO 13505
13626: POP
13627: POP
// result := array ;
13628: LD_ADDR_VAR 0 5
13632: PUSH
13633: LD_VAR 0 1
13637: ST_TO_ADDR
// end ;
13638: LD_VAR 0 5
13642: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13643: LD_INT 0
13645: PPUSH
13646: PPUSH
// result := 0 ;
13647: LD_ADDR_VAR 0 3
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// if not array or not value in array then
13655: LD_VAR 0 1
13659: NOT
13660: PUSH
13661: LD_VAR 0 2
13665: PUSH
13666: LD_VAR 0 1
13670: IN
13671: NOT
13672: OR
13673: IFFALSE 13677
// exit ;
13675: GO 13731
// for i = 1 to array do
13677: LD_ADDR_VAR 0 4
13681: PUSH
13682: DOUBLE
13683: LD_INT 1
13685: DEC
13686: ST_TO_ADDR
13687: LD_VAR 0 1
13691: PUSH
13692: FOR_TO
13693: IFFALSE 13729
// if value = array [ i ] then
13695: LD_VAR 0 2
13699: PUSH
13700: LD_VAR 0 1
13704: PUSH
13705: LD_VAR 0 4
13709: ARRAY
13710: EQUAL
13711: IFFALSE 13727
// begin result := i ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 4
13722: ST_TO_ADDR
// exit ;
13723: POP
13724: POP
13725: GO 13731
// end ;
13727: GO 13692
13729: POP
13730: POP
// end ;
13731: LD_VAR 0 3
13735: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13736: LD_INT 0
13738: PPUSH
// vc_chassis := chassis ;
13739: LD_ADDR_OWVAR 37
13743: PUSH
13744: LD_VAR 0 1
13748: ST_TO_ADDR
// vc_engine := engine ;
13749: LD_ADDR_OWVAR 39
13753: PUSH
13754: LD_VAR 0 2
13758: ST_TO_ADDR
// vc_control := control ;
13759: LD_ADDR_OWVAR 38
13763: PUSH
13764: LD_VAR 0 3
13768: ST_TO_ADDR
// vc_weapon := weapon ;
13769: LD_ADDR_OWVAR 40
13773: PUSH
13774: LD_VAR 0 4
13778: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13779: LD_ADDR_OWVAR 41
13783: PUSH
13784: LD_VAR 0 5
13788: ST_TO_ADDR
// end ;
13789: LD_VAR 0 6
13793: RET
// export function WantPlant ( unit ) ; var task ; begin
13794: LD_INT 0
13796: PPUSH
13797: PPUSH
// result := false ;
13798: LD_ADDR_VAR 0 2
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13806: LD_ADDR_VAR 0 3
13810: PUSH
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 437
13820: ST_TO_ADDR
// if task then
13821: LD_VAR 0 3
13825: IFFALSE 13853
// if task [ 1 ] [ 1 ] = p then
13827: LD_VAR 0 3
13831: PUSH
13832: LD_INT 1
13834: ARRAY
13835: PUSH
13836: LD_INT 1
13838: ARRAY
13839: PUSH
13840: LD_STRING p
13842: EQUAL
13843: IFFALSE 13853
// result := true ;
13845: LD_ADDR_VAR 0 2
13849: PUSH
13850: LD_INT 1
13852: ST_TO_ADDR
// end ;
13853: LD_VAR 0 2
13857: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13858: LD_INT 0
13860: PPUSH
13861: PPUSH
13862: PPUSH
13863: PPUSH
// if pos < 1 then
13864: LD_VAR 0 2
13868: PUSH
13869: LD_INT 1
13871: LESS
13872: IFFALSE 13876
// exit ;
13874: GO 14179
// if pos = 1 then
13876: LD_VAR 0 2
13880: PUSH
13881: LD_INT 1
13883: EQUAL
13884: IFFALSE 13917
// result := Replace ( arr , pos [ 1 ] , value ) else
13886: LD_ADDR_VAR 0 4
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: LD_VAR 0 2
13900: PUSH
13901: LD_INT 1
13903: ARRAY
13904: PPUSH
13905: LD_VAR 0 3
13909: PPUSH
13910: CALL_OW 1
13914: ST_TO_ADDR
13915: GO 14179
// begin tmp := arr ;
13917: LD_ADDR_VAR 0 6
13921: PUSH
13922: LD_VAR 0 1
13926: ST_TO_ADDR
// s_arr := [ tmp ] ;
13927: LD_ADDR_VAR 0 7
13931: PUSH
13932: LD_VAR 0 6
13936: PUSH
13937: EMPTY
13938: LIST
13939: ST_TO_ADDR
// for i = 1 to pos - 1 do
13940: LD_ADDR_VAR 0 5
13944: PUSH
13945: DOUBLE
13946: LD_INT 1
13948: DEC
13949: ST_TO_ADDR
13950: LD_VAR 0 2
13954: PUSH
13955: LD_INT 1
13957: MINUS
13958: PUSH
13959: FOR_TO
13960: IFFALSE 14005
// begin tmp := tmp [ pos [ i ] ] ;
13962: LD_ADDR_VAR 0 6
13966: PUSH
13967: LD_VAR 0 6
13971: PUSH
13972: LD_VAR 0 2
13976: PUSH
13977: LD_VAR 0 5
13981: ARRAY
13982: ARRAY
13983: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13984: LD_ADDR_VAR 0 7
13988: PUSH
13989: LD_VAR 0 7
13993: PUSH
13994: LD_VAR 0 6
13998: PUSH
13999: EMPTY
14000: LIST
14001: ADD
14002: ST_TO_ADDR
// end ;
14003: GO 13959
14005: POP
14006: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14007: LD_ADDR_VAR 0 6
14011: PUSH
14012: LD_VAR 0 6
14016: PPUSH
14017: LD_VAR 0 2
14021: PUSH
14022: LD_VAR 0 2
14026: ARRAY
14027: PPUSH
14028: LD_VAR 0 3
14032: PPUSH
14033: CALL_OW 1
14037: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14038: LD_ADDR_VAR 0 7
14042: PUSH
14043: LD_VAR 0 7
14047: PPUSH
14048: LD_VAR 0 7
14052: PPUSH
14053: LD_VAR 0 6
14057: PPUSH
14058: CALL_OW 1
14062: ST_TO_ADDR
// for i = s_arr downto 2 do
14063: LD_ADDR_VAR 0 5
14067: PUSH
14068: DOUBLE
14069: LD_VAR 0 7
14073: INC
14074: ST_TO_ADDR
14075: LD_INT 2
14077: PUSH
14078: FOR_DOWNTO
14079: IFFALSE 14163
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14081: LD_ADDR_VAR 0 6
14085: PUSH
14086: LD_VAR 0 7
14090: PUSH
14091: LD_VAR 0 5
14095: PUSH
14096: LD_INT 1
14098: MINUS
14099: ARRAY
14100: PPUSH
14101: LD_VAR 0 2
14105: PUSH
14106: LD_VAR 0 5
14110: PUSH
14111: LD_INT 1
14113: MINUS
14114: ARRAY
14115: PPUSH
14116: LD_VAR 0 7
14120: PUSH
14121: LD_VAR 0 5
14125: ARRAY
14126: PPUSH
14127: CALL_OW 1
14131: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14132: LD_ADDR_VAR 0 7
14136: PUSH
14137: LD_VAR 0 7
14141: PPUSH
14142: LD_VAR 0 5
14146: PUSH
14147: LD_INT 1
14149: MINUS
14150: PPUSH
14151: LD_VAR 0 6
14155: PPUSH
14156: CALL_OW 1
14160: ST_TO_ADDR
// end ;
14161: GO 14078
14163: POP
14164: POP
// result := s_arr [ 1 ] ;
14165: LD_ADDR_VAR 0 4
14169: PUSH
14170: LD_VAR 0 7
14174: PUSH
14175: LD_INT 1
14177: ARRAY
14178: ST_TO_ADDR
// end ; end ;
14179: LD_VAR 0 4
14183: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14184: LD_INT 0
14186: PPUSH
14187: PPUSH
// if not list then
14188: LD_VAR 0 1
14192: NOT
14193: IFFALSE 14197
// exit ;
14195: GO 14288
// i := list [ pos1 ] ;
14197: LD_ADDR_VAR 0 5
14201: PUSH
14202: LD_VAR 0 1
14206: PUSH
14207: LD_VAR 0 2
14211: ARRAY
14212: ST_TO_ADDR
// if not i then
14213: LD_VAR 0 5
14217: NOT
14218: IFFALSE 14222
// exit ;
14220: GO 14288
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14222: LD_ADDR_VAR 0 1
14226: PUSH
14227: LD_VAR 0 1
14231: PPUSH
14232: LD_VAR 0 2
14236: PPUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_VAR 0 3
14246: ARRAY
14247: PPUSH
14248: CALL_OW 1
14252: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14253: LD_ADDR_VAR 0 1
14257: PUSH
14258: LD_VAR 0 1
14262: PPUSH
14263: LD_VAR 0 3
14267: PPUSH
14268: LD_VAR 0 5
14272: PPUSH
14273: CALL_OW 1
14277: ST_TO_ADDR
// result := list ;
14278: LD_ADDR_VAR 0 4
14282: PUSH
14283: LD_VAR 0 1
14287: ST_TO_ADDR
// end ;
14288: LD_VAR 0 4
14292: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14293: LD_INT 0
14295: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14296: LD_ADDR_VAR 0 5
14300: PUSH
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 250
14310: PPUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 251
14320: PPUSH
14321: LD_VAR 0 2
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_VAR 0 4
14335: PPUSH
14336: CALL 14714 0 5
14340: ST_TO_ADDR
// end ;
14341: LD_VAR 0 5
14345: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14346: LD_INT 0
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
// if not list or not unit then
14352: LD_VAR 0 2
14356: NOT
14357: PUSH
14358: LD_VAR 0 1
14362: NOT
14363: OR
14364: IFFALSE 14368
// exit ;
14366: GO 14709
// result := [ ] ;
14368: LD_ADDR_VAR 0 5
14372: PUSH
14373: EMPTY
14374: ST_TO_ADDR
// for i in list do
14375: LD_ADDR_VAR 0 6
14379: PUSH
14380: LD_VAR 0 2
14384: PUSH
14385: FOR_IN
14386: IFFALSE 14604
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14388: LD_ADDR_VAR 0 8
14392: PUSH
14393: LD_VAR 0 1
14397: PPUSH
14398: LD_VAR 0 6
14402: PUSH
14403: LD_INT 1
14405: ARRAY
14406: PPUSH
14407: LD_VAR 0 6
14411: PUSH
14412: LD_INT 2
14414: ARRAY
14415: PPUSH
14416: CALL_OW 297
14420: ST_TO_ADDR
// if not Count ( result ) then
14421: LD_VAR 0 5
14425: PPUSH
14426: CALL 10998 0 1
14430: NOT
14431: IFFALSE 14464
// begin result := Join ( result , [ i , tmp ] ) ;
14433: LD_ADDR_VAR 0 5
14437: PUSH
14438: LD_VAR 0 5
14442: PPUSH
14443: LD_VAR 0 6
14447: PUSH
14448: LD_VAR 0 8
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PPUSH
14457: CALL 46587 0 2
14461: ST_TO_ADDR
// continue ;
14462: GO 14385
// end ; if result [ result ] [ 2 ] <= tmp then
14464: LD_VAR 0 5
14468: PUSH
14469: LD_VAR 0 5
14473: ARRAY
14474: PUSH
14475: LD_INT 2
14477: ARRAY
14478: PUSH
14479: LD_VAR 0 8
14483: LESSEQUAL
14484: IFFALSE 14517
// result := Join ( result , [ i , tmp ] ) else
14486: LD_ADDR_VAR 0 5
14490: PUSH
14491: LD_VAR 0 5
14495: PPUSH
14496: LD_VAR 0 6
14500: PUSH
14501: LD_VAR 0 8
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL 46587 0 2
14514: ST_TO_ADDR
14515: GO 14602
// begin for j := 1 to Count ( result ) do
14517: LD_ADDR_VAR 0 7
14521: PUSH
14522: DOUBLE
14523: LD_INT 1
14525: DEC
14526: ST_TO_ADDR
14527: LD_VAR 0 5
14531: PPUSH
14532: CALL 10998 0 1
14536: PUSH
14537: FOR_TO
14538: IFFALSE 14600
// begin if tmp < result [ j ] [ 2 ] then
14540: LD_VAR 0 8
14544: PUSH
14545: LD_VAR 0 5
14549: PUSH
14550: LD_VAR 0 7
14554: ARRAY
14555: PUSH
14556: LD_INT 2
14558: ARRAY
14559: LESS
14560: IFFALSE 14598
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14562: LD_ADDR_VAR 0 5
14566: PUSH
14567: LD_VAR 0 5
14571: PPUSH
14572: LD_VAR 0 7
14576: PPUSH
14577: LD_VAR 0 6
14581: PUSH
14582: LD_VAR 0 8
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PPUSH
14591: CALL_OW 2
14595: ST_TO_ADDR
// break ;
14596: GO 14600
// end ; end ;
14598: GO 14537
14600: POP
14601: POP
// end ; end ;
14602: GO 14385
14604: POP
14605: POP
// if result and not asc then
14606: LD_VAR 0 5
14610: PUSH
14611: LD_VAR 0 3
14615: NOT
14616: AND
14617: IFFALSE 14634
// result := ReverseArray ( result ) ;
14619: LD_ADDR_VAR 0 5
14623: PUSH
14624: LD_VAR 0 5
14628: PPUSH
14629: CALL 41874 0 1
14633: ST_TO_ADDR
// tmp := [ ] ;
14634: LD_ADDR_VAR 0 8
14638: PUSH
14639: EMPTY
14640: ST_TO_ADDR
// if mode then
14641: LD_VAR 0 4
14645: IFFALSE 14709
// begin for i := 1 to result do
14647: LD_ADDR_VAR 0 6
14651: PUSH
14652: DOUBLE
14653: LD_INT 1
14655: DEC
14656: ST_TO_ADDR
14657: LD_VAR 0 5
14661: PUSH
14662: FOR_TO
14663: IFFALSE 14697
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14665: LD_ADDR_VAR 0 8
14669: PUSH
14670: LD_VAR 0 8
14674: PPUSH
14675: LD_VAR 0 5
14679: PUSH
14680: LD_VAR 0 6
14684: ARRAY
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: CALL 46587 0 2
14694: ST_TO_ADDR
14695: GO 14662
14697: POP
14698: POP
// result := tmp ;
14699: LD_ADDR_VAR 0 5
14703: PUSH
14704: LD_VAR 0 8
14708: ST_TO_ADDR
// end ; end ;
14709: LD_VAR 0 5
14713: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14714: LD_INT 0
14716: PPUSH
14717: PPUSH
14718: PPUSH
14719: PPUSH
// if not list then
14720: LD_VAR 0 3
14724: NOT
14725: IFFALSE 14729
// exit ;
14727: GO 15117
// result := [ ] ;
14729: LD_ADDR_VAR 0 6
14733: PUSH
14734: EMPTY
14735: ST_TO_ADDR
// for i in list do
14736: LD_ADDR_VAR 0 7
14740: PUSH
14741: LD_VAR 0 3
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14949
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14749: LD_ADDR_VAR 0 9
14753: PUSH
14754: LD_VAR 0 7
14758: PPUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: LD_VAR 0 2
14768: PPUSH
14769: CALL_OW 297
14773: ST_TO_ADDR
// if not result then
14774: LD_VAR 0 6
14778: NOT
14779: IFFALSE 14805
// result := [ [ i , tmp ] ] else
14781: LD_ADDR_VAR 0 6
14785: PUSH
14786: LD_VAR 0 7
14790: PUSH
14791: LD_VAR 0 9
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: ST_TO_ADDR
14803: GO 14947
// begin if result [ result ] [ 2 ] < tmp then
14805: LD_VAR 0 6
14809: PUSH
14810: LD_VAR 0 6
14814: ARRAY
14815: PUSH
14816: LD_INT 2
14818: ARRAY
14819: PUSH
14820: LD_VAR 0 9
14824: LESS
14825: IFFALSE 14867
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14827: LD_ADDR_VAR 0 6
14831: PUSH
14832: LD_VAR 0 6
14836: PPUSH
14837: LD_VAR 0 6
14841: PUSH
14842: LD_INT 1
14844: PLUS
14845: PPUSH
14846: LD_VAR 0 7
14850: PUSH
14851: LD_VAR 0 9
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PPUSH
14860: CALL_OW 2
14864: ST_TO_ADDR
14865: GO 14947
// for j = 1 to result do
14867: LD_ADDR_VAR 0 8
14871: PUSH
14872: DOUBLE
14873: LD_INT 1
14875: DEC
14876: ST_TO_ADDR
14877: LD_VAR 0 6
14881: PUSH
14882: FOR_TO
14883: IFFALSE 14945
// begin if tmp < result [ j ] [ 2 ] then
14885: LD_VAR 0 9
14889: PUSH
14890: LD_VAR 0 6
14894: PUSH
14895: LD_VAR 0 8
14899: ARRAY
14900: PUSH
14901: LD_INT 2
14903: ARRAY
14904: LESS
14905: IFFALSE 14943
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14907: LD_ADDR_VAR 0 6
14911: PUSH
14912: LD_VAR 0 6
14916: PPUSH
14917: LD_VAR 0 8
14921: PPUSH
14922: LD_VAR 0 7
14926: PUSH
14927: LD_VAR 0 9
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PPUSH
14936: CALL_OW 2
14940: ST_TO_ADDR
// break ;
14941: GO 14945
// end ; end ;
14943: GO 14882
14945: POP
14946: POP
// end ; end ;
14947: GO 14746
14949: POP
14950: POP
// if result and not asc then
14951: LD_VAR 0 6
14955: PUSH
14956: LD_VAR 0 4
14960: NOT
14961: AND
14962: IFFALSE 15037
// begin tmp := result ;
14964: LD_ADDR_VAR 0 9
14968: PUSH
14969: LD_VAR 0 6
14973: ST_TO_ADDR
// for i = tmp downto 1 do
14974: LD_ADDR_VAR 0 7
14978: PUSH
14979: DOUBLE
14980: LD_VAR 0 9
14984: INC
14985: ST_TO_ADDR
14986: LD_INT 1
14988: PUSH
14989: FOR_DOWNTO
14990: IFFALSE 15035
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14992: LD_ADDR_VAR 0 6
14996: PUSH
14997: LD_VAR 0 6
15001: PPUSH
15002: LD_VAR 0 9
15006: PUSH
15007: LD_VAR 0 7
15011: MINUS
15012: PUSH
15013: LD_INT 1
15015: PLUS
15016: PPUSH
15017: LD_VAR 0 9
15021: PUSH
15022: LD_VAR 0 7
15026: ARRAY
15027: PPUSH
15028: CALL_OW 1
15032: ST_TO_ADDR
15033: GO 14989
15035: POP
15036: POP
// end ; tmp := [ ] ;
15037: LD_ADDR_VAR 0 9
15041: PUSH
15042: EMPTY
15043: ST_TO_ADDR
// if mode then
15044: LD_VAR 0 5
15048: IFFALSE 15117
// begin for i = 1 to result do
15050: LD_ADDR_VAR 0 7
15054: PUSH
15055: DOUBLE
15056: LD_INT 1
15058: DEC
15059: ST_TO_ADDR
15060: LD_VAR 0 6
15064: PUSH
15065: FOR_TO
15066: IFFALSE 15105
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15068: LD_ADDR_VAR 0 9
15072: PUSH
15073: LD_VAR 0 9
15077: PPUSH
15078: LD_VAR 0 7
15082: PPUSH
15083: LD_VAR 0 6
15087: PUSH
15088: LD_VAR 0 7
15092: ARRAY
15093: PUSH
15094: LD_INT 1
15096: ARRAY
15097: PPUSH
15098: CALL_OW 1
15102: ST_TO_ADDR
15103: GO 15065
15105: POP
15106: POP
// result := tmp ;
15107: LD_ADDR_VAR 0 6
15111: PUSH
15112: LD_VAR 0 9
15116: ST_TO_ADDR
// end ; end ;
15117: LD_VAR 0 6
15121: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15122: LD_INT 0
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15130: LD_ADDR_VAR 0 5
15134: PUSH
15135: LD_INT 0
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: LD_INT 0
15143: PUSH
15144: EMPTY
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: ST_TO_ADDR
// if not x or not y then
15152: LD_VAR 0 2
15156: NOT
15157: PUSH
15158: LD_VAR 0 3
15162: NOT
15163: OR
15164: IFFALSE 15168
// exit ;
15166: GO 16818
// if not range then
15168: LD_VAR 0 4
15172: NOT
15173: IFFALSE 15183
// range := 10 ;
15175: LD_ADDR_VAR 0 4
15179: PUSH
15180: LD_INT 10
15182: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15183: LD_ADDR_VAR 0 8
15187: PUSH
15188: LD_INT 81
15190: PUSH
15191: LD_VAR 0 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 92
15202: PUSH
15203: LD_VAR 0 2
15207: PUSH
15208: LD_VAR 0 3
15212: PUSH
15213: LD_VAR 0 4
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 3
15226: PUSH
15227: LD_INT 21
15229: PUSH
15230: LD_INT 3
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 69
15250: ST_TO_ADDR
// if not tmp then
15251: LD_VAR 0 8
15255: NOT
15256: IFFALSE 15260
// exit ;
15258: GO 16818
// for i in tmp do
15260: LD_ADDR_VAR 0 6
15264: PUSH
15265: LD_VAR 0 8
15269: PUSH
15270: FOR_IN
15271: IFFALSE 16793
// begin points := [ 0 , 0 , 0 ] ;
15273: LD_ADDR_VAR 0 9
15277: PUSH
15278: LD_INT 0
15280: PUSH
15281: LD_INT 0
15283: PUSH
15284: LD_INT 0
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: ST_TO_ADDR
// bpoints := 1 ;
15292: LD_ADDR_VAR 0 10
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15300: LD_VAR 0 6
15304: PPUSH
15305: CALL_OW 247
15309: PUSH
15310: LD_INT 1
15312: DOUBLE
15313: EQUAL
15314: IFTRUE 15318
15316: GO 15896
15318: POP
// begin if GetClass ( i ) = 1 then
15319: LD_VAR 0 6
15323: PPUSH
15324: CALL_OW 257
15328: PUSH
15329: LD_INT 1
15331: EQUAL
15332: IFFALSE 15353
// points := [ 10 , 5 , 3 ] ;
15334: LD_ADDR_VAR 0 9
15338: PUSH
15339: LD_INT 10
15341: PUSH
15342: LD_INT 5
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15353: LD_VAR 0 6
15357: PPUSH
15358: CALL_OW 257
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: LD_INT 4
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: IN
15377: IFFALSE 15398
// points := [ 3 , 2 , 1 ] ;
15379: LD_ADDR_VAR 0 9
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: LD_INT 2
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15398: LD_VAR 0 6
15402: PPUSH
15403: CALL_OW 257
15407: PUSH
15408: LD_INT 5
15410: EQUAL
15411: IFFALSE 15432
// points := [ 130 , 5 , 2 ] ;
15413: LD_ADDR_VAR 0 9
15417: PUSH
15418: LD_INT 130
15420: PUSH
15421: LD_INT 5
15423: PUSH
15424: LD_INT 2
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15432: LD_VAR 0 6
15436: PPUSH
15437: CALL_OW 257
15441: PUSH
15442: LD_INT 8
15444: EQUAL
15445: IFFALSE 15466
// points := [ 35 , 35 , 30 ] ;
15447: LD_ADDR_VAR 0 9
15451: PUSH
15452: LD_INT 35
15454: PUSH
15455: LD_INT 35
15457: PUSH
15458: LD_INT 30
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15466: LD_VAR 0 6
15470: PPUSH
15471: CALL_OW 257
15475: PUSH
15476: LD_INT 9
15478: EQUAL
15479: IFFALSE 15500
// points := [ 20 , 55 , 40 ] ;
15481: LD_ADDR_VAR 0 9
15485: PUSH
15486: LD_INT 20
15488: PUSH
15489: LD_INT 55
15491: PUSH
15492: LD_INT 40
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: LIST
15499: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15500: LD_VAR 0 6
15504: PPUSH
15505: CALL_OW 257
15509: PUSH
15510: LD_INT 12
15512: PUSH
15513: LD_INT 16
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: IN
15520: IFFALSE 15541
// points := [ 5 , 3 , 2 ] ;
15522: LD_ADDR_VAR 0 9
15526: PUSH
15527: LD_INT 5
15529: PUSH
15530: LD_INT 3
15532: PUSH
15533: LD_INT 2
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15541: LD_VAR 0 6
15545: PPUSH
15546: CALL_OW 257
15550: PUSH
15551: LD_INT 17
15553: EQUAL
15554: IFFALSE 15575
// points := [ 100 , 50 , 75 ] ;
15556: LD_ADDR_VAR 0 9
15560: PUSH
15561: LD_INT 100
15563: PUSH
15564: LD_INT 50
15566: PUSH
15567: LD_INT 75
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15575: LD_VAR 0 6
15579: PPUSH
15580: CALL_OW 257
15584: PUSH
15585: LD_INT 15
15587: EQUAL
15588: IFFALSE 15609
// points := [ 10 , 5 , 3 ] ;
15590: LD_ADDR_VAR 0 9
15594: PUSH
15595: LD_INT 10
15597: PUSH
15598: LD_INT 5
15600: PUSH
15601: LD_INT 3
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15609: LD_VAR 0 6
15613: PPUSH
15614: CALL_OW 257
15618: PUSH
15619: LD_INT 14
15621: EQUAL
15622: IFFALSE 15643
// points := [ 10 , 0 , 0 ] ;
15624: LD_ADDR_VAR 0 9
15628: PUSH
15629: LD_INT 10
15631: PUSH
15632: LD_INT 0
15634: PUSH
15635: LD_INT 0
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15643: LD_VAR 0 6
15647: PPUSH
15648: CALL_OW 257
15652: PUSH
15653: LD_INT 11
15655: EQUAL
15656: IFFALSE 15677
// points := [ 30 , 10 , 5 ] ;
15658: LD_ADDR_VAR 0 9
15662: PUSH
15663: LD_INT 30
15665: PUSH
15666: LD_INT 10
15668: PUSH
15669: LD_INT 5
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: LIST
15676: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15677: LD_VAR 0 1
15681: PPUSH
15682: LD_INT 5
15684: PPUSH
15685: CALL_OW 321
15689: PUSH
15690: LD_INT 2
15692: EQUAL
15693: IFFALSE 15710
// bpoints := bpoints * 1.8 ;
15695: LD_ADDR_VAR 0 10
15699: PUSH
15700: LD_VAR 0 10
15704: PUSH
15705: LD_REAL  1.80000000000000E+0000
15708: MUL
15709: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15710: LD_VAR 0 6
15714: PPUSH
15715: CALL_OW 257
15719: PUSH
15720: LD_INT 1
15722: PUSH
15723: LD_INT 2
15725: PUSH
15726: LD_INT 3
15728: PUSH
15729: LD_INT 4
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: IN
15738: PUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: LD_INT 51
15746: PPUSH
15747: CALL_OW 321
15751: PUSH
15752: LD_INT 2
15754: EQUAL
15755: AND
15756: IFFALSE 15773
// bpoints := bpoints * 1.2 ;
15758: LD_ADDR_VAR 0 10
15762: PUSH
15763: LD_VAR 0 10
15767: PUSH
15768: LD_REAL  1.20000000000000E+0000
15771: MUL
15772: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15773: LD_VAR 0 6
15777: PPUSH
15778: CALL_OW 257
15782: PUSH
15783: LD_INT 5
15785: PUSH
15786: LD_INT 7
15788: PUSH
15789: LD_INT 9
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: IN
15797: PUSH
15798: LD_VAR 0 1
15802: PPUSH
15803: LD_INT 52
15805: PPUSH
15806: CALL_OW 321
15810: PUSH
15811: LD_INT 2
15813: EQUAL
15814: AND
15815: IFFALSE 15832
// bpoints := bpoints * 1.5 ;
15817: LD_ADDR_VAR 0 10
15821: PUSH
15822: LD_VAR 0 10
15826: PUSH
15827: LD_REAL  1.50000000000000E+0000
15830: MUL
15831: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 66
15839: PPUSH
15840: CALL_OW 321
15844: PUSH
15845: LD_INT 2
15847: EQUAL
15848: IFFALSE 15865
// bpoints := bpoints * 1.1 ;
15850: LD_ADDR_VAR 0 10
15854: PUSH
15855: LD_VAR 0 10
15859: PUSH
15860: LD_REAL  1.10000000000000E+0000
15863: MUL
15864: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15865: LD_ADDR_VAR 0 10
15869: PUSH
15870: LD_VAR 0 10
15874: PUSH
15875: LD_VAR 0 6
15879: PPUSH
15880: LD_INT 1
15882: PPUSH
15883: CALL_OW 259
15887: PUSH
15888: LD_REAL  1.15000000000000E+0000
15891: MUL
15892: MUL
15893: ST_TO_ADDR
// end ; unit_vehicle :
15894: GO 16722
15896: LD_INT 2
15898: DOUBLE
15899: EQUAL
15900: IFTRUE 15904
15902: GO 16710
15904: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15905: LD_VAR 0 6
15909: PPUSH
15910: CALL_OW 264
15914: PUSH
15915: LD_INT 2
15917: PUSH
15918: LD_INT 42
15920: PUSH
15921: LD_INT 24
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: IN
15929: IFFALSE 15950
// points := [ 25 , 5 , 3 ] ;
15931: LD_ADDR_VAR 0 9
15935: PUSH
15936: LD_INT 25
15938: PUSH
15939: LD_INT 5
15941: PUSH
15942: LD_INT 3
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15950: LD_VAR 0 6
15954: PPUSH
15955: CALL_OW 264
15959: PUSH
15960: LD_INT 4
15962: PUSH
15963: LD_INT 43
15965: PUSH
15966: LD_INT 25
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: IN
15974: IFFALSE 15995
// points := [ 40 , 15 , 5 ] ;
15976: LD_ADDR_VAR 0 9
15980: PUSH
15981: LD_INT 40
15983: PUSH
15984: LD_INT 15
15986: PUSH
15987: LD_INT 5
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15995: LD_VAR 0 6
15999: PPUSH
16000: CALL_OW 264
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: LD_INT 23
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: IN
16015: IFFALSE 16036
// points := [ 7 , 25 , 8 ] ;
16017: LD_ADDR_VAR 0 9
16021: PUSH
16022: LD_INT 7
16024: PUSH
16025: LD_INT 25
16027: PUSH
16028: LD_INT 8
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16036: LD_VAR 0 6
16040: PPUSH
16041: CALL_OW 264
16045: PUSH
16046: LD_INT 5
16048: PUSH
16049: LD_INT 27
16051: PUSH
16052: LD_INT 44
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: LIST
16059: IN
16060: IFFALSE 16081
// points := [ 14 , 50 , 16 ] ;
16062: LD_ADDR_VAR 0 9
16066: PUSH
16067: LD_INT 14
16069: PUSH
16070: LD_INT 50
16072: PUSH
16073: LD_INT 16
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16081: LD_VAR 0 6
16085: PPUSH
16086: CALL_OW 264
16090: PUSH
16091: LD_INT 6
16093: PUSH
16094: LD_INT 46
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: IN
16101: IFFALSE 16122
// points := [ 32 , 120 , 70 ] ;
16103: LD_ADDR_VAR 0 9
16107: PUSH
16108: LD_INT 32
16110: PUSH
16111: LD_INT 120
16113: PUSH
16114: LD_INT 70
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: LIST
16121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16122: LD_VAR 0 6
16126: PPUSH
16127: CALL_OW 264
16131: PUSH
16132: LD_INT 7
16134: PUSH
16135: LD_INT 28
16137: PUSH
16138: LD_INT 45
16140: PUSH
16141: LD_INT 92
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: IN
16150: IFFALSE 16171
// points := [ 35 , 20 , 45 ] ;
16152: LD_ADDR_VAR 0 9
16156: PUSH
16157: LD_INT 35
16159: PUSH
16160: LD_INT 20
16162: PUSH
16163: LD_INT 45
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16171: LD_VAR 0 6
16175: PPUSH
16176: CALL_OW 264
16180: PUSH
16181: LD_INT 47
16183: PUSH
16184: EMPTY
16185: LIST
16186: IN
16187: IFFALSE 16208
// points := [ 67 , 45 , 75 ] ;
16189: LD_ADDR_VAR 0 9
16193: PUSH
16194: LD_INT 67
16196: PUSH
16197: LD_INT 45
16199: PUSH
16200: LD_INT 75
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16208: LD_VAR 0 6
16212: PPUSH
16213: CALL_OW 264
16217: PUSH
16218: LD_INT 26
16220: PUSH
16221: EMPTY
16222: LIST
16223: IN
16224: IFFALSE 16245
// points := [ 120 , 30 , 80 ] ;
16226: LD_ADDR_VAR 0 9
16230: PUSH
16231: LD_INT 120
16233: PUSH
16234: LD_INT 30
16236: PUSH
16237: LD_INT 80
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16245: LD_VAR 0 6
16249: PPUSH
16250: CALL_OW 264
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: EMPTY
16259: LIST
16260: IN
16261: IFFALSE 16282
// points := [ 40 , 1 , 1 ] ;
16263: LD_ADDR_VAR 0 9
16267: PUSH
16268: LD_INT 40
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 1
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16282: LD_VAR 0 6
16286: PPUSH
16287: CALL_OW 264
16291: PUSH
16292: LD_INT 29
16294: PUSH
16295: EMPTY
16296: LIST
16297: IN
16298: IFFALSE 16319
// points := [ 70 , 200 , 400 ] ;
16300: LD_ADDR_VAR 0 9
16304: PUSH
16305: LD_INT 70
16307: PUSH
16308: LD_INT 200
16310: PUSH
16311: LD_INT 400
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16319: LD_VAR 0 6
16323: PPUSH
16324: CALL_OW 264
16328: PUSH
16329: LD_INT 14
16331: PUSH
16332: LD_INT 53
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: IN
16339: IFFALSE 16360
// points := [ 40 , 10 , 20 ] ;
16341: LD_ADDR_VAR 0 9
16345: PUSH
16346: LD_INT 40
16348: PUSH
16349: LD_INT 10
16351: PUSH
16352: LD_INT 20
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16360: LD_VAR 0 6
16364: PPUSH
16365: CALL_OW 264
16369: PUSH
16370: LD_INT 9
16372: PUSH
16373: EMPTY
16374: LIST
16375: IN
16376: IFFALSE 16397
// points := [ 5 , 70 , 20 ] ;
16378: LD_ADDR_VAR 0 9
16382: PUSH
16383: LD_INT 5
16385: PUSH
16386: LD_INT 70
16388: PUSH
16389: LD_INT 20
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16397: LD_VAR 0 6
16401: PPUSH
16402: CALL_OW 264
16406: PUSH
16407: LD_INT 10
16409: PUSH
16410: EMPTY
16411: LIST
16412: IN
16413: IFFALSE 16434
// points := [ 35 , 110 , 70 ] ;
16415: LD_ADDR_VAR 0 9
16419: PUSH
16420: LD_INT 35
16422: PUSH
16423: LD_INT 110
16425: PUSH
16426: LD_INT 70
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16434: LD_VAR 0 6
16438: PPUSH
16439: CALL_OW 265
16443: PUSH
16444: LD_INT 25
16446: EQUAL
16447: IFFALSE 16468
// points := [ 80 , 65 , 100 ] ;
16449: LD_ADDR_VAR 0 9
16453: PUSH
16454: LD_INT 80
16456: PUSH
16457: LD_INT 65
16459: PUSH
16460: LD_INT 100
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16468: LD_VAR 0 6
16472: PPUSH
16473: CALL_OW 263
16477: PUSH
16478: LD_INT 1
16480: EQUAL
16481: IFFALSE 16516
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16483: LD_ADDR_VAR 0 10
16487: PUSH
16488: LD_VAR 0 10
16492: PUSH
16493: LD_VAR 0 6
16497: PPUSH
16498: CALL_OW 311
16502: PPUSH
16503: LD_INT 3
16505: PPUSH
16506: CALL_OW 259
16510: PUSH
16511: LD_INT 4
16513: MUL
16514: MUL
16515: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16516: LD_VAR 0 6
16520: PPUSH
16521: CALL_OW 263
16525: PUSH
16526: LD_INT 2
16528: EQUAL
16529: IFFALSE 16580
// begin j := IsControledBy ( i ) ;
16531: LD_ADDR_VAR 0 7
16535: PUSH
16536: LD_VAR 0 6
16540: PPUSH
16541: CALL_OW 312
16545: ST_TO_ADDR
// if j then
16546: LD_VAR 0 7
16550: IFFALSE 16580
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16552: LD_ADDR_VAR 0 10
16556: PUSH
16557: LD_VAR 0 10
16561: PUSH
16562: LD_VAR 0 7
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 259
16574: PUSH
16575: LD_INT 3
16577: MUL
16578: MUL
16579: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16580: LD_VAR 0 6
16584: PPUSH
16585: CALL_OW 264
16589: PUSH
16590: LD_INT 5
16592: PUSH
16593: LD_INT 6
16595: PUSH
16596: LD_INT 46
16598: PUSH
16599: LD_INT 44
16601: PUSH
16602: LD_INT 47
16604: PUSH
16605: LD_INT 45
16607: PUSH
16608: LD_INT 28
16610: PUSH
16611: LD_INT 7
16613: PUSH
16614: LD_INT 27
16616: PUSH
16617: LD_INT 29
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: IN
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: LD_INT 52
16640: PPUSH
16641: CALL_OW 321
16645: PUSH
16646: LD_INT 2
16648: EQUAL
16649: AND
16650: IFFALSE 16667
// bpoints := bpoints * 1.2 ;
16652: LD_ADDR_VAR 0 10
16656: PUSH
16657: LD_VAR 0 10
16661: PUSH
16662: LD_REAL  1.20000000000000E+0000
16665: MUL
16666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16667: LD_VAR 0 6
16671: PPUSH
16672: CALL_OW 264
16676: PUSH
16677: LD_INT 6
16679: PUSH
16680: LD_INT 46
16682: PUSH
16683: LD_INT 47
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: IN
16691: IFFALSE 16708
// bpoints := bpoints * 1.2 ;
16693: LD_ADDR_VAR 0 10
16697: PUSH
16698: LD_VAR 0 10
16702: PUSH
16703: LD_REAL  1.20000000000000E+0000
16706: MUL
16707: ST_TO_ADDR
// end ; unit_building :
16708: GO 16722
16710: LD_INT 3
16712: DOUBLE
16713: EQUAL
16714: IFTRUE 16718
16716: GO 16721
16718: POP
// ; end ;
16719: GO 16722
16721: POP
// for j = 1 to 3 do
16722: LD_ADDR_VAR 0 7
16726: PUSH
16727: DOUBLE
16728: LD_INT 1
16730: DEC
16731: ST_TO_ADDR
16732: LD_INT 3
16734: PUSH
16735: FOR_TO
16736: IFFALSE 16789
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16738: LD_ADDR_VAR 0 5
16742: PUSH
16743: LD_VAR 0 5
16747: PPUSH
16748: LD_VAR 0 7
16752: PPUSH
16753: LD_VAR 0 5
16757: PUSH
16758: LD_VAR 0 7
16762: ARRAY
16763: PUSH
16764: LD_VAR 0 9
16768: PUSH
16769: LD_VAR 0 7
16773: ARRAY
16774: PUSH
16775: LD_VAR 0 10
16779: MUL
16780: PLUS
16781: PPUSH
16782: CALL_OW 1
16786: ST_TO_ADDR
16787: GO 16735
16789: POP
16790: POP
// end ;
16791: GO 15270
16793: POP
16794: POP
// result := Replace ( result , 4 , tmp ) ;
16795: LD_ADDR_VAR 0 5
16799: PUSH
16800: LD_VAR 0 5
16804: PPUSH
16805: LD_INT 4
16807: PPUSH
16808: LD_VAR 0 8
16812: PPUSH
16813: CALL_OW 1
16817: ST_TO_ADDR
// end ;
16818: LD_VAR 0 5
16822: RET
// export function DangerAtRange ( unit , range ) ; begin
16823: LD_INT 0
16825: PPUSH
// if not unit then
16826: LD_VAR 0 1
16830: NOT
16831: IFFALSE 16835
// exit ;
16833: GO 16880
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16835: LD_ADDR_VAR 0 3
16839: PUSH
16840: LD_VAR 0 1
16844: PPUSH
16845: CALL_OW 255
16849: PPUSH
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 250
16859: PPUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 251
16869: PPUSH
16870: LD_VAR 0 2
16874: PPUSH
16875: CALL 15122 0 4
16879: ST_TO_ADDR
// end ;
16880: LD_VAR 0 3
16884: RET
// export function DangerInArea ( side , area ) ; begin
16885: LD_INT 0
16887: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16888: LD_ADDR_VAR 0 3
16892: PUSH
16893: LD_VAR 0 2
16897: PPUSH
16898: LD_INT 81
16900: PUSH
16901: LD_VAR 0 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PPUSH
16910: CALL_OW 70
16914: ST_TO_ADDR
// end ;
16915: LD_VAR 0 3
16919: RET
// export function IsExtension ( b ) ; begin
16920: LD_INT 0
16922: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16923: LD_ADDR_VAR 0 2
16927: PUSH
16928: LD_VAR 0 1
16932: PUSH
16933: LD_INT 23
16935: PUSH
16936: LD_INT 20
16938: PUSH
16939: LD_INT 22
16941: PUSH
16942: LD_INT 17
16944: PUSH
16945: LD_INT 24
16947: PUSH
16948: LD_INT 21
16950: PUSH
16951: LD_INT 19
16953: PUSH
16954: LD_INT 16
16956: PUSH
16957: LD_INT 25
16959: PUSH
16960: LD_INT 18
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: IN
16975: ST_TO_ADDR
// end ;
16976: LD_VAR 0 2
16980: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16981: LD_INT 0
16983: PPUSH
16984: PPUSH
16985: PPUSH
// result := [ ] ;
16986: LD_ADDR_VAR 0 4
16990: PUSH
16991: EMPTY
16992: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16993: LD_ADDR_VAR 0 5
16997: PUSH
16998: LD_VAR 0 2
17002: PPUSH
17003: LD_INT 21
17005: PUSH
17006: LD_INT 3
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 70
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 5
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17091
// if checkLink then
17027: LD_VAR 0 3
17031: IFFALSE 17081
// begin for i in tmp do
17033: LD_ADDR_VAR 0 6
17037: PUSH
17038: LD_VAR 0 5
17042: PUSH
17043: FOR_IN
17044: IFFALSE 17079
// if GetBase ( i ) <> base then
17046: LD_VAR 0 6
17050: PPUSH
17051: CALL_OW 274
17055: PUSH
17056: LD_VAR 0 1
17060: NONEQUAL
17061: IFFALSE 17077
// ComLinkToBase ( base , i ) ;
17063: LD_VAR 0 1
17067: PPUSH
17068: LD_VAR 0 6
17072: PPUSH
17073: CALL_OW 169
17077: GO 17043
17079: POP
17080: POP
// end ; result := tmp ;
17081: LD_ADDR_VAR 0 4
17085: PUSH
17086: LD_VAR 0 5
17090: ST_TO_ADDR
// end ;
17091: LD_VAR 0 4
17095: RET
// export function ComComplete ( units , b ) ; var i ; begin
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
// if not units then
17100: LD_VAR 0 1
17104: NOT
17105: IFFALSE 17109
// exit ;
17107: GO 17199
// for i in units do
17109: LD_ADDR_VAR 0 4
17113: PUSH
17114: LD_VAR 0 1
17118: PUSH
17119: FOR_IN
17120: IFFALSE 17197
// if BuildingStatus ( b ) = bs_build then
17122: LD_VAR 0 2
17126: PPUSH
17127: CALL_OW 461
17131: PUSH
17132: LD_INT 1
17134: EQUAL
17135: IFFALSE 17195
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17137: LD_VAR 0 4
17141: PPUSH
17142: LD_STRING h
17144: PUSH
17145: LD_VAR 0 2
17149: PPUSH
17150: CALL_OW 250
17154: PUSH
17155: LD_VAR 0 2
17159: PPUSH
17160: CALL_OW 251
17164: PUSH
17165: LD_VAR 0 2
17169: PUSH
17170: LD_INT 0
17172: PUSH
17173: LD_INT 0
17175: PUSH
17176: LD_INT 0
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: PPUSH
17191: CALL_OW 446
17195: GO 17119
17197: POP
17198: POP
// end ;
17199: LD_VAR 0 3
17203: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17212: LD_VAR 0 1
17216: NOT
17217: PUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 263
17227: PUSH
17228: LD_INT 2
17230: NONEQUAL
17231: OR
17232: IFFALSE 17236
// exit ;
17234: GO 17552
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17236: LD_ADDR_VAR 0 6
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 255
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 30
17263: PUSH
17264: LD_INT 36
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 34
17273: PUSH
17274: LD_INT 31
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PPUSH
17290: CALL_OW 69
17294: ST_TO_ADDR
// if not tmp then
17295: LD_VAR 0 6
17299: NOT
17300: IFFALSE 17304
// exit ;
17302: GO 17552
// result := [ ] ;
17304: LD_ADDR_VAR 0 2
17308: PUSH
17309: EMPTY
17310: ST_TO_ADDR
// for i in tmp do
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_VAR 0 6
17320: PUSH
17321: FOR_IN
17322: IFFALSE 17393
// begin t := UnitsInside ( i ) ;
17324: LD_ADDR_VAR 0 4
17328: PUSH
17329: LD_VAR 0 3
17333: PPUSH
17334: CALL_OW 313
17338: ST_TO_ADDR
// if t then
17339: LD_VAR 0 4
17343: IFFALSE 17391
// for j in t do
17345: LD_ADDR_VAR 0 7
17349: PUSH
17350: LD_VAR 0 4
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17389
// result := Replace ( result , result + 1 , j ) ;
17358: LD_ADDR_VAR 0 2
17362: PUSH
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_VAR 0 2
17372: PUSH
17373: LD_INT 1
17375: PLUS
17376: PPUSH
17377: LD_VAR 0 7
17381: PPUSH
17382: CALL_OW 1
17386: ST_TO_ADDR
17387: GO 17355
17389: POP
17390: POP
// end ;
17391: GO 17321
17393: POP
17394: POP
// if not result then
17395: LD_VAR 0 2
17399: NOT
17400: IFFALSE 17404
// exit ;
17402: GO 17552
// mech := result [ 1 ] ;
17404: LD_ADDR_VAR 0 5
17408: PUSH
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 1
17416: ARRAY
17417: ST_TO_ADDR
// if result > 1 then
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 1
17425: GREATER
17426: IFFALSE 17538
// begin for i = 2 to result do
17428: LD_ADDR_VAR 0 3
17432: PUSH
17433: DOUBLE
17434: LD_INT 2
17436: DEC
17437: ST_TO_ADDR
17438: LD_VAR 0 2
17442: PUSH
17443: FOR_TO
17444: IFFALSE 17536
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17446: LD_ADDR_VAR 0 4
17450: PUSH
17451: LD_VAR 0 2
17455: PUSH
17456: LD_VAR 0 3
17460: ARRAY
17461: PPUSH
17462: LD_INT 3
17464: PPUSH
17465: CALL_OW 259
17469: PUSH
17470: LD_VAR 0 2
17474: PUSH
17475: LD_VAR 0 3
17479: ARRAY
17480: PPUSH
17481: CALL_OW 432
17485: MINUS
17486: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17487: LD_VAR 0 4
17491: PUSH
17492: LD_VAR 0 5
17496: PPUSH
17497: LD_INT 3
17499: PPUSH
17500: CALL_OW 259
17504: PUSH
17505: LD_VAR 0 5
17509: PPUSH
17510: CALL_OW 432
17514: MINUS
17515: GREATEREQUAL
17516: IFFALSE 17534
// mech := result [ i ] ;
17518: LD_ADDR_VAR 0 5
17522: PUSH
17523: LD_VAR 0 2
17527: PUSH
17528: LD_VAR 0 3
17532: ARRAY
17533: ST_TO_ADDR
// end ;
17534: GO 17443
17536: POP
17537: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17538: LD_VAR 0 1
17542: PPUSH
17543: LD_VAR 0 5
17547: PPUSH
17548: CALL_OW 135
// end ;
17552: LD_VAR 0 2
17556: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17557: LD_INT 0
17559: PPUSH
17560: PPUSH
17561: PPUSH
17562: PPUSH
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
17570: PPUSH
17571: PPUSH
// result := [ ] ;
17572: LD_ADDR_VAR 0 7
17576: PUSH
17577: EMPTY
17578: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 266
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: IN
17599: NOT
17600: IFFALSE 17604
// exit ;
17602: GO 19238
// if name then
17604: LD_VAR 0 3
17608: IFFALSE 17624
// SetBName ( base_dep , name ) ;
17610: LD_VAR 0 1
17614: PPUSH
17615: LD_VAR 0 3
17619: PPUSH
17620: CALL_OW 500
// base := GetBase ( base_dep ) ;
17624: LD_ADDR_VAR 0 15
17628: PUSH
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 274
17638: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17639: LD_ADDR_VAR 0 16
17643: PUSH
17644: LD_VAR 0 1
17648: PPUSH
17649: CALL_OW 255
17653: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17654: LD_ADDR_VAR 0 17
17658: PUSH
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 248
17668: ST_TO_ADDR
// if sources then
17669: LD_VAR 0 5
17673: IFFALSE 17720
// for i = 1 to 3 do
17675: LD_ADDR_VAR 0 8
17679: PUSH
17680: DOUBLE
17681: LD_INT 1
17683: DEC
17684: ST_TO_ADDR
17685: LD_INT 3
17687: PUSH
17688: FOR_TO
17689: IFFALSE 17718
// AddResourceType ( base , i , sources [ i ] ) ;
17691: LD_VAR 0 15
17695: PPUSH
17696: LD_VAR 0 8
17700: PPUSH
17701: LD_VAR 0 5
17705: PUSH
17706: LD_VAR 0 8
17710: ARRAY
17711: PPUSH
17712: CALL_OW 276
17716: GO 17688
17718: POP
17719: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17720: LD_ADDR_VAR 0 18
17724: PUSH
17725: LD_VAR 0 15
17729: PPUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: CALL 16981 0 3
17742: ST_TO_ADDR
// InitHc ;
17743: CALL_OW 19
// InitUc ;
17747: CALL_OW 18
// uc_side := side ;
17751: LD_ADDR_OWVAR 20
17755: PUSH
17756: LD_VAR 0 16
17760: ST_TO_ADDR
// uc_nation := nation ;
17761: LD_ADDR_OWVAR 21
17765: PUSH
17766: LD_VAR 0 17
17770: ST_TO_ADDR
// if buildings then
17771: LD_VAR 0 18
17775: IFFALSE 19097
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17777: LD_ADDR_VAR 0 19
17781: PUSH
17782: LD_VAR 0 18
17786: PPUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 30
17792: PUSH
17793: LD_INT 29
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 30
17802: PUSH
17803: LD_INT 30
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 72
17819: ST_TO_ADDR
// if tmp then
17820: LD_VAR 0 19
17824: IFFALSE 17872
// for i in tmp do
17826: LD_ADDR_VAR 0 8
17830: PUSH
17831: LD_VAR 0 19
17835: PUSH
17836: FOR_IN
17837: IFFALSE 17870
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17839: LD_VAR 0 8
17843: PPUSH
17844: CALL_OW 250
17848: PPUSH
17849: LD_VAR 0 8
17853: PPUSH
17854: CALL_OW 251
17858: PPUSH
17859: LD_VAR 0 16
17863: PPUSH
17864: CALL_OW 441
17868: GO 17836
17870: POP
17871: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17872: LD_VAR 0 18
17876: PPUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 30
17882: PUSH
17883: LD_INT 32
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 30
17892: PUSH
17893: LD_INT 33
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 72
17909: IFFALSE 17997
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17911: LD_ADDR_VAR 0 8
17915: PUSH
17916: LD_VAR 0 18
17920: PPUSH
17921: LD_INT 2
17923: PUSH
17924: LD_INT 30
17926: PUSH
17927: LD_INT 32
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 30
17936: PUSH
17937: LD_INT 33
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: LIST
17948: PPUSH
17949: CALL_OW 72
17953: PUSH
17954: FOR_IN
17955: IFFALSE 17995
// begin if not GetBWeapon ( i ) then
17957: LD_VAR 0 8
17961: PPUSH
17962: CALL_OW 269
17966: NOT
17967: IFFALSE 17993
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17969: LD_VAR 0 8
17973: PPUSH
17974: LD_VAR 0 8
17978: PPUSH
17979: LD_VAR 0 2
17983: PPUSH
17984: CALL 19243 0 2
17988: PPUSH
17989: CALL_OW 431
// end ;
17993: GO 17954
17995: POP
17996: POP
// end ; for i = 1 to personel do
17997: LD_ADDR_VAR 0 8
18001: PUSH
18002: DOUBLE
18003: LD_INT 1
18005: DEC
18006: ST_TO_ADDR
18007: LD_VAR 0 6
18011: PUSH
18012: FOR_TO
18013: IFFALSE 19077
// begin if i > 4 then
18015: LD_VAR 0 8
18019: PUSH
18020: LD_INT 4
18022: GREATER
18023: IFFALSE 18027
// break ;
18025: GO 19077
// case i of 1 :
18027: LD_VAR 0 8
18031: PUSH
18032: LD_INT 1
18034: DOUBLE
18035: EQUAL
18036: IFTRUE 18040
18038: GO 18120
18040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18041: LD_ADDR_VAR 0 12
18045: PUSH
18046: LD_VAR 0 18
18050: PPUSH
18051: LD_INT 22
18053: PUSH
18054: LD_VAR 0 16
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 58
18065: PUSH
18066: EMPTY
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: LD_INT 30
18074: PUSH
18075: LD_INT 32
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 30
18084: PUSH
18085: LD_INT 4
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 30
18094: PUSH
18095: LD_INT 5
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: PPUSH
18113: CALL_OW 72
18117: ST_TO_ADDR
18118: GO 18342
18120: LD_INT 2
18122: DOUBLE
18123: EQUAL
18124: IFTRUE 18128
18126: GO 18190
18128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18129: LD_ADDR_VAR 0 12
18133: PUSH
18134: LD_VAR 0 18
18138: PPUSH
18139: LD_INT 22
18141: PUSH
18142: LD_VAR 0 16
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 30
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 30
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PPUSH
18183: CALL_OW 72
18187: ST_TO_ADDR
18188: GO 18342
18190: LD_INT 3
18192: DOUBLE
18193: EQUAL
18194: IFTRUE 18198
18196: GO 18260
18198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18199: LD_ADDR_VAR 0 12
18203: PUSH
18204: LD_VAR 0 18
18208: PPUSH
18209: LD_INT 22
18211: PUSH
18212: LD_VAR 0 16
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: LD_INT 30
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 30
18236: PUSH
18237: LD_INT 3
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PPUSH
18253: CALL_OW 72
18257: ST_TO_ADDR
18258: GO 18342
18260: LD_INT 4
18262: DOUBLE
18263: EQUAL
18264: IFTRUE 18268
18266: GO 18341
18268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18269: LD_ADDR_VAR 0 12
18273: PUSH
18274: LD_VAR 0 18
18278: PPUSH
18279: LD_INT 22
18281: PUSH
18282: LD_VAR 0 16
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: LD_INT 30
18296: PUSH
18297: LD_INT 6
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 30
18306: PUSH
18307: LD_INT 7
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 30
18316: PUSH
18317: LD_INT 8
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 72
18338: ST_TO_ADDR
18339: GO 18342
18341: POP
// if i = 1 then
18342: LD_VAR 0 8
18346: PUSH
18347: LD_INT 1
18349: EQUAL
18350: IFFALSE 18461
// begin tmp := [ ] ;
18352: LD_ADDR_VAR 0 19
18356: PUSH
18357: EMPTY
18358: ST_TO_ADDR
// for j in f do
18359: LD_ADDR_VAR 0 9
18363: PUSH
18364: LD_VAR 0 12
18368: PUSH
18369: FOR_IN
18370: IFFALSE 18443
// if GetBType ( j ) = b_bunker then
18372: LD_VAR 0 9
18376: PPUSH
18377: CALL_OW 266
18381: PUSH
18382: LD_INT 32
18384: EQUAL
18385: IFFALSE 18412
// tmp := Insert ( tmp , 1 , j ) else
18387: LD_ADDR_VAR 0 19
18391: PUSH
18392: LD_VAR 0 19
18396: PPUSH
18397: LD_INT 1
18399: PPUSH
18400: LD_VAR 0 9
18404: PPUSH
18405: CALL_OW 2
18409: ST_TO_ADDR
18410: GO 18441
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18412: LD_ADDR_VAR 0 19
18416: PUSH
18417: LD_VAR 0 19
18421: PPUSH
18422: LD_VAR 0 19
18426: PUSH
18427: LD_INT 1
18429: PLUS
18430: PPUSH
18431: LD_VAR 0 9
18435: PPUSH
18436: CALL_OW 2
18440: ST_TO_ADDR
18441: GO 18369
18443: POP
18444: POP
// if tmp then
18445: LD_VAR 0 19
18449: IFFALSE 18461
// f := tmp ;
18451: LD_ADDR_VAR 0 12
18455: PUSH
18456: LD_VAR 0 19
18460: ST_TO_ADDR
// end ; x := personel [ i ] ;
18461: LD_ADDR_VAR 0 13
18465: PUSH
18466: LD_VAR 0 6
18470: PUSH
18471: LD_VAR 0 8
18475: ARRAY
18476: ST_TO_ADDR
// if x = - 1 then
18477: LD_VAR 0 13
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: EQUAL
18486: IFFALSE 18695
// begin for j in f do
18488: LD_ADDR_VAR 0 9
18492: PUSH
18493: LD_VAR 0 12
18497: PUSH
18498: FOR_IN
18499: IFFALSE 18691
// repeat InitHc ;
18501: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18505: LD_VAR 0 9
18509: PPUSH
18510: CALL_OW 266
18514: PUSH
18515: LD_INT 5
18517: EQUAL
18518: IFFALSE 18588
// begin if UnitsInside ( j ) < 3 then
18520: LD_VAR 0 9
18524: PPUSH
18525: CALL_OW 313
18529: PUSH
18530: LD_INT 3
18532: LESS
18533: IFFALSE 18569
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18535: LD_INT 0
18537: PPUSH
18538: LD_INT 5
18540: PUSH
18541: LD_INT 8
18543: PUSH
18544: LD_INT 9
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: PUSH
18552: LD_VAR 0 17
18556: ARRAY
18557: PPUSH
18558: LD_VAR 0 4
18562: PPUSH
18563: CALL_OW 380
18567: GO 18586
// PrepareHuman ( false , i , skill ) ;
18569: LD_INT 0
18571: PPUSH
18572: LD_VAR 0 8
18576: PPUSH
18577: LD_VAR 0 4
18581: PPUSH
18582: CALL_OW 380
// end else
18586: GO 18605
// PrepareHuman ( false , i , skill ) ;
18588: LD_INT 0
18590: PPUSH
18591: LD_VAR 0 8
18595: PPUSH
18596: LD_VAR 0 4
18600: PPUSH
18601: CALL_OW 380
// un := CreateHuman ;
18605: LD_ADDR_VAR 0 14
18609: PUSH
18610: CALL_OW 44
18614: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18615: LD_ADDR_VAR 0 7
18619: PUSH
18620: LD_VAR 0 7
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: LD_VAR 0 14
18632: PPUSH
18633: CALL_OW 2
18637: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18638: LD_VAR 0 14
18642: PPUSH
18643: LD_VAR 0 9
18647: PPUSH
18648: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18652: LD_VAR 0 9
18656: PPUSH
18657: CALL_OW 313
18661: PUSH
18662: LD_INT 6
18664: EQUAL
18665: PUSH
18666: LD_VAR 0 9
18670: PPUSH
18671: CALL_OW 266
18675: PUSH
18676: LD_INT 32
18678: PUSH
18679: LD_INT 31
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: IN
18686: OR
18687: IFFALSE 18501
18689: GO 18498
18691: POP
18692: POP
// end else
18693: GO 19075
// for j = 1 to x do
18695: LD_ADDR_VAR 0 9
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: LD_VAR 0 13
18709: PUSH
18710: FOR_TO
18711: IFFALSE 19073
// begin InitHc ;
18713: CALL_OW 19
// if not f then
18717: LD_VAR 0 12
18721: NOT
18722: IFFALSE 18811
// begin PrepareHuman ( false , i , skill ) ;
18724: LD_INT 0
18726: PPUSH
18727: LD_VAR 0 8
18731: PPUSH
18732: LD_VAR 0 4
18736: PPUSH
18737: CALL_OW 380
// un := CreateHuman ;
18741: LD_ADDR_VAR 0 14
18745: PUSH
18746: CALL_OW 44
18750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18751: LD_ADDR_VAR 0 7
18755: PUSH
18756: LD_VAR 0 7
18760: PPUSH
18761: LD_INT 1
18763: PPUSH
18764: LD_VAR 0 14
18768: PPUSH
18769: CALL_OW 2
18773: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18774: LD_VAR 0 14
18778: PPUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 250
18788: PPUSH
18789: LD_VAR 0 1
18793: PPUSH
18794: CALL_OW 251
18798: PPUSH
18799: LD_INT 10
18801: PPUSH
18802: LD_INT 0
18804: PPUSH
18805: CALL_OW 50
// continue ;
18809: GO 18710
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18811: LD_VAR 0 12
18815: PUSH
18816: LD_INT 1
18818: ARRAY
18819: PPUSH
18820: CALL_OW 313
18824: PUSH
18825: LD_VAR 0 12
18829: PUSH
18830: LD_INT 1
18832: ARRAY
18833: PPUSH
18834: CALL_OW 266
18838: PUSH
18839: LD_INT 32
18841: PUSH
18842: LD_INT 31
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: IN
18849: AND
18850: PUSH
18851: LD_VAR 0 12
18855: PUSH
18856: LD_INT 1
18858: ARRAY
18859: PPUSH
18860: CALL_OW 313
18864: PUSH
18865: LD_INT 6
18867: EQUAL
18868: OR
18869: IFFALSE 18889
// f := Delete ( f , 1 ) ;
18871: LD_ADDR_VAR 0 12
18875: PUSH
18876: LD_VAR 0 12
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: CALL_OW 3
18888: ST_TO_ADDR
// if not f then
18889: LD_VAR 0 12
18893: NOT
18894: IFFALSE 18912
// begin x := x + 2 ;
18896: LD_ADDR_VAR 0 13
18900: PUSH
18901: LD_VAR 0 13
18905: PUSH
18906: LD_INT 2
18908: PLUS
18909: ST_TO_ADDR
// continue ;
18910: GO 18710
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18912: LD_VAR 0 12
18916: PUSH
18917: LD_INT 1
18919: ARRAY
18920: PPUSH
18921: CALL_OW 266
18925: PUSH
18926: LD_INT 5
18928: EQUAL
18929: IFFALSE 19003
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18931: LD_VAR 0 12
18935: PUSH
18936: LD_INT 1
18938: ARRAY
18939: PPUSH
18940: CALL_OW 313
18944: PUSH
18945: LD_INT 3
18947: LESS
18948: IFFALSE 18984
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18950: LD_INT 0
18952: PPUSH
18953: LD_INT 5
18955: PUSH
18956: LD_INT 8
18958: PUSH
18959: LD_INT 9
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: LIST
18966: PUSH
18967: LD_VAR 0 17
18971: ARRAY
18972: PPUSH
18973: LD_VAR 0 4
18977: PPUSH
18978: CALL_OW 380
18982: GO 19001
// PrepareHuman ( false , i , skill ) ;
18984: LD_INT 0
18986: PPUSH
18987: LD_VAR 0 8
18991: PPUSH
18992: LD_VAR 0 4
18996: PPUSH
18997: CALL_OW 380
// end else
19001: GO 19020
// PrepareHuman ( false , i , skill ) ;
19003: LD_INT 0
19005: PPUSH
19006: LD_VAR 0 8
19010: PPUSH
19011: LD_VAR 0 4
19015: PPUSH
19016: CALL_OW 380
// un := CreateHuman ;
19020: LD_ADDR_VAR 0 14
19024: PUSH
19025: CALL_OW 44
19029: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19030: LD_ADDR_VAR 0 7
19034: PUSH
19035: LD_VAR 0 7
19039: PPUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_VAR 0 14
19047: PPUSH
19048: CALL_OW 2
19052: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19053: LD_VAR 0 14
19057: PPUSH
19058: LD_VAR 0 12
19062: PUSH
19063: LD_INT 1
19065: ARRAY
19066: PPUSH
19067: CALL_OW 52
// end ;
19071: GO 18710
19073: POP
19074: POP
// end ;
19075: GO 18012
19077: POP
19078: POP
// result := result ^ buildings ;
19079: LD_ADDR_VAR 0 7
19083: PUSH
19084: LD_VAR 0 7
19088: PUSH
19089: LD_VAR 0 18
19093: ADD
19094: ST_TO_ADDR
// end else
19095: GO 19238
// begin for i = 1 to personel do
19097: LD_ADDR_VAR 0 8
19101: PUSH
19102: DOUBLE
19103: LD_INT 1
19105: DEC
19106: ST_TO_ADDR
19107: LD_VAR 0 6
19111: PUSH
19112: FOR_TO
19113: IFFALSE 19236
// begin if i > 4 then
19115: LD_VAR 0 8
19119: PUSH
19120: LD_INT 4
19122: GREATER
19123: IFFALSE 19127
// break ;
19125: GO 19236
// x := personel [ i ] ;
19127: LD_ADDR_VAR 0 13
19131: PUSH
19132: LD_VAR 0 6
19136: PUSH
19137: LD_VAR 0 8
19141: ARRAY
19142: ST_TO_ADDR
// if x = - 1 then
19143: LD_VAR 0 13
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: EQUAL
19152: IFFALSE 19156
// continue ;
19154: GO 19112
// PrepareHuman ( false , i , skill ) ;
19156: LD_INT 0
19158: PPUSH
19159: LD_VAR 0 8
19163: PPUSH
19164: LD_VAR 0 4
19168: PPUSH
19169: CALL_OW 380
// un := CreateHuman ;
19173: LD_ADDR_VAR 0 14
19177: PUSH
19178: CALL_OW 44
19182: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19183: LD_VAR 0 14
19187: PPUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: CALL_OW 250
19197: PPUSH
19198: LD_VAR 0 1
19202: PPUSH
19203: CALL_OW 251
19207: PPUSH
19208: LD_INT 10
19210: PPUSH
19211: LD_INT 0
19213: PPUSH
19214: CALL_OW 50
// result := result ^ un ;
19218: LD_ADDR_VAR 0 7
19222: PUSH
19223: LD_VAR 0 7
19227: PUSH
19228: LD_VAR 0 14
19232: ADD
19233: ST_TO_ADDR
// end ;
19234: GO 19112
19236: POP
19237: POP
// end ; end ;
19238: LD_VAR 0 7
19242: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19243: LD_INT 0
19245: PPUSH
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
19254: PPUSH
19255: PPUSH
19256: PPUSH
19257: PPUSH
19258: PPUSH
19259: PPUSH
19260: PPUSH
// result := false ;
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 0
19268: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19269: LD_VAR 0 1
19273: NOT
19274: PUSH
19275: LD_VAR 0 1
19279: PPUSH
19280: CALL_OW 266
19284: PUSH
19285: LD_INT 32
19287: PUSH
19288: LD_INT 33
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: IN
19295: NOT
19296: OR
19297: IFFALSE 19301
// exit ;
19299: GO 20410
// nat := GetNation ( tower ) ;
19301: LD_ADDR_VAR 0 12
19305: PUSH
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 248
19315: ST_TO_ADDR
// side := GetSide ( tower ) ;
19316: LD_ADDR_VAR 0 16
19320: PUSH
19321: LD_VAR 0 1
19325: PPUSH
19326: CALL_OW 255
19330: ST_TO_ADDR
// x := GetX ( tower ) ;
19331: LD_ADDR_VAR 0 10
19335: PUSH
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 250
19345: ST_TO_ADDR
// y := GetY ( tower ) ;
19346: LD_ADDR_VAR 0 11
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: CALL_OW 251
19360: ST_TO_ADDR
// if not x or not y then
19361: LD_VAR 0 10
19365: NOT
19366: PUSH
19367: LD_VAR 0 11
19371: NOT
19372: OR
19373: IFFALSE 19377
// exit ;
19375: GO 20410
// weapon := 0 ;
19377: LD_ADDR_VAR 0 18
19381: PUSH
19382: LD_INT 0
19384: ST_TO_ADDR
// fac_list := [ ] ;
19385: LD_ADDR_VAR 0 17
19389: PUSH
19390: EMPTY
19391: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19392: LD_ADDR_VAR 0 6
19396: PUSH
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 274
19406: PPUSH
19407: LD_VAR 0 2
19411: PPUSH
19412: LD_INT 0
19414: PPUSH
19415: CALL 16981 0 3
19419: PPUSH
19420: LD_INT 30
19422: PUSH
19423: LD_INT 3
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 72
19434: ST_TO_ADDR
// if not factories then
19435: LD_VAR 0 6
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 20410
// for i in factories do
19444: LD_ADDR_VAR 0 8
19448: PUSH
19449: LD_VAR 0 6
19453: PUSH
19454: FOR_IN
19455: IFFALSE 19480
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19457: LD_ADDR_VAR 0 17
19461: PUSH
19462: LD_VAR 0 17
19466: PUSH
19467: LD_VAR 0 8
19471: PPUSH
19472: CALL_OW 478
19476: UNION
19477: ST_TO_ADDR
19478: GO 19454
19480: POP
19481: POP
// if not fac_list then
19482: LD_VAR 0 17
19486: NOT
19487: IFFALSE 19491
// exit ;
19489: GO 20410
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19491: LD_ADDR_VAR 0 5
19495: PUSH
19496: LD_INT 4
19498: PUSH
19499: LD_INT 5
19501: PUSH
19502: LD_INT 9
19504: PUSH
19505: LD_INT 10
19507: PUSH
19508: LD_INT 6
19510: PUSH
19511: LD_INT 7
19513: PUSH
19514: LD_INT 11
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 27
19528: PUSH
19529: LD_INT 28
19531: PUSH
19532: LD_INT 26
19534: PUSH
19535: LD_INT 30
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 43
19546: PUSH
19547: LD_INT 44
19549: PUSH
19550: LD_INT 46
19552: PUSH
19553: LD_INT 45
19555: PUSH
19556: LD_INT 47
19558: PUSH
19559: LD_INT 49
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: PUSH
19575: LD_VAR 0 12
19579: ARRAY
19580: ST_TO_ADDR
// list := list isect fac_list ;
19581: LD_ADDR_VAR 0 5
19585: PUSH
19586: LD_VAR 0 5
19590: PUSH
19591: LD_VAR 0 17
19595: ISECT
19596: ST_TO_ADDR
// if not list then
19597: LD_VAR 0 5
19601: NOT
19602: IFFALSE 19606
// exit ;
19604: GO 20410
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19606: LD_VAR 0 12
19610: PUSH
19611: LD_INT 3
19613: EQUAL
19614: PUSH
19615: LD_INT 49
19617: PUSH
19618: LD_VAR 0 5
19622: IN
19623: AND
19624: PUSH
19625: LD_INT 31
19627: PPUSH
19628: LD_VAR 0 16
19632: PPUSH
19633: CALL_OW 321
19637: PUSH
19638: LD_INT 2
19640: EQUAL
19641: AND
19642: IFFALSE 19702
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19644: LD_INT 22
19646: PUSH
19647: LD_VAR 0 16
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 35
19658: PUSH
19659: LD_INT 49
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 91
19668: PUSH
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 10
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: PPUSH
19687: CALL_OW 69
19691: NOT
19692: IFFALSE 19702
// weapon := ru_time_lapser ;
19694: LD_ADDR_VAR 0 18
19698: PUSH
19699: LD_INT 49
19701: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19702: LD_VAR 0 12
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: IN
19717: PUSH
19718: LD_INT 11
19720: PUSH
19721: LD_VAR 0 5
19725: IN
19726: PUSH
19727: LD_INT 30
19729: PUSH
19730: LD_VAR 0 5
19734: IN
19735: OR
19736: AND
19737: PUSH
19738: LD_INT 6
19740: PPUSH
19741: LD_VAR 0 16
19745: PPUSH
19746: CALL_OW 321
19750: PUSH
19751: LD_INT 2
19753: EQUAL
19754: AND
19755: IFFALSE 19920
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19757: LD_INT 22
19759: PUSH
19760: LD_VAR 0 16
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 2
19771: PUSH
19772: LD_INT 35
19774: PUSH
19775: LD_INT 11
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 35
19784: PUSH
19785: LD_INT 30
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 91
19799: PUSH
19800: LD_VAR 0 1
19804: PUSH
19805: LD_INT 18
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: PPUSH
19818: CALL_OW 69
19822: NOT
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_VAR 0 16
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 32
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 30
19851: PUSH
19852: LD_INT 33
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 91
19866: PUSH
19867: LD_VAR 0 1
19871: PUSH
19872: LD_INT 12
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: PPUSH
19888: CALL_OW 69
19892: PUSH
19893: LD_INT 2
19895: GREATER
19896: AND
19897: IFFALSE 19920
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19899: LD_ADDR_VAR 0 18
19903: PUSH
19904: LD_INT 11
19906: PUSH
19907: LD_INT 30
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_VAR 0 12
19918: ARRAY
19919: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19920: LD_VAR 0 18
19924: NOT
19925: PUSH
19926: LD_INT 40
19928: PPUSH
19929: LD_VAR 0 16
19933: PPUSH
19934: CALL_OW 321
19938: PUSH
19939: LD_INT 2
19941: EQUAL
19942: AND
19943: PUSH
19944: LD_INT 7
19946: PUSH
19947: LD_VAR 0 5
19951: IN
19952: PUSH
19953: LD_INT 28
19955: PUSH
19956: LD_VAR 0 5
19960: IN
19961: OR
19962: PUSH
19963: LD_INT 45
19965: PUSH
19966: LD_VAR 0 5
19970: IN
19971: OR
19972: AND
19973: IFFALSE 20227
// begin hex := GetHexInfo ( x , y ) ;
19975: LD_ADDR_VAR 0 4
19979: PUSH
19980: LD_VAR 0 10
19984: PPUSH
19985: LD_VAR 0 11
19989: PPUSH
19990: CALL_OW 546
19994: ST_TO_ADDR
// if hex [ 1 ] then
19995: LD_VAR 0 4
19999: PUSH
20000: LD_INT 1
20002: ARRAY
20003: IFFALSE 20007
// exit ;
20005: GO 20410
// height := hex [ 2 ] ;
20007: LD_ADDR_VAR 0 15
20011: PUSH
20012: LD_VAR 0 4
20016: PUSH
20017: LD_INT 2
20019: ARRAY
20020: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20021: LD_ADDR_VAR 0 14
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: LD_INT 2
20031: PUSH
20032: LD_INT 3
20034: PUSH
20035: LD_INT 5
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: ST_TO_ADDR
// for i in tmp do
20044: LD_ADDR_VAR 0 8
20048: PUSH
20049: LD_VAR 0 14
20053: PUSH
20054: FOR_IN
20055: IFFALSE 20225
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20057: LD_ADDR_VAR 0 9
20061: PUSH
20062: LD_VAR 0 10
20066: PPUSH
20067: LD_VAR 0 8
20071: PPUSH
20072: LD_INT 5
20074: PPUSH
20075: CALL_OW 272
20079: PUSH
20080: LD_VAR 0 11
20084: PPUSH
20085: LD_VAR 0 8
20089: PPUSH
20090: LD_INT 5
20092: PPUSH
20093: CALL_OW 273
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20102: LD_VAR 0 9
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: PPUSH
20111: LD_VAR 0 9
20115: PUSH
20116: LD_INT 2
20118: ARRAY
20119: PPUSH
20120: CALL_OW 488
20124: IFFALSE 20223
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20126: LD_ADDR_VAR 0 4
20130: PUSH
20131: LD_VAR 0 9
20135: PUSH
20136: LD_INT 1
20138: ARRAY
20139: PPUSH
20140: LD_VAR 0 9
20144: PUSH
20145: LD_INT 2
20147: ARRAY
20148: PPUSH
20149: CALL_OW 546
20153: ST_TO_ADDR
// if hex [ 1 ] then
20154: LD_VAR 0 4
20158: PUSH
20159: LD_INT 1
20161: ARRAY
20162: IFFALSE 20166
// continue ;
20164: GO 20054
// h := hex [ 2 ] ;
20166: LD_ADDR_VAR 0 13
20170: PUSH
20171: LD_VAR 0 4
20175: PUSH
20176: LD_INT 2
20178: ARRAY
20179: ST_TO_ADDR
// if h + 7 < height then
20180: LD_VAR 0 13
20184: PUSH
20185: LD_INT 7
20187: PLUS
20188: PUSH
20189: LD_VAR 0 15
20193: LESS
20194: IFFALSE 20223
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20196: LD_ADDR_VAR 0 18
20200: PUSH
20201: LD_INT 7
20203: PUSH
20204: LD_INT 28
20206: PUSH
20207: LD_INT 45
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: PUSH
20215: LD_VAR 0 12
20219: ARRAY
20220: ST_TO_ADDR
// break ;
20221: GO 20225
// end ; end ; end ;
20223: GO 20054
20225: POP
20226: POP
// end ; if not weapon then
20227: LD_VAR 0 18
20231: NOT
20232: IFFALSE 20292
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20234: LD_ADDR_VAR 0 5
20238: PUSH
20239: LD_VAR 0 5
20243: PUSH
20244: LD_INT 11
20246: PUSH
20247: LD_INT 30
20249: PUSH
20250: LD_INT 49
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: LIST
20257: DIFF
20258: ST_TO_ADDR
// if not list then
20259: LD_VAR 0 5
20263: NOT
20264: IFFALSE 20268
// exit ;
20266: GO 20410
// weapon := list [ rand ( 1 , list ) ] ;
20268: LD_ADDR_VAR 0 18
20272: PUSH
20273: LD_VAR 0 5
20277: PUSH
20278: LD_INT 1
20280: PPUSH
20281: LD_VAR 0 5
20285: PPUSH
20286: CALL_OW 12
20290: ARRAY
20291: ST_TO_ADDR
// end ; if weapon then
20292: LD_VAR 0 18
20296: IFFALSE 20410
// begin tmp := CostOfWeapon ( weapon ) ;
20298: LD_ADDR_VAR 0 14
20302: PUSH
20303: LD_VAR 0 18
20307: PPUSH
20308: CALL_OW 451
20312: ST_TO_ADDR
// j := GetBase ( tower ) ;
20313: LD_ADDR_VAR 0 9
20317: PUSH
20318: LD_VAR 0 1
20322: PPUSH
20323: CALL_OW 274
20327: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20328: LD_VAR 0 9
20332: PPUSH
20333: LD_INT 1
20335: PPUSH
20336: CALL_OW 275
20340: PUSH
20341: LD_VAR 0 14
20345: PUSH
20346: LD_INT 1
20348: ARRAY
20349: GREATEREQUAL
20350: PUSH
20351: LD_VAR 0 9
20355: PPUSH
20356: LD_INT 2
20358: PPUSH
20359: CALL_OW 275
20363: PUSH
20364: LD_VAR 0 14
20368: PUSH
20369: LD_INT 2
20371: ARRAY
20372: GREATEREQUAL
20373: AND
20374: PUSH
20375: LD_VAR 0 9
20379: PPUSH
20380: LD_INT 3
20382: PPUSH
20383: CALL_OW 275
20387: PUSH
20388: LD_VAR 0 14
20392: PUSH
20393: LD_INT 3
20395: ARRAY
20396: GREATEREQUAL
20397: AND
20398: IFFALSE 20410
// result := weapon ;
20400: LD_ADDR_VAR 0 3
20404: PUSH
20405: LD_VAR 0 18
20409: ST_TO_ADDR
// end ; end ;
20410: LD_VAR 0 3
20414: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20415: LD_INT 0
20417: PPUSH
20418: PPUSH
// result := true ;
20419: LD_ADDR_VAR 0 3
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// if array1 = array2 then
20427: LD_VAR 0 1
20431: PUSH
20432: LD_VAR 0 2
20436: EQUAL
20437: IFFALSE 20497
// begin for i = 1 to array1 do
20439: LD_ADDR_VAR 0 4
20443: PUSH
20444: DOUBLE
20445: LD_INT 1
20447: DEC
20448: ST_TO_ADDR
20449: LD_VAR 0 1
20453: PUSH
20454: FOR_TO
20455: IFFALSE 20493
// if array1 [ i ] <> array2 [ i ] then
20457: LD_VAR 0 1
20461: PUSH
20462: LD_VAR 0 4
20466: ARRAY
20467: PUSH
20468: LD_VAR 0 2
20472: PUSH
20473: LD_VAR 0 4
20477: ARRAY
20478: NONEQUAL
20479: IFFALSE 20491
// begin result := false ;
20481: LD_ADDR_VAR 0 3
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// break ;
20489: GO 20493
// end ;
20491: GO 20454
20493: POP
20494: POP
// end else
20495: GO 20505
// result := false ;
20497: LD_ADDR_VAR 0 3
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// end ;
20505: LD_VAR 0 3
20509: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20510: LD_INT 0
20512: PPUSH
20513: PPUSH
// if not array1 or not array2 then
20514: LD_VAR 0 1
20518: NOT
20519: PUSH
20520: LD_VAR 0 2
20524: NOT
20525: OR
20526: IFFALSE 20530
// exit ;
20528: GO 20594
// result := true ;
20530: LD_ADDR_VAR 0 3
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// for i = 1 to array1 do
20538: LD_ADDR_VAR 0 4
20542: PUSH
20543: DOUBLE
20544: LD_INT 1
20546: DEC
20547: ST_TO_ADDR
20548: LD_VAR 0 1
20552: PUSH
20553: FOR_TO
20554: IFFALSE 20592
// if array1 [ i ] <> array2 [ i ] then
20556: LD_VAR 0 1
20560: PUSH
20561: LD_VAR 0 4
20565: ARRAY
20566: PUSH
20567: LD_VAR 0 2
20571: PUSH
20572: LD_VAR 0 4
20576: ARRAY
20577: NONEQUAL
20578: IFFALSE 20590
// begin result := false ;
20580: LD_ADDR_VAR 0 3
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// break ;
20588: GO 20592
// end ;
20590: GO 20553
20592: POP
20593: POP
// end ;
20594: LD_VAR 0 3
20598: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20599: LD_INT 0
20601: PPUSH
20602: PPUSH
20603: PPUSH
// pom := GetBase ( fac ) ;
20604: LD_ADDR_VAR 0 5
20608: PUSH
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL_OW 274
20618: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20619: LD_ADDR_VAR 0 4
20623: PUSH
20624: LD_VAR 0 2
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: PPUSH
20633: LD_VAR 0 2
20637: PUSH
20638: LD_INT 2
20640: ARRAY
20641: PPUSH
20642: LD_VAR 0 2
20646: PUSH
20647: LD_INT 3
20649: ARRAY
20650: PPUSH
20651: LD_VAR 0 2
20655: PUSH
20656: LD_INT 4
20658: ARRAY
20659: PPUSH
20660: CALL_OW 449
20664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20665: LD_ADDR_VAR 0 3
20669: PUSH
20670: LD_VAR 0 5
20674: PPUSH
20675: LD_INT 1
20677: PPUSH
20678: CALL_OW 275
20682: PUSH
20683: LD_VAR 0 4
20687: PUSH
20688: LD_INT 1
20690: ARRAY
20691: GREATEREQUAL
20692: PUSH
20693: LD_VAR 0 5
20697: PPUSH
20698: LD_INT 2
20700: PPUSH
20701: CALL_OW 275
20705: PUSH
20706: LD_VAR 0 4
20710: PUSH
20711: LD_INT 2
20713: ARRAY
20714: GREATEREQUAL
20715: AND
20716: PUSH
20717: LD_VAR 0 5
20721: PPUSH
20722: LD_INT 3
20724: PPUSH
20725: CALL_OW 275
20729: PUSH
20730: LD_VAR 0 4
20734: PUSH
20735: LD_INT 3
20737: ARRAY
20738: GREATEREQUAL
20739: AND
20740: ST_TO_ADDR
// end ;
20741: LD_VAR 0 3
20745: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20746: LD_INT 0
20748: PPUSH
20749: PPUSH
20750: PPUSH
20751: PPUSH
// pom := GetBase ( building ) ;
20752: LD_ADDR_VAR 0 3
20756: PUSH
20757: LD_VAR 0 1
20761: PPUSH
20762: CALL_OW 274
20766: ST_TO_ADDR
// if not pom then
20767: LD_VAR 0 3
20771: NOT
20772: IFFALSE 20776
// exit ;
20774: GO 20946
// btype := GetBType ( building ) ;
20776: LD_ADDR_VAR 0 5
20780: PUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: CALL_OW 266
20790: ST_TO_ADDR
// if btype = b_armoury then
20791: LD_VAR 0 5
20795: PUSH
20796: LD_INT 4
20798: EQUAL
20799: IFFALSE 20809
// btype := b_barracks ;
20801: LD_ADDR_VAR 0 5
20805: PUSH
20806: LD_INT 5
20808: ST_TO_ADDR
// if btype = b_depot then
20809: LD_VAR 0 5
20813: PUSH
20814: LD_INT 0
20816: EQUAL
20817: IFFALSE 20827
// btype := b_warehouse ;
20819: LD_ADDR_VAR 0 5
20823: PUSH
20824: LD_INT 1
20826: ST_TO_ADDR
// if btype = b_workshop then
20827: LD_VAR 0 5
20831: PUSH
20832: LD_INT 2
20834: EQUAL
20835: IFFALSE 20845
// btype := b_factory ;
20837: LD_ADDR_VAR 0 5
20841: PUSH
20842: LD_INT 3
20844: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20845: LD_ADDR_VAR 0 4
20849: PUSH
20850: LD_VAR 0 5
20854: PPUSH
20855: LD_VAR 0 1
20859: PPUSH
20860: CALL_OW 248
20864: PPUSH
20865: CALL_OW 450
20869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_VAR 0 3
20879: PPUSH
20880: LD_INT 1
20882: PPUSH
20883: CALL_OW 275
20887: PUSH
20888: LD_VAR 0 4
20892: PUSH
20893: LD_INT 1
20895: ARRAY
20896: GREATEREQUAL
20897: PUSH
20898: LD_VAR 0 3
20902: PPUSH
20903: LD_INT 2
20905: PPUSH
20906: CALL_OW 275
20910: PUSH
20911: LD_VAR 0 4
20915: PUSH
20916: LD_INT 2
20918: ARRAY
20919: GREATEREQUAL
20920: AND
20921: PUSH
20922: LD_VAR 0 3
20926: PPUSH
20927: LD_INT 3
20929: PPUSH
20930: CALL_OW 275
20934: PUSH
20935: LD_VAR 0 4
20939: PUSH
20940: LD_INT 3
20942: ARRAY
20943: GREATEREQUAL
20944: AND
20945: ST_TO_ADDR
// end ;
20946: LD_VAR 0 2
20950: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20951: LD_INT 0
20953: PPUSH
20954: PPUSH
20955: PPUSH
// pom := GetBase ( building ) ;
20956: LD_ADDR_VAR 0 4
20960: PUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: CALL_OW 274
20970: ST_TO_ADDR
// if not pom then
20971: LD_VAR 0 4
20975: NOT
20976: IFFALSE 20980
// exit ;
20978: GO 21081
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20980: LD_ADDR_VAR 0 5
20984: PUSH
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_VAR 0 1
20994: PPUSH
20995: CALL_OW 248
20999: PPUSH
21000: CALL_OW 450
21004: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21005: LD_ADDR_VAR 0 3
21009: PUSH
21010: LD_VAR 0 4
21014: PPUSH
21015: LD_INT 1
21017: PPUSH
21018: CALL_OW 275
21022: PUSH
21023: LD_VAR 0 5
21027: PUSH
21028: LD_INT 1
21030: ARRAY
21031: GREATEREQUAL
21032: PUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: LD_INT 2
21040: PPUSH
21041: CALL_OW 275
21045: PUSH
21046: LD_VAR 0 5
21050: PUSH
21051: LD_INT 2
21053: ARRAY
21054: GREATEREQUAL
21055: AND
21056: PUSH
21057: LD_VAR 0 4
21061: PPUSH
21062: LD_INT 3
21064: PPUSH
21065: CALL_OW 275
21069: PUSH
21070: LD_VAR 0 5
21074: PUSH
21075: LD_INT 3
21077: ARRAY
21078: GREATEREQUAL
21079: AND
21080: ST_TO_ADDR
// end ;
21081: LD_VAR 0 3
21085: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
21090: PPUSH
21091: PPUSH
21092: PPUSH
21093: PPUSH
21094: PPUSH
21095: PPUSH
21096: PPUSH
21097: PPUSH
21098: PPUSH
// result := false ;
21099: LD_ADDR_VAR 0 8
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21107: LD_VAR 0 5
21111: NOT
21112: PUSH
21113: LD_VAR 0 1
21117: NOT
21118: OR
21119: PUSH
21120: LD_VAR 0 2
21124: NOT
21125: OR
21126: PUSH
21127: LD_VAR 0 3
21131: NOT
21132: OR
21133: IFFALSE 21137
// exit ;
21135: GO 21951
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21137: LD_ADDR_VAR 0 14
21141: PUSH
21142: LD_VAR 0 1
21146: PPUSH
21147: LD_VAR 0 2
21151: PPUSH
21152: LD_VAR 0 3
21156: PPUSH
21157: LD_VAR 0 4
21161: PPUSH
21162: LD_VAR 0 5
21166: PUSH
21167: LD_INT 1
21169: ARRAY
21170: PPUSH
21171: CALL_OW 248
21175: PPUSH
21176: LD_INT 0
21178: PPUSH
21179: CALL 23204 0 6
21183: ST_TO_ADDR
// if not hexes then
21184: LD_VAR 0 14
21188: NOT
21189: IFFALSE 21193
// exit ;
21191: GO 21951
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21193: LD_ADDR_VAR 0 17
21197: PUSH
21198: LD_VAR 0 5
21202: PPUSH
21203: LD_INT 22
21205: PUSH
21206: LD_VAR 0 13
21210: PPUSH
21211: CALL_OW 255
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 30
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 30
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 72
21256: ST_TO_ADDR
// for i = 1 to hexes do
21257: LD_ADDR_VAR 0 9
21261: PUSH
21262: DOUBLE
21263: LD_INT 1
21265: DEC
21266: ST_TO_ADDR
21267: LD_VAR 0 14
21271: PUSH
21272: FOR_TO
21273: IFFALSE 21949
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21275: LD_ADDR_VAR 0 13
21279: PUSH
21280: LD_VAR 0 14
21284: PUSH
21285: LD_VAR 0 9
21289: ARRAY
21290: PUSH
21291: LD_INT 1
21293: ARRAY
21294: PPUSH
21295: LD_VAR 0 14
21299: PUSH
21300: LD_VAR 0 9
21304: ARRAY
21305: PUSH
21306: LD_INT 2
21308: ARRAY
21309: PPUSH
21310: CALL_OW 428
21314: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21315: LD_VAR 0 14
21319: PUSH
21320: LD_VAR 0 9
21324: ARRAY
21325: PUSH
21326: LD_INT 1
21328: ARRAY
21329: PPUSH
21330: LD_VAR 0 14
21334: PUSH
21335: LD_VAR 0 9
21339: ARRAY
21340: PUSH
21341: LD_INT 2
21343: ARRAY
21344: PPUSH
21345: CALL_OW 351
21349: PUSH
21350: LD_VAR 0 14
21354: PUSH
21355: LD_VAR 0 9
21359: ARRAY
21360: PUSH
21361: LD_INT 1
21363: ARRAY
21364: PPUSH
21365: LD_VAR 0 14
21369: PUSH
21370: LD_VAR 0 9
21374: ARRAY
21375: PUSH
21376: LD_INT 2
21378: ARRAY
21379: PPUSH
21380: CALL_OW 488
21384: NOT
21385: OR
21386: PUSH
21387: LD_VAR 0 13
21391: PPUSH
21392: CALL_OW 247
21396: PUSH
21397: LD_INT 3
21399: EQUAL
21400: OR
21401: IFFALSE 21407
// exit ;
21403: POP
21404: POP
21405: GO 21951
// if not tmp then
21407: LD_VAR 0 13
21411: NOT
21412: IFFALSE 21416
// continue ;
21414: GO 21272
// result := true ;
21416: LD_ADDR_VAR 0 8
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21424: LD_VAR 0 6
21428: PUSH
21429: LD_VAR 0 13
21433: PPUSH
21434: CALL_OW 247
21438: PUSH
21439: LD_INT 2
21441: EQUAL
21442: AND
21443: PUSH
21444: LD_VAR 0 13
21448: PPUSH
21449: CALL_OW 263
21453: PUSH
21454: LD_INT 1
21456: EQUAL
21457: AND
21458: IFFALSE 21622
// begin if IsDrivenBy ( tmp ) then
21460: LD_VAR 0 13
21464: PPUSH
21465: CALL_OW 311
21469: IFFALSE 21473
// continue ;
21471: GO 21272
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21473: LD_VAR 0 6
21477: PPUSH
21478: LD_INT 3
21480: PUSH
21481: LD_INT 60
21483: PUSH
21484: EMPTY
21485: LIST
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 3
21493: PUSH
21494: LD_INT 55
21496: PUSH
21497: EMPTY
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 72
21512: IFFALSE 21620
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21514: LD_ADDR_VAR 0 18
21518: PUSH
21519: LD_VAR 0 6
21523: PPUSH
21524: LD_INT 3
21526: PUSH
21527: LD_INT 60
21529: PUSH
21530: EMPTY
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 3
21539: PUSH
21540: LD_INT 55
21542: PUSH
21543: EMPTY
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PPUSH
21554: CALL_OW 72
21558: PUSH
21559: LD_INT 1
21561: ARRAY
21562: ST_TO_ADDR
// if IsInUnit ( driver ) then
21563: LD_VAR 0 18
21567: PPUSH
21568: CALL_OW 310
21572: IFFALSE 21583
// ComExit ( driver ) ;
21574: LD_VAR 0 18
21578: PPUSH
21579: CALL 46985 0 1
// AddComEnterUnit ( driver , tmp ) ;
21583: LD_VAR 0 18
21587: PPUSH
21588: LD_VAR 0 13
21592: PPUSH
21593: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21597: LD_VAR 0 18
21601: PPUSH
21602: LD_VAR 0 7
21606: PPUSH
21607: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21611: LD_VAR 0 18
21615: PPUSH
21616: CALL_OW 181
// end ; continue ;
21620: GO 21272
// end ; if not cleaners or not tmp in cleaners then
21622: LD_VAR 0 6
21626: NOT
21627: PUSH
21628: LD_VAR 0 13
21632: PUSH
21633: LD_VAR 0 6
21637: IN
21638: NOT
21639: OR
21640: IFFALSE 21947
// begin if dep then
21642: LD_VAR 0 17
21646: IFFALSE 21782
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21648: LD_ADDR_VAR 0 16
21652: PUSH
21653: LD_VAR 0 17
21657: PUSH
21658: LD_INT 1
21660: ARRAY
21661: PPUSH
21662: CALL_OW 250
21666: PPUSH
21667: LD_VAR 0 17
21671: PUSH
21672: LD_INT 1
21674: ARRAY
21675: PPUSH
21676: CALL_OW 254
21680: PPUSH
21681: LD_INT 5
21683: PPUSH
21684: CALL_OW 272
21688: PUSH
21689: LD_VAR 0 17
21693: PUSH
21694: LD_INT 1
21696: ARRAY
21697: PPUSH
21698: CALL_OW 251
21702: PPUSH
21703: LD_VAR 0 17
21707: PUSH
21708: LD_INT 1
21710: ARRAY
21711: PPUSH
21712: CALL_OW 254
21716: PPUSH
21717: LD_INT 5
21719: PPUSH
21720: CALL_OW 273
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21729: LD_VAR 0 16
21733: PUSH
21734: LD_INT 1
21736: ARRAY
21737: PPUSH
21738: LD_VAR 0 16
21742: PUSH
21743: LD_INT 2
21745: ARRAY
21746: PPUSH
21747: CALL_OW 488
21751: IFFALSE 21782
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21753: LD_VAR 0 13
21757: PPUSH
21758: LD_VAR 0 16
21762: PUSH
21763: LD_INT 1
21765: ARRAY
21766: PPUSH
21767: LD_VAR 0 16
21771: PUSH
21772: LD_INT 2
21774: ARRAY
21775: PPUSH
21776: CALL_OW 111
// continue ;
21780: GO 21272
// end ; end ; r := GetDir ( tmp ) ;
21782: LD_ADDR_VAR 0 15
21786: PUSH
21787: LD_VAR 0 13
21791: PPUSH
21792: CALL_OW 254
21796: ST_TO_ADDR
// if r = 5 then
21797: LD_VAR 0 15
21801: PUSH
21802: LD_INT 5
21804: EQUAL
21805: IFFALSE 21815
// r := 0 ;
21807: LD_ADDR_VAR 0 15
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// for j = r to 5 do
21815: LD_ADDR_VAR 0 10
21819: PUSH
21820: DOUBLE
21821: LD_VAR 0 15
21825: DEC
21826: ST_TO_ADDR
21827: LD_INT 5
21829: PUSH
21830: FOR_TO
21831: IFFALSE 21945
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21833: LD_ADDR_VAR 0 11
21837: PUSH
21838: LD_VAR 0 13
21842: PPUSH
21843: CALL_OW 250
21847: PPUSH
21848: LD_VAR 0 10
21852: PPUSH
21853: LD_INT 2
21855: PPUSH
21856: CALL_OW 272
21860: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21861: LD_ADDR_VAR 0 12
21865: PUSH
21866: LD_VAR 0 13
21870: PPUSH
21871: CALL_OW 251
21875: PPUSH
21876: LD_VAR 0 10
21880: PPUSH
21881: LD_INT 2
21883: PPUSH
21884: CALL_OW 273
21888: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21889: LD_VAR 0 11
21893: PPUSH
21894: LD_VAR 0 12
21898: PPUSH
21899: CALL_OW 488
21903: PUSH
21904: LD_VAR 0 11
21908: PPUSH
21909: LD_VAR 0 12
21913: PPUSH
21914: CALL_OW 428
21918: NOT
21919: AND
21920: IFFALSE 21943
// begin ComMoveXY ( tmp , _x , _y ) ;
21922: LD_VAR 0 13
21926: PPUSH
21927: LD_VAR 0 11
21931: PPUSH
21932: LD_VAR 0 12
21936: PPUSH
21937: CALL_OW 111
// break ;
21941: GO 21945
// end ; end ;
21943: GO 21830
21945: POP
21946: POP
// end ; end ;
21947: GO 21272
21949: POP
21950: POP
// end ;
21951: LD_VAR 0 8
21955: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21956: LD_INT 0
21958: PPUSH
// result := true ;
21959: LD_ADDR_VAR 0 3
21963: PUSH
21964: LD_INT 1
21966: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21967: LD_VAR 0 2
21971: PUSH
21972: LD_INT 24
21974: DOUBLE
21975: EQUAL
21976: IFTRUE 21986
21978: LD_INT 33
21980: DOUBLE
21981: EQUAL
21982: IFTRUE 21986
21984: GO 22011
21986: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21987: LD_ADDR_VAR 0 3
21991: PUSH
21992: LD_INT 32
21994: PPUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 321
22004: PUSH
22005: LD_INT 2
22007: EQUAL
22008: ST_TO_ADDR
22009: GO 22327
22011: LD_INT 20
22013: DOUBLE
22014: EQUAL
22015: IFTRUE 22019
22017: GO 22044
22019: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22020: LD_ADDR_VAR 0 3
22024: PUSH
22025: LD_INT 6
22027: PPUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 321
22037: PUSH
22038: LD_INT 2
22040: EQUAL
22041: ST_TO_ADDR
22042: GO 22327
22044: LD_INT 22
22046: DOUBLE
22047: EQUAL
22048: IFTRUE 22058
22050: LD_INT 36
22052: DOUBLE
22053: EQUAL
22054: IFTRUE 22058
22056: GO 22083
22058: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22059: LD_ADDR_VAR 0 3
22063: PUSH
22064: LD_INT 15
22066: PPUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL_OW 321
22076: PUSH
22077: LD_INT 2
22079: EQUAL
22080: ST_TO_ADDR
22081: GO 22327
22083: LD_INT 30
22085: DOUBLE
22086: EQUAL
22087: IFTRUE 22091
22089: GO 22116
22091: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22092: LD_ADDR_VAR 0 3
22096: PUSH
22097: LD_INT 20
22099: PPUSH
22100: LD_VAR 0 1
22104: PPUSH
22105: CALL_OW 321
22109: PUSH
22110: LD_INT 2
22112: EQUAL
22113: ST_TO_ADDR
22114: GO 22327
22116: LD_INT 28
22118: DOUBLE
22119: EQUAL
22120: IFTRUE 22130
22122: LD_INT 21
22124: DOUBLE
22125: EQUAL
22126: IFTRUE 22130
22128: GO 22155
22130: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22131: LD_ADDR_VAR 0 3
22135: PUSH
22136: LD_INT 21
22138: PPUSH
22139: LD_VAR 0 1
22143: PPUSH
22144: CALL_OW 321
22148: PUSH
22149: LD_INT 2
22151: EQUAL
22152: ST_TO_ADDR
22153: GO 22327
22155: LD_INT 16
22157: DOUBLE
22158: EQUAL
22159: IFTRUE 22163
22161: GO 22188
22163: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22164: LD_ADDR_VAR 0 3
22168: PUSH
22169: LD_INT 84
22171: PPUSH
22172: LD_VAR 0 1
22176: PPUSH
22177: CALL_OW 321
22181: PUSH
22182: LD_INT 2
22184: EQUAL
22185: ST_TO_ADDR
22186: GO 22327
22188: LD_INT 19
22190: DOUBLE
22191: EQUAL
22192: IFTRUE 22202
22194: LD_INT 23
22196: DOUBLE
22197: EQUAL
22198: IFTRUE 22202
22200: GO 22227
22202: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_INT 83
22210: PPUSH
22211: LD_VAR 0 1
22215: PPUSH
22216: CALL_OW 321
22220: PUSH
22221: LD_INT 2
22223: EQUAL
22224: ST_TO_ADDR
22225: GO 22327
22227: LD_INT 17
22229: DOUBLE
22230: EQUAL
22231: IFTRUE 22235
22233: GO 22260
22235: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22236: LD_ADDR_VAR 0 3
22240: PUSH
22241: LD_INT 39
22243: PPUSH
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL_OW 321
22253: PUSH
22254: LD_INT 2
22256: EQUAL
22257: ST_TO_ADDR
22258: GO 22327
22260: LD_INT 18
22262: DOUBLE
22263: EQUAL
22264: IFTRUE 22268
22266: GO 22293
22268: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22269: LD_ADDR_VAR 0 3
22273: PUSH
22274: LD_INT 40
22276: PPUSH
22277: LD_VAR 0 1
22281: PPUSH
22282: CALL_OW 321
22286: PUSH
22287: LD_INT 2
22289: EQUAL
22290: ST_TO_ADDR
22291: GO 22327
22293: LD_INT 27
22295: DOUBLE
22296: EQUAL
22297: IFTRUE 22301
22299: GO 22326
22301: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22302: LD_ADDR_VAR 0 3
22306: PUSH
22307: LD_INT 35
22309: PPUSH
22310: LD_VAR 0 1
22314: PPUSH
22315: CALL_OW 321
22319: PUSH
22320: LD_INT 2
22322: EQUAL
22323: ST_TO_ADDR
22324: GO 22327
22326: POP
// end ;
22327: LD_VAR 0 3
22331: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22332: LD_INT 0
22334: PPUSH
22335: PPUSH
22336: PPUSH
22337: PPUSH
22338: PPUSH
22339: PPUSH
22340: PPUSH
22341: PPUSH
22342: PPUSH
22343: PPUSH
22344: PPUSH
// result := false ;
22345: LD_ADDR_VAR 0 6
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
// if btype = b_depot then
22353: LD_VAR 0 2
22357: PUSH
22358: LD_INT 0
22360: EQUAL
22361: IFFALSE 22373
// begin result := true ;
22363: LD_ADDR_VAR 0 6
22367: PUSH
22368: LD_INT 1
22370: ST_TO_ADDR
// exit ;
22371: GO 23199
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22373: LD_VAR 0 1
22377: NOT
22378: PUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 266
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: LD_INT 1
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: IN
22399: NOT
22400: OR
22401: PUSH
22402: LD_VAR 0 2
22406: NOT
22407: OR
22408: PUSH
22409: LD_VAR 0 5
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: LD_INT 3
22425: PUSH
22426: LD_INT 4
22428: PUSH
22429: LD_INT 5
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: IN
22440: NOT
22441: OR
22442: PUSH
22443: LD_VAR 0 3
22447: PPUSH
22448: LD_VAR 0 4
22452: PPUSH
22453: CALL_OW 488
22457: NOT
22458: OR
22459: IFFALSE 22463
// exit ;
22461: GO 23199
// side := GetSide ( depot ) ;
22463: LD_ADDR_VAR 0 9
22467: PUSH
22468: LD_VAR 0 1
22472: PPUSH
22473: CALL_OW 255
22477: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22478: LD_VAR 0 9
22482: PPUSH
22483: LD_VAR 0 2
22487: PPUSH
22488: CALL 21956 0 2
22492: NOT
22493: IFFALSE 22497
// exit ;
22495: GO 23199
// pom := GetBase ( depot ) ;
22497: LD_ADDR_VAR 0 10
22501: PUSH
22502: LD_VAR 0 1
22506: PPUSH
22507: CALL_OW 274
22511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22512: LD_ADDR_VAR 0 11
22516: PUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: LD_VAR 0 1
22526: PPUSH
22527: CALL_OW 248
22531: PPUSH
22532: CALL_OW 450
22536: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22537: LD_VAR 0 10
22541: PPUSH
22542: LD_INT 1
22544: PPUSH
22545: CALL_OW 275
22549: PUSH
22550: LD_VAR 0 11
22554: PUSH
22555: LD_INT 1
22557: ARRAY
22558: GREATEREQUAL
22559: PUSH
22560: LD_VAR 0 10
22564: PPUSH
22565: LD_INT 2
22567: PPUSH
22568: CALL_OW 275
22572: PUSH
22573: LD_VAR 0 11
22577: PUSH
22578: LD_INT 2
22580: ARRAY
22581: GREATEREQUAL
22582: AND
22583: PUSH
22584: LD_VAR 0 10
22588: PPUSH
22589: LD_INT 3
22591: PPUSH
22592: CALL_OW 275
22596: PUSH
22597: LD_VAR 0 11
22601: PUSH
22602: LD_INT 3
22604: ARRAY
22605: GREATEREQUAL
22606: AND
22607: NOT
22608: IFFALSE 22612
// exit ;
22610: GO 23199
// if GetBType ( depot ) = b_depot then
22612: LD_VAR 0 1
22616: PPUSH
22617: CALL_OW 266
22621: PUSH
22622: LD_INT 0
22624: EQUAL
22625: IFFALSE 22637
// dist := 28 else
22627: LD_ADDR_VAR 0 14
22631: PUSH
22632: LD_INT 28
22634: ST_TO_ADDR
22635: GO 22645
// dist := 36 ;
22637: LD_ADDR_VAR 0 14
22641: PUSH
22642: LD_INT 36
22644: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22645: LD_VAR 0 1
22649: PPUSH
22650: LD_VAR 0 3
22654: PPUSH
22655: LD_VAR 0 4
22659: PPUSH
22660: CALL_OW 297
22664: PUSH
22665: LD_VAR 0 14
22669: GREATER
22670: IFFALSE 22674
// exit ;
22672: GO 23199
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22674: LD_ADDR_VAR 0 12
22678: PUSH
22679: LD_VAR 0 2
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: LD_VAR 0 4
22693: PPUSH
22694: LD_VAR 0 5
22698: PPUSH
22699: LD_VAR 0 1
22703: PPUSH
22704: CALL_OW 248
22708: PPUSH
22709: LD_INT 0
22711: PPUSH
22712: CALL 23204 0 6
22716: ST_TO_ADDR
// if not hexes then
22717: LD_VAR 0 12
22721: NOT
22722: IFFALSE 22726
// exit ;
22724: GO 23199
// hex := GetHexInfo ( x , y ) ;
22726: LD_ADDR_VAR 0 15
22730: PUSH
22731: LD_VAR 0 3
22735: PPUSH
22736: LD_VAR 0 4
22740: PPUSH
22741: CALL_OW 546
22745: ST_TO_ADDR
// if hex [ 1 ] then
22746: LD_VAR 0 15
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: IFFALSE 22758
// exit ;
22756: GO 23199
// height := hex [ 2 ] ;
22758: LD_ADDR_VAR 0 13
22762: PUSH
22763: LD_VAR 0 15
22767: PUSH
22768: LD_INT 2
22770: ARRAY
22771: ST_TO_ADDR
// for i = 1 to hexes do
22772: LD_ADDR_VAR 0 7
22776: PUSH
22777: DOUBLE
22778: LD_INT 1
22780: DEC
22781: ST_TO_ADDR
22782: LD_VAR 0 12
22786: PUSH
22787: FOR_TO
22788: IFFALSE 23118
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22790: LD_VAR 0 12
22794: PUSH
22795: LD_VAR 0 7
22799: ARRAY
22800: PUSH
22801: LD_INT 1
22803: ARRAY
22804: PPUSH
22805: LD_VAR 0 12
22809: PUSH
22810: LD_VAR 0 7
22814: ARRAY
22815: PUSH
22816: LD_INT 2
22818: ARRAY
22819: PPUSH
22820: CALL_OW 488
22824: NOT
22825: PUSH
22826: LD_VAR 0 12
22830: PUSH
22831: LD_VAR 0 7
22835: ARRAY
22836: PUSH
22837: LD_INT 1
22839: ARRAY
22840: PPUSH
22841: LD_VAR 0 12
22845: PUSH
22846: LD_VAR 0 7
22850: ARRAY
22851: PUSH
22852: LD_INT 2
22854: ARRAY
22855: PPUSH
22856: CALL_OW 428
22860: PUSH
22861: LD_INT 0
22863: GREATER
22864: OR
22865: PUSH
22866: LD_VAR 0 12
22870: PUSH
22871: LD_VAR 0 7
22875: ARRAY
22876: PUSH
22877: LD_INT 1
22879: ARRAY
22880: PPUSH
22881: LD_VAR 0 12
22885: PUSH
22886: LD_VAR 0 7
22890: ARRAY
22891: PUSH
22892: LD_INT 2
22894: ARRAY
22895: PPUSH
22896: CALL_OW 351
22900: OR
22901: IFFALSE 22907
// exit ;
22903: POP
22904: POP
22905: GO 23199
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22907: LD_ADDR_VAR 0 8
22911: PUSH
22912: LD_VAR 0 12
22916: PUSH
22917: LD_VAR 0 7
22921: ARRAY
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: PPUSH
22927: LD_VAR 0 12
22931: PUSH
22932: LD_VAR 0 7
22936: ARRAY
22937: PUSH
22938: LD_INT 2
22940: ARRAY
22941: PPUSH
22942: CALL_OW 546
22946: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22947: LD_VAR 0 8
22951: PUSH
22952: LD_INT 1
22954: ARRAY
22955: PUSH
22956: LD_VAR 0 8
22960: PUSH
22961: LD_INT 2
22963: ARRAY
22964: PUSH
22965: LD_VAR 0 13
22969: PUSH
22970: LD_INT 2
22972: PLUS
22973: GREATER
22974: OR
22975: PUSH
22976: LD_VAR 0 8
22980: PUSH
22981: LD_INT 2
22983: ARRAY
22984: PUSH
22985: LD_VAR 0 13
22989: PUSH
22990: LD_INT 2
22992: MINUS
22993: LESS
22994: OR
22995: PUSH
22996: LD_VAR 0 8
23000: PUSH
23001: LD_INT 3
23003: ARRAY
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: LD_INT 8
23010: PUSH
23011: LD_INT 9
23013: PUSH
23014: LD_INT 10
23016: PUSH
23017: LD_INT 11
23019: PUSH
23020: LD_INT 12
23022: PUSH
23023: LD_INT 13
23025: PUSH
23026: LD_INT 16
23028: PUSH
23029: LD_INT 17
23031: PUSH
23032: LD_INT 18
23034: PUSH
23035: LD_INT 19
23037: PUSH
23038: LD_INT 20
23040: PUSH
23041: LD_INT 21
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: IN
23059: NOT
23060: OR
23061: PUSH
23062: LD_VAR 0 8
23066: PUSH
23067: LD_INT 5
23069: ARRAY
23070: NOT
23071: OR
23072: PUSH
23073: LD_VAR 0 8
23077: PUSH
23078: LD_INT 6
23080: ARRAY
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: LD_INT 7
23090: PUSH
23091: LD_INT 9
23093: PUSH
23094: LD_INT 10
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: IN
23108: NOT
23109: OR
23110: IFFALSE 23116
// exit ;
23112: POP
23113: POP
23114: GO 23199
// end ;
23116: GO 22787
23118: POP
23119: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23120: LD_VAR 0 9
23124: PPUSH
23125: LD_VAR 0 3
23129: PPUSH
23130: LD_VAR 0 4
23134: PPUSH
23135: LD_INT 20
23137: PPUSH
23138: CALL 15122 0 4
23142: PUSH
23143: LD_INT 4
23145: ARRAY
23146: IFFALSE 23150
// exit ;
23148: GO 23199
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23150: LD_VAR 0 2
23154: PUSH
23155: LD_INT 29
23157: PUSH
23158: LD_INT 30
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: IN
23165: PUSH
23166: LD_VAR 0 3
23170: PPUSH
23171: LD_VAR 0 4
23175: PPUSH
23176: LD_VAR 0 9
23180: PPUSH
23181: CALL_OW 440
23185: NOT
23186: AND
23187: IFFALSE 23191
// exit ;
23189: GO 23199
// result := true ;
23191: LD_ADDR_VAR 0 6
23195: PUSH
23196: LD_INT 1
23198: ST_TO_ADDR
// end ;
23199: LD_VAR 0 6
23203: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23204: LD_INT 0
23206: PPUSH
23207: PPUSH
23208: PPUSH
23209: PPUSH
23210: PPUSH
23211: PPUSH
23212: PPUSH
23213: PPUSH
23214: PPUSH
23215: PPUSH
23216: PPUSH
23217: PPUSH
23218: PPUSH
23219: PPUSH
23220: PPUSH
23221: PPUSH
23222: PPUSH
23223: PPUSH
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
23233: PPUSH
23234: PPUSH
23235: PPUSH
23236: PPUSH
23237: PPUSH
23238: PPUSH
23239: PPUSH
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
23258: PPUSH
23259: PPUSH
23260: PPUSH
23261: PPUSH
23262: PPUSH
23263: PPUSH
// result = [ ] ;
23264: LD_ADDR_VAR 0 7
23268: PUSH
23269: EMPTY
23270: ST_TO_ADDR
// temp_list = [ ] ;
23271: LD_ADDR_VAR 0 9
23275: PUSH
23276: EMPTY
23277: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23278: LD_VAR 0 4
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: LD_INT 4
23297: PUSH
23298: LD_INT 5
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: IN
23309: NOT
23310: PUSH
23311: LD_VAR 0 1
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: IN
23326: PUSH
23327: LD_VAR 0 5
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: IN
23346: NOT
23347: AND
23348: OR
23349: IFFALSE 23353
// exit ;
23351: GO 41744
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23353: LD_VAR 0 1
23357: PUSH
23358: LD_INT 6
23360: PUSH
23361: LD_INT 7
23363: PUSH
23364: LD_INT 8
23366: PUSH
23367: LD_INT 13
23369: PUSH
23370: LD_INT 12
23372: PUSH
23373: LD_INT 15
23375: PUSH
23376: LD_INT 11
23378: PUSH
23379: LD_INT 14
23381: PUSH
23382: LD_INT 10
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: IN
23396: IFFALSE 23406
// btype = b_lab ;
23398: LD_ADDR_VAR 0 1
23402: PUSH
23403: LD_INT 6
23405: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23406: LD_VAR 0 6
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: IN
23425: NOT
23426: PUSH
23427: LD_VAR 0 1
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: LD_INT 3
23443: PUSH
23444: LD_INT 6
23446: PUSH
23447: LD_INT 36
23449: PUSH
23450: LD_INT 4
23452: PUSH
23453: LD_INT 5
23455: PUSH
23456: LD_INT 31
23458: PUSH
23459: LD_INT 32
23461: PUSH
23462: LD_INT 33
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: IN
23478: NOT
23479: PUSH
23480: LD_VAR 0 6
23484: PUSH
23485: LD_INT 1
23487: EQUAL
23488: AND
23489: OR
23490: PUSH
23491: LD_VAR 0 1
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: LD_INT 3
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: IN
23506: NOT
23507: PUSH
23508: LD_VAR 0 6
23512: PUSH
23513: LD_INT 2
23515: EQUAL
23516: AND
23517: OR
23518: IFFALSE 23528
// mode = 0 ;
23520: LD_ADDR_VAR 0 6
23524: PUSH
23525: LD_INT 0
23527: ST_TO_ADDR
// case mode of 0 :
23528: LD_VAR 0 6
23532: PUSH
23533: LD_INT 0
23535: DOUBLE
23536: EQUAL
23537: IFTRUE 23541
23539: GO 34994
23541: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23542: LD_ADDR_VAR 0 11
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 0
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: LD_INT 2
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 2
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 3
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23735: LD_ADDR_VAR 0 12
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: LD_INT 0
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 3
23892: NEG
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 3
23903: NEG
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23931: LD_ADDR_VAR 0 13
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: LD_INT 2
24016: NEG
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 2
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 2
24054: NEG
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 2
24066: NEG
24067: PUSH
24068: LD_INT 2
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 2
24078: NEG
24079: PUSH
24080: LD_INT 3
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 3
24090: NEG
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: NEG
24103: PUSH
24104: LD_INT 3
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24130: LD_ADDR_VAR 0 14
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: NEG
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 2
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 1
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: LD_INT 3
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 3
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24326: LD_ADDR_VAR 0 15
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: NEG
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: LD_INT 1
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 2
24449: NEG
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 2
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 3
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24519: LD_ADDR_VAR 0 16
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: NEG
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: LD_INT 3
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24712: LD_ADDR_VAR 0 17
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: LD_INT 2
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: LD_INT 2
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 2
24837: PUSH
24838: LD_INT 1
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 2
24899: NEG
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: NEG
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24942: LD_ADDR_VAR 0 18
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 2
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 2
25118: NEG
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 2
25129: NEG
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: LD_INT 2
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25172: LD_ADDR_VAR 0 19
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 2
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 2
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 2
25359: NEG
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 2
25371: NEG
25372: PUSH
25373: LD_INT 2
25375: NEG
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25402: LD_ADDR_VAR 0 20
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 2
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 2
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 2
25578: NEG
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25632: LD_ADDR_VAR 0 21
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 2
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: NEG
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: NEG
25832: PUSH
25833: LD_INT 2
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25862: LD_ADDR_VAR 0 22
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 2
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: NEG
26062: PUSH
26063: LD_INT 2
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26092: LD_ADDR_VAR 0 23
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: LD_INT 2
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: NEG
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 3
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: LD_INT 3
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: LD_INT 2
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26372: LD_ADDR_VAR 0 24
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: NEG
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: NEG
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 2
26571: NEG
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 2
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 3
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: LD_INT 2
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26648: LD_ADDR_VAR 0 25
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: NEG
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 3
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: LD_INT 2
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: LD_INT 3
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: LD_INT 3
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26922: LD_ADDR_VAR 0 26
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 2
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: NEG
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 3
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 3
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 2
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27198: LD_ADDR_VAR 0 27
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: NEG
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27478: LD_ADDR_VAR 0 28
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 3
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 3
27713: NEG
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 3
27725: NEG
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27760: LD_ADDR_VAR 0 29
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 2
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: NEG
27951: PUSH
27952: LD_INT 3
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 3
28004: NEG
28005: PUSH
28006: LD_INT 2
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28039: LD_ADDR_VAR 0 30
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: LD_INT 0
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 2
28216: NEG
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: LD_INT 3
28232: NEG
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 3
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 3
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: LD_INT 1
28286: NEG
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28317: LD_ADDR_VAR 0 31
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: LD_INT 2
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 2
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 3
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: PUSH
28519: LD_INT 1
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: LD_INT 3
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 3
28560: NEG
28561: PUSH
28562: LD_INT 2
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28595: LD_ADDR_VAR 0 32
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 1
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: LD_INT 2
28680: NEG
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: LD_INT 3
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 3
28807: PUSH
28808: LD_INT 2
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: LD_INT 3
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 2
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 3
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28873: LD_ADDR_VAR 0 33
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 1
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: LD_INT 2
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 2
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 2
29028: NEG
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: LD_INT 2
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: LD_INT 3
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 3
29117: NEG
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29152: LD_ADDR_VAR 0 34
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 2
29308: NEG
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: NEG
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: NEG
29332: PUSH
29333: LD_INT 2
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: LD_INT 3
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 3
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 2
29376: PUSH
29377: LD_INT 3
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 2
29386: NEG
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 3
29397: NEG
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29432: LD_ADDR_VAR 0 35
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29544: LD_ADDR_VAR 0 36
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 0
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: LD_INT 2
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29656: LD_ADDR_VAR 0 37
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29768: LD_ADDR_VAR 0 38
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 2
29859: NEG
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29880: LD_ADDR_VAR 0 39
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29992: LD_ADDR_VAR 0 40
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 1
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30104: LD_ADDR_VAR 0 41
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: LD_INT 2
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: LD_INT 2
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: NEG
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 3
30317: PUSH
30318: LD_INT 0
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 3
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: LD_INT 2
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: NEG
30414: PUSH
30415: LD_INT 3
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30454: LD_ADDR_VAR 0 42
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: NEG
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: LD_INT 2
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: LD_INT 1
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 2
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: LD_INT 3
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: LD_INT 3
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 3
30751: NEG
30752: PUSH
30753: LD_INT 2
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: LD_INT 3
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30804: LD_ADDR_VAR 0 43
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 1
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: LD_INT 0
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 2
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 3
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: LD_INT 2
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 3
31100: NEG
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 3
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31152: LD_ADDR_VAR 0 44
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 1
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 2
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: NEG
31343: PUSH
31344: LD_INT 3
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: NEG
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 3
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: LD_INT 2
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31502: LD_ADDR_VAR 0 45
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 3
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: LD_INT 3
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: LD_INT 3
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 3
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31852: LD_ADDR_VAR 0 46
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 2
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: LD_INT 2
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 3
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 3
32148: NEG
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32200: LD_ADDR_VAR 0 47
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32351: LD_ADDR_VAR 0 48
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32498: LD_ADDR_VAR 0 49
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 0
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32642: LD_ADDR_VAR 0 50
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 2
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32786: LD_ADDR_VAR 0 51
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 2
32909: NEG
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32933: LD_ADDR_VAR 0 52
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: NEG
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33084: LD_ADDR_VAR 0 53
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: LD_INT 2
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33314: LD_ADDR_VAR 0 54
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 2
33490: NEG
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33544: LD_ADDR_VAR 0 55
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 2
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: NEG
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33774: LD_ADDR_VAR 0 56
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34004: LD_ADDR_VAR 0 57
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: NEG
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: NEG
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34234: LD_ADDR_VAR 0 58
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34464: LD_ADDR_VAR 0 59
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34552: LD_ADDR_VAR 0 60
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34640: LD_ADDR_VAR 0 61
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34728: LD_ADDR_VAR 0 62
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34816: LD_ADDR_VAR 0 63
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34904: LD_ADDR_VAR 0 64
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: NEG
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
// end ; 1 :
34992: GO 40889
34994: LD_INT 1
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35002
35000: GO 37625
35002: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35003: LD_ADDR_VAR 0 11
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 3
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 3
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: LD_INT 2
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35047: LD_ADDR_VAR 0 12
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 3
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35088: LD_ADDR_VAR 0 13
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: LD_INT 3
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35128: LD_ADDR_VAR 0 14
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 3
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35169: LD_ADDR_VAR 0 15
35173: PUSH
35174: LD_INT 2
35176: NEG
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 3
35187: NEG
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 3
35198: NEG
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35213: LD_ADDR_VAR 0 16
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: NEG
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 3
35244: NEG
35245: PUSH
35246: LD_INT 3
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35259: LD_ADDR_VAR 0 17
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 3
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 3
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35303: LD_ADDR_VAR 0 18
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 3
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35344: LD_ADDR_VAR 0 19
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 3
35361: PUSH
35362: LD_INT 3
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: LD_INT 3
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35384: LD_ADDR_VAR 0 20
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: LD_INT 3
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35425: LD_ADDR_VAR 0 21
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 3
35443: NEG
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 3
35454: NEG
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35469: LD_ADDR_VAR 0 22
35473: PUSH
35474: LD_INT 2
35476: NEG
35477: PUSH
35478: LD_INT 3
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 3
35488: NEG
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 3
35500: NEG
35501: PUSH
35502: LD_INT 3
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35515: LD_ADDR_VAR 0 23
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 3
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: LD_INT 4
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 3
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35559: LD_ADDR_VAR 0 24
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 4
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35600: LD_ADDR_VAR 0 25
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: LD_INT 3
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 4
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 3
35627: PUSH
35628: LD_INT 4
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35640: LD_ADDR_VAR 0 26
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 4
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35681: LD_ADDR_VAR 0 27
35685: PUSH
35686: LD_INT 3
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 3
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 4
35710: NEG
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35725: LD_ADDR_VAR 0 28
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: LD_INT 3
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 3
35744: NEG
35745: PUSH
35746: LD_INT 4
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 4
35756: NEG
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35771: LD_ADDR_VAR 0 29
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 3
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 3
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 4
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 4
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 3
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: LD_INT 5
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 5
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 4
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 6
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 6
35895: NEG
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 5
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35926: LD_ADDR_VAR 0 30
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 3
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 3
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 4
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 4
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 4
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 5
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 5
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 5
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 6
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 6
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36069: LD_ADDR_VAR 0 31
36073: PUSH
36074: LD_INT 3
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 3
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: LD_INT 3
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 4
36106: PUSH
36107: LD_INT 3
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 4
36116: PUSH
36117: LD_INT 4
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: LD_INT 4
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 5
36136: PUSH
36137: LD_INT 4
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 5
36146: PUSH
36147: LD_INT 5
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 4
36156: PUSH
36157: LD_INT 5
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 6
36166: PUSH
36167: LD_INT 5
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 6
36176: PUSH
36177: LD_INT 6
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 5
36186: PUSH
36187: LD_INT 6
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36208: LD_ADDR_VAR 0 32
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: LD_INT 3
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 3
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: LD_INT 2
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 4
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: LD_INT 4
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 5
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 5
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: LD_INT 4
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 6
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 6
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 5
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36351: LD_ADDR_VAR 0 33
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 3
36369: NEG
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 3
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 3
36392: NEG
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 4
36403: NEG
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 4
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 4
36426: NEG
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 5
36437: NEG
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 5
36448: NEG
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 5
36460: NEG
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 6
36471: NEG
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 6
36482: NEG
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36506: LD_ADDR_VAR 0 34
36510: PUSH
36511: LD_INT 2
36513: NEG
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 3
36525: NEG
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 3
36537: NEG
36538: PUSH
36539: LD_INT 3
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 3
36549: NEG
36550: PUSH
36551: LD_INT 4
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 4
36561: NEG
36562: PUSH
36563: LD_INT 3
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 4
36573: NEG
36574: PUSH
36575: LD_INT 4
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 4
36585: NEG
36586: PUSH
36587: LD_INT 5
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 5
36597: NEG
36598: PUSH
36599: LD_INT 4
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 5
36609: NEG
36610: PUSH
36611: LD_INT 5
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 5
36621: NEG
36622: PUSH
36623: LD_INT 6
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 6
36633: NEG
36634: PUSH
36635: LD_INT 5
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 6
36645: NEG
36646: PUSH
36647: LD_INT 6
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36669: LD_ADDR_VAR 0 41
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: LD_INT 3
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36713: LD_ADDR_VAR 0 42
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 3
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36754: LD_ADDR_VAR 0 43
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36794: LD_ADDR_VAR 0 44
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: LD_INT 3
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36835: LD_ADDR_VAR 0 45
36839: PUSH
36840: LD_INT 2
36842: NEG
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: NEG
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 3
36864: NEG
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36879: LD_ADDR_VAR 0 46
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: LD_INT 3
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 3
36910: NEG
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36925: LD_ADDR_VAR 0 47
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 3
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 3
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36958: LD_ADDR_VAR 0 48
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36989: LD_ADDR_VAR 0 49
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 3
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37018: LD_ADDR_VAR 0 50
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37047: LD_ADDR_VAR 0 51
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37078: LD_ADDR_VAR 0 52
37082: PUSH
37083: LD_INT 3
37085: NEG
37086: PUSH
37087: LD_INT 1
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: LD_INT 2
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37111: LD_ADDR_VAR 0 53
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 3
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 3
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37155: LD_ADDR_VAR 0 54
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37196: LD_ADDR_VAR 0 55
37200: PUSH
37201: LD_INT 3
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 3
37213: PUSH
37214: LD_INT 3
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: LD_INT 3
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37236: LD_ADDR_VAR 0 56
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: LD_INT 3
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: LD_INT 3
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37277: LD_ADDR_VAR 0 57
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 3
37295: NEG
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 3
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37321: LD_ADDR_VAR 0 58
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 3
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 3
37352: NEG
37353: PUSH
37354: LD_INT 3
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37367: LD_ADDR_VAR 0 59
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 2
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37411: LD_ADDR_VAR 0 60
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37452: LD_ADDR_VAR 0 61
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37492: LD_ADDR_VAR 0 62
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37533: LD_ADDR_VAR 0 63
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37577: LD_ADDR_VAR 0 64
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: ST_TO_ADDR
// end ; 2 :
37623: GO 40889
37625: LD_INT 2
37627: DOUBLE
37628: EQUAL
37629: IFTRUE 37633
37631: GO 40888
37633: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37634: LD_ADDR_VAR 0 29
37638: PUSH
37639: LD_INT 4
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 4
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 5
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 5
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 4
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 3
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 5
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 3
37734: PUSH
37735: LD_INT 3
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 3
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 4
37754: PUSH
37755: LD_INT 3
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 4
37764: PUSH
37765: LD_INT 4
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 3
37774: PUSH
37775: LD_INT 4
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 4
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 4
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 4
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 3
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: LD_INT 4
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 5
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 5
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 4
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 5
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: NEG
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 3
37928: NEG
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 4
37973: NEG
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 4
37984: NEG
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 4
37996: NEG
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 4
38019: NEG
38020: PUSH
38021: LD_INT 4
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 4
38031: NEG
38032: PUSH
38033: LD_INT 5
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 3
38043: NEG
38044: PUSH
38045: LD_INT 4
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 3
38055: NEG
38056: PUSH
38057: LD_INT 3
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 4
38067: NEG
38068: PUSH
38069: LD_INT 3
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 5
38079: NEG
38080: PUSH
38081: LD_INT 4
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 5
38091: NEG
38092: PUSH
38093: LD_INT 5
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 3
38103: NEG
38104: PUSH
38105: LD_INT 5
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 5
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38172: LD_ADDR_VAR 0 30
38176: PUSH
38177: LD_INT 4
38179: PUSH
38180: LD_INT 4
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 4
38189: PUSH
38190: LD_INT 3
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 5
38199: PUSH
38200: LD_INT 4
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 5
38209: PUSH
38210: LD_INT 5
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 4
38219: PUSH
38220: LD_INT 5
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: LD_INT 4
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: LD_INT 3
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 5
38249: PUSH
38250: LD_INT 3
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: PUSH
38260: LD_INT 5
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 4
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 4
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: LD_INT 3
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 4
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 4
38362: NEG
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 4
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 3
38385: NEG
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 3
38396: NEG
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 4
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 5
38418: NEG
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 5
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 5
38441: NEG
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 3
38453: NEG
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: NEG
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 4
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: LD_INT 3
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 3
38512: NEG
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 4
38524: NEG
38525: PUSH
38526: LD_INT 3
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 4
38536: NEG
38537: PUSH
38538: LD_INT 4
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: LD_INT 4
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 4
38560: NEG
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: LD_INT 4
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 5
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 4
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 3
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 3
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: LD_INT 4
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 5
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: LD_INT 3
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: LD_INT 5
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38719: LD_ADDR_VAR 0 31
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 4
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: LD_INT 4
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 5
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 5
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: LD_INT 3
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 5
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: LD_INT 3
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 3
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 4
38875: NEG
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 4
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 4
38898: NEG
38899: PUSH
38900: LD_INT 2
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 4
38921: NEG
38922: PUSH
38923: LD_INT 4
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 4
38933: NEG
38934: PUSH
38935: LD_INT 5
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 3
38945: NEG
38946: PUSH
38947: LD_INT 4
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 3
38957: NEG
38958: PUSH
38959: LD_INT 3
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 4
38969: NEG
38970: PUSH
38971: LD_INT 3
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 5
38981: NEG
38982: PUSH
38983: LD_INT 4
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 5
38993: NEG
38994: PUSH
38995: LD_INT 5
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 3
39005: NEG
39006: PUSH
39007: LD_INT 5
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 5
39017: NEG
39018: PUSH
39019: LD_INT 3
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 4
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 3
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 3
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 4
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: LD_INT 4
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 4
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 4
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 5
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 5
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 4
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 5
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39269: LD_ADDR_VAR 0 32
39273: PUSH
39274: LD_INT 4
39276: NEG
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 4
39287: NEG
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 3
39310: NEG
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 4
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 5
39332: NEG
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 5
39343: NEG
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 5
39355: NEG
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 3
39367: NEG
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: NEG
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 3
39390: NEG
39391: PUSH
39392: LD_INT 4
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: LD_INT 3
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: NEG
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 4
39438: NEG
39439: PUSH
39440: LD_INT 3
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: NEG
39451: PUSH
39452: LD_INT 4
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 4
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 4
39474: NEG
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 4
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 5
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 4
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 3
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 3
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 4
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 5
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 5
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 4
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 4
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 4
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 4
39681: PUSH
39682: LD_INT 4
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 4
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 5
39701: PUSH
39702: LD_INT 4
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 5
39711: PUSH
39712: LD_INT 5
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 4
39721: PUSH
39722: LD_INT 5
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 3
39731: PUSH
39732: LD_INT 4
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 5
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 3
39761: PUSH
39762: LD_INT 5
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39816: LD_ADDR_VAR 0 33
39820: PUSH
39821: LD_INT 4
39823: NEG
39824: PUSH
39825: LD_INT 4
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 4
39835: NEG
39836: PUSH
39837: LD_INT 5
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 4
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: NEG
39860: PUSH
39861: LD_INT 3
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 4
39871: NEG
39872: PUSH
39873: LD_INT 3
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 5
39883: NEG
39884: PUSH
39885: LD_INT 4
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 5
39895: NEG
39896: PUSH
39897: LD_INT 5
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 3
39907: NEG
39908: PUSH
39909: LD_INT 5
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 5
39919: NEG
39920: PUSH
39921: LD_INT 3
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 3
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 4
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: LD_INT 3
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 4
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: NEG
40022: PUSH
40023: LD_INT 4
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 4
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 4
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 5
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 5
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 4
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 3
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 3
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 3
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 5
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 3
40126: PUSH
40127: LD_INT 3
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 3
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 4
40146: PUSH
40147: LD_INT 3
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 4
40156: PUSH
40157: LD_INT 4
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: LD_INT 4
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: LD_INT 4
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 4
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 3
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: LD_INT 4
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 5
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 5
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: LD_INT 4
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: LD_INT 3
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: LD_INT 5
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40354: LD_ADDR_VAR 0 34
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 4
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 5
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 4
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 3
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 3
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: LD_INT 4
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: LD_INT 5
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: LD_INT 3
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: LD_INT 5
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 3
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 4
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 4
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 4
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 4
40556: PUSH
40557: LD_INT 4
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 4
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 5
40576: PUSH
40577: LD_INT 4
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 5
40586: PUSH
40587: LD_INT 5
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 4
40596: PUSH
40597: LD_INT 5
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 3
40606: PUSH
40607: LD_INT 4
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 3
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 5
40626: PUSH
40627: LD_INT 3
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: LD_INT 5
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 3
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 3
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 4
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 4
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 4
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 4
40739: NEG
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 4
40750: NEG
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 3
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 4
40784: NEG
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 5
40795: NEG
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 5
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 5
40818: NEG
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 3
40830: NEG
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: ST_TO_ADDR
// end ; end ;
40886: GO 40889
40888: POP
// case btype of b_depot , b_warehouse :
40889: LD_VAR 0 1
40893: PUSH
40894: LD_INT 0
40896: DOUBLE
40897: EQUAL
40898: IFTRUE 40908
40900: LD_INT 1
40902: DOUBLE
40903: EQUAL
40904: IFTRUE 40908
40906: GO 41109
40908: POP
// case nation of nation_american :
40909: LD_VAR 0 5
40913: PUSH
40914: LD_INT 1
40916: DOUBLE
40917: EQUAL
40918: IFTRUE 40922
40920: GO 40978
40922: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40923: LD_ADDR_VAR 0 9
40927: PUSH
40928: LD_VAR 0 11
40932: PUSH
40933: LD_VAR 0 12
40937: PUSH
40938: LD_VAR 0 13
40942: PUSH
40943: LD_VAR 0 14
40947: PUSH
40948: LD_VAR 0 15
40952: PUSH
40953: LD_VAR 0 16
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: PUSH
40966: LD_VAR 0 4
40970: PUSH
40971: LD_INT 1
40973: PLUS
40974: ARRAY
40975: ST_TO_ADDR
40976: GO 41107
40978: LD_INT 2
40980: DOUBLE
40981: EQUAL
40982: IFTRUE 40986
40984: GO 41042
40986: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40987: LD_ADDR_VAR 0 9
40991: PUSH
40992: LD_VAR 0 17
40996: PUSH
40997: LD_VAR 0 18
41001: PUSH
41002: LD_VAR 0 19
41006: PUSH
41007: LD_VAR 0 20
41011: PUSH
41012: LD_VAR 0 21
41016: PUSH
41017: LD_VAR 0 22
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: PUSH
41030: LD_VAR 0 4
41034: PUSH
41035: LD_INT 1
41037: PLUS
41038: ARRAY
41039: ST_TO_ADDR
41040: GO 41107
41042: LD_INT 3
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41050
41048: GO 41106
41050: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41051: LD_ADDR_VAR 0 9
41055: PUSH
41056: LD_VAR 0 23
41060: PUSH
41061: LD_VAR 0 24
41065: PUSH
41066: LD_VAR 0 25
41070: PUSH
41071: LD_VAR 0 26
41075: PUSH
41076: LD_VAR 0 27
41080: PUSH
41081: LD_VAR 0 28
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: PUSH
41094: LD_VAR 0 4
41098: PUSH
41099: LD_INT 1
41101: PLUS
41102: ARRAY
41103: ST_TO_ADDR
41104: GO 41107
41106: POP
41107: GO 41662
41109: LD_INT 2
41111: DOUBLE
41112: EQUAL
41113: IFTRUE 41123
41115: LD_INT 3
41117: DOUBLE
41118: EQUAL
41119: IFTRUE 41123
41121: GO 41179
41123: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41124: LD_ADDR_VAR 0 9
41128: PUSH
41129: LD_VAR 0 29
41133: PUSH
41134: LD_VAR 0 30
41138: PUSH
41139: LD_VAR 0 31
41143: PUSH
41144: LD_VAR 0 32
41148: PUSH
41149: LD_VAR 0 33
41153: PUSH
41154: LD_VAR 0 34
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: PUSH
41167: LD_VAR 0 4
41171: PUSH
41172: LD_INT 1
41174: PLUS
41175: ARRAY
41176: ST_TO_ADDR
41177: GO 41662
41179: LD_INT 16
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41241
41185: LD_INT 17
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41241
41191: LD_INT 18
41193: DOUBLE
41194: EQUAL
41195: IFTRUE 41241
41197: LD_INT 19
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41241
41203: LD_INT 22
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41241
41209: LD_INT 20
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41241
41215: LD_INT 21
41217: DOUBLE
41218: EQUAL
41219: IFTRUE 41241
41221: LD_INT 23
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41241
41227: LD_INT 24
41229: DOUBLE
41230: EQUAL
41231: IFTRUE 41241
41233: LD_INT 25
41235: DOUBLE
41236: EQUAL
41237: IFTRUE 41241
41239: GO 41297
41241: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41242: LD_ADDR_VAR 0 9
41246: PUSH
41247: LD_VAR 0 35
41251: PUSH
41252: LD_VAR 0 36
41256: PUSH
41257: LD_VAR 0 37
41261: PUSH
41262: LD_VAR 0 38
41266: PUSH
41267: LD_VAR 0 39
41271: PUSH
41272: LD_VAR 0 40
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: PUSH
41285: LD_VAR 0 4
41289: PUSH
41290: LD_INT 1
41292: PLUS
41293: ARRAY
41294: ST_TO_ADDR
41295: GO 41662
41297: LD_INT 6
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41353
41303: LD_INT 7
41305: DOUBLE
41306: EQUAL
41307: IFTRUE 41353
41309: LD_INT 8
41311: DOUBLE
41312: EQUAL
41313: IFTRUE 41353
41315: LD_INT 13
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41353
41321: LD_INT 12
41323: DOUBLE
41324: EQUAL
41325: IFTRUE 41353
41327: LD_INT 15
41329: DOUBLE
41330: EQUAL
41331: IFTRUE 41353
41333: LD_INT 11
41335: DOUBLE
41336: EQUAL
41337: IFTRUE 41353
41339: LD_INT 14
41341: DOUBLE
41342: EQUAL
41343: IFTRUE 41353
41345: LD_INT 10
41347: DOUBLE
41348: EQUAL
41349: IFTRUE 41353
41351: GO 41409
41353: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41354: LD_ADDR_VAR 0 9
41358: PUSH
41359: LD_VAR 0 41
41363: PUSH
41364: LD_VAR 0 42
41368: PUSH
41369: LD_VAR 0 43
41373: PUSH
41374: LD_VAR 0 44
41378: PUSH
41379: LD_VAR 0 45
41383: PUSH
41384: LD_VAR 0 46
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: PUSH
41397: LD_VAR 0 4
41401: PUSH
41402: LD_INT 1
41404: PLUS
41405: ARRAY
41406: ST_TO_ADDR
41407: GO 41662
41409: LD_INT 36
41411: DOUBLE
41412: EQUAL
41413: IFTRUE 41417
41415: GO 41473
41417: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41418: LD_ADDR_VAR 0 9
41422: PUSH
41423: LD_VAR 0 47
41427: PUSH
41428: LD_VAR 0 48
41432: PUSH
41433: LD_VAR 0 49
41437: PUSH
41438: LD_VAR 0 50
41442: PUSH
41443: LD_VAR 0 51
41447: PUSH
41448: LD_VAR 0 52
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: PUSH
41461: LD_VAR 0 4
41465: PUSH
41466: LD_INT 1
41468: PLUS
41469: ARRAY
41470: ST_TO_ADDR
41471: GO 41662
41473: LD_INT 4
41475: DOUBLE
41476: EQUAL
41477: IFTRUE 41499
41479: LD_INT 5
41481: DOUBLE
41482: EQUAL
41483: IFTRUE 41499
41485: LD_INT 34
41487: DOUBLE
41488: EQUAL
41489: IFTRUE 41499
41491: LD_INT 37
41493: DOUBLE
41494: EQUAL
41495: IFTRUE 41499
41497: GO 41555
41499: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41500: LD_ADDR_VAR 0 9
41504: PUSH
41505: LD_VAR 0 53
41509: PUSH
41510: LD_VAR 0 54
41514: PUSH
41515: LD_VAR 0 55
41519: PUSH
41520: LD_VAR 0 56
41524: PUSH
41525: LD_VAR 0 57
41529: PUSH
41530: LD_VAR 0 58
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: PUSH
41543: LD_VAR 0 4
41547: PUSH
41548: LD_INT 1
41550: PLUS
41551: ARRAY
41552: ST_TO_ADDR
41553: GO 41662
41555: LD_INT 31
41557: DOUBLE
41558: EQUAL
41559: IFTRUE 41605
41561: LD_INT 32
41563: DOUBLE
41564: EQUAL
41565: IFTRUE 41605
41567: LD_INT 33
41569: DOUBLE
41570: EQUAL
41571: IFTRUE 41605
41573: LD_INT 27
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41605
41579: LD_INT 26
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41605
41585: LD_INT 28
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41605
41591: LD_INT 29
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41605
41597: LD_INT 30
41599: DOUBLE
41600: EQUAL
41601: IFTRUE 41605
41603: GO 41661
41605: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: LD_VAR 0 59
41615: PUSH
41616: LD_VAR 0 60
41620: PUSH
41621: LD_VAR 0 61
41625: PUSH
41626: LD_VAR 0 62
41630: PUSH
41631: LD_VAR 0 63
41635: PUSH
41636: LD_VAR 0 64
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: PUSH
41649: LD_VAR 0 4
41653: PUSH
41654: LD_INT 1
41656: PLUS
41657: ARRAY
41658: ST_TO_ADDR
41659: GO 41662
41661: POP
// temp_list2 = [ ] ;
41662: LD_ADDR_VAR 0 10
41666: PUSH
41667: EMPTY
41668: ST_TO_ADDR
// for i in temp_list do
41669: LD_ADDR_VAR 0 8
41673: PUSH
41674: LD_VAR 0 9
41678: PUSH
41679: FOR_IN
41680: IFFALSE 41732
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41682: LD_ADDR_VAR 0 10
41686: PUSH
41687: LD_VAR 0 10
41691: PUSH
41692: LD_VAR 0 8
41696: PUSH
41697: LD_INT 1
41699: ARRAY
41700: PUSH
41701: LD_VAR 0 2
41705: PLUS
41706: PUSH
41707: LD_VAR 0 8
41711: PUSH
41712: LD_INT 2
41714: ARRAY
41715: PUSH
41716: LD_VAR 0 3
41720: PLUS
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: EMPTY
41727: LIST
41728: ADD
41729: ST_TO_ADDR
41730: GO 41679
41732: POP
41733: POP
// result = temp_list2 ;
41734: LD_ADDR_VAR 0 7
41738: PUSH
41739: LD_VAR 0 10
41743: ST_TO_ADDR
// end ;
41744: LD_VAR 0 7
41748: RET
// export function EnemyInRange ( unit , dist ) ; begin
41749: LD_INT 0
41751: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41752: LD_ADDR_VAR 0 3
41756: PUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: CALL_OW 255
41766: PPUSH
41767: LD_VAR 0 1
41771: PPUSH
41772: CALL_OW 250
41776: PPUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: CALL_OW 251
41786: PPUSH
41787: LD_VAR 0 2
41791: PPUSH
41792: CALL 15122 0 4
41796: PUSH
41797: LD_INT 4
41799: ARRAY
41800: ST_TO_ADDR
// end ;
41801: LD_VAR 0 3
41805: RET
// export function PlayerSeeMe ( unit ) ; begin
41806: LD_INT 0
41808: PPUSH
// result := See ( your_side , unit ) ;
41809: LD_ADDR_VAR 0 2
41813: PUSH
41814: LD_OWVAR 2
41818: PPUSH
41819: LD_VAR 0 1
41823: PPUSH
41824: CALL_OW 292
41828: ST_TO_ADDR
// end ;
41829: LD_VAR 0 2
41833: RET
// export function ReverseDir ( unit ) ; begin
41834: LD_INT 0
41836: PPUSH
// if not unit then
41837: LD_VAR 0 1
41841: NOT
41842: IFFALSE 41846
// exit ;
41844: GO 41869
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41846: LD_ADDR_VAR 0 2
41850: PUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 254
41860: PUSH
41861: LD_INT 3
41863: PLUS
41864: PUSH
41865: LD_INT 6
41867: MOD
41868: ST_TO_ADDR
// end ;
41869: LD_VAR 0 2
41873: RET
// export function ReverseArray ( array ) ; var i ; begin
41874: LD_INT 0
41876: PPUSH
41877: PPUSH
// if not array then
41878: LD_VAR 0 1
41882: NOT
41883: IFFALSE 41887
// exit ;
41885: GO 41942
// result := [ ] ;
41887: LD_ADDR_VAR 0 2
41891: PUSH
41892: EMPTY
41893: ST_TO_ADDR
// for i := array downto 1 do
41894: LD_ADDR_VAR 0 3
41898: PUSH
41899: DOUBLE
41900: LD_VAR 0 1
41904: INC
41905: ST_TO_ADDR
41906: LD_INT 1
41908: PUSH
41909: FOR_DOWNTO
41910: IFFALSE 41940
// result := Join ( result , array [ i ] ) ;
41912: LD_ADDR_VAR 0 2
41916: PUSH
41917: LD_VAR 0 2
41921: PPUSH
41922: LD_VAR 0 1
41926: PUSH
41927: LD_VAR 0 3
41931: ARRAY
41932: PPUSH
41933: CALL 46587 0 2
41937: ST_TO_ADDR
41938: GO 41909
41940: POP
41941: POP
// end ;
41942: LD_VAR 0 2
41946: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41947: LD_INT 0
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
// if not unit or not hexes then
41955: LD_VAR 0 1
41959: NOT
41960: PUSH
41961: LD_VAR 0 2
41965: NOT
41966: OR
41967: IFFALSE 41971
// exit ;
41969: GO 42094
// dist := 9999 ;
41971: LD_ADDR_VAR 0 5
41975: PUSH
41976: LD_INT 9999
41978: ST_TO_ADDR
// for i = 1 to hexes do
41979: LD_ADDR_VAR 0 4
41983: PUSH
41984: DOUBLE
41985: LD_INT 1
41987: DEC
41988: ST_TO_ADDR
41989: LD_VAR 0 2
41993: PUSH
41994: FOR_TO
41995: IFFALSE 42082
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41997: LD_ADDR_VAR 0 6
42001: PUSH
42002: LD_VAR 0 1
42006: PPUSH
42007: LD_VAR 0 2
42011: PUSH
42012: LD_VAR 0 4
42016: ARRAY
42017: PUSH
42018: LD_INT 1
42020: ARRAY
42021: PPUSH
42022: LD_VAR 0 2
42026: PUSH
42027: LD_VAR 0 4
42031: ARRAY
42032: PUSH
42033: LD_INT 2
42035: ARRAY
42036: PPUSH
42037: CALL_OW 297
42041: ST_TO_ADDR
// if tdist < dist then
42042: LD_VAR 0 6
42046: PUSH
42047: LD_VAR 0 5
42051: LESS
42052: IFFALSE 42080
// begin hex := hexes [ i ] ;
42054: LD_ADDR_VAR 0 8
42058: PUSH
42059: LD_VAR 0 2
42063: PUSH
42064: LD_VAR 0 4
42068: ARRAY
42069: ST_TO_ADDR
// dist := tdist ;
42070: LD_ADDR_VAR 0 5
42074: PUSH
42075: LD_VAR 0 6
42079: ST_TO_ADDR
// end ; end ;
42080: GO 41994
42082: POP
42083: POP
// result := hex ;
42084: LD_ADDR_VAR 0 3
42088: PUSH
42089: LD_VAR 0 8
42093: ST_TO_ADDR
// end ;
42094: LD_VAR 0 3
42098: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42099: LD_INT 0
42101: PPUSH
42102: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42103: LD_VAR 0 1
42107: NOT
42108: PUSH
42109: LD_VAR 0 1
42113: PUSH
42114: LD_INT 21
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 23
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PPUSH
42138: CALL_OW 69
42142: IN
42143: NOT
42144: OR
42145: IFFALSE 42149
// exit ;
42147: GO 42196
// for i = 1 to 3 do
42149: LD_ADDR_VAR 0 3
42153: PUSH
42154: DOUBLE
42155: LD_INT 1
42157: DEC
42158: ST_TO_ADDR
42159: LD_INT 3
42161: PUSH
42162: FOR_TO
42163: IFFALSE 42194
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42165: LD_VAR 0 1
42169: PPUSH
42170: CALL_OW 250
42174: PPUSH
42175: LD_VAR 0 1
42179: PPUSH
42180: CALL_OW 251
42184: PPUSH
42185: LD_INT 1
42187: PPUSH
42188: CALL_OW 453
42192: GO 42162
42194: POP
42195: POP
// end ;
42196: LD_VAR 0 2
42200: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42201: LD_INT 0
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
// if not unit or not enemy_unit then
42209: LD_VAR 0 1
42213: NOT
42214: PUSH
42215: LD_VAR 0 2
42219: NOT
42220: OR
42221: IFFALSE 42225
// exit ;
42223: GO 42692
// if GetLives ( i ) < 250 then
42225: LD_VAR 0 4
42229: PPUSH
42230: CALL_OW 256
42234: PUSH
42235: LD_INT 250
42237: LESS
42238: IFFALSE 42251
// begin ComAutodestruct ( i ) ;
42240: LD_VAR 0 4
42244: PPUSH
42245: CALL 42099 0 1
// exit ;
42249: GO 42692
// end ; x := GetX ( enemy_unit ) ;
42251: LD_ADDR_VAR 0 7
42255: PUSH
42256: LD_VAR 0 2
42260: PPUSH
42261: CALL_OW 250
42265: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42266: LD_ADDR_VAR 0 8
42270: PUSH
42271: LD_VAR 0 2
42275: PPUSH
42276: CALL_OW 251
42280: ST_TO_ADDR
// if not x or not y then
42281: LD_VAR 0 7
42285: NOT
42286: PUSH
42287: LD_VAR 0 8
42291: NOT
42292: OR
42293: IFFALSE 42297
// exit ;
42295: GO 42692
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42297: LD_ADDR_VAR 0 6
42301: PUSH
42302: LD_VAR 0 7
42306: PPUSH
42307: LD_INT 0
42309: PPUSH
42310: LD_INT 4
42312: PPUSH
42313: CALL_OW 272
42317: PUSH
42318: LD_VAR 0 8
42322: PPUSH
42323: LD_INT 0
42325: PPUSH
42326: LD_INT 4
42328: PPUSH
42329: CALL_OW 273
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_VAR 0 7
42342: PPUSH
42343: LD_INT 1
42345: PPUSH
42346: LD_INT 4
42348: PPUSH
42349: CALL_OW 272
42353: PUSH
42354: LD_VAR 0 8
42358: PPUSH
42359: LD_INT 1
42361: PPUSH
42362: LD_INT 4
42364: PPUSH
42365: CALL_OW 273
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_VAR 0 7
42378: PPUSH
42379: LD_INT 2
42381: PPUSH
42382: LD_INT 4
42384: PPUSH
42385: CALL_OW 272
42389: PUSH
42390: LD_VAR 0 8
42394: PPUSH
42395: LD_INT 2
42397: PPUSH
42398: LD_INT 4
42400: PPUSH
42401: CALL_OW 273
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_VAR 0 7
42414: PPUSH
42415: LD_INT 3
42417: PPUSH
42418: LD_INT 4
42420: PPUSH
42421: CALL_OW 272
42425: PUSH
42426: LD_VAR 0 8
42430: PPUSH
42431: LD_INT 3
42433: PPUSH
42434: LD_INT 4
42436: PPUSH
42437: CALL_OW 273
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_VAR 0 7
42450: PPUSH
42451: LD_INT 4
42453: PPUSH
42454: LD_INT 4
42456: PPUSH
42457: CALL_OW 272
42461: PUSH
42462: LD_VAR 0 8
42466: PPUSH
42467: LD_INT 4
42469: PPUSH
42470: LD_INT 4
42472: PPUSH
42473: CALL_OW 273
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_VAR 0 7
42486: PPUSH
42487: LD_INT 5
42489: PPUSH
42490: LD_INT 4
42492: PPUSH
42493: CALL_OW 272
42497: PUSH
42498: LD_VAR 0 8
42502: PPUSH
42503: LD_INT 5
42505: PPUSH
42506: LD_INT 4
42508: PPUSH
42509: CALL_OW 273
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: ST_TO_ADDR
// for i = tmp downto 1 do
42526: LD_ADDR_VAR 0 4
42530: PUSH
42531: DOUBLE
42532: LD_VAR 0 6
42536: INC
42537: ST_TO_ADDR
42538: LD_INT 1
42540: PUSH
42541: FOR_DOWNTO
42542: IFFALSE 42643
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42544: LD_VAR 0 6
42548: PUSH
42549: LD_VAR 0 4
42553: ARRAY
42554: PUSH
42555: LD_INT 1
42557: ARRAY
42558: PPUSH
42559: LD_VAR 0 6
42563: PUSH
42564: LD_VAR 0 4
42568: ARRAY
42569: PUSH
42570: LD_INT 2
42572: ARRAY
42573: PPUSH
42574: CALL_OW 488
42578: NOT
42579: PUSH
42580: LD_VAR 0 6
42584: PUSH
42585: LD_VAR 0 4
42589: ARRAY
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PPUSH
42595: LD_VAR 0 6
42599: PUSH
42600: LD_VAR 0 4
42604: ARRAY
42605: PUSH
42606: LD_INT 2
42608: ARRAY
42609: PPUSH
42610: CALL_OW 428
42614: PUSH
42615: LD_INT 0
42617: NONEQUAL
42618: OR
42619: IFFALSE 42641
// tmp := Delete ( tmp , i ) ;
42621: LD_ADDR_VAR 0 6
42625: PUSH
42626: LD_VAR 0 6
42630: PPUSH
42631: LD_VAR 0 4
42635: PPUSH
42636: CALL_OW 3
42640: ST_TO_ADDR
42641: GO 42541
42643: POP
42644: POP
// j := GetClosestHex ( unit , tmp ) ;
42645: LD_ADDR_VAR 0 5
42649: PUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: LD_VAR 0 6
42659: PPUSH
42660: CALL 41947 0 2
42664: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42665: LD_VAR 0 1
42669: PPUSH
42670: LD_VAR 0 5
42674: PUSH
42675: LD_INT 1
42677: ARRAY
42678: PPUSH
42679: LD_VAR 0 5
42683: PUSH
42684: LD_INT 2
42686: ARRAY
42687: PPUSH
42688: CALL_OW 111
// end ;
42692: LD_VAR 0 3
42696: RET
// export function PrepareApemanSoldier ( ) ; begin
42697: LD_INT 0
42699: PPUSH
// uc_nation := 0 ;
42700: LD_ADDR_OWVAR 21
42704: PUSH
42705: LD_INT 0
42707: ST_TO_ADDR
// hc_sex := sex_male ;
42708: LD_ADDR_OWVAR 27
42712: PUSH
42713: LD_INT 1
42715: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42716: LD_ADDR_OWVAR 28
42720: PUSH
42721: LD_INT 15
42723: ST_TO_ADDR
// hc_gallery :=  ;
42724: LD_ADDR_OWVAR 33
42728: PUSH
42729: LD_STRING 
42731: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42732: LD_ADDR_OWVAR 31
42736: PUSH
42737: LD_INT 0
42739: PPUSH
42740: LD_INT 3
42742: PPUSH
42743: CALL_OW 12
42747: PUSH
42748: LD_INT 0
42750: PPUSH
42751: LD_INT 3
42753: PPUSH
42754: CALL_OW 12
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// end ;
42771: LD_VAR 0 1
42775: RET
// export function PrepareApemanEngineer ( ) ; begin
42776: LD_INT 0
42778: PPUSH
// uc_nation := 0 ;
42779: LD_ADDR_OWVAR 21
42783: PUSH
42784: LD_INT 0
42786: ST_TO_ADDR
// hc_sex := sex_male ;
42787: LD_ADDR_OWVAR 27
42791: PUSH
42792: LD_INT 1
42794: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42795: LD_ADDR_OWVAR 28
42799: PUSH
42800: LD_INT 16
42802: ST_TO_ADDR
// hc_gallery :=  ;
42803: LD_ADDR_OWVAR 33
42807: PUSH
42808: LD_STRING 
42810: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42811: LD_ADDR_OWVAR 31
42815: PUSH
42816: LD_INT 0
42818: PPUSH
42819: LD_INT 3
42821: PPUSH
42822: CALL_OW 12
42826: PUSH
42827: LD_INT 0
42829: PPUSH
42830: LD_INT 3
42832: PPUSH
42833: CALL_OW 12
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// end ;
42850: LD_VAR 0 1
42854: RET
// export function PrepareApeman ( agressivity ) ; begin
42855: LD_INT 0
42857: PPUSH
// uc_side := 0 ;
42858: LD_ADDR_OWVAR 20
42862: PUSH
42863: LD_INT 0
42865: ST_TO_ADDR
// uc_nation := 0 ;
42866: LD_ADDR_OWVAR 21
42870: PUSH
42871: LD_INT 0
42873: ST_TO_ADDR
// hc_sex := sex_male ;
42874: LD_ADDR_OWVAR 27
42878: PUSH
42879: LD_INT 1
42881: ST_TO_ADDR
// hc_class := class_apeman ;
42882: LD_ADDR_OWVAR 28
42886: PUSH
42887: LD_INT 12
42889: ST_TO_ADDR
// hc_gallery :=  ;
42890: LD_ADDR_OWVAR 33
42894: PUSH
42895: LD_STRING 
42897: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42898: LD_ADDR_OWVAR 35
42902: PUSH
42903: LD_VAR 0 1
42907: NEG
42908: PPUSH
42909: LD_VAR 0 1
42913: PPUSH
42914: CALL_OW 12
42918: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42919: LD_ADDR_OWVAR 31
42923: PUSH
42924: LD_INT 0
42926: PPUSH
42927: LD_INT 3
42929: PPUSH
42930: CALL_OW 12
42934: PUSH
42935: LD_INT 0
42937: PPUSH
42938: LD_INT 3
42940: PPUSH
42941: CALL_OW 12
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: ST_TO_ADDR
// end ;
42958: LD_VAR 0 2
42962: RET
// export function PrepareTiger ( agressivity ) ; begin
42963: LD_INT 0
42965: PPUSH
// uc_side := 0 ;
42966: LD_ADDR_OWVAR 20
42970: PUSH
42971: LD_INT 0
42973: ST_TO_ADDR
// uc_nation := 0 ;
42974: LD_ADDR_OWVAR 21
42978: PUSH
42979: LD_INT 0
42981: ST_TO_ADDR
// hc_class := class_tiger ;
42982: LD_ADDR_OWVAR 28
42986: PUSH
42987: LD_INT 14
42989: ST_TO_ADDR
// hc_gallery :=  ;
42990: LD_ADDR_OWVAR 33
42994: PUSH
42995: LD_STRING 
42997: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42998: LD_ADDR_OWVAR 35
43002: PUSH
43003: LD_VAR 0 1
43007: NEG
43008: PPUSH
43009: LD_VAR 0 1
43013: PPUSH
43014: CALL_OW 12
43018: ST_TO_ADDR
// end ;
43019: LD_VAR 0 2
43023: RET
// export function PrepareEnchidna ( ) ; begin
43024: LD_INT 0
43026: PPUSH
// uc_side := 0 ;
43027: LD_ADDR_OWVAR 20
43031: PUSH
43032: LD_INT 0
43034: ST_TO_ADDR
// uc_nation := 0 ;
43035: LD_ADDR_OWVAR 21
43039: PUSH
43040: LD_INT 0
43042: ST_TO_ADDR
// hc_class := class_baggie ;
43043: LD_ADDR_OWVAR 28
43047: PUSH
43048: LD_INT 13
43050: ST_TO_ADDR
// hc_gallery :=  ;
43051: LD_ADDR_OWVAR 33
43055: PUSH
43056: LD_STRING 
43058: ST_TO_ADDR
// end ;
43059: LD_VAR 0 1
43063: RET
// export function PrepareFrog ( ) ; begin
43064: LD_INT 0
43066: PPUSH
// uc_side := 0 ;
43067: LD_ADDR_OWVAR 20
43071: PUSH
43072: LD_INT 0
43074: ST_TO_ADDR
// uc_nation := 0 ;
43075: LD_ADDR_OWVAR 21
43079: PUSH
43080: LD_INT 0
43082: ST_TO_ADDR
// hc_class := class_frog ;
43083: LD_ADDR_OWVAR 28
43087: PUSH
43088: LD_INT 19
43090: ST_TO_ADDR
// hc_gallery :=  ;
43091: LD_ADDR_OWVAR 33
43095: PUSH
43096: LD_STRING 
43098: ST_TO_ADDR
// end ;
43099: LD_VAR 0 1
43103: RET
// export function PrepareFish ( ) ; begin
43104: LD_INT 0
43106: PPUSH
// uc_side := 0 ;
43107: LD_ADDR_OWVAR 20
43111: PUSH
43112: LD_INT 0
43114: ST_TO_ADDR
// uc_nation := 0 ;
43115: LD_ADDR_OWVAR 21
43119: PUSH
43120: LD_INT 0
43122: ST_TO_ADDR
// hc_class := class_fish ;
43123: LD_ADDR_OWVAR 28
43127: PUSH
43128: LD_INT 20
43130: ST_TO_ADDR
// hc_gallery :=  ;
43131: LD_ADDR_OWVAR 33
43135: PUSH
43136: LD_STRING 
43138: ST_TO_ADDR
// end ;
43139: LD_VAR 0 1
43143: RET
// export function PrepareBird ( ) ; begin
43144: LD_INT 0
43146: PPUSH
// uc_side := 0 ;
43147: LD_ADDR_OWVAR 20
43151: PUSH
43152: LD_INT 0
43154: ST_TO_ADDR
// uc_nation := 0 ;
43155: LD_ADDR_OWVAR 21
43159: PUSH
43160: LD_INT 0
43162: ST_TO_ADDR
// hc_class := class_phororhacos ;
43163: LD_ADDR_OWVAR 28
43167: PUSH
43168: LD_INT 18
43170: ST_TO_ADDR
// hc_gallery :=  ;
43171: LD_ADDR_OWVAR 33
43175: PUSH
43176: LD_STRING 
43178: ST_TO_ADDR
// end ;
43179: LD_VAR 0 1
43183: RET
// export function PrepareHorse ( ) ; begin
43184: LD_INT 0
43186: PPUSH
// uc_side := 0 ;
43187: LD_ADDR_OWVAR 20
43191: PUSH
43192: LD_INT 0
43194: ST_TO_ADDR
// uc_nation := 0 ;
43195: LD_ADDR_OWVAR 21
43199: PUSH
43200: LD_INT 0
43202: ST_TO_ADDR
// hc_class := class_horse ;
43203: LD_ADDR_OWVAR 28
43207: PUSH
43208: LD_INT 21
43210: ST_TO_ADDR
// hc_gallery :=  ;
43211: LD_ADDR_OWVAR 33
43215: PUSH
43216: LD_STRING 
43218: ST_TO_ADDR
// end ;
43219: LD_VAR 0 1
43223: RET
// export function PrepareMastodont ( ) ; begin
43224: LD_INT 0
43226: PPUSH
// uc_side := 0 ;
43227: LD_ADDR_OWVAR 20
43231: PUSH
43232: LD_INT 0
43234: ST_TO_ADDR
// uc_nation := 0 ;
43235: LD_ADDR_OWVAR 21
43239: PUSH
43240: LD_INT 0
43242: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43243: LD_ADDR_OWVAR 37
43247: PUSH
43248: LD_INT 31
43250: ST_TO_ADDR
// vc_control := control_rider ;
43251: LD_ADDR_OWVAR 38
43255: PUSH
43256: LD_INT 4
43258: ST_TO_ADDR
// end ;
43259: LD_VAR 0 1
43263: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43264: LD_INT 0
43266: PPUSH
43267: PPUSH
43268: PPUSH
// uc_side = 0 ;
43269: LD_ADDR_OWVAR 20
43273: PUSH
43274: LD_INT 0
43276: ST_TO_ADDR
// uc_nation = 0 ;
43277: LD_ADDR_OWVAR 21
43281: PUSH
43282: LD_INT 0
43284: ST_TO_ADDR
// InitHc_All ( ) ;
43285: CALL_OW 584
// InitVc ;
43289: CALL_OW 20
// if mastodonts then
43293: LD_VAR 0 6
43297: IFFALSE 43364
// for i = 1 to mastodonts do
43299: LD_ADDR_VAR 0 11
43303: PUSH
43304: DOUBLE
43305: LD_INT 1
43307: DEC
43308: ST_TO_ADDR
43309: LD_VAR 0 6
43313: PUSH
43314: FOR_TO
43315: IFFALSE 43362
// begin vc_chassis := 31 ;
43317: LD_ADDR_OWVAR 37
43321: PUSH
43322: LD_INT 31
43324: ST_TO_ADDR
// vc_control := control_rider ;
43325: LD_ADDR_OWVAR 38
43329: PUSH
43330: LD_INT 4
43332: ST_TO_ADDR
// animal := CreateVehicle ;
43333: LD_ADDR_VAR 0 12
43337: PUSH
43338: CALL_OW 45
43342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43343: LD_VAR 0 12
43347: PPUSH
43348: LD_VAR 0 8
43352: PPUSH
43353: LD_INT 0
43355: PPUSH
43356: CALL 45492 0 3
// end ;
43360: GO 43314
43362: POP
43363: POP
// if horses then
43364: LD_VAR 0 5
43368: IFFALSE 43435
// for i = 1 to horses do
43370: LD_ADDR_VAR 0 11
43374: PUSH
43375: DOUBLE
43376: LD_INT 1
43378: DEC
43379: ST_TO_ADDR
43380: LD_VAR 0 5
43384: PUSH
43385: FOR_TO
43386: IFFALSE 43433
// begin hc_class := 21 ;
43388: LD_ADDR_OWVAR 28
43392: PUSH
43393: LD_INT 21
43395: ST_TO_ADDR
// hc_gallery :=  ;
43396: LD_ADDR_OWVAR 33
43400: PUSH
43401: LD_STRING 
43403: ST_TO_ADDR
// animal := CreateHuman ;
43404: LD_ADDR_VAR 0 12
43408: PUSH
43409: CALL_OW 44
43413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43414: LD_VAR 0 12
43418: PPUSH
43419: LD_VAR 0 8
43423: PPUSH
43424: LD_INT 0
43426: PPUSH
43427: CALL 45492 0 3
// end ;
43431: GO 43385
43433: POP
43434: POP
// if birds then
43435: LD_VAR 0 1
43439: IFFALSE 43506
// for i = 1 to birds do
43441: LD_ADDR_VAR 0 11
43445: PUSH
43446: DOUBLE
43447: LD_INT 1
43449: DEC
43450: ST_TO_ADDR
43451: LD_VAR 0 1
43455: PUSH
43456: FOR_TO
43457: IFFALSE 43504
// begin hc_class := 18 ;
43459: LD_ADDR_OWVAR 28
43463: PUSH
43464: LD_INT 18
43466: ST_TO_ADDR
// hc_gallery =  ;
43467: LD_ADDR_OWVAR 33
43471: PUSH
43472: LD_STRING 
43474: ST_TO_ADDR
// animal := CreateHuman ;
43475: LD_ADDR_VAR 0 12
43479: PUSH
43480: CALL_OW 44
43484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43485: LD_VAR 0 12
43489: PPUSH
43490: LD_VAR 0 8
43494: PPUSH
43495: LD_INT 0
43497: PPUSH
43498: CALL 45492 0 3
// end ;
43502: GO 43456
43504: POP
43505: POP
// if tigers then
43506: LD_VAR 0 2
43510: IFFALSE 43594
// for i = 1 to tigers do
43512: LD_ADDR_VAR 0 11
43516: PUSH
43517: DOUBLE
43518: LD_INT 1
43520: DEC
43521: ST_TO_ADDR
43522: LD_VAR 0 2
43526: PUSH
43527: FOR_TO
43528: IFFALSE 43592
// begin hc_class = class_tiger ;
43530: LD_ADDR_OWVAR 28
43534: PUSH
43535: LD_INT 14
43537: ST_TO_ADDR
// hc_gallery =  ;
43538: LD_ADDR_OWVAR 33
43542: PUSH
43543: LD_STRING 
43545: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43546: LD_ADDR_OWVAR 35
43550: PUSH
43551: LD_INT 7
43553: NEG
43554: PPUSH
43555: LD_INT 7
43557: PPUSH
43558: CALL_OW 12
43562: ST_TO_ADDR
// animal := CreateHuman ;
43563: LD_ADDR_VAR 0 12
43567: PUSH
43568: CALL_OW 44
43572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43573: LD_VAR 0 12
43577: PPUSH
43578: LD_VAR 0 8
43582: PPUSH
43583: LD_INT 0
43585: PPUSH
43586: CALL 45492 0 3
// end ;
43590: GO 43527
43592: POP
43593: POP
// if apemans then
43594: LD_VAR 0 3
43598: IFFALSE 43721
// for i = 1 to apemans do
43600: LD_ADDR_VAR 0 11
43604: PUSH
43605: DOUBLE
43606: LD_INT 1
43608: DEC
43609: ST_TO_ADDR
43610: LD_VAR 0 3
43614: PUSH
43615: FOR_TO
43616: IFFALSE 43719
// begin hc_class = class_apeman ;
43618: LD_ADDR_OWVAR 28
43622: PUSH
43623: LD_INT 12
43625: ST_TO_ADDR
// hc_gallery =  ;
43626: LD_ADDR_OWVAR 33
43630: PUSH
43631: LD_STRING 
43633: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43634: LD_ADDR_OWVAR 35
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PPUSH
43643: LD_INT 2
43645: PPUSH
43646: CALL_OW 12
43650: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43651: LD_ADDR_OWVAR 31
43655: PUSH
43656: LD_INT 1
43658: PPUSH
43659: LD_INT 3
43661: PPUSH
43662: CALL_OW 12
43666: PUSH
43667: LD_INT 1
43669: PPUSH
43670: LD_INT 3
43672: PPUSH
43673: CALL_OW 12
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
// animal := CreateHuman ;
43690: LD_ADDR_VAR 0 12
43694: PUSH
43695: CALL_OW 44
43699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43700: LD_VAR 0 12
43704: PPUSH
43705: LD_VAR 0 8
43709: PPUSH
43710: LD_INT 0
43712: PPUSH
43713: CALL 45492 0 3
// end ;
43717: GO 43615
43719: POP
43720: POP
// if enchidnas then
43721: LD_VAR 0 4
43725: IFFALSE 43792
// for i = 1 to enchidnas do
43727: LD_ADDR_VAR 0 11
43731: PUSH
43732: DOUBLE
43733: LD_INT 1
43735: DEC
43736: ST_TO_ADDR
43737: LD_VAR 0 4
43741: PUSH
43742: FOR_TO
43743: IFFALSE 43790
// begin hc_class = 13 ;
43745: LD_ADDR_OWVAR 28
43749: PUSH
43750: LD_INT 13
43752: ST_TO_ADDR
// hc_gallery =  ;
43753: LD_ADDR_OWVAR 33
43757: PUSH
43758: LD_STRING 
43760: ST_TO_ADDR
// animal := CreateHuman ;
43761: LD_ADDR_VAR 0 12
43765: PUSH
43766: CALL_OW 44
43770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43771: LD_VAR 0 12
43775: PPUSH
43776: LD_VAR 0 8
43780: PPUSH
43781: LD_INT 0
43783: PPUSH
43784: CALL 45492 0 3
// end ;
43788: GO 43742
43790: POP
43791: POP
// if fishes then
43792: LD_VAR 0 7
43796: IFFALSE 43863
// for i = 1 to fishes do
43798: LD_ADDR_VAR 0 11
43802: PUSH
43803: DOUBLE
43804: LD_INT 1
43806: DEC
43807: ST_TO_ADDR
43808: LD_VAR 0 7
43812: PUSH
43813: FOR_TO
43814: IFFALSE 43861
// begin hc_class = 20 ;
43816: LD_ADDR_OWVAR 28
43820: PUSH
43821: LD_INT 20
43823: ST_TO_ADDR
// hc_gallery =  ;
43824: LD_ADDR_OWVAR 33
43828: PUSH
43829: LD_STRING 
43831: ST_TO_ADDR
// animal := CreateHuman ;
43832: LD_ADDR_VAR 0 12
43836: PUSH
43837: CALL_OW 44
43841: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43842: LD_VAR 0 12
43846: PPUSH
43847: LD_VAR 0 9
43851: PPUSH
43852: LD_INT 0
43854: PPUSH
43855: CALL 45492 0 3
// end ;
43859: GO 43813
43861: POP
43862: POP
// end ;
43863: LD_VAR 0 10
43867: RET
// export function WantHeal ( sci , unit ) ; begin
43868: LD_INT 0
43870: PPUSH
// if GetTaskList ( sci ) > 0 then
43871: LD_VAR 0 1
43875: PPUSH
43876: CALL_OW 437
43880: PUSH
43881: LD_INT 0
43883: GREATER
43884: IFFALSE 43954
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43886: LD_VAR 0 1
43890: PPUSH
43891: CALL_OW 437
43895: PUSH
43896: LD_INT 1
43898: ARRAY
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PUSH
43904: LD_STRING l
43906: EQUAL
43907: PUSH
43908: LD_VAR 0 1
43912: PPUSH
43913: CALL_OW 437
43917: PUSH
43918: LD_INT 1
43920: ARRAY
43921: PUSH
43922: LD_INT 4
43924: ARRAY
43925: PUSH
43926: LD_VAR 0 2
43930: EQUAL
43931: AND
43932: IFFALSE 43944
// result := true else
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_INT 1
43941: ST_TO_ADDR
43942: GO 43952
// result := false ;
43944: LD_ADDR_VAR 0 3
43948: PUSH
43949: LD_INT 0
43951: ST_TO_ADDR
// end else
43952: GO 43962
// result := false ;
43954: LD_ADDR_VAR 0 3
43958: PUSH
43959: LD_INT 0
43961: ST_TO_ADDR
// end ;
43962: LD_VAR 0 3
43966: RET
// export function HealTarget ( sci ) ; begin
43967: LD_INT 0
43969: PPUSH
// if not sci then
43970: LD_VAR 0 1
43974: NOT
43975: IFFALSE 43979
// exit ;
43977: GO 44044
// result := 0 ;
43979: LD_ADDR_VAR 0 2
43983: PUSH
43984: LD_INT 0
43986: ST_TO_ADDR
// if GetTaskList ( sci ) then
43987: LD_VAR 0 1
43991: PPUSH
43992: CALL_OW 437
43996: IFFALSE 44044
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43998: LD_VAR 0 1
44002: PPUSH
44003: CALL_OW 437
44007: PUSH
44008: LD_INT 1
44010: ARRAY
44011: PUSH
44012: LD_INT 1
44014: ARRAY
44015: PUSH
44016: LD_STRING l
44018: EQUAL
44019: IFFALSE 44044
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44021: LD_ADDR_VAR 0 2
44025: PUSH
44026: LD_VAR 0 1
44030: PPUSH
44031: CALL_OW 437
44035: PUSH
44036: LD_INT 1
44038: ARRAY
44039: PUSH
44040: LD_INT 4
44042: ARRAY
44043: ST_TO_ADDR
// end ;
44044: LD_VAR 0 2
44048: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44049: LD_INT 0
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
// if not base_units then
44055: LD_VAR 0 1
44059: NOT
44060: IFFALSE 44064
// exit ;
44062: GO 44151
// result := false ;
44064: LD_ADDR_VAR 0 2
44068: PUSH
44069: LD_INT 0
44071: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44072: LD_ADDR_VAR 0 5
44076: PUSH
44077: LD_VAR 0 1
44081: PPUSH
44082: LD_INT 21
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PPUSH
44092: CALL_OW 72
44096: ST_TO_ADDR
// if not tmp then
44097: LD_VAR 0 5
44101: NOT
44102: IFFALSE 44106
// exit ;
44104: GO 44151
// for i in tmp do
44106: LD_ADDR_VAR 0 3
44110: PUSH
44111: LD_VAR 0 5
44115: PUSH
44116: FOR_IN
44117: IFFALSE 44149
// begin result := EnemyInRange ( i , 22 ) ;
44119: LD_ADDR_VAR 0 2
44123: PUSH
44124: LD_VAR 0 3
44128: PPUSH
44129: LD_INT 22
44131: PPUSH
44132: CALL 41749 0 2
44136: ST_TO_ADDR
// if result then
44137: LD_VAR 0 2
44141: IFFALSE 44147
// exit ;
44143: POP
44144: POP
44145: GO 44151
// end ;
44147: GO 44116
44149: POP
44150: POP
// end ;
44151: LD_VAR 0 2
44155: RET
// export function FilterByTag ( units , tag ) ; begin
44156: LD_INT 0
44158: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44159: LD_ADDR_VAR 0 3
44163: PUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: LD_INT 120
44171: PUSH
44172: LD_VAR 0 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PPUSH
44181: CALL_OW 72
44185: ST_TO_ADDR
// end ;
44186: LD_VAR 0 3
44190: RET
// export function IsDriver ( un ) ; begin
44191: LD_INT 0
44193: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44194: LD_ADDR_VAR 0 2
44198: PUSH
44199: LD_VAR 0 1
44203: PUSH
44204: LD_INT 55
44206: PUSH
44207: EMPTY
44208: LIST
44209: PPUSH
44210: CALL_OW 69
44214: IN
44215: ST_TO_ADDR
// end ;
44216: LD_VAR 0 2
44220: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44221: LD_INT 0
44223: PPUSH
44224: PPUSH
// list := [ ] ;
44225: LD_ADDR_VAR 0 5
44229: PUSH
44230: EMPTY
44231: ST_TO_ADDR
// case d of 0 :
44232: LD_VAR 0 3
44236: PUSH
44237: LD_INT 0
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44245
44243: GO 44378
44245: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44246: LD_ADDR_VAR 0 5
44250: PUSH
44251: LD_VAR 0 1
44255: PUSH
44256: LD_INT 4
44258: MINUS
44259: PUSH
44260: LD_VAR 0 2
44264: PUSH
44265: LD_INT 4
44267: MINUS
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: PUSH
44277: LD_VAR 0 1
44281: PUSH
44282: LD_INT 3
44284: MINUS
44285: PUSH
44286: LD_VAR 0 2
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: PUSH
44299: LD_VAR 0 1
44303: PUSH
44304: LD_INT 4
44306: PLUS
44307: PUSH
44308: LD_VAR 0 2
44312: PUSH
44313: LD_INT 4
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: PUSH
44321: LD_VAR 0 1
44325: PUSH
44326: LD_INT 3
44328: PLUS
44329: PUSH
44330: LD_VAR 0 2
44334: PUSH
44335: LD_INT 3
44337: PLUS
44338: PUSH
44339: LD_INT 5
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: PUSH
44347: LD_VAR 0 1
44351: PUSH
44352: LD_VAR 0 2
44356: PUSH
44357: LD_INT 4
44359: PLUS
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: ST_TO_ADDR
// end ; 1 :
44376: GO 45076
44378: LD_INT 1
44380: DOUBLE
44381: EQUAL
44382: IFTRUE 44386
44384: GO 44519
44386: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44387: LD_ADDR_VAR 0 5
44391: PUSH
44392: LD_VAR 0 1
44396: PUSH
44397: LD_VAR 0 2
44401: PUSH
44402: LD_INT 4
44404: MINUS
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: PUSH
44414: LD_VAR 0 1
44418: PUSH
44419: LD_INT 3
44421: MINUS
44422: PUSH
44423: LD_VAR 0 2
44427: PUSH
44428: LD_INT 3
44430: MINUS
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: PUSH
44440: LD_VAR 0 1
44444: PUSH
44445: LD_INT 4
44447: MINUS
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: PUSH
44462: LD_VAR 0 1
44466: PUSH
44467: LD_VAR 0 2
44471: PUSH
44472: LD_INT 3
44474: PLUS
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: PUSH
44484: LD_VAR 0 1
44488: PUSH
44489: LD_INT 4
44491: PLUS
44492: PUSH
44493: LD_VAR 0 2
44497: PUSH
44498: LD_INT 4
44500: PLUS
44501: PUSH
44502: LD_INT 5
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// end ; 2 :
44517: GO 45076
44519: LD_INT 2
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44656
44527: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44528: LD_ADDR_VAR 0 5
44532: PUSH
44533: LD_VAR 0 1
44537: PUSH
44538: LD_VAR 0 2
44542: PUSH
44543: LD_INT 3
44545: MINUS
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: LIST
44554: PUSH
44555: LD_VAR 0 1
44559: PUSH
44560: LD_INT 4
44562: PLUS
44563: PUSH
44564: LD_VAR 0 2
44568: PUSH
44569: LD_INT 4
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: PUSH
44577: LD_VAR 0 1
44581: PUSH
44582: LD_VAR 0 2
44586: PUSH
44587: LD_INT 4
44589: PLUS
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: PUSH
44599: LD_VAR 0 1
44603: PUSH
44604: LD_INT 3
44606: MINUS
44607: PUSH
44608: LD_VAR 0 2
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: PUSH
44621: LD_VAR 0 1
44625: PUSH
44626: LD_INT 4
44628: MINUS
44629: PUSH
44630: LD_VAR 0 2
44634: PUSH
44635: LD_INT 4
44637: MINUS
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: ST_TO_ADDR
// end ; 3 :
44654: GO 45076
44656: LD_INT 3
44658: DOUBLE
44659: EQUAL
44660: IFTRUE 44664
44662: GO 44797
44664: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44665: LD_ADDR_VAR 0 5
44669: PUSH
44670: LD_VAR 0 1
44674: PUSH
44675: LD_INT 3
44677: PLUS
44678: PUSH
44679: LD_VAR 0 2
44683: PUSH
44684: LD_INT 4
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: LD_VAR 0 1
44696: PUSH
44697: LD_INT 4
44699: PLUS
44700: PUSH
44701: LD_VAR 0 2
44705: PUSH
44706: LD_INT 4
44708: PLUS
44709: PUSH
44710: LD_INT 5
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: PUSH
44718: LD_VAR 0 1
44722: PUSH
44723: LD_INT 4
44725: MINUS
44726: PUSH
44727: LD_VAR 0 2
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: PUSH
44740: LD_VAR 0 1
44744: PUSH
44745: LD_VAR 0 2
44749: PUSH
44750: LD_INT 4
44752: MINUS
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: PUSH
44762: LD_VAR 0 1
44766: PUSH
44767: LD_INT 3
44769: MINUS
44770: PUSH
44771: LD_VAR 0 2
44775: PUSH
44776: LD_INT 3
44778: MINUS
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
// end ; 4 :
44795: GO 45076
44797: LD_INT 4
44799: DOUBLE
44800: EQUAL
44801: IFTRUE 44805
44803: GO 44938
44805: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44806: LD_ADDR_VAR 0 5
44810: PUSH
44811: LD_VAR 0 1
44815: PUSH
44816: LD_VAR 0 2
44820: PUSH
44821: LD_INT 4
44823: PLUS
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: PUSH
44833: LD_VAR 0 1
44837: PUSH
44838: LD_INT 3
44840: PLUS
44841: PUSH
44842: LD_VAR 0 2
44846: PUSH
44847: LD_INT 3
44849: PLUS
44850: PUSH
44851: LD_INT 5
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: PUSH
44859: LD_VAR 0 1
44863: PUSH
44864: LD_INT 4
44866: PLUS
44867: PUSH
44868: LD_VAR 0 2
44872: PUSH
44873: LD_INT 4
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: PUSH
44881: LD_VAR 0 1
44885: PUSH
44886: LD_VAR 0 2
44890: PUSH
44891: LD_INT 3
44893: MINUS
44894: PUSH
44895: LD_INT 3
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: PUSH
44903: LD_VAR 0 1
44907: PUSH
44908: LD_INT 4
44910: MINUS
44911: PUSH
44912: LD_VAR 0 2
44916: PUSH
44917: LD_INT 4
44919: MINUS
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// end ; 5 :
44936: GO 45076
44938: LD_INT 5
44940: DOUBLE
44941: EQUAL
44942: IFTRUE 44946
44944: GO 45075
44946: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44947: LD_ADDR_VAR 0 5
44951: PUSH
44952: LD_VAR 0 1
44956: PUSH
44957: LD_INT 4
44959: MINUS
44960: PUSH
44961: LD_VAR 0 2
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: PUSH
44974: LD_VAR 0 1
44978: PUSH
44979: LD_VAR 0 2
44983: PUSH
44984: LD_INT 4
44986: MINUS
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: PUSH
44996: LD_VAR 0 1
45000: PUSH
45001: LD_INT 4
45003: PLUS
45004: PUSH
45005: LD_VAR 0 2
45009: PUSH
45010: LD_INT 4
45012: PLUS
45013: PUSH
45014: LD_INT 5
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: PUSH
45022: LD_VAR 0 1
45026: PUSH
45027: LD_INT 3
45029: PLUS
45030: PUSH
45031: LD_VAR 0 2
45035: PUSH
45036: LD_INT 4
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: PUSH
45044: LD_VAR 0 1
45048: PUSH
45049: LD_VAR 0 2
45053: PUSH
45054: LD_INT 3
45056: PLUS
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// end ; end ;
45073: GO 45076
45075: POP
// result := list ;
45076: LD_ADDR_VAR 0 4
45080: PUSH
45081: LD_VAR 0 5
45085: ST_TO_ADDR
// end ;
45086: LD_VAR 0 4
45090: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45091: LD_INT 0
45093: PPUSH
45094: PPUSH
45095: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45096: LD_VAR 0 1
45100: NOT
45101: PUSH
45102: LD_VAR 0 2
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 3
45115: PUSH
45116: LD_INT 4
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: IN
45125: NOT
45126: OR
45127: IFFALSE 45131
// exit ;
45129: GO 45214
// tmp := [ ] ;
45131: LD_ADDR_VAR 0 5
45135: PUSH
45136: EMPTY
45137: ST_TO_ADDR
// for i in units do
45138: LD_ADDR_VAR 0 4
45142: PUSH
45143: LD_VAR 0 1
45147: PUSH
45148: FOR_IN
45149: IFFALSE 45183
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45151: LD_ADDR_VAR 0 5
45155: PUSH
45156: LD_VAR 0 5
45160: PPUSH
45161: LD_VAR 0 4
45165: PPUSH
45166: LD_VAR 0 2
45170: PPUSH
45171: CALL_OW 259
45175: PPUSH
45176: CALL 46587 0 2
45180: ST_TO_ADDR
45181: GO 45148
45183: POP
45184: POP
// if not tmp then
45185: LD_VAR 0 5
45189: NOT
45190: IFFALSE 45194
// exit ;
45192: GO 45214
// result := SortListByListDesc ( units , tmp ) ;
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: LD_VAR 0 1
45203: PPUSH
45204: LD_VAR 0 5
45208: PPUSH
45209: CALL_OW 77
45213: ST_TO_ADDR
// end ;
45214: LD_VAR 0 3
45218: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45219: LD_INT 0
45221: PPUSH
45222: PPUSH
45223: PPUSH
// result := false ;
45224: LD_ADDR_VAR 0 3
45228: PUSH
45229: LD_INT 0
45231: ST_TO_ADDR
// if not building then
45232: LD_VAR 0 2
45236: NOT
45237: IFFALSE 45241
// exit ;
45239: GO 45379
// x := GetX ( building ) ;
45241: LD_ADDR_VAR 0 4
45245: PUSH
45246: LD_VAR 0 2
45250: PPUSH
45251: CALL_OW 250
45255: ST_TO_ADDR
// y := GetY ( building ) ;
45256: LD_ADDR_VAR 0 5
45260: PUSH
45261: LD_VAR 0 2
45265: PPUSH
45266: CALL_OW 251
45270: ST_TO_ADDR
// if not x or not y then
45271: LD_VAR 0 4
45275: NOT
45276: PUSH
45277: LD_VAR 0 5
45281: NOT
45282: OR
45283: IFFALSE 45287
// exit ;
45285: GO 45379
// if GetTaskList ( unit ) then
45287: LD_VAR 0 1
45291: PPUSH
45292: CALL_OW 437
45296: IFFALSE 45379
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45298: LD_STRING e
45300: PUSH
45301: LD_VAR 0 1
45305: PPUSH
45306: CALL_OW 437
45310: PUSH
45311: LD_INT 1
45313: ARRAY
45314: PUSH
45315: LD_INT 1
45317: ARRAY
45318: EQUAL
45319: PUSH
45320: LD_VAR 0 4
45324: PUSH
45325: LD_VAR 0 1
45329: PPUSH
45330: CALL_OW 437
45334: PUSH
45335: LD_INT 1
45337: ARRAY
45338: PUSH
45339: LD_INT 2
45341: ARRAY
45342: EQUAL
45343: AND
45344: PUSH
45345: LD_VAR 0 5
45349: PUSH
45350: LD_VAR 0 1
45354: PPUSH
45355: CALL_OW 437
45359: PUSH
45360: LD_INT 1
45362: ARRAY
45363: PUSH
45364: LD_INT 3
45366: ARRAY
45367: EQUAL
45368: AND
45369: IFFALSE 45379
// result := true end ;
45371: LD_ADDR_VAR 0 3
45375: PUSH
45376: LD_INT 1
45378: ST_TO_ADDR
// end ;
45379: LD_VAR 0 3
45383: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45384: LD_INT 0
45386: PPUSH
// result := false ;
45387: LD_ADDR_VAR 0 4
45391: PUSH
45392: LD_INT 0
45394: ST_TO_ADDR
// if GetTaskList ( unit ) then
45395: LD_VAR 0 1
45399: PPUSH
45400: CALL_OW 437
45404: IFFALSE 45487
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45406: LD_STRING M
45408: PUSH
45409: LD_VAR 0 1
45413: PPUSH
45414: CALL_OW 437
45418: PUSH
45419: LD_INT 1
45421: ARRAY
45422: PUSH
45423: LD_INT 1
45425: ARRAY
45426: EQUAL
45427: PUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_VAR 0 1
45437: PPUSH
45438: CALL_OW 437
45442: PUSH
45443: LD_INT 1
45445: ARRAY
45446: PUSH
45447: LD_INT 2
45449: ARRAY
45450: EQUAL
45451: AND
45452: PUSH
45453: LD_VAR 0 3
45457: PUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: CALL_OW 437
45467: PUSH
45468: LD_INT 1
45470: ARRAY
45471: PUSH
45472: LD_INT 3
45474: ARRAY
45475: EQUAL
45476: AND
45477: IFFALSE 45487
// result := true ;
45479: LD_ADDR_VAR 0 4
45483: PUSH
45484: LD_INT 1
45486: ST_TO_ADDR
// end ; end ;
45487: LD_VAR 0 4
45491: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45492: LD_INT 0
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
// if not unit or not area then
45498: LD_VAR 0 1
45502: NOT
45503: PUSH
45504: LD_VAR 0 2
45508: NOT
45509: OR
45510: IFFALSE 45514
// exit ;
45512: GO 45690
// tmp := AreaToList ( area , i ) ;
45514: LD_ADDR_VAR 0 6
45518: PUSH
45519: LD_VAR 0 2
45523: PPUSH
45524: LD_VAR 0 5
45528: PPUSH
45529: CALL_OW 517
45533: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45534: LD_ADDR_VAR 0 5
45538: PUSH
45539: DOUBLE
45540: LD_INT 1
45542: DEC
45543: ST_TO_ADDR
45544: LD_VAR 0 6
45548: PUSH
45549: LD_INT 1
45551: ARRAY
45552: PUSH
45553: FOR_TO
45554: IFFALSE 45688
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45556: LD_ADDR_VAR 0 7
45560: PUSH
45561: LD_VAR 0 6
45565: PUSH
45566: LD_INT 1
45568: ARRAY
45569: PUSH
45570: LD_VAR 0 5
45574: ARRAY
45575: PUSH
45576: LD_VAR 0 6
45580: PUSH
45581: LD_INT 2
45583: ARRAY
45584: PUSH
45585: LD_VAR 0 5
45589: ARRAY
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45595: LD_INT 92
45597: PUSH
45598: LD_VAR 0 7
45602: PUSH
45603: LD_INT 1
45605: ARRAY
45606: PUSH
45607: LD_VAR 0 7
45611: PUSH
45612: LD_INT 2
45614: ARRAY
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: PPUSH
45625: CALL_OW 69
45629: PUSH
45630: LD_INT 0
45632: EQUAL
45633: IFFALSE 45686
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45635: LD_VAR 0 1
45639: PPUSH
45640: LD_VAR 0 7
45644: PUSH
45645: LD_INT 1
45647: ARRAY
45648: PPUSH
45649: LD_VAR 0 7
45653: PUSH
45654: LD_INT 2
45656: ARRAY
45657: PPUSH
45658: LD_VAR 0 3
45662: PPUSH
45663: CALL_OW 48
// result := IsPlaced ( unit ) ;
45667: LD_ADDR_VAR 0 4
45671: PUSH
45672: LD_VAR 0 1
45676: PPUSH
45677: CALL_OW 305
45681: ST_TO_ADDR
// exit ;
45682: POP
45683: POP
45684: GO 45690
// end ; end ;
45686: GO 45553
45688: POP
45689: POP
// end ;
45690: LD_VAR 0 4
45694: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45695: LD_INT 0
45697: PPUSH
45698: PPUSH
45699: PPUSH
// if not side or side > 8 then
45700: LD_VAR 0 1
45704: NOT
45705: PUSH
45706: LD_VAR 0 1
45710: PUSH
45711: LD_INT 8
45713: GREATER
45714: OR
45715: IFFALSE 45719
// exit ;
45717: GO 45906
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45719: LD_ADDR_VAR 0 4
45723: PUSH
45724: LD_INT 22
45726: PUSH
45727: LD_VAR 0 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 21
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PPUSH
45750: CALL_OW 69
45754: ST_TO_ADDR
// if not tmp then
45755: LD_VAR 0 4
45759: NOT
45760: IFFALSE 45764
// exit ;
45762: GO 45906
// enable_addtolog := true ;
45764: LD_ADDR_OWVAR 81
45768: PUSH
45769: LD_INT 1
45771: ST_TO_ADDR
// AddToLog ( [ ) ;
45772: LD_STRING [
45774: PPUSH
45775: CALL_OW 561
// for i in tmp do
45779: LD_ADDR_VAR 0 3
45783: PUSH
45784: LD_VAR 0 4
45788: PUSH
45789: FOR_IN
45790: IFFALSE 45897
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45792: LD_STRING [
45794: PUSH
45795: LD_VAR 0 3
45799: PPUSH
45800: CALL_OW 266
45804: STR
45805: PUSH
45806: LD_STRING , 
45808: STR
45809: PUSH
45810: LD_VAR 0 3
45814: PPUSH
45815: CALL_OW 250
45819: STR
45820: PUSH
45821: LD_STRING , 
45823: STR
45824: PUSH
45825: LD_VAR 0 3
45829: PPUSH
45830: CALL_OW 251
45834: STR
45835: PUSH
45836: LD_STRING , 
45838: STR
45839: PUSH
45840: LD_VAR 0 3
45844: PPUSH
45845: CALL_OW 254
45849: STR
45850: PUSH
45851: LD_STRING , 
45853: STR
45854: PUSH
45855: LD_VAR 0 3
45859: PPUSH
45860: LD_INT 1
45862: PPUSH
45863: CALL_OW 268
45867: STR
45868: PUSH
45869: LD_STRING , 
45871: STR
45872: PUSH
45873: LD_VAR 0 3
45877: PPUSH
45878: LD_INT 2
45880: PPUSH
45881: CALL_OW 268
45885: STR
45886: PUSH
45887: LD_STRING ],
45889: STR
45890: PPUSH
45891: CALL_OW 561
// end ;
45895: GO 45789
45897: POP
45898: POP
// AddToLog ( ]; ) ;
45899: LD_STRING ];
45901: PPUSH
45902: CALL_OW 561
// end ;
45906: LD_VAR 0 2
45910: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45911: LD_INT 0
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
// if not area or not rate or not max then
45918: LD_VAR 0 1
45922: NOT
45923: PUSH
45924: LD_VAR 0 2
45928: NOT
45929: OR
45930: PUSH
45931: LD_VAR 0 4
45935: NOT
45936: OR
45937: IFFALSE 45941
// exit ;
45939: GO 46130
// while 1 do
45941: LD_INT 1
45943: IFFALSE 46130
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45945: LD_ADDR_VAR 0 9
45949: PUSH
45950: LD_VAR 0 1
45954: PPUSH
45955: LD_INT 1
45957: PPUSH
45958: CALL_OW 287
45962: PUSH
45963: LD_INT 10
45965: MUL
45966: ST_TO_ADDR
// r := rate / 10 ;
45967: LD_ADDR_VAR 0 7
45971: PUSH
45972: LD_VAR 0 2
45976: PUSH
45977: LD_INT 10
45979: DIVREAL
45980: ST_TO_ADDR
// time := 1 1$00 ;
45981: LD_ADDR_VAR 0 8
45985: PUSH
45986: LD_INT 2100
45988: ST_TO_ADDR
// if amount < min then
45989: LD_VAR 0 9
45993: PUSH
45994: LD_VAR 0 3
45998: LESS
45999: IFFALSE 46017
// r := r * 2 else
46001: LD_ADDR_VAR 0 7
46005: PUSH
46006: LD_VAR 0 7
46010: PUSH
46011: LD_INT 2
46013: MUL
46014: ST_TO_ADDR
46015: GO 46043
// if amount > max then
46017: LD_VAR 0 9
46021: PUSH
46022: LD_VAR 0 4
46026: GREATER
46027: IFFALSE 46043
// r := r / 2 ;
46029: LD_ADDR_VAR 0 7
46033: PUSH
46034: LD_VAR 0 7
46038: PUSH
46039: LD_INT 2
46041: DIVREAL
46042: ST_TO_ADDR
// time := time / r ;
46043: LD_ADDR_VAR 0 8
46047: PUSH
46048: LD_VAR 0 8
46052: PUSH
46053: LD_VAR 0 7
46057: DIVREAL
46058: ST_TO_ADDR
// if time < 0 then
46059: LD_VAR 0 8
46063: PUSH
46064: LD_INT 0
46066: LESS
46067: IFFALSE 46084
// time := time * - 1 ;
46069: LD_ADDR_VAR 0 8
46073: PUSH
46074: LD_VAR 0 8
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: MUL
46083: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46084: LD_VAR 0 8
46088: PUSH
46089: LD_INT 35
46091: PPUSH
46092: LD_INT 875
46094: PPUSH
46095: CALL_OW 12
46099: PLUS
46100: PPUSH
46101: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46105: LD_INT 1
46107: PPUSH
46108: LD_INT 5
46110: PPUSH
46111: CALL_OW 12
46115: PPUSH
46116: LD_VAR 0 1
46120: PPUSH
46121: LD_INT 1
46123: PPUSH
46124: CALL_OW 55
// end ;
46128: GO 45941
// end ;
46130: LD_VAR 0 5
46134: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46135: LD_INT 0
46137: PPUSH
46138: PPUSH
46139: PPUSH
46140: PPUSH
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
// if not turrets or not factories then
46145: LD_VAR 0 1
46149: NOT
46150: PUSH
46151: LD_VAR 0 2
46155: NOT
46156: OR
46157: IFFALSE 46161
// exit ;
46159: GO 46468
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46161: LD_ADDR_VAR 0 10
46165: PUSH
46166: LD_INT 5
46168: PUSH
46169: LD_INT 6
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 4
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 3
46188: PUSH
46189: LD_INT 5
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 24
46203: PUSH
46204: LD_INT 25
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 23
46213: PUSH
46214: LD_INT 27
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 42
46227: PUSH
46228: LD_INT 43
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 44
46237: PUSH
46238: LD_INT 46
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 45
46247: PUSH
46248: LD_INT 47
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: LIST
46264: ST_TO_ADDR
// result := [ ] ;
46265: LD_ADDR_VAR 0 3
46269: PUSH
46270: EMPTY
46271: ST_TO_ADDR
// for i in turrets do
46272: LD_ADDR_VAR 0 4
46276: PUSH
46277: LD_VAR 0 1
46281: PUSH
46282: FOR_IN
46283: IFFALSE 46466
// begin nat := GetNation ( i ) ;
46285: LD_ADDR_VAR 0 7
46289: PUSH
46290: LD_VAR 0 4
46294: PPUSH
46295: CALL_OW 248
46299: ST_TO_ADDR
// weapon := 0 ;
46300: LD_ADDR_VAR 0 8
46304: PUSH
46305: LD_INT 0
46307: ST_TO_ADDR
// if not nat then
46308: LD_VAR 0 7
46312: NOT
46313: IFFALSE 46317
// continue ;
46315: GO 46282
// for j in list [ nat ] do
46317: LD_ADDR_VAR 0 5
46321: PUSH
46322: LD_VAR 0 10
46326: PUSH
46327: LD_VAR 0 7
46331: ARRAY
46332: PUSH
46333: FOR_IN
46334: IFFALSE 46375
// if GetBWeapon ( i ) = j [ 1 ] then
46336: LD_VAR 0 4
46340: PPUSH
46341: CALL_OW 269
46345: PUSH
46346: LD_VAR 0 5
46350: PUSH
46351: LD_INT 1
46353: ARRAY
46354: EQUAL
46355: IFFALSE 46373
// begin weapon := j [ 2 ] ;
46357: LD_ADDR_VAR 0 8
46361: PUSH
46362: LD_VAR 0 5
46366: PUSH
46367: LD_INT 2
46369: ARRAY
46370: ST_TO_ADDR
// break ;
46371: GO 46375
// end ;
46373: GO 46333
46375: POP
46376: POP
// if not weapon then
46377: LD_VAR 0 8
46381: NOT
46382: IFFALSE 46386
// continue ;
46384: GO 46282
// for k in factories do
46386: LD_ADDR_VAR 0 6
46390: PUSH
46391: LD_VAR 0 2
46395: PUSH
46396: FOR_IN
46397: IFFALSE 46462
// begin weapons := AvailableWeaponList ( k ) ;
46399: LD_ADDR_VAR 0 9
46403: PUSH
46404: LD_VAR 0 6
46408: PPUSH
46409: CALL_OW 478
46413: ST_TO_ADDR
// if not weapons then
46414: LD_VAR 0 9
46418: NOT
46419: IFFALSE 46423
// continue ;
46421: GO 46396
// if weapon in weapons then
46423: LD_VAR 0 8
46427: PUSH
46428: LD_VAR 0 9
46432: IN
46433: IFFALSE 46460
// begin result := [ i , weapon ] ;
46435: LD_ADDR_VAR 0 3
46439: PUSH
46440: LD_VAR 0 4
46444: PUSH
46445: LD_VAR 0 8
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// exit ;
46454: POP
46455: POP
46456: POP
46457: POP
46458: GO 46468
// end ; end ;
46460: GO 46396
46462: POP
46463: POP
// end ;
46464: GO 46282
46466: POP
46467: POP
// end ;
46468: LD_VAR 0 3
46472: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46473: LD_INT 0
46475: PPUSH
// if not side or side > 8 then
46476: LD_VAR 0 3
46480: NOT
46481: PUSH
46482: LD_VAR 0 3
46486: PUSH
46487: LD_INT 8
46489: GREATER
46490: OR
46491: IFFALSE 46495
// exit ;
46493: GO 46554
// if not range then
46495: LD_VAR 0 4
46499: NOT
46500: IFFALSE 46511
// range := - 12 ;
46502: LD_ADDR_VAR 0 4
46506: PUSH
46507: LD_INT 12
46509: NEG
46510: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46511: LD_VAR 0 1
46515: PPUSH
46516: LD_VAR 0 2
46520: PPUSH
46521: LD_VAR 0 3
46525: PPUSH
46526: LD_VAR 0 4
46530: PPUSH
46531: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46535: LD_VAR 0 1
46539: PPUSH
46540: LD_VAR 0 2
46544: PPUSH
46545: LD_VAR 0 3
46549: PPUSH
46550: CALL_OW 331
// end ;
46554: LD_VAR 0 5
46558: RET
// export function Video ( mode ) ; begin
46559: LD_INT 0
46561: PPUSH
// ingame_video = mode ;
46562: LD_ADDR_OWVAR 52
46566: PUSH
46567: LD_VAR 0 1
46571: ST_TO_ADDR
// interface_hidden = mode ;
46572: LD_ADDR_OWVAR 54
46576: PUSH
46577: LD_VAR 0 1
46581: ST_TO_ADDR
// end ;
46582: LD_VAR 0 2
46586: RET
// export function Join ( array , element ) ; begin
46587: LD_INT 0
46589: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46590: LD_ADDR_VAR 0 3
46594: PUSH
46595: LD_VAR 0 1
46599: PPUSH
46600: LD_VAR 0 1
46604: PUSH
46605: LD_INT 1
46607: PLUS
46608: PPUSH
46609: LD_VAR 0 2
46613: PPUSH
46614: CALL_OW 1
46618: ST_TO_ADDR
// end ;
46619: LD_VAR 0 3
46623: RET
// export function JoinUnion ( array , element ) ; begin
46624: LD_INT 0
46626: PPUSH
// result := array union element ;
46627: LD_ADDR_VAR 0 3
46631: PUSH
46632: LD_VAR 0 1
46636: PUSH
46637: LD_VAR 0 2
46641: UNION
46642: ST_TO_ADDR
// end ;
46643: LD_VAR 0 3
46647: RET
// export function GetBehemoths ( side ) ; begin
46648: LD_INT 0
46650: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46651: LD_ADDR_VAR 0 2
46655: PUSH
46656: LD_INT 22
46658: PUSH
46659: LD_VAR 0 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 31
46670: PUSH
46671: LD_INT 25
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PPUSH
46682: CALL_OW 69
46686: ST_TO_ADDR
// end ;
46687: LD_VAR 0 2
46691: RET
// export function Shuffle ( array ) ; var i , index ; begin
46692: LD_INT 0
46694: PPUSH
46695: PPUSH
46696: PPUSH
// result := [ ] ;
46697: LD_ADDR_VAR 0 2
46701: PUSH
46702: EMPTY
46703: ST_TO_ADDR
// if not array then
46704: LD_VAR 0 1
46708: NOT
46709: IFFALSE 46713
// exit ;
46711: GO 46812
// Randomize ;
46713: CALL_OW 10
// for i = array downto 1 do
46717: LD_ADDR_VAR 0 3
46721: PUSH
46722: DOUBLE
46723: LD_VAR 0 1
46727: INC
46728: ST_TO_ADDR
46729: LD_INT 1
46731: PUSH
46732: FOR_DOWNTO
46733: IFFALSE 46810
// begin index := rand ( 1 , array ) ;
46735: LD_ADDR_VAR 0 4
46739: PUSH
46740: LD_INT 1
46742: PPUSH
46743: LD_VAR 0 1
46747: PPUSH
46748: CALL_OW 12
46752: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46753: LD_ADDR_VAR 0 2
46757: PUSH
46758: LD_VAR 0 2
46762: PPUSH
46763: LD_VAR 0 2
46767: PUSH
46768: LD_INT 1
46770: PLUS
46771: PPUSH
46772: LD_VAR 0 1
46776: PUSH
46777: LD_VAR 0 4
46781: ARRAY
46782: PPUSH
46783: CALL_OW 2
46787: ST_TO_ADDR
// array := Delete ( array , index ) ;
46788: LD_ADDR_VAR 0 1
46792: PUSH
46793: LD_VAR 0 1
46797: PPUSH
46798: LD_VAR 0 4
46802: PPUSH
46803: CALL_OW 3
46807: ST_TO_ADDR
// end ;
46808: GO 46732
46810: POP
46811: POP
// end ;
46812: LD_VAR 0 2
46816: RET
// export function GetBaseMaterials ( base ) ; begin
46817: LD_INT 0
46819: PPUSH
// result := [ 0 , 0 , 0 ] ;
46820: LD_ADDR_VAR 0 2
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// if not base then
46839: LD_VAR 0 1
46843: NOT
46844: IFFALSE 46848
// exit ;
46846: GO 46897
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46848: LD_ADDR_VAR 0 2
46852: PUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: LD_INT 1
46860: PPUSH
46861: CALL_OW 275
46865: PUSH
46866: LD_VAR 0 1
46870: PPUSH
46871: LD_INT 2
46873: PPUSH
46874: CALL_OW 275
46878: PUSH
46879: LD_VAR 0 1
46883: PPUSH
46884: LD_INT 3
46886: PPUSH
46887: CALL_OW 275
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// end ;
46897: LD_VAR 0 2
46901: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46902: LD_INT 0
46904: PPUSH
46905: PPUSH
// result := array ;
46906: LD_ADDR_VAR 0 3
46910: PUSH
46911: LD_VAR 0 1
46915: ST_TO_ADDR
// if size >= result then
46916: LD_VAR 0 2
46920: PUSH
46921: LD_VAR 0 3
46925: GREATEREQUAL
46926: IFFALSE 46930
// exit ;
46928: GO 46980
// if size then
46930: LD_VAR 0 2
46934: IFFALSE 46980
// for i := array downto size do
46936: LD_ADDR_VAR 0 4
46940: PUSH
46941: DOUBLE
46942: LD_VAR 0 1
46946: INC
46947: ST_TO_ADDR
46948: LD_VAR 0 2
46952: PUSH
46953: FOR_DOWNTO
46954: IFFALSE 46978
// result := Delete ( result , result ) ;
46956: LD_ADDR_VAR 0 3
46960: PUSH
46961: LD_VAR 0 3
46965: PPUSH
46966: LD_VAR 0 3
46970: PPUSH
46971: CALL_OW 3
46975: ST_TO_ADDR
46976: GO 46953
46978: POP
46979: POP
// end ;
46980: LD_VAR 0 3
46984: RET
// export function ComExit ( unit ) ; var tmp ; begin
46985: LD_INT 0
46987: PPUSH
46988: PPUSH
// if not IsInUnit ( unit ) then
46989: LD_VAR 0 1
46993: PPUSH
46994: CALL_OW 310
46998: NOT
46999: IFFALSE 47003
// exit ;
47001: GO 47063
// tmp := IsInUnit ( unit ) ;
47003: LD_ADDR_VAR 0 3
47007: PUSH
47008: LD_VAR 0 1
47012: PPUSH
47013: CALL_OW 310
47017: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47018: LD_VAR 0 3
47022: PPUSH
47023: CALL_OW 247
47027: PUSH
47028: LD_INT 2
47030: EQUAL
47031: IFFALSE 47044
// ComExitVehicle ( unit ) else
47033: LD_VAR 0 1
47037: PPUSH
47038: CALL_OW 121
47042: GO 47053
// ComExitBuilding ( unit ) ;
47044: LD_VAR 0 1
47048: PPUSH
47049: CALL_OW 122
// result := tmp ;
47053: LD_ADDR_VAR 0 2
47057: PUSH
47058: LD_VAR 0 3
47062: ST_TO_ADDR
// end ;
47063: LD_VAR 0 2
47067: RET
// export function ComExitAll ( units ) ; var i ; begin
47068: LD_INT 0
47070: PPUSH
47071: PPUSH
// if not units then
47072: LD_VAR 0 1
47076: NOT
47077: IFFALSE 47081
// exit ;
47079: GO 47107
// for i in units do
47081: LD_ADDR_VAR 0 3
47085: PUSH
47086: LD_VAR 0 1
47090: PUSH
47091: FOR_IN
47092: IFFALSE 47105
// ComExit ( i ) ;
47094: LD_VAR 0 3
47098: PPUSH
47099: CALL 46985 0 1
47103: GO 47091
47105: POP
47106: POP
// end ;
47107: LD_VAR 0 2
47111: RET
// export function ResetHc ; begin
47112: LD_INT 0
47114: PPUSH
// InitHc ;
47115: CALL_OW 19
// hc_importance := 0 ;
47119: LD_ADDR_OWVAR 32
47123: PUSH
47124: LD_INT 0
47126: ST_TO_ADDR
// end ;
47127: LD_VAR 0 1
47131: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47132: LD_INT 0
47134: PPUSH
47135: PPUSH
47136: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47137: LD_ADDR_VAR 0 6
47141: PUSH
47142: LD_VAR 0 1
47146: PUSH
47147: LD_VAR 0 3
47151: PLUS
47152: PUSH
47153: LD_INT 2
47155: DIV
47156: ST_TO_ADDR
// if _x < 0 then
47157: LD_VAR 0 6
47161: PUSH
47162: LD_INT 0
47164: LESS
47165: IFFALSE 47182
// _x := _x * - 1 ;
47167: LD_ADDR_VAR 0 6
47171: PUSH
47172: LD_VAR 0 6
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: MUL
47181: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47182: LD_ADDR_VAR 0 7
47186: PUSH
47187: LD_VAR 0 2
47191: PUSH
47192: LD_VAR 0 4
47196: PLUS
47197: PUSH
47198: LD_INT 2
47200: DIV
47201: ST_TO_ADDR
// if _y < 0 then
47202: LD_VAR 0 7
47206: PUSH
47207: LD_INT 0
47209: LESS
47210: IFFALSE 47227
// _y := _y * - 1 ;
47212: LD_ADDR_VAR 0 7
47216: PUSH
47217: LD_VAR 0 7
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: MUL
47226: ST_TO_ADDR
// result := [ _x , _y ] ;
47227: LD_ADDR_VAR 0 5
47231: PUSH
47232: LD_VAR 0 6
47236: PUSH
47237: LD_VAR 0 7
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// end ;
47246: LD_VAR 0 5
47250: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47251: LD_INT 0
47253: PPUSH
47254: PPUSH
47255: PPUSH
47256: PPUSH
// task := GetTaskList ( unit ) ;
47257: LD_ADDR_VAR 0 7
47261: PUSH
47262: LD_VAR 0 1
47266: PPUSH
47267: CALL_OW 437
47271: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47272: LD_VAR 0 7
47276: NOT
47277: PUSH
47278: LD_VAR 0 1
47282: PPUSH
47283: LD_VAR 0 2
47287: PPUSH
47288: CALL_OW 308
47292: NOT
47293: AND
47294: IFFALSE 47298
// exit ;
47296: GO 47416
// if IsInArea ( unit , area ) then
47298: LD_VAR 0 1
47302: PPUSH
47303: LD_VAR 0 2
47307: PPUSH
47308: CALL_OW 308
47312: IFFALSE 47330
// begin ComMoveToArea ( unit , goAway ) ;
47314: LD_VAR 0 1
47318: PPUSH
47319: LD_VAR 0 3
47323: PPUSH
47324: CALL_OW 113
// exit ;
47328: GO 47416
// end ; if task [ 1 ] [ 1 ] <> M then
47330: LD_VAR 0 7
47334: PUSH
47335: LD_INT 1
47337: ARRAY
47338: PUSH
47339: LD_INT 1
47341: ARRAY
47342: PUSH
47343: LD_STRING M
47345: NONEQUAL
47346: IFFALSE 47350
// exit ;
47348: GO 47416
// x := task [ 1 ] [ 2 ] ;
47350: LD_ADDR_VAR 0 5
47354: PUSH
47355: LD_VAR 0 7
47359: PUSH
47360: LD_INT 1
47362: ARRAY
47363: PUSH
47364: LD_INT 2
47366: ARRAY
47367: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47368: LD_ADDR_VAR 0 6
47372: PUSH
47373: LD_VAR 0 7
47377: PUSH
47378: LD_INT 1
47380: ARRAY
47381: PUSH
47382: LD_INT 3
47384: ARRAY
47385: ST_TO_ADDR
// if InArea ( x , y , area ) then
47386: LD_VAR 0 5
47390: PPUSH
47391: LD_VAR 0 6
47395: PPUSH
47396: LD_VAR 0 2
47400: PPUSH
47401: CALL_OW 309
47405: IFFALSE 47416
// ComStop ( unit ) ;
47407: LD_VAR 0 1
47411: PPUSH
47412: CALL_OW 141
// end ;
47416: LD_VAR 0 4
47420: RET
// export function Abs ( value ) ; begin
47421: LD_INT 0
47423: PPUSH
// result := value ;
47424: LD_ADDR_VAR 0 2
47428: PUSH
47429: LD_VAR 0 1
47433: ST_TO_ADDR
// if value < 0 then
47434: LD_VAR 0 1
47438: PUSH
47439: LD_INT 0
47441: LESS
47442: IFFALSE 47459
// result := value * - 1 ;
47444: LD_ADDR_VAR 0 2
47448: PUSH
47449: LD_VAR 0 1
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: MUL
47458: ST_TO_ADDR
// end ;
47459: LD_VAR 0 2
47463: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47464: LD_INT 0
47466: PPUSH
47467: PPUSH
47468: PPUSH
47469: PPUSH
47470: PPUSH
47471: PPUSH
47472: PPUSH
47473: PPUSH
// if not unit or not building then
47474: LD_VAR 0 1
47478: NOT
47479: PUSH
47480: LD_VAR 0 2
47484: NOT
47485: OR
47486: IFFALSE 47490
// exit ;
47488: GO 47716
// x := GetX ( building ) ;
47490: LD_ADDR_VAR 0 4
47494: PUSH
47495: LD_VAR 0 2
47499: PPUSH
47500: CALL_OW 250
47504: ST_TO_ADDR
// y := GetY ( building ) ;
47505: LD_ADDR_VAR 0 6
47509: PUSH
47510: LD_VAR 0 2
47514: PPUSH
47515: CALL_OW 251
47519: ST_TO_ADDR
// d := GetDir ( building ) ;
47520: LD_ADDR_VAR 0 8
47524: PUSH
47525: LD_VAR 0 2
47529: PPUSH
47530: CALL_OW 254
47534: ST_TO_ADDR
// r := 4 ;
47535: LD_ADDR_VAR 0 9
47539: PUSH
47540: LD_INT 4
47542: ST_TO_ADDR
// for i := 1 to 5 do
47543: LD_ADDR_VAR 0 10
47547: PUSH
47548: DOUBLE
47549: LD_INT 1
47551: DEC
47552: ST_TO_ADDR
47553: LD_INT 5
47555: PUSH
47556: FOR_TO
47557: IFFALSE 47714
// begin _x := ShiftX ( x , d , r + i ) ;
47559: LD_ADDR_VAR 0 5
47563: PUSH
47564: LD_VAR 0 4
47568: PPUSH
47569: LD_VAR 0 8
47573: PPUSH
47574: LD_VAR 0 9
47578: PUSH
47579: LD_VAR 0 10
47583: PLUS
47584: PPUSH
47585: CALL_OW 272
47589: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47590: LD_ADDR_VAR 0 7
47594: PUSH
47595: LD_VAR 0 6
47599: PPUSH
47600: LD_VAR 0 8
47604: PPUSH
47605: LD_VAR 0 9
47609: PUSH
47610: LD_VAR 0 10
47614: PLUS
47615: PPUSH
47616: CALL_OW 273
47620: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47621: LD_VAR 0 5
47625: PPUSH
47626: LD_VAR 0 7
47630: PPUSH
47631: CALL_OW 488
47635: PUSH
47636: LD_VAR 0 5
47640: PPUSH
47641: LD_VAR 0 7
47645: PPUSH
47646: CALL_OW 428
47650: PPUSH
47651: CALL_OW 247
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: IN
47666: NOT
47667: AND
47668: IFFALSE 47712
// begin ComMoveXY ( unit , _x , _y ) ;
47670: LD_VAR 0 1
47674: PPUSH
47675: LD_VAR 0 5
47679: PPUSH
47680: LD_VAR 0 7
47684: PPUSH
47685: CALL_OW 111
// result := [ _x , _y ] ;
47689: LD_ADDR_VAR 0 3
47693: PUSH
47694: LD_VAR 0 5
47698: PUSH
47699: LD_VAR 0 7
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: ST_TO_ADDR
// exit ;
47708: POP
47709: POP
47710: GO 47716
// end ; end ;
47712: GO 47556
47714: POP
47715: POP
// end ;
47716: LD_VAR 0 3
47720: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47721: LD_INT 0
47723: PPUSH
47724: PPUSH
47725: PPUSH
// result := 0 ;
47726: LD_ADDR_VAR 0 3
47730: PUSH
47731: LD_INT 0
47733: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47734: LD_VAR 0 1
47738: PUSH
47739: LD_INT 0
47741: LESS
47742: PUSH
47743: LD_VAR 0 1
47747: PUSH
47748: LD_INT 8
47750: GREATER
47751: OR
47752: PUSH
47753: LD_VAR 0 2
47757: PUSH
47758: LD_INT 0
47760: LESS
47761: OR
47762: PUSH
47763: LD_VAR 0 2
47767: PUSH
47768: LD_INT 8
47770: GREATER
47771: OR
47772: IFFALSE 47776
// exit ;
47774: GO 47851
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47776: LD_ADDR_VAR 0 4
47780: PUSH
47781: LD_INT 22
47783: PUSH
47784: LD_VAR 0 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PPUSH
47793: CALL_OW 69
47797: PUSH
47798: FOR_IN
47799: IFFALSE 47849
// begin un := UnitShoot ( i ) ;
47801: LD_ADDR_VAR 0 5
47805: PUSH
47806: LD_VAR 0 4
47810: PPUSH
47811: CALL_OW 504
47815: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47816: LD_VAR 0 5
47820: PPUSH
47821: CALL_OW 255
47825: PUSH
47826: LD_VAR 0 1
47830: EQUAL
47831: IFFALSE 47847
// begin result := un ;
47833: LD_ADDR_VAR 0 3
47837: PUSH
47838: LD_VAR 0 5
47842: ST_TO_ADDR
// exit ;
47843: POP
47844: POP
47845: GO 47851
// end ; end ;
47847: GO 47798
47849: POP
47850: POP
// end ;
47851: LD_VAR 0 3
47855: RET
// export function GetCargoBay ( units ) ; begin
47856: LD_INT 0
47858: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47859: LD_ADDR_VAR 0 2
47863: PUSH
47864: LD_VAR 0 1
47868: PPUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 34
47874: PUSH
47875: LD_INT 12
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 34
47884: PUSH
47885: LD_INT 51
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 34
47894: PUSH
47895: LD_INT 32
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 34
47904: PUSH
47905: LD_INT 89
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: PPUSH
47919: CALL_OW 72
47923: ST_TO_ADDR
// end ;
47924: LD_VAR 0 2
47928: RET
// export function Negate ( value ) ; begin
47929: LD_INT 0
47931: PPUSH
// result := not value ;
47932: LD_ADDR_VAR 0 2
47936: PUSH
47937: LD_VAR 0 1
47941: NOT
47942: ST_TO_ADDR
// end ;
47943: LD_VAR 0 2
47947: RET
// export function Inc ( value ) ; begin
47948: LD_INT 0
47950: PPUSH
// result := value + 1 ;
47951: LD_ADDR_VAR 0 2
47955: PUSH
47956: LD_VAR 0 1
47960: PUSH
47961: LD_INT 1
47963: PLUS
47964: ST_TO_ADDR
// end ;
47965: LD_VAR 0 2
47969: RET
// export function Dec ( value ) ; begin
47970: LD_INT 0
47972: PPUSH
// result := value - 1 ;
47973: LD_ADDR_VAR 0 2
47977: PUSH
47978: LD_VAR 0 1
47982: PUSH
47983: LD_INT 1
47985: MINUS
47986: ST_TO_ADDR
// end ;
47987: LD_VAR 0 2
47991: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47992: LD_INT 0
47994: PPUSH
47995: PPUSH
47996: PPUSH
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
48001: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48002: LD_VAR 0 1
48006: PPUSH
48007: LD_VAR 0 2
48011: PPUSH
48012: CALL_OW 488
48016: NOT
48017: PUSH
48018: LD_VAR 0 3
48022: PPUSH
48023: LD_VAR 0 4
48027: PPUSH
48028: CALL_OW 488
48032: NOT
48033: OR
48034: IFFALSE 48047
// begin result := - 1 ;
48036: LD_ADDR_VAR 0 5
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: ST_TO_ADDR
// exit ;
48045: GO 48282
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48047: LD_ADDR_VAR 0 12
48051: PUSH
48052: LD_VAR 0 1
48056: PPUSH
48057: LD_VAR 0 2
48061: PPUSH
48062: LD_VAR 0 3
48066: PPUSH
48067: LD_VAR 0 4
48071: PPUSH
48072: CALL 47132 0 4
48076: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48077: LD_ADDR_VAR 0 11
48081: PUSH
48082: LD_VAR 0 1
48086: PPUSH
48087: LD_VAR 0 2
48091: PPUSH
48092: LD_VAR 0 12
48096: PUSH
48097: LD_INT 1
48099: ARRAY
48100: PPUSH
48101: LD_VAR 0 12
48105: PUSH
48106: LD_INT 2
48108: ARRAY
48109: PPUSH
48110: CALL_OW 298
48114: ST_TO_ADDR
// distance := 9999 ;
48115: LD_ADDR_VAR 0 10
48119: PUSH
48120: LD_INT 9999
48122: ST_TO_ADDR
// for i := 0 to 5 do
48123: LD_ADDR_VAR 0 6
48127: PUSH
48128: DOUBLE
48129: LD_INT 0
48131: DEC
48132: ST_TO_ADDR
48133: LD_INT 5
48135: PUSH
48136: FOR_TO
48137: IFFALSE 48280
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48139: LD_ADDR_VAR 0 7
48143: PUSH
48144: LD_VAR 0 1
48148: PPUSH
48149: LD_VAR 0 6
48153: PPUSH
48154: LD_VAR 0 11
48158: PPUSH
48159: CALL_OW 272
48163: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48164: LD_ADDR_VAR 0 8
48168: PUSH
48169: LD_VAR 0 2
48173: PPUSH
48174: LD_VAR 0 6
48178: PPUSH
48179: LD_VAR 0 11
48183: PPUSH
48184: CALL_OW 273
48188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48189: LD_VAR 0 7
48193: PPUSH
48194: LD_VAR 0 8
48198: PPUSH
48199: CALL_OW 488
48203: NOT
48204: IFFALSE 48208
// continue ;
48206: GO 48136
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48208: LD_ADDR_VAR 0 9
48212: PUSH
48213: LD_VAR 0 12
48217: PUSH
48218: LD_INT 1
48220: ARRAY
48221: PPUSH
48222: LD_VAR 0 12
48226: PUSH
48227: LD_INT 2
48229: ARRAY
48230: PPUSH
48231: LD_VAR 0 7
48235: PPUSH
48236: LD_VAR 0 8
48240: PPUSH
48241: CALL_OW 298
48245: ST_TO_ADDR
// if tmp < distance then
48246: LD_VAR 0 9
48250: PUSH
48251: LD_VAR 0 10
48255: LESS
48256: IFFALSE 48278
// begin result := i ;
48258: LD_ADDR_VAR 0 5
48262: PUSH
48263: LD_VAR 0 6
48267: ST_TO_ADDR
// distance := tmp ;
48268: LD_ADDR_VAR 0 10
48272: PUSH
48273: LD_VAR 0 9
48277: ST_TO_ADDR
// end ; end ;
48278: GO 48136
48280: POP
48281: POP
// end ;
48282: LD_VAR 0 5
48286: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48287: LD_INT 0
48289: PPUSH
48290: PPUSH
// if not driver or not IsInUnit ( driver ) then
48291: LD_VAR 0 1
48295: NOT
48296: PUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 310
48306: NOT
48307: OR
48308: IFFALSE 48312
// exit ;
48310: GO 48402
// vehicle := IsInUnit ( driver ) ;
48312: LD_ADDR_VAR 0 3
48316: PUSH
48317: LD_VAR 0 1
48321: PPUSH
48322: CALL_OW 310
48326: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48327: LD_VAR 0 1
48331: PPUSH
48332: LD_STRING \
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: PUSH
48362: LD_STRING E
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_VAR 0 3
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PPUSH
48398: CALL_OW 446
// end ;
48402: LD_VAR 0 2
48406: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48407: LD_INT 0
48409: PPUSH
48410: PPUSH
// if not driver or not IsInUnit ( driver ) then
48411: LD_VAR 0 1
48415: NOT
48416: PUSH
48417: LD_VAR 0 1
48421: PPUSH
48422: CALL_OW 310
48426: NOT
48427: OR
48428: IFFALSE 48432
// exit ;
48430: GO 48522
// vehicle := IsInUnit ( driver ) ;
48432: LD_ADDR_VAR 0 3
48436: PUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 310
48446: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48447: LD_VAR 0 1
48451: PPUSH
48452: LD_STRING \
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: PUSH
48482: LD_STRING E
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_VAR 0 3
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PPUSH
48518: CALL_OW 447
// end ;
48522: LD_VAR 0 2
48526: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48527: LD_INT 0
48529: PPUSH
48530: PPUSH
48531: PPUSH
// tmp := [ ] ;
48532: LD_ADDR_VAR 0 5
48536: PUSH
48537: EMPTY
48538: ST_TO_ADDR
// for i in units do
48539: LD_ADDR_VAR 0 4
48543: PUSH
48544: LD_VAR 0 1
48548: PUSH
48549: FOR_IN
48550: IFFALSE 48588
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48552: LD_ADDR_VAR 0 5
48556: PUSH
48557: LD_VAR 0 5
48561: PPUSH
48562: LD_VAR 0 5
48566: PUSH
48567: LD_INT 1
48569: PLUS
48570: PPUSH
48571: LD_VAR 0 4
48575: PPUSH
48576: CALL_OW 256
48580: PPUSH
48581: CALL_OW 2
48585: ST_TO_ADDR
48586: GO 48549
48588: POP
48589: POP
// if not tmp then
48590: LD_VAR 0 5
48594: NOT
48595: IFFALSE 48599
// exit ;
48597: GO 48647
// if asc then
48599: LD_VAR 0 2
48603: IFFALSE 48627
// result := SortListByListAsc ( units , tmp ) else
48605: LD_ADDR_VAR 0 3
48609: PUSH
48610: LD_VAR 0 1
48614: PPUSH
48615: LD_VAR 0 5
48619: PPUSH
48620: CALL_OW 76
48624: ST_TO_ADDR
48625: GO 48647
// result := SortListByListDesc ( units , tmp ) ;
48627: LD_ADDR_VAR 0 3
48631: PUSH
48632: LD_VAR 0 1
48636: PPUSH
48637: LD_VAR 0 5
48641: PPUSH
48642: CALL_OW 77
48646: ST_TO_ADDR
// end ;
48647: LD_VAR 0 3
48651: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48652: LD_INT 0
48654: PPUSH
48655: PPUSH
// task := GetTaskList ( mech ) ;
48656: LD_ADDR_VAR 0 4
48660: PUSH
48661: LD_VAR 0 1
48665: PPUSH
48666: CALL_OW 437
48670: ST_TO_ADDR
// if not task then
48671: LD_VAR 0 4
48675: NOT
48676: IFFALSE 48680
// exit ;
48678: GO 48722
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48680: LD_ADDR_VAR 0 3
48684: PUSH
48685: LD_VAR 0 4
48689: PUSH
48690: LD_INT 1
48692: ARRAY
48693: PUSH
48694: LD_INT 1
48696: ARRAY
48697: PUSH
48698: LD_STRING r
48700: EQUAL
48701: PUSH
48702: LD_VAR 0 4
48706: PUSH
48707: LD_INT 1
48709: ARRAY
48710: PUSH
48711: LD_INT 4
48713: ARRAY
48714: PUSH
48715: LD_VAR 0 2
48719: EQUAL
48720: AND
48721: ST_TO_ADDR
// end ;
48722: LD_VAR 0 3
48726: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48727: LD_INT 0
48729: PPUSH
// SetDir ( unit , d ) ;
48730: LD_VAR 0 1
48734: PPUSH
48735: LD_VAR 0 4
48739: PPUSH
48740: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48744: LD_VAR 0 1
48748: PPUSH
48749: LD_VAR 0 2
48753: PPUSH
48754: LD_VAR 0 3
48758: PPUSH
48759: LD_VAR 0 5
48763: PPUSH
48764: CALL_OW 48
// end ;
48768: LD_VAR 0 6
48772: RET
// export function ToNaturalNumber ( number ) ; begin
48773: LD_INT 0
48775: PPUSH
// result := number div 1 ;
48776: LD_ADDR_VAR 0 2
48780: PUSH
48781: LD_VAR 0 1
48785: PUSH
48786: LD_INT 1
48788: DIV
48789: ST_TO_ADDR
// if number < 0 then
48790: LD_VAR 0 1
48794: PUSH
48795: LD_INT 0
48797: LESS
48798: IFFALSE 48808
// result := 0 ;
48800: LD_ADDR_VAR 0 2
48804: PUSH
48805: LD_INT 0
48807: ST_TO_ADDR
// end ;
48808: LD_VAR 0 2
48812: RET
// export function SortByClass ( units , class ) ; var un ; begin
48813: LD_INT 0
48815: PPUSH
48816: PPUSH
// if not units or not class then
48817: LD_VAR 0 1
48821: NOT
48822: PUSH
48823: LD_VAR 0 2
48827: NOT
48828: OR
48829: IFFALSE 48833
// exit ;
48831: GO 48928
// result := [ ] ;
48833: LD_ADDR_VAR 0 3
48837: PUSH
48838: EMPTY
48839: ST_TO_ADDR
// for un in units do
48840: LD_ADDR_VAR 0 4
48844: PUSH
48845: LD_VAR 0 1
48849: PUSH
48850: FOR_IN
48851: IFFALSE 48926
// if GetClass ( un ) = class then
48853: LD_VAR 0 4
48857: PPUSH
48858: CALL_OW 257
48862: PUSH
48863: LD_VAR 0 2
48867: EQUAL
48868: IFFALSE 48895
// result := Insert ( result , 1 , un ) else
48870: LD_ADDR_VAR 0 3
48874: PUSH
48875: LD_VAR 0 3
48879: PPUSH
48880: LD_INT 1
48882: PPUSH
48883: LD_VAR 0 4
48887: PPUSH
48888: CALL_OW 2
48892: ST_TO_ADDR
48893: GO 48924
// result := Replace ( result , result + 1 , un ) ;
48895: LD_ADDR_VAR 0 3
48899: PUSH
48900: LD_VAR 0 3
48904: PPUSH
48905: LD_VAR 0 3
48909: PUSH
48910: LD_INT 1
48912: PLUS
48913: PPUSH
48914: LD_VAR 0 4
48918: PPUSH
48919: CALL_OW 1
48923: ST_TO_ADDR
48924: GO 48850
48926: POP
48927: POP
// end ;
48928: LD_VAR 0 3
48932: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48933: LD_INT 0
48935: PPUSH
48936: PPUSH
48937: PPUSH
48938: PPUSH
48939: PPUSH
48940: PPUSH
48941: PPUSH
// result := [ ] ;
48942: LD_ADDR_VAR 0 4
48946: PUSH
48947: EMPTY
48948: ST_TO_ADDR
// if x - r < 0 then
48949: LD_VAR 0 1
48953: PUSH
48954: LD_VAR 0 3
48958: MINUS
48959: PUSH
48960: LD_INT 0
48962: LESS
48963: IFFALSE 48975
// min_x := 0 else
48965: LD_ADDR_VAR 0 8
48969: PUSH
48970: LD_INT 0
48972: ST_TO_ADDR
48973: GO 48991
// min_x := x - r ;
48975: LD_ADDR_VAR 0 8
48979: PUSH
48980: LD_VAR 0 1
48984: PUSH
48985: LD_VAR 0 3
48989: MINUS
48990: ST_TO_ADDR
// if y - r < 0 then
48991: LD_VAR 0 2
48995: PUSH
48996: LD_VAR 0 3
49000: MINUS
49001: PUSH
49002: LD_INT 0
49004: LESS
49005: IFFALSE 49017
// min_y := 0 else
49007: LD_ADDR_VAR 0 7
49011: PUSH
49012: LD_INT 0
49014: ST_TO_ADDR
49015: GO 49033
// min_y := y - r ;
49017: LD_ADDR_VAR 0 7
49021: PUSH
49022: LD_VAR 0 2
49026: PUSH
49027: LD_VAR 0 3
49031: MINUS
49032: ST_TO_ADDR
// max_x := x + r ;
49033: LD_ADDR_VAR 0 9
49037: PUSH
49038: LD_VAR 0 1
49042: PUSH
49043: LD_VAR 0 3
49047: PLUS
49048: ST_TO_ADDR
// max_y := y + r ;
49049: LD_ADDR_VAR 0 10
49053: PUSH
49054: LD_VAR 0 2
49058: PUSH
49059: LD_VAR 0 3
49063: PLUS
49064: ST_TO_ADDR
// for _x = min_x to max_x do
49065: LD_ADDR_VAR 0 5
49069: PUSH
49070: DOUBLE
49071: LD_VAR 0 8
49075: DEC
49076: ST_TO_ADDR
49077: LD_VAR 0 9
49081: PUSH
49082: FOR_TO
49083: IFFALSE 49184
// for _y = min_y to max_y do
49085: LD_ADDR_VAR 0 6
49089: PUSH
49090: DOUBLE
49091: LD_VAR 0 7
49095: DEC
49096: ST_TO_ADDR
49097: LD_VAR 0 10
49101: PUSH
49102: FOR_TO
49103: IFFALSE 49180
// begin if not ValidHex ( _x , _y ) then
49105: LD_VAR 0 5
49109: PPUSH
49110: LD_VAR 0 6
49114: PPUSH
49115: CALL_OW 488
49119: NOT
49120: IFFALSE 49124
// continue ;
49122: GO 49102
// if GetResourceTypeXY ( _x , _y ) then
49124: LD_VAR 0 5
49128: PPUSH
49129: LD_VAR 0 6
49133: PPUSH
49134: CALL_OW 283
49138: IFFALSE 49178
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49140: LD_ADDR_VAR 0 4
49144: PUSH
49145: LD_VAR 0 4
49149: PPUSH
49150: LD_VAR 0 4
49154: PUSH
49155: LD_INT 1
49157: PLUS
49158: PPUSH
49159: LD_VAR 0 5
49163: PUSH
49164: LD_VAR 0 6
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PPUSH
49173: CALL_OW 1
49177: ST_TO_ADDR
// end ;
49178: GO 49102
49180: POP
49181: POP
49182: GO 49082
49184: POP
49185: POP
// end ;
49186: LD_VAR 0 4
49190: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49191: LD_INT 0
49193: PPUSH
49194: PPUSH
49195: PPUSH
49196: PPUSH
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
// if not units then
49201: LD_VAR 0 1
49205: NOT
49206: IFFALSE 49210
// exit ;
49208: GO 49738
// result := UnitFilter ( units , [ f_ok ] ) ;
49210: LD_ADDR_VAR 0 3
49214: PUSH
49215: LD_VAR 0 1
49219: PPUSH
49220: LD_INT 50
49222: PUSH
49223: EMPTY
49224: LIST
49225: PPUSH
49226: CALL_OW 72
49230: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49231: LD_ADDR_VAR 0 8
49235: PUSH
49236: LD_VAR 0 1
49240: PUSH
49241: LD_INT 1
49243: ARRAY
49244: PPUSH
49245: CALL_OW 255
49249: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49250: LD_ADDR_VAR 0 10
49254: PUSH
49255: LD_INT 29
49257: PUSH
49258: LD_INT 91
49260: PUSH
49261: LD_INT 49
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// if not result then
49269: LD_VAR 0 3
49273: NOT
49274: IFFALSE 49278
// exit ;
49276: GO 49738
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49278: LD_ADDR_VAR 0 5
49282: PUSH
49283: LD_INT 81
49285: PUSH
49286: LD_VAR 0 8
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PPUSH
49295: CALL_OW 69
49299: ST_TO_ADDR
// for i in result do
49300: LD_ADDR_VAR 0 4
49304: PUSH
49305: LD_VAR 0 3
49309: PUSH
49310: FOR_IN
49311: IFFALSE 49736
// begin tag := GetTag ( i ) + 1 ;
49313: LD_ADDR_VAR 0 9
49317: PUSH
49318: LD_VAR 0 4
49322: PPUSH
49323: CALL_OW 110
49327: PUSH
49328: LD_INT 1
49330: PLUS
49331: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49332: LD_ADDR_VAR 0 7
49336: PUSH
49337: LD_VAR 0 4
49341: PPUSH
49342: CALL_OW 250
49346: PPUSH
49347: LD_VAR 0 4
49351: PPUSH
49352: CALL_OW 251
49356: PPUSH
49357: LD_INT 4
49359: PPUSH
49360: CALL 48933 0 3
49364: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49365: LD_VAR 0 4
49369: PPUSH
49370: CALL_OW 247
49374: PUSH
49375: LD_INT 2
49377: EQUAL
49378: PUSH
49379: LD_VAR 0 7
49383: PUSH
49384: LD_INT 2
49386: GREATER
49387: AND
49388: PUSH
49389: LD_VAR 0 4
49393: PPUSH
49394: CALL_OW 264
49398: PUSH
49399: LD_VAR 0 10
49403: IN
49404: NOT
49405: AND
49406: IFFALSE 49445
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49408: LD_VAR 0 4
49412: PPUSH
49413: LD_VAR 0 7
49417: PUSH
49418: LD_INT 1
49420: ARRAY
49421: PUSH
49422: LD_INT 1
49424: ARRAY
49425: PPUSH
49426: LD_VAR 0 7
49430: PUSH
49431: LD_INT 1
49433: ARRAY
49434: PUSH
49435: LD_INT 2
49437: ARRAY
49438: PPUSH
49439: CALL_OW 116
49443: GO 49734
// if path > tag then
49445: LD_VAR 0 2
49449: PUSH
49450: LD_VAR 0 9
49454: GREATER
49455: IFFALSE 49663
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49457: LD_ADDR_VAR 0 6
49461: PUSH
49462: LD_VAR 0 5
49466: PPUSH
49467: LD_INT 91
49469: PUSH
49470: LD_VAR 0 4
49474: PUSH
49475: LD_INT 8
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: PPUSH
49483: CALL_OW 72
49487: ST_TO_ADDR
// if nearEnemy then
49488: LD_VAR 0 6
49492: IFFALSE 49561
// begin if GetWeapon ( i ) = ru_time_lapser then
49494: LD_VAR 0 4
49498: PPUSH
49499: CALL_OW 264
49503: PUSH
49504: LD_INT 49
49506: EQUAL
49507: IFFALSE 49535
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49509: LD_VAR 0 4
49513: PPUSH
49514: LD_VAR 0 6
49518: PPUSH
49519: LD_VAR 0 4
49523: PPUSH
49524: CALL_OW 74
49528: PPUSH
49529: CALL_OW 112
49533: GO 49559
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49535: LD_VAR 0 4
49539: PPUSH
49540: LD_VAR 0 6
49544: PPUSH
49545: LD_VAR 0 4
49549: PPUSH
49550: CALL_OW 74
49554: PPUSH
49555: CALL 50809 0 2
// end else
49559: GO 49661
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49561: LD_VAR 0 4
49565: PPUSH
49566: LD_VAR 0 2
49570: PUSH
49571: LD_VAR 0 9
49575: ARRAY
49576: PUSH
49577: LD_INT 1
49579: ARRAY
49580: PPUSH
49581: LD_VAR 0 2
49585: PUSH
49586: LD_VAR 0 9
49590: ARRAY
49591: PUSH
49592: LD_INT 2
49594: ARRAY
49595: PPUSH
49596: CALL_OW 297
49600: PUSH
49601: LD_INT 6
49603: GREATER
49604: IFFALSE 49647
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49606: LD_VAR 0 4
49610: PPUSH
49611: LD_VAR 0 2
49615: PUSH
49616: LD_VAR 0 9
49620: ARRAY
49621: PUSH
49622: LD_INT 1
49624: ARRAY
49625: PPUSH
49626: LD_VAR 0 2
49630: PUSH
49631: LD_VAR 0 9
49635: ARRAY
49636: PUSH
49637: LD_INT 2
49639: ARRAY
49640: PPUSH
49641: CALL_OW 114
49645: GO 49661
// SetTag ( i , tag ) ;
49647: LD_VAR 0 4
49651: PPUSH
49652: LD_VAR 0 9
49656: PPUSH
49657: CALL_OW 109
// end else
49661: GO 49734
// if enemy then
49663: LD_VAR 0 5
49667: IFFALSE 49734
// begin if GetWeapon ( i ) = ru_time_lapser then
49669: LD_VAR 0 4
49673: PPUSH
49674: CALL_OW 264
49678: PUSH
49679: LD_INT 49
49681: EQUAL
49682: IFFALSE 49710
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49684: LD_VAR 0 4
49688: PPUSH
49689: LD_VAR 0 5
49693: PPUSH
49694: LD_VAR 0 4
49698: PPUSH
49699: CALL_OW 74
49703: PPUSH
49704: CALL_OW 112
49708: GO 49734
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49710: LD_VAR 0 4
49714: PPUSH
49715: LD_VAR 0 5
49719: PPUSH
49720: LD_VAR 0 4
49724: PPUSH
49725: CALL_OW 74
49729: PPUSH
49730: CALL 50809 0 2
// end ; end ;
49734: GO 49310
49736: POP
49737: POP
// end ;
49738: LD_VAR 0 3
49742: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49743: LD_INT 0
49745: PPUSH
49746: PPUSH
49747: PPUSH
// if not unit or IsInUnit ( unit ) then
49748: LD_VAR 0 1
49752: NOT
49753: PUSH
49754: LD_VAR 0 1
49758: PPUSH
49759: CALL_OW 310
49763: OR
49764: IFFALSE 49768
// exit ;
49766: GO 49859
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49768: LD_ADDR_VAR 0 4
49772: PUSH
49773: LD_VAR 0 1
49777: PPUSH
49778: CALL_OW 250
49782: PPUSH
49783: LD_VAR 0 2
49787: PPUSH
49788: LD_INT 1
49790: PPUSH
49791: CALL_OW 272
49795: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49796: LD_ADDR_VAR 0 5
49800: PUSH
49801: LD_VAR 0 1
49805: PPUSH
49806: CALL_OW 251
49810: PPUSH
49811: LD_VAR 0 2
49815: PPUSH
49816: LD_INT 1
49818: PPUSH
49819: CALL_OW 273
49823: ST_TO_ADDR
// if ValidHex ( x , y ) then
49824: LD_VAR 0 4
49828: PPUSH
49829: LD_VAR 0 5
49833: PPUSH
49834: CALL_OW 488
49838: IFFALSE 49859
// ComTurnXY ( unit , x , y ) ;
49840: LD_VAR 0 1
49844: PPUSH
49845: LD_VAR 0 4
49849: PPUSH
49850: LD_VAR 0 5
49854: PPUSH
49855: CALL_OW 118
// end ;
49859: LD_VAR 0 3
49863: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49864: LD_INT 0
49866: PPUSH
49867: PPUSH
// result := false ;
49868: LD_ADDR_VAR 0 3
49872: PUSH
49873: LD_INT 0
49875: ST_TO_ADDR
// if not units then
49876: LD_VAR 0 2
49880: NOT
49881: IFFALSE 49885
// exit ;
49883: GO 49930
// for i in units do
49885: LD_ADDR_VAR 0 4
49889: PUSH
49890: LD_VAR 0 2
49894: PUSH
49895: FOR_IN
49896: IFFALSE 49928
// if See ( side , i ) then
49898: LD_VAR 0 1
49902: PPUSH
49903: LD_VAR 0 4
49907: PPUSH
49908: CALL_OW 292
49912: IFFALSE 49926
// begin result := true ;
49914: LD_ADDR_VAR 0 3
49918: PUSH
49919: LD_INT 1
49921: ST_TO_ADDR
// exit ;
49922: POP
49923: POP
49924: GO 49930
// end ;
49926: GO 49895
49928: POP
49929: POP
// end ;
49930: LD_VAR 0 3
49934: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49935: LD_INT 0
49937: PPUSH
49938: PPUSH
49939: PPUSH
49940: PPUSH
// if not unit or not points then
49941: LD_VAR 0 1
49945: NOT
49946: PUSH
49947: LD_VAR 0 2
49951: NOT
49952: OR
49953: IFFALSE 49957
// exit ;
49955: GO 50047
// dist := 99999 ;
49957: LD_ADDR_VAR 0 5
49961: PUSH
49962: LD_INT 99999
49964: ST_TO_ADDR
// for i in points do
49965: LD_ADDR_VAR 0 4
49969: PUSH
49970: LD_VAR 0 2
49974: PUSH
49975: FOR_IN
49976: IFFALSE 50045
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49978: LD_ADDR_VAR 0 6
49982: PUSH
49983: LD_VAR 0 1
49987: PPUSH
49988: LD_VAR 0 4
49992: PUSH
49993: LD_INT 1
49995: ARRAY
49996: PPUSH
49997: LD_VAR 0 4
50001: PUSH
50002: LD_INT 2
50004: ARRAY
50005: PPUSH
50006: CALL_OW 297
50010: ST_TO_ADDR
// if tmpDist < dist then
50011: LD_VAR 0 6
50015: PUSH
50016: LD_VAR 0 5
50020: LESS
50021: IFFALSE 50043
// begin result := i ;
50023: LD_ADDR_VAR 0 3
50027: PUSH
50028: LD_VAR 0 4
50032: ST_TO_ADDR
// dist := tmpDist ;
50033: LD_ADDR_VAR 0 5
50037: PUSH
50038: LD_VAR 0 6
50042: ST_TO_ADDR
// end ; end ;
50043: GO 49975
50045: POP
50046: POP
// end ;
50047: LD_VAR 0 3
50051: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50052: LD_INT 0
50054: PPUSH
// uc_side := side ;
50055: LD_ADDR_OWVAR 20
50059: PUSH
50060: LD_VAR 0 1
50064: ST_TO_ADDR
// uc_nation := 3 ;
50065: LD_ADDR_OWVAR 21
50069: PUSH
50070: LD_INT 3
50072: ST_TO_ADDR
// vc_chassis := 25 ;
50073: LD_ADDR_OWVAR 37
50077: PUSH
50078: LD_INT 25
50080: ST_TO_ADDR
// vc_engine := engine_siberite ;
50081: LD_ADDR_OWVAR 39
50085: PUSH
50086: LD_INT 3
50088: ST_TO_ADDR
// vc_control := control_computer ;
50089: LD_ADDR_OWVAR 38
50093: PUSH
50094: LD_INT 3
50096: ST_TO_ADDR
// vc_weapon := 59 ;
50097: LD_ADDR_OWVAR 40
50101: PUSH
50102: LD_INT 59
50104: ST_TO_ADDR
// result := CreateVehicle ;
50105: LD_ADDR_VAR 0 5
50109: PUSH
50110: CALL_OW 45
50114: ST_TO_ADDR
// SetDir ( result , d ) ;
50115: LD_VAR 0 5
50119: PPUSH
50120: LD_VAR 0 4
50124: PPUSH
50125: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50129: LD_VAR 0 5
50133: PPUSH
50134: LD_VAR 0 2
50138: PPUSH
50139: LD_VAR 0 3
50143: PPUSH
50144: LD_INT 0
50146: PPUSH
50147: CALL_OW 48
// end ;
50151: LD_VAR 0 5
50155: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50156: LD_INT 0
50158: PPUSH
50159: PPUSH
50160: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50161: LD_ADDR_VAR 0 2
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50184: LD_VAR 0 1
50188: NOT
50189: PUSH
50190: LD_VAR 0 1
50194: PPUSH
50195: CALL_OW 264
50199: PUSH
50200: LD_INT 12
50202: PUSH
50203: LD_INT 51
50205: PUSH
50206: LD_INT 32
50208: PUSH
50209: LD_INT 89
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: IN
50218: NOT
50219: OR
50220: IFFALSE 50224
// exit ;
50222: GO 50322
// for i := 1 to 3 do
50224: LD_ADDR_VAR 0 3
50228: PUSH
50229: DOUBLE
50230: LD_INT 1
50232: DEC
50233: ST_TO_ADDR
50234: LD_INT 3
50236: PUSH
50237: FOR_TO
50238: IFFALSE 50320
// begin tmp := GetCargo ( cargo , i ) ;
50240: LD_ADDR_VAR 0 4
50244: PUSH
50245: LD_VAR 0 1
50249: PPUSH
50250: LD_VAR 0 3
50254: PPUSH
50255: CALL_OW 289
50259: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50260: LD_ADDR_VAR 0 2
50264: PUSH
50265: LD_VAR 0 2
50269: PPUSH
50270: LD_VAR 0 3
50274: PPUSH
50275: LD_VAR 0 4
50279: PPUSH
50280: CALL_OW 1
50284: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50285: LD_ADDR_VAR 0 2
50289: PUSH
50290: LD_VAR 0 2
50294: PPUSH
50295: LD_INT 4
50297: PPUSH
50298: LD_VAR 0 2
50302: PUSH
50303: LD_INT 4
50305: ARRAY
50306: PUSH
50307: LD_VAR 0 4
50311: PLUS
50312: PPUSH
50313: CALL_OW 1
50317: ST_TO_ADDR
// end ;
50318: GO 50237
50320: POP
50321: POP
// end ;
50322: LD_VAR 0 2
50326: RET
// export function Length ( array ) ; begin
50327: LD_INT 0
50329: PPUSH
// result := array + 0 ;
50330: LD_ADDR_VAR 0 2
50334: PUSH
50335: LD_VAR 0 1
50339: PUSH
50340: LD_INT 0
50342: PLUS
50343: ST_TO_ADDR
// end ;
50344: LD_VAR 0 2
50348: RET
// export function PrepareArray ( array ) ; begin
50349: LD_INT 0
50351: PPUSH
// result := array diff 0 ;
50352: LD_ADDR_VAR 0 2
50356: PUSH
50357: LD_VAR 0 1
50361: PUSH
50362: LD_INT 0
50364: DIFF
50365: ST_TO_ADDR
// if not result [ 1 ] then
50366: LD_VAR 0 2
50370: PUSH
50371: LD_INT 1
50373: ARRAY
50374: NOT
50375: IFFALSE 50395
// result := Delete ( result , 1 ) ;
50377: LD_ADDR_VAR 0 2
50381: PUSH
50382: LD_VAR 0 2
50386: PPUSH
50387: LD_INT 1
50389: PPUSH
50390: CALL_OW 3
50394: ST_TO_ADDR
// end ;
50395: LD_VAR 0 2
50399: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50400: LD_INT 0
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
// sibRocketRange := 25 ;
50406: LD_ADDR_VAR 0 6
50410: PUSH
50411: LD_INT 25
50413: ST_TO_ADDR
// result := false ;
50414: LD_ADDR_VAR 0 4
50418: PUSH
50419: LD_INT 0
50421: ST_TO_ADDR
// for i := 0 to 5 do
50422: LD_ADDR_VAR 0 5
50426: PUSH
50427: DOUBLE
50428: LD_INT 0
50430: DEC
50431: ST_TO_ADDR
50432: LD_INT 5
50434: PUSH
50435: FOR_TO
50436: IFFALSE 50503
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50438: LD_VAR 0 1
50442: PPUSH
50443: LD_VAR 0 5
50447: PPUSH
50448: LD_VAR 0 6
50452: PPUSH
50453: CALL_OW 272
50457: PPUSH
50458: LD_VAR 0 2
50462: PPUSH
50463: LD_VAR 0 5
50467: PPUSH
50468: LD_VAR 0 6
50472: PPUSH
50473: CALL_OW 273
50477: PPUSH
50478: LD_VAR 0 3
50482: PPUSH
50483: CALL_OW 309
50487: IFFALSE 50501
// begin result := true ;
50489: LD_ADDR_VAR 0 4
50493: PUSH
50494: LD_INT 1
50496: ST_TO_ADDR
// exit ;
50497: POP
50498: POP
50499: GO 50505
// end ;
50501: GO 50435
50503: POP
50504: POP
// end ;
50505: LD_VAR 0 4
50509: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50510: LD_INT 0
50512: PPUSH
50513: PPUSH
50514: PPUSH
// if btype = b_depot then
50515: LD_VAR 0 2
50519: PUSH
50520: LD_INT 0
50522: EQUAL
50523: IFFALSE 50535
// begin result := true ;
50525: LD_ADDR_VAR 0 3
50529: PUSH
50530: LD_INT 1
50532: ST_TO_ADDR
// exit ;
50533: GO 50651
// end ; pom := GetBase ( depot ) ;
50535: LD_ADDR_VAR 0 4
50539: PUSH
50540: LD_VAR 0 1
50544: PPUSH
50545: CALL_OW 274
50549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50550: LD_ADDR_VAR 0 5
50554: PUSH
50555: LD_VAR 0 2
50559: PPUSH
50560: LD_VAR 0 1
50564: PPUSH
50565: CALL_OW 248
50569: PPUSH
50570: CALL_OW 450
50574: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50575: LD_ADDR_VAR 0 3
50579: PUSH
50580: LD_VAR 0 4
50584: PPUSH
50585: LD_INT 1
50587: PPUSH
50588: CALL_OW 275
50592: PUSH
50593: LD_VAR 0 5
50597: PUSH
50598: LD_INT 1
50600: ARRAY
50601: GREATEREQUAL
50602: PUSH
50603: LD_VAR 0 4
50607: PPUSH
50608: LD_INT 2
50610: PPUSH
50611: CALL_OW 275
50615: PUSH
50616: LD_VAR 0 5
50620: PUSH
50621: LD_INT 2
50623: ARRAY
50624: GREATEREQUAL
50625: AND
50626: PUSH
50627: LD_VAR 0 4
50631: PPUSH
50632: LD_INT 3
50634: PPUSH
50635: CALL_OW 275
50639: PUSH
50640: LD_VAR 0 5
50644: PUSH
50645: LD_INT 3
50647: ARRAY
50648: GREATEREQUAL
50649: AND
50650: ST_TO_ADDR
// end ;
50651: LD_VAR 0 3
50655: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50656: LD_INT 0
50658: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50659: LD_VAR 0 1
50663: PPUSH
50664: LD_VAR 0 2
50668: PPUSH
50669: LD_INT 0
50671: PPUSH
50672: LD_INT 0
50674: PPUSH
50675: LD_INT 1
50677: PPUSH
50678: LD_INT 0
50680: PPUSH
50681: CALL_OW 587
// end ;
50685: LD_VAR 0 3
50689: RET
// export function CenterOnNow ( unit ) ; begin
50690: LD_INT 0
50692: PPUSH
// result := IsInUnit ( unit ) ;
50693: LD_ADDR_VAR 0 2
50697: PUSH
50698: LD_VAR 0 1
50702: PPUSH
50703: CALL_OW 310
50707: ST_TO_ADDR
// if not result then
50708: LD_VAR 0 2
50712: NOT
50713: IFFALSE 50725
// result := unit ;
50715: LD_ADDR_VAR 0 2
50719: PUSH
50720: LD_VAR 0 1
50724: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50725: LD_VAR 0 1
50729: PPUSH
50730: CALL_OW 87
// end ;
50734: LD_VAR 0 2
50738: RET
// export function ComMoveHex ( unit , hex ) ; begin
50739: LD_INT 0
50741: PPUSH
// if not hex then
50742: LD_VAR 0 2
50746: NOT
50747: IFFALSE 50751
// exit ;
50749: GO 50804
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50751: LD_VAR 0 2
50755: PUSH
50756: LD_INT 1
50758: ARRAY
50759: PPUSH
50760: LD_VAR 0 2
50764: PUSH
50765: LD_INT 2
50767: ARRAY
50768: PPUSH
50769: CALL_OW 428
50773: IFFALSE 50777
// exit ;
50775: GO 50804
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
50777: LD_VAR 0 1
50781: PPUSH
50782: LD_VAR 0 2
50786: PUSH
50787: LD_INT 1
50789: ARRAY
50790: PPUSH
50791: LD_VAR 0 2
50795: PUSH
50796: LD_INT 2
50798: ARRAY
50799: PPUSH
50800: CALL_OW 111
// end ;
50804: LD_VAR 0 3
50808: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50809: LD_INT 0
50811: PPUSH
50812: PPUSH
50813: PPUSH
// if not unit or not enemy then
50814: LD_VAR 0 1
50818: NOT
50819: PUSH
50820: LD_VAR 0 2
50824: NOT
50825: OR
50826: IFFALSE 50830
// exit ;
50828: GO 50954
// x := GetX ( enemy ) ;
50830: LD_ADDR_VAR 0 4
50834: PUSH
50835: LD_VAR 0 2
50839: PPUSH
50840: CALL_OW 250
50844: ST_TO_ADDR
// y := GetY ( enemy ) ;
50845: LD_ADDR_VAR 0 5
50849: PUSH
50850: LD_VAR 0 2
50854: PPUSH
50855: CALL_OW 251
50859: ST_TO_ADDR
// if ValidHex ( x , y ) then
50860: LD_VAR 0 4
50864: PPUSH
50865: LD_VAR 0 5
50869: PPUSH
50870: CALL_OW 488
50874: IFFALSE 50954
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
50876: LD_VAR 0 2
50880: PPUSH
50881: CALL_OW 247
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: IN
50896: PUSH
50897: LD_VAR 0 1
50901: PPUSH
50902: CALL_OW 255
50906: PPUSH
50907: LD_VAR 0 2
50911: PPUSH
50912: CALL_OW 292
50916: OR
50917: IFFALSE 50935
// ComAttackUnit ( unit , enemy ) else
50919: LD_VAR 0 1
50923: PPUSH
50924: LD_VAR 0 2
50928: PPUSH
50929: CALL_OW 115
50933: GO 50954
// ComAgressiveMove ( unit , x , y ) ;
50935: LD_VAR 0 1
50939: PPUSH
50940: LD_VAR 0 4
50944: PPUSH
50945: LD_VAR 0 5
50949: PPUSH
50950: CALL_OW 114
// end ;
50954: LD_VAR 0 3
50958: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
50959: LD_INT 0
50961: PPUSH
50962: PPUSH
50963: PPUSH
// list := AreaToList ( area , 0 ) ;
50964: LD_ADDR_VAR 0 5
50968: PUSH
50969: LD_VAR 0 1
50973: PPUSH
50974: LD_INT 0
50976: PPUSH
50977: CALL_OW 517
50981: ST_TO_ADDR
// if not list then
50982: LD_VAR 0 5
50986: NOT
50987: IFFALSE 50991
// exit ;
50989: GO 51121
// if all then
50991: LD_VAR 0 2
50995: IFFALSE 51083
// begin for i := 1 to list [ 1 ] do
50997: LD_ADDR_VAR 0 4
51001: PUSH
51002: DOUBLE
51003: LD_INT 1
51005: DEC
51006: ST_TO_ADDR
51007: LD_VAR 0 5
51011: PUSH
51012: LD_INT 1
51014: ARRAY
51015: PUSH
51016: FOR_TO
51017: IFFALSE 51079
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_VAR 0 3
51028: PPUSH
51029: LD_VAR 0 3
51033: PUSH
51034: LD_INT 1
51036: PLUS
51037: PPUSH
51038: LD_VAR 0 5
51042: PUSH
51043: LD_INT 1
51045: ARRAY
51046: PUSH
51047: LD_VAR 0 4
51051: ARRAY
51052: PUSH
51053: LD_VAR 0 5
51057: PUSH
51058: LD_INT 2
51060: ARRAY
51061: PUSH
51062: LD_VAR 0 4
51066: ARRAY
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PPUSH
51072: CALL_OW 1
51076: ST_TO_ADDR
51077: GO 51016
51079: POP
51080: POP
// exit ;
51081: GO 51121
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51083: LD_ADDR_VAR 0 3
51087: PUSH
51088: LD_VAR 0 5
51092: PUSH
51093: LD_INT 1
51095: ARRAY
51096: PUSH
51097: LD_INT 1
51099: ARRAY
51100: PUSH
51101: LD_VAR 0 5
51105: PUSH
51106: LD_INT 2
51108: ARRAY
51109: PUSH
51110: LD_INT 1
51112: ARRAY
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: ST_TO_ADDR
// end ;
51121: LD_VAR 0 3
51125: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51126: LD_INT 0
51128: PPUSH
51129: PPUSH
// list := AreaToList ( area , 0 ) ;
51130: LD_ADDR_VAR 0 4
51134: PUSH
51135: LD_VAR 0 1
51139: PPUSH
51140: LD_INT 0
51142: PPUSH
51143: CALL_OW 517
51147: ST_TO_ADDR
// if not list then
51148: LD_VAR 0 4
51152: NOT
51153: IFFALSE 51157
// exit ;
51155: GO 51198
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51157: LD_ADDR_VAR 0 3
51161: PUSH
51162: LD_VAR 0 4
51166: PUSH
51167: LD_INT 1
51169: ARRAY
51170: PUSH
51171: LD_INT 1
51173: ARRAY
51174: PUSH
51175: LD_VAR 0 4
51179: PUSH
51180: LD_INT 2
51182: ARRAY
51183: PUSH
51184: LD_INT 1
51186: ARRAY
51187: PUSH
51188: LD_VAR 0 2
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: ST_TO_ADDR
// end ;
51198: LD_VAR 0 3
51202: RET
// export function First ( array ) ; begin
51203: LD_INT 0
51205: PPUSH
// if not array then
51206: LD_VAR 0 1
51210: NOT
51211: IFFALSE 51215
// exit ;
51213: GO 51229
// result := array [ 1 ] ;
51215: LD_ADDR_VAR 0 2
51219: PUSH
51220: LD_VAR 0 1
51224: PUSH
51225: LD_INT 1
51227: ARRAY
51228: ST_TO_ADDR
// end ;
51229: LD_VAR 0 2
51233: RET
// export function Last ( array ) ; begin
51234: LD_INT 0
51236: PPUSH
// if not array then
51237: LD_VAR 0 1
51241: NOT
51242: IFFALSE 51246
// exit ;
51244: GO 51262
// result := array [ array ] ;
51246: LD_ADDR_VAR 0 2
51250: PUSH
51251: LD_VAR 0 1
51255: PUSH
51256: LD_VAR 0 1
51260: ARRAY
51261: ST_TO_ADDR
// end ;
51262: LD_VAR 0 2
51266: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51267: LD_INT 0
51269: PPUSH
51270: PPUSH
// result := [ ] ;
51271: LD_ADDR_VAR 0 5
51275: PUSH
51276: EMPTY
51277: ST_TO_ADDR
// if not array then
51278: LD_VAR 0 1
51282: NOT
51283: IFFALSE 51287
// exit ;
51285: GO 51399
// for i := 1 to array do
51287: LD_ADDR_VAR 0 6
51291: PUSH
51292: DOUBLE
51293: LD_INT 1
51295: DEC
51296: ST_TO_ADDR
51297: LD_VAR 0 1
51301: PUSH
51302: FOR_TO
51303: IFFALSE 51397
// if array [ i ] [ index ] = value then
51305: LD_VAR 0 1
51309: PUSH
51310: LD_VAR 0 6
51314: ARRAY
51315: PUSH
51316: LD_VAR 0 2
51320: ARRAY
51321: PUSH
51322: LD_VAR 0 3
51326: EQUAL
51327: IFFALSE 51395
// begin if indexColumn then
51329: LD_VAR 0 4
51333: IFFALSE 51369
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51335: LD_ADDR_VAR 0 5
51339: PUSH
51340: LD_VAR 0 5
51344: PPUSH
51345: LD_VAR 0 1
51349: PUSH
51350: LD_VAR 0 6
51354: ARRAY
51355: PUSH
51356: LD_VAR 0 4
51360: ARRAY
51361: PPUSH
51362: CALL 46587 0 2
51366: ST_TO_ADDR
51367: GO 51395
// result := Join ( result , array [ i ] ) ;
51369: LD_ADDR_VAR 0 5
51373: PUSH
51374: LD_VAR 0 5
51378: PPUSH
51379: LD_VAR 0 1
51383: PUSH
51384: LD_VAR 0 6
51388: ARRAY
51389: PPUSH
51390: CALL 46587 0 2
51394: ST_TO_ADDR
// end ;
51395: GO 51302
51397: POP
51398: POP
// end ;
51399: LD_VAR 0 5
51403: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51404: LD_INT 0
51406: PPUSH
// if not vehicles or not parkingPoint then
51407: LD_VAR 0 1
51411: NOT
51412: PUSH
51413: LD_VAR 0 2
51417: NOT
51418: OR
51419: IFFALSE 51423
// exit ;
51421: GO 51521
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51423: LD_ADDR_VAR 0 1
51427: PUSH
51428: LD_VAR 0 1
51432: PPUSH
51433: LD_INT 50
51435: PUSH
51436: EMPTY
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: PUSH
51442: LD_INT 92
51444: PUSH
51445: LD_VAR 0 2
51449: PUSH
51450: LD_INT 1
51452: ARRAY
51453: PUSH
51454: LD_VAR 0 2
51458: PUSH
51459: LD_INT 2
51461: ARRAY
51462: PUSH
51463: LD_INT 8
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PPUSH
51480: CALL_OW 72
51484: ST_TO_ADDR
// if not vehicles then
51485: LD_VAR 0 1
51489: NOT
51490: IFFALSE 51494
// exit ;
51492: GO 51521
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51494: LD_VAR 0 1
51498: PPUSH
51499: LD_VAR 0 2
51503: PUSH
51504: LD_INT 1
51506: ARRAY
51507: PPUSH
51508: LD_VAR 0 2
51512: PUSH
51513: LD_INT 2
51515: ARRAY
51516: PPUSH
51517: CALL_OW 111
// end ;
51521: LD_VAR 0 3
51525: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51526: LD_INT 0
51528: PPUSH
51529: PPUSH
51530: PPUSH
// if not side or not area then
51531: LD_VAR 0 1
51535: NOT
51536: PUSH
51537: LD_VAR 0 2
51541: NOT
51542: OR
51543: IFFALSE 51547
// exit ;
51545: GO 51666
// tmp := AreaToList ( area , 0 ) ;
51547: LD_ADDR_VAR 0 5
51551: PUSH
51552: LD_VAR 0 2
51556: PPUSH
51557: LD_INT 0
51559: PPUSH
51560: CALL_OW 517
51564: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51565: LD_ADDR_VAR 0 4
51569: PUSH
51570: DOUBLE
51571: LD_INT 1
51573: DEC
51574: ST_TO_ADDR
51575: LD_VAR 0 5
51579: PUSH
51580: LD_INT 1
51582: ARRAY
51583: PUSH
51584: FOR_TO
51585: IFFALSE 51664
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51587: LD_VAR 0 5
51591: PUSH
51592: LD_INT 1
51594: ARRAY
51595: PUSH
51596: LD_VAR 0 4
51600: ARRAY
51601: PPUSH
51602: LD_VAR 0 5
51606: PUSH
51607: LD_INT 2
51609: ARRAY
51610: PUSH
51611: LD_VAR 0 4
51615: ARRAY
51616: PPUSH
51617: CALL_OW 351
51621: IFFALSE 51662
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51623: LD_VAR 0 5
51627: PUSH
51628: LD_INT 1
51630: ARRAY
51631: PUSH
51632: LD_VAR 0 4
51636: ARRAY
51637: PPUSH
51638: LD_VAR 0 5
51642: PUSH
51643: LD_INT 2
51645: ARRAY
51646: PUSH
51647: LD_VAR 0 4
51651: ARRAY
51652: PPUSH
51653: LD_VAR 0 1
51657: PPUSH
51658: CALL_OW 244
// end ;
51662: GO 51584
51664: POP
51665: POP
// end ; end_of_file
51666: LD_VAR 0 3
51670: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
51671: LD_VAR 0 1
51675: PPUSH
51676: LD_VAR 0 2
51680: PPUSH
51681: LD_VAR 0 3
51685: PPUSH
51686: LD_VAR 0 4
51690: PPUSH
51691: LD_VAR 0 5
51695: PPUSH
51696: LD_VAR 0 6
51700: PPUSH
51701: CALL 51902 0 6
// end ;
51705: PPOPN 6
51707: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
51708: LD_INT 0
51710: PPUSH
// begin if not units then
51711: LD_VAR 0 1
51715: NOT
51716: IFFALSE 51720
// exit ;
51718: GO 51720
// end ;
51720: PPOPN 7
51722: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
51723: CALL 51789 0 0
// end ; end_of_file
51727: PPOPN 1
51729: END
// export globalGameSaveCounter ; every 0 0$1 do
51730: GO 51732
51732: DISABLE
// begin enable ;
51733: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51734: LD_STRING updateTimer(
51736: PUSH
51737: LD_OWVAR 1
51741: STR
51742: PUSH
51743: LD_STRING );
51745: STR
51746: PPUSH
51747: CALL_OW 559
// end ;
51751: END
// every 0 0$1 do
51752: GO 51754
51754: DISABLE
// begin globalGameSaveCounter := 0 ;
51755: LD_ADDR_EXP 43
51759: PUSH
51760: LD_INT 0
51762: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51763: LD_STRING setGameSaveCounter(0)
51765: PPUSH
51766: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51770: LD_STRING initStreamRollete();
51772: PPUSH
51773: CALL_OW 559
// InitStreamMode ;
51777: CALL 53120 0 0
// DefineStreamItems ( false ) ;
51781: LD_INT 0
51783: PPUSH
51784: CALL 53584 0 1
// end ;
51788: END
// export function SOS_MapStart ( ) ; begin
51789: LD_INT 0
51791: PPUSH
// if streamModeActive then
51792: LD_EXP 44
51796: IFFALSE 51805
// DefineStreamItems ( true ) ;
51798: LD_INT 1
51800: PPUSH
51801: CALL 53584 0 1
// UpdateLuaVariables ( ) ;
51805: CALL 51822 0 0
// UpdateFactoryWaypoints ( ) ;
51809: CALL 66453 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51813: CALL 66710 0 0
// end ;
51817: LD_VAR 0 1
51821: RET
// function UpdateLuaVariables ( ) ; begin
51822: LD_INT 0
51824: PPUSH
// if globalGameSaveCounter then
51825: LD_EXP 43
51829: IFFALSE 51863
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51831: LD_ADDR_EXP 43
51835: PUSH
51836: LD_EXP 43
51840: PPUSH
51841: CALL 47948 0 1
51845: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51846: LD_STRING setGameSaveCounter(
51848: PUSH
51849: LD_EXP 43
51853: STR
51854: PUSH
51855: LD_STRING )
51857: STR
51858: PPUSH
51859: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51863: LD_STRING setGameDifficulty(
51865: PUSH
51866: LD_OWVAR 67
51870: STR
51871: PUSH
51872: LD_STRING )
51874: STR
51875: PPUSH
51876: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
51880: LD_STRING displayDifficulty(
51882: PUSH
51883: LD_OWVAR 67
51887: STR
51888: PUSH
51889: LD_STRING )
51891: STR
51892: PPUSH
51893: CALL_OW 559
// end ;
51897: LD_VAR 0 1
51901: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51902: LD_INT 0
51904: PPUSH
// if p2 = stream_mode then
51905: LD_VAR 0 2
51909: PUSH
51910: LD_INT 100
51912: EQUAL
51913: IFFALSE 52916
// begin if not StreamModeActive then
51915: LD_EXP 44
51919: NOT
51920: IFFALSE 51930
// StreamModeActive := true ;
51922: LD_ADDR_EXP 44
51926: PUSH
51927: LD_INT 1
51929: ST_TO_ADDR
// if p3 = 0 then
51930: LD_VAR 0 3
51934: PUSH
51935: LD_INT 0
51937: EQUAL
51938: IFFALSE 51944
// InitStreamMode ;
51940: CALL 53120 0 0
// if p3 = 1 then
51944: LD_VAR 0 3
51948: PUSH
51949: LD_INT 1
51951: EQUAL
51952: IFFALSE 51962
// sRocket := true ;
51954: LD_ADDR_EXP 49
51958: PUSH
51959: LD_INT 1
51961: ST_TO_ADDR
// if p3 = 2 then
51962: LD_VAR 0 3
51966: PUSH
51967: LD_INT 2
51969: EQUAL
51970: IFFALSE 51980
// sSpeed := true ;
51972: LD_ADDR_EXP 48
51976: PUSH
51977: LD_INT 1
51979: ST_TO_ADDR
// if p3 = 3 then
51980: LD_VAR 0 3
51984: PUSH
51985: LD_INT 3
51987: EQUAL
51988: IFFALSE 51998
// sEngine := true ;
51990: LD_ADDR_EXP 50
51994: PUSH
51995: LD_INT 1
51997: ST_TO_ADDR
// if p3 = 4 then
51998: LD_VAR 0 3
52002: PUSH
52003: LD_INT 4
52005: EQUAL
52006: IFFALSE 52016
// sSpec := true ;
52008: LD_ADDR_EXP 47
52012: PUSH
52013: LD_INT 1
52015: ST_TO_ADDR
// if p3 = 5 then
52016: LD_VAR 0 3
52020: PUSH
52021: LD_INT 5
52023: EQUAL
52024: IFFALSE 52034
// sLevel := true ;
52026: LD_ADDR_EXP 51
52030: PUSH
52031: LD_INT 1
52033: ST_TO_ADDR
// if p3 = 6 then
52034: LD_VAR 0 3
52038: PUSH
52039: LD_INT 6
52041: EQUAL
52042: IFFALSE 52052
// sArmoury := true ;
52044: LD_ADDR_EXP 52
52048: PUSH
52049: LD_INT 1
52051: ST_TO_ADDR
// if p3 = 7 then
52052: LD_VAR 0 3
52056: PUSH
52057: LD_INT 7
52059: EQUAL
52060: IFFALSE 52070
// sRadar := true ;
52062: LD_ADDR_EXP 53
52066: PUSH
52067: LD_INT 1
52069: ST_TO_ADDR
// if p3 = 8 then
52070: LD_VAR 0 3
52074: PUSH
52075: LD_INT 8
52077: EQUAL
52078: IFFALSE 52088
// sBunker := true ;
52080: LD_ADDR_EXP 54
52084: PUSH
52085: LD_INT 1
52087: ST_TO_ADDR
// if p3 = 9 then
52088: LD_VAR 0 3
52092: PUSH
52093: LD_INT 9
52095: EQUAL
52096: IFFALSE 52106
// sHack := true ;
52098: LD_ADDR_EXP 55
52102: PUSH
52103: LD_INT 1
52105: ST_TO_ADDR
// if p3 = 10 then
52106: LD_VAR 0 3
52110: PUSH
52111: LD_INT 10
52113: EQUAL
52114: IFFALSE 52124
// sFire := true ;
52116: LD_ADDR_EXP 56
52120: PUSH
52121: LD_INT 1
52123: ST_TO_ADDR
// if p3 = 11 then
52124: LD_VAR 0 3
52128: PUSH
52129: LD_INT 11
52131: EQUAL
52132: IFFALSE 52142
// sRefresh := true ;
52134: LD_ADDR_EXP 57
52138: PUSH
52139: LD_INT 1
52141: ST_TO_ADDR
// if p3 = 12 then
52142: LD_VAR 0 3
52146: PUSH
52147: LD_INT 12
52149: EQUAL
52150: IFFALSE 52160
// sExp := true ;
52152: LD_ADDR_EXP 58
52156: PUSH
52157: LD_INT 1
52159: ST_TO_ADDR
// if p3 = 13 then
52160: LD_VAR 0 3
52164: PUSH
52165: LD_INT 13
52167: EQUAL
52168: IFFALSE 52178
// sDepot := true ;
52170: LD_ADDR_EXP 59
52174: PUSH
52175: LD_INT 1
52177: ST_TO_ADDR
// if p3 = 14 then
52178: LD_VAR 0 3
52182: PUSH
52183: LD_INT 14
52185: EQUAL
52186: IFFALSE 52196
// sFlag := true ;
52188: LD_ADDR_EXP 60
52192: PUSH
52193: LD_INT 1
52195: ST_TO_ADDR
// if p3 = 15 then
52196: LD_VAR 0 3
52200: PUSH
52201: LD_INT 15
52203: EQUAL
52204: IFFALSE 52214
// sKamikadze := true ;
52206: LD_ADDR_EXP 68
52210: PUSH
52211: LD_INT 1
52213: ST_TO_ADDR
// if p3 = 16 then
52214: LD_VAR 0 3
52218: PUSH
52219: LD_INT 16
52221: EQUAL
52222: IFFALSE 52232
// sTroll := true ;
52224: LD_ADDR_EXP 69
52228: PUSH
52229: LD_INT 1
52231: ST_TO_ADDR
// if p3 = 17 then
52232: LD_VAR 0 3
52236: PUSH
52237: LD_INT 17
52239: EQUAL
52240: IFFALSE 52250
// sSlow := true ;
52242: LD_ADDR_EXP 70
52246: PUSH
52247: LD_INT 1
52249: ST_TO_ADDR
// if p3 = 18 then
52250: LD_VAR 0 3
52254: PUSH
52255: LD_INT 18
52257: EQUAL
52258: IFFALSE 52268
// sLack := true ;
52260: LD_ADDR_EXP 71
52264: PUSH
52265: LD_INT 1
52267: ST_TO_ADDR
// if p3 = 19 then
52268: LD_VAR 0 3
52272: PUSH
52273: LD_INT 19
52275: EQUAL
52276: IFFALSE 52286
// sTank := true ;
52278: LD_ADDR_EXP 73
52282: PUSH
52283: LD_INT 1
52285: ST_TO_ADDR
// if p3 = 20 then
52286: LD_VAR 0 3
52290: PUSH
52291: LD_INT 20
52293: EQUAL
52294: IFFALSE 52304
// sRemote := true ;
52296: LD_ADDR_EXP 74
52300: PUSH
52301: LD_INT 1
52303: ST_TO_ADDR
// if p3 = 21 then
52304: LD_VAR 0 3
52308: PUSH
52309: LD_INT 21
52311: EQUAL
52312: IFFALSE 52322
// sPowell := true ;
52314: LD_ADDR_EXP 75
52318: PUSH
52319: LD_INT 1
52321: ST_TO_ADDR
// if p3 = 22 then
52322: LD_VAR 0 3
52326: PUSH
52327: LD_INT 22
52329: EQUAL
52330: IFFALSE 52340
// sTeleport := true ;
52332: LD_ADDR_EXP 78
52336: PUSH
52337: LD_INT 1
52339: ST_TO_ADDR
// if p3 = 23 then
52340: LD_VAR 0 3
52344: PUSH
52345: LD_INT 23
52347: EQUAL
52348: IFFALSE 52358
// sOilTower := true ;
52350: LD_ADDR_EXP 80
52354: PUSH
52355: LD_INT 1
52357: ST_TO_ADDR
// if p3 = 24 then
52358: LD_VAR 0 3
52362: PUSH
52363: LD_INT 24
52365: EQUAL
52366: IFFALSE 52376
// sShovel := true ;
52368: LD_ADDR_EXP 81
52372: PUSH
52373: LD_INT 1
52375: ST_TO_ADDR
// if p3 = 25 then
52376: LD_VAR 0 3
52380: PUSH
52381: LD_INT 25
52383: EQUAL
52384: IFFALSE 52394
// sSheik := true ;
52386: LD_ADDR_EXP 82
52390: PUSH
52391: LD_INT 1
52393: ST_TO_ADDR
// if p3 = 26 then
52394: LD_VAR 0 3
52398: PUSH
52399: LD_INT 26
52401: EQUAL
52402: IFFALSE 52412
// sEarthquake := true ;
52404: LD_ADDR_EXP 84
52408: PUSH
52409: LD_INT 1
52411: ST_TO_ADDR
// if p3 = 27 then
52412: LD_VAR 0 3
52416: PUSH
52417: LD_INT 27
52419: EQUAL
52420: IFFALSE 52430
// sAI := true ;
52422: LD_ADDR_EXP 85
52426: PUSH
52427: LD_INT 1
52429: ST_TO_ADDR
// if p3 = 28 then
52430: LD_VAR 0 3
52434: PUSH
52435: LD_INT 28
52437: EQUAL
52438: IFFALSE 52448
// sCargo := true ;
52440: LD_ADDR_EXP 88
52444: PUSH
52445: LD_INT 1
52447: ST_TO_ADDR
// if p3 = 29 then
52448: LD_VAR 0 3
52452: PUSH
52453: LD_INT 29
52455: EQUAL
52456: IFFALSE 52466
// sDLaser := true ;
52458: LD_ADDR_EXP 89
52462: PUSH
52463: LD_INT 1
52465: ST_TO_ADDR
// if p3 = 30 then
52466: LD_VAR 0 3
52470: PUSH
52471: LD_INT 30
52473: EQUAL
52474: IFFALSE 52484
// sExchange := true ;
52476: LD_ADDR_EXP 90
52480: PUSH
52481: LD_INT 1
52483: ST_TO_ADDR
// if p3 = 31 then
52484: LD_VAR 0 3
52488: PUSH
52489: LD_INT 31
52491: EQUAL
52492: IFFALSE 52502
// sFac := true ;
52494: LD_ADDR_EXP 91
52498: PUSH
52499: LD_INT 1
52501: ST_TO_ADDR
// if p3 = 32 then
52502: LD_VAR 0 3
52506: PUSH
52507: LD_INT 32
52509: EQUAL
52510: IFFALSE 52520
// sPower := true ;
52512: LD_ADDR_EXP 92
52516: PUSH
52517: LD_INT 1
52519: ST_TO_ADDR
// if p3 = 33 then
52520: LD_VAR 0 3
52524: PUSH
52525: LD_INT 33
52527: EQUAL
52528: IFFALSE 52538
// sRandom := true ;
52530: LD_ADDR_EXP 93
52534: PUSH
52535: LD_INT 1
52537: ST_TO_ADDR
// if p3 = 34 then
52538: LD_VAR 0 3
52542: PUSH
52543: LD_INT 34
52545: EQUAL
52546: IFFALSE 52556
// sShield := true ;
52548: LD_ADDR_EXP 94
52552: PUSH
52553: LD_INT 1
52555: ST_TO_ADDR
// if p3 = 35 then
52556: LD_VAR 0 3
52560: PUSH
52561: LD_INT 35
52563: EQUAL
52564: IFFALSE 52574
// sTime := true ;
52566: LD_ADDR_EXP 95
52570: PUSH
52571: LD_INT 1
52573: ST_TO_ADDR
// if p3 = 36 then
52574: LD_VAR 0 3
52578: PUSH
52579: LD_INT 36
52581: EQUAL
52582: IFFALSE 52592
// sTools := true ;
52584: LD_ADDR_EXP 96
52588: PUSH
52589: LD_INT 1
52591: ST_TO_ADDR
// if p3 = 101 then
52592: LD_VAR 0 3
52596: PUSH
52597: LD_INT 101
52599: EQUAL
52600: IFFALSE 52610
// sSold := true ;
52602: LD_ADDR_EXP 61
52606: PUSH
52607: LD_INT 1
52609: ST_TO_ADDR
// if p3 = 102 then
52610: LD_VAR 0 3
52614: PUSH
52615: LD_INT 102
52617: EQUAL
52618: IFFALSE 52628
// sDiff := true ;
52620: LD_ADDR_EXP 62
52624: PUSH
52625: LD_INT 1
52627: ST_TO_ADDR
// if p3 = 103 then
52628: LD_VAR 0 3
52632: PUSH
52633: LD_INT 103
52635: EQUAL
52636: IFFALSE 52646
// sFog := true ;
52638: LD_ADDR_EXP 65
52642: PUSH
52643: LD_INT 1
52645: ST_TO_ADDR
// if p3 = 104 then
52646: LD_VAR 0 3
52650: PUSH
52651: LD_INT 104
52653: EQUAL
52654: IFFALSE 52664
// sReset := true ;
52656: LD_ADDR_EXP 66
52660: PUSH
52661: LD_INT 1
52663: ST_TO_ADDR
// if p3 = 105 then
52664: LD_VAR 0 3
52668: PUSH
52669: LD_INT 105
52671: EQUAL
52672: IFFALSE 52682
// sSun := true ;
52674: LD_ADDR_EXP 67
52678: PUSH
52679: LD_INT 1
52681: ST_TO_ADDR
// if p3 = 106 then
52682: LD_VAR 0 3
52686: PUSH
52687: LD_INT 106
52689: EQUAL
52690: IFFALSE 52700
// sTiger := true ;
52692: LD_ADDR_EXP 63
52696: PUSH
52697: LD_INT 1
52699: ST_TO_ADDR
// if p3 = 107 then
52700: LD_VAR 0 3
52704: PUSH
52705: LD_INT 107
52707: EQUAL
52708: IFFALSE 52718
// sBomb := true ;
52710: LD_ADDR_EXP 64
52714: PUSH
52715: LD_INT 1
52717: ST_TO_ADDR
// if p3 = 108 then
52718: LD_VAR 0 3
52722: PUSH
52723: LD_INT 108
52725: EQUAL
52726: IFFALSE 52736
// sWound := true ;
52728: LD_ADDR_EXP 72
52732: PUSH
52733: LD_INT 1
52735: ST_TO_ADDR
// if p3 = 109 then
52736: LD_VAR 0 3
52740: PUSH
52741: LD_INT 109
52743: EQUAL
52744: IFFALSE 52754
// sBetray := true ;
52746: LD_ADDR_EXP 76
52750: PUSH
52751: LD_INT 1
52753: ST_TO_ADDR
// if p3 = 110 then
52754: LD_VAR 0 3
52758: PUSH
52759: LD_INT 110
52761: EQUAL
52762: IFFALSE 52772
// sContamin := true ;
52764: LD_ADDR_EXP 77
52768: PUSH
52769: LD_INT 1
52771: ST_TO_ADDR
// if p3 = 111 then
52772: LD_VAR 0 3
52776: PUSH
52777: LD_INT 111
52779: EQUAL
52780: IFFALSE 52790
// sOil := true ;
52782: LD_ADDR_EXP 79
52786: PUSH
52787: LD_INT 1
52789: ST_TO_ADDR
// if p3 = 112 then
52790: LD_VAR 0 3
52794: PUSH
52795: LD_INT 112
52797: EQUAL
52798: IFFALSE 52808
// sStu := true ;
52800: LD_ADDR_EXP 83
52804: PUSH
52805: LD_INT 1
52807: ST_TO_ADDR
// if p3 = 113 then
52808: LD_VAR 0 3
52812: PUSH
52813: LD_INT 113
52815: EQUAL
52816: IFFALSE 52826
// sBazooka := true ;
52818: LD_ADDR_EXP 86
52822: PUSH
52823: LD_INT 1
52825: ST_TO_ADDR
// if p3 = 114 then
52826: LD_VAR 0 3
52830: PUSH
52831: LD_INT 114
52833: EQUAL
52834: IFFALSE 52844
// sMortar := true ;
52836: LD_ADDR_EXP 87
52840: PUSH
52841: LD_INT 1
52843: ST_TO_ADDR
// if p3 = 115 then
52844: LD_VAR 0 3
52848: PUSH
52849: LD_INT 115
52851: EQUAL
52852: IFFALSE 52862
// sRanger := true ;
52854: LD_ADDR_EXP 97
52858: PUSH
52859: LD_INT 1
52861: ST_TO_ADDR
// if p3 = 116 then
52862: LD_VAR 0 3
52866: PUSH
52867: LD_INT 116
52869: EQUAL
52870: IFFALSE 52880
// sComputer := true ;
52872: LD_ADDR_EXP 98
52876: PUSH
52877: LD_INT 1
52879: ST_TO_ADDR
// if p3 = 117 then
52880: LD_VAR 0 3
52884: PUSH
52885: LD_INT 117
52887: EQUAL
52888: IFFALSE 52898
// s30 := true ;
52890: LD_ADDR_EXP 99
52894: PUSH
52895: LD_INT 1
52897: ST_TO_ADDR
// if p3 = 118 then
52898: LD_VAR 0 3
52902: PUSH
52903: LD_INT 118
52905: EQUAL
52906: IFFALSE 52916
// s60 := true ;
52908: LD_ADDR_EXP 100
52912: PUSH
52913: LD_INT 1
52915: ST_TO_ADDR
// end ; if p2 = hack_mode then
52916: LD_VAR 0 2
52920: PUSH
52921: LD_INT 101
52923: EQUAL
52924: IFFALSE 53052
// begin case p3 of 1 :
52926: LD_VAR 0 3
52930: PUSH
52931: LD_INT 1
52933: DOUBLE
52934: EQUAL
52935: IFTRUE 52939
52937: GO 52946
52939: POP
// hHackUnlimitedResources ; 2 :
52940: CALL 65199 0 0
52944: GO 53052
52946: LD_INT 2
52948: DOUBLE
52949: EQUAL
52950: IFTRUE 52954
52952: GO 52961
52954: POP
// hHackSetLevel10 ; 3 :
52955: CALL 65332 0 0
52959: GO 53052
52961: LD_INT 3
52963: DOUBLE
52964: EQUAL
52965: IFTRUE 52969
52967: GO 52976
52969: POP
// hHackSetLevel10YourUnits ; 4 :
52970: CALL 65417 0 0
52974: GO 53052
52976: LD_INT 4
52978: DOUBLE
52979: EQUAL
52980: IFTRUE 52984
52982: GO 52991
52984: POP
// hHackInvincible ; 5 :
52985: CALL 65865 0 0
52989: GO 53052
52991: LD_INT 5
52993: DOUBLE
52994: EQUAL
52995: IFTRUE 52999
52997: GO 53006
52999: POP
// hHackInvisible ; 6 :
53000: CALL 65976 0 0
53004: GO 53052
53006: LD_INT 6
53008: DOUBLE
53009: EQUAL
53010: IFTRUE 53014
53012: GO 53021
53014: POP
// hHackChangeYourSide ; 7 :
53015: CALL 66033 0 0
53019: GO 53052
53021: LD_INT 7
53023: DOUBLE
53024: EQUAL
53025: IFTRUE 53029
53027: GO 53036
53029: POP
// hHackChangeUnitSide ; 8 :
53030: CALL 66075 0 0
53034: GO 53052
53036: LD_INT 8
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53044
53042: GO 53051
53044: POP
// hHackFog ; end ;
53045: CALL 66176 0 0
53049: GO 53052
53051: POP
// end ; if p2 = game_save_mode then
53052: LD_VAR 0 2
53056: PUSH
53057: LD_INT 102
53059: EQUAL
53060: IFFALSE 53115
// begin if p3 = 1 then
53062: LD_VAR 0 3
53066: PUSH
53067: LD_INT 1
53069: EQUAL
53070: IFFALSE 53082
// globalGameSaveCounter := p4 ;
53072: LD_ADDR_EXP 43
53076: PUSH
53077: LD_VAR 0 4
53081: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
53082: LD_VAR 0 3
53086: PUSH
53087: LD_INT 2
53089: EQUAL
53090: PUSH
53091: LD_EXP 43
53095: AND
53096: IFFALSE 53115
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53098: LD_STRING setGameSaveCounter(
53100: PUSH
53101: LD_EXP 43
53105: STR
53106: PUSH
53107: LD_STRING )
53109: STR
53110: PPUSH
53111: CALL_OW 559
// end ; end ;
53115: LD_VAR 0 7
53119: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
53120: LD_INT 0
53122: PPUSH
// streamModeActive := false ;
53123: LD_ADDR_EXP 44
53127: PUSH
53128: LD_INT 0
53130: ST_TO_ADDR
// normalCounter := 36 ;
53131: LD_ADDR_EXP 45
53135: PUSH
53136: LD_INT 36
53138: ST_TO_ADDR
// hardcoreCounter := 18 ;
53139: LD_ADDR_EXP 46
53143: PUSH
53144: LD_INT 18
53146: ST_TO_ADDR
// sRocket := false ;
53147: LD_ADDR_EXP 49
53151: PUSH
53152: LD_INT 0
53154: ST_TO_ADDR
// sSpeed := false ;
53155: LD_ADDR_EXP 48
53159: PUSH
53160: LD_INT 0
53162: ST_TO_ADDR
// sEngine := false ;
53163: LD_ADDR_EXP 50
53167: PUSH
53168: LD_INT 0
53170: ST_TO_ADDR
// sSpec := false ;
53171: LD_ADDR_EXP 47
53175: PUSH
53176: LD_INT 0
53178: ST_TO_ADDR
// sLevel := false ;
53179: LD_ADDR_EXP 51
53183: PUSH
53184: LD_INT 0
53186: ST_TO_ADDR
// sArmoury := false ;
53187: LD_ADDR_EXP 52
53191: PUSH
53192: LD_INT 0
53194: ST_TO_ADDR
// sRadar := false ;
53195: LD_ADDR_EXP 53
53199: PUSH
53200: LD_INT 0
53202: ST_TO_ADDR
// sBunker := false ;
53203: LD_ADDR_EXP 54
53207: PUSH
53208: LD_INT 0
53210: ST_TO_ADDR
// sHack := false ;
53211: LD_ADDR_EXP 55
53215: PUSH
53216: LD_INT 0
53218: ST_TO_ADDR
// sFire := false ;
53219: LD_ADDR_EXP 56
53223: PUSH
53224: LD_INT 0
53226: ST_TO_ADDR
// sRefresh := false ;
53227: LD_ADDR_EXP 57
53231: PUSH
53232: LD_INT 0
53234: ST_TO_ADDR
// sExp := false ;
53235: LD_ADDR_EXP 58
53239: PUSH
53240: LD_INT 0
53242: ST_TO_ADDR
// sDepot := false ;
53243: LD_ADDR_EXP 59
53247: PUSH
53248: LD_INT 0
53250: ST_TO_ADDR
// sFlag := false ;
53251: LD_ADDR_EXP 60
53255: PUSH
53256: LD_INT 0
53258: ST_TO_ADDR
// sKamikadze := false ;
53259: LD_ADDR_EXP 68
53263: PUSH
53264: LD_INT 0
53266: ST_TO_ADDR
// sTroll := false ;
53267: LD_ADDR_EXP 69
53271: PUSH
53272: LD_INT 0
53274: ST_TO_ADDR
// sSlow := false ;
53275: LD_ADDR_EXP 70
53279: PUSH
53280: LD_INT 0
53282: ST_TO_ADDR
// sLack := false ;
53283: LD_ADDR_EXP 71
53287: PUSH
53288: LD_INT 0
53290: ST_TO_ADDR
// sTank := false ;
53291: LD_ADDR_EXP 73
53295: PUSH
53296: LD_INT 0
53298: ST_TO_ADDR
// sRemote := false ;
53299: LD_ADDR_EXP 74
53303: PUSH
53304: LD_INT 0
53306: ST_TO_ADDR
// sPowell := false ;
53307: LD_ADDR_EXP 75
53311: PUSH
53312: LD_INT 0
53314: ST_TO_ADDR
// sTeleport := false ;
53315: LD_ADDR_EXP 78
53319: PUSH
53320: LD_INT 0
53322: ST_TO_ADDR
// sOilTower := false ;
53323: LD_ADDR_EXP 80
53327: PUSH
53328: LD_INT 0
53330: ST_TO_ADDR
// sShovel := false ;
53331: LD_ADDR_EXP 81
53335: PUSH
53336: LD_INT 0
53338: ST_TO_ADDR
// sSheik := false ;
53339: LD_ADDR_EXP 82
53343: PUSH
53344: LD_INT 0
53346: ST_TO_ADDR
// sEarthquake := false ;
53347: LD_ADDR_EXP 84
53351: PUSH
53352: LD_INT 0
53354: ST_TO_ADDR
// sAI := false ;
53355: LD_ADDR_EXP 85
53359: PUSH
53360: LD_INT 0
53362: ST_TO_ADDR
// sCargo := false ;
53363: LD_ADDR_EXP 88
53367: PUSH
53368: LD_INT 0
53370: ST_TO_ADDR
// sDLaser := false ;
53371: LD_ADDR_EXP 89
53375: PUSH
53376: LD_INT 0
53378: ST_TO_ADDR
// sExchange := false ;
53379: LD_ADDR_EXP 90
53383: PUSH
53384: LD_INT 0
53386: ST_TO_ADDR
// sFac := false ;
53387: LD_ADDR_EXP 91
53391: PUSH
53392: LD_INT 0
53394: ST_TO_ADDR
// sPower := false ;
53395: LD_ADDR_EXP 92
53399: PUSH
53400: LD_INT 0
53402: ST_TO_ADDR
// sRandom := false ;
53403: LD_ADDR_EXP 93
53407: PUSH
53408: LD_INT 0
53410: ST_TO_ADDR
// sShield := false ;
53411: LD_ADDR_EXP 94
53415: PUSH
53416: LD_INT 0
53418: ST_TO_ADDR
// sTime := false ;
53419: LD_ADDR_EXP 95
53423: PUSH
53424: LD_INT 0
53426: ST_TO_ADDR
// sTools := false ;
53427: LD_ADDR_EXP 96
53431: PUSH
53432: LD_INT 0
53434: ST_TO_ADDR
// sSold := false ;
53435: LD_ADDR_EXP 61
53439: PUSH
53440: LD_INT 0
53442: ST_TO_ADDR
// sDiff := false ;
53443: LD_ADDR_EXP 62
53447: PUSH
53448: LD_INT 0
53450: ST_TO_ADDR
// sFog := false ;
53451: LD_ADDR_EXP 65
53455: PUSH
53456: LD_INT 0
53458: ST_TO_ADDR
// sReset := false ;
53459: LD_ADDR_EXP 66
53463: PUSH
53464: LD_INT 0
53466: ST_TO_ADDR
// sSun := false ;
53467: LD_ADDR_EXP 67
53471: PUSH
53472: LD_INT 0
53474: ST_TO_ADDR
// sTiger := false ;
53475: LD_ADDR_EXP 63
53479: PUSH
53480: LD_INT 0
53482: ST_TO_ADDR
// sBomb := false ;
53483: LD_ADDR_EXP 64
53487: PUSH
53488: LD_INT 0
53490: ST_TO_ADDR
// sWound := false ;
53491: LD_ADDR_EXP 72
53495: PUSH
53496: LD_INT 0
53498: ST_TO_ADDR
// sBetray := false ;
53499: LD_ADDR_EXP 76
53503: PUSH
53504: LD_INT 0
53506: ST_TO_ADDR
// sContamin := false ;
53507: LD_ADDR_EXP 77
53511: PUSH
53512: LD_INT 0
53514: ST_TO_ADDR
// sOil := false ;
53515: LD_ADDR_EXP 79
53519: PUSH
53520: LD_INT 0
53522: ST_TO_ADDR
// sStu := false ;
53523: LD_ADDR_EXP 83
53527: PUSH
53528: LD_INT 0
53530: ST_TO_ADDR
// sBazooka := false ;
53531: LD_ADDR_EXP 86
53535: PUSH
53536: LD_INT 0
53538: ST_TO_ADDR
// sMortar := false ;
53539: LD_ADDR_EXP 87
53543: PUSH
53544: LD_INT 0
53546: ST_TO_ADDR
// sRanger := false ;
53547: LD_ADDR_EXP 97
53551: PUSH
53552: LD_INT 0
53554: ST_TO_ADDR
// sComputer := false ;
53555: LD_ADDR_EXP 98
53559: PUSH
53560: LD_INT 0
53562: ST_TO_ADDR
// s30 := false ;
53563: LD_ADDR_EXP 99
53567: PUSH
53568: LD_INT 0
53570: ST_TO_ADDR
// s60 := false ;
53571: LD_ADDR_EXP 100
53575: PUSH
53576: LD_INT 0
53578: ST_TO_ADDR
// end ;
53579: LD_VAR 0 1
53583: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53584: LD_INT 0
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
// result := [ ] ;
53593: LD_ADDR_VAR 0 2
53597: PUSH
53598: EMPTY
53599: ST_TO_ADDR
// if campaign_id = 1 then
53600: LD_OWVAR 69
53604: PUSH
53605: LD_INT 1
53607: EQUAL
53608: IFFALSE 56774
// begin case mission_number of 1 :
53610: LD_OWVAR 70
53614: PUSH
53615: LD_INT 1
53617: DOUBLE
53618: EQUAL
53619: IFTRUE 53623
53621: GO 53699
53623: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53624: LD_ADDR_VAR 0 2
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: LD_INT 11
53637: PUSH
53638: LD_INT 12
53640: PUSH
53641: LD_INT 15
53643: PUSH
53644: LD_INT 16
53646: PUSH
53647: LD_INT 22
53649: PUSH
53650: LD_INT 23
53652: PUSH
53653: LD_INT 26
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 101
53669: PUSH
53670: LD_INT 102
53672: PUSH
53673: LD_INT 106
53675: PUSH
53676: LD_INT 116
53678: PUSH
53679: LD_INT 117
53681: PUSH
53682: LD_INT 118
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: ST_TO_ADDR
53697: GO 56772
53699: LD_INT 2
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53707
53705: GO 53791
53707: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53708: LD_ADDR_VAR 0 2
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 4
53718: PUSH
53719: LD_INT 11
53721: PUSH
53722: LD_INT 12
53724: PUSH
53725: LD_INT 15
53727: PUSH
53728: LD_INT 16
53730: PUSH
53731: LD_INT 22
53733: PUSH
53734: LD_INT 23
53736: PUSH
53737: LD_INT 26
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 101
53753: PUSH
53754: LD_INT 102
53756: PUSH
53757: LD_INT 105
53759: PUSH
53760: LD_INT 106
53762: PUSH
53763: LD_INT 108
53765: PUSH
53766: LD_INT 116
53768: PUSH
53769: LD_INT 117
53771: PUSH
53772: LD_INT 118
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: ST_TO_ADDR
53789: GO 56772
53791: LD_INT 3
53793: DOUBLE
53794: EQUAL
53795: IFTRUE 53799
53797: GO 53887
53799: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53800: LD_ADDR_VAR 0 2
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: LD_INT 5
53813: PUSH
53814: LD_INT 11
53816: PUSH
53817: LD_INT 12
53819: PUSH
53820: LD_INT 15
53822: PUSH
53823: LD_INT 16
53825: PUSH
53826: LD_INT 22
53828: PUSH
53829: LD_INT 26
53831: PUSH
53832: LD_INT 36
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 101
53849: PUSH
53850: LD_INT 102
53852: PUSH
53853: LD_INT 105
53855: PUSH
53856: LD_INT 106
53858: PUSH
53859: LD_INT 108
53861: PUSH
53862: LD_INT 116
53864: PUSH
53865: LD_INT 117
53867: PUSH
53868: LD_INT 118
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: ST_TO_ADDR
53885: GO 56772
53887: LD_INT 4
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53895
53893: GO 53991
53895: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53896: LD_ADDR_VAR 0 2
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 4
53906: PUSH
53907: LD_INT 5
53909: PUSH
53910: LD_INT 8
53912: PUSH
53913: LD_INT 11
53915: PUSH
53916: LD_INT 12
53918: PUSH
53919: LD_INT 15
53921: PUSH
53922: LD_INT 16
53924: PUSH
53925: LD_INT 22
53927: PUSH
53928: LD_INT 23
53930: PUSH
53931: LD_INT 26
53933: PUSH
53934: LD_INT 36
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 101
53953: PUSH
53954: LD_INT 102
53956: PUSH
53957: LD_INT 105
53959: PUSH
53960: LD_INT 106
53962: PUSH
53963: LD_INT 108
53965: PUSH
53966: LD_INT 116
53968: PUSH
53969: LD_INT 117
53971: PUSH
53972: LD_INT 118
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: ST_TO_ADDR
53989: GO 56772
53991: LD_INT 5
53993: DOUBLE
53994: EQUAL
53995: IFTRUE 53999
53997: GO 54111
53999: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
54000: LD_ADDR_VAR 0 2
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 4
54010: PUSH
54011: LD_INT 5
54013: PUSH
54014: LD_INT 6
54016: PUSH
54017: LD_INT 8
54019: PUSH
54020: LD_INT 11
54022: PUSH
54023: LD_INT 12
54025: PUSH
54026: LD_INT 15
54028: PUSH
54029: LD_INT 16
54031: PUSH
54032: LD_INT 22
54034: PUSH
54035: LD_INT 23
54037: PUSH
54038: LD_INT 25
54040: PUSH
54041: LD_INT 26
54043: PUSH
54044: LD_INT 36
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 101
54065: PUSH
54066: LD_INT 102
54068: PUSH
54069: LD_INT 105
54071: PUSH
54072: LD_INT 106
54074: PUSH
54075: LD_INT 108
54077: PUSH
54078: LD_INT 109
54080: PUSH
54081: LD_INT 112
54083: PUSH
54084: LD_INT 116
54086: PUSH
54087: LD_INT 117
54089: PUSH
54090: LD_INT 118
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: ST_TO_ADDR
54109: GO 56772
54111: LD_INT 6
54113: DOUBLE
54114: EQUAL
54115: IFTRUE 54119
54117: GO 54251
54119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
54120: LD_ADDR_VAR 0 2
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 4
54130: PUSH
54131: LD_INT 5
54133: PUSH
54134: LD_INT 6
54136: PUSH
54137: LD_INT 8
54139: PUSH
54140: LD_INT 11
54142: PUSH
54143: LD_INT 12
54145: PUSH
54146: LD_INT 15
54148: PUSH
54149: LD_INT 16
54151: PUSH
54152: LD_INT 20
54154: PUSH
54155: LD_INT 21
54157: PUSH
54158: LD_INT 22
54160: PUSH
54161: LD_INT 23
54163: PUSH
54164: LD_INT 25
54166: PUSH
54167: LD_INT 26
54169: PUSH
54170: LD_INT 30
54172: PUSH
54173: LD_INT 31
54175: PUSH
54176: LD_INT 32
54178: PUSH
54179: LD_INT 36
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 101
54205: PUSH
54206: LD_INT 102
54208: PUSH
54209: LD_INT 105
54211: PUSH
54212: LD_INT 106
54214: PUSH
54215: LD_INT 108
54217: PUSH
54218: LD_INT 109
54220: PUSH
54221: LD_INT 112
54223: PUSH
54224: LD_INT 116
54226: PUSH
54227: LD_INT 117
54229: PUSH
54230: LD_INT 118
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: ST_TO_ADDR
54249: GO 56772
54251: LD_INT 7
54253: DOUBLE
54254: EQUAL
54255: IFTRUE 54259
54257: GO 54371
54259: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54260: LD_ADDR_VAR 0 2
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: LD_INT 5
54273: PUSH
54274: LD_INT 7
54276: PUSH
54277: LD_INT 11
54279: PUSH
54280: LD_INT 12
54282: PUSH
54283: LD_INT 15
54285: PUSH
54286: LD_INT 16
54288: PUSH
54289: LD_INT 20
54291: PUSH
54292: LD_INT 21
54294: PUSH
54295: LD_INT 22
54297: PUSH
54298: LD_INT 23
54300: PUSH
54301: LD_INT 25
54303: PUSH
54304: LD_INT 26
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 101
54325: PUSH
54326: LD_INT 102
54328: PUSH
54329: LD_INT 103
54331: PUSH
54332: LD_INT 105
54334: PUSH
54335: LD_INT 106
54337: PUSH
54338: LD_INT 108
54340: PUSH
54341: LD_INT 112
54343: PUSH
54344: LD_INT 116
54346: PUSH
54347: LD_INT 117
54349: PUSH
54350: LD_INT 118
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: ST_TO_ADDR
54369: GO 56772
54371: LD_INT 8
54373: DOUBLE
54374: EQUAL
54375: IFTRUE 54379
54377: GO 54519
54379: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54380: LD_ADDR_VAR 0 2
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: LD_INT 5
54393: PUSH
54394: LD_INT 6
54396: PUSH
54397: LD_INT 7
54399: PUSH
54400: LD_INT 8
54402: PUSH
54403: LD_INT 11
54405: PUSH
54406: LD_INT 12
54408: PUSH
54409: LD_INT 15
54411: PUSH
54412: LD_INT 16
54414: PUSH
54415: LD_INT 20
54417: PUSH
54418: LD_INT 21
54420: PUSH
54421: LD_INT 22
54423: PUSH
54424: LD_INT 23
54426: PUSH
54427: LD_INT 25
54429: PUSH
54430: LD_INT 26
54432: PUSH
54433: LD_INT 30
54435: PUSH
54436: LD_INT 31
54438: PUSH
54439: LD_INT 32
54441: PUSH
54442: LD_INT 36
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 101
54469: PUSH
54470: LD_INT 102
54472: PUSH
54473: LD_INT 103
54475: PUSH
54476: LD_INT 105
54478: PUSH
54479: LD_INT 106
54481: PUSH
54482: LD_INT 108
54484: PUSH
54485: LD_INT 109
54487: PUSH
54488: LD_INT 112
54490: PUSH
54491: LD_INT 116
54493: PUSH
54494: LD_INT 117
54496: PUSH
54497: LD_INT 118
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: ST_TO_ADDR
54517: GO 56772
54519: LD_INT 9
54521: DOUBLE
54522: EQUAL
54523: IFTRUE 54527
54525: GO 54675
54527: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54528: LD_ADDR_VAR 0 2
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 4
54538: PUSH
54539: LD_INT 5
54541: PUSH
54542: LD_INT 6
54544: PUSH
54545: LD_INT 7
54547: PUSH
54548: LD_INT 8
54550: PUSH
54551: LD_INT 11
54553: PUSH
54554: LD_INT 12
54556: PUSH
54557: LD_INT 15
54559: PUSH
54560: LD_INT 16
54562: PUSH
54563: LD_INT 20
54565: PUSH
54566: LD_INT 21
54568: PUSH
54569: LD_INT 22
54571: PUSH
54572: LD_INT 23
54574: PUSH
54575: LD_INT 25
54577: PUSH
54578: LD_INT 26
54580: PUSH
54581: LD_INT 28
54583: PUSH
54584: LD_INT 30
54586: PUSH
54587: LD_INT 31
54589: PUSH
54590: LD_INT 32
54592: PUSH
54593: LD_INT 36
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 101
54621: PUSH
54622: LD_INT 102
54624: PUSH
54625: LD_INT 103
54627: PUSH
54628: LD_INT 105
54630: PUSH
54631: LD_INT 106
54633: PUSH
54634: LD_INT 108
54636: PUSH
54637: LD_INT 109
54639: PUSH
54640: LD_INT 112
54642: PUSH
54643: LD_INT 114
54645: PUSH
54646: LD_INT 116
54648: PUSH
54649: LD_INT 117
54651: PUSH
54652: LD_INT 118
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: ST_TO_ADDR
54673: GO 56772
54675: LD_INT 10
54677: DOUBLE
54678: EQUAL
54679: IFTRUE 54683
54681: GO 54879
54683: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54684: LD_ADDR_VAR 0 2
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 4
54694: PUSH
54695: LD_INT 5
54697: PUSH
54698: LD_INT 6
54700: PUSH
54701: LD_INT 7
54703: PUSH
54704: LD_INT 8
54706: PUSH
54707: LD_INT 9
54709: PUSH
54710: LD_INT 10
54712: PUSH
54713: LD_INT 11
54715: PUSH
54716: LD_INT 12
54718: PUSH
54719: LD_INT 13
54721: PUSH
54722: LD_INT 14
54724: PUSH
54725: LD_INT 15
54727: PUSH
54728: LD_INT 16
54730: PUSH
54731: LD_INT 17
54733: PUSH
54734: LD_INT 18
54736: PUSH
54737: LD_INT 19
54739: PUSH
54740: LD_INT 20
54742: PUSH
54743: LD_INT 21
54745: PUSH
54746: LD_INT 22
54748: PUSH
54749: LD_INT 23
54751: PUSH
54752: LD_INT 24
54754: PUSH
54755: LD_INT 25
54757: PUSH
54758: LD_INT 26
54760: PUSH
54761: LD_INT 28
54763: PUSH
54764: LD_INT 30
54766: PUSH
54767: LD_INT 31
54769: PUSH
54770: LD_INT 32
54772: PUSH
54773: LD_INT 36
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 101
54809: PUSH
54810: LD_INT 102
54812: PUSH
54813: LD_INT 103
54815: PUSH
54816: LD_INT 104
54818: PUSH
54819: LD_INT 105
54821: PUSH
54822: LD_INT 106
54824: PUSH
54825: LD_INT 107
54827: PUSH
54828: LD_INT 108
54830: PUSH
54831: LD_INT 109
54833: PUSH
54834: LD_INT 110
54836: PUSH
54837: LD_INT 111
54839: PUSH
54840: LD_INT 112
54842: PUSH
54843: LD_INT 114
54845: PUSH
54846: LD_INT 116
54848: PUSH
54849: LD_INT 117
54851: PUSH
54852: LD_INT 118
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: ST_TO_ADDR
54877: GO 56772
54879: LD_INT 11
54881: DOUBLE
54882: EQUAL
54883: IFTRUE 54887
54885: GO 55091
54887: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54888: LD_ADDR_VAR 0 2
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 4
54901: PUSH
54902: LD_INT 5
54904: PUSH
54905: LD_INT 6
54907: PUSH
54908: LD_INT 7
54910: PUSH
54911: LD_INT 8
54913: PUSH
54914: LD_INT 9
54916: PUSH
54917: LD_INT 10
54919: PUSH
54920: LD_INT 11
54922: PUSH
54923: LD_INT 12
54925: PUSH
54926: LD_INT 13
54928: PUSH
54929: LD_INT 14
54931: PUSH
54932: LD_INT 15
54934: PUSH
54935: LD_INT 16
54937: PUSH
54938: LD_INT 17
54940: PUSH
54941: LD_INT 18
54943: PUSH
54944: LD_INT 19
54946: PUSH
54947: LD_INT 20
54949: PUSH
54950: LD_INT 21
54952: PUSH
54953: LD_INT 22
54955: PUSH
54956: LD_INT 23
54958: PUSH
54959: LD_INT 24
54961: PUSH
54962: LD_INT 25
54964: PUSH
54965: LD_INT 26
54967: PUSH
54968: LD_INT 28
54970: PUSH
54971: LD_INT 30
54973: PUSH
54974: LD_INT 31
54976: PUSH
54977: LD_INT 32
54979: PUSH
54980: LD_INT 34
54982: PUSH
54983: LD_INT 36
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 101
55021: PUSH
55022: LD_INT 102
55024: PUSH
55025: LD_INT 103
55027: PUSH
55028: LD_INT 104
55030: PUSH
55031: LD_INT 105
55033: PUSH
55034: LD_INT 106
55036: PUSH
55037: LD_INT 107
55039: PUSH
55040: LD_INT 108
55042: PUSH
55043: LD_INT 109
55045: PUSH
55046: LD_INT 110
55048: PUSH
55049: LD_INT 111
55051: PUSH
55052: LD_INT 112
55054: PUSH
55055: LD_INT 114
55057: PUSH
55058: LD_INT 116
55060: PUSH
55061: LD_INT 117
55063: PUSH
55064: LD_INT 118
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: ST_TO_ADDR
55089: GO 56772
55091: LD_INT 12
55093: DOUBLE
55094: EQUAL
55095: IFTRUE 55099
55097: GO 55319
55099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
55100: LD_ADDR_VAR 0 2
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 4
55116: PUSH
55117: LD_INT 5
55119: PUSH
55120: LD_INT 6
55122: PUSH
55123: LD_INT 7
55125: PUSH
55126: LD_INT 8
55128: PUSH
55129: LD_INT 9
55131: PUSH
55132: LD_INT 10
55134: PUSH
55135: LD_INT 11
55137: PUSH
55138: LD_INT 12
55140: PUSH
55141: LD_INT 13
55143: PUSH
55144: LD_INT 14
55146: PUSH
55147: LD_INT 15
55149: PUSH
55150: LD_INT 16
55152: PUSH
55153: LD_INT 17
55155: PUSH
55156: LD_INT 18
55158: PUSH
55159: LD_INT 19
55161: PUSH
55162: LD_INT 20
55164: PUSH
55165: LD_INT 21
55167: PUSH
55168: LD_INT 22
55170: PUSH
55171: LD_INT 23
55173: PUSH
55174: LD_INT 24
55176: PUSH
55177: LD_INT 25
55179: PUSH
55180: LD_INT 26
55182: PUSH
55183: LD_INT 27
55185: PUSH
55186: LD_INT 28
55188: PUSH
55189: LD_INT 30
55191: PUSH
55192: LD_INT 31
55194: PUSH
55195: LD_INT 32
55197: PUSH
55198: LD_INT 33
55200: PUSH
55201: LD_INT 34
55203: PUSH
55204: LD_INT 36
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 101
55245: PUSH
55246: LD_INT 102
55248: PUSH
55249: LD_INT 103
55251: PUSH
55252: LD_INT 104
55254: PUSH
55255: LD_INT 105
55257: PUSH
55258: LD_INT 106
55260: PUSH
55261: LD_INT 107
55263: PUSH
55264: LD_INT 108
55266: PUSH
55267: LD_INT 109
55269: PUSH
55270: LD_INT 110
55272: PUSH
55273: LD_INT 111
55275: PUSH
55276: LD_INT 112
55278: PUSH
55279: LD_INT 113
55281: PUSH
55282: LD_INT 114
55284: PUSH
55285: LD_INT 116
55287: PUSH
55288: LD_INT 117
55290: PUSH
55291: LD_INT 118
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: ST_TO_ADDR
55317: GO 56772
55319: LD_INT 13
55321: DOUBLE
55322: EQUAL
55323: IFTRUE 55327
55325: GO 55535
55327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55328: LD_ADDR_VAR 0 2
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: LD_INT 4
55344: PUSH
55345: LD_INT 5
55347: PUSH
55348: LD_INT 8
55350: PUSH
55351: LD_INT 9
55353: PUSH
55354: LD_INT 10
55356: PUSH
55357: LD_INT 11
55359: PUSH
55360: LD_INT 12
55362: PUSH
55363: LD_INT 14
55365: PUSH
55366: LD_INT 15
55368: PUSH
55369: LD_INT 16
55371: PUSH
55372: LD_INT 17
55374: PUSH
55375: LD_INT 18
55377: PUSH
55378: LD_INT 19
55380: PUSH
55381: LD_INT 20
55383: PUSH
55384: LD_INT 21
55386: PUSH
55387: LD_INT 22
55389: PUSH
55390: LD_INT 23
55392: PUSH
55393: LD_INT 24
55395: PUSH
55396: LD_INT 25
55398: PUSH
55399: LD_INT 26
55401: PUSH
55402: LD_INT 27
55404: PUSH
55405: LD_INT 28
55407: PUSH
55408: LD_INT 30
55410: PUSH
55411: LD_INT 31
55413: PUSH
55414: LD_INT 32
55416: PUSH
55417: LD_INT 33
55419: PUSH
55420: LD_INT 34
55422: PUSH
55423: LD_INT 36
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 101
55461: PUSH
55462: LD_INT 102
55464: PUSH
55465: LD_INT 103
55467: PUSH
55468: LD_INT 104
55470: PUSH
55471: LD_INT 105
55473: PUSH
55474: LD_INT 106
55476: PUSH
55477: LD_INT 107
55479: PUSH
55480: LD_INT 108
55482: PUSH
55483: LD_INT 109
55485: PUSH
55486: LD_INT 110
55488: PUSH
55489: LD_INT 111
55491: PUSH
55492: LD_INT 112
55494: PUSH
55495: LD_INT 113
55497: PUSH
55498: LD_INT 114
55500: PUSH
55501: LD_INT 116
55503: PUSH
55504: LD_INT 117
55506: PUSH
55507: LD_INT 118
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: ST_TO_ADDR
55533: GO 56772
55535: LD_INT 14
55537: DOUBLE
55538: EQUAL
55539: IFTRUE 55543
55541: GO 55767
55543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55544: LD_ADDR_VAR 0 2
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: LD_INT 4
55560: PUSH
55561: LD_INT 5
55563: PUSH
55564: LD_INT 6
55566: PUSH
55567: LD_INT 7
55569: PUSH
55570: LD_INT 8
55572: PUSH
55573: LD_INT 9
55575: PUSH
55576: LD_INT 10
55578: PUSH
55579: LD_INT 11
55581: PUSH
55582: LD_INT 12
55584: PUSH
55585: LD_INT 13
55587: PUSH
55588: LD_INT 14
55590: PUSH
55591: LD_INT 15
55593: PUSH
55594: LD_INT 16
55596: PUSH
55597: LD_INT 17
55599: PUSH
55600: LD_INT 18
55602: PUSH
55603: LD_INT 19
55605: PUSH
55606: LD_INT 20
55608: PUSH
55609: LD_INT 21
55611: PUSH
55612: LD_INT 22
55614: PUSH
55615: LD_INT 23
55617: PUSH
55618: LD_INT 24
55620: PUSH
55621: LD_INT 25
55623: PUSH
55624: LD_INT 26
55626: PUSH
55627: LD_INT 27
55629: PUSH
55630: LD_INT 28
55632: PUSH
55633: LD_INT 29
55635: PUSH
55636: LD_INT 30
55638: PUSH
55639: LD_INT 31
55641: PUSH
55642: LD_INT 32
55644: PUSH
55645: LD_INT 33
55647: PUSH
55648: LD_INT 34
55650: PUSH
55651: LD_INT 36
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 101
55693: PUSH
55694: LD_INT 102
55696: PUSH
55697: LD_INT 103
55699: PUSH
55700: LD_INT 104
55702: PUSH
55703: LD_INT 105
55705: PUSH
55706: LD_INT 106
55708: PUSH
55709: LD_INT 107
55711: PUSH
55712: LD_INT 108
55714: PUSH
55715: LD_INT 109
55717: PUSH
55718: LD_INT 110
55720: PUSH
55721: LD_INT 111
55723: PUSH
55724: LD_INT 112
55726: PUSH
55727: LD_INT 113
55729: PUSH
55730: LD_INT 114
55732: PUSH
55733: LD_INT 116
55735: PUSH
55736: LD_INT 117
55738: PUSH
55739: LD_INT 118
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: ST_TO_ADDR
55765: GO 56772
55767: LD_INT 15
55769: DOUBLE
55770: EQUAL
55771: IFTRUE 55775
55773: GO 55999
55775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55776: LD_ADDR_VAR 0 2
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: LD_INT 5
55795: PUSH
55796: LD_INT 6
55798: PUSH
55799: LD_INT 7
55801: PUSH
55802: LD_INT 8
55804: PUSH
55805: LD_INT 9
55807: PUSH
55808: LD_INT 10
55810: PUSH
55811: LD_INT 11
55813: PUSH
55814: LD_INT 12
55816: PUSH
55817: LD_INT 13
55819: PUSH
55820: LD_INT 14
55822: PUSH
55823: LD_INT 15
55825: PUSH
55826: LD_INT 16
55828: PUSH
55829: LD_INT 17
55831: PUSH
55832: LD_INT 18
55834: PUSH
55835: LD_INT 19
55837: PUSH
55838: LD_INT 20
55840: PUSH
55841: LD_INT 21
55843: PUSH
55844: LD_INT 22
55846: PUSH
55847: LD_INT 23
55849: PUSH
55850: LD_INT 24
55852: PUSH
55853: LD_INT 25
55855: PUSH
55856: LD_INT 26
55858: PUSH
55859: LD_INT 27
55861: PUSH
55862: LD_INT 28
55864: PUSH
55865: LD_INT 29
55867: PUSH
55868: LD_INT 30
55870: PUSH
55871: LD_INT 31
55873: PUSH
55874: LD_INT 32
55876: PUSH
55877: LD_INT 33
55879: PUSH
55880: LD_INT 34
55882: PUSH
55883: LD_INT 36
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 101
55925: PUSH
55926: LD_INT 102
55928: PUSH
55929: LD_INT 103
55931: PUSH
55932: LD_INT 104
55934: PUSH
55935: LD_INT 105
55937: PUSH
55938: LD_INT 106
55940: PUSH
55941: LD_INT 107
55943: PUSH
55944: LD_INT 108
55946: PUSH
55947: LD_INT 109
55949: PUSH
55950: LD_INT 110
55952: PUSH
55953: LD_INT 111
55955: PUSH
55956: LD_INT 112
55958: PUSH
55959: LD_INT 113
55961: PUSH
55962: LD_INT 114
55964: PUSH
55965: LD_INT 116
55967: PUSH
55968: LD_INT 117
55970: PUSH
55971: LD_INT 118
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: ST_TO_ADDR
55997: GO 56772
55999: LD_INT 16
56001: DOUBLE
56002: EQUAL
56003: IFTRUE 56007
56005: GO 56143
56007: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
56008: LD_ADDR_VAR 0 2
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 4
56018: PUSH
56019: LD_INT 5
56021: PUSH
56022: LD_INT 7
56024: PUSH
56025: LD_INT 11
56027: PUSH
56028: LD_INT 12
56030: PUSH
56031: LD_INT 15
56033: PUSH
56034: LD_INT 16
56036: PUSH
56037: LD_INT 20
56039: PUSH
56040: LD_INT 21
56042: PUSH
56043: LD_INT 22
56045: PUSH
56046: LD_INT 23
56048: PUSH
56049: LD_INT 25
56051: PUSH
56052: LD_INT 26
56054: PUSH
56055: LD_INT 30
56057: PUSH
56058: LD_INT 31
56060: PUSH
56061: LD_INT 32
56063: PUSH
56064: LD_INT 33
56066: PUSH
56067: LD_INT 34
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 101
56093: PUSH
56094: LD_INT 102
56096: PUSH
56097: LD_INT 103
56099: PUSH
56100: LD_INT 106
56102: PUSH
56103: LD_INT 108
56105: PUSH
56106: LD_INT 112
56108: PUSH
56109: LD_INT 113
56111: PUSH
56112: LD_INT 114
56114: PUSH
56115: LD_INT 116
56117: PUSH
56118: LD_INT 117
56120: PUSH
56121: LD_INT 118
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: ST_TO_ADDR
56141: GO 56772
56143: LD_INT 17
56145: DOUBLE
56146: EQUAL
56147: IFTRUE 56151
56149: GO 56375
56151: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
56152: LD_ADDR_VAR 0 2
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: LD_INT 4
56168: PUSH
56169: LD_INT 5
56171: PUSH
56172: LD_INT 6
56174: PUSH
56175: LD_INT 7
56177: PUSH
56178: LD_INT 8
56180: PUSH
56181: LD_INT 9
56183: PUSH
56184: LD_INT 10
56186: PUSH
56187: LD_INT 11
56189: PUSH
56190: LD_INT 12
56192: PUSH
56193: LD_INT 13
56195: PUSH
56196: LD_INT 14
56198: PUSH
56199: LD_INT 15
56201: PUSH
56202: LD_INT 16
56204: PUSH
56205: LD_INT 17
56207: PUSH
56208: LD_INT 18
56210: PUSH
56211: LD_INT 19
56213: PUSH
56214: LD_INT 20
56216: PUSH
56217: LD_INT 21
56219: PUSH
56220: LD_INT 22
56222: PUSH
56223: LD_INT 23
56225: PUSH
56226: LD_INT 24
56228: PUSH
56229: LD_INT 25
56231: PUSH
56232: LD_INT 26
56234: PUSH
56235: LD_INT 27
56237: PUSH
56238: LD_INT 28
56240: PUSH
56241: LD_INT 29
56243: PUSH
56244: LD_INT 30
56246: PUSH
56247: LD_INT 31
56249: PUSH
56250: LD_INT 32
56252: PUSH
56253: LD_INT 33
56255: PUSH
56256: LD_INT 34
56258: PUSH
56259: LD_INT 36
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 101
56301: PUSH
56302: LD_INT 102
56304: PUSH
56305: LD_INT 103
56307: PUSH
56308: LD_INT 104
56310: PUSH
56311: LD_INT 105
56313: PUSH
56314: LD_INT 106
56316: PUSH
56317: LD_INT 107
56319: PUSH
56320: LD_INT 108
56322: PUSH
56323: LD_INT 109
56325: PUSH
56326: LD_INT 110
56328: PUSH
56329: LD_INT 111
56331: PUSH
56332: LD_INT 112
56334: PUSH
56335: LD_INT 113
56337: PUSH
56338: LD_INT 114
56340: PUSH
56341: LD_INT 116
56343: PUSH
56344: LD_INT 117
56346: PUSH
56347: LD_INT 118
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: ST_TO_ADDR
56373: GO 56772
56375: LD_INT 18
56377: DOUBLE
56378: EQUAL
56379: IFTRUE 56383
56381: GO 56531
56383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56384: LD_ADDR_VAR 0 2
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: LD_INT 5
56397: PUSH
56398: LD_INT 7
56400: PUSH
56401: LD_INT 11
56403: PUSH
56404: LD_INT 12
56406: PUSH
56407: LD_INT 15
56409: PUSH
56410: LD_INT 16
56412: PUSH
56413: LD_INT 20
56415: PUSH
56416: LD_INT 21
56418: PUSH
56419: LD_INT 22
56421: PUSH
56422: LD_INT 23
56424: PUSH
56425: LD_INT 25
56427: PUSH
56428: LD_INT 26
56430: PUSH
56431: LD_INT 30
56433: PUSH
56434: LD_INT 31
56436: PUSH
56437: LD_INT 32
56439: PUSH
56440: LD_INT 33
56442: PUSH
56443: LD_INT 34
56445: PUSH
56446: LD_INT 35
56448: PUSH
56449: LD_INT 36
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 101
56477: PUSH
56478: LD_INT 102
56480: PUSH
56481: LD_INT 103
56483: PUSH
56484: LD_INT 106
56486: PUSH
56487: LD_INT 108
56489: PUSH
56490: LD_INT 112
56492: PUSH
56493: LD_INT 113
56495: PUSH
56496: LD_INT 114
56498: PUSH
56499: LD_INT 115
56501: PUSH
56502: LD_INT 116
56504: PUSH
56505: LD_INT 117
56507: PUSH
56508: LD_INT 118
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: ST_TO_ADDR
56529: GO 56772
56531: LD_INT 19
56533: DOUBLE
56534: EQUAL
56535: IFTRUE 56539
56537: GO 56771
56539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56540: LD_ADDR_VAR 0 2
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 4
56556: PUSH
56557: LD_INT 5
56559: PUSH
56560: LD_INT 6
56562: PUSH
56563: LD_INT 7
56565: PUSH
56566: LD_INT 8
56568: PUSH
56569: LD_INT 9
56571: PUSH
56572: LD_INT 10
56574: PUSH
56575: LD_INT 11
56577: PUSH
56578: LD_INT 12
56580: PUSH
56581: LD_INT 13
56583: PUSH
56584: LD_INT 14
56586: PUSH
56587: LD_INT 15
56589: PUSH
56590: LD_INT 16
56592: PUSH
56593: LD_INT 17
56595: PUSH
56596: LD_INT 18
56598: PUSH
56599: LD_INT 19
56601: PUSH
56602: LD_INT 20
56604: PUSH
56605: LD_INT 21
56607: PUSH
56608: LD_INT 22
56610: PUSH
56611: LD_INT 23
56613: PUSH
56614: LD_INT 24
56616: PUSH
56617: LD_INT 25
56619: PUSH
56620: LD_INT 26
56622: PUSH
56623: LD_INT 27
56625: PUSH
56626: LD_INT 28
56628: PUSH
56629: LD_INT 29
56631: PUSH
56632: LD_INT 30
56634: PUSH
56635: LD_INT 31
56637: PUSH
56638: LD_INT 32
56640: PUSH
56641: LD_INT 33
56643: PUSH
56644: LD_INT 34
56646: PUSH
56647: LD_INT 35
56649: PUSH
56650: LD_INT 36
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 101
56693: PUSH
56694: LD_INT 102
56696: PUSH
56697: LD_INT 103
56699: PUSH
56700: LD_INT 104
56702: PUSH
56703: LD_INT 105
56705: PUSH
56706: LD_INT 106
56708: PUSH
56709: LD_INT 107
56711: PUSH
56712: LD_INT 108
56714: PUSH
56715: LD_INT 109
56717: PUSH
56718: LD_INT 110
56720: PUSH
56721: LD_INT 111
56723: PUSH
56724: LD_INT 112
56726: PUSH
56727: LD_INT 113
56729: PUSH
56730: LD_INT 114
56732: PUSH
56733: LD_INT 115
56735: PUSH
56736: LD_INT 116
56738: PUSH
56739: LD_INT 117
56741: PUSH
56742: LD_INT 118
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: ST_TO_ADDR
56769: GO 56772
56771: POP
// end else
56772: GO 57003
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56774: LD_ADDR_VAR 0 2
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 4
56790: PUSH
56791: LD_INT 5
56793: PUSH
56794: LD_INT 6
56796: PUSH
56797: LD_INT 7
56799: PUSH
56800: LD_INT 8
56802: PUSH
56803: LD_INT 9
56805: PUSH
56806: LD_INT 10
56808: PUSH
56809: LD_INT 11
56811: PUSH
56812: LD_INT 12
56814: PUSH
56815: LD_INT 13
56817: PUSH
56818: LD_INT 14
56820: PUSH
56821: LD_INT 15
56823: PUSH
56824: LD_INT 16
56826: PUSH
56827: LD_INT 17
56829: PUSH
56830: LD_INT 18
56832: PUSH
56833: LD_INT 19
56835: PUSH
56836: LD_INT 20
56838: PUSH
56839: LD_INT 21
56841: PUSH
56842: LD_INT 22
56844: PUSH
56845: LD_INT 23
56847: PUSH
56848: LD_INT 24
56850: PUSH
56851: LD_INT 25
56853: PUSH
56854: LD_INT 26
56856: PUSH
56857: LD_INT 27
56859: PUSH
56860: LD_INT 28
56862: PUSH
56863: LD_INT 29
56865: PUSH
56866: LD_INT 30
56868: PUSH
56869: LD_INT 31
56871: PUSH
56872: LD_INT 32
56874: PUSH
56875: LD_INT 33
56877: PUSH
56878: LD_INT 34
56880: PUSH
56881: LD_INT 35
56883: PUSH
56884: LD_INT 36
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 101
56927: PUSH
56928: LD_INT 102
56930: PUSH
56931: LD_INT 103
56933: PUSH
56934: LD_INT 104
56936: PUSH
56937: LD_INT 105
56939: PUSH
56940: LD_INT 106
56942: PUSH
56943: LD_INT 107
56945: PUSH
56946: LD_INT 108
56948: PUSH
56949: LD_INT 109
56951: PUSH
56952: LD_INT 110
56954: PUSH
56955: LD_INT 111
56957: PUSH
56958: LD_INT 112
56960: PUSH
56961: LD_INT 113
56963: PUSH
56964: LD_INT 114
56966: PUSH
56967: LD_INT 115
56969: PUSH
56970: LD_INT 116
56972: PUSH
56973: LD_INT 117
56975: PUSH
56976: LD_INT 118
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: ST_TO_ADDR
// if result then
57003: LD_VAR 0 2
57007: IFFALSE 57793
// begin normal :=  ;
57009: LD_ADDR_VAR 0 5
57013: PUSH
57014: LD_STRING 
57016: ST_TO_ADDR
// hardcore :=  ;
57017: LD_ADDR_VAR 0 6
57021: PUSH
57022: LD_STRING 
57024: ST_TO_ADDR
// active :=  ;
57025: LD_ADDR_VAR 0 7
57029: PUSH
57030: LD_STRING 
57032: ST_TO_ADDR
// for i = 1 to normalCounter do
57033: LD_ADDR_VAR 0 8
57037: PUSH
57038: DOUBLE
57039: LD_INT 1
57041: DEC
57042: ST_TO_ADDR
57043: LD_EXP 45
57047: PUSH
57048: FOR_TO
57049: IFFALSE 57150
// begin tmp := 0 ;
57051: LD_ADDR_VAR 0 3
57055: PUSH
57056: LD_STRING 0
57058: ST_TO_ADDR
// if result [ 1 ] then
57059: LD_VAR 0 2
57063: PUSH
57064: LD_INT 1
57066: ARRAY
57067: IFFALSE 57132
// if result [ 1 ] [ 1 ] = i then
57069: LD_VAR 0 2
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PUSH
57078: LD_INT 1
57080: ARRAY
57081: PUSH
57082: LD_VAR 0 8
57086: EQUAL
57087: IFFALSE 57132
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57089: LD_ADDR_VAR 0 2
57093: PUSH
57094: LD_VAR 0 2
57098: PPUSH
57099: LD_INT 1
57101: PPUSH
57102: LD_VAR 0 2
57106: PUSH
57107: LD_INT 1
57109: ARRAY
57110: PPUSH
57111: LD_INT 1
57113: PPUSH
57114: CALL_OW 3
57118: PPUSH
57119: CALL_OW 1
57123: ST_TO_ADDR
// tmp := 1 ;
57124: LD_ADDR_VAR 0 3
57128: PUSH
57129: LD_STRING 1
57131: ST_TO_ADDR
// end ; normal := normal & tmp ;
57132: LD_ADDR_VAR 0 5
57136: PUSH
57137: LD_VAR 0 5
57141: PUSH
57142: LD_VAR 0 3
57146: STR
57147: ST_TO_ADDR
// end ;
57148: GO 57048
57150: POP
57151: POP
// for i = 1 to hardcoreCounter do
57152: LD_ADDR_VAR 0 8
57156: PUSH
57157: DOUBLE
57158: LD_INT 1
57160: DEC
57161: ST_TO_ADDR
57162: LD_EXP 46
57166: PUSH
57167: FOR_TO
57168: IFFALSE 57273
// begin tmp := 0 ;
57170: LD_ADDR_VAR 0 3
57174: PUSH
57175: LD_STRING 0
57177: ST_TO_ADDR
// if result [ 2 ] then
57178: LD_VAR 0 2
57182: PUSH
57183: LD_INT 2
57185: ARRAY
57186: IFFALSE 57255
// if result [ 2 ] [ 1 ] = 100 + i then
57188: LD_VAR 0 2
57192: PUSH
57193: LD_INT 2
57195: ARRAY
57196: PUSH
57197: LD_INT 1
57199: ARRAY
57200: PUSH
57201: LD_INT 100
57203: PUSH
57204: LD_VAR 0 8
57208: PLUS
57209: EQUAL
57210: IFFALSE 57255
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57212: LD_ADDR_VAR 0 2
57216: PUSH
57217: LD_VAR 0 2
57221: PPUSH
57222: LD_INT 2
57224: PPUSH
57225: LD_VAR 0 2
57229: PUSH
57230: LD_INT 2
57232: ARRAY
57233: PPUSH
57234: LD_INT 1
57236: PPUSH
57237: CALL_OW 3
57241: PPUSH
57242: CALL_OW 1
57246: ST_TO_ADDR
// tmp := 1 ;
57247: LD_ADDR_VAR 0 3
57251: PUSH
57252: LD_STRING 1
57254: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57255: LD_ADDR_VAR 0 6
57259: PUSH
57260: LD_VAR 0 6
57264: PUSH
57265: LD_VAR 0 3
57269: STR
57270: ST_TO_ADDR
// end ;
57271: GO 57167
57273: POP
57274: POP
// if isGameLoad then
57275: LD_VAR 0 1
57279: IFFALSE 57754
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57281: LD_ADDR_VAR 0 4
57285: PUSH
57286: LD_EXP 49
57290: PUSH
57291: LD_EXP 48
57295: PUSH
57296: LD_EXP 50
57300: PUSH
57301: LD_EXP 47
57305: PUSH
57306: LD_EXP 51
57310: PUSH
57311: LD_EXP 52
57315: PUSH
57316: LD_EXP 53
57320: PUSH
57321: LD_EXP 54
57325: PUSH
57326: LD_EXP 55
57330: PUSH
57331: LD_EXP 56
57335: PUSH
57336: LD_EXP 57
57340: PUSH
57341: LD_EXP 58
57345: PUSH
57346: LD_EXP 59
57350: PUSH
57351: LD_EXP 60
57355: PUSH
57356: LD_EXP 68
57360: PUSH
57361: LD_EXP 69
57365: PUSH
57366: LD_EXP 70
57370: PUSH
57371: LD_EXP 71
57375: PUSH
57376: LD_EXP 73
57380: PUSH
57381: LD_EXP 74
57385: PUSH
57386: LD_EXP 75
57390: PUSH
57391: LD_EXP 78
57395: PUSH
57396: LD_EXP 80
57400: PUSH
57401: LD_EXP 81
57405: PUSH
57406: LD_EXP 82
57410: PUSH
57411: LD_EXP 84
57415: PUSH
57416: LD_EXP 85
57420: PUSH
57421: LD_EXP 88
57425: PUSH
57426: LD_EXP 89
57430: PUSH
57431: LD_EXP 90
57435: PUSH
57436: LD_EXP 91
57440: PUSH
57441: LD_EXP 92
57445: PUSH
57446: LD_EXP 93
57450: PUSH
57451: LD_EXP 94
57455: PUSH
57456: LD_EXP 95
57460: PUSH
57461: LD_EXP 96
57465: PUSH
57466: LD_EXP 61
57470: PUSH
57471: LD_EXP 62
57475: PUSH
57476: LD_EXP 65
57480: PUSH
57481: LD_EXP 66
57485: PUSH
57486: LD_EXP 67
57490: PUSH
57491: LD_EXP 63
57495: PUSH
57496: LD_EXP 64
57500: PUSH
57501: LD_EXP 72
57505: PUSH
57506: LD_EXP 76
57510: PUSH
57511: LD_EXP 77
57515: PUSH
57516: LD_EXP 79
57520: PUSH
57521: LD_EXP 83
57525: PUSH
57526: LD_EXP 86
57530: PUSH
57531: LD_EXP 87
57535: PUSH
57536: LD_EXP 97
57540: PUSH
57541: LD_EXP 98
57545: PUSH
57546: LD_EXP 99
57550: PUSH
57551: LD_EXP 100
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// tmp :=  ;
57612: LD_ADDR_VAR 0 3
57616: PUSH
57617: LD_STRING 
57619: ST_TO_ADDR
// for i = 1 to normalCounter do
57620: LD_ADDR_VAR 0 8
57624: PUSH
57625: DOUBLE
57626: LD_INT 1
57628: DEC
57629: ST_TO_ADDR
57630: LD_EXP 45
57634: PUSH
57635: FOR_TO
57636: IFFALSE 57672
// begin if flags [ i ] then
57638: LD_VAR 0 4
57642: PUSH
57643: LD_VAR 0 8
57647: ARRAY
57648: IFFALSE 57670
// tmp := tmp & i & ; ;
57650: LD_ADDR_VAR 0 3
57654: PUSH
57655: LD_VAR 0 3
57659: PUSH
57660: LD_VAR 0 8
57664: STR
57665: PUSH
57666: LD_STRING ;
57668: STR
57669: ST_TO_ADDR
// end ;
57670: GO 57635
57672: POP
57673: POP
// for i = 1 to hardcoreCounter do
57674: LD_ADDR_VAR 0 8
57678: PUSH
57679: DOUBLE
57680: LD_INT 1
57682: DEC
57683: ST_TO_ADDR
57684: LD_EXP 46
57688: PUSH
57689: FOR_TO
57690: IFFALSE 57736
// begin if flags [ normalCounter + i ] then
57692: LD_VAR 0 4
57696: PUSH
57697: LD_EXP 45
57701: PUSH
57702: LD_VAR 0 8
57706: PLUS
57707: ARRAY
57708: IFFALSE 57734
// tmp := tmp & ( 100 + i ) & ; ;
57710: LD_ADDR_VAR 0 3
57714: PUSH
57715: LD_VAR 0 3
57719: PUSH
57720: LD_INT 100
57722: PUSH
57723: LD_VAR 0 8
57727: PLUS
57728: STR
57729: PUSH
57730: LD_STRING ;
57732: STR
57733: ST_TO_ADDR
// end ;
57734: GO 57689
57736: POP
57737: POP
// if tmp then
57738: LD_VAR 0 3
57742: IFFALSE 57754
// active := tmp ;
57744: LD_ADDR_VAR 0 7
57748: PUSH
57749: LD_VAR 0 3
57753: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57754: LD_STRING getStreamItemsFromMission("
57756: PUSH
57757: LD_VAR 0 5
57761: STR
57762: PUSH
57763: LD_STRING ","
57765: STR
57766: PUSH
57767: LD_VAR 0 6
57771: STR
57772: PUSH
57773: LD_STRING ","
57775: STR
57776: PUSH
57777: LD_VAR 0 7
57781: STR
57782: PUSH
57783: LD_STRING ")
57785: STR
57786: PPUSH
57787: CALL_OW 559
// end else
57791: GO 57800
// ToLua ( getStreamItemsFromMission("","","") ) ;
57793: LD_STRING getStreamItemsFromMission("","","")
57795: PPUSH
57796: CALL_OW 559
// end ;
57800: LD_VAR 0 2
57804: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57805: LD_EXP 44
57809: PUSH
57810: LD_EXP 49
57814: AND
57815: IFFALSE 57939
57817: GO 57819
57819: DISABLE
57820: LD_INT 0
57822: PPUSH
57823: PPUSH
// begin enable ;
57824: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57825: LD_ADDR_VAR 0 2
57829: PUSH
57830: LD_INT 22
57832: PUSH
57833: LD_OWVAR 2
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 34
57847: PUSH
57848: LD_INT 7
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 34
57857: PUSH
57858: LD_INT 45
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 34
57867: PUSH
57868: LD_INT 28
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 34
57877: PUSH
57878: LD_INT 47
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PPUSH
57896: CALL_OW 69
57900: ST_TO_ADDR
// if not tmp then
57901: LD_VAR 0 2
57905: NOT
57906: IFFALSE 57910
// exit ;
57908: GO 57939
// for i in tmp do
57910: LD_ADDR_VAR 0 1
57914: PUSH
57915: LD_VAR 0 2
57919: PUSH
57920: FOR_IN
57921: IFFALSE 57937
// begin SetLives ( i , 0 ) ;
57923: LD_VAR 0 1
57927: PPUSH
57928: LD_INT 0
57930: PPUSH
57931: CALL_OW 234
// end ;
57935: GO 57920
57937: POP
57938: POP
// end ;
57939: PPOPN 2
57941: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57942: LD_EXP 44
57946: PUSH
57947: LD_EXP 50
57951: AND
57952: IFFALSE 58036
57954: GO 57956
57956: DISABLE
57957: LD_INT 0
57959: PPUSH
57960: PPUSH
// begin enable ;
57961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57962: LD_ADDR_VAR 0 2
57966: PUSH
57967: LD_INT 22
57969: PUSH
57970: LD_OWVAR 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 32
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PPUSH
57993: CALL_OW 69
57997: ST_TO_ADDR
// if not tmp then
57998: LD_VAR 0 2
58002: NOT
58003: IFFALSE 58007
// exit ;
58005: GO 58036
// for i in tmp do
58007: LD_ADDR_VAR 0 1
58011: PUSH
58012: LD_VAR 0 2
58016: PUSH
58017: FOR_IN
58018: IFFALSE 58034
// begin SetLives ( i , 0 ) ;
58020: LD_VAR 0 1
58024: PPUSH
58025: LD_INT 0
58027: PPUSH
58028: CALL_OW 234
// end ;
58032: GO 58017
58034: POP
58035: POP
// end ;
58036: PPOPN 2
58038: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58039: LD_EXP 44
58043: PUSH
58044: LD_EXP 47
58048: AND
58049: IFFALSE 58142
58051: GO 58053
58053: DISABLE
58054: LD_INT 0
58056: PPUSH
// begin enable ;
58057: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58058: LD_ADDR_VAR 0 1
58062: PUSH
58063: LD_INT 22
58065: PUSH
58066: LD_OWVAR 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 25
58080: PUSH
58081: LD_INT 5
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 25
58090: PUSH
58091: LD_INT 9
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 25
58100: PUSH
58101: LD_INT 8
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PPUSH
58118: CALL_OW 69
58122: PUSH
58123: FOR_IN
58124: IFFALSE 58140
// begin SetClass ( i , 1 ) ;
58126: LD_VAR 0 1
58130: PPUSH
58131: LD_INT 1
58133: PPUSH
58134: CALL_OW 336
// end ;
58138: GO 58123
58140: POP
58141: POP
// end ;
58142: PPOPN 1
58144: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58145: LD_EXP 44
58149: PUSH
58150: LD_EXP 48
58154: AND
58155: PUSH
58156: LD_OWVAR 65
58160: PUSH
58161: LD_INT 7
58163: LESS
58164: AND
58165: IFFALSE 58179
58167: GO 58169
58169: DISABLE
// begin enable ;
58170: ENABLE
// game_speed := 7 ;
58171: LD_ADDR_OWVAR 65
58175: PUSH
58176: LD_INT 7
58178: ST_TO_ADDR
// end ;
58179: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58180: LD_EXP 44
58184: PUSH
58185: LD_EXP 51
58189: AND
58190: IFFALSE 58392
58192: GO 58194
58194: DISABLE
58195: LD_INT 0
58197: PPUSH
58198: PPUSH
58199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58200: LD_ADDR_VAR 0 3
58204: PUSH
58205: LD_INT 81
58207: PUSH
58208: LD_OWVAR 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 21
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PPUSH
58231: CALL_OW 69
58235: ST_TO_ADDR
// if not tmp then
58236: LD_VAR 0 3
58240: NOT
58241: IFFALSE 58245
// exit ;
58243: GO 58392
// if tmp > 5 then
58245: LD_VAR 0 3
58249: PUSH
58250: LD_INT 5
58252: GREATER
58253: IFFALSE 58265
// k := 5 else
58255: LD_ADDR_VAR 0 2
58259: PUSH
58260: LD_INT 5
58262: ST_TO_ADDR
58263: GO 58275
// k := tmp ;
58265: LD_ADDR_VAR 0 2
58269: PUSH
58270: LD_VAR 0 3
58274: ST_TO_ADDR
// for i := 1 to k do
58275: LD_ADDR_VAR 0 1
58279: PUSH
58280: DOUBLE
58281: LD_INT 1
58283: DEC
58284: ST_TO_ADDR
58285: LD_VAR 0 2
58289: PUSH
58290: FOR_TO
58291: IFFALSE 58390
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58293: LD_VAR 0 3
58297: PUSH
58298: LD_VAR 0 1
58302: ARRAY
58303: PPUSH
58304: LD_VAR 0 1
58308: PUSH
58309: LD_INT 4
58311: MOD
58312: PUSH
58313: LD_INT 1
58315: PLUS
58316: PPUSH
58317: CALL_OW 259
58321: PUSH
58322: LD_INT 10
58324: LESS
58325: IFFALSE 58388
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58327: LD_VAR 0 3
58331: PUSH
58332: LD_VAR 0 1
58336: ARRAY
58337: PPUSH
58338: LD_VAR 0 1
58342: PUSH
58343: LD_INT 4
58345: MOD
58346: PUSH
58347: LD_INT 1
58349: PLUS
58350: PPUSH
58351: LD_VAR 0 3
58355: PUSH
58356: LD_VAR 0 1
58360: ARRAY
58361: PPUSH
58362: LD_VAR 0 1
58366: PUSH
58367: LD_INT 4
58369: MOD
58370: PUSH
58371: LD_INT 1
58373: PLUS
58374: PPUSH
58375: CALL_OW 259
58379: PUSH
58380: LD_INT 1
58382: PLUS
58383: PPUSH
58384: CALL_OW 237
58388: GO 58290
58390: POP
58391: POP
// end ;
58392: PPOPN 3
58394: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58395: LD_EXP 44
58399: PUSH
58400: LD_EXP 52
58404: AND
58405: IFFALSE 58425
58407: GO 58409
58409: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58410: LD_INT 4
58412: PPUSH
58413: LD_OWVAR 2
58417: PPUSH
58418: LD_INT 0
58420: PPUSH
58421: CALL_OW 324
58425: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58426: LD_EXP 44
58430: PUSH
58431: LD_EXP 81
58435: AND
58436: IFFALSE 58456
58438: GO 58440
58440: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58441: LD_INT 19
58443: PPUSH
58444: LD_OWVAR 2
58448: PPUSH
58449: LD_INT 0
58451: PPUSH
58452: CALL_OW 324
58456: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58457: LD_EXP 44
58461: PUSH
58462: LD_EXP 53
58466: AND
58467: IFFALSE 58569
58469: GO 58471
58471: DISABLE
58472: LD_INT 0
58474: PPUSH
58475: PPUSH
// begin enable ;
58476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58477: LD_ADDR_VAR 0 2
58481: PUSH
58482: LD_INT 22
58484: PUSH
58485: LD_OWVAR 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 34
58499: PUSH
58500: LD_INT 11
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 34
58509: PUSH
58510: LD_INT 30
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PPUSH
58526: CALL_OW 69
58530: ST_TO_ADDR
// if not tmp then
58531: LD_VAR 0 2
58535: NOT
58536: IFFALSE 58540
// exit ;
58538: GO 58569
// for i in tmp do
58540: LD_ADDR_VAR 0 1
58544: PUSH
58545: LD_VAR 0 2
58549: PUSH
58550: FOR_IN
58551: IFFALSE 58567
// begin SetLives ( i , 0 ) ;
58553: LD_VAR 0 1
58557: PPUSH
58558: LD_INT 0
58560: PPUSH
58561: CALL_OW 234
// end ;
58565: GO 58550
58567: POP
58568: POP
// end ;
58569: PPOPN 2
58571: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58572: LD_EXP 44
58576: PUSH
58577: LD_EXP 54
58581: AND
58582: IFFALSE 58602
58584: GO 58586
58586: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58587: LD_INT 32
58589: PPUSH
58590: LD_OWVAR 2
58594: PPUSH
58595: LD_INT 0
58597: PPUSH
58598: CALL_OW 324
58602: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58603: LD_EXP 44
58607: PUSH
58608: LD_EXP 55
58612: AND
58613: IFFALSE 58794
58615: GO 58617
58617: DISABLE
58618: LD_INT 0
58620: PPUSH
58621: PPUSH
58622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58623: LD_ADDR_VAR 0 2
58627: PUSH
58628: LD_INT 22
58630: PUSH
58631: LD_OWVAR 2
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 33
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PPUSH
58654: CALL_OW 69
58658: ST_TO_ADDR
// if not tmp then
58659: LD_VAR 0 2
58663: NOT
58664: IFFALSE 58668
// exit ;
58666: GO 58794
// side := 0 ;
58668: LD_ADDR_VAR 0 3
58672: PUSH
58673: LD_INT 0
58675: ST_TO_ADDR
// for i := 1 to 8 do
58676: LD_ADDR_VAR 0 1
58680: PUSH
58681: DOUBLE
58682: LD_INT 1
58684: DEC
58685: ST_TO_ADDR
58686: LD_INT 8
58688: PUSH
58689: FOR_TO
58690: IFFALSE 58738
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58692: LD_OWVAR 2
58696: PUSH
58697: LD_VAR 0 1
58701: NONEQUAL
58702: PUSH
58703: LD_OWVAR 2
58707: PPUSH
58708: LD_VAR 0 1
58712: PPUSH
58713: CALL_OW 81
58717: PUSH
58718: LD_INT 2
58720: EQUAL
58721: AND
58722: IFFALSE 58736
// begin side := i ;
58724: LD_ADDR_VAR 0 3
58728: PUSH
58729: LD_VAR 0 1
58733: ST_TO_ADDR
// break ;
58734: GO 58738
// end ;
58736: GO 58689
58738: POP
58739: POP
// if not side then
58740: LD_VAR 0 3
58744: NOT
58745: IFFALSE 58749
// exit ;
58747: GO 58794
// for i := 1 to tmp do
58749: LD_ADDR_VAR 0 1
58753: PUSH
58754: DOUBLE
58755: LD_INT 1
58757: DEC
58758: ST_TO_ADDR
58759: LD_VAR 0 2
58763: PUSH
58764: FOR_TO
58765: IFFALSE 58792
// if Prob ( 60 ) then
58767: LD_INT 60
58769: PPUSH
58770: CALL_OW 13
58774: IFFALSE 58790
// SetSide ( i , side ) ;
58776: LD_VAR 0 1
58780: PPUSH
58781: LD_VAR 0 3
58785: PPUSH
58786: CALL_OW 235
58790: GO 58764
58792: POP
58793: POP
// end ;
58794: PPOPN 3
58796: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58797: LD_EXP 44
58801: PUSH
58802: LD_EXP 57
58806: AND
58807: IFFALSE 58926
58809: GO 58811
58811: DISABLE
58812: LD_INT 0
58814: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58815: LD_ADDR_VAR 0 1
58819: PUSH
58820: LD_INT 22
58822: PUSH
58823: LD_OWVAR 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 21
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 23
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: PPUSH
58864: CALL_OW 69
58868: PUSH
58869: FOR_IN
58870: IFFALSE 58924
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58872: LD_VAR 0 1
58876: PPUSH
58877: CALL_OW 257
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: IN
58900: IFFALSE 58922
// SetClass ( un , rand ( 1 , 4 ) ) ;
58902: LD_VAR 0 1
58906: PPUSH
58907: LD_INT 1
58909: PPUSH
58910: LD_INT 4
58912: PPUSH
58913: CALL_OW 12
58917: PPUSH
58918: CALL_OW 336
58922: GO 58869
58924: POP
58925: POP
// end ;
58926: PPOPN 1
58928: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58929: LD_EXP 44
58933: PUSH
58934: LD_EXP 56
58938: AND
58939: IFFALSE 59018
58941: GO 58943
58943: DISABLE
58944: LD_INT 0
58946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58947: LD_ADDR_VAR 0 1
58951: PUSH
58952: LD_INT 22
58954: PUSH
58955: LD_OWVAR 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 21
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PPUSH
58978: CALL_OW 69
58982: ST_TO_ADDR
// if not tmp then
58983: LD_VAR 0 1
58987: NOT
58988: IFFALSE 58992
// exit ;
58990: GO 59018
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58992: LD_VAR 0 1
58996: PUSH
58997: LD_INT 1
58999: PPUSH
59000: LD_VAR 0 1
59004: PPUSH
59005: CALL_OW 12
59009: ARRAY
59010: PPUSH
59011: LD_INT 100
59013: PPUSH
59014: CALL_OW 234
// end ;
59018: PPOPN 1
59020: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59021: LD_EXP 44
59025: PUSH
59026: LD_EXP 58
59030: AND
59031: IFFALSE 59129
59033: GO 59035
59035: DISABLE
59036: LD_INT 0
59038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59039: LD_ADDR_VAR 0 1
59043: PUSH
59044: LD_INT 22
59046: PUSH
59047: LD_OWVAR 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 21
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PPUSH
59070: CALL_OW 69
59074: ST_TO_ADDR
// if not tmp then
59075: LD_VAR 0 1
59079: NOT
59080: IFFALSE 59084
// exit ;
59082: GO 59129
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59084: LD_VAR 0 1
59088: PUSH
59089: LD_INT 1
59091: PPUSH
59092: LD_VAR 0 1
59096: PPUSH
59097: CALL_OW 12
59101: ARRAY
59102: PPUSH
59103: LD_INT 1
59105: PPUSH
59106: LD_INT 4
59108: PPUSH
59109: CALL_OW 12
59113: PPUSH
59114: LD_INT 3000
59116: PPUSH
59117: LD_INT 9000
59119: PPUSH
59120: CALL_OW 12
59124: PPUSH
59125: CALL_OW 492
// end ;
59129: PPOPN 1
59131: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59132: LD_EXP 44
59136: PUSH
59137: LD_EXP 59
59141: AND
59142: IFFALSE 59162
59144: GO 59146
59146: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59147: LD_INT 1
59149: PPUSH
59150: LD_OWVAR 2
59154: PPUSH
59155: LD_INT 0
59157: PPUSH
59158: CALL_OW 324
59162: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59163: LD_EXP 44
59167: PUSH
59168: LD_EXP 60
59172: AND
59173: IFFALSE 59256
59175: GO 59177
59177: DISABLE
59178: LD_INT 0
59180: PPUSH
59181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59182: LD_ADDR_VAR 0 2
59186: PUSH
59187: LD_INT 22
59189: PUSH
59190: LD_OWVAR 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 21
59201: PUSH
59202: LD_INT 3
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PPUSH
59213: CALL_OW 69
59217: ST_TO_ADDR
// if not tmp then
59218: LD_VAR 0 2
59222: NOT
59223: IFFALSE 59227
// exit ;
59225: GO 59256
// for i in tmp do
59227: LD_ADDR_VAR 0 1
59231: PUSH
59232: LD_VAR 0 2
59236: PUSH
59237: FOR_IN
59238: IFFALSE 59254
// SetBLevel ( i , 10 ) ;
59240: LD_VAR 0 1
59244: PPUSH
59245: LD_INT 10
59247: PPUSH
59248: CALL_OW 241
59252: GO 59237
59254: POP
59255: POP
// end ;
59256: PPOPN 2
59258: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59259: LD_EXP 44
59263: PUSH
59264: LD_EXP 61
59268: AND
59269: IFFALSE 59380
59271: GO 59273
59273: DISABLE
59274: LD_INT 0
59276: PPUSH
59277: PPUSH
59278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59279: LD_ADDR_VAR 0 3
59283: PUSH
59284: LD_INT 22
59286: PUSH
59287: LD_OWVAR 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 25
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PPUSH
59310: CALL_OW 69
59314: ST_TO_ADDR
// if not tmp then
59315: LD_VAR 0 3
59319: NOT
59320: IFFALSE 59324
// exit ;
59322: GO 59380
// un := tmp [ rand ( 1 , tmp ) ] ;
59324: LD_ADDR_VAR 0 2
59328: PUSH
59329: LD_VAR 0 3
59333: PUSH
59334: LD_INT 1
59336: PPUSH
59337: LD_VAR 0 3
59341: PPUSH
59342: CALL_OW 12
59346: ARRAY
59347: ST_TO_ADDR
// if Crawls ( un ) then
59348: LD_VAR 0 2
59352: PPUSH
59353: CALL_OW 318
59357: IFFALSE 59368
// ComWalk ( un ) ;
59359: LD_VAR 0 2
59363: PPUSH
59364: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59368: LD_VAR 0 2
59372: PPUSH
59373: LD_INT 5
59375: PPUSH
59376: CALL_OW 336
// end ;
59380: PPOPN 3
59382: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59383: LD_EXP 44
59387: PUSH
59388: LD_EXP 62
59392: AND
59393: PUSH
59394: LD_OWVAR 67
59398: PUSH
59399: LD_INT 4
59401: LESS
59402: AND
59403: IFFALSE 59422
59405: GO 59407
59407: DISABLE
// begin Difficulty := Difficulty + 1 ;
59408: LD_ADDR_OWVAR 67
59412: PUSH
59413: LD_OWVAR 67
59417: PUSH
59418: LD_INT 1
59420: PLUS
59421: ST_TO_ADDR
// end ;
59422: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59423: LD_EXP 44
59427: PUSH
59428: LD_EXP 63
59432: AND
59433: IFFALSE 59536
59435: GO 59437
59437: DISABLE
59438: LD_INT 0
59440: PPUSH
// begin for i := 1 to 5 do
59441: LD_ADDR_VAR 0 1
59445: PUSH
59446: DOUBLE
59447: LD_INT 1
59449: DEC
59450: ST_TO_ADDR
59451: LD_INT 5
59453: PUSH
59454: FOR_TO
59455: IFFALSE 59534
// begin uc_nation := nation_nature ;
59457: LD_ADDR_OWVAR 21
59461: PUSH
59462: LD_INT 0
59464: ST_TO_ADDR
// uc_side := 0 ;
59465: LD_ADDR_OWVAR 20
59469: PUSH
59470: LD_INT 0
59472: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59473: LD_ADDR_OWVAR 29
59477: PUSH
59478: LD_INT 12
59480: PUSH
59481: LD_INT 12
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// hc_agressivity := 20 ;
59488: LD_ADDR_OWVAR 35
59492: PUSH
59493: LD_INT 20
59495: ST_TO_ADDR
// hc_class := class_tiger ;
59496: LD_ADDR_OWVAR 28
59500: PUSH
59501: LD_INT 14
59503: ST_TO_ADDR
// hc_gallery :=  ;
59504: LD_ADDR_OWVAR 33
59508: PUSH
59509: LD_STRING 
59511: ST_TO_ADDR
// hc_name :=  ;
59512: LD_ADDR_OWVAR 26
59516: PUSH
59517: LD_STRING 
59519: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59520: CALL_OW 44
59524: PPUSH
59525: LD_INT 0
59527: PPUSH
59528: CALL_OW 51
// end ;
59532: GO 59454
59534: POP
59535: POP
// end ;
59536: PPOPN 1
59538: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59539: LD_EXP 44
59543: PUSH
59544: LD_EXP 64
59548: AND
59549: IFFALSE 59558
59551: GO 59553
59553: DISABLE
// StreamSibBomb ;
59554: CALL 59559 0 0
59558: END
// export function StreamSibBomb ; var i , x , y ; begin
59559: LD_INT 0
59561: PPUSH
59562: PPUSH
59563: PPUSH
59564: PPUSH
// result := false ;
59565: LD_ADDR_VAR 0 1
59569: PUSH
59570: LD_INT 0
59572: ST_TO_ADDR
// for i := 1 to 16 do
59573: LD_ADDR_VAR 0 2
59577: PUSH
59578: DOUBLE
59579: LD_INT 1
59581: DEC
59582: ST_TO_ADDR
59583: LD_INT 16
59585: PUSH
59586: FOR_TO
59587: IFFALSE 59786
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59589: LD_ADDR_VAR 0 3
59593: PUSH
59594: LD_INT 10
59596: PUSH
59597: LD_INT 20
59599: PUSH
59600: LD_INT 30
59602: PUSH
59603: LD_INT 40
59605: PUSH
59606: LD_INT 50
59608: PUSH
59609: LD_INT 60
59611: PUSH
59612: LD_INT 70
59614: PUSH
59615: LD_INT 80
59617: PUSH
59618: LD_INT 90
59620: PUSH
59621: LD_INT 100
59623: PUSH
59624: LD_INT 110
59626: PUSH
59627: LD_INT 120
59629: PUSH
59630: LD_INT 130
59632: PUSH
59633: LD_INT 140
59635: PUSH
59636: LD_INT 150
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PPUSH
59659: LD_INT 15
59661: PPUSH
59662: CALL_OW 12
59666: ARRAY
59667: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59668: LD_ADDR_VAR 0 4
59672: PUSH
59673: LD_INT 10
59675: PUSH
59676: LD_INT 20
59678: PUSH
59679: LD_INT 30
59681: PUSH
59682: LD_INT 40
59684: PUSH
59685: LD_INT 50
59687: PUSH
59688: LD_INT 60
59690: PUSH
59691: LD_INT 70
59693: PUSH
59694: LD_INT 80
59696: PUSH
59697: LD_INT 90
59699: PUSH
59700: LD_INT 100
59702: PUSH
59703: LD_INT 110
59705: PUSH
59706: LD_INT 120
59708: PUSH
59709: LD_INT 130
59711: PUSH
59712: LD_INT 140
59714: PUSH
59715: LD_INT 150
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PPUSH
59738: LD_INT 15
59740: PPUSH
59741: CALL_OW 12
59745: ARRAY
59746: ST_TO_ADDR
// if ValidHex ( x , y ) then
59747: LD_VAR 0 3
59751: PPUSH
59752: LD_VAR 0 4
59756: PPUSH
59757: CALL_OW 488
59761: IFFALSE 59784
// begin result := [ x , y ] ;
59763: LD_ADDR_VAR 0 1
59767: PUSH
59768: LD_VAR 0 3
59772: PUSH
59773: LD_VAR 0 4
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: ST_TO_ADDR
// break ;
59782: GO 59786
// end ; end ;
59784: GO 59586
59786: POP
59787: POP
// if result then
59788: LD_VAR 0 1
59792: IFFALSE 59852
// begin ToLua ( playSibBomb() ) ;
59794: LD_STRING playSibBomb()
59796: PPUSH
59797: CALL_OW 559
// wait ( 0 0$14 ) ;
59801: LD_INT 490
59803: PPUSH
59804: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59808: LD_VAR 0 1
59812: PUSH
59813: LD_INT 1
59815: ARRAY
59816: PPUSH
59817: LD_VAR 0 1
59821: PUSH
59822: LD_INT 2
59824: ARRAY
59825: PPUSH
59826: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59830: LD_VAR 0 1
59834: PUSH
59835: LD_INT 1
59837: ARRAY
59838: PPUSH
59839: LD_VAR 0 1
59843: PUSH
59844: LD_INT 2
59846: ARRAY
59847: PPUSH
59848: CALL_OW 429
// end ; end ;
59852: LD_VAR 0 1
59856: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59857: LD_EXP 44
59861: PUSH
59862: LD_EXP 66
59866: AND
59867: IFFALSE 59879
59869: GO 59871
59871: DISABLE
// YouLost (  ) ;
59872: LD_STRING 
59874: PPUSH
59875: CALL_OW 104
59879: END
// every 0 0$1 trigger StreamModeActive and sFog do
59880: LD_EXP 44
59884: PUSH
59885: LD_EXP 65
59889: AND
59890: IFFALSE 59904
59892: GO 59894
59894: DISABLE
// FogOff ( your_side ) ;
59895: LD_OWVAR 2
59899: PPUSH
59900: CALL_OW 344
59904: END
// every 0 0$1 trigger StreamModeActive and sSun do
59905: LD_EXP 44
59909: PUSH
59910: LD_EXP 67
59914: AND
59915: IFFALSE 59943
59917: GO 59919
59919: DISABLE
// begin solar_recharge_percent := 0 ;
59920: LD_ADDR_OWVAR 79
59924: PUSH
59925: LD_INT 0
59927: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59928: LD_INT 10500
59930: PPUSH
59931: CALL_OW 67
// solar_recharge_percent := 100 ;
59935: LD_ADDR_OWVAR 79
59939: PUSH
59940: LD_INT 100
59942: ST_TO_ADDR
// end ;
59943: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59944: LD_EXP 44
59948: PUSH
59949: LD_EXP 68
59953: AND
59954: IFFALSE 60193
59956: GO 59958
59958: DISABLE
59959: LD_INT 0
59961: PPUSH
59962: PPUSH
59963: PPUSH
// begin tmp := [ ] ;
59964: LD_ADDR_VAR 0 3
59968: PUSH
59969: EMPTY
59970: ST_TO_ADDR
// for i := 1 to 6 do
59971: LD_ADDR_VAR 0 1
59975: PUSH
59976: DOUBLE
59977: LD_INT 1
59979: DEC
59980: ST_TO_ADDR
59981: LD_INT 6
59983: PUSH
59984: FOR_TO
59985: IFFALSE 60090
// begin uc_nation := nation_nature ;
59987: LD_ADDR_OWVAR 21
59991: PUSH
59992: LD_INT 0
59994: ST_TO_ADDR
// uc_side := 0 ;
59995: LD_ADDR_OWVAR 20
59999: PUSH
60000: LD_INT 0
60002: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60003: LD_ADDR_OWVAR 29
60007: PUSH
60008: LD_INT 12
60010: PUSH
60011: LD_INT 12
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: ST_TO_ADDR
// hc_agressivity := 20 ;
60018: LD_ADDR_OWVAR 35
60022: PUSH
60023: LD_INT 20
60025: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60026: LD_ADDR_OWVAR 28
60030: PUSH
60031: LD_INT 17
60033: ST_TO_ADDR
// hc_gallery :=  ;
60034: LD_ADDR_OWVAR 33
60038: PUSH
60039: LD_STRING 
60041: ST_TO_ADDR
// hc_name :=  ;
60042: LD_ADDR_OWVAR 26
60046: PUSH
60047: LD_STRING 
60049: ST_TO_ADDR
// un := CreateHuman ;
60050: LD_ADDR_VAR 0 2
60054: PUSH
60055: CALL_OW 44
60059: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60060: LD_VAR 0 2
60064: PPUSH
60065: LD_INT 1
60067: PPUSH
60068: CALL_OW 51
// tmp := tmp ^ un ;
60072: LD_ADDR_VAR 0 3
60076: PUSH
60077: LD_VAR 0 3
60081: PUSH
60082: LD_VAR 0 2
60086: ADD
60087: ST_TO_ADDR
// end ;
60088: GO 59984
60090: POP
60091: POP
// repeat wait ( 0 0$1 ) ;
60092: LD_INT 35
60094: PPUSH
60095: CALL_OW 67
// for un in tmp do
60099: LD_ADDR_VAR 0 2
60103: PUSH
60104: LD_VAR 0 3
60108: PUSH
60109: FOR_IN
60110: IFFALSE 60184
// begin if IsDead ( un ) then
60112: LD_VAR 0 2
60116: PPUSH
60117: CALL_OW 301
60121: IFFALSE 60141
// begin tmp := tmp diff un ;
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: LD_VAR 0 3
60132: PUSH
60133: LD_VAR 0 2
60137: DIFF
60138: ST_TO_ADDR
// continue ;
60139: GO 60109
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60141: LD_VAR 0 2
60145: PPUSH
60146: LD_INT 3
60148: PUSH
60149: LD_INT 22
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PPUSH
60163: CALL_OW 69
60167: PPUSH
60168: LD_VAR 0 2
60172: PPUSH
60173: CALL_OW 74
60177: PPUSH
60178: CALL_OW 115
// end ;
60182: GO 60109
60184: POP
60185: POP
// until not tmp ;
60186: LD_VAR 0 3
60190: NOT
60191: IFFALSE 60092
// end ;
60193: PPOPN 3
60195: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60196: LD_EXP 44
60200: PUSH
60201: LD_EXP 69
60205: AND
60206: IFFALSE 60260
60208: GO 60210
60210: DISABLE
// begin ToLua ( displayTroll(); ) ;
60211: LD_STRING displayTroll();
60213: PPUSH
60214: CALL_OW 559
// wait ( 3 3$00 ) ;
60218: LD_INT 6300
60220: PPUSH
60221: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60225: LD_STRING hideTroll();
60227: PPUSH
60228: CALL_OW 559
// wait ( 1 1$00 ) ;
60232: LD_INT 2100
60234: PPUSH
60235: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60239: LD_STRING displayTroll();
60241: PPUSH
60242: CALL_OW 559
// wait ( 1 1$00 ) ;
60246: LD_INT 2100
60248: PPUSH
60249: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60253: LD_STRING hideTroll();
60255: PPUSH
60256: CALL_OW 559
// end ;
60260: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60261: LD_EXP 44
60265: PUSH
60266: LD_EXP 70
60270: AND
60271: IFFALSE 60334
60273: GO 60275
60275: DISABLE
60276: LD_INT 0
60278: PPUSH
// begin p := 0 ;
60279: LD_ADDR_VAR 0 1
60283: PUSH
60284: LD_INT 0
60286: ST_TO_ADDR
// repeat game_speed := 1 ;
60287: LD_ADDR_OWVAR 65
60291: PUSH
60292: LD_INT 1
60294: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60295: LD_INT 35
60297: PPUSH
60298: CALL_OW 67
// p := p + 1 ;
60302: LD_ADDR_VAR 0 1
60306: PUSH
60307: LD_VAR 0 1
60311: PUSH
60312: LD_INT 1
60314: PLUS
60315: ST_TO_ADDR
// until p >= 60 ;
60316: LD_VAR 0 1
60320: PUSH
60321: LD_INT 60
60323: GREATEREQUAL
60324: IFFALSE 60287
// game_speed := 4 ;
60326: LD_ADDR_OWVAR 65
60330: PUSH
60331: LD_INT 4
60333: ST_TO_ADDR
// end ;
60334: PPOPN 1
60336: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60337: LD_EXP 44
60341: PUSH
60342: LD_EXP 71
60346: AND
60347: IFFALSE 60493
60349: GO 60351
60351: DISABLE
60352: LD_INT 0
60354: PPUSH
60355: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60356: LD_ADDR_VAR 0 1
60360: PUSH
60361: LD_INT 22
60363: PUSH
60364: LD_OWVAR 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: LD_INT 30
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 30
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PPUSH
60405: CALL_OW 69
60409: ST_TO_ADDR
// if not depot then
60410: LD_VAR 0 1
60414: NOT
60415: IFFALSE 60419
// exit ;
60417: GO 60493
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60419: LD_ADDR_VAR 0 2
60423: PUSH
60424: LD_VAR 0 1
60428: PUSH
60429: LD_INT 1
60431: PPUSH
60432: LD_VAR 0 1
60436: PPUSH
60437: CALL_OW 12
60441: ARRAY
60442: PPUSH
60443: CALL_OW 274
60447: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60448: LD_VAR 0 2
60452: PPUSH
60453: LD_INT 1
60455: PPUSH
60456: LD_INT 0
60458: PPUSH
60459: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60463: LD_VAR 0 2
60467: PPUSH
60468: LD_INT 2
60470: PPUSH
60471: LD_INT 0
60473: PPUSH
60474: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60478: LD_VAR 0 2
60482: PPUSH
60483: LD_INT 3
60485: PPUSH
60486: LD_INT 0
60488: PPUSH
60489: CALL_OW 277
// end ;
60493: PPOPN 2
60495: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60496: LD_EXP 44
60500: PUSH
60501: LD_EXP 72
60505: AND
60506: IFFALSE 60603
60508: GO 60510
60510: DISABLE
60511: LD_INT 0
60513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60514: LD_ADDR_VAR 0 1
60518: PUSH
60519: LD_INT 22
60521: PUSH
60522: LD_OWVAR 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 21
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 23
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: LIST
60562: PPUSH
60563: CALL_OW 69
60567: ST_TO_ADDR
// if not tmp then
60568: LD_VAR 0 1
60572: NOT
60573: IFFALSE 60577
// exit ;
60575: GO 60603
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60577: LD_VAR 0 1
60581: PUSH
60582: LD_INT 1
60584: PPUSH
60585: LD_VAR 0 1
60589: PPUSH
60590: CALL_OW 12
60594: ARRAY
60595: PPUSH
60596: LD_INT 200
60598: PPUSH
60599: CALL_OW 234
// end ;
60603: PPOPN 1
60605: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60606: LD_EXP 44
60610: PUSH
60611: LD_EXP 73
60615: AND
60616: IFFALSE 60695
60618: GO 60620
60620: DISABLE
60621: LD_INT 0
60623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60624: LD_ADDR_VAR 0 1
60628: PUSH
60629: LD_INT 22
60631: PUSH
60632: LD_OWVAR 2
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 21
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PPUSH
60655: CALL_OW 69
60659: ST_TO_ADDR
// if not tmp then
60660: LD_VAR 0 1
60664: NOT
60665: IFFALSE 60669
// exit ;
60667: GO 60695
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60669: LD_VAR 0 1
60673: PUSH
60674: LD_INT 1
60676: PPUSH
60677: LD_VAR 0 1
60681: PPUSH
60682: CALL_OW 12
60686: ARRAY
60687: PPUSH
60688: LD_INT 60
60690: PPUSH
60691: CALL_OW 234
// end ;
60695: PPOPN 1
60697: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60698: LD_EXP 44
60702: PUSH
60703: LD_EXP 74
60707: AND
60708: IFFALSE 60807
60710: GO 60712
60712: DISABLE
60713: LD_INT 0
60715: PPUSH
60716: PPUSH
// begin enable ;
60717: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60718: LD_ADDR_VAR 0 1
60722: PUSH
60723: LD_INT 22
60725: PUSH
60726: LD_OWVAR 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 61
60737: PUSH
60738: EMPTY
60739: LIST
60740: PUSH
60741: LD_INT 33
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: PPUSH
60756: CALL_OW 69
60760: ST_TO_ADDR
// if not tmp then
60761: LD_VAR 0 1
60765: NOT
60766: IFFALSE 60770
// exit ;
60768: GO 60807
// for i in tmp do
60770: LD_ADDR_VAR 0 2
60774: PUSH
60775: LD_VAR 0 1
60779: PUSH
60780: FOR_IN
60781: IFFALSE 60805
// if IsControledBy ( i ) then
60783: LD_VAR 0 2
60787: PPUSH
60788: CALL_OW 312
60792: IFFALSE 60803
// ComUnlink ( i ) ;
60794: LD_VAR 0 2
60798: PPUSH
60799: CALL_OW 136
60803: GO 60780
60805: POP
60806: POP
// end ;
60807: PPOPN 2
60809: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60810: LD_EXP 44
60814: PUSH
60815: LD_EXP 75
60819: AND
60820: IFFALSE 60960
60822: GO 60824
60824: DISABLE
60825: LD_INT 0
60827: PPUSH
60828: PPUSH
// begin ToLua ( displayPowell(); ) ;
60829: LD_STRING displayPowell();
60831: PPUSH
60832: CALL_OW 559
// uc_side := 0 ;
60836: LD_ADDR_OWVAR 20
60840: PUSH
60841: LD_INT 0
60843: ST_TO_ADDR
// uc_nation := 2 ;
60844: LD_ADDR_OWVAR 21
60848: PUSH
60849: LD_INT 2
60851: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60852: LD_ADDR_OWVAR 37
60856: PUSH
60857: LD_INT 14
60859: ST_TO_ADDR
// vc_engine := engine_siberite ;
60860: LD_ADDR_OWVAR 39
60864: PUSH
60865: LD_INT 3
60867: ST_TO_ADDR
// vc_control := control_apeman ;
60868: LD_ADDR_OWVAR 38
60872: PUSH
60873: LD_INT 5
60875: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60876: LD_ADDR_OWVAR 40
60880: PUSH
60881: LD_INT 29
60883: ST_TO_ADDR
// un := CreateVehicle ;
60884: LD_ADDR_VAR 0 2
60888: PUSH
60889: CALL_OW 45
60893: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60894: LD_VAR 0 2
60898: PPUSH
60899: LD_INT 1
60901: PPUSH
60902: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60906: LD_INT 35
60908: PPUSH
60909: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60913: LD_VAR 0 2
60917: PPUSH
60918: LD_INT 22
60920: PUSH
60921: LD_OWVAR 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PPUSH
60930: CALL_OW 69
60934: PPUSH
60935: LD_VAR 0 2
60939: PPUSH
60940: CALL_OW 74
60944: PPUSH
60945: CALL_OW 115
// until IsDead ( un ) ;
60949: LD_VAR 0 2
60953: PPUSH
60954: CALL_OW 301
60958: IFFALSE 60906
// end ;
60960: PPOPN 2
60962: END
// every 0 0$1 trigger StreamModeActive and sStu do
60963: LD_EXP 44
60967: PUSH
60968: LD_EXP 83
60972: AND
60973: IFFALSE 60989
60975: GO 60977
60977: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60978: LD_STRING displayStucuk();
60980: PPUSH
60981: CALL_OW 559
// ResetFog ;
60985: CALL_OW 335
// end ;
60989: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60990: LD_EXP 44
60994: PUSH
60995: LD_EXP 76
60999: AND
61000: IFFALSE 61141
61002: GO 61004
61004: DISABLE
61005: LD_INT 0
61007: PPUSH
61008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61009: LD_ADDR_VAR 0 2
61013: PUSH
61014: LD_INT 22
61016: PUSH
61017: LD_OWVAR 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 21
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PPUSH
61040: CALL_OW 69
61044: ST_TO_ADDR
// if not tmp then
61045: LD_VAR 0 2
61049: NOT
61050: IFFALSE 61054
// exit ;
61052: GO 61141
// un := tmp [ rand ( 1 , tmp ) ] ;
61054: LD_ADDR_VAR 0 1
61058: PUSH
61059: LD_VAR 0 2
61063: PUSH
61064: LD_INT 1
61066: PPUSH
61067: LD_VAR 0 2
61071: PPUSH
61072: CALL_OW 12
61076: ARRAY
61077: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61078: LD_VAR 0 1
61082: PPUSH
61083: LD_INT 0
61085: PPUSH
61086: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61090: LD_VAR 0 1
61094: PPUSH
61095: LD_OWVAR 3
61099: PUSH
61100: LD_VAR 0 1
61104: DIFF
61105: PPUSH
61106: LD_VAR 0 1
61110: PPUSH
61111: CALL_OW 74
61115: PPUSH
61116: CALL_OW 115
// wait ( 0 0$20 ) ;
61120: LD_INT 700
61122: PPUSH
61123: CALL_OW 67
// SetSide ( un , your_side ) ;
61127: LD_VAR 0 1
61131: PPUSH
61132: LD_OWVAR 2
61136: PPUSH
61137: CALL_OW 235
// end ;
61141: PPOPN 2
61143: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61144: LD_EXP 44
61148: PUSH
61149: LD_EXP 77
61153: AND
61154: IFFALSE 61260
61156: GO 61158
61158: DISABLE
61159: LD_INT 0
61161: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61162: LD_ADDR_VAR 0 1
61166: PUSH
61167: LD_INT 22
61169: PUSH
61170: LD_OWVAR 2
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: LD_INT 30
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 30
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PPUSH
61211: CALL_OW 69
61215: ST_TO_ADDR
// if not depot then
61216: LD_VAR 0 1
61220: NOT
61221: IFFALSE 61225
// exit ;
61223: GO 61260
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61225: LD_VAR 0 1
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PPUSH
61234: CALL_OW 250
61238: PPUSH
61239: LD_VAR 0 1
61243: PUSH
61244: LD_INT 1
61246: ARRAY
61247: PPUSH
61248: CALL_OW 251
61252: PPUSH
61253: LD_INT 70
61255: PPUSH
61256: CALL_OW 495
// end ;
61260: PPOPN 1
61262: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61263: LD_EXP 44
61267: PUSH
61268: LD_EXP 78
61272: AND
61273: IFFALSE 61484
61275: GO 61277
61277: DISABLE
61278: LD_INT 0
61280: PPUSH
61281: PPUSH
61282: PPUSH
61283: PPUSH
61284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61285: LD_ADDR_VAR 0 5
61289: PUSH
61290: LD_INT 22
61292: PUSH
61293: LD_OWVAR 2
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 21
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PPUSH
61316: CALL_OW 69
61320: ST_TO_ADDR
// if not tmp then
61321: LD_VAR 0 5
61325: NOT
61326: IFFALSE 61330
// exit ;
61328: GO 61484
// for i in tmp do
61330: LD_ADDR_VAR 0 1
61334: PUSH
61335: LD_VAR 0 5
61339: PUSH
61340: FOR_IN
61341: IFFALSE 61482
// begin d := rand ( 0 , 5 ) ;
61343: LD_ADDR_VAR 0 4
61347: PUSH
61348: LD_INT 0
61350: PPUSH
61351: LD_INT 5
61353: PPUSH
61354: CALL_OW 12
61358: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61359: LD_ADDR_VAR 0 2
61363: PUSH
61364: LD_VAR 0 1
61368: PPUSH
61369: CALL_OW 250
61373: PPUSH
61374: LD_VAR 0 4
61378: PPUSH
61379: LD_INT 3
61381: PPUSH
61382: LD_INT 12
61384: PPUSH
61385: CALL_OW 12
61389: PPUSH
61390: CALL_OW 272
61394: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61395: LD_ADDR_VAR 0 3
61399: PUSH
61400: LD_VAR 0 1
61404: PPUSH
61405: CALL_OW 251
61409: PPUSH
61410: LD_VAR 0 4
61414: PPUSH
61415: LD_INT 3
61417: PPUSH
61418: LD_INT 12
61420: PPUSH
61421: CALL_OW 12
61425: PPUSH
61426: CALL_OW 273
61430: ST_TO_ADDR
// if ValidHex ( x , y ) then
61431: LD_VAR 0 2
61435: PPUSH
61436: LD_VAR 0 3
61440: PPUSH
61441: CALL_OW 488
61445: IFFALSE 61480
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61447: LD_VAR 0 1
61451: PPUSH
61452: LD_VAR 0 2
61456: PPUSH
61457: LD_VAR 0 3
61461: PPUSH
61462: LD_INT 3
61464: PPUSH
61465: LD_INT 6
61467: PPUSH
61468: CALL_OW 12
61472: PPUSH
61473: LD_INT 1
61475: PPUSH
61476: CALL_OW 483
// end ;
61480: GO 61340
61482: POP
61483: POP
// end ;
61484: PPOPN 5
61486: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61487: LD_EXP 44
61491: PUSH
61492: LD_EXP 79
61496: AND
61497: IFFALSE 61591
61499: GO 61501
61501: DISABLE
61502: LD_INT 0
61504: PPUSH
61505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61506: LD_ADDR_VAR 0 2
61510: PUSH
61511: LD_INT 22
61513: PUSH
61514: LD_OWVAR 2
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 32
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 21
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: PPUSH
61548: CALL_OW 69
61552: ST_TO_ADDR
// if not tmp then
61553: LD_VAR 0 2
61557: NOT
61558: IFFALSE 61562
// exit ;
61560: GO 61591
// for i in tmp do
61562: LD_ADDR_VAR 0 1
61566: PUSH
61567: LD_VAR 0 2
61571: PUSH
61572: FOR_IN
61573: IFFALSE 61589
// SetFuel ( i , 0 ) ;
61575: LD_VAR 0 1
61579: PPUSH
61580: LD_INT 0
61582: PPUSH
61583: CALL_OW 240
61587: GO 61572
61589: POP
61590: POP
// end ;
61591: PPOPN 2
61593: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61594: LD_EXP 44
61598: PUSH
61599: LD_EXP 80
61603: AND
61604: IFFALSE 61670
61606: GO 61608
61608: DISABLE
61609: LD_INT 0
61611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61612: LD_ADDR_VAR 0 1
61616: PUSH
61617: LD_INT 22
61619: PUSH
61620: LD_OWVAR 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 30
61631: PUSH
61632: LD_INT 29
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PPUSH
61643: CALL_OW 69
61647: ST_TO_ADDR
// if not tmp then
61648: LD_VAR 0 1
61652: NOT
61653: IFFALSE 61657
// exit ;
61655: GO 61670
// DestroyUnit ( tmp [ 1 ] ) ;
61657: LD_VAR 0 1
61661: PUSH
61662: LD_INT 1
61664: ARRAY
61665: PPUSH
61666: CALL_OW 65
// end ;
61670: PPOPN 1
61672: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61673: LD_EXP 44
61677: PUSH
61678: LD_EXP 82
61682: AND
61683: IFFALSE 61812
61685: GO 61687
61687: DISABLE
61688: LD_INT 0
61690: PPUSH
// begin uc_side := 0 ;
61691: LD_ADDR_OWVAR 20
61695: PUSH
61696: LD_INT 0
61698: ST_TO_ADDR
// uc_nation := nation_arabian ;
61699: LD_ADDR_OWVAR 21
61703: PUSH
61704: LD_INT 2
61706: ST_TO_ADDR
// hc_gallery :=  ;
61707: LD_ADDR_OWVAR 33
61711: PUSH
61712: LD_STRING 
61714: ST_TO_ADDR
// hc_name :=  ;
61715: LD_ADDR_OWVAR 26
61719: PUSH
61720: LD_STRING 
61722: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61723: LD_INT 1
61725: PPUSH
61726: LD_INT 11
61728: PPUSH
61729: LD_INT 10
61731: PPUSH
61732: CALL_OW 380
// un := CreateHuman ;
61736: LD_ADDR_VAR 0 1
61740: PUSH
61741: CALL_OW 44
61745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61746: LD_VAR 0 1
61750: PPUSH
61751: LD_INT 1
61753: PPUSH
61754: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61758: LD_INT 35
61760: PPUSH
61761: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61765: LD_VAR 0 1
61769: PPUSH
61770: LD_INT 22
61772: PUSH
61773: LD_OWVAR 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PPUSH
61782: CALL_OW 69
61786: PPUSH
61787: LD_VAR 0 1
61791: PPUSH
61792: CALL_OW 74
61796: PPUSH
61797: CALL_OW 115
// until IsDead ( un ) ;
61801: LD_VAR 0 1
61805: PPUSH
61806: CALL_OW 301
61810: IFFALSE 61758
// end ;
61812: PPOPN 1
61814: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61815: LD_EXP 44
61819: PUSH
61820: LD_EXP 84
61824: AND
61825: IFFALSE 61837
61827: GO 61829
61829: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61830: LD_STRING earthquake(getX(game), 0, 32)
61832: PPUSH
61833: CALL_OW 559
61837: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61838: LD_EXP 44
61842: PUSH
61843: LD_EXP 85
61847: AND
61848: IFFALSE 61939
61850: GO 61852
61852: DISABLE
61853: LD_INT 0
61855: PPUSH
// begin enable ;
61856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61857: LD_ADDR_VAR 0 1
61861: PUSH
61862: LD_INT 22
61864: PUSH
61865: LD_OWVAR 2
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 21
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 33
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: PPUSH
61899: CALL_OW 69
61903: ST_TO_ADDR
// if not tmp then
61904: LD_VAR 0 1
61908: NOT
61909: IFFALSE 61913
// exit ;
61911: GO 61939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 1
61920: PPUSH
61921: LD_VAR 0 1
61925: PPUSH
61926: CALL_OW 12
61930: ARRAY
61931: PPUSH
61932: LD_INT 1
61934: PPUSH
61935: CALL_OW 234
// end ;
61939: PPOPN 1
61941: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61942: LD_EXP 44
61946: PUSH
61947: LD_EXP 86
61951: AND
61952: IFFALSE 62093
61954: GO 61956
61956: DISABLE
61957: LD_INT 0
61959: PPUSH
61960: PPUSH
61961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61962: LD_ADDR_VAR 0 3
61966: PUSH
61967: LD_INT 22
61969: PUSH
61970: LD_OWVAR 2
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 25
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PPUSH
61993: CALL_OW 69
61997: ST_TO_ADDR
// if not tmp then
61998: LD_VAR 0 3
62002: NOT
62003: IFFALSE 62007
// exit ;
62005: GO 62093
// un := tmp [ rand ( 1 , tmp ) ] ;
62007: LD_ADDR_VAR 0 2
62011: PUSH
62012: LD_VAR 0 3
62016: PUSH
62017: LD_INT 1
62019: PPUSH
62020: LD_VAR 0 3
62024: PPUSH
62025: CALL_OW 12
62029: ARRAY
62030: ST_TO_ADDR
// if Crawls ( un ) then
62031: LD_VAR 0 2
62035: PPUSH
62036: CALL_OW 318
62040: IFFALSE 62051
// ComWalk ( un ) ;
62042: LD_VAR 0 2
62046: PPUSH
62047: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62051: LD_VAR 0 2
62055: PPUSH
62056: LD_INT 9
62058: PPUSH
62059: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62063: LD_INT 28
62065: PPUSH
62066: LD_OWVAR 2
62070: PPUSH
62071: LD_INT 2
62073: PPUSH
62074: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62078: LD_INT 29
62080: PPUSH
62081: LD_OWVAR 2
62085: PPUSH
62086: LD_INT 2
62088: PPUSH
62089: CALL_OW 322
// end ;
62093: PPOPN 3
62095: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62096: LD_EXP 44
62100: PUSH
62101: LD_EXP 87
62105: AND
62106: IFFALSE 62217
62108: GO 62110
62110: DISABLE
62111: LD_INT 0
62113: PPUSH
62114: PPUSH
62115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62116: LD_ADDR_VAR 0 3
62120: PUSH
62121: LD_INT 22
62123: PUSH
62124: LD_OWVAR 2
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 25
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PPUSH
62147: CALL_OW 69
62151: ST_TO_ADDR
// if not tmp then
62152: LD_VAR 0 3
62156: NOT
62157: IFFALSE 62161
// exit ;
62159: GO 62217
// un := tmp [ rand ( 1 , tmp ) ] ;
62161: LD_ADDR_VAR 0 2
62165: PUSH
62166: LD_VAR 0 3
62170: PUSH
62171: LD_INT 1
62173: PPUSH
62174: LD_VAR 0 3
62178: PPUSH
62179: CALL_OW 12
62183: ARRAY
62184: ST_TO_ADDR
// if Crawls ( un ) then
62185: LD_VAR 0 2
62189: PPUSH
62190: CALL_OW 318
62194: IFFALSE 62205
// ComWalk ( un ) ;
62196: LD_VAR 0 2
62200: PPUSH
62201: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62205: LD_VAR 0 2
62209: PPUSH
62210: LD_INT 8
62212: PPUSH
62213: CALL_OW 336
// end ;
62217: PPOPN 3
62219: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62220: LD_EXP 44
62224: PUSH
62225: LD_EXP 88
62229: AND
62230: IFFALSE 62374
62232: GO 62234
62234: DISABLE
62235: LD_INT 0
62237: PPUSH
62238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62239: LD_ADDR_VAR 0 2
62243: PUSH
62244: LD_INT 22
62246: PUSH
62247: LD_OWVAR 2
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 21
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 34
62271: PUSH
62272: LD_INT 12
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 34
62281: PUSH
62282: LD_INT 51
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 34
62291: PUSH
62292: LD_INT 32
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: PPUSH
62310: CALL_OW 69
62314: ST_TO_ADDR
// if not tmp then
62315: LD_VAR 0 2
62319: NOT
62320: IFFALSE 62324
// exit ;
62322: GO 62374
// for i in tmp do
62324: LD_ADDR_VAR 0 1
62328: PUSH
62329: LD_VAR 0 2
62333: PUSH
62334: FOR_IN
62335: IFFALSE 62372
// if GetCargo ( i , mat_artifact ) = 0 then
62337: LD_VAR 0 1
62341: PPUSH
62342: LD_INT 4
62344: PPUSH
62345: CALL_OW 289
62349: PUSH
62350: LD_INT 0
62352: EQUAL
62353: IFFALSE 62370
// SetCargo ( i , mat_siberit , 100 ) ;
62355: LD_VAR 0 1
62359: PPUSH
62360: LD_INT 3
62362: PPUSH
62363: LD_INT 100
62365: PPUSH
62366: CALL_OW 290
62370: GO 62334
62372: POP
62373: POP
// end ;
62374: PPOPN 2
62376: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62377: LD_EXP 44
62381: PUSH
62382: LD_EXP 89
62386: AND
62387: IFFALSE 62570
62389: GO 62391
62391: DISABLE
62392: LD_INT 0
62394: PPUSH
62395: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62396: LD_ADDR_VAR 0 2
62400: PUSH
62401: LD_INT 22
62403: PUSH
62404: LD_OWVAR 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PPUSH
62413: CALL_OW 69
62417: ST_TO_ADDR
// if not tmp then
62418: LD_VAR 0 2
62422: NOT
62423: IFFALSE 62427
// exit ;
62425: GO 62570
// for i := 1 to 2 do
62427: LD_ADDR_VAR 0 1
62431: PUSH
62432: DOUBLE
62433: LD_INT 1
62435: DEC
62436: ST_TO_ADDR
62437: LD_INT 2
62439: PUSH
62440: FOR_TO
62441: IFFALSE 62568
// begin uc_side := your_side ;
62443: LD_ADDR_OWVAR 20
62447: PUSH
62448: LD_OWVAR 2
62452: ST_TO_ADDR
// uc_nation := nation_american ;
62453: LD_ADDR_OWVAR 21
62457: PUSH
62458: LD_INT 1
62460: ST_TO_ADDR
// vc_chassis := us_morphling ;
62461: LD_ADDR_OWVAR 37
62465: PUSH
62466: LD_INT 5
62468: ST_TO_ADDR
// vc_engine := engine_siberite ;
62469: LD_ADDR_OWVAR 39
62473: PUSH
62474: LD_INT 3
62476: ST_TO_ADDR
// vc_control := control_computer ;
62477: LD_ADDR_OWVAR 38
62481: PUSH
62482: LD_INT 3
62484: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62485: LD_ADDR_OWVAR 40
62489: PUSH
62490: LD_INT 10
62492: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62493: LD_VAR 0 2
62497: PUSH
62498: LD_INT 1
62500: ARRAY
62501: PPUSH
62502: CALL_OW 310
62506: NOT
62507: IFFALSE 62554
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62509: CALL_OW 45
62513: PPUSH
62514: LD_VAR 0 2
62518: PUSH
62519: LD_INT 1
62521: ARRAY
62522: PPUSH
62523: CALL_OW 250
62527: PPUSH
62528: LD_VAR 0 2
62532: PUSH
62533: LD_INT 1
62535: ARRAY
62536: PPUSH
62537: CALL_OW 251
62541: PPUSH
62542: LD_INT 12
62544: PPUSH
62545: LD_INT 1
62547: PPUSH
62548: CALL_OW 50
62552: GO 62566
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62554: CALL_OW 45
62558: PPUSH
62559: LD_INT 1
62561: PPUSH
62562: CALL_OW 51
// end ;
62566: GO 62440
62568: POP
62569: POP
// end ;
62570: PPOPN 2
62572: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62573: LD_EXP 44
62577: PUSH
62578: LD_EXP 90
62582: AND
62583: IFFALSE 62805
62585: GO 62587
62587: DISABLE
62588: LD_INT 0
62590: PPUSH
62591: PPUSH
62592: PPUSH
62593: PPUSH
62594: PPUSH
62595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62596: LD_ADDR_VAR 0 6
62600: PUSH
62601: LD_INT 22
62603: PUSH
62604: LD_OWVAR 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 21
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: LD_INT 23
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: PPUSH
62645: CALL_OW 69
62649: ST_TO_ADDR
// if not tmp then
62650: LD_VAR 0 6
62654: NOT
62655: IFFALSE 62659
// exit ;
62657: GO 62805
// s1 := rand ( 1 , 4 ) ;
62659: LD_ADDR_VAR 0 2
62663: PUSH
62664: LD_INT 1
62666: PPUSH
62667: LD_INT 4
62669: PPUSH
62670: CALL_OW 12
62674: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62675: LD_ADDR_VAR 0 4
62679: PUSH
62680: LD_VAR 0 6
62684: PUSH
62685: LD_INT 1
62687: ARRAY
62688: PPUSH
62689: LD_VAR 0 2
62693: PPUSH
62694: CALL_OW 259
62698: ST_TO_ADDR
// if s1 = 1 then
62699: LD_VAR 0 2
62703: PUSH
62704: LD_INT 1
62706: EQUAL
62707: IFFALSE 62727
// s2 := rand ( 2 , 4 ) else
62709: LD_ADDR_VAR 0 3
62713: PUSH
62714: LD_INT 2
62716: PPUSH
62717: LD_INT 4
62719: PPUSH
62720: CALL_OW 12
62724: ST_TO_ADDR
62725: GO 62735
// s2 := 1 ;
62727: LD_ADDR_VAR 0 3
62731: PUSH
62732: LD_INT 1
62734: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62735: LD_ADDR_VAR 0 5
62739: PUSH
62740: LD_VAR 0 6
62744: PUSH
62745: LD_INT 1
62747: ARRAY
62748: PPUSH
62749: LD_VAR 0 3
62753: PPUSH
62754: CALL_OW 259
62758: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62759: LD_VAR 0 6
62763: PUSH
62764: LD_INT 1
62766: ARRAY
62767: PPUSH
62768: LD_VAR 0 2
62772: PPUSH
62773: LD_VAR 0 5
62777: PPUSH
62778: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62782: LD_VAR 0 6
62786: PUSH
62787: LD_INT 1
62789: ARRAY
62790: PPUSH
62791: LD_VAR 0 3
62795: PPUSH
62796: LD_VAR 0 4
62800: PPUSH
62801: CALL_OW 237
// end ;
62805: PPOPN 6
62807: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62808: LD_EXP 44
62812: PUSH
62813: LD_EXP 91
62817: AND
62818: IFFALSE 62897
62820: GO 62822
62822: DISABLE
62823: LD_INT 0
62825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62826: LD_ADDR_VAR 0 1
62830: PUSH
62831: LD_INT 22
62833: PUSH
62834: LD_OWVAR 2
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 30
62845: PUSH
62846: LD_INT 3
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PPUSH
62857: CALL_OW 69
62861: ST_TO_ADDR
// if not tmp then
62862: LD_VAR 0 1
62866: NOT
62867: IFFALSE 62871
// exit ;
62869: GO 62897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62871: LD_VAR 0 1
62875: PUSH
62876: LD_INT 1
62878: PPUSH
62879: LD_VAR 0 1
62883: PPUSH
62884: CALL_OW 12
62888: ARRAY
62889: PPUSH
62890: LD_INT 1
62892: PPUSH
62893: CALL_OW 234
// end ;
62897: PPOPN 1
62899: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62900: LD_EXP 44
62904: PUSH
62905: LD_EXP 92
62909: AND
62910: IFFALSE 63022
62912: GO 62914
62914: DISABLE
62915: LD_INT 0
62917: PPUSH
62918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62919: LD_ADDR_VAR 0 2
62923: PUSH
62924: LD_INT 22
62926: PUSH
62927: LD_OWVAR 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: LD_INT 30
62941: PUSH
62942: LD_INT 27
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 30
62951: PUSH
62952: LD_INT 26
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 30
62961: PUSH
62962: LD_INT 28
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PPUSH
62979: CALL_OW 69
62983: ST_TO_ADDR
// if not tmp then
62984: LD_VAR 0 2
62988: NOT
62989: IFFALSE 62993
// exit ;
62991: GO 63022
// for i in tmp do
62993: LD_ADDR_VAR 0 1
62997: PUSH
62998: LD_VAR 0 2
63002: PUSH
63003: FOR_IN
63004: IFFALSE 63020
// SetLives ( i , 1 ) ;
63006: LD_VAR 0 1
63010: PPUSH
63011: LD_INT 1
63013: PPUSH
63014: CALL_OW 234
63018: GO 63003
63020: POP
63021: POP
// end ;
63022: PPOPN 2
63024: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63025: LD_EXP 44
63029: PUSH
63030: LD_EXP 93
63034: AND
63035: IFFALSE 63322
63037: GO 63039
63039: DISABLE
63040: LD_INT 0
63042: PPUSH
63043: PPUSH
63044: PPUSH
// begin i := rand ( 1 , 7 ) ;
63045: LD_ADDR_VAR 0 1
63049: PUSH
63050: LD_INT 1
63052: PPUSH
63053: LD_INT 7
63055: PPUSH
63056: CALL_OW 12
63060: ST_TO_ADDR
// case i of 1 :
63061: LD_VAR 0 1
63065: PUSH
63066: LD_INT 1
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63074
63072: GO 63084
63074: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63075: LD_STRING earthquake(getX(game), 0, 32)
63077: PPUSH
63078: CALL_OW 559
63082: GO 63322
63084: LD_INT 2
63086: DOUBLE
63087: EQUAL
63088: IFTRUE 63092
63090: GO 63106
63092: POP
// begin ToLua ( displayStucuk(); ) ;
63093: LD_STRING displayStucuk();
63095: PPUSH
63096: CALL_OW 559
// ResetFog ;
63100: CALL_OW 335
// end ; 3 :
63104: GO 63322
63106: LD_INT 3
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63114
63112: GO 63218
63114: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63115: LD_ADDR_VAR 0 2
63119: PUSH
63120: LD_INT 22
63122: PUSH
63123: LD_OWVAR 2
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 25
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PPUSH
63146: CALL_OW 69
63150: ST_TO_ADDR
// if not tmp then
63151: LD_VAR 0 2
63155: NOT
63156: IFFALSE 63160
// exit ;
63158: GO 63322
// un := tmp [ rand ( 1 , tmp ) ] ;
63160: LD_ADDR_VAR 0 3
63164: PUSH
63165: LD_VAR 0 2
63169: PUSH
63170: LD_INT 1
63172: PPUSH
63173: LD_VAR 0 2
63177: PPUSH
63178: CALL_OW 12
63182: ARRAY
63183: ST_TO_ADDR
// if Crawls ( un ) then
63184: LD_VAR 0 3
63188: PPUSH
63189: CALL_OW 318
63193: IFFALSE 63204
// ComWalk ( un ) ;
63195: LD_VAR 0 3
63199: PPUSH
63200: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63204: LD_VAR 0 3
63208: PPUSH
63209: LD_INT 8
63211: PPUSH
63212: CALL_OW 336
// end ; 4 :
63216: GO 63322
63218: LD_INT 4
63220: DOUBLE
63221: EQUAL
63222: IFTRUE 63226
63224: GO 63300
63226: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63227: LD_ADDR_VAR 0 2
63231: PUSH
63232: LD_INT 22
63234: PUSH
63235: LD_OWVAR 2
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 30
63246: PUSH
63247: LD_INT 29
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PPUSH
63258: CALL_OW 69
63262: ST_TO_ADDR
// if not tmp then
63263: LD_VAR 0 2
63267: NOT
63268: IFFALSE 63272
// exit ;
63270: GO 63322
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63272: LD_VAR 0 2
63276: PUSH
63277: LD_INT 1
63279: ARRAY
63280: PPUSH
63281: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63285: LD_VAR 0 2
63289: PUSH
63290: LD_INT 1
63292: ARRAY
63293: PPUSH
63294: CALL_OW 65
// end ; 5 .. 7 :
63298: GO 63322
63300: LD_INT 5
63302: DOUBLE
63303: GREATEREQUAL
63304: IFFALSE 63312
63306: LD_INT 7
63308: DOUBLE
63309: LESSEQUAL
63310: IFTRUE 63314
63312: GO 63321
63314: POP
// StreamSibBomb ; end ;
63315: CALL 59559 0 0
63319: GO 63322
63321: POP
// end ;
63322: PPOPN 3
63324: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63325: LD_EXP 44
63329: PUSH
63330: LD_EXP 94
63334: AND
63335: IFFALSE 63491
63337: GO 63339
63339: DISABLE
63340: LD_INT 0
63342: PPUSH
63343: PPUSH
63344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63345: LD_ADDR_VAR 0 2
63349: PUSH
63350: LD_INT 81
63352: PUSH
63353: LD_OWVAR 2
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: LD_INT 21
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 21
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: LIST
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PPUSH
63394: CALL_OW 69
63398: ST_TO_ADDR
// if not tmp then
63399: LD_VAR 0 2
63403: NOT
63404: IFFALSE 63408
// exit ;
63406: GO 63491
// p := 0 ;
63408: LD_ADDR_VAR 0 3
63412: PUSH
63413: LD_INT 0
63415: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63416: LD_INT 35
63418: PPUSH
63419: CALL_OW 67
// p := p + 1 ;
63423: LD_ADDR_VAR 0 3
63427: PUSH
63428: LD_VAR 0 3
63432: PUSH
63433: LD_INT 1
63435: PLUS
63436: ST_TO_ADDR
// for i in tmp do
63437: LD_ADDR_VAR 0 1
63441: PUSH
63442: LD_VAR 0 2
63446: PUSH
63447: FOR_IN
63448: IFFALSE 63479
// if GetLives ( i ) < 1000 then
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 256
63459: PUSH
63460: LD_INT 1000
63462: LESS
63463: IFFALSE 63477
// SetLives ( i , 1000 ) ;
63465: LD_VAR 0 1
63469: PPUSH
63470: LD_INT 1000
63472: PPUSH
63473: CALL_OW 234
63477: GO 63447
63479: POP
63480: POP
// until p > 20 ;
63481: LD_VAR 0 3
63485: PUSH
63486: LD_INT 20
63488: GREATER
63489: IFFALSE 63416
// end ;
63491: PPOPN 3
63493: END
// every 0 0$1 trigger StreamModeActive and sTime do
63494: LD_EXP 44
63498: PUSH
63499: LD_EXP 95
63503: AND
63504: IFFALSE 63539
63506: GO 63508
63508: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63509: LD_INT 28
63511: PPUSH
63512: LD_OWVAR 2
63516: PPUSH
63517: LD_INT 2
63519: PPUSH
63520: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63524: LD_INT 30
63526: PPUSH
63527: LD_OWVAR 2
63531: PPUSH
63532: LD_INT 2
63534: PPUSH
63535: CALL_OW 322
// end ;
63539: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63540: LD_EXP 44
63544: PUSH
63545: LD_EXP 96
63549: AND
63550: IFFALSE 63671
63552: GO 63554
63554: DISABLE
63555: LD_INT 0
63557: PPUSH
63558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63559: LD_ADDR_VAR 0 2
63563: PUSH
63564: LD_INT 22
63566: PUSH
63567: LD_OWVAR 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 21
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 3
63588: PUSH
63589: LD_INT 23
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: PPUSH
63608: CALL_OW 69
63612: ST_TO_ADDR
// if not tmp then
63613: LD_VAR 0 2
63617: NOT
63618: IFFALSE 63622
// exit ;
63620: GO 63671
// for i in tmp do
63622: LD_ADDR_VAR 0 1
63626: PUSH
63627: LD_VAR 0 2
63631: PUSH
63632: FOR_IN
63633: IFFALSE 63669
// begin if Crawls ( i ) then
63635: LD_VAR 0 1
63639: PPUSH
63640: CALL_OW 318
63644: IFFALSE 63655
// ComWalk ( i ) ;
63646: LD_VAR 0 1
63650: PPUSH
63651: CALL_OW 138
// SetClass ( i , 2 ) ;
63655: LD_VAR 0 1
63659: PPUSH
63660: LD_INT 2
63662: PPUSH
63663: CALL_OW 336
// end ;
63667: GO 63632
63669: POP
63670: POP
// end ;
63671: PPOPN 2
63673: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63674: LD_EXP 44
63678: PUSH
63679: LD_EXP 97
63683: AND
63684: IFFALSE 63972
63686: GO 63688
63688: DISABLE
63689: LD_INT 0
63691: PPUSH
63692: PPUSH
63693: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63694: LD_OWVAR 2
63698: PPUSH
63699: LD_INT 9
63701: PPUSH
63702: LD_INT 1
63704: PPUSH
63705: LD_INT 1
63707: PPUSH
63708: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63712: LD_INT 9
63714: PPUSH
63715: LD_OWVAR 2
63719: PPUSH
63720: CALL_OW 343
// uc_side := 9 ;
63724: LD_ADDR_OWVAR 20
63728: PUSH
63729: LD_INT 9
63731: ST_TO_ADDR
// uc_nation := 2 ;
63732: LD_ADDR_OWVAR 21
63736: PUSH
63737: LD_INT 2
63739: ST_TO_ADDR
// hc_name := Dark Warrior ;
63740: LD_ADDR_OWVAR 26
63744: PUSH
63745: LD_STRING Dark Warrior
63747: ST_TO_ADDR
// hc_gallery :=  ;
63748: LD_ADDR_OWVAR 33
63752: PUSH
63753: LD_STRING 
63755: ST_TO_ADDR
// hc_noskilllimit := true ;
63756: LD_ADDR_OWVAR 76
63760: PUSH
63761: LD_INT 1
63763: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63764: LD_ADDR_OWVAR 31
63768: PUSH
63769: LD_INT 30
63771: PUSH
63772: LD_INT 30
63774: PUSH
63775: LD_INT 30
63777: PUSH
63778: LD_INT 30
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// un := CreateHuman ;
63787: LD_ADDR_VAR 0 3
63791: PUSH
63792: CALL_OW 44
63796: ST_TO_ADDR
// hc_noskilllimit := false ;
63797: LD_ADDR_OWVAR 76
63801: PUSH
63802: LD_INT 0
63804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63805: LD_VAR 0 3
63809: PPUSH
63810: LD_INT 1
63812: PPUSH
63813: CALL_OW 51
// ToLua ( playRanger() ) ;
63817: LD_STRING playRanger()
63819: PPUSH
63820: CALL_OW 559
// p := 0 ;
63824: LD_ADDR_VAR 0 2
63828: PUSH
63829: LD_INT 0
63831: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63832: LD_INT 35
63834: PPUSH
63835: CALL_OW 67
// p := p + 1 ;
63839: LD_ADDR_VAR 0 2
63843: PUSH
63844: LD_VAR 0 2
63848: PUSH
63849: LD_INT 1
63851: PLUS
63852: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63853: LD_VAR 0 3
63857: PPUSH
63858: CALL_OW 256
63862: PUSH
63863: LD_INT 1000
63865: LESS
63866: IFFALSE 63880
// SetLives ( un , 1000 ) ;
63868: LD_VAR 0 3
63872: PPUSH
63873: LD_INT 1000
63875: PPUSH
63876: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63880: LD_VAR 0 3
63884: PPUSH
63885: LD_INT 81
63887: PUSH
63888: LD_OWVAR 2
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 91
63899: PUSH
63900: LD_VAR 0 3
63904: PUSH
63905: LD_INT 30
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PPUSH
63917: CALL_OW 69
63921: PPUSH
63922: LD_VAR 0 3
63926: PPUSH
63927: CALL_OW 74
63931: PPUSH
63932: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63936: LD_VAR 0 2
63940: PUSH
63941: LD_INT 80
63943: GREATER
63944: PUSH
63945: LD_VAR 0 3
63949: PPUSH
63950: CALL_OW 301
63954: OR
63955: IFFALSE 63832
// if un then
63957: LD_VAR 0 3
63961: IFFALSE 63972
// RemoveUnit ( un ) ;
63963: LD_VAR 0 3
63967: PPUSH
63968: CALL_OW 64
// end ;
63972: PPOPN 3
63974: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63975: LD_EXP 98
63979: IFFALSE 64095
63981: GO 63983
63983: DISABLE
63984: LD_INT 0
63986: PPUSH
63987: PPUSH
63988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63989: LD_ADDR_VAR 0 2
63993: PUSH
63994: LD_INT 81
63996: PUSH
63997: LD_OWVAR 2
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 21
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PPUSH
64020: CALL_OW 69
64024: ST_TO_ADDR
// ToLua ( playComputer() ) ;
64025: LD_STRING playComputer()
64027: PPUSH
64028: CALL_OW 559
// if not tmp then
64032: LD_VAR 0 2
64036: NOT
64037: IFFALSE 64041
// exit ;
64039: GO 64095
// for i in tmp do
64041: LD_ADDR_VAR 0 1
64045: PUSH
64046: LD_VAR 0 2
64050: PUSH
64051: FOR_IN
64052: IFFALSE 64093
// for j := 1 to 4 do
64054: LD_ADDR_VAR 0 3
64058: PUSH
64059: DOUBLE
64060: LD_INT 1
64062: DEC
64063: ST_TO_ADDR
64064: LD_INT 4
64066: PUSH
64067: FOR_TO
64068: IFFALSE 64089
// SetSkill ( i , j , 10 ) ;
64070: LD_VAR 0 1
64074: PPUSH
64075: LD_VAR 0 3
64079: PPUSH
64080: LD_INT 10
64082: PPUSH
64083: CALL_OW 237
64087: GO 64067
64089: POP
64090: POP
64091: GO 64051
64093: POP
64094: POP
// end ;
64095: PPOPN 3
64097: END
// every 0 0$1 trigger s30 do var i , tmp ;
64098: LD_EXP 99
64102: IFFALSE 64171
64104: GO 64106
64106: DISABLE
64107: LD_INT 0
64109: PPUSH
64110: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64111: LD_ADDR_VAR 0 2
64115: PUSH
64116: LD_INT 22
64118: PUSH
64119: LD_OWVAR 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PPUSH
64128: CALL_OW 69
64132: ST_TO_ADDR
// if not tmp then
64133: LD_VAR 0 2
64137: NOT
64138: IFFALSE 64142
// exit ;
64140: GO 64171
// for i in tmp do
64142: LD_ADDR_VAR 0 1
64146: PUSH
64147: LD_VAR 0 2
64151: PUSH
64152: FOR_IN
64153: IFFALSE 64169
// SetLives ( i , 300 ) ;
64155: LD_VAR 0 1
64159: PPUSH
64160: LD_INT 300
64162: PPUSH
64163: CALL_OW 234
64167: GO 64152
64169: POP
64170: POP
// end ;
64171: PPOPN 2
64173: END
// every 0 0$1 trigger s60 do var i , tmp ;
64174: LD_EXP 100
64178: IFFALSE 64247
64180: GO 64182
64182: DISABLE
64183: LD_INT 0
64185: PPUSH
64186: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64187: LD_ADDR_VAR 0 2
64191: PUSH
64192: LD_INT 22
64194: PUSH
64195: LD_OWVAR 2
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PPUSH
64204: CALL_OW 69
64208: ST_TO_ADDR
// if not tmp then
64209: LD_VAR 0 2
64213: NOT
64214: IFFALSE 64218
// exit ;
64216: GO 64247
// for i in tmp do
64218: LD_ADDR_VAR 0 1
64222: PUSH
64223: LD_VAR 0 2
64227: PUSH
64228: FOR_IN
64229: IFFALSE 64245
// SetLives ( i , 600 ) ;
64231: LD_VAR 0 1
64235: PPUSH
64236: LD_INT 600
64238: PPUSH
64239: CALL_OW 234
64243: GO 64228
64245: POP
64246: POP
// end ;
64247: PPOPN 2
64249: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64250: LD_INT 0
64252: PPUSH
// case cmd of 301 :
64253: LD_VAR 0 1
64257: PUSH
64258: LD_INT 301
64260: DOUBLE
64261: EQUAL
64262: IFTRUE 64266
64264: GO 64298
64266: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64267: LD_VAR 0 6
64271: PPUSH
64272: LD_VAR 0 7
64276: PPUSH
64277: LD_VAR 0 8
64281: PPUSH
64282: LD_VAR 0 4
64286: PPUSH
64287: LD_VAR 0 5
64291: PPUSH
64292: CALL 65507 0 5
64296: GO 64419
64298: LD_INT 302
64300: DOUBLE
64301: EQUAL
64302: IFTRUE 64306
64304: GO 64343
64306: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64307: LD_VAR 0 6
64311: PPUSH
64312: LD_VAR 0 7
64316: PPUSH
64317: LD_VAR 0 8
64321: PPUSH
64322: LD_VAR 0 9
64326: PPUSH
64327: LD_VAR 0 4
64331: PPUSH
64332: LD_VAR 0 5
64336: PPUSH
64337: CALL 65598 0 6
64341: GO 64419
64343: LD_INT 303
64345: DOUBLE
64346: EQUAL
64347: IFTRUE 64351
64349: GO 64388
64351: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64352: LD_VAR 0 6
64356: PPUSH
64357: LD_VAR 0 7
64361: PPUSH
64362: LD_VAR 0 8
64366: PPUSH
64367: LD_VAR 0 9
64371: PPUSH
64372: LD_VAR 0 4
64376: PPUSH
64377: LD_VAR 0 5
64381: PPUSH
64382: CALL 64424 0 6
64386: GO 64419
64388: LD_INT 304
64390: DOUBLE
64391: EQUAL
64392: IFTRUE 64396
64394: GO 64418
64396: POP
// hHackTeleport ( unit , x , y ) ; end ;
64397: LD_VAR 0 2
64401: PPUSH
64402: LD_VAR 0 4
64406: PPUSH
64407: LD_VAR 0 5
64411: PPUSH
64412: CALL 66191 0 3
64416: GO 64419
64418: POP
// end ;
64419: LD_VAR 0 12
64423: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64424: LD_INT 0
64426: PPUSH
64427: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64428: LD_VAR 0 1
64432: PUSH
64433: LD_INT 1
64435: LESS
64436: PUSH
64437: LD_VAR 0 1
64441: PUSH
64442: LD_INT 3
64444: GREATER
64445: OR
64446: PUSH
64447: LD_VAR 0 5
64451: PPUSH
64452: LD_VAR 0 6
64456: PPUSH
64457: CALL_OW 428
64461: OR
64462: IFFALSE 64466
// exit ;
64464: GO 65194
// uc_side := your_side ;
64466: LD_ADDR_OWVAR 20
64470: PUSH
64471: LD_OWVAR 2
64475: ST_TO_ADDR
// uc_nation := nation ;
64476: LD_ADDR_OWVAR 21
64480: PUSH
64481: LD_VAR 0 1
64485: ST_TO_ADDR
// bc_level = 1 ;
64486: LD_ADDR_OWVAR 43
64490: PUSH
64491: LD_INT 1
64493: ST_TO_ADDR
// case btype of 1 :
64494: LD_VAR 0 2
64498: PUSH
64499: LD_INT 1
64501: DOUBLE
64502: EQUAL
64503: IFTRUE 64507
64505: GO 64518
64507: POP
// bc_type := b_depot ; 2 :
64508: LD_ADDR_OWVAR 42
64512: PUSH
64513: LD_INT 0
64515: ST_TO_ADDR
64516: GO 65138
64518: LD_INT 2
64520: DOUBLE
64521: EQUAL
64522: IFTRUE 64526
64524: GO 64537
64526: POP
// bc_type := b_warehouse ; 3 :
64527: LD_ADDR_OWVAR 42
64531: PUSH
64532: LD_INT 1
64534: ST_TO_ADDR
64535: GO 65138
64537: LD_INT 3
64539: DOUBLE
64540: EQUAL
64541: IFTRUE 64545
64543: GO 64556
64545: POP
// bc_type := b_lab ; 4 .. 9 :
64546: LD_ADDR_OWVAR 42
64550: PUSH
64551: LD_INT 6
64553: ST_TO_ADDR
64554: GO 65138
64556: LD_INT 4
64558: DOUBLE
64559: GREATEREQUAL
64560: IFFALSE 64568
64562: LD_INT 9
64564: DOUBLE
64565: LESSEQUAL
64566: IFTRUE 64570
64568: GO 64630
64570: POP
// begin bc_type := b_lab_half ;
64571: LD_ADDR_OWVAR 42
64575: PUSH
64576: LD_INT 7
64578: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64579: LD_ADDR_OWVAR 44
64583: PUSH
64584: LD_INT 10
64586: PUSH
64587: LD_INT 11
64589: PUSH
64590: LD_INT 12
64592: PUSH
64593: LD_INT 15
64595: PUSH
64596: LD_INT 14
64598: PUSH
64599: LD_INT 13
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: PUSH
64610: LD_VAR 0 2
64614: PUSH
64615: LD_INT 3
64617: MINUS
64618: ARRAY
64619: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
64620: LD_ADDR_OWVAR 45
64624: PUSH
64625: LD_INT 9
64627: ST_TO_ADDR
// end ; 10 .. 13 :
64628: GO 65138
64630: LD_INT 10
64632: DOUBLE
64633: GREATEREQUAL
64634: IFFALSE 64642
64636: LD_INT 13
64638: DOUBLE
64639: LESSEQUAL
64640: IFTRUE 64644
64642: GO 64721
64644: POP
// begin bc_type := b_lab_full ;
64645: LD_ADDR_OWVAR 42
64649: PUSH
64650: LD_INT 8
64652: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64653: LD_ADDR_OWVAR 44
64657: PUSH
64658: LD_INT 10
64660: PUSH
64661: LD_INT 12
64663: PUSH
64664: LD_INT 14
64666: PUSH
64667: LD_INT 13
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: PUSH
64676: LD_VAR 0 2
64680: PUSH
64681: LD_INT 9
64683: MINUS
64684: ARRAY
64685: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64686: LD_ADDR_OWVAR 45
64690: PUSH
64691: LD_INT 11
64693: PUSH
64694: LD_INT 15
64696: PUSH
64697: LD_INT 12
64699: PUSH
64700: LD_INT 15
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: PUSH
64709: LD_VAR 0 2
64713: PUSH
64714: LD_INT 9
64716: MINUS
64717: ARRAY
64718: ST_TO_ADDR
// end ; 14 :
64719: GO 65138
64721: LD_INT 14
64723: DOUBLE
64724: EQUAL
64725: IFTRUE 64729
64727: GO 64740
64729: POP
// bc_type := b_workshop ; 15 :
64730: LD_ADDR_OWVAR 42
64734: PUSH
64735: LD_INT 2
64737: ST_TO_ADDR
64738: GO 65138
64740: LD_INT 15
64742: DOUBLE
64743: EQUAL
64744: IFTRUE 64748
64746: GO 64759
64748: POP
// bc_type := b_factory ; 16 :
64749: LD_ADDR_OWVAR 42
64753: PUSH
64754: LD_INT 3
64756: ST_TO_ADDR
64757: GO 65138
64759: LD_INT 16
64761: DOUBLE
64762: EQUAL
64763: IFTRUE 64767
64765: GO 64778
64767: POP
// bc_type := b_ext_gun ; 17 :
64768: LD_ADDR_OWVAR 42
64772: PUSH
64773: LD_INT 17
64775: ST_TO_ADDR
64776: GO 65138
64778: LD_INT 17
64780: DOUBLE
64781: EQUAL
64782: IFTRUE 64786
64784: GO 64814
64786: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64787: LD_ADDR_OWVAR 42
64791: PUSH
64792: LD_INT 19
64794: PUSH
64795: LD_INT 23
64797: PUSH
64798: LD_INT 19
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: PUSH
64806: LD_VAR 0 1
64810: ARRAY
64811: ST_TO_ADDR
64812: GO 65138
64814: LD_INT 18
64816: DOUBLE
64817: EQUAL
64818: IFTRUE 64822
64820: GO 64833
64822: POP
// bc_type := b_ext_radar ; 19 :
64823: LD_ADDR_OWVAR 42
64827: PUSH
64828: LD_INT 20
64830: ST_TO_ADDR
64831: GO 65138
64833: LD_INT 19
64835: DOUBLE
64836: EQUAL
64837: IFTRUE 64841
64839: GO 64852
64841: POP
// bc_type := b_ext_radio ; 20 :
64842: LD_ADDR_OWVAR 42
64846: PUSH
64847: LD_INT 22
64849: ST_TO_ADDR
64850: GO 65138
64852: LD_INT 20
64854: DOUBLE
64855: EQUAL
64856: IFTRUE 64860
64858: GO 64871
64860: POP
// bc_type := b_ext_siberium ; 21 :
64861: LD_ADDR_OWVAR 42
64865: PUSH
64866: LD_INT 21
64868: ST_TO_ADDR
64869: GO 65138
64871: LD_INT 21
64873: DOUBLE
64874: EQUAL
64875: IFTRUE 64879
64877: GO 64890
64879: POP
// bc_type := b_ext_computer ; 22 :
64880: LD_ADDR_OWVAR 42
64884: PUSH
64885: LD_INT 24
64887: ST_TO_ADDR
64888: GO 65138
64890: LD_INT 22
64892: DOUBLE
64893: EQUAL
64894: IFTRUE 64898
64896: GO 64909
64898: POP
// bc_type := b_ext_track ; 23 :
64899: LD_ADDR_OWVAR 42
64903: PUSH
64904: LD_INT 16
64906: ST_TO_ADDR
64907: GO 65138
64909: LD_INT 23
64911: DOUBLE
64912: EQUAL
64913: IFTRUE 64917
64915: GO 64928
64917: POP
// bc_type := b_ext_laser ; 24 :
64918: LD_ADDR_OWVAR 42
64922: PUSH
64923: LD_INT 25
64925: ST_TO_ADDR
64926: GO 65138
64928: LD_INT 24
64930: DOUBLE
64931: EQUAL
64932: IFTRUE 64936
64934: GO 64947
64936: POP
// bc_type := b_control_tower ; 25 :
64937: LD_ADDR_OWVAR 42
64941: PUSH
64942: LD_INT 36
64944: ST_TO_ADDR
64945: GO 65138
64947: LD_INT 25
64949: DOUBLE
64950: EQUAL
64951: IFTRUE 64955
64953: GO 64966
64955: POP
// bc_type := b_breastwork ; 26 :
64956: LD_ADDR_OWVAR 42
64960: PUSH
64961: LD_INT 31
64963: ST_TO_ADDR
64964: GO 65138
64966: LD_INT 26
64968: DOUBLE
64969: EQUAL
64970: IFTRUE 64974
64972: GO 64985
64974: POP
// bc_type := b_bunker ; 27 :
64975: LD_ADDR_OWVAR 42
64979: PUSH
64980: LD_INT 32
64982: ST_TO_ADDR
64983: GO 65138
64985: LD_INT 27
64987: DOUBLE
64988: EQUAL
64989: IFTRUE 64993
64991: GO 65004
64993: POP
// bc_type := b_turret ; 28 :
64994: LD_ADDR_OWVAR 42
64998: PUSH
64999: LD_INT 33
65001: ST_TO_ADDR
65002: GO 65138
65004: LD_INT 28
65006: DOUBLE
65007: EQUAL
65008: IFTRUE 65012
65010: GO 65023
65012: POP
// bc_type := b_armoury ; 29 :
65013: LD_ADDR_OWVAR 42
65017: PUSH
65018: LD_INT 4
65020: ST_TO_ADDR
65021: GO 65138
65023: LD_INT 29
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65031
65029: GO 65042
65031: POP
// bc_type := b_barracks ; 30 :
65032: LD_ADDR_OWVAR 42
65036: PUSH
65037: LD_INT 5
65039: ST_TO_ADDR
65040: GO 65138
65042: LD_INT 30
65044: DOUBLE
65045: EQUAL
65046: IFTRUE 65050
65048: GO 65061
65050: POP
// bc_type := b_solar_power ; 31 :
65051: LD_ADDR_OWVAR 42
65055: PUSH
65056: LD_INT 27
65058: ST_TO_ADDR
65059: GO 65138
65061: LD_INT 31
65063: DOUBLE
65064: EQUAL
65065: IFTRUE 65069
65067: GO 65080
65069: POP
// bc_type := b_oil_power ; 32 :
65070: LD_ADDR_OWVAR 42
65074: PUSH
65075: LD_INT 26
65077: ST_TO_ADDR
65078: GO 65138
65080: LD_INT 32
65082: DOUBLE
65083: EQUAL
65084: IFTRUE 65088
65086: GO 65099
65088: POP
// bc_type := b_siberite_power ; 33 :
65089: LD_ADDR_OWVAR 42
65093: PUSH
65094: LD_INT 28
65096: ST_TO_ADDR
65097: GO 65138
65099: LD_INT 33
65101: DOUBLE
65102: EQUAL
65103: IFTRUE 65107
65105: GO 65118
65107: POP
// bc_type := b_oil_mine ; 34 :
65108: LD_ADDR_OWVAR 42
65112: PUSH
65113: LD_INT 29
65115: ST_TO_ADDR
65116: GO 65138
65118: LD_INT 34
65120: DOUBLE
65121: EQUAL
65122: IFTRUE 65126
65124: GO 65137
65126: POP
// bc_type := b_siberite_mine ; end ;
65127: LD_ADDR_OWVAR 42
65131: PUSH
65132: LD_INT 30
65134: ST_TO_ADDR
65135: GO 65138
65137: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
65138: LD_ADDR_VAR 0 8
65142: PUSH
65143: LD_VAR 0 5
65147: PPUSH
65148: LD_VAR 0 6
65152: PPUSH
65153: LD_VAR 0 3
65157: PPUSH
65158: CALL_OW 47
65162: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
65163: LD_OWVAR 42
65167: PUSH
65168: LD_INT 32
65170: PUSH
65171: LD_INT 33
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: IN
65178: IFFALSE 65194
// PlaceWeaponTurret ( b , weapon ) ;
65180: LD_VAR 0 8
65184: PPUSH
65185: LD_VAR 0 4
65189: PPUSH
65190: CALL_OW 431
// end ;
65194: LD_VAR 0 7
65198: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65199: LD_INT 0
65201: PPUSH
65202: PPUSH
65203: PPUSH
65204: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65205: LD_ADDR_VAR 0 4
65209: PUSH
65210: LD_INT 22
65212: PUSH
65213: LD_OWVAR 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 30
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 30
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PPUSH
65254: CALL_OW 69
65258: ST_TO_ADDR
// if not tmp then
65259: LD_VAR 0 4
65263: NOT
65264: IFFALSE 65268
// exit ;
65266: GO 65327
// for i in tmp do
65268: LD_ADDR_VAR 0 2
65272: PUSH
65273: LD_VAR 0 4
65277: PUSH
65278: FOR_IN
65279: IFFALSE 65325
// for j = 1 to 3 do
65281: LD_ADDR_VAR 0 3
65285: PUSH
65286: DOUBLE
65287: LD_INT 1
65289: DEC
65290: ST_TO_ADDR
65291: LD_INT 3
65293: PUSH
65294: FOR_TO
65295: IFFALSE 65321
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65297: LD_VAR 0 2
65301: PPUSH
65302: CALL_OW 274
65306: PPUSH
65307: LD_VAR 0 3
65311: PPUSH
65312: LD_INT 99999
65314: PPUSH
65315: CALL_OW 277
65319: GO 65294
65321: POP
65322: POP
65323: GO 65278
65325: POP
65326: POP
// end ;
65327: LD_VAR 0 1
65331: RET
// export function hHackSetLevel10 ; var i , j ; begin
65332: LD_INT 0
65334: PPUSH
65335: PPUSH
65336: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65337: LD_ADDR_VAR 0 2
65341: PUSH
65342: LD_INT 21
65344: PUSH
65345: LD_INT 1
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PPUSH
65352: CALL_OW 69
65356: PUSH
65357: FOR_IN
65358: IFFALSE 65410
// if IsSelected ( i ) then
65360: LD_VAR 0 2
65364: PPUSH
65365: CALL_OW 306
65369: IFFALSE 65408
// begin for j := 1 to 4 do
65371: LD_ADDR_VAR 0 3
65375: PUSH
65376: DOUBLE
65377: LD_INT 1
65379: DEC
65380: ST_TO_ADDR
65381: LD_INT 4
65383: PUSH
65384: FOR_TO
65385: IFFALSE 65406
// SetSkill ( i , j , 10 ) ;
65387: LD_VAR 0 2
65391: PPUSH
65392: LD_VAR 0 3
65396: PPUSH
65397: LD_INT 10
65399: PPUSH
65400: CALL_OW 237
65404: GO 65384
65406: POP
65407: POP
// end ;
65408: GO 65357
65410: POP
65411: POP
// end ;
65412: LD_VAR 0 1
65416: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65417: LD_INT 0
65419: PPUSH
65420: PPUSH
65421: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65422: LD_ADDR_VAR 0 2
65426: PUSH
65427: LD_INT 22
65429: PUSH
65430: LD_OWVAR 2
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 21
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PPUSH
65453: CALL_OW 69
65457: PUSH
65458: FOR_IN
65459: IFFALSE 65500
// begin for j := 1 to 4 do
65461: LD_ADDR_VAR 0 3
65465: PUSH
65466: DOUBLE
65467: LD_INT 1
65469: DEC
65470: ST_TO_ADDR
65471: LD_INT 4
65473: PUSH
65474: FOR_TO
65475: IFFALSE 65496
// SetSkill ( i , j , 10 ) ;
65477: LD_VAR 0 2
65481: PPUSH
65482: LD_VAR 0 3
65486: PPUSH
65487: LD_INT 10
65489: PPUSH
65490: CALL_OW 237
65494: GO 65474
65496: POP
65497: POP
// end ;
65498: GO 65458
65500: POP
65501: POP
// end ;
65502: LD_VAR 0 1
65506: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65507: LD_INT 0
65509: PPUSH
// uc_side := your_side ;
65510: LD_ADDR_OWVAR 20
65514: PUSH
65515: LD_OWVAR 2
65519: ST_TO_ADDR
// uc_nation := nation ;
65520: LD_ADDR_OWVAR 21
65524: PUSH
65525: LD_VAR 0 1
65529: ST_TO_ADDR
// InitHc ;
65530: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65534: LD_INT 0
65536: PPUSH
65537: LD_VAR 0 2
65541: PPUSH
65542: LD_VAR 0 3
65546: PPUSH
65547: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65551: LD_VAR 0 4
65555: PPUSH
65556: LD_VAR 0 5
65560: PPUSH
65561: CALL_OW 428
65565: PUSH
65566: LD_INT 0
65568: EQUAL
65569: IFFALSE 65593
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65571: CALL_OW 44
65575: PPUSH
65576: LD_VAR 0 4
65580: PPUSH
65581: LD_VAR 0 5
65585: PPUSH
65586: LD_INT 1
65588: PPUSH
65589: CALL_OW 48
// end ;
65593: LD_VAR 0 6
65597: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65598: LD_INT 0
65600: PPUSH
65601: PPUSH
// uc_side := your_side ;
65602: LD_ADDR_OWVAR 20
65606: PUSH
65607: LD_OWVAR 2
65611: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65612: LD_VAR 0 1
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 3
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: LD_INT 5
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: IN
65639: IFFALSE 65651
// uc_nation := nation_american else
65641: LD_ADDR_OWVAR 21
65645: PUSH
65646: LD_INT 1
65648: ST_TO_ADDR
65649: GO 65694
// if chassis in [ 11 , 12 , 13 , 14 ] then
65651: LD_VAR 0 1
65655: PUSH
65656: LD_INT 11
65658: PUSH
65659: LD_INT 12
65661: PUSH
65662: LD_INT 13
65664: PUSH
65665: LD_INT 14
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: IN
65674: IFFALSE 65686
// uc_nation := nation_arabian else
65676: LD_ADDR_OWVAR 21
65680: PUSH
65681: LD_INT 2
65683: ST_TO_ADDR
65684: GO 65694
// uc_nation := nation_russian ;
65686: LD_ADDR_OWVAR 21
65690: PUSH
65691: LD_INT 3
65693: ST_TO_ADDR
// vc_chassis := chassis ;
65694: LD_ADDR_OWVAR 37
65698: PUSH
65699: LD_VAR 0 1
65703: ST_TO_ADDR
// vc_engine := engine ;
65704: LD_ADDR_OWVAR 39
65708: PUSH
65709: LD_VAR 0 2
65713: ST_TO_ADDR
// vc_control := control ;
65714: LD_ADDR_OWVAR 38
65718: PUSH
65719: LD_VAR 0 3
65723: ST_TO_ADDR
// vc_weapon := weapon ;
65724: LD_ADDR_OWVAR 40
65728: PUSH
65729: LD_VAR 0 4
65733: ST_TO_ADDR
// un := CreateVehicle ;
65734: LD_ADDR_VAR 0 8
65738: PUSH
65739: CALL_OW 45
65743: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65744: LD_VAR 0 8
65748: PPUSH
65749: LD_INT 0
65751: PPUSH
65752: LD_INT 5
65754: PPUSH
65755: CALL_OW 12
65759: PPUSH
65760: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65764: LD_VAR 0 8
65768: PPUSH
65769: LD_VAR 0 5
65773: PPUSH
65774: LD_VAR 0 6
65778: PPUSH
65779: LD_INT 1
65781: PPUSH
65782: CALL_OW 48
// end ;
65786: LD_VAR 0 7
65790: RET
// export hInvincible ; every 1 do
65791: GO 65793
65793: DISABLE
// hInvincible := [ ] ;
65794: LD_ADDR_EXP 101
65798: PUSH
65799: EMPTY
65800: ST_TO_ADDR
65801: END
// every 10 do var i ;
65802: GO 65804
65804: DISABLE
65805: LD_INT 0
65807: PPUSH
// begin enable ;
65808: ENABLE
// if not hInvincible then
65809: LD_EXP 101
65813: NOT
65814: IFFALSE 65818
// exit ;
65816: GO 65862
// for i in hInvincible do
65818: LD_ADDR_VAR 0 1
65822: PUSH
65823: LD_EXP 101
65827: PUSH
65828: FOR_IN
65829: IFFALSE 65860
// if GetLives ( i ) < 1000 then
65831: LD_VAR 0 1
65835: PPUSH
65836: CALL_OW 256
65840: PUSH
65841: LD_INT 1000
65843: LESS
65844: IFFALSE 65858
// SetLives ( i , 1000 ) ;
65846: LD_VAR 0 1
65850: PPUSH
65851: LD_INT 1000
65853: PPUSH
65854: CALL_OW 234
65858: GO 65828
65860: POP
65861: POP
// end ;
65862: PPOPN 1
65864: END
// export function hHackInvincible ; var i ; begin
65865: LD_INT 0
65867: PPUSH
65868: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65869: LD_ADDR_VAR 0 2
65873: PUSH
65874: LD_INT 2
65876: PUSH
65877: LD_INT 21
65879: PUSH
65880: LD_INT 1
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 21
65889: PUSH
65890: LD_INT 2
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: PPUSH
65902: CALL_OW 69
65906: PUSH
65907: FOR_IN
65908: IFFALSE 65969
// if IsSelected ( i ) then
65910: LD_VAR 0 2
65914: PPUSH
65915: CALL_OW 306
65919: IFFALSE 65967
// begin if i in hInvincible then
65921: LD_VAR 0 2
65925: PUSH
65926: LD_EXP 101
65930: IN
65931: IFFALSE 65951
// hInvincible := hInvincible diff i else
65933: LD_ADDR_EXP 101
65937: PUSH
65938: LD_EXP 101
65942: PUSH
65943: LD_VAR 0 2
65947: DIFF
65948: ST_TO_ADDR
65949: GO 65967
// hInvincible := hInvincible union i ;
65951: LD_ADDR_EXP 101
65955: PUSH
65956: LD_EXP 101
65960: PUSH
65961: LD_VAR 0 2
65965: UNION
65966: ST_TO_ADDR
// end ;
65967: GO 65907
65969: POP
65970: POP
// end ;
65971: LD_VAR 0 1
65975: RET
// export function hHackInvisible ; var i , j ; begin
65976: LD_INT 0
65978: PPUSH
65979: PPUSH
65980: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65981: LD_ADDR_VAR 0 2
65985: PUSH
65986: LD_INT 21
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PPUSH
65996: CALL_OW 69
66000: PUSH
66001: FOR_IN
66002: IFFALSE 66026
// if IsSelected ( i ) then
66004: LD_VAR 0 2
66008: PPUSH
66009: CALL_OW 306
66013: IFFALSE 66024
// ComForceInvisible ( i ) ;
66015: LD_VAR 0 2
66019: PPUSH
66020: CALL_OW 496
66024: GO 66001
66026: POP
66027: POP
// end ;
66028: LD_VAR 0 1
66032: RET
// export function hHackChangeYourSide ; begin
66033: LD_INT 0
66035: PPUSH
// if your_side = 8 then
66036: LD_OWVAR 2
66040: PUSH
66041: LD_INT 8
66043: EQUAL
66044: IFFALSE 66056
// your_side := 0 else
66046: LD_ADDR_OWVAR 2
66050: PUSH
66051: LD_INT 0
66053: ST_TO_ADDR
66054: GO 66070
// your_side := your_side + 1 ;
66056: LD_ADDR_OWVAR 2
66060: PUSH
66061: LD_OWVAR 2
66065: PUSH
66066: LD_INT 1
66068: PLUS
66069: ST_TO_ADDR
// end ;
66070: LD_VAR 0 1
66074: RET
// export function hHackChangeUnitSide ; var i , j ; begin
66075: LD_INT 0
66077: PPUSH
66078: PPUSH
66079: PPUSH
// for i in all_units do
66080: LD_ADDR_VAR 0 2
66084: PUSH
66085: LD_OWVAR 3
66089: PUSH
66090: FOR_IN
66091: IFFALSE 66169
// if IsSelected ( i ) then
66093: LD_VAR 0 2
66097: PPUSH
66098: CALL_OW 306
66102: IFFALSE 66167
// begin j := GetSide ( i ) ;
66104: LD_ADDR_VAR 0 3
66108: PUSH
66109: LD_VAR 0 2
66113: PPUSH
66114: CALL_OW 255
66118: ST_TO_ADDR
// if j = 8 then
66119: LD_VAR 0 3
66123: PUSH
66124: LD_INT 8
66126: EQUAL
66127: IFFALSE 66139
// j := 0 else
66129: LD_ADDR_VAR 0 3
66133: PUSH
66134: LD_INT 0
66136: ST_TO_ADDR
66137: GO 66153
// j := j + 1 ;
66139: LD_ADDR_VAR 0 3
66143: PUSH
66144: LD_VAR 0 3
66148: PUSH
66149: LD_INT 1
66151: PLUS
66152: ST_TO_ADDR
// SetSide ( i , j ) ;
66153: LD_VAR 0 2
66157: PPUSH
66158: LD_VAR 0 3
66162: PPUSH
66163: CALL_OW 235
// end ;
66167: GO 66090
66169: POP
66170: POP
// end ;
66171: LD_VAR 0 1
66175: RET
// export function hHackFog ; begin
66176: LD_INT 0
66178: PPUSH
// FogOff ( true ) ;
66179: LD_INT 1
66181: PPUSH
66182: CALL_OW 344
// end ;
66186: LD_VAR 0 1
66190: RET
// export function hHackTeleport ( unit , x , y ) ; begin
66191: LD_INT 0
66193: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
66194: LD_VAR 0 1
66198: PPUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: LD_VAR 0 3
66208: PPUSH
66209: LD_INT 1
66211: PPUSH
66212: LD_INT 1
66214: PPUSH
66215: CALL_OW 483
// CenterOnXY ( x , y ) ;
66219: LD_VAR 0 2
66223: PPUSH
66224: LD_VAR 0 3
66228: PPUSH
66229: CALL_OW 84
// end ;
66233: LD_VAR 0 4
66237: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66238: LD_INT 0
66240: PPUSH
66241: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66242: LD_VAR 0 1
66246: NOT
66247: PUSH
66248: LD_VAR 0 2
66252: PPUSH
66253: LD_VAR 0 3
66257: PPUSH
66258: CALL_OW 488
66262: NOT
66263: OR
66264: PUSH
66265: LD_VAR 0 1
66269: PPUSH
66270: CALL_OW 266
66274: PUSH
66275: LD_INT 3
66277: NONEQUAL
66278: PUSH
66279: LD_VAR 0 1
66283: PPUSH
66284: CALL_OW 247
66288: PUSH
66289: LD_INT 1
66291: EQUAL
66292: NOT
66293: AND
66294: OR
66295: IFFALSE 66299
// exit ;
66297: GO 66448
// if GetType ( factory ) = unit_human then
66299: LD_VAR 0 1
66303: PPUSH
66304: CALL_OW 247
66308: PUSH
66309: LD_INT 1
66311: EQUAL
66312: IFFALSE 66329
// factory := IsInUnit ( factory ) ;
66314: LD_ADDR_VAR 0 1
66318: PUSH
66319: LD_VAR 0 1
66323: PPUSH
66324: CALL_OW 310
66328: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66329: LD_VAR 0 1
66333: PPUSH
66334: CALL_OW 266
66338: PUSH
66339: LD_INT 3
66341: NONEQUAL
66342: IFFALSE 66346
// exit ;
66344: GO 66448
// if HexInfo ( x , y ) = factory then
66346: LD_VAR 0 2
66350: PPUSH
66351: LD_VAR 0 3
66355: PPUSH
66356: CALL_OW 428
66360: PUSH
66361: LD_VAR 0 1
66365: EQUAL
66366: IFFALSE 66393
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66368: LD_ADDR_EXP 102
66372: PUSH
66373: LD_EXP 102
66377: PPUSH
66378: LD_VAR 0 1
66382: PPUSH
66383: LD_INT 0
66385: PPUSH
66386: CALL_OW 1
66390: ST_TO_ADDR
66391: GO 66444
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66393: LD_ADDR_EXP 102
66397: PUSH
66398: LD_EXP 102
66402: PPUSH
66403: LD_VAR 0 1
66407: PPUSH
66408: LD_VAR 0 1
66412: PPUSH
66413: CALL_OW 255
66417: PUSH
66418: LD_VAR 0 1
66422: PUSH
66423: LD_VAR 0 2
66427: PUSH
66428: LD_VAR 0 3
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: PPUSH
66439: CALL_OW 1
66443: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66444: CALL 66453 0 0
// end ;
66448: LD_VAR 0 4
66452: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66453: LD_INT 0
66455: PPUSH
66456: PPUSH
66457: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66458: LD_STRING resetFactoryWaypoint();
66460: PPUSH
66461: CALL_OW 559
// if factoryWaypoints then
66465: LD_EXP 102
66469: IFFALSE 66595
// begin list := PrepareArray ( factoryWaypoints ) ;
66471: LD_ADDR_VAR 0 3
66475: PUSH
66476: LD_EXP 102
66480: PPUSH
66481: CALL 50349 0 1
66485: ST_TO_ADDR
// for i := 1 to list do
66486: LD_ADDR_VAR 0 2
66490: PUSH
66491: DOUBLE
66492: LD_INT 1
66494: DEC
66495: ST_TO_ADDR
66496: LD_VAR 0 3
66500: PUSH
66501: FOR_TO
66502: IFFALSE 66593
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66504: LD_STRING setFactoryWaypointXY(
66506: PUSH
66507: LD_VAR 0 3
66511: PUSH
66512: LD_VAR 0 2
66516: ARRAY
66517: PUSH
66518: LD_INT 1
66520: ARRAY
66521: STR
66522: PUSH
66523: LD_STRING ,
66525: STR
66526: PUSH
66527: LD_VAR 0 3
66531: PUSH
66532: LD_VAR 0 2
66536: ARRAY
66537: PUSH
66538: LD_INT 2
66540: ARRAY
66541: STR
66542: PUSH
66543: LD_STRING ,
66545: STR
66546: PUSH
66547: LD_VAR 0 3
66551: PUSH
66552: LD_VAR 0 2
66556: ARRAY
66557: PUSH
66558: LD_INT 3
66560: ARRAY
66561: STR
66562: PUSH
66563: LD_STRING ,
66565: STR
66566: PUSH
66567: LD_VAR 0 3
66571: PUSH
66572: LD_VAR 0 2
66576: ARRAY
66577: PUSH
66578: LD_INT 4
66580: ARRAY
66581: STR
66582: PUSH
66583: LD_STRING )
66585: STR
66586: PPUSH
66587: CALL_OW 559
66591: GO 66501
66593: POP
66594: POP
// end ; end ;
66595: LD_VAR 0 1
66599: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66600: LD_INT 0
66602: PPUSH
// if HexInfo ( x , y ) = warehouse then
66603: LD_VAR 0 2
66607: PPUSH
66608: LD_VAR 0 3
66612: PPUSH
66613: CALL_OW 428
66617: PUSH
66618: LD_VAR 0 1
66622: EQUAL
66623: IFFALSE 66650
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66625: LD_ADDR_EXP 103
66629: PUSH
66630: LD_EXP 103
66634: PPUSH
66635: LD_VAR 0 1
66639: PPUSH
66640: LD_INT 0
66642: PPUSH
66643: CALL_OW 1
66647: ST_TO_ADDR
66648: GO 66701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66650: LD_ADDR_EXP 103
66654: PUSH
66655: LD_EXP 103
66659: PPUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: LD_VAR 0 1
66669: PPUSH
66670: CALL_OW 255
66674: PUSH
66675: LD_VAR 0 1
66679: PUSH
66680: LD_VAR 0 2
66684: PUSH
66685: LD_VAR 0 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: PPUSH
66696: CALL_OW 1
66700: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66701: CALL 66710 0 0
// end ;
66705: LD_VAR 0 4
66709: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66710: LD_INT 0
66712: PPUSH
66713: PPUSH
66714: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66715: LD_STRING resetWarehouseGatheringPoints();
66717: PPUSH
66718: CALL_OW 559
// if warehouseGatheringPoints then
66722: LD_EXP 103
66726: IFFALSE 66852
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66728: LD_ADDR_VAR 0 3
66732: PUSH
66733: LD_EXP 103
66737: PPUSH
66738: CALL 50349 0 1
66742: ST_TO_ADDR
// for i := 1 to list do
66743: LD_ADDR_VAR 0 2
66747: PUSH
66748: DOUBLE
66749: LD_INT 1
66751: DEC
66752: ST_TO_ADDR
66753: LD_VAR 0 3
66757: PUSH
66758: FOR_TO
66759: IFFALSE 66850
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66761: LD_STRING setWarehouseGatheringPointXY(
66763: PUSH
66764: LD_VAR 0 3
66768: PUSH
66769: LD_VAR 0 2
66773: ARRAY
66774: PUSH
66775: LD_INT 1
66777: ARRAY
66778: STR
66779: PUSH
66780: LD_STRING ,
66782: STR
66783: PUSH
66784: LD_VAR 0 3
66788: PUSH
66789: LD_VAR 0 2
66793: ARRAY
66794: PUSH
66795: LD_INT 2
66797: ARRAY
66798: STR
66799: PUSH
66800: LD_STRING ,
66802: STR
66803: PUSH
66804: LD_VAR 0 3
66808: PUSH
66809: LD_VAR 0 2
66813: ARRAY
66814: PUSH
66815: LD_INT 3
66817: ARRAY
66818: STR
66819: PUSH
66820: LD_STRING ,
66822: STR
66823: PUSH
66824: LD_VAR 0 3
66828: PUSH
66829: LD_VAR 0 2
66833: ARRAY
66834: PUSH
66835: LD_INT 4
66837: ARRAY
66838: STR
66839: PUSH
66840: LD_STRING )
66842: STR
66843: PPUSH
66844: CALL_OW 559
66848: GO 66758
66850: POP
66851: POP
// end ; end ;
66852: LD_VAR 0 1
66856: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66857: LD_EXP 103
66861: IFFALSE 67546
66863: GO 66865
66865: DISABLE
66866: LD_INT 0
66868: PPUSH
66869: PPUSH
66870: PPUSH
66871: PPUSH
66872: PPUSH
66873: PPUSH
66874: PPUSH
66875: PPUSH
66876: PPUSH
// begin enable ;
66877: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66878: LD_ADDR_VAR 0 3
66882: PUSH
66883: LD_EXP 103
66887: PPUSH
66888: CALL 50349 0 1
66892: ST_TO_ADDR
// if not list then
66893: LD_VAR 0 3
66897: NOT
66898: IFFALSE 66902
// exit ;
66900: GO 67546
// for i := 1 to list do
66902: LD_ADDR_VAR 0 1
66906: PUSH
66907: DOUBLE
66908: LD_INT 1
66910: DEC
66911: ST_TO_ADDR
66912: LD_VAR 0 3
66916: PUSH
66917: FOR_TO
66918: IFFALSE 67544
// begin depot := list [ i ] [ 2 ] ;
66920: LD_ADDR_VAR 0 8
66924: PUSH
66925: LD_VAR 0 3
66929: PUSH
66930: LD_VAR 0 1
66934: ARRAY
66935: PUSH
66936: LD_INT 2
66938: ARRAY
66939: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66940: LD_ADDR_VAR 0 5
66944: PUSH
66945: LD_VAR 0 3
66949: PUSH
66950: LD_VAR 0 1
66954: ARRAY
66955: PUSH
66956: LD_INT 1
66958: ARRAY
66959: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66960: LD_VAR 0 8
66964: PPUSH
66965: CALL_OW 301
66969: PUSH
66970: LD_VAR 0 5
66974: PUSH
66975: LD_VAR 0 8
66979: PPUSH
66980: CALL_OW 255
66984: NONEQUAL
66985: OR
66986: IFFALSE 67015
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66988: LD_ADDR_EXP 103
66992: PUSH
66993: LD_EXP 103
66997: PPUSH
66998: LD_VAR 0 8
67002: PPUSH
67003: LD_INT 0
67005: PPUSH
67006: CALL_OW 1
67010: ST_TO_ADDR
// exit ;
67011: POP
67012: POP
67013: GO 67546
// end ; x := list [ i ] [ 3 ] ;
67015: LD_ADDR_VAR 0 6
67019: PUSH
67020: LD_VAR 0 3
67024: PUSH
67025: LD_VAR 0 1
67029: ARRAY
67030: PUSH
67031: LD_INT 3
67033: ARRAY
67034: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
67035: LD_ADDR_VAR 0 7
67039: PUSH
67040: LD_VAR 0 3
67044: PUSH
67045: LD_VAR 0 1
67049: ARRAY
67050: PUSH
67051: LD_INT 4
67053: ARRAY
67054: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
67055: LD_ADDR_VAR 0 9
67059: PUSH
67060: LD_VAR 0 6
67064: PPUSH
67065: LD_VAR 0 7
67069: PPUSH
67070: LD_INT 16
67072: PPUSH
67073: CALL 48933 0 3
67077: ST_TO_ADDR
// if not cratesNearbyPoint then
67078: LD_VAR 0 9
67082: NOT
67083: IFFALSE 67089
// exit ;
67085: POP
67086: POP
67087: GO 67546
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
67089: LD_ADDR_VAR 0 4
67093: PUSH
67094: LD_INT 22
67096: PUSH
67097: LD_VAR 0 5
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: LD_INT 60
67111: PUSH
67112: EMPTY
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 91
67121: PUSH
67122: LD_VAR 0 8
67126: PUSH
67127: LD_INT 6
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: LD_INT 25
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 25
67150: PUSH
67151: LD_INT 16
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: PPUSH
67169: CALL_OW 69
67173: PUSH
67174: LD_VAR 0 8
67178: PPUSH
67179: CALL_OW 313
67183: PPUSH
67184: LD_INT 3
67186: PUSH
67187: LD_INT 60
67189: PUSH
67190: EMPTY
67191: LIST
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 2
67199: PUSH
67200: LD_INT 25
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 25
67212: PUSH
67213: LD_INT 16
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PPUSH
67229: CALL_OW 72
67233: UNION
67234: ST_TO_ADDR
// if tmp then
67235: LD_VAR 0 4
67239: IFFALSE 67319
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67241: LD_ADDR_VAR 0 4
67245: PUSH
67246: LD_VAR 0 4
67250: PPUSH
67251: LD_INT 3
67253: PPUSH
67254: CALL 46902 0 2
67258: ST_TO_ADDR
// for j in tmp do
67259: LD_ADDR_VAR 0 2
67263: PUSH
67264: LD_VAR 0 4
67268: PUSH
67269: FOR_IN
67270: IFFALSE 67313
// begin if IsInUnit ( j ) then
67272: LD_VAR 0 2
67276: PPUSH
67277: CALL_OW 310
67281: IFFALSE 67292
// ComExit ( j ) ;
67283: LD_VAR 0 2
67287: PPUSH
67288: CALL 46985 0 1
// AddComCollect ( j , x , y ) ;
67292: LD_VAR 0 2
67296: PPUSH
67297: LD_VAR 0 6
67301: PPUSH
67302: LD_VAR 0 7
67306: PPUSH
67307: CALL_OW 177
// end ;
67311: GO 67269
67313: POP
67314: POP
// exit ;
67315: POP
67316: POP
67317: GO 67546
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67319: LD_ADDR_VAR 0 4
67323: PUSH
67324: LD_INT 22
67326: PUSH
67327: LD_VAR 0 5
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 91
67338: PUSH
67339: LD_VAR 0 8
67343: PUSH
67344: LD_INT 8
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: LD_INT 34
67357: PUSH
67358: LD_INT 12
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 34
67367: PUSH
67368: LD_INT 51
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 34
67377: PUSH
67378: LD_INT 32
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 34
67387: PUSH
67388: LD_INT 89
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: LIST
67406: PPUSH
67407: CALL_OW 69
67411: ST_TO_ADDR
// if tmp then
67412: LD_VAR 0 4
67416: IFFALSE 67542
// begin for j in tmp do
67418: LD_ADDR_VAR 0 2
67422: PUSH
67423: LD_VAR 0 4
67427: PUSH
67428: FOR_IN
67429: IFFALSE 67540
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67431: LD_VAR 0 2
67435: PPUSH
67436: CALL_OW 262
67440: PUSH
67441: LD_INT 3
67443: EQUAL
67444: PUSH
67445: LD_VAR 0 2
67449: PPUSH
67450: CALL_OW 261
67454: PUSH
67455: LD_INT 20
67457: GREATER
67458: OR
67459: PUSH
67460: LD_VAR 0 2
67464: PPUSH
67465: CALL_OW 314
67469: NOT
67470: AND
67471: PUSH
67472: LD_VAR 0 2
67476: PPUSH
67477: CALL_OW 263
67481: PUSH
67482: LD_INT 1
67484: NONEQUAL
67485: PUSH
67486: LD_VAR 0 2
67490: PPUSH
67491: CALL_OW 311
67495: OR
67496: AND
67497: IFFALSE 67538
// begin ComCollect ( j , x , y ) ;
67499: LD_VAR 0 2
67503: PPUSH
67504: LD_VAR 0 6
67508: PPUSH
67509: LD_VAR 0 7
67513: PPUSH
67514: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67518: LD_VAR 0 2
67522: PPUSH
67523: LD_VAR 0 8
67527: PPUSH
67528: CALL_OW 172
// exit ;
67532: POP
67533: POP
67534: POP
67535: POP
67536: GO 67546
// end ;
67538: GO 67428
67540: POP
67541: POP
// end ; end ;
67542: GO 66917
67544: POP
67545: POP
// end ; end_of_file
67546: PPOPN 9
67548: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67549: LD_VAR 0 1
67553: PUSH
67554: LD_INT 200
67556: DOUBLE
67557: GREATEREQUAL
67558: IFFALSE 67566
67560: LD_INT 299
67562: DOUBLE
67563: LESSEQUAL
67564: IFTRUE 67568
67566: GO 67600
67568: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67569: LD_VAR 0 1
67573: PPUSH
67574: LD_VAR 0 2
67578: PPUSH
67579: LD_VAR 0 3
67583: PPUSH
67584: LD_VAR 0 4
67588: PPUSH
67589: LD_VAR 0 5
67593: PPUSH
67594: CALL 68254 0 5
67598: GO 67677
67600: LD_INT 300
67602: DOUBLE
67603: GREATEREQUAL
67604: IFFALSE 67612
67606: LD_INT 399
67608: DOUBLE
67609: LESSEQUAL
67610: IFTRUE 67614
67612: GO 67676
67614: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67615: LD_VAR 0 1
67619: PPUSH
67620: LD_VAR 0 2
67624: PPUSH
67625: LD_VAR 0 3
67629: PPUSH
67630: LD_VAR 0 4
67634: PPUSH
67635: LD_VAR 0 5
67639: PPUSH
67640: LD_VAR 0 6
67644: PPUSH
67645: LD_VAR 0 7
67649: PPUSH
67650: LD_VAR 0 8
67654: PPUSH
67655: LD_VAR 0 9
67659: PPUSH
67660: LD_VAR 0 10
67664: PPUSH
67665: LD_VAR 0 11
67669: PPUSH
67670: CALL 64250 0 11
67674: GO 67677
67676: POP
// end ;
67677: PPOPN 11
67679: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67680: LD_VAR 0 1
67684: PPUSH
67685: LD_VAR 0 2
67689: PPUSH
67690: LD_VAR 0 3
67694: PPUSH
67695: LD_VAR 0 4
67699: PPUSH
67700: LD_VAR 0 5
67704: PPUSH
67705: CALL 67762 0 5
// end ; end_of_file
67709: PPOPN 5
67711: END
// export function SOS_UnitDestroyed ( un ) ; begin
67712: LD_INT 0
67714: PPUSH
// ComRadiation ( un ) ;
67715: LD_VAR 0 1
67719: PPUSH
67720: CALL 68658 0 1
// end ;
67724: LD_VAR 0 2
67728: RET
// export function SOS_UnitKamikazed ( un ) ; begin
67729: LD_INT 0
67731: PPUSH
// ComRadiation ( un ) ;
67732: LD_VAR 0 1
67736: PPUSH
67737: CALL 68658 0 1
// end ;
67741: LD_VAR 0 2
67745: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67746: LD_INT 0
67748: PPUSH
// end ;
67749: LD_VAR 0 4
67753: RET
// export function SOS_Command ( cmd ) ; begin
67754: LD_INT 0
67756: PPUSH
// end ;
67757: LD_VAR 0 2
67761: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67762: LD_INT 0
67764: PPUSH
// end ;
67765: LD_VAR 0 6
67769: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
67770: LD_INT 0
67772: PPUSH
67773: PPUSH
67774: PPUSH
67775: PPUSH
// if not vehicle or not factory then
67776: LD_VAR 0 1
67780: NOT
67781: PUSH
67782: LD_VAR 0 2
67786: NOT
67787: OR
67788: IFFALSE 67792
// exit ;
67790: GO 68249
// if factoryWaypoints >= factory then
67792: LD_EXP 102
67796: PUSH
67797: LD_VAR 0 2
67801: GREATEREQUAL
67802: IFFALSE 68249
// if factoryWaypoints [ factory ] then
67804: LD_EXP 102
67808: PUSH
67809: LD_VAR 0 2
67813: ARRAY
67814: IFFALSE 68249
// begin if GetControl ( vehicle ) = control_manual then
67816: LD_VAR 0 1
67820: PPUSH
67821: CALL_OW 263
67825: PUSH
67826: LD_INT 1
67828: EQUAL
67829: IFFALSE 68136
// begin driver := IsDrivenBy ( vehicle ) ;
67831: LD_ADDR_VAR 0 5
67835: PUSH
67836: LD_VAR 0 1
67840: PPUSH
67841: CALL_OW 311
67845: ST_TO_ADDR
// tag := GetTag ( driver ) ;
67846: LD_ADDR_VAR 0 4
67850: PUSH
67851: LD_VAR 0 5
67855: PPUSH
67856: CALL_OW 110
67860: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
67861: LD_VAR 0 4
67865: PUSH
67866: LD_INT 501
67868: EQUAL
67869: PUSH
67870: LD_VAR 0 1
67874: PPUSH
67875: CALL_OW 110
67879: PUSH
67880: LD_INT 501
67882: EQUAL
67883: OR
67884: IFFALSE 67888
// exit ;
67886: GO 68249
// if not HasTask ( driver ) then
67888: LD_VAR 0 5
67892: PPUSH
67893: CALL_OW 314
67897: NOT
67898: IFFALSE 68134
// begin SetTag ( driver , tDriver ) ;
67900: LD_VAR 0 5
67904: PPUSH
67905: LD_INT 501
67907: PPUSH
67908: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
67912: LD_VAR 0 1
67916: PPUSH
67917: LD_INT 501
67919: PPUSH
67920: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67924: LD_ADDR_VAR 0 6
67928: PUSH
67929: LD_EXP 102
67933: PUSH
67934: LD_VAR 0 2
67938: ARRAY
67939: PUSH
67940: LD_INT 3
67942: ARRAY
67943: PPUSH
67944: LD_EXP 102
67948: PUSH
67949: LD_VAR 0 2
67953: ARRAY
67954: PUSH
67955: LD_INT 4
67957: ARRAY
67958: PPUSH
67959: CALL_OW 428
67963: ST_TO_ADDR
// if hex then
67964: LD_VAR 0 6
67968: IFFALSE 67986
// ComMoveUnit ( driver , hex ) else
67970: LD_VAR 0 5
67974: PPUSH
67975: LD_VAR 0 6
67979: PPUSH
67980: CALL_OW 112
67984: GO 68025
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67986: LD_VAR 0 5
67990: PPUSH
67991: LD_EXP 102
67995: PUSH
67996: LD_VAR 0 2
68000: ARRAY
68001: PUSH
68002: LD_INT 3
68004: ARRAY
68005: PPUSH
68006: LD_EXP 102
68010: PUSH
68011: LD_VAR 0 2
68015: ARRAY
68016: PUSH
68017: LD_INT 4
68019: ARRAY
68020: PPUSH
68021: CALL_OW 111
// AddComExitVehicle ( driver ) ;
68025: LD_VAR 0 5
68029: PPUSH
68030: CALL_OW 181
// if Multiplayer then
68034: LD_OWVAR 4
68038: IFFALSE 68087
// begin repeat wait ( 10 ) ;
68040: LD_INT 10
68042: PPUSH
68043: CALL_OW 67
// until not IsInUnit ( driver ) ;
68047: LD_VAR 0 5
68051: PPUSH
68052: CALL_OW 310
68056: NOT
68057: IFFALSE 68040
// if not HasTask ( driver ) then
68059: LD_VAR 0 5
68063: PPUSH
68064: CALL_OW 314
68068: NOT
68069: IFFALSE 68085
// ComEnterUnit ( driver , factory ) ;
68071: LD_VAR 0 5
68075: PPUSH
68076: LD_VAR 0 2
68080: PPUSH
68081: CALL_OW 120
// end else
68085: GO 68101
// AddComEnterUnit ( driver , factory ) ;
68087: LD_VAR 0 5
68091: PPUSH
68092: LD_VAR 0 2
68096: PPUSH
68097: CALL_OW 180
// wait ( 0 0$1 ) ;
68101: LD_INT 35
68103: PPUSH
68104: CALL_OW 67
// SetTag ( driver , tag ) ;
68108: LD_VAR 0 5
68112: PPUSH
68113: LD_VAR 0 4
68117: PPUSH
68118: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
68122: LD_VAR 0 1
68126: PPUSH
68127: LD_INT 0
68129: PPUSH
68130: CALL_OW 109
// end ; end else
68134: GO 68249
// if GetControl ( vehicle ) = control_remote then
68136: LD_VAR 0 1
68140: PPUSH
68141: CALL_OW 263
68145: PUSH
68146: LD_INT 2
68148: EQUAL
68149: IFFALSE 68210
// begin wait ( 0 0$2 ) ;
68151: LD_INT 70
68153: PPUSH
68154: CALL_OW 67
// if Connect ( vehicle ) then
68158: LD_VAR 0 1
68162: PPUSH
68163: CALL 17204 0 1
68167: IFFALSE 68208
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68169: LD_VAR 0 1
68173: PPUSH
68174: LD_EXP 102
68178: PUSH
68179: LD_VAR 0 2
68183: ARRAY
68184: PUSH
68185: LD_INT 3
68187: ARRAY
68188: PPUSH
68189: LD_EXP 102
68193: PUSH
68194: LD_VAR 0 2
68198: ARRAY
68199: PUSH
68200: LD_INT 4
68202: ARRAY
68203: PPUSH
68204: CALL_OW 171
// end else
68208: GO 68249
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_EXP 102
68219: PUSH
68220: LD_VAR 0 2
68224: ARRAY
68225: PUSH
68226: LD_INT 3
68228: ARRAY
68229: PPUSH
68230: LD_EXP 102
68234: PUSH
68235: LD_VAR 0 2
68239: ARRAY
68240: PUSH
68241: LD_INT 4
68243: ARRAY
68244: PPUSH
68245: CALL_OW 171
// end ; end ;
68249: LD_VAR 0 3
68253: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68254: LD_INT 0
68256: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68257: LD_VAR 0 1
68261: PUSH
68262: LD_INT 250
68264: EQUAL
68265: PUSH
68266: LD_VAR 0 2
68270: PPUSH
68271: CALL_OW 264
68275: PUSH
68276: LD_INT 81
68278: EQUAL
68279: AND
68280: IFFALSE 68301
// MinerPlaceMine ( unit , x , y ) ;
68282: LD_VAR 0 2
68286: PPUSH
68287: LD_VAR 0 4
68291: PPUSH
68292: LD_VAR 0 5
68296: PPUSH
68297: CALL 71393 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68301: LD_VAR 0 1
68305: PUSH
68306: LD_INT 251
68308: EQUAL
68309: PUSH
68310: LD_VAR 0 2
68314: PPUSH
68315: CALL_OW 264
68319: PUSH
68320: LD_INT 81
68322: EQUAL
68323: AND
68324: IFFALSE 68345
// MinerDetonateMine ( unit , x , y ) ;
68326: LD_VAR 0 2
68330: PPUSH
68331: LD_VAR 0 4
68335: PPUSH
68336: LD_VAR 0 5
68340: PPUSH
68341: CALL 71668 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68345: LD_VAR 0 1
68349: PUSH
68350: LD_INT 252
68352: EQUAL
68353: PUSH
68354: LD_VAR 0 2
68358: PPUSH
68359: CALL_OW 264
68363: PUSH
68364: LD_INT 81
68366: EQUAL
68367: AND
68368: IFFALSE 68389
// MinerCreateMinefield ( unit , x , y ) ;
68370: LD_VAR 0 2
68374: PPUSH
68375: LD_VAR 0 4
68379: PPUSH
68380: LD_VAR 0 5
68384: PPUSH
68385: CALL 72085 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68389: LD_VAR 0 1
68393: PUSH
68394: LD_INT 253
68396: EQUAL
68397: PUSH
68398: LD_VAR 0 2
68402: PPUSH
68403: CALL_OW 257
68407: PUSH
68408: LD_INT 5
68410: EQUAL
68411: AND
68412: IFFALSE 68433
// ComBinocular ( unit , x , y ) ;
68414: LD_VAR 0 2
68418: PPUSH
68419: LD_VAR 0 4
68423: PPUSH
68424: LD_VAR 0 5
68428: PPUSH
68429: CALL 72454 0 3
// if selectedUnit then
68433: LD_VAR 0 3
68437: IFFALSE 68493
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68439: LD_VAR 0 1
68443: PUSH
68444: LD_INT 254
68446: EQUAL
68447: PUSH
68448: LD_VAR 0 2
68452: PPUSH
68453: CALL_OW 264
68457: PUSH
68458: LD_INT 99
68460: EQUAL
68461: AND
68462: PUSH
68463: LD_VAR 0 3
68467: PPUSH
68468: CALL_OW 263
68472: PUSH
68473: LD_INT 3
68475: EQUAL
68476: AND
68477: IFFALSE 68493
// HackDestroyVehicle ( unit , selectedUnit ) ;
68479: LD_VAR 0 2
68483: PPUSH
68484: LD_VAR 0 3
68488: PPUSH
68489: CALL 70757 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68493: LD_VAR 0 1
68497: PUSH
68498: LD_INT 255
68500: EQUAL
68501: PUSH
68502: LD_VAR 0 2
68506: PPUSH
68507: CALL_OW 264
68511: PUSH
68512: LD_INT 14
68514: PUSH
68515: LD_INT 53
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: IN
68522: AND
68523: PUSH
68524: LD_VAR 0 4
68528: PPUSH
68529: LD_VAR 0 5
68533: PPUSH
68534: CALL_OW 488
68538: AND
68539: IFFALSE 68563
// CutTreeXYR ( unit , x , y , 12 ) ;
68541: LD_VAR 0 2
68545: PPUSH
68546: LD_VAR 0 4
68550: PPUSH
68551: LD_VAR 0 5
68555: PPUSH
68556: LD_INT 12
68558: PPUSH
68559: CALL 68754 0 4
// if cmd = 256 then
68563: LD_VAR 0 1
68567: PUSH
68568: LD_INT 256
68570: EQUAL
68571: IFFALSE 68592
// SetFactoryWaypoint ( unit , x , y ) ;
68573: LD_VAR 0 2
68577: PPUSH
68578: LD_VAR 0 4
68582: PPUSH
68583: LD_VAR 0 5
68587: PPUSH
68588: CALL 66238 0 3
// if cmd = 257 then
68592: LD_VAR 0 1
68596: PUSH
68597: LD_INT 257
68599: EQUAL
68600: IFFALSE 68621
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68602: LD_VAR 0 2
68606: PPUSH
68607: LD_VAR 0 4
68611: PPUSH
68612: LD_VAR 0 5
68616: PPUSH
68617: CALL 66600 0 3
// if cmd = 258 then
68621: LD_VAR 0 1
68625: PUSH
68626: LD_INT 258
68628: EQUAL
68629: IFFALSE 68653
// BurnTreeXYR ( unit , x , y , 8 ) ;
68631: LD_VAR 0 2
68635: PPUSH
68636: LD_VAR 0 4
68640: PPUSH
68641: LD_VAR 0 5
68645: PPUSH
68646: LD_INT 8
68648: PPUSH
68649: CALL 69148 0 4
// end ;
68653: LD_VAR 0 6
68657: RET
// export function ComRadiation ( un ) ; var eff ; begin
68658: LD_INT 0
68660: PPUSH
68661: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
68662: LD_VAR 0 1
68666: PPUSH
68667: CALL_OW 264
68671: PUSH
68672: LD_INT 91
68674: NONEQUAL
68675: IFFALSE 68679
// exit ;
68677: GO 68749
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68679: LD_INT 68
68681: PPUSH
68682: LD_VAR 0 1
68686: PPUSH
68687: CALL_OW 255
68691: PPUSH
68692: CALL_OW 321
68696: PUSH
68697: LD_INT 2
68699: EQUAL
68700: IFFALSE 68712
// eff := 70 else
68702: LD_ADDR_VAR 0 3
68706: PUSH
68707: LD_INT 70
68709: ST_TO_ADDR
68710: GO 68720
// eff := 30 ;
68712: LD_ADDR_VAR 0 3
68716: PUSH
68717: LD_INT 30
68719: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68720: LD_VAR 0 1
68724: PPUSH
68725: CALL_OW 250
68729: PPUSH
68730: LD_VAR 0 1
68734: PPUSH
68735: CALL_OW 251
68739: PPUSH
68740: LD_VAR 0 3
68744: PPUSH
68745: CALL_OW 495
// end ;
68749: LD_VAR 0 2
68753: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68754: LD_INT 0
68756: PPUSH
68757: PPUSH
68758: PPUSH
68759: PPUSH
68760: PPUSH
68761: PPUSH
68762: PPUSH
68763: PPUSH
68764: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
68765: LD_VAR 0 1
68769: PPUSH
68770: CALL_OW 302
68774: NOT
68775: PUSH
68776: LD_VAR 0 2
68780: PPUSH
68781: LD_VAR 0 3
68785: PPUSH
68786: CALL_OW 488
68790: NOT
68791: OR
68792: PUSH
68793: LD_VAR 0 4
68797: NOT
68798: OR
68799: IFFALSE 68803
// exit ;
68801: GO 69143
// list := [ ] ;
68803: LD_ADDR_VAR 0 13
68807: PUSH
68808: EMPTY
68809: ST_TO_ADDR
// if x - r < 0 then
68810: LD_VAR 0 2
68814: PUSH
68815: LD_VAR 0 4
68819: MINUS
68820: PUSH
68821: LD_INT 0
68823: LESS
68824: IFFALSE 68836
// min_x := 0 else
68826: LD_ADDR_VAR 0 7
68830: PUSH
68831: LD_INT 0
68833: ST_TO_ADDR
68834: GO 68852
// min_x := x - r ;
68836: LD_ADDR_VAR 0 7
68840: PUSH
68841: LD_VAR 0 2
68845: PUSH
68846: LD_VAR 0 4
68850: MINUS
68851: ST_TO_ADDR
// if y - r < 0 then
68852: LD_VAR 0 3
68856: PUSH
68857: LD_VAR 0 4
68861: MINUS
68862: PUSH
68863: LD_INT 0
68865: LESS
68866: IFFALSE 68878
// min_y := 0 else
68868: LD_ADDR_VAR 0 8
68872: PUSH
68873: LD_INT 0
68875: ST_TO_ADDR
68876: GO 68894
// min_y := y - r ;
68878: LD_ADDR_VAR 0 8
68882: PUSH
68883: LD_VAR 0 3
68887: PUSH
68888: LD_VAR 0 4
68892: MINUS
68893: ST_TO_ADDR
// max_x := x + r ;
68894: LD_ADDR_VAR 0 9
68898: PUSH
68899: LD_VAR 0 2
68903: PUSH
68904: LD_VAR 0 4
68908: PLUS
68909: ST_TO_ADDR
// max_y := y + r ;
68910: LD_ADDR_VAR 0 10
68914: PUSH
68915: LD_VAR 0 3
68919: PUSH
68920: LD_VAR 0 4
68924: PLUS
68925: ST_TO_ADDR
// for _x = min_x to max_x do
68926: LD_ADDR_VAR 0 11
68930: PUSH
68931: DOUBLE
68932: LD_VAR 0 7
68936: DEC
68937: ST_TO_ADDR
68938: LD_VAR 0 9
68942: PUSH
68943: FOR_TO
68944: IFFALSE 69061
// for _y = min_y to max_y do
68946: LD_ADDR_VAR 0 12
68950: PUSH
68951: DOUBLE
68952: LD_VAR 0 8
68956: DEC
68957: ST_TO_ADDR
68958: LD_VAR 0 10
68962: PUSH
68963: FOR_TO
68964: IFFALSE 69057
// begin if not ValidHex ( _x , _y ) then
68966: LD_VAR 0 11
68970: PPUSH
68971: LD_VAR 0 12
68975: PPUSH
68976: CALL_OW 488
68980: NOT
68981: IFFALSE 68985
// continue ;
68983: GO 68963
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68985: LD_VAR 0 11
68989: PPUSH
68990: LD_VAR 0 12
68994: PPUSH
68995: CALL_OW 351
68999: PUSH
69000: LD_VAR 0 11
69004: PPUSH
69005: LD_VAR 0 12
69009: PPUSH
69010: CALL_OW 554
69014: AND
69015: IFFALSE 69055
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69017: LD_ADDR_VAR 0 13
69021: PUSH
69022: LD_VAR 0 13
69026: PPUSH
69027: LD_VAR 0 13
69031: PUSH
69032: LD_INT 1
69034: PLUS
69035: PPUSH
69036: LD_VAR 0 11
69040: PUSH
69041: LD_VAR 0 12
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PPUSH
69050: CALL_OW 2
69054: ST_TO_ADDR
// end ;
69055: GO 68963
69057: POP
69058: POP
69059: GO 68943
69061: POP
69062: POP
// if not list then
69063: LD_VAR 0 13
69067: NOT
69068: IFFALSE 69072
// exit ;
69070: GO 69143
// for i in list do
69072: LD_ADDR_VAR 0 6
69076: PUSH
69077: LD_VAR 0 13
69081: PUSH
69082: FOR_IN
69083: IFFALSE 69141
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69085: LD_VAR 0 1
69089: PPUSH
69090: LD_STRING M
69092: PUSH
69093: LD_VAR 0 6
69097: PUSH
69098: LD_INT 1
69100: ARRAY
69101: PUSH
69102: LD_VAR 0 6
69106: PUSH
69107: LD_INT 2
69109: ARRAY
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: LD_INT 0
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: PUSH
69132: EMPTY
69133: LIST
69134: PPUSH
69135: CALL_OW 447
69139: GO 69082
69141: POP
69142: POP
// end ;
69143: LD_VAR 0 5
69147: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
69148: LD_INT 0
69150: PPUSH
69151: PPUSH
69152: PPUSH
69153: PPUSH
69154: PPUSH
69155: PPUSH
69156: PPUSH
69157: PPUSH
69158: PPUSH
69159: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
69160: LD_VAR 0 1
69164: PPUSH
69165: CALL_OW 302
69169: NOT
69170: PUSH
69171: LD_VAR 0 2
69175: PPUSH
69176: LD_VAR 0 3
69180: PPUSH
69181: CALL_OW 488
69185: NOT
69186: OR
69187: PUSH
69188: LD_VAR 0 4
69192: NOT
69193: OR
69194: IFFALSE 69198
// exit ;
69196: GO 69711
// list := [ ] ;
69198: LD_ADDR_VAR 0 13
69202: PUSH
69203: EMPTY
69204: ST_TO_ADDR
// if x - r < 0 then
69205: LD_VAR 0 2
69209: PUSH
69210: LD_VAR 0 4
69214: MINUS
69215: PUSH
69216: LD_INT 0
69218: LESS
69219: IFFALSE 69231
// min_x := 0 else
69221: LD_ADDR_VAR 0 7
69225: PUSH
69226: LD_INT 0
69228: ST_TO_ADDR
69229: GO 69247
// min_x := x - r ;
69231: LD_ADDR_VAR 0 7
69235: PUSH
69236: LD_VAR 0 2
69240: PUSH
69241: LD_VAR 0 4
69245: MINUS
69246: ST_TO_ADDR
// if y - r < 0 then
69247: LD_VAR 0 3
69251: PUSH
69252: LD_VAR 0 4
69256: MINUS
69257: PUSH
69258: LD_INT 0
69260: LESS
69261: IFFALSE 69273
// min_y := 0 else
69263: LD_ADDR_VAR 0 8
69267: PUSH
69268: LD_INT 0
69270: ST_TO_ADDR
69271: GO 69289
// min_y := y - r ;
69273: LD_ADDR_VAR 0 8
69277: PUSH
69278: LD_VAR 0 3
69282: PUSH
69283: LD_VAR 0 4
69287: MINUS
69288: ST_TO_ADDR
// max_x := x + r ;
69289: LD_ADDR_VAR 0 9
69293: PUSH
69294: LD_VAR 0 2
69298: PUSH
69299: LD_VAR 0 4
69303: PLUS
69304: ST_TO_ADDR
// max_y := y + r ;
69305: LD_ADDR_VAR 0 10
69309: PUSH
69310: LD_VAR 0 3
69314: PUSH
69315: LD_VAR 0 4
69319: PLUS
69320: ST_TO_ADDR
// for _x = min_x to max_x do
69321: LD_ADDR_VAR 0 11
69325: PUSH
69326: DOUBLE
69327: LD_VAR 0 7
69331: DEC
69332: ST_TO_ADDR
69333: LD_VAR 0 9
69337: PUSH
69338: FOR_TO
69339: IFFALSE 69456
// for _y = min_y to max_y do
69341: LD_ADDR_VAR 0 12
69345: PUSH
69346: DOUBLE
69347: LD_VAR 0 8
69351: DEC
69352: ST_TO_ADDR
69353: LD_VAR 0 10
69357: PUSH
69358: FOR_TO
69359: IFFALSE 69452
// begin if not ValidHex ( _x , _y ) then
69361: LD_VAR 0 11
69365: PPUSH
69366: LD_VAR 0 12
69370: PPUSH
69371: CALL_OW 488
69375: NOT
69376: IFFALSE 69380
// continue ;
69378: GO 69358
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69380: LD_VAR 0 11
69384: PPUSH
69385: LD_VAR 0 12
69389: PPUSH
69390: CALL_OW 351
69394: PUSH
69395: LD_VAR 0 11
69399: PPUSH
69400: LD_VAR 0 12
69404: PPUSH
69405: CALL_OW 554
69409: AND
69410: IFFALSE 69450
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69412: LD_ADDR_VAR 0 13
69416: PUSH
69417: LD_VAR 0 13
69421: PPUSH
69422: LD_VAR 0 13
69426: PUSH
69427: LD_INT 1
69429: PLUS
69430: PPUSH
69431: LD_VAR 0 11
69435: PUSH
69436: LD_VAR 0 12
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PPUSH
69445: CALL_OW 2
69449: ST_TO_ADDR
// end ;
69450: GO 69358
69452: POP
69453: POP
69454: GO 69338
69456: POP
69457: POP
// if not list then
69458: LD_VAR 0 13
69462: NOT
69463: IFFALSE 69467
// exit ;
69465: GO 69711
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
69467: LD_ADDR_VAR 0 13
69471: PUSH
69472: LD_VAR 0 1
69476: PPUSH
69477: LD_VAR 0 13
69481: PPUSH
69482: LD_INT 1
69484: PPUSH
69485: LD_INT 1
69487: PPUSH
69488: CALL 14346 0 4
69492: ST_TO_ADDR
// ComStop ( flame ) ;
69493: LD_VAR 0 1
69497: PPUSH
69498: CALL_OW 141
// for i in list do
69502: LD_ADDR_VAR 0 6
69506: PUSH
69507: LD_VAR 0 13
69511: PUSH
69512: FOR_IN
69513: IFFALSE 69544
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
69515: LD_VAR 0 1
69519: PPUSH
69520: LD_VAR 0 6
69524: PUSH
69525: LD_INT 1
69527: ARRAY
69528: PPUSH
69529: LD_VAR 0 6
69533: PUSH
69534: LD_INT 2
69536: ARRAY
69537: PPUSH
69538: CALL_OW 176
69542: GO 69512
69544: POP
69545: POP
// repeat wait ( 0 0$1 ) ;
69546: LD_INT 35
69548: PPUSH
69549: CALL_OW 67
// task := GetTaskList ( flame ) ;
69553: LD_ADDR_VAR 0 14
69557: PUSH
69558: LD_VAR 0 1
69562: PPUSH
69563: CALL_OW 437
69567: ST_TO_ADDR
// if not task then
69568: LD_VAR 0 14
69572: NOT
69573: IFFALSE 69577
// exit ;
69575: GO 69711
// if task [ 1 ] [ 1 ] <> | then
69577: LD_VAR 0 14
69581: PUSH
69582: LD_INT 1
69584: ARRAY
69585: PUSH
69586: LD_INT 1
69588: ARRAY
69589: PUSH
69590: LD_STRING |
69592: NONEQUAL
69593: IFFALSE 69597
// exit ;
69595: GO 69711
// _x := task [ 1 ] [ 2 ] ;
69597: LD_ADDR_VAR 0 11
69601: PUSH
69602: LD_VAR 0 14
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PUSH
69611: LD_INT 2
69613: ARRAY
69614: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69615: LD_ADDR_VAR 0 12
69619: PUSH
69620: LD_VAR 0 14
69624: PUSH
69625: LD_INT 1
69627: ARRAY
69628: PUSH
69629: LD_INT 3
69631: ARRAY
69632: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69633: LD_VAR 0 11
69637: PPUSH
69638: LD_VAR 0 12
69642: PPUSH
69643: CALL_OW 351
69647: NOT
69648: PUSH
69649: LD_VAR 0 11
69653: PPUSH
69654: LD_VAR 0 12
69658: PPUSH
69659: CALL_OW 554
69663: NOT
69664: OR
69665: IFFALSE 69699
// begin task := Delete ( task , 1 ) ;
69667: LD_ADDR_VAR 0 14
69671: PUSH
69672: LD_VAR 0 14
69676: PPUSH
69677: LD_INT 1
69679: PPUSH
69680: CALL_OW 3
69684: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69685: LD_VAR 0 1
69689: PPUSH
69690: LD_VAR 0 14
69694: PPUSH
69695: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69699: LD_VAR 0 1
69703: PPUSH
69704: CALL_OW 314
69708: NOT
69709: IFFALSE 69546
// end ;
69711: LD_VAR 0 5
69715: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69716: LD_EXP 105
69720: NOT
69721: IFFALSE 69771
69723: GO 69725
69725: DISABLE
// begin initHack := true ;
69726: LD_ADDR_EXP 105
69730: PUSH
69731: LD_INT 1
69733: ST_TO_ADDR
// hackTanks := [ ] ;
69734: LD_ADDR_EXP 106
69738: PUSH
69739: EMPTY
69740: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69741: LD_ADDR_EXP 107
69745: PUSH
69746: EMPTY
69747: ST_TO_ADDR
// hackLimit := 3 ;
69748: LD_ADDR_EXP 108
69752: PUSH
69753: LD_INT 3
69755: ST_TO_ADDR
// hackDist := 12 ;
69756: LD_ADDR_EXP 109
69760: PUSH
69761: LD_INT 12
69763: ST_TO_ADDR
// hackCounter := [ ] ;
69764: LD_ADDR_EXP 110
69768: PUSH
69769: EMPTY
69770: ST_TO_ADDR
// end ;
69771: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69772: LD_EXP 105
69776: PUSH
69777: LD_INT 34
69779: PUSH
69780: LD_INT 99
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PPUSH
69787: CALL_OW 69
69791: AND
69792: IFFALSE 70045
69794: GO 69796
69796: DISABLE
69797: LD_INT 0
69799: PPUSH
69800: PPUSH
// begin enable ;
69801: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69802: LD_ADDR_VAR 0 1
69806: PUSH
69807: LD_INT 34
69809: PUSH
69810: LD_INT 99
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PPUSH
69817: CALL_OW 69
69821: PUSH
69822: FOR_IN
69823: IFFALSE 70043
// begin if not i in hackTanks then
69825: LD_VAR 0 1
69829: PUSH
69830: LD_EXP 106
69834: IN
69835: NOT
69836: IFFALSE 69919
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69838: LD_ADDR_EXP 106
69842: PUSH
69843: LD_EXP 106
69847: PPUSH
69848: LD_EXP 106
69852: PUSH
69853: LD_INT 1
69855: PLUS
69856: PPUSH
69857: LD_VAR 0 1
69861: PPUSH
69862: CALL_OW 1
69866: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69867: LD_ADDR_EXP 107
69871: PUSH
69872: LD_EXP 107
69876: PPUSH
69877: LD_EXP 107
69881: PUSH
69882: LD_INT 1
69884: PLUS
69885: PPUSH
69886: EMPTY
69887: PPUSH
69888: CALL_OW 1
69892: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69893: LD_ADDR_EXP 110
69897: PUSH
69898: LD_EXP 110
69902: PPUSH
69903: LD_EXP 110
69907: PUSH
69908: LD_INT 1
69910: PLUS
69911: PPUSH
69912: EMPTY
69913: PPUSH
69914: CALL_OW 1
69918: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69919: LD_VAR 0 1
69923: PPUSH
69924: CALL_OW 302
69928: NOT
69929: IFFALSE 69942
// begin HackUnlinkAll ( i ) ;
69931: LD_VAR 0 1
69935: PPUSH
69936: CALL 70048 0 1
// continue ;
69940: GO 69822
// end ; HackCheckCapturedStatus ( i ) ;
69942: LD_VAR 0 1
69946: PPUSH
69947: CALL 70491 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69951: LD_ADDR_VAR 0 2
69955: PUSH
69956: LD_INT 81
69958: PUSH
69959: LD_VAR 0 1
69963: PPUSH
69964: CALL_OW 255
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 33
69975: PUSH
69976: LD_INT 3
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 91
69985: PUSH
69986: LD_VAR 0 1
69990: PUSH
69991: LD_EXP 109
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 50
70003: PUSH
70004: EMPTY
70005: LIST
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: PPUSH
70013: CALL_OW 69
70017: ST_TO_ADDR
// if not tmp then
70018: LD_VAR 0 2
70022: NOT
70023: IFFALSE 70027
// continue ;
70025: GO 69822
// HackLink ( i , tmp ) ;
70027: LD_VAR 0 1
70031: PPUSH
70032: LD_VAR 0 2
70036: PPUSH
70037: CALL 70184 0 2
// end ;
70041: GO 69822
70043: POP
70044: POP
// end ;
70045: PPOPN 2
70047: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
70048: LD_INT 0
70050: PPUSH
70051: PPUSH
70052: PPUSH
// if not hack in hackTanks then
70053: LD_VAR 0 1
70057: PUSH
70058: LD_EXP 106
70062: IN
70063: NOT
70064: IFFALSE 70068
// exit ;
70066: GO 70179
// index := GetElementIndex ( hackTanks , hack ) ;
70068: LD_ADDR_VAR 0 4
70072: PUSH
70073: LD_EXP 106
70077: PPUSH
70078: LD_VAR 0 1
70082: PPUSH
70083: CALL 13643 0 2
70087: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
70088: LD_EXP 107
70092: PUSH
70093: LD_VAR 0 4
70097: ARRAY
70098: IFFALSE 70179
// begin for i in hackTanksCaptured [ index ] do
70100: LD_ADDR_VAR 0 3
70104: PUSH
70105: LD_EXP 107
70109: PUSH
70110: LD_VAR 0 4
70114: ARRAY
70115: PUSH
70116: FOR_IN
70117: IFFALSE 70143
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70119: LD_VAR 0 3
70123: PUSH
70124: LD_INT 1
70126: ARRAY
70127: PPUSH
70128: LD_VAR 0 3
70132: PUSH
70133: LD_INT 2
70135: ARRAY
70136: PPUSH
70137: CALL_OW 235
70141: GO 70116
70143: POP
70144: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70145: LD_ADDR_EXP 107
70149: PUSH
70150: LD_EXP 107
70154: PPUSH
70155: LD_VAR 0 4
70159: PPUSH
70160: EMPTY
70161: PPUSH
70162: CALL_OW 1
70166: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70167: LD_VAR 0 1
70171: PPUSH
70172: LD_INT 0
70174: PPUSH
70175: CALL_OW 505
// end ; end ;
70179: LD_VAR 0 2
70183: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70184: LD_INT 0
70186: PPUSH
70187: PPUSH
70188: PPUSH
// if not hack in hackTanks or not vehicles then
70189: LD_VAR 0 1
70193: PUSH
70194: LD_EXP 106
70198: IN
70199: NOT
70200: PUSH
70201: LD_VAR 0 2
70205: NOT
70206: OR
70207: IFFALSE 70211
// exit ;
70209: GO 70486
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70211: LD_ADDR_VAR 0 2
70215: PUSH
70216: LD_VAR 0 1
70220: PPUSH
70221: LD_VAR 0 2
70225: PPUSH
70226: LD_INT 1
70228: PPUSH
70229: LD_INT 1
70231: PPUSH
70232: CALL 14293 0 4
70236: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70237: LD_ADDR_VAR 0 5
70241: PUSH
70242: LD_EXP 106
70246: PPUSH
70247: LD_VAR 0 1
70251: PPUSH
70252: CALL 13643 0 2
70256: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70257: LD_EXP 107
70261: PUSH
70262: LD_VAR 0 5
70266: ARRAY
70267: PUSH
70268: LD_EXP 108
70272: LESS
70273: IFFALSE 70462
// begin for i := 1 to vehicles do
70275: LD_ADDR_VAR 0 4
70279: PUSH
70280: DOUBLE
70281: LD_INT 1
70283: DEC
70284: ST_TO_ADDR
70285: LD_VAR 0 2
70289: PUSH
70290: FOR_TO
70291: IFFALSE 70460
// begin if hackTanksCaptured [ index ] = hackLimit then
70293: LD_EXP 107
70297: PUSH
70298: LD_VAR 0 5
70302: ARRAY
70303: PUSH
70304: LD_EXP 108
70308: EQUAL
70309: IFFALSE 70313
// break ;
70311: GO 70460
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70313: LD_ADDR_EXP 110
70317: PUSH
70318: LD_EXP 110
70322: PPUSH
70323: LD_VAR 0 5
70327: PPUSH
70328: LD_EXP 110
70332: PUSH
70333: LD_VAR 0 5
70337: ARRAY
70338: PUSH
70339: LD_INT 1
70341: PLUS
70342: PPUSH
70343: CALL_OW 1
70347: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70348: LD_ADDR_EXP 107
70352: PUSH
70353: LD_EXP 107
70357: PPUSH
70358: LD_VAR 0 5
70362: PUSH
70363: LD_EXP 107
70367: PUSH
70368: LD_VAR 0 5
70372: ARRAY
70373: PUSH
70374: LD_INT 1
70376: PLUS
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PPUSH
70382: LD_VAR 0 2
70386: PUSH
70387: LD_VAR 0 4
70391: ARRAY
70392: PUSH
70393: LD_VAR 0 2
70397: PUSH
70398: LD_VAR 0 4
70402: ARRAY
70403: PPUSH
70404: CALL_OW 255
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PPUSH
70413: CALL 13858 0 3
70417: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70418: LD_VAR 0 2
70422: PUSH
70423: LD_VAR 0 4
70427: ARRAY
70428: PPUSH
70429: LD_VAR 0 1
70433: PPUSH
70434: CALL_OW 255
70438: PPUSH
70439: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70443: LD_VAR 0 2
70447: PUSH
70448: LD_VAR 0 4
70452: ARRAY
70453: PPUSH
70454: CALL_OW 141
// end ;
70458: GO 70290
70460: POP
70461: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70462: LD_VAR 0 1
70466: PPUSH
70467: LD_EXP 107
70471: PUSH
70472: LD_VAR 0 5
70476: ARRAY
70477: PUSH
70478: LD_INT 0
70480: PLUS
70481: PPUSH
70482: CALL_OW 505
// end ;
70486: LD_VAR 0 3
70490: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70491: LD_INT 0
70493: PPUSH
70494: PPUSH
70495: PPUSH
70496: PPUSH
// if not hack in hackTanks then
70497: LD_VAR 0 1
70501: PUSH
70502: LD_EXP 106
70506: IN
70507: NOT
70508: IFFALSE 70512
// exit ;
70510: GO 70752
// index := GetElementIndex ( hackTanks , hack ) ;
70512: LD_ADDR_VAR 0 4
70516: PUSH
70517: LD_EXP 106
70521: PPUSH
70522: LD_VAR 0 1
70526: PPUSH
70527: CALL 13643 0 2
70531: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70532: LD_ADDR_VAR 0 3
70536: PUSH
70537: DOUBLE
70538: LD_EXP 107
70542: PUSH
70543: LD_VAR 0 4
70547: ARRAY
70548: INC
70549: ST_TO_ADDR
70550: LD_INT 1
70552: PUSH
70553: FOR_DOWNTO
70554: IFFALSE 70726
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70556: LD_ADDR_VAR 0 5
70560: PUSH
70561: LD_EXP 107
70565: PUSH
70566: LD_VAR 0 4
70570: ARRAY
70571: PUSH
70572: LD_VAR 0 3
70576: ARRAY
70577: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70578: LD_VAR 0 5
70582: PUSH
70583: LD_INT 1
70585: ARRAY
70586: PPUSH
70587: CALL_OW 302
70591: NOT
70592: PUSH
70593: LD_VAR 0 5
70597: PUSH
70598: LD_INT 1
70600: ARRAY
70601: PPUSH
70602: CALL_OW 255
70606: PUSH
70607: LD_VAR 0 1
70611: PPUSH
70612: CALL_OW 255
70616: NONEQUAL
70617: OR
70618: IFFALSE 70724
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70620: LD_VAR 0 5
70624: PUSH
70625: LD_INT 1
70627: ARRAY
70628: PPUSH
70629: CALL_OW 305
70633: PUSH
70634: LD_VAR 0 5
70638: PUSH
70639: LD_INT 1
70641: ARRAY
70642: PPUSH
70643: CALL_OW 255
70647: PUSH
70648: LD_VAR 0 1
70652: PPUSH
70653: CALL_OW 255
70657: EQUAL
70658: AND
70659: IFFALSE 70683
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70661: LD_VAR 0 5
70665: PUSH
70666: LD_INT 1
70668: ARRAY
70669: PPUSH
70670: LD_VAR 0 5
70674: PUSH
70675: LD_INT 2
70677: ARRAY
70678: PPUSH
70679: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70683: LD_ADDR_EXP 107
70687: PUSH
70688: LD_EXP 107
70692: PPUSH
70693: LD_VAR 0 4
70697: PPUSH
70698: LD_EXP 107
70702: PUSH
70703: LD_VAR 0 4
70707: ARRAY
70708: PPUSH
70709: LD_VAR 0 3
70713: PPUSH
70714: CALL_OW 3
70718: PPUSH
70719: CALL_OW 1
70723: ST_TO_ADDR
// end ; end ;
70724: GO 70553
70726: POP
70727: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70728: LD_VAR 0 1
70732: PPUSH
70733: LD_EXP 107
70737: PUSH
70738: LD_VAR 0 4
70742: ARRAY
70743: PUSH
70744: LD_INT 0
70746: PLUS
70747: PPUSH
70748: CALL_OW 505
// end ;
70752: LD_VAR 0 2
70756: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
70761: PPUSH
70762: PPUSH
// if not hack in hackTanks then
70763: LD_VAR 0 1
70767: PUSH
70768: LD_EXP 106
70772: IN
70773: NOT
70774: IFFALSE 70778
// exit ;
70776: GO 70863
// index := GetElementIndex ( hackTanks , hack ) ;
70778: LD_ADDR_VAR 0 5
70782: PUSH
70783: LD_EXP 106
70787: PPUSH
70788: LD_VAR 0 1
70792: PPUSH
70793: CALL 13643 0 2
70797: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70798: LD_ADDR_VAR 0 4
70802: PUSH
70803: DOUBLE
70804: LD_INT 1
70806: DEC
70807: ST_TO_ADDR
70808: LD_EXP 107
70812: PUSH
70813: LD_VAR 0 5
70817: ARRAY
70818: PUSH
70819: FOR_TO
70820: IFFALSE 70861
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70822: LD_EXP 107
70826: PUSH
70827: LD_VAR 0 5
70831: ARRAY
70832: PUSH
70833: LD_VAR 0 4
70837: ARRAY
70838: PUSH
70839: LD_INT 1
70841: ARRAY
70842: PUSH
70843: LD_VAR 0 2
70847: EQUAL
70848: IFFALSE 70859
// KillUnit ( vehicle ) ;
70850: LD_VAR 0 2
70854: PPUSH
70855: CALL_OW 66
70859: GO 70819
70861: POP
70862: POP
// end ;
70863: LD_VAR 0 3
70867: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70868: LD_EXP 111
70872: NOT
70873: IFFALSE 70908
70875: GO 70877
70877: DISABLE
// begin initMiner := true ;
70878: LD_ADDR_EXP 111
70882: PUSH
70883: LD_INT 1
70885: ST_TO_ADDR
// minersList := [ ] ;
70886: LD_ADDR_EXP 112
70890: PUSH
70891: EMPTY
70892: ST_TO_ADDR
// minerMinesList := [ ] ;
70893: LD_ADDR_EXP 113
70897: PUSH
70898: EMPTY
70899: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70900: LD_ADDR_EXP 114
70904: PUSH
70905: LD_INT 5
70907: ST_TO_ADDR
// end ;
70908: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70909: LD_EXP 111
70913: PUSH
70914: LD_INT 34
70916: PUSH
70917: LD_INT 81
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PPUSH
70924: CALL_OW 69
70928: AND
70929: IFFALSE 71390
70931: GO 70933
70933: DISABLE
70934: LD_INT 0
70936: PPUSH
70937: PPUSH
70938: PPUSH
70939: PPUSH
// begin enable ;
70940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70941: LD_ADDR_VAR 0 1
70945: PUSH
70946: LD_INT 34
70948: PUSH
70949: LD_INT 81
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PPUSH
70956: CALL_OW 69
70960: PUSH
70961: FOR_IN
70962: IFFALSE 71034
// begin if not i in minersList then
70964: LD_VAR 0 1
70968: PUSH
70969: LD_EXP 112
70973: IN
70974: NOT
70975: IFFALSE 71032
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70977: LD_ADDR_EXP 112
70981: PUSH
70982: LD_EXP 112
70986: PPUSH
70987: LD_EXP 112
70991: PUSH
70992: LD_INT 1
70994: PLUS
70995: PPUSH
70996: LD_VAR 0 1
71000: PPUSH
71001: CALL_OW 1
71005: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
71006: LD_ADDR_EXP 113
71010: PUSH
71011: LD_EXP 113
71015: PPUSH
71016: LD_EXP 113
71020: PUSH
71021: LD_INT 1
71023: PLUS
71024: PPUSH
71025: EMPTY
71026: PPUSH
71027: CALL_OW 1
71031: ST_TO_ADDR
// end end ;
71032: GO 70961
71034: POP
71035: POP
// for i := minerMinesList downto 1 do
71036: LD_ADDR_VAR 0 1
71040: PUSH
71041: DOUBLE
71042: LD_EXP 113
71046: INC
71047: ST_TO_ADDR
71048: LD_INT 1
71050: PUSH
71051: FOR_DOWNTO
71052: IFFALSE 71388
// begin if IsLive ( minersList [ i ] ) then
71054: LD_EXP 112
71058: PUSH
71059: LD_VAR 0 1
71063: ARRAY
71064: PPUSH
71065: CALL_OW 300
71069: IFFALSE 71097
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
71071: LD_EXP 112
71075: PUSH
71076: LD_VAR 0 1
71080: ARRAY
71081: PPUSH
71082: LD_EXP 113
71086: PUSH
71087: LD_VAR 0 1
71091: ARRAY
71092: PPUSH
71093: CALL_OW 505
// if not minerMinesList [ i ] then
71097: LD_EXP 113
71101: PUSH
71102: LD_VAR 0 1
71106: ARRAY
71107: NOT
71108: IFFALSE 71112
// continue ;
71110: GO 71051
// for j := minerMinesList [ i ] downto 1 do
71112: LD_ADDR_VAR 0 2
71116: PUSH
71117: DOUBLE
71118: LD_EXP 113
71122: PUSH
71123: LD_VAR 0 1
71127: ARRAY
71128: INC
71129: ST_TO_ADDR
71130: LD_INT 1
71132: PUSH
71133: FOR_DOWNTO
71134: IFFALSE 71384
// begin side := GetSide ( minersList [ i ] ) ;
71136: LD_ADDR_VAR 0 3
71140: PUSH
71141: LD_EXP 112
71145: PUSH
71146: LD_VAR 0 1
71150: ARRAY
71151: PPUSH
71152: CALL_OW 255
71156: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71157: LD_ADDR_VAR 0 4
71161: PUSH
71162: LD_EXP 113
71166: PUSH
71167: LD_VAR 0 1
71171: ARRAY
71172: PUSH
71173: LD_VAR 0 2
71177: ARRAY
71178: PUSH
71179: LD_INT 1
71181: ARRAY
71182: PPUSH
71183: LD_EXP 113
71187: PUSH
71188: LD_VAR 0 1
71192: ARRAY
71193: PUSH
71194: LD_VAR 0 2
71198: ARRAY
71199: PUSH
71200: LD_INT 2
71202: ARRAY
71203: PPUSH
71204: CALL_OW 428
71208: ST_TO_ADDR
// if not tmp then
71209: LD_VAR 0 4
71213: NOT
71214: IFFALSE 71218
// continue ;
71216: GO 71133
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71218: LD_VAR 0 4
71222: PUSH
71223: LD_INT 81
71225: PUSH
71226: LD_VAR 0 3
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PPUSH
71235: CALL_OW 69
71239: IN
71240: PUSH
71241: LD_EXP 113
71245: PUSH
71246: LD_VAR 0 1
71250: ARRAY
71251: PUSH
71252: LD_VAR 0 2
71256: ARRAY
71257: PUSH
71258: LD_INT 1
71260: ARRAY
71261: PPUSH
71262: LD_EXP 113
71266: PUSH
71267: LD_VAR 0 1
71271: ARRAY
71272: PUSH
71273: LD_VAR 0 2
71277: ARRAY
71278: PUSH
71279: LD_INT 2
71281: ARRAY
71282: PPUSH
71283: CALL_OW 458
71287: AND
71288: IFFALSE 71382
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71290: LD_EXP 113
71294: PUSH
71295: LD_VAR 0 1
71299: ARRAY
71300: PUSH
71301: LD_VAR 0 2
71305: ARRAY
71306: PUSH
71307: LD_INT 1
71309: ARRAY
71310: PPUSH
71311: LD_EXP 113
71315: PUSH
71316: LD_VAR 0 1
71320: ARRAY
71321: PUSH
71322: LD_VAR 0 2
71326: ARRAY
71327: PUSH
71328: LD_INT 2
71330: ARRAY
71331: PPUSH
71332: LD_VAR 0 3
71336: PPUSH
71337: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71341: LD_ADDR_EXP 113
71345: PUSH
71346: LD_EXP 113
71350: PPUSH
71351: LD_VAR 0 1
71355: PPUSH
71356: LD_EXP 113
71360: PUSH
71361: LD_VAR 0 1
71365: ARRAY
71366: PPUSH
71367: LD_VAR 0 2
71371: PPUSH
71372: CALL_OW 3
71376: PPUSH
71377: CALL_OW 1
71381: ST_TO_ADDR
// end ; end ;
71382: GO 71133
71384: POP
71385: POP
// end ;
71386: GO 71051
71388: POP
71389: POP
// end ;
71390: PPOPN 4
71392: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71393: LD_INT 0
71395: PPUSH
71396: PPUSH
// result := false ;
71397: LD_ADDR_VAR 0 4
71401: PUSH
71402: LD_INT 0
71404: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71405: LD_VAR 0 1
71409: PPUSH
71410: CALL_OW 264
71414: PUSH
71415: LD_INT 81
71417: EQUAL
71418: NOT
71419: IFFALSE 71423
// exit ;
71421: GO 71663
// index := GetElementIndex ( minersList , unit ) ;
71423: LD_ADDR_VAR 0 5
71427: PUSH
71428: LD_EXP 112
71432: PPUSH
71433: LD_VAR 0 1
71437: PPUSH
71438: CALL 13643 0 2
71442: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71443: LD_EXP 113
71447: PUSH
71448: LD_VAR 0 5
71452: ARRAY
71453: PUSH
71454: LD_EXP 114
71458: GREATEREQUAL
71459: IFFALSE 71463
// exit ;
71461: GO 71663
// ComMoveXY ( unit , x , y ) ;
71463: LD_VAR 0 1
71467: PPUSH
71468: LD_VAR 0 2
71472: PPUSH
71473: LD_VAR 0 3
71477: PPUSH
71478: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71482: LD_INT 35
71484: PPUSH
71485: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71489: LD_VAR 0 1
71493: PPUSH
71494: LD_VAR 0 2
71498: PPUSH
71499: LD_VAR 0 3
71503: PPUSH
71504: CALL 45384 0 3
71508: NOT
71509: PUSH
71510: LD_VAR 0 1
71514: PPUSH
71515: CALL_OW 314
71519: AND
71520: IFFALSE 71524
// exit ;
71522: GO 71663
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71524: LD_VAR 0 2
71528: PPUSH
71529: LD_VAR 0 3
71533: PPUSH
71534: CALL_OW 428
71538: PUSH
71539: LD_VAR 0 1
71543: EQUAL
71544: PUSH
71545: LD_VAR 0 1
71549: PPUSH
71550: CALL_OW 314
71554: NOT
71555: AND
71556: IFFALSE 71482
// PlaySoundXY ( x , y , PlantMine ) ;
71558: LD_VAR 0 2
71562: PPUSH
71563: LD_VAR 0 3
71567: PPUSH
71568: LD_STRING PlantMine
71570: PPUSH
71571: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71575: LD_VAR 0 2
71579: PPUSH
71580: LD_VAR 0 3
71584: PPUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: CALL_OW 255
71594: PPUSH
71595: LD_INT 0
71597: PPUSH
71598: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71602: LD_ADDR_EXP 113
71606: PUSH
71607: LD_EXP 113
71611: PPUSH
71612: LD_VAR 0 5
71616: PUSH
71617: LD_EXP 113
71621: PUSH
71622: LD_VAR 0 5
71626: ARRAY
71627: PUSH
71628: LD_INT 1
71630: PLUS
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PPUSH
71636: LD_VAR 0 2
71640: PUSH
71641: LD_VAR 0 3
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PPUSH
71650: CALL 13858 0 3
71654: ST_TO_ADDR
// result := true ;
71655: LD_ADDR_VAR 0 4
71659: PUSH
71660: LD_INT 1
71662: ST_TO_ADDR
// end ;
71663: LD_VAR 0 4
71667: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71668: LD_INT 0
71670: PPUSH
71671: PPUSH
71672: PPUSH
// if not unit in minersList then
71673: LD_VAR 0 1
71677: PUSH
71678: LD_EXP 112
71682: IN
71683: NOT
71684: IFFALSE 71688
// exit ;
71686: GO 72080
// index := GetElementIndex ( minersList , unit ) ;
71688: LD_ADDR_VAR 0 6
71692: PUSH
71693: LD_EXP 112
71697: PPUSH
71698: LD_VAR 0 1
71702: PPUSH
71703: CALL 13643 0 2
71707: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71708: LD_ADDR_VAR 0 5
71712: PUSH
71713: DOUBLE
71714: LD_EXP 113
71718: PUSH
71719: LD_VAR 0 6
71723: ARRAY
71724: INC
71725: ST_TO_ADDR
71726: LD_INT 1
71728: PUSH
71729: FOR_DOWNTO
71730: IFFALSE 71891
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71732: LD_EXP 113
71736: PUSH
71737: LD_VAR 0 6
71741: ARRAY
71742: PUSH
71743: LD_VAR 0 5
71747: ARRAY
71748: PUSH
71749: LD_INT 1
71751: ARRAY
71752: PUSH
71753: LD_VAR 0 2
71757: EQUAL
71758: PUSH
71759: LD_EXP 113
71763: PUSH
71764: LD_VAR 0 6
71768: ARRAY
71769: PUSH
71770: LD_VAR 0 5
71774: ARRAY
71775: PUSH
71776: LD_INT 2
71778: ARRAY
71779: PUSH
71780: LD_VAR 0 3
71784: EQUAL
71785: AND
71786: IFFALSE 71889
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71788: LD_EXP 113
71792: PUSH
71793: LD_VAR 0 6
71797: ARRAY
71798: PUSH
71799: LD_VAR 0 5
71803: ARRAY
71804: PUSH
71805: LD_INT 1
71807: ARRAY
71808: PPUSH
71809: LD_EXP 113
71813: PUSH
71814: LD_VAR 0 6
71818: ARRAY
71819: PUSH
71820: LD_VAR 0 5
71824: ARRAY
71825: PUSH
71826: LD_INT 2
71828: ARRAY
71829: PPUSH
71830: LD_VAR 0 1
71834: PPUSH
71835: CALL_OW 255
71839: PPUSH
71840: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71844: LD_ADDR_EXP 113
71848: PUSH
71849: LD_EXP 113
71853: PPUSH
71854: LD_VAR 0 6
71858: PPUSH
71859: LD_EXP 113
71863: PUSH
71864: LD_VAR 0 6
71868: ARRAY
71869: PPUSH
71870: LD_VAR 0 5
71874: PPUSH
71875: CALL_OW 3
71879: PPUSH
71880: CALL_OW 1
71884: ST_TO_ADDR
// exit ;
71885: POP
71886: POP
71887: GO 72080
// end ; end ;
71889: GO 71729
71891: POP
71892: POP
// for i := minerMinesList [ index ] downto 1 do
71893: LD_ADDR_VAR 0 5
71897: PUSH
71898: DOUBLE
71899: LD_EXP 113
71903: PUSH
71904: LD_VAR 0 6
71908: ARRAY
71909: INC
71910: ST_TO_ADDR
71911: LD_INT 1
71913: PUSH
71914: FOR_DOWNTO
71915: IFFALSE 72078
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71917: LD_EXP 113
71921: PUSH
71922: LD_VAR 0 6
71926: ARRAY
71927: PUSH
71928: LD_VAR 0 5
71932: ARRAY
71933: PUSH
71934: LD_INT 1
71936: ARRAY
71937: PPUSH
71938: LD_EXP 113
71942: PUSH
71943: LD_VAR 0 6
71947: ARRAY
71948: PUSH
71949: LD_VAR 0 5
71953: ARRAY
71954: PUSH
71955: LD_INT 2
71957: ARRAY
71958: PPUSH
71959: LD_VAR 0 2
71963: PPUSH
71964: LD_VAR 0 3
71968: PPUSH
71969: CALL_OW 298
71973: PUSH
71974: LD_INT 6
71976: LESS
71977: IFFALSE 72076
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71979: LD_EXP 113
71983: PUSH
71984: LD_VAR 0 6
71988: ARRAY
71989: PUSH
71990: LD_VAR 0 5
71994: ARRAY
71995: PUSH
71996: LD_INT 1
71998: ARRAY
71999: PPUSH
72000: LD_EXP 113
72004: PUSH
72005: LD_VAR 0 6
72009: ARRAY
72010: PUSH
72011: LD_VAR 0 5
72015: ARRAY
72016: PUSH
72017: LD_INT 2
72019: ARRAY
72020: PPUSH
72021: LD_VAR 0 1
72025: PPUSH
72026: CALL_OW 255
72030: PPUSH
72031: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72035: LD_ADDR_EXP 113
72039: PUSH
72040: LD_EXP 113
72044: PPUSH
72045: LD_VAR 0 6
72049: PPUSH
72050: LD_EXP 113
72054: PUSH
72055: LD_VAR 0 6
72059: ARRAY
72060: PPUSH
72061: LD_VAR 0 5
72065: PPUSH
72066: CALL_OW 3
72070: PPUSH
72071: CALL_OW 1
72075: ST_TO_ADDR
// end ; end ;
72076: GO 71914
72078: POP
72079: POP
// end ;
72080: LD_VAR 0 4
72084: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
72085: LD_INT 0
72087: PPUSH
72088: PPUSH
72089: PPUSH
72090: PPUSH
72091: PPUSH
72092: PPUSH
72093: PPUSH
72094: PPUSH
72095: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72096: LD_VAR 0 1
72100: PPUSH
72101: CALL_OW 264
72105: PUSH
72106: LD_INT 81
72108: EQUAL
72109: NOT
72110: PUSH
72111: LD_VAR 0 1
72115: PUSH
72116: LD_EXP 112
72120: IN
72121: NOT
72122: OR
72123: IFFALSE 72127
// exit ;
72125: GO 72449
// index := GetElementIndex ( minersList , unit ) ;
72127: LD_ADDR_VAR 0 6
72131: PUSH
72132: LD_EXP 112
72136: PPUSH
72137: LD_VAR 0 1
72141: PPUSH
72142: CALL 13643 0 2
72146: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72147: LD_ADDR_VAR 0 8
72151: PUSH
72152: LD_EXP 114
72156: PUSH
72157: LD_EXP 113
72161: PUSH
72162: LD_VAR 0 6
72166: ARRAY
72167: MINUS
72168: ST_TO_ADDR
// if not minesFreeAmount then
72169: LD_VAR 0 8
72173: NOT
72174: IFFALSE 72178
// exit ;
72176: GO 72449
// tmp := [ ] ;
72178: LD_ADDR_VAR 0 7
72182: PUSH
72183: EMPTY
72184: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72185: LD_ADDR_VAR 0 5
72189: PUSH
72190: DOUBLE
72191: LD_INT 1
72193: DEC
72194: ST_TO_ADDR
72195: LD_VAR 0 8
72199: PUSH
72200: FOR_TO
72201: IFFALSE 72396
// begin _d := rand ( 0 , 5 ) ;
72203: LD_ADDR_VAR 0 11
72207: PUSH
72208: LD_INT 0
72210: PPUSH
72211: LD_INT 5
72213: PPUSH
72214: CALL_OW 12
72218: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72219: LD_ADDR_VAR 0 12
72223: PUSH
72224: LD_INT 2
72226: PPUSH
72227: LD_INT 6
72229: PPUSH
72230: CALL_OW 12
72234: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72235: LD_ADDR_VAR 0 9
72239: PUSH
72240: LD_VAR 0 2
72244: PPUSH
72245: LD_VAR 0 11
72249: PPUSH
72250: LD_VAR 0 12
72254: PPUSH
72255: CALL_OW 272
72259: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72260: LD_ADDR_VAR 0 10
72264: PUSH
72265: LD_VAR 0 3
72269: PPUSH
72270: LD_VAR 0 11
72274: PPUSH
72275: LD_VAR 0 12
72279: PPUSH
72280: CALL_OW 273
72284: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72285: LD_VAR 0 9
72289: PPUSH
72290: LD_VAR 0 10
72294: PPUSH
72295: CALL_OW 488
72299: PUSH
72300: LD_VAR 0 9
72304: PUSH
72305: LD_VAR 0 10
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_VAR 0 7
72318: IN
72319: NOT
72320: AND
72321: PUSH
72322: LD_VAR 0 9
72326: PPUSH
72327: LD_VAR 0 10
72331: PPUSH
72332: CALL_OW 458
72336: NOT
72337: AND
72338: IFFALSE 72380
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72340: LD_ADDR_VAR 0 7
72344: PUSH
72345: LD_VAR 0 7
72349: PPUSH
72350: LD_VAR 0 7
72354: PUSH
72355: LD_INT 1
72357: PLUS
72358: PPUSH
72359: LD_VAR 0 9
72363: PUSH
72364: LD_VAR 0 10
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PPUSH
72373: CALL_OW 1
72377: ST_TO_ADDR
72378: GO 72394
// i := i - 1 ;
72380: LD_ADDR_VAR 0 5
72384: PUSH
72385: LD_VAR 0 5
72389: PUSH
72390: LD_INT 1
72392: MINUS
72393: ST_TO_ADDR
// end ;
72394: GO 72200
72396: POP
72397: POP
// for i in tmp do
72398: LD_ADDR_VAR 0 5
72402: PUSH
72403: LD_VAR 0 7
72407: PUSH
72408: FOR_IN
72409: IFFALSE 72447
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72411: LD_VAR 0 1
72415: PPUSH
72416: LD_VAR 0 5
72420: PUSH
72421: LD_INT 1
72423: ARRAY
72424: PPUSH
72425: LD_VAR 0 5
72429: PUSH
72430: LD_INT 2
72432: ARRAY
72433: PPUSH
72434: CALL 71393 0 3
72438: NOT
72439: IFFALSE 72445
// exit ;
72441: POP
72442: POP
72443: GO 72449
72445: GO 72408
72447: POP
72448: POP
// end ;
72449: LD_VAR 0 4
72453: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
72454: LD_INT 0
72456: PPUSH
72457: PPUSH
72458: PPUSH
72459: PPUSH
72460: PPUSH
72461: PPUSH
72462: PPUSH
72463: PPUSH
72464: PPUSH
// if GetClass ( unit ) <> class_sniper then
72465: LD_VAR 0 1
72469: PPUSH
72470: CALL_OW 257
72474: PUSH
72475: LD_INT 5
72477: NONEQUAL
72478: IFFALSE 72482
// exit ;
72480: GO 72948
// dist := 8 ;
72482: LD_ADDR_VAR 0 5
72486: PUSH
72487: LD_INT 8
72489: ST_TO_ADDR
// viewRange := 12 ;
72490: LD_ADDR_VAR 0 8
72494: PUSH
72495: LD_INT 12
72497: ST_TO_ADDR
// side := GetSide ( unit ) ;
72498: LD_ADDR_VAR 0 6
72502: PUSH
72503: LD_VAR 0 1
72507: PPUSH
72508: CALL_OW 255
72512: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72513: LD_INT 61
72515: PPUSH
72516: LD_VAR 0 6
72520: PPUSH
72521: CALL_OW 321
72525: PUSH
72526: LD_INT 2
72528: EQUAL
72529: IFFALSE 72539
// viewRange := 16 ;
72531: LD_ADDR_VAR 0 8
72535: PUSH
72536: LD_INT 16
72538: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72539: LD_VAR 0 1
72543: PPUSH
72544: LD_VAR 0 2
72548: PPUSH
72549: LD_VAR 0 3
72553: PPUSH
72554: CALL_OW 297
72558: PUSH
72559: LD_VAR 0 5
72563: GREATER
72564: IFFALSE 72643
// begin ComMoveXY ( unit , x , y ) ;
72566: LD_VAR 0 1
72570: PPUSH
72571: LD_VAR 0 2
72575: PPUSH
72576: LD_VAR 0 3
72580: PPUSH
72581: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72585: LD_INT 35
72587: PPUSH
72588: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72592: LD_VAR 0 1
72596: PPUSH
72597: LD_VAR 0 2
72601: PPUSH
72602: LD_VAR 0 3
72606: PPUSH
72607: CALL 45384 0 3
72611: NOT
72612: IFFALSE 72616
// exit ;
72614: GO 72948
// until GetDistUnitXY ( unit , x , y ) < dist ;
72616: LD_VAR 0 1
72620: PPUSH
72621: LD_VAR 0 2
72625: PPUSH
72626: LD_VAR 0 3
72630: PPUSH
72631: CALL_OW 297
72635: PUSH
72636: LD_VAR 0 5
72640: LESS
72641: IFFALSE 72585
// end ; ComTurnXY ( unit , x , y ) ;
72643: LD_VAR 0 1
72647: PPUSH
72648: LD_VAR 0 2
72652: PPUSH
72653: LD_VAR 0 3
72657: PPUSH
72658: CALL_OW 118
// repeat if Multiplayer then
72662: LD_OWVAR 4
72666: IFFALSE 72677
// wait ( 35 ) else
72668: LD_INT 35
72670: PPUSH
72671: CALL_OW 67
72675: GO 72684
// wait ( 5 ) ;
72677: LD_INT 5
72679: PPUSH
72680: CALL_OW 67
// _d := GetDir ( unit ) ;
72684: LD_ADDR_VAR 0 11
72688: PUSH
72689: LD_VAR 0 1
72693: PPUSH
72694: CALL_OW 254
72698: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
72699: LD_ADDR_VAR 0 7
72703: PUSH
72704: LD_VAR 0 1
72708: PPUSH
72709: CALL_OW 250
72713: PPUSH
72714: LD_VAR 0 1
72718: PPUSH
72719: CALL_OW 251
72723: PPUSH
72724: LD_VAR 0 2
72728: PPUSH
72729: LD_VAR 0 3
72733: PPUSH
72734: CALL 47992 0 4
72738: ST_TO_ADDR
// until dir = _d ;
72739: LD_VAR 0 7
72743: PUSH
72744: LD_VAR 0 11
72748: EQUAL
72749: IFFALSE 72662
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
72751: LD_ADDR_VAR 0 9
72755: PUSH
72756: LD_VAR 0 1
72760: PPUSH
72761: CALL_OW 250
72765: PPUSH
72766: LD_VAR 0 7
72770: PPUSH
72771: LD_VAR 0 5
72775: PPUSH
72776: CALL_OW 272
72780: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
72781: LD_ADDR_VAR 0 10
72785: PUSH
72786: LD_VAR 0 1
72790: PPUSH
72791: CALL_OW 251
72795: PPUSH
72796: LD_VAR 0 7
72800: PPUSH
72801: LD_VAR 0 5
72805: PPUSH
72806: CALL_OW 273
72810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72811: LD_VAR 0 9
72815: PPUSH
72816: LD_VAR 0 10
72820: PPUSH
72821: CALL_OW 488
72825: NOT
72826: IFFALSE 72830
// exit ;
72828: GO 72948
// ComAnimCustom ( unit , 1 ) ;
72830: LD_VAR 0 1
72834: PPUSH
72835: LD_INT 1
72837: PPUSH
72838: CALL_OW 592
// p := 0 ;
72842: LD_ADDR_VAR 0 12
72846: PUSH
72847: LD_INT 0
72849: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72850: LD_VAR 0 9
72854: PPUSH
72855: LD_VAR 0 10
72859: PPUSH
72860: LD_VAR 0 6
72864: PPUSH
72865: LD_VAR 0 8
72869: PPUSH
72870: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
72874: LD_INT 35
72876: PPUSH
72877: CALL_OW 67
// p := Inc ( p ) ;
72881: LD_ADDR_VAR 0 12
72885: PUSH
72886: LD_VAR 0 12
72890: PPUSH
72891: CALL 47948 0 1
72895: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
72896: LD_VAR 0 12
72900: PUSH
72901: LD_INT 3
72903: EQUAL
72904: PUSH
72905: LD_VAR 0 1
72909: PPUSH
72910: CALL_OW 302
72914: NOT
72915: OR
72916: PUSH
72917: LD_VAR 0 1
72921: PPUSH
72922: CALL_OW 301
72926: OR
72927: IFFALSE 72874
// RemoveSeeing ( _x , _y , side ) ;
72929: LD_VAR 0 9
72933: PPUSH
72934: LD_VAR 0 10
72938: PPUSH
72939: LD_VAR 0 6
72943: PPUSH
72944: CALL_OW 331
// end ; end_of_file
72948: LD_VAR 0 4
72952: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
72953: LD_EXP 38
72957: IFFALSE 73298
72959: GO 72961
72961: DISABLE
72962: LD_INT 0
72964: PPUSH
72965: PPUSH
72966: PPUSH
// begin mpKingPoints := [ ] ;
72967: LD_ADDR_EXP 115
72971: PUSH
72972: EMPTY
72973: ST_TO_ADDR
// if mpTeamGame then
72974: LD_EXP 11
72978: IFFALSE 73032
// begin for i := 1 to Count ( mpTeams ) do
72980: LD_ADDR_VAR 0 1
72984: PUSH
72985: DOUBLE
72986: LD_INT 1
72988: DEC
72989: ST_TO_ADDR
72990: LD_EXP 10
72994: PPUSH
72995: CALL 10998 0 1
72999: PUSH
73000: FOR_TO
73001: IFFALSE 73028
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
73003: LD_ADDR_EXP 115
73007: PUSH
73008: LD_EXP 115
73012: PPUSH
73013: LD_VAR 0 1
73017: PPUSH
73018: LD_INT 0
73020: PPUSH
73021: CALL_OW 1
73025: ST_TO_ADDR
73026: GO 73000
73028: POP
73029: POP
// end else
73030: GO 73075
// begin for i := 1 to 8 do
73032: LD_ADDR_VAR 0 1
73036: PUSH
73037: DOUBLE
73038: LD_INT 1
73040: DEC
73041: ST_TO_ADDR
73042: LD_INT 8
73044: PUSH
73045: FOR_TO
73046: IFFALSE 73073
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
73048: LD_ADDR_EXP 115
73052: PUSH
73053: LD_EXP 115
73057: PPUSH
73058: LD_VAR 0 1
73062: PPUSH
73063: LD_INT 0
73065: PPUSH
73066: CALL_OW 1
73070: ST_TO_ADDR
73071: GO 73045
73073: POP
73074: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
73075: LD_ADDR_VAR 0 3
73079: PUSH
73080: LD_EXP 2
73084: PPUSH
73085: LD_INT 0
73087: PPUSH
73088: CALL_OW 517
73092: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73093: LD_ADDR_VAR 0 1
73097: PUSH
73098: DOUBLE
73099: LD_INT 1
73101: DEC
73102: ST_TO_ADDR
73103: LD_VAR 0 3
73107: PUSH
73108: LD_INT 1
73110: ARRAY
73111: PUSH
73112: FOR_TO
73113: IFFALSE 73180
// for j := 1 to 8 do
73115: LD_ADDR_VAR 0 2
73119: PUSH
73120: DOUBLE
73121: LD_INT 1
73123: DEC
73124: ST_TO_ADDR
73125: LD_INT 8
73127: PUSH
73128: FOR_TO
73129: IFFALSE 73176
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
73131: LD_VAR 0 3
73135: PUSH
73136: LD_INT 1
73138: ARRAY
73139: PUSH
73140: LD_VAR 0 1
73144: ARRAY
73145: PPUSH
73146: LD_VAR 0 3
73150: PUSH
73151: LD_INT 2
73153: ARRAY
73154: PUSH
73155: LD_VAR 0 1
73159: ARRAY
73160: PPUSH
73161: LD_VAR 0 2
73165: PPUSH
73166: LD_INT 12
73168: NEG
73169: PPUSH
73170: CALL_OW 330
73174: GO 73128
73176: POP
73177: POP
73178: GO 73112
73180: POP
73181: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
73182: LD_EXP 33
73186: PPUSH
73187: LD_INT 1
73189: PPUSH
73190: CALL_OW 424
// UpdateCounter ;
73194: CALL 73802 0 0
// repeat wait ( 0 0$1 ) ;
73198: LD_INT 35
73200: PPUSH
73201: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73205: LD_ADDR_VAR 0 3
73209: PUSH
73210: LD_EXP 33
73214: PPUSH
73215: LD_INT 3
73217: PUSH
73218: LD_INT 57
73220: PUSH
73221: EMPTY
73222: LIST
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 50
73230: PUSH
73231: EMPTY
73232: LIST
73233: PUSH
73234: LD_INT 2
73236: PUSH
73237: LD_INT 30
73239: PUSH
73240: LD_INT 0
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 30
73249: PUSH
73250: LD_INT 1
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: LIST
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: PPUSH
73267: CALL_OW 70
73271: ST_TO_ADDR
// if not tmp then
73272: LD_VAR 0 3
73276: NOT
73277: IFFALSE 73281
// continue ;
73279: GO 73198
// AddPoints ( tmp ) ;
73281: LD_VAR 0 3
73285: PPUSH
73286: CALL 73480 0 1
// UpdateCounter ;
73290: CALL 73802 0 0
// until false ;
73294: LD_INT 0
73296: IFFALSE 73198
// end ;
73298: PPOPN 3
73300: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
73301: LD_EXP 38
73305: PUSH
73306: LD_EXP 36
73310: AND
73311: IFFALSE 73477
73313: GO 73315
73315: DISABLE
73316: LD_INT 0
73318: PPUSH
73319: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
73320: LD_ADDR_VAR 0 2
73324: PUSH
73325: LD_EXP 2
73329: PPUSH
73330: LD_INT 0
73332: PPUSH
73333: CALL_OW 517
73337: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73338: LD_ADDR_VAR 0 1
73342: PUSH
73343: DOUBLE
73344: LD_INT 1
73346: DEC
73347: ST_TO_ADDR
73348: LD_VAR 0 2
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PUSH
73357: FOR_TO
73358: IFFALSE 73399
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
73360: LD_VAR 0 2
73364: PUSH
73365: LD_INT 1
73367: ARRAY
73368: PUSH
73369: LD_VAR 0 1
73373: ARRAY
73374: PPUSH
73375: LD_VAR 0 2
73379: PUSH
73380: LD_INT 2
73382: ARRAY
73383: PUSH
73384: LD_VAR 0 1
73388: ARRAY
73389: PPUSH
73390: LD_INT 125
73392: PPUSH
73393: CALL_OW 495
73397: GO 73357
73399: POP
73400: POP
// repeat wait ( mpEmissions ) ;
73401: LD_EXP 36
73405: PPUSH
73406: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
73410: LD_ADDR_VAR 0 1
73414: PUSH
73415: DOUBLE
73416: LD_INT 1
73418: DEC
73419: ST_TO_ADDR
73420: LD_VAR 0 2
73424: PUSH
73425: LD_INT 1
73427: ARRAY
73428: PUSH
73429: FOR_TO
73430: IFFALSE 73471
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
73432: LD_VAR 0 2
73436: PUSH
73437: LD_INT 1
73439: ARRAY
73440: PUSH
73441: LD_VAR 0 1
73445: ARRAY
73446: PPUSH
73447: LD_VAR 0 2
73451: PUSH
73452: LD_INT 2
73454: ARRAY
73455: PUSH
73456: LD_VAR 0 1
73460: ARRAY
73461: PPUSH
73462: LD_INT 15
73464: PPUSH
73465: CALL_OW 495
73469: GO 73429
73471: POP
73472: POP
// until false ;
73473: LD_INT 0
73475: IFFALSE 73401
// end ;
73477: PPOPN 2
73479: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
73480: LD_INT 0
73482: PPUSH
73483: PPUSH
73484: PPUSH
73485: PPUSH
73486: PPUSH
// if mpTeamGame then
73487: LD_EXP 11
73491: IFFALSE 73688
// begin first := depots [ 1 ] ;
73493: LD_ADDR_VAR 0 4
73497: PUSH
73498: LD_VAR 0 1
73502: PUSH
73503: LD_INT 1
73505: ARRAY
73506: ST_TO_ADDR
// side := GetSide ( first ) ;
73507: LD_ADDR_VAR 0 6
73511: PUSH
73512: LD_VAR 0 4
73516: PPUSH
73517: CALL_OW 255
73521: ST_TO_ADDR
// for i := 1 to mpTeams do
73522: LD_ADDR_VAR 0 3
73526: PUSH
73527: DOUBLE
73528: LD_INT 1
73530: DEC
73531: ST_TO_ADDR
73532: LD_EXP 10
73536: PUSH
73537: FOR_TO
73538: IFFALSE 73572
// if side in mpTeams [ i ] then
73540: LD_VAR 0 6
73544: PUSH
73545: LD_EXP 10
73549: PUSH
73550: LD_VAR 0 3
73554: ARRAY
73555: IN
73556: IFFALSE 73570
// begin team := i ;
73558: LD_ADDR_VAR 0 5
73562: PUSH
73563: LD_VAR 0 3
73567: ST_TO_ADDR
// break ;
73568: GO 73572
// end ;
73570: GO 73537
73572: POP
73573: POP
// if not team then
73574: LD_VAR 0 5
73578: NOT
73579: IFFALSE 73583
// exit ;
73581: GO 73797
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73583: LD_EXP 33
73587: PPUSH
73588: LD_INT 81
73590: PUSH
73591: LD_VAR 0 6
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PPUSH
73600: CALL_OW 70
73604: IFFALSE 73608
// exit ;
73606: GO 73797
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
73608: LD_ADDR_EXP 115
73612: PUSH
73613: LD_EXP 115
73617: PPUSH
73618: LD_VAR 0 5
73622: PPUSH
73623: LD_EXP 115
73627: PUSH
73628: LD_VAR 0 5
73632: ARRAY
73633: PUSH
73634: LD_INT 1
73636: PLUS
73637: PPUSH
73638: CALL_OW 1
73642: ST_TO_ADDR
// for i in mpTeams [ team ] do
73643: LD_ADDR_VAR 0 3
73647: PUSH
73648: LD_EXP 10
73652: PUSH
73653: LD_VAR 0 5
73657: ARRAY
73658: PUSH
73659: FOR_IN
73660: IFFALSE 73684
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
73662: LD_VAR 0 3
73666: PPUSH
73667: LD_EXP 115
73671: PUSH
73672: LD_VAR 0 5
73676: ARRAY
73677: PPUSH
73678: CALL_OW 506
73682: GO 73659
73684: POP
73685: POP
// end else
73686: GO 73797
// begin first := depots [ 1 ] ;
73688: LD_ADDR_VAR 0 4
73692: PUSH
73693: LD_VAR 0 1
73697: PUSH
73698: LD_INT 1
73700: ARRAY
73701: ST_TO_ADDR
// side := GetSide ( first ) ;
73702: LD_ADDR_VAR 0 6
73706: PUSH
73707: LD_VAR 0 4
73711: PPUSH
73712: CALL_OW 255
73716: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73717: LD_EXP 33
73721: PPUSH
73722: LD_INT 81
73724: PUSH
73725: LD_VAR 0 6
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PPUSH
73734: CALL_OW 70
73738: IFFALSE 73742
// exit ;
73740: GO 73797
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
73742: LD_ADDR_EXP 115
73746: PUSH
73747: LD_EXP 115
73751: PPUSH
73752: LD_VAR 0 6
73756: PPUSH
73757: LD_EXP 115
73761: PUSH
73762: LD_VAR 0 6
73766: ARRAY
73767: PUSH
73768: LD_INT 1
73770: PLUS
73771: PPUSH
73772: CALL_OW 1
73776: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
73777: LD_VAR 0 6
73781: PPUSH
73782: LD_EXP 115
73786: PUSH
73787: LD_VAR 0 6
73791: ARRAY
73792: PPUSH
73793: CALL_OW 506
// end ; end ;
73797: LD_VAR 0 2
73801: RET
// function UpdateCounter ; var i ; begin
73802: LD_INT 0
73804: PPUSH
73805: PPUSH
// result := [ ] ;
73806: LD_ADDR_VAR 0 1
73810: PUSH
73811: EMPTY
73812: ST_TO_ADDR
// if mpTeamGame then
73813: LD_EXP 11
73817: IFFALSE 73884
// begin for i := 1 to mpTeams do
73819: LD_ADDR_VAR 0 2
73823: PUSH
73824: DOUBLE
73825: LD_INT 1
73827: DEC
73828: ST_TO_ADDR
73829: LD_EXP 10
73833: PUSH
73834: FOR_TO
73835: IFFALSE 73880
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
73837: LD_ADDR_VAR 0 1
73841: PUSH
73842: LD_VAR 0 1
73846: PUSH
73847: LD_STRING #KingoftheHill-Team
73849: PUSH
73850: LD_VAR 0 2
73854: PUSH
73855: LD_EXP 115
73859: PUSH
73860: LD_VAR 0 2
73864: ARRAY
73865: PUSH
73866: LD_EXP 34
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: ADD
73877: ST_TO_ADDR
73878: GO 73834
73880: POP
73881: POP
// end else
73882: GO 73957
// begin for i := 1 to 8 do
73884: LD_ADDR_VAR 0 2
73888: PUSH
73889: DOUBLE
73890: LD_INT 1
73892: DEC
73893: ST_TO_ADDR
73894: LD_INT 8
73896: PUSH
73897: FOR_TO
73898: IFFALSE 73955
// if mpSidePositions [ i ] then
73900: LD_EXP 7
73904: PUSH
73905: LD_VAR 0 2
73909: ARRAY
73910: IFFALSE 73953
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
73912: LD_ADDR_VAR 0 1
73916: PUSH
73917: LD_VAR 0 1
73921: PUSH
73922: LD_STRING #KingoftheHill-Player
73924: PUSH
73925: LD_VAR 0 2
73929: PUSH
73930: LD_EXP 115
73934: PUSH
73935: LD_VAR 0 2
73939: ARRAY
73940: PUSH
73941: LD_EXP 34
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: ADD
73952: ST_TO_ADDR
73953: GO 73897
73955: POP
73956: POP
// end ; mpDisplayStrings := result ;
73957: LD_ADDR_EXP 37
73961: PUSH
73962: LD_VAR 0 1
73966: ST_TO_ADDR
// end ;
73967: LD_VAR 0 1
73971: RET
// export function HowMuchPointsKing ( side ) ; begin
73972: LD_INT 0
73974: PPUSH
// result := HowMuchPoints ( side ) ;
73975: LD_ADDR_VAR 0 2
73979: PUSH
73980: LD_VAR 0 1
73984: PPUSH
73985: CALL 73995 0 1
73989: ST_TO_ADDR
// end ;
73990: LD_VAR 0 2
73994: RET
// function HowMuchPoints ( side ) ; var i ; begin
73995: LD_INT 0
73997: PPUSH
73998: PPUSH
// if mpTeamGame then
73999: LD_EXP 11
74003: IFFALSE 74072
// begin for i := 1 to Count ( mpTeams ) do
74005: LD_ADDR_VAR 0 3
74009: PUSH
74010: DOUBLE
74011: LD_INT 1
74013: DEC
74014: ST_TO_ADDR
74015: LD_EXP 10
74019: PPUSH
74020: CALL 10998 0 1
74024: PUSH
74025: FOR_TO
74026: IFFALSE 74068
// begin if side in mpTeams [ i ] then
74028: LD_VAR 0 1
74032: PUSH
74033: LD_EXP 10
74037: PUSH
74038: LD_VAR 0 3
74042: ARRAY
74043: IN
74044: IFFALSE 74066
// begin result := mpKingPoints [ i ] ;
74046: LD_ADDR_VAR 0 2
74050: PUSH
74051: LD_EXP 115
74055: PUSH
74056: LD_VAR 0 3
74060: ARRAY
74061: ST_TO_ADDR
// exit ;
74062: POP
74063: POP
74064: GO 74088
// end ; end ;
74066: GO 74025
74068: POP
74069: POP
// end else
74070: GO 74088
// result := mpKingPoints [ side ] ;
74072: LD_ADDR_VAR 0 2
74076: PUSH
74077: LD_EXP 115
74081: PUSH
74082: LD_VAR 0 1
74086: ARRAY
74087: ST_TO_ADDR
// end ;
74088: LD_VAR 0 2
74092: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
74093: LD_EXP 38
74097: PUSH
74098: CALL 74420 0 0
74102: AND
74103: PUSH
74104: LD_OWVAR 4
74108: AND
74109: IFFALSE 74345
74111: GO 74113
74113: DISABLE
74114: LD_INT 0
74116: PPUSH
74117: PPUSH
// begin canWin := false ;
74118: LD_ADDR_VAR 0 2
74122: PUSH
74123: LD_INT 0
74125: ST_TO_ADDR
// if not HasPower ( your_side ) then
74126: LD_OWVAR 2
74130: PPUSH
74131: CALL 74460 0 1
74135: NOT
74136: IFFALSE 74147
// begin Multiplayer_Loose_Message ;
74138: CALL_OW 521
// enable ( mpLose ) ;
74142: LD_INT 102
74144: ENABLE_MARKED
// end else
74145: GO 74345
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
74147: LD_ADDR_VAR 0 2
74151: PUSH
74152: LD_OWVAR 2
74156: PPUSH
74157: CALL 73995 0 1
74161: PUSH
74162: LD_EXP 34
74166: GREATEREQUAL
74167: PUSH
74168: LD_OWVAR 2
74172: PPUSH
74173: CALL 74460 0 1
74177: AND
74178: PUSH
74179: CALL 74348 0 0
74183: NOT
74184: OR
74185: ST_TO_ADDR
// for i := 1 to 8 do
74186: LD_ADDR_VAR 0 1
74190: PUSH
74191: DOUBLE
74192: LD_INT 1
74194: DEC
74195: ST_TO_ADDR
74196: LD_INT 8
74198: PUSH
74199: FOR_TO
74200: IFFALSE 74331
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
74202: LD_EXP 7
74206: PUSH
74207: LD_VAR 0 1
74211: ARRAY
74212: PUSH
74213: LD_VAR 0 1
74217: PPUSH
74218: CALL_OW 108
74222: AND
74223: PUSH
74224: LD_VAR 0 1
74228: PUSH
74229: LD_OWVAR 2
74233: NONEQUAL
74234: AND
74235: IFFALSE 74329
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
74237: LD_EXP 8
74241: PUSH
74242: LD_VAR 0 1
74246: ARRAY
74247: NOT
74248: PUSH
74249: LD_EXP 8
74253: PUSH
74254: LD_VAR 0 1
74258: ARRAY
74259: PUSH
74260: LD_EXP 8
74264: PUSH
74265: LD_OWVAR 2
74269: ARRAY
74270: NONEQUAL
74271: PUSH
74272: LD_OWVAR 2
74276: PPUSH
74277: LD_VAR 0 1
74281: PPUSH
74282: CALL_OW 81
74286: PUSH
74287: LD_INT 1
74289: NONEQUAL
74290: AND
74291: OR
74292: IFFALSE 74329
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
74294: LD_VAR 0 1
74298: PPUSH
74299: CALL 73995 0 1
74303: PUSH
74304: LD_EXP 34
74308: GREATEREQUAL
74309: PUSH
74310: LD_VAR 0 1
74314: PPUSH
74315: CALL 74460 0 1
74319: AND
74320: IFFALSE 74329
// begin enable ( mpLose ) ;
74322: LD_INT 102
74324: ENABLE_MARKED
// exit ;
74325: POP
74326: POP
74327: GO 74345
// end ;
74329: GO 74199
74331: POP
74332: POP
// if canWin then
74333: LD_VAR 0 2
74337: IFFALSE 74344
// enable ( mpWin ) else
74339: LD_INT 101
74341: ENABLE_MARKED
74342: GO 74345
// enable ;
74344: ENABLE
// end ; end ;
74345: PPOPN 2
74347: END
// function EnemiesInGame ; var i ; begin
74348: LD_INT 0
74350: PPUSH
74351: PPUSH
// result := false ;
74352: LD_ADDR_VAR 0 1
74356: PUSH
74357: LD_INT 0
74359: ST_TO_ADDR
// for i := 1 to 8 do
74360: LD_ADDR_VAR 0 2
74364: PUSH
74365: DOUBLE
74366: LD_INT 1
74368: DEC
74369: ST_TO_ADDR
74370: LD_INT 8
74372: PUSH
74373: FOR_TO
74374: IFFALSE 74413
// if i <> your_side and HasPower ( i ) then
74376: LD_VAR 0 2
74380: PUSH
74381: LD_OWVAR 2
74385: NONEQUAL
74386: PUSH
74387: LD_VAR 0 2
74391: PPUSH
74392: CALL 74460 0 1
74396: AND
74397: IFFALSE 74411
// begin result := true ;
74399: LD_ADDR_VAR 0 1
74403: PUSH
74404: LD_INT 1
74406: ST_TO_ADDR
// exit ;
74407: POP
74408: POP
74409: GO 74415
// end ;
74411: GO 74373
74413: POP
74414: POP
// end ;
74415: LD_VAR 0 1
74419: RET
// function CanWinLoose ; begin
74420: LD_INT 0
74422: PPUSH
// result := true ;
74423: LD_ADDR_VAR 0 1
74427: PUSH
74428: LD_INT 1
74430: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
74431: CALL_OW 531
74435: PUSH
74436: CALL_OW 519
74440: PUSH
74441: LD_INT 1
74443: GREATER
74444: AND
74445: IFFALSE 74455
// result := false ;
74447: LD_ADDR_VAR 0 1
74451: PUSH
74452: LD_INT 0
74454: ST_TO_ADDR
// end ;
74455: LD_VAR 0 1
74459: RET
// function HasPower ( i ) ; begin
74460: LD_INT 0
74462: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
74463: LD_ADDR_VAR 0 2
74467: PUSH
74468: LD_INT 22
74470: PUSH
74471: LD_VAR 0 1
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 2
74482: PUSH
74483: LD_INT 21
74485: PUSH
74486: LD_INT 1
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PUSH
74493: LD_INT 33
74495: PUSH
74496: LD_INT 3
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 33
74505: PUSH
74506: LD_INT 5
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PPUSH
74523: CALL_OW 69
74527: ST_TO_ADDR
// end ;
74528: LD_VAR 0 2
74532: RET
