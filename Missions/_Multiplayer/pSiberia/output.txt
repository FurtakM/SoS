// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2746 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3061 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 34
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 36
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 35
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 32
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 51387 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 51387 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 51387 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 51387 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 51387 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 51387 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 11239 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 51220 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 51220 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 51220 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 51220 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 51220 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 51220 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 51220 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 51220 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 51220 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 51220 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 51220 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 51220 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 51387 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 51387 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 51387 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 51387 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 51387 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 51387 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 51387 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 51387 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 51387 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 51387 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 51387 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 51387 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 51387 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 51387 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 51387 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 51387 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 51387 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 51387 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 48209 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 52095 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 7583 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 52112 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 8186 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 52153 0 2
2721: PPOPN 2
2723: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 8239 0 3
2743: PPOPN 3
2745: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
// disable ( mpActive ) ;
2750: LD_INT 100
2752: DISABLE_MARKED
// disable ( mpWin ) ;
2753: LD_INT 101
2755: DISABLE_MARKED
// disable ( mpLose ) ;
2756: LD_INT 102
2758: DISABLE_MARKED
// mpGameType := 0 ;
2759: LD_ADDR_EXP 3
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// mpGameSettings := [ ] ;
2767: LD_ADDR_EXP 6
2771: PUSH
2772: EMPTY
2773: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2774: LD_ADDR_EXP 4
2778: PUSH
2779: EMPTY
2780: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2781: LD_ADDR_EXP 5
2785: PUSH
2786: EMPTY
2787: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2788: LD_ADDR_EXP 29
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2803: LD_ADDR_EXP 12
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2810: LD_ADDR_EXP 13
2814: PUSH
2815: EMPTY
2816: ST_TO_ADDR
// mpDepots := [ ] ;
2817: LD_ADDR_EXP 14
2821: PUSH
2822: EMPTY
2823: ST_TO_ADDR
// mpBuildings := [ ] ;
2824: LD_ADDR_EXP 17
2828: PUSH
2829: EMPTY
2830: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2831: LD_ADDR_EXP 18
2835: PUSH
2836: EMPTY
2837: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2838: LD_ADDR_EXP 19
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2845: LD_ADDR_EXP 20
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpStartingResources := [ ] ;
2852: LD_ADDR_EXP 15
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// mpStartPos := [ ] ;
2859: LD_ADDR_EXP 21
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2866: LD_ADDR_EXP 22
2870: PUSH
2871: LD_INT 1
2873: NEG
2874: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2875: LD_ADDR_EXP 23
2879: PUSH
2880: EMPTY
2881: ST_TO_ADDR
// mpApemans := [ ] ;
2882: LD_ADDR_EXP 30
2886: PUSH
2887: EMPTY
2888: ST_TO_ADDR
// mpApemansArea := [ ] ;
2889: LD_ADDR_EXP 31
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpRespawn := [ ] ;
2896: LD_ADDR_EXP 32
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpKingArea := 0 ;
2903: LD_ADDR_EXP 33
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// mpPoints := [ ] ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: EMPTY
2917: ST_TO_ADDR
// mpVehicles := 0 ;
2918: LD_ADDR_EXP 35
2922: PUSH
2923: LD_INT 0
2925: ST_TO_ADDR
// mpShipments := 0 ;
2926: LD_ADDR_EXP 27
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2934: LD_ADDR_EXP 39
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: ST_TO_ADDR
// mpEmissions := 0 ;
2965: LD_ADDR_EXP 36
2969: PUSH
2970: LD_INT 0
2972: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2973: LD_ADDR_EXP 25
2977: PUSH
2978: LD_INT 3
2980: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2981: LD_ADDR_EXP 24
2985: PUSH
2986: LD_INT 15
2988: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2989: LD_ADDR_EXP 37
2993: PUSH
2994: LD_INT 0
2996: ST_TO_ADDR
// mpGameActive := false ;
2997: LD_ADDR_EXP 38
3001: PUSH
3002: LD_INT 0
3004: ST_TO_ADDR
// mpBlockRespThread := false ;
3005: LD_ADDR_EXP 40
3009: PUSH
3010: LD_INT 0
3012: ST_TO_ADDR
// for i := 1 to 32 do
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: DOUBLE
3019: LD_INT 1
3021: DEC
3022: ST_TO_ADDR
3023: LD_INT 32
3025: PUSH
3026: FOR_TO
3027: IFFALSE 3054
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3029: LD_ADDR_EXP 6
3033: PUSH
3034: LD_EXP 6
3038: PPUSH
3039: LD_VAR 0 2
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 1
3051: ST_TO_ADDR
3052: GO 3026
3054: POP
3055: POP
// end ;
3056: LD_VAR 0 1
3060: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3061: LD_INT 0
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3077: LD_ADDR_VAR 0 14
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: LD_INT 2
3087: PUSH
3088: LD_INT 3
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: ST_TO_ADDR
// for i in gameTypes do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_VAR 0 14
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3116
// disable ( i ) ;
3109: LD_VAR 0 2
3113: DISABLE_MARKED
3114: GO 3106
3116: POP
3117: POP
// if Multiplayer then
3118: LD_OWVAR 4
3122: IFFALSE 3306
// begin mpGameType := mp_game_type ;
3124: LD_ADDR_EXP 3
3128: PUSH
3129: LD_OWVAR 6
3133: ST_TO_ADDR
// your_side := mp_player_side ;
3134: LD_ADDR_OWVAR 2
3138: PUSH
3139: LD_OWVAR 7
3143: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_OWVAR 17
3153: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3154: LD_ADDR_EXP 8
3158: PUSH
3159: LD_OWVAR 15
3163: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3164: LD_ADDR_EXP 9
3168: PUSH
3169: LD_OWVAR 16
3173: ST_TO_ADDR
// mpTeams := mp_teams ;
3174: LD_ADDR_EXP 10
3178: PUSH
3179: LD_OWVAR 12
3183: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3184: LD_ADDR_VAR 0 2
3188: PUSH
3189: DOUBLE
3190: LD_INT 1
3192: DEC
3193: ST_TO_ADDR
3194: LD_EXP 4
3198: PPUSH
3199: CALL 11239 0 1
3203: PUSH
3204: FOR_TO
3205: IFFALSE 3281
// begin setting := mpGameSettingsKeys [ i ] ;
3207: LD_ADDR_VAR 0 12
3211: PUSH
3212: LD_EXP 4
3216: PUSH
3217: LD_VAR 0 2
3221: ARRAY
3222: ST_TO_ADDR
// if setting then
3223: LD_VAR 0 12
3227: IFFALSE 3279
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3229: LD_ADDR_EXP 6
3233: PUSH
3234: LD_EXP 6
3238: PPUSH
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_EXP 5
3248: PUSH
3249: LD_VAR 0 2
3253: ARRAY
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: MINUS
3263: PPUSH
3264: CALL_OW 426
3268: PUSH
3269: LD_INT 1
3271: PLUS
3272: ARRAY
3273: PPUSH
3274: CALL_OW 1
3278: ST_TO_ADDR
// end ;
3279: GO 3204
3281: POP
3282: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3283: LD_ADDR_EXP 11
3287: PUSH
3288: LD_EXP 8
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: EMPTY
3297: LIST
3298: DIFF
3299: PUSH
3300: LD_INT 1
3302: GREATER
3303: ST_TO_ADDR
// end else
3304: GO 3306
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3306: LD_EXP 3
3310: PPUSH
3311: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3315: LD_EXP 18
3319: PPUSH
3320: CALL 11239 0 1
3324: IFFALSE 3355
// begin for i in mpMarkedAreas do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_EXP 18
3335: PUSH
3336: FOR_IN
3337: IFFALSE 3353
// SetAreaMapShow ( i , 0 ) ;
3339: LD_VAR 0 2
3343: PPUSH
3344: LD_INT 0
3346: PPUSH
3347: CALL_OW 424
3351: GO 3336
3353: POP
3354: POP
// end ; for i := 1 to 8 do
3355: LD_ADDR_VAR 0 2
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_INT 8
3367: PUSH
3368: FOR_TO
3369: IFFALSE 4585
// begin if not mpSidePositions [ i ] then
3371: LD_EXP 7
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: NOT
3382: IFFALSE 3386
// continue ;
3384: GO 3368
// side := i ;
3386: LD_ADDR_VAR 0 7
3390: PUSH
3391: LD_VAR 0 2
3395: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3396: LD_ADDR_VAR 0 9
3400: PUSH
3401: LD_EXP 9
3405: PUSH
3406: LD_VAR 0 2
3410: ARRAY
3411: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3412: LD_ADDR_VAR 0 8
3416: PUSH
3417: LD_EXP 7
3421: PUSH
3422: LD_VAR 0 2
3426: ARRAY
3427: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3428: LD_EXP 12
3432: PPUSH
3433: CALL 11239 0 1
3437: IFFALSE 3514
// begin for j in mpOilDeposits [ pos ] do
3439: LD_ADDR_VAR 0 3
3443: PUSH
3444: LD_EXP 12
3448: PUSH
3449: LD_VAR 0 8
3453: ARRAY
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3512
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3458: LD_VAR 0 3
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: LD_VAR 0 3
3471: PUSH
3472: LD_INT 2
3474: ARRAY
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3483: LD_VAR 0 3
3487: PUSH
3488: LD_INT 1
3490: ARRAY
3491: PPUSH
3492: LD_VAR 0 3
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: PPUSH
3501: LD_VAR 0 7
3505: PPUSH
3506: CALL_OW 441
// end ;
3510: GO 3455
3512: POP
3513: POP
// end ; if Count ( mpSibDeposits ) then
3514: LD_EXP 13
3518: PPUSH
3519: CALL 11239 0 1
3523: IFFALSE 3600
// begin for j in mpSibDeposits [ pos ] do
3525: LD_ADDR_VAR 0 3
3529: PUSH
3530: LD_EXP 13
3534: PUSH
3535: LD_VAR 0 8
3539: ARRAY
3540: PUSH
3541: FOR_IN
3542: IFFALSE 3598
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3544: LD_VAR 0 3
3548: PUSH
3549: LD_INT 1
3551: ARRAY
3552: PPUSH
3553: LD_VAR 0 3
3557: PUSH
3558: LD_INT 2
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PPUSH
3565: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3569: LD_VAR 0 3
3573: PUSH
3574: LD_INT 1
3576: ARRAY
3577: PPUSH
3578: LD_VAR 0 3
3582: PUSH
3583: LD_INT 2
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PPUSH
3592: CALL_OW 441
// end ;
3596: GO 3541
3598: POP
3599: POP
// end ; InitBc ;
3600: CALL_OW 21
// InitUc ;
3604: CALL_OW 18
// uc_side := side ;
3608: LD_ADDR_OWVAR 20
3612: PUSH
3613: LD_VAR 0 7
3617: ST_TO_ADDR
// uc_nation := nation ;
3618: LD_ADDR_OWVAR 21
3622: PUSH
3623: LD_VAR 0 9
3627: ST_TO_ADDR
// if Count ( mpDepots ) then
3628: LD_EXP 14
3632: PPUSH
3633: CALL 11239 0 1
3637: IFFALSE 3807
// begin bc_level := 0 ;
3639: LD_ADDR_OWVAR 43
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// bc_type := b_depot ;
3647: LD_ADDR_OWVAR 42
3651: PUSH
3652: LD_INT 0
3654: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3655: LD_ADDR_VAR 0 4
3659: PUSH
3660: LD_EXP 14
3664: PUSH
3665: LD_VAR 0 8
3669: ARRAY
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_EXP 14
3679: PUSH
3680: LD_VAR 0 8
3684: ARRAY
3685: PUSH
3686: LD_INT 2
3688: ARRAY
3689: PPUSH
3690: LD_EXP 14
3694: PUSH
3695: LD_VAR 0 8
3699: ARRAY
3700: PUSH
3701: LD_INT 3
3703: ARRAY
3704: PPUSH
3705: CALL_OW 47
3709: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_STRING @
3717: PUSH
3718: LD_VAR 0 7
3722: STR
3723: PPUSH
3724: CALL_OW 500
// SetTag ( b , side ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_VAR 0 7
3737: PPUSH
3738: CALL_OW 109
// if Count ( mpStartingResources ) then
3742: LD_EXP 15
3746: PPUSH
3747: CALL 11239 0 1
3751: IFFALSE 3805
// begin for j := 1 to mpStartingResources do
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_EXP 15
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3803
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3771: LD_VAR 0 4
3775: PPUSH
3776: CALL_OW 274
3780: PPUSH
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_EXP 15
3790: PUSH
3791: LD_VAR 0 3
3795: ARRAY
3796: PPUSH
3797: CALL_OW 277
3801: GO 3768
3803: POP
3804: POP
// end ; end else
3805: GO 3954
// if Count ( mpStartingResources ) then
3807: LD_EXP 15
3811: PPUSH
3812: CALL 11239 0 1
3816: IFFALSE 3954
// begin for j := 1 to mpStartingResources do
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_EXP 15
3832: PUSH
3833: FOR_TO
3834: IFFALSE 3952
// begin resources := mpStartingResources [ j ] ;
3836: LD_ADDR_VAR 0 13
3840: PUSH
3841: LD_EXP 15
3845: PUSH
3846: LD_VAR 0 3
3850: ARRAY
3851: ST_TO_ADDR
// repeat if resources >= 50 then
3852: LD_VAR 0 13
3856: PUSH
3857: LD_INT 50
3859: GREATEREQUAL
3860: IFFALSE 3906
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3862: LD_VAR 0 3
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_VAR 0 6
3879: PPUSH
3880: LD_INT 4
3882: PPUSH
3883: LD_INT 0
3885: PPUSH
3886: CALL_OW 60
// resources := resources - 50 ;
3890: LD_ADDR_VAR 0 13
3894: PUSH
3895: LD_VAR 0 13
3899: PUSH
3900: LD_INT 50
3902: MINUS
3903: ST_TO_ADDR
// end else
3904: GO 3940
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3906: LD_VAR 0 3
3910: PPUSH
3911: LD_VAR 0 13
3915: PUSH
3916: LD_INT 10
3918: DIV
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: LD_VAR 0 6
3929: PPUSH
3930: LD_INT 4
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 60
// until resources <= 0 ;
3940: LD_VAR 0 13
3944: PUSH
3945: LD_INT 0
3947: LESSEQUAL
3948: IFFALSE 3852
// end ;
3950: GO 3833
3952: POP
3953: POP
// end ; if Count ( mpBuildings ) then
3954: LD_EXP 17
3958: PPUSH
3959: CALL 11239 0 1
3963: IFFALSE 4041
// begin for j in mpBuildings [ pos ] do
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: LD_EXP 17
3974: PUSH
3975: LD_VAR 0 8
3979: ARRAY
3980: PUSH
3981: FOR_IN
3982: IFFALSE 4039
// begin bc_level := 0 ;
3984: LD_ADDR_OWVAR 43
3988: PUSH
3989: LD_INT 0
3991: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3992: LD_ADDR_OWVAR 42
3996: PUSH
3997: LD_VAR 0 3
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4006: LD_VAR 0 3
4010: PUSH
4011: LD_INT 2
4013: ARRAY
4014: PPUSH
4015: LD_VAR 0 3
4019: PUSH
4020: LD_INT 3
4022: ARRAY
4023: PPUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_INT 4
4031: ARRAY
4032: PPUSH
4033: CALL_OW 47
// end ;
4037: GO 3981
4039: POP
4040: POP
// end ; if mpBattleFlag > - 1 then
4041: LD_EXP 22
4045: PUSH
4046: LD_INT 1
4048: NEG
4049: GREATER
4050: IFFALSE 4209
// begin x := mpStartPos [ pos ] [ 1 ] ;
4052: LD_ADDR_VAR 0 5
4056: PUSH
4057: LD_EXP 21
4061: PUSH
4062: LD_VAR 0 8
4066: ARRAY
4067: PUSH
4068: LD_INT 1
4070: ARRAY
4071: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4072: LD_ADDR_VAR 0 6
4076: PUSH
4077: LD_EXP 21
4081: PUSH
4082: LD_VAR 0 8
4086: ARRAY
4087: PUSH
4088: LD_INT 2
4090: ARRAY
4091: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4092: LD_VAR 0 5
4096: PPUSH
4097: LD_VAR 0 6
4101: PPUSH
4102: LD_INT 12
4104: PPUSH
4105: LD_INT 2
4107: PPUSH
4108: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4112: LD_ADDR_EXP 23
4116: PUSH
4117: LD_EXP 23
4121: PPUSH
4122: LD_VAR 0 7
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: LD_VAR 0 5
4136: PPUSH
4137: LD_VAR 0 6
4141: PPUSH
4142: LD_INT 1
4144: PUSH
4145: LD_INT 100
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 70
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 3
4164: PUSH
4165: LD_INT 40
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 10
4174: PUSH
4175: LD_INT 25
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 20
4184: PUSH
4185: LD_INT 100
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 418
4203: PPUSH
4204: CALL_OW 1
4208: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4209: LD_EXP 26
4213: PUSH
4214: LD_INT 20
4216: PPUSH
4217: LD_VAR 0 7
4221: PPUSH
4222: CALL_OW 321
4226: PUSH
4227: LD_INT 1
4229: EQUAL
4230: AND
4231: IFFALSE 4248
// SetTech ( tech_SibDet , side , state_researched ) ;
4233: LD_INT 20
4235: PPUSH
4236: LD_VAR 0 7
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4248: LD_INT 24
4250: PPUSH
4251: LD_VAR 0 7
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 322
// if mpSibBomb = 1 then
4263: LD_EXP 28
4267: PUSH
4268: LD_INT 1
4270: EQUAL
4271: IFFALSE 4290
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4273: LD_INT 25
4275: PPUSH
4276: LD_VAR 0 7
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: CALL_OW 322
// end else
4288: GO 4305
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4290: LD_INT 25
4292: PPUSH
4293: LD_VAR 0 7
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 322
// end ; if mpVehicles then
4305: LD_EXP 35
4309: IFFALSE 4408
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: LD_VAR 0 7
4320: PPUSH
4321: LD_VAR 0 9
4325: PPUSH
4326: LD_EXP 35
4330: PPUSH
4331: CALL 5495 0 3
4335: PUSH
4336: FOR_IN
4337: IFFALSE 4406
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4339: LD_VAR 0 3
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: LD_INT 5
4349: PPUSH
4350: CALL_OW 12
4354: PPUSH
4355: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4359: LD_VAR 0 3
4363: PPUSH
4364: LD_EXP 21
4368: PUSH
4369: LD_VAR 0 8
4373: ARRAY
4374: PUSH
4375: LD_INT 1
4377: ARRAY
4378: PPUSH
4379: LD_EXP 21
4383: PUSH
4384: LD_VAR 0 8
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: LD_INT 12
4396: PPUSH
4397: LD_INT 0
4399: PPUSH
4400: CALL_OW 50
// end ;
4404: GO 4336
4406: POP
4407: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4408: LD_ADDR_VAR 0 11
4412: PUSH
4413: LD_VAR 0 7
4417: PPUSH
4418: LD_VAR 0 9
4422: PPUSH
4423: LD_EXP 24
4427: PPUSH
4428: LD_EXP 25
4432: PPUSH
4433: CALL 4997 0 4
4437: ST_TO_ADDR
// for j in team do
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: LD_VAR 0 11
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4498
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_EXP 21
4460: PUSH
4461: LD_VAR 0 8
4465: ARRAY
4466: PUSH
4467: LD_INT 1
4469: ARRAY
4470: PPUSH
4471: LD_EXP 21
4475: PUSH
4476: LD_VAR 0 8
4480: ARRAY
4481: PUSH
4482: LD_INT 2
4484: ARRAY
4485: PPUSH
4486: LD_INT 12
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 50
4496: GO 4448
4498: POP
4499: POP
// if mpApemans then
4500: LD_EXP 30
4504: IFFALSE 4583
// begin for j := 1 to mpApemans do
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 30
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4581
// begin PrepareApeman ( - 5 ) ;
4524: LD_INT 5
4526: NEG
4527: PPUSH
4528: CALL 43096 0 1
// ape := CreateHuman ;
4532: LD_ADDR_VAR 0 10
4536: PUSH
4537: CALL_OW 44
4541: ST_TO_ADDR
// SetTag ( ape , side ) ;
4542: LD_VAR 0 10
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4556: LD_VAR 0 10
4560: PPUSH
4561: LD_EXP 31
4565: PUSH
4566: LD_VAR 0 8
4570: ARRAY
4571: PPUSH
4572: LD_INT 0
4574: PPUSH
4575: CALL_OW 49
// end ;
4579: GO 4521
4581: POP
4582: POP
// end ; end ;
4583: GO 3368
4585: POP
4586: POP
// if not mpTeamGame then
4587: LD_EXP 11
4591: NOT
4592: IFFALSE 4690
// begin for i := 1 to 8 do
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: DOUBLE
4600: LD_INT 1
4602: DEC
4603: ST_TO_ADDR
4604: LD_INT 8
4606: PUSH
4607: FOR_TO
4608: IFFALSE 4686
// for j := 1 to 8 do
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: DOUBLE
4616: LD_INT 1
4618: DEC
4619: ST_TO_ADDR
4620: LD_INT 8
4622: PUSH
4623: FOR_TO
4624: IFFALSE 4682
// if i <> j then
4626: LD_VAR 0 2
4630: PUSH
4631: LD_VAR 0 3
4635: NONEQUAL
4636: IFFALSE 4660
// SetAttitude ( i , j , att_neutral , true ) else
4638: LD_VAR 0 2
4642: PPUSH
4643: LD_VAR 0 3
4647: PPUSH
4648: LD_INT 0
4650: PPUSH
4651: LD_INT 1
4653: PPUSH
4654: CALL_OW 80
4658: GO 4680
// SetAttitude ( i , j , att_friend , true ) ;
4660: LD_VAR 0 2
4664: PPUSH
4665: LD_VAR 0 3
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 80
4680: GO 4623
4682: POP
4683: POP
4684: GO 4607
4686: POP
4687: POP
// end else
4688: GO 4865
// begin if mpSharedVision then
4690: LD_EXP 16
4694: IFFALSE 4759
// begin for i in mpTeams do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: LD_EXP 10
4705: PUSH
4706: FOR_IN
4707: IFFALSE 4757
// for j := 2 to i do
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: DOUBLE
4715: LD_INT 2
4717: DEC
4718: ST_TO_ADDR
4719: LD_VAR 0 2
4723: PUSH
4724: FOR_TO
4725: IFFALSE 4753
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4727: LD_VAR 0 2
4731: PUSH
4732: LD_VAR 0 3
4736: ARRAY
4737: PPUSH
4738: LD_VAR 0 2
4742: PUSH
4743: LD_INT 1
4745: ARRAY
4746: PPUSH
4747: CALL_OW 343
4751: GO 4724
4753: POP
4754: POP
4755: GO 4706
4757: POP
4758: POP
// end ; for i := 1 to 8 do
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 8
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4863
// for j := 1 to 8 do
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 8
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4859
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4791: LD_EXP 8
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PUSH
4802: LD_EXP 8
4806: PUSH
4807: LD_VAR 0 3
4811: ARRAY
4812: EQUAL
4813: IFFALSE 4837
// SetAttitude ( i , j , att_friend , true ) else
4815: LD_VAR 0 2
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_INT 1
4830: PPUSH
4831: CALL_OW 80
4835: GO 4857
// SetAttitude ( i , j , att_enemy , true ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 2
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 80
4857: GO 4788
4859: POP
4860: POP
4861: GO 4772
4863: POP
4864: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4865: LD_ADDR_OWVAR 71
4869: PUSH
4870: LD_EXP 9
4874: PUSH
4875: LD_OWVAR 2
4879: ARRAY
4880: ST_TO_ADDR
// if IAmSpec then
4881: CALL_OW 531
4885: IFFALSE 4926
// begin FogOff ( true ) ;
4887: LD_INT 1
4889: PPUSH
4890: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PUSH
4903: LD_INT 2
4905: DIV
4906: PPUSH
4907: LD_EXP 29
4911: PUSH
4912: LD_INT 2
4914: ARRAY
4915: PUSH
4916: LD_INT 2
4918: DIV
4919: PPUSH
4920: CALL_OW 86
// end else
4924: GO 4972
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4926: LD_EXP 21
4930: PUSH
4931: LD_EXP 7
4935: PUSH
4936: LD_OWVAR 2
4940: ARRAY
4941: ARRAY
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: PPUSH
4947: LD_EXP 21
4951: PUSH
4952: LD_EXP 7
4956: PUSH
4957: LD_OWVAR 2
4961: ARRAY
4962: ARRAY
4963: PUSH
4964: LD_INT 2
4966: ARRAY
4967: PPUSH
4968: CALL_OW 86
// end ; BeginBuildUp ;
4972: CALL 5973 0 0
// enable ( mpActive ) ;
4976: LD_INT 100
4978: ENABLE_MARKED
// enable ( mpGameType ) ;
4979: LD_EXP 3
4983: ENABLE_MARKED
// mpGameActive := true ;
4984: LD_ADDR_EXP 38
4988: PUSH
4989: LD_INT 1
4991: ST_TO_ADDR
// end ;
4992: LD_VAR 0 1
4996: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
5002: PPUSH
// result := [ ] ;
5003: LD_ADDR_VAR 0 5
5007: PUSH
5008: EMPTY
5009: ST_TO_ADDR
// class := class_soldier ;
5010: LD_ADDR_VAR 0 8
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// uc_side := side ;
5018: LD_ADDR_OWVAR 20
5022: PUSH
5023: LD_VAR 0 1
5027: ST_TO_ADDR
// uc_nation := nation ;
5028: LD_ADDR_OWVAR 21
5032: PUSH
5033: LD_VAR 0 2
5037: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5038: LD_ADDR_OWVAR 26
5042: PUSH
5043: LD_OWVAR 19
5047: PUSH
5048: LD_VAR 0 1
5052: ARRAY
5053: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5054: LD_INT 1
5056: PPUSH
5057: LD_INT 2
5059: PPUSH
5060: CALL_OW 12
5064: PPUSH
5065: LD_VAR 0 8
5069: PPUSH
5070: LD_VAR 0 4
5074: PUSH
5075: LD_INT 2
5077: PLUS
5078: PPUSH
5079: CALL_OW 380
// hc_importance := 105 ;
5083: LD_ADDR_OWVAR 32
5087: PUSH
5088: LD_INT 105
5090: ST_TO_ADDR
// if Multiplayer then
5091: LD_OWVAR 4
5095: IFFALSE 5135
// begin hc_gallery := MULTIAVATARS ;
5097: LD_ADDR_OWVAR 33
5101: PUSH
5102: LD_STRING MULTIAVATARS
5104: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5105: LD_ADDR_OWVAR 34
5109: PUSH
5110: LD_VAR 0 1
5114: PPUSH
5115: CALL_OW 525
5119: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5120: LD_ADDR_OWVAR 27
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 526
5134: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5135: LD_ADDR_VAR 0 5
5139: PUSH
5140: LD_VAR 0 5
5144: PPUSH
5145: CALL_OW 44
5149: PPUSH
5150: CALL 46848 0 2
5154: ST_TO_ADDR
// if mpTeamPreset then
5155: LD_LOC 1
5159: IFFALSE 5255
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5161: LD_LOC 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 5
5174: PUSH
5175: LD_VAR 0 5
5179: ARRAY
5180: PPUSH
5181: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5185: LD_VAR 0 5
5189: PUSH
5190: LD_VAR 0 5
5194: ARRAY
5195: PPUSH
5196: LD_INT 1
5198: PPUSH
5199: LD_LOC 1
5203: PUSH
5204: LD_INT 1
5206: ARRAY
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 260
5215: PPUSH
5216: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5220: LD_VAR 0 5
5224: PUSH
5225: LD_VAR 0 5
5229: ARRAY
5230: PPUSH
5231: LD_INT 2
5233: PPUSH
5234: LD_LOC 1
5238: PUSH
5239: LD_INT 1
5241: ARRAY
5242: PPUSH
5243: LD_INT 2
5245: PPUSH
5246: CALL_OW 260
5250: PPUSH
5251: CALL_OW 239
// end ; InitHc_All ( ) ;
5255: CALL_OW 584
// class := 2 ;
5259: LD_ADDR_VAR 0 8
5263: PUSH
5264: LD_INT 2
5266: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5267: LD_ADDR_VAR 0 6
5271: PUSH
5272: DOUBLE
5273: LD_INT 1
5275: DEC
5276: ST_TO_ADDR
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 1
5284: MINUS
5285: PUSH
5286: FOR_TO
5287: IFFALSE 5471
// begin PrepareHuman ( false , class , skill ) ;
5289: LD_INT 0
5291: PPUSH
5292: LD_VAR 0 8
5296: PPUSH
5297: LD_VAR 0 4
5301: PPUSH
5302: CALL_OW 380
// un := CreateHuman ;
5306: LD_ADDR_VAR 0 7
5310: PUSH
5311: CALL_OW 44
5315: ST_TO_ADDR
// result := Join ( result , un ) ;
5316: LD_ADDR_VAR 0 5
5320: PUSH
5321: LD_VAR 0 5
5325: PPUSH
5326: LD_VAR 0 7
5330: PPUSH
5331: CALL 46848 0 2
5335: ST_TO_ADDR
// if mpTeamPreset then
5336: LD_LOC 1
5340: IFFALSE 5436
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5342: LD_LOC 1
5346: PUSH
5347: LD_VAR 0 6
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: ARRAY
5356: PPUSH
5357: LD_VAR 0 7
5361: PPUSH
5362: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5366: LD_VAR 0 7
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: LD_LOC 1
5378: PUSH
5379: LD_VAR 0 6
5383: PUSH
5384: LD_INT 1
5386: PLUS
5387: ARRAY
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 260
5396: PPUSH
5397: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5401: LD_VAR 0 7
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: LD_LOC 1
5413: PUSH
5414: LD_VAR 0 6
5418: PUSH
5419: LD_INT 1
5421: PLUS
5422: ARRAY
5423: PPUSH
5424: LD_INT 2
5426: PPUSH
5427: CALL_OW 260
5431: PPUSH
5432: CALL_OW 239
// end ; class := Inc ( class ) ;
5436: LD_ADDR_VAR 0 8
5440: PUSH
5441: LD_VAR 0 8
5445: PPUSH
5446: CALL 48209 0 1
5450: ST_TO_ADDR
// if class = 5 then
5451: LD_VAR 0 8
5455: PUSH
5456: LD_INT 5
5458: EQUAL
5459: IFFALSE 5469
// class := 1 ;
5461: LD_ADDR_VAR 0 8
5465: PUSH
5466: LD_INT 1
5468: ST_TO_ADDR
// end ;
5469: GO 5286
5471: POP
5472: POP
// if not mpTeamPreset then
5473: LD_LOC 1
5477: NOT
5478: IFFALSE 5490
// mpTeamPreset := result ;
5480: LD_ADDR_LOC 1
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// end ;
5490: LD_VAR 0 5
5494: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5495: LD_INT 0
5497: PPUSH
5498: PPUSH
// result := [ ] ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// if not vehicles then
5506: LD_VAR 0 3
5510: NOT
5511: IFFALSE 5515
// exit ;
5513: GO 5674
// for i := 1 to vehicles [ nation ] do
5515: LD_ADDR_VAR 0 5
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_VAR 0 3
5529: PUSH
5530: LD_VAR 0 2
5534: ARRAY
5535: PUSH
5536: FOR_TO
5537: IFFALSE 5672
// begin uc_side := side ;
5539: LD_ADDR_OWVAR 20
5543: PUSH
5544: LD_VAR 0 1
5548: ST_TO_ADDR
// uc_nation := nation ;
5549: LD_ADDR_OWVAR 21
5553: PUSH
5554: LD_VAR 0 2
5558: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5559: LD_VAR 0 3
5563: PUSH
5564: LD_VAR 0 2
5568: ARRAY
5569: PUSH
5570: LD_VAR 0 5
5574: ARRAY
5575: PUSH
5576: LD_INT 1
5578: ARRAY
5579: PPUSH
5580: LD_VAR 0 3
5584: PUSH
5585: LD_VAR 0 2
5589: ARRAY
5590: PUSH
5591: LD_VAR 0 5
5595: ARRAY
5596: PUSH
5597: LD_INT 2
5599: ARRAY
5600: PPUSH
5601: LD_VAR 0 3
5605: PUSH
5606: LD_VAR 0 2
5610: ARRAY
5611: PUSH
5612: LD_VAR 0 5
5616: ARRAY
5617: PUSH
5618: LD_INT 3
5620: ARRAY
5621: PPUSH
5622: LD_VAR 0 3
5626: PUSH
5627: LD_VAR 0 2
5631: ARRAY
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PUSH
5639: LD_INT 4
5641: ARRAY
5642: PPUSH
5643: LD_INT 80
5645: PPUSH
5646: CALL 13977 0 5
// result := Join ( result , CreateVehicle ) ;
5650: LD_ADDR_VAR 0 4
5654: PUSH
5655: LD_VAR 0 4
5659: PPUSH
5660: CALL_OW 45
5664: PPUSH
5665: CALL 46848 0 2
5669: ST_TO_ADDR
// end ;
5670: GO 5536
5672: POP
5673: POP
// end ;
5674: LD_VAR 0 4
5678: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5679: LD_INT 0
5681: PPUSH
5682: PPUSH
// for i in mpBattleFlags do
5683: LD_ADDR_VAR 0 3
5687: PUSH
5688: LD_EXP 23
5692: PUSH
5693: FOR_IN
5694: IFFALSE 5771
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5696: LD_VAR 0 3
5700: PPUSH
5701: LD_INT 1
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 2
5715: PUSH
5716: LD_VAR 0 1
5720: PUSH
5721: LD_REAL  7.00000000000000E-0001
5724: MUL
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 3
5732: PUSH
5733: LD_VAR 0 1
5737: PUSH
5738: LD_REAL  4.00000000000000E-0001
5741: MUL
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: LD_INT 20
5749: PUSH
5750: LD_VAR 0 1
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: PPUSH
5765: CALL_OW 423
5769: GO 5693
5771: POP
5772: POP
// end ;
5773: LD_VAR 0 2
5777: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5778: LD_INT 100
5780: IFFALSE 5875
5782: GO 5784
5784: DISABLE
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
// begin if mpBattleFlag <= 0 then
5789: LD_EXP 22
5793: PUSH
5794: LD_INT 0
5796: LESSEQUAL
5797: IFFALSE 5801
// exit ;
5799: GO 5875
// strength := 100 ;
5801: LD_ADDR_VAR 0 2
5805: PUSH
5806: LD_INT 100
5808: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5809: LD_EXP 22
5813: PPUSH
5814: CALL_OW 67
// strength := Dec ( strength ) ;
5818: LD_ADDR_VAR 0 2
5822: PUSH
5823: LD_VAR 0 2
5827: PPUSH
5828: CALL 48231 0 1
5832: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5833: LD_VAR 0 2
5837: PPUSH
5838: CALL 5679 0 1
// until not strength ;
5842: LD_VAR 0 2
5846: NOT
5847: IFFALSE 5809
// for i in mpBattleFlags do
5849: LD_ADDR_VAR 0 1
5853: PUSH
5854: LD_EXP 23
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5873
// KillBattleFlag ( i ) ;
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 419
5871: GO 5859
5873: POP
5874: POP
// end ;
5875: PPOPN 2
5877: END
// every 0 0$1 marked mpActive do var side , tmp ;
5878: GO 5880
5880: DISABLE
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
// begin if mpSibBomb <= 1 then
5885: LD_EXP 28
5889: PUSH
5890: LD_INT 1
5892: LESSEQUAL
5893: IFFALSE 5897
// exit ;
5895: GO 5970
// tmp := mpSibBomb ;
5897: LD_ADDR_VAR 0 2
5901: PUSH
5902: LD_EXP 28
5906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5907: LD_INT 35
5909: PPUSH
5910: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 2
5923: PUSH
5924: LD_INT 35
5926: MINUS
5927: ST_TO_ADDR
// until not tmp ;
5928: LD_VAR 0 2
5932: NOT
5933: IFFALSE 5907
// for side := 1 to 8 do
5935: LD_ADDR_VAR 0 1
5939: PUSH
5940: DOUBLE
5941: LD_INT 1
5943: DEC
5944: ST_TO_ADDR
5945: LD_INT 8
5947: PUSH
5948: FOR_TO
5949: IFFALSE 5968
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5951: LD_INT 25
5953: PPUSH
5954: LD_VAR 0 1
5958: PPUSH
5959: LD_INT 1
5961: PPUSH
5962: CALL_OW 322
5966: GO 5948
5968: POP
5969: POP
// end ;
5970: PPOPN 2
5972: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
// mpBuildUpTimeDelay := 0 ;
5978: LD_ADDR_EXP 41
5982: PUSH
5983: LD_INT 0
5985: ST_TO_ADDR
// if not mpBuildUpTime then
5986: LD_EXP 20
5990: NOT
5991: IFFALSE 5995
// exit ;
5993: GO 6178
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5995: LD_ADDR_EXP 41
5999: PUSH
6000: LD_INT 8400
6002: PUSH
6003: LD_INT 2100
6005: PUSH
6006: LD_EXP 20
6010: MUL
6011: PLUS
6012: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6013: LD_ADDR_EXP 42
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// for i := 1 to 8 do
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: DOUBLE
6027: LD_INT 1
6029: DEC
6030: ST_TO_ADDR
6031: LD_INT 8
6033: PUSH
6034: FOR_TO
6035: IFFALSE 6176
// if mpSidePositions [ i ] then
6037: LD_EXP 7
6041: PUSH
6042: LD_VAR 0 2
6046: ARRAY
6047: IFFALSE 6174
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6049: LD_EXP 19
6053: PUSH
6054: LD_EXP 7
6058: PUSH
6059: LD_VAR 0 2
6063: ARRAY
6064: ARRAY
6065: PPUSH
6066: LD_INT 5
6068: PPUSH
6069: CALL_OW 424
// for j := 1 to 8 do
6073: LD_ADDR_VAR 0 3
6077: PUSH
6078: DOUBLE
6079: LD_INT 1
6081: DEC
6082: ST_TO_ADDR
6083: LD_INT 8
6085: PUSH
6086: FOR_TO
6087: IFFALSE 6172
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6089: LD_EXP 7
6093: PUSH
6094: LD_VAR 0 3
6098: ARRAY
6099: PUSH
6100: LD_EXP 8
6104: PUSH
6105: LD_VAR 0 2
6109: ARRAY
6110: PUSH
6111: LD_EXP 8
6115: PUSH
6116: LD_VAR 0 3
6120: ARRAY
6121: NONEQUAL
6122: PUSH
6123: LD_EXP 11
6127: NOT
6128: PUSH
6129: LD_VAR 0 2
6133: PUSH
6134: LD_VAR 0 3
6138: NONEQUAL
6139: AND
6140: OR
6141: AND
6142: IFFALSE 6170
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6144: LD_VAR 0 3
6148: PPUSH
6149: LD_EXP 19
6153: PUSH
6154: LD_EXP 7
6158: PUSH
6159: LD_VAR 0 2
6163: ARRAY
6164: ARRAY
6165: PPUSH
6166: CALL_OW 333
6170: GO 6086
6172: POP
6173: POP
// end ;
6174: GO 6034
6176: POP
6177: POP
// end ;
6178: LD_VAR 0 1
6182: RET
// function EndBuildUp ; var i , j ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
// mpBuildUpTimeActive := false ;
6188: LD_ADDR_EXP 42
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// for i := 1 to 8 do
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: DOUBLE
6202: LD_INT 1
6204: DEC
6205: ST_TO_ADDR
6206: LD_INT 8
6208: PUSH
6209: FOR_TO
6210: IFFALSE 6351
// if mpSidePositions [ i ] then
6212: LD_EXP 7
6216: PUSH
6217: LD_VAR 0 2
6221: ARRAY
6222: IFFALSE 6349
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6224: LD_EXP 19
6228: PUSH
6229: LD_EXP 7
6233: PUSH
6234: LD_VAR 0 2
6238: ARRAY
6239: ARRAY
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 424
// for j := 1 to 8 do
6248: LD_ADDR_VAR 0 3
6252: PUSH
6253: DOUBLE
6254: LD_INT 1
6256: DEC
6257: ST_TO_ADDR
6258: LD_INT 8
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6347
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6264: LD_EXP 7
6268: PUSH
6269: LD_VAR 0 3
6273: ARRAY
6274: PUSH
6275: LD_EXP 8
6279: PUSH
6280: LD_VAR 0 2
6284: ARRAY
6285: PUSH
6286: LD_EXP 8
6290: PUSH
6291: LD_VAR 0 3
6295: ARRAY
6296: NONEQUAL
6297: PUSH
6298: LD_EXP 11
6302: NOT
6303: PUSH
6304: LD_VAR 0 2
6308: PUSH
6309: LD_VAR 0 3
6313: NONEQUAL
6314: AND
6315: OR
6316: AND
6317: IFFALSE 6345
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6319: LD_VAR 0 3
6323: PPUSH
6324: LD_EXP 19
6328: PUSH
6329: LD_EXP 7
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: ARRAY
6340: PPUSH
6341: CALL_OW 334
6345: GO 6261
6347: POP
6348: POP
// end ;
6349: GO 6209
6351: POP
6352: POP
// end ;
6353: LD_VAR 0 1
6357: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6358: LD_EXP 42
6362: IFFALSE 6537
6364: GO 6366
6366: DISABLE
6367: LD_INT 0
6369: PPUSH
6370: PPUSH
// begin for i := 1 to 8 do
6371: LD_ADDR_VAR 0 1
6375: PUSH
6376: DOUBLE
6377: LD_INT 1
6379: DEC
6380: ST_TO_ADDR
6381: LD_INT 8
6383: PUSH
6384: FOR_TO
6385: IFFALSE 6534
// if mpSidePositions [ i ] then
6387: LD_EXP 7
6391: PUSH
6392: LD_VAR 0 1
6396: ARRAY
6397: IFFALSE 6532
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6399: LD_ADDR_VAR 0 2
6403: PUSH
6404: LD_EXP 19
6408: PUSH
6409: LD_EXP 7
6413: PUSH
6414: LD_VAR 0 1
6418: ARRAY
6419: ARRAY
6420: PPUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 21
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 21
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_OWVAR 2
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PPUSH
6465: CALL_OW 70
6469: PUSH
6470: FOR_IN
6471: IFFALSE 6530
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6473: LD_EXP 8
6477: PUSH
6478: LD_VAR 0 1
6482: ARRAY
6483: PUSH
6484: LD_EXP 8
6488: PUSH
6489: LD_OWVAR 2
6493: ARRAY
6494: NONEQUAL
6495: PUSH
6496: LD_EXP 11
6500: NOT
6501: PUSH
6502: LD_VAR 0 1
6506: PUSH
6507: LD_OWVAR 2
6511: NONEQUAL
6512: AND
6513: OR
6514: IFFALSE 6528
// ComMoveToArea ( un , BuildUpEscape ) ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_INT 15
6523: PPUSH
6524: CALL_OW 113
6528: GO 6470
6530: POP
6531: POP
6532: GO 6384
6534: POP
6535: POP
// enable ;
6536: ENABLE
// end ;
6537: PPOPN 2
6539: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6540: LD_EXP 20
6544: IFFALSE 6594
6546: GO 6548
6548: DISABLE
6549: LD_INT 0
6551: PPUSH
// begin tmp := mpBuildUpTime ;
6552: LD_ADDR_VAR 0 1
6556: PUSH
6557: LD_EXP 20
6561: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6562: LD_INT 35
6564: PPUSH
6565: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: LD_VAR 0 1
6578: PUSH
6579: LD_INT 35
6581: MINUS
6582: ST_TO_ADDR
// until not tmp ;
6583: LD_VAR 0 1
6587: NOT
6588: IFFALSE 6562
// EndBuildUp ;
6590: CALL 6183 0 0
// end ;
6594: PPOPN 1
6596: END
// every 0 0$1 trigger mpActive marked mpWin do
6597: LD_INT 100
6599: IFFALSE 6633
6601: GO 6603
6603: DISABLE
// begin if IAmServer then
6604: CALL_OW 518
6608: IFFALSE 6617
// wait ( 0 0$3 ) ;
6610: LD_INT 105
6612: PPUSH
6613: CALL_OW 67
// if Multiplayer then
6617: LD_OWVAR 4
6621: IFFALSE 6629
// YouWinInMultiplayer else
6623: CALL_OW 106
6627: GO 6633
// YouWin ;
6629: CALL_OW 103
// end ;
6633: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6634: LD_INT 0
6636: PPUSH
// result := false ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 0
6644: ST_TO_ADDR
// case gameType of GameTypeNormal :
6645: LD_VAR 0 1
6649: PUSH
6650: LD_INT 1
6652: DOUBLE
6653: EQUAL
6654: IFTRUE 6658
6656: GO 6731
6658: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6659: LD_ADDR_VAR 0 3
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_VAR 0 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 2
6678: PUSH
6679: LD_INT 21
6681: PUSH
6682: LD_INT 1
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 33
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 33
6701: PUSH
6702: LD_INT 5
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PPUSH
6719: CALL_OW 69
6723: PPUSH
6724: CALL 11239 0 1
6728: ST_TO_ADDR
// end ; GameTypeSurvival :
6729: GO 6966
6731: LD_INT 2
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6867
6739: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6740: LD_ADDR_VAR 0 3
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 2
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 30
6762: PUSH
6763: LD_INT 0
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 30
6772: PUSH
6773: LD_INT 1
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: PPUSH
6794: CALL 11239 0 1
6798: PUSH
6799: LD_INT 22
6801: PUSH
6802: LD_VAR 0 2
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: LD_INT 2
6813: PUSH
6814: LD_INT 21
6816: PUSH
6817: LD_INT 1
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: LD_INT 33
6826: PUSH
6827: LD_INT 3
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 33
6836: PUSH
6837: LD_INT 5
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: PPUSH
6859: CALL 11239 0 1
6863: AND
6864: ST_TO_ADDR
// end ; GameTypeKing :
6865: GO 6966
6867: LD_INT 3
6869: DOUBLE
6870: EQUAL
6871: IFTRUE 6875
6873: GO 6965
6875: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6876: LD_ADDR_VAR 0 3
6880: PUSH
6881: LD_INT 22
6883: PUSH
6884: LD_VAR 0 2
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 2
6895: PUSH
6896: LD_INT 21
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 33
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 33
6918: PUSH
6919: LD_INT 5
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 69
6940: PPUSH
6941: CALL 11239 0 1
6945: PUSH
6946: LD_VAR 0 2
6950: PPUSH
6951: CALL 58398 0 1
6955: PUSH
6956: LD_EXP 34
6960: LESS
6961: AND
6962: ST_TO_ADDR
// end ; end ;
6963: GO 6966
6965: POP
// end ;
6966: LD_VAR 0 3
6970: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6971: LD_INT 100
6973: IFFALSE 7195
6975: GO 6977
6977: DISABLE
6978: LD_INT 0
6980: PPUSH
6981: PPUSH
// begin if Multiplayer then
6982: LD_OWVAR 4
6986: IFFALSE 6994
// SetPlayerSpectator ( ) else
6988: CALL_OW 572
6992: GO 7003
// FogOff ( your_side ) ;
6994: LD_OWVAR 2
6998: PPUSH
6999: CALL_OW 344
// repeat gameIsOn := false ;
7003: LD_ADDR_VAR 0 1
7007: PUSH
7008: LD_INT 0
7010: ST_TO_ADDR
// for i := 1 to 8 do
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 8
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7147
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7027: LD_EXP 7
7031: PUSH
7032: LD_VAR 0 2
7036: ARRAY
7037: PUSH
7038: LD_VAR 0 2
7042: PPUSH
7043: CALL_OW 108
7047: AND
7048: PUSH
7049: LD_VAR 0 2
7053: PUSH
7054: LD_OWVAR 2
7058: NONEQUAL
7059: AND
7060: IFFALSE 7145
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7062: LD_EXP 8
7066: PUSH
7067: LD_VAR 0 2
7071: ARRAY
7072: NOT
7073: PUSH
7074: LD_EXP 8
7078: PUSH
7079: LD_VAR 0 2
7083: ARRAY
7084: PUSH
7085: LD_EXP 8
7089: PUSH
7090: LD_OWVAR 2
7094: ARRAY
7095: NONEQUAL
7096: PUSH
7097: LD_OWVAR 2
7101: PPUSH
7102: LD_VAR 0 2
7106: PPUSH
7107: CALL_OW 81
7111: PUSH
7112: LD_INT 1
7114: NONEQUAL
7115: AND
7116: OR
7117: IFFALSE 7145
// if HasPowerByGameType ( mpGameType , i ) then
7119: LD_EXP 3
7123: PPUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: CALL 6634 0 2
7133: IFFALSE 7145
// begin gameIsOn := true ;
7135: LD_ADDR_VAR 0 1
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// break ;
7143: GO 7147
// end ;
7145: GO 7024
7147: POP
7148: POP
// wait ( 100 ) ;
7149: LD_INT 100
7151: PPUSH
7152: CALL_OW 67
// until not gameIsOn ;
7156: LD_VAR 0 1
7160: NOT
7161: IFFALSE 7003
// if IAmServer then
7163: CALL_OW 518
7167: IFFALSE 7176
// wait ( 0 0$3 ) ;
7169: LD_INT 105
7171: PPUSH
7172: CALL_OW 67
// if Multiplayer then
7176: LD_OWVAR 4
7180: IFFALSE 7188
// YouLostInMultiplayer else
7182: CALL_OW 107
7186: GO 7195
// YouLost (  ) ;
7188: LD_STRING 
7190: PPUSH
7191: CALL_OW 104
// end ;
7195: PPOPN 2
7197: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7198: LD_EXP 32
7202: IFFALSE 7549
7204: GO 7206
7206: DISABLE
7207: LD_INT 0
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7214: LD_ADDR_VAR 0 5
7218: PUSH
7219: LD_INT 1
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: LD_INT 4
7230: PUSH
7231: LD_INT 5
7233: PUSH
7234: LD_INT 6
7236: PUSH
7237: LD_INT 7
7239: PUSH
7240: LD_INT 8
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7253: LD_INT 350
7255: PPUSH
7256: CALL_OW 67
// for i := 1 to 8 do
7260: LD_ADDR_VAR 0 1
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_INT 8
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7519
// begin j := sides [ i ] ;
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_VAR 0 5
7285: PUSH
7286: LD_VAR 0 1
7290: ARRAY
7291: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7292: LD_EXP 39
7296: PUSH
7297: LD_VAR 0 2
7301: ARRAY
7302: PPUSH
7303: CALL 11239 0 1
7307: PUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: CALL_OW 108
7317: AND
7318: PUSH
7319: LD_EXP 3
7323: PPUSH
7324: LD_VAR 0 2
7328: PPUSH
7329: CALL 6634 0 2
7333: AND
7334: IFFALSE 7517
// begin wait ( mpRespawn div 3 ) ;
7336: LD_EXP 32
7340: PUSH
7341: LD_INT 3
7343: DIV
7344: PPUSH
7345: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_VAR 0 2
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: EMPTY
7370: LIST
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: LD_INT 30
7377: PUSH
7378: LD_INT 0
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 30
7387: PUSH
7388: LD_INT 1
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 69
7409: ST_TO_ADDR
// if not tmp then
7410: LD_VAR 0 3
7414: NOT
7415: IFFALSE 7419
// continue ;
7417: GO 7273
// spawn := tmp [ 1 ] ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: LD_VAR 0 3
7428: PUSH
7429: LD_INT 1
7431: ARRAY
7432: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7433: LD_EXP 39
7437: PUSH
7438: LD_VAR 0 2
7442: ARRAY
7443: PUSH
7444: LD_INT 1
7446: ARRAY
7447: PPUSH
7448: LD_VAR 0 4
7452: PPUSH
7453: CALL_OW 250
7457: PPUSH
7458: LD_VAR 0 4
7462: PPUSH
7463: CALL_OW 251
7467: PPUSH
7468: LD_INT 32
7470: PPUSH
7471: LD_INT 1
7473: PPUSH
7474: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7478: LD_ADDR_EXP 39
7482: PUSH
7483: LD_EXP 39
7487: PPUSH
7488: LD_VAR 0 2
7492: PPUSH
7493: LD_EXP 39
7497: PUSH
7498: LD_VAR 0 2
7502: ARRAY
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 3
7511: PPUSH
7512: CALL_OW 1
7516: ST_TO_ADDR
// end ; end ;
7517: GO 7273
7519: POP
7520: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7521: LD_ADDR_VAR 0 5
7525: PUSH
7526: LD_VAR 0 5
7530: PPUSH
7531: LD_INT 1
7533: PPUSH
7534: LD_INT 8
7536: PPUSH
7537: LD_INT 1
7539: PPUSH
7540: CALL 13517 0 4
7544: ST_TO_ADDR
// until false ;
7545: LD_INT 0
7547: IFFALSE 7253
// end ;
7549: PPOPN 5
7551: END
// every 0 0$1 marked mpActive do
7552: GO 7554
7554: DISABLE
// begin enable ;
7555: ENABLE
// if not mpDisplayStrings then
7556: LD_EXP 37
7560: NOT
7561: IFFALSE 7572
// begin display_strings := [ ] ;
7563: LD_ADDR_OWVAR 47
7567: PUSH
7568: EMPTY
7569: ST_TO_ADDR
// exit ;
7570: GO 7582
// end ; display_strings := mpDisplayStrings ;
7572: LD_ADDR_OWVAR 47
7576: PUSH
7577: LD_EXP 37
7581: ST_TO_ADDR
// end ; end_of_file
7582: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
// if GetType ( un ) = unit_vehicle then
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 247
7603: PUSH
7604: LD_INT 2
7606: EQUAL
7607: IFFALSE 7611
// exit ;
7609: GO 8181
// side := GetSide ( un ) ;
7611: LD_ADDR_VAR 0 9
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 255
7625: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7626: LD_EXP 3
7630: PUSH
7631: LD_INT 2
7633: EQUAL
7634: IFFALSE 7727
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 266
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: IN
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 110
7666: PUSH
7667: LD_VAR 0 9
7671: EQUAL
7672: AND
7673: IFFALSE 7727
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_VAR 0 9
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 21
7694: PUSH
7695: LD_INT 1
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PPUSH
7706: CALL_OW 69
7710: PUSH
7711: FOR_IN
7712: IFFALSE 7725
// KillUnit ( i ) ;
7714: LD_VAR 0 3
7718: PPUSH
7719: CALL_OW 66
7723: GO 7711
7725: POP
7726: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 257
7736: PUSH
7737: LD_INT 12
7739: PUSH
7740: LD_INT 17
7742: PUSH
7743: LD_INT 15
7745: PUSH
7746: LD_INT 16
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: IN
7755: PUSH
7756: LD_VAR 0 1
7760: PPUSH
7761: CALL_OW 263
7765: PUSH
7766: LD_INT 5
7768: EQUAL
7769: OR
7770: IFFALSE 7910
// begin tag := GetTag ( un ) ;
7772: LD_ADDR_VAR 0 5
7776: PUSH
7777: LD_VAR 0 1
7781: PPUSH
7782: CALL_OW 110
7786: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7787: LD_ADDR_VAR 0 7
7791: PUSH
7792: LD_EXP 31
7796: PUSH
7797: LD_EXP 7
7801: PUSH
7802: LD_VAR 0 5
7806: ARRAY
7807: ARRAY
7808: ST_TO_ADDR
// if not area then
7809: LD_VAR 0 7
7813: NOT
7814: IFFALSE 7818
// exit ;
7816: GO 8181
// wait ( 4 4$00 ) ;
7818: LD_INT 8400
7820: PPUSH
7821: CALL_OW 67
// repeat wait ( 10 ) ;
7825: LD_INT 10
7827: PPUSH
7828: CALL_OW 67
// until not mpBlockRespThread ;
7832: LD_EXP 40
7836: NOT
7837: IFFALSE 7825
// mpBlockRespThread := true ;
7839: LD_ADDR_EXP 40
7843: PUSH
7844: LD_INT 1
7846: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7847: LD_INT 0
7849: PPUSH
7850: CALL 43096 0 1
// ape := CreateHuman ;
7854: LD_ADDR_VAR 0 4
7858: PUSH
7859: CALL_OW 44
7863: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7864: LD_VAR 0 4
7868: PPUSH
7869: LD_VAR 0 5
7873: PPUSH
7874: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7878: LD_VAR 0 4
7882: PPUSH
7883: LD_VAR 0 7
7887: PPUSH
7888: LD_INT 0
7890: PPUSH
7891: CALL_OW 49
// wait ( 10 ) ;
7895: LD_INT 10
7897: PPUSH
7898: CALL_OW 67
// mpBlockRespThread := false ;
7902: LD_ADDR_EXP 40
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 247
7919: PUSH
7920: LD_INT 1
7922: EQUAL
7923: PUSH
7924: LD_VAR 0 1
7928: PPUSH
7929: CALL_OW 248
7933: PUSH
7934: LD_INT 0
7936: GREATER
7937: AND
7938: IFFALSE 8181
// begin if not mpRespawn then
7940: LD_EXP 32
7944: NOT
7945: IFFALSE 7949
// exit ;
7947: GO 8181
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7949: LD_VAR 0 9
7953: PPUSH
7954: CALL_OW 108
7958: NOT
7959: PUSH
7960: LD_EXP 3
7964: PPUSH
7965: LD_VAR 0 9
7969: PPUSH
7970: CALL 6634 0 2
7974: NOT
7975: AND
7976: IFFALSE 7980
// exit ;
7978: GO 8181
// side := GetSide ( un ) ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL_OW 255
7994: ST_TO_ADDR
// nation := GetNation ( un ) ;
7995: LD_ADDR_VAR 0 8
7999: PUSH
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 248
8009: ST_TO_ADDR
// class := GetClass ( un ) ;
8010: LD_ADDR_VAR 0 6
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: CALL_OW 257
8024: ST_TO_ADDR
// if class > 4 then
8025: LD_VAR 0 6
8029: PUSH
8030: LD_INT 4
8032: GREATER
8033: IFFALSE 8043
// class := 1 ;
8035: LD_ADDR_VAR 0 6
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// repeat wait ( 10 ) ;
8043: LD_INT 10
8045: PPUSH
8046: CALL_OW 67
// until not mpBlockRespThread ;
8050: LD_EXP 40
8054: NOT
8055: IFFALSE 8043
// mpBlockRespThread := true ;
8057: LD_ADDR_EXP 40
8061: PUSH
8062: LD_INT 1
8064: ST_TO_ADDR
// uc_side := side ;
8065: LD_ADDR_OWVAR 20
8069: PUSH
8070: LD_VAR 0 9
8074: ST_TO_ADDR
// uc_nation := nation ;
8075: LD_ADDR_OWVAR 21
8079: PUSH
8080: LD_VAR 0 8
8084: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8085: LD_INT 0
8087: PPUSH
8088: LD_VAR 0 6
8092: PPUSH
8093: LD_INT 2
8095: PPUSH
8096: CALL_OW 380
// un := CreateHuman ;
8100: LD_ADDR_VAR 0 1
8104: PUSH
8105: CALL_OW 44
8109: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8110: LD_ADDR_EXP 39
8114: PUSH
8115: LD_EXP 39
8119: PPUSH
8120: LD_VAR 0 9
8124: PPUSH
8125: LD_EXP 39
8129: PUSH
8130: LD_VAR 0 9
8134: ARRAY
8135: PPUSH
8136: LD_EXP 39
8140: PUSH
8141: LD_VAR 0 9
8145: ARRAY
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: PPUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 1
8160: PPUSH
8161: CALL_OW 1
8165: ST_TO_ADDR
// wait ( 10 ) ;
8166: LD_INT 10
8168: PPUSH
8169: CALL_OW 67
// mpBlockRespThread := false ;
8173: LD_ADDR_EXP 40
8177: PUSH
8178: LD_INT 0
8180: ST_TO_ADDR
// end ; end ;
8181: LD_VAR 0 2
8185: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8186: LD_INT 0
8188: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL_OW 266
8198: PUSH
8199: LD_INT 0
8201: PUSH
8202: LD_INT 1
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: IN
8209: IFFALSE 8234
// SetBName ( building , @ & GetSide ( building ) ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_STRING @
8218: PUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 255
8228: STR
8229: PPUSH
8230: CALL_OW 500
// end ;
8234: LD_VAR 0 2
8238: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8243: LD_EXP 3
8247: PUSH
8248: LD_INT 2
8250: EQUAL
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL_OW 266
8261: PUSH
8262: LD_INT 0
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: IN
8272: AND
8273: IFFALSE 8338
// begin KillUnit ( building ) ;
8275: LD_VAR 0 1
8279: PPUSH
8280: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 22
8291: PUSH
8292: LD_VAR 0 2
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 21
8303: PUSH
8304: LD_INT 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PPUSH
8315: CALL_OW 69
8319: PUSH
8320: FOR_IN
8321: IFFALSE 8334
// KillUnit ( i ) ;
8323: LD_VAR 0 5
8327: PPUSH
8328: CALL_OW 66
8332: GO 8320
8334: POP
8335: POP
// exit ;
8336: GO 8383
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 266
8347: PUSH
8348: LD_INT 0
8350: PUSH
8351: LD_INT 1
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: IN
8358: IFFALSE 8383
// SetBName ( building , @ & GetSide ( building ) ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_STRING @
8367: PUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 255
8377: STR
8378: PPUSH
8379: CALL_OW 500
// end ; end_of_file
8383: LD_VAR 0 4
8387: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8388: LD_EXP 38
8392: PUSH
8393: CALL 8598 0 0
8397: AND
8398: PUSH
8399: LD_OWVAR 4
8403: AND
8404: IFFALSE 8595
8406: GO 8408
8408: DISABLE
8409: LD_INT 0
8411: PPUSH
8412: PPUSH
// begin canWin := false ;
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_INT 0
8420: ST_TO_ADDR
// if not HasPower ( your_side ) then
8421: LD_OWVAR 2
8425: PPUSH
8426: CALL 8638 0 1
8430: NOT
8431: IFFALSE 8442
// begin Multiplayer_Loose_Message ;
8433: CALL_OW 521
// enable ( mpLose ) ;
8437: LD_INT 102
8439: ENABLE_MARKED
// end else
8440: GO 8595
// begin canWin := true ;
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: LD_INT 1
8449: ST_TO_ADDR
// for i := 1 to 8 do
8450: LD_ADDR_VAR 0 1
8454: PUSH
8455: DOUBLE
8456: LD_INT 1
8458: DEC
8459: ST_TO_ADDR
8460: LD_INT 8
8462: PUSH
8463: FOR_TO
8464: IFFALSE 8581
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8466: LD_EXP 7
8470: PUSH
8471: LD_VAR 0 1
8475: ARRAY
8476: PUSH
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 108
8486: AND
8487: PUSH
8488: LD_VAR 0 1
8492: PUSH
8493: LD_OWVAR 2
8497: NONEQUAL
8498: AND
8499: IFFALSE 8579
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8501: LD_EXP 8
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: NOT
8512: PUSH
8513: LD_EXP 8
8517: PUSH
8518: LD_VAR 0 1
8522: ARRAY
8523: PUSH
8524: LD_EXP 8
8528: PUSH
8529: LD_OWVAR 2
8533: ARRAY
8534: NONEQUAL
8535: PUSH
8536: LD_OWVAR 2
8540: PPUSH
8541: LD_VAR 0 1
8545: PPUSH
8546: CALL_OW 81
8550: PUSH
8551: LD_INT 1
8553: NONEQUAL
8554: AND
8555: OR
8556: IFFALSE 8579
// if HasPower ( i ) then
8558: LD_VAR 0 1
8562: PPUSH
8563: CALL 8638 0 1
8567: IFFALSE 8579
// begin canWin := false ;
8569: LD_ADDR_VAR 0 2
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// break ;
8577: GO 8581
// end ;
8579: GO 8463
8581: POP
8582: POP
// if canWin then
8583: LD_VAR 0 2
8587: IFFALSE 8594
// enable ( mpWin ) else
8589: LD_INT 101
8591: ENABLE_MARKED
8592: GO 8595
// enable ;
8594: ENABLE
// end ; end ;
8595: PPOPN 2
8597: END
// function CanWinLoose ; begin
8598: LD_INT 0
8600: PPUSH
// result := true ;
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_INT 1
8608: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8609: CALL_OW 531
8613: PUSH
8614: CALL_OW 519
8618: PUSH
8619: LD_INT 1
8621: GREATER
8622: AND
8623: IFFALSE 8633
// result := false ;
8625: LD_ADDR_VAR 0 1
8629: PUSH
8630: LD_INT 0
8632: ST_TO_ADDR
// end ;
8633: LD_VAR 0 1
8637: RET
// function HasPower ( i ) ; begin
8638: LD_INT 0
8640: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8641: LD_ADDR_VAR 0 2
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_VAR 0 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 2
8660: PUSH
8661: LD_INT 21
8663: PUSH
8664: LD_INT 1
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 33
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 33
8683: PUSH
8684: LD_INT 5
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// end ; end_of_file
8706: LD_VAR 0 2
8710: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8711: LD_EXP 38
8715: IFFALSE 8758
8717: GO 8719
8719: DISABLE
8720: LD_INT 0
8722: PPUSH
// begin for i := 1 to 8 do
8723: LD_ADDR_VAR 0 1
8727: PUSH
8728: DOUBLE
8729: LD_INT 1
8731: DEC
8732: ST_TO_ADDR
8733: LD_INT 8
8735: PUSH
8736: FOR_TO
8737: IFFALSE 8756
// SetRestrict ( b_depot , i , state_disabled ) ;
8739: LD_INT 0
8741: PPUSH
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_INT 0
8749: PPUSH
8750: CALL_OW 324
8754: GO 8736
8756: POP
8757: POP
// end ;
8758: PPOPN 1
8760: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8761: LD_EXP 38
8765: PUSH
8766: CALL 8971 0 0
8770: AND
8771: PUSH
8772: LD_OWVAR 4
8776: AND
8777: IFFALSE 8968
8779: GO 8781
8781: DISABLE
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
// begin canWin := false ;
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// if not HasPower ( your_side ) then
8794: LD_OWVAR 2
8798: PPUSH
8799: CALL 9011 0 1
8803: NOT
8804: IFFALSE 8815
// begin Multiplayer_Loose_Message ;
8806: CALL_OW 521
// enable ( mpLose ) ;
8810: LD_INT 102
8812: ENABLE_MARKED
// end else
8813: GO 8968
// begin canWin := true ;
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// for i := 1 to 8 do
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: DOUBLE
8829: LD_INT 1
8831: DEC
8832: ST_TO_ADDR
8833: LD_INT 8
8835: PUSH
8836: FOR_TO
8837: IFFALSE 8954
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8839: LD_EXP 7
8843: PUSH
8844: LD_VAR 0 1
8848: ARRAY
8849: PUSH
8850: LD_VAR 0 1
8854: PPUSH
8855: CALL_OW 108
8859: AND
8860: PUSH
8861: LD_VAR 0 1
8865: PUSH
8866: LD_OWVAR 2
8870: NONEQUAL
8871: AND
8872: IFFALSE 8952
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8874: LD_EXP 8
8878: PUSH
8879: LD_VAR 0 1
8883: ARRAY
8884: NOT
8885: PUSH
8886: LD_EXP 8
8890: PUSH
8891: LD_VAR 0 1
8895: ARRAY
8896: PUSH
8897: LD_EXP 8
8901: PUSH
8902: LD_OWVAR 2
8906: ARRAY
8907: NONEQUAL
8908: PUSH
8909: LD_OWVAR 2
8913: PPUSH
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL_OW 81
8923: PUSH
8924: LD_INT 1
8926: NONEQUAL
8927: AND
8928: OR
8929: IFFALSE 8952
// if HasPower ( i ) then
8931: LD_VAR 0 1
8935: PPUSH
8936: CALL 9011 0 1
8940: IFFALSE 8952
// begin canWin := false ;
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: LD_INT 0
8949: ST_TO_ADDR
// break ;
8950: GO 8954
// end ;
8952: GO 8836
8954: POP
8955: POP
// if canWin then
8956: LD_VAR 0 2
8960: IFFALSE 8967
// enable ( mpWin ) else
8962: LD_INT 101
8964: ENABLE_MARKED
8965: GO 8968
// enable ;
8967: ENABLE
// end ; end ;
8968: PPOPN 2
8970: END
// function CanWinLoose ; begin
8971: LD_INT 0
8973: PPUSH
// result := true ;
8974: LD_ADDR_VAR 0 1
8978: PUSH
8979: LD_INT 1
8981: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8982: CALL_OW 531
8986: PUSH
8987: CALL_OW 519
8991: PUSH
8992: LD_INT 1
8994: GREATER
8995: AND
8996: IFFALSE 9006
// result := false ;
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// end ;
9006: LD_VAR 0 1
9010: RET
// function HasPower ( i ) ; begin
9011: LD_INT 0
9013: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9014: LD_INT 22
9016: PUSH
9017: LD_VAR 0 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 0
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PPUSH
9058: CALL_OW 69
9062: NOT
9063: IFFALSE 9067
// exit ;
9065: GO 9132
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9067: LD_ADDR_VAR 0 2
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_VAR 0 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 2
9086: PUSH
9087: LD_INT 21
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 33
9099: PUSH
9100: LD_INT 3
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 33
9109: PUSH
9110: LD_INT 5
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 69
9131: ST_TO_ADDR
// end ; end_of_file
9132: LD_VAR 0 2
9136: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9137: LD_INT 0
9139: PPUSH
9140: PPUSH
// if exist_mode then
9141: LD_VAR 0 2
9145: IFFALSE 9170
// unit := CreateCharacter ( prefix & ident ) else
9147: LD_ADDR_VAR 0 5
9151: PUSH
9152: LD_VAR 0 3
9156: PUSH
9157: LD_VAR 0 1
9161: STR
9162: PPUSH
9163: CALL_OW 34
9167: ST_TO_ADDR
9168: GO 9185
// unit := NewCharacter ( ident ) ;
9170: LD_ADDR_VAR 0 5
9174: PUSH
9175: LD_VAR 0 1
9179: PPUSH
9180: CALL_OW 25
9184: ST_TO_ADDR
// result := unit ;
9185: LD_ADDR_VAR 0 4
9189: PUSH
9190: LD_VAR 0 5
9194: ST_TO_ADDR
// end ;
9195: LD_VAR 0 4
9199: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9200: LD_INT 0
9202: PPUSH
9203: PPUSH
// if not side or not nation then
9204: LD_VAR 0 1
9208: NOT
9209: PUSH
9210: LD_VAR 0 2
9214: NOT
9215: OR
9216: IFFALSE 9220
// exit ;
9218: GO 9988
// case nation of nation_american :
9220: LD_VAR 0 2
9224: PUSH
9225: LD_INT 1
9227: DOUBLE
9228: EQUAL
9229: IFTRUE 9233
9231: GO 9447
9233: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9234: LD_ADDR_VAR 0 4
9238: PUSH
9239: LD_INT 35
9241: PUSH
9242: LD_INT 45
9244: PUSH
9245: LD_INT 46
9247: PUSH
9248: LD_INT 47
9250: PUSH
9251: LD_INT 82
9253: PUSH
9254: LD_INT 83
9256: PUSH
9257: LD_INT 84
9259: PUSH
9260: LD_INT 85
9262: PUSH
9263: LD_INT 86
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: LD_INT 6
9274: PUSH
9275: LD_INT 15
9277: PUSH
9278: LD_INT 16
9280: PUSH
9281: LD_INT 7
9283: PUSH
9284: LD_INT 12
9286: PUSH
9287: LD_INT 13
9289: PUSH
9290: LD_INT 10
9292: PUSH
9293: LD_INT 14
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 21
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_INT 25
9307: PUSH
9308: LD_INT 32
9310: PUSH
9311: LD_INT 27
9313: PUSH
9314: LD_INT 36
9316: PUSH
9317: LD_INT 69
9319: PUSH
9320: LD_INT 39
9322: PUSH
9323: LD_INT 34
9325: PUSH
9326: LD_INT 40
9328: PUSH
9329: LD_INT 48
9331: PUSH
9332: LD_INT 49
9334: PUSH
9335: LD_INT 50
9337: PUSH
9338: LD_INT 51
9340: PUSH
9341: LD_INT 52
9343: PUSH
9344: LD_INT 53
9346: PUSH
9347: LD_INT 54
9349: PUSH
9350: LD_INT 55
9352: PUSH
9353: LD_INT 56
9355: PUSH
9356: LD_INT 57
9358: PUSH
9359: LD_INT 58
9361: PUSH
9362: LD_INT 59
9364: PUSH
9365: LD_INT 60
9367: PUSH
9368: LD_INT 61
9370: PUSH
9371: LD_INT 62
9373: PUSH
9374: LD_INT 80
9376: PUSH
9377: LD_INT 82
9379: PUSH
9380: LD_INT 83
9382: PUSH
9383: LD_INT 84
9385: PUSH
9386: LD_INT 85
9388: PUSH
9389: LD_INT 86
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: ST_TO_ADDR
9445: GO 9912
9447: LD_INT 2
9449: DOUBLE
9450: EQUAL
9451: IFTRUE 9455
9453: GO 9681
9455: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9456: LD_ADDR_VAR 0 4
9460: PUSH
9461: LD_INT 35
9463: PUSH
9464: LD_INT 45
9466: PUSH
9467: LD_INT 46
9469: PUSH
9470: LD_INT 47
9472: PUSH
9473: LD_INT 82
9475: PUSH
9476: LD_INT 83
9478: PUSH
9479: LD_INT 84
9481: PUSH
9482: LD_INT 85
9484: PUSH
9485: LD_INT 87
9487: PUSH
9488: LD_INT 70
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: LD_INT 11
9496: PUSH
9497: LD_INT 3
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: LD_INT 6
9508: PUSH
9509: LD_INT 15
9511: PUSH
9512: LD_INT 18
9514: PUSH
9515: LD_INT 7
9517: PUSH
9518: LD_INT 17
9520: PUSH
9521: LD_INT 8
9523: PUSH
9524: LD_INT 20
9526: PUSH
9527: LD_INT 21
9529: PUSH
9530: LD_INT 22
9532: PUSH
9533: LD_INT 72
9535: PUSH
9536: LD_INT 26
9538: PUSH
9539: LD_INT 69
9541: PUSH
9542: LD_INT 39
9544: PUSH
9545: LD_INT 40
9547: PUSH
9548: LD_INT 41
9550: PUSH
9551: LD_INT 42
9553: PUSH
9554: LD_INT 43
9556: PUSH
9557: LD_INT 48
9559: PUSH
9560: LD_INT 49
9562: PUSH
9563: LD_INT 50
9565: PUSH
9566: LD_INT 51
9568: PUSH
9569: LD_INT 52
9571: PUSH
9572: LD_INT 53
9574: PUSH
9575: LD_INT 54
9577: PUSH
9578: LD_INT 55
9580: PUSH
9581: LD_INT 56
9583: PUSH
9584: LD_INT 60
9586: PUSH
9587: LD_INT 61
9589: PUSH
9590: LD_INT 62
9592: PUSH
9593: LD_INT 66
9595: PUSH
9596: LD_INT 67
9598: PUSH
9599: LD_INT 68
9601: PUSH
9602: LD_INT 81
9604: PUSH
9605: LD_INT 82
9607: PUSH
9608: LD_INT 83
9610: PUSH
9611: LD_INT 84
9613: PUSH
9614: LD_INT 85
9616: PUSH
9617: LD_INT 87
9619: PUSH
9620: LD_INT 88
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: ST_TO_ADDR
9679: GO 9912
9681: LD_INT 3
9683: DOUBLE
9684: EQUAL
9685: IFTRUE 9689
9687: GO 9911
9689: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9690: LD_ADDR_VAR 0 4
9694: PUSH
9695: LD_INT 46
9697: PUSH
9698: LD_INT 47
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: LD_INT 82
9709: PUSH
9710: LD_INT 83
9712: PUSH
9713: LD_INT 84
9715: PUSH
9716: LD_INT 85
9718: PUSH
9719: LD_INT 86
9721: PUSH
9722: LD_INT 11
9724: PUSH
9725: LD_INT 9
9727: PUSH
9728: LD_INT 20
9730: PUSH
9731: LD_INT 19
9733: PUSH
9734: LD_INT 21
9736: PUSH
9737: LD_INT 24
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 28
9748: PUSH
9749: LD_INT 29
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: LD_INT 31
9757: PUSH
9758: LD_INT 37
9760: PUSH
9761: LD_INT 38
9763: PUSH
9764: LD_INT 32
9766: PUSH
9767: LD_INT 27
9769: PUSH
9770: LD_INT 33
9772: PUSH
9773: LD_INT 69
9775: PUSH
9776: LD_INT 39
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 40
9784: PUSH
9785: LD_INT 71
9787: PUSH
9788: LD_INT 23
9790: PUSH
9791: LD_INT 44
9793: PUSH
9794: LD_INT 48
9796: PUSH
9797: LD_INT 49
9799: PUSH
9800: LD_INT 50
9802: PUSH
9803: LD_INT 51
9805: PUSH
9806: LD_INT 52
9808: PUSH
9809: LD_INT 53
9811: PUSH
9812: LD_INT 54
9814: PUSH
9815: LD_INT 55
9817: PUSH
9818: LD_INT 56
9820: PUSH
9821: LD_INT 57
9823: PUSH
9824: LD_INT 58
9826: PUSH
9827: LD_INT 59
9829: PUSH
9830: LD_INT 63
9832: PUSH
9833: LD_INT 64
9835: PUSH
9836: LD_INT 65
9838: PUSH
9839: LD_INT 82
9841: PUSH
9842: LD_INT 83
9844: PUSH
9845: LD_INT 84
9847: PUSH
9848: LD_INT 85
9850: PUSH
9851: LD_INT 86
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: ST_TO_ADDR
9909: GO 9912
9911: POP
// if state > - 1 and state < 3 then
9912: LD_VAR 0 3
9916: PUSH
9917: LD_INT 1
9919: NEG
9920: GREATER
9921: PUSH
9922: LD_VAR 0 3
9926: PUSH
9927: LD_INT 3
9929: LESS
9930: AND
9931: IFFALSE 9988
// for i in result do
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 4
9942: PUSH
9943: FOR_IN
9944: IFFALSE 9986
// if GetTech ( i , side ) <> state then
9946: LD_VAR 0 5
9950: PPUSH
9951: LD_VAR 0 1
9955: PPUSH
9956: CALL_OW 321
9960: PUSH
9961: LD_VAR 0 3
9965: NONEQUAL
9966: IFFALSE 9984
// result := result diff i ;
9968: LD_ADDR_VAR 0 4
9972: PUSH
9973: LD_VAR 0 4
9977: PUSH
9978: LD_VAR 0 5
9982: DIFF
9983: ST_TO_ADDR
9984: GO 9943
9986: POP
9987: POP
// end ;
9988: LD_VAR 0 4
9992: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9993: LD_INT 0
9995: PPUSH
9996: PPUSH
9997: PPUSH
// result := true ;
9998: LD_ADDR_VAR 0 3
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10006: LD_ADDR_VAR 0 5
10010: PUSH
10011: LD_VAR 0 2
10015: PPUSH
10016: CALL_OW 480
10020: ST_TO_ADDR
// if not tmp then
10021: LD_VAR 0 5
10025: NOT
10026: IFFALSE 10030
// exit ;
10028: GO 10079
// for i in tmp do
10030: LD_ADDR_VAR 0 4
10034: PUSH
10035: LD_VAR 0 5
10039: PUSH
10040: FOR_IN
10041: IFFALSE 10077
// if GetTech ( i , side ) <> state_researched then
10043: LD_VAR 0 4
10047: PPUSH
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 321
10057: PUSH
10058: LD_INT 2
10060: NONEQUAL
10061: IFFALSE 10075
// begin result := false ;
10063: LD_ADDR_VAR 0 3
10067: PUSH
10068: LD_INT 0
10070: ST_TO_ADDR
// exit ;
10071: POP
10072: POP
10073: GO 10079
// end ;
10075: GO 10040
10077: POP
10078: POP
// end ;
10079: LD_VAR 0 3
10083: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10084: LD_INT 0
10086: PPUSH
10087: PPUSH
10088: PPUSH
10089: PPUSH
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
10096: PPUSH
10097: PPUSH
10098: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10099: LD_VAR 0 1
10103: NOT
10104: PUSH
10105: LD_VAR 0 1
10109: PPUSH
10110: CALL_OW 257
10114: PUSH
10115: LD_INT 9
10117: NONEQUAL
10118: OR
10119: IFFALSE 10123
// exit ;
10121: GO 10696
// side := GetSide ( unit ) ;
10123: LD_ADDR_VAR 0 9
10127: PUSH
10128: LD_VAR 0 1
10132: PPUSH
10133: CALL_OW 255
10137: ST_TO_ADDR
// tech_space := tech_spacanom ;
10138: LD_ADDR_VAR 0 12
10142: PUSH
10143: LD_INT 29
10145: ST_TO_ADDR
// tech_time := tech_taurad ;
10146: LD_ADDR_VAR 0 13
10150: PUSH
10151: LD_INT 28
10153: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10154: LD_ADDR_VAR 0 11
10158: PUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: CALL_OW 310
10168: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10169: LD_VAR 0 11
10173: PPUSH
10174: CALL_OW 247
10178: PUSH
10179: LD_INT 2
10181: EQUAL
10182: IFFALSE 10186
// exit ;
10184: GO 10696
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10186: LD_ADDR_VAR 0 8
10190: PUSH
10191: LD_INT 81
10193: PUSH
10194: LD_VAR 0 9
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 3
10205: PUSH
10206: LD_INT 21
10208: PUSH
10209: LD_INT 3
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: ST_TO_ADDR
// if not tmp then
10229: LD_VAR 0 8
10233: NOT
10234: IFFALSE 10238
// exit ;
10236: GO 10696
// if in_unit then
10238: LD_VAR 0 11
10242: IFFALSE 10266
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10244: LD_ADDR_VAR 0 10
10248: PUSH
10249: LD_VAR 0 8
10253: PPUSH
10254: LD_VAR 0 11
10258: PPUSH
10259: CALL_OW 74
10263: ST_TO_ADDR
10264: GO 10286
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10266: LD_ADDR_VAR 0 10
10270: PUSH
10271: LD_VAR 0 8
10275: PPUSH
10276: LD_VAR 0 1
10280: PPUSH
10281: CALL_OW 74
10285: ST_TO_ADDR
// if not enemy then
10286: LD_VAR 0 10
10290: NOT
10291: IFFALSE 10295
// exit ;
10293: GO 10696
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10295: LD_VAR 0 11
10299: PUSH
10300: LD_VAR 0 11
10304: PPUSH
10305: LD_VAR 0 10
10309: PPUSH
10310: CALL_OW 296
10314: PUSH
10315: LD_INT 13
10317: GREATER
10318: AND
10319: PUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: LD_VAR 0 10
10329: PPUSH
10330: CALL_OW 296
10334: PUSH
10335: LD_INT 12
10337: GREATER
10338: OR
10339: IFFALSE 10343
// exit ;
10341: GO 10696
// missile := [ 1 ] ;
10343: LD_ADDR_VAR 0 14
10347: PUSH
10348: LD_INT 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10354: LD_VAR 0 9
10358: PPUSH
10359: LD_VAR 0 12
10363: PPUSH
10364: CALL_OW 325
10368: IFFALSE 10397
// missile := Replace ( missile , missile + 1 , 2 ) ;
10370: LD_ADDR_VAR 0 14
10374: PUSH
10375: LD_VAR 0 14
10379: PPUSH
10380: LD_VAR 0 14
10384: PUSH
10385: LD_INT 1
10387: PLUS
10388: PPUSH
10389: LD_INT 2
10391: PPUSH
10392: CALL_OW 1
10396: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10397: LD_VAR 0 9
10401: PPUSH
10402: LD_VAR 0 13
10406: PPUSH
10407: CALL_OW 325
10411: PUSH
10412: LD_VAR 0 10
10416: PPUSH
10417: CALL_OW 255
10421: PPUSH
10422: LD_VAR 0 13
10426: PPUSH
10427: CALL_OW 325
10431: NOT
10432: AND
10433: IFFALSE 10462
// missile := Replace ( missile , missile + 1 , 3 ) ;
10435: LD_ADDR_VAR 0 14
10439: PUSH
10440: LD_VAR 0 14
10444: PPUSH
10445: LD_VAR 0 14
10449: PUSH
10450: LD_INT 1
10452: PLUS
10453: PPUSH
10454: LD_INT 3
10456: PPUSH
10457: CALL_OW 1
10461: ST_TO_ADDR
// if missile < 2 then
10462: LD_VAR 0 14
10466: PUSH
10467: LD_INT 2
10469: LESS
10470: IFFALSE 10474
// exit ;
10472: GO 10696
// x := GetX ( enemy ) ;
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 10
10483: PPUSH
10484: CALL_OW 250
10488: ST_TO_ADDR
// y := GetY ( enemy ) ;
10489: LD_ADDR_VAR 0 5
10493: PUSH
10494: LD_VAR 0 10
10498: PPUSH
10499: CALL_OW 251
10503: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10504: LD_ADDR_VAR 0 6
10508: PUSH
10509: LD_VAR 0 4
10513: PUSH
10514: LD_INT 1
10516: NEG
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: CALL_OW 12
10525: PLUS
10526: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10527: LD_ADDR_VAR 0 7
10531: PUSH
10532: LD_VAR 0 5
10536: PUSH
10537: LD_INT 1
10539: NEG
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: CALL_OW 12
10548: PLUS
10549: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10550: LD_VAR 0 6
10554: PPUSH
10555: LD_VAR 0 7
10559: PPUSH
10560: CALL_OW 488
10564: NOT
10565: IFFALSE 10587
// begin _x := x ;
10567: LD_ADDR_VAR 0 6
10571: PUSH
10572: LD_VAR 0 4
10576: ST_TO_ADDR
// _y := y ;
10577: LD_ADDR_VAR 0 7
10581: PUSH
10582: LD_VAR 0 5
10586: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10587: LD_ADDR_VAR 0 3
10591: PUSH
10592: LD_INT 1
10594: PPUSH
10595: LD_VAR 0 14
10599: PPUSH
10600: CALL_OW 12
10604: ST_TO_ADDR
// case i of 1 :
10605: LD_VAR 0 3
10609: PUSH
10610: LD_INT 1
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10635
10618: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_VAR 0 10
10628: PPUSH
10629: CALL_OW 115
10633: GO 10696
10635: LD_INT 2
10637: DOUBLE
10638: EQUAL
10639: IFTRUE 10643
10641: GO 10665
10643: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10644: LD_VAR 0 1
10648: PPUSH
10649: LD_VAR 0 6
10653: PPUSH
10654: LD_VAR 0 7
10658: PPUSH
10659: CALL_OW 153
10663: GO 10696
10665: LD_INT 3
10667: DOUBLE
10668: EQUAL
10669: IFTRUE 10673
10671: GO 10695
10673: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10674: LD_VAR 0 1
10678: PPUSH
10679: LD_VAR 0 6
10683: PPUSH
10684: LD_VAR 0 7
10688: PPUSH
10689: CALL_OW 154
10693: GO 10696
10695: POP
// end ;
10696: LD_VAR 0 2
10700: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
10708: PPUSH
// if not unit or not building then
10709: LD_VAR 0 1
10713: NOT
10714: PUSH
10715: LD_VAR 0 2
10719: NOT
10720: OR
10721: IFFALSE 10725
// exit ;
10723: GO 10883
// x := GetX ( building ) ;
10725: LD_ADDR_VAR 0 5
10729: PUSH
10730: LD_VAR 0 2
10734: PPUSH
10735: CALL_OW 250
10739: ST_TO_ADDR
// y := GetY ( building ) ;
10740: LD_ADDR_VAR 0 6
10744: PUSH
10745: LD_VAR 0 2
10749: PPUSH
10750: CALL_OW 251
10754: ST_TO_ADDR
// for i = 0 to 5 do
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: DOUBLE
10761: LD_INT 0
10763: DEC
10764: ST_TO_ADDR
10765: LD_INT 5
10767: PUSH
10768: FOR_TO
10769: IFFALSE 10881
// begin _x := ShiftX ( x , i , 3 ) ;
10771: LD_ADDR_VAR 0 7
10775: PUSH
10776: LD_VAR 0 5
10780: PPUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: LD_INT 3
10788: PPUSH
10789: CALL_OW 272
10793: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10794: LD_ADDR_VAR 0 8
10798: PUSH
10799: LD_VAR 0 6
10803: PPUSH
10804: LD_VAR 0 4
10808: PPUSH
10809: LD_INT 3
10811: PPUSH
10812: CALL_OW 273
10816: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10817: LD_VAR 0 7
10821: PPUSH
10822: LD_VAR 0 8
10826: PPUSH
10827: CALL_OW 488
10831: NOT
10832: IFFALSE 10836
// continue ;
10834: GO 10768
// if HexInfo ( _x , _y ) = 0 then
10836: LD_VAR 0 7
10840: PPUSH
10841: LD_VAR 0 8
10845: PPUSH
10846: CALL_OW 428
10850: PUSH
10851: LD_INT 0
10853: EQUAL
10854: IFFALSE 10879
// begin ComMoveXY ( unit , _x , _y ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: LD_VAR 0 7
10865: PPUSH
10866: LD_VAR 0 8
10870: PPUSH
10871: CALL_OW 111
// exit ;
10875: POP
10876: POP
10877: GO 10883
// end ; end ;
10879: GO 10768
10881: POP
10882: POP
// end ;
10883: LD_VAR 0 3
10887: RET
// export function ScanBase ( side , base_area ) ; begin
10888: LD_INT 0
10890: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10891: LD_ADDR_VAR 0 3
10895: PUSH
10896: LD_VAR 0 2
10900: PPUSH
10901: LD_INT 81
10903: PUSH
10904: LD_VAR 0 1
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 70
10917: ST_TO_ADDR
// end ;
10918: LD_VAR 0 3
10922: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10923: LD_INT 0
10925: PPUSH
10926: PPUSH
10927: PPUSH
10928: PPUSH
// result := false ;
10929: LD_ADDR_VAR 0 2
10933: PUSH
10934: LD_INT 0
10936: ST_TO_ADDR
// side := GetSide ( unit ) ;
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: LD_VAR 0 1
10946: PPUSH
10947: CALL_OW 255
10951: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10952: LD_ADDR_VAR 0 4
10956: PUSH
10957: LD_VAR 0 1
10961: PPUSH
10962: CALL_OW 248
10966: ST_TO_ADDR
// case nat of 1 :
10967: LD_VAR 0 4
10971: PUSH
10972: LD_INT 1
10974: DOUBLE
10975: EQUAL
10976: IFTRUE 10980
10978: GO 10991
10980: POP
// tech := tech_lassight ; 2 :
10981: LD_ADDR_VAR 0 5
10985: PUSH
10986: LD_INT 12
10988: ST_TO_ADDR
10989: GO 11030
10991: LD_INT 2
10993: DOUBLE
10994: EQUAL
10995: IFTRUE 10999
10997: GO 11010
10999: POP
// tech := tech_mortar ; 3 :
11000: LD_ADDR_VAR 0 5
11004: PUSH
11005: LD_INT 41
11007: ST_TO_ADDR
11008: GO 11030
11010: LD_INT 3
11012: DOUBLE
11013: EQUAL
11014: IFTRUE 11018
11016: GO 11029
11018: POP
// tech := tech_bazooka ; end ;
11019: LD_ADDR_VAR 0 5
11023: PUSH
11024: LD_INT 44
11026: ST_TO_ADDR
11027: GO 11030
11029: POP
// if Researched ( side , tech ) then
11030: LD_VAR 0 3
11034: PPUSH
11035: LD_VAR 0 5
11039: PPUSH
11040: CALL_OW 325
11044: IFFALSE 11071
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11046: LD_ADDR_VAR 0 2
11050: PUSH
11051: LD_INT 5
11053: PUSH
11054: LD_INT 8
11056: PUSH
11057: LD_INT 9
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: LD_VAR 0 4
11069: ARRAY
11070: ST_TO_ADDR
// end ;
11071: LD_VAR 0 2
11075: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11076: LD_INT 0
11078: PPUSH
11079: PPUSH
11080: PPUSH
// if not mines then
11081: LD_VAR 0 2
11085: NOT
11086: IFFALSE 11090
// exit ;
11088: GO 11234
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11090: LD_ADDR_VAR 0 5
11094: PUSH
11095: LD_INT 81
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 3
11109: PUSH
11110: LD_INT 21
11112: PUSH
11113: LD_INT 3
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PPUSH
11128: CALL_OW 69
11132: ST_TO_ADDR
// for i in mines do
11133: LD_ADDR_VAR 0 4
11137: PUSH
11138: LD_VAR 0 2
11142: PUSH
11143: FOR_IN
11144: IFFALSE 11232
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11146: LD_VAR 0 4
11150: PUSH
11151: LD_INT 1
11153: ARRAY
11154: PPUSH
11155: LD_VAR 0 4
11159: PUSH
11160: LD_INT 2
11162: ARRAY
11163: PPUSH
11164: CALL_OW 458
11168: NOT
11169: IFFALSE 11173
// continue ;
11171: GO 11143
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11173: LD_VAR 0 4
11177: PUSH
11178: LD_INT 1
11180: ARRAY
11181: PPUSH
11182: LD_VAR 0 4
11186: PUSH
11187: LD_INT 2
11189: ARRAY
11190: PPUSH
11191: CALL_OW 428
11195: PUSH
11196: LD_VAR 0 5
11200: IN
11201: IFFALSE 11230
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11203: LD_VAR 0 4
11207: PUSH
11208: LD_INT 1
11210: ARRAY
11211: PPUSH
11212: LD_VAR 0 4
11216: PUSH
11217: LD_INT 2
11219: ARRAY
11220: PPUSH
11221: LD_VAR 0 1
11225: PPUSH
11226: CALL_OW 456
// end ;
11230: GO 11143
11232: POP
11233: POP
// end ;
11234: LD_VAR 0 3
11238: RET
// export function Count ( array ) ; begin
11239: LD_INT 0
11241: PPUSH
// result := array + 0 ;
11242: LD_ADDR_VAR 0 2
11246: PUSH
11247: LD_VAR 0 1
11251: PUSH
11252: LD_INT 0
11254: PLUS
11255: ST_TO_ADDR
// end ;
11256: LD_VAR 0 2
11260: RET
// export function IsEmpty ( building ) ; begin
11261: LD_INT 0
11263: PPUSH
// if not building then
11264: LD_VAR 0 1
11268: NOT
11269: IFFALSE 11273
// exit ;
11271: GO 11316
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11273: LD_ADDR_VAR 0 2
11277: PUSH
11278: LD_VAR 0 1
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 255
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 58
11302: PUSH
11303: EMPTY
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PPUSH
11310: CALL_OW 69
11314: IN
11315: ST_TO_ADDR
// end ;
11316: LD_VAR 0 2
11320: RET
// export function IsNotFull ( building ) ; var places ; begin
11321: LD_INT 0
11323: PPUSH
11324: PPUSH
// if not building then
11325: LD_VAR 0 1
11329: NOT
11330: IFFALSE 11334
// exit ;
11332: GO 11362
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: LD_VAR 0 1
11343: PPUSH
11344: LD_INT 3
11346: PUSH
11347: LD_INT 62
11349: PUSH
11350: EMPTY
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PPUSH
11357: CALL_OW 72
11361: ST_TO_ADDR
// end ;
11362: LD_VAR 0 2
11366: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11367: LD_INT 0
11369: PPUSH
11370: PPUSH
11371: PPUSH
11372: PPUSH
// tmp := [ ] ;
11373: LD_ADDR_VAR 0 3
11377: PUSH
11378: EMPTY
11379: ST_TO_ADDR
// list := [ ] ;
11380: LD_ADDR_VAR 0 5
11384: PUSH
11385: EMPTY
11386: ST_TO_ADDR
// for i = 16 to 25 do
11387: LD_ADDR_VAR 0 4
11391: PUSH
11392: DOUBLE
11393: LD_INT 16
11395: DEC
11396: ST_TO_ADDR
11397: LD_INT 25
11399: PUSH
11400: FOR_TO
11401: IFFALSE 11474
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11403: LD_ADDR_VAR 0 3
11407: PUSH
11408: LD_VAR 0 3
11412: PUSH
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PPUSH
11421: CALL_OW 255
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 91
11432: PUSH
11433: LD_VAR 0 1
11437: PUSH
11438: LD_INT 6
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 30
11448: PUSH
11449: LD_VAR 0 4
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: PPUSH
11466: CALL_OW 69
11470: ADD
11471: ST_TO_ADDR
11472: GO 11400
11474: POP
11475: POP
// for i = 1 to tmp do
11476: LD_ADDR_VAR 0 4
11480: PUSH
11481: DOUBLE
11482: LD_INT 1
11484: DEC
11485: ST_TO_ADDR
11486: LD_VAR 0 3
11490: PUSH
11491: FOR_TO
11492: IFFALSE 11580
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11494: LD_ADDR_VAR 0 5
11498: PUSH
11499: LD_VAR 0 5
11503: PUSH
11504: LD_VAR 0 3
11508: PUSH
11509: LD_VAR 0 4
11513: ARRAY
11514: PPUSH
11515: CALL_OW 266
11519: PUSH
11520: LD_VAR 0 3
11524: PUSH
11525: LD_VAR 0 4
11529: ARRAY
11530: PPUSH
11531: CALL_OW 250
11535: PUSH
11536: LD_VAR 0 3
11540: PUSH
11541: LD_VAR 0 4
11545: ARRAY
11546: PPUSH
11547: CALL_OW 251
11551: PUSH
11552: LD_VAR 0 3
11556: PUSH
11557: LD_VAR 0 4
11561: ARRAY
11562: PPUSH
11563: CALL_OW 254
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: ADD
11577: ST_TO_ADDR
11578: GO 11491
11580: POP
11581: POP
// result := list ;
11582: LD_ADDR_VAR 0 2
11586: PUSH
11587: LD_VAR 0 5
11591: ST_TO_ADDR
// end ;
11592: LD_VAR 0 2
11596: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11597: LD_INT 0
11599: PPUSH
11600: PPUSH
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
11605: PPUSH
// if not factory then
11606: LD_VAR 0 1
11610: NOT
11611: IFFALSE 11615
// exit ;
11613: GO 12208
// if control = control_apeman then
11615: LD_VAR 0 4
11619: PUSH
11620: LD_INT 5
11622: EQUAL
11623: IFFALSE 11732
// begin tmp := UnitsInside ( factory ) ;
11625: LD_ADDR_VAR 0 8
11629: PUSH
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 313
11639: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11640: LD_VAR 0 8
11644: PPUSH
11645: LD_INT 25
11647: PUSH
11648: LD_INT 12
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PPUSH
11655: CALL_OW 72
11659: NOT
11660: IFFALSE 11670
// control := control_manual ;
11662: LD_ADDR_VAR 0 4
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11670: LD_ADDR_VAR 0 8
11674: PUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL 11367 0 1
11684: ST_TO_ADDR
// if tmp then
11685: LD_VAR 0 8
11689: IFFALSE 11732
// begin for i in tmp do
11691: LD_ADDR_VAR 0 7
11695: PUSH
11696: LD_VAR 0 8
11700: PUSH
11701: FOR_IN
11702: IFFALSE 11730
// if i [ 1 ] = b_ext_radio then
11704: LD_VAR 0 7
11708: PUSH
11709: LD_INT 1
11711: ARRAY
11712: PUSH
11713: LD_INT 22
11715: EQUAL
11716: IFFALSE 11728
// begin control := control_remote ;
11718: LD_ADDR_VAR 0 4
11722: PUSH
11723: LD_INT 2
11725: ST_TO_ADDR
// break ;
11726: GO 11730
// end ;
11728: GO 11701
11730: POP
11731: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11732: LD_VAR 0 1
11736: PPUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_VAR 0 3
11746: PPUSH
11747: LD_VAR 0 4
11751: PPUSH
11752: LD_VAR 0 5
11756: PPUSH
11757: CALL_OW 448
11761: IFFALSE 11796
// begin result := [ chassis , engine , control , weapon ] ;
11763: LD_ADDR_VAR 0 6
11767: PUSH
11768: LD_VAR 0 2
11772: PUSH
11773: LD_VAR 0 3
11777: PUSH
11778: LD_VAR 0 4
11782: PUSH
11783: LD_VAR 0 5
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: ST_TO_ADDR
// exit ;
11794: GO 12208
// end ; _chassis := AvailableChassisList ( factory ) ;
11796: LD_ADDR_VAR 0 9
11800: PUSH
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL_OW 475
11810: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11811: LD_ADDR_VAR 0 11
11815: PUSH
11816: LD_VAR 0 1
11820: PPUSH
11821: CALL_OW 476
11825: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11826: LD_ADDR_VAR 0 12
11830: PUSH
11831: LD_VAR 0 1
11835: PPUSH
11836: CALL_OW 477
11840: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11841: LD_ADDR_VAR 0 10
11845: PUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 478
11855: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11856: LD_VAR 0 9
11860: NOT
11861: PUSH
11862: LD_VAR 0 11
11866: NOT
11867: OR
11868: PUSH
11869: LD_VAR 0 12
11873: NOT
11874: OR
11875: PUSH
11876: LD_VAR 0 10
11880: NOT
11881: OR
11882: IFFALSE 11917
// begin result := [ chassis , engine , control , weapon ] ;
11884: LD_ADDR_VAR 0 6
11888: PUSH
11889: LD_VAR 0 2
11893: PUSH
11894: LD_VAR 0 3
11898: PUSH
11899: LD_VAR 0 4
11903: PUSH
11904: LD_VAR 0 5
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: ST_TO_ADDR
// exit ;
11915: GO 12208
// end ; if not chassis in _chassis then
11917: LD_VAR 0 2
11921: PUSH
11922: LD_VAR 0 9
11926: IN
11927: NOT
11928: IFFALSE 11954
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11930: LD_ADDR_VAR 0 2
11934: PUSH
11935: LD_VAR 0 9
11939: PUSH
11940: LD_INT 1
11942: PPUSH
11943: LD_VAR 0 9
11947: PPUSH
11948: CALL_OW 12
11952: ARRAY
11953: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11954: LD_VAR 0 2
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: CALL 12213 0 2
11968: NOT
11969: IFFALSE 12028
// repeat engine := _engine [ 1 ] ;
11971: LD_ADDR_VAR 0 3
11975: PUSH
11976: LD_VAR 0 11
11980: PUSH
11981: LD_INT 1
11983: ARRAY
11984: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11985: LD_ADDR_VAR 0 11
11989: PUSH
11990: LD_VAR 0 11
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 3
12002: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12003: LD_VAR 0 2
12007: PPUSH
12008: LD_VAR 0 3
12012: PPUSH
12013: CALL 12213 0 2
12017: PUSH
12018: LD_VAR 0 11
12022: PUSH
12023: EMPTY
12024: EQUAL
12025: OR
12026: IFFALSE 11971
// if not control in _control then
12028: LD_VAR 0 4
12032: PUSH
12033: LD_VAR 0 12
12037: IN
12038: NOT
12039: IFFALSE 12065
// control := _control [ rand ( 1 , _control ) ] ;
12041: LD_ADDR_VAR 0 4
12045: PUSH
12046: LD_VAR 0 12
12050: PUSH
12051: LD_INT 1
12053: PPUSH
12054: LD_VAR 0 12
12058: PPUSH
12059: CALL_OW 12
12063: ARRAY
12064: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12065: LD_VAR 0 2
12069: PPUSH
12070: LD_VAR 0 5
12074: PPUSH
12075: CALL 12433 0 2
12079: NOT
12080: IFFALSE 12139
// repeat weapon := _weapon [ 1 ] ;
12082: LD_ADDR_VAR 0 5
12086: PUSH
12087: LD_VAR 0 10
12091: PUSH
12092: LD_INT 1
12094: ARRAY
12095: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12096: LD_ADDR_VAR 0 10
12100: PUSH
12101: LD_VAR 0 10
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: CALL_OW 3
12113: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_VAR 0 5
12123: PPUSH
12124: CALL 12433 0 2
12128: PUSH
12129: LD_VAR 0 10
12133: PUSH
12134: EMPTY
12135: EQUAL
12136: OR
12137: IFFALSE 12082
// result := [ ] ;
12139: LD_ADDR_VAR 0 6
12143: PUSH
12144: EMPTY
12145: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12146: LD_VAR 0 1
12150: PPUSH
12151: LD_VAR 0 2
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_VAR 0 4
12165: PPUSH
12166: LD_VAR 0 5
12170: PPUSH
12171: CALL_OW 448
12175: IFFALSE 12208
// result := [ chassis , engine , control , weapon ] ;
12177: LD_ADDR_VAR 0 6
12181: PUSH
12182: LD_VAR 0 2
12186: PUSH
12187: LD_VAR 0 3
12191: PUSH
12192: LD_VAR 0 4
12196: PUSH
12197: LD_VAR 0 5
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: ST_TO_ADDR
// end ;
12208: LD_VAR 0 6
12212: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12213: LD_INT 0
12215: PPUSH
// if not chassis or not engine then
12216: LD_VAR 0 1
12220: NOT
12221: PUSH
12222: LD_VAR 0 2
12226: NOT
12227: OR
12228: IFFALSE 12232
// exit ;
12230: GO 12428
// case engine of engine_solar :
12232: LD_VAR 0 2
12236: PUSH
12237: LD_INT 2
12239: DOUBLE
12240: EQUAL
12241: IFTRUE 12245
12243: GO 12283
12245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12246: LD_ADDR_VAR 0 3
12250: PUSH
12251: LD_INT 11
12253: PUSH
12254: LD_INT 12
12256: PUSH
12257: LD_INT 13
12259: PUSH
12260: LD_INT 14
12262: PUSH
12263: LD_INT 1
12265: PUSH
12266: LD_INT 2
12268: PUSH
12269: LD_INT 3
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: ST_TO_ADDR
12281: GO 12412
12283: LD_INT 1
12285: DOUBLE
12286: EQUAL
12287: IFTRUE 12291
12289: GO 12353
12291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12292: LD_ADDR_VAR 0 3
12296: PUSH
12297: LD_INT 11
12299: PUSH
12300: LD_INT 12
12302: PUSH
12303: LD_INT 13
12305: PUSH
12306: LD_INT 14
12308: PUSH
12309: LD_INT 1
12311: PUSH
12312: LD_INT 2
12314: PUSH
12315: LD_INT 3
12317: PUSH
12318: LD_INT 4
12320: PUSH
12321: LD_INT 5
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 23
12329: PUSH
12330: LD_INT 22
12332: PUSH
12333: LD_INT 24
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: ST_TO_ADDR
12351: GO 12412
12353: LD_INT 3
12355: DOUBLE
12356: EQUAL
12357: IFTRUE 12361
12359: GO 12411
12361: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12362: LD_ADDR_VAR 0 3
12366: PUSH
12367: LD_INT 13
12369: PUSH
12370: LD_INT 14
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: LD_INT 3
12378: PUSH
12379: LD_INT 4
12381: PUSH
12382: LD_INT 5
12384: PUSH
12385: LD_INT 21
12387: PUSH
12388: LD_INT 22
12390: PUSH
12391: LD_INT 23
12393: PUSH
12394: LD_INT 24
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: ST_TO_ADDR
12409: GO 12412
12411: POP
// result := ( chassis in result ) ;
12412: LD_ADDR_VAR 0 3
12416: PUSH
12417: LD_VAR 0 1
12421: PUSH
12422: LD_VAR 0 3
12426: IN
12427: ST_TO_ADDR
// end ;
12428: LD_VAR 0 3
12432: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12433: LD_INT 0
12435: PPUSH
// if not chassis or not weapon then
12436: LD_VAR 0 1
12440: NOT
12441: PUSH
12442: LD_VAR 0 2
12446: NOT
12447: OR
12448: IFFALSE 12452
// exit ;
12450: GO 13512
// case weapon of us_machine_gun :
12452: LD_VAR 0 2
12456: PUSH
12457: LD_INT 2
12459: DOUBLE
12460: EQUAL
12461: IFTRUE 12465
12463: GO 12495
12465: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: LD_INT 1
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 3
12479: PUSH
12480: LD_INT 4
12482: PUSH
12483: LD_INT 5
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: ST_TO_ADDR
12493: GO 13496
12495: LD_INT 3
12497: DOUBLE
12498: EQUAL
12499: IFTRUE 12503
12501: GO 12533
12503: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12504: LD_ADDR_VAR 0 3
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: LD_INT 3
12517: PUSH
12518: LD_INT 4
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: ST_TO_ADDR
12531: GO 13496
12533: LD_INT 11
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12571
12541: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: LD_INT 3
12555: PUSH
12556: LD_INT 4
12558: PUSH
12559: LD_INT 5
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: ST_TO_ADDR
12569: GO 13496
12571: LD_INT 4
12573: DOUBLE
12574: EQUAL
12575: IFTRUE 12579
12577: GO 12605
12579: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12580: LD_ADDR_VAR 0 3
12584: PUSH
12585: LD_INT 2
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: LD_INT 4
12593: PUSH
12594: LD_INT 5
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: ST_TO_ADDR
12603: GO 13496
12605: LD_INT 5
12607: DOUBLE
12608: EQUAL
12609: IFTRUE 12613
12611: GO 12639
12613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12614: LD_ADDR_VAR 0 3
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: LD_INT 3
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: LD_INT 5
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: ST_TO_ADDR
12637: GO 13496
12639: LD_INT 9
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12673
12647: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: LD_INT 5
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: ST_TO_ADDR
12671: GO 13496
12673: LD_INT 7
12675: DOUBLE
12676: EQUAL
12677: IFTRUE 12681
12679: GO 12707
12681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12682: LD_ADDR_VAR 0 3
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: LD_INT 3
12692: PUSH
12693: LD_INT 4
12695: PUSH
12696: LD_INT 5
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: ST_TO_ADDR
12705: GO 13496
12707: LD_INT 12
12709: DOUBLE
12710: EQUAL
12711: IFTRUE 12715
12713: GO 12741
12715: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12716: LD_ADDR_VAR 0 3
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: LD_INT 3
12726: PUSH
12727: LD_INT 4
12729: PUSH
12730: LD_INT 5
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: ST_TO_ADDR
12739: GO 13496
12741: LD_INT 13
12743: DOUBLE
12744: EQUAL
12745: IFTRUE 12749
12747: GO 12775
12749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12750: LD_ADDR_VAR 0 3
12754: PUSH
12755: LD_INT 2
12757: PUSH
12758: LD_INT 3
12760: PUSH
12761: LD_INT 4
12763: PUSH
12764: LD_INT 5
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: ST_TO_ADDR
12773: GO 13496
12775: LD_INT 14
12777: DOUBLE
12778: EQUAL
12779: IFTRUE 12783
12781: GO 12801
12783: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12784: LD_ADDR_VAR 0 3
12788: PUSH
12789: LD_INT 4
12791: PUSH
12792: LD_INT 5
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: ST_TO_ADDR
12799: GO 13496
12801: LD_INT 6
12803: DOUBLE
12804: EQUAL
12805: IFTRUE 12809
12807: GO 12827
12809: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12810: LD_ADDR_VAR 0 3
12814: PUSH
12815: LD_INT 4
12817: PUSH
12818: LD_INT 5
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: ST_TO_ADDR
12825: GO 13496
12827: LD_INT 10
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12853
12835: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12836: LD_ADDR_VAR 0 3
12840: PUSH
12841: LD_INT 4
12843: PUSH
12844: LD_INT 5
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: ST_TO_ADDR
12851: GO 13496
12853: LD_INT 22
12855: DOUBLE
12856: EQUAL
12857: IFTRUE 12861
12859: GO 12887
12861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: LD_INT 11
12869: PUSH
12870: LD_INT 12
12872: PUSH
12873: LD_INT 13
12875: PUSH
12876: LD_INT 14
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: ST_TO_ADDR
12885: GO 13496
12887: LD_INT 23
12889: DOUBLE
12890: EQUAL
12891: IFTRUE 12895
12893: GO 12921
12895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12896: LD_ADDR_VAR 0 3
12900: PUSH
12901: LD_INT 11
12903: PUSH
12904: LD_INT 12
12906: PUSH
12907: LD_INT 13
12909: PUSH
12910: LD_INT 14
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: ST_TO_ADDR
12919: GO 13496
12921: LD_INT 24
12923: DOUBLE
12924: EQUAL
12925: IFTRUE 12929
12927: GO 12955
12929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12930: LD_ADDR_VAR 0 3
12934: PUSH
12935: LD_INT 11
12937: PUSH
12938: LD_INT 12
12940: PUSH
12941: LD_INT 13
12943: PUSH
12944: LD_INT 14
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: ST_TO_ADDR
12953: GO 13496
12955: LD_INT 30
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 12989
12963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12964: LD_ADDR_VAR 0 3
12968: PUSH
12969: LD_INT 11
12971: PUSH
12972: LD_INT 12
12974: PUSH
12975: LD_INT 13
12977: PUSH
12978: LD_INT 14
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: ST_TO_ADDR
12987: GO 13496
12989: LD_INT 25
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 12997
12995: GO 13015
12997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12998: LD_ADDR_VAR 0 3
13002: PUSH
13003: LD_INT 13
13005: PUSH
13006: LD_INT 14
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: ST_TO_ADDR
13013: GO 13496
13015: LD_INT 27
13017: DOUBLE
13018: EQUAL
13019: IFTRUE 13023
13021: GO 13041
13023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13024: LD_ADDR_VAR 0 3
13028: PUSH
13029: LD_INT 13
13031: PUSH
13032: LD_INT 14
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 13496
13041: LD_INT 92
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13075
13049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13050: LD_ADDR_VAR 0 3
13054: PUSH
13055: LD_INT 11
13057: PUSH
13058: LD_INT 12
13060: PUSH
13061: LD_INT 13
13063: PUSH
13064: LD_INT 14
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: ST_TO_ADDR
13073: GO 13496
13075: LD_INT 28
13077: DOUBLE
13078: EQUAL
13079: IFTRUE 13083
13081: GO 13101
13083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13084: LD_ADDR_VAR 0 3
13088: PUSH
13089: LD_INT 13
13091: PUSH
13092: LD_INT 14
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: ST_TO_ADDR
13099: GO 13496
13101: LD_INT 29
13103: DOUBLE
13104: EQUAL
13105: IFTRUE 13109
13107: GO 13127
13109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: LD_INT 13
13117: PUSH
13118: LD_INT 14
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: ST_TO_ADDR
13125: GO 13496
13127: LD_INT 31
13129: DOUBLE
13130: EQUAL
13131: IFTRUE 13135
13133: GO 13153
13135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13136: LD_ADDR_VAR 0 3
13140: PUSH
13141: LD_INT 13
13143: PUSH
13144: LD_INT 14
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: ST_TO_ADDR
13151: GO 13496
13153: LD_INT 26
13155: DOUBLE
13156: EQUAL
13157: IFTRUE 13161
13159: GO 13179
13161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13162: LD_ADDR_VAR 0 3
13166: PUSH
13167: LD_INT 13
13169: PUSH
13170: LD_INT 14
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: ST_TO_ADDR
13177: GO 13496
13179: LD_INT 42
13181: DOUBLE
13182: EQUAL
13183: IFTRUE 13187
13185: GO 13213
13187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 21
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 23
13201: PUSH
13202: LD_INT 24
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: ST_TO_ADDR
13211: GO 13496
13213: LD_INT 43
13215: DOUBLE
13216: EQUAL
13217: IFTRUE 13221
13219: GO 13247
13221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13222: LD_ADDR_VAR 0 3
13226: PUSH
13227: LD_INT 21
13229: PUSH
13230: LD_INT 22
13232: PUSH
13233: LD_INT 23
13235: PUSH
13236: LD_INT 24
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: ST_TO_ADDR
13245: GO 13496
13247: LD_INT 44
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13281
13255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13256: LD_ADDR_VAR 0 3
13260: PUSH
13261: LD_INT 21
13263: PUSH
13264: LD_INT 22
13266: PUSH
13267: LD_INT 23
13269: PUSH
13270: LD_INT 24
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: ST_TO_ADDR
13279: GO 13496
13281: LD_INT 45
13283: DOUBLE
13284: EQUAL
13285: IFTRUE 13289
13287: GO 13315
13289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13290: LD_ADDR_VAR 0 3
13294: PUSH
13295: LD_INT 21
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_INT 23
13303: PUSH
13304: LD_INT 24
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: ST_TO_ADDR
13313: GO 13496
13315: LD_INT 49
13317: DOUBLE
13318: EQUAL
13319: IFTRUE 13323
13321: GO 13349
13323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13324: LD_ADDR_VAR 0 3
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: ST_TO_ADDR
13347: GO 13496
13349: LD_INT 51
13351: DOUBLE
13352: EQUAL
13353: IFTRUE 13357
13355: GO 13383
13357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13358: LD_ADDR_VAR 0 3
13362: PUSH
13363: LD_INT 21
13365: PUSH
13366: LD_INT 22
13368: PUSH
13369: LD_INT 23
13371: PUSH
13372: LD_INT 24
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: ST_TO_ADDR
13381: GO 13496
13383: LD_INT 52
13385: DOUBLE
13386: EQUAL
13387: IFTRUE 13391
13389: GO 13417
13391: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13392: LD_ADDR_VAR 0 3
13396: PUSH
13397: LD_INT 21
13399: PUSH
13400: LD_INT 22
13402: PUSH
13403: LD_INT 23
13405: PUSH
13406: LD_INT 24
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: ST_TO_ADDR
13415: GO 13496
13417: LD_INT 53
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13443
13425: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13426: LD_ADDR_VAR 0 3
13430: PUSH
13431: LD_INT 23
13433: PUSH
13434: LD_INT 24
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: ST_TO_ADDR
13441: GO 13496
13443: LD_INT 46
13445: DOUBLE
13446: EQUAL
13447: IFTRUE 13451
13449: GO 13469
13451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13452: LD_ADDR_VAR 0 3
13456: PUSH
13457: LD_INT 23
13459: PUSH
13460: LD_INT 24
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: ST_TO_ADDR
13467: GO 13496
13469: LD_INT 47
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13495
13477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13478: LD_ADDR_VAR 0 3
13482: PUSH
13483: LD_INT 23
13485: PUSH
13486: LD_INT 24
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: ST_TO_ADDR
13493: GO 13496
13495: POP
// result := ( chassis in result ) ;
13496: LD_ADDR_VAR 0 3
13500: PUSH
13501: LD_VAR 0 1
13505: PUSH
13506: LD_VAR 0 3
13510: IN
13511: ST_TO_ADDR
// end ;
13512: LD_VAR 0 3
13516: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13517: LD_INT 0
13519: PPUSH
13520: PPUSH
13521: PPUSH
13522: PPUSH
13523: PPUSH
13524: PPUSH
13525: PPUSH
// result := array ;
13526: LD_ADDR_VAR 0 5
13530: PUSH
13531: LD_VAR 0 1
13535: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13536: LD_VAR 0 1
13540: NOT
13541: PUSH
13542: LD_VAR 0 2
13546: NOT
13547: OR
13548: PUSH
13549: LD_VAR 0 3
13553: NOT
13554: OR
13555: PUSH
13556: LD_VAR 0 2
13560: PUSH
13561: LD_VAR 0 1
13565: GREATER
13566: OR
13567: PUSH
13568: LD_VAR 0 3
13572: PUSH
13573: LD_VAR 0 1
13577: GREATER
13578: OR
13579: IFFALSE 13583
// exit ;
13581: GO 13879
// if direction then
13583: LD_VAR 0 4
13587: IFFALSE 13651
// begin d := 1 ;
13589: LD_ADDR_VAR 0 9
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// if i_from > i_to then
13597: LD_VAR 0 2
13601: PUSH
13602: LD_VAR 0 3
13606: GREATER
13607: IFFALSE 13633
// length := ( array - i_from ) + i_to else
13609: LD_ADDR_VAR 0 11
13613: PUSH
13614: LD_VAR 0 1
13618: PUSH
13619: LD_VAR 0 2
13623: MINUS
13624: PUSH
13625: LD_VAR 0 3
13629: PLUS
13630: ST_TO_ADDR
13631: GO 13649
// length := i_to - i_from ;
13633: LD_ADDR_VAR 0 11
13637: PUSH
13638: LD_VAR 0 3
13642: PUSH
13643: LD_VAR 0 2
13647: MINUS
13648: ST_TO_ADDR
// end else
13649: GO 13712
// begin d := - 1 ;
13651: LD_ADDR_VAR 0 9
13655: PUSH
13656: LD_INT 1
13658: NEG
13659: ST_TO_ADDR
// if i_from > i_to then
13660: LD_VAR 0 2
13664: PUSH
13665: LD_VAR 0 3
13669: GREATER
13670: IFFALSE 13690
// length := i_from - i_to else
13672: LD_ADDR_VAR 0 11
13676: PUSH
13677: LD_VAR 0 2
13681: PUSH
13682: LD_VAR 0 3
13686: MINUS
13687: ST_TO_ADDR
13688: GO 13712
// length := ( array - i_to ) + i_from ;
13690: LD_ADDR_VAR 0 11
13694: PUSH
13695: LD_VAR 0 1
13699: PUSH
13700: LD_VAR 0 3
13704: MINUS
13705: PUSH
13706: LD_VAR 0 2
13710: PLUS
13711: ST_TO_ADDR
// end ; if not length then
13712: LD_VAR 0 11
13716: NOT
13717: IFFALSE 13721
// exit ;
13719: GO 13879
// tmp := array ;
13721: LD_ADDR_VAR 0 10
13725: PUSH
13726: LD_VAR 0 1
13730: ST_TO_ADDR
// for i = 1 to length do
13731: LD_ADDR_VAR 0 6
13735: PUSH
13736: DOUBLE
13737: LD_INT 1
13739: DEC
13740: ST_TO_ADDR
13741: LD_VAR 0 11
13745: PUSH
13746: FOR_TO
13747: IFFALSE 13867
// begin for j = 1 to array do
13749: LD_ADDR_VAR 0 7
13753: PUSH
13754: DOUBLE
13755: LD_INT 1
13757: DEC
13758: ST_TO_ADDR
13759: LD_VAR 0 1
13763: PUSH
13764: FOR_TO
13765: IFFALSE 13853
// begin k := j + d ;
13767: LD_ADDR_VAR 0 8
13771: PUSH
13772: LD_VAR 0 7
13776: PUSH
13777: LD_VAR 0 9
13781: PLUS
13782: ST_TO_ADDR
// if k > array then
13783: LD_VAR 0 8
13787: PUSH
13788: LD_VAR 0 1
13792: GREATER
13793: IFFALSE 13803
// k := 1 ;
13795: LD_ADDR_VAR 0 8
13799: PUSH
13800: LD_INT 1
13802: ST_TO_ADDR
// if not k then
13803: LD_VAR 0 8
13807: NOT
13808: IFFALSE 13820
// k := array ;
13810: LD_ADDR_VAR 0 8
13814: PUSH
13815: LD_VAR 0 1
13819: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13820: LD_ADDR_VAR 0 10
13824: PUSH
13825: LD_VAR 0 10
13829: PPUSH
13830: LD_VAR 0 8
13834: PPUSH
13835: LD_VAR 0 1
13839: PUSH
13840: LD_VAR 0 7
13844: ARRAY
13845: PPUSH
13846: CALL_OW 1
13850: ST_TO_ADDR
// end ;
13851: GO 13764
13853: POP
13854: POP
// array := tmp ;
13855: LD_ADDR_VAR 0 1
13859: PUSH
13860: LD_VAR 0 10
13864: ST_TO_ADDR
// end ;
13865: GO 13746
13867: POP
13868: POP
// result := array ;
13869: LD_ADDR_VAR 0 5
13873: PUSH
13874: LD_VAR 0 1
13878: ST_TO_ADDR
// end ;
13879: LD_VAR 0 5
13883: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13884: LD_INT 0
13886: PPUSH
13887: PPUSH
// result := 0 ;
13888: LD_ADDR_VAR 0 3
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// if not array or not value in array then
13896: LD_VAR 0 1
13900: NOT
13901: PUSH
13902: LD_VAR 0 2
13906: PUSH
13907: LD_VAR 0 1
13911: IN
13912: NOT
13913: OR
13914: IFFALSE 13918
// exit ;
13916: GO 13972
// for i = 1 to array do
13918: LD_ADDR_VAR 0 4
13922: PUSH
13923: DOUBLE
13924: LD_INT 1
13926: DEC
13927: ST_TO_ADDR
13928: LD_VAR 0 1
13932: PUSH
13933: FOR_TO
13934: IFFALSE 13970
// if value = array [ i ] then
13936: LD_VAR 0 2
13940: PUSH
13941: LD_VAR 0 1
13945: PUSH
13946: LD_VAR 0 4
13950: ARRAY
13951: EQUAL
13952: IFFALSE 13968
// begin result := i ;
13954: LD_ADDR_VAR 0 3
13958: PUSH
13959: LD_VAR 0 4
13963: ST_TO_ADDR
// exit ;
13964: POP
13965: POP
13966: GO 13972
// end ;
13968: GO 13933
13970: POP
13971: POP
// end ;
13972: LD_VAR 0 3
13976: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13977: LD_INT 0
13979: PPUSH
// vc_chassis := chassis ;
13980: LD_ADDR_OWVAR 37
13984: PUSH
13985: LD_VAR 0 1
13989: ST_TO_ADDR
// vc_engine := engine ;
13990: LD_ADDR_OWVAR 39
13994: PUSH
13995: LD_VAR 0 2
13999: ST_TO_ADDR
// vc_control := control ;
14000: LD_ADDR_OWVAR 38
14004: PUSH
14005: LD_VAR 0 3
14009: ST_TO_ADDR
// vc_weapon := weapon ;
14010: LD_ADDR_OWVAR 40
14014: PUSH
14015: LD_VAR 0 4
14019: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14020: LD_ADDR_OWVAR 41
14024: PUSH
14025: LD_VAR 0 5
14029: ST_TO_ADDR
// end ;
14030: LD_VAR 0 6
14034: RET
// export function WantPlant ( unit ) ; var task ; begin
14035: LD_INT 0
14037: PPUSH
14038: PPUSH
// result := false ;
14039: LD_ADDR_VAR 0 2
14043: PUSH
14044: LD_INT 0
14046: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14047: LD_ADDR_VAR 0 3
14051: PUSH
14052: LD_VAR 0 1
14056: PPUSH
14057: CALL_OW 437
14061: ST_TO_ADDR
// if task then
14062: LD_VAR 0 3
14066: IFFALSE 14094
// if task [ 1 ] [ 1 ] = p then
14068: LD_VAR 0 3
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: PUSH
14077: LD_INT 1
14079: ARRAY
14080: PUSH
14081: LD_STRING p
14083: EQUAL
14084: IFFALSE 14094
// result := true ;
14086: LD_ADDR_VAR 0 2
14090: PUSH
14091: LD_INT 1
14093: ST_TO_ADDR
// end ;
14094: LD_VAR 0 2
14098: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14099: LD_INT 0
14101: PPUSH
14102: PPUSH
14103: PPUSH
14104: PPUSH
// if pos < 1 then
14105: LD_VAR 0 2
14109: PUSH
14110: LD_INT 1
14112: LESS
14113: IFFALSE 14117
// exit ;
14115: GO 14420
// if pos = 1 then
14117: LD_VAR 0 2
14121: PUSH
14122: LD_INT 1
14124: EQUAL
14125: IFFALSE 14158
// result := Replace ( arr , pos [ 1 ] , value ) else
14127: LD_ADDR_VAR 0 4
14131: PUSH
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_VAR 0 2
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: LD_VAR 0 3
14150: PPUSH
14151: CALL_OW 1
14155: ST_TO_ADDR
14156: GO 14420
// begin tmp := arr ;
14158: LD_ADDR_VAR 0 6
14162: PUSH
14163: LD_VAR 0 1
14167: ST_TO_ADDR
// s_arr := [ tmp ] ;
14168: LD_ADDR_VAR 0 7
14172: PUSH
14173: LD_VAR 0 6
14177: PUSH
14178: EMPTY
14179: LIST
14180: ST_TO_ADDR
// for i = 1 to pos - 1 do
14181: LD_ADDR_VAR 0 5
14185: PUSH
14186: DOUBLE
14187: LD_INT 1
14189: DEC
14190: ST_TO_ADDR
14191: LD_VAR 0 2
14195: PUSH
14196: LD_INT 1
14198: MINUS
14199: PUSH
14200: FOR_TO
14201: IFFALSE 14246
// begin tmp := tmp [ pos [ i ] ] ;
14203: LD_ADDR_VAR 0 6
14207: PUSH
14208: LD_VAR 0 6
14212: PUSH
14213: LD_VAR 0 2
14217: PUSH
14218: LD_VAR 0 5
14222: ARRAY
14223: ARRAY
14224: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14225: LD_ADDR_VAR 0 7
14229: PUSH
14230: LD_VAR 0 7
14234: PUSH
14235: LD_VAR 0 6
14239: PUSH
14240: EMPTY
14241: LIST
14242: ADD
14243: ST_TO_ADDR
// end ;
14244: GO 14200
14246: POP
14247: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14248: LD_ADDR_VAR 0 6
14252: PUSH
14253: LD_VAR 0 6
14257: PPUSH
14258: LD_VAR 0 2
14262: PUSH
14263: LD_VAR 0 2
14267: ARRAY
14268: PPUSH
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL_OW 1
14278: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14279: LD_ADDR_VAR 0 7
14283: PUSH
14284: LD_VAR 0 7
14288: PPUSH
14289: LD_VAR 0 7
14293: PPUSH
14294: LD_VAR 0 6
14298: PPUSH
14299: CALL_OW 1
14303: ST_TO_ADDR
// for i = s_arr downto 2 do
14304: LD_ADDR_VAR 0 5
14308: PUSH
14309: DOUBLE
14310: LD_VAR 0 7
14314: INC
14315: ST_TO_ADDR
14316: LD_INT 2
14318: PUSH
14319: FOR_DOWNTO
14320: IFFALSE 14404
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14322: LD_ADDR_VAR 0 6
14326: PUSH
14327: LD_VAR 0 7
14331: PUSH
14332: LD_VAR 0 5
14336: PUSH
14337: LD_INT 1
14339: MINUS
14340: ARRAY
14341: PPUSH
14342: LD_VAR 0 2
14346: PUSH
14347: LD_VAR 0 5
14351: PUSH
14352: LD_INT 1
14354: MINUS
14355: ARRAY
14356: PPUSH
14357: LD_VAR 0 7
14361: PUSH
14362: LD_VAR 0 5
14366: ARRAY
14367: PPUSH
14368: CALL_OW 1
14372: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14373: LD_ADDR_VAR 0 7
14377: PUSH
14378: LD_VAR 0 7
14382: PPUSH
14383: LD_VAR 0 5
14387: PUSH
14388: LD_INT 1
14390: MINUS
14391: PPUSH
14392: LD_VAR 0 6
14396: PPUSH
14397: CALL_OW 1
14401: ST_TO_ADDR
// end ;
14402: GO 14319
14404: POP
14405: POP
// result := s_arr [ 1 ] ;
14406: LD_ADDR_VAR 0 4
14410: PUSH
14411: LD_VAR 0 7
14415: PUSH
14416: LD_INT 1
14418: ARRAY
14419: ST_TO_ADDR
// end ; end ;
14420: LD_VAR 0 4
14424: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14425: LD_INT 0
14427: PPUSH
14428: PPUSH
// if not list then
14429: LD_VAR 0 1
14433: NOT
14434: IFFALSE 14438
// exit ;
14436: GO 14529
// i := list [ pos1 ] ;
14438: LD_ADDR_VAR 0 5
14442: PUSH
14443: LD_VAR 0 1
14447: PUSH
14448: LD_VAR 0 2
14452: ARRAY
14453: ST_TO_ADDR
// if not i then
14454: LD_VAR 0 5
14458: NOT
14459: IFFALSE 14463
// exit ;
14461: GO 14529
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14463: LD_ADDR_VAR 0 1
14467: PUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: LD_VAR 0 2
14477: PPUSH
14478: LD_VAR 0 1
14482: PUSH
14483: LD_VAR 0 3
14487: ARRAY
14488: PPUSH
14489: CALL_OW 1
14493: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14494: LD_ADDR_VAR 0 1
14498: PUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: LD_VAR 0 3
14508: PPUSH
14509: LD_VAR 0 5
14513: PPUSH
14514: CALL_OW 1
14518: ST_TO_ADDR
// result := list ;
14519: LD_ADDR_VAR 0 4
14523: PUSH
14524: LD_VAR 0 1
14528: ST_TO_ADDR
// end ;
14529: LD_VAR 0 4
14533: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14534: LD_INT 0
14536: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 250
14551: PPUSH
14552: LD_VAR 0 1
14556: PPUSH
14557: CALL_OW 251
14561: PPUSH
14562: LD_VAR 0 2
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_VAR 0 4
14576: PPUSH
14577: CALL 14955 0 5
14581: ST_TO_ADDR
// end ;
14582: LD_VAR 0 5
14586: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
14591: PPUSH
14592: PPUSH
// if not list or not unit then
14593: LD_VAR 0 2
14597: NOT
14598: PUSH
14599: LD_VAR 0 1
14603: NOT
14604: OR
14605: IFFALSE 14609
// exit ;
14607: GO 14950
// result := [ ] ;
14609: LD_ADDR_VAR 0 5
14613: PUSH
14614: EMPTY
14615: ST_TO_ADDR
// for i in list do
14616: LD_ADDR_VAR 0 6
14620: PUSH
14621: LD_VAR 0 2
14625: PUSH
14626: FOR_IN
14627: IFFALSE 14845
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14629: LD_ADDR_VAR 0 8
14633: PUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: LD_VAR 0 6
14643: PUSH
14644: LD_INT 1
14646: ARRAY
14647: PPUSH
14648: LD_VAR 0 6
14652: PUSH
14653: LD_INT 2
14655: ARRAY
14656: PPUSH
14657: CALL_OW 297
14661: ST_TO_ADDR
// if not Count ( result ) then
14662: LD_VAR 0 5
14666: PPUSH
14667: CALL 11239 0 1
14671: NOT
14672: IFFALSE 14705
// begin result := Join ( result , [ i , tmp ] ) ;
14674: LD_ADDR_VAR 0 5
14678: PUSH
14679: LD_VAR 0 5
14683: PPUSH
14684: LD_VAR 0 6
14688: PUSH
14689: LD_VAR 0 8
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PPUSH
14698: CALL 46848 0 2
14702: ST_TO_ADDR
// continue ;
14703: GO 14626
// end ; if result [ result ] [ 2 ] <= tmp then
14705: LD_VAR 0 5
14709: PUSH
14710: LD_VAR 0 5
14714: ARRAY
14715: PUSH
14716: LD_INT 2
14718: ARRAY
14719: PUSH
14720: LD_VAR 0 8
14724: LESSEQUAL
14725: IFFALSE 14758
// result := Join ( result , [ i , tmp ] ) else
14727: LD_ADDR_VAR 0 5
14731: PUSH
14732: LD_VAR 0 5
14736: PPUSH
14737: LD_VAR 0 6
14741: PUSH
14742: LD_VAR 0 8
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PPUSH
14751: CALL 46848 0 2
14755: ST_TO_ADDR
14756: GO 14843
// begin for j := 1 to Count ( result ) do
14758: LD_ADDR_VAR 0 7
14762: PUSH
14763: DOUBLE
14764: LD_INT 1
14766: DEC
14767: ST_TO_ADDR
14768: LD_VAR 0 5
14772: PPUSH
14773: CALL 11239 0 1
14777: PUSH
14778: FOR_TO
14779: IFFALSE 14841
// begin if tmp < result [ j ] [ 2 ] then
14781: LD_VAR 0 8
14785: PUSH
14786: LD_VAR 0 5
14790: PUSH
14791: LD_VAR 0 7
14795: ARRAY
14796: PUSH
14797: LD_INT 2
14799: ARRAY
14800: LESS
14801: IFFALSE 14839
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14803: LD_ADDR_VAR 0 5
14807: PUSH
14808: LD_VAR 0 5
14812: PPUSH
14813: LD_VAR 0 7
14817: PPUSH
14818: LD_VAR 0 6
14822: PUSH
14823: LD_VAR 0 8
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PPUSH
14832: CALL_OW 2
14836: ST_TO_ADDR
// break ;
14837: GO 14841
// end ; end ;
14839: GO 14778
14841: POP
14842: POP
// end ; end ;
14843: GO 14626
14845: POP
14846: POP
// if result and not asc then
14847: LD_VAR 0 5
14851: PUSH
14852: LD_VAR 0 3
14856: NOT
14857: AND
14858: IFFALSE 14875
// result := ReverseArray ( result ) ;
14860: LD_ADDR_VAR 0 5
14864: PUSH
14865: LD_VAR 0 5
14869: PPUSH
14870: CALL 42115 0 1
14874: ST_TO_ADDR
// tmp := [ ] ;
14875: LD_ADDR_VAR 0 8
14879: PUSH
14880: EMPTY
14881: ST_TO_ADDR
// if mode then
14882: LD_VAR 0 4
14886: IFFALSE 14950
// begin for i := 1 to result do
14888: LD_ADDR_VAR 0 6
14892: PUSH
14893: DOUBLE
14894: LD_INT 1
14896: DEC
14897: ST_TO_ADDR
14898: LD_VAR 0 5
14902: PUSH
14903: FOR_TO
14904: IFFALSE 14938
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14906: LD_ADDR_VAR 0 8
14910: PUSH
14911: LD_VAR 0 8
14915: PPUSH
14916: LD_VAR 0 5
14920: PUSH
14921: LD_VAR 0 6
14925: ARRAY
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: CALL 46848 0 2
14935: ST_TO_ADDR
14936: GO 14903
14938: POP
14939: POP
// result := tmp ;
14940: LD_ADDR_VAR 0 5
14944: PUSH
14945: LD_VAR 0 8
14949: ST_TO_ADDR
// end ; end ;
14950: LD_VAR 0 5
14954: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14955: LD_INT 0
14957: PPUSH
14958: PPUSH
14959: PPUSH
14960: PPUSH
// if not list then
14961: LD_VAR 0 3
14965: NOT
14966: IFFALSE 14970
// exit ;
14968: GO 15358
// result := [ ] ;
14970: LD_ADDR_VAR 0 6
14974: PUSH
14975: EMPTY
14976: ST_TO_ADDR
// for i in list do
14977: LD_ADDR_VAR 0 7
14981: PUSH
14982: LD_VAR 0 3
14986: PUSH
14987: FOR_IN
14988: IFFALSE 15190
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14990: LD_ADDR_VAR 0 9
14994: PUSH
14995: LD_VAR 0 7
14999: PPUSH
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_VAR 0 2
15009: PPUSH
15010: CALL_OW 297
15014: ST_TO_ADDR
// if not result then
15015: LD_VAR 0 6
15019: NOT
15020: IFFALSE 15046
// result := [ [ i , tmp ] ] else
15022: LD_ADDR_VAR 0 6
15026: PUSH
15027: LD_VAR 0 7
15031: PUSH
15032: LD_VAR 0 9
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: ST_TO_ADDR
15044: GO 15188
// begin if result [ result ] [ 2 ] < tmp then
15046: LD_VAR 0 6
15050: PUSH
15051: LD_VAR 0 6
15055: ARRAY
15056: PUSH
15057: LD_INT 2
15059: ARRAY
15060: PUSH
15061: LD_VAR 0 9
15065: LESS
15066: IFFALSE 15108
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15068: LD_ADDR_VAR 0 6
15072: PUSH
15073: LD_VAR 0 6
15077: PPUSH
15078: LD_VAR 0 6
15082: PUSH
15083: LD_INT 1
15085: PLUS
15086: PPUSH
15087: LD_VAR 0 7
15091: PUSH
15092: LD_VAR 0 9
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 2
15105: ST_TO_ADDR
15106: GO 15188
// for j = 1 to result do
15108: LD_ADDR_VAR 0 8
15112: PUSH
15113: DOUBLE
15114: LD_INT 1
15116: DEC
15117: ST_TO_ADDR
15118: LD_VAR 0 6
15122: PUSH
15123: FOR_TO
15124: IFFALSE 15186
// begin if tmp < result [ j ] [ 2 ] then
15126: LD_VAR 0 9
15130: PUSH
15131: LD_VAR 0 6
15135: PUSH
15136: LD_VAR 0 8
15140: ARRAY
15141: PUSH
15142: LD_INT 2
15144: ARRAY
15145: LESS
15146: IFFALSE 15184
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15148: LD_ADDR_VAR 0 6
15152: PUSH
15153: LD_VAR 0 6
15157: PPUSH
15158: LD_VAR 0 8
15162: PPUSH
15163: LD_VAR 0 7
15167: PUSH
15168: LD_VAR 0 9
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PPUSH
15177: CALL_OW 2
15181: ST_TO_ADDR
// break ;
15182: GO 15186
// end ; end ;
15184: GO 15123
15186: POP
15187: POP
// end ; end ;
15188: GO 14987
15190: POP
15191: POP
// if result and not asc then
15192: LD_VAR 0 6
15196: PUSH
15197: LD_VAR 0 4
15201: NOT
15202: AND
15203: IFFALSE 15278
// begin tmp := result ;
15205: LD_ADDR_VAR 0 9
15209: PUSH
15210: LD_VAR 0 6
15214: ST_TO_ADDR
// for i = tmp downto 1 do
15215: LD_ADDR_VAR 0 7
15219: PUSH
15220: DOUBLE
15221: LD_VAR 0 9
15225: INC
15226: ST_TO_ADDR
15227: LD_INT 1
15229: PUSH
15230: FOR_DOWNTO
15231: IFFALSE 15276
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15233: LD_ADDR_VAR 0 6
15237: PUSH
15238: LD_VAR 0 6
15242: PPUSH
15243: LD_VAR 0 9
15247: PUSH
15248: LD_VAR 0 7
15252: MINUS
15253: PUSH
15254: LD_INT 1
15256: PLUS
15257: PPUSH
15258: LD_VAR 0 9
15262: PUSH
15263: LD_VAR 0 7
15267: ARRAY
15268: PPUSH
15269: CALL_OW 1
15273: ST_TO_ADDR
15274: GO 15230
15276: POP
15277: POP
// end ; tmp := [ ] ;
15278: LD_ADDR_VAR 0 9
15282: PUSH
15283: EMPTY
15284: ST_TO_ADDR
// if mode then
15285: LD_VAR 0 5
15289: IFFALSE 15358
// begin for i = 1 to result do
15291: LD_ADDR_VAR 0 7
15295: PUSH
15296: DOUBLE
15297: LD_INT 1
15299: DEC
15300: ST_TO_ADDR
15301: LD_VAR 0 6
15305: PUSH
15306: FOR_TO
15307: IFFALSE 15346
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15309: LD_ADDR_VAR 0 9
15313: PUSH
15314: LD_VAR 0 9
15318: PPUSH
15319: LD_VAR 0 7
15323: PPUSH
15324: LD_VAR 0 6
15328: PUSH
15329: LD_VAR 0 7
15333: ARRAY
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: CALL_OW 1
15343: ST_TO_ADDR
15344: GO 15306
15346: POP
15347: POP
// result := tmp ;
15348: LD_ADDR_VAR 0 6
15352: PUSH
15353: LD_VAR 0 9
15357: ST_TO_ADDR
// end ; end ;
15358: LD_VAR 0 6
15362: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15363: LD_INT 0
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
15369: PPUSH
15370: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15371: LD_ADDR_VAR 0 5
15375: PUSH
15376: LD_INT 0
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: LD_INT 0
15384: PUSH
15385: EMPTY
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: ST_TO_ADDR
// if not x or not y then
15393: LD_VAR 0 2
15397: NOT
15398: PUSH
15399: LD_VAR 0 3
15403: NOT
15404: OR
15405: IFFALSE 15409
// exit ;
15407: GO 17059
// if not range then
15409: LD_VAR 0 4
15413: NOT
15414: IFFALSE 15424
// range := 10 ;
15416: LD_ADDR_VAR 0 4
15420: PUSH
15421: LD_INT 10
15423: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15424: LD_ADDR_VAR 0 8
15428: PUSH
15429: LD_INT 81
15431: PUSH
15432: LD_VAR 0 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 92
15443: PUSH
15444: LD_VAR 0 2
15448: PUSH
15449: LD_VAR 0 3
15453: PUSH
15454: LD_VAR 0 4
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 3
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 3
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 69
15491: ST_TO_ADDR
// if not tmp then
15492: LD_VAR 0 8
15496: NOT
15497: IFFALSE 15501
// exit ;
15499: GO 17059
// for i in tmp do
15501: LD_ADDR_VAR 0 6
15505: PUSH
15506: LD_VAR 0 8
15510: PUSH
15511: FOR_IN
15512: IFFALSE 17034
// begin points := [ 0 , 0 , 0 ] ;
15514: LD_ADDR_VAR 0 9
15518: PUSH
15519: LD_INT 0
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: LD_INT 0
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: ST_TO_ADDR
// bpoints := 1 ;
15533: LD_ADDR_VAR 0 10
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15541: LD_VAR 0 6
15545: PPUSH
15546: CALL_OW 247
15550: PUSH
15551: LD_INT 1
15553: DOUBLE
15554: EQUAL
15555: IFTRUE 15559
15557: GO 16137
15559: POP
// begin if GetClass ( i ) = 1 then
15560: LD_VAR 0 6
15564: PPUSH
15565: CALL_OW 257
15569: PUSH
15570: LD_INT 1
15572: EQUAL
15573: IFFALSE 15594
// points := [ 10 , 5 , 3 ] ;
15575: LD_ADDR_VAR 0 9
15579: PUSH
15580: LD_INT 10
15582: PUSH
15583: LD_INT 5
15585: PUSH
15586: LD_INT 3
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15594: LD_VAR 0 6
15598: PPUSH
15599: CALL_OW 257
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: LD_INT 4
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: IN
15618: IFFALSE 15639
// points := [ 3 , 2 , 1 ] ;
15620: LD_ADDR_VAR 0 9
15624: PUSH
15625: LD_INT 3
15627: PUSH
15628: LD_INT 2
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15639: LD_VAR 0 6
15643: PPUSH
15644: CALL_OW 257
15648: PUSH
15649: LD_INT 5
15651: EQUAL
15652: IFFALSE 15673
// points := [ 130 , 5 , 2 ] ;
15654: LD_ADDR_VAR 0 9
15658: PUSH
15659: LD_INT 130
15661: PUSH
15662: LD_INT 5
15664: PUSH
15665: LD_INT 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15673: LD_VAR 0 6
15677: PPUSH
15678: CALL_OW 257
15682: PUSH
15683: LD_INT 8
15685: EQUAL
15686: IFFALSE 15707
// points := [ 35 , 35 , 30 ] ;
15688: LD_ADDR_VAR 0 9
15692: PUSH
15693: LD_INT 35
15695: PUSH
15696: LD_INT 35
15698: PUSH
15699: LD_INT 30
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15707: LD_VAR 0 6
15711: PPUSH
15712: CALL_OW 257
15716: PUSH
15717: LD_INT 9
15719: EQUAL
15720: IFFALSE 15741
// points := [ 20 , 55 , 40 ] ;
15722: LD_ADDR_VAR 0 9
15726: PUSH
15727: LD_INT 20
15729: PUSH
15730: LD_INT 55
15732: PUSH
15733: LD_INT 40
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15741: LD_VAR 0 6
15745: PPUSH
15746: CALL_OW 257
15750: PUSH
15751: LD_INT 12
15753: PUSH
15754: LD_INT 16
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: IN
15761: IFFALSE 15782
// points := [ 5 , 3 , 2 ] ;
15763: LD_ADDR_VAR 0 9
15767: PUSH
15768: LD_INT 5
15770: PUSH
15771: LD_INT 3
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15782: LD_VAR 0 6
15786: PPUSH
15787: CALL_OW 257
15791: PUSH
15792: LD_INT 17
15794: EQUAL
15795: IFFALSE 15816
// points := [ 100 , 50 , 75 ] ;
15797: LD_ADDR_VAR 0 9
15801: PUSH
15802: LD_INT 100
15804: PUSH
15805: LD_INT 50
15807: PUSH
15808: LD_INT 75
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15816: LD_VAR 0 6
15820: PPUSH
15821: CALL_OW 257
15825: PUSH
15826: LD_INT 15
15828: EQUAL
15829: IFFALSE 15850
// points := [ 10 , 5 , 3 ] ;
15831: LD_ADDR_VAR 0 9
15835: PUSH
15836: LD_INT 10
15838: PUSH
15839: LD_INT 5
15841: PUSH
15842: LD_INT 3
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15850: LD_VAR 0 6
15854: PPUSH
15855: CALL_OW 257
15859: PUSH
15860: LD_INT 14
15862: EQUAL
15863: IFFALSE 15884
// points := [ 10 , 0 , 0 ] ;
15865: LD_ADDR_VAR 0 9
15869: PUSH
15870: LD_INT 10
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15884: LD_VAR 0 6
15888: PPUSH
15889: CALL_OW 257
15893: PUSH
15894: LD_INT 11
15896: EQUAL
15897: IFFALSE 15918
// points := [ 30 , 10 , 5 ] ;
15899: LD_ADDR_VAR 0 9
15903: PUSH
15904: LD_INT 30
15906: PUSH
15907: LD_INT 10
15909: PUSH
15910: LD_INT 5
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15918: LD_VAR 0 1
15922: PPUSH
15923: LD_INT 5
15925: PPUSH
15926: CALL_OW 321
15930: PUSH
15931: LD_INT 2
15933: EQUAL
15934: IFFALSE 15951
// bpoints := bpoints * 1.8 ;
15936: LD_ADDR_VAR 0 10
15940: PUSH
15941: LD_VAR 0 10
15945: PUSH
15946: LD_REAL  1.80000000000000E+0000
15949: MUL
15950: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15951: LD_VAR 0 6
15955: PPUSH
15956: CALL_OW 257
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: LD_INT 2
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: LD_INT 4
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: IN
15979: PUSH
15980: LD_VAR 0 1
15984: PPUSH
15985: LD_INT 51
15987: PPUSH
15988: CALL_OW 321
15992: PUSH
15993: LD_INT 2
15995: EQUAL
15996: AND
15997: IFFALSE 16014
// bpoints := bpoints * 1.2 ;
15999: LD_ADDR_VAR 0 10
16003: PUSH
16004: LD_VAR 0 10
16008: PUSH
16009: LD_REAL  1.20000000000000E+0000
16012: MUL
16013: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16014: LD_VAR 0 6
16018: PPUSH
16019: CALL_OW 257
16023: PUSH
16024: LD_INT 5
16026: PUSH
16027: LD_INT 7
16029: PUSH
16030: LD_INT 9
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: IN
16038: PUSH
16039: LD_VAR 0 1
16043: PPUSH
16044: LD_INT 52
16046: PPUSH
16047: CALL_OW 321
16051: PUSH
16052: LD_INT 2
16054: EQUAL
16055: AND
16056: IFFALSE 16073
// bpoints := bpoints * 1.5 ;
16058: LD_ADDR_VAR 0 10
16062: PUSH
16063: LD_VAR 0 10
16067: PUSH
16068: LD_REAL  1.50000000000000E+0000
16071: MUL
16072: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_INT 66
16080: PPUSH
16081: CALL_OW 321
16085: PUSH
16086: LD_INT 2
16088: EQUAL
16089: IFFALSE 16106
// bpoints := bpoints * 1.1 ;
16091: LD_ADDR_VAR 0 10
16095: PUSH
16096: LD_VAR 0 10
16100: PUSH
16101: LD_REAL  1.10000000000000E+0000
16104: MUL
16105: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16106: LD_ADDR_VAR 0 10
16110: PUSH
16111: LD_VAR 0 10
16115: PUSH
16116: LD_VAR 0 6
16120: PPUSH
16121: LD_INT 1
16123: PPUSH
16124: CALL_OW 259
16128: PUSH
16129: LD_REAL  1.15000000000000E+0000
16132: MUL
16133: MUL
16134: ST_TO_ADDR
// end ; unit_vehicle :
16135: GO 16963
16137: LD_INT 2
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16951
16145: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16146: LD_VAR 0 6
16150: PPUSH
16151: CALL_OW 264
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: LD_INT 42
16161: PUSH
16162: LD_INT 24
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: IN
16170: IFFALSE 16191
// points := [ 25 , 5 , 3 ] ;
16172: LD_ADDR_VAR 0 9
16176: PUSH
16177: LD_INT 25
16179: PUSH
16180: LD_INT 5
16182: PUSH
16183: LD_INT 3
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16191: LD_VAR 0 6
16195: PPUSH
16196: CALL_OW 264
16200: PUSH
16201: LD_INT 4
16203: PUSH
16204: LD_INT 43
16206: PUSH
16207: LD_INT 25
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: IN
16215: IFFALSE 16236
// points := [ 40 , 15 , 5 ] ;
16217: LD_ADDR_VAR 0 9
16221: PUSH
16222: LD_INT 40
16224: PUSH
16225: LD_INT 15
16227: PUSH
16228: LD_INT 5
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16236: LD_VAR 0 6
16240: PPUSH
16241: CALL_OW 264
16245: PUSH
16246: LD_INT 3
16248: PUSH
16249: LD_INT 23
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: IN
16256: IFFALSE 16277
// points := [ 7 , 25 , 8 ] ;
16258: LD_ADDR_VAR 0 9
16262: PUSH
16263: LD_INT 7
16265: PUSH
16266: LD_INT 25
16268: PUSH
16269: LD_INT 8
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16277: LD_VAR 0 6
16281: PPUSH
16282: CALL_OW 264
16286: PUSH
16287: LD_INT 5
16289: PUSH
16290: LD_INT 27
16292: PUSH
16293: LD_INT 44
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: IN
16301: IFFALSE 16322
// points := [ 14 , 50 , 16 ] ;
16303: LD_ADDR_VAR 0 9
16307: PUSH
16308: LD_INT 14
16310: PUSH
16311: LD_INT 50
16313: PUSH
16314: LD_INT 16
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16322: LD_VAR 0 6
16326: PPUSH
16327: CALL_OW 264
16331: PUSH
16332: LD_INT 6
16334: PUSH
16335: LD_INT 46
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: IN
16342: IFFALSE 16363
// points := [ 32 , 120 , 70 ] ;
16344: LD_ADDR_VAR 0 9
16348: PUSH
16349: LD_INT 32
16351: PUSH
16352: LD_INT 120
16354: PUSH
16355: LD_INT 70
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16363: LD_VAR 0 6
16367: PPUSH
16368: CALL_OW 264
16372: PUSH
16373: LD_INT 7
16375: PUSH
16376: LD_INT 28
16378: PUSH
16379: LD_INT 45
16381: PUSH
16382: LD_INT 92
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: IN
16391: IFFALSE 16412
// points := [ 35 , 20 , 45 ] ;
16393: LD_ADDR_VAR 0 9
16397: PUSH
16398: LD_INT 35
16400: PUSH
16401: LD_INT 20
16403: PUSH
16404: LD_INT 45
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16412: LD_VAR 0 6
16416: PPUSH
16417: CALL_OW 264
16421: PUSH
16422: LD_INT 47
16424: PUSH
16425: EMPTY
16426: LIST
16427: IN
16428: IFFALSE 16449
// points := [ 67 , 45 , 75 ] ;
16430: LD_ADDR_VAR 0 9
16434: PUSH
16435: LD_INT 67
16437: PUSH
16438: LD_INT 45
16440: PUSH
16441: LD_INT 75
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16449: LD_VAR 0 6
16453: PPUSH
16454: CALL_OW 264
16458: PUSH
16459: LD_INT 26
16461: PUSH
16462: EMPTY
16463: LIST
16464: IN
16465: IFFALSE 16486
// points := [ 120 , 30 , 80 ] ;
16467: LD_ADDR_VAR 0 9
16471: PUSH
16472: LD_INT 120
16474: PUSH
16475: LD_INT 30
16477: PUSH
16478: LD_INT 80
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16486: LD_VAR 0 6
16490: PPUSH
16491: CALL_OW 264
16495: PUSH
16496: LD_INT 22
16498: PUSH
16499: EMPTY
16500: LIST
16501: IN
16502: IFFALSE 16523
// points := [ 40 , 1 , 1 ] ;
16504: LD_ADDR_VAR 0 9
16508: PUSH
16509: LD_INT 40
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16523: LD_VAR 0 6
16527: PPUSH
16528: CALL_OW 264
16532: PUSH
16533: LD_INT 29
16535: PUSH
16536: EMPTY
16537: LIST
16538: IN
16539: IFFALSE 16560
// points := [ 70 , 200 , 400 ] ;
16541: LD_ADDR_VAR 0 9
16545: PUSH
16546: LD_INT 70
16548: PUSH
16549: LD_INT 200
16551: PUSH
16552: LD_INT 400
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: LIST
16559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16560: LD_VAR 0 6
16564: PPUSH
16565: CALL_OW 264
16569: PUSH
16570: LD_INT 14
16572: PUSH
16573: LD_INT 53
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: IN
16580: IFFALSE 16601
// points := [ 40 , 10 , 20 ] ;
16582: LD_ADDR_VAR 0 9
16586: PUSH
16587: LD_INT 40
16589: PUSH
16590: LD_INT 10
16592: PUSH
16593: LD_INT 20
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16601: LD_VAR 0 6
16605: PPUSH
16606: CALL_OW 264
16610: PUSH
16611: LD_INT 9
16613: PUSH
16614: EMPTY
16615: LIST
16616: IN
16617: IFFALSE 16638
// points := [ 5 , 70 , 20 ] ;
16619: LD_ADDR_VAR 0 9
16623: PUSH
16624: LD_INT 5
16626: PUSH
16627: LD_INT 70
16629: PUSH
16630: LD_INT 20
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16638: LD_VAR 0 6
16642: PPUSH
16643: CALL_OW 264
16647: PUSH
16648: LD_INT 10
16650: PUSH
16651: EMPTY
16652: LIST
16653: IN
16654: IFFALSE 16675
// points := [ 35 , 110 , 70 ] ;
16656: LD_ADDR_VAR 0 9
16660: PUSH
16661: LD_INT 35
16663: PUSH
16664: LD_INT 110
16666: PUSH
16667: LD_INT 70
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16675: LD_VAR 0 6
16679: PPUSH
16680: CALL_OW 265
16684: PUSH
16685: LD_INT 25
16687: EQUAL
16688: IFFALSE 16709
// points := [ 80 , 65 , 100 ] ;
16690: LD_ADDR_VAR 0 9
16694: PUSH
16695: LD_INT 80
16697: PUSH
16698: LD_INT 65
16700: PUSH
16701: LD_INT 100
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16709: LD_VAR 0 6
16713: PPUSH
16714: CALL_OW 263
16718: PUSH
16719: LD_INT 1
16721: EQUAL
16722: IFFALSE 16757
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16724: LD_ADDR_VAR 0 10
16728: PUSH
16729: LD_VAR 0 10
16733: PUSH
16734: LD_VAR 0 6
16738: PPUSH
16739: CALL_OW 311
16743: PPUSH
16744: LD_INT 3
16746: PPUSH
16747: CALL_OW 259
16751: PUSH
16752: LD_INT 4
16754: MUL
16755: MUL
16756: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16757: LD_VAR 0 6
16761: PPUSH
16762: CALL_OW 263
16766: PUSH
16767: LD_INT 2
16769: EQUAL
16770: IFFALSE 16821
// begin j := IsControledBy ( i ) ;
16772: LD_ADDR_VAR 0 7
16776: PUSH
16777: LD_VAR 0 6
16781: PPUSH
16782: CALL_OW 312
16786: ST_TO_ADDR
// if j then
16787: LD_VAR 0 7
16791: IFFALSE 16821
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16793: LD_ADDR_VAR 0 10
16797: PUSH
16798: LD_VAR 0 10
16802: PUSH
16803: LD_VAR 0 7
16807: PPUSH
16808: LD_INT 3
16810: PPUSH
16811: CALL_OW 259
16815: PUSH
16816: LD_INT 3
16818: MUL
16819: MUL
16820: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16821: LD_VAR 0 6
16825: PPUSH
16826: CALL_OW 264
16830: PUSH
16831: LD_INT 5
16833: PUSH
16834: LD_INT 6
16836: PUSH
16837: LD_INT 46
16839: PUSH
16840: LD_INT 44
16842: PUSH
16843: LD_INT 47
16845: PUSH
16846: LD_INT 45
16848: PUSH
16849: LD_INT 28
16851: PUSH
16852: LD_INT 7
16854: PUSH
16855: LD_INT 27
16857: PUSH
16858: LD_INT 29
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: IN
16873: PUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: LD_INT 52
16881: PPUSH
16882: CALL_OW 321
16886: PUSH
16887: LD_INT 2
16889: EQUAL
16890: AND
16891: IFFALSE 16908
// bpoints := bpoints * 1.2 ;
16893: LD_ADDR_VAR 0 10
16897: PUSH
16898: LD_VAR 0 10
16902: PUSH
16903: LD_REAL  1.20000000000000E+0000
16906: MUL
16907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16908: LD_VAR 0 6
16912: PPUSH
16913: CALL_OW 264
16917: PUSH
16918: LD_INT 6
16920: PUSH
16921: LD_INT 46
16923: PUSH
16924: LD_INT 47
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: IN
16932: IFFALSE 16949
// bpoints := bpoints * 1.2 ;
16934: LD_ADDR_VAR 0 10
16938: PUSH
16939: LD_VAR 0 10
16943: PUSH
16944: LD_REAL  1.20000000000000E+0000
16947: MUL
16948: ST_TO_ADDR
// end ; unit_building :
16949: GO 16963
16951: LD_INT 3
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 16962
16959: POP
// ; end ;
16960: GO 16963
16962: POP
// for j = 1 to 3 do
16963: LD_ADDR_VAR 0 7
16967: PUSH
16968: DOUBLE
16969: LD_INT 1
16971: DEC
16972: ST_TO_ADDR
16973: LD_INT 3
16975: PUSH
16976: FOR_TO
16977: IFFALSE 17030
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16979: LD_ADDR_VAR 0 5
16983: PUSH
16984: LD_VAR 0 5
16988: PPUSH
16989: LD_VAR 0 7
16993: PPUSH
16994: LD_VAR 0 5
16998: PUSH
16999: LD_VAR 0 7
17003: ARRAY
17004: PUSH
17005: LD_VAR 0 9
17009: PUSH
17010: LD_VAR 0 7
17014: ARRAY
17015: PUSH
17016: LD_VAR 0 10
17020: MUL
17021: PLUS
17022: PPUSH
17023: CALL_OW 1
17027: ST_TO_ADDR
17028: GO 16976
17030: POP
17031: POP
// end ;
17032: GO 15511
17034: POP
17035: POP
// result := Replace ( result , 4 , tmp ) ;
17036: LD_ADDR_VAR 0 5
17040: PUSH
17041: LD_VAR 0 5
17045: PPUSH
17046: LD_INT 4
17048: PPUSH
17049: LD_VAR 0 8
17053: PPUSH
17054: CALL_OW 1
17058: ST_TO_ADDR
// end ;
17059: LD_VAR 0 5
17063: RET
// export function DangerAtRange ( unit , range ) ; begin
17064: LD_INT 0
17066: PPUSH
// if not unit then
17067: LD_VAR 0 1
17071: NOT
17072: IFFALSE 17076
// exit ;
17074: GO 17121
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17076: LD_ADDR_VAR 0 3
17080: PUSH
17081: LD_VAR 0 1
17085: PPUSH
17086: CALL_OW 255
17090: PPUSH
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 250
17100: PPUSH
17101: LD_VAR 0 1
17105: PPUSH
17106: CALL_OW 251
17110: PPUSH
17111: LD_VAR 0 2
17115: PPUSH
17116: CALL 15363 0 4
17120: ST_TO_ADDR
// end ;
17121: LD_VAR 0 3
17125: RET
// export function DangerInArea ( side , area ) ; begin
17126: LD_INT 0
17128: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17129: LD_ADDR_VAR 0 3
17133: PUSH
17134: LD_VAR 0 2
17138: PPUSH
17139: LD_INT 81
17141: PUSH
17142: LD_VAR 0 1
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 70
17155: ST_TO_ADDR
// end ;
17156: LD_VAR 0 3
17160: RET
// export function IsExtension ( b ) ; begin
17161: LD_INT 0
17163: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17164: LD_ADDR_VAR 0 2
17168: PUSH
17169: LD_VAR 0 1
17173: PUSH
17174: LD_INT 23
17176: PUSH
17177: LD_INT 20
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_INT 17
17185: PUSH
17186: LD_INT 24
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 19
17194: PUSH
17195: LD_INT 16
17197: PUSH
17198: LD_INT 25
17200: PUSH
17201: LD_INT 18
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: IN
17216: ST_TO_ADDR
// end ;
17217: LD_VAR 0 2
17221: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17222: LD_INT 0
17224: PPUSH
17225: PPUSH
17226: PPUSH
// result := [ ] ;
17227: LD_ADDR_VAR 0 4
17231: PUSH
17232: EMPTY
17233: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17234: LD_ADDR_VAR 0 5
17238: PUSH
17239: LD_VAR 0 2
17243: PPUSH
17244: LD_INT 21
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PPUSH
17254: CALL_OW 70
17258: ST_TO_ADDR
// if not tmp then
17259: LD_VAR 0 5
17263: NOT
17264: IFFALSE 17268
// exit ;
17266: GO 17332
// if checkLink then
17268: LD_VAR 0 3
17272: IFFALSE 17322
// begin for i in tmp do
17274: LD_ADDR_VAR 0 6
17278: PUSH
17279: LD_VAR 0 5
17283: PUSH
17284: FOR_IN
17285: IFFALSE 17320
// if GetBase ( i ) <> base then
17287: LD_VAR 0 6
17291: PPUSH
17292: CALL_OW 274
17296: PUSH
17297: LD_VAR 0 1
17301: NONEQUAL
17302: IFFALSE 17318
// ComLinkToBase ( base , i ) ;
17304: LD_VAR 0 1
17308: PPUSH
17309: LD_VAR 0 6
17313: PPUSH
17314: CALL_OW 169
17318: GO 17284
17320: POP
17321: POP
// end ; result := tmp ;
17322: LD_ADDR_VAR 0 4
17326: PUSH
17327: LD_VAR 0 5
17331: ST_TO_ADDR
// end ;
17332: LD_VAR 0 4
17336: RET
// export function ComComplete ( units , b ) ; var i ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// if not units then
17341: LD_VAR 0 1
17345: NOT
17346: IFFALSE 17350
// exit ;
17348: GO 17440
// for i in units do
17350: LD_ADDR_VAR 0 4
17354: PUSH
17355: LD_VAR 0 1
17359: PUSH
17360: FOR_IN
17361: IFFALSE 17438
// if BuildingStatus ( b ) = bs_build then
17363: LD_VAR 0 2
17367: PPUSH
17368: CALL_OW 461
17372: PUSH
17373: LD_INT 1
17375: EQUAL
17376: IFFALSE 17436
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17378: LD_VAR 0 4
17382: PPUSH
17383: LD_STRING h
17385: PUSH
17386: LD_VAR 0 2
17390: PPUSH
17391: CALL_OW 250
17395: PUSH
17396: LD_VAR 0 2
17400: PPUSH
17401: CALL_OW 251
17405: PUSH
17406: LD_VAR 0 2
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: LD_INT 0
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: PUSH
17429: EMPTY
17430: LIST
17431: PPUSH
17432: CALL_OW 446
17436: GO 17360
17438: POP
17439: POP
// end ;
17440: LD_VAR 0 3
17444: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17445: LD_INT 0
17447: PPUSH
17448: PPUSH
17449: PPUSH
17450: PPUSH
17451: PPUSH
17452: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17453: LD_VAR 0 1
17457: NOT
17458: PUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 263
17468: PUSH
17469: LD_INT 2
17471: NONEQUAL
17472: OR
17473: IFFALSE 17477
// exit ;
17475: GO 17793
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17477: LD_ADDR_VAR 0 6
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 255
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: LD_INT 30
17504: PUSH
17505: LD_INT 36
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 34
17514: PUSH
17515: LD_INT 31
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PPUSH
17531: CALL_OW 69
17535: ST_TO_ADDR
// if not tmp then
17536: LD_VAR 0 6
17540: NOT
17541: IFFALSE 17545
// exit ;
17543: GO 17793
// result := [ ] ;
17545: LD_ADDR_VAR 0 2
17549: PUSH
17550: EMPTY
17551: ST_TO_ADDR
// for i in tmp do
17552: LD_ADDR_VAR 0 3
17556: PUSH
17557: LD_VAR 0 6
17561: PUSH
17562: FOR_IN
17563: IFFALSE 17634
// begin t := UnitsInside ( i ) ;
17565: LD_ADDR_VAR 0 4
17569: PUSH
17570: LD_VAR 0 3
17574: PPUSH
17575: CALL_OW 313
17579: ST_TO_ADDR
// if t then
17580: LD_VAR 0 4
17584: IFFALSE 17632
// for j in t do
17586: LD_ADDR_VAR 0 7
17590: PUSH
17591: LD_VAR 0 4
17595: PUSH
17596: FOR_IN
17597: IFFALSE 17630
// result := Replace ( result , result + 1 , j ) ;
17599: LD_ADDR_VAR 0 2
17603: PUSH
17604: LD_VAR 0 2
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: PLUS
17617: PPUSH
17618: LD_VAR 0 7
17622: PPUSH
17623: CALL_OW 1
17627: ST_TO_ADDR
17628: GO 17596
17630: POP
17631: POP
// end ;
17632: GO 17562
17634: POP
17635: POP
// if not result then
17636: LD_VAR 0 2
17640: NOT
17641: IFFALSE 17645
// exit ;
17643: GO 17793
// mech := result [ 1 ] ;
17645: LD_ADDR_VAR 0 5
17649: PUSH
17650: LD_VAR 0 2
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: ST_TO_ADDR
// if result > 1 then
17659: LD_VAR 0 2
17663: PUSH
17664: LD_INT 1
17666: GREATER
17667: IFFALSE 17779
// begin for i = 2 to result do
17669: LD_ADDR_VAR 0 3
17673: PUSH
17674: DOUBLE
17675: LD_INT 2
17677: DEC
17678: ST_TO_ADDR
17679: LD_VAR 0 2
17683: PUSH
17684: FOR_TO
17685: IFFALSE 17777
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17687: LD_ADDR_VAR 0 4
17691: PUSH
17692: LD_VAR 0 2
17696: PUSH
17697: LD_VAR 0 3
17701: ARRAY
17702: PPUSH
17703: LD_INT 3
17705: PPUSH
17706: CALL_OW 259
17710: PUSH
17711: LD_VAR 0 2
17715: PUSH
17716: LD_VAR 0 3
17720: ARRAY
17721: PPUSH
17722: CALL_OW 432
17726: MINUS
17727: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17728: LD_VAR 0 4
17732: PUSH
17733: LD_VAR 0 5
17737: PPUSH
17738: LD_INT 3
17740: PPUSH
17741: CALL_OW 259
17745: PUSH
17746: LD_VAR 0 5
17750: PPUSH
17751: CALL_OW 432
17755: MINUS
17756: GREATEREQUAL
17757: IFFALSE 17775
// mech := result [ i ] ;
17759: LD_ADDR_VAR 0 5
17763: PUSH
17764: LD_VAR 0 2
17768: PUSH
17769: LD_VAR 0 3
17773: ARRAY
17774: ST_TO_ADDR
// end ;
17775: GO 17684
17777: POP
17778: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_VAR 0 5
17788: PPUSH
17789: CALL_OW 135
// end ;
17793: LD_VAR 0 2
17797: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17798: LD_INT 0
17800: PPUSH
17801: PPUSH
17802: PPUSH
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
// result := [ ] ;
17813: LD_ADDR_VAR 0 7
17817: PUSH
17818: EMPTY
17819: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17820: LD_VAR 0 1
17824: PPUSH
17825: CALL_OW 266
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: IN
17840: NOT
17841: IFFALSE 17845
// exit ;
17843: GO 19479
// if name then
17845: LD_VAR 0 3
17849: IFFALSE 17865
// SetBName ( base_dep , name ) ;
17851: LD_VAR 0 1
17855: PPUSH
17856: LD_VAR 0 3
17860: PPUSH
17861: CALL_OW 500
// base := GetBase ( base_dep ) ;
17865: LD_ADDR_VAR 0 15
17869: PUSH
17870: LD_VAR 0 1
17874: PPUSH
17875: CALL_OW 274
17879: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17880: LD_ADDR_VAR 0 16
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 255
17894: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17895: LD_ADDR_VAR 0 17
17899: PUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 248
17909: ST_TO_ADDR
// if sources then
17910: LD_VAR 0 5
17914: IFFALSE 17961
// for i = 1 to 3 do
17916: LD_ADDR_VAR 0 8
17920: PUSH
17921: DOUBLE
17922: LD_INT 1
17924: DEC
17925: ST_TO_ADDR
17926: LD_INT 3
17928: PUSH
17929: FOR_TO
17930: IFFALSE 17959
// AddResourceType ( base , i , sources [ i ] ) ;
17932: LD_VAR 0 15
17936: PPUSH
17937: LD_VAR 0 8
17941: PPUSH
17942: LD_VAR 0 5
17946: PUSH
17947: LD_VAR 0 8
17951: ARRAY
17952: PPUSH
17953: CALL_OW 276
17957: GO 17929
17959: POP
17960: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17961: LD_ADDR_VAR 0 18
17965: PUSH
17966: LD_VAR 0 15
17970: PPUSH
17971: LD_VAR 0 2
17975: PPUSH
17976: LD_INT 1
17978: PPUSH
17979: CALL 17222 0 3
17983: ST_TO_ADDR
// InitHc ;
17984: CALL_OW 19
// InitUc ;
17988: CALL_OW 18
// uc_side := side ;
17992: LD_ADDR_OWVAR 20
17996: PUSH
17997: LD_VAR 0 16
18001: ST_TO_ADDR
// uc_nation := nation ;
18002: LD_ADDR_OWVAR 21
18006: PUSH
18007: LD_VAR 0 17
18011: ST_TO_ADDR
// if buildings then
18012: LD_VAR 0 18
18016: IFFALSE 19338
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18018: LD_ADDR_VAR 0 19
18022: PUSH
18023: LD_VAR 0 18
18027: PPUSH
18028: LD_INT 2
18030: PUSH
18031: LD_INT 30
18033: PUSH
18034: LD_INT 29
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 30
18043: PUSH
18044: LD_INT 30
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: PPUSH
18056: CALL_OW 72
18060: ST_TO_ADDR
// if tmp then
18061: LD_VAR 0 19
18065: IFFALSE 18113
// for i in tmp do
18067: LD_ADDR_VAR 0 8
18071: PUSH
18072: LD_VAR 0 19
18076: PUSH
18077: FOR_IN
18078: IFFALSE 18111
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18080: LD_VAR 0 8
18084: PPUSH
18085: CALL_OW 250
18089: PPUSH
18090: LD_VAR 0 8
18094: PPUSH
18095: CALL_OW 251
18099: PPUSH
18100: LD_VAR 0 16
18104: PPUSH
18105: CALL_OW 441
18109: GO 18077
18111: POP
18112: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18113: LD_VAR 0 18
18117: PPUSH
18118: LD_INT 2
18120: PUSH
18121: LD_INT 30
18123: PUSH
18124: LD_INT 32
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 30
18133: PUSH
18134: LD_INT 33
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 72
18150: IFFALSE 18238
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18152: LD_ADDR_VAR 0 8
18156: PUSH
18157: LD_VAR 0 18
18161: PPUSH
18162: LD_INT 2
18164: PUSH
18165: LD_INT 30
18167: PUSH
18168: LD_INT 32
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 30
18177: PUSH
18178: LD_INT 33
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: PPUSH
18190: CALL_OW 72
18194: PUSH
18195: FOR_IN
18196: IFFALSE 18236
// begin if not GetBWeapon ( i ) then
18198: LD_VAR 0 8
18202: PPUSH
18203: CALL_OW 269
18207: NOT
18208: IFFALSE 18234
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18210: LD_VAR 0 8
18214: PPUSH
18215: LD_VAR 0 8
18219: PPUSH
18220: LD_VAR 0 2
18224: PPUSH
18225: CALL 19484 0 2
18229: PPUSH
18230: CALL_OW 431
// end ;
18234: GO 18195
18236: POP
18237: POP
// end ; for i = 1 to personel do
18238: LD_ADDR_VAR 0 8
18242: PUSH
18243: DOUBLE
18244: LD_INT 1
18246: DEC
18247: ST_TO_ADDR
18248: LD_VAR 0 6
18252: PUSH
18253: FOR_TO
18254: IFFALSE 19318
// begin if i > 4 then
18256: LD_VAR 0 8
18260: PUSH
18261: LD_INT 4
18263: GREATER
18264: IFFALSE 18268
// break ;
18266: GO 19318
// case i of 1 :
18268: LD_VAR 0 8
18272: PUSH
18273: LD_INT 1
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18361
18281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18282: LD_ADDR_VAR 0 12
18286: PUSH
18287: LD_VAR 0 18
18291: PPUSH
18292: LD_INT 22
18294: PUSH
18295: LD_VAR 0 16
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 58
18306: PUSH
18307: EMPTY
18308: LIST
18309: PUSH
18310: LD_INT 2
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 32
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 30
18325: PUSH
18326: LD_INT 4
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 30
18335: PUSH
18336: LD_INT 5
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 72
18358: ST_TO_ADDR
18359: GO 18583
18361: LD_INT 2
18363: DOUBLE
18364: EQUAL
18365: IFTRUE 18369
18367: GO 18431
18369: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18370: LD_ADDR_VAR 0 12
18374: PUSH
18375: LD_VAR 0 18
18379: PPUSH
18380: LD_INT 22
18382: PUSH
18383: LD_VAR 0 16
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: LD_INT 30
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 30
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PPUSH
18424: CALL_OW 72
18428: ST_TO_ADDR
18429: GO 18583
18431: LD_INT 3
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18501
18439: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18440: LD_ADDR_VAR 0 12
18444: PUSH
18445: LD_VAR 0 18
18449: PPUSH
18450: LD_INT 22
18452: PUSH
18453: LD_VAR 0 16
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 30
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 30
18477: PUSH
18478: LD_INT 3
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PPUSH
18494: CALL_OW 72
18498: ST_TO_ADDR
18499: GO 18583
18501: LD_INT 4
18503: DOUBLE
18504: EQUAL
18505: IFTRUE 18509
18507: GO 18582
18509: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18510: LD_ADDR_VAR 0 12
18514: PUSH
18515: LD_VAR 0 18
18519: PPUSH
18520: LD_INT 22
18522: PUSH
18523: LD_VAR 0 16
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: LD_INT 30
18537: PUSH
18538: LD_INT 6
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: LD_INT 7
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 30
18557: PUSH
18558: LD_INT 8
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PPUSH
18575: CALL_OW 72
18579: ST_TO_ADDR
18580: GO 18583
18582: POP
// if i = 1 then
18583: LD_VAR 0 8
18587: PUSH
18588: LD_INT 1
18590: EQUAL
18591: IFFALSE 18702
// begin tmp := [ ] ;
18593: LD_ADDR_VAR 0 19
18597: PUSH
18598: EMPTY
18599: ST_TO_ADDR
// for j in f do
18600: LD_ADDR_VAR 0 9
18604: PUSH
18605: LD_VAR 0 12
18609: PUSH
18610: FOR_IN
18611: IFFALSE 18684
// if GetBType ( j ) = b_bunker then
18613: LD_VAR 0 9
18617: PPUSH
18618: CALL_OW 266
18622: PUSH
18623: LD_INT 32
18625: EQUAL
18626: IFFALSE 18653
// tmp := Insert ( tmp , 1 , j ) else
18628: LD_ADDR_VAR 0 19
18632: PUSH
18633: LD_VAR 0 19
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: LD_VAR 0 9
18645: PPUSH
18646: CALL_OW 2
18650: ST_TO_ADDR
18651: GO 18682
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18653: LD_ADDR_VAR 0 19
18657: PUSH
18658: LD_VAR 0 19
18662: PPUSH
18663: LD_VAR 0 19
18667: PUSH
18668: LD_INT 1
18670: PLUS
18671: PPUSH
18672: LD_VAR 0 9
18676: PPUSH
18677: CALL_OW 2
18681: ST_TO_ADDR
18682: GO 18610
18684: POP
18685: POP
// if tmp then
18686: LD_VAR 0 19
18690: IFFALSE 18702
// f := tmp ;
18692: LD_ADDR_VAR 0 12
18696: PUSH
18697: LD_VAR 0 19
18701: ST_TO_ADDR
// end ; x := personel [ i ] ;
18702: LD_ADDR_VAR 0 13
18706: PUSH
18707: LD_VAR 0 6
18711: PUSH
18712: LD_VAR 0 8
18716: ARRAY
18717: ST_TO_ADDR
// if x = - 1 then
18718: LD_VAR 0 13
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: EQUAL
18727: IFFALSE 18936
// begin for j in f do
18729: LD_ADDR_VAR 0 9
18733: PUSH
18734: LD_VAR 0 12
18738: PUSH
18739: FOR_IN
18740: IFFALSE 18932
// repeat InitHc ;
18742: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18746: LD_VAR 0 9
18750: PPUSH
18751: CALL_OW 266
18755: PUSH
18756: LD_INT 5
18758: EQUAL
18759: IFFALSE 18829
// begin if UnitsInside ( j ) < 3 then
18761: LD_VAR 0 9
18765: PPUSH
18766: CALL_OW 313
18770: PUSH
18771: LD_INT 3
18773: LESS
18774: IFFALSE 18810
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18776: LD_INT 0
18778: PPUSH
18779: LD_INT 5
18781: PUSH
18782: LD_INT 8
18784: PUSH
18785: LD_INT 9
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: LIST
18792: PUSH
18793: LD_VAR 0 17
18797: ARRAY
18798: PPUSH
18799: LD_VAR 0 4
18803: PPUSH
18804: CALL_OW 380
18808: GO 18827
// PrepareHuman ( false , i , skill ) ;
18810: LD_INT 0
18812: PPUSH
18813: LD_VAR 0 8
18817: PPUSH
18818: LD_VAR 0 4
18822: PPUSH
18823: CALL_OW 380
// end else
18827: GO 18846
// PrepareHuman ( false , i , skill ) ;
18829: LD_INT 0
18831: PPUSH
18832: LD_VAR 0 8
18836: PPUSH
18837: LD_VAR 0 4
18841: PPUSH
18842: CALL_OW 380
// un := CreateHuman ;
18846: LD_ADDR_VAR 0 14
18850: PUSH
18851: CALL_OW 44
18855: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18856: LD_ADDR_VAR 0 7
18860: PUSH
18861: LD_VAR 0 7
18865: PPUSH
18866: LD_INT 1
18868: PPUSH
18869: LD_VAR 0 14
18873: PPUSH
18874: CALL_OW 2
18878: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18879: LD_VAR 0 14
18883: PPUSH
18884: LD_VAR 0 9
18888: PPUSH
18889: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18893: LD_VAR 0 9
18897: PPUSH
18898: CALL_OW 313
18902: PUSH
18903: LD_INT 6
18905: EQUAL
18906: PUSH
18907: LD_VAR 0 9
18911: PPUSH
18912: CALL_OW 266
18916: PUSH
18917: LD_INT 32
18919: PUSH
18920: LD_INT 31
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: IN
18927: OR
18928: IFFALSE 18742
18930: GO 18739
18932: POP
18933: POP
// end else
18934: GO 19316
// for j = 1 to x do
18936: LD_ADDR_VAR 0 9
18940: PUSH
18941: DOUBLE
18942: LD_INT 1
18944: DEC
18945: ST_TO_ADDR
18946: LD_VAR 0 13
18950: PUSH
18951: FOR_TO
18952: IFFALSE 19314
// begin InitHc ;
18954: CALL_OW 19
// if not f then
18958: LD_VAR 0 12
18962: NOT
18963: IFFALSE 19052
// begin PrepareHuman ( false , i , skill ) ;
18965: LD_INT 0
18967: PPUSH
18968: LD_VAR 0 8
18972: PPUSH
18973: LD_VAR 0 4
18977: PPUSH
18978: CALL_OW 380
// un := CreateHuman ;
18982: LD_ADDR_VAR 0 14
18986: PUSH
18987: CALL_OW 44
18991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18992: LD_ADDR_VAR 0 7
18996: PUSH
18997: LD_VAR 0 7
19001: PPUSH
19002: LD_INT 1
19004: PPUSH
19005: LD_VAR 0 14
19009: PPUSH
19010: CALL_OW 2
19014: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19015: LD_VAR 0 14
19019: PPUSH
19020: LD_VAR 0 1
19024: PPUSH
19025: CALL_OW 250
19029: PPUSH
19030: LD_VAR 0 1
19034: PPUSH
19035: CALL_OW 251
19039: PPUSH
19040: LD_INT 10
19042: PPUSH
19043: LD_INT 0
19045: PPUSH
19046: CALL_OW 50
// continue ;
19050: GO 18951
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19052: LD_VAR 0 12
19056: PUSH
19057: LD_INT 1
19059: ARRAY
19060: PPUSH
19061: CALL_OW 313
19065: PUSH
19066: LD_VAR 0 12
19070: PUSH
19071: LD_INT 1
19073: ARRAY
19074: PPUSH
19075: CALL_OW 266
19079: PUSH
19080: LD_INT 32
19082: PUSH
19083: LD_INT 31
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: IN
19090: AND
19091: PUSH
19092: LD_VAR 0 12
19096: PUSH
19097: LD_INT 1
19099: ARRAY
19100: PPUSH
19101: CALL_OW 313
19105: PUSH
19106: LD_INT 6
19108: EQUAL
19109: OR
19110: IFFALSE 19130
// f := Delete ( f , 1 ) ;
19112: LD_ADDR_VAR 0 12
19116: PUSH
19117: LD_VAR 0 12
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 3
19129: ST_TO_ADDR
// if not f then
19130: LD_VAR 0 12
19134: NOT
19135: IFFALSE 19153
// begin x := x + 2 ;
19137: LD_ADDR_VAR 0 13
19141: PUSH
19142: LD_VAR 0 13
19146: PUSH
19147: LD_INT 2
19149: PLUS
19150: ST_TO_ADDR
// continue ;
19151: GO 18951
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19153: LD_VAR 0 12
19157: PUSH
19158: LD_INT 1
19160: ARRAY
19161: PPUSH
19162: CALL_OW 266
19166: PUSH
19167: LD_INT 5
19169: EQUAL
19170: IFFALSE 19244
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19172: LD_VAR 0 12
19176: PUSH
19177: LD_INT 1
19179: ARRAY
19180: PPUSH
19181: CALL_OW 313
19185: PUSH
19186: LD_INT 3
19188: LESS
19189: IFFALSE 19225
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19191: LD_INT 0
19193: PPUSH
19194: LD_INT 5
19196: PUSH
19197: LD_INT 8
19199: PUSH
19200: LD_INT 9
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: PUSH
19208: LD_VAR 0 17
19212: ARRAY
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL_OW 380
19223: GO 19242
// PrepareHuman ( false , i , skill ) ;
19225: LD_INT 0
19227: PPUSH
19228: LD_VAR 0 8
19232: PPUSH
19233: LD_VAR 0 4
19237: PPUSH
19238: CALL_OW 380
// end else
19242: GO 19261
// PrepareHuman ( false , i , skill ) ;
19244: LD_INT 0
19246: PPUSH
19247: LD_VAR 0 8
19251: PPUSH
19252: LD_VAR 0 4
19256: PPUSH
19257: CALL_OW 380
// un := CreateHuman ;
19261: LD_ADDR_VAR 0 14
19265: PUSH
19266: CALL_OW 44
19270: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19271: LD_ADDR_VAR 0 7
19275: PUSH
19276: LD_VAR 0 7
19280: PPUSH
19281: LD_INT 1
19283: PPUSH
19284: LD_VAR 0 14
19288: PPUSH
19289: CALL_OW 2
19293: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19294: LD_VAR 0 14
19298: PPUSH
19299: LD_VAR 0 12
19303: PUSH
19304: LD_INT 1
19306: ARRAY
19307: PPUSH
19308: CALL_OW 52
// end ;
19312: GO 18951
19314: POP
19315: POP
// end ;
19316: GO 18253
19318: POP
19319: POP
// result := result ^ buildings ;
19320: LD_ADDR_VAR 0 7
19324: PUSH
19325: LD_VAR 0 7
19329: PUSH
19330: LD_VAR 0 18
19334: ADD
19335: ST_TO_ADDR
// end else
19336: GO 19479
// begin for i = 1 to personel do
19338: LD_ADDR_VAR 0 8
19342: PUSH
19343: DOUBLE
19344: LD_INT 1
19346: DEC
19347: ST_TO_ADDR
19348: LD_VAR 0 6
19352: PUSH
19353: FOR_TO
19354: IFFALSE 19477
// begin if i > 4 then
19356: LD_VAR 0 8
19360: PUSH
19361: LD_INT 4
19363: GREATER
19364: IFFALSE 19368
// break ;
19366: GO 19477
// x := personel [ i ] ;
19368: LD_ADDR_VAR 0 13
19372: PUSH
19373: LD_VAR 0 6
19377: PUSH
19378: LD_VAR 0 8
19382: ARRAY
19383: ST_TO_ADDR
// if x = - 1 then
19384: LD_VAR 0 13
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: EQUAL
19393: IFFALSE 19397
// continue ;
19395: GO 19353
// PrepareHuman ( false , i , skill ) ;
19397: LD_INT 0
19399: PPUSH
19400: LD_VAR 0 8
19404: PPUSH
19405: LD_VAR 0 4
19409: PPUSH
19410: CALL_OW 380
// un := CreateHuman ;
19414: LD_ADDR_VAR 0 14
19418: PUSH
19419: CALL_OW 44
19423: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19424: LD_VAR 0 14
19428: PPUSH
19429: LD_VAR 0 1
19433: PPUSH
19434: CALL_OW 250
19438: PPUSH
19439: LD_VAR 0 1
19443: PPUSH
19444: CALL_OW 251
19448: PPUSH
19449: LD_INT 10
19451: PPUSH
19452: LD_INT 0
19454: PPUSH
19455: CALL_OW 50
// result := result ^ un ;
19459: LD_ADDR_VAR 0 7
19463: PUSH
19464: LD_VAR 0 7
19468: PUSH
19469: LD_VAR 0 14
19473: ADD
19474: ST_TO_ADDR
// end ;
19475: GO 19353
19477: POP
19478: POP
// end ; end ;
19479: LD_VAR 0 7
19483: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19484: LD_INT 0
19486: PPUSH
19487: PPUSH
19488: PPUSH
19489: PPUSH
19490: PPUSH
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
19498: PPUSH
19499: PPUSH
19500: PPUSH
19501: PPUSH
// result := false ;
19502: LD_ADDR_VAR 0 3
19506: PUSH
19507: LD_INT 0
19509: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19510: LD_VAR 0 1
19514: NOT
19515: PUSH
19516: LD_VAR 0 1
19520: PPUSH
19521: CALL_OW 266
19525: PUSH
19526: LD_INT 32
19528: PUSH
19529: LD_INT 33
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: IN
19536: NOT
19537: OR
19538: IFFALSE 19542
// exit ;
19540: GO 20651
// nat := GetNation ( tower ) ;
19542: LD_ADDR_VAR 0 12
19546: PUSH
19547: LD_VAR 0 1
19551: PPUSH
19552: CALL_OW 248
19556: ST_TO_ADDR
// side := GetSide ( tower ) ;
19557: LD_ADDR_VAR 0 16
19561: PUSH
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 255
19571: ST_TO_ADDR
// x := GetX ( tower ) ;
19572: LD_ADDR_VAR 0 10
19576: PUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: CALL_OW 250
19586: ST_TO_ADDR
// y := GetY ( tower ) ;
19587: LD_ADDR_VAR 0 11
19591: PUSH
19592: LD_VAR 0 1
19596: PPUSH
19597: CALL_OW 251
19601: ST_TO_ADDR
// if not x or not y then
19602: LD_VAR 0 10
19606: NOT
19607: PUSH
19608: LD_VAR 0 11
19612: NOT
19613: OR
19614: IFFALSE 19618
// exit ;
19616: GO 20651
// weapon := 0 ;
19618: LD_ADDR_VAR 0 18
19622: PUSH
19623: LD_INT 0
19625: ST_TO_ADDR
// fac_list := [ ] ;
19626: LD_ADDR_VAR 0 17
19630: PUSH
19631: EMPTY
19632: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19633: LD_ADDR_VAR 0 6
19637: PUSH
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 274
19647: PPUSH
19648: LD_VAR 0 2
19652: PPUSH
19653: LD_INT 0
19655: PPUSH
19656: CALL 17222 0 3
19660: PPUSH
19661: LD_INT 30
19663: PUSH
19664: LD_INT 3
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 72
19675: ST_TO_ADDR
// if not factories then
19676: LD_VAR 0 6
19680: NOT
19681: IFFALSE 19685
// exit ;
19683: GO 20651
// for i in factories do
19685: LD_ADDR_VAR 0 8
19689: PUSH
19690: LD_VAR 0 6
19694: PUSH
19695: FOR_IN
19696: IFFALSE 19721
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19698: LD_ADDR_VAR 0 17
19702: PUSH
19703: LD_VAR 0 17
19707: PUSH
19708: LD_VAR 0 8
19712: PPUSH
19713: CALL_OW 478
19717: UNION
19718: ST_TO_ADDR
19719: GO 19695
19721: POP
19722: POP
// if not fac_list then
19723: LD_VAR 0 17
19727: NOT
19728: IFFALSE 19732
// exit ;
19730: GO 20651
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19732: LD_ADDR_VAR 0 5
19736: PUSH
19737: LD_INT 4
19739: PUSH
19740: LD_INT 5
19742: PUSH
19743: LD_INT 9
19745: PUSH
19746: LD_INT 10
19748: PUSH
19749: LD_INT 6
19751: PUSH
19752: LD_INT 7
19754: PUSH
19755: LD_INT 11
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 27
19769: PUSH
19770: LD_INT 28
19772: PUSH
19773: LD_INT 26
19775: PUSH
19776: LD_INT 30
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 43
19787: PUSH
19788: LD_INT 44
19790: PUSH
19791: LD_INT 46
19793: PUSH
19794: LD_INT 45
19796: PUSH
19797: LD_INT 47
19799: PUSH
19800: LD_INT 49
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: LIST
19815: PUSH
19816: LD_VAR 0 12
19820: ARRAY
19821: ST_TO_ADDR
// list := list isect fac_list ;
19822: LD_ADDR_VAR 0 5
19826: PUSH
19827: LD_VAR 0 5
19831: PUSH
19832: LD_VAR 0 17
19836: ISECT
19837: ST_TO_ADDR
// if not list then
19838: LD_VAR 0 5
19842: NOT
19843: IFFALSE 19847
// exit ;
19845: GO 20651
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19847: LD_VAR 0 12
19851: PUSH
19852: LD_INT 3
19854: EQUAL
19855: PUSH
19856: LD_INT 49
19858: PUSH
19859: LD_VAR 0 5
19863: IN
19864: AND
19865: PUSH
19866: LD_INT 31
19868: PPUSH
19869: LD_VAR 0 16
19873: PPUSH
19874: CALL_OW 321
19878: PUSH
19879: LD_INT 2
19881: EQUAL
19882: AND
19883: IFFALSE 19943
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19885: LD_INT 22
19887: PUSH
19888: LD_VAR 0 16
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 35
19899: PUSH
19900: LD_INT 49
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 91
19909: PUSH
19910: LD_VAR 0 1
19914: PUSH
19915: LD_INT 10
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: NOT
19933: IFFALSE 19943
// weapon := ru_time_lapser ;
19935: LD_ADDR_VAR 0 18
19939: PUSH
19940: LD_INT 49
19942: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19943: LD_VAR 0 12
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: IN
19958: PUSH
19959: LD_INT 11
19961: PUSH
19962: LD_VAR 0 5
19966: IN
19967: PUSH
19968: LD_INT 30
19970: PUSH
19971: LD_VAR 0 5
19975: IN
19976: OR
19977: AND
19978: PUSH
19979: LD_INT 6
19981: PPUSH
19982: LD_VAR 0 16
19986: PPUSH
19987: CALL_OW 321
19991: PUSH
19992: LD_INT 2
19994: EQUAL
19995: AND
19996: IFFALSE 20161
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19998: LD_INT 22
20000: PUSH
20001: LD_VAR 0 16
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 2
20012: PUSH
20013: LD_INT 35
20015: PUSH
20016: LD_INT 11
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 35
20025: PUSH
20026: LD_INT 30
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 91
20040: PUSH
20041: LD_VAR 0 1
20045: PUSH
20046: LD_INT 18
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: PPUSH
20059: CALL_OW 69
20063: NOT
20064: PUSH
20065: LD_INT 22
20067: PUSH
20068: LD_VAR 0 16
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 30
20082: PUSH
20083: LD_INT 32
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 30
20092: PUSH
20093: LD_INT 33
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 91
20107: PUSH
20108: LD_VAR 0 1
20112: PUSH
20113: LD_INT 12
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: PUSH
20126: EMPTY
20127: LIST
20128: PPUSH
20129: CALL_OW 69
20133: PUSH
20134: LD_INT 2
20136: GREATER
20137: AND
20138: IFFALSE 20161
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20140: LD_ADDR_VAR 0 18
20144: PUSH
20145: LD_INT 11
20147: PUSH
20148: LD_INT 30
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_VAR 0 12
20159: ARRAY
20160: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20161: LD_VAR 0 18
20165: NOT
20166: PUSH
20167: LD_INT 40
20169: PPUSH
20170: LD_VAR 0 16
20174: PPUSH
20175: CALL_OW 321
20179: PUSH
20180: LD_INT 2
20182: EQUAL
20183: AND
20184: PUSH
20185: LD_INT 7
20187: PUSH
20188: LD_VAR 0 5
20192: IN
20193: PUSH
20194: LD_INT 28
20196: PUSH
20197: LD_VAR 0 5
20201: IN
20202: OR
20203: PUSH
20204: LD_INT 45
20206: PUSH
20207: LD_VAR 0 5
20211: IN
20212: OR
20213: AND
20214: IFFALSE 20468
// begin hex := GetHexInfo ( x , y ) ;
20216: LD_ADDR_VAR 0 4
20220: PUSH
20221: LD_VAR 0 10
20225: PPUSH
20226: LD_VAR 0 11
20230: PPUSH
20231: CALL_OW 546
20235: ST_TO_ADDR
// if hex [ 1 ] then
20236: LD_VAR 0 4
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: IFFALSE 20248
// exit ;
20246: GO 20651
// height := hex [ 2 ] ;
20248: LD_ADDR_VAR 0 15
20252: PUSH
20253: LD_VAR 0 4
20257: PUSH
20258: LD_INT 2
20260: ARRAY
20261: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20262: LD_ADDR_VAR 0 14
20266: PUSH
20267: LD_INT 0
20269: PUSH
20270: LD_INT 2
20272: PUSH
20273: LD_INT 3
20275: PUSH
20276: LD_INT 5
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: ST_TO_ADDR
// for i in tmp do
20285: LD_ADDR_VAR 0 8
20289: PUSH
20290: LD_VAR 0 14
20294: PUSH
20295: FOR_IN
20296: IFFALSE 20466
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20298: LD_ADDR_VAR 0 9
20302: PUSH
20303: LD_VAR 0 10
20307: PPUSH
20308: LD_VAR 0 8
20312: PPUSH
20313: LD_INT 5
20315: PPUSH
20316: CALL_OW 272
20320: PUSH
20321: LD_VAR 0 11
20325: PPUSH
20326: LD_VAR 0 8
20330: PPUSH
20331: LD_INT 5
20333: PPUSH
20334: CALL_OW 273
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20343: LD_VAR 0 9
20347: PUSH
20348: LD_INT 1
20350: ARRAY
20351: PPUSH
20352: LD_VAR 0 9
20356: PUSH
20357: LD_INT 2
20359: ARRAY
20360: PPUSH
20361: CALL_OW 488
20365: IFFALSE 20464
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20367: LD_ADDR_VAR 0 4
20371: PUSH
20372: LD_VAR 0 9
20376: PUSH
20377: LD_INT 1
20379: ARRAY
20380: PPUSH
20381: LD_VAR 0 9
20385: PUSH
20386: LD_INT 2
20388: ARRAY
20389: PPUSH
20390: CALL_OW 546
20394: ST_TO_ADDR
// if hex [ 1 ] then
20395: LD_VAR 0 4
20399: PUSH
20400: LD_INT 1
20402: ARRAY
20403: IFFALSE 20407
// continue ;
20405: GO 20295
// h := hex [ 2 ] ;
20407: LD_ADDR_VAR 0 13
20411: PUSH
20412: LD_VAR 0 4
20416: PUSH
20417: LD_INT 2
20419: ARRAY
20420: ST_TO_ADDR
// if h + 7 < height then
20421: LD_VAR 0 13
20425: PUSH
20426: LD_INT 7
20428: PLUS
20429: PUSH
20430: LD_VAR 0 15
20434: LESS
20435: IFFALSE 20464
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20437: LD_ADDR_VAR 0 18
20441: PUSH
20442: LD_INT 7
20444: PUSH
20445: LD_INT 28
20447: PUSH
20448: LD_INT 45
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PUSH
20456: LD_VAR 0 12
20460: ARRAY
20461: ST_TO_ADDR
// break ;
20462: GO 20466
// end ; end ; end ;
20464: GO 20295
20466: POP
20467: POP
// end ; if not weapon then
20468: LD_VAR 0 18
20472: NOT
20473: IFFALSE 20533
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20475: LD_ADDR_VAR 0 5
20479: PUSH
20480: LD_VAR 0 5
20484: PUSH
20485: LD_INT 11
20487: PUSH
20488: LD_INT 30
20490: PUSH
20491: LD_INT 49
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: LIST
20498: DIFF
20499: ST_TO_ADDR
// if not list then
20500: LD_VAR 0 5
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20651
// weapon := list [ rand ( 1 , list ) ] ;
20509: LD_ADDR_VAR 0 18
20513: PUSH
20514: LD_VAR 0 5
20518: PUSH
20519: LD_INT 1
20521: PPUSH
20522: LD_VAR 0 5
20526: PPUSH
20527: CALL_OW 12
20531: ARRAY
20532: ST_TO_ADDR
// end ; if weapon then
20533: LD_VAR 0 18
20537: IFFALSE 20651
// begin tmp := CostOfWeapon ( weapon ) ;
20539: LD_ADDR_VAR 0 14
20543: PUSH
20544: LD_VAR 0 18
20548: PPUSH
20549: CALL_OW 451
20553: ST_TO_ADDR
// j := GetBase ( tower ) ;
20554: LD_ADDR_VAR 0 9
20558: PUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 274
20568: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20569: LD_VAR 0 9
20573: PPUSH
20574: LD_INT 1
20576: PPUSH
20577: CALL_OW 275
20581: PUSH
20582: LD_VAR 0 14
20586: PUSH
20587: LD_INT 1
20589: ARRAY
20590: GREATEREQUAL
20591: PUSH
20592: LD_VAR 0 9
20596: PPUSH
20597: LD_INT 2
20599: PPUSH
20600: CALL_OW 275
20604: PUSH
20605: LD_VAR 0 14
20609: PUSH
20610: LD_INT 2
20612: ARRAY
20613: GREATEREQUAL
20614: AND
20615: PUSH
20616: LD_VAR 0 9
20620: PPUSH
20621: LD_INT 3
20623: PPUSH
20624: CALL_OW 275
20628: PUSH
20629: LD_VAR 0 14
20633: PUSH
20634: LD_INT 3
20636: ARRAY
20637: GREATEREQUAL
20638: AND
20639: IFFALSE 20651
// result := weapon ;
20641: LD_ADDR_VAR 0 3
20645: PUSH
20646: LD_VAR 0 18
20650: ST_TO_ADDR
// end ; end ;
20651: LD_VAR 0 3
20655: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20656: LD_INT 0
20658: PPUSH
20659: PPUSH
// result := true ;
20660: LD_ADDR_VAR 0 3
20664: PUSH
20665: LD_INT 1
20667: ST_TO_ADDR
// if array1 = array2 then
20668: LD_VAR 0 1
20672: PUSH
20673: LD_VAR 0 2
20677: EQUAL
20678: IFFALSE 20738
// begin for i = 1 to array1 do
20680: LD_ADDR_VAR 0 4
20684: PUSH
20685: DOUBLE
20686: LD_INT 1
20688: DEC
20689: ST_TO_ADDR
20690: LD_VAR 0 1
20694: PUSH
20695: FOR_TO
20696: IFFALSE 20734
// if array1 [ i ] <> array2 [ i ] then
20698: LD_VAR 0 1
20702: PUSH
20703: LD_VAR 0 4
20707: ARRAY
20708: PUSH
20709: LD_VAR 0 2
20713: PUSH
20714: LD_VAR 0 4
20718: ARRAY
20719: NONEQUAL
20720: IFFALSE 20732
// begin result := false ;
20722: LD_ADDR_VAR 0 3
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// break ;
20730: GO 20734
// end ;
20732: GO 20695
20734: POP
20735: POP
// end else
20736: GO 20746
// result := false ;
20738: LD_ADDR_VAR 0 3
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// end ;
20746: LD_VAR 0 3
20750: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20751: LD_INT 0
20753: PPUSH
20754: PPUSH
// if not array1 or not array2 then
20755: LD_VAR 0 1
20759: NOT
20760: PUSH
20761: LD_VAR 0 2
20765: NOT
20766: OR
20767: IFFALSE 20771
// exit ;
20769: GO 20835
// result := true ;
20771: LD_ADDR_VAR 0 3
20775: PUSH
20776: LD_INT 1
20778: ST_TO_ADDR
// for i = 1 to array1 do
20779: LD_ADDR_VAR 0 4
20783: PUSH
20784: DOUBLE
20785: LD_INT 1
20787: DEC
20788: ST_TO_ADDR
20789: LD_VAR 0 1
20793: PUSH
20794: FOR_TO
20795: IFFALSE 20833
// if array1 [ i ] <> array2 [ i ] then
20797: LD_VAR 0 1
20801: PUSH
20802: LD_VAR 0 4
20806: ARRAY
20807: PUSH
20808: LD_VAR 0 2
20812: PUSH
20813: LD_VAR 0 4
20817: ARRAY
20818: NONEQUAL
20819: IFFALSE 20831
// begin result := false ;
20821: LD_ADDR_VAR 0 3
20825: PUSH
20826: LD_INT 0
20828: ST_TO_ADDR
// break ;
20829: GO 20833
// end ;
20831: GO 20794
20833: POP
20834: POP
// end ;
20835: LD_VAR 0 3
20839: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
20844: PPUSH
// pom := GetBase ( fac ) ;
20845: LD_ADDR_VAR 0 5
20849: PUSH
20850: LD_VAR 0 1
20854: PPUSH
20855: CALL_OW 274
20859: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20860: LD_ADDR_VAR 0 4
20864: PUSH
20865: LD_VAR 0 2
20869: PUSH
20870: LD_INT 1
20872: ARRAY
20873: PPUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_INT 2
20881: ARRAY
20882: PPUSH
20883: LD_VAR 0 2
20887: PUSH
20888: LD_INT 3
20890: ARRAY
20891: PPUSH
20892: LD_VAR 0 2
20896: PUSH
20897: LD_INT 4
20899: ARRAY
20900: PPUSH
20901: CALL_OW 449
20905: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20906: LD_ADDR_VAR 0 3
20910: PUSH
20911: LD_VAR 0 5
20915: PPUSH
20916: LD_INT 1
20918: PPUSH
20919: CALL_OW 275
20923: PUSH
20924: LD_VAR 0 4
20928: PUSH
20929: LD_INT 1
20931: ARRAY
20932: GREATEREQUAL
20933: PUSH
20934: LD_VAR 0 5
20938: PPUSH
20939: LD_INT 2
20941: PPUSH
20942: CALL_OW 275
20946: PUSH
20947: LD_VAR 0 4
20951: PUSH
20952: LD_INT 2
20954: ARRAY
20955: GREATEREQUAL
20956: AND
20957: PUSH
20958: LD_VAR 0 5
20962: PPUSH
20963: LD_INT 3
20965: PPUSH
20966: CALL_OW 275
20970: PUSH
20971: LD_VAR 0 4
20975: PUSH
20976: LD_INT 3
20978: ARRAY
20979: GREATEREQUAL
20980: AND
20981: ST_TO_ADDR
// end ;
20982: LD_VAR 0 3
20986: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20987: LD_INT 0
20989: PPUSH
20990: PPUSH
20991: PPUSH
20992: PPUSH
// pom := GetBase ( building ) ;
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_VAR 0 1
21002: PPUSH
21003: CALL_OW 274
21007: ST_TO_ADDR
// if not pom then
21008: LD_VAR 0 3
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21187
// btype := GetBType ( building ) ;
21017: LD_ADDR_VAR 0 5
21021: PUSH
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 266
21031: ST_TO_ADDR
// if btype = b_armoury then
21032: LD_VAR 0 5
21036: PUSH
21037: LD_INT 4
21039: EQUAL
21040: IFFALSE 21050
// btype := b_barracks ;
21042: LD_ADDR_VAR 0 5
21046: PUSH
21047: LD_INT 5
21049: ST_TO_ADDR
// if btype = b_depot then
21050: LD_VAR 0 5
21054: PUSH
21055: LD_INT 0
21057: EQUAL
21058: IFFALSE 21068
// btype := b_warehouse ;
21060: LD_ADDR_VAR 0 5
21064: PUSH
21065: LD_INT 1
21067: ST_TO_ADDR
// if btype = b_workshop then
21068: LD_VAR 0 5
21072: PUSH
21073: LD_INT 2
21075: EQUAL
21076: IFFALSE 21086
// btype := b_factory ;
21078: LD_ADDR_VAR 0 5
21082: PUSH
21083: LD_INT 3
21085: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21086: LD_ADDR_VAR 0 4
21090: PUSH
21091: LD_VAR 0 5
21095: PPUSH
21096: LD_VAR 0 1
21100: PPUSH
21101: CALL_OW 248
21105: PPUSH
21106: CALL_OW 450
21110: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21111: LD_ADDR_VAR 0 2
21115: PUSH
21116: LD_VAR 0 3
21120: PPUSH
21121: LD_INT 1
21123: PPUSH
21124: CALL_OW 275
21128: PUSH
21129: LD_VAR 0 4
21133: PUSH
21134: LD_INT 1
21136: ARRAY
21137: GREATEREQUAL
21138: PUSH
21139: LD_VAR 0 3
21143: PPUSH
21144: LD_INT 2
21146: PPUSH
21147: CALL_OW 275
21151: PUSH
21152: LD_VAR 0 4
21156: PUSH
21157: LD_INT 2
21159: ARRAY
21160: GREATEREQUAL
21161: AND
21162: PUSH
21163: LD_VAR 0 3
21167: PPUSH
21168: LD_INT 3
21170: PPUSH
21171: CALL_OW 275
21175: PUSH
21176: LD_VAR 0 4
21180: PUSH
21181: LD_INT 3
21183: ARRAY
21184: GREATEREQUAL
21185: AND
21186: ST_TO_ADDR
// end ;
21187: LD_VAR 0 2
21191: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
21196: PPUSH
// pom := GetBase ( building ) ;
21197: LD_ADDR_VAR 0 4
21201: PUSH
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 274
21211: ST_TO_ADDR
// if not pom then
21212: LD_VAR 0 4
21216: NOT
21217: IFFALSE 21221
// exit ;
21219: GO 21322
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21221: LD_ADDR_VAR 0 5
21225: PUSH
21226: LD_VAR 0 2
21230: PPUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 248
21240: PPUSH
21241: CALL_OW 450
21245: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21246: LD_ADDR_VAR 0 3
21250: PUSH
21251: LD_VAR 0 4
21255: PPUSH
21256: LD_INT 1
21258: PPUSH
21259: CALL_OW 275
21263: PUSH
21264: LD_VAR 0 5
21268: PUSH
21269: LD_INT 1
21271: ARRAY
21272: GREATEREQUAL
21273: PUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_INT 2
21281: PPUSH
21282: CALL_OW 275
21286: PUSH
21287: LD_VAR 0 5
21291: PUSH
21292: LD_INT 2
21294: ARRAY
21295: GREATEREQUAL
21296: AND
21297: PUSH
21298: LD_VAR 0 4
21302: PPUSH
21303: LD_INT 3
21305: PPUSH
21306: CALL_OW 275
21310: PUSH
21311: LD_VAR 0 5
21315: PUSH
21316: LD_INT 3
21318: ARRAY
21319: GREATEREQUAL
21320: AND
21321: ST_TO_ADDR
// end ;
21322: LD_VAR 0 3
21326: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21327: LD_INT 0
21329: PPUSH
21330: PPUSH
21331: PPUSH
21332: PPUSH
21333: PPUSH
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
// result := false ;
21340: LD_ADDR_VAR 0 8
21344: PUSH
21345: LD_INT 0
21347: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21348: LD_VAR 0 5
21352: NOT
21353: PUSH
21354: LD_VAR 0 1
21358: NOT
21359: OR
21360: PUSH
21361: LD_VAR 0 2
21365: NOT
21366: OR
21367: PUSH
21368: LD_VAR 0 3
21372: NOT
21373: OR
21374: IFFALSE 21378
// exit ;
21376: GO 22192
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21378: LD_ADDR_VAR 0 14
21382: PUSH
21383: LD_VAR 0 1
21387: PPUSH
21388: LD_VAR 0 2
21392: PPUSH
21393: LD_VAR 0 3
21397: PPUSH
21398: LD_VAR 0 4
21402: PPUSH
21403: LD_VAR 0 5
21407: PUSH
21408: LD_INT 1
21410: ARRAY
21411: PPUSH
21412: CALL_OW 248
21416: PPUSH
21417: LD_INT 0
21419: PPUSH
21420: CALL 23445 0 6
21424: ST_TO_ADDR
// if not hexes then
21425: LD_VAR 0 14
21429: NOT
21430: IFFALSE 21434
// exit ;
21432: GO 22192
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21434: LD_ADDR_VAR 0 17
21438: PUSH
21439: LD_VAR 0 5
21443: PPUSH
21444: LD_INT 22
21446: PUSH
21447: LD_VAR 0 13
21451: PPUSH
21452: CALL_OW 255
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: PUSH
21464: LD_INT 30
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: CALL_OW 72
21497: ST_TO_ADDR
// for i = 1 to hexes do
21498: LD_ADDR_VAR 0 9
21502: PUSH
21503: DOUBLE
21504: LD_INT 1
21506: DEC
21507: ST_TO_ADDR
21508: LD_VAR 0 14
21512: PUSH
21513: FOR_TO
21514: IFFALSE 22190
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21516: LD_ADDR_VAR 0 13
21520: PUSH
21521: LD_VAR 0 14
21525: PUSH
21526: LD_VAR 0 9
21530: ARRAY
21531: PUSH
21532: LD_INT 1
21534: ARRAY
21535: PPUSH
21536: LD_VAR 0 14
21540: PUSH
21541: LD_VAR 0 9
21545: ARRAY
21546: PUSH
21547: LD_INT 2
21549: ARRAY
21550: PPUSH
21551: CALL_OW 428
21555: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21556: LD_VAR 0 14
21560: PUSH
21561: LD_VAR 0 9
21565: ARRAY
21566: PUSH
21567: LD_INT 1
21569: ARRAY
21570: PPUSH
21571: LD_VAR 0 14
21575: PUSH
21576: LD_VAR 0 9
21580: ARRAY
21581: PUSH
21582: LD_INT 2
21584: ARRAY
21585: PPUSH
21586: CALL_OW 351
21590: PUSH
21591: LD_VAR 0 14
21595: PUSH
21596: LD_VAR 0 9
21600: ARRAY
21601: PUSH
21602: LD_INT 1
21604: ARRAY
21605: PPUSH
21606: LD_VAR 0 14
21610: PUSH
21611: LD_VAR 0 9
21615: ARRAY
21616: PUSH
21617: LD_INT 2
21619: ARRAY
21620: PPUSH
21621: CALL_OW 488
21625: NOT
21626: OR
21627: PUSH
21628: LD_VAR 0 13
21632: PPUSH
21633: CALL_OW 247
21637: PUSH
21638: LD_INT 3
21640: EQUAL
21641: OR
21642: IFFALSE 21648
// exit ;
21644: POP
21645: POP
21646: GO 22192
// if not tmp then
21648: LD_VAR 0 13
21652: NOT
21653: IFFALSE 21657
// continue ;
21655: GO 21513
// result := true ;
21657: LD_ADDR_VAR 0 8
21661: PUSH
21662: LD_INT 1
21664: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21665: LD_VAR 0 6
21669: PUSH
21670: LD_VAR 0 13
21674: PPUSH
21675: CALL_OW 247
21679: PUSH
21680: LD_INT 2
21682: EQUAL
21683: AND
21684: PUSH
21685: LD_VAR 0 13
21689: PPUSH
21690: CALL_OW 263
21694: PUSH
21695: LD_INT 1
21697: EQUAL
21698: AND
21699: IFFALSE 21863
// begin if IsDrivenBy ( tmp ) then
21701: LD_VAR 0 13
21705: PPUSH
21706: CALL_OW 311
21710: IFFALSE 21714
// continue ;
21712: GO 21513
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21714: LD_VAR 0 6
21718: PPUSH
21719: LD_INT 3
21721: PUSH
21722: LD_INT 60
21724: PUSH
21725: EMPTY
21726: LIST
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 3
21734: PUSH
21735: LD_INT 55
21737: PUSH
21738: EMPTY
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PPUSH
21749: CALL_OW 72
21753: IFFALSE 21861
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21755: LD_ADDR_VAR 0 18
21759: PUSH
21760: LD_VAR 0 6
21764: PPUSH
21765: LD_INT 3
21767: PUSH
21768: LD_INT 60
21770: PUSH
21771: EMPTY
21772: LIST
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 3
21780: PUSH
21781: LD_INT 55
21783: PUSH
21784: EMPTY
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 72
21799: PUSH
21800: LD_INT 1
21802: ARRAY
21803: ST_TO_ADDR
// if IsInUnit ( driver ) then
21804: LD_VAR 0 18
21808: PPUSH
21809: CALL_OW 310
21813: IFFALSE 21824
// ComExit ( driver ) ;
21815: LD_VAR 0 18
21819: PPUSH
21820: CALL 47246 0 1
// AddComEnterUnit ( driver , tmp ) ;
21824: LD_VAR 0 18
21828: PPUSH
21829: LD_VAR 0 13
21833: PPUSH
21834: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21838: LD_VAR 0 18
21842: PPUSH
21843: LD_VAR 0 7
21847: PPUSH
21848: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21852: LD_VAR 0 18
21856: PPUSH
21857: CALL_OW 181
// end ; continue ;
21861: GO 21513
// end ; if not cleaners or not tmp in cleaners then
21863: LD_VAR 0 6
21867: NOT
21868: PUSH
21869: LD_VAR 0 13
21873: PUSH
21874: LD_VAR 0 6
21878: IN
21879: NOT
21880: OR
21881: IFFALSE 22188
// begin if dep then
21883: LD_VAR 0 17
21887: IFFALSE 22023
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21889: LD_ADDR_VAR 0 16
21893: PUSH
21894: LD_VAR 0 17
21898: PUSH
21899: LD_INT 1
21901: ARRAY
21902: PPUSH
21903: CALL_OW 250
21907: PPUSH
21908: LD_VAR 0 17
21912: PUSH
21913: LD_INT 1
21915: ARRAY
21916: PPUSH
21917: CALL_OW 254
21921: PPUSH
21922: LD_INT 5
21924: PPUSH
21925: CALL_OW 272
21929: PUSH
21930: LD_VAR 0 17
21934: PUSH
21935: LD_INT 1
21937: ARRAY
21938: PPUSH
21939: CALL_OW 251
21943: PPUSH
21944: LD_VAR 0 17
21948: PUSH
21949: LD_INT 1
21951: ARRAY
21952: PPUSH
21953: CALL_OW 254
21957: PPUSH
21958: LD_INT 5
21960: PPUSH
21961: CALL_OW 273
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21970: LD_VAR 0 16
21974: PUSH
21975: LD_INT 1
21977: ARRAY
21978: PPUSH
21979: LD_VAR 0 16
21983: PUSH
21984: LD_INT 2
21986: ARRAY
21987: PPUSH
21988: CALL_OW 488
21992: IFFALSE 22023
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21994: LD_VAR 0 13
21998: PPUSH
21999: LD_VAR 0 16
22003: PUSH
22004: LD_INT 1
22006: ARRAY
22007: PPUSH
22008: LD_VAR 0 16
22012: PUSH
22013: LD_INT 2
22015: ARRAY
22016: PPUSH
22017: CALL_OW 111
// continue ;
22021: GO 21513
// end ; end ; r := GetDir ( tmp ) ;
22023: LD_ADDR_VAR 0 15
22027: PUSH
22028: LD_VAR 0 13
22032: PPUSH
22033: CALL_OW 254
22037: ST_TO_ADDR
// if r = 5 then
22038: LD_VAR 0 15
22042: PUSH
22043: LD_INT 5
22045: EQUAL
22046: IFFALSE 22056
// r := 0 ;
22048: LD_ADDR_VAR 0 15
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// for j = r to 5 do
22056: LD_ADDR_VAR 0 10
22060: PUSH
22061: DOUBLE
22062: LD_VAR 0 15
22066: DEC
22067: ST_TO_ADDR
22068: LD_INT 5
22070: PUSH
22071: FOR_TO
22072: IFFALSE 22186
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22074: LD_ADDR_VAR 0 11
22078: PUSH
22079: LD_VAR 0 13
22083: PPUSH
22084: CALL_OW 250
22088: PPUSH
22089: LD_VAR 0 10
22093: PPUSH
22094: LD_INT 2
22096: PPUSH
22097: CALL_OW 272
22101: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22102: LD_ADDR_VAR 0 12
22106: PUSH
22107: LD_VAR 0 13
22111: PPUSH
22112: CALL_OW 251
22116: PPUSH
22117: LD_VAR 0 10
22121: PPUSH
22122: LD_INT 2
22124: PPUSH
22125: CALL_OW 273
22129: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22130: LD_VAR 0 11
22134: PPUSH
22135: LD_VAR 0 12
22139: PPUSH
22140: CALL_OW 488
22144: PUSH
22145: LD_VAR 0 11
22149: PPUSH
22150: LD_VAR 0 12
22154: PPUSH
22155: CALL_OW 428
22159: NOT
22160: AND
22161: IFFALSE 22184
// begin ComMoveXY ( tmp , _x , _y ) ;
22163: LD_VAR 0 13
22167: PPUSH
22168: LD_VAR 0 11
22172: PPUSH
22173: LD_VAR 0 12
22177: PPUSH
22178: CALL_OW 111
// break ;
22182: GO 22186
// end ; end ;
22184: GO 22071
22186: POP
22187: POP
// end ; end ;
22188: GO 21513
22190: POP
22191: POP
// end ;
22192: LD_VAR 0 8
22196: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22197: LD_INT 0
22199: PPUSH
// result := true ;
22200: LD_ADDR_VAR 0 3
22204: PUSH
22205: LD_INT 1
22207: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22208: LD_VAR 0 2
22212: PUSH
22213: LD_INT 24
22215: DOUBLE
22216: EQUAL
22217: IFTRUE 22227
22219: LD_INT 33
22221: DOUBLE
22222: EQUAL
22223: IFTRUE 22227
22225: GO 22252
22227: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22228: LD_ADDR_VAR 0 3
22232: PUSH
22233: LD_INT 32
22235: PPUSH
22236: LD_VAR 0 1
22240: PPUSH
22241: CALL_OW 321
22245: PUSH
22246: LD_INT 2
22248: EQUAL
22249: ST_TO_ADDR
22250: GO 22568
22252: LD_INT 20
22254: DOUBLE
22255: EQUAL
22256: IFTRUE 22260
22258: GO 22285
22260: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22261: LD_ADDR_VAR 0 3
22265: PUSH
22266: LD_INT 6
22268: PPUSH
22269: LD_VAR 0 1
22273: PPUSH
22274: CALL_OW 321
22278: PUSH
22279: LD_INT 2
22281: EQUAL
22282: ST_TO_ADDR
22283: GO 22568
22285: LD_INT 22
22287: DOUBLE
22288: EQUAL
22289: IFTRUE 22299
22291: LD_INT 36
22293: DOUBLE
22294: EQUAL
22295: IFTRUE 22299
22297: GO 22324
22299: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22300: LD_ADDR_VAR 0 3
22304: PUSH
22305: LD_INT 15
22307: PPUSH
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 321
22317: PUSH
22318: LD_INT 2
22320: EQUAL
22321: ST_TO_ADDR
22322: GO 22568
22324: LD_INT 30
22326: DOUBLE
22327: EQUAL
22328: IFTRUE 22332
22330: GO 22357
22332: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22333: LD_ADDR_VAR 0 3
22337: PUSH
22338: LD_INT 20
22340: PPUSH
22341: LD_VAR 0 1
22345: PPUSH
22346: CALL_OW 321
22350: PUSH
22351: LD_INT 2
22353: EQUAL
22354: ST_TO_ADDR
22355: GO 22568
22357: LD_INT 28
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22371
22363: LD_INT 21
22365: DOUBLE
22366: EQUAL
22367: IFTRUE 22371
22369: GO 22396
22371: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22372: LD_ADDR_VAR 0 3
22376: PUSH
22377: LD_INT 21
22379: PPUSH
22380: LD_VAR 0 1
22384: PPUSH
22385: CALL_OW 321
22389: PUSH
22390: LD_INT 2
22392: EQUAL
22393: ST_TO_ADDR
22394: GO 22568
22396: LD_INT 16
22398: DOUBLE
22399: EQUAL
22400: IFTRUE 22404
22402: GO 22429
22404: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22405: LD_ADDR_VAR 0 3
22409: PUSH
22410: LD_INT 84
22412: PPUSH
22413: LD_VAR 0 1
22417: PPUSH
22418: CALL_OW 321
22422: PUSH
22423: LD_INT 2
22425: EQUAL
22426: ST_TO_ADDR
22427: GO 22568
22429: LD_INT 19
22431: DOUBLE
22432: EQUAL
22433: IFTRUE 22443
22435: LD_INT 23
22437: DOUBLE
22438: EQUAL
22439: IFTRUE 22443
22441: GO 22468
22443: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22444: LD_ADDR_VAR 0 3
22448: PUSH
22449: LD_INT 83
22451: PPUSH
22452: LD_VAR 0 1
22456: PPUSH
22457: CALL_OW 321
22461: PUSH
22462: LD_INT 2
22464: EQUAL
22465: ST_TO_ADDR
22466: GO 22568
22468: LD_INT 17
22470: DOUBLE
22471: EQUAL
22472: IFTRUE 22476
22474: GO 22501
22476: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_INT 39
22484: PPUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 321
22494: PUSH
22495: LD_INT 2
22497: EQUAL
22498: ST_TO_ADDR
22499: GO 22568
22501: LD_INT 18
22503: DOUBLE
22504: EQUAL
22505: IFTRUE 22509
22507: GO 22534
22509: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22510: LD_ADDR_VAR 0 3
22514: PUSH
22515: LD_INT 40
22517: PPUSH
22518: LD_VAR 0 1
22522: PPUSH
22523: CALL_OW 321
22527: PUSH
22528: LD_INT 2
22530: EQUAL
22531: ST_TO_ADDR
22532: GO 22568
22534: LD_INT 27
22536: DOUBLE
22537: EQUAL
22538: IFTRUE 22542
22540: GO 22567
22542: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22543: LD_ADDR_VAR 0 3
22547: PUSH
22548: LD_INT 35
22550: PPUSH
22551: LD_VAR 0 1
22555: PPUSH
22556: CALL_OW 321
22560: PUSH
22561: LD_INT 2
22563: EQUAL
22564: ST_TO_ADDR
22565: GO 22568
22567: POP
// end ;
22568: LD_VAR 0 3
22572: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22573: LD_INT 0
22575: PPUSH
22576: PPUSH
22577: PPUSH
22578: PPUSH
22579: PPUSH
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
// result := false ;
22586: LD_ADDR_VAR 0 6
22590: PUSH
22591: LD_INT 0
22593: ST_TO_ADDR
// if btype = b_depot then
22594: LD_VAR 0 2
22598: PUSH
22599: LD_INT 0
22601: EQUAL
22602: IFFALSE 22614
// begin result := true ;
22604: LD_ADDR_VAR 0 6
22608: PUSH
22609: LD_INT 1
22611: ST_TO_ADDR
// exit ;
22612: GO 23440
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22614: LD_VAR 0 1
22618: NOT
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 266
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: IN
22640: NOT
22641: OR
22642: PUSH
22643: LD_VAR 0 2
22647: NOT
22648: OR
22649: PUSH
22650: LD_VAR 0 5
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: LD_INT 4
22669: PUSH
22670: LD_INT 5
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: IN
22681: NOT
22682: OR
22683: PUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: LD_VAR 0 4
22693: PPUSH
22694: CALL_OW 488
22698: NOT
22699: OR
22700: IFFALSE 22704
// exit ;
22702: GO 23440
// side := GetSide ( depot ) ;
22704: LD_ADDR_VAR 0 9
22708: PUSH
22709: LD_VAR 0 1
22713: PPUSH
22714: CALL_OW 255
22718: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22719: LD_VAR 0 9
22723: PPUSH
22724: LD_VAR 0 2
22728: PPUSH
22729: CALL 22197 0 2
22733: NOT
22734: IFFALSE 22738
// exit ;
22736: GO 23440
// pom := GetBase ( depot ) ;
22738: LD_ADDR_VAR 0 10
22742: PUSH
22743: LD_VAR 0 1
22747: PPUSH
22748: CALL_OW 274
22752: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22753: LD_ADDR_VAR 0 11
22757: PUSH
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL_OW 248
22772: PPUSH
22773: CALL_OW 450
22777: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22778: LD_VAR 0 10
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: CALL_OW 275
22790: PUSH
22791: LD_VAR 0 11
22795: PUSH
22796: LD_INT 1
22798: ARRAY
22799: GREATEREQUAL
22800: PUSH
22801: LD_VAR 0 10
22805: PPUSH
22806: LD_INT 2
22808: PPUSH
22809: CALL_OW 275
22813: PUSH
22814: LD_VAR 0 11
22818: PUSH
22819: LD_INT 2
22821: ARRAY
22822: GREATEREQUAL
22823: AND
22824: PUSH
22825: LD_VAR 0 10
22829: PPUSH
22830: LD_INT 3
22832: PPUSH
22833: CALL_OW 275
22837: PUSH
22838: LD_VAR 0 11
22842: PUSH
22843: LD_INT 3
22845: ARRAY
22846: GREATEREQUAL
22847: AND
22848: NOT
22849: IFFALSE 22853
// exit ;
22851: GO 23440
// if GetBType ( depot ) = b_depot then
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 266
22862: PUSH
22863: LD_INT 0
22865: EQUAL
22866: IFFALSE 22878
// dist := 28 else
22868: LD_ADDR_VAR 0 14
22872: PUSH
22873: LD_INT 28
22875: ST_TO_ADDR
22876: GO 22886
// dist := 36 ;
22878: LD_ADDR_VAR 0 14
22882: PUSH
22883: LD_INT 36
22885: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22886: LD_VAR 0 1
22890: PPUSH
22891: LD_VAR 0 3
22895: PPUSH
22896: LD_VAR 0 4
22900: PPUSH
22901: CALL_OW 297
22905: PUSH
22906: LD_VAR 0 14
22910: GREATER
22911: IFFALSE 22915
// exit ;
22913: GO 23440
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22915: LD_ADDR_VAR 0 12
22919: PUSH
22920: LD_VAR 0 2
22924: PPUSH
22925: LD_VAR 0 3
22929: PPUSH
22930: LD_VAR 0 4
22934: PPUSH
22935: LD_VAR 0 5
22939: PPUSH
22940: LD_VAR 0 1
22944: PPUSH
22945: CALL_OW 248
22949: PPUSH
22950: LD_INT 0
22952: PPUSH
22953: CALL 23445 0 6
22957: ST_TO_ADDR
// if not hexes then
22958: LD_VAR 0 12
22962: NOT
22963: IFFALSE 22967
// exit ;
22965: GO 23440
// hex := GetHexInfo ( x , y ) ;
22967: LD_ADDR_VAR 0 15
22971: PUSH
22972: LD_VAR 0 3
22976: PPUSH
22977: LD_VAR 0 4
22981: PPUSH
22982: CALL_OW 546
22986: ST_TO_ADDR
// if hex [ 1 ] then
22987: LD_VAR 0 15
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: IFFALSE 22999
// exit ;
22997: GO 23440
// height := hex [ 2 ] ;
22999: LD_ADDR_VAR 0 13
23003: PUSH
23004: LD_VAR 0 15
23008: PUSH
23009: LD_INT 2
23011: ARRAY
23012: ST_TO_ADDR
// for i = 1 to hexes do
23013: LD_ADDR_VAR 0 7
23017: PUSH
23018: DOUBLE
23019: LD_INT 1
23021: DEC
23022: ST_TO_ADDR
23023: LD_VAR 0 12
23027: PUSH
23028: FOR_TO
23029: IFFALSE 23359
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23031: LD_VAR 0 12
23035: PUSH
23036: LD_VAR 0 7
23040: ARRAY
23041: PUSH
23042: LD_INT 1
23044: ARRAY
23045: PPUSH
23046: LD_VAR 0 12
23050: PUSH
23051: LD_VAR 0 7
23055: ARRAY
23056: PUSH
23057: LD_INT 2
23059: ARRAY
23060: PPUSH
23061: CALL_OW 488
23065: NOT
23066: PUSH
23067: LD_VAR 0 12
23071: PUSH
23072: LD_VAR 0 7
23076: ARRAY
23077: PUSH
23078: LD_INT 1
23080: ARRAY
23081: PPUSH
23082: LD_VAR 0 12
23086: PUSH
23087: LD_VAR 0 7
23091: ARRAY
23092: PUSH
23093: LD_INT 2
23095: ARRAY
23096: PPUSH
23097: CALL_OW 428
23101: PUSH
23102: LD_INT 0
23104: GREATER
23105: OR
23106: PUSH
23107: LD_VAR 0 12
23111: PUSH
23112: LD_VAR 0 7
23116: ARRAY
23117: PUSH
23118: LD_INT 1
23120: ARRAY
23121: PPUSH
23122: LD_VAR 0 12
23126: PUSH
23127: LD_VAR 0 7
23131: ARRAY
23132: PUSH
23133: LD_INT 2
23135: ARRAY
23136: PPUSH
23137: CALL_OW 351
23141: OR
23142: IFFALSE 23148
// exit ;
23144: POP
23145: POP
23146: GO 23440
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23148: LD_ADDR_VAR 0 8
23152: PUSH
23153: LD_VAR 0 12
23157: PUSH
23158: LD_VAR 0 7
23162: ARRAY
23163: PUSH
23164: LD_INT 1
23166: ARRAY
23167: PPUSH
23168: LD_VAR 0 12
23172: PUSH
23173: LD_VAR 0 7
23177: ARRAY
23178: PUSH
23179: LD_INT 2
23181: ARRAY
23182: PPUSH
23183: CALL_OW 546
23187: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23188: LD_VAR 0 8
23192: PUSH
23193: LD_INT 1
23195: ARRAY
23196: PUSH
23197: LD_VAR 0 8
23201: PUSH
23202: LD_INT 2
23204: ARRAY
23205: PUSH
23206: LD_VAR 0 13
23210: PUSH
23211: LD_INT 2
23213: PLUS
23214: GREATER
23215: OR
23216: PUSH
23217: LD_VAR 0 8
23221: PUSH
23222: LD_INT 2
23224: ARRAY
23225: PUSH
23226: LD_VAR 0 13
23230: PUSH
23231: LD_INT 2
23233: MINUS
23234: LESS
23235: OR
23236: PUSH
23237: LD_VAR 0 8
23241: PUSH
23242: LD_INT 3
23244: ARRAY
23245: PUSH
23246: LD_INT 0
23248: PUSH
23249: LD_INT 8
23251: PUSH
23252: LD_INT 9
23254: PUSH
23255: LD_INT 10
23257: PUSH
23258: LD_INT 11
23260: PUSH
23261: LD_INT 12
23263: PUSH
23264: LD_INT 13
23266: PUSH
23267: LD_INT 16
23269: PUSH
23270: LD_INT 17
23272: PUSH
23273: LD_INT 18
23275: PUSH
23276: LD_INT 19
23278: PUSH
23279: LD_INT 20
23281: PUSH
23282: LD_INT 21
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: IN
23300: NOT
23301: OR
23302: PUSH
23303: LD_VAR 0 8
23307: PUSH
23308: LD_INT 5
23310: ARRAY
23311: NOT
23312: OR
23313: PUSH
23314: LD_VAR 0 8
23318: PUSH
23319: LD_INT 6
23321: ARRAY
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: LD_INT 7
23331: PUSH
23332: LD_INT 9
23334: PUSH
23335: LD_INT 10
23337: PUSH
23338: LD_INT 11
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: IN
23349: NOT
23350: OR
23351: IFFALSE 23357
// exit ;
23353: POP
23354: POP
23355: GO 23440
// end ;
23357: GO 23028
23359: POP
23360: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23361: LD_VAR 0 9
23365: PPUSH
23366: LD_VAR 0 3
23370: PPUSH
23371: LD_VAR 0 4
23375: PPUSH
23376: LD_INT 20
23378: PPUSH
23379: CALL 15363 0 4
23383: PUSH
23384: LD_INT 4
23386: ARRAY
23387: IFFALSE 23391
// exit ;
23389: GO 23440
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23391: LD_VAR 0 2
23395: PUSH
23396: LD_INT 29
23398: PUSH
23399: LD_INT 30
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: IN
23406: PUSH
23407: LD_VAR 0 3
23411: PPUSH
23412: LD_VAR 0 4
23416: PPUSH
23417: LD_VAR 0 9
23421: PPUSH
23422: CALL_OW 440
23426: NOT
23427: AND
23428: IFFALSE 23432
// exit ;
23430: GO 23440
// result := true ;
23432: LD_ADDR_VAR 0 6
23436: PUSH
23437: LD_INT 1
23439: ST_TO_ADDR
// end ;
23440: LD_VAR 0 6
23444: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23445: LD_INT 0
23447: PPUSH
23448: PPUSH
23449: PPUSH
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
23503: PPUSH
23504: PPUSH
// result = [ ] ;
23505: LD_ADDR_VAR 0 7
23509: PUSH
23510: EMPTY
23511: ST_TO_ADDR
// temp_list = [ ] ;
23512: LD_ADDR_VAR 0 9
23516: PUSH
23517: EMPTY
23518: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23519: LD_VAR 0 4
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 3
23535: PUSH
23536: LD_INT 4
23538: PUSH
23539: LD_INT 5
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: IN
23550: NOT
23551: PUSH
23552: LD_VAR 0 1
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: IN
23567: PUSH
23568: LD_VAR 0 5
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: LD_INT 3
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: IN
23587: NOT
23588: AND
23589: OR
23590: IFFALSE 23594
// exit ;
23592: GO 41985
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23594: LD_VAR 0 1
23598: PUSH
23599: LD_INT 6
23601: PUSH
23602: LD_INT 7
23604: PUSH
23605: LD_INT 8
23607: PUSH
23608: LD_INT 13
23610: PUSH
23611: LD_INT 12
23613: PUSH
23614: LD_INT 15
23616: PUSH
23617: LD_INT 11
23619: PUSH
23620: LD_INT 14
23622: PUSH
23623: LD_INT 10
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: IN
23637: IFFALSE 23647
// btype = b_lab ;
23639: LD_ADDR_VAR 0 1
23643: PUSH
23644: LD_INT 6
23646: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23647: LD_VAR 0 6
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 2
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: IN
23666: NOT
23667: PUSH
23668: LD_VAR 0 1
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: LD_INT 3
23684: PUSH
23685: LD_INT 6
23687: PUSH
23688: LD_INT 36
23690: PUSH
23691: LD_INT 4
23693: PUSH
23694: LD_INT 5
23696: PUSH
23697: LD_INT 31
23699: PUSH
23700: LD_INT 32
23702: PUSH
23703: LD_INT 33
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: IN
23719: NOT
23720: PUSH
23721: LD_VAR 0 6
23725: PUSH
23726: LD_INT 1
23728: EQUAL
23729: AND
23730: OR
23731: PUSH
23732: LD_VAR 0 1
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 3
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: IN
23747: NOT
23748: PUSH
23749: LD_VAR 0 6
23753: PUSH
23754: LD_INT 2
23756: EQUAL
23757: AND
23758: OR
23759: IFFALSE 23769
// mode = 0 ;
23761: LD_ADDR_VAR 0 6
23765: PUSH
23766: LD_INT 0
23768: ST_TO_ADDR
// case mode of 0 :
23769: LD_VAR 0 6
23773: PUSH
23774: LD_INT 0
23776: DOUBLE
23777: EQUAL
23778: IFTRUE 23782
23780: GO 35235
23782: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23783: LD_ADDR_VAR 0 11
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: LD_INT 2
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: LD_INT 2
23879: NEG
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 1
23887: PUSH
23888: LD_INT 1
23890: NEG
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: LD_INT 2
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 3
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 3
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23976: LD_ADDR_VAR 0 12
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: LD_INT 1
24049: NEG
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: LD_INT 1
24060: NEG
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 2
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: NEG
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 2
24110: NEG
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 3
24133: NEG
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 3
24144: NEG
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24172: LD_ADDR_VAR 0 13
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: LD_INT 2
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: NEG
24308: PUSH
24309: LD_INT 2
24311: NEG
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: NEG
24320: PUSH
24321: LD_INT 3
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 3
24331: NEG
24332: PUSH
24333: LD_INT 2
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 3
24343: NEG
24344: PUSH
24345: LD_INT 3
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24371: LD_ADDR_VAR 0 14
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 1
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: LD_INT 1
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 2
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 1
24478: NEG
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: NEG
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: LD_INT 3
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: LD_INT 3
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24567: LD_ADDR_VAR 0 15
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: LD_INT 1
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 3
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 3
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24760: LD_ADDR_VAR 0 16
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: NEG
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: LD_INT 2
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 3
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 3
24917: PUSH
24918: LD_INT 3
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24953: LD_ADDR_VAR 0 17
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 2
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 2
25129: NEG
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 2
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25183: LD_ADDR_VAR 0 18
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: LD_INT 1
25203: NEG
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 1
25290: NEG
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 2
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 2
25359: NEG
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: NEG
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: LD_INT 2
25386: NEG
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25413: LD_ADDR_VAR 0 19
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: LD_INT 1
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 2
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 1
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: LD_INT 2
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: NEG
25613: PUSH
25614: LD_INT 2
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25643: LD_ADDR_VAR 0 20
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: LD_INT 1
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: LD_INT 2
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: LD_INT 1
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: LD_INT 2
25846: NEG
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25873: LD_ADDR_VAR 0 21
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 0
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 2
26060: NEG
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 2
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26103: LD_ADDR_VAR 0 22
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 2
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: LD_INT 2
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26333: LD_ADDR_VAR 0 23
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: NEG
26415: PUSH
26416: LD_INT 2
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: LD_INT 2
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 2
26520: NEG
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: LD_INT 3
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 3
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 2
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26613: LD_ADDR_VAR 0 24
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 2
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: LD_INT 2
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 2
26789: NEG
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: LD_INT 2
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 3
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26889: LD_ADDR_VAR 0 25
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: LD_INT 2
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 3
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 3
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: LD_INT 3
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 3
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27163: LD_ADDR_VAR 0 26
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: LD_INT 1
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 2
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: LD_INT 2
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 2
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: LD_INT 2
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: LD_INT 3
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 3
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27439: LD_ADDR_VAR 0 27
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: LD_INT 2
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 3
27672: NEG
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 3
27684: NEG
27685: PUSH
27686: LD_INT 2
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27719: LD_ADDR_VAR 0 28
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 2
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: NEG
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: NEG
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: NEG
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 2
27918: NEG
27919: PUSH
27920: LD_INT 2
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 2
27930: NEG
27931: PUSH
27932: LD_INT 3
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: LD_INT 3
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 3
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: NEG
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28001: LD_ADDR_VAR 0 29
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 2
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: LD_INT 2
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: NEG
28180: PUSH
28181: LD_INT 2
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: NEG
28192: PUSH
28193: LD_INT 3
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 3
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 3
28245: NEG
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28280: LD_ADDR_VAR 0 30
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 2
28457: NEG
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 3
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 2
28502: PUSH
28503: LD_INT 3
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: NEG
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 3
28523: NEG
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28558: LD_ADDR_VAR 0 31
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: LD_INT 2
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: LD_INT 1
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: LD_INT 3
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 2
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 3
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 3
28801: NEG
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28836: LD_ADDR_VAR 0 32
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 2
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: LD_INT 3
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 3
29079: NEG
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29114: LD_ADDR_VAR 0 33
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: LD_INT 2
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 2
29304: NEG
29305: PUSH
29306: LD_INT 3
29308: NEG
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 2
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 3
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: LD_INT 3
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 3
29358: NEG
29359: PUSH
29360: LD_INT 2
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29393: LD_ADDR_VAR 0 34
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: NEG
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 3
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 3
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: LD_INT 1
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 3
29638: NEG
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29673: LD_ADDR_VAR 0 35
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29785: LD_ADDR_VAR 0 36
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 0
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: LD_INT 2
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29897: LD_ADDR_VAR 0 37
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30009: LD_ADDR_VAR 0 38
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30121: LD_ADDR_VAR 0 39
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: LD_INT 2
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30233: LD_ADDR_VAR 0 40
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30345: LD_ADDR_VAR 0 41
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 1
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 2
30500: NEG
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 2
30523: NEG
30524: PUSH
30525: LD_INT 2
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 2
30535: NEG
30536: PUSH
30537: LD_INT 3
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 3
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: NEG
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 3
30642: NEG
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 3
30654: NEG
30655: PUSH
30656: LD_INT 3
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30695: LD_ADDR_VAR 0 42
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: LD_INT 1
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: LD_INT 2
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: LD_INT 2
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 2
30861: NEG
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: LD_INT 2
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 3
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 3
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 3
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: PUSH
30952: LD_INT 3
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 3
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31045: LD_ADDR_VAR 0 43
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 1
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 2
31211: NEG
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: LD_INT 3
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: LD_INT 3
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 3
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31393: LD_ADDR_VAR 0 44
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 2
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: LD_INT 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: NEG
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 3
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 3
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 3
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 3
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 3
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 3
31690: NEG
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 3
31702: NEG
31703: PUSH
31704: LD_INT 3
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31743: LD_ADDR_VAR 0 45
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 2
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 2
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: LD_INT 3
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: LD_INT 3
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 3
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 3
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 3
32040: NEG
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32093: LD_ADDR_VAR 0 46
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: LD_INT 2
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 2
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: NEG
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: LD_INT 1
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 3
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 0
32294: PUSH
32295: LD_INT 3
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 3
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 3
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 3
32389: NEG
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: NEG
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32441: LD_ADDR_VAR 0 47
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: LD_INT 2
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 2
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32592: LD_ADDR_VAR 0 48
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: LD_INT 2
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32739: LD_ADDR_VAR 0 49
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: LD_INT 0
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32883: LD_ADDR_VAR 0 50
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33027: LD_ADDR_VAR 0 51
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 2
33139: NEG
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 2
33150: NEG
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33174: LD_ADDR_VAR 0 52
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: LD_INT 2
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 2
33278: NEG
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: NEG
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33325: LD_ADDR_VAR 0 53
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33555: LD_ADDR_VAR 0 54
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: LD_INT 2
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: NEG
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 2
33754: NEG
33755: PUSH
33756: LD_INT 2
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33785: LD_ADDR_VAR 0 55
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: LD_INT 1
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: LD_INT 2
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34015: LD_ADDR_VAR 0 56
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: NEG
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: NEG
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34245: LD_ADDR_VAR 0 57
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 2
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 1
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34475: LD_ADDR_VAR 0 58
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 2
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34705: LD_ADDR_VAR 0 59
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34793: LD_ADDR_VAR 0 60
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 1
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34881: LD_ADDR_VAR 0 61
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34969: LD_ADDR_VAR 0 62
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35057: LD_ADDR_VAR 0 63
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35145: LD_ADDR_VAR 0 64
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: ST_TO_ADDR
// end ; 1 :
35233: GO 41130
35235: LD_INT 1
35237: DOUBLE
35238: EQUAL
35239: IFTRUE 35243
35241: GO 37866
35243: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35244: LD_ADDR_VAR 0 11
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 3
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35288: LD_ADDR_VAR 0 12
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 3
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: LIST
35328: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35329: LD_ADDR_VAR 0 13
35333: PUSH
35334: LD_INT 3
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 3
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35369: LD_ADDR_VAR 0 14
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 3
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 3
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 2
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35410: LD_ADDR_VAR 0 15
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 3
35428: NEG
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 3
35439: NEG
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35454: LD_ADDR_VAR 0 16
35458: PUSH
35459: LD_INT 2
35461: NEG
35462: PUSH
35463: LD_INT 3
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 3
35473: NEG
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 3
35485: NEG
35486: PUSH
35487: LD_INT 3
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35500: LD_ADDR_VAR 0 17
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 3
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 3
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35544: LD_ADDR_VAR 0 18
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 3
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35585: LD_ADDR_VAR 0 19
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 3
35602: PUSH
35603: LD_INT 3
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: LD_INT 3
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35625: LD_ADDR_VAR 0 20
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 3
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 3
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 2
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35666: LD_ADDR_VAR 0 21
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 3
35684: NEG
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: NEG
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35710: LD_ADDR_VAR 0 22
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: LD_INT 3
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 3
35729: NEG
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 3
35741: NEG
35742: PUSH
35743: LD_INT 3
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35756: LD_ADDR_VAR 0 23
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 3
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 4
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35800: LD_ADDR_VAR 0 24
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 3
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 4
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35841: LD_ADDR_VAR 0 25
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 4
35858: PUSH
35859: LD_INT 3
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: LD_INT 4
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35881: LD_ADDR_VAR 0 26
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 3
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 4
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35922: LD_ADDR_VAR 0 27
35926: PUSH
35927: LD_INT 3
35929: NEG
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 3
35940: NEG
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 4
35951: NEG
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35966: LD_ADDR_VAR 0 28
35970: PUSH
35971: LD_INT 3
35973: NEG
35974: PUSH
35975: LD_INT 3
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 3
35985: NEG
35986: PUSH
35987: LD_INT 4
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 4
35997: NEG
35998: PUSH
35999: LD_INT 3
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36012: LD_ADDR_VAR 0 29
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 3
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 3
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 4
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 4
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: LD_INT 3
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: LD_INT 5
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 5
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 4
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: LD_INT 6
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 6
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 5
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36167: LD_ADDR_VAR 0 30
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 3
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 3
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 4
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 4
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 4
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 5
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 5
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 5
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 6
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 6
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36310: LD_ADDR_VAR 0 31
36314: PUSH
36315: LD_INT 3
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 3
36327: PUSH
36328: LD_INT 3
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 3
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 4
36347: PUSH
36348: LD_INT 3
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 4
36357: PUSH
36358: LD_INT 4
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 3
36367: PUSH
36368: LD_INT 4
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 5
36377: PUSH
36378: LD_INT 4
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 5
36387: PUSH
36388: LD_INT 5
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 4
36397: PUSH
36398: LD_INT 5
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 6
36407: PUSH
36408: LD_INT 5
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 6
36417: PUSH
36418: LD_INT 6
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 5
36427: PUSH
36428: LD_INT 6
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36449: LD_ADDR_VAR 0 32
36453: PUSH
36454: LD_INT 1
36456: PUSH
36457: LD_INT 3
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 3
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 4
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 4
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 5
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 5
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: LD_INT 4
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: LD_INT 6
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 6
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: LD_INT 5
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36592: LD_ADDR_VAR 0 33
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 3
36610: NEG
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 3
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 3
36633: NEG
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 4
36644: NEG
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 4
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 4
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 5
36678: NEG
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 5
36689: NEG
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 5
36701: NEG
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 6
36712: NEG
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 6
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36747: LD_ADDR_VAR 0 34
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: LD_INT 3
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 3
36766: NEG
36767: PUSH
36768: LD_INT 2
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 3
36778: NEG
36779: PUSH
36780: LD_INT 3
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 3
36790: NEG
36791: PUSH
36792: LD_INT 4
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 4
36802: NEG
36803: PUSH
36804: LD_INT 3
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 4
36814: NEG
36815: PUSH
36816: LD_INT 4
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 4
36826: NEG
36827: PUSH
36828: LD_INT 5
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 5
36838: NEG
36839: PUSH
36840: LD_INT 4
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 5
36850: NEG
36851: PUSH
36852: LD_INT 5
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 5
36862: NEG
36863: PUSH
36864: LD_INT 6
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 6
36874: NEG
36875: PUSH
36876: LD_INT 5
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 6
36886: NEG
36887: PUSH
36888: LD_INT 6
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36910: LD_ADDR_VAR 0 41
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 3
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36954: LD_ADDR_VAR 0 42
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36995: LD_ADDR_VAR 0 43
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 3
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37035: LD_ADDR_VAR 0 44
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 3
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37076: LD_ADDR_VAR 0 45
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 3
37105: NEG
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37120: LD_ADDR_VAR 0 46
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 3
37151: NEG
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37166: LD_ADDR_VAR 0 47
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37199: LD_ADDR_VAR 0 48
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37230: LD_ADDR_VAR 0 49
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37259: LD_ADDR_VAR 0 50
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 3
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37288: LD_ADDR_VAR 0 51
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37319: LD_ADDR_VAR 0 52
37323: PUSH
37324: LD_INT 3
37326: NEG
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 3
37338: NEG
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37352: LD_ADDR_VAR 0 53
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 3
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 3
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37396: LD_ADDR_VAR 0 54
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 3
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 3
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37437: LD_ADDR_VAR 0 55
37441: PUSH
37442: LD_INT 3
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37477: LD_ADDR_VAR 0 56
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37518: LD_ADDR_VAR 0 57
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 3
37536: NEG
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 3
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37562: LD_ADDR_VAR 0 58
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 3
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 3
37581: NEG
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 3
37593: NEG
37594: PUSH
37595: LD_INT 3
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: LIST
37607: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37608: LD_ADDR_VAR 0 59
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 2
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: LD_INT 2
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37652: LD_ADDR_VAR 0 60
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37693: LD_ADDR_VAR 0 61
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37733: LD_ADDR_VAR 0 62
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37774: LD_ADDR_VAR 0 63
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37818: LD_ADDR_VAR 0 64
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: ST_TO_ADDR
// end ; 2 :
37864: GO 41130
37866: LD_INT 2
37868: DOUBLE
37869: EQUAL
37870: IFTRUE 37874
37872: GO 41129
37874: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37875: LD_ADDR_VAR 0 29
37879: PUSH
37880: LD_INT 4
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 4
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 5
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 5
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 4
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 3
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 3
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 5
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 4
37995: PUSH
37996: LD_INT 3
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 4
38005: PUSH
38006: LD_INT 4
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: LD_INT 4
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 4
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: LD_INT 4
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 4
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 3
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 4
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 5
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 5
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 4
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: LD_INT 5
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 3
38158: NEG
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 3
38169: NEG
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: NEG
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 3
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 4
38214: NEG
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 4
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 4
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 4
38260: NEG
38261: PUSH
38262: LD_INT 4
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 4
38272: NEG
38273: PUSH
38274: LD_INT 5
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: LD_INT 4
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 4
38308: NEG
38309: PUSH
38310: LD_INT 3
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 5
38320: NEG
38321: PUSH
38322: LD_INT 4
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 5
38332: NEG
38333: PUSH
38334: LD_INT 5
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: NEG
38345: PUSH
38346: LD_INT 5
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 5
38356: NEG
38357: PUSH
38358: LD_INT 3
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38413: LD_ADDR_VAR 0 30
38417: PUSH
38418: LD_INT 4
38420: PUSH
38421: LD_INT 4
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 4
38430: PUSH
38431: LD_INT 3
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 5
38440: PUSH
38441: LD_INT 4
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 5
38450: PUSH
38451: LD_INT 5
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 4
38460: PUSH
38461: LD_INT 5
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: LD_INT 4
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 3
38480: PUSH
38481: LD_INT 3
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 5
38490: PUSH
38491: LD_INT 3
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: PUSH
38501: LD_INT 5
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 3
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 3
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 4
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 4
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 3
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: LD_INT 4
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 4
38603: NEG
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 4
38614: NEG
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 3
38626: NEG
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 4
38648: NEG
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 5
38659: NEG
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 5
38670: NEG
38671: PUSH
38672: LD_INT 1
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 5
38682: NEG
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 3
38694: NEG
38695: PUSH
38696: LD_INT 2
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 3
38705: NEG
38706: PUSH
38707: LD_INT 3
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 3
38717: NEG
38718: PUSH
38719: LD_INT 4
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: LD_INT 3
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 3
38753: NEG
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 4
38765: NEG
38766: PUSH
38767: LD_INT 3
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 4
38777: NEG
38778: PUSH
38779: LD_INT 4
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: LD_INT 4
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 4
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 4
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 5
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: LD_INT 4
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 3
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 3
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: LD_INT 4
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: LD_INT 5
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 3
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: LD_INT 5
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38960: LD_ADDR_VAR 0 31
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 4
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 4
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 5
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 5
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: LD_INT 4
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: LD_INT 3
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: NEG
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 3
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 4
39116: NEG
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 4
39127: NEG
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 4
39139: NEG
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 4
39162: NEG
39163: PUSH
39164: LD_INT 4
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 4
39174: NEG
39175: PUSH
39176: LD_INT 5
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: LD_INT 4
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: NEG
39199: PUSH
39200: LD_INT 3
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 4
39210: NEG
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 5
39222: NEG
39223: PUSH
39224: LD_INT 4
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 5
39234: NEG
39235: PUSH
39236: LD_INT 5
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 3
39246: NEG
39247: PUSH
39248: LD_INT 5
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 5
39258: NEG
39259: PUSH
39260: LD_INT 3
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 3
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 4
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 3
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 3
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: LD_INT 4
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: LD_INT 4
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 4
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 4
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 5
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 5
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 4
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 3
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 5
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39510: LD_ADDR_VAR 0 32
39514: PUSH
39515: LD_INT 4
39517: NEG
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 4
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 3
39540: NEG
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 3
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 4
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 5
39573: NEG
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 5
39584: NEG
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 5
39596: NEG
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: LD_INT 3
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 3
39631: NEG
39632: PUSH
39633: LD_INT 4
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 4
39679: NEG
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 4
39691: NEG
39692: PUSH
39693: LD_INT 4
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: LD_INT 4
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 4
39715: NEG
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 4
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 5
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 4
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 3
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: LD_INT 4
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 5
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: LD_INT 3
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 5
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 3
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 4
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 4
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 4
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 4
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 4
39932: PUSH
39933: LD_INT 3
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 5
39942: PUSH
39943: LD_INT 4
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 5
39952: PUSH
39953: LD_INT 5
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 4
39962: PUSH
39963: LD_INT 5
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: LD_INT 4
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 5
39992: PUSH
39993: LD_INT 3
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: LD_INT 5
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40057: LD_ADDR_VAR 0 33
40061: PUSH
40062: LD_INT 4
40064: NEG
40065: PUSH
40066: LD_INT 4
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 4
40076: NEG
40077: PUSH
40078: LD_INT 5
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: LD_INT 4
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 4
40112: NEG
40113: PUSH
40114: LD_INT 3
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 5
40124: NEG
40125: PUSH
40126: LD_INT 4
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 5
40136: NEG
40137: PUSH
40138: LD_INT 5
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: LD_INT 5
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 5
40160: NEG
40161: PUSH
40162: LD_INT 3
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 3
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 4
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 3
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 3
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 4
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: LD_INT 4
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 4
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 4
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 5
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 5
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 4
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 3
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 5
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: PUSH
40368: LD_INT 3
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 3
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 4
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 4
40397: PUSH
40398: LD_INT 4
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 3
40407: PUSH
40408: LD_INT 4
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 3
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 4
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 4
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 4
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 4
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 5
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 5
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: LD_INT 4
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 5
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40595: LD_ADDR_VAR 0 34
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 4
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 5
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 4
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 3
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 3
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 4
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: LD_INT 5
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 3
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: LD_INT 5
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 3
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 4
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 4
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 3
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 4
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 4
40797: PUSH
40798: LD_INT 4
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 4
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 5
40817: PUSH
40818: LD_INT 4
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 5
40827: PUSH
40828: LD_INT 5
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 4
40837: PUSH
40838: LD_INT 5
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 3
40847: PUSH
40848: LD_INT 4
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 3
40857: PUSH
40858: LD_INT 3
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 5
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: LD_INT 5
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 3
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 4
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 4
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 4
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 4
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 4
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 3
41003: NEG
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: NEG
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 4
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 5
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 5
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 5
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 3
41071: NEG
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
// end ; end ;
41127: GO 41130
41129: POP
// case btype of b_depot , b_warehouse :
41130: LD_VAR 0 1
41134: PUSH
41135: LD_INT 0
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41149
41141: LD_INT 1
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41350
41149: POP
// case nation of nation_american :
41150: LD_VAR 0 5
41154: PUSH
41155: LD_INT 1
41157: DOUBLE
41158: EQUAL
41159: IFTRUE 41163
41161: GO 41219
41163: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41164: LD_ADDR_VAR 0 9
41168: PUSH
41169: LD_VAR 0 11
41173: PUSH
41174: LD_VAR 0 12
41178: PUSH
41179: LD_VAR 0 13
41183: PUSH
41184: LD_VAR 0 14
41188: PUSH
41189: LD_VAR 0 15
41193: PUSH
41194: LD_VAR 0 16
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: PUSH
41207: LD_VAR 0 4
41211: PUSH
41212: LD_INT 1
41214: PLUS
41215: ARRAY
41216: ST_TO_ADDR
41217: GO 41348
41219: LD_INT 2
41221: DOUBLE
41222: EQUAL
41223: IFTRUE 41227
41225: GO 41283
41227: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41228: LD_ADDR_VAR 0 9
41232: PUSH
41233: LD_VAR 0 17
41237: PUSH
41238: LD_VAR 0 18
41242: PUSH
41243: LD_VAR 0 19
41247: PUSH
41248: LD_VAR 0 20
41252: PUSH
41253: LD_VAR 0 21
41257: PUSH
41258: LD_VAR 0 22
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: PUSH
41271: LD_VAR 0 4
41275: PUSH
41276: LD_INT 1
41278: PLUS
41279: ARRAY
41280: ST_TO_ADDR
41281: GO 41348
41283: LD_INT 3
41285: DOUBLE
41286: EQUAL
41287: IFTRUE 41291
41289: GO 41347
41291: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41292: LD_ADDR_VAR 0 9
41296: PUSH
41297: LD_VAR 0 23
41301: PUSH
41302: LD_VAR 0 24
41306: PUSH
41307: LD_VAR 0 25
41311: PUSH
41312: LD_VAR 0 26
41316: PUSH
41317: LD_VAR 0 27
41321: PUSH
41322: LD_VAR 0 28
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: PUSH
41335: LD_VAR 0 4
41339: PUSH
41340: LD_INT 1
41342: PLUS
41343: ARRAY
41344: ST_TO_ADDR
41345: GO 41348
41347: POP
41348: GO 41903
41350: LD_INT 2
41352: DOUBLE
41353: EQUAL
41354: IFTRUE 41364
41356: LD_INT 3
41358: DOUBLE
41359: EQUAL
41360: IFTRUE 41364
41362: GO 41420
41364: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41365: LD_ADDR_VAR 0 9
41369: PUSH
41370: LD_VAR 0 29
41374: PUSH
41375: LD_VAR 0 30
41379: PUSH
41380: LD_VAR 0 31
41384: PUSH
41385: LD_VAR 0 32
41389: PUSH
41390: LD_VAR 0 33
41394: PUSH
41395: LD_VAR 0 34
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: PUSH
41408: LD_VAR 0 4
41412: PUSH
41413: LD_INT 1
41415: PLUS
41416: ARRAY
41417: ST_TO_ADDR
41418: GO 41903
41420: LD_INT 16
41422: DOUBLE
41423: EQUAL
41424: IFTRUE 41482
41426: LD_INT 17
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41482
41432: LD_INT 18
41434: DOUBLE
41435: EQUAL
41436: IFTRUE 41482
41438: LD_INT 19
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41482
41444: LD_INT 22
41446: DOUBLE
41447: EQUAL
41448: IFTRUE 41482
41450: LD_INT 20
41452: DOUBLE
41453: EQUAL
41454: IFTRUE 41482
41456: LD_INT 21
41458: DOUBLE
41459: EQUAL
41460: IFTRUE 41482
41462: LD_INT 23
41464: DOUBLE
41465: EQUAL
41466: IFTRUE 41482
41468: LD_INT 24
41470: DOUBLE
41471: EQUAL
41472: IFTRUE 41482
41474: LD_INT 25
41476: DOUBLE
41477: EQUAL
41478: IFTRUE 41482
41480: GO 41538
41482: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41483: LD_ADDR_VAR 0 9
41487: PUSH
41488: LD_VAR 0 35
41492: PUSH
41493: LD_VAR 0 36
41497: PUSH
41498: LD_VAR 0 37
41502: PUSH
41503: LD_VAR 0 38
41507: PUSH
41508: LD_VAR 0 39
41512: PUSH
41513: LD_VAR 0 40
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: PUSH
41526: LD_VAR 0 4
41530: PUSH
41531: LD_INT 1
41533: PLUS
41534: ARRAY
41535: ST_TO_ADDR
41536: GO 41903
41538: LD_INT 6
41540: DOUBLE
41541: EQUAL
41542: IFTRUE 41594
41544: LD_INT 7
41546: DOUBLE
41547: EQUAL
41548: IFTRUE 41594
41550: LD_INT 8
41552: DOUBLE
41553: EQUAL
41554: IFTRUE 41594
41556: LD_INT 13
41558: DOUBLE
41559: EQUAL
41560: IFTRUE 41594
41562: LD_INT 12
41564: DOUBLE
41565: EQUAL
41566: IFTRUE 41594
41568: LD_INT 15
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41594
41574: LD_INT 11
41576: DOUBLE
41577: EQUAL
41578: IFTRUE 41594
41580: LD_INT 14
41582: DOUBLE
41583: EQUAL
41584: IFTRUE 41594
41586: LD_INT 10
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41650
41594: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41595: LD_ADDR_VAR 0 9
41599: PUSH
41600: LD_VAR 0 41
41604: PUSH
41605: LD_VAR 0 42
41609: PUSH
41610: LD_VAR 0 43
41614: PUSH
41615: LD_VAR 0 44
41619: PUSH
41620: LD_VAR 0 45
41624: PUSH
41625: LD_VAR 0 46
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: PUSH
41638: LD_VAR 0 4
41642: PUSH
41643: LD_INT 1
41645: PLUS
41646: ARRAY
41647: ST_TO_ADDR
41648: GO 41903
41650: LD_INT 36
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41658
41656: GO 41714
41658: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41659: LD_ADDR_VAR 0 9
41663: PUSH
41664: LD_VAR 0 47
41668: PUSH
41669: LD_VAR 0 48
41673: PUSH
41674: LD_VAR 0 49
41678: PUSH
41679: LD_VAR 0 50
41683: PUSH
41684: LD_VAR 0 51
41688: PUSH
41689: LD_VAR 0 52
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: PUSH
41702: LD_VAR 0 4
41706: PUSH
41707: LD_INT 1
41709: PLUS
41710: ARRAY
41711: ST_TO_ADDR
41712: GO 41903
41714: LD_INT 4
41716: DOUBLE
41717: EQUAL
41718: IFTRUE 41740
41720: LD_INT 5
41722: DOUBLE
41723: EQUAL
41724: IFTRUE 41740
41726: LD_INT 34
41728: DOUBLE
41729: EQUAL
41730: IFTRUE 41740
41732: LD_INT 37
41734: DOUBLE
41735: EQUAL
41736: IFTRUE 41740
41738: GO 41796
41740: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41741: LD_ADDR_VAR 0 9
41745: PUSH
41746: LD_VAR 0 53
41750: PUSH
41751: LD_VAR 0 54
41755: PUSH
41756: LD_VAR 0 55
41760: PUSH
41761: LD_VAR 0 56
41765: PUSH
41766: LD_VAR 0 57
41770: PUSH
41771: LD_VAR 0 58
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: PUSH
41784: LD_VAR 0 4
41788: PUSH
41789: LD_INT 1
41791: PLUS
41792: ARRAY
41793: ST_TO_ADDR
41794: GO 41903
41796: LD_INT 31
41798: DOUBLE
41799: EQUAL
41800: IFTRUE 41846
41802: LD_INT 32
41804: DOUBLE
41805: EQUAL
41806: IFTRUE 41846
41808: LD_INT 33
41810: DOUBLE
41811: EQUAL
41812: IFTRUE 41846
41814: LD_INT 27
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41846
41820: LD_INT 26
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41846
41826: LD_INT 28
41828: DOUBLE
41829: EQUAL
41830: IFTRUE 41846
41832: LD_INT 29
41834: DOUBLE
41835: EQUAL
41836: IFTRUE 41846
41838: LD_INT 30
41840: DOUBLE
41841: EQUAL
41842: IFTRUE 41846
41844: GO 41902
41846: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41847: LD_ADDR_VAR 0 9
41851: PUSH
41852: LD_VAR 0 59
41856: PUSH
41857: LD_VAR 0 60
41861: PUSH
41862: LD_VAR 0 61
41866: PUSH
41867: LD_VAR 0 62
41871: PUSH
41872: LD_VAR 0 63
41876: PUSH
41877: LD_VAR 0 64
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: PUSH
41890: LD_VAR 0 4
41894: PUSH
41895: LD_INT 1
41897: PLUS
41898: ARRAY
41899: ST_TO_ADDR
41900: GO 41903
41902: POP
// temp_list2 = [ ] ;
41903: LD_ADDR_VAR 0 10
41907: PUSH
41908: EMPTY
41909: ST_TO_ADDR
// for i in temp_list do
41910: LD_ADDR_VAR 0 8
41914: PUSH
41915: LD_VAR 0 9
41919: PUSH
41920: FOR_IN
41921: IFFALSE 41973
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41923: LD_ADDR_VAR 0 10
41927: PUSH
41928: LD_VAR 0 10
41932: PUSH
41933: LD_VAR 0 8
41937: PUSH
41938: LD_INT 1
41940: ARRAY
41941: PUSH
41942: LD_VAR 0 2
41946: PLUS
41947: PUSH
41948: LD_VAR 0 8
41952: PUSH
41953: LD_INT 2
41955: ARRAY
41956: PUSH
41957: LD_VAR 0 3
41961: PLUS
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: ADD
41970: ST_TO_ADDR
41971: GO 41920
41973: POP
41974: POP
// result = temp_list2 ;
41975: LD_ADDR_VAR 0 7
41979: PUSH
41980: LD_VAR 0 10
41984: ST_TO_ADDR
// end ;
41985: LD_VAR 0 7
41989: RET
// export function EnemyInRange ( unit , dist ) ; begin
41990: LD_INT 0
41992: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41993: LD_ADDR_VAR 0 3
41997: PUSH
41998: LD_VAR 0 1
42002: PPUSH
42003: CALL_OW 255
42007: PPUSH
42008: LD_VAR 0 1
42012: PPUSH
42013: CALL_OW 250
42017: PPUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: CALL_OW 251
42027: PPUSH
42028: LD_VAR 0 2
42032: PPUSH
42033: CALL 15363 0 4
42037: PUSH
42038: LD_INT 4
42040: ARRAY
42041: ST_TO_ADDR
// end ;
42042: LD_VAR 0 3
42046: RET
// export function PlayerSeeMe ( unit ) ; begin
42047: LD_INT 0
42049: PPUSH
// result := See ( your_side , unit ) ;
42050: LD_ADDR_VAR 0 2
42054: PUSH
42055: LD_OWVAR 2
42059: PPUSH
42060: LD_VAR 0 1
42064: PPUSH
42065: CALL_OW 292
42069: ST_TO_ADDR
// end ;
42070: LD_VAR 0 2
42074: RET
// export function ReverseDir ( unit ) ; begin
42075: LD_INT 0
42077: PPUSH
// if not unit then
42078: LD_VAR 0 1
42082: NOT
42083: IFFALSE 42087
// exit ;
42085: GO 42110
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42087: LD_ADDR_VAR 0 2
42091: PUSH
42092: LD_VAR 0 1
42096: PPUSH
42097: CALL_OW 254
42101: PUSH
42102: LD_INT 3
42104: PLUS
42105: PUSH
42106: LD_INT 6
42108: MOD
42109: ST_TO_ADDR
// end ;
42110: LD_VAR 0 2
42114: RET
// export function ReverseArray ( array ) ; var i ; begin
42115: LD_INT 0
42117: PPUSH
42118: PPUSH
// if not array then
42119: LD_VAR 0 1
42123: NOT
42124: IFFALSE 42128
// exit ;
42126: GO 42183
// result := [ ] ;
42128: LD_ADDR_VAR 0 2
42132: PUSH
42133: EMPTY
42134: ST_TO_ADDR
// for i := array downto 1 do
42135: LD_ADDR_VAR 0 3
42139: PUSH
42140: DOUBLE
42141: LD_VAR 0 1
42145: INC
42146: ST_TO_ADDR
42147: LD_INT 1
42149: PUSH
42150: FOR_DOWNTO
42151: IFFALSE 42181
// result := Join ( result , array [ i ] ) ;
42153: LD_ADDR_VAR 0 2
42157: PUSH
42158: LD_VAR 0 2
42162: PPUSH
42163: LD_VAR 0 1
42167: PUSH
42168: LD_VAR 0 3
42172: ARRAY
42173: PPUSH
42174: CALL 46848 0 2
42178: ST_TO_ADDR
42179: GO 42150
42181: POP
42182: POP
// end ;
42183: LD_VAR 0 2
42187: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42188: LD_INT 0
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
// if not unit or not hexes then
42196: LD_VAR 0 1
42200: NOT
42201: PUSH
42202: LD_VAR 0 2
42206: NOT
42207: OR
42208: IFFALSE 42212
// exit ;
42210: GO 42335
// dist := 9999 ;
42212: LD_ADDR_VAR 0 5
42216: PUSH
42217: LD_INT 9999
42219: ST_TO_ADDR
// for i = 1 to hexes do
42220: LD_ADDR_VAR 0 4
42224: PUSH
42225: DOUBLE
42226: LD_INT 1
42228: DEC
42229: ST_TO_ADDR
42230: LD_VAR 0 2
42234: PUSH
42235: FOR_TO
42236: IFFALSE 42323
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42238: LD_ADDR_VAR 0 6
42242: PUSH
42243: LD_VAR 0 1
42247: PPUSH
42248: LD_VAR 0 2
42252: PUSH
42253: LD_VAR 0 4
42257: ARRAY
42258: PUSH
42259: LD_INT 1
42261: ARRAY
42262: PPUSH
42263: LD_VAR 0 2
42267: PUSH
42268: LD_VAR 0 4
42272: ARRAY
42273: PUSH
42274: LD_INT 2
42276: ARRAY
42277: PPUSH
42278: CALL_OW 297
42282: ST_TO_ADDR
// if tdist < dist then
42283: LD_VAR 0 6
42287: PUSH
42288: LD_VAR 0 5
42292: LESS
42293: IFFALSE 42321
// begin hex := hexes [ i ] ;
42295: LD_ADDR_VAR 0 8
42299: PUSH
42300: LD_VAR 0 2
42304: PUSH
42305: LD_VAR 0 4
42309: ARRAY
42310: ST_TO_ADDR
// dist := tdist ;
42311: LD_ADDR_VAR 0 5
42315: PUSH
42316: LD_VAR 0 6
42320: ST_TO_ADDR
// end ; end ;
42321: GO 42235
42323: POP
42324: POP
// result := hex ;
42325: LD_ADDR_VAR 0 3
42329: PUSH
42330: LD_VAR 0 8
42334: ST_TO_ADDR
// end ;
42335: LD_VAR 0 3
42339: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42340: LD_INT 0
42342: PPUSH
42343: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42344: LD_VAR 0 1
42348: NOT
42349: PUSH
42350: LD_VAR 0 1
42354: PUSH
42355: LD_INT 21
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 23
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PPUSH
42379: CALL_OW 69
42383: IN
42384: NOT
42385: OR
42386: IFFALSE 42390
// exit ;
42388: GO 42437
// for i = 1 to 3 do
42390: LD_ADDR_VAR 0 3
42394: PUSH
42395: DOUBLE
42396: LD_INT 1
42398: DEC
42399: ST_TO_ADDR
42400: LD_INT 3
42402: PUSH
42403: FOR_TO
42404: IFFALSE 42435
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 250
42415: PPUSH
42416: LD_VAR 0 1
42420: PPUSH
42421: CALL_OW 251
42425: PPUSH
42426: LD_INT 1
42428: PPUSH
42429: CALL_OW 453
42433: GO 42403
42435: POP
42436: POP
// end ;
42437: LD_VAR 0 2
42441: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42442: LD_INT 0
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
// if not unit or not enemy_unit then
42450: LD_VAR 0 1
42454: NOT
42455: PUSH
42456: LD_VAR 0 2
42460: NOT
42461: OR
42462: IFFALSE 42466
// exit ;
42464: GO 42933
// if GetLives ( i ) < 250 then
42466: LD_VAR 0 4
42470: PPUSH
42471: CALL_OW 256
42475: PUSH
42476: LD_INT 250
42478: LESS
42479: IFFALSE 42492
// begin ComAutodestruct ( i ) ;
42481: LD_VAR 0 4
42485: PPUSH
42486: CALL 42340 0 1
// exit ;
42490: GO 42933
// end ; x := GetX ( enemy_unit ) ;
42492: LD_ADDR_VAR 0 7
42496: PUSH
42497: LD_VAR 0 2
42501: PPUSH
42502: CALL_OW 250
42506: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42507: LD_ADDR_VAR 0 8
42511: PUSH
42512: LD_VAR 0 2
42516: PPUSH
42517: CALL_OW 251
42521: ST_TO_ADDR
// if not x or not y then
42522: LD_VAR 0 7
42526: NOT
42527: PUSH
42528: LD_VAR 0 8
42532: NOT
42533: OR
42534: IFFALSE 42538
// exit ;
42536: GO 42933
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42538: LD_ADDR_VAR 0 6
42542: PUSH
42543: LD_VAR 0 7
42547: PPUSH
42548: LD_INT 0
42550: PPUSH
42551: LD_INT 4
42553: PPUSH
42554: CALL_OW 272
42558: PUSH
42559: LD_VAR 0 8
42563: PPUSH
42564: LD_INT 0
42566: PPUSH
42567: LD_INT 4
42569: PPUSH
42570: CALL_OW 273
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_VAR 0 7
42583: PPUSH
42584: LD_INT 1
42586: PPUSH
42587: LD_INT 4
42589: PPUSH
42590: CALL_OW 272
42594: PUSH
42595: LD_VAR 0 8
42599: PPUSH
42600: LD_INT 1
42602: PPUSH
42603: LD_INT 4
42605: PPUSH
42606: CALL_OW 273
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_VAR 0 7
42619: PPUSH
42620: LD_INT 2
42622: PPUSH
42623: LD_INT 4
42625: PPUSH
42626: CALL_OW 272
42630: PUSH
42631: LD_VAR 0 8
42635: PPUSH
42636: LD_INT 2
42638: PPUSH
42639: LD_INT 4
42641: PPUSH
42642: CALL_OW 273
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_VAR 0 7
42655: PPUSH
42656: LD_INT 3
42658: PPUSH
42659: LD_INT 4
42661: PPUSH
42662: CALL_OW 272
42666: PUSH
42667: LD_VAR 0 8
42671: PPUSH
42672: LD_INT 3
42674: PPUSH
42675: LD_INT 4
42677: PPUSH
42678: CALL_OW 273
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_VAR 0 7
42691: PPUSH
42692: LD_INT 4
42694: PPUSH
42695: LD_INT 4
42697: PPUSH
42698: CALL_OW 272
42702: PUSH
42703: LD_VAR 0 8
42707: PPUSH
42708: LD_INT 4
42710: PPUSH
42711: LD_INT 4
42713: PPUSH
42714: CALL_OW 273
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_VAR 0 7
42727: PPUSH
42728: LD_INT 5
42730: PPUSH
42731: LD_INT 4
42733: PPUSH
42734: CALL_OW 272
42738: PUSH
42739: LD_VAR 0 8
42743: PPUSH
42744: LD_INT 5
42746: PPUSH
42747: LD_INT 4
42749: PPUSH
42750: CALL_OW 273
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
// for i = tmp downto 1 do
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: DOUBLE
42773: LD_VAR 0 6
42777: INC
42778: ST_TO_ADDR
42779: LD_INT 1
42781: PUSH
42782: FOR_DOWNTO
42783: IFFALSE 42884
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42785: LD_VAR 0 6
42789: PUSH
42790: LD_VAR 0 4
42794: ARRAY
42795: PUSH
42796: LD_INT 1
42798: ARRAY
42799: PPUSH
42800: LD_VAR 0 6
42804: PUSH
42805: LD_VAR 0 4
42809: ARRAY
42810: PUSH
42811: LD_INT 2
42813: ARRAY
42814: PPUSH
42815: CALL_OW 488
42819: NOT
42820: PUSH
42821: LD_VAR 0 6
42825: PUSH
42826: LD_VAR 0 4
42830: ARRAY
42831: PUSH
42832: LD_INT 1
42834: ARRAY
42835: PPUSH
42836: LD_VAR 0 6
42840: PUSH
42841: LD_VAR 0 4
42845: ARRAY
42846: PUSH
42847: LD_INT 2
42849: ARRAY
42850: PPUSH
42851: CALL_OW 428
42855: PUSH
42856: LD_INT 0
42858: NONEQUAL
42859: OR
42860: IFFALSE 42882
// tmp := Delete ( tmp , i ) ;
42862: LD_ADDR_VAR 0 6
42866: PUSH
42867: LD_VAR 0 6
42871: PPUSH
42872: LD_VAR 0 4
42876: PPUSH
42877: CALL_OW 3
42881: ST_TO_ADDR
42882: GO 42782
42884: POP
42885: POP
// j := GetClosestHex ( unit , tmp ) ;
42886: LD_ADDR_VAR 0 5
42890: PUSH
42891: LD_VAR 0 1
42895: PPUSH
42896: LD_VAR 0 6
42900: PPUSH
42901: CALL 42188 0 2
42905: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 5
42915: PUSH
42916: LD_INT 1
42918: ARRAY
42919: PPUSH
42920: LD_VAR 0 5
42924: PUSH
42925: LD_INT 2
42927: ARRAY
42928: PPUSH
42929: CALL_OW 111
// end ;
42933: LD_VAR 0 3
42937: RET
// export function PrepareApemanSoldier ( ) ; begin
42938: LD_INT 0
42940: PPUSH
// uc_nation := 0 ;
42941: LD_ADDR_OWVAR 21
42945: PUSH
42946: LD_INT 0
42948: ST_TO_ADDR
// hc_sex := sex_male ;
42949: LD_ADDR_OWVAR 27
42953: PUSH
42954: LD_INT 1
42956: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42957: LD_ADDR_OWVAR 28
42961: PUSH
42962: LD_INT 15
42964: ST_TO_ADDR
// hc_gallery :=  ;
42965: LD_ADDR_OWVAR 33
42969: PUSH
42970: LD_STRING 
42972: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42973: LD_ADDR_OWVAR 31
42977: PUSH
42978: LD_INT 0
42980: PPUSH
42981: LD_INT 3
42983: PPUSH
42984: CALL_OW 12
42988: PUSH
42989: LD_INT 0
42991: PPUSH
42992: LD_INT 3
42994: PPUSH
42995: CALL_OW 12
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: ST_TO_ADDR
// end ;
43012: LD_VAR 0 1
43016: RET
// export function PrepareApemanEngineer ( ) ; begin
43017: LD_INT 0
43019: PPUSH
// uc_nation := 0 ;
43020: LD_ADDR_OWVAR 21
43024: PUSH
43025: LD_INT 0
43027: ST_TO_ADDR
// hc_sex := sex_male ;
43028: LD_ADDR_OWVAR 27
43032: PUSH
43033: LD_INT 1
43035: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43036: LD_ADDR_OWVAR 28
43040: PUSH
43041: LD_INT 16
43043: ST_TO_ADDR
// hc_gallery :=  ;
43044: LD_ADDR_OWVAR 33
43048: PUSH
43049: LD_STRING 
43051: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43052: LD_ADDR_OWVAR 31
43056: PUSH
43057: LD_INT 0
43059: PPUSH
43060: LD_INT 3
43062: PPUSH
43063: CALL_OW 12
43067: PUSH
43068: LD_INT 0
43070: PPUSH
43071: LD_INT 3
43073: PPUSH
43074: CALL_OW 12
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: ST_TO_ADDR
// end ;
43091: LD_VAR 0 1
43095: RET
// export function PrepareApeman ( agressivity ) ; begin
43096: LD_INT 0
43098: PPUSH
// uc_side := 0 ;
43099: LD_ADDR_OWVAR 20
43103: PUSH
43104: LD_INT 0
43106: ST_TO_ADDR
// uc_nation := 0 ;
43107: LD_ADDR_OWVAR 21
43111: PUSH
43112: LD_INT 0
43114: ST_TO_ADDR
// hc_sex := sex_male ;
43115: LD_ADDR_OWVAR 27
43119: PUSH
43120: LD_INT 1
43122: ST_TO_ADDR
// hc_class := class_apeman ;
43123: LD_ADDR_OWVAR 28
43127: PUSH
43128: LD_INT 12
43130: ST_TO_ADDR
// hc_gallery :=  ;
43131: LD_ADDR_OWVAR 33
43135: PUSH
43136: LD_STRING 
43138: ST_TO_ADDR
// if agressivity = 0 then
43139: LD_VAR 0 1
43143: PUSH
43144: LD_INT 0
43146: EQUAL
43147: IFFALSE 43159
// hc_agressivity := 0 else
43149: LD_ADDR_OWVAR 35
43153: PUSH
43154: LD_INT 0
43156: ST_TO_ADDR
43157: GO 43180
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43159: LD_ADDR_OWVAR 35
43163: PUSH
43164: LD_VAR 0 1
43168: NEG
43169: PPUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL_OW 12
43179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43180: LD_ADDR_OWVAR 31
43184: PUSH
43185: LD_INT 0
43187: PPUSH
43188: LD_INT 3
43190: PPUSH
43191: CALL_OW 12
43195: PUSH
43196: LD_INT 0
43198: PPUSH
43199: LD_INT 3
43201: PPUSH
43202: CALL_OW 12
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// end ;
43219: LD_VAR 0 2
43223: RET
// export function PrepareTiger ( agressivity ) ; begin
43224: LD_INT 0
43226: PPUSH
// uc_side := 0 ;
43227: LD_ADDR_OWVAR 20
43231: PUSH
43232: LD_INT 0
43234: ST_TO_ADDR
// uc_nation := 0 ;
43235: LD_ADDR_OWVAR 21
43239: PUSH
43240: LD_INT 0
43242: ST_TO_ADDR
// hc_class := class_tiger ;
43243: LD_ADDR_OWVAR 28
43247: PUSH
43248: LD_INT 14
43250: ST_TO_ADDR
// hc_gallery :=  ;
43251: LD_ADDR_OWVAR 33
43255: PUSH
43256: LD_STRING 
43258: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43259: LD_ADDR_OWVAR 35
43263: PUSH
43264: LD_VAR 0 1
43268: NEG
43269: PPUSH
43270: LD_VAR 0 1
43274: PPUSH
43275: CALL_OW 12
43279: ST_TO_ADDR
// end ;
43280: LD_VAR 0 2
43284: RET
// export function PrepareEnchidna ( ) ; begin
43285: LD_INT 0
43287: PPUSH
// uc_side := 0 ;
43288: LD_ADDR_OWVAR 20
43292: PUSH
43293: LD_INT 0
43295: ST_TO_ADDR
// uc_nation := 0 ;
43296: LD_ADDR_OWVAR 21
43300: PUSH
43301: LD_INT 0
43303: ST_TO_ADDR
// hc_class := class_baggie ;
43304: LD_ADDR_OWVAR 28
43308: PUSH
43309: LD_INT 13
43311: ST_TO_ADDR
// hc_gallery :=  ;
43312: LD_ADDR_OWVAR 33
43316: PUSH
43317: LD_STRING 
43319: ST_TO_ADDR
// end ;
43320: LD_VAR 0 1
43324: RET
// export function PrepareFrog ( ) ; begin
43325: LD_INT 0
43327: PPUSH
// uc_side := 0 ;
43328: LD_ADDR_OWVAR 20
43332: PUSH
43333: LD_INT 0
43335: ST_TO_ADDR
// uc_nation := 0 ;
43336: LD_ADDR_OWVAR 21
43340: PUSH
43341: LD_INT 0
43343: ST_TO_ADDR
// hc_class := class_frog ;
43344: LD_ADDR_OWVAR 28
43348: PUSH
43349: LD_INT 19
43351: ST_TO_ADDR
// hc_gallery :=  ;
43352: LD_ADDR_OWVAR 33
43356: PUSH
43357: LD_STRING 
43359: ST_TO_ADDR
// end ;
43360: LD_VAR 0 1
43364: RET
// export function PrepareFish ( ) ; begin
43365: LD_INT 0
43367: PPUSH
// uc_side := 0 ;
43368: LD_ADDR_OWVAR 20
43372: PUSH
43373: LD_INT 0
43375: ST_TO_ADDR
// uc_nation := 0 ;
43376: LD_ADDR_OWVAR 21
43380: PUSH
43381: LD_INT 0
43383: ST_TO_ADDR
// hc_class := class_fish ;
43384: LD_ADDR_OWVAR 28
43388: PUSH
43389: LD_INT 20
43391: ST_TO_ADDR
// hc_gallery :=  ;
43392: LD_ADDR_OWVAR 33
43396: PUSH
43397: LD_STRING 
43399: ST_TO_ADDR
// end ;
43400: LD_VAR 0 1
43404: RET
// export function PrepareBird ( ) ; begin
43405: LD_INT 0
43407: PPUSH
// uc_side := 0 ;
43408: LD_ADDR_OWVAR 20
43412: PUSH
43413: LD_INT 0
43415: ST_TO_ADDR
// uc_nation := 0 ;
43416: LD_ADDR_OWVAR 21
43420: PUSH
43421: LD_INT 0
43423: ST_TO_ADDR
// hc_class := class_phororhacos ;
43424: LD_ADDR_OWVAR 28
43428: PUSH
43429: LD_INT 18
43431: ST_TO_ADDR
// hc_gallery :=  ;
43432: LD_ADDR_OWVAR 33
43436: PUSH
43437: LD_STRING 
43439: ST_TO_ADDR
// end ;
43440: LD_VAR 0 1
43444: RET
// export function PrepareHorse ( ) ; begin
43445: LD_INT 0
43447: PPUSH
// uc_side := 0 ;
43448: LD_ADDR_OWVAR 20
43452: PUSH
43453: LD_INT 0
43455: ST_TO_ADDR
// uc_nation := 0 ;
43456: LD_ADDR_OWVAR 21
43460: PUSH
43461: LD_INT 0
43463: ST_TO_ADDR
// hc_class := class_horse ;
43464: LD_ADDR_OWVAR 28
43468: PUSH
43469: LD_INT 21
43471: ST_TO_ADDR
// hc_gallery :=  ;
43472: LD_ADDR_OWVAR 33
43476: PUSH
43477: LD_STRING 
43479: ST_TO_ADDR
// end ;
43480: LD_VAR 0 1
43484: RET
// export function PrepareMastodont ( ) ; begin
43485: LD_INT 0
43487: PPUSH
// uc_side := 0 ;
43488: LD_ADDR_OWVAR 20
43492: PUSH
43493: LD_INT 0
43495: ST_TO_ADDR
// uc_nation := 0 ;
43496: LD_ADDR_OWVAR 21
43500: PUSH
43501: LD_INT 0
43503: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43504: LD_ADDR_OWVAR 37
43508: PUSH
43509: LD_INT 31
43511: ST_TO_ADDR
// vc_control := control_rider ;
43512: LD_ADDR_OWVAR 38
43516: PUSH
43517: LD_INT 4
43519: ST_TO_ADDR
// end ;
43520: LD_VAR 0 1
43524: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43525: LD_INT 0
43527: PPUSH
43528: PPUSH
43529: PPUSH
// uc_side = 0 ;
43530: LD_ADDR_OWVAR 20
43534: PUSH
43535: LD_INT 0
43537: ST_TO_ADDR
// uc_nation = 0 ;
43538: LD_ADDR_OWVAR 21
43542: PUSH
43543: LD_INT 0
43545: ST_TO_ADDR
// InitHc_All ( ) ;
43546: CALL_OW 584
// InitVc ;
43550: CALL_OW 20
// if mastodonts then
43554: LD_VAR 0 6
43558: IFFALSE 43625
// for i = 1 to mastodonts do
43560: LD_ADDR_VAR 0 11
43564: PUSH
43565: DOUBLE
43566: LD_INT 1
43568: DEC
43569: ST_TO_ADDR
43570: LD_VAR 0 6
43574: PUSH
43575: FOR_TO
43576: IFFALSE 43623
// begin vc_chassis := 31 ;
43578: LD_ADDR_OWVAR 37
43582: PUSH
43583: LD_INT 31
43585: ST_TO_ADDR
// vc_control := control_rider ;
43586: LD_ADDR_OWVAR 38
43590: PUSH
43591: LD_INT 4
43593: ST_TO_ADDR
// animal := CreateVehicle ;
43594: LD_ADDR_VAR 0 12
43598: PUSH
43599: CALL_OW 45
43603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43604: LD_VAR 0 12
43608: PPUSH
43609: LD_VAR 0 8
43613: PPUSH
43614: LD_INT 0
43616: PPUSH
43617: CALL 45753 0 3
// end ;
43621: GO 43575
43623: POP
43624: POP
// if horses then
43625: LD_VAR 0 5
43629: IFFALSE 43696
// for i = 1 to horses do
43631: LD_ADDR_VAR 0 11
43635: PUSH
43636: DOUBLE
43637: LD_INT 1
43639: DEC
43640: ST_TO_ADDR
43641: LD_VAR 0 5
43645: PUSH
43646: FOR_TO
43647: IFFALSE 43694
// begin hc_class := 21 ;
43649: LD_ADDR_OWVAR 28
43653: PUSH
43654: LD_INT 21
43656: ST_TO_ADDR
// hc_gallery :=  ;
43657: LD_ADDR_OWVAR 33
43661: PUSH
43662: LD_STRING 
43664: ST_TO_ADDR
// animal := CreateHuman ;
43665: LD_ADDR_VAR 0 12
43669: PUSH
43670: CALL_OW 44
43674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43675: LD_VAR 0 12
43679: PPUSH
43680: LD_VAR 0 8
43684: PPUSH
43685: LD_INT 0
43687: PPUSH
43688: CALL 45753 0 3
// end ;
43692: GO 43646
43694: POP
43695: POP
// if birds then
43696: LD_VAR 0 1
43700: IFFALSE 43767
// for i = 1 to birds do
43702: LD_ADDR_VAR 0 11
43706: PUSH
43707: DOUBLE
43708: LD_INT 1
43710: DEC
43711: ST_TO_ADDR
43712: LD_VAR 0 1
43716: PUSH
43717: FOR_TO
43718: IFFALSE 43765
// begin hc_class := 18 ;
43720: LD_ADDR_OWVAR 28
43724: PUSH
43725: LD_INT 18
43727: ST_TO_ADDR
// hc_gallery =  ;
43728: LD_ADDR_OWVAR 33
43732: PUSH
43733: LD_STRING 
43735: ST_TO_ADDR
// animal := CreateHuman ;
43736: LD_ADDR_VAR 0 12
43740: PUSH
43741: CALL_OW 44
43745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43746: LD_VAR 0 12
43750: PPUSH
43751: LD_VAR 0 8
43755: PPUSH
43756: LD_INT 0
43758: PPUSH
43759: CALL 45753 0 3
// end ;
43763: GO 43717
43765: POP
43766: POP
// if tigers then
43767: LD_VAR 0 2
43771: IFFALSE 43855
// for i = 1 to tigers do
43773: LD_ADDR_VAR 0 11
43777: PUSH
43778: DOUBLE
43779: LD_INT 1
43781: DEC
43782: ST_TO_ADDR
43783: LD_VAR 0 2
43787: PUSH
43788: FOR_TO
43789: IFFALSE 43853
// begin hc_class = class_tiger ;
43791: LD_ADDR_OWVAR 28
43795: PUSH
43796: LD_INT 14
43798: ST_TO_ADDR
// hc_gallery =  ;
43799: LD_ADDR_OWVAR 33
43803: PUSH
43804: LD_STRING 
43806: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43807: LD_ADDR_OWVAR 35
43811: PUSH
43812: LD_INT 7
43814: NEG
43815: PPUSH
43816: LD_INT 7
43818: PPUSH
43819: CALL_OW 12
43823: ST_TO_ADDR
// animal := CreateHuman ;
43824: LD_ADDR_VAR 0 12
43828: PUSH
43829: CALL_OW 44
43833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43834: LD_VAR 0 12
43838: PPUSH
43839: LD_VAR 0 8
43843: PPUSH
43844: LD_INT 0
43846: PPUSH
43847: CALL 45753 0 3
// end ;
43851: GO 43788
43853: POP
43854: POP
// if apemans then
43855: LD_VAR 0 3
43859: IFFALSE 43982
// for i = 1 to apemans do
43861: LD_ADDR_VAR 0 11
43865: PUSH
43866: DOUBLE
43867: LD_INT 1
43869: DEC
43870: ST_TO_ADDR
43871: LD_VAR 0 3
43875: PUSH
43876: FOR_TO
43877: IFFALSE 43980
// begin hc_class = class_apeman ;
43879: LD_ADDR_OWVAR 28
43883: PUSH
43884: LD_INT 12
43886: ST_TO_ADDR
// hc_gallery =  ;
43887: LD_ADDR_OWVAR 33
43891: PUSH
43892: LD_STRING 
43894: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43895: LD_ADDR_OWVAR 35
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PPUSH
43904: LD_INT 2
43906: PPUSH
43907: CALL_OW 12
43911: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43912: LD_ADDR_OWVAR 31
43916: PUSH
43917: LD_INT 1
43919: PPUSH
43920: LD_INT 3
43922: PPUSH
43923: CALL_OW 12
43927: PUSH
43928: LD_INT 1
43930: PPUSH
43931: LD_INT 3
43933: PPUSH
43934: CALL_OW 12
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
// animal := CreateHuman ;
43951: LD_ADDR_VAR 0 12
43955: PUSH
43956: CALL_OW 44
43960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43961: LD_VAR 0 12
43965: PPUSH
43966: LD_VAR 0 8
43970: PPUSH
43971: LD_INT 0
43973: PPUSH
43974: CALL 45753 0 3
// end ;
43978: GO 43876
43980: POP
43981: POP
// if enchidnas then
43982: LD_VAR 0 4
43986: IFFALSE 44053
// for i = 1 to enchidnas do
43988: LD_ADDR_VAR 0 11
43992: PUSH
43993: DOUBLE
43994: LD_INT 1
43996: DEC
43997: ST_TO_ADDR
43998: LD_VAR 0 4
44002: PUSH
44003: FOR_TO
44004: IFFALSE 44051
// begin hc_class = 13 ;
44006: LD_ADDR_OWVAR 28
44010: PUSH
44011: LD_INT 13
44013: ST_TO_ADDR
// hc_gallery =  ;
44014: LD_ADDR_OWVAR 33
44018: PUSH
44019: LD_STRING 
44021: ST_TO_ADDR
// animal := CreateHuman ;
44022: LD_ADDR_VAR 0 12
44026: PUSH
44027: CALL_OW 44
44031: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44032: LD_VAR 0 12
44036: PPUSH
44037: LD_VAR 0 8
44041: PPUSH
44042: LD_INT 0
44044: PPUSH
44045: CALL 45753 0 3
// end ;
44049: GO 44003
44051: POP
44052: POP
// if fishes then
44053: LD_VAR 0 7
44057: IFFALSE 44124
// for i = 1 to fishes do
44059: LD_ADDR_VAR 0 11
44063: PUSH
44064: DOUBLE
44065: LD_INT 1
44067: DEC
44068: ST_TO_ADDR
44069: LD_VAR 0 7
44073: PUSH
44074: FOR_TO
44075: IFFALSE 44122
// begin hc_class = 20 ;
44077: LD_ADDR_OWVAR 28
44081: PUSH
44082: LD_INT 20
44084: ST_TO_ADDR
// hc_gallery =  ;
44085: LD_ADDR_OWVAR 33
44089: PUSH
44090: LD_STRING 
44092: ST_TO_ADDR
// animal := CreateHuman ;
44093: LD_ADDR_VAR 0 12
44097: PUSH
44098: CALL_OW 44
44102: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44103: LD_VAR 0 12
44107: PPUSH
44108: LD_VAR 0 9
44112: PPUSH
44113: LD_INT 0
44115: PPUSH
44116: CALL 45753 0 3
// end ;
44120: GO 44074
44122: POP
44123: POP
// end ;
44124: LD_VAR 0 10
44128: RET
// export function WantHeal ( sci , unit ) ; begin
44129: LD_INT 0
44131: PPUSH
// if GetTaskList ( sci ) > 0 then
44132: LD_VAR 0 1
44136: PPUSH
44137: CALL_OW 437
44141: PUSH
44142: LD_INT 0
44144: GREATER
44145: IFFALSE 44215
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44147: LD_VAR 0 1
44151: PPUSH
44152: CALL_OW 437
44156: PUSH
44157: LD_INT 1
44159: ARRAY
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PUSH
44165: LD_STRING l
44167: EQUAL
44168: PUSH
44169: LD_VAR 0 1
44173: PPUSH
44174: CALL_OW 437
44178: PUSH
44179: LD_INT 1
44181: ARRAY
44182: PUSH
44183: LD_INT 4
44185: ARRAY
44186: PUSH
44187: LD_VAR 0 2
44191: EQUAL
44192: AND
44193: IFFALSE 44205
// result := true else
44195: LD_ADDR_VAR 0 3
44199: PUSH
44200: LD_INT 1
44202: ST_TO_ADDR
44203: GO 44213
// result := false ;
44205: LD_ADDR_VAR 0 3
44209: PUSH
44210: LD_INT 0
44212: ST_TO_ADDR
// end else
44213: GO 44223
// result := false ;
44215: LD_ADDR_VAR 0 3
44219: PUSH
44220: LD_INT 0
44222: ST_TO_ADDR
// end ;
44223: LD_VAR 0 3
44227: RET
// export function HealTarget ( sci ) ; begin
44228: LD_INT 0
44230: PPUSH
// if not sci then
44231: LD_VAR 0 1
44235: NOT
44236: IFFALSE 44240
// exit ;
44238: GO 44305
// result := 0 ;
44240: LD_ADDR_VAR 0 2
44244: PUSH
44245: LD_INT 0
44247: ST_TO_ADDR
// if GetTaskList ( sci ) then
44248: LD_VAR 0 1
44252: PPUSH
44253: CALL_OW 437
44257: IFFALSE 44305
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 437
44268: PUSH
44269: LD_INT 1
44271: ARRAY
44272: PUSH
44273: LD_INT 1
44275: ARRAY
44276: PUSH
44277: LD_STRING l
44279: EQUAL
44280: IFFALSE 44305
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44282: LD_ADDR_VAR 0 2
44286: PUSH
44287: LD_VAR 0 1
44291: PPUSH
44292: CALL_OW 437
44296: PUSH
44297: LD_INT 1
44299: ARRAY
44300: PUSH
44301: LD_INT 4
44303: ARRAY
44304: ST_TO_ADDR
// end ;
44305: LD_VAR 0 2
44309: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44310: LD_INT 0
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
// if not base_units then
44316: LD_VAR 0 1
44320: NOT
44321: IFFALSE 44325
// exit ;
44323: GO 44412
// result := false ;
44325: LD_ADDR_VAR 0 2
44329: PUSH
44330: LD_INT 0
44332: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44333: LD_ADDR_VAR 0 5
44337: PUSH
44338: LD_VAR 0 1
44342: PPUSH
44343: LD_INT 21
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PPUSH
44353: CALL_OW 72
44357: ST_TO_ADDR
// if not tmp then
44358: LD_VAR 0 5
44362: NOT
44363: IFFALSE 44367
// exit ;
44365: GO 44412
// for i in tmp do
44367: LD_ADDR_VAR 0 3
44371: PUSH
44372: LD_VAR 0 5
44376: PUSH
44377: FOR_IN
44378: IFFALSE 44410
// begin result := EnemyInRange ( i , 22 ) ;
44380: LD_ADDR_VAR 0 2
44384: PUSH
44385: LD_VAR 0 3
44389: PPUSH
44390: LD_INT 22
44392: PPUSH
44393: CALL 41990 0 2
44397: ST_TO_ADDR
// if result then
44398: LD_VAR 0 2
44402: IFFALSE 44408
// exit ;
44404: POP
44405: POP
44406: GO 44412
// end ;
44408: GO 44377
44410: POP
44411: POP
// end ;
44412: LD_VAR 0 2
44416: RET
// export function FilterByTag ( units , tag ) ; begin
44417: LD_INT 0
44419: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44420: LD_ADDR_VAR 0 3
44424: PUSH
44425: LD_VAR 0 1
44429: PPUSH
44430: LD_INT 120
44432: PUSH
44433: LD_VAR 0 2
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PPUSH
44442: CALL_OW 72
44446: ST_TO_ADDR
// end ;
44447: LD_VAR 0 3
44451: RET
// export function IsDriver ( un ) ; begin
44452: LD_INT 0
44454: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44455: LD_ADDR_VAR 0 2
44459: PUSH
44460: LD_VAR 0 1
44464: PUSH
44465: LD_INT 55
44467: PUSH
44468: EMPTY
44469: LIST
44470: PPUSH
44471: CALL_OW 69
44475: IN
44476: ST_TO_ADDR
// end ;
44477: LD_VAR 0 2
44481: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44482: LD_INT 0
44484: PPUSH
44485: PPUSH
// list := [ ] ;
44486: LD_ADDR_VAR 0 5
44490: PUSH
44491: EMPTY
44492: ST_TO_ADDR
// case d of 0 :
44493: LD_VAR 0 3
44497: PUSH
44498: LD_INT 0
44500: DOUBLE
44501: EQUAL
44502: IFTRUE 44506
44504: GO 44639
44506: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44507: LD_ADDR_VAR 0 5
44511: PUSH
44512: LD_VAR 0 1
44516: PUSH
44517: LD_INT 4
44519: MINUS
44520: PUSH
44521: LD_VAR 0 2
44525: PUSH
44526: LD_INT 4
44528: MINUS
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: PUSH
44538: LD_VAR 0 1
44542: PUSH
44543: LD_INT 3
44545: MINUS
44546: PUSH
44547: LD_VAR 0 2
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: PUSH
44560: LD_VAR 0 1
44564: PUSH
44565: LD_INT 4
44567: PLUS
44568: PUSH
44569: LD_VAR 0 2
44573: PUSH
44574: LD_INT 4
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: PUSH
44582: LD_VAR 0 1
44586: PUSH
44587: LD_INT 3
44589: PLUS
44590: PUSH
44591: LD_VAR 0 2
44595: PUSH
44596: LD_INT 3
44598: PLUS
44599: PUSH
44600: LD_INT 5
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: PUSH
44608: LD_VAR 0 1
44612: PUSH
44613: LD_VAR 0 2
44617: PUSH
44618: LD_INT 4
44620: PLUS
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: ST_TO_ADDR
// end ; 1 :
44637: GO 45337
44639: LD_INT 1
44641: DOUBLE
44642: EQUAL
44643: IFTRUE 44647
44645: GO 44780
44647: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44648: LD_ADDR_VAR 0 5
44652: PUSH
44653: LD_VAR 0 1
44657: PUSH
44658: LD_VAR 0 2
44662: PUSH
44663: LD_INT 4
44665: MINUS
44666: PUSH
44667: LD_INT 3
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: PUSH
44675: LD_VAR 0 1
44679: PUSH
44680: LD_INT 3
44682: MINUS
44683: PUSH
44684: LD_VAR 0 2
44688: PUSH
44689: LD_INT 3
44691: MINUS
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: PUSH
44701: LD_VAR 0 1
44705: PUSH
44706: LD_INT 4
44708: MINUS
44709: PUSH
44710: LD_VAR 0 2
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: PUSH
44723: LD_VAR 0 1
44727: PUSH
44728: LD_VAR 0 2
44732: PUSH
44733: LD_INT 3
44735: PLUS
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: PUSH
44745: LD_VAR 0 1
44749: PUSH
44750: LD_INT 4
44752: PLUS
44753: PUSH
44754: LD_VAR 0 2
44758: PUSH
44759: LD_INT 4
44761: PLUS
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
// end ; 2 :
44778: GO 45337
44780: LD_INT 2
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44788
44786: GO 44917
44788: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44789: LD_ADDR_VAR 0 5
44793: PUSH
44794: LD_VAR 0 1
44798: PUSH
44799: LD_VAR 0 2
44803: PUSH
44804: LD_INT 3
44806: MINUS
44807: PUSH
44808: LD_INT 3
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: PUSH
44816: LD_VAR 0 1
44820: PUSH
44821: LD_INT 4
44823: PLUS
44824: PUSH
44825: LD_VAR 0 2
44829: PUSH
44830: LD_INT 4
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: PUSH
44838: LD_VAR 0 1
44842: PUSH
44843: LD_VAR 0 2
44847: PUSH
44848: LD_INT 4
44850: PLUS
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: PUSH
44860: LD_VAR 0 1
44864: PUSH
44865: LD_INT 3
44867: MINUS
44868: PUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: PUSH
44882: LD_VAR 0 1
44886: PUSH
44887: LD_INT 4
44889: MINUS
44890: PUSH
44891: LD_VAR 0 2
44895: PUSH
44896: LD_INT 4
44898: MINUS
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: ST_TO_ADDR
// end ; 3 :
44915: GO 45337
44917: LD_INT 3
44919: DOUBLE
44920: EQUAL
44921: IFTRUE 44925
44923: GO 45058
44925: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44926: LD_ADDR_VAR 0 5
44930: PUSH
44931: LD_VAR 0 1
44935: PUSH
44936: LD_INT 3
44938: PLUS
44939: PUSH
44940: LD_VAR 0 2
44944: PUSH
44945: LD_INT 4
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: PUSH
44953: LD_VAR 0 1
44957: PUSH
44958: LD_INT 4
44960: PLUS
44961: PUSH
44962: LD_VAR 0 2
44966: PUSH
44967: LD_INT 4
44969: PLUS
44970: PUSH
44971: LD_INT 5
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: PUSH
44979: LD_VAR 0 1
44983: PUSH
44984: LD_INT 4
44986: MINUS
44987: PUSH
44988: LD_VAR 0 2
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: PUSH
45001: LD_VAR 0 1
45005: PUSH
45006: LD_VAR 0 2
45010: PUSH
45011: LD_INT 4
45013: MINUS
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: PUSH
45023: LD_VAR 0 1
45027: PUSH
45028: LD_INT 3
45030: MINUS
45031: PUSH
45032: LD_VAR 0 2
45036: PUSH
45037: LD_INT 3
45039: MINUS
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: ST_TO_ADDR
// end ; 4 :
45056: GO 45337
45058: LD_INT 4
45060: DOUBLE
45061: EQUAL
45062: IFTRUE 45066
45064: GO 45199
45066: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45067: LD_ADDR_VAR 0 5
45071: PUSH
45072: LD_VAR 0 1
45076: PUSH
45077: LD_VAR 0 2
45081: PUSH
45082: LD_INT 4
45084: PLUS
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: PUSH
45094: LD_VAR 0 1
45098: PUSH
45099: LD_INT 3
45101: PLUS
45102: PUSH
45103: LD_VAR 0 2
45107: PUSH
45108: LD_INT 3
45110: PLUS
45111: PUSH
45112: LD_INT 5
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: PUSH
45120: LD_VAR 0 1
45124: PUSH
45125: LD_INT 4
45127: PLUS
45128: PUSH
45129: LD_VAR 0 2
45133: PUSH
45134: LD_INT 4
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: PUSH
45142: LD_VAR 0 1
45146: PUSH
45147: LD_VAR 0 2
45151: PUSH
45152: LD_INT 3
45154: MINUS
45155: PUSH
45156: LD_INT 3
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: PUSH
45164: LD_VAR 0 1
45168: PUSH
45169: LD_INT 4
45171: MINUS
45172: PUSH
45173: LD_VAR 0 2
45177: PUSH
45178: LD_INT 4
45180: MINUS
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: ST_TO_ADDR
// end ; 5 :
45197: GO 45337
45199: LD_INT 5
45201: DOUBLE
45202: EQUAL
45203: IFTRUE 45207
45205: GO 45336
45207: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45208: LD_ADDR_VAR 0 5
45212: PUSH
45213: LD_VAR 0 1
45217: PUSH
45218: LD_INT 4
45220: MINUS
45221: PUSH
45222: LD_VAR 0 2
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: PUSH
45235: LD_VAR 0 1
45239: PUSH
45240: LD_VAR 0 2
45244: PUSH
45245: LD_INT 4
45247: MINUS
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: PUSH
45257: LD_VAR 0 1
45261: PUSH
45262: LD_INT 4
45264: PLUS
45265: PUSH
45266: LD_VAR 0 2
45270: PUSH
45271: LD_INT 4
45273: PLUS
45274: PUSH
45275: LD_INT 5
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: PUSH
45283: LD_VAR 0 1
45287: PUSH
45288: LD_INT 3
45290: PLUS
45291: PUSH
45292: LD_VAR 0 2
45296: PUSH
45297: LD_INT 4
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: PUSH
45305: LD_VAR 0 1
45309: PUSH
45310: LD_VAR 0 2
45314: PUSH
45315: LD_INT 3
45317: PLUS
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: ST_TO_ADDR
// end ; end ;
45334: GO 45337
45336: POP
// result := list ;
45337: LD_ADDR_VAR 0 4
45341: PUSH
45342: LD_VAR 0 5
45346: ST_TO_ADDR
// end ;
45347: LD_VAR 0 4
45351: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45352: LD_INT 0
45354: PPUSH
45355: PPUSH
45356: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45357: LD_VAR 0 1
45361: NOT
45362: PUSH
45363: LD_VAR 0 2
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: LD_INT 4
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: IN
45386: NOT
45387: OR
45388: IFFALSE 45392
// exit ;
45390: GO 45475
// tmp := [ ] ;
45392: LD_ADDR_VAR 0 5
45396: PUSH
45397: EMPTY
45398: ST_TO_ADDR
// for i in units do
45399: LD_ADDR_VAR 0 4
45403: PUSH
45404: LD_VAR 0 1
45408: PUSH
45409: FOR_IN
45410: IFFALSE 45444
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45412: LD_ADDR_VAR 0 5
45416: PUSH
45417: LD_VAR 0 5
45421: PPUSH
45422: LD_VAR 0 4
45426: PPUSH
45427: LD_VAR 0 2
45431: PPUSH
45432: CALL_OW 259
45436: PPUSH
45437: CALL 46848 0 2
45441: ST_TO_ADDR
45442: GO 45409
45444: POP
45445: POP
// if not tmp then
45446: LD_VAR 0 5
45450: NOT
45451: IFFALSE 45455
// exit ;
45453: GO 45475
// result := SortListByListDesc ( units , tmp ) ;
45455: LD_ADDR_VAR 0 3
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: LD_VAR 0 5
45469: PPUSH
45470: CALL_OW 77
45474: ST_TO_ADDR
// end ;
45475: LD_VAR 0 3
45479: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45480: LD_INT 0
45482: PPUSH
45483: PPUSH
45484: PPUSH
// result := false ;
45485: LD_ADDR_VAR 0 3
45489: PUSH
45490: LD_INT 0
45492: ST_TO_ADDR
// if not building then
45493: LD_VAR 0 2
45497: NOT
45498: IFFALSE 45502
// exit ;
45500: GO 45640
// x := GetX ( building ) ;
45502: LD_ADDR_VAR 0 4
45506: PUSH
45507: LD_VAR 0 2
45511: PPUSH
45512: CALL_OW 250
45516: ST_TO_ADDR
// y := GetY ( building ) ;
45517: LD_ADDR_VAR 0 5
45521: PUSH
45522: LD_VAR 0 2
45526: PPUSH
45527: CALL_OW 251
45531: ST_TO_ADDR
// if not x or not y then
45532: LD_VAR 0 4
45536: NOT
45537: PUSH
45538: LD_VAR 0 5
45542: NOT
45543: OR
45544: IFFALSE 45548
// exit ;
45546: GO 45640
// if GetTaskList ( unit ) then
45548: LD_VAR 0 1
45552: PPUSH
45553: CALL_OW 437
45557: IFFALSE 45640
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45559: LD_STRING e
45561: PUSH
45562: LD_VAR 0 1
45566: PPUSH
45567: CALL_OW 437
45571: PUSH
45572: LD_INT 1
45574: ARRAY
45575: PUSH
45576: LD_INT 1
45578: ARRAY
45579: EQUAL
45580: PUSH
45581: LD_VAR 0 4
45585: PUSH
45586: LD_VAR 0 1
45590: PPUSH
45591: CALL_OW 437
45595: PUSH
45596: LD_INT 1
45598: ARRAY
45599: PUSH
45600: LD_INT 2
45602: ARRAY
45603: EQUAL
45604: AND
45605: PUSH
45606: LD_VAR 0 5
45610: PUSH
45611: LD_VAR 0 1
45615: PPUSH
45616: CALL_OW 437
45620: PUSH
45621: LD_INT 1
45623: ARRAY
45624: PUSH
45625: LD_INT 3
45627: ARRAY
45628: EQUAL
45629: AND
45630: IFFALSE 45640
// result := true end ;
45632: LD_ADDR_VAR 0 3
45636: PUSH
45637: LD_INT 1
45639: ST_TO_ADDR
// end ;
45640: LD_VAR 0 3
45644: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45645: LD_INT 0
45647: PPUSH
// result := false ;
45648: LD_ADDR_VAR 0 4
45652: PUSH
45653: LD_INT 0
45655: ST_TO_ADDR
// if GetTaskList ( unit ) then
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 437
45665: IFFALSE 45748
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45667: LD_STRING M
45669: PUSH
45670: LD_VAR 0 1
45674: PPUSH
45675: CALL_OW 437
45679: PUSH
45680: LD_INT 1
45682: ARRAY
45683: PUSH
45684: LD_INT 1
45686: ARRAY
45687: EQUAL
45688: PUSH
45689: LD_VAR 0 2
45693: PUSH
45694: LD_VAR 0 1
45698: PPUSH
45699: CALL_OW 437
45703: PUSH
45704: LD_INT 1
45706: ARRAY
45707: PUSH
45708: LD_INT 2
45710: ARRAY
45711: EQUAL
45712: AND
45713: PUSH
45714: LD_VAR 0 3
45718: PUSH
45719: LD_VAR 0 1
45723: PPUSH
45724: CALL_OW 437
45728: PUSH
45729: LD_INT 1
45731: ARRAY
45732: PUSH
45733: LD_INT 3
45735: ARRAY
45736: EQUAL
45737: AND
45738: IFFALSE 45748
// result := true ;
45740: LD_ADDR_VAR 0 4
45744: PUSH
45745: LD_INT 1
45747: ST_TO_ADDR
// end ; end ;
45748: LD_VAR 0 4
45752: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45753: LD_INT 0
45755: PPUSH
45756: PPUSH
45757: PPUSH
45758: PPUSH
// if not unit or not area then
45759: LD_VAR 0 1
45763: NOT
45764: PUSH
45765: LD_VAR 0 2
45769: NOT
45770: OR
45771: IFFALSE 45775
// exit ;
45773: GO 45951
// tmp := AreaToList ( area , i ) ;
45775: LD_ADDR_VAR 0 6
45779: PUSH
45780: LD_VAR 0 2
45784: PPUSH
45785: LD_VAR 0 5
45789: PPUSH
45790: CALL_OW 517
45794: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45795: LD_ADDR_VAR 0 5
45799: PUSH
45800: DOUBLE
45801: LD_INT 1
45803: DEC
45804: ST_TO_ADDR
45805: LD_VAR 0 6
45809: PUSH
45810: LD_INT 1
45812: ARRAY
45813: PUSH
45814: FOR_TO
45815: IFFALSE 45949
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45817: LD_ADDR_VAR 0 7
45821: PUSH
45822: LD_VAR 0 6
45826: PUSH
45827: LD_INT 1
45829: ARRAY
45830: PUSH
45831: LD_VAR 0 5
45835: ARRAY
45836: PUSH
45837: LD_VAR 0 6
45841: PUSH
45842: LD_INT 2
45844: ARRAY
45845: PUSH
45846: LD_VAR 0 5
45850: ARRAY
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45856: LD_INT 92
45858: PUSH
45859: LD_VAR 0 7
45863: PUSH
45864: LD_INT 1
45866: ARRAY
45867: PUSH
45868: LD_VAR 0 7
45872: PUSH
45873: LD_INT 2
45875: ARRAY
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: PPUSH
45886: CALL_OW 69
45890: PUSH
45891: LD_INT 0
45893: EQUAL
45894: IFFALSE 45947
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45896: LD_VAR 0 1
45900: PPUSH
45901: LD_VAR 0 7
45905: PUSH
45906: LD_INT 1
45908: ARRAY
45909: PPUSH
45910: LD_VAR 0 7
45914: PUSH
45915: LD_INT 2
45917: ARRAY
45918: PPUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: CALL_OW 48
// result := IsPlaced ( unit ) ;
45928: LD_ADDR_VAR 0 4
45932: PUSH
45933: LD_VAR 0 1
45937: PPUSH
45938: CALL_OW 305
45942: ST_TO_ADDR
// exit ;
45943: POP
45944: POP
45945: GO 45951
// end ; end ;
45947: GO 45814
45949: POP
45950: POP
// end ;
45951: LD_VAR 0 4
45955: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45956: LD_INT 0
45958: PPUSH
45959: PPUSH
45960: PPUSH
// if not side or side > 8 then
45961: LD_VAR 0 1
45965: NOT
45966: PUSH
45967: LD_VAR 0 1
45971: PUSH
45972: LD_INT 8
45974: GREATER
45975: OR
45976: IFFALSE 45980
// exit ;
45978: GO 46167
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45980: LD_ADDR_VAR 0 4
45984: PUSH
45985: LD_INT 22
45987: PUSH
45988: LD_VAR 0 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 21
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PPUSH
46011: CALL_OW 69
46015: ST_TO_ADDR
// if not tmp then
46016: LD_VAR 0 4
46020: NOT
46021: IFFALSE 46025
// exit ;
46023: GO 46167
// enable_addtolog := true ;
46025: LD_ADDR_OWVAR 81
46029: PUSH
46030: LD_INT 1
46032: ST_TO_ADDR
// AddToLog ( [ ) ;
46033: LD_STRING [
46035: PPUSH
46036: CALL_OW 561
// for i in tmp do
46040: LD_ADDR_VAR 0 3
46044: PUSH
46045: LD_VAR 0 4
46049: PUSH
46050: FOR_IN
46051: IFFALSE 46158
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46053: LD_STRING [
46055: PUSH
46056: LD_VAR 0 3
46060: PPUSH
46061: CALL_OW 266
46065: STR
46066: PUSH
46067: LD_STRING , 
46069: STR
46070: PUSH
46071: LD_VAR 0 3
46075: PPUSH
46076: CALL_OW 250
46080: STR
46081: PUSH
46082: LD_STRING , 
46084: STR
46085: PUSH
46086: LD_VAR 0 3
46090: PPUSH
46091: CALL_OW 251
46095: STR
46096: PUSH
46097: LD_STRING , 
46099: STR
46100: PUSH
46101: LD_VAR 0 3
46105: PPUSH
46106: CALL_OW 254
46110: STR
46111: PUSH
46112: LD_STRING , 
46114: STR
46115: PUSH
46116: LD_VAR 0 3
46120: PPUSH
46121: LD_INT 1
46123: PPUSH
46124: CALL_OW 268
46128: STR
46129: PUSH
46130: LD_STRING , 
46132: STR
46133: PUSH
46134: LD_VAR 0 3
46138: PPUSH
46139: LD_INT 2
46141: PPUSH
46142: CALL_OW 268
46146: STR
46147: PUSH
46148: LD_STRING ],
46150: STR
46151: PPUSH
46152: CALL_OW 561
// end ;
46156: GO 46050
46158: POP
46159: POP
// AddToLog ( ]; ) ;
46160: LD_STRING ];
46162: PPUSH
46163: CALL_OW 561
// end ;
46167: LD_VAR 0 2
46171: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46172: LD_INT 0
46174: PPUSH
46175: PPUSH
46176: PPUSH
46177: PPUSH
46178: PPUSH
// if not area or not rate or not max then
46179: LD_VAR 0 1
46183: NOT
46184: PUSH
46185: LD_VAR 0 2
46189: NOT
46190: OR
46191: PUSH
46192: LD_VAR 0 4
46196: NOT
46197: OR
46198: IFFALSE 46202
// exit ;
46200: GO 46391
// while 1 do
46202: LD_INT 1
46204: IFFALSE 46391
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46206: LD_ADDR_VAR 0 9
46210: PUSH
46211: LD_VAR 0 1
46215: PPUSH
46216: LD_INT 1
46218: PPUSH
46219: CALL_OW 287
46223: PUSH
46224: LD_INT 10
46226: MUL
46227: ST_TO_ADDR
// r := rate / 10 ;
46228: LD_ADDR_VAR 0 7
46232: PUSH
46233: LD_VAR 0 2
46237: PUSH
46238: LD_INT 10
46240: DIVREAL
46241: ST_TO_ADDR
// time := 1 1$00 ;
46242: LD_ADDR_VAR 0 8
46246: PUSH
46247: LD_INT 2100
46249: ST_TO_ADDR
// if amount < min then
46250: LD_VAR 0 9
46254: PUSH
46255: LD_VAR 0 3
46259: LESS
46260: IFFALSE 46278
// r := r * 2 else
46262: LD_ADDR_VAR 0 7
46266: PUSH
46267: LD_VAR 0 7
46271: PUSH
46272: LD_INT 2
46274: MUL
46275: ST_TO_ADDR
46276: GO 46304
// if amount > max then
46278: LD_VAR 0 9
46282: PUSH
46283: LD_VAR 0 4
46287: GREATER
46288: IFFALSE 46304
// r := r / 2 ;
46290: LD_ADDR_VAR 0 7
46294: PUSH
46295: LD_VAR 0 7
46299: PUSH
46300: LD_INT 2
46302: DIVREAL
46303: ST_TO_ADDR
// time := time / r ;
46304: LD_ADDR_VAR 0 8
46308: PUSH
46309: LD_VAR 0 8
46313: PUSH
46314: LD_VAR 0 7
46318: DIVREAL
46319: ST_TO_ADDR
// if time < 0 then
46320: LD_VAR 0 8
46324: PUSH
46325: LD_INT 0
46327: LESS
46328: IFFALSE 46345
// time := time * - 1 ;
46330: LD_ADDR_VAR 0 8
46334: PUSH
46335: LD_VAR 0 8
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: MUL
46344: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46345: LD_VAR 0 8
46349: PUSH
46350: LD_INT 35
46352: PPUSH
46353: LD_INT 875
46355: PPUSH
46356: CALL_OW 12
46360: PLUS
46361: PPUSH
46362: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46366: LD_INT 1
46368: PPUSH
46369: LD_INT 5
46371: PPUSH
46372: CALL_OW 12
46376: PPUSH
46377: LD_VAR 0 1
46381: PPUSH
46382: LD_INT 1
46384: PPUSH
46385: CALL_OW 55
// end ;
46389: GO 46202
// end ;
46391: LD_VAR 0 5
46395: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46396: LD_INT 0
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
// if not turrets or not factories then
46406: LD_VAR 0 1
46410: NOT
46411: PUSH
46412: LD_VAR 0 2
46416: NOT
46417: OR
46418: IFFALSE 46422
// exit ;
46420: GO 46729
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46422: LD_ADDR_VAR 0 10
46426: PUSH
46427: LD_INT 5
46429: PUSH
46430: LD_INT 6
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 4
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 5
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 24
46464: PUSH
46465: LD_INT 25
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 23
46474: PUSH
46475: LD_INT 27
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 42
46488: PUSH
46489: LD_INT 43
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 44
46498: PUSH
46499: LD_INT 46
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 45
46508: PUSH
46509: LD_INT 47
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: ST_TO_ADDR
// result := [ ] ;
46526: LD_ADDR_VAR 0 3
46530: PUSH
46531: EMPTY
46532: ST_TO_ADDR
// for i in turrets do
46533: LD_ADDR_VAR 0 4
46537: PUSH
46538: LD_VAR 0 1
46542: PUSH
46543: FOR_IN
46544: IFFALSE 46727
// begin nat := GetNation ( i ) ;
46546: LD_ADDR_VAR 0 7
46550: PUSH
46551: LD_VAR 0 4
46555: PPUSH
46556: CALL_OW 248
46560: ST_TO_ADDR
// weapon := 0 ;
46561: LD_ADDR_VAR 0 8
46565: PUSH
46566: LD_INT 0
46568: ST_TO_ADDR
// if not nat then
46569: LD_VAR 0 7
46573: NOT
46574: IFFALSE 46578
// continue ;
46576: GO 46543
// for j in list [ nat ] do
46578: LD_ADDR_VAR 0 5
46582: PUSH
46583: LD_VAR 0 10
46587: PUSH
46588: LD_VAR 0 7
46592: ARRAY
46593: PUSH
46594: FOR_IN
46595: IFFALSE 46636
// if GetBWeapon ( i ) = j [ 1 ] then
46597: LD_VAR 0 4
46601: PPUSH
46602: CALL_OW 269
46606: PUSH
46607: LD_VAR 0 5
46611: PUSH
46612: LD_INT 1
46614: ARRAY
46615: EQUAL
46616: IFFALSE 46634
// begin weapon := j [ 2 ] ;
46618: LD_ADDR_VAR 0 8
46622: PUSH
46623: LD_VAR 0 5
46627: PUSH
46628: LD_INT 2
46630: ARRAY
46631: ST_TO_ADDR
// break ;
46632: GO 46636
// end ;
46634: GO 46594
46636: POP
46637: POP
// if not weapon then
46638: LD_VAR 0 8
46642: NOT
46643: IFFALSE 46647
// continue ;
46645: GO 46543
// for k in factories do
46647: LD_ADDR_VAR 0 6
46651: PUSH
46652: LD_VAR 0 2
46656: PUSH
46657: FOR_IN
46658: IFFALSE 46723
// begin weapons := AvailableWeaponList ( k ) ;
46660: LD_ADDR_VAR 0 9
46664: PUSH
46665: LD_VAR 0 6
46669: PPUSH
46670: CALL_OW 478
46674: ST_TO_ADDR
// if not weapons then
46675: LD_VAR 0 9
46679: NOT
46680: IFFALSE 46684
// continue ;
46682: GO 46657
// if weapon in weapons then
46684: LD_VAR 0 8
46688: PUSH
46689: LD_VAR 0 9
46693: IN
46694: IFFALSE 46721
// begin result := [ i , weapon ] ;
46696: LD_ADDR_VAR 0 3
46700: PUSH
46701: LD_VAR 0 4
46705: PUSH
46706: LD_VAR 0 8
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// exit ;
46715: POP
46716: POP
46717: POP
46718: POP
46719: GO 46729
// end ; end ;
46721: GO 46657
46723: POP
46724: POP
// end ;
46725: GO 46543
46727: POP
46728: POP
// end ;
46729: LD_VAR 0 3
46733: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46734: LD_INT 0
46736: PPUSH
// if not side or side > 8 then
46737: LD_VAR 0 3
46741: NOT
46742: PUSH
46743: LD_VAR 0 3
46747: PUSH
46748: LD_INT 8
46750: GREATER
46751: OR
46752: IFFALSE 46756
// exit ;
46754: GO 46815
// if not range then
46756: LD_VAR 0 4
46760: NOT
46761: IFFALSE 46772
// range := - 12 ;
46763: LD_ADDR_VAR 0 4
46767: PUSH
46768: LD_INT 12
46770: NEG
46771: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46772: LD_VAR 0 1
46776: PPUSH
46777: LD_VAR 0 2
46781: PPUSH
46782: LD_VAR 0 3
46786: PPUSH
46787: LD_VAR 0 4
46791: PPUSH
46792: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46796: LD_VAR 0 1
46800: PPUSH
46801: LD_VAR 0 2
46805: PPUSH
46806: LD_VAR 0 3
46810: PPUSH
46811: CALL_OW 331
// end ;
46815: LD_VAR 0 5
46819: RET
// export function Video ( mode ) ; begin
46820: LD_INT 0
46822: PPUSH
// ingame_video = mode ;
46823: LD_ADDR_OWVAR 52
46827: PUSH
46828: LD_VAR 0 1
46832: ST_TO_ADDR
// interface_hidden = mode ;
46833: LD_ADDR_OWVAR 54
46837: PUSH
46838: LD_VAR 0 1
46842: ST_TO_ADDR
// end ;
46843: LD_VAR 0 2
46847: RET
// export function Join ( array , element ) ; begin
46848: LD_INT 0
46850: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46851: LD_ADDR_VAR 0 3
46855: PUSH
46856: LD_VAR 0 1
46860: PPUSH
46861: LD_VAR 0 1
46865: PUSH
46866: LD_INT 1
46868: PLUS
46869: PPUSH
46870: LD_VAR 0 2
46874: PPUSH
46875: CALL_OW 1
46879: ST_TO_ADDR
// end ;
46880: LD_VAR 0 3
46884: RET
// export function JoinUnion ( array , element ) ; begin
46885: LD_INT 0
46887: PPUSH
// result := array union element ;
46888: LD_ADDR_VAR 0 3
46892: PUSH
46893: LD_VAR 0 1
46897: PUSH
46898: LD_VAR 0 2
46902: UNION
46903: ST_TO_ADDR
// end ;
46904: LD_VAR 0 3
46908: RET
// export function GetBehemoths ( side ) ; begin
46909: LD_INT 0
46911: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46912: LD_ADDR_VAR 0 2
46916: PUSH
46917: LD_INT 22
46919: PUSH
46920: LD_VAR 0 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 31
46931: PUSH
46932: LD_INT 25
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PPUSH
46943: CALL_OW 69
46947: ST_TO_ADDR
// end ;
46948: LD_VAR 0 2
46952: RET
// export function Shuffle ( array ) ; var i , index ; begin
46953: LD_INT 0
46955: PPUSH
46956: PPUSH
46957: PPUSH
// result := [ ] ;
46958: LD_ADDR_VAR 0 2
46962: PUSH
46963: EMPTY
46964: ST_TO_ADDR
// if not array then
46965: LD_VAR 0 1
46969: NOT
46970: IFFALSE 46974
// exit ;
46972: GO 47073
// Randomize ;
46974: CALL_OW 10
// for i = array downto 1 do
46978: LD_ADDR_VAR 0 3
46982: PUSH
46983: DOUBLE
46984: LD_VAR 0 1
46988: INC
46989: ST_TO_ADDR
46990: LD_INT 1
46992: PUSH
46993: FOR_DOWNTO
46994: IFFALSE 47071
// begin index := rand ( 1 , array ) ;
46996: LD_ADDR_VAR 0 4
47000: PUSH
47001: LD_INT 1
47003: PPUSH
47004: LD_VAR 0 1
47008: PPUSH
47009: CALL_OW 12
47013: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47014: LD_ADDR_VAR 0 2
47018: PUSH
47019: LD_VAR 0 2
47023: PPUSH
47024: LD_VAR 0 2
47028: PUSH
47029: LD_INT 1
47031: PLUS
47032: PPUSH
47033: LD_VAR 0 1
47037: PUSH
47038: LD_VAR 0 4
47042: ARRAY
47043: PPUSH
47044: CALL_OW 2
47048: ST_TO_ADDR
// array := Delete ( array , index ) ;
47049: LD_ADDR_VAR 0 1
47053: PUSH
47054: LD_VAR 0 1
47058: PPUSH
47059: LD_VAR 0 4
47063: PPUSH
47064: CALL_OW 3
47068: ST_TO_ADDR
// end ;
47069: GO 46993
47071: POP
47072: POP
// end ;
47073: LD_VAR 0 2
47077: RET
// export function GetBaseMaterials ( base ) ; begin
47078: LD_INT 0
47080: PPUSH
// result := [ 0 , 0 , 0 ] ;
47081: LD_ADDR_VAR 0 2
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: ST_TO_ADDR
// if not base then
47100: LD_VAR 0 1
47104: NOT
47105: IFFALSE 47109
// exit ;
47107: GO 47158
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47109: LD_ADDR_VAR 0 2
47113: PUSH
47114: LD_VAR 0 1
47118: PPUSH
47119: LD_INT 1
47121: PPUSH
47122: CALL_OW 275
47126: PUSH
47127: LD_VAR 0 1
47131: PPUSH
47132: LD_INT 2
47134: PPUSH
47135: CALL_OW 275
47139: PUSH
47140: LD_VAR 0 1
47144: PPUSH
47145: LD_INT 3
47147: PPUSH
47148: CALL_OW 275
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// end ;
47158: LD_VAR 0 2
47162: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47163: LD_INT 0
47165: PPUSH
47166: PPUSH
// result := array ;
47167: LD_ADDR_VAR 0 3
47171: PUSH
47172: LD_VAR 0 1
47176: ST_TO_ADDR
// if size >= result then
47177: LD_VAR 0 2
47181: PUSH
47182: LD_VAR 0 3
47186: GREATEREQUAL
47187: IFFALSE 47191
// exit ;
47189: GO 47241
// if size then
47191: LD_VAR 0 2
47195: IFFALSE 47241
// for i := array downto size do
47197: LD_ADDR_VAR 0 4
47201: PUSH
47202: DOUBLE
47203: LD_VAR 0 1
47207: INC
47208: ST_TO_ADDR
47209: LD_VAR 0 2
47213: PUSH
47214: FOR_DOWNTO
47215: IFFALSE 47239
// result := Delete ( result , result ) ;
47217: LD_ADDR_VAR 0 3
47221: PUSH
47222: LD_VAR 0 3
47226: PPUSH
47227: LD_VAR 0 3
47231: PPUSH
47232: CALL_OW 3
47236: ST_TO_ADDR
47237: GO 47214
47239: POP
47240: POP
// end ;
47241: LD_VAR 0 3
47245: RET
// export function ComExit ( unit ) ; var tmp ; begin
47246: LD_INT 0
47248: PPUSH
47249: PPUSH
// if not IsInUnit ( unit ) then
47250: LD_VAR 0 1
47254: PPUSH
47255: CALL_OW 310
47259: NOT
47260: IFFALSE 47264
// exit ;
47262: GO 47324
// tmp := IsInUnit ( unit ) ;
47264: LD_ADDR_VAR 0 3
47268: PUSH
47269: LD_VAR 0 1
47273: PPUSH
47274: CALL_OW 310
47278: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47279: LD_VAR 0 3
47283: PPUSH
47284: CALL_OW 247
47288: PUSH
47289: LD_INT 2
47291: EQUAL
47292: IFFALSE 47305
// ComExitVehicle ( unit ) else
47294: LD_VAR 0 1
47298: PPUSH
47299: CALL_OW 121
47303: GO 47314
// ComExitBuilding ( unit ) ;
47305: LD_VAR 0 1
47309: PPUSH
47310: CALL_OW 122
// result := tmp ;
47314: LD_ADDR_VAR 0 2
47318: PUSH
47319: LD_VAR 0 3
47323: ST_TO_ADDR
// end ;
47324: LD_VAR 0 2
47328: RET
// export function ComExitAll ( units ) ; var i ; begin
47329: LD_INT 0
47331: PPUSH
47332: PPUSH
// if not units then
47333: LD_VAR 0 1
47337: NOT
47338: IFFALSE 47342
// exit ;
47340: GO 47368
// for i in units do
47342: LD_ADDR_VAR 0 3
47346: PUSH
47347: LD_VAR 0 1
47351: PUSH
47352: FOR_IN
47353: IFFALSE 47366
// ComExit ( i ) ;
47355: LD_VAR 0 3
47359: PPUSH
47360: CALL 47246 0 1
47364: GO 47352
47366: POP
47367: POP
// end ;
47368: LD_VAR 0 2
47372: RET
// export function ResetHc ; begin
47373: LD_INT 0
47375: PPUSH
// InitHc ;
47376: CALL_OW 19
// hc_importance := 0 ;
47380: LD_ADDR_OWVAR 32
47384: PUSH
47385: LD_INT 0
47387: ST_TO_ADDR
// end ;
47388: LD_VAR 0 1
47392: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47393: LD_INT 0
47395: PPUSH
47396: PPUSH
47397: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47398: LD_ADDR_VAR 0 6
47402: PUSH
47403: LD_VAR 0 1
47407: PUSH
47408: LD_VAR 0 3
47412: PLUS
47413: PUSH
47414: LD_INT 2
47416: DIV
47417: ST_TO_ADDR
// if _x < 0 then
47418: LD_VAR 0 6
47422: PUSH
47423: LD_INT 0
47425: LESS
47426: IFFALSE 47443
// _x := _x * - 1 ;
47428: LD_ADDR_VAR 0 6
47432: PUSH
47433: LD_VAR 0 6
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: MUL
47442: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47443: LD_ADDR_VAR 0 7
47447: PUSH
47448: LD_VAR 0 2
47452: PUSH
47453: LD_VAR 0 4
47457: PLUS
47458: PUSH
47459: LD_INT 2
47461: DIV
47462: ST_TO_ADDR
// if _y < 0 then
47463: LD_VAR 0 7
47467: PUSH
47468: LD_INT 0
47470: LESS
47471: IFFALSE 47488
// _y := _y * - 1 ;
47473: LD_ADDR_VAR 0 7
47477: PUSH
47478: LD_VAR 0 7
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: MUL
47487: ST_TO_ADDR
// result := [ _x , _y ] ;
47488: LD_ADDR_VAR 0 5
47492: PUSH
47493: LD_VAR 0 6
47497: PUSH
47498: LD_VAR 0 7
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: ST_TO_ADDR
// end ;
47507: LD_VAR 0 5
47511: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47512: LD_INT 0
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
// task := GetTaskList ( unit ) ;
47518: LD_ADDR_VAR 0 7
47522: PUSH
47523: LD_VAR 0 1
47527: PPUSH
47528: CALL_OW 437
47532: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47533: LD_VAR 0 7
47537: NOT
47538: PUSH
47539: LD_VAR 0 1
47543: PPUSH
47544: LD_VAR 0 2
47548: PPUSH
47549: CALL_OW 308
47553: NOT
47554: AND
47555: IFFALSE 47559
// exit ;
47557: GO 47677
// if IsInArea ( unit , area ) then
47559: LD_VAR 0 1
47563: PPUSH
47564: LD_VAR 0 2
47568: PPUSH
47569: CALL_OW 308
47573: IFFALSE 47591
// begin ComMoveToArea ( unit , goAway ) ;
47575: LD_VAR 0 1
47579: PPUSH
47580: LD_VAR 0 3
47584: PPUSH
47585: CALL_OW 113
// exit ;
47589: GO 47677
// end ; if task [ 1 ] [ 1 ] <> M then
47591: LD_VAR 0 7
47595: PUSH
47596: LD_INT 1
47598: ARRAY
47599: PUSH
47600: LD_INT 1
47602: ARRAY
47603: PUSH
47604: LD_STRING M
47606: NONEQUAL
47607: IFFALSE 47611
// exit ;
47609: GO 47677
// x := task [ 1 ] [ 2 ] ;
47611: LD_ADDR_VAR 0 5
47615: PUSH
47616: LD_VAR 0 7
47620: PUSH
47621: LD_INT 1
47623: ARRAY
47624: PUSH
47625: LD_INT 2
47627: ARRAY
47628: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47629: LD_ADDR_VAR 0 6
47633: PUSH
47634: LD_VAR 0 7
47638: PUSH
47639: LD_INT 1
47641: ARRAY
47642: PUSH
47643: LD_INT 3
47645: ARRAY
47646: ST_TO_ADDR
// if InArea ( x , y , area ) then
47647: LD_VAR 0 5
47651: PPUSH
47652: LD_VAR 0 6
47656: PPUSH
47657: LD_VAR 0 2
47661: PPUSH
47662: CALL_OW 309
47666: IFFALSE 47677
// ComStop ( unit ) ;
47668: LD_VAR 0 1
47672: PPUSH
47673: CALL_OW 141
// end ;
47677: LD_VAR 0 4
47681: RET
// export function Abs ( value ) ; begin
47682: LD_INT 0
47684: PPUSH
// result := value ;
47685: LD_ADDR_VAR 0 2
47689: PUSH
47690: LD_VAR 0 1
47694: ST_TO_ADDR
// if value < 0 then
47695: LD_VAR 0 1
47699: PUSH
47700: LD_INT 0
47702: LESS
47703: IFFALSE 47720
// result := value * - 1 ;
47705: LD_ADDR_VAR 0 2
47709: PUSH
47710: LD_VAR 0 1
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: MUL
47719: ST_TO_ADDR
// end ;
47720: LD_VAR 0 2
47724: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47725: LD_INT 0
47727: PPUSH
47728: PPUSH
47729: PPUSH
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
47734: PPUSH
// if not unit or not building then
47735: LD_VAR 0 1
47739: NOT
47740: PUSH
47741: LD_VAR 0 2
47745: NOT
47746: OR
47747: IFFALSE 47751
// exit ;
47749: GO 47977
// x := GetX ( building ) ;
47751: LD_ADDR_VAR 0 4
47755: PUSH
47756: LD_VAR 0 2
47760: PPUSH
47761: CALL_OW 250
47765: ST_TO_ADDR
// y := GetY ( building ) ;
47766: LD_ADDR_VAR 0 6
47770: PUSH
47771: LD_VAR 0 2
47775: PPUSH
47776: CALL_OW 251
47780: ST_TO_ADDR
// d := GetDir ( building ) ;
47781: LD_ADDR_VAR 0 8
47785: PUSH
47786: LD_VAR 0 2
47790: PPUSH
47791: CALL_OW 254
47795: ST_TO_ADDR
// r := 4 ;
47796: LD_ADDR_VAR 0 9
47800: PUSH
47801: LD_INT 4
47803: ST_TO_ADDR
// for i := 1 to 5 do
47804: LD_ADDR_VAR 0 10
47808: PUSH
47809: DOUBLE
47810: LD_INT 1
47812: DEC
47813: ST_TO_ADDR
47814: LD_INT 5
47816: PUSH
47817: FOR_TO
47818: IFFALSE 47975
// begin _x := ShiftX ( x , d , r + i ) ;
47820: LD_ADDR_VAR 0 5
47824: PUSH
47825: LD_VAR 0 4
47829: PPUSH
47830: LD_VAR 0 8
47834: PPUSH
47835: LD_VAR 0 9
47839: PUSH
47840: LD_VAR 0 10
47844: PLUS
47845: PPUSH
47846: CALL_OW 272
47850: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47851: LD_ADDR_VAR 0 7
47855: PUSH
47856: LD_VAR 0 6
47860: PPUSH
47861: LD_VAR 0 8
47865: PPUSH
47866: LD_VAR 0 9
47870: PUSH
47871: LD_VAR 0 10
47875: PLUS
47876: PPUSH
47877: CALL_OW 273
47881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47882: LD_VAR 0 5
47886: PPUSH
47887: LD_VAR 0 7
47891: PPUSH
47892: CALL_OW 488
47896: PUSH
47897: LD_VAR 0 5
47901: PPUSH
47902: LD_VAR 0 7
47906: PPUSH
47907: CALL_OW 428
47911: PPUSH
47912: CALL_OW 247
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: IN
47927: NOT
47928: AND
47929: IFFALSE 47973
// begin ComMoveXY ( unit , _x , _y ) ;
47931: LD_VAR 0 1
47935: PPUSH
47936: LD_VAR 0 5
47940: PPUSH
47941: LD_VAR 0 7
47945: PPUSH
47946: CALL_OW 111
// result := [ _x , _y ] ;
47950: LD_ADDR_VAR 0 3
47954: PUSH
47955: LD_VAR 0 5
47959: PUSH
47960: LD_VAR 0 7
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// exit ;
47969: POP
47970: POP
47971: GO 47977
// end ; end ;
47973: GO 47817
47975: POP
47976: POP
// end ;
47977: LD_VAR 0 3
47981: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47982: LD_INT 0
47984: PPUSH
47985: PPUSH
47986: PPUSH
// result := 0 ;
47987: LD_ADDR_VAR 0 3
47991: PUSH
47992: LD_INT 0
47994: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47995: LD_VAR 0 1
47999: PUSH
48000: LD_INT 0
48002: LESS
48003: PUSH
48004: LD_VAR 0 1
48008: PUSH
48009: LD_INT 8
48011: GREATER
48012: OR
48013: PUSH
48014: LD_VAR 0 2
48018: PUSH
48019: LD_INT 0
48021: LESS
48022: OR
48023: PUSH
48024: LD_VAR 0 2
48028: PUSH
48029: LD_INT 8
48031: GREATER
48032: OR
48033: IFFALSE 48037
// exit ;
48035: GO 48112
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48037: LD_ADDR_VAR 0 4
48041: PUSH
48042: LD_INT 22
48044: PUSH
48045: LD_VAR 0 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PPUSH
48054: CALL_OW 69
48058: PUSH
48059: FOR_IN
48060: IFFALSE 48110
// begin un := UnitShoot ( i ) ;
48062: LD_ADDR_VAR 0 5
48066: PUSH
48067: LD_VAR 0 4
48071: PPUSH
48072: CALL_OW 504
48076: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48077: LD_VAR 0 5
48081: PPUSH
48082: CALL_OW 255
48086: PUSH
48087: LD_VAR 0 1
48091: EQUAL
48092: IFFALSE 48108
// begin result := un ;
48094: LD_ADDR_VAR 0 3
48098: PUSH
48099: LD_VAR 0 5
48103: ST_TO_ADDR
// exit ;
48104: POP
48105: POP
48106: GO 48112
// end ; end ;
48108: GO 48059
48110: POP
48111: POP
// end ;
48112: LD_VAR 0 3
48116: RET
// export function GetCargoBay ( units ) ; begin
48117: LD_INT 0
48119: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48120: LD_ADDR_VAR 0 2
48124: PUSH
48125: LD_VAR 0 1
48129: PPUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 34
48135: PUSH
48136: LD_INT 12
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 34
48145: PUSH
48146: LD_INT 51
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 34
48155: PUSH
48156: LD_INT 32
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 34
48165: PUSH
48166: LD_INT 89
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: PPUSH
48180: CALL_OW 72
48184: ST_TO_ADDR
// end ;
48185: LD_VAR 0 2
48189: RET
// export function Negate ( value ) ; begin
48190: LD_INT 0
48192: PPUSH
// result := not value ;
48193: LD_ADDR_VAR 0 2
48197: PUSH
48198: LD_VAR 0 1
48202: NOT
48203: ST_TO_ADDR
// end ;
48204: LD_VAR 0 2
48208: RET
// export function Inc ( value ) ; begin
48209: LD_INT 0
48211: PPUSH
// result := value + 1 ;
48212: LD_ADDR_VAR 0 2
48216: PUSH
48217: LD_VAR 0 1
48221: PUSH
48222: LD_INT 1
48224: PLUS
48225: ST_TO_ADDR
// end ;
48226: LD_VAR 0 2
48230: RET
// export function Dec ( value ) ; begin
48231: LD_INT 0
48233: PPUSH
// result := value - 1 ;
48234: LD_ADDR_VAR 0 2
48238: PUSH
48239: LD_VAR 0 1
48243: PUSH
48244: LD_INT 1
48246: MINUS
48247: ST_TO_ADDR
// end ;
48248: LD_VAR 0 2
48252: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48253: LD_INT 0
48255: PPUSH
48256: PPUSH
48257: PPUSH
48258: PPUSH
48259: PPUSH
48260: PPUSH
48261: PPUSH
48262: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48263: LD_VAR 0 1
48267: PPUSH
48268: LD_VAR 0 2
48272: PPUSH
48273: CALL_OW 488
48277: NOT
48278: PUSH
48279: LD_VAR 0 3
48283: PPUSH
48284: LD_VAR 0 4
48288: PPUSH
48289: CALL_OW 488
48293: NOT
48294: OR
48295: IFFALSE 48308
// begin result := - 1 ;
48297: LD_ADDR_VAR 0 5
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: ST_TO_ADDR
// exit ;
48306: GO 48543
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48308: LD_ADDR_VAR 0 12
48312: PUSH
48313: LD_VAR 0 1
48317: PPUSH
48318: LD_VAR 0 2
48322: PPUSH
48323: LD_VAR 0 3
48327: PPUSH
48328: LD_VAR 0 4
48332: PPUSH
48333: CALL 47393 0 4
48337: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48338: LD_ADDR_VAR 0 11
48342: PUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: LD_VAR 0 2
48352: PPUSH
48353: LD_VAR 0 12
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: PPUSH
48362: LD_VAR 0 12
48366: PUSH
48367: LD_INT 2
48369: ARRAY
48370: PPUSH
48371: CALL_OW 298
48375: ST_TO_ADDR
// distance := 9999 ;
48376: LD_ADDR_VAR 0 10
48380: PUSH
48381: LD_INT 9999
48383: ST_TO_ADDR
// for i := 0 to 5 do
48384: LD_ADDR_VAR 0 6
48388: PUSH
48389: DOUBLE
48390: LD_INT 0
48392: DEC
48393: ST_TO_ADDR
48394: LD_INT 5
48396: PUSH
48397: FOR_TO
48398: IFFALSE 48541
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48400: LD_ADDR_VAR 0 7
48404: PUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: LD_VAR 0 6
48414: PPUSH
48415: LD_VAR 0 11
48419: PPUSH
48420: CALL_OW 272
48424: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48425: LD_ADDR_VAR 0 8
48429: PUSH
48430: LD_VAR 0 2
48434: PPUSH
48435: LD_VAR 0 6
48439: PPUSH
48440: LD_VAR 0 11
48444: PPUSH
48445: CALL_OW 273
48449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48450: LD_VAR 0 7
48454: PPUSH
48455: LD_VAR 0 8
48459: PPUSH
48460: CALL_OW 488
48464: NOT
48465: IFFALSE 48469
// continue ;
48467: GO 48397
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48469: LD_ADDR_VAR 0 9
48473: PUSH
48474: LD_VAR 0 12
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: PPUSH
48483: LD_VAR 0 12
48487: PUSH
48488: LD_INT 2
48490: ARRAY
48491: PPUSH
48492: LD_VAR 0 7
48496: PPUSH
48497: LD_VAR 0 8
48501: PPUSH
48502: CALL_OW 298
48506: ST_TO_ADDR
// if tmp < distance then
48507: LD_VAR 0 9
48511: PUSH
48512: LD_VAR 0 10
48516: LESS
48517: IFFALSE 48539
// begin result := i ;
48519: LD_ADDR_VAR 0 5
48523: PUSH
48524: LD_VAR 0 6
48528: ST_TO_ADDR
// distance := tmp ;
48529: LD_ADDR_VAR 0 10
48533: PUSH
48534: LD_VAR 0 9
48538: ST_TO_ADDR
// end ; end ;
48539: GO 48397
48541: POP
48542: POP
// end ;
48543: LD_VAR 0 5
48547: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48548: LD_INT 0
48550: PPUSH
48551: PPUSH
// if not driver or not IsInUnit ( driver ) then
48552: LD_VAR 0 1
48556: NOT
48557: PUSH
48558: LD_VAR 0 1
48562: PPUSH
48563: CALL_OW 310
48567: NOT
48568: OR
48569: IFFALSE 48573
// exit ;
48571: GO 48663
// vehicle := IsInUnit ( driver ) ;
48573: LD_ADDR_VAR 0 3
48577: PUSH
48578: LD_VAR 0 1
48582: PPUSH
48583: CALL_OW 310
48587: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48588: LD_VAR 0 1
48592: PPUSH
48593: LD_STRING \
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: PUSH
48623: LD_STRING E
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_VAR 0 3
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PPUSH
48659: CALL_OW 446
// end ;
48663: LD_VAR 0 2
48667: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48668: LD_INT 0
48670: PPUSH
48671: PPUSH
// if not driver or not IsInUnit ( driver ) then
48672: LD_VAR 0 1
48676: NOT
48677: PUSH
48678: LD_VAR 0 1
48682: PPUSH
48683: CALL_OW 310
48687: NOT
48688: OR
48689: IFFALSE 48693
// exit ;
48691: GO 48783
// vehicle := IsInUnit ( driver ) ;
48693: LD_ADDR_VAR 0 3
48697: PUSH
48698: LD_VAR 0 1
48702: PPUSH
48703: CALL_OW 310
48707: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48708: LD_VAR 0 1
48712: PPUSH
48713: LD_STRING \
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: PUSH
48743: LD_STRING E
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_VAR 0 3
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PPUSH
48779: CALL_OW 447
// end ;
48783: LD_VAR 0 2
48787: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48788: LD_INT 0
48790: PPUSH
48791: PPUSH
48792: PPUSH
// tmp := [ ] ;
48793: LD_ADDR_VAR 0 5
48797: PUSH
48798: EMPTY
48799: ST_TO_ADDR
// for i in units do
48800: LD_ADDR_VAR 0 4
48804: PUSH
48805: LD_VAR 0 1
48809: PUSH
48810: FOR_IN
48811: IFFALSE 48849
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48813: LD_ADDR_VAR 0 5
48817: PUSH
48818: LD_VAR 0 5
48822: PPUSH
48823: LD_VAR 0 5
48827: PUSH
48828: LD_INT 1
48830: PLUS
48831: PPUSH
48832: LD_VAR 0 4
48836: PPUSH
48837: CALL_OW 256
48841: PPUSH
48842: CALL_OW 2
48846: ST_TO_ADDR
48847: GO 48810
48849: POP
48850: POP
// if not tmp then
48851: LD_VAR 0 5
48855: NOT
48856: IFFALSE 48860
// exit ;
48858: GO 48908
// if asc then
48860: LD_VAR 0 2
48864: IFFALSE 48888
// result := SortListByListAsc ( units , tmp ) else
48866: LD_ADDR_VAR 0 3
48870: PUSH
48871: LD_VAR 0 1
48875: PPUSH
48876: LD_VAR 0 5
48880: PPUSH
48881: CALL_OW 76
48885: ST_TO_ADDR
48886: GO 48908
// result := SortListByListDesc ( units , tmp ) ;
48888: LD_ADDR_VAR 0 3
48892: PUSH
48893: LD_VAR 0 1
48897: PPUSH
48898: LD_VAR 0 5
48902: PPUSH
48903: CALL_OW 77
48907: ST_TO_ADDR
// end ;
48908: LD_VAR 0 3
48912: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48913: LD_INT 0
48915: PPUSH
48916: PPUSH
// task := GetTaskList ( mech ) ;
48917: LD_ADDR_VAR 0 4
48921: PUSH
48922: LD_VAR 0 1
48926: PPUSH
48927: CALL_OW 437
48931: ST_TO_ADDR
// if not task then
48932: LD_VAR 0 4
48936: NOT
48937: IFFALSE 48941
// exit ;
48939: GO 48983
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48941: LD_ADDR_VAR 0 3
48945: PUSH
48946: LD_VAR 0 4
48950: PUSH
48951: LD_INT 1
48953: ARRAY
48954: PUSH
48955: LD_INT 1
48957: ARRAY
48958: PUSH
48959: LD_STRING r
48961: EQUAL
48962: PUSH
48963: LD_VAR 0 4
48967: PUSH
48968: LD_INT 1
48970: ARRAY
48971: PUSH
48972: LD_INT 4
48974: ARRAY
48975: PUSH
48976: LD_VAR 0 2
48980: EQUAL
48981: AND
48982: ST_TO_ADDR
// end ;
48983: LD_VAR 0 3
48987: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48988: LD_INT 0
48990: PPUSH
// SetDir ( unit , d ) ;
48991: LD_VAR 0 1
48995: PPUSH
48996: LD_VAR 0 4
49000: PPUSH
49001: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49005: LD_VAR 0 1
49009: PPUSH
49010: LD_VAR 0 2
49014: PPUSH
49015: LD_VAR 0 3
49019: PPUSH
49020: LD_VAR 0 5
49024: PPUSH
49025: CALL_OW 48
// end ;
49029: LD_VAR 0 6
49033: RET
// export function ToNaturalNumber ( number ) ; begin
49034: LD_INT 0
49036: PPUSH
// result := number div 1 ;
49037: LD_ADDR_VAR 0 2
49041: PUSH
49042: LD_VAR 0 1
49046: PUSH
49047: LD_INT 1
49049: DIV
49050: ST_TO_ADDR
// if number < 0 then
49051: LD_VAR 0 1
49055: PUSH
49056: LD_INT 0
49058: LESS
49059: IFFALSE 49069
// result := 0 ;
49061: LD_ADDR_VAR 0 2
49065: PUSH
49066: LD_INT 0
49068: ST_TO_ADDR
// end ;
49069: LD_VAR 0 2
49073: RET
// export function SortByClass ( units , class ) ; var un ; begin
49074: LD_INT 0
49076: PPUSH
49077: PPUSH
// if not units or not class then
49078: LD_VAR 0 1
49082: NOT
49083: PUSH
49084: LD_VAR 0 2
49088: NOT
49089: OR
49090: IFFALSE 49094
// exit ;
49092: GO 49189
// result := [ ] ;
49094: LD_ADDR_VAR 0 3
49098: PUSH
49099: EMPTY
49100: ST_TO_ADDR
// for un in units do
49101: LD_ADDR_VAR 0 4
49105: PUSH
49106: LD_VAR 0 1
49110: PUSH
49111: FOR_IN
49112: IFFALSE 49187
// if GetClass ( un ) = class then
49114: LD_VAR 0 4
49118: PPUSH
49119: CALL_OW 257
49123: PUSH
49124: LD_VAR 0 2
49128: EQUAL
49129: IFFALSE 49156
// result := Insert ( result , 1 , un ) else
49131: LD_ADDR_VAR 0 3
49135: PUSH
49136: LD_VAR 0 3
49140: PPUSH
49141: LD_INT 1
49143: PPUSH
49144: LD_VAR 0 4
49148: PPUSH
49149: CALL_OW 2
49153: ST_TO_ADDR
49154: GO 49185
// result := Replace ( result , result + 1 , un ) ;
49156: LD_ADDR_VAR 0 3
49160: PUSH
49161: LD_VAR 0 3
49165: PPUSH
49166: LD_VAR 0 3
49170: PUSH
49171: LD_INT 1
49173: PLUS
49174: PPUSH
49175: LD_VAR 0 4
49179: PPUSH
49180: CALL_OW 1
49184: ST_TO_ADDR
49185: GO 49111
49187: POP
49188: POP
// end ;
49189: LD_VAR 0 3
49193: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49194: LD_INT 0
49196: PPUSH
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
// result := [ ] ;
49203: LD_ADDR_VAR 0 4
49207: PUSH
49208: EMPTY
49209: ST_TO_ADDR
// if x - r < 0 then
49210: LD_VAR 0 1
49214: PUSH
49215: LD_VAR 0 3
49219: MINUS
49220: PUSH
49221: LD_INT 0
49223: LESS
49224: IFFALSE 49236
// min_x := 0 else
49226: LD_ADDR_VAR 0 8
49230: PUSH
49231: LD_INT 0
49233: ST_TO_ADDR
49234: GO 49252
// min_x := x - r ;
49236: LD_ADDR_VAR 0 8
49240: PUSH
49241: LD_VAR 0 1
49245: PUSH
49246: LD_VAR 0 3
49250: MINUS
49251: ST_TO_ADDR
// if y - r < 0 then
49252: LD_VAR 0 2
49256: PUSH
49257: LD_VAR 0 3
49261: MINUS
49262: PUSH
49263: LD_INT 0
49265: LESS
49266: IFFALSE 49278
// min_y := 0 else
49268: LD_ADDR_VAR 0 7
49272: PUSH
49273: LD_INT 0
49275: ST_TO_ADDR
49276: GO 49294
// min_y := y - r ;
49278: LD_ADDR_VAR 0 7
49282: PUSH
49283: LD_VAR 0 2
49287: PUSH
49288: LD_VAR 0 3
49292: MINUS
49293: ST_TO_ADDR
// max_x := x + r ;
49294: LD_ADDR_VAR 0 9
49298: PUSH
49299: LD_VAR 0 1
49303: PUSH
49304: LD_VAR 0 3
49308: PLUS
49309: ST_TO_ADDR
// max_y := y + r ;
49310: LD_ADDR_VAR 0 10
49314: PUSH
49315: LD_VAR 0 2
49319: PUSH
49320: LD_VAR 0 3
49324: PLUS
49325: ST_TO_ADDR
// for _x = min_x to max_x do
49326: LD_ADDR_VAR 0 5
49330: PUSH
49331: DOUBLE
49332: LD_VAR 0 8
49336: DEC
49337: ST_TO_ADDR
49338: LD_VAR 0 9
49342: PUSH
49343: FOR_TO
49344: IFFALSE 49445
// for _y = min_y to max_y do
49346: LD_ADDR_VAR 0 6
49350: PUSH
49351: DOUBLE
49352: LD_VAR 0 7
49356: DEC
49357: ST_TO_ADDR
49358: LD_VAR 0 10
49362: PUSH
49363: FOR_TO
49364: IFFALSE 49441
// begin if not ValidHex ( _x , _y ) then
49366: LD_VAR 0 5
49370: PPUSH
49371: LD_VAR 0 6
49375: PPUSH
49376: CALL_OW 488
49380: NOT
49381: IFFALSE 49385
// continue ;
49383: GO 49363
// if GetResourceTypeXY ( _x , _y ) then
49385: LD_VAR 0 5
49389: PPUSH
49390: LD_VAR 0 6
49394: PPUSH
49395: CALL_OW 283
49399: IFFALSE 49439
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49401: LD_ADDR_VAR 0 4
49405: PUSH
49406: LD_VAR 0 4
49410: PPUSH
49411: LD_VAR 0 4
49415: PUSH
49416: LD_INT 1
49418: PLUS
49419: PPUSH
49420: LD_VAR 0 5
49424: PUSH
49425: LD_VAR 0 6
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PPUSH
49434: CALL_OW 1
49438: ST_TO_ADDR
// end ;
49439: GO 49363
49441: POP
49442: POP
49443: GO 49343
49445: POP
49446: POP
// end ;
49447: LD_VAR 0 4
49451: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49452: LD_INT 0
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
// if not units then
49462: LD_VAR 0 1
49466: NOT
49467: IFFALSE 49471
// exit ;
49469: GO 49999
// result := UnitFilter ( units , [ f_ok ] ) ;
49471: LD_ADDR_VAR 0 3
49475: PUSH
49476: LD_VAR 0 1
49480: PPUSH
49481: LD_INT 50
49483: PUSH
49484: EMPTY
49485: LIST
49486: PPUSH
49487: CALL_OW 72
49491: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49492: LD_ADDR_VAR 0 8
49496: PUSH
49497: LD_VAR 0 1
49501: PUSH
49502: LD_INT 1
49504: ARRAY
49505: PPUSH
49506: CALL_OW 255
49510: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49511: LD_ADDR_VAR 0 10
49515: PUSH
49516: LD_INT 29
49518: PUSH
49519: LD_INT 91
49521: PUSH
49522: LD_INT 49
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: ST_TO_ADDR
// if not result then
49530: LD_VAR 0 3
49534: NOT
49535: IFFALSE 49539
// exit ;
49537: GO 49999
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49539: LD_ADDR_VAR 0 5
49543: PUSH
49544: LD_INT 81
49546: PUSH
49547: LD_VAR 0 8
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PPUSH
49556: CALL_OW 69
49560: ST_TO_ADDR
// for i in result do
49561: LD_ADDR_VAR 0 4
49565: PUSH
49566: LD_VAR 0 3
49570: PUSH
49571: FOR_IN
49572: IFFALSE 49997
// begin tag := GetTag ( i ) + 1 ;
49574: LD_ADDR_VAR 0 9
49578: PUSH
49579: LD_VAR 0 4
49583: PPUSH
49584: CALL_OW 110
49588: PUSH
49589: LD_INT 1
49591: PLUS
49592: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49593: LD_ADDR_VAR 0 7
49597: PUSH
49598: LD_VAR 0 4
49602: PPUSH
49603: CALL_OW 250
49607: PPUSH
49608: LD_VAR 0 4
49612: PPUSH
49613: CALL_OW 251
49617: PPUSH
49618: LD_INT 4
49620: PPUSH
49621: CALL 49194 0 3
49625: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49626: LD_VAR 0 4
49630: PPUSH
49631: CALL_OW 247
49635: PUSH
49636: LD_INT 2
49638: EQUAL
49639: PUSH
49640: LD_VAR 0 7
49644: PUSH
49645: LD_INT 2
49647: GREATER
49648: AND
49649: PUSH
49650: LD_VAR 0 4
49654: PPUSH
49655: CALL_OW 264
49659: PUSH
49660: LD_VAR 0 10
49664: IN
49665: NOT
49666: AND
49667: IFFALSE 49706
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49669: LD_VAR 0 4
49673: PPUSH
49674: LD_VAR 0 7
49678: PUSH
49679: LD_INT 1
49681: ARRAY
49682: PUSH
49683: LD_INT 1
49685: ARRAY
49686: PPUSH
49687: LD_VAR 0 7
49691: PUSH
49692: LD_INT 1
49694: ARRAY
49695: PUSH
49696: LD_INT 2
49698: ARRAY
49699: PPUSH
49700: CALL_OW 116
49704: GO 49995
// if path > tag then
49706: LD_VAR 0 2
49710: PUSH
49711: LD_VAR 0 9
49715: GREATER
49716: IFFALSE 49924
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49718: LD_ADDR_VAR 0 6
49722: PUSH
49723: LD_VAR 0 5
49727: PPUSH
49728: LD_INT 91
49730: PUSH
49731: LD_VAR 0 4
49735: PUSH
49736: LD_INT 8
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: PPUSH
49744: CALL_OW 72
49748: ST_TO_ADDR
// if nearEnemy then
49749: LD_VAR 0 6
49753: IFFALSE 49822
// begin if GetWeapon ( i ) = ru_time_lapser then
49755: LD_VAR 0 4
49759: PPUSH
49760: CALL_OW 264
49764: PUSH
49765: LD_INT 49
49767: EQUAL
49768: IFFALSE 49796
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49770: LD_VAR 0 4
49774: PPUSH
49775: LD_VAR 0 6
49779: PPUSH
49780: LD_VAR 0 4
49784: PPUSH
49785: CALL_OW 74
49789: PPUSH
49790: CALL_OW 112
49794: GO 49820
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49796: LD_VAR 0 4
49800: PPUSH
49801: LD_VAR 0 6
49805: PPUSH
49806: LD_VAR 0 4
49810: PPUSH
49811: CALL_OW 74
49815: PPUSH
49816: CALL 51070 0 2
// end else
49820: GO 49922
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49822: LD_VAR 0 4
49826: PPUSH
49827: LD_VAR 0 2
49831: PUSH
49832: LD_VAR 0 9
49836: ARRAY
49837: PUSH
49838: LD_INT 1
49840: ARRAY
49841: PPUSH
49842: LD_VAR 0 2
49846: PUSH
49847: LD_VAR 0 9
49851: ARRAY
49852: PUSH
49853: LD_INT 2
49855: ARRAY
49856: PPUSH
49857: CALL_OW 297
49861: PUSH
49862: LD_INT 6
49864: GREATER
49865: IFFALSE 49908
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49867: LD_VAR 0 4
49871: PPUSH
49872: LD_VAR 0 2
49876: PUSH
49877: LD_VAR 0 9
49881: ARRAY
49882: PUSH
49883: LD_INT 1
49885: ARRAY
49886: PPUSH
49887: LD_VAR 0 2
49891: PUSH
49892: LD_VAR 0 9
49896: ARRAY
49897: PUSH
49898: LD_INT 2
49900: ARRAY
49901: PPUSH
49902: CALL_OW 114
49906: GO 49922
// SetTag ( i , tag ) ;
49908: LD_VAR 0 4
49912: PPUSH
49913: LD_VAR 0 9
49917: PPUSH
49918: CALL_OW 109
// end else
49922: GO 49995
// if enemy then
49924: LD_VAR 0 5
49928: IFFALSE 49995
// begin if GetWeapon ( i ) = ru_time_lapser then
49930: LD_VAR 0 4
49934: PPUSH
49935: CALL_OW 264
49939: PUSH
49940: LD_INT 49
49942: EQUAL
49943: IFFALSE 49971
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49945: LD_VAR 0 4
49949: PPUSH
49950: LD_VAR 0 5
49954: PPUSH
49955: LD_VAR 0 4
49959: PPUSH
49960: CALL_OW 74
49964: PPUSH
49965: CALL_OW 112
49969: GO 49995
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49971: LD_VAR 0 4
49975: PPUSH
49976: LD_VAR 0 5
49980: PPUSH
49981: LD_VAR 0 4
49985: PPUSH
49986: CALL_OW 74
49990: PPUSH
49991: CALL 51070 0 2
// end ; end ;
49995: GO 49571
49997: POP
49998: POP
// end ;
49999: LD_VAR 0 3
50003: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50004: LD_INT 0
50006: PPUSH
50007: PPUSH
50008: PPUSH
// if not unit or IsInUnit ( unit ) then
50009: LD_VAR 0 1
50013: NOT
50014: PUSH
50015: LD_VAR 0 1
50019: PPUSH
50020: CALL_OW 310
50024: OR
50025: IFFALSE 50029
// exit ;
50027: GO 50120
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50029: LD_ADDR_VAR 0 4
50033: PUSH
50034: LD_VAR 0 1
50038: PPUSH
50039: CALL_OW 250
50043: PPUSH
50044: LD_VAR 0 2
50048: PPUSH
50049: LD_INT 1
50051: PPUSH
50052: CALL_OW 272
50056: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50057: LD_ADDR_VAR 0 5
50061: PUSH
50062: LD_VAR 0 1
50066: PPUSH
50067: CALL_OW 251
50071: PPUSH
50072: LD_VAR 0 2
50076: PPUSH
50077: LD_INT 1
50079: PPUSH
50080: CALL_OW 273
50084: ST_TO_ADDR
// if ValidHex ( x , y ) then
50085: LD_VAR 0 4
50089: PPUSH
50090: LD_VAR 0 5
50094: PPUSH
50095: CALL_OW 488
50099: IFFALSE 50120
// ComTurnXY ( unit , x , y ) ;
50101: LD_VAR 0 1
50105: PPUSH
50106: LD_VAR 0 4
50110: PPUSH
50111: LD_VAR 0 5
50115: PPUSH
50116: CALL_OW 118
// end ;
50120: LD_VAR 0 3
50124: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50125: LD_INT 0
50127: PPUSH
50128: PPUSH
// result := false ;
50129: LD_ADDR_VAR 0 3
50133: PUSH
50134: LD_INT 0
50136: ST_TO_ADDR
// if not units then
50137: LD_VAR 0 2
50141: NOT
50142: IFFALSE 50146
// exit ;
50144: GO 50191
// for i in units do
50146: LD_ADDR_VAR 0 4
50150: PUSH
50151: LD_VAR 0 2
50155: PUSH
50156: FOR_IN
50157: IFFALSE 50189
// if See ( side , i ) then
50159: LD_VAR 0 1
50163: PPUSH
50164: LD_VAR 0 4
50168: PPUSH
50169: CALL_OW 292
50173: IFFALSE 50187
// begin result := true ;
50175: LD_ADDR_VAR 0 3
50179: PUSH
50180: LD_INT 1
50182: ST_TO_ADDR
// exit ;
50183: POP
50184: POP
50185: GO 50191
// end ;
50187: GO 50156
50189: POP
50190: POP
// end ;
50191: LD_VAR 0 3
50195: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50196: LD_INT 0
50198: PPUSH
50199: PPUSH
50200: PPUSH
50201: PPUSH
// if not unit or not points then
50202: LD_VAR 0 1
50206: NOT
50207: PUSH
50208: LD_VAR 0 2
50212: NOT
50213: OR
50214: IFFALSE 50218
// exit ;
50216: GO 50308
// dist := 99999 ;
50218: LD_ADDR_VAR 0 5
50222: PUSH
50223: LD_INT 99999
50225: ST_TO_ADDR
// for i in points do
50226: LD_ADDR_VAR 0 4
50230: PUSH
50231: LD_VAR 0 2
50235: PUSH
50236: FOR_IN
50237: IFFALSE 50306
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50239: LD_ADDR_VAR 0 6
50243: PUSH
50244: LD_VAR 0 1
50248: PPUSH
50249: LD_VAR 0 4
50253: PUSH
50254: LD_INT 1
50256: ARRAY
50257: PPUSH
50258: LD_VAR 0 4
50262: PUSH
50263: LD_INT 2
50265: ARRAY
50266: PPUSH
50267: CALL_OW 297
50271: ST_TO_ADDR
// if tmpDist < dist then
50272: LD_VAR 0 6
50276: PUSH
50277: LD_VAR 0 5
50281: LESS
50282: IFFALSE 50304
// begin result := i ;
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_VAR 0 4
50293: ST_TO_ADDR
// dist := tmpDist ;
50294: LD_ADDR_VAR 0 5
50298: PUSH
50299: LD_VAR 0 6
50303: ST_TO_ADDR
// end ; end ;
50304: GO 50236
50306: POP
50307: POP
// end ;
50308: LD_VAR 0 3
50312: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50313: LD_INT 0
50315: PPUSH
// uc_side := side ;
50316: LD_ADDR_OWVAR 20
50320: PUSH
50321: LD_VAR 0 1
50325: ST_TO_ADDR
// uc_nation := 3 ;
50326: LD_ADDR_OWVAR 21
50330: PUSH
50331: LD_INT 3
50333: ST_TO_ADDR
// vc_chassis := 25 ;
50334: LD_ADDR_OWVAR 37
50338: PUSH
50339: LD_INT 25
50341: ST_TO_ADDR
// vc_engine := engine_siberite ;
50342: LD_ADDR_OWVAR 39
50346: PUSH
50347: LD_INT 3
50349: ST_TO_ADDR
// vc_control := control_computer ;
50350: LD_ADDR_OWVAR 38
50354: PUSH
50355: LD_INT 3
50357: ST_TO_ADDR
// vc_weapon := 59 ;
50358: LD_ADDR_OWVAR 40
50362: PUSH
50363: LD_INT 59
50365: ST_TO_ADDR
// result := CreateVehicle ;
50366: LD_ADDR_VAR 0 5
50370: PUSH
50371: CALL_OW 45
50375: ST_TO_ADDR
// SetDir ( result , d ) ;
50376: LD_VAR 0 5
50380: PPUSH
50381: LD_VAR 0 4
50385: PPUSH
50386: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50390: LD_VAR 0 5
50394: PPUSH
50395: LD_VAR 0 2
50399: PPUSH
50400: LD_VAR 0 3
50404: PPUSH
50405: LD_INT 0
50407: PPUSH
50408: CALL_OW 48
// end ;
50412: LD_VAR 0 5
50416: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50417: LD_INT 0
50419: PPUSH
50420: PPUSH
50421: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50422: LD_ADDR_VAR 0 2
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50445: LD_VAR 0 1
50449: NOT
50450: PUSH
50451: LD_VAR 0 1
50455: PPUSH
50456: CALL_OW 264
50460: PUSH
50461: LD_INT 12
50463: PUSH
50464: LD_INT 51
50466: PUSH
50467: LD_INT 32
50469: PUSH
50470: LD_INT 89
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: IN
50479: NOT
50480: OR
50481: IFFALSE 50485
// exit ;
50483: GO 50583
// for i := 1 to 3 do
50485: LD_ADDR_VAR 0 3
50489: PUSH
50490: DOUBLE
50491: LD_INT 1
50493: DEC
50494: ST_TO_ADDR
50495: LD_INT 3
50497: PUSH
50498: FOR_TO
50499: IFFALSE 50581
// begin tmp := GetCargo ( cargo , i ) ;
50501: LD_ADDR_VAR 0 4
50505: PUSH
50506: LD_VAR 0 1
50510: PPUSH
50511: LD_VAR 0 3
50515: PPUSH
50516: CALL_OW 289
50520: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50521: LD_ADDR_VAR 0 2
50525: PUSH
50526: LD_VAR 0 2
50530: PPUSH
50531: LD_VAR 0 3
50535: PPUSH
50536: LD_VAR 0 4
50540: PPUSH
50541: CALL_OW 1
50545: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50546: LD_ADDR_VAR 0 2
50550: PUSH
50551: LD_VAR 0 2
50555: PPUSH
50556: LD_INT 4
50558: PPUSH
50559: LD_VAR 0 2
50563: PUSH
50564: LD_INT 4
50566: ARRAY
50567: PUSH
50568: LD_VAR 0 4
50572: PLUS
50573: PPUSH
50574: CALL_OW 1
50578: ST_TO_ADDR
// end ;
50579: GO 50498
50581: POP
50582: POP
// end ;
50583: LD_VAR 0 2
50587: RET
// export function Length ( array ) ; begin
50588: LD_INT 0
50590: PPUSH
// result := array + 0 ;
50591: LD_ADDR_VAR 0 2
50595: PUSH
50596: LD_VAR 0 1
50600: PUSH
50601: LD_INT 0
50603: PLUS
50604: ST_TO_ADDR
// end ;
50605: LD_VAR 0 2
50609: RET
// export function PrepareArray ( array ) ; begin
50610: LD_INT 0
50612: PPUSH
// result := array diff 0 ;
50613: LD_ADDR_VAR 0 2
50617: PUSH
50618: LD_VAR 0 1
50622: PUSH
50623: LD_INT 0
50625: DIFF
50626: ST_TO_ADDR
// if not result [ 1 ] then
50627: LD_VAR 0 2
50631: PUSH
50632: LD_INT 1
50634: ARRAY
50635: NOT
50636: IFFALSE 50656
// result := Delete ( result , 1 ) ;
50638: LD_ADDR_VAR 0 2
50642: PUSH
50643: LD_VAR 0 2
50647: PPUSH
50648: LD_INT 1
50650: PPUSH
50651: CALL_OW 3
50655: ST_TO_ADDR
// end ;
50656: LD_VAR 0 2
50660: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50661: LD_INT 0
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
// sibRocketRange := 25 ;
50667: LD_ADDR_VAR 0 6
50671: PUSH
50672: LD_INT 25
50674: ST_TO_ADDR
// result := false ;
50675: LD_ADDR_VAR 0 4
50679: PUSH
50680: LD_INT 0
50682: ST_TO_ADDR
// for i := 0 to 5 do
50683: LD_ADDR_VAR 0 5
50687: PUSH
50688: DOUBLE
50689: LD_INT 0
50691: DEC
50692: ST_TO_ADDR
50693: LD_INT 5
50695: PUSH
50696: FOR_TO
50697: IFFALSE 50764
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50699: LD_VAR 0 1
50703: PPUSH
50704: LD_VAR 0 5
50708: PPUSH
50709: LD_VAR 0 6
50713: PPUSH
50714: CALL_OW 272
50718: PPUSH
50719: LD_VAR 0 2
50723: PPUSH
50724: LD_VAR 0 5
50728: PPUSH
50729: LD_VAR 0 6
50733: PPUSH
50734: CALL_OW 273
50738: PPUSH
50739: LD_VAR 0 3
50743: PPUSH
50744: CALL_OW 309
50748: IFFALSE 50762
// begin result := true ;
50750: LD_ADDR_VAR 0 4
50754: PUSH
50755: LD_INT 1
50757: ST_TO_ADDR
// exit ;
50758: POP
50759: POP
50760: GO 50766
// end ;
50762: GO 50696
50764: POP
50765: POP
// end ;
50766: LD_VAR 0 4
50770: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50771: LD_INT 0
50773: PPUSH
50774: PPUSH
50775: PPUSH
// if btype = b_depot then
50776: LD_VAR 0 2
50780: PUSH
50781: LD_INT 0
50783: EQUAL
50784: IFFALSE 50796
// begin result := true ;
50786: LD_ADDR_VAR 0 3
50790: PUSH
50791: LD_INT 1
50793: ST_TO_ADDR
// exit ;
50794: GO 50912
// end ; pom := GetBase ( depot ) ;
50796: LD_ADDR_VAR 0 4
50800: PUSH
50801: LD_VAR 0 1
50805: PPUSH
50806: CALL_OW 274
50810: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50811: LD_ADDR_VAR 0 5
50815: PUSH
50816: LD_VAR 0 2
50820: PPUSH
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL_OW 248
50830: PPUSH
50831: CALL_OW 450
50835: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50836: LD_ADDR_VAR 0 3
50840: PUSH
50841: LD_VAR 0 4
50845: PPUSH
50846: LD_INT 1
50848: PPUSH
50849: CALL_OW 275
50853: PUSH
50854: LD_VAR 0 5
50858: PUSH
50859: LD_INT 1
50861: ARRAY
50862: GREATEREQUAL
50863: PUSH
50864: LD_VAR 0 4
50868: PPUSH
50869: LD_INT 2
50871: PPUSH
50872: CALL_OW 275
50876: PUSH
50877: LD_VAR 0 5
50881: PUSH
50882: LD_INT 2
50884: ARRAY
50885: GREATEREQUAL
50886: AND
50887: PUSH
50888: LD_VAR 0 4
50892: PPUSH
50893: LD_INT 3
50895: PPUSH
50896: CALL_OW 275
50900: PUSH
50901: LD_VAR 0 5
50905: PUSH
50906: LD_INT 3
50908: ARRAY
50909: GREATEREQUAL
50910: AND
50911: ST_TO_ADDR
// end ;
50912: LD_VAR 0 3
50916: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50917: LD_INT 0
50919: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50920: LD_VAR 0 1
50924: PPUSH
50925: LD_VAR 0 2
50929: PPUSH
50930: LD_INT 0
50932: PPUSH
50933: LD_INT 0
50935: PPUSH
50936: LD_INT 1
50938: PPUSH
50939: LD_INT 0
50941: PPUSH
50942: CALL_OW 587
// end ;
50946: LD_VAR 0 3
50950: RET
// export function CenterOnNow ( unit ) ; begin
50951: LD_INT 0
50953: PPUSH
// result := IsInUnit ( unit ) ;
50954: LD_ADDR_VAR 0 2
50958: PUSH
50959: LD_VAR 0 1
50963: PPUSH
50964: CALL_OW 310
50968: ST_TO_ADDR
// if not result then
50969: LD_VAR 0 2
50973: NOT
50974: IFFALSE 50986
// result := unit ;
50976: LD_ADDR_VAR 0 2
50980: PUSH
50981: LD_VAR 0 1
50985: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50986: LD_VAR 0 1
50990: PPUSH
50991: CALL_OW 87
// end ;
50995: LD_VAR 0 2
50999: RET
// export function ComMoveHex ( unit , hex ) ; begin
51000: LD_INT 0
51002: PPUSH
// if not hex then
51003: LD_VAR 0 2
51007: NOT
51008: IFFALSE 51012
// exit ;
51010: GO 51065
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51012: LD_VAR 0 2
51016: PUSH
51017: LD_INT 1
51019: ARRAY
51020: PPUSH
51021: LD_VAR 0 2
51025: PUSH
51026: LD_INT 2
51028: ARRAY
51029: PPUSH
51030: CALL_OW 428
51034: IFFALSE 51038
// exit ;
51036: GO 51065
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51038: LD_VAR 0 1
51042: PPUSH
51043: LD_VAR 0 2
51047: PUSH
51048: LD_INT 1
51050: ARRAY
51051: PPUSH
51052: LD_VAR 0 2
51056: PUSH
51057: LD_INT 2
51059: ARRAY
51060: PPUSH
51061: CALL_OW 111
// end ;
51065: LD_VAR 0 3
51069: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51070: LD_INT 0
51072: PPUSH
51073: PPUSH
51074: PPUSH
// if not unit or not enemy then
51075: LD_VAR 0 1
51079: NOT
51080: PUSH
51081: LD_VAR 0 2
51085: NOT
51086: OR
51087: IFFALSE 51091
// exit ;
51089: GO 51215
// x := GetX ( enemy ) ;
51091: LD_ADDR_VAR 0 4
51095: PUSH
51096: LD_VAR 0 2
51100: PPUSH
51101: CALL_OW 250
51105: ST_TO_ADDR
// y := GetY ( enemy ) ;
51106: LD_ADDR_VAR 0 5
51110: PUSH
51111: LD_VAR 0 2
51115: PPUSH
51116: CALL_OW 251
51120: ST_TO_ADDR
// if ValidHex ( x , y ) then
51121: LD_VAR 0 4
51125: PPUSH
51126: LD_VAR 0 5
51130: PPUSH
51131: CALL_OW 488
51135: IFFALSE 51215
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51137: LD_VAR 0 2
51141: PPUSH
51142: CALL_OW 247
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: IN
51157: PUSH
51158: LD_VAR 0 1
51162: PPUSH
51163: CALL_OW 255
51167: PPUSH
51168: LD_VAR 0 2
51172: PPUSH
51173: CALL_OW 292
51177: OR
51178: IFFALSE 51196
// ComAttackUnit ( unit , enemy ) else
51180: LD_VAR 0 1
51184: PPUSH
51185: LD_VAR 0 2
51189: PPUSH
51190: CALL_OW 115
51194: GO 51215
// ComAgressiveMove ( unit , x , y ) ;
51196: LD_VAR 0 1
51200: PPUSH
51201: LD_VAR 0 4
51205: PPUSH
51206: LD_VAR 0 5
51210: PPUSH
51211: CALL_OW 114
// end ;
51215: LD_VAR 0 3
51219: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51220: LD_INT 0
51222: PPUSH
51223: PPUSH
51224: PPUSH
// list := AreaToList ( area , 0 ) ;
51225: LD_ADDR_VAR 0 5
51229: PUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: LD_INT 0
51237: PPUSH
51238: CALL_OW 517
51242: ST_TO_ADDR
// if not list then
51243: LD_VAR 0 5
51247: NOT
51248: IFFALSE 51252
// exit ;
51250: GO 51382
// if all then
51252: LD_VAR 0 2
51256: IFFALSE 51344
// begin for i := 1 to list [ 1 ] do
51258: LD_ADDR_VAR 0 4
51262: PUSH
51263: DOUBLE
51264: LD_INT 1
51266: DEC
51267: ST_TO_ADDR
51268: LD_VAR 0 5
51272: PUSH
51273: LD_INT 1
51275: ARRAY
51276: PUSH
51277: FOR_TO
51278: IFFALSE 51340
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51280: LD_ADDR_VAR 0 3
51284: PUSH
51285: LD_VAR 0 3
51289: PPUSH
51290: LD_VAR 0 3
51294: PUSH
51295: LD_INT 1
51297: PLUS
51298: PPUSH
51299: LD_VAR 0 5
51303: PUSH
51304: LD_INT 1
51306: ARRAY
51307: PUSH
51308: LD_VAR 0 4
51312: ARRAY
51313: PUSH
51314: LD_VAR 0 5
51318: PUSH
51319: LD_INT 2
51321: ARRAY
51322: PUSH
51323: LD_VAR 0 4
51327: ARRAY
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PPUSH
51333: CALL_OW 1
51337: ST_TO_ADDR
51338: GO 51277
51340: POP
51341: POP
// exit ;
51342: GO 51382
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51344: LD_ADDR_VAR 0 3
51348: PUSH
51349: LD_VAR 0 5
51353: PUSH
51354: LD_INT 1
51356: ARRAY
51357: PUSH
51358: LD_INT 1
51360: ARRAY
51361: PUSH
51362: LD_VAR 0 5
51366: PUSH
51367: LD_INT 2
51369: ARRAY
51370: PUSH
51371: LD_INT 1
51373: ARRAY
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: ST_TO_ADDR
// end ;
51382: LD_VAR 0 3
51386: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51387: LD_INT 0
51389: PPUSH
51390: PPUSH
// list := AreaToList ( area , 0 ) ;
51391: LD_ADDR_VAR 0 4
51395: PUSH
51396: LD_VAR 0 1
51400: PPUSH
51401: LD_INT 0
51403: PPUSH
51404: CALL_OW 517
51408: ST_TO_ADDR
// if not list then
51409: LD_VAR 0 4
51413: NOT
51414: IFFALSE 51418
// exit ;
51416: GO 51459
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51418: LD_ADDR_VAR 0 3
51422: PUSH
51423: LD_VAR 0 4
51427: PUSH
51428: LD_INT 1
51430: ARRAY
51431: PUSH
51432: LD_INT 1
51434: ARRAY
51435: PUSH
51436: LD_VAR 0 4
51440: PUSH
51441: LD_INT 2
51443: ARRAY
51444: PUSH
51445: LD_INT 1
51447: ARRAY
51448: PUSH
51449: LD_VAR 0 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// end ;
51459: LD_VAR 0 3
51463: RET
// export function First ( array ) ; begin
51464: LD_INT 0
51466: PPUSH
// if not array then
51467: LD_VAR 0 1
51471: NOT
51472: IFFALSE 51476
// exit ;
51474: GO 51490
// result := array [ 1 ] ;
51476: LD_ADDR_VAR 0 2
51480: PUSH
51481: LD_VAR 0 1
51485: PUSH
51486: LD_INT 1
51488: ARRAY
51489: ST_TO_ADDR
// end ;
51490: LD_VAR 0 2
51494: RET
// export function Last ( array ) ; begin
51495: LD_INT 0
51497: PPUSH
// if not array then
51498: LD_VAR 0 1
51502: NOT
51503: IFFALSE 51507
// exit ;
51505: GO 51523
// result := array [ array ] ;
51507: LD_ADDR_VAR 0 2
51511: PUSH
51512: LD_VAR 0 1
51516: PUSH
51517: LD_VAR 0 1
51521: ARRAY
51522: ST_TO_ADDR
// end ;
51523: LD_VAR 0 2
51527: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51528: LD_INT 0
51530: PPUSH
51531: PPUSH
// result := [ ] ;
51532: LD_ADDR_VAR 0 5
51536: PUSH
51537: EMPTY
51538: ST_TO_ADDR
// if not array then
51539: LD_VAR 0 1
51543: NOT
51544: IFFALSE 51548
// exit ;
51546: GO 51660
// for i := 1 to array do
51548: LD_ADDR_VAR 0 6
51552: PUSH
51553: DOUBLE
51554: LD_INT 1
51556: DEC
51557: ST_TO_ADDR
51558: LD_VAR 0 1
51562: PUSH
51563: FOR_TO
51564: IFFALSE 51658
// if array [ i ] [ index ] = value then
51566: LD_VAR 0 1
51570: PUSH
51571: LD_VAR 0 6
51575: ARRAY
51576: PUSH
51577: LD_VAR 0 2
51581: ARRAY
51582: PUSH
51583: LD_VAR 0 3
51587: EQUAL
51588: IFFALSE 51656
// begin if indexColumn then
51590: LD_VAR 0 4
51594: IFFALSE 51630
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51596: LD_ADDR_VAR 0 5
51600: PUSH
51601: LD_VAR 0 5
51605: PPUSH
51606: LD_VAR 0 1
51610: PUSH
51611: LD_VAR 0 6
51615: ARRAY
51616: PUSH
51617: LD_VAR 0 4
51621: ARRAY
51622: PPUSH
51623: CALL 46848 0 2
51627: ST_TO_ADDR
51628: GO 51656
// result := Join ( result , array [ i ] ) ;
51630: LD_ADDR_VAR 0 5
51634: PUSH
51635: LD_VAR 0 5
51639: PPUSH
51640: LD_VAR 0 1
51644: PUSH
51645: LD_VAR 0 6
51649: ARRAY
51650: PPUSH
51651: CALL 46848 0 2
51655: ST_TO_ADDR
// end ;
51656: GO 51563
51658: POP
51659: POP
// end ;
51660: LD_VAR 0 5
51664: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51665: LD_INT 0
51667: PPUSH
// if not vehicles or not parkingPoint then
51668: LD_VAR 0 1
51672: NOT
51673: PUSH
51674: LD_VAR 0 2
51678: NOT
51679: OR
51680: IFFALSE 51684
// exit ;
51682: GO 51782
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51684: LD_ADDR_VAR 0 1
51688: PUSH
51689: LD_VAR 0 1
51693: PPUSH
51694: LD_INT 50
51696: PUSH
51697: EMPTY
51698: LIST
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: LD_INT 92
51705: PUSH
51706: LD_VAR 0 2
51710: PUSH
51711: LD_INT 1
51713: ARRAY
51714: PUSH
51715: LD_VAR 0 2
51719: PUSH
51720: LD_INT 2
51722: ARRAY
51723: PUSH
51724: LD_INT 8
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PPUSH
51741: CALL_OW 72
51745: ST_TO_ADDR
// if not vehicles then
51746: LD_VAR 0 1
51750: NOT
51751: IFFALSE 51755
// exit ;
51753: GO 51782
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51755: LD_VAR 0 1
51759: PPUSH
51760: LD_VAR 0 2
51764: PUSH
51765: LD_INT 1
51767: ARRAY
51768: PPUSH
51769: LD_VAR 0 2
51773: PUSH
51774: LD_INT 2
51776: ARRAY
51777: PPUSH
51778: CALL_OW 111
// end ;
51782: LD_VAR 0 3
51786: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51787: LD_INT 0
51789: PPUSH
51790: PPUSH
51791: PPUSH
// if not side or not area then
51792: LD_VAR 0 1
51796: NOT
51797: PUSH
51798: LD_VAR 0 2
51802: NOT
51803: OR
51804: IFFALSE 51808
// exit ;
51806: GO 51927
// tmp := AreaToList ( area , 0 ) ;
51808: LD_ADDR_VAR 0 5
51812: PUSH
51813: LD_VAR 0 2
51817: PPUSH
51818: LD_INT 0
51820: PPUSH
51821: CALL_OW 517
51825: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51826: LD_ADDR_VAR 0 4
51830: PUSH
51831: DOUBLE
51832: LD_INT 1
51834: DEC
51835: ST_TO_ADDR
51836: LD_VAR 0 5
51840: PUSH
51841: LD_INT 1
51843: ARRAY
51844: PUSH
51845: FOR_TO
51846: IFFALSE 51925
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51848: LD_VAR 0 5
51852: PUSH
51853: LD_INT 1
51855: ARRAY
51856: PUSH
51857: LD_VAR 0 4
51861: ARRAY
51862: PPUSH
51863: LD_VAR 0 5
51867: PUSH
51868: LD_INT 2
51870: ARRAY
51871: PUSH
51872: LD_VAR 0 4
51876: ARRAY
51877: PPUSH
51878: CALL_OW 351
51882: IFFALSE 51923
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51884: LD_VAR 0 5
51888: PUSH
51889: LD_INT 1
51891: ARRAY
51892: PUSH
51893: LD_VAR 0 4
51897: ARRAY
51898: PPUSH
51899: LD_VAR 0 5
51903: PUSH
51904: LD_INT 2
51906: ARRAY
51907: PUSH
51908: LD_VAR 0 4
51912: ARRAY
51913: PPUSH
51914: LD_VAR 0 1
51918: PPUSH
51919: CALL_OW 244
// end ;
51923: GO 51845
51925: POP
51926: POP
// end ; end_of_file
51927: LD_VAR 0 3
51931: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
51932: LD_VAR 0 1
51936: PUSH
51937: LD_INT 200
51939: DOUBLE
51940: GREATEREQUAL
51941: IFFALSE 51949
51943: LD_INT 299
51945: DOUBLE
51946: LESSEQUAL
51947: IFTRUE 51951
51949: GO 51983
51951: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
51952: LD_VAR 0 1
51956: PPUSH
51957: LD_VAR 0 2
51961: PPUSH
51962: LD_VAR 0 3
51966: PPUSH
51967: LD_VAR 0 4
51971: PPUSH
51972: LD_VAR 0 5
51976: PPUSH
51977: CALL 52680 0 5
51981: GO 52060
51983: LD_INT 300
51985: DOUBLE
51986: GREATEREQUAL
51987: IFFALSE 51995
51989: LD_INT 399
51991: DOUBLE
51992: LESSEQUAL
51993: IFTRUE 51997
51995: GO 52059
51997: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
51998: LD_VAR 0 1
52002: PPUSH
52003: LD_VAR 0 2
52007: PPUSH
52008: LD_VAR 0 3
52012: PPUSH
52013: LD_VAR 0 4
52017: PPUSH
52018: LD_VAR 0 5
52022: PPUSH
52023: LD_VAR 0 6
52027: PPUSH
52028: LD_VAR 0 7
52032: PPUSH
52033: LD_VAR 0 8
52037: PPUSH
52038: LD_VAR 0 9
52042: PPUSH
52043: LD_VAR 0 10
52047: PPUSH
52048: LD_VAR 0 11
52052: PPUSH
52053: CALL 59007 0 11
52057: GO 52060
52059: POP
// end ;
52060: PPOPN 11
52062: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52063: LD_VAR 0 1
52067: PPUSH
52068: LD_VAR 0 2
52072: PPUSH
52073: LD_VAR 0 3
52077: PPUSH
52078: LD_VAR 0 4
52082: PPUSH
52083: LD_VAR 0 5
52087: PPUSH
52088: CALL 52145 0 5
// end ; end_of_file
52092: PPOPN 5
52094: END
// export function SOS_UnitDestroyed ( un ) ; begin
52095: LD_INT 0
52097: PPUSH
// ComRadiation ( un ) ;
52098: LD_VAR 0 1
52102: PPUSH
52103: CALL 53084 0 1
// end ;
52107: LD_VAR 0 2
52111: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52112: LD_INT 0
52114: PPUSH
// ComRadiation ( un ) ;
52115: LD_VAR 0 1
52119: PPUSH
52120: CALL 53084 0 1
// end ;
52124: LD_VAR 0 2
52128: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52129: LD_INT 0
52131: PPUSH
// end ;
52132: LD_VAR 0 4
52136: RET
// export function SOS_Command ( cmd ) ; begin
52137: LD_INT 0
52139: PPUSH
// end ;
52140: LD_VAR 0 2
52144: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52145: LD_INT 0
52147: PPUSH
// end ;
52148: LD_VAR 0 6
52152: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
52153: LD_INT 0
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
// if not vehicle or not factory then
52160: LD_VAR 0 1
52164: NOT
52165: PUSH
52166: LD_VAR 0 2
52170: NOT
52171: OR
52172: IFFALSE 52176
// exit ;
52174: GO 52675
// if not factoryWaypoints then
52176: LD_EXP 54
52180: NOT
52181: IFFALSE 52185
// exit ;
52183: GO 52675
// for i := 1 to Count ( factoryWaypoints ) do
52185: LD_ADDR_VAR 0 4
52189: PUSH
52190: DOUBLE
52191: LD_INT 1
52193: DEC
52194: ST_TO_ADDR
52195: LD_EXP 54
52199: PPUSH
52200: CALL 11239 0 1
52204: PUSH
52205: FOR_TO
52206: IFFALSE 52673
// if factoryWaypoints [ i ] [ 2 ] = factory then
52208: LD_EXP 54
52212: PUSH
52213: LD_VAR 0 4
52217: ARRAY
52218: PUSH
52219: LD_INT 2
52221: ARRAY
52222: PUSH
52223: LD_VAR 0 2
52227: EQUAL
52228: IFFALSE 52671
// begin if GetControl ( vehicle ) = control_manual then
52230: LD_VAR 0 1
52234: PPUSH
52235: CALL_OW 263
52239: PUSH
52240: LD_INT 1
52242: EQUAL
52243: IFFALSE 52554
// begin driver := IsDrivenBy ( vehicle ) ;
52245: LD_ADDR_VAR 0 6
52249: PUSH
52250: LD_VAR 0 1
52254: PPUSH
52255: CALL_OW 311
52259: ST_TO_ADDR
// tag := GetTag ( driver ) ;
52260: LD_ADDR_VAR 0 5
52264: PUSH
52265: LD_VAR 0 6
52269: PPUSH
52270: CALL_OW 110
52274: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
52275: LD_VAR 0 5
52279: PUSH
52280: LD_INT 501
52282: EQUAL
52283: PUSH
52284: LD_VAR 0 1
52288: PPUSH
52289: CALL_OW 110
52293: PUSH
52294: LD_INT 501
52296: EQUAL
52297: OR
52298: IFFALSE 52304
// exit ;
52300: POP
52301: POP
52302: GO 52675
// if not HasTask ( driver ) then
52304: LD_VAR 0 6
52308: PPUSH
52309: CALL_OW 314
52313: NOT
52314: IFFALSE 52552
// begin SetTag ( driver , tDriver ) ;
52316: LD_VAR 0 6
52320: PPUSH
52321: LD_INT 501
52323: PPUSH
52324: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
52328: LD_VAR 0 1
52332: PPUSH
52333: LD_INT 501
52335: PPUSH
52336: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52340: LD_ADDR_VAR 0 7
52344: PUSH
52345: LD_EXP 54
52349: PUSH
52350: LD_VAR 0 4
52354: ARRAY
52355: PUSH
52356: LD_INT 3
52358: ARRAY
52359: PPUSH
52360: LD_EXP 54
52364: PUSH
52365: LD_VAR 0 4
52369: ARRAY
52370: PUSH
52371: LD_INT 4
52373: ARRAY
52374: PPUSH
52375: CALL_OW 428
52379: ST_TO_ADDR
// if hex then
52380: LD_VAR 0 7
52384: IFFALSE 52402
// ComMoveUnit ( driver , hex ) else
52386: LD_VAR 0 6
52390: PPUSH
52391: LD_VAR 0 7
52395: PPUSH
52396: CALL_OW 112
52400: GO 52441
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52402: LD_VAR 0 6
52406: PPUSH
52407: LD_EXP 54
52411: PUSH
52412: LD_VAR 0 4
52416: ARRAY
52417: PUSH
52418: LD_INT 3
52420: ARRAY
52421: PPUSH
52422: LD_EXP 54
52426: PUSH
52427: LD_VAR 0 4
52431: ARRAY
52432: PUSH
52433: LD_INT 4
52435: ARRAY
52436: PPUSH
52437: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52441: LD_VAR 0 6
52445: PPUSH
52446: CALL_OW 181
// if Multiplayer then
52450: LD_OWVAR 4
52454: IFFALSE 52503
// begin repeat wait ( 10 ) ;
52456: LD_INT 10
52458: PPUSH
52459: CALL_OW 67
// until not IsInUnit ( driver ) ;
52463: LD_VAR 0 6
52467: PPUSH
52468: CALL_OW 310
52472: NOT
52473: IFFALSE 52456
// if not HasTask ( driver ) then
52475: LD_VAR 0 6
52479: PPUSH
52480: CALL_OW 314
52484: NOT
52485: IFFALSE 52501
// ComEnterUnit ( driver , factory ) ;
52487: LD_VAR 0 6
52491: PPUSH
52492: LD_VAR 0 2
52496: PPUSH
52497: CALL_OW 120
// end else
52501: GO 52517
// AddComEnterUnit ( driver , factory ) ;
52503: LD_VAR 0 6
52507: PPUSH
52508: LD_VAR 0 2
52512: PPUSH
52513: CALL_OW 180
// wait ( 0 0$1 ) ;
52517: LD_INT 35
52519: PPUSH
52520: CALL_OW 67
// SetTag ( driver , tag ) ;
52524: LD_VAR 0 6
52528: PPUSH
52529: LD_VAR 0 5
52533: PPUSH
52534: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
52538: LD_VAR 0 1
52542: PPUSH
52543: LD_INT 0
52545: PPUSH
52546: CALL_OW 109
// break ;
52550: GO 52673
// end ; end else
52552: GO 52671
// if GetControl ( vehicle ) = control_remote then
52554: LD_VAR 0 1
52558: PPUSH
52559: CALL_OW 263
52563: PUSH
52564: LD_INT 2
52566: EQUAL
52567: IFFALSE 52630
// begin wait ( 0 0$2 ) ;
52569: LD_INT 70
52571: PPUSH
52572: CALL_OW 67
// if Connect ( vehicle ) then
52576: LD_VAR 0 1
52580: PPUSH
52581: CALL 17445 0 1
52585: IFFALSE 52626
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52587: LD_VAR 0 1
52591: PPUSH
52592: LD_EXP 54
52596: PUSH
52597: LD_VAR 0 4
52601: ARRAY
52602: PUSH
52603: LD_INT 3
52605: ARRAY
52606: PPUSH
52607: LD_EXP 54
52611: PUSH
52612: LD_VAR 0 4
52616: ARRAY
52617: PUSH
52618: LD_INT 4
52620: ARRAY
52621: PPUSH
52622: CALL_OW 171
// break ;
52626: GO 52673
// end else
52628: GO 52671
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52630: LD_VAR 0 1
52634: PPUSH
52635: LD_EXP 54
52639: PUSH
52640: LD_VAR 0 4
52644: ARRAY
52645: PUSH
52646: LD_INT 3
52648: ARRAY
52649: PPUSH
52650: LD_EXP 54
52654: PUSH
52655: LD_VAR 0 4
52659: ARRAY
52660: PUSH
52661: LD_INT 4
52663: ARRAY
52664: PPUSH
52665: CALL_OW 171
// break ;
52669: GO 52673
// end ; end ;
52671: GO 52205
52673: POP
52674: POP
// end ;
52675: LD_VAR 0 3
52679: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52680: LD_INT 0
52682: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52683: LD_VAR 0 1
52687: PUSH
52688: LD_INT 250
52690: EQUAL
52691: PUSH
52692: LD_VAR 0 2
52696: PPUSH
52697: CALL_OW 264
52701: PUSH
52702: LD_INT 81
52704: EQUAL
52705: AND
52706: IFFALSE 52727
// MinerPlaceMine ( unit , x , y ) ;
52708: LD_VAR 0 2
52712: PPUSH
52713: LD_VAR 0 4
52717: PPUSH
52718: LD_VAR 0 5
52722: PPUSH
52723: CALL 55819 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52727: LD_VAR 0 1
52731: PUSH
52732: LD_INT 251
52734: EQUAL
52735: PUSH
52736: LD_VAR 0 2
52740: PPUSH
52741: CALL_OW 264
52745: PUSH
52746: LD_INT 81
52748: EQUAL
52749: AND
52750: IFFALSE 52771
// MinerDetonateMine ( unit , x , y ) ;
52752: LD_VAR 0 2
52756: PPUSH
52757: LD_VAR 0 4
52761: PPUSH
52762: LD_VAR 0 5
52766: PPUSH
52767: CALL 56094 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52771: LD_VAR 0 1
52775: PUSH
52776: LD_INT 252
52778: EQUAL
52779: PUSH
52780: LD_VAR 0 2
52784: PPUSH
52785: CALL_OW 264
52789: PUSH
52790: LD_INT 81
52792: EQUAL
52793: AND
52794: IFFALSE 52815
// MinerCreateMinefield ( unit , x , y ) ;
52796: LD_VAR 0 2
52800: PPUSH
52801: LD_VAR 0 4
52805: PPUSH
52806: LD_VAR 0 5
52810: PPUSH
52811: CALL 56511 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52815: LD_VAR 0 1
52819: PUSH
52820: LD_INT 253
52822: EQUAL
52823: PUSH
52824: LD_VAR 0 2
52828: PPUSH
52829: CALL_OW 257
52833: PUSH
52834: LD_INT 5
52836: EQUAL
52837: AND
52838: IFFALSE 52859
// ComBinocular ( unit , x , y ) ;
52840: LD_VAR 0 2
52844: PPUSH
52845: LD_VAR 0 4
52849: PPUSH
52850: LD_VAR 0 5
52854: PPUSH
52855: CALL 56880 0 3
// if selectedUnit then
52859: LD_VAR 0 3
52863: IFFALSE 52919
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52865: LD_VAR 0 1
52869: PUSH
52870: LD_INT 254
52872: EQUAL
52873: PUSH
52874: LD_VAR 0 2
52878: PPUSH
52879: CALL_OW 264
52883: PUSH
52884: LD_INT 99
52886: EQUAL
52887: AND
52888: PUSH
52889: LD_VAR 0 3
52893: PPUSH
52894: CALL_OW 263
52898: PUSH
52899: LD_INT 3
52901: EQUAL
52902: AND
52903: IFFALSE 52919
// HackDestroyVehicle ( unit , selectedUnit ) ;
52905: LD_VAR 0 2
52909: PPUSH
52910: LD_VAR 0 3
52914: PPUSH
52915: CALL 55183 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52919: LD_VAR 0 1
52923: PUSH
52924: LD_INT 255
52926: EQUAL
52927: PUSH
52928: LD_VAR 0 2
52932: PPUSH
52933: CALL_OW 264
52937: PUSH
52938: LD_INT 14
52940: PUSH
52941: LD_INT 53
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: IN
52948: AND
52949: PUSH
52950: LD_VAR 0 4
52954: PPUSH
52955: LD_VAR 0 5
52959: PPUSH
52960: CALL_OW 488
52964: AND
52965: IFFALSE 52989
// CutTreeXYR ( unit , x , y , 12 ) ;
52967: LD_VAR 0 2
52971: PPUSH
52972: LD_VAR 0 4
52976: PPUSH
52977: LD_VAR 0 5
52981: PPUSH
52982: LD_INT 12
52984: PPUSH
52985: CALL 53180 0 4
// if cmd = 256 then
52989: LD_VAR 0 1
52993: PUSH
52994: LD_INT 256
52996: EQUAL
52997: IFFALSE 53018
// SetFactoryWaypoint ( unit , x , y ) ;
52999: LD_VAR 0 2
53003: PPUSH
53004: LD_VAR 0 4
53008: PPUSH
53009: LD_VAR 0 5
53013: PPUSH
53014: CALL 59015 0 3
// if cmd = 257 then
53018: LD_VAR 0 1
53022: PUSH
53023: LD_INT 257
53025: EQUAL
53026: IFFALSE 53047
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53028: LD_VAR 0 2
53032: PPUSH
53033: LD_VAR 0 4
53037: PPUSH
53038: LD_VAR 0 5
53042: PPUSH
53043: CALL 59505 0 3
// if cmd = 258 then
53047: LD_VAR 0 1
53051: PUSH
53052: LD_INT 258
53054: EQUAL
53055: IFFALSE 53079
// BurnTreeXYR ( unit , x , y , 8 ) ;
53057: LD_VAR 0 2
53061: PPUSH
53062: LD_VAR 0 4
53066: PPUSH
53067: LD_VAR 0 5
53071: PPUSH
53072: LD_INT 8
53074: PPUSH
53075: CALL 53574 0 4
// end ;
53079: LD_VAR 0 6
53083: RET
// export function ComRadiation ( un ) ; var eff ; begin
53084: LD_INT 0
53086: PPUSH
53087: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53088: LD_VAR 0 1
53092: PPUSH
53093: CALL_OW 264
53097: PUSH
53098: LD_INT 91
53100: NONEQUAL
53101: IFFALSE 53105
// exit ;
53103: GO 53175
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53105: LD_INT 68
53107: PPUSH
53108: LD_VAR 0 1
53112: PPUSH
53113: CALL_OW 255
53117: PPUSH
53118: CALL_OW 321
53122: PUSH
53123: LD_INT 2
53125: EQUAL
53126: IFFALSE 53138
// eff := 70 else
53128: LD_ADDR_VAR 0 3
53132: PUSH
53133: LD_INT 70
53135: ST_TO_ADDR
53136: GO 53146
// eff := 30 ;
53138: LD_ADDR_VAR 0 3
53142: PUSH
53143: LD_INT 30
53145: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53146: LD_VAR 0 1
53150: PPUSH
53151: CALL_OW 250
53155: PPUSH
53156: LD_VAR 0 1
53160: PPUSH
53161: CALL_OW 251
53165: PPUSH
53166: LD_VAR 0 3
53170: PPUSH
53171: CALL_OW 495
// end ;
53175: LD_VAR 0 2
53179: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53180: LD_INT 0
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53191: LD_VAR 0 1
53195: PPUSH
53196: CALL_OW 302
53200: NOT
53201: PUSH
53202: LD_VAR 0 2
53206: PPUSH
53207: LD_VAR 0 3
53211: PPUSH
53212: CALL_OW 488
53216: NOT
53217: OR
53218: PUSH
53219: LD_VAR 0 4
53223: NOT
53224: OR
53225: IFFALSE 53229
// exit ;
53227: GO 53569
// list := [ ] ;
53229: LD_ADDR_VAR 0 13
53233: PUSH
53234: EMPTY
53235: ST_TO_ADDR
// if x - r < 0 then
53236: LD_VAR 0 2
53240: PUSH
53241: LD_VAR 0 4
53245: MINUS
53246: PUSH
53247: LD_INT 0
53249: LESS
53250: IFFALSE 53262
// min_x := 0 else
53252: LD_ADDR_VAR 0 7
53256: PUSH
53257: LD_INT 0
53259: ST_TO_ADDR
53260: GO 53278
// min_x := x - r ;
53262: LD_ADDR_VAR 0 7
53266: PUSH
53267: LD_VAR 0 2
53271: PUSH
53272: LD_VAR 0 4
53276: MINUS
53277: ST_TO_ADDR
// if y - r < 0 then
53278: LD_VAR 0 3
53282: PUSH
53283: LD_VAR 0 4
53287: MINUS
53288: PUSH
53289: LD_INT 0
53291: LESS
53292: IFFALSE 53304
// min_y := 0 else
53294: LD_ADDR_VAR 0 8
53298: PUSH
53299: LD_INT 0
53301: ST_TO_ADDR
53302: GO 53320
// min_y := y - r ;
53304: LD_ADDR_VAR 0 8
53308: PUSH
53309: LD_VAR 0 3
53313: PUSH
53314: LD_VAR 0 4
53318: MINUS
53319: ST_TO_ADDR
// max_x := x + r ;
53320: LD_ADDR_VAR 0 9
53324: PUSH
53325: LD_VAR 0 2
53329: PUSH
53330: LD_VAR 0 4
53334: PLUS
53335: ST_TO_ADDR
// max_y := y + r ;
53336: LD_ADDR_VAR 0 10
53340: PUSH
53341: LD_VAR 0 3
53345: PUSH
53346: LD_VAR 0 4
53350: PLUS
53351: ST_TO_ADDR
// for _x = min_x to max_x do
53352: LD_ADDR_VAR 0 11
53356: PUSH
53357: DOUBLE
53358: LD_VAR 0 7
53362: DEC
53363: ST_TO_ADDR
53364: LD_VAR 0 9
53368: PUSH
53369: FOR_TO
53370: IFFALSE 53487
// for _y = min_y to max_y do
53372: LD_ADDR_VAR 0 12
53376: PUSH
53377: DOUBLE
53378: LD_VAR 0 8
53382: DEC
53383: ST_TO_ADDR
53384: LD_VAR 0 10
53388: PUSH
53389: FOR_TO
53390: IFFALSE 53483
// begin if not ValidHex ( _x , _y ) then
53392: LD_VAR 0 11
53396: PPUSH
53397: LD_VAR 0 12
53401: PPUSH
53402: CALL_OW 488
53406: NOT
53407: IFFALSE 53411
// continue ;
53409: GO 53389
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53411: LD_VAR 0 11
53415: PPUSH
53416: LD_VAR 0 12
53420: PPUSH
53421: CALL_OW 351
53425: PUSH
53426: LD_VAR 0 11
53430: PPUSH
53431: LD_VAR 0 12
53435: PPUSH
53436: CALL_OW 554
53440: AND
53441: IFFALSE 53481
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53443: LD_ADDR_VAR 0 13
53447: PUSH
53448: LD_VAR 0 13
53452: PPUSH
53453: LD_VAR 0 13
53457: PUSH
53458: LD_INT 1
53460: PLUS
53461: PPUSH
53462: LD_VAR 0 11
53466: PUSH
53467: LD_VAR 0 12
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PPUSH
53476: CALL_OW 2
53480: ST_TO_ADDR
// end ;
53481: GO 53389
53483: POP
53484: POP
53485: GO 53369
53487: POP
53488: POP
// if not list then
53489: LD_VAR 0 13
53493: NOT
53494: IFFALSE 53498
// exit ;
53496: GO 53569
// for i in list do
53498: LD_ADDR_VAR 0 6
53502: PUSH
53503: LD_VAR 0 13
53507: PUSH
53508: FOR_IN
53509: IFFALSE 53567
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53511: LD_VAR 0 1
53515: PPUSH
53516: LD_STRING M
53518: PUSH
53519: LD_VAR 0 6
53523: PUSH
53524: LD_INT 1
53526: ARRAY
53527: PUSH
53528: LD_VAR 0 6
53532: PUSH
53533: LD_INT 2
53535: ARRAY
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: PPUSH
53561: CALL_OW 447
53565: GO 53508
53567: POP
53568: POP
// end ;
53569: LD_VAR 0 5
53573: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53574: LD_INT 0
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53586: LD_VAR 0 1
53590: PPUSH
53591: CALL_OW 302
53595: NOT
53596: PUSH
53597: LD_VAR 0 2
53601: PPUSH
53602: LD_VAR 0 3
53606: PPUSH
53607: CALL_OW 488
53611: NOT
53612: OR
53613: PUSH
53614: LD_VAR 0 4
53618: NOT
53619: OR
53620: IFFALSE 53624
// exit ;
53622: GO 54137
// list := [ ] ;
53624: LD_ADDR_VAR 0 13
53628: PUSH
53629: EMPTY
53630: ST_TO_ADDR
// if x - r < 0 then
53631: LD_VAR 0 2
53635: PUSH
53636: LD_VAR 0 4
53640: MINUS
53641: PUSH
53642: LD_INT 0
53644: LESS
53645: IFFALSE 53657
// min_x := 0 else
53647: LD_ADDR_VAR 0 7
53651: PUSH
53652: LD_INT 0
53654: ST_TO_ADDR
53655: GO 53673
// min_x := x - r ;
53657: LD_ADDR_VAR 0 7
53661: PUSH
53662: LD_VAR 0 2
53666: PUSH
53667: LD_VAR 0 4
53671: MINUS
53672: ST_TO_ADDR
// if y - r < 0 then
53673: LD_VAR 0 3
53677: PUSH
53678: LD_VAR 0 4
53682: MINUS
53683: PUSH
53684: LD_INT 0
53686: LESS
53687: IFFALSE 53699
// min_y := 0 else
53689: LD_ADDR_VAR 0 8
53693: PUSH
53694: LD_INT 0
53696: ST_TO_ADDR
53697: GO 53715
// min_y := y - r ;
53699: LD_ADDR_VAR 0 8
53703: PUSH
53704: LD_VAR 0 3
53708: PUSH
53709: LD_VAR 0 4
53713: MINUS
53714: ST_TO_ADDR
// max_x := x + r ;
53715: LD_ADDR_VAR 0 9
53719: PUSH
53720: LD_VAR 0 2
53724: PUSH
53725: LD_VAR 0 4
53729: PLUS
53730: ST_TO_ADDR
// max_y := y + r ;
53731: LD_ADDR_VAR 0 10
53735: PUSH
53736: LD_VAR 0 3
53740: PUSH
53741: LD_VAR 0 4
53745: PLUS
53746: ST_TO_ADDR
// for _x = min_x to max_x do
53747: LD_ADDR_VAR 0 11
53751: PUSH
53752: DOUBLE
53753: LD_VAR 0 7
53757: DEC
53758: ST_TO_ADDR
53759: LD_VAR 0 9
53763: PUSH
53764: FOR_TO
53765: IFFALSE 53882
// for _y = min_y to max_y do
53767: LD_ADDR_VAR 0 12
53771: PUSH
53772: DOUBLE
53773: LD_VAR 0 8
53777: DEC
53778: ST_TO_ADDR
53779: LD_VAR 0 10
53783: PUSH
53784: FOR_TO
53785: IFFALSE 53878
// begin if not ValidHex ( _x , _y ) then
53787: LD_VAR 0 11
53791: PPUSH
53792: LD_VAR 0 12
53796: PPUSH
53797: CALL_OW 488
53801: NOT
53802: IFFALSE 53806
// continue ;
53804: GO 53784
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53806: LD_VAR 0 11
53810: PPUSH
53811: LD_VAR 0 12
53815: PPUSH
53816: CALL_OW 351
53820: PUSH
53821: LD_VAR 0 11
53825: PPUSH
53826: LD_VAR 0 12
53830: PPUSH
53831: CALL_OW 554
53835: AND
53836: IFFALSE 53876
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53838: LD_ADDR_VAR 0 13
53842: PUSH
53843: LD_VAR 0 13
53847: PPUSH
53848: LD_VAR 0 13
53852: PUSH
53853: LD_INT 1
53855: PLUS
53856: PPUSH
53857: LD_VAR 0 11
53861: PUSH
53862: LD_VAR 0 12
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PPUSH
53871: CALL_OW 2
53875: ST_TO_ADDR
// end ;
53876: GO 53784
53878: POP
53879: POP
53880: GO 53764
53882: POP
53883: POP
// if not list then
53884: LD_VAR 0 13
53888: NOT
53889: IFFALSE 53893
// exit ;
53891: GO 54137
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
53893: LD_ADDR_VAR 0 13
53897: PUSH
53898: LD_VAR 0 1
53902: PPUSH
53903: LD_VAR 0 13
53907: PPUSH
53908: LD_INT 1
53910: PPUSH
53911: LD_INT 1
53913: PPUSH
53914: CALL 14587 0 4
53918: ST_TO_ADDR
// ComStop ( flame ) ;
53919: LD_VAR 0 1
53923: PPUSH
53924: CALL_OW 141
// for i in list do
53928: LD_ADDR_VAR 0 6
53932: PUSH
53933: LD_VAR 0 13
53937: PUSH
53938: FOR_IN
53939: IFFALSE 53970
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
53941: LD_VAR 0 1
53945: PPUSH
53946: LD_VAR 0 6
53950: PUSH
53951: LD_INT 1
53953: ARRAY
53954: PPUSH
53955: LD_VAR 0 6
53959: PUSH
53960: LD_INT 2
53962: ARRAY
53963: PPUSH
53964: CALL_OW 176
53968: GO 53938
53970: POP
53971: POP
// repeat wait ( 0 0$1 ) ;
53972: LD_INT 35
53974: PPUSH
53975: CALL_OW 67
// task := GetTaskList ( flame ) ;
53979: LD_ADDR_VAR 0 14
53983: PUSH
53984: LD_VAR 0 1
53988: PPUSH
53989: CALL_OW 437
53993: ST_TO_ADDR
// if not task then
53994: LD_VAR 0 14
53998: NOT
53999: IFFALSE 54003
// exit ;
54001: GO 54137
// if task [ 1 ] [ 1 ] <> | then
54003: LD_VAR 0 14
54007: PUSH
54008: LD_INT 1
54010: ARRAY
54011: PUSH
54012: LD_INT 1
54014: ARRAY
54015: PUSH
54016: LD_STRING |
54018: NONEQUAL
54019: IFFALSE 54023
// exit ;
54021: GO 54137
// _x := task [ 1 ] [ 2 ] ;
54023: LD_ADDR_VAR 0 11
54027: PUSH
54028: LD_VAR 0 14
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: PUSH
54037: LD_INT 2
54039: ARRAY
54040: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54041: LD_ADDR_VAR 0 12
54045: PUSH
54046: LD_VAR 0 14
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PUSH
54055: LD_INT 3
54057: ARRAY
54058: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54059: LD_VAR 0 11
54063: PPUSH
54064: LD_VAR 0 12
54068: PPUSH
54069: CALL_OW 351
54073: NOT
54074: PUSH
54075: LD_VAR 0 11
54079: PPUSH
54080: LD_VAR 0 12
54084: PPUSH
54085: CALL_OW 554
54089: NOT
54090: OR
54091: IFFALSE 54125
// begin task := Delete ( task , 1 ) ;
54093: LD_ADDR_VAR 0 14
54097: PUSH
54098: LD_VAR 0 14
54102: PPUSH
54103: LD_INT 1
54105: PPUSH
54106: CALL_OW 3
54110: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54111: LD_VAR 0 1
54115: PPUSH
54116: LD_VAR 0 14
54120: PPUSH
54121: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54125: LD_VAR 0 1
54129: PPUSH
54130: CALL_OW 314
54134: NOT
54135: IFFALSE 53972
// end ;
54137: LD_VAR 0 5
54141: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54142: LD_EXP 43
54146: NOT
54147: IFFALSE 54197
54149: GO 54151
54151: DISABLE
// begin initHack := true ;
54152: LD_ADDR_EXP 43
54156: PUSH
54157: LD_INT 1
54159: ST_TO_ADDR
// hackTanks := [ ] ;
54160: LD_ADDR_EXP 44
54164: PUSH
54165: EMPTY
54166: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54167: LD_ADDR_EXP 45
54171: PUSH
54172: EMPTY
54173: ST_TO_ADDR
// hackLimit := 3 ;
54174: LD_ADDR_EXP 46
54178: PUSH
54179: LD_INT 3
54181: ST_TO_ADDR
// hackDist := 12 ;
54182: LD_ADDR_EXP 47
54186: PUSH
54187: LD_INT 12
54189: ST_TO_ADDR
// hackCounter := [ ] ;
54190: LD_ADDR_EXP 48
54194: PUSH
54195: EMPTY
54196: ST_TO_ADDR
// end ;
54197: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54198: LD_EXP 43
54202: PUSH
54203: LD_INT 34
54205: PUSH
54206: LD_INT 99
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PPUSH
54213: CALL_OW 69
54217: AND
54218: IFFALSE 54471
54220: GO 54222
54222: DISABLE
54223: LD_INT 0
54225: PPUSH
54226: PPUSH
// begin enable ;
54227: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54228: LD_ADDR_VAR 0 1
54232: PUSH
54233: LD_INT 34
54235: PUSH
54236: LD_INT 99
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PPUSH
54243: CALL_OW 69
54247: PUSH
54248: FOR_IN
54249: IFFALSE 54469
// begin if not i in hackTanks then
54251: LD_VAR 0 1
54255: PUSH
54256: LD_EXP 44
54260: IN
54261: NOT
54262: IFFALSE 54345
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54264: LD_ADDR_EXP 44
54268: PUSH
54269: LD_EXP 44
54273: PPUSH
54274: LD_EXP 44
54278: PUSH
54279: LD_INT 1
54281: PLUS
54282: PPUSH
54283: LD_VAR 0 1
54287: PPUSH
54288: CALL_OW 1
54292: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54293: LD_ADDR_EXP 45
54297: PUSH
54298: LD_EXP 45
54302: PPUSH
54303: LD_EXP 45
54307: PUSH
54308: LD_INT 1
54310: PLUS
54311: PPUSH
54312: EMPTY
54313: PPUSH
54314: CALL_OW 1
54318: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54319: LD_ADDR_EXP 48
54323: PUSH
54324: LD_EXP 48
54328: PPUSH
54329: LD_EXP 48
54333: PUSH
54334: LD_INT 1
54336: PLUS
54337: PPUSH
54338: EMPTY
54339: PPUSH
54340: CALL_OW 1
54344: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54345: LD_VAR 0 1
54349: PPUSH
54350: CALL_OW 302
54354: NOT
54355: IFFALSE 54368
// begin HackUnlinkAll ( i ) ;
54357: LD_VAR 0 1
54361: PPUSH
54362: CALL 54474 0 1
// continue ;
54366: GO 54248
// end ; HackCheckCapturedStatus ( i ) ;
54368: LD_VAR 0 1
54372: PPUSH
54373: CALL 54917 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54377: LD_ADDR_VAR 0 2
54381: PUSH
54382: LD_INT 81
54384: PUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 255
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 33
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 91
54411: PUSH
54412: LD_VAR 0 1
54416: PUSH
54417: LD_EXP 47
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 50
54429: PUSH
54430: EMPTY
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: PPUSH
54439: CALL_OW 69
54443: ST_TO_ADDR
// if not tmp then
54444: LD_VAR 0 2
54448: NOT
54449: IFFALSE 54453
// continue ;
54451: GO 54248
// HackLink ( i , tmp ) ;
54453: LD_VAR 0 1
54457: PPUSH
54458: LD_VAR 0 2
54462: PPUSH
54463: CALL 54610 0 2
// end ;
54467: GO 54248
54469: POP
54470: POP
// end ;
54471: PPOPN 2
54473: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54474: LD_INT 0
54476: PPUSH
54477: PPUSH
54478: PPUSH
// if not hack in hackTanks then
54479: LD_VAR 0 1
54483: PUSH
54484: LD_EXP 44
54488: IN
54489: NOT
54490: IFFALSE 54494
// exit ;
54492: GO 54605
// index := GetElementIndex ( hackTanks , hack ) ;
54494: LD_ADDR_VAR 0 4
54498: PUSH
54499: LD_EXP 44
54503: PPUSH
54504: LD_VAR 0 1
54508: PPUSH
54509: CALL 13884 0 2
54513: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54514: LD_EXP 45
54518: PUSH
54519: LD_VAR 0 4
54523: ARRAY
54524: IFFALSE 54605
// begin for i in hackTanksCaptured [ index ] do
54526: LD_ADDR_VAR 0 3
54530: PUSH
54531: LD_EXP 45
54535: PUSH
54536: LD_VAR 0 4
54540: ARRAY
54541: PUSH
54542: FOR_IN
54543: IFFALSE 54569
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54545: LD_VAR 0 3
54549: PUSH
54550: LD_INT 1
54552: ARRAY
54553: PPUSH
54554: LD_VAR 0 3
54558: PUSH
54559: LD_INT 2
54561: ARRAY
54562: PPUSH
54563: CALL_OW 235
54567: GO 54542
54569: POP
54570: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54571: LD_ADDR_EXP 45
54575: PUSH
54576: LD_EXP 45
54580: PPUSH
54581: LD_VAR 0 4
54585: PPUSH
54586: EMPTY
54587: PPUSH
54588: CALL_OW 1
54592: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54593: LD_VAR 0 1
54597: PPUSH
54598: LD_INT 0
54600: PPUSH
54601: CALL_OW 505
// end ; end ;
54605: LD_VAR 0 2
54609: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54610: LD_INT 0
54612: PPUSH
54613: PPUSH
54614: PPUSH
// if not hack in hackTanks or not vehicles then
54615: LD_VAR 0 1
54619: PUSH
54620: LD_EXP 44
54624: IN
54625: NOT
54626: PUSH
54627: LD_VAR 0 2
54631: NOT
54632: OR
54633: IFFALSE 54637
// exit ;
54635: GO 54912
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54637: LD_ADDR_VAR 0 2
54641: PUSH
54642: LD_VAR 0 1
54646: PPUSH
54647: LD_VAR 0 2
54651: PPUSH
54652: LD_INT 1
54654: PPUSH
54655: LD_INT 1
54657: PPUSH
54658: CALL 14534 0 4
54662: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54663: LD_ADDR_VAR 0 5
54667: PUSH
54668: LD_EXP 44
54672: PPUSH
54673: LD_VAR 0 1
54677: PPUSH
54678: CALL 13884 0 2
54682: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54683: LD_EXP 45
54687: PUSH
54688: LD_VAR 0 5
54692: ARRAY
54693: PUSH
54694: LD_EXP 46
54698: LESS
54699: IFFALSE 54888
// begin for i := 1 to vehicles do
54701: LD_ADDR_VAR 0 4
54705: PUSH
54706: DOUBLE
54707: LD_INT 1
54709: DEC
54710: ST_TO_ADDR
54711: LD_VAR 0 2
54715: PUSH
54716: FOR_TO
54717: IFFALSE 54886
// begin if hackTanksCaptured [ index ] = hackLimit then
54719: LD_EXP 45
54723: PUSH
54724: LD_VAR 0 5
54728: ARRAY
54729: PUSH
54730: LD_EXP 46
54734: EQUAL
54735: IFFALSE 54739
// break ;
54737: GO 54886
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54739: LD_ADDR_EXP 48
54743: PUSH
54744: LD_EXP 48
54748: PPUSH
54749: LD_VAR 0 5
54753: PPUSH
54754: LD_EXP 48
54758: PUSH
54759: LD_VAR 0 5
54763: ARRAY
54764: PUSH
54765: LD_INT 1
54767: PLUS
54768: PPUSH
54769: CALL_OW 1
54773: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54774: LD_ADDR_EXP 45
54778: PUSH
54779: LD_EXP 45
54783: PPUSH
54784: LD_VAR 0 5
54788: PUSH
54789: LD_EXP 45
54793: PUSH
54794: LD_VAR 0 5
54798: ARRAY
54799: PUSH
54800: LD_INT 1
54802: PLUS
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PPUSH
54808: LD_VAR 0 2
54812: PUSH
54813: LD_VAR 0 4
54817: ARRAY
54818: PUSH
54819: LD_VAR 0 2
54823: PUSH
54824: LD_VAR 0 4
54828: ARRAY
54829: PPUSH
54830: CALL_OW 255
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PPUSH
54839: CALL 14099 0 3
54843: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54844: LD_VAR 0 2
54848: PUSH
54849: LD_VAR 0 4
54853: ARRAY
54854: PPUSH
54855: LD_VAR 0 1
54859: PPUSH
54860: CALL_OW 255
54864: PPUSH
54865: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54869: LD_VAR 0 2
54873: PUSH
54874: LD_VAR 0 4
54878: ARRAY
54879: PPUSH
54880: CALL_OW 141
// end ;
54884: GO 54716
54886: POP
54887: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54888: LD_VAR 0 1
54892: PPUSH
54893: LD_EXP 45
54897: PUSH
54898: LD_VAR 0 5
54902: ARRAY
54903: PUSH
54904: LD_INT 0
54906: PLUS
54907: PPUSH
54908: CALL_OW 505
// end ;
54912: LD_VAR 0 3
54916: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54917: LD_INT 0
54919: PPUSH
54920: PPUSH
54921: PPUSH
54922: PPUSH
// if not hack in hackTanks then
54923: LD_VAR 0 1
54927: PUSH
54928: LD_EXP 44
54932: IN
54933: NOT
54934: IFFALSE 54938
// exit ;
54936: GO 55178
// index := GetElementIndex ( hackTanks , hack ) ;
54938: LD_ADDR_VAR 0 4
54942: PUSH
54943: LD_EXP 44
54947: PPUSH
54948: LD_VAR 0 1
54952: PPUSH
54953: CALL 13884 0 2
54957: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54958: LD_ADDR_VAR 0 3
54962: PUSH
54963: DOUBLE
54964: LD_EXP 45
54968: PUSH
54969: LD_VAR 0 4
54973: ARRAY
54974: INC
54975: ST_TO_ADDR
54976: LD_INT 1
54978: PUSH
54979: FOR_DOWNTO
54980: IFFALSE 55152
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54982: LD_ADDR_VAR 0 5
54986: PUSH
54987: LD_EXP 45
54991: PUSH
54992: LD_VAR 0 4
54996: ARRAY
54997: PUSH
54998: LD_VAR 0 3
55002: ARRAY
55003: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55004: LD_VAR 0 5
55008: PUSH
55009: LD_INT 1
55011: ARRAY
55012: PPUSH
55013: CALL_OW 302
55017: NOT
55018: PUSH
55019: LD_VAR 0 5
55023: PUSH
55024: LD_INT 1
55026: ARRAY
55027: PPUSH
55028: CALL_OW 255
55032: PUSH
55033: LD_VAR 0 1
55037: PPUSH
55038: CALL_OW 255
55042: NONEQUAL
55043: OR
55044: IFFALSE 55150
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55046: LD_VAR 0 5
55050: PUSH
55051: LD_INT 1
55053: ARRAY
55054: PPUSH
55055: CALL_OW 305
55059: PUSH
55060: LD_VAR 0 5
55064: PUSH
55065: LD_INT 1
55067: ARRAY
55068: PPUSH
55069: CALL_OW 255
55073: PUSH
55074: LD_VAR 0 1
55078: PPUSH
55079: CALL_OW 255
55083: EQUAL
55084: AND
55085: IFFALSE 55109
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55087: LD_VAR 0 5
55091: PUSH
55092: LD_INT 1
55094: ARRAY
55095: PPUSH
55096: LD_VAR 0 5
55100: PUSH
55101: LD_INT 2
55103: ARRAY
55104: PPUSH
55105: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55109: LD_ADDR_EXP 45
55113: PUSH
55114: LD_EXP 45
55118: PPUSH
55119: LD_VAR 0 4
55123: PPUSH
55124: LD_EXP 45
55128: PUSH
55129: LD_VAR 0 4
55133: ARRAY
55134: PPUSH
55135: LD_VAR 0 3
55139: PPUSH
55140: CALL_OW 3
55144: PPUSH
55145: CALL_OW 1
55149: ST_TO_ADDR
// end ; end ;
55150: GO 54979
55152: POP
55153: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55154: LD_VAR 0 1
55158: PPUSH
55159: LD_EXP 45
55163: PUSH
55164: LD_VAR 0 4
55168: ARRAY
55169: PUSH
55170: LD_INT 0
55172: PLUS
55173: PPUSH
55174: CALL_OW 505
// end ;
55178: LD_VAR 0 2
55182: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55183: LD_INT 0
55185: PPUSH
55186: PPUSH
55187: PPUSH
55188: PPUSH
// if not hack in hackTanks then
55189: LD_VAR 0 1
55193: PUSH
55194: LD_EXP 44
55198: IN
55199: NOT
55200: IFFALSE 55204
// exit ;
55202: GO 55289
// index := GetElementIndex ( hackTanks , hack ) ;
55204: LD_ADDR_VAR 0 5
55208: PUSH
55209: LD_EXP 44
55213: PPUSH
55214: LD_VAR 0 1
55218: PPUSH
55219: CALL 13884 0 2
55223: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55224: LD_ADDR_VAR 0 4
55228: PUSH
55229: DOUBLE
55230: LD_INT 1
55232: DEC
55233: ST_TO_ADDR
55234: LD_EXP 45
55238: PUSH
55239: LD_VAR 0 5
55243: ARRAY
55244: PUSH
55245: FOR_TO
55246: IFFALSE 55287
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55248: LD_EXP 45
55252: PUSH
55253: LD_VAR 0 5
55257: ARRAY
55258: PUSH
55259: LD_VAR 0 4
55263: ARRAY
55264: PUSH
55265: LD_INT 1
55267: ARRAY
55268: PUSH
55269: LD_VAR 0 2
55273: EQUAL
55274: IFFALSE 55285
// KillUnit ( vehicle ) ;
55276: LD_VAR 0 2
55280: PPUSH
55281: CALL_OW 66
55285: GO 55245
55287: POP
55288: POP
// end ;
55289: LD_VAR 0 3
55293: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55294: LD_EXP 49
55298: NOT
55299: IFFALSE 55334
55301: GO 55303
55303: DISABLE
// begin initMiner := true ;
55304: LD_ADDR_EXP 49
55308: PUSH
55309: LD_INT 1
55311: ST_TO_ADDR
// minersList := [ ] ;
55312: LD_ADDR_EXP 50
55316: PUSH
55317: EMPTY
55318: ST_TO_ADDR
// minerMinesList := [ ] ;
55319: LD_ADDR_EXP 51
55323: PUSH
55324: EMPTY
55325: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55326: LD_ADDR_EXP 52
55330: PUSH
55331: LD_INT 5
55333: ST_TO_ADDR
// end ;
55334: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55335: LD_EXP 49
55339: PUSH
55340: LD_INT 34
55342: PUSH
55343: LD_INT 81
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PPUSH
55350: CALL_OW 69
55354: AND
55355: IFFALSE 55816
55357: GO 55359
55359: DISABLE
55360: LD_INT 0
55362: PPUSH
55363: PPUSH
55364: PPUSH
55365: PPUSH
// begin enable ;
55366: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55367: LD_ADDR_VAR 0 1
55371: PUSH
55372: LD_INT 34
55374: PUSH
55375: LD_INT 81
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PPUSH
55382: CALL_OW 69
55386: PUSH
55387: FOR_IN
55388: IFFALSE 55460
// begin if not i in minersList then
55390: LD_VAR 0 1
55394: PUSH
55395: LD_EXP 50
55399: IN
55400: NOT
55401: IFFALSE 55458
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55403: LD_ADDR_EXP 50
55407: PUSH
55408: LD_EXP 50
55412: PPUSH
55413: LD_EXP 50
55417: PUSH
55418: LD_INT 1
55420: PLUS
55421: PPUSH
55422: LD_VAR 0 1
55426: PPUSH
55427: CALL_OW 1
55431: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55432: LD_ADDR_EXP 51
55436: PUSH
55437: LD_EXP 51
55441: PPUSH
55442: LD_EXP 51
55446: PUSH
55447: LD_INT 1
55449: PLUS
55450: PPUSH
55451: EMPTY
55452: PPUSH
55453: CALL_OW 1
55457: ST_TO_ADDR
// end end ;
55458: GO 55387
55460: POP
55461: POP
// for i := minerMinesList downto 1 do
55462: LD_ADDR_VAR 0 1
55466: PUSH
55467: DOUBLE
55468: LD_EXP 51
55472: INC
55473: ST_TO_ADDR
55474: LD_INT 1
55476: PUSH
55477: FOR_DOWNTO
55478: IFFALSE 55814
// begin if IsLive ( minersList [ i ] ) then
55480: LD_EXP 50
55484: PUSH
55485: LD_VAR 0 1
55489: ARRAY
55490: PPUSH
55491: CALL_OW 300
55495: IFFALSE 55523
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55497: LD_EXP 50
55501: PUSH
55502: LD_VAR 0 1
55506: ARRAY
55507: PPUSH
55508: LD_EXP 51
55512: PUSH
55513: LD_VAR 0 1
55517: ARRAY
55518: PPUSH
55519: CALL_OW 505
// if not minerMinesList [ i ] then
55523: LD_EXP 51
55527: PUSH
55528: LD_VAR 0 1
55532: ARRAY
55533: NOT
55534: IFFALSE 55538
// continue ;
55536: GO 55477
// for j := minerMinesList [ i ] downto 1 do
55538: LD_ADDR_VAR 0 2
55542: PUSH
55543: DOUBLE
55544: LD_EXP 51
55548: PUSH
55549: LD_VAR 0 1
55553: ARRAY
55554: INC
55555: ST_TO_ADDR
55556: LD_INT 1
55558: PUSH
55559: FOR_DOWNTO
55560: IFFALSE 55810
// begin side := GetSide ( minersList [ i ] ) ;
55562: LD_ADDR_VAR 0 3
55566: PUSH
55567: LD_EXP 50
55571: PUSH
55572: LD_VAR 0 1
55576: ARRAY
55577: PPUSH
55578: CALL_OW 255
55582: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55583: LD_ADDR_VAR 0 4
55587: PUSH
55588: LD_EXP 51
55592: PUSH
55593: LD_VAR 0 1
55597: ARRAY
55598: PUSH
55599: LD_VAR 0 2
55603: ARRAY
55604: PUSH
55605: LD_INT 1
55607: ARRAY
55608: PPUSH
55609: LD_EXP 51
55613: PUSH
55614: LD_VAR 0 1
55618: ARRAY
55619: PUSH
55620: LD_VAR 0 2
55624: ARRAY
55625: PUSH
55626: LD_INT 2
55628: ARRAY
55629: PPUSH
55630: CALL_OW 428
55634: ST_TO_ADDR
// if not tmp then
55635: LD_VAR 0 4
55639: NOT
55640: IFFALSE 55644
// continue ;
55642: GO 55559
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55644: LD_VAR 0 4
55648: PUSH
55649: LD_INT 81
55651: PUSH
55652: LD_VAR 0 3
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PPUSH
55661: CALL_OW 69
55665: IN
55666: PUSH
55667: LD_EXP 51
55671: PUSH
55672: LD_VAR 0 1
55676: ARRAY
55677: PUSH
55678: LD_VAR 0 2
55682: ARRAY
55683: PUSH
55684: LD_INT 1
55686: ARRAY
55687: PPUSH
55688: LD_EXP 51
55692: PUSH
55693: LD_VAR 0 1
55697: ARRAY
55698: PUSH
55699: LD_VAR 0 2
55703: ARRAY
55704: PUSH
55705: LD_INT 2
55707: ARRAY
55708: PPUSH
55709: CALL_OW 458
55713: AND
55714: IFFALSE 55808
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55716: LD_EXP 51
55720: PUSH
55721: LD_VAR 0 1
55725: ARRAY
55726: PUSH
55727: LD_VAR 0 2
55731: ARRAY
55732: PUSH
55733: LD_INT 1
55735: ARRAY
55736: PPUSH
55737: LD_EXP 51
55741: PUSH
55742: LD_VAR 0 1
55746: ARRAY
55747: PUSH
55748: LD_VAR 0 2
55752: ARRAY
55753: PUSH
55754: LD_INT 2
55756: ARRAY
55757: PPUSH
55758: LD_VAR 0 3
55762: PPUSH
55763: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55767: LD_ADDR_EXP 51
55771: PUSH
55772: LD_EXP 51
55776: PPUSH
55777: LD_VAR 0 1
55781: PPUSH
55782: LD_EXP 51
55786: PUSH
55787: LD_VAR 0 1
55791: ARRAY
55792: PPUSH
55793: LD_VAR 0 2
55797: PPUSH
55798: CALL_OW 3
55802: PPUSH
55803: CALL_OW 1
55807: ST_TO_ADDR
// end ; end ;
55808: GO 55559
55810: POP
55811: POP
// end ;
55812: GO 55477
55814: POP
55815: POP
// end ;
55816: PPOPN 4
55818: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55819: LD_INT 0
55821: PPUSH
55822: PPUSH
// result := false ;
55823: LD_ADDR_VAR 0 4
55827: PUSH
55828: LD_INT 0
55830: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55831: LD_VAR 0 1
55835: PPUSH
55836: CALL_OW 264
55840: PUSH
55841: LD_INT 81
55843: EQUAL
55844: NOT
55845: IFFALSE 55849
// exit ;
55847: GO 56089
// index := GetElementIndex ( minersList , unit ) ;
55849: LD_ADDR_VAR 0 5
55853: PUSH
55854: LD_EXP 50
55858: PPUSH
55859: LD_VAR 0 1
55863: PPUSH
55864: CALL 13884 0 2
55868: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55869: LD_EXP 51
55873: PUSH
55874: LD_VAR 0 5
55878: ARRAY
55879: PUSH
55880: LD_EXP 52
55884: GREATEREQUAL
55885: IFFALSE 55889
// exit ;
55887: GO 56089
// ComMoveXY ( unit , x , y ) ;
55889: LD_VAR 0 1
55893: PPUSH
55894: LD_VAR 0 2
55898: PPUSH
55899: LD_VAR 0 3
55903: PPUSH
55904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55908: LD_INT 35
55910: PPUSH
55911: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55915: LD_VAR 0 1
55919: PPUSH
55920: LD_VAR 0 2
55924: PPUSH
55925: LD_VAR 0 3
55929: PPUSH
55930: CALL 45645 0 3
55934: NOT
55935: PUSH
55936: LD_VAR 0 1
55940: PPUSH
55941: CALL_OW 314
55945: AND
55946: IFFALSE 55950
// exit ;
55948: GO 56089
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55950: LD_VAR 0 2
55954: PPUSH
55955: LD_VAR 0 3
55959: PPUSH
55960: CALL_OW 428
55964: PUSH
55965: LD_VAR 0 1
55969: EQUAL
55970: PUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: CALL_OW 314
55980: NOT
55981: AND
55982: IFFALSE 55908
// PlaySoundXY ( x , y , PlantMine ) ;
55984: LD_VAR 0 2
55988: PPUSH
55989: LD_VAR 0 3
55993: PPUSH
55994: LD_STRING PlantMine
55996: PPUSH
55997: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56001: LD_VAR 0 2
56005: PPUSH
56006: LD_VAR 0 3
56010: PPUSH
56011: LD_VAR 0 1
56015: PPUSH
56016: CALL_OW 255
56020: PPUSH
56021: LD_INT 0
56023: PPUSH
56024: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56028: LD_ADDR_EXP 51
56032: PUSH
56033: LD_EXP 51
56037: PPUSH
56038: LD_VAR 0 5
56042: PUSH
56043: LD_EXP 51
56047: PUSH
56048: LD_VAR 0 5
56052: ARRAY
56053: PUSH
56054: LD_INT 1
56056: PLUS
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PPUSH
56062: LD_VAR 0 2
56066: PUSH
56067: LD_VAR 0 3
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PPUSH
56076: CALL 14099 0 3
56080: ST_TO_ADDR
// result := true ;
56081: LD_ADDR_VAR 0 4
56085: PUSH
56086: LD_INT 1
56088: ST_TO_ADDR
// end ;
56089: LD_VAR 0 4
56093: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56094: LD_INT 0
56096: PPUSH
56097: PPUSH
56098: PPUSH
// if not unit in minersList then
56099: LD_VAR 0 1
56103: PUSH
56104: LD_EXP 50
56108: IN
56109: NOT
56110: IFFALSE 56114
// exit ;
56112: GO 56506
// index := GetElementIndex ( minersList , unit ) ;
56114: LD_ADDR_VAR 0 6
56118: PUSH
56119: LD_EXP 50
56123: PPUSH
56124: LD_VAR 0 1
56128: PPUSH
56129: CALL 13884 0 2
56133: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56134: LD_ADDR_VAR 0 5
56138: PUSH
56139: DOUBLE
56140: LD_EXP 51
56144: PUSH
56145: LD_VAR 0 6
56149: ARRAY
56150: INC
56151: ST_TO_ADDR
56152: LD_INT 1
56154: PUSH
56155: FOR_DOWNTO
56156: IFFALSE 56317
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56158: LD_EXP 51
56162: PUSH
56163: LD_VAR 0 6
56167: ARRAY
56168: PUSH
56169: LD_VAR 0 5
56173: ARRAY
56174: PUSH
56175: LD_INT 1
56177: ARRAY
56178: PUSH
56179: LD_VAR 0 2
56183: EQUAL
56184: PUSH
56185: LD_EXP 51
56189: PUSH
56190: LD_VAR 0 6
56194: ARRAY
56195: PUSH
56196: LD_VAR 0 5
56200: ARRAY
56201: PUSH
56202: LD_INT 2
56204: ARRAY
56205: PUSH
56206: LD_VAR 0 3
56210: EQUAL
56211: AND
56212: IFFALSE 56315
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56214: LD_EXP 51
56218: PUSH
56219: LD_VAR 0 6
56223: ARRAY
56224: PUSH
56225: LD_VAR 0 5
56229: ARRAY
56230: PUSH
56231: LD_INT 1
56233: ARRAY
56234: PPUSH
56235: LD_EXP 51
56239: PUSH
56240: LD_VAR 0 6
56244: ARRAY
56245: PUSH
56246: LD_VAR 0 5
56250: ARRAY
56251: PUSH
56252: LD_INT 2
56254: ARRAY
56255: PPUSH
56256: LD_VAR 0 1
56260: PPUSH
56261: CALL_OW 255
56265: PPUSH
56266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56270: LD_ADDR_EXP 51
56274: PUSH
56275: LD_EXP 51
56279: PPUSH
56280: LD_VAR 0 6
56284: PPUSH
56285: LD_EXP 51
56289: PUSH
56290: LD_VAR 0 6
56294: ARRAY
56295: PPUSH
56296: LD_VAR 0 5
56300: PPUSH
56301: CALL_OW 3
56305: PPUSH
56306: CALL_OW 1
56310: ST_TO_ADDR
// exit ;
56311: POP
56312: POP
56313: GO 56506
// end ; end ;
56315: GO 56155
56317: POP
56318: POP
// for i := minerMinesList [ index ] downto 1 do
56319: LD_ADDR_VAR 0 5
56323: PUSH
56324: DOUBLE
56325: LD_EXP 51
56329: PUSH
56330: LD_VAR 0 6
56334: ARRAY
56335: INC
56336: ST_TO_ADDR
56337: LD_INT 1
56339: PUSH
56340: FOR_DOWNTO
56341: IFFALSE 56504
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56343: LD_EXP 51
56347: PUSH
56348: LD_VAR 0 6
56352: ARRAY
56353: PUSH
56354: LD_VAR 0 5
56358: ARRAY
56359: PUSH
56360: LD_INT 1
56362: ARRAY
56363: PPUSH
56364: LD_EXP 51
56368: PUSH
56369: LD_VAR 0 6
56373: ARRAY
56374: PUSH
56375: LD_VAR 0 5
56379: ARRAY
56380: PUSH
56381: LD_INT 2
56383: ARRAY
56384: PPUSH
56385: LD_VAR 0 2
56389: PPUSH
56390: LD_VAR 0 3
56394: PPUSH
56395: CALL_OW 298
56399: PUSH
56400: LD_INT 6
56402: LESS
56403: IFFALSE 56502
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56405: LD_EXP 51
56409: PUSH
56410: LD_VAR 0 6
56414: ARRAY
56415: PUSH
56416: LD_VAR 0 5
56420: ARRAY
56421: PUSH
56422: LD_INT 1
56424: ARRAY
56425: PPUSH
56426: LD_EXP 51
56430: PUSH
56431: LD_VAR 0 6
56435: ARRAY
56436: PUSH
56437: LD_VAR 0 5
56441: ARRAY
56442: PUSH
56443: LD_INT 2
56445: ARRAY
56446: PPUSH
56447: LD_VAR 0 1
56451: PPUSH
56452: CALL_OW 255
56456: PPUSH
56457: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56461: LD_ADDR_EXP 51
56465: PUSH
56466: LD_EXP 51
56470: PPUSH
56471: LD_VAR 0 6
56475: PPUSH
56476: LD_EXP 51
56480: PUSH
56481: LD_VAR 0 6
56485: ARRAY
56486: PPUSH
56487: LD_VAR 0 5
56491: PPUSH
56492: CALL_OW 3
56496: PPUSH
56497: CALL_OW 1
56501: ST_TO_ADDR
// end ; end ;
56502: GO 56340
56504: POP
56505: POP
// end ;
56506: LD_VAR 0 4
56510: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56511: LD_INT 0
56513: PPUSH
56514: PPUSH
56515: PPUSH
56516: PPUSH
56517: PPUSH
56518: PPUSH
56519: PPUSH
56520: PPUSH
56521: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56522: LD_VAR 0 1
56526: PPUSH
56527: CALL_OW 264
56531: PUSH
56532: LD_INT 81
56534: EQUAL
56535: NOT
56536: PUSH
56537: LD_VAR 0 1
56541: PUSH
56542: LD_EXP 50
56546: IN
56547: NOT
56548: OR
56549: IFFALSE 56553
// exit ;
56551: GO 56875
// index := GetElementIndex ( minersList , unit ) ;
56553: LD_ADDR_VAR 0 6
56557: PUSH
56558: LD_EXP 50
56562: PPUSH
56563: LD_VAR 0 1
56567: PPUSH
56568: CALL 13884 0 2
56572: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56573: LD_ADDR_VAR 0 8
56577: PUSH
56578: LD_EXP 52
56582: PUSH
56583: LD_EXP 51
56587: PUSH
56588: LD_VAR 0 6
56592: ARRAY
56593: MINUS
56594: ST_TO_ADDR
// if not minesFreeAmount then
56595: LD_VAR 0 8
56599: NOT
56600: IFFALSE 56604
// exit ;
56602: GO 56875
// tmp := [ ] ;
56604: LD_ADDR_VAR 0 7
56608: PUSH
56609: EMPTY
56610: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56611: LD_ADDR_VAR 0 5
56615: PUSH
56616: DOUBLE
56617: LD_INT 1
56619: DEC
56620: ST_TO_ADDR
56621: LD_VAR 0 8
56625: PUSH
56626: FOR_TO
56627: IFFALSE 56822
// begin _d := rand ( 0 , 5 ) ;
56629: LD_ADDR_VAR 0 11
56633: PUSH
56634: LD_INT 0
56636: PPUSH
56637: LD_INT 5
56639: PPUSH
56640: CALL_OW 12
56644: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56645: LD_ADDR_VAR 0 12
56649: PUSH
56650: LD_INT 2
56652: PPUSH
56653: LD_INT 6
56655: PPUSH
56656: CALL_OW 12
56660: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56661: LD_ADDR_VAR 0 9
56665: PUSH
56666: LD_VAR 0 2
56670: PPUSH
56671: LD_VAR 0 11
56675: PPUSH
56676: LD_VAR 0 12
56680: PPUSH
56681: CALL_OW 272
56685: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56686: LD_ADDR_VAR 0 10
56690: PUSH
56691: LD_VAR 0 3
56695: PPUSH
56696: LD_VAR 0 11
56700: PPUSH
56701: LD_VAR 0 12
56705: PPUSH
56706: CALL_OW 273
56710: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56711: LD_VAR 0 9
56715: PPUSH
56716: LD_VAR 0 10
56720: PPUSH
56721: CALL_OW 488
56725: PUSH
56726: LD_VAR 0 9
56730: PUSH
56731: LD_VAR 0 10
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_VAR 0 7
56744: IN
56745: NOT
56746: AND
56747: PUSH
56748: LD_VAR 0 9
56752: PPUSH
56753: LD_VAR 0 10
56757: PPUSH
56758: CALL_OW 458
56762: NOT
56763: AND
56764: IFFALSE 56806
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56766: LD_ADDR_VAR 0 7
56770: PUSH
56771: LD_VAR 0 7
56775: PPUSH
56776: LD_VAR 0 7
56780: PUSH
56781: LD_INT 1
56783: PLUS
56784: PPUSH
56785: LD_VAR 0 9
56789: PUSH
56790: LD_VAR 0 10
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PPUSH
56799: CALL_OW 1
56803: ST_TO_ADDR
56804: GO 56820
// i := i - 1 ;
56806: LD_ADDR_VAR 0 5
56810: PUSH
56811: LD_VAR 0 5
56815: PUSH
56816: LD_INT 1
56818: MINUS
56819: ST_TO_ADDR
// end ;
56820: GO 56626
56822: POP
56823: POP
// for i in tmp do
56824: LD_ADDR_VAR 0 5
56828: PUSH
56829: LD_VAR 0 7
56833: PUSH
56834: FOR_IN
56835: IFFALSE 56873
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56837: LD_VAR 0 1
56841: PPUSH
56842: LD_VAR 0 5
56846: PUSH
56847: LD_INT 1
56849: ARRAY
56850: PPUSH
56851: LD_VAR 0 5
56855: PUSH
56856: LD_INT 2
56858: ARRAY
56859: PPUSH
56860: CALL 55819 0 3
56864: NOT
56865: IFFALSE 56871
// exit ;
56867: POP
56868: POP
56869: GO 56875
56871: GO 56834
56873: POP
56874: POP
// end ;
56875: LD_VAR 0 4
56879: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
56880: LD_INT 0
56882: PPUSH
56883: PPUSH
56884: PPUSH
56885: PPUSH
56886: PPUSH
56887: PPUSH
56888: PPUSH
56889: PPUSH
56890: PPUSH
// if GetClass ( unit ) <> class_sniper then
56891: LD_VAR 0 1
56895: PPUSH
56896: CALL_OW 257
56900: PUSH
56901: LD_INT 5
56903: NONEQUAL
56904: IFFALSE 56908
// exit ;
56906: GO 57374
// dist := 8 ;
56908: LD_ADDR_VAR 0 5
56912: PUSH
56913: LD_INT 8
56915: ST_TO_ADDR
// viewRange := 12 ;
56916: LD_ADDR_VAR 0 8
56920: PUSH
56921: LD_INT 12
56923: ST_TO_ADDR
// side := GetSide ( unit ) ;
56924: LD_ADDR_VAR 0 6
56928: PUSH
56929: LD_VAR 0 1
56933: PPUSH
56934: CALL_OW 255
56938: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56939: LD_INT 61
56941: PPUSH
56942: LD_VAR 0 6
56946: PPUSH
56947: CALL_OW 321
56951: PUSH
56952: LD_INT 2
56954: EQUAL
56955: IFFALSE 56965
// viewRange := 16 ;
56957: LD_ADDR_VAR 0 8
56961: PUSH
56962: LD_INT 16
56964: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56965: LD_VAR 0 1
56969: PPUSH
56970: LD_VAR 0 2
56974: PPUSH
56975: LD_VAR 0 3
56979: PPUSH
56980: CALL_OW 297
56984: PUSH
56985: LD_VAR 0 5
56989: GREATER
56990: IFFALSE 57069
// begin ComMoveXY ( unit , x , y ) ;
56992: LD_VAR 0 1
56996: PPUSH
56997: LD_VAR 0 2
57001: PPUSH
57002: LD_VAR 0 3
57006: PPUSH
57007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57011: LD_INT 35
57013: PPUSH
57014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57018: LD_VAR 0 1
57022: PPUSH
57023: LD_VAR 0 2
57027: PPUSH
57028: LD_VAR 0 3
57032: PPUSH
57033: CALL 45645 0 3
57037: NOT
57038: IFFALSE 57042
// exit ;
57040: GO 57374
// until GetDistUnitXY ( unit , x , y ) < dist ;
57042: LD_VAR 0 1
57046: PPUSH
57047: LD_VAR 0 2
57051: PPUSH
57052: LD_VAR 0 3
57056: PPUSH
57057: CALL_OW 297
57061: PUSH
57062: LD_VAR 0 5
57066: LESS
57067: IFFALSE 57011
// end ; ComTurnXY ( unit , x , y ) ;
57069: LD_VAR 0 1
57073: PPUSH
57074: LD_VAR 0 2
57078: PPUSH
57079: LD_VAR 0 3
57083: PPUSH
57084: CALL_OW 118
// repeat if Multiplayer then
57088: LD_OWVAR 4
57092: IFFALSE 57103
// wait ( 35 ) else
57094: LD_INT 35
57096: PPUSH
57097: CALL_OW 67
57101: GO 57110
// wait ( 5 ) ;
57103: LD_INT 5
57105: PPUSH
57106: CALL_OW 67
// _d := GetDir ( unit ) ;
57110: LD_ADDR_VAR 0 11
57114: PUSH
57115: LD_VAR 0 1
57119: PPUSH
57120: CALL_OW 254
57124: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57125: LD_ADDR_VAR 0 7
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 250
57139: PPUSH
57140: LD_VAR 0 1
57144: PPUSH
57145: CALL_OW 251
57149: PPUSH
57150: LD_VAR 0 2
57154: PPUSH
57155: LD_VAR 0 3
57159: PPUSH
57160: CALL 48253 0 4
57164: ST_TO_ADDR
// until dir = _d ;
57165: LD_VAR 0 7
57169: PUSH
57170: LD_VAR 0 11
57174: EQUAL
57175: IFFALSE 57088
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57177: LD_ADDR_VAR 0 9
57181: PUSH
57182: LD_VAR 0 1
57186: PPUSH
57187: CALL_OW 250
57191: PPUSH
57192: LD_VAR 0 7
57196: PPUSH
57197: LD_VAR 0 5
57201: PPUSH
57202: CALL_OW 272
57206: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57207: LD_ADDR_VAR 0 10
57211: PUSH
57212: LD_VAR 0 1
57216: PPUSH
57217: CALL_OW 251
57221: PPUSH
57222: LD_VAR 0 7
57226: PPUSH
57227: LD_VAR 0 5
57231: PPUSH
57232: CALL_OW 273
57236: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57237: LD_VAR 0 9
57241: PPUSH
57242: LD_VAR 0 10
57246: PPUSH
57247: CALL_OW 488
57251: NOT
57252: IFFALSE 57256
// exit ;
57254: GO 57374
// ComAnimCustom ( unit , 1 ) ;
57256: LD_VAR 0 1
57260: PPUSH
57261: LD_INT 1
57263: PPUSH
57264: CALL_OW 592
// p := 0 ;
57268: LD_ADDR_VAR 0 12
57272: PUSH
57273: LD_INT 0
57275: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57276: LD_VAR 0 9
57280: PPUSH
57281: LD_VAR 0 10
57285: PPUSH
57286: LD_VAR 0 6
57290: PPUSH
57291: LD_VAR 0 8
57295: PPUSH
57296: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57300: LD_INT 35
57302: PPUSH
57303: CALL_OW 67
// p := Inc ( p ) ;
57307: LD_ADDR_VAR 0 12
57311: PUSH
57312: LD_VAR 0 12
57316: PPUSH
57317: CALL 48209 0 1
57321: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57322: LD_VAR 0 12
57326: PUSH
57327: LD_INT 3
57329: EQUAL
57330: PUSH
57331: LD_VAR 0 1
57335: PPUSH
57336: CALL_OW 302
57340: NOT
57341: OR
57342: PUSH
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL_OW 301
57352: OR
57353: IFFALSE 57300
// RemoveSeeing ( _x , _y , side ) ;
57355: LD_VAR 0 9
57359: PPUSH
57360: LD_VAR 0 10
57364: PPUSH
57365: LD_VAR 0 6
57369: PPUSH
57370: CALL_OW 331
// end ; end_of_file
57374: LD_VAR 0 4
57378: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57379: LD_EXP 38
57383: IFFALSE 57724
57385: GO 57387
57387: DISABLE
57388: LD_INT 0
57390: PPUSH
57391: PPUSH
57392: PPUSH
// begin mpKingPoints := [ ] ;
57393: LD_ADDR_EXP 53
57397: PUSH
57398: EMPTY
57399: ST_TO_ADDR
// if mpTeamGame then
57400: LD_EXP 11
57404: IFFALSE 57458
// begin for i := 1 to Count ( mpTeams ) do
57406: LD_ADDR_VAR 0 1
57410: PUSH
57411: DOUBLE
57412: LD_INT 1
57414: DEC
57415: ST_TO_ADDR
57416: LD_EXP 10
57420: PPUSH
57421: CALL 11239 0 1
57425: PUSH
57426: FOR_TO
57427: IFFALSE 57454
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57429: LD_ADDR_EXP 53
57433: PUSH
57434: LD_EXP 53
57438: PPUSH
57439: LD_VAR 0 1
57443: PPUSH
57444: LD_INT 0
57446: PPUSH
57447: CALL_OW 1
57451: ST_TO_ADDR
57452: GO 57426
57454: POP
57455: POP
// end else
57456: GO 57501
// begin for i := 1 to 8 do
57458: LD_ADDR_VAR 0 1
57462: PUSH
57463: DOUBLE
57464: LD_INT 1
57466: DEC
57467: ST_TO_ADDR
57468: LD_INT 8
57470: PUSH
57471: FOR_TO
57472: IFFALSE 57499
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57474: LD_ADDR_EXP 53
57478: PUSH
57479: LD_EXP 53
57483: PPUSH
57484: LD_VAR 0 1
57488: PPUSH
57489: LD_INT 0
57491: PPUSH
57492: CALL_OW 1
57496: ST_TO_ADDR
57497: GO 57471
57499: POP
57500: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57501: LD_ADDR_VAR 0 3
57505: PUSH
57506: LD_EXP 2
57510: PPUSH
57511: LD_INT 0
57513: PPUSH
57514: CALL_OW 517
57518: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57519: LD_ADDR_VAR 0 1
57523: PUSH
57524: DOUBLE
57525: LD_INT 1
57527: DEC
57528: ST_TO_ADDR
57529: LD_VAR 0 3
57533: PUSH
57534: LD_INT 1
57536: ARRAY
57537: PUSH
57538: FOR_TO
57539: IFFALSE 57606
// for j := 1 to 8 do
57541: LD_ADDR_VAR 0 2
57545: PUSH
57546: DOUBLE
57547: LD_INT 1
57549: DEC
57550: ST_TO_ADDR
57551: LD_INT 8
57553: PUSH
57554: FOR_TO
57555: IFFALSE 57602
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57557: LD_VAR 0 3
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: PUSH
57566: LD_VAR 0 1
57570: ARRAY
57571: PPUSH
57572: LD_VAR 0 3
57576: PUSH
57577: LD_INT 2
57579: ARRAY
57580: PUSH
57581: LD_VAR 0 1
57585: ARRAY
57586: PPUSH
57587: LD_VAR 0 2
57591: PPUSH
57592: LD_INT 12
57594: NEG
57595: PPUSH
57596: CALL_OW 330
57600: GO 57554
57602: POP
57603: POP
57604: GO 57538
57606: POP
57607: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57608: LD_EXP 33
57612: PPUSH
57613: LD_INT 1
57615: PPUSH
57616: CALL_OW 424
// UpdateCounter ;
57620: CALL 58228 0 0
// repeat wait ( 0 0$1 ) ;
57624: LD_INT 35
57626: PPUSH
57627: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57631: LD_ADDR_VAR 0 3
57635: PUSH
57636: LD_EXP 33
57640: PPUSH
57641: LD_INT 3
57643: PUSH
57644: LD_INT 57
57646: PUSH
57647: EMPTY
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 50
57656: PUSH
57657: EMPTY
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 30
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 30
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: PPUSH
57693: CALL_OW 70
57697: ST_TO_ADDR
// if not tmp then
57698: LD_VAR 0 3
57702: NOT
57703: IFFALSE 57707
// continue ;
57705: GO 57624
// AddPoints ( tmp ) ;
57707: LD_VAR 0 3
57711: PPUSH
57712: CALL 57906 0 1
// UpdateCounter ;
57716: CALL 58228 0 0
// until false ;
57720: LD_INT 0
57722: IFFALSE 57624
// end ;
57724: PPOPN 3
57726: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
57727: LD_EXP 38
57731: PUSH
57732: LD_EXP 36
57736: AND
57737: IFFALSE 57903
57739: GO 57741
57741: DISABLE
57742: LD_INT 0
57744: PPUSH
57745: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
57746: LD_ADDR_VAR 0 2
57750: PUSH
57751: LD_EXP 2
57755: PPUSH
57756: LD_INT 0
57758: PPUSH
57759: CALL_OW 517
57763: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57764: LD_ADDR_VAR 0 1
57768: PUSH
57769: DOUBLE
57770: LD_INT 1
57772: DEC
57773: ST_TO_ADDR
57774: LD_VAR 0 2
57778: PUSH
57779: LD_INT 1
57781: ARRAY
57782: PUSH
57783: FOR_TO
57784: IFFALSE 57825
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
57786: LD_VAR 0 2
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: PUSH
57795: LD_VAR 0 1
57799: ARRAY
57800: PPUSH
57801: LD_VAR 0 2
57805: PUSH
57806: LD_INT 2
57808: ARRAY
57809: PUSH
57810: LD_VAR 0 1
57814: ARRAY
57815: PPUSH
57816: LD_INT 125
57818: PPUSH
57819: CALL_OW 495
57823: GO 57783
57825: POP
57826: POP
// repeat wait ( mpEmissions ) ;
57827: LD_EXP 36
57831: PPUSH
57832: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
57836: LD_ADDR_VAR 0 1
57840: PUSH
57841: DOUBLE
57842: LD_INT 1
57844: DEC
57845: ST_TO_ADDR
57846: LD_VAR 0 2
57850: PUSH
57851: LD_INT 1
57853: ARRAY
57854: PUSH
57855: FOR_TO
57856: IFFALSE 57897
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
57858: LD_VAR 0 2
57862: PUSH
57863: LD_INT 1
57865: ARRAY
57866: PUSH
57867: LD_VAR 0 1
57871: ARRAY
57872: PPUSH
57873: LD_VAR 0 2
57877: PUSH
57878: LD_INT 2
57880: ARRAY
57881: PUSH
57882: LD_VAR 0 1
57886: ARRAY
57887: PPUSH
57888: LD_INT 15
57890: PPUSH
57891: CALL_OW 495
57895: GO 57855
57897: POP
57898: POP
// until false ;
57899: LD_INT 0
57901: IFFALSE 57827
// end ;
57903: PPOPN 2
57905: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
57906: LD_INT 0
57908: PPUSH
57909: PPUSH
57910: PPUSH
57911: PPUSH
57912: PPUSH
// if mpTeamGame then
57913: LD_EXP 11
57917: IFFALSE 58114
// begin first := depots [ 1 ] ;
57919: LD_ADDR_VAR 0 4
57923: PUSH
57924: LD_VAR 0 1
57928: PUSH
57929: LD_INT 1
57931: ARRAY
57932: ST_TO_ADDR
// side := GetSide ( first ) ;
57933: LD_ADDR_VAR 0 6
57937: PUSH
57938: LD_VAR 0 4
57942: PPUSH
57943: CALL_OW 255
57947: ST_TO_ADDR
// for i := 1 to mpTeams do
57948: LD_ADDR_VAR 0 3
57952: PUSH
57953: DOUBLE
57954: LD_INT 1
57956: DEC
57957: ST_TO_ADDR
57958: LD_EXP 10
57962: PUSH
57963: FOR_TO
57964: IFFALSE 57998
// if side in mpTeams [ i ] then
57966: LD_VAR 0 6
57970: PUSH
57971: LD_EXP 10
57975: PUSH
57976: LD_VAR 0 3
57980: ARRAY
57981: IN
57982: IFFALSE 57996
// begin team := i ;
57984: LD_ADDR_VAR 0 5
57988: PUSH
57989: LD_VAR 0 3
57993: ST_TO_ADDR
// break ;
57994: GO 57998
// end ;
57996: GO 57963
57998: POP
57999: POP
// if not team then
58000: LD_VAR 0 5
58004: NOT
58005: IFFALSE 58009
// exit ;
58007: GO 58223
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58009: LD_EXP 33
58013: PPUSH
58014: LD_INT 81
58016: PUSH
58017: LD_VAR 0 6
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PPUSH
58026: CALL_OW 70
58030: IFFALSE 58034
// exit ;
58032: GO 58223
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58034: LD_ADDR_EXP 53
58038: PUSH
58039: LD_EXP 53
58043: PPUSH
58044: LD_VAR 0 5
58048: PPUSH
58049: LD_EXP 53
58053: PUSH
58054: LD_VAR 0 5
58058: ARRAY
58059: PUSH
58060: LD_INT 1
58062: PLUS
58063: PPUSH
58064: CALL_OW 1
58068: ST_TO_ADDR
// for i in mpTeams [ team ] do
58069: LD_ADDR_VAR 0 3
58073: PUSH
58074: LD_EXP 10
58078: PUSH
58079: LD_VAR 0 5
58083: ARRAY
58084: PUSH
58085: FOR_IN
58086: IFFALSE 58110
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58088: LD_VAR 0 3
58092: PPUSH
58093: LD_EXP 53
58097: PUSH
58098: LD_VAR 0 5
58102: ARRAY
58103: PPUSH
58104: CALL_OW 506
58108: GO 58085
58110: POP
58111: POP
// end else
58112: GO 58223
// begin first := depots [ 1 ] ;
58114: LD_ADDR_VAR 0 4
58118: PUSH
58119: LD_VAR 0 1
58123: PUSH
58124: LD_INT 1
58126: ARRAY
58127: ST_TO_ADDR
// side := GetSide ( first ) ;
58128: LD_ADDR_VAR 0 6
58132: PUSH
58133: LD_VAR 0 4
58137: PPUSH
58138: CALL_OW 255
58142: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58143: LD_EXP 33
58147: PPUSH
58148: LD_INT 81
58150: PUSH
58151: LD_VAR 0 6
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PPUSH
58160: CALL_OW 70
58164: IFFALSE 58168
// exit ;
58166: GO 58223
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58168: LD_ADDR_EXP 53
58172: PUSH
58173: LD_EXP 53
58177: PPUSH
58178: LD_VAR 0 6
58182: PPUSH
58183: LD_EXP 53
58187: PUSH
58188: LD_VAR 0 6
58192: ARRAY
58193: PUSH
58194: LD_INT 1
58196: PLUS
58197: PPUSH
58198: CALL_OW 1
58202: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58203: LD_VAR 0 6
58207: PPUSH
58208: LD_EXP 53
58212: PUSH
58213: LD_VAR 0 6
58217: ARRAY
58218: PPUSH
58219: CALL_OW 506
// end ; end ;
58223: LD_VAR 0 2
58227: RET
// function UpdateCounter ; var i ; begin
58228: LD_INT 0
58230: PPUSH
58231: PPUSH
// result := [ ] ;
58232: LD_ADDR_VAR 0 1
58236: PUSH
58237: EMPTY
58238: ST_TO_ADDR
// if mpTeamGame then
58239: LD_EXP 11
58243: IFFALSE 58310
// begin for i := 1 to mpTeams do
58245: LD_ADDR_VAR 0 2
58249: PUSH
58250: DOUBLE
58251: LD_INT 1
58253: DEC
58254: ST_TO_ADDR
58255: LD_EXP 10
58259: PUSH
58260: FOR_TO
58261: IFFALSE 58306
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58263: LD_ADDR_VAR 0 1
58267: PUSH
58268: LD_VAR 0 1
58272: PUSH
58273: LD_STRING #KingoftheHill-Team
58275: PUSH
58276: LD_VAR 0 2
58280: PUSH
58281: LD_EXP 53
58285: PUSH
58286: LD_VAR 0 2
58290: ARRAY
58291: PUSH
58292: LD_EXP 34
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: ADD
58303: ST_TO_ADDR
58304: GO 58260
58306: POP
58307: POP
// end else
58308: GO 58383
// begin for i := 1 to 8 do
58310: LD_ADDR_VAR 0 2
58314: PUSH
58315: DOUBLE
58316: LD_INT 1
58318: DEC
58319: ST_TO_ADDR
58320: LD_INT 8
58322: PUSH
58323: FOR_TO
58324: IFFALSE 58381
// if mpSidePositions [ i ] then
58326: LD_EXP 7
58330: PUSH
58331: LD_VAR 0 2
58335: ARRAY
58336: IFFALSE 58379
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58338: LD_ADDR_VAR 0 1
58342: PUSH
58343: LD_VAR 0 1
58347: PUSH
58348: LD_STRING #KingoftheHill-Player
58350: PUSH
58351: LD_VAR 0 2
58355: PUSH
58356: LD_EXP 53
58360: PUSH
58361: LD_VAR 0 2
58365: ARRAY
58366: PUSH
58367: LD_EXP 34
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ADD
58378: ST_TO_ADDR
58379: GO 58323
58381: POP
58382: POP
// end ; mpDisplayStrings := result ;
58383: LD_ADDR_EXP 37
58387: PUSH
58388: LD_VAR 0 1
58392: ST_TO_ADDR
// end ;
58393: LD_VAR 0 1
58397: RET
// export function HowMuchPointsKing ( side ) ; begin
58398: LD_INT 0
58400: PPUSH
// result := HowMuchPoints ( side ) ;
58401: LD_ADDR_VAR 0 2
58405: PUSH
58406: LD_VAR 0 1
58410: PPUSH
58411: CALL 58421 0 1
58415: ST_TO_ADDR
// end ;
58416: LD_VAR 0 2
58420: RET
// function HowMuchPoints ( side ) ; var i ; begin
58421: LD_INT 0
58423: PPUSH
58424: PPUSH
// if mpTeamGame then
58425: LD_EXP 11
58429: IFFALSE 58498
// begin for i := 1 to Count ( mpTeams ) do
58431: LD_ADDR_VAR 0 3
58435: PUSH
58436: DOUBLE
58437: LD_INT 1
58439: DEC
58440: ST_TO_ADDR
58441: LD_EXP 10
58445: PPUSH
58446: CALL 11239 0 1
58450: PUSH
58451: FOR_TO
58452: IFFALSE 58494
// begin if side in mpTeams [ i ] then
58454: LD_VAR 0 1
58458: PUSH
58459: LD_EXP 10
58463: PUSH
58464: LD_VAR 0 3
58468: ARRAY
58469: IN
58470: IFFALSE 58492
// begin result := mpKingPoints [ i ] ;
58472: LD_ADDR_VAR 0 2
58476: PUSH
58477: LD_EXP 53
58481: PUSH
58482: LD_VAR 0 3
58486: ARRAY
58487: ST_TO_ADDR
// exit ;
58488: POP
58489: POP
58490: GO 58514
// end ; end ;
58492: GO 58451
58494: POP
58495: POP
// end else
58496: GO 58514
// result := mpKingPoints [ side ] ;
58498: LD_ADDR_VAR 0 2
58502: PUSH
58503: LD_EXP 53
58507: PUSH
58508: LD_VAR 0 1
58512: ARRAY
58513: ST_TO_ADDR
// end ;
58514: LD_VAR 0 2
58518: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58519: LD_EXP 38
58523: PUSH
58524: CALL 58846 0 0
58528: AND
58529: PUSH
58530: LD_OWVAR 4
58534: AND
58535: IFFALSE 58771
58537: GO 58539
58539: DISABLE
58540: LD_INT 0
58542: PPUSH
58543: PPUSH
// begin canWin := false ;
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_INT 0
58551: ST_TO_ADDR
// if not HasPower ( your_side ) then
58552: LD_OWVAR 2
58556: PPUSH
58557: CALL 58886 0 1
58561: NOT
58562: IFFALSE 58573
// begin Multiplayer_Loose_Message ;
58564: CALL_OW 521
// enable ( mpLose ) ;
58568: LD_INT 102
58570: ENABLE_MARKED
// end else
58571: GO 58771
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58573: LD_ADDR_VAR 0 2
58577: PUSH
58578: LD_OWVAR 2
58582: PPUSH
58583: CALL 58421 0 1
58587: PUSH
58588: LD_EXP 34
58592: GREATEREQUAL
58593: PUSH
58594: LD_OWVAR 2
58598: PPUSH
58599: CALL 58886 0 1
58603: AND
58604: PUSH
58605: CALL 58774 0 0
58609: NOT
58610: OR
58611: ST_TO_ADDR
// for i := 1 to 8 do
58612: LD_ADDR_VAR 0 1
58616: PUSH
58617: DOUBLE
58618: LD_INT 1
58620: DEC
58621: ST_TO_ADDR
58622: LD_INT 8
58624: PUSH
58625: FOR_TO
58626: IFFALSE 58757
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58628: LD_EXP 7
58632: PUSH
58633: LD_VAR 0 1
58637: ARRAY
58638: PUSH
58639: LD_VAR 0 1
58643: PPUSH
58644: CALL_OW 108
58648: AND
58649: PUSH
58650: LD_VAR 0 1
58654: PUSH
58655: LD_OWVAR 2
58659: NONEQUAL
58660: AND
58661: IFFALSE 58755
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58663: LD_EXP 8
58667: PUSH
58668: LD_VAR 0 1
58672: ARRAY
58673: NOT
58674: PUSH
58675: LD_EXP 8
58679: PUSH
58680: LD_VAR 0 1
58684: ARRAY
58685: PUSH
58686: LD_EXP 8
58690: PUSH
58691: LD_OWVAR 2
58695: ARRAY
58696: NONEQUAL
58697: PUSH
58698: LD_OWVAR 2
58702: PPUSH
58703: LD_VAR 0 1
58707: PPUSH
58708: CALL_OW 81
58712: PUSH
58713: LD_INT 1
58715: NONEQUAL
58716: AND
58717: OR
58718: IFFALSE 58755
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
58720: LD_VAR 0 1
58724: PPUSH
58725: CALL 58421 0 1
58729: PUSH
58730: LD_EXP 34
58734: GREATEREQUAL
58735: PUSH
58736: LD_VAR 0 1
58740: PPUSH
58741: CALL 58886 0 1
58745: AND
58746: IFFALSE 58755
// begin enable ( mpLose ) ;
58748: LD_INT 102
58750: ENABLE_MARKED
// exit ;
58751: POP
58752: POP
58753: GO 58771
// end ;
58755: GO 58625
58757: POP
58758: POP
// if canWin then
58759: LD_VAR 0 2
58763: IFFALSE 58770
// enable ( mpWin ) else
58765: LD_INT 101
58767: ENABLE_MARKED
58768: GO 58771
// enable ;
58770: ENABLE
// end ; end ;
58771: PPOPN 2
58773: END
// function EnemiesInGame ; var i ; begin
58774: LD_INT 0
58776: PPUSH
58777: PPUSH
// result := false ;
58778: LD_ADDR_VAR 0 1
58782: PUSH
58783: LD_INT 0
58785: ST_TO_ADDR
// for i := 1 to 8 do
58786: LD_ADDR_VAR 0 2
58790: PUSH
58791: DOUBLE
58792: LD_INT 1
58794: DEC
58795: ST_TO_ADDR
58796: LD_INT 8
58798: PUSH
58799: FOR_TO
58800: IFFALSE 58839
// if i <> your_side and HasPower ( i ) then
58802: LD_VAR 0 2
58806: PUSH
58807: LD_OWVAR 2
58811: NONEQUAL
58812: PUSH
58813: LD_VAR 0 2
58817: PPUSH
58818: CALL 58886 0 1
58822: AND
58823: IFFALSE 58837
// begin result := true ;
58825: LD_ADDR_VAR 0 1
58829: PUSH
58830: LD_INT 1
58832: ST_TO_ADDR
// exit ;
58833: POP
58834: POP
58835: GO 58841
// end ;
58837: GO 58799
58839: POP
58840: POP
// end ;
58841: LD_VAR 0 1
58845: RET
// function CanWinLoose ; begin
58846: LD_INT 0
58848: PPUSH
// result := true ;
58849: LD_ADDR_VAR 0 1
58853: PUSH
58854: LD_INT 1
58856: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
58857: CALL_OW 531
58861: PUSH
58862: CALL_OW 519
58866: PUSH
58867: LD_INT 1
58869: GREATER
58870: AND
58871: IFFALSE 58881
// result := false ;
58873: LD_ADDR_VAR 0 1
58877: PUSH
58878: LD_INT 0
58880: ST_TO_ADDR
// end ;
58881: LD_VAR 0 1
58885: RET
// function HasPower ( i ) ; begin
58886: LD_INT 0
58888: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
58889: LD_ADDR_VAR 0 2
58893: PUSH
58894: LD_INT 22
58896: PUSH
58897: LD_VAR 0 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: LD_INT 21
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 33
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 33
58931: PUSH
58932: LD_INT 5
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PPUSH
58949: CALL_OW 69
58953: ST_TO_ADDR
// end ; end_of_file
58954: LD_VAR 0 2
58958: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
58959: PPOPN 6
58961: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58962: CALL 58991 0 0
// end ; end_of_file
58966: PPOPN 1
58968: END
// every 0 0$1 do
58969: GO 58971
58971: DISABLE
// begin enable ;
58972: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58973: LD_STRING updateTimer(
58975: PUSH
58976: LD_OWVAR 1
58980: STR
58981: PUSH
58982: LD_STRING );
58984: STR
58985: PPUSH
58986: CALL_OW 559
// end ;
58990: END
// export function SOS_MapStart ( ) ; begin
58991: LD_INT 0
58993: PPUSH
// UpdateFactoryWaypoints ( ) ;
58994: CALL 59363 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58998: CALL 59615 0 0
// end ;
59002: LD_VAR 0 1
59006: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59007: LD_INT 0
59009: PPUSH
// end ;
59010: LD_VAR 0 12
59014: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59015: LD_INT 0
59017: PPUSH
59018: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59019: LD_VAR 0 1
59023: NOT
59024: PUSH
59025: LD_VAR 0 2
59029: PPUSH
59030: LD_VAR 0 3
59034: PPUSH
59035: CALL_OW 488
59039: NOT
59040: OR
59041: PUSH
59042: LD_VAR 0 1
59046: PPUSH
59047: CALL_OW 266
59051: PUSH
59052: LD_INT 3
59054: NONEQUAL
59055: PUSH
59056: LD_VAR 0 1
59060: PPUSH
59061: CALL_OW 247
59065: PUSH
59066: LD_INT 1
59068: EQUAL
59069: NOT
59070: AND
59071: OR
59072: IFFALSE 59076
// exit ;
59074: GO 59358
// if GetType ( factory ) = unit_human then
59076: LD_VAR 0 1
59080: PPUSH
59081: CALL_OW 247
59085: PUSH
59086: LD_INT 1
59088: EQUAL
59089: IFFALSE 59106
// factory := IsInUnit ( factory ) ;
59091: LD_ADDR_VAR 0 1
59095: PUSH
59096: LD_VAR 0 1
59100: PPUSH
59101: CALL_OW 310
59105: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59106: LD_VAR 0 1
59110: PPUSH
59111: CALL_OW 266
59115: PUSH
59116: LD_INT 3
59118: NONEQUAL
59119: IFFALSE 59123
// exit ;
59121: GO 59358
// for i := 1 to Count ( factoryWaypoints ) do
59123: LD_ADDR_VAR 0 5
59127: PUSH
59128: DOUBLE
59129: LD_INT 1
59131: DEC
59132: ST_TO_ADDR
59133: LD_EXP 54
59137: PPUSH
59138: CALL 11239 0 1
59142: PUSH
59143: FOR_TO
59144: IFFALSE 59306
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59146: LD_VAR 0 2
59150: PPUSH
59151: LD_VAR 0 3
59155: PPUSH
59156: CALL_OW 428
59160: PUSH
59161: LD_EXP 54
59165: PUSH
59166: LD_VAR 0 5
59170: ARRAY
59171: PUSH
59172: LD_INT 2
59174: ARRAY
59175: EQUAL
59176: IFFALSE 59208
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59178: LD_ADDR_EXP 54
59182: PUSH
59183: LD_EXP 54
59187: PPUSH
59188: LD_VAR 0 5
59192: PPUSH
59193: CALL_OW 3
59197: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59198: CALL 59363 0 0
// exit ;
59202: POP
59203: POP
59204: GO 59358
// end else
59206: GO 59304
// if factory = factoryWaypoints [ i ] [ 2 ] then
59208: LD_VAR 0 1
59212: PUSH
59213: LD_EXP 54
59217: PUSH
59218: LD_VAR 0 5
59222: ARRAY
59223: PUSH
59224: LD_INT 2
59226: ARRAY
59227: EQUAL
59228: IFFALSE 59304
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59230: LD_ADDR_EXP 54
59234: PUSH
59235: LD_EXP 54
59239: PPUSH
59240: LD_VAR 0 5
59244: PPUSH
59245: CALL_OW 3
59249: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59250: LD_ADDR_EXP 54
59254: PUSH
59255: LD_EXP 54
59259: PPUSH
59260: LD_VAR 0 1
59264: PPUSH
59265: CALL_OW 255
59269: PUSH
59270: LD_VAR 0 1
59274: PUSH
59275: LD_VAR 0 2
59279: PUSH
59280: LD_VAR 0 3
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: PPUSH
59291: CALL 46848 0 2
59295: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59296: CALL 59363 0 0
// exit ;
59300: POP
59301: POP
59302: GO 59358
// end ; end ;
59304: GO 59143
59306: POP
59307: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59308: LD_ADDR_EXP 54
59312: PUSH
59313: LD_EXP 54
59317: PPUSH
59318: LD_VAR 0 1
59322: PPUSH
59323: CALL_OW 255
59327: PUSH
59328: LD_VAR 0 1
59332: PUSH
59333: LD_VAR 0 2
59337: PUSH
59338: LD_VAR 0 3
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: PPUSH
59349: CALL 46848 0 2
59353: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59354: CALL 59363 0 0
// end ;
59358: LD_VAR 0 4
59362: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59363: LD_INT 0
59365: PPUSH
59366: PPUSH
59367: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59368: LD_STRING resetFactoryWaypoint();
59370: PPUSH
59371: CALL_OW 559
// if factoryWaypoints then
59375: LD_EXP 54
59379: IFFALSE 59500
// begin list := factoryWaypoints ;
59381: LD_ADDR_VAR 0 3
59385: PUSH
59386: LD_EXP 54
59390: ST_TO_ADDR
// for i := 1 to list do
59391: LD_ADDR_VAR 0 2
59395: PUSH
59396: DOUBLE
59397: LD_INT 1
59399: DEC
59400: ST_TO_ADDR
59401: LD_VAR 0 3
59405: PUSH
59406: FOR_TO
59407: IFFALSE 59498
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59409: LD_STRING setFactoryWaypointXY(
59411: PUSH
59412: LD_VAR 0 3
59416: PUSH
59417: LD_VAR 0 2
59421: ARRAY
59422: PUSH
59423: LD_INT 1
59425: ARRAY
59426: STR
59427: PUSH
59428: LD_STRING ,
59430: STR
59431: PUSH
59432: LD_VAR 0 3
59436: PUSH
59437: LD_VAR 0 2
59441: ARRAY
59442: PUSH
59443: LD_INT 2
59445: ARRAY
59446: STR
59447: PUSH
59448: LD_STRING ,
59450: STR
59451: PUSH
59452: LD_VAR 0 3
59456: PUSH
59457: LD_VAR 0 2
59461: ARRAY
59462: PUSH
59463: LD_INT 3
59465: ARRAY
59466: STR
59467: PUSH
59468: LD_STRING ,
59470: STR
59471: PUSH
59472: LD_VAR 0 3
59476: PUSH
59477: LD_VAR 0 2
59481: ARRAY
59482: PUSH
59483: LD_INT 4
59485: ARRAY
59486: STR
59487: PUSH
59488: LD_STRING )
59490: STR
59491: PPUSH
59492: CALL_OW 559
59496: GO 59406
59498: POP
59499: POP
// end ; end ;
59500: LD_VAR 0 1
59504: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59505: LD_INT 0
59507: PPUSH
// if HexInfo ( x , y ) = warehouse then
59508: LD_VAR 0 2
59512: PPUSH
59513: LD_VAR 0 3
59517: PPUSH
59518: CALL_OW 428
59522: PUSH
59523: LD_VAR 0 1
59527: EQUAL
59528: IFFALSE 59555
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59530: LD_ADDR_EXP 55
59534: PUSH
59535: LD_EXP 55
59539: PPUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: LD_INT 0
59547: PPUSH
59548: CALL_OW 1
59552: ST_TO_ADDR
59553: GO 59606
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59555: LD_ADDR_EXP 55
59559: PUSH
59560: LD_EXP 55
59564: PPUSH
59565: LD_VAR 0 1
59569: PPUSH
59570: LD_VAR 0 1
59574: PPUSH
59575: CALL_OW 255
59579: PUSH
59580: LD_VAR 0 1
59584: PUSH
59585: LD_VAR 0 2
59589: PUSH
59590: LD_VAR 0 3
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: PPUSH
59601: CALL_OW 1
59605: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59606: CALL 59615 0 0
// end ;
59610: LD_VAR 0 4
59614: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59615: LD_INT 0
59617: PPUSH
59618: PPUSH
59619: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59620: LD_STRING resetWarehouseGatheringPoints();
59622: PPUSH
59623: CALL_OW 559
// if warehouseGatheringPoints then
59627: LD_EXP 55
59631: IFFALSE 59757
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59633: LD_ADDR_VAR 0 3
59637: PUSH
59638: LD_EXP 55
59642: PPUSH
59643: CALL 50610 0 1
59647: ST_TO_ADDR
// for i := 1 to list do
59648: LD_ADDR_VAR 0 2
59652: PUSH
59653: DOUBLE
59654: LD_INT 1
59656: DEC
59657: ST_TO_ADDR
59658: LD_VAR 0 3
59662: PUSH
59663: FOR_TO
59664: IFFALSE 59755
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59666: LD_STRING setWarehouseGatheringPointXY(
59668: PUSH
59669: LD_VAR 0 3
59673: PUSH
59674: LD_VAR 0 2
59678: ARRAY
59679: PUSH
59680: LD_INT 1
59682: ARRAY
59683: STR
59684: PUSH
59685: LD_STRING ,
59687: STR
59688: PUSH
59689: LD_VAR 0 3
59693: PUSH
59694: LD_VAR 0 2
59698: ARRAY
59699: PUSH
59700: LD_INT 2
59702: ARRAY
59703: STR
59704: PUSH
59705: LD_STRING ,
59707: STR
59708: PUSH
59709: LD_VAR 0 3
59713: PUSH
59714: LD_VAR 0 2
59718: ARRAY
59719: PUSH
59720: LD_INT 3
59722: ARRAY
59723: STR
59724: PUSH
59725: LD_STRING ,
59727: STR
59728: PUSH
59729: LD_VAR 0 3
59733: PUSH
59734: LD_VAR 0 2
59738: ARRAY
59739: PUSH
59740: LD_INT 4
59742: ARRAY
59743: STR
59744: PUSH
59745: LD_STRING )
59747: STR
59748: PPUSH
59749: CALL_OW 559
59753: GO 59663
59755: POP
59756: POP
// end ; end ;
59757: LD_VAR 0 1
59761: RET
