// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2746 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3061 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 33
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 34
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 36
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 35
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 32
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 51408 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 51408 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 51408 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 51408 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 51408 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 51408 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 11260 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 51241 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 51241 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 51241 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 51241 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 51241 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 51241 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 51241 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 51241 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 51241 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 51241 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 51241 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 51241 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 51408 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 51408 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 51408 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 51408 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 51408 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 51408 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 51408 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 51408 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 51408 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 51408 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 51408 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 51408 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 51408 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 51408 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 51408 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 51408 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 51408 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 51408 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 48230 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 52116 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 7583 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 52133 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 8186 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 52174 0 2
2721: PPOPN 2
2723: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 8239 0 3
2743: PPOPN 3
2745: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
// disable ( mpActive ) ;
2750: LD_INT 100
2752: DISABLE_MARKED
// disable ( mpWin ) ;
2753: LD_INT 101
2755: DISABLE_MARKED
// disable ( mpLose ) ;
2756: LD_INT 102
2758: DISABLE_MARKED
// mpGameType := 0 ;
2759: LD_ADDR_EXP 3
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// mpGameSettings := [ ] ;
2767: LD_ADDR_EXP 6
2771: PUSH
2772: EMPTY
2773: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2774: LD_ADDR_EXP 4
2778: PUSH
2779: EMPTY
2780: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2781: LD_ADDR_EXP 5
2785: PUSH
2786: EMPTY
2787: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2788: LD_ADDR_EXP 29
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2803: LD_ADDR_EXP 12
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2810: LD_ADDR_EXP 13
2814: PUSH
2815: EMPTY
2816: ST_TO_ADDR
// mpDepots := [ ] ;
2817: LD_ADDR_EXP 14
2821: PUSH
2822: EMPTY
2823: ST_TO_ADDR
// mpBuildings := [ ] ;
2824: LD_ADDR_EXP 17
2828: PUSH
2829: EMPTY
2830: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2831: LD_ADDR_EXP 18
2835: PUSH
2836: EMPTY
2837: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2838: LD_ADDR_EXP 19
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2845: LD_ADDR_EXP 20
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpStartingResources := [ ] ;
2852: LD_ADDR_EXP 15
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// mpStartPos := [ ] ;
2859: LD_ADDR_EXP 21
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2866: LD_ADDR_EXP 22
2870: PUSH
2871: LD_INT 1
2873: NEG
2874: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2875: LD_ADDR_EXP 23
2879: PUSH
2880: EMPTY
2881: ST_TO_ADDR
// mpApemans := [ ] ;
2882: LD_ADDR_EXP 30
2886: PUSH
2887: EMPTY
2888: ST_TO_ADDR
// mpApemansArea := [ ] ;
2889: LD_ADDR_EXP 31
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpRespawn := [ ] ;
2896: LD_ADDR_EXP 32
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpKingArea := 0 ;
2903: LD_ADDR_EXP 33
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// mpPoints := [ ] ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: EMPTY
2917: ST_TO_ADDR
// mpVehicles := 0 ;
2918: LD_ADDR_EXP 35
2922: PUSH
2923: LD_INT 0
2925: ST_TO_ADDR
// mpShipments := 0 ;
2926: LD_ADDR_EXP 27
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2934: LD_ADDR_EXP 39
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: ST_TO_ADDR
// mpEmissions := 0 ;
2965: LD_ADDR_EXP 36
2969: PUSH
2970: LD_INT 0
2972: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2973: LD_ADDR_EXP 25
2977: PUSH
2978: LD_INT 3
2980: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2981: LD_ADDR_EXP 24
2985: PUSH
2986: LD_INT 15
2988: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2989: LD_ADDR_EXP 37
2993: PUSH
2994: LD_INT 0
2996: ST_TO_ADDR
// mpGameActive := false ;
2997: LD_ADDR_EXP 38
3001: PUSH
3002: LD_INT 0
3004: ST_TO_ADDR
// mpBlockRespThread := false ;
3005: LD_ADDR_EXP 40
3009: PUSH
3010: LD_INT 0
3012: ST_TO_ADDR
// for i := 1 to 32 do
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: DOUBLE
3019: LD_INT 1
3021: DEC
3022: ST_TO_ADDR
3023: LD_INT 32
3025: PUSH
3026: FOR_TO
3027: IFFALSE 3054
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3029: LD_ADDR_EXP 6
3033: PUSH
3034: LD_EXP 6
3038: PPUSH
3039: LD_VAR 0 2
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 1
3051: ST_TO_ADDR
3052: GO 3026
3054: POP
3055: POP
// end ;
3056: LD_VAR 0 1
3060: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3061: LD_INT 0
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
3072: PPUSH
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3077: LD_ADDR_VAR 0 14
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: LD_INT 2
3087: PUSH
3088: LD_INT 3
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: ST_TO_ADDR
// for i in gameTypes do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_VAR 0 14
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3116
// disable ( i ) ;
3109: LD_VAR 0 2
3113: DISABLE_MARKED
3114: GO 3106
3116: POP
3117: POP
// if Multiplayer then
3118: LD_OWVAR 4
3122: IFFALSE 3306
// begin mpGameType := mp_game_type ;
3124: LD_ADDR_EXP 3
3128: PUSH
3129: LD_OWVAR 6
3133: ST_TO_ADDR
// your_side := mp_player_side ;
3134: LD_ADDR_OWVAR 2
3138: PUSH
3139: LD_OWVAR 7
3143: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_OWVAR 17
3153: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3154: LD_ADDR_EXP 8
3158: PUSH
3159: LD_OWVAR 15
3163: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3164: LD_ADDR_EXP 9
3168: PUSH
3169: LD_OWVAR 16
3173: ST_TO_ADDR
// mpTeams := mp_teams ;
3174: LD_ADDR_EXP 10
3178: PUSH
3179: LD_OWVAR 12
3183: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3184: LD_ADDR_VAR 0 2
3188: PUSH
3189: DOUBLE
3190: LD_INT 1
3192: DEC
3193: ST_TO_ADDR
3194: LD_EXP 4
3198: PPUSH
3199: CALL 11260 0 1
3203: PUSH
3204: FOR_TO
3205: IFFALSE 3281
// begin setting := mpGameSettingsKeys [ i ] ;
3207: LD_ADDR_VAR 0 12
3211: PUSH
3212: LD_EXP 4
3216: PUSH
3217: LD_VAR 0 2
3221: ARRAY
3222: ST_TO_ADDR
// if setting then
3223: LD_VAR 0 12
3227: IFFALSE 3279
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3229: LD_ADDR_EXP 6
3233: PUSH
3234: LD_EXP 6
3238: PPUSH
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_EXP 5
3248: PUSH
3249: LD_VAR 0 2
3253: ARRAY
3254: PUSH
3255: LD_VAR 0 2
3259: PUSH
3260: LD_INT 1
3262: MINUS
3263: PPUSH
3264: CALL_OW 426
3268: PUSH
3269: LD_INT 1
3271: PLUS
3272: ARRAY
3273: PPUSH
3274: CALL_OW 1
3278: ST_TO_ADDR
// end ;
3279: GO 3204
3281: POP
3282: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3283: LD_ADDR_EXP 11
3287: PUSH
3288: LD_EXP 8
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: EMPTY
3297: LIST
3298: DIFF
3299: PUSH
3300: LD_INT 1
3302: GREATER
3303: ST_TO_ADDR
// end else
3304: GO 3306
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3306: LD_EXP 3
3310: PPUSH
3311: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3315: LD_EXP 18
3319: PPUSH
3320: CALL 11260 0 1
3324: IFFALSE 3355
// begin for i in mpMarkedAreas do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_EXP 18
3335: PUSH
3336: FOR_IN
3337: IFFALSE 3353
// SetAreaMapShow ( i , 0 ) ;
3339: LD_VAR 0 2
3343: PPUSH
3344: LD_INT 0
3346: PPUSH
3347: CALL_OW 424
3351: GO 3336
3353: POP
3354: POP
// end ; for i := 1 to 8 do
3355: LD_ADDR_VAR 0 2
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_INT 8
3367: PUSH
3368: FOR_TO
3369: IFFALSE 4585
// begin if not mpSidePositions [ i ] then
3371: LD_EXP 7
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: NOT
3382: IFFALSE 3386
// continue ;
3384: GO 3368
// side := i ;
3386: LD_ADDR_VAR 0 7
3390: PUSH
3391: LD_VAR 0 2
3395: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3396: LD_ADDR_VAR 0 9
3400: PUSH
3401: LD_EXP 9
3405: PUSH
3406: LD_VAR 0 2
3410: ARRAY
3411: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3412: LD_ADDR_VAR 0 8
3416: PUSH
3417: LD_EXP 7
3421: PUSH
3422: LD_VAR 0 2
3426: ARRAY
3427: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3428: LD_EXP 12
3432: PPUSH
3433: CALL 11260 0 1
3437: IFFALSE 3514
// begin for j in mpOilDeposits [ pos ] do
3439: LD_ADDR_VAR 0 3
3443: PUSH
3444: LD_EXP 12
3448: PUSH
3449: LD_VAR 0 8
3453: ARRAY
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3512
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3458: LD_VAR 0 3
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: LD_VAR 0 3
3471: PUSH
3472: LD_INT 2
3474: ARRAY
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3483: LD_VAR 0 3
3487: PUSH
3488: LD_INT 1
3490: ARRAY
3491: PPUSH
3492: LD_VAR 0 3
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: PPUSH
3501: LD_VAR 0 7
3505: PPUSH
3506: CALL_OW 441
// end ;
3510: GO 3455
3512: POP
3513: POP
// end ; if Count ( mpSibDeposits ) then
3514: LD_EXP 13
3518: PPUSH
3519: CALL 11260 0 1
3523: IFFALSE 3600
// begin for j in mpSibDeposits [ pos ] do
3525: LD_ADDR_VAR 0 3
3529: PUSH
3530: LD_EXP 13
3534: PUSH
3535: LD_VAR 0 8
3539: ARRAY
3540: PUSH
3541: FOR_IN
3542: IFFALSE 3598
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3544: LD_VAR 0 3
3548: PUSH
3549: LD_INT 1
3551: ARRAY
3552: PPUSH
3553: LD_VAR 0 3
3557: PUSH
3558: LD_INT 2
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PPUSH
3565: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3569: LD_VAR 0 3
3573: PUSH
3574: LD_INT 1
3576: ARRAY
3577: PPUSH
3578: LD_VAR 0 3
3582: PUSH
3583: LD_INT 2
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PPUSH
3592: CALL_OW 441
// end ;
3596: GO 3541
3598: POP
3599: POP
// end ; InitBc ;
3600: CALL_OW 21
// InitUc ;
3604: CALL_OW 18
// uc_side := side ;
3608: LD_ADDR_OWVAR 20
3612: PUSH
3613: LD_VAR 0 7
3617: ST_TO_ADDR
// uc_nation := nation ;
3618: LD_ADDR_OWVAR 21
3622: PUSH
3623: LD_VAR 0 9
3627: ST_TO_ADDR
// if Count ( mpDepots ) then
3628: LD_EXP 14
3632: PPUSH
3633: CALL 11260 0 1
3637: IFFALSE 3807
// begin bc_level := 0 ;
3639: LD_ADDR_OWVAR 43
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// bc_type := b_depot ;
3647: LD_ADDR_OWVAR 42
3651: PUSH
3652: LD_INT 0
3654: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3655: LD_ADDR_VAR 0 4
3659: PUSH
3660: LD_EXP 14
3664: PUSH
3665: LD_VAR 0 8
3669: ARRAY
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_EXP 14
3679: PUSH
3680: LD_VAR 0 8
3684: ARRAY
3685: PUSH
3686: LD_INT 2
3688: ARRAY
3689: PPUSH
3690: LD_EXP 14
3694: PUSH
3695: LD_VAR 0 8
3699: ARRAY
3700: PUSH
3701: LD_INT 3
3703: ARRAY
3704: PPUSH
3705: CALL_OW 47
3709: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_STRING @
3717: PUSH
3718: LD_VAR 0 7
3722: STR
3723: PPUSH
3724: CALL_OW 500
// SetTag ( b , side ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_VAR 0 7
3737: PPUSH
3738: CALL_OW 109
// if Count ( mpStartingResources ) then
3742: LD_EXP 15
3746: PPUSH
3747: CALL 11260 0 1
3751: IFFALSE 3805
// begin for j := 1 to mpStartingResources do
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_EXP 15
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3803
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3771: LD_VAR 0 4
3775: PPUSH
3776: CALL_OW 274
3780: PPUSH
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_EXP 15
3790: PUSH
3791: LD_VAR 0 3
3795: ARRAY
3796: PPUSH
3797: CALL_OW 277
3801: GO 3768
3803: POP
3804: POP
// end ; end else
3805: GO 3954
// if Count ( mpStartingResources ) then
3807: LD_EXP 15
3811: PPUSH
3812: CALL 11260 0 1
3816: IFFALSE 3954
// begin for j := 1 to mpStartingResources do
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_EXP 15
3832: PUSH
3833: FOR_TO
3834: IFFALSE 3952
// begin resources := mpStartingResources [ j ] ;
3836: LD_ADDR_VAR 0 13
3840: PUSH
3841: LD_EXP 15
3845: PUSH
3846: LD_VAR 0 3
3850: ARRAY
3851: ST_TO_ADDR
// repeat if resources >= 50 then
3852: LD_VAR 0 13
3856: PUSH
3857: LD_INT 50
3859: GREATEREQUAL
3860: IFFALSE 3906
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3862: LD_VAR 0 3
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_VAR 0 6
3879: PPUSH
3880: LD_INT 4
3882: PPUSH
3883: LD_INT 0
3885: PPUSH
3886: CALL_OW 60
// resources := resources - 50 ;
3890: LD_ADDR_VAR 0 13
3894: PUSH
3895: LD_VAR 0 13
3899: PUSH
3900: LD_INT 50
3902: MINUS
3903: ST_TO_ADDR
// end else
3904: GO 3940
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3906: LD_VAR 0 3
3910: PPUSH
3911: LD_VAR 0 13
3915: PUSH
3916: LD_INT 10
3918: DIV
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: LD_VAR 0 6
3929: PPUSH
3930: LD_INT 4
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 60
// until resources <= 0 ;
3940: LD_VAR 0 13
3944: PUSH
3945: LD_INT 0
3947: LESSEQUAL
3948: IFFALSE 3852
// end ;
3950: GO 3833
3952: POP
3953: POP
// end ; if Count ( mpBuildings ) then
3954: LD_EXP 17
3958: PPUSH
3959: CALL 11260 0 1
3963: IFFALSE 4041
// begin for j in mpBuildings [ pos ] do
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: LD_EXP 17
3974: PUSH
3975: LD_VAR 0 8
3979: ARRAY
3980: PUSH
3981: FOR_IN
3982: IFFALSE 4039
// begin bc_level := 0 ;
3984: LD_ADDR_OWVAR 43
3988: PUSH
3989: LD_INT 0
3991: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3992: LD_ADDR_OWVAR 42
3996: PUSH
3997: LD_VAR 0 3
4001: PUSH
4002: LD_INT 1
4004: ARRAY
4005: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4006: LD_VAR 0 3
4010: PUSH
4011: LD_INT 2
4013: ARRAY
4014: PPUSH
4015: LD_VAR 0 3
4019: PUSH
4020: LD_INT 3
4022: ARRAY
4023: PPUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_INT 4
4031: ARRAY
4032: PPUSH
4033: CALL_OW 47
// end ;
4037: GO 3981
4039: POP
4040: POP
// end ; if mpBattleFlag > - 1 then
4041: LD_EXP 22
4045: PUSH
4046: LD_INT 1
4048: NEG
4049: GREATER
4050: IFFALSE 4209
// begin x := mpStartPos [ pos ] [ 1 ] ;
4052: LD_ADDR_VAR 0 5
4056: PUSH
4057: LD_EXP 21
4061: PUSH
4062: LD_VAR 0 8
4066: ARRAY
4067: PUSH
4068: LD_INT 1
4070: ARRAY
4071: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4072: LD_ADDR_VAR 0 6
4076: PUSH
4077: LD_EXP 21
4081: PUSH
4082: LD_VAR 0 8
4086: ARRAY
4087: PUSH
4088: LD_INT 2
4090: ARRAY
4091: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4092: LD_VAR 0 5
4096: PPUSH
4097: LD_VAR 0 6
4101: PPUSH
4102: LD_INT 12
4104: PPUSH
4105: LD_INT 2
4107: PPUSH
4108: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4112: LD_ADDR_EXP 23
4116: PUSH
4117: LD_EXP 23
4121: PPUSH
4122: LD_VAR 0 7
4126: PPUSH
4127: LD_VAR 0 7
4131: PPUSH
4132: LD_VAR 0 5
4136: PPUSH
4137: LD_VAR 0 6
4141: PPUSH
4142: LD_INT 1
4144: PUSH
4145: LD_INT 100
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 70
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 3
4164: PUSH
4165: LD_INT 40
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 10
4174: PUSH
4175: LD_INT 25
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 20
4184: PUSH
4185: LD_INT 100
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 418
4203: PPUSH
4204: CALL_OW 1
4208: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4209: LD_EXP 26
4213: PUSH
4214: LD_INT 20
4216: PPUSH
4217: LD_VAR 0 7
4221: PPUSH
4222: CALL_OW 321
4226: PUSH
4227: LD_INT 1
4229: EQUAL
4230: AND
4231: IFFALSE 4248
// SetTech ( tech_SibDet , side , state_researched ) ;
4233: LD_INT 20
4235: PPUSH
4236: LD_VAR 0 7
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4248: LD_INT 24
4250: PPUSH
4251: LD_VAR 0 7
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 322
// if mpSibBomb = 1 then
4263: LD_EXP 28
4267: PUSH
4268: LD_INT 1
4270: EQUAL
4271: IFFALSE 4290
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4273: LD_INT 25
4275: PPUSH
4276: LD_VAR 0 7
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: CALL_OW 322
// end else
4288: GO 4305
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4290: LD_INT 25
4292: PPUSH
4293: LD_VAR 0 7
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 322
// end ; if mpVehicles then
4305: LD_EXP 35
4309: IFFALSE 4408
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: LD_VAR 0 7
4320: PPUSH
4321: LD_VAR 0 9
4325: PPUSH
4326: LD_EXP 35
4330: PPUSH
4331: CALL 5495 0 3
4335: PUSH
4336: FOR_IN
4337: IFFALSE 4406
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4339: LD_VAR 0 3
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: LD_INT 5
4349: PPUSH
4350: CALL_OW 12
4354: PPUSH
4355: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4359: LD_VAR 0 3
4363: PPUSH
4364: LD_EXP 21
4368: PUSH
4369: LD_VAR 0 8
4373: ARRAY
4374: PUSH
4375: LD_INT 1
4377: ARRAY
4378: PPUSH
4379: LD_EXP 21
4383: PUSH
4384: LD_VAR 0 8
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: LD_INT 12
4396: PPUSH
4397: LD_INT 0
4399: PPUSH
4400: CALL_OW 50
// end ;
4404: GO 4336
4406: POP
4407: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4408: LD_ADDR_VAR 0 11
4412: PUSH
4413: LD_VAR 0 7
4417: PPUSH
4418: LD_VAR 0 9
4422: PPUSH
4423: LD_EXP 24
4427: PPUSH
4428: LD_EXP 25
4432: PPUSH
4433: CALL 4997 0 4
4437: ST_TO_ADDR
// for j in team do
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: LD_VAR 0 11
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4498
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_EXP 21
4460: PUSH
4461: LD_VAR 0 8
4465: ARRAY
4466: PUSH
4467: LD_INT 1
4469: ARRAY
4470: PPUSH
4471: LD_EXP 21
4475: PUSH
4476: LD_VAR 0 8
4480: ARRAY
4481: PUSH
4482: LD_INT 2
4484: ARRAY
4485: PPUSH
4486: LD_INT 12
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 50
4496: GO 4448
4498: POP
4499: POP
// if mpApemans then
4500: LD_EXP 30
4504: IFFALSE 4583
// begin for j := 1 to mpApemans do
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 30
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4581
// begin PrepareApeman ( - 5 ) ;
4524: LD_INT 5
4526: NEG
4527: PPUSH
4528: CALL 43117 0 1
// ape := CreateHuman ;
4532: LD_ADDR_VAR 0 10
4536: PUSH
4537: CALL_OW 44
4541: ST_TO_ADDR
// SetTag ( ape , side ) ;
4542: LD_VAR 0 10
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4556: LD_VAR 0 10
4560: PPUSH
4561: LD_EXP 31
4565: PUSH
4566: LD_VAR 0 8
4570: ARRAY
4571: PPUSH
4572: LD_INT 0
4574: PPUSH
4575: CALL_OW 49
// end ;
4579: GO 4521
4581: POP
4582: POP
// end ; end ;
4583: GO 3368
4585: POP
4586: POP
// if not mpTeamGame then
4587: LD_EXP 11
4591: NOT
4592: IFFALSE 4690
// begin for i := 1 to 8 do
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: DOUBLE
4600: LD_INT 1
4602: DEC
4603: ST_TO_ADDR
4604: LD_INT 8
4606: PUSH
4607: FOR_TO
4608: IFFALSE 4686
// for j := 1 to 8 do
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: DOUBLE
4616: LD_INT 1
4618: DEC
4619: ST_TO_ADDR
4620: LD_INT 8
4622: PUSH
4623: FOR_TO
4624: IFFALSE 4682
// if i <> j then
4626: LD_VAR 0 2
4630: PUSH
4631: LD_VAR 0 3
4635: NONEQUAL
4636: IFFALSE 4660
// SetAttitude ( i , j , att_neutral , true ) else
4638: LD_VAR 0 2
4642: PPUSH
4643: LD_VAR 0 3
4647: PPUSH
4648: LD_INT 0
4650: PPUSH
4651: LD_INT 1
4653: PPUSH
4654: CALL_OW 80
4658: GO 4680
// SetAttitude ( i , j , att_friend , true ) ;
4660: LD_VAR 0 2
4664: PPUSH
4665: LD_VAR 0 3
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 80
4680: GO 4623
4682: POP
4683: POP
4684: GO 4607
4686: POP
4687: POP
// end else
4688: GO 4865
// begin if mpSharedVision then
4690: LD_EXP 16
4694: IFFALSE 4759
// begin for i in mpTeams do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: LD_EXP 10
4705: PUSH
4706: FOR_IN
4707: IFFALSE 4757
// for j := 2 to i do
4709: LD_ADDR_VAR 0 3
4713: PUSH
4714: DOUBLE
4715: LD_INT 2
4717: DEC
4718: ST_TO_ADDR
4719: LD_VAR 0 2
4723: PUSH
4724: FOR_TO
4725: IFFALSE 4753
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4727: LD_VAR 0 2
4731: PUSH
4732: LD_VAR 0 3
4736: ARRAY
4737: PPUSH
4738: LD_VAR 0 2
4742: PUSH
4743: LD_INT 1
4745: ARRAY
4746: PPUSH
4747: CALL_OW 343
4751: GO 4724
4753: POP
4754: POP
4755: GO 4706
4757: POP
4758: POP
// end ; for i := 1 to 8 do
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 8
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4863
// for j := 1 to 8 do
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 8
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4859
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4791: LD_EXP 8
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PUSH
4802: LD_EXP 8
4806: PUSH
4807: LD_VAR 0 3
4811: ARRAY
4812: EQUAL
4813: IFFALSE 4837
// SetAttitude ( i , j , att_friend , true ) else
4815: LD_VAR 0 2
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_INT 1
4830: PPUSH
4831: CALL_OW 80
4835: GO 4857
// SetAttitude ( i , j , att_enemy , true ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 2
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 80
4857: GO 4788
4859: POP
4860: POP
4861: GO 4772
4863: POP
4864: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4865: LD_ADDR_OWVAR 71
4869: PUSH
4870: LD_EXP 9
4874: PUSH
4875: LD_OWVAR 2
4879: ARRAY
4880: ST_TO_ADDR
// if IAmSpec then
4881: CALL_OW 531
4885: IFFALSE 4926
// begin FogOff ( true ) ;
4887: LD_INT 1
4889: PPUSH
4890: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4894: LD_EXP 29
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PUSH
4903: LD_INT 2
4905: DIV
4906: PPUSH
4907: LD_EXP 29
4911: PUSH
4912: LD_INT 2
4914: ARRAY
4915: PUSH
4916: LD_INT 2
4918: DIV
4919: PPUSH
4920: CALL_OW 86
// end else
4924: GO 4972
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4926: LD_EXP 21
4930: PUSH
4931: LD_EXP 7
4935: PUSH
4936: LD_OWVAR 2
4940: ARRAY
4941: ARRAY
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: PPUSH
4947: LD_EXP 21
4951: PUSH
4952: LD_EXP 7
4956: PUSH
4957: LD_OWVAR 2
4961: ARRAY
4962: ARRAY
4963: PUSH
4964: LD_INT 2
4966: ARRAY
4967: PPUSH
4968: CALL_OW 86
// end ; BeginBuildUp ;
4972: CALL 5973 0 0
// enable ( mpActive ) ;
4976: LD_INT 100
4978: ENABLE_MARKED
// enable ( mpGameType ) ;
4979: LD_EXP 3
4983: ENABLE_MARKED
// mpGameActive := true ;
4984: LD_ADDR_EXP 38
4988: PUSH
4989: LD_INT 1
4991: ST_TO_ADDR
// end ;
4992: LD_VAR 0 1
4996: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
5002: PPUSH
// result := [ ] ;
5003: LD_ADDR_VAR 0 5
5007: PUSH
5008: EMPTY
5009: ST_TO_ADDR
// class := class_soldier ;
5010: LD_ADDR_VAR 0 8
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// uc_side := side ;
5018: LD_ADDR_OWVAR 20
5022: PUSH
5023: LD_VAR 0 1
5027: ST_TO_ADDR
// uc_nation := nation ;
5028: LD_ADDR_OWVAR 21
5032: PUSH
5033: LD_VAR 0 2
5037: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5038: LD_ADDR_OWVAR 26
5042: PUSH
5043: LD_OWVAR 19
5047: PUSH
5048: LD_VAR 0 1
5052: ARRAY
5053: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5054: LD_INT 1
5056: PPUSH
5057: LD_INT 2
5059: PPUSH
5060: CALL_OW 12
5064: PPUSH
5065: LD_VAR 0 8
5069: PPUSH
5070: LD_VAR 0 4
5074: PUSH
5075: LD_INT 2
5077: PLUS
5078: PPUSH
5079: CALL_OW 380
// hc_importance := 105 ;
5083: LD_ADDR_OWVAR 32
5087: PUSH
5088: LD_INT 105
5090: ST_TO_ADDR
// if Multiplayer then
5091: LD_OWVAR 4
5095: IFFALSE 5135
// begin hc_gallery := MULTIAVATARS ;
5097: LD_ADDR_OWVAR 33
5101: PUSH
5102: LD_STRING MULTIAVATARS
5104: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5105: LD_ADDR_OWVAR 34
5109: PUSH
5110: LD_VAR 0 1
5114: PPUSH
5115: CALL_OW 525
5119: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5120: LD_ADDR_OWVAR 27
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 526
5134: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5135: LD_ADDR_VAR 0 5
5139: PUSH
5140: LD_VAR 0 5
5144: PPUSH
5145: CALL_OW 44
5149: PPUSH
5150: CALL 46869 0 2
5154: ST_TO_ADDR
// if mpTeamPreset then
5155: LD_LOC 1
5159: IFFALSE 5255
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5161: LD_LOC 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 5
5174: PUSH
5175: LD_VAR 0 5
5179: ARRAY
5180: PPUSH
5181: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5185: LD_VAR 0 5
5189: PUSH
5190: LD_VAR 0 5
5194: ARRAY
5195: PPUSH
5196: LD_INT 1
5198: PPUSH
5199: LD_LOC 1
5203: PUSH
5204: LD_INT 1
5206: ARRAY
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 260
5215: PPUSH
5216: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5220: LD_VAR 0 5
5224: PUSH
5225: LD_VAR 0 5
5229: ARRAY
5230: PPUSH
5231: LD_INT 2
5233: PPUSH
5234: LD_LOC 1
5238: PUSH
5239: LD_INT 1
5241: ARRAY
5242: PPUSH
5243: LD_INT 2
5245: PPUSH
5246: CALL_OW 260
5250: PPUSH
5251: CALL_OW 239
// end ; InitHc_All ( ) ;
5255: CALL_OW 584
// class := 2 ;
5259: LD_ADDR_VAR 0 8
5263: PUSH
5264: LD_INT 2
5266: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5267: LD_ADDR_VAR 0 6
5271: PUSH
5272: DOUBLE
5273: LD_INT 1
5275: DEC
5276: ST_TO_ADDR
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 1
5284: MINUS
5285: PUSH
5286: FOR_TO
5287: IFFALSE 5471
// begin PrepareHuman ( false , class , skill ) ;
5289: LD_INT 0
5291: PPUSH
5292: LD_VAR 0 8
5296: PPUSH
5297: LD_VAR 0 4
5301: PPUSH
5302: CALL_OW 380
// un := CreateHuman ;
5306: LD_ADDR_VAR 0 7
5310: PUSH
5311: CALL_OW 44
5315: ST_TO_ADDR
// result := Join ( result , un ) ;
5316: LD_ADDR_VAR 0 5
5320: PUSH
5321: LD_VAR 0 5
5325: PPUSH
5326: LD_VAR 0 7
5330: PPUSH
5331: CALL 46869 0 2
5335: ST_TO_ADDR
// if mpTeamPreset then
5336: LD_LOC 1
5340: IFFALSE 5436
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5342: LD_LOC 1
5346: PUSH
5347: LD_VAR 0 6
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: ARRAY
5356: PPUSH
5357: LD_VAR 0 7
5361: PPUSH
5362: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5366: LD_VAR 0 7
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: LD_LOC 1
5378: PUSH
5379: LD_VAR 0 6
5383: PUSH
5384: LD_INT 1
5386: PLUS
5387: ARRAY
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 260
5396: PPUSH
5397: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5401: LD_VAR 0 7
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: LD_LOC 1
5413: PUSH
5414: LD_VAR 0 6
5418: PUSH
5419: LD_INT 1
5421: PLUS
5422: ARRAY
5423: PPUSH
5424: LD_INT 2
5426: PPUSH
5427: CALL_OW 260
5431: PPUSH
5432: CALL_OW 239
// end ; class := Inc ( class ) ;
5436: LD_ADDR_VAR 0 8
5440: PUSH
5441: LD_VAR 0 8
5445: PPUSH
5446: CALL 48230 0 1
5450: ST_TO_ADDR
// if class = 5 then
5451: LD_VAR 0 8
5455: PUSH
5456: LD_INT 5
5458: EQUAL
5459: IFFALSE 5469
// class := 1 ;
5461: LD_ADDR_VAR 0 8
5465: PUSH
5466: LD_INT 1
5468: ST_TO_ADDR
// end ;
5469: GO 5286
5471: POP
5472: POP
// if not mpTeamPreset then
5473: LD_LOC 1
5477: NOT
5478: IFFALSE 5490
// mpTeamPreset := result ;
5480: LD_ADDR_LOC 1
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// end ;
5490: LD_VAR 0 5
5494: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5495: LD_INT 0
5497: PPUSH
5498: PPUSH
// result := [ ] ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// if not vehicles then
5506: LD_VAR 0 3
5510: NOT
5511: IFFALSE 5515
// exit ;
5513: GO 5674
// for i := 1 to vehicles [ nation ] do
5515: LD_ADDR_VAR 0 5
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_VAR 0 3
5529: PUSH
5530: LD_VAR 0 2
5534: ARRAY
5535: PUSH
5536: FOR_TO
5537: IFFALSE 5672
// begin uc_side := side ;
5539: LD_ADDR_OWVAR 20
5543: PUSH
5544: LD_VAR 0 1
5548: ST_TO_ADDR
// uc_nation := nation ;
5549: LD_ADDR_OWVAR 21
5553: PUSH
5554: LD_VAR 0 2
5558: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5559: LD_VAR 0 3
5563: PUSH
5564: LD_VAR 0 2
5568: ARRAY
5569: PUSH
5570: LD_VAR 0 5
5574: ARRAY
5575: PUSH
5576: LD_INT 1
5578: ARRAY
5579: PPUSH
5580: LD_VAR 0 3
5584: PUSH
5585: LD_VAR 0 2
5589: ARRAY
5590: PUSH
5591: LD_VAR 0 5
5595: ARRAY
5596: PUSH
5597: LD_INT 2
5599: ARRAY
5600: PPUSH
5601: LD_VAR 0 3
5605: PUSH
5606: LD_VAR 0 2
5610: ARRAY
5611: PUSH
5612: LD_VAR 0 5
5616: ARRAY
5617: PUSH
5618: LD_INT 3
5620: ARRAY
5621: PPUSH
5622: LD_VAR 0 3
5626: PUSH
5627: LD_VAR 0 2
5631: ARRAY
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PUSH
5639: LD_INT 4
5641: ARRAY
5642: PPUSH
5643: LD_INT 80
5645: PPUSH
5646: CALL 13998 0 5
// result := Join ( result , CreateVehicle ) ;
5650: LD_ADDR_VAR 0 4
5654: PUSH
5655: LD_VAR 0 4
5659: PPUSH
5660: CALL_OW 45
5664: PPUSH
5665: CALL 46869 0 2
5669: ST_TO_ADDR
// end ;
5670: GO 5536
5672: POP
5673: POP
// end ;
5674: LD_VAR 0 4
5678: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5679: LD_INT 0
5681: PPUSH
5682: PPUSH
// for i in mpBattleFlags do
5683: LD_ADDR_VAR 0 3
5687: PUSH
5688: LD_EXP 23
5692: PUSH
5693: FOR_IN
5694: IFFALSE 5771
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5696: LD_VAR 0 3
5700: PPUSH
5701: LD_INT 1
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 2
5715: PUSH
5716: LD_VAR 0 1
5720: PUSH
5721: LD_REAL  7.00000000000000E-0001
5724: MUL
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 3
5732: PUSH
5733: LD_VAR 0 1
5737: PUSH
5738: LD_REAL  4.00000000000000E-0001
5741: MUL
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: LD_INT 20
5749: PUSH
5750: LD_VAR 0 1
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: PPUSH
5765: CALL_OW 423
5769: GO 5693
5771: POP
5772: POP
// end ;
5773: LD_VAR 0 2
5777: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5778: LD_INT 100
5780: IFFALSE 5875
5782: GO 5784
5784: DISABLE
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
// begin if mpBattleFlag <= 0 then
5789: LD_EXP 22
5793: PUSH
5794: LD_INT 0
5796: LESSEQUAL
5797: IFFALSE 5801
// exit ;
5799: GO 5875
// strength := 100 ;
5801: LD_ADDR_VAR 0 2
5805: PUSH
5806: LD_INT 100
5808: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5809: LD_EXP 22
5813: PPUSH
5814: CALL_OW 67
// strength := Dec ( strength ) ;
5818: LD_ADDR_VAR 0 2
5822: PUSH
5823: LD_VAR 0 2
5827: PPUSH
5828: CALL 48252 0 1
5832: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5833: LD_VAR 0 2
5837: PPUSH
5838: CALL 5679 0 1
// until not strength ;
5842: LD_VAR 0 2
5846: NOT
5847: IFFALSE 5809
// for i in mpBattleFlags do
5849: LD_ADDR_VAR 0 1
5853: PUSH
5854: LD_EXP 23
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5873
// KillBattleFlag ( i ) ;
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 419
5871: GO 5859
5873: POP
5874: POP
// end ;
5875: PPOPN 2
5877: END
// every 0 0$1 marked mpActive do var side , tmp ;
5878: GO 5880
5880: DISABLE
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
// begin if mpSibBomb <= 1 then
5885: LD_EXP 28
5889: PUSH
5890: LD_INT 1
5892: LESSEQUAL
5893: IFFALSE 5897
// exit ;
5895: GO 5970
// tmp := mpSibBomb ;
5897: LD_ADDR_VAR 0 2
5901: PUSH
5902: LD_EXP 28
5906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5907: LD_INT 35
5909: PPUSH
5910: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 2
5923: PUSH
5924: LD_INT 35
5926: MINUS
5927: ST_TO_ADDR
// until not tmp ;
5928: LD_VAR 0 2
5932: NOT
5933: IFFALSE 5907
// for side := 1 to 8 do
5935: LD_ADDR_VAR 0 1
5939: PUSH
5940: DOUBLE
5941: LD_INT 1
5943: DEC
5944: ST_TO_ADDR
5945: LD_INT 8
5947: PUSH
5948: FOR_TO
5949: IFFALSE 5968
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5951: LD_INT 25
5953: PPUSH
5954: LD_VAR 0 1
5958: PPUSH
5959: LD_INT 1
5961: PPUSH
5962: CALL_OW 322
5966: GO 5948
5968: POP
5969: POP
// end ;
5970: PPOPN 2
5972: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
// mpBuildUpTimeDelay := 0 ;
5978: LD_ADDR_EXP 41
5982: PUSH
5983: LD_INT 0
5985: ST_TO_ADDR
// if not mpBuildUpTime then
5986: LD_EXP 20
5990: NOT
5991: IFFALSE 5995
// exit ;
5993: GO 6178
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5995: LD_ADDR_EXP 41
5999: PUSH
6000: LD_INT 8400
6002: PUSH
6003: LD_INT 2100
6005: PUSH
6006: LD_EXP 20
6010: MUL
6011: PLUS
6012: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6013: LD_ADDR_EXP 42
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// for i := 1 to 8 do
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: DOUBLE
6027: LD_INT 1
6029: DEC
6030: ST_TO_ADDR
6031: LD_INT 8
6033: PUSH
6034: FOR_TO
6035: IFFALSE 6176
// if mpSidePositions [ i ] then
6037: LD_EXP 7
6041: PUSH
6042: LD_VAR 0 2
6046: ARRAY
6047: IFFALSE 6174
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6049: LD_EXP 19
6053: PUSH
6054: LD_EXP 7
6058: PUSH
6059: LD_VAR 0 2
6063: ARRAY
6064: ARRAY
6065: PPUSH
6066: LD_INT 5
6068: PPUSH
6069: CALL_OW 424
// for j := 1 to 8 do
6073: LD_ADDR_VAR 0 3
6077: PUSH
6078: DOUBLE
6079: LD_INT 1
6081: DEC
6082: ST_TO_ADDR
6083: LD_INT 8
6085: PUSH
6086: FOR_TO
6087: IFFALSE 6172
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6089: LD_EXP 7
6093: PUSH
6094: LD_VAR 0 3
6098: ARRAY
6099: PUSH
6100: LD_EXP 8
6104: PUSH
6105: LD_VAR 0 2
6109: ARRAY
6110: PUSH
6111: LD_EXP 8
6115: PUSH
6116: LD_VAR 0 3
6120: ARRAY
6121: NONEQUAL
6122: PUSH
6123: LD_EXP 11
6127: NOT
6128: PUSH
6129: LD_VAR 0 2
6133: PUSH
6134: LD_VAR 0 3
6138: NONEQUAL
6139: AND
6140: OR
6141: AND
6142: IFFALSE 6170
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6144: LD_VAR 0 3
6148: PPUSH
6149: LD_EXP 19
6153: PUSH
6154: LD_EXP 7
6158: PUSH
6159: LD_VAR 0 2
6163: ARRAY
6164: ARRAY
6165: PPUSH
6166: CALL_OW 333
6170: GO 6086
6172: POP
6173: POP
// end ;
6174: GO 6034
6176: POP
6177: POP
// end ;
6178: LD_VAR 0 1
6182: RET
// function EndBuildUp ; var i , j ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
// mpBuildUpTimeActive := false ;
6188: LD_ADDR_EXP 42
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// for i := 1 to 8 do
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: DOUBLE
6202: LD_INT 1
6204: DEC
6205: ST_TO_ADDR
6206: LD_INT 8
6208: PUSH
6209: FOR_TO
6210: IFFALSE 6351
// if mpSidePositions [ i ] then
6212: LD_EXP 7
6216: PUSH
6217: LD_VAR 0 2
6221: ARRAY
6222: IFFALSE 6349
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6224: LD_EXP 19
6228: PUSH
6229: LD_EXP 7
6233: PUSH
6234: LD_VAR 0 2
6238: ARRAY
6239: ARRAY
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 424
// for j := 1 to 8 do
6248: LD_ADDR_VAR 0 3
6252: PUSH
6253: DOUBLE
6254: LD_INT 1
6256: DEC
6257: ST_TO_ADDR
6258: LD_INT 8
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6347
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6264: LD_EXP 7
6268: PUSH
6269: LD_VAR 0 3
6273: ARRAY
6274: PUSH
6275: LD_EXP 8
6279: PUSH
6280: LD_VAR 0 2
6284: ARRAY
6285: PUSH
6286: LD_EXP 8
6290: PUSH
6291: LD_VAR 0 3
6295: ARRAY
6296: NONEQUAL
6297: PUSH
6298: LD_EXP 11
6302: NOT
6303: PUSH
6304: LD_VAR 0 2
6308: PUSH
6309: LD_VAR 0 3
6313: NONEQUAL
6314: AND
6315: OR
6316: AND
6317: IFFALSE 6345
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6319: LD_VAR 0 3
6323: PPUSH
6324: LD_EXP 19
6328: PUSH
6329: LD_EXP 7
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: ARRAY
6340: PPUSH
6341: CALL_OW 334
6345: GO 6261
6347: POP
6348: POP
// end ;
6349: GO 6209
6351: POP
6352: POP
// end ;
6353: LD_VAR 0 1
6357: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6358: LD_EXP 42
6362: IFFALSE 6537
6364: GO 6366
6366: DISABLE
6367: LD_INT 0
6369: PPUSH
6370: PPUSH
// begin for i := 1 to 8 do
6371: LD_ADDR_VAR 0 1
6375: PUSH
6376: DOUBLE
6377: LD_INT 1
6379: DEC
6380: ST_TO_ADDR
6381: LD_INT 8
6383: PUSH
6384: FOR_TO
6385: IFFALSE 6534
// if mpSidePositions [ i ] then
6387: LD_EXP 7
6391: PUSH
6392: LD_VAR 0 1
6396: ARRAY
6397: IFFALSE 6532
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6399: LD_ADDR_VAR 0 2
6403: PUSH
6404: LD_EXP 19
6408: PUSH
6409: LD_EXP 7
6413: PUSH
6414: LD_VAR 0 1
6418: ARRAY
6419: ARRAY
6420: PPUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 21
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 21
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_OWVAR 2
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PPUSH
6465: CALL_OW 70
6469: PUSH
6470: FOR_IN
6471: IFFALSE 6530
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6473: LD_EXP 8
6477: PUSH
6478: LD_VAR 0 1
6482: ARRAY
6483: PUSH
6484: LD_EXP 8
6488: PUSH
6489: LD_OWVAR 2
6493: ARRAY
6494: NONEQUAL
6495: PUSH
6496: LD_EXP 11
6500: NOT
6501: PUSH
6502: LD_VAR 0 1
6506: PUSH
6507: LD_OWVAR 2
6511: NONEQUAL
6512: AND
6513: OR
6514: IFFALSE 6528
// ComMoveToArea ( un , BuildUpEscape ) ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_INT 15
6523: PPUSH
6524: CALL_OW 113
6528: GO 6470
6530: POP
6531: POP
6532: GO 6384
6534: POP
6535: POP
// enable ;
6536: ENABLE
// end ;
6537: PPOPN 2
6539: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6540: LD_EXP 20
6544: IFFALSE 6594
6546: GO 6548
6548: DISABLE
6549: LD_INT 0
6551: PPUSH
// begin tmp := mpBuildUpTime ;
6552: LD_ADDR_VAR 0 1
6556: PUSH
6557: LD_EXP 20
6561: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6562: LD_INT 35
6564: PPUSH
6565: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: LD_VAR 0 1
6578: PUSH
6579: LD_INT 35
6581: MINUS
6582: ST_TO_ADDR
// until not tmp ;
6583: LD_VAR 0 1
6587: NOT
6588: IFFALSE 6562
// EndBuildUp ;
6590: CALL 6183 0 0
// end ;
6594: PPOPN 1
6596: END
// every 0 0$1 trigger mpActive marked mpWin do
6597: LD_INT 100
6599: IFFALSE 6633
6601: GO 6603
6603: DISABLE
// begin if IAmServer then
6604: CALL_OW 518
6608: IFFALSE 6617
// wait ( 0 0$3 ) ;
6610: LD_INT 105
6612: PPUSH
6613: CALL_OW 67
// if Multiplayer then
6617: LD_OWVAR 4
6621: IFFALSE 6629
// YouWinInMultiplayer else
6623: CALL_OW 106
6627: GO 6633
// YouWin ;
6629: CALL_OW 103
// end ;
6633: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6634: LD_INT 0
6636: PPUSH
// result := false ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 0
6644: ST_TO_ADDR
// case gameType of GameTypeNormal :
6645: LD_VAR 0 1
6649: PUSH
6650: LD_INT 1
6652: DOUBLE
6653: EQUAL
6654: IFTRUE 6658
6656: GO 6731
6658: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6659: LD_ADDR_VAR 0 3
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_VAR 0 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 2
6678: PUSH
6679: LD_INT 21
6681: PUSH
6682: LD_INT 1
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 33
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 33
6701: PUSH
6702: LD_INT 5
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PPUSH
6719: CALL_OW 69
6723: PPUSH
6724: CALL 11260 0 1
6728: ST_TO_ADDR
// end ; GameTypeSurvival :
6729: GO 6966
6731: LD_INT 2
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6867
6739: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6740: LD_ADDR_VAR 0 3
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 2
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 30
6762: PUSH
6763: LD_INT 0
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 30
6772: PUSH
6773: LD_INT 1
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: PPUSH
6794: CALL 11260 0 1
6798: PUSH
6799: LD_INT 22
6801: PUSH
6802: LD_VAR 0 2
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: LD_INT 2
6813: PUSH
6814: LD_INT 21
6816: PUSH
6817: LD_INT 1
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: LD_INT 33
6826: PUSH
6827: LD_INT 3
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 33
6836: PUSH
6837: LD_INT 5
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: PPUSH
6859: CALL 11260 0 1
6863: AND
6864: ST_TO_ADDR
// end ; GameTypeKing :
6865: GO 6966
6867: LD_INT 3
6869: DOUBLE
6870: EQUAL
6871: IFTRUE 6875
6873: GO 6965
6875: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6876: LD_ADDR_VAR 0 3
6880: PUSH
6881: LD_INT 22
6883: PUSH
6884: LD_VAR 0 2
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 2
6895: PUSH
6896: LD_INT 21
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 33
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 33
6918: PUSH
6919: LD_INT 5
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 69
6940: PPUSH
6941: CALL 11260 0 1
6945: PUSH
6946: LD_VAR 0 2
6950: PPUSH
6951: CALL 58419 0 1
6955: PUSH
6956: LD_EXP 34
6960: LESS
6961: AND
6962: ST_TO_ADDR
// end ; end ;
6963: GO 6966
6965: POP
// end ;
6966: LD_VAR 0 3
6970: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6971: LD_INT 100
6973: IFFALSE 7195
6975: GO 6977
6977: DISABLE
6978: LD_INT 0
6980: PPUSH
6981: PPUSH
// begin if Multiplayer then
6982: LD_OWVAR 4
6986: IFFALSE 6994
// SetPlayerSpectator ( ) else
6988: CALL_OW 572
6992: GO 7003
// FogOff ( your_side ) ;
6994: LD_OWVAR 2
6998: PPUSH
6999: CALL_OW 344
// repeat gameIsOn := false ;
7003: LD_ADDR_VAR 0 1
7007: PUSH
7008: LD_INT 0
7010: ST_TO_ADDR
// for i := 1 to 8 do
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 8
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7147
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7027: LD_EXP 7
7031: PUSH
7032: LD_VAR 0 2
7036: ARRAY
7037: PUSH
7038: LD_VAR 0 2
7042: PPUSH
7043: CALL_OW 108
7047: AND
7048: PUSH
7049: LD_VAR 0 2
7053: PUSH
7054: LD_OWVAR 2
7058: NONEQUAL
7059: AND
7060: IFFALSE 7145
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7062: LD_EXP 8
7066: PUSH
7067: LD_VAR 0 2
7071: ARRAY
7072: NOT
7073: PUSH
7074: LD_EXP 8
7078: PUSH
7079: LD_VAR 0 2
7083: ARRAY
7084: PUSH
7085: LD_EXP 8
7089: PUSH
7090: LD_OWVAR 2
7094: ARRAY
7095: NONEQUAL
7096: PUSH
7097: LD_OWVAR 2
7101: PPUSH
7102: LD_VAR 0 2
7106: PPUSH
7107: CALL_OW 81
7111: PUSH
7112: LD_INT 1
7114: NONEQUAL
7115: AND
7116: OR
7117: IFFALSE 7145
// if HasPowerByGameType ( mpGameType , i ) then
7119: LD_EXP 3
7123: PPUSH
7124: LD_VAR 0 2
7128: PPUSH
7129: CALL 6634 0 2
7133: IFFALSE 7145
// begin gameIsOn := true ;
7135: LD_ADDR_VAR 0 1
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// break ;
7143: GO 7147
// end ;
7145: GO 7024
7147: POP
7148: POP
// wait ( 100 ) ;
7149: LD_INT 100
7151: PPUSH
7152: CALL_OW 67
// until not gameIsOn ;
7156: LD_VAR 0 1
7160: NOT
7161: IFFALSE 7003
// if IAmServer then
7163: CALL_OW 518
7167: IFFALSE 7176
// wait ( 0 0$3 ) ;
7169: LD_INT 105
7171: PPUSH
7172: CALL_OW 67
// if Multiplayer then
7176: LD_OWVAR 4
7180: IFFALSE 7188
// YouLostInMultiplayer else
7182: CALL_OW 107
7186: GO 7195
// YouLost (  ) ;
7188: LD_STRING 
7190: PPUSH
7191: CALL_OW 104
// end ;
7195: PPOPN 2
7197: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7198: LD_EXP 32
7202: IFFALSE 7549
7204: GO 7206
7206: DISABLE
7207: LD_INT 0
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7214: LD_ADDR_VAR 0 5
7218: PUSH
7219: LD_INT 1
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: LD_INT 4
7230: PUSH
7231: LD_INT 5
7233: PUSH
7234: LD_INT 6
7236: PUSH
7237: LD_INT 7
7239: PUSH
7240: LD_INT 8
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7253: LD_INT 350
7255: PPUSH
7256: CALL_OW 67
// for i := 1 to 8 do
7260: LD_ADDR_VAR 0 1
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_INT 8
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7519
// begin j := sides [ i ] ;
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_VAR 0 5
7285: PUSH
7286: LD_VAR 0 1
7290: ARRAY
7291: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7292: LD_EXP 39
7296: PUSH
7297: LD_VAR 0 2
7301: ARRAY
7302: PPUSH
7303: CALL 11260 0 1
7307: PUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: CALL_OW 108
7317: AND
7318: PUSH
7319: LD_EXP 3
7323: PPUSH
7324: LD_VAR 0 2
7328: PPUSH
7329: CALL 6634 0 2
7333: AND
7334: IFFALSE 7517
// begin wait ( mpRespawn div 3 ) ;
7336: LD_EXP 32
7340: PUSH
7341: LD_INT 3
7343: DIV
7344: PPUSH
7345: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_VAR 0 2
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: EMPTY
7370: LIST
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: LD_INT 30
7377: PUSH
7378: LD_INT 0
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 30
7387: PUSH
7388: LD_INT 1
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 69
7409: ST_TO_ADDR
// if not tmp then
7410: LD_VAR 0 3
7414: NOT
7415: IFFALSE 7419
// continue ;
7417: GO 7273
// spawn := tmp [ 1 ] ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: LD_VAR 0 3
7428: PUSH
7429: LD_INT 1
7431: ARRAY
7432: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7433: LD_EXP 39
7437: PUSH
7438: LD_VAR 0 2
7442: ARRAY
7443: PUSH
7444: LD_INT 1
7446: ARRAY
7447: PPUSH
7448: LD_VAR 0 4
7452: PPUSH
7453: CALL_OW 250
7457: PPUSH
7458: LD_VAR 0 4
7462: PPUSH
7463: CALL_OW 251
7467: PPUSH
7468: LD_INT 32
7470: PPUSH
7471: LD_INT 1
7473: PPUSH
7474: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7478: LD_ADDR_EXP 39
7482: PUSH
7483: LD_EXP 39
7487: PPUSH
7488: LD_VAR 0 2
7492: PPUSH
7493: LD_EXP 39
7497: PUSH
7498: LD_VAR 0 2
7502: ARRAY
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 3
7511: PPUSH
7512: CALL_OW 1
7516: ST_TO_ADDR
// end ; end ;
7517: GO 7273
7519: POP
7520: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7521: LD_ADDR_VAR 0 5
7525: PUSH
7526: LD_VAR 0 5
7530: PPUSH
7531: LD_INT 1
7533: PPUSH
7534: LD_INT 8
7536: PPUSH
7537: LD_INT 1
7539: PPUSH
7540: CALL 13538 0 4
7544: ST_TO_ADDR
// until false ;
7545: LD_INT 0
7547: IFFALSE 7253
// end ;
7549: PPOPN 5
7551: END
// every 0 0$1 marked mpActive do
7552: GO 7554
7554: DISABLE
// begin enable ;
7555: ENABLE
// if not mpDisplayStrings then
7556: LD_EXP 37
7560: NOT
7561: IFFALSE 7572
// begin display_strings := [ ] ;
7563: LD_ADDR_OWVAR 47
7567: PUSH
7568: EMPTY
7569: ST_TO_ADDR
// exit ;
7570: GO 7582
// end ; display_strings := mpDisplayStrings ;
7572: LD_ADDR_OWVAR 47
7576: PUSH
7577: LD_EXP 37
7581: ST_TO_ADDR
// end ; end_of_file
7582: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
// if GetType ( un ) = unit_vehicle then
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 247
7603: PUSH
7604: LD_INT 2
7606: EQUAL
7607: IFFALSE 7611
// exit ;
7609: GO 8181
// side := GetSide ( un ) ;
7611: LD_ADDR_VAR 0 9
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 255
7625: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7626: LD_EXP 3
7630: PUSH
7631: LD_INT 2
7633: EQUAL
7634: IFFALSE 7727
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 266
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: IN
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 110
7666: PUSH
7667: LD_VAR 0 9
7671: EQUAL
7672: AND
7673: IFFALSE 7727
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_VAR 0 9
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 21
7694: PUSH
7695: LD_INT 1
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PPUSH
7706: CALL_OW 69
7710: PUSH
7711: FOR_IN
7712: IFFALSE 7725
// KillUnit ( i ) ;
7714: LD_VAR 0 3
7718: PPUSH
7719: CALL_OW 66
7723: GO 7711
7725: POP
7726: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 257
7736: PUSH
7737: LD_INT 12
7739: PUSH
7740: LD_INT 17
7742: PUSH
7743: LD_INT 15
7745: PUSH
7746: LD_INT 16
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: IN
7755: PUSH
7756: LD_VAR 0 1
7760: PPUSH
7761: CALL_OW 263
7765: PUSH
7766: LD_INT 5
7768: EQUAL
7769: OR
7770: IFFALSE 7910
// begin tag := GetTag ( un ) ;
7772: LD_ADDR_VAR 0 5
7776: PUSH
7777: LD_VAR 0 1
7781: PPUSH
7782: CALL_OW 110
7786: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7787: LD_ADDR_VAR 0 7
7791: PUSH
7792: LD_EXP 31
7796: PUSH
7797: LD_EXP 7
7801: PUSH
7802: LD_VAR 0 5
7806: ARRAY
7807: ARRAY
7808: ST_TO_ADDR
// if not area then
7809: LD_VAR 0 7
7813: NOT
7814: IFFALSE 7818
// exit ;
7816: GO 8181
// wait ( 4 4$00 ) ;
7818: LD_INT 8400
7820: PPUSH
7821: CALL_OW 67
// repeat wait ( 10 ) ;
7825: LD_INT 10
7827: PPUSH
7828: CALL_OW 67
// until not mpBlockRespThread ;
7832: LD_EXP 40
7836: NOT
7837: IFFALSE 7825
// mpBlockRespThread := true ;
7839: LD_ADDR_EXP 40
7843: PUSH
7844: LD_INT 1
7846: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7847: LD_INT 0
7849: PPUSH
7850: CALL 43117 0 1
// ape := CreateHuman ;
7854: LD_ADDR_VAR 0 4
7858: PUSH
7859: CALL_OW 44
7863: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7864: LD_VAR 0 4
7868: PPUSH
7869: LD_VAR 0 5
7873: PPUSH
7874: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7878: LD_VAR 0 4
7882: PPUSH
7883: LD_VAR 0 7
7887: PPUSH
7888: LD_INT 0
7890: PPUSH
7891: CALL_OW 49
// wait ( 10 ) ;
7895: LD_INT 10
7897: PPUSH
7898: CALL_OW 67
// mpBlockRespThread := false ;
7902: LD_ADDR_EXP 40
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 247
7919: PUSH
7920: LD_INT 1
7922: EQUAL
7923: PUSH
7924: LD_VAR 0 1
7928: PPUSH
7929: CALL_OW 248
7933: PUSH
7934: LD_INT 0
7936: GREATER
7937: AND
7938: IFFALSE 8181
// begin if not mpRespawn then
7940: LD_EXP 32
7944: NOT
7945: IFFALSE 7949
// exit ;
7947: GO 8181
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7949: LD_VAR 0 9
7953: PPUSH
7954: CALL_OW 108
7958: NOT
7959: PUSH
7960: LD_EXP 3
7964: PPUSH
7965: LD_VAR 0 9
7969: PPUSH
7970: CALL 6634 0 2
7974: NOT
7975: AND
7976: IFFALSE 7980
// exit ;
7978: GO 8181
// side := GetSide ( un ) ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL_OW 255
7994: ST_TO_ADDR
// nation := GetNation ( un ) ;
7995: LD_ADDR_VAR 0 8
7999: PUSH
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 248
8009: ST_TO_ADDR
// class := GetClass ( un ) ;
8010: LD_ADDR_VAR 0 6
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: CALL_OW 257
8024: ST_TO_ADDR
// if class > 4 then
8025: LD_VAR 0 6
8029: PUSH
8030: LD_INT 4
8032: GREATER
8033: IFFALSE 8043
// class := 1 ;
8035: LD_ADDR_VAR 0 6
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// repeat wait ( 10 ) ;
8043: LD_INT 10
8045: PPUSH
8046: CALL_OW 67
// until not mpBlockRespThread ;
8050: LD_EXP 40
8054: NOT
8055: IFFALSE 8043
// mpBlockRespThread := true ;
8057: LD_ADDR_EXP 40
8061: PUSH
8062: LD_INT 1
8064: ST_TO_ADDR
// uc_side := side ;
8065: LD_ADDR_OWVAR 20
8069: PUSH
8070: LD_VAR 0 9
8074: ST_TO_ADDR
// uc_nation := nation ;
8075: LD_ADDR_OWVAR 21
8079: PUSH
8080: LD_VAR 0 8
8084: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8085: LD_INT 0
8087: PPUSH
8088: LD_VAR 0 6
8092: PPUSH
8093: LD_INT 2
8095: PPUSH
8096: CALL_OW 380
// un := CreateHuman ;
8100: LD_ADDR_VAR 0 1
8104: PUSH
8105: CALL_OW 44
8109: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8110: LD_ADDR_EXP 39
8114: PUSH
8115: LD_EXP 39
8119: PPUSH
8120: LD_VAR 0 9
8124: PPUSH
8125: LD_EXP 39
8129: PUSH
8130: LD_VAR 0 9
8134: ARRAY
8135: PPUSH
8136: LD_EXP 39
8140: PUSH
8141: LD_VAR 0 9
8145: ARRAY
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: PPUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 1
8160: PPUSH
8161: CALL_OW 1
8165: ST_TO_ADDR
// wait ( 10 ) ;
8166: LD_INT 10
8168: PPUSH
8169: CALL_OW 67
// mpBlockRespThread := false ;
8173: LD_ADDR_EXP 40
8177: PUSH
8178: LD_INT 0
8180: ST_TO_ADDR
// end ; end ;
8181: LD_VAR 0 2
8185: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8186: LD_INT 0
8188: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL_OW 266
8198: PUSH
8199: LD_INT 0
8201: PUSH
8202: LD_INT 1
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: IN
8209: IFFALSE 8234
// SetBName ( building , @ & GetSide ( building ) ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_STRING @
8218: PUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 255
8228: STR
8229: PPUSH
8230: CALL_OW 500
// end ;
8234: LD_VAR 0 2
8238: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8243: LD_EXP 3
8247: PUSH
8248: LD_INT 2
8250: EQUAL
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL_OW 266
8261: PUSH
8262: LD_INT 0
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: IN
8272: AND
8273: IFFALSE 8338
// begin KillUnit ( building ) ;
8275: LD_VAR 0 1
8279: PPUSH
8280: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 22
8291: PUSH
8292: LD_VAR 0 2
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 21
8303: PUSH
8304: LD_INT 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PPUSH
8315: CALL_OW 69
8319: PUSH
8320: FOR_IN
8321: IFFALSE 8334
// KillUnit ( i ) ;
8323: LD_VAR 0 5
8327: PPUSH
8328: CALL_OW 66
8332: GO 8320
8334: POP
8335: POP
// exit ;
8336: GO 8383
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 266
8347: PUSH
8348: LD_INT 0
8350: PUSH
8351: LD_INT 1
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: IN
8358: IFFALSE 8383
// SetBName ( building , @ & GetSide ( building ) ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_STRING @
8367: PUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 255
8377: STR
8378: PPUSH
8379: CALL_OW 500
// end ; end_of_file
8383: LD_VAR 0 4
8387: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8388: LD_EXP 38
8392: PUSH
8393: CALL 8598 0 0
8397: AND
8398: PUSH
8399: LD_OWVAR 4
8403: AND
8404: IFFALSE 8595
8406: GO 8408
8408: DISABLE
8409: LD_INT 0
8411: PPUSH
8412: PPUSH
// begin canWin := false ;
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_INT 0
8420: ST_TO_ADDR
// if not HasPower ( your_side ) then
8421: LD_OWVAR 2
8425: PPUSH
8426: CALL 8638 0 1
8430: NOT
8431: IFFALSE 8442
// begin Multiplayer_Loose_Message ;
8433: CALL_OW 521
// enable ( mpLose ) ;
8437: LD_INT 102
8439: ENABLE_MARKED
// end else
8440: GO 8595
// begin canWin := true ;
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: LD_INT 1
8449: ST_TO_ADDR
// for i := 1 to 8 do
8450: LD_ADDR_VAR 0 1
8454: PUSH
8455: DOUBLE
8456: LD_INT 1
8458: DEC
8459: ST_TO_ADDR
8460: LD_INT 8
8462: PUSH
8463: FOR_TO
8464: IFFALSE 8581
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8466: LD_EXP 7
8470: PUSH
8471: LD_VAR 0 1
8475: ARRAY
8476: PUSH
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 108
8486: AND
8487: PUSH
8488: LD_VAR 0 1
8492: PUSH
8493: LD_OWVAR 2
8497: NONEQUAL
8498: AND
8499: IFFALSE 8579
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8501: LD_EXP 8
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: NOT
8512: PUSH
8513: LD_EXP 8
8517: PUSH
8518: LD_VAR 0 1
8522: ARRAY
8523: PUSH
8524: LD_EXP 8
8528: PUSH
8529: LD_OWVAR 2
8533: ARRAY
8534: NONEQUAL
8535: PUSH
8536: LD_OWVAR 2
8540: PPUSH
8541: LD_VAR 0 1
8545: PPUSH
8546: CALL_OW 81
8550: PUSH
8551: LD_INT 1
8553: NONEQUAL
8554: AND
8555: OR
8556: IFFALSE 8579
// if HasPower ( i ) then
8558: LD_VAR 0 1
8562: PPUSH
8563: CALL 8638 0 1
8567: IFFALSE 8579
// begin canWin := false ;
8569: LD_ADDR_VAR 0 2
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// break ;
8577: GO 8581
// end ;
8579: GO 8463
8581: POP
8582: POP
// if canWin then
8583: LD_VAR 0 2
8587: IFFALSE 8594
// enable ( mpWin ) else
8589: LD_INT 101
8591: ENABLE_MARKED
8592: GO 8595
// enable ;
8594: ENABLE
// end ; end ;
8595: PPOPN 2
8597: END
// function CanWinLoose ; begin
8598: LD_INT 0
8600: PPUSH
// result := true ;
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_INT 1
8608: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8609: CALL_OW 531
8613: PUSH
8614: CALL_OW 519
8618: PUSH
8619: LD_INT 1
8621: GREATER
8622: AND
8623: IFFALSE 8633
// result := false ;
8625: LD_ADDR_VAR 0 1
8629: PUSH
8630: LD_INT 0
8632: ST_TO_ADDR
// end ;
8633: LD_VAR 0 1
8637: RET
// function HasPower ( i ) ; begin
8638: LD_INT 0
8640: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8641: LD_ADDR_VAR 0 2
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_VAR 0 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 2
8660: PUSH
8661: LD_INT 21
8663: PUSH
8664: LD_INT 1
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 33
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 33
8683: PUSH
8684: LD_INT 5
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// end ; end_of_file
8706: LD_VAR 0 2
8710: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8711: LD_EXP 38
8715: IFFALSE 8758
8717: GO 8719
8719: DISABLE
8720: LD_INT 0
8722: PPUSH
// begin for i := 1 to 8 do
8723: LD_ADDR_VAR 0 1
8727: PUSH
8728: DOUBLE
8729: LD_INT 1
8731: DEC
8732: ST_TO_ADDR
8733: LD_INT 8
8735: PUSH
8736: FOR_TO
8737: IFFALSE 8756
// SetRestrict ( b_depot , i , state_disabled ) ;
8739: LD_INT 0
8741: PPUSH
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_INT 0
8749: PPUSH
8750: CALL_OW 324
8754: GO 8736
8756: POP
8757: POP
// end ;
8758: PPOPN 1
8760: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8761: LD_EXP 38
8765: PUSH
8766: CALL 8971 0 0
8770: AND
8771: PUSH
8772: LD_OWVAR 4
8776: AND
8777: IFFALSE 8968
8779: GO 8781
8781: DISABLE
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
// begin canWin := false ;
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// if not HasPower ( your_side ) then
8794: LD_OWVAR 2
8798: PPUSH
8799: CALL 9011 0 1
8803: NOT
8804: IFFALSE 8815
// begin Multiplayer_Loose_Message ;
8806: CALL_OW 521
// enable ( mpLose ) ;
8810: LD_INT 102
8812: ENABLE_MARKED
// end else
8813: GO 8968
// begin canWin := true ;
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// for i := 1 to 8 do
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: DOUBLE
8829: LD_INT 1
8831: DEC
8832: ST_TO_ADDR
8833: LD_INT 8
8835: PUSH
8836: FOR_TO
8837: IFFALSE 8954
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8839: LD_EXP 7
8843: PUSH
8844: LD_VAR 0 1
8848: ARRAY
8849: PUSH
8850: LD_VAR 0 1
8854: PPUSH
8855: CALL_OW 108
8859: AND
8860: PUSH
8861: LD_VAR 0 1
8865: PUSH
8866: LD_OWVAR 2
8870: NONEQUAL
8871: AND
8872: IFFALSE 8952
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8874: LD_EXP 8
8878: PUSH
8879: LD_VAR 0 1
8883: ARRAY
8884: NOT
8885: PUSH
8886: LD_EXP 8
8890: PUSH
8891: LD_VAR 0 1
8895: ARRAY
8896: PUSH
8897: LD_EXP 8
8901: PUSH
8902: LD_OWVAR 2
8906: ARRAY
8907: NONEQUAL
8908: PUSH
8909: LD_OWVAR 2
8913: PPUSH
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL_OW 81
8923: PUSH
8924: LD_INT 1
8926: NONEQUAL
8927: AND
8928: OR
8929: IFFALSE 8952
// if HasPower ( i ) then
8931: LD_VAR 0 1
8935: PPUSH
8936: CALL 9011 0 1
8940: IFFALSE 8952
// begin canWin := false ;
8942: LD_ADDR_VAR 0 2
8946: PUSH
8947: LD_INT 0
8949: ST_TO_ADDR
// break ;
8950: GO 8954
// end ;
8952: GO 8836
8954: POP
8955: POP
// if canWin then
8956: LD_VAR 0 2
8960: IFFALSE 8967
// enable ( mpWin ) else
8962: LD_INT 101
8964: ENABLE_MARKED
8965: GO 8968
// enable ;
8967: ENABLE
// end ; end ;
8968: PPOPN 2
8970: END
// function CanWinLoose ; begin
8971: LD_INT 0
8973: PPUSH
// result := true ;
8974: LD_ADDR_VAR 0 1
8978: PUSH
8979: LD_INT 1
8981: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8982: CALL_OW 531
8986: PUSH
8987: CALL_OW 519
8991: PUSH
8992: LD_INT 1
8994: GREATER
8995: AND
8996: IFFALSE 9006
// result := false ;
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// end ;
9006: LD_VAR 0 1
9010: RET
// function HasPower ( i ) ; begin
9011: LD_INT 0
9013: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9014: LD_INT 22
9016: PUSH
9017: LD_VAR 0 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 0
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PPUSH
9058: CALL_OW 69
9062: NOT
9063: IFFALSE 9067
// exit ;
9065: GO 9132
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9067: LD_ADDR_VAR 0 2
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_VAR 0 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 2
9086: PUSH
9087: LD_INT 21
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 33
9099: PUSH
9100: LD_INT 3
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 33
9109: PUSH
9110: LD_INT 5
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 69
9131: ST_TO_ADDR
// end ; end_of_file
9132: LD_VAR 0 2
9136: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9137: LD_INT 0
9139: PPUSH
9140: PPUSH
// if exist_mode then
9141: LD_VAR 0 2
9145: IFFALSE 9191
// begin unit := CreateCharacter ( prefix & ident ) ;
9147: LD_ADDR_VAR 0 5
9151: PUSH
9152: LD_VAR 0 3
9156: PUSH
9157: LD_VAR 0 1
9161: STR
9162: PPUSH
9163: CALL_OW 34
9167: ST_TO_ADDR
// if unit then
9168: LD_VAR 0 5
9172: IFFALSE 9189
// DeleteCharacters ( prefix & ident ) ;
9174: LD_VAR 0 3
9178: PUSH
9179: LD_VAR 0 1
9183: STR
9184: PPUSH
9185: CALL_OW 40
// end else
9189: GO 9206
// unit := NewCharacter ( ident ) ;
9191: LD_ADDR_VAR 0 5
9195: PUSH
9196: LD_VAR 0 1
9200: PPUSH
9201: CALL_OW 25
9205: ST_TO_ADDR
// result := unit ;
9206: LD_ADDR_VAR 0 4
9210: PUSH
9211: LD_VAR 0 5
9215: ST_TO_ADDR
// end ;
9216: LD_VAR 0 4
9220: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9221: LD_INT 0
9223: PPUSH
9224: PPUSH
// if not side or not nation then
9225: LD_VAR 0 1
9229: NOT
9230: PUSH
9231: LD_VAR 0 2
9235: NOT
9236: OR
9237: IFFALSE 9241
// exit ;
9239: GO 10009
// case nation of nation_american :
9241: LD_VAR 0 2
9245: PUSH
9246: LD_INT 1
9248: DOUBLE
9249: EQUAL
9250: IFTRUE 9254
9252: GO 9468
9254: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9255: LD_ADDR_VAR 0 4
9259: PUSH
9260: LD_INT 35
9262: PUSH
9263: LD_INT 45
9265: PUSH
9266: LD_INT 46
9268: PUSH
9269: LD_INT 47
9271: PUSH
9272: LD_INT 82
9274: PUSH
9275: LD_INT 83
9277: PUSH
9278: LD_INT 84
9280: PUSH
9281: LD_INT 85
9283: PUSH
9284: LD_INT 86
9286: PUSH
9287: LD_INT 1
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: LD_INT 6
9295: PUSH
9296: LD_INT 15
9298: PUSH
9299: LD_INT 16
9301: PUSH
9302: LD_INT 7
9304: PUSH
9305: LD_INT 12
9307: PUSH
9308: LD_INT 13
9310: PUSH
9311: LD_INT 10
9313: PUSH
9314: LD_INT 14
9316: PUSH
9317: LD_INT 20
9319: PUSH
9320: LD_INT 21
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 25
9328: PUSH
9329: LD_INT 32
9331: PUSH
9332: LD_INT 27
9334: PUSH
9335: LD_INT 36
9337: PUSH
9338: LD_INT 69
9340: PUSH
9341: LD_INT 39
9343: PUSH
9344: LD_INT 34
9346: PUSH
9347: LD_INT 40
9349: PUSH
9350: LD_INT 48
9352: PUSH
9353: LD_INT 49
9355: PUSH
9356: LD_INT 50
9358: PUSH
9359: LD_INT 51
9361: PUSH
9362: LD_INT 52
9364: PUSH
9365: LD_INT 53
9367: PUSH
9368: LD_INT 54
9370: PUSH
9371: LD_INT 55
9373: PUSH
9374: LD_INT 56
9376: PUSH
9377: LD_INT 57
9379: PUSH
9380: LD_INT 58
9382: PUSH
9383: LD_INT 59
9385: PUSH
9386: LD_INT 60
9388: PUSH
9389: LD_INT 61
9391: PUSH
9392: LD_INT 62
9394: PUSH
9395: LD_INT 80
9397: PUSH
9398: LD_INT 82
9400: PUSH
9401: LD_INT 83
9403: PUSH
9404: LD_INT 84
9406: PUSH
9407: LD_INT 85
9409: PUSH
9410: LD_INT 86
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: ST_TO_ADDR
9466: GO 9933
9468: LD_INT 2
9470: DOUBLE
9471: EQUAL
9472: IFTRUE 9476
9474: GO 9702
9476: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_INT 35
9484: PUSH
9485: LD_INT 45
9487: PUSH
9488: LD_INT 46
9490: PUSH
9491: LD_INT 47
9493: PUSH
9494: LD_INT 82
9496: PUSH
9497: LD_INT 83
9499: PUSH
9500: LD_INT 84
9502: PUSH
9503: LD_INT 85
9505: PUSH
9506: LD_INT 87
9508: PUSH
9509: LD_INT 70
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: LD_INT 11
9517: PUSH
9518: LD_INT 3
9520: PUSH
9521: LD_INT 4
9523: PUSH
9524: LD_INT 5
9526: PUSH
9527: LD_INT 6
9529: PUSH
9530: LD_INT 15
9532: PUSH
9533: LD_INT 18
9535: PUSH
9536: LD_INT 7
9538: PUSH
9539: LD_INT 17
9541: PUSH
9542: LD_INT 8
9544: PUSH
9545: LD_INT 20
9547: PUSH
9548: LD_INT 21
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_INT 72
9556: PUSH
9557: LD_INT 26
9559: PUSH
9560: LD_INT 69
9562: PUSH
9563: LD_INT 39
9565: PUSH
9566: LD_INT 40
9568: PUSH
9569: LD_INT 41
9571: PUSH
9572: LD_INT 42
9574: PUSH
9575: LD_INT 43
9577: PUSH
9578: LD_INT 48
9580: PUSH
9581: LD_INT 49
9583: PUSH
9584: LD_INT 50
9586: PUSH
9587: LD_INT 51
9589: PUSH
9590: LD_INT 52
9592: PUSH
9593: LD_INT 53
9595: PUSH
9596: LD_INT 54
9598: PUSH
9599: LD_INT 55
9601: PUSH
9602: LD_INT 56
9604: PUSH
9605: LD_INT 60
9607: PUSH
9608: LD_INT 61
9610: PUSH
9611: LD_INT 62
9613: PUSH
9614: LD_INT 66
9616: PUSH
9617: LD_INT 67
9619: PUSH
9620: LD_INT 68
9622: PUSH
9623: LD_INT 81
9625: PUSH
9626: LD_INT 82
9628: PUSH
9629: LD_INT 83
9631: PUSH
9632: LD_INT 84
9634: PUSH
9635: LD_INT 85
9637: PUSH
9638: LD_INT 87
9640: PUSH
9641: LD_INT 88
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: ST_TO_ADDR
9700: GO 9933
9702: LD_INT 3
9704: DOUBLE
9705: EQUAL
9706: IFTRUE 9710
9708: GO 9932
9710: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9711: LD_ADDR_VAR 0 4
9715: PUSH
9716: LD_INT 46
9718: PUSH
9719: LD_INT 47
9721: PUSH
9722: LD_INT 1
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: LD_INT 82
9730: PUSH
9731: LD_INT 83
9733: PUSH
9734: LD_INT 84
9736: PUSH
9737: LD_INT 85
9739: PUSH
9740: LD_INT 86
9742: PUSH
9743: LD_INT 11
9745: PUSH
9746: LD_INT 9
9748: PUSH
9749: LD_INT 20
9751: PUSH
9752: LD_INT 19
9754: PUSH
9755: LD_INT 21
9757: PUSH
9758: LD_INT 24
9760: PUSH
9761: LD_INT 22
9763: PUSH
9764: LD_INT 25
9766: PUSH
9767: LD_INT 28
9769: PUSH
9770: LD_INT 29
9772: PUSH
9773: LD_INT 30
9775: PUSH
9776: LD_INT 31
9778: PUSH
9779: LD_INT 37
9781: PUSH
9782: LD_INT 38
9784: PUSH
9785: LD_INT 32
9787: PUSH
9788: LD_INT 27
9790: PUSH
9791: LD_INT 33
9793: PUSH
9794: LD_INT 69
9796: PUSH
9797: LD_INT 39
9799: PUSH
9800: LD_INT 34
9802: PUSH
9803: LD_INT 40
9805: PUSH
9806: LD_INT 71
9808: PUSH
9809: LD_INT 23
9811: PUSH
9812: LD_INT 44
9814: PUSH
9815: LD_INT 48
9817: PUSH
9818: LD_INT 49
9820: PUSH
9821: LD_INT 50
9823: PUSH
9824: LD_INT 51
9826: PUSH
9827: LD_INT 52
9829: PUSH
9830: LD_INT 53
9832: PUSH
9833: LD_INT 54
9835: PUSH
9836: LD_INT 55
9838: PUSH
9839: LD_INT 56
9841: PUSH
9842: LD_INT 57
9844: PUSH
9845: LD_INT 58
9847: PUSH
9848: LD_INT 59
9850: PUSH
9851: LD_INT 63
9853: PUSH
9854: LD_INT 64
9856: PUSH
9857: LD_INT 65
9859: PUSH
9860: LD_INT 82
9862: PUSH
9863: LD_INT 83
9865: PUSH
9866: LD_INT 84
9868: PUSH
9869: LD_INT 85
9871: PUSH
9872: LD_INT 86
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: ST_TO_ADDR
9930: GO 9933
9932: POP
// if state > - 1 and state < 3 then
9933: LD_VAR 0 3
9937: PUSH
9938: LD_INT 1
9940: NEG
9941: GREATER
9942: PUSH
9943: LD_VAR 0 3
9947: PUSH
9948: LD_INT 3
9950: LESS
9951: AND
9952: IFFALSE 10009
// for i in result do
9954: LD_ADDR_VAR 0 5
9958: PUSH
9959: LD_VAR 0 4
9963: PUSH
9964: FOR_IN
9965: IFFALSE 10007
// if GetTech ( i , side ) <> state then
9967: LD_VAR 0 5
9971: PPUSH
9972: LD_VAR 0 1
9976: PPUSH
9977: CALL_OW 321
9981: PUSH
9982: LD_VAR 0 3
9986: NONEQUAL
9987: IFFALSE 10005
// result := result diff i ;
9989: LD_ADDR_VAR 0 4
9993: PUSH
9994: LD_VAR 0 4
9998: PUSH
9999: LD_VAR 0 5
10003: DIFF
10004: ST_TO_ADDR
10005: GO 9964
10007: POP
10008: POP
// end ;
10009: LD_VAR 0 4
10013: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
10018: PPUSH
// result := true ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_INT 1
10026: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10027: LD_ADDR_VAR 0 5
10031: PUSH
10032: LD_VAR 0 2
10036: PPUSH
10037: CALL_OW 480
10041: ST_TO_ADDR
// if not tmp then
10042: LD_VAR 0 5
10046: NOT
10047: IFFALSE 10051
// exit ;
10049: GO 10100
// for i in tmp do
10051: LD_ADDR_VAR 0 4
10055: PUSH
10056: LD_VAR 0 5
10060: PUSH
10061: FOR_IN
10062: IFFALSE 10098
// if GetTech ( i , side ) <> state_researched then
10064: LD_VAR 0 4
10068: PPUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 321
10078: PUSH
10079: LD_INT 2
10081: NONEQUAL
10082: IFFALSE 10096
// begin result := false ;
10084: LD_ADDR_VAR 0 3
10088: PUSH
10089: LD_INT 0
10091: ST_TO_ADDR
// exit ;
10092: POP
10093: POP
10094: GO 10100
// end ;
10096: GO 10061
10098: POP
10099: POP
// end ;
10100: LD_VAR 0 3
10104: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10105: LD_INT 0
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
10113: PPUSH
10114: PPUSH
10115: PPUSH
10116: PPUSH
10117: PPUSH
10118: PPUSH
10119: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10120: LD_VAR 0 1
10124: NOT
10125: PUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: CALL_OW 257
10135: PUSH
10136: LD_INT 9
10138: NONEQUAL
10139: OR
10140: IFFALSE 10144
// exit ;
10142: GO 10717
// side := GetSide ( unit ) ;
10144: LD_ADDR_VAR 0 9
10148: PUSH
10149: LD_VAR 0 1
10153: PPUSH
10154: CALL_OW 255
10158: ST_TO_ADDR
// tech_space := tech_spacanom ;
10159: LD_ADDR_VAR 0 12
10163: PUSH
10164: LD_INT 29
10166: ST_TO_ADDR
// tech_time := tech_taurad ;
10167: LD_ADDR_VAR 0 13
10171: PUSH
10172: LD_INT 28
10174: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10175: LD_ADDR_VAR 0 11
10179: PUSH
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL_OW 310
10189: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10190: LD_VAR 0 11
10194: PPUSH
10195: CALL_OW 247
10199: PUSH
10200: LD_INT 2
10202: EQUAL
10203: IFFALSE 10207
// exit ;
10205: GO 10717
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10207: LD_ADDR_VAR 0 8
10211: PUSH
10212: LD_INT 81
10214: PUSH
10215: LD_VAR 0 9
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 3
10226: PUSH
10227: LD_INT 21
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PPUSH
10245: CALL_OW 69
10249: ST_TO_ADDR
// if not tmp then
10250: LD_VAR 0 8
10254: NOT
10255: IFFALSE 10259
// exit ;
10257: GO 10717
// if in_unit then
10259: LD_VAR 0 11
10263: IFFALSE 10287
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10265: LD_ADDR_VAR 0 10
10269: PUSH
10270: LD_VAR 0 8
10274: PPUSH
10275: LD_VAR 0 11
10279: PPUSH
10280: CALL_OW 74
10284: ST_TO_ADDR
10285: GO 10307
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10287: LD_ADDR_VAR 0 10
10291: PUSH
10292: LD_VAR 0 8
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 74
10306: ST_TO_ADDR
// if not enemy then
10307: LD_VAR 0 10
10311: NOT
10312: IFFALSE 10316
// exit ;
10314: GO 10717
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10316: LD_VAR 0 11
10320: PUSH
10321: LD_VAR 0 11
10325: PPUSH
10326: LD_VAR 0 10
10330: PPUSH
10331: CALL_OW 296
10335: PUSH
10336: LD_INT 13
10338: GREATER
10339: AND
10340: PUSH
10341: LD_VAR 0 1
10345: PPUSH
10346: LD_VAR 0 10
10350: PPUSH
10351: CALL_OW 296
10355: PUSH
10356: LD_INT 12
10358: GREATER
10359: OR
10360: IFFALSE 10364
// exit ;
10362: GO 10717
// missile := [ 1 ] ;
10364: LD_ADDR_VAR 0 14
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: EMPTY
10373: LIST
10374: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10375: LD_VAR 0 9
10379: PPUSH
10380: LD_VAR 0 12
10384: PPUSH
10385: CALL_OW 325
10389: IFFALSE 10418
// missile := Replace ( missile , missile + 1 , 2 ) ;
10391: LD_ADDR_VAR 0 14
10395: PUSH
10396: LD_VAR 0 14
10400: PPUSH
10401: LD_VAR 0 14
10405: PUSH
10406: LD_INT 1
10408: PLUS
10409: PPUSH
10410: LD_INT 2
10412: PPUSH
10413: CALL_OW 1
10417: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10418: LD_VAR 0 9
10422: PPUSH
10423: LD_VAR 0 13
10427: PPUSH
10428: CALL_OW 325
10432: PUSH
10433: LD_VAR 0 10
10437: PPUSH
10438: CALL_OW 255
10442: PPUSH
10443: LD_VAR 0 13
10447: PPUSH
10448: CALL_OW 325
10452: NOT
10453: AND
10454: IFFALSE 10483
// missile := Replace ( missile , missile + 1 , 3 ) ;
10456: LD_ADDR_VAR 0 14
10460: PUSH
10461: LD_VAR 0 14
10465: PPUSH
10466: LD_VAR 0 14
10470: PUSH
10471: LD_INT 1
10473: PLUS
10474: PPUSH
10475: LD_INT 3
10477: PPUSH
10478: CALL_OW 1
10482: ST_TO_ADDR
// if missile < 2 then
10483: LD_VAR 0 14
10487: PUSH
10488: LD_INT 2
10490: LESS
10491: IFFALSE 10495
// exit ;
10493: GO 10717
// x := GetX ( enemy ) ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 10
10504: PPUSH
10505: CALL_OW 250
10509: ST_TO_ADDR
// y := GetY ( enemy ) ;
10510: LD_ADDR_VAR 0 5
10514: PUSH
10515: LD_VAR 0 10
10519: PPUSH
10520: CALL_OW 251
10524: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10525: LD_ADDR_VAR 0 6
10529: PUSH
10530: LD_VAR 0 4
10534: PUSH
10535: LD_INT 1
10537: NEG
10538: PPUSH
10539: LD_INT 1
10541: PPUSH
10542: CALL_OW 12
10546: PLUS
10547: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10548: LD_ADDR_VAR 0 7
10552: PUSH
10553: LD_VAR 0 5
10557: PUSH
10558: LD_INT 1
10560: NEG
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 12
10569: PLUS
10570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10571: LD_VAR 0 6
10575: PPUSH
10576: LD_VAR 0 7
10580: PPUSH
10581: CALL_OW 488
10585: NOT
10586: IFFALSE 10608
// begin _x := x ;
10588: LD_ADDR_VAR 0 6
10592: PUSH
10593: LD_VAR 0 4
10597: ST_TO_ADDR
// _y := y ;
10598: LD_ADDR_VAR 0 7
10602: PUSH
10603: LD_VAR 0 5
10607: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10608: LD_ADDR_VAR 0 3
10612: PUSH
10613: LD_INT 1
10615: PPUSH
10616: LD_VAR 0 14
10620: PPUSH
10621: CALL_OW 12
10625: ST_TO_ADDR
// case i of 1 :
10626: LD_VAR 0 3
10630: PUSH
10631: LD_INT 1
10633: DOUBLE
10634: EQUAL
10635: IFTRUE 10639
10637: GO 10656
10639: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10640: LD_VAR 0 1
10644: PPUSH
10645: LD_VAR 0 10
10649: PPUSH
10650: CALL_OW 115
10654: GO 10717
10656: LD_INT 2
10658: DOUBLE
10659: EQUAL
10660: IFTRUE 10664
10662: GO 10686
10664: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10665: LD_VAR 0 1
10669: PPUSH
10670: LD_VAR 0 6
10674: PPUSH
10675: LD_VAR 0 7
10679: PPUSH
10680: CALL_OW 153
10684: GO 10717
10686: LD_INT 3
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10716
10694: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10695: LD_VAR 0 1
10699: PPUSH
10700: LD_VAR 0 6
10704: PPUSH
10705: LD_VAR 0 7
10709: PPUSH
10710: CALL_OW 154
10714: GO 10717
10716: POP
// end ;
10717: LD_VAR 0 2
10721: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10722: LD_INT 0
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
// if not unit or not building then
10730: LD_VAR 0 1
10734: NOT
10735: PUSH
10736: LD_VAR 0 2
10740: NOT
10741: OR
10742: IFFALSE 10746
// exit ;
10744: GO 10904
// x := GetX ( building ) ;
10746: LD_ADDR_VAR 0 5
10750: PUSH
10751: LD_VAR 0 2
10755: PPUSH
10756: CALL_OW 250
10760: ST_TO_ADDR
// y := GetY ( building ) ;
10761: LD_ADDR_VAR 0 6
10765: PUSH
10766: LD_VAR 0 2
10770: PPUSH
10771: CALL_OW 251
10775: ST_TO_ADDR
// for i = 0 to 5 do
10776: LD_ADDR_VAR 0 4
10780: PUSH
10781: DOUBLE
10782: LD_INT 0
10784: DEC
10785: ST_TO_ADDR
10786: LD_INT 5
10788: PUSH
10789: FOR_TO
10790: IFFALSE 10902
// begin _x := ShiftX ( x , i , 3 ) ;
10792: LD_ADDR_VAR 0 7
10796: PUSH
10797: LD_VAR 0 5
10801: PPUSH
10802: LD_VAR 0 4
10806: PPUSH
10807: LD_INT 3
10809: PPUSH
10810: CALL_OW 272
10814: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10815: LD_ADDR_VAR 0 8
10819: PUSH
10820: LD_VAR 0 6
10824: PPUSH
10825: LD_VAR 0 4
10829: PPUSH
10830: LD_INT 3
10832: PPUSH
10833: CALL_OW 273
10837: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10838: LD_VAR 0 7
10842: PPUSH
10843: LD_VAR 0 8
10847: PPUSH
10848: CALL_OW 488
10852: NOT
10853: IFFALSE 10857
// continue ;
10855: GO 10789
// if HexInfo ( _x , _y ) = 0 then
10857: LD_VAR 0 7
10861: PPUSH
10862: LD_VAR 0 8
10866: PPUSH
10867: CALL_OW 428
10871: PUSH
10872: LD_INT 0
10874: EQUAL
10875: IFFALSE 10900
// begin ComMoveXY ( unit , _x , _y ) ;
10877: LD_VAR 0 1
10881: PPUSH
10882: LD_VAR 0 7
10886: PPUSH
10887: LD_VAR 0 8
10891: PPUSH
10892: CALL_OW 111
// exit ;
10896: POP
10897: POP
10898: GO 10904
// end ; end ;
10900: GO 10789
10902: POP
10903: POP
// end ;
10904: LD_VAR 0 3
10908: RET
// export function ScanBase ( side , base_area ) ; begin
10909: LD_INT 0
10911: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10912: LD_ADDR_VAR 0 3
10916: PUSH
10917: LD_VAR 0 2
10921: PPUSH
10922: LD_INT 81
10924: PUSH
10925: LD_VAR 0 1
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 70
10938: ST_TO_ADDR
// end ;
10939: LD_VAR 0 3
10943: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10944: LD_INT 0
10946: PPUSH
10947: PPUSH
10948: PPUSH
10949: PPUSH
// result := false ;
10950: LD_ADDR_VAR 0 2
10954: PUSH
10955: LD_INT 0
10957: ST_TO_ADDR
// side := GetSide ( unit ) ;
10958: LD_ADDR_VAR 0 3
10962: PUSH
10963: LD_VAR 0 1
10967: PPUSH
10968: CALL_OW 255
10972: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10973: LD_ADDR_VAR 0 4
10977: PUSH
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 248
10987: ST_TO_ADDR
// case nat of 1 :
10988: LD_VAR 0 4
10992: PUSH
10993: LD_INT 1
10995: DOUBLE
10996: EQUAL
10997: IFTRUE 11001
10999: GO 11012
11001: POP
// tech := tech_lassight ; 2 :
11002: LD_ADDR_VAR 0 5
11006: PUSH
11007: LD_INT 12
11009: ST_TO_ADDR
11010: GO 11051
11012: LD_INT 2
11014: DOUBLE
11015: EQUAL
11016: IFTRUE 11020
11018: GO 11031
11020: POP
// tech := tech_mortar ; 3 :
11021: LD_ADDR_VAR 0 5
11025: PUSH
11026: LD_INT 41
11028: ST_TO_ADDR
11029: GO 11051
11031: LD_INT 3
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 11050
11039: POP
// tech := tech_bazooka ; end ;
11040: LD_ADDR_VAR 0 5
11044: PUSH
11045: LD_INT 44
11047: ST_TO_ADDR
11048: GO 11051
11050: POP
// if Researched ( side , tech ) then
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_VAR 0 5
11060: PPUSH
11061: CALL_OW 325
11065: IFFALSE 11092
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11067: LD_ADDR_VAR 0 2
11071: PUSH
11072: LD_INT 5
11074: PUSH
11075: LD_INT 8
11077: PUSH
11078: LD_INT 9
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: LD_VAR 0 4
11090: ARRAY
11091: ST_TO_ADDR
// end ;
11092: LD_VAR 0 2
11096: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11097: LD_INT 0
11099: PPUSH
11100: PPUSH
11101: PPUSH
// if not mines then
11102: LD_VAR 0 2
11106: NOT
11107: IFFALSE 11111
// exit ;
11109: GO 11255
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11111: LD_ADDR_VAR 0 5
11115: PUSH
11116: LD_INT 81
11118: PUSH
11119: LD_VAR 0 1
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 3
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 69
11153: ST_TO_ADDR
// for i in mines do
11154: LD_ADDR_VAR 0 4
11158: PUSH
11159: LD_VAR 0 2
11163: PUSH
11164: FOR_IN
11165: IFFALSE 11253
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11167: LD_VAR 0 4
11171: PUSH
11172: LD_INT 1
11174: ARRAY
11175: PPUSH
11176: LD_VAR 0 4
11180: PUSH
11181: LD_INT 2
11183: ARRAY
11184: PPUSH
11185: CALL_OW 458
11189: NOT
11190: IFFALSE 11194
// continue ;
11192: GO 11164
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11194: LD_VAR 0 4
11198: PUSH
11199: LD_INT 1
11201: ARRAY
11202: PPUSH
11203: LD_VAR 0 4
11207: PUSH
11208: LD_INT 2
11210: ARRAY
11211: PPUSH
11212: CALL_OW 428
11216: PUSH
11217: LD_VAR 0 5
11221: IN
11222: IFFALSE 11251
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11224: LD_VAR 0 4
11228: PUSH
11229: LD_INT 1
11231: ARRAY
11232: PPUSH
11233: LD_VAR 0 4
11237: PUSH
11238: LD_INT 2
11240: ARRAY
11241: PPUSH
11242: LD_VAR 0 1
11246: PPUSH
11247: CALL_OW 456
// end ;
11251: GO 11164
11253: POP
11254: POP
// end ;
11255: LD_VAR 0 3
11259: RET
// export function Count ( array ) ; begin
11260: LD_INT 0
11262: PPUSH
// result := array + 0 ;
11263: LD_ADDR_VAR 0 2
11267: PUSH
11268: LD_VAR 0 1
11272: PUSH
11273: LD_INT 0
11275: PLUS
11276: ST_TO_ADDR
// end ;
11277: LD_VAR 0 2
11281: RET
// export function IsEmpty ( building ) ; begin
11282: LD_INT 0
11284: PPUSH
// if not building then
11285: LD_VAR 0 1
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11337
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11294: LD_ADDR_VAR 0 2
11298: PUSH
11299: LD_VAR 0 1
11303: PUSH
11304: LD_INT 22
11306: PUSH
11307: LD_VAR 0 1
11311: PPUSH
11312: CALL_OW 255
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 58
11323: PUSH
11324: EMPTY
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: CALL_OW 69
11335: IN
11336: ST_TO_ADDR
// end ;
11337: LD_VAR 0 2
11341: RET
// export function IsNotFull ( building ) ; var places ; begin
11342: LD_INT 0
11344: PPUSH
11345: PPUSH
// if not building then
11346: LD_VAR 0 1
11350: NOT
11351: IFFALSE 11355
// exit ;
11353: GO 11383
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11355: LD_ADDR_VAR 0 2
11359: PUSH
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_INT 3
11367: PUSH
11368: LD_INT 62
11370: PUSH
11371: EMPTY
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 72
11382: ST_TO_ADDR
// end ;
11383: LD_VAR 0 2
11387: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
// tmp := [ ] ;
11394: LD_ADDR_VAR 0 3
11398: PUSH
11399: EMPTY
11400: ST_TO_ADDR
// list := [ ] ;
11401: LD_ADDR_VAR 0 5
11405: PUSH
11406: EMPTY
11407: ST_TO_ADDR
// for i = 16 to 25 do
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: DOUBLE
11414: LD_INT 16
11416: DEC
11417: ST_TO_ADDR
11418: LD_INT 25
11420: PUSH
11421: FOR_TO
11422: IFFALSE 11495
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11424: LD_ADDR_VAR 0 3
11428: PUSH
11429: LD_VAR 0 3
11433: PUSH
11434: LD_INT 22
11436: PUSH
11437: LD_VAR 0 1
11441: PPUSH
11442: CALL_OW 255
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 91
11453: PUSH
11454: LD_VAR 0 1
11458: PUSH
11459: LD_INT 6
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 30
11469: PUSH
11470: LD_VAR 0 4
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: PPUSH
11487: CALL_OW 69
11491: ADD
11492: ST_TO_ADDR
11493: GO 11421
11495: POP
11496: POP
// for i = 1 to tmp do
11497: LD_ADDR_VAR 0 4
11501: PUSH
11502: DOUBLE
11503: LD_INT 1
11505: DEC
11506: ST_TO_ADDR
11507: LD_VAR 0 3
11511: PUSH
11512: FOR_TO
11513: IFFALSE 11601
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11515: LD_ADDR_VAR 0 5
11519: PUSH
11520: LD_VAR 0 5
11524: PUSH
11525: LD_VAR 0 3
11529: PUSH
11530: LD_VAR 0 4
11534: ARRAY
11535: PPUSH
11536: CALL_OW 266
11540: PUSH
11541: LD_VAR 0 3
11545: PUSH
11546: LD_VAR 0 4
11550: ARRAY
11551: PPUSH
11552: CALL_OW 250
11556: PUSH
11557: LD_VAR 0 3
11561: PUSH
11562: LD_VAR 0 4
11566: ARRAY
11567: PPUSH
11568: CALL_OW 251
11572: PUSH
11573: LD_VAR 0 3
11577: PUSH
11578: LD_VAR 0 4
11582: ARRAY
11583: PPUSH
11584: CALL_OW 254
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: ADD
11598: ST_TO_ADDR
11599: GO 11512
11601: POP
11602: POP
// result := list ;
11603: LD_ADDR_VAR 0 2
11607: PUSH
11608: LD_VAR 0 5
11612: ST_TO_ADDR
// end ;
11613: LD_VAR 0 2
11617: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11618: LD_INT 0
11620: PPUSH
11621: PPUSH
11622: PPUSH
11623: PPUSH
11624: PPUSH
11625: PPUSH
11626: PPUSH
// if not factory then
11627: LD_VAR 0 1
11631: NOT
11632: IFFALSE 11636
// exit ;
11634: GO 12229
// if control = control_apeman then
11636: LD_VAR 0 4
11640: PUSH
11641: LD_INT 5
11643: EQUAL
11644: IFFALSE 11753
// begin tmp := UnitsInside ( factory ) ;
11646: LD_ADDR_VAR 0 8
11650: PUSH
11651: LD_VAR 0 1
11655: PPUSH
11656: CALL_OW 313
11660: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11661: LD_VAR 0 8
11665: PPUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 72
11680: NOT
11681: IFFALSE 11691
// control := control_manual ;
11683: LD_ADDR_VAR 0 4
11687: PUSH
11688: LD_INT 1
11690: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11691: LD_ADDR_VAR 0 8
11695: PUSH
11696: LD_VAR 0 1
11700: PPUSH
11701: CALL 11388 0 1
11705: ST_TO_ADDR
// if tmp then
11706: LD_VAR 0 8
11710: IFFALSE 11753
// begin for i in tmp do
11712: LD_ADDR_VAR 0 7
11716: PUSH
11717: LD_VAR 0 8
11721: PUSH
11722: FOR_IN
11723: IFFALSE 11751
// if i [ 1 ] = b_ext_radio then
11725: LD_VAR 0 7
11729: PUSH
11730: LD_INT 1
11732: ARRAY
11733: PUSH
11734: LD_INT 22
11736: EQUAL
11737: IFFALSE 11749
// begin control := control_remote ;
11739: LD_ADDR_VAR 0 4
11743: PUSH
11744: LD_INT 2
11746: ST_TO_ADDR
// break ;
11747: GO 11751
// end ;
11749: GO 11722
11751: POP
11752: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11753: LD_VAR 0 1
11757: PPUSH
11758: LD_VAR 0 2
11762: PPUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_VAR 0 4
11772: PPUSH
11773: LD_VAR 0 5
11777: PPUSH
11778: CALL_OW 448
11782: IFFALSE 11817
// begin result := [ chassis , engine , control , weapon ] ;
11784: LD_ADDR_VAR 0 6
11788: PUSH
11789: LD_VAR 0 2
11793: PUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_VAR 0 4
11803: PUSH
11804: LD_VAR 0 5
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: ST_TO_ADDR
// exit ;
11815: GO 12229
// end ; _chassis := AvailableChassisList ( factory ) ;
11817: LD_ADDR_VAR 0 9
11821: PUSH
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 475
11831: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11832: LD_ADDR_VAR 0 11
11836: PUSH
11837: LD_VAR 0 1
11841: PPUSH
11842: CALL_OW 476
11846: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11847: LD_ADDR_VAR 0 12
11851: PUSH
11852: LD_VAR 0 1
11856: PPUSH
11857: CALL_OW 477
11861: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11862: LD_ADDR_VAR 0 10
11866: PUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 478
11876: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11877: LD_VAR 0 9
11881: NOT
11882: PUSH
11883: LD_VAR 0 11
11887: NOT
11888: OR
11889: PUSH
11890: LD_VAR 0 12
11894: NOT
11895: OR
11896: PUSH
11897: LD_VAR 0 10
11901: NOT
11902: OR
11903: IFFALSE 11938
// begin result := [ chassis , engine , control , weapon ] ;
11905: LD_ADDR_VAR 0 6
11909: PUSH
11910: LD_VAR 0 2
11914: PUSH
11915: LD_VAR 0 3
11919: PUSH
11920: LD_VAR 0 4
11924: PUSH
11925: LD_VAR 0 5
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: ST_TO_ADDR
// exit ;
11936: GO 12229
// end ; if not chassis in _chassis then
11938: LD_VAR 0 2
11942: PUSH
11943: LD_VAR 0 9
11947: IN
11948: NOT
11949: IFFALSE 11975
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_VAR 0 9
11960: PUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_VAR 0 9
11968: PPUSH
11969: CALL_OW 12
11973: ARRAY
11974: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11975: LD_VAR 0 2
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: CALL 12234 0 2
11989: NOT
11990: IFFALSE 12049
// repeat engine := _engine [ 1 ] ;
11992: LD_ADDR_VAR 0 3
11996: PUSH
11997: LD_VAR 0 11
12001: PUSH
12002: LD_INT 1
12004: ARRAY
12005: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12006: LD_ADDR_VAR 0 11
12010: PUSH
12011: LD_VAR 0 11
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 3
12023: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12024: LD_VAR 0 2
12028: PPUSH
12029: LD_VAR 0 3
12033: PPUSH
12034: CALL 12234 0 2
12038: PUSH
12039: LD_VAR 0 11
12043: PUSH
12044: EMPTY
12045: EQUAL
12046: OR
12047: IFFALSE 11992
// if not control in _control then
12049: LD_VAR 0 4
12053: PUSH
12054: LD_VAR 0 12
12058: IN
12059: NOT
12060: IFFALSE 12086
// control := _control [ rand ( 1 , _control ) ] ;
12062: LD_ADDR_VAR 0 4
12066: PUSH
12067: LD_VAR 0 12
12071: PUSH
12072: LD_INT 1
12074: PPUSH
12075: LD_VAR 0 12
12079: PPUSH
12080: CALL_OW 12
12084: ARRAY
12085: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12086: LD_VAR 0 2
12090: PPUSH
12091: LD_VAR 0 5
12095: PPUSH
12096: CALL 12454 0 2
12100: NOT
12101: IFFALSE 12160
// repeat weapon := _weapon [ 1 ] ;
12103: LD_ADDR_VAR 0 5
12107: PUSH
12108: LD_VAR 0 10
12112: PUSH
12113: LD_INT 1
12115: ARRAY
12116: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12117: LD_ADDR_VAR 0 10
12121: PUSH
12122: LD_VAR 0 10
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 3
12134: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12135: LD_VAR 0 2
12139: PPUSH
12140: LD_VAR 0 5
12144: PPUSH
12145: CALL 12454 0 2
12149: PUSH
12150: LD_VAR 0 10
12154: PUSH
12155: EMPTY
12156: EQUAL
12157: OR
12158: IFFALSE 12103
// result := [ ] ;
12160: LD_ADDR_VAR 0 6
12164: PUSH
12165: EMPTY
12166: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12167: LD_VAR 0 1
12171: PPUSH
12172: LD_VAR 0 2
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_VAR 0 4
12186: PPUSH
12187: LD_VAR 0 5
12191: PPUSH
12192: CALL_OW 448
12196: IFFALSE 12229
// result := [ chassis , engine , control , weapon ] ;
12198: LD_ADDR_VAR 0 6
12202: PUSH
12203: LD_VAR 0 2
12207: PUSH
12208: LD_VAR 0 3
12212: PUSH
12213: LD_VAR 0 4
12217: PUSH
12218: LD_VAR 0 5
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: ST_TO_ADDR
// end ;
12229: LD_VAR 0 6
12233: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12234: LD_INT 0
12236: PPUSH
// if not chassis or not engine then
12237: LD_VAR 0 1
12241: NOT
12242: PUSH
12243: LD_VAR 0 2
12247: NOT
12248: OR
12249: IFFALSE 12253
// exit ;
12251: GO 12449
// case engine of engine_solar :
12253: LD_VAR 0 2
12257: PUSH
12258: LD_INT 2
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12304
12266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_INT 11
12274: PUSH
12275: LD_INT 12
12277: PUSH
12278: LD_INT 13
12280: PUSH
12281: LD_INT 14
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 3
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: ST_TO_ADDR
12302: GO 12433
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12374
12312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12313: LD_ADDR_VAR 0 3
12317: PUSH
12318: LD_INT 11
12320: PUSH
12321: LD_INT 12
12323: PUSH
12324: LD_INT 13
12326: PUSH
12327: LD_INT 14
12329: PUSH
12330: LD_INT 1
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 3
12338: PUSH
12339: LD_INT 4
12341: PUSH
12342: LD_INT 5
12344: PUSH
12345: LD_INT 21
12347: PUSH
12348: LD_INT 23
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_INT 24
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: ST_TO_ADDR
12372: GO 12433
12374: LD_INT 3
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12432
12382: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12383: LD_ADDR_VAR 0 3
12387: PUSH
12388: LD_INT 13
12390: PUSH
12391: LD_INT 14
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: LD_INT 3
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: LD_INT 21
12408: PUSH
12409: LD_INT 22
12411: PUSH
12412: LD_INT 23
12414: PUSH
12415: LD_INT 24
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: ST_TO_ADDR
12430: GO 12433
12432: POP
// result := ( chassis in result ) ;
12433: LD_ADDR_VAR 0 3
12437: PUSH
12438: LD_VAR 0 1
12442: PUSH
12443: LD_VAR 0 3
12447: IN
12448: ST_TO_ADDR
// end ;
12449: LD_VAR 0 3
12453: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12454: LD_INT 0
12456: PPUSH
// if not chassis or not weapon then
12457: LD_VAR 0 1
12461: NOT
12462: PUSH
12463: LD_VAR 0 2
12467: NOT
12468: OR
12469: IFFALSE 12473
// exit ;
12471: GO 13533
// case weapon of us_machine_gun :
12473: LD_VAR 0 2
12477: PUSH
12478: LD_INT 2
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12516
12486: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12487: LD_ADDR_VAR 0 3
12491: PUSH
12492: LD_INT 1
12494: PUSH
12495: LD_INT 2
12497: PUSH
12498: LD_INT 3
12500: PUSH
12501: LD_INT 4
12503: PUSH
12504: LD_INT 5
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: ST_TO_ADDR
12514: GO 13517
12516: LD_INT 3
12518: DOUBLE
12519: EQUAL
12520: IFTRUE 12524
12522: GO 12554
12524: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12525: LD_ADDR_VAR 0 3
12529: PUSH
12530: LD_INT 1
12532: PUSH
12533: LD_INT 2
12535: PUSH
12536: LD_INT 3
12538: PUSH
12539: LD_INT 4
12541: PUSH
12542: LD_INT 5
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: ST_TO_ADDR
12552: GO 13517
12554: LD_INT 11
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12592
12562: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12563: LD_ADDR_VAR 0 3
12567: PUSH
12568: LD_INT 1
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: LD_INT 3
12576: PUSH
12577: LD_INT 4
12579: PUSH
12580: LD_INT 5
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: ST_TO_ADDR
12590: GO 13517
12592: LD_INT 4
12594: DOUBLE
12595: EQUAL
12596: IFTRUE 12600
12598: GO 12626
12600: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12601: LD_ADDR_VAR 0 3
12605: PUSH
12606: LD_INT 2
12608: PUSH
12609: LD_INT 3
12611: PUSH
12612: LD_INT 4
12614: PUSH
12615: LD_INT 5
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: ST_TO_ADDR
12624: GO 13517
12626: LD_INT 5
12628: DOUBLE
12629: EQUAL
12630: IFTRUE 12634
12632: GO 12660
12634: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: LD_INT 4
12648: PUSH
12649: LD_INT 5
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: ST_TO_ADDR
12658: GO 13517
12660: LD_INT 9
12662: DOUBLE
12663: EQUAL
12664: IFTRUE 12668
12666: GO 12694
12668: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12669: LD_ADDR_VAR 0 3
12673: PUSH
12674: LD_INT 2
12676: PUSH
12677: LD_INT 3
12679: PUSH
12680: LD_INT 4
12682: PUSH
12683: LD_INT 5
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: ST_TO_ADDR
12692: GO 13517
12694: LD_INT 7
12696: DOUBLE
12697: EQUAL
12698: IFTRUE 12702
12700: GO 12728
12702: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12703: LD_ADDR_VAR 0 3
12707: PUSH
12708: LD_INT 2
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: LD_INT 4
12716: PUSH
12717: LD_INT 5
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: ST_TO_ADDR
12726: GO 13517
12728: LD_INT 12
12730: DOUBLE
12731: EQUAL
12732: IFTRUE 12736
12734: GO 12762
12736: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12737: LD_ADDR_VAR 0 3
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 3
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: LD_INT 5
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: ST_TO_ADDR
12760: GO 13517
12762: LD_INT 13
12764: DOUBLE
12765: EQUAL
12766: IFTRUE 12770
12768: GO 12796
12770: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12771: LD_ADDR_VAR 0 3
12775: PUSH
12776: LD_INT 2
12778: PUSH
12779: LD_INT 3
12781: PUSH
12782: LD_INT 4
12784: PUSH
12785: LD_INT 5
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: ST_TO_ADDR
12794: GO 13517
12796: LD_INT 14
12798: DOUBLE
12799: EQUAL
12800: IFTRUE 12804
12802: GO 12822
12804: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: LD_INT 4
12812: PUSH
12813: LD_INT 5
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: ST_TO_ADDR
12820: GO 13517
12822: LD_INT 6
12824: DOUBLE
12825: EQUAL
12826: IFTRUE 12830
12828: GO 12848
12830: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12831: LD_ADDR_VAR 0 3
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: LD_INT 5
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: ST_TO_ADDR
12846: GO 13517
12848: LD_INT 10
12850: DOUBLE
12851: EQUAL
12852: IFTRUE 12856
12854: GO 12874
12856: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12857: LD_ADDR_VAR 0 3
12861: PUSH
12862: LD_INT 4
12864: PUSH
12865: LD_INT 5
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: ST_TO_ADDR
12872: GO 13517
12874: LD_INT 22
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12908
12882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12883: LD_ADDR_VAR 0 3
12887: PUSH
12888: LD_INT 11
12890: PUSH
12891: LD_INT 12
12893: PUSH
12894: LD_INT 13
12896: PUSH
12897: LD_INT 14
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: ST_TO_ADDR
12906: GO 13517
12908: LD_INT 23
12910: DOUBLE
12911: EQUAL
12912: IFTRUE 12916
12914: GO 12942
12916: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12917: LD_ADDR_VAR 0 3
12921: PUSH
12922: LD_INT 11
12924: PUSH
12925: LD_INT 12
12927: PUSH
12928: LD_INT 13
12930: PUSH
12931: LD_INT 14
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: ST_TO_ADDR
12940: GO 13517
12942: LD_INT 24
12944: DOUBLE
12945: EQUAL
12946: IFTRUE 12950
12948: GO 12976
12950: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12951: LD_ADDR_VAR 0 3
12955: PUSH
12956: LD_INT 11
12958: PUSH
12959: LD_INT 12
12961: PUSH
12962: LD_INT 13
12964: PUSH
12965: LD_INT 14
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: ST_TO_ADDR
12974: GO 13517
12976: LD_INT 30
12978: DOUBLE
12979: EQUAL
12980: IFTRUE 12984
12982: GO 13010
12984: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12985: LD_ADDR_VAR 0 3
12989: PUSH
12990: LD_INT 11
12992: PUSH
12993: LD_INT 12
12995: PUSH
12996: LD_INT 13
12998: PUSH
12999: LD_INT 14
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: ST_TO_ADDR
13008: GO 13517
13010: LD_INT 25
13012: DOUBLE
13013: EQUAL
13014: IFTRUE 13018
13016: GO 13036
13018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13019: LD_ADDR_VAR 0 3
13023: PUSH
13024: LD_INT 13
13026: PUSH
13027: LD_INT 14
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: ST_TO_ADDR
13034: GO 13517
13036: LD_INT 27
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13062
13044: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_INT 13
13052: PUSH
13053: LD_INT 14
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: ST_TO_ADDR
13060: GO 13517
13062: LD_INT 92
13064: DOUBLE
13065: EQUAL
13066: IFTRUE 13070
13068: GO 13096
13070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13071: LD_ADDR_VAR 0 3
13075: PUSH
13076: LD_INT 11
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 13
13084: PUSH
13085: LD_INT 14
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: ST_TO_ADDR
13094: GO 13517
13096: LD_INT 28
13098: DOUBLE
13099: EQUAL
13100: IFTRUE 13104
13102: GO 13122
13104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13105: LD_ADDR_VAR 0 3
13109: PUSH
13110: LD_INT 13
13112: PUSH
13113: LD_INT 14
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: ST_TO_ADDR
13120: GO 13517
13122: LD_INT 29
13124: DOUBLE
13125: EQUAL
13126: IFTRUE 13130
13128: GO 13148
13130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13131: LD_ADDR_VAR 0 3
13135: PUSH
13136: LD_INT 13
13138: PUSH
13139: LD_INT 14
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: ST_TO_ADDR
13146: GO 13517
13148: LD_INT 31
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 13174
13156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13157: LD_ADDR_VAR 0 3
13161: PUSH
13162: LD_INT 13
13164: PUSH
13165: LD_INT 14
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: ST_TO_ADDR
13172: GO 13517
13174: LD_INT 26
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13200
13182: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13183: LD_ADDR_VAR 0 3
13187: PUSH
13188: LD_INT 13
13190: PUSH
13191: LD_INT 14
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: ST_TO_ADDR
13198: GO 13517
13200: LD_INT 42
13202: DOUBLE
13203: EQUAL
13204: IFTRUE 13208
13206: GO 13234
13208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_INT 21
13216: PUSH
13217: LD_INT 22
13219: PUSH
13220: LD_INT 23
13222: PUSH
13223: LD_INT 24
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: ST_TO_ADDR
13232: GO 13517
13234: LD_INT 43
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13268
13242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_INT 21
13250: PUSH
13251: LD_INT 22
13253: PUSH
13254: LD_INT 23
13256: PUSH
13257: LD_INT 24
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: ST_TO_ADDR
13266: GO 13517
13268: LD_INT 44
13270: DOUBLE
13271: EQUAL
13272: IFTRUE 13276
13274: GO 13302
13276: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13277: LD_ADDR_VAR 0 3
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_INT 23
13290: PUSH
13291: LD_INT 24
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: ST_TO_ADDR
13300: GO 13517
13302: LD_INT 45
13304: DOUBLE
13305: EQUAL
13306: IFTRUE 13310
13308: GO 13336
13310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13311: LD_ADDR_VAR 0 3
13315: PUSH
13316: LD_INT 21
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_INT 23
13324: PUSH
13325: LD_INT 24
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: ST_TO_ADDR
13334: GO 13517
13336: LD_INT 49
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13370
13344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13345: LD_ADDR_VAR 0 3
13349: PUSH
13350: LD_INT 21
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_INT 23
13358: PUSH
13359: LD_INT 24
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: ST_TO_ADDR
13368: GO 13517
13370: LD_INT 51
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13404
13378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13379: LD_ADDR_VAR 0 3
13383: PUSH
13384: LD_INT 21
13386: PUSH
13387: LD_INT 22
13389: PUSH
13390: LD_INT 23
13392: PUSH
13393: LD_INT 24
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: ST_TO_ADDR
13402: GO 13517
13404: LD_INT 52
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13438
13412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13413: LD_ADDR_VAR 0 3
13417: PUSH
13418: LD_INT 21
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 24
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: ST_TO_ADDR
13436: GO 13517
13438: LD_INT 53
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13464
13446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13447: LD_ADDR_VAR 0 3
13451: PUSH
13452: LD_INT 23
13454: PUSH
13455: LD_INT 24
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: ST_TO_ADDR
13462: GO 13517
13464: LD_INT 46
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13490
13472: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13473: LD_ADDR_VAR 0 3
13477: PUSH
13478: LD_INT 23
13480: PUSH
13481: LD_INT 24
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: ST_TO_ADDR
13488: GO 13517
13490: LD_INT 47
13492: DOUBLE
13493: EQUAL
13494: IFTRUE 13498
13496: GO 13516
13498: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13499: LD_ADDR_VAR 0 3
13503: PUSH
13504: LD_INT 23
13506: PUSH
13507: LD_INT 24
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: ST_TO_ADDR
13514: GO 13517
13516: POP
// result := ( chassis in result ) ;
13517: LD_ADDR_VAR 0 3
13521: PUSH
13522: LD_VAR 0 1
13526: PUSH
13527: LD_VAR 0 3
13531: IN
13532: ST_TO_ADDR
// end ;
13533: LD_VAR 0 3
13537: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13538: LD_INT 0
13540: PPUSH
13541: PPUSH
13542: PPUSH
13543: PPUSH
13544: PPUSH
13545: PPUSH
13546: PPUSH
// result := array ;
13547: LD_ADDR_VAR 0 5
13551: PUSH
13552: LD_VAR 0 1
13556: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13557: LD_VAR 0 1
13561: NOT
13562: PUSH
13563: LD_VAR 0 2
13567: NOT
13568: OR
13569: PUSH
13570: LD_VAR 0 3
13574: NOT
13575: OR
13576: PUSH
13577: LD_VAR 0 2
13581: PUSH
13582: LD_VAR 0 1
13586: GREATER
13587: OR
13588: PUSH
13589: LD_VAR 0 3
13593: PUSH
13594: LD_VAR 0 1
13598: GREATER
13599: OR
13600: IFFALSE 13604
// exit ;
13602: GO 13900
// if direction then
13604: LD_VAR 0 4
13608: IFFALSE 13672
// begin d := 1 ;
13610: LD_ADDR_VAR 0 9
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// if i_from > i_to then
13618: LD_VAR 0 2
13622: PUSH
13623: LD_VAR 0 3
13627: GREATER
13628: IFFALSE 13654
// length := ( array - i_from ) + i_to else
13630: LD_ADDR_VAR 0 11
13634: PUSH
13635: LD_VAR 0 1
13639: PUSH
13640: LD_VAR 0 2
13644: MINUS
13645: PUSH
13646: LD_VAR 0 3
13650: PLUS
13651: ST_TO_ADDR
13652: GO 13670
// length := i_to - i_from ;
13654: LD_ADDR_VAR 0 11
13658: PUSH
13659: LD_VAR 0 3
13663: PUSH
13664: LD_VAR 0 2
13668: MINUS
13669: ST_TO_ADDR
// end else
13670: GO 13733
// begin d := - 1 ;
13672: LD_ADDR_VAR 0 9
13676: PUSH
13677: LD_INT 1
13679: NEG
13680: ST_TO_ADDR
// if i_from > i_to then
13681: LD_VAR 0 2
13685: PUSH
13686: LD_VAR 0 3
13690: GREATER
13691: IFFALSE 13711
// length := i_from - i_to else
13693: LD_ADDR_VAR 0 11
13697: PUSH
13698: LD_VAR 0 2
13702: PUSH
13703: LD_VAR 0 3
13707: MINUS
13708: ST_TO_ADDR
13709: GO 13733
// length := ( array - i_to ) + i_from ;
13711: LD_ADDR_VAR 0 11
13715: PUSH
13716: LD_VAR 0 1
13720: PUSH
13721: LD_VAR 0 3
13725: MINUS
13726: PUSH
13727: LD_VAR 0 2
13731: PLUS
13732: ST_TO_ADDR
// end ; if not length then
13733: LD_VAR 0 11
13737: NOT
13738: IFFALSE 13742
// exit ;
13740: GO 13900
// tmp := array ;
13742: LD_ADDR_VAR 0 10
13746: PUSH
13747: LD_VAR 0 1
13751: ST_TO_ADDR
// for i = 1 to length do
13752: LD_ADDR_VAR 0 6
13756: PUSH
13757: DOUBLE
13758: LD_INT 1
13760: DEC
13761: ST_TO_ADDR
13762: LD_VAR 0 11
13766: PUSH
13767: FOR_TO
13768: IFFALSE 13888
// begin for j = 1 to array do
13770: LD_ADDR_VAR 0 7
13774: PUSH
13775: DOUBLE
13776: LD_INT 1
13778: DEC
13779: ST_TO_ADDR
13780: LD_VAR 0 1
13784: PUSH
13785: FOR_TO
13786: IFFALSE 13874
// begin k := j + d ;
13788: LD_ADDR_VAR 0 8
13792: PUSH
13793: LD_VAR 0 7
13797: PUSH
13798: LD_VAR 0 9
13802: PLUS
13803: ST_TO_ADDR
// if k > array then
13804: LD_VAR 0 8
13808: PUSH
13809: LD_VAR 0 1
13813: GREATER
13814: IFFALSE 13824
// k := 1 ;
13816: LD_ADDR_VAR 0 8
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// if not k then
13824: LD_VAR 0 8
13828: NOT
13829: IFFALSE 13841
// k := array ;
13831: LD_ADDR_VAR 0 8
13835: PUSH
13836: LD_VAR 0 1
13840: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13841: LD_ADDR_VAR 0 10
13845: PUSH
13846: LD_VAR 0 10
13850: PPUSH
13851: LD_VAR 0 8
13855: PPUSH
13856: LD_VAR 0 1
13860: PUSH
13861: LD_VAR 0 7
13865: ARRAY
13866: PPUSH
13867: CALL_OW 1
13871: ST_TO_ADDR
// end ;
13872: GO 13785
13874: POP
13875: POP
// array := tmp ;
13876: LD_ADDR_VAR 0 1
13880: PUSH
13881: LD_VAR 0 10
13885: ST_TO_ADDR
// end ;
13886: GO 13767
13888: POP
13889: POP
// result := array ;
13890: LD_ADDR_VAR 0 5
13894: PUSH
13895: LD_VAR 0 1
13899: ST_TO_ADDR
// end ;
13900: LD_VAR 0 5
13904: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13905: LD_INT 0
13907: PPUSH
13908: PPUSH
// result := 0 ;
13909: LD_ADDR_VAR 0 3
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// if not array or not value in array then
13917: LD_VAR 0 1
13921: NOT
13922: PUSH
13923: LD_VAR 0 2
13927: PUSH
13928: LD_VAR 0 1
13932: IN
13933: NOT
13934: OR
13935: IFFALSE 13939
// exit ;
13937: GO 13993
// for i = 1 to array do
13939: LD_ADDR_VAR 0 4
13943: PUSH
13944: DOUBLE
13945: LD_INT 1
13947: DEC
13948: ST_TO_ADDR
13949: LD_VAR 0 1
13953: PUSH
13954: FOR_TO
13955: IFFALSE 13991
// if value = array [ i ] then
13957: LD_VAR 0 2
13961: PUSH
13962: LD_VAR 0 1
13966: PUSH
13967: LD_VAR 0 4
13971: ARRAY
13972: EQUAL
13973: IFFALSE 13989
// begin result := i ;
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_VAR 0 4
13984: ST_TO_ADDR
// exit ;
13985: POP
13986: POP
13987: GO 13993
// end ;
13989: GO 13954
13991: POP
13992: POP
// end ;
13993: LD_VAR 0 3
13997: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13998: LD_INT 0
14000: PPUSH
// vc_chassis := chassis ;
14001: LD_ADDR_OWVAR 37
14005: PUSH
14006: LD_VAR 0 1
14010: ST_TO_ADDR
// vc_engine := engine ;
14011: LD_ADDR_OWVAR 39
14015: PUSH
14016: LD_VAR 0 2
14020: ST_TO_ADDR
// vc_control := control ;
14021: LD_ADDR_OWVAR 38
14025: PUSH
14026: LD_VAR 0 3
14030: ST_TO_ADDR
// vc_weapon := weapon ;
14031: LD_ADDR_OWVAR 40
14035: PUSH
14036: LD_VAR 0 4
14040: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14041: LD_ADDR_OWVAR 41
14045: PUSH
14046: LD_VAR 0 5
14050: ST_TO_ADDR
// end ;
14051: LD_VAR 0 6
14055: RET
// export function WantPlant ( unit ) ; var task ; begin
14056: LD_INT 0
14058: PPUSH
14059: PPUSH
// result := false ;
14060: LD_ADDR_VAR 0 2
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14068: LD_ADDR_VAR 0 3
14072: PUSH
14073: LD_VAR 0 1
14077: PPUSH
14078: CALL_OW 437
14082: ST_TO_ADDR
// if task then
14083: LD_VAR 0 3
14087: IFFALSE 14115
// if task [ 1 ] [ 1 ] = p then
14089: LD_VAR 0 3
14093: PUSH
14094: LD_INT 1
14096: ARRAY
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PUSH
14102: LD_STRING p
14104: EQUAL
14105: IFFALSE 14115
// result := true ;
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: LD_INT 1
14114: ST_TO_ADDR
// end ;
14115: LD_VAR 0 2
14119: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14120: LD_INT 0
14122: PPUSH
14123: PPUSH
14124: PPUSH
14125: PPUSH
// if pos < 1 then
14126: LD_VAR 0 2
14130: PUSH
14131: LD_INT 1
14133: LESS
14134: IFFALSE 14138
// exit ;
14136: GO 14441
// if pos = 1 then
14138: LD_VAR 0 2
14142: PUSH
14143: LD_INT 1
14145: EQUAL
14146: IFFALSE 14179
// result := Replace ( arr , pos [ 1 ] , value ) else
14148: LD_ADDR_VAR 0 4
14152: PUSH
14153: LD_VAR 0 1
14157: PPUSH
14158: LD_VAR 0 2
14162: PUSH
14163: LD_INT 1
14165: ARRAY
14166: PPUSH
14167: LD_VAR 0 3
14171: PPUSH
14172: CALL_OW 1
14176: ST_TO_ADDR
14177: GO 14441
// begin tmp := arr ;
14179: LD_ADDR_VAR 0 6
14183: PUSH
14184: LD_VAR 0 1
14188: ST_TO_ADDR
// s_arr := [ tmp ] ;
14189: LD_ADDR_VAR 0 7
14193: PUSH
14194: LD_VAR 0 6
14198: PUSH
14199: EMPTY
14200: LIST
14201: ST_TO_ADDR
// for i = 1 to pos - 1 do
14202: LD_ADDR_VAR 0 5
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_VAR 0 2
14216: PUSH
14217: LD_INT 1
14219: MINUS
14220: PUSH
14221: FOR_TO
14222: IFFALSE 14267
// begin tmp := tmp [ pos [ i ] ] ;
14224: LD_ADDR_VAR 0 6
14228: PUSH
14229: LD_VAR 0 6
14233: PUSH
14234: LD_VAR 0 2
14238: PUSH
14239: LD_VAR 0 5
14243: ARRAY
14244: ARRAY
14245: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14246: LD_ADDR_VAR 0 7
14250: PUSH
14251: LD_VAR 0 7
14255: PUSH
14256: LD_VAR 0 6
14260: PUSH
14261: EMPTY
14262: LIST
14263: ADD
14264: ST_TO_ADDR
// end ;
14265: GO 14221
14267: POP
14268: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14269: LD_ADDR_VAR 0 6
14273: PUSH
14274: LD_VAR 0 6
14278: PPUSH
14279: LD_VAR 0 2
14283: PUSH
14284: LD_VAR 0 2
14288: ARRAY
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: CALL_OW 1
14299: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14300: LD_ADDR_VAR 0 7
14304: PUSH
14305: LD_VAR 0 7
14309: PPUSH
14310: LD_VAR 0 7
14314: PPUSH
14315: LD_VAR 0 6
14319: PPUSH
14320: CALL_OW 1
14324: ST_TO_ADDR
// for i = s_arr downto 2 do
14325: LD_ADDR_VAR 0 5
14329: PUSH
14330: DOUBLE
14331: LD_VAR 0 7
14335: INC
14336: ST_TO_ADDR
14337: LD_INT 2
14339: PUSH
14340: FOR_DOWNTO
14341: IFFALSE 14425
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14343: LD_ADDR_VAR 0 6
14347: PUSH
14348: LD_VAR 0 7
14352: PUSH
14353: LD_VAR 0 5
14357: PUSH
14358: LD_INT 1
14360: MINUS
14361: ARRAY
14362: PPUSH
14363: LD_VAR 0 2
14367: PUSH
14368: LD_VAR 0 5
14372: PUSH
14373: LD_INT 1
14375: MINUS
14376: ARRAY
14377: PPUSH
14378: LD_VAR 0 7
14382: PUSH
14383: LD_VAR 0 5
14387: ARRAY
14388: PPUSH
14389: CALL_OW 1
14393: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14394: LD_ADDR_VAR 0 7
14398: PUSH
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_VAR 0 5
14408: PUSH
14409: LD_INT 1
14411: MINUS
14412: PPUSH
14413: LD_VAR 0 6
14417: PPUSH
14418: CALL_OW 1
14422: ST_TO_ADDR
// end ;
14423: GO 14340
14425: POP
14426: POP
// result := s_arr [ 1 ] ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: LD_VAR 0 7
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: ST_TO_ADDR
// end ; end ;
14441: LD_VAR 0 4
14445: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14446: LD_INT 0
14448: PPUSH
14449: PPUSH
// if not list then
14450: LD_VAR 0 1
14454: NOT
14455: IFFALSE 14459
// exit ;
14457: GO 14550
// i := list [ pos1 ] ;
14459: LD_ADDR_VAR 0 5
14463: PUSH
14464: LD_VAR 0 1
14468: PUSH
14469: LD_VAR 0 2
14473: ARRAY
14474: ST_TO_ADDR
// if not i then
14475: LD_VAR 0 5
14479: NOT
14480: IFFALSE 14484
// exit ;
14482: GO 14550
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14484: LD_ADDR_VAR 0 1
14488: PUSH
14489: LD_VAR 0 1
14493: PPUSH
14494: LD_VAR 0 2
14498: PPUSH
14499: LD_VAR 0 1
14503: PUSH
14504: LD_VAR 0 3
14508: ARRAY
14509: PPUSH
14510: CALL_OW 1
14514: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14515: LD_ADDR_VAR 0 1
14519: PUSH
14520: LD_VAR 0 1
14524: PPUSH
14525: LD_VAR 0 3
14529: PPUSH
14530: LD_VAR 0 5
14534: PPUSH
14535: CALL_OW 1
14539: ST_TO_ADDR
// result := list ;
14540: LD_ADDR_VAR 0 4
14544: PUSH
14545: LD_VAR 0 1
14549: ST_TO_ADDR
// end ;
14550: LD_VAR 0 4
14554: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14555: LD_INT 0
14557: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14558: LD_ADDR_VAR 0 5
14562: PUSH
14563: LD_VAR 0 1
14567: PPUSH
14568: CALL_OW 250
14572: PPUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 251
14582: PPUSH
14583: LD_VAR 0 2
14587: PPUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL 14976 0 5
14602: ST_TO_ADDR
// end ;
14603: LD_VAR 0 5
14607: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14608: LD_INT 0
14610: PPUSH
14611: PPUSH
14612: PPUSH
14613: PPUSH
// if not list or not unit then
14614: LD_VAR 0 2
14618: NOT
14619: PUSH
14620: LD_VAR 0 1
14624: NOT
14625: OR
14626: IFFALSE 14630
// exit ;
14628: GO 14971
// result := [ ] ;
14630: LD_ADDR_VAR 0 5
14634: PUSH
14635: EMPTY
14636: ST_TO_ADDR
// for i in list do
14637: LD_ADDR_VAR 0 6
14641: PUSH
14642: LD_VAR 0 2
14646: PUSH
14647: FOR_IN
14648: IFFALSE 14866
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14650: LD_ADDR_VAR 0 8
14654: PUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: LD_VAR 0 6
14664: PUSH
14665: LD_INT 1
14667: ARRAY
14668: PPUSH
14669: LD_VAR 0 6
14673: PUSH
14674: LD_INT 2
14676: ARRAY
14677: PPUSH
14678: CALL_OW 297
14682: ST_TO_ADDR
// if not Count ( result ) then
14683: LD_VAR 0 5
14687: PPUSH
14688: CALL 11260 0 1
14692: NOT
14693: IFFALSE 14726
// begin result := Join ( result , [ i , tmp ] ) ;
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: LD_VAR 0 5
14704: PPUSH
14705: LD_VAR 0 6
14709: PUSH
14710: LD_VAR 0 8
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL 46869 0 2
14723: ST_TO_ADDR
// continue ;
14724: GO 14647
// end ; if result [ result ] [ 2 ] <= tmp then
14726: LD_VAR 0 5
14730: PUSH
14731: LD_VAR 0 5
14735: ARRAY
14736: PUSH
14737: LD_INT 2
14739: ARRAY
14740: PUSH
14741: LD_VAR 0 8
14745: LESSEQUAL
14746: IFFALSE 14779
// result := Join ( result , [ i , tmp ] ) else
14748: LD_ADDR_VAR 0 5
14752: PUSH
14753: LD_VAR 0 5
14757: PPUSH
14758: LD_VAR 0 6
14762: PUSH
14763: LD_VAR 0 8
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PPUSH
14772: CALL 46869 0 2
14776: ST_TO_ADDR
14777: GO 14864
// begin for j := 1 to Count ( result ) do
14779: LD_ADDR_VAR 0 7
14783: PUSH
14784: DOUBLE
14785: LD_INT 1
14787: DEC
14788: ST_TO_ADDR
14789: LD_VAR 0 5
14793: PPUSH
14794: CALL 11260 0 1
14798: PUSH
14799: FOR_TO
14800: IFFALSE 14862
// begin if tmp < result [ j ] [ 2 ] then
14802: LD_VAR 0 8
14806: PUSH
14807: LD_VAR 0 5
14811: PUSH
14812: LD_VAR 0 7
14816: ARRAY
14817: PUSH
14818: LD_INT 2
14820: ARRAY
14821: LESS
14822: IFFALSE 14860
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14824: LD_ADDR_VAR 0 5
14828: PUSH
14829: LD_VAR 0 5
14833: PPUSH
14834: LD_VAR 0 7
14838: PPUSH
14839: LD_VAR 0 6
14843: PUSH
14844: LD_VAR 0 8
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 2
14857: ST_TO_ADDR
// break ;
14858: GO 14862
// end ; end ;
14860: GO 14799
14862: POP
14863: POP
// end ; end ;
14864: GO 14647
14866: POP
14867: POP
// if result and not asc then
14868: LD_VAR 0 5
14872: PUSH
14873: LD_VAR 0 3
14877: NOT
14878: AND
14879: IFFALSE 14896
// result := ReverseArray ( result ) ;
14881: LD_ADDR_VAR 0 5
14885: PUSH
14886: LD_VAR 0 5
14890: PPUSH
14891: CALL 42136 0 1
14895: ST_TO_ADDR
// tmp := [ ] ;
14896: LD_ADDR_VAR 0 8
14900: PUSH
14901: EMPTY
14902: ST_TO_ADDR
// if mode then
14903: LD_VAR 0 4
14907: IFFALSE 14971
// begin for i := 1 to result do
14909: LD_ADDR_VAR 0 6
14913: PUSH
14914: DOUBLE
14915: LD_INT 1
14917: DEC
14918: ST_TO_ADDR
14919: LD_VAR 0 5
14923: PUSH
14924: FOR_TO
14925: IFFALSE 14959
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14927: LD_ADDR_VAR 0 8
14931: PUSH
14932: LD_VAR 0 8
14936: PPUSH
14937: LD_VAR 0 5
14941: PUSH
14942: LD_VAR 0 6
14946: ARRAY
14947: PUSH
14948: LD_INT 1
14950: ARRAY
14951: PPUSH
14952: CALL 46869 0 2
14956: ST_TO_ADDR
14957: GO 14924
14959: POP
14960: POP
// result := tmp ;
14961: LD_ADDR_VAR 0 5
14965: PUSH
14966: LD_VAR 0 8
14970: ST_TO_ADDR
// end ; end ;
14971: LD_VAR 0 5
14975: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14976: LD_INT 0
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
// if not list then
14982: LD_VAR 0 3
14986: NOT
14987: IFFALSE 14991
// exit ;
14989: GO 15379
// result := [ ] ;
14991: LD_ADDR_VAR 0 6
14995: PUSH
14996: EMPTY
14997: ST_TO_ADDR
// for i in list do
14998: LD_ADDR_VAR 0 7
15002: PUSH
15003: LD_VAR 0 3
15007: PUSH
15008: FOR_IN
15009: IFFALSE 15211
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15011: LD_ADDR_VAR 0 9
15015: PUSH
15016: LD_VAR 0 7
15020: PPUSH
15021: LD_VAR 0 1
15025: PPUSH
15026: LD_VAR 0 2
15030: PPUSH
15031: CALL_OW 297
15035: ST_TO_ADDR
// if not result then
15036: LD_VAR 0 6
15040: NOT
15041: IFFALSE 15067
// result := [ [ i , tmp ] ] else
15043: LD_ADDR_VAR 0 6
15047: PUSH
15048: LD_VAR 0 7
15052: PUSH
15053: LD_VAR 0 9
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: EMPTY
15063: LIST
15064: ST_TO_ADDR
15065: GO 15209
// begin if result [ result ] [ 2 ] <= tmp then
15067: LD_VAR 0 6
15071: PUSH
15072: LD_VAR 0 6
15076: ARRAY
15077: PUSH
15078: LD_INT 2
15080: ARRAY
15081: PUSH
15082: LD_VAR 0 9
15086: LESSEQUAL
15087: IFFALSE 15129
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15089: LD_ADDR_VAR 0 6
15093: PUSH
15094: LD_VAR 0 6
15098: PPUSH
15099: LD_VAR 0 6
15103: PUSH
15104: LD_INT 1
15106: PLUS
15107: PPUSH
15108: LD_VAR 0 7
15112: PUSH
15113: LD_VAR 0 9
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 2
15126: ST_TO_ADDR
15127: GO 15209
// for j := 1 to result do
15129: LD_ADDR_VAR 0 8
15133: PUSH
15134: DOUBLE
15135: LD_INT 1
15137: DEC
15138: ST_TO_ADDR
15139: LD_VAR 0 6
15143: PUSH
15144: FOR_TO
15145: IFFALSE 15207
// begin if tmp < result [ j ] [ 2 ] then
15147: LD_VAR 0 9
15151: PUSH
15152: LD_VAR 0 6
15156: PUSH
15157: LD_VAR 0 8
15161: ARRAY
15162: PUSH
15163: LD_INT 2
15165: ARRAY
15166: LESS
15167: IFFALSE 15205
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15169: LD_ADDR_VAR 0 6
15173: PUSH
15174: LD_VAR 0 6
15178: PPUSH
15179: LD_VAR 0 8
15183: PPUSH
15184: LD_VAR 0 7
15188: PUSH
15189: LD_VAR 0 9
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 2
15202: ST_TO_ADDR
// break ;
15203: GO 15207
// end ; end ;
15205: GO 15144
15207: POP
15208: POP
// end ; end ;
15209: GO 15008
15211: POP
15212: POP
// if result and not asc then
15213: LD_VAR 0 6
15217: PUSH
15218: LD_VAR 0 4
15222: NOT
15223: AND
15224: IFFALSE 15299
// begin tmp := result ;
15226: LD_ADDR_VAR 0 9
15230: PUSH
15231: LD_VAR 0 6
15235: ST_TO_ADDR
// for i = tmp downto 1 do
15236: LD_ADDR_VAR 0 7
15240: PUSH
15241: DOUBLE
15242: LD_VAR 0 9
15246: INC
15247: ST_TO_ADDR
15248: LD_INT 1
15250: PUSH
15251: FOR_DOWNTO
15252: IFFALSE 15297
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15254: LD_ADDR_VAR 0 6
15258: PUSH
15259: LD_VAR 0 6
15263: PPUSH
15264: LD_VAR 0 9
15268: PUSH
15269: LD_VAR 0 7
15273: MINUS
15274: PUSH
15275: LD_INT 1
15277: PLUS
15278: PPUSH
15279: LD_VAR 0 9
15283: PUSH
15284: LD_VAR 0 7
15288: ARRAY
15289: PPUSH
15290: CALL_OW 1
15294: ST_TO_ADDR
15295: GO 15251
15297: POP
15298: POP
// end ; tmp := [ ] ;
15299: LD_ADDR_VAR 0 9
15303: PUSH
15304: EMPTY
15305: ST_TO_ADDR
// if mode then
15306: LD_VAR 0 5
15310: IFFALSE 15379
// begin for i = 1 to result do
15312: LD_ADDR_VAR 0 7
15316: PUSH
15317: DOUBLE
15318: LD_INT 1
15320: DEC
15321: ST_TO_ADDR
15322: LD_VAR 0 6
15326: PUSH
15327: FOR_TO
15328: IFFALSE 15367
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15330: LD_ADDR_VAR 0 9
15334: PUSH
15335: LD_VAR 0 9
15339: PPUSH
15340: LD_VAR 0 7
15344: PPUSH
15345: LD_VAR 0 6
15349: PUSH
15350: LD_VAR 0 7
15354: ARRAY
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: CALL_OW 1
15364: ST_TO_ADDR
15365: GO 15327
15367: POP
15368: POP
// result := tmp ;
15369: LD_ADDR_VAR 0 6
15373: PUSH
15374: LD_VAR 0 9
15378: ST_TO_ADDR
// end ; end ;
15379: LD_VAR 0 6
15383: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15384: LD_INT 0
15386: PPUSH
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15392: LD_ADDR_VAR 0 5
15396: PUSH
15397: LD_INT 0
15399: PUSH
15400: LD_INT 0
15402: PUSH
15403: LD_INT 0
15405: PUSH
15406: EMPTY
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: ST_TO_ADDR
// if not x or not y then
15414: LD_VAR 0 2
15418: NOT
15419: PUSH
15420: LD_VAR 0 3
15424: NOT
15425: OR
15426: IFFALSE 15430
// exit ;
15428: GO 17080
// if not range then
15430: LD_VAR 0 4
15434: NOT
15435: IFFALSE 15445
// range := 10 ;
15437: LD_ADDR_VAR 0 4
15441: PUSH
15442: LD_INT 10
15444: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15445: LD_ADDR_VAR 0 8
15449: PUSH
15450: LD_INT 81
15452: PUSH
15453: LD_VAR 0 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 92
15464: PUSH
15465: LD_VAR 0 2
15469: PUSH
15470: LD_VAR 0 3
15474: PUSH
15475: LD_VAR 0 4
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 3
15488: PUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 3
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 69
15512: ST_TO_ADDR
// if not tmp then
15513: LD_VAR 0 8
15517: NOT
15518: IFFALSE 15522
// exit ;
15520: GO 17080
// for i in tmp do
15522: LD_ADDR_VAR 0 6
15526: PUSH
15527: LD_VAR 0 8
15531: PUSH
15532: FOR_IN
15533: IFFALSE 17055
// begin points := [ 0 , 0 , 0 ] ;
15535: LD_ADDR_VAR 0 9
15539: PUSH
15540: LD_INT 0
15542: PUSH
15543: LD_INT 0
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: ST_TO_ADDR
// bpoints := 1 ;
15554: LD_ADDR_VAR 0 10
15558: PUSH
15559: LD_INT 1
15561: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15562: LD_VAR 0 6
15566: PPUSH
15567: CALL_OW 247
15571: PUSH
15572: LD_INT 1
15574: DOUBLE
15575: EQUAL
15576: IFTRUE 15580
15578: GO 16158
15580: POP
// begin if GetClass ( i ) = 1 then
15581: LD_VAR 0 6
15585: PPUSH
15586: CALL_OW 257
15590: PUSH
15591: LD_INT 1
15593: EQUAL
15594: IFFALSE 15615
// points := [ 10 , 5 , 3 ] ;
15596: LD_ADDR_VAR 0 9
15600: PUSH
15601: LD_INT 10
15603: PUSH
15604: LD_INT 5
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15615: LD_VAR 0 6
15619: PPUSH
15620: CALL_OW 257
15624: PUSH
15625: LD_INT 2
15627: PUSH
15628: LD_INT 3
15630: PUSH
15631: LD_INT 4
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: IN
15639: IFFALSE 15660
// points := [ 3 , 2 , 1 ] ;
15641: LD_ADDR_VAR 0 9
15645: PUSH
15646: LD_INT 3
15648: PUSH
15649: LD_INT 2
15651: PUSH
15652: LD_INT 1
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: LIST
15659: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15660: LD_VAR 0 6
15664: PPUSH
15665: CALL_OW 257
15669: PUSH
15670: LD_INT 5
15672: EQUAL
15673: IFFALSE 15694
// points := [ 130 , 5 , 2 ] ;
15675: LD_ADDR_VAR 0 9
15679: PUSH
15680: LD_INT 130
15682: PUSH
15683: LD_INT 5
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15694: LD_VAR 0 6
15698: PPUSH
15699: CALL_OW 257
15703: PUSH
15704: LD_INT 8
15706: EQUAL
15707: IFFALSE 15728
// points := [ 35 , 35 , 30 ] ;
15709: LD_ADDR_VAR 0 9
15713: PUSH
15714: LD_INT 35
15716: PUSH
15717: LD_INT 35
15719: PUSH
15720: LD_INT 30
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15728: LD_VAR 0 6
15732: PPUSH
15733: CALL_OW 257
15737: PUSH
15738: LD_INT 9
15740: EQUAL
15741: IFFALSE 15762
// points := [ 20 , 55 , 40 ] ;
15743: LD_ADDR_VAR 0 9
15747: PUSH
15748: LD_INT 20
15750: PUSH
15751: LD_INT 55
15753: PUSH
15754: LD_INT 40
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15762: LD_VAR 0 6
15766: PPUSH
15767: CALL_OW 257
15771: PUSH
15772: LD_INT 12
15774: PUSH
15775: LD_INT 16
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: IN
15782: IFFALSE 15803
// points := [ 5 , 3 , 2 ] ;
15784: LD_ADDR_VAR 0 9
15788: PUSH
15789: LD_INT 5
15791: PUSH
15792: LD_INT 3
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15803: LD_VAR 0 6
15807: PPUSH
15808: CALL_OW 257
15812: PUSH
15813: LD_INT 17
15815: EQUAL
15816: IFFALSE 15837
// points := [ 100 , 50 , 75 ] ;
15818: LD_ADDR_VAR 0 9
15822: PUSH
15823: LD_INT 100
15825: PUSH
15826: LD_INT 50
15828: PUSH
15829: LD_INT 75
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15837: LD_VAR 0 6
15841: PPUSH
15842: CALL_OW 257
15846: PUSH
15847: LD_INT 15
15849: EQUAL
15850: IFFALSE 15871
// points := [ 10 , 5 , 3 ] ;
15852: LD_ADDR_VAR 0 9
15856: PUSH
15857: LD_INT 10
15859: PUSH
15860: LD_INT 5
15862: PUSH
15863: LD_INT 3
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15871: LD_VAR 0 6
15875: PPUSH
15876: CALL_OW 257
15880: PUSH
15881: LD_INT 14
15883: EQUAL
15884: IFFALSE 15905
// points := [ 10 , 0 , 0 ] ;
15886: LD_ADDR_VAR 0 9
15890: PUSH
15891: LD_INT 10
15893: PUSH
15894: LD_INT 0
15896: PUSH
15897: LD_INT 0
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15905: LD_VAR 0 6
15909: PPUSH
15910: CALL_OW 257
15914: PUSH
15915: LD_INT 11
15917: EQUAL
15918: IFFALSE 15939
// points := [ 30 , 10 , 5 ] ;
15920: LD_ADDR_VAR 0 9
15924: PUSH
15925: LD_INT 30
15927: PUSH
15928: LD_INT 10
15930: PUSH
15931: LD_INT 5
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15939: LD_VAR 0 1
15943: PPUSH
15944: LD_INT 5
15946: PPUSH
15947: CALL_OW 321
15951: PUSH
15952: LD_INT 2
15954: EQUAL
15955: IFFALSE 15972
// bpoints := bpoints * 1.8 ;
15957: LD_ADDR_VAR 0 10
15961: PUSH
15962: LD_VAR 0 10
15966: PUSH
15967: LD_REAL  1.80000000000000E+0000
15970: MUL
15971: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15972: LD_VAR 0 6
15976: PPUSH
15977: CALL_OW 257
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: LD_INT 2
15987: PUSH
15988: LD_INT 3
15990: PUSH
15991: LD_INT 4
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: IN
16000: PUSH
16001: LD_VAR 0 1
16005: PPUSH
16006: LD_INT 51
16008: PPUSH
16009: CALL_OW 321
16013: PUSH
16014: LD_INT 2
16016: EQUAL
16017: AND
16018: IFFALSE 16035
// bpoints := bpoints * 1.2 ;
16020: LD_ADDR_VAR 0 10
16024: PUSH
16025: LD_VAR 0 10
16029: PUSH
16030: LD_REAL  1.20000000000000E+0000
16033: MUL
16034: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16035: LD_VAR 0 6
16039: PPUSH
16040: CALL_OW 257
16044: PUSH
16045: LD_INT 5
16047: PUSH
16048: LD_INT 7
16050: PUSH
16051: LD_INT 9
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: IN
16059: PUSH
16060: LD_VAR 0 1
16064: PPUSH
16065: LD_INT 52
16067: PPUSH
16068: CALL_OW 321
16072: PUSH
16073: LD_INT 2
16075: EQUAL
16076: AND
16077: IFFALSE 16094
// bpoints := bpoints * 1.5 ;
16079: LD_ADDR_VAR 0 10
16083: PUSH
16084: LD_VAR 0 10
16088: PUSH
16089: LD_REAL  1.50000000000000E+0000
16092: MUL
16093: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16094: LD_VAR 0 1
16098: PPUSH
16099: LD_INT 66
16101: PPUSH
16102: CALL_OW 321
16106: PUSH
16107: LD_INT 2
16109: EQUAL
16110: IFFALSE 16127
// bpoints := bpoints * 1.1 ;
16112: LD_ADDR_VAR 0 10
16116: PUSH
16117: LD_VAR 0 10
16121: PUSH
16122: LD_REAL  1.10000000000000E+0000
16125: MUL
16126: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16127: LD_ADDR_VAR 0 10
16131: PUSH
16132: LD_VAR 0 10
16136: PUSH
16137: LD_VAR 0 6
16141: PPUSH
16142: LD_INT 1
16144: PPUSH
16145: CALL_OW 259
16149: PUSH
16150: LD_REAL  1.15000000000000E+0000
16153: MUL
16154: MUL
16155: ST_TO_ADDR
// end ; unit_vehicle :
16156: GO 16984
16158: LD_INT 2
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16972
16166: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16167: LD_VAR 0 6
16171: PPUSH
16172: CALL_OW 264
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: LD_INT 42
16182: PUSH
16183: LD_INT 24
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: IN
16191: IFFALSE 16212
// points := [ 25 , 5 , 3 ] ;
16193: LD_ADDR_VAR 0 9
16197: PUSH
16198: LD_INT 25
16200: PUSH
16201: LD_INT 5
16203: PUSH
16204: LD_INT 3
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16212: LD_VAR 0 6
16216: PPUSH
16217: CALL_OW 264
16221: PUSH
16222: LD_INT 4
16224: PUSH
16225: LD_INT 43
16227: PUSH
16228: LD_INT 25
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: IN
16236: IFFALSE 16257
// points := [ 40 , 15 , 5 ] ;
16238: LD_ADDR_VAR 0 9
16242: PUSH
16243: LD_INT 40
16245: PUSH
16246: LD_INT 15
16248: PUSH
16249: LD_INT 5
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16257: LD_VAR 0 6
16261: PPUSH
16262: CALL_OW 264
16266: PUSH
16267: LD_INT 3
16269: PUSH
16270: LD_INT 23
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: IN
16277: IFFALSE 16298
// points := [ 7 , 25 , 8 ] ;
16279: LD_ADDR_VAR 0 9
16283: PUSH
16284: LD_INT 7
16286: PUSH
16287: LD_INT 25
16289: PUSH
16290: LD_INT 8
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16298: LD_VAR 0 6
16302: PPUSH
16303: CALL_OW 264
16307: PUSH
16308: LD_INT 5
16310: PUSH
16311: LD_INT 27
16313: PUSH
16314: LD_INT 44
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: IN
16322: IFFALSE 16343
// points := [ 14 , 50 , 16 ] ;
16324: LD_ADDR_VAR 0 9
16328: PUSH
16329: LD_INT 14
16331: PUSH
16332: LD_INT 50
16334: PUSH
16335: LD_INT 16
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16343: LD_VAR 0 6
16347: PPUSH
16348: CALL_OW 264
16352: PUSH
16353: LD_INT 6
16355: PUSH
16356: LD_INT 46
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: IN
16363: IFFALSE 16384
// points := [ 32 , 120 , 70 ] ;
16365: LD_ADDR_VAR 0 9
16369: PUSH
16370: LD_INT 32
16372: PUSH
16373: LD_INT 120
16375: PUSH
16376: LD_INT 70
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16384: LD_VAR 0 6
16388: PPUSH
16389: CALL_OW 264
16393: PUSH
16394: LD_INT 7
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: LD_INT 45
16402: PUSH
16403: LD_INT 92
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: IN
16412: IFFALSE 16433
// points := [ 35 , 20 , 45 ] ;
16414: LD_ADDR_VAR 0 9
16418: PUSH
16419: LD_INT 35
16421: PUSH
16422: LD_INT 20
16424: PUSH
16425: LD_INT 45
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16433: LD_VAR 0 6
16437: PPUSH
16438: CALL_OW 264
16442: PUSH
16443: LD_INT 47
16445: PUSH
16446: EMPTY
16447: LIST
16448: IN
16449: IFFALSE 16470
// points := [ 67 , 45 , 75 ] ;
16451: LD_ADDR_VAR 0 9
16455: PUSH
16456: LD_INT 67
16458: PUSH
16459: LD_INT 45
16461: PUSH
16462: LD_INT 75
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16470: LD_VAR 0 6
16474: PPUSH
16475: CALL_OW 264
16479: PUSH
16480: LD_INT 26
16482: PUSH
16483: EMPTY
16484: LIST
16485: IN
16486: IFFALSE 16507
// points := [ 120 , 30 , 80 ] ;
16488: LD_ADDR_VAR 0 9
16492: PUSH
16493: LD_INT 120
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: LD_INT 80
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16507: LD_VAR 0 6
16511: PPUSH
16512: CALL_OW 264
16516: PUSH
16517: LD_INT 22
16519: PUSH
16520: EMPTY
16521: LIST
16522: IN
16523: IFFALSE 16544
// points := [ 40 , 1 , 1 ] ;
16525: LD_ADDR_VAR 0 9
16529: PUSH
16530: LD_INT 40
16532: PUSH
16533: LD_INT 1
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16544: LD_VAR 0 6
16548: PPUSH
16549: CALL_OW 264
16553: PUSH
16554: LD_INT 29
16556: PUSH
16557: EMPTY
16558: LIST
16559: IN
16560: IFFALSE 16581
// points := [ 70 , 200 , 400 ] ;
16562: LD_ADDR_VAR 0 9
16566: PUSH
16567: LD_INT 70
16569: PUSH
16570: LD_INT 200
16572: PUSH
16573: LD_INT 400
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16581: LD_VAR 0 6
16585: PPUSH
16586: CALL_OW 264
16590: PUSH
16591: LD_INT 14
16593: PUSH
16594: LD_INT 53
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: IN
16601: IFFALSE 16622
// points := [ 40 , 10 , 20 ] ;
16603: LD_ADDR_VAR 0 9
16607: PUSH
16608: LD_INT 40
16610: PUSH
16611: LD_INT 10
16613: PUSH
16614: LD_INT 20
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16622: LD_VAR 0 6
16626: PPUSH
16627: CALL_OW 264
16631: PUSH
16632: LD_INT 9
16634: PUSH
16635: EMPTY
16636: LIST
16637: IN
16638: IFFALSE 16659
// points := [ 5 , 70 , 20 ] ;
16640: LD_ADDR_VAR 0 9
16644: PUSH
16645: LD_INT 5
16647: PUSH
16648: LD_INT 70
16650: PUSH
16651: LD_INT 20
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16659: LD_VAR 0 6
16663: PPUSH
16664: CALL_OW 264
16668: PUSH
16669: LD_INT 10
16671: PUSH
16672: EMPTY
16673: LIST
16674: IN
16675: IFFALSE 16696
// points := [ 35 , 110 , 70 ] ;
16677: LD_ADDR_VAR 0 9
16681: PUSH
16682: LD_INT 35
16684: PUSH
16685: LD_INT 110
16687: PUSH
16688: LD_INT 70
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16696: LD_VAR 0 6
16700: PPUSH
16701: CALL_OW 265
16705: PUSH
16706: LD_INT 25
16708: EQUAL
16709: IFFALSE 16730
// points := [ 80 , 65 , 100 ] ;
16711: LD_ADDR_VAR 0 9
16715: PUSH
16716: LD_INT 80
16718: PUSH
16719: LD_INT 65
16721: PUSH
16722: LD_INT 100
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: LIST
16729: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16730: LD_VAR 0 6
16734: PPUSH
16735: CALL_OW 263
16739: PUSH
16740: LD_INT 1
16742: EQUAL
16743: IFFALSE 16778
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16745: LD_ADDR_VAR 0 10
16749: PUSH
16750: LD_VAR 0 10
16754: PUSH
16755: LD_VAR 0 6
16759: PPUSH
16760: CALL_OW 311
16764: PPUSH
16765: LD_INT 3
16767: PPUSH
16768: CALL_OW 259
16772: PUSH
16773: LD_INT 4
16775: MUL
16776: MUL
16777: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16778: LD_VAR 0 6
16782: PPUSH
16783: CALL_OW 263
16787: PUSH
16788: LD_INT 2
16790: EQUAL
16791: IFFALSE 16842
// begin j := IsControledBy ( i ) ;
16793: LD_ADDR_VAR 0 7
16797: PUSH
16798: LD_VAR 0 6
16802: PPUSH
16803: CALL_OW 312
16807: ST_TO_ADDR
// if j then
16808: LD_VAR 0 7
16812: IFFALSE 16842
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16814: LD_ADDR_VAR 0 10
16818: PUSH
16819: LD_VAR 0 10
16823: PUSH
16824: LD_VAR 0 7
16828: PPUSH
16829: LD_INT 3
16831: PPUSH
16832: CALL_OW 259
16836: PUSH
16837: LD_INT 3
16839: MUL
16840: MUL
16841: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16842: LD_VAR 0 6
16846: PPUSH
16847: CALL_OW 264
16851: PUSH
16852: LD_INT 5
16854: PUSH
16855: LD_INT 6
16857: PUSH
16858: LD_INT 46
16860: PUSH
16861: LD_INT 44
16863: PUSH
16864: LD_INT 47
16866: PUSH
16867: LD_INT 45
16869: PUSH
16870: LD_INT 28
16872: PUSH
16873: LD_INT 7
16875: PUSH
16876: LD_INT 27
16878: PUSH
16879: LD_INT 29
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: IN
16894: PUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_INT 52
16902: PPUSH
16903: CALL_OW 321
16907: PUSH
16908: LD_INT 2
16910: EQUAL
16911: AND
16912: IFFALSE 16929
// bpoints := bpoints * 1.2 ;
16914: LD_ADDR_VAR 0 10
16918: PUSH
16919: LD_VAR 0 10
16923: PUSH
16924: LD_REAL  1.20000000000000E+0000
16927: MUL
16928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16929: LD_VAR 0 6
16933: PPUSH
16934: CALL_OW 264
16938: PUSH
16939: LD_INT 6
16941: PUSH
16942: LD_INT 46
16944: PUSH
16945: LD_INT 47
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: LIST
16952: IN
16953: IFFALSE 16970
// bpoints := bpoints * 1.2 ;
16955: LD_ADDR_VAR 0 10
16959: PUSH
16960: LD_VAR 0 10
16964: PUSH
16965: LD_REAL  1.20000000000000E+0000
16968: MUL
16969: ST_TO_ADDR
// end ; unit_building :
16970: GO 16984
16972: LD_INT 3
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 16983
16980: POP
// ; end ;
16981: GO 16984
16983: POP
// for j = 1 to 3 do
16984: LD_ADDR_VAR 0 7
16988: PUSH
16989: DOUBLE
16990: LD_INT 1
16992: DEC
16993: ST_TO_ADDR
16994: LD_INT 3
16996: PUSH
16997: FOR_TO
16998: IFFALSE 17051
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17000: LD_ADDR_VAR 0 5
17004: PUSH
17005: LD_VAR 0 5
17009: PPUSH
17010: LD_VAR 0 7
17014: PPUSH
17015: LD_VAR 0 5
17019: PUSH
17020: LD_VAR 0 7
17024: ARRAY
17025: PUSH
17026: LD_VAR 0 9
17030: PUSH
17031: LD_VAR 0 7
17035: ARRAY
17036: PUSH
17037: LD_VAR 0 10
17041: MUL
17042: PLUS
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
17049: GO 16997
17051: POP
17052: POP
// end ;
17053: GO 15532
17055: POP
17056: POP
// result := Replace ( result , 4 , tmp ) ;
17057: LD_ADDR_VAR 0 5
17061: PUSH
17062: LD_VAR 0 5
17066: PPUSH
17067: LD_INT 4
17069: PPUSH
17070: LD_VAR 0 8
17074: PPUSH
17075: CALL_OW 1
17079: ST_TO_ADDR
// end ;
17080: LD_VAR 0 5
17084: RET
// export function DangerAtRange ( unit , range ) ; begin
17085: LD_INT 0
17087: PPUSH
// if not unit then
17088: LD_VAR 0 1
17092: NOT
17093: IFFALSE 17097
// exit ;
17095: GO 17142
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17097: LD_ADDR_VAR 0 3
17101: PUSH
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 255
17111: PPUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 250
17121: PPUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 251
17131: PPUSH
17132: LD_VAR 0 2
17136: PPUSH
17137: CALL 15384 0 4
17141: ST_TO_ADDR
// end ;
17142: LD_VAR 0 3
17146: RET
// export function DangerInArea ( side , area ) ; begin
17147: LD_INT 0
17149: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17150: LD_ADDR_VAR 0 3
17154: PUSH
17155: LD_VAR 0 2
17159: PPUSH
17160: LD_INT 81
17162: PUSH
17163: LD_VAR 0 1
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 70
17176: ST_TO_ADDR
// end ;
17177: LD_VAR 0 3
17181: RET
// export function IsExtension ( b ) ; begin
17182: LD_INT 0
17184: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17185: LD_ADDR_VAR 0 2
17189: PUSH
17190: LD_VAR 0 1
17194: PUSH
17195: LD_INT 23
17197: PUSH
17198: LD_INT 20
17200: PUSH
17201: LD_INT 22
17203: PUSH
17204: LD_INT 17
17206: PUSH
17207: LD_INT 24
17209: PUSH
17210: LD_INT 21
17212: PUSH
17213: LD_INT 19
17215: PUSH
17216: LD_INT 16
17218: PUSH
17219: LD_INT 25
17221: PUSH
17222: LD_INT 18
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: IN
17237: ST_TO_ADDR
// end ;
17238: LD_VAR 0 2
17242: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17243: LD_INT 0
17245: PPUSH
17246: PPUSH
17247: PPUSH
// result := [ ] ;
17248: LD_ADDR_VAR 0 4
17252: PUSH
17253: EMPTY
17254: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17255: LD_ADDR_VAR 0 5
17259: PUSH
17260: LD_VAR 0 2
17264: PPUSH
17265: LD_INT 21
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 70
17279: ST_TO_ADDR
// if not tmp then
17280: LD_VAR 0 5
17284: NOT
17285: IFFALSE 17289
// exit ;
17287: GO 17353
// if checkLink then
17289: LD_VAR 0 3
17293: IFFALSE 17343
// begin for i in tmp do
17295: LD_ADDR_VAR 0 6
17299: PUSH
17300: LD_VAR 0 5
17304: PUSH
17305: FOR_IN
17306: IFFALSE 17341
// if GetBase ( i ) <> base then
17308: LD_VAR 0 6
17312: PPUSH
17313: CALL_OW 274
17317: PUSH
17318: LD_VAR 0 1
17322: NONEQUAL
17323: IFFALSE 17339
// ComLinkToBase ( base , i ) ;
17325: LD_VAR 0 1
17329: PPUSH
17330: LD_VAR 0 6
17334: PPUSH
17335: CALL_OW 169
17339: GO 17305
17341: POP
17342: POP
// end ; result := tmp ;
17343: LD_ADDR_VAR 0 4
17347: PUSH
17348: LD_VAR 0 5
17352: ST_TO_ADDR
// end ;
17353: LD_VAR 0 4
17357: RET
// export function ComComplete ( units , b ) ; var i ; begin
17358: LD_INT 0
17360: PPUSH
17361: PPUSH
// if not units then
17362: LD_VAR 0 1
17366: NOT
17367: IFFALSE 17371
// exit ;
17369: GO 17461
// for i in units do
17371: LD_ADDR_VAR 0 4
17375: PUSH
17376: LD_VAR 0 1
17380: PUSH
17381: FOR_IN
17382: IFFALSE 17459
// if BuildingStatus ( b ) = bs_build then
17384: LD_VAR 0 2
17388: PPUSH
17389: CALL_OW 461
17393: PUSH
17394: LD_INT 1
17396: EQUAL
17397: IFFALSE 17457
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17399: LD_VAR 0 4
17403: PPUSH
17404: LD_STRING h
17406: PUSH
17407: LD_VAR 0 2
17411: PPUSH
17412: CALL_OW 250
17416: PUSH
17417: LD_VAR 0 2
17421: PPUSH
17422: CALL_OW 251
17426: PUSH
17427: LD_VAR 0 2
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: LD_INT 0
17437: PUSH
17438: LD_INT 0
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: PPUSH
17453: CALL_OW 446
17457: GO 17381
17459: POP
17460: POP
// end ;
17461: LD_VAR 0 3
17465: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17466: LD_INT 0
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
17472: PPUSH
17473: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17474: LD_VAR 0 1
17478: NOT
17479: PUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: CALL_OW 263
17489: PUSH
17490: LD_INT 2
17492: NONEQUAL
17493: OR
17494: IFFALSE 17498
// exit ;
17496: GO 17814
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17498: LD_ADDR_VAR 0 6
17502: PUSH
17503: LD_INT 22
17505: PUSH
17506: LD_VAR 0 1
17510: PPUSH
17511: CALL_OW 255
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 2
17522: PUSH
17523: LD_INT 30
17525: PUSH
17526: LD_INT 36
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 34
17535: PUSH
17536: LD_INT 31
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PPUSH
17552: CALL_OW 69
17556: ST_TO_ADDR
// if not tmp then
17557: LD_VAR 0 6
17561: NOT
17562: IFFALSE 17566
// exit ;
17564: GO 17814
// result := [ ] ;
17566: LD_ADDR_VAR 0 2
17570: PUSH
17571: EMPTY
17572: ST_TO_ADDR
// for i in tmp do
17573: LD_ADDR_VAR 0 3
17577: PUSH
17578: LD_VAR 0 6
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17655
// begin t := UnitsInside ( i ) ;
17586: LD_ADDR_VAR 0 4
17590: PUSH
17591: LD_VAR 0 3
17595: PPUSH
17596: CALL_OW 313
17600: ST_TO_ADDR
// if t then
17601: LD_VAR 0 4
17605: IFFALSE 17653
// for j in t do
17607: LD_ADDR_VAR 0 7
17611: PUSH
17612: LD_VAR 0 4
17616: PUSH
17617: FOR_IN
17618: IFFALSE 17651
// result := Replace ( result , result + 1 , j ) ;
17620: LD_ADDR_VAR 0 2
17624: PUSH
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_VAR 0 2
17634: PUSH
17635: LD_INT 1
17637: PLUS
17638: PPUSH
17639: LD_VAR 0 7
17643: PPUSH
17644: CALL_OW 1
17648: ST_TO_ADDR
17649: GO 17617
17651: POP
17652: POP
// end ;
17653: GO 17583
17655: POP
17656: POP
// if not result then
17657: LD_VAR 0 2
17661: NOT
17662: IFFALSE 17666
// exit ;
17664: GO 17814
// mech := result [ 1 ] ;
17666: LD_ADDR_VAR 0 5
17670: PUSH
17671: LD_VAR 0 2
17675: PUSH
17676: LD_INT 1
17678: ARRAY
17679: ST_TO_ADDR
// if result > 1 then
17680: LD_VAR 0 2
17684: PUSH
17685: LD_INT 1
17687: GREATER
17688: IFFALSE 17800
// begin for i = 2 to result do
17690: LD_ADDR_VAR 0 3
17694: PUSH
17695: DOUBLE
17696: LD_INT 2
17698: DEC
17699: ST_TO_ADDR
17700: LD_VAR 0 2
17704: PUSH
17705: FOR_TO
17706: IFFALSE 17798
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17708: LD_ADDR_VAR 0 4
17712: PUSH
17713: LD_VAR 0 2
17717: PUSH
17718: LD_VAR 0 3
17722: ARRAY
17723: PPUSH
17724: LD_INT 3
17726: PPUSH
17727: CALL_OW 259
17731: PUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_VAR 0 3
17741: ARRAY
17742: PPUSH
17743: CALL_OW 432
17747: MINUS
17748: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17749: LD_VAR 0 4
17753: PUSH
17754: LD_VAR 0 5
17758: PPUSH
17759: LD_INT 3
17761: PPUSH
17762: CALL_OW 259
17766: PUSH
17767: LD_VAR 0 5
17771: PPUSH
17772: CALL_OW 432
17776: MINUS
17777: GREATEREQUAL
17778: IFFALSE 17796
// mech := result [ i ] ;
17780: LD_ADDR_VAR 0 5
17784: PUSH
17785: LD_VAR 0 2
17789: PUSH
17790: LD_VAR 0 3
17794: ARRAY
17795: ST_TO_ADDR
// end ;
17796: GO 17705
17798: POP
17799: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17800: LD_VAR 0 1
17804: PPUSH
17805: LD_VAR 0 5
17809: PPUSH
17810: CALL_OW 135
// end ;
17814: LD_VAR 0 2
17818: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17819: LD_INT 0
17821: PPUSH
17822: PPUSH
17823: PPUSH
17824: PPUSH
17825: PPUSH
17826: PPUSH
17827: PPUSH
17828: PPUSH
17829: PPUSH
17830: PPUSH
17831: PPUSH
17832: PPUSH
17833: PPUSH
// result := [ ] ;
17834: LD_ADDR_VAR 0 7
17838: PUSH
17839: EMPTY
17840: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17841: LD_VAR 0 1
17845: PPUSH
17846: CALL_OW 266
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: IN
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 19500
// if name then
17866: LD_VAR 0 3
17870: IFFALSE 17886
// SetBName ( base_dep , name ) ;
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_VAR 0 3
17881: PPUSH
17882: CALL_OW 500
// base := GetBase ( base_dep ) ;
17886: LD_ADDR_VAR 0 15
17890: PUSH
17891: LD_VAR 0 1
17895: PPUSH
17896: CALL_OW 274
17900: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17901: LD_ADDR_VAR 0 16
17905: PUSH
17906: LD_VAR 0 1
17910: PPUSH
17911: CALL_OW 255
17915: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17916: LD_ADDR_VAR 0 17
17920: PUSH
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 248
17930: ST_TO_ADDR
// if sources then
17931: LD_VAR 0 5
17935: IFFALSE 17982
// for i = 1 to 3 do
17937: LD_ADDR_VAR 0 8
17941: PUSH
17942: DOUBLE
17943: LD_INT 1
17945: DEC
17946: ST_TO_ADDR
17947: LD_INT 3
17949: PUSH
17950: FOR_TO
17951: IFFALSE 17980
// AddResourceType ( base , i , sources [ i ] ) ;
17953: LD_VAR 0 15
17957: PPUSH
17958: LD_VAR 0 8
17962: PPUSH
17963: LD_VAR 0 5
17967: PUSH
17968: LD_VAR 0 8
17972: ARRAY
17973: PPUSH
17974: CALL_OW 276
17978: GO 17950
17980: POP
17981: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17982: LD_ADDR_VAR 0 18
17986: PUSH
17987: LD_VAR 0 15
17991: PPUSH
17992: LD_VAR 0 2
17996: PPUSH
17997: LD_INT 1
17999: PPUSH
18000: CALL 17243 0 3
18004: ST_TO_ADDR
// InitHc ;
18005: CALL_OW 19
// InitUc ;
18009: CALL_OW 18
// uc_side := side ;
18013: LD_ADDR_OWVAR 20
18017: PUSH
18018: LD_VAR 0 16
18022: ST_TO_ADDR
// uc_nation := nation ;
18023: LD_ADDR_OWVAR 21
18027: PUSH
18028: LD_VAR 0 17
18032: ST_TO_ADDR
// if buildings then
18033: LD_VAR 0 18
18037: IFFALSE 19359
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18039: LD_ADDR_VAR 0 19
18043: PUSH
18044: LD_VAR 0 18
18048: PPUSH
18049: LD_INT 2
18051: PUSH
18052: LD_INT 30
18054: PUSH
18055: LD_INT 29
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 30
18064: PUSH
18065: LD_INT 30
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: PPUSH
18077: CALL_OW 72
18081: ST_TO_ADDR
// if tmp then
18082: LD_VAR 0 19
18086: IFFALSE 18134
// for i in tmp do
18088: LD_ADDR_VAR 0 8
18092: PUSH
18093: LD_VAR 0 19
18097: PUSH
18098: FOR_IN
18099: IFFALSE 18132
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18101: LD_VAR 0 8
18105: PPUSH
18106: CALL_OW 250
18110: PPUSH
18111: LD_VAR 0 8
18115: PPUSH
18116: CALL_OW 251
18120: PPUSH
18121: LD_VAR 0 16
18125: PPUSH
18126: CALL_OW 441
18130: GO 18098
18132: POP
18133: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18134: LD_VAR 0 18
18138: PPUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 30
18144: PUSH
18145: LD_INT 32
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 30
18154: PUSH
18155: LD_INT 33
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: PPUSH
18167: CALL_OW 72
18171: IFFALSE 18259
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18173: LD_ADDR_VAR 0 8
18177: PUSH
18178: LD_VAR 0 18
18182: PPUSH
18183: LD_INT 2
18185: PUSH
18186: LD_INT 30
18188: PUSH
18189: LD_INT 32
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 30
18198: PUSH
18199: LD_INT 33
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 72
18215: PUSH
18216: FOR_IN
18217: IFFALSE 18257
// begin if not GetBWeapon ( i ) then
18219: LD_VAR 0 8
18223: PPUSH
18224: CALL_OW 269
18228: NOT
18229: IFFALSE 18255
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18231: LD_VAR 0 8
18235: PPUSH
18236: LD_VAR 0 8
18240: PPUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL 19505 0 2
18250: PPUSH
18251: CALL_OW 431
// end ;
18255: GO 18216
18257: POP
18258: POP
// end ; for i = 1 to personel do
18259: LD_ADDR_VAR 0 8
18263: PUSH
18264: DOUBLE
18265: LD_INT 1
18267: DEC
18268: ST_TO_ADDR
18269: LD_VAR 0 6
18273: PUSH
18274: FOR_TO
18275: IFFALSE 19339
// begin if i > 4 then
18277: LD_VAR 0 8
18281: PUSH
18282: LD_INT 4
18284: GREATER
18285: IFFALSE 18289
// break ;
18287: GO 19339
// case i of 1 :
18289: LD_VAR 0 8
18293: PUSH
18294: LD_INT 1
18296: DOUBLE
18297: EQUAL
18298: IFTRUE 18302
18300: GO 18382
18302: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18303: LD_ADDR_VAR 0 12
18307: PUSH
18308: LD_VAR 0 18
18312: PPUSH
18313: LD_INT 22
18315: PUSH
18316: LD_VAR 0 16
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 58
18327: PUSH
18328: EMPTY
18329: LIST
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: LD_INT 30
18336: PUSH
18337: LD_INT 32
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 30
18346: PUSH
18347: LD_INT 4
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: LD_INT 5
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: PPUSH
18375: CALL_OW 72
18379: ST_TO_ADDR
18380: GO 18604
18382: LD_INT 2
18384: DOUBLE
18385: EQUAL
18386: IFTRUE 18390
18388: GO 18452
18390: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18391: LD_ADDR_VAR 0 12
18395: PUSH
18396: LD_VAR 0 18
18400: PPUSH
18401: LD_INT 22
18403: PUSH
18404: LD_VAR 0 16
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 2
18415: PUSH
18416: LD_INT 30
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 30
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 72
18449: ST_TO_ADDR
18450: GO 18604
18452: LD_INT 3
18454: DOUBLE
18455: EQUAL
18456: IFTRUE 18460
18458: GO 18522
18460: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18461: LD_ADDR_VAR 0 12
18465: PUSH
18466: LD_VAR 0 18
18470: PPUSH
18471: LD_INT 22
18473: PUSH
18474: LD_VAR 0 16
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 30
18488: PUSH
18489: LD_INT 2
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 30
18498: PUSH
18499: LD_INT 3
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PPUSH
18515: CALL_OW 72
18519: ST_TO_ADDR
18520: GO 18604
18522: LD_INT 4
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18603
18530: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18531: LD_ADDR_VAR 0 12
18535: PUSH
18536: LD_VAR 0 18
18540: PPUSH
18541: LD_INT 22
18543: PUSH
18544: LD_VAR 0 16
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: LD_INT 30
18558: PUSH
18559: LD_INT 6
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 30
18568: PUSH
18569: LD_INT 7
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 30
18578: PUSH
18579: LD_INT 8
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PPUSH
18596: CALL_OW 72
18600: ST_TO_ADDR
18601: GO 18604
18603: POP
// if i = 1 then
18604: LD_VAR 0 8
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: IFFALSE 18723
// begin tmp := [ ] ;
18614: LD_ADDR_VAR 0 19
18618: PUSH
18619: EMPTY
18620: ST_TO_ADDR
// for j in f do
18621: LD_ADDR_VAR 0 9
18625: PUSH
18626: LD_VAR 0 12
18630: PUSH
18631: FOR_IN
18632: IFFALSE 18705
// if GetBType ( j ) = b_bunker then
18634: LD_VAR 0 9
18638: PPUSH
18639: CALL_OW 266
18643: PUSH
18644: LD_INT 32
18646: EQUAL
18647: IFFALSE 18674
// tmp := Insert ( tmp , 1 , j ) else
18649: LD_ADDR_VAR 0 19
18653: PUSH
18654: LD_VAR 0 19
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: LD_VAR 0 9
18666: PPUSH
18667: CALL_OW 2
18671: ST_TO_ADDR
18672: GO 18703
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18674: LD_ADDR_VAR 0 19
18678: PUSH
18679: LD_VAR 0 19
18683: PPUSH
18684: LD_VAR 0 19
18688: PUSH
18689: LD_INT 1
18691: PLUS
18692: PPUSH
18693: LD_VAR 0 9
18697: PPUSH
18698: CALL_OW 2
18702: ST_TO_ADDR
18703: GO 18631
18705: POP
18706: POP
// if tmp then
18707: LD_VAR 0 19
18711: IFFALSE 18723
// f := tmp ;
18713: LD_ADDR_VAR 0 12
18717: PUSH
18718: LD_VAR 0 19
18722: ST_TO_ADDR
// end ; x := personel [ i ] ;
18723: LD_ADDR_VAR 0 13
18727: PUSH
18728: LD_VAR 0 6
18732: PUSH
18733: LD_VAR 0 8
18737: ARRAY
18738: ST_TO_ADDR
// if x = - 1 then
18739: LD_VAR 0 13
18743: PUSH
18744: LD_INT 1
18746: NEG
18747: EQUAL
18748: IFFALSE 18957
// begin for j in f do
18750: LD_ADDR_VAR 0 9
18754: PUSH
18755: LD_VAR 0 12
18759: PUSH
18760: FOR_IN
18761: IFFALSE 18953
// repeat InitHc ;
18763: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18767: LD_VAR 0 9
18771: PPUSH
18772: CALL_OW 266
18776: PUSH
18777: LD_INT 5
18779: EQUAL
18780: IFFALSE 18850
// begin if UnitsInside ( j ) < 3 then
18782: LD_VAR 0 9
18786: PPUSH
18787: CALL_OW 313
18791: PUSH
18792: LD_INT 3
18794: LESS
18795: IFFALSE 18831
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18797: LD_INT 0
18799: PPUSH
18800: LD_INT 5
18802: PUSH
18803: LD_INT 8
18805: PUSH
18806: LD_INT 9
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: LD_VAR 0 17
18818: ARRAY
18819: PPUSH
18820: LD_VAR 0 4
18824: PPUSH
18825: CALL_OW 380
18829: GO 18848
// PrepareHuman ( false , i , skill ) ;
18831: LD_INT 0
18833: PPUSH
18834: LD_VAR 0 8
18838: PPUSH
18839: LD_VAR 0 4
18843: PPUSH
18844: CALL_OW 380
// end else
18848: GO 18867
// PrepareHuman ( false , i , skill ) ;
18850: LD_INT 0
18852: PPUSH
18853: LD_VAR 0 8
18857: PPUSH
18858: LD_VAR 0 4
18862: PPUSH
18863: CALL_OW 380
// un := CreateHuman ;
18867: LD_ADDR_VAR 0 14
18871: PUSH
18872: CALL_OW 44
18876: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18877: LD_ADDR_VAR 0 7
18881: PUSH
18882: LD_VAR 0 7
18886: PPUSH
18887: LD_INT 1
18889: PPUSH
18890: LD_VAR 0 14
18894: PPUSH
18895: CALL_OW 2
18899: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18900: LD_VAR 0 14
18904: PPUSH
18905: LD_VAR 0 9
18909: PPUSH
18910: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18914: LD_VAR 0 9
18918: PPUSH
18919: CALL_OW 313
18923: PUSH
18924: LD_INT 6
18926: EQUAL
18927: PUSH
18928: LD_VAR 0 9
18932: PPUSH
18933: CALL_OW 266
18937: PUSH
18938: LD_INT 32
18940: PUSH
18941: LD_INT 31
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: IN
18948: OR
18949: IFFALSE 18763
18951: GO 18760
18953: POP
18954: POP
// end else
18955: GO 19337
// for j = 1 to x do
18957: LD_ADDR_VAR 0 9
18961: PUSH
18962: DOUBLE
18963: LD_INT 1
18965: DEC
18966: ST_TO_ADDR
18967: LD_VAR 0 13
18971: PUSH
18972: FOR_TO
18973: IFFALSE 19335
// begin InitHc ;
18975: CALL_OW 19
// if not f then
18979: LD_VAR 0 12
18983: NOT
18984: IFFALSE 19073
// begin PrepareHuman ( false , i , skill ) ;
18986: LD_INT 0
18988: PPUSH
18989: LD_VAR 0 8
18993: PPUSH
18994: LD_VAR 0 4
18998: PPUSH
18999: CALL_OW 380
// un := CreateHuman ;
19003: LD_ADDR_VAR 0 14
19007: PUSH
19008: CALL_OW 44
19012: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19013: LD_ADDR_VAR 0 7
19017: PUSH
19018: LD_VAR 0 7
19022: PPUSH
19023: LD_INT 1
19025: PPUSH
19026: LD_VAR 0 14
19030: PPUSH
19031: CALL_OW 2
19035: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19036: LD_VAR 0 14
19040: PPUSH
19041: LD_VAR 0 1
19045: PPUSH
19046: CALL_OW 250
19050: PPUSH
19051: LD_VAR 0 1
19055: PPUSH
19056: CALL_OW 251
19060: PPUSH
19061: LD_INT 10
19063: PPUSH
19064: LD_INT 0
19066: PPUSH
19067: CALL_OW 50
// continue ;
19071: GO 18972
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19073: LD_VAR 0 12
19077: PUSH
19078: LD_INT 1
19080: ARRAY
19081: PPUSH
19082: CALL_OW 313
19086: PUSH
19087: LD_VAR 0 12
19091: PUSH
19092: LD_INT 1
19094: ARRAY
19095: PPUSH
19096: CALL_OW 266
19100: PUSH
19101: LD_INT 32
19103: PUSH
19104: LD_INT 31
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: IN
19111: AND
19112: PUSH
19113: LD_VAR 0 12
19117: PUSH
19118: LD_INT 1
19120: ARRAY
19121: PPUSH
19122: CALL_OW 313
19126: PUSH
19127: LD_INT 6
19129: EQUAL
19130: OR
19131: IFFALSE 19151
// f := Delete ( f , 1 ) ;
19133: LD_ADDR_VAR 0 12
19137: PUSH
19138: LD_VAR 0 12
19142: PPUSH
19143: LD_INT 1
19145: PPUSH
19146: CALL_OW 3
19150: ST_TO_ADDR
// if not f then
19151: LD_VAR 0 12
19155: NOT
19156: IFFALSE 19174
// begin x := x + 2 ;
19158: LD_ADDR_VAR 0 13
19162: PUSH
19163: LD_VAR 0 13
19167: PUSH
19168: LD_INT 2
19170: PLUS
19171: ST_TO_ADDR
// continue ;
19172: GO 18972
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19174: LD_VAR 0 12
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: PPUSH
19183: CALL_OW 266
19187: PUSH
19188: LD_INT 5
19190: EQUAL
19191: IFFALSE 19265
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19193: LD_VAR 0 12
19197: PUSH
19198: LD_INT 1
19200: ARRAY
19201: PPUSH
19202: CALL_OW 313
19206: PUSH
19207: LD_INT 3
19209: LESS
19210: IFFALSE 19246
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19212: LD_INT 0
19214: PPUSH
19215: LD_INT 5
19217: PUSH
19218: LD_INT 8
19220: PUSH
19221: LD_INT 9
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: PUSH
19229: LD_VAR 0 17
19233: ARRAY
19234: PPUSH
19235: LD_VAR 0 4
19239: PPUSH
19240: CALL_OW 380
19244: GO 19263
// PrepareHuman ( false , i , skill ) ;
19246: LD_INT 0
19248: PPUSH
19249: LD_VAR 0 8
19253: PPUSH
19254: LD_VAR 0 4
19258: PPUSH
19259: CALL_OW 380
// end else
19263: GO 19282
// PrepareHuman ( false , i , skill ) ;
19265: LD_INT 0
19267: PPUSH
19268: LD_VAR 0 8
19272: PPUSH
19273: LD_VAR 0 4
19277: PPUSH
19278: CALL_OW 380
// un := CreateHuman ;
19282: LD_ADDR_VAR 0 14
19286: PUSH
19287: CALL_OW 44
19291: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19292: LD_ADDR_VAR 0 7
19296: PUSH
19297: LD_VAR 0 7
19301: PPUSH
19302: LD_INT 1
19304: PPUSH
19305: LD_VAR 0 14
19309: PPUSH
19310: CALL_OW 2
19314: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19315: LD_VAR 0 14
19319: PPUSH
19320: LD_VAR 0 12
19324: PUSH
19325: LD_INT 1
19327: ARRAY
19328: PPUSH
19329: CALL_OW 52
// end ;
19333: GO 18972
19335: POP
19336: POP
// end ;
19337: GO 18274
19339: POP
19340: POP
// result := result ^ buildings ;
19341: LD_ADDR_VAR 0 7
19345: PUSH
19346: LD_VAR 0 7
19350: PUSH
19351: LD_VAR 0 18
19355: ADD
19356: ST_TO_ADDR
// end else
19357: GO 19500
// begin for i = 1 to personel do
19359: LD_ADDR_VAR 0 8
19363: PUSH
19364: DOUBLE
19365: LD_INT 1
19367: DEC
19368: ST_TO_ADDR
19369: LD_VAR 0 6
19373: PUSH
19374: FOR_TO
19375: IFFALSE 19498
// begin if i > 4 then
19377: LD_VAR 0 8
19381: PUSH
19382: LD_INT 4
19384: GREATER
19385: IFFALSE 19389
// break ;
19387: GO 19498
// x := personel [ i ] ;
19389: LD_ADDR_VAR 0 13
19393: PUSH
19394: LD_VAR 0 6
19398: PUSH
19399: LD_VAR 0 8
19403: ARRAY
19404: ST_TO_ADDR
// if x = - 1 then
19405: LD_VAR 0 13
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: EQUAL
19414: IFFALSE 19418
// continue ;
19416: GO 19374
// PrepareHuman ( false , i , skill ) ;
19418: LD_INT 0
19420: PPUSH
19421: LD_VAR 0 8
19425: PPUSH
19426: LD_VAR 0 4
19430: PPUSH
19431: CALL_OW 380
// un := CreateHuman ;
19435: LD_ADDR_VAR 0 14
19439: PUSH
19440: CALL_OW 44
19444: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19445: LD_VAR 0 14
19449: PPUSH
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 250
19459: PPUSH
19460: LD_VAR 0 1
19464: PPUSH
19465: CALL_OW 251
19469: PPUSH
19470: LD_INT 10
19472: PPUSH
19473: LD_INT 0
19475: PPUSH
19476: CALL_OW 50
// result := result ^ un ;
19480: LD_ADDR_VAR 0 7
19484: PUSH
19485: LD_VAR 0 7
19489: PUSH
19490: LD_VAR 0 14
19494: ADD
19495: ST_TO_ADDR
// end ;
19496: GO 19374
19498: POP
19499: POP
// end ; end ;
19500: LD_VAR 0 7
19504: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
19511: PPUSH
19512: PPUSH
19513: PPUSH
19514: PPUSH
19515: PPUSH
19516: PPUSH
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
19522: PPUSH
// result := false ;
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: LD_INT 0
19530: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19531: LD_VAR 0 1
19535: NOT
19536: PUSH
19537: LD_VAR 0 1
19541: PPUSH
19542: CALL_OW 266
19546: PUSH
19547: LD_INT 32
19549: PUSH
19550: LD_INT 33
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: IN
19557: NOT
19558: OR
19559: IFFALSE 19563
// exit ;
19561: GO 20672
// nat := GetNation ( tower ) ;
19563: LD_ADDR_VAR 0 12
19567: PUSH
19568: LD_VAR 0 1
19572: PPUSH
19573: CALL_OW 248
19577: ST_TO_ADDR
// side := GetSide ( tower ) ;
19578: LD_ADDR_VAR 0 16
19582: PUSH
19583: LD_VAR 0 1
19587: PPUSH
19588: CALL_OW 255
19592: ST_TO_ADDR
// x := GetX ( tower ) ;
19593: LD_ADDR_VAR 0 10
19597: PUSH
19598: LD_VAR 0 1
19602: PPUSH
19603: CALL_OW 250
19607: ST_TO_ADDR
// y := GetY ( tower ) ;
19608: LD_ADDR_VAR 0 11
19612: PUSH
19613: LD_VAR 0 1
19617: PPUSH
19618: CALL_OW 251
19622: ST_TO_ADDR
// if not x or not y then
19623: LD_VAR 0 10
19627: NOT
19628: PUSH
19629: LD_VAR 0 11
19633: NOT
19634: OR
19635: IFFALSE 19639
// exit ;
19637: GO 20672
// weapon := 0 ;
19639: LD_ADDR_VAR 0 18
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// fac_list := [ ] ;
19647: LD_ADDR_VAR 0 17
19651: PUSH
19652: EMPTY
19653: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19654: LD_ADDR_VAR 0 6
19658: PUSH
19659: LD_VAR 0 1
19663: PPUSH
19664: CALL_OW 274
19668: PPUSH
19669: LD_VAR 0 2
19673: PPUSH
19674: LD_INT 0
19676: PPUSH
19677: CALL 17243 0 3
19681: PPUSH
19682: LD_INT 30
19684: PUSH
19685: LD_INT 3
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PPUSH
19692: CALL_OW 72
19696: ST_TO_ADDR
// if not factories then
19697: LD_VAR 0 6
19701: NOT
19702: IFFALSE 19706
// exit ;
19704: GO 20672
// for i in factories do
19706: LD_ADDR_VAR 0 8
19710: PUSH
19711: LD_VAR 0 6
19715: PUSH
19716: FOR_IN
19717: IFFALSE 19742
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19719: LD_ADDR_VAR 0 17
19723: PUSH
19724: LD_VAR 0 17
19728: PUSH
19729: LD_VAR 0 8
19733: PPUSH
19734: CALL_OW 478
19738: UNION
19739: ST_TO_ADDR
19740: GO 19716
19742: POP
19743: POP
// if not fac_list then
19744: LD_VAR 0 17
19748: NOT
19749: IFFALSE 19753
// exit ;
19751: GO 20672
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19753: LD_ADDR_VAR 0 5
19757: PUSH
19758: LD_INT 4
19760: PUSH
19761: LD_INT 5
19763: PUSH
19764: LD_INT 9
19766: PUSH
19767: LD_INT 10
19769: PUSH
19770: LD_INT 6
19772: PUSH
19773: LD_INT 7
19775: PUSH
19776: LD_INT 11
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 27
19790: PUSH
19791: LD_INT 28
19793: PUSH
19794: LD_INT 26
19796: PUSH
19797: LD_INT 30
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 43
19808: PUSH
19809: LD_INT 44
19811: PUSH
19812: LD_INT 46
19814: PUSH
19815: LD_INT 45
19817: PUSH
19818: LD_INT 47
19820: PUSH
19821: LD_INT 49
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: LIST
19836: PUSH
19837: LD_VAR 0 12
19841: ARRAY
19842: ST_TO_ADDR
// list := list isect fac_list ;
19843: LD_ADDR_VAR 0 5
19847: PUSH
19848: LD_VAR 0 5
19852: PUSH
19853: LD_VAR 0 17
19857: ISECT
19858: ST_TO_ADDR
// if not list then
19859: LD_VAR 0 5
19863: NOT
19864: IFFALSE 19868
// exit ;
19866: GO 20672
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19868: LD_VAR 0 12
19872: PUSH
19873: LD_INT 3
19875: EQUAL
19876: PUSH
19877: LD_INT 49
19879: PUSH
19880: LD_VAR 0 5
19884: IN
19885: AND
19886: PUSH
19887: LD_INT 31
19889: PPUSH
19890: LD_VAR 0 16
19894: PPUSH
19895: CALL_OW 321
19899: PUSH
19900: LD_INT 2
19902: EQUAL
19903: AND
19904: IFFALSE 19964
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19906: LD_INT 22
19908: PUSH
19909: LD_VAR 0 16
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 35
19920: PUSH
19921: LD_INT 49
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 91
19930: PUSH
19931: LD_VAR 0 1
19935: PUSH
19936: LD_INT 10
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: PPUSH
19949: CALL_OW 69
19953: NOT
19954: IFFALSE 19964
// weapon := ru_time_lapser ;
19956: LD_ADDR_VAR 0 18
19960: PUSH
19961: LD_INT 49
19963: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19964: LD_VAR 0 12
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: IN
19979: PUSH
19980: LD_INT 11
19982: PUSH
19983: LD_VAR 0 5
19987: IN
19988: PUSH
19989: LD_INT 30
19991: PUSH
19992: LD_VAR 0 5
19996: IN
19997: OR
19998: AND
19999: PUSH
20000: LD_INT 6
20002: PPUSH
20003: LD_VAR 0 16
20007: PPUSH
20008: CALL_OW 321
20012: PUSH
20013: LD_INT 2
20015: EQUAL
20016: AND
20017: IFFALSE 20182
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20019: LD_INT 22
20021: PUSH
20022: LD_VAR 0 16
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 35
20036: PUSH
20037: LD_INT 11
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 35
20046: PUSH
20047: LD_INT 30
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 91
20061: PUSH
20062: LD_VAR 0 1
20066: PUSH
20067: LD_INT 18
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: LIST
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: PPUSH
20080: CALL_OW 69
20084: NOT
20085: PUSH
20086: LD_INT 22
20088: PUSH
20089: LD_VAR 0 16
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 30
20103: PUSH
20104: LD_INT 32
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 30
20113: PUSH
20114: LD_INT 33
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 91
20128: PUSH
20129: LD_VAR 0 1
20133: PUSH
20134: LD_INT 12
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: PPUSH
20150: CALL_OW 69
20154: PUSH
20155: LD_INT 2
20157: GREATER
20158: AND
20159: IFFALSE 20182
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20161: LD_ADDR_VAR 0 18
20165: PUSH
20166: LD_INT 11
20168: PUSH
20169: LD_INT 30
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_VAR 0 12
20180: ARRAY
20181: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20182: LD_VAR 0 18
20186: NOT
20187: PUSH
20188: LD_INT 40
20190: PPUSH
20191: LD_VAR 0 16
20195: PPUSH
20196: CALL_OW 321
20200: PUSH
20201: LD_INT 2
20203: EQUAL
20204: AND
20205: PUSH
20206: LD_INT 7
20208: PUSH
20209: LD_VAR 0 5
20213: IN
20214: PUSH
20215: LD_INT 28
20217: PUSH
20218: LD_VAR 0 5
20222: IN
20223: OR
20224: PUSH
20225: LD_INT 45
20227: PUSH
20228: LD_VAR 0 5
20232: IN
20233: OR
20234: AND
20235: IFFALSE 20489
// begin hex := GetHexInfo ( x , y ) ;
20237: LD_ADDR_VAR 0 4
20241: PUSH
20242: LD_VAR 0 10
20246: PPUSH
20247: LD_VAR 0 11
20251: PPUSH
20252: CALL_OW 546
20256: ST_TO_ADDR
// if hex [ 1 ] then
20257: LD_VAR 0 4
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: IFFALSE 20269
// exit ;
20267: GO 20672
// height := hex [ 2 ] ;
20269: LD_ADDR_VAR 0 15
20273: PUSH
20274: LD_VAR 0 4
20278: PUSH
20279: LD_INT 2
20281: ARRAY
20282: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20283: LD_ADDR_VAR 0 14
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: LD_INT 3
20296: PUSH
20297: LD_INT 5
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: ST_TO_ADDR
// for i in tmp do
20306: LD_ADDR_VAR 0 8
20310: PUSH
20311: LD_VAR 0 14
20315: PUSH
20316: FOR_IN
20317: IFFALSE 20487
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20319: LD_ADDR_VAR 0 9
20323: PUSH
20324: LD_VAR 0 10
20328: PPUSH
20329: LD_VAR 0 8
20333: PPUSH
20334: LD_INT 5
20336: PPUSH
20337: CALL_OW 272
20341: PUSH
20342: LD_VAR 0 11
20346: PPUSH
20347: LD_VAR 0 8
20351: PPUSH
20352: LD_INT 5
20354: PPUSH
20355: CALL_OW 273
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20364: LD_VAR 0 9
20368: PUSH
20369: LD_INT 1
20371: ARRAY
20372: PPUSH
20373: LD_VAR 0 9
20377: PUSH
20378: LD_INT 2
20380: ARRAY
20381: PPUSH
20382: CALL_OW 488
20386: IFFALSE 20485
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20388: LD_ADDR_VAR 0 4
20392: PUSH
20393: LD_VAR 0 9
20397: PUSH
20398: LD_INT 1
20400: ARRAY
20401: PPUSH
20402: LD_VAR 0 9
20406: PUSH
20407: LD_INT 2
20409: ARRAY
20410: PPUSH
20411: CALL_OW 546
20415: ST_TO_ADDR
// if hex [ 1 ] then
20416: LD_VAR 0 4
20420: PUSH
20421: LD_INT 1
20423: ARRAY
20424: IFFALSE 20428
// continue ;
20426: GO 20316
// h := hex [ 2 ] ;
20428: LD_ADDR_VAR 0 13
20432: PUSH
20433: LD_VAR 0 4
20437: PUSH
20438: LD_INT 2
20440: ARRAY
20441: ST_TO_ADDR
// if h + 7 < height then
20442: LD_VAR 0 13
20446: PUSH
20447: LD_INT 7
20449: PLUS
20450: PUSH
20451: LD_VAR 0 15
20455: LESS
20456: IFFALSE 20485
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20458: LD_ADDR_VAR 0 18
20462: PUSH
20463: LD_INT 7
20465: PUSH
20466: LD_INT 28
20468: PUSH
20469: LD_INT 45
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: PUSH
20477: LD_VAR 0 12
20481: ARRAY
20482: ST_TO_ADDR
// break ;
20483: GO 20487
// end ; end ; end ;
20485: GO 20316
20487: POP
20488: POP
// end ; if not weapon then
20489: LD_VAR 0 18
20493: NOT
20494: IFFALSE 20554
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20496: LD_ADDR_VAR 0 5
20500: PUSH
20501: LD_VAR 0 5
20505: PUSH
20506: LD_INT 11
20508: PUSH
20509: LD_INT 30
20511: PUSH
20512: LD_INT 49
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: DIFF
20520: ST_TO_ADDR
// if not list then
20521: LD_VAR 0 5
20525: NOT
20526: IFFALSE 20530
// exit ;
20528: GO 20672
// weapon := list [ rand ( 1 , list ) ] ;
20530: LD_ADDR_VAR 0 18
20534: PUSH
20535: LD_VAR 0 5
20539: PUSH
20540: LD_INT 1
20542: PPUSH
20543: LD_VAR 0 5
20547: PPUSH
20548: CALL_OW 12
20552: ARRAY
20553: ST_TO_ADDR
// end ; if weapon then
20554: LD_VAR 0 18
20558: IFFALSE 20672
// begin tmp := CostOfWeapon ( weapon ) ;
20560: LD_ADDR_VAR 0 14
20564: PUSH
20565: LD_VAR 0 18
20569: PPUSH
20570: CALL_OW 451
20574: ST_TO_ADDR
// j := GetBase ( tower ) ;
20575: LD_ADDR_VAR 0 9
20579: PUSH
20580: LD_VAR 0 1
20584: PPUSH
20585: CALL_OW 274
20589: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20590: LD_VAR 0 9
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 275
20602: PUSH
20603: LD_VAR 0 14
20607: PUSH
20608: LD_INT 1
20610: ARRAY
20611: GREATEREQUAL
20612: PUSH
20613: LD_VAR 0 9
20617: PPUSH
20618: LD_INT 2
20620: PPUSH
20621: CALL_OW 275
20625: PUSH
20626: LD_VAR 0 14
20630: PUSH
20631: LD_INT 2
20633: ARRAY
20634: GREATEREQUAL
20635: AND
20636: PUSH
20637: LD_VAR 0 9
20641: PPUSH
20642: LD_INT 3
20644: PPUSH
20645: CALL_OW 275
20649: PUSH
20650: LD_VAR 0 14
20654: PUSH
20655: LD_INT 3
20657: ARRAY
20658: GREATEREQUAL
20659: AND
20660: IFFALSE 20672
// result := weapon ;
20662: LD_ADDR_VAR 0 3
20666: PUSH
20667: LD_VAR 0 18
20671: ST_TO_ADDR
// end ; end ;
20672: LD_VAR 0 3
20676: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20677: LD_INT 0
20679: PPUSH
20680: PPUSH
// result := true ;
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: LD_INT 1
20688: ST_TO_ADDR
// if array1 = array2 then
20689: LD_VAR 0 1
20693: PUSH
20694: LD_VAR 0 2
20698: EQUAL
20699: IFFALSE 20759
// begin for i = 1 to array1 do
20701: LD_ADDR_VAR 0 4
20705: PUSH
20706: DOUBLE
20707: LD_INT 1
20709: DEC
20710: ST_TO_ADDR
20711: LD_VAR 0 1
20715: PUSH
20716: FOR_TO
20717: IFFALSE 20755
// if array1 [ i ] <> array2 [ i ] then
20719: LD_VAR 0 1
20723: PUSH
20724: LD_VAR 0 4
20728: ARRAY
20729: PUSH
20730: LD_VAR 0 2
20734: PUSH
20735: LD_VAR 0 4
20739: ARRAY
20740: NONEQUAL
20741: IFFALSE 20753
// begin result := false ;
20743: LD_ADDR_VAR 0 3
20747: PUSH
20748: LD_INT 0
20750: ST_TO_ADDR
// break ;
20751: GO 20755
// end ;
20753: GO 20716
20755: POP
20756: POP
// end else
20757: GO 20767
// result := false ;
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 0
20766: ST_TO_ADDR
// end ;
20767: LD_VAR 0 3
20771: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20772: LD_INT 0
20774: PPUSH
20775: PPUSH
// if not array1 or not array2 then
20776: LD_VAR 0 1
20780: NOT
20781: PUSH
20782: LD_VAR 0 2
20786: NOT
20787: OR
20788: IFFALSE 20792
// exit ;
20790: GO 20856
// result := true ;
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_INT 1
20799: ST_TO_ADDR
// for i = 1 to array1 do
20800: LD_ADDR_VAR 0 4
20804: PUSH
20805: DOUBLE
20806: LD_INT 1
20808: DEC
20809: ST_TO_ADDR
20810: LD_VAR 0 1
20814: PUSH
20815: FOR_TO
20816: IFFALSE 20854
// if array1 [ i ] <> array2 [ i ] then
20818: LD_VAR 0 1
20822: PUSH
20823: LD_VAR 0 4
20827: ARRAY
20828: PUSH
20829: LD_VAR 0 2
20833: PUSH
20834: LD_VAR 0 4
20838: ARRAY
20839: NONEQUAL
20840: IFFALSE 20852
// begin result := false ;
20842: LD_ADDR_VAR 0 3
20846: PUSH
20847: LD_INT 0
20849: ST_TO_ADDR
// break ;
20850: GO 20854
// end ;
20852: GO 20815
20854: POP
20855: POP
// end ;
20856: LD_VAR 0 3
20860: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20861: LD_INT 0
20863: PPUSH
20864: PPUSH
20865: PPUSH
// pom := GetBase ( fac ) ;
20866: LD_ADDR_VAR 0 5
20870: PUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 274
20880: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20881: LD_ADDR_VAR 0 4
20885: PUSH
20886: LD_VAR 0 2
20890: PUSH
20891: LD_INT 1
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 2
20899: PUSH
20900: LD_INT 2
20902: ARRAY
20903: PPUSH
20904: LD_VAR 0 2
20908: PUSH
20909: LD_INT 3
20911: ARRAY
20912: PPUSH
20913: LD_VAR 0 2
20917: PUSH
20918: LD_INT 4
20920: ARRAY
20921: PPUSH
20922: CALL_OW 449
20926: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: LD_VAR 0 5
20936: PPUSH
20937: LD_INT 1
20939: PPUSH
20940: CALL_OW 275
20944: PUSH
20945: LD_VAR 0 4
20949: PUSH
20950: LD_INT 1
20952: ARRAY
20953: GREATEREQUAL
20954: PUSH
20955: LD_VAR 0 5
20959: PPUSH
20960: LD_INT 2
20962: PPUSH
20963: CALL_OW 275
20967: PUSH
20968: LD_VAR 0 4
20972: PUSH
20973: LD_INT 2
20975: ARRAY
20976: GREATEREQUAL
20977: AND
20978: PUSH
20979: LD_VAR 0 5
20983: PPUSH
20984: LD_INT 3
20986: PPUSH
20987: CALL_OW 275
20991: PUSH
20992: LD_VAR 0 4
20996: PUSH
20997: LD_INT 3
20999: ARRAY
21000: GREATEREQUAL
21001: AND
21002: ST_TO_ADDR
// end ;
21003: LD_VAR 0 3
21007: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21008: LD_INT 0
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
// pom := GetBase ( building ) ;
21014: LD_ADDR_VAR 0 3
21018: PUSH
21019: LD_VAR 0 1
21023: PPUSH
21024: CALL_OW 274
21028: ST_TO_ADDR
// if not pom then
21029: LD_VAR 0 3
21033: NOT
21034: IFFALSE 21038
// exit ;
21036: GO 21208
// btype := GetBType ( building ) ;
21038: LD_ADDR_VAR 0 5
21042: PUSH
21043: LD_VAR 0 1
21047: PPUSH
21048: CALL_OW 266
21052: ST_TO_ADDR
// if btype = b_armoury then
21053: LD_VAR 0 5
21057: PUSH
21058: LD_INT 4
21060: EQUAL
21061: IFFALSE 21071
// btype := b_barracks ;
21063: LD_ADDR_VAR 0 5
21067: PUSH
21068: LD_INT 5
21070: ST_TO_ADDR
// if btype = b_depot then
21071: LD_VAR 0 5
21075: PUSH
21076: LD_INT 0
21078: EQUAL
21079: IFFALSE 21089
// btype := b_warehouse ;
21081: LD_ADDR_VAR 0 5
21085: PUSH
21086: LD_INT 1
21088: ST_TO_ADDR
// if btype = b_workshop then
21089: LD_VAR 0 5
21093: PUSH
21094: LD_INT 2
21096: EQUAL
21097: IFFALSE 21107
// btype := b_factory ;
21099: LD_ADDR_VAR 0 5
21103: PUSH
21104: LD_INT 3
21106: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21107: LD_ADDR_VAR 0 4
21111: PUSH
21112: LD_VAR 0 5
21116: PPUSH
21117: LD_VAR 0 1
21121: PPUSH
21122: CALL_OW 248
21126: PPUSH
21127: CALL_OW 450
21131: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21132: LD_ADDR_VAR 0 2
21136: PUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: LD_INT 1
21144: PPUSH
21145: CALL_OW 275
21149: PUSH
21150: LD_VAR 0 4
21154: PUSH
21155: LD_INT 1
21157: ARRAY
21158: GREATEREQUAL
21159: PUSH
21160: LD_VAR 0 3
21164: PPUSH
21165: LD_INT 2
21167: PPUSH
21168: CALL_OW 275
21172: PUSH
21173: LD_VAR 0 4
21177: PUSH
21178: LD_INT 2
21180: ARRAY
21181: GREATEREQUAL
21182: AND
21183: PUSH
21184: LD_VAR 0 3
21188: PPUSH
21189: LD_INT 3
21191: PPUSH
21192: CALL_OW 275
21196: PUSH
21197: LD_VAR 0 4
21201: PUSH
21202: LD_INT 3
21204: ARRAY
21205: GREATEREQUAL
21206: AND
21207: ST_TO_ADDR
// end ;
21208: LD_VAR 0 2
21212: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21213: LD_INT 0
21215: PPUSH
21216: PPUSH
21217: PPUSH
// pom := GetBase ( building ) ;
21218: LD_ADDR_VAR 0 4
21222: PUSH
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 274
21232: ST_TO_ADDR
// if not pom then
21233: LD_VAR 0 4
21237: NOT
21238: IFFALSE 21242
// exit ;
21240: GO 21343
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21242: LD_ADDR_VAR 0 5
21246: PUSH
21247: LD_VAR 0 2
21251: PPUSH
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 248
21261: PPUSH
21262: CALL_OW 450
21266: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21267: LD_ADDR_VAR 0 3
21271: PUSH
21272: LD_VAR 0 4
21276: PPUSH
21277: LD_INT 1
21279: PPUSH
21280: CALL_OW 275
21284: PUSH
21285: LD_VAR 0 5
21289: PUSH
21290: LD_INT 1
21292: ARRAY
21293: GREATEREQUAL
21294: PUSH
21295: LD_VAR 0 4
21299: PPUSH
21300: LD_INT 2
21302: PPUSH
21303: CALL_OW 275
21307: PUSH
21308: LD_VAR 0 5
21312: PUSH
21313: LD_INT 2
21315: ARRAY
21316: GREATEREQUAL
21317: AND
21318: PUSH
21319: LD_VAR 0 4
21323: PPUSH
21324: LD_INT 3
21326: PPUSH
21327: CALL_OW 275
21331: PUSH
21332: LD_VAR 0 5
21336: PUSH
21337: LD_INT 3
21339: ARRAY
21340: GREATEREQUAL
21341: AND
21342: ST_TO_ADDR
// end ;
21343: LD_VAR 0 3
21347: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21348: LD_INT 0
21350: PPUSH
21351: PPUSH
21352: PPUSH
21353: PPUSH
21354: PPUSH
21355: PPUSH
21356: PPUSH
21357: PPUSH
21358: PPUSH
21359: PPUSH
21360: PPUSH
// result := false ;
21361: LD_ADDR_VAR 0 8
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21369: LD_VAR 0 5
21373: NOT
21374: PUSH
21375: LD_VAR 0 1
21379: NOT
21380: OR
21381: PUSH
21382: LD_VAR 0 2
21386: NOT
21387: OR
21388: PUSH
21389: LD_VAR 0 3
21393: NOT
21394: OR
21395: IFFALSE 21399
// exit ;
21397: GO 22213
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21399: LD_ADDR_VAR 0 14
21403: PUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: LD_VAR 0 2
21413: PPUSH
21414: LD_VAR 0 3
21418: PPUSH
21419: LD_VAR 0 4
21423: PPUSH
21424: LD_VAR 0 5
21428: PUSH
21429: LD_INT 1
21431: ARRAY
21432: PPUSH
21433: CALL_OW 248
21437: PPUSH
21438: LD_INT 0
21440: PPUSH
21441: CALL 23466 0 6
21445: ST_TO_ADDR
// if not hexes then
21446: LD_VAR 0 14
21450: NOT
21451: IFFALSE 21455
// exit ;
21453: GO 22213
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21455: LD_ADDR_VAR 0 17
21459: PUSH
21460: LD_VAR 0 5
21464: PPUSH
21465: LD_INT 22
21467: PUSH
21468: LD_VAR 0 13
21472: PPUSH
21473: CALL_OW 255
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: LD_INT 30
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 30
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PPUSH
21514: CALL_OW 72
21518: ST_TO_ADDR
// for i = 1 to hexes do
21519: LD_ADDR_VAR 0 9
21523: PUSH
21524: DOUBLE
21525: LD_INT 1
21527: DEC
21528: ST_TO_ADDR
21529: LD_VAR 0 14
21533: PUSH
21534: FOR_TO
21535: IFFALSE 22211
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21537: LD_ADDR_VAR 0 13
21541: PUSH
21542: LD_VAR 0 14
21546: PUSH
21547: LD_VAR 0 9
21551: ARRAY
21552: PUSH
21553: LD_INT 1
21555: ARRAY
21556: PPUSH
21557: LD_VAR 0 14
21561: PUSH
21562: LD_VAR 0 9
21566: ARRAY
21567: PUSH
21568: LD_INT 2
21570: ARRAY
21571: PPUSH
21572: CALL_OW 428
21576: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21577: LD_VAR 0 14
21581: PUSH
21582: LD_VAR 0 9
21586: ARRAY
21587: PUSH
21588: LD_INT 1
21590: ARRAY
21591: PPUSH
21592: LD_VAR 0 14
21596: PUSH
21597: LD_VAR 0 9
21601: ARRAY
21602: PUSH
21603: LD_INT 2
21605: ARRAY
21606: PPUSH
21607: CALL_OW 351
21611: PUSH
21612: LD_VAR 0 14
21616: PUSH
21617: LD_VAR 0 9
21621: ARRAY
21622: PUSH
21623: LD_INT 1
21625: ARRAY
21626: PPUSH
21627: LD_VAR 0 14
21631: PUSH
21632: LD_VAR 0 9
21636: ARRAY
21637: PUSH
21638: LD_INT 2
21640: ARRAY
21641: PPUSH
21642: CALL_OW 488
21646: NOT
21647: OR
21648: PUSH
21649: LD_VAR 0 13
21653: PPUSH
21654: CALL_OW 247
21658: PUSH
21659: LD_INT 3
21661: EQUAL
21662: OR
21663: IFFALSE 21669
// exit ;
21665: POP
21666: POP
21667: GO 22213
// if not tmp then
21669: LD_VAR 0 13
21673: NOT
21674: IFFALSE 21678
// continue ;
21676: GO 21534
// result := true ;
21678: LD_ADDR_VAR 0 8
21682: PUSH
21683: LD_INT 1
21685: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21686: LD_VAR 0 6
21690: PUSH
21691: LD_VAR 0 13
21695: PPUSH
21696: CALL_OW 247
21700: PUSH
21701: LD_INT 2
21703: EQUAL
21704: AND
21705: PUSH
21706: LD_VAR 0 13
21710: PPUSH
21711: CALL_OW 263
21715: PUSH
21716: LD_INT 1
21718: EQUAL
21719: AND
21720: IFFALSE 21884
// begin if IsDrivenBy ( tmp ) then
21722: LD_VAR 0 13
21726: PPUSH
21727: CALL_OW 311
21731: IFFALSE 21735
// continue ;
21733: GO 21534
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21735: LD_VAR 0 6
21739: PPUSH
21740: LD_INT 3
21742: PUSH
21743: LD_INT 60
21745: PUSH
21746: EMPTY
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 3
21755: PUSH
21756: LD_INT 55
21758: PUSH
21759: EMPTY
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PPUSH
21770: CALL_OW 72
21774: IFFALSE 21882
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21776: LD_ADDR_VAR 0 18
21780: PUSH
21781: LD_VAR 0 6
21785: PPUSH
21786: LD_INT 3
21788: PUSH
21789: LD_INT 60
21791: PUSH
21792: EMPTY
21793: LIST
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 3
21801: PUSH
21802: LD_INT 55
21804: PUSH
21805: EMPTY
21806: LIST
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PPUSH
21816: CALL_OW 72
21820: PUSH
21821: LD_INT 1
21823: ARRAY
21824: ST_TO_ADDR
// if IsInUnit ( driver ) then
21825: LD_VAR 0 18
21829: PPUSH
21830: CALL_OW 310
21834: IFFALSE 21845
// ComExit ( driver ) ;
21836: LD_VAR 0 18
21840: PPUSH
21841: CALL 47267 0 1
// AddComEnterUnit ( driver , tmp ) ;
21845: LD_VAR 0 18
21849: PPUSH
21850: LD_VAR 0 13
21854: PPUSH
21855: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21859: LD_VAR 0 18
21863: PPUSH
21864: LD_VAR 0 7
21868: PPUSH
21869: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21873: LD_VAR 0 18
21877: PPUSH
21878: CALL_OW 181
// end ; continue ;
21882: GO 21534
// end ; if not cleaners or not tmp in cleaners then
21884: LD_VAR 0 6
21888: NOT
21889: PUSH
21890: LD_VAR 0 13
21894: PUSH
21895: LD_VAR 0 6
21899: IN
21900: NOT
21901: OR
21902: IFFALSE 22209
// begin if dep then
21904: LD_VAR 0 17
21908: IFFALSE 22044
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21910: LD_ADDR_VAR 0 16
21914: PUSH
21915: LD_VAR 0 17
21919: PUSH
21920: LD_INT 1
21922: ARRAY
21923: PPUSH
21924: CALL_OW 250
21928: PPUSH
21929: LD_VAR 0 17
21933: PUSH
21934: LD_INT 1
21936: ARRAY
21937: PPUSH
21938: CALL_OW 254
21942: PPUSH
21943: LD_INT 5
21945: PPUSH
21946: CALL_OW 272
21950: PUSH
21951: LD_VAR 0 17
21955: PUSH
21956: LD_INT 1
21958: ARRAY
21959: PPUSH
21960: CALL_OW 251
21964: PPUSH
21965: LD_VAR 0 17
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: CALL_OW 254
21978: PPUSH
21979: LD_INT 5
21981: PPUSH
21982: CALL_OW 273
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21991: LD_VAR 0 16
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: LD_VAR 0 16
22004: PUSH
22005: LD_INT 2
22007: ARRAY
22008: PPUSH
22009: CALL_OW 488
22013: IFFALSE 22044
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22015: LD_VAR 0 13
22019: PPUSH
22020: LD_VAR 0 16
22024: PUSH
22025: LD_INT 1
22027: ARRAY
22028: PPUSH
22029: LD_VAR 0 16
22033: PUSH
22034: LD_INT 2
22036: ARRAY
22037: PPUSH
22038: CALL_OW 111
// continue ;
22042: GO 21534
// end ; end ; r := GetDir ( tmp ) ;
22044: LD_ADDR_VAR 0 15
22048: PUSH
22049: LD_VAR 0 13
22053: PPUSH
22054: CALL_OW 254
22058: ST_TO_ADDR
// if r = 5 then
22059: LD_VAR 0 15
22063: PUSH
22064: LD_INT 5
22066: EQUAL
22067: IFFALSE 22077
// r := 0 ;
22069: LD_ADDR_VAR 0 15
22073: PUSH
22074: LD_INT 0
22076: ST_TO_ADDR
// for j = r to 5 do
22077: LD_ADDR_VAR 0 10
22081: PUSH
22082: DOUBLE
22083: LD_VAR 0 15
22087: DEC
22088: ST_TO_ADDR
22089: LD_INT 5
22091: PUSH
22092: FOR_TO
22093: IFFALSE 22207
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22095: LD_ADDR_VAR 0 11
22099: PUSH
22100: LD_VAR 0 13
22104: PPUSH
22105: CALL_OW 250
22109: PPUSH
22110: LD_VAR 0 10
22114: PPUSH
22115: LD_INT 2
22117: PPUSH
22118: CALL_OW 272
22122: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22123: LD_ADDR_VAR 0 12
22127: PUSH
22128: LD_VAR 0 13
22132: PPUSH
22133: CALL_OW 251
22137: PPUSH
22138: LD_VAR 0 10
22142: PPUSH
22143: LD_INT 2
22145: PPUSH
22146: CALL_OW 273
22150: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22151: LD_VAR 0 11
22155: PPUSH
22156: LD_VAR 0 12
22160: PPUSH
22161: CALL_OW 488
22165: PUSH
22166: LD_VAR 0 11
22170: PPUSH
22171: LD_VAR 0 12
22175: PPUSH
22176: CALL_OW 428
22180: NOT
22181: AND
22182: IFFALSE 22205
// begin ComMoveXY ( tmp , _x , _y ) ;
22184: LD_VAR 0 13
22188: PPUSH
22189: LD_VAR 0 11
22193: PPUSH
22194: LD_VAR 0 12
22198: PPUSH
22199: CALL_OW 111
// break ;
22203: GO 22207
// end ; end ;
22205: GO 22092
22207: POP
22208: POP
// end ; end ;
22209: GO 21534
22211: POP
22212: POP
// end ;
22213: LD_VAR 0 8
22217: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22218: LD_INT 0
22220: PPUSH
// result := true ;
22221: LD_ADDR_VAR 0 3
22225: PUSH
22226: LD_INT 1
22228: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22229: LD_VAR 0 2
22233: PUSH
22234: LD_INT 24
22236: DOUBLE
22237: EQUAL
22238: IFTRUE 22248
22240: LD_INT 33
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22273
22248: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22249: LD_ADDR_VAR 0 3
22253: PUSH
22254: LD_INT 32
22256: PPUSH
22257: LD_VAR 0 1
22261: PPUSH
22262: CALL_OW 321
22266: PUSH
22267: LD_INT 2
22269: EQUAL
22270: ST_TO_ADDR
22271: GO 22589
22273: LD_INT 20
22275: DOUBLE
22276: EQUAL
22277: IFTRUE 22281
22279: GO 22306
22281: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22282: LD_ADDR_VAR 0 3
22286: PUSH
22287: LD_INT 6
22289: PPUSH
22290: LD_VAR 0 1
22294: PPUSH
22295: CALL_OW 321
22299: PUSH
22300: LD_INT 2
22302: EQUAL
22303: ST_TO_ADDR
22304: GO 22589
22306: LD_INT 22
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22320
22312: LD_INT 36
22314: DOUBLE
22315: EQUAL
22316: IFTRUE 22320
22318: GO 22345
22320: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22321: LD_ADDR_VAR 0 3
22325: PUSH
22326: LD_INT 15
22328: PPUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 321
22338: PUSH
22339: LD_INT 2
22341: EQUAL
22342: ST_TO_ADDR
22343: GO 22589
22345: LD_INT 30
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22378
22353: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22354: LD_ADDR_VAR 0 3
22358: PUSH
22359: LD_INT 20
22361: PPUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: CALL_OW 321
22371: PUSH
22372: LD_INT 2
22374: EQUAL
22375: ST_TO_ADDR
22376: GO 22589
22378: LD_INT 28
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22392
22384: LD_INT 21
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22417
22392: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22393: LD_ADDR_VAR 0 3
22397: PUSH
22398: LD_INT 21
22400: PPUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 321
22410: PUSH
22411: LD_INT 2
22413: EQUAL
22414: ST_TO_ADDR
22415: GO 22589
22417: LD_INT 16
22419: DOUBLE
22420: EQUAL
22421: IFTRUE 22425
22423: GO 22450
22425: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22426: LD_ADDR_VAR 0 3
22430: PUSH
22431: LD_INT 84
22433: PPUSH
22434: LD_VAR 0 1
22438: PPUSH
22439: CALL_OW 321
22443: PUSH
22444: LD_INT 2
22446: EQUAL
22447: ST_TO_ADDR
22448: GO 22589
22450: LD_INT 19
22452: DOUBLE
22453: EQUAL
22454: IFTRUE 22464
22456: LD_INT 23
22458: DOUBLE
22459: EQUAL
22460: IFTRUE 22464
22462: GO 22489
22464: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22465: LD_ADDR_VAR 0 3
22469: PUSH
22470: LD_INT 83
22472: PPUSH
22473: LD_VAR 0 1
22477: PPUSH
22478: CALL_OW 321
22482: PUSH
22483: LD_INT 2
22485: EQUAL
22486: ST_TO_ADDR
22487: GO 22589
22489: LD_INT 17
22491: DOUBLE
22492: EQUAL
22493: IFTRUE 22497
22495: GO 22522
22497: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22498: LD_ADDR_VAR 0 3
22502: PUSH
22503: LD_INT 39
22505: PPUSH
22506: LD_VAR 0 1
22510: PPUSH
22511: CALL_OW 321
22515: PUSH
22516: LD_INT 2
22518: EQUAL
22519: ST_TO_ADDR
22520: GO 22589
22522: LD_INT 18
22524: DOUBLE
22525: EQUAL
22526: IFTRUE 22530
22528: GO 22555
22530: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22531: LD_ADDR_VAR 0 3
22535: PUSH
22536: LD_INT 40
22538: PPUSH
22539: LD_VAR 0 1
22543: PPUSH
22544: CALL_OW 321
22548: PUSH
22549: LD_INT 2
22551: EQUAL
22552: ST_TO_ADDR
22553: GO 22589
22555: LD_INT 27
22557: DOUBLE
22558: EQUAL
22559: IFTRUE 22563
22561: GO 22588
22563: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22564: LD_ADDR_VAR 0 3
22568: PUSH
22569: LD_INT 35
22571: PPUSH
22572: LD_VAR 0 1
22576: PPUSH
22577: CALL_OW 321
22581: PUSH
22582: LD_INT 2
22584: EQUAL
22585: ST_TO_ADDR
22586: GO 22589
22588: POP
// end ;
22589: LD_VAR 0 3
22593: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
22598: PPUSH
22599: PPUSH
22600: PPUSH
22601: PPUSH
22602: PPUSH
22603: PPUSH
22604: PPUSH
22605: PPUSH
22606: PPUSH
// result := false ;
22607: LD_ADDR_VAR 0 6
22611: PUSH
22612: LD_INT 0
22614: ST_TO_ADDR
// if btype = b_depot then
22615: LD_VAR 0 2
22619: PUSH
22620: LD_INT 0
22622: EQUAL
22623: IFFALSE 22635
// begin result := true ;
22625: LD_ADDR_VAR 0 6
22629: PUSH
22630: LD_INT 1
22632: ST_TO_ADDR
// exit ;
22633: GO 23461
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22635: LD_VAR 0 1
22639: NOT
22640: PUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL_OW 266
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: IN
22661: NOT
22662: OR
22663: PUSH
22664: LD_VAR 0 2
22668: NOT
22669: OR
22670: PUSH
22671: LD_VAR 0 5
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: LD_INT 1
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 3
22687: PUSH
22688: LD_INT 4
22690: PUSH
22691: LD_INT 5
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: IN
22702: NOT
22703: OR
22704: PUSH
22705: LD_VAR 0 3
22709: PPUSH
22710: LD_VAR 0 4
22714: PPUSH
22715: CALL_OW 488
22719: NOT
22720: OR
22721: IFFALSE 22725
// exit ;
22723: GO 23461
// side := GetSide ( depot ) ;
22725: LD_ADDR_VAR 0 9
22729: PUSH
22730: LD_VAR 0 1
22734: PPUSH
22735: CALL_OW 255
22739: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22740: LD_VAR 0 9
22744: PPUSH
22745: LD_VAR 0 2
22749: PPUSH
22750: CALL 22218 0 2
22754: NOT
22755: IFFALSE 22759
// exit ;
22757: GO 23461
// pom := GetBase ( depot ) ;
22759: LD_ADDR_VAR 0 10
22763: PUSH
22764: LD_VAR 0 1
22768: PPUSH
22769: CALL_OW 274
22773: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22774: LD_ADDR_VAR 0 11
22778: PUSH
22779: LD_VAR 0 2
22783: PPUSH
22784: LD_VAR 0 1
22788: PPUSH
22789: CALL_OW 248
22793: PPUSH
22794: CALL_OW 450
22798: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22799: LD_VAR 0 10
22803: PPUSH
22804: LD_INT 1
22806: PPUSH
22807: CALL_OW 275
22811: PUSH
22812: LD_VAR 0 11
22816: PUSH
22817: LD_INT 1
22819: ARRAY
22820: GREATEREQUAL
22821: PUSH
22822: LD_VAR 0 10
22826: PPUSH
22827: LD_INT 2
22829: PPUSH
22830: CALL_OW 275
22834: PUSH
22835: LD_VAR 0 11
22839: PUSH
22840: LD_INT 2
22842: ARRAY
22843: GREATEREQUAL
22844: AND
22845: PUSH
22846: LD_VAR 0 10
22850: PPUSH
22851: LD_INT 3
22853: PPUSH
22854: CALL_OW 275
22858: PUSH
22859: LD_VAR 0 11
22863: PUSH
22864: LD_INT 3
22866: ARRAY
22867: GREATEREQUAL
22868: AND
22869: NOT
22870: IFFALSE 22874
// exit ;
22872: GO 23461
// if GetBType ( depot ) = b_depot then
22874: LD_VAR 0 1
22878: PPUSH
22879: CALL_OW 266
22883: PUSH
22884: LD_INT 0
22886: EQUAL
22887: IFFALSE 22899
// dist := 28 else
22889: LD_ADDR_VAR 0 14
22893: PUSH
22894: LD_INT 28
22896: ST_TO_ADDR
22897: GO 22907
// dist := 36 ;
22899: LD_ADDR_VAR 0 14
22903: PUSH
22904: LD_INT 36
22906: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22907: LD_VAR 0 1
22911: PPUSH
22912: LD_VAR 0 3
22916: PPUSH
22917: LD_VAR 0 4
22921: PPUSH
22922: CALL_OW 297
22926: PUSH
22927: LD_VAR 0 14
22931: GREATER
22932: IFFALSE 22936
// exit ;
22934: GO 23461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22936: LD_ADDR_VAR 0 12
22940: PUSH
22941: LD_VAR 0 2
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: LD_VAR 0 4
22955: PPUSH
22956: LD_VAR 0 5
22960: PPUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 248
22970: PPUSH
22971: LD_INT 0
22973: PPUSH
22974: CALL 23466 0 6
22978: ST_TO_ADDR
// if not hexes then
22979: LD_VAR 0 12
22983: NOT
22984: IFFALSE 22988
// exit ;
22986: GO 23461
// hex := GetHexInfo ( x , y ) ;
22988: LD_ADDR_VAR 0 15
22992: PUSH
22993: LD_VAR 0 3
22997: PPUSH
22998: LD_VAR 0 4
23002: PPUSH
23003: CALL_OW 546
23007: ST_TO_ADDR
// if hex [ 1 ] then
23008: LD_VAR 0 15
23012: PUSH
23013: LD_INT 1
23015: ARRAY
23016: IFFALSE 23020
// exit ;
23018: GO 23461
// height := hex [ 2 ] ;
23020: LD_ADDR_VAR 0 13
23024: PUSH
23025: LD_VAR 0 15
23029: PUSH
23030: LD_INT 2
23032: ARRAY
23033: ST_TO_ADDR
// for i = 1 to hexes do
23034: LD_ADDR_VAR 0 7
23038: PUSH
23039: DOUBLE
23040: LD_INT 1
23042: DEC
23043: ST_TO_ADDR
23044: LD_VAR 0 12
23048: PUSH
23049: FOR_TO
23050: IFFALSE 23380
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23052: LD_VAR 0 12
23056: PUSH
23057: LD_VAR 0 7
23061: ARRAY
23062: PUSH
23063: LD_INT 1
23065: ARRAY
23066: PPUSH
23067: LD_VAR 0 12
23071: PUSH
23072: LD_VAR 0 7
23076: ARRAY
23077: PUSH
23078: LD_INT 2
23080: ARRAY
23081: PPUSH
23082: CALL_OW 488
23086: NOT
23087: PUSH
23088: LD_VAR 0 12
23092: PUSH
23093: LD_VAR 0 7
23097: ARRAY
23098: PUSH
23099: LD_INT 1
23101: ARRAY
23102: PPUSH
23103: LD_VAR 0 12
23107: PUSH
23108: LD_VAR 0 7
23112: ARRAY
23113: PUSH
23114: LD_INT 2
23116: ARRAY
23117: PPUSH
23118: CALL_OW 428
23122: PUSH
23123: LD_INT 0
23125: GREATER
23126: OR
23127: PUSH
23128: LD_VAR 0 12
23132: PUSH
23133: LD_VAR 0 7
23137: ARRAY
23138: PUSH
23139: LD_INT 1
23141: ARRAY
23142: PPUSH
23143: LD_VAR 0 12
23147: PUSH
23148: LD_VAR 0 7
23152: ARRAY
23153: PUSH
23154: LD_INT 2
23156: ARRAY
23157: PPUSH
23158: CALL_OW 351
23162: OR
23163: IFFALSE 23169
// exit ;
23165: POP
23166: POP
23167: GO 23461
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23169: LD_ADDR_VAR 0 8
23173: PUSH
23174: LD_VAR 0 12
23178: PUSH
23179: LD_VAR 0 7
23183: ARRAY
23184: PUSH
23185: LD_INT 1
23187: ARRAY
23188: PPUSH
23189: LD_VAR 0 12
23193: PUSH
23194: LD_VAR 0 7
23198: ARRAY
23199: PUSH
23200: LD_INT 2
23202: ARRAY
23203: PPUSH
23204: CALL_OW 546
23208: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23209: LD_VAR 0 8
23213: PUSH
23214: LD_INT 1
23216: ARRAY
23217: PUSH
23218: LD_VAR 0 8
23222: PUSH
23223: LD_INT 2
23225: ARRAY
23226: PUSH
23227: LD_VAR 0 13
23231: PUSH
23232: LD_INT 2
23234: PLUS
23235: GREATER
23236: OR
23237: PUSH
23238: LD_VAR 0 8
23242: PUSH
23243: LD_INT 2
23245: ARRAY
23246: PUSH
23247: LD_VAR 0 13
23251: PUSH
23252: LD_INT 2
23254: MINUS
23255: LESS
23256: OR
23257: PUSH
23258: LD_VAR 0 8
23262: PUSH
23263: LD_INT 3
23265: ARRAY
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: LD_INT 8
23272: PUSH
23273: LD_INT 9
23275: PUSH
23276: LD_INT 10
23278: PUSH
23279: LD_INT 11
23281: PUSH
23282: LD_INT 12
23284: PUSH
23285: LD_INT 13
23287: PUSH
23288: LD_INT 16
23290: PUSH
23291: LD_INT 17
23293: PUSH
23294: LD_INT 18
23296: PUSH
23297: LD_INT 19
23299: PUSH
23300: LD_INT 20
23302: PUSH
23303: LD_INT 21
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: IN
23321: NOT
23322: OR
23323: PUSH
23324: LD_VAR 0 8
23328: PUSH
23329: LD_INT 5
23331: ARRAY
23332: NOT
23333: OR
23334: PUSH
23335: LD_VAR 0 8
23339: PUSH
23340: LD_INT 6
23342: ARRAY
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: LD_INT 7
23352: PUSH
23353: LD_INT 9
23355: PUSH
23356: LD_INT 10
23358: PUSH
23359: LD_INT 11
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: IN
23370: NOT
23371: OR
23372: IFFALSE 23378
// exit ;
23374: POP
23375: POP
23376: GO 23461
// end ;
23378: GO 23049
23380: POP
23381: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23382: LD_VAR 0 9
23386: PPUSH
23387: LD_VAR 0 3
23391: PPUSH
23392: LD_VAR 0 4
23396: PPUSH
23397: LD_INT 20
23399: PPUSH
23400: CALL 15384 0 4
23404: PUSH
23405: LD_INT 4
23407: ARRAY
23408: IFFALSE 23412
// exit ;
23410: GO 23461
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23412: LD_VAR 0 2
23416: PUSH
23417: LD_INT 29
23419: PUSH
23420: LD_INT 30
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: IN
23427: PUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: LD_VAR 0 4
23437: PPUSH
23438: LD_VAR 0 9
23442: PPUSH
23443: CALL_OW 440
23447: NOT
23448: AND
23449: IFFALSE 23453
// exit ;
23451: GO 23461
// result := true ;
23453: LD_ADDR_VAR 0 6
23457: PUSH
23458: LD_INT 1
23460: ST_TO_ADDR
// end ;
23461: LD_VAR 0 6
23465: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23466: LD_INT 0
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
23506: PPUSH
23507: PPUSH
23508: PPUSH
23509: PPUSH
23510: PPUSH
23511: PPUSH
23512: PPUSH
23513: PPUSH
23514: PPUSH
23515: PPUSH
23516: PPUSH
23517: PPUSH
23518: PPUSH
23519: PPUSH
23520: PPUSH
23521: PPUSH
23522: PPUSH
23523: PPUSH
23524: PPUSH
23525: PPUSH
// result = [ ] ;
23526: LD_ADDR_VAR 0 7
23530: PUSH
23531: EMPTY
23532: ST_TO_ADDR
// temp_list = [ ] ;
23533: LD_ADDR_VAR 0 9
23537: PUSH
23538: EMPTY
23539: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23540: LD_VAR 0 4
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 3
23556: PUSH
23557: LD_INT 4
23559: PUSH
23560: LD_INT 5
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: IN
23571: NOT
23572: PUSH
23573: LD_VAR 0 1
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: IN
23588: PUSH
23589: LD_VAR 0 5
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: LD_INT 3
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: IN
23608: NOT
23609: AND
23610: OR
23611: IFFALSE 23615
// exit ;
23613: GO 42006
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23615: LD_VAR 0 1
23619: PUSH
23620: LD_INT 6
23622: PUSH
23623: LD_INT 7
23625: PUSH
23626: LD_INT 8
23628: PUSH
23629: LD_INT 13
23631: PUSH
23632: LD_INT 12
23634: PUSH
23635: LD_INT 15
23637: PUSH
23638: LD_INT 11
23640: PUSH
23641: LD_INT 14
23643: PUSH
23644: LD_INT 10
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: IN
23658: IFFALSE 23668
// btype = b_lab ;
23660: LD_ADDR_VAR 0 1
23664: PUSH
23665: LD_INT 6
23667: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23668: LD_VAR 0 6
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: IN
23687: NOT
23688: PUSH
23689: LD_VAR 0 1
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: LD_INT 2
23702: PUSH
23703: LD_INT 3
23705: PUSH
23706: LD_INT 6
23708: PUSH
23709: LD_INT 36
23711: PUSH
23712: LD_INT 4
23714: PUSH
23715: LD_INT 5
23717: PUSH
23718: LD_INT 31
23720: PUSH
23721: LD_INT 32
23723: PUSH
23724: LD_INT 33
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: IN
23740: NOT
23741: PUSH
23742: LD_VAR 0 6
23746: PUSH
23747: LD_INT 1
23749: EQUAL
23750: AND
23751: OR
23752: PUSH
23753: LD_VAR 0 1
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: IN
23768: NOT
23769: PUSH
23770: LD_VAR 0 6
23774: PUSH
23775: LD_INT 2
23777: EQUAL
23778: AND
23779: OR
23780: IFFALSE 23790
// mode = 0 ;
23782: LD_ADDR_VAR 0 6
23786: PUSH
23787: LD_INT 0
23789: ST_TO_ADDR
// case mode of 0 :
23790: LD_VAR 0 6
23794: PUSH
23795: LD_INT 0
23797: DOUBLE
23798: EQUAL
23799: IFTRUE 23803
23801: GO 35256
23803: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23804: LD_ADDR_VAR 0 11
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 0
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 2
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: LD_INT 2
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 2
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: LD_INT 3
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: LD_INT 3
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23997: LD_ADDR_VAR 0 12
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 1
24081: NEG
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: NEG
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 2
24143: NEG
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 3
24154: NEG
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 3
24165: NEG
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24193: LD_ADDR_VAR 0 13
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: NEG
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 2
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 2
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 3
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 3
24352: NEG
24353: PUSH
24354: LD_INT 2
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 3
24364: NEG
24365: PUSH
24366: LD_INT 3
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24392: LD_ADDR_VAR 0 14
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: LD_INT 2
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: LD_INT 2
24488: NEG
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: LD_INT 3
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 3
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24588: LD_ADDR_VAR 0 15
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 1
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 1
24657: NEG
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 2
24711: NEG
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: NEG
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 3
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 3
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24781: LD_ADDR_VAR 0 16
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 2
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: NEG
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: NEG
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 3
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 3
24938: PUSH
24939: LD_INT 3
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24974: LD_ADDR_VAR 0 17
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 1
25032: NEG
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 2
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: NEG
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: NEG
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: LD_INT 2
25177: NEG
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25204: LD_ADDR_VAR 0 18
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25434: LD_ADDR_VAR 0 19
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 2
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 2
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25664: LD_ADDR_VAR 0 20
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25894: LD_ADDR_VAR 0 21
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26124: LD_ADDR_VAR 0 22
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 2
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26354: LD_ADDR_VAR 0 23
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: NEG
26578: PUSH
26579: LD_INT 3
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26634: LD_ADDR_VAR 0 24
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: LD_INT 2
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 2
26810: NEG
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 2
26833: NEG
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 3
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26910: LD_ADDR_VAR 0 25
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 3
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 3
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: LD_INT 3
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 3
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27184: LD_ADDR_VAR 0 26
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: LD_INT 2
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 2
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: NEG
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: NEG
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: LD_INT 2
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: LD_INT 3
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 2
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27460: LD_ADDR_VAR 0 27
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 2
27682: NEG
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 3
27705: NEG
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27740: LD_ADDR_VAR 0 28
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 2
27951: NEG
27952: PUSH
27953: LD_INT 3
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: LD_INT 3
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 3
27975: NEG
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 3
27987: NEG
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28022: LD_ADDR_VAR 0 29
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: LD_INT 3
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 3
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 3
28266: NEG
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28301: LD_ADDR_VAR 0 30
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 1
28370: NEG
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: LD_INT 2
28386: NEG
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: LD_INT 2
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 3
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 3
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 3
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28579: LD_ADDR_VAR 0 31
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: NEG
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 2
28756: NEG
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 2
28768: NEG
28769: PUSH
28770: LD_INT 3
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 3
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: LD_INT 3
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: LD_INT 2
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 3
28822: NEG
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28857: LD_ADDR_VAR 0 32
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 2
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: LD_INT 3
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: LD_INT 2
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 3
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 3
29100: NEG
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29135: LD_ADDR_VAR 0 33
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 1
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 2
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: NEG
29326: PUSH
29327: LD_INT 3
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 1
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 1
29368: NEG
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29414: LD_ADDR_VAR 0 34
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: LD_INT 2
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 1
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: LD_INT 3
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 2
29638: PUSH
29639: LD_INT 3
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29694: LD_ADDR_VAR 0 35
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29806: LD_ADDR_VAR 0 36
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29918: LD_ADDR_VAR 0 37
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: LD_INT 1
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30030: LD_ADDR_VAR 0 38
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30142: LD_ADDR_VAR 0 39
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30254: LD_ADDR_VAR 0 40
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: NEG
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30366: LD_ADDR_VAR 0 41
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: LD_INT 2
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 2
30556: NEG
30557: PUSH
30558: LD_INT 3
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 2
30568: PUSH
30569: LD_INT 1
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: NEG
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: NEG
30664: PUSH
30665: LD_INT 2
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 3
30675: NEG
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30716: LD_ADDR_VAR 0 42
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: LD_INT 1
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: LD_INT 2
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: LD_INT 2
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: LD_INT 2
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: LD_INT 3
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: LD_INT 3
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: LD_INT 3
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 3
31013: NEG
31014: PUSH
31015: LD_INT 2
31017: NEG
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31066: LD_ADDR_VAR 0 43
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: LD_INT 1
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: LD_INT 3
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 3
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31414: LD_ADDR_VAR 0 44
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: LD_INT 3
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 3
31657: PUSH
31658: LD_INT 3
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: LD_INT 3
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: NEG
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: LD_INT 3
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31764: LD_ADDR_VAR 0 45
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 2
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 2
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: LD_INT 2
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 3
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 3
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: LD_INT 3
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 3
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: LD_INT 2
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 3
32061: NEG
32062: PUSH
32063: LD_INT 2
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: LD_INT 3
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32114: LD_ADDR_VAR 0 46
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 2
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 3
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 3
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 3
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 3
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 3
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 3
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: NEG
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: NEG
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32462: LD_ADDR_VAR 0 47
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32613: LD_ADDR_VAR 0 48
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32760: LD_ADDR_VAR 0 49
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32904: LD_ADDR_VAR 0 50
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33048: LD_ADDR_VAR 0 51
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: NEG
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: NEG
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33195: LD_ADDR_VAR 0 52
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 2
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33346: LD_ADDR_VAR 0 53
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 2
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33576: LD_ADDR_VAR 0 54
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 2
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33806: LD_ADDR_VAR 0 55
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: LD_INT 2
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34036: LD_ADDR_VAR 0 56
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 2
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34266: LD_ADDR_VAR 0 57
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 2
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34496: LD_ADDR_VAR 0 58
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 2
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34726: LD_ADDR_VAR 0 59
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34814: LD_ADDR_VAR 0 60
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34902: LD_ADDR_VAR 0 61
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 1
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: LD_INT 1
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34990: LD_ADDR_VAR 0 62
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35078: LD_ADDR_VAR 0 63
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35166: LD_ADDR_VAR 0 64
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// end ; 1 :
35254: GO 41151
35256: LD_INT 1
35258: DOUBLE
35259: EQUAL
35260: IFTRUE 35264
35262: GO 37887
35264: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35265: LD_ADDR_VAR 0 11
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: LD_INT 3
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 3
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 2
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35309: LD_ADDR_VAR 0 12
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35350: LD_ADDR_VAR 0 13
35354: PUSH
35355: LD_INT 3
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: LD_INT 3
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35390: LD_ADDR_VAR 0 14
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35431: LD_ADDR_VAR 0 15
35435: PUSH
35436: LD_INT 2
35438: NEG
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 3
35449: NEG
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 3
35460: NEG
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: LIST
35474: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35475: LD_ADDR_VAR 0 16
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 3
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 3
35494: NEG
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 3
35506: NEG
35507: PUSH
35508: LD_INT 3
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35521: LD_ADDR_VAR 0 17
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: LD_INT 3
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: LD_INT 3
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35565: LD_ADDR_VAR 0 18
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 3
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35606: LD_ADDR_VAR 0 19
35610: PUSH
35611: LD_INT 3
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: LD_INT 3
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 2
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35646: LD_ADDR_VAR 0 20
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: LD_INT 3
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 3
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35687: LD_ADDR_VAR 0 21
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 3
35705: NEG
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 3
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35731: LD_ADDR_VAR 0 22
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: LD_INT 3
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 3
35750: NEG
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 3
35762: NEG
35763: PUSH
35764: LD_INT 3
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35777: LD_ADDR_VAR 0 23
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 3
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 4
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35821: LD_ADDR_VAR 0 24
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 4
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35862: LD_ADDR_VAR 0 25
35866: PUSH
35867: LD_INT 3
35869: PUSH
35870: LD_INT 3
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 4
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 3
35889: PUSH
35890: LD_INT 4
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35902: LD_ADDR_VAR 0 26
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 4
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35943: LD_ADDR_VAR 0 27
35947: PUSH
35948: LD_INT 3
35950: NEG
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 3
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 4
35972: NEG
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35987: LD_ADDR_VAR 0 28
35991: PUSH
35992: LD_INT 3
35994: NEG
35995: PUSH
35996: LD_INT 3
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 3
36006: NEG
36007: PUSH
36008: LD_INT 4
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 4
36018: NEG
36019: PUSH
36020: LD_INT 3
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36033: LD_ADDR_VAR 0 29
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 3
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 3
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: LD_INT 4
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 4
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 3
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 5
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 5
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 4
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: LD_INT 6
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 6
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 5
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36188: LD_ADDR_VAR 0 30
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 3
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 3
36226: PUSH
36227: LD_INT 1
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 4
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 4
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 4
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 5
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 5
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 5
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 6
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 6
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36331: LD_ADDR_VAR 0 31
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: LD_INT 3
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 4
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: LD_INT 4
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: LD_INT 4
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 5
36398: PUSH
36399: LD_INT 4
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 5
36408: PUSH
36409: LD_INT 5
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 4
36418: PUSH
36419: LD_INT 5
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 6
36428: PUSH
36429: LD_INT 5
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 6
36438: PUSH
36439: LD_INT 6
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 5
36448: PUSH
36449: LD_INT 6
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36470: LD_ADDR_VAR 0 32
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 4
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 4
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 5
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 5
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 4
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 6
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: LD_INT 6
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: LD_INT 5
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36613: LD_ADDR_VAR 0 33
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 3
36631: NEG
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 3
36654: NEG
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 4
36665: NEG
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 4
36676: NEG
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 4
36688: NEG
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 5
36699: NEG
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 5
36710: NEG
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 5
36722: NEG
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 6
36733: NEG
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 6
36744: NEG
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36768: LD_ADDR_VAR 0 34
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: LD_INT 3
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: LD_INT 3
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 3
36811: NEG
36812: PUSH
36813: LD_INT 4
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 4
36823: NEG
36824: PUSH
36825: LD_INT 3
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 4
36835: NEG
36836: PUSH
36837: LD_INT 4
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 4
36847: NEG
36848: PUSH
36849: LD_INT 5
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 5
36859: NEG
36860: PUSH
36861: LD_INT 4
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 5
36871: NEG
36872: PUSH
36873: LD_INT 5
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 5
36883: NEG
36884: PUSH
36885: LD_INT 6
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 6
36895: NEG
36896: PUSH
36897: LD_INT 5
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 6
36907: NEG
36908: PUSH
36909: LD_INT 6
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36931: LD_ADDR_VAR 0 41
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 3
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36975: LD_ADDR_VAR 0 42
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37016: LD_ADDR_VAR 0 43
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 3
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37056: LD_ADDR_VAR 0 44
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 3
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37097: LD_ADDR_VAR 0 45
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37141: LD_ADDR_VAR 0 46
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 3
37172: NEG
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37187: LD_ADDR_VAR 0 47
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: LD_INT 3
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37220: LD_ADDR_VAR 0 48
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 1
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37251: LD_ADDR_VAR 0 49
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 3
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37280: LD_ADDR_VAR 0 50
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 3
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37309: LD_ADDR_VAR 0 51
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37340: LD_ADDR_VAR 0 52
37344: PUSH
37345: LD_INT 3
37347: NEG
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 3
37359: NEG
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37373: LD_ADDR_VAR 0 53
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: LD_INT 3
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 3
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37417: LD_ADDR_VAR 0 54
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37458: LD_ADDR_VAR 0 55
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37498: LD_ADDR_VAR 0 56
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37539: LD_ADDR_VAR 0 57
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 3
37557: NEG
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 3
37568: NEG
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37583: LD_ADDR_VAR 0 58
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: LD_INT 3
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: NEG
37603: PUSH
37604: LD_INT 2
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 3
37614: NEG
37615: PUSH
37616: LD_INT 3
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37629: LD_ADDR_VAR 0 59
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 2
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37673: LD_ADDR_VAR 0 60
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37714: LD_ADDR_VAR 0 61
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 2
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37754: LD_ADDR_VAR 0 62
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37795: LD_ADDR_VAR 0 63
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37839: LD_ADDR_VAR 0 64
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: LD_INT 2
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: ST_TO_ADDR
// end ; 2 :
37885: GO 41151
37887: LD_INT 2
37889: DOUBLE
37890: EQUAL
37891: IFTRUE 37895
37893: GO 41150
37895: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37896: LD_ADDR_VAR 0 29
37900: PUSH
37901: LD_INT 4
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 4
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 5
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 5
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 4
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 3
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: LD_INT 2
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 5
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: LD_INT 3
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 3
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 4
38016: PUSH
38017: LD_INT 3
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 4
38026: PUSH
38027: LD_INT 4
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: LD_INT 4
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: LD_INT 3
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 4
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 4
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: LD_INT 4
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 4
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 5
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 5
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 4
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 5
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 3
38179: NEG
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 3
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 4
38235: NEG
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 4
38246: NEG
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 4
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 4
38281: NEG
38282: PUSH
38283: LD_INT 4
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 4
38293: NEG
38294: PUSH
38295: LD_INT 5
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 3
38305: NEG
38306: PUSH
38307: LD_INT 4
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 3
38317: NEG
38318: PUSH
38319: LD_INT 3
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 4
38329: NEG
38330: PUSH
38331: LD_INT 3
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 5
38341: NEG
38342: PUSH
38343: LD_INT 4
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 5
38353: NEG
38354: PUSH
38355: LD_INT 5
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 3
38365: NEG
38366: PUSH
38367: LD_INT 5
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 5
38377: NEG
38378: PUSH
38379: LD_INT 3
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38434: LD_ADDR_VAR 0 30
38438: PUSH
38439: LD_INT 4
38441: PUSH
38442: LD_INT 4
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 4
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 5
38461: PUSH
38462: LD_INT 4
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 5
38471: PUSH
38472: LD_INT 5
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 4
38481: PUSH
38482: LD_INT 5
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 3
38491: PUSH
38492: LD_INT 4
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 3
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 5
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 5
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 4
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 4
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 4
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 4
38624: NEG
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 4
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 3
38647: NEG
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 3
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 4
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 5
38680: NEG
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 5
38691: NEG
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 5
38703: NEG
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 3
38715: NEG
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: NEG
38727: PUSH
38728: LD_INT 3
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: NEG
38739: PUSH
38740: LD_INT 4
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 4
38786: NEG
38787: PUSH
38788: LD_INT 3
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 4
38798: NEG
38799: PUSH
38800: LD_INT 4
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: LD_INT 4
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 4
38822: NEG
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: LD_INT 4
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: LD_INT 5
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: LD_INT 4
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 3
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 3
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 4
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: LD_INT 5
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 3
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: LD_INT 5
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38981: LD_ADDR_VAR 0 31
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 4
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 4
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 5
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 5
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 4
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 3
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 5
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: NEG
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 3
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 3
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 4
39137: NEG
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 4
39148: NEG
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 4
39160: NEG
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 4
39183: NEG
39184: PUSH
39185: LD_INT 4
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 4
39195: NEG
39196: PUSH
39197: LD_INT 5
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 4
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 3
39219: NEG
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 4
39231: NEG
39232: PUSH
39233: LD_INT 3
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 5
39243: NEG
39244: PUSH
39245: LD_INT 4
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 5
39255: NEG
39256: PUSH
39257: LD_INT 5
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 3
39267: NEG
39268: PUSH
39269: LD_INT 5
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 5
39279: NEG
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 3
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 4
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: LD_INT 3
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: LD_INT 3
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 4
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 4
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 4
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 5
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 5
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 5
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39531: LD_ADDR_VAR 0 32
39535: PUSH
39536: LD_INT 4
39538: NEG
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 4
39549: NEG
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 3
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 4
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 5
39594: NEG
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 5
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 5
39617: NEG
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 3
39629: NEG
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 3
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 3
39652: NEG
39653: PUSH
39654: LD_INT 4
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: LD_INT 3
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 3
39688: NEG
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 4
39700: NEG
39701: PUSH
39702: LD_INT 3
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 4
39712: NEG
39713: PUSH
39714: LD_INT 4
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 4
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 4
39736: NEG
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 4
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 5
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 4
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 3
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 3
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 4
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 5
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 3
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: LD_INT 5
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 3
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 3
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 4
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 4
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 3
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 4
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 4
39943: PUSH
39944: LD_INT 4
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 4
39953: PUSH
39954: LD_INT 3
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 5
39963: PUSH
39964: LD_INT 4
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 5
39973: PUSH
39974: LD_INT 5
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 4
39983: PUSH
39984: LD_INT 5
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 3
39993: PUSH
39994: LD_INT 4
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 3
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 5
40013: PUSH
40014: LD_INT 3
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 3
40023: PUSH
40024: LD_INT 5
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40078: LD_ADDR_VAR 0 33
40082: PUSH
40083: LD_INT 4
40085: NEG
40086: PUSH
40087: LD_INT 4
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 4
40097: NEG
40098: PUSH
40099: LD_INT 5
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 3
40109: NEG
40110: PUSH
40111: LD_INT 4
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 3
40121: NEG
40122: PUSH
40123: LD_INT 3
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 4
40133: NEG
40134: PUSH
40135: LD_INT 3
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 5
40145: NEG
40146: PUSH
40147: LD_INT 4
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 5
40157: NEG
40158: PUSH
40159: LD_INT 5
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 3
40169: NEG
40170: PUSH
40171: LD_INT 5
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 5
40181: NEG
40182: PUSH
40183: LD_INT 3
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 3
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 4
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: LD_INT 3
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 2
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 3
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 4
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 2
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 4
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 4
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 5
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 5
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 4
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 3
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 3
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 5
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 4
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 4
40418: PUSH
40419: LD_INT 4
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: LD_INT 4
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 4
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 4
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 4
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 5
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 4
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: LD_INT 5
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: LD_INT 3
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40616: LD_ADDR_VAR 0 34
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 4
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 5
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 4
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: LD_INT 4
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 5
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: LD_INT 3
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: LD_INT 5
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 4
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 4
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 4
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 4
40818: PUSH
40819: LD_INT 4
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 4
40828: PUSH
40829: LD_INT 3
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 5
40838: PUSH
40839: LD_INT 4
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: LD_INT 5
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: LD_INT 5
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 3
40868: PUSH
40869: LD_INT 4
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 5
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: LD_INT 5
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 4
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 4
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 4
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 4
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 4
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 3
41024: NEG
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 3
41035: NEG
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 4
41046: NEG
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 5
41057: NEG
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 5
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 5
41080: NEG
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// end ; end ;
41148: GO 41151
41150: POP
// case btype of b_depot , b_warehouse :
41151: LD_VAR 0 1
41155: PUSH
41156: LD_INT 0
41158: DOUBLE
41159: EQUAL
41160: IFTRUE 41170
41162: LD_INT 1
41164: DOUBLE
41165: EQUAL
41166: IFTRUE 41170
41168: GO 41371
41170: POP
// case nation of nation_american :
41171: LD_VAR 0 5
41175: PUSH
41176: LD_INT 1
41178: DOUBLE
41179: EQUAL
41180: IFTRUE 41184
41182: GO 41240
41184: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41185: LD_ADDR_VAR 0 9
41189: PUSH
41190: LD_VAR 0 11
41194: PUSH
41195: LD_VAR 0 12
41199: PUSH
41200: LD_VAR 0 13
41204: PUSH
41205: LD_VAR 0 14
41209: PUSH
41210: LD_VAR 0 15
41214: PUSH
41215: LD_VAR 0 16
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: PUSH
41228: LD_VAR 0 4
41232: PUSH
41233: LD_INT 1
41235: PLUS
41236: ARRAY
41237: ST_TO_ADDR
41238: GO 41369
41240: LD_INT 2
41242: DOUBLE
41243: EQUAL
41244: IFTRUE 41248
41246: GO 41304
41248: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41249: LD_ADDR_VAR 0 9
41253: PUSH
41254: LD_VAR 0 17
41258: PUSH
41259: LD_VAR 0 18
41263: PUSH
41264: LD_VAR 0 19
41268: PUSH
41269: LD_VAR 0 20
41273: PUSH
41274: LD_VAR 0 21
41278: PUSH
41279: LD_VAR 0 22
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: PUSH
41292: LD_VAR 0 4
41296: PUSH
41297: LD_INT 1
41299: PLUS
41300: ARRAY
41301: ST_TO_ADDR
41302: GO 41369
41304: LD_INT 3
41306: DOUBLE
41307: EQUAL
41308: IFTRUE 41312
41310: GO 41368
41312: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41313: LD_ADDR_VAR 0 9
41317: PUSH
41318: LD_VAR 0 23
41322: PUSH
41323: LD_VAR 0 24
41327: PUSH
41328: LD_VAR 0 25
41332: PUSH
41333: LD_VAR 0 26
41337: PUSH
41338: LD_VAR 0 27
41342: PUSH
41343: LD_VAR 0 28
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: PUSH
41356: LD_VAR 0 4
41360: PUSH
41361: LD_INT 1
41363: PLUS
41364: ARRAY
41365: ST_TO_ADDR
41366: GO 41369
41368: POP
41369: GO 41924
41371: LD_INT 2
41373: DOUBLE
41374: EQUAL
41375: IFTRUE 41385
41377: LD_INT 3
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41385
41383: GO 41441
41385: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41386: LD_ADDR_VAR 0 9
41390: PUSH
41391: LD_VAR 0 29
41395: PUSH
41396: LD_VAR 0 30
41400: PUSH
41401: LD_VAR 0 31
41405: PUSH
41406: LD_VAR 0 32
41410: PUSH
41411: LD_VAR 0 33
41415: PUSH
41416: LD_VAR 0 34
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: PUSH
41429: LD_VAR 0 4
41433: PUSH
41434: LD_INT 1
41436: PLUS
41437: ARRAY
41438: ST_TO_ADDR
41439: GO 41924
41441: LD_INT 16
41443: DOUBLE
41444: EQUAL
41445: IFTRUE 41503
41447: LD_INT 17
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41503
41453: LD_INT 18
41455: DOUBLE
41456: EQUAL
41457: IFTRUE 41503
41459: LD_INT 19
41461: DOUBLE
41462: EQUAL
41463: IFTRUE 41503
41465: LD_INT 22
41467: DOUBLE
41468: EQUAL
41469: IFTRUE 41503
41471: LD_INT 20
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41503
41477: LD_INT 21
41479: DOUBLE
41480: EQUAL
41481: IFTRUE 41503
41483: LD_INT 23
41485: DOUBLE
41486: EQUAL
41487: IFTRUE 41503
41489: LD_INT 24
41491: DOUBLE
41492: EQUAL
41493: IFTRUE 41503
41495: LD_INT 25
41497: DOUBLE
41498: EQUAL
41499: IFTRUE 41503
41501: GO 41559
41503: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41504: LD_ADDR_VAR 0 9
41508: PUSH
41509: LD_VAR 0 35
41513: PUSH
41514: LD_VAR 0 36
41518: PUSH
41519: LD_VAR 0 37
41523: PUSH
41524: LD_VAR 0 38
41528: PUSH
41529: LD_VAR 0 39
41533: PUSH
41534: LD_VAR 0 40
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: PUSH
41547: LD_VAR 0 4
41551: PUSH
41552: LD_INT 1
41554: PLUS
41555: ARRAY
41556: ST_TO_ADDR
41557: GO 41924
41559: LD_INT 6
41561: DOUBLE
41562: EQUAL
41563: IFTRUE 41615
41565: LD_INT 7
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41615
41571: LD_INT 8
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41615
41577: LD_INT 13
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41615
41583: LD_INT 12
41585: DOUBLE
41586: EQUAL
41587: IFTRUE 41615
41589: LD_INT 15
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41615
41595: LD_INT 11
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41615
41601: LD_INT 14
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41615
41607: LD_INT 10
41609: DOUBLE
41610: EQUAL
41611: IFTRUE 41615
41613: GO 41671
41615: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41616: LD_ADDR_VAR 0 9
41620: PUSH
41621: LD_VAR 0 41
41625: PUSH
41626: LD_VAR 0 42
41630: PUSH
41631: LD_VAR 0 43
41635: PUSH
41636: LD_VAR 0 44
41640: PUSH
41641: LD_VAR 0 45
41645: PUSH
41646: LD_VAR 0 46
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: PUSH
41659: LD_VAR 0 4
41663: PUSH
41664: LD_INT 1
41666: PLUS
41667: ARRAY
41668: ST_TO_ADDR
41669: GO 41924
41671: LD_INT 36
41673: DOUBLE
41674: EQUAL
41675: IFTRUE 41679
41677: GO 41735
41679: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41680: LD_ADDR_VAR 0 9
41684: PUSH
41685: LD_VAR 0 47
41689: PUSH
41690: LD_VAR 0 48
41694: PUSH
41695: LD_VAR 0 49
41699: PUSH
41700: LD_VAR 0 50
41704: PUSH
41705: LD_VAR 0 51
41709: PUSH
41710: LD_VAR 0 52
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: PUSH
41723: LD_VAR 0 4
41727: PUSH
41728: LD_INT 1
41730: PLUS
41731: ARRAY
41732: ST_TO_ADDR
41733: GO 41924
41735: LD_INT 4
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41761
41741: LD_INT 5
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41761
41747: LD_INT 34
41749: DOUBLE
41750: EQUAL
41751: IFTRUE 41761
41753: LD_INT 37
41755: DOUBLE
41756: EQUAL
41757: IFTRUE 41761
41759: GO 41817
41761: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41762: LD_ADDR_VAR 0 9
41766: PUSH
41767: LD_VAR 0 53
41771: PUSH
41772: LD_VAR 0 54
41776: PUSH
41777: LD_VAR 0 55
41781: PUSH
41782: LD_VAR 0 56
41786: PUSH
41787: LD_VAR 0 57
41791: PUSH
41792: LD_VAR 0 58
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: PUSH
41805: LD_VAR 0 4
41809: PUSH
41810: LD_INT 1
41812: PLUS
41813: ARRAY
41814: ST_TO_ADDR
41815: GO 41924
41817: LD_INT 31
41819: DOUBLE
41820: EQUAL
41821: IFTRUE 41867
41823: LD_INT 32
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41867
41829: LD_INT 33
41831: DOUBLE
41832: EQUAL
41833: IFTRUE 41867
41835: LD_INT 27
41837: DOUBLE
41838: EQUAL
41839: IFTRUE 41867
41841: LD_INT 26
41843: DOUBLE
41844: EQUAL
41845: IFTRUE 41867
41847: LD_INT 28
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41867
41853: LD_INT 29
41855: DOUBLE
41856: EQUAL
41857: IFTRUE 41867
41859: LD_INT 30
41861: DOUBLE
41862: EQUAL
41863: IFTRUE 41867
41865: GO 41923
41867: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41868: LD_ADDR_VAR 0 9
41872: PUSH
41873: LD_VAR 0 59
41877: PUSH
41878: LD_VAR 0 60
41882: PUSH
41883: LD_VAR 0 61
41887: PUSH
41888: LD_VAR 0 62
41892: PUSH
41893: LD_VAR 0 63
41897: PUSH
41898: LD_VAR 0 64
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: PUSH
41911: LD_VAR 0 4
41915: PUSH
41916: LD_INT 1
41918: PLUS
41919: ARRAY
41920: ST_TO_ADDR
41921: GO 41924
41923: POP
// temp_list2 = [ ] ;
41924: LD_ADDR_VAR 0 10
41928: PUSH
41929: EMPTY
41930: ST_TO_ADDR
// for i in temp_list do
41931: LD_ADDR_VAR 0 8
41935: PUSH
41936: LD_VAR 0 9
41940: PUSH
41941: FOR_IN
41942: IFFALSE 41994
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41944: LD_ADDR_VAR 0 10
41948: PUSH
41949: LD_VAR 0 10
41953: PUSH
41954: LD_VAR 0 8
41958: PUSH
41959: LD_INT 1
41961: ARRAY
41962: PUSH
41963: LD_VAR 0 2
41967: PLUS
41968: PUSH
41969: LD_VAR 0 8
41973: PUSH
41974: LD_INT 2
41976: ARRAY
41977: PUSH
41978: LD_VAR 0 3
41982: PLUS
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: EMPTY
41989: LIST
41990: ADD
41991: ST_TO_ADDR
41992: GO 41941
41994: POP
41995: POP
// result = temp_list2 ;
41996: LD_ADDR_VAR 0 7
42000: PUSH
42001: LD_VAR 0 10
42005: ST_TO_ADDR
// end ;
42006: LD_VAR 0 7
42010: RET
// export function EnemyInRange ( unit , dist ) ; begin
42011: LD_INT 0
42013: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 255
42028: PPUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: CALL_OW 250
42038: PPUSH
42039: LD_VAR 0 1
42043: PPUSH
42044: CALL_OW 251
42048: PPUSH
42049: LD_VAR 0 2
42053: PPUSH
42054: CALL 15384 0 4
42058: PUSH
42059: LD_INT 4
42061: ARRAY
42062: ST_TO_ADDR
// end ;
42063: LD_VAR 0 3
42067: RET
// export function PlayerSeeMe ( unit ) ; begin
42068: LD_INT 0
42070: PPUSH
// result := See ( your_side , unit ) ;
42071: LD_ADDR_VAR 0 2
42075: PUSH
42076: LD_OWVAR 2
42080: PPUSH
42081: LD_VAR 0 1
42085: PPUSH
42086: CALL_OW 292
42090: ST_TO_ADDR
// end ;
42091: LD_VAR 0 2
42095: RET
// export function ReverseDir ( unit ) ; begin
42096: LD_INT 0
42098: PPUSH
// if not unit then
42099: LD_VAR 0 1
42103: NOT
42104: IFFALSE 42108
// exit ;
42106: GO 42131
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42108: LD_ADDR_VAR 0 2
42112: PUSH
42113: LD_VAR 0 1
42117: PPUSH
42118: CALL_OW 254
42122: PUSH
42123: LD_INT 3
42125: PLUS
42126: PUSH
42127: LD_INT 6
42129: MOD
42130: ST_TO_ADDR
// end ;
42131: LD_VAR 0 2
42135: RET
// export function ReverseArray ( array ) ; var i ; begin
42136: LD_INT 0
42138: PPUSH
42139: PPUSH
// if not array then
42140: LD_VAR 0 1
42144: NOT
42145: IFFALSE 42149
// exit ;
42147: GO 42204
// result := [ ] ;
42149: LD_ADDR_VAR 0 2
42153: PUSH
42154: EMPTY
42155: ST_TO_ADDR
// for i := array downto 1 do
42156: LD_ADDR_VAR 0 3
42160: PUSH
42161: DOUBLE
42162: LD_VAR 0 1
42166: INC
42167: ST_TO_ADDR
42168: LD_INT 1
42170: PUSH
42171: FOR_DOWNTO
42172: IFFALSE 42202
// result := Join ( result , array [ i ] ) ;
42174: LD_ADDR_VAR 0 2
42178: PUSH
42179: LD_VAR 0 2
42183: PPUSH
42184: LD_VAR 0 1
42188: PUSH
42189: LD_VAR 0 3
42193: ARRAY
42194: PPUSH
42195: CALL 46869 0 2
42199: ST_TO_ADDR
42200: GO 42171
42202: POP
42203: POP
// end ;
42204: LD_VAR 0 2
42208: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42209: LD_INT 0
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
// if not unit or not hexes then
42217: LD_VAR 0 1
42221: NOT
42222: PUSH
42223: LD_VAR 0 2
42227: NOT
42228: OR
42229: IFFALSE 42233
// exit ;
42231: GO 42356
// dist := 9999 ;
42233: LD_ADDR_VAR 0 5
42237: PUSH
42238: LD_INT 9999
42240: ST_TO_ADDR
// for i = 1 to hexes do
42241: LD_ADDR_VAR 0 4
42245: PUSH
42246: DOUBLE
42247: LD_INT 1
42249: DEC
42250: ST_TO_ADDR
42251: LD_VAR 0 2
42255: PUSH
42256: FOR_TO
42257: IFFALSE 42344
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42259: LD_ADDR_VAR 0 6
42263: PUSH
42264: LD_VAR 0 1
42268: PPUSH
42269: LD_VAR 0 2
42273: PUSH
42274: LD_VAR 0 4
42278: ARRAY
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: PPUSH
42284: LD_VAR 0 2
42288: PUSH
42289: LD_VAR 0 4
42293: ARRAY
42294: PUSH
42295: LD_INT 2
42297: ARRAY
42298: PPUSH
42299: CALL_OW 297
42303: ST_TO_ADDR
// if tdist < dist then
42304: LD_VAR 0 6
42308: PUSH
42309: LD_VAR 0 5
42313: LESS
42314: IFFALSE 42342
// begin hex := hexes [ i ] ;
42316: LD_ADDR_VAR 0 8
42320: PUSH
42321: LD_VAR 0 2
42325: PUSH
42326: LD_VAR 0 4
42330: ARRAY
42331: ST_TO_ADDR
// dist := tdist ;
42332: LD_ADDR_VAR 0 5
42336: PUSH
42337: LD_VAR 0 6
42341: ST_TO_ADDR
// end ; end ;
42342: GO 42256
42344: POP
42345: POP
// result := hex ;
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_VAR 0 8
42355: ST_TO_ADDR
// end ;
42356: LD_VAR 0 3
42360: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42361: LD_INT 0
42363: PPUSH
42364: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42365: LD_VAR 0 1
42369: NOT
42370: PUSH
42371: LD_VAR 0 1
42375: PUSH
42376: LD_INT 21
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 23
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PPUSH
42400: CALL_OW 69
42404: IN
42405: NOT
42406: OR
42407: IFFALSE 42411
// exit ;
42409: GO 42458
// for i = 1 to 3 do
42411: LD_ADDR_VAR 0 3
42415: PUSH
42416: DOUBLE
42417: LD_INT 1
42419: DEC
42420: ST_TO_ADDR
42421: LD_INT 3
42423: PUSH
42424: FOR_TO
42425: IFFALSE 42456
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42427: LD_VAR 0 1
42431: PPUSH
42432: CALL_OW 250
42436: PPUSH
42437: LD_VAR 0 1
42441: PPUSH
42442: CALL_OW 251
42446: PPUSH
42447: LD_INT 1
42449: PPUSH
42450: CALL_OW 453
42454: GO 42424
42456: POP
42457: POP
// end ;
42458: LD_VAR 0 2
42462: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42463: LD_INT 0
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
// if not unit or not enemy_unit then
42471: LD_VAR 0 1
42475: NOT
42476: PUSH
42477: LD_VAR 0 2
42481: NOT
42482: OR
42483: IFFALSE 42487
// exit ;
42485: GO 42954
// if GetLives ( i ) < 250 then
42487: LD_VAR 0 4
42491: PPUSH
42492: CALL_OW 256
42496: PUSH
42497: LD_INT 250
42499: LESS
42500: IFFALSE 42513
// begin ComAutodestruct ( i ) ;
42502: LD_VAR 0 4
42506: PPUSH
42507: CALL 42361 0 1
// exit ;
42511: GO 42954
// end ; x := GetX ( enemy_unit ) ;
42513: LD_ADDR_VAR 0 7
42517: PUSH
42518: LD_VAR 0 2
42522: PPUSH
42523: CALL_OW 250
42527: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42528: LD_ADDR_VAR 0 8
42532: PUSH
42533: LD_VAR 0 2
42537: PPUSH
42538: CALL_OW 251
42542: ST_TO_ADDR
// if not x or not y then
42543: LD_VAR 0 7
42547: NOT
42548: PUSH
42549: LD_VAR 0 8
42553: NOT
42554: OR
42555: IFFALSE 42559
// exit ;
42557: GO 42954
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42559: LD_ADDR_VAR 0 6
42563: PUSH
42564: LD_VAR 0 7
42568: PPUSH
42569: LD_INT 0
42571: PPUSH
42572: LD_INT 4
42574: PPUSH
42575: CALL_OW 272
42579: PUSH
42580: LD_VAR 0 8
42584: PPUSH
42585: LD_INT 0
42587: PPUSH
42588: LD_INT 4
42590: PPUSH
42591: CALL_OW 273
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_VAR 0 7
42604: PPUSH
42605: LD_INT 1
42607: PPUSH
42608: LD_INT 4
42610: PPUSH
42611: CALL_OW 272
42615: PUSH
42616: LD_VAR 0 8
42620: PPUSH
42621: LD_INT 1
42623: PPUSH
42624: LD_INT 4
42626: PPUSH
42627: CALL_OW 273
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_VAR 0 7
42640: PPUSH
42641: LD_INT 2
42643: PPUSH
42644: LD_INT 4
42646: PPUSH
42647: CALL_OW 272
42651: PUSH
42652: LD_VAR 0 8
42656: PPUSH
42657: LD_INT 2
42659: PPUSH
42660: LD_INT 4
42662: PPUSH
42663: CALL_OW 273
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_VAR 0 7
42676: PPUSH
42677: LD_INT 3
42679: PPUSH
42680: LD_INT 4
42682: PPUSH
42683: CALL_OW 272
42687: PUSH
42688: LD_VAR 0 8
42692: PPUSH
42693: LD_INT 3
42695: PPUSH
42696: LD_INT 4
42698: PPUSH
42699: CALL_OW 273
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_VAR 0 7
42712: PPUSH
42713: LD_INT 4
42715: PPUSH
42716: LD_INT 4
42718: PPUSH
42719: CALL_OW 272
42723: PUSH
42724: LD_VAR 0 8
42728: PPUSH
42729: LD_INT 4
42731: PPUSH
42732: LD_INT 4
42734: PPUSH
42735: CALL_OW 273
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_VAR 0 7
42748: PPUSH
42749: LD_INT 5
42751: PPUSH
42752: LD_INT 4
42754: PPUSH
42755: CALL_OW 272
42759: PUSH
42760: LD_VAR 0 8
42764: PPUSH
42765: LD_INT 5
42767: PPUSH
42768: LD_INT 4
42770: PPUSH
42771: CALL_OW 273
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// for i = tmp downto 1 do
42788: LD_ADDR_VAR 0 4
42792: PUSH
42793: DOUBLE
42794: LD_VAR 0 6
42798: INC
42799: ST_TO_ADDR
42800: LD_INT 1
42802: PUSH
42803: FOR_DOWNTO
42804: IFFALSE 42905
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42806: LD_VAR 0 6
42810: PUSH
42811: LD_VAR 0 4
42815: ARRAY
42816: PUSH
42817: LD_INT 1
42819: ARRAY
42820: PPUSH
42821: LD_VAR 0 6
42825: PUSH
42826: LD_VAR 0 4
42830: ARRAY
42831: PUSH
42832: LD_INT 2
42834: ARRAY
42835: PPUSH
42836: CALL_OW 488
42840: NOT
42841: PUSH
42842: LD_VAR 0 6
42846: PUSH
42847: LD_VAR 0 4
42851: ARRAY
42852: PUSH
42853: LD_INT 1
42855: ARRAY
42856: PPUSH
42857: LD_VAR 0 6
42861: PUSH
42862: LD_VAR 0 4
42866: ARRAY
42867: PUSH
42868: LD_INT 2
42870: ARRAY
42871: PPUSH
42872: CALL_OW 428
42876: PUSH
42877: LD_INT 0
42879: NONEQUAL
42880: OR
42881: IFFALSE 42903
// tmp := Delete ( tmp , i ) ;
42883: LD_ADDR_VAR 0 6
42887: PUSH
42888: LD_VAR 0 6
42892: PPUSH
42893: LD_VAR 0 4
42897: PPUSH
42898: CALL_OW 3
42902: ST_TO_ADDR
42903: GO 42803
42905: POP
42906: POP
// j := GetClosestHex ( unit , tmp ) ;
42907: LD_ADDR_VAR 0 5
42911: PUSH
42912: LD_VAR 0 1
42916: PPUSH
42917: LD_VAR 0 6
42921: PPUSH
42922: CALL 42209 0 2
42926: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42927: LD_VAR 0 1
42931: PPUSH
42932: LD_VAR 0 5
42936: PUSH
42937: LD_INT 1
42939: ARRAY
42940: PPUSH
42941: LD_VAR 0 5
42945: PUSH
42946: LD_INT 2
42948: ARRAY
42949: PPUSH
42950: CALL_OW 111
// end ;
42954: LD_VAR 0 3
42958: RET
// export function PrepareApemanSoldier ( ) ; begin
42959: LD_INT 0
42961: PPUSH
// uc_nation := 0 ;
42962: LD_ADDR_OWVAR 21
42966: PUSH
42967: LD_INT 0
42969: ST_TO_ADDR
// hc_sex := sex_male ;
42970: LD_ADDR_OWVAR 27
42974: PUSH
42975: LD_INT 1
42977: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42978: LD_ADDR_OWVAR 28
42982: PUSH
42983: LD_INT 15
42985: ST_TO_ADDR
// hc_gallery :=  ;
42986: LD_ADDR_OWVAR 33
42990: PUSH
42991: LD_STRING 
42993: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42994: LD_ADDR_OWVAR 31
42998: PUSH
42999: LD_INT 0
43001: PPUSH
43002: LD_INT 3
43004: PPUSH
43005: CALL_OW 12
43009: PUSH
43010: LD_INT 0
43012: PPUSH
43013: LD_INT 3
43015: PPUSH
43016: CALL_OW 12
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// end ;
43033: LD_VAR 0 1
43037: RET
// export function PrepareApemanEngineer ( ) ; begin
43038: LD_INT 0
43040: PPUSH
// uc_nation := 0 ;
43041: LD_ADDR_OWVAR 21
43045: PUSH
43046: LD_INT 0
43048: ST_TO_ADDR
// hc_sex := sex_male ;
43049: LD_ADDR_OWVAR 27
43053: PUSH
43054: LD_INT 1
43056: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43057: LD_ADDR_OWVAR 28
43061: PUSH
43062: LD_INT 16
43064: ST_TO_ADDR
// hc_gallery :=  ;
43065: LD_ADDR_OWVAR 33
43069: PUSH
43070: LD_STRING 
43072: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43073: LD_ADDR_OWVAR 31
43077: PUSH
43078: LD_INT 0
43080: PPUSH
43081: LD_INT 3
43083: PPUSH
43084: CALL_OW 12
43088: PUSH
43089: LD_INT 0
43091: PPUSH
43092: LD_INT 3
43094: PPUSH
43095: CALL_OW 12
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// end ;
43112: LD_VAR 0 1
43116: RET
// export function PrepareApeman ( agressivity ) ; begin
43117: LD_INT 0
43119: PPUSH
// uc_side := 0 ;
43120: LD_ADDR_OWVAR 20
43124: PUSH
43125: LD_INT 0
43127: ST_TO_ADDR
// uc_nation := 0 ;
43128: LD_ADDR_OWVAR 21
43132: PUSH
43133: LD_INT 0
43135: ST_TO_ADDR
// hc_sex := sex_male ;
43136: LD_ADDR_OWVAR 27
43140: PUSH
43141: LD_INT 1
43143: ST_TO_ADDR
// hc_class := class_apeman ;
43144: LD_ADDR_OWVAR 28
43148: PUSH
43149: LD_INT 12
43151: ST_TO_ADDR
// hc_gallery :=  ;
43152: LD_ADDR_OWVAR 33
43156: PUSH
43157: LD_STRING 
43159: ST_TO_ADDR
// if agressivity = 0 then
43160: LD_VAR 0 1
43164: PUSH
43165: LD_INT 0
43167: EQUAL
43168: IFFALSE 43180
// hc_agressivity := 0 else
43170: LD_ADDR_OWVAR 35
43174: PUSH
43175: LD_INT 0
43177: ST_TO_ADDR
43178: GO 43201
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43180: LD_ADDR_OWVAR 35
43184: PUSH
43185: LD_VAR 0 1
43189: NEG
43190: PPUSH
43191: LD_VAR 0 1
43195: PPUSH
43196: CALL_OW 12
43200: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43201: LD_ADDR_OWVAR 31
43205: PUSH
43206: LD_INT 0
43208: PPUSH
43209: LD_INT 3
43211: PPUSH
43212: CALL_OW 12
43216: PUSH
43217: LD_INT 0
43219: PPUSH
43220: LD_INT 3
43222: PPUSH
43223: CALL_OW 12
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// end ;
43240: LD_VAR 0 2
43244: RET
// export function PrepareTiger ( agressivity ) ; begin
43245: LD_INT 0
43247: PPUSH
// uc_side := 0 ;
43248: LD_ADDR_OWVAR 20
43252: PUSH
43253: LD_INT 0
43255: ST_TO_ADDR
// uc_nation := 0 ;
43256: LD_ADDR_OWVAR 21
43260: PUSH
43261: LD_INT 0
43263: ST_TO_ADDR
// hc_class := class_tiger ;
43264: LD_ADDR_OWVAR 28
43268: PUSH
43269: LD_INT 14
43271: ST_TO_ADDR
// hc_gallery :=  ;
43272: LD_ADDR_OWVAR 33
43276: PUSH
43277: LD_STRING 
43279: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43280: LD_ADDR_OWVAR 35
43284: PUSH
43285: LD_VAR 0 1
43289: NEG
43290: PPUSH
43291: LD_VAR 0 1
43295: PPUSH
43296: CALL_OW 12
43300: ST_TO_ADDR
// end ;
43301: LD_VAR 0 2
43305: RET
// export function PrepareEnchidna ( ) ; begin
43306: LD_INT 0
43308: PPUSH
// uc_side := 0 ;
43309: LD_ADDR_OWVAR 20
43313: PUSH
43314: LD_INT 0
43316: ST_TO_ADDR
// uc_nation := 0 ;
43317: LD_ADDR_OWVAR 21
43321: PUSH
43322: LD_INT 0
43324: ST_TO_ADDR
// hc_class := class_baggie ;
43325: LD_ADDR_OWVAR 28
43329: PUSH
43330: LD_INT 13
43332: ST_TO_ADDR
// hc_gallery :=  ;
43333: LD_ADDR_OWVAR 33
43337: PUSH
43338: LD_STRING 
43340: ST_TO_ADDR
// end ;
43341: LD_VAR 0 1
43345: RET
// export function PrepareFrog ( ) ; begin
43346: LD_INT 0
43348: PPUSH
// uc_side := 0 ;
43349: LD_ADDR_OWVAR 20
43353: PUSH
43354: LD_INT 0
43356: ST_TO_ADDR
// uc_nation := 0 ;
43357: LD_ADDR_OWVAR 21
43361: PUSH
43362: LD_INT 0
43364: ST_TO_ADDR
// hc_class := class_frog ;
43365: LD_ADDR_OWVAR 28
43369: PUSH
43370: LD_INT 19
43372: ST_TO_ADDR
// hc_gallery :=  ;
43373: LD_ADDR_OWVAR 33
43377: PUSH
43378: LD_STRING 
43380: ST_TO_ADDR
// end ;
43381: LD_VAR 0 1
43385: RET
// export function PrepareFish ( ) ; begin
43386: LD_INT 0
43388: PPUSH
// uc_side := 0 ;
43389: LD_ADDR_OWVAR 20
43393: PUSH
43394: LD_INT 0
43396: ST_TO_ADDR
// uc_nation := 0 ;
43397: LD_ADDR_OWVAR 21
43401: PUSH
43402: LD_INT 0
43404: ST_TO_ADDR
// hc_class := class_fish ;
43405: LD_ADDR_OWVAR 28
43409: PUSH
43410: LD_INT 20
43412: ST_TO_ADDR
// hc_gallery :=  ;
43413: LD_ADDR_OWVAR 33
43417: PUSH
43418: LD_STRING 
43420: ST_TO_ADDR
// end ;
43421: LD_VAR 0 1
43425: RET
// export function PrepareBird ( ) ; begin
43426: LD_INT 0
43428: PPUSH
// uc_side := 0 ;
43429: LD_ADDR_OWVAR 20
43433: PUSH
43434: LD_INT 0
43436: ST_TO_ADDR
// uc_nation := 0 ;
43437: LD_ADDR_OWVAR 21
43441: PUSH
43442: LD_INT 0
43444: ST_TO_ADDR
// hc_class := class_phororhacos ;
43445: LD_ADDR_OWVAR 28
43449: PUSH
43450: LD_INT 18
43452: ST_TO_ADDR
// hc_gallery :=  ;
43453: LD_ADDR_OWVAR 33
43457: PUSH
43458: LD_STRING 
43460: ST_TO_ADDR
// end ;
43461: LD_VAR 0 1
43465: RET
// export function PrepareHorse ( ) ; begin
43466: LD_INT 0
43468: PPUSH
// uc_side := 0 ;
43469: LD_ADDR_OWVAR 20
43473: PUSH
43474: LD_INT 0
43476: ST_TO_ADDR
// uc_nation := 0 ;
43477: LD_ADDR_OWVAR 21
43481: PUSH
43482: LD_INT 0
43484: ST_TO_ADDR
// hc_class := class_horse ;
43485: LD_ADDR_OWVAR 28
43489: PUSH
43490: LD_INT 21
43492: ST_TO_ADDR
// hc_gallery :=  ;
43493: LD_ADDR_OWVAR 33
43497: PUSH
43498: LD_STRING 
43500: ST_TO_ADDR
// end ;
43501: LD_VAR 0 1
43505: RET
// export function PrepareMastodont ( ) ; begin
43506: LD_INT 0
43508: PPUSH
// uc_side := 0 ;
43509: LD_ADDR_OWVAR 20
43513: PUSH
43514: LD_INT 0
43516: ST_TO_ADDR
// uc_nation := 0 ;
43517: LD_ADDR_OWVAR 21
43521: PUSH
43522: LD_INT 0
43524: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43525: LD_ADDR_OWVAR 37
43529: PUSH
43530: LD_INT 31
43532: ST_TO_ADDR
// vc_control := control_rider ;
43533: LD_ADDR_OWVAR 38
43537: PUSH
43538: LD_INT 4
43540: ST_TO_ADDR
// end ;
43541: LD_VAR 0 1
43545: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43546: LD_INT 0
43548: PPUSH
43549: PPUSH
43550: PPUSH
// uc_side = 0 ;
43551: LD_ADDR_OWVAR 20
43555: PUSH
43556: LD_INT 0
43558: ST_TO_ADDR
// uc_nation = 0 ;
43559: LD_ADDR_OWVAR 21
43563: PUSH
43564: LD_INT 0
43566: ST_TO_ADDR
// InitHc_All ( ) ;
43567: CALL_OW 584
// InitVc ;
43571: CALL_OW 20
// if mastodonts then
43575: LD_VAR 0 6
43579: IFFALSE 43646
// for i = 1 to mastodonts do
43581: LD_ADDR_VAR 0 11
43585: PUSH
43586: DOUBLE
43587: LD_INT 1
43589: DEC
43590: ST_TO_ADDR
43591: LD_VAR 0 6
43595: PUSH
43596: FOR_TO
43597: IFFALSE 43644
// begin vc_chassis := 31 ;
43599: LD_ADDR_OWVAR 37
43603: PUSH
43604: LD_INT 31
43606: ST_TO_ADDR
// vc_control := control_rider ;
43607: LD_ADDR_OWVAR 38
43611: PUSH
43612: LD_INT 4
43614: ST_TO_ADDR
// animal := CreateVehicle ;
43615: LD_ADDR_VAR 0 12
43619: PUSH
43620: CALL_OW 45
43624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43625: LD_VAR 0 12
43629: PPUSH
43630: LD_VAR 0 8
43634: PPUSH
43635: LD_INT 0
43637: PPUSH
43638: CALL 45774 0 3
// end ;
43642: GO 43596
43644: POP
43645: POP
// if horses then
43646: LD_VAR 0 5
43650: IFFALSE 43717
// for i = 1 to horses do
43652: LD_ADDR_VAR 0 11
43656: PUSH
43657: DOUBLE
43658: LD_INT 1
43660: DEC
43661: ST_TO_ADDR
43662: LD_VAR 0 5
43666: PUSH
43667: FOR_TO
43668: IFFALSE 43715
// begin hc_class := 21 ;
43670: LD_ADDR_OWVAR 28
43674: PUSH
43675: LD_INT 21
43677: ST_TO_ADDR
// hc_gallery :=  ;
43678: LD_ADDR_OWVAR 33
43682: PUSH
43683: LD_STRING 
43685: ST_TO_ADDR
// animal := CreateHuman ;
43686: LD_ADDR_VAR 0 12
43690: PUSH
43691: CALL_OW 44
43695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43696: LD_VAR 0 12
43700: PPUSH
43701: LD_VAR 0 8
43705: PPUSH
43706: LD_INT 0
43708: PPUSH
43709: CALL 45774 0 3
// end ;
43713: GO 43667
43715: POP
43716: POP
// if birds then
43717: LD_VAR 0 1
43721: IFFALSE 43788
// for i = 1 to birds do
43723: LD_ADDR_VAR 0 11
43727: PUSH
43728: DOUBLE
43729: LD_INT 1
43731: DEC
43732: ST_TO_ADDR
43733: LD_VAR 0 1
43737: PUSH
43738: FOR_TO
43739: IFFALSE 43786
// begin hc_class := 18 ;
43741: LD_ADDR_OWVAR 28
43745: PUSH
43746: LD_INT 18
43748: ST_TO_ADDR
// hc_gallery =  ;
43749: LD_ADDR_OWVAR 33
43753: PUSH
43754: LD_STRING 
43756: ST_TO_ADDR
// animal := CreateHuman ;
43757: LD_ADDR_VAR 0 12
43761: PUSH
43762: CALL_OW 44
43766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43767: LD_VAR 0 12
43771: PPUSH
43772: LD_VAR 0 8
43776: PPUSH
43777: LD_INT 0
43779: PPUSH
43780: CALL 45774 0 3
// end ;
43784: GO 43738
43786: POP
43787: POP
// if tigers then
43788: LD_VAR 0 2
43792: IFFALSE 43876
// for i = 1 to tigers do
43794: LD_ADDR_VAR 0 11
43798: PUSH
43799: DOUBLE
43800: LD_INT 1
43802: DEC
43803: ST_TO_ADDR
43804: LD_VAR 0 2
43808: PUSH
43809: FOR_TO
43810: IFFALSE 43874
// begin hc_class = class_tiger ;
43812: LD_ADDR_OWVAR 28
43816: PUSH
43817: LD_INT 14
43819: ST_TO_ADDR
// hc_gallery =  ;
43820: LD_ADDR_OWVAR 33
43824: PUSH
43825: LD_STRING 
43827: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43828: LD_ADDR_OWVAR 35
43832: PUSH
43833: LD_INT 7
43835: NEG
43836: PPUSH
43837: LD_INT 7
43839: PPUSH
43840: CALL_OW 12
43844: ST_TO_ADDR
// animal := CreateHuman ;
43845: LD_ADDR_VAR 0 12
43849: PUSH
43850: CALL_OW 44
43854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43855: LD_VAR 0 12
43859: PPUSH
43860: LD_VAR 0 8
43864: PPUSH
43865: LD_INT 0
43867: PPUSH
43868: CALL 45774 0 3
// end ;
43872: GO 43809
43874: POP
43875: POP
// if apemans then
43876: LD_VAR 0 3
43880: IFFALSE 44003
// for i = 1 to apemans do
43882: LD_ADDR_VAR 0 11
43886: PUSH
43887: DOUBLE
43888: LD_INT 1
43890: DEC
43891: ST_TO_ADDR
43892: LD_VAR 0 3
43896: PUSH
43897: FOR_TO
43898: IFFALSE 44001
// begin hc_class = class_apeman ;
43900: LD_ADDR_OWVAR 28
43904: PUSH
43905: LD_INT 12
43907: ST_TO_ADDR
// hc_gallery =  ;
43908: LD_ADDR_OWVAR 33
43912: PUSH
43913: LD_STRING 
43915: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43916: LD_ADDR_OWVAR 35
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PPUSH
43925: LD_INT 2
43927: PPUSH
43928: CALL_OW 12
43932: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43933: LD_ADDR_OWVAR 31
43937: PUSH
43938: LD_INT 1
43940: PPUSH
43941: LD_INT 3
43943: PPUSH
43944: CALL_OW 12
43948: PUSH
43949: LD_INT 1
43951: PPUSH
43952: LD_INT 3
43954: PPUSH
43955: CALL_OW 12
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
// animal := CreateHuman ;
43972: LD_ADDR_VAR 0 12
43976: PUSH
43977: CALL_OW 44
43981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43982: LD_VAR 0 12
43986: PPUSH
43987: LD_VAR 0 8
43991: PPUSH
43992: LD_INT 0
43994: PPUSH
43995: CALL 45774 0 3
// end ;
43999: GO 43897
44001: POP
44002: POP
// if enchidnas then
44003: LD_VAR 0 4
44007: IFFALSE 44074
// for i = 1 to enchidnas do
44009: LD_ADDR_VAR 0 11
44013: PUSH
44014: DOUBLE
44015: LD_INT 1
44017: DEC
44018: ST_TO_ADDR
44019: LD_VAR 0 4
44023: PUSH
44024: FOR_TO
44025: IFFALSE 44072
// begin hc_class = 13 ;
44027: LD_ADDR_OWVAR 28
44031: PUSH
44032: LD_INT 13
44034: ST_TO_ADDR
// hc_gallery =  ;
44035: LD_ADDR_OWVAR 33
44039: PUSH
44040: LD_STRING 
44042: ST_TO_ADDR
// animal := CreateHuman ;
44043: LD_ADDR_VAR 0 12
44047: PUSH
44048: CALL_OW 44
44052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44053: LD_VAR 0 12
44057: PPUSH
44058: LD_VAR 0 8
44062: PPUSH
44063: LD_INT 0
44065: PPUSH
44066: CALL 45774 0 3
// end ;
44070: GO 44024
44072: POP
44073: POP
// if fishes then
44074: LD_VAR 0 7
44078: IFFALSE 44145
// for i = 1 to fishes do
44080: LD_ADDR_VAR 0 11
44084: PUSH
44085: DOUBLE
44086: LD_INT 1
44088: DEC
44089: ST_TO_ADDR
44090: LD_VAR 0 7
44094: PUSH
44095: FOR_TO
44096: IFFALSE 44143
// begin hc_class = 20 ;
44098: LD_ADDR_OWVAR 28
44102: PUSH
44103: LD_INT 20
44105: ST_TO_ADDR
// hc_gallery =  ;
44106: LD_ADDR_OWVAR 33
44110: PUSH
44111: LD_STRING 
44113: ST_TO_ADDR
// animal := CreateHuman ;
44114: LD_ADDR_VAR 0 12
44118: PUSH
44119: CALL_OW 44
44123: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44124: LD_VAR 0 12
44128: PPUSH
44129: LD_VAR 0 9
44133: PPUSH
44134: LD_INT 0
44136: PPUSH
44137: CALL 45774 0 3
// end ;
44141: GO 44095
44143: POP
44144: POP
// end ;
44145: LD_VAR 0 10
44149: RET
// export function WantHeal ( sci , unit ) ; begin
44150: LD_INT 0
44152: PPUSH
// if GetTaskList ( sci ) > 0 then
44153: LD_VAR 0 1
44157: PPUSH
44158: CALL_OW 437
44162: PUSH
44163: LD_INT 0
44165: GREATER
44166: IFFALSE 44236
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44168: LD_VAR 0 1
44172: PPUSH
44173: CALL_OW 437
44177: PUSH
44178: LD_INT 1
44180: ARRAY
44181: PUSH
44182: LD_INT 1
44184: ARRAY
44185: PUSH
44186: LD_STRING l
44188: EQUAL
44189: PUSH
44190: LD_VAR 0 1
44194: PPUSH
44195: CALL_OW 437
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PUSH
44204: LD_INT 4
44206: ARRAY
44207: PUSH
44208: LD_VAR 0 2
44212: EQUAL
44213: AND
44214: IFFALSE 44226
// result := true else
44216: LD_ADDR_VAR 0 3
44220: PUSH
44221: LD_INT 1
44223: ST_TO_ADDR
44224: GO 44234
// result := false ;
44226: LD_ADDR_VAR 0 3
44230: PUSH
44231: LD_INT 0
44233: ST_TO_ADDR
// end else
44234: GO 44244
// result := false ;
44236: LD_ADDR_VAR 0 3
44240: PUSH
44241: LD_INT 0
44243: ST_TO_ADDR
// end ;
44244: LD_VAR 0 3
44248: RET
// export function HealTarget ( sci ) ; begin
44249: LD_INT 0
44251: PPUSH
// if not sci then
44252: LD_VAR 0 1
44256: NOT
44257: IFFALSE 44261
// exit ;
44259: GO 44326
// result := 0 ;
44261: LD_ADDR_VAR 0 2
44265: PUSH
44266: LD_INT 0
44268: ST_TO_ADDR
// if GetTaskList ( sci ) then
44269: LD_VAR 0 1
44273: PPUSH
44274: CALL_OW 437
44278: IFFALSE 44326
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44280: LD_VAR 0 1
44284: PPUSH
44285: CALL_OW 437
44289: PUSH
44290: LD_INT 1
44292: ARRAY
44293: PUSH
44294: LD_INT 1
44296: ARRAY
44297: PUSH
44298: LD_STRING l
44300: EQUAL
44301: IFFALSE 44326
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44303: LD_ADDR_VAR 0 2
44307: PUSH
44308: LD_VAR 0 1
44312: PPUSH
44313: CALL_OW 437
44317: PUSH
44318: LD_INT 1
44320: ARRAY
44321: PUSH
44322: LD_INT 4
44324: ARRAY
44325: ST_TO_ADDR
// end ;
44326: LD_VAR 0 2
44330: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44331: LD_INT 0
44333: PPUSH
44334: PPUSH
44335: PPUSH
44336: PPUSH
// if not base_units then
44337: LD_VAR 0 1
44341: NOT
44342: IFFALSE 44346
// exit ;
44344: GO 44433
// result := false ;
44346: LD_ADDR_VAR 0 2
44350: PUSH
44351: LD_INT 0
44353: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44354: LD_ADDR_VAR 0 5
44358: PUSH
44359: LD_VAR 0 1
44363: PPUSH
44364: LD_INT 21
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PPUSH
44374: CALL_OW 72
44378: ST_TO_ADDR
// if not tmp then
44379: LD_VAR 0 5
44383: NOT
44384: IFFALSE 44388
// exit ;
44386: GO 44433
// for i in tmp do
44388: LD_ADDR_VAR 0 3
44392: PUSH
44393: LD_VAR 0 5
44397: PUSH
44398: FOR_IN
44399: IFFALSE 44431
// begin result := EnemyInRange ( i , 22 ) ;
44401: LD_ADDR_VAR 0 2
44405: PUSH
44406: LD_VAR 0 3
44410: PPUSH
44411: LD_INT 22
44413: PPUSH
44414: CALL 42011 0 2
44418: ST_TO_ADDR
// if result then
44419: LD_VAR 0 2
44423: IFFALSE 44429
// exit ;
44425: POP
44426: POP
44427: GO 44433
// end ;
44429: GO 44398
44431: POP
44432: POP
// end ;
44433: LD_VAR 0 2
44437: RET
// export function FilterByTag ( units , tag ) ; begin
44438: LD_INT 0
44440: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44441: LD_ADDR_VAR 0 3
44445: PUSH
44446: LD_VAR 0 1
44450: PPUSH
44451: LD_INT 120
44453: PUSH
44454: LD_VAR 0 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PPUSH
44463: CALL_OW 72
44467: ST_TO_ADDR
// end ;
44468: LD_VAR 0 3
44472: RET
// export function IsDriver ( un ) ; begin
44473: LD_INT 0
44475: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44476: LD_ADDR_VAR 0 2
44480: PUSH
44481: LD_VAR 0 1
44485: PUSH
44486: LD_INT 55
44488: PUSH
44489: EMPTY
44490: LIST
44491: PPUSH
44492: CALL_OW 69
44496: IN
44497: ST_TO_ADDR
// end ;
44498: LD_VAR 0 2
44502: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44503: LD_INT 0
44505: PPUSH
44506: PPUSH
// list := [ ] ;
44507: LD_ADDR_VAR 0 5
44511: PUSH
44512: EMPTY
44513: ST_TO_ADDR
// case d of 0 :
44514: LD_VAR 0 3
44518: PUSH
44519: LD_INT 0
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44660
44527: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44528: LD_ADDR_VAR 0 5
44532: PUSH
44533: LD_VAR 0 1
44537: PUSH
44538: LD_INT 4
44540: MINUS
44541: PUSH
44542: LD_VAR 0 2
44546: PUSH
44547: LD_INT 4
44549: MINUS
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: LIST
44558: PUSH
44559: LD_VAR 0 1
44563: PUSH
44564: LD_INT 3
44566: MINUS
44567: PUSH
44568: LD_VAR 0 2
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: PUSH
44581: LD_VAR 0 1
44585: PUSH
44586: LD_INT 4
44588: PLUS
44589: PUSH
44590: LD_VAR 0 2
44594: PUSH
44595: LD_INT 4
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: PUSH
44603: LD_VAR 0 1
44607: PUSH
44608: LD_INT 3
44610: PLUS
44611: PUSH
44612: LD_VAR 0 2
44616: PUSH
44617: LD_INT 3
44619: PLUS
44620: PUSH
44621: LD_INT 5
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: PUSH
44629: LD_VAR 0 1
44633: PUSH
44634: LD_VAR 0 2
44638: PUSH
44639: LD_INT 4
44641: PLUS
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// end ; 1 :
44658: GO 45358
44660: LD_INT 1
44662: DOUBLE
44663: EQUAL
44664: IFTRUE 44668
44666: GO 44801
44668: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44669: LD_ADDR_VAR 0 5
44673: PUSH
44674: LD_VAR 0 1
44678: PUSH
44679: LD_VAR 0 2
44683: PUSH
44684: LD_INT 4
44686: MINUS
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: PUSH
44696: LD_VAR 0 1
44700: PUSH
44701: LD_INT 3
44703: MINUS
44704: PUSH
44705: LD_VAR 0 2
44709: PUSH
44710: LD_INT 3
44712: MINUS
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: PUSH
44722: LD_VAR 0 1
44726: PUSH
44727: LD_INT 4
44729: MINUS
44730: PUSH
44731: LD_VAR 0 2
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: PUSH
44744: LD_VAR 0 1
44748: PUSH
44749: LD_VAR 0 2
44753: PUSH
44754: LD_INT 3
44756: PLUS
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: PUSH
44766: LD_VAR 0 1
44770: PUSH
44771: LD_INT 4
44773: PLUS
44774: PUSH
44775: LD_VAR 0 2
44779: PUSH
44780: LD_INT 4
44782: PLUS
44783: PUSH
44784: LD_INT 5
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// end ; 2 :
44799: GO 45358
44801: LD_INT 2
44803: DOUBLE
44804: EQUAL
44805: IFTRUE 44809
44807: GO 44938
44809: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44810: LD_ADDR_VAR 0 5
44814: PUSH
44815: LD_VAR 0 1
44819: PUSH
44820: LD_VAR 0 2
44824: PUSH
44825: LD_INT 3
44827: MINUS
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: PUSH
44837: LD_VAR 0 1
44841: PUSH
44842: LD_INT 4
44844: PLUS
44845: PUSH
44846: LD_VAR 0 2
44850: PUSH
44851: LD_INT 4
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: PUSH
44859: LD_VAR 0 1
44863: PUSH
44864: LD_VAR 0 2
44868: PUSH
44869: LD_INT 4
44871: PLUS
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: PUSH
44881: LD_VAR 0 1
44885: PUSH
44886: LD_INT 3
44888: MINUS
44889: PUSH
44890: LD_VAR 0 2
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: PUSH
44903: LD_VAR 0 1
44907: PUSH
44908: LD_INT 4
44910: MINUS
44911: PUSH
44912: LD_VAR 0 2
44916: PUSH
44917: LD_INT 4
44919: MINUS
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// end ; 3 :
44936: GO 45358
44938: LD_INT 3
44940: DOUBLE
44941: EQUAL
44942: IFTRUE 44946
44944: GO 45079
44946: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44947: LD_ADDR_VAR 0 5
44951: PUSH
44952: LD_VAR 0 1
44956: PUSH
44957: LD_INT 3
44959: PLUS
44960: PUSH
44961: LD_VAR 0 2
44965: PUSH
44966: LD_INT 4
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: PUSH
44974: LD_VAR 0 1
44978: PUSH
44979: LD_INT 4
44981: PLUS
44982: PUSH
44983: LD_VAR 0 2
44987: PUSH
44988: LD_INT 4
44990: PLUS
44991: PUSH
44992: LD_INT 5
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: PUSH
45000: LD_VAR 0 1
45004: PUSH
45005: LD_INT 4
45007: MINUS
45008: PUSH
45009: LD_VAR 0 2
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: PUSH
45022: LD_VAR 0 1
45026: PUSH
45027: LD_VAR 0 2
45031: PUSH
45032: LD_INT 4
45034: MINUS
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: PUSH
45044: LD_VAR 0 1
45048: PUSH
45049: LD_INT 3
45051: MINUS
45052: PUSH
45053: LD_VAR 0 2
45057: PUSH
45058: LD_INT 3
45060: MINUS
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: ST_TO_ADDR
// end ; 4 :
45077: GO 45358
45079: LD_INT 4
45081: DOUBLE
45082: EQUAL
45083: IFTRUE 45087
45085: GO 45220
45087: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45088: LD_ADDR_VAR 0 5
45092: PUSH
45093: LD_VAR 0 1
45097: PUSH
45098: LD_VAR 0 2
45102: PUSH
45103: LD_INT 4
45105: PLUS
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: PUSH
45115: LD_VAR 0 1
45119: PUSH
45120: LD_INT 3
45122: PLUS
45123: PUSH
45124: LD_VAR 0 2
45128: PUSH
45129: LD_INT 3
45131: PLUS
45132: PUSH
45133: LD_INT 5
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: PUSH
45141: LD_VAR 0 1
45145: PUSH
45146: LD_INT 4
45148: PLUS
45149: PUSH
45150: LD_VAR 0 2
45154: PUSH
45155: LD_INT 4
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: PUSH
45163: LD_VAR 0 1
45167: PUSH
45168: LD_VAR 0 2
45172: PUSH
45173: LD_INT 3
45175: MINUS
45176: PUSH
45177: LD_INT 3
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: PUSH
45185: LD_VAR 0 1
45189: PUSH
45190: LD_INT 4
45192: MINUS
45193: PUSH
45194: LD_VAR 0 2
45198: PUSH
45199: LD_INT 4
45201: MINUS
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// end ; 5 :
45218: GO 45358
45220: LD_INT 5
45222: DOUBLE
45223: EQUAL
45224: IFTRUE 45228
45226: GO 45357
45228: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45229: LD_ADDR_VAR 0 5
45233: PUSH
45234: LD_VAR 0 1
45238: PUSH
45239: LD_INT 4
45241: MINUS
45242: PUSH
45243: LD_VAR 0 2
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: PUSH
45256: LD_VAR 0 1
45260: PUSH
45261: LD_VAR 0 2
45265: PUSH
45266: LD_INT 4
45268: MINUS
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: PUSH
45278: LD_VAR 0 1
45282: PUSH
45283: LD_INT 4
45285: PLUS
45286: PUSH
45287: LD_VAR 0 2
45291: PUSH
45292: LD_INT 4
45294: PLUS
45295: PUSH
45296: LD_INT 5
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: PUSH
45304: LD_VAR 0 1
45308: PUSH
45309: LD_INT 3
45311: PLUS
45312: PUSH
45313: LD_VAR 0 2
45317: PUSH
45318: LD_INT 4
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PUSH
45326: LD_VAR 0 1
45330: PUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_INT 3
45338: PLUS
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// end ; end ;
45355: GO 45358
45357: POP
// result := list ;
45358: LD_ADDR_VAR 0 4
45362: PUSH
45363: LD_VAR 0 5
45367: ST_TO_ADDR
// end ;
45368: LD_VAR 0 4
45372: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45373: LD_INT 0
45375: PPUSH
45376: PPUSH
45377: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45378: LD_VAR 0 1
45382: NOT
45383: PUSH
45384: LD_VAR 0 2
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 4
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: IN
45407: NOT
45408: OR
45409: IFFALSE 45413
// exit ;
45411: GO 45496
// tmp := [ ] ;
45413: LD_ADDR_VAR 0 5
45417: PUSH
45418: EMPTY
45419: ST_TO_ADDR
// for i in units do
45420: LD_ADDR_VAR 0 4
45424: PUSH
45425: LD_VAR 0 1
45429: PUSH
45430: FOR_IN
45431: IFFALSE 45465
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45433: LD_ADDR_VAR 0 5
45437: PUSH
45438: LD_VAR 0 5
45442: PPUSH
45443: LD_VAR 0 4
45447: PPUSH
45448: LD_VAR 0 2
45452: PPUSH
45453: CALL_OW 259
45457: PPUSH
45458: CALL 46869 0 2
45462: ST_TO_ADDR
45463: GO 45430
45465: POP
45466: POP
// if not tmp then
45467: LD_VAR 0 5
45471: NOT
45472: IFFALSE 45476
// exit ;
45474: GO 45496
// result := SortListByListDesc ( units , tmp ) ;
45476: LD_ADDR_VAR 0 3
45480: PUSH
45481: LD_VAR 0 1
45485: PPUSH
45486: LD_VAR 0 5
45490: PPUSH
45491: CALL_OW 77
45495: ST_TO_ADDR
// end ;
45496: LD_VAR 0 3
45500: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45501: LD_INT 0
45503: PPUSH
45504: PPUSH
45505: PPUSH
// result := false ;
45506: LD_ADDR_VAR 0 3
45510: PUSH
45511: LD_INT 0
45513: ST_TO_ADDR
// if not building then
45514: LD_VAR 0 2
45518: NOT
45519: IFFALSE 45523
// exit ;
45521: GO 45661
// x := GetX ( building ) ;
45523: LD_ADDR_VAR 0 4
45527: PUSH
45528: LD_VAR 0 2
45532: PPUSH
45533: CALL_OW 250
45537: ST_TO_ADDR
// y := GetY ( building ) ;
45538: LD_ADDR_VAR 0 5
45542: PUSH
45543: LD_VAR 0 2
45547: PPUSH
45548: CALL_OW 251
45552: ST_TO_ADDR
// if not x or not y then
45553: LD_VAR 0 4
45557: NOT
45558: PUSH
45559: LD_VAR 0 5
45563: NOT
45564: OR
45565: IFFALSE 45569
// exit ;
45567: GO 45661
// if GetTaskList ( unit ) then
45569: LD_VAR 0 1
45573: PPUSH
45574: CALL_OW 437
45578: IFFALSE 45661
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45580: LD_STRING e
45582: PUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: CALL_OW 437
45592: PUSH
45593: LD_INT 1
45595: ARRAY
45596: PUSH
45597: LD_INT 1
45599: ARRAY
45600: EQUAL
45601: PUSH
45602: LD_VAR 0 4
45606: PUSH
45607: LD_VAR 0 1
45611: PPUSH
45612: CALL_OW 437
45616: PUSH
45617: LD_INT 1
45619: ARRAY
45620: PUSH
45621: LD_INT 2
45623: ARRAY
45624: EQUAL
45625: AND
45626: PUSH
45627: LD_VAR 0 5
45631: PUSH
45632: LD_VAR 0 1
45636: PPUSH
45637: CALL_OW 437
45641: PUSH
45642: LD_INT 1
45644: ARRAY
45645: PUSH
45646: LD_INT 3
45648: ARRAY
45649: EQUAL
45650: AND
45651: IFFALSE 45661
// result := true end ;
45653: LD_ADDR_VAR 0 3
45657: PUSH
45658: LD_INT 1
45660: ST_TO_ADDR
// end ;
45661: LD_VAR 0 3
45665: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45666: LD_INT 0
45668: PPUSH
// result := false ;
45669: LD_ADDR_VAR 0 4
45673: PUSH
45674: LD_INT 0
45676: ST_TO_ADDR
// if GetTaskList ( unit ) then
45677: LD_VAR 0 1
45681: PPUSH
45682: CALL_OW 437
45686: IFFALSE 45769
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45688: LD_STRING M
45690: PUSH
45691: LD_VAR 0 1
45695: PPUSH
45696: CALL_OW 437
45700: PUSH
45701: LD_INT 1
45703: ARRAY
45704: PUSH
45705: LD_INT 1
45707: ARRAY
45708: EQUAL
45709: PUSH
45710: LD_VAR 0 2
45714: PUSH
45715: LD_VAR 0 1
45719: PPUSH
45720: CALL_OW 437
45724: PUSH
45725: LD_INT 1
45727: ARRAY
45728: PUSH
45729: LD_INT 2
45731: ARRAY
45732: EQUAL
45733: AND
45734: PUSH
45735: LD_VAR 0 3
45739: PUSH
45740: LD_VAR 0 1
45744: PPUSH
45745: CALL_OW 437
45749: PUSH
45750: LD_INT 1
45752: ARRAY
45753: PUSH
45754: LD_INT 3
45756: ARRAY
45757: EQUAL
45758: AND
45759: IFFALSE 45769
// result := true ;
45761: LD_ADDR_VAR 0 4
45765: PUSH
45766: LD_INT 1
45768: ST_TO_ADDR
// end ; end ;
45769: LD_VAR 0 4
45773: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45774: LD_INT 0
45776: PPUSH
45777: PPUSH
45778: PPUSH
45779: PPUSH
// if not unit or not area then
45780: LD_VAR 0 1
45784: NOT
45785: PUSH
45786: LD_VAR 0 2
45790: NOT
45791: OR
45792: IFFALSE 45796
// exit ;
45794: GO 45972
// tmp := AreaToList ( area , i ) ;
45796: LD_ADDR_VAR 0 6
45800: PUSH
45801: LD_VAR 0 2
45805: PPUSH
45806: LD_VAR 0 5
45810: PPUSH
45811: CALL_OW 517
45815: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45816: LD_ADDR_VAR 0 5
45820: PUSH
45821: DOUBLE
45822: LD_INT 1
45824: DEC
45825: ST_TO_ADDR
45826: LD_VAR 0 6
45830: PUSH
45831: LD_INT 1
45833: ARRAY
45834: PUSH
45835: FOR_TO
45836: IFFALSE 45970
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45838: LD_ADDR_VAR 0 7
45842: PUSH
45843: LD_VAR 0 6
45847: PUSH
45848: LD_INT 1
45850: ARRAY
45851: PUSH
45852: LD_VAR 0 5
45856: ARRAY
45857: PUSH
45858: LD_VAR 0 6
45862: PUSH
45863: LD_INT 2
45865: ARRAY
45866: PUSH
45867: LD_VAR 0 5
45871: ARRAY
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45877: LD_INT 92
45879: PUSH
45880: LD_VAR 0 7
45884: PUSH
45885: LD_INT 1
45887: ARRAY
45888: PUSH
45889: LD_VAR 0 7
45893: PUSH
45894: LD_INT 2
45896: ARRAY
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: PPUSH
45907: CALL_OW 69
45911: PUSH
45912: LD_INT 0
45914: EQUAL
45915: IFFALSE 45968
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45917: LD_VAR 0 1
45921: PPUSH
45922: LD_VAR 0 7
45926: PUSH
45927: LD_INT 1
45929: ARRAY
45930: PPUSH
45931: LD_VAR 0 7
45935: PUSH
45936: LD_INT 2
45938: ARRAY
45939: PPUSH
45940: LD_VAR 0 3
45944: PPUSH
45945: CALL_OW 48
// result := IsPlaced ( unit ) ;
45949: LD_ADDR_VAR 0 4
45953: PUSH
45954: LD_VAR 0 1
45958: PPUSH
45959: CALL_OW 305
45963: ST_TO_ADDR
// exit ;
45964: POP
45965: POP
45966: GO 45972
// end ; end ;
45968: GO 45835
45970: POP
45971: POP
// end ;
45972: LD_VAR 0 4
45976: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45977: LD_INT 0
45979: PPUSH
45980: PPUSH
45981: PPUSH
// if not side or side > 8 then
45982: LD_VAR 0 1
45986: NOT
45987: PUSH
45988: LD_VAR 0 1
45992: PUSH
45993: LD_INT 8
45995: GREATER
45996: OR
45997: IFFALSE 46001
// exit ;
45999: GO 46188
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46001: LD_ADDR_VAR 0 4
46005: PUSH
46006: LD_INT 22
46008: PUSH
46009: LD_VAR 0 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 21
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PPUSH
46032: CALL_OW 69
46036: ST_TO_ADDR
// if not tmp then
46037: LD_VAR 0 4
46041: NOT
46042: IFFALSE 46046
// exit ;
46044: GO 46188
// enable_addtolog := true ;
46046: LD_ADDR_OWVAR 81
46050: PUSH
46051: LD_INT 1
46053: ST_TO_ADDR
// AddToLog ( [ ) ;
46054: LD_STRING [
46056: PPUSH
46057: CALL_OW 561
// for i in tmp do
46061: LD_ADDR_VAR 0 3
46065: PUSH
46066: LD_VAR 0 4
46070: PUSH
46071: FOR_IN
46072: IFFALSE 46179
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46074: LD_STRING [
46076: PUSH
46077: LD_VAR 0 3
46081: PPUSH
46082: CALL_OW 266
46086: STR
46087: PUSH
46088: LD_STRING , 
46090: STR
46091: PUSH
46092: LD_VAR 0 3
46096: PPUSH
46097: CALL_OW 250
46101: STR
46102: PUSH
46103: LD_STRING , 
46105: STR
46106: PUSH
46107: LD_VAR 0 3
46111: PPUSH
46112: CALL_OW 251
46116: STR
46117: PUSH
46118: LD_STRING , 
46120: STR
46121: PUSH
46122: LD_VAR 0 3
46126: PPUSH
46127: CALL_OW 254
46131: STR
46132: PUSH
46133: LD_STRING , 
46135: STR
46136: PUSH
46137: LD_VAR 0 3
46141: PPUSH
46142: LD_INT 1
46144: PPUSH
46145: CALL_OW 268
46149: STR
46150: PUSH
46151: LD_STRING , 
46153: STR
46154: PUSH
46155: LD_VAR 0 3
46159: PPUSH
46160: LD_INT 2
46162: PPUSH
46163: CALL_OW 268
46167: STR
46168: PUSH
46169: LD_STRING ],
46171: STR
46172: PPUSH
46173: CALL_OW 561
// end ;
46177: GO 46071
46179: POP
46180: POP
// AddToLog ( ]; ) ;
46181: LD_STRING ];
46183: PPUSH
46184: CALL_OW 561
// end ;
46188: LD_VAR 0 2
46192: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46193: LD_INT 0
46195: PPUSH
46196: PPUSH
46197: PPUSH
46198: PPUSH
46199: PPUSH
// if not area or not rate or not max then
46200: LD_VAR 0 1
46204: NOT
46205: PUSH
46206: LD_VAR 0 2
46210: NOT
46211: OR
46212: PUSH
46213: LD_VAR 0 4
46217: NOT
46218: OR
46219: IFFALSE 46223
// exit ;
46221: GO 46412
// while 1 do
46223: LD_INT 1
46225: IFFALSE 46412
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46227: LD_ADDR_VAR 0 9
46231: PUSH
46232: LD_VAR 0 1
46236: PPUSH
46237: LD_INT 1
46239: PPUSH
46240: CALL_OW 287
46244: PUSH
46245: LD_INT 10
46247: MUL
46248: ST_TO_ADDR
// r := rate / 10 ;
46249: LD_ADDR_VAR 0 7
46253: PUSH
46254: LD_VAR 0 2
46258: PUSH
46259: LD_INT 10
46261: DIVREAL
46262: ST_TO_ADDR
// time := 1 1$00 ;
46263: LD_ADDR_VAR 0 8
46267: PUSH
46268: LD_INT 2100
46270: ST_TO_ADDR
// if amount < min then
46271: LD_VAR 0 9
46275: PUSH
46276: LD_VAR 0 3
46280: LESS
46281: IFFALSE 46299
// r := r * 2 else
46283: LD_ADDR_VAR 0 7
46287: PUSH
46288: LD_VAR 0 7
46292: PUSH
46293: LD_INT 2
46295: MUL
46296: ST_TO_ADDR
46297: GO 46325
// if amount > max then
46299: LD_VAR 0 9
46303: PUSH
46304: LD_VAR 0 4
46308: GREATER
46309: IFFALSE 46325
// r := r / 2 ;
46311: LD_ADDR_VAR 0 7
46315: PUSH
46316: LD_VAR 0 7
46320: PUSH
46321: LD_INT 2
46323: DIVREAL
46324: ST_TO_ADDR
// time := time / r ;
46325: LD_ADDR_VAR 0 8
46329: PUSH
46330: LD_VAR 0 8
46334: PUSH
46335: LD_VAR 0 7
46339: DIVREAL
46340: ST_TO_ADDR
// if time < 0 then
46341: LD_VAR 0 8
46345: PUSH
46346: LD_INT 0
46348: LESS
46349: IFFALSE 46366
// time := time * - 1 ;
46351: LD_ADDR_VAR 0 8
46355: PUSH
46356: LD_VAR 0 8
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: MUL
46365: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46366: LD_VAR 0 8
46370: PUSH
46371: LD_INT 35
46373: PPUSH
46374: LD_INT 875
46376: PPUSH
46377: CALL_OW 12
46381: PLUS
46382: PPUSH
46383: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46387: LD_INT 1
46389: PPUSH
46390: LD_INT 5
46392: PPUSH
46393: CALL_OW 12
46397: PPUSH
46398: LD_VAR 0 1
46402: PPUSH
46403: LD_INT 1
46405: PPUSH
46406: CALL_OW 55
// end ;
46410: GO 46223
// end ;
46412: LD_VAR 0 5
46416: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46417: LD_INT 0
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
// if not turrets or not factories then
46427: LD_VAR 0 1
46431: NOT
46432: PUSH
46433: LD_VAR 0 2
46437: NOT
46438: OR
46439: IFFALSE 46443
// exit ;
46441: GO 46750
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46443: LD_ADDR_VAR 0 10
46447: PUSH
46448: LD_INT 5
46450: PUSH
46451: LD_INT 6
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 4
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: LD_INT 5
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 24
46485: PUSH
46486: LD_INT 25
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 23
46495: PUSH
46496: LD_INT 27
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 42
46509: PUSH
46510: LD_INT 43
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 44
46519: PUSH
46520: LD_INT 46
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 45
46529: PUSH
46530: LD_INT 47
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: ST_TO_ADDR
// result := [ ] ;
46547: LD_ADDR_VAR 0 3
46551: PUSH
46552: EMPTY
46553: ST_TO_ADDR
// for i in turrets do
46554: LD_ADDR_VAR 0 4
46558: PUSH
46559: LD_VAR 0 1
46563: PUSH
46564: FOR_IN
46565: IFFALSE 46748
// begin nat := GetNation ( i ) ;
46567: LD_ADDR_VAR 0 7
46571: PUSH
46572: LD_VAR 0 4
46576: PPUSH
46577: CALL_OW 248
46581: ST_TO_ADDR
// weapon := 0 ;
46582: LD_ADDR_VAR 0 8
46586: PUSH
46587: LD_INT 0
46589: ST_TO_ADDR
// if not nat then
46590: LD_VAR 0 7
46594: NOT
46595: IFFALSE 46599
// continue ;
46597: GO 46564
// for j in list [ nat ] do
46599: LD_ADDR_VAR 0 5
46603: PUSH
46604: LD_VAR 0 10
46608: PUSH
46609: LD_VAR 0 7
46613: ARRAY
46614: PUSH
46615: FOR_IN
46616: IFFALSE 46657
// if GetBWeapon ( i ) = j [ 1 ] then
46618: LD_VAR 0 4
46622: PPUSH
46623: CALL_OW 269
46627: PUSH
46628: LD_VAR 0 5
46632: PUSH
46633: LD_INT 1
46635: ARRAY
46636: EQUAL
46637: IFFALSE 46655
// begin weapon := j [ 2 ] ;
46639: LD_ADDR_VAR 0 8
46643: PUSH
46644: LD_VAR 0 5
46648: PUSH
46649: LD_INT 2
46651: ARRAY
46652: ST_TO_ADDR
// break ;
46653: GO 46657
// end ;
46655: GO 46615
46657: POP
46658: POP
// if not weapon then
46659: LD_VAR 0 8
46663: NOT
46664: IFFALSE 46668
// continue ;
46666: GO 46564
// for k in factories do
46668: LD_ADDR_VAR 0 6
46672: PUSH
46673: LD_VAR 0 2
46677: PUSH
46678: FOR_IN
46679: IFFALSE 46744
// begin weapons := AvailableWeaponList ( k ) ;
46681: LD_ADDR_VAR 0 9
46685: PUSH
46686: LD_VAR 0 6
46690: PPUSH
46691: CALL_OW 478
46695: ST_TO_ADDR
// if not weapons then
46696: LD_VAR 0 9
46700: NOT
46701: IFFALSE 46705
// continue ;
46703: GO 46678
// if weapon in weapons then
46705: LD_VAR 0 8
46709: PUSH
46710: LD_VAR 0 9
46714: IN
46715: IFFALSE 46742
// begin result := [ i , weapon ] ;
46717: LD_ADDR_VAR 0 3
46721: PUSH
46722: LD_VAR 0 4
46726: PUSH
46727: LD_VAR 0 8
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// exit ;
46736: POP
46737: POP
46738: POP
46739: POP
46740: GO 46750
// end ; end ;
46742: GO 46678
46744: POP
46745: POP
// end ;
46746: GO 46564
46748: POP
46749: POP
// end ;
46750: LD_VAR 0 3
46754: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46755: LD_INT 0
46757: PPUSH
// if not side or side > 8 then
46758: LD_VAR 0 3
46762: NOT
46763: PUSH
46764: LD_VAR 0 3
46768: PUSH
46769: LD_INT 8
46771: GREATER
46772: OR
46773: IFFALSE 46777
// exit ;
46775: GO 46836
// if not range then
46777: LD_VAR 0 4
46781: NOT
46782: IFFALSE 46793
// range := - 12 ;
46784: LD_ADDR_VAR 0 4
46788: PUSH
46789: LD_INT 12
46791: NEG
46792: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46793: LD_VAR 0 1
46797: PPUSH
46798: LD_VAR 0 2
46802: PPUSH
46803: LD_VAR 0 3
46807: PPUSH
46808: LD_VAR 0 4
46812: PPUSH
46813: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46817: LD_VAR 0 1
46821: PPUSH
46822: LD_VAR 0 2
46826: PPUSH
46827: LD_VAR 0 3
46831: PPUSH
46832: CALL_OW 331
// end ;
46836: LD_VAR 0 5
46840: RET
// export function Video ( mode ) ; begin
46841: LD_INT 0
46843: PPUSH
// ingame_video = mode ;
46844: LD_ADDR_OWVAR 52
46848: PUSH
46849: LD_VAR 0 1
46853: ST_TO_ADDR
// interface_hidden = mode ;
46854: LD_ADDR_OWVAR 54
46858: PUSH
46859: LD_VAR 0 1
46863: ST_TO_ADDR
// end ;
46864: LD_VAR 0 2
46868: RET
// export function Join ( array , element ) ; begin
46869: LD_INT 0
46871: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46872: LD_ADDR_VAR 0 3
46876: PUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: LD_VAR 0 1
46886: PUSH
46887: LD_INT 1
46889: PLUS
46890: PPUSH
46891: LD_VAR 0 2
46895: PPUSH
46896: CALL_OW 1
46900: ST_TO_ADDR
// end ;
46901: LD_VAR 0 3
46905: RET
// export function JoinUnion ( array , element ) ; begin
46906: LD_INT 0
46908: PPUSH
// result := array union element ;
46909: LD_ADDR_VAR 0 3
46913: PUSH
46914: LD_VAR 0 1
46918: PUSH
46919: LD_VAR 0 2
46923: UNION
46924: ST_TO_ADDR
// end ;
46925: LD_VAR 0 3
46929: RET
// export function GetBehemoths ( side ) ; begin
46930: LD_INT 0
46932: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46933: LD_ADDR_VAR 0 2
46937: PUSH
46938: LD_INT 22
46940: PUSH
46941: LD_VAR 0 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 31
46952: PUSH
46953: LD_INT 25
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PPUSH
46964: CALL_OW 69
46968: ST_TO_ADDR
// end ;
46969: LD_VAR 0 2
46973: RET
// export function Shuffle ( array ) ; var i , index ; begin
46974: LD_INT 0
46976: PPUSH
46977: PPUSH
46978: PPUSH
// result := [ ] ;
46979: LD_ADDR_VAR 0 2
46983: PUSH
46984: EMPTY
46985: ST_TO_ADDR
// if not array then
46986: LD_VAR 0 1
46990: NOT
46991: IFFALSE 46995
// exit ;
46993: GO 47094
// Randomize ;
46995: CALL_OW 10
// for i = array downto 1 do
46999: LD_ADDR_VAR 0 3
47003: PUSH
47004: DOUBLE
47005: LD_VAR 0 1
47009: INC
47010: ST_TO_ADDR
47011: LD_INT 1
47013: PUSH
47014: FOR_DOWNTO
47015: IFFALSE 47092
// begin index := rand ( 1 , array ) ;
47017: LD_ADDR_VAR 0 4
47021: PUSH
47022: LD_INT 1
47024: PPUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 12
47034: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47035: LD_ADDR_VAR 0 2
47039: PUSH
47040: LD_VAR 0 2
47044: PPUSH
47045: LD_VAR 0 2
47049: PUSH
47050: LD_INT 1
47052: PLUS
47053: PPUSH
47054: LD_VAR 0 1
47058: PUSH
47059: LD_VAR 0 4
47063: ARRAY
47064: PPUSH
47065: CALL_OW 2
47069: ST_TO_ADDR
// array := Delete ( array , index ) ;
47070: LD_ADDR_VAR 0 1
47074: PUSH
47075: LD_VAR 0 1
47079: PPUSH
47080: LD_VAR 0 4
47084: PPUSH
47085: CALL_OW 3
47089: ST_TO_ADDR
// end ;
47090: GO 47014
47092: POP
47093: POP
// end ;
47094: LD_VAR 0 2
47098: RET
// export function GetBaseMaterials ( base ) ; begin
47099: LD_INT 0
47101: PPUSH
// result := [ 0 , 0 , 0 ] ;
47102: LD_ADDR_VAR 0 2
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: ST_TO_ADDR
// if not base then
47121: LD_VAR 0 1
47125: NOT
47126: IFFALSE 47130
// exit ;
47128: GO 47179
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47130: LD_ADDR_VAR 0 2
47134: PUSH
47135: LD_VAR 0 1
47139: PPUSH
47140: LD_INT 1
47142: PPUSH
47143: CALL_OW 275
47147: PUSH
47148: LD_VAR 0 1
47152: PPUSH
47153: LD_INT 2
47155: PPUSH
47156: CALL_OW 275
47160: PUSH
47161: LD_VAR 0 1
47165: PPUSH
47166: LD_INT 3
47168: PPUSH
47169: CALL_OW 275
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// end ;
47179: LD_VAR 0 2
47183: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47184: LD_INT 0
47186: PPUSH
47187: PPUSH
// result := array ;
47188: LD_ADDR_VAR 0 3
47192: PUSH
47193: LD_VAR 0 1
47197: ST_TO_ADDR
// if size >= result then
47198: LD_VAR 0 2
47202: PUSH
47203: LD_VAR 0 3
47207: GREATEREQUAL
47208: IFFALSE 47212
// exit ;
47210: GO 47262
// if size then
47212: LD_VAR 0 2
47216: IFFALSE 47262
// for i := array downto size do
47218: LD_ADDR_VAR 0 4
47222: PUSH
47223: DOUBLE
47224: LD_VAR 0 1
47228: INC
47229: ST_TO_ADDR
47230: LD_VAR 0 2
47234: PUSH
47235: FOR_DOWNTO
47236: IFFALSE 47260
// result := Delete ( result , result ) ;
47238: LD_ADDR_VAR 0 3
47242: PUSH
47243: LD_VAR 0 3
47247: PPUSH
47248: LD_VAR 0 3
47252: PPUSH
47253: CALL_OW 3
47257: ST_TO_ADDR
47258: GO 47235
47260: POP
47261: POP
// end ;
47262: LD_VAR 0 3
47266: RET
// export function ComExit ( unit ) ; var tmp ; begin
47267: LD_INT 0
47269: PPUSH
47270: PPUSH
// if not IsInUnit ( unit ) then
47271: LD_VAR 0 1
47275: PPUSH
47276: CALL_OW 310
47280: NOT
47281: IFFALSE 47285
// exit ;
47283: GO 47345
// tmp := IsInUnit ( unit ) ;
47285: LD_ADDR_VAR 0 3
47289: PUSH
47290: LD_VAR 0 1
47294: PPUSH
47295: CALL_OW 310
47299: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47300: LD_VAR 0 3
47304: PPUSH
47305: CALL_OW 247
47309: PUSH
47310: LD_INT 2
47312: EQUAL
47313: IFFALSE 47326
// ComExitVehicle ( unit ) else
47315: LD_VAR 0 1
47319: PPUSH
47320: CALL_OW 121
47324: GO 47335
// ComExitBuilding ( unit ) ;
47326: LD_VAR 0 1
47330: PPUSH
47331: CALL_OW 122
// result := tmp ;
47335: LD_ADDR_VAR 0 2
47339: PUSH
47340: LD_VAR 0 3
47344: ST_TO_ADDR
// end ;
47345: LD_VAR 0 2
47349: RET
// export function ComExitAll ( units ) ; var i ; begin
47350: LD_INT 0
47352: PPUSH
47353: PPUSH
// if not units then
47354: LD_VAR 0 1
47358: NOT
47359: IFFALSE 47363
// exit ;
47361: GO 47389
// for i in units do
47363: LD_ADDR_VAR 0 3
47367: PUSH
47368: LD_VAR 0 1
47372: PUSH
47373: FOR_IN
47374: IFFALSE 47387
// ComExit ( i ) ;
47376: LD_VAR 0 3
47380: PPUSH
47381: CALL 47267 0 1
47385: GO 47373
47387: POP
47388: POP
// end ;
47389: LD_VAR 0 2
47393: RET
// export function ResetHc ; begin
47394: LD_INT 0
47396: PPUSH
// InitHc ;
47397: CALL_OW 19
// hc_importance := 0 ;
47401: LD_ADDR_OWVAR 32
47405: PUSH
47406: LD_INT 0
47408: ST_TO_ADDR
// end ;
47409: LD_VAR 0 1
47413: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47414: LD_INT 0
47416: PPUSH
47417: PPUSH
47418: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47419: LD_ADDR_VAR 0 6
47423: PUSH
47424: LD_VAR 0 1
47428: PUSH
47429: LD_VAR 0 3
47433: PLUS
47434: PUSH
47435: LD_INT 2
47437: DIV
47438: ST_TO_ADDR
// if _x < 0 then
47439: LD_VAR 0 6
47443: PUSH
47444: LD_INT 0
47446: LESS
47447: IFFALSE 47464
// _x := _x * - 1 ;
47449: LD_ADDR_VAR 0 6
47453: PUSH
47454: LD_VAR 0 6
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: MUL
47463: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47464: LD_ADDR_VAR 0 7
47468: PUSH
47469: LD_VAR 0 2
47473: PUSH
47474: LD_VAR 0 4
47478: PLUS
47479: PUSH
47480: LD_INT 2
47482: DIV
47483: ST_TO_ADDR
// if _y < 0 then
47484: LD_VAR 0 7
47488: PUSH
47489: LD_INT 0
47491: LESS
47492: IFFALSE 47509
// _y := _y * - 1 ;
47494: LD_ADDR_VAR 0 7
47498: PUSH
47499: LD_VAR 0 7
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: MUL
47508: ST_TO_ADDR
// result := [ _x , _y ] ;
47509: LD_ADDR_VAR 0 5
47513: PUSH
47514: LD_VAR 0 6
47518: PUSH
47519: LD_VAR 0 7
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// end ;
47528: LD_VAR 0 5
47532: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47533: LD_INT 0
47535: PPUSH
47536: PPUSH
47537: PPUSH
47538: PPUSH
// task := GetTaskList ( unit ) ;
47539: LD_ADDR_VAR 0 7
47543: PUSH
47544: LD_VAR 0 1
47548: PPUSH
47549: CALL_OW 437
47553: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47554: LD_VAR 0 7
47558: NOT
47559: PUSH
47560: LD_VAR 0 1
47564: PPUSH
47565: LD_VAR 0 2
47569: PPUSH
47570: CALL_OW 308
47574: NOT
47575: AND
47576: IFFALSE 47580
// exit ;
47578: GO 47698
// if IsInArea ( unit , area ) then
47580: LD_VAR 0 1
47584: PPUSH
47585: LD_VAR 0 2
47589: PPUSH
47590: CALL_OW 308
47594: IFFALSE 47612
// begin ComMoveToArea ( unit , goAway ) ;
47596: LD_VAR 0 1
47600: PPUSH
47601: LD_VAR 0 3
47605: PPUSH
47606: CALL_OW 113
// exit ;
47610: GO 47698
// end ; if task [ 1 ] [ 1 ] <> M then
47612: LD_VAR 0 7
47616: PUSH
47617: LD_INT 1
47619: ARRAY
47620: PUSH
47621: LD_INT 1
47623: ARRAY
47624: PUSH
47625: LD_STRING M
47627: NONEQUAL
47628: IFFALSE 47632
// exit ;
47630: GO 47698
// x := task [ 1 ] [ 2 ] ;
47632: LD_ADDR_VAR 0 5
47636: PUSH
47637: LD_VAR 0 7
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: PUSH
47646: LD_INT 2
47648: ARRAY
47649: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47650: LD_ADDR_VAR 0 6
47654: PUSH
47655: LD_VAR 0 7
47659: PUSH
47660: LD_INT 1
47662: ARRAY
47663: PUSH
47664: LD_INT 3
47666: ARRAY
47667: ST_TO_ADDR
// if InArea ( x , y , area ) then
47668: LD_VAR 0 5
47672: PPUSH
47673: LD_VAR 0 6
47677: PPUSH
47678: LD_VAR 0 2
47682: PPUSH
47683: CALL_OW 309
47687: IFFALSE 47698
// ComStop ( unit ) ;
47689: LD_VAR 0 1
47693: PPUSH
47694: CALL_OW 141
// end ;
47698: LD_VAR 0 4
47702: RET
// export function Abs ( value ) ; begin
47703: LD_INT 0
47705: PPUSH
// result := value ;
47706: LD_ADDR_VAR 0 2
47710: PUSH
47711: LD_VAR 0 1
47715: ST_TO_ADDR
// if value < 0 then
47716: LD_VAR 0 1
47720: PUSH
47721: LD_INT 0
47723: LESS
47724: IFFALSE 47741
// result := value * - 1 ;
47726: LD_ADDR_VAR 0 2
47730: PUSH
47731: LD_VAR 0 1
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: MUL
47740: ST_TO_ADDR
// end ;
47741: LD_VAR 0 2
47745: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47746: LD_INT 0
47748: PPUSH
47749: PPUSH
47750: PPUSH
47751: PPUSH
47752: PPUSH
47753: PPUSH
47754: PPUSH
47755: PPUSH
// if not unit or not building then
47756: LD_VAR 0 1
47760: NOT
47761: PUSH
47762: LD_VAR 0 2
47766: NOT
47767: OR
47768: IFFALSE 47772
// exit ;
47770: GO 47998
// x := GetX ( building ) ;
47772: LD_ADDR_VAR 0 4
47776: PUSH
47777: LD_VAR 0 2
47781: PPUSH
47782: CALL_OW 250
47786: ST_TO_ADDR
// y := GetY ( building ) ;
47787: LD_ADDR_VAR 0 6
47791: PUSH
47792: LD_VAR 0 2
47796: PPUSH
47797: CALL_OW 251
47801: ST_TO_ADDR
// d := GetDir ( building ) ;
47802: LD_ADDR_VAR 0 8
47806: PUSH
47807: LD_VAR 0 2
47811: PPUSH
47812: CALL_OW 254
47816: ST_TO_ADDR
// r := 4 ;
47817: LD_ADDR_VAR 0 9
47821: PUSH
47822: LD_INT 4
47824: ST_TO_ADDR
// for i := 1 to 5 do
47825: LD_ADDR_VAR 0 10
47829: PUSH
47830: DOUBLE
47831: LD_INT 1
47833: DEC
47834: ST_TO_ADDR
47835: LD_INT 5
47837: PUSH
47838: FOR_TO
47839: IFFALSE 47996
// begin _x := ShiftX ( x , d , r + i ) ;
47841: LD_ADDR_VAR 0 5
47845: PUSH
47846: LD_VAR 0 4
47850: PPUSH
47851: LD_VAR 0 8
47855: PPUSH
47856: LD_VAR 0 9
47860: PUSH
47861: LD_VAR 0 10
47865: PLUS
47866: PPUSH
47867: CALL_OW 272
47871: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47872: LD_ADDR_VAR 0 7
47876: PUSH
47877: LD_VAR 0 6
47881: PPUSH
47882: LD_VAR 0 8
47886: PPUSH
47887: LD_VAR 0 9
47891: PUSH
47892: LD_VAR 0 10
47896: PLUS
47897: PPUSH
47898: CALL_OW 273
47902: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47903: LD_VAR 0 5
47907: PPUSH
47908: LD_VAR 0 7
47912: PPUSH
47913: CALL_OW 488
47917: PUSH
47918: LD_VAR 0 5
47922: PPUSH
47923: LD_VAR 0 7
47927: PPUSH
47928: CALL_OW 428
47932: PPUSH
47933: CALL_OW 247
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: IN
47948: NOT
47949: AND
47950: IFFALSE 47994
// begin ComMoveXY ( unit , _x , _y ) ;
47952: LD_VAR 0 1
47956: PPUSH
47957: LD_VAR 0 5
47961: PPUSH
47962: LD_VAR 0 7
47966: PPUSH
47967: CALL_OW 111
// result := [ _x , _y ] ;
47971: LD_ADDR_VAR 0 3
47975: PUSH
47976: LD_VAR 0 5
47980: PUSH
47981: LD_VAR 0 7
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// exit ;
47990: POP
47991: POP
47992: GO 47998
// end ; end ;
47994: GO 47838
47996: POP
47997: POP
// end ;
47998: LD_VAR 0 3
48002: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48003: LD_INT 0
48005: PPUSH
48006: PPUSH
48007: PPUSH
// result := 0 ;
48008: LD_ADDR_VAR 0 3
48012: PUSH
48013: LD_INT 0
48015: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48016: LD_VAR 0 1
48020: PUSH
48021: LD_INT 0
48023: LESS
48024: PUSH
48025: LD_VAR 0 1
48029: PUSH
48030: LD_INT 8
48032: GREATER
48033: OR
48034: PUSH
48035: LD_VAR 0 2
48039: PUSH
48040: LD_INT 0
48042: LESS
48043: OR
48044: PUSH
48045: LD_VAR 0 2
48049: PUSH
48050: LD_INT 8
48052: GREATER
48053: OR
48054: IFFALSE 48058
// exit ;
48056: GO 48133
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48058: LD_ADDR_VAR 0 4
48062: PUSH
48063: LD_INT 22
48065: PUSH
48066: LD_VAR 0 2
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PPUSH
48075: CALL_OW 69
48079: PUSH
48080: FOR_IN
48081: IFFALSE 48131
// begin un := UnitShoot ( i ) ;
48083: LD_ADDR_VAR 0 5
48087: PUSH
48088: LD_VAR 0 4
48092: PPUSH
48093: CALL_OW 504
48097: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48098: LD_VAR 0 5
48102: PPUSH
48103: CALL_OW 255
48107: PUSH
48108: LD_VAR 0 1
48112: EQUAL
48113: IFFALSE 48129
// begin result := un ;
48115: LD_ADDR_VAR 0 3
48119: PUSH
48120: LD_VAR 0 5
48124: ST_TO_ADDR
// exit ;
48125: POP
48126: POP
48127: GO 48133
// end ; end ;
48129: GO 48080
48131: POP
48132: POP
// end ;
48133: LD_VAR 0 3
48137: RET
// export function GetCargoBay ( units ) ; begin
48138: LD_INT 0
48140: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48141: LD_ADDR_VAR 0 2
48145: PUSH
48146: LD_VAR 0 1
48150: PPUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 34
48156: PUSH
48157: LD_INT 12
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 34
48166: PUSH
48167: LD_INT 51
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 34
48176: PUSH
48177: LD_INT 32
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 34
48186: PUSH
48187: LD_INT 89
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: PPUSH
48201: CALL_OW 72
48205: ST_TO_ADDR
// end ;
48206: LD_VAR 0 2
48210: RET
// export function Negate ( value ) ; begin
48211: LD_INT 0
48213: PPUSH
// result := not value ;
48214: LD_ADDR_VAR 0 2
48218: PUSH
48219: LD_VAR 0 1
48223: NOT
48224: ST_TO_ADDR
// end ;
48225: LD_VAR 0 2
48229: RET
// export function Inc ( value ) ; begin
48230: LD_INT 0
48232: PPUSH
// result := value + 1 ;
48233: LD_ADDR_VAR 0 2
48237: PUSH
48238: LD_VAR 0 1
48242: PUSH
48243: LD_INT 1
48245: PLUS
48246: ST_TO_ADDR
// end ;
48247: LD_VAR 0 2
48251: RET
// export function Dec ( value ) ; begin
48252: LD_INT 0
48254: PPUSH
// result := value - 1 ;
48255: LD_ADDR_VAR 0 2
48259: PUSH
48260: LD_VAR 0 1
48264: PUSH
48265: LD_INT 1
48267: MINUS
48268: ST_TO_ADDR
// end ;
48269: LD_VAR 0 2
48273: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48274: LD_INT 0
48276: PPUSH
48277: PPUSH
48278: PPUSH
48279: PPUSH
48280: PPUSH
48281: PPUSH
48282: PPUSH
48283: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48284: LD_VAR 0 1
48288: PPUSH
48289: LD_VAR 0 2
48293: PPUSH
48294: CALL_OW 488
48298: NOT
48299: PUSH
48300: LD_VAR 0 3
48304: PPUSH
48305: LD_VAR 0 4
48309: PPUSH
48310: CALL_OW 488
48314: NOT
48315: OR
48316: IFFALSE 48329
// begin result := - 1 ;
48318: LD_ADDR_VAR 0 5
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: ST_TO_ADDR
// exit ;
48327: GO 48564
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48329: LD_ADDR_VAR 0 12
48333: PUSH
48334: LD_VAR 0 1
48338: PPUSH
48339: LD_VAR 0 2
48343: PPUSH
48344: LD_VAR 0 3
48348: PPUSH
48349: LD_VAR 0 4
48353: PPUSH
48354: CALL 47414 0 4
48358: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48359: LD_ADDR_VAR 0 11
48363: PUSH
48364: LD_VAR 0 1
48368: PPUSH
48369: LD_VAR 0 2
48373: PPUSH
48374: LD_VAR 0 12
48378: PUSH
48379: LD_INT 1
48381: ARRAY
48382: PPUSH
48383: LD_VAR 0 12
48387: PUSH
48388: LD_INT 2
48390: ARRAY
48391: PPUSH
48392: CALL_OW 298
48396: ST_TO_ADDR
// distance := 9999 ;
48397: LD_ADDR_VAR 0 10
48401: PUSH
48402: LD_INT 9999
48404: ST_TO_ADDR
// for i := 0 to 5 do
48405: LD_ADDR_VAR 0 6
48409: PUSH
48410: DOUBLE
48411: LD_INT 0
48413: DEC
48414: ST_TO_ADDR
48415: LD_INT 5
48417: PUSH
48418: FOR_TO
48419: IFFALSE 48562
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48421: LD_ADDR_VAR 0 7
48425: PUSH
48426: LD_VAR 0 1
48430: PPUSH
48431: LD_VAR 0 6
48435: PPUSH
48436: LD_VAR 0 11
48440: PPUSH
48441: CALL_OW 272
48445: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48446: LD_ADDR_VAR 0 8
48450: PUSH
48451: LD_VAR 0 2
48455: PPUSH
48456: LD_VAR 0 6
48460: PPUSH
48461: LD_VAR 0 11
48465: PPUSH
48466: CALL_OW 273
48470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48471: LD_VAR 0 7
48475: PPUSH
48476: LD_VAR 0 8
48480: PPUSH
48481: CALL_OW 488
48485: NOT
48486: IFFALSE 48490
// continue ;
48488: GO 48418
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48490: LD_ADDR_VAR 0 9
48494: PUSH
48495: LD_VAR 0 12
48499: PUSH
48500: LD_INT 1
48502: ARRAY
48503: PPUSH
48504: LD_VAR 0 12
48508: PUSH
48509: LD_INT 2
48511: ARRAY
48512: PPUSH
48513: LD_VAR 0 7
48517: PPUSH
48518: LD_VAR 0 8
48522: PPUSH
48523: CALL_OW 298
48527: ST_TO_ADDR
// if tmp < distance then
48528: LD_VAR 0 9
48532: PUSH
48533: LD_VAR 0 10
48537: LESS
48538: IFFALSE 48560
// begin result := i ;
48540: LD_ADDR_VAR 0 5
48544: PUSH
48545: LD_VAR 0 6
48549: ST_TO_ADDR
// distance := tmp ;
48550: LD_ADDR_VAR 0 10
48554: PUSH
48555: LD_VAR 0 9
48559: ST_TO_ADDR
// end ; end ;
48560: GO 48418
48562: POP
48563: POP
// end ;
48564: LD_VAR 0 5
48568: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48569: LD_INT 0
48571: PPUSH
48572: PPUSH
// if not driver or not IsInUnit ( driver ) then
48573: LD_VAR 0 1
48577: NOT
48578: PUSH
48579: LD_VAR 0 1
48583: PPUSH
48584: CALL_OW 310
48588: NOT
48589: OR
48590: IFFALSE 48594
// exit ;
48592: GO 48684
// vehicle := IsInUnit ( driver ) ;
48594: LD_ADDR_VAR 0 3
48598: PUSH
48599: LD_VAR 0 1
48603: PPUSH
48604: CALL_OW 310
48608: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48609: LD_VAR 0 1
48613: PPUSH
48614: LD_STRING \
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: PUSH
48644: LD_STRING E
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_VAR 0 3
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PPUSH
48680: CALL_OW 446
// end ;
48684: LD_VAR 0 2
48688: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48689: LD_INT 0
48691: PPUSH
48692: PPUSH
// if not driver or not IsInUnit ( driver ) then
48693: LD_VAR 0 1
48697: NOT
48698: PUSH
48699: LD_VAR 0 1
48703: PPUSH
48704: CALL_OW 310
48708: NOT
48709: OR
48710: IFFALSE 48714
// exit ;
48712: GO 48804
// vehicle := IsInUnit ( driver ) ;
48714: LD_ADDR_VAR 0 3
48718: PUSH
48719: LD_VAR 0 1
48723: PPUSH
48724: CALL_OW 310
48728: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48729: LD_VAR 0 1
48733: PPUSH
48734: LD_STRING \
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: PUSH
48764: LD_STRING E
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_VAR 0 3
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PPUSH
48800: CALL_OW 447
// end ;
48804: LD_VAR 0 2
48808: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48809: LD_INT 0
48811: PPUSH
48812: PPUSH
48813: PPUSH
// tmp := [ ] ;
48814: LD_ADDR_VAR 0 5
48818: PUSH
48819: EMPTY
48820: ST_TO_ADDR
// for i in units do
48821: LD_ADDR_VAR 0 4
48825: PUSH
48826: LD_VAR 0 1
48830: PUSH
48831: FOR_IN
48832: IFFALSE 48870
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48834: LD_ADDR_VAR 0 5
48838: PUSH
48839: LD_VAR 0 5
48843: PPUSH
48844: LD_VAR 0 5
48848: PUSH
48849: LD_INT 1
48851: PLUS
48852: PPUSH
48853: LD_VAR 0 4
48857: PPUSH
48858: CALL_OW 256
48862: PPUSH
48863: CALL_OW 2
48867: ST_TO_ADDR
48868: GO 48831
48870: POP
48871: POP
// if not tmp then
48872: LD_VAR 0 5
48876: NOT
48877: IFFALSE 48881
// exit ;
48879: GO 48929
// if asc then
48881: LD_VAR 0 2
48885: IFFALSE 48909
// result := SortListByListAsc ( units , tmp ) else
48887: LD_ADDR_VAR 0 3
48891: PUSH
48892: LD_VAR 0 1
48896: PPUSH
48897: LD_VAR 0 5
48901: PPUSH
48902: CALL_OW 76
48906: ST_TO_ADDR
48907: GO 48929
// result := SortListByListDesc ( units , tmp ) ;
48909: LD_ADDR_VAR 0 3
48913: PUSH
48914: LD_VAR 0 1
48918: PPUSH
48919: LD_VAR 0 5
48923: PPUSH
48924: CALL_OW 77
48928: ST_TO_ADDR
// end ;
48929: LD_VAR 0 3
48933: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48934: LD_INT 0
48936: PPUSH
48937: PPUSH
// task := GetTaskList ( mech ) ;
48938: LD_ADDR_VAR 0 4
48942: PUSH
48943: LD_VAR 0 1
48947: PPUSH
48948: CALL_OW 437
48952: ST_TO_ADDR
// if not task then
48953: LD_VAR 0 4
48957: NOT
48958: IFFALSE 48962
// exit ;
48960: GO 49004
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48962: LD_ADDR_VAR 0 3
48966: PUSH
48967: LD_VAR 0 4
48971: PUSH
48972: LD_INT 1
48974: ARRAY
48975: PUSH
48976: LD_INT 1
48978: ARRAY
48979: PUSH
48980: LD_STRING r
48982: EQUAL
48983: PUSH
48984: LD_VAR 0 4
48988: PUSH
48989: LD_INT 1
48991: ARRAY
48992: PUSH
48993: LD_INT 4
48995: ARRAY
48996: PUSH
48997: LD_VAR 0 2
49001: EQUAL
49002: AND
49003: ST_TO_ADDR
// end ;
49004: LD_VAR 0 3
49008: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49009: LD_INT 0
49011: PPUSH
// SetDir ( unit , d ) ;
49012: LD_VAR 0 1
49016: PPUSH
49017: LD_VAR 0 4
49021: PPUSH
49022: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49026: LD_VAR 0 1
49030: PPUSH
49031: LD_VAR 0 2
49035: PPUSH
49036: LD_VAR 0 3
49040: PPUSH
49041: LD_VAR 0 5
49045: PPUSH
49046: CALL_OW 48
// end ;
49050: LD_VAR 0 6
49054: RET
// export function ToNaturalNumber ( number ) ; begin
49055: LD_INT 0
49057: PPUSH
// result := number div 1 ;
49058: LD_ADDR_VAR 0 2
49062: PUSH
49063: LD_VAR 0 1
49067: PUSH
49068: LD_INT 1
49070: DIV
49071: ST_TO_ADDR
// if number < 0 then
49072: LD_VAR 0 1
49076: PUSH
49077: LD_INT 0
49079: LESS
49080: IFFALSE 49090
// result := 0 ;
49082: LD_ADDR_VAR 0 2
49086: PUSH
49087: LD_INT 0
49089: ST_TO_ADDR
// end ;
49090: LD_VAR 0 2
49094: RET
// export function SortByClass ( units , class ) ; var un ; begin
49095: LD_INT 0
49097: PPUSH
49098: PPUSH
// if not units or not class then
49099: LD_VAR 0 1
49103: NOT
49104: PUSH
49105: LD_VAR 0 2
49109: NOT
49110: OR
49111: IFFALSE 49115
// exit ;
49113: GO 49210
// result := [ ] ;
49115: LD_ADDR_VAR 0 3
49119: PUSH
49120: EMPTY
49121: ST_TO_ADDR
// for un in units do
49122: LD_ADDR_VAR 0 4
49126: PUSH
49127: LD_VAR 0 1
49131: PUSH
49132: FOR_IN
49133: IFFALSE 49208
// if GetClass ( un ) = class then
49135: LD_VAR 0 4
49139: PPUSH
49140: CALL_OW 257
49144: PUSH
49145: LD_VAR 0 2
49149: EQUAL
49150: IFFALSE 49177
// result := Insert ( result , 1 , un ) else
49152: LD_ADDR_VAR 0 3
49156: PUSH
49157: LD_VAR 0 3
49161: PPUSH
49162: LD_INT 1
49164: PPUSH
49165: LD_VAR 0 4
49169: PPUSH
49170: CALL_OW 2
49174: ST_TO_ADDR
49175: GO 49206
// result := Replace ( result , result + 1 , un ) ;
49177: LD_ADDR_VAR 0 3
49181: PUSH
49182: LD_VAR 0 3
49186: PPUSH
49187: LD_VAR 0 3
49191: PUSH
49192: LD_INT 1
49194: PLUS
49195: PPUSH
49196: LD_VAR 0 4
49200: PPUSH
49201: CALL_OW 1
49205: ST_TO_ADDR
49206: GO 49132
49208: POP
49209: POP
// end ;
49210: LD_VAR 0 3
49214: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49215: LD_INT 0
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
// result := [ ] ;
49224: LD_ADDR_VAR 0 4
49228: PUSH
49229: EMPTY
49230: ST_TO_ADDR
// if x - r < 0 then
49231: LD_VAR 0 1
49235: PUSH
49236: LD_VAR 0 3
49240: MINUS
49241: PUSH
49242: LD_INT 0
49244: LESS
49245: IFFALSE 49257
// min_x := 0 else
49247: LD_ADDR_VAR 0 8
49251: PUSH
49252: LD_INT 0
49254: ST_TO_ADDR
49255: GO 49273
// min_x := x - r ;
49257: LD_ADDR_VAR 0 8
49261: PUSH
49262: LD_VAR 0 1
49266: PUSH
49267: LD_VAR 0 3
49271: MINUS
49272: ST_TO_ADDR
// if y - r < 0 then
49273: LD_VAR 0 2
49277: PUSH
49278: LD_VAR 0 3
49282: MINUS
49283: PUSH
49284: LD_INT 0
49286: LESS
49287: IFFALSE 49299
// min_y := 0 else
49289: LD_ADDR_VAR 0 7
49293: PUSH
49294: LD_INT 0
49296: ST_TO_ADDR
49297: GO 49315
// min_y := y - r ;
49299: LD_ADDR_VAR 0 7
49303: PUSH
49304: LD_VAR 0 2
49308: PUSH
49309: LD_VAR 0 3
49313: MINUS
49314: ST_TO_ADDR
// max_x := x + r ;
49315: LD_ADDR_VAR 0 9
49319: PUSH
49320: LD_VAR 0 1
49324: PUSH
49325: LD_VAR 0 3
49329: PLUS
49330: ST_TO_ADDR
// max_y := y + r ;
49331: LD_ADDR_VAR 0 10
49335: PUSH
49336: LD_VAR 0 2
49340: PUSH
49341: LD_VAR 0 3
49345: PLUS
49346: ST_TO_ADDR
// for _x = min_x to max_x do
49347: LD_ADDR_VAR 0 5
49351: PUSH
49352: DOUBLE
49353: LD_VAR 0 8
49357: DEC
49358: ST_TO_ADDR
49359: LD_VAR 0 9
49363: PUSH
49364: FOR_TO
49365: IFFALSE 49466
// for _y = min_y to max_y do
49367: LD_ADDR_VAR 0 6
49371: PUSH
49372: DOUBLE
49373: LD_VAR 0 7
49377: DEC
49378: ST_TO_ADDR
49379: LD_VAR 0 10
49383: PUSH
49384: FOR_TO
49385: IFFALSE 49462
// begin if not ValidHex ( _x , _y ) then
49387: LD_VAR 0 5
49391: PPUSH
49392: LD_VAR 0 6
49396: PPUSH
49397: CALL_OW 488
49401: NOT
49402: IFFALSE 49406
// continue ;
49404: GO 49384
// if GetResourceTypeXY ( _x , _y ) then
49406: LD_VAR 0 5
49410: PPUSH
49411: LD_VAR 0 6
49415: PPUSH
49416: CALL_OW 283
49420: IFFALSE 49460
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49422: LD_ADDR_VAR 0 4
49426: PUSH
49427: LD_VAR 0 4
49431: PPUSH
49432: LD_VAR 0 4
49436: PUSH
49437: LD_INT 1
49439: PLUS
49440: PPUSH
49441: LD_VAR 0 5
49445: PUSH
49446: LD_VAR 0 6
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PPUSH
49455: CALL_OW 1
49459: ST_TO_ADDR
// end ;
49460: GO 49384
49462: POP
49463: POP
49464: GO 49364
49466: POP
49467: POP
// end ;
49468: LD_VAR 0 4
49472: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49473: LD_INT 0
49475: PPUSH
49476: PPUSH
49477: PPUSH
49478: PPUSH
49479: PPUSH
49480: PPUSH
49481: PPUSH
49482: PPUSH
// if not units then
49483: LD_VAR 0 1
49487: NOT
49488: IFFALSE 49492
// exit ;
49490: GO 50020
// result := UnitFilter ( units , [ f_ok ] ) ;
49492: LD_ADDR_VAR 0 3
49496: PUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: LD_INT 50
49504: PUSH
49505: EMPTY
49506: LIST
49507: PPUSH
49508: CALL_OW 72
49512: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49513: LD_ADDR_VAR 0 8
49517: PUSH
49518: LD_VAR 0 1
49522: PUSH
49523: LD_INT 1
49525: ARRAY
49526: PPUSH
49527: CALL_OW 255
49531: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49532: LD_ADDR_VAR 0 10
49536: PUSH
49537: LD_INT 29
49539: PUSH
49540: LD_INT 91
49542: PUSH
49543: LD_INT 49
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: ST_TO_ADDR
// if not result then
49551: LD_VAR 0 3
49555: NOT
49556: IFFALSE 49560
// exit ;
49558: GO 50020
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49560: LD_ADDR_VAR 0 5
49564: PUSH
49565: LD_INT 81
49567: PUSH
49568: LD_VAR 0 8
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PPUSH
49577: CALL_OW 69
49581: ST_TO_ADDR
// for i in result do
49582: LD_ADDR_VAR 0 4
49586: PUSH
49587: LD_VAR 0 3
49591: PUSH
49592: FOR_IN
49593: IFFALSE 50018
// begin tag := GetTag ( i ) + 1 ;
49595: LD_ADDR_VAR 0 9
49599: PUSH
49600: LD_VAR 0 4
49604: PPUSH
49605: CALL_OW 110
49609: PUSH
49610: LD_INT 1
49612: PLUS
49613: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49614: LD_ADDR_VAR 0 7
49618: PUSH
49619: LD_VAR 0 4
49623: PPUSH
49624: CALL_OW 250
49628: PPUSH
49629: LD_VAR 0 4
49633: PPUSH
49634: CALL_OW 251
49638: PPUSH
49639: LD_INT 4
49641: PPUSH
49642: CALL 49215 0 3
49646: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49647: LD_VAR 0 4
49651: PPUSH
49652: CALL_OW 247
49656: PUSH
49657: LD_INT 2
49659: EQUAL
49660: PUSH
49661: LD_VAR 0 7
49665: PUSH
49666: LD_INT 2
49668: GREATER
49669: AND
49670: PUSH
49671: LD_VAR 0 4
49675: PPUSH
49676: CALL_OW 264
49680: PUSH
49681: LD_VAR 0 10
49685: IN
49686: NOT
49687: AND
49688: IFFALSE 49727
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49690: LD_VAR 0 4
49694: PPUSH
49695: LD_VAR 0 7
49699: PUSH
49700: LD_INT 1
49702: ARRAY
49703: PUSH
49704: LD_INT 1
49706: ARRAY
49707: PPUSH
49708: LD_VAR 0 7
49712: PUSH
49713: LD_INT 1
49715: ARRAY
49716: PUSH
49717: LD_INT 2
49719: ARRAY
49720: PPUSH
49721: CALL_OW 116
49725: GO 50016
// if path > tag then
49727: LD_VAR 0 2
49731: PUSH
49732: LD_VAR 0 9
49736: GREATER
49737: IFFALSE 49945
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49739: LD_ADDR_VAR 0 6
49743: PUSH
49744: LD_VAR 0 5
49748: PPUSH
49749: LD_INT 91
49751: PUSH
49752: LD_VAR 0 4
49756: PUSH
49757: LD_INT 8
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: PPUSH
49765: CALL_OW 72
49769: ST_TO_ADDR
// if nearEnemy then
49770: LD_VAR 0 6
49774: IFFALSE 49843
// begin if GetWeapon ( i ) = ru_time_lapser then
49776: LD_VAR 0 4
49780: PPUSH
49781: CALL_OW 264
49785: PUSH
49786: LD_INT 49
49788: EQUAL
49789: IFFALSE 49817
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49791: LD_VAR 0 4
49795: PPUSH
49796: LD_VAR 0 6
49800: PPUSH
49801: LD_VAR 0 4
49805: PPUSH
49806: CALL_OW 74
49810: PPUSH
49811: CALL_OW 112
49815: GO 49841
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49817: LD_VAR 0 4
49821: PPUSH
49822: LD_VAR 0 6
49826: PPUSH
49827: LD_VAR 0 4
49831: PPUSH
49832: CALL_OW 74
49836: PPUSH
49837: CALL 51091 0 2
// end else
49841: GO 49943
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49843: LD_VAR 0 4
49847: PPUSH
49848: LD_VAR 0 2
49852: PUSH
49853: LD_VAR 0 9
49857: ARRAY
49858: PUSH
49859: LD_INT 1
49861: ARRAY
49862: PPUSH
49863: LD_VAR 0 2
49867: PUSH
49868: LD_VAR 0 9
49872: ARRAY
49873: PUSH
49874: LD_INT 2
49876: ARRAY
49877: PPUSH
49878: CALL_OW 297
49882: PUSH
49883: LD_INT 6
49885: GREATER
49886: IFFALSE 49929
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49888: LD_VAR 0 4
49892: PPUSH
49893: LD_VAR 0 2
49897: PUSH
49898: LD_VAR 0 9
49902: ARRAY
49903: PUSH
49904: LD_INT 1
49906: ARRAY
49907: PPUSH
49908: LD_VAR 0 2
49912: PUSH
49913: LD_VAR 0 9
49917: ARRAY
49918: PUSH
49919: LD_INT 2
49921: ARRAY
49922: PPUSH
49923: CALL_OW 114
49927: GO 49943
// SetTag ( i , tag ) ;
49929: LD_VAR 0 4
49933: PPUSH
49934: LD_VAR 0 9
49938: PPUSH
49939: CALL_OW 109
// end else
49943: GO 50016
// if enemy then
49945: LD_VAR 0 5
49949: IFFALSE 50016
// begin if GetWeapon ( i ) = ru_time_lapser then
49951: LD_VAR 0 4
49955: PPUSH
49956: CALL_OW 264
49960: PUSH
49961: LD_INT 49
49963: EQUAL
49964: IFFALSE 49992
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49966: LD_VAR 0 4
49970: PPUSH
49971: LD_VAR 0 5
49975: PPUSH
49976: LD_VAR 0 4
49980: PPUSH
49981: CALL_OW 74
49985: PPUSH
49986: CALL_OW 112
49990: GO 50016
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49992: LD_VAR 0 4
49996: PPUSH
49997: LD_VAR 0 5
50001: PPUSH
50002: LD_VAR 0 4
50006: PPUSH
50007: CALL_OW 74
50011: PPUSH
50012: CALL 51091 0 2
// end ; end ;
50016: GO 49592
50018: POP
50019: POP
// end ;
50020: LD_VAR 0 3
50024: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50025: LD_INT 0
50027: PPUSH
50028: PPUSH
50029: PPUSH
// if not unit or IsInUnit ( unit ) then
50030: LD_VAR 0 1
50034: NOT
50035: PUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: CALL_OW 310
50045: OR
50046: IFFALSE 50050
// exit ;
50048: GO 50141
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50050: LD_ADDR_VAR 0 4
50054: PUSH
50055: LD_VAR 0 1
50059: PPUSH
50060: CALL_OW 250
50064: PPUSH
50065: LD_VAR 0 2
50069: PPUSH
50070: LD_INT 1
50072: PPUSH
50073: CALL_OW 272
50077: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50078: LD_ADDR_VAR 0 5
50082: PUSH
50083: LD_VAR 0 1
50087: PPUSH
50088: CALL_OW 251
50092: PPUSH
50093: LD_VAR 0 2
50097: PPUSH
50098: LD_INT 1
50100: PPUSH
50101: CALL_OW 273
50105: ST_TO_ADDR
// if ValidHex ( x , y ) then
50106: LD_VAR 0 4
50110: PPUSH
50111: LD_VAR 0 5
50115: PPUSH
50116: CALL_OW 488
50120: IFFALSE 50141
// ComTurnXY ( unit , x , y ) ;
50122: LD_VAR 0 1
50126: PPUSH
50127: LD_VAR 0 4
50131: PPUSH
50132: LD_VAR 0 5
50136: PPUSH
50137: CALL_OW 118
// end ;
50141: LD_VAR 0 3
50145: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50146: LD_INT 0
50148: PPUSH
50149: PPUSH
// result := false ;
50150: LD_ADDR_VAR 0 3
50154: PUSH
50155: LD_INT 0
50157: ST_TO_ADDR
// if not units then
50158: LD_VAR 0 2
50162: NOT
50163: IFFALSE 50167
// exit ;
50165: GO 50212
// for i in units do
50167: LD_ADDR_VAR 0 4
50171: PUSH
50172: LD_VAR 0 2
50176: PUSH
50177: FOR_IN
50178: IFFALSE 50210
// if See ( side , i ) then
50180: LD_VAR 0 1
50184: PPUSH
50185: LD_VAR 0 4
50189: PPUSH
50190: CALL_OW 292
50194: IFFALSE 50208
// begin result := true ;
50196: LD_ADDR_VAR 0 3
50200: PUSH
50201: LD_INT 1
50203: ST_TO_ADDR
// exit ;
50204: POP
50205: POP
50206: GO 50212
// end ;
50208: GO 50177
50210: POP
50211: POP
// end ;
50212: LD_VAR 0 3
50216: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50217: LD_INT 0
50219: PPUSH
50220: PPUSH
50221: PPUSH
50222: PPUSH
// if not unit or not points then
50223: LD_VAR 0 1
50227: NOT
50228: PUSH
50229: LD_VAR 0 2
50233: NOT
50234: OR
50235: IFFALSE 50239
// exit ;
50237: GO 50329
// dist := 99999 ;
50239: LD_ADDR_VAR 0 5
50243: PUSH
50244: LD_INT 99999
50246: ST_TO_ADDR
// for i in points do
50247: LD_ADDR_VAR 0 4
50251: PUSH
50252: LD_VAR 0 2
50256: PUSH
50257: FOR_IN
50258: IFFALSE 50327
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50260: LD_ADDR_VAR 0 6
50264: PUSH
50265: LD_VAR 0 1
50269: PPUSH
50270: LD_VAR 0 4
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PPUSH
50279: LD_VAR 0 4
50283: PUSH
50284: LD_INT 2
50286: ARRAY
50287: PPUSH
50288: CALL_OW 297
50292: ST_TO_ADDR
// if tmpDist < dist then
50293: LD_VAR 0 6
50297: PUSH
50298: LD_VAR 0 5
50302: LESS
50303: IFFALSE 50325
// begin result := i ;
50305: LD_ADDR_VAR 0 3
50309: PUSH
50310: LD_VAR 0 4
50314: ST_TO_ADDR
// dist := tmpDist ;
50315: LD_ADDR_VAR 0 5
50319: PUSH
50320: LD_VAR 0 6
50324: ST_TO_ADDR
// end ; end ;
50325: GO 50257
50327: POP
50328: POP
// end ;
50329: LD_VAR 0 3
50333: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50334: LD_INT 0
50336: PPUSH
// uc_side := side ;
50337: LD_ADDR_OWVAR 20
50341: PUSH
50342: LD_VAR 0 1
50346: ST_TO_ADDR
// uc_nation := 3 ;
50347: LD_ADDR_OWVAR 21
50351: PUSH
50352: LD_INT 3
50354: ST_TO_ADDR
// vc_chassis := 25 ;
50355: LD_ADDR_OWVAR 37
50359: PUSH
50360: LD_INT 25
50362: ST_TO_ADDR
// vc_engine := engine_siberite ;
50363: LD_ADDR_OWVAR 39
50367: PUSH
50368: LD_INT 3
50370: ST_TO_ADDR
// vc_control := control_computer ;
50371: LD_ADDR_OWVAR 38
50375: PUSH
50376: LD_INT 3
50378: ST_TO_ADDR
// vc_weapon := 59 ;
50379: LD_ADDR_OWVAR 40
50383: PUSH
50384: LD_INT 59
50386: ST_TO_ADDR
// result := CreateVehicle ;
50387: LD_ADDR_VAR 0 5
50391: PUSH
50392: CALL_OW 45
50396: ST_TO_ADDR
// SetDir ( result , d ) ;
50397: LD_VAR 0 5
50401: PPUSH
50402: LD_VAR 0 4
50406: PPUSH
50407: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50411: LD_VAR 0 5
50415: PPUSH
50416: LD_VAR 0 2
50420: PPUSH
50421: LD_VAR 0 3
50425: PPUSH
50426: LD_INT 0
50428: PPUSH
50429: CALL_OW 48
// end ;
50433: LD_VAR 0 5
50437: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50438: LD_INT 0
50440: PPUSH
50441: PPUSH
50442: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50443: LD_ADDR_VAR 0 2
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50466: LD_VAR 0 1
50470: NOT
50471: PUSH
50472: LD_VAR 0 1
50476: PPUSH
50477: CALL_OW 264
50481: PUSH
50482: LD_INT 12
50484: PUSH
50485: LD_INT 51
50487: PUSH
50488: LD_INT 32
50490: PUSH
50491: LD_INT 89
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: IN
50500: NOT
50501: OR
50502: IFFALSE 50506
// exit ;
50504: GO 50604
// for i := 1 to 3 do
50506: LD_ADDR_VAR 0 3
50510: PUSH
50511: DOUBLE
50512: LD_INT 1
50514: DEC
50515: ST_TO_ADDR
50516: LD_INT 3
50518: PUSH
50519: FOR_TO
50520: IFFALSE 50602
// begin tmp := GetCargo ( cargo , i ) ;
50522: LD_ADDR_VAR 0 4
50526: PUSH
50527: LD_VAR 0 1
50531: PPUSH
50532: LD_VAR 0 3
50536: PPUSH
50537: CALL_OW 289
50541: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50542: LD_ADDR_VAR 0 2
50546: PUSH
50547: LD_VAR 0 2
50551: PPUSH
50552: LD_VAR 0 3
50556: PPUSH
50557: LD_VAR 0 4
50561: PPUSH
50562: CALL_OW 1
50566: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50567: LD_ADDR_VAR 0 2
50571: PUSH
50572: LD_VAR 0 2
50576: PPUSH
50577: LD_INT 4
50579: PPUSH
50580: LD_VAR 0 2
50584: PUSH
50585: LD_INT 4
50587: ARRAY
50588: PUSH
50589: LD_VAR 0 4
50593: PLUS
50594: PPUSH
50595: CALL_OW 1
50599: ST_TO_ADDR
// end ;
50600: GO 50519
50602: POP
50603: POP
// end ;
50604: LD_VAR 0 2
50608: RET
// export function Length ( array ) ; begin
50609: LD_INT 0
50611: PPUSH
// result := array + 0 ;
50612: LD_ADDR_VAR 0 2
50616: PUSH
50617: LD_VAR 0 1
50621: PUSH
50622: LD_INT 0
50624: PLUS
50625: ST_TO_ADDR
// end ;
50626: LD_VAR 0 2
50630: RET
// export function PrepareArray ( array ) ; begin
50631: LD_INT 0
50633: PPUSH
// result := array diff 0 ;
50634: LD_ADDR_VAR 0 2
50638: PUSH
50639: LD_VAR 0 1
50643: PUSH
50644: LD_INT 0
50646: DIFF
50647: ST_TO_ADDR
// if not result [ 1 ] then
50648: LD_VAR 0 2
50652: PUSH
50653: LD_INT 1
50655: ARRAY
50656: NOT
50657: IFFALSE 50677
// result := Delete ( result , 1 ) ;
50659: LD_ADDR_VAR 0 2
50663: PUSH
50664: LD_VAR 0 2
50668: PPUSH
50669: LD_INT 1
50671: PPUSH
50672: CALL_OW 3
50676: ST_TO_ADDR
// end ;
50677: LD_VAR 0 2
50681: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50682: LD_INT 0
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
// sibRocketRange := 25 ;
50688: LD_ADDR_VAR 0 6
50692: PUSH
50693: LD_INT 25
50695: ST_TO_ADDR
// result := false ;
50696: LD_ADDR_VAR 0 4
50700: PUSH
50701: LD_INT 0
50703: ST_TO_ADDR
// for i := 0 to 5 do
50704: LD_ADDR_VAR 0 5
50708: PUSH
50709: DOUBLE
50710: LD_INT 0
50712: DEC
50713: ST_TO_ADDR
50714: LD_INT 5
50716: PUSH
50717: FOR_TO
50718: IFFALSE 50785
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50720: LD_VAR 0 1
50724: PPUSH
50725: LD_VAR 0 5
50729: PPUSH
50730: LD_VAR 0 6
50734: PPUSH
50735: CALL_OW 272
50739: PPUSH
50740: LD_VAR 0 2
50744: PPUSH
50745: LD_VAR 0 5
50749: PPUSH
50750: LD_VAR 0 6
50754: PPUSH
50755: CALL_OW 273
50759: PPUSH
50760: LD_VAR 0 3
50764: PPUSH
50765: CALL_OW 309
50769: IFFALSE 50783
// begin result := true ;
50771: LD_ADDR_VAR 0 4
50775: PUSH
50776: LD_INT 1
50778: ST_TO_ADDR
// exit ;
50779: POP
50780: POP
50781: GO 50787
// end ;
50783: GO 50717
50785: POP
50786: POP
// end ;
50787: LD_VAR 0 4
50791: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50792: LD_INT 0
50794: PPUSH
50795: PPUSH
50796: PPUSH
// if btype = b_depot then
50797: LD_VAR 0 2
50801: PUSH
50802: LD_INT 0
50804: EQUAL
50805: IFFALSE 50817
// begin result := true ;
50807: LD_ADDR_VAR 0 3
50811: PUSH
50812: LD_INT 1
50814: ST_TO_ADDR
// exit ;
50815: GO 50933
// end ; pom := GetBase ( depot ) ;
50817: LD_ADDR_VAR 0 4
50821: PUSH
50822: LD_VAR 0 1
50826: PPUSH
50827: CALL_OW 274
50831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50832: LD_ADDR_VAR 0 5
50836: PUSH
50837: LD_VAR 0 2
50841: PPUSH
50842: LD_VAR 0 1
50846: PPUSH
50847: CALL_OW 248
50851: PPUSH
50852: CALL_OW 450
50856: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50857: LD_ADDR_VAR 0 3
50861: PUSH
50862: LD_VAR 0 4
50866: PPUSH
50867: LD_INT 1
50869: PPUSH
50870: CALL_OW 275
50874: PUSH
50875: LD_VAR 0 5
50879: PUSH
50880: LD_INT 1
50882: ARRAY
50883: GREATEREQUAL
50884: PUSH
50885: LD_VAR 0 4
50889: PPUSH
50890: LD_INT 2
50892: PPUSH
50893: CALL_OW 275
50897: PUSH
50898: LD_VAR 0 5
50902: PUSH
50903: LD_INT 2
50905: ARRAY
50906: GREATEREQUAL
50907: AND
50908: PUSH
50909: LD_VAR 0 4
50913: PPUSH
50914: LD_INT 3
50916: PPUSH
50917: CALL_OW 275
50921: PUSH
50922: LD_VAR 0 5
50926: PUSH
50927: LD_INT 3
50929: ARRAY
50930: GREATEREQUAL
50931: AND
50932: ST_TO_ADDR
// end ;
50933: LD_VAR 0 3
50937: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50938: LD_INT 0
50940: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50941: LD_VAR 0 1
50945: PPUSH
50946: LD_VAR 0 2
50950: PPUSH
50951: LD_INT 0
50953: PPUSH
50954: LD_INT 0
50956: PPUSH
50957: LD_INT 1
50959: PPUSH
50960: LD_INT 0
50962: PPUSH
50963: CALL_OW 587
// end ;
50967: LD_VAR 0 3
50971: RET
// export function CenterOnNow ( unit ) ; begin
50972: LD_INT 0
50974: PPUSH
// result := IsInUnit ( unit ) ;
50975: LD_ADDR_VAR 0 2
50979: PUSH
50980: LD_VAR 0 1
50984: PPUSH
50985: CALL_OW 310
50989: ST_TO_ADDR
// if not result then
50990: LD_VAR 0 2
50994: NOT
50995: IFFALSE 51007
// result := unit ;
50997: LD_ADDR_VAR 0 2
51001: PUSH
51002: LD_VAR 0 1
51006: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51007: LD_VAR 0 1
51011: PPUSH
51012: CALL_OW 87
// end ;
51016: LD_VAR 0 2
51020: RET
// export function ComMoveHex ( unit , hex ) ; begin
51021: LD_INT 0
51023: PPUSH
// if not hex then
51024: LD_VAR 0 2
51028: NOT
51029: IFFALSE 51033
// exit ;
51031: GO 51086
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51033: LD_VAR 0 2
51037: PUSH
51038: LD_INT 1
51040: ARRAY
51041: PPUSH
51042: LD_VAR 0 2
51046: PUSH
51047: LD_INT 2
51049: ARRAY
51050: PPUSH
51051: CALL_OW 428
51055: IFFALSE 51059
// exit ;
51057: GO 51086
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51059: LD_VAR 0 1
51063: PPUSH
51064: LD_VAR 0 2
51068: PUSH
51069: LD_INT 1
51071: ARRAY
51072: PPUSH
51073: LD_VAR 0 2
51077: PUSH
51078: LD_INT 2
51080: ARRAY
51081: PPUSH
51082: CALL_OW 111
// end ;
51086: LD_VAR 0 3
51090: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51091: LD_INT 0
51093: PPUSH
51094: PPUSH
51095: PPUSH
// if not unit or not enemy then
51096: LD_VAR 0 1
51100: NOT
51101: PUSH
51102: LD_VAR 0 2
51106: NOT
51107: OR
51108: IFFALSE 51112
// exit ;
51110: GO 51236
// x := GetX ( enemy ) ;
51112: LD_ADDR_VAR 0 4
51116: PUSH
51117: LD_VAR 0 2
51121: PPUSH
51122: CALL_OW 250
51126: ST_TO_ADDR
// y := GetY ( enemy ) ;
51127: LD_ADDR_VAR 0 5
51131: PUSH
51132: LD_VAR 0 2
51136: PPUSH
51137: CALL_OW 251
51141: ST_TO_ADDR
// if ValidHex ( x , y ) then
51142: LD_VAR 0 4
51146: PPUSH
51147: LD_VAR 0 5
51151: PPUSH
51152: CALL_OW 488
51156: IFFALSE 51236
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51158: LD_VAR 0 2
51162: PPUSH
51163: CALL_OW 247
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: IN
51178: PUSH
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 255
51188: PPUSH
51189: LD_VAR 0 2
51193: PPUSH
51194: CALL_OW 292
51198: OR
51199: IFFALSE 51217
// ComAttackUnit ( unit , enemy ) else
51201: LD_VAR 0 1
51205: PPUSH
51206: LD_VAR 0 2
51210: PPUSH
51211: CALL_OW 115
51215: GO 51236
// ComAgressiveMove ( unit , x , y ) ;
51217: LD_VAR 0 1
51221: PPUSH
51222: LD_VAR 0 4
51226: PPUSH
51227: LD_VAR 0 5
51231: PPUSH
51232: CALL_OW 114
// end ;
51236: LD_VAR 0 3
51240: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51241: LD_INT 0
51243: PPUSH
51244: PPUSH
51245: PPUSH
// list := AreaToList ( area , 0 ) ;
51246: LD_ADDR_VAR 0 5
51250: PUSH
51251: LD_VAR 0 1
51255: PPUSH
51256: LD_INT 0
51258: PPUSH
51259: CALL_OW 517
51263: ST_TO_ADDR
// if not list then
51264: LD_VAR 0 5
51268: NOT
51269: IFFALSE 51273
// exit ;
51271: GO 51403
// if all then
51273: LD_VAR 0 2
51277: IFFALSE 51365
// begin for i := 1 to list [ 1 ] do
51279: LD_ADDR_VAR 0 4
51283: PUSH
51284: DOUBLE
51285: LD_INT 1
51287: DEC
51288: ST_TO_ADDR
51289: LD_VAR 0 5
51293: PUSH
51294: LD_INT 1
51296: ARRAY
51297: PUSH
51298: FOR_TO
51299: IFFALSE 51361
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51301: LD_ADDR_VAR 0 3
51305: PUSH
51306: LD_VAR 0 3
51310: PPUSH
51311: LD_VAR 0 3
51315: PUSH
51316: LD_INT 1
51318: PLUS
51319: PPUSH
51320: LD_VAR 0 5
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: PUSH
51329: LD_VAR 0 4
51333: ARRAY
51334: PUSH
51335: LD_VAR 0 5
51339: PUSH
51340: LD_INT 2
51342: ARRAY
51343: PUSH
51344: LD_VAR 0 4
51348: ARRAY
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PPUSH
51354: CALL_OW 1
51358: ST_TO_ADDR
51359: GO 51298
51361: POP
51362: POP
// exit ;
51363: GO 51403
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51365: LD_ADDR_VAR 0 3
51369: PUSH
51370: LD_VAR 0 5
51374: PUSH
51375: LD_INT 1
51377: ARRAY
51378: PUSH
51379: LD_INT 1
51381: ARRAY
51382: PUSH
51383: LD_VAR 0 5
51387: PUSH
51388: LD_INT 2
51390: ARRAY
51391: PUSH
51392: LD_INT 1
51394: ARRAY
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: EMPTY
51401: LIST
51402: ST_TO_ADDR
// end ;
51403: LD_VAR 0 3
51407: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51408: LD_INT 0
51410: PPUSH
51411: PPUSH
// list := AreaToList ( area , 0 ) ;
51412: LD_ADDR_VAR 0 4
51416: PUSH
51417: LD_VAR 0 1
51421: PPUSH
51422: LD_INT 0
51424: PPUSH
51425: CALL_OW 517
51429: ST_TO_ADDR
// if not list then
51430: LD_VAR 0 4
51434: NOT
51435: IFFALSE 51439
// exit ;
51437: GO 51480
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51439: LD_ADDR_VAR 0 3
51443: PUSH
51444: LD_VAR 0 4
51448: PUSH
51449: LD_INT 1
51451: ARRAY
51452: PUSH
51453: LD_INT 1
51455: ARRAY
51456: PUSH
51457: LD_VAR 0 4
51461: PUSH
51462: LD_INT 2
51464: ARRAY
51465: PUSH
51466: LD_INT 1
51468: ARRAY
51469: PUSH
51470: LD_VAR 0 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: ST_TO_ADDR
// end ;
51480: LD_VAR 0 3
51484: RET
// export function First ( array ) ; begin
51485: LD_INT 0
51487: PPUSH
// if not array then
51488: LD_VAR 0 1
51492: NOT
51493: IFFALSE 51497
// exit ;
51495: GO 51511
// result := array [ 1 ] ;
51497: LD_ADDR_VAR 0 2
51501: PUSH
51502: LD_VAR 0 1
51506: PUSH
51507: LD_INT 1
51509: ARRAY
51510: ST_TO_ADDR
// end ;
51511: LD_VAR 0 2
51515: RET
// export function Last ( array ) ; begin
51516: LD_INT 0
51518: PPUSH
// if not array then
51519: LD_VAR 0 1
51523: NOT
51524: IFFALSE 51528
// exit ;
51526: GO 51544
// result := array [ array ] ;
51528: LD_ADDR_VAR 0 2
51532: PUSH
51533: LD_VAR 0 1
51537: PUSH
51538: LD_VAR 0 1
51542: ARRAY
51543: ST_TO_ADDR
// end ;
51544: LD_VAR 0 2
51548: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51549: LD_INT 0
51551: PPUSH
51552: PPUSH
// result := [ ] ;
51553: LD_ADDR_VAR 0 5
51557: PUSH
51558: EMPTY
51559: ST_TO_ADDR
// if not array then
51560: LD_VAR 0 1
51564: NOT
51565: IFFALSE 51569
// exit ;
51567: GO 51681
// for i := 1 to array do
51569: LD_ADDR_VAR 0 6
51573: PUSH
51574: DOUBLE
51575: LD_INT 1
51577: DEC
51578: ST_TO_ADDR
51579: LD_VAR 0 1
51583: PUSH
51584: FOR_TO
51585: IFFALSE 51679
// if array [ i ] [ index ] = value then
51587: LD_VAR 0 1
51591: PUSH
51592: LD_VAR 0 6
51596: ARRAY
51597: PUSH
51598: LD_VAR 0 2
51602: ARRAY
51603: PUSH
51604: LD_VAR 0 3
51608: EQUAL
51609: IFFALSE 51677
// begin if indexColumn then
51611: LD_VAR 0 4
51615: IFFALSE 51651
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51617: LD_ADDR_VAR 0 5
51621: PUSH
51622: LD_VAR 0 5
51626: PPUSH
51627: LD_VAR 0 1
51631: PUSH
51632: LD_VAR 0 6
51636: ARRAY
51637: PUSH
51638: LD_VAR 0 4
51642: ARRAY
51643: PPUSH
51644: CALL 46869 0 2
51648: ST_TO_ADDR
51649: GO 51677
// result := Join ( result , array [ i ] ) ;
51651: LD_ADDR_VAR 0 5
51655: PUSH
51656: LD_VAR 0 5
51660: PPUSH
51661: LD_VAR 0 1
51665: PUSH
51666: LD_VAR 0 6
51670: ARRAY
51671: PPUSH
51672: CALL 46869 0 2
51676: ST_TO_ADDR
// end ;
51677: GO 51584
51679: POP
51680: POP
// end ;
51681: LD_VAR 0 5
51685: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51686: LD_INT 0
51688: PPUSH
// if not vehicles or not parkingPoint then
51689: LD_VAR 0 1
51693: NOT
51694: PUSH
51695: LD_VAR 0 2
51699: NOT
51700: OR
51701: IFFALSE 51705
// exit ;
51703: GO 51803
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51705: LD_ADDR_VAR 0 1
51709: PUSH
51710: LD_VAR 0 1
51714: PPUSH
51715: LD_INT 50
51717: PUSH
51718: EMPTY
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: LD_INT 92
51726: PUSH
51727: LD_VAR 0 2
51731: PUSH
51732: LD_INT 1
51734: ARRAY
51735: PUSH
51736: LD_VAR 0 2
51740: PUSH
51741: LD_INT 2
51743: ARRAY
51744: PUSH
51745: LD_INT 8
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PPUSH
51762: CALL_OW 72
51766: ST_TO_ADDR
// if not vehicles then
51767: LD_VAR 0 1
51771: NOT
51772: IFFALSE 51776
// exit ;
51774: GO 51803
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51776: LD_VAR 0 1
51780: PPUSH
51781: LD_VAR 0 2
51785: PUSH
51786: LD_INT 1
51788: ARRAY
51789: PPUSH
51790: LD_VAR 0 2
51794: PUSH
51795: LD_INT 2
51797: ARRAY
51798: PPUSH
51799: CALL_OW 111
// end ;
51803: LD_VAR 0 3
51807: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51808: LD_INT 0
51810: PPUSH
51811: PPUSH
51812: PPUSH
// if not side or not area then
51813: LD_VAR 0 1
51817: NOT
51818: PUSH
51819: LD_VAR 0 2
51823: NOT
51824: OR
51825: IFFALSE 51829
// exit ;
51827: GO 51948
// tmp := AreaToList ( area , 0 ) ;
51829: LD_ADDR_VAR 0 5
51833: PUSH
51834: LD_VAR 0 2
51838: PPUSH
51839: LD_INT 0
51841: PPUSH
51842: CALL_OW 517
51846: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51847: LD_ADDR_VAR 0 4
51851: PUSH
51852: DOUBLE
51853: LD_INT 1
51855: DEC
51856: ST_TO_ADDR
51857: LD_VAR 0 5
51861: PUSH
51862: LD_INT 1
51864: ARRAY
51865: PUSH
51866: FOR_TO
51867: IFFALSE 51946
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51869: LD_VAR 0 5
51873: PUSH
51874: LD_INT 1
51876: ARRAY
51877: PUSH
51878: LD_VAR 0 4
51882: ARRAY
51883: PPUSH
51884: LD_VAR 0 5
51888: PUSH
51889: LD_INT 2
51891: ARRAY
51892: PUSH
51893: LD_VAR 0 4
51897: ARRAY
51898: PPUSH
51899: CALL_OW 351
51903: IFFALSE 51944
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51905: LD_VAR 0 5
51909: PUSH
51910: LD_INT 1
51912: ARRAY
51913: PUSH
51914: LD_VAR 0 4
51918: ARRAY
51919: PPUSH
51920: LD_VAR 0 5
51924: PUSH
51925: LD_INT 2
51927: ARRAY
51928: PUSH
51929: LD_VAR 0 4
51933: ARRAY
51934: PPUSH
51935: LD_VAR 0 1
51939: PPUSH
51940: CALL_OW 244
// end ;
51944: GO 51866
51946: POP
51947: POP
// end ; end_of_file
51948: LD_VAR 0 3
51952: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
51953: LD_VAR 0 1
51957: PUSH
51958: LD_INT 200
51960: DOUBLE
51961: GREATEREQUAL
51962: IFFALSE 51970
51964: LD_INT 299
51966: DOUBLE
51967: LESSEQUAL
51968: IFTRUE 51972
51970: GO 52004
51972: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
51973: LD_VAR 0 1
51977: PPUSH
51978: LD_VAR 0 2
51982: PPUSH
51983: LD_VAR 0 3
51987: PPUSH
51988: LD_VAR 0 4
51992: PPUSH
51993: LD_VAR 0 5
51997: PPUSH
51998: CALL 52701 0 5
52002: GO 52081
52004: LD_INT 300
52006: DOUBLE
52007: GREATEREQUAL
52008: IFFALSE 52016
52010: LD_INT 399
52012: DOUBLE
52013: LESSEQUAL
52014: IFTRUE 52018
52016: GO 52080
52018: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52019: LD_VAR 0 1
52023: PPUSH
52024: LD_VAR 0 2
52028: PPUSH
52029: LD_VAR 0 3
52033: PPUSH
52034: LD_VAR 0 4
52038: PPUSH
52039: LD_VAR 0 5
52043: PPUSH
52044: LD_VAR 0 6
52048: PPUSH
52049: LD_VAR 0 7
52053: PPUSH
52054: LD_VAR 0 8
52058: PPUSH
52059: LD_VAR 0 9
52063: PPUSH
52064: LD_VAR 0 10
52068: PPUSH
52069: LD_VAR 0 11
52073: PPUSH
52074: CALL 59028 0 11
52078: GO 52081
52080: POP
// end ;
52081: PPOPN 11
52083: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52084: LD_VAR 0 1
52088: PPUSH
52089: LD_VAR 0 2
52093: PPUSH
52094: LD_VAR 0 3
52098: PPUSH
52099: LD_VAR 0 4
52103: PPUSH
52104: LD_VAR 0 5
52108: PPUSH
52109: CALL 52166 0 5
// end ; end_of_file
52113: PPOPN 5
52115: END
// export function SOS_UnitDestroyed ( un ) ; begin
52116: LD_INT 0
52118: PPUSH
// ComRadiation ( un ) ;
52119: LD_VAR 0 1
52123: PPUSH
52124: CALL 53105 0 1
// end ;
52128: LD_VAR 0 2
52132: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52133: LD_INT 0
52135: PPUSH
// ComRadiation ( un ) ;
52136: LD_VAR 0 1
52140: PPUSH
52141: CALL 53105 0 1
// end ;
52145: LD_VAR 0 2
52149: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52150: LD_INT 0
52152: PPUSH
// end ;
52153: LD_VAR 0 4
52157: RET
// export function SOS_Command ( cmd ) ; begin
52158: LD_INT 0
52160: PPUSH
// end ;
52161: LD_VAR 0 2
52165: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52166: LD_INT 0
52168: PPUSH
// end ;
52169: LD_VAR 0 6
52173: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
52174: LD_INT 0
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
// if not vehicle or not factory then
52181: LD_VAR 0 1
52185: NOT
52186: PUSH
52187: LD_VAR 0 2
52191: NOT
52192: OR
52193: IFFALSE 52197
// exit ;
52195: GO 52696
// if not factoryWaypoints then
52197: LD_EXP 54
52201: NOT
52202: IFFALSE 52206
// exit ;
52204: GO 52696
// for i := 1 to Count ( factoryWaypoints ) do
52206: LD_ADDR_VAR 0 4
52210: PUSH
52211: DOUBLE
52212: LD_INT 1
52214: DEC
52215: ST_TO_ADDR
52216: LD_EXP 54
52220: PPUSH
52221: CALL 11260 0 1
52225: PUSH
52226: FOR_TO
52227: IFFALSE 52694
// if factoryWaypoints [ i ] [ 2 ] = factory then
52229: LD_EXP 54
52233: PUSH
52234: LD_VAR 0 4
52238: ARRAY
52239: PUSH
52240: LD_INT 2
52242: ARRAY
52243: PUSH
52244: LD_VAR 0 2
52248: EQUAL
52249: IFFALSE 52692
// begin if GetControl ( vehicle ) = control_manual then
52251: LD_VAR 0 1
52255: PPUSH
52256: CALL_OW 263
52260: PUSH
52261: LD_INT 1
52263: EQUAL
52264: IFFALSE 52575
// begin driver := IsDrivenBy ( vehicle ) ;
52266: LD_ADDR_VAR 0 6
52270: PUSH
52271: LD_VAR 0 1
52275: PPUSH
52276: CALL_OW 311
52280: ST_TO_ADDR
// tag := GetTag ( driver ) ;
52281: LD_ADDR_VAR 0 5
52285: PUSH
52286: LD_VAR 0 6
52290: PPUSH
52291: CALL_OW 110
52295: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
52296: LD_VAR 0 5
52300: PUSH
52301: LD_INT 501
52303: EQUAL
52304: PUSH
52305: LD_VAR 0 1
52309: PPUSH
52310: CALL_OW 110
52314: PUSH
52315: LD_INT 501
52317: EQUAL
52318: OR
52319: IFFALSE 52325
// exit ;
52321: POP
52322: POP
52323: GO 52696
// if not HasTask ( driver ) then
52325: LD_VAR 0 6
52329: PPUSH
52330: CALL_OW 314
52334: NOT
52335: IFFALSE 52573
// begin SetTag ( driver , tDriver ) ;
52337: LD_VAR 0 6
52341: PPUSH
52342: LD_INT 501
52344: PPUSH
52345: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
52349: LD_VAR 0 1
52353: PPUSH
52354: LD_INT 501
52356: PPUSH
52357: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52361: LD_ADDR_VAR 0 7
52365: PUSH
52366: LD_EXP 54
52370: PUSH
52371: LD_VAR 0 4
52375: ARRAY
52376: PUSH
52377: LD_INT 3
52379: ARRAY
52380: PPUSH
52381: LD_EXP 54
52385: PUSH
52386: LD_VAR 0 4
52390: ARRAY
52391: PUSH
52392: LD_INT 4
52394: ARRAY
52395: PPUSH
52396: CALL_OW 428
52400: ST_TO_ADDR
// if hex then
52401: LD_VAR 0 7
52405: IFFALSE 52423
// ComMoveUnit ( driver , hex ) else
52407: LD_VAR 0 6
52411: PPUSH
52412: LD_VAR 0 7
52416: PPUSH
52417: CALL_OW 112
52421: GO 52462
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52423: LD_VAR 0 6
52427: PPUSH
52428: LD_EXP 54
52432: PUSH
52433: LD_VAR 0 4
52437: ARRAY
52438: PUSH
52439: LD_INT 3
52441: ARRAY
52442: PPUSH
52443: LD_EXP 54
52447: PUSH
52448: LD_VAR 0 4
52452: ARRAY
52453: PUSH
52454: LD_INT 4
52456: ARRAY
52457: PPUSH
52458: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52462: LD_VAR 0 6
52466: PPUSH
52467: CALL_OW 181
// if Multiplayer then
52471: LD_OWVAR 4
52475: IFFALSE 52524
// begin repeat wait ( 10 ) ;
52477: LD_INT 10
52479: PPUSH
52480: CALL_OW 67
// until not IsInUnit ( driver ) ;
52484: LD_VAR 0 6
52488: PPUSH
52489: CALL_OW 310
52493: NOT
52494: IFFALSE 52477
// if not HasTask ( driver ) then
52496: LD_VAR 0 6
52500: PPUSH
52501: CALL_OW 314
52505: NOT
52506: IFFALSE 52522
// ComEnterUnit ( driver , factory ) ;
52508: LD_VAR 0 6
52512: PPUSH
52513: LD_VAR 0 2
52517: PPUSH
52518: CALL_OW 120
// end else
52522: GO 52538
// AddComEnterUnit ( driver , factory ) ;
52524: LD_VAR 0 6
52528: PPUSH
52529: LD_VAR 0 2
52533: PPUSH
52534: CALL_OW 180
// wait ( 0 0$1 ) ;
52538: LD_INT 35
52540: PPUSH
52541: CALL_OW 67
// SetTag ( driver , tag ) ;
52545: LD_VAR 0 6
52549: PPUSH
52550: LD_VAR 0 5
52554: PPUSH
52555: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
52559: LD_VAR 0 1
52563: PPUSH
52564: LD_INT 0
52566: PPUSH
52567: CALL_OW 109
// break ;
52571: GO 52694
// end ; end else
52573: GO 52692
// if GetControl ( vehicle ) = control_remote then
52575: LD_VAR 0 1
52579: PPUSH
52580: CALL_OW 263
52584: PUSH
52585: LD_INT 2
52587: EQUAL
52588: IFFALSE 52651
// begin wait ( 0 0$2 ) ;
52590: LD_INT 70
52592: PPUSH
52593: CALL_OW 67
// if Connect ( vehicle ) then
52597: LD_VAR 0 1
52601: PPUSH
52602: CALL 17466 0 1
52606: IFFALSE 52647
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52608: LD_VAR 0 1
52612: PPUSH
52613: LD_EXP 54
52617: PUSH
52618: LD_VAR 0 4
52622: ARRAY
52623: PUSH
52624: LD_INT 3
52626: ARRAY
52627: PPUSH
52628: LD_EXP 54
52632: PUSH
52633: LD_VAR 0 4
52637: ARRAY
52638: PUSH
52639: LD_INT 4
52641: ARRAY
52642: PPUSH
52643: CALL_OW 171
// break ;
52647: GO 52694
// end else
52649: GO 52692
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52651: LD_VAR 0 1
52655: PPUSH
52656: LD_EXP 54
52660: PUSH
52661: LD_VAR 0 4
52665: ARRAY
52666: PUSH
52667: LD_INT 3
52669: ARRAY
52670: PPUSH
52671: LD_EXP 54
52675: PUSH
52676: LD_VAR 0 4
52680: ARRAY
52681: PUSH
52682: LD_INT 4
52684: ARRAY
52685: PPUSH
52686: CALL_OW 171
// break ;
52690: GO 52694
// end ; end ;
52692: GO 52226
52694: POP
52695: POP
// end ;
52696: LD_VAR 0 3
52700: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52701: LD_INT 0
52703: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52704: LD_VAR 0 1
52708: PUSH
52709: LD_INT 250
52711: EQUAL
52712: PUSH
52713: LD_VAR 0 2
52717: PPUSH
52718: CALL_OW 264
52722: PUSH
52723: LD_INT 81
52725: EQUAL
52726: AND
52727: IFFALSE 52748
// MinerPlaceMine ( unit , x , y ) ;
52729: LD_VAR 0 2
52733: PPUSH
52734: LD_VAR 0 4
52738: PPUSH
52739: LD_VAR 0 5
52743: PPUSH
52744: CALL 55840 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52748: LD_VAR 0 1
52752: PUSH
52753: LD_INT 251
52755: EQUAL
52756: PUSH
52757: LD_VAR 0 2
52761: PPUSH
52762: CALL_OW 264
52766: PUSH
52767: LD_INT 81
52769: EQUAL
52770: AND
52771: IFFALSE 52792
// MinerDetonateMine ( unit , x , y ) ;
52773: LD_VAR 0 2
52777: PPUSH
52778: LD_VAR 0 4
52782: PPUSH
52783: LD_VAR 0 5
52787: PPUSH
52788: CALL 56115 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52792: LD_VAR 0 1
52796: PUSH
52797: LD_INT 252
52799: EQUAL
52800: PUSH
52801: LD_VAR 0 2
52805: PPUSH
52806: CALL_OW 264
52810: PUSH
52811: LD_INT 81
52813: EQUAL
52814: AND
52815: IFFALSE 52836
// MinerCreateMinefield ( unit , x , y ) ;
52817: LD_VAR 0 2
52821: PPUSH
52822: LD_VAR 0 4
52826: PPUSH
52827: LD_VAR 0 5
52831: PPUSH
52832: CALL 56532 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52836: LD_VAR 0 1
52840: PUSH
52841: LD_INT 253
52843: EQUAL
52844: PUSH
52845: LD_VAR 0 2
52849: PPUSH
52850: CALL_OW 257
52854: PUSH
52855: LD_INT 5
52857: EQUAL
52858: AND
52859: IFFALSE 52880
// ComBinocular ( unit , x , y ) ;
52861: LD_VAR 0 2
52865: PPUSH
52866: LD_VAR 0 4
52870: PPUSH
52871: LD_VAR 0 5
52875: PPUSH
52876: CALL 56901 0 3
// if selectedUnit then
52880: LD_VAR 0 3
52884: IFFALSE 52940
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52886: LD_VAR 0 1
52890: PUSH
52891: LD_INT 254
52893: EQUAL
52894: PUSH
52895: LD_VAR 0 2
52899: PPUSH
52900: CALL_OW 264
52904: PUSH
52905: LD_INT 99
52907: EQUAL
52908: AND
52909: PUSH
52910: LD_VAR 0 3
52914: PPUSH
52915: CALL_OW 263
52919: PUSH
52920: LD_INT 3
52922: EQUAL
52923: AND
52924: IFFALSE 52940
// HackDestroyVehicle ( unit , selectedUnit ) ;
52926: LD_VAR 0 2
52930: PPUSH
52931: LD_VAR 0 3
52935: PPUSH
52936: CALL 55204 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52940: LD_VAR 0 1
52944: PUSH
52945: LD_INT 255
52947: EQUAL
52948: PUSH
52949: LD_VAR 0 2
52953: PPUSH
52954: CALL_OW 264
52958: PUSH
52959: LD_INT 14
52961: PUSH
52962: LD_INT 53
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: IN
52969: AND
52970: PUSH
52971: LD_VAR 0 4
52975: PPUSH
52976: LD_VAR 0 5
52980: PPUSH
52981: CALL_OW 488
52985: AND
52986: IFFALSE 53010
// CutTreeXYR ( unit , x , y , 12 ) ;
52988: LD_VAR 0 2
52992: PPUSH
52993: LD_VAR 0 4
52997: PPUSH
52998: LD_VAR 0 5
53002: PPUSH
53003: LD_INT 12
53005: PPUSH
53006: CALL 53201 0 4
// if cmd = 256 then
53010: LD_VAR 0 1
53014: PUSH
53015: LD_INT 256
53017: EQUAL
53018: IFFALSE 53039
// SetFactoryWaypoint ( unit , x , y ) ;
53020: LD_VAR 0 2
53024: PPUSH
53025: LD_VAR 0 4
53029: PPUSH
53030: LD_VAR 0 5
53034: PPUSH
53035: CALL 59036 0 3
// if cmd = 257 then
53039: LD_VAR 0 1
53043: PUSH
53044: LD_INT 257
53046: EQUAL
53047: IFFALSE 53068
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53049: LD_VAR 0 2
53053: PPUSH
53054: LD_VAR 0 4
53058: PPUSH
53059: LD_VAR 0 5
53063: PPUSH
53064: CALL 59526 0 3
// if cmd = 258 then
53068: LD_VAR 0 1
53072: PUSH
53073: LD_INT 258
53075: EQUAL
53076: IFFALSE 53100
// BurnTreeXYR ( unit , x , y , 8 ) ;
53078: LD_VAR 0 2
53082: PPUSH
53083: LD_VAR 0 4
53087: PPUSH
53088: LD_VAR 0 5
53092: PPUSH
53093: LD_INT 8
53095: PPUSH
53096: CALL 53595 0 4
// end ;
53100: LD_VAR 0 6
53104: RET
// export function ComRadiation ( un ) ; var eff ; begin
53105: LD_INT 0
53107: PPUSH
53108: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53109: LD_VAR 0 1
53113: PPUSH
53114: CALL_OW 264
53118: PUSH
53119: LD_INT 91
53121: NONEQUAL
53122: IFFALSE 53126
// exit ;
53124: GO 53196
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53126: LD_INT 68
53128: PPUSH
53129: LD_VAR 0 1
53133: PPUSH
53134: CALL_OW 255
53138: PPUSH
53139: CALL_OW 321
53143: PUSH
53144: LD_INT 2
53146: EQUAL
53147: IFFALSE 53159
// eff := 70 else
53149: LD_ADDR_VAR 0 3
53153: PUSH
53154: LD_INT 70
53156: ST_TO_ADDR
53157: GO 53167
// eff := 30 ;
53159: LD_ADDR_VAR 0 3
53163: PUSH
53164: LD_INT 30
53166: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53167: LD_VAR 0 1
53171: PPUSH
53172: CALL_OW 250
53176: PPUSH
53177: LD_VAR 0 1
53181: PPUSH
53182: CALL_OW 251
53186: PPUSH
53187: LD_VAR 0 3
53191: PPUSH
53192: CALL_OW 495
// end ;
53196: LD_VAR 0 2
53200: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53201: LD_INT 0
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53212: LD_VAR 0 1
53216: PPUSH
53217: CALL_OW 302
53221: NOT
53222: PUSH
53223: LD_VAR 0 2
53227: PPUSH
53228: LD_VAR 0 3
53232: PPUSH
53233: CALL_OW 488
53237: NOT
53238: OR
53239: PUSH
53240: LD_VAR 0 4
53244: NOT
53245: OR
53246: IFFALSE 53250
// exit ;
53248: GO 53590
// list := [ ] ;
53250: LD_ADDR_VAR 0 13
53254: PUSH
53255: EMPTY
53256: ST_TO_ADDR
// if x - r < 0 then
53257: LD_VAR 0 2
53261: PUSH
53262: LD_VAR 0 4
53266: MINUS
53267: PUSH
53268: LD_INT 0
53270: LESS
53271: IFFALSE 53283
// min_x := 0 else
53273: LD_ADDR_VAR 0 7
53277: PUSH
53278: LD_INT 0
53280: ST_TO_ADDR
53281: GO 53299
// min_x := x - r ;
53283: LD_ADDR_VAR 0 7
53287: PUSH
53288: LD_VAR 0 2
53292: PUSH
53293: LD_VAR 0 4
53297: MINUS
53298: ST_TO_ADDR
// if y - r < 0 then
53299: LD_VAR 0 3
53303: PUSH
53304: LD_VAR 0 4
53308: MINUS
53309: PUSH
53310: LD_INT 0
53312: LESS
53313: IFFALSE 53325
// min_y := 0 else
53315: LD_ADDR_VAR 0 8
53319: PUSH
53320: LD_INT 0
53322: ST_TO_ADDR
53323: GO 53341
// min_y := y - r ;
53325: LD_ADDR_VAR 0 8
53329: PUSH
53330: LD_VAR 0 3
53334: PUSH
53335: LD_VAR 0 4
53339: MINUS
53340: ST_TO_ADDR
// max_x := x + r ;
53341: LD_ADDR_VAR 0 9
53345: PUSH
53346: LD_VAR 0 2
53350: PUSH
53351: LD_VAR 0 4
53355: PLUS
53356: ST_TO_ADDR
// max_y := y + r ;
53357: LD_ADDR_VAR 0 10
53361: PUSH
53362: LD_VAR 0 3
53366: PUSH
53367: LD_VAR 0 4
53371: PLUS
53372: ST_TO_ADDR
// for _x = min_x to max_x do
53373: LD_ADDR_VAR 0 11
53377: PUSH
53378: DOUBLE
53379: LD_VAR 0 7
53383: DEC
53384: ST_TO_ADDR
53385: LD_VAR 0 9
53389: PUSH
53390: FOR_TO
53391: IFFALSE 53508
// for _y = min_y to max_y do
53393: LD_ADDR_VAR 0 12
53397: PUSH
53398: DOUBLE
53399: LD_VAR 0 8
53403: DEC
53404: ST_TO_ADDR
53405: LD_VAR 0 10
53409: PUSH
53410: FOR_TO
53411: IFFALSE 53504
// begin if not ValidHex ( _x , _y ) then
53413: LD_VAR 0 11
53417: PPUSH
53418: LD_VAR 0 12
53422: PPUSH
53423: CALL_OW 488
53427: NOT
53428: IFFALSE 53432
// continue ;
53430: GO 53410
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53432: LD_VAR 0 11
53436: PPUSH
53437: LD_VAR 0 12
53441: PPUSH
53442: CALL_OW 351
53446: PUSH
53447: LD_VAR 0 11
53451: PPUSH
53452: LD_VAR 0 12
53456: PPUSH
53457: CALL_OW 554
53461: AND
53462: IFFALSE 53502
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53464: LD_ADDR_VAR 0 13
53468: PUSH
53469: LD_VAR 0 13
53473: PPUSH
53474: LD_VAR 0 13
53478: PUSH
53479: LD_INT 1
53481: PLUS
53482: PPUSH
53483: LD_VAR 0 11
53487: PUSH
53488: LD_VAR 0 12
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PPUSH
53497: CALL_OW 2
53501: ST_TO_ADDR
// end ;
53502: GO 53410
53504: POP
53505: POP
53506: GO 53390
53508: POP
53509: POP
// if not list then
53510: LD_VAR 0 13
53514: NOT
53515: IFFALSE 53519
// exit ;
53517: GO 53590
// for i in list do
53519: LD_ADDR_VAR 0 6
53523: PUSH
53524: LD_VAR 0 13
53528: PUSH
53529: FOR_IN
53530: IFFALSE 53588
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53532: LD_VAR 0 1
53536: PPUSH
53537: LD_STRING M
53539: PUSH
53540: LD_VAR 0 6
53544: PUSH
53545: LD_INT 1
53547: ARRAY
53548: PUSH
53549: LD_VAR 0 6
53553: PUSH
53554: LD_INT 2
53556: ARRAY
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: PPUSH
53582: CALL_OW 447
53586: GO 53529
53588: POP
53589: POP
// end ;
53590: LD_VAR 0 5
53594: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53595: LD_INT 0
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
53606: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53607: LD_VAR 0 1
53611: PPUSH
53612: CALL_OW 302
53616: NOT
53617: PUSH
53618: LD_VAR 0 2
53622: PPUSH
53623: LD_VAR 0 3
53627: PPUSH
53628: CALL_OW 488
53632: NOT
53633: OR
53634: PUSH
53635: LD_VAR 0 4
53639: NOT
53640: OR
53641: IFFALSE 53645
// exit ;
53643: GO 54158
// list := [ ] ;
53645: LD_ADDR_VAR 0 13
53649: PUSH
53650: EMPTY
53651: ST_TO_ADDR
// if x - r < 0 then
53652: LD_VAR 0 2
53656: PUSH
53657: LD_VAR 0 4
53661: MINUS
53662: PUSH
53663: LD_INT 0
53665: LESS
53666: IFFALSE 53678
// min_x := 0 else
53668: LD_ADDR_VAR 0 7
53672: PUSH
53673: LD_INT 0
53675: ST_TO_ADDR
53676: GO 53694
// min_x := x - r ;
53678: LD_ADDR_VAR 0 7
53682: PUSH
53683: LD_VAR 0 2
53687: PUSH
53688: LD_VAR 0 4
53692: MINUS
53693: ST_TO_ADDR
// if y - r < 0 then
53694: LD_VAR 0 3
53698: PUSH
53699: LD_VAR 0 4
53703: MINUS
53704: PUSH
53705: LD_INT 0
53707: LESS
53708: IFFALSE 53720
// min_y := 0 else
53710: LD_ADDR_VAR 0 8
53714: PUSH
53715: LD_INT 0
53717: ST_TO_ADDR
53718: GO 53736
// min_y := y - r ;
53720: LD_ADDR_VAR 0 8
53724: PUSH
53725: LD_VAR 0 3
53729: PUSH
53730: LD_VAR 0 4
53734: MINUS
53735: ST_TO_ADDR
// max_x := x + r ;
53736: LD_ADDR_VAR 0 9
53740: PUSH
53741: LD_VAR 0 2
53745: PUSH
53746: LD_VAR 0 4
53750: PLUS
53751: ST_TO_ADDR
// max_y := y + r ;
53752: LD_ADDR_VAR 0 10
53756: PUSH
53757: LD_VAR 0 3
53761: PUSH
53762: LD_VAR 0 4
53766: PLUS
53767: ST_TO_ADDR
// for _x = min_x to max_x do
53768: LD_ADDR_VAR 0 11
53772: PUSH
53773: DOUBLE
53774: LD_VAR 0 7
53778: DEC
53779: ST_TO_ADDR
53780: LD_VAR 0 9
53784: PUSH
53785: FOR_TO
53786: IFFALSE 53903
// for _y = min_y to max_y do
53788: LD_ADDR_VAR 0 12
53792: PUSH
53793: DOUBLE
53794: LD_VAR 0 8
53798: DEC
53799: ST_TO_ADDR
53800: LD_VAR 0 10
53804: PUSH
53805: FOR_TO
53806: IFFALSE 53899
// begin if not ValidHex ( _x , _y ) then
53808: LD_VAR 0 11
53812: PPUSH
53813: LD_VAR 0 12
53817: PPUSH
53818: CALL_OW 488
53822: NOT
53823: IFFALSE 53827
// continue ;
53825: GO 53805
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53827: LD_VAR 0 11
53831: PPUSH
53832: LD_VAR 0 12
53836: PPUSH
53837: CALL_OW 351
53841: PUSH
53842: LD_VAR 0 11
53846: PPUSH
53847: LD_VAR 0 12
53851: PPUSH
53852: CALL_OW 554
53856: AND
53857: IFFALSE 53897
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53859: LD_ADDR_VAR 0 13
53863: PUSH
53864: LD_VAR 0 13
53868: PPUSH
53869: LD_VAR 0 13
53873: PUSH
53874: LD_INT 1
53876: PLUS
53877: PPUSH
53878: LD_VAR 0 11
53882: PUSH
53883: LD_VAR 0 12
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PPUSH
53892: CALL_OW 2
53896: ST_TO_ADDR
// end ;
53897: GO 53805
53899: POP
53900: POP
53901: GO 53785
53903: POP
53904: POP
// if not list then
53905: LD_VAR 0 13
53909: NOT
53910: IFFALSE 53914
// exit ;
53912: GO 54158
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
53914: LD_ADDR_VAR 0 13
53918: PUSH
53919: LD_VAR 0 1
53923: PPUSH
53924: LD_VAR 0 13
53928: PPUSH
53929: LD_INT 1
53931: PPUSH
53932: LD_INT 1
53934: PPUSH
53935: CALL 14608 0 4
53939: ST_TO_ADDR
// ComStop ( flame ) ;
53940: LD_VAR 0 1
53944: PPUSH
53945: CALL_OW 141
// for i in list do
53949: LD_ADDR_VAR 0 6
53953: PUSH
53954: LD_VAR 0 13
53958: PUSH
53959: FOR_IN
53960: IFFALSE 53991
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
53962: LD_VAR 0 1
53966: PPUSH
53967: LD_VAR 0 6
53971: PUSH
53972: LD_INT 1
53974: ARRAY
53975: PPUSH
53976: LD_VAR 0 6
53980: PUSH
53981: LD_INT 2
53983: ARRAY
53984: PPUSH
53985: CALL_OW 176
53989: GO 53959
53991: POP
53992: POP
// repeat wait ( 0 0$1 ) ;
53993: LD_INT 35
53995: PPUSH
53996: CALL_OW 67
// task := GetTaskList ( flame ) ;
54000: LD_ADDR_VAR 0 14
54004: PUSH
54005: LD_VAR 0 1
54009: PPUSH
54010: CALL_OW 437
54014: ST_TO_ADDR
// if not task then
54015: LD_VAR 0 14
54019: NOT
54020: IFFALSE 54024
// exit ;
54022: GO 54158
// if task [ 1 ] [ 1 ] <> | then
54024: LD_VAR 0 14
54028: PUSH
54029: LD_INT 1
54031: ARRAY
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: PUSH
54037: LD_STRING |
54039: NONEQUAL
54040: IFFALSE 54044
// exit ;
54042: GO 54158
// _x := task [ 1 ] [ 2 ] ;
54044: LD_ADDR_VAR 0 11
54048: PUSH
54049: LD_VAR 0 14
54053: PUSH
54054: LD_INT 1
54056: ARRAY
54057: PUSH
54058: LD_INT 2
54060: ARRAY
54061: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54062: LD_ADDR_VAR 0 12
54066: PUSH
54067: LD_VAR 0 14
54071: PUSH
54072: LD_INT 1
54074: ARRAY
54075: PUSH
54076: LD_INT 3
54078: ARRAY
54079: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54080: LD_VAR 0 11
54084: PPUSH
54085: LD_VAR 0 12
54089: PPUSH
54090: CALL_OW 351
54094: NOT
54095: PUSH
54096: LD_VAR 0 11
54100: PPUSH
54101: LD_VAR 0 12
54105: PPUSH
54106: CALL_OW 554
54110: NOT
54111: OR
54112: IFFALSE 54146
// begin task := Delete ( task , 1 ) ;
54114: LD_ADDR_VAR 0 14
54118: PUSH
54119: LD_VAR 0 14
54123: PPUSH
54124: LD_INT 1
54126: PPUSH
54127: CALL_OW 3
54131: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54132: LD_VAR 0 1
54136: PPUSH
54137: LD_VAR 0 14
54141: PPUSH
54142: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54146: LD_VAR 0 1
54150: PPUSH
54151: CALL_OW 314
54155: NOT
54156: IFFALSE 53993
// end ;
54158: LD_VAR 0 5
54162: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54163: LD_EXP 43
54167: NOT
54168: IFFALSE 54218
54170: GO 54172
54172: DISABLE
// begin initHack := true ;
54173: LD_ADDR_EXP 43
54177: PUSH
54178: LD_INT 1
54180: ST_TO_ADDR
// hackTanks := [ ] ;
54181: LD_ADDR_EXP 44
54185: PUSH
54186: EMPTY
54187: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54188: LD_ADDR_EXP 45
54192: PUSH
54193: EMPTY
54194: ST_TO_ADDR
// hackLimit := 3 ;
54195: LD_ADDR_EXP 46
54199: PUSH
54200: LD_INT 3
54202: ST_TO_ADDR
// hackDist := 12 ;
54203: LD_ADDR_EXP 47
54207: PUSH
54208: LD_INT 12
54210: ST_TO_ADDR
// hackCounter := [ ] ;
54211: LD_ADDR_EXP 48
54215: PUSH
54216: EMPTY
54217: ST_TO_ADDR
// end ;
54218: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54219: LD_EXP 43
54223: PUSH
54224: LD_INT 34
54226: PUSH
54227: LD_INT 99
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PPUSH
54234: CALL_OW 69
54238: AND
54239: IFFALSE 54492
54241: GO 54243
54243: DISABLE
54244: LD_INT 0
54246: PPUSH
54247: PPUSH
// begin enable ;
54248: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54249: LD_ADDR_VAR 0 1
54253: PUSH
54254: LD_INT 34
54256: PUSH
54257: LD_INT 99
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PPUSH
54264: CALL_OW 69
54268: PUSH
54269: FOR_IN
54270: IFFALSE 54490
// begin if not i in hackTanks then
54272: LD_VAR 0 1
54276: PUSH
54277: LD_EXP 44
54281: IN
54282: NOT
54283: IFFALSE 54366
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54285: LD_ADDR_EXP 44
54289: PUSH
54290: LD_EXP 44
54294: PPUSH
54295: LD_EXP 44
54299: PUSH
54300: LD_INT 1
54302: PLUS
54303: PPUSH
54304: LD_VAR 0 1
54308: PPUSH
54309: CALL_OW 1
54313: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54314: LD_ADDR_EXP 45
54318: PUSH
54319: LD_EXP 45
54323: PPUSH
54324: LD_EXP 45
54328: PUSH
54329: LD_INT 1
54331: PLUS
54332: PPUSH
54333: EMPTY
54334: PPUSH
54335: CALL_OW 1
54339: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54340: LD_ADDR_EXP 48
54344: PUSH
54345: LD_EXP 48
54349: PPUSH
54350: LD_EXP 48
54354: PUSH
54355: LD_INT 1
54357: PLUS
54358: PPUSH
54359: EMPTY
54360: PPUSH
54361: CALL_OW 1
54365: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL_OW 302
54375: NOT
54376: IFFALSE 54389
// begin HackUnlinkAll ( i ) ;
54378: LD_VAR 0 1
54382: PPUSH
54383: CALL 54495 0 1
// continue ;
54387: GO 54269
// end ; HackCheckCapturedStatus ( i ) ;
54389: LD_VAR 0 1
54393: PPUSH
54394: CALL 54938 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54398: LD_ADDR_VAR 0 2
54402: PUSH
54403: LD_INT 81
54405: PUSH
54406: LD_VAR 0 1
54410: PPUSH
54411: CALL_OW 255
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 33
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 91
54432: PUSH
54433: LD_VAR 0 1
54437: PUSH
54438: LD_EXP 47
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 50
54450: PUSH
54451: EMPTY
54452: LIST
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: PPUSH
54460: CALL_OW 69
54464: ST_TO_ADDR
// if not tmp then
54465: LD_VAR 0 2
54469: NOT
54470: IFFALSE 54474
// continue ;
54472: GO 54269
// HackLink ( i , tmp ) ;
54474: LD_VAR 0 1
54478: PPUSH
54479: LD_VAR 0 2
54483: PPUSH
54484: CALL 54631 0 2
// end ;
54488: GO 54269
54490: POP
54491: POP
// end ;
54492: PPOPN 2
54494: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54495: LD_INT 0
54497: PPUSH
54498: PPUSH
54499: PPUSH
// if not hack in hackTanks then
54500: LD_VAR 0 1
54504: PUSH
54505: LD_EXP 44
54509: IN
54510: NOT
54511: IFFALSE 54515
// exit ;
54513: GO 54626
// index := GetElementIndex ( hackTanks , hack ) ;
54515: LD_ADDR_VAR 0 4
54519: PUSH
54520: LD_EXP 44
54524: PPUSH
54525: LD_VAR 0 1
54529: PPUSH
54530: CALL 13905 0 2
54534: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54535: LD_EXP 45
54539: PUSH
54540: LD_VAR 0 4
54544: ARRAY
54545: IFFALSE 54626
// begin for i in hackTanksCaptured [ index ] do
54547: LD_ADDR_VAR 0 3
54551: PUSH
54552: LD_EXP 45
54556: PUSH
54557: LD_VAR 0 4
54561: ARRAY
54562: PUSH
54563: FOR_IN
54564: IFFALSE 54590
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54566: LD_VAR 0 3
54570: PUSH
54571: LD_INT 1
54573: ARRAY
54574: PPUSH
54575: LD_VAR 0 3
54579: PUSH
54580: LD_INT 2
54582: ARRAY
54583: PPUSH
54584: CALL_OW 235
54588: GO 54563
54590: POP
54591: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54592: LD_ADDR_EXP 45
54596: PUSH
54597: LD_EXP 45
54601: PPUSH
54602: LD_VAR 0 4
54606: PPUSH
54607: EMPTY
54608: PPUSH
54609: CALL_OW 1
54613: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54614: LD_VAR 0 1
54618: PPUSH
54619: LD_INT 0
54621: PPUSH
54622: CALL_OW 505
// end ; end ;
54626: LD_VAR 0 2
54630: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54631: LD_INT 0
54633: PPUSH
54634: PPUSH
54635: PPUSH
// if not hack in hackTanks or not vehicles then
54636: LD_VAR 0 1
54640: PUSH
54641: LD_EXP 44
54645: IN
54646: NOT
54647: PUSH
54648: LD_VAR 0 2
54652: NOT
54653: OR
54654: IFFALSE 54658
// exit ;
54656: GO 54933
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54658: LD_ADDR_VAR 0 2
54662: PUSH
54663: LD_VAR 0 1
54667: PPUSH
54668: LD_VAR 0 2
54672: PPUSH
54673: LD_INT 1
54675: PPUSH
54676: LD_INT 1
54678: PPUSH
54679: CALL 14555 0 4
54683: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54684: LD_ADDR_VAR 0 5
54688: PUSH
54689: LD_EXP 44
54693: PPUSH
54694: LD_VAR 0 1
54698: PPUSH
54699: CALL 13905 0 2
54703: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54704: LD_EXP 45
54708: PUSH
54709: LD_VAR 0 5
54713: ARRAY
54714: PUSH
54715: LD_EXP 46
54719: LESS
54720: IFFALSE 54909
// begin for i := 1 to vehicles do
54722: LD_ADDR_VAR 0 4
54726: PUSH
54727: DOUBLE
54728: LD_INT 1
54730: DEC
54731: ST_TO_ADDR
54732: LD_VAR 0 2
54736: PUSH
54737: FOR_TO
54738: IFFALSE 54907
// begin if hackTanksCaptured [ index ] = hackLimit then
54740: LD_EXP 45
54744: PUSH
54745: LD_VAR 0 5
54749: ARRAY
54750: PUSH
54751: LD_EXP 46
54755: EQUAL
54756: IFFALSE 54760
// break ;
54758: GO 54907
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54760: LD_ADDR_EXP 48
54764: PUSH
54765: LD_EXP 48
54769: PPUSH
54770: LD_VAR 0 5
54774: PPUSH
54775: LD_EXP 48
54779: PUSH
54780: LD_VAR 0 5
54784: ARRAY
54785: PUSH
54786: LD_INT 1
54788: PLUS
54789: PPUSH
54790: CALL_OW 1
54794: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54795: LD_ADDR_EXP 45
54799: PUSH
54800: LD_EXP 45
54804: PPUSH
54805: LD_VAR 0 5
54809: PUSH
54810: LD_EXP 45
54814: PUSH
54815: LD_VAR 0 5
54819: ARRAY
54820: PUSH
54821: LD_INT 1
54823: PLUS
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PPUSH
54829: LD_VAR 0 2
54833: PUSH
54834: LD_VAR 0 4
54838: ARRAY
54839: PUSH
54840: LD_VAR 0 2
54844: PUSH
54845: LD_VAR 0 4
54849: ARRAY
54850: PPUSH
54851: CALL_OW 255
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PPUSH
54860: CALL 14120 0 3
54864: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54865: LD_VAR 0 2
54869: PUSH
54870: LD_VAR 0 4
54874: ARRAY
54875: PPUSH
54876: LD_VAR 0 1
54880: PPUSH
54881: CALL_OW 255
54885: PPUSH
54886: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54890: LD_VAR 0 2
54894: PUSH
54895: LD_VAR 0 4
54899: ARRAY
54900: PPUSH
54901: CALL_OW 141
// end ;
54905: GO 54737
54907: POP
54908: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54909: LD_VAR 0 1
54913: PPUSH
54914: LD_EXP 45
54918: PUSH
54919: LD_VAR 0 5
54923: ARRAY
54924: PUSH
54925: LD_INT 0
54927: PLUS
54928: PPUSH
54929: CALL_OW 505
// end ;
54933: LD_VAR 0 3
54937: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54938: LD_INT 0
54940: PPUSH
54941: PPUSH
54942: PPUSH
54943: PPUSH
// if not hack in hackTanks then
54944: LD_VAR 0 1
54948: PUSH
54949: LD_EXP 44
54953: IN
54954: NOT
54955: IFFALSE 54959
// exit ;
54957: GO 55199
// index := GetElementIndex ( hackTanks , hack ) ;
54959: LD_ADDR_VAR 0 4
54963: PUSH
54964: LD_EXP 44
54968: PPUSH
54969: LD_VAR 0 1
54973: PPUSH
54974: CALL 13905 0 2
54978: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54979: LD_ADDR_VAR 0 3
54983: PUSH
54984: DOUBLE
54985: LD_EXP 45
54989: PUSH
54990: LD_VAR 0 4
54994: ARRAY
54995: INC
54996: ST_TO_ADDR
54997: LD_INT 1
54999: PUSH
55000: FOR_DOWNTO
55001: IFFALSE 55173
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55003: LD_ADDR_VAR 0 5
55007: PUSH
55008: LD_EXP 45
55012: PUSH
55013: LD_VAR 0 4
55017: ARRAY
55018: PUSH
55019: LD_VAR 0 3
55023: ARRAY
55024: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55025: LD_VAR 0 5
55029: PUSH
55030: LD_INT 1
55032: ARRAY
55033: PPUSH
55034: CALL_OW 302
55038: NOT
55039: PUSH
55040: LD_VAR 0 5
55044: PUSH
55045: LD_INT 1
55047: ARRAY
55048: PPUSH
55049: CALL_OW 255
55053: PUSH
55054: LD_VAR 0 1
55058: PPUSH
55059: CALL_OW 255
55063: NONEQUAL
55064: OR
55065: IFFALSE 55171
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55067: LD_VAR 0 5
55071: PUSH
55072: LD_INT 1
55074: ARRAY
55075: PPUSH
55076: CALL_OW 305
55080: PUSH
55081: LD_VAR 0 5
55085: PUSH
55086: LD_INT 1
55088: ARRAY
55089: PPUSH
55090: CALL_OW 255
55094: PUSH
55095: LD_VAR 0 1
55099: PPUSH
55100: CALL_OW 255
55104: EQUAL
55105: AND
55106: IFFALSE 55130
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55108: LD_VAR 0 5
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: PPUSH
55117: LD_VAR 0 5
55121: PUSH
55122: LD_INT 2
55124: ARRAY
55125: PPUSH
55126: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55130: LD_ADDR_EXP 45
55134: PUSH
55135: LD_EXP 45
55139: PPUSH
55140: LD_VAR 0 4
55144: PPUSH
55145: LD_EXP 45
55149: PUSH
55150: LD_VAR 0 4
55154: ARRAY
55155: PPUSH
55156: LD_VAR 0 3
55160: PPUSH
55161: CALL_OW 3
55165: PPUSH
55166: CALL_OW 1
55170: ST_TO_ADDR
// end ; end ;
55171: GO 55000
55173: POP
55174: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55175: LD_VAR 0 1
55179: PPUSH
55180: LD_EXP 45
55184: PUSH
55185: LD_VAR 0 4
55189: ARRAY
55190: PUSH
55191: LD_INT 0
55193: PLUS
55194: PPUSH
55195: CALL_OW 505
// end ;
55199: LD_VAR 0 2
55203: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55204: LD_INT 0
55206: PPUSH
55207: PPUSH
55208: PPUSH
55209: PPUSH
// if not hack in hackTanks then
55210: LD_VAR 0 1
55214: PUSH
55215: LD_EXP 44
55219: IN
55220: NOT
55221: IFFALSE 55225
// exit ;
55223: GO 55310
// index := GetElementIndex ( hackTanks , hack ) ;
55225: LD_ADDR_VAR 0 5
55229: PUSH
55230: LD_EXP 44
55234: PPUSH
55235: LD_VAR 0 1
55239: PPUSH
55240: CALL 13905 0 2
55244: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55245: LD_ADDR_VAR 0 4
55249: PUSH
55250: DOUBLE
55251: LD_INT 1
55253: DEC
55254: ST_TO_ADDR
55255: LD_EXP 45
55259: PUSH
55260: LD_VAR 0 5
55264: ARRAY
55265: PUSH
55266: FOR_TO
55267: IFFALSE 55308
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55269: LD_EXP 45
55273: PUSH
55274: LD_VAR 0 5
55278: ARRAY
55279: PUSH
55280: LD_VAR 0 4
55284: ARRAY
55285: PUSH
55286: LD_INT 1
55288: ARRAY
55289: PUSH
55290: LD_VAR 0 2
55294: EQUAL
55295: IFFALSE 55306
// KillUnit ( vehicle ) ;
55297: LD_VAR 0 2
55301: PPUSH
55302: CALL_OW 66
55306: GO 55266
55308: POP
55309: POP
// end ;
55310: LD_VAR 0 3
55314: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55315: LD_EXP 49
55319: NOT
55320: IFFALSE 55355
55322: GO 55324
55324: DISABLE
// begin initMiner := true ;
55325: LD_ADDR_EXP 49
55329: PUSH
55330: LD_INT 1
55332: ST_TO_ADDR
// minersList := [ ] ;
55333: LD_ADDR_EXP 50
55337: PUSH
55338: EMPTY
55339: ST_TO_ADDR
// minerMinesList := [ ] ;
55340: LD_ADDR_EXP 51
55344: PUSH
55345: EMPTY
55346: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55347: LD_ADDR_EXP 52
55351: PUSH
55352: LD_INT 5
55354: ST_TO_ADDR
// end ;
55355: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55356: LD_EXP 49
55360: PUSH
55361: LD_INT 34
55363: PUSH
55364: LD_INT 81
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PPUSH
55371: CALL_OW 69
55375: AND
55376: IFFALSE 55837
55378: GO 55380
55380: DISABLE
55381: LD_INT 0
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
// begin enable ;
55387: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55388: LD_ADDR_VAR 0 1
55392: PUSH
55393: LD_INT 34
55395: PUSH
55396: LD_INT 81
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PPUSH
55403: CALL_OW 69
55407: PUSH
55408: FOR_IN
55409: IFFALSE 55481
// begin if not i in minersList then
55411: LD_VAR 0 1
55415: PUSH
55416: LD_EXP 50
55420: IN
55421: NOT
55422: IFFALSE 55479
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55424: LD_ADDR_EXP 50
55428: PUSH
55429: LD_EXP 50
55433: PPUSH
55434: LD_EXP 50
55438: PUSH
55439: LD_INT 1
55441: PLUS
55442: PPUSH
55443: LD_VAR 0 1
55447: PPUSH
55448: CALL_OW 1
55452: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55453: LD_ADDR_EXP 51
55457: PUSH
55458: LD_EXP 51
55462: PPUSH
55463: LD_EXP 51
55467: PUSH
55468: LD_INT 1
55470: PLUS
55471: PPUSH
55472: EMPTY
55473: PPUSH
55474: CALL_OW 1
55478: ST_TO_ADDR
// end end ;
55479: GO 55408
55481: POP
55482: POP
// for i := minerMinesList downto 1 do
55483: LD_ADDR_VAR 0 1
55487: PUSH
55488: DOUBLE
55489: LD_EXP 51
55493: INC
55494: ST_TO_ADDR
55495: LD_INT 1
55497: PUSH
55498: FOR_DOWNTO
55499: IFFALSE 55835
// begin if IsLive ( minersList [ i ] ) then
55501: LD_EXP 50
55505: PUSH
55506: LD_VAR 0 1
55510: ARRAY
55511: PPUSH
55512: CALL_OW 300
55516: IFFALSE 55544
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55518: LD_EXP 50
55522: PUSH
55523: LD_VAR 0 1
55527: ARRAY
55528: PPUSH
55529: LD_EXP 51
55533: PUSH
55534: LD_VAR 0 1
55538: ARRAY
55539: PPUSH
55540: CALL_OW 505
// if not minerMinesList [ i ] then
55544: LD_EXP 51
55548: PUSH
55549: LD_VAR 0 1
55553: ARRAY
55554: NOT
55555: IFFALSE 55559
// continue ;
55557: GO 55498
// for j := minerMinesList [ i ] downto 1 do
55559: LD_ADDR_VAR 0 2
55563: PUSH
55564: DOUBLE
55565: LD_EXP 51
55569: PUSH
55570: LD_VAR 0 1
55574: ARRAY
55575: INC
55576: ST_TO_ADDR
55577: LD_INT 1
55579: PUSH
55580: FOR_DOWNTO
55581: IFFALSE 55831
// begin side := GetSide ( minersList [ i ] ) ;
55583: LD_ADDR_VAR 0 3
55587: PUSH
55588: LD_EXP 50
55592: PUSH
55593: LD_VAR 0 1
55597: ARRAY
55598: PPUSH
55599: CALL_OW 255
55603: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55604: LD_ADDR_VAR 0 4
55608: PUSH
55609: LD_EXP 51
55613: PUSH
55614: LD_VAR 0 1
55618: ARRAY
55619: PUSH
55620: LD_VAR 0 2
55624: ARRAY
55625: PUSH
55626: LD_INT 1
55628: ARRAY
55629: PPUSH
55630: LD_EXP 51
55634: PUSH
55635: LD_VAR 0 1
55639: ARRAY
55640: PUSH
55641: LD_VAR 0 2
55645: ARRAY
55646: PUSH
55647: LD_INT 2
55649: ARRAY
55650: PPUSH
55651: CALL_OW 428
55655: ST_TO_ADDR
// if not tmp then
55656: LD_VAR 0 4
55660: NOT
55661: IFFALSE 55665
// continue ;
55663: GO 55580
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55665: LD_VAR 0 4
55669: PUSH
55670: LD_INT 81
55672: PUSH
55673: LD_VAR 0 3
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PPUSH
55682: CALL_OW 69
55686: IN
55687: PUSH
55688: LD_EXP 51
55692: PUSH
55693: LD_VAR 0 1
55697: ARRAY
55698: PUSH
55699: LD_VAR 0 2
55703: ARRAY
55704: PUSH
55705: LD_INT 1
55707: ARRAY
55708: PPUSH
55709: LD_EXP 51
55713: PUSH
55714: LD_VAR 0 1
55718: ARRAY
55719: PUSH
55720: LD_VAR 0 2
55724: ARRAY
55725: PUSH
55726: LD_INT 2
55728: ARRAY
55729: PPUSH
55730: CALL_OW 458
55734: AND
55735: IFFALSE 55829
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55737: LD_EXP 51
55741: PUSH
55742: LD_VAR 0 1
55746: ARRAY
55747: PUSH
55748: LD_VAR 0 2
55752: ARRAY
55753: PUSH
55754: LD_INT 1
55756: ARRAY
55757: PPUSH
55758: LD_EXP 51
55762: PUSH
55763: LD_VAR 0 1
55767: ARRAY
55768: PUSH
55769: LD_VAR 0 2
55773: ARRAY
55774: PUSH
55775: LD_INT 2
55777: ARRAY
55778: PPUSH
55779: LD_VAR 0 3
55783: PPUSH
55784: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55788: LD_ADDR_EXP 51
55792: PUSH
55793: LD_EXP 51
55797: PPUSH
55798: LD_VAR 0 1
55802: PPUSH
55803: LD_EXP 51
55807: PUSH
55808: LD_VAR 0 1
55812: ARRAY
55813: PPUSH
55814: LD_VAR 0 2
55818: PPUSH
55819: CALL_OW 3
55823: PPUSH
55824: CALL_OW 1
55828: ST_TO_ADDR
// end ; end ;
55829: GO 55580
55831: POP
55832: POP
// end ;
55833: GO 55498
55835: POP
55836: POP
// end ;
55837: PPOPN 4
55839: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55840: LD_INT 0
55842: PPUSH
55843: PPUSH
// result := false ;
55844: LD_ADDR_VAR 0 4
55848: PUSH
55849: LD_INT 0
55851: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55852: LD_VAR 0 1
55856: PPUSH
55857: CALL_OW 264
55861: PUSH
55862: LD_INT 81
55864: EQUAL
55865: NOT
55866: IFFALSE 55870
// exit ;
55868: GO 56110
// index := GetElementIndex ( minersList , unit ) ;
55870: LD_ADDR_VAR 0 5
55874: PUSH
55875: LD_EXP 50
55879: PPUSH
55880: LD_VAR 0 1
55884: PPUSH
55885: CALL 13905 0 2
55889: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55890: LD_EXP 51
55894: PUSH
55895: LD_VAR 0 5
55899: ARRAY
55900: PUSH
55901: LD_EXP 52
55905: GREATEREQUAL
55906: IFFALSE 55910
// exit ;
55908: GO 56110
// ComMoveXY ( unit , x , y ) ;
55910: LD_VAR 0 1
55914: PPUSH
55915: LD_VAR 0 2
55919: PPUSH
55920: LD_VAR 0 3
55924: PPUSH
55925: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55929: LD_INT 35
55931: PPUSH
55932: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55936: LD_VAR 0 1
55940: PPUSH
55941: LD_VAR 0 2
55945: PPUSH
55946: LD_VAR 0 3
55950: PPUSH
55951: CALL 45666 0 3
55955: NOT
55956: PUSH
55957: LD_VAR 0 1
55961: PPUSH
55962: CALL_OW 314
55966: AND
55967: IFFALSE 55971
// exit ;
55969: GO 56110
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55971: LD_VAR 0 2
55975: PPUSH
55976: LD_VAR 0 3
55980: PPUSH
55981: CALL_OW 428
55985: PUSH
55986: LD_VAR 0 1
55990: EQUAL
55991: PUSH
55992: LD_VAR 0 1
55996: PPUSH
55997: CALL_OW 314
56001: NOT
56002: AND
56003: IFFALSE 55929
// PlaySoundXY ( x , y , PlantMine ) ;
56005: LD_VAR 0 2
56009: PPUSH
56010: LD_VAR 0 3
56014: PPUSH
56015: LD_STRING PlantMine
56017: PPUSH
56018: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56022: LD_VAR 0 2
56026: PPUSH
56027: LD_VAR 0 3
56031: PPUSH
56032: LD_VAR 0 1
56036: PPUSH
56037: CALL_OW 255
56041: PPUSH
56042: LD_INT 0
56044: PPUSH
56045: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56049: LD_ADDR_EXP 51
56053: PUSH
56054: LD_EXP 51
56058: PPUSH
56059: LD_VAR 0 5
56063: PUSH
56064: LD_EXP 51
56068: PUSH
56069: LD_VAR 0 5
56073: ARRAY
56074: PUSH
56075: LD_INT 1
56077: PLUS
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PPUSH
56083: LD_VAR 0 2
56087: PUSH
56088: LD_VAR 0 3
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PPUSH
56097: CALL 14120 0 3
56101: ST_TO_ADDR
// result := true ;
56102: LD_ADDR_VAR 0 4
56106: PUSH
56107: LD_INT 1
56109: ST_TO_ADDR
// end ;
56110: LD_VAR 0 4
56114: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56115: LD_INT 0
56117: PPUSH
56118: PPUSH
56119: PPUSH
// if not unit in minersList then
56120: LD_VAR 0 1
56124: PUSH
56125: LD_EXP 50
56129: IN
56130: NOT
56131: IFFALSE 56135
// exit ;
56133: GO 56527
// index := GetElementIndex ( minersList , unit ) ;
56135: LD_ADDR_VAR 0 6
56139: PUSH
56140: LD_EXP 50
56144: PPUSH
56145: LD_VAR 0 1
56149: PPUSH
56150: CALL 13905 0 2
56154: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56155: LD_ADDR_VAR 0 5
56159: PUSH
56160: DOUBLE
56161: LD_EXP 51
56165: PUSH
56166: LD_VAR 0 6
56170: ARRAY
56171: INC
56172: ST_TO_ADDR
56173: LD_INT 1
56175: PUSH
56176: FOR_DOWNTO
56177: IFFALSE 56338
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56179: LD_EXP 51
56183: PUSH
56184: LD_VAR 0 6
56188: ARRAY
56189: PUSH
56190: LD_VAR 0 5
56194: ARRAY
56195: PUSH
56196: LD_INT 1
56198: ARRAY
56199: PUSH
56200: LD_VAR 0 2
56204: EQUAL
56205: PUSH
56206: LD_EXP 51
56210: PUSH
56211: LD_VAR 0 6
56215: ARRAY
56216: PUSH
56217: LD_VAR 0 5
56221: ARRAY
56222: PUSH
56223: LD_INT 2
56225: ARRAY
56226: PUSH
56227: LD_VAR 0 3
56231: EQUAL
56232: AND
56233: IFFALSE 56336
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56235: LD_EXP 51
56239: PUSH
56240: LD_VAR 0 6
56244: ARRAY
56245: PUSH
56246: LD_VAR 0 5
56250: ARRAY
56251: PUSH
56252: LD_INT 1
56254: ARRAY
56255: PPUSH
56256: LD_EXP 51
56260: PUSH
56261: LD_VAR 0 6
56265: ARRAY
56266: PUSH
56267: LD_VAR 0 5
56271: ARRAY
56272: PUSH
56273: LD_INT 2
56275: ARRAY
56276: PPUSH
56277: LD_VAR 0 1
56281: PPUSH
56282: CALL_OW 255
56286: PPUSH
56287: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56291: LD_ADDR_EXP 51
56295: PUSH
56296: LD_EXP 51
56300: PPUSH
56301: LD_VAR 0 6
56305: PPUSH
56306: LD_EXP 51
56310: PUSH
56311: LD_VAR 0 6
56315: ARRAY
56316: PPUSH
56317: LD_VAR 0 5
56321: PPUSH
56322: CALL_OW 3
56326: PPUSH
56327: CALL_OW 1
56331: ST_TO_ADDR
// exit ;
56332: POP
56333: POP
56334: GO 56527
// end ; end ;
56336: GO 56176
56338: POP
56339: POP
// for i := minerMinesList [ index ] downto 1 do
56340: LD_ADDR_VAR 0 5
56344: PUSH
56345: DOUBLE
56346: LD_EXP 51
56350: PUSH
56351: LD_VAR 0 6
56355: ARRAY
56356: INC
56357: ST_TO_ADDR
56358: LD_INT 1
56360: PUSH
56361: FOR_DOWNTO
56362: IFFALSE 56525
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56364: LD_EXP 51
56368: PUSH
56369: LD_VAR 0 6
56373: ARRAY
56374: PUSH
56375: LD_VAR 0 5
56379: ARRAY
56380: PUSH
56381: LD_INT 1
56383: ARRAY
56384: PPUSH
56385: LD_EXP 51
56389: PUSH
56390: LD_VAR 0 6
56394: ARRAY
56395: PUSH
56396: LD_VAR 0 5
56400: ARRAY
56401: PUSH
56402: LD_INT 2
56404: ARRAY
56405: PPUSH
56406: LD_VAR 0 2
56410: PPUSH
56411: LD_VAR 0 3
56415: PPUSH
56416: CALL_OW 298
56420: PUSH
56421: LD_INT 6
56423: LESS
56424: IFFALSE 56523
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56426: LD_EXP 51
56430: PUSH
56431: LD_VAR 0 6
56435: ARRAY
56436: PUSH
56437: LD_VAR 0 5
56441: ARRAY
56442: PUSH
56443: LD_INT 1
56445: ARRAY
56446: PPUSH
56447: LD_EXP 51
56451: PUSH
56452: LD_VAR 0 6
56456: ARRAY
56457: PUSH
56458: LD_VAR 0 5
56462: ARRAY
56463: PUSH
56464: LD_INT 2
56466: ARRAY
56467: PPUSH
56468: LD_VAR 0 1
56472: PPUSH
56473: CALL_OW 255
56477: PPUSH
56478: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56482: LD_ADDR_EXP 51
56486: PUSH
56487: LD_EXP 51
56491: PPUSH
56492: LD_VAR 0 6
56496: PPUSH
56497: LD_EXP 51
56501: PUSH
56502: LD_VAR 0 6
56506: ARRAY
56507: PPUSH
56508: LD_VAR 0 5
56512: PPUSH
56513: CALL_OW 3
56517: PPUSH
56518: CALL_OW 1
56522: ST_TO_ADDR
// end ; end ;
56523: GO 56361
56525: POP
56526: POP
// end ;
56527: LD_VAR 0 4
56531: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56532: LD_INT 0
56534: PPUSH
56535: PPUSH
56536: PPUSH
56537: PPUSH
56538: PPUSH
56539: PPUSH
56540: PPUSH
56541: PPUSH
56542: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56543: LD_VAR 0 1
56547: PPUSH
56548: CALL_OW 264
56552: PUSH
56553: LD_INT 81
56555: EQUAL
56556: NOT
56557: PUSH
56558: LD_VAR 0 1
56562: PUSH
56563: LD_EXP 50
56567: IN
56568: NOT
56569: OR
56570: IFFALSE 56574
// exit ;
56572: GO 56896
// index := GetElementIndex ( minersList , unit ) ;
56574: LD_ADDR_VAR 0 6
56578: PUSH
56579: LD_EXP 50
56583: PPUSH
56584: LD_VAR 0 1
56588: PPUSH
56589: CALL 13905 0 2
56593: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56594: LD_ADDR_VAR 0 8
56598: PUSH
56599: LD_EXP 52
56603: PUSH
56604: LD_EXP 51
56608: PUSH
56609: LD_VAR 0 6
56613: ARRAY
56614: MINUS
56615: ST_TO_ADDR
// if not minesFreeAmount then
56616: LD_VAR 0 8
56620: NOT
56621: IFFALSE 56625
// exit ;
56623: GO 56896
// tmp := [ ] ;
56625: LD_ADDR_VAR 0 7
56629: PUSH
56630: EMPTY
56631: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56632: LD_ADDR_VAR 0 5
56636: PUSH
56637: DOUBLE
56638: LD_INT 1
56640: DEC
56641: ST_TO_ADDR
56642: LD_VAR 0 8
56646: PUSH
56647: FOR_TO
56648: IFFALSE 56843
// begin _d := rand ( 0 , 5 ) ;
56650: LD_ADDR_VAR 0 11
56654: PUSH
56655: LD_INT 0
56657: PPUSH
56658: LD_INT 5
56660: PPUSH
56661: CALL_OW 12
56665: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56666: LD_ADDR_VAR 0 12
56670: PUSH
56671: LD_INT 2
56673: PPUSH
56674: LD_INT 6
56676: PPUSH
56677: CALL_OW 12
56681: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56682: LD_ADDR_VAR 0 9
56686: PUSH
56687: LD_VAR 0 2
56691: PPUSH
56692: LD_VAR 0 11
56696: PPUSH
56697: LD_VAR 0 12
56701: PPUSH
56702: CALL_OW 272
56706: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56707: LD_ADDR_VAR 0 10
56711: PUSH
56712: LD_VAR 0 3
56716: PPUSH
56717: LD_VAR 0 11
56721: PPUSH
56722: LD_VAR 0 12
56726: PPUSH
56727: CALL_OW 273
56731: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56732: LD_VAR 0 9
56736: PPUSH
56737: LD_VAR 0 10
56741: PPUSH
56742: CALL_OW 488
56746: PUSH
56747: LD_VAR 0 9
56751: PUSH
56752: LD_VAR 0 10
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_VAR 0 7
56765: IN
56766: NOT
56767: AND
56768: PUSH
56769: LD_VAR 0 9
56773: PPUSH
56774: LD_VAR 0 10
56778: PPUSH
56779: CALL_OW 458
56783: NOT
56784: AND
56785: IFFALSE 56827
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56787: LD_ADDR_VAR 0 7
56791: PUSH
56792: LD_VAR 0 7
56796: PPUSH
56797: LD_VAR 0 7
56801: PUSH
56802: LD_INT 1
56804: PLUS
56805: PPUSH
56806: LD_VAR 0 9
56810: PUSH
56811: LD_VAR 0 10
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PPUSH
56820: CALL_OW 1
56824: ST_TO_ADDR
56825: GO 56841
// i := i - 1 ;
56827: LD_ADDR_VAR 0 5
56831: PUSH
56832: LD_VAR 0 5
56836: PUSH
56837: LD_INT 1
56839: MINUS
56840: ST_TO_ADDR
// end ;
56841: GO 56647
56843: POP
56844: POP
// for i in tmp do
56845: LD_ADDR_VAR 0 5
56849: PUSH
56850: LD_VAR 0 7
56854: PUSH
56855: FOR_IN
56856: IFFALSE 56894
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56858: LD_VAR 0 1
56862: PPUSH
56863: LD_VAR 0 5
56867: PUSH
56868: LD_INT 1
56870: ARRAY
56871: PPUSH
56872: LD_VAR 0 5
56876: PUSH
56877: LD_INT 2
56879: ARRAY
56880: PPUSH
56881: CALL 55840 0 3
56885: NOT
56886: IFFALSE 56892
// exit ;
56888: POP
56889: POP
56890: GO 56896
56892: GO 56855
56894: POP
56895: POP
// end ;
56896: LD_VAR 0 4
56900: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
56901: LD_INT 0
56903: PPUSH
56904: PPUSH
56905: PPUSH
56906: PPUSH
56907: PPUSH
56908: PPUSH
56909: PPUSH
56910: PPUSH
56911: PPUSH
// if GetClass ( unit ) <> class_sniper then
56912: LD_VAR 0 1
56916: PPUSH
56917: CALL_OW 257
56921: PUSH
56922: LD_INT 5
56924: NONEQUAL
56925: IFFALSE 56929
// exit ;
56927: GO 57395
// dist := 8 ;
56929: LD_ADDR_VAR 0 5
56933: PUSH
56934: LD_INT 8
56936: ST_TO_ADDR
// viewRange := 12 ;
56937: LD_ADDR_VAR 0 8
56941: PUSH
56942: LD_INT 12
56944: ST_TO_ADDR
// side := GetSide ( unit ) ;
56945: LD_ADDR_VAR 0 6
56949: PUSH
56950: LD_VAR 0 1
56954: PPUSH
56955: CALL_OW 255
56959: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56960: LD_INT 61
56962: PPUSH
56963: LD_VAR 0 6
56967: PPUSH
56968: CALL_OW 321
56972: PUSH
56973: LD_INT 2
56975: EQUAL
56976: IFFALSE 56986
// viewRange := 16 ;
56978: LD_ADDR_VAR 0 8
56982: PUSH
56983: LD_INT 16
56985: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56986: LD_VAR 0 1
56990: PPUSH
56991: LD_VAR 0 2
56995: PPUSH
56996: LD_VAR 0 3
57000: PPUSH
57001: CALL_OW 297
57005: PUSH
57006: LD_VAR 0 5
57010: GREATER
57011: IFFALSE 57090
// begin ComMoveXY ( unit , x , y ) ;
57013: LD_VAR 0 1
57017: PPUSH
57018: LD_VAR 0 2
57022: PPUSH
57023: LD_VAR 0 3
57027: PPUSH
57028: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57032: LD_INT 35
57034: PPUSH
57035: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57039: LD_VAR 0 1
57043: PPUSH
57044: LD_VAR 0 2
57048: PPUSH
57049: LD_VAR 0 3
57053: PPUSH
57054: CALL 45666 0 3
57058: NOT
57059: IFFALSE 57063
// exit ;
57061: GO 57395
// until GetDistUnitXY ( unit , x , y ) < dist ;
57063: LD_VAR 0 1
57067: PPUSH
57068: LD_VAR 0 2
57072: PPUSH
57073: LD_VAR 0 3
57077: PPUSH
57078: CALL_OW 297
57082: PUSH
57083: LD_VAR 0 5
57087: LESS
57088: IFFALSE 57032
// end ; ComTurnXY ( unit , x , y ) ;
57090: LD_VAR 0 1
57094: PPUSH
57095: LD_VAR 0 2
57099: PPUSH
57100: LD_VAR 0 3
57104: PPUSH
57105: CALL_OW 118
// repeat if Multiplayer then
57109: LD_OWVAR 4
57113: IFFALSE 57124
// wait ( 35 ) else
57115: LD_INT 35
57117: PPUSH
57118: CALL_OW 67
57122: GO 57131
// wait ( 5 ) ;
57124: LD_INT 5
57126: PPUSH
57127: CALL_OW 67
// _d := GetDir ( unit ) ;
57131: LD_ADDR_VAR 0 11
57135: PUSH
57136: LD_VAR 0 1
57140: PPUSH
57141: CALL_OW 254
57145: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57146: LD_ADDR_VAR 0 7
57150: PUSH
57151: LD_VAR 0 1
57155: PPUSH
57156: CALL_OW 250
57160: PPUSH
57161: LD_VAR 0 1
57165: PPUSH
57166: CALL_OW 251
57170: PPUSH
57171: LD_VAR 0 2
57175: PPUSH
57176: LD_VAR 0 3
57180: PPUSH
57181: CALL 48274 0 4
57185: ST_TO_ADDR
// until dir = _d ;
57186: LD_VAR 0 7
57190: PUSH
57191: LD_VAR 0 11
57195: EQUAL
57196: IFFALSE 57109
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57198: LD_ADDR_VAR 0 9
57202: PUSH
57203: LD_VAR 0 1
57207: PPUSH
57208: CALL_OW 250
57212: PPUSH
57213: LD_VAR 0 7
57217: PPUSH
57218: LD_VAR 0 5
57222: PPUSH
57223: CALL_OW 272
57227: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57228: LD_ADDR_VAR 0 10
57232: PUSH
57233: LD_VAR 0 1
57237: PPUSH
57238: CALL_OW 251
57242: PPUSH
57243: LD_VAR 0 7
57247: PPUSH
57248: LD_VAR 0 5
57252: PPUSH
57253: CALL_OW 273
57257: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57258: LD_VAR 0 9
57262: PPUSH
57263: LD_VAR 0 10
57267: PPUSH
57268: CALL_OW 488
57272: NOT
57273: IFFALSE 57277
// exit ;
57275: GO 57395
// ComAnimCustom ( unit , 1 ) ;
57277: LD_VAR 0 1
57281: PPUSH
57282: LD_INT 1
57284: PPUSH
57285: CALL_OW 592
// p := 0 ;
57289: LD_ADDR_VAR 0 12
57293: PUSH
57294: LD_INT 0
57296: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57297: LD_VAR 0 9
57301: PPUSH
57302: LD_VAR 0 10
57306: PPUSH
57307: LD_VAR 0 6
57311: PPUSH
57312: LD_VAR 0 8
57316: PPUSH
57317: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57321: LD_INT 35
57323: PPUSH
57324: CALL_OW 67
// p := Inc ( p ) ;
57328: LD_ADDR_VAR 0 12
57332: PUSH
57333: LD_VAR 0 12
57337: PPUSH
57338: CALL 48230 0 1
57342: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57343: LD_VAR 0 12
57347: PUSH
57348: LD_INT 3
57350: EQUAL
57351: PUSH
57352: LD_VAR 0 1
57356: PPUSH
57357: CALL_OW 302
57361: NOT
57362: OR
57363: PUSH
57364: LD_VAR 0 1
57368: PPUSH
57369: CALL_OW 301
57373: OR
57374: IFFALSE 57321
// RemoveSeeing ( _x , _y , side ) ;
57376: LD_VAR 0 9
57380: PPUSH
57381: LD_VAR 0 10
57385: PPUSH
57386: LD_VAR 0 6
57390: PPUSH
57391: CALL_OW 331
// end ; end_of_file
57395: LD_VAR 0 4
57399: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57400: LD_EXP 38
57404: IFFALSE 57745
57406: GO 57408
57408: DISABLE
57409: LD_INT 0
57411: PPUSH
57412: PPUSH
57413: PPUSH
// begin mpKingPoints := [ ] ;
57414: LD_ADDR_EXP 53
57418: PUSH
57419: EMPTY
57420: ST_TO_ADDR
// if mpTeamGame then
57421: LD_EXP 11
57425: IFFALSE 57479
// begin for i := 1 to Count ( mpTeams ) do
57427: LD_ADDR_VAR 0 1
57431: PUSH
57432: DOUBLE
57433: LD_INT 1
57435: DEC
57436: ST_TO_ADDR
57437: LD_EXP 10
57441: PPUSH
57442: CALL 11260 0 1
57446: PUSH
57447: FOR_TO
57448: IFFALSE 57475
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57450: LD_ADDR_EXP 53
57454: PUSH
57455: LD_EXP 53
57459: PPUSH
57460: LD_VAR 0 1
57464: PPUSH
57465: LD_INT 0
57467: PPUSH
57468: CALL_OW 1
57472: ST_TO_ADDR
57473: GO 57447
57475: POP
57476: POP
// end else
57477: GO 57522
// begin for i := 1 to 8 do
57479: LD_ADDR_VAR 0 1
57483: PUSH
57484: DOUBLE
57485: LD_INT 1
57487: DEC
57488: ST_TO_ADDR
57489: LD_INT 8
57491: PUSH
57492: FOR_TO
57493: IFFALSE 57520
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57495: LD_ADDR_EXP 53
57499: PUSH
57500: LD_EXP 53
57504: PPUSH
57505: LD_VAR 0 1
57509: PPUSH
57510: LD_INT 0
57512: PPUSH
57513: CALL_OW 1
57517: ST_TO_ADDR
57518: GO 57492
57520: POP
57521: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57522: LD_ADDR_VAR 0 3
57526: PUSH
57527: LD_EXP 2
57531: PPUSH
57532: LD_INT 0
57534: PPUSH
57535: CALL_OW 517
57539: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57540: LD_ADDR_VAR 0 1
57544: PUSH
57545: DOUBLE
57546: LD_INT 1
57548: DEC
57549: ST_TO_ADDR
57550: LD_VAR 0 3
57554: PUSH
57555: LD_INT 1
57557: ARRAY
57558: PUSH
57559: FOR_TO
57560: IFFALSE 57627
// for j := 1 to 8 do
57562: LD_ADDR_VAR 0 2
57566: PUSH
57567: DOUBLE
57568: LD_INT 1
57570: DEC
57571: ST_TO_ADDR
57572: LD_INT 8
57574: PUSH
57575: FOR_TO
57576: IFFALSE 57623
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57578: LD_VAR 0 3
57582: PUSH
57583: LD_INT 1
57585: ARRAY
57586: PUSH
57587: LD_VAR 0 1
57591: ARRAY
57592: PPUSH
57593: LD_VAR 0 3
57597: PUSH
57598: LD_INT 2
57600: ARRAY
57601: PUSH
57602: LD_VAR 0 1
57606: ARRAY
57607: PPUSH
57608: LD_VAR 0 2
57612: PPUSH
57613: LD_INT 12
57615: NEG
57616: PPUSH
57617: CALL_OW 330
57621: GO 57575
57623: POP
57624: POP
57625: GO 57559
57627: POP
57628: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57629: LD_EXP 33
57633: PPUSH
57634: LD_INT 1
57636: PPUSH
57637: CALL_OW 424
// UpdateCounter ;
57641: CALL 58249 0 0
// repeat wait ( 0 0$1 ) ;
57645: LD_INT 35
57647: PPUSH
57648: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57652: LD_ADDR_VAR 0 3
57656: PUSH
57657: LD_EXP 33
57661: PPUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 57
57667: PUSH
57668: EMPTY
57669: LIST
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 50
57677: PUSH
57678: EMPTY
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 30
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 30
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: PPUSH
57714: CALL_OW 70
57718: ST_TO_ADDR
// if not tmp then
57719: LD_VAR 0 3
57723: NOT
57724: IFFALSE 57728
// continue ;
57726: GO 57645
// AddPoints ( tmp ) ;
57728: LD_VAR 0 3
57732: PPUSH
57733: CALL 57927 0 1
// UpdateCounter ;
57737: CALL 58249 0 0
// until false ;
57741: LD_INT 0
57743: IFFALSE 57645
// end ;
57745: PPOPN 3
57747: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
57748: LD_EXP 38
57752: PUSH
57753: LD_EXP 36
57757: AND
57758: IFFALSE 57924
57760: GO 57762
57762: DISABLE
57763: LD_INT 0
57765: PPUSH
57766: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
57767: LD_ADDR_VAR 0 2
57771: PUSH
57772: LD_EXP 2
57776: PPUSH
57777: LD_INT 0
57779: PPUSH
57780: CALL_OW 517
57784: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57785: LD_ADDR_VAR 0 1
57789: PUSH
57790: DOUBLE
57791: LD_INT 1
57793: DEC
57794: ST_TO_ADDR
57795: LD_VAR 0 2
57799: PUSH
57800: LD_INT 1
57802: ARRAY
57803: PUSH
57804: FOR_TO
57805: IFFALSE 57846
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
57807: LD_VAR 0 2
57811: PUSH
57812: LD_INT 1
57814: ARRAY
57815: PUSH
57816: LD_VAR 0 1
57820: ARRAY
57821: PPUSH
57822: LD_VAR 0 2
57826: PUSH
57827: LD_INT 2
57829: ARRAY
57830: PUSH
57831: LD_VAR 0 1
57835: ARRAY
57836: PPUSH
57837: LD_INT 125
57839: PPUSH
57840: CALL_OW 495
57844: GO 57804
57846: POP
57847: POP
// repeat wait ( mpEmissions ) ;
57848: LD_EXP 36
57852: PPUSH
57853: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
57857: LD_ADDR_VAR 0 1
57861: PUSH
57862: DOUBLE
57863: LD_INT 1
57865: DEC
57866: ST_TO_ADDR
57867: LD_VAR 0 2
57871: PUSH
57872: LD_INT 1
57874: ARRAY
57875: PUSH
57876: FOR_TO
57877: IFFALSE 57918
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
57879: LD_VAR 0 2
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PUSH
57888: LD_VAR 0 1
57892: ARRAY
57893: PPUSH
57894: LD_VAR 0 2
57898: PUSH
57899: LD_INT 2
57901: ARRAY
57902: PUSH
57903: LD_VAR 0 1
57907: ARRAY
57908: PPUSH
57909: LD_INT 15
57911: PPUSH
57912: CALL_OW 495
57916: GO 57876
57918: POP
57919: POP
// until false ;
57920: LD_INT 0
57922: IFFALSE 57848
// end ;
57924: PPOPN 2
57926: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
57927: LD_INT 0
57929: PPUSH
57930: PPUSH
57931: PPUSH
57932: PPUSH
57933: PPUSH
// if mpTeamGame then
57934: LD_EXP 11
57938: IFFALSE 58135
// begin first := depots [ 1 ] ;
57940: LD_ADDR_VAR 0 4
57944: PUSH
57945: LD_VAR 0 1
57949: PUSH
57950: LD_INT 1
57952: ARRAY
57953: ST_TO_ADDR
// side := GetSide ( first ) ;
57954: LD_ADDR_VAR 0 6
57958: PUSH
57959: LD_VAR 0 4
57963: PPUSH
57964: CALL_OW 255
57968: ST_TO_ADDR
// for i := 1 to mpTeams do
57969: LD_ADDR_VAR 0 3
57973: PUSH
57974: DOUBLE
57975: LD_INT 1
57977: DEC
57978: ST_TO_ADDR
57979: LD_EXP 10
57983: PUSH
57984: FOR_TO
57985: IFFALSE 58019
// if side in mpTeams [ i ] then
57987: LD_VAR 0 6
57991: PUSH
57992: LD_EXP 10
57996: PUSH
57997: LD_VAR 0 3
58001: ARRAY
58002: IN
58003: IFFALSE 58017
// begin team := i ;
58005: LD_ADDR_VAR 0 5
58009: PUSH
58010: LD_VAR 0 3
58014: ST_TO_ADDR
// break ;
58015: GO 58019
// end ;
58017: GO 57984
58019: POP
58020: POP
// if not team then
58021: LD_VAR 0 5
58025: NOT
58026: IFFALSE 58030
// exit ;
58028: GO 58244
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58030: LD_EXP 33
58034: PPUSH
58035: LD_INT 81
58037: PUSH
58038: LD_VAR 0 6
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PPUSH
58047: CALL_OW 70
58051: IFFALSE 58055
// exit ;
58053: GO 58244
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58055: LD_ADDR_EXP 53
58059: PUSH
58060: LD_EXP 53
58064: PPUSH
58065: LD_VAR 0 5
58069: PPUSH
58070: LD_EXP 53
58074: PUSH
58075: LD_VAR 0 5
58079: ARRAY
58080: PUSH
58081: LD_INT 1
58083: PLUS
58084: PPUSH
58085: CALL_OW 1
58089: ST_TO_ADDR
// for i in mpTeams [ team ] do
58090: LD_ADDR_VAR 0 3
58094: PUSH
58095: LD_EXP 10
58099: PUSH
58100: LD_VAR 0 5
58104: ARRAY
58105: PUSH
58106: FOR_IN
58107: IFFALSE 58131
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58109: LD_VAR 0 3
58113: PPUSH
58114: LD_EXP 53
58118: PUSH
58119: LD_VAR 0 5
58123: ARRAY
58124: PPUSH
58125: CALL_OW 506
58129: GO 58106
58131: POP
58132: POP
// end else
58133: GO 58244
// begin first := depots [ 1 ] ;
58135: LD_ADDR_VAR 0 4
58139: PUSH
58140: LD_VAR 0 1
58144: PUSH
58145: LD_INT 1
58147: ARRAY
58148: ST_TO_ADDR
// side := GetSide ( first ) ;
58149: LD_ADDR_VAR 0 6
58153: PUSH
58154: LD_VAR 0 4
58158: PPUSH
58159: CALL_OW 255
58163: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58164: LD_EXP 33
58168: PPUSH
58169: LD_INT 81
58171: PUSH
58172: LD_VAR 0 6
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PPUSH
58181: CALL_OW 70
58185: IFFALSE 58189
// exit ;
58187: GO 58244
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58189: LD_ADDR_EXP 53
58193: PUSH
58194: LD_EXP 53
58198: PPUSH
58199: LD_VAR 0 6
58203: PPUSH
58204: LD_EXP 53
58208: PUSH
58209: LD_VAR 0 6
58213: ARRAY
58214: PUSH
58215: LD_INT 1
58217: PLUS
58218: PPUSH
58219: CALL_OW 1
58223: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58224: LD_VAR 0 6
58228: PPUSH
58229: LD_EXP 53
58233: PUSH
58234: LD_VAR 0 6
58238: ARRAY
58239: PPUSH
58240: CALL_OW 506
// end ; end ;
58244: LD_VAR 0 2
58248: RET
// function UpdateCounter ; var i ; begin
58249: LD_INT 0
58251: PPUSH
58252: PPUSH
// result := [ ] ;
58253: LD_ADDR_VAR 0 1
58257: PUSH
58258: EMPTY
58259: ST_TO_ADDR
// if mpTeamGame then
58260: LD_EXP 11
58264: IFFALSE 58331
// begin for i := 1 to mpTeams do
58266: LD_ADDR_VAR 0 2
58270: PUSH
58271: DOUBLE
58272: LD_INT 1
58274: DEC
58275: ST_TO_ADDR
58276: LD_EXP 10
58280: PUSH
58281: FOR_TO
58282: IFFALSE 58327
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58284: LD_ADDR_VAR 0 1
58288: PUSH
58289: LD_VAR 0 1
58293: PUSH
58294: LD_STRING #KingoftheHill-Team
58296: PUSH
58297: LD_VAR 0 2
58301: PUSH
58302: LD_EXP 53
58306: PUSH
58307: LD_VAR 0 2
58311: ARRAY
58312: PUSH
58313: LD_EXP 34
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: ADD
58324: ST_TO_ADDR
58325: GO 58281
58327: POP
58328: POP
// end else
58329: GO 58404
// begin for i := 1 to 8 do
58331: LD_ADDR_VAR 0 2
58335: PUSH
58336: DOUBLE
58337: LD_INT 1
58339: DEC
58340: ST_TO_ADDR
58341: LD_INT 8
58343: PUSH
58344: FOR_TO
58345: IFFALSE 58402
// if mpSidePositions [ i ] then
58347: LD_EXP 7
58351: PUSH
58352: LD_VAR 0 2
58356: ARRAY
58357: IFFALSE 58400
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58359: LD_ADDR_VAR 0 1
58363: PUSH
58364: LD_VAR 0 1
58368: PUSH
58369: LD_STRING #KingoftheHill-Player
58371: PUSH
58372: LD_VAR 0 2
58376: PUSH
58377: LD_EXP 53
58381: PUSH
58382: LD_VAR 0 2
58386: ARRAY
58387: PUSH
58388: LD_EXP 34
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: ADD
58399: ST_TO_ADDR
58400: GO 58344
58402: POP
58403: POP
// end ; mpDisplayStrings := result ;
58404: LD_ADDR_EXP 37
58408: PUSH
58409: LD_VAR 0 1
58413: ST_TO_ADDR
// end ;
58414: LD_VAR 0 1
58418: RET
// export function HowMuchPointsKing ( side ) ; begin
58419: LD_INT 0
58421: PPUSH
// result := HowMuchPoints ( side ) ;
58422: LD_ADDR_VAR 0 2
58426: PUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: CALL 58442 0 1
58436: ST_TO_ADDR
// end ;
58437: LD_VAR 0 2
58441: RET
// function HowMuchPoints ( side ) ; var i ; begin
58442: LD_INT 0
58444: PPUSH
58445: PPUSH
// if mpTeamGame then
58446: LD_EXP 11
58450: IFFALSE 58519
// begin for i := 1 to Count ( mpTeams ) do
58452: LD_ADDR_VAR 0 3
58456: PUSH
58457: DOUBLE
58458: LD_INT 1
58460: DEC
58461: ST_TO_ADDR
58462: LD_EXP 10
58466: PPUSH
58467: CALL 11260 0 1
58471: PUSH
58472: FOR_TO
58473: IFFALSE 58515
// begin if side in mpTeams [ i ] then
58475: LD_VAR 0 1
58479: PUSH
58480: LD_EXP 10
58484: PUSH
58485: LD_VAR 0 3
58489: ARRAY
58490: IN
58491: IFFALSE 58513
// begin result := mpKingPoints [ i ] ;
58493: LD_ADDR_VAR 0 2
58497: PUSH
58498: LD_EXP 53
58502: PUSH
58503: LD_VAR 0 3
58507: ARRAY
58508: ST_TO_ADDR
// exit ;
58509: POP
58510: POP
58511: GO 58535
// end ; end ;
58513: GO 58472
58515: POP
58516: POP
// end else
58517: GO 58535
// result := mpKingPoints [ side ] ;
58519: LD_ADDR_VAR 0 2
58523: PUSH
58524: LD_EXP 53
58528: PUSH
58529: LD_VAR 0 1
58533: ARRAY
58534: ST_TO_ADDR
// end ;
58535: LD_VAR 0 2
58539: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58540: LD_EXP 38
58544: PUSH
58545: CALL 58867 0 0
58549: AND
58550: PUSH
58551: LD_OWVAR 4
58555: AND
58556: IFFALSE 58792
58558: GO 58560
58560: DISABLE
58561: LD_INT 0
58563: PPUSH
58564: PPUSH
// begin canWin := false ;
58565: LD_ADDR_VAR 0 2
58569: PUSH
58570: LD_INT 0
58572: ST_TO_ADDR
// if not HasPower ( your_side ) then
58573: LD_OWVAR 2
58577: PPUSH
58578: CALL 58907 0 1
58582: NOT
58583: IFFALSE 58594
// begin Multiplayer_Loose_Message ;
58585: CALL_OW 521
// enable ( mpLose ) ;
58589: LD_INT 102
58591: ENABLE_MARKED
// end else
58592: GO 58792
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58594: LD_ADDR_VAR 0 2
58598: PUSH
58599: LD_OWVAR 2
58603: PPUSH
58604: CALL 58442 0 1
58608: PUSH
58609: LD_EXP 34
58613: GREATEREQUAL
58614: PUSH
58615: LD_OWVAR 2
58619: PPUSH
58620: CALL 58907 0 1
58624: AND
58625: PUSH
58626: CALL 58795 0 0
58630: NOT
58631: OR
58632: ST_TO_ADDR
// for i := 1 to 8 do
58633: LD_ADDR_VAR 0 1
58637: PUSH
58638: DOUBLE
58639: LD_INT 1
58641: DEC
58642: ST_TO_ADDR
58643: LD_INT 8
58645: PUSH
58646: FOR_TO
58647: IFFALSE 58778
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58649: LD_EXP 7
58653: PUSH
58654: LD_VAR 0 1
58658: ARRAY
58659: PUSH
58660: LD_VAR 0 1
58664: PPUSH
58665: CALL_OW 108
58669: AND
58670: PUSH
58671: LD_VAR 0 1
58675: PUSH
58676: LD_OWVAR 2
58680: NONEQUAL
58681: AND
58682: IFFALSE 58776
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58684: LD_EXP 8
58688: PUSH
58689: LD_VAR 0 1
58693: ARRAY
58694: NOT
58695: PUSH
58696: LD_EXP 8
58700: PUSH
58701: LD_VAR 0 1
58705: ARRAY
58706: PUSH
58707: LD_EXP 8
58711: PUSH
58712: LD_OWVAR 2
58716: ARRAY
58717: NONEQUAL
58718: PUSH
58719: LD_OWVAR 2
58723: PPUSH
58724: LD_VAR 0 1
58728: PPUSH
58729: CALL_OW 81
58733: PUSH
58734: LD_INT 1
58736: NONEQUAL
58737: AND
58738: OR
58739: IFFALSE 58776
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
58741: LD_VAR 0 1
58745: PPUSH
58746: CALL 58442 0 1
58750: PUSH
58751: LD_EXP 34
58755: GREATEREQUAL
58756: PUSH
58757: LD_VAR 0 1
58761: PPUSH
58762: CALL 58907 0 1
58766: AND
58767: IFFALSE 58776
// begin enable ( mpLose ) ;
58769: LD_INT 102
58771: ENABLE_MARKED
// exit ;
58772: POP
58773: POP
58774: GO 58792
// end ;
58776: GO 58646
58778: POP
58779: POP
// if canWin then
58780: LD_VAR 0 2
58784: IFFALSE 58791
// enable ( mpWin ) else
58786: LD_INT 101
58788: ENABLE_MARKED
58789: GO 58792
// enable ;
58791: ENABLE
// end ; end ;
58792: PPOPN 2
58794: END
// function EnemiesInGame ; var i ; begin
58795: LD_INT 0
58797: PPUSH
58798: PPUSH
// result := false ;
58799: LD_ADDR_VAR 0 1
58803: PUSH
58804: LD_INT 0
58806: ST_TO_ADDR
// for i := 1 to 8 do
58807: LD_ADDR_VAR 0 2
58811: PUSH
58812: DOUBLE
58813: LD_INT 1
58815: DEC
58816: ST_TO_ADDR
58817: LD_INT 8
58819: PUSH
58820: FOR_TO
58821: IFFALSE 58860
// if i <> your_side and HasPower ( i ) then
58823: LD_VAR 0 2
58827: PUSH
58828: LD_OWVAR 2
58832: NONEQUAL
58833: PUSH
58834: LD_VAR 0 2
58838: PPUSH
58839: CALL 58907 0 1
58843: AND
58844: IFFALSE 58858
// begin result := true ;
58846: LD_ADDR_VAR 0 1
58850: PUSH
58851: LD_INT 1
58853: ST_TO_ADDR
// exit ;
58854: POP
58855: POP
58856: GO 58862
// end ;
58858: GO 58820
58860: POP
58861: POP
// end ;
58862: LD_VAR 0 1
58866: RET
// function CanWinLoose ; begin
58867: LD_INT 0
58869: PPUSH
// result := true ;
58870: LD_ADDR_VAR 0 1
58874: PUSH
58875: LD_INT 1
58877: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
58878: CALL_OW 531
58882: PUSH
58883: CALL_OW 519
58887: PUSH
58888: LD_INT 1
58890: GREATER
58891: AND
58892: IFFALSE 58902
// result := false ;
58894: LD_ADDR_VAR 0 1
58898: PUSH
58899: LD_INT 0
58901: ST_TO_ADDR
// end ;
58902: LD_VAR 0 1
58906: RET
// function HasPower ( i ) ; begin
58907: LD_INT 0
58909: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
58910: LD_ADDR_VAR 0 2
58914: PUSH
58915: LD_INT 22
58917: PUSH
58918: LD_VAR 0 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 21
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 33
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 33
58952: PUSH
58953: LD_INT 5
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PPUSH
58970: CALL_OW 69
58974: ST_TO_ADDR
// end ; end_of_file
58975: LD_VAR 0 2
58979: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
58980: PPOPN 6
58982: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58983: CALL 59012 0 0
// end ; end_of_file
58987: PPOPN 1
58989: END
// every 0 0$1 do
58990: GO 58992
58992: DISABLE
// begin enable ;
58993: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58994: LD_STRING updateTimer(
58996: PUSH
58997: LD_OWVAR 1
59001: STR
59002: PUSH
59003: LD_STRING );
59005: STR
59006: PPUSH
59007: CALL_OW 559
// end ;
59011: END
// export function SOS_MapStart ( ) ; begin
59012: LD_INT 0
59014: PPUSH
// UpdateFactoryWaypoints ( ) ;
59015: CALL 59384 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59019: CALL 59636 0 0
// end ;
59023: LD_VAR 0 1
59027: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59028: LD_INT 0
59030: PPUSH
// end ;
59031: LD_VAR 0 12
59035: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59036: LD_INT 0
59038: PPUSH
59039: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59040: LD_VAR 0 1
59044: NOT
59045: PUSH
59046: LD_VAR 0 2
59050: PPUSH
59051: LD_VAR 0 3
59055: PPUSH
59056: CALL_OW 488
59060: NOT
59061: OR
59062: PUSH
59063: LD_VAR 0 1
59067: PPUSH
59068: CALL_OW 266
59072: PUSH
59073: LD_INT 3
59075: NONEQUAL
59076: PUSH
59077: LD_VAR 0 1
59081: PPUSH
59082: CALL_OW 247
59086: PUSH
59087: LD_INT 1
59089: EQUAL
59090: NOT
59091: AND
59092: OR
59093: IFFALSE 59097
// exit ;
59095: GO 59379
// if GetType ( factory ) = unit_human then
59097: LD_VAR 0 1
59101: PPUSH
59102: CALL_OW 247
59106: PUSH
59107: LD_INT 1
59109: EQUAL
59110: IFFALSE 59127
// factory := IsInUnit ( factory ) ;
59112: LD_ADDR_VAR 0 1
59116: PUSH
59117: LD_VAR 0 1
59121: PPUSH
59122: CALL_OW 310
59126: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59127: LD_VAR 0 1
59131: PPUSH
59132: CALL_OW 266
59136: PUSH
59137: LD_INT 3
59139: NONEQUAL
59140: IFFALSE 59144
// exit ;
59142: GO 59379
// for i := 1 to Count ( factoryWaypoints ) do
59144: LD_ADDR_VAR 0 5
59148: PUSH
59149: DOUBLE
59150: LD_INT 1
59152: DEC
59153: ST_TO_ADDR
59154: LD_EXP 54
59158: PPUSH
59159: CALL 11260 0 1
59163: PUSH
59164: FOR_TO
59165: IFFALSE 59327
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59167: LD_VAR 0 2
59171: PPUSH
59172: LD_VAR 0 3
59176: PPUSH
59177: CALL_OW 428
59181: PUSH
59182: LD_EXP 54
59186: PUSH
59187: LD_VAR 0 5
59191: ARRAY
59192: PUSH
59193: LD_INT 2
59195: ARRAY
59196: EQUAL
59197: IFFALSE 59229
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59199: LD_ADDR_EXP 54
59203: PUSH
59204: LD_EXP 54
59208: PPUSH
59209: LD_VAR 0 5
59213: PPUSH
59214: CALL_OW 3
59218: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59219: CALL 59384 0 0
// exit ;
59223: POP
59224: POP
59225: GO 59379
// end else
59227: GO 59325
// if factory = factoryWaypoints [ i ] [ 2 ] then
59229: LD_VAR 0 1
59233: PUSH
59234: LD_EXP 54
59238: PUSH
59239: LD_VAR 0 5
59243: ARRAY
59244: PUSH
59245: LD_INT 2
59247: ARRAY
59248: EQUAL
59249: IFFALSE 59325
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59251: LD_ADDR_EXP 54
59255: PUSH
59256: LD_EXP 54
59260: PPUSH
59261: LD_VAR 0 5
59265: PPUSH
59266: CALL_OW 3
59270: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59271: LD_ADDR_EXP 54
59275: PUSH
59276: LD_EXP 54
59280: PPUSH
59281: LD_VAR 0 1
59285: PPUSH
59286: CALL_OW 255
59290: PUSH
59291: LD_VAR 0 1
59295: PUSH
59296: LD_VAR 0 2
59300: PUSH
59301: LD_VAR 0 3
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: PPUSH
59312: CALL 46869 0 2
59316: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59317: CALL 59384 0 0
// exit ;
59321: POP
59322: POP
59323: GO 59379
// end ; end ;
59325: GO 59164
59327: POP
59328: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59329: LD_ADDR_EXP 54
59333: PUSH
59334: LD_EXP 54
59338: PPUSH
59339: LD_VAR 0 1
59343: PPUSH
59344: CALL_OW 255
59348: PUSH
59349: LD_VAR 0 1
59353: PUSH
59354: LD_VAR 0 2
59358: PUSH
59359: LD_VAR 0 3
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: PPUSH
59370: CALL 46869 0 2
59374: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59375: CALL 59384 0 0
// end ;
59379: LD_VAR 0 4
59383: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59384: LD_INT 0
59386: PPUSH
59387: PPUSH
59388: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59389: LD_STRING resetFactoryWaypoint();
59391: PPUSH
59392: CALL_OW 559
// if factoryWaypoints then
59396: LD_EXP 54
59400: IFFALSE 59521
// begin list := factoryWaypoints ;
59402: LD_ADDR_VAR 0 3
59406: PUSH
59407: LD_EXP 54
59411: ST_TO_ADDR
// for i := 1 to list do
59412: LD_ADDR_VAR 0 2
59416: PUSH
59417: DOUBLE
59418: LD_INT 1
59420: DEC
59421: ST_TO_ADDR
59422: LD_VAR 0 3
59426: PUSH
59427: FOR_TO
59428: IFFALSE 59519
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59430: LD_STRING setFactoryWaypointXY(
59432: PUSH
59433: LD_VAR 0 3
59437: PUSH
59438: LD_VAR 0 2
59442: ARRAY
59443: PUSH
59444: LD_INT 1
59446: ARRAY
59447: STR
59448: PUSH
59449: LD_STRING ,
59451: STR
59452: PUSH
59453: LD_VAR 0 3
59457: PUSH
59458: LD_VAR 0 2
59462: ARRAY
59463: PUSH
59464: LD_INT 2
59466: ARRAY
59467: STR
59468: PUSH
59469: LD_STRING ,
59471: STR
59472: PUSH
59473: LD_VAR 0 3
59477: PUSH
59478: LD_VAR 0 2
59482: ARRAY
59483: PUSH
59484: LD_INT 3
59486: ARRAY
59487: STR
59488: PUSH
59489: LD_STRING ,
59491: STR
59492: PUSH
59493: LD_VAR 0 3
59497: PUSH
59498: LD_VAR 0 2
59502: ARRAY
59503: PUSH
59504: LD_INT 4
59506: ARRAY
59507: STR
59508: PUSH
59509: LD_STRING )
59511: STR
59512: PPUSH
59513: CALL_OW 559
59517: GO 59427
59519: POP
59520: POP
// end ; end ;
59521: LD_VAR 0 1
59525: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59526: LD_INT 0
59528: PPUSH
// if HexInfo ( x , y ) = warehouse then
59529: LD_VAR 0 2
59533: PPUSH
59534: LD_VAR 0 3
59538: PPUSH
59539: CALL_OW 428
59543: PUSH
59544: LD_VAR 0 1
59548: EQUAL
59549: IFFALSE 59576
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59551: LD_ADDR_EXP 55
59555: PUSH
59556: LD_EXP 55
59560: PPUSH
59561: LD_VAR 0 1
59565: PPUSH
59566: LD_INT 0
59568: PPUSH
59569: CALL_OW 1
59573: ST_TO_ADDR
59574: GO 59627
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59576: LD_ADDR_EXP 55
59580: PUSH
59581: LD_EXP 55
59585: PPUSH
59586: LD_VAR 0 1
59590: PPUSH
59591: LD_VAR 0 1
59595: PPUSH
59596: CALL_OW 255
59600: PUSH
59601: LD_VAR 0 1
59605: PUSH
59606: LD_VAR 0 2
59610: PUSH
59611: LD_VAR 0 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: PPUSH
59622: CALL_OW 1
59626: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59627: CALL 59636 0 0
// end ;
59631: LD_VAR 0 4
59635: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
59640: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59641: LD_STRING resetWarehouseGatheringPoints();
59643: PPUSH
59644: CALL_OW 559
// if warehouseGatheringPoints then
59648: LD_EXP 55
59652: IFFALSE 59778
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59654: LD_ADDR_VAR 0 3
59658: PUSH
59659: LD_EXP 55
59663: PPUSH
59664: CALL 50631 0 1
59668: ST_TO_ADDR
// for i := 1 to list do
59669: LD_ADDR_VAR 0 2
59673: PUSH
59674: DOUBLE
59675: LD_INT 1
59677: DEC
59678: ST_TO_ADDR
59679: LD_VAR 0 3
59683: PUSH
59684: FOR_TO
59685: IFFALSE 59776
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59687: LD_STRING setWarehouseGatheringPointXY(
59689: PUSH
59690: LD_VAR 0 3
59694: PUSH
59695: LD_VAR 0 2
59699: ARRAY
59700: PUSH
59701: LD_INT 1
59703: ARRAY
59704: STR
59705: PUSH
59706: LD_STRING ,
59708: STR
59709: PUSH
59710: LD_VAR 0 3
59714: PUSH
59715: LD_VAR 0 2
59719: ARRAY
59720: PUSH
59721: LD_INT 2
59723: ARRAY
59724: STR
59725: PUSH
59726: LD_STRING ,
59728: STR
59729: PUSH
59730: LD_VAR 0 3
59734: PUSH
59735: LD_VAR 0 2
59739: ARRAY
59740: PUSH
59741: LD_INT 3
59743: ARRAY
59744: STR
59745: PUSH
59746: LD_STRING ,
59748: STR
59749: PUSH
59750: LD_VAR 0 3
59754: PUSH
59755: LD_VAR 0 2
59759: ARRAY
59760: PUSH
59761: LD_INT 4
59763: ARRAY
59764: STR
59765: PUSH
59766: LD_STRING )
59768: STR
59769: PPUSH
59770: CALL_OW 559
59774: GO 59684
59776: POP
59777: POP
// end ; end ;
59778: LD_VAR 0 1
59782: RET
