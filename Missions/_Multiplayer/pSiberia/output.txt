// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2805 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3189 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 35
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 37
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 36
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 33
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 53599 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 53599 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 53599 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 53599 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 53599 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 53599 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 12914 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 53432 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 53432 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 53432 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 53432 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 53432 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 53432 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 53432 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 53432 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 53432 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 53432 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 53432 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 53432 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 53599 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 53599 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 53599 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 53599 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 53599 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 53599 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 53599 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 53599 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 53599 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 53599 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 53599 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 53599 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 53599 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 53599 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 53599 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 53599 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 53599 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 53599 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 50253 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 54397 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 8091 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 54414 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 8798 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 54455 0 2
2721: PPOPN 2
2723: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 8851 0 3
2743: PPOPN 3
2745: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2746: LD_VAR 0 1
2750: PPUSH
2751: LD_VAR 0 2
2755: PPUSH
2756: LD_VAR 0 3
2760: PPUSH
2761: LD_VAR 0 4
2765: PPUSH
2766: LD_VAR 0 5
2770: PPUSH
2771: CALL 9490 0 5
2775: PPOPN 5
2777: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_VAR 0 4
2797: PPUSH
2798: CALL 9593 0 4
2802: PPOPN 4
2804: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// disable ( mpActive ) ;
2809: LD_INT 100
2811: DISABLE_MARKED
// disable ( mpWin ) ;
2812: LD_INT 101
2814: DISABLE_MARKED
// disable ( mpLose ) ;
2815: LD_INT 102
2817: DISABLE_MARKED
// mpGameType := 0 ;
2818: LD_ADDR_EXP 3
2822: PUSH
2823: LD_INT 0
2825: ST_TO_ADDR
// mpGameSettings := [ ] ;
2826: LD_ADDR_EXP 6
2830: PUSH
2831: EMPTY
2832: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2833: LD_ADDR_EXP 4
2837: PUSH
2838: EMPTY
2839: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2840: LD_ADDR_EXP 5
2844: PUSH
2845: EMPTY
2846: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2847: LD_ADDR_EXP 29
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 2
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2862: LD_ADDR_EXP 12
2866: PUSH
2867: EMPTY
2868: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2869: LD_ADDR_EXP 13
2873: PUSH
2874: EMPTY
2875: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2876: LD_ADDR_EXP 41
2880: PUSH
2881: EMPTY
2882: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2883: LD_ADDR_EXP 42
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// mpDepots := [ ] ;
2890: LD_ADDR_EXP 14
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// mpBuildings := [ ] ;
2897: LD_ADDR_EXP 17
2901: PUSH
2902: EMPTY
2903: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2904: LD_ADDR_EXP 18
2908: PUSH
2909: EMPTY
2910: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2911: LD_ADDR_EXP 19
2915: PUSH
2916: EMPTY
2917: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2918: LD_ADDR_EXP 20
2922: PUSH
2923: EMPTY
2924: ST_TO_ADDR
// mpStartingResources := [ ] ;
2925: LD_ADDR_EXP 15
2929: PUSH
2930: EMPTY
2931: ST_TO_ADDR
// mpStartPos := [ ] ;
2932: LD_ADDR_EXP 21
2936: PUSH
2937: EMPTY
2938: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2939: LD_ADDR_EXP 22
2943: PUSH
2944: LD_INT 1
2946: NEG
2947: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2948: LD_ADDR_EXP 23
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// mpApemans := [ ] ;
2955: LD_ADDR_EXP 30
2959: PUSH
2960: EMPTY
2961: ST_TO_ADDR
// mpApemansArea := [ ] ;
2962: LD_ADDR_EXP 31
2966: PUSH
2967: EMPTY
2968: ST_TO_ADDR
// mpRespawn := [ ] ;
2969: LD_ADDR_EXP 33
2973: PUSH
2974: EMPTY
2975: ST_TO_ADDR
// mpKingArea := 0 ;
2976: LD_ADDR_EXP 34
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// mpPoints := [ ] ;
2984: LD_ADDR_EXP 35
2988: PUSH
2989: EMPTY
2990: ST_TO_ADDR
// mpVehicles := 0 ;
2991: LD_ADDR_EXP 36
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// mpShipments := 0 ;
2999: LD_ADDR_EXP 27
3003: PUSH
3004: LD_INT 0
3006: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3007: LD_ADDR_EXP 40
3011: PUSH
3012: EMPTY
3013: PUSH
3014: EMPTY
3015: PUSH
3016: EMPTY
3017: PUSH
3018: EMPTY
3019: PUSH
3020: EMPTY
3021: PUSH
3022: EMPTY
3023: PUSH
3024: EMPTY
3025: PUSH
3026: EMPTY
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3038: LD_ADDR_EXP 32
3042: PUSH
3043: EMPTY
3044: PUSH
3045: EMPTY
3046: PUSH
3047: EMPTY
3048: PUSH
3049: EMPTY
3050: PUSH
3051: EMPTY
3052: PUSH
3053: EMPTY
3054: PUSH
3055: EMPTY
3056: PUSH
3057: EMPTY
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: ST_TO_ADDR
// mpEmissions := 0 ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_INT 0
3076: ST_TO_ADDR
// mpTeleports := 0 ;
3077: LD_ADDR_EXP 43
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// mpArtifacts := 0 ;
3085: LD_ADDR_EXP 44
3089: PUSH
3090: LD_INT 0
3092: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3093: LD_ADDR_EXP 45
3097: PUSH
3098: LD_INT 0
3100: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3101: LD_ADDR_EXP 25
3105: PUSH
3106: LD_INT 3
3108: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3109: LD_ADDR_EXP 24
3113: PUSH
3114: LD_INT 15
3116: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3117: LD_ADDR_EXP 38
3121: PUSH
3122: LD_INT 0
3124: ST_TO_ADDR
// mpGameActive := false ;
3125: LD_ADDR_EXP 39
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// mpBlockRespThread := false ;
3133: LD_ADDR_EXP 46
3137: PUSH
3138: LD_INT 0
3140: ST_TO_ADDR
// for i := 1 to 32 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: DOUBLE
3147: LD_INT 1
3149: DEC
3150: ST_TO_ADDR
3151: LD_INT 32
3153: PUSH
3154: FOR_TO
3155: IFFALSE 3182
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_EXP 6
3166: PPUSH
3167: LD_VAR 0 2
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 1
3179: ST_TO_ADDR
3180: GO 3154
3182: POP
3183: POP
// end ;
3184: LD_VAR 0 1
3188: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3189: LD_INT 0
3191: PPUSH
3192: PPUSH
3193: PPUSH
3194: PPUSH
3195: PPUSH
3196: PPUSH
3197: PPUSH
3198: PPUSH
3199: PPUSH
3200: PPUSH
3201: PPUSH
3202: PPUSH
3203: PPUSH
3204: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3205: LD_ADDR_VAR 0 14
3209: PUSH
3210: LD_INT 1
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: LD_INT 5
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: LD_INT 7
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: ST_TO_ADDR
// for i in gameTypes do
3236: LD_ADDR_VAR 0 2
3240: PUSH
3241: LD_VAR 0 14
3245: PUSH
3246: FOR_IN
3247: IFFALSE 3256
// disable ( i ) ;
3249: LD_VAR 0 2
3253: DISABLE_MARKED
3254: GO 3246
3256: POP
3257: POP
// if Multiplayer then
3258: LD_OWVAR 4
3262: IFFALSE 3446
// begin mpGameType := mp_game_type ;
3264: LD_ADDR_EXP 3
3268: PUSH
3269: LD_OWVAR 6
3273: ST_TO_ADDR
// your_side := mp_player_side ;
3274: LD_ADDR_OWVAR 2
3278: PUSH
3279: LD_OWVAR 7
3283: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3284: LD_ADDR_EXP 7
3288: PUSH
3289: LD_OWVAR 17
3293: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3294: LD_ADDR_EXP 8
3298: PUSH
3299: LD_OWVAR 15
3303: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3304: LD_ADDR_EXP 9
3308: PUSH
3309: LD_OWVAR 16
3313: ST_TO_ADDR
// mpTeams := mp_teams ;
3314: LD_ADDR_EXP 10
3318: PUSH
3319: LD_OWVAR 12
3323: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3324: LD_ADDR_VAR 0 2
3328: PUSH
3329: DOUBLE
3330: LD_INT 1
3332: DEC
3333: ST_TO_ADDR
3334: LD_EXP 4
3338: PPUSH
3339: CALL 12914 0 1
3343: PUSH
3344: FOR_TO
3345: IFFALSE 3421
// begin setting := mpGameSettingsKeys [ i ] ;
3347: LD_ADDR_VAR 0 12
3351: PUSH
3352: LD_EXP 4
3356: PUSH
3357: LD_VAR 0 2
3361: ARRAY
3362: ST_TO_ADDR
// if setting then
3363: LD_VAR 0 12
3367: IFFALSE 3419
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3369: LD_ADDR_EXP 6
3373: PUSH
3374: LD_EXP 6
3378: PPUSH
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_EXP 5
3388: PUSH
3389: LD_VAR 0 2
3393: ARRAY
3394: PUSH
3395: LD_VAR 0 2
3399: PUSH
3400: LD_INT 1
3402: MINUS
3403: PPUSH
3404: CALL_OW 426
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: ARRAY
3413: PPUSH
3414: CALL_OW 1
3418: ST_TO_ADDR
// end ;
3419: GO 3344
3421: POP
3422: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3423: LD_ADDR_EXP 11
3427: PUSH
3428: LD_EXP 8
3432: PUSH
3433: LD_INT 0
3435: PUSH
3436: EMPTY
3437: LIST
3438: DIFF
3439: PUSH
3440: LD_INT 1
3442: GREATER
3443: ST_TO_ADDR
// end else
3444: GO 3446
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3446: LD_EXP 3
3450: PPUSH
3451: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3455: LD_EXP 18
3459: PPUSH
3460: CALL 12914 0 1
3464: IFFALSE 3495
// begin for i in mpMarkedAreas do
3466: LD_ADDR_VAR 0 2
3470: PUSH
3471: LD_EXP 18
3475: PUSH
3476: FOR_IN
3477: IFFALSE 3493
// SetAreaMapShow ( i , 0 ) ;
3479: LD_VAR 0 2
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 424
3491: GO 3476
3493: POP
3494: POP
// end ; for i := 1 to 8 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 8
3507: PUSH
3508: FOR_TO
3509: IFFALSE 4944
// begin if not mpSidePositions [ i ] then
3511: LD_EXP 7
3515: PUSH
3516: LD_VAR 0 2
3520: ARRAY
3521: NOT
3522: IFFALSE 3526
// continue ;
3524: GO 3508
// side := i ;
3526: LD_ADDR_VAR 0 7
3530: PUSH
3531: LD_VAR 0 2
3535: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3536: LD_ADDR_VAR 0 9
3540: PUSH
3541: LD_EXP 9
3545: PUSH
3546: LD_VAR 0 2
3550: ARRAY
3551: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3552: LD_ADDR_VAR 0 8
3556: PUSH
3557: LD_EXP 7
3561: PUSH
3562: LD_VAR 0 2
3566: ARRAY
3567: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3568: LD_EXP 12
3572: PPUSH
3573: CALL 12914 0 1
3577: IFFALSE 3654
// begin for j in mpOilDeposits [ pos ] do
3579: LD_ADDR_VAR 0 3
3583: PUSH
3584: LD_EXP 12
3588: PUSH
3589: LD_VAR 0 8
3593: ARRAY
3594: PUSH
3595: FOR_IN
3596: IFFALSE 3652
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3598: LD_VAR 0 3
3602: PUSH
3603: LD_INT 1
3605: ARRAY
3606: PPUSH
3607: LD_VAR 0 3
3611: PUSH
3612: LD_INT 2
3614: ARRAY
3615: PPUSH
3616: LD_INT 2
3618: PPUSH
3619: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3623: LD_VAR 0 3
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PPUSH
3632: LD_VAR 0 3
3636: PUSH
3637: LD_INT 2
3639: ARRAY
3640: PPUSH
3641: LD_VAR 0 7
3645: PPUSH
3646: CALL_OW 441
// end ;
3650: GO 3595
3652: POP
3653: POP
// end ; if Count ( mpSibDeposits ) then
3654: LD_EXP 13
3658: PPUSH
3659: CALL 12914 0 1
3663: IFFALSE 3740
// begin for j in mpSibDeposits [ pos ] do
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: LD_EXP 13
3674: PUSH
3675: LD_VAR 0 8
3679: ARRAY
3680: PUSH
3681: FOR_IN
3682: IFFALSE 3738
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: ARRAY
3692: PPUSH
3693: LD_VAR 0 3
3697: PUSH
3698: LD_INT 2
3700: ARRAY
3701: PPUSH
3702: LD_INT 3
3704: PPUSH
3705: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3709: LD_VAR 0 3
3713: PUSH
3714: LD_INT 1
3716: ARRAY
3717: PPUSH
3718: LD_VAR 0 3
3722: PUSH
3723: LD_INT 2
3725: ARRAY
3726: PPUSH
3727: LD_VAR 0 7
3731: PPUSH
3732: CALL_OW 441
// end ;
3736: GO 3681
3738: POP
3739: POP
// end ; InitBc ;
3740: CALL_OW 21
// InitUc ;
3744: CALL_OW 18
// uc_side := side ;
3748: LD_ADDR_OWVAR 20
3752: PUSH
3753: LD_VAR 0 7
3757: ST_TO_ADDR
// uc_nation := nation ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_VAR 0 9
3767: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3768: LD_EXP 22
3772: PUSH
3773: LD_INT 1
3775: NEG
3776: GREATER
3777: IFFALSE 3936
// begin x := mpStartPos [ pos ] [ 1 ] ;
3779: LD_ADDR_VAR 0 5
3783: PUSH
3784: LD_EXP 21
3788: PUSH
3789: LD_VAR 0 8
3793: ARRAY
3794: PUSH
3795: LD_INT 1
3797: ARRAY
3798: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3799: LD_ADDR_VAR 0 6
3803: PUSH
3804: LD_EXP 21
3808: PUSH
3809: LD_VAR 0 8
3813: ARRAY
3814: PUSH
3815: LD_INT 2
3817: ARRAY
3818: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3819: LD_VAR 0 5
3823: PPUSH
3824: LD_VAR 0 6
3828: PPUSH
3829: LD_INT 12
3831: PPUSH
3832: LD_INT 2
3834: PPUSH
3835: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3839: LD_ADDR_EXP 23
3843: PUSH
3844: LD_EXP 23
3848: PPUSH
3849: LD_VAR 0 7
3853: PPUSH
3854: LD_VAR 0 7
3858: PPUSH
3859: LD_VAR 0 5
3863: PPUSH
3864: LD_VAR 0 6
3868: PPUSH
3869: LD_INT 1
3871: PUSH
3872: LD_INT 100
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 2
3881: PUSH
3882: LD_INT 70
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 40
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 10
3901: PUSH
3902: LD_INT 25
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 20
3911: PUSH
3912: LD_INT 100
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 418
3930: PPUSH
3931: CALL_OW 1
3935: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3936: LD_EXP 14
3940: PPUSH
3941: CALL 12914 0 1
3945: IFFALSE 4140
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
3947: LD_EXP 3
3951: PUSH
3952: LD_INT 2
3954: PUSH
3955: LD_INT 6
3957: PUSH
3958: LD_INT 7
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: IN
3966: IFFALSE 3986
// begin bc_level := 10 ;
3968: LD_ADDR_OWVAR 43
3972: PUSH
3973: LD_INT 10
3975: ST_TO_ADDR
// bc_type := b_warehouse ;
3976: LD_ADDR_OWVAR 42
3980: PUSH
3981: LD_INT 1
3983: ST_TO_ADDR
// end else
3984: GO 4002
// begin bc_level := 0 ;
3986: LD_ADDR_OWVAR 43
3990: PUSH
3991: LD_INT 0
3993: ST_TO_ADDR
// bc_type := b_depot ;
3994: LD_ADDR_OWVAR 42
3998: PUSH
3999: LD_INT 0
4001: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4002: LD_ADDR_VAR 0 4
4006: PUSH
4007: LD_EXP 14
4011: PUSH
4012: LD_VAR 0 8
4016: ARRAY
4017: PUSH
4018: LD_INT 1
4020: ARRAY
4021: PPUSH
4022: LD_EXP 14
4026: PUSH
4027: LD_VAR 0 8
4031: ARRAY
4032: PUSH
4033: LD_INT 2
4035: ARRAY
4036: PPUSH
4037: LD_EXP 14
4041: PUSH
4042: LD_VAR 0 8
4046: ARRAY
4047: PUSH
4048: LD_INT 3
4050: ARRAY
4051: PPUSH
4052: CALL_OW 47
4056: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4057: LD_VAR 0 4
4061: PPUSH
4062: LD_STRING @
4064: PUSH
4065: LD_VAR 0 7
4069: STR
4070: PPUSH
4071: CALL_OW 500
// if Count ( mpStartingResources ) then
4075: LD_EXP 15
4079: PPUSH
4080: CALL 12914 0 1
4084: IFFALSE 4138
// begin for j := 1 to mpStartingResources do
4086: LD_ADDR_VAR 0 3
4090: PUSH
4091: DOUBLE
4092: LD_INT 1
4094: DEC
4095: ST_TO_ADDR
4096: LD_EXP 15
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4136
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4104: LD_VAR 0 4
4108: PPUSH
4109: CALL_OW 274
4113: PPUSH
4114: LD_VAR 0 3
4118: PPUSH
4119: LD_EXP 15
4123: PUSH
4124: LD_VAR 0 3
4128: ARRAY
4129: PPUSH
4130: CALL_OW 277
4134: GO 4101
4136: POP
4137: POP
// end ; end else
4138: GO 4347
// if Count ( mpStartingResources ) then
4140: LD_EXP 15
4144: PPUSH
4145: CALL 12914 0 1
4149: IFFALSE 4347
// begin x := mpStartPos [ pos ] [ 1 ] ;
4151: LD_ADDR_VAR 0 5
4155: PUSH
4156: LD_EXP 21
4160: PUSH
4161: LD_VAR 0 8
4165: ARRAY
4166: PUSH
4167: LD_INT 1
4169: ARRAY
4170: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4171: LD_ADDR_VAR 0 6
4175: PUSH
4176: LD_EXP 21
4180: PUSH
4181: LD_VAR 0 8
4185: ARRAY
4186: PUSH
4187: LD_INT 2
4189: ARRAY
4190: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4191: LD_ADDR_VAR 0 3
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_EXP 15
4205: PUSH
4206: FOR_TO
4207: IFFALSE 4345
// begin resources := mpStartingResources [ j ] ;
4209: LD_ADDR_VAR 0 13
4213: PUSH
4214: LD_EXP 15
4218: PUSH
4219: LD_VAR 0 3
4223: ARRAY
4224: ST_TO_ADDR
// if resources = 0 then
4225: LD_VAR 0 13
4229: PUSH
4230: LD_INT 0
4232: EQUAL
4233: IFFALSE 4237
// continue ;
4235: GO 4206
// repeat if resources >= 50 then
4237: LD_VAR 0 13
4241: PUSH
4242: LD_INT 50
4244: GREATEREQUAL
4245: IFFALSE 4291
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: LD_VAR 0 5
4259: PPUSH
4260: LD_VAR 0 6
4264: PPUSH
4265: LD_INT 6
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 60
// resources := resources - 50 ;
4275: LD_ADDR_VAR 0 13
4279: PUSH
4280: LD_VAR 0 13
4284: PUSH
4285: LD_INT 50
4287: MINUS
4288: ST_TO_ADDR
// end else
4289: GO 4333
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4291: LD_VAR 0 3
4295: PPUSH
4296: LD_VAR 0 13
4300: PUSH
4301: LD_INT 10
4303: DIV
4304: PPUSH
4305: LD_VAR 0 5
4309: PPUSH
4310: LD_VAR 0 6
4314: PPUSH
4315: LD_INT 6
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 60
// resources := 0 ;
4325: LD_ADDR_VAR 0 13
4329: PUSH
4330: LD_INT 0
4332: ST_TO_ADDR
// end ; until resources <= 0 ;
4333: LD_VAR 0 13
4337: PUSH
4338: LD_INT 0
4340: LESSEQUAL
4341: IFFALSE 4237
// end ;
4343: GO 4206
4345: POP
4346: POP
// end ; if Count ( mpBuildings ) then
4347: LD_EXP 17
4351: PPUSH
4352: CALL 12914 0 1
4356: IFFALSE 4434
// begin for j in mpBuildings [ pos ] do
4358: LD_ADDR_VAR 0 3
4362: PUSH
4363: LD_EXP 17
4367: PUSH
4368: LD_VAR 0 8
4372: ARRAY
4373: PUSH
4374: FOR_IN
4375: IFFALSE 4432
// begin bc_level := 0 ;
4377: LD_ADDR_OWVAR 43
4381: PUSH
4382: LD_INT 0
4384: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4385: LD_ADDR_OWVAR 42
4389: PUSH
4390: LD_VAR 0 3
4394: PUSH
4395: LD_INT 1
4397: ARRAY
4398: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4399: LD_VAR 0 3
4403: PUSH
4404: LD_INT 2
4406: ARRAY
4407: PPUSH
4408: LD_VAR 0 3
4412: PUSH
4413: LD_INT 3
4415: ARRAY
4416: PPUSH
4417: LD_VAR 0 3
4421: PUSH
4422: LD_INT 4
4424: ARRAY
4425: PPUSH
4426: CALL_OW 47
// end ;
4430: GO 4374
4432: POP
4433: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4434: LD_EXP 26
4438: IFFALSE 4458
4440: PUSH
4441: LD_INT 20
4443: PPUSH
4444: LD_VAR 0 7
4448: PPUSH
4449: CALL_OW 321
4453: PUSH
4454: LD_INT 1
4456: EQUAL
4457: AND
4458: IFFALSE 4475
// SetTech ( tech_SibDet , side , state_researched ) ;
4460: LD_INT 20
4462: PPUSH
4463: LD_VAR 0 7
4467: PPUSH
4468: LD_INT 2
4470: PPUSH
4471: CALL_OW 322
// if not mpArtifacts then
4475: LD_EXP 44
4479: NOT
4480: IFFALSE 4497
// SetTech ( tech_artifact , side , state_disabled ) ;
4482: LD_INT 24
4484: PPUSH
4485: LD_VAR 0 7
4489: PPUSH
4490: LD_INT 0
4492: PPUSH
4493: CALL_OW 322
// if mpSibBomb = 1 then
4497: LD_EXP 28
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: IFFALSE 4524
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4507: LD_INT 25
4509: PPUSH
4510: LD_VAR 0 7
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: CALL_OW 322
// end else
4522: GO 4539
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4524: LD_INT 25
4526: PPUSH
4527: LD_VAR 0 7
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 322
// end ; if mpVehicles then
4539: LD_EXP 36
4543: IFFALSE 4642
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_VAR 0 7
4554: PPUSH
4555: LD_VAR 0 9
4559: PPUSH
4560: LD_EXP 36
4564: PPUSH
4565: CALL 5865 0 3
4569: PUSH
4570: FOR_IN
4571: IFFALSE 4640
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4573: LD_VAR 0 3
4577: PPUSH
4578: LD_INT 0
4580: PPUSH
4581: LD_INT 5
4583: PPUSH
4584: CALL_OW 12
4588: PPUSH
4589: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: LD_EXP 21
4602: PUSH
4603: LD_VAR 0 8
4607: ARRAY
4608: PUSH
4609: LD_INT 1
4611: ARRAY
4612: PPUSH
4613: LD_EXP 21
4617: PUSH
4618: LD_VAR 0 8
4622: ARRAY
4623: PUSH
4624: LD_INT 2
4626: ARRAY
4627: PPUSH
4628: LD_INT 12
4630: PPUSH
4631: LD_INT 0
4633: PPUSH
4634: CALL_OW 50
// end ;
4638: GO 4570
4640: POP
4641: POP
// end ; uc_nation := nation ;
4642: LD_ADDR_OWVAR 21
4646: PUSH
4647: LD_VAR 0 9
4651: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4652: LD_EXP 3
4656: PUSH
4657: LD_INT 6
4659: PUSH
4660: LD_INT 7
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: IN
4667: IFFALSE 4692
4669: PUSH
4670: LD_EXP 7
4674: PUSH
4675: LD_VAR 0 2
4679: ARRAY
4680: PUSH
4681: LD_INT 1
4683: PUSH
4684: LD_INT 2
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: IN
4691: AND
4692: IFFALSE 4740
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4694: LD_ADDR_VAR 0 11
4698: PUSH
4699: LD_VAR 0 7
4703: PPUSH
4704: LD_VAR 0 9
4708: PPUSH
4709: LD_EXP 24
4713: PUSH
4714: LD_EXP 24
4718: PUSH
4719: LD_INT 2
4721: DIV
4722: PLUS
4723: PPUSH
4724: LD_EXP 25
4728: PUSH
4729: LD_INT 1
4731: PLUS
4732: PPUSH
4733: CALL 5356 0 4
4737: ST_TO_ADDR
4738: GO 4770
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4740: LD_ADDR_VAR 0 11
4744: PUSH
4745: LD_VAR 0 7
4749: PPUSH
4750: LD_VAR 0 9
4754: PPUSH
4755: LD_EXP 24
4759: PPUSH
4760: LD_EXP 25
4764: PPUSH
4765: CALL 5356 0 4
4769: ST_TO_ADDR
// for j in team do
4770: LD_ADDR_VAR 0 3
4774: PUSH
4775: LD_VAR 0 11
4779: PUSH
4780: FOR_IN
4781: IFFALSE 4830
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4783: LD_VAR 0 3
4787: PPUSH
4788: LD_EXP 21
4792: PUSH
4793: LD_VAR 0 8
4797: ARRAY
4798: PUSH
4799: LD_INT 1
4801: ARRAY
4802: PPUSH
4803: LD_EXP 21
4807: PUSH
4808: LD_VAR 0 8
4812: ARRAY
4813: PUSH
4814: LD_INT 2
4816: ARRAY
4817: PPUSH
4818: LD_INT 12
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: CALL_OW 50
4828: GO 4780
4830: POP
4831: POP
// if mpApemans then
4832: LD_EXP 30
4836: IFFALSE 4942
// begin for j := 1 to mpApemans do
4838: LD_ADDR_VAR 0 3
4842: PUSH
4843: DOUBLE
4844: LD_INT 1
4846: DEC
4847: ST_TO_ADDR
4848: LD_EXP 30
4852: PUSH
4853: FOR_TO
4854: IFFALSE 4940
// begin PrepareApeman ( - 5 ) ;
4856: LD_INT 5
4858: NEG
4859: PPUSH
4860: CALL 45007 0 1
// ape := CreateHuman ;
4864: LD_ADDR_VAR 0 10
4868: PUSH
4869: CALL_OW 44
4873: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4874: LD_ADDR_EXP 32
4878: PUSH
4879: LD_EXP 32
4883: PPUSH
4884: LD_VAR 0 8
4888: PPUSH
4889: LD_EXP 32
4893: PUSH
4894: LD_VAR 0 8
4898: ARRAY
4899: PPUSH
4900: LD_VAR 0 10
4904: PPUSH
4905: CALL 48880 0 2
4909: PPUSH
4910: CALL_OW 1
4914: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4915: LD_VAR 0 10
4919: PPUSH
4920: LD_EXP 31
4924: PUSH
4925: LD_VAR 0 8
4929: ARRAY
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
// end ;
4938: GO 4853
4940: POP
4941: POP
// end ; end ;
4942: GO 3508
4944: POP
4945: POP
// if not mpTeamGame then
4946: LD_EXP 11
4950: NOT
4951: IFFALSE 5049
// begin for i := 1 to 8 do
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: DOUBLE
4959: LD_INT 1
4961: DEC
4962: ST_TO_ADDR
4963: LD_INT 8
4965: PUSH
4966: FOR_TO
4967: IFFALSE 5045
// for j := 1 to 8 do
4969: LD_ADDR_VAR 0 3
4973: PUSH
4974: DOUBLE
4975: LD_INT 1
4977: DEC
4978: ST_TO_ADDR
4979: LD_INT 8
4981: PUSH
4982: FOR_TO
4983: IFFALSE 5041
// if i <> j then
4985: LD_VAR 0 2
4989: PUSH
4990: LD_VAR 0 3
4994: NONEQUAL
4995: IFFALSE 5019
// SetAttitude ( i , j , att_neutral , true ) else
4997: LD_VAR 0 2
5001: PPUSH
5002: LD_VAR 0 3
5006: PPUSH
5007: LD_INT 0
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 80
5017: GO 5039
// SetAttitude ( i , j , att_friend , true ) ;
5019: LD_VAR 0 2
5023: PPUSH
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_INT 1
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: CALL_OW 80
5039: GO 4982
5041: POP
5042: POP
5043: GO 4966
5045: POP
5046: POP
// end else
5047: GO 5224
// begin if mpSharedVision then
5049: LD_EXP 16
5053: IFFALSE 5118
// begin for i in mpTeams do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: LD_EXP 10
5064: PUSH
5065: FOR_IN
5066: IFFALSE 5116
// for j := 2 to i do
5068: LD_ADDR_VAR 0 3
5072: PUSH
5073: DOUBLE
5074: LD_INT 2
5076: DEC
5077: ST_TO_ADDR
5078: LD_VAR 0 2
5082: PUSH
5083: FOR_TO
5084: IFFALSE 5112
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5086: LD_VAR 0 2
5090: PUSH
5091: LD_VAR 0 3
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_INT 1
5104: ARRAY
5105: PPUSH
5106: CALL_OW 343
5110: GO 5083
5112: POP
5113: POP
5114: GO 5065
5116: POP
5117: POP
// end ; for i := 1 to 8 do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 8
5130: PUSH
5131: FOR_TO
5132: IFFALSE 5222
// for j := 1 to 8 do
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: DOUBLE
5140: LD_INT 1
5142: DEC
5143: ST_TO_ADDR
5144: LD_INT 8
5146: PUSH
5147: FOR_TO
5148: IFFALSE 5218
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5150: LD_EXP 8
5154: PUSH
5155: LD_VAR 0 2
5159: ARRAY
5160: PUSH
5161: LD_EXP 8
5165: PUSH
5166: LD_VAR 0 3
5170: ARRAY
5171: EQUAL
5172: IFFALSE 5196
// SetAttitude ( i , j , att_friend , true ) else
5174: LD_VAR 0 2
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 80
5194: GO 5216
// SetAttitude ( i , j , att_enemy , true ) ;
5196: LD_VAR 0 2
5200: PPUSH
5201: LD_VAR 0 3
5205: PPUSH
5206: LD_INT 2
5208: PPUSH
5209: LD_INT 1
5211: PPUSH
5212: CALL_OW 80
5216: GO 5147
5218: POP
5219: POP
5220: GO 5131
5222: POP
5223: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5224: LD_ADDR_OWVAR 71
5228: PUSH
5229: LD_EXP 9
5233: PUSH
5234: LD_OWVAR 2
5238: ARRAY
5239: ST_TO_ADDR
// if IAmSpec then
5240: CALL_OW 531
5244: IFFALSE 5285
// begin FogOff ( true ) ;
5246: LD_INT 1
5248: PPUSH
5249: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5253: LD_EXP 29
5257: PUSH
5258: LD_INT 1
5260: ARRAY
5261: PUSH
5262: LD_INT 2
5264: DIV
5265: PPUSH
5266: LD_EXP 29
5270: PUSH
5271: LD_INT 2
5273: ARRAY
5274: PUSH
5275: LD_INT 2
5277: DIV
5278: PPUSH
5279: CALL_OW 86
// end else
5283: GO 5331
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5285: LD_EXP 21
5289: PUSH
5290: LD_EXP 7
5294: PUSH
5295: LD_OWVAR 2
5299: ARRAY
5300: ARRAY
5301: PUSH
5302: LD_INT 1
5304: ARRAY
5305: PPUSH
5306: LD_EXP 21
5310: PUSH
5311: LD_EXP 7
5315: PUSH
5316: LD_OWVAR 2
5320: ARRAY
5321: ARRAY
5322: PUSH
5323: LD_INT 2
5325: ARRAY
5326: PPUSH
5327: CALL_OW 86
// end ; BeginBuildUp ;
5331: CALL 6398 0 0
// enable ( mpActive ) ;
5335: LD_INT 100
5337: ENABLE_MARKED
// enable ( mpGameType ) ;
5338: LD_EXP 3
5342: ENABLE_MARKED
// mpGameActive := true ;
5343: LD_ADDR_EXP 39
5347: PUSH
5348: LD_INT 1
5350: ST_TO_ADDR
// end ;
5351: LD_VAR 0 1
5355: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5356: LD_INT 0
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
// result := [ ] ;
5362: LD_ADDR_VAR 0 5
5366: PUSH
5367: EMPTY
5368: ST_TO_ADDR
// class := class_soldier ;
5369: LD_ADDR_VAR 0 8
5373: PUSH
5374: LD_INT 1
5376: ST_TO_ADDR
// uc_side := side ;
5377: LD_ADDR_OWVAR 20
5381: PUSH
5382: LD_VAR 0 1
5386: ST_TO_ADDR
// uc_nation := nation ;
5387: LD_ADDR_OWVAR 21
5391: PUSH
5392: LD_VAR 0 2
5396: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5397: LD_ADDR_OWVAR 26
5401: PUSH
5402: LD_OWVAR 19
5406: PUSH
5407: LD_VAR 0 1
5411: ARRAY
5412: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5413: LD_INT 1
5415: PPUSH
5416: LD_INT 2
5418: PPUSH
5419: CALL_OW 12
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: LD_VAR 0 4
5433: PUSH
5434: LD_INT 2
5436: PLUS
5437: PPUSH
5438: CALL_OW 380
// hc_importance := 105 ;
5442: LD_ADDR_OWVAR 32
5446: PUSH
5447: LD_INT 105
5449: ST_TO_ADDR
// if Multiplayer then
5450: LD_OWVAR 4
5454: IFFALSE 5494
// begin hc_gallery := MULTIAVATARS ;
5456: LD_ADDR_OWVAR 33
5460: PUSH
5461: LD_STRING MULTIAVATARS
5463: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5464: LD_ADDR_OWVAR 34
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 525
5478: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5479: LD_ADDR_OWVAR 27
5483: PUSH
5484: LD_VAR 0 1
5488: PPUSH
5489: CALL_OW 526
5493: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_VAR 0 5
5503: PPUSH
5504: CALL_OW 44
5508: PPUSH
5509: CALL 48880 0 2
5513: ST_TO_ADDR
// if mpTeamPreset then
5514: LD_LOC 1
5518: IFFALSE 5614
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5520: LD_LOC 1
5524: PUSH
5525: LD_INT 1
5527: ARRAY
5528: PPUSH
5529: LD_VAR 0 5
5533: PUSH
5534: LD_VAR 0 5
5538: ARRAY
5539: PPUSH
5540: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5544: LD_VAR 0 5
5548: PUSH
5549: LD_VAR 0 5
5553: ARRAY
5554: PPUSH
5555: LD_INT 1
5557: PPUSH
5558: LD_LOC 1
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 260
5574: PPUSH
5575: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5579: LD_VAR 0 5
5583: PUSH
5584: LD_VAR 0 5
5588: ARRAY
5589: PPUSH
5590: LD_INT 2
5592: PPUSH
5593: LD_LOC 1
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PPUSH
5602: LD_INT 2
5604: PPUSH
5605: CALL_OW 260
5609: PPUSH
5610: CALL_OW 239
// end ; InitHc_All ( ) ;
5614: CALL_OW 584
// class := 2 ;
5618: LD_ADDR_VAR 0 8
5622: PUSH
5623: LD_INT 2
5625: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5626: LD_ADDR_VAR 0 6
5630: PUSH
5631: DOUBLE
5632: LD_INT 1
5634: DEC
5635: ST_TO_ADDR
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 1
5643: MINUS
5644: PUSH
5645: FOR_TO
5646: IFFALSE 5841
// begin PrepareHuman ( false , class , skill ) ;
5648: LD_INT 0
5650: PPUSH
5651: LD_VAR 0 8
5655: PPUSH
5656: LD_VAR 0 4
5660: PPUSH
5661: CALL_OW 380
// un := CreateHuman ;
5665: LD_ADDR_VAR 0 7
5669: PUSH
5670: CALL_OW 44
5674: ST_TO_ADDR
// result := Join ( result , un ) ;
5675: LD_ADDR_VAR 0 5
5679: PUSH
5680: LD_VAR 0 5
5684: PPUSH
5685: LD_VAR 0 7
5689: PPUSH
5690: CALL 48880 0 2
5694: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5695: LD_LOC 1
5699: PPUSH
5700: CALL 12914 0 1
5704: PUSH
5705: LD_VAR 0 3
5709: GREATEREQUAL
5710: IFFALSE 5806
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5712: LD_LOC 1
5716: PUSH
5717: LD_VAR 0 6
5721: PUSH
5722: LD_INT 1
5724: PLUS
5725: ARRAY
5726: PPUSH
5727: LD_VAR 0 7
5731: PPUSH
5732: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5736: LD_VAR 0 7
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_LOC 1
5748: PUSH
5749: LD_VAR 0 6
5753: PUSH
5754: LD_INT 1
5756: PLUS
5757: ARRAY
5758: PPUSH
5759: LD_INT 1
5761: PPUSH
5762: CALL_OW 260
5766: PPUSH
5767: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5771: LD_VAR 0 7
5775: PPUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_LOC 1
5783: PUSH
5784: LD_VAR 0 6
5788: PUSH
5789: LD_INT 1
5791: PLUS
5792: ARRAY
5793: PPUSH
5794: LD_INT 2
5796: PPUSH
5797: CALL_OW 260
5801: PPUSH
5802: CALL_OW 239
// end ; class := Inc ( class ) ;
5806: LD_ADDR_VAR 0 8
5810: PUSH
5811: LD_VAR 0 8
5815: PPUSH
5816: CALL 50253 0 1
5820: ST_TO_ADDR
// if class = 5 then
5821: LD_VAR 0 8
5825: PUSH
5826: LD_INT 5
5828: EQUAL
5829: IFFALSE 5839
// class := 1 ;
5831: LD_ADDR_VAR 0 8
5835: PUSH
5836: LD_INT 1
5838: ST_TO_ADDR
// end ;
5839: GO 5645
5841: POP
5842: POP
// if not mpTeamPreset then
5843: LD_LOC 1
5847: NOT
5848: IFFALSE 5860
// mpTeamPreset := result ;
5850: LD_ADDR_LOC 1
5854: PUSH
5855: LD_VAR 0 5
5859: ST_TO_ADDR
// end ;
5860: LD_VAR 0 5
5864: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5865: LD_INT 0
5867: PPUSH
5868: PPUSH
// result := [ ] ;
5869: LD_ADDR_VAR 0 4
5873: PUSH
5874: EMPTY
5875: ST_TO_ADDR
// if not vehicles then
5876: LD_VAR 0 3
5880: NOT
5881: IFFALSE 5885
// exit ;
5883: GO 6099
// for i := 1 to vehicles [ nation ] do
5885: LD_ADDR_VAR 0 5
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_VAR 0 3
5899: PUSH
5900: LD_VAR 0 2
5904: ARRAY
5905: PUSH
5906: FOR_TO
5907: IFFALSE 6097
// begin uc_side := side ;
5909: LD_ADDR_OWVAR 20
5913: PUSH
5914: LD_VAR 0 1
5918: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5919: LD_VAR 0 3
5923: PUSH
5924: LD_VAR 0 2
5928: ARRAY
5929: PUSH
5930: LD_VAR 0 5
5934: ARRAY
5935: PPUSH
5936: CALL 12914 0 1
5940: PUSH
5941: LD_INT 4
5943: GREATER
5944: IFFALSE 5974
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5946: LD_ADDR_OWVAR 21
5950: PUSH
5951: LD_VAR 0 3
5955: PUSH
5956: LD_VAR 0 2
5960: ARRAY
5961: PUSH
5962: LD_VAR 0 5
5966: ARRAY
5967: PUSH
5968: LD_INT 5
5970: ARRAY
5971: ST_TO_ADDR
5972: GO 5984
// uc_nation := nation ;
5974: LD_ADDR_OWVAR 21
5978: PUSH
5979: LD_VAR 0 2
5983: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5984: LD_VAR 0 3
5988: PUSH
5989: LD_VAR 0 2
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 5
5999: ARRAY
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: PPUSH
6005: LD_VAR 0 3
6009: PUSH
6010: LD_VAR 0 2
6014: ARRAY
6015: PUSH
6016: LD_VAR 0 5
6020: ARRAY
6021: PUSH
6022: LD_INT 2
6024: ARRAY
6025: PPUSH
6026: LD_VAR 0 3
6030: PUSH
6031: LD_VAR 0 2
6035: ARRAY
6036: PUSH
6037: LD_VAR 0 5
6041: ARRAY
6042: PUSH
6043: LD_INT 3
6045: ARRAY
6046: PPUSH
6047: LD_VAR 0 3
6051: PUSH
6052: LD_VAR 0 2
6056: ARRAY
6057: PUSH
6058: LD_VAR 0 5
6062: ARRAY
6063: PUSH
6064: LD_INT 4
6066: ARRAY
6067: PPUSH
6068: LD_INT 80
6070: PPUSH
6071: CALL 15710 0 5
// result := Join ( result , CreateVehicle ) ;
6075: LD_ADDR_VAR 0 4
6079: PUSH
6080: LD_VAR 0 4
6084: PPUSH
6085: CALL_OW 45
6089: PPUSH
6090: CALL 48880 0 2
6094: ST_TO_ADDR
// end ;
6095: GO 5906
6097: POP
6098: POP
// end ;
6099: LD_VAR 0 4
6103: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6104: LD_INT 0
6106: PPUSH
6107: PPUSH
// for i in mpBattleFlags do
6108: LD_ADDR_VAR 0 3
6112: PUSH
6113: LD_EXP 23
6117: PUSH
6118: FOR_IN
6119: IFFALSE 6196
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6121: LD_VAR 0 3
6125: PPUSH
6126: LD_INT 1
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 2
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: LD_REAL  7.00000000000000E-0001
6149: MUL
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_VAR 0 1
6162: PUSH
6163: LD_REAL  4.00000000000000E-0001
6166: MUL
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 20
6174: PUSH
6175: LD_VAR 0 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 423
6194: GO 6118
6196: POP
6197: POP
// end ;
6198: LD_VAR 0 2
6202: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6203: LD_INT 100
6205: IFFALSE 6300
6207: GO 6209
6209: DISABLE
6210: LD_INT 0
6212: PPUSH
6213: PPUSH
// begin if mpBattleFlag <= 0 then
6214: LD_EXP 22
6218: PUSH
6219: LD_INT 0
6221: LESSEQUAL
6222: IFFALSE 6226
// exit ;
6224: GO 6300
// strength := 100 ;
6226: LD_ADDR_VAR 0 2
6230: PUSH
6231: LD_INT 100
6233: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6234: LD_EXP 22
6238: PPUSH
6239: CALL_OW 67
// strength := Dec ( strength ) ;
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL 50275 0 1
6257: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: CALL 6104 0 1
// until not strength ;
6267: LD_VAR 0 2
6271: NOT
6272: IFFALSE 6234
// for i in mpBattleFlags do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_EXP 23
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6298
// KillBattleFlag ( i ) ;
6287: LD_VAR 0 1
6291: PPUSH
6292: CALL_OW 419
6296: GO 6284
6298: POP
6299: POP
// end ;
6300: PPOPN 2
6302: END
// every 0 0$1 marked mpActive do var side , tmp ;
6303: GO 6305
6305: DISABLE
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
// begin if mpSibBomb <= 1 then
6310: LD_EXP 28
6314: PUSH
6315: LD_INT 1
6317: LESSEQUAL
6318: IFFALSE 6322
// exit ;
6320: GO 6395
// tmp := mpSibBomb ;
6322: LD_ADDR_VAR 0 2
6326: PUSH
6327: LD_EXP 28
6331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6332: LD_INT 35
6334: PPUSH
6335: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_VAR 0 2
6348: PUSH
6349: LD_INT 35
6351: MINUS
6352: ST_TO_ADDR
// until not tmp ;
6353: LD_VAR 0 2
6357: NOT
6358: IFFALSE 6332
// for side := 1 to 8 do
6360: LD_ADDR_VAR 0 1
6364: PUSH
6365: DOUBLE
6366: LD_INT 1
6368: DEC
6369: ST_TO_ADDR
6370: LD_INT 8
6372: PUSH
6373: FOR_TO
6374: IFFALSE 6393
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6376: LD_INT 25
6378: PPUSH
6379: LD_VAR 0 1
6383: PPUSH
6384: LD_INT 1
6386: PPUSH
6387: CALL_OW 322
6391: GO 6373
6393: POP
6394: POP
// end ;
6395: PPOPN 2
6397: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
6402: PPUSH
// mpBuildUpTimeDelay := 0 ;
6403: LD_ADDR_EXP 47
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// if not mpBuildUpTime then
6411: LD_EXP 20
6415: NOT
6416: IFFALSE 6420
// exit ;
6418: GO 6609
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6420: LD_ADDR_EXP 47
6424: PUSH
6425: LD_INT 8400
6427: PUSH
6428: LD_INT 2100
6430: PUSH
6431: LD_EXP 20
6435: MUL
6436: PLUS
6437: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6438: LD_ADDR_EXP 48
6442: PUSH
6443: LD_INT 1
6445: ST_TO_ADDR
// for i := 1 to 8 do
6446: LD_ADDR_VAR 0 2
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_INT 8
6458: PUSH
6459: FOR_TO
6460: IFFALSE 6607
// if mpSidePositions [ i ] then
6462: LD_EXP 7
6466: PUSH
6467: LD_VAR 0 2
6471: ARRAY
6472: IFFALSE 6605
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6474: LD_EXP 19
6478: PUSH
6479: LD_EXP 7
6483: PUSH
6484: LD_VAR 0 2
6488: ARRAY
6489: ARRAY
6490: PPUSH
6491: LD_INT 5
6493: PPUSH
6494: CALL_OW 424
// for j := 1 to 8 do
6498: LD_ADDR_VAR 0 3
6502: PUSH
6503: DOUBLE
6504: LD_INT 1
6506: DEC
6507: ST_TO_ADDR
6508: LD_INT 8
6510: PUSH
6511: FOR_TO
6512: IFFALSE 6603
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6514: LD_EXP 7
6518: PUSH
6519: LD_VAR 0 3
6523: ARRAY
6524: IFFALSE 6573
6526: PUSH
6527: LD_EXP 8
6531: PUSH
6532: LD_VAR 0 2
6536: ARRAY
6537: PUSH
6538: LD_EXP 8
6542: PUSH
6543: LD_VAR 0 3
6547: ARRAY
6548: NONEQUAL
6549: IFTRUE 6572
6551: PUSH
6552: LD_EXP 11
6556: NOT
6557: IFFALSE 6571
6559: PUSH
6560: LD_VAR 0 2
6564: PUSH
6565: LD_VAR 0 3
6569: NONEQUAL
6570: AND
6571: OR
6572: AND
6573: IFFALSE 6601
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6575: LD_VAR 0 3
6579: PPUSH
6580: LD_EXP 19
6584: PUSH
6585: LD_EXP 7
6589: PUSH
6590: LD_VAR 0 2
6594: ARRAY
6595: ARRAY
6596: PPUSH
6597: CALL_OW 333
6601: GO 6511
6603: POP
6604: POP
// end ;
6605: GO 6459
6607: POP
6608: POP
// end ;
6609: LD_VAR 0 1
6613: RET
// function EndBuildUp ; var i , j ; begin
6614: LD_INT 0
6616: PPUSH
6617: PPUSH
6618: PPUSH
// mpBuildUpTimeActive := false ;
6619: LD_ADDR_EXP 48
6623: PUSH
6624: LD_INT 0
6626: ST_TO_ADDR
// for i := 1 to 8 do
6627: LD_ADDR_VAR 0 2
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_INT 8
6639: PUSH
6640: FOR_TO
6641: IFFALSE 6788
// if mpSidePositions [ i ] then
6643: LD_EXP 7
6647: PUSH
6648: LD_VAR 0 2
6652: ARRAY
6653: IFFALSE 6786
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6655: LD_EXP 19
6659: PUSH
6660: LD_EXP 7
6664: PUSH
6665: LD_VAR 0 2
6669: ARRAY
6670: ARRAY
6671: PPUSH
6672: LD_INT 0
6674: PPUSH
6675: CALL_OW 424
// for j := 1 to 8 do
6679: LD_ADDR_VAR 0 3
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_INT 8
6691: PUSH
6692: FOR_TO
6693: IFFALSE 6784
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6695: LD_EXP 7
6699: PUSH
6700: LD_VAR 0 3
6704: ARRAY
6705: IFFALSE 6754
6707: PUSH
6708: LD_EXP 8
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PUSH
6719: LD_EXP 8
6723: PUSH
6724: LD_VAR 0 3
6728: ARRAY
6729: NONEQUAL
6730: IFTRUE 6753
6732: PUSH
6733: LD_EXP 11
6737: NOT
6738: IFFALSE 6752
6740: PUSH
6741: LD_VAR 0 2
6745: PUSH
6746: LD_VAR 0 3
6750: NONEQUAL
6751: AND
6752: OR
6753: AND
6754: IFFALSE 6782
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6756: LD_VAR 0 3
6760: PPUSH
6761: LD_EXP 19
6765: PUSH
6766: LD_EXP 7
6770: PUSH
6771: LD_VAR 0 2
6775: ARRAY
6776: ARRAY
6777: PPUSH
6778: CALL_OW 334
6782: GO 6692
6784: POP
6785: POP
// end ;
6786: GO 6640
6788: POP
6789: POP
// end ;
6790: LD_VAR 0 1
6794: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6795: LD_EXP 48
6799: IFFALSE 6978
6801: GO 6803
6803: DISABLE
6804: LD_INT 0
6806: PPUSH
6807: PPUSH
// begin for i := 1 to 8 do
6808: LD_ADDR_VAR 0 1
6812: PUSH
6813: DOUBLE
6814: LD_INT 1
6816: DEC
6817: ST_TO_ADDR
6818: LD_INT 8
6820: PUSH
6821: FOR_TO
6822: IFFALSE 6975
// if mpSidePositions [ i ] then
6824: LD_EXP 7
6828: PUSH
6829: LD_VAR 0 1
6833: ARRAY
6834: IFFALSE 6973
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6836: LD_ADDR_VAR 0 2
6840: PUSH
6841: LD_EXP 19
6845: PUSH
6846: LD_EXP 7
6850: PUSH
6851: LD_VAR 0 1
6855: ARRAY
6856: ARRAY
6857: PPUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 21
6863: PUSH
6864: LD_INT 1
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 21
6873: PUSH
6874: LD_INT 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 22
6888: PUSH
6889: LD_OWVAR 2
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 70
6906: PUSH
6907: FOR_IN
6908: IFFALSE 6971
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6910: LD_EXP 8
6914: PUSH
6915: LD_VAR 0 1
6919: ARRAY
6920: PUSH
6921: LD_EXP 8
6925: PUSH
6926: LD_OWVAR 2
6930: ARRAY
6931: NONEQUAL
6932: IFTRUE 6955
6934: PUSH
6935: LD_EXP 11
6939: NOT
6940: IFFALSE 6954
6942: PUSH
6943: LD_VAR 0 1
6947: PUSH
6948: LD_OWVAR 2
6952: NONEQUAL
6953: AND
6954: OR
6955: IFFALSE 6969
// ComMoveToArea ( un , BuildUpEscape ) ;
6957: LD_VAR 0 2
6961: PPUSH
6962: LD_INT 15
6964: PPUSH
6965: CALL_OW 113
6969: GO 6907
6971: POP
6972: POP
6973: GO 6821
6975: POP
6976: POP
// enable ;
6977: ENABLE
// end ;
6978: PPOPN 2
6980: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6981: LD_EXP 20
6985: IFFALSE 7035
6987: GO 6989
6989: DISABLE
6990: LD_INT 0
6992: PPUSH
// begin tmp := mpBuildUpTime ;
6993: LD_ADDR_VAR 0 1
6997: PUSH
6998: LD_EXP 20
7002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7003: LD_INT 35
7005: PPUSH
7006: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7010: LD_ADDR_VAR 0 1
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: LD_INT 35
7022: MINUS
7023: ST_TO_ADDR
// until not tmp ;
7024: LD_VAR 0 1
7028: NOT
7029: IFFALSE 7003
// EndBuildUp ;
7031: CALL 6614 0 0
// end ;
7035: PPOPN 1
7037: END
// every 0 0$1 trigger mpActive marked mpWin do
7038: LD_INT 100
7040: IFFALSE 7074
7042: GO 7044
7044: DISABLE
// begin if IAmServer then
7045: CALL_OW 518
7049: IFFALSE 7058
// wait ( 0 0$3 ) ;
7051: LD_INT 105
7053: PPUSH
7054: CALL_OW 67
// if Multiplayer then
7058: LD_OWVAR 4
7062: IFFALSE 7070
// YouWinInMultiplayer else
7064: CALL_OW 106
7068: GO 7074
// YouWin ;
7070: CALL_OW 103
// end ;
7074: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7075: LD_INT 0
7077: PPUSH
// result := false ;
7078: LD_ADDR_VAR 0 3
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7086: LD_VAR 0 1
7090: PUSH
7091: LD_INT 1
7093: DOUBLE
7094: EQUAL
7095: IFTRUE 7117
7097: LD_INT 5
7099: DOUBLE
7100: EQUAL
7101: IFTRUE 7117
7103: LD_INT 6
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7117
7109: LD_INT 7
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7190
7117: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 22
7125: PUSH
7126: LD_VAR 0 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 2
7137: PUSH
7138: LD_INT 21
7140: PUSH
7141: LD_INT 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 33
7150: PUSH
7151: LD_INT 3
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 33
7160: PUSH
7161: LD_INT 5
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PPUSH
7178: CALL_OW 69
7182: PPUSH
7183: CALL 12914 0 1
7187: ST_TO_ADDR
// end ; GameTypeSurvival :
7188: GO 7429
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7328
7198: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7199: LD_ADDR_VAR 0 3
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_VAR 0 2
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 30
7221: PUSH
7222: LD_INT 0
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 30
7231: PUSH
7232: LD_INT 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PPUSH
7248: CALL_OW 69
7252: PPUSH
7253: CALL 12914 0 1
7257: IFFALSE 7325
7259: PUSH
7260: LD_INT 22
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 2
7274: PUSH
7275: LD_INT 21
7277: PUSH
7278: LD_INT 1
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 33
7287: PUSH
7288: LD_INT 3
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 33
7297: PUSH
7298: LD_INT 5
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PPUSH
7315: CALL_OW 69
7319: PPUSH
7320: CALL 12914 0 1
7324: AND
7325: ST_TO_ADDR
// end ; GameTypeKing :
7326: GO 7429
7328: LD_INT 3
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7428
7336: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7337: LD_ADDR_VAR 0 3
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 2
7356: PUSH
7357: LD_INT 21
7359: PUSH
7360: LD_INT 1
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 33
7369: PUSH
7370: LD_INT 3
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 33
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PPUSH
7397: CALL_OW 69
7401: PPUSH
7402: CALL 12914 0 1
7406: IFFALSE 7425
7408: PUSH
7409: LD_VAR 0 2
7413: PPUSH
7414: CALL 61792 0 1
7418: PUSH
7419: LD_EXP 35
7423: LESS
7424: AND
7425: ST_TO_ADDR
// end ; end ;
7426: GO 7429
7428: POP
// end ;
7429: LD_VAR 0 3
7433: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7434: LD_INT 100
7436: IFFALSE 7666
7438: GO 7440
7440: DISABLE
7441: LD_INT 0
7443: PPUSH
7444: PPUSH
// begin if Multiplayer then
7445: LD_OWVAR 4
7449: IFFALSE 7457
// SetPlayerSpectator ( ) else
7451: CALL_OW 572
7455: GO 7466
// FogOff ( your_side ) ;
7457: LD_OWVAR 2
7461: PPUSH
7462: CALL_OW 344
// repeat gameIsOn := false ;
7466: LD_ADDR_VAR 0 1
7470: PUSH
7471: LD_INT 0
7473: ST_TO_ADDR
// for i := 1 to 8 do
7474: LD_ADDR_VAR 0 2
7478: PUSH
7479: DOUBLE
7480: LD_INT 1
7482: DEC
7483: ST_TO_ADDR
7484: LD_INT 8
7486: PUSH
7487: FOR_TO
7488: IFFALSE 7618
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7490: LD_EXP 7
7494: PUSH
7495: LD_VAR 0 2
7499: ARRAY
7500: IFFALSE 7513
7502: PUSH
7503: LD_VAR 0 2
7507: PPUSH
7508: CALL_OW 108
7512: AND
7513: IFFALSE 7527
7515: PUSH
7516: LD_VAR 0 2
7520: PUSH
7521: LD_OWVAR 2
7525: NONEQUAL
7526: AND
7527: IFFALSE 7616
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7529: LD_EXP 8
7533: PUSH
7534: LD_VAR 0 2
7538: ARRAY
7539: NOT
7540: IFTRUE 7588
7542: PUSH
7543: LD_EXP 8
7547: PUSH
7548: LD_VAR 0 2
7552: ARRAY
7553: PUSH
7554: LD_EXP 8
7558: PUSH
7559: LD_OWVAR 2
7563: ARRAY
7564: NONEQUAL
7565: IFFALSE 7587
7567: PUSH
7568: LD_OWVAR 2
7572: PPUSH
7573: LD_VAR 0 2
7577: PPUSH
7578: CALL_OW 81
7582: PUSH
7583: LD_INT 1
7585: NONEQUAL
7586: AND
7587: OR
7588: IFFALSE 7616
// if HasPowerByGameType ( mpGameType , i ) then
7590: LD_EXP 3
7594: PPUSH
7595: LD_VAR 0 2
7599: PPUSH
7600: CALL 7075 0 2
7604: IFFALSE 7616
// begin gameIsOn := true ;
7606: LD_ADDR_VAR 0 1
7610: PUSH
7611: LD_INT 1
7613: ST_TO_ADDR
// break ;
7614: GO 7618
// end ;
7616: GO 7487
7618: POP
7619: POP
// wait ( 100 ) ;
7620: LD_INT 100
7622: PPUSH
7623: CALL_OW 67
// until not gameIsOn ;
7627: LD_VAR 0 1
7631: NOT
7632: IFFALSE 7466
// if IAmServer then
7634: CALL_OW 518
7638: IFFALSE 7647
// wait ( 0 0$3 ) ;
7640: LD_INT 105
7642: PPUSH
7643: CALL_OW 67
// if Multiplayer then
7647: LD_OWVAR 4
7651: IFFALSE 7659
// YouLostInMultiplayer else
7653: CALL_OW 107
7657: GO 7666
// YouLost (  ) ;
7659: LD_STRING 
7661: PPUSH
7662: CALL_OW 104
// end ;
7666: PPOPN 2
7668: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7669: LD_EXP 33
7673: IFFALSE 8057
7675: GO 7677
7677: DISABLE
7678: LD_INT 0
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7685: LD_ADDR_VAR 0 5
7689: PUSH
7690: LD_INT 1
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 3
7698: PUSH
7699: LD_INT 4
7701: PUSH
7702: LD_INT 5
7704: PUSH
7705: LD_INT 6
7707: PUSH
7708: LD_INT 7
7710: PUSH
7711: LD_INT 8
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7724: LD_INT 350
7726: PPUSH
7727: CALL_OW 67
// for i := 1 to 8 do
7731: LD_ADDR_VAR 0 1
7735: PUSH
7736: DOUBLE
7737: LD_INT 1
7739: DEC
7740: ST_TO_ADDR
7741: LD_INT 8
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8027
// begin j := sides [ i ] ;
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_VAR 0 5
7756: PUSH
7757: LD_VAR 0 1
7761: ARRAY
7762: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7763: LD_EXP 40
7767: PUSH
7768: LD_VAR 0 2
7772: ARRAY
7773: PPUSH
7774: CALL 12914 0 1
7778: IFFALSE 7791
7780: PUSH
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL_OW 108
7790: AND
7791: IFFALSE 7809
7793: PUSH
7794: LD_EXP 3
7798: PPUSH
7799: LD_VAR 0 2
7803: PPUSH
7804: CALL 7075 0 2
7808: AND
7809: IFFALSE 8025
// begin wait ( mpRespawn div 2 ) ;
7811: LD_EXP 33
7815: PUSH
7816: LD_INT 2
7818: DIV
7819: PPUSH
7820: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7824: LD_ADDR_VAR 0 3
7828: PUSH
7829: LD_INT 22
7831: PUSH
7832: LD_VAR 0 2
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 50
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: LD_INT 2
7849: PUSH
7850: LD_INT 30
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 30
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: PPUSH
7880: CALL_OW 69
7884: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7885: LD_VAR 0 3
7889: NOT
7890: IFTRUE 7904
7892: PUSH
7893: LD_VAR 0 2
7897: PPUSH
7898: CALL_OW 108
7902: NOT
7903: OR
7904: IFTRUE 7923
7906: PUSH
7907: LD_EXP 3
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL 7075 0 2
7921: NOT
7922: OR
7923: IFFALSE 7927
// continue ;
7925: GO 7744
// spawn := tmp [ 1 ] ;
7927: LD_ADDR_VAR 0 4
7931: PUSH
7932: LD_VAR 0 3
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7941: LD_EXP 40
7945: PUSH
7946: LD_VAR 0 2
7950: ARRAY
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 4
7960: PPUSH
7961: CALL_OW 250
7965: PPUSH
7966: LD_VAR 0 4
7970: PPUSH
7971: CALL_OW 251
7975: PPUSH
7976: LD_INT 32
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7986: LD_ADDR_EXP 40
7990: PUSH
7991: LD_EXP 40
7995: PPUSH
7996: LD_VAR 0 2
8000: PPUSH
8001: LD_EXP 40
8005: PUSH
8006: LD_VAR 0 2
8010: ARRAY
8011: PPUSH
8012: LD_INT 1
8014: PPUSH
8015: CALL_OW 3
8019: PPUSH
8020: CALL_OW 1
8024: ST_TO_ADDR
// end ; end ;
8025: GO 7744
8027: POP
8028: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8029: LD_ADDR_VAR 0 5
8033: PUSH
8034: LD_VAR 0 5
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: LD_INT 8
8044: PPUSH
8045: LD_INT 1
8047: PPUSH
8048: CALL 15240 0 4
8052: ST_TO_ADDR
// until false ;
8053: LD_INT 0
8055: IFFALSE 7724
// end ;
8057: PPOPN 5
8059: END
// every 0 0$1 marked mpActive do
8060: GO 8062
8062: DISABLE
// begin enable ;
8063: ENABLE
// if not mpDisplayStrings then
8064: LD_EXP 38
8068: NOT
8069: IFFALSE 8080
// begin display_strings := [ ] ;
8071: LD_ADDR_OWVAR 47
8075: PUSH
8076: EMPTY
8077: ST_TO_ADDR
// exit ;
8078: GO 8090
// end ; display_strings := mpDisplayStrings ;
8080: LD_ADDR_OWVAR 47
8084: PUSH
8085: LD_EXP 38
8089: ST_TO_ADDR
// end ; end_of_file
8090: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
8095: PPUSH
8096: PPUSH
8097: PPUSH
8098: PPUSH
8099: PPUSH
8100: PPUSH
8101: PPUSH
// if GetType ( un ) = unit_vehicle then
8102: LD_VAR 0 1
8106: PPUSH
8107: CALL_OW 247
8111: PUSH
8112: LD_INT 2
8114: EQUAL
8115: IFFALSE 8119
// exit ;
8117: GO 8793
// side := GetSide ( un ) ;
8119: LD_ADDR_VAR 0 9
8123: PUSH
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 255
8133: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8134: LD_EXP 3
8138: PUSH
8139: LD_INT 2
8141: EQUAL
8142: IFFALSE 8236
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL_OW 266
8153: PUSH
8154: LD_INT 0
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: IN
8164: IFFALSE 8236
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8166: LD_ADDR_VAR 0 3
8170: PUSH
8171: LD_INT 22
8173: PUSH
8174: LD_VAR 0 9
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 21
8188: PUSH
8189: LD_INT 1
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 33
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PPUSH
8215: CALL_OW 69
8219: PUSH
8220: FOR_IN
8221: IFFALSE 8234
// KillUnit ( i ) ;
8223: LD_VAR 0 3
8227: PPUSH
8228: CALL_OW 66
8232: GO 8220
8234: POP
8235: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8236: LD_VAR 0 1
8240: PPUSH
8241: CALL_OW 257
8245: PUSH
8246: LD_INT 12
8248: PUSH
8249: LD_INT 17
8251: PUSH
8252: LD_INT 15
8254: PUSH
8255: LD_INT 16
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: IN
8264: IFTRUE 8281
8266: PUSH
8267: LD_VAR 0 1
8271: PPUSH
8272: CALL_OW 263
8276: PUSH
8277: LD_INT 5
8279: EQUAL
8280: OR
8281: IFFALSE 8518
// begin tag := 0 ;
8283: LD_ADDR_VAR 0 5
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// for i := 1 to 8 do
8291: LD_ADDR_VAR 0 3
8295: PUSH
8296: DOUBLE
8297: LD_INT 1
8299: DEC
8300: ST_TO_ADDR
8301: LD_INT 8
8303: PUSH
8304: FOR_TO
8305: IFFALSE 8339
// if un in mpApePosIndex [ i ] then
8307: LD_VAR 0 1
8311: PUSH
8312: LD_EXP 32
8316: PUSH
8317: LD_VAR 0 3
8321: ARRAY
8322: IN
8323: IFFALSE 8337
// begin tag := i ;
8325: LD_ADDR_VAR 0 5
8329: PUSH
8330: LD_VAR 0 3
8334: ST_TO_ADDR
// break ;
8335: GO 8339
// end ;
8337: GO 8304
8339: POP
8340: POP
// if not tag then
8341: LD_VAR 0 5
8345: NOT
8346: IFFALSE 8350
// exit ;
8348: GO 8793
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8350: LD_ADDR_VAR 0 7
8354: PUSH
8355: LD_EXP 31
8359: PUSH
8360: LD_EXP 7
8364: PUSH
8365: LD_VAR 0 5
8369: ARRAY
8370: ARRAY
8371: ST_TO_ADDR
// if not area then
8372: LD_VAR 0 7
8376: NOT
8377: IFFALSE 8381
// exit ;
8379: GO 8793
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8381: LD_INT 14700
8383: PUSH
8384: LD_VAR 0 1
8388: PUSH
8389: LD_INT 5
8391: MOD
8392: PUSH
8393: LD_INT 1
8395: PLUS
8396: PUSH
8397: LD_INT 700
8399: MUL
8400: PLUS
8401: PPUSH
8402: CALL_OW 67
// repeat wait ( 10 ) ;
8406: LD_INT 10
8408: PPUSH
8409: CALL_OW 67
// until not mpBlockRespThread ;
8413: LD_EXP 46
8417: NOT
8418: IFFALSE 8406
// mpBlockRespThread := true ;
8420: LD_ADDR_EXP 46
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8428: LD_INT 0
8430: PPUSH
8431: CALL 45007 0 1
// ape := CreateHuman ;
8435: LD_ADDR_VAR 0 4
8439: PUSH
8440: CALL_OW 44
8444: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8445: LD_ADDR_EXP 32
8449: PUSH
8450: LD_EXP 32
8454: PPUSH
8455: LD_VAR 0 5
8459: PPUSH
8460: LD_EXP 32
8464: PUSH
8465: LD_VAR 0 5
8469: ARRAY
8470: PPUSH
8471: LD_VAR 0 4
8475: PPUSH
8476: CALL 48880 0 2
8480: PPUSH
8481: CALL_OW 1
8485: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8486: LD_VAR 0 4
8490: PPUSH
8491: LD_VAR 0 7
8495: PPUSH
8496: LD_INT 0
8498: PPUSH
8499: CALL_OW 49
// wait ( 10 ) ;
8503: LD_INT 10
8505: PPUSH
8506: CALL_OW 67
// mpBlockRespThread := false ;
8510: LD_ADDR_EXP 46
8514: PUSH
8515: LD_INT 0
8517: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 247
8527: PUSH
8528: LD_INT 1
8530: EQUAL
8531: IFFALSE 8548
8533: PUSH
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 248
8543: PUSH
8544: LD_INT 0
8546: GREATER
8547: AND
8548: IFFALSE 8793
// begin if not mpRespawn then
8550: LD_EXP 33
8554: NOT
8555: IFFALSE 8559
// exit ;
8557: GO 8793
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8559: LD_VAR 0 9
8563: PPUSH
8564: CALL_OW 108
8568: NOT
8569: IFFALSE 8588
8571: PUSH
8572: LD_EXP 3
8576: PPUSH
8577: LD_VAR 0 9
8581: PPUSH
8582: CALL 7075 0 2
8586: NOT
8587: AND
8588: IFFALSE 8592
// exit ;
8590: GO 8793
// side := GetSide ( un ) ;
8592: LD_ADDR_VAR 0 9
8596: PUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 255
8606: ST_TO_ADDR
// nation := GetNation ( un ) ;
8607: LD_ADDR_VAR 0 8
8611: PUSH
8612: LD_VAR 0 1
8616: PPUSH
8617: CALL_OW 248
8621: ST_TO_ADDR
// class := GetClass ( un ) ;
8622: LD_ADDR_VAR 0 6
8626: PUSH
8627: LD_VAR 0 1
8631: PPUSH
8632: CALL_OW 257
8636: ST_TO_ADDR
// if class > 4 then
8637: LD_VAR 0 6
8641: PUSH
8642: LD_INT 4
8644: GREATER
8645: IFFALSE 8655
// class := 1 ;
8647: LD_ADDR_VAR 0 6
8651: PUSH
8652: LD_INT 1
8654: ST_TO_ADDR
// repeat wait ( 10 ) ;
8655: LD_INT 10
8657: PPUSH
8658: CALL_OW 67
// until not mpBlockRespThread ;
8662: LD_EXP 46
8666: NOT
8667: IFFALSE 8655
// mpBlockRespThread := true ;
8669: LD_ADDR_EXP 46
8673: PUSH
8674: LD_INT 1
8676: ST_TO_ADDR
// uc_side := side ;
8677: LD_ADDR_OWVAR 20
8681: PUSH
8682: LD_VAR 0 9
8686: ST_TO_ADDR
// uc_nation := nation ;
8687: LD_ADDR_OWVAR 21
8691: PUSH
8692: LD_VAR 0 8
8696: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8697: LD_INT 0
8699: PPUSH
8700: LD_VAR 0 6
8704: PPUSH
8705: LD_INT 2
8707: PPUSH
8708: CALL_OW 380
// un := CreateHuman ;
8712: LD_ADDR_VAR 0 1
8716: PUSH
8717: CALL_OW 44
8721: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8722: LD_ADDR_EXP 40
8726: PUSH
8727: LD_EXP 40
8731: PPUSH
8732: LD_VAR 0 9
8736: PPUSH
8737: LD_EXP 40
8741: PUSH
8742: LD_VAR 0 9
8746: ARRAY
8747: PPUSH
8748: LD_EXP 40
8752: PUSH
8753: LD_VAR 0 9
8757: ARRAY
8758: PUSH
8759: LD_INT 1
8761: PLUS
8762: PPUSH
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 1
8772: PPUSH
8773: CALL_OW 1
8777: ST_TO_ADDR
// wait ( 10 ) ;
8778: LD_INT 10
8780: PPUSH
8781: CALL_OW 67
// mpBlockRespThread := false ;
8785: LD_ADDR_EXP 46
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// end ; end ;
8793: LD_VAR 0 2
8797: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8798: LD_INT 0
8800: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8801: LD_VAR 0 1
8805: PPUSH
8806: CALL_OW 266
8810: PUSH
8811: LD_INT 0
8813: PUSH
8814: LD_INT 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: IN
8821: IFFALSE 8846
// SetBName ( building , @ & GetSide ( building ) ) ;
8823: LD_VAR 0 1
8827: PPUSH
8828: LD_STRING @
8830: PUSH
8831: LD_VAR 0 1
8835: PPUSH
8836: CALL_OW 255
8840: STR
8841: PPUSH
8842: CALL_OW 500
// end ;
8846: LD_VAR 0 2
8850: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8851: LD_INT 0
8853: PPUSH
8854: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8855: LD_EXP 3
8859: PUSH
8860: LD_INT 2
8862: EQUAL
8863: IFFALSE 8887
8865: PUSH
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 266
8875: PUSH
8876: LD_INT 0
8878: PUSH
8879: LD_INT 1
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: IN
8886: AND
8887: IFFALSE 8966
// begin SetSide ( building , oldSide ) ;
8889: LD_VAR 0 1
8893: PPUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 235
// KillUnit ( building ) ;
8903: LD_VAR 0 1
8907: PPUSH
8908: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8912: LD_ADDR_VAR 0 5
8916: PUSH
8917: LD_INT 22
8919: PUSH
8920: LD_VAR 0 2
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 21
8931: PUSH
8932: LD_INT 1
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8962
// KillUnit ( i ) ;
8951: LD_VAR 0 5
8955: PPUSH
8956: CALL_OW 66
8960: GO 8948
8962: POP
8963: POP
// exit ;
8964: GO 9011
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 266
8975: PUSH
8976: LD_INT 0
8978: PUSH
8979: LD_INT 1
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: IN
8986: IFFALSE 9011
// SetBName ( building , @ & GetSide ( building ) ) ;
8988: LD_VAR 0 1
8992: PPUSH
8993: LD_STRING @
8995: PUSH
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: STR
9006: PPUSH
9007: CALL_OW 500
// end ;
9011: LD_VAR 0 4
9015: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
9020: PPUSH
// if mpGameType <> GameTypeFamine then
9021: LD_EXP 3
9025: PUSH
9026: LD_INT 5
9028: NONEQUAL
9029: IFFALSE 9033
// exit ;
9031: GO 9248
// for i := 1 to mpGlobalOilDeposits do
9033: LD_ADDR_VAR 0 6
9037: PUSH
9038: DOUBLE
9039: LD_INT 1
9041: DEC
9042: ST_TO_ADDR
9043: LD_EXP 41
9047: PUSH
9048: FOR_TO
9049: IFFALSE 9246
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9051: LD_EXP 41
9055: PUSH
9056: LD_VAR 0 6
9060: ARRAY
9061: PUSH
9062: LD_INT 1
9064: ARRAY
9065: PPUSH
9066: LD_EXP 41
9070: PUSH
9071: LD_VAR 0 6
9075: ARRAY
9076: PUSH
9077: LD_INT 2
9079: ARRAY
9080: PPUSH
9081: CALL_OW 428
9085: PUSH
9086: LD_VAR 0 1
9090: EQUAL
9091: IFFALSE 9244
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9093: LD_ADDR_VAR 0 7
9097: PUSH
9098: LD_EXP 41
9102: PUSH
9103: LD_VAR 0 6
9107: ARRAY
9108: PUSH
9109: LD_INT 3
9111: ARRAY
9112: ST_TO_ADDR
// value := value - amount ;
9113: LD_ADDR_VAR 0 7
9117: PUSH
9118: LD_VAR 0 7
9122: PUSH
9123: LD_VAR 0 4
9127: MINUS
9128: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9129: LD_ADDR_EXP 41
9133: PUSH
9134: LD_EXP 41
9138: PPUSH
9139: LD_VAR 0 6
9143: PPUSH
9144: LD_EXP 41
9148: PUSH
9149: LD_VAR 0 6
9153: ARRAY
9154: PPUSH
9155: LD_INT 3
9157: PPUSH
9158: LD_VAR 0 7
9162: PPUSH
9163: CALL_OW 1
9167: PPUSH
9168: CALL_OW 1
9172: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9173: LD_VAR 0 1
9177: PPUSH
9178: LD_VAR 0 7
9182: PPUSH
9183: CALL_OW 505
// if value <= 0 then
9187: LD_VAR 0 7
9191: PUSH
9192: LD_INT 0
9194: LESSEQUAL
9195: IFFALSE 9244
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9197: LD_EXP 41
9201: PUSH
9202: LD_VAR 0 6
9206: ARRAY
9207: PUSH
9208: LD_INT 1
9210: ARRAY
9211: PPUSH
9212: LD_EXP 41
9216: PUSH
9217: LD_VAR 0 6
9221: ARRAY
9222: PUSH
9223: LD_INT 2
9225: ARRAY
9226: PPUSH
9227: CALL_OW 63
// KillUnit ( building ) ;
9231: LD_VAR 0 1
9235: PPUSH
9236: CALL_OW 66
// exit ;
9240: POP
9241: POP
9242: GO 9248
// end ; end ; end ;
9244: GO 9048
9246: POP
9247: POP
// end ;
9248: LD_VAR 0 5
9252: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
// if mpGameType <> GameTypeFamine then
9258: LD_EXP 3
9262: PUSH
9263: LD_INT 5
9265: NONEQUAL
9266: IFFALSE 9270
// exit ;
9268: GO 9485
// for i := 1 to mpGlobalSibDeposits do
9270: LD_ADDR_VAR 0 6
9274: PUSH
9275: DOUBLE
9276: LD_INT 1
9278: DEC
9279: ST_TO_ADDR
9280: LD_EXP 42
9284: PUSH
9285: FOR_TO
9286: IFFALSE 9483
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9288: LD_EXP 42
9292: PUSH
9293: LD_VAR 0 6
9297: ARRAY
9298: PUSH
9299: LD_INT 1
9301: ARRAY
9302: PPUSH
9303: LD_EXP 42
9307: PUSH
9308: LD_VAR 0 6
9312: ARRAY
9313: PUSH
9314: LD_INT 2
9316: ARRAY
9317: PPUSH
9318: CALL_OW 428
9322: PUSH
9323: LD_VAR 0 1
9327: EQUAL
9328: IFFALSE 9481
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9330: LD_ADDR_VAR 0 7
9334: PUSH
9335: LD_EXP 42
9339: PUSH
9340: LD_VAR 0 6
9344: ARRAY
9345: PUSH
9346: LD_INT 3
9348: ARRAY
9349: ST_TO_ADDR
// value := value - amount ;
9350: LD_ADDR_VAR 0 7
9354: PUSH
9355: LD_VAR 0 7
9359: PUSH
9360: LD_VAR 0 4
9364: MINUS
9365: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9366: LD_ADDR_EXP 42
9370: PUSH
9371: LD_EXP 42
9375: PPUSH
9376: LD_VAR 0 6
9380: PPUSH
9381: LD_EXP 42
9385: PUSH
9386: LD_VAR 0 6
9390: ARRAY
9391: PPUSH
9392: LD_INT 3
9394: PPUSH
9395: LD_VAR 0 7
9399: PPUSH
9400: CALL_OW 1
9404: PPUSH
9405: CALL_OW 1
9409: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9410: LD_VAR 0 1
9414: PPUSH
9415: LD_VAR 0 7
9419: PPUSH
9420: CALL_OW 505
// if value <= 0 then
9424: LD_VAR 0 7
9428: PUSH
9429: LD_INT 0
9431: LESSEQUAL
9432: IFFALSE 9481
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9434: LD_EXP 42
9438: PUSH
9439: LD_VAR 0 6
9443: ARRAY
9444: PUSH
9445: LD_INT 1
9447: ARRAY
9448: PPUSH
9449: LD_EXP 42
9453: PUSH
9454: LD_VAR 0 6
9458: ARRAY
9459: PUSH
9460: LD_INT 2
9462: ARRAY
9463: PPUSH
9464: CALL_OW 63
// KillUnit ( building ) ;
9468: LD_VAR 0 1
9472: PPUSH
9473: CALL_OW 66
// exit ;
9477: POP
9478: POP
9479: GO 9485
// end ; end ; end ;
9481: GO 9285
9483: POP
9484: POP
// end ;
9485: LD_VAR 0 5
9489: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9490: LD_INT 0
9492: PPUSH
9493: PPUSH
// side := GetSide ( factory ) ;
9494: LD_ADDR_VAR 0 7
9498: PUSH
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 255
9508: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9509: LD_VAR 0 5
9513: PUSH
9514: LD_INT 81
9516: EQUAL
9517: IFFALSE 9555
9519: PUSH
9520: LD_INT 22
9522: PUSH
9523: LD_VAR 0 7
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 34
9534: PUSH
9535: LD_INT 81
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 69
9550: PUSH
9551: LD_INT 0
9553: GREATER
9554: AND
9555: IFFALSE 9588
// begin ComCancel ( factory ) ;
9557: LD_VAR 0 1
9561: PPUSH
9562: CALL_OW 127
// if side = your_side then
9566: LD_VAR 0 7
9570: PUSH
9571: LD_OWVAR 2
9575: EQUAL
9576: IFFALSE 9588
// HintSpec ( VehLimit , 2 ) ;
9578: LD_STRING VehLimit
9580: PPUSH
9581: LD_INT 2
9583: PPUSH
9584: CALL_OW 338
// end ; end ;
9588: LD_VAR 0 6
9592: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9593: LD_INT 0
9595: PPUSH
9596: PPUSH
9597: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9598: LD_VAR 0 1
9602: PPUSH
9603: CALL_OW 264
9607: PUSH
9608: LD_INT 81
9610: EQUAL
9611: IFFALSE 9628
9613: PUSH
9614: LD_VAR 0 1
9618: PPUSH
9619: CALL_OW 263
9623: PUSH
9624: LD_INT 1
9626: EQUAL
9627: AND
9628: IFFALSE 9908
// begin for i := 1 to Count ( minersList ) do
9630: LD_ADDR_VAR 0 6
9634: PUSH
9635: DOUBLE
9636: LD_INT 1
9638: DEC
9639: ST_TO_ADDR
9640: LD_EXP 56
9644: PPUSH
9645: CALL 12914 0 1
9649: PUSH
9650: FOR_TO
9651: IFFALSE 9769
// begin if minersList [ i ] = oldId then
9653: LD_EXP 56
9657: PUSH
9658: LD_VAR 0 6
9662: ARRAY
9663: PUSH
9664: LD_VAR 0 2
9668: EQUAL
9669: IFFALSE 9767
// begin for j := 1 to minerMinesList [ i ] do
9671: LD_ADDR_VAR 0 7
9675: PUSH
9676: DOUBLE
9677: LD_INT 1
9679: DEC
9680: ST_TO_ADDR
9681: LD_EXP 57
9685: PUSH
9686: LD_VAR 0 6
9690: ARRAY
9691: PUSH
9692: FOR_TO
9693: IFFALSE 9743
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9695: LD_EXP 57
9699: PUSH
9700: LD_VAR 0 6
9704: ARRAY
9705: PUSH
9706: LD_VAR 0 7
9710: ARRAY
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: PPUSH
9716: LD_EXP 57
9720: PUSH
9721: LD_VAR 0 6
9725: ARRAY
9726: PUSH
9727: LD_VAR 0 7
9731: ARRAY
9732: PUSH
9733: LD_INT 2
9735: ARRAY
9736: PPUSH
9737: CALL_OW 612
9741: GO 9692
9743: POP
9744: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9745: LD_ADDR_EXP 57
9749: PUSH
9750: LD_EXP 57
9754: PPUSH
9755: LD_VAR 0 6
9759: PPUSH
9760: CALL_OW 3
9764: ST_TO_ADDR
// break ;
9765: GO 9769
// end ; end ;
9767: GO 9650
9769: POP
9770: POP
// minersList := minersList diff oldId ;
9771: LD_ADDR_EXP 56
9775: PUSH
9776: LD_EXP 56
9780: PUSH
9781: LD_VAR 0 2
9785: DIFF
9786: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9787: LD_INT 22
9789: PUSH
9790: LD_VAR 0 4
9794: PPUSH
9795: CALL_OW 255
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 34
9806: PUSH
9807: LD_INT 81
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PPUSH
9818: CALL_OW 69
9822: PUSH
9823: LD_INT 1
9825: GREATER
9826: IFFALSE 9853
// begin ComExit ( unit ) ;
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL 49278 0 1
// SetSide ( newId , oldSide ) ;
9837: LD_VAR 0 1
9841: PPUSH
9842: LD_VAR 0 3
9846: PPUSH
9847: CALL_OW 235
// exit ;
9851: GO 9908
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9853: LD_ADDR_EXP 56
9857: PUSH
9858: LD_EXP 56
9862: PPUSH
9863: LD_EXP 56
9867: PUSH
9868: LD_INT 1
9870: PLUS
9871: PPUSH
9872: LD_VAR 0 1
9876: PPUSH
9877: CALL_OW 1
9881: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9882: LD_ADDR_EXP 57
9886: PUSH
9887: LD_EXP 57
9891: PPUSH
9892: LD_EXP 57
9896: PUSH
9897: LD_INT 1
9899: PLUS
9900: PPUSH
9901: EMPTY
9902: PPUSH
9903: CALL_OW 1
9907: ST_TO_ADDR
// end ; end ; end_of_file
9908: LD_VAR 0 5
9912: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9913: LD_EXP 39
9917: IFFALSE 9925
9919: PUSH
9920: CALL 10135 0 0
9924: AND
9925: IFFALSE 9933
9927: PUSH
9928: LD_OWVAR 4
9932: AND
9933: IFFALSE 10132
9935: GO 9937
9937: DISABLE
9938: LD_INT 0
9940: PPUSH
9941: PPUSH
// begin canWin := false ;
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 0
9949: ST_TO_ADDR
// if not HasPower ( your_side ) then
9950: LD_OWVAR 2
9954: PPUSH
9955: CALL 10177 0 1
9959: NOT
9960: IFFALSE 9971
// begin Multiplayer_Loose_Message ;
9962: CALL_OW 521
// enable ( mpLose ) ;
9966: LD_INT 102
9968: ENABLE_MARKED
// end else
9969: GO 10132
// begin canWin := true ;
9971: LD_ADDR_VAR 0 2
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
// for i := 1 to 8 do
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: DOUBLE
9985: LD_INT 1
9987: DEC
9988: ST_TO_ADDR
9989: LD_INT 8
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10118
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9995: LD_EXP 7
9999: PUSH
10000: LD_VAR 0 1
10004: ARRAY
10005: IFFALSE 10018
10007: PUSH
10008: LD_VAR 0 1
10012: PPUSH
10013: CALL_OW 108
10017: AND
10018: IFFALSE 10032
10020: PUSH
10021: LD_VAR 0 1
10025: PUSH
10026: LD_OWVAR 2
10030: NONEQUAL
10031: AND
10032: IFFALSE 10116
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10034: LD_EXP 8
10038: PUSH
10039: LD_VAR 0 1
10043: ARRAY
10044: NOT
10045: IFTRUE 10093
10047: PUSH
10048: LD_EXP 8
10052: PUSH
10053: LD_VAR 0 1
10057: ARRAY
10058: PUSH
10059: LD_EXP 8
10063: PUSH
10064: LD_OWVAR 2
10068: ARRAY
10069: NONEQUAL
10070: IFFALSE 10092
10072: PUSH
10073: LD_OWVAR 2
10077: PPUSH
10078: LD_VAR 0 1
10082: PPUSH
10083: CALL_OW 81
10087: PUSH
10088: LD_INT 1
10090: NONEQUAL
10091: AND
10092: OR
10093: IFFALSE 10116
// if HasPower ( i ) then
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL 10177 0 1
10104: IFFALSE 10116
// begin canWin := false ;
10106: LD_ADDR_VAR 0 2
10110: PUSH
10111: LD_INT 0
10113: ST_TO_ADDR
// break ;
10114: GO 10118
// end ;
10116: GO 9992
10118: POP
10119: POP
// if canWin then
10120: LD_VAR 0 2
10124: IFFALSE 10131
// enable ( mpWin ) else
10126: LD_INT 101
10128: ENABLE_MARKED
10129: GO 10132
// enable ;
10131: ENABLE
// end ; end ;
10132: PPOPN 2
10134: END
// function CanWinLoose ; begin
10135: LD_INT 0
10137: PPUSH
// result := true ;
10138: LD_ADDR_VAR 0 1
10142: PUSH
10143: LD_INT 1
10145: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10146: CALL_OW 531
10150: IFFALSE 10162
10152: PUSH
10153: CALL_OW 519
10157: PUSH
10158: LD_INT 1
10160: GREATER
10161: AND
10162: IFFALSE 10172
// result := false ;
10164: LD_ADDR_VAR 0 1
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// end ;
10172: LD_VAR 0 1
10176: RET
// function HasPower ( i ) ; begin
10177: LD_INT 0
10179: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: LD_INT 22
10187: PUSH
10188: LD_VAR 0 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 2
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 33
10212: PUSH
10213: LD_INT 3
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 33
10222: PUSH
10223: LD_INT 5
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PPUSH
10240: CALL_OW 69
10244: ST_TO_ADDR
// end ; end_of_file
10245: LD_VAR 0 2
10249: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10250: LD_EXP 39
10254: IFFALSE 10297
10256: GO 10258
10258: DISABLE
10259: LD_INT 0
10261: PPUSH
// begin for i := 1 to 8 do
10262: LD_ADDR_VAR 0 1
10266: PUSH
10267: DOUBLE
10268: LD_INT 1
10270: DEC
10271: ST_TO_ADDR
10272: LD_INT 8
10274: PUSH
10275: FOR_TO
10276: IFFALSE 10295
// SetRestrict ( b_depot , i , state_disabled ) ;
10278: LD_INT 0
10280: PPUSH
10281: LD_VAR 0 1
10285: PPUSH
10286: LD_INT 0
10288: PPUSH
10289: CALL_OW 324
10293: GO 10275
10295: POP
10296: POP
// end ;
10297: PPOPN 1
10299: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10300: LD_EXP 39
10304: IFFALSE 10312
10306: PUSH
10307: CALL 10522 0 0
10311: AND
10312: IFFALSE 10320
10314: PUSH
10315: LD_OWVAR 4
10319: AND
10320: IFFALSE 10519
10322: GO 10324
10324: DISABLE
10325: LD_INT 0
10327: PPUSH
10328: PPUSH
// begin canWin := false ;
10329: LD_ADDR_VAR 0 2
10333: PUSH
10334: LD_INT 0
10336: ST_TO_ADDR
// if not HasPower ( your_side ) then
10337: LD_OWVAR 2
10341: PPUSH
10342: CALL 10564 0 1
10346: NOT
10347: IFFALSE 10358
// begin Multiplayer_Loose_Message ;
10349: CALL_OW 521
// enable ( mpLose ) ;
10353: LD_INT 102
10355: ENABLE_MARKED
// end else
10356: GO 10519
// begin canWin := true ;
10358: LD_ADDR_VAR 0 2
10362: PUSH
10363: LD_INT 1
10365: ST_TO_ADDR
// for i := 1 to 8 do
10366: LD_ADDR_VAR 0 1
10370: PUSH
10371: DOUBLE
10372: LD_INT 1
10374: DEC
10375: ST_TO_ADDR
10376: LD_INT 8
10378: PUSH
10379: FOR_TO
10380: IFFALSE 10505
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10382: LD_EXP 7
10386: PUSH
10387: LD_VAR 0 1
10391: ARRAY
10392: IFFALSE 10405
10394: PUSH
10395: LD_VAR 0 1
10399: PPUSH
10400: CALL_OW 108
10404: AND
10405: IFFALSE 10419
10407: PUSH
10408: LD_VAR 0 1
10412: PUSH
10413: LD_OWVAR 2
10417: NONEQUAL
10418: AND
10419: IFFALSE 10503
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10421: LD_EXP 8
10425: PUSH
10426: LD_VAR 0 1
10430: ARRAY
10431: NOT
10432: IFTRUE 10480
10434: PUSH
10435: LD_EXP 8
10439: PUSH
10440: LD_VAR 0 1
10444: ARRAY
10445: PUSH
10446: LD_EXP 8
10450: PUSH
10451: LD_OWVAR 2
10455: ARRAY
10456: NONEQUAL
10457: IFFALSE 10479
10459: PUSH
10460: LD_OWVAR 2
10464: PPUSH
10465: LD_VAR 0 1
10469: PPUSH
10470: CALL_OW 81
10474: PUSH
10475: LD_INT 1
10477: NONEQUAL
10478: AND
10479: OR
10480: IFFALSE 10503
// if HasPower ( i ) then
10482: LD_VAR 0 1
10486: PPUSH
10487: CALL 10564 0 1
10491: IFFALSE 10503
// begin canWin := false ;
10493: LD_ADDR_VAR 0 2
10497: PUSH
10498: LD_INT 0
10500: ST_TO_ADDR
// break ;
10501: GO 10505
// end ;
10503: GO 10379
10505: POP
10506: POP
// if canWin then
10507: LD_VAR 0 2
10511: IFFALSE 10518
// enable ( mpWin ) else
10513: LD_INT 101
10515: ENABLE_MARKED
10516: GO 10519
// enable ;
10518: ENABLE
// end ; end ;
10519: PPOPN 2
10521: END
// function CanWinLoose ; begin
10522: LD_INT 0
10524: PPUSH
// result := true ;
10525: LD_ADDR_VAR 0 1
10529: PUSH
10530: LD_INT 1
10532: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10533: CALL_OW 531
10537: IFFALSE 10549
10539: PUSH
10540: CALL_OW 519
10544: PUSH
10545: LD_INT 1
10547: GREATER
10548: AND
10549: IFFALSE 10559
// result := false ;
10551: LD_ADDR_VAR 0 1
10555: PUSH
10556: LD_INT 0
10558: ST_TO_ADDR
// end ;
10559: LD_VAR 0 1
10563: RET
// function HasPower ( i ) ; begin
10564: LD_INT 0
10566: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10567: LD_INT 22
10569: PUSH
10570: LD_VAR 0 1
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 2
10581: PUSH
10582: LD_INT 30
10584: PUSH
10585: LD_INT 0
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 30
10594: PUSH
10595: LD_INT 1
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: NOT
10616: IFFALSE 10620
// exit ;
10618: GO 10685
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10620: LD_ADDR_VAR 0 2
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_VAR 0 1
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 21
10642: PUSH
10643: LD_INT 1
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 33
10652: PUSH
10653: LD_INT 3
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 33
10662: PUSH
10663: LD_INT 5
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: ST_TO_ADDR
// end ; end_of_file
10685: LD_VAR 0 2
10689: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10690: LD_INT 0
10692: PPUSH
10693: PPUSH
// if exist_mode then
10694: LD_VAR 0 2
10698: IFFALSE 10744
// begin unit := CreateCharacter ( prefix & ident ) ;
10700: LD_ADDR_VAR 0 5
10704: PUSH
10705: LD_VAR 0 3
10709: PUSH
10710: LD_VAR 0 1
10714: STR
10715: PPUSH
10716: CALL_OW 34
10720: ST_TO_ADDR
// if unit then
10721: LD_VAR 0 5
10725: IFFALSE 10742
// DeleteCharacters ( prefix & ident ) ;
10727: LD_VAR 0 3
10731: PUSH
10732: LD_VAR 0 1
10736: STR
10737: PPUSH
10738: CALL_OW 40
// end else
10742: GO 10759
// unit := NewCharacter ( ident ) ;
10744: LD_ADDR_VAR 0 5
10748: PUSH
10749: LD_VAR 0 1
10753: PPUSH
10754: CALL_OW 25
10758: ST_TO_ADDR
// result := unit ;
10759: LD_ADDR_VAR 0 4
10763: PUSH
10764: LD_VAR 0 5
10768: ST_TO_ADDR
// end ;
10769: LD_VAR 0 4
10773: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
// if exist_mode then
10778: LD_VAR 0 2
10782: IFFALSE 10807
// unit := CreateCharacter ( prefix & ident ) else
10784: LD_ADDR_VAR 0 5
10788: PUSH
10789: LD_VAR 0 3
10793: PUSH
10794: LD_VAR 0 1
10798: STR
10799: PPUSH
10800: CALL_OW 34
10804: ST_TO_ADDR
10805: GO 10822
// unit := NewCharacter ( ident ) ;
10807: LD_ADDR_VAR 0 5
10811: PUSH
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 25
10821: ST_TO_ADDR
// result := unit ;
10822: LD_ADDR_VAR 0 4
10826: PUSH
10827: LD_VAR 0 5
10831: ST_TO_ADDR
// end ;
10832: LD_VAR 0 4
10836: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
// if not side or not nation then
10841: LD_VAR 0 1
10845: NOT
10846: IFTRUE 10855
10848: PUSH
10849: LD_VAR 0 2
10853: NOT
10854: OR
10855: IFFALSE 10859
// exit ;
10857: GO 11653
// case nation of nation_american :
10859: LD_VAR 0 2
10863: PUSH
10864: LD_INT 1
10866: DOUBLE
10867: EQUAL
10868: IFTRUE 10872
10870: GO 11094
10872: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10873: LD_ADDR_VAR 0 4
10877: PUSH
10878: LD_INT 35
10880: PUSH
10881: LD_INT 45
10883: PUSH
10884: LD_INT 46
10886: PUSH
10887: LD_INT 47
10889: PUSH
10890: LD_INT 82
10892: PUSH
10893: LD_INT 83
10895: PUSH
10896: LD_INT 84
10898: PUSH
10899: LD_INT 85
10901: PUSH
10902: LD_INT 86
10904: PUSH
10905: LD_INT 1
10907: PUSH
10908: LD_INT 2
10910: PUSH
10911: LD_INT 6
10913: PUSH
10914: LD_INT 15
10916: PUSH
10917: LD_INT 16
10919: PUSH
10920: LD_INT 7
10922: PUSH
10923: LD_INT 12
10925: PUSH
10926: LD_INT 13
10928: PUSH
10929: LD_INT 10
10931: PUSH
10932: LD_INT 14
10934: PUSH
10935: LD_INT 20
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: LD_INT 25
10946: PUSH
10947: LD_INT 32
10949: PUSH
10950: LD_INT 27
10952: PUSH
10953: LD_INT 36
10955: PUSH
10956: LD_INT 69
10958: PUSH
10959: LD_INT 39
10961: PUSH
10962: LD_INT 34
10964: PUSH
10965: LD_INT 40
10967: PUSH
10968: LD_INT 48
10970: PUSH
10971: LD_INT 49
10973: PUSH
10974: LD_INT 50
10976: PUSH
10977: LD_INT 51
10979: PUSH
10980: LD_INT 52
10982: PUSH
10983: LD_INT 53
10985: PUSH
10986: LD_INT 54
10988: PUSH
10989: LD_INT 55
10991: PUSH
10992: LD_INT 56
10994: PUSH
10995: LD_INT 57
10997: PUSH
10998: LD_INT 58
11000: PUSH
11001: LD_INT 59
11003: PUSH
11004: LD_INT 60
11006: PUSH
11007: LD_INT 61
11009: PUSH
11010: LD_INT 62
11012: PUSH
11013: LD_INT 80
11015: PUSH
11016: LD_INT 82
11018: PUSH
11019: LD_INT 83
11021: PUSH
11022: LD_INT 84
11024: PUSH
11025: LD_INT 85
11027: PUSH
11028: LD_INT 86
11030: PUSH
11031: LD_INT 90
11033: PUSH
11034: LD_INT 93
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: ST_TO_ADDR
11092: GO 11575
11094: LD_INT 2
11096: DOUBLE
11097: EQUAL
11098: IFTRUE 11102
11100: GO 11336
11102: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11103: LD_ADDR_VAR 0 4
11107: PUSH
11108: LD_INT 35
11110: PUSH
11111: LD_INT 45
11113: PUSH
11114: LD_INT 46
11116: PUSH
11117: LD_INT 47
11119: PUSH
11120: LD_INT 82
11122: PUSH
11123: LD_INT 83
11125: PUSH
11126: LD_INT 84
11128: PUSH
11129: LD_INT 85
11131: PUSH
11132: LD_INT 87
11134: PUSH
11135: LD_INT 70
11137: PUSH
11138: LD_INT 1
11140: PUSH
11141: LD_INT 11
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: LD_INT 4
11149: PUSH
11150: LD_INT 5
11152: PUSH
11153: LD_INT 6
11155: PUSH
11156: LD_INT 15
11158: PUSH
11159: LD_INT 18
11161: PUSH
11162: LD_INT 7
11164: PUSH
11165: LD_INT 17
11167: PUSH
11168: LD_INT 8
11170: PUSH
11171: LD_INT 20
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 72
11182: PUSH
11183: LD_INT 26
11185: PUSH
11186: LD_INT 69
11188: PUSH
11189: LD_INT 39
11191: PUSH
11192: LD_INT 40
11194: PUSH
11195: LD_INT 41
11197: PUSH
11198: LD_INT 42
11200: PUSH
11201: LD_INT 43
11203: PUSH
11204: LD_INT 48
11206: PUSH
11207: LD_INT 49
11209: PUSH
11210: LD_INT 50
11212: PUSH
11213: LD_INT 51
11215: PUSH
11216: LD_INT 52
11218: PUSH
11219: LD_INT 53
11221: PUSH
11222: LD_INT 54
11224: PUSH
11225: LD_INT 55
11227: PUSH
11228: LD_INT 56
11230: PUSH
11231: LD_INT 60
11233: PUSH
11234: LD_INT 61
11236: PUSH
11237: LD_INT 62
11239: PUSH
11240: LD_INT 66
11242: PUSH
11243: LD_INT 67
11245: PUSH
11246: LD_INT 68
11248: PUSH
11249: LD_INT 81
11251: PUSH
11252: LD_INT 82
11254: PUSH
11255: LD_INT 83
11257: PUSH
11258: LD_INT 84
11260: PUSH
11261: LD_INT 85
11263: PUSH
11264: LD_INT 87
11266: PUSH
11267: LD_INT 88
11269: PUSH
11270: LD_INT 92
11272: PUSH
11273: LD_INT 94
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: ST_TO_ADDR
11334: GO 11575
11336: LD_INT 3
11338: DOUBLE
11339: EQUAL
11340: IFTRUE 11344
11342: GO 11574
11344: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11345: LD_ADDR_VAR 0 4
11349: PUSH
11350: LD_INT 46
11352: PUSH
11353: LD_INT 47
11355: PUSH
11356: LD_INT 1
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: LD_INT 82
11364: PUSH
11365: LD_INT 83
11367: PUSH
11368: LD_INT 84
11370: PUSH
11371: LD_INT 85
11373: PUSH
11374: LD_INT 86
11376: PUSH
11377: LD_INT 11
11379: PUSH
11380: LD_INT 9
11382: PUSH
11383: LD_INT 20
11385: PUSH
11386: LD_INT 19
11388: PUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 24
11394: PUSH
11395: LD_INT 22
11397: PUSH
11398: LD_INT 25
11400: PUSH
11401: LD_INT 28
11403: PUSH
11404: LD_INT 29
11406: PUSH
11407: LD_INT 30
11409: PUSH
11410: LD_INT 31
11412: PUSH
11413: LD_INT 37
11415: PUSH
11416: LD_INT 38
11418: PUSH
11419: LD_INT 32
11421: PUSH
11422: LD_INT 27
11424: PUSH
11425: LD_INT 33
11427: PUSH
11428: LD_INT 69
11430: PUSH
11431: LD_INT 39
11433: PUSH
11434: LD_INT 34
11436: PUSH
11437: LD_INT 40
11439: PUSH
11440: LD_INT 71
11442: PUSH
11443: LD_INT 23
11445: PUSH
11446: LD_INT 44
11448: PUSH
11449: LD_INT 48
11451: PUSH
11452: LD_INT 49
11454: PUSH
11455: LD_INT 50
11457: PUSH
11458: LD_INT 51
11460: PUSH
11461: LD_INT 52
11463: PUSH
11464: LD_INT 53
11466: PUSH
11467: LD_INT 54
11469: PUSH
11470: LD_INT 55
11472: PUSH
11473: LD_INT 56
11475: PUSH
11476: LD_INT 57
11478: PUSH
11479: LD_INT 58
11481: PUSH
11482: LD_INT 59
11484: PUSH
11485: LD_INT 63
11487: PUSH
11488: LD_INT 64
11490: PUSH
11491: LD_INT 65
11493: PUSH
11494: LD_INT 82
11496: PUSH
11497: LD_INT 83
11499: PUSH
11500: LD_INT 84
11502: PUSH
11503: LD_INT 85
11505: PUSH
11506: LD_INT 86
11508: PUSH
11509: LD_INT 89
11511: PUSH
11512: LD_INT 91
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: ST_TO_ADDR
11572: GO 11575
11574: POP
// if state > - 1 and state < 3 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 1
11582: NEG
11583: GREATER
11584: IFFALSE 11596
11586: PUSH
11587: LD_VAR 0 3
11591: PUSH
11592: LD_INT 3
11594: LESS
11595: AND
11596: IFFALSE 11653
// for i in result do
11598: LD_ADDR_VAR 0 5
11602: PUSH
11603: LD_VAR 0 4
11607: PUSH
11608: FOR_IN
11609: IFFALSE 11651
// if GetTech ( i , side ) <> state then
11611: LD_VAR 0 5
11615: PPUSH
11616: LD_VAR 0 1
11620: PPUSH
11621: CALL_OW 321
11625: PUSH
11626: LD_VAR 0 3
11630: NONEQUAL
11631: IFFALSE 11649
// result := result diff i ;
11633: LD_ADDR_VAR 0 4
11637: PUSH
11638: LD_VAR 0 4
11642: PUSH
11643: LD_VAR 0 5
11647: DIFF
11648: ST_TO_ADDR
11649: GO 11608
11651: POP
11652: POP
// end ;
11653: LD_VAR 0 4
11657: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11658: LD_INT 0
11660: PPUSH
11661: PPUSH
11662: PPUSH
// result := true ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11671: LD_ADDR_VAR 0 5
11675: PUSH
11676: LD_VAR 0 2
11680: PPUSH
11681: CALL_OW 480
11685: ST_TO_ADDR
// if not tmp then
11686: LD_VAR 0 5
11690: NOT
11691: IFFALSE 11695
// exit ;
11693: GO 11744
// for i in tmp do
11695: LD_ADDR_VAR 0 4
11699: PUSH
11700: LD_VAR 0 5
11704: PUSH
11705: FOR_IN
11706: IFFALSE 11742
// if GetTech ( i , side ) <> state_researched then
11708: LD_VAR 0 4
11712: PPUSH
11713: LD_VAR 0 1
11717: PPUSH
11718: CALL_OW 321
11722: PUSH
11723: LD_INT 2
11725: NONEQUAL
11726: IFFALSE 11740
// begin result := false ;
11728: LD_ADDR_VAR 0 3
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// exit ;
11736: POP
11737: POP
11738: GO 11744
// end ;
11740: GO 11705
11742: POP
11743: POP
// end ;
11744: LD_VAR 0 3
11748: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
11762: PPUSH
11763: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11764: LD_VAR 0 1
11768: NOT
11769: IFTRUE 11786
11771: PUSH
11772: LD_VAR 0 1
11776: PPUSH
11777: CALL_OW 257
11781: PUSH
11782: LD_INT 9
11784: NONEQUAL
11785: OR
11786: IFFALSE 11790
// exit ;
11788: GO 12369
// side := GetSide ( unit ) ;
11790: LD_ADDR_VAR 0 9
11794: PUSH
11795: LD_VAR 0 1
11799: PPUSH
11800: CALL_OW 255
11804: ST_TO_ADDR
// tech_space := tech_spacanom ;
11805: LD_ADDR_VAR 0 12
11809: PUSH
11810: LD_INT 29
11812: ST_TO_ADDR
// tech_time := tech_taurad ;
11813: LD_ADDR_VAR 0 13
11817: PUSH
11818: LD_INT 28
11820: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11821: LD_ADDR_VAR 0 11
11825: PUSH
11826: LD_VAR 0 1
11830: PPUSH
11831: CALL_OW 310
11835: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11836: LD_VAR 0 11
11840: PPUSH
11841: CALL_OW 247
11845: PUSH
11846: LD_INT 2
11848: EQUAL
11849: IFFALSE 11853
// exit ;
11851: GO 12369
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11853: LD_ADDR_VAR 0 8
11857: PUSH
11858: LD_INT 81
11860: PUSH
11861: LD_VAR 0 9
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 69
11895: ST_TO_ADDR
// if not tmp then
11896: LD_VAR 0 8
11900: NOT
11901: IFFALSE 11905
// exit ;
11903: GO 12369
// if in_unit then
11905: LD_VAR 0 11
11909: IFFALSE 11933
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11911: LD_ADDR_VAR 0 10
11915: PUSH
11916: LD_VAR 0 8
11920: PPUSH
11921: LD_VAR 0 11
11925: PPUSH
11926: CALL_OW 74
11930: ST_TO_ADDR
11931: GO 11953
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11933: LD_ADDR_VAR 0 10
11937: PUSH
11938: LD_VAR 0 8
11942: PPUSH
11943: LD_VAR 0 1
11947: PPUSH
11948: CALL_OW 74
11952: ST_TO_ADDR
// if not enemy then
11953: LD_VAR 0 10
11957: NOT
11958: IFFALSE 11962
// exit ;
11960: GO 12369
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11962: LD_VAR 0 11
11966: IFFALSE 11988
11968: PUSH
11969: LD_VAR 0 11
11973: PPUSH
11974: LD_VAR 0 10
11978: PPUSH
11979: CALL_OW 296
11983: PUSH
11984: LD_INT 13
11986: GREATER
11987: AND
11988: IFTRUE 12010
11990: PUSH
11991: LD_VAR 0 1
11995: PPUSH
11996: LD_VAR 0 10
12000: PPUSH
12001: CALL_OW 296
12005: PUSH
12006: LD_INT 12
12008: GREATER
12009: OR
12010: IFFALSE 12014
// exit ;
12012: GO 12369
// missile := [ 1 ] ;
12014: LD_ADDR_VAR 0 14
12018: PUSH
12019: LD_INT 1
12021: PUSH
12022: EMPTY
12023: LIST
12024: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12025: LD_VAR 0 9
12029: PPUSH
12030: LD_VAR 0 12
12034: PPUSH
12035: CALL_OW 325
12039: IFFALSE 12068
// missile := Replace ( missile , missile + 1 , 2 ) ;
12041: LD_ADDR_VAR 0 14
12045: PUSH
12046: LD_VAR 0 14
12050: PPUSH
12051: LD_VAR 0 14
12055: PUSH
12056: LD_INT 1
12058: PLUS
12059: PPUSH
12060: LD_INT 2
12062: PPUSH
12063: CALL_OW 1
12067: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12068: LD_VAR 0 9
12072: PPUSH
12073: LD_VAR 0 13
12077: PPUSH
12078: CALL_OW 325
12082: IFFALSE 12106
12084: PUSH
12085: LD_VAR 0 10
12089: PPUSH
12090: CALL_OW 255
12094: PPUSH
12095: LD_VAR 0 13
12099: PPUSH
12100: CALL_OW 325
12104: NOT
12105: AND
12106: IFFALSE 12135
// missile := Replace ( missile , missile + 1 , 3 ) ;
12108: LD_ADDR_VAR 0 14
12112: PUSH
12113: LD_VAR 0 14
12117: PPUSH
12118: LD_VAR 0 14
12122: PUSH
12123: LD_INT 1
12125: PLUS
12126: PPUSH
12127: LD_INT 3
12129: PPUSH
12130: CALL_OW 1
12134: ST_TO_ADDR
// if missile < 2 then
12135: LD_VAR 0 14
12139: PUSH
12140: LD_INT 2
12142: LESS
12143: IFFALSE 12147
// exit ;
12145: GO 12369
// x := GetX ( enemy ) ;
12147: LD_ADDR_VAR 0 4
12151: PUSH
12152: LD_VAR 0 10
12156: PPUSH
12157: CALL_OW 250
12161: ST_TO_ADDR
// y := GetY ( enemy ) ;
12162: LD_ADDR_VAR 0 5
12166: PUSH
12167: LD_VAR 0 10
12171: PPUSH
12172: CALL_OW 251
12176: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12177: LD_ADDR_VAR 0 6
12181: PUSH
12182: LD_VAR 0 4
12186: PUSH
12187: LD_INT 1
12189: NEG
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 12
12198: PLUS
12199: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12200: LD_ADDR_VAR 0 7
12204: PUSH
12205: LD_VAR 0 5
12209: PUSH
12210: LD_INT 1
12212: NEG
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 12
12221: PLUS
12222: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12223: LD_VAR 0 6
12227: PPUSH
12228: LD_VAR 0 7
12232: PPUSH
12233: CALL_OW 488
12237: NOT
12238: IFFALSE 12260
// begin _x := x ;
12240: LD_ADDR_VAR 0 6
12244: PUSH
12245: LD_VAR 0 4
12249: ST_TO_ADDR
// _y := y ;
12250: LD_ADDR_VAR 0 7
12254: PUSH
12255: LD_VAR 0 5
12259: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 1
12267: PPUSH
12268: LD_VAR 0 14
12272: PPUSH
12273: CALL_OW 12
12277: ST_TO_ADDR
// case i of 1 :
12278: LD_VAR 0 3
12282: PUSH
12283: LD_INT 1
12285: DOUBLE
12286: EQUAL
12287: IFTRUE 12291
12289: GO 12308
12291: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12292: LD_VAR 0 1
12296: PPUSH
12297: LD_VAR 0 10
12301: PPUSH
12302: CALL_OW 115
12306: GO 12369
12308: LD_INT 2
12310: DOUBLE
12311: EQUAL
12312: IFTRUE 12316
12314: GO 12338
12316: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_VAR 0 6
12326: PPUSH
12327: LD_VAR 0 7
12331: PPUSH
12332: CALL_OW 153
12336: GO 12369
12338: LD_INT 3
12340: DOUBLE
12341: EQUAL
12342: IFTRUE 12346
12344: GO 12368
12346: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12347: LD_VAR 0 1
12351: PPUSH
12352: LD_VAR 0 6
12356: PPUSH
12357: LD_VAR 0 7
12361: PPUSH
12362: CALL_OW 154
12366: GO 12369
12368: POP
// end ;
12369: LD_VAR 0 2
12373: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12374: LD_INT 0
12376: PPUSH
12377: PPUSH
12378: PPUSH
12379: PPUSH
12380: PPUSH
12381: PPUSH
// if not unit or not building then
12382: LD_VAR 0 1
12386: NOT
12387: IFTRUE 12396
12389: PUSH
12390: LD_VAR 0 2
12394: NOT
12395: OR
12396: IFFALSE 12400
// exit ;
12398: GO 12558
// x := GetX ( building ) ;
12400: LD_ADDR_VAR 0 5
12404: PUSH
12405: LD_VAR 0 2
12409: PPUSH
12410: CALL_OW 250
12414: ST_TO_ADDR
// y := GetY ( building ) ;
12415: LD_ADDR_VAR 0 6
12419: PUSH
12420: LD_VAR 0 2
12424: PPUSH
12425: CALL_OW 251
12429: ST_TO_ADDR
// for i := 0 to 5 do
12430: LD_ADDR_VAR 0 4
12434: PUSH
12435: DOUBLE
12436: LD_INT 0
12438: DEC
12439: ST_TO_ADDR
12440: LD_INT 5
12442: PUSH
12443: FOR_TO
12444: IFFALSE 12556
// begin _x := ShiftX ( x , i , 3 ) ;
12446: LD_ADDR_VAR 0 7
12450: PUSH
12451: LD_VAR 0 5
12455: PPUSH
12456: LD_VAR 0 4
12460: PPUSH
12461: LD_INT 3
12463: PPUSH
12464: CALL_OW 272
12468: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12469: LD_ADDR_VAR 0 8
12473: PUSH
12474: LD_VAR 0 6
12478: PPUSH
12479: LD_VAR 0 4
12483: PPUSH
12484: LD_INT 3
12486: PPUSH
12487: CALL_OW 273
12491: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12492: LD_VAR 0 7
12496: PPUSH
12497: LD_VAR 0 8
12501: PPUSH
12502: CALL_OW 488
12506: NOT
12507: IFFALSE 12511
// continue ;
12509: GO 12443
// if HexInfo ( _x , _y ) = 0 then
12511: LD_VAR 0 7
12515: PPUSH
12516: LD_VAR 0 8
12520: PPUSH
12521: CALL_OW 428
12525: PUSH
12526: LD_INT 0
12528: EQUAL
12529: IFFALSE 12554
// begin ComMoveXY ( unit , _x , _y ) ;
12531: LD_VAR 0 1
12535: PPUSH
12536: LD_VAR 0 7
12540: PPUSH
12541: LD_VAR 0 8
12545: PPUSH
12546: CALL_OW 111
// exit ;
12550: POP
12551: POP
12552: GO 12558
// end ; end ;
12554: GO 12443
12556: POP
12557: POP
// end ;
12558: LD_VAR 0 3
12562: RET
// export function ScanBase ( side , base_area ) ; begin
12563: LD_INT 0
12565: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12566: LD_ADDR_VAR 0 3
12570: PUSH
12571: LD_VAR 0 2
12575: PPUSH
12576: LD_INT 81
12578: PUSH
12579: LD_VAR 0 1
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 70
12592: ST_TO_ADDR
// end ;
12593: LD_VAR 0 3
12597: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12598: LD_INT 0
12600: PPUSH
12601: PPUSH
12602: PPUSH
12603: PPUSH
// result := false ;
12604: LD_ADDR_VAR 0 2
12608: PUSH
12609: LD_INT 0
12611: ST_TO_ADDR
// side := GetSide ( unit ) ;
12612: LD_ADDR_VAR 0 3
12616: PUSH
12617: LD_VAR 0 1
12621: PPUSH
12622: CALL_OW 255
12626: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12627: LD_ADDR_VAR 0 4
12631: PUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 248
12641: ST_TO_ADDR
// case nat of 1 :
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: DOUBLE
12650: EQUAL
12651: IFTRUE 12655
12653: GO 12666
12655: POP
// tech := tech_lassight ; 2 :
12656: LD_ADDR_VAR 0 5
12660: PUSH
12661: LD_INT 12
12663: ST_TO_ADDR
12664: GO 12705
12666: LD_INT 2
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12685
12674: POP
// tech := tech_mortar ; 3 :
12675: LD_ADDR_VAR 0 5
12679: PUSH
12680: LD_INT 41
12682: ST_TO_ADDR
12683: GO 12705
12685: LD_INT 3
12687: DOUBLE
12688: EQUAL
12689: IFTRUE 12693
12691: GO 12704
12693: POP
// tech := tech_bazooka ; end ;
12694: LD_ADDR_VAR 0 5
12698: PUSH
12699: LD_INT 44
12701: ST_TO_ADDR
12702: GO 12705
12704: POP
// if Researched ( side , tech ) then
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_VAR 0 5
12714: PPUSH
12715: CALL_OW 325
12719: IFFALSE 12746
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12721: LD_ADDR_VAR 0 2
12725: PUSH
12726: LD_INT 5
12728: PUSH
12729: LD_INT 8
12731: PUSH
12732: LD_INT 9
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: LD_VAR 0 4
12744: ARRAY
12745: ST_TO_ADDR
// end ;
12746: LD_VAR 0 2
12750: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12751: LD_INT 0
12753: PPUSH
12754: PPUSH
12755: PPUSH
// if not mines then
12756: LD_VAR 0 2
12760: NOT
12761: IFFALSE 12765
// exit ;
12763: GO 12909
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12765: LD_ADDR_VAR 0 5
12769: PUSH
12770: LD_INT 81
12772: PUSH
12773: LD_VAR 0 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 3
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PPUSH
12803: CALL_OW 69
12807: ST_TO_ADDR
// for i in mines do
12808: LD_ADDR_VAR 0 4
12812: PUSH
12813: LD_VAR 0 2
12817: PUSH
12818: FOR_IN
12819: IFFALSE 12907
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12821: LD_VAR 0 4
12825: PUSH
12826: LD_INT 1
12828: ARRAY
12829: PPUSH
12830: LD_VAR 0 4
12834: PUSH
12835: LD_INT 2
12837: ARRAY
12838: PPUSH
12839: CALL_OW 458
12843: NOT
12844: IFFALSE 12848
// continue ;
12846: GO 12818
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12848: LD_VAR 0 4
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PPUSH
12857: LD_VAR 0 4
12861: PUSH
12862: LD_INT 2
12864: ARRAY
12865: PPUSH
12866: CALL_OW 428
12870: PUSH
12871: LD_VAR 0 5
12875: IN
12876: IFFALSE 12905
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12878: LD_VAR 0 4
12882: PUSH
12883: LD_INT 1
12885: ARRAY
12886: PPUSH
12887: LD_VAR 0 4
12891: PUSH
12892: LD_INT 2
12894: ARRAY
12895: PPUSH
12896: LD_VAR 0 1
12900: PPUSH
12901: CALL_OW 456
// end ;
12905: GO 12818
12907: POP
12908: POP
// end ;
12909: LD_VAR 0 3
12913: RET
// export function Count ( array ) ; begin
12914: LD_INT 0
12916: PPUSH
// result := array + 0 ;
12917: LD_ADDR_VAR 0 2
12921: PUSH
12922: LD_VAR 0 1
12926: PUSH
12927: LD_INT 0
12929: PLUS
12930: ST_TO_ADDR
// end ;
12931: LD_VAR 0 2
12935: RET
// export function IsEmpty ( building ) ; begin
12936: LD_INT 0
12938: PPUSH
// if not building then
12939: LD_VAR 0 1
12943: NOT
12944: IFFALSE 12948
// exit ;
12946: GO 12991
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12948: LD_ADDR_VAR 0 2
12952: PUSH
12953: LD_VAR 0 1
12957: PUSH
12958: LD_INT 22
12960: PUSH
12961: LD_VAR 0 1
12965: PPUSH
12966: CALL_OW 255
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 58
12977: PUSH
12978: EMPTY
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 69
12989: IN
12990: ST_TO_ADDR
// end ;
12991: LD_VAR 0 2
12995: RET
// export function IsNotFull ( building ) ; var places ; begin
12996: LD_INT 0
12998: PPUSH
12999: PPUSH
// if not building then
13000: LD_VAR 0 1
13004: NOT
13005: IFFALSE 13009
// exit ;
13007: GO 13037
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13009: LD_ADDR_VAR 0 2
13013: PUSH
13014: LD_VAR 0 1
13018: PPUSH
13019: LD_INT 3
13021: PUSH
13022: LD_INT 62
13024: PUSH
13025: EMPTY
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PPUSH
13032: CALL_OW 72
13036: ST_TO_ADDR
// end ;
13037: LD_VAR 0 2
13041: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13042: LD_INT 0
13044: PPUSH
13045: PPUSH
13046: PPUSH
13047: PPUSH
// tmp := [ ] ;
13048: LD_ADDR_VAR 0 3
13052: PUSH
13053: EMPTY
13054: ST_TO_ADDR
// list := [ ] ;
13055: LD_ADDR_VAR 0 5
13059: PUSH
13060: EMPTY
13061: ST_TO_ADDR
// for i = 16 to 25 do
13062: LD_ADDR_VAR 0 4
13066: PUSH
13067: DOUBLE
13068: LD_INT 16
13070: DEC
13071: ST_TO_ADDR
13072: LD_INT 25
13074: PUSH
13075: FOR_TO
13076: IFFALSE 13149
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13078: LD_ADDR_VAR 0 3
13082: PUSH
13083: LD_VAR 0 3
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_VAR 0 1
13095: PPUSH
13096: CALL_OW 255
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 91
13107: PUSH
13108: LD_VAR 0 1
13112: PUSH
13113: LD_INT 6
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 30
13123: PUSH
13124: LD_VAR 0 4
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: PPUSH
13141: CALL_OW 69
13145: ADD
13146: ST_TO_ADDR
13147: GO 13075
13149: POP
13150: POP
// for i = 1 to tmp do
13151: LD_ADDR_VAR 0 4
13155: PUSH
13156: DOUBLE
13157: LD_INT 1
13159: DEC
13160: ST_TO_ADDR
13161: LD_VAR 0 3
13165: PUSH
13166: FOR_TO
13167: IFFALSE 13255
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13169: LD_ADDR_VAR 0 5
13173: PUSH
13174: LD_VAR 0 5
13178: PUSH
13179: LD_VAR 0 3
13183: PUSH
13184: LD_VAR 0 4
13188: ARRAY
13189: PPUSH
13190: CALL_OW 266
13194: PUSH
13195: LD_VAR 0 3
13199: PUSH
13200: LD_VAR 0 4
13204: ARRAY
13205: PPUSH
13206: CALL_OW 250
13210: PUSH
13211: LD_VAR 0 3
13215: PUSH
13216: LD_VAR 0 4
13220: ARRAY
13221: PPUSH
13222: CALL_OW 251
13226: PUSH
13227: LD_VAR 0 3
13231: PUSH
13232: LD_VAR 0 4
13236: ARRAY
13237: PPUSH
13238: CALL_OW 254
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: ADD
13252: ST_TO_ADDR
13253: GO 13166
13255: POP
13256: POP
// result := list ;
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: LD_VAR 0 5
13266: ST_TO_ADDR
// end ;
13267: LD_VAR 0 2
13271: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13272: LD_INT 0
13274: PPUSH
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
// if not factory then
13281: LD_VAR 0 1
13285: NOT
13286: IFFALSE 13290
// exit ;
13288: GO 13893
// if control = control_apeman then
13290: LD_VAR 0 4
13294: PUSH
13295: LD_INT 5
13297: EQUAL
13298: IFFALSE 13407
// begin tmp := UnitsInside ( factory ) ;
13300: LD_ADDR_VAR 0 8
13304: PUSH
13305: LD_VAR 0 1
13309: PPUSH
13310: CALL_OW 313
13314: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13315: LD_VAR 0 8
13319: PPUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PPUSH
13330: CALL_OW 72
13334: NOT
13335: IFFALSE 13345
// control := control_manual ;
13337: LD_ADDR_VAR 0 4
13341: PUSH
13342: LD_INT 1
13344: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13345: LD_ADDR_VAR 0 8
13349: PUSH
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL 13042 0 1
13359: ST_TO_ADDR
// if tmp then
13360: LD_VAR 0 8
13364: IFFALSE 13407
// begin for i in tmp do
13366: LD_ADDR_VAR 0 7
13370: PUSH
13371: LD_VAR 0 8
13375: PUSH
13376: FOR_IN
13377: IFFALSE 13405
// if i [ 1 ] = b_ext_radio then
13379: LD_VAR 0 7
13383: PUSH
13384: LD_INT 1
13386: ARRAY
13387: PUSH
13388: LD_INT 22
13390: EQUAL
13391: IFFALSE 13403
// begin control := control_remote ;
13393: LD_ADDR_VAR 0 4
13397: PUSH
13398: LD_INT 2
13400: ST_TO_ADDR
// break ;
13401: GO 13405
// end ;
13403: GO 13376
13405: POP
13406: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13407: LD_VAR 0 1
13411: PPUSH
13412: LD_VAR 0 2
13416: PPUSH
13417: LD_VAR 0 3
13421: PPUSH
13422: LD_VAR 0 4
13426: PPUSH
13427: LD_VAR 0 5
13431: PPUSH
13432: CALL_OW 448
13436: IFFALSE 13471
// begin result := [ chassis , engine , control , weapon ] ;
13438: LD_ADDR_VAR 0 6
13442: PUSH
13443: LD_VAR 0 2
13447: PUSH
13448: LD_VAR 0 3
13452: PUSH
13453: LD_VAR 0 4
13457: PUSH
13458: LD_VAR 0 5
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: ST_TO_ADDR
// exit ;
13469: GO 13893
// end ; _chassis := AvailableChassisList ( factory ) ;
13471: LD_ADDR_VAR 0 9
13475: PUSH
13476: LD_VAR 0 1
13480: PPUSH
13481: CALL_OW 475
13485: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13486: LD_ADDR_VAR 0 11
13490: PUSH
13491: LD_VAR 0 1
13495: PPUSH
13496: CALL_OW 476
13500: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13501: LD_ADDR_VAR 0 12
13505: PUSH
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 477
13515: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 1
13525: PPUSH
13526: CALL_OW 478
13530: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13531: LD_VAR 0 9
13535: NOT
13536: IFTRUE 13545
13538: PUSH
13539: LD_VAR 0 11
13543: NOT
13544: OR
13545: IFTRUE 13554
13547: PUSH
13548: LD_VAR 0 12
13552: NOT
13553: OR
13554: IFTRUE 13563
13556: PUSH
13557: LD_VAR 0 10
13561: NOT
13562: OR
13563: IFFALSE 13598
// begin result := [ chassis , engine , control , weapon ] ;
13565: LD_ADDR_VAR 0 6
13569: PUSH
13570: LD_VAR 0 2
13574: PUSH
13575: LD_VAR 0 3
13579: PUSH
13580: LD_VAR 0 4
13584: PUSH
13585: LD_VAR 0 5
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: ST_TO_ADDR
// exit ;
13596: GO 13893
// end ; if not chassis in _chassis then
13598: LD_VAR 0 2
13602: PUSH
13603: LD_VAR 0 9
13607: IN
13608: NOT
13609: IFFALSE 13635
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13611: LD_ADDR_VAR 0 2
13615: PUSH
13616: LD_VAR 0 9
13620: PUSH
13621: LD_INT 1
13623: PPUSH
13624: LD_VAR 0 9
13628: PPUSH
13629: CALL_OW 12
13633: ARRAY
13634: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13635: LD_VAR 0 2
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: CALL 13898 0 2
13649: NOT
13650: IFFALSE 13711
// repeat engine := _engine [ 1 ] ;
13652: LD_ADDR_VAR 0 3
13656: PUSH
13657: LD_VAR 0 11
13661: PUSH
13662: LD_INT 1
13664: ARRAY
13665: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13666: LD_ADDR_VAR 0 11
13670: PUSH
13671: LD_VAR 0 11
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 3
13683: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13684: LD_VAR 0 2
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: CALL 13898 0 2
13698: IFTRUE 13709
13700: PUSH
13701: LD_VAR 0 11
13705: PUSH
13706: EMPTY
13707: EQUAL
13708: OR
13709: IFFALSE 13652
// if not control in _control then
13711: LD_VAR 0 4
13715: PUSH
13716: LD_VAR 0 12
13720: IN
13721: NOT
13722: IFFALSE 13748
// control := _control [ rand ( 1 , _control ) ] ;
13724: LD_ADDR_VAR 0 4
13728: PUSH
13729: LD_VAR 0 12
13733: PUSH
13734: LD_INT 1
13736: PPUSH
13737: LD_VAR 0 12
13741: PPUSH
13742: CALL_OW 12
13746: ARRAY
13747: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13748: LD_VAR 0 2
13752: PPUSH
13753: LD_VAR 0 5
13757: PPUSH
13758: CALL 14120 0 2
13762: NOT
13763: IFFALSE 13824
// repeat weapon := _weapon [ 1 ] ;
13765: LD_ADDR_VAR 0 5
13769: PUSH
13770: LD_VAR 0 10
13774: PUSH
13775: LD_INT 1
13777: ARRAY
13778: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13779: LD_ADDR_VAR 0 10
13783: PUSH
13784: LD_VAR 0 10
13788: PPUSH
13789: LD_INT 1
13791: PPUSH
13792: CALL_OW 3
13796: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13797: LD_VAR 0 2
13801: PPUSH
13802: LD_VAR 0 5
13806: PPUSH
13807: CALL 14120 0 2
13811: IFTRUE 13822
13813: PUSH
13814: LD_VAR 0 10
13818: PUSH
13819: EMPTY
13820: EQUAL
13821: OR
13822: IFFALSE 13765
// result := [ ] ;
13824: LD_ADDR_VAR 0 6
13828: PUSH
13829: EMPTY
13830: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_VAR 0 2
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_VAR 0 4
13850: PPUSH
13851: LD_VAR 0 5
13855: PPUSH
13856: CALL_OW 448
13860: IFFALSE 13893
// result := [ chassis , engine , control , weapon ] ;
13862: LD_ADDR_VAR 0 6
13866: PUSH
13867: LD_VAR 0 2
13871: PUSH
13872: LD_VAR 0 3
13876: PUSH
13877: LD_VAR 0 4
13881: PUSH
13882: LD_VAR 0 5
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: ST_TO_ADDR
// end ;
13893: LD_VAR 0 6
13897: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13898: LD_INT 0
13900: PPUSH
// if not chassis or not engine then
13901: LD_VAR 0 1
13905: NOT
13906: IFTRUE 13915
13908: PUSH
13909: LD_VAR 0 2
13913: NOT
13914: OR
13915: IFFALSE 13919
// exit ;
13917: GO 14115
// case engine of engine_solar :
13919: LD_VAR 0 2
13923: PUSH
13924: LD_INT 2
13926: DOUBLE
13927: EQUAL
13928: IFTRUE 13932
13930: GO 13970
13932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13933: LD_ADDR_VAR 0 3
13937: PUSH
13938: LD_INT 11
13940: PUSH
13941: LD_INT 12
13943: PUSH
13944: LD_INT 13
13946: PUSH
13947: LD_INT 14
13949: PUSH
13950: LD_INT 1
13952: PUSH
13953: LD_INT 2
13955: PUSH
13956: LD_INT 3
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: ST_TO_ADDR
13968: GO 14099
13970: LD_INT 1
13972: DOUBLE
13973: EQUAL
13974: IFTRUE 13978
13976: GO 14040
13978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13979: LD_ADDR_VAR 0 3
13983: PUSH
13984: LD_INT 11
13986: PUSH
13987: LD_INT 12
13989: PUSH
13990: LD_INT 13
13992: PUSH
13993: LD_INT 14
13995: PUSH
13996: LD_INT 1
13998: PUSH
13999: LD_INT 2
14001: PUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 4
14007: PUSH
14008: LD_INT 5
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 23
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_INT 24
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: ST_TO_ADDR
14038: GO 14099
14040: LD_INT 3
14042: DOUBLE
14043: EQUAL
14044: IFTRUE 14048
14046: GO 14098
14048: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14049: LD_ADDR_VAR 0 3
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: LD_INT 3
14065: PUSH
14066: LD_INT 4
14068: PUSH
14069: LD_INT 5
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_INT 23
14080: PUSH
14081: LD_INT 24
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: ST_TO_ADDR
14096: GO 14099
14098: POP
// result := ( chassis in result ) ;
14099: LD_ADDR_VAR 0 3
14103: PUSH
14104: LD_VAR 0 1
14108: PUSH
14109: LD_VAR 0 3
14113: IN
14114: ST_TO_ADDR
// end ;
14115: LD_VAR 0 3
14119: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14120: LD_INT 0
14122: PPUSH
// if not chassis or not weapon then
14123: LD_VAR 0 1
14127: NOT
14128: IFTRUE 14137
14130: PUSH
14131: LD_VAR 0 2
14135: NOT
14136: OR
14137: IFFALSE 14141
// exit ;
14139: GO 15235
// case weapon of us_machine_gun :
14141: LD_VAR 0 2
14145: PUSH
14146: LD_INT 2
14148: DOUBLE
14149: EQUAL
14150: IFTRUE 14154
14152: GO 14184
14154: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14155: LD_ADDR_VAR 0 3
14159: PUSH
14160: LD_INT 1
14162: PUSH
14163: LD_INT 2
14165: PUSH
14166: LD_INT 3
14168: PUSH
14169: LD_INT 4
14171: PUSH
14172: LD_INT 5
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: ST_TO_ADDR
14182: GO 15219
14184: LD_INT 3
14186: DOUBLE
14187: EQUAL
14188: IFTRUE 14192
14190: GO 14222
14192: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14193: LD_ADDR_VAR 0 3
14197: PUSH
14198: LD_INT 1
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: LD_INT 3
14206: PUSH
14207: LD_INT 4
14209: PUSH
14210: LD_INT 5
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: ST_TO_ADDR
14220: GO 15219
14222: LD_INT 11
14224: DOUBLE
14225: EQUAL
14226: IFTRUE 14230
14228: GO 14260
14230: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_INT 1
14238: PUSH
14239: LD_INT 2
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: LD_INT 4
14247: PUSH
14248: LD_INT 5
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: ST_TO_ADDR
14258: GO 15219
14260: LD_INT 4
14262: DOUBLE
14263: EQUAL
14264: IFTRUE 14268
14266: GO 14294
14268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14269: LD_ADDR_VAR 0 3
14273: PUSH
14274: LD_INT 2
14276: PUSH
14277: LD_INT 3
14279: PUSH
14280: LD_INT 4
14282: PUSH
14283: LD_INT 5
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: ST_TO_ADDR
14292: GO 15219
14294: LD_INT 5
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14328
14302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_INT 2
14310: PUSH
14311: LD_INT 3
14313: PUSH
14314: LD_INT 4
14316: PUSH
14317: LD_INT 5
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: ST_TO_ADDR
14326: GO 15219
14328: LD_INT 9
14330: DOUBLE
14331: EQUAL
14332: IFTRUE 14336
14334: GO 14362
14336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14337: LD_ADDR_VAR 0 3
14341: PUSH
14342: LD_INT 2
14344: PUSH
14345: LD_INT 3
14347: PUSH
14348: LD_INT 4
14350: PUSH
14351: LD_INT 5
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: ST_TO_ADDR
14360: GO 15219
14362: LD_INT 7
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14396
14370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14371: LD_ADDR_VAR 0 3
14375: PUSH
14376: LD_INT 2
14378: PUSH
14379: LD_INT 3
14381: PUSH
14382: LD_INT 4
14384: PUSH
14385: LD_INT 5
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: ST_TO_ADDR
14394: GO 15219
14396: LD_INT 12
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14430
14404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14405: LD_ADDR_VAR 0 3
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: LD_INT 3
14415: PUSH
14416: LD_INT 4
14418: PUSH
14419: LD_INT 5
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: ST_TO_ADDR
14428: GO 15219
14430: LD_INT 13
14432: DOUBLE
14433: EQUAL
14434: IFTRUE 14438
14436: GO 14464
14438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: LD_INT 3
14449: PUSH
14450: LD_INT 4
14452: PUSH
14453: LD_INT 5
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: ST_TO_ADDR
14462: GO 15219
14464: LD_INT 14
14466: DOUBLE
14467: EQUAL
14468: IFTRUE 14472
14470: GO 14490
14472: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14473: LD_ADDR_VAR 0 3
14477: PUSH
14478: LD_INT 4
14480: PUSH
14481: LD_INT 5
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: ST_TO_ADDR
14488: GO 15219
14490: LD_INT 6
14492: DOUBLE
14493: EQUAL
14494: IFTRUE 14498
14496: GO 14516
14498: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14499: LD_ADDR_VAR 0 3
14503: PUSH
14504: LD_INT 4
14506: PUSH
14507: LD_INT 5
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: ST_TO_ADDR
14514: GO 15219
14516: LD_INT 10
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14542
14524: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14525: LD_ADDR_VAR 0 3
14529: PUSH
14530: LD_INT 4
14532: PUSH
14533: LD_INT 5
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: ST_TO_ADDR
14540: GO 15219
14542: LD_INT 22
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14576
14550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: LD_INT 11
14558: PUSH
14559: LD_INT 12
14561: PUSH
14562: LD_INT 13
14564: PUSH
14565: LD_INT 14
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: ST_TO_ADDR
14574: GO 15219
14576: LD_INT 23
14578: DOUBLE
14579: EQUAL
14580: IFTRUE 14584
14582: GO 14610
14584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14585: LD_ADDR_VAR 0 3
14589: PUSH
14590: LD_INT 11
14592: PUSH
14593: LD_INT 12
14595: PUSH
14596: LD_INT 13
14598: PUSH
14599: LD_INT 14
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: ST_TO_ADDR
14608: GO 15219
14610: LD_INT 24
14612: DOUBLE
14613: EQUAL
14614: IFTRUE 14618
14616: GO 14644
14618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14619: LD_ADDR_VAR 0 3
14623: PUSH
14624: LD_INT 11
14626: PUSH
14627: LD_INT 12
14629: PUSH
14630: LD_INT 13
14632: PUSH
14633: LD_INT 14
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: ST_TO_ADDR
14642: GO 15219
14644: LD_INT 30
14646: DOUBLE
14647: EQUAL
14648: IFTRUE 14652
14650: GO 14678
14652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14653: LD_ADDR_VAR 0 3
14657: PUSH
14658: LD_INT 11
14660: PUSH
14661: LD_INT 12
14663: PUSH
14664: LD_INT 13
14666: PUSH
14667: LD_INT 14
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: ST_TO_ADDR
14676: GO 15219
14678: LD_INT 25
14680: DOUBLE
14681: EQUAL
14682: IFTRUE 14686
14684: GO 14704
14686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14687: LD_ADDR_VAR 0 3
14691: PUSH
14692: LD_INT 13
14694: PUSH
14695: LD_INT 14
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: ST_TO_ADDR
14702: GO 15219
14704: LD_INT 27
14706: DOUBLE
14707: EQUAL
14708: IFTRUE 14712
14710: GO 14730
14712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: LD_INT 13
14720: PUSH
14721: LD_INT 14
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: ST_TO_ADDR
14728: GO 15219
14730: LD_INT 92
14732: DOUBLE
14733: EQUAL
14734: IFTRUE 14738
14736: GO 14764
14738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14739: LD_ADDR_VAR 0 3
14743: PUSH
14744: LD_INT 11
14746: PUSH
14747: LD_INT 12
14749: PUSH
14750: LD_INT 13
14752: PUSH
14753: LD_INT 14
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: ST_TO_ADDR
14762: GO 15219
14764: LD_INT 28
14766: DOUBLE
14767: EQUAL
14768: IFTRUE 14772
14770: GO 14790
14772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_INT 13
14780: PUSH
14781: LD_INT 14
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 15219
14790: LD_INT 29
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 14816
14798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14799: LD_ADDR_VAR 0 3
14803: PUSH
14804: LD_INT 13
14806: PUSH
14807: LD_INT 14
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: ST_TO_ADDR
14814: GO 15219
14816: LD_INT 31
14818: DOUBLE
14819: EQUAL
14820: IFTRUE 14824
14822: GO 14842
14824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14825: LD_ADDR_VAR 0 3
14829: PUSH
14830: LD_INT 13
14832: PUSH
14833: LD_INT 14
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: ST_TO_ADDR
14840: GO 15219
14842: LD_INT 26
14844: DOUBLE
14845: EQUAL
14846: IFTRUE 14850
14848: GO 14868
14850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_INT 13
14858: PUSH
14859: LD_INT 14
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: ST_TO_ADDR
14866: GO 15219
14868: LD_INT 42
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 14902
14876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_INT 21
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_INT 23
14890: PUSH
14891: LD_INT 24
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: ST_TO_ADDR
14900: GO 15219
14902: LD_INT 43
14904: DOUBLE
14905: EQUAL
14906: IFTRUE 14910
14908: GO 14936
14910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14911: LD_ADDR_VAR 0 3
14915: PUSH
14916: LD_INT 21
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_INT 23
14924: PUSH
14925: LD_INT 24
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: ST_TO_ADDR
14934: GO 15219
14936: LD_INT 44
14938: DOUBLE
14939: EQUAL
14940: IFTRUE 14944
14942: GO 14970
14944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14945: LD_ADDR_VAR 0 3
14949: PUSH
14950: LD_INT 21
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 23
14958: PUSH
14959: LD_INT 24
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: ST_TO_ADDR
14968: GO 15219
14970: LD_INT 45
14972: DOUBLE
14973: EQUAL
14974: IFTRUE 14978
14976: GO 15004
14978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14979: LD_ADDR_VAR 0 3
14983: PUSH
14984: LD_INT 21
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_INT 23
14992: PUSH
14993: LD_INT 24
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: ST_TO_ADDR
15002: GO 15219
15004: LD_INT 49
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15038
15012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: LD_INT 21
15020: PUSH
15021: LD_INT 22
15023: PUSH
15024: LD_INT 23
15026: PUSH
15027: LD_INT 24
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: ST_TO_ADDR
15036: GO 15219
15038: LD_INT 51
15040: DOUBLE
15041: EQUAL
15042: IFTRUE 15046
15044: GO 15072
15046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15047: LD_ADDR_VAR 0 3
15051: PUSH
15052: LD_INT 21
15054: PUSH
15055: LD_INT 22
15057: PUSH
15058: LD_INT 23
15060: PUSH
15061: LD_INT 24
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: ST_TO_ADDR
15070: GO 15219
15072: LD_INT 52
15074: DOUBLE
15075: EQUAL
15076: IFTRUE 15080
15078: GO 15106
15080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: LD_INT 22
15091: PUSH
15092: LD_INT 23
15094: PUSH
15095: LD_INT 24
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: ST_TO_ADDR
15104: GO 15219
15106: LD_INT 53
15108: DOUBLE
15109: EQUAL
15110: IFTRUE 15114
15112: GO 15132
15114: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15115: LD_ADDR_VAR 0 3
15119: PUSH
15120: LD_INT 23
15122: PUSH
15123: LD_INT 24
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: ST_TO_ADDR
15130: GO 15219
15132: LD_INT 46
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15158
15140: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15141: LD_ADDR_VAR 0 3
15145: PUSH
15146: LD_INT 23
15148: PUSH
15149: LD_INT 24
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: ST_TO_ADDR
15156: GO 15219
15158: LD_INT 47
15160: DOUBLE
15161: EQUAL
15162: IFTRUE 15166
15164: GO 15184
15166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15167: LD_ADDR_VAR 0 3
15171: PUSH
15172: LD_INT 23
15174: PUSH
15175: LD_INT 24
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: ST_TO_ADDR
15182: GO 15219
15184: LD_INT 98
15186: DOUBLE
15187: EQUAL
15188: IFTRUE 15192
15190: GO 15218
15192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_INT 23
15206: PUSH
15207: LD_INT 24
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: ST_TO_ADDR
15216: GO 15219
15218: POP
// result := ( chassis in result ) ;
15219: LD_ADDR_VAR 0 3
15223: PUSH
15224: LD_VAR 0 1
15228: PUSH
15229: LD_VAR 0 3
15233: IN
15234: ST_TO_ADDR
// end ;
15235: LD_VAR 0 3
15239: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15240: LD_INT 0
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
// result := array ;
15249: LD_ADDR_VAR 0 5
15253: PUSH
15254: LD_VAR 0 1
15258: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15259: LD_VAR 0 1
15263: NOT
15264: IFTRUE 15273
15266: PUSH
15267: LD_VAR 0 2
15271: NOT
15272: OR
15273: IFTRUE 15282
15275: PUSH
15276: LD_VAR 0 3
15280: NOT
15281: OR
15282: IFTRUE 15296
15284: PUSH
15285: LD_VAR 0 2
15289: PUSH
15290: LD_VAR 0 1
15294: GREATER
15295: OR
15296: IFTRUE 15310
15298: PUSH
15299: LD_VAR 0 3
15303: PUSH
15304: LD_VAR 0 1
15308: GREATER
15309: OR
15310: IFFALSE 15314
// exit ;
15312: GO 15610
// if direction then
15314: LD_VAR 0 4
15318: IFFALSE 15382
// begin d := 1 ;
15320: LD_ADDR_VAR 0 9
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// if i_from > i_to then
15328: LD_VAR 0 2
15332: PUSH
15333: LD_VAR 0 3
15337: GREATER
15338: IFFALSE 15364
// length := ( array - i_from ) + i_to else
15340: LD_ADDR_VAR 0 11
15344: PUSH
15345: LD_VAR 0 1
15349: PUSH
15350: LD_VAR 0 2
15354: MINUS
15355: PUSH
15356: LD_VAR 0 3
15360: PLUS
15361: ST_TO_ADDR
15362: GO 15380
// length := i_to - i_from ;
15364: LD_ADDR_VAR 0 11
15368: PUSH
15369: LD_VAR 0 3
15373: PUSH
15374: LD_VAR 0 2
15378: MINUS
15379: ST_TO_ADDR
// end else
15380: GO 15443
// begin d := - 1 ;
15382: LD_ADDR_VAR 0 9
15386: PUSH
15387: LD_INT 1
15389: NEG
15390: ST_TO_ADDR
// if i_from > i_to then
15391: LD_VAR 0 2
15395: PUSH
15396: LD_VAR 0 3
15400: GREATER
15401: IFFALSE 15421
// length := i_from - i_to else
15403: LD_ADDR_VAR 0 11
15407: PUSH
15408: LD_VAR 0 2
15412: PUSH
15413: LD_VAR 0 3
15417: MINUS
15418: ST_TO_ADDR
15419: GO 15443
// length := ( array - i_to ) + i_from ;
15421: LD_ADDR_VAR 0 11
15425: PUSH
15426: LD_VAR 0 1
15430: PUSH
15431: LD_VAR 0 3
15435: MINUS
15436: PUSH
15437: LD_VAR 0 2
15441: PLUS
15442: ST_TO_ADDR
// end ; if not length then
15443: LD_VAR 0 11
15447: NOT
15448: IFFALSE 15452
// exit ;
15450: GO 15610
// tmp := array ;
15452: LD_ADDR_VAR 0 10
15456: PUSH
15457: LD_VAR 0 1
15461: ST_TO_ADDR
// for i = 1 to length do
15462: LD_ADDR_VAR 0 6
15466: PUSH
15467: DOUBLE
15468: LD_INT 1
15470: DEC
15471: ST_TO_ADDR
15472: LD_VAR 0 11
15476: PUSH
15477: FOR_TO
15478: IFFALSE 15598
// begin for j = 1 to array do
15480: LD_ADDR_VAR 0 7
15484: PUSH
15485: DOUBLE
15486: LD_INT 1
15488: DEC
15489: ST_TO_ADDR
15490: LD_VAR 0 1
15494: PUSH
15495: FOR_TO
15496: IFFALSE 15584
// begin k := j + d ;
15498: LD_ADDR_VAR 0 8
15502: PUSH
15503: LD_VAR 0 7
15507: PUSH
15508: LD_VAR 0 9
15512: PLUS
15513: ST_TO_ADDR
// if k > array then
15514: LD_VAR 0 8
15518: PUSH
15519: LD_VAR 0 1
15523: GREATER
15524: IFFALSE 15534
// k := 1 ;
15526: LD_ADDR_VAR 0 8
15530: PUSH
15531: LD_INT 1
15533: ST_TO_ADDR
// if not k then
15534: LD_VAR 0 8
15538: NOT
15539: IFFALSE 15551
// k := array ;
15541: LD_ADDR_VAR 0 8
15545: PUSH
15546: LD_VAR 0 1
15550: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15551: LD_ADDR_VAR 0 10
15555: PUSH
15556: LD_VAR 0 10
15560: PPUSH
15561: LD_VAR 0 8
15565: PPUSH
15566: LD_VAR 0 1
15570: PUSH
15571: LD_VAR 0 7
15575: ARRAY
15576: PPUSH
15577: CALL_OW 1
15581: ST_TO_ADDR
// end ;
15582: GO 15495
15584: POP
15585: POP
// array := tmp ;
15586: LD_ADDR_VAR 0 1
15590: PUSH
15591: LD_VAR 0 10
15595: ST_TO_ADDR
// end ;
15596: GO 15477
15598: POP
15599: POP
// result := array ;
15600: LD_ADDR_VAR 0 5
15604: PUSH
15605: LD_VAR 0 1
15609: ST_TO_ADDR
// end ;
15610: LD_VAR 0 5
15614: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15615: LD_INT 0
15617: PPUSH
15618: PPUSH
// result := 0 ;
15619: LD_ADDR_VAR 0 3
15623: PUSH
15624: LD_INT 0
15626: ST_TO_ADDR
// if not array or not value in array then
15627: LD_VAR 0 1
15631: NOT
15632: IFTRUE 15647
15634: PUSH
15635: LD_VAR 0 2
15639: PUSH
15640: LD_VAR 0 1
15644: IN
15645: NOT
15646: OR
15647: IFFALSE 15651
// exit ;
15649: GO 15705
// for i = 1 to array do
15651: LD_ADDR_VAR 0 4
15655: PUSH
15656: DOUBLE
15657: LD_INT 1
15659: DEC
15660: ST_TO_ADDR
15661: LD_VAR 0 1
15665: PUSH
15666: FOR_TO
15667: IFFALSE 15703
// if value = array [ i ] then
15669: LD_VAR 0 2
15673: PUSH
15674: LD_VAR 0 1
15678: PUSH
15679: LD_VAR 0 4
15683: ARRAY
15684: EQUAL
15685: IFFALSE 15701
// begin result := i ;
15687: LD_ADDR_VAR 0 3
15691: PUSH
15692: LD_VAR 0 4
15696: ST_TO_ADDR
// exit ;
15697: POP
15698: POP
15699: GO 15705
// end ;
15701: GO 15666
15703: POP
15704: POP
// end ;
15705: LD_VAR 0 3
15709: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15710: LD_INT 0
15712: PPUSH
// vc_chassis := chassis ;
15713: LD_ADDR_OWVAR 37
15717: PUSH
15718: LD_VAR 0 1
15722: ST_TO_ADDR
// vc_engine := engine ;
15723: LD_ADDR_OWVAR 39
15727: PUSH
15728: LD_VAR 0 2
15732: ST_TO_ADDR
// vc_control := control ;
15733: LD_ADDR_OWVAR 38
15737: PUSH
15738: LD_VAR 0 3
15742: ST_TO_ADDR
// vc_weapon := weapon ;
15743: LD_ADDR_OWVAR 40
15747: PUSH
15748: LD_VAR 0 4
15752: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15753: LD_ADDR_OWVAR 41
15757: PUSH
15758: LD_VAR 0 5
15762: ST_TO_ADDR
// end ;
15763: LD_VAR 0 6
15767: RET
// export function WantPlant ( unit ) ; var task ; begin
15768: LD_INT 0
15770: PPUSH
15771: PPUSH
// result := false ;
15772: LD_ADDR_VAR 0 2
15776: PUSH
15777: LD_INT 0
15779: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15780: LD_ADDR_VAR 0 3
15784: PUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 437
15794: ST_TO_ADDR
// if task then
15795: LD_VAR 0 3
15799: IFFALSE 15827
// if task [ 1 ] [ 1 ] = p then
15801: LD_VAR 0 3
15805: PUSH
15806: LD_INT 1
15808: ARRAY
15809: PUSH
15810: LD_INT 1
15812: ARRAY
15813: PUSH
15814: LD_STRING p
15816: EQUAL
15817: IFFALSE 15827
// result := true ;
15819: LD_ADDR_VAR 0 2
15823: PUSH
15824: LD_INT 1
15826: ST_TO_ADDR
// end ;
15827: LD_VAR 0 2
15831: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15832: LD_INT 0
15834: PPUSH
15835: PPUSH
15836: PPUSH
15837: PPUSH
// if pos < 1 then
15838: LD_VAR 0 2
15842: PUSH
15843: LD_INT 1
15845: LESS
15846: IFFALSE 15850
// exit ;
15848: GO 16153
// if pos = 1 then
15850: LD_VAR 0 2
15854: PUSH
15855: LD_INT 1
15857: EQUAL
15858: IFFALSE 15891
// result := Replace ( arr , pos [ 1 ] , value ) else
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: LD_VAR 0 1
15869: PPUSH
15870: LD_VAR 0 2
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: CALL_OW 1
15888: ST_TO_ADDR
15889: GO 16153
// begin tmp := arr ;
15891: LD_ADDR_VAR 0 6
15895: PUSH
15896: LD_VAR 0 1
15900: ST_TO_ADDR
// s_arr := [ tmp ] ;
15901: LD_ADDR_VAR 0 7
15905: PUSH
15906: LD_VAR 0 6
15910: PUSH
15911: EMPTY
15912: LIST
15913: ST_TO_ADDR
// for i = 1 to pos - 1 do
15914: LD_ADDR_VAR 0 5
15918: PUSH
15919: DOUBLE
15920: LD_INT 1
15922: DEC
15923: ST_TO_ADDR
15924: LD_VAR 0 2
15928: PUSH
15929: LD_INT 1
15931: MINUS
15932: PUSH
15933: FOR_TO
15934: IFFALSE 15979
// begin tmp := tmp [ pos [ i ] ] ;
15936: LD_ADDR_VAR 0 6
15940: PUSH
15941: LD_VAR 0 6
15945: PUSH
15946: LD_VAR 0 2
15950: PUSH
15951: LD_VAR 0 5
15955: ARRAY
15956: ARRAY
15957: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15958: LD_ADDR_VAR 0 7
15962: PUSH
15963: LD_VAR 0 7
15967: PUSH
15968: LD_VAR 0 6
15972: PUSH
15973: EMPTY
15974: LIST
15975: ADD
15976: ST_TO_ADDR
// end ;
15977: GO 15933
15979: POP
15980: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15981: LD_ADDR_VAR 0 6
15985: PUSH
15986: LD_VAR 0 6
15990: PPUSH
15991: LD_VAR 0 2
15995: PUSH
15996: LD_VAR 0 2
16000: ARRAY
16001: PPUSH
16002: LD_VAR 0 3
16006: PPUSH
16007: CALL_OW 1
16011: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16012: LD_ADDR_VAR 0 7
16016: PUSH
16017: LD_VAR 0 7
16021: PPUSH
16022: LD_VAR 0 7
16026: PPUSH
16027: LD_VAR 0 6
16031: PPUSH
16032: CALL_OW 1
16036: ST_TO_ADDR
// for i = s_arr downto 2 do
16037: LD_ADDR_VAR 0 5
16041: PUSH
16042: DOUBLE
16043: LD_VAR 0 7
16047: INC
16048: ST_TO_ADDR
16049: LD_INT 2
16051: PUSH
16052: FOR_DOWNTO
16053: IFFALSE 16137
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16055: LD_ADDR_VAR 0 6
16059: PUSH
16060: LD_VAR 0 7
16064: PUSH
16065: LD_VAR 0 5
16069: PUSH
16070: LD_INT 1
16072: MINUS
16073: ARRAY
16074: PPUSH
16075: LD_VAR 0 2
16079: PUSH
16080: LD_VAR 0 5
16084: PUSH
16085: LD_INT 1
16087: MINUS
16088: ARRAY
16089: PPUSH
16090: LD_VAR 0 7
16094: PUSH
16095: LD_VAR 0 5
16099: ARRAY
16100: PPUSH
16101: CALL_OW 1
16105: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16106: LD_ADDR_VAR 0 7
16110: PUSH
16111: LD_VAR 0 7
16115: PPUSH
16116: LD_VAR 0 5
16120: PUSH
16121: LD_INT 1
16123: MINUS
16124: PPUSH
16125: LD_VAR 0 6
16129: PPUSH
16130: CALL_OW 1
16134: ST_TO_ADDR
// end ;
16135: GO 16052
16137: POP
16138: POP
// result := s_arr [ 1 ] ;
16139: LD_ADDR_VAR 0 4
16143: PUSH
16144: LD_VAR 0 7
16148: PUSH
16149: LD_INT 1
16151: ARRAY
16152: ST_TO_ADDR
// end ; end ;
16153: LD_VAR 0 4
16157: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
// if not list then
16162: LD_VAR 0 1
16166: NOT
16167: IFFALSE 16171
// exit ;
16169: GO 16262
// i := list [ pos1 ] ;
16171: LD_ADDR_VAR 0 5
16175: PUSH
16176: LD_VAR 0 1
16180: PUSH
16181: LD_VAR 0 2
16185: ARRAY
16186: ST_TO_ADDR
// if not i then
16187: LD_VAR 0 5
16191: NOT
16192: IFFALSE 16196
// exit ;
16194: GO 16262
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16196: LD_ADDR_VAR 0 1
16200: PUSH
16201: LD_VAR 0 1
16205: PPUSH
16206: LD_VAR 0 2
16210: PPUSH
16211: LD_VAR 0 1
16215: PUSH
16216: LD_VAR 0 3
16220: ARRAY
16221: PPUSH
16222: CALL_OW 1
16226: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16227: LD_ADDR_VAR 0 1
16231: PUSH
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_VAR 0 5
16246: PPUSH
16247: CALL_OW 1
16251: ST_TO_ADDR
// result := list ;
16252: LD_ADDR_VAR 0 4
16256: PUSH
16257: LD_VAR 0 1
16261: ST_TO_ADDR
// end ;
16262: LD_VAR 0 4
16266: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16267: LD_INT 0
16269: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16270: LD_ADDR_VAR 0 5
16274: PUSH
16275: LD_VAR 0 1
16279: PPUSH
16280: CALL_OW 250
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 251
16294: PPUSH
16295: LD_VAR 0 2
16299: PPUSH
16300: LD_VAR 0 3
16304: PPUSH
16305: LD_VAR 0 4
16309: PPUSH
16310: CALL 16692 0 5
16314: ST_TO_ADDR
// end ;
16315: LD_VAR 0 5
16319: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
16324: PPUSH
16325: PPUSH
// if not list or not unit then
16326: LD_VAR 0 2
16330: NOT
16331: IFTRUE 16340
16333: PUSH
16334: LD_VAR 0 1
16338: NOT
16339: OR
16340: IFFALSE 16344
// exit ;
16342: GO 16687
// result := [ ] ;
16344: LD_ADDR_VAR 0 5
16348: PUSH
16349: EMPTY
16350: ST_TO_ADDR
// for i in list do
16351: LD_ADDR_VAR 0 6
16355: PUSH
16356: LD_VAR 0 2
16360: PUSH
16361: FOR_IN
16362: IFFALSE 16580
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16364: LD_ADDR_VAR 0 8
16368: PUSH
16369: LD_VAR 0 1
16373: PPUSH
16374: LD_VAR 0 6
16378: PUSH
16379: LD_INT 1
16381: ARRAY
16382: PPUSH
16383: LD_VAR 0 6
16387: PUSH
16388: LD_INT 2
16390: ARRAY
16391: PPUSH
16392: CALL_OW 297
16396: ST_TO_ADDR
// if not Count ( result ) then
16397: LD_VAR 0 5
16401: PPUSH
16402: CALL 12914 0 1
16406: NOT
16407: IFFALSE 16440
// begin result := Join ( result , [ i , tmp ] ) ;
16409: LD_ADDR_VAR 0 5
16413: PUSH
16414: LD_VAR 0 5
16418: PPUSH
16419: LD_VAR 0 6
16423: PUSH
16424: LD_VAR 0 8
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL 48880 0 2
16437: ST_TO_ADDR
// continue ;
16438: GO 16361
// end ; if result [ result ] [ 2 ] <= tmp then
16440: LD_VAR 0 5
16444: PUSH
16445: LD_VAR 0 5
16449: ARRAY
16450: PUSH
16451: LD_INT 2
16453: ARRAY
16454: PUSH
16455: LD_VAR 0 8
16459: LESSEQUAL
16460: IFFALSE 16493
// result := Join ( result , [ i , tmp ] ) else
16462: LD_ADDR_VAR 0 5
16466: PUSH
16467: LD_VAR 0 5
16471: PPUSH
16472: LD_VAR 0 6
16476: PUSH
16477: LD_VAR 0 8
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 48880 0 2
16490: ST_TO_ADDR
16491: GO 16578
// begin for j := 1 to Count ( result ) do
16493: LD_ADDR_VAR 0 7
16497: PUSH
16498: DOUBLE
16499: LD_INT 1
16501: DEC
16502: ST_TO_ADDR
16503: LD_VAR 0 5
16507: PPUSH
16508: CALL 12914 0 1
16512: PUSH
16513: FOR_TO
16514: IFFALSE 16576
// begin if tmp < result [ j ] [ 2 ] then
16516: LD_VAR 0 8
16520: PUSH
16521: LD_VAR 0 5
16525: PUSH
16526: LD_VAR 0 7
16530: ARRAY
16531: PUSH
16532: LD_INT 2
16534: ARRAY
16535: LESS
16536: IFFALSE 16574
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16538: LD_ADDR_VAR 0 5
16542: PUSH
16543: LD_VAR 0 5
16547: PPUSH
16548: LD_VAR 0 7
16552: PPUSH
16553: LD_VAR 0 6
16557: PUSH
16558: LD_VAR 0 8
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL_OW 2
16571: ST_TO_ADDR
// break ;
16572: GO 16576
// end ; end ;
16574: GO 16513
16576: POP
16577: POP
// end ; end ;
16578: GO 16361
16580: POP
16581: POP
// if result and not asc then
16582: LD_VAR 0 5
16586: IFFALSE 16595
16588: PUSH
16589: LD_VAR 0 3
16593: NOT
16594: AND
16595: IFFALSE 16612
// result := ReverseArray ( result ) ;
16597: LD_ADDR_VAR 0 5
16601: PUSH
16602: LD_VAR 0 5
16606: PPUSH
16607: CALL 43970 0 1
16611: ST_TO_ADDR
// tmp := [ ] ;
16612: LD_ADDR_VAR 0 8
16616: PUSH
16617: EMPTY
16618: ST_TO_ADDR
// if mode then
16619: LD_VAR 0 4
16623: IFFALSE 16687
// begin for i := 1 to result do
16625: LD_ADDR_VAR 0 6
16629: PUSH
16630: DOUBLE
16631: LD_INT 1
16633: DEC
16634: ST_TO_ADDR
16635: LD_VAR 0 5
16639: PUSH
16640: FOR_TO
16641: IFFALSE 16675
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16643: LD_ADDR_VAR 0 8
16647: PUSH
16648: LD_VAR 0 8
16652: PPUSH
16653: LD_VAR 0 5
16657: PUSH
16658: LD_VAR 0 6
16662: ARRAY
16663: PUSH
16664: LD_INT 1
16666: ARRAY
16667: PPUSH
16668: CALL 48880 0 2
16672: ST_TO_ADDR
16673: GO 16640
16675: POP
16676: POP
// result := tmp ;
16677: LD_ADDR_VAR 0 5
16681: PUSH
16682: LD_VAR 0 8
16686: ST_TO_ADDR
// end ; end ;
16687: LD_VAR 0 5
16691: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16692: LD_INT 0
16694: PPUSH
16695: PPUSH
16696: PPUSH
16697: PPUSH
// if not list then
16698: LD_VAR 0 3
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 17097
// result := [ ] ;
16707: LD_ADDR_VAR 0 6
16711: PUSH
16712: EMPTY
16713: ST_TO_ADDR
// for i in list do
16714: LD_ADDR_VAR 0 7
16718: PUSH
16719: LD_VAR 0 3
16723: PUSH
16724: FOR_IN
16725: IFFALSE 16927
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16727: LD_ADDR_VAR 0 9
16731: PUSH
16732: LD_VAR 0 7
16736: PPUSH
16737: LD_VAR 0 1
16741: PPUSH
16742: LD_VAR 0 2
16746: PPUSH
16747: CALL_OW 297
16751: ST_TO_ADDR
// if not result then
16752: LD_VAR 0 6
16756: NOT
16757: IFFALSE 16783
// result := [ [ i , tmp ] ] else
16759: LD_ADDR_VAR 0 6
16763: PUSH
16764: LD_VAR 0 7
16768: PUSH
16769: LD_VAR 0 9
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: ST_TO_ADDR
16781: GO 16925
// begin if result [ result ] [ 2 ] <= tmp then
16783: LD_VAR 0 6
16787: PUSH
16788: LD_VAR 0 6
16792: ARRAY
16793: PUSH
16794: LD_INT 2
16796: ARRAY
16797: PUSH
16798: LD_VAR 0 9
16802: LESSEQUAL
16803: IFFALSE 16845
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16805: LD_ADDR_VAR 0 6
16809: PUSH
16810: LD_VAR 0 6
16814: PPUSH
16815: LD_VAR 0 6
16819: PUSH
16820: LD_INT 1
16822: PLUS
16823: PPUSH
16824: LD_VAR 0 7
16828: PUSH
16829: LD_VAR 0 9
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PPUSH
16838: CALL_OW 2
16842: ST_TO_ADDR
16843: GO 16925
// for j := 1 to result do
16845: LD_ADDR_VAR 0 8
16849: PUSH
16850: DOUBLE
16851: LD_INT 1
16853: DEC
16854: ST_TO_ADDR
16855: LD_VAR 0 6
16859: PUSH
16860: FOR_TO
16861: IFFALSE 16923
// begin if tmp < result [ j ] [ 2 ] then
16863: LD_VAR 0 9
16867: PUSH
16868: LD_VAR 0 6
16872: PUSH
16873: LD_VAR 0 8
16877: ARRAY
16878: PUSH
16879: LD_INT 2
16881: ARRAY
16882: LESS
16883: IFFALSE 16921
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16885: LD_ADDR_VAR 0 6
16889: PUSH
16890: LD_VAR 0 6
16894: PPUSH
16895: LD_VAR 0 8
16899: PPUSH
16900: LD_VAR 0 7
16904: PUSH
16905: LD_VAR 0 9
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PPUSH
16914: CALL_OW 2
16918: ST_TO_ADDR
// break ;
16919: GO 16923
// end ; end ;
16921: GO 16860
16923: POP
16924: POP
// end ; end ;
16925: GO 16724
16927: POP
16928: POP
// if result and not asc then
16929: LD_VAR 0 6
16933: IFFALSE 16942
16935: PUSH
16936: LD_VAR 0 4
16940: NOT
16941: AND
16942: IFFALSE 17017
// begin tmp := result ;
16944: LD_ADDR_VAR 0 9
16948: PUSH
16949: LD_VAR 0 6
16953: ST_TO_ADDR
// for i = tmp downto 1 do
16954: LD_ADDR_VAR 0 7
16958: PUSH
16959: DOUBLE
16960: LD_VAR 0 9
16964: INC
16965: ST_TO_ADDR
16966: LD_INT 1
16968: PUSH
16969: FOR_DOWNTO
16970: IFFALSE 17015
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16972: LD_ADDR_VAR 0 6
16976: PUSH
16977: LD_VAR 0 6
16981: PPUSH
16982: LD_VAR 0 9
16986: PUSH
16987: LD_VAR 0 7
16991: MINUS
16992: PUSH
16993: LD_INT 1
16995: PLUS
16996: PPUSH
16997: LD_VAR 0 9
17001: PUSH
17002: LD_VAR 0 7
17006: ARRAY
17007: PPUSH
17008: CALL_OW 1
17012: ST_TO_ADDR
17013: GO 16969
17015: POP
17016: POP
// end ; tmp := [ ] ;
17017: LD_ADDR_VAR 0 9
17021: PUSH
17022: EMPTY
17023: ST_TO_ADDR
// if mode then
17024: LD_VAR 0 5
17028: IFFALSE 17097
// begin for i = 1 to result do
17030: LD_ADDR_VAR 0 7
17034: PUSH
17035: DOUBLE
17036: LD_INT 1
17038: DEC
17039: ST_TO_ADDR
17040: LD_VAR 0 6
17044: PUSH
17045: FOR_TO
17046: IFFALSE 17085
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17048: LD_ADDR_VAR 0 9
17052: PUSH
17053: LD_VAR 0 9
17057: PPUSH
17058: LD_VAR 0 7
17062: PPUSH
17063: LD_VAR 0 6
17067: PUSH
17068: LD_VAR 0 7
17072: ARRAY
17073: PUSH
17074: LD_INT 1
17076: ARRAY
17077: PPUSH
17078: CALL_OW 1
17082: ST_TO_ADDR
17083: GO 17045
17085: POP
17086: POP
// result := tmp ;
17087: LD_ADDR_VAR 0 6
17091: PUSH
17092: LD_VAR 0 9
17096: ST_TO_ADDR
// end ; end ;
17097: LD_VAR 0 6
17101: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17102: LD_INT 0
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
17109: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17110: LD_ADDR_VAR 0 5
17114: PUSH
17115: LD_INT 0
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: EMPTY
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: ST_TO_ADDR
// if not x or not y then
17132: LD_VAR 0 2
17136: NOT
17137: IFTRUE 17146
17139: PUSH
17140: LD_VAR 0 3
17144: NOT
17145: OR
17146: IFFALSE 17150
// exit ;
17148: GO 18806
// if not range then
17150: LD_VAR 0 4
17154: NOT
17155: IFFALSE 17165
// range := 10 ;
17157: LD_ADDR_VAR 0 4
17161: PUSH
17162: LD_INT 10
17164: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17165: LD_ADDR_VAR 0 8
17169: PUSH
17170: LD_INT 81
17172: PUSH
17173: LD_VAR 0 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 92
17184: PUSH
17185: LD_VAR 0 2
17189: PUSH
17190: LD_VAR 0 3
17194: PUSH
17195: LD_VAR 0 4
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 3
17208: PUSH
17209: LD_INT 21
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: ST_TO_ADDR
// if not tmp then
17233: LD_VAR 0 8
17237: NOT
17238: IFFALSE 17242
// exit ;
17240: GO 18806
// for i in tmp do
17242: LD_ADDR_VAR 0 6
17246: PUSH
17247: LD_VAR 0 8
17251: PUSH
17252: FOR_IN
17253: IFFALSE 18781
// begin points := [ 0 , 0 , 0 ] ;
17255: LD_ADDR_VAR 0 9
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: LD_INT 0
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: ST_TO_ADDR
// bpoints := 1 ;
17274: LD_ADDR_VAR 0 10
17278: PUSH
17279: LD_INT 1
17281: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17282: LD_VAR 0 6
17286: PPUSH
17287: CALL_OW 247
17291: PUSH
17292: LD_INT 1
17294: DOUBLE
17295: EQUAL
17296: IFTRUE 17300
17298: GO 17882
17300: POP
// begin if GetClass ( i ) = 1 then
17301: LD_VAR 0 6
17305: PPUSH
17306: CALL_OW 257
17310: PUSH
17311: LD_INT 1
17313: EQUAL
17314: IFFALSE 17335
// points := [ 10 , 5 , 3 ] ;
17316: LD_ADDR_VAR 0 9
17320: PUSH
17321: LD_INT 10
17323: PUSH
17324: LD_INT 5
17326: PUSH
17327: LD_INT 3
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17335: LD_VAR 0 6
17339: PPUSH
17340: CALL_OW 257
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 4
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: IN
17359: IFFALSE 17380
// points := [ 3 , 2 , 1 ] ;
17361: LD_ADDR_VAR 0 9
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 2
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17380: LD_VAR 0 6
17384: PPUSH
17385: CALL_OW 257
17389: PUSH
17390: LD_INT 5
17392: EQUAL
17393: IFFALSE 17414
// points := [ 130 , 5 , 2 ] ;
17395: LD_ADDR_VAR 0 9
17399: PUSH
17400: LD_INT 130
17402: PUSH
17403: LD_INT 5
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17414: LD_VAR 0 6
17418: PPUSH
17419: CALL_OW 257
17423: PUSH
17424: LD_INT 8
17426: EQUAL
17427: IFFALSE 17448
// points := [ 35 , 35 , 30 ] ;
17429: LD_ADDR_VAR 0 9
17433: PUSH
17434: LD_INT 35
17436: PUSH
17437: LD_INT 35
17439: PUSH
17440: LD_INT 30
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17448: LD_VAR 0 6
17452: PPUSH
17453: CALL_OW 257
17457: PUSH
17458: LD_INT 9
17460: EQUAL
17461: IFFALSE 17482
// points := [ 20 , 55 , 40 ] ;
17463: LD_ADDR_VAR 0 9
17467: PUSH
17468: LD_INT 20
17470: PUSH
17471: LD_INT 55
17473: PUSH
17474: LD_INT 40
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: LIST
17481: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17482: LD_VAR 0 6
17486: PPUSH
17487: CALL_OW 257
17491: PUSH
17492: LD_INT 12
17494: PUSH
17495: LD_INT 16
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: IN
17502: IFFALSE 17523
// points := [ 5 , 3 , 2 ] ;
17504: LD_ADDR_VAR 0 9
17508: PUSH
17509: LD_INT 5
17511: PUSH
17512: LD_INT 3
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17523: LD_VAR 0 6
17527: PPUSH
17528: CALL_OW 257
17532: PUSH
17533: LD_INT 17
17535: EQUAL
17536: IFFALSE 17557
// points := [ 100 , 50 , 75 ] ;
17538: LD_ADDR_VAR 0 9
17542: PUSH
17543: LD_INT 100
17545: PUSH
17546: LD_INT 50
17548: PUSH
17549: LD_INT 75
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17557: LD_VAR 0 6
17561: PPUSH
17562: CALL_OW 257
17566: PUSH
17567: LD_INT 15
17569: EQUAL
17570: IFFALSE 17591
// points := [ 10 , 5 , 3 ] ;
17572: LD_ADDR_VAR 0 9
17576: PUSH
17577: LD_INT 10
17579: PUSH
17580: LD_INT 5
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17591: LD_VAR 0 6
17595: PPUSH
17596: CALL_OW 257
17600: PUSH
17601: LD_INT 14
17603: EQUAL
17604: IFFALSE 17625
// points := [ 10 , 0 , 0 ] ;
17606: LD_ADDR_VAR 0 9
17610: PUSH
17611: LD_INT 10
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17625: LD_VAR 0 6
17629: PPUSH
17630: CALL_OW 257
17634: PUSH
17635: LD_INT 11
17637: EQUAL
17638: IFFALSE 17659
// points := [ 30 , 10 , 5 ] ;
17640: LD_ADDR_VAR 0 9
17644: PUSH
17645: LD_INT 30
17647: PUSH
17648: LD_INT 10
17650: PUSH
17651: LD_INT 5
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17659: LD_VAR 0 1
17663: PPUSH
17664: LD_INT 5
17666: PPUSH
17667: CALL_OW 321
17671: PUSH
17672: LD_INT 2
17674: EQUAL
17675: IFFALSE 17692
// bpoints := bpoints * 1.8 ;
17677: LD_ADDR_VAR 0 10
17681: PUSH
17682: LD_VAR 0 10
17686: PUSH
17687: LD_REAL  1.80000000000000E+0000
17690: MUL
17691: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17692: LD_VAR 0 6
17696: PPUSH
17697: CALL_OW 257
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: LD_INT 4
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: IN
17720: IFFALSE 17740
17722: PUSH
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_INT 51
17730: PPUSH
17731: CALL_OW 321
17735: PUSH
17736: LD_INT 2
17738: EQUAL
17739: AND
17740: IFFALSE 17757
// bpoints := bpoints * 1.2 ;
17742: LD_ADDR_VAR 0 10
17746: PUSH
17747: LD_VAR 0 10
17751: PUSH
17752: LD_REAL  1.20000000000000E+0000
17755: MUL
17756: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17757: LD_VAR 0 6
17761: PPUSH
17762: CALL_OW 257
17766: PUSH
17767: LD_INT 5
17769: PUSH
17770: LD_INT 7
17772: PUSH
17773: LD_INT 9
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: IN
17781: IFFALSE 17801
17783: PUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: LD_INT 52
17791: PPUSH
17792: CALL_OW 321
17796: PUSH
17797: LD_INT 2
17799: EQUAL
17800: AND
17801: IFFALSE 17818
// bpoints := bpoints * 1.5 ;
17803: LD_ADDR_VAR 0 10
17807: PUSH
17808: LD_VAR 0 10
17812: PUSH
17813: LD_REAL  1.50000000000000E+0000
17816: MUL
17817: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17818: LD_VAR 0 1
17822: PPUSH
17823: LD_INT 66
17825: PPUSH
17826: CALL_OW 321
17830: PUSH
17831: LD_INT 2
17833: EQUAL
17834: IFFALSE 17851
// bpoints := bpoints * 1.1 ;
17836: LD_ADDR_VAR 0 10
17840: PUSH
17841: LD_VAR 0 10
17845: PUSH
17846: LD_REAL  1.10000000000000E+0000
17849: MUL
17850: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17851: LD_ADDR_VAR 0 10
17855: PUSH
17856: LD_VAR 0 10
17860: PUSH
17861: LD_VAR 0 6
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: CALL_OW 259
17873: PUSH
17874: LD_REAL  1.15000000000000E+0000
17877: MUL
17878: MUL
17879: ST_TO_ADDR
// end ; unit_vehicle :
17880: GO 18710
17882: LD_INT 2
17884: DOUBLE
17885: EQUAL
17886: IFTRUE 17890
17888: GO 18698
17890: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17891: LD_VAR 0 6
17895: PPUSH
17896: CALL_OW 264
17900: PUSH
17901: LD_INT 2
17903: PUSH
17904: LD_INT 42
17906: PUSH
17907: LD_INT 24
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: LIST
17914: IN
17915: IFFALSE 17936
// points := [ 25 , 5 , 3 ] ;
17917: LD_ADDR_VAR 0 9
17921: PUSH
17922: LD_INT 25
17924: PUSH
17925: LD_INT 5
17927: PUSH
17928: LD_INT 3
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17936: LD_VAR 0 6
17940: PPUSH
17941: CALL_OW 264
17945: PUSH
17946: LD_INT 4
17948: PUSH
17949: LD_INT 43
17951: PUSH
17952: LD_INT 25
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: IN
17960: IFFALSE 17981
// points := [ 40 , 15 , 5 ] ;
17962: LD_ADDR_VAR 0 9
17966: PUSH
17967: LD_INT 40
17969: PUSH
17970: LD_INT 15
17972: PUSH
17973: LD_INT 5
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17981: LD_VAR 0 6
17985: PPUSH
17986: CALL_OW 264
17990: PUSH
17991: LD_INT 3
17993: PUSH
17994: LD_INT 23
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: IN
18001: IFFALSE 18022
// points := [ 7 , 25 , 8 ] ;
18003: LD_ADDR_VAR 0 9
18007: PUSH
18008: LD_INT 7
18010: PUSH
18011: LD_INT 25
18013: PUSH
18014: LD_INT 8
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18022: LD_VAR 0 6
18026: PPUSH
18027: CALL_OW 264
18031: PUSH
18032: LD_INT 5
18034: PUSH
18035: LD_INT 27
18037: PUSH
18038: LD_INT 44
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: IN
18046: IFFALSE 18067
// points := [ 14 , 50 , 16 ] ;
18048: LD_ADDR_VAR 0 9
18052: PUSH
18053: LD_INT 14
18055: PUSH
18056: LD_INT 50
18058: PUSH
18059: LD_INT 16
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: LIST
18066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18067: LD_VAR 0 6
18071: PPUSH
18072: CALL_OW 264
18076: PUSH
18077: LD_INT 6
18079: PUSH
18080: LD_INT 46
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: IN
18087: IFFALSE 18108
// points := [ 32 , 120 , 70 ] ;
18089: LD_ADDR_VAR 0 9
18093: PUSH
18094: LD_INT 32
18096: PUSH
18097: LD_INT 120
18099: PUSH
18100: LD_INT 70
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18108: LD_VAR 0 6
18112: PPUSH
18113: CALL_OW 264
18117: PUSH
18118: LD_INT 7
18120: PUSH
18121: LD_INT 28
18123: PUSH
18124: LD_INT 45
18126: PUSH
18127: LD_INT 92
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: IN
18136: IFFALSE 18157
// points := [ 35 , 20 , 45 ] ;
18138: LD_ADDR_VAR 0 9
18142: PUSH
18143: LD_INT 35
18145: PUSH
18146: LD_INT 20
18148: PUSH
18149: LD_INT 45
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18157: LD_VAR 0 6
18161: PPUSH
18162: CALL_OW 264
18166: PUSH
18167: LD_INT 47
18169: PUSH
18170: EMPTY
18171: LIST
18172: IN
18173: IFFALSE 18194
// points := [ 67 , 45 , 75 ] ;
18175: LD_ADDR_VAR 0 9
18179: PUSH
18180: LD_INT 67
18182: PUSH
18183: LD_INT 45
18185: PUSH
18186: LD_INT 75
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18194: LD_VAR 0 6
18198: PPUSH
18199: CALL_OW 264
18203: PUSH
18204: LD_INT 26
18206: PUSH
18207: EMPTY
18208: LIST
18209: IN
18210: IFFALSE 18231
// points := [ 120 , 30 , 80 ] ;
18212: LD_ADDR_VAR 0 9
18216: PUSH
18217: LD_INT 120
18219: PUSH
18220: LD_INT 30
18222: PUSH
18223: LD_INT 80
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18231: LD_VAR 0 6
18235: PPUSH
18236: CALL_OW 264
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: EMPTY
18245: LIST
18246: IN
18247: IFFALSE 18268
// points := [ 40 , 1 , 1 ] ;
18249: LD_ADDR_VAR 0 9
18253: PUSH
18254: LD_INT 40
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18268: LD_VAR 0 6
18272: PPUSH
18273: CALL_OW 264
18277: PUSH
18278: LD_INT 29
18280: PUSH
18281: EMPTY
18282: LIST
18283: IN
18284: IFFALSE 18305
// points := [ 70 , 200 , 400 ] ;
18286: LD_ADDR_VAR 0 9
18290: PUSH
18291: LD_INT 70
18293: PUSH
18294: LD_INT 200
18296: PUSH
18297: LD_INT 400
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18305: LD_VAR 0 6
18309: PPUSH
18310: CALL_OW 264
18314: PUSH
18315: LD_INT 14
18317: PUSH
18318: LD_INT 53
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: IN
18325: IFFALSE 18346
// points := [ 40 , 10 , 20 ] ;
18327: LD_ADDR_VAR 0 9
18331: PUSH
18332: LD_INT 40
18334: PUSH
18335: LD_INT 10
18337: PUSH
18338: LD_INT 20
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18346: LD_VAR 0 6
18350: PPUSH
18351: CALL_OW 264
18355: PUSH
18356: LD_INT 9
18358: PUSH
18359: EMPTY
18360: LIST
18361: IN
18362: IFFALSE 18383
// points := [ 5 , 70 , 20 ] ;
18364: LD_ADDR_VAR 0 9
18368: PUSH
18369: LD_INT 5
18371: PUSH
18372: LD_INT 70
18374: PUSH
18375: LD_INT 20
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18383: LD_VAR 0 6
18387: PPUSH
18388: CALL_OW 264
18392: PUSH
18393: LD_INT 10
18395: PUSH
18396: EMPTY
18397: LIST
18398: IN
18399: IFFALSE 18420
// points := [ 35 , 110 , 70 ] ;
18401: LD_ADDR_VAR 0 9
18405: PUSH
18406: LD_INT 35
18408: PUSH
18409: LD_INT 110
18411: PUSH
18412: LD_INT 70
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: LIST
18419: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18420: LD_VAR 0 6
18424: PPUSH
18425: CALL_OW 265
18429: PUSH
18430: LD_INT 25
18432: EQUAL
18433: IFFALSE 18454
// points := [ 80 , 65 , 100 ] ;
18435: LD_ADDR_VAR 0 9
18439: PUSH
18440: LD_INT 80
18442: PUSH
18443: LD_INT 65
18445: PUSH
18446: LD_INT 100
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: LIST
18453: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18454: LD_VAR 0 6
18458: PPUSH
18459: CALL_OW 263
18463: PUSH
18464: LD_INT 1
18466: EQUAL
18467: IFFALSE 18502
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18469: LD_ADDR_VAR 0 10
18473: PUSH
18474: LD_VAR 0 10
18478: PUSH
18479: LD_VAR 0 6
18483: PPUSH
18484: CALL_OW 311
18488: PPUSH
18489: LD_INT 3
18491: PPUSH
18492: CALL_OW 259
18496: PUSH
18497: LD_INT 4
18499: MUL
18500: MUL
18501: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18502: LD_VAR 0 6
18506: PPUSH
18507: CALL_OW 263
18511: PUSH
18512: LD_INT 2
18514: EQUAL
18515: IFFALSE 18566
// begin j := IsControledBy ( i ) ;
18517: LD_ADDR_VAR 0 7
18521: PUSH
18522: LD_VAR 0 6
18526: PPUSH
18527: CALL_OW 312
18531: ST_TO_ADDR
// if j then
18532: LD_VAR 0 7
18536: IFFALSE 18566
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18538: LD_ADDR_VAR 0 10
18542: PUSH
18543: LD_VAR 0 10
18547: PUSH
18548: LD_VAR 0 7
18552: PPUSH
18553: LD_INT 3
18555: PPUSH
18556: CALL_OW 259
18560: PUSH
18561: LD_INT 3
18563: MUL
18564: MUL
18565: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18566: LD_VAR 0 6
18570: PPUSH
18571: CALL_OW 264
18575: PUSH
18576: LD_INT 5
18578: PUSH
18579: LD_INT 6
18581: PUSH
18582: LD_INT 46
18584: PUSH
18585: LD_INT 44
18587: PUSH
18588: LD_INT 47
18590: PUSH
18591: LD_INT 45
18593: PUSH
18594: LD_INT 28
18596: PUSH
18597: LD_INT 7
18599: PUSH
18600: LD_INT 27
18602: PUSH
18603: LD_INT 29
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: IN
18618: IFFALSE 18638
18620: PUSH
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_INT 52
18628: PPUSH
18629: CALL_OW 321
18633: PUSH
18634: LD_INT 2
18636: EQUAL
18637: AND
18638: IFFALSE 18655
// bpoints := bpoints * 1.2 ;
18640: LD_ADDR_VAR 0 10
18644: PUSH
18645: LD_VAR 0 10
18649: PUSH
18650: LD_REAL  1.20000000000000E+0000
18653: MUL
18654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18655: LD_VAR 0 6
18659: PPUSH
18660: CALL_OW 264
18664: PUSH
18665: LD_INT 6
18667: PUSH
18668: LD_INT 46
18670: PUSH
18671: LD_INT 47
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: LIST
18678: IN
18679: IFFALSE 18696
// bpoints := bpoints * 1.2 ;
18681: LD_ADDR_VAR 0 10
18685: PUSH
18686: LD_VAR 0 10
18690: PUSH
18691: LD_REAL  1.20000000000000E+0000
18694: MUL
18695: ST_TO_ADDR
// end ; unit_building :
18696: GO 18710
18698: LD_INT 3
18700: DOUBLE
18701: EQUAL
18702: IFTRUE 18706
18704: GO 18709
18706: POP
// ; end ;
18707: GO 18710
18709: POP
// for j = 1 to 3 do
18710: LD_ADDR_VAR 0 7
18714: PUSH
18715: DOUBLE
18716: LD_INT 1
18718: DEC
18719: ST_TO_ADDR
18720: LD_INT 3
18722: PUSH
18723: FOR_TO
18724: IFFALSE 18777
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18726: LD_ADDR_VAR 0 5
18730: PUSH
18731: LD_VAR 0 5
18735: PPUSH
18736: LD_VAR 0 7
18740: PPUSH
18741: LD_VAR 0 5
18745: PUSH
18746: LD_VAR 0 7
18750: ARRAY
18751: PUSH
18752: LD_VAR 0 9
18756: PUSH
18757: LD_VAR 0 7
18761: ARRAY
18762: PUSH
18763: LD_VAR 0 10
18767: MUL
18768: PLUS
18769: PPUSH
18770: CALL_OW 1
18774: ST_TO_ADDR
18775: GO 18723
18777: POP
18778: POP
// end ;
18779: GO 17252
18781: POP
18782: POP
// result := Replace ( result , 4 , tmp ) ;
18783: LD_ADDR_VAR 0 5
18787: PUSH
18788: LD_VAR 0 5
18792: PPUSH
18793: LD_INT 4
18795: PPUSH
18796: LD_VAR 0 8
18800: PPUSH
18801: CALL_OW 1
18805: ST_TO_ADDR
// end ;
18806: LD_VAR 0 5
18810: RET
// export function DangerAtRange ( unit , range ) ; begin
18811: LD_INT 0
18813: PPUSH
// if not unit then
18814: LD_VAR 0 1
18818: NOT
18819: IFFALSE 18823
// exit ;
18821: GO 18868
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18823: LD_ADDR_VAR 0 3
18827: PUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 255
18837: PPUSH
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL_OW 250
18847: PPUSH
18848: LD_VAR 0 1
18852: PPUSH
18853: CALL_OW 251
18857: PPUSH
18858: LD_VAR 0 2
18862: PPUSH
18863: CALL 17102 0 4
18867: ST_TO_ADDR
// end ;
18868: LD_VAR 0 3
18872: RET
// export function DangerInArea ( side , area ) ; begin
18873: LD_INT 0
18875: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18876: LD_ADDR_VAR 0 3
18880: PUSH
18881: LD_VAR 0 2
18885: PPUSH
18886: LD_INT 81
18888: PUSH
18889: LD_VAR 0 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PPUSH
18898: CALL_OW 70
18902: ST_TO_ADDR
// end ;
18903: LD_VAR 0 3
18907: RET
// export function IsExtension ( b ) ; begin
18908: LD_INT 0
18910: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18911: LD_ADDR_VAR 0 2
18915: PUSH
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 23
18923: PUSH
18924: LD_INT 20
18926: PUSH
18927: LD_INT 22
18929: PUSH
18930: LD_INT 17
18932: PUSH
18933: LD_INT 24
18935: PUSH
18936: LD_INT 21
18938: PUSH
18939: LD_INT 19
18941: PUSH
18942: LD_INT 16
18944: PUSH
18945: LD_INT 25
18947: PUSH
18948: LD_INT 18
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: IN
18963: ST_TO_ADDR
// end ;
18964: LD_VAR 0 2
18968: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18969: LD_INT 0
18971: PPUSH
18972: PPUSH
18973: PPUSH
// result := [ ] ;
18974: LD_ADDR_VAR 0 4
18978: PUSH
18979: EMPTY
18980: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18981: LD_ADDR_VAR 0 5
18985: PUSH
18986: LD_VAR 0 2
18990: PPUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 3
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PPUSH
19001: CALL_OW 70
19005: ST_TO_ADDR
// if not tmp then
19006: LD_VAR 0 5
19010: NOT
19011: IFFALSE 19015
// exit ;
19013: GO 19079
// if checkLink then
19015: LD_VAR 0 3
19019: IFFALSE 19069
// begin for i in tmp do
19021: LD_ADDR_VAR 0 6
19025: PUSH
19026: LD_VAR 0 5
19030: PUSH
19031: FOR_IN
19032: IFFALSE 19067
// if GetBase ( i ) <> base then
19034: LD_VAR 0 6
19038: PPUSH
19039: CALL_OW 274
19043: PUSH
19044: LD_VAR 0 1
19048: NONEQUAL
19049: IFFALSE 19065
// ComLinkToBase ( base , i ) ;
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_VAR 0 6
19060: PPUSH
19061: CALL_OW 169
19065: GO 19031
19067: POP
19068: POP
// end ; result := tmp ;
19069: LD_ADDR_VAR 0 4
19073: PUSH
19074: LD_VAR 0 5
19078: ST_TO_ADDR
// end ;
19079: LD_VAR 0 4
19083: RET
// export function ComComplete ( units , b ) ; var i ; begin
19084: LD_INT 0
19086: PPUSH
19087: PPUSH
// if not units then
19088: LD_VAR 0 1
19092: NOT
19093: IFFALSE 19097
// exit ;
19095: GO 19187
// for i in units do
19097: LD_ADDR_VAR 0 4
19101: PUSH
19102: LD_VAR 0 1
19106: PUSH
19107: FOR_IN
19108: IFFALSE 19185
// if BuildingStatus ( b ) = bs_build then
19110: LD_VAR 0 2
19114: PPUSH
19115: CALL_OW 461
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: IFFALSE 19183
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19125: LD_VAR 0 4
19129: PPUSH
19130: LD_STRING h
19132: PUSH
19133: LD_VAR 0 2
19137: PPUSH
19138: CALL_OW 250
19142: PUSH
19143: LD_VAR 0 2
19147: PPUSH
19148: CALL_OW 251
19152: PUSH
19153: LD_VAR 0 2
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: LD_INT 0
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: PUSH
19176: EMPTY
19177: LIST
19178: PPUSH
19179: CALL_OW 446
19183: GO 19107
19185: POP
19186: POP
// end ;
19187: LD_VAR 0 3
19191: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19192: LD_INT 0
19194: PPUSH
19195: PPUSH
19196: PPUSH
19197: PPUSH
19198: PPUSH
19199: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19200: LD_VAR 0 1
19204: NOT
19205: IFTRUE 19222
19207: PUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 263
19217: PUSH
19218: LD_INT 2
19220: NONEQUAL
19221: OR
19222: IFFALSE 19226
// exit ;
19224: GO 19542
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19226: LD_ADDR_VAR 0 6
19230: PUSH
19231: LD_INT 22
19233: PUSH
19234: LD_VAR 0 1
19238: PPUSH
19239: CALL_OW 255
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: LD_INT 30
19253: PUSH
19254: LD_INT 36
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 34
19263: PUSH
19264: LD_INT 31
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PPUSH
19280: CALL_OW 69
19284: ST_TO_ADDR
// if not tmp then
19285: LD_VAR 0 6
19289: NOT
19290: IFFALSE 19294
// exit ;
19292: GO 19542
// result := [ ] ;
19294: LD_ADDR_VAR 0 2
19298: PUSH
19299: EMPTY
19300: ST_TO_ADDR
// for i in tmp do
19301: LD_ADDR_VAR 0 3
19305: PUSH
19306: LD_VAR 0 6
19310: PUSH
19311: FOR_IN
19312: IFFALSE 19383
// begin t := UnitsInside ( i ) ;
19314: LD_ADDR_VAR 0 4
19318: PUSH
19319: LD_VAR 0 3
19323: PPUSH
19324: CALL_OW 313
19328: ST_TO_ADDR
// if t then
19329: LD_VAR 0 4
19333: IFFALSE 19381
// for j in t do
19335: LD_ADDR_VAR 0 7
19339: PUSH
19340: LD_VAR 0 4
19344: PUSH
19345: FOR_IN
19346: IFFALSE 19379
// result := Replace ( result , result + 1 , j ) ;
19348: LD_ADDR_VAR 0 2
19352: PUSH
19353: LD_VAR 0 2
19357: PPUSH
19358: LD_VAR 0 2
19362: PUSH
19363: LD_INT 1
19365: PLUS
19366: PPUSH
19367: LD_VAR 0 7
19371: PPUSH
19372: CALL_OW 1
19376: ST_TO_ADDR
19377: GO 19345
19379: POP
19380: POP
// end ;
19381: GO 19311
19383: POP
19384: POP
// if not result then
19385: LD_VAR 0 2
19389: NOT
19390: IFFALSE 19394
// exit ;
19392: GO 19542
// mech := result [ 1 ] ;
19394: LD_ADDR_VAR 0 5
19398: PUSH
19399: LD_VAR 0 2
19403: PUSH
19404: LD_INT 1
19406: ARRAY
19407: ST_TO_ADDR
// if result > 1 then
19408: LD_VAR 0 2
19412: PUSH
19413: LD_INT 1
19415: GREATER
19416: IFFALSE 19528
// begin for i = 2 to result do
19418: LD_ADDR_VAR 0 3
19422: PUSH
19423: DOUBLE
19424: LD_INT 2
19426: DEC
19427: ST_TO_ADDR
19428: LD_VAR 0 2
19432: PUSH
19433: FOR_TO
19434: IFFALSE 19526
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19436: LD_ADDR_VAR 0 4
19440: PUSH
19441: LD_VAR 0 2
19445: PUSH
19446: LD_VAR 0 3
19450: ARRAY
19451: PPUSH
19452: LD_INT 3
19454: PPUSH
19455: CALL_OW 259
19459: PUSH
19460: LD_VAR 0 2
19464: PUSH
19465: LD_VAR 0 3
19469: ARRAY
19470: PPUSH
19471: CALL_OW 432
19475: MINUS
19476: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19477: LD_VAR 0 4
19481: PUSH
19482: LD_VAR 0 5
19486: PPUSH
19487: LD_INT 3
19489: PPUSH
19490: CALL_OW 259
19494: PUSH
19495: LD_VAR 0 5
19499: PPUSH
19500: CALL_OW 432
19504: MINUS
19505: GREATEREQUAL
19506: IFFALSE 19524
// mech := result [ i ] ;
19508: LD_ADDR_VAR 0 5
19512: PUSH
19513: LD_VAR 0 2
19517: PUSH
19518: LD_VAR 0 3
19522: ARRAY
19523: ST_TO_ADDR
// end ;
19524: GO 19433
19526: POP
19527: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19528: LD_VAR 0 1
19532: PPUSH
19533: LD_VAR 0 5
19537: PPUSH
19538: CALL_OW 135
// end ;
19542: LD_VAR 0 2
19546: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19547: LD_INT 0
19549: PPUSH
19550: PPUSH
19551: PPUSH
19552: PPUSH
19553: PPUSH
19554: PPUSH
19555: PPUSH
19556: PPUSH
19557: PPUSH
19558: PPUSH
19559: PPUSH
19560: PPUSH
19561: PPUSH
// result := [ ] ;
19562: LD_ADDR_VAR 0 7
19566: PUSH
19567: EMPTY
19568: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19569: LD_VAR 0 1
19573: PPUSH
19574: CALL_OW 266
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: IN
19589: NOT
19590: IFFALSE 19594
// exit ;
19592: GO 21234
// if name then
19594: LD_VAR 0 3
19598: IFFALSE 19614
// SetBName ( base_dep , name ) ;
19600: LD_VAR 0 1
19604: PPUSH
19605: LD_VAR 0 3
19609: PPUSH
19610: CALL_OW 500
// base := GetBase ( base_dep ) ;
19614: LD_ADDR_VAR 0 15
19618: PUSH
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 274
19628: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19629: LD_ADDR_VAR 0 16
19633: PUSH
19634: LD_VAR 0 1
19638: PPUSH
19639: CALL_OW 255
19643: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19644: LD_ADDR_VAR 0 17
19648: PUSH
19649: LD_VAR 0 1
19653: PPUSH
19654: CALL_OW 248
19658: ST_TO_ADDR
// if sources then
19659: LD_VAR 0 5
19663: IFFALSE 19710
// for i = 1 to 3 do
19665: LD_ADDR_VAR 0 8
19669: PUSH
19670: DOUBLE
19671: LD_INT 1
19673: DEC
19674: ST_TO_ADDR
19675: LD_INT 3
19677: PUSH
19678: FOR_TO
19679: IFFALSE 19708
// AddResourceType ( base , i , sources [ i ] ) ;
19681: LD_VAR 0 15
19685: PPUSH
19686: LD_VAR 0 8
19690: PPUSH
19691: LD_VAR 0 5
19695: PUSH
19696: LD_VAR 0 8
19700: ARRAY
19701: PPUSH
19702: CALL_OW 276
19706: GO 19678
19708: POP
19709: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19710: LD_ADDR_VAR 0 18
19714: PUSH
19715: LD_VAR 0 15
19719: PPUSH
19720: LD_VAR 0 2
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: CALL 18969 0 3
19732: ST_TO_ADDR
// InitHc ;
19733: CALL_OW 19
// InitUc ;
19737: CALL_OW 18
// uc_side := side ;
19741: LD_ADDR_OWVAR 20
19745: PUSH
19746: LD_VAR 0 16
19750: ST_TO_ADDR
// uc_nation := nation ;
19751: LD_ADDR_OWVAR 21
19755: PUSH
19756: LD_VAR 0 17
19760: ST_TO_ADDR
// if buildings then
19761: LD_VAR 0 18
19765: IFFALSE 21093
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19767: LD_ADDR_VAR 0 19
19771: PUSH
19772: LD_VAR 0 18
19776: PPUSH
19777: LD_INT 2
19779: PUSH
19780: LD_INT 30
19782: PUSH
19783: LD_INT 29
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 30
19792: PUSH
19793: LD_INT 30
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: PPUSH
19805: CALL_OW 72
19809: ST_TO_ADDR
// if tmp then
19810: LD_VAR 0 19
19814: IFFALSE 19862
// for i in tmp do
19816: LD_ADDR_VAR 0 8
19820: PUSH
19821: LD_VAR 0 19
19825: PUSH
19826: FOR_IN
19827: IFFALSE 19860
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19829: LD_VAR 0 8
19833: PPUSH
19834: CALL_OW 250
19838: PPUSH
19839: LD_VAR 0 8
19843: PPUSH
19844: CALL_OW 251
19848: PPUSH
19849: LD_VAR 0 16
19853: PPUSH
19854: CALL_OW 441
19858: GO 19826
19860: POP
19861: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19862: LD_VAR 0 18
19866: PPUSH
19867: LD_INT 2
19869: PUSH
19870: LD_INT 30
19872: PUSH
19873: LD_INT 32
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 30
19882: PUSH
19883: LD_INT 33
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: PPUSH
19895: CALL_OW 72
19899: IFFALSE 19987
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19901: LD_ADDR_VAR 0 8
19905: PUSH
19906: LD_VAR 0 18
19910: PPUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 30
19916: PUSH
19917: LD_INT 32
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: LD_INT 33
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: PPUSH
19939: CALL_OW 72
19943: PUSH
19944: FOR_IN
19945: IFFALSE 19985
// begin if not GetBWeapon ( i ) then
19947: LD_VAR 0 8
19951: PPUSH
19952: CALL_OW 269
19956: NOT
19957: IFFALSE 19983
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19959: LD_VAR 0 8
19963: PPUSH
19964: LD_VAR 0 8
19968: PPUSH
19969: LD_VAR 0 2
19973: PPUSH
19974: CALL 21239 0 2
19978: PPUSH
19979: CALL_OW 431
// end ;
19983: GO 19944
19985: POP
19986: POP
// end ; for i = 1 to personel do
19987: LD_ADDR_VAR 0 8
19991: PUSH
19992: DOUBLE
19993: LD_INT 1
19995: DEC
19996: ST_TO_ADDR
19997: LD_VAR 0 6
20001: PUSH
20002: FOR_TO
20003: IFFALSE 21073
// begin if i > 4 then
20005: LD_VAR 0 8
20009: PUSH
20010: LD_INT 4
20012: GREATER
20013: IFFALSE 20017
// break ;
20015: GO 21073
// case i of 1 :
20017: LD_VAR 0 8
20021: PUSH
20022: LD_INT 1
20024: DOUBLE
20025: EQUAL
20026: IFTRUE 20030
20028: GO 20110
20030: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20031: LD_ADDR_VAR 0 12
20035: PUSH
20036: LD_VAR 0 18
20040: PPUSH
20041: LD_INT 22
20043: PUSH
20044: LD_VAR 0 16
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 58
20055: PUSH
20056: EMPTY
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 30
20064: PUSH
20065: LD_INT 32
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 30
20074: PUSH
20075: LD_INT 4
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 30
20084: PUSH
20085: LD_INT 5
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 72
20107: ST_TO_ADDR
20108: GO 20332
20110: LD_INT 2
20112: DOUBLE
20113: EQUAL
20114: IFTRUE 20118
20116: GO 20180
20118: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20119: LD_ADDR_VAR 0 12
20123: PUSH
20124: LD_VAR 0 18
20128: PPUSH
20129: LD_INT 22
20131: PUSH
20132: LD_VAR 0 16
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 30
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 30
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PPUSH
20173: CALL_OW 72
20177: ST_TO_ADDR
20178: GO 20332
20180: LD_INT 3
20182: DOUBLE
20183: EQUAL
20184: IFTRUE 20188
20186: GO 20250
20188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20189: LD_ADDR_VAR 0 12
20193: PUSH
20194: LD_VAR 0 18
20198: PPUSH
20199: LD_INT 22
20201: PUSH
20202: LD_VAR 0 16
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 2
20213: PUSH
20214: LD_INT 30
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 30
20226: PUSH
20227: LD_INT 3
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PPUSH
20243: CALL_OW 72
20247: ST_TO_ADDR
20248: GO 20332
20250: LD_INT 4
20252: DOUBLE
20253: EQUAL
20254: IFTRUE 20258
20256: GO 20331
20258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20259: LD_ADDR_VAR 0 12
20263: PUSH
20264: LD_VAR 0 18
20268: PPUSH
20269: LD_INT 22
20271: PUSH
20272: LD_VAR 0 16
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 30
20286: PUSH
20287: LD_INT 6
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 30
20296: PUSH
20297: LD_INT 7
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 30
20306: PUSH
20307: LD_INT 8
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PPUSH
20324: CALL_OW 72
20328: ST_TO_ADDR
20329: GO 20332
20331: POP
// if i = 1 then
20332: LD_VAR 0 8
20336: PUSH
20337: LD_INT 1
20339: EQUAL
20340: IFFALSE 20451
// begin tmp := [ ] ;
20342: LD_ADDR_VAR 0 19
20346: PUSH
20347: EMPTY
20348: ST_TO_ADDR
// for j in f do
20349: LD_ADDR_VAR 0 9
20353: PUSH
20354: LD_VAR 0 12
20358: PUSH
20359: FOR_IN
20360: IFFALSE 20433
// if GetBType ( j ) = b_bunker then
20362: LD_VAR 0 9
20366: PPUSH
20367: CALL_OW 266
20371: PUSH
20372: LD_INT 32
20374: EQUAL
20375: IFFALSE 20402
// tmp := Insert ( tmp , 1 , j ) else
20377: LD_ADDR_VAR 0 19
20381: PUSH
20382: LD_VAR 0 19
20386: PPUSH
20387: LD_INT 1
20389: PPUSH
20390: LD_VAR 0 9
20394: PPUSH
20395: CALL_OW 2
20399: ST_TO_ADDR
20400: GO 20431
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20402: LD_ADDR_VAR 0 19
20406: PUSH
20407: LD_VAR 0 19
20411: PPUSH
20412: LD_VAR 0 19
20416: PUSH
20417: LD_INT 1
20419: PLUS
20420: PPUSH
20421: LD_VAR 0 9
20425: PPUSH
20426: CALL_OW 2
20430: ST_TO_ADDR
20431: GO 20359
20433: POP
20434: POP
// if tmp then
20435: LD_VAR 0 19
20439: IFFALSE 20451
// f := tmp ;
20441: LD_ADDR_VAR 0 12
20445: PUSH
20446: LD_VAR 0 19
20450: ST_TO_ADDR
// end ; x := personel [ i ] ;
20451: LD_ADDR_VAR 0 13
20455: PUSH
20456: LD_VAR 0 6
20460: PUSH
20461: LD_VAR 0 8
20465: ARRAY
20466: ST_TO_ADDR
// if x = - 1 then
20467: LD_VAR 0 13
20471: PUSH
20472: LD_INT 1
20474: NEG
20475: EQUAL
20476: IFFALSE 20687
// begin for j in f do
20478: LD_ADDR_VAR 0 9
20482: PUSH
20483: LD_VAR 0 12
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20683
// repeat InitHc ;
20491: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20495: LD_VAR 0 9
20499: PPUSH
20500: CALL_OW 266
20504: PUSH
20505: LD_INT 5
20507: EQUAL
20508: IFFALSE 20578
// begin if UnitsInside ( j ) < 3 then
20510: LD_VAR 0 9
20514: PPUSH
20515: CALL_OW 313
20519: PUSH
20520: LD_INT 3
20522: LESS
20523: IFFALSE 20559
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20525: LD_INT 0
20527: PPUSH
20528: LD_INT 5
20530: PUSH
20531: LD_INT 8
20533: PUSH
20534: LD_INT 9
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: LD_VAR 0 17
20546: ARRAY
20547: PPUSH
20548: LD_VAR 0 4
20552: PPUSH
20553: CALL_OW 380
20557: GO 20576
// PrepareHuman ( false , i , skill ) ;
20559: LD_INT 0
20561: PPUSH
20562: LD_VAR 0 8
20566: PPUSH
20567: LD_VAR 0 4
20571: PPUSH
20572: CALL_OW 380
// end else
20576: GO 20595
// PrepareHuman ( false , i , skill ) ;
20578: LD_INT 0
20580: PPUSH
20581: LD_VAR 0 8
20585: PPUSH
20586: LD_VAR 0 4
20590: PPUSH
20591: CALL_OW 380
// un := CreateHuman ;
20595: LD_ADDR_VAR 0 14
20599: PUSH
20600: CALL_OW 44
20604: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20605: LD_ADDR_VAR 0 7
20609: PUSH
20610: LD_VAR 0 7
20614: PPUSH
20615: LD_INT 1
20617: PPUSH
20618: LD_VAR 0 14
20622: PPUSH
20623: CALL_OW 2
20627: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20628: LD_VAR 0 14
20632: PPUSH
20633: LD_VAR 0 9
20637: PPUSH
20638: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20642: LD_VAR 0 9
20646: PPUSH
20647: CALL_OW 313
20651: PUSH
20652: LD_INT 6
20654: EQUAL
20655: IFTRUE 20679
20657: PUSH
20658: LD_VAR 0 9
20662: PPUSH
20663: CALL_OW 266
20667: PUSH
20668: LD_INT 32
20670: PUSH
20671: LD_INT 31
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: IN
20678: OR
20679: IFFALSE 20491
20681: GO 20488
20683: POP
20684: POP
// end else
20685: GO 21071
// for j = 1 to x do
20687: LD_ADDR_VAR 0 9
20691: PUSH
20692: DOUBLE
20693: LD_INT 1
20695: DEC
20696: ST_TO_ADDR
20697: LD_VAR 0 13
20701: PUSH
20702: FOR_TO
20703: IFFALSE 21069
// begin InitHc ;
20705: CALL_OW 19
// if not f then
20709: LD_VAR 0 12
20713: NOT
20714: IFFALSE 20803
// begin PrepareHuman ( false , i , skill ) ;
20716: LD_INT 0
20718: PPUSH
20719: LD_VAR 0 8
20723: PPUSH
20724: LD_VAR 0 4
20728: PPUSH
20729: CALL_OW 380
// un := CreateHuman ;
20733: LD_ADDR_VAR 0 14
20737: PUSH
20738: CALL_OW 44
20742: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20743: LD_ADDR_VAR 0 7
20747: PUSH
20748: LD_VAR 0 7
20752: PPUSH
20753: LD_INT 1
20755: PPUSH
20756: LD_VAR 0 14
20760: PPUSH
20761: CALL_OW 2
20765: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20766: LD_VAR 0 14
20770: PPUSH
20771: LD_VAR 0 1
20775: PPUSH
20776: CALL_OW 250
20780: PPUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: CALL_OW 251
20790: PPUSH
20791: LD_INT 10
20793: PPUSH
20794: LD_INT 0
20796: PPUSH
20797: CALL_OW 50
// continue ;
20801: GO 20702
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20803: LD_VAR 0 12
20807: PUSH
20808: LD_INT 1
20810: ARRAY
20811: PPUSH
20812: CALL_OW 313
20816: IFFALSE 20844
20818: PUSH
20819: LD_VAR 0 12
20823: PUSH
20824: LD_INT 1
20826: ARRAY
20827: PPUSH
20828: CALL_OW 266
20832: PUSH
20833: LD_INT 32
20835: PUSH
20836: LD_INT 31
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: IN
20843: AND
20844: IFTRUE 20865
20846: PUSH
20847: LD_VAR 0 12
20851: PUSH
20852: LD_INT 1
20854: ARRAY
20855: PPUSH
20856: CALL_OW 313
20860: PUSH
20861: LD_INT 6
20863: EQUAL
20864: OR
20865: IFFALSE 20885
// f := Delete ( f , 1 ) ;
20867: LD_ADDR_VAR 0 12
20871: PUSH
20872: LD_VAR 0 12
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 3
20884: ST_TO_ADDR
// if not f then
20885: LD_VAR 0 12
20889: NOT
20890: IFFALSE 20908
// begin x := x + 2 ;
20892: LD_ADDR_VAR 0 13
20896: PUSH
20897: LD_VAR 0 13
20901: PUSH
20902: LD_INT 2
20904: PLUS
20905: ST_TO_ADDR
// continue ;
20906: GO 20702
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20908: LD_VAR 0 12
20912: PUSH
20913: LD_INT 1
20915: ARRAY
20916: PPUSH
20917: CALL_OW 266
20921: PUSH
20922: LD_INT 5
20924: EQUAL
20925: IFFALSE 20999
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20927: LD_VAR 0 12
20931: PUSH
20932: LD_INT 1
20934: ARRAY
20935: PPUSH
20936: CALL_OW 313
20940: PUSH
20941: LD_INT 3
20943: LESS
20944: IFFALSE 20980
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20946: LD_INT 0
20948: PPUSH
20949: LD_INT 5
20951: PUSH
20952: LD_INT 8
20954: PUSH
20955: LD_INT 9
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: LD_VAR 0 17
20967: ARRAY
20968: PPUSH
20969: LD_VAR 0 4
20973: PPUSH
20974: CALL_OW 380
20978: GO 20997
// PrepareHuman ( false , i , skill ) ;
20980: LD_INT 0
20982: PPUSH
20983: LD_VAR 0 8
20987: PPUSH
20988: LD_VAR 0 4
20992: PPUSH
20993: CALL_OW 380
// end else
20997: GO 21016
// PrepareHuman ( false , i , skill ) ;
20999: LD_INT 0
21001: PPUSH
21002: LD_VAR 0 8
21006: PPUSH
21007: LD_VAR 0 4
21011: PPUSH
21012: CALL_OW 380
// un := CreateHuman ;
21016: LD_ADDR_VAR 0 14
21020: PUSH
21021: CALL_OW 44
21025: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21026: LD_ADDR_VAR 0 7
21030: PUSH
21031: LD_VAR 0 7
21035: PPUSH
21036: LD_INT 1
21038: PPUSH
21039: LD_VAR 0 14
21043: PPUSH
21044: CALL_OW 2
21048: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21049: LD_VAR 0 14
21053: PPUSH
21054: LD_VAR 0 12
21058: PUSH
21059: LD_INT 1
21061: ARRAY
21062: PPUSH
21063: CALL_OW 52
// end ;
21067: GO 20702
21069: POP
21070: POP
// end ;
21071: GO 20002
21073: POP
21074: POP
// result := result ^ buildings ;
21075: LD_ADDR_VAR 0 7
21079: PUSH
21080: LD_VAR 0 7
21084: PUSH
21085: LD_VAR 0 18
21089: ADD
21090: ST_TO_ADDR
// end else
21091: GO 21234
// begin for i = 1 to personel do
21093: LD_ADDR_VAR 0 8
21097: PUSH
21098: DOUBLE
21099: LD_INT 1
21101: DEC
21102: ST_TO_ADDR
21103: LD_VAR 0 6
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21232
// begin if i > 4 then
21111: LD_VAR 0 8
21115: PUSH
21116: LD_INT 4
21118: GREATER
21119: IFFALSE 21123
// break ;
21121: GO 21232
// x := personel [ i ] ;
21123: LD_ADDR_VAR 0 13
21127: PUSH
21128: LD_VAR 0 6
21132: PUSH
21133: LD_VAR 0 8
21137: ARRAY
21138: ST_TO_ADDR
// if x = - 1 then
21139: LD_VAR 0 13
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: EQUAL
21148: IFFALSE 21152
// continue ;
21150: GO 21108
// PrepareHuman ( false , i , skill ) ;
21152: LD_INT 0
21154: PPUSH
21155: LD_VAR 0 8
21159: PPUSH
21160: LD_VAR 0 4
21164: PPUSH
21165: CALL_OW 380
// un := CreateHuman ;
21169: LD_ADDR_VAR 0 14
21173: PUSH
21174: CALL_OW 44
21178: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21179: LD_VAR 0 14
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 250
21193: PPUSH
21194: LD_VAR 0 1
21198: PPUSH
21199: CALL_OW 251
21203: PPUSH
21204: LD_INT 10
21206: PPUSH
21207: LD_INT 0
21209: PPUSH
21210: CALL_OW 50
// result := result ^ un ;
21214: LD_ADDR_VAR 0 7
21218: PUSH
21219: LD_VAR 0 7
21223: PUSH
21224: LD_VAR 0 14
21228: ADD
21229: ST_TO_ADDR
// end ;
21230: GO 21108
21232: POP
21233: POP
// end ; end ;
21234: LD_VAR 0 7
21238: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21239: LD_INT 0
21241: PPUSH
21242: PPUSH
21243: PPUSH
21244: PPUSH
21245: PPUSH
21246: PPUSH
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
// result := false ;
21257: LD_ADDR_VAR 0 3
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21265: LD_VAR 0 1
21269: NOT
21270: IFTRUE 21295
21272: PUSH
21273: LD_VAR 0 1
21277: PPUSH
21278: CALL_OW 266
21282: PUSH
21283: LD_INT 32
21285: PUSH
21286: LD_INT 33
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: IN
21293: NOT
21294: OR
21295: IFFALSE 21299
// exit ;
21297: GO 22434
// nat := GetNation ( tower ) ;
21299: LD_ADDR_VAR 0 12
21303: PUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: CALL_OW 248
21313: ST_TO_ADDR
// side := GetSide ( tower ) ;
21314: LD_ADDR_VAR 0 16
21318: PUSH
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 255
21328: ST_TO_ADDR
// x := GetX ( tower ) ;
21329: LD_ADDR_VAR 0 10
21333: PUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL_OW 250
21343: ST_TO_ADDR
// y := GetY ( tower ) ;
21344: LD_ADDR_VAR 0 11
21348: PUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 251
21358: ST_TO_ADDR
// if not x or not y then
21359: LD_VAR 0 10
21363: NOT
21364: IFTRUE 21373
21366: PUSH
21367: LD_VAR 0 11
21371: NOT
21372: OR
21373: IFFALSE 21377
// exit ;
21375: GO 22434
// weapon := 0 ;
21377: LD_ADDR_VAR 0 18
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// fac_list := [ ] ;
21385: LD_ADDR_VAR 0 17
21389: PUSH
21390: EMPTY
21391: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21392: LD_ADDR_VAR 0 6
21396: PUSH
21397: LD_VAR 0 1
21401: PPUSH
21402: CALL_OW 274
21406: PPUSH
21407: LD_VAR 0 2
21411: PPUSH
21412: LD_INT 0
21414: PPUSH
21415: CALL 18969 0 3
21419: PPUSH
21420: LD_INT 30
21422: PUSH
21423: LD_INT 3
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PPUSH
21430: CALL_OW 72
21434: ST_TO_ADDR
// if not factories then
21435: LD_VAR 0 6
21439: NOT
21440: IFFALSE 21444
// exit ;
21442: GO 22434
// for i in factories do
21444: LD_ADDR_VAR 0 8
21448: PUSH
21449: LD_VAR 0 6
21453: PUSH
21454: FOR_IN
21455: IFFALSE 21480
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21457: LD_ADDR_VAR 0 17
21461: PUSH
21462: LD_VAR 0 17
21466: PUSH
21467: LD_VAR 0 8
21471: PPUSH
21472: CALL_OW 478
21476: UNION
21477: ST_TO_ADDR
21478: GO 21454
21480: POP
21481: POP
// if not fac_list then
21482: LD_VAR 0 17
21486: NOT
21487: IFFALSE 21491
// exit ;
21489: GO 22434
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21491: LD_ADDR_VAR 0 5
21495: PUSH
21496: LD_INT 4
21498: PUSH
21499: LD_INT 5
21501: PUSH
21502: LD_INT 9
21504: PUSH
21505: LD_INT 10
21507: PUSH
21508: LD_INT 6
21510: PUSH
21511: LD_INT 7
21513: PUSH
21514: LD_INT 11
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 27
21528: PUSH
21529: LD_INT 28
21531: PUSH
21532: LD_INT 26
21534: PUSH
21535: LD_INT 30
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 43
21546: PUSH
21547: LD_INT 44
21549: PUSH
21550: LD_INT 46
21552: PUSH
21553: LD_INT 45
21555: PUSH
21556: LD_INT 47
21558: PUSH
21559: LD_INT 49
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: PUSH
21575: LD_VAR 0 12
21579: ARRAY
21580: ST_TO_ADDR
// list := list isect fac_list ;
21581: LD_ADDR_VAR 0 5
21585: PUSH
21586: LD_VAR 0 5
21590: PUSH
21591: LD_VAR 0 17
21595: ISECT
21596: ST_TO_ADDR
// if not list then
21597: LD_VAR 0 5
21601: NOT
21602: IFFALSE 21606
// exit ;
21604: GO 22434
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21606: LD_VAR 0 12
21610: PUSH
21611: LD_INT 3
21613: EQUAL
21614: IFFALSE 21626
21616: PUSH
21617: LD_INT 49
21619: PUSH
21620: LD_VAR 0 5
21624: IN
21625: AND
21626: IFFALSE 21646
21628: PUSH
21629: LD_INT 31
21631: PPUSH
21632: LD_VAR 0 16
21636: PPUSH
21637: CALL_OW 321
21641: PUSH
21642: LD_INT 2
21644: EQUAL
21645: AND
21646: IFFALSE 21706
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21648: LD_INT 22
21650: PUSH
21651: LD_VAR 0 16
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 35
21662: PUSH
21663: LD_INT 49
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 91
21672: PUSH
21673: LD_VAR 0 1
21677: PUSH
21678: LD_INT 10
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: PPUSH
21691: CALL_OW 69
21695: NOT
21696: IFFALSE 21706
// weapon := ru_time_lapser ;
21698: LD_ADDR_VAR 0 18
21702: PUSH
21703: LD_INT 49
21705: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21706: LD_VAR 0 12
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: LD_INT 2
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: IN
21721: IFFALSE 21745
21723: PUSH
21724: LD_INT 11
21726: PUSH
21727: LD_VAR 0 5
21731: IN
21732: IFTRUE 21744
21734: PUSH
21735: LD_INT 30
21737: PUSH
21738: LD_VAR 0 5
21742: IN
21743: OR
21744: AND
21745: IFFALSE 21765
21747: PUSH
21748: LD_INT 6
21750: PPUSH
21751: LD_VAR 0 16
21755: PPUSH
21756: CALL_OW 321
21760: PUSH
21761: LD_INT 2
21763: EQUAL
21764: AND
21765: IFFALSE 21932
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21767: LD_INT 22
21769: PUSH
21770: LD_VAR 0 16
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 35
21784: PUSH
21785: LD_INT 11
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 35
21794: PUSH
21795: LD_INT 30
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 91
21809: PUSH
21810: LD_VAR 0 1
21814: PUSH
21815: LD_INT 18
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: LIST
21827: PPUSH
21828: CALL_OW 69
21832: NOT
21833: IFFALSE 21909
21835: PUSH
21836: LD_INT 22
21838: PUSH
21839: LD_VAR 0 16
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: LD_INT 30
21853: PUSH
21854: LD_INT 32
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 30
21863: PUSH
21864: LD_INT 33
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 91
21878: PUSH
21879: LD_VAR 0 1
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: PPUSH
21900: CALL_OW 69
21904: PUSH
21905: LD_INT 2
21907: GREATER
21908: AND
21909: IFFALSE 21932
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21911: LD_ADDR_VAR 0 18
21915: PUSH
21916: LD_INT 11
21918: PUSH
21919: LD_INT 30
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_VAR 0 12
21930: ARRAY
21931: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21932: LD_VAR 0 18
21936: NOT
21937: IFFALSE 21957
21939: PUSH
21940: LD_INT 40
21942: PPUSH
21943: LD_VAR 0 16
21947: PPUSH
21948: CALL_OW 321
21952: PUSH
21953: LD_INT 2
21955: EQUAL
21956: AND
21957: IFFALSE 21993
21959: PUSH
21960: LD_INT 7
21962: PUSH
21963: LD_VAR 0 5
21967: IN
21968: IFTRUE 21980
21970: PUSH
21971: LD_INT 28
21973: PUSH
21974: LD_VAR 0 5
21978: IN
21979: OR
21980: IFTRUE 21992
21982: PUSH
21983: LD_INT 45
21985: PUSH
21986: LD_VAR 0 5
21990: IN
21991: OR
21992: AND
21993: IFFALSE 22247
// begin hex := GetHexInfo ( x , y ) ;
21995: LD_ADDR_VAR 0 4
21999: PUSH
22000: LD_VAR 0 10
22004: PPUSH
22005: LD_VAR 0 11
22009: PPUSH
22010: CALL_OW 546
22014: ST_TO_ADDR
// if hex [ 1 ] then
22015: LD_VAR 0 4
22019: PUSH
22020: LD_INT 1
22022: ARRAY
22023: IFFALSE 22027
// exit ;
22025: GO 22434
// height := hex [ 2 ] ;
22027: LD_ADDR_VAR 0 15
22031: PUSH
22032: LD_VAR 0 4
22036: PUSH
22037: LD_INT 2
22039: ARRAY
22040: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22041: LD_ADDR_VAR 0 14
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: LD_INT 5
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: ST_TO_ADDR
// for i in tmp do
22064: LD_ADDR_VAR 0 8
22068: PUSH
22069: LD_VAR 0 14
22073: PUSH
22074: FOR_IN
22075: IFFALSE 22245
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22077: LD_ADDR_VAR 0 9
22081: PUSH
22082: LD_VAR 0 10
22086: PPUSH
22087: LD_VAR 0 8
22091: PPUSH
22092: LD_INT 5
22094: PPUSH
22095: CALL_OW 272
22099: PUSH
22100: LD_VAR 0 11
22104: PPUSH
22105: LD_VAR 0 8
22109: PPUSH
22110: LD_INT 5
22112: PPUSH
22113: CALL_OW 273
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22122: LD_VAR 0 9
22126: PUSH
22127: LD_INT 1
22129: ARRAY
22130: PPUSH
22131: LD_VAR 0 9
22135: PUSH
22136: LD_INT 2
22138: ARRAY
22139: PPUSH
22140: CALL_OW 488
22144: IFFALSE 22243
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22146: LD_ADDR_VAR 0 4
22150: PUSH
22151: LD_VAR 0 9
22155: PUSH
22156: LD_INT 1
22158: ARRAY
22159: PPUSH
22160: LD_VAR 0 9
22164: PUSH
22165: LD_INT 2
22167: ARRAY
22168: PPUSH
22169: CALL_OW 546
22173: ST_TO_ADDR
// if hex [ 1 ] then
22174: LD_VAR 0 4
22178: PUSH
22179: LD_INT 1
22181: ARRAY
22182: IFFALSE 22186
// continue ;
22184: GO 22074
// h := hex [ 2 ] ;
22186: LD_ADDR_VAR 0 13
22190: PUSH
22191: LD_VAR 0 4
22195: PUSH
22196: LD_INT 2
22198: ARRAY
22199: ST_TO_ADDR
// if h + 7 < height then
22200: LD_VAR 0 13
22204: PUSH
22205: LD_INT 7
22207: PLUS
22208: PUSH
22209: LD_VAR 0 15
22213: LESS
22214: IFFALSE 22243
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22216: LD_ADDR_VAR 0 18
22220: PUSH
22221: LD_INT 7
22223: PUSH
22224: LD_INT 28
22226: PUSH
22227: LD_INT 45
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: LD_VAR 0 12
22239: ARRAY
22240: ST_TO_ADDR
// break ;
22241: GO 22245
// end ; end ; end ;
22243: GO 22074
22245: POP
22246: POP
// end ; if not weapon then
22247: LD_VAR 0 18
22251: NOT
22252: IFFALSE 22312
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22254: LD_ADDR_VAR 0 5
22258: PUSH
22259: LD_VAR 0 5
22263: PUSH
22264: LD_INT 11
22266: PUSH
22267: LD_INT 30
22269: PUSH
22270: LD_INT 49
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: DIFF
22278: ST_TO_ADDR
// if not list then
22279: LD_VAR 0 5
22283: NOT
22284: IFFALSE 22288
// exit ;
22286: GO 22434
// weapon := list [ rand ( 1 , list ) ] ;
22288: LD_ADDR_VAR 0 18
22292: PUSH
22293: LD_VAR 0 5
22297: PUSH
22298: LD_INT 1
22300: PPUSH
22301: LD_VAR 0 5
22305: PPUSH
22306: CALL_OW 12
22310: ARRAY
22311: ST_TO_ADDR
// end ; if weapon then
22312: LD_VAR 0 18
22316: IFFALSE 22434
// begin tmp := CostOfWeapon ( weapon ) ;
22318: LD_ADDR_VAR 0 14
22322: PUSH
22323: LD_VAR 0 18
22327: PPUSH
22328: CALL_OW 451
22332: ST_TO_ADDR
// j := GetBase ( tower ) ;
22333: LD_ADDR_VAR 0 9
22337: PUSH
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 274
22347: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22348: LD_VAR 0 9
22352: PPUSH
22353: LD_INT 1
22355: PPUSH
22356: CALL_OW 275
22360: PUSH
22361: LD_VAR 0 14
22365: PUSH
22366: LD_INT 1
22368: ARRAY
22369: GREATEREQUAL
22370: IFFALSE 22396
22372: PUSH
22373: LD_VAR 0 9
22377: PPUSH
22378: LD_INT 2
22380: PPUSH
22381: CALL_OW 275
22385: PUSH
22386: LD_VAR 0 14
22390: PUSH
22391: LD_INT 2
22393: ARRAY
22394: GREATEREQUAL
22395: AND
22396: IFFALSE 22422
22398: PUSH
22399: LD_VAR 0 9
22403: PPUSH
22404: LD_INT 3
22406: PPUSH
22407: CALL_OW 275
22411: PUSH
22412: LD_VAR 0 14
22416: PUSH
22417: LD_INT 3
22419: ARRAY
22420: GREATEREQUAL
22421: AND
22422: IFFALSE 22434
// result := weapon ;
22424: LD_ADDR_VAR 0 3
22428: PUSH
22429: LD_VAR 0 18
22433: ST_TO_ADDR
// end ; end ;
22434: LD_VAR 0 3
22438: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22439: LD_INT 0
22441: PPUSH
22442: PPUSH
// result := true ;
22443: LD_ADDR_VAR 0 3
22447: PUSH
22448: LD_INT 1
22450: ST_TO_ADDR
// if array1 = array2 then
22451: LD_VAR 0 1
22455: PUSH
22456: LD_VAR 0 2
22460: EQUAL
22461: IFFALSE 22521
// begin for i = 1 to array1 do
22463: LD_ADDR_VAR 0 4
22467: PUSH
22468: DOUBLE
22469: LD_INT 1
22471: DEC
22472: ST_TO_ADDR
22473: LD_VAR 0 1
22477: PUSH
22478: FOR_TO
22479: IFFALSE 22517
// if array1 [ i ] <> array2 [ i ] then
22481: LD_VAR 0 1
22485: PUSH
22486: LD_VAR 0 4
22490: ARRAY
22491: PUSH
22492: LD_VAR 0 2
22496: PUSH
22497: LD_VAR 0 4
22501: ARRAY
22502: NONEQUAL
22503: IFFALSE 22515
// begin result := false ;
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_INT 0
22512: ST_TO_ADDR
// break ;
22513: GO 22517
// end ;
22515: GO 22478
22517: POP
22518: POP
// end else
22519: GO 22529
// result := false ;
22521: LD_ADDR_VAR 0 3
22525: PUSH
22526: LD_INT 0
22528: ST_TO_ADDR
// end ;
22529: LD_VAR 0 3
22533: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22534: LD_INT 0
22536: PPUSH
22537: PPUSH
// if not array1 or not array2 then
22538: LD_VAR 0 1
22542: NOT
22543: IFTRUE 22552
22545: PUSH
22546: LD_VAR 0 2
22550: NOT
22551: OR
22552: IFFALSE 22556
// exit ;
22554: GO 22620
// result := true ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: LD_INT 1
22563: ST_TO_ADDR
// for i = 1 to array1 do
22564: LD_ADDR_VAR 0 4
22568: PUSH
22569: DOUBLE
22570: LD_INT 1
22572: DEC
22573: ST_TO_ADDR
22574: LD_VAR 0 1
22578: PUSH
22579: FOR_TO
22580: IFFALSE 22618
// if array1 [ i ] <> array2 [ i ] then
22582: LD_VAR 0 1
22586: PUSH
22587: LD_VAR 0 4
22591: ARRAY
22592: PUSH
22593: LD_VAR 0 2
22597: PUSH
22598: LD_VAR 0 4
22602: ARRAY
22603: NONEQUAL
22604: IFFALSE 22616
// begin result := false ;
22606: LD_ADDR_VAR 0 3
22610: PUSH
22611: LD_INT 0
22613: ST_TO_ADDR
// break ;
22614: GO 22618
// end ;
22616: GO 22579
22618: POP
22619: POP
// end ;
22620: LD_VAR 0 3
22624: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22625: LD_INT 0
22627: PPUSH
22628: PPUSH
22629: PPUSH
// pom := GetBase ( fac ) ;
22630: LD_ADDR_VAR 0 5
22634: PUSH
22635: LD_VAR 0 1
22639: PPUSH
22640: CALL_OW 274
22644: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22645: LD_ADDR_VAR 0 4
22649: PUSH
22650: LD_VAR 0 2
22654: PUSH
22655: LD_INT 1
22657: ARRAY
22658: PPUSH
22659: LD_VAR 0 2
22663: PUSH
22664: LD_INT 2
22666: ARRAY
22667: PPUSH
22668: LD_VAR 0 2
22672: PUSH
22673: LD_INT 3
22675: ARRAY
22676: PPUSH
22677: LD_VAR 0 2
22681: PUSH
22682: LD_INT 4
22684: ARRAY
22685: PPUSH
22686: CALL_OW 449
22690: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22691: LD_ADDR_VAR 0 3
22695: PUSH
22696: LD_VAR 0 5
22700: PPUSH
22701: LD_INT 1
22703: PPUSH
22704: CALL_OW 275
22708: PUSH
22709: LD_VAR 0 4
22713: PUSH
22714: LD_INT 1
22716: ARRAY
22717: GREATEREQUAL
22718: IFFALSE 22744
22720: PUSH
22721: LD_VAR 0 5
22725: PPUSH
22726: LD_INT 2
22728: PPUSH
22729: CALL_OW 275
22733: PUSH
22734: LD_VAR 0 4
22738: PUSH
22739: LD_INT 2
22741: ARRAY
22742: GREATEREQUAL
22743: AND
22744: IFFALSE 22770
22746: PUSH
22747: LD_VAR 0 5
22751: PPUSH
22752: LD_INT 3
22754: PPUSH
22755: CALL_OW 275
22759: PUSH
22760: LD_VAR 0 4
22764: PUSH
22765: LD_INT 3
22767: ARRAY
22768: GREATEREQUAL
22769: AND
22770: ST_TO_ADDR
// end ;
22771: LD_VAR 0 3
22775: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22776: LD_INT 0
22778: PPUSH
22779: PPUSH
22780: PPUSH
22781: PPUSH
// pom := GetBase ( building ) ;
22782: LD_ADDR_VAR 0 3
22786: PUSH
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 274
22796: ST_TO_ADDR
// if not pom then
22797: LD_VAR 0 3
22801: NOT
22802: IFFALSE 22806
// exit ;
22804: GO 22980
// btype := GetBType ( building ) ;
22806: LD_ADDR_VAR 0 5
22810: PUSH
22811: LD_VAR 0 1
22815: PPUSH
22816: CALL_OW 266
22820: ST_TO_ADDR
// if btype = b_armoury then
22821: LD_VAR 0 5
22825: PUSH
22826: LD_INT 4
22828: EQUAL
22829: IFFALSE 22839
// btype := b_barracks ;
22831: LD_ADDR_VAR 0 5
22835: PUSH
22836: LD_INT 5
22838: ST_TO_ADDR
// if btype = b_depot then
22839: LD_VAR 0 5
22843: PUSH
22844: LD_INT 0
22846: EQUAL
22847: IFFALSE 22857
// btype := b_warehouse ;
22849: LD_ADDR_VAR 0 5
22853: PUSH
22854: LD_INT 1
22856: ST_TO_ADDR
// if btype = b_workshop then
22857: LD_VAR 0 5
22861: PUSH
22862: LD_INT 2
22864: EQUAL
22865: IFFALSE 22875
// btype := b_factory ;
22867: LD_ADDR_VAR 0 5
22871: PUSH
22872: LD_INT 3
22874: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22875: LD_ADDR_VAR 0 4
22879: PUSH
22880: LD_VAR 0 5
22884: PPUSH
22885: LD_VAR 0 1
22889: PPUSH
22890: CALL_OW 248
22894: PPUSH
22895: CALL_OW 450
22899: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22900: LD_ADDR_VAR 0 2
22904: PUSH
22905: LD_VAR 0 3
22909: PPUSH
22910: LD_INT 1
22912: PPUSH
22913: CALL_OW 275
22917: PUSH
22918: LD_VAR 0 4
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: GREATEREQUAL
22927: IFFALSE 22953
22929: PUSH
22930: LD_VAR 0 3
22934: PPUSH
22935: LD_INT 2
22937: PPUSH
22938: CALL_OW 275
22942: PUSH
22943: LD_VAR 0 4
22947: PUSH
22948: LD_INT 2
22950: ARRAY
22951: GREATEREQUAL
22952: AND
22953: IFFALSE 22979
22955: PUSH
22956: LD_VAR 0 3
22960: PPUSH
22961: LD_INT 3
22963: PPUSH
22964: CALL_OW 275
22968: PUSH
22969: LD_VAR 0 4
22973: PUSH
22974: LD_INT 3
22976: ARRAY
22977: GREATEREQUAL
22978: AND
22979: ST_TO_ADDR
// end ;
22980: LD_VAR 0 2
22984: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22985: LD_INT 0
22987: PPUSH
22988: PPUSH
22989: PPUSH
// pom := GetBase ( building ) ;
22990: LD_ADDR_VAR 0 4
22994: PUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 274
23004: ST_TO_ADDR
// if not pom then
23005: LD_VAR 0 4
23009: NOT
23010: IFFALSE 23014
// exit ;
23012: GO 23119
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23014: LD_ADDR_VAR 0 5
23018: PUSH
23019: LD_VAR 0 2
23023: PPUSH
23024: LD_VAR 0 1
23028: PPUSH
23029: CALL_OW 248
23033: PPUSH
23034: CALL_OW 450
23038: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23039: LD_ADDR_VAR 0 3
23043: PUSH
23044: LD_VAR 0 4
23048: PPUSH
23049: LD_INT 1
23051: PPUSH
23052: CALL_OW 275
23056: PUSH
23057: LD_VAR 0 5
23061: PUSH
23062: LD_INT 1
23064: ARRAY
23065: GREATEREQUAL
23066: IFFALSE 23092
23068: PUSH
23069: LD_VAR 0 4
23073: PPUSH
23074: LD_INT 2
23076: PPUSH
23077: CALL_OW 275
23081: PUSH
23082: LD_VAR 0 5
23086: PUSH
23087: LD_INT 2
23089: ARRAY
23090: GREATEREQUAL
23091: AND
23092: IFFALSE 23118
23094: PUSH
23095: LD_VAR 0 4
23099: PPUSH
23100: LD_INT 3
23102: PPUSH
23103: CALL_OW 275
23107: PUSH
23108: LD_VAR 0 5
23112: PUSH
23113: LD_INT 3
23115: ARRAY
23116: GREATEREQUAL
23117: AND
23118: ST_TO_ADDR
// end ;
23119: LD_VAR 0 3
23123: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23124: LD_INT 0
23126: PPUSH
23127: PPUSH
23128: PPUSH
23129: PPUSH
23130: PPUSH
23131: PPUSH
23132: PPUSH
23133: PPUSH
23134: PPUSH
23135: PPUSH
23136: PPUSH
// result := false ;
23137: LD_ADDR_VAR 0 8
23141: PUSH
23142: LD_INT 0
23144: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23145: LD_VAR 0 5
23149: NOT
23150: IFTRUE 23159
23152: PUSH
23153: LD_VAR 0 1
23157: NOT
23158: OR
23159: IFTRUE 23168
23161: PUSH
23162: LD_VAR 0 2
23166: NOT
23167: OR
23168: IFTRUE 23177
23170: PUSH
23171: LD_VAR 0 3
23175: NOT
23176: OR
23177: IFFALSE 23181
// exit ;
23179: GO 24007
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23181: LD_ADDR_VAR 0 14
23185: PUSH
23186: LD_VAR 0 1
23190: PPUSH
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: LD_VAR 0 4
23205: PPUSH
23206: LD_VAR 0 5
23210: PUSH
23211: LD_INT 1
23213: ARRAY
23214: PPUSH
23215: CALL_OW 248
23219: PPUSH
23220: LD_INT 0
23222: PPUSH
23223: CALL 25288 0 6
23227: ST_TO_ADDR
// if not hexes then
23228: LD_VAR 0 14
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 24007
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23237: LD_ADDR_VAR 0 17
23241: PUSH
23242: LD_VAR 0 5
23246: PPUSH
23247: LD_INT 22
23249: PUSH
23250: LD_VAR 0 13
23254: PPUSH
23255: CALL_OW 255
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: LD_INT 30
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 30
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PPUSH
23296: CALL_OW 72
23300: ST_TO_ADDR
// for i = 1 to hexes do
23301: LD_ADDR_VAR 0 9
23305: PUSH
23306: DOUBLE
23307: LD_INT 1
23309: DEC
23310: ST_TO_ADDR
23311: LD_VAR 0 14
23315: PUSH
23316: FOR_TO
23317: IFFALSE 24005
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23319: LD_ADDR_VAR 0 13
23323: PUSH
23324: LD_VAR 0 14
23328: PUSH
23329: LD_VAR 0 9
23333: ARRAY
23334: PUSH
23335: LD_INT 1
23337: ARRAY
23338: PPUSH
23339: LD_VAR 0 14
23343: PUSH
23344: LD_VAR 0 9
23348: ARRAY
23349: PUSH
23350: LD_INT 2
23352: ARRAY
23353: PPUSH
23354: CALL_OW 428
23358: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23359: LD_VAR 0 14
23363: PUSH
23364: LD_VAR 0 9
23368: ARRAY
23369: PUSH
23370: LD_INT 1
23372: ARRAY
23373: PPUSH
23374: LD_VAR 0 14
23378: PUSH
23379: LD_VAR 0 9
23383: ARRAY
23384: PUSH
23385: LD_INT 2
23387: ARRAY
23388: PPUSH
23389: CALL_OW 351
23393: IFTRUE 23432
23395: PUSH
23396: LD_VAR 0 14
23400: PUSH
23401: LD_VAR 0 9
23405: ARRAY
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PPUSH
23411: LD_VAR 0 14
23415: PUSH
23416: LD_VAR 0 9
23420: ARRAY
23421: PUSH
23422: LD_INT 2
23424: ARRAY
23425: PPUSH
23426: CALL_OW 488
23430: NOT
23431: OR
23432: IFTRUE 23449
23434: PUSH
23435: LD_VAR 0 13
23439: PPUSH
23440: CALL_OW 247
23444: PUSH
23445: LD_INT 3
23447: EQUAL
23448: OR
23449: IFFALSE 23455
// exit ;
23451: POP
23452: POP
23453: GO 24007
// if not tmp then
23455: LD_VAR 0 13
23459: NOT
23460: IFFALSE 23464
// continue ;
23462: GO 23316
// result := true ;
23464: LD_ADDR_VAR 0 8
23468: PUSH
23469: LD_INT 1
23471: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23472: LD_VAR 0 6
23476: IFFALSE 23493
23478: PUSH
23479: LD_VAR 0 13
23483: PPUSH
23484: CALL_OW 247
23488: PUSH
23489: LD_INT 2
23491: EQUAL
23492: AND
23493: IFFALSE 23510
23495: PUSH
23496: LD_VAR 0 13
23500: PPUSH
23501: CALL_OW 263
23505: PUSH
23506: LD_INT 1
23508: EQUAL
23509: AND
23510: IFFALSE 23674
// begin if IsDrivenBy ( tmp ) then
23512: LD_VAR 0 13
23516: PPUSH
23517: CALL_OW 311
23521: IFFALSE 23525
// continue ;
23523: GO 23316
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23525: LD_VAR 0 6
23529: PPUSH
23530: LD_INT 3
23532: PUSH
23533: LD_INT 60
23535: PUSH
23536: EMPTY
23537: LIST
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 3
23545: PUSH
23546: LD_INT 55
23548: PUSH
23549: EMPTY
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PPUSH
23560: CALL_OW 72
23564: IFFALSE 23672
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23566: LD_ADDR_VAR 0 18
23570: PUSH
23571: LD_VAR 0 6
23575: PPUSH
23576: LD_INT 3
23578: PUSH
23579: LD_INT 60
23581: PUSH
23582: EMPTY
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: LD_INT 55
23594: PUSH
23595: EMPTY
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PPUSH
23606: CALL_OW 72
23610: PUSH
23611: LD_INT 1
23613: ARRAY
23614: ST_TO_ADDR
// if IsInUnit ( driver ) then
23615: LD_VAR 0 18
23619: PPUSH
23620: CALL_OW 310
23624: IFFALSE 23635
// ComExit ( driver ) ;
23626: LD_VAR 0 18
23630: PPUSH
23631: CALL 49278 0 1
// AddComEnterUnit ( driver , tmp ) ;
23635: LD_VAR 0 18
23639: PPUSH
23640: LD_VAR 0 13
23644: PPUSH
23645: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23649: LD_VAR 0 18
23653: PPUSH
23654: LD_VAR 0 7
23658: PPUSH
23659: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23663: LD_VAR 0 18
23667: PPUSH
23668: CALL_OW 181
// end ; continue ;
23672: GO 23316
// end ; if not cleaners or not tmp in cleaners then
23674: LD_VAR 0 6
23678: NOT
23679: IFTRUE 23694
23681: PUSH
23682: LD_VAR 0 13
23686: PUSH
23687: LD_VAR 0 6
23691: IN
23692: NOT
23693: OR
23694: IFFALSE 24003
// begin if dep then
23696: LD_VAR 0 17
23700: IFFALSE 23836
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23702: LD_ADDR_VAR 0 16
23706: PUSH
23707: LD_VAR 0 17
23711: PUSH
23712: LD_INT 1
23714: ARRAY
23715: PPUSH
23716: CALL_OW 250
23720: PPUSH
23721: LD_VAR 0 17
23725: PUSH
23726: LD_INT 1
23728: ARRAY
23729: PPUSH
23730: CALL_OW 254
23734: PPUSH
23735: LD_INT 5
23737: PPUSH
23738: CALL_OW 272
23742: PUSH
23743: LD_VAR 0 17
23747: PUSH
23748: LD_INT 1
23750: ARRAY
23751: PPUSH
23752: CALL_OW 251
23756: PPUSH
23757: LD_VAR 0 17
23761: PUSH
23762: LD_INT 1
23764: ARRAY
23765: PPUSH
23766: CALL_OW 254
23770: PPUSH
23771: LD_INT 5
23773: PPUSH
23774: CALL_OW 273
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23783: LD_VAR 0 16
23787: PUSH
23788: LD_INT 1
23790: ARRAY
23791: PPUSH
23792: LD_VAR 0 16
23796: PUSH
23797: LD_INT 2
23799: ARRAY
23800: PPUSH
23801: CALL_OW 488
23805: IFFALSE 23836
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23807: LD_VAR 0 13
23811: PPUSH
23812: LD_VAR 0 16
23816: PUSH
23817: LD_INT 1
23819: ARRAY
23820: PPUSH
23821: LD_VAR 0 16
23825: PUSH
23826: LD_INT 2
23828: ARRAY
23829: PPUSH
23830: CALL_OW 111
// continue ;
23834: GO 23316
// end ; end ; r := GetDir ( tmp ) ;
23836: LD_ADDR_VAR 0 15
23840: PUSH
23841: LD_VAR 0 13
23845: PPUSH
23846: CALL_OW 254
23850: ST_TO_ADDR
// if r = 5 then
23851: LD_VAR 0 15
23855: PUSH
23856: LD_INT 5
23858: EQUAL
23859: IFFALSE 23869
// r := 0 ;
23861: LD_ADDR_VAR 0 15
23865: PUSH
23866: LD_INT 0
23868: ST_TO_ADDR
// for j = r to 5 do
23869: LD_ADDR_VAR 0 10
23873: PUSH
23874: DOUBLE
23875: LD_VAR 0 15
23879: DEC
23880: ST_TO_ADDR
23881: LD_INT 5
23883: PUSH
23884: FOR_TO
23885: IFFALSE 24001
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23887: LD_ADDR_VAR 0 11
23891: PUSH
23892: LD_VAR 0 13
23896: PPUSH
23897: CALL_OW 250
23901: PPUSH
23902: LD_VAR 0 10
23906: PPUSH
23907: LD_INT 2
23909: PPUSH
23910: CALL_OW 272
23914: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23915: LD_ADDR_VAR 0 12
23919: PUSH
23920: LD_VAR 0 13
23924: PPUSH
23925: CALL_OW 251
23929: PPUSH
23930: LD_VAR 0 10
23934: PPUSH
23935: LD_INT 2
23937: PPUSH
23938: CALL_OW 273
23942: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23943: LD_VAR 0 11
23947: PPUSH
23948: LD_VAR 0 12
23952: PPUSH
23953: CALL_OW 488
23957: IFFALSE 23976
23959: PUSH
23960: LD_VAR 0 11
23964: PPUSH
23965: LD_VAR 0 12
23969: PPUSH
23970: CALL_OW 428
23974: NOT
23975: AND
23976: IFFALSE 23999
// begin ComMoveXY ( tmp , _x , _y ) ;
23978: LD_VAR 0 13
23982: PPUSH
23983: LD_VAR 0 11
23987: PPUSH
23988: LD_VAR 0 12
23992: PPUSH
23993: CALL_OW 111
// break ;
23997: GO 24001
// end ; end ;
23999: GO 23884
24001: POP
24002: POP
// end ; end ;
24003: GO 23316
24005: POP
24006: POP
// end ;
24007: LD_VAR 0 8
24011: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24012: LD_INT 0
24014: PPUSH
// result := true ;
24015: LD_ADDR_VAR 0 3
24019: PUSH
24020: LD_INT 1
24022: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24023: LD_VAR 0 2
24027: PUSH
24028: LD_INT 24
24030: DOUBLE
24031: EQUAL
24032: IFTRUE 24042
24034: LD_INT 33
24036: DOUBLE
24037: EQUAL
24038: IFTRUE 24042
24040: GO 24067
24042: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24043: LD_ADDR_VAR 0 3
24047: PUSH
24048: LD_INT 32
24050: PPUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 321
24060: PUSH
24061: LD_INT 2
24063: EQUAL
24064: ST_TO_ADDR
24065: GO 24383
24067: LD_INT 20
24069: DOUBLE
24070: EQUAL
24071: IFTRUE 24075
24073: GO 24100
24075: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: LD_INT 6
24083: PPUSH
24084: LD_VAR 0 1
24088: PPUSH
24089: CALL_OW 321
24093: PUSH
24094: LD_INT 2
24096: EQUAL
24097: ST_TO_ADDR
24098: GO 24383
24100: LD_INT 22
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24114
24106: LD_INT 36
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24139
24114: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24115: LD_ADDR_VAR 0 3
24119: PUSH
24120: LD_INT 15
24122: PPUSH
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 321
24132: PUSH
24133: LD_INT 2
24135: EQUAL
24136: ST_TO_ADDR
24137: GO 24383
24139: LD_INT 30
24141: DOUBLE
24142: EQUAL
24143: IFTRUE 24147
24145: GO 24172
24147: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24148: LD_ADDR_VAR 0 3
24152: PUSH
24153: LD_INT 20
24155: PPUSH
24156: LD_VAR 0 1
24160: PPUSH
24161: CALL_OW 321
24165: PUSH
24166: LD_INT 2
24168: EQUAL
24169: ST_TO_ADDR
24170: GO 24383
24172: LD_INT 28
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24186
24178: LD_INT 21
24180: DOUBLE
24181: EQUAL
24182: IFTRUE 24186
24184: GO 24211
24186: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: LD_INT 21
24194: PPUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 321
24204: PUSH
24205: LD_INT 2
24207: EQUAL
24208: ST_TO_ADDR
24209: GO 24383
24211: LD_INT 16
24213: DOUBLE
24214: EQUAL
24215: IFTRUE 24219
24217: GO 24244
24219: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24220: LD_ADDR_VAR 0 3
24224: PUSH
24225: LD_INT 84
24227: PPUSH
24228: LD_VAR 0 1
24232: PPUSH
24233: CALL_OW 321
24237: PUSH
24238: LD_INT 2
24240: EQUAL
24241: ST_TO_ADDR
24242: GO 24383
24244: LD_INT 19
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24258
24250: LD_INT 23
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24283
24258: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24259: LD_ADDR_VAR 0 3
24263: PUSH
24264: LD_INT 83
24266: PPUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: CALL_OW 321
24276: PUSH
24277: LD_INT 2
24279: EQUAL
24280: ST_TO_ADDR
24281: GO 24383
24283: LD_INT 17
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24316
24291: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24292: LD_ADDR_VAR 0 3
24296: PUSH
24297: LD_INT 39
24299: PPUSH
24300: LD_VAR 0 1
24304: PPUSH
24305: CALL_OW 321
24309: PUSH
24310: LD_INT 2
24312: EQUAL
24313: ST_TO_ADDR
24314: GO 24383
24316: LD_INT 18
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24324
24322: GO 24349
24324: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24325: LD_ADDR_VAR 0 3
24329: PUSH
24330: LD_INT 40
24332: PPUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 321
24342: PUSH
24343: LD_INT 2
24345: EQUAL
24346: ST_TO_ADDR
24347: GO 24383
24349: LD_INT 27
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24382
24357: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24358: LD_ADDR_VAR 0 3
24362: PUSH
24363: LD_INT 35
24365: PPUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 321
24375: PUSH
24376: LD_INT 2
24378: EQUAL
24379: ST_TO_ADDR
24380: GO 24383
24382: POP
// end ;
24383: LD_VAR 0 3
24387: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24388: LD_INT 0
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
// result := false ;
24401: LD_ADDR_VAR 0 6
24405: PUSH
24406: LD_INT 0
24408: ST_TO_ADDR
// if btype = b_depot then
24409: LD_VAR 0 2
24413: PUSH
24414: LD_INT 0
24416: EQUAL
24417: IFFALSE 24429
// begin result := true ;
24419: LD_ADDR_VAR 0 6
24423: PUSH
24424: LD_INT 1
24426: ST_TO_ADDR
// exit ;
24427: GO 25283
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24429: LD_VAR 0 1
24433: NOT
24434: IFTRUE 24459
24436: PUSH
24437: LD_VAR 0 1
24441: PPUSH
24442: CALL_OW 266
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: IN
24457: NOT
24458: OR
24459: IFTRUE 24468
24461: PUSH
24462: LD_VAR 0 2
24466: NOT
24467: OR
24468: IFTRUE 24504
24470: PUSH
24471: LD_VAR 0 5
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 2
24484: PUSH
24485: LD_INT 3
24487: PUSH
24488: LD_INT 4
24490: PUSH
24491: LD_INT 5
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: IN
24502: NOT
24503: OR
24504: IFTRUE 24523
24506: PUSH
24507: LD_VAR 0 3
24511: PPUSH
24512: LD_VAR 0 4
24516: PPUSH
24517: CALL_OW 488
24521: NOT
24522: OR
24523: IFFALSE 24527
// exit ;
24525: GO 25283
// side := GetSide ( depot ) ;
24527: LD_ADDR_VAR 0 9
24531: PUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 255
24541: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24542: LD_VAR 0 9
24546: PPUSH
24547: LD_VAR 0 2
24551: PPUSH
24552: CALL 24012 0 2
24556: NOT
24557: IFFALSE 24561
// exit ;
24559: GO 25283
// pom := GetBase ( depot ) ;
24561: LD_ADDR_VAR 0 10
24565: PUSH
24566: LD_VAR 0 1
24570: PPUSH
24571: CALL_OW 274
24575: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24576: LD_ADDR_VAR 0 11
24580: PUSH
24581: LD_VAR 0 2
24585: PPUSH
24586: LD_VAR 0 1
24590: PPUSH
24591: CALL_OW 248
24595: PPUSH
24596: CALL_OW 450
24600: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24601: LD_VAR 0 10
24605: PPUSH
24606: LD_INT 1
24608: PPUSH
24609: CALL_OW 275
24613: PUSH
24614: LD_VAR 0 11
24618: PUSH
24619: LD_INT 1
24621: ARRAY
24622: GREATEREQUAL
24623: IFFALSE 24649
24625: PUSH
24626: LD_VAR 0 10
24630: PPUSH
24631: LD_INT 2
24633: PPUSH
24634: CALL_OW 275
24638: PUSH
24639: LD_VAR 0 11
24643: PUSH
24644: LD_INT 2
24646: ARRAY
24647: GREATEREQUAL
24648: AND
24649: IFFALSE 24675
24651: PUSH
24652: LD_VAR 0 10
24656: PPUSH
24657: LD_INT 3
24659: PPUSH
24660: CALL_OW 275
24664: PUSH
24665: LD_VAR 0 11
24669: PUSH
24670: LD_INT 3
24672: ARRAY
24673: GREATEREQUAL
24674: AND
24675: NOT
24676: IFFALSE 24680
// exit ;
24678: GO 25283
// if GetBType ( depot ) = b_depot then
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL_OW 266
24689: PUSH
24690: LD_INT 0
24692: EQUAL
24693: IFFALSE 24705
// dist := 28 else
24695: LD_ADDR_VAR 0 14
24699: PUSH
24700: LD_INT 28
24702: ST_TO_ADDR
24703: GO 24713
// dist := 36 ;
24705: LD_ADDR_VAR 0 14
24709: PUSH
24710: LD_INT 36
24712: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24713: LD_VAR 0 1
24717: PPUSH
24718: LD_VAR 0 3
24722: PPUSH
24723: LD_VAR 0 4
24727: PPUSH
24728: CALL_OW 297
24732: PUSH
24733: LD_VAR 0 14
24737: GREATER
24738: IFFALSE 24742
// exit ;
24740: GO 25283
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24742: LD_ADDR_VAR 0 12
24746: PUSH
24747: LD_VAR 0 2
24751: PPUSH
24752: LD_VAR 0 3
24756: PPUSH
24757: LD_VAR 0 4
24761: PPUSH
24762: LD_VAR 0 5
24766: PPUSH
24767: LD_VAR 0 1
24771: PPUSH
24772: CALL_OW 248
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: CALL 25288 0 6
24784: ST_TO_ADDR
// if not hexes then
24785: LD_VAR 0 12
24789: NOT
24790: IFFALSE 24794
// exit ;
24792: GO 25283
// hex := GetHexInfo ( x , y ) ;
24794: LD_ADDR_VAR 0 15
24798: PUSH
24799: LD_VAR 0 3
24803: PPUSH
24804: LD_VAR 0 4
24808: PPUSH
24809: CALL_OW 546
24813: ST_TO_ADDR
// if hex [ 1 ] then
24814: LD_VAR 0 15
24818: PUSH
24819: LD_INT 1
24821: ARRAY
24822: IFFALSE 24826
// exit ;
24824: GO 25283
// height := hex [ 2 ] ;
24826: LD_ADDR_VAR 0 13
24830: PUSH
24831: LD_VAR 0 15
24835: PUSH
24836: LD_INT 2
24838: ARRAY
24839: ST_TO_ADDR
// for i = 1 to hexes do
24840: LD_ADDR_VAR 0 7
24844: PUSH
24845: DOUBLE
24846: LD_INT 1
24848: DEC
24849: ST_TO_ADDR
24850: LD_VAR 0 12
24854: PUSH
24855: FOR_TO
24856: IFFALSE 25200
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24858: LD_VAR 0 12
24862: PUSH
24863: LD_VAR 0 7
24867: ARRAY
24868: PUSH
24869: LD_INT 1
24871: ARRAY
24872: PPUSH
24873: LD_VAR 0 12
24877: PUSH
24878: LD_VAR 0 7
24882: ARRAY
24883: PUSH
24884: LD_INT 2
24886: ARRAY
24887: PPUSH
24888: CALL_OW 488
24892: NOT
24893: IFTRUE 24935
24895: PUSH
24896: LD_VAR 0 12
24900: PUSH
24901: LD_VAR 0 7
24905: ARRAY
24906: PUSH
24907: LD_INT 1
24909: ARRAY
24910: PPUSH
24911: LD_VAR 0 12
24915: PUSH
24916: LD_VAR 0 7
24920: ARRAY
24921: PUSH
24922: LD_INT 2
24924: ARRAY
24925: PPUSH
24926: CALL_OW 428
24930: PUSH
24931: LD_INT 0
24933: GREATER
24934: OR
24935: IFTRUE 24973
24937: PUSH
24938: LD_VAR 0 12
24942: PUSH
24943: LD_VAR 0 7
24947: ARRAY
24948: PUSH
24949: LD_INT 1
24951: ARRAY
24952: PPUSH
24953: LD_VAR 0 12
24957: PUSH
24958: LD_VAR 0 7
24962: ARRAY
24963: PUSH
24964: LD_INT 2
24966: ARRAY
24967: PPUSH
24968: CALL_OW 351
24972: OR
24973: IFFALSE 24979
// exit ;
24975: POP
24976: POP
24977: GO 25283
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24979: LD_ADDR_VAR 0 8
24983: PUSH
24984: LD_VAR 0 12
24988: PUSH
24989: LD_VAR 0 7
24993: ARRAY
24994: PUSH
24995: LD_INT 1
24997: ARRAY
24998: PPUSH
24999: LD_VAR 0 12
25003: PUSH
25004: LD_VAR 0 7
25008: ARRAY
25009: PUSH
25010: LD_INT 2
25012: ARRAY
25013: PPUSH
25014: CALL_OW 546
25018: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25019: LD_VAR 0 8
25023: PUSH
25024: LD_INT 1
25026: ARRAY
25027: IFTRUE 25049
25029: PUSH
25030: LD_VAR 0 8
25034: PUSH
25035: LD_INT 2
25037: ARRAY
25038: PUSH
25039: LD_VAR 0 13
25043: PUSH
25044: LD_INT 2
25046: PLUS
25047: GREATER
25048: OR
25049: IFTRUE 25071
25051: PUSH
25052: LD_VAR 0 8
25056: PUSH
25057: LD_INT 2
25059: ARRAY
25060: PUSH
25061: LD_VAR 0 13
25065: PUSH
25066: LD_INT 2
25068: MINUS
25069: LESS
25070: OR
25071: IFTRUE 25139
25073: PUSH
25074: LD_VAR 0 8
25078: PUSH
25079: LD_INT 3
25081: ARRAY
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 8
25088: PUSH
25089: LD_INT 9
25091: PUSH
25092: LD_INT 10
25094: PUSH
25095: LD_INT 11
25097: PUSH
25098: LD_INT 12
25100: PUSH
25101: LD_INT 13
25103: PUSH
25104: LD_INT 16
25106: PUSH
25107: LD_INT 17
25109: PUSH
25110: LD_INT 18
25112: PUSH
25113: LD_INT 19
25115: PUSH
25116: LD_INT 20
25118: PUSH
25119: LD_INT 21
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: IN
25137: NOT
25138: OR
25139: IFTRUE 25152
25141: PUSH
25142: LD_VAR 0 8
25146: PUSH
25147: LD_INT 5
25149: ARRAY
25150: NOT
25151: OR
25152: IFTRUE 25192
25154: PUSH
25155: LD_VAR 0 8
25159: PUSH
25160: LD_INT 6
25162: ARRAY
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: LD_INT 2
25169: PUSH
25170: LD_INT 7
25172: PUSH
25173: LD_INT 9
25175: PUSH
25176: LD_INT 10
25178: PUSH
25179: LD_INT 11
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: IN
25190: NOT
25191: OR
25192: IFFALSE 25198
// exit ;
25194: POP
25195: POP
25196: GO 25283
// end ;
25198: GO 24855
25200: POP
25201: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25202: LD_VAR 0 9
25206: PPUSH
25207: LD_VAR 0 3
25211: PPUSH
25212: LD_VAR 0 4
25216: PPUSH
25217: LD_INT 20
25219: PPUSH
25220: CALL 17102 0 4
25224: PUSH
25225: LD_INT 4
25227: ARRAY
25228: IFFALSE 25232
// exit ;
25230: GO 25283
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25232: LD_VAR 0 2
25236: PUSH
25237: LD_INT 29
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: IN
25247: IFFALSE 25271
25249: PUSH
25250: LD_VAR 0 3
25254: PPUSH
25255: LD_VAR 0 4
25259: PPUSH
25260: LD_VAR 0 9
25264: PPUSH
25265: CALL_OW 440
25269: NOT
25270: AND
25271: IFFALSE 25275
// exit ;
25273: GO 25283
// result := true ;
25275: LD_ADDR_VAR 0 6
25279: PUSH
25280: LD_INT 1
25282: ST_TO_ADDR
// end ;
25283: LD_VAR 0 6
25287: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25288: LD_INT 0
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
25330: PPUSH
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
25335: PPUSH
25336: PPUSH
25337: PPUSH
25338: PPUSH
25339: PPUSH
25340: PPUSH
25341: PPUSH
25342: PPUSH
25343: PPUSH
25344: PPUSH
25345: PPUSH
25346: PPUSH
25347: PPUSH
// result = [ ] ;
25348: LD_ADDR_VAR 0 7
25352: PUSH
25353: EMPTY
25354: ST_TO_ADDR
// temp_list = [ ] ;
25355: LD_ADDR_VAR 0 9
25359: PUSH
25360: EMPTY
25361: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25362: LD_VAR 0 4
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: LD_INT 2
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: LD_INT 4
25381: PUSH
25382: LD_INT 5
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: IN
25393: NOT
25394: IFTRUE 25437
25396: PUSH
25397: LD_VAR 0 1
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: IN
25412: IFFALSE 25436
25414: PUSH
25415: LD_VAR 0 5
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: LD_INT 3
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: IN
25434: NOT
25435: AND
25436: OR
25437: IFFALSE 25441
// exit ;
25439: GO 43840
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25441: LD_VAR 0 1
25445: PUSH
25446: LD_INT 6
25448: PUSH
25449: LD_INT 7
25451: PUSH
25452: LD_INT 8
25454: PUSH
25455: LD_INT 13
25457: PUSH
25458: LD_INT 12
25460: PUSH
25461: LD_INT 15
25463: PUSH
25464: LD_INT 11
25466: PUSH
25467: LD_INT 14
25469: PUSH
25470: LD_INT 10
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: IN
25484: IFFALSE 25494
// btype = b_lab ;
25486: LD_ADDR_VAR 0 1
25490: PUSH
25491: LD_INT 6
25493: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25494: LD_VAR 0 6
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: IN
25513: NOT
25514: IFTRUE 25582
25516: PUSH
25517: LD_VAR 0 1
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: LD_INT 2
25530: PUSH
25531: LD_INT 3
25533: PUSH
25534: LD_INT 6
25536: PUSH
25537: LD_INT 36
25539: PUSH
25540: LD_INT 4
25542: PUSH
25543: LD_INT 5
25545: PUSH
25546: LD_INT 31
25548: PUSH
25549: LD_INT 32
25551: PUSH
25552: LD_INT 33
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: IN
25568: NOT
25569: IFFALSE 25581
25571: PUSH
25572: LD_VAR 0 6
25576: PUSH
25577: LD_INT 1
25579: EQUAL
25580: AND
25581: OR
25582: IFTRUE 25614
25584: PUSH
25585: LD_VAR 0 1
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: LD_INT 3
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: IN
25600: NOT
25601: IFFALSE 25613
25603: PUSH
25604: LD_VAR 0 6
25608: PUSH
25609: LD_INT 2
25611: EQUAL
25612: AND
25613: OR
25614: IFFALSE 25624
// mode = 0 ;
25616: LD_ADDR_VAR 0 6
25620: PUSH
25621: LD_INT 0
25623: ST_TO_ADDR
// case mode of 0 :
25624: LD_VAR 0 6
25628: PUSH
25629: LD_INT 0
25631: DOUBLE
25632: EQUAL
25633: IFTRUE 25637
25635: GO 37090
25637: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25638: LD_ADDR_VAR 0 11
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: NEG
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: LD_INT 2
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: LD_INT 3
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25831: LD_ADDR_VAR 0 12
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 2
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: NEG
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 3
25988: NEG
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 3
25999: NEG
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26027: LD_ADDR_VAR 0 13
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: LD_INT 0
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: LD_INT 2
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: NEG
26175: PUSH
26176: LD_INT 3
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 3
26186: NEG
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 3
26198: NEG
26199: PUSH
26200: LD_INT 3
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26226: LD_ADDR_VAR 0 14
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 2
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 3
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 3
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26422: LD_ADDR_VAR 0 15
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 1
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 2
26556: NEG
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 3
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 3
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26615: LD_ADDR_VAR 0 16
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 2
26750: NEG
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 3
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: LD_INT 3
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: LD_INT 3
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26808: LD_ADDR_VAR 0 17
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: LD_INT 2
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 2
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 1
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 2
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 2
26984: NEG
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: LD_INT 2
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27038: LD_ADDR_VAR 0 18
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 2
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: NEG
27238: PUSH
27239: LD_INT 2
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27268: LD_ADDR_VAR 0 19
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 2
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 2
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27498: LD_ADDR_VAR 0 20
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: LD_INT 2
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: LD_INT 1
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: NEG
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27728: LD_ADDR_VAR 0 21
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: NEG
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 2
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27958: LD_ADDR_VAR 0 22
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: LD_INT 1
27978: NEG
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: LD_INT 2
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 2
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: LD_INT 2
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: LD_INT 2
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28188: LD_ADDR_VAR 0 23
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: LD_INT 1
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: LD_INT 3
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 3
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28468: LD_ADDR_VAR 0 24
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: LD_INT 2
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 2
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 3
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 3
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28744: LD_ADDR_VAR 0 25
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: NEG
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 3
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 3
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29018: LD_ADDR_VAR 0 26
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 2
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 2
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: NEG
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 2
29205: NEG
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 2
29217: NEG
29218: PUSH
29219: LD_INT 2
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: LD_INT 3
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 3
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29294: LD_ADDR_VAR 0 27
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: LD_INT 1
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 2
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 2
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 2
29470: NEG
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 3
29527: NEG
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 3
29539: NEG
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29574: LD_ADDR_VAR 0 28
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: LD_INT 2
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 2
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 2
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 2
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: NEG
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29856: LD_ADDR_VAR 0 29
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: LD_INT 3
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 3
30100: NEG
30101: PUSH
30102: LD_INT 2
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30135: LD_ADDR_VAR 0 30
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: LD_INT 1
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: LD_INT 2
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: LD_INT 2
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30413: LD_ADDR_VAR 0 31
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: NEG
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: LD_INT 2
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: LD_INT 3
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 2
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: LD_INT 3
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 3
30656: NEG
30657: PUSH
30658: LD_INT 2
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30691: LD_ADDR_VAR 0 32
30695: PUSH
30696: LD_INT 0
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 2
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: NEG
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: LD_INT 3
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 3
30934: NEG
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30969: LD_ADDR_VAR 0 33
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 1
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 2
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 3
31213: NEG
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31248: LD_ADDR_VAR 0 34
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 2
31404: NEG
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: NEG
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 3
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: NEG
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 3
31493: NEG
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31528: LD_ADDR_VAR 0 35
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31640: LD_ADDR_VAR 0 36
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31752: LD_ADDR_VAR 0 37
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31864: LD_ADDR_VAR 0 38
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31976: LD_ADDR_VAR 0 39
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32088: LD_ADDR_VAR 0 40
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32200: LD_ADDR_VAR 0 41
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: NEG
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 3
32497: NEG
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 3
32509: NEG
32510: PUSH
32511: LD_INT 3
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32550: LD_ADDR_VAR 0 42
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 2
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 2
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: LD_INT 3
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: LD_INT 3
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: LD_INT 3
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 3
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 3
32859: NEG
32860: PUSH
32861: LD_INT 3
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32900: LD_ADDR_VAR 0 43
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 3
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 3
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 3
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 3
33196: NEG
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33248: LD_ADDR_VAR 0 44
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: LD_INT 2
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: LD_INT 3
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 3
33522: NEG
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: NEG
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 3
33557: NEG
33558: PUSH
33559: LD_INT 3
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33598: LD_ADDR_VAR 0 45
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 2
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: NEG
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: LD_INT 3
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 3
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 3
33844: PUSH
33845: LD_INT 3
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 3
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: LD_INT 3
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 3
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 3
33895: NEG
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 3
33907: NEG
33908: PUSH
33909: LD_INT 3
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33948: LD_ADDR_VAR 0 46
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: LD_INT 3
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 3
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 3
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: NEG
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: NEG
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 3
34255: NEG
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34296: LD_ADDR_VAR 0 47
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: NEG
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34447: LD_ADDR_VAR 0 48
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 2
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34594: LD_ADDR_VAR 0 49
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34738: LD_ADDR_VAR 0 50
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34882: LD_ADDR_VAR 0 51
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 2
35005: NEG
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35029: LD_ADDR_VAR 0 52
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: NEG
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35180: LD_ADDR_VAR 0 53
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35410: LD_ADDR_VAR 0 54
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35640: LD_ADDR_VAR 0 55
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: LD_INT 2
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35870: LD_ADDR_VAR 0 56
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 2
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36100: LD_ADDR_VAR 0 57
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 2
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36330: LD_ADDR_VAR 0 58
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 2
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: LD_INT 2
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 2
36506: NEG
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 2
36517: NEG
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36560: LD_ADDR_VAR 0 59
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 1
36580: NEG
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36648: LD_ADDR_VAR 0 60
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36736: LD_ADDR_VAR 0 61
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36824: LD_ADDR_VAR 0 62
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36912: LD_ADDR_VAR 0 63
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37000: LD_ADDR_VAR 0 64
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
// end ; 1 :
37088: GO 42985
37090: LD_INT 1
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 39721
37098: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37099: LD_ADDR_VAR 0 11
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 3
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37143: LD_ADDR_VAR 0 12
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 3
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 3
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37184: LD_ADDR_VAR 0 13
37188: PUSH
37189: LD_INT 3
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: LD_INT 3
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 2
37211: PUSH
37212: LD_INT 3
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37224: LD_ADDR_VAR 0 14
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 3
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37265: LD_ADDR_VAR 0 15
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 3
37283: NEG
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 3
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37309: LD_ADDR_VAR 0 16
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 3
37328: NEG
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: LD_INT 3
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37355: LD_ADDR_VAR 0 17
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 3
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 3
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 2
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37399: LD_ADDR_VAR 0 18
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 3
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 3
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37440: LD_ADDR_VAR 0 19
37444: PUSH
37445: LD_INT 3
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37480: LD_ADDR_VAR 0 20
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 3
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37521: LD_ADDR_VAR 0 21
37525: PUSH
37526: LD_INT 2
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 3
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37565: LD_ADDR_VAR 0 22
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 3
37584: NEG
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: LD_INT 3
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37611: LD_ADDR_VAR 0 23
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 3
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: LD_INT 4
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 3
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37655: LD_ADDR_VAR 0 24
37659: PUSH
37660: LD_INT 3
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 3
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 4
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37696: LD_ADDR_VAR 0 25
37700: PUSH
37701: LD_INT 3
37703: PUSH
37704: LD_INT 3
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 4
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 3
37723: PUSH
37724: LD_INT 4
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37736: LD_ADDR_VAR 0 26
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 3
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: LD_INT 4
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37777: LD_ADDR_VAR 0 27
37781: PUSH
37782: LD_INT 3
37784: NEG
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 3
37795: NEG
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 4
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37821: LD_ADDR_VAR 0 28
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 3
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 3
37840: NEG
37841: PUSH
37842: LD_INT 4
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 4
37852: NEG
37853: PUSH
37854: LD_INT 3
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37867: LD_ADDR_VAR 0 29
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 3
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: LD_INT 4
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 4
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: LD_INT 3
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: LD_INT 5
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 5
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 4
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 6
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 6
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: LD_INT 5
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38022: LD_ADDR_VAR 0 30
38026: PUSH
38027: LD_INT 2
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 3
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 3
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 4
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 4
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 4
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 5
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 5
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 5
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 6
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 6
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38165: LD_ADDR_VAR 0 31
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: LD_INT 3
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 3
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 4
38202: PUSH
38203: LD_INT 3
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 4
38212: PUSH
38213: LD_INT 4
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: LD_INT 4
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 5
38232: PUSH
38233: LD_INT 4
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 5
38242: PUSH
38243: LD_INT 5
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 4
38252: PUSH
38253: LD_INT 5
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 6
38262: PUSH
38263: LD_INT 5
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 6
38272: PUSH
38273: LD_INT 6
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 5
38282: PUSH
38283: LD_INT 6
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38304: LD_ADDR_VAR 0 32
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 3
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 4
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 4
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 5
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 5
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 4
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 6
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: LD_INT 6
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 5
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38447: LD_ADDR_VAR 0 33
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 4
38499: NEG
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 4
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 4
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 5
38533: NEG
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 5
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 5
38556: NEG
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 6
38567: NEG
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 6
38578: NEG
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38602: LD_ADDR_VAR 0 34
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 3
38645: NEG
38646: PUSH
38647: LD_INT 4
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 4
38657: NEG
38658: PUSH
38659: LD_INT 3
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 4
38669: NEG
38670: PUSH
38671: LD_INT 4
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 4
38681: NEG
38682: PUSH
38683: LD_INT 5
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 5
38693: NEG
38694: PUSH
38695: LD_INT 4
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 5
38705: NEG
38706: PUSH
38707: LD_INT 5
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 5
38717: NEG
38718: PUSH
38719: LD_INT 6
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 6
38729: NEG
38730: PUSH
38731: LD_INT 5
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 6
38741: NEG
38742: PUSH
38743: LD_INT 6
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38765: LD_ADDR_VAR 0 41
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38809: LD_ADDR_VAR 0 42
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38850: LD_ADDR_VAR 0 43
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38890: LD_ADDR_VAR 0 44
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 3
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38931: LD_ADDR_VAR 0 45
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 3
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38975: LD_ADDR_VAR 0 46
38979: PUSH
38980: LD_INT 2
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 3
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 3
39006: NEG
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39021: LD_ADDR_VAR 0 47
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: LD_INT 3
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39054: LD_ADDR_VAR 0 48
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39085: LD_ADDR_VAR 0 49
39089: PUSH
39090: LD_INT 3
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39114: LD_ADDR_VAR 0 50
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39143: LD_ADDR_VAR 0 51
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39174: LD_ADDR_VAR 0 52
39178: PUSH
39179: LD_INT 3
39181: NEG
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 3
39193: NEG
39194: PUSH
39195: LD_INT 2
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39207: LD_ADDR_VAR 0 53
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 3
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 3
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39251: LD_ADDR_VAR 0 54
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39292: LD_ADDR_VAR 0 55
39296: PUSH
39297: LD_INT 3
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 3
39309: PUSH
39310: LD_INT 3
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39332: LD_ADDR_VAR 0 56
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 3
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39373: LD_ADDR_VAR 0 57
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39417: LD_ADDR_VAR 0 58
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 3
39436: NEG
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: LD_INT 3
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39463: LD_ADDR_VAR 0 59
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39507: LD_ADDR_VAR 0 60
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39548: LD_ADDR_VAR 0 61
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39588: LD_ADDR_VAR 0 62
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39629: LD_ADDR_VAR 0 63
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39673: LD_ADDR_VAR 0 64
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: LIST
39718: ST_TO_ADDR
// end ; 2 :
39719: GO 42985
39721: LD_INT 2
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 42984
39729: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39730: LD_ADDR_VAR 0 29
39734: PUSH
39735: LD_INT 4
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 4
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 5
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 5
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 4
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: LD_INT 2
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 5
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 3
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 4
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 4
39860: PUSH
39861: LD_INT 4
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: LD_INT 3
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 4
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 4
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 4
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 3
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 4
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 5
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 5
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 4
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 5
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 3
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 3
40058: NEG
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 4
40069: NEG
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 4
40080: NEG
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 4
40092: NEG
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 4
40115: NEG
40116: PUSH
40117: LD_INT 4
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 4
40127: NEG
40128: PUSH
40129: LD_INT 5
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 3
40139: NEG
40140: PUSH
40141: LD_INT 4
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 3
40151: NEG
40152: PUSH
40153: LD_INT 3
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 4
40163: NEG
40164: PUSH
40165: LD_INT 3
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 5
40175: NEG
40176: PUSH
40177: LD_INT 4
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 5
40187: NEG
40188: PUSH
40189: LD_INT 5
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 3
40199: NEG
40200: PUSH
40201: LD_INT 5
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 5
40211: NEG
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40268: LD_ADDR_VAR 0 30
40272: PUSH
40273: LD_INT 4
40275: PUSH
40276: LD_INT 4
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 4
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 5
40295: PUSH
40296: LD_INT 4
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 5
40305: PUSH
40306: LD_INT 5
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 4
40315: PUSH
40316: LD_INT 5
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: LD_INT 4
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 5
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 5
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 4
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 4
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 3
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: LD_INT 4
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 4
40458: NEG
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 4
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 3
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 4
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 5
40514: NEG
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 5
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 5
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 3
40549: NEG
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: NEG
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 3
40572: NEG
40573: PUSH
40574: LD_INT 4
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: LD_INT 3
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: NEG
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 4
40620: NEG
40621: PUSH
40622: LD_INT 3
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 4
40632: NEG
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 4
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 4
40656: NEG
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 4
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 5
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 4
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 3
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 4
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 5
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: LD_INT 5
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40815: LD_ADDR_VAR 0 31
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 4
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 4
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 5
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 5
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 4
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 3
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 5
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 3
40915: NEG
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 3
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 3
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 4
40971: NEG
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 4
40982: NEG
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 4
40994: NEG
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 4
41017: NEG
41018: PUSH
41019: LD_INT 4
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 4
41029: NEG
41030: PUSH
41031: LD_INT 5
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: LD_INT 4
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 3
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 4
41065: NEG
41066: PUSH
41067: LD_INT 3
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 5
41077: NEG
41078: PUSH
41079: LD_INT 4
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 5
41089: NEG
41090: PUSH
41091: LD_INT 5
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: NEG
41102: PUSH
41103: LD_INT 5
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 5
41113: NEG
41114: PUSH
41115: LD_INT 3
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 4
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 3
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 3
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 4
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: LD_INT 4
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 4
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 4
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 5
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 5
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 4
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 3
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 3
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 5
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41365: LD_ADDR_VAR 0 32
41369: PUSH
41370: LD_INT 4
41372: NEG
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 4
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 4
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 5
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 5
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 5
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 3
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 3
41474: NEG
41475: PUSH
41476: LD_INT 3
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 3
41486: NEG
41487: PUSH
41488: LD_INT 4
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 3
41522: NEG
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 4
41534: NEG
41535: PUSH
41536: LD_INT 3
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 4
41546: NEG
41547: PUSH
41548: LD_INT 4
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: LD_INT 4
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 4
41570: NEG
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 4
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 5
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 4
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 3
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 4
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 5
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 3
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 5
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 3
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 4
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 4
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 4
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 4
41777: PUSH
41778: LD_INT 4
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 4
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 5
41797: PUSH
41798: LD_INT 4
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 5
41807: PUSH
41808: LD_INT 5
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 4
41817: PUSH
41818: LD_INT 5
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: LD_INT 4
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: LD_INT 3
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 5
41847: PUSH
41848: LD_INT 3
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: LD_INT 5
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41912: LD_ADDR_VAR 0 33
41916: PUSH
41917: LD_INT 4
41919: NEG
41920: PUSH
41921: LD_INT 4
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 4
41931: NEG
41932: PUSH
41933: LD_INT 5
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: NEG
41944: PUSH
41945: LD_INT 4
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: LD_INT 3
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 4
41967: NEG
41968: PUSH
41969: LD_INT 3
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 5
41979: NEG
41980: PUSH
41981: LD_INT 4
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 5
41991: NEG
41992: PUSH
41993: LD_INT 5
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 3
42003: NEG
42004: PUSH
42005: LD_INT 5
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 5
42015: NEG
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 3
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 4
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 3
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 3
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 4
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 4
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 4
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 4
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 5
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 5
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 4
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 5
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 4
42242: PUSH
42243: LD_INT 3
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 4
42252: PUSH
42253: LD_INT 4
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 4
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 4
42292: PUSH
42293: LD_INT 2
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 4
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 4
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 4
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 5
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 5
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 4
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 3
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: LD_INT 5
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42450: LD_ADDR_VAR 0 34
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 4
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 5
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 4
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 3
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 4
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 5
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 3
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: LD_INT 5
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 4
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 4
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 4
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 4
42652: PUSH
42653: LD_INT 4
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 4
42662: PUSH
42663: LD_INT 3
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 5
42672: PUSH
42673: LD_INT 4
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 5
42682: PUSH
42683: LD_INT 5
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: LD_INT 5
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: LD_INT 4
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 3
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 5
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: LD_INT 5
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 4
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 4
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 4
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 4
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 4
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 3
42869: NEG
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 4
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 5
42891: NEG
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 5
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 5
42914: NEG
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: ST_TO_ADDR
// end ; end ;
42982: GO 42985
42984: POP
// case btype of b_depot , b_warehouse :
42985: LD_VAR 0 1
42989: PUSH
42990: LD_INT 0
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 43004
42996: LD_INT 1
42998: DOUBLE
42999: EQUAL
43000: IFTRUE 43004
43002: GO 43205
43004: POP
// case nation of nation_american :
43005: LD_VAR 0 5
43009: PUSH
43010: LD_INT 1
43012: DOUBLE
43013: EQUAL
43014: IFTRUE 43018
43016: GO 43074
43018: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43019: LD_ADDR_VAR 0 9
43023: PUSH
43024: LD_VAR 0 11
43028: PUSH
43029: LD_VAR 0 12
43033: PUSH
43034: LD_VAR 0 13
43038: PUSH
43039: LD_VAR 0 14
43043: PUSH
43044: LD_VAR 0 15
43048: PUSH
43049: LD_VAR 0 16
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: PUSH
43062: LD_VAR 0 4
43066: PUSH
43067: LD_INT 1
43069: PLUS
43070: ARRAY
43071: ST_TO_ADDR
43072: GO 43203
43074: LD_INT 2
43076: DOUBLE
43077: EQUAL
43078: IFTRUE 43082
43080: GO 43138
43082: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43083: LD_ADDR_VAR 0 9
43087: PUSH
43088: LD_VAR 0 17
43092: PUSH
43093: LD_VAR 0 18
43097: PUSH
43098: LD_VAR 0 19
43102: PUSH
43103: LD_VAR 0 20
43107: PUSH
43108: LD_VAR 0 21
43112: PUSH
43113: LD_VAR 0 22
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: PUSH
43126: LD_VAR 0 4
43130: PUSH
43131: LD_INT 1
43133: PLUS
43134: ARRAY
43135: ST_TO_ADDR
43136: GO 43203
43138: LD_INT 3
43140: DOUBLE
43141: EQUAL
43142: IFTRUE 43146
43144: GO 43202
43146: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43147: LD_ADDR_VAR 0 9
43151: PUSH
43152: LD_VAR 0 23
43156: PUSH
43157: LD_VAR 0 24
43161: PUSH
43162: LD_VAR 0 25
43166: PUSH
43167: LD_VAR 0 26
43171: PUSH
43172: LD_VAR 0 27
43176: PUSH
43177: LD_VAR 0 28
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: PUSH
43190: LD_VAR 0 4
43194: PUSH
43195: LD_INT 1
43197: PLUS
43198: ARRAY
43199: ST_TO_ADDR
43200: GO 43203
43202: POP
43203: GO 43758
43205: LD_INT 2
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43219
43211: LD_INT 3
43213: DOUBLE
43214: EQUAL
43215: IFTRUE 43219
43217: GO 43275
43219: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43220: LD_ADDR_VAR 0 9
43224: PUSH
43225: LD_VAR 0 29
43229: PUSH
43230: LD_VAR 0 30
43234: PUSH
43235: LD_VAR 0 31
43239: PUSH
43240: LD_VAR 0 32
43244: PUSH
43245: LD_VAR 0 33
43249: PUSH
43250: LD_VAR 0 34
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: PUSH
43263: LD_VAR 0 4
43267: PUSH
43268: LD_INT 1
43270: PLUS
43271: ARRAY
43272: ST_TO_ADDR
43273: GO 43758
43275: LD_INT 16
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43337
43281: LD_INT 17
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43337
43287: LD_INT 18
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43337
43293: LD_INT 19
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43337
43299: LD_INT 22
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43337
43305: LD_INT 20
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43337
43311: LD_INT 21
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43337
43317: LD_INT 23
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43337
43323: LD_INT 24
43325: DOUBLE
43326: EQUAL
43327: IFTRUE 43337
43329: LD_INT 25
43331: DOUBLE
43332: EQUAL
43333: IFTRUE 43337
43335: GO 43393
43337: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43338: LD_ADDR_VAR 0 9
43342: PUSH
43343: LD_VAR 0 35
43347: PUSH
43348: LD_VAR 0 36
43352: PUSH
43353: LD_VAR 0 37
43357: PUSH
43358: LD_VAR 0 38
43362: PUSH
43363: LD_VAR 0 39
43367: PUSH
43368: LD_VAR 0 40
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: PUSH
43381: LD_VAR 0 4
43385: PUSH
43386: LD_INT 1
43388: PLUS
43389: ARRAY
43390: ST_TO_ADDR
43391: GO 43758
43393: LD_INT 6
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43449
43399: LD_INT 7
43401: DOUBLE
43402: EQUAL
43403: IFTRUE 43449
43405: LD_INT 8
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43449
43411: LD_INT 13
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43449
43417: LD_INT 12
43419: DOUBLE
43420: EQUAL
43421: IFTRUE 43449
43423: LD_INT 15
43425: DOUBLE
43426: EQUAL
43427: IFTRUE 43449
43429: LD_INT 11
43431: DOUBLE
43432: EQUAL
43433: IFTRUE 43449
43435: LD_INT 14
43437: DOUBLE
43438: EQUAL
43439: IFTRUE 43449
43441: LD_INT 10
43443: DOUBLE
43444: EQUAL
43445: IFTRUE 43449
43447: GO 43505
43449: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43450: LD_ADDR_VAR 0 9
43454: PUSH
43455: LD_VAR 0 41
43459: PUSH
43460: LD_VAR 0 42
43464: PUSH
43465: LD_VAR 0 43
43469: PUSH
43470: LD_VAR 0 44
43474: PUSH
43475: LD_VAR 0 45
43479: PUSH
43480: LD_VAR 0 46
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: PUSH
43493: LD_VAR 0 4
43497: PUSH
43498: LD_INT 1
43500: PLUS
43501: ARRAY
43502: ST_TO_ADDR
43503: GO 43758
43505: LD_INT 36
43507: DOUBLE
43508: EQUAL
43509: IFTRUE 43513
43511: GO 43569
43513: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43514: LD_ADDR_VAR 0 9
43518: PUSH
43519: LD_VAR 0 47
43523: PUSH
43524: LD_VAR 0 48
43528: PUSH
43529: LD_VAR 0 49
43533: PUSH
43534: LD_VAR 0 50
43538: PUSH
43539: LD_VAR 0 51
43543: PUSH
43544: LD_VAR 0 52
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: PUSH
43557: LD_VAR 0 4
43561: PUSH
43562: LD_INT 1
43564: PLUS
43565: ARRAY
43566: ST_TO_ADDR
43567: GO 43758
43569: LD_INT 4
43571: DOUBLE
43572: EQUAL
43573: IFTRUE 43595
43575: LD_INT 5
43577: DOUBLE
43578: EQUAL
43579: IFTRUE 43595
43581: LD_INT 34
43583: DOUBLE
43584: EQUAL
43585: IFTRUE 43595
43587: LD_INT 37
43589: DOUBLE
43590: EQUAL
43591: IFTRUE 43595
43593: GO 43651
43595: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43596: LD_ADDR_VAR 0 9
43600: PUSH
43601: LD_VAR 0 53
43605: PUSH
43606: LD_VAR 0 54
43610: PUSH
43611: LD_VAR 0 55
43615: PUSH
43616: LD_VAR 0 56
43620: PUSH
43621: LD_VAR 0 57
43625: PUSH
43626: LD_VAR 0 58
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: PUSH
43639: LD_VAR 0 4
43643: PUSH
43644: LD_INT 1
43646: PLUS
43647: ARRAY
43648: ST_TO_ADDR
43649: GO 43758
43651: LD_INT 31
43653: DOUBLE
43654: EQUAL
43655: IFTRUE 43701
43657: LD_INT 32
43659: DOUBLE
43660: EQUAL
43661: IFTRUE 43701
43663: LD_INT 33
43665: DOUBLE
43666: EQUAL
43667: IFTRUE 43701
43669: LD_INT 27
43671: DOUBLE
43672: EQUAL
43673: IFTRUE 43701
43675: LD_INT 26
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43701
43681: LD_INT 28
43683: DOUBLE
43684: EQUAL
43685: IFTRUE 43701
43687: LD_INT 29
43689: DOUBLE
43690: EQUAL
43691: IFTRUE 43701
43693: LD_INT 30
43695: DOUBLE
43696: EQUAL
43697: IFTRUE 43701
43699: GO 43757
43701: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43702: LD_ADDR_VAR 0 9
43706: PUSH
43707: LD_VAR 0 59
43711: PUSH
43712: LD_VAR 0 60
43716: PUSH
43717: LD_VAR 0 61
43721: PUSH
43722: LD_VAR 0 62
43726: PUSH
43727: LD_VAR 0 63
43731: PUSH
43732: LD_VAR 0 64
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: PUSH
43745: LD_VAR 0 4
43749: PUSH
43750: LD_INT 1
43752: PLUS
43753: ARRAY
43754: ST_TO_ADDR
43755: GO 43758
43757: POP
// temp_list2 = [ ] ;
43758: LD_ADDR_VAR 0 10
43762: PUSH
43763: EMPTY
43764: ST_TO_ADDR
// for i in temp_list do
43765: LD_ADDR_VAR 0 8
43769: PUSH
43770: LD_VAR 0 9
43774: PUSH
43775: FOR_IN
43776: IFFALSE 43828
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43778: LD_ADDR_VAR 0 10
43782: PUSH
43783: LD_VAR 0 10
43787: PUSH
43788: LD_VAR 0 8
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: PUSH
43797: LD_VAR 0 2
43801: PLUS
43802: PUSH
43803: LD_VAR 0 8
43807: PUSH
43808: LD_INT 2
43810: ARRAY
43811: PUSH
43812: LD_VAR 0 3
43816: PLUS
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: EMPTY
43823: LIST
43824: ADD
43825: ST_TO_ADDR
43826: GO 43775
43828: POP
43829: POP
// result = temp_list2 ;
43830: LD_ADDR_VAR 0 7
43834: PUSH
43835: LD_VAR 0 10
43839: ST_TO_ADDR
// end ;
43840: LD_VAR 0 7
43844: RET
// export function EnemyInRange ( unit , dist ) ; begin
43845: LD_INT 0
43847: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: CALL_OW 255
43862: PPUSH
43863: LD_VAR 0 1
43867: PPUSH
43868: CALL_OW 250
43872: PPUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 251
43882: PPUSH
43883: LD_VAR 0 2
43887: PPUSH
43888: CALL 17102 0 4
43892: PUSH
43893: LD_INT 4
43895: ARRAY
43896: ST_TO_ADDR
// end ;
43897: LD_VAR 0 3
43901: RET
// export function PlayerSeeMe ( unit ) ; begin
43902: LD_INT 0
43904: PPUSH
// result := See ( your_side , unit ) ;
43905: LD_ADDR_VAR 0 2
43909: PUSH
43910: LD_OWVAR 2
43914: PPUSH
43915: LD_VAR 0 1
43919: PPUSH
43920: CALL_OW 292
43924: ST_TO_ADDR
// end ;
43925: LD_VAR 0 2
43929: RET
// export function ReverseDir ( unit ) ; begin
43930: LD_INT 0
43932: PPUSH
// if not unit then
43933: LD_VAR 0 1
43937: NOT
43938: IFFALSE 43942
// exit ;
43940: GO 43965
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43942: LD_ADDR_VAR 0 2
43946: PUSH
43947: LD_VAR 0 1
43951: PPUSH
43952: CALL_OW 254
43956: PUSH
43957: LD_INT 3
43959: PLUS
43960: PUSH
43961: LD_INT 6
43963: MOD
43964: ST_TO_ADDR
// end ;
43965: LD_VAR 0 2
43969: RET
// export function ReverseArray ( array ) ; var i ; begin
43970: LD_INT 0
43972: PPUSH
43973: PPUSH
// if not array then
43974: LD_VAR 0 1
43978: NOT
43979: IFFALSE 43983
// exit ;
43981: GO 44038
// result := [ ] ;
43983: LD_ADDR_VAR 0 2
43987: PUSH
43988: EMPTY
43989: ST_TO_ADDR
// for i := array downto 1 do
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: DOUBLE
43996: LD_VAR 0 1
44000: INC
44001: ST_TO_ADDR
44002: LD_INT 1
44004: PUSH
44005: FOR_DOWNTO
44006: IFFALSE 44036
// result := Join ( result , array [ i ] ) ;
44008: LD_ADDR_VAR 0 2
44012: PUSH
44013: LD_VAR 0 2
44017: PPUSH
44018: LD_VAR 0 1
44022: PUSH
44023: LD_VAR 0 3
44027: ARRAY
44028: PPUSH
44029: CALL 48880 0 2
44033: ST_TO_ADDR
44034: GO 44005
44036: POP
44037: POP
// end ;
44038: LD_VAR 0 2
44042: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44043: LD_INT 0
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
// if not unit or not hexes then
44051: LD_VAR 0 1
44055: NOT
44056: IFTRUE 44065
44058: PUSH
44059: LD_VAR 0 2
44063: NOT
44064: OR
44065: IFFALSE 44069
// exit ;
44067: GO 44192
// dist := 9999 ;
44069: LD_ADDR_VAR 0 5
44073: PUSH
44074: LD_INT 9999
44076: ST_TO_ADDR
// for i = 1 to hexes do
44077: LD_ADDR_VAR 0 4
44081: PUSH
44082: DOUBLE
44083: LD_INT 1
44085: DEC
44086: ST_TO_ADDR
44087: LD_VAR 0 2
44091: PUSH
44092: FOR_TO
44093: IFFALSE 44180
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44095: LD_ADDR_VAR 0 6
44099: PUSH
44100: LD_VAR 0 1
44104: PPUSH
44105: LD_VAR 0 2
44109: PUSH
44110: LD_VAR 0 4
44114: ARRAY
44115: PUSH
44116: LD_INT 1
44118: ARRAY
44119: PPUSH
44120: LD_VAR 0 2
44124: PUSH
44125: LD_VAR 0 4
44129: ARRAY
44130: PUSH
44131: LD_INT 2
44133: ARRAY
44134: PPUSH
44135: CALL_OW 297
44139: ST_TO_ADDR
// if tdist < dist then
44140: LD_VAR 0 6
44144: PUSH
44145: LD_VAR 0 5
44149: LESS
44150: IFFALSE 44178
// begin hex := hexes [ i ] ;
44152: LD_ADDR_VAR 0 8
44156: PUSH
44157: LD_VAR 0 2
44161: PUSH
44162: LD_VAR 0 4
44166: ARRAY
44167: ST_TO_ADDR
// dist := tdist ;
44168: LD_ADDR_VAR 0 5
44172: PUSH
44173: LD_VAR 0 6
44177: ST_TO_ADDR
// end ; end ;
44178: GO 44092
44180: POP
44181: POP
// result := hex ;
44182: LD_ADDR_VAR 0 3
44186: PUSH
44187: LD_VAR 0 8
44191: ST_TO_ADDR
// end ;
44192: LD_VAR 0 3
44196: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44197: LD_INT 0
44199: PPUSH
44200: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44201: LD_VAR 0 1
44205: NOT
44206: IFTRUE 44245
44208: PUSH
44209: LD_VAR 0 1
44213: PUSH
44214: LD_INT 21
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 23
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PPUSH
44238: CALL_OW 69
44242: IN
44243: NOT
44244: OR
44245: IFFALSE 44249
// exit ;
44247: GO 44296
// for i = 1 to 3 do
44249: LD_ADDR_VAR 0 3
44253: PUSH
44254: DOUBLE
44255: LD_INT 1
44257: DEC
44258: ST_TO_ADDR
44259: LD_INT 3
44261: PUSH
44262: FOR_TO
44263: IFFALSE 44294
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44265: LD_VAR 0 1
44269: PPUSH
44270: CALL_OW 250
44274: PPUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 251
44284: PPUSH
44285: LD_INT 1
44287: PPUSH
44288: CALL_OW 453
44292: GO 44262
44294: POP
44295: POP
// end ;
44296: LD_VAR 0 2
44300: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44301: LD_INT 0
44303: PPUSH
44304: PPUSH
44305: PPUSH
44306: PPUSH
44307: PPUSH
44308: PPUSH
// if not unit or not enemy_unit then
44309: LD_VAR 0 1
44313: NOT
44314: IFTRUE 44323
44316: PUSH
44317: LD_VAR 0 2
44321: NOT
44322: OR
44323: IFFALSE 44327
// exit ;
44325: GO 44798
// if GetLives ( i ) < 250 then
44327: LD_VAR 0 4
44331: PPUSH
44332: CALL_OW 256
44336: PUSH
44337: LD_INT 250
44339: LESS
44340: IFFALSE 44353
// begin ComAutodestruct ( i ) ;
44342: LD_VAR 0 4
44346: PPUSH
44347: CALL 44197 0 1
// exit ;
44351: GO 44798
// end ; x := GetX ( enemy_unit ) ;
44353: LD_ADDR_VAR 0 7
44357: PUSH
44358: LD_VAR 0 2
44362: PPUSH
44363: CALL_OW 250
44367: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44368: LD_ADDR_VAR 0 8
44372: PUSH
44373: LD_VAR 0 2
44377: PPUSH
44378: CALL_OW 251
44382: ST_TO_ADDR
// if not x or not y then
44383: LD_VAR 0 7
44387: NOT
44388: IFTRUE 44397
44390: PUSH
44391: LD_VAR 0 8
44395: NOT
44396: OR
44397: IFFALSE 44401
// exit ;
44399: GO 44798
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44401: LD_ADDR_VAR 0 6
44405: PUSH
44406: LD_VAR 0 7
44410: PPUSH
44411: LD_INT 0
44413: PPUSH
44414: LD_INT 4
44416: PPUSH
44417: CALL_OW 272
44421: PUSH
44422: LD_VAR 0 8
44426: PPUSH
44427: LD_INT 0
44429: PPUSH
44430: LD_INT 4
44432: PPUSH
44433: CALL_OW 273
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_VAR 0 7
44446: PPUSH
44447: LD_INT 1
44449: PPUSH
44450: LD_INT 4
44452: PPUSH
44453: CALL_OW 272
44457: PUSH
44458: LD_VAR 0 8
44462: PPUSH
44463: LD_INT 1
44465: PPUSH
44466: LD_INT 4
44468: PPUSH
44469: CALL_OW 273
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_VAR 0 7
44482: PPUSH
44483: LD_INT 2
44485: PPUSH
44486: LD_INT 4
44488: PPUSH
44489: CALL_OW 272
44493: PUSH
44494: LD_VAR 0 8
44498: PPUSH
44499: LD_INT 2
44501: PPUSH
44502: LD_INT 4
44504: PPUSH
44505: CALL_OW 273
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_VAR 0 7
44518: PPUSH
44519: LD_INT 3
44521: PPUSH
44522: LD_INT 4
44524: PPUSH
44525: CALL_OW 272
44529: PUSH
44530: LD_VAR 0 8
44534: PPUSH
44535: LD_INT 3
44537: PPUSH
44538: LD_INT 4
44540: PPUSH
44541: CALL_OW 273
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_VAR 0 7
44554: PPUSH
44555: LD_INT 4
44557: PPUSH
44558: LD_INT 4
44560: PPUSH
44561: CALL_OW 272
44565: PUSH
44566: LD_VAR 0 8
44570: PPUSH
44571: LD_INT 4
44573: PPUSH
44574: LD_INT 4
44576: PPUSH
44577: CALL_OW 273
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_VAR 0 7
44590: PPUSH
44591: LD_INT 5
44593: PPUSH
44594: LD_INT 4
44596: PPUSH
44597: CALL_OW 272
44601: PUSH
44602: LD_VAR 0 8
44606: PPUSH
44607: LD_INT 5
44609: PPUSH
44610: LD_INT 4
44612: PPUSH
44613: CALL_OW 273
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: ST_TO_ADDR
// for i = tmp downto 1 do
44630: LD_ADDR_VAR 0 4
44634: PUSH
44635: DOUBLE
44636: LD_VAR 0 6
44640: INC
44641: ST_TO_ADDR
44642: LD_INT 1
44644: PUSH
44645: FOR_DOWNTO
44646: IFFALSE 44749
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44648: LD_VAR 0 6
44652: PUSH
44653: LD_VAR 0 4
44657: ARRAY
44658: PUSH
44659: LD_INT 1
44661: ARRAY
44662: PPUSH
44663: LD_VAR 0 6
44667: PUSH
44668: LD_VAR 0 4
44672: ARRAY
44673: PUSH
44674: LD_INT 2
44676: ARRAY
44677: PPUSH
44678: CALL_OW 488
44682: NOT
44683: IFTRUE 44725
44685: PUSH
44686: LD_VAR 0 6
44690: PUSH
44691: LD_VAR 0 4
44695: ARRAY
44696: PUSH
44697: LD_INT 1
44699: ARRAY
44700: PPUSH
44701: LD_VAR 0 6
44705: PUSH
44706: LD_VAR 0 4
44710: ARRAY
44711: PUSH
44712: LD_INT 2
44714: ARRAY
44715: PPUSH
44716: CALL_OW 428
44720: PUSH
44721: LD_INT 0
44723: NONEQUAL
44724: OR
44725: IFFALSE 44747
// tmp := Delete ( tmp , i ) ;
44727: LD_ADDR_VAR 0 6
44731: PUSH
44732: LD_VAR 0 6
44736: PPUSH
44737: LD_VAR 0 4
44741: PPUSH
44742: CALL_OW 3
44746: ST_TO_ADDR
44747: GO 44645
44749: POP
44750: POP
// j := GetClosestHex ( unit , tmp ) ;
44751: LD_ADDR_VAR 0 5
44755: PUSH
44756: LD_VAR 0 1
44760: PPUSH
44761: LD_VAR 0 6
44765: PPUSH
44766: CALL 44043 0 2
44770: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44771: LD_VAR 0 1
44775: PPUSH
44776: LD_VAR 0 5
44780: PUSH
44781: LD_INT 1
44783: ARRAY
44784: PPUSH
44785: LD_VAR 0 5
44789: PUSH
44790: LD_INT 2
44792: ARRAY
44793: PPUSH
44794: CALL_OW 111
// end ;
44798: LD_VAR 0 3
44802: RET
// export function PrepareApemanSoldier ( ) ; begin
44803: LD_INT 0
44805: PPUSH
// uc_nation := 0 ;
44806: LD_ADDR_OWVAR 21
44810: PUSH
44811: LD_INT 0
44813: ST_TO_ADDR
// hc_sex := sex_male ;
44814: LD_ADDR_OWVAR 27
44818: PUSH
44819: LD_INT 1
44821: ST_TO_ADDR
// hc_name :=  ;
44822: LD_ADDR_OWVAR 26
44826: PUSH
44827: LD_STRING 
44829: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44830: LD_ADDR_OWVAR 28
44834: PUSH
44835: LD_INT 15
44837: ST_TO_ADDR
// hc_gallery :=  ;
44838: LD_ADDR_OWVAR 33
44842: PUSH
44843: LD_STRING 
44845: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44846: LD_ADDR_OWVAR 31
44850: PUSH
44851: LD_INT 0
44853: PPUSH
44854: LD_INT 3
44856: PPUSH
44857: CALL_OW 12
44861: PUSH
44862: LD_INT 0
44864: PPUSH
44865: LD_INT 3
44867: PPUSH
44868: CALL_OW 12
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44885: LD_ADDR_OWVAR 29
44889: PUSH
44890: LD_INT 12
44892: PUSH
44893: LD_INT 12
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// end ;
44900: LD_VAR 0 1
44904: RET
// export function PrepareApemanEngineer ( ) ; begin
44905: LD_INT 0
44907: PPUSH
// uc_nation := 0 ;
44908: LD_ADDR_OWVAR 21
44912: PUSH
44913: LD_INT 0
44915: ST_TO_ADDR
// hc_sex := sex_male ;
44916: LD_ADDR_OWVAR 27
44920: PUSH
44921: LD_INT 1
44923: ST_TO_ADDR
// hc_name :=  ;
44924: LD_ADDR_OWVAR 26
44928: PUSH
44929: LD_STRING 
44931: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44932: LD_ADDR_OWVAR 28
44936: PUSH
44937: LD_INT 16
44939: ST_TO_ADDR
// hc_gallery :=  ;
44940: LD_ADDR_OWVAR 33
44944: PUSH
44945: LD_STRING 
44947: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44948: LD_ADDR_OWVAR 31
44952: PUSH
44953: LD_INT 0
44955: PPUSH
44956: LD_INT 3
44958: PPUSH
44959: CALL_OW 12
44963: PUSH
44964: LD_INT 0
44966: PPUSH
44967: LD_INT 3
44969: PPUSH
44970: CALL_OW 12
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44987: LD_ADDR_OWVAR 29
44991: PUSH
44992: LD_INT 12
44994: PUSH
44995: LD_INT 12
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: ST_TO_ADDR
// end ;
45002: LD_VAR 0 1
45006: RET
// export function PrepareApeman ( agressivity ) ; begin
45007: LD_INT 0
45009: PPUSH
// uc_side := 0 ;
45010: LD_ADDR_OWVAR 20
45014: PUSH
45015: LD_INT 0
45017: ST_TO_ADDR
// uc_nation := 0 ;
45018: LD_ADDR_OWVAR 21
45022: PUSH
45023: LD_INT 0
45025: ST_TO_ADDR
// hc_sex := sex_male ;
45026: LD_ADDR_OWVAR 27
45030: PUSH
45031: LD_INT 1
45033: ST_TO_ADDR
// hc_class := class_apeman ;
45034: LD_ADDR_OWVAR 28
45038: PUSH
45039: LD_INT 12
45041: ST_TO_ADDR
// hc_gallery :=  ;
45042: LD_ADDR_OWVAR 33
45046: PUSH
45047: LD_STRING 
45049: ST_TO_ADDR
// hc_name :=  ;
45050: LD_ADDR_OWVAR 26
45054: PUSH
45055: LD_STRING 
45057: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45058: LD_ADDR_OWVAR 29
45062: PUSH
45063: LD_INT 12
45065: PUSH
45066: LD_INT 12
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// if agressivity = 0 then
45073: LD_VAR 0 1
45077: PUSH
45078: LD_INT 0
45080: EQUAL
45081: IFFALSE 45093
// hc_agressivity := 0 else
45083: LD_ADDR_OWVAR 35
45087: PUSH
45088: LD_INT 0
45090: ST_TO_ADDR
45091: GO 45114
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45093: LD_ADDR_OWVAR 35
45097: PUSH
45098: LD_VAR 0 1
45102: NEG
45103: PPUSH
45104: LD_VAR 0 1
45108: PPUSH
45109: CALL_OW 12
45113: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45114: LD_ADDR_OWVAR 31
45118: PUSH
45119: LD_INT 0
45121: PPUSH
45122: LD_INT 3
45124: PPUSH
45125: CALL_OW 12
45129: PUSH
45130: LD_INT 0
45132: PPUSH
45133: LD_INT 3
45135: PPUSH
45136: CALL_OW 12
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: ST_TO_ADDR
// end ;
45153: LD_VAR 0 2
45157: RET
// export function PrepareTiger ( agressivity ) ; begin
45158: LD_INT 0
45160: PPUSH
// uc_side := 0 ;
45161: LD_ADDR_OWVAR 20
45165: PUSH
45166: LD_INT 0
45168: ST_TO_ADDR
// uc_nation := 0 ;
45169: LD_ADDR_OWVAR 21
45173: PUSH
45174: LD_INT 0
45176: ST_TO_ADDR
// InitHc ;
45177: CALL_OW 19
// hc_class := class_tiger ;
45181: LD_ADDR_OWVAR 28
45185: PUSH
45186: LD_INT 14
45188: ST_TO_ADDR
// hc_gallery :=  ;
45189: LD_ADDR_OWVAR 33
45193: PUSH
45194: LD_STRING 
45196: ST_TO_ADDR
// hc_name :=  ;
45197: LD_ADDR_OWVAR 26
45201: PUSH
45202: LD_STRING 
45204: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45205: LD_ADDR_OWVAR 35
45209: PUSH
45210: LD_VAR 0 1
45214: NEG
45215: PPUSH
45216: LD_VAR 0 1
45220: PPUSH
45221: CALL_OW 12
45225: ST_TO_ADDR
// end ;
45226: LD_VAR 0 2
45230: RET
// export function PrepareEnchidna ( ) ; begin
45231: LD_INT 0
45233: PPUSH
// uc_side := 0 ;
45234: LD_ADDR_OWVAR 20
45238: PUSH
45239: LD_INT 0
45241: ST_TO_ADDR
// uc_nation := 0 ;
45242: LD_ADDR_OWVAR 21
45246: PUSH
45247: LD_INT 0
45249: ST_TO_ADDR
// InitHc ;
45250: CALL_OW 19
// hc_class := class_baggie ;
45254: LD_ADDR_OWVAR 28
45258: PUSH
45259: LD_INT 13
45261: ST_TO_ADDR
// hc_gallery :=  ;
45262: LD_ADDR_OWVAR 33
45266: PUSH
45267: LD_STRING 
45269: ST_TO_ADDR
// hc_name :=  ;
45270: LD_ADDR_OWVAR 26
45274: PUSH
45275: LD_STRING 
45277: ST_TO_ADDR
// end ;
45278: LD_VAR 0 1
45282: RET
// export function PrepareFrog ( ) ; begin
45283: LD_INT 0
45285: PPUSH
// uc_side := 0 ;
45286: LD_ADDR_OWVAR 20
45290: PUSH
45291: LD_INT 0
45293: ST_TO_ADDR
// uc_nation := 0 ;
45294: LD_ADDR_OWVAR 21
45298: PUSH
45299: LD_INT 0
45301: ST_TO_ADDR
// InitHc ;
45302: CALL_OW 19
// hc_class := class_frog ;
45306: LD_ADDR_OWVAR 28
45310: PUSH
45311: LD_INT 19
45313: ST_TO_ADDR
// hc_gallery :=  ;
45314: LD_ADDR_OWVAR 33
45318: PUSH
45319: LD_STRING 
45321: ST_TO_ADDR
// hc_name :=  ;
45322: LD_ADDR_OWVAR 26
45326: PUSH
45327: LD_STRING 
45329: ST_TO_ADDR
// end ;
45330: LD_VAR 0 1
45334: RET
// export function PrepareFish ( ) ; begin
45335: LD_INT 0
45337: PPUSH
// uc_side := 0 ;
45338: LD_ADDR_OWVAR 20
45342: PUSH
45343: LD_INT 0
45345: ST_TO_ADDR
// uc_nation := 0 ;
45346: LD_ADDR_OWVAR 21
45350: PUSH
45351: LD_INT 0
45353: ST_TO_ADDR
// InitHc ;
45354: CALL_OW 19
// hc_class := class_fish ;
45358: LD_ADDR_OWVAR 28
45362: PUSH
45363: LD_INT 20
45365: ST_TO_ADDR
// hc_gallery :=  ;
45366: LD_ADDR_OWVAR 33
45370: PUSH
45371: LD_STRING 
45373: ST_TO_ADDR
// hc_name :=  ;
45374: LD_ADDR_OWVAR 26
45378: PUSH
45379: LD_STRING 
45381: ST_TO_ADDR
// end ;
45382: LD_VAR 0 1
45386: RET
// export function PrepareBird ( ) ; begin
45387: LD_INT 0
45389: PPUSH
// uc_side := 0 ;
45390: LD_ADDR_OWVAR 20
45394: PUSH
45395: LD_INT 0
45397: ST_TO_ADDR
// uc_nation := 0 ;
45398: LD_ADDR_OWVAR 21
45402: PUSH
45403: LD_INT 0
45405: ST_TO_ADDR
// InitHc ;
45406: CALL_OW 19
// hc_class := class_phororhacos ;
45410: LD_ADDR_OWVAR 28
45414: PUSH
45415: LD_INT 18
45417: ST_TO_ADDR
// hc_gallery :=  ;
45418: LD_ADDR_OWVAR 33
45422: PUSH
45423: LD_STRING 
45425: ST_TO_ADDR
// hc_name :=  ;
45426: LD_ADDR_OWVAR 26
45430: PUSH
45431: LD_STRING 
45433: ST_TO_ADDR
// end ;
45434: LD_VAR 0 1
45438: RET
// export function PrepareHorse ( ) ; begin
45439: LD_INT 0
45441: PPUSH
// uc_side := 0 ;
45442: LD_ADDR_OWVAR 20
45446: PUSH
45447: LD_INT 0
45449: ST_TO_ADDR
// uc_nation := 0 ;
45450: LD_ADDR_OWVAR 21
45454: PUSH
45455: LD_INT 0
45457: ST_TO_ADDR
// InitHc ;
45458: CALL_OW 19
// hc_class := class_horse ;
45462: LD_ADDR_OWVAR 28
45466: PUSH
45467: LD_INT 21
45469: ST_TO_ADDR
// hc_gallery :=  ;
45470: LD_ADDR_OWVAR 33
45474: PUSH
45475: LD_STRING 
45477: ST_TO_ADDR
// hc_name :=  ;
45478: LD_ADDR_OWVAR 26
45482: PUSH
45483: LD_STRING 
45485: ST_TO_ADDR
// end ;
45486: LD_VAR 0 1
45490: RET
// export function PrepareMastodont ( ) ; begin
45491: LD_INT 0
45493: PPUSH
// uc_side := 0 ;
45494: LD_ADDR_OWVAR 20
45498: PUSH
45499: LD_INT 0
45501: ST_TO_ADDR
// uc_nation := 0 ;
45502: LD_ADDR_OWVAR 21
45506: PUSH
45507: LD_INT 0
45509: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45510: LD_ADDR_OWVAR 37
45514: PUSH
45515: LD_INT 31
45517: ST_TO_ADDR
// vc_control := control_rider ;
45518: LD_ADDR_OWVAR 38
45522: PUSH
45523: LD_INT 4
45525: ST_TO_ADDR
// end ;
45526: LD_VAR 0 1
45530: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45531: LD_INT 0
45533: PPUSH
45534: PPUSH
45535: PPUSH
// uc_side = 0 ;
45536: LD_ADDR_OWVAR 20
45540: PUSH
45541: LD_INT 0
45543: ST_TO_ADDR
// uc_nation = 0 ;
45544: LD_ADDR_OWVAR 21
45548: PUSH
45549: LD_INT 0
45551: ST_TO_ADDR
// InitHc_All ( ) ;
45552: CALL_OW 584
// InitVc ;
45556: CALL_OW 20
// if mastodonts then
45560: LD_VAR 0 6
45564: IFFALSE 45631
// for i = 1 to mastodonts do
45566: LD_ADDR_VAR 0 11
45570: PUSH
45571: DOUBLE
45572: LD_INT 1
45574: DEC
45575: ST_TO_ADDR
45576: LD_VAR 0 6
45580: PUSH
45581: FOR_TO
45582: IFFALSE 45629
// begin vc_chassis := 31 ;
45584: LD_ADDR_OWVAR 37
45588: PUSH
45589: LD_INT 31
45591: ST_TO_ADDR
// vc_control := control_rider ;
45592: LD_ADDR_OWVAR 38
45596: PUSH
45597: LD_INT 4
45599: ST_TO_ADDR
// animal := CreateVehicle ;
45600: LD_ADDR_VAR 0 12
45604: PUSH
45605: CALL_OW 45
45609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45610: LD_VAR 0 12
45614: PPUSH
45615: LD_VAR 0 8
45619: PPUSH
45620: LD_INT 0
45622: PPUSH
45623: CALL 47773 0 3
// end ;
45627: GO 45581
45629: POP
45630: POP
// if horses then
45631: LD_VAR 0 5
45635: IFFALSE 45702
// for i = 1 to horses do
45637: LD_ADDR_VAR 0 11
45641: PUSH
45642: DOUBLE
45643: LD_INT 1
45645: DEC
45646: ST_TO_ADDR
45647: LD_VAR 0 5
45651: PUSH
45652: FOR_TO
45653: IFFALSE 45700
// begin hc_class := 21 ;
45655: LD_ADDR_OWVAR 28
45659: PUSH
45660: LD_INT 21
45662: ST_TO_ADDR
// hc_gallery :=  ;
45663: LD_ADDR_OWVAR 33
45667: PUSH
45668: LD_STRING 
45670: ST_TO_ADDR
// animal := CreateHuman ;
45671: LD_ADDR_VAR 0 12
45675: PUSH
45676: CALL_OW 44
45680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45681: LD_VAR 0 12
45685: PPUSH
45686: LD_VAR 0 8
45690: PPUSH
45691: LD_INT 0
45693: PPUSH
45694: CALL 47773 0 3
// end ;
45698: GO 45652
45700: POP
45701: POP
// if birds then
45702: LD_VAR 0 1
45706: IFFALSE 45773
// for i = 1 to birds do
45708: LD_ADDR_VAR 0 11
45712: PUSH
45713: DOUBLE
45714: LD_INT 1
45716: DEC
45717: ST_TO_ADDR
45718: LD_VAR 0 1
45722: PUSH
45723: FOR_TO
45724: IFFALSE 45771
// begin hc_class := 18 ;
45726: LD_ADDR_OWVAR 28
45730: PUSH
45731: LD_INT 18
45733: ST_TO_ADDR
// hc_gallery =  ;
45734: LD_ADDR_OWVAR 33
45738: PUSH
45739: LD_STRING 
45741: ST_TO_ADDR
// animal := CreateHuman ;
45742: LD_ADDR_VAR 0 12
45746: PUSH
45747: CALL_OW 44
45751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45752: LD_VAR 0 12
45756: PPUSH
45757: LD_VAR 0 8
45761: PPUSH
45762: LD_INT 0
45764: PPUSH
45765: CALL 47773 0 3
// end ;
45769: GO 45723
45771: POP
45772: POP
// if tigers then
45773: LD_VAR 0 2
45777: IFFALSE 45861
// for i = 1 to tigers do
45779: LD_ADDR_VAR 0 11
45783: PUSH
45784: DOUBLE
45785: LD_INT 1
45787: DEC
45788: ST_TO_ADDR
45789: LD_VAR 0 2
45793: PUSH
45794: FOR_TO
45795: IFFALSE 45859
// begin hc_class = class_tiger ;
45797: LD_ADDR_OWVAR 28
45801: PUSH
45802: LD_INT 14
45804: ST_TO_ADDR
// hc_gallery =  ;
45805: LD_ADDR_OWVAR 33
45809: PUSH
45810: LD_STRING 
45812: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45813: LD_ADDR_OWVAR 35
45817: PUSH
45818: LD_INT 7
45820: NEG
45821: PPUSH
45822: LD_INT 7
45824: PPUSH
45825: CALL_OW 12
45829: ST_TO_ADDR
// animal := CreateHuman ;
45830: LD_ADDR_VAR 0 12
45834: PUSH
45835: CALL_OW 44
45839: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45840: LD_VAR 0 12
45844: PPUSH
45845: LD_VAR 0 8
45849: PPUSH
45850: LD_INT 0
45852: PPUSH
45853: CALL 47773 0 3
// end ;
45857: GO 45794
45859: POP
45860: POP
// if apemans then
45861: LD_VAR 0 3
45865: IFFALSE 45988
// for i = 1 to apemans do
45867: LD_ADDR_VAR 0 11
45871: PUSH
45872: DOUBLE
45873: LD_INT 1
45875: DEC
45876: ST_TO_ADDR
45877: LD_VAR 0 3
45881: PUSH
45882: FOR_TO
45883: IFFALSE 45986
// begin hc_class = class_apeman ;
45885: LD_ADDR_OWVAR 28
45889: PUSH
45890: LD_INT 12
45892: ST_TO_ADDR
// hc_gallery =  ;
45893: LD_ADDR_OWVAR 33
45897: PUSH
45898: LD_STRING 
45900: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45901: LD_ADDR_OWVAR 35
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PPUSH
45910: LD_INT 2
45912: PPUSH
45913: CALL_OW 12
45917: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45918: LD_ADDR_OWVAR 31
45922: PUSH
45923: LD_INT 1
45925: PPUSH
45926: LD_INT 3
45928: PPUSH
45929: CALL_OW 12
45933: PUSH
45934: LD_INT 1
45936: PPUSH
45937: LD_INT 3
45939: PPUSH
45940: CALL_OW 12
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// animal := CreateHuman ;
45957: LD_ADDR_VAR 0 12
45961: PUSH
45962: CALL_OW 44
45966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45967: LD_VAR 0 12
45971: PPUSH
45972: LD_VAR 0 8
45976: PPUSH
45977: LD_INT 0
45979: PPUSH
45980: CALL 47773 0 3
// end ;
45984: GO 45882
45986: POP
45987: POP
// if enchidnas then
45988: LD_VAR 0 4
45992: IFFALSE 46059
// for i = 1 to enchidnas do
45994: LD_ADDR_VAR 0 11
45998: PUSH
45999: DOUBLE
46000: LD_INT 1
46002: DEC
46003: ST_TO_ADDR
46004: LD_VAR 0 4
46008: PUSH
46009: FOR_TO
46010: IFFALSE 46057
// begin hc_class = 13 ;
46012: LD_ADDR_OWVAR 28
46016: PUSH
46017: LD_INT 13
46019: ST_TO_ADDR
// hc_gallery =  ;
46020: LD_ADDR_OWVAR 33
46024: PUSH
46025: LD_STRING 
46027: ST_TO_ADDR
// animal := CreateHuman ;
46028: LD_ADDR_VAR 0 12
46032: PUSH
46033: CALL_OW 44
46037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46038: LD_VAR 0 12
46042: PPUSH
46043: LD_VAR 0 8
46047: PPUSH
46048: LD_INT 0
46050: PPUSH
46051: CALL 47773 0 3
// end ;
46055: GO 46009
46057: POP
46058: POP
// if fishes then
46059: LD_VAR 0 7
46063: IFFALSE 46130
// for i = 1 to fishes do
46065: LD_ADDR_VAR 0 11
46069: PUSH
46070: DOUBLE
46071: LD_INT 1
46073: DEC
46074: ST_TO_ADDR
46075: LD_VAR 0 7
46079: PUSH
46080: FOR_TO
46081: IFFALSE 46128
// begin hc_class = 20 ;
46083: LD_ADDR_OWVAR 28
46087: PUSH
46088: LD_INT 20
46090: ST_TO_ADDR
// hc_gallery =  ;
46091: LD_ADDR_OWVAR 33
46095: PUSH
46096: LD_STRING 
46098: ST_TO_ADDR
// animal := CreateHuman ;
46099: LD_ADDR_VAR 0 12
46103: PUSH
46104: CALL_OW 44
46108: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46109: LD_VAR 0 12
46113: PPUSH
46114: LD_VAR 0 9
46118: PPUSH
46119: LD_INT 0
46121: PPUSH
46122: CALL 47773 0 3
// end ;
46126: GO 46080
46128: POP
46129: POP
// end ;
46130: LD_VAR 0 10
46134: RET
// export function WantHeal ( sci , unit ) ; begin
46135: LD_INT 0
46137: PPUSH
// if GetTaskList ( sci ) > 0 then
46138: LD_VAR 0 1
46142: PPUSH
46143: CALL_OW 437
46147: PUSH
46148: LD_INT 0
46150: GREATER
46151: IFFALSE 46223
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46153: LD_VAR 0 1
46157: PPUSH
46158: CALL_OW 437
46162: PUSH
46163: LD_INT 1
46165: ARRAY
46166: PUSH
46167: LD_INT 1
46169: ARRAY
46170: PUSH
46171: LD_STRING l
46173: EQUAL
46174: IFFALSE 46201
46176: PUSH
46177: LD_VAR 0 1
46181: PPUSH
46182: CALL_OW 437
46186: PUSH
46187: LD_INT 1
46189: ARRAY
46190: PUSH
46191: LD_INT 4
46193: ARRAY
46194: PUSH
46195: LD_VAR 0 2
46199: EQUAL
46200: AND
46201: IFFALSE 46213
// result := true else
46203: LD_ADDR_VAR 0 3
46207: PUSH
46208: LD_INT 1
46210: ST_TO_ADDR
46211: GO 46221
// result := false ;
46213: LD_ADDR_VAR 0 3
46217: PUSH
46218: LD_INT 0
46220: ST_TO_ADDR
// end else
46221: GO 46231
// result := false ;
46223: LD_ADDR_VAR 0 3
46227: PUSH
46228: LD_INT 0
46230: ST_TO_ADDR
// end ;
46231: LD_VAR 0 3
46235: RET
// export function HealTarget ( sci ) ; begin
46236: LD_INT 0
46238: PPUSH
// if not sci then
46239: LD_VAR 0 1
46243: NOT
46244: IFFALSE 46248
// exit ;
46246: GO 46313
// result := 0 ;
46248: LD_ADDR_VAR 0 2
46252: PUSH
46253: LD_INT 0
46255: ST_TO_ADDR
// if GetTaskList ( sci ) then
46256: LD_VAR 0 1
46260: PPUSH
46261: CALL_OW 437
46265: IFFALSE 46313
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46267: LD_VAR 0 1
46271: PPUSH
46272: CALL_OW 437
46276: PUSH
46277: LD_INT 1
46279: ARRAY
46280: PUSH
46281: LD_INT 1
46283: ARRAY
46284: PUSH
46285: LD_STRING l
46287: EQUAL
46288: IFFALSE 46313
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46290: LD_ADDR_VAR 0 2
46294: PUSH
46295: LD_VAR 0 1
46299: PPUSH
46300: CALL_OW 437
46304: PUSH
46305: LD_INT 1
46307: ARRAY
46308: PUSH
46309: LD_INT 4
46311: ARRAY
46312: ST_TO_ADDR
// end ;
46313: LD_VAR 0 2
46317: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46318: LD_INT 0
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
// if not base_units then
46324: LD_VAR 0 1
46328: NOT
46329: IFFALSE 46333
// exit ;
46331: GO 46420
// result := false ;
46333: LD_ADDR_VAR 0 2
46337: PUSH
46338: LD_INT 0
46340: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46341: LD_ADDR_VAR 0 5
46345: PUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: LD_INT 21
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PPUSH
46361: CALL_OW 72
46365: ST_TO_ADDR
// if not tmp then
46366: LD_VAR 0 5
46370: NOT
46371: IFFALSE 46375
// exit ;
46373: GO 46420
// for i in tmp do
46375: LD_ADDR_VAR 0 3
46379: PUSH
46380: LD_VAR 0 5
46384: PUSH
46385: FOR_IN
46386: IFFALSE 46418
// begin result := EnemyInRange ( i , 22 ) ;
46388: LD_ADDR_VAR 0 2
46392: PUSH
46393: LD_VAR 0 3
46397: PPUSH
46398: LD_INT 22
46400: PPUSH
46401: CALL 43845 0 2
46405: ST_TO_ADDR
// if result then
46406: LD_VAR 0 2
46410: IFFALSE 46416
// exit ;
46412: POP
46413: POP
46414: GO 46420
// end ;
46416: GO 46385
46418: POP
46419: POP
// end ;
46420: LD_VAR 0 2
46424: RET
// export function FilterByTag ( units , tag ) ; begin
46425: LD_INT 0
46427: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46428: LD_ADDR_VAR 0 3
46432: PUSH
46433: LD_VAR 0 1
46437: PPUSH
46438: LD_INT 120
46440: PUSH
46441: LD_VAR 0 2
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PPUSH
46450: CALL_OW 72
46454: ST_TO_ADDR
// end ;
46455: LD_VAR 0 3
46459: RET
// export function IsDriver ( un ) ; begin
46460: LD_INT 0
46462: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46463: LD_ADDR_VAR 0 2
46467: PUSH
46468: LD_VAR 0 1
46472: PUSH
46473: LD_INT 55
46475: PUSH
46476: EMPTY
46477: LIST
46478: PPUSH
46479: CALL_OW 69
46483: IN
46484: ST_TO_ADDR
// end ;
46485: LD_VAR 0 2
46489: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46490: LD_INT 0
46492: PPUSH
46493: PPUSH
// list := [ ] ;
46494: LD_ADDR_VAR 0 5
46498: PUSH
46499: EMPTY
46500: ST_TO_ADDR
// case d of 0 :
46501: LD_VAR 0 3
46505: PUSH
46506: LD_INT 0
46508: DOUBLE
46509: EQUAL
46510: IFTRUE 46514
46512: GO 46647
46514: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46515: LD_ADDR_VAR 0 5
46519: PUSH
46520: LD_VAR 0 1
46524: PUSH
46525: LD_INT 4
46527: MINUS
46528: PUSH
46529: LD_VAR 0 2
46533: PUSH
46534: LD_INT 4
46536: MINUS
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: PUSH
46546: LD_VAR 0 1
46550: PUSH
46551: LD_INT 3
46553: MINUS
46554: PUSH
46555: LD_VAR 0 2
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: PUSH
46568: LD_VAR 0 1
46572: PUSH
46573: LD_INT 4
46575: PLUS
46576: PUSH
46577: LD_VAR 0 2
46581: PUSH
46582: LD_INT 4
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: LIST
46589: PUSH
46590: LD_VAR 0 1
46594: PUSH
46595: LD_INT 3
46597: PLUS
46598: PUSH
46599: LD_VAR 0 2
46603: PUSH
46604: LD_INT 3
46606: PLUS
46607: PUSH
46608: LD_INT 5
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: PUSH
46616: LD_VAR 0 1
46620: PUSH
46621: LD_VAR 0 2
46625: PUSH
46626: LD_INT 4
46628: PLUS
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: ST_TO_ADDR
// end ; 1 :
46645: GO 47345
46647: LD_INT 1
46649: DOUBLE
46650: EQUAL
46651: IFTRUE 46655
46653: GO 46788
46655: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46656: LD_ADDR_VAR 0 5
46660: PUSH
46661: LD_VAR 0 1
46665: PUSH
46666: LD_VAR 0 2
46670: PUSH
46671: LD_INT 4
46673: MINUS
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: PUSH
46683: LD_VAR 0 1
46687: PUSH
46688: LD_INT 3
46690: MINUS
46691: PUSH
46692: LD_VAR 0 2
46696: PUSH
46697: LD_INT 3
46699: MINUS
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: PUSH
46709: LD_VAR 0 1
46713: PUSH
46714: LD_INT 4
46716: MINUS
46717: PUSH
46718: LD_VAR 0 2
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: PUSH
46731: LD_VAR 0 1
46735: PUSH
46736: LD_VAR 0 2
46740: PUSH
46741: LD_INT 3
46743: PLUS
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: PUSH
46753: LD_VAR 0 1
46757: PUSH
46758: LD_INT 4
46760: PLUS
46761: PUSH
46762: LD_VAR 0 2
46766: PUSH
46767: LD_INT 4
46769: PLUS
46770: PUSH
46771: LD_INT 5
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// end ; 2 :
46786: GO 47345
46788: LD_INT 2
46790: DOUBLE
46791: EQUAL
46792: IFTRUE 46796
46794: GO 46925
46796: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46797: LD_ADDR_VAR 0 5
46801: PUSH
46802: LD_VAR 0 1
46806: PUSH
46807: LD_VAR 0 2
46811: PUSH
46812: LD_INT 3
46814: MINUS
46815: PUSH
46816: LD_INT 3
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: PUSH
46824: LD_VAR 0 1
46828: PUSH
46829: LD_INT 4
46831: PLUS
46832: PUSH
46833: LD_VAR 0 2
46837: PUSH
46838: LD_INT 4
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: PUSH
46846: LD_VAR 0 1
46850: PUSH
46851: LD_VAR 0 2
46855: PUSH
46856: LD_INT 4
46858: PLUS
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: PUSH
46868: LD_VAR 0 1
46872: PUSH
46873: LD_INT 3
46875: MINUS
46876: PUSH
46877: LD_VAR 0 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: PUSH
46890: LD_VAR 0 1
46894: PUSH
46895: LD_INT 4
46897: MINUS
46898: PUSH
46899: LD_VAR 0 2
46903: PUSH
46904: LD_INT 4
46906: MINUS
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: ST_TO_ADDR
// end ; 3 :
46923: GO 47345
46925: LD_INT 3
46927: DOUBLE
46928: EQUAL
46929: IFTRUE 46933
46931: GO 47066
46933: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46934: LD_ADDR_VAR 0 5
46938: PUSH
46939: LD_VAR 0 1
46943: PUSH
46944: LD_INT 3
46946: PLUS
46947: PUSH
46948: LD_VAR 0 2
46952: PUSH
46953: LD_INT 4
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: PUSH
46961: LD_VAR 0 1
46965: PUSH
46966: LD_INT 4
46968: PLUS
46969: PUSH
46970: LD_VAR 0 2
46974: PUSH
46975: LD_INT 4
46977: PLUS
46978: PUSH
46979: LD_INT 5
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: PUSH
46987: LD_VAR 0 1
46991: PUSH
46992: LD_INT 4
46994: MINUS
46995: PUSH
46996: LD_VAR 0 2
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: PUSH
47009: LD_VAR 0 1
47013: PUSH
47014: LD_VAR 0 2
47018: PUSH
47019: LD_INT 4
47021: MINUS
47022: PUSH
47023: LD_INT 3
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: PUSH
47031: LD_VAR 0 1
47035: PUSH
47036: LD_INT 3
47038: MINUS
47039: PUSH
47040: LD_VAR 0 2
47044: PUSH
47045: LD_INT 3
47047: MINUS
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: ST_TO_ADDR
// end ; 4 :
47064: GO 47345
47066: LD_INT 4
47068: DOUBLE
47069: EQUAL
47070: IFTRUE 47074
47072: GO 47207
47074: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47075: LD_ADDR_VAR 0 5
47079: PUSH
47080: LD_VAR 0 1
47084: PUSH
47085: LD_VAR 0 2
47089: PUSH
47090: LD_INT 4
47092: PLUS
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: PUSH
47102: LD_VAR 0 1
47106: PUSH
47107: LD_INT 3
47109: PLUS
47110: PUSH
47111: LD_VAR 0 2
47115: PUSH
47116: LD_INT 3
47118: PLUS
47119: PUSH
47120: LD_INT 5
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: LIST
47127: PUSH
47128: LD_VAR 0 1
47132: PUSH
47133: LD_INT 4
47135: PLUS
47136: PUSH
47137: LD_VAR 0 2
47141: PUSH
47142: LD_INT 4
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: PUSH
47150: LD_VAR 0 1
47154: PUSH
47155: LD_VAR 0 2
47159: PUSH
47160: LD_INT 3
47162: MINUS
47163: PUSH
47164: LD_INT 3
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: PUSH
47172: LD_VAR 0 1
47176: PUSH
47177: LD_INT 4
47179: MINUS
47180: PUSH
47181: LD_VAR 0 2
47185: PUSH
47186: LD_INT 4
47188: MINUS
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: ST_TO_ADDR
// end ; 5 :
47205: GO 47345
47207: LD_INT 5
47209: DOUBLE
47210: EQUAL
47211: IFTRUE 47215
47213: GO 47344
47215: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47216: LD_ADDR_VAR 0 5
47220: PUSH
47221: LD_VAR 0 1
47225: PUSH
47226: LD_INT 4
47228: MINUS
47229: PUSH
47230: LD_VAR 0 2
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: PUSH
47243: LD_VAR 0 1
47247: PUSH
47248: LD_VAR 0 2
47252: PUSH
47253: LD_INT 4
47255: MINUS
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: PUSH
47265: LD_VAR 0 1
47269: PUSH
47270: LD_INT 4
47272: PLUS
47273: PUSH
47274: LD_VAR 0 2
47278: PUSH
47279: LD_INT 4
47281: PLUS
47282: PUSH
47283: LD_INT 5
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: PUSH
47291: LD_VAR 0 1
47295: PUSH
47296: LD_INT 3
47298: PLUS
47299: PUSH
47300: LD_VAR 0 2
47304: PUSH
47305: LD_INT 4
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: PUSH
47313: LD_VAR 0 1
47317: PUSH
47318: LD_VAR 0 2
47322: PUSH
47323: LD_INT 3
47325: PLUS
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// end ; end ;
47342: GO 47345
47344: POP
// result := list ;
47345: LD_ADDR_VAR 0 4
47349: PUSH
47350: LD_VAR 0 5
47354: ST_TO_ADDR
// end ;
47355: LD_VAR 0 4
47359: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47360: LD_INT 0
47362: PPUSH
47363: PPUSH
47364: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47365: LD_VAR 0 1
47369: NOT
47370: IFTRUE 47398
47372: PUSH
47373: LD_VAR 0 2
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: LD_INT 4
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: IN
47396: NOT
47397: OR
47398: IFFALSE 47402
// exit ;
47400: GO 47485
// tmp := [ ] ;
47402: LD_ADDR_VAR 0 5
47406: PUSH
47407: EMPTY
47408: ST_TO_ADDR
// for i in units do
47409: LD_ADDR_VAR 0 4
47413: PUSH
47414: LD_VAR 0 1
47418: PUSH
47419: FOR_IN
47420: IFFALSE 47454
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47422: LD_ADDR_VAR 0 5
47426: PUSH
47427: LD_VAR 0 5
47431: PPUSH
47432: LD_VAR 0 4
47436: PPUSH
47437: LD_VAR 0 2
47441: PPUSH
47442: CALL_OW 259
47446: PPUSH
47447: CALL 48880 0 2
47451: ST_TO_ADDR
47452: GO 47419
47454: POP
47455: POP
// if not tmp then
47456: LD_VAR 0 5
47460: NOT
47461: IFFALSE 47465
// exit ;
47463: GO 47485
// result := SortListByListDesc ( units , tmp ) ;
47465: LD_ADDR_VAR 0 3
47469: PUSH
47470: LD_VAR 0 1
47474: PPUSH
47475: LD_VAR 0 5
47479: PPUSH
47480: CALL_OW 77
47484: ST_TO_ADDR
// end ;
47485: LD_VAR 0 3
47489: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47490: LD_INT 0
47492: PPUSH
47493: PPUSH
47494: PPUSH
// result := false ;
47495: LD_ADDR_VAR 0 3
47499: PUSH
47500: LD_INT 0
47502: ST_TO_ADDR
// if not building then
47503: LD_VAR 0 2
47507: NOT
47508: IFFALSE 47512
// exit ;
47510: GO 47656
// x := GetX ( building ) ;
47512: LD_ADDR_VAR 0 4
47516: PUSH
47517: LD_VAR 0 2
47521: PPUSH
47522: CALL_OW 250
47526: ST_TO_ADDR
// y := GetY ( building ) ;
47527: LD_ADDR_VAR 0 5
47531: PUSH
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 251
47541: ST_TO_ADDR
// if not x or not y then
47542: LD_VAR 0 4
47546: NOT
47547: IFTRUE 47556
47549: PUSH
47550: LD_VAR 0 5
47554: NOT
47555: OR
47556: IFFALSE 47560
// exit ;
47558: GO 47656
// if GetTaskList ( unit ) then
47560: LD_VAR 0 1
47564: PPUSH
47565: CALL_OW 437
47569: IFFALSE 47656
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47571: LD_STRING e
47573: PUSH
47574: LD_VAR 0 1
47578: PPUSH
47579: CALL_OW 437
47583: PUSH
47584: LD_INT 1
47586: ARRAY
47587: PUSH
47588: LD_INT 1
47590: ARRAY
47591: EQUAL
47592: IFFALSE 47619
47594: PUSH
47595: LD_VAR 0 4
47599: PUSH
47600: LD_VAR 0 1
47604: PPUSH
47605: CALL_OW 437
47609: PUSH
47610: LD_INT 1
47612: ARRAY
47613: PUSH
47614: LD_INT 2
47616: ARRAY
47617: EQUAL
47618: AND
47619: IFFALSE 47646
47621: PUSH
47622: LD_VAR 0 5
47626: PUSH
47627: LD_VAR 0 1
47631: PPUSH
47632: CALL_OW 437
47636: PUSH
47637: LD_INT 1
47639: ARRAY
47640: PUSH
47641: LD_INT 3
47643: ARRAY
47644: EQUAL
47645: AND
47646: IFFALSE 47656
// result := true end ;
47648: LD_ADDR_VAR 0 3
47652: PUSH
47653: LD_INT 1
47655: ST_TO_ADDR
// end ;
47656: LD_VAR 0 3
47660: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47661: LD_INT 0
47663: PPUSH
// result := false ;
47664: LD_ADDR_VAR 0 4
47668: PUSH
47669: LD_INT 0
47671: ST_TO_ADDR
// if GetTaskList ( unit ) then
47672: LD_VAR 0 1
47676: PPUSH
47677: CALL_OW 437
47681: IFFALSE 47768
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47683: LD_STRING M
47685: PUSH
47686: LD_VAR 0 1
47690: PPUSH
47691: CALL_OW 437
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: PUSH
47700: LD_INT 1
47702: ARRAY
47703: EQUAL
47704: IFFALSE 47731
47706: PUSH
47707: LD_VAR 0 2
47711: PUSH
47712: LD_VAR 0 1
47716: PPUSH
47717: CALL_OW 437
47721: PUSH
47722: LD_INT 1
47724: ARRAY
47725: PUSH
47726: LD_INT 2
47728: ARRAY
47729: EQUAL
47730: AND
47731: IFFALSE 47758
47733: PUSH
47734: LD_VAR 0 3
47738: PUSH
47739: LD_VAR 0 1
47743: PPUSH
47744: CALL_OW 437
47748: PUSH
47749: LD_INT 1
47751: ARRAY
47752: PUSH
47753: LD_INT 3
47755: ARRAY
47756: EQUAL
47757: AND
47758: IFFALSE 47768
// result := true ;
47760: LD_ADDR_VAR 0 4
47764: PUSH
47765: LD_INT 1
47767: ST_TO_ADDR
// end ; end ;
47768: LD_VAR 0 4
47772: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47773: LD_INT 0
47775: PPUSH
47776: PPUSH
47777: PPUSH
47778: PPUSH
// if not unit or not area then
47779: LD_VAR 0 1
47783: NOT
47784: IFTRUE 47793
47786: PUSH
47787: LD_VAR 0 2
47791: NOT
47792: OR
47793: IFFALSE 47797
// exit ;
47795: GO 47973
// tmp := AreaToList ( area , i ) ;
47797: LD_ADDR_VAR 0 6
47801: PUSH
47802: LD_VAR 0 2
47806: PPUSH
47807: LD_VAR 0 5
47811: PPUSH
47812: CALL_OW 517
47816: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47817: LD_ADDR_VAR 0 5
47821: PUSH
47822: DOUBLE
47823: LD_INT 1
47825: DEC
47826: ST_TO_ADDR
47827: LD_VAR 0 6
47831: PUSH
47832: LD_INT 1
47834: ARRAY
47835: PUSH
47836: FOR_TO
47837: IFFALSE 47971
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47839: LD_ADDR_VAR 0 7
47843: PUSH
47844: LD_VAR 0 6
47848: PUSH
47849: LD_INT 1
47851: ARRAY
47852: PUSH
47853: LD_VAR 0 5
47857: ARRAY
47858: PUSH
47859: LD_VAR 0 6
47863: PUSH
47864: LD_INT 2
47866: ARRAY
47867: PUSH
47868: LD_VAR 0 5
47872: ARRAY
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47878: LD_INT 92
47880: PUSH
47881: LD_VAR 0 7
47885: PUSH
47886: LD_INT 1
47888: ARRAY
47889: PUSH
47890: LD_VAR 0 7
47894: PUSH
47895: LD_INT 2
47897: ARRAY
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: PPUSH
47908: CALL_OW 69
47912: PUSH
47913: LD_INT 0
47915: EQUAL
47916: IFFALSE 47969
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47918: LD_VAR 0 1
47922: PPUSH
47923: LD_VAR 0 7
47927: PUSH
47928: LD_INT 1
47930: ARRAY
47931: PPUSH
47932: LD_VAR 0 7
47936: PUSH
47937: LD_INT 2
47939: ARRAY
47940: PPUSH
47941: LD_VAR 0 3
47945: PPUSH
47946: CALL_OW 48
// result := IsPlaced ( unit ) ;
47950: LD_ADDR_VAR 0 4
47954: PUSH
47955: LD_VAR 0 1
47959: PPUSH
47960: CALL_OW 305
47964: ST_TO_ADDR
// exit ;
47965: POP
47966: POP
47967: GO 47973
// end ; end ;
47969: GO 47836
47971: POP
47972: POP
// end ;
47973: LD_VAR 0 4
47977: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47978: LD_INT 0
47980: PPUSH
47981: PPUSH
47982: PPUSH
// if not side or side > 8 then
47983: LD_VAR 0 1
47987: NOT
47988: IFTRUE 48000
47990: PUSH
47991: LD_VAR 0 1
47995: PUSH
47996: LD_INT 8
47998: GREATER
47999: OR
48000: IFFALSE 48004
// exit ;
48002: GO 48191
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48004: LD_ADDR_VAR 0 4
48008: PUSH
48009: LD_INT 22
48011: PUSH
48012: LD_VAR 0 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 21
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PPUSH
48035: CALL_OW 69
48039: ST_TO_ADDR
// if not tmp then
48040: LD_VAR 0 4
48044: NOT
48045: IFFALSE 48049
// exit ;
48047: GO 48191
// enable_addtolog := true ;
48049: LD_ADDR_OWVAR 81
48053: PUSH
48054: LD_INT 1
48056: ST_TO_ADDR
// AddToLog ( [ ) ;
48057: LD_STRING [
48059: PPUSH
48060: CALL_OW 561
// for i in tmp do
48064: LD_ADDR_VAR 0 3
48068: PUSH
48069: LD_VAR 0 4
48073: PUSH
48074: FOR_IN
48075: IFFALSE 48182
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48077: LD_STRING [
48079: PUSH
48080: LD_VAR 0 3
48084: PPUSH
48085: CALL_OW 266
48089: STR
48090: PUSH
48091: LD_STRING , 
48093: STR
48094: PUSH
48095: LD_VAR 0 3
48099: PPUSH
48100: CALL_OW 250
48104: STR
48105: PUSH
48106: LD_STRING , 
48108: STR
48109: PUSH
48110: LD_VAR 0 3
48114: PPUSH
48115: CALL_OW 251
48119: STR
48120: PUSH
48121: LD_STRING , 
48123: STR
48124: PUSH
48125: LD_VAR 0 3
48129: PPUSH
48130: CALL_OW 254
48134: STR
48135: PUSH
48136: LD_STRING , 
48138: STR
48139: PUSH
48140: LD_VAR 0 3
48144: PPUSH
48145: LD_INT 1
48147: PPUSH
48148: CALL_OW 268
48152: STR
48153: PUSH
48154: LD_STRING , 
48156: STR
48157: PUSH
48158: LD_VAR 0 3
48162: PPUSH
48163: LD_INT 2
48165: PPUSH
48166: CALL_OW 268
48170: STR
48171: PUSH
48172: LD_STRING ],
48174: STR
48175: PPUSH
48176: CALL_OW 561
// end ;
48180: GO 48074
48182: POP
48183: POP
// AddToLog ( ]; ) ;
48184: LD_STRING ];
48186: PPUSH
48187: CALL_OW 561
// end ;
48191: LD_VAR 0 2
48195: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48196: LD_INT 0
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
48202: PPUSH
// if not area or not rate or not max then
48203: LD_VAR 0 1
48207: NOT
48208: IFTRUE 48217
48210: PUSH
48211: LD_VAR 0 2
48215: NOT
48216: OR
48217: IFTRUE 48226
48219: PUSH
48220: LD_VAR 0 4
48224: NOT
48225: OR
48226: IFFALSE 48230
// exit ;
48228: GO 48419
// while 1 do
48230: LD_INT 1
48232: IFFALSE 48419
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48234: LD_ADDR_VAR 0 9
48238: PUSH
48239: LD_VAR 0 1
48243: PPUSH
48244: LD_INT 1
48246: PPUSH
48247: CALL_OW 287
48251: PUSH
48252: LD_INT 10
48254: MUL
48255: ST_TO_ADDR
// r := rate / 10 ;
48256: LD_ADDR_VAR 0 7
48260: PUSH
48261: LD_VAR 0 2
48265: PUSH
48266: LD_INT 10
48268: DIVREAL
48269: ST_TO_ADDR
// time := 1 1$00 ;
48270: LD_ADDR_VAR 0 8
48274: PUSH
48275: LD_INT 2100
48277: ST_TO_ADDR
// if amount < min then
48278: LD_VAR 0 9
48282: PUSH
48283: LD_VAR 0 3
48287: LESS
48288: IFFALSE 48306
// r := r * 2 else
48290: LD_ADDR_VAR 0 7
48294: PUSH
48295: LD_VAR 0 7
48299: PUSH
48300: LD_INT 2
48302: MUL
48303: ST_TO_ADDR
48304: GO 48332
// if amount > max then
48306: LD_VAR 0 9
48310: PUSH
48311: LD_VAR 0 4
48315: GREATER
48316: IFFALSE 48332
// r := r / 2 ;
48318: LD_ADDR_VAR 0 7
48322: PUSH
48323: LD_VAR 0 7
48327: PUSH
48328: LD_INT 2
48330: DIVREAL
48331: ST_TO_ADDR
// time := time / r ;
48332: LD_ADDR_VAR 0 8
48336: PUSH
48337: LD_VAR 0 8
48341: PUSH
48342: LD_VAR 0 7
48346: DIVREAL
48347: ST_TO_ADDR
// if time < 0 then
48348: LD_VAR 0 8
48352: PUSH
48353: LD_INT 0
48355: LESS
48356: IFFALSE 48373
// time := time * - 1 ;
48358: LD_ADDR_VAR 0 8
48362: PUSH
48363: LD_VAR 0 8
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: MUL
48372: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48373: LD_VAR 0 8
48377: PUSH
48378: LD_INT 35
48380: PPUSH
48381: LD_INT 875
48383: PPUSH
48384: CALL_OW 12
48388: PLUS
48389: PPUSH
48390: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48394: LD_INT 1
48396: PPUSH
48397: LD_INT 5
48399: PPUSH
48400: CALL_OW 12
48404: PPUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: LD_INT 1
48412: PPUSH
48413: CALL_OW 55
// end ;
48417: GO 48230
// end ;
48419: LD_VAR 0 5
48423: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48424: LD_INT 0
48426: PPUSH
48427: PPUSH
48428: PPUSH
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
// if not turrets or not factories then
48434: LD_VAR 0 1
48438: NOT
48439: IFTRUE 48448
48441: PUSH
48442: LD_VAR 0 2
48446: NOT
48447: OR
48448: IFFALSE 48452
// exit ;
48450: GO 48759
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48452: LD_ADDR_VAR 0 10
48456: PUSH
48457: LD_INT 5
48459: PUSH
48460: LD_INT 6
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 4
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 3
48479: PUSH
48480: LD_INT 5
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 24
48494: PUSH
48495: LD_INT 25
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 23
48504: PUSH
48505: LD_INT 27
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 42
48518: PUSH
48519: LD_INT 43
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 44
48528: PUSH
48529: LD_INT 46
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 45
48538: PUSH
48539: LD_INT 47
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: ST_TO_ADDR
// result := [ ] ;
48556: LD_ADDR_VAR 0 3
48560: PUSH
48561: EMPTY
48562: ST_TO_ADDR
// for i in turrets do
48563: LD_ADDR_VAR 0 4
48567: PUSH
48568: LD_VAR 0 1
48572: PUSH
48573: FOR_IN
48574: IFFALSE 48757
// begin nat := GetNation ( i ) ;
48576: LD_ADDR_VAR 0 7
48580: PUSH
48581: LD_VAR 0 4
48585: PPUSH
48586: CALL_OW 248
48590: ST_TO_ADDR
// weapon := 0 ;
48591: LD_ADDR_VAR 0 8
48595: PUSH
48596: LD_INT 0
48598: ST_TO_ADDR
// if not nat then
48599: LD_VAR 0 7
48603: NOT
48604: IFFALSE 48608
// continue ;
48606: GO 48573
// for j in list [ nat ] do
48608: LD_ADDR_VAR 0 5
48612: PUSH
48613: LD_VAR 0 10
48617: PUSH
48618: LD_VAR 0 7
48622: ARRAY
48623: PUSH
48624: FOR_IN
48625: IFFALSE 48666
// if GetBWeapon ( i ) = j [ 1 ] then
48627: LD_VAR 0 4
48631: PPUSH
48632: CALL_OW 269
48636: PUSH
48637: LD_VAR 0 5
48641: PUSH
48642: LD_INT 1
48644: ARRAY
48645: EQUAL
48646: IFFALSE 48664
// begin weapon := j [ 2 ] ;
48648: LD_ADDR_VAR 0 8
48652: PUSH
48653: LD_VAR 0 5
48657: PUSH
48658: LD_INT 2
48660: ARRAY
48661: ST_TO_ADDR
// break ;
48662: GO 48666
// end ;
48664: GO 48624
48666: POP
48667: POP
// if not weapon then
48668: LD_VAR 0 8
48672: NOT
48673: IFFALSE 48677
// continue ;
48675: GO 48573
// for k in factories do
48677: LD_ADDR_VAR 0 6
48681: PUSH
48682: LD_VAR 0 2
48686: PUSH
48687: FOR_IN
48688: IFFALSE 48753
// begin weapons := AvailableWeaponList ( k ) ;
48690: LD_ADDR_VAR 0 9
48694: PUSH
48695: LD_VAR 0 6
48699: PPUSH
48700: CALL_OW 478
48704: ST_TO_ADDR
// if not weapons then
48705: LD_VAR 0 9
48709: NOT
48710: IFFALSE 48714
// continue ;
48712: GO 48687
// if weapon in weapons then
48714: LD_VAR 0 8
48718: PUSH
48719: LD_VAR 0 9
48723: IN
48724: IFFALSE 48751
// begin result := [ i , weapon ] ;
48726: LD_ADDR_VAR 0 3
48730: PUSH
48731: LD_VAR 0 4
48735: PUSH
48736: LD_VAR 0 8
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: ST_TO_ADDR
// exit ;
48745: POP
48746: POP
48747: POP
48748: POP
48749: GO 48759
// end ; end ;
48751: GO 48687
48753: POP
48754: POP
// end ;
48755: GO 48573
48757: POP
48758: POP
// end ;
48759: LD_VAR 0 3
48763: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48764: LD_INT 0
48766: PPUSH
// if not side or side > 8 then
48767: LD_VAR 0 3
48771: NOT
48772: IFTRUE 48784
48774: PUSH
48775: LD_VAR 0 3
48779: PUSH
48780: LD_INT 8
48782: GREATER
48783: OR
48784: IFFALSE 48788
// exit ;
48786: GO 48847
// if not range then
48788: LD_VAR 0 4
48792: NOT
48793: IFFALSE 48804
// range := - 12 ;
48795: LD_ADDR_VAR 0 4
48799: PUSH
48800: LD_INT 12
48802: NEG
48803: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48804: LD_VAR 0 1
48808: PPUSH
48809: LD_VAR 0 2
48813: PPUSH
48814: LD_VAR 0 3
48818: PPUSH
48819: LD_VAR 0 4
48823: PPUSH
48824: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48828: LD_VAR 0 1
48832: PPUSH
48833: LD_VAR 0 2
48837: PPUSH
48838: LD_VAR 0 3
48842: PPUSH
48843: CALL_OW 331
// end ;
48847: LD_VAR 0 5
48851: RET
// export function Video ( mode ) ; begin
48852: LD_INT 0
48854: PPUSH
// ingame_video = mode ;
48855: LD_ADDR_OWVAR 52
48859: PUSH
48860: LD_VAR 0 1
48864: ST_TO_ADDR
// interface_hidden = mode ;
48865: LD_ADDR_OWVAR 54
48869: PUSH
48870: LD_VAR 0 1
48874: ST_TO_ADDR
// end ;
48875: LD_VAR 0 2
48879: RET
// export function Join ( array , element ) ; begin
48880: LD_INT 0
48882: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48883: LD_ADDR_VAR 0 3
48887: PUSH
48888: LD_VAR 0 1
48892: PPUSH
48893: LD_VAR 0 1
48897: PUSH
48898: LD_INT 1
48900: PLUS
48901: PPUSH
48902: LD_VAR 0 2
48906: PPUSH
48907: CALL_OW 1
48911: ST_TO_ADDR
// end ;
48912: LD_VAR 0 3
48916: RET
// export function JoinUnion ( array , element ) ; begin
48917: LD_INT 0
48919: PPUSH
// result := array union element ;
48920: LD_ADDR_VAR 0 3
48924: PUSH
48925: LD_VAR 0 1
48929: PUSH
48930: LD_VAR 0 2
48934: UNION
48935: ST_TO_ADDR
// end ;
48936: LD_VAR 0 3
48940: RET
// export function GetBehemoths ( side ) ; begin
48941: LD_INT 0
48943: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48944: LD_ADDR_VAR 0 2
48948: PUSH
48949: LD_INT 22
48951: PUSH
48952: LD_VAR 0 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 31
48963: PUSH
48964: LD_INT 25
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PPUSH
48975: CALL_OW 69
48979: ST_TO_ADDR
// end ;
48980: LD_VAR 0 2
48984: RET
// export function Shuffle ( array ) ; var i , index ; begin
48985: LD_INT 0
48987: PPUSH
48988: PPUSH
48989: PPUSH
// result := [ ] ;
48990: LD_ADDR_VAR 0 2
48994: PUSH
48995: EMPTY
48996: ST_TO_ADDR
// if not array then
48997: LD_VAR 0 1
49001: NOT
49002: IFFALSE 49006
// exit ;
49004: GO 49105
// Randomize ;
49006: CALL_OW 10
// for i = array downto 1 do
49010: LD_ADDR_VAR 0 3
49014: PUSH
49015: DOUBLE
49016: LD_VAR 0 1
49020: INC
49021: ST_TO_ADDR
49022: LD_INT 1
49024: PUSH
49025: FOR_DOWNTO
49026: IFFALSE 49103
// begin index := rand ( 1 , array ) ;
49028: LD_ADDR_VAR 0 4
49032: PUSH
49033: LD_INT 1
49035: PPUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 12
49045: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49046: LD_ADDR_VAR 0 2
49050: PUSH
49051: LD_VAR 0 2
49055: PPUSH
49056: LD_VAR 0 2
49060: PUSH
49061: LD_INT 1
49063: PLUS
49064: PPUSH
49065: LD_VAR 0 1
49069: PUSH
49070: LD_VAR 0 4
49074: ARRAY
49075: PPUSH
49076: CALL_OW 2
49080: ST_TO_ADDR
// array := Delete ( array , index ) ;
49081: LD_ADDR_VAR 0 1
49085: PUSH
49086: LD_VAR 0 1
49090: PPUSH
49091: LD_VAR 0 4
49095: PPUSH
49096: CALL_OW 3
49100: ST_TO_ADDR
// end ;
49101: GO 49025
49103: POP
49104: POP
// end ;
49105: LD_VAR 0 2
49109: RET
// export function GetBaseMaterials ( base ) ; begin
49110: LD_INT 0
49112: PPUSH
// result := [ 0 , 0 , 0 ] ;
49113: LD_ADDR_VAR 0 2
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: ST_TO_ADDR
// if not base then
49132: LD_VAR 0 1
49136: NOT
49137: IFFALSE 49141
// exit ;
49139: GO 49190
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49141: LD_ADDR_VAR 0 2
49145: PUSH
49146: LD_VAR 0 1
49150: PPUSH
49151: LD_INT 1
49153: PPUSH
49154: CALL_OW 275
49158: PUSH
49159: LD_VAR 0 1
49163: PPUSH
49164: LD_INT 2
49166: PPUSH
49167: CALL_OW 275
49171: PUSH
49172: LD_VAR 0 1
49176: PPUSH
49177: LD_INT 3
49179: PPUSH
49180: CALL_OW 275
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: ST_TO_ADDR
// end ;
49190: LD_VAR 0 2
49194: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49195: LD_INT 0
49197: PPUSH
49198: PPUSH
// result := array ;
49199: LD_ADDR_VAR 0 3
49203: PUSH
49204: LD_VAR 0 1
49208: ST_TO_ADDR
// if size >= result then
49209: LD_VAR 0 2
49213: PUSH
49214: LD_VAR 0 3
49218: GREATEREQUAL
49219: IFFALSE 49223
// exit ;
49221: GO 49273
// if size then
49223: LD_VAR 0 2
49227: IFFALSE 49273
// for i := array downto size do
49229: LD_ADDR_VAR 0 4
49233: PUSH
49234: DOUBLE
49235: LD_VAR 0 1
49239: INC
49240: ST_TO_ADDR
49241: LD_VAR 0 2
49245: PUSH
49246: FOR_DOWNTO
49247: IFFALSE 49271
// result := Delete ( result , result ) ;
49249: LD_ADDR_VAR 0 3
49253: PUSH
49254: LD_VAR 0 3
49258: PPUSH
49259: LD_VAR 0 3
49263: PPUSH
49264: CALL_OW 3
49268: ST_TO_ADDR
49269: GO 49246
49271: POP
49272: POP
// end ;
49273: LD_VAR 0 3
49277: RET
// export function ComExit ( unit ) ; var tmp ; begin
49278: LD_INT 0
49280: PPUSH
49281: PPUSH
// if not IsInUnit ( unit ) then
49282: LD_VAR 0 1
49286: PPUSH
49287: CALL_OW 310
49291: NOT
49292: IFFALSE 49296
// exit ;
49294: GO 49356
// tmp := IsInUnit ( unit ) ;
49296: LD_ADDR_VAR 0 3
49300: PUSH
49301: LD_VAR 0 1
49305: PPUSH
49306: CALL_OW 310
49310: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49311: LD_VAR 0 3
49315: PPUSH
49316: CALL_OW 247
49320: PUSH
49321: LD_INT 2
49323: EQUAL
49324: IFFALSE 49337
// ComExitVehicle ( unit ) else
49326: LD_VAR 0 1
49330: PPUSH
49331: CALL_OW 121
49335: GO 49346
// ComExitBuilding ( unit ) ;
49337: LD_VAR 0 1
49341: PPUSH
49342: CALL_OW 122
// result := tmp ;
49346: LD_ADDR_VAR 0 2
49350: PUSH
49351: LD_VAR 0 3
49355: ST_TO_ADDR
// end ;
49356: LD_VAR 0 2
49360: RET
// export function ComExitAll ( units ) ; var i ; begin
49361: LD_INT 0
49363: PPUSH
49364: PPUSH
// if not units then
49365: LD_VAR 0 1
49369: NOT
49370: IFFALSE 49374
// exit ;
49372: GO 49400
// for i in units do
49374: LD_ADDR_VAR 0 3
49378: PUSH
49379: LD_VAR 0 1
49383: PUSH
49384: FOR_IN
49385: IFFALSE 49398
// ComExit ( i ) ;
49387: LD_VAR 0 3
49391: PPUSH
49392: CALL 49278 0 1
49396: GO 49384
49398: POP
49399: POP
// end ;
49400: LD_VAR 0 2
49404: RET
// export function ResetHc ; begin
49405: LD_INT 0
49407: PPUSH
// InitHc ;
49408: CALL_OW 19
// hc_importance := 0 ;
49412: LD_ADDR_OWVAR 32
49416: PUSH
49417: LD_INT 0
49419: ST_TO_ADDR
// end ;
49420: LD_VAR 0 1
49424: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49425: LD_INT 0
49427: PPUSH
49428: PPUSH
49429: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49430: LD_ADDR_VAR 0 6
49434: PUSH
49435: LD_VAR 0 1
49439: PUSH
49440: LD_VAR 0 3
49444: PLUS
49445: PUSH
49446: LD_INT 2
49448: DIV
49449: ST_TO_ADDR
// if _x < 0 then
49450: LD_VAR 0 6
49454: PUSH
49455: LD_INT 0
49457: LESS
49458: IFFALSE 49475
// _x := _x * - 1 ;
49460: LD_ADDR_VAR 0 6
49464: PUSH
49465: LD_VAR 0 6
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: MUL
49474: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49475: LD_ADDR_VAR 0 7
49479: PUSH
49480: LD_VAR 0 2
49484: PUSH
49485: LD_VAR 0 4
49489: PLUS
49490: PUSH
49491: LD_INT 2
49493: DIV
49494: ST_TO_ADDR
// if _y < 0 then
49495: LD_VAR 0 7
49499: PUSH
49500: LD_INT 0
49502: LESS
49503: IFFALSE 49520
// _y := _y * - 1 ;
49505: LD_ADDR_VAR 0 7
49509: PUSH
49510: LD_VAR 0 7
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: MUL
49519: ST_TO_ADDR
// result := [ _x , _y ] ;
49520: LD_ADDR_VAR 0 5
49524: PUSH
49525: LD_VAR 0 6
49529: PUSH
49530: LD_VAR 0 7
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: ST_TO_ADDR
// end ;
49539: LD_VAR 0 5
49543: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49544: LD_INT 0
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
// task := GetTaskList ( unit ) ;
49550: LD_ADDR_VAR 0 7
49554: PUSH
49555: LD_VAR 0 1
49559: PPUSH
49560: CALL_OW 437
49564: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49565: LD_VAR 0 7
49569: NOT
49570: IFFALSE 49589
49572: PUSH
49573: LD_VAR 0 1
49577: PPUSH
49578: LD_VAR 0 2
49582: PPUSH
49583: CALL_OW 308
49587: NOT
49588: AND
49589: IFFALSE 49593
// exit ;
49591: GO 49711
// if IsInArea ( unit , area ) then
49593: LD_VAR 0 1
49597: PPUSH
49598: LD_VAR 0 2
49602: PPUSH
49603: CALL_OW 308
49607: IFFALSE 49625
// begin ComMoveToArea ( unit , goAway ) ;
49609: LD_VAR 0 1
49613: PPUSH
49614: LD_VAR 0 3
49618: PPUSH
49619: CALL_OW 113
// exit ;
49623: GO 49711
// end ; if task [ 1 ] [ 1 ] <> M then
49625: LD_VAR 0 7
49629: PUSH
49630: LD_INT 1
49632: ARRAY
49633: PUSH
49634: LD_INT 1
49636: ARRAY
49637: PUSH
49638: LD_STRING M
49640: NONEQUAL
49641: IFFALSE 49645
// exit ;
49643: GO 49711
// x := task [ 1 ] [ 2 ] ;
49645: LD_ADDR_VAR 0 5
49649: PUSH
49650: LD_VAR 0 7
49654: PUSH
49655: LD_INT 1
49657: ARRAY
49658: PUSH
49659: LD_INT 2
49661: ARRAY
49662: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49663: LD_ADDR_VAR 0 6
49667: PUSH
49668: LD_VAR 0 7
49672: PUSH
49673: LD_INT 1
49675: ARRAY
49676: PUSH
49677: LD_INT 3
49679: ARRAY
49680: ST_TO_ADDR
// if InArea ( x , y , area ) then
49681: LD_VAR 0 5
49685: PPUSH
49686: LD_VAR 0 6
49690: PPUSH
49691: LD_VAR 0 2
49695: PPUSH
49696: CALL_OW 309
49700: IFFALSE 49711
// ComStop ( unit ) ;
49702: LD_VAR 0 1
49706: PPUSH
49707: CALL_OW 141
// end ;
49711: LD_VAR 0 4
49715: RET
// export function Abs ( value ) ; begin
49716: LD_INT 0
49718: PPUSH
// result := value ;
49719: LD_ADDR_VAR 0 2
49723: PUSH
49724: LD_VAR 0 1
49728: ST_TO_ADDR
// if value < 0 then
49729: LD_VAR 0 1
49733: PUSH
49734: LD_INT 0
49736: LESS
49737: IFFALSE 49754
// result := value * - 1 ;
49739: LD_ADDR_VAR 0 2
49743: PUSH
49744: LD_VAR 0 1
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: MUL
49753: ST_TO_ADDR
// end ;
49754: LD_VAR 0 2
49758: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49759: LD_INT 0
49761: PPUSH
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
// if not unit or not building then
49769: LD_VAR 0 1
49773: NOT
49774: IFTRUE 49783
49776: PUSH
49777: LD_VAR 0 2
49781: NOT
49782: OR
49783: IFFALSE 49787
// exit ;
49785: GO 50015
// x := GetX ( building ) ;
49787: LD_ADDR_VAR 0 4
49791: PUSH
49792: LD_VAR 0 2
49796: PPUSH
49797: CALL_OW 250
49801: ST_TO_ADDR
// y := GetY ( building ) ;
49802: LD_ADDR_VAR 0 6
49806: PUSH
49807: LD_VAR 0 2
49811: PPUSH
49812: CALL_OW 251
49816: ST_TO_ADDR
// d := GetDir ( building ) ;
49817: LD_ADDR_VAR 0 8
49821: PUSH
49822: LD_VAR 0 2
49826: PPUSH
49827: CALL_OW 254
49831: ST_TO_ADDR
// r := 4 ;
49832: LD_ADDR_VAR 0 9
49836: PUSH
49837: LD_INT 4
49839: ST_TO_ADDR
// for i := 1 to 5 do
49840: LD_ADDR_VAR 0 10
49844: PUSH
49845: DOUBLE
49846: LD_INT 1
49848: DEC
49849: ST_TO_ADDR
49850: LD_INT 5
49852: PUSH
49853: FOR_TO
49854: IFFALSE 50013
// begin _x := ShiftX ( x , d , r + i ) ;
49856: LD_ADDR_VAR 0 5
49860: PUSH
49861: LD_VAR 0 4
49865: PPUSH
49866: LD_VAR 0 8
49870: PPUSH
49871: LD_VAR 0 9
49875: PUSH
49876: LD_VAR 0 10
49880: PLUS
49881: PPUSH
49882: CALL_OW 272
49886: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49887: LD_ADDR_VAR 0 7
49891: PUSH
49892: LD_VAR 0 6
49896: PPUSH
49897: LD_VAR 0 8
49901: PPUSH
49902: LD_VAR 0 9
49906: PUSH
49907: LD_VAR 0 10
49911: PLUS
49912: PPUSH
49913: CALL_OW 273
49917: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49918: LD_VAR 0 5
49922: PPUSH
49923: LD_VAR 0 7
49927: PPUSH
49928: CALL_OW 488
49932: IFFALSE 49967
49934: PUSH
49935: LD_VAR 0 5
49939: PPUSH
49940: LD_VAR 0 7
49944: PPUSH
49945: CALL_OW 428
49949: PPUSH
49950: CALL_OW 247
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: IN
49965: NOT
49966: AND
49967: IFFALSE 50011
// begin ComMoveXY ( unit , _x , _y ) ;
49969: LD_VAR 0 1
49973: PPUSH
49974: LD_VAR 0 5
49978: PPUSH
49979: LD_VAR 0 7
49983: PPUSH
49984: CALL_OW 111
// result := [ _x , _y ] ;
49988: LD_ADDR_VAR 0 3
49992: PUSH
49993: LD_VAR 0 5
49997: PUSH
49998: LD_VAR 0 7
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// exit ;
50007: POP
50008: POP
50009: GO 50015
// end ; end ;
50011: GO 49853
50013: POP
50014: POP
// end ;
50015: LD_VAR 0 3
50019: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50020: LD_INT 0
50022: PPUSH
50023: PPUSH
50024: PPUSH
// result := 0 ;
50025: LD_ADDR_VAR 0 3
50029: PUSH
50030: LD_INT 0
50032: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50033: LD_VAR 0 1
50037: PUSH
50038: LD_INT 0
50040: LESS
50041: IFTRUE 50053
50043: PUSH
50044: LD_VAR 0 1
50048: PUSH
50049: LD_INT 8
50051: GREATER
50052: OR
50053: IFTRUE 50065
50055: PUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 0
50063: LESS
50064: OR
50065: IFTRUE 50077
50067: PUSH
50068: LD_VAR 0 2
50072: PUSH
50073: LD_INT 8
50075: GREATER
50076: OR
50077: IFFALSE 50081
// exit ;
50079: GO 50156
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50081: LD_ADDR_VAR 0 4
50085: PUSH
50086: LD_INT 22
50088: PUSH
50089: LD_VAR 0 2
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PPUSH
50098: CALL_OW 69
50102: PUSH
50103: FOR_IN
50104: IFFALSE 50154
// begin un := UnitShoot ( i ) ;
50106: LD_ADDR_VAR 0 5
50110: PUSH
50111: LD_VAR 0 4
50115: PPUSH
50116: CALL_OW 504
50120: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50121: LD_VAR 0 5
50125: PPUSH
50126: CALL_OW 255
50130: PUSH
50131: LD_VAR 0 1
50135: EQUAL
50136: IFFALSE 50152
// begin result := un ;
50138: LD_ADDR_VAR 0 3
50142: PUSH
50143: LD_VAR 0 5
50147: ST_TO_ADDR
// exit ;
50148: POP
50149: POP
50150: GO 50156
// end ; end ;
50152: GO 50103
50154: POP
50155: POP
// end ;
50156: LD_VAR 0 3
50160: RET
// export function GetCargoBay ( units ) ; begin
50161: LD_INT 0
50163: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50164: LD_ADDR_VAR 0 2
50168: PUSH
50169: LD_VAR 0 1
50173: PPUSH
50174: LD_INT 2
50176: PUSH
50177: LD_INT 34
50179: PUSH
50180: LD_INT 12
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 34
50189: PUSH
50190: LD_INT 51
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 34
50199: PUSH
50200: LD_INT 32
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 34
50209: PUSH
50210: LD_INT 89
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: PPUSH
50224: CALL_OW 72
50228: ST_TO_ADDR
// end ;
50229: LD_VAR 0 2
50233: RET
// export function Negate ( value ) ; begin
50234: LD_INT 0
50236: PPUSH
// result := not value ;
50237: LD_ADDR_VAR 0 2
50241: PUSH
50242: LD_VAR 0 1
50246: NOT
50247: ST_TO_ADDR
// end ;
50248: LD_VAR 0 2
50252: RET
// export function Inc ( value ) ; begin
50253: LD_INT 0
50255: PPUSH
// result := value + 1 ;
50256: LD_ADDR_VAR 0 2
50260: PUSH
50261: LD_VAR 0 1
50265: PUSH
50266: LD_INT 1
50268: PLUS
50269: ST_TO_ADDR
// end ;
50270: LD_VAR 0 2
50274: RET
// export function Dec ( value ) ; begin
50275: LD_INT 0
50277: PPUSH
// result := value - 1 ;
50278: LD_ADDR_VAR 0 2
50282: PUSH
50283: LD_VAR 0 1
50287: PUSH
50288: LD_INT 1
50290: MINUS
50291: ST_TO_ADDR
// end ;
50292: LD_VAR 0 2
50296: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50297: LD_INT 0
50299: PPUSH
50300: PPUSH
50301: PPUSH
50302: PPUSH
50303: PPUSH
50304: PPUSH
50305: PPUSH
50306: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50307: LD_VAR 0 1
50311: PPUSH
50312: LD_VAR 0 2
50316: PPUSH
50317: CALL_OW 488
50321: NOT
50322: IFTRUE 50341
50324: PUSH
50325: LD_VAR 0 3
50329: PPUSH
50330: LD_VAR 0 4
50334: PPUSH
50335: CALL_OW 488
50339: NOT
50340: OR
50341: IFFALSE 50354
// begin result := - 1 ;
50343: LD_ADDR_VAR 0 5
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: ST_TO_ADDR
// exit ;
50352: GO 50589
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50354: LD_ADDR_VAR 0 12
50358: PUSH
50359: LD_VAR 0 1
50363: PPUSH
50364: LD_VAR 0 2
50368: PPUSH
50369: LD_VAR 0 3
50373: PPUSH
50374: LD_VAR 0 4
50378: PPUSH
50379: CALL 49425 0 4
50383: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50384: LD_ADDR_VAR 0 11
50388: PUSH
50389: LD_VAR 0 1
50393: PPUSH
50394: LD_VAR 0 2
50398: PPUSH
50399: LD_VAR 0 12
50403: PUSH
50404: LD_INT 1
50406: ARRAY
50407: PPUSH
50408: LD_VAR 0 12
50412: PUSH
50413: LD_INT 2
50415: ARRAY
50416: PPUSH
50417: CALL_OW 298
50421: ST_TO_ADDR
// distance := 9999 ;
50422: LD_ADDR_VAR 0 10
50426: PUSH
50427: LD_INT 9999
50429: ST_TO_ADDR
// for i := 0 to 5 do
50430: LD_ADDR_VAR 0 6
50434: PUSH
50435: DOUBLE
50436: LD_INT 0
50438: DEC
50439: ST_TO_ADDR
50440: LD_INT 5
50442: PUSH
50443: FOR_TO
50444: IFFALSE 50587
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50446: LD_ADDR_VAR 0 7
50450: PUSH
50451: LD_VAR 0 1
50455: PPUSH
50456: LD_VAR 0 6
50460: PPUSH
50461: LD_VAR 0 11
50465: PPUSH
50466: CALL_OW 272
50470: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50471: LD_ADDR_VAR 0 8
50475: PUSH
50476: LD_VAR 0 2
50480: PPUSH
50481: LD_VAR 0 6
50485: PPUSH
50486: LD_VAR 0 11
50490: PPUSH
50491: CALL_OW 273
50495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50496: LD_VAR 0 7
50500: PPUSH
50501: LD_VAR 0 8
50505: PPUSH
50506: CALL_OW 488
50510: NOT
50511: IFFALSE 50515
// continue ;
50513: GO 50443
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50515: LD_ADDR_VAR 0 9
50519: PUSH
50520: LD_VAR 0 12
50524: PUSH
50525: LD_INT 1
50527: ARRAY
50528: PPUSH
50529: LD_VAR 0 12
50533: PUSH
50534: LD_INT 2
50536: ARRAY
50537: PPUSH
50538: LD_VAR 0 7
50542: PPUSH
50543: LD_VAR 0 8
50547: PPUSH
50548: CALL_OW 298
50552: ST_TO_ADDR
// if tmp < distance then
50553: LD_VAR 0 9
50557: PUSH
50558: LD_VAR 0 10
50562: LESS
50563: IFFALSE 50585
// begin result := i ;
50565: LD_ADDR_VAR 0 5
50569: PUSH
50570: LD_VAR 0 6
50574: ST_TO_ADDR
// distance := tmp ;
50575: LD_ADDR_VAR 0 10
50579: PUSH
50580: LD_VAR 0 9
50584: ST_TO_ADDR
// end ; end ;
50585: GO 50443
50587: POP
50588: POP
// end ;
50589: LD_VAR 0 5
50593: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50594: LD_INT 0
50596: PPUSH
50597: PPUSH
// if not driver or not IsInUnit ( driver ) then
50598: LD_VAR 0 1
50602: NOT
50603: IFTRUE 50617
50605: PUSH
50606: LD_VAR 0 1
50610: PPUSH
50611: CALL_OW 310
50615: NOT
50616: OR
50617: IFFALSE 50621
// exit ;
50619: GO 50711
// vehicle := IsInUnit ( driver ) ;
50621: LD_ADDR_VAR 0 3
50625: PUSH
50626: LD_VAR 0 1
50630: PPUSH
50631: CALL_OW 310
50635: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50636: LD_VAR 0 1
50640: PPUSH
50641: LD_STRING \
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: PUSH
50671: LD_STRING E
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_VAR 0 3
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PPUSH
50707: CALL_OW 446
// end ;
50711: LD_VAR 0 2
50715: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50716: LD_INT 0
50718: PPUSH
50719: PPUSH
// if not driver or not IsInUnit ( driver ) then
50720: LD_VAR 0 1
50724: NOT
50725: IFTRUE 50739
50727: PUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: CALL_OW 310
50737: NOT
50738: OR
50739: IFFALSE 50743
// exit ;
50741: GO 50833
// vehicle := IsInUnit ( driver ) ;
50743: LD_ADDR_VAR 0 3
50747: PUSH
50748: LD_VAR 0 1
50752: PPUSH
50753: CALL_OW 310
50757: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50758: LD_VAR 0 1
50762: PPUSH
50763: LD_STRING \
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: PUSH
50793: LD_STRING E
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_VAR 0 3
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PPUSH
50829: CALL_OW 447
// end ;
50833: LD_VAR 0 2
50837: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50838: LD_INT 0
50840: PPUSH
50841: PPUSH
50842: PPUSH
// tmp := [ ] ;
50843: LD_ADDR_VAR 0 5
50847: PUSH
50848: EMPTY
50849: ST_TO_ADDR
// for i in units do
50850: LD_ADDR_VAR 0 4
50854: PUSH
50855: LD_VAR 0 1
50859: PUSH
50860: FOR_IN
50861: IFFALSE 50899
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50863: LD_ADDR_VAR 0 5
50867: PUSH
50868: LD_VAR 0 5
50872: PPUSH
50873: LD_VAR 0 5
50877: PUSH
50878: LD_INT 1
50880: PLUS
50881: PPUSH
50882: LD_VAR 0 4
50886: PPUSH
50887: CALL_OW 256
50891: PPUSH
50892: CALL_OW 2
50896: ST_TO_ADDR
50897: GO 50860
50899: POP
50900: POP
// if not tmp then
50901: LD_VAR 0 5
50905: NOT
50906: IFFALSE 50910
// exit ;
50908: GO 50958
// if asc then
50910: LD_VAR 0 2
50914: IFFALSE 50938
// result := SortListByListAsc ( units , tmp ) else
50916: LD_ADDR_VAR 0 3
50920: PUSH
50921: LD_VAR 0 1
50925: PPUSH
50926: LD_VAR 0 5
50930: PPUSH
50931: CALL_OW 76
50935: ST_TO_ADDR
50936: GO 50958
// result := SortListByListDesc ( units , tmp ) ;
50938: LD_ADDR_VAR 0 3
50942: PUSH
50943: LD_VAR 0 1
50947: PPUSH
50948: LD_VAR 0 5
50952: PPUSH
50953: CALL_OW 77
50957: ST_TO_ADDR
// end ;
50958: LD_VAR 0 3
50962: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50963: LD_INT 0
50965: PPUSH
50966: PPUSH
// task := GetTaskList ( mech ) ;
50967: LD_ADDR_VAR 0 4
50971: PUSH
50972: LD_VAR 0 1
50976: PPUSH
50977: CALL_OW 437
50981: ST_TO_ADDR
// if not task then
50982: LD_VAR 0 4
50986: NOT
50987: IFFALSE 50991
// exit ;
50989: GO 51035
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50991: LD_ADDR_VAR 0 3
50995: PUSH
50996: LD_VAR 0 4
51000: PUSH
51001: LD_INT 1
51003: ARRAY
51004: PUSH
51005: LD_INT 1
51007: ARRAY
51008: PUSH
51009: LD_STRING r
51011: EQUAL
51012: IFFALSE 51034
51014: PUSH
51015: LD_VAR 0 4
51019: PUSH
51020: LD_INT 1
51022: ARRAY
51023: PUSH
51024: LD_INT 4
51026: ARRAY
51027: PUSH
51028: LD_VAR 0 2
51032: EQUAL
51033: AND
51034: ST_TO_ADDR
// end ;
51035: LD_VAR 0 3
51039: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51040: LD_INT 0
51042: PPUSH
// SetDir ( unit , d ) ;
51043: LD_VAR 0 1
51047: PPUSH
51048: LD_VAR 0 4
51052: PPUSH
51053: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51057: LD_ADDR_VAR 0 6
51061: PUSH
51062: LD_VAR 0 1
51066: PPUSH
51067: LD_VAR 0 2
51071: PPUSH
51072: LD_VAR 0 3
51076: PPUSH
51077: LD_VAR 0 5
51081: PPUSH
51082: CALL_OW 48
51086: ST_TO_ADDR
// end ;
51087: LD_VAR 0 6
51091: RET
// export function ToNaturalNumber ( number ) ; begin
51092: LD_INT 0
51094: PPUSH
// result := number div 1 ;
51095: LD_ADDR_VAR 0 2
51099: PUSH
51100: LD_VAR 0 1
51104: PUSH
51105: LD_INT 1
51107: DIV
51108: ST_TO_ADDR
// if number < 0 then
51109: LD_VAR 0 1
51113: PUSH
51114: LD_INT 0
51116: LESS
51117: IFFALSE 51127
// result := 0 ;
51119: LD_ADDR_VAR 0 2
51123: PUSH
51124: LD_INT 0
51126: ST_TO_ADDR
// end ;
51127: LD_VAR 0 2
51131: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51132: LD_INT 0
51134: PPUSH
51135: PPUSH
51136: PPUSH
// if not buildings then
51137: LD_VAR 0 1
51141: NOT
51142: IFFALSE 51146
// exit ;
51144: GO 51261
// tmp := [ ] ;
51146: LD_ADDR_VAR 0 5
51150: PUSH
51151: EMPTY
51152: ST_TO_ADDR
// for b in buildings do
51153: LD_ADDR_VAR 0 4
51157: PUSH
51158: LD_VAR 0 1
51162: PUSH
51163: FOR_IN
51164: IFFALSE 51202
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51166: LD_ADDR_VAR 0 5
51170: PUSH
51171: LD_VAR 0 5
51175: PPUSH
51176: LD_VAR 0 5
51180: PUSH
51181: LD_INT 1
51183: PLUS
51184: PPUSH
51185: LD_VAR 0 4
51189: PPUSH
51190: CALL_OW 266
51194: PPUSH
51195: CALL_OW 1
51199: ST_TO_ADDR
51200: GO 51163
51202: POP
51203: POP
// if not tmp then
51204: LD_VAR 0 5
51208: NOT
51209: IFFALSE 51213
// exit ;
51211: GO 51261
// if asc then
51213: LD_VAR 0 2
51217: IFFALSE 51241
// result := SortListByListAsc ( buildings , tmp ) else
51219: LD_ADDR_VAR 0 3
51223: PUSH
51224: LD_VAR 0 1
51228: PPUSH
51229: LD_VAR 0 5
51233: PPUSH
51234: CALL_OW 76
51238: ST_TO_ADDR
51239: GO 51261
// result := SortListByListDesc ( buildings , tmp ) ;
51241: LD_ADDR_VAR 0 3
51245: PUSH
51246: LD_VAR 0 1
51250: PPUSH
51251: LD_VAR 0 5
51255: PPUSH
51256: CALL_OW 77
51260: ST_TO_ADDR
// end ;
51261: LD_VAR 0 3
51265: RET
// export function SortByClass ( units , class ) ; var un ; begin
51266: LD_INT 0
51268: PPUSH
51269: PPUSH
// if not units or not class then
51270: LD_VAR 0 1
51274: NOT
51275: IFTRUE 51284
51277: PUSH
51278: LD_VAR 0 2
51282: NOT
51283: OR
51284: IFFALSE 51288
// exit ;
51286: GO 51383
// result := [ ] ;
51288: LD_ADDR_VAR 0 3
51292: PUSH
51293: EMPTY
51294: ST_TO_ADDR
// for un in units do
51295: LD_ADDR_VAR 0 4
51299: PUSH
51300: LD_VAR 0 1
51304: PUSH
51305: FOR_IN
51306: IFFALSE 51381
// if GetClass ( un ) = class then
51308: LD_VAR 0 4
51312: PPUSH
51313: CALL_OW 257
51317: PUSH
51318: LD_VAR 0 2
51322: EQUAL
51323: IFFALSE 51350
// result := Insert ( result , 1 , un ) else
51325: LD_ADDR_VAR 0 3
51329: PUSH
51330: LD_VAR 0 3
51334: PPUSH
51335: LD_INT 1
51337: PPUSH
51338: LD_VAR 0 4
51342: PPUSH
51343: CALL_OW 2
51347: ST_TO_ADDR
51348: GO 51379
// result := Replace ( result , result + 1 , un ) ;
51350: LD_ADDR_VAR 0 3
51354: PUSH
51355: LD_VAR 0 3
51359: PPUSH
51360: LD_VAR 0 3
51364: PUSH
51365: LD_INT 1
51367: PLUS
51368: PPUSH
51369: LD_VAR 0 4
51373: PPUSH
51374: CALL_OW 1
51378: ST_TO_ADDR
51379: GO 51305
51381: POP
51382: POP
// end ;
51383: LD_VAR 0 3
51387: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51388: LD_INT 0
51390: PPUSH
51391: PPUSH
51392: PPUSH
51393: PPUSH
51394: PPUSH
51395: PPUSH
51396: PPUSH
// result := [ ] ;
51397: LD_ADDR_VAR 0 4
51401: PUSH
51402: EMPTY
51403: ST_TO_ADDR
// if x - r < 0 then
51404: LD_VAR 0 1
51408: PUSH
51409: LD_VAR 0 3
51413: MINUS
51414: PUSH
51415: LD_INT 0
51417: LESS
51418: IFFALSE 51430
// min_x := 0 else
51420: LD_ADDR_VAR 0 8
51424: PUSH
51425: LD_INT 0
51427: ST_TO_ADDR
51428: GO 51446
// min_x := x - r ;
51430: LD_ADDR_VAR 0 8
51434: PUSH
51435: LD_VAR 0 1
51439: PUSH
51440: LD_VAR 0 3
51444: MINUS
51445: ST_TO_ADDR
// if y - r < 0 then
51446: LD_VAR 0 2
51450: PUSH
51451: LD_VAR 0 3
51455: MINUS
51456: PUSH
51457: LD_INT 0
51459: LESS
51460: IFFALSE 51472
// min_y := 0 else
51462: LD_ADDR_VAR 0 7
51466: PUSH
51467: LD_INT 0
51469: ST_TO_ADDR
51470: GO 51488
// min_y := y - r ;
51472: LD_ADDR_VAR 0 7
51476: PUSH
51477: LD_VAR 0 2
51481: PUSH
51482: LD_VAR 0 3
51486: MINUS
51487: ST_TO_ADDR
// max_x := x + r ;
51488: LD_ADDR_VAR 0 9
51492: PUSH
51493: LD_VAR 0 1
51497: PUSH
51498: LD_VAR 0 3
51502: PLUS
51503: ST_TO_ADDR
// max_y := y + r ;
51504: LD_ADDR_VAR 0 10
51508: PUSH
51509: LD_VAR 0 2
51513: PUSH
51514: LD_VAR 0 3
51518: PLUS
51519: ST_TO_ADDR
// for _x = min_x to max_x do
51520: LD_ADDR_VAR 0 5
51524: PUSH
51525: DOUBLE
51526: LD_VAR 0 8
51530: DEC
51531: ST_TO_ADDR
51532: LD_VAR 0 9
51536: PUSH
51537: FOR_TO
51538: IFFALSE 51639
// for _y = min_y to max_y do
51540: LD_ADDR_VAR 0 6
51544: PUSH
51545: DOUBLE
51546: LD_VAR 0 7
51550: DEC
51551: ST_TO_ADDR
51552: LD_VAR 0 10
51556: PUSH
51557: FOR_TO
51558: IFFALSE 51635
// begin if not ValidHex ( _x , _y ) then
51560: LD_VAR 0 5
51564: PPUSH
51565: LD_VAR 0 6
51569: PPUSH
51570: CALL_OW 488
51574: NOT
51575: IFFALSE 51579
// continue ;
51577: GO 51557
// if GetResourceTypeXY ( _x , _y ) then
51579: LD_VAR 0 5
51583: PPUSH
51584: LD_VAR 0 6
51588: PPUSH
51589: CALL_OW 283
51593: IFFALSE 51633
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51595: LD_ADDR_VAR 0 4
51599: PUSH
51600: LD_VAR 0 4
51604: PPUSH
51605: LD_VAR 0 4
51609: PUSH
51610: LD_INT 1
51612: PLUS
51613: PPUSH
51614: LD_VAR 0 5
51618: PUSH
51619: LD_VAR 0 6
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PPUSH
51628: CALL_OW 1
51632: ST_TO_ADDR
// end ;
51633: GO 51557
51635: POP
51636: POP
51637: GO 51537
51639: POP
51640: POP
// end ;
51641: LD_VAR 0 4
51645: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51646: LD_INT 0
51648: PPUSH
51649: PPUSH
51650: PPUSH
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
51655: PPUSH
// if not units then
51656: LD_VAR 0 1
51660: NOT
51661: IFFALSE 51665
// exit ;
51663: GO 52197
// result := UnitFilter ( units , [ f_ok ] ) ;
51665: LD_ADDR_VAR 0 3
51669: PUSH
51670: LD_VAR 0 1
51674: PPUSH
51675: LD_INT 50
51677: PUSH
51678: EMPTY
51679: LIST
51680: PPUSH
51681: CALL_OW 72
51685: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51686: LD_ADDR_VAR 0 8
51690: PUSH
51691: LD_VAR 0 1
51695: PUSH
51696: LD_INT 1
51698: ARRAY
51699: PPUSH
51700: CALL_OW 255
51704: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51705: LD_ADDR_VAR 0 10
51709: PUSH
51710: LD_INT 29
51712: PUSH
51713: LD_INT 91
51715: PUSH
51716: LD_INT 49
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: ST_TO_ADDR
// if not result then
51724: LD_VAR 0 3
51728: NOT
51729: IFFALSE 51733
// exit ;
51731: GO 52197
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51733: LD_ADDR_VAR 0 5
51737: PUSH
51738: LD_INT 81
51740: PUSH
51741: LD_VAR 0 8
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PPUSH
51750: CALL_OW 69
51754: ST_TO_ADDR
// for i in result do
51755: LD_ADDR_VAR 0 4
51759: PUSH
51760: LD_VAR 0 3
51764: PUSH
51765: FOR_IN
51766: IFFALSE 52195
// begin tag := GetTag ( i ) + 1 ;
51768: LD_ADDR_VAR 0 9
51772: PUSH
51773: LD_VAR 0 4
51777: PPUSH
51778: CALL_OW 110
51782: PUSH
51783: LD_INT 1
51785: PLUS
51786: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51787: LD_ADDR_VAR 0 7
51791: PUSH
51792: LD_VAR 0 4
51796: PPUSH
51797: CALL_OW 250
51801: PPUSH
51802: LD_VAR 0 4
51806: PPUSH
51807: CALL_OW 251
51811: PPUSH
51812: LD_INT 4
51814: PPUSH
51815: CALL 51388 0 3
51819: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51820: LD_VAR 0 4
51824: PPUSH
51825: CALL_OW 247
51829: PUSH
51830: LD_INT 2
51832: EQUAL
51833: IFFALSE 51845
51835: PUSH
51836: LD_VAR 0 7
51840: PUSH
51841: LD_INT 2
51843: GREATER
51844: AND
51845: IFFALSE 51865
51847: PUSH
51848: LD_VAR 0 4
51852: PPUSH
51853: CALL_OW 264
51857: PUSH
51858: LD_VAR 0 10
51862: IN
51863: NOT
51864: AND
51865: IFFALSE 51904
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51867: LD_VAR 0 4
51871: PPUSH
51872: LD_VAR 0 7
51876: PUSH
51877: LD_INT 1
51879: ARRAY
51880: PUSH
51881: LD_INT 1
51883: ARRAY
51884: PPUSH
51885: LD_VAR 0 7
51889: PUSH
51890: LD_INT 1
51892: ARRAY
51893: PUSH
51894: LD_INT 2
51896: ARRAY
51897: PPUSH
51898: CALL_OW 116
51902: GO 52193
// if path > tag then
51904: LD_VAR 0 2
51908: PUSH
51909: LD_VAR 0 9
51913: GREATER
51914: IFFALSE 52122
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51916: LD_ADDR_VAR 0 6
51920: PUSH
51921: LD_VAR 0 5
51925: PPUSH
51926: LD_INT 91
51928: PUSH
51929: LD_VAR 0 4
51933: PUSH
51934: LD_INT 8
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: PPUSH
51942: CALL_OW 72
51946: ST_TO_ADDR
// if nearEnemy then
51947: LD_VAR 0 6
51951: IFFALSE 52020
// begin if GetWeapon ( i ) = ru_time_lapser then
51953: LD_VAR 0 4
51957: PPUSH
51958: CALL_OW 264
51962: PUSH
51963: LD_INT 49
51965: EQUAL
51966: IFFALSE 51994
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51968: LD_VAR 0 4
51972: PPUSH
51973: LD_VAR 0 6
51977: PPUSH
51978: LD_VAR 0 4
51982: PPUSH
51983: CALL_OW 74
51987: PPUSH
51988: CALL_OW 112
51992: GO 52018
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51994: LD_VAR 0 4
51998: PPUSH
51999: LD_VAR 0 6
52003: PPUSH
52004: LD_VAR 0 4
52008: PPUSH
52009: CALL_OW 74
52013: PPUSH
52014: CALL 53278 0 2
// end else
52018: GO 52120
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52020: LD_VAR 0 4
52024: PPUSH
52025: LD_VAR 0 2
52029: PUSH
52030: LD_VAR 0 9
52034: ARRAY
52035: PUSH
52036: LD_INT 1
52038: ARRAY
52039: PPUSH
52040: LD_VAR 0 2
52044: PUSH
52045: LD_VAR 0 9
52049: ARRAY
52050: PUSH
52051: LD_INT 2
52053: ARRAY
52054: PPUSH
52055: CALL_OW 297
52059: PUSH
52060: LD_INT 6
52062: GREATER
52063: IFFALSE 52106
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52065: LD_VAR 0 4
52069: PPUSH
52070: LD_VAR 0 2
52074: PUSH
52075: LD_VAR 0 9
52079: ARRAY
52080: PUSH
52081: LD_INT 1
52083: ARRAY
52084: PPUSH
52085: LD_VAR 0 2
52089: PUSH
52090: LD_VAR 0 9
52094: ARRAY
52095: PUSH
52096: LD_INT 2
52098: ARRAY
52099: PPUSH
52100: CALL_OW 114
52104: GO 52120
// SetTag ( i , tag ) ;
52106: LD_VAR 0 4
52110: PPUSH
52111: LD_VAR 0 9
52115: PPUSH
52116: CALL_OW 109
// end else
52120: GO 52193
// if enemy then
52122: LD_VAR 0 5
52126: IFFALSE 52193
// begin if GetWeapon ( i ) = ru_time_lapser then
52128: LD_VAR 0 4
52132: PPUSH
52133: CALL_OW 264
52137: PUSH
52138: LD_INT 49
52140: EQUAL
52141: IFFALSE 52169
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52143: LD_VAR 0 4
52147: PPUSH
52148: LD_VAR 0 5
52152: PPUSH
52153: LD_VAR 0 4
52157: PPUSH
52158: CALL_OW 74
52162: PPUSH
52163: CALL_OW 112
52167: GO 52193
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52169: LD_VAR 0 4
52173: PPUSH
52174: LD_VAR 0 5
52178: PPUSH
52179: LD_VAR 0 4
52183: PPUSH
52184: CALL_OW 74
52188: PPUSH
52189: CALL 53278 0 2
// end ; end ;
52193: GO 51765
52195: POP
52196: POP
// end ;
52197: LD_VAR 0 3
52201: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52202: LD_INT 0
52204: PPUSH
52205: PPUSH
52206: PPUSH
// if not unit or IsInUnit ( unit ) then
52207: LD_VAR 0 1
52211: NOT
52212: IFTRUE 52225
52214: PUSH
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 310
52224: OR
52225: IFFALSE 52229
// exit ;
52227: GO 52320
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52229: LD_ADDR_VAR 0 4
52233: PUSH
52234: LD_VAR 0 1
52238: PPUSH
52239: CALL_OW 250
52243: PPUSH
52244: LD_VAR 0 2
52248: PPUSH
52249: LD_INT 1
52251: PPUSH
52252: CALL_OW 272
52256: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52257: LD_ADDR_VAR 0 5
52261: PUSH
52262: LD_VAR 0 1
52266: PPUSH
52267: CALL_OW 251
52271: PPUSH
52272: LD_VAR 0 2
52276: PPUSH
52277: LD_INT 1
52279: PPUSH
52280: CALL_OW 273
52284: ST_TO_ADDR
// if ValidHex ( x , y ) then
52285: LD_VAR 0 4
52289: PPUSH
52290: LD_VAR 0 5
52294: PPUSH
52295: CALL_OW 488
52299: IFFALSE 52320
// ComTurnXY ( unit , x , y ) ;
52301: LD_VAR 0 1
52305: PPUSH
52306: LD_VAR 0 4
52310: PPUSH
52311: LD_VAR 0 5
52315: PPUSH
52316: CALL_OW 118
// end ;
52320: LD_VAR 0 3
52324: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52325: LD_INT 0
52327: PPUSH
52328: PPUSH
// result := false ;
52329: LD_ADDR_VAR 0 3
52333: PUSH
52334: LD_INT 0
52336: ST_TO_ADDR
// if not units then
52337: LD_VAR 0 2
52341: NOT
52342: IFFALSE 52346
// exit ;
52344: GO 52391
// for i in units do
52346: LD_ADDR_VAR 0 4
52350: PUSH
52351: LD_VAR 0 2
52355: PUSH
52356: FOR_IN
52357: IFFALSE 52389
// if See ( side , i ) then
52359: LD_VAR 0 1
52363: PPUSH
52364: LD_VAR 0 4
52368: PPUSH
52369: CALL_OW 292
52373: IFFALSE 52387
// begin result := true ;
52375: LD_ADDR_VAR 0 3
52379: PUSH
52380: LD_INT 1
52382: ST_TO_ADDR
// exit ;
52383: POP
52384: POP
52385: GO 52391
// end ;
52387: GO 52356
52389: POP
52390: POP
// end ;
52391: LD_VAR 0 3
52395: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52396: LD_INT 0
52398: PPUSH
52399: PPUSH
52400: PPUSH
52401: PPUSH
// if not unit or not points then
52402: LD_VAR 0 1
52406: NOT
52407: IFTRUE 52416
52409: PUSH
52410: LD_VAR 0 2
52414: NOT
52415: OR
52416: IFFALSE 52420
// exit ;
52418: GO 52510
// dist := 99999 ;
52420: LD_ADDR_VAR 0 5
52424: PUSH
52425: LD_INT 99999
52427: ST_TO_ADDR
// for i in points do
52428: LD_ADDR_VAR 0 4
52432: PUSH
52433: LD_VAR 0 2
52437: PUSH
52438: FOR_IN
52439: IFFALSE 52508
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52441: LD_ADDR_VAR 0 6
52445: PUSH
52446: LD_VAR 0 1
52450: PPUSH
52451: LD_VAR 0 4
52455: PUSH
52456: LD_INT 1
52458: ARRAY
52459: PPUSH
52460: LD_VAR 0 4
52464: PUSH
52465: LD_INT 2
52467: ARRAY
52468: PPUSH
52469: CALL_OW 297
52473: ST_TO_ADDR
// if tmpDist < dist then
52474: LD_VAR 0 6
52478: PUSH
52479: LD_VAR 0 5
52483: LESS
52484: IFFALSE 52506
// begin result := i ;
52486: LD_ADDR_VAR 0 3
52490: PUSH
52491: LD_VAR 0 4
52495: ST_TO_ADDR
// dist := tmpDist ;
52496: LD_ADDR_VAR 0 5
52500: PUSH
52501: LD_VAR 0 6
52505: ST_TO_ADDR
// end ; end ;
52506: GO 52438
52508: POP
52509: POP
// end ;
52510: LD_VAR 0 3
52514: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52515: LD_INT 0
52517: PPUSH
// uc_side := side ;
52518: LD_ADDR_OWVAR 20
52522: PUSH
52523: LD_VAR 0 1
52527: ST_TO_ADDR
// uc_nation := 3 ;
52528: LD_ADDR_OWVAR 21
52532: PUSH
52533: LD_INT 3
52535: ST_TO_ADDR
// vc_chassis := 25 ;
52536: LD_ADDR_OWVAR 37
52540: PUSH
52541: LD_INT 25
52543: ST_TO_ADDR
// vc_engine := engine_siberite ;
52544: LD_ADDR_OWVAR 39
52548: PUSH
52549: LD_INT 3
52551: ST_TO_ADDR
// vc_control := control_computer ;
52552: LD_ADDR_OWVAR 38
52556: PUSH
52557: LD_INT 3
52559: ST_TO_ADDR
// vc_weapon := 59 ;
52560: LD_ADDR_OWVAR 40
52564: PUSH
52565: LD_INT 59
52567: ST_TO_ADDR
// result := CreateVehicle ;
52568: LD_ADDR_VAR 0 5
52572: PUSH
52573: CALL_OW 45
52577: ST_TO_ADDR
// SetDir ( result , d ) ;
52578: LD_VAR 0 5
52582: PPUSH
52583: LD_VAR 0 4
52587: PPUSH
52588: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52592: LD_VAR 0 5
52596: PPUSH
52597: LD_VAR 0 2
52601: PPUSH
52602: LD_VAR 0 3
52606: PPUSH
52607: LD_INT 0
52609: PPUSH
52610: CALL_OW 48
// end ;
52614: LD_VAR 0 5
52618: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52619: LD_INT 0
52621: PPUSH
52622: PPUSH
52623: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52624: LD_ADDR_VAR 0 2
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52647: LD_VAR 0 1
52651: NOT
52652: IFTRUE 52685
52654: PUSH
52655: LD_VAR 0 1
52659: PPUSH
52660: CALL_OW 264
52664: PUSH
52665: LD_INT 12
52667: PUSH
52668: LD_INT 51
52670: PUSH
52671: LD_INT 32
52673: PUSH
52674: LD_INT 89
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: IN
52683: NOT
52684: OR
52685: IFFALSE 52689
// exit ;
52687: GO 52787
// for i := 1 to 3 do
52689: LD_ADDR_VAR 0 3
52693: PUSH
52694: DOUBLE
52695: LD_INT 1
52697: DEC
52698: ST_TO_ADDR
52699: LD_INT 3
52701: PUSH
52702: FOR_TO
52703: IFFALSE 52785
// begin tmp := GetCargo ( cargo , i ) ;
52705: LD_ADDR_VAR 0 4
52709: PUSH
52710: LD_VAR 0 1
52714: PPUSH
52715: LD_VAR 0 3
52719: PPUSH
52720: CALL_OW 289
52724: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52725: LD_ADDR_VAR 0 2
52729: PUSH
52730: LD_VAR 0 2
52734: PPUSH
52735: LD_VAR 0 3
52739: PPUSH
52740: LD_VAR 0 4
52744: PPUSH
52745: CALL_OW 1
52749: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52750: LD_ADDR_VAR 0 2
52754: PUSH
52755: LD_VAR 0 2
52759: PPUSH
52760: LD_INT 4
52762: PPUSH
52763: LD_VAR 0 2
52767: PUSH
52768: LD_INT 4
52770: ARRAY
52771: PUSH
52772: LD_VAR 0 4
52776: PLUS
52777: PPUSH
52778: CALL_OW 1
52782: ST_TO_ADDR
// end ;
52783: GO 52702
52785: POP
52786: POP
// end ;
52787: LD_VAR 0 2
52791: RET
// export function Length ( array ) ; begin
52792: LD_INT 0
52794: PPUSH
// result := array + 0 ;
52795: LD_ADDR_VAR 0 2
52799: PUSH
52800: LD_VAR 0 1
52804: PUSH
52805: LD_INT 0
52807: PLUS
52808: ST_TO_ADDR
// end ;
52809: LD_VAR 0 2
52813: RET
// export function PrepareArray ( array ) ; begin
52814: LD_INT 0
52816: PPUSH
// result := array diff 0 ;
52817: LD_ADDR_VAR 0 2
52821: PUSH
52822: LD_VAR 0 1
52826: PUSH
52827: LD_INT 0
52829: DIFF
52830: ST_TO_ADDR
// if not result [ 1 ] then
52831: LD_VAR 0 2
52835: PUSH
52836: LD_INT 1
52838: ARRAY
52839: NOT
52840: IFFALSE 52860
// result := Delete ( result , 1 ) ;
52842: LD_ADDR_VAR 0 2
52846: PUSH
52847: LD_VAR 0 2
52851: PPUSH
52852: LD_INT 1
52854: PPUSH
52855: CALL_OW 3
52859: ST_TO_ADDR
// end ;
52860: LD_VAR 0 2
52864: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52865: LD_INT 0
52867: PPUSH
52868: PPUSH
52869: PPUSH
52870: PPUSH
// sibRocketRange := 25 ;
52871: LD_ADDR_VAR 0 6
52875: PUSH
52876: LD_INT 25
52878: ST_TO_ADDR
// result := false ;
52879: LD_ADDR_VAR 0 4
52883: PUSH
52884: LD_INT 0
52886: ST_TO_ADDR
// for i := 0 to 5 do
52887: LD_ADDR_VAR 0 5
52891: PUSH
52892: DOUBLE
52893: LD_INT 0
52895: DEC
52896: ST_TO_ADDR
52897: LD_INT 5
52899: PUSH
52900: FOR_TO
52901: IFFALSE 52968
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52903: LD_VAR 0 1
52907: PPUSH
52908: LD_VAR 0 5
52912: PPUSH
52913: LD_VAR 0 6
52917: PPUSH
52918: CALL_OW 272
52922: PPUSH
52923: LD_VAR 0 2
52927: PPUSH
52928: LD_VAR 0 5
52932: PPUSH
52933: LD_VAR 0 6
52937: PPUSH
52938: CALL_OW 273
52942: PPUSH
52943: LD_VAR 0 3
52947: PPUSH
52948: CALL_OW 309
52952: IFFALSE 52966
// begin result := true ;
52954: LD_ADDR_VAR 0 4
52958: PUSH
52959: LD_INT 1
52961: ST_TO_ADDR
// exit ;
52962: POP
52963: POP
52964: GO 52970
// end ;
52966: GO 52900
52968: POP
52969: POP
// end ;
52970: LD_VAR 0 4
52974: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52975: LD_INT 0
52977: PPUSH
52978: PPUSH
52979: PPUSH
// if btype = b_depot then
52980: LD_VAR 0 2
52984: PUSH
52985: LD_INT 0
52987: EQUAL
52988: IFFALSE 53000
// begin result := true ;
52990: LD_ADDR_VAR 0 3
52994: PUSH
52995: LD_INT 1
52997: ST_TO_ADDR
// exit ;
52998: GO 53120
// end ; pom := GetBase ( depot ) ;
53000: LD_ADDR_VAR 0 4
53004: PUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 274
53014: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53015: LD_ADDR_VAR 0 5
53019: PUSH
53020: LD_VAR 0 2
53024: PPUSH
53025: LD_VAR 0 1
53029: PPUSH
53030: CALL_OW 248
53034: PPUSH
53035: CALL_OW 450
53039: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53040: LD_ADDR_VAR 0 3
53044: PUSH
53045: LD_VAR 0 4
53049: PPUSH
53050: LD_INT 1
53052: PPUSH
53053: CALL_OW 275
53057: PUSH
53058: LD_VAR 0 5
53062: PUSH
53063: LD_INT 1
53065: ARRAY
53066: GREATEREQUAL
53067: IFFALSE 53093
53069: PUSH
53070: LD_VAR 0 4
53074: PPUSH
53075: LD_INT 2
53077: PPUSH
53078: CALL_OW 275
53082: PUSH
53083: LD_VAR 0 5
53087: PUSH
53088: LD_INT 2
53090: ARRAY
53091: GREATEREQUAL
53092: AND
53093: IFFALSE 53119
53095: PUSH
53096: LD_VAR 0 4
53100: PPUSH
53101: LD_INT 3
53103: PPUSH
53104: CALL_OW 275
53108: PUSH
53109: LD_VAR 0 5
53113: PUSH
53114: LD_INT 3
53116: ARRAY
53117: GREATEREQUAL
53118: AND
53119: ST_TO_ADDR
// end ;
53120: LD_VAR 0 3
53124: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53125: LD_INT 0
53127: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53128: LD_VAR 0 1
53132: PPUSH
53133: LD_VAR 0 2
53137: PPUSH
53138: LD_INT 0
53140: PPUSH
53141: LD_INT 0
53143: PPUSH
53144: LD_INT 1
53146: PPUSH
53147: LD_INT 0
53149: PPUSH
53150: CALL_OW 587
// end ;
53154: LD_VAR 0 3
53158: RET
// export function CenterOnNow ( unit ) ; begin
53159: LD_INT 0
53161: PPUSH
// result := IsInUnit ( unit ) ;
53162: LD_ADDR_VAR 0 2
53166: PUSH
53167: LD_VAR 0 1
53171: PPUSH
53172: CALL_OW 310
53176: ST_TO_ADDR
// if not result then
53177: LD_VAR 0 2
53181: NOT
53182: IFFALSE 53194
// result := unit ;
53184: LD_ADDR_VAR 0 2
53188: PUSH
53189: LD_VAR 0 1
53193: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53194: LD_VAR 0 1
53198: PPUSH
53199: CALL_OW 87
// end ;
53203: LD_VAR 0 2
53207: RET
// export function ComMoveHex ( unit , hex ) ; begin
53208: LD_INT 0
53210: PPUSH
// if not hex then
53211: LD_VAR 0 2
53215: NOT
53216: IFFALSE 53220
// exit ;
53218: GO 53273
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53220: LD_VAR 0 2
53224: PUSH
53225: LD_INT 1
53227: ARRAY
53228: PPUSH
53229: LD_VAR 0 2
53233: PUSH
53234: LD_INT 2
53236: ARRAY
53237: PPUSH
53238: CALL_OW 428
53242: IFFALSE 53246
// exit ;
53244: GO 53273
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53246: LD_VAR 0 1
53250: PPUSH
53251: LD_VAR 0 2
53255: PUSH
53256: LD_INT 1
53258: ARRAY
53259: PPUSH
53260: LD_VAR 0 2
53264: PUSH
53265: LD_INT 2
53267: ARRAY
53268: PPUSH
53269: CALL_OW 111
// end ;
53273: LD_VAR 0 3
53277: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53278: LD_INT 0
53280: PPUSH
53281: PPUSH
53282: PPUSH
// if not unit or not enemy then
53283: LD_VAR 0 1
53287: NOT
53288: IFTRUE 53297
53290: PUSH
53291: LD_VAR 0 2
53295: NOT
53296: OR
53297: IFFALSE 53301
// exit ;
53299: GO 53427
// x := GetX ( enemy ) ;
53301: LD_ADDR_VAR 0 4
53305: PUSH
53306: LD_VAR 0 2
53310: PPUSH
53311: CALL_OW 250
53315: ST_TO_ADDR
// y := GetY ( enemy ) ;
53316: LD_ADDR_VAR 0 5
53320: PUSH
53321: LD_VAR 0 2
53325: PPUSH
53326: CALL_OW 251
53330: ST_TO_ADDR
// if ValidHex ( x , y ) then
53331: LD_VAR 0 4
53335: PPUSH
53336: LD_VAR 0 5
53340: PPUSH
53341: CALL_OW 488
53345: IFFALSE 53427
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53347: LD_VAR 0 2
53351: PPUSH
53352: CALL_OW 247
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: IN
53367: IFTRUE 53390
53369: PUSH
53370: LD_VAR 0 1
53374: PPUSH
53375: CALL_OW 255
53379: PPUSH
53380: LD_VAR 0 2
53384: PPUSH
53385: CALL_OW 292
53389: OR
53390: IFFALSE 53408
// ComAttackUnit ( unit , enemy ) else
53392: LD_VAR 0 1
53396: PPUSH
53397: LD_VAR 0 2
53401: PPUSH
53402: CALL_OW 115
53406: GO 53427
// ComAgressiveMove ( unit , x , y ) ;
53408: LD_VAR 0 1
53412: PPUSH
53413: LD_VAR 0 4
53417: PPUSH
53418: LD_VAR 0 5
53422: PPUSH
53423: CALL_OW 114
// end ;
53427: LD_VAR 0 3
53431: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53432: LD_INT 0
53434: PPUSH
53435: PPUSH
53436: PPUSH
// list := AreaToList ( area , 0 ) ;
53437: LD_ADDR_VAR 0 5
53441: PUSH
53442: LD_VAR 0 1
53446: PPUSH
53447: LD_INT 0
53449: PPUSH
53450: CALL_OW 517
53454: ST_TO_ADDR
// if not list then
53455: LD_VAR 0 5
53459: NOT
53460: IFFALSE 53464
// exit ;
53462: GO 53594
// if all then
53464: LD_VAR 0 2
53468: IFFALSE 53556
// begin for i := 1 to list [ 1 ] do
53470: LD_ADDR_VAR 0 4
53474: PUSH
53475: DOUBLE
53476: LD_INT 1
53478: DEC
53479: ST_TO_ADDR
53480: LD_VAR 0 5
53484: PUSH
53485: LD_INT 1
53487: ARRAY
53488: PUSH
53489: FOR_TO
53490: IFFALSE 53552
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53492: LD_ADDR_VAR 0 3
53496: PUSH
53497: LD_VAR 0 3
53501: PPUSH
53502: LD_VAR 0 3
53506: PUSH
53507: LD_INT 1
53509: PLUS
53510: PPUSH
53511: LD_VAR 0 5
53515: PUSH
53516: LD_INT 1
53518: ARRAY
53519: PUSH
53520: LD_VAR 0 4
53524: ARRAY
53525: PUSH
53526: LD_VAR 0 5
53530: PUSH
53531: LD_INT 2
53533: ARRAY
53534: PUSH
53535: LD_VAR 0 4
53539: ARRAY
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PPUSH
53545: CALL_OW 1
53549: ST_TO_ADDR
53550: GO 53489
53552: POP
53553: POP
// exit ;
53554: GO 53594
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53556: LD_ADDR_VAR 0 3
53560: PUSH
53561: LD_VAR 0 5
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: PUSH
53570: LD_INT 1
53572: ARRAY
53573: PUSH
53574: LD_VAR 0 5
53578: PUSH
53579: LD_INT 2
53581: ARRAY
53582: PUSH
53583: LD_INT 1
53585: ARRAY
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: ST_TO_ADDR
// end ;
53594: LD_VAR 0 3
53598: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53599: LD_INT 0
53601: PPUSH
53602: PPUSH
// list := AreaToList ( area , 0 ) ;
53603: LD_ADDR_VAR 0 4
53607: PUSH
53608: LD_VAR 0 1
53612: PPUSH
53613: LD_INT 0
53615: PPUSH
53616: CALL_OW 517
53620: ST_TO_ADDR
// if not list then
53621: LD_VAR 0 4
53625: NOT
53626: IFFALSE 53630
// exit ;
53628: GO 53671
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53630: LD_ADDR_VAR 0 3
53634: PUSH
53635: LD_VAR 0 4
53639: PUSH
53640: LD_INT 1
53642: ARRAY
53643: PUSH
53644: LD_INT 1
53646: ARRAY
53647: PUSH
53648: LD_VAR 0 4
53652: PUSH
53653: LD_INT 2
53655: ARRAY
53656: PUSH
53657: LD_INT 1
53659: ARRAY
53660: PUSH
53661: LD_VAR 0 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: ST_TO_ADDR
// end ;
53671: LD_VAR 0 3
53675: RET
// export function First ( array ) ; begin
53676: LD_INT 0
53678: PPUSH
// if not array then
53679: LD_VAR 0 1
53683: NOT
53684: IFFALSE 53688
// exit ;
53686: GO 53702
// result := array [ 1 ] ;
53688: LD_ADDR_VAR 0 2
53692: PUSH
53693: LD_VAR 0 1
53697: PUSH
53698: LD_INT 1
53700: ARRAY
53701: ST_TO_ADDR
// end ;
53702: LD_VAR 0 2
53706: RET
// export function Last ( array ) ; begin
53707: LD_INT 0
53709: PPUSH
// if not array then
53710: LD_VAR 0 1
53714: NOT
53715: IFFALSE 53719
// exit ;
53717: GO 53735
// result := array [ array ] ;
53719: LD_ADDR_VAR 0 2
53723: PUSH
53724: LD_VAR 0 1
53728: PUSH
53729: LD_VAR 0 1
53733: ARRAY
53734: ST_TO_ADDR
// end ;
53735: LD_VAR 0 2
53739: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53740: LD_INT 0
53742: PPUSH
53743: PPUSH
// result := [ ] ;
53744: LD_ADDR_VAR 0 5
53748: PUSH
53749: EMPTY
53750: ST_TO_ADDR
// if not array then
53751: LD_VAR 0 1
53755: NOT
53756: IFFALSE 53760
// exit ;
53758: GO 53872
// for i := 1 to array do
53760: LD_ADDR_VAR 0 6
53764: PUSH
53765: DOUBLE
53766: LD_INT 1
53768: DEC
53769: ST_TO_ADDR
53770: LD_VAR 0 1
53774: PUSH
53775: FOR_TO
53776: IFFALSE 53870
// if array [ i ] [ index ] = value then
53778: LD_VAR 0 1
53782: PUSH
53783: LD_VAR 0 6
53787: ARRAY
53788: PUSH
53789: LD_VAR 0 2
53793: ARRAY
53794: PUSH
53795: LD_VAR 0 3
53799: EQUAL
53800: IFFALSE 53868
// begin if indexColumn then
53802: LD_VAR 0 4
53806: IFFALSE 53842
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53808: LD_ADDR_VAR 0 5
53812: PUSH
53813: LD_VAR 0 5
53817: PPUSH
53818: LD_VAR 0 1
53822: PUSH
53823: LD_VAR 0 6
53827: ARRAY
53828: PUSH
53829: LD_VAR 0 4
53833: ARRAY
53834: PPUSH
53835: CALL 48880 0 2
53839: ST_TO_ADDR
53840: GO 53868
// result := Join ( result , array [ i ] ) ;
53842: LD_ADDR_VAR 0 5
53846: PUSH
53847: LD_VAR 0 5
53851: PPUSH
53852: LD_VAR 0 1
53856: PUSH
53857: LD_VAR 0 6
53861: ARRAY
53862: PPUSH
53863: CALL 48880 0 2
53867: ST_TO_ADDR
// end ;
53868: GO 53775
53870: POP
53871: POP
// end ;
53872: LD_VAR 0 5
53876: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53877: LD_INT 0
53879: PPUSH
// if not vehicles or not parkingPoint then
53880: LD_VAR 0 1
53884: NOT
53885: IFTRUE 53894
53887: PUSH
53888: LD_VAR 0 2
53892: NOT
53893: OR
53894: IFFALSE 53898
// exit ;
53896: GO 53996
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53898: LD_ADDR_VAR 0 1
53902: PUSH
53903: LD_VAR 0 1
53907: PPUSH
53908: LD_INT 50
53910: PUSH
53911: EMPTY
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: LD_INT 92
53919: PUSH
53920: LD_VAR 0 2
53924: PUSH
53925: LD_INT 1
53927: ARRAY
53928: PUSH
53929: LD_VAR 0 2
53933: PUSH
53934: LD_INT 2
53936: ARRAY
53937: PUSH
53938: LD_INT 8
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PPUSH
53955: CALL_OW 72
53959: ST_TO_ADDR
// if not vehicles then
53960: LD_VAR 0 1
53964: NOT
53965: IFFALSE 53969
// exit ;
53967: GO 53996
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53969: LD_VAR 0 1
53973: PPUSH
53974: LD_VAR 0 2
53978: PUSH
53979: LD_INT 1
53981: ARRAY
53982: PPUSH
53983: LD_VAR 0 2
53987: PUSH
53988: LD_INT 2
53990: ARRAY
53991: PPUSH
53992: CALL_OW 111
// end ;
53996: LD_VAR 0 3
54000: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54001: LD_INT 0
54003: PPUSH
54004: PPUSH
54005: PPUSH
// if not side or not area then
54006: LD_VAR 0 1
54010: NOT
54011: IFTRUE 54020
54013: PUSH
54014: LD_VAR 0 2
54018: NOT
54019: OR
54020: IFFALSE 54024
// exit ;
54022: GO 54143
// tmp := AreaToList ( area , 0 ) ;
54024: LD_ADDR_VAR 0 5
54028: PUSH
54029: LD_VAR 0 2
54033: PPUSH
54034: LD_INT 0
54036: PPUSH
54037: CALL_OW 517
54041: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54042: LD_ADDR_VAR 0 4
54046: PUSH
54047: DOUBLE
54048: LD_INT 1
54050: DEC
54051: ST_TO_ADDR
54052: LD_VAR 0 5
54056: PUSH
54057: LD_INT 1
54059: ARRAY
54060: PUSH
54061: FOR_TO
54062: IFFALSE 54141
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54064: LD_VAR 0 5
54068: PUSH
54069: LD_INT 1
54071: ARRAY
54072: PUSH
54073: LD_VAR 0 4
54077: ARRAY
54078: PPUSH
54079: LD_VAR 0 5
54083: PUSH
54084: LD_INT 2
54086: ARRAY
54087: PUSH
54088: LD_VAR 0 4
54092: ARRAY
54093: PPUSH
54094: CALL_OW 351
54098: IFFALSE 54139
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54100: LD_VAR 0 5
54104: PUSH
54105: LD_INT 1
54107: ARRAY
54108: PUSH
54109: LD_VAR 0 4
54113: ARRAY
54114: PPUSH
54115: LD_VAR 0 5
54119: PUSH
54120: LD_INT 2
54122: ARRAY
54123: PUSH
54124: LD_VAR 0 4
54128: ARRAY
54129: PPUSH
54130: LD_VAR 0 1
54134: PPUSH
54135: CALL_OW 244
// end ;
54139: GO 54061
54141: POP
54142: POP
// end ;
54143: LD_VAR 0 3
54147: RET
// export function UniqueArray ( array ) ; var i ; begin
54148: LD_INT 0
54150: PPUSH
54151: PPUSH
// result := [ ] ;
54152: LD_ADDR_VAR 0 2
54156: PUSH
54157: EMPTY
54158: ST_TO_ADDR
// if not array then
54159: LD_VAR 0 1
54163: NOT
54164: IFFALSE 54168
// exit ;
54166: GO 54229
// for i := 1 to array do
54168: LD_ADDR_VAR 0 3
54172: PUSH
54173: DOUBLE
54174: LD_INT 1
54176: DEC
54177: ST_TO_ADDR
54178: LD_VAR 0 1
54182: PUSH
54183: FOR_TO
54184: IFFALSE 54227
// if not array [ i ] in result then
54186: LD_VAR 0 1
54190: PUSH
54191: LD_VAR 0 3
54195: ARRAY
54196: PUSH
54197: LD_VAR 0 2
54201: IN
54202: NOT
54203: IFFALSE 54225
// result := Join ( result , i ) ;
54205: LD_ADDR_VAR 0 2
54209: PUSH
54210: LD_VAR 0 2
54214: PPUSH
54215: LD_VAR 0 3
54219: PPUSH
54220: CALL 48880 0 2
54224: ST_TO_ADDR
54225: GO 54183
54227: POP
54228: POP
// end ; end_of_file
54229: LD_VAR 0 2
54233: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54234: LD_VAR 0 1
54238: PUSH
54239: LD_INT 200
54241: DOUBLE
54242: GREATEREQUAL
54243: IFFALSE 54251
54245: LD_INT 299
54247: DOUBLE
54248: LESSEQUAL
54249: IFTRUE 54253
54251: GO 54285
54253: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54254: LD_VAR 0 1
54258: PPUSH
54259: LD_VAR 0 2
54263: PPUSH
54264: LD_VAR 0 3
54268: PPUSH
54269: LD_VAR 0 4
54273: PPUSH
54274: LD_VAR 0 5
54278: PPUSH
54279: CALL 55147 0 5
54283: GO 54362
54285: LD_INT 300
54287: DOUBLE
54288: GREATEREQUAL
54289: IFFALSE 54297
54291: LD_INT 399
54293: DOUBLE
54294: LESSEQUAL
54295: IFTRUE 54299
54297: GO 54361
54299: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54300: LD_VAR 0 1
54304: PPUSH
54305: LD_VAR 0 2
54309: PPUSH
54310: LD_VAR 0 3
54314: PPUSH
54315: LD_VAR 0 4
54319: PPUSH
54320: LD_VAR 0 5
54324: PPUSH
54325: LD_VAR 0 6
54329: PPUSH
54330: LD_VAR 0 7
54334: PPUSH
54335: LD_VAR 0 8
54339: PPUSH
54340: LD_VAR 0 9
54344: PPUSH
54345: LD_VAR 0 10
54349: PPUSH
54350: LD_VAR 0 11
54354: PPUSH
54355: CALL 63149 0 11
54359: GO 54362
54361: POP
// end ;
54362: PPOPN 11
54364: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54365: LD_VAR 0 1
54369: PPUSH
54370: LD_VAR 0 2
54374: PPUSH
54375: LD_VAR 0 3
54379: PPUSH
54380: LD_VAR 0 4
54384: PPUSH
54385: LD_VAR 0 5
54389: PPUSH
54390: CALL 54447 0 5
// end ; end_of_file
54394: PPOPN 5
54396: END
// export function SOS_UnitDestroyed ( un ) ; begin
54397: LD_INT 0
54399: PPUSH
// ComRadiation ( un ) ;
54400: LD_VAR 0 1
54404: PPUSH
54405: CALL 55567 0 1
// end ;
54409: LD_VAR 0 2
54413: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54414: LD_INT 0
54416: PPUSH
// ComRadiation ( un ) ;
54417: LD_VAR 0 1
54421: PPUSH
54422: CALL 55567 0 1
// end ;
54426: LD_VAR 0 2
54430: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54431: LD_INT 0
54433: PPUSH
// end ;
54434: LD_VAR 0 4
54438: RET
// export function SOS_Command ( cmd ) ; begin
54439: LD_INT 0
54441: PPUSH
// end ;
54442: LD_VAR 0 2
54446: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54447: LD_INT 0
54449: PPUSH
// end ;
54450: LD_VAR 0 6
54454: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54455: LD_INT 0
54457: PPUSH
54458: PPUSH
54459: PPUSH
54460: PPUSH
54461: PPUSH
// if not vehicle or not factory then
54462: LD_VAR 0 1
54466: NOT
54467: IFTRUE 54476
54469: PUSH
54470: LD_VAR 0 2
54474: NOT
54475: OR
54476: IFFALSE 54480
// exit ;
54478: GO 55142
// weapon := GetWeapon ( vehicle ) ;
54480: LD_ADDR_VAR 0 7
54484: PUSH
54485: LD_VAR 0 1
54489: PPUSH
54490: CALL_OW 264
54494: ST_TO_ADDR
// if weapon = ar_miner then
54495: LD_VAR 0 7
54499: PUSH
54500: LD_INT 81
54502: EQUAL
54503: IFFALSE 54560
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54505: LD_ADDR_EXP 56
54509: PUSH
54510: LD_EXP 56
54514: PPUSH
54515: LD_EXP 56
54519: PUSH
54520: LD_INT 1
54522: PLUS
54523: PPUSH
54524: LD_VAR 0 1
54528: PPUSH
54529: CALL_OW 1
54533: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54534: LD_ADDR_EXP 57
54538: PUSH
54539: LD_EXP 57
54543: PPUSH
54544: LD_EXP 57
54548: PUSH
54549: LD_INT 1
54551: PLUS
54552: PPUSH
54553: EMPTY
54554: PPUSH
54555: CALL_OW 1
54559: ST_TO_ADDR
// end ; if not factoryWaypoints then
54560: LD_EXP 60
54564: NOT
54565: IFFALSE 54569
// exit ;
54567: GO 55142
// for i := 1 to Count ( factoryWaypoints ) do
54569: LD_ADDR_VAR 0 4
54573: PUSH
54574: DOUBLE
54575: LD_INT 1
54577: DEC
54578: ST_TO_ADDR
54579: LD_EXP 60
54583: PPUSH
54584: CALL 12914 0 1
54588: PUSH
54589: FOR_TO
54590: IFFALSE 55140
// if factoryWaypoints [ i ] [ 2 ] = factory then
54592: LD_EXP 60
54596: PUSH
54597: LD_VAR 0 4
54601: ARRAY
54602: PUSH
54603: LD_INT 2
54605: ARRAY
54606: PUSH
54607: LD_VAR 0 2
54611: EQUAL
54612: IFFALSE 55138
// begin if GetControl ( vehicle ) = control_manual then
54614: LD_VAR 0 1
54618: PPUSH
54619: CALL_OW 263
54623: PUSH
54624: LD_INT 1
54626: EQUAL
54627: IFFALSE 54991
// begin driver := IsDrivenBy ( vehicle ) ;
54629: LD_ADDR_VAR 0 5
54633: PUSH
54634: LD_VAR 0 1
54638: PPUSH
54639: CALL_OW 311
54643: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54644: LD_VAR 0 5
54648: PUSH
54649: LD_EXP 61
54653: IN
54654: IFTRUE 54668
54656: PUSH
54657: LD_VAR 0 1
54661: PUSH
54662: LD_EXP 61
54666: IN
54667: OR
54668: IFFALSE 54674
// exit ;
54670: POP
54671: POP
54672: GO 55142
// if not HasTask ( driver ) then
54674: LD_VAR 0 5
54678: PPUSH
54679: CALL_OW 314
54683: NOT
54684: IFFALSE 54989
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54686: LD_ADDR_EXP 61
54690: PUSH
54691: LD_EXP 61
54695: PPUSH
54696: LD_VAR 0 5
54700: PPUSH
54701: CALL 48880 0 2
54705: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54706: LD_ADDR_EXP 61
54710: PUSH
54711: LD_EXP 61
54715: PPUSH
54716: LD_VAR 0 1
54720: PPUSH
54721: CALL 48880 0 2
54725: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54726: LD_ADDR_VAR 0 6
54730: PUSH
54731: LD_EXP 60
54735: PUSH
54736: LD_VAR 0 4
54740: ARRAY
54741: PUSH
54742: LD_INT 3
54744: ARRAY
54745: PPUSH
54746: LD_EXP 60
54750: PUSH
54751: LD_VAR 0 4
54755: ARRAY
54756: PUSH
54757: LD_INT 4
54759: ARRAY
54760: PPUSH
54761: CALL_OW 428
54765: ST_TO_ADDR
// if hex then
54766: LD_VAR 0 6
54770: IFFALSE 54788
// ComMoveUnit ( driver , hex ) else
54772: LD_VAR 0 5
54776: PPUSH
54777: LD_VAR 0 6
54781: PPUSH
54782: CALL_OW 112
54786: GO 54872
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54788: LD_VAR 0 1
54792: PPUSH
54793: LD_EXP 60
54797: PUSH
54798: LD_VAR 0 4
54802: ARRAY
54803: PUSH
54804: LD_INT 3
54806: ARRAY
54807: PPUSH
54808: LD_EXP 60
54812: PUSH
54813: LD_VAR 0 4
54817: ARRAY
54818: PUSH
54819: LD_INT 4
54821: ARRAY
54822: PPUSH
54823: CALL_OW 297
54827: PUSH
54828: LD_INT 0
54830: GREATER
54831: IFFALSE 54872
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54833: LD_VAR 0 5
54837: PPUSH
54838: LD_EXP 60
54842: PUSH
54843: LD_VAR 0 4
54847: ARRAY
54848: PUSH
54849: LD_INT 3
54851: ARRAY
54852: PPUSH
54853: LD_EXP 60
54857: PUSH
54858: LD_VAR 0 4
54862: ARRAY
54863: PUSH
54864: LD_INT 4
54866: ARRAY
54867: PPUSH
54868: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54872: LD_VAR 0 5
54876: PPUSH
54877: CALL_OW 181
// if Multiplayer then
54881: LD_OWVAR 4
54885: IFFALSE 54934
// begin repeat wait ( 10 ) ;
54887: LD_INT 10
54889: PPUSH
54890: CALL_OW 67
// until not IsInUnit ( driver ) ;
54894: LD_VAR 0 5
54898: PPUSH
54899: CALL_OW 310
54903: NOT
54904: IFFALSE 54887
// if not HasTask ( driver ) then
54906: LD_VAR 0 5
54910: PPUSH
54911: CALL_OW 314
54915: NOT
54916: IFFALSE 54932
// ComEnterUnit ( driver , factory ) ;
54918: LD_VAR 0 5
54922: PPUSH
54923: LD_VAR 0 2
54927: PPUSH
54928: CALL_OW 120
// end else
54932: GO 54948
// AddComEnterUnit ( driver , factory ) ;
54934: LD_VAR 0 5
54938: PPUSH
54939: LD_VAR 0 2
54943: PPUSH
54944: CALL_OW 180
// wait ( 0 0$1 ) ;
54948: LD_INT 35
54950: PPUSH
54951: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54955: LD_ADDR_EXP 61
54959: PUSH
54960: LD_EXP 61
54964: PUSH
54965: LD_VAR 0 5
54969: DIFF
54970: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54971: LD_ADDR_EXP 61
54975: PUSH
54976: LD_EXP 61
54980: PUSH
54981: LD_VAR 0 1
54985: DIFF
54986: ST_TO_ADDR
// break ;
54987: GO 55140
// end ; end else
54989: GO 55138
// if GetControl ( vehicle ) = control_remote then
54991: LD_VAR 0 1
54995: PPUSH
54996: CALL_OW 263
55000: PUSH
55001: LD_INT 2
55003: EQUAL
55004: IFFALSE 55090
// begin wait ( 0 0$2 ) ;
55006: LD_INT 70
55008: PPUSH
55009: CALL_OW 67
// repeat wait ( 10 ) ;
55013: LD_INT 10
55015: PPUSH
55016: CALL_OW 67
// Connect ( vehicle ) ;
55020: LD_VAR 0 1
55024: PPUSH
55025: CALL 19192 0 1
// until IsControledBy ( vehicle ) ;
55029: LD_VAR 0 1
55033: PPUSH
55034: CALL_OW 312
55038: IFFALSE 55013
// wait ( 10 ) ;
55040: LD_INT 10
55042: PPUSH
55043: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55047: LD_VAR 0 1
55051: PPUSH
55052: LD_EXP 60
55056: PUSH
55057: LD_VAR 0 4
55061: ARRAY
55062: PUSH
55063: LD_INT 3
55065: ARRAY
55066: PPUSH
55067: LD_EXP 60
55071: PUSH
55072: LD_VAR 0 4
55076: ARRAY
55077: PUSH
55078: LD_INT 4
55080: ARRAY
55081: PPUSH
55082: CALL_OW 111
// break ;
55086: GO 55140
// end else
55088: GO 55138
// begin wait ( 0 0$3 ) ;
55090: LD_INT 105
55092: PPUSH
55093: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55097: LD_VAR 0 1
55101: PPUSH
55102: LD_EXP 60
55106: PUSH
55107: LD_VAR 0 4
55111: ARRAY
55112: PUSH
55113: LD_INT 3
55115: ARRAY
55116: PPUSH
55117: LD_EXP 60
55121: PUSH
55122: LD_VAR 0 4
55126: ARRAY
55127: PUSH
55128: LD_INT 4
55130: ARRAY
55131: PPUSH
55132: CALL_OW 111
// break ;
55136: GO 55140
// end ; end ;
55138: GO 54589
55140: POP
55141: POP
// end ;
55142: LD_VAR 0 3
55146: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55147: LD_INT 0
55149: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55150: LD_VAR 0 1
55154: PUSH
55155: LD_INT 250
55157: EQUAL
55158: IFFALSE 55175
55160: PUSH
55161: LD_VAR 0 2
55165: PPUSH
55166: CALL_OW 264
55170: PUSH
55171: LD_INT 81
55173: EQUAL
55174: AND
55175: IFFALSE 55196
// MinerPlaceMine ( unit , x , y ) ;
55177: LD_VAR 0 2
55181: PPUSH
55182: LD_VAR 0 4
55186: PPUSH
55187: LD_VAR 0 5
55191: PPUSH
55192: CALL 58477 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55196: LD_VAR 0 1
55200: PUSH
55201: LD_INT 251
55203: EQUAL
55204: IFFALSE 55221
55206: PUSH
55207: LD_VAR 0 2
55211: PPUSH
55212: CALL_OW 264
55216: PUSH
55217: LD_INT 81
55219: EQUAL
55220: AND
55221: IFFALSE 55242
// MinerDetonateMine ( unit , x , y ) ;
55223: LD_VAR 0 2
55227: PPUSH
55228: LD_VAR 0 4
55232: PPUSH
55233: LD_VAR 0 5
55237: PPUSH
55238: CALL 58884 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55242: LD_VAR 0 1
55246: PUSH
55247: LD_INT 252
55249: EQUAL
55250: IFFALSE 55267
55252: PUSH
55253: LD_VAR 0 2
55257: PPUSH
55258: CALL_OW 264
55262: PUSH
55263: LD_INT 81
55265: EQUAL
55266: AND
55267: IFFALSE 55288
// MinerCreateMinefield ( unit , x , y ) ;
55269: LD_VAR 0 2
55273: PPUSH
55274: LD_VAR 0 4
55278: PPUSH
55279: LD_VAR 0 5
55283: PPUSH
55284: CALL 59116 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55288: LD_VAR 0 1
55292: PUSH
55293: LD_INT 253
55295: EQUAL
55296: IFFALSE 55313
55298: PUSH
55299: LD_VAR 0 2
55303: PPUSH
55304: CALL_OW 257
55308: PUSH
55309: LD_INT 5
55311: EQUAL
55312: AND
55313: IFFALSE 55334
// ComBinocular ( unit , x , y ) ;
55315: LD_VAR 0 2
55319: PPUSH
55320: LD_VAR 0 4
55324: PPUSH
55325: LD_VAR 0 5
55329: PPUSH
55330: CALL 59491 0 3
// if selectedUnit then
55334: LD_VAR 0 3
55338: IFFALSE 55398
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55340: LD_VAR 0 1
55344: PUSH
55345: LD_INT 254
55347: EQUAL
55348: IFFALSE 55365
55350: PUSH
55351: LD_VAR 0 2
55355: PPUSH
55356: CALL_OW 264
55360: PUSH
55361: LD_INT 99
55363: EQUAL
55364: AND
55365: IFFALSE 55382
55367: PUSH
55368: LD_VAR 0 3
55372: PPUSH
55373: CALL_OW 263
55377: PUSH
55378: LD_INT 3
55380: EQUAL
55381: AND
55382: IFFALSE 55398
// HackDestroyVehicle ( unit , selectedUnit ) ;
55384: LD_VAR 0 2
55388: PPUSH
55389: LD_VAR 0 3
55393: PPUSH
55394: CALL 57688 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55398: LD_VAR 0 1
55402: PUSH
55403: LD_INT 255
55405: EQUAL
55406: IFFALSE 55430
55408: PUSH
55409: LD_VAR 0 2
55413: PPUSH
55414: CALL_OW 264
55418: PUSH
55419: LD_INT 14
55421: PUSH
55422: LD_INT 53
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: IN
55429: AND
55430: IFFALSE 55448
55432: PUSH
55433: LD_VAR 0 4
55437: PPUSH
55438: LD_VAR 0 5
55442: PPUSH
55443: CALL_OW 488
55447: AND
55448: IFFALSE 55472
// CutTreeXYR ( unit , x , y , 12 ) ;
55450: LD_VAR 0 2
55454: PPUSH
55455: LD_VAR 0 4
55459: PPUSH
55460: LD_VAR 0 5
55464: PPUSH
55465: LD_INT 12
55467: PPUSH
55468: CALL 55663 0 4
// if cmd = 256 then
55472: LD_VAR 0 1
55476: PUSH
55477: LD_INT 256
55479: EQUAL
55480: IFFALSE 55501
// SetFactoryWaypoint ( unit , x , y ) ;
55482: LD_VAR 0 2
55486: PPUSH
55487: LD_VAR 0 4
55491: PPUSH
55492: LD_VAR 0 5
55496: PPUSH
55497: CALL 63157 0 3
// if cmd = 257 then
55501: LD_VAR 0 1
55505: PUSH
55506: LD_INT 257
55508: EQUAL
55509: IFFALSE 55530
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55511: LD_VAR 0 2
55515: PPUSH
55516: LD_VAR 0 4
55520: PPUSH
55521: LD_VAR 0 5
55525: PPUSH
55526: CALL 63653 0 3
// if cmd = 258 then
55530: LD_VAR 0 1
55534: PUSH
55535: LD_INT 258
55537: EQUAL
55538: IFFALSE 55562
// BurnTreeXYR ( unit , x , y , 8 ) ;
55540: LD_VAR 0 2
55544: PPUSH
55545: LD_VAR 0 4
55549: PPUSH
55550: LD_VAR 0 5
55554: PPUSH
55555: LD_INT 8
55557: PPUSH
55558: CALL 56063 0 4
// end ;
55562: LD_VAR 0 6
55566: RET
// export function ComRadiation ( un ) ; var eff ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55571: LD_VAR 0 1
55575: PPUSH
55576: CALL_OW 264
55580: PUSH
55581: LD_INT 91
55583: NONEQUAL
55584: IFFALSE 55588
// exit ;
55586: GO 55658
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55588: LD_INT 68
55590: PPUSH
55591: LD_VAR 0 1
55595: PPUSH
55596: CALL_OW 255
55600: PPUSH
55601: CALL_OW 321
55605: PUSH
55606: LD_INT 2
55608: EQUAL
55609: IFFALSE 55621
// eff := 50 else
55611: LD_ADDR_VAR 0 3
55615: PUSH
55616: LD_INT 50
55618: ST_TO_ADDR
55619: GO 55629
// eff := 25 ;
55621: LD_ADDR_VAR 0 3
55625: PUSH
55626: LD_INT 25
55628: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55629: LD_VAR 0 1
55633: PPUSH
55634: CALL_OW 250
55638: PPUSH
55639: LD_VAR 0 1
55643: PPUSH
55644: CALL_OW 251
55648: PPUSH
55649: LD_VAR 0 3
55653: PPUSH
55654: CALL_OW 495
// end ;
55658: LD_VAR 0 2
55662: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55663: LD_INT 0
55665: PPUSH
55666: PPUSH
55667: PPUSH
55668: PPUSH
55669: PPUSH
55670: PPUSH
55671: PPUSH
55672: PPUSH
55673: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55674: LD_VAR 0 1
55678: PPUSH
55679: CALL_OW 302
55683: NOT
55684: IFTRUE 55703
55686: PUSH
55687: LD_VAR 0 2
55691: PPUSH
55692: LD_VAR 0 3
55696: PPUSH
55697: CALL_OW 488
55701: NOT
55702: OR
55703: IFTRUE 55712
55705: PUSH
55706: LD_VAR 0 4
55710: NOT
55711: OR
55712: IFFALSE 55716
// exit ;
55714: GO 56058
// list := [ ] ;
55716: LD_ADDR_VAR 0 13
55720: PUSH
55721: EMPTY
55722: ST_TO_ADDR
// if x - r < 0 then
55723: LD_VAR 0 2
55727: PUSH
55728: LD_VAR 0 4
55732: MINUS
55733: PUSH
55734: LD_INT 0
55736: LESS
55737: IFFALSE 55749
// min_x := 0 else
55739: LD_ADDR_VAR 0 7
55743: PUSH
55744: LD_INT 0
55746: ST_TO_ADDR
55747: GO 55765
// min_x := x - r ;
55749: LD_ADDR_VAR 0 7
55753: PUSH
55754: LD_VAR 0 2
55758: PUSH
55759: LD_VAR 0 4
55763: MINUS
55764: ST_TO_ADDR
// if y - r < 0 then
55765: LD_VAR 0 3
55769: PUSH
55770: LD_VAR 0 4
55774: MINUS
55775: PUSH
55776: LD_INT 0
55778: LESS
55779: IFFALSE 55791
// min_y := 0 else
55781: LD_ADDR_VAR 0 8
55785: PUSH
55786: LD_INT 0
55788: ST_TO_ADDR
55789: GO 55807
// min_y := y - r ;
55791: LD_ADDR_VAR 0 8
55795: PUSH
55796: LD_VAR 0 3
55800: PUSH
55801: LD_VAR 0 4
55805: MINUS
55806: ST_TO_ADDR
// max_x := x + r ;
55807: LD_ADDR_VAR 0 9
55811: PUSH
55812: LD_VAR 0 2
55816: PUSH
55817: LD_VAR 0 4
55821: PLUS
55822: ST_TO_ADDR
// max_y := y + r ;
55823: LD_ADDR_VAR 0 10
55827: PUSH
55828: LD_VAR 0 3
55832: PUSH
55833: LD_VAR 0 4
55837: PLUS
55838: ST_TO_ADDR
// for _x = min_x to max_x do
55839: LD_ADDR_VAR 0 11
55843: PUSH
55844: DOUBLE
55845: LD_VAR 0 7
55849: DEC
55850: ST_TO_ADDR
55851: LD_VAR 0 9
55855: PUSH
55856: FOR_TO
55857: IFFALSE 55976
// for _y = min_y to max_y do
55859: LD_ADDR_VAR 0 12
55863: PUSH
55864: DOUBLE
55865: LD_VAR 0 8
55869: DEC
55870: ST_TO_ADDR
55871: LD_VAR 0 10
55875: PUSH
55876: FOR_TO
55877: IFFALSE 55972
// begin if not ValidHex ( _x , _y ) then
55879: LD_VAR 0 11
55883: PPUSH
55884: LD_VAR 0 12
55888: PPUSH
55889: CALL_OW 488
55893: NOT
55894: IFFALSE 55898
// continue ;
55896: GO 55876
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55898: LD_VAR 0 11
55902: PPUSH
55903: LD_VAR 0 12
55907: PPUSH
55908: CALL_OW 351
55912: IFFALSE 55930
55914: PUSH
55915: LD_VAR 0 11
55919: PPUSH
55920: LD_VAR 0 12
55924: PPUSH
55925: CALL_OW 554
55929: AND
55930: IFFALSE 55970
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55932: LD_ADDR_VAR 0 13
55936: PUSH
55937: LD_VAR 0 13
55941: PPUSH
55942: LD_VAR 0 13
55946: PUSH
55947: LD_INT 1
55949: PLUS
55950: PPUSH
55951: LD_VAR 0 11
55955: PUSH
55956: LD_VAR 0 12
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PPUSH
55965: CALL_OW 2
55969: ST_TO_ADDR
// end ;
55970: GO 55876
55972: POP
55973: POP
55974: GO 55856
55976: POP
55977: POP
// if not list then
55978: LD_VAR 0 13
55982: NOT
55983: IFFALSE 55987
// exit ;
55985: GO 56058
// for i in list do
55987: LD_ADDR_VAR 0 6
55991: PUSH
55992: LD_VAR 0 13
55996: PUSH
55997: FOR_IN
55998: IFFALSE 56056
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56000: LD_VAR 0 1
56004: PPUSH
56005: LD_STRING M
56007: PUSH
56008: LD_VAR 0 6
56012: PUSH
56013: LD_INT 1
56015: ARRAY
56016: PUSH
56017: LD_VAR 0 6
56021: PUSH
56022: LD_INT 2
56024: ARRAY
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: PPUSH
56050: CALL_OW 447
56054: GO 55997
56056: POP
56057: POP
// end ;
56058: LD_VAR 0 5
56062: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56063: LD_INT 0
56065: PPUSH
56066: PPUSH
56067: PPUSH
56068: PPUSH
56069: PPUSH
56070: PPUSH
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56075: LD_VAR 0 1
56079: PPUSH
56080: CALL_OW 302
56084: NOT
56085: IFTRUE 56104
56087: PUSH
56088: LD_VAR 0 2
56092: PPUSH
56093: LD_VAR 0 3
56097: PPUSH
56098: CALL_OW 488
56102: NOT
56103: OR
56104: IFTRUE 56113
56106: PUSH
56107: LD_VAR 0 4
56111: NOT
56112: OR
56113: IFFALSE 56117
// exit ;
56115: GO 56634
// list := [ ] ;
56117: LD_ADDR_VAR 0 13
56121: PUSH
56122: EMPTY
56123: ST_TO_ADDR
// if x - r < 0 then
56124: LD_VAR 0 2
56128: PUSH
56129: LD_VAR 0 4
56133: MINUS
56134: PUSH
56135: LD_INT 0
56137: LESS
56138: IFFALSE 56150
// min_x := 0 else
56140: LD_ADDR_VAR 0 7
56144: PUSH
56145: LD_INT 0
56147: ST_TO_ADDR
56148: GO 56166
// min_x := x - r ;
56150: LD_ADDR_VAR 0 7
56154: PUSH
56155: LD_VAR 0 2
56159: PUSH
56160: LD_VAR 0 4
56164: MINUS
56165: ST_TO_ADDR
// if y - r < 0 then
56166: LD_VAR 0 3
56170: PUSH
56171: LD_VAR 0 4
56175: MINUS
56176: PUSH
56177: LD_INT 0
56179: LESS
56180: IFFALSE 56192
// min_y := 0 else
56182: LD_ADDR_VAR 0 8
56186: PUSH
56187: LD_INT 0
56189: ST_TO_ADDR
56190: GO 56208
// min_y := y - r ;
56192: LD_ADDR_VAR 0 8
56196: PUSH
56197: LD_VAR 0 3
56201: PUSH
56202: LD_VAR 0 4
56206: MINUS
56207: ST_TO_ADDR
// max_x := x + r ;
56208: LD_ADDR_VAR 0 9
56212: PUSH
56213: LD_VAR 0 2
56217: PUSH
56218: LD_VAR 0 4
56222: PLUS
56223: ST_TO_ADDR
// max_y := y + r ;
56224: LD_ADDR_VAR 0 10
56228: PUSH
56229: LD_VAR 0 3
56233: PUSH
56234: LD_VAR 0 4
56238: PLUS
56239: ST_TO_ADDR
// for _x = min_x to max_x do
56240: LD_ADDR_VAR 0 11
56244: PUSH
56245: DOUBLE
56246: LD_VAR 0 7
56250: DEC
56251: ST_TO_ADDR
56252: LD_VAR 0 9
56256: PUSH
56257: FOR_TO
56258: IFFALSE 56377
// for _y = min_y to max_y do
56260: LD_ADDR_VAR 0 12
56264: PUSH
56265: DOUBLE
56266: LD_VAR 0 8
56270: DEC
56271: ST_TO_ADDR
56272: LD_VAR 0 10
56276: PUSH
56277: FOR_TO
56278: IFFALSE 56373
// begin if not ValidHex ( _x , _y ) then
56280: LD_VAR 0 11
56284: PPUSH
56285: LD_VAR 0 12
56289: PPUSH
56290: CALL_OW 488
56294: NOT
56295: IFFALSE 56299
// continue ;
56297: GO 56277
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56299: LD_VAR 0 11
56303: PPUSH
56304: LD_VAR 0 12
56308: PPUSH
56309: CALL_OW 351
56313: IFFALSE 56331
56315: PUSH
56316: LD_VAR 0 11
56320: PPUSH
56321: LD_VAR 0 12
56325: PPUSH
56326: CALL_OW 554
56330: AND
56331: IFFALSE 56371
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56333: LD_ADDR_VAR 0 13
56337: PUSH
56338: LD_VAR 0 13
56342: PPUSH
56343: LD_VAR 0 13
56347: PUSH
56348: LD_INT 1
56350: PLUS
56351: PPUSH
56352: LD_VAR 0 11
56356: PUSH
56357: LD_VAR 0 12
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PPUSH
56366: CALL_OW 2
56370: ST_TO_ADDR
// end ;
56371: GO 56277
56373: POP
56374: POP
56375: GO 56257
56377: POP
56378: POP
// if not list then
56379: LD_VAR 0 13
56383: NOT
56384: IFFALSE 56388
// exit ;
56386: GO 56634
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56388: LD_ADDR_VAR 0 13
56392: PUSH
56393: LD_VAR 0 1
56397: PPUSH
56398: LD_VAR 0 13
56402: PPUSH
56403: LD_INT 1
56405: PPUSH
56406: LD_INT 1
56408: PPUSH
56409: CALL 16320 0 4
56413: ST_TO_ADDR
// ComStop ( flame ) ;
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 141
// for i in list do
56423: LD_ADDR_VAR 0 6
56427: PUSH
56428: LD_VAR 0 13
56432: PUSH
56433: FOR_IN
56434: IFFALSE 56465
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56436: LD_VAR 0 1
56440: PPUSH
56441: LD_VAR 0 6
56445: PUSH
56446: LD_INT 1
56448: ARRAY
56449: PPUSH
56450: LD_VAR 0 6
56454: PUSH
56455: LD_INT 2
56457: ARRAY
56458: PPUSH
56459: CALL_OW 176
56463: GO 56433
56465: POP
56466: POP
// repeat wait ( 0 0$1 ) ;
56467: LD_INT 35
56469: PPUSH
56470: CALL_OW 67
// task := GetTaskList ( flame ) ;
56474: LD_ADDR_VAR 0 14
56478: PUSH
56479: LD_VAR 0 1
56483: PPUSH
56484: CALL_OW 437
56488: ST_TO_ADDR
// if not task then
56489: LD_VAR 0 14
56493: NOT
56494: IFFALSE 56498
// exit ;
56496: GO 56634
// if task [ 1 ] [ 1 ] <> | then
56498: LD_VAR 0 14
56502: PUSH
56503: LD_INT 1
56505: ARRAY
56506: PUSH
56507: LD_INT 1
56509: ARRAY
56510: PUSH
56511: LD_STRING |
56513: NONEQUAL
56514: IFFALSE 56518
// exit ;
56516: GO 56634
// _x := task [ 1 ] [ 2 ] ;
56518: LD_ADDR_VAR 0 11
56522: PUSH
56523: LD_VAR 0 14
56527: PUSH
56528: LD_INT 1
56530: ARRAY
56531: PUSH
56532: LD_INT 2
56534: ARRAY
56535: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56536: LD_ADDR_VAR 0 12
56540: PUSH
56541: LD_VAR 0 14
56545: PUSH
56546: LD_INT 1
56548: ARRAY
56549: PUSH
56550: LD_INT 3
56552: ARRAY
56553: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56554: LD_VAR 0 11
56558: PPUSH
56559: LD_VAR 0 12
56563: PPUSH
56564: CALL_OW 351
56568: NOT
56569: IFTRUE 56588
56571: PUSH
56572: LD_VAR 0 11
56576: PPUSH
56577: LD_VAR 0 12
56581: PPUSH
56582: CALL_OW 554
56586: NOT
56587: OR
56588: IFFALSE 56622
// begin task := Delete ( task , 1 ) ;
56590: LD_ADDR_VAR 0 14
56594: PUSH
56595: LD_VAR 0 14
56599: PPUSH
56600: LD_INT 1
56602: PPUSH
56603: CALL_OW 3
56607: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56608: LD_VAR 0 1
56612: PPUSH
56613: LD_VAR 0 14
56617: PPUSH
56618: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56622: LD_VAR 0 1
56626: PPUSH
56627: CALL_OW 314
56631: NOT
56632: IFFALSE 56467
// end ;
56634: LD_VAR 0 5
56638: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56639: LD_EXP 49
56643: NOT
56644: IFFALSE 56694
56646: GO 56648
56648: DISABLE
// begin initHack := true ;
56649: LD_ADDR_EXP 49
56653: PUSH
56654: LD_INT 1
56656: ST_TO_ADDR
// hackTanks := [ ] ;
56657: LD_ADDR_EXP 50
56661: PUSH
56662: EMPTY
56663: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56664: LD_ADDR_EXP 51
56668: PUSH
56669: EMPTY
56670: ST_TO_ADDR
// hackLimit := 3 ;
56671: LD_ADDR_EXP 52
56675: PUSH
56676: LD_INT 3
56678: ST_TO_ADDR
// hackDist := 12 ;
56679: LD_ADDR_EXP 53
56683: PUSH
56684: LD_INT 12
56686: ST_TO_ADDR
// hackCounter := [ ] ;
56687: LD_ADDR_EXP 54
56691: PUSH
56692: EMPTY
56693: ST_TO_ADDR
// end ;
56694: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56695: LD_EXP 49
56699: IFFALSE 56717
56701: PUSH
56702: LD_INT 34
56704: PUSH
56705: LD_INT 99
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PPUSH
56712: CALL_OW 69
56716: AND
56717: IFFALSE 56970
56719: GO 56721
56721: DISABLE
56722: LD_INT 0
56724: PPUSH
56725: PPUSH
// begin enable ;
56726: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56727: LD_ADDR_VAR 0 1
56731: PUSH
56732: LD_INT 34
56734: PUSH
56735: LD_INT 99
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PPUSH
56742: CALL_OW 69
56746: PUSH
56747: FOR_IN
56748: IFFALSE 56968
// begin if not i in hackTanks then
56750: LD_VAR 0 1
56754: PUSH
56755: LD_EXP 50
56759: IN
56760: NOT
56761: IFFALSE 56844
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56763: LD_ADDR_EXP 50
56767: PUSH
56768: LD_EXP 50
56772: PPUSH
56773: LD_EXP 50
56777: PUSH
56778: LD_INT 1
56780: PLUS
56781: PPUSH
56782: LD_VAR 0 1
56786: PPUSH
56787: CALL_OW 1
56791: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56792: LD_ADDR_EXP 51
56796: PUSH
56797: LD_EXP 51
56801: PPUSH
56802: LD_EXP 51
56806: PUSH
56807: LD_INT 1
56809: PLUS
56810: PPUSH
56811: EMPTY
56812: PPUSH
56813: CALL_OW 1
56817: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56818: LD_ADDR_EXP 54
56822: PUSH
56823: LD_EXP 54
56827: PPUSH
56828: LD_EXP 54
56832: PUSH
56833: LD_INT 1
56835: PLUS
56836: PPUSH
56837: EMPTY
56838: PPUSH
56839: CALL_OW 1
56843: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56844: LD_VAR 0 1
56848: PPUSH
56849: CALL_OW 302
56853: NOT
56854: IFFALSE 56867
// begin HackUnlinkAll ( i ) ;
56856: LD_VAR 0 1
56860: PPUSH
56861: CALL 56973 0 1
// continue ;
56865: GO 56747
// end ; HackCheckCapturedStatus ( i ) ;
56867: LD_VAR 0 1
56871: PPUSH
56872: CALL 57418 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56876: LD_ADDR_VAR 0 2
56880: PUSH
56881: LD_INT 81
56883: PUSH
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL_OW 255
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 33
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 91
56910: PUSH
56911: LD_VAR 0 1
56915: PUSH
56916: LD_EXP 53
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 50
56928: PUSH
56929: EMPTY
56930: LIST
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: PPUSH
56938: CALL_OW 69
56942: ST_TO_ADDR
// if not tmp then
56943: LD_VAR 0 2
56947: NOT
56948: IFFALSE 56952
// continue ;
56950: GO 56747
// HackLink ( i , tmp ) ;
56952: LD_VAR 0 1
56956: PPUSH
56957: LD_VAR 0 2
56961: PPUSH
56962: CALL 57109 0 2
// end ;
56966: GO 56747
56968: POP
56969: POP
// end ;
56970: PPOPN 2
56972: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56973: LD_INT 0
56975: PPUSH
56976: PPUSH
56977: PPUSH
// if not hack in hackTanks then
56978: LD_VAR 0 1
56982: PUSH
56983: LD_EXP 50
56987: IN
56988: NOT
56989: IFFALSE 56993
// exit ;
56991: GO 57104
// index := GetElementIndex ( hackTanks , hack ) ;
56993: LD_ADDR_VAR 0 4
56997: PUSH
56998: LD_EXP 50
57002: PPUSH
57003: LD_VAR 0 1
57007: PPUSH
57008: CALL 15615 0 2
57012: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57013: LD_EXP 51
57017: PUSH
57018: LD_VAR 0 4
57022: ARRAY
57023: IFFALSE 57104
// begin for i in hackTanksCaptured [ index ] do
57025: LD_ADDR_VAR 0 3
57029: PUSH
57030: LD_EXP 51
57034: PUSH
57035: LD_VAR 0 4
57039: ARRAY
57040: PUSH
57041: FOR_IN
57042: IFFALSE 57068
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57044: LD_VAR 0 3
57048: PUSH
57049: LD_INT 1
57051: ARRAY
57052: PPUSH
57053: LD_VAR 0 3
57057: PUSH
57058: LD_INT 2
57060: ARRAY
57061: PPUSH
57062: CALL_OW 235
57066: GO 57041
57068: POP
57069: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57070: LD_ADDR_EXP 51
57074: PUSH
57075: LD_EXP 51
57079: PPUSH
57080: LD_VAR 0 4
57084: PPUSH
57085: EMPTY
57086: PPUSH
57087: CALL_OW 1
57091: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57092: LD_VAR 0 1
57096: PPUSH
57097: LD_INT 0
57099: PPUSH
57100: CALL_OW 505
// end ; end ;
57104: LD_VAR 0 2
57108: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57109: LD_INT 0
57111: PPUSH
57112: PPUSH
57113: PPUSH
// if not hack in hackTanks or not vehicles then
57114: LD_VAR 0 1
57118: PUSH
57119: LD_EXP 50
57123: IN
57124: NOT
57125: IFTRUE 57134
57127: PUSH
57128: LD_VAR 0 2
57132: NOT
57133: OR
57134: IFFALSE 57138
// exit ;
57136: GO 57413
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57138: LD_ADDR_VAR 0 2
57142: PUSH
57143: LD_VAR 0 1
57147: PPUSH
57148: LD_VAR 0 2
57152: PPUSH
57153: LD_INT 1
57155: PPUSH
57156: LD_INT 1
57158: PPUSH
57159: CALL 16267 0 4
57163: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57164: LD_ADDR_VAR 0 5
57168: PUSH
57169: LD_EXP 50
57173: PPUSH
57174: LD_VAR 0 1
57178: PPUSH
57179: CALL 15615 0 2
57183: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57184: LD_EXP 51
57188: PUSH
57189: LD_VAR 0 5
57193: ARRAY
57194: PUSH
57195: LD_EXP 52
57199: LESS
57200: IFFALSE 57389
// begin for i := 1 to vehicles do
57202: LD_ADDR_VAR 0 4
57206: PUSH
57207: DOUBLE
57208: LD_INT 1
57210: DEC
57211: ST_TO_ADDR
57212: LD_VAR 0 2
57216: PUSH
57217: FOR_TO
57218: IFFALSE 57387
// begin if hackTanksCaptured [ index ] = hackLimit then
57220: LD_EXP 51
57224: PUSH
57225: LD_VAR 0 5
57229: ARRAY
57230: PUSH
57231: LD_EXP 52
57235: EQUAL
57236: IFFALSE 57240
// break ;
57238: GO 57387
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57240: LD_ADDR_EXP 54
57244: PUSH
57245: LD_EXP 54
57249: PPUSH
57250: LD_VAR 0 5
57254: PPUSH
57255: LD_EXP 54
57259: PUSH
57260: LD_VAR 0 5
57264: ARRAY
57265: PUSH
57266: LD_INT 1
57268: PLUS
57269: PPUSH
57270: CALL_OW 1
57274: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57275: LD_ADDR_EXP 51
57279: PUSH
57280: LD_EXP 51
57284: PPUSH
57285: LD_VAR 0 5
57289: PUSH
57290: LD_EXP 51
57294: PUSH
57295: LD_VAR 0 5
57299: ARRAY
57300: PUSH
57301: LD_INT 1
57303: PLUS
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PPUSH
57309: LD_VAR 0 2
57313: PUSH
57314: LD_VAR 0 4
57318: ARRAY
57319: PUSH
57320: LD_VAR 0 2
57324: PUSH
57325: LD_VAR 0 4
57329: ARRAY
57330: PPUSH
57331: CALL_OW 255
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PPUSH
57340: CALL 15832 0 3
57344: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57345: LD_VAR 0 2
57349: PUSH
57350: LD_VAR 0 4
57354: ARRAY
57355: PPUSH
57356: LD_VAR 0 1
57360: PPUSH
57361: CALL_OW 255
57365: PPUSH
57366: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57370: LD_VAR 0 2
57374: PUSH
57375: LD_VAR 0 4
57379: ARRAY
57380: PPUSH
57381: CALL_OW 141
// end ;
57385: GO 57217
57387: POP
57388: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57389: LD_VAR 0 1
57393: PPUSH
57394: LD_EXP 51
57398: PUSH
57399: LD_VAR 0 5
57403: ARRAY
57404: PUSH
57405: LD_INT 0
57407: PLUS
57408: PPUSH
57409: CALL_OW 505
// end ;
57413: LD_VAR 0 3
57417: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57418: LD_INT 0
57420: PPUSH
57421: PPUSH
57422: PPUSH
57423: PPUSH
// if not hack in hackTanks then
57424: LD_VAR 0 1
57428: PUSH
57429: LD_EXP 50
57433: IN
57434: NOT
57435: IFFALSE 57439
// exit ;
57437: GO 57683
// index := GetElementIndex ( hackTanks , hack ) ;
57439: LD_ADDR_VAR 0 4
57443: PUSH
57444: LD_EXP 50
57448: PPUSH
57449: LD_VAR 0 1
57453: PPUSH
57454: CALL 15615 0 2
57458: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57459: LD_ADDR_VAR 0 3
57463: PUSH
57464: DOUBLE
57465: LD_EXP 51
57469: PUSH
57470: LD_VAR 0 4
57474: ARRAY
57475: INC
57476: ST_TO_ADDR
57477: LD_INT 1
57479: PUSH
57480: FOR_DOWNTO
57481: IFFALSE 57657
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57483: LD_ADDR_VAR 0 5
57487: PUSH
57488: LD_EXP 51
57492: PUSH
57493: LD_VAR 0 4
57497: ARRAY
57498: PUSH
57499: LD_VAR 0 3
57503: ARRAY
57504: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57505: LD_VAR 0 5
57509: PUSH
57510: LD_INT 1
57512: ARRAY
57513: PPUSH
57514: CALL_OW 302
57518: NOT
57519: IFTRUE 57547
57521: PUSH
57522: LD_VAR 0 5
57526: PUSH
57527: LD_INT 1
57529: ARRAY
57530: PPUSH
57531: CALL_OW 255
57535: PUSH
57536: LD_VAR 0 1
57540: PPUSH
57541: CALL_OW 255
57545: NONEQUAL
57546: OR
57547: IFFALSE 57655
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57549: LD_VAR 0 5
57553: PUSH
57554: LD_INT 1
57556: ARRAY
57557: PPUSH
57558: CALL_OW 305
57562: IFFALSE 57590
57564: PUSH
57565: LD_VAR 0 5
57569: PUSH
57570: LD_INT 1
57572: ARRAY
57573: PPUSH
57574: CALL_OW 255
57578: PUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: CALL_OW 255
57588: EQUAL
57589: AND
57590: IFFALSE 57614
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57592: LD_VAR 0 5
57596: PUSH
57597: LD_INT 1
57599: ARRAY
57600: PPUSH
57601: LD_VAR 0 5
57605: PUSH
57606: LD_INT 2
57608: ARRAY
57609: PPUSH
57610: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57614: LD_ADDR_EXP 51
57618: PUSH
57619: LD_EXP 51
57623: PPUSH
57624: LD_VAR 0 4
57628: PPUSH
57629: LD_EXP 51
57633: PUSH
57634: LD_VAR 0 4
57638: ARRAY
57639: PPUSH
57640: LD_VAR 0 3
57644: PPUSH
57645: CALL_OW 3
57649: PPUSH
57650: CALL_OW 1
57654: ST_TO_ADDR
// end ; end ;
57655: GO 57480
57657: POP
57658: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57659: LD_VAR 0 1
57663: PPUSH
57664: LD_EXP 51
57668: PUSH
57669: LD_VAR 0 4
57673: ARRAY
57674: PUSH
57675: LD_INT 0
57677: PLUS
57678: PPUSH
57679: CALL_OW 505
// end ;
57683: LD_VAR 0 2
57687: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57688: LD_INT 0
57690: PPUSH
57691: PPUSH
57692: PPUSH
57693: PPUSH
// if not hack in hackTanks then
57694: LD_VAR 0 1
57698: PUSH
57699: LD_EXP 50
57703: IN
57704: NOT
57705: IFFALSE 57709
// exit ;
57707: GO 57794
// index := GetElementIndex ( hackTanks , hack ) ;
57709: LD_ADDR_VAR 0 5
57713: PUSH
57714: LD_EXP 50
57718: PPUSH
57719: LD_VAR 0 1
57723: PPUSH
57724: CALL 15615 0 2
57728: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57729: LD_ADDR_VAR 0 4
57733: PUSH
57734: DOUBLE
57735: LD_INT 1
57737: DEC
57738: ST_TO_ADDR
57739: LD_EXP 51
57743: PUSH
57744: LD_VAR 0 5
57748: ARRAY
57749: PUSH
57750: FOR_TO
57751: IFFALSE 57792
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57753: LD_EXP 51
57757: PUSH
57758: LD_VAR 0 5
57762: ARRAY
57763: PUSH
57764: LD_VAR 0 4
57768: ARRAY
57769: PUSH
57770: LD_INT 1
57772: ARRAY
57773: PUSH
57774: LD_VAR 0 2
57778: EQUAL
57779: IFFALSE 57790
// KillUnit ( vehicle ) ;
57781: LD_VAR 0 2
57785: PPUSH
57786: CALL_OW 66
57790: GO 57750
57792: POP
57793: POP
// end ;
57794: LD_VAR 0 3
57798: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57799: LD_EXP 55
57803: NOT
57804: IFFALSE 57937
57806: GO 57808
57808: DISABLE
57809: LD_INT 0
57811: PPUSH
// begin initMiner := true ;
57812: LD_ADDR_EXP 55
57816: PUSH
57817: LD_INT 1
57819: ST_TO_ADDR
// minersList := [ ] ;
57820: LD_ADDR_EXP 56
57824: PUSH
57825: EMPTY
57826: ST_TO_ADDR
// minerMinesList := [ ] ;
57827: LD_ADDR_EXP 57
57831: PUSH
57832: EMPTY
57833: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57834: LD_ADDR_EXP 58
57838: PUSH
57839: LD_INT 6
57841: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57842: LD_ADDR_VAR 0 1
57846: PUSH
57847: LD_INT 34
57849: PUSH
57850: LD_INT 81
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PPUSH
57857: CALL_OW 69
57861: PUSH
57862: FOR_IN
57863: IFFALSE 57935
// begin if not i in minersList then
57865: LD_VAR 0 1
57869: PUSH
57870: LD_EXP 56
57874: IN
57875: NOT
57876: IFFALSE 57933
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57878: LD_ADDR_EXP 56
57882: PUSH
57883: LD_EXP 56
57887: PPUSH
57888: LD_EXP 56
57892: PUSH
57893: LD_INT 1
57895: PLUS
57896: PPUSH
57897: LD_VAR 0 1
57901: PPUSH
57902: CALL_OW 1
57906: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57907: LD_ADDR_EXP 57
57911: PUSH
57912: LD_EXP 57
57916: PPUSH
57917: LD_EXP 57
57921: PUSH
57922: LD_INT 1
57924: PLUS
57925: PPUSH
57926: EMPTY
57927: PPUSH
57928: CALL_OW 1
57932: ST_TO_ADDR
// end end ;
57933: GO 57862
57935: POP
57936: POP
// end ;
57937: PPOPN 1
57939: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
57940: LD_EXP 55
57944: IFFALSE 57975
57946: PUSH
57947: LD_EXP 57
57951: PPUSH
57952: CALL 12914 0 1
57956: IFTRUE 57974
57958: PUSH
57959: LD_INT 34
57961: PUSH
57962: LD_INT 81
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PPUSH
57969: CALL_OW 69
57973: OR
57974: AND
57975: IFFALSE 58474
57977: GO 57979
57979: DISABLE
57980: LD_INT 0
57982: PPUSH
57983: PPUSH
57984: PPUSH
57985: PPUSH
// begin enable ;
57986: ENABLE
// for i := minerMinesList downto 1 do
57987: LD_ADDR_VAR 0 1
57991: PUSH
57992: DOUBLE
57993: LD_EXP 57
57997: INC
57998: ST_TO_ADDR
57999: LD_INT 1
58001: PUSH
58002: FOR_DOWNTO
58003: IFFALSE 58472
// begin if IsLive ( minersList [ i ] ) then
58005: LD_EXP 56
58009: PUSH
58010: LD_VAR 0 1
58014: ARRAY
58015: PPUSH
58016: CALL_OW 300
58020: IFFALSE 58053
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58022: LD_EXP 56
58026: PUSH
58027: LD_VAR 0 1
58031: ARRAY
58032: PPUSH
58033: LD_EXP 57
58037: PUSH
58038: LD_VAR 0 1
58042: ARRAY
58043: PPUSH
58044: CALL 12914 0 1
58048: PPUSH
58049: CALL_OW 505
// if not minerMinesList [ i ] then
58053: LD_EXP 57
58057: PUSH
58058: LD_VAR 0 1
58062: ARRAY
58063: NOT
58064: IFFALSE 58068
// continue ;
58066: GO 58002
// for j := minerMinesList [ i ] downto 1 do
58068: LD_ADDR_VAR 0 2
58072: PUSH
58073: DOUBLE
58074: LD_EXP 57
58078: PUSH
58079: LD_VAR 0 1
58083: ARRAY
58084: INC
58085: ST_TO_ADDR
58086: LD_INT 1
58088: PUSH
58089: FOR_DOWNTO
58090: IFFALSE 58468
// begin side := GetSide ( minersList [ i ] ) ;
58092: LD_ADDR_VAR 0 3
58096: PUSH
58097: LD_EXP 56
58101: PUSH
58102: LD_VAR 0 1
58106: ARRAY
58107: PPUSH
58108: CALL_OW 255
58112: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58113: LD_EXP 56
58117: PUSH
58118: LD_VAR 0 1
58122: ARRAY
58123: PPUSH
58124: CALL_OW 301
58128: IFTRUE 58148
58130: PUSH
58131: LD_EXP 56
58135: PUSH
58136: LD_VAR 0 1
58140: ARRAY
58141: PPUSH
58142: CALL_OW 305
58146: NOT
58147: OR
58148: IFFALSE 58239
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58150: LD_EXP 57
58154: PUSH
58155: LD_VAR 0 1
58159: ARRAY
58160: PUSH
58161: LD_VAR 0 2
58165: ARRAY
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PPUSH
58171: LD_EXP 57
58175: PUSH
58176: LD_VAR 0 1
58180: ARRAY
58181: PUSH
58182: LD_VAR 0 2
58186: ARRAY
58187: PUSH
58188: LD_INT 2
58190: ARRAY
58191: PPUSH
58192: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58196: LD_ADDR_EXP 57
58200: PUSH
58201: LD_EXP 57
58205: PPUSH
58206: LD_VAR 0 1
58210: PPUSH
58211: LD_EXP 57
58215: PUSH
58216: LD_VAR 0 1
58220: ARRAY
58221: PPUSH
58222: LD_VAR 0 2
58226: PPUSH
58227: CALL_OW 3
58231: PPUSH
58232: CALL_OW 1
58236: ST_TO_ADDR
// continue ;
58237: GO 58089
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58239: LD_ADDR_VAR 0 4
58243: PUSH
58244: LD_EXP 57
58248: PUSH
58249: LD_VAR 0 1
58253: ARRAY
58254: PUSH
58255: LD_VAR 0 2
58259: ARRAY
58260: PUSH
58261: LD_INT 1
58263: ARRAY
58264: PPUSH
58265: LD_EXP 57
58269: PUSH
58270: LD_VAR 0 1
58274: ARRAY
58275: PUSH
58276: LD_VAR 0 2
58280: ARRAY
58281: PUSH
58282: LD_INT 2
58284: ARRAY
58285: PPUSH
58286: CALL_OW 428
58290: ST_TO_ADDR
// if not tmp then
58291: LD_VAR 0 4
58295: NOT
58296: IFFALSE 58300
// continue ;
58298: GO 58089
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58300: LD_VAR 0 4
58304: PUSH
58305: LD_INT 81
58307: PUSH
58308: LD_VAR 0 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PPUSH
58317: CALL_OW 69
58321: IN
58322: IFFALSE 58372
58324: PUSH
58325: LD_EXP 57
58329: PUSH
58330: LD_VAR 0 1
58334: ARRAY
58335: PUSH
58336: LD_VAR 0 2
58340: ARRAY
58341: PUSH
58342: LD_INT 1
58344: ARRAY
58345: PPUSH
58346: LD_EXP 57
58350: PUSH
58351: LD_VAR 0 1
58355: ARRAY
58356: PUSH
58357: LD_VAR 0 2
58361: ARRAY
58362: PUSH
58363: LD_INT 2
58365: ARRAY
58366: PPUSH
58367: CALL_OW 458
58371: AND
58372: IFFALSE 58466
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58374: LD_EXP 57
58378: PUSH
58379: LD_VAR 0 1
58383: ARRAY
58384: PUSH
58385: LD_VAR 0 2
58389: ARRAY
58390: PUSH
58391: LD_INT 1
58393: ARRAY
58394: PPUSH
58395: LD_EXP 57
58399: PUSH
58400: LD_VAR 0 1
58404: ARRAY
58405: PUSH
58406: LD_VAR 0 2
58410: ARRAY
58411: PUSH
58412: LD_INT 2
58414: ARRAY
58415: PPUSH
58416: LD_VAR 0 3
58420: PPUSH
58421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58425: LD_ADDR_EXP 57
58429: PUSH
58430: LD_EXP 57
58434: PPUSH
58435: LD_VAR 0 1
58439: PPUSH
58440: LD_EXP 57
58444: PUSH
58445: LD_VAR 0 1
58449: ARRAY
58450: PPUSH
58451: LD_VAR 0 2
58455: PPUSH
58456: CALL_OW 3
58460: PPUSH
58461: CALL_OW 1
58465: ST_TO_ADDR
// end ; end ;
58466: GO 58089
58468: POP
58469: POP
// end ;
58470: GO 58002
58472: POP
58473: POP
// end ;
58474: PPOPN 4
58476: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58477: LD_INT 0
58479: PPUSH
58480: PPUSH
58481: PPUSH
58482: PPUSH
// result := false ;
58483: LD_ADDR_VAR 0 4
58487: PUSH
58488: LD_INT 0
58490: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58491: LD_VAR 0 1
58495: PPUSH
58496: CALL_OW 264
58500: PUSH
58501: LD_INT 81
58503: EQUAL
58504: NOT
58505: IFFALSE 58509
// exit ;
58507: GO 58879
// side := GetSide ( unit ) ;
58509: LD_ADDR_VAR 0 6
58513: PUSH
58514: LD_VAR 0 1
58518: PPUSH
58519: CALL_OW 255
58523: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58524: LD_ADDR_VAR 0 5
58528: PUSH
58529: LD_EXP 56
58533: PPUSH
58534: LD_VAR 0 1
58538: PPUSH
58539: CALL 15615 0 2
58543: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58544: LD_EXP 57
58548: PUSH
58549: LD_VAR 0 5
58553: ARRAY
58554: PUSH
58555: LD_EXP 58
58559: GREATEREQUAL
58560: IFFALSE 58564
// exit ;
58562: GO 58879
// ComMoveXY ( unit , x , y ) ;
58564: LD_VAR 0 1
58568: PPUSH
58569: LD_VAR 0 2
58573: PPUSH
58574: LD_VAR 0 3
58578: PPUSH
58579: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58583: LD_INT 35
58585: PPUSH
58586: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58590: LD_VAR 0 1
58594: PPUSH
58595: LD_VAR 0 2
58599: PPUSH
58600: LD_VAR 0 3
58604: PPUSH
58605: CALL 47661 0 3
58609: NOT
58610: IFFALSE 58623
58612: PUSH
58613: LD_VAR 0 1
58617: PPUSH
58618: CALL_OW 314
58622: AND
58623: IFFALSE 58627
// exit ;
58625: GO 58879
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58627: LD_VAR 0 2
58631: PPUSH
58632: LD_VAR 0 3
58636: PPUSH
58637: CALL_OW 428
58641: PUSH
58642: LD_VAR 0 1
58646: EQUAL
58647: IFFALSE 58661
58649: PUSH
58650: LD_VAR 0 1
58654: PPUSH
58655: CALL_OW 314
58659: NOT
58660: AND
58661: IFFALSE 58583
// if MineAtPos ( x , y ) then
58663: LD_VAR 0 2
58667: PPUSH
58668: LD_VAR 0 3
58672: PPUSH
58673: CALL_OW 458
58677: IFFALSE 58681
// exit ;
58679: GO 58879
// if your_side = side then
58681: LD_OWVAR 2
58685: PUSH
58686: LD_VAR 0 6
58690: EQUAL
58691: IFFALSE 58710
// PlaySoundXY ( x , y , PlantMine ) ;
58693: LD_VAR 0 2
58697: PPUSH
58698: LD_VAR 0 3
58702: PPUSH
58703: LD_STRING PlantMine
58705: PPUSH
58706: CALL_OW 366
// repeat wait ( 1 ) ;
58710: LD_INT 1
58712: PPUSH
58713: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58717: LD_VAR 0 2
58721: PPUSH
58722: LD_VAR 0 3
58726: PPUSH
58727: LD_VAR 0 6
58731: PPUSH
58732: LD_INT 0
58734: PPUSH
58735: CALL_OW 454
58739: IFFALSE 58710
// if MineAtPos ( x , y ) then
58741: LD_VAR 0 2
58745: PPUSH
58746: LD_VAR 0 3
58750: PPUSH
58751: CALL_OW 458
58755: IFFALSE 58871
// begin for i in minerMinesList [ index ] do
58757: LD_ADDR_VAR 0 7
58761: PUSH
58762: LD_EXP 57
58766: PUSH
58767: LD_VAR 0 5
58771: ARRAY
58772: PUSH
58773: FOR_IN
58774: IFFALSE 58816
// if i [ 1 ] = x and i [ 2 ] = y then
58776: LD_VAR 0 7
58780: PUSH
58781: LD_INT 1
58783: ARRAY
58784: PUSH
58785: LD_VAR 0 2
58789: EQUAL
58790: IFFALSE 58808
58792: PUSH
58793: LD_VAR 0 7
58797: PUSH
58798: LD_INT 2
58800: ARRAY
58801: PUSH
58802: LD_VAR 0 3
58806: EQUAL
58807: AND
58808: IFFALSE 58814
// exit ;
58810: POP
58811: POP
58812: GO 58879
58814: GO 58773
58816: POP
58817: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58818: LD_ADDR_EXP 57
58822: PUSH
58823: LD_EXP 57
58827: PPUSH
58828: LD_VAR 0 5
58832: PUSH
58833: LD_EXP 57
58837: PUSH
58838: LD_VAR 0 5
58842: ARRAY
58843: PUSH
58844: LD_INT 1
58846: PLUS
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PPUSH
58852: LD_VAR 0 2
58856: PUSH
58857: LD_VAR 0 3
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PPUSH
58866: CALL 15832 0 3
58870: ST_TO_ADDR
// end ; result := true ;
58871: LD_ADDR_VAR 0 4
58875: PUSH
58876: LD_INT 1
58878: ST_TO_ADDR
// end ;
58879: LD_VAR 0 4
58883: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58884: LD_INT 0
58886: PPUSH
58887: PPUSH
58888: PPUSH
// if not unit in minersList then
58889: LD_VAR 0 1
58893: PUSH
58894: LD_EXP 56
58898: IN
58899: NOT
58900: IFFALSE 58904
// exit ;
58902: GO 59111
// index := GetElementIndex ( minersList , unit ) ;
58904: LD_ADDR_VAR 0 6
58908: PUSH
58909: LD_EXP 56
58913: PPUSH
58914: LD_VAR 0 1
58918: PPUSH
58919: CALL 15615 0 2
58923: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58924: LD_ADDR_VAR 0 5
58928: PUSH
58929: DOUBLE
58930: LD_EXP 57
58934: PUSH
58935: LD_VAR 0 6
58939: ARRAY
58940: INC
58941: ST_TO_ADDR
58942: LD_INT 1
58944: PUSH
58945: FOR_DOWNTO
58946: IFFALSE 59109
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58948: LD_EXP 57
58952: PUSH
58953: LD_VAR 0 6
58957: ARRAY
58958: PUSH
58959: LD_VAR 0 5
58963: ARRAY
58964: PUSH
58965: LD_INT 1
58967: ARRAY
58968: PPUSH
58969: LD_EXP 57
58973: PUSH
58974: LD_VAR 0 6
58978: ARRAY
58979: PUSH
58980: LD_VAR 0 5
58984: ARRAY
58985: PUSH
58986: LD_INT 2
58988: ARRAY
58989: PPUSH
58990: LD_VAR 0 2
58994: PPUSH
58995: LD_VAR 0 3
58999: PPUSH
59000: CALL_OW 298
59004: PUSH
59005: LD_INT 6
59007: LESS
59008: IFFALSE 59107
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59010: LD_EXP 57
59014: PUSH
59015: LD_VAR 0 6
59019: ARRAY
59020: PUSH
59021: LD_VAR 0 5
59025: ARRAY
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PPUSH
59031: LD_EXP 57
59035: PUSH
59036: LD_VAR 0 6
59040: ARRAY
59041: PUSH
59042: LD_VAR 0 5
59046: ARRAY
59047: PUSH
59048: LD_INT 2
59050: ARRAY
59051: PPUSH
59052: LD_VAR 0 1
59056: PPUSH
59057: CALL_OW 255
59061: PPUSH
59062: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59066: LD_ADDR_EXP 57
59070: PUSH
59071: LD_EXP 57
59075: PPUSH
59076: LD_VAR 0 6
59080: PPUSH
59081: LD_EXP 57
59085: PUSH
59086: LD_VAR 0 6
59090: ARRAY
59091: PPUSH
59092: LD_VAR 0 5
59096: PPUSH
59097: CALL_OW 3
59101: PPUSH
59102: CALL_OW 1
59106: ST_TO_ADDR
// end ; end ;
59107: GO 58945
59109: POP
59110: POP
// end ;
59111: LD_VAR 0 4
59115: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59116: LD_INT 0
59118: PPUSH
59119: PPUSH
59120: PPUSH
59121: PPUSH
59122: PPUSH
59123: PPUSH
59124: PPUSH
59125: PPUSH
59126: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59127: LD_VAR 0 1
59131: PPUSH
59132: CALL_OW 264
59136: PUSH
59137: LD_INT 81
59139: EQUAL
59140: NOT
59141: IFTRUE 59156
59143: PUSH
59144: LD_VAR 0 1
59148: PUSH
59149: LD_EXP 56
59153: IN
59154: NOT
59155: OR
59156: IFFALSE 59160
// exit ;
59158: GO 59486
// index := GetElementIndex ( minersList , unit ) ;
59160: LD_ADDR_VAR 0 6
59164: PUSH
59165: LD_EXP 56
59169: PPUSH
59170: LD_VAR 0 1
59174: PPUSH
59175: CALL 15615 0 2
59179: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59180: LD_ADDR_VAR 0 8
59184: PUSH
59185: LD_EXP 58
59189: PUSH
59190: LD_EXP 57
59194: PUSH
59195: LD_VAR 0 6
59199: ARRAY
59200: MINUS
59201: ST_TO_ADDR
// if not minesFreeAmount then
59202: LD_VAR 0 8
59206: NOT
59207: IFFALSE 59211
// exit ;
59209: GO 59486
// tmp := [ ] ;
59211: LD_ADDR_VAR 0 7
59215: PUSH
59216: EMPTY
59217: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59218: LD_ADDR_VAR 0 5
59222: PUSH
59223: DOUBLE
59224: LD_INT 1
59226: DEC
59227: ST_TO_ADDR
59228: LD_VAR 0 8
59232: PUSH
59233: FOR_TO
59234: IFFALSE 59433
// begin _d := rand ( 0 , 5 ) ;
59236: LD_ADDR_VAR 0 11
59240: PUSH
59241: LD_INT 0
59243: PPUSH
59244: LD_INT 5
59246: PPUSH
59247: CALL_OW 12
59251: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59252: LD_ADDR_VAR 0 12
59256: PUSH
59257: LD_INT 2
59259: PPUSH
59260: LD_INT 6
59262: PPUSH
59263: CALL_OW 12
59267: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59268: LD_ADDR_VAR 0 9
59272: PUSH
59273: LD_VAR 0 2
59277: PPUSH
59278: LD_VAR 0 11
59282: PPUSH
59283: LD_VAR 0 12
59287: PPUSH
59288: CALL_OW 272
59292: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59293: LD_ADDR_VAR 0 10
59297: PUSH
59298: LD_VAR 0 3
59302: PPUSH
59303: LD_VAR 0 11
59307: PPUSH
59308: LD_VAR 0 12
59312: PPUSH
59313: CALL_OW 273
59317: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59318: LD_VAR 0 9
59322: PPUSH
59323: LD_VAR 0 10
59327: PPUSH
59328: CALL_OW 488
59332: IFFALSE 59356
59334: PUSH
59335: LD_VAR 0 9
59339: PUSH
59340: LD_VAR 0 10
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_VAR 0 7
59353: IN
59354: NOT
59355: AND
59356: IFFALSE 59375
59358: PUSH
59359: LD_VAR 0 9
59363: PPUSH
59364: LD_VAR 0 10
59368: PPUSH
59369: CALL_OW 458
59373: NOT
59374: AND
59375: IFFALSE 59417
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59377: LD_ADDR_VAR 0 7
59381: PUSH
59382: LD_VAR 0 7
59386: PPUSH
59387: LD_VAR 0 7
59391: PUSH
59392: LD_INT 1
59394: PLUS
59395: PPUSH
59396: LD_VAR 0 9
59400: PUSH
59401: LD_VAR 0 10
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PPUSH
59410: CALL_OW 1
59414: ST_TO_ADDR
59415: GO 59431
// i := i - 1 ;
59417: LD_ADDR_VAR 0 5
59421: PUSH
59422: LD_VAR 0 5
59426: PUSH
59427: LD_INT 1
59429: MINUS
59430: ST_TO_ADDR
// end ;
59431: GO 59233
59433: POP
59434: POP
// for i in tmp do
59435: LD_ADDR_VAR 0 5
59439: PUSH
59440: LD_VAR 0 7
59444: PUSH
59445: FOR_IN
59446: IFFALSE 59484
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59448: LD_VAR 0 1
59452: PPUSH
59453: LD_VAR 0 5
59457: PUSH
59458: LD_INT 1
59460: ARRAY
59461: PPUSH
59462: LD_VAR 0 5
59466: PUSH
59467: LD_INT 2
59469: ARRAY
59470: PPUSH
59471: CALL 58477 0 3
59475: NOT
59476: IFFALSE 59482
// exit ;
59478: POP
59479: POP
59480: GO 59486
59482: GO 59445
59484: POP
59485: POP
// end ;
59486: LD_VAR 0 4
59490: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59491: LD_INT 0
59493: PPUSH
59494: PPUSH
59495: PPUSH
59496: PPUSH
59497: PPUSH
59498: PPUSH
59499: PPUSH
59500: PPUSH
59501: PPUSH
// if GetClass ( unit ) <> class_sniper then
59502: LD_VAR 0 1
59506: PPUSH
59507: CALL_OW 257
59511: PUSH
59512: LD_INT 5
59514: NONEQUAL
59515: IFFALSE 59519
// exit ;
59517: GO 59989
// dist := 8 ;
59519: LD_ADDR_VAR 0 5
59523: PUSH
59524: LD_INT 8
59526: ST_TO_ADDR
// viewRange := 12 ;
59527: LD_ADDR_VAR 0 8
59531: PUSH
59532: LD_INT 12
59534: ST_TO_ADDR
// side := GetSide ( unit ) ;
59535: LD_ADDR_VAR 0 6
59539: PUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: CALL_OW 255
59549: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59550: LD_INT 61
59552: PPUSH
59553: LD_VAR 0 6
59557: PPUSH
59558: CALL_OW 321
59562: PUSH
59563: LD_INT 2
59565: EQUAL
59566: IFFALSE 59576
// viewRange := 16 ;
59568: LD_ADDR_VAR 0 8
59572: PUSH
59573: LD_INT 16
59575: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59576: LD_VAR 0 1
59580: PPUSH
59581: LD_VAR 0 2
59585: PPUSH
59586: LD_VAR 0 3
59590: PPUSH
59591: CALL_OW 297
59595: PUSH
59596: LD_VAR 0 5
59600: GREATER
59601: IFFALSE 59680
// begin ComMoveXY ( unit , x , y ) ;
59603: LD_VAR 0 1
59607: PPUSH
59608: LD_VAR 0 2
59612: PPUSH
59613: LD_VAR 0 3
59617: PPUSH
59618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59622: LD_INT 35
59624: PPUSH
59625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59629: LD_VAR 0 1
59633: PPUSH
59634: LD_VAR 0 2
59638: PPUSH
59639: LD_VAR 0 3
59643: PPUSH
59644: CALL 47661 0 3
59648: NOT
59649: IFFALSE 59653
// exit ;
59651: GO 59989
// until GetDistUnitXY ( unit , x , y ) < dist ;
59653: LD_VAR 0 1
59657: PPUSH
59658: LD_VAR 0 2
59662: PPUSH
59663: LD_VAR 0 3
59667: PPUSH
59668: CALL_OW 297
59672: PUSH
59673: LD_VAR 0 5
59677: LESS
59678: IFFALSE 59622
// end ; ComTurnXY ( unit , x , y ) ;
59680: LD_VAR 0 1
59684: PPUSH
59685: LD_VAR 0 2
59689: PPUSH
59690: LD_VAR 0 3
59694: PPUSH
59695: CALL_OW 118
// repeat if Multiplayer then
59699: LD_OWVAR 4
59703: IFFALSE 59714
// wait ( 35 ) else
59705: LD_INT 35
59707: PPUSH
59708: CALL_OW 67
59712: GO 59721
// wait ( 5 ) ;
59714: LD_INT 5
59716: PPUSH
59717: CALL_OW 67
// _d := GetDir ( unit ) ;
59721: LD_ADDR_VAR 0 11
59725: PUSH
59726: LD_VAR 0 1
59730: PPUSH
59731: CALL_OW 254
59735: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59736: LD_ADDR_VAR 0 7
59740: PUSH
59741: LD_VAR 0 1
59745: PPUSH
59746: CALL_OW 250
59750: PPUSH
59751: LD_VAR 0 1
59755: PPUSH
59756: CALL_OW 251
59760: PPUSH
59761: LD_VAR 0 2
59765: PPUSH
59766: LD_VAR 0 3
59770: PPUSH
59771: CALL 50297 0 4
59775: ST_TO_ADDR
// until dir = _d ;
59776: LD_VAR 0 7
59780: PUSH
59781: LD_VAR 0 11
59785: EQUAL
59786: IFFALSE 59699
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59788: LD_ADDR_VAR 0 9
59792: PUSH
59793: LD_VAR 0 1
59797: PPUSH
59798: CALL_OW 250
59802: PPUSH
59803: LD_VAR 0 7
59807: PPUSH
59808: LD_VAR 0 5
59812: PPUSH
59813: CALL_OW 272
59817: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59818: LD_ADDR_VAR 0 10
59822: PUSH
59823: LD_VAR 0 1
59827: PPUSH
59828: CALL_OW 251
59832: PPUSH
59833: LD_VAR 0 7
59837: PPUSH
59838: LD_VAR 0 5
59842: PPUSH
59843: CALL_OW 273
59847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59848: LD_VAR 0 9
59852: PPUSH
59853: LD_VAR 0 10
59857: PPUSH
59858: CALL_OW 488
59862: NOT
59863: IFFALSE 59867
// exit ;
59865: GO 59989
// ComAnimCustom ( unit , 1 ) ;
59867: LD_VAR 0 1
59871: PPUSH
59872: LD_INT 1
59874: PPUSH
59875: CALL_OW 592
// p := 0 ;
59879: LD_ADDR_VAR 0 12
59883: PUSH
59884: LD_INT 0
59886: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59887: LD_VAR 0 9
59891: PPUSH
59892: LD_VAR 0 10
59896: PPUSH
59897: LD_VAR 0 6
59901: PPUSH
59902: LD_VAR 0 8
59906: PPUSH
59907: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59911: LD_INT 35
59913: PPUSH
59914: CALL_OW 67
// p := Inc ( p ) ;
59918: LD_ADDR_VAR 0 12
59922: PUSH
59923: LD_VAR 0 12
59927: PPUSH
59928: CALL 50253 0 1
59932: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59933: LD_VAR 0 12
59937: PUSH
59938: LD_INT 3
59940: EQUAL
59941: IFTRUE 59955
59943: PUSH
59944: LD_VAR 0 1
59948: PPUSH
59949: CALL_OW 302
59953: NOT
59954: OR
59955: IFTRUE 59968
59957: PUSH
59958: LD_VAR 0 1
59962: PPUSH
59963: CALL_OW 301
59967: OR
59968: IFFALSE 59911
// RemoveSeeing ( _x , _y , side ) ;
59970: LD_VAR 0 9
59974: PPUSH
59975: LD_VAR 0 10
59979: PPUSH
59980: LD_VAR 0 6
59984: PPUSH
59985: CALL_OW 331
// end ;
59989: LD_VAR 0 4
59993: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
59994: LD_INT 0
59996: PPUSH
59997: PPUSH
59998: PPUSH
59999: PPUSH
60000: PPUSH
60001: PPUSH
60002: PPUSH
60003: PPUSH
60004: PPUSH
60005: PPUSH
60006: PPUSH
// if not unit then
60007: LD_VAR 0 1
60011: NOT
60012: IFFALSE 60016
// exit ;
60014: GO 60287
// side := GetSide ( unit ) ;
60016: LD_ADDR_VAR 0 3
60020: PUSH
60021: LD_VAR 0 1
60025: PPUSH
60026: CALL_OW 255
60030: ST_TO_ADDR
// x := GetX ( unit ) ;
60031: LD_ADDR_VAR 0 5
60035: PUSH
60036: LD_VAR 0 1
60040: PPUSH
60041: CALL_OW 250
60045: ST_TO_ADDR
// y := GetY ( unit ) ;
60046: LD_ADDR_VAR 0 6
60050: PUSH
60051: LD_VAR 0 1
60055: PPUSH
60056: CALL_OW 251
60060: ST_TO_ADDR
// r := 8 ;
60061: LD_ADDR_VAR 0 4
60065: PUSH
60066: LD_INT 8
60068: ST_TO_ADDR
// if x - r < 0 then
60069: LD_VAR 0 5
60073: PUSH
60074: LD_VAR 0 4
60078: MINUS
60079: PUSH
60080: LD_INT 0
60082: LESS
60083: IFFALSE 60095
// min_x := 0 else
60085: LD_ADDR_VAR 0 7
60089: PUSH
60090: LD_INT 0
60092: ST_TO_ADDR
60093: GO 60111
// min_x := x - r ;
60095: LD_ADDR_VAR 0 7
60099: PUSH
60100: LD_VAR 0 5
60104: PUSH
60105: LD_VAR 0 4
60109: MINUS
60110: ST_TO_ADDR
// if y - r < 0 then
60111: LD_VAR 0 6
60115: PUSH
60116: LD_VAR 0 4
60120: MINUS
60121: PUSH
60122: LD_INT 0
60124: LESS
60125: IFFALSE 60137
// min_y := 0 else
60127: LD_ADDR_VAR 0 8
60131: PUSH
60132: LD_INT 0
60134: ST_TO_ADDR
60135: GO 60153
// min_y := y - r ;
60137: LD_ADDR_VAR 0 8
60141: PUSH
60142: LD_VAR 0 6
60146: PUSH
60147: LD_VAR 0 4
60151: MINUS
60152: ST_TO_ADDR
// max_x := x + r ;
60153: LD_ADDR_VAR 0 9
60157: PUSH
60158: LD_VAR 0 5
60162: PUSH
60163: LD_VAR 0 4
60167: PLUS
60168: ST_TO_ADDR
// max_y := y + r ;
60169: LD_ADDR_VAR 0 10
60173: PUSH
60174: LD_VAR 0 6
60178: PUSH
60179: LD_VAR 0 4
60183: PLUS
60184: ST_TO_ADDR
// for _x = min_x to max_x do
60185: LD_ADDR_VAR 0 11
60189: PUSH
60190: DOUBLE
60191: LD_VAR 0 7
60195: DEC
60196: ST_TO_ADDR
60197: LD_VAR 0 9
60201: PUSH
60202: FOR_TO
60203: IFFALSE 60285
// for _y = min_y to max_y do
60205: LD_ADDR_VAR 0 12
60209: PUSH
60210: DOUBLE
60211: LD_VAR 0 8
60215: DEC
60216: ST_TO_ADDR
60217: LD_VAR 0 10
60221: PUSH
60222: FOR_TO
60223: IFFALSE 60281
// begin if not ValidHex ( _x , _y ) then
60225: LD_VAR 0 11
60229: PPUSH
60230: LD_VAR 0 12
60234: PPUSH
60235: CALL_OW 488
60239: NOT
60240: IFFALSE 60244
// continue ;
60242: GO 60222
// if MineAtPos ( _x , _y ) then
60244: LD_VAR 0 11
60248: PPUSH
60249: LD_VAR 0 12
60253: PPUSH
60254: CALL_OW 458
60258: IFFALSE 60279
// ViewMineAtPos ( _x , _y , side ) ;
60260: LD_VAR 0 11
60264: PPUSH
60265: LD_VAR 0 12
60269: PPUSH
60270: LD_VAR 0 3
60274: PPUSH
60275: CALL_OW 457
// end ;
60279: GO 60222
60281: POP
60282: POP
60283: GO 60202
60285: POP
60286: POP
// end ;
60287: LD_VAR 0 2
60291: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
60292: LD_INT 0
60294: PPUSH
60295: PPUSH
60296: PPUSH
60297: PPUSH
60298: PPUSH
60299: PPUSH
// if not units then
60300: LD_VAR 0 1
60304: NOT
60305: IFFALSE 60309
// exit ;
60307: GO 60739
// scaners := [ ] ;
60309: LD_ADDR_VAR 0 6
60313: PUSH
60314: EMPTY
60315: ST_TO_ADDR
// for i in units do
60316: LD_ADDR_VAR 0 3
60320: PUSH
60321: LD_VAR 0 1
60325: PUSH
60326: FOR_IN
60327: IFFALSE 60484
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60329: LD_VAR 0 3
60333: PPUSH
60334: CALL_OW 264
60338: PUSH
60339: LD_INT 11
60341: NONEQUAL
60342: IFTRUE 60356
60344: PUSH
60345: LD_VAR 0 3
60349: PPUSH
60350: CALL_OW 302
60354: NOT
60355: OR
60356: IFTRUE 60373
60358: PUSH
60359: LD_VAR 0 3
60363: PPUSH
60364: CALL_OW 110
60368: PUSH
60369: LD_INT 502
60371: EQUAL
60372: OR
60373: IFFALSE 60377
// continue ;
60375: GO 60326
// ComStop ( i ) ;
60377: LD_VAR 0 3
60381: PPUSH
60382: CALL_OW 141
// x := GetX ( i ) ;
60386: LD_ADDR_VAR 0 4
60390: PUSH
60391: LD_VAR 0 3
60395: PPUSH
60396: CALL_OW 250
60400: ST_TO_ADDR
// y := GetY ( i ) ;
60401: LD_ADDR_VAR 0 5
60405: PUSH
60406: LD_VAR 0 3
60410: PPUSH
60411: CALL_OW 251
60415: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60416: LD_VAR 0 3
60420: PPUSH
60421: CALL_OW 255
60425: PUSH
60426: LD_OWVAR 2
60430: EQUAL
60431: IFFALSE 60450
// PlaySoundXY ( x , y , mineDetector ) ;
60433: LD_VAR 0 4
60437: PPUSH
60438: LD_VAR 0 5
60442: PPUSH
60443: LD_STRING mineDetector
60445: PPUSH
60446: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60450: LD_ADDR_VAR 0 6
60454: PUSH
60455: LD_VAR 0 6
60459: PPUSH
60460: LD_VAR 0 3
60464: PPUSH
60465: CALL 48880 0 2
60469: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60470: LD_VAR 0 3
60474: PPUSH
60475: LD_INT 502
60477: PPUSH
60478: CALL_OW 109
// end ;
60482: GO 60326
60484: POP
60485: POP
// if not scaners then
60486: LD_VAR 0 6
60490: NOT
60491: IFFALSE 60495
// exit ;
60493: GO 60739
// wait ( 3 ) ;
60495: LD_INT 3
60497: PPUSH
60498: CALL_OW 67
// timer := 6 ;
60502: LD_ADDR_VAR 0 7
60506: PUSH
60507: LD_INT 6
60509: ST_TO_ADDR
// repeat for i in scaners do
60510: LD_ADDR_VAR 0 3
60514: PUSH
60515: LD_VAR 0 6
60519: PUSH
60520: FOR_IN
60521: IFFALSE 60637
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60523: LD_VAR 0 3
60527: PPUSH
60528: CALL_OW 302
60532: NOT
60533: IFTRUE 60546
60535: PUSH
60536: LD_VAR 0 3
60540: PPUSH
60541: CALL_OW 314
60545: OR
60546: IFTRUE 60577
60548: PUSH
60549: LD_VAR 0 3
60553: PPUSH
60554: CALL_OW 263
60558: PUSH
60559: LD_INT 1
60561: EQUAL
60562: IFFALSE 60576
60564: PUSH
60565: LD_VAR 0 3
60569: PPUSH
60570: CALL_OW 311
60574: NOT
60575: AND
60576: OR
60577: IFFALSE 60621
// begin SetUnitDisplayNumber ( i , 0 ) ;
60579: LD_VAR 0 3
60583: PPUSH
60584: LD_INT 0
60586: PPUSH
60587: CALL_OW 505
// SetTag ( i , 0 ) ;
60591: LD_VAR 0 3
60595: PPUSH
60596: LD_INT 0
60598: PPUSH
60599: CALL_OW 109
// scaners := scaners diff i ;
60603: LD_ADDR_VAR 0 6
60607: PUSH
60608: LD_VAR 0 6
60612: PUSH
60613: LD_VAR 0 3
60617: DIFF
60618: ST_TO_ADDR
// continue ;
60619: GO 60520
// end ; SetUnitDisplayNumber ( i , timer ) ;
60621: LD_VAR 0 3
60625: PPUSH
60626: LD_VAR 0 7
60630: PPUSH
60631: CALL_OW 505
// end ;
60635: GO 60520
60637: POP
60638: POP
// if not scaners then
60639: LD_VAR 0 6
60643: NOT
60644: IFFALSE 60648
// exit ;
60646: GO 60739
// timer := Dec ( timer ) ;
60648: LD_ADDR_VAR 0 7
60652: PUSH
60653: LD_VAR 0 7
60657: PPUSH
60658: CALL 50275 0 1
60662: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60663: LD_INT 35
60665: PPUSH
60666: CALL_OW 67
// until timer = 0 ;
60670: LD_VAR 0 7
60674: PUSH
60675: LD_INT 0
60677: EQUAL
60678: IFFALSE 60510
// if not scaners then
60680: LD_VAR 0 6
60684: NOT
60685: IFFALSE 60689
// exit ;
60687: GO 60739
// for i in scaners do
60689: LD_ADDR_VAR 0 3
60693: PUSH
60694: LD_VAR 0 6
60698: PUSH
60699: FOR_IN
60700: IFFALSE 60737
// begin SetUnitDisplayNumber ( i , 0 ) ;
60702: LD_VAR 0 3
60706: PPUSH
60707: LD_INT 0
60709: PPUSH
60710: CALL_OW 505
// SetTag ( i , 0 ) ;
60714: LD_VAR 0 3
60718: PPUSH
60719: LD_INT 0
60721: PPUSH
60722: CALL_OW 109
// RevealDetectorMine ( i ) ;
60726: LD_VAR 0 3
60730: PPUSH
60731: CALL 59994 0 1
// end ;
60735: GO 60699
60737: POP
60738: POP
// end ;
60739: LD_VAR 0 2
60743: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60744: LD_INT 0
60746: PPUSH
// if p1 = mine_detector_mode then
60747: LD_VAR 0 2
60751: PUSH
60752: LD_INT 103
60754: EQUAL
60755: IFFALSE 60766
// DetectMine ( units ) ;
60757: LD_VAR 0 1
60761: PPUSH
60762: CALL 60292 0 1
// end ; end_of_file
60766: LD_VAR 0 7
60770: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60771: LD_EXP 39
60775: IFFALSE 61116
60777: GO 60779
60779: DISABLE
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
60784: PPUSH
// begin mpKingPoints := [ ] ;
60785: LD_ADDR_EXP 59
60789: PUSH
60790: EMPTY
60791: ST_TO_ADDR
// if mpTeamGame then
60792: LD_EXP 11
60796: IFFALSE 60850
// begin for i := 1 to Count ( mpTeams ) do
60798: LD_ADDR_VAR 0 1
60802: PUSH
60803: DOUBLE
60804: LD_INT 1
60806: DEC
60807: ST_TO_ADDR
60808: LD_EXP 10
60812: PPUSH
60813: CALL 12914 0 1
60817: PUSH
60818: FOR_TO
60819: IFFALSE 60846
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60821: LD_ADDR_EXP 59
60825: PUSH
60826: LD_EXP 59
60830: PPUSH
60831: LD_VAR 0 1
60835: PPUSH
60836: LD_INT 0
60838: PPUSH
60839: CALL_OW 1
60843: ST_TO_ADDR
60844: GO 60818
60846: POP
60847: POP
// end else
60848: GO 60893
// begin for i := 1 to 8 do
60850: LD_ADDR_VAR 0 1
60854: PUSH
60855: DOUBLE
60856: LD_INT 1
60858: DEC
60859: ST_TO_ADDR
60860: LD_INT 8
60862: PUSH
60863: FOR_TO
60864: IFFALSE 60891
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60866: LD_ADDR_EXP 59
60870: PUSH
60871: LD_EXP 59
60875: PPUSH
60876: LD_VAR 0 1
60880: PPUSH
60881: LD_INT 0
60883: PPUSH
60884: CALL_OW 1
60888: ST_TO_ADDR
60889: GO 60863
60891: POP
60892: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
60893: LD_ADDR_VAR 0 3
60897: PUSH
60898: LD_EXP 2
60902: PPUSH
60903: LD_INT 0
60905: PPUSH
60906: CALL_OW 517
60910: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60911: LD_ADDR_VAR 0 1
60915: PUSH
60916: DOUBLE
60917: LD_INT 1
60919: DEC
60920: ST_TO_ADDR
60921: LD_VAR 0 3
60925: PUSH
60926: LD_INT 1
60928: ARRAY
60929: PUSH
60930: FOR_TO
60931: IFFALSE 60998
// for j := 1 to 8 do
60933: LD_ADDR_VAR 0 2
60937: PUSH
60938: DOUBLE
60939: LD_INT 1
60941: DEC
60942: ST_TO_ADDR
60943: LD_INT 8
60945: PUSH
60946: FOR_TO
60947: IFFALSE 60994
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
60949: LD_VAR 0 3
60953: PUSH
60954: LD_INT 1
60956: ARRAY
60957: PUSH
60958: LD_VAR 0 1
60962: ARRAY
60963: PPUSH
60964: LD_VAR 0 3
60968: PUSH
60969: LD_INT 2
60971: ARRAY
60972: PUSH
60973: LD_VAR 0 1
60977: ARRAY
60978: PPUSH
60979: LD_VAR 0 2
60983: PPUSH
60984: LD_INT 12
60986: NEG
60987: PPUSH
60988: CALL_OW 330
60992: GO 60946
60994: POP
60995: POP
60996: GO 60930
60998: POP
60999: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61000: LD_EXP 34
61004: PPUSH
61005: LD_INT 1
61007: PPUSH
61008: CALL_OW 424
// UpdateCounter ;
61012: CALL 61622 0 0
// repeat wait ( 0 0$1 ) ;
61016: LD_INT 35
61018: PPUSH
61019: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61023: LD_ADDR_VAR 0 3
61027: PUSH
61028: LD_EXP 34
61032: PPUSH
61033: LD_INT 3
61035: PUSH
61036: LD_INT 57
61038: PUSH
61039: EMPTY
61040: LIST
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 50
61048: PUSH
61049: EMPTY
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 30
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 30
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: PPUSH
61085: CALL_OW 70
61089: ST_TO_ADDR
// if not tmp then
61090: LD_VAR 0 3
61094: NOT
61095: IFFALSE 61099
// continue ;
61097: GO 61016
// AddPoints ( tmp ) ;
61099: LD_VAR 0 3
61103: PPUSH
61104: CALL 61300 0 1
// UpdateCounter ;
61108: CALL 61622 0 0
// until false ;
61112: LD_INT 0
61114: IFFALSE 61016
// end ;
61116: PPOPN 3
61118: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61119: LD_EXP 39
61123: IFFALSE 61131
61125: PUSH
61126: LD_EXP 37
61130: AND
61131: IFFALSE 61297
61133: GO 61135
61135: DISABLE
61136: LD_INT 0
61138: PPUSH
61139: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61140: LD_ADDR_VAR 0 2
61144: PUSH
61145: LD_EXP 2
61149: PPUSH
61150: LD_INT 0
61152: PPUSH
61153: CALL_OW 517
61157: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61158: LD_ADDR_VAR 0 1
61162: PUSH
61163: DOUBLE
61164: LD_INT 1
61166: DEC
61167: ST_TO_ADDR
61168: LD_VAR 0 2
61172: PUSH
61173: LD_INT 1
61175: ARRAY
61176: PUSH
61177: FOR_TO
61178: IFFALSE 61219
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61180: LD_VAR 0 2
61184: PUSH
61185: LD_INT 1
61187: ARRAY
61188: PUSH
61189: LD_VAR 0 1
61193: ARRAY
61194: PPUSH
61195: LD_VAR 0 2
61199: PUSH
61200: LD_INT 2
61202: ARRAY
61203: PUSH
61204: LD_VAR 0 1
61208: ARRAY
61209: PPUSH
61210: LD_INT 125
61212: PPUSH
61213: CALL_OW 495
61217: GO 61177
61219: POP
61220: POP
// repeat wait ( mpEmissions ) ;
61221: LD_EXP 37
61225: PPUSH
61226: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61230: LD_ADDR_VAR 0 1
61234: PUSH
61235: DOUBLE
61236: LD_INT 1
61238: DEC
61239: ST_TO_ADDR
61240: LD_VAR 0 2
61244: PUSH
61245: LD_INT 1
61247: ARRAY
61248: PUSH
61249: FOR_TO
61250: IFFALSE 61291
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61252: LD_VAR 0 2
61256: PUSH
61257: LD_INT 1
61259: ARRAY
61260: PUSH
61261: LD_VAR 0 1
61265: ARRAY
61266: PPUSH
61267: LD_VAR 0 2
61271: PUSH
61272: LD_INT 2
61274: ARRAY
61275: PUSH
61276: LD_VAR 0 1
61280: ARRAY
61281: PPUSH
61282: LD_INT 15
61284: PPUSH
61285: CALL_OW 495
61289: GO 61249
61291: POP
61292: POP
// until false ;
61293: LD_INT 0
61295: IFFALSE 61221
// end ;
61297: PPOPN 2
61299: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61300: LD_INT 0
61302: PPUSH
61303: PPUSH
61304: PPUSH
61305: PPUSH
61306: PPUSH
// if mpTeamGame then
61307: LD_EXP 11
61311: IFFALSE 61508
// begin first := depots [ 1 ] ;
61313: LD_ADDR_VAR 0 4
61317: PUSH
61318: LD_VAR 0 1
61322: PUSH
61323: LD_INT 1
61325: ARRAY
61326: ST_TO_ADDR
// side := GetSide ( first ) ;
61327: LD_ADDR_VAR 0 6
61331: PUSH
61332: LD_VAR 0 4
61336: PPUSH
61337: CALL_OW 255
61341: ST_TO_ADDR
// for i := 1 to mpTeams do
61342: LD_ADDR_VAR 0 3
61346: PUSH
61347: DOUBLE
61348: LD_INT 1
61350: DEC
61351: ST_TO_ADDR
61352: LD_EXP 10
61356: PUSH
61357: FOR_TO
61358: IFFALSE 61392
// if side in mpTeams [ i ] then
61360: LD_VAR 0 6
61364: PUSH
61365: LD_EXP 10
61369: PUSH
61370: LD_VAR 0 3
61374: ARRAY
61375: IN
61376: IFFALSE 61390
// begin team := i ;
61378: LD_ADDR_VAR 0 5
61382: PUSH
61383: LD_VAR 0 3
61387: ST_TO_ADDR
// break ;
61388: GO 61392
// end ;
61390: GO 61357
61392: POP
61393: POP
// if not team then
61394: LD_VAR 0 5
61398: NOT
61399: IFFALSE 61403
// exit ;
61401: GO 61617
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61403: LD_EXP 34
61407: PPUSH
61408: LD_INT 81
61410: PUSH
61411: LD_VAR 0 6
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PPUSH
61420: CALL_OW 70
61424: IFFALSE 61428
// exit ;
61426: GO 61617
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61428: LD_ADDR_EXP 59
61432: PUSH
61433: LD_EXP 59
61437: PPUSH
61438: LD_VAR 0 5
61442: PPUSH
61443: LD_EXP 59
61447: PUSH
61448: LD_VAR 0 5
61452: ARRAY
61453: PUSH
61454: LD_INT 1
61456: PLUS
61457: PPUSH
61458: CALL_OW 1
61462: ST_TO_ADDR
// for i in mpTeams [ team ] do
61463: LD_ADDR_VAR 0 3
61467: PUSH
61468: LD_EXP 10
61472: PUSH
61473: LD_VAR 0 5
61477: ARRAY
61478: PUSH
61479: FOR_IN
61480: IFFALSE 61504
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61482: LD_VAR 0 3
61486: PPUSH
61487: LD_EXP 59
61491: PUSH
61492: LD_VAR 0 5
61496: ARRAY
61497: PPUSH
61498: CALL_OW 506
61502: GO 61479
61504: POP
61505: POP
// end else
61506: GO 61617
// begin first := depots [ 1 ] ;
61508: LD_ADDR_VAR 0 4
61512: PUSH
61513: LD_VAR 0 1
61517: PUSH
61518: LD_INT 1
61520: ARRAY
61521: ST_TO_ADDR
// side := GetSide ( first ) ;
61522: LD_ADDR_VAR 0 6
61526: PUSH
61527: LD_VAR 0 4
61531: PPUSH
61532: CALL_OW 255
61536: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61537: LD_EXP 34
61541: PPUSH
61542: LD_INT 81
61544: PUSH
61545: LD_VAR 0 6
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PPUSH
61554: CALL_OW 70
61558: IFFALSE 61562
// exit ;
61560: GO 61617
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61562: LD_ADDR_EXP 59
61566: PUSH
61567: LD_EXP 59
61571: PPUSH
61572: LD_VAR 0 6
61576: PPUSH
61577: LD_EXP 59
61581: PUSH
61582: LD_VAR 0 6
61586: ARRAY
61587: PUSH
61588: LD_INT 1
61590: PLUS
61591: PPUSH
61592: CALL_OW 1
61596: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61597: LD_VAR 0 6
61601: PPUSH
61602: LD_EXP 59
61606: PUSH
61607: LD_VAR 0 6
61611: ARRAY
61612: PPUSH
61613: CALL_OW 506
// end ; end ;
61617: LD_VAR 0 2
61621: RET
// function UpdateCounter ; var i ; begin
61622: LD_INT 0
61624: PPUSH
61625: PPUSH
// result := [ ] ;
61626: LD_ADDR_VAR 0 1
61630: PUSH
61631: EMPTY
61632: ST_TO_ADDR
// if mpTeamGame then
61633: LD_EXP 11
61637: IFFALSE 61704
// begin for i := 1 to mpTeams do
61639: LD_ADDR_VAR 0 2
61643: PUSH
61644: DOUBLE
61645: LD_INT 1
61647: DEC
61648: ST_TO_ADDR
61649: LD_EXP 10
61653: PUSH
61654: FOR_TO
61655: IFFALSE 61700
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61657: LD_ADDR_VAR 0 1
61661: PUSH
61662: LD_VAR 0 1
61666: PUSH
61667: LD_STRING #KingoftheHill-Team
61669: PUSH
61670: LD_VAR 0 2
61674: PUSH
61675: LD_EXP 59
61679: PUSH
61680: LD_VAR 0 2
61684: ARRAY
61685: PUSH
61686: LD_EXP 35
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: ADD
61697: ST_TO_ADDR
61698: GO 61654
61700: POP
61701: POP
// end else
61702: GO 61777
// begin for i := 1 to 8 do
61704: LD_ADDR_VAR 0 2
61708: PUSH
61709: DOUBLE
61710: LD_INT 1
61712: DEC
61713: ST_TO_ADDR
61714: LD_INT 8
61716: PUSH
61717: FOR_TO
61718: IFFALSE 61775
// if mpSidePositions [ i ] then
61720: LD_EXP 7
61724: PUSH
61725: LD_VAR 0 2
61729: ARRAY
61730: IFFALSE 61773
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61732: LD_ADDR_VAR 0 1
61736: PUSH
61737: LD_VAR 0 1
61741: PUSH
61742: LD_STRING #KingoftheHill-Player
61744: PUSH
61745: LD_VAR 0 2
61749: PUSH
61750: LD_EXP 59
61754: PUSH
61755: LD_VAR 0 2
61759: ARRAY
61760: PUSH
61761: LD_EXP 35
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: ADD
61772: ST_TO_ADDR
61773: GO 61717
61775: POP
61776: POP
// end ; mpDisplayStrings := result ;
61777: LD_ADDR_EXP 38
61781: PUSH
61782: LD_VAR 0 1
61786: ST_TO_ADDR
// end ;
61787: LD_VAR 0 1
61791: RET
// export function HowMuchPointsKing ( side ) ; begin
61792: LD_INT 0
61794: PPUSH
// result := HowMuchPoints ( side ) ;
61795: LD_ADDR_VAR 0 2
61799: PUSH
61800: LD_VAR 0 1
61804: PPUSH
61805: CALL 61815 0 1
61809: ST_TO_ADDR
// end ;
61810: LD_VAR 0 2
61814: RET
// function HowMuchPoints ( side ) ; var i ; begin
61815: LD_INT 0
61817: PPUSH
61818: PPUSH
// if mpTeamGame then
61819: LD_EXP 11
61823: IFFALSE 61892
// begin for i := 1 to Count ( mpTeams ) do
61825: LD_ADDR_VAR 0 3
61829: PUSH
61830: DOUBLE
61831: LD_INT 1
61833: DEC
61834: ST_TO_ADDR
61835: LD_EXP 10
61839: PPUSH
61840: CALL 12914 0 1
61844: PUSH
61845: FOR_TO
61846: IFFALSE 61888
// begin if side in mpTeams [ i ] then
61848: LD_VAR 0 1
61852: PUSH
61853: LD_EXP 10
61857: PUSH
61858: LD_VAR 0 3
61862: ARRAY
61863: IN
61864: IFFALSE 61886
// begin result := mpKingPoints [ i ] ;
61866: LD_ADDR_VAR 0 2
61870: PUSH
61871: LD_EXP 59
61875: PUSH
61876: LD_VAR 0 3
61880: ARRAY
61881: ST_TO_ADDR
// exit ;
61882: POP
61883: POP
61884: GO 61908
// end ; end ;
61886: GO 61845
61888: POP
61889: POP
// end else
61890: GO 61908
// result := mpKingPoints [ side ] ;
61892: LD_ADDR_VAR 0 2
61896: PUSH
61897: LD_EXP 59
61901: PUSH
61902: LD_VAR 0 1
61906: ARRAY
61907: ST_TO_ADDR
// end ;
61908: LD_VAR 0 2
61912: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
61913: LD_EXP 39
61917: IFFALSE 61925
61919: PUSH
61920: CALL 62337 0 0
61924: AND
61925: IFFALSE 61933
61927: PUSH
61928: LD_OWVAR 4
61932: AND
61933: IFFALSE 62186
61935: GO 61937
61937: DISABLE
61938: LD_INT 0
61940: PPUSH
61941: PPUSH
// begin canWin := false ;
61942: LD_ADDR_VAR 0 2
61946: PUSH
61947: LD_INT 0
61949: ST_TO_ADDR
// if not HasPower ( your_side ) then
61950: LD_OWVAR 2
61954: PPUSH
61955: CALL 62379 0 1
61959: NOT
61960: IFFALSE 61971
// begin Multiplayer_Loose_Message ;
61962: CALL_OW 521
// enable ( mpLose ) ;
61966: LD_INT 102
61968: ENABLE_MARKED
// end else
61969: GO 62186
// begin if not EnemiesInGame then
61971: CALL 62189 0 0
61975: NOT
61976: IFFALSE 61983
// begin enable ( mpWin ) ;
61978: LD_INT 101
61980: ENABLE_MARKED
// exit ;
61981: GO 62186
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
61983: LD_ADDR_VAR 0 2
61987: PUSH
61988: LD_OWVAR 2
61992: PPUSH
61993: CALL 61815 0 1
61997: PUSH
61998: LD_EXP 35
62002: GREATEREQUAL
62003: IFFALSE 62016
62005: PUSH
62006: LD_OWVAR 2
62010: PPUSH
62011: CALL 62379 0 1
62015: AND
62016: ST_TO_ADDR
// for i := 1 to 8 do
62017: LD_ADDR_VAR 0 1
62021: PUSH
62022: DOUBLE
62023: LD_INT 1
62025: DEC
62026: ST_TO_ADDR
62027: LD_INT 8
62029: PUSH
62030: FOR_TO
62031: IFFALSE 62172
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62033: LD_EXP 7
62037: PUSH
62038: LD_VAR 0 1
62042: ARRAY
62043: IFFALSE 62056
62045: PUSH
62046: LD_VAR 0 1
62050: PPUSH
62051: CALL_OW 108
62055: AND
62056: IFFALSE 62070
62058: PUSH
62059: LD_VAR 0 1
62063: PUSH
62064: LD_OWVAR 2
62068: NONEQUAL
62069: AND
62070: IFFALSE 62170
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62072: LD_EXP 8
62076: PUSH
62077: LD_VAR 0 1
62081: ARRAY
62082: NOT
62083: IFTRUE 62131
62085: PUSH
62086: LD_EXP 8
62090: PUSH
62091: LD_VAR 0 1
62095: ARRAY
62096: PUSH
62097: LD_EXP 8
62101: PUSH
62102: LD_OWVAR 2
62106: ARRAY
62107: NONEQUAL
62108: IFFALSE 62130
62110: PUSH
62111: LD_OWVAR 2
62115: PPUSH
62116: LD_VAR 0 1
62120: PPUSH
62121: CALL_OW 81
62125: PUSH
62126: LD_INT 1
62128: NONEQUAL
62129: AND
62130: OR
62131: IFFALSE 62170
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62133: LD_VAR 0 1
62137: PPUSH
62138: CALL 61815 0 1
62142: PUSH
62143: LD_EXP 35
62147: GREATEREQUAL
62148: IFFALSE 62161
62150: PUSH
62151: LD_VAR 0 1
62155: PPUSH
62156: CALL 62379 0 1
62160: AND
62161: IFFALSE 62170
// begin enable ( mpLose ) ;
62163: LD_INT 102
62165: ENABLE_MARKED
// exit ;
62166: POP
62167: POP
62168: GO 62186
// end ;
62170: GO 62030
62172: POP
62173: POP
// if canWin then
62174: LD_VAR 0 2
62178: IFFALSE 62185
// enable ( mpWin ) else
62180: LD_INT 101
62182: ENABLE_MARKED
62183: GO 62186
// enable ;
62185: ENABLE
// end ; end ;
62186: PPOPN 2
62188: END
// function EnemiesInGame ; var i ; begin
62189: LD_INT 0
62191: PPUSH
62192: PPUSH
// result := false ;
62193: LD_ADDR_VAR 0 1
62197: PUSH
62198: LD_INT 0
62200: ST_TO_ADDR
// for i := 1 to 8 do
62201: LD_ADDR_VAR 0 2
62205: PUSH
62206: DOUBLE
62207: LD_INT 1
62209: DEC
62210: ST_TO_ADDR
62211: LD_INT 8
62213: PUSH
62214: FOR_TO
62215: IFFALSE 62330
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62217: LD_VAR 0 2
62221: PUSH
62222: LD_OWVAR 2
62226: NONEQUAL
62227: IFFALSE 62240
62229: PUSH
62230: LD_VAR 0 2
62234: PPUSH
62235: CALL 62379 0 1
62239: AND
62240: IFFALSE 62253
62242: PUSH
62243: LD_VAR 0 2
62247: PPUSH
62248: CALL_OW 108
62252: AND
62253: IFFALSE 62328
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62255: LD_EXP 8
62259: PUSH
62260: LD_VAR 0 2
62264: ARRAY
62265: NOT
62266: IFTRUE 62314
62268: PUSH
62269: LD_EXP 8
62273: PUSH
62274: LD_VAR 0 2
62278: ARRAY
62279: PUSH
62280: LD_EXP 8
62284: PUSH
62285: LD_OWVAR 2
62289: ARRAY
62290: NONEQUAL
62291: IFFALSE 62313
62293: PUSH
62294: LD_OWVAR 2
62298: PPUSH
62299: LD_VAR 0 2
62303: PPUSH
62304: CALL_OW 81
62308: PUSH
62309: LD_INT 1
62311: NONEQUAL
62312: AND
62313: OR
62314: IFFALSE 62328
// begin result := true ;
62316: LD_ADDR_VAR 0 1
62320: PUSH
62321: LD_INT 1
62323: ST_TO_ADDR
// exit ;
62324: POP
62325: POP
62326: GO 62332
// end ;
62328: GO 62214
62330: POP
62331: POP
// end ;
62332: LD_VAR 0 1
62336: RET
// function CanWinLoose ; begin
62337: LD_INT 0
62339: PPUSH
// result := true ;
62340: LD_ADDR_VAR 0 1
62344: PUSH
62345: LD_INT 1
62347: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62348: CALL_OW 531
62352: IFFALSE 62364
62354: PUSH
62355: CALL_OW 519
62359: PUSH
62360: LD_INT 1
62362: GREATER
62363: AND
62364: IFFALSE 62374
// result := false ;
62366: LD_ADDR_VAR 0 1
62370: PUSH
62371: LD_INT 0
62373: ST_TO_ADDR
// end ;
62374: LD_VAR 0 1
62378: RET
// function HasPower ( i ) ; begin
62379: LD_INT 0
62381: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62382: LD_ADDR_VAR 0 2
62386: PUSH
62387: LD_INT 22
62389: PUSH
62390: LD_VAR 0 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: LD_INT 21
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 33
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 33
62424: PUSH
62425: LD_INT 5
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PPUSH
62442: CALL_OW 69
62446: ST_TO_ADDR
// end ; end_of_file
62447: LD_VAR 0 2
62451: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62452: PPOPN 6
62454: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62455: LD_INT 0
62457: PPUSH
// begin if not units then
62458: LD_VAR 0 1
62462: NOT
62463: IFFALSE 62467
// exit ;
62465: GO 62501
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62467: LD_VAR 0 1
62471: PPUSH
62472: LD_VAR 0 2
62476: PPUSH
62477: LD_VAR 0 3
62481: PPUSH
62482: LD_VAR 0 4
62486: PPUSH
62487: LD_VAR 0 5
62491: PPUSH
62492: LD_VAR 0 6
62496: PPUSH
62497: CALL 60744 0 6
// end ;
62501: PPOPN 7
62503: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62504: LD_EXP 3
62508: PUSH
62509: LD_INT 4
62511: EQUAL
62512: IFFALSE 62548
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62514: LD_STRING setGameDifficulty(
62516: PUSH
62517: LD_OWVAR 67
62521: STR
62522: PUSH
62523: LD_STRING )
62525: STR
62526: PPUSH
62527: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62531: LD_STRING displayDifficulty(
62533: PUSH
62534: LD_OWVAR 67
62538: STR
62539: PUSH
62540: LD_STRING )
62542: STR
62543: PPUSH
62544: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62548: CALL 62577 0 0
// end ; end_of_file
62552: PPOPN 1
62554: END
// every 0 0$1 do
62555: GO 62557
62557: DISABLE
// begin enable ;
62558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62559: LD_STRING updateTimer(
62561: PUSH
62562: LD_OWVAR 1
62566: STR
62567: PUSH
62568: LD_STRING );
62570: STR
62571: PPUSH
62572: CALL_OW 559
// end ;
62576: END
// export function SOS_MapStart ( ) ; begin
62577: LD_INT 0
62579: PPUSH
// UpdateFactoryWaypoints ( ) ;
62580: CALL 63511 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62584: CALL 63763 0 0
// ParseMultiDataToLua ( ) ;
62588: CALL 63910 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62592: LD_STRING setSpecLogoNumber(
62594: PUSH
62595: LD_INT 2
62597: STR
62598: PUSH
62599: LD_STRING ,
62601: STR
62602: PUSH
62603: LD_INT 1
62605: STR
62606: PUSH
62607: LD_STRING )
62609: STR
62610: PPUSH
62611: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62615: LD_STRING setSpecLogoNumber(
62617: PUSH
62618: LD_INT 3
62620: STR
62621: PUSH
62622: LD_STRING ,
62624: STR
62625: PUSH
62626: LD_INT 2
62628: STR
62629: PUSH
62630: LD_STRING )
62632: STR
62633: PPUSH
62634: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62638: LD_STRING setSpecLogoNumber(
62640: PUSH
62641: LD_INT 4
62643: STR
62644: PUSH
62645: LD_STRING ,
62647: STR
62648: PUSH
62649: LD_INT 3
62651: STR
62652: PUSH
62653: LD_STRING )
62655: STR
62656: PPUSH
62657: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62661: LD_STRING setSpecLogoNumber(
62663: PUSH
62664: LD_INT 5
62666: STR
62667: PUSH
62668: LD_STRING ,
62670: STR
62671: PUSH
62672: LD_INT 4
62674: STR
62675: PUSH
62676: LD_STRING )
62678: STR
62679: PPUSH
62680: CALL_OW 559
// end ;
62684: LD_VAR 0 1
62688: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62689: LD_INT 0
62691: PPUSH
62692: PPUSH
62693: PPUSH
62694: PPUSH
62695: PPUSH
62696: PPUSH
62697: PPUSH
62698: PPUSH
62699: PPUSH
// for i := 1 to 8 do
62700: LD_ADDR_VAR 0 2
62704: PUSH
62705: DOUBLE
62706: LD_INT 1
62708: DEC
62709: ST_TO_ADDR
62710: LD_INT 8
62712: PUSH
62713: FOR_TO
62714: IFFALSE 63099
// begin if mpSidePositions [ i ] then
62716: LD_EXP 7
62720: PUSH
62721: LD_VAR 0 2
62725: ARRAY
62726: IFFALSE 63097
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62728: LD_ADDR_VAR 0 7
62732: PUSH
62733: LD_INT 22
62735: PUSH
62736: LD_VAR 0 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 21
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PPUSH
62759: CALL_OW 69
62763: PPUSH
62764: CALL 12914 0 1
62768: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62769: LD_ADDR_VAR 0 9
62773: PUSH
62774: LD_INT 22
62776: PUSH
62777: LD_VAR 0 2
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: LD_INT 30
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 30
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PPUSH
62818: CALL_OW 69
62822: ST_TO_ADDR
// crates := 0 ;
62823: LD_ADDR_VAR 0 4
62827: PUSH
62828: LD_INT 0
62830: ST_TO_ADDR
// oil := 0 ;
62831: LD_ADDR_VAR 0 5
62835: PUSH
62836: LD_INT 0
62838: ST_TO_ADDR
// sib := 0 ;
62839: LD_ADDR_VAR 0 6
62843: PUSH
62844: LD_INT 0
62846: ST_TO_ADDR
// if bases then
62847: LD_VAR 0 9
62851: IFFALSE 62957
// begin for j in bases do
62853: LD_ADDR_VAR 0 3
62857: PUSH
62858: LD_VAR 0 9
62862: PUSH
62863: FOR_IN
62864: IFFALSE 62955
// begin base := GetBase ( j ) ;
62866: LD_ADDR_VAR 0 8
62870: PUSH
62871: LD_VAR 0 3
62875: PPUSH
62876: CALL_OW 274
62880: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62881: LD_ADDR_VAR 0 4
62885: PUSH
62886: LD_VAR 0 4
62890: PUSH
62891: LD_VAR 0 8
62895: PPUSH
62896: LD_INT 1
62898: PPUSH
62899: CALL_OW 275
62903: PLUS
62904: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62905: LD_ADDR_VAR 0 5
62909: PUSH
62910: LD_VAR 0 5
62914: PUSH
62915: LD_VAR 0 8
62919: PPUSH
62920: LD_INT 2
62922: PPUSH
62923: CALL_OW 275
62927: PLUS
62928: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62929: LD_ADDR_VAR 0 6
62933: PUSH
62934: LD_VAR 0 6
62938: PUSH
62939: LD_VAR 0 8
62943: PPUSH
62944: LD_INT 3
62946: PPUSH
62947: CALL_OW 275
62951: PLUS
62952: ST_TO_ADDR
// end ;
62953: GO 62863
62955: POP
62956: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62957: LD_STRING setSpecText(
62959: PUSH
62960: LD_VAR 0 2
62964: STR
62965: PUSH
62966: LD_STRING ,
62968: STR
62969: PUSH
62970: LD_INT 2
62972: STR
62973: PUSH
62974: LD_STRING ,
62976: STR
62977: PUSH
62978: LD_VAR 0 4
62982: STR
62983: PUSH
62984: LD_STRING )
62986: STR
62987: PPUSH
62988: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62992: LD_STRING setSpecText(
62994: PUSH
62995: LD_VAR 0 2
62999: STR
63000: PUSH
63001: LD_STRING ,
63003: STR
63004: PUSH
63005: LD_INT 3
63007: STR
63008: PUSH
63009: LD_STRING ,
63011: STR
63012: PUSH
63013: LD_VAR 0 5
63017: STR
63018: PUSH
63019: LD_STRING )
63021: STR
63022: PPUSH
63023: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63027: LD_STRING setSpecText(
63029: PUSH
63030: LD_VAR 0 2
63034: STR
63035: PUSH
63036: LD_STRING ,
63038: STR
63039: PUSH
63040: LD_INT 4
63042: STR
63043: PUSH
63044: LD_STRING ,
63046: STR
63047: PUSH
63048: LD_VAR 0 6
63052: STR
63053: PUSH
63054: LD_STRING )
63056: STR
63057: PPUSH
63058: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63062: LD_STRING setSpecText(
63064: PUSH
63065: LD_VAR 0 2
63069: STR
63070: PUSH
63071: LD_STRING ,
63073: STR
63074: PUSH
63075: LD_INT 5
63077: STR
63078: PUSH
63079: LD_STRING ,
63081: STR
63082: PUSH
63083: LD_VAR 0 7
63087: STR
63088: PUSH
63089: LD_STRING )
63091: STR
63092: PPUSH
63093: CALL_OW 559
// end ; end ;
63097: GO 62713
63099: POP
63100: POP
// end ;
63101: LD_VAR 0 1
63105: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63106: LD_INT 2
63108: PUSH
63109: LD_INT 30
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 30
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: PPUSH
63134: CALL_OW 69
63138: IFFALSE 63148
63140: GO 63142
63142: DISABLE
// begin enable ;
63143: ENABLE
// UpdateSpectatorBar ;
63144: CALL 62689 0 0
// end ;
63148: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63149: LD_INT 0
63151: PPUSH
// end ;
63152: LD_VAR 0 12
63156: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63157: LD_INT 0
63159: PPUSH
63160: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63161: LD_VAR 0 1
63165: NOT
63166: IFTRUE 63185
63168: PUSH
63169: LD_VAR 0 2
63173: PPUSH
63174: LD_VAR 0 3
63178: PPUSH
63179: CALL_OW 488
63183: NOT
63184: OR
63185: IFTRUE 63220
63187: PUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: CALL_OW 266
63197: PUSH
63198: LD_INT 3
63200: NONEQUAL
63201: IFFALSE 63219
63203: PUSH
63204: LD_VAR 0 1
63208: PPUSH
63209: CALL_OW 247
63213: PUSH
63214: LD_INT 1
63216: EQUAL
63217: NOT
63218: AND
63219: OR
63220: IFFALSE 63224
// exit ;
63222: GO 63506
// if GetType ( factory ) = unit_human then
63224: LD_VAR 0 1
63228: PPUSH
63229: CALL_OW 247
63233: PUSH
63234: LD_INT 1
63236: EQUAL
63237: IFFALSE 63254
// factory := IsInUnit ( factory ) ;
63239: LD_ADDR_VAR 0 1
63243: PUSH
63244: LD_VAR 0 1
63248: PPUSH
63249: CALL_OW 310
63253: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63254: LD_VAR 0 1
63258: PPUSH
63259: CALL_OW 266
63263: PUSH
63264: LD_INT 3
63266: NONEQUAL
63267: IFFALSE 63271
// exit ;
63269: GO 63506
// for i := 1 to Count ( factoryWaypoints ) do
63271: LD_ADDR_VAR 0 5
63275: PUSH
63276: DOUBLE
63277: LD_INT 1
63279: DEC
63280: ST_TO_ADDR
63281: LD_EXP 60
63285: PPUSH
63286: CALL 12914 0 1
63290: PUSH
63291: FOR_TO
63292: IFFALSE 63454
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63294: LD_VAR 0 2
63298: PPUSH
63299: LD_VAR 0 3
63303: PPUSH
63304: CALL_OW 428
63308: PUSH
63309: LD_EXP 60
63313: PUSH
63314: LD_VAR 0 5
63318: ARRAY
63319: PUSH
63320: LD_INT 2
63322: ARRAY
63323: EQUAL
63324: IFFALSE 63356
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63326: LD_ADDR_EXP 60
63330: PUSH
63331: LD_EXP 60
63335: PPUSH
63336: LD_VAR 0 5
63340: PPUSH
63341: CALL_OW 3
63345: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63346: CALL 63511 0 0
// exit ;
63350: POP
63351: POP
63352: GO 63506
// end else
63354: GO 63452
// if factory = factoryWaypoints [ i ] [ 2 ] then
63356: LD_VAR 0 1
63360: PUSH
63361: LD_EXP 60
63365: PUSH
63366: LD_VAR 0 5
63370: ARRAY
63371: PUSH
63372: LD_INT 2
63374: ARRAY
63375: EQUAL
63376: IFFALSE 63452
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63378: LD_ADDR_EXP 60
63382: PUSH
63383: LD_EXP 60
63387: PPUSH
63388: LD_VAR 0 5
63392: PPUSH
63393: CALL_OW 3
63397: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63398: LD_ADDR_EXP 60
63402: PUSH
63403: LD_EXP 60
63407: PPUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: CALL_OW 255
63417: PUSH
63418: LD_VAR 0 1
63422: PUSH
63423: LD_VAR 0 2
63427: PUSH
63428: LD_VAR 0 3
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: PPUSH
63439: CALL 48880 0 2
63443: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63444: CALL 63511 0 0
// exit ;
63448: POP
63449: POP
63450: GO 63506
// end ; end ;
63452: GO 63291
63454: POP
63455: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63456: LD_ADDR_EXP 60
63460: PUSH
63461: LD_EXP 60
63465: PPUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: CALL_OW 255
63475: PUSH
63476: LD_VAR 0 1
63480: PUSH
63481: LD_VAR 0 2
63485: PUSH
63486: LD_VAR 0 3
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: PPUSH
63497: CALL 48880 0 2
63501: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63502: CALL 63511 0 0
// end ;
63506: LD_VAR 0 4
63510: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63511: LD_INT 0
63513: PPUSH
63514: PPUSH
63515: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63516: LD_STRING resetFactoryWaypoint();
63518: PPUSH
63519: CALL_OW 559
// if factoryWaypoints then
63523: LD_EXP 60
63527: IFFALSE 63648
// begin list := factoryWaypoints ;
63529: LD_ADDR_VAR 0 3
63533: PUSH
63534: LD_EXP 60
63538: ST_TO_ADDR
// for i := 1 to list do
63539: LD_ADDR_VAR 0 2
63543: PUSH
63544: DOUBLE
63545: LD_INT 1
63547: DEC
63548: ST_TO_ADDR
63549: LD_VAR 0 3
63553: PUSH
63554: FOR_TO
63555: IFFALSE 63646
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63557: LD_STRING setFactoryWaypointXY(
63559: PUSH
63560: LD_VAR 0 3
63564: PUSH
63565: LD_VAR 0 2
63569: ARRAY
63570: PUSH
63571: LD_INT 1
63573: ARRAY
63574: STR
63575: PUSH
63576: LD_STRING ,
63578: STR
63579: PUSH
63580: LD_VAR 0 3
63584: PUSH
63585: LD_VAR 0 2
63589: ARRAY
63590: PUSH
63591: LD_INT 2
63593: ARRAY
63594: STR
63595: PUSH
63596: LD_STRING ,
63598: STR
63599: PUSH
63600: LD_VAR 0 3
63604: PUSH
63605: LD_VAR 0 2
63609: ARRAY
63610: PUSH
63611: LD_INT 3
63613: ARRAY
63614: STR
63615: PUSH
63616: LD_STRING ,
63618: STR
63619: PUSH
63620: LD_VAR 0 3
63624: PUSH
63625: LD_VAR 0 2
63629: ARRAY
63630: PUSH
63631: LD_INT 4
63633: ARRAY
63634: STR
63635: PUSH
63636: LD_STRING )
63638: STR
63639: PPUSH
63640: CALL_OW 559
63644: GO 63554
63646: POP
63647: POP
// end ; end ;
63648: LD_VAR 0 1
63652: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63653: LD_INT 0
63655: PPUSH
// if HexInfo ( x , y ) = warehouse then
63656: LD_VAR 0 2
63660: PPUSH
63661: LD_VAR 0 3
63665: PPUSH
63666: CALL_OW 428
63670: PUSH
63671: LD_VAR 0 1
63675: EQUAL
63676: IFFALSE 63703
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63678: LD_ADDR_EXP 62
63682: PUSH
63683: LD_EXP 62
63687: PPUSH
63688: LD_VAR 0 1
63692: PPUSH
63693: LD_INT 0
63695: PPUSH
63696: CALL_OW 1
63700: ST_TO_ADDR
63701: GO 63754
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63703: LD_ADDR_EXP 62
63707: PUSH
63708: LD_EXP 62
63712: PPUSH
63713: LD_VAR 0 1
63717: PPUSH
63718: LD_VAR 0 1
63722: PPUSH
63723: CALL_OW 255
63727: PUSH
63728: LD_VAR 0 1
63732: PUSH
63733: LD_VAR 0 2
63737: PUSH
63738: LD_VAR 0 3
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: PPUSH
63749: CALL_OW 1
63753: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63754: CALL 63763 0 0
// end ;
63758: LD_VAR 0 4
63762: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63763: LD_INT 0
63765: PPUSH
63766: PPUSH
63767: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63768: LD_STRING resetWarehouseGatheringPoints();
63770: PPUSH
63771: CALL_OW 559
// if warehouseGatheringPoints then
63775: LD_EXP 62
63779: IFFALSE 63905
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63781: LD_ADDR_VAR 0 3
63785: PUSH
63786: LD_EXP 62
63790: PPUSH
63791: CALL 52814 0 1
63795: ST_TO_ADDR
// for i := 1 to list do
63796: LD_ADDR_VAR 0 2
63800: PUSH
63801: DOUBLE
63802: LD_INT 1
63804: DEC
63805: ST_TO_ADDR
63806: LD_VAR 0 3
63810: PUSH
63811: FOR_TO
63812: IFFALSE 63903
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63814: LD_STRING setWarehouseGatheringPointXY(
63816: PUSH
63817: LD_VAR 0 3
63821: PUSH
63822: LD_VAR 0 2
63826: ARRAY
63827: PUSH
63828: LD_INT 1
63830: ARRAY
63831: STR
63832: PUSH
63833: LD_STRING ,
63835: STR
63836: PUSH
63837: LD_VAR 0 3
63841: PUSH
63842: LD_VAR 0 2
63846: ARRAY
63847: PUSH
63848: LD_INT 2
63850: ARRAY
63851: STR
63852: PUSH
63853: LD_STRING ,
63855: STR
63856: PUSH
63857: LD_VAR 0 3
63861: PUSH
63862: LD_VAR 0 2
63866: ARRAY
63867: PUSH
63868: LD_INT 3
63870: ARRAY
63871: STR
63872: PUSH
63873: LD_STRING ,
63875: STR
63876: PUSH
63877: LD_VAR 0 3
63881: PUSH
63882: LD_VAR 0 2
63886: ARRAY
63887: PUSH
63888: LD_INT 4
63890: ARRAY
63891: STR
63892: PUSH
63893: LD_STRING )
63895: STR
63896: PPUSH
63897: CALL_OW 559
63901: GO 63811
63903: POP
63904: POP
// end ; end ;
63905: LD_VAR 0 1
63909: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63910: LD_INT 0
63912: PPUSH
63913: PPUSH
// if not mpSidePositions then
63914: LD_EXP 7
63918: NOT
63919: IFFALSE 63923
// exit ;
63921: GO 63994
// result :=  ;
63923: LD_ADDR_VAR 0 1
63927: PUSH
63928: LD_STRING 
63930: ST_TO_ADDR
// for i := 1 to 8 do
63931: LD_ADDR_VAR 0 2
63935: PUSH
63936: DOUBLE
63937: LD_INT 1
63939: DEC
63940: ST_TO_ADDR
63941: LD_INT 8
63943: PUSH
63944: FOR_TO
63945: IFFALSE 63975
// begin result := result & mpSidePositions [ i ] & ; ;
63947: LD_ADDR_VAR 0 1
63951: PUSH
63952: LD_VAR 0 1
63956: PUSH
63957: LD_EXP 7
63961: PUSH
63962: LD_VAR 0 2
63966: ARRAY
63967: STR
63968: PUSH
63969: LD_STRING ;
63971: STR
63972: ST_TO_ADDR
// end ;
63973: GO 63944
63975: POP
63976: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63977: LD_STRING setMultiplayerRealPosition("
63979: PUSH
63980: LD_VAR 0 1
63984: STR
63985: PUSH
63986: LD_STRING ");
63988: STR
63989: PPUSH
63990: CALL_OW 559
// end ;
63994: LD_VAR 0 1
63998: RET
