// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2822 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3245 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 35
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 37
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 36
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 33
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 54277 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 54277 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 54277 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 54277 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 54277 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 54277 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 13582 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 54110 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 54110 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 54110 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 54110 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 54110 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 54110 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 54110 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 54110 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 54110 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 54110 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 54110 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 54110 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 54277 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 54277 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 54277 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 54277 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 54277 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 54277 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 54277 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 54277 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 54277 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 54277 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 54277 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 54277 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 54277 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 54277 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 54277 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 54277 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 54277 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 54277 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 50931 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 55075 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 8368 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 55092 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 9421 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 55133 0 2
2721: PPOPN 2
2723: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: CALL 9174 0 2
2738: PPOPN 2
2740: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2741: LD_VAR 0 1
2745: PPUSH
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: CALL 9474 0 3
2760: PPOPN 3
2762: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2763: LD_VAR 0 1
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_VAR 0 4
2782: PPUSH
2783: LD_VAR 0 5
2787: PPUSH
2788: CALL 10158 0 5
2792: PPOPN 5
2794: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2795: LD_VAR 0 1
2799: PPUSH
2800: LD_VAR 0 2
2804: PPUSH
2805: LD_VAR 0 3
2809: PPUSH
2810: LD_VAR 0 4
2814: PPUSH
2815: CALL 10261 0 4
2819: PPOPN 4
2821: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2822: LD_INT 0
2824: PPUSH
2825: PPUSH
// disable ( mpActive ) ;
2826: LD_INT 100
2828: DISABLE_MARKED
// disable ( mpWin ) ;
2829: LD_INT 101
2831: DISABLE_MARKED
// disable ( mpLose ) ;
2832: LD_INT 102
2834: DISABLE_MARKED
// mpGameType := 0 ;
2835: LD_ADDR_EXP 3
2839: PUSH
2840: LD_INT 0
2842: ST_TO_ADDR
// mpGameSettings := [ ] ;
2843: LD_ADDR_EXP 6
2847: PUSH
2848: EMPTY
2849: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2850: LD_ADDR_EXP 4
2854: PUSH
2855: EMPTY
2856: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2857: LD_ADDR_EXP 5
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2864: LD_ADDR_EXP 29
2868: PUSH
2869: LD_INT 2
2871: PUSH
2872: LD_INT 2
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2879: LD_ADDR_EXP 12
2883: PUSH
2884: EMPTY
2885: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2886: LD_ADDR_EXP 13
2890: PUSH
2891: EMPTY
2892: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2893: LD_ADDR_EXP 42
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2900: LD_ADDR_EXP 43
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// mpDepots := [ ] ;
2907: LD_ADDR_EXP 14
2911: PUSH
2912: EMPTY
2913: ST_TO_ADDR
// mpBuildings := [ ] ;
2914: LD_ADDR_EXP 17
2918: PUSH
2919: EMPTY
2920: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2921: LD_ADDR_EXP 18
2925: PUSH
2926: EMPTY
2927: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2928: LD_ADDR_EXP 19
2932: PUSH
2933: EMPTY
2934: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: EMPTY
2941: ST_TO_ADDR
// mpStartingResources := [ ] ;
2942: LD_ADDR_EXP 15
2946: PUSH
2947: EMPTY
2948: ST_TO_ADDR
// mpStartPos := [ ] ;
2949: LD_ADDR_EXP 21
2953: PUSH
2954: EMPTY
2955: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2956: LD_ADDR_EXP 22
2960: PUSH
2961: LD_INT 1
2963: NEG
2964: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2965: LD_ADDR_EXP 23
2969: PUSH
2970: EMPTY
2971: ST_TO_ADDR
// mpApemans := [ ] ;
2972: LD_ADDR_EXP 30
2976: PUSH
2977: EMPTY
2978: ST_TO_ADDR
// mpApemansArea := [ ] ;
2979: LD_ADDR_EXP 31
2983: PUSH
2984: EMPTY
2985: ST_TO_ADDR
// mpRespawn := [ ] ;
2986: LD_ADDR_EXP 33
2990: PUSH
2991: EMPTY
2992: ST_TO_ADDR
// mpKingArea := 0 ;
2993: LD_ADDR_EXP 34
2997: PUSH
2998: LD_INT 0
3000: ST_TO_ADDR
// mpPoints := [ ] ;
3001: LD_ADDR_EXP 35
3005: PUSH
3006: EMPTY
3007: ST_TO_ADDR
// mpVehicles := 0 ;
3008: LD_ADDR_EXP 36
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// mpShipments := 0 ;
3016: LD_ADDR_EXP 27
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3024: LD_ADDR_EXP 40
3028: PUSH
3029: EMPTY
3030: PUSH
3031: EMPTY
3032: PUSH
3033: EMPTY
3034: PUSH
3035: EMPTY
3036: PUSH
3037: EMPTY
3038: PUSH
3039: EMPTY
3040: PUSH
3041: EMPTY
3042: PUSH
3043: EMPTY
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3055: LD_ADDR_EXP 32
3059: PUSH
3060: EMPTY
3061: PUSH
3062: EMPTY
3063: PUSH
3064: EMPTY
3065: PUSH
3066: EMPTY
3067: PUSH
3068: EMPTY
3069: PUSH
3070: EMPTY
3071: PUSH
3072: EMPTY
3073: PUSH
3074: EMPTY
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3086: LD_ADDR_EXP 41
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: LD_INT 0
3096: PUSH
3097: LD_INT 0
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 0
3105: PUSH
3106: LD_INT 0
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: ST_TO_ADDR
// mpEmissions := 0 ;
3125: LD_ADDR_EXP 37
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// mpTeleports := 0 ;
3133: LD_ADDR_EXP 44
3137: PUSH
3138: LD_INT 0
3140: ST_TO_ADDR
// mpArtifacts := 0 ;
3141: LD_ADDR_EXP 45
3145: PUSH
3146: LD_INT 0
3148: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3149: LD_ADDR_EXP 46
3153: PUSH
3154: LD_INT 0
3156: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3157: LD_ADDR_EXP 25
3161: PUSH
3162: LD_INT 3
3164: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3165: LD_ADDR_EXP 24
3169: PUSH
3170: LD_INT 15
3172: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3173: LD_ADDR_EXP 38
3177: PUSH
3178: LD_INT 0
3180: ST_TO_ADDR
// mpGameActive := false ;
3181: LD_ADDR_EXP 39
3185: PUSH
3186: LD_INT 0
3188: ST_TO_ADDR
// mpBlockRespThread := false ;
3189: LD_ADDR_EXP 47
3193: PUSH
3194: LD_INT 0
3196: ST_TO_ADDR
// for i := 1 to 32 do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_INT 32
3209: PUSH
3210: FOR_TO
3211: IFFALSE 3238
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3213: LD_ADDR_EXP 6
3217: PUSH
3218: LD_EXP 6
3222: PPUSH
3223: LD_VAR 0 2
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 1
3235: ST_TO_ADDR
3236: GO 3210
3238: POP
3239: POP
// end ;
3240: LD_VAR 0 1
3244: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3245: LD_INT 0
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
3252: PPUSH
3253: PPUSH
3254: PPUSH
3255: PPUSH
3256: PPUSH
3257: PPUSH
3258: PPUSH
3259: PPUSH
3260: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
3261: LD_ADDR_VAR 0 14
3265: PUSH
3266: LD_INT 1
3268: PUSH
3269: LD_INT 2
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: LD_INT 5
3277: PUSH
3278: LD_INT 6
3280: PUSH
3281: LD_INT 7
3283: PUSH
3284: LD_INT 8
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: ST_TO_ADDR
// for i in gameTypes do
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_VAR 0 14
3305: PUSH
3306: FOR_IN
3307: IFFALSE 3316
// disable ( i ) ;
3309: LD_VAR 0 2
3313: DISABLE_MARKED
3314: GO 3306
3316: POP
3317: POP
// if Multiplayer then
3318: LD_OWVAR 4
3322: IFFALSE 3506
// begin mpGameType := mp_game_type ;
3324: LD_ADDR_EXP 3
3328: PUSH
3329: LD_OWVAR 6
3333: ST_TO_ADDR
// your_side := mp_player_side ;
3334: LD_ADDR_OWVAR 2
3338: PUSH
3339: LD_OWVAR 7
3343: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3344: LD_ADDR_EXP 7
3348: PUSH
3349: LD_OWVAR 17
3353: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3354: LD_ADDR_EXP 8
3358: PUSH
3359: LD_OWVAR 15
3363: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3364: LD_ADDR_EXP 9
3368: PUSH
3369: LD_OWVAR 16
3373: ST_TO_ADDR
// mpTeams := mp_teams ;
3374: LD_ADDR_EXP 10
3378: PUSH
3379: LD_OWVAR 12
3383: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_EXP 4
3398: PPUSH
3399: CALL 13582 0 1
3403: PUSH
3404: FOR_TO
3405: IFFALSE 3481
// begin setting := mpGameSettingsKeys [ i ] ;
3407: LD_ADDR_VAR 0 12
3411: PUSH
3412: LD_EXP 4
3416: PUSH
3417: LD_VAR 0 2
3421: ARRAY
3422: ST_TO_ADDR
// if setting then
3423: LD_VAR 0 12
3427: IFFALSE 3479
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3429: LD_ADDR_EXP 6
3433: PUSH
3434: LD_EXP 6
3438: PPUSH
3439: LD_VAR 0 2
3443: PPUSH
3444: LD_EXP 5
3448: PUSH
3449: LD_VAR 0 2
3453: ARRAY
3454: PUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 1
3462: MINUS
3463: PPUSH
3464: CALL_OW 426
3468: PUSH
3469: LD_INT 1
3471: PLUS
3472: ARRAY
3473: PPUSH
3474: CALL_OW 1
3478: ST_TO_ADDR
// end ;
3479: GO 3404
3481: POP
3482: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3483: LD_ADDR_EXP 11
3487: PUSH
3488: LD_EXP 8
3492: PUSH
3493: LD_INT 0
3495: PUSH
3496: EMPTY
3497: LIST
3498: DIFF
3499: PUSH
3500: LD_INT 1
3502: GREATER
3503: ST_TO_ADDR
// end else
3504: GO 3506
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3506: LD_EXP 3
3510: PPUSH
3511: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3515: LD_EXP 18
3519: PPUSH
3520: CALL 13582 0 1
3524: IFFALSE 3555
// begin for i in mpMarkedAreas do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: LD_EXP 18
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3553
// SetAreaMapShow ( i , 0 ) ;
3539: LD_VAR 0 2
3543: PPUSH
3544: LD_INT 0
3546: PPUSH
3547: CALL_OW 424
3551: GO 3536
3553: POP
3554: POP
// end ; for i := 1 to 8 do
3555: LD_ADDR_VAR 0 2
3559: PUSH
3560: DOUBLE
3561: LD_INT 1
3563: DEC
3564: ST_TO_ADDR
3565: LD_INT 8
3567: PUSH
3568: FOR_TO
3569: IFFALSE 5028
// begin if not mpSidePositions [ i ] then
3571: LD_EXP 7
3575: PUSH
3576: LD_VAR 0 2
3580: ARRAY
3581: NOT
3582: IFFALSE 3586
// continue ;
3584: GO 3568
// side := i ;
3586: LD_ADDR_VAR 0 7
3590: PUSH
3591: LD_VAR 0 2
3595: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3596: LD_ADDR_VAR 0 9
3600: PUSH
3601: LD_EXP 9
3605: PUSH
3606: LD_VAR 0 2
3610: ARRAY
3611: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3612: LD_ADDR_VAR 0 8
3616: PUSH
3617: LD_EXP 7
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3628: LD_EXP 12
3632: PPUSH
3633: CALL 13582 0 1
3637: IFFALSE 3714
// begin for j in mpOilDeposits [ pos ] do
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_EXP 12
3648: PUSH
3649: LD_VAR 0 8
3653: ARRAY
3654: PUSH
3655: FOR_IN
3656: IFFALSE 3712
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3658: LD_VAR 0 3
3662: PUSH
3663: LD_INT 1
3665: ARRAY
3666: PPUSH
3667: LD_VAR 0 3
3671: PUSH
3672: LD_INT 2
3674: ARRAY
3675: PPUSH
3676: LD_INT 2
3678: PPUSH
3679: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3683: LD_VAR 0 3
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: PPUSH
3692: LD_VAR 0 3
3696: PUSH
3697: LD_INT 2
3699: ARRAY
3700: PPUSH
3701: LD_VAR 0 7
3705: PPUSH
3706: CALL_OW 441
// end ;
3710: GO 3655
3712: POP
3713: POP
// end ; if Count ( mpSibDeposits ) then
3714: LD_EXP 13
3718: PPUSH
3719: CALL 13582 0 1
3723: IFFALSE 3800
// begin for j in mpSibDeposits [ pos ] do
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: LD_EXP 13
3734: PUSH
3735: LD_VAR 0 8
3739: ARRAY
3740: PUSH
3741: FOR_IN
3742: IFFALSE 3798
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3744: LD_VAR 0 3
3748: PUSH
3749: LD_INT 1
3751: ARRAY
3752: PPUSH
3753: LD_VAR 0 3
3757: PUSH
3758: LD_INT 2
3760: ARRAY
3761: PPUSH
3762: LD_INT 3
3764: PPUSH
3765: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3769: LD_VAR 0 3
3773: PUSH
3774: LD_INT 1
3776: ARRAY
3777: PPUSH
3778: LD_VAR 0 3
3782: PUSH
3783: LD_INT 2
3785: ARRAY
3786: PPUSH
3787: LD_VAR 0 7
3791: PPUSH
3792: CALL_OW 441
// end ;
3796: GO 3741
3798: POP
3799: POP
// end ; InitBc ;
3800: CALL_OW 21
// InitUc ;
3804: CALL_OW 18
// uc_side := side ;
3808: LD_ADDR_OWVAR 20
3812: PUSH
3813: LD_VAR 0 7
3817: ST_TO_ADDR
// uc_nation := nation ;
3818: LD_ADDR_OWVAR 21
3822: PUSH
3823: LD_VAR 0 9
3827: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3828: LD_EXP 22
3832: PUSH
3833: LD_INT 1
3835: NEG
3836: GREATER
3837: IFFALSE 3996
// begin x := mpStartPos [ pos ] [ 1 ] ;
3839: LD_ADDR_VAR 0 5
3843: PUSH
3844: LD_EXP 21
3848: PUSH
3849: LD_VAR 0 8
3853: ARRAY
3854: PUSH
3855: LD_INT 1
3857: ARRAY
3858: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3859: LD_ADDR_VAR 0 6
3863: PUSH
3864: LD_EXP 21
3868: PUSH
3869: LD_VAR 0 8
3873: ARRAY
3874: PUSH
3875: LD_INT 2
3877: ARRAY
3878: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3879: LD_VAR 0 5
3883: PPUSH
3884: LD_VAR 0 6
3888: PPUSH
3889: LD_INT 12
3891: PPUSH
3892: LD_INT 2
3894: PPUSH
3895: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3899: LD_ADDR_EXP 23
3903: PUSH
3904: LD_EXP 23
3908: PPUSH
3909: LD_VAR 0 7
3913: PPUSH
3914: LD_VAR 0 7
3918: PPUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_VAR 0 6
3928: PPUSH
3929: LD_INT 1
3931: PUSH
3932: LD_INT 100
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PUSH
3939: LD_INT 2
3941: PUSH
3942: LD_INT 70
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PUSH
3949: LD_INT 3
3951: PUSH
3952: LD_INT 40
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 10
3961: PUSH
3962: LD_INT 25
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 20
3971: PUSH
3972: LD_INT 100
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: PPUSH
3986: CALL_OW 418
3990: PPUSH
3991: CALL_OW 1
3995: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3996: LD_EXP 14
4000: PPUSH
4001: CALL 13582 0 1
4005: IFFALSE 4204
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
4007: LD_EXP 3
4011: PUSH
4012: LD_INT 2
4014: PUSH
4015: LD_INT 8
4017: PUSH
4018: LD_INT 6
4020: PUSH
4021: LD_INT 7
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: IN
4030: IFFALSE 4050
// begin bc_level := 10 ;
4032: LD_ADDR_OWVAR 43
4036: PUSH
4037: LD_INT 10
4039: ST_TO_ADDR
// bc_type := b_warehouse ;
4040: LD_ADDR_OWVAR 42
4044: PUSH
4045: LD_INT 1
4047: ST_TO_ADDR
// end else
4048: GO 4066
// begin bc_level := 0 ;
4050: LD_ADDR_OWVAR 43
4054: PUSH
4055: LD_INT 0
4057: ST_TO_ADDR
// bc_type := b_depot ;
4058: LD_ADDR_OWVAR 42
4062: PUSH
4063: LD_INT 0
4065: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4066: LD_ADDR_VAR 0 4
4070: PUSH
4071: LD_EXP 14
4075: PUSH
4076: LD_VAR 0 8
4080: ARRAY
4081: PUSH
4082: LD_INT 1
4084: ARRAY
4085: PPUSH
4086: LD_EXP 14
4090: PUSH
4091: LD_VAR 0 8
4095: ARRAY
4096: PUSH
4097: LD_INT 2
4099: ARRAY
4100: PPUSH
4101: LD_EXP 14
4105: PUSH
4106: LD_VAR 0 8
4110: ARRAY
4111: PUSH
4112: LD_INT 3
4114: ARRAY
4115: PPUSH
4116: CALL_OW 47
4120: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4121: LD_VAR 0 4
4125: PPUSH
4126: LD_STRING @
4128: PUSH
4129: LD_VAR 0 7
4133: STR
4134: PPUSH
4135: CALL_OW 500
// if Count ( mpStartingResources ) then
4139: LD_EXP 15
4143: PPUSH
4144: CALL 13582 0 1
4148: IFFALSE 4202
// begin for j := 1 to mpStartingResources do
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: DOUBLE
4156: LD_INT 1
4158: DEC
4159: ST_TO_ADDR
4160: LD_EXP 15
4164: PUSH
4165: FOR_TO
4166: IFFALSE 4200
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4168: LD_VAR 0 4
4172: PPUSH
4173: CALL_OW 274
4177: PPUSH
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_EXP 15
4187: PUSH
4188: LD_VAR 0 3
4192: ARRAY
4193: PPUSH
4194: CALL_OW 277
4198: GO 4165
4200: POP
4201: POP
// end ; end else
4202: GO 4411
// if Count ( mpStartingResources ) then
4204: LD_EXP 15
4208: PPUSH
4209: CALL 13582 0 1
4213: IFFALSE 4411
// begin x := mpStartPos [ pos ] [ 1 ] ;
4215: LD_ADDR_VAR 0 5
4219: PUSH
4220: LD_EXP 21
4224: PUSH
4225: LD_VAR 0 8
4229: ARRAY
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4235: LD_ADDR_VAR 0 6
4239: PUSH
4240: LD_EXP 21
4244: PUSH
4245: LD_VAR 0 8
4249: ARRAY
4250: PUSH
4251: LD_INT 2
4253: ARRAY
4254: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4255: LD_ADDR_VAR 0 3
4259: PUSH
4260: DOUBLE
4261: LD_INT 1
4263: DEC
4264: ST_TO_ADDR
4265: LD_EXP 15
4269: PUSH
4270: FOR_TO
4271: IFFALSE 4409
// begin resources := mpStartingResources [ j ] ;
4273: LD_ADDR_VAR 0 13
4277: PUSH
4278: LD_EXP 15
4282: PUSH
4283: LD_VAR 0 3
4287: ARRAY
4288: ST_TO_ADDR
// if resources = 0 then
4289: LD_VAR 0 13
4293: PUSH
4294: LD_INT 0
4296: EQUAL
4297: IFFALSE 4301
// continue ;
4299: GO 4270
// repeat if resources >= 50 then
4301: LD_VAR 0 13
4305: PUSH
4306: LD_INT 50
4308: GREATEREQUAL
4309: IFFALSE 4355
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 5
4318: PPUSH
4319: LD_VAR 0 5
4323: PPUSH
4324: LD_VAR 0 6
4328: PPUSH
4329: LD_INT 6
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 60
// resources := resources - 50 ;
4339: LD_ADDR_VAR 0 13
4343: PUSH
4344: LD_VAR 0 13
4348: PUSH
4349: LD_INT 50
4351: MINUS
4352: ST_TO_ADDR
// end else
4353: GO 4397
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_VAR 0 13
4364: PUSH
4365: LD_INT 10
4367: DIV
4368: PPUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: LD_VAR 0 6
4378: PPUSH
4379: LD_INT 6
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: CALL_OW 60
// resources := 0 ;
4389: LD_ADDR_VAR 0 13
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// end ; until resources <= 0 ;
4397: LD_VAR 0 13
4401: PUSH
4402: LD_INT 0
4404: LESSEQUAL
4405: IFFALSE 4301
// end ;
4407: GO 4270
4409: POP
4410: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
4411: LD_EXP 17
4415: PPUSH
4416: CALL 13582 0 1
4420: IFFALSE 4440
4422: PUSH
4423: LD_EXP 3
4427: PUSH
4428: LD_INT 2
4430: PUSH
4431: LD_INT 8
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: IN
4438: NOT
4439: AND
4440: IFFALSE 4518
// begin for j in mpBuildings [ pos ] do
4442: LD_ADDR_VAR 0 3
4446: PUSH
4447: LD_EXP 17
4451: PUSH
4452: LD_VAR 0 8
4456: ARRAY
4457: PUSH
4458: FOR_IN
4459: IFFALSE 4516
// begin bc_level := 0 ;
4461: LD_ADDR_OWVAR 43
4465: PUSH
4466: LD_INT 0
4468: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4469: LD_ADDR_OWVAR 42
4473: PUSH
4474: LD_VAR 0 3
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4483: LD_VAR 0 3
4487: PUSH
4488: LD_INT 2
4490: ARRAY
4491: PPUSH
4492: LD_VAR 0 3
4496: PUSH
4497: LD_INT 3
4499: ARRAY
4500: PPUSH
4501: LD_VAR 0 3
4505: PUSH
4506: LD_INT 4
4508: ARRAY
4509: PPUSH
4510: CALL_OW 47
// end ;
4514: GO 4458
4516: POP
4517: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4518: LD_EXP 26
4522: IFFALSE 4542
4524: PUSH
4525: LD_INT 20
4527: PPUSH
4528: LD_VAR 0 7
4532: PPUSH
4533: CALL_OW 321
4537: PUSH
4538: LD_INT 1
4540: EQUAL
4541: AND
4542: IFFALSE 4559
// SetTech ( tech_SibDet , side , state_researched ) ;
4544: LD_INT 20
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: LD_INT 2
4554: PPUSH
4555: CALL_OW 322
// if not mpArtifacts then
4559: LD_EXP 45
4563: NOT
4564: IFFALSE 4581
// SetTech ( tech_artifact , side , state_disabled ) ;
4566: LD_INT 24
4568: PPUSH
4569: LD_VAR 0 7
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 322
// if mpSibBomb = 1 then
4581: LD_EXP 28
4585: PUSH
4586: LD_INT 1
4588: EQUAL
4589: IFFALSE 4608
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4591: LD_INT 25
4593: PPUSH
4594: LD_VAR 0 7
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL_OW 322
// end else
4606: GO 4623
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4608: LD_INT 25
4610: PPUSH
4611: LD_VAR 0 7
4615: PPUSH
4616: LD_INT 0
4618: PPUSH
4619: CALL_OW 322
// end ; if mpVehicles then
4623: LD_EXP 36
4627: IFFALSE 4726
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: LD_VAR 0 7
4638: PPUSH
4639: LD_VAR 0 9
4643: PPUSH
4644: LD_EXP 36
4648: PPUSH
4649: CALL 5985 0 3
4653: PUSH
4654: FOR_IN
4655: IFFALSE 4724
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4657: LD_VAR 0 3
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 5
4667: PPUSH
4668: CALL_OW 12
4672: PPUSH
4673: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_EXP 21
4686: PUSH
4687: LD_VAR 0 8
4691: ARRAY
4692: PUSH
4693: LD_INT 1
4695: ARRAY
4696: PPUSH
4697: LD_EXP 21
4701: PUSH
4702: LD_VAR 0 8
4706: ARRAY
4707: PUSH
4708: LD_INT 2
4710: ARRAY
4711: PPUSH
4712: LD_INT 12
4714: PPUSH
4715: LD_INT 0
4717: PPUSH
4718: CALL_OW 50
// end ;
4722: GO 4654
4724: POP
4725: POP
// end ; uc_nation := nation ;
4726: LD_ADDR_OWVAR 21
4730: PUSH
4731: LD_VAR 0 9
4735: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4736: LD_EXP 3
4740: PUSH
4741: LD_INT 6
4743: PUSH
4744: LD_INT 7
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: IN
4751: IFFALSE 4776
4753: PUSH
4754: LD_EXP 7
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PUSH
4765: LD_INT 1
4767: PUSH
4768: LD_INT 2
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: IN
4775: AND
4776: IFFALSE 4824
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4778: LD_ADDR_VAR 0 11
4782: PUSH
4783: LD_VAR 0 7
4787: PPUSH
4788: LD_VAR 0 9
4792: PPUSH
4793: LD_EXP 24
4797: PUSH
4798: LD_EXP 24
4802: PUSH
4803: LD_INT 2
4805: DIV
4806: PLUS
4807: PPUSH
4808: LD_EXP 25
4812: PUSH
4813: LD_INT 1
4815: PLUS
4816: PPUSH
4817: CALL 5440 0 4
4821: ST_TO_ADDR
4822: GO 4854
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4824: LD_ADDR_VAR 0 11
4828: PUSH
4829: LD_VAR 0 7
4833: PPUSH
4834: LD_VAR 0 9
4838: PPUSH
4839: LD_EXP 24
4843: PPUSH
4844: LD_EXP 25
4848: PPUSH
4849: CALL 5440 0 4
4853: ST_TO_ADDR
// for j in team do
4854: LD_ADDR_VAR 0 3
4858: PUSH
4859: LD_VAR 0 11
4863: PUSH
4864: FOR_IN
4865: IFFALSE 4914
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4867: LD_VAR 0 3
4871: PPUSH
4872: LD_EXP 21
4876: PUSH
4877: LD_VAR 0 8
4881: ARRAY
4882: PUSH
4883: LD_INT 1
4885: ARRAY
4886: PPUSH
4887: LD_EXP 21
4891: PUSH
4892: LD_VAR 0 8
4896: ARRAY
4897: PUSH
4898: LD_INT 2
4900: ARRAY
4901: PPUSH
4902: LD_INT 12
4904: PPUSH
4905: LD_INT 0
4907: PPUSH
4908: CALL_OW 50
4912: GO 4864
4914: POP
4915: POP
// if mpApemans then
4916: LD_EXP 30
4920: IFFALSE 5026
// begin for j := 1 to mpApemans do
4922: LD_ADDR_VAR 0 3
4926: PUSH
4927: DOUBLE
4928: LD_INT 1
4930: DEC
4931: ST_TO_ADDR
4932: LD_EXP 30
4936: PUSH
4937: FOR_TO
4938: IFFALSE 5024
// begin PrepareApeman ( - 5 ) ;
4940: LD_INT 5
4942: NEG
4943: PPUSH
4944: CALL 45685 0 1
// ape := CreateHuman ;
4948: LD_ADDR_VAR 0 10
4952: PUSH
4953: CALL_OW 44
4957: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4958: LD_ADDR_EXP 32
4962: PUSH
4963: LD_EXP 32
4967: PPUSH
4968: LD_VAR 0 8
4972: PPUSH
4973: LD_EXP 32
4977: PUSH
4978: LD_VAR 0 8
4982: ARRAY
4983: PPUSH
4984: LD_VAR 0 10
4988: PPUSH
4989: CALL 49558 0 2
4993: PPUSH
4994: CALL_OW 1
4998: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4999: LD_VAR 0 10
5003: PPUSH
5004: LD_EXP 31
5008: PUSH
5009: LD_VAR 0 8
5013: ARRAY
5014: PPUSH
5015: LD_INT 0
5017: PPUSH
5018: CALL_OW 49
// end ;
5022: GO 4937
5024: POP
5025: POP
// end ; end ;
5026: GO 3568
5028: POP
5029: POP
// if not mpTeamGame then
5030: LD_EXP 11
5034: NOT
5035: IFFALSE 5133
// begin for i := 1 to 8 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 8
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5129
// for j := 1 to 8 do
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: DOUBLE
5059: LD_INT 1
5061: DEC
5062: ST_TO_ADDR
5063: LD_INT 8
5065: PUSH
5066: FOR_TO
5067: IFFALSE 5125
// if i <> j then
5069: LD_VAR 0 2
5073: PUSH
5074: LD_VAR 0 3
5078: NONEQUAL
5079: IFFALSE 5103
// SetAttitude ( i , j , att_neutral , true ) else
5081: LD_VAR 0 2
5085: PPUSH
5086: LD_VAR 0 3
5090: PPUSH
5091: LD_INT 0
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: CALL_OW 80
5101: GO 5123
// SetAttitude ( i , j , att_friend , true ) ;
5103: LD_VAR 0 2
5107: PPUSH
5108: LD_VAR 0 3
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: LD_INT 1
5118: PPUSH
5119: CALL_OW 80
5123: GO 5066
5125: POP
5126: POP
5127: GO 5050
5129: POP
5130: POP
// end else
5131: GO 5308
// begin if mpSharedVision then
5133: LD_EXP 16
5137: IFFALSE 5202
// begin for i in mpTeams do
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_EXP 10
5148: PUSH
5149: FOR_IN
5150: IFFALSE 5200
// for j := 2 to i do
5152: LD_ADDR_VAR 0 3
5156: PUSH
5157: DOUBLE
5158: LD_INT 2
5160: DEC
5161: ST_TO_ADDR
5162: LD_VAR 0 2
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5196
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5170: LD_VAR 0 2
5174: PUSH
5175: LD_VAR 0 3
5179: ARRAY
5180: PPUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 1
5188: ARRAY
5189: PPUSH
5190: CALL_OW 343
5194: GO 5167
5196: POP
5197: POP
5198: GO 5149
5200: POP
5201: POP
// end ; for i := 1 to 8 do
5202: LD_ADDR_VAR 0 2
5206: PUSH
5207: DOUBLE
5208: LD_INT 1
5210: DEC
5211: ST_TO_ADDR
5212: LD_INT 8
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5306
// for j := 1 to 8 do
5218: LD_ADDR_VAR 0 3
5222: PUSH
5223: DOUBLE
5224: LD_INT 1
5226: DEC
5227: ST_TO_ADDR
5228: LD_INT 8
5230: PUSH
5231: FOR_TO
5232: IFFALSE 5302
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5234: LD_EXP 8
5238: PUSH
5239: LD_VAR 0 2
5243: ARRAY
5244: PUSH
5245: LD_EXP 8
5249: PUSH
5250: LD_VAR 0 3
5254: ARRAY
5255: EQUAL
5256: IFFALSE 5280
// SetAttitude ( i , j , att_friend , true ) else
5258: LD_VAR 0 2
5262: PPUSH
5263: LD_VAR 0 3
5267: PPUSH
5268: LD_INT 1
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 80
5278: GO 5300
// SetAttitude ( i , j , att_enemy , true ) ;
5280: LD_VAR 0 2
5284: PPUSH
5285: LD_VAR 0 3
5289: PPUSH
5290: LD_INT 2
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: CALL_OW 80
5300: GO 5231
5302: POP
5303: POP
5304: GO 5215
5306: POP
5307: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5308: LD_ADDR_OWVAR 71
5312: PUSH
5313: LD_EXP 9
5317: PUSH
5318: LD_OWVAR 2
5322: ARRAY
5323: ST_TO_ADDR
// if IAmSpec then
5324: CALL_OW 531
5328: IFFALSE 5369
// begin FogOff ( true ) ;
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5337: LD_EXP 29
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: PUSH
5346: LD_INT 2
5348: DIV
5349: PPUSH
5350: LD_EXP 29
5354: PUSH
5355: LD_INT 2
5357: ARRAY
5358: PUSH
5359: LD_INT 2
5361: DIV
5362: PPUSH
5363: CALL_OW 86
// end else
5367: GO 5415
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5369: LD_EXP 21
5373: PUSH
5374: LD_EXP 7
5378: PUSH
5379: LD_OWVAR 2
5383: ARRAY
5384: ARRAY
5385: PUSH
5386: LD_INT 1
5388: ARRAY
5389: PPUSH
5390: LD_EXP 21
5394: PUSH
5395: LD_EXP 7
5399: PUSH
5400: LD_OWVAR 2
5404: ARRAY
5405: ARRAY
5406: PUSH
5407: LD_INT 2
5409: ARRAY
5410: PPUSH
5411: CALL_OW 86
// end ; BeginBuildUp ;
5415: CALL 6518 0 0
// enable ( mpActive ) ;
5419: LD_INT 100
5421: ENABLE_MARKED
// enable ( mpGameType ) ;
5422: LD_EXP 3
5426: ENABLE_MARKED
// mpGameActive := true ;
5427: LD_ADDR_EXP 39
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// end ;
5435: LD_VAR 0 1
5439: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5440: LD_INT 0
5442: PPUSH
5443: PPUSH
5444: PPUSH
5445: PPUSH
5446: PPUSH
// result := [ ] ;
5447: LD_ADDR_VAR 0 5
5451: PUSH
5452: EMPTY
5453: ST_TO_ADDR
// class := class_soldier ;
5454: LD_ADDR_VAR 0 8
5458: PUSH
5459: LD_INT 1
5461: ST_TO_ADDR
// uc_side := side ;
5462: LD_ADDR_OWVAR 20
5466: PUSH
5467: LD_VAR 0 1
5471: ST_TO_ADDR
// uc_nation := nation ;
5472: LD_ADDR_OWVAR 21
5476: PUSH
5477: LD_VAR 0 2
5481: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5482: LD_ADDR_OWVAR 26
5486: PUSH
5487: LD_OWVAR 19
5491: PUSH
5492: LD_VAR 0 1
5496: ARRAY
5497: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5498: LD_INT 1
5500: PPUSH
5501: LD_INT 2
5503: PPUSH
5504: CALL_OW 12
5508: PPUSH
5509: LD_VAR 0 8
5513: PPUSH
5514: LD_VAR 0 4
5518: PUSH
5519: LD_INT 2
5521: PLUS
5522: PPUSH
5523: CALL_OW 380
// hc_importance := 105 ;
5527: LD_ADDR_OWVAR 32
5531: PUSH
5532: LD_INT 105
5534: ST_TO_ADDR
// if Multiplayer then
5535: LD_OWVAR 4
5539: IFFALSE 5579
// begin hc_gallery := MULTIAVATARS ;
5541: LD_ADDR_OWVAR 33
5545: PUSH
5546: LD_STRING MULTIAVATARS
5548: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5549: LD_ADDR_OWVAR 34
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 525
5563: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5564: LD_ADDR_OWVAR 27
5568: PUSH
5569: LD_VAR 0 1
5573: PPUSH
5574: CALL_OW 526
5578: ST_TO_ADDR
// end ; commander := CreateHuman ;
5579: LD_ADDR_VAR 0 9
5583: PUSH
5584: CALL_OW 44
5588: ST_TO_ADDR
// result := Join ( result , commander ) ;
5589: LD_ADDR_VAR 0 5
5593: PUSH
5594: LD_VAR 0 5
5598: PPUSH
5599: LD_VAR 0 9
5603: PPUSH
5604: CALL 49558 0 2
5608: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5609: LD_ADDR_EXP 41
5613: PUSH
5614: LD_EXP 41
5618: PPUSH
5619: LD_VAR 0 1
5623: PPUSH
5624: LD_VAR 0 9
5628: PPUSH
5629: CALL_OW 1
5633: ST_TO_ADDR
// if mpTeamPreset then
5634: LD_LOC 1
5638: IFFALSE 5734
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5640: LD_LOC 1
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 5
5653: PUSH
5654: LD_VAR 0 5
5658: ARRAY
5659: PPUSH
5660: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5664: LD_VAR 0 5
5668: PUSH
5669: LD_VAR 0 5
5673: ARRAY
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_LOC 1
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: CALL_OW 260
5694: PPUSH
5695: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5699: LD_VAR 0 5
5703: PUSH
5704: LD_VAR 0 5
5708: ARRAY
5709: PPUSH
5710: LD_INT 2
5712: PPUSH
5713: LD_LOC 1
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: PPUSH
5722: LD_INT 2
5724: PPUSH
5725: CALL_OW 260
5729: PPUSH
5730: CALL_OW 239
// end ; InitHc_All ( ) ;
5734: CALL_OW 584
// class := 2 ;
5738: LD_ADDR_VAR 0 8
5742: PUSH
5743: LD_INT 2
5745: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5746: LD_ADDR_VAR 0 6
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_VAR 0 3
5760: PUSH
5761: LD_INT 1
5763: MINUS
5764: PUSH
5765: FOR_TO
5766: IFFALSE 5961
// begin PrepareHuman ( false , class , skill ) ;
5768: LD_INT 0
5770: PPUSH
5771: LD_VAR 0 8
5775: PPUSH
5776: LD_VAR 0 4
5780: PPUSH
5781: CALL_OW 380
// un := CreateHuman ;
5785: LD_ADDR_VAR 0 7
5789: PUSH
5790: CALL_OW 44
5794: ST_TO_ADDR
// result := Join ( result , un ) ;
5795: LD_ADDR_VAR 0 5
5799: PUSH
5800: LD_VAR 0 5
5804: PPUSH
5805: LD_VAR 0 7
5809: PPUSH
5810: CALL 49558 0 2
5814: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5815: LD_LOC 1
5819: PPUSH
5820: CALL 13582 0 1
5824: PUSH
5825: LD_VAR 0 3
5829: GREATEREQUAL
5830: IFFALSE 5926
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5832: LD_LOC 1
5836: PUSH
5837: LD_VAR 0 6
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: ARRAY
5846: PPUSH
5847: LD_VAR 0 7
5851: PPUSH
5852: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5856: LD_VAR 0 7
5860: PPUSH
5861: LD_INT 1
5863: PPUSH
5864: LD_LOC 1
5868: PUSH
5869: LD_VAR 0 6
5873: PUSH
5874: LD_INT 1
5876: PLUS
5877: ARRAY
5878: PPUSH
5879: LD_INT 1
5881: PPUSH
5882: CALL_OW 260
5886: PPUSH
5887: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5891: LD_VAR 0 7
5895: PPUSH
5896: LD_INT 2
5898: PPUSH
5899: LD_LOC 1
5903: PUSH
5904: LD_VAR 0 6
5908: PUSH
5909: LD_INT 1
5911: PLUS
5912: ARRAY
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: CALL_OW 260
5921: PPUSH
5922: CALL_OW 239
// end ; class := Inc ( class ) ;
5926: LD_ADDR_VAR 0 8
5930: PUSH
5931: LD_VAR 0 8
5935: PPUSH
5936: CALL 50931 0 1
5940: ST_TO_ADDR
// if class = 5 then
5941: LD_VAR 0 8
5945: PUSH
5946: LD_INT 5
5948: EQUAL
5949: IFFALSE 5959
// class := 1 ;
5951: LD_ADDR_VAR 0 8
5955: PUSH
5956: LD_INT 1
5958: ST_TO_ADDR
// end ;
5959: GO 5765
5961: POP
5962: POP
// if not mpTeamPreset then
5963: LD_LOC 1
5967: NOT
5968: IFFALSE 5980
// mpTeamPreset := result ;
5970: LD_ADDR_LOC 1
5974: PUSH
5975: LD_VAR 0 5
5979: ST_TO_ADDR
// end ;
5980: LD_VAR 0 5
5984: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5985: LD_INT 0
5987: PPUSH
5988: PPUSH
// result := [ ] ;
5989: LD_ADDR_VAR 0 4
5993: PUSH
5994: EMPTY
5995: ST_TO_ADDR
// if not vehicles then
5996: LD_VAR 0 3
6000: NOT
6001: IFFALSE 6005
// exit ;
6003: GO 6219
// for i := 1 to vehicles [ nation ] do
6005: LD_ADDR_VAR 0 5
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_VAR 0 3
6019: PUSH
6020: LD_VAR 0 2
6024: ARRAY
6025: PUSH
6026: FOR_TO
6027: IFFALSE 6217
// begin uc_side := side ;
6029: LD_ADDR_OWVAR 20
6033: PUSH
6034: LD_VAR 0 1
6038: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6039: LD_VAR 0 3
6043: PUSH
6044: LD_VAR 0 2
6048: ARRAY
6049: PUSH
6050: LD_VAR 0 5
6054: ARRAY
6055: PPUSH
6056: CALL 13582 0 1
6060: PUSH
6061: LD_INT 4
6063: GREATER
6064: IFFALSE 6094
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6066: LD_ADDR_OWVAR 21
6070: PUSH
6071: LD_VAR 0 3
6075: PUSH
6076: LD_VAR 0 2
6080: ARRAY
6081: PUSH
6082: LD_VAR 0 5
6086: ARRAY
6087: PUSH
6088: LD_INT 5
6090: ARRAY
6091: ST_TO_ADDR
6092: GO 6104
// uc_nation := nation ;
6094: LD_ADDR_OWVAR 21
6098: PUSH
6099: LD_VAR 0 2
6103: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6104: LD_VAR 0 3
6108: PUSH
6109: LD_VAR 0 2
6113: ARRAY
6114: PUSH
6115: LD_VAR 0 5
6119: ARRAY
6120: PUSH
6121: LD_INT 1
6123: ARRAY
6124: PPUSH
6125: LD_VAR 0 3
6129: PUSH
6130: LD_VAR 0 2
6134: ARRAY
6135: PUSH
6136: LD_VAR 0 5
6140: ARRAY
6141: PUSH
6142: LD_INT 2
6144: ARRAY
6145: PPUSH
6146: LD_VAR 0 3
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PUSH
6157: LD_VAR 0 5
6161: ARRAY
6162: PUSH
6163: LD_INT 3
6165: ARRAY
6166: PPUSH
6167: LD_VAR 0 3
6171: PUSH
6172: LD_VAR 0 2
6176: ARRAY
6177: PUSH
6178: LD_VAR 0 5
6182: ARRAY
6183: PUSH
6184: LD_INT 4
6186: ARRAY
6187: PPUSH
6188: LD_INT 80
6190: PPUSH
6191: CALL 16378 0 5
// result := Join ( result , CreateVehicle ) ;
6195: LD_ADDR_VAR 0 4
6199: PUSH
6200: LD_VAR 0 4
6204: PPUSH
6205: CALL_OW 45
6209: PPUSH
6210: CALL 49558 0 2
6214: ST_TO_ADDR
// end ;
6215: GO 6026
6217: POP
6218: POP
// end ;
6219: LD_VAR 0 4
6223: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// for i in mpBattleFlags do
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_EXP 23
6237: PUSH
6238: FOR_IN
6239: IFFALSE 6316
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6241: LD_VAR 0 3
6245: PPUSH
6246: LD_INT 1
6248: PUSH
6249: LD_VAR 0 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 2
6260: PUSH
6261: LD_VAR 0 1
6265: PUSH
6266: LD_REAL  7.00000000000000E-0001
6269: MUL
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: LD_VAR 0 1
6282: PUSH
6283: LD_REAL  4.00000000000000E-0001
6286: MUL
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 20
6294: PUSH
6295: LD_VAR 0 1
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 423
6314: GO 6238
6316: POP
6317: POP
// end ;
6318: LD_VAR 0 2
6322: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6323: LD_INT 100
6325: IFFALSE 6420
6327: GO 6329
6329: DISABLE
6330: LD_INT 0
6332: PPUSH
6333: PPUSH
// begin if mpBattleFlag <= 0 then
6334: LD_EXP 22
6338: PUSH
6339: LD_INT 0
6341: LESSEQUAL
6342: IFFALSE 6346
// exit ;
6344: GO 6420
// strength := 100 ;
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: LD_INT 100
6353: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6354: LD_EXP 22
6358: PPUSH
6359: CALL_OW 67
// strength := Dec ( strength ) ;
6363: LD_ADDR_VAR 0 2
6367: PUSH
6368: LD_VAR 0 2
6372: PPUSH
6373: CALL 50953 0 1
6377: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL 6224 0 1
// until not strength ;
6387: LD_VAR 0 2
6391: NOT
6392: IFFALSE 6354
// for i in mpBattleFlags do
6394: LD_ADDR_VAR 0 1
6398: PUSH
6399: LD_EXP 23
6403: PUSH
6404: FOR_IN
6405: IFFALSE 6418
// KillBattleFlag ( i ) ;
6407: LD_VAR 0 1
6411: PPUSH
6412: CALL_OW 419
6416: GO 6404
6418: POP
6419: POP
// end ;
6420: PPOPN 2
6422: END
// every 0 0$1 marked mpActive do var side , tmp ;
6423: GO 6425
6425: DISABLE
6426: LD_INT 0
6428: PPUSH
6429: PPUSH
// begin if mpSibBomb <= 1 then
6430: LD_EXP 28
6434: PUSH
6435: LD_INT 1
6437: LESSEQUAL
6438: IFFALSE 6442
// exit ;
6440: GO 6515
// tmp := mpSibBomb ;
6442: LD_ADDR_VAR 0 2
6446: PUSH
6447: LD_EXP 28
6451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6452: LD_INT 35
6454: PPUSH
6455: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6459: LD_ADDR_VAR 0 2
6463: PUSH
6464: LD_VAR 0 2
6468: PUSH
6469: LD_INT 35
6471: MINUS
6472: ST_TO_ADDR
// until not tmp ;
6473: LD_VAR 0 2
6477: NOT
6478: IFFALSE 6452
// for side := 1 to 8 do
6480: LD_ADDR_VAR 0 1
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_INT 8
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6513
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6496: LD_INT 25
6498: PPUSH
6499: LD_VAR 0 1
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: CALL_OW 322
6511: GO 6493
6513: POP
6514: POP
// end ;
6515: PPOPN 2
6517: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
6522: PPUSH
// mpBuildUpTimeDelay := 0 ;
6523: LD_ADDR_EXP 48
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// if not mpBuildUpTime then
6531: LD_EXP 20
6535: NOT
6536: IFFALSE 6540
// exit ;
6538: GO 6729
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6540: LD_ADDR_EXP 48
6544: PUSH
6545: LD_INT 8400
6547: PUSH
6548: LD_INT 2100
6550: PUSH
6551: LD_EXP 20
6555: MUL
6556: PLUS
6557: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6558: LD_ADDR_EXP 49
6562: PUSH
6563: LD_INT 1
6565: ST_TO_ADDR
// for i := 1 to 8 do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 8
6578: PUSH
6579: FOR_TO
6580: IFFALSE 6727
// if mpSidePositions [ i ] then
6582: LD_EXP 7
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: IFFALSE 6725
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6594: LD_EXP 19
6598: PUSH
6599: LD_EXP 7
6603: PUSH
6604: LD_VAR 0 2
6608: ARRAY
6609: ARRAY
6610: PPUSH
6611: LD_INT 5
6613: PPUSH
6614: CALL_OW 424
// for j := 1 to 8 do
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_INT 8
6630: PUSH
6631: FOR_TO
6632: IFFALSE 6723
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6634: LD_EXP 7
6638: PUSH
6639: LD_VAR 0 3
6643: ARRAY
6644: IFFALSE 6693
6646: PUSH
6647: LD_EXP 8
6651: PUSH
6652: LD_VAR 0 2
6656: ARRAY
6657: PUSH
6658: LD_EXP 8
6662: PUSH
6663: LD_VAR 0 3
6667: ARRAY
6668: NONEQUAL
6669: IFTRUE 6692
6671: PUSH
6672: LD_EXP 11
6676: NOT
6677: IFFALSE 6691
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_VAR 0 3
6689: NONEQUAL
6690: AND
6691: OR
6692: AND
6693: IFFALSE 6721
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_EXP 19
6704: PUSH
6705: LD_EXP 7
6709: PUSH
6710: LD_VAR 0 2
6714: ARRAY
6715: ARRAY
6716: PPUSH
6717: CALL_OW 333
6721: GO 6631
6723: POP
6724: POP
// end ;
6725: GO 6579
6727: POP
6728: POP
// end ;
6729: LD_VAR 0 1
6733: RET
// function EndBuildUp ; var i , j ; begin
6734: LD_INT 0
6736: PPUSH
6737: PPUSH
6738: PPUSH
// mpBuildUpTimeActive := false ;
6739: LD_ADDR_EXP 49
6743: PUSH
6744: LD_INT 0
6746: ST_TO_ADDR
// for i := 1 to 8 do
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: DOUBLE
6753: LD_INT 1
6755: DEC
6756: ST_TO_ADDR
6757: LD_INT 8
6759: PUSH
6760: FOR_TO
6761: IFFALSE 6908
// if mpSidePositions [ i ] then
6763: LD_EXP 7
6767: PUSH
6768: LD_VAR 0 2
6772: ARRAY
6773: IFFALSE 6906
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6775: LD_EXP 19
6779: PUSH
6780: LD_EXP 7
6784: PUSH
6785: LD_VAR 0 2
6789: ARRAY
6790: ARRAY
6791: PPUSH
6792: LD_INT 0
6794: PPUSH
6795: CALL_OW 424
// for j := 1 to 8 do
6799: LD_ADDR_VAR 0 3
6803: PUSH
6804: DOUBLE
6805: LD_INT 1
6807: DEC
6808: ST_TO_ADDR
6809: LD_INT 8
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6904
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6815: LD_EXP 7
6819: PUSH
6820: LD_VAR 0 3
6824: ARRAY
6825: IFFALSE 6874
6827: PUSH
6828: LD_EXP 8
6832: PUSH
6833: LD_VAR 0 2
6837: ARRAY
6838: PUSH
6839: LD_EXP 8
6843: PUSH
6844: LD_VAR 0 3
6848: ARRAY
6849: NONEQUAL
6850: IFTRUE 6873
6852: PUSH
6853: LD_EXP 11
6857: NOT
6858: IFFALSE 6872
6860: PUSH
6861: LD_VAR 0 2
6865: PUSH
6866: LD_VAR 0 3
6870: NONEQUAL
6871: AND
6872: OR
6873: AND
6874: IFFALSE 6902
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6876: LD_VAR 0 3
6880: PPUSH
6881: LD_EXP 19
6885: PUSH
6886: LD_EXP 7
6890: PUSH
6891: LD_VAR 0 2
6895: ARRAY
6896: ARRAY
6897: PPUSH
6898: CALL_OW 334
6902: GO 6812
6904: POP
6905: POP
// end ;
6906: GO 6760
6908: POP
6909: POP
// end ;
6910: LD_VAR 0 1
6914: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6915: LD_EXP 49
6919: IFFALSE 7098
6921: GO 6923
6923: DISABLE
6924: LD_INT 0
6926: PPUSH
6927: PPUSH
// begin for i := 1 to 8 do
6928: LD_ADDR_VAR 0 1
6932: PUSH
6933: DOUBLE
6934: LD_INT 1
6936: DEC
6937: ST_TO_ADDR
6938: LD_INT 8
6940: PUSH
6941: FOR_TO
6942: IFFALSE 7095
// if mpSidePositions [ i ] then
6944: LD_EXP 7
6948: PUSH
6949: LD_VAR 0 1
6953: ARRAY
6954: IFFALSE 7093
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6956: LD_ADDR_VAR 0 2
6960: PUSH
6961: LD_EXP 19
6965: PUSH
6966: LD_EXP 7
6970: PUSH
6971: LD_VAR 0 1
6975: ARRAY
6976: ARRAY
6977: PPUSH
6978: LD_INT 2
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 21
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 22
7008: PUSH
7009: LD_OWVAR 2
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 70
7026: PUSH
7027: FOR_IN
7028: IFFALSE 7091
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7030: LD_EXP 8
7034: PUSH
7035: LD_VAR 0 1
7039: ARRAY
7040: PUSH
7041: LD_EXP 8
7045: PUSH
7046: LD_OWVAR 2
7050: ARRAY
7051: NONEQUAL
7052: IFTRUE 7075
7054: PUSH
7055: LD_EXP 11
7059: NOT
7060: IFFALSE 7074
7062: PUSH
7063: LD_VAR 0 1
7067: PUSH
7068: LD_OWVAR 2
7072: NONEQUAL
7073: AND
7074: OR
7075: IFFALSE 7089
// ComMoveToArea ( un , BuildUpEscape ) ;
7077: LD_VAR 0 2
7081: PPUSH
7082: LD_INT 15
7084: PPUSH
7085: CALL_OW 113
7089: GO 7027
7091: POP
7092: POP
7093: GO 6941
7095: POP
7096: POP
// enable ;
7097: ENABLE
// end ;
7098: PPOPN 2
7100: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7101: LD_EXP 20
7105: IFFALSE 7155
7107: GO 7109
7109: DISABLE
7110: LD_INT 0
7112: PPUSH
// begin tmp := mpBuildUpTime ;
7113: LD_ADDR_VAR 0 1
7117: PUSH
7118: LD_EXP 20
7122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7123: LD_INT 35
7125: PPUSH
7126: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7130: LD_ADDR_VAR 0 1
7134: PUSH
7135: LD_VAR 0 1
7139: PUSH
7140: LD_INT 35
7142: MINUS
7143: ST_TO_ADDR
// until not tmp ;
7144: LD_VAR 0 1
7148: NOT
7149: IFFALSE 7123
// EndBuildUp ;
7151: CALL 6734 0 0
// end ;
7155: PPOPN 1
7157: END
// every 0 0$1 trigger mpActive marked mpWin do
7158: LD_INT 100
7160: IFFALSE 7194
7162: GO 7164
7164: DISABLE
// begin if IAmServer then
7165: CALL_OW 518
7169: IFFALSE 7178
// wait ( 0 0$3 ) ;
7171: LD_INT 105
7173: PPUSH
7174: CALL_OW 67
// if Multiplayer then
7178: LD_OWVAR 4
7182: IFFALSE 7190
// YouWinInMultiplayer else
7184: CALL_OW 106
7188: GO 7194
// YouWin ;
7190: CALL_OW 103
// end ;
7194: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7195: LD_INT 0
7197: PPUSH
// result := false ;
7198: LD_ADDR_VAR 0 3
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7206: LD_VAR 0 1
7210: PUSH
7211: LD_INT 1
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7237
7217: LD_INT 5
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7237
7223: LD_INT 6
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7237
7229: LD_INT 7
7231: DOUBLE
7232: EQUAL
7233: IFTRUE 7237
7235: GO 7310
7237: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: LD_INT 22
7245: PUSH
7246: LD_VAR 0 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 2
7257: PUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 33
7270: PUSH
7271: LD_INT 3
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 33
7280: PUSH
7281: LD_INT 5
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PPUSH
7298: CALL_OW 69
7302: PPUSH
7303: CALL 13582 0 1
7307: ST_TO_ADDR
// end ; GameTypeSurvival :
7308: GO 7706
7310: LD_INT 2
7312: DOUBLE
7313: EQUAL
7314: IFTRUE 7318
7316: GO 7448
7318: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7319: LD_ADDR_VAR 0 3
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_VAR 0 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 2
7338: PUSH
7339: LD_INT 30
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 30
7351: PUSH
7352: LD_INT 1
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PPUSH
7368: CALL_OW 69
7372: PPUSH
7373: CALL 13582 0 1
7377: IFFALSE 7445
7379: PUSH
7380: LD_INT 22
7382: PUSH
7383: LD_VAR 0 2
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 2
7394: PUSH
7395: LD_INT 21
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 33
7407: PUSH
7408: LD_INT 3
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 33
7417: PUSH
7418: LD_INT 5
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PPUSH
7440: CALL 13582 0 1
7444: AND
7445: ST_TO_ADDR
// end ; GameTypeSurvivalH :
7446: GO 7706
7448: LD_INT 8
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7605
7456: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7457: LD_ADDR_VAR 0 3
7461: PUSH
7462: LD_EXP 41
7466: PUSH
7467: LD_VAR 0 2
7471: ARRAY
7472: PPUSH
7473: CALL_OW 300
7477: IFFALSE 7534
7479: PUSH
7480: LD_INT 22
7482: PUSH
7483: LD_VAR 0 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 2
7494: PUSH
7495: LD_INT 30
7497: PUSH
7498: LD_INT 0
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 30
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PPUSH
7524: CALL_OW 69
7528: PPUSH
7529: CALL 13582 0 1
7533: AND
7534: IFFALSE 7602
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_VAR 0 2
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 2
7551: PUSH
7552: LD_INT 21
7554: PUSH
7555: LD_INT 1
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 33
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 33
7574: PUSH
7575: LD_INT 5
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PPUSH
7592: CALL_OW 69
7596: PPUSH
7597: CALL 13582 0 1
7601: AND
7602: ST_TO_ADDR
// end ; GameTypeKing :
7603: GO 7706
7605: LD_INT 3
7607: DOUBLE
7608: EQUAL
7609: IFTRUE 7613
7611: GO 7705
7613: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7614: LD_ADDR_VAR 0 3
7618: PUSH
7619: LD_INT 22
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 33
7646: PUSH
7647: LD_INT 3
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 33
7656: PUSH
7657: LD_INT 5
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 69
7678: PPUSH
7679: CALL 13582 0 1
7683: IFFALSE 7702
7685: PUSH
7686: LD_VAR 0 2
7690: PPUSH
7691: CALL 62570 0 1
7695: PUSH
7696: LD_EXP 35
7700: LESS
7701: AND
7702: ST_TO_ADDR
// end ; end ;
7703: GO 7706
7705: POP
// end ;
7706: LD_VAR 0 3
7710: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7711: LD_INT 100
7713: IFFALSE 7943
7715: GO 7717
7717: DISABLE
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
// begin if Multiplayer then
7722: LD_OWVAR 4
7726: IFFALSE 7734
// SetPlayerSpectator ( ) else
7728: CALL_OW 572
7732: GO 7743
// FogOff ( your_side ) ;
7734: LD_OWVAR 2
7738: PPUSH
7739: CALL_OW 344
// repeat gameIsOn := false ;
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_INT 0
7750: ST_TO_ADDR
// for i := 1 to 8 do
7751: LD_ADDR_VAR 0 2
7755: PUSH
7756: DOUBLE
7757: LD_INT 1
7759: DEC
7760: ST_TO_ADDR
7761: LD_INT 8
7763: PUSH
7764: FOR_TO
7765: IFFALSE 7895
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7767: LD_EXP 7
7771: PUSH
7772: LD_VAR 0 2
7776: ARRAY
7777: IFFALSE 7790
7779: PUSH
7780: LD_VAR 0 2
7784: PPUSH
7785: CALL_OW 108
7789: AND
7790: IFFALSE 7804
7792: PUSH
7793: LD_VAR 0 2
7797: PUSH
7798: LD_OWVAR 2
7802: NONEQUAL
7803: AND
7804: IFFALSE 7893
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7806: LD_EXP 8
7810: PUSH
7811: LD_VAR 0 2
7815: ARRAY
7816: NOT
7817: IFTRUE 7865
7819: PUSH
7820: LD_EXP 8
7824: PUSH
7825: LD_VAR 0 2
7829: ARRAY
7830: PUSH
7831: LD_EXP 8
7835: PUSH
7836: LD_OWVAR 2
7840: ARRAY
7841: NONEQUAL
7842: IFFALSE 7864
7844: PUSH
7845: LD_OWVAR 2
7849: PPUSH
7850: LD_VAR 0 2
7854: PPUSH
7855: CALL_OW 81
7859: PUSH
7860: LD_INT 1
7862: NONEQUAL
7863: AND
7864: OR
7865: IFFALSE 7893
// if HasPowerByGameType ( mpGameType , i ) then
7867: LD_EXP 3
7871: PPUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: CALL 7195 0 2
7881: IFFALSE 7893
// begin gameIsOn := true ;
7883: LD_ADDR_VAR 0 1
7887: PUSH
7888: LD_INT 1
7890: ST_TO_ADDR
// break ;
7891: GO 7895
// end ;
7893: GO 7764
7895: POP
7896: POP
// wait ( 100 ) ;
7897: LD_INT 100
7899: PPUSH
7900: CALL_OW 67
// until not gameIsOn ;
7904: LD_VAR 0 1
7908: NOT
7909: IFFALSE 7743
// if IAmServer then
7911: CALL_OW 518
7915: IFFALSE 7924
// wait ( 0 0$3 ) ;
7917: LD_INT 105
7919: PPUSH
7920: CALL_OW 67
// if Multiplayer then
7924: LD_OWVAR 4
7928: IFFALSE 7936
// YouLostInMultiplayer else
7930: CALL_OW 107
7934: GO 7943
// YouLost (  ) ;
7936: LD_STRING 
7938: PPUSH
7939: CALL_OW 104
// end ;
7943: PPOPN 2
7945: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7946: LD_EXP 33
7950: IFFALSE 8334
7952: GO 7954
7954: DISABLE
7955: LD_INT 0
7957: PPUSH
7958: PPUSH
7959: PPUSH
7960: PPUSH
7961: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7962: LD_ADDR_VAR 0 5
7966: PUSH
7967: LD_INT 1
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: LD_INT 4
7978: PUSH
7979: LD_INT 5
7981: PUSH
7982: LD_INT 6
7984: PUSH
7985: LD_INT 7
7987: PUSH
7988: LD_INT 8
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8001: LD_INT 350
8003: PPUSH
8004: CALL_OW 67
// for i := 1 to 8 do
8008: LD_ADDR_VAR 0 1
8012: PUSH
8013: DOUBLE
8014: LD_INT 1
8016: DEC
8017: ST_TO_ADDR
8018: LD_INT 8
8020: PUSH
8021: FOR_TO
8022: IFFALSE 8304
// begin j := sides [ i ] ;
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_VAR 0 5
8033: PUSH
8034: LD_VAR 0 1
8038: ARRAY
8039: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8040: LD_EXP 40
8044: PUSH
8045: LD_VAR 0 2
8049: ARRAY
8050: PPUSH
8051: CALL 13582 0 1
8055: IFFALSE 8068
8057: PUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 108
8067: AND
8068: IFFALSE 8086
8070: PUSH
8071: LD_EXP 3
8075: PPUSH
8076: LD_VAR 0 2
8080: PPUSH
8081: CALL 7195 0 2
8085: AND
8086: IFFALSE 8302
// begin wait ( mpRespawn div 2 ) ;
8088: LD_EXP 33
8092: PUSH
8093: LD_INT 2
8095: DIV
8096: PPUSH
8097: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8101: LD_ADDR_VAR 0 3
8105: PUSH
8106: LD_INT 22
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 50
8120: PUSH
8121: EMPTY
8122: LIST
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 30
8129: PUSH
8130: LD_INT 0
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 30
8139: PUSH
8140: LD_INT 1
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: PPUSH
8157: CALL_OW 69
8161: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8162: LD_VAR 0 3
8166: NOT
8167: IFTRUE 8181
8169: PUSH
8170: LD_VAR 0 2
8174: PPUSH
8175: CALL_OW 108
8179: NOT
8180: OR
8181: IFTRUE 8200
8183: PUSH
8184: LD_EXP 3
8188: PPUSH
8189: LD_VAR 0 2
8193: PPUSH
8194: CALL 7195 0 2
8198: NOT
8199: OR
8200: IFFALSE 8204
// continue ;
8202: GO 8021
// spawn := tmp [ 1 ] ;
8204: LD_ADDR_VAR 0 4
8208: PUSH
8209: LD_VAR 0 3
8213: PUSH
8214: LD_INT 1
8216: ARRAY
8217: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8218: LD_EXP 40
8222: PUSH
8223: LD_VAR 0 2
8227: ARRAY
8228: PUSH
8229: LD_INT 1
8231: ARRAY
8232: PPUSH
8233: LD_VAR 0 4
8237: PPUSH
8238: CALL_OW 250
8242: PPUSH
8243: LD_VAR 0 4
8247: PPUSH
8248: CALL_OW 251
8252: PPUSH
8253: LD_INT 32
8255: PPUSH
8256: LD_INT 1
8258: PPUSH
8259: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8263: LD_ADDR_EXP 40
8267: PUSH
8268: LD_EXP 40
8272: PPUSH
8273: LD_VAR 0 2
8277: PPUSH
8278: LD_EXP 40
8282: PUSH
8283: LD_VAR 0 2
8287: ARRAY
8288: PPUSH
8289: LD_INT 1
8291: PPUSH
8292: CALL_OW 3
8296: PPUSH
8297: CALL_OW 1
8301: ST_TO_ADDR
// end ; end ;
8302: GO 8021
8304: POP
8305: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8306: LD_ADDR_VAR 0 5
8310: PUSH
8311: LD_VAR 0 5
8315: PPUSH
8316: LD_INT 1
8318: PPUSH
8319: LD_INT 8
8321: PPUSH
8322: LD_INT 1
8324: PPUSH
8325: CALL 15908 0 4
8329: ST_TO_ADDR
// until false ;
8330: LD_INT 0
8332: IFFALSE 8001
// end ;
8334: PPOPN 5
8336: END
// every 0 0$1 marked mpActive do
8337: GO 8339
8339: DISABLE
// begin enable ;
8340: ENABLE
// if not mpDisplayStrings then
8341: LD_EXP 38
8345: NOT
8346: IFFALSE 8357
// begin display_strings := [ ] ;
8348: LD_ADDR_OWVAR 47
8352: PUSH
8353: EMPTY
8354: ST_TO_ADDR
// exit ;
8355: GO 8367
// end ; display_strings := mpDisplayStrings ;
8357: LD_ADDR_OWVAR 47
8361: PUSH
8362: LD_EXP 38
8366: ST_TO_ADDR
// end ; end_of_file
8367: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8368: LD_INT 0
8370: PPUSH
8371: PPUSH
8372: PPUSH
8373: PPUSH
8374: PPUSH
8375: PPUSH
8376: PPUSH
8377: PPUSH
8378: PPUSH
// if GetType ( un ) = unit_vehicle then
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 247
8388: PUSH
8389: LD_INT 2
8391: EQUAL
8392: IFFALSE 8396
// exit ;
8394: GO 9169
// side := GetSide ( un ) ;
8396: LD_ADDR_VAR 0 9
8400: PUSH
8401: LD_VAR 0 1
8405: PPUSH
8406: CALL_OW 255
8410: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
8411: LD_EXP 3
8415: PUSH
8416: LD_INT 2
8418: PUSH
8419: LD_INT 8
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: IN
8426: IFFALSE 8520
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8428: LD_VAR 0 1
8432: PPUSH
8433: CALL_OW 266
8437: PUSH
8438: LD_INT 0
8440: PUSH
8441: LD_INT 1
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: IN
8448: IFFALSE 8520
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_VAR 0 9
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 2
8469: PUSH
8470: LD_INT 21
8472: PUSH
8473: LD_INT 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 33
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 69
8503: PUSH
8504: FOR_IN
8505: IFFALSE 8518
// KillUnit ( i ) ;
8507: LD_VAR 0 3
8511: PPUSH
8512: CALL_OW 66
8516: GO 8504
8518: POP
8519: POP
// end ; if mpGameType = GameTypeSurvivalH then
8520: LD_EXP 3
8524: PUSH
8525: LD_INT 8
8527: EQUAL
8528: IFFALSE 8612
// if un in mpCommanders then
8530: LD_VAR 0 1
8534: PUSH
8535: LD_EXP 41
8539: IN
8540: IFFALSE 8612
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_VAR 0 9
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 2
8561: PUSH
8562: LD_INT 21
8564: PUSH
8565: LD_INT 1
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 33
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 69
8595: PUSH
8596: FOR_IN
8597: IFFALSE 8610
// KillUnit ( i ) ;
8599: LD_VAR 0 3
8603: PPUSH
8604: CALL_OW 66
8608: GO 8596
8610: POP
8611: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8612: LD_VAR 0 1
8616: PPUSH
8617: CALL_OW 257
8621: PUSH
8622: LD_INT 12
8624: PUSH
8625: LD_INT 17
8627: PUSH
8628: LD_INT 15
8630: PUSH
8631: LD_INT 16
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: IN
8640: IFTRUE 8657
8642: PUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 263
8652: PUSH
8653: LD_INT 5
8655: EQUAL
8656: OR
8657: IFFALSE 8894
// begin tag := 0 ;
8659: LD_ADDR_VAR 0 5
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// for i := 1 to 8 do
8667: LD_ADDR_VAR 0 3
8671: PUSH
8672: DOUBLE
8673: LD_INT 1
8675: DEC
8676: ST_TO_ADDR
8677: LD_INT 8
8679: PUSH
8680: FOR_TO
8681: IFFALSE 8715
// if un in mpApePosIndex [ i ] then
8683: LD_VAR 0 1
8687: PUSH
8688: LD_EXP 32
8692: PUSH
8693: LD_VAR 0 3
8697: ARRAY
8698: IN
8699: IFFALSE 8713
// begin tag := i ;
8701: LD_ADDR_VAR 0 5
8705: PUSH
8706: LD_VAR 0 3
8710: ST_TO_ADDR
// break ;
8711: GO 8715
// end ;
8713: GO 8680
8715: POP
8716: POP
// if not tag then
8717: LD_VAR 0 5
8721: NOT
8722: IFFALSE 8726
// exit ;
8724: GO 9169
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8726: LD_ADDR_VAR 0 7
8730: PUSH
8731: LD_EXP 31
8735: PUSH
8736: LD_EXP 7
8740: PUSH
8741: LD_VAR 0 5
8745: ARRAY
8746: ARRAY
8747: ST_TO_ADDR
// if not area then
8748: LD_VAR 0 7
8752: NOT
8753: IFFALSE 8757
// exit ;
8755: GO 9169
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8757: LD_INT 14700
8759: PUSH
8760: LD_VAR 0 1
8764: PUSH
8765: LD_INT 5
8767: MOD
8768: PUSH
8769: LD_INT 1
8771: PLUS
8772: PUSH
8773: LD_INT 700
8775: MUL
8776: PLUS
8777: PPUSH
8778: CALL_OW 67
// repeat wait ( 10 ) ;
8782: LD_INT 10
8784: PPUSH
8785: CALL_OW 67
// until not mpBlockRespThread ;
8789: LD_EXP 47
8793: NOT
8794: IFFALSE 8782
// mpBlockRespThread := true ;
8796: LD_ADDR_EXP 47
8800: PUSH
8801: LD_INT 1
8803: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8804: LD_INT 0
8806: PPUSH
8807: CALL 45685 0 1
// ape := CreateHuman ;
8811: LD_ADDR_VAR 0 4
8815: PUSH
8816: CALL_OW 44
8820: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8821: LD_ADDR_EXP 32
8825: PUSH
8826: LD_EXP 32
8830: PPUSH
8831: LD_VAR 0 5
8835: PPUSH
8836: LD_EXP 32
8840: PUSH
8841: LD_VAR 0 5
8845: ARRAY
8846: PPUSH
8847: LD_VAR 0 4
8851: PPUSH
8852: CALL 49558 0 2
8856: PPUSH
8857: CALL_OW 1
8861: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8862: LD_VAR 0 4
8866: PPUSH
8867: LD_VAR 0 7
8871: PPUSH
8872: LD_INT 0
8874: PPUSH
8875: CALL_OW 49
// wait ( 10 ) ;
8879: LD_INT 10
8881: PPUSH
8882: CALL_OW 67
// mpBlockRespThread := false ;
8886: LD_ADDR_EXP 47
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8894: LD_VAR 0 1
8898: PPUSH
8899: CALL_OW 247
8903: PUSH
8904: LD_INT 1
8906: EQUAL
8907: IFFALSE 8924
8909: PUSH
8910: LD_VAR 0 1
8914: PPUSH
8915: CALL_OW 248
8919: PUSH
8920: LD_INT 0
8922: GREATER
8923: AND
8924: IFFALSE 9169
// begin if not mpRespawn then
8926: LD_EXP 33
8930: NOT
8931: IFFALSE 8935
// exit ;
8933: GO 9169
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8935: LD_VAR 0 9
8939: PPUSH
8940: CALL_OW 108
8944: NOT
8945: IFFALSE 8964
8947: PUSH
8948: LD_EXP 3
8952: PPUSH
8953: LD_VAR 0 9
8957: PPUSH
8958: CALL 7195 0 2
8962: NOT
8963: AND
8964: IFFALSE 8968
// exit ;
8966: GO 9169
// side := GetSide ( un ) ;
8968: LD_ADDR_VAR 0 9
8972: PUSH
8973: LD_VAR 0 1
8977: PPUSH
8978: CALL_OW 255
8982: ST_TO_ADDR
// nation := GetNation ( un ) ;
8983: LD_ADDR_VAR 0 8
8987: PUSH
8988: LD_VAR 0 1
8992: PPUSH
8993: CALL_OW 248
8997: ST_TO_ADDR
// class := GetClass ( un ) ;
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: LD_VAR 0 1
9007: PPUSH
9008: CALL_OW 257
9012: ST_TO_ADDR
// if class > 4 then
9013: LD_VAR 0 6
9017: PUSH
9018: LD_INT 4
9020: GREATER
9021: IFFALSE 9031
// class := 1 ;
9023: LD_ADDR_VAR 0 6
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// repeat wait ( 10 ) ;
9031: LD_INT 10
9033: PPUSH
9034: CALL_OW 67
// until not mpBlockRespThread ;
9038: LD_EXP 47
9042: NOT
9043: IFFALSE 9031
// mpBlockRespThread := true ;
9045: LD_ADDR_EXP 47
9049: PUSH
9050: LD_INT 1
9052: ST_TO_ADDR
// uc_side := side ;
9053: LD_ADDR_OWVAR 20
9057: PUSH
9058: LD_VAR 0 9
9062: ST_TO_ADDR
// uc_nation := nation ;
9063: LD_ADDR_OWVAR 21
9067: PUSH
9068: LD_VAR 0 8
9072: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9073: LD_INT 0
9075: PPUSH
9076: LD_VAR 0 6
9080: PPUSH
9081: LD_INT 2
9083: PPUSH
9084: CALL_OW 380
// un := CreateHuman ;
9088: LD_ADDR_VAR 0 1
9092: PUSH
9093: CALL_OW 44
9097: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9098: LD_ADDR_EXP 40
9102: PUSH
9103: LD_EXP 40
9107: PPUSH
9108: LD_VAR 0 9
9112: PPUSH
9113: LD_EXP 40
9117: PUSH
9118: LD_VAR 0 9
9122: ARRAY
9123: PPUSH
9124: LD_EXP 40
9128: PUSH
9129: LD_VAR 0 9
9133: ARRAY
9134: PUSH
9135: LD_INT 1
9137: PLUS
9138: PPUSH
9139: LD_VAR 0 1
9143: PPUSH
9144: CALL_OW 1
9148: PPUSH
9149: CALL_OW 1
9153: ST_TO_ADDR
// wait ( 10 ) ;
9154: LD_INT 10
9156: PPUSH
9157: CALL_OW 67
// mpBlockRespThread := false ;
9161: LD_ADDR_EXP 47
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// end ; end ;
9169: LD_VAR 0 2
9173: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9174: LD_INT 0
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
// tag := 0 ;
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_INT 0
9188: ST_TO_ADDR
// for i := 1 to 8 do
9189: LD_ADDR_VAR 0 4
9193: PUSH
9194: DOUBLE
9195: LD_INT 1
9197: DEC
9198: ST_TO_ADDR
9199: LD_INT 8
9201: PUSH
9202: FOR_TO
9203: IFFALSE 9237
// if un in mpApePosIndex [ i ] then
9205: LD_VAR 0 2
9209: PUSH
9210: LD_EXP 32
9214: PUSH
9215: LD_VAR 0 4
9219: ARRAY
9220: IN
9221: IFFALSE 9235
// begin tag := i ;
9223: LD_ADDR_VAR 0 5
9227: PUSH
9228: LD_VAR 0 4
9232: ST_TO_ADDR
// break ;
9233: GO 9237
// end ;
9235: GO 9202
9237: POP
9238: POP
// if not tag then
9239: LD_VAR 0 5
9243: NOT
9244: IFFALSE 9248
// exit ;
9246: GO 9416
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9248: LD_ADDR_VAR 0 6
9252: PUSH
9253: LD_EXP 31
9257: PUSH
9258: LD_EXP 7
9262: PUSH
9263: LD_VAR 0 5
9267: ARRAY
9268: ARRAY
9269: ST_TO_ADDR
// if not area then
9270: LD_VAR 0 6
9274: NOT
9275: IFFALSE 9279
// exit ;
9277: GO 9416
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9279: LD_INT 14700
9281: PUSH
9282: LD_VAR 0 2
9286: PUSH
9287: LD_INT 5
9289: MOD
9290: PUSH
9291: LD_INT 1
9293: PLUS
9294: PUSH
9295: LD_INT 700
9297: MUL
9298: PLUS
9299: PPUSH
9300: CALL_OW 67
// repeat wait ( 10 ) ;
9304: LD_INT 10
9306: PPUSH
9307: CALL_OW 67
// until not mpBlockRespThread ;
9311: LD_EXP 47
9315: NOT
9316: IFFALSE 9304
// mpBlockRespThread := true ;
9318: LD_ADDR_EXP 47
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9326: LD_INT 0
9328: PPUSH
9329: CALL 45685 0 1
// ape := CreateHuman ;
9333: LD_ADDR_VAR 0 7
9337: PUSH
9338: CALL_OW 44
9342: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9343: LD_ADDR_EXP 32
9347: PUSH
9348: LD_EXP 32
9352: PPUSH
9353: LD_VAR 0 5
9357: PPUSH
9358: LD_EXP 32
9362: PUSH
9363: LD_VAR 0 5
9367: ARRAY
9368: PPUSH
9369: LD_VAR 0 7
9373: PPUSH
9374: CALL 49558 0 2
9378: PPUSH
9379: CALL_OW 1
9383: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9384: LD_VAR 0 7
9388: PPUSH
9389: LD_VAR 0 6
9393: PPUSH
9394: LD_INT 0
9396: PPUSH
9397: CALL_OW 49
// wait ( 10 ) ;
9401: LD_INT 10
9403: PPUSH
9404: CALL_OW 67
// mpBlockRespThread := false ;
9408: LD_ADDR_EXP 47
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// end ;
9416: LD_VAR 0 3
9420: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9421: LD_INT 0
9423: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 266
9433: PUSH
9434: LD_INT 0
9436: PUSH
9437: LD_INT 1
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: IN
9444: IFFALSE 9469
// SetBName ( building , @ & GetSide ( building ) ) ;
9446: LD_VAR 0 1
9450: PPUSH
9451: LD_STRING @
9453: PUSH
9454: LD_VAR 0 1
9458: PPUSH
9459: CALL_OW 255
9463: STR
9464: PPUSH
9465: CALL_OW 500
// end ;
9469: LD_VAR 0 2
9473: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9478: LD_EXP 3
9482: PUSH
9483: LD_INT 2
9485: PUSH
9486: LD_INT 8
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: IN
9493: IFFALSE 9517
9495: PUSH
9496: LD_VAR 0 1
9500: PPUSH
9501: CALL_OW 266
9505: PUSH
9506: LD_INT 0
9508: PUSH
9509: LD_INT 1
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: IN
9516: AND
9517: IFFALSE 9596
// begin SetSide ( building , oldSide ) ;
9519: LD_VAR 0 1
9523: PPUSH
9524: LD_VAR 0 2
9528: PPUSH
9529: CALL_OW 235
// KillUnit ( building ) ;
9533: LD_VAR 0 1
9537: PPUSH
9538: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9542: LD_ADDR_VAR 0 5
9546: PUSH
9547: LD_INT 22
9549: PUSH
9550: LD_VAR 0 2
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 21
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PUSH
9578: FOR_IN
9579: IFFALSE 9592
// KillUnit ( i ) ;
9581: LD_VAR 0 5
9585: PPUSH
9586: CALL_OW 66
9590: GO 9578
9592: POP
9593: POP
// exit ;
9594: GO 9641
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL_OW 266
9605: PUSH
9606: LD_INT 0
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: IN
9616: IFFALSE 9641
// SetBName ( building , @ & GetSide ( building ) ) ;
9618: LD_VAR 0 1
9622: PPUSH
9623: LD_STRING @
9625: PUSH
9626: LD_VAR 0 1
9630: PPUSH
9631: CALL_OW 255
9635: STR
9636: PPUSH
9637: CALL_OW 500
// end ;
9641: LD_VAR 0 4
9645: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9646: LD_INT 0
9648: PPUSH
9649: PPUSH
9650: PPUSH
// if mpGameType <> GameTypeFamine then
9651: LD_EXP 3
9655: PUSH
9656: LD_INT 5
9658: NONEQUAL
9659: IFFALSE 9663
// exit ;
9661: GO 9897
// for i := 1 to mpGlobalOilDeposits do
9663: LD_ADDR_VAR 0 6
9667: PUSH
9668: DOUBLE
9669: LD_INT 1
9671: DEC
9672: ST_TO_ADDR
9673: LD_EXP 42
9677: PUSH
9678: FOR_TO
9679: IFFALSE 9895
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9681: LD_EXP 42
9685: PUSH
9686: LD_VAR 0 6
9690: ARRAY
9691: PUSH
9692: LD_INT 1
9694: ARRAY
9695: PPUSH
9696: LD_EXP 42
9700: PUSH
9701: LD_VAR 0 6
9705: ARRAY
9706: PUSH
9707: LD_INT 2
9709: ARRAY
9710: PPUSH
9711: CALL_OW 428
9715: PUSH
9716: LD_VAR 0 1
9720: EQUAL
9721: IFFALSE 9893
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9723: LD_ADDR_VAR 0 7
9727: PUSH
9728: LD_EXP 42
9732: PUSH
9733: LD_VAR 0 6
9737: ARRAY
9738: PUSH
9739: LD_INT 3
9741: ARRAY
9742: ST_TO_ADDR
// value := value - amount ;
9743: LD_ADDR_VAR 0 7
9747: PUSH
9748: LD_VAR 0 7
9752: PUSH
9753: LD_VAR 0 4
9757: MINUS
9758: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9759: LD_ADDR_EXP 42
9763: PUSH
9764: LD_EXP 42
9768: PPUSH
9769: LD_VAR 0 6
9773: PPUSH
9774: LD_EXP 42
9778: PUSH
9779: LD_VAR 0 6
9783: ARRAY
9784: PPUSH
9785: LD_INT 3
9787: PPUSH
9788: LD_VAR 0 7
9792: PPUSH
9793: CALL_OW 1
9797: PPUSH
9798: CALL_OW 1
9802: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9803: LD_VAR 0 2
9807: PUSH
9808: LD_OWVAR 2
9812: PUSH
9813: LD_INT 9
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: IN
9820: IFFALSE 9836
// SetUnitDisplayNumber ( building , value ) ;
9822: LD_VAR 0 1
9826: PPUSH
9827: LD_VAR 0 7
9831: PPUSH
9832: CALL_OW 505
// if value <= 0 then
9836: LD_VAR 0 7
9840: PUSH
9841: LD_INT 0
9843: LESSEQUAL
9844: IFFALSE 9893
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9846: LD_EXP 42
9850: PUSH
9851: LD_VAR 0 6
9855: ARRAY
9856: PUSH
9857: LD_INT 1
9859: ARRAY
9860: PPUSH
9861: LD_EXP 42
9865: PUSH
9866: LD_VAR 0 6
9870: ARRAY
9871: PUSH
9872: LD_INT 2
9874: ARRAY
9875: PPUSH
9876: CALL_OW 63
// KillUnit ( building ) ;
9880: LD_VAR 0 1
9884: PPUSH
9885: CALL_OW 66
// exit ;
9889: POP
9890: POP
9891: GO 9897
// end ; end ; end ;
9893: GO 9678
9895: POP
9896: POP
// end ;
9897: LD_VAR 0 5
9901: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9902: LD_INT 0
9904: PPUSH
9905: PPUSH
9906: PPUSH
// if mpGameType <> GameTypeFamine then
9907: LD_EXP 3
9911: PUSH
9912: LD_INT 5
9914: NONEQUAL
9915: IFFALSE 9919
// exit ;
9917: GO 10153
// for i := 1 to mpGlobalSibDeposits do
9919: LD_ADDR_VAR 0 6
9923: PUSH
9924: DOUBLE
9925: LD_INT 1
9927: DEC
9928: ST_TO_ADDR
9929: LD_EXP 43
9933: PUSH
9934: FOR_TO
9935: IFFALSE 10151
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9937: LD_EXP 43
9941: PUSH
9942: LD_VAR 0 6
9946: ARRAY
9947: PUSH
9948: LD_INT 1
9950: ARRAY
9951: PPUSH
9952: LD_EXP 43
9956: PUSH
9957: LD_VAR 0 6
9961: ARRAY
9962: PUSH
9963: LD_INT 2
9965: ARRAY
9966: PPUSH
9967: CALL_OW 428
9971: PUSH
9972: LD_VAR 0 1
9976: EQUAL
9977: IFFALSE 10149
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9979: LD_ADDR_VAR 0 7
9983: PUSH
9984: LD_EXP 43
9988: PUSH
9989: LD_VAR 0 6
9993: ARRAY
9994: PUSH
9995: LD_INT 3
9997: ARRAY
9998: ST_TO_ADDR
// value := value - amount ;
9999: LD_ADDR_VAR 0 7
10003: PUSH
10004: LD_VAR 0 7
10008: PUSH
10009: LD_VAR 0 4
10013: MINUS
10014: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10015: LD_ADDR_EXP 43
10019: PUSH
10020: LD_EXP 43
10024: PPUSH
10025: LD_VAR 0 6
10029: PPUSH
10030: LD_EXP 43
10034: PUSH
10035: LD_VAR 0 6
10039: ARRAY
10040: PPUSH
10041: LD_INT 3
10043: PPUSH
10044: LD_VAR 0 7
10048: PPUSH
10049: CALL_OW 1
10053: PPUSH
10054: CALL_OW 1
10058: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10059: LD_VAR 0 2
10063: PUSH
10064: LD_OWVAR 2
10068: PUSH
10069: LD_INT 9
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: IN
10076: IFFALSE 10092
// SetUnitDisplayNumber ( building , value ) ;
10078: LD_VAR 0 1
10082: PPUSH
10083: LD_VAR 0 7
10087: PPUSH
10088: CALL_OW 505
// if value <= 0 then
10092: LD_VAR 0 7
10096: PUSH
10097: LD_INT 0
10099: LESSEQUAL
10100: IFFALSE 10149
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10102: LD_EXP 43
10106: PUSH
10107: LD_VAR 0 6
10111: ARRAY
10112: PUSH
10113: LD_INT 1
10115: ARRAY
10116: PPUSH
10117: LD_EXP 43
10121: PUSH
10122: LD_VAR 0 6
10126: ARRAY
10127: PUSH
10128: LD_INT 2
10130: ARRAY
10131: PPUSH
10132: CALL_OW 63
// KillUnit ( building ) ;
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL_OW 66
// exit ;
10145: POP
10146: POP
10147: GO 10153
// end ; end ; end ;
10149: GO 9934
10151: POP
10152: POP
// end ;
10153: LD_VAR 0 5
10157: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10158: LD_INT 0
10160: PPUSH
10161: PPUSH
// side := GetSide ( factory ) ;
10162: LD_ADDR_VAR 0 7
10166: PUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 255
10176: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10177: LD_VAR 0 5
10181: PUSH
10182: LD_INT 81
10184: EQUAL
10185: IFFALSE 10223
10187: PUSH
10188: LD_INT 22
10190: PUSH
10191: LD_VAR 0 7
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 34
10202: PUSH
10203: LD_INT 81
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: PUSH
10219: LD_INT 0
10221: GREATER
10222: AND
10223: IFFALSE 10256
// begin ComCancel ( factory ) ;
10225: LD_VAR 0 1
10229: PPUSH
10230: CALL_OW 127
// if side = your_side then
10234: LD_VAR 0 7
10238: PUSH
10239: LD_OWVAR 2
10243: EQUAL
10244: IFFALSE 10256
// HintSpec ( VehLimit , 2 ) ;
10246: LD_STRING VehLimit
10248: PPUSH
10249: LD_INT 2
10251: PPUSH
10252: CALL_OW 338
// end ; end ;
10256: LD_VAR 0 6
10260: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10261: LD_INT 0
10263: PPUSH
10264: PPUSH
10265: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10266: LD_VAR 0 1
10270: PPUSH
10271: CALL_OW 264
10275: PUSH
10276: LD_INT 81
10278: EQUAL
10279: IFFALSE 10296
10281: PUSH
10282: LD_VAR 0 1
10286: PPUSH
10287: CALL_OW 263
10291: PUSH
10292: LD_INT 1
10294: EQUAL
10295: AND
10296: IFFALSE 10576
// begin for i := 1 to Count ( minersList ) do
10298: LD_ADDR_VAR 0 6
10302: PUSH
10303: DOUBLE
10304: LD_INT 1
10306: DEC
10307: ST_TO_ADDR
10308: LD_EXP 57
10312: PPUSH
10313: CALL 13582 0 1
10317: PUSH
10318: FOR_TO
10319: IFFALSE 10437
// begin if minersList [ i ] = oldId then
10321: LD_EXP 57
10325: PUSH
10326: LD_VAR 0 6
10330: ARRAY
10331: PUSH
10332: LD_VAR 0 2
10336: EQUAL
10337: IFFALSE 10435
// begin for j := 1 to minerMinesList [ i ] do
10339: LD_ADDR_VAR 0 7
10343: PUSH
10344: DOUBLE
10345: LD_INT 1
10347: DEC
10348: ST_TO_ADDR
10349: LD_EXP 58
10353: PUSH
10354: LD_VAR 0 6
10358: ARRAY
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10411
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10363: LD_EXP 58
10367: PUSH
10368: LD_VAR 0 6
10372: ARRAY
10373: PUSH
10374: LD_VAR 0 7
10378: ARRAY
10379: PUSH
10380: LD_INT 1
10382: ARRAY
10383: PPUSH
10384: LD_EXP 58
10388: PUSH
10389: LD_VAR 0 6
10393: ARRAY
10394: PUSH
10395: LD_VAR 0 7
10399: ARRAY
10400: PUSH
10401: LD_INT 2
10403: ARRAY
10404: PPUSH
10405: CALL_OW 612
10409: GO 10360
10411: POP
10412: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10413: LD_ADDR_EXP 58
10417: PUSH
10418: LD_EXP 58
10422: PPUSH
10423: LD_VAR 0 6
10427: PPUSH
10428: CALL_OW 3
10432: ST_TO_ADDR
// break ;
10433: GO 10437
// end ; end ;
10435: GO 10318
10437: POP
10438: POP
// minersList := minersList diff oldId ;
10439: LD_ADDR_EXP 57
10443: PUSH
10444: LD_EXP 57
10448: PUSH
10449: LD_VAR 0 2
10453: DIFF
10454: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10455: LD_INT 22
10457: PUSH
10458: LD_VAR 0 4
10462: PPUSH
10463: CALL_OW 255
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 34
10474: PUSH
10475: LD_INT 81
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 69
10490: PUSH
10491: LD_INT 1
10493: GREATER
10494: IFFALSE 10521
// begin ComExit ( unit ) ;
10496: LD_VAR 0 4
10500: PPUSH
10501: CALL 49956 0 1
// SetSide ( newId , oldSide ) ;
10505: LD_VAR 0 1
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: CALL_OW 235
// exit ;
10519: GO 10576
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10521: LD_ADDR_EXP 57
10525: PUSH
10526: LD_EXP 57
10530: PPUSH
10531: LD_EXP 57
10535: PUSH
10536: LD_INT 1
10538: PLUS
10539: PPUSH
10540: LD_VAR 0 1
10544: PPUSH
10545: CALL_OW 1
10549: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10550: LD_ADDR_EXP 58
10554: PUSH
10555: LD_EXP 58
10559: PPUSH
10560: LD_EXP 58
10564: PUSH
10565: LD_INT 1
10567: PLUS
10568: PPUSH
10569: EMPTY
10570: PPUSH
10571: CALL_OW 1
10575: ST_TO_ADDR
// end ; end ; end_of_file
10576: LD_VAR 0 5
10580: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10581: LD_EXP 39
10585: IFFALSE 10593
10587: PUSH
10588: CALL 10803 0 0
10592: AND
10593: IFFALSE 10601
10595: PUSH
10596: LD_OWVAR 4
10600: AND
10601: IFFALSE 10800
10603: GO 10605
10605: DISABLE
10606: LD_INT 0
10608: PPUSH
10609: PPUSH
// begin canWin := false ;
10610: LD_ADDR_VAR 0 2
10614: PUSH
10615: LD_INT 0
10617: ST_TO_ADDR
// if not HasPower ( your_side ) then
10618: LD_OWVAR 2
10622: PPUSH
10623: CALL 10845 0 1
10627: NOT
10628: IFFALSE 10639
// begin Multiplayer_Loose_Message ;
10630: CALL_OW 521
// enable ( mpLose ) ;
10634: LD_INT 102
10636: ENABLE_MARKED
// end else
10637: GO 10800
// begin canWin := true ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_INT 1
10646: ST_TO_ADDR
// for i := 1 to 8 do
10647: LD_ADDR_VAR 0 1
10651: PUSH
10652: DOUBLE
10653: LD_INT 1
10655: DEC
10656: ST_TO_ADDR
10657: LD_INT 8
10659: PUSH
10660: FOR_TO
10661: IFFALSE 10786
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10663: LD_EXP 7
10667: PUSH
10668: LD_VAR 0 1
10672: ARRAY
10673: IFFALSE 10686
10675: PUSH
10676: LD_VAR 0 1
10680: PPUSH
10681: CALL_OW 108
10685: AND
10686: IFFALSE 10700
10688: PUSH
10689: LD_VAR 0 1
10693: PUSH
10694: LD_OWVAR 2
10698: NONEQUAL
10699: AND
10700: IFFALSE 10784
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10702: LD_EXP 8
10706: PUSH
10707: LD_VAR 0 1
10711: ARRAY
10712: NOT
10713: IFTRUE 10761
10715: PUSH
10716: LD_EXP 8
10720: PUSH
10721: LD_VAR 0 1
10725: ARRAY
10726: PUSH
10727: LD_EXP 8
10731: PUSH
10732: LD_OWVAR 2
10736: ARRAY
10737: NONEQUAL
10738: IFFALSE 10760
10740: PUSH
10741: LD_OWVAR 2
10745: PPUSH
10746: LD_VAR 0 1
10750: PPUSH
10751: CALL_OW 81
10755: PUSH
10756: LD_INT 1
10758: NONEQUAL
10759: AND
10760: OR
10761: IFFALSE 10784
// if HasPower ( i ) then
10763: LD_VAR 0 1
10767: PPUSH
10768: CALL 10845 0 1
10772: IFFALSE 10784
// begin canWin := false ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_INT 0
10781: ST_TO_ADDR
// break ;
10782: GO 10786
// end ;
10784: GO 10660
10786: POP
10787: POP
// if canWin then
10788: LD_VAR 0 2
10792: IFFALSE 10799
// enable ( mpWin ) else
10794: LD_INT 101
10796: ENABLE_MARKED
10797: GO 10800
// enable ;
10799: ENABLE
// end ; end ;
10800: PPOPN 2
10802: END
// function CanWinLoose ; begin
10803: LD_INT 0
10805: PPUSH
// result := true ;
10806: LD_ADDR_VAR 0 1
10810: PUSH
10811: LD_INT 1
10813: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10814: CALL_OW 531
10818: IFFALSE 10830
10820: PUSH
10821: CALL_OW 519
10825: PUSH
10826: LD_INT 1
10828: GREATER
10829: AND
10830: IFFALSE 10840
// result := false ;
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 0
10839: ST_TO_ADDR
// end ;
10840: LD_VAR 0 1
10844: RET
// function HasPower ( i ) ; begin
10845: LD_INT 0
10847: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_VAR 0 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 21
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 33
10880: PUSH
10881: LD_INT 3
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 33
10890: PUSH
10891: LD_INT 5
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PPUSH
10908: CALL_OW 69
10912: ST_TO_ADDR
// end ; end_of_file
10913: LD_VAR 0 2
10917: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10918: LD_EXP 39
10922: IFFALSE 10965
10924: GO 10926
10926: DISABLE
10927: LD_INT 0
10929: PPUSH
// begin for i := 1 to 8 do
10930: LD_ADDR_VAR 0 1
10934: PUSH
10935: DOUBLE
10936: LD_INT 1
10938: DEC
10939: ST_TO_ADDR
10940: LD_INT 8
10942: PUSH
10943: FOR_TO
10944: IFFALSE 10963
// SetRestrict ( b_depot , i , state_disabled ) ;
10946: LD_INT 0
10948: PPUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: LD_INT 0
10956: PPUSH
10957: CALL_OW 324
10961: GO 10943
10963: POP
10964: POP
// end ;
10965: PPOPN 1
10967: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10968: LD_EXP 39
10972: IFFALSE 10980
10974: PUSH
10975: CALL 11190 0 0
10979: AND
10980: IFFALSE 10988
10982: PUSH
10983: LD_OWVAR 4
10987: AND
10988: IFFALSE 11187
10990: GO 10992
10992: DISABLE
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
// begin canWin := false ;
10997: LD_ADDR_VAR 0 2
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// if not HasPower ( your_side ) then
11005: LD_OWVAR 2
11009: PPUSH
11010: CALL 11232 0 1
11014: NOT
11015: IFFALSE 11026
// begin Multiplayer_Loose_Message ;
11017: CALL_OW 521
// enable ( mpLose ) ;
11021: LD_INT 102
11023: ENABLE_MARKED
// end else
11024: GO 11187
// begin canWin := true ;
11026: LD_ADDR_VAR 0 2
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// for i := 1 to 8 do
11034: LD_ADDR_VAR 0 1
11038: PUSH
11039: DOUBLE
11040: LD_INT 1
11042: DEC
11043: ST_TO_ADDR
11044: LD_INT 8
11046: PUSH
11047: FOR_TO
11048: IFFALSE 11173
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11050: LD_EXP 7
11054: PUSH
11055: LD_VAR 0 1
11059: ARRAY
11060: IFFALSE 11073
11062: PUSH
11063: LD_VAR 0 1
11067: PPUSH
11068: CALL_OW 108
11072: AND
11073: IFFALSE 11087
11075: PUSH
11076: LD_VAR 0 1
11080: PUSH
11081: LD_OWVAR 2
11085: NONEQUAL
11086: AND
11087: IFFALSE 11171
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11089: LD_EXP 8
11093: PUSH
11094: LD_VAR 0 1
11098: ARRAY
11099: NOT
11100: IFTRUE 11148
11102: PUSH
11103: LD_EXP 8
11107: PUSH
11108: LD_VAR 0 1
11112: ARRAY
11113: PUSH
11114: LD_EXP 8
11118: PUSH
11119: LD_OWVAR 2
11123: ARRAY
11124: NONEQUAL
11125: IFFALSE 11147
11127: PUSH
11128: LD_OWVAR 2
11132: PPUSH
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 81
11142: PUSH
11143: LD_INT 1
11145: NONEQUAL
11146: AND
11147: OR
11148: IFFALSE 11171
// if HasPower ( i ) then
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL 11232 0 1
11159: IFFALSE 11171
// begin canWin := false ;
11161: LD_ADDR_VAR 0 2
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// break ;
11169: GO 11173
// end ;
11171: GO 11047
11173: POP
11174: POP
// if canWin then
11175: LD_VAR 0 2
11179: IFFALSE 11186
// enable ( mpWin ) else
11181: LD_INT 101
11183: ENABLE_MARKED
11184: GO 11187
// enable ;
11186: ENABLE
// end ; end ;
11187: PPOPN 2
11189: END
// function CanWinLoose ; begin
11190: LD_INT 0
11192: PPUSH
// result := true ;
11193: LD_ADDR_VAR 0 1
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11201: CALL_OW 531
11205: IFFALSE 11217
11207: PUSH
11208: CALL_OW 519
11212: PUSH
11213: LD_INT 1
11215: GREATER
11216: AND
11217: IFFALSE 11227
// result := false ;
11219: LD_ADDR_VAR 0 1
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// end ;
11227: LD_VAR 0 1
11231: RET
// function HasPower ( i ) ; begin
11232: LD_INT 0
11234: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11235: LD_INT 22
11237: PUSH
11238: LD_VAR 0 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: LD_INT 30
11252: PUSH
11253: LD_INT 0
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 30
11262: PUSH
11263: LD_INT 1
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: NOT
11284: IFFALSE 11288
// exit ;
11286: GO 11353
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11288: LD_ADDR_VAR 0 2
11292: PUSH
11293: LD_INT 22
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 2
11307: PUSH
11308: LD_INT 21
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 33
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 33
11330: PUSH
11331: LD_INT 5
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PPUSH
11348: CALL_OW 69
11352: ST_TO_ADDR
// end ; end_of_file
11353: LD_VAR 0 2
11357: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11358: LD_INT 0
11360: PPUSH
11361: PPUSH
// if exist_mode then
11362: LD_VAR 0 2
11366: IFFALSE 11412
// begin unit := CreateCharacter ( prefix & ident ) ;
11368: LD_ADDR_VAR 0 5
11372: PUSH
11373: LD_VAR 0 3
11377: PUSH
11378: LD_VAR 0 1
11382: STR
11383: PPUSH
11384: CALL_OW 34
11388: ST_TO_ADDR
// if unit then
11389: LD_VAR 0 5
11393: IFFALSE 11410
// DeleteCharacters ( prefix & ident ) ;
11395: LD_VAR 0 3
11399: PUSH
11400: LD_VAR 0 1
11404: STR
11405: PPUSH
11406: CALL_OW 40
// end else
11410: GO 11427
// unit := NewCharacter ( ident ) ;
11412: LD_ADDR_VAR 0 5
11416: PUSH
11417: LD_VAR 0 1
11421: PPUSH
11422: CALL_OW 25
11426: ST_TO_ADDR
// result := unit ;
11427: LD_ADDR_VAR 0 4
11431: PUSH
11432: LD_VAR 0 5
11436: ST_TO_ADDR
// end ;
11437: LD_VAR 0 4
11441: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11442: LD_INT 0
11444: PPUSH
11445: PPUSH
// if exist_mode then
11446: LD_VAR 0 2
11450: IFFALSE 11475
// unit := CreateCharacter ( prefix & ident ) else
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: LD_VAR 0 3
11461: PUSH
11462: LD_VAR 0 1
11466: STR
11467: PPUSH
11468: CALL_OW 34
11472: ST_TO_ADDR
11473: GO 11490
// unit := NewCharacter ( ident ) ;
11475: LD_ADDR_VAR 0 5
11479: PUSH
11480: LD_VAR 0 1
11484: PPUSH
11485: CALL_OW 25
11489: ST_TO_ADDR
// result := unit ;
11490: LD_ADDR_VAR 0 4
11494: PUSH
11495: LD_VAR 0 5
11499: ST_TO_ADDR
// end ;
11500: LD_VAR 0 4
11504: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11505: LD_INT 0
11507: PPUSH
11508: PPUSH
// if not side or not nation then
11509: LD_VAR 0 1
11513: NOT
11514: IFTRUE 11523
11516: PUSH
11517: LD_VAR 0 2
11521: NOT
11522: OR
11523: IFFALSE 11527
// exit ;
11525: GO 12321
// case nation of nation_american :
11527: LD_VAR 0 2
11531: PUSH
11532: LD_INT 1
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11762
11540: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11541: LD_ADDR_VAR 0 4
11545: PUSH
11546: LD_INT 35
11548: PUSH
11549: LD_INT 45
11551: PUSH
11552: LD_INT 46
11554: PUSH
11555: LD_INT 47
11557: PUSH
11558: LD_INT 82
11560: PUSH
11561: LD_INT 83
11563: PUSH
11564: LD_INT 84
11566: PUSH
11567: LD_INT 85
11569: PUSH
11570: LD_INT 86
11572: PUSH
11573: LD_INT 1
11575: PUSH
11576: LD_INT 2
11578: PUSH
11579: LD_INT 6
11581: PUSH
11582: LD_INT 15
11584: PUSH
11585: LD_INT 16
11587: PUSH
11588: LD_INT 7
11590: PUSH
11591: LD_INT 12
11593: PUSH
11594: LD_INT 13
11596: PUSH
11597: LD_INT 10
11599: PUSH
11600: LD_INT 14
11602: PUSH
11603: LD_INT 20
11605: PUSH
11606: LD_INT 21
11608: PUSH
11609: LD_INT 22
11611: PUSH
11612: LD_INT 25
11614: PUSH
11615: LD_INT 32
11617: PUSH
11618: LD_INT 27
11620: PUSH
11621: LD_INT 36
11623: PUSH
11624: LD_INT 69
11626: PUSH
11627: LD_INT 39
11629: PUSH
11630: LD_INT 34
11632: PUSH
11633: LD_INT 40
11635: PUSH
11636: LD_INT 48
11638: PUSH
11639: LD_INT 49
11641: PUSH
11642: LD_INT 50
11644: PUSH
11645: LD_INT 51
11647: PUSH
11648: LD_INT 52
11650: PUSH
11651: LD_INT 53
11653: PUSH
11654: LD_INT 54
11656: PUSH
11657: LD_INT 55
11659: PUSH
11660: LD_INT 56
11662: PUSH
11663: LD_INT 57
11665: PUSH
11666: LD_INT 58
11668: PUSH
11669: LD_INT 59
11671: PUSH
11672: LD_INT 60
11674: PUSH
11675: LD_INT 61
11677: PUSH
11678: LD_INT 62
11680: PUSH
11681: LD_INT 80
11683: PUSH
11684: LD_INT 82
11686: PUSH
11687: LD_INT 83
11689: PUSH
11690: LD_INT 84
11692: PUSH
11693: LD_INT 85
11695: PUSH
11696: LD_INT 86
11698: PUSH
11699: LD_INT 90
11701: PUSH
11702: LD_INT 93
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: ST_TO_ADDR
11760: GO 12243
11762: LD_INT 2
11764: DOUBLE
11765: EQUAL
11766: IFTRUE 11770
11768: GO 12004
11770: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11771: LD_ADDR_VAR 0 4
11775: PUSH
11776: LD_INT 35
11778: PUSH
11779: LD_INT 45
11781: PUSH
11782: LD_INT 46
11784: PUSH
11785: LD_INT 47
11787: PUSH
11788: LD_INT 82
11790: PUSH
11791: LD_INT 83
11793: PUSH
11794: LD_INT 84
11796: PUSH
11797: LD_INT 85
11799: PUSH
11800: LD_INT 87
11802: PUSH
11803: LD_INT 70
11805: PUSH
11806: LD_INT 1
11808: PUSH
11809: LD_INT 11
11811: PUSH
11812: LD_INT 3
11814: PUSH
11815: LD_INT 4
11817: PUSH
11818: LD_INT 5
11820: PUSH
11821: LD_INT 6
11823: PUSH
11824: LD_INT 15
11826: PUSH
11827: LD_INT 18
11829: PUSH
11830: LD_INT 7
11832: PUSH
11833: LD_INT 17
11835: PUSH
11836: LD_INT 8
11838: PUSH
11839: LD_INT 20
11841: PUSH
11842: LD_INT 21
11844: PUSH
11845: LD_INT 22
11847: PUSH
11848: LD_INT 72
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 69
11856: PUSH
11857: LD_INT 39
11859: PUSH
11860: LD_INT 40
11862: PUSH
11863: LD_INT 41
11865: PUSH
11866: LD_INT 42
11868: PUSH
11869: LD_INT 43
11871: PUSH
11872: LD_INT 48
11874: PUSH
11875: LD_INT 49
11877: PUSH
11878: LD_INT 50
11880: PUSH
11881: LD_INT 51
11883: PUSH
11884: LD_INT 52
11886: PUSH
11887: LD_INT 53
11889: PUSH
11890: LD_INT 54
11892: PUSH
11893: LD_INT 55
11895: PUSH
11896: LD_INT 56
11898: PUSH
11899: LD_INT 60
11901: PUSH
11902: LD_INT 61
11904: PUSH
11905: LD_INT 62
11907: PUSH
11908: LD_INT 66
11910: PUSH
11911: LD_INT 67
11913: PUSH
11914: LD_INT 68
11916: PUSH
11917: LD_INT 81
11919: PUSH
11920: LD_INT 82
11922: PUSH
11923: LD_INT 83
11925: PUSH
11926: LD_INT 84
11928: PUSH
11929: LD_INT 85
11931: PUSH
11932: LD_INT 87
11934: PUSH
11935: LD_INT 88
11937: PUSH
11938: LD_INT 92
11940: PUSH
11941: LD_INT 94
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: ST_TO_ADDR
12002: GO 12243
12004: LD_INT 3
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12242
12012: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
12013: LD_ADDR_VAR 0 4
12017: PUSH
12018: LD_INT 46
12020: PUSH
12021: LD_INT 47
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: LD_INT 2
12029: PUSH
12030: LD_INT 82
12032: PUSH
12033: LD_INT 83
12035: PUSH
12036: LD_INT 84
12038: PUSH
12039: LD_INT 85
12041: PUSH
12042: LD_INT 86
12044: PUSH
12045: LD_INT 11
12047: PUSH
12048: LD_INT 9
12050: PUSH
12051: LD_INT 20
12053: PUSH
12054: LD_INT 19
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 24
12062: PUSH
12063: LD_INT 22
12065: PUSH
12066: LD_INT 25
12068: PUSH
12069: LD_INT 28
12071: PUSH
12072: LD_INT 29
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 31
12080: PUSH
12081: LD_INT 37
12083: PUSH
12084: LD_INT 38
12086: PUSH
12087: LD_INT 32
12089: PUSH
12090: LD_INT 27
12092: PUSH
12093: LD_INT 33
12095: PUSH
12096: LD_INT 69
12098: PUSH
12099: LD_INT 39
12101: PUSH
12102: LD_INT 34
12104: PUSH
12105: LD_INT 40
12107: PUSH
12108: LD_INT 71
12110: PUSH
12111: LD_INT 23
12113: PUSH
12114: LD_INT 44
12116: PUSH
12117: LD_INT 48
12119: PUSH
12120: LD_INT 49
12122: PUSH
12123: LD_INT 50
12125: PUSH
12126: LD_INT 51
12128: PUSH
12129: LD_INT 52
12131: PUSH
12132: LD_INT 53
12134: PUSH
12135: LD_INT 54
12137: PUSH
12138: LD_INT 55
12140: PUSH
12141: LD_INT 56
12143: PUSH
12144: LD_INT 57
12146: PUSH
12147: LD_INT 58
12149: PUSH
12150: LD_INT 59
12152: PUSH
12153: LD_INT 63
12155: PUSH
12156: LD_INT 64
12158: PUSH
12159: LD_INT 65
12161: PUSH
12162: LD_INT 82
12164: PUSH
12165: LD_INT 83
12167: PUSH
12168: LD_INT 84
12170: PUSH
12171: LD_INT 85
12173: PUSH
12174: LD_INT 86
12176: PUSH
12177: LD_INT 89
12179: PUSH
12180: LD_INT 91
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: ST_TO_ADDR
12240: GO 12243
12242: POP
// if state > - 1 and state < 3 then
12243: LD_VAR 0 3
12247: PUSH
12248: LD_INT 1
12250: NEG
12251: GREATER
12252: IFFALSE 12264
12254: PUSH
12255: LD_VAR 0 3
12259: PUSH
12260: LD_INT 3
12262: LESS
12263: AND
12264: IFFALSE 12321
// for i in result do
12266: LD_ADDR_VAR 0 5
12270: PUSH
12271: LD_VAR 0 4
12275: PUSH
12276: FOR_IN
12277: IFFALSE 12319
// if GetTech ( i , side ) <> state then
12279: LD_VAR 0 5
12283: PPUSH
12284: LD_VAR 0 1
12288: PPUSH
12289: CALL_OW 321
12293: PUSH
12294: LD_VAR 0 3
12298: NONEQUAL
12299: IFFALSE 12317
// result := result diff i ;
12301: LD_ADDR_VAR 0 4
12305: PUSH
12306: LD_VAR 0 4
12310: PUSH
12311: LD_VAR 0 5
12315: DIFF
12316: ST_TO_ADDR
12317: GO 12276
12319: POP
12320: POP
// end ;
12321: LD_VAR 0 4
12325: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12326: LD_INT 0
12328: PPUSH
12329: PPUSH
12330: PPUSH
// result := true ;
12331: LD_ADDR_VAR 0 3
12335: PUSH
12336: LD_INT 1
12338: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12339: LD_ADDR_VAR 0 5
12343: PUSH
12344: LD_VAR 0 2
12348: PPUSH
12349: CALL_OW 480
12353: ST_TO_ADDR
// if not tmp then
12354: LD_VAR 0 5
12358: NOT
12359: IFFALSE 12363
// exit ;
12361: GO 12412
// for i in tmp do
12363: LD_ADDR_VAR 0 4
12367: PUSH
12368: LD_VAR 0 5
12372: PUSH
12373: FOR_IN
12374: IFFALSE 12410
// if GetTech ( i , side ) <> state_researched then
12376: LD_VAR 0 4
12380: PPUSH
12381: LD_VAR 0 1
12385: PPUSH
12386: CALL_OW 321
12390: PUSH
12391: LD_INT 2
12393: NONEQUAL
12394: IFFALSE 12408
// begin result := false ;
12396: LD_ADDR_VAR 0 3
12400: PUSH
12401: LD_INT 0
12403: ST_TO_ADDR
// exit ;
12404: POP
12405: POP
12406: GO 12412
// end ;
12408: GO 12373
12410: POP
12411: POP
// end ;
12412: LD_VAR 0 3
12416: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12417: LD_INT 0
12419: PPUSH
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
12424: PPUSH
12425: PPUSH
12426: PPUSH
12427: PPUSH
12428: PPUSH
12429: PPUSH
12430: PPUSH
12431: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12432: LD_VAR 0 1
12436: NOT
12437: IFTRUE 12454
12439: PUSH
12440: LD_VAR 0 1
12444: PPUSH
12445: CALL_OW 257
12449: PUSH
12450: LD_INT 9
12452: NONEQUAL
12453: OR
12454: IFFALSE 12458
// exit ;
12456: GO 13037
// side := GetSide ( unit ) ;
12458: LD_ADDR_VAR 0 9
12462: PUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 255
12472: ST_TO_ADDR
// tech_space := tech_spacanom ;
12473: LD_ADDR_VAR 0 12
12477: PUSH
12478: LD_INT 29
12480: ST_TO_ADDR
// tech_time := tech_taurad ;
12481: LD_ADDR_VAR 0 13
12485: PUSH
12486: LD_INT 28
12488: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12489: LD_ADDR_VAR 0 11
12493: PUSH
12494: LD_VAR 0 1
12498: PPUSH
12499: CALL_OW 310
12503: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12504: LD_VAR 0 11
12508: PPUSH
12509: CALL_OW 247
12513: PUSH
12514: LD_INT 2
12516: EQUAL
12517: IFFALSE 12521
// exit ;
12519: GO 13037
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12521: LD_ADDR_VAR 0 8
12525: PUSH
12526: LD_INT 81
12528: PUSH
12529: LD_VAR 0 9
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 3
12540: PUSH
12541: LD_INT 21
12543: PUSH
12544: LD_INT 3
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: ST_TO_ADDR
// if not tmp then
12564: LD_VAR 0 8
12568: NOT
12569: IFFALSE 12573
// exit ;
12571: GO 13037
// if in_unit then
12573: LD_VAR 0 11
12577: IFFALSE 12601
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12579: LD_ADDR_VAR 0 10
12583: PUSH
12584: LD_VAR 0 8
12588: PPUSH
12589: LD_VAR 0 11
12593: PPUSH
12594: CALL_OW 74
12598: ST_TO_ADDR
12599: GO 12621
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12601: LD_ADDR_VAR 0 10
12605: PUSH
12606: LD_VAR 0 8
12610: PPUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 74
12620: ST_TO_ADDR
// if not enemy then
12621: LD_VAR 0 10
12625: NOT
12626: IFFALSE 12630
// exit ;
12628: GO 13037
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12630: LD_VAR 0 11
12634: IFFALSE 12656
12636: PUSH
12637: LD_VAR 0 11
12641: PPUSH
12642: LD_VAR 0 10
12646: PPUSH
12647: CALL_OW 296
12651: PUSH
12652: LD_INT 13
12654: GREATER
12655: AND
12656: IFTRUE 12678
12658: PUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: LD_VAR 0 10
12668: PPUSH
12669: CALL_OW 296
12673: PUSH
12674: LD_INT 12
12676: GREATER
12677: OR
12678: IFFALSE 12682
// exit ;
12680: GO 13037
// missile := [ 1 ] ;
12682: LD_ADDR_VAR 0 14
12686: PUSH
12687: LD_INT 1
12689: PUSH
12690: EMPTY
12691: LIST
12692: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12693: LD_VAR 0 9
12697: PPUSH
12698: LD_VAR 0 12
12702: PPUSH
12703: CALL_OW 325
12707: IFFALSE 12736
// missile := Replace ( missile , missile + 1 , 2 ) ;
12709: LD_ADDR_VAR 0 14
12713: PUSH
12714: LD_VAR 0 14
12718: PPUSH
12719: LD_VAR 0 14
12723: PUSH
12724: LD_INT 1
12726: PLUS
12727: PPUSH
12728: LD_INT 2
12730: PPUSH
12731: CALL_OW 1
12735: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12736: LD_VAR 0 9
12740: PPUSH
12741: LD_VAR 0 13
12745: PPUSH
12746: CALL_OW 325
12750: IFFALSE 12774
12752: PUSH
12753: LD_VAR 0 10
12757: PPUSH
12758: CALL_OW 255
12762: PPUSH
12763: LD_VAR 0 13
12767: PPUSH
12768: CALL_OW 325
12772: NOT
12773: AND
12774: IFFALSE 12803
// missile := Replace ( missile , missile + 1 , 3 ) ;
12776: LD_ADDR_VAR 0 14
12780: PUSH
12781: LD_VAR 0 14
12785: PPUSH
12786: LD_VAR 0 14
12790: PUSH
12791: LD_INT 1
12793: PLUS
12794: PPUSH
12795: LD_INT 3
12797: PPUSH
12798: CALL_OW 1
12802: ST_TO_ADDR
// if missile < 2 then
12803: LD_VAR 0 14
12807: PUSH
12808: LD_INT 2
12810: LESS
12811: IFFALSE 12815
// exit ;
12813: GO 13037
// x := GetX ( enemy ) ;
12815: LD_ADDR_VAR 0 4
12819: PUSH
12820: LD_VAR 0 10
12824: PPUSH
12825: CALL_OW 250
12829: ST_TO_ADDR
// y := GetY ( enemy ) ;
12830: LD_ADDR_VAR 0 5
12834: PUSH
12835: LD_VAR 0 10
12839: PPUSH
12840: CALL_OW 251
12844: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12845: LD_ADDR_VAR 0 6
12849: PUSH
12850: LD_VAR 0 4
12854: PUSH
12855: LD_INT 1
12857: NEG
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 12
12866: PLUS
12867: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12868: LD_ADDR_VAR 0 7
12872: PUSH
12873: LD_VAR 0 5
12877: PUSH
12878: LD_INT 1
12880: NEG
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: CALL_OW 12
12889: PLUS
12890: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12891: LD_VAR 0 6
12895: PPUSH
12896: LD_VAR 0 7
12900: PPUSH
12901: CALL_OW 488
12905: NOT
12906: IFFALSE 12928
// begin _x := x ;
12908: LD_ADDR_VAR 0 6
12912: PUSH
12913: LD_VAR 0 4
12917: ST_TO_ADDR
// _y := y ;
12918: LD_ADDR_VAR 0 7
12922: PUSH
12923: LD_VAR 0 5
12927: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12928: LD_ADDR_VAR 0 3
12932: PUSH
12933: LD_INT 1
12935: PPUSH
12936: LD_VAR 0 14
12940: PPUSH
12941: CALL_OW 12
12945: ST_TO_ADDR
// case i of 1 :
12946: LD_VAR 0 3
12950: PUSH
12951: LD_INT 1
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 12976
12959: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_VAR 0 10
12969: PPUSH
12970: CALL_OW 115
12974: GO 13037
12976: LD_INT 2
12978: DOUBLE
12979: EQUAL
12980: IFTRUE 12984
12982: GO 13006
12984: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12985: LD_VAR 0 1
12989: PPUSH
12990: LD_VAR 0 6
12994: PPUSH
12995: LD_VAR 0 7
12999: PPUSH
13000: CALL_OW 153
13004: GO 13037
13006: LD_INT 3
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13036
13014: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13015: LD_VAR 0 1
13019: PPUSH
13020: LD_VAR 0 6
13024: PPUSH
13025: LD_VAR 0 7
13029: PPUSH
13030: CALL_OW 154
13034: GO 13037
13036: POP
// end ;
13037: LD_VAR 0 2
13041: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13042: LD_INT 0
13044: PPUSH
13045: PPUSH
13046: PPUSH
13047: PPUSH
13048: PPUSH
13049: PPUSH
// if not unit or not building then
13050: LD_VAR 0 1
13054: NOT
13055: IFTRUE 13064
13057: PUSH
13058: LD_VAR 0 2
13062: NOT
13063: OR
13064: IFFALSE 13068
// exit ;
13066: GO 13226
// x := GetX ( building ) ;
13068: LD_ADDR_VAR 0 5
13072: PUSH
13073: LD_VAR 0 2
13077: PPUSH
13078: CALL_OW 250
13082: ST_TO_ADDR
// y := GetY ( building ) ;
13083: LD_ADDR_VAR 0 6
13087: PUSH
13088: LD_VAR 0 2
13092: PPUSH
13093: CALL_OW 251
13097: ST_TO_ADDR
// for i := 0 to 5 do
13098: LD_ADDR_VAR 0 4
13102: PUSH
13103: DOUBLE
13104: LD_INT 0
13106: DEC
13107: ST_TO_ADDR
13108: LD_INT 5
13110: PUSH
13111: FOR_TO
13112: IFFALSE 13224
// begin _x := ShiftX ( x , i , 3 ) ;
13114: LD_ADDR_VAR 0 7
13118: PUSH
13119: LD_VAR 0 5
13123: PPUSH
13124: LD_VAR 0 4
13128: PPUSH
13129: LD_INT 3
13131: PPUSH
13132: CALL_OW 272
13136: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13137: LD_ADDR_VAR 0 8
13141: PUSH
13142: LD_VAR 0 6
13146: PPUSH
13147: LD_VAR 0 4
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: CALL_OW 273
13159: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13160: LD_VAR 0 7
13164: PPUSH
13165: LD_VAR 0 8
13169: PPUSH
13170: CALL_OW 488
13174: NOT
13175: IFFALSE 13179
// continue ;
13177: GO 13111
// if HexInfo ( _x , _y ) = 0 then
13179: LD_VAR 0 7
13183: PPUSH
13184: LD_VAR 0 8
13188: PPUSH
13189: CALL_OW 428
13193: PUSH
13194: LD_INT 0
13196: EQUAL
13197: IFFALSE 13222
// begin ComMoveXY ( unit , _x , _y ) ;
13199: LD_VAR 0 1
13203: PPUSH
13204: LD_VAR 0 7
13208: PPUSH
13209: LD_VAR 0 8
13213: PPUSH
13214: CALL_OW 111
// exit ;
13218: POP
13219: POP
13220: GO 13226
// end ; end ;
13222: GO 13111
13224: POP
13225: POP
// end ;
13226: LD_VAR 0 3
13230: RET
// export function ScanBase ( side , base_area ) ; begin
13231: LD_INT 0
13233: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13234: LD_ADDR_VAR 0 3
13238: PUSH
13239: LD_VAR 0 2
13243: PPUSH
13244: LD_INT 81
13246: PUSH
13247: LD_VAR 0 1
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PPUSH
13256: CALL_OW 70
13260: ST_TO_ADDR
// end ;
13261: LD_VAR 0 3
13265: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13266: LD_INT 0
13268: PPUSH
13269: PPUSH
13270: PPUSH
13271: PPUSH
// result := false ;
13272: LD_ADDR_VAR 0 2
13276: PUSH
13277: LD_INT 0
13279: ST_TO_ADDR
// side := GetSide ( unit ) ;
13280: LD_ADDR_VAR 0 3
13284: PUSH
13285: LD_VAR 0 1
13289: PPUSH
13290: CALL_OW 255
13294: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13295: LD_ADDR_VAR 0 4
13299: PUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL_OW 248
13309: ST_TO_ADDR
// case nat of 1 :
13310: LD_VAR 0 4
13314: PUSH
13315: LD_INT 1
13317: DOUBLE
13318: EQUAL
13319: IFTRUE 13323
13321: GO 13334
13323: POP
// tech := tech_lassight ; 2 :
13324: LD_ADDR_VAR 0 5
13328: PUSH
13329: LD_INT 12
13331: ST_TO_ADDR
13332: GO 13373
13334: LD_INT 2
13336: DOUBLE
13337: EQUAL
13338: IFTRUE 13342
13340: GO 13353
13342: POP
// tech := tech_mortar ; 3 :
13343: LD_ADDR_VAR 0 5
13347: PUSH
13348: LD_INT 41
13350: ST_TO_ADDR
13351: GO 13373
13353: LD_INT 3
13355: DOUBLE
13356: EQUAL
13357: IFTRUE 13361
13359: GO 13372
13361: POP
// tech := tech_bazooka ; end ;
13362: LD_ADDR_VAR 0 5
13366: PUSH
13367: LD_INT 44
13369: ST_TO_ADDR
13370: GO 13373
13372: POP
// if Researched ( side , tech ) then
13373: LD_VAR 0 3
13377: PPUSH
13378: LD_VAR 0 5
13382: PPUSH
13383: CALL_OW 325
13387: IFFALSE 13414
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13389: LD_ADDR_VAR 0 2
13393: PUSH
13394: LD_INT 5
13396: PUSH
13397: LD_INT 8
13399: PUSH
13400: LD_INT 9
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: LIST
13407: PUSH
13408: LD_VAR 0 4
13412: ARRAY
13413: ST_TO_ADDR
// end ;
13414: LD_VAR 0 2
13418: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13419: LD_INT 0
13421: PPUSH
13422: PPUSH
13423: PPUSH
// if not mines then
13424: LD_VAR 0 2
13428: NOT
13429: IFFALSE 13433
// exit ;
13431: GO 13577
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13433: LD_ADDR_VAR 0 5
13437: PUSH
13438: LD_INT 81
13440: PUSH
13441: LD_VAR 0 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 3
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 3
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// for i in mines do
13476: LD_ADDR_VAR 0 4
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: FOR_IN
13487: IFFALSE 13575
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13489: LD_VAR 0 4
13493: PUSH
13494: LD_INT 1
13496: ARRAY
13497: PPUSH
13498: LD_VAR 0 4
13502: PUSH
13503: LD_INT 2
13505: ARRAY
13506: PPUSH
13507: CALL_OW 458
13511: NOT
13512: IFFALSE 13516
// continue ;
13514: GO 13486
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13516: LD_VAR 0 4
13520: PUSH
13521: LD_INT 1
13523: ARRAY
13524: PPUSH
13525: LD_VAR 0 4
13529: PUSH
13530: LD_INT 2
13532: ARRAY
13533: PPUSH
13534: CALL_OW 428
13538: PUSH
13539: LD_VAR 0 5
13543: IN
13544: IFFALSE 13573
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13546: LD_VAR 0 4
13550: PUSH
13551: LD_INT 1
13553: ARRAY
13554: PPUSH
13555: LD_VAR 0 4
13559: PUSH
13560: LD_INT 2
13562: ARRAY
13563: PPUSH
13564: LD_VAR 0 1
13568: PPUSH
13569: CALL_OW 456
// end ;
13573: GO 13486
13575: POP
13576: POP
// end ;
13577: LD_VAR 0 3
13581: RET
// export function Count ( array ) ; begin
13582: LD_INT 0
13584: PPUSH
// result := array + 0 ;
13585: LD_ADDR_VAR 0 2
13589: PUSH
13590: LD_VAR 0 1
13594: PUSH
13595: LD_INT 0
13597: PLUS
13598: ST_TO_ADDR
// end ;
13599: LD_VAR 0 2
13603: RET
// export function IsEmpty ( building ) ; begin
13604: LD_INT 0
13606: PPUSH
// if not building then
13607: LD_VAR 0 1
13611: NOT
13612: IFFALSE 13616
// exit ;
13614: GO 13659
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13616: LD_ADDR_VAR 0 2
13620: PUSH
13621: LD_VAR 0 1
13625: PUSH
13626: LD_INT 22
13628: PUSH
13629: LD_VAR 0 1
13633: PPUSH
13634: CALL_OW 255
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 58
13645: PUSH
13646: EMPTY
13647: LIST
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PPUSH
13653: CALL_OW 69
13657: IN
13658: ST_TO_ADDR
// end ;
13659: LD_VAR 0 2
13663: RET
// export function IsNotFull ( building ) ; var places ; begin
13664: LD_INT 0
13666: PPUSH
13667: PPUSH
// if not building then
13668: LD_VAR 0 1
13672: NOT
13673: IFFALSE 13677
// exit ;
13675: GO 13705
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13677: LD_ADDR_VAR 0 2
13681: PUSH
13682: LD_VAR 0 1
13686: PPUSH
13687: LD_INT 3
13689: PUSH
13690: LD_INT 62
13692: PUSH
13693: EMPTY
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 72
13704: ST_TO_ADDR
// end ;
13705: LD_VAR 0 2
13709: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13710: LD_INT 0
13712: PPUSH
13713: PPUSH
13714: PPUSH
13715: PPUSH
// tmp := [ ] ;
13716: LD_ADDR_VAR 0 3
13720: PUSH
13721: EMPTY
13722: ST_TO_ADDR
// list := [ ] ;
13723: LD_ADDR_VAR 0 5
13727: PUSH
13728: EMPTY
13729: ST_TO_ADDR
// for i = 16 to 25 do
13730: LD_ADDR_VAR 0 4
13734: PUSH
13735: DOUBLE
13736: LD_INT 16
13738: DEC
13739: ST_TO_ADDR
13740: LD_INT 25
13742: PUSH
13743: FOR_TO
13744: IFFALSE 13817
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13746: LD_ADDR_VAR 0 3
13750: PUSH
13751: LD_VAR 0 3
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL_OW 255
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 91
13775: PUSH
13776: LD_VAR 0 1
13780: PUSH
13781: LD_INT 6
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 30
13791: PUSH
13792: LD_VAR 0 4
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: PPUSH
13809: CALL_OW 69
13813: ADD
13814: ST_TO_ADDR
13815: GO 13743
13817: POP
13818: POP
// for i = 1 to tmp do
13819: LD_ADDR_VAR 0 4
13823: PUSH
13824: DOUBLE
13825: LD_INT 1
13827: DEC
13828: ST_TO_ADDR
13829: LD_VAR 0 3
13833: PUSH
13834: FOR_TO
13835: IFFALSE 13923
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13837: LD_ADDR_VAR 0 5
13841: PUSH
13842: LD_VAR 0 5
13846: PUSH
13847: LD_VAR 0 3
13851: PUSH
13852: LD_VAR 0 4
13856: ARRAY
13857: PPUSH
13858: CALL_OW 266
13862: PUSH
13863: LD_VAR 0 3
13867: PUSH
13868: LD_VAR 0 4
13872: ARRAY
13873: PPUSH
13874: CALL_OW 250
13878: PUSH
13879: LD_VAR 0 3
13883: PUSH
13884: LD_VAR 0 4
13888: ARRAY
13889: PPUSH
13890: CALL_OW 251
13894: PUSH
13895: LD_VAR 0 3
13899: PUSH
13900: LD_VAR 0 4
13904: ARRAY
13905: PPUSH
13906: CALL_OW 254
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: ADD
13920: ST_TO_ADDR
13921: GO 13834
13923: POP
13924: POP
// result := list ;
13925: LD_ADDR_VAR 0 2
13929: PUSH
13930: LD_VAR 0 5
13934: ST_TO_ADDR
// end ;
13935: LD_VAR 0 2
13939: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13940: LD_INT 0
13942: PPUSH
13943: PPUSH
13944: PPUSH
13945: PPUSH
13946: PPUSH
13947: PPUSH
13948: PPUSH
// if not factory then
13949: LD_VAR 0 1
13953: NOT
13954: IFFALSE 13958
// exit ;
13956: GO 14561
// if control = control_apeman then
13958: LD_VAR 0 4
13962: PUSH
13963: LD_INT 5
13965: EQUAL
13966: IFFALSE 14075
// begin tmp := UnitsInside ( factory ) ;
13968: LD_ADDR_VAR 0 8
13972: PUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 313
13982: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13983: LD_VAR 0 8
13987: PPUSH
13988: LD_INT 25
13990: PUSH
13991: LD_INT 12
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 72
14002: NOT
14003: IFFALSE 14013
// control := control_manual ;
14005: LD_ADDR_VAR 0 4
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14013: LD_ADDR_VAR 0 8
14017: PUSH
14018: LD_VAR 0 1
14022: PPUSH
14023: CALL 13710 0 1
14027: ST_TO_ADDR
// if tmp then
14028: LD_VAR 0 8
14032: IFFALSE 14075
// begin for i in tmp do
14034: LD_ADDR_VAR 0 7
14038: PUSH
14039: LD_VAR 0 8
14043: PUSH
14044: FOR_IN
14045: IFFALSE 14073
// if i [ 1 ] = b_ext_radio then
14047: LD_VAR 0 7
14051: PUSH
14052: LD_INT 1
14054: ARRAY
14055: PUSH
14056: LD_INT 22
14058: EQUAL
14059: IFFALSE 14071
// begin control := control_remote ;
14061: LD_ADDR_VAR 0 4
14065: PUSH
14066: LD_INT 2
14068: ST_TO_ADDR
// break ;
14069: GO 14073
// end ;
14071: GO 14044
14073: POP
14074: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14075: LD_VAR 0 1
14079: PPUSH
14080: LD_VAR 0 2
14084: PPUSH
14085: LD_VAR 0 3
14089: PPUSH
14090: LD_VAR 0 4
14094: PPUSH
14095: LD_VAR 0 5
14099: PPUSH
14100: CALL_OW 448
14104: IFFALSE 14139
// begin result := [ chassis , engine , control , weapon ] ;
14106: LD_ADDR_VAR 0 6
14110: PUSH
14111: LD_VAR 0 2
14115: PUSH
14116: LD_VAR 0 3
14120: PUSH
14121: LD_VAR 0 4
14125: PUSH
14126: LD_VAR 0 5
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: ST_TO_ADDR
// exit ;
14137: GO 14561
// end ; _chassis := AvailableChassisList ( factory ) ;
14139: LD_ADDR_VAR 0 9
14143: PUSH
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 475
14153: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14154: LD_ADDR_VAR 0 11
14158: PUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 476
14168: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14169: LD_ADDR_VAR 0 12
14173: PUSH
14174: LD_VAR 0 1
14178: PPUSH
14179: CALL_OW 477
14183: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14184: LD_ADDR_VAR 0 10
14188: PUSH
14189: LD_VAR 0 1
14193: PPUSH
14194: CALL_OW 478
14198: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14199: LD_VAR 0 9
14203: NOT
14204: IFTRUE 14213
14206: PUSH
14207: LD_VAR 0 11
14211: NOT
14212: OR
14213: IFTRUE 14222
14215: PUSH
14216: LD_VAR 0 12
14220: NOT
14221: OR
14222: IFTRUE 14231
14224: PUSH
14225: LD_VAR 0 10
14229: NOT
14230: OR
14231: IFFALSE 14266
// begin result := [ chassis , engine , control , weapon ] ;
14233: LD_ADDR_VAR 0 6
14237: PUSH
14238: LD_VAR 0 2
14242: PUSH
14243: LD_VAR 0 3
14247: PUSH
14248: LD_VAR 0 4
14252: PUSH
14253: LD_VAR 0 5
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: ST_TO_ADDR
// exit ;
14264: GO 14561
// end ; if not chassis in _chassis then
14266: LD_VAR 0 2
14270: PUSH
14271: LD_VAR 0 9
14275: IN
14276: NOT
14277: IFFALSE 14303
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: LD_VAR 0 9
14288: PUSH
14289: LD_INT 1
14291: PPUSH
14292: LD_VAR 0 9
14296: PPUSH
14297: CALL_OW 12
14301: ARRAY
14302: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14303: LD_VAR 0 2
14307: PPUSH
14308: LD_VAR 0 3
14312: PPUSH
14313: CALL 14566 0 2
14317: NOT
14318: IFFALSE 14379
// repeat engine := _engine [ 1 ] ;
14320: LD_ADDR_VAR 0 3
14324: PUSH
14325: LD_VAR 0 11
14329: PUSH
14330: LD_INT 1
14332: ARRAY
14333: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14334: LD_ADDR_VAR 0 11
14338: PUSH
14339: LD_VAR 0 11
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 3
14351: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14352: LD_VAR 0 2
14356: PPUSH
14357: LD_VAR 0 3
14361: PPUSH
14362: CALL 14566 0 2
14366: IFTRUE 14377
14368: PUSH
14369: LD_VAR 0 11
14373: PUSH
14374: EMPTY
14375: EQUAL
14376: OR
14377: IFFALSE 14320
// if not control in _control then
14379: LD_VAR 0 4
14383: PUSH
14384: LD_VAR 0 12
14388: IN
14389: NOT
14390: IFFALSE 14416
// control := _control [ rand ( 1 , _control ) ] ;
14392: LD_ADDR_VAR 0 4
14396: PUSH
14397: LD_VAR 0 12
14401: PUSH
14402: LD_INT 1
14404: PPUSH
14405: LD_VAR 0 12
14409: PPUSH
14410: CALL_OW 12
14414: ARRAY
14415: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14416: LD_VAR 0 2
14420: PPUSH
14421: LD_VAR 0 5
14425: PPUSH
14426: CALL 14788 0 2
14430: NOT
14431: IFFALSE 14492
// repeat weapon := _weapon [ 1 ] ;
14433: LD_ADDR_VAR 0 5
14437: PUSH
14438: LD_VAR 0 10
14442: PUSH
14443: LD_INT 1
14445: ARRAY
14446: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14447: LD_ADDR_VAR 0 10
14451: PUSH
14452: LD_VAR 0 10
14456: PPUSH
14457: LD_INT 1
14459: PPUSH
14460: CALL_OW 3
14464: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14465: LD_VAR 0 2
14469: PPUSH
14470: LD_VAR 0 5
14474: PPUSH
14475: CALL 14788 0 2
14479: IFTRUE 14490
14481: PUSH
14482: LD_VAR 0 10
14486: PUSH
14487: EMPTY
14488: EQUAL
14489: OR
14490: IFFALSE 14433
// result := [ ] ;
14492: LD_ADDR_VAR 0 6
14496: PUSH
14497: EMPTY
14498: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14499: LD_VAR 0 1
14503: PPUSH
14504: LD_VAR 0 2
14508: PPUSH
14509: LD_VAR 0 3
14513: PPUSH
14514: LD_VAR 0 4
14518: PPUSH
14519: LD_VAR 0 5
14523: PPUSH
14524: CALL_OW 448
14528: IFFALSE 14561
// result := [ chassis , engine , control , weapon ] ;
14530: LD_ADDR_VAR 0 6
14534: PUSH
14535: LD_VAR 0 2
14539: PUSH
14540: LD_VAR 0 3
14544: PUSH
14545: LD_VAR 0 4
14549: PUSH
14550: LD_VAR 0 5
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: ST_TO_ADDR
// end ;
14561: LD_VAR 0 6
14565: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14566: LD_INT 0
14568: PPUSH
// if not chassis or not engine then
14569: LD_VAR 0 1
14573: NOT
14574: IFTRUE 14583
14576: PUSH
14577: LD_VAR 0 2
14581: NOT
14582: OR
14583: IFFALSE 14587
// exit ;
14585: GO 14783
// case engine of engine_solar :
14587: LD_VAR 0 2
14591: PUSH
14592: LD_INT 2
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14638
14600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14601: LD_ADDR_VAR 0 3
14605: PUSH
14606: LD_INT 11
14608: PUSH
14609: LD_INT 12
14611: PUSH
14612: LD_INT 13
14614: PUSH
14615: LD_INT 14
14617: PUSH
14618: LD_INT 1
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: ST_TO_ADDR
14636: GO 14767
14638: LD_INT 1
14640: DOUBLE
14641: EQUAL
14642: IFTRUE 14646
14644: GO 14708
14646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14647: LD_ADDR_VAR 0 3
14651: PUSH
14652: LD_INT 11
14654: PUSH
14655: LD_INT 12
14657: PUSH
14658: LD_INT 13
14660: PUSH
14661: LD_INT 14
14663: PUSH
14664: LD_INT 1
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: LD_INT 4
14675: PUSH
14676: LD_INT 5
14678: PUSH
14679: LD_INT 21
14681: PUSH
14682: LD_INT 23
14684: PUSH
14685: LD_INT 22
14687: PUSH
14688: LD_INT 24
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: ST_TO_ADDR
14706: GO 14767
14708: LD_INT 3
14710: DOUBLE
14711: EQUAL
14712: IFTRUE 14716
14714: GO 14766
14716: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14717: LD_ADDR_VAR 0 3
14721: PUSH
14722: LD_INT 13
14724: PUSH
14725: LD_INT 14
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: LD_INT 4
14736: PUSH
14737: LD_INT 5
14739: PUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 22
14745: PUSH
14746: LD_INT 23
14748: PUSH
14749: LD_INT 24
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: ST_TO_ADDR
14764: GO 14767
14766: POP
// result := ( chassis in result ) ;
14767: LD_ADDR_VAR 0 3
14771: PUSH
14772: LD_VAR 0 1
14776: PUSH
14777: LD_VAR 0 3
14781: IN
14782: ST_TO_ADDR
// end ;
14783: LD_VAR 0 3
14787: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14788: LD_INT 0
14790: PPUSH
// if not chassis or not weapon then
14791: LD_VAR 0 1
14795: NOT
14796: IFTRUE 14805
14798: PUSH
14799: LD_VAR 0 2
14803: NOT
14804: OR
14805: IFFALSE 14809
// exit ;
14807: GO 15903
// case weapon of us_machine_gun :
14809: LD_VAR 0 2
14813: PUSH
14814: LD_INT 2
14816: DOUBLE
14817: EQUAL
14818: IFTRUE 14822
14820: GO 14852
14822: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14823: LD_ADDR_VAR 0 3
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: LD_INT 3
14836: PUSH
14837: LD_INT 4
14839: PUSH
14840: LD_INT 5
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: ST_TO_ADDR
14850: GO 15887
14852: LD_INT 3
14854: DOUBLE
14855: EQUAL
14856: IFTRUE 14860
14858: GO 14890
14860: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_INT 1
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: LD_INT 3
14874: PUSH
14875: LD_INT 4
14877: PUSH
14878: LD_INT 5
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15887
14890: LD_INT 11
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 14928
14898: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: LD_INT 4
14915: PUSH
14916: LD_INT 5
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: ST_TO_ADDR
14926: GO 15887
14928: LD_INT 4
14930: DOUBLE
14931: EQUAL
14932: IFTRUE 14936
14934: GO 14962
14936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14937: LD_ADDR_VAR 0 3
14941: PUSH
14942: LD_INT 2
14944: PUSH
14945: LD_INT 3
14947: PUSH
14948: LD_INT 4
14950: PUSH
14951: LD_INT 5
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: ST_TO_ADDR
14960: GO 15887
14962: LD_INT 5
14964: DOUBLE
14965: EQUAL
14966: IFTRUE 14970
14968: GO 14996
14970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_INT 2
14978: PUSH
14979: LD_INT 3
14981: PUSH
14982: LD_INT 4
14984: PUSH
14985: LD_INT 5
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: ST_TO_ADDR
14994: GO 15887
14996: LD_INT 9
14998: DOUBLE
14999: EQUAL
15000: IFTRUE 15004
15002: GO 15030
15004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15005: LD_ADDR_VAR 0 3
15009: PUSH
15010: LD_INT 2
15012: PUSH
15013: LD_INT 3
15015: PUSH
15016: LD_INT 4
15018: PUSH
15019: LD_INT 5
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: ST_TO_ADDR
15028: GO 15887
15030: LD_INT 7
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15064
15038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15039: LD_ADDR_VAR 0 3
15043: PUSH
15044: LD_INT 2
15046: PUSH
15047: LD_INT 3
15049: PUSH
15050: LD_INT 4
15052: PUSH
15053: LD_INT 5
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: ST_TO_ADDR
15062: GO 15887
15064: LD_INT 12
15066: DOUBLE
15067: EQUAL
15068: IFTRUE 15072
15070: GO 15098
15072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 2
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: LD_INT 4
15086: PUSH
15087: LD_INT 5
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: ST_TO_ADDR
15096: GO 15887
15098: LD_INT 13
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15132
15106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15107: LD_ADDR_VAR 0 3
15111: PUSH
15112: LD_INT 2
15114: PUSH
15115: LD_INT 3
15117: PUSH
15118: LD_INT 4
15120: PUSH
15121: LD_INT 5
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
15130: GO 15887
15132: LD_INT 14
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15158
15140: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15141: LD_ADDR_VAR 0 3
15145: PUSH
15146: LD_INT 4
15148: PUSH
15149: LD_INT 5
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: ST_TO_ADDR
15156: GO 15887
15158: LD_INT 6
15160: DOUBLE
15161: EQUAL
15162: IFTRUE 15166
15164: GO 15184
15166: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15167: LD_ADDR_VAR 0 3
15171: PUSH
15172: LD_INT 4
15174: PUSH
15175: LD_INT 5
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: ST_TO_ADDR
15182: GO 15887
15184: LD_INT 10
15186: DOUBLE
15187: EQUAL
15188: IFTRUE 15192
15190: GO 15210
15192: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 4
15200: PUSH
15201: LD_INT 5
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: ST_TO_ADDR
15208: GO 15887
15210: LD_INT 22
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15244
15218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15219: LD_ADDR_VAR 0 3
15223: PUSH
15224: LD_INT 11
15226: PUSH
15227: LD_INT 12
15229: PUSH
15230: LD_INT 13
15232: PUSH
15233: LD_INT 14
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: ST_TO_ADDR
15242: GO 15887
15244: LD_INT 23
15246: DOUBLE
15247: EQUAL
15248: IFTRUE 15252
15250: GO 15278
15252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15253: LD_ADDR_VAR 0 3
15257: PUSH
15258: LD_INT 11
15260: PUSH
15261: LD_INT 12
15263: PUSH
15264: LD_INT 13
15266: PUSH
15267: LD_INT 14
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: ST_TO_ADDR
15276: GO 15887
15278: LD_INT 24
15280: DOUBLE
15281: EQUAL
15282: IFTRUE 15286
15284: GO 15312
15286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15287: LD_ADDR_VAR 0 3
15291: PUSH
15292: LD_INT 11
15294: PUSH
15295: LD_INT 12
15297: PUSH
15298: LD_INT 13
15300: PUSH
15301: LD_INT 14
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
15310: GO 15887
15312: LD_INT 30
15314: DOUBLE
15315: EQUAL
15316: IFTRUE 15320
15318: GO 15346
15320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15321: LD_ADDR_VAR 0 3
15325: PUSH
15326: LD_INT 11
15328: PUSH
15329: LD_INT 12
15331: PUSH
15332: LD_INT 13
15334: PUSH
15335: LD_INT 14
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: ST_TO_ADDR
15344: GO 15887
15346: LD_INT 25
15348: DOUBLE
15349: EQUAL
15350: IFTRUE 15354
15352: GO 15372
15354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_INT 13
15362: PUSH
15363: LD_INT 14
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: ST_TO_ADDR
15370: GO 15887
15372: LD_INT 27
15374: DOUBLE
15375: EQUAL
15376: IFTRUE 15380
15378: GO 15398
15380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15381: LD_ADDR_VAR 0 3
15385: PUSH
15386: LD_INT 13
15388: PUSH
15389: LD_INT 14
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: ST_TO_ADDR
15396: GO 15887
15398: LD_INT 92
15400: DOUBLE
15401: EQUAL
15402: IFTRUE 15406
15404: GO 15432
15406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15407: LD_ADDR_VAR 0 3
15411: PUSH
15412: LD_INT 11
15414: PUSH
15415: LD_INT 12
15417: PUSH
15418: LD_INT 13
15420: PUSH
15421: LD_INT 14
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: ST_TO_ADDR
15430: GO 15887
15432: LD_INT 28
15434: DOUBLE
15435: EQUAL
15436: IFTRUE 15440
15438: GO 15458
15440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_INT 13
15448: PUSH
15449: LD_INT 14
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: ST_TO_ADDR
15456: GO 15887
15458: LD_INT 29
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15484
15466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15467: LD_ADDR_VAR 0 3
15471: PUSH
15472: LD_INT 13
15474: PUSH
15475: LD_INT 14
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: ST_TO_ADDR
15482: GO 15887
15484: LD_INT 31
15486: DOUBLE
15487: EQUAL
15488: IFTRUE 15492
15490: GO 15510
15492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15493: LD_ADDR_VAR 0 3
15497: PUSH
15498: LD_INT 13
15500: PUSH
15501: LD_INT 14
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: ST_TO_ADDR
15508: GO 15887
15510: LD_INT 26
15512: DOUBLE
15513: EQUAL
15514: IFTRUE 15518
15516: GO 15536
15518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_INT 13
15526: PUSH
15527: LD_INT 14
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: ST_TO_ADDR
15534: GO 15887
15536: LD_INT 42
15538: DOUBLE
15539: EQUAL
15540: IFTRUE 15544
15542: GO 15570
15544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15545: LD_ADDR_VAR 0 3
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 22
15555: PUSH
15556: LD_INT 23
15558: PUSH
15559: LD_INT 24
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: ST_TO_ADDR
15568: GO 15887
15570: LD_INT 43
15572: DOUBLE
15573: EQUAL
15574: IFTRUE 15578
15576: GO 15604
15578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15579: LD_ADDR_VAR 0 3
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 22
15589: PUSH
15590: LD_INT 23
15592: PUSH
15593: LD_INT 24
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: ST_TO_ADDR
15602: GO 15887
15604: LD_INT 44
15606: DOUBLE
15607: EQUAL
15608: IFTRUE 15612
15610: GO 15638
15612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15613: LD_ADDR_VAR 0 3
15617: PUSH
15618: LD_INT 21
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_INT 23
15626: PUSH
15627: LD_INT 24
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: ST_TO_ADDR
15636: GO 15887
15638: LD_INT 45
15640: DOUBLE
15641: EQUAL
15642: IFTRUE 15646
15644: GO 15672
15646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15647: LD_ADDR_VAR 0 3
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 22
15657: PUSH
15658: LD_INT 23
15660: PUSH
15661: LD_INT 24
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: ST_TO_ADDR
15670: GO 15887
15672: LD_INT 49
15674: DOUBLE
15675: EQUAL
15676: IFTRUE 15680
15678: GO 15706
15680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15681: LD_ADDR_VAR 0 3
15685: PUSH
15686: LD_INT 21
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_INT 23
15694: PUSH
15695: LD_INT 24
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: ST_TO_ADDR
15704: GO 15887
15706: LD_INT 51
15708: DOUBLE
15709: EQUAL
15710: IFTRUE 15714
15712: GO 15740
15714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15715: LD_ADDR_VAR 0 3
15719: PUSH
15720: LD_INT 21
15722: PUSH
15723: LD_INT 22
15725: PUSH
15726: LD_INT 23
15728: PUSH
15729: LD_INT 24
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: ST_TO_ADDR
15738: GO 15887
15740: LD_INT 52
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15774
15748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15749: LD_ADDR_VAR 0 3
15753: PUSH
15754: LD_INT 21
15756: PUSH
15757: LD_INT 22
15759: PUSH
15760: LD_INT 23
15762: PUSH
15763: LD_INT 24
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: ST_TO_ADDR
15772: GO 15887
15774: LD_INT 53
15776: DOUBLE
15777: EQUAL
15778: IFTRUE 15782
15780: GO 15800
15782: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15783: LD_ADDR_VAR 0 3
15787: PUSH
15788: LD_INT 23
15790: PUSH
15791: LD_INT 24
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: ST_TO_ADDR
15798: GO 15887
15800: LD_INT 46
15802: DOUBLE
15803: EQUAL
15804: IFTRUE 15808
15806: GO 15826
15808: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15809: LD_ADDR_VAR 0 3
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: LD_INT 24
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: ST_TO_ADDR
15824: GO 15887
15826: LD_INT 47
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 15852
15834: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_INT 23
15842: PUSH
15843: LD_INT 24
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: ST_TO_ADDR
15850: GO 15887
15852: LD_INT 98
15854: DOUBLE
15855: EQUAL
15856: IFTRUE 15860
15858: GO 15886
15860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15861: LD_ADDR_VAR 0 3
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 22
15871: PUSH
15872: LD_INT 23
15874: PUSH
15875: LD_INT 24
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: ST_TO_ADDR
15884: GO 15887
15886: POP
// result := ( chassis in result ) ;
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: LD_VAR 0 1
15896: PUSH
15897: LD_VAR 0 3
15901: IN
15902: ST_TO_ADDR
// end ;
15903: LD_VAR 0 3
15907: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15908: LD_INT 0
15910: PPUSH
15911: PPUSH
15912: PPUSH
15913: PPUSH
15914: PPUSH
15915: PPUSH
15916: PPUSH
// result := array ;
15917: LD_ADDR_VAR 0 5
15921: PUSH
15922: LD_VAR 0 1
15926: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15927: LD_VAR 0 1
15931: NOT
15932: IFTRUE 15941
15934: PUSH
15935: LD_VAR 0 2
15939: NOT
15940: OR
15941: IFTRUE 15950
15943: PUSH
15944: LD_VAR 0 3
15948: NOT
15949: OR
15950: IFTRUE 15964
15952: PUSH
15953: LD_VAR 0 2
15957: PUSH
15958: LD_VAR 0 1
15962: GREATER
15963: OR
15964: IFTRUE 15978
15966: PUSH
15967: LD_VAR 0 3
15971: PUSH
15972: LD_VAR 0 1
15976: GREATER
15977: OR
15978: IFFALSE 15982
// exit ;
15980: GO 16278
// if direction then
15982: LD_VAR 0 4
15986: IFFALSE 16050
// begin d := 1 ;
15988: LD_ADDR_VAR 0 9
15992: PUSH
15993: LD_INT 1
15995: ST_TO_ADDR
// if i_from > i_to then
15996: LD_VAR 0 2
16000: PUSH
16001: LD_VAR 0 3
16005: GREATER
16006: IFFALSE 16032
// length := ( array - i_from ) + i_to else
16008: LD_ADDR_VAR 0 11
16012: PUSH
16013: LD_VAR 0 1
16017: PUSH
16018: LD_VAR 0 2
16022: MINUS
16023: PUSH
16024: LD_VAR 0 3
16028: PLUS
16029: ST_TO_ADDR
16030: GO 16048
// length := i_to - i_from ;
16032: LD_ADDR_VAR 0 11
16036: PUSH
16037: LD_VAR 0 3
16041: PUSH
16042: LD_VAR 0 2
16046: MINUS
16047: ST_TO_ADDR
// end else
16048: GO 16111
// begin d := - 1 ;
16050: LD_ADDR_VAR 0 9
16054: PUSH
16055: LD_INT 1
16057: NEG
16058: ST_TO_ADDR
// if i_from > i_to then
16059: LD_VAR 0 2
16063: PUSH
16064: LD_VAR 0 3
16068: GREATER
16069: IFFALSE 16089
// length := i_from - i_to else
16071: LD_ADDR_VAR 0 11
16075: PUSH
16076: LD_VAR 0 2
16080: PUSH
16081: LD_VAR 0 3
16085: MINUS
16086: ST_TO_ADDR
16087: GO 16111
// length := ( array - i_to ) + i_from ;
16089: LD_ADDR_VAR 0 11
16093: PUSH
16094: LD_VAR 0 1
16098: PUSH
16099: LD_VAR 0 3
16103: MINUS
16104: PUSH
16105: LD_VAR 0 2
16109: PLUS
16110: ST_TO_ADDR
// end ; if not length then
16111: LD_VAR 0 11
16115: NOT
16116: IFFALSE 16120
// exit ;
16118: GO 16278
// tmp := array ;
16120: LD_ADDR_VAR 0 10
16124: PUSH
16125: LD_VAR 0 1
16129: ST_TO_ADDR
// for i = 1 to length do
16130: LD_ADDR_VAR 0 6
16134: PUSH
16135: DOUBLE
16136: LD_INT 1
16138: DEC
16139: ST_TO_ADDR
16140: LD_VAR 0 11
16144: PUSH
16145: FOR_TO
16146: IFFALSE 16266
// begin for j = 1 to array do
16148: LD_ADDR_VAR 0 7
16152: PUSH
16153: DOUBLE
16154: LD_INT 1
16156: DEC
16157: ST_TO_ADDR
16158: LD_VAR 0 1
16162: PUSH
16163: FOR_TO
16164: IFFALSE 16252
// begin k := j + d ;
16166: LD_ADDR_VAR 0 8
16170: PUSH
16171: LD_VAR 0 7
16175: PUSH
16176: LD_VAR 0 9
16180: PLUS
16181: ST_TO_ADDR
// if k > array then
16182: LD_VAR 0 8
16186: PUSH
16187: LD_VAR 0 1
16191: GREATER
16192: IFFALSE 16202
// k := 1 ;
16194: LD_ADDR_VAR 0 8
16198: PUSH
16199: LD_INT 1
16201: ST_TO_ADDR
// if not k then
16202: LD_VAR 0 8
16206: NOT
16207: IFFALSE 16219
// k := array ;
16209: LD_ADDR_VAR 0 8
16213: PUSH
16214: LD_VAR 0 1
16218: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16219: LD_ADDR_VAR 0 10
16223: PUSH
16224: LD_VAR 0 10
16228: PPUSH
16229: LD_VAR 0 8
16233: PPUSH
16234: LD_VAR 0 1
16238: PUSH
16239: LD_VAR 0 7
16243: ARRAY
16244: PPUSH
16245: CALL_OW 1
16249: ST_TO_ADDR
// end ;
16250: GO 16163
16252: POP
16253: POP
// array := tmp ;
16254: LD_ADDR_VAR 0 1
16258: PUSH
16259: LD_VAR 0 10
16263: ST_TO_ADDR
// end ;
16264: GO 16145
16266: POP
16267: POP
// result := array ;
16268: LD_ADDR_VAR 0 5
16272: PUSH
16273: LD_VAR 0 1
16277: ST_TO_ADDR
// end ;
16278: LD_VAR 0 5
16282: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16283: LD_INT 0
16285: PPUSH
16286: PPUSH
// result := 0 ;
16287: LD_ADDR_VAR 0 3
16291: PUSH
16292: LD_INT 0
16294: ST_TO_ADDR
// if not array or not value in array then
16295: LD_VAR 0 1
16299: NOT
16300: IFTRUE 16315
16302: PUSH
16303: LD_VAR 0 2
16307: PUSH
16308: LD_VAR 0 1
16312: IN
16313: NOT
16314: OR
16315: IFFALSE 16319
// exit ;
16317: GO 16373
// for i = 1 to array do
16319: LD_ADDR_VAR 0 4
16323: PUSH
16324: DOUBLE
16325: LD_INT 1
16327: DEC
16328: ST_TO_ADDR
16329: LD_VAR 0 1
16333: PUSH
16334: FOR_TO
16335: IFFALSE 16371
// if value = array [ i ] then
16337: LD_VAR 0 2
16341: PUSH
16342: LD_VAR 0 1
16346: PUSH
16347: LD_VAR 0 4
16351: ARRAY
16352: EQUAL
16353: IFFALSE 16369
// begin result := i ;
16355: LD_ADDR_VAR 0 3
16359: PUSH
16360: LD_VAR 0 4
16364: ST_TO_ADDR
// exit ;
16365: POP
16366: POP
16367: GO 16373
// end ;
16369: GO 16334
16371: POP
16372: POP
// end ;
16373: LD_VAR 0 3
16377: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16378: LD_INT 0
16380: PPUSH
// vc_chassis := chassis ;
16381: LD_ADDR_OWVAR 37
16385: PUSH
16386: LD_VAR 0 1
16390: ST_TO_ADDR
// vc_engine := engine ;
16391: LD_ADDR_OWVAR 39
16395: PUSH
16396: LD_VAR 0 2
16400: ST_TO_ADDR
// vc_control := control ;
16401: LD_ADDR_OWVAR 38
16405: PUSH
16406: LD_VAR 0 3
16410: ST_TO_ADDR
// vc_weapon := weapon ;
16411: LD_ADDR_OWVAR 40
16415: PUSH
16416: LD_VAR 0 4
16420: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16421: LD_ADDR_OWVAR 41
16425: PUSH
16426: LD_VAR 0 5
16430: ST_TO_ADDR
// end ;
16431: LD_VAR 0 6
16435: RET
// export function WantPlant ( unit ) ; var task ; begin
16436: LD_INT 0
16438: PPUSH
16439: PPUSH
// result := false ;
16440: LD_ADDR_VAR 0 2
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16448: LD_ADDR_VAR 0 3
16452: PUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 437
16462: ST_TO_ADDR
// if task then
16463: LD_VAR 0 3
16467: IFFALSE 16495
// if task [ 1 ] [ 1 ] = p then
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 1
16476: ARRAY
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PUSH
16482: LD_STRING p
16484: EQUAL
16485: IFFALSE 16495
// result := true ;
16487: LD_ADDR_VAR 0 2
16491: PUSH
16492: LD_INT 1
16494: ST_TO_ADDR
// end ;
16495: LD_VAR 0 2
16499: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16500: LD_INT 0
16502: PPUSH
16503: PPUSH
16504: PPUSH
16505: PPUSH
// if pos < 1 then
16506: LD_VAR 0 2
16510: PUSH
16511: LD_INT 1
16513: LESS
16514: IFFALSE 16518
// exit ;
16516: GO 16821
// if pos = 1 then
16518: LD_VAR 0 2
16522: PUSH
16523: LD_INT 1
16525: EQUAL
16526: IFFALSE 16559
// result := Replace ( arr , pos [ 1 ] , value ) else
16528: LD_ADDR_VAR 0 4
16532: PUSH
16533: LD_VAR 0 1
16537: PPUSH
16538: LD_VAR 0 2
16542: PUSH
16543: LD_INT 1
16545: ARRAY
16546: PPUSH
16547: LD_VAR 0 3
16551: PPUSH
16552: CALL_OW 1
16556: ST_TO_ADDR
16557: GO 16821
// begin tmp := arr ;
16559: LD_ADDR_VAR 0 6
16563: PUSH
16564: LD_VAR 0 1
16568: ST_TO_ADDR
// s_arr := [ tmp ] ;
16569: LD_ADDR_VAR 0 7
16573: PUSH
16574: LD_VAR 0 6
16578: PUSH
16579: EMPTY
16580: LIST
16581: ST_TO_ADDR
// for i = 1 to pos - 1 do
16582: LD_ADDR_VAR 0 5
16586: PUSH
16587: DOUBLE
16588: LD_INT 1
16590: DEC
16591: ST_TO_ADDR
16592: LD_VAR 0 2
16596: PUSH
16597: LD_INT 1
16599: MINUS
16600: PUSH
16601: FOR_TO
16602: IFFALSE 16647
// begin tmp := tmp [ pos [ i ] ] ;
16604: LD_ADDR_VAR 0 6
16608: PUSH
16609: LD_VAR 0 6
16613: PUSH
16614: LD_VAR 0 2
16618: PUSH
16619: LD_VAR 0 5
16623: ARRAY
16624: ARRAY
16625: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16626: LD_ADDR_VAR 0 7
16630: PUSH
16631: LD_VAR 0 7
16635: PUSH
16636: LD_VAR 0 6
16640: PUSH
16641: EMPTY
16642: LIST
16643: ADD
16644: ST_TO_ADDR
// end ;
16645: GO 16601
16647: POP
16648: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16649: LD_ADDR_VAR 0 6
16653: PUSH
16654: LD_VAR 0 6
16658: PPUSH
16659: LD_VAR 0 2
16663: PUSH
16664: LD_VAR 0 2
16668: ARRAY
16669: PPUSH
16670: LD_VAR 0 3
16674: PPUSH
16675: CALL_OW 1
16679: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16680: LD_ADDR_VAR 0 7
16684: PUSH
16685: LD_VAR 0 7
16689: PPUSH
16690: LD_VAR 0 7
16694: PPUSH
16695: LD_VAR 0 6
16699: PPUSH
16700: CALL_OW 1
16704: ST_TO_ADDR
// for i = s_arr downto 2 do
16705: LD_ADDR_VAR 0 5
16709: PUSH
16710: DOUBLE
16711: LD_VAR 0 7
16715: INC
16716: ST_TO_ADDR
16717: LD_INT 2
16719: PUSH
16720: FOR_DOWNTO
16721: IFFALSE 16805
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16723: LD_ADDR_VAR 0 6
16727: PUSH
16728: LD_VAR 0 7
16732: PUSH
16733: LD_VAR 0 5
16737: PUSH
16738: LD_INT 1
16740: MINUS
16741: ARRAY
16742: PPUSH
16743: LD_VAR 0 2
16747: PUSH
16748: LD_VAR 0 5
16752: PUSH
16753: LD_INT 1
16755: MINUS
16756: ARRAY
16757: PPUSH
16758: LD_VAR 0 7
16762: PUSH
16763: LD_VAR 0 5
16767: ARRAY
16768: PPUSH
16769: CALL_OW 1
16773: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16774: LD_ADDR_VAR 0 7
16778: PUSH
16779: LD_VAR 0 7
16783: PPUSH
16784: LD_VAR 0 5
16788: PUSH
16789: LD_INT 1
16791: MINUS
16792: PPUSH
16793: LD_VAR 0 6
16797: PPUSH
16798: CALL_OW 1
16802: ST_TO_ADDR
// end ;
16803: GO 16720
16805: POP
16806: POP
// result := s_arr [ 1 ] ;
16807: LD_ADDR_VAR 0 4
16811: PUSH
16812: LD_VAR 0 7
16816: PUSH
16817: LD_INT 1
16819: ARRAY
16820: ST_TO_ADDR
// end ; end ;
16821: LD_VAR 0 4
16825: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16826: LD_INT 0
16828: PPUSH
16829: PPUSH
// if not list then
16830: LD_VAR 0 1
16834: NOT
16835: IFFALSE 16839
// exit ;
16837: GO 16930
// i := list [ pos1 ] ;
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: LD_VAR 0 1
16848: PUSH
16849: LD_VAR 0 2
16853: ARRAY
16854: ST_TO_ADDR
// if not i then
16855: LD_VAR 0 5
16859: NOT
16860: IFFALSE 16864
// exit ;
16862: GO 16930
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: LD_VAR 0 2
16878: PPUSH
16879: LD_VAR 0 1
16883: PUSH
16884: LD_VAR 0 3
16888: ARRAY
16889: PPUSH
16890: CALL_OW 1
16894: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16895: LD_ADDR_VAR 0 1
16899: PUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_VAR 0 5
16914: PPUSH
16915: CALL_OW 1
16919: ST_TO_ADDR
// result := list ;
16920: LD_ADDR_VAR 0 4
16924: PUSH
16925: LD_VAR 0 1
16929: ST_TO_ADDR
// end ;
16930: LD_VAR 0 4
16934: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16935: LD_INT 0
16937: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16938: LD_ADDR_VAR 0 5
16942: PUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 250
16952: PPUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 251
16962: PPUSH
16963: LD_VAR 0 2
16967: PPUSH
16968: LD_VAR 0 3
16972: PPUSH
16973: LD_VAR 0 4
16977: PPUSH
16978: CALL 17360 0 5
16982: ST_TO_ADDR
// end ;
16983: LD_VAR 0 5
16987: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16988: LD_INT 0
16990: PPUSH
16991: PPUSH
16992: PPUSH
16993: PPUSH
// if not list or not unit then
16994: LD_VAR 0 2
16998: NOT
16999: IFTRUE 17008
17001: PUSH
17002: LD_VAR 0 1
17006: NOT
17007: OR
17008: IFFALSE 17012
// exit ;
17010: GO 17355
// result := [ ] ;
17012: LD_ADDR_VAR 0 5
17016: PUSH
17017: EMPTY
17018: ST_TO_ADDR
// for i in list do
17019: LD_ADDR_VAR 0 6
17023: PUSH
17024: LD_VAR 0 2
17028: PUSH
17029: FOR_IN
17030: IFFALSE 17248
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17032: LD_ADDR_VAR 0 8
17036: PUSH
17037: LD_VAR 0 1
17041: PPUSH
17042: LD_VAR 0 6
17046: PUSH
17047: LD_INT 1
17049: ARRAY
17050: PPUSH
17051: LD_VAR 0 6
17055: PUSH
17056: LD_INT 2
17058: ARRAY
17059: PPUSH
17060: CALL_OW 297
17064: ST_TO_ADDR
// if not Count ( result ) then
17065: LD_VAR 0 5
17069: PPUSH
17070: CALL 13582 0 1
17074: NOT
17075: IFFALSE 17108
// begin result := Join ( result , [ i , tmp ] ) ;
17077: LD_ADDR_VAR 0 5
17081: PUSH
17082: LD_VAR 0 5
17086: PPUSH
17087: LD_VAR 0 6
17091: PUSH
17092: LD_VAR 0 8
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL 49558 0 2
17105: ST_TO_ADDR
// continue ;
17106: GO 17029
// end ; if result [ result ] [ 2 ] <= tmp then
17108: LD_VAR 0 5
17112: PUSH
17113: LD_VAR 0 5
17117: ARRAY
17118: PUSH
17119: LD_INT 2
17121: ARRAY
17122: PUSH
17123: LD_VAR 0 8
17127: LESSEQUAL
17128: IFFALSE 17161
// result := Join ( result , [ i , tmp ] ) else
17130: LD_ADDR_VAR 0 5
17134: PUSH
17135: LD_VAR 0 5
17139: PPUSH
17140: LD_VAR 0 6
17144: PUSH
17145: LD_VAR 0 8
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PPUSH
17154: CALL 49558 0 2
17158: ST_TO_ADDR
17159: GO 17246
// begin for j := 1 to Count ( result ) do
17161: LD_ADDR_VAR 0 7
17165: PUSH
17166: DOUBLE
17167: LD_INT 1
17169: DEC
17170: ST_TO_ADDR
17171: LD_VAR 0 5
17175: PPUSH
17176: CALL 13582 0 1
17180: PUSH
17181: FOR_TO
17182: IFFALSE 17244
// begin if tmp < result [ j ] [ 2 ] then
17184: LD_VAR 0 8
17188: PUSH
17189: LD_VAR 0 5
17193: PUSH
17194: LD_VAR 0 7
17198: ARRAY
17199: PUSH
17200: LD_INT 2
17202: ARRAY
17203: LESS
17204: IFFALSE 17242
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17206: LD_ADDR_VAR 0 5
17210: PUSH
17211: LD_VAR 0 5
17215: PPUSH
17216: LD_VAR 0 7
17220: PPUSH
17221: LD_VAR 0 6
17225: PUSH
17226: LD_VAR 0 8
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL_OW 2
17239: ST_TO_ADDR
// break ;
17240: GO 17244
// end ; end ;
17242: GO 17181
17244: POP
17245: POP
// end ; end ;
17246: GO 17029
17248: POP
17249: POP
// if result and not asc then
17250: LD_VAR 0 5
17254: IFFALSE 17263
17256: PUSH
17257: LD_VAR 0 3
17261: NOT
17262: AND
17263: IFFALSE 17280
// result := ReverseArray ( result ) ;
17265: LD_ADDR_VAR 0 5
17269: PUSH
17270: LD_VAR 0 5
17274: PPUSH
17275: CALL 44638 0 1
17279: ST_TO_ADDR
// tmp := [ ] ;
17280: LD_ADDR_VAR 0 8
17284: PUSH
17285: EMPTY
17286: ST_TO_ADDR
// if mode then
17287: LD_VAR 0 4
17291: IFFALSE 17355
// begin for i := 1 to result do
17293: LD_ADDR_VAR 0 6
17297: PUSH
17298: DOUBLE
17299: LD_INT 1
17301: DEC
17302: ST_TO_ADDR
17303: LD_VAR 0 5
17307: PUSH
17308: FOR_TO
17309: IFFALSE 17343
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17311: LD_ADDR_VAR 0 8
17315: PUSH
17316: LD_VAR 0 8
17320: PPUSH
17321: LD_VAR 0 5
17325: PUSH
17326: LD_VAR 0 6
17330: ARRAY
17331: PUSH
17332: LD_INT 1
17334: ARRAY
17335: PPUSH
17336: CALL 49558 0 2
17340: ST_TO_ADDR
17341: GO 17308
17343: POP
17344: POP
// result := tmp ;
17345: LD_ADDR_VAR 0 5
17349: PUSH
17350: LD_VAR 0 8
17354: ST_TO_ADDR
// end ; end ;
17355: LD_VAR 0 5
17359: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17360: LD_INT 0
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
// if not list then
17366: LD_VAR 0 3
17370: NOT
17371: IFFALSE 17375
// exit ;
17373: GO 17765
// result := [ ] ;
17375: LD_ADDR_VAR 0 6
17379: PUSH
17380: EMPTY
17381: ST_TO_ADDR
// for i in list do
17382: LD_ADDR_VAR 0 7
17386: PUSH
17387: LD_VAR 0 3
17391: PUSH
17392: FOR_IN
17393: IFFALSE 17595
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17395: LD_ADDR_VAR 0 9
17399: PUSH
17400: LD_VAR 0 7
17404: PPUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: LD_VAR 0 2
17414: PPUSH
17415: CALL_OW 297
17419: ST_TO_ADDR
// if not result then
17420: LD_VAR 0 6
17424: NOT
17425: IFFALSE 17451
// result := [ [ i , tmp ] ] else
17427: LD_ADDR_VAR 0 6
17431: PUSH
17432: LD_VAR 0 7
17436: PUSH
17437: LD_VAR 0 9
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: ST_TO_ADDR
17449: GO 17593
// begin if result [ result ] [ 2 ] <= tmp then
17451: LD_VAR 0 6
17455: PUSH
17456: LD_VAR 0 6
17460: ARRAY
17461: PUSH
17462: LD_INT 2
17464: ARRAY
17465: PUSH
17466: LD_VAR 0 9
17470: LESSEQUAL
17471: IFFALSE 17513
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17473: LD_ADDR_VAR 0 6
17477: PUSH
17478: LD_VAR 0 6
17482: PPUSH
17483: LD_VAR 0 6
17487: PUSH
17488: LD_INT 1
17490: PLUS
17491: PPUSH
17492: LD_VAR 0 7
17496: PUSH
17497: LD_VAR 0 9
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL_OW 2
17510: ST_TO_ADDR
17511: GO 17593
// for j := 1 to result do
17513: LD_ADDR_VAR 0 8
17517: PUSH
17518: DOUBLE
17519: LD_INT 1
17521: DEC
17522: ST_TO_ADDR
17523: LD_VAR 0 6
17527: PUSH
17528: FOR_TO
17529: IFFALSE 17591
// begin if tmp < result [ j ] [ 2 ] then
17531: LD_VAR 0 9
17535: PUSH
17536: LD_VAR 0 6
17540: PUSH
17541: LD_VAR 0 8
17545: ARRAY
17546: PUSH
17547: LD_INT 2
17549: ARRAY
17550: LESS
17551: IFFALSE 17589
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17553: LD_ADDR_VAR 0 6
17557: PUSH
17558: LD_VAR 0 6
17562: PPUSH
17563: LD_VAR 0 8
17567: PPUSH
17568: LD_VAR 0 7
17572: PUSH
17573: LD_VAR 0 9
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 2
17586: ST_TO_ADDR
// break ;
17587: GO 17591
// end ; end ;
17589: GO 17528
17591: POP
17592: POP
// end ; end ;
17593: GO 17392
17595: POP
17596: POP
// if result and not asc then
17597: LD_VAR 0 6
17601: IFFALSE 17610
17603: PUSH
17604: LD_VAR 0 4
17608: NOT
17609: AND
17610: IFFALSE 17685
// begin tmp := result ;
17612: LD_ADDR_VAR 0 9
17616: PUSH
17617: LD_VAR 0 6
17621: ST_TO_ADDR
// for i = tmp downto 1 do
17622: LD_ADDR_VAR 0 7
17626: PUSH
17627: DOUBLE
17628: LD_VAR 0 9
17632: INC
17633: ST_TO_ADDR
17634: LD_INT 1
17636: PUSH
17637: FOR_DOWNTO
17638: IFFALSE 17683
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17640: LD_ADDR_VAR 0 6
17644: PUSH
17645: LD_VAR 0 6
17649: PPUSH
17650: LD_VAR 0 9
17654: PUSH
17655: LD_VAR 0 7
17659: MINUS
17660: PUSH
17661: LD_INT 1
17663: PLUS
17664: PPUSH
17665: LD_VAR 0 9
17669: PUSH
17670: LD_VAR 0 7
17674: ARRAY
17675: PPUSH
17676: CALL_OW 1
17680: ST_TO_ADDR
17681: GO 17637
17683: POP
17684: POP
// end ; tmp := [ ] ;
17685: LD_ADDR_VAR 0 9
17689: PUSH
17690: EMPTY
17691: ST_TO_ADDR
// if mode then
17692: LD_VAR 0 5
17696: IFFALSE 17765
// begin for i = 1 to result do
17698: LD_ADDR_VAR 0 7
17702: PUSH
17703: DOUBLE
17704: LD_INT 1
17706: DEC
17707: ST_TO_ADDR
17708: LD_VAR 0 6
17712: PUSH
17713: FOR_TO
17714: IFFALSE 17753
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17716: LD_ADDR_VAR 0 9
17720: PUSH
17721: LD_VAR 0 9
17725: PPUSH
17726: LD_VAR 0 7
17730: PPUSH
17731: LD_VAR 0 6
17735: PUSH
17736: LD_VAR 0 7
17740: ARRAY
17741: PUSH
17742: LD_INT 1
17744: ARRAY
17745: PPUSH
17746: CALL_OW 1
17750: ST_TO_ADDR
17751: GO 17713
17753: POP
17754: POP
// result := tmp ;
17755: LD_ADDR_VAR 0 6
17759: PUSH
17760: LD_VAR 0 9
17764: ST_TO_ADDR
// end ; end ;
17765: LD_VAR 0 6
17769: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17770: LD_INT 0
17772: PPUSH
17773: PPUSH
17774: PPUSH
17775: PPUSH
17776: PPUSH
17777: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17778: LD_ADDR_VAR 0 5
17782: PUSH
17783: LD_INT 0
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: EMPTY
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: ST_TO_ADDR
// if not x or not y then
17800: LD_VAR 0 2
17804: NOT
17805: IFTRUE 17814
17807: PUSH
17808: LD_VAR 0 3
17812: NOT
17813: OR
17814: IFFALSE 17818
// exit ;
17816: GO 19474
// if not range then
17818: LD_VAR 0 4
17822: NOT
17823: IFFALSE 17833
// range := 10 ;
17825: LD_ADDR_VAR 0 4
17829: PUSH
17830: LD_INT 10
17832: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17833: LD_ADDR_VAR 0 8
17837: PUSH
17838: LD_INT 81
17840: PUSH
17841: LD_VAR 0 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 92
17852: PUSH
17853: LD_VAR 0 2
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_VAR 0 4
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 3
17876: PUSH
17877: LD_INT 21
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: ST_TO_ADDR
// if not tmp then
17901: LD_VAR 0 8
17905: NOT
17906: IFFALSE 17910
// exit ;
17908: GO 19474
// for i in tmp do
17910: LD_ADDR_VAR 0 6
17914: PUSH
17915: LD_VAR 0 8
17919: PUSH
17920: FOR_IN
17921: IFFALSE 19449
// begin points := [ 0 , 0 , 0 ] ;
17923: LD_ADDR_VAR 0 9
17927: PUSH
17928: LD_INT 0
17930: PUSH
17931: LD_INT 0
17933: PUSH
17934: LD_INT 0
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: LIST
17941: ST_TO_ADDR
// bpoints := 1 ;
17942: LD_ADDR_VAR 0 10
17946: PUSH
17947: LD_INT 1
17949: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17950: LD_VAR 0 6
17954: PPUSH
17955: CALL_OW 247
17959: PUSH
17960: LD_INT 1
17962: DOUBLE
17963: EQUAL
17964: IFTRUE 17968
17966: GO 18550
17968: POP
// begin if GetClass ( i ) = 1 then
17969: LD_VAR 0 6
17973: PPUSH
17974: CALL_OW 257
17978: PUSH
17979: LD_INT 1
17981: EQUAL
17982: IFFALSE 18003
// points := [ 10 , 5 , 3 ] ;
17984: LD_ADDR_VAR 0 9
17988: PUSH
17989: LD_INT 10
17991: PUSH
17992: LD_INT 5
17994: PUSH
17995: LD_INT 3
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18003: LD_VAR 0 6
18007: PPUSH
18008: CALL_OW 257
18012: PUSH
18013: LD_INT 2
18015: PUSH
18016: LD_INT 3
18018: PUSH
18019: LD_INT 4
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: IN
18027: IFFALSE 18048
// points := [ 3 , 2 , 1 ] ;
18029: LD_ADDR_VAR 0 9
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18048: LD_VAR 0 6
18052: PPUSH
18053: CALL_OW 257
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18082
// points := [ 130 , 5 , 2 ] ;
18063: LD_ADDR_VAR 0 9
18067: PUSH
18068: LD_INT 130
18070: PUSH
18071: LD_INT 5
18073: PUSH
18074: LD_INT 2
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18082: LD_VAR 0 6
18086: PPUSH
18087: CALL_OW 257
18091: PUSH
18092: LD_INT 8
18094: EQUAL
18095: IFFALSE 18116
// points := [ 35 , 35 , 30 ] ;
18097: LD_ADDR_VAR 0 9
18101: PUSH
18102: LD_INT 35
18104: PUSH
18105: LD_INT 35
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18116: LD_VAR 0 6
18120: PPUSH
18121: CALL_OW 257
18125: PUSH
18126: LD_INT 9
18128: EQUAL
18129: IFFALSE 18150
// points := [ 20 , 55 , 40 ] ;
18131: LD_ADDR_VAR 0 9
18135: PUSH
18136: LD_INT 20
18138: PUSH
18139: LD_INT 55
18141: PUSH
18142: LD_INT 40
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18150: LD_VAR 0 6
18154: PPUSH
18155: CALL_OW 257
18159: PUSH
18160: LD_INT 12
18162: PUSH
18163: LD_INT 16
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: IN
18170: IFFALSE 18191
// points := [ 5 , 3 , 2 ] ;
18172: LD_ADDR_VAR 0 9
18176: PUSH
18177: LD_INT 5
18179: PUSH
18180: LD_INT 3
18182: PUSH
18183: LD_INT 2
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18191: LD_VAR 0 6
18195: PPUSH
18196: CALL_OW 257
18200: PUSH
18201: LD_INT 17
18203: EQUAL
18204: IFFALSE 18225
// points := [ 100 , 50 , 75 ] ;
18206: LD_ADDR_VAR 0 9
18210: PUSH
18211: LD_INT 100
18213: PUSH
18214: LD_INT 50
18216: PUSH
18217: LD_INT 75
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18225: LD_VAR 0 6
18229: PPUSH
18230: CALL_OW 257
18234: PUSH
18235: LD_INT 15
18237: EQUAL
18238: IFFALSE 18259
// points := [ 10 , 5 , 3 ] ;
18240: LD_ADDR_VAR 0 9
18244: PUSH
18245: LD_INT 10
18247: PUSH
18248: LD_INT 5
18250: PUSH
18251: LD_INT 3
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18259: LD_VAR 0 6
18263: PPUSH
18264: CALL_OW 257
18268: PUSH
18269: LD_INT 14
18271: EQUAL
18272: IFFALSE 18293
// points := [ 10 , 0 , 0 ] ;
18274: LD_ADDR_VAR 0 9
18278: PUSH
18279: LD_INT 10
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: LD_INT 0
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18293: LD_VAR 0 6
18297: PPUSH
18298: CALL_OW 257
18302: PUSH
18303: LD_INT 11
18305: EQUAL
18306: IFFALSE 18327
// points := [ 30 , 10 , 5 ] ;
18308: LD_ADDR_VAR 0 9
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 10
18318: PUSH
18319: LD_INT 5
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18327: LD_VAR 0 1
18331: PPUSH
18332: LD_INT 5
18334: PPUSH
18335: CALL_OW 321
18339: PUSH
18340: LD_INT 2
18342: EQUAL
18343: IFFALSE 18360
// bpoints := bpoints * 1.8 ;
18345: LD_ADDR_VAR 0 10
18349: PUSH
18350: LD_VAR 0 10
18354: PUSH
18355: LD_REAL  1.80000000000000E+0000
18358: MUL
18359: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18360: LD_VAR 0 6
18364: PPUSH
18365: CALL_OW 257
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: LD_INT 3
18378: PUSH
18379: LD_INT 4
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: IN
18388: IFFALSE 18408
18390: PUSH
18391: LD_VAR 0 1
18395: PPUSH
18396: LD_INT 51
18398: PPUSH
18399: CALL_OW 321
18403: PUSH
18404: LD_INT 2
18406: EQUAL
18407: AND
18408: IFFALSE 18425
// bpoints := bpoints * 1.2 ;
18410: LD_ADDR_VAR 0 10
18414: PUSH
18415: LD_VAR 0 10
18419: PUSH
18420: LD_REAL  1.20000000000000E+0000
18423: MUL
18424: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18425: LD_VAR 0 6
18429: PPUSH
18430: CALL_OW 257
18434: PUSH
18435: LD_INT 5
18437: PUSH
18438: LD_INT 7
18440: PUSH
18441: LD_INT 9
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: IN
18449: IFFALSE 18469
18451: PUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: LD_INT 52
18459: PPUSH
18460: CALL_OW 321
18464: PUSH
18465: LD_INT 2
18467: EQUAL
18468: AND
18469: IFFALSE 18486
// bpoints := bpoints * 1.5 ;
18471: LD_ADDR_VAR 0 10
18475: PUSH
18476: LD_VAR 0 10
18480: PUSH
18481: LD_REAL  1.50000000000000E+0000
18484: MUL
18485: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18486: LD_VAR 0 1
18490: PPUSH
18491: LD_INT 66
18493: PPUSH
18494: CALL_OW 321
18498: PUSH
18499: LD_INT 2
18501: EQUAL
18502: IFFALSE 18519
// bpoints := bpoints * 1.1 ;
18504: LD_ADDR_VAR 0 10
18508: PUSH
18509: LD_VAR 0 10
18513: PUSH
18514: LD_REAL  1.10000000000000E+0000
18517: MUL
18518: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18519: LD_ADDR_VAR 0 10
18523: PUSH
18524: LD_VAR 0 10
18528: PUSH
18529: LD_VAR 0 6
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 259
18541: PUSH
18542: LD_REAL  1.15000000000000E+0000
18545: MUL
18546: MUL
18547: ST_TO_ADDR
// end ; unit_vehicle :
18548: GO 19378
18550: LD_INT 2
18552: DOUBLE
18553: EQUAL
18554: IFTRUE 18558
18556: GO 19366
18558: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18559: LD_VAR 0 6
18563: PPUSH
18564: CALL_OW 264
18568: PUSH
18569: LD_INT 2
18571: PUSH
18572: LD_INT 42
18574: PUSH
18575: LD_INT 24
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: IN
18583: IFFALSE 18604
// points := [ 25 , 5 , 3 ] ;
18585: LD_ADDR_VAR 0 9
18589: PUSH
18590: LD_INT 25
18592: PUSH
18593: LD_INT 5
18595: PUSH
18596: LD_INT 3
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18604: LD_VAR 0 6
18608: PPUSH
18609: CALL_OW 264
18613: PUSH
18614: LD_INT 4
18616: PUSH
18617: LD_INT 43
18619: PUSH
18620: LD_INT 25
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: IN
18628: IFFALSE 18649
// points := [ 40 , 15 , 5 ] ;
18630: LD_ADDR_VAR 0 9
18634: PUSH
18635: LD_INT 40
18637: PUSH
18638: LD_INT 15
18640: PUSH
18641: LD_INT 5
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18649: LD_VAR 0 6
18653: PPUSH
18654: CALL_OW 264
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: LD_INT 23
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: IN
18669: IFFALSE 18690
// points := [ 7 , 25 , 8 ] ;
18671: LD_ADDR_VAR 0 9
18675: PUSH
18676: LD_INT 7
18678: PUSH
18679: LD_INT 25
18681: PUSH
18682: LD_INT 8
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18690: LD_VAR 0 6
18694: PPUSH
18695: CALL_OW 264
18699: PUSH
18700: LD_INT 5
18702: PUSH
18703: LD_INT 27
18705: PUSH
18706: LD_INT 44
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: IN
18714: IFFALSE 18735
// points := [ 14 , 50 , 16 ] ;
18716: LD_ADDR_VAR 0 9
18720: PUSH
18721: LD_INT 14
18723: PUSH
18724: LD_INT 50
18726: PUSH
18727: LD_INT 16
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18735: LD_VAR 0 6
18739: PPUSH
18740: CALL_OW 264
18744: PUSH
18745: LD_INT 6
18747: PUSH
18748: LD_INT 46
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: IN
18755: IFFALSE 18776
// points := [ 32 , 120 , 70 ] ;
18757: LD_ADDR_VAR 0 9
18761: PUSH
18762: LD_INT 32
18764: PUSH
18765: LD_INT 120
18767: PUSH
18768: LD_INT 70
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18776: LD_VAR 0 6
18780: PPUSH
18781: CALL_OW 264
18785: PUSH
18786: LD_INT 7
18788: PUSH
18789: LD_INT 28
18791: PUSH
18792: LD_INT 45
18794: PUSH
18795: LD_INT 92
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: IN
18804: IFFALSE 18825
// points := [ 35 , 20 , 45 ] ;
18806: LD_ADDR_VAR 0 9
18810: PUSH
18811: LD_INT 35
18813: PUSH
18814: LD_INT 20
18816: PUSH
18817: LD_INT 45
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: LIST
18824: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18825: LD_VAR 0 6
18829: PPUSH
18830: CALL_OW 264
18834: PUSH
18835: LD_INT 47
18837: PUSH
18838: EMPTY
18839: LIST
18840: IN
18841: IFFALSE 18862
// points := [ 67 , 45 , 75 ] ;
18843: LD_ADDR_VAR 0 9
18847: PUSH
18848: LD_INT 67
18850: PUSH
18851: LD_INT 45
18853: PUSH
18854: LD_INT 75
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18862: LD_VAR 0 6
18866: PPUSH
18867: CALL_OW 264
18871: PUSH
18872: LD_INT 26
18874: PUSH
18875: EMPTY
18876: LIST
18877: IN
18878: IFFALSE 18899
// points := [ 120 , 30 , 80 ] ;
18880: LD_ADDR_VAR 0 9
18884: PUSH
18885: LD_INT 120
18887: PUSH
18888: LD_INT 30
18890: PUSH
18891: LD_INT 80
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18899: LD_VAR 0 6
18903: PPUSH
18904: CALL_OW 264
18908: PUSH
18909: LD_INT 22
18911: PUSH
18912: EMPTY
18913: LIST
18914: IN
18915: IFFALSE 18936
// points := [ 40 , 1 , 1 ] ;
18917: LD_ADDR_VAR 0 9
18921: PUSH
18922: LD_INT 40
18924: PUSH
18925: LD_INT 1
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18936: LD_VAR 0 6
18940: PPUSH
18941: CALL_OW 264
18945: PUSH
18946: LD_INT 29
18948: PUSH
18949: EMPTY
18950: LIST
18951: IN
18952: IFFALSE 18973
// points := [ 70 , 200 , 400 ] ;
18954: LD_ADDR_VAR 0 9
18958: PUSH
18959: LD_INT 70
18961: PUSH
18962: LD_INT 200
18964: PUSH
18965: LD_INT 400
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18973: LD_VAR 0 6
18977: PPUSH
18978: CALL_OW 264
18982: PUSH
18983: LD_INT 14
18985: PUSH
18986: LD_INT 53
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: IN
18993: IFFALSE 19014
// points := [ 40 , 10 , 20 ] ;
18995: LD_ADDR_VAR 0 9
18999: PUSH
19000: LD_INT 40
19002: PUSH
19003: LD_INT 10
19005: PUSH
19006: LD_INT 20
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19014: LD_VAR 0 6
19018: PPUSH
19019: CALL_OW 264
19023: PUSH
19024: LD_INT 9
19026: PUSH
19027: EMPTY
19028: LIST
19029: IN
19030: IFFALSE 19051
// points := [ 5 , 70 , 20 ] ;
19032: LD_ADDR_VAR 0 9
19036: PUSH
19037: LD_INT 5
19039: PUSH
19040: LD_INT 70
19042: PUSH
19043: LD_INT 20
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19051: LD_VAR 0 6
19055: PPUSH
19056: CALL_OW 264
19060: PUSH
19061: LD_INT 10
19063: PUSH
19064: EMPTY
19065: LIST
19066: IN
19067: IFFALSE 19088
// points := [ 35 , 110 , 70 ] ;
19069: LD_ADDR_VAR 0 9
19073: PUSH
19074: LD_INT 35
19076: PUSH
19077: LD_INT 110
19079: PUSH
19080: LD_INT 70
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19088: LD_VAR 0 6
19092: PPUSH
19093: CALL_OW 265
19097: PUSH
19098: LD_INT 25
19100: EQUAL
19101: IFFALSE 19122
// points := [ 80 , 65 , 100 ] ;
19103: LD_ADDR_VAR 0 9
19107: PUSH
19108: LD_INT 80
19110: PUSH
19111: LD_INT 65
19113: PUSH
19114: LD_INT 100
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19122: LD_VAR 0 6
19126: PPUSH
19127: CALL_OW 263
19131: PUSH
19132: LD_INT 1
19134: EQUAL
19135: IFFALSE 19170
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19137: LD_ADDR_VAR 0 10
19141: PUSH
19142: LD_VAR 0 10
19146: PUSH
19147: LD_VAR 0 6
19151: PPUSH
19152: CALL_OW 311
19156: PPUSH
19157: LD_INT 3
19159: PPUSH
19160: CALL_OW 259
19164: PUSH
19165: LD_INT 4
19167: MUL
19168: MUL
19169: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19170: LD_VAR 0 6
19174: PPUSH
19175: CALL_OW 263
19179: PUSH
19180: LD_INT 2
19182: EQUAL
19183: IFFALSE 19234
// begin j := IsControledBy ( i ) ;
19185: LD_ADDR_VAR 0 7
19189: PUSH
19190: LD_VAR 0 6
19194: PPUSH
19195: CALL_OW 312
19199: ST_TO_ADDR
// if j then
19200: LD_VAR 0 7
19204: IFFALSE 19234
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19206: LD_ADDR_VAR 0 10
19210: PUSH
19211: LD_VAR 0 10
19215: PUSH
19216: LD_VAR 0 7
19220: PPUSH
19221: LD_INT 3
19223: PPUSH
19224: CALL_OW 259
19228: PUSH
19229: LD_INT 3
19231: MUL
19232: MUL
19233: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19234: LD_VAR 0 6
19238: PPUSH
19239: CALL_OW 264
19243: PUSH
19244: LD_INT 5
19246: PUSH
19247: LD_INT 6
19249: PUSH
19250: LD_INT 46
19252: PUSH
19253: LD_INT 44
19255: PUSH
19256: LD_INT 47
19258: PUSH
19259: LD_INT 45
19261: PUSH
19262: LD_INT 28
19264: PUSH
19265: LD_INT 7
19267: PUSH
19268: LD_INT 27
19270: PUSH
19271: LD_INT 29
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: IN
19286: IFFALSE 19306
19288: PUSH
19289: LD_VAR 0 1
19293: PPUSH
19294: LD_INT 52
19296: PPUSH
19297: CALL_OW 321
19301: PUSH
19302: LD_INT 2
19304: EQUAL
19305: AND
19306: IFFALSE 19323
// bpoints := bpoints * 1.2 ;
19308: LD_ADDR_VAR 0 10
19312: PUSH
19313: LD_VAR 0 10
19317: PUSH
19318: LD_REAL  1.20000000000000E+0000
19321: MUL
19322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19323: LD_VAR 0 6
19327: PPUSH
19328: CALL_OW 264
19332: PUSH
19333: LD_INT 6
19335: PUSH
19336: LD_INT 46
19338: PUSH
19339: LD_INT 47
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: LIST
19346: IN
19347: IFFALSE 19364
// bpoints := bpoints * 1.2 ;
19349: LD_ADDR_VAR 0 10
19353: PUSH
19354: LD_VAR 0 10
19358: PUSH
19359: LD_REAL  1.20000000000000E+0000
19362: MUL
19363: ST_TO_ADDR
// end ; unit_building :
19364: GO 19378
19366: LD_INT 3
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19377
19374: POP
// ; end ;
19375: GO 19378
19377: POP
// for j = 1 to 3 do
19378: LD_ADDR_VAR 0 7
19382: PUSH
19383: DOUBLE
19384: LD_INT 1
19386: DEC
19387: ST_TO_ADDR
19388: LD_INT 3
19390: PUSH
19391: FOR_TO
19392: IFFALSE 19445
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19394: LD_ADDR_VAR 0 5
19398: PUSH
19399: LD_VAR 0 5
19403: PPUSH
19404: LD_VAR 0 7
19408: PPUSH
19409: LD_VAR 0 5
19413: PUSH
19414: LD_VAR 0 7
19418: ARRAY
19419: PUSH
19420: LD_VAR 0 9
19424: PUSH
19425: LD_VAR 0 7
19429: ARRAY
19430: PUSH
19431: LD_VAR 0 10
19435: MUL
19436: PLUS
19437: PPUSH
19438: CALL_OW 1
19442: ST_TO_ADDR
19443: GO 19391
19445: POP
19446: POP
// end ;
19447: GO 17920
19449: POP
19450: POP
// result := Replace ( result , 4 , tmp ) ;
19451: LD_ADDR_VAR 0 5
19455: PUSH
19456: LD_VAR 0 5
19460: PPUSH
19461: LD_INT 4
19463: PPUSH
19464: LD_VAR 0 8
19468: PPUSH
19469: CALL_OW 1
19473: ST_TO_ADDR
// end ;
19474: LD_VAR 0 5
19478: RET
// export function DangerAtRange ( unit , range ) ; begin
19479: LD_INT 0
19481: PPUSH
// if not unit then
19482: LD_VAR 0 1
19486: NOT
19487: IFFALSE 19491
// exit ;
19489: GO 19536
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_VAR 0 1
19500: PPUSH
19501: CALL_OW 255
19505: PPUSH
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 250
19515: PPUSH
19516: LD_VAR 0 1
19520: PPUSH
19521: CALL_OW 251
19525: PPUSH
19526: LD_VAR 0 2
19530: PPUSH
19531: CALL 17770 0 4
19535: ST_TO_ADDR
// end ;
19536: LD_VAR 0 3
19540: RET
// export function DangerInArea ( side , area ) ; begin
19541: LD_INT 0
19543: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19544: LD_ADDR_VAR 0 3
19548: PUSH
19549: LD_VAR 0 2
19553: PPUSH
19554: LD_INT 81
19556: PUSH
19557: LD_VAR 0 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 70
19570: ST_TO_ADDR
// end ;
19571: LD_VAR 0 3
19575: RET
// export function IsExtension ( b ) ; begin
19576: LD_INT 0
19578: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19579: LD_ADDR_VAR 0 2
19583: PUSH
19584: LD_VAR 0 1
19588: PUSH
19589: LD_INT 23
19591: PUSH
19592: LD_INT 20
19594: PUSH
19595: LD_INT 22
19597: PUSH
19598: LD_INT 17
19600: PUSH
19601: LD_INT 24
19603: PUSH
19604: LD_INT 21
19606: PUSH
19607: LD_INT 19
19609: PUSH
19610: LD_INT 16
19612: PUSH
19613: LD_INT 25
19615: PUSH
19616: LD_INT 18
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: IN
19631: ST_TO_ADDR
// end ;
19632: LD_VAR 0 2
19636: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19637: LD_INT 0
19639: PPUSH
19640: PPUSH
19641: PPUSH
// result := [ ] ;
19642: LD_ADDR_VAR 0 4
19646: PUSH
19647: EMPTY
19648: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19649: LD_ADDR_VAR 0 5
19653: PUSH
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_INT 21
19661: PUSH
19662: LD_INT 3
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 70
19673: ST_TO_ADDR
// if not tmp then
19674: LD_VAR 0 5
19678: NOT
19679: IFFALSE 19683
// exit ;
19681: GO 19747
// if checkLink then
19683: LD_VAR 0 3
19687: IFFALSE 19737
// begin for i in tmp do
19689: LD_ADDR_VAR 0 6
19693: PUSH
19694: LD_VAR 0 5
19698: PUSH
19699: FOR_IN
19700: IFFALSE 19735
// if GetBase ( i ) <> base then
19702: LD_VAR 0 6
19706: PPUSH
19707: CALL_OW 274
19711: PUSH
19712: LD_VAR 0 1
19716: NONEQUAL
19717: IFFALSE 19733
// ComLinkToBase ( base , i ) ;
19719: LD_VAR 0 1
19723: PPUSH
19724: LD_VAR 0 6
19728: PPUSH
19729: CALL_OW 169
19733: GO 19699
19735: POP
19736: POP
// end ; result := tmp ;
19737: LD_ADDR_VAR 0 4
19741: PUSH
19742: LD_VAR 0 5
19746: ST_TO_ADDR
// end ;
19747: LD_VAR 0 4
19751: RET
// export function ComComplete ( units , b ) ; var i ; begin
19752: LD_INT 0
19754: PPUSH
19755: PPUSH
// if not units then
19756: LD_VAR 0 1
19760: NOT
19761: IFFALSE 19765
// exit ;
19763: GO 19855
// for i in units do
19765: LD_ADDR_VAR 0 4
19769: PUSH
19770: LD_VAR 0 1
19774: PUSH
19775: FOR_IN
19776: IFFALSE 19853
// if BuildingStatus ( b ) = bs_build then
19778: LD_VAR 0 2
19782: PPUSH
19783: CALL_OW 461
19787: PUSH
19788: LD_INT 1
19790: EQUAL
19791: IFFALSE 19851
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19793: LD_VAR 0 4
19797: PPUSH
19798: LD_STRING h
19800: PUSH
19801: LD_VAR 0 2
19805: PPUSH
19806: CALL_OW 250
19810: PUSH
19811: LD_VAR 0 2
19815: PPUSH
19816: CALL_OW 251
19820: PUSH
19821: LD_VAR 0 2
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: PPUSH
19847: CALL_OW 446
19851: GO 19775
19853: POP
19854: POP
// end ;
19855: LD_VAR 0 3
19859: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19860: LD_INT 0
19862: PPUSH
19863: PPUSH
19864: PPUSH
19865: PPUSH
19866: PPUSH
19867: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19868: LD_VAR 0 1
19872: NOT
19873: IFTRUE 19890
19875: PUSH
19876: LD_VAR 0 1
19880: PPUSH
19881: CALL_OW 263
19885: PUSH
19886: LD_INT 2
19888: NONEQUAL
19889: OR
19890: IFFALSE 19894
// exit ;
19892: GO 20210
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19894: LD_ADDR_VAR 0 6
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 255
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 30
19921: PUSH
19922: LD_INT 36
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 34
19931: PUSH
19932: LD_INT 31
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PPUSH
19948: CALL_OW 69
19952: ST_TO_ADDR
// if not tmp then
19953: LD_VAR 0 6
19957: NOT
19958: IFFALSE 19962
// exit ;
19960: GO 20210
// result := [ ] ;
19962: LD_ADDR_VAR 0 2
19966: PUSH
19967: EMPTY
19968: ST_TO_ADDR
// for i in tmp do
19969: LD_ADDR_VAR 0 3
19973: PUSH
19974: LD_VAR 0 6
19978: PUSH
19979: FOR_IN
19980: IFFALSE 20051
// begin t := UnitsInside ( i ) ;
19982: LD_ADDR_VAR 0 4
19986: PUSH
19987: LD_VAR 0 3
19991: PPUSH
19992: CALL_OW 313
19996: ST_TO_ADDR
// if t then
19997: LD_VAR 0 4
20001: IFFALSE 20049
// for j in t do
20003: LD_ADDR_VAR 0 7
20007: PUSH
20008: LD_VAR 0 4
20012: PUSH
20013: FOR_IN
20014: IFFALSE 20047
// result := Replace ( result , result + 1 , j ) ;
20016: LD_ADDR_VAR 0 2
20020: PUSH
20021: LD_VAR 0 2
20025: PPUSH
20026: LD_VAR 0 2
20030: PUSH
20031: LD_INT 1
20033: PLUS
20034: PPUSH
20035: LD_VAR 0 7
20039: PPUSH
20040: CALL_OW 1
20044: ST_TO_ADDR
20045: GO 20013
20047: POP
20048: POP
// end ;
20049: GO 19979
20051: POP
20052: POP
// if not result then
20053: LD_VAR 0 2
20057: NOT
20058: IFFALSE 20062
// exit ;
20060: GO 20210
// mech := result [ 1 ] ;
20062: LD_ADDR_VAR 0 5
20066: PUSH
20067: LD_VAR 0 2
20071: PUSH
20072: LD_INT 1
20074: ARRAY
20075: ST_TO_ADDR
// if result > 1 then
20076: LD_VAR 0 2
20080: PUSH
20081: LD_INT 1
20083: GREATER
20084: IFFALSE 20196
// begin for i = 2 to result do
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: DOUBLE
20092: LD_INT 2
20094: DEC
20095: ST_TO_ADDR
20096: LD_VAR 0 2
20100: PUSH
20101: FOR_TO
20102: IFFALSE 20194
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20104: LD_ADDR_VAR 0 4
20108: PUSH
20109: LD_VAR 0 2
20113: PUSH
20114: LD_VAR 0 3
20118: ARRAY
20119: PPUSH
20120: LD_INT 3
20122: PPUSH
20123: CALL_OW 259
20127: PUSH
20128: LD_VAR 0 2
20132: PUSH
20133: LD_VAR 0 3
20137: ARRAY
20138: PPUSH
20139: CALL_OW 432
20143: MINUS
20144: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20145: LD_VAR 0 4
20149: PUSH
20150: LD_VAR 0 5
20154: PPUSH
20155: LD_INT 3
20157: PPUSH
20158: CALL_OW 259
20162: PUSH
20163: LD_VAR 0 5
20167: PPUSH
20168: CALL_OW 432
20172: MINUS
20173: GREATEREQUAL
20174: IFFALSE 20192
// mech := result [ i ] ;
20176: LD_ADDR_VAR 0 5
20180: PUSH
20181: LD_VAR 0 2
20185: PUSH
20186: LD_VAR 0 3
20190: ARRAY
20191: ST_TO_ADDR
// end ;
20192: GO 20101
20194: POP
20195: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20196: LD_VAR 0 1
20200: PPUSH
20201: LD_VAR 0 5
20205: PPUSH
20206: CALL_OW 135
// end ;
20210: LD_VAR 0 2
20214: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20215: LD_INT 0
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
20222: PPUSH
20223: PPUSH
20224: PPUSH
20225: PPUSH
20226: PPUSH
20227: PPUSH
20228: PPUSH
20229: PPUSH
// result := [ ] ;
20230: LD_ADDR_VAR 0 7
20234: PUSH
20235: EMPTY
20236: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20237: LD_VAR 0 1
20241: PPUSH
20242: CALL_OW 266
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: IN
20257: NOT
20258: IFFALSE 20262
// exit ;
20260: GO 21902
// if name then
20262: LD_VAR 0 3
20266: IFFALSE 20282
// SetBName ( base_dep , name ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_VAR 0 3
20277: PPUSH
20278: CALL_OW 500
// base := GetBase ( base_dep ) ;
20282: LD_ADDR_VAR 0 15
20286: PUSH
20287: LD_VAR 0 1
20291: PPUSH
20292: CALL_OW 274
20296: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20297: LD_ADDR_VAR 0 16
20301: PUSH
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 255
20311: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20312: LD_ADDR_VAR 0 17
20316: PUSH
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 248
20326: ST_TO_ADDR
// if sources then
20327: LD_VAR 0 5
20331: IFFALSE 20378
// for i = 1 to 3 do
20333: LD_ADDR_VAR 0 8
20337: PUSH
20338: DOUBLE
20339: LD_INT 1
20341: DEC
20342: ST_TO_ADDR
20343: LD_INT 3
20345: PUSH
20346: FOR_TO
20347: IFFALSE 20376
// AddResourceType ( base , i , sources [ i ] ) ;
20349: LD_VAR 0 15
20353: PPUSH
20354: LD_VAR 0 8
20358: PPUSH
20359: LD_VAR 0 5
20363: PUSH
20364: LD_VAR 0 8
20368: ARRAY
20369: PPUSH
20370: CALL_OW 276
20374: GO 20346
20376: POP
20377: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20378: LD_ADDR_VAR 0 18
20382: PUSH
20383: LD_VAR 0 15
20387: PPUSH
20388: LD_VAR 0 2
20392: PPUSH
20393: LD_INT 1
20395: PPUSH
20396: CALL 19637 0 3
20400: ST_TO_ADDR
// InitHc ;
20401: CALL_OW 19
// InitUc ;
20405: CALL_OW 18
// uc_side := side ;
20409: LD_ADDR_OWVAR 20
20413: PUSH
20414: LD_VAR 0 16
20418: ST_TO_ADDR
// uc_nation := nation ;
20419: LD_ADDR_OWVAR 21
20423: PUSH
20424: LD_VAR 0 17
20428: ST_TO_ADDR
// if buildings then
20429: LD_VAR 0 18
20433: IFFALSE 21761
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20435: LD_ADDR_VAR 0 19
20439: PUSH
20440: LD_VAR 0 18
20444: PPUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 30
20450: PUSH
20451: LD_INT 29
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 30
20460: PUSH
20461: LD_INT 30
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: PPUSH
20473: CALL_OW 72
20477: ST_TO_ADDR
// if tmp then
20478: LD_VAR 0 19
20482: IFFALSE 20530
// for i in tmp do
20484: LD_ADDR_VAR 0 8
20488: PUSH
20489: LD_VAR 0 19
20493: PUSH
20494: FOR_IN
20495: IFFALSE 20528
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20497: LD_VAR 0 8
20501: PPUSH
20502: CALL_OW 250
20506: PPUSH
20507: LD_VAR 0 8
20511: PPUSH
20512: CALL_OW 251
20516: PPUSH
20517: LD_VAR 0 16
20521: PPUSH
20522: CALL_OW 441
20526: GO 20494
20528: POP
20529: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20530: LD_VAR 0 18
20534: PPUSH
20535: LD_INT 2
20537: PUSH
20538: LD_INT 30
20540: PUSH
20541: LD_INT 32
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 30
20550: PUSH
20551: LD_INT 33
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: PPUSH
20563: CALL_OW 72
20567: IFFALSE 20655
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20569: LD_ADDR_VAR 0 8
20573: PUSH
20574: LD_VAR 0 18
20578: PPUSH
20579: LD_INT 2
20581: PUSH
20582: LD_INT 30
20584: PUSH
20585: LD_INT 32
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 30
20594: PUSH
20595: LD_INT 33
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 72
20611: PUSH
20612: FOR_IN
20613: IFFALSE 20653
// begin if not GetBWeapon ( i ) then
20615: LD_VAR 0 8
20619: PPUSH
20620: CALL_OW 269
20624: NOT
20625: IFFALSE 20651
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20627: LD_VAR 0 8
20631: PPUSH
20632: LD_VAR 0 8
20636: PPUSH
20637: LD_VAR 0 2
20641: PPUSH
20642: CALL 21907 0 2
20646: PPUSH
20647: CALL_OW 431
// end ;
20651: GO 20612
20653: POP
20654: POP
// end ; for i = 1 to personel do
20655: LD_ADDR_VAR 0 8
20659: PUSH
20660: DOUBLE
20661: LD_INT 1
20663: DEC
20664: ST_TO_ADDR
20665: LD_VAR 0 6
20669: PUSH
20670: FOR_TO
20671: IFFALSE 21741
// begin if i > 4 then
20673: LD_VAR 0 8
20677: PUSH
20678: LD_INT 4
20680: GREATER
20681: IFFALSE 20685
// break ;
20683: GO 21741
// case i of 1 :
20685: LD_VAR 0 8
20689: PUSH
20690: LD_INT 1
20692: DOUBLE
20693: EQUAL
20694: IFTRUE 20698
20696: GO 20778
20698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20699: LD_ADDR_VAR 0 12
20703: PUSH
20704: LD_VAR 0 18
20708: PPUSH
20709: LD_INT 22
20711: PUSH
20712: LD_VAR 0 16
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 58
20723: PUSH
20724: EMPTY
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: LD_INT 30
20732: PUSH
20733: LD_INT 32
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 30
20742: PUSH
20743: LD_INT 4
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 30
20752: PUSH
20753: LD_INT 5
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: PPUSH
20771: CALL_OW 72
20775: ST_TO_ADDR
20776: GO 21000
20778: LD_INT 2
20780: DOUBLE
20781: EQUAL
20782: IFTRUE 20786
20784: GO 20848
20786: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20787: LD_ADDR_VAR 0 12
20791: PUSH
20792: LD_VAR 0 18
20796: PPUSH
20797: LD_INT 22
20799: PUSH
20800: LD_VAR 0 16
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: LD_INT 30
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 30
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PPUSH
20841: CALL_OW 72
20845: ST_TO_ADDR
20846: GO 21000
20848: LD_INT 3
20850: DOUBLE
20851: EQUAL
20852: IFTRUE 20856
20854: GO 20918
20856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20857: LD_ADDR_VAR 0 12
20861: PUSH
20862: LD_VAR 0 18
20866: PPUSH
20867: LD_INT 22
20869: PUSH
20870: LD_VAR 0 16
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 30
20894: PUSH
20895: LD_INT 3
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 72
20915: ST_TO_ADDR
20916: GO 21000
20918: LD_INT 4
20920: DOUBLE
20921: EQUAL
20922: IFTRUE 20926
20924: GO 20999
20926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20927: LD_ADDR_VAR 0 12
20931: PUSH
20932: LD_VAR 0 18
20936: PPUSH
20937: LD_INT 22
20939: PUSH
20940: LD_VAR 0 16
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: PUSH
20952: LD_INT 30
20954: PUSH
20955: LD_INT 6
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 30
20964: PUSH
20965: LD_INT 7
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 30
20974: PUSH
20975: LD_INT 8
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PPUSH
20992: CALL_OW 72
20996: ST_TO_ADDR
20997: GO 21000
20999: POP
// if i = 1 then
21000: LD_VAR 0 8
21004: PUSH
21005: LD_INT 1
21007: EQUAL
21008: IFFALSE 21119
// begin tmp := [ ] ;
21010: LD_ADDR_VAR 0 19
21014: PUSH
21015: EMPTY
21016: ST_TO_ADDR
// for j in f do
21017: LD_ADDR_VAR 0 9
21021: PUSH
21022: LD_VAR 0 12
21026: PUSH
21027: FOR_IN
21028: IFFALSE 21101
// if GetBType ( j ) = b_bunker then
21030: LD_VAR 0 9
21034: PPUSH
21035: CALL_OW 266
21039: PUSH
21040: LD_INT 32
21042: EQUAL
21043: IFFALSE 21070
// tmp := Insert ( tmp , 1 , j ) else
21045: LD_ADDR_VAR 0 19
21049: PUSH
21050: LD_VAR 0 19
21054: PPUSH
21055: LD_INT 1
21057: PPUSH
21058: LD_VAR 0 9
21062: PPUSH
21063: CALL_OW 2
21067: ST_TO_ADDR
21068: GO 21099
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21070: LD_ADDR_VAR 0 19
21074: PUSH
21075: LD_VAR 0 19
21079: PPUSH
21080: LD_VAR 0 19
21084: PUSH
21085: LD_INT 1
21087: PLUS
21088: PPUSH
21089: LD_VAR 0 9
21093: PPUSH
21094: CALL_OW 2
21098: ST_TO_ADDR
21099: GO 21027
21101: POP
21102: POP
// if tmp then
21103: LD_VAR 0 19
21107: IFFALSE 21119
// f := tmp ;
21109: LD_ADDR_VAR 0 12
21113: PUSH
21114: LD_VAR 0 19
21118: ST_TO_ADDR
// end ; x := personel [ i ] ;
21119: LD_ADDR_VAR 0 13
21123: PUSH
21124: LD_VAR 0 6
21128: PUSH
21129: LD_VAR 0 8
21133: ARRAY
21134: ST_TO_ADDR
// if x = - 1 then
21135: LD_VAR 0 13
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: EQUAL
21144: IFFALSE 21355
// begin for j in f do
21146: LD_ADDR_VAR 0 9
21150: PUSH
21151: LD_VAR 0 12
21155: PUSH
21156: FOR_IN
21157: IFFALSE 21351
// repeat InitHc ;
21159: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21163: LD_VAR 0 9
21167: PPUSH
21168: CALL_OW 266
21172: PUSH
21173: LD_INT 5
21175: EQUAL
21176: IFFALSE 21246
// begin if UnitsInside ( j ) < 3 then
21178: LD_VAR 0 9
21182: PPUSH
21183: CALL_OW 313
21187: PUSH
21188: LD_INT 3
21190: LESS
21191: IFFALSE 21227
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21193: LD_INT 0
21195: PPUSH
21196: LD_INT 5
21198: PUSH
21199: LD_INT 8
21201: PUSH
21202: LD_INT 9
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: PUSH
21210: LD_VAR 0 17
21214: ARRAY
21215: PPUSH
21216: LD_VAR 0 4
21220: PPUSH
21221: CALL_OW 380
21225: GO 21244
// PrepareHuman ( false , i , skill ) ;
21227: LD_INT 0
21229: PPUSH
21230: LD_VAR 0 8
21234: PPUSH
21235: LD_VAR 0 4
21239: PPUSH
21240: CALL_OW 380
// end else
21244: GO 21263
// PrepareHuman ( false , i , skill ) ;
21246: LD_INT 0
21248: PPUSH
21249: LD_VAR 0 8
21253: PPUSH
21254: LD_VAR 0 4
21258: PPUSH
21259: CALL_OW 380
// un := CreateHuman ;
21263: LD_ADDR_VAR 0 14
21267: PUSH
21268: CALL_OW 44
21272: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21273: LD_ADDR_VAR 0 7
21277: PUSH
21278: LD_VAR 0 7
21282: PPUSH
21283: LD_INT 1
21285: PPUSH
21286: LD_VAR 0 14
21290: PPUSH
21291: CALL_OW 2
21295: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21296: LD_VAR 0 14
21300: PPUSH
21301: LD_VAR 0 9
21305: PPUSH
21306: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21310: LD_VAR 0 9
21314: PPUSH
21315: CALL_OW 313
21319: PUSH
21320: LD_INT 6
21322: EQUAL
21323: IFTRUE 21347
21325: PUSH
21326: LD_VAR 0 9
21330: PPUSH
21331: CALL_OW 266
21335: PUSH
21336: LD_INT 32
21338: PUSH
21339: LD_INT 31
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: IN
21346: OR
21347: IFFALSE 21159
21349: GO 21156
21351: POP
21352: POP
// end else
21353: GO 21739
// for j = 1 to x do
21355: LD_ADDR_VAR 0 9
21359: PUSH
21360: DOUBLE
21361: LD_INT 1
21363: DEC
21364: ST_TO_ADDR
21365: LD_VAR 0 13
21369: PUSH
21370: FOR_TO
21371: IFFALSE 21737
// begin InitHc ;
21373: CALL_OW 19
// if not f then
21377: LD_VAR 0 12
21381: NOT
21382: IFFALSE 21471
// begin PrepareHuman ( false , i , skill ) ;
21384: LD_INT 0
21386: PPUSH
21387: LD_VAR 0 8
21391: PPUSH
21392: LD_VAR 0 4
21396: PPUSH
21397: CALL_OW 380
// un := CreateHuman ;
21401: LD_ADDR_VAR 0 14
21405: PUSH
21406: CALL_OW 44
21410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21411: LD_ADDR_VAR 0 7
21415: PUSH
21416: LD_VAR 0 7
21420: PPUSH
21421: LD_INT 1
21423: PPUSH
21424: LD_VAR 0 14
21428: PPUSH
21429: CALL_OW 2
21433: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21434: LD_VAR 0 14
21438: PPUSH
21439: LD_VAR 0 1
21443: PPUSH
21444: CALL_OW 250
21448: PPUSH
21449: LD_VAR 0 1
21453: PPUSH
21454: CALL_OW 251
21458: PPUSH
21459: LD_INT 10
21461: PPUSH
21462: LD_INT 0
21464: PPUSH
21465: CALL_OW 50
// continue ;
21469: GO 21370
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21471: LD_VAR 0 12
21475: PUSH
21476: LD_INT 1
21478: ARRAY
21479: PPUSH
21480: CALL_OW 313
21484: IFFALSE 21512
21486: PUSH
21487: LD_VAR 0 12
21491: PUSH
21492: LD_INT 1
21494: ARRAY
21495: PPUSH
21496: CALL_OW 266
21500: PUSH
21501: LD_INT 32
21503: PUSH
21504: LD_INT 31
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: IN
21511: AND
21512: IFTRUE 21533
21514: PUSH
21515: LD_VAR 0 12
21519: PUSH
21520: LD_INT 1
21522: ARRAY
21523: PPUSH
21524: CALL_OW 313
21528: PUSH
21529: LD_INT 6
21531: EQUAL
21532: OR
21533: IFFALSE 21553
// f := Delete ( f , 1 ) ;
21535: LD_ADDR_VAR 0 12
21539: PUSH
21540: LD_VAR 0 12
21544: PPUSH
21545: LD_INT 1
21547: PPUSH
21548: CALL_OW 3
21552: ST_TO_ADDR
// if not f then
21553: LD_VAR 0 12
21557: NOT
21558: IFFALSE 21576
// begin x := x + 2 ;
21560: LD_ADDR_VAR 0 13
21564: PUSH
21565: LD_VAR 0 13
21569: PUSH
21570: LD_INT 2
21572: PLUS
21573: ST_TO_ADDR
// continue ;
21574: GO 21370
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21576: LD_VAR 0 12
21580: PUSH
21581: LD_INT 1
21583: ARRAY
21584: PPUSH
21585: CALL_OW 266
21589: PUSH
21590: LD_INT 5
21592: EQUAL
21593: IFFALSE 21667
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21595: LD_VAR 0 12
21599: PUSH
21600: LD_INT 1
21602: ARRAY
21603: PPUSH
21604: CALL_OW 313
21608: PUSH
21609: LD_INT 3
21611: LESS
21612: IFFALSE 21648
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21614: LD_INT 0
21616: PPUSH
21617: LD_INT 5
21619: PUSH
21620: LD_INT 8
21622: PUSH
21623: LD_INT 9
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: PUSH
21631: LD_VAR 0 17
21635: ARRAY
21636: PPUSH
21637: LD_VAR 0 4
21641: PPUSH
21642: CALL_OW 380
21646: GO 21665
// PrepareHuman ( false , i , skill ) ;
21648: LD_INT 0
21650: PPUSH
21651: LD_VAR 0 8
21655: PPUSH
21656: LD_VAR 0 4
21660: PPUSH
21661: CALL_OW 380
// end else
21665: GO 21684
// PrepareHuman ( false , i , skill ) ;
21667: LD_INT 0
21669: PPUSH
21670: LD_VAR 0 8
21674: PPUSH
21675: LD_VAR 0 4
21679: PPUSH
21680: CALL_OW 380
// un := CreateHuman ;
21684: LD_ADDR_VAR 0 14
21688: PUSH
21689: CALL_OW 44
21693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21694: LD_ADDR_VAR 0 7
21698: PUSH
21699: LD_VAR 0 7
21703: PPUSH
21704: LD_INT 1
21706: PPUSH
21707: LD_VAR 0 14
21711: PPUSH
21712: CALL_OW 2
21716: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21717: LD_VAR 0 14
21721: PPUSH
21722: LD_VAR 0 12
21726: PUSH
21727: LD_INT 1
21729: ARRAY
21730: PPUSH
21731: CALL_OW 52
// end ;
21735: GO 21370
21737: POP
21738: POP
// end ;
21739: GO 20670
21741: POP
21742: POP
// result := result ^ buildings ;
21743: LD_ADDR_VAR 0 7
21747: PUSH
21748: LD_VAR 0 7
21752: PUSH
21753: LD_VAR 0 18
21757: ADD
21758: ST_TO_ADDR
// end else
21759: GO 21902
// begin for i = 1 to personel do
21761: LD_ADDR_VAR 0 8
21765: PUSH
21766: DOUBLE
21767: LD_INT 1
21769: DEC
21770: ST_TO_ADDR
21771: LD_VAR 0 6
21775: PUSH
21776: FOR_TO
21777: IFFALSE 21900
// begin if i > 4 then
21779: LD_VAR 0 8
21783: PUSH
21784: LD_INT 4
21786: GREATER
21787: IFFALSE 21791
// break ;
21789: GO 21900
// x := personel [ i ] ;
21791: LD_ADDR_VAR 0 13
21795: PUSH
21796: LD_VAR 0 6
21800: PUSH
21801: LD_VAR 0 8
21805: ARRAY
21806: ST_TO_ADDR
// if x = - 1 then
21807: LD_VAR 0 13
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: EQUAL
21816: IFFALSE 21820
// continue ;
21818: GO 21776
// PrepareHuman ( false , i , skill ) ;
21820: LD_INT 0
21822: PPUSH
21823: LD_VAR 0 8
21827: PPUSH
21828: LD_VAR 0 4
21832: PPUSH
21833: CALL_OW 380
// un := CreateHuman ;
21837: LD_ADDR_VAR 0 14
21841: PUSH
21842: CALL_OW 44
21846: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21847: LD_VAR 0 14
21851: PPUSH
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 250
21861: PPUSH
21862: LD_VAR 0 1
21866: PPUSH
21867: CALL_OW 251
21871: PPUSH
21872: LD_INT 10
21874: PPUSH
21875: LD_INT 0
21877: PPUSH
21878: CALL_OW 50
// result := result ^ un ;
21882: LD_ADDR_VAR 0 7
21886: PUSH
21887: LD_VAR 0 7
21891: PUSH
21892: LD_VAR 0 14
21896: ADD
21897: ST_TO_ADDR
// end ;
21898: GO 21776
21900: POP
21901: POP
// end ; end ;
21902: LD_VAR 0 7
21906: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
// result := false ;
21925: LD_ADDR_VAR 0 3
21929: PUSH
21930: LD_INT 0
21932: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21933: LD_VAR 0 1
21937: NOT
21938: IFTRUE 21963
21940: PUSH
21941: LD_VAR 0 1
21945: PPUSH
21946: CALL_OW 266
21950: PUSH
21951: LD_INT 32
21953: PUSH
21954: LD_INT 33
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: IN
21961: NOT
21962: OR
21963: IFFALSE 21967
// exit ;
21965: GO 23102
// nat := GetNation ( tower ) ;
21967: LD_ADDR_VAR 0 12
21971: PUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 248
21981: ST_TO_ADDR
// side := GetSide ( tower ) ;
21982: LD_ADDR_VAR 0 16
21986: PUSH
21987: LD_VAR 0 1
21991: PPUSH
21992: CALL_OW 255
21996: ST_TO_ADDR
// x := GetX ( tower ) ;
21997: LD_ADDR_VAR 0 10
22001: PUSH
22002: LD_VAR 0 1
22006: PPUSH
22007: CALL_OW 250
22011: ST_TO_ADDR
// y := GetY ( tower ) ;
22012: LD_ADDR_VAR 0 11
22016: PUSH
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL_OW 251
22026: ST_TO_ADDR
// if not x or not y then
22027: LD_VAR 0 10
22031: NOT
22032: IFTRUE 22041
22034: PUSH
22035: LD_VAR 0 11
22039: NOT
22040: OR
22041: IFFALSE 22045
// exit ;
22043: GO 23102
// weapon := 0 ;
22045: LD_ADDR_VAR 0 18
22049: PUSH
22050: LD_INT 0
22052: ST_TO_ADDR
// fac_list := [ ] ;
22053: LD_ADDR_VAR 0 17
22057: PUSH
22058: EMPTY
22059: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22060: LD_ADDR_VAR 0 6
22064: PUSH
22065: LD_VAR 0 1
22069: PPUSH
22070: CALL_OW 274
22074: PPUSH
22075: LD_VAR 0 2
22079: PPUSH
22080: LD_INT 0
22082: PPUSH
22083: CALL 19637 0 3
22087: PPUSH
22088: LD_INT 30
22090: PUSH
22091: LD_INT 3
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 72
22102: ST_TO_ADDR
// if not factories then
22103: LD_VAR 0 6
22107: NOT
22108: IFFALSE 22112
// exit ;
22110: GO 23102
// for i in factories do
22112: LD_ADDR_VAR 0 8
22116: PUSH
22117: LD_VAR 0 6
22121: PUSH
22122: FOR_IN
22123: IFFALSE 22148
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22125: LD_ADDR_VAR 0 17
22129: PUSH
22130: LD_VAR 0 17
22134: PUSH
22135: LD_VAR 0 8
22139: PPUSH
22140: CALL_OW 478
22144: UNION
22145: ST_TO_ADDR
22146: GO 22122
22148: POP
22149: POP
// if not fac_list then
22150: LD_VAR 0 17
22154: NOT
22155: IFFALSE 22159
// exit ;
22157: GO 23102
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22159: LD_ADDR_VAR 0 5
22163: PUSH
22164: LD_INT 4
22166: PUSH
22167: LD_INT 5
22169: PUSH
22170: LD_INT 9
22172: PUSH
22173: LD_INT 10
22175: PUSH
22176: LD_INT 6
22178: PUSH
22179: LD_INT 7
22181: PUSH
22182: LD_INT 11
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 27
22196: PUSH
22197: LD_INT 28
22199: PUSH
22200: LD_INT 26
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 43
22214: PUSH
22215: LD_INT 44
22217: PUSH
22218: LD_INT 46
22220: PUSH
22221: LD_INT 45
22223: PUSH
22224: LD_INT 47
22226: PUSH
22227: LD_INT 49
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: LD_VAR 0 12
22247: ARRAY
22248: ST_TO_ADDR
// list := list isect fac_list ;
22249: LD_ADDR_VAR 0 5
22253: PUSH
22254: LD_VAR 0 5
22258: PUSH
22259: LD_VAR 0 17
22263: ISECT
22264: ST_TO_ADDR
// if not list then
22265: LD_VAR 0 5
22269: NOT
22270: IFFALSE 22274
// exit ;
22272: GO 23102
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22274: LD_VAR 0 12
22278: PUSH
22279: LD_INT 3
22281: EQUAL
22282: IFFALSE 22294
22284: PUSH
22285: LD_INT 49
22287: PUSH
22288: LD_VAR 0 5
22292: IN
22293: AND
22294: IFFALSE 22314
22296: PUSH
22297: LD_INT 31
22299: PPUSH
22300: LD_VAR 0 16
22304: PPUSH
22305: CALL_OW 321
22309: PUSH
22310: LD_INT 2
22312: EQUAL
22313: AND
22314: IFFALSE 22374
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22316: LD_INT 22
22318: PUSH
22319: LD_VAR 0 16
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 35
22330: PUSH
22331: LD_INT 49
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 91
22340: PUSH
22341: LD_VAR 0 1
22345: PUSH
22346: LD_INT 10
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: NOT
22364: IFFALSE 22374
// weapon := ru_time_lapser ;
22366: LD_ADDR_VAR 0 18
22370: PUSH
22371: LD_INT 49
22373: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22374: LD_VAR 0 12
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: IN
22389: IFFALSE 22413
22391: PUSH
22392: LD_INT 11
22394: PUSH
22395: LD_VAR 0 5
22399: IN
22400: IFTRUE 22412
22402: PUSH
22403: LD_INT 30
22405: PUSH
22406: LD_VAR 0 5
22410: IN
22411: OR
22412: AND
22413: IFFALSE 22433
22415: PUSH
22416: LD_INT 6
22418: PPUSH
22419: LD_VAR 0 16
22423: PPUSH
22424: CALL_OW 321
22428: PUSH
22429: LD_INT 2
22431: EQUAL
22432: AND
22433: IFFALSE 22600
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22435: LD_INT 22
22437: PUSH
22438: LD_VAR 0 16
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: LD_INT 35
22452: PUSH
22453: LD_INT 11
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 35
22462: PUSH
22463: LD_INT 30
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 91
22477: PUSH
22478: LD_VAR 0 1
22482: PUSH
22483: LD_INT 18
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: PPUSH
22496: CALL_OW 69
22500: NOT
22501: IFFALSE 22577
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_VAR 0 16
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: LD_INT 30
22521: PUSH
22522: LD_INT 32
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 30
22531: PUSH
22532: LD_INT 33
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 91
22546: PUSH
22547: LD_VAR 0 1
22551: PUSH
22552: LD_INT 12
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: PUSH
22565: EMPTY
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: PUSH
22573: LD_INT 2
22575: GREATER
22576: AND
22577: IFFALSE 22600
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22579: LD_ADDR_VAR 0 18
22583: PUSH
22584: LD_INT 11
22586: PUSH
22587: LD_INT 30
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_VAR 0 12
22598: ARRAY
22599: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22600: LD_VAR 0 18
22604: NOT
22605: IFFALSE 22625
22607: PUSH
22608: LD_INT 40
22610: PPUSH
22611: LD_VAR 0 16
22615: PPUSH
22616: CALL_OW 321
22620: PUSH
22621: LD_INT 2
22623: EQUAL
22624: AND
22625: IFFALSE 22661
22627: PUSH
22628: LD_INT 7
22630: PUSH
22631: LD_VAR 0 5
22635: IN
22636: IFTRUE 22648
22638: PUSH
22639: LD_INT 28
22641: PUSH
22642: LD_VAR 0 5
22646: IN
22647: OR
22648: IFTRUE 22660
22650: PUSH
22651: LD_INT 45
22653: PUSH
22654: LD_VAR 0 5
22658: IN
22659: OR
22660: AND
22661: IFFALSE 22915
// begin hex := GetHexInfo ( x , y ) ;
22663: LD_ADDR_VAR 0 4
22667: PUSH
22668: LD_VAR 0 10
22672: PPUSH
22673: LD_VAR 0 11
22677: PPUSH
22678: CALL_OW 546
22682: ST_TO_ADDR
// if hex [ 1 ] then
22683: LD_VAR 0 4
22687: PUSH
22688: LD_INT 1
22690: ARRAY
22691: IFFALSE 22695
// exit ;
22693: GO 23102
// height := hex [ 2 ] ;
22695: LD_ADDR_VAR 0 15
22699: PUSH
22700: LD_VAR 0 4
22704: PUSH
22705: LD_INT 2
22707: ARRAY
22708: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22709: LD_ADDR_VAR 0 14
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: ST_TO_ADDR
// for i in tmp do
22732: LD_ADDR_VAR 0 8
22736: PUSH
22737: LD_VAR 0 14
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22913
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22745: LD_ADDR_VAR 0 9
22749: PUSH
22750: LD_VAR 0 10
22754: PPUSH
22755: LD_VAR 0 8
22759: PPUSH
22760: LD_INT 5
22762: PPUSH
22763: CALL_OW 272
22767: PUSH
22768: LD_VAR 0 11
22772: PPUSH
22773: LD_VAR 0 8
22777: PPUSH
22778: LD_INT 5
22780: PPUSH
22781: CALL_OW 273
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22790: LD_VAR 0 9
22794: PUSH
22795: LD_INT 1
22797: ARRAY
22798: PPUSH
22799: LD_VAR 0 9
22803: PUSH
22804: LD_INT 2
22806: ARRAY
22807: PPUSH
22808: CALL_OW 488
22812: IFFALSE 22911
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22814: LD_ADDR_VAR 0 4
22818: PUSH
22819: LD_VAR 0 9
22823: PUSH
22824: LD_INT 1
22826: ARRAY
22827: PPUSH
22828: LD_VAR 0 9
22832: PUSH
22833: LD_INT 2
22835: ARRAY
22836: PPUSH
22837: CALL_OW 546
22841: ST_TO_ADDR
// if hex [ 1 ] then
22842: LD_VAR 0 4
22846: PUSH
22847: LD_INT 1
22849: ARRAY
22850: IFFALSE 22854
// continue ;
22852: GO 22742
// h := hex [ 2 ] ;
22854: LD_ADDR_VAR 0 13
22858: PUSH
22859: LD_VAR 0 4
22863: PUSH
22864: LD_INT 2
22866: ARRAY
22867: ST_TO_ADDR
// if h + 7 < height then
22868: LD_VAR 0 13
22872: PUSH
22873: LD_INT 7
22875: PLUS
22876: PUSH
22877: LD_VAR 0 15
22881: LESS
22882: IFFALSE 22911
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22884: LD_ADDR_VAR 0 18
22888: PUSH
22889: LD_INT 7
22891: PUSH
22892: LD_INT 28
22894: PUSH
22895: LD_INT 45
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: LD_VAR 0 12
22907: ARRAY
22908: ST_TO_ADDR
// break ;
22909: GO 22913
// end ; end ; end ;
22911: GO 22742
22913: POP
22914: POP
// end ; if not weapon then
22915: LD_VAR 0 18
22919: NOT
22920: IFFALSE 22980
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22922: LD_ADDR_VAR 0 5
22926: PUSH
22927: LD_VAR 0 5
22931: PUSH
22932: LD_INT 11
22934: PUSH
22935: LD_INT 30
22937: PUSH
22938: LD_INT 49
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: LIST
22945: DIFF
22946: ST_TO_ADDR
// if not list then
22947: LD_VAR 0 5
22951: NOT
22952: IFFALSE 22956
// exit ;
22954: GO 23102
// weapon := list [ rand ( 1 , list ) ] ;
22956: LD_ADDR_VAR 0 18
22960: PUSH
22961: LD_VAR 0 5
22965: PUSH
22966: LD_INT 1
22968: PPUSH
22969: LD_VAR 0 5
22973: PPUSH
22974: CALL_OW 12
22978: ARRAY
22979: ST_TO_ADDR
// end ; if weapon then
22980: LD_VAR 0 18
22984: IFFALSE 23102
// begin tmp := CostOfWeapon ( weapon ) ;
22986: LD_ADDR_VAR 0 14
22990: PUSH
22991: LD_VAR 0 18
22995: PPUSH
22996: CALL_OW 451
23000: ST_TO_ADDR
// j := GetBase ( tower ) ;
23001: LD_ADDR_VAR 0 9
23005: PUSH
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 274
23015: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23016: LD_VAR 0 9
23020: PPUSH
23021: LD_INT 1
23023: PPUSH
23024: CALL_OW 275
23028: PUSH
23029: LD_VAR 0 14
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: GREATEREQUAL
23038: IFFALSE 23064
23040: PUSH
23041: LD_VAR 0 9
23045: PPUSH
23046: LD_INT 2
23048: PPUSH
23049: CALL_OW 275
23053: PUSH
23054: LD_VAR 0 14
23058: PUSH
23059: LD_INT 2
23061: ARRAY
23062: GREATEREQUAL
23063: AND
23064: IFFALSE 23090
23066: PUSH
23067: LD_VAR 0 9
23071: PPUSH
23072: LD_INT 3
23074: PPUSH
23075: CALL_OW 275
23079: PUSH
23080: LD_VAR 0 14
23084: PUSH
23085: LD_INT 3
23087: ARRAY
23088: GREATEREQUAL
23089: AND
23090: IFFALSE 23102
// result := weapon ;
23092: LD_ADDR_VAR 0 3
23096: PUSH
23097: LD_VAR 0 18
23101: ST_TO_ADDR
// end ; end ;
23102: LD_VAR 0 3
23106: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23107: LD_INT 0
23109: PPUSH
23110: PPUSH
// result := true ;
23111: LD_ADDR_VAR 0 3
23115: PUSH
23116: LD_INT 1
23118: ST_TO_ADDR
// if array1 = array2 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_VAR 0 2
23128: EQUAL
23129: IFFALSE 23189
// begin for i = 1 to array1 do
23131: LD_ADDR_VAR 0 4
23135: PUSH
23136: DOUBLE
23137: LD_INT 1
23139: DEC
23140: ST_TO_ADDR
23141: LD_VAR 0 1
23145: PUSH
23146: FOR_TO
23147: IFFALSE 23185
// if array1 [ i ] <> array2 [ i ] then
23149: LD_VAR 0 1
23153: PUSH
23154: LD_VAR 0 4
23158: ARRAY
23159: PUSH
23160: LD_VAR 0 2
23164: PUSH
23165: LD_VAR 0 4
23169: ARRAY
23170: NONEQUAL
23171: IFFALSE 23183
// begin result := false ;
23173: LD_ADDR_VAR 0 3
23177: PUSH
23178: LD_INT 0
23180: ST_TO_ADDR
// break ;
23181: GO 23185
// end ;
23183: GO 23146
23185: POP
23186: POP
// end else
23187: GO 23197
// result := false ;
23189: LD_ADDR_VAR 0 3
23193: PUSH
23194: LD_INT 0
23196: ST_TO_ADDR
// end ;
23197: LD_VAR 0 3
23201: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23202: LD_INT 0
23204: PPUSH
23205: PPUSH
// if not array1 or not array2 then
23206: LD_VAR 0 1
23210: NOT
23211: IFTRUE 23220
23213: PUSH
23214: LD_VAR 0 2
23218: NOT
23219: OR
23220: IFFALSE 23224
// exit ;
23222: GO 23288
// result := true ;
23224: LD_ADDR_VAR 0 3
23228: PUSH
23229: LD_INT 1
23231: ST_TO_ADDR
// for i = 1 to array1 do
23232: LD_ADDR_VAR 0 4
23236: PUSH
23237: DOUBLE
23238: LD_INT 1
23240: DEC
23241: ST_TO_ADDR
23242: LD_VAR 0 1
23246: PUSH
23247: FOR_TO
23248: IFFALSE 23286
// if array1 [ i ] <> array2 [ i ] then
23250: LD_VAR 0 1
23254: PUSH
23255: LD_VAR 0 4
23259: ARRAY
23260: PUSH
23261: LD_VAR 0 2
23265: PUSH
23266: LD_VAR 0 4
23270: ARRAY
23271: NONEQUAL
23272: IFFALSE 23284
// begin result := false ;
23274: LD_ADDR_VAR 0 3
23278: PUSH
23279: LD_INT 0
23281: ST_TO_ADDR
// break ;
23282: GO 23286
// end ;
23284: GO 23247
23286: POP
23287: POP
// end ;
23288: LD_VAR 0 3
23292: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23293: LD_INT 0
23295: PPUSH
23296: PPUSH
23297: PPUSH
// pom := GetBase ( fac ) ;
23298: LD_ADDR_VAR 0 5
23302: PUSH
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 274
23312: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23313: LD_ADDR_VAR 0 4
23317: PUSH
23318: LD_VAR 0 2
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 2
23331: PUSH
23332: LD_INT 2
23334: ARRAY
23335: PPUSH
23336: LD_VAR 0 2
23340: PUSH
23341: LD_INT 3
23343: ARRAY
23344: PPUSH
23345: LD_VAR 0 2
23349: PUSH
23350: LD_INT 4
23352: ARRAY
23353: PPUSH
23354: CALL_OW 449
23358: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23359: LD_ADDR_VAR 0 3
23363: PUSH
23364: LD_VAR 0 5
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 275
23376: PUSH
23377: LD_VAR 0 4
23381: PUSH
23382: LD_INT 1
23384: ARRAY
23385: GREATEREQUAL
23386: IFFALSE 23412
23388: PUSH
23389: LD_VAR 0 5
23393: PPUSH
23394: LD_INT 2
23396: PPUSH
23397: CALL_OW 275
23401: PUSH
23402: LD_VAR 0 4
23406: PUSH
23407: LD_INT 2
23409: ARRAY
23410: GREATEREQUAL
23411: AND
23412: IFFALSE 23438
23414: PUSH
23415: LD_VAR 0 5
23419: PPUSH
23420: LD_INT 3
23422: PPUSH
23423: CALL_OW 275
23427: PUSH
23428: LD_VAR 0 4
23432: PUSH
23433: LD_INT 3
23435: ARRAY
23436: GREATEREQUAL
23437: AND
23438: ST_TO_ADDR
// end ;
23439: LD_VAR 0 3
23443: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23444: LD_INT 0
23446: PPUSH
23447: PPUSH
23448: PPUSH
23449: PPUSH
// pom := GetBase ( building ) ;
23450: LD_ADDR_VAR 0 3
23454: PUSH
23455: LD_VAR 0 1
23459: PPUSH
23460: CALL_OW 274
23464: ST_TO_ADDR
// if not pom then
23465: LD_VAR 0 3
23469: NOT
23470: IFFALSE 23474
// exit ;
23472: GO 23648
// btype := GetBType ( building ) ;
23474: LD_ADDR_VAR 0 5
23478: PUSH
23479: LD_VAR 0 1
23483: PPUSH
23484: CALL_OW 266
23488: ST_TO_ADDR
// if btype = b_armoury then
23489: LD_VAR 0 5
23493: PUSH
23494: LD_INT 4
23496: EQUAL
23497: IFFALSE 23507
// btype := b_barracks ;
23499: LD_ADDR_VAR 0 5
23503: PUSH
23504: LD_INT 5
23506: ST_TO_ADDR
// if btype = b_depot then
23507: LD_VAR 0 5
23511: PUSH
23512: LD_INT 0
23514: EQUAL
23515: IFFALSE 23525
// btype := b_warehouse ;
23517: LD_ADDR_VAR 0 5
23521: PUSH
23522: LD_INT 1
23524: ST_TO_ADDR
// if btype = b_workshop then
23525: LD_VAR 0 5
23529: PUSH
23530: LD_INT 2
23532: EQUAL
23533: IFFALSE 23543
// btype := b_factory ;
23535: LD_ADDR_VAR 0 5
23539: PUSH
23540: LD_INT 3
23542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23543: LD_ADDR_VAR 0 4
23547: PUSH
23548: LD_VAR 0 5
23552: PPUSH
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 248
23562: PPUSH
23563: CALL_OW 450
23567: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23568: LD_ADDR_VAR 0 2
23572: PUSH
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_INT 1
23580: PPUSH
23581: CALL_OW 275
23585: PUSH
23586: LD_VAR 0 4
23590: PUSH
23591: LD_INT 1
23593: ARRAY
23594: GREATEREQUAL
23595: IFFALSE 23621
23597: PUSH
23598: LD_VAR 0 3
23602: PPUSH
23603: LD_INT 2
23605: PPUSH
23606: CALL_OW 275
23610: PUSH
23611: LD_VAR 0 4
23615: PUSH
23616: LD_INT 2
23618: ARRAY
23619: GREATEREQUAL
23620: AND
23621: IFFALSE 23647
23623: PUSH
23624: LD_VAR 0 3
23628: PPUSH
23629: LD_INT 3
23631: PPUSH
23632: CALL_OW 275
23636: PUSH
23637: LD_VAR 0 4
23641: PUSH
23642: LD_INT 3
23644: ARRAY
23645: GREATEREQUAL
23646: AND
23647: ST_TO_ADDR
// end ;
23648: LD_VAR 0 2
23652: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23653: LD_INT 0
23655: PPUSH
23656: PPUSH
23657: PPUSH
// pom := GetBase ( building ) ;
23658: LD_ADDR_VAR 0 4
23662: PUSH
23663: LD_VAR 0 1
23667: PPUSH
23668: CALL_OW 274
23672: ST_TO_ADDR
// if not pom then
23673: LD_VAR 0 4
23677: NOT
23678: IFFALSE 23682
// exit ;
23680: GO 23787
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23682: LD_ADDR_VAR 0 5
23686: PUSH
23687: LD_VAR 0 2
23691: PPUSH
23692: LD_VAR 0 1
23696: PPUSH
23697: CALL_OW 248
23701: PPUSH
23702: CALL_OW 450
23706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23707: LD_ADDR_VAR 0 3
23711: PUSH
23712: LD_VAR 0 4
23716: PPUSH
23717: LD_INT 1
23719: PPUSH
23720: CALL_OW 275
23724: PUSH
23725: LD_VAR 0 5
23729: PUSH
23730: LD_INT 1
23732: ARRAY
23733: GREATEREQUAL
23734: IFFALSE 23760
23736: PUSH
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_INT 2
23744: PPUSH
23745: CALL_OW 275
23749: PUSH
23750: LD_VAR 0 5
23754: PUSH
23755: LD_INT 2
23757: ARRAY
23758: GREATEREQUAL
23759: AND
23760: IFFALSE 23786
23762: PUSH
23763: LD_VAR 0 4
23767: PPUSH
23768: LD_INT 3
23770: PPUSH
23771: CALL_OW 275
23775: PUSH
23776: LD_VAR 0 5
23780: PUSH
23781: LD_INT 3
23783: ARRAY
23784: GREATEREQUAL
23785: AND
23786: ST_TO_ADDR
// end ;
23787: LD_VAR 0 3
23791: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23792: LD_INT 0
23794: PPUSH
23795: PPUSH
23796: PPUSH
23797: PPUSH
23798: PPUSH
23799: PPUSH
23800: PPUSH
23801: PPUSH
23802: PPUSH
23803: PPUSH
23804: PPUSH
// result := false ;
23805: LD_ADDR_VAR 0 8
23809: PUSH
23810: LD_INT 0
23812: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23813: LD_VAR 0 5
23817: NOT
23818: IFTRUE 23827
23820: PUSH
23821: LD_VAR 0 1
23825: NOT
23826: OR
23827: IFTRUE 23836
23829: PUSH
23830: LD_VAR 0 2
23834: NOT
23835: OR
23836: IFTRUE 23845
23838: PUSH
23839: LD_VAR 0 3
23843: NOT
23844: OR
23845: IFFALSE 23849
// exit ;
23847: GO 24675
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23849: LD_ADDR_VAR 0 14
23853: PUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: LD_VAR 0 2
23863: PPUSH
23864: LD_VAR 0 3
23868: PPUSH
23869: LD_VAR 0 4
23873: PPUSH
23874: LD_VAR 0 5
23878: PUSH
23879: LD_INT 1
23881: ARRAY
23882: PPUSH
23883: CALL_OW 248
23887: PPUSH
23888: LD_INT 0
23890: PPUSH
23891: CALL 25956 0 6
23895: ST_TO_ADDR
// if not hexes then
23896: LD_VAR 0 14
23900: NOT
23901: IFFALSE 23905
// exit ;
23903: GO 24675
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23905: LD_ADDR_VAR 0 17
23909: PUSH
23910: LD_VAR 0 5
23914: PPUSH
23915: LD_INT 22
23917: PUSH
23918: LD_VAR 0 13
23922: PPUSH
23923: CALL_OW 255
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 2
23934: PUSH
23935: LD_INT 30
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 30
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 72
23968: ST_TO_ADDR
// for i = 1 to hexes do
23969: LD_ADDR_VAR 0 9
23973: PUSH
23974: DOUBLE
23975: LD_INT 1
23977: DEC
23978: ST_TO_ADDR
23979: LD_VAR 0 14
23983: PUSH
23984: FOR_TO
23985: IFFALSE 24673
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23987: LD_ADDR_VAR 0 13
23991: PUSH
23992: LD_VAR 0 14
23996: PUSH
23997: LD_VAR 0 9
24001: ARRAY
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: PPUSH
24007: LD_VAR 0 14
24011: PUSH
24012: LD_VAR 0 9
24016: ARRAY
24017: PUSH
24018: LD_INT 2
24020: ARRAY
24021: PPUSH
24022: CALL_OW 428
24026: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24027: LD_VAR 0 14
24031: PUSH
24032: LD_VAR 0 9
24036: ARRAY
24037: PUSH
24038: LD_INT 1
24040: ARRAY
24041: PPUSH
24042: LD_VAR 0 14
24046: PUSH
24047: LD_VAR 0 9
24051: ARRAY
24052: PUSH
24053: LD_INT 2
24055: ARRAY
24056: PPUSH
24057: CALL_OW 351
24061: IFTRUE 24100
24063: PUSH
24064: LD_VAR 0 14
24068: PUSH
24069: LD_VAR 0 9
24073: ARRAY
24074: PUSH
24075: LD_INT 1
24077: ARRAY
24078: PPUSH
24079: LD_VAR 0 14
24083: PUSH
24084: LD_VAR 0 9
24088: ARRAY
24089: PUSH
24090: LD_INT 2
24092: ARRAY
24093: PPUSH
24094: CALL_OW 488
24098: NOT
24099: OR
24100: IFTRUE 24117
24102: PUSH
24103: LD_VAR 0 13
24107: PPUSH
24108: CALL_OW 247
24112: PUSH
24113: LD_INT 3
24115: EQUAL
24116: OR
24117: IFFALSE 24123
// exit ;
24119: POP
24120: POP
24121: GO 24675
// if not tmp then
24123: LD_VAR 0 13
24127: NOT
24128: IFFALSE 24132
// continue ;
24130: GO 23984
// result := true ;
24132: LD_ADDR_VAR 0 8
24136: PUSH
24137: LD_INT 1
24139: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24140: LD_VAR 0 6
24144: IFFALSE 24161
24146: PUSH
24147: LD_VAR 0 13
24151: PPUSH
24152: CALL_OW 247
24156: PUSH
24157: LD_INT 2
24159: EQUAL
24160: AND
24161: IFFALSE 24178
24163: PUSH
24164: LD_VAR 0 13
24168: PPUSH
24169: CALL_OW 263
24173: PUSH
24174: LD_INT 1
24176: EQUAL
24177: AND
24178: IFFALSE 24342
// begin if IsDrivenBy ( tmp ) then
24180: LD_VAR 0 13
24184: PPUSH
24185: CALL_OW 311
24189: IFFALSE 24193
// continue ;
24191: GO 23984
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24193: LD_VAR 0 6
24197: PPUSH
24198: LD_INT 3
24200: PUSH
24201: LD_INT 60
24203: PUSH
24204: EMPTY
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 3
24213: PUSH
24214: LD_INT 55
24216: PUSH
24217: EMPTY
24218: LIST
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PPUSH
24228: CALL_OW 72
24232: IFFALSE 24340
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24234: LD_ADDR_VAR 0 18
24238: PUSH
24239: LD_VAR 0 6
24243: PPUSH
24244: LD_INT 3
24246: PUSH
24247: LD_INT 60
24249: PUSH
24250: EMPTY
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: LD_INT 55
24262: PUSH
24263: EMPTY
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PPUSH
24274: CALL_OW 72
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: ST_TO_ADDR
// if IsInUnit ( driver ) then
24283: LD_VAR 0 18
24287: PPUSH
24288: CALL_OW 310
24292: IFFALSE 24303
// ComExit ( driver ) ;
24294: LD_VAR 0 18
24298: PPUSH
24299: CALL 49956 0 1
// AddComEnterUnit ( driver , tmp ) ;
24303: LD_VAR 0 18
24307: PPUSH
24308: LD_VAR 0 13
24312: PPUSH
24313: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24317: LD_VAR 0 18
24321: PPUSH
24322: LD_VAR 0 7
24326: PPUSH
24327: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24331: LD_VAR 0 18
24335: PPUSH
24336: CALL_OW 181
// end ; continue ;
24340: GO 23984
// end ; if not cleaners or not tmp in cleaners then
24342: LD_VAR 0 6
24346: NOT
24347: IFTRUE 24362
24349: PUSH
24350: LD_VAR 0 13
24354: PUSH
24355: LD_VAR 0 6
24359: IN
24360: NOT
24361: OR
24362: IFFALSE 24671
// begin if dep then
24364: LD_VAR 0 17
24368: IFFALSE 24504
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24370: LD_ADDR_VAR 0 16
24374: PUSH
24375: LD_VAR 0 17
24379: PUSH
24380: LD_INT 1
24382: ARRAY
24383: PPUSH
24384: CALL_OW 250
24388: PPUSH
24389: LD_VAR 0 17
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: PPUSH
24398: CALL_OW 254
24402: PPUSH
24403: LD_INT 5
24405: PPUSH
24406: CALL_OW 272
24410: PUSH
24411: LD_VAR 0 17
24415: PUSH
24416: LD_INT 1
24418: ARRAY
24419: PPUSH
24420: CALL_OW 251
24424: PPUSH
24425: LD_VAR 0 17
24429: PUSH
24430: LD_INT 1
24432: ARRAY
24433: PPUSH
24434: CALL_OW 254
24438: PPUSH
24439: LD_INT 5
24441: PPUSH
24442: CALL_OW 273
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24451: LD_VAR 0 16
24455: PUSH
24456: LD_INT 1
24458: ARRAY
24459: PPUSH
24460: LD_VAR 0 16
24464: PUSH
24465: LD_INT 2
24467: ARRAY
24468: PPUSH
24469: CALL_OW 488
24473: IFFALSE 24504
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24475: LD_VAR 0 13
24479: PPUSH
24480: LD_VAR 0 16
24484: PUSH
24485: LD_INT 1
24487: ARRAY
24488: PPUSH
24489: LD_VAR 0 16
24493: PUSH
24494: LD_INT 2
24496: ARRAY
24497: PPUSH
24498: CALL_OW 111
// continue ;
24502: GO 23984
// end ; end ; r := GetDir ( tmp ) ;
24504: LD_ADDR_VAR 0 15
24508: PUSH
24509: LD_VAR 0 13
24513: PPUSH
24514: CALL_OW 254
24518: ST_TO_ADDR
// if r = 5 then
24519: LD_VAR 0 15
24523: PUSH
24524: LD_INT 5
24526: EQUAL
24527: IFFALSE 24537
// r := 0 ;
24529: LD_ADDR_VAR 0 15
24533: PUSH
24534: LD_INT 0
24536: ST_TO_ADDR
// for j = r to 5 do
24537: LD_ADDR_VAR 0 10
24541: PUSH
24542: DOUBLE
24543: LD_VAR 0 15
24547: DEC
24548: ST_TO_ADDR
24549: LD_INT 5
24551: PUSH
24552: FOR_TO
24553: IFFALSE 24669
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24555: LD_ADDR_VAR 0 11
24559: PUSH
24560: LD_VAR 0 13
24564: PPUSH
24565: CALL_OW 250
24569: PPUSH
24570: LD_VAR 0 10
24574: PPUSH
24575: LD_INT 2
24577: PPUSH
24578: CALL_OW 272
24582: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24583: LD_ADDR_VAR 0 12
24587: PUSH
24588: LD_VAR 0 13
24592: PPUSH
24593: CALL_OW 251
24597: PPUSH
24598: LD_VAR 0 10
24602: PPUSH
24603: LD_INT 2
24605: PPUSH
24606: CALL_OW 273
24610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24611: LD_VAR 0 11
24615: PPUSH
24616: LD_VAR 0 12
24620: PPUSH
24621: CALL_OW 488
24625: IFFALSE 24644
24627: PUSH
24628: LD_VAR 0 11
24632: PPUSH
24633: LD_VAR 0 12
24637: PPUSH
24638: CALL_OW 428
24642: NOT
24643: AND
24644: IFFALSE 24667
// begin ComMoveXY ( tmp , _x , _y ) ;
24646: LD_VAR 0 13
24650: PPUSH
24651: LD_VAR 0 11
24655: PPUSH
24656: LD_VAR 0 12
24660: PPUSH
24661: CALL_OW 111
// break ;
24665: GO 24669
// end ; end ;
24667: GO 24552
24669: POP
24670: POP
// end ; end ;
24671: GO 23984
24673: POP
24674: POP
// end ;
24675: LD_VAR 0 8
24679: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24680: LD_INT 0
24682: PPUSH
// result := true ;
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 1
24690: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24691: LD_VAR 0 2
24695: PUSH
24696: LD_INT 24
24698: DOUBLE
24699: EQUAL
24700: IFTRUE 24710
24702: LD_INT 33
24704: DOUBLE
24705: EQUAL
24706: IFTRUE 24710
24708: GO 24735
24710: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24711: LD_ADDR_VAR 0 3
24715: PUSH
24716: LD_INT 32
24718: PPUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL_OW 321
24728: PUSH
24729: LD_INT 2
24731: EQUAL
24732: ST_TO_ADDR
24733: GO 25051
24735: LD_INT 20
24737: DOUBLE
24738: EQUAL
24739: IFTRUE 24743
24741: GO 24768
24743: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24744: LD_ADDR_VAR 0 3
24748: PUSH
24749: LD_INT 6
24751: PPUSH
24752: LD_VAR 0 1
24756: PPUSH
24757: CALL_OW 321
24761: PUSH
24762: LD_INT 2
24764: EQUAL
24765: ST_TO_ADDR
24766: GO 25051
24768: LD_INT 22
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24782
24774: LD_INT 36
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24807
24782: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24783: LD_ADDR_VAR 0 3
24787: PUSH
24788: LD_INT 15
24790: PPUSH
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL_OW 321
24800: PUSH
24801: LD_INT 2
24803: EQUAL
24804: ST_TO_ADDR
24805: GO 25051
24807: LD_INT 30
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 24840
24815: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: LD_INT 20
24823: PPUSH
24824: LD_VAR 0 1
24828: PPUSH
24829: CALL_OW 321
24833: PUSH
24834: LD_INT 2
24836: EQUAL
24837: ST_TO_ADDR
24838: GO 25051
24840: LD_INT 28
24842: DOUBLE
24843: EQUAL
24844: IFTRUE 24854
24846: LD_INT 21
24848: DOUBLE
24849: EQUAL
24850: IFTRUE 24854
24852: GO 24879
24854: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24855: LD_ADDR_VAR 0 3
24859: PUSH
24860: LD_INT 21
24862: PPUSH
24863: LD_VAR 0 1
24867: PPUSH
24868: CALL_OW 321
24872: PUSH
24873: LD_INT 2
24875: EQUAL
24876: ST_TO_ADDR
24877: GO 25051
24879: LD_INT 16
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24912
24887: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 84
24895: PPUSH
24896: LD_VAR 0 1
24900: PPUSH
24901: CALL_OW 321
24905: PUSH
24906: LD_INT 2
24908: EQUAL
24909: ST_TO_ADDR
24910: GO 25051
24912: LD_INT 19
24914: DOUBLE
24915: EQUAL
24916: IFTRUE 24926
24918: LD_INT 23
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 24951
24926: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_INT 83
24934: PPUSH
24935: LD_VAR 0 1
24939: PPUSH
24940: CALL_OW 321
24944: PUSH
24945: LD_INT 2
24947: EQUAL
24948: ST_TO_ADDR
24949: GO 25051
24951: LD_INT 17
24953: DOUBLE
24954: EQUAL
24955: IFTRUE 24959
24957: GO 24984
24959: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24960: LD_ADDR_VAR 0 3
24964: PUSH
24965: LD_INT 39
24967: PPUSH
24968: LD_VAR 0 1
24972: PPUSH
24973: CALL_OW 321
24977: PUSH
24978: LD_INT 2
24980: EQUAL
24981: ST_TO_ADDR
24982: GO 25051
24984: LD_INT 18
24986: DOUBLE
24987: EQUAL
24988: IFTRUE 24992
24990: GO 25017
24992: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24993: LD_ADDR_VAR 0 3
24997: PUSH
24998: LD_INT 40
25000: PPUSH
25001: LD_VAR 0 1
25005: PPUSH
25006: CALL_OW 321
25010: PUSH
25011: LD_INT 2
25013: EQUAL
25014: ST_TO_ADDR
25015: GO 25051
25017: LD_INT 27
25019: DOUBLE
25020: EQUAL
25021: IFTRUE 25025
25023: GO 25050
25025: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25026: LD_ADDR_VAR 0 3
25030: PUSH
25031: LD_INT 35
25033: PPUSH
25034: LD_VAR 0 1
25038: PPUSH
25039: CALL_OW 321
25043: PUSH
25044: LD_INT 2
25046: EQUAL
25047: ST_TO_ADDR
25048: GO 25051
25050: POP
// end ;
25051: LD_VAR 0 3
25055: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25056: LD_INT 0
25058: PPUSH
25059: PPUSH
25060: PPUSH
25061: PPUSH
25062: PPUSH
25063: PPUSH
25064: PPUSH
25065: PPUSH
25066: PPUSH
25067: PPUSH
25068: PPUSH
// result := false ;
25069: LD_ADDR_VAR 0 6
25073: PUSH
25074: LD_INT 0
25076: ST_TO_ADDR
// if btype = b_depot then
25077: LD_VAR 0 2
25081: PUSH
25082: LD_INT 0
25084: EQUAL
25085: IFFALSE 25097
// begin result := true ;
25087: LD_ADDR_VAR 0 6
25091: PUSH
25092: LD_INT 1
25094: ST_TO_ADDR
// exit ;
25095: GO 25951
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25097: LD_VAR 0 1
25101: NOT
25102: IFTRUE 25127
25104: PUSH
25105: LD_VAR 0 1
25109: PPUSH
25110: CALL_OW 266
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: IN
25125: NOT
25126: OR
25127: IFTRUE 25136
25129: PUSH
25130: LD_VAR 0 2
25134: NOT
25135: OR
25136: IFTRUE 25172
25138: PUSH
25139: LD_VAR 0 5
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: LD_INT 4
25158: PUSH
25159: LD_INT 5
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: IN
25170: NOT
25171: OR
25172: IFTRUE 25191
25174: PUSH
25175: LD_VAR 0 3
25179: PPUSH
25180: LD_VAR 0 4
25184: PPUSH
25185: CALL_OW 488
25189: NOT
25190: OR
25191: IFFALSE 25195
// exit ;
25193: GO 25951
// side := GetSide ( depot ) ;
25195: LD_ADDR_VAR 0 9
25199: PUSH
25200: LD_VAR 0 1
25204: PPUSH
25205: CALL_OW 255
25209: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25210: LD_VAR 0 9
25214: PPUSH
25215: LD_VAR 0 2
25219: PPUSH
25220: CALL 24680 0 2
25224: NOT
25225: IFFALSE 25229
// exit ;
25227: GO 25951
// pom := GetBase ( depot ) ;
25229: LD_ADDR_VAR 0 10
25233: PUSH
25234: LD_VAR 0 1
25238: PPUSH
25239: CALL_OW 274
25243: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25244: LD_ADDR_VAR 0 11
25248: PUSH
25249: LD_VAR 0 2
25253: PPUSH
25254: LD_VAR 0 1
25258: PPUSH
25259: CALL_OW 248
25263: PPUSH
25264: CALL_OW 450
25268: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25269: LD_VAR 0 10
25273: PPUSH
25274: LD_INT 1
25276: PPUSH
25277: CALL_OW 275
25281: PUSH
25282: LD_VAR 0 11
25286: PUSH
25287: LD_INT 1
25289: ARRAY
25290: GREATEREQUAL
25291: IFFALSE 25317
25293: PUSH
25294: LD_VAR 0 10
25298: PPUSH
25299: LD_INT 2
25301: PPUSH
25302: CALL_OW 275
25306: PUSH
25307: LD_VAR 0 11
25311: PUSH
25312: LD_INT 2
25314: ARRAY
25315: GREATEREQUAL
25316: AND
25317: IFFALSE 25343
25319: PUSH
25320: LD_VAR 0 10
25324: PPUSH
25325: LD_INT 3
25327: PPUSH
25328: CALL_OW 275
25332: PUSH
25333: LD_VAR 0 11
25337: PUSH
25338: LD_INT 3
25340: ARRAY
25341: GREATEREQUAL
25342: AND
25343: NOT
25344: IFFALSE 25348
// exit ;
25346: GO 25951
// if GetBType ( depot ) = b_depot then
25348: LD_VAR 0 1
25352: PPUSH
25353: CALL_OW 266
25357: PUSH
25358: LD_INT 0
25360: EQUAL
25361: IFFALSE 25373
// dist := 28 else
25363: LD_ADDR_VAR 0 14
25367: PUSH
25368: LD_INT 28
25370: ST_TO_ADDR
25371: GO 25381
// dist := 36 ;
25373: LD_ADDR_VAR 0 14
25377: PUSH
25378: LD_INT 36
25380: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25381: LD_VAR 0 1
25385: PPUSH
25386: LD_VAR 0 3
25390: PPUSH
25391: LD_VAR 0 4
25395: PPUSH
25396: CALL_OW 297
25400: PUSH
25401: LD_VAR 0 14
25405: GREATER
25406: IFFALSE 25410
// exit ;
25408: GO 25951
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25410: LD_ADDR_VAR 0 12
25414: PUSH
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_VAR 0 3
25424: PPUSH
25425: LD_VAR 0 4
25429: PPUSH
25430: LD_VAR 0 5
25434: PPUSH
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL_OW 248
25444: PPUSH
25445: LD_INT 0
25447: PPUSH
25448: CALL 25956 0 6
25452: ST_TO_ADDR
// if not hexes then
25453: LD_VAR 0 12
25457: NOT
25458: IFFALSE 25462
// exit ;
25460: GO 25951
// hex := GetHexInfo ( x , y ) ;
25462: LD_ADDR_VAR 0 15
25466: PUSH
25467: LD_VAR 0 3
25471: PPUSH
25472: LD_VAR 0 4
25476: PPUSH
25477: CALL_OW 546
25481: ST_TO_ADDR
// if hex [ 1 ] then
25482: LD_VAR 0 15
25486: PUSH
25487: LD_INT 1
25489: ARRAY
25490: IFFALSE 25494
// exit ;
25492: GO 25951
// height := hex [ 2 ] ;
25494: LD_ADDR_VAR 0 13
25498: PUSH
25499: LD_VAR 0 15
25503: PUSH
25504: LD_INT 2
25506: ARRAY
25507: ST_TO_ADDR
// for i = 1 to hexes do
25508: LD_ADDR_VAR 0 7
25512: PUSH
25513: DOUBLE
25514: LD_INT 1
25516: DEC
25517: ST_TO_ADDR
25518: LD_VAR 0 12
25522: PUSH
25523: FOR_TO
25524: IFFALSE 25868
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25526: LD_VAR 0 12
25530: PUSH
25531: LD_VAR 0 7
25535: ARRAY
25536: PUSH
25537: LD_INT 1
25539: ARRAY
25540: PPUSH
25541: LD_VAR 0 12
25545: PUSH
25546: LD_VAR 0 7
25550: ARRAY
25551: PUSH
25552: LD_INT 2
25554: ARRAY
25555: PPUSH
25556: CALL_OW 488
25560: NOT
25561: IFTRUE 25603
25563: PUSH
25564: LD_VAR 0 12
25568: PUSH
25569: LD_VAR 0 7
25573: ARRAY
25574: PUSH
25575: LD_INT 1
25577: ARRAY
25578: PPUSH
25579: LD_VAR 0 12
25583: PUSH
25584: LD_VAR 0 7
25588: ARRAY
25589: PUSH
25590: LD_INT 2
25592: ARRAY
25593: PPUSH
25594: CALL_OW 428
25598: PUSH
25599: LD_INT 0
25601: GREATER
25602: OR
25603: IFTRUE 25641
25605: PUSH
25606: LD_VAR 0 12
25610: PUSH
25611: LD_VAR 0 7
25615: ARRAY
25616: PUSH
25617: LD_INT 1
25619: ARRAY
25620: PPUSH
25621: LD_VAR 0 12
25625: PUSH
25626: LD_VAR 0 7
25630: ARRAY
25631: PUSH
25632: LD_INT 2
25634: ARRAY
25635: PPUSH
25636: CALL_OW 351
25640: OR
25641: IFFALSE 25647
// exit ;
25643: POP
25644: POP
25645: GO 25951
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25647: LD_ADDR_VAR 0 8
25651: PUSH
25652: LD_VAR 0 12
25656: PUSH
25657: LD_VAR 0 7
25661: ARRAY
25662: PUSH
25663: LD_INT 1
25665: ARRAY
25666: PPUSH
25667: LD_VAR 0 12
25671: PUSH
25672: LD_VAR 0 7
25676: ARRAY
25677: PUSH
25678: LD_INT 2
25680: ARRAY
25681: PPUSH
25682: CALL_OW 546
25686: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25687: LD_VAR 0 8
25691: PUSH
25692: LD_INT 1
25694: ARRAY
25695: IFTRUE 25717
25697: PUSH
25698: LD_VAR 0 8
25702: PUSH
25703: LD_INT 2
25705: ARRAY
25706: PUSH
25707: LD_VAR 0 13
25711: PUSH
25712: LD_INT 2
25714: PLUS
25715: GREATER
25716: OR
25717: IFTRUE 25739
25719: PUSH
25720: LD_VAR 0 8
25724: PUSH
25725: LD_INT 2
25727: ARRAY
25728: PUSH
25729: LD_VAR 0 13
25733: PUSH
25734: LD_INT 2
25736: MINUS
25737: LESS
25738: OR
25739: IFTRUE 25807
25741: PUSH
25742: LD_VAR 0 8
25746: PUSH
25747: LD_INT 3
25749: ARRAY
25750: PUSH
25751: LD_INT 0
25753: PUSH
25754: LD_INT 8
25756: PUSH
25757: LD_INT 9
25759: PUSH
25760: LD_INT 10
25762: PUSH
25763: LD_INT 11
25765: PUSH
25766: LD_INT 12
25768: PUSH
25769: LD_INT 13
25771: PUSH
25772: LD_INT 16
25774: PUSH
25775: LD_INT 17
25777: PUSH
25778: LD_INT 18
25780: PUSH
25781: LD_INT 19
25783: PUSH
25784: LD_INT 20
25786: PUSH
25787: LD_INT 21
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: IN
25805: NOT
25806: OR
25807: IFTRUE 25820
25809: PUSH
25810: LD_VAR 0 8
25814: PUSH
25815: LD_INT 5
25817: ARRAY
25818: NOT
25819: OR
25820: IFTRUE 25860
25822: PUSH
25823: LD_VAR 0 8
25827: PUSH
25828: LD_INT 6
25830: ARRAY
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 7
25840: PUSH
25841: LD_INT 9
25843: PUSH
25844: LD_INT 10
25846: PUSH
25847: LD_INT 11
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: IN
25858: NOT
25859: OR
25860: IFFALSE 25866
// exit ;
25862: POP
25863: POP
25864: GO 25951
// end ;
25866: GO 25523
25868: POP
25869: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25870: LD_VAR 0 9
25874: PPUSH
25875: LD_VAR 0 3
25879: PPUSH
25880: LD_VAR 0 4
25884: PPUSH
25885: LD_INT 20
25887: PPUSH
25888: CALL 17770 0 4
25892: PUSH
25893: LD_INT 4
25895: ARRAY
25896: IFFALSE 25900
// exit ;
25898: GO 25951
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25900: LD_VAR 0 2
25904: PUSH
25905: LD_INT 29
25907: PUSH
25908: LD_INT 30
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: IN
25915: IFFALSE 25939
25917: PUSH
25918: LD_VAR 0 3
25922: PPUSH
25923: LD_VAR 0 4
25927: PPUSH
25928: LD_VAR 0 9
25932: PPUSH
25933: CALL_OW 440
25937: NOT
25938: AND
25939: IFFALSE 25943
// exit ;
25941: GO 25951
// result := true ;
25943: LD_ADDR_VAR 0 6
25947: PUSH
25948: LD_INT 1
25950: ST_TO_ADDR
// end ;
25951: LD_VAR 0 6
25955: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25956: LD_INT 0
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
26011: PPUSH
26012: PPUSH
26013: PPUSH
26014: PPUSH
26015: PPUSH
// result = [ ] ;
26016: LD_ADDR_VAR 0 7
26020: PUSH
26021: EMPTY
26022: ST_TO_ADDR
// temp_list = [ ] ;
26023: LD_ADDR_VAR 0 9
26027: PUSH
26028: EMPTY
26029: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26030: LD_VAR 0 4
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: LD_INT 4
26049: PUSH
26050: LD_INT 5
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: IN
26061: NOT
26062: IFTRUE 26105
26064: PUSH
26065: LD_VAR 0 1
26069: PUSH
26070: LD_INT 0
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: IN
26080: IFFALSE 26104
26082: PUSH
26083: LD_VAR 0 5
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: LD_INT 2
26093: PUSH
26094: LD_INT 3
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: IN
26102: NOT
26103: AND
26104: OR
26105: IFFALSE 26109
// exit ;
26107: GO 44508
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26109: LD_VAR 0 1
26113: PUSH
26114: LD_INT 6
26116: PUSH
26117: LD_INT 7
26119: PUSH
26120: LD_INT 8
26122: PUSH
26123: LD_INT 13
26125: PUSH
26126: LD_INT 12
26128: PUSH
26129: LD_INT 15
26131: PUSH
26132: LD_INT 11
26134: PUSH
26135: LD_INT 14
26137: PUSH
26138: LD_INT 10
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: IN
26152: IFFALSE 26162
// btype = b_lab ;
26154: LD_ADDR_VAR 0 1
26158: PUSH
26159: LD_INT 6
26161: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26162: LD_VAR 0 6
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: LD_INT 2
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: IN
26181: NOT
26182: IFTRUE 26250
26184: PUSH
26185: LD_VAR 0 1
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 2
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: LD_INT 6
26204: PUSH
26205: LD_INT 36
26207: PUSH
26208: LD_INT 4
26210: PUSH
26211: LD_INT 5
26213: PUSH
26214: LD_INT 31
26216: PUSH
26217: LD_INT 32
26219: PUSH
26220: LD_INT 33
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: IN
26236: NOT
26237: IFFALSE 26249
26239: PUSH
26240: LD_VAR 0 6
26244: PUSH
26245: LD_INT 1
26247: EQUAL
26248: AND
26249: OR
26250: IFTRUE 26282
26252: PUSH
26253: LD_VAR 0 1
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: LD_INT 3
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: IN
26268: NOT
26269: IFFALSE 26281
26271: PUSH
26272: LD_VAR 0 6
26276: PUSH
26277: LD_INT 2
26279: EQUAL
26280: AND
26281: OR
26282: IFFALSE 26292
// mode = 0 ;
26284: LD_ADDR_VAR 0 6
26288: PUSH
26289: LD_INT 0
26291: ST_TO_ADDR
// case mode of 0 :
26292: LD_VAR 0 6
26296: PUSH
26297: LD_INT 0
26299: DOUBLE
26300: EQUAL
26301: IFTRUE 26305
26303: GO 37758
26305: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26306: LD_ADDR_VAR 0 11
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: LD_INT 1
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: LD_INT 2
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: LD_INT 2
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 3
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: LD_INT 3
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 2
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26499: LD_ADDR_VAR 0 12
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 2
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: NEG
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 2
26645: NEG
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 3
26656: NEG
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: NEG
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26695: LD_ADDR_VAR 0 13
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: LD_INT 2
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: NEG
26831: PUSH
26832: LD_INT 2
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: LD_INT 3
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 3
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 3
26866: NEG
26867: PUSH
26868: LD_INT 3
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26894: LD_ADDR_VAR 0 14
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: LD_INT 2
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 3
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 3
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 2
27066: NEG
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27090: LD_ADDR_VAR 0 15
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: NEG
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 3
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 3
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27283: LD_ADDR_VAR 0 16
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: LD_INT 2
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: LD_INT 2
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 2
27418: NEG
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 3
27430: PUSH
27431: LD_INT 2
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 3
27440: PUSH
27441: LD_INT 3
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 2
27450: PUSH
27451: LD_INT 3
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27476: LD_ADDR_VAR 0 17
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 2
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27706: LD_ADDR_VAR 0 18
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 2
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27936: LD_ADDR_VAR 0 19
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 2
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 2
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28166: LD_ADDR_VAR 0 20
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 2
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 2
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: NEG
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28396: LD_ADDR_VAR 0 21
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: LD_INT 2
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: NEG
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: NEG
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28626: LD_ADDR_VAR 0 22
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28856: LD_ADDR_VAR 0 23
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: LD_INT 1
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: NEG
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: NEG
29068: PUSH
29069: LD_INT 3
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29136: LD_ADDR_VAR 0 24
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: LD_INT 2
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: LD_INT 2
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: LD_INT 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: NEG
29336: PUSH
29337: LD_INT 2
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 3
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29412: LD_ADDR_VAR 0 25
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 2
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29686: LD_ADDR_VAR 0 26
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: LD_INT 1
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 1
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: LD_INT 2
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 2
29885: NEG
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29962: LD_ADDR_VAR 0 27
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 2
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: NEG
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 3
30195: NEG
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 3
30207: NEG
30208: PUSH
30209: LD_INT 2
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30242: LD_ADDR_VAR 0 28
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 2
30453: NEG
30454: PUSH
30455: LD_INT 3
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: LD_INT 3
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: NEG
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30524: LD_ADDR_VAR 0 29
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: LD_INT 2
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 2
30702: NEG
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: LD_INT 3
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 3
30768: NEG
30769: PUSH
30770: LD_INT 2
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30803: LD_ADDR_VAR 0 30
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 0
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: LD_INT 2
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: LD_INT 2
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 3
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 2
31035: NEG
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31081: LD_ADDR_VAR 0 31
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: LD_INT 1
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 2
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: LD_INT 3
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 3
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 3
31324: NEG
31325: PUSH
31326: LD_INT 2
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31359: LD_ADDR_VAR 0 32
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 3
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: LD_INT 3
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 2
31591: NEG
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 3
31602: NEG
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31637: LD_ADDR_VAR 0 33
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 2
31827: NEG
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31916: LD_ADDR_VAR 0 34
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 2
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 2
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 2
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 2
32095: NEG
32096: PUSH
32097: LD_INT 2
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: LD_INT 3
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 2
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 3
32161: NEG
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32196: LD_ADDR_VAR 0 35
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32308: LD_ADDR_VAR 0 36
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32420: LD_ADDR_VAR 0 37
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32532: LD_ADDR_VAR 0 38
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32644: LD_ADDR_VAR 0 39
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 2
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32756: LD_ADDR_VAR 0 40
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32868: LD_ADDR_VAR 0 41
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: NEG
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 3
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 3
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: LD_INT 3
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: NEG
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 3
33177: NEG
33178: PUSH
33179: LD_INT 3
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33218: LD_ADDR_VAR 0 42
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 1
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 3
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 2
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 3
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 3
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 3
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: LD_INT 3
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 2
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: LD_INT 3
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33568: LD_ADDR_VAR 0 43
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: LD_INT 3
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 3
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: LD_INT 3
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33916: LD_ADDR_VAR 0 44
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 3
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 3
34190: NEG
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: LD_INT 1
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: LD_INT 2
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34266: LD_ADDR_VAR 0 45
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 1
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: NEG
34457: PUSH
34458: LD_INT 3
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: LD_INT 3
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 3
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 3
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 3
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 3
34563: NEG
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 3
34575: NEG
34576: PUSH
34577: LD_INT 3
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34616: LD_ADDR_VAR 0 46
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 2
34782: NEG
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: LD_INT 3
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 3
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: LD_INT 3
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: NEG
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 3
34923: NEG
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34964: LD_ADDR_VAR 0 47
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35115: LD_ADDR_VAR 0 48
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35262: LD_ADDR_VAR 0 49
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35406: LD_ADDR_VAR 0 50
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35550: LD_ADDR_VAR 0 51
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35697: LD_ADDR_VAR 0 52
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: NEG
35825: PUSH
35826: LD_INT 2
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35848: LD_ADDR_VAR 0 53
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: NEG
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36078: LD_ADDR_VAR 0 54
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36308: LD_ADDR_VAR 0 55
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36538: LD_ADDR_VAR 0 56
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 2
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36768: LD_ADDR_VAR 0 57
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 2
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: NEG
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: NEG
36968: PUSH
36969: LD_INT 2
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36998: LD_ADDR_VAR 0 58
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 2
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: NEG
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: NEG
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: NEG
37186: PUSH
37187: LD_INT 1
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 2
37197: NEG
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37228: LD_ADDR_VAR 0 59
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37316: LD_ADDR_VAR 0 60
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37404: LD_ADDR_VAR 0 61
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37492: LD_ADDR_VAR 0 62
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37580: LD_ADDR_VAR 0 63
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37668: LD_ADDR_VAR 0 64
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// end ; 1 :
37756: GO 43653
37758: LD_INT 1
37760: DOUBLE
37761: EQUAL
37762: IFTRUE 37766
37764: GO 40389
37766: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37767: LD_ADDR_VAR 0 11
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: LD_INT 3
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37811: LD_ADDR_VAR 0 12
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37852: LD_ADDR_VAR 0 13
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 3
37869: PUSH
37870: LD_INT 3
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 3
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37892: LD_ADDR_VAR 0 14
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37933: LD_ADDR_VAR 0 15
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37977: LD_ADDR_VAR 0 16
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: LD_INT 3
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 3
37996: NEG
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 3
38008: NEG
38009: PUSH
38010: LD_INT 3
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38023: LD_ADDR_VAR 0 17
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: LD_INT 3
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 3
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38067: LD_ADDR_VAR 0 18
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38108: LD_ADDR_VAR 0 19
38112: PUSH
38113: LD_INT 3
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 3
38125: PUSH
38126: LD_INT 3
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38148: LD_ADDR_VAR 0 20
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38189: LD_ADDR_VAR 0 21
38193: PUSH
38194: LD_INT 2
38196: NEG
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: NEG
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38233: LD_ADDR_VAR 0 22
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: LD_INT 3
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 3
38252: NEG
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 3
38264: NEG
38265: PUSH
38266: LD_INT 3
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38279: LD_ADDR_VAR 0 23
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 3
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: LD_INT 4
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 3
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38323: LD_ADDR_VAR 0 24
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 4
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38364: LD_ADDR_VAR 0 25
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 4
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 3
38391: PUSH
38392: LD_INT 4
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: LIST
38403: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38404: LD_ADDR_VAR 0 26
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: PUSH
38422: LD_INT 4
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38445: LD_ADDR_VAR 0 27
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 3
38463: NEG
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 4
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38489: LD_ADDR_VAR 0 28
38493: PUSH
38494: LD_INT 3
38496: NEG
38497: PUSH
38498: LD_INT 3
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 3
38508: NEG
38509: PUSH
38510: LD_INT 4
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 4
38520: NEG
38521: PUSH
38522: LD_INT 3
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38535: LD_ADDR_VAR 0 29
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: LD_INT 3
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 3
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 4
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 4
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 3
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 5
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: LD_INT 5
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: LD_INT 4
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: LD_INT 6
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 6
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: LD_INT 5
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38690: LD_ADDR_VAR 0 30
38694: PUSH
38695: LD_INT 2
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 3
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 4
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 4
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 4
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 5
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 5
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 5
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 6
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 6
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38833: LD_ADDR_VAR 0 31
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 4
38880: PUSH
38881: LD_INT 4
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: LD_INT 4
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 5
38900: PUSH
38901: LD_INT 4
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 5
38910: PUSH
38911: LD_INT 5
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 4
38920: PUSH
38921: LD_INT 5
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 6
38930: PUSH
38931: LD_INT 5
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 6
38940: PUSH
38941: LD_INT 6
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 5
38950: PUSH
38951: LD_INT 6
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38972: LD_ADDR_VAR 0 32
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 3
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 4
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 4
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 5
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 5
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 4
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 6
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 6
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 5
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39115: LD_ADDR_VAR 0 33
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 3
39144: NEG
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 3
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 4
39167: NEG
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 4
39178: NEG
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 4
39190: NEG
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 5
39201: NEG
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 5
39212: NEG
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 5
39224: NEG
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 6
39235: NEG
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 6
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39270: LD_ADDR_VAR 0 34
39274: PUSH
39275: LD_INT 2
39277: NEG
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 3
39289: NEG
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: LD_INT 3
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 3
39313: NEG
39314: PUSH
39315: LD_INT 4
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 4
39325: NEG
39326: PUSH
39327: LD_INT 3
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 4
39337: NEG
39338: PUSH
39339: LD_INT 4
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 4
39349: NEG
39350: PUSH
39351: LD_INT 5
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 5
39361: NEG
39362: PUSH
39363: LD_INT 4
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 5
39373: NEG
39374: PUSH
39375: LD_INT 5
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 5
39385: NEG
39386: PUSH
39387: LD_INT 6
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 6
39397: NEG
39398: PUSH
39399: LD_INT 5
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 6
39409: NEG
39410: PUSH
39411: LD_INT 6
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39433: LD_ADDR_VAR 0 41
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 3
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39477: LD_ADDR_VAR 0 42
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39518: LD_ADDR_VAR 0 43
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 3
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39558: LD_ADDR_VAR 0 44
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 3
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39599: LD_ADDR_VAR 0 45
39603: PUSH
39604: LD_INT 2
39606: NEG
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39643: LD_ADDR_VAR 0 46
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 3
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39689: LD_ADDR_VAR 0 47
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: LD_INT 3
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 3
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39722: LD_ADDR_VAR 0 48
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39753: LD_ADDR_VAR 0 49
39757: PUSH
39758: LD_INT 3
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39782: LD_ADDR_VAR 0 50
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39811: LD_ADDR_VAR 0 51
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39842: LD_ADDR_VAR 0 52
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 3
39861: NEG
39862: PUSH
39863: LD_INT 2
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39875: LD_ADDR_VAR 0 53
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 3
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39919: LD_ADDR_VAR 0 54
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 3
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 3
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39960: LD_ADDR_VAR 0 55
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: LD_INT 3
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40000: LD_ADDR_VAR 0 56
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 3
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40041: LD_ADDR_VAR 0 57
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40085: LD_ADDR_VAR 0 58
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 3
40116: NEG
40117: PUSH
40118: LD_INT 3
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40131: LD_ADDR_VAR 0 59
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40175: LD_ADDR_VAR 0 60
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40216: LD_ADDR_VAR 0 61
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40256: LD_ADDR_VAR 0 62
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40297: LD_ADDR_VAR 0 63
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40341: LD_ADDR_VAR 0 64
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// end ; 2 :
40387: GO 43653
40389: LD_INT 2
40391: DOUBLE
40392: EQUAL
40393: IFTRUE 40397
40395: GO 43652
40397: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40398: LD_ADDR_VAR 0 29
40402: PUSH
40403: LD_INT 4
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 4
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 5
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 5
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 4
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 3
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 3
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 5
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 4
40518: PUSH
40519: LD_INT 3
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 4
40528: PUSH
40529: LD_INT 4
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 3
40538: PUSH
40539: LD_INT 4
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 3
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 4
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: LD_INT 4
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 4
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 3
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 4
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 5
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 5
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 4
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: LD_INT 5
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: LD_INT 3
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 3
40681: NEG
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 3
40692: NEG
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 4
40737: NEG
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 4
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 4
40760: NEG
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 4
40783: NEG
40784: PUSH
40785: LD_INT 4
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 4
40795: NEG
40796: PUSH
40797: LD_INT 5
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: LD_INT 4
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 3
40819: NEG
40820: PUSH
40821: LD_INT 3
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 4
40831: NEG
40832: PUSH
40833: LD_INT 3
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 5
40843: NEG
40844: PUSH
40845: LD_INT 4
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 5
40855: NEG
40856: PUSH
40857: LD_INT 5
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: LD_INT 5
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 5
40879: NEG
40880: PUSH
40881: LD_INT 3
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40936: LD_ADDR_VAR 0 30
40940: PUSH
40941: LD_INT 4
40943: PUSH
40944: LD_INT 4
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 4
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 5
40963: PUSH
40964: LD_INT 4
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 5
40973: PUSH
40974: LD_INT 5
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 4
40983: PUSH
40984: LD_INT 5
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 3
40993: PUSH
40994: LD_INT 4
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 3
41003: PUSH
41004: LD_INT 3
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 5
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 3
41023: PUSH
41024: LD_INT 5
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: LD_INT 3
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 4
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 3
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 4
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 4
41126: NEG
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: NEG
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: NEG
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 3
41160: NEG
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 4
41171: NEG
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 5
41182: NEG
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 5
41193: NEG
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 5
41205: NEG
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 3
41217: NEG
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: NEG
41229: PUSH
41230: LD_INT 3
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: NEG
41241: PUSH
41242: LD_INT 4
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: LD_INT 3
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 3
41276: NEG
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 4
41288: NEG
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 4
41300: NEG
41301: PUSH
41302: LD_INT 4
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: LD_INT 4
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 4
41324: NEG
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: LD_INT 4
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 5
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 4
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: LD_INT 4
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: LD_INT 5
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 3
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: LD_INT 5
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41483: LD_ADDR_VAR 0 31
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 4
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 3
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 4
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 5
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 5
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 4
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: LD_INT 5
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 3
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 4
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 4
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 4
41662: NEG
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 4
41685: NEG
41686: PUSH
41687: LD_INT 4
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 4
41697: NEG
41698: PUSH
41699: LD_INT 5
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: LD_INT 4
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: NEG
41722: PUSH
41723: LD_INT 3
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 4
41733: NEG
41734: PUSH
41735: LD_INT 3
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 5
41745: NEG
41746: PUSH
41747: LD_INT 4
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 5
41757: NEG
41758: PUSH
41759: LD_INT 5
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 3
41769: NEG
41770: PUSH
41771: LD_INT 5
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 5
41781: NEG
41782: PUSH
41783: LD_INT 3
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 4
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 3
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: LD_INT 3
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 4
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 4
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 4
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 4
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 5
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 5
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 4
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 3
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 5
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42033: LD_ADDR_VAR 0 32
42037: PUSH
42038: LD_INT 4
42040: NEG
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 4
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 4
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 5
42096: NEG
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 5
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 5
42119: NEG
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: LD_INT 3
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 3
42154: NEG
42155: PUSH
42156: LD_INT 4
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 4
42202: NEG
42203: PUSH
42204: LD_INT 3
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 4
42214: NEG
42215: PUSH
42216: LD_INT 4
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: LD_INT 4
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 4
42238: NEG
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 4
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 5
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 4
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 4
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 5
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: LD_INT 3
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: LD_INT 5
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 4
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 4
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 4
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: LD_INT 4
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 4
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 5
42465: PUSH
42466: LD_INT 4
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: LD_INT 5
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 4
42485: PUSH
42486: LD_INT 5
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: LD_INT 4
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 5
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: LD_INT 5
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42580: LD_ADDR_VAR 0 33
42584: PUSH
42585: LD_INT 4
42587: NEG
42588: PUSH
42589: LD_INT 4
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 4
42599: NEG
42600: PUSH
42601: LD_INT 5
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 4
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: LD_INT 3
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 4
42635: NEG
42636: PUSH
42637: LD_INT 3
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 5
42647: NEG
42648: PUSH
42649: LD_INT 4
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 5
42659: NEG
42660: PUSH
42661: LD_INT 5
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 3
42671: NEG
42672: PUSH
42673: LD_INT 5
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 5
42683: NEG
42684: PUSH
42685: LD_INT 3
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 4
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 3
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 4
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: LD_INT 4
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 4
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 4
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 5
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 5
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 4
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 5
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 3
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 4
42910: PUSH
42911: LD_INT 3
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 4
42920: PUSH
42921: LD_INT 4
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: LD_INT 4
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: LD_INT 3
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 4
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 4
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 4
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 4
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 5
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 5
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 4
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 3
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: LD_INT 5
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43118: LD_ADDR_VAR 0 34
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 4
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 5
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: LD_INT 4
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 3
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 4
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 5
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 3
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 5
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 4
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 4
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 4
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: LD_INT 4
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 4
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 5
43340: PUSH
43341: LD_INT 4
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 5
43350: PUSH
43351: LD_INT 5
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 4
43360: PUSH
43361: LD_INT 5
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 5
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 5
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 4
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 4
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 4
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 4
43503: NEG
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 4
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 3
43526: NEG
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 4
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 5
43559: NEG
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 5
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 5
43582: NEG
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 3
43594: NEG
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: ST_TO_ADDR
// end ; end ;
43650: GO 43653
43652: POP
// case btype of b_depot , b_warehouse :
43653: LD_VAR 0 1
43657: PUSH
43658: LD_INT 0
43660: DOUBLE
43661: EQUAL
43662: IFTRUE 43672
43664: LD_INT 1
43666: DOUBLE
43667: EQUAL
43668: IFTRUE 43672
43670: GO 43873
43672: POP
// case nation of nation_american :
43673: LD_VAR 0 5
43677: PUSH
43678: LD_INT 1
43680: DOUBLE
43681: EQUAL
43682: IFTRUE 43686
43684: GO 43742
43686: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43687: LD_ADDR_VAR 0 9
43691: PUSH
43692: LD_VAR 0 11
43696: PUSH
43697: LD_VAR 0 12
43701: PUSH
43702: LD_VAR 0 13
43706: PUSH
43707: LD_VAR 0 14
43711: PUSH
43712: LD_VAR 0 15
43716: PUSH
43717: LD_VAR 0 16
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: PUSH
43730: LD_VAR 0 4
43734: PUSH
43735: LD_INT 1
43737: PLUS
43738: ARRAY
43739: ST_TO_ADDR
43740: GO 43871
43742: LD_INT 2
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43806
43750: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43751: LD_ADDR_VAR 0 9
43755: PUSH
43756: LD_VAR 0 17
43760: PUSH
43761: LD_VAR 0 18
43765: PUSH
43766: LD_VAR 0 19
43770: PUSH
43771: LD_VAR 0 20
43775: PUSH
43776: LD_VAR 0 21
43780: PUSH
43781: LD_VAR 0 22
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: PUSH
43794: LD_VAR 0 4
43798: PUSH
43799: LD_INT 1
43801: PLUS
43802: ARRAY
43803: ST_TO_ADDR
43804: GO 43871
43806: LD_INT 3
43808: DOUBLE
43809: EQUAL
43810: IFTRUE 43814
43812: GO 43870
43814: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43815: LD_ADDR_VAR 0 9
43819: PUSH
43820: LD_VAR 0 23
43824: PUSH
43825: LD_VAR 0 24
43829: PUSH
43830: LD_VAR 0 25
43834: PUSH
43835: LD_VAR 0 26
43839: PUSH
43840: LD_VAR 0 27
43844: PUSH
43845: LD_VAR 0 28
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: PUSH
43858: LD_VAR 0 4
43862: PUSH
43863: LD_INT 1
43865: PLUS
43866: ARRAY
43867: ST_TO_ADDR
43868: GO 43871
43870: POP
43871: GO 44426
43873: LD_INT 2
43875: DOUBLE
43876: EQUAL
43877: IFTRUE 43887
43879: LD_INT 3
43881: DOUBLE
43882: EQUAL
43883: IFTRUE 43887
43885: GO 43943
43887: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43888: LD_ADDR_VAR 0 9
43892: PUSH
43893: LD_VAR 0 29
43897: PUSH
43898: LD_VAR 0 30
43902: PUSH
43903: LD_VAR 0 31
43907: PUSH
43908: LD_VAR 0 32
43912: PUSH
43913: LD_VAR 0 33
43917: PUSH
43918: LD_VAR 0 34
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: PUSH
43931: LD_VAR 0 4
43935: PUSH
43936: LD_INT 1
43938: PLUS
43939: ARRAY
43940: ST_TO_ADDR
43941: GO 44426
43943: LD_INT 16
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 44005
43949: LD_INT 17
43951: DOUBLE
43952: EQUAL
43953: IFTRUE 44005
43955: LD_INT 18
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 44005
43961: LD_INT 19
43963: DOUBLE
43964: EQUAL
43965: IFTRUE 44005
43967: LD_INT 22
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 44005
43973: LD_INT 20
43975: DOUBLE
43976: EQUAL
43977: IFTRUE 44005
43979: LD_INT 21
43981: DOUBLE
43982: EQUAL
43983: IFTRUE 44005
43985: LD_INT 23
43987: DOUBLE
43988: EQUAL
43989: IFTRUE 44005
43991: LD_INT 24
43993: DOUBLE
43994: EQUAL
43995: IFTRUE 44005
43997: LD_INT 25
43999: DOUBLE
44000: EQUAL
44001: IFTRUE 44005
44003: GO 44061
44005: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44006: LD_ADDR_VAR 0 9
44010: PUSH
44011: LD_VAR 0 35
44015: PUSH
44016: LD_VAR 0 36
44020: PUSH
44021: LD_VAR 0 37
44025: PUSH
44026: LD_VAR 0 38
44030: PUSH
44031: LD_VAR 0 39
44035: PUSH
44036: LD_VAR 0 40
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: PUSH
44049: LD_VAR 0 4
44053: PUSH
44054: LD_INT 1
44056: PLUS
44057: ARRAY
44058: ST_TO_ADDR
44059: GO 44426
44061: LD_INT 6
44063: DOUBLE
44064: EQUAL
44065: IFTRUE 44117
44067: LD_INT 7
44069: DOUBLE
44070: EQUAL
44071: IFTRUE 44117
44073: LD_INT 8
44075: DOUBLE
44076: EQUAL
44077: IFTRUE 44117
44079: LD_INT 13
44081: DOUBLE
44082: EQUAL
44083: IFTRUE 44117
44085: LD_INT 12
44087: DOUBLE
44088: EQUAL
44089: IFTRUE 44117
44091: LD_INT 15
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44117
44097: LD_INT 11
44099: DOUBLE
44100: EQUAL
44101: IFTRUE 44117
44103: LD_INT 14
44105: DOUBLE
44106: EQUAL
44107: IFTRUE 44117
44109: LD_INT 10
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44173
44117: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44118: LD_ADDR_VAR 0 9
44122: PUSH
44123: LD_VAR 0 41
44127: PUSH
44128: LD_VAR 0 42
44132: PUSH
44133: LD_VAR 0 43
44137: PUSH
44138: LD_VAR 0 44
44142: PUSH
44143: LD_VAR 0 45
44147: PUSH
44148: LD_VAR 0 46
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: PUSH
44161: LD_VAR 0 4
44165: PUSH
44166: LD_INT 1
44168: PLUS
44169: ARRAY
44170: ST_TO_ADDR
44171: GO 44426
44173: LD_INT 36
44175: DOUBLE
44176: EQUAL
44177: IFTRUE 44181
44179: GO 44237
44181: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44182: LD_ADDR_VAR 0 9
44186: PUSH
44187: LD_VAR 0 47
44191: PUSH
44192: LD_VAR 0 48
44196: PUSH
44197: LD_VAR 0 49
44201: PUSH
44202: LD_VAR 0 50
44206: PUSH
44207: LD_VAR 0 51
44211: PUSH
44212: LD_VAR 0 52
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: PUSH
44225: LD_VAR 0 4
44229: PUSH
44230: LD_INT 1
44232: PLUS
44233: ARRAY
44234: ST_TO_ADDR
44235: GO 44426
44237: LD_INT 4
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44263
44243: LD_INT 5
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44263
44249: LD_INT 34
44251: DOUBLE
44252: EQUAL
44253: IFTRUE 44263
44255: LD_INT 37
44257: DOUBLE
44258: EQUAL
44259: IFTRUE 44263
44261: GO 44319
44263: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44264: LD_ADDR_VAR 0 9
44268: PUSH
44269: LD_VAR 0 53
44273: PUSH
44274: LD_VAR 0 54
44278: PUSH
44279: LD_VAR 0 55
44283: PUSH
44284: LD_VAR 0 56
44288: PUSH
44289: LD_VAR 0 57
44293: PUSH
44294: LD_VAR 0 58
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: PUSH
44307: LD_VAR 0 4
44311: PUSH
44312: LD_INT 1
44314: PLUS
44315: ARRAY
44316: ST_TO_ADDR
44317: GO 44426
44319: LD_INT 31
44321: DOUBLE
44322: EQUAL
44323: IFTRUE 44369
44325: LD_INT 32
44327: DOUBLE
44328: EQUAL
44329: IFTRUE 44369
44331: LD_INT 33
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44369
44337: LD_INT 27
44339: DOUBLE
44340: EQUAL
44341: IFTRUE 44369
44343: LD_INT 26
44345: DOUBLE
44346: EQUAL
44347: IFTRUE 44369
44349: LD_INT 28
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44369
44355: LD_INT 29
44357: DOUBLE
44358: EQUAL
44359: IFTRUE 44369
44361: LD_INT 30
44363: DOUBLE
44364: EQUAL
44365: IFTRUE 44369
44367: GO 44425
44369: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44370: LD_ADDR_VAR 0 9
44374: PUSH
44375: LD_VAR 0 59
44379: PUSH
44380: LD_VAR 0 60
44384: PUSH
44385: LD_VAR 0 61
44389: PUSH
44390: LD_VAR 0 62
44394: PUSH
44395: LD_VAR 0 63
44399: PUSH
44400: LD_VAR 0 64
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: PUSH
44413: LD_VAR 0 4
44417: PUSH
44418: LD_INT 1
44420: PLUS
44421: ARRAY
44422: ST_TO_ADDR
44423: GO 44426
44425: POP
// temp_list2 = [ ] ;
44426: LD_ADDR_VAR 0 10
44430: PUSH
44431: EMPTY
44432: ST_TO_ADDR
// for i in temp_list do
44433: LD_ADDR_VAR 0 8
44437: PUSH
44438: LD_VAR 0 9
44442: PUSH
44443: FOR_IN
44444: IFFALSE 44496
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44446: LD_ADDR_VAR 0 10
44450: PUSH
44451: LD_VAR 0 10
44455: PUSH
44456: LD_VAR 0 8
44460: PUSH
44461: LD_INT 1
44463: ARRAY
44464: PUSH
44465: LD_VAR 0 2
44469: PLUS
44470: PUSH
44471: LD_VAR 0 8
44475: PUSH
44476: LD_INT 2
44478: ARRAY
44479: PUSH
44480: LD_VAR 0 3
44484: PLUS
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: ADD
44493: ST_TO_ADDR
44494: GO 44443
44496: POP
44497: POP
// result = temp_list2 ;
44498: LD_ADDR_VAR 0 7
44502: PUSH
44503: LD_VAR 0 10
44507: ST_TO_ADDR
// end ;
44508: LD_VAR 0 7
44512: RET
// export function EnemyInRange ( unit , dist ) ; begin
44513: LD_INT 0
44515: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44516: LD_ADDR_VAR 0 3
44520: PUSH
44521: LD_VAR 0 1
44525: PPUSH
44526: CALL_OW 255
44530: PPUSH
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 250
44540: PPUSH
44541: LD_VAR 0 1
44545: PPUSH
44546: CALL_OW 251
44550: PPUSH
44551: LD_VAR 0 2
44555: PPUSH
44556: CALL 17770 0 4
44560: PUSH
44561: LD_INT 4
44563: ARRAY
44564: ST_TO_ADDR
// end ;
44565: LD_VAR 0 3
44569: RET
// export function PlayerSeeMe ( unit ) ; begin
44570: LD_INT 0
44572: PPUSH
// result := See ( your_side , unit ) ;
44573: LD_ADDR_VAR 0 2
44577: PUSH
44578: LD_OWVAR 2
44582: PPUSH
44583: LD_VAR 0 1
44587: PPUSH
44588: CALL_OW 292
44592: ST_TO_ADDR
// end ;
44593: LD_VAR 0 2
44597: RET
// export function ReverseDir ( unit ) ; begin
44598: LD_INT 0
44600: PPUSH
// if not unit then
44601: LD_VAR 0 1
44605: NOT
44606: IFFALSE 44610
// exit ;
44608: GO 44633
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44610: LD_ADDR_VAR 0 2
44614: PUSH
44615: LD_VAR 0 1
44619: PPUSH
44620: CALL_OW 254
44624: PUSH
44625: LD_INT 3
44627: PLUS
44628: PUSH
44629: LD_INT 6
44631: MOD
44632: ST_TO_ADDR
// end ;
44633: LD_VAR 0 2
44637: RET
// export function ReverseArray ( array ) ; var i ; begin
44638: LD_INT 0
44640: PPUSH
44641: PPUSH
// if not array then
44642: LD_VAR 0 1
44646: NOT
44647: IFFALSE 44651
// exit ;
44649: GO 44706
// result := [ ] ;
44651: LD_ADDR_VAR 0 2
44655: PUSH
44656: EMPTY
44657: ST_TO_ADDR
// for i := array downto 1 do
44658: LD_ADDR_VAR 0 3
44662: PUSH
44663: DOUBLE
44664: LD_VAR 0 1
44668: INC
44669: ST_TO_ADDR
44670: LD_INT 1
44672: PUSH
44673: FOR_DOWNTO
44674: IFFALSE 44704
// result := Join ( result , array [ i ] ) ;
44676: LD_ADDR_VAR 0 2
44680: PUSH
44681: LD_VAR 0 2
44685: PPUSH
44686: LD_VAR 0 1
44690: PUSH
44691: LD_VAR 0 3
44695: ARRAY
44696: PPUSH
44697: CALL 49558 0 2
44701: ST_TO_ADDR
44702: GO 44673
44704: POP
44705: POP
// end ;
44706: LD_VAR 0 2
44710: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44711: LD_INT 0
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
44718: PPUSH
// if not unit or not hexes then
44719: LD_VAR 0 1
44723: NOT
44724: IFTRUE 44733
44726: PUSH
44727: LD_VAR 0 2
44731: NOT
44732: OR
44733: IFFALSE 44737
// exit ;
44735: GO 44860
// dist := 9999 ;
44737: LD_ADDR_VAR 0 5
44741: PUSH
44742: LD_INT 9999
44744: ST_TO_ADDR
// for i = 1 to hexes do
44745: LD_ADDR_VAR 0 4
44749: PUSH
44750: DOUBLE
44751: LD_INT 1
44753: DEC
44754: ST_TO_ADDR
44755: LD_VAR 0 2
44759: PUSH
44760: FOR_TO
44761: IFFALSE 44848
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44763: LD_ADDR_VAR 0 6
44767: PUSH
44768: LD_VAR 0 1
44772: PPUSH
44773: LD_VAR 0 2
44777: PUSH
44778: LD_VAR 0 4
44782: ARRAY
44783: PUSH
44784: LD_INT 1
44786: ARRAY
44787: PPUSH
44788: LD_VAR 0 2
44792: PUSH
44793: LD_VAR 0 4
44797: ARRAY
44798: PUSH
44799: LD_INT 2
44801: ARRAY
44802: PPUSH
44803: CALL_OW 297
44807: ST_TO_ADDR
// if tdist < dist then
44808: LD_VAR 0 6
44812: PUSH
44813: LD_VAR 0 5
44817: LESS
44818: IFFALSE 44846
// begin hex := hexes [ i ] ;
44820: LD_ADDR_VAR 0 8
44824: PUSH
44825: LD_VAR 0 2
44829: PUSH
44830: LD_VAR 0 4
44834: ARRAY
44835: ST_TO_ADDR
// dist := tdist ;
44836: LD_ADDR_VAR 0 5
44840: PUSH
44841: LD_VAR 0 6
44845: ST_TO_ADDR
// end ; end ;
44846: GO 44760
44848: POP
44849: POP
// result := hex ;
44850: LD_ADDR_VAR 0 3
44854: PUSH
44855: LD_VAR 0 8
44859: ST_TO_ADDR
// end ;
44860: LD_VAR 0 3
44864: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44865: LD_INT 0
44867: PPUSH
44868: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44869: LD_VAR 0 1
44873: NOT
44874: IFTRUE 44913
44876: PUSH
44877: LD_VAR 0 1
44881: PUSH
44882: LD_INT 21
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 23
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PPUSH
44906: CALL_OW 69
44910: IN
44911: NOT
44912: OR
44913: IFFALSE 44917
// exit ;
44915: GO 44964
// for i = 1 to 3 do
44917: LD_ADDR_VAR 0 3
44921: PUSH
44922: DOUBLE
44923: LD_INT 1
44925: DEC
44926: ST_TO_ADDR
44927: LD_INT 3
44929: PUSH
44930: FOR_TO
44931: IFFALSE 44962
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44933: LD_VAR 0 1
44937: PPUSH
44938: CALL_OW 250
44942: PPUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: CALL_OW 251
44952: PPUSH
44953: LD_INT 1
44955: PPUSH
44956: CALL_OW 453
44960: GO 44930
44962: POP
44963: POP
// end ;
44964: LD_VAR 0 2
44968: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44969: LD_INT 0
44971: PPUSH
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
// if not unit or not enemy_unit then
44977: LD_VAR 0 1
44981: NOT
44982: IFTRUE 44991
44984: PUSH
44985: LD_VAR 0 2
44989: NOT
44990: OR
44991: IFFALSE 44995
// exit ;
44993: GO 45476
// if GetLives ( i ) < 250 then
44995: LD_VAR 0 4
44999: PPUSH
45000: CALL_OW 256
45004: PUSH
45005: LD_INT 250
45007: LESS
45008: IFFALSE 45021
// begin ComAutodestruct ( i ) ;
45010: LD_VAR 0 4
45014: PPUSH
45015: CALL 44865 0 1
// exit ;
45019: GO 45476
// end ; x := GetX ( enemy_unit ) ;
45021: LD_ADDR_VAR 0 7
45025: PUSH
45026: LD_VAR 0 2
45030: PPUSH
45031: CALL_OW 250
45035: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45036: LD_ADDR_VAR 0 8
45040: PUSH
45041: LD_VAR 0 2
45045: PPUSH
45046: CALL_OW 251
45050: ST_TO_ADDR
// if not x or not y then
45051: LD_VAR 0 7
45055: NOT
45056: IFTRUE 45065
45058: PUSH
45059: LD_VAR 0 8
45063: NOT
45064: OR
45065: IFFALSE 45069
// exit ;
45067: GO 45476
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45069: LD_ADDR_VAR 0 6
45073: PUSH
45074: LD_VAR 0 7
45078: PPUSH
45079: LD_INT 0
45081: PPUSH
45082: LD_INT 4
45084: PPUSH
45085: CALL_OW 272
45089: PUSH
45090: LD_VAR 0 8
45094: PPUSH
45095: LD_INT 0
45097: PPUSH
45098: LD_INT 4
45100: PPUSH
45101: CALL_OW 273
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_VAR 0 7
45114: PPUSH
45115: LD_INT 1
45117: PPUSH
45118: LD_INT 4
45120: PPUSH
45121: CALL_OW 272
45125: PUSH
45126: LD_VAR 0 8
45130: PPUSH
45131: LD_INT 1
45133: PPUSH
45134: LD_INT 4
45136: PPUSH
45137: CALL_OW 273
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_VAR 0 7
45150: PPUSH
45151: LD_INT 2
45153: PPUSH
45154: LD_INT 4
45156: PPUSH
45157: CALL_OW 272
45161: PUSH
45162: LD_VAR 0 8
45166: PPUSH
45167: LD_INT 2
45169: PPUSH
45170: LD_INT 4
45172: PPUSH
45173: CALL_OW 273
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_VAR 0 7
45186: PPUSH
45187: LD_INT 3
45189: PPUSH
45190: LD_INT 4
45192: PPUSH
45193: CALL_OW 272
45197: PUSH
45198: LD_VAR 0 8
45202: PPUSH
45203: LD_INT 3
45205: PPUSH
45206: LD_INT 4
45208: PPUSH
45209: CALL_OW 273
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_VAR 0 7
45222: PPUSH
45223: LD_INT 4
45225: PPUSH
45226: LD_INT 4
45228: PPUSH
45229: CALL_OW 272
45233: PUSH
45234: LD_VAR 0 8
45238: PPUSH
45239: LD_INT 4
45241: PPUSH
45242: LD_INT 4
45244: PPUSH
45245: CALL_OW 273
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_VAR 0 7
45258: PPUSH
45259: LD_INT 5
45261: PPUSH
45262: LD_INT 4
45264: PPUSH
45265: CALL_OW 272
45269: PUSH
45270: LD_VAR 0 8
45274: PPUSH
45275: LD_INT 5
45277: PPUSH
45278: LD_INT 4
45280: PPUSH
45281: CALL_OW 273
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// for i = tmp downto 1 do
45298: LD_ADDR_VAR 0 4
45302: PUSH
45303: DOUBLE
45304: LD_VAR 0 6
45308: INC
45309: ST_TO_ADDR
45310: LD_INT 1
45312: PUSH
45313: FOR_DOWNTO
45314: IFFALSE 45417
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45316: LD_VAR 0 6
45320: PUSH
45321: LD_VAR 0 4
45325: ARRAY
45326: PUSH
45327: LD_INT 1
45329: ARRAY
45330: PPUSH
45331: LD_VAR 0 6
45335: PUSH
45336: LD_VAR 0 4
45340: ARRAY
45341: PUSH
45342: LD_INT 2
45344: ARRAY
45345: PPUSH
45346: CALL_OW 488
45350: NOT
45351: IFTRUE 45393
45353: PUSH
45354: LD_VAR 0 6
45358: PUSH
45359: LD_VAR 0 4
45363: ARRAY
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: PPUSH
45369: LD_VAR 0 6
45373: PUSH
45374: LD_VAR 0 4
45378: ARRAY
45379: PUSH
45380: LD_INT 2
45382: ARRAY
45383: PPUSH
45384: CALL_OW 428
45388: PUSH
45389: LD_INT 0
45391: NONEQUAL
45392: OR
45393: IFFALSE 45415
// tmp := Delete ( tmp , i ) ;
45395: LD_ADDR_VAR 0 6
45399: PUSH
45400: LD_VAR 0 6
45404: PPUSH
45405: LD_VAR 0 4
45409: PPUSH
45410: CALL_OW 3
45414: ST_TO_ADDR
45415: GO 45313
45417: POP
45418: POP
// j := GetClosestHex ( unit , tmp ) ;
45419: LD_ADDR_VAR 0 5
45423: PUSH
45424: LD_VAR 0 1
45428: PPUSH
45429: LD_VAR 0 6
45433: PPUSH
45434: CALL 44711 0 2
45438: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45439: LD_VAR 0 1
45443: PPUSH
45444: LD_VAR 0 5
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: LD_VAR 0 5
45457: PUSH
45458: LD_INT 2
45460: ARRAY
45461: PPUSH
45462: CALL_OW 111
// result := j ;
45466: LD_ADDR_VAR 0 3
45470: PUSH
45471: LD_VAR 0 5
45475: ST_TO_ADDR
// end ;
45476: LD_VAR 0 3
45480: RET
// export function PrepareApemanSoldier ( ) ; begin
45481: LD_INT 0
45483: PPUSH
// uc_nation := 0 ;
45484: LD_ADDR_OWVAR 21
45488: PUSH
45489: LD_INT 0
45491: ST_TO_ADDR
// hc_sex := sex_male ;
45492: LD_ADDR_OWVAR 27
45496: PUSH
45497: LD_INT 1
45499: ST_TO_ADDR
// hc_name :=  ;
45500: LD_ADDR_OWVAR 26
45504: PUSH
45505: LD_STRING 
45507: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45508: LD_ADDR_OWVAR 28
45512: PUSH
45513: LD_INT 15
45515: ST_TO_ADDR
// hc_gallery :=  ;
45516: LD_ADDR_OWVAR 33
45520: PUSH
45521: LD_STRING 
45523: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45524: LD_ADDR_OWVAR 31
45528: PUSH
45529: LD_INT 0
45531: PPUSH
45532: LD_INT 3
45534: PPUSH
45535: CALL_OW 12
45539: PUSH
45540: LD_INT 0
45542: PPUSH
45543: LD_INT 3
45545: PPUSH
45546: CALL_OW 12
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45563: LD_ADDR_OWVAR 29
45567: PUSH
45568: LD_INT 10
45570: PUSH
45571: LD_INT 12
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// end ;
45578: LD_VAR 0 1
45582: RET
// export function PrepareApemanEngineer ( ) ; begin
45583: LD_INT 0
45585: PPUSH
// uc_nation := 0 ;
45586: LD_ADDR_OWVAR 21
45590: PUSH
45591: LD_INT 0
45593: ST_TO_ADDR
// hc_sex := sex_male ;
45594: LD_ADDR_OWVAR 27
45598: PUSH
45599: LD_INT 1
45601: ST_TO_ADDR
// hc_name :=  ;
45602: LD_ADDR_OWVAR 26
45606: PUSH
45607: LD_STRING 
45609: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45610: LD_ADDR_OWVAR 28
45614: PUSH
45615: LD_INT 16
45617: ST_TO_ADDR
// hc_gallery :=  ;
45618: LD_ADDR_OWVAR 33
45622: PUSH
45623: LD_STRING 
45625: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45626: LD_ADDR_OWVAR 31
45630: PUSH
45631: LD_INT 0
45633: PPUSH
45634: LD_INT 3
45636: PPUSH
45637: CALL_OW 12
45641: PUSH
45642: LD_INT 0
45644: PPUSH
45645: LD_INT 3
45647: PPUSH
45648: CALL_OW 12
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45665: LD_ADDR_OWVAR 29
45669: PUSH
45670: LD_INT 10
45672: PUSH
45673: LD_INT 12
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// end ;
45680: LD_VAR 0 1
45684: RET
// export function PrepareApeman ( agressivity ) ; begin
45685: LD_INT 0
45687: PPUSH
// uc_side := 0 ;
45688: LD_ADDR_OWVAR 20
45692: PUSH
45693: LD_INT 0
45695: ST_TO_ADDR
// uc_nation := 0 ;
45696: LD_ADDR_OWVAR 21
45700: PUSH
45701: LD_INT 0
45703: ST_TO_ADDR
// hc_sex := sex_male ;
45704: LD_ADDR_OWVAR 27
45708: PUSH
45709: LD_INT 1
45711: ST_TO_ADDR
// hc_class := class_apeman ;
45712: LD_ADDR_OWVAR 28
45716: PUSH
45717: LD_INT 12
45719: ST_TO_ADDR
// hc_gallery :=  ;
45720: LD_ADDR_OWVAR 33
45724: PUSH
45725: LD_STRING 
45727: ST_TO_ADDR
// hc_name :=  ;
45728: LD_ADDR_OWVAR 26
45732: PUSH
45733: LD_STRING 
45735: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45736: LD_ADDR_OWVAR 29
45740: PUSH
45741: LD_INT 10
45743: PUSH
45744: LD_INT 12
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// if agressivity = 0 then
45751: LD_VAR 0 1
45755: PUSH
45756: LD_INT 0
45758: EQUAL
45759: IFFALSE 45771
// hc_agressivity := 0 else
45761: LD_ADDR_OWVAR 35
45765: PUSH
45766: LD_INT 0
45768: ST_TO_ADDR
45769: GO 45792
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45771: LD_ADDR_OWVAR 35
45775: PUSH
45776: LD_VAR 0 1
45780: NEG
45781: PPUSH
45782: LD_VAR 0 1
45786: PPUSH
45787: CALL_OW 12
45791: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45792: LD_ADDR_OWVAR 31
45796: PUSH
45797: LD_INT 0
45799: PPUSH
45800: LD_INT 3
45802: PPUSH
45803: CALL_OW 12
45807: PUSH
45808: LD_INT 0
45810: PPUSH
45811: LD_INT 3
45813: PPUSH
45814: CALL_OW 12
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
// end ;
45831: LD_VAR 0 2
45835: RET
// export function PrepareTiger ( agressivity ) ; begin
45836: LD_INT 0
45838: PPUSH
// uc_side := 0 ;
45839: LD_ADDR_OWVAR 20
45843: PUSH
45844: LD_INT 0
45846: ST_TO_ADDR
// uc_nation := 0 ;
45847: LD_ADDR_OWVAR 21
45851: PUSH
45852: LD_INT 0
45854: ST_TO_ADDR
// InitHc ;
45855: CALL_OW 19
// hc_class := class_tiger ;
45859: LD_ADDR_OWVAR 28
45863: PUSH
45864: LD_INT 14
45866: ST_TO_ADDR
// hc_gallery :=  ;
45867: LD_ADDR_OWVAR 33
45871: PUSH
45872: LD_STRING 
45874: ST_TO_ADDR
// hc_name :=  ;
45875: LD_ADDR_OWVAR 26
45879: PUSH
45880: LD_STRING 
45882: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45883: LD_ADDR_OWVAR 35
45887: PUSH
45888: LD_VAR 0 1
45892: NEG
45893: PPUSH
45894: LD_VAR 0 1
45898: PPUSH
45899: CALL_OW 12
45903: ST_TO_ADDR
// end ;
45904: LD_VAR 0 2
45908: RET
// export function PrepareEnchidna ( ) ; begin
45909: LD_INT 0
45911: PPUSH
// uc_side := 0 ;
45912: LD_ADDR_OWVAR 20
45916: PUSH
45917: LD_INT 0
45919: ST_TO_ADDR
// uc_nation := 0 ;
45920: LD_ADDR_OWVAR 21
45924: PUSH
45925: LD_INT 0
45927: ST_TO_ADDR
// InitHc ;
45928: CALL_OW 19
// hc_class := class_baggie ;
45932: LD_ADDR_OWVAR 28
45936: PUSH
45937: LD_INT 13
45939: ST_TO_ADDR
// hc_gallery :=  ;
45940: LD_ADDR_OWVAR 33
45944: PUSH
45945: LD_STRING 
45947: ST_TO_ADDR
// hc_name :=  ;
45948: LD_ADDR_OWVAR 26
45952: PUSH
45953: LD_STRING 
45955: ST_TO_ADDR
// end ;
45956: LD_VAR 0 1
45960: RET
// export function PrepareFrog ( ) ; begin
45961: LD_INT 0
45963: PPUSH
// uc_side := 0 ;
45964: LD_ADDR_OWVAR 20
45968: PUSH
45969: LD_INT 0
45971: ST_TO_ADDR
// uc_nation := 0 ;
45972: LD_ADDR_OWVAR 21
45976: PUSH
45977: LD_INT 0
45979: ST_TO_ADDR
// InitHc ;
45980: CALL_OW 19
// hc_class := class_frog ;
45984: LD_ADDR_OWVAR 28
45988: PUSH
45989: LD_INT 19
45991: ST_TO_ADDR
// hc_gallery :=  ;
45992: LD_ADDR_OWVAR 33
45996: PUSH
45997: LD_STRING 
45999: ST_TO_ADDR
// hc_name :=  ;
46000: LD_ADDR_OWVAR 26
46004: PUSH
46005: LD_STRING 
46007: ST_TO_ADDR
// end ;
46008: LD_VAR 0 1
46012: RET
// export function PrepareFish ( ) ; begin
46013: LD_INT 0
46015: PPUSH
// uc_side := 0 ;
46016: LD_ADDR_OWVAR 20
46020: PUSH
46021: LD_INT 0
46023: ST_TO_ADDR
// uc_nation := 0 ;
46024: LD_ADDR_OWVAR 21
46028: PUSH
46029: LD_INT 0
46031: ST_TO_ADDR
// InitHc ;
46032: CALL_OW 19
// hc_class := class_fish ;
46036: LD_ADDR_OWVAR 28
46040: PUSH
46041: LD_INT 20
46043: ST_TO_ADDR
// hc_gallery :=  ;
46044: LD_ADDR_OWVAR 33
46048: PUSH
46049: LD_STRING 
46051: ST_TO_ADDR
// hc_name :=  ;
46052: LD_ADDR_OWVAR 26
46056: PUSH
46057: LD_STRING 
46059: ST_TO_ADDR
// end ;
46060: LD_VAR 0 1
46064: RET
// export function PrepareBird ( ) ; begin
46065: LD_INT 0
46067: PPUSH
// uc_side := 0 ;
46068: LD_ADDR_OWVAR 20
46072: PUSH
46073: LD_INT 0
46075: ST_TO_ADDR
// uc_nation := 0 ;
46076: LD_ADDR_OWVAR 21
46080: PUSH
46081: LD_INT 0
46083: ST_TO_ADDR
// InitHc ;
46084: CALL_OW 19
// hc_class := class_phororhacos ;
46088: LD_ADDR_OWVAR 28
46092: PUSH
46093: LD_INT 18
46095: ST_TO_ADDR
// hc_gallery :=  ;
46096: LD_ADDR_OWVAR 33
46100: PUSH
46101: LD_STRING 
46103: ST_TO_ADDR
// hc_name :=  ;
46104: LD_ADDR_OWVAR 26
46108: PUSH
46109: LD_STRING 
46111: ST_TO_ADDR
// end ;
46112: LD_VAR 0 1
46116: RET
// export function PrepareHorse ( ) ; begin
46117: LD_INT 0
46119: PPUSH
// uc_side := 0 ;
46120: LD_ADDR_OWVAR 20
46124: PUSH
46125: LD_INT 0
46127: ST_TO_ADDR
// uc_nation := 0 ;
46128: LD_ADDR_OWVAR 21
46132: PUSH
46133: LD_INT 0
46135: ST_TO_ADDR
// InitHc ;
46136: CALL_OW 19
// hc_class := class_horse ;
46140: LD_ADDR_OWVAR 28
46144: PUSH
46145: LD_INT 21
46147: ST_TO_ADDR
// hc_gallery :=  ;
46148: LD_ADDR_OWVAR 33
46152: PUSH
46153: LD_STRING 
46155: ST_TO_ADDR
// hc_name :=  ;
46156: LD_ADDR_OWVAR 26
46160: PUSH
46161: LD_STRING 
46163: ST_TO_ADDR
// end ;
46164: LD_VAR 0 1
46168: RET
// export function PrepareMastodont ( ) ; begin
46169: LD_INT 0
46171: PPUSH
// uc_side := 0 ;
46172: LD_ADDR_OWVAR 20
46176: PUSH
46177: LD_INT 0
46179: ST_TO_ADDR
// uc_nation := 0 ;
46180: LD_ADDR_OWVAR 21
46184: PUSH
46185: LD_INT 0
46187: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46188: LD_ADDR_OWVAR 37
46192: PUSH
46193: LD_INT 31
46195: ST_TO_ADDR
// vc_control := control_rider ;
46196: LD_ADDR_OWVAR 38
46200: PUSH
46201: LD_INT 4
46203: ST_TO_ADDR
// end ;
46204: LD_VAR 0 1
46208: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46209: LD_INT 0
46211: PPUSH
46212: PPUSH
46213: PPUSH
// uc_side = 0 ;
46214: LD_ADDR_OWVAR 20
46218: PUSH
46219: LD_INT 0
46221: ST_TO_ADDR
// uc_nation = 0 ;
46222: LD_ADDR_OWVAR 21
46226: PUSH
46227: LD_INT 0
46229: ST_TO_ADDR
// InitHc_All ( ) ;
46230: CALL_OW 584
// InitVc ;
46234: CALL_OW 20
// if mastodonts then
46238: LD_VAR 0 6
46242: IFFALSE 46309
// for i = 1 to mastodonts do
46244: LD_ADDR_VAR 0 11
46248: PUSH
46249: DOUBLE
46250: LD_INT 1
46252: DEC
46253: ST_TO_ADDR
46254: LD_VAR 0 6
46258: PUSH
46259: FOR_TO
46260: IFFALSE 46307
// begin vc_chassis := 31 ;
46262: LD_ADDR_OWVAR 37
46266: PUSH
46267: LD_INT 31
46269: ST_TO_ADDR
// vc_control := control_rider ;
46270: LD_ADDR_OWVAR 38
46274: PUSH
46275: LD_INT 4
46277: ST_TO_ADDR
// animal := CreateVehicle ;
46278: LD_ADDR_VAR 0 12
46282: PUSH
46283: CALL_OW 45
46287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46288: LD_VAR 0 12
46292: PPUSH
46293: LD_VAR 0 8
46297: PPUSH
46298: LD_INT 0
46300: PPUSH
46301: CALL 48451 0 3
// end ;
46305: GO 46259
46307: POP
46308: POP
// if horses then
46309: LD_VAR 0 5
46313: IFFALSE 46380
// for i = 1 to horses do
46315: LD_ADDR_VAR 0 11
46319: PUSH
46320: DOUBLE
46321: LD_INT 1
46323: DEC
46324: ST_TO_ADDR
46325: LD_VAR 0 5
46329: PUSH
46330: FOR_TO
46331: IFFALSE 46378
// begin hc_class := 21 ;
46333: LD_ADDR_OWVAR 28
46337: PUSH
46338: LD_INT 21
46340: ST_TO_ADDR
// hc_gallery :=  ;
46341: LD_ADDR_OWVAR 33
46345: PUSH
46346: LD_STRING 
46348: ST_TO_ADDR
// animal := CreateHuman ;
46349: LD_ADDR_VAR 0 12
46353: PUSH
46354: CALL_OW 44
46358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46359: LD_VAR 0 12
46363: PPUSH
46364: LD_VAR 0 8
46368: PPUSH
46369: LD_INT 0
46371: PPUSH
46372: CALL 48451 0 3
// end ;
46376: GO 46330
46378: POP
46379: POP
// if birds then
46380: LD_VAR 0 1
46384: IFFALSE 46451
// for i = 1 to birds do
46386: LD_ADDR_VAR 0 11
46390: PUSH
46391: DOUBLE
46392: LD_INT 1
46394: DEC
46395: ST_TO_ADDR
46396: LD_VAR 0 1
46400: PUSH
46401: FOR_TO
46402: IFFALSE 46449
// begin hc_class := 18 ;
46404: LD_ADDR_OWVAR 28
46408: PUSH
46409: LD_INT 18
46411: ST_TO_ADDR
// hc_gallery =  ;
46412: LD_ADDR_OWVAR 33
46416: PUSH
46417: LD_STRING 
46419: ST_TO_ADDR
// animal := CreateHuman ;
46420: LD_ADDR_VAR 0 12
46424: PUSH
46425: CALL_OW 44
46429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46430: LD_VAR 0 12
46434: PPUSH
46435: LD_VAR 0 8
46439: PPUSH
46440: LD_INT 0
46442: PPUSH
46443: CALL 48451 0 3
// end ;
46447: GO 46401
46449: POP
46450: POP
// if tigers then
46451: LD_VAR 0 2
46455: IFFALSE 46539
// for i = 1 to tigers do
46457: LD_ADDR_VAR 0 11
46461: PUSH
46462: DOUBLE
46463: LD_INT 1
46465: DEC
46466: ST_TO_ADDR
46467: LD_VAR 0 2
46471: PUSH
46472: FOR_TO
46473: IFFALSE 46537
// begin hc_class = class_tiger ;
46475: LD_ADDR_OWVAR 28
46479: PUSH
46480: LD_INT 14
46482: ST_TO_ADDR
// hc_gallery =  ;
46483: LD_ADDR_OWVAR 33
46487: PUSH
46488: LD_STRING 
46490: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46491: LD_ADDR_OWVAR 35
46495: PUSH
46496: LD_INT 7
46498: NEG
46499: PPUSH
46500: LD_INT 7
46502: PPUSH
46503: CALL_OW 12
46507: ST_TO_ADDR
// animal := CreateHuman ;
46508: LD_ADDR_VAR 0 12
46512: PUSH
46513: CALL_OW 44
46517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46518: LD_VAR 0 12
46522: PPUSH
46523: LD_VAR 0 8
46527: PPUSH
46528: LD_INT 0
46530: PPUSH
46531: CALL 48451 0 3
// end ;
46535: GO 46472
46537: POP
46538: POP
// if apemans then
46539: LD_VAR 0 3
46543: IFFALSE 46666
// for i = 1 to apemans do
46545: LD_ADDR_VAR 0 11
46549: PUSH
46550: DOUBLE
46551: LD_INT 1
46553: DEC
46554: ST_TO_ADDR
46555: LD_VAR 0 3
46559: PUSH
46560: FOR_TO
46561: IFFALSE 46664
// begin hc_class = class_apeman ;
46563: LD_ADDR_OWVAR 28
46567: PUSH
46568: LD_INT 12
46570: ST_TO_ADDR
// hc_gallery =  ;
46571: LD_ADDR_OWVAR 33
46575: PUSH
46576: LD_STRING 
46578: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46579: LD_ADDR_OWVAR 35
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PPUSH
46588: LD_INT 2
46590: PPUSH
46591: CALL_OW 12
46595: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46596: LD_ADDR_OWVAR 31
46600: PUSH
46601: LD_INT 1
46603: PPUSH
46604: LD_INT 3
46606: PPUSH
46607: CALL_OW 12
46611: PUSH
46612: LD_INT 1
46614: PPUSH
46615: LD_INT 3
46617: PPUSH
46618: CALL_OW 12
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// animal := CreateHuman ;
46635: LD_ADDR_VAR 0 12
46639: PUSH
46640: CALL_OW 44
46644: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46645: LD_VAR 0 12
46649: PPUSH
46650: LD_VAR 0 8
46654: PPUSH
46655: LD_INT 0
46657: PPUSH
46658: CALL 48451 0 3
// end ;
46662: GO 46560
46664: POP
46665: POP
// if enchidnas then
46666: LD_VAR 0 4
46670: IFFALSE 46737
// for i = 1 to enchidnas do
46672: LD_ADDR_VAR 0 11
46676: PUSH
46677: DOUBLE
46678: LD_INT 1
46680: DEC
46681: ST_TO_ADDR
46682: LD_VAR 0 4
46686: PUSH
46687: FOR_TO
46688: IFFALSE 46735
// begin hc_class = 13 ;
46690: LD_ADDR_OWVAR 28
46694: PUSH
46695: LD_INT 13
46697: ST_TO_ADDR
// hc_gallery =  ;
46698: LD_ADDR_OWVAR 33
46702: PUSH
46703: LD_STRING 
46705: ST_TO_ADDR
// animal := CreateHuman ;
46706: LD_ADDR_VAR 0 12
46710: PUSH
46711: CALL_OW 44
46715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46716: LD_VAR 0 12
46720: PPUSH
46721: LD_VAR 0 8
46725: PPUSH
46726: LD_INT 0
46728: PPUSH
46729: CALL 48451 0 3
// end ;
46733: GO 46687
46735: POP
46736: POP
// if fishes then
46737: LD_VAR 0 7
46741: IFFALSE 46808
// for i = 1 to fishes do
46743: LD_ADDR_VAR 0 11
46747: PUSH
46748: DOUBLE
46749: LD_INT 1
46751: DEC
46752: ST_TO_ADDR
46753: LD_VAR 0 7
46757: PUSH
46758: FOR_TO
46759: IFFALSE 46806
// begin hc_class = 20 ;
46761: LD_ADDR_OWVAR 28
46765: PUSH
46766: LD_INT 20
46768: ST_TO_ADDR
// hc_gallery =  ;
46769: LD_ADDR_OWVAR 33
46773: PUSH
46774: LD_STRING 
46776: ST_TO_ADDR
// animal := CreateHuman ;
46777: LD_ADDR_VAR 0 12
46781: PUSH
46782: CALL_OW 44
46786: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46787: LD_VAR 0 12
46791: PPUSH
46792: LD_VAR 0 9
46796: PPUSH
46797: LD_INT 0
46799: PPUSH
46800: CALL 48451 0 3
// end ;
46804: GO 46758
46806: POP
46807: POP
// end ;
46808: LD_VAR 0 10
46812: RET
// export function WantHeal ( sci , unit ) ; begin
46813: LD_INT 0
46815: PPUSH
// if GetTaskList ( sci ) > 0 then
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 437
46825: PUSH
46826: LD_INT 0
46828: GREATER
46829: IFFALSE 46901
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46831: LD_VAR 0 1
46835: PPUSH
46836: CALL_OW 437
46840: PUSH
46841: LD_INT 1
46843: ARRAY
46844: PUSH
46845: LD_INT 1
46847: ARRAY
46848: PUSH
46849: LD_STRING l
46851: EQUAL
46852: IFFALSE 46879
46854: PUSH
46855: LD_VAR 0 1
46859: PPUSH
46860: CALL_OW 437
46864: PUSH
46865: LD_INT 1
46867: ARRAY
46868: PUSH
46869: LD_INT 4
46871: ARRAY
46872: PUSH
46873: LD_VAR 0 2
46877: EQUAL
46878: AND
46879: IFFALSE 46891
// result := true else
46881: LD_ADDR_VAR 0 3
46885: PUSH
46886: LD_INT 1
46888: ST_TO_ADDR
46889: GO 46899
// result := false ;
46891: LD_ADDR_VAR 0 3
46895: PUSH
46896: LD_INT 0
46898: ST_TO_ADDR
// end else
46899: GO 46909
// result := false ;
46901: LD_ADDR_VAR 0 3
46905: PUSH
46906: LD_INT 0
46908: ST_TO_ADDR
// end ;
46909: LD_VAR 0 3
46913: RET
// export function HealTarget ( sci ) ; begin
46914: LD_INT 0
46916: PPUSH
// if not sci then
46917: LD_VAR 0 1
46921: NOT
46922: IFFALSE 46926
// exit ;
46924: GO 46991
// result := 0 ;
46926: LD_ADDR_VAR 0 2
46930: PUSH
46931: LD_INT 0
46933: ST_TO_ADDR
// if GetTaskList ( sci ) then
46934: LD_VAR 0 1
46938: PPUSH
46939: CALL_OW 437
46943: IFFALSE 46991
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46945: LD_VAR 0 1
46949: PPUSH
46950: CALL_OW 437
46954: PUSH
46955: LD_INT 1
46957: ARRAY
46958: PUSH
46959: LD_INT 1
46961: ARRAY
46962: PUSH
46963: LD_STRING l
46965: EQUAL
46966: IFFALSE 46991
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46968: LD_ADDR_VAR 0 2
46972: PUSH
46973: LD_VAR 0 1
46977: PPUSH
46978: CALL_OW 437
46982: PUSH
46983: LD_INT 1
46985: ARRAY
46986: PUSH
46987: LD_INT 4
46989: ARRAY
46990: ST_TO_ADDR
// end ;
46991: LD_VAR 0 2
46995: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46996: LD_INT 0
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
// if not base_units then
47002: LD_VAR 0 1
47006: NOT
47007: IFFALSE 47011
// exit ;
47009: GO 47098
// result := false ;
47011: LD_ADDR_VAR 0 2
47015: PUSH
47016: LD_INT 0
47018: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47019: LD_ADDR_VAR 0 5
47023: PUSH
47024: LD_VAR 0 1
47028: PPUSH
47029: LD_INT 21
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PPUSH
47039: CALL_OW 72
47043: ST_TO_ADDR
// if not tmp then
47044: LD_VAR 0 5
47048: NOT
47049: IFFALSE 47053
// exit ;
47051: GO 47098
// for i in tmp do
47053: LD_ADDR_VAR 0 3
47057: PUSH
47058: LD_VAR 0 5
47062: PUSH
47063: FOR_IN
47064: IFFALSE 47096
// begin result := EnemyInRange ( i , 22 ) ;
47066: LD_ADDR_VAR 0 2
47070: PUSH
47071: LD_VAR 0 3
47075: PPUSH
47076: LD_INT 22
47078: PPUSH
47079: CALL 44513 0 2
47083: ST_TO_ADDR
// if result then
47084: LD_VAR 0 2
47088: IFFALSE 47094
// exit ;
47090: POP
47091: POP
47092: GO 47098
// end ;
47094: GO 47063
47096: POP
47097: POP
// end ;
47098: LD_VAR 0 2
47102: RET
// export function FilterByTag ( units , tag ) ; begin
47103: LD_INT 0
47105: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47106: LD_ADDR_VAR 0 3
47110: PUSH
47111: LD_VAR 0 1
47115: PPUSH
47116: LD_INT 120
47118: PUSH
47119: LD_VAR 0 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PPUSH
47128: CALL_OW 72
47132: ST_TO_ADDR
// end ;
47133: LD_VAR 0 3
47137: RET
// export function IsDriver ( un ) ; begin
47138: LD_INT 0
47140: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47141: LD_ADDR_VAR 0 2
47145: PUSH
47146: LD_VAR 0 1
47150: PUSH
47151: LD_INT 55
47153: PUSH
47154: EMPTY
47155: LIST
47156: PPUSH
47157: CALL_OW 69
47161: IN
47162: ST_TO_ADDR
// end ;
47163: LD_VAR 0 2
47167: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47168: LD_INT 0
47170: PPUSH
47171: PPUSH
// list := [ ] ;
47172: LD_ADDR_VAR 0 5
47176: PUSH
47177: EMPTY
47178: ST_TO_ADDR
// case d of 0 :
47179: LD_VAR 0 3
47183: PUSH
47184: LD_INT 0
47186: DOUBLE
47187: EQUAL
47188: IFTRUE 47192
47190: GO 47325
47192: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47193: LD_ADDR_VAR 0 5
47197: PUSH
47198: LD_VAR 0 1
47202: PUSH
47203: LD_INT 4
47205: MINUS
47206: PUSH
47207: LD_VAR 0 2
47211: PUSH
47212: LD_INT 4
47214: MINUS
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: PUSH
47224: LD_VAR 0 1
47228: PUSH
47229: LD_INT 3
47231: MINUS
47232: PUSH
47233: LD_VAR 0 2
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: PUSH
47246: LD_VAR 0 1
47250: PUSH
47251: LD_INT 4
47253: PLUS
47254: PUSH
47255: LD_VAR 0 2
47259: PUSH
47260: LD_INT 4
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: PUSH
47268: LD_VAR 0 1
47272: PUSH
47273: LD_INT 3
47275: PLUS
47276: PUSH
47277: LD_VAR 0 2
47281: PUSH
47282: LD_INT 3
47284: PLUS
47285: PUSH
47286: LD_INT 5
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: PUSH
47294: LD_VAR 0 1
47298: PUSH
47299: LD_VAR 0 2
47303: PUSH
47304: LD_INT 4
47306: PLUS
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// end ; 1 :
47323: GO 48023
47325: LD_INT 1
47327: DOUBLE
47328: EQUAL
47329: IFTRUE 47333
47331: GO 47466
47333: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47334: LD_ADDR_VAR 0 5
47338: PUSH
47339: LD_VAR 0 1
47343: PUSH
47344: LD_VAR 0 2
47348: PUSH
47349: LD_INT 4
47351: MINUS
47352: PUSH
47353: LD_INT 3
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: PUSH
47361: LD_VAR 0 1
47365: PUSH
47366: LD_INT 3
47368: MINUS
47369: PUSH
47370: LD_VAR 0 2
47374: PUSH
47375: LD_INT 3
47377: MINUS
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: PUSH
47387: LD_VAR 0 1
47391: PUSH
47392: LD_INT 4
47394: MINUS
47395: PUSH
47396: LD_VAR 0 2
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: PUSH
47409: LD_VAR 0 1
47413: PUSH
47414: LD_VAR 0 2
47418: PUSH
47419: LD_INT 3
47421: PLUS
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: PUSH
47431: LD_VAR 0 1
47435: PUSH
47436: LD_INT 4
47438: PLUS
47439: PUSH
47440: LD_VAR 0 2
47444: PUSH
47445: LD_INT 4
47447: PLUS
47448: PUSH
47449: LD_INT 5
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// end ; 2 :
47464: GO 48023
47466: LD_INT 2
47468: DOUBLE
47469: EQUAL
47470: IFTRUE 47474
47472: GO 47603
47474: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47475: LD_ADDR_VAR 0 5
47479: PUSH
47480: LD_VAR 0 1
47484: PUSH
47485: LD_VAR 0 2
47489: PUSH
47490: LD_INT 3
47492: MINUS
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: PUSH
47502: LD_VAR 0 1
47506: PUSH
47507: LD_INT 4
47509: PLUS
47510: PUSH
47511: LD_VAR 0 2
47515: PUSH
47516: LD_INT 4
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: PUSH
47524: LD_VAR 0 1
47528: PUSH
47529: LD_VAR 0 2
47533: PUSH
47534: LD_INT 4
47536: PLUS
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: PUSH
47546: LD_VAR 0 1
47550: PUSH
47551: LD_INT 3
47553: MINUS
47554: PUSH
47555: LD_VAR 0 2
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: PUSH
47568: LD_VAR 0 1
47572: PUSH
47573: LD_INT 4
47575: MINUS
47576: PUSH
47577: LD_VAR 0 2
47581: PUSH
47582: LD_INT 4
47584: MINUS
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: ST_TO_ADDR
// end ; 3 :
47601: GO 48023
47603: LD_INT 3
47605: DOUBLE
47606: EQUAL
47607: IFTRUE 47611
47609: GO 47744
47611: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47612: LD_ADDR_VAR 0 5
47616: PUSH
47617: LD_VAR 0 1
47621: PUSH
47622: LD_INT 3
47624: PLUS
47625: PUSH
47626: LD_VAR 0 2
47630: PUSH
47631: LD_INT 4
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: PUSH
47639: LD_VAR 0 1
47643: PUSH
47644: LD_INT 4
47646: PLUS
47647: PUSH
47648: LD_VAR 0 2
47652: PUSH
47653: LD_INT 4
47655: PLUS
47656: PUSH
47657: LD_INT 5
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: PUSH
47665: LD_VAR 0 1
47669: PUSH
47670: LD_INT 4
47672: MINUS
47673: PUSH
47674: LD_VAR 0 2
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: LIST
47686: PUSH
47687: LD_VAR 0 1
47691: PUSH
47692: LD_VAR 0 2
47696: PUSH
47697: LD_INT 4
47699: MINUS
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: PUSH
47709: LD_VAR 0 1
47713: PUSH
47714: LD_INT 3
47716: MINUS
47717: PUSH
47718: LD_VAR 0 2
47722: PUSH
47723: LD_INT 3
47725: MINUS
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// end ; 4 :
47742: GO 48023
47744: LD_INT 4
47746: DOUBLE
47747: EQUAL
47748: IFTRUE 47752
47750: GO 47885
47752: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47753: LD_ADDR_VAR 0 5
47757: PUSH
47758: LD_VAR 0 1
47762: PUSH
47763: LD_VAR 0 2
47767: PUSH
47768: LD_INT 4
47770: PLUS
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: LIST
47779: PUSH
47780: LD_VAR 0 1
47784: PUSH
47785: LD_INT 3
47787: PLUS
47788: PUSH
47789: LD_VAR 0 2
47793: PUSH
47794: LD_INT 3
47796: PLUS
47797: PUSH
47798: LD_INT 5
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: PUSH
47806: LD_VAR 0 1
47810: PUSH
47811: LD_INT 4
47813: PLUS
47814: PUSH
47815: LD_VAR 0 2
47819: PUSH
47820: LD_INT 4
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: PUSH
47828: LD_VAR 0 1
47832: PUSH
47833: LD_VAR 0 2
47837: PUSH
47838: LD_INT 3
47840: MINUS
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: PUSH
47850: LD_VAR 0 1
47854: PUSH
47855: LD_INT 4
47857: MINUS
47858: PUSH
47859: LD_VAR 0 2
47863: PUSH
47864: LD_INT 4
47866: MINUS
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// end ; 5 :
47883: GO 48023
47885: LD_INT 5
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47893
47891: GO 48022
47893: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47894: LD_ADDR_VAR 0 5
47898: PUSH
47899: LD_VAR 0 1
47903: PUSH
47904: LD_INT 4
47906: MINUS
47907: PUSH
47908: LD_VAR 0 2
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: PUSH
47921: LD_VAR 0 1
47925: PUSH
47926: LD_VAR 0 2
47930: PUSH
47931: LD_INT 4
47933: MINUS
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: PUSH
47943: LD_VAR 0 1
47947: PUSH
47948: LD_INT 4
47950: PLUS
47951: PUSH
47952: LD_VAR 0 2
47956: PUSH
47957: LD_INT 4
47959: PLUS
47960: PUSH
47961: LD_INT 5
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: PUSH
47969: LD_VAR 0 1
47973: PUSH
47974: LD_INT 3
47976: PLUS
47977: PUSH
47978: LD_VAR 0 2
47982: PUSH
47983: LD_INT 4
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: PUSH
47991: LD_VAR 0 1
47995: PUSH
47996: LD_VAR 0 2
48000: PUSH
48001: LD_INT 3
48003: PLUS
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: ST_TO_ADDR
// end ; end ;
48020: GO 48023
48022: POP
// result := list ;
48023: LD_ADDR_VAR 0 4
48027: PUSH
48028: LD_VAR 0 5
48032: ST_TO_ADDR
// end ;
48033: LD_VAR 0 4
48037: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48038: LD_INT 0
48040: PPUSH
48041: PPUSH
48042: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48043: LD_VAR 0 1
48047: NOT
48048: IFTRUE 48076
48050: PUSH
48051: LD_VAR 0 2
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: LD_INT 4
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: IN
48074: NOT
48075: OR
48076: IFFALSE 48080
// exit ;
48078: GO 48163
// tmp := [ ] ;
48080: LD_ADDR_VAR 0 5
48084: PUSH
48085: EMPTY
48086: ST_TO_ADDR
// for i in units do
48087: LD_ADDR_VAR 0 4
48091: PUSH
48092: LD_VAR 0 1
48096: PUSH
48097: FOR_IN
48098: IFFALSE 48132
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48100: LD_ADDR_VAR 0 5
48104: PUSH
48105: LD_VAR 0 5
48109: PPUSH
48110: LD_VAR 0 4
48114: PPUSH
48115: LD_VAR 0 2
48119: PPUSH
48120: CALL_OW 259
48124: PPUSH
48125: CALL 49558 0 2
48129: ST_TO_ADDR
48130: GO 48097
48132: POP
48133: POP
// if not tmp then
48134: LD_VAR 0 5
48138: NOT
48139: IFFALSE 48143
// exit ;
48141: GO 48163
// result := SortListByListDesc ( units , tmp ) ;
48143: LD_ADDR_VAR 0 3
48147: PUSH
48148: LD_VAR 0 1
48152: PPUSH
48153: LD_VAR 0 5
48157: PPUSH
48158: CALL_OW 77
48162: ST_TO_ADDR
// end ;
48163: LD_VAR 0 3
48167: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48168: LD_INT 0
48170: PPUSH
48171: PPUSH
48172: PPUSH
// result := false ;
48173: LD_ADDR_VAR 0 3
48177: PUSH
48178: LD_INT 0
48180: ST_TO_ADDR
// if not building then
48181: LD_VAR 0 2
48185: NOT
48186: IFFALSE 48190
// exit ;
48188: GO 48334
// x := GetX ( building ) ;
48190: LD_ADDR_VAR 0 4
48194: PUSH
48195: LD_VAR 0 2
48199: PPUSH
48200: CALL_OW 250
48204: ST_TO_ADDR
// y := GetY ( building ) ;
48205: LD_ADDR_VAR 0 5
48209: PUSH
48210: LD_VAR 0 2
48214: PPUSH
48215: CALL_OW 251
48219: ST_TO_ADDR
// if not x or not y then
48220: LD_VAR 0 4
48224: NOT
48225: IFTRUE 48234
48227: PUSH
48228: LD_VAR 0 5
48232: NOT
48233: OR
48234: IFFALSE 48238
// exit ;
48236: GO 48334
// if GetTaskList ( unit ) then
48238: LD_VAR 0 1
48242: PPUSH
48243: CALL_OW 437
48247: IFFALSE 48334
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48249: LD_STRING e
48251: PUSH
48252: LD_VAR 0 1
48256: PPUSH
48257: CALL_OW 437
48261: PUSH
48262: LD_INT 1
48264: ARRAY
48265: PUSH
48266: LD_INT 1
48268: ARRAY
48269: EQUAL
48270: IFFALSE 48297
48272: PUSH
48273: LD_VAR 0 4
48277: PUSH
48278: LD_VAR 0 1
48282: PPUSH
48283: CALL_OW 437
48287: PUSH
48288: LD_INT 1
48290: ARRAY
48291: PUSH
48292: LD_INT 2
48294: ARRAY
48295: EQUAL
48296: AND
48297: IFFALSE 48324
48299: PUSH
48300: LD_VAR 0 5
48304: PUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: CALL_OW 437
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: PUSH
48319: LD_INT 3
48321: ARRAY
48322: EQUAL
48323: AND
48324: IFFALSE 48334
// result := true end ;
48326: LD_ADDR_VAR 0 3
48330: PUSH
48331: LD_INT 1
48333: ST_TO_ADDR
// end ;
48334: LD_VAR 0 3
48338: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48339: LD_INT 0
48341: PPUSH
// result := false ;
48342: LD_ADDR_VAR 0 4
48346: PUSH
48347: LD_INT 0
48349: ST_TO_ADDR
// if GetTaskList ( unit ) then
48350: LD_VAR 0 1
48354: PPUSH
48355: CALL_OW 437
48359: IFFALSE 48446
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48361: LD_STRING M
48363: PUSH
48364: LD_VAR 0 1
48368: PPUSH
48369: CALL_OW 437
48373: PUSH
48374: LD_INT 1
48376: ARRAY
48377: PUSH
48378: LD_INT 1
48380: ARRAY
48381: EQUAL
48382: IFFALSE 48409
48384: PUSH
48385: LD_VAR 0 2
48389: PUSH
48390: LD_VAR 0 1
48394: PPUSH
48395: CALL_OW 437
48399: PUSH
48400: LD_INT 1
48402: ARRAY
48403: PUSH
48404: LD_INT 2
48406: ARRAY
48407: EQUAL
48408: AND
48409: IFFALSE 48436
48411: PUSH
48412: LD_VAR 0 3
48416: PUSH
48417: LD_VAR 0 1
48421: PPUSH
48422: CALL_OW 437
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: PUSH
48431: LD_INT 3
48433: ARRAY
48434: EQUAL
48435: AND
48436: IFFALSE 48446
// result := true ;
48438: LD_ADDR_VAR 0 4
48442: PUSH
48443: LD_INT 1
48445: ST_TO_ADDR
// end ; end ;
48446: LD_VAR 0 4
48450: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48451: LD_INT 0
48453: PPUSH
48454: PPUSH
48455: PPUSH
48456: PPUSH
// if not unit or not area then
48457: LD_VAR 0 1
48461: NOT
48462: IFTRUE 48471
48464: PUSH
48465: LD_VAR 0 2
48469: NOT
48470: OR
48471: IFFALSE 48475
// exit ;
48473: GO 48651
// tmp := AreaToList ( area , i ) ;
48475: LD_ADDR_VAR 0 6
48479: PUSH
48480: LD_VAR 0 2
48484: PPUSH
48485: LD_VAR 0 5
48489: PPUSH
48490: CALL_OW 517
48494: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48495: LD_ADDR_VAR 0 5
48499: PUSH
48500: DOUBLE
48501: LD_INT 1
48503: DEC
48504: ST_TO_ADDR
48505: LD_VAR 0 6
48509: PUSH
48510: LD_INT 1
48512: ARRAY
48513: PUSH
48514: FOR_TO
48515: IFFALSE 48649
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48517: LD_ADDR_VAR 0 7
48521: PUSH
48522: LD_VAR 0 6
48526: PUSH
48527: LD_INT 1
48529: ARRAY
48530: PUSH
48531: LD_VAR 0 5
48535: ARRAY
48536: PUSH
48537: LD_VAR 0 6
48541: PUSH
48542: LD_INT 2
48544: ARRAY
48545: PUSH
48546: LD_VAR 0 5
48550: ARRAY
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48556: LD_INT 92
48558: PUSH
48559: LD_VAR 0 7
48563: PUSH
48564: LD_INT 1
48566: ARRAY
48567: PUSH
48568: LD_VAR 0 7
48572: PUSH
48573: LD_INT 2
48575: ARRAY
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: PPUSH
48586: CALL_OW 69
48590: PUSH
48591: LD_INT 0
48593: EQUAL
48594: IFFALSE 48647
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48596: LD_VAR 0 1
48600: PPUSH
48601: LD_VAR 0 7
48605: PUSH
48606: LD_INT 1
48608: ARRAY
48609: PPUSH
48610: LD_VAR 0 7
48614: PUSH
48615: LD_INT 2
48617: ARRAY
48618: PPUSH
48619: LD_VAR 0 3
48623: PPUSH
48624: CALL_OW 48
// result := IsPlaced ( unit ) ;
48628: LD_ADDR_VAR 0 4
48632: PUSH
48633: LD_VAR 0 1
48637: PPUSH
48638: CALL_OW 305
48642: ST_TO_ADDR
// exit ;
48643: POP
48644: POP
48645: GO 48651
// end ; end ;
48647: GO 48514
48649: POP
48650: POP
// end ;
48651: LD_VAR 0 4
48655: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48656: LD_INT 0
48658: PPUSH
48659: PPUSH
48660: PPUSH
// if not side or side > 8 then
48661: LD_VAR 0 1
48665: NOT
48666: IFTRUE 48678
48668: PUSH
48669: LD_VAR 0 1
48673: PUSH
48674: LD_INT 8
48676: GREATER
48677: OR
48678: IFFALSE 48682
// exit ;
48680: GO 48869
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48682: LD_ADDR_VAR 0 4
48686: PUSH
48687: LD_INT 22
48689: PUSH
48690: LD_VAR 0 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 21
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PPUSH
48713: CALL_OW 69
48717: ST_TO_ADDR
// if not tmp then
48718: LD_VAR 0 4
48722: NOT
48723: IFFALSE 48727
// exit ;
48725: GO 48869
// enable_addtolog := true ;
48727: LD_ADDR_OWVAR 81
48731: PUSH
48732: LD_INT 1
48734: ST_TO_ADDR
// AddToLog ( [ ) ;
48735: LD_STRING [
48737: PPUSH
48738: CALL_OW 561
// for i in tmp do
48742: LD_ADDR_VAR 0 3
48746: PUSH
48747: LD_VAR 0 4
48751: PUSH
48752: FOR_IN
48753: IFFALSE 48860
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48755: LD_STRING [
48757: PUSH
48758: LD_VAR 0 3
48762: PPUSH
48763: CALL_OW 266
48767: STR
48768: PUSH
48769: LD_STRING , 
48771: STR
48772: PUSH
48773: LD_VAR 0 3
48777: PPUSH
48778: CALL_OW 250
48782: STR
48783: PUSH
48784: LD_STRING , 
48786: STR
48787: PUSH
48788: LD_VAR 0 3
48792: PPUSH
48793: CALL_OW 251
48797: STR
48798: PUSH
48799: LD_STRING , 
48801: STR
48802: PUSH
48803: LD_VAR 0 3
48807: PPUSH
48808: CALL_OW 254
48812: STR
48813: PUSH
48814: LD_STRING , 
48816: STR
48817: PUSH
48818: LD_VAR 0 3
48822: PPUSH
48823: LD_INT 1
48825: PPUSH
48826: CALL_OW 268
48830: STR
48831: PUSH
48832: LD_STRING , 
48834: STR
48835: PUSH
48836: LD_VAR 0 3
48840: PPUSH
48841: LD_INT 2
48843: PPUSH
48844: CALL_OW 268
48848: STR
48849: PUSH
48850: LD_STRING ],
48852: STR
48853: PPUSH
48854: CALL_OW 561
// end ;
48858: GO 48752
48860: POP
48861: POP
// AddToLog ( ]; ) ;
48862: LD_STRING ];
48864: PPUSH
48865: CALL_OW 561
// end ;
48869: LD_VAR 0 2
48873: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48874: LD_INT 0
48876: PPUSH
48877: PPUSH
48878: PPUSH
48879: PPUSH
48880: PPUSH
// if not area or not rate or not max then
48881: LD_VAR 0 1
48885: NOT
48886: IFTRUE 48895
48888: PUSH
48889: LD_VAR 0 2
48893: NOT
48894: OR
48895: IFTRUE 48904
48897: PUSH
48898: LD_VAR 0 4
48902: NOT
48903: OR
48904: IFFALSE 48908
// exit ;
48906: GO 49097
// while 1 do
48908: LD_INT 1
48910: IFFALSE 49097
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48912: LD_ADDR_VAR 0 9
48916: PUSH
48917: LD_VAR 0 1
48921: PPUSH
48922: LD_INT 1
48924: PPUSH
48925: CALL_OW 287
48929: PUSH
48930: LD_INT 10
48932: MUL
48933: ST_TO_ADDR
// r := rate / 10 ;
48934: LD_ADDR_VAR 0 7
48938: PUSH
48939: LD_VAR 0 2
48943: PUSH
48944: LD_INT 10
48946: DIVREAL
48947: ST_TO_ADDR
// time := 1 1$00 ;
48948: LD_ADDR_VAR 0 8
48952: PUSH
48953: LD_INT 2100
48955: ST_TO_ADDR
// if amount < min then
48956: LD_VAR 0 9
48960: PUSH
48961: LD_VAR 0 3
48965: LESS
48966: IFFALSE 48984
// r := r * 2 else
48968: LD_ADDR_VAR 0 7
48972: PUSH
48973: LD_VAR 0 7
48977: PUSH
48978: LD_INT 2
48980: MUL
48981: ST_TO_ADDR
48982: GO 49010
// if amount > max then
48984: LD_VAR 0 9
48988: PUSH
48989: LD_VAR 0 4
48993: GREATER
48994: IFFALSE 49010
// r := r / 2 ;
48996: LD_ADDR_VAR 0 7
49000: PUSH
49001: LD_VAR 0 7
49005: PUSH
49006: LD_INT 2
49008: DIVREAL
49009: ST_TO_ADDR
// time := time / r ;
49010: LD_ADDR_VAR 0 8
49014: PUSH
49015: LD_VAR 0 8
49019: PUSH
49020: LD_VAR 0 7
49024: DIVREAL
49025: ST_TO_ADDR
// if time < 0 then
49026: LD_VAR 0 8
49030: PUSH
49031: LD_INT 0
49033: LESS
49034: IFFALSE 49051
// time := time * - 1 ;
49036: LD_ADDR_VAR 0 8
49040: PUSH
49041: LD_VAR 0 8
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: MUL
49050: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49051: LD_VAR 0 8
49055: PUSH
49056: LD_INT 35
49058: PPUSH
49059: LD_INT 875
49061: PPUSH
49062: CALL_OW 12
49066: PLUS
49067: PPUSH
49068: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49072: LD_INT 1
49074: PPUSH
49075: LD_INT 5
49077: PPUSH
49078: CALL_OW 12
49082: PPUSH
49083: LD_VAR 0 1
49087: PPUSH
49088: LD_INT 1
49090: PPUSH
49091: CALL_OW 55
// end ;
49095: GO 48908
// end ;
49097: LD_VAR 0 5
49101: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49102: LD_INT 0
49104: PPUSH
49105: PPUSH
49106: PPUSH
49107: PPUSH
49108: PPUSH
49109: PPUSH
49110: PPUSH
49111: PPUSH
// if not turrets or not factories then
49112: LD_VAR 0 1
49116: NOT
49117: IFTRUE 49126
49119: PUSH
49120: LD_VAR 0 2
49124: NOT
49125: OR
49126: IFFALSE 49130
// exit ;
49128: GO 49437
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49130: LD_ADDR_VAR 0 10
49134: PUSH
49135: LD_INT 5
49137: PUSH
49138: LD_INT 6
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: LD_INT 4
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: LD_INT 5
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 24
49172: PUSH
49173: LD_INT 25
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 23
49182: PUSH
49183: LD_INT 27
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 42
49196: PUSH
49197: LD_INT 43
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 44
49206: PUSH
49207: LD_INT 46
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 45
49216: PUSH
49217: LD_INT 47
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: LIST
49233: ST_TO_ADDR
// result := [ ] ;
49234: LD_ADDR_VAR 0 3
49238: PUSH
49239: EMPTY
49240: ST_TO_ADDR
// for i in turrets do
49241: LD_ADDR_VAR 0 4
49245: PUSH
49246: LD_VAR 0 1
49250: PUSH
49251: FOR_IN
49252: IFFALSE 49435
// begin nat := GetNation ( i ) ;
49254: LD_ADDR_VAR 0 7
49258: PUSH
49259: LD_VAR 0 4
49263: PPUSH
49264: CALL_OW 248
49268: ST_TO_ADDR
// weapon := 0 ;
49269: LD_ADDR_VAR 0 8
49273: PUSH
49274: LD_INT 0
49276: ST_TO_ADDR
// if not nat then
49277: LD_VAR 0 7
49281: NOT
49282: IFFALSE 49286
// continue ;
49284: GO 49251
// for j in list [ nat ] do
49286: LD_ADDR_VAR 0 5
49290: PUSH
49291: LD_VAR 0 10
49295: PUSH
49296: LD_VAR 0 7
49300: ARRAY
49301: PUSH
49302: FOR_IN
49303: IFFALSE 49344
// if GetBWeapon ( i ) = j [ 1 ] then
49305: LD_VAR 0 4
49309: PPUSH
49310: CALL_OW 269
49314: PUSH
49315: LD_VAR 0 5
49319: PUSH
49320: LD_INT 1
49322: ARRAY
49323: EQUAL
49324: IFFALSE 49342
// begin weapon := j [ 2 ] ;
49326: LD_ADDR_VAR 0 8
49330: PUSH
49331: LD_VAR 0 5
49335: PUSH
49336: LD_INT 2
49338: ARRAY
49339: ST_TO_ADDR
// break ;
49340: GO 49344
// end ;
49342: GO 49302
49344: POP
49345: POP
// if not weapon then
49346: LD_VAR 0 8
49350: NOT
49351: IFFALSE 49355
// continue ;
49353: GO 49251
// for k in factories do
49355: LD_ADDR_VAR 0 6
49359: PUSH
49360: LD_VAR 0 2
49364: PUSH
49365: FOR_IN
49366: IFFALSE 49431
// begin weapons := AvailableWeaponList ( k ) ;
49368: LD_ADDR_VAR 0 9
49372: PUSH
49373: LD_VAR 0 6
49377: PPUSH
49378: CALL_OW 478
49382: ST_TO_ADDR
// if not weapons then
49383: LD_VAR 0 9
49387: NOT
49388: IFFALSE 49392
// continue ;
49390: GO 49365
// if weapon in weapons then
49392: LD_VAR 0 8
49396: PUSH
49397: LD_VAR 0 9
49401: IN
49402: IFFALSE 49429
// begin result := [ i , weapon ] ;
49404: LD_ADDR_VAR 0 3
49408: PUSH
49409: LD_VAR 0 4
49413: PUSH
49414: LD_VAR 0 8
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: ST_TO_ADDR
// exit ;
49423: POP
49424: POP
49425: POP
49426: POP
49427: GO 49437
// end ; end ;
49429: GO 49365
49431: POP
49432: POP
// end ;
49433: GO 49251
49435: POP
49436: POP
// end ;
49437: LD_VAR 0 3
49441: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49442: LD_INT 0
49444: PPUSH
// if not side or side > 8 then
49445: LD_VAR 0 3
49449: NOT
49450: IFTRUE 49462
49452: PUSH
49453: LD_VAR 0 3
49457: PUSH
49458: LD_INT 8
49460: GREATER
49461: OR
49462: IFFALSE 49466
// exit ;
49464: GO 49525
// if not range then
49466: LD_VAR 0 4
49470: NOT
49471: IFFALSE 49482
// range := - 12 ;
49473: LD_ADDR_VAR 0 4
49477: PUSH
49478: LD_INT 12
49480: NEG
49481: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49482: LD_VAR 0 1
49486: PPUSH
49487: LD_VAR 0 2
49491: PPUSH
49492: LD_VAR 0 3
49496: PPUSH
49497: LD_VAR 0 4
49501: PPUSH
49502: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49506: LD_VAR 0 1
49510: PPUSH
49511: LD_VAR 0 2
49515: PPUSH
49516: LD_VAR 0 3
49520: PPUSH
49521: CALL_OW 331
// end ;
49525: LD_VAR 0 5
49529: RET
// export function Video ( mode ) ; begin
49530: LD_INT 0
49532: PPUSH
// ingame_video = mode ;
49533: LD_ADDR_OWVAR 52
49537: PUSH
49538: LD_VAR 0 1
49542: ST_TO_ADDR
// interface_hidden = mode ;
49543: LD_ADDR_OWVAR 54
49547: PUSH
49548: LD_VAR 0 1
49552: ST_TO_ADDR
// end ;
49553: LD_VAR 0 2
49557: RET
// export function Join ( array , element ) ; begin
49558: LD_INT 0
49560: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49561: LD_ADDR_VAR 0 3
49565: PUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: LD_VAR 0 1
49575: PUSH
49576: LD_INT 1
49578: PLUS
49579: PPUSH
49580: LD_VAR 0 2
49584: PPUSH
49585: CALL_OW 1
49589: ST_TO_ADDR
// end ;
49590: LD_VAR 0 3
49594: RET
// export function JoinUnion ( array , element ) ; begin
49595: LD_INT 0
49597: PPUSH
// result := array union element ;
49598: LD_ADDR_VAR 0 3
49602: PUSH
49603: LD_VAR 0 1
49607: PUSH
49608: LD_VAR 0 2
49612: UNION
49613: ST_TO_ADDR
// end ;
49614: LD_VAR 0 3
49618: RET
// export function GetBehemoths ( side ) ; begin
49619: LD_INT 0
49621: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49622: LD_ADDR_VAR 0 2
49626: PUSH
49627: LD_INT 22
49629: PUSH
49630: LD_VAR 0 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 31
49641: PUSH
49642: LD_INT 25
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PPUSH
49653: CALL_OW 69
49657: ST_TO_ADDR
// end ;
49658: LD_VAR 0 2
49662: RET
// export function Shuffle ( array ) ; var i , index ; begin
49663: LD_INT 0
49665: PPUSH
49666: PPUSH
49667: PPUSH
// result := [ ] ;
49668: LD_ADDR_VAR 0 2
49672: PUSH
49673: EMPTY
49674: ST_TO_ADDR
// if not array then
49675: LD_VAR 0 1
49679: NOT
49680: IFFALSE 49684
// exit ;
49682: GO 49783
// Randomize ;
49684: CALL_OW 10
// for i = array downto 1 do
49688: LD_ADDR_VAR 0 3
49692: PUSH
49693: DOUBLE
49694: LD_VAR 0 1
49698: INC
49699: ST_TO_ADDR
49700: LD_INT 1
49702: PUSH
49703: FOR_DOWNTO
49704: IFFALSE 49781
// begin index := rand ( 1 , array ) ;
49706: LD_ADDR_VAR 0 4
49710: PUSH
49711: LD_INT 1
49713: PPUSH
49714: LD_VAR 0 1
49718: PPUSH
49719: CALL_OW 12
49723: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49724: LD_ADDR_VAR 0 2
49728: PUSH
49729: LD_VAR 0 2
49733: PPUSH
49734: LD_VAR 0 2
49738: PUSH
49739: LD_INT 1
49741: PLUS
49742: PPUSH
49743: LD_VAR 0 1
49747: PUSH
49748: LD_VAR 0 4
49752: ARRAY
49753: PPUSH
49754: CALL_OW 2
49758: ST_TO_ADDR
// array := Delete ( array , index ) ;
49759: LD_ADDR_VAR 0 1
49763: PUSH
49764: LD_VAR 0 1
49768: PPUSH
49769: LD_VAR 0 4
49773: PPUSH
49774: CALL_OW 3
49778: ST_TO_ADDR
// end ;
49779: GO 49703
49781: POP
49782: POP
// end ;
49783: LD_VAR 0 2
49787: RET
// export function GetBaseMaterials ( base ) ; begin
49788: LD_INT 0
49790: PPUSH
// result := [ 0 , 0 , 0 ] ;
49791: LD_ADDR_VAR 0 2
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: ST_TO_ADDR
// if not base then
49810: LD_VAR 0 1
49814: NOT
49815: IFFALSE 49819
// exit ;
49817: GO 49868
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49819: LD_ADDR_VAR 0 2
49823: PUSH
49824: LD_VAR 0 1
49828: PPUSH
49829: LD_INT 1
49831: PPUSH
49832: CALL_OW 275
49836: PUSH
49837: LD_VAR 0 1
49841: PPUSH
49842: LD_INT 2
49844: PPUSH
49845: CALL_OW 275
49849: PUSH
49850: LD_VAR 0 1
49854: PPUSH
49855: LD_INT 3
49857: PPUSH
49858: CALL_OW 275
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// end ;
49868: LD_VAR 0 2
49872: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49873: LD_INT 0
49875: PPUSH
49876: PPUSH
// result := array ;
49877: LD_ADDR_VAR 0 3
49881: PUSH
49882: LD_VAR 0 1
49886: ST_TO_ADDR
// if size >= result then
49887: LD_VAR 0 2
49891: PUSH
49892: LD_VAR 0 3
49896: GREATEREQUAL
49897: IFFALSE 49901
// exit ;
49899: GO 49951
// if size then
49901: LD_VAR 0 2
49905: IFFALSE 49951
// for i := array downto size do
49907: LD_ADDR_VAR 0 4
49911: PUSH
49912: DOUBLE
49913: LD_VAR 0 1
49917: INC
49918: ST_TO_ADDR
49919: LD_VAR 0 2
49923: PUSH
49924: FOR_DOWNTO
49925: IFFALSE 49949
// result := Delete ( result , result ) ;
49927: LD_ADDR_VAR 0 3
49931: PUSH
49932: LD_VAR 0 3
49936: PPUSH
49937: LD_VAR 0 3
49941: PPUSH
49942: CALL_OW 3
49946: ST_TO_ADDR
49947: GO 49924
49949: POP
49950: POP
// end ;
49951: LD_VAR 0 3
49955: RET
// export function ComExit ( unit ) ; var tmp ; begin
49956: LD_INT 0
49958: PPUSH
49959: PPUSH
// if not IsInUnit ( unit ) then
49960: LD_VAR 0 1
49964: PPUSH
49965: CALL_OW 310
49969: NOT
49970: IFFALSE 49974
// exit ;
49972: GO 50034
// tmp := IsInUnit ( unit ) ;
49974: LD_ADDR_VAR 0 3
49978: PUSH
49979: LD_VAR 0 1
49983: PPUSH
49984: CALL_OW 310
49988: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49989: LD_VAR 0 3
49993: PPUSH
49994: CALL_OW 247
49998: PUSH
49999: LD_INT 2
50001: EQUAL
50002: IFFALSE 50015
// ComExitVehicle ( unit ) else
50004: LD_VAR 0 1
50008: PPUSH
50009: CALL_OW 121
50013: GO 50024
// ComExitBuilding ( unit ) ;
50015: LD_VAR 0 1
50019: PPUSH
50020: CALL_OW 122
// result := tmp ;
50024: LD_ADDR_VAR 0 2
50028: PUSH
50029: LD_VAR 0 3
50033: ST_TO_ADDR
// end ;
50034: LD_VAR 0 2
50038: RET
// export function ComExitAll ( units ) ; var i ; begin
50039: LD_INT 0
50041: PPUSH
50042: PPUSH
// if not units then
50043: LD_VAR 0 1
50047: NOT
50048: IFFALSE 50052
// exit ;
50050: GO 50078
// for i in units do
50052: LD_ADDR_VAR 0 3
50056: PUSH
50057: LD_VAR 0 1
50061: PUSH
50062: FOR_IN
50063: IFFALSE 50076
// ComExit ( i ) ;
50065: LD_VAR 0 3
50069: PPUSH
50070: CALL 49956 0 1
50074: GO 50062
50076: POP
50077: POP
// end ;
50078: LD_VAR 0 2
50082: RET
// export function ResetHc ; begin
50083: LD_INT 0
50085: PPUSH
// InitHc ;
50086: CALL_OW 19
// hc_importance := 0 ;
50090: LD_ADDR_OWVAR 32
50094: PUSH
50095: LD_INT 0
50097: ST_TO_ADDR
// end ;
50098: LD_VAR 0 1
50102: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50103: LD_INT 0
50105: PPUSH
50106: PPUSH
50107: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50108: LD_ADDR_VAR 0 6
50112: PUSH
50113: LD_VAR 0 1
50117: PUSH
50118: LD_VAR 0 3
50122: PLUS
50123: PUSH
50124: LD_INT 2
50126: DIV
50127: ST_TO_ADDR
// if _x < 0 then
50128: LD_VAR 0 6
50132: PUSH
50133: LD_INT 0
50135: LESS
50136: IFFALSE 50153
// _x := _x * - 1 ;
50138: LD_ADDR_VAR 0 6
50142: PUSH
50143: LD_VAR 0 6
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: MUL
50152: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50153: LD_ADDR_VAR 0 7
50157: PUSH
50158: LD_VAR 0 2
50162: PUSH
50163: LD_VAR 0 4
50167: PLUS
50168: PUSH
50169: LD_INT 2
50171: DIV
50172: ST_TO_ADDR
// if _y < 0 then
50173: LD_VAR 0 7
50177: PUSH
50178: LD_INT 0
50180: LESS
50181: IFFALSE 50198
// _y := _y * - 1 ;
50183: LD_ADDR_VAR 0 7
50187: PUSH
50188: LD_VAR 0 7
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: MUL
50197: ST_TO_ADDR
// result := [ _x , _y ] ;
50198: LD_ADDR_VAR 0 5
50202: PUSH
50203: LD_VAR 0 6
50207: PUSH
50208: LD_VAR 0 7
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: ST_TO_ADDR
// end ;
50217: LD_VAR 0 5
50221: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50222: LD_INT 0
50224: PPUSH
50225: PPUSH
50226: PPUSH
50227: PPUSH
// task := GetTaskList ( unit ) ;
50228: LD_ADDR_VAR 0 7
50232: PUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: CALL_OW 437
50242: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50243: LD_VAR 0 7
50247: NOT
50248: IFFALSE 50267
50250: PUSH
50251: LD_VAR 0 1
50255: PPUSH
50256: LD_VAR 0 2
50260: PPUSH
50261: CALL_OW 308
50265: NOT
50266: AND
50267: IFFALSE 50271
// exit ;
50269: GO 50389
// if IsInArea ( unit , area ) then
50271: LD_VAR 0 1
50275: PPUSH
50276: LD_VAR 0 2
50280: PPUSH
50281: CALL_OW 308
50285: IFFALSE 50303
// begin ComMoveToArea ( unit , goAway ) ;
50287: LD_VAR 0 1
50291: PPUSH
50292: LD_VAR 0 3
50296: PPUSH
50297: CALL_OW 113
// exit ;
50301: GO 50389
// end ; if task [ 1 ] [ 1 ] <> M then
50303: LD_VAR 0 7
50307: PUSH
50308: LD_INT 1
50310: ARRAY
50311: PUSH
50312: LD_INT 1
50314: ARRAY
50315: PUSH
50316: LD_STRING M
50318: NONEQUAL
50319: IFFALSE 50323
// exit ;
50321: GO 50389
// x := task [ 1 ] [ 2 ] ;
50323: LD_ADDR_VAR 0 5
50327: PUSH
50328: LD_VAR 0 7
50332: PUSH
50333: LD_INT 1
50335: ARRAY
50336: PUSH
50337: LD_INT 2
50339: ARRAY
50340: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50341: LD_ADDR_VAR 0 6
50345: PUSH
50346: LD_VAR 0 7
50350: PUSH
50351: LD_INT 1
50353: ARRAY
50354: PUSH
50355: LD_INT 3
50357: ARRAY
50358: ST_TO_ADDR
// if InArea ( x , y , area ) then
50359: LD_VAR 0 5
50363: PPUSH
50364: LD_VAR 0 6
50368: PPUSH
50369: LD_VAR 0 2
50373: PPUSH
50374: CALL_OW 309
50378: IFFALSE 50389
// ComStop ( unit ) ;
50380: LD_VAR 0 1
50384: PPUSH
50385: CALL_OW 141
// end ;
50389: LD_VAR 0 4
50393: RET
// export function Abs ( value ) ; begin
50394: LD_INT 0
50396: PPUSH
// result := value ;
50397: LD_ADDR_VAR 0 2
50401: PUSH
50402: LD_VAR 0 1
50406: ST_TO_ADDR
// if value < 0 then
50407: LD_VAR 0 1
50411: PUSH
50412: LD_INT 0
50414: LESS
50415: IFFALSE 50432
// result := value * - 1 ;
50417: LD_ADDR_VAR 0 2
50421: PUSH
50422: LD_VAR 0 1
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: MUL
50431: ST_TO_ADDR
// end ;
50432: LD_VAR 0 2
50436: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50437: LD_INT 0
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
// if not unit or not building then
50447: LD_VAR 0 1
50451: NOT
50452: IFTRUE 50461
50454: PUSH
50455: LD_VAR 0 2
50459: NOT
50460: OR
50461: IFFALSE 50465
// exit ;
50463: GO 50693
// x := GetX ( building ) ;
50465: LD_ADDR_VAR 0 4
50469: PUSH
50470: LD_VAR 0 2
50474: PPUSH
50475: CALL_OW 250
50479: ST_TO_ADDR
// y := GetY ( building ) ;
50480: LD_ADDR_VAR 0 6
50484: PUSH
50485: LD_VAR 0 2
50489: PPUSH
50490: CALL_OW 251
50494: ST_TO_ADDR
// d := GetDir ( building ) ;
50495: LD_ADDR_VAR 0 8
50499: PUSH
50500: LD_VAR 0 2
50504: PPUSH
50505: CALL_OW 254
50509: ST_TO_ADDR
// r := 4 ;
50510: LD_ADDR_VAR 0 9
50514: PUSH
50515: LD_INT 4
50517: ST_TO_ADDR
// for i := 1 to 5 do
50518: LD_ADDR_VAR 0 10
50522: PUSH
50523: DOUBLE
50524: LD_INT 1
50526: DEC
50527: ST_TO_ADDR
50528: LD_INT 5
50530: PUSH
50531: FOR_TO
50532: IFFALSE 50691
// begin _x := ShiftX ( x , d , r + i ) ;
50534: LD_ADDR_VAR 0 5
50538: PUSH
50539: LD_VAR 0 4
50543: PPUSH
50544: LD_VAR 0 8
50548: PPUSH
50549: LD_VAR 0 9
50553: PUSH
50554: LD_VAR 0 10
50558: PLUS
50559: PPUSH
50560: CALL_OW 272
50564: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50565: LD_ADDR_VAR 0 7
50569: PUSH
50570: LD_VAR 0 6
50574: PPUSH
50575: LD_VAR 0 8
50579: PPUSH
50580: LD_VAR 0 9
50584: PUSH
50585: LD_VAR 0 10
50589: PLUS
50590: PPUSH
50591: CALL_OW 273
50595: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50596: LD_VAR 0 5
50600: PPUSH
50601: LD_VAR 0 7
50605: PPUSH
50606: CALL_OW 488
50610: IFFALSE 50645
50612: PUSH
50613: LD_VAR 0 5
50617: PPUSH
50618: LD_VAR 0 7
50622: PPUSH
50623: CALL_OW 428
50627: PPUSH
50628: CALL_OW 247
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: IN
50643: NOT
50644: AND
50645: IFFALSE 50689
// begin ComMoveXY ( unit , _x , _y ) ;
50647: LD_VAR 0 1
50651: PPUSH
50652: LD_VAR 0 5
50656: PPUSH
50657: LD_VAR 0 7
50661: PPUSH
50662: CALL_OW 111
// result := [ _x , _y ] ;
50666: LD_ADDR_VAR 0 3
50670: PUSH
50671: LD_VAR 0 5
50675: PUSH
50676: LD_VAR 0 7
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: ST_TO_ADDR
// exit ;
50685: POP
50686: POP
50687: GO 50693
// end ; end ;
50689: GO 50531
50691: POP
50692: POP
// end ;
50693: LD_VAR 0 3
50697: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50698: LD_INT 0
50700: PPUSH
50701: PPUSH
50702: PPUSH
// result := 0 ;
50703: LD_ADDR_VAR 0 3
50707: PUSH
50708: LD_INT 0
50710: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50711: LD_VAR 0 1
50715: PUSH
50716: LD_INT 0
50718: LESS
50719: IFTRUE 50731
50721: PUSH
50722: LD_VAR 0 1
50726: PUSH
50727: LD_INT 8
50729: GREATER
50730: OR
50731: IFTRUE 50743
50733: PUSH
50734: LD_VAR 0 2
50738: PUSH
50739: LD_INT 0
50741: LESS
50742: OR
50743: IFTRUE 50755
50745: PUSH
50746: LD_VAR 0 2
50750: PUSH
50751: LD_INT 8
50753: GREATER
50754: OR
50755: IFFALSE 50759
// exit ;
50757: GO 50834
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50759: LD_ADDR_VAR 0 4
50763: PUSH
50764: LD_INT 22
50766: PUSH
50767: LD_VAR 0 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PPUSH
50776: CALL_OW 69
50780: PUSH
50781: FOR_IN
50782: IFFALSE 50832
// begin un := UnitShoot ( i ) ;
50784: LD_ADDR_VAR 0 5
50788: PUSH
50789: LD_VAR 0 4
50793: PPUSH
50794: CALL_OW 504
50798: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50799: LD_VAR 0 5
50803: PPUSH
50804: CALL_OW 255
50808: PUSH
50809: LD_VAR 0 1
50813: EQUAL
50814: IFFALSE 50830
// begin result := un ;
50816: LD_ADDR_VAR 0 3
50820: PUSH
50821: LD_VAR 0 5
50825: ST_TO_ADDR
// exit ;
50826: POP
50827: POP
50828: GO 50834
// end ; end ;
50830: GO 50781
50832: POP
50833: POP
// end ;
50834: LD_VAR 0 3
50838: RET
// export function GetCargoBay ( units ) ; begin
50839: LD_INT 0
50841: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50842: LD_ADDR_VAR 0 2
50846: PUSH
50847: LD_VAR 0 1
50851: PPUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 34
50857: PUSH
50858: LD_INT 12
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 34
50867: PUSH
50868: LD_INT 51
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 34
50877: PUSH
50878: LD_INT 32
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 34
50887: PUSH
50888: LD_INT 89
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: PPUSH
50902: CALL_OW 72
50906: ST_TO_ADDR
// end ;
50907: LD_VAR 0 2
50911: RET
// export function Negate ( value ) ; begin
50912: LD_INT 0
50914: PPUSH
// result := not value ;
50915: LD_ADDR_VAR 0 2
50919: PUSH
50920: LD_VAR 0 1
50924: NOT
50925: ST_TO_ADDR
// end ;
50926: LD_VAR 0 2
50930: RET
// export function Inc ( value ) ; begin
50931: LD_INT 0
50933: PPUSH
// result := value + 1 ;
50934: LD_ADDR_VAR 0 2
50938: PUSH
50939: LD_VAR 0 1
50943: PUSH
50944: LD_INT 1
50946: PLUS
50947: ST_TO_ADDR
// end ;
50948: LD_VAR 0 2
50952: RET
// export function Dec ( value ) ; begin
50953: LD_INT 0
50955: PPUSH
// result := value - 1 ;
50956: LD_ADDR_VAR 0 2
50960: PUSH
50961: LD_VAR 0 1
50965: PUSH
50966: LD_INT 1
50968: MINUS
50969: ST_TO_ADDR
// end ;
50970: LD_VAR 0 2
50974: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50975: LD_INT 0
50977: PPUSH
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50985: LD_VAR 0 1
50989: PPUSH
50990: LD_VAR 0 2
50994: PPUSH
50995: CALL_OW 488
50999: NOT
51000: IFTRUE 51019
51002: PUSH
51003: LD_VAR 0 3
51007: PPUSH
51008: LD_VAR 0 4
51012: PPUSH
51013: CALL_OW 488
51017: NOT
51018: OR
51019: IFFALSE 51032
// begin result := - 1 ;
51021: LD_ADDR_VAR 0 5
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: ST_TO_ADDR
// exit ;
51030: GO 51267
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51032: LD_ADDR_VAR 0 12
51036: PUSH
51037: LD_VAR 0 1
51041: PPUSH
51042: LD_VAR 0 2
51046: PPUSH
51047: LD_VAR 0 3
51051: PPUSH
51052: LD_VAR 0 4
51056: PPUSH
51057: CALL 50103 0 4
51061: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51062: LD_ADDR_VAR 0 11
51066: PUSH
51067: LD_VAR 0 1
51071: PPUSH
51072: LD_VAR 0 2
51076: PPUSH
51077: LD_VAR 0 12
51081: PUSH
51082: LD_INT 1
51084: ARRAY
51085: PPUSH
51086: LD_VAR 0 12
51090: PUSH
51091: LD_INT 2
51093: ARRAY
51094: PPUSH
51095: CALL_OW 298
51099: ST_TO_ADDR
// distance := 9999 ;
51100: LD_ADDR_VAR 0 10
51104: PUSH
51105: LD_INT 9999
51107: ST_TO_ADDR
// for i := 0 to 5 do
51108: LD_ADDR_VAR 0 6
51112: PUSH
51113: DOUBLE
51114: LD_INT 0
51116: DEC
51117: ST_TO_ADDR
51118: LD_INT 5
51120: PUSH
51121: FOR_TO
51122: IFFALSE 51265
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51124: LD_ADDR_VAR 0 7
51128: PUSH
51129: LD_VAR 0 1
51133: PPUSH
51134: LD_VAR 0 6
51138: PPUSH
51139: LD_VAR 0 11
51143: PPUSH
51144: CALL_OW 272
51148: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51149: LD_ADDR_VAR 0 8
51153: PUSH
51154: LD_VAR 0 2
51158: PPUSH
51159: LD_VAR 0 6
51163: PPUSH
51164: LD_VAR 0 11
51168: PPUSH
51169: CALL_OW 273
51173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51174: LD_VAR 0 7
51178: PPUSH
51179: LD_VAR 0 8
51183: PPUSH
51184: CALL_OW 488
51188: NOT
51189: IFFALSE 51193
// continue ;
51191: GO 51121
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51193: LD_ADDR_VAR 0 9
51197: PUSH
51198: LD_VAR 0 12
51202: PUSH
51203: LD_INT 1
51205: ARRAY
51206: PPUSH
51207: LD_VAR 0 12
51211: PUSH
51212: LD_INT 2
51214: ARRAY
51215: PPUSH
51216: LD_VAR 0 7
51220: PPUSH
51221: LD_VAR 0 8
51225: PPUSH
51226: CALL_OW 298
51230: ST_TO_ADDR
// if tmp < distance then
51231: LD_VAR 0 9
51235: PUSH
51236: LD_VAR 0 10
51240: LESS
51241: IFFALSE 51263
// begin result := i ;
51243: LD_ADDR_VAR 0 5
51247: PUSH
51248: LD_VAR 0 6
51252: ST_TO_ADDR
// distance := tmp ;
51253: LD_ADDR_VAR 0 10
51257: PUSH
51258: LD_VAR 0 9
51262: ST_TO_ADDR
// end ; end ;
51263: GO 51121
51265: POP
51266: POP
// end ;
51267: LD_VAR 0 5
51271: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51272: LD_INT 0
51274: PPUSH
51275: PPUSH
// if not driver or not IsInUnit ( driver ) then
51276: LD_VAR 0 1
51280: NOT
51281: IFTRUE 51295
51283: PUSH
51284: LD_VAR 0 1
51288: PPUSH
51289: CALL_OW 310
51293: NOT
51294: OR
51295: IFFALSE 51299
// exit ;
51297: GO 51389
// vehicle := IsInUnit ( driver ) ;
51299: LD_ADDR_VAR 0 3
51303: PUSH
51304: LD_VAR 0 1
51308: PPUSH
51309: CALL_OW 310
51313: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51314: LD_VAR 0 1
51318: PPUSH
51319: LD_STRING \
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: PUSH
51349: LD_STRING E
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_VAR 0 3
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PPUSH
51385: CALL_OW 446
// end ;
51389: LD_VAR 0 2
51393: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51394: LD_INT 0
51396: PPUSH
51397: PPUSH
// if not driver or not IsInUnit ( driver ) then
51398: LD_VAR 0 1
51402: NOT
51403: IFTRUE 51417
51405: PUSH
51406: LD_VAR 0 1
51410: PPUSH
51411: CALL_OW 310
51415: NOT
51416: OR
51417: IFFALSE 51421
// exit ;
51419: GO 51511
// vehicle := IsInUnit ( driver ) ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_VAR 0 1
51430: PPUSH
51431: CALL_OW 310
51435: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51436: LD_VAR 0 1
51440: PPUSH
51441: LD_STRING \
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: PUSH
51471: LD_STRING E
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_VAR 0 3
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PPUSH
51507: CALL_OW 447
// end ;
51511: LD_VAR 0 2
51515: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51516: LD_INT 0
51518: PPUSH
51519: PPUSH
51520: PPUSH
// tmp := [ ] ;
51521: LD_ADDR_VAR 0 5
51525: PUSH
51526: EMPTY
51527: ST_TO_ADDR
// for i in units do
51528: LD_ADDR_VAR 0 4
51532: PUSH
51533: LD_VAR 0 1
51537: PUSH
51538: FOR_IN
51539: IFFALSE 51577
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51541: LD_ADDR_VAR 0 5
51545: PUSH
51546: LD_VAR 0 5
51550: PPUSH
51551: LD_VAR 0 5
51555: PUSH
51556: LD_INT 1
51558: PLUS
51559: PPUSH
51560: LD_VAR 0 4
51564: PPUSH
51565: CALL_OW 256
51569: PPUSH
51570: CALL_OW 2
51574: ST_TO_ADDR
51575: GO 51538
51577: POP
51578: POP
// if not tmp then
51579: LD_VAR 0 5
51583: NOT
51584: IFFALSE 51588
// exit ;
51586: GO 51636
// if asc then
51588: LD_VAR 0 2
51592: IFFALSE 51616
// result := SortListByListAsc ( units , tmp ) else
51594: LD_ADDR_VAR 0 3
51598: PUSH
51599: LD_VAR 0 1
51603: PPUSH
51604: LD_VAR 0 5
51608: PPUSH
51609: CALL_OW 76
51613: ST_TO_ADDR
51614: GO 51636
// result := SortListByListDesc ( units , tmp ) ;
51616: LD_ADDR_VAR 0 3
51620: PUSH
51621: LD_VAR 0 1
51625: PPUSH
51626: LD_VAR 0 5
51630: PPUSH
51631: CALL_OW 77
51635: ST_TO_ADDR
// end ;
51636: LD_VAR 0 3
51640: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51641: LD_INT 0
51643: PPUSH
51644: PPUSH
// task := GetTaskList ( mech ) ;
51645: LD_ADDR_VAR 0 4
51649: PUSH
51650: LD_VAR 0 1
51654: PPUSH
51655: CALL_OW 437
51659: ST_TO_ADDR
// if not task then
51660: LD_VAR 0 4
51664: NOT
51665: IFFALSE 51669
// exit ;
51667: GO 51713
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51669: LD_ADDR_VAR 0 3
51673: PUSH
51674: LD_VAR 0 4
51678: PUSH
51679: LD_INT 1
51681: ARRAY
51682: PUSH
51683: LD_INT 1
51685: ARRAY
51686: PUSH
51687: LD_STRING r
51689: EQUAL
51690: IFFALSE 51712
51692: PUSH
51693: LD_VAR 0 4
51697: PUSH
51698: LD_INT 1
51700: ARRAY
51701: PUSH
51702: LD_INT 4
51704: ARRAY
51705: PUSH
51706: LD_VAR 0 2
51710: EQUAL
51711: AND
51712: ST_TO_ADDR
// end ;
51713: LD_VAR 0 3
51717: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51718: LD_INT 0
51720: PPUSH
// SetDir ( unit , d ) ;
51721: LD_VAR 0 1
51725: PPUSH
51726: LD_VAR 0 4
51730: PPUSH
51731: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51735: LD_ADDR_VAR 0 6
51739: PUSH
51740: LD_VAR 0 1
51744: PPUSH
51745: LD_VAR 0 2
51749: PPUSH
51750: LD_VAR 0 3
51754: PPUSH
51755: LD_VAR 0 5
51759: PPUSH
51760: CALL_OW 48
51764: ST_TO_ADDR
// end ;
51765: LD_VAR 0 6
51769: RET
// export function ToNaturalNumber ( number ) ; begin
51770: LD_INT 0
51772: PPUSH
// result := number div 1 ;
51773: LD_ADDR_VAR 0 2
51777: PUSH
51778: LD_VAR 0 1
51782: PUSH
51783: LD_INT 1
51785: DIV
51786: ST_TO_ADDR
// if number < 0 then
51787: LD_VAR 0 1
51791: PUSH
51792: LD_INT 0
51794: LESS
51795: IFFALSE 51805
// result := 0 ;
51797: LD_ADDR_VAR 0 2
51801: PUSH
51802: LD_INT 0
51804: ST_TO_ADDR
// end ;
51805: LD_VAR 0 2
51809: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51810: LD_INT 0
51812: PPUSH
51813: PPUSH
51814: PPUSH
// if not buildings then
51815: LD_VAR 0 1
51819: NOT
51820: IFFALSE 51824
// exit ;
51822: GO 51939
// tmp := [ ] ;
51824: LD_ADDR_VAR 0 5
51828: PUSH
51829: EMPTY
51830: ST_TO_ADDR
// for b in buildings do
51831: LD_ADDR_VAR 0 4
51835: PUSH
51836: LD_VAR 0 1
51840: PUSH
51841: FOR_IN
51842: IFFALSE 51880
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51844: LD_ADDR_VAR 0 5
51848: PUSH
51849: LD_VAR 0 5
51853: PPUSH
51854: LD_VAR 0 5
51858: PUSH
51859: LD_INT 1
51861: PLUS
51862: PPUSH
51863: LD_VAR 0 4
51867: PPUSH
51868: CALL_OW 266
51872: PPUSH
51873: CALL_OW 1
51877: ST_TO_ADDR
51878: GO 51841
51880: POP
51881: POP
// if not tmp then
51882: LD_VAR 0 5
51886: NOT
51887: IFFALSE 51891
// exit ;
51889: GO 51939
// if asc then
51891: LD_VAR 0 2
51895: IFFALSE 51919
// result := SortListByListAsc ( buildings , tmp ) else
51897: LD_ADDR_VAR 0 3
51901: PUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: LD_VAR 0 5
51911: PPUSH
51912: CALL_OW 76
51916: ST_TO_ADDR
51917: GO 51939
// result := SortListByListDesc ( buildings , tmp ) ;
51919: LD_ADDR_VAR 0 3
51923: PUSH
51924: LD_VAR 0 1
51928: PPUSH
51929: LD_VAR 0 5
51933: PPUSH
51934: CALL_OW 77
51938: ST_TO_ADDR
// end ;
51939: LD_VAR 0 3
51943: RET
// export function SortByClass ( units , class ) ; var un ; begin
51944: LD_INT 0
51946: PPUSH
51947: PPUSH
// if not units or not class then
51948: LD_VAR 0 1
51952: NOT
51953: IFTRUE 51962
51955: PUSH
51956: LD_VAR 0 2
51960: NOT
51961: OR
51962: IFFALSE 51966
// exit ;
51964: GO 52061
// result := [ ] ;
51966: LD_ADDR_VAR 0 3
51970: PUSH
51971: EMPTY
51972: ST_TO_ADDR
// for un in units do
51973: LD_ADDR_VAR 0 4
51977: PUSH
51978: LD_VAR 0 1
51982: PUSH
51983: FOR_IN
51984: IFFALSE 52059
// if GetClass ( un ) = class then
51986: LD_VAR 0 4
51990: PPUSH
51991: CALL_OW 257
51995: PUSH
51996: LD_VAR 0 2
52000: EQUAL
52001: IFFALSE 52028
// result := Insert ( result , 1 , un ) else
52003: LD_ADDR_VAR 0 3
52007: PUSH
52008: LD_VAR 0 3
52012: PPUSH
52013: LD_INT 1
52015: PPUSH
52016: LD_VAR 0 4
52020: PPUSH
52021: CALL_OW 2
52025: ST_TO_ADDR
52026: GO 52057
// result := Replace ( result , result + 1 , un ) ;
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_VAR 0 3
52037: PPUSH
52038: LD_VAR 0 3
52042: PUSH
52043: LD_INT 1
52045: PLUS
52046: PPUSH
52047: LD_VAR 0 4
52051: PPUSH
52052: CALL_OW 1
52056: ST_TO_ADDR
52057: GO 51983
52059: POP
52060: POP
// end ;
52061: LD_VAR 0 3
52065: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52066: LD_INT 0
52068: PPUSH
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
// result := [ ] ;
52075: LD_ADDR_VAR 0 4
52079: PUSH
52080: EMPTY
52081: ST_TO_ADDR
// if x - r < 0 then
52082: LD_VAR 0 1
52086: PUSH
52087: LD_VAR 0 3
52091: MINUS
52092: PUSH
52093: LD_INT 0
52095: LESS
52096: IFFALSE 52108
// min_x := 0 else
52098: LD_ADDR_VAR 0 8
52102: PUSH
52103: LD_INT 0
52105: ST_TO_ADDR
52106: GO 52124
// min_x := x - r ;
52108: LD_ADDR_VAR 0 8
52112: PUSH
52113: LD_VAR 0 1
52117: PUSH
52118: LD_VAR 0 3
52122: MINUS
52123: ST_TO_ADDR
// if y - r < 0 then
52124: LD_VAR 0 2
52128: PUSH
52129: LD_VAR 0 3
52133: MINUS
52134: PUSH
52135: LD_INT 0
52137: LESS
52138: IFFALSE 52150
// min_y := 0 else
52140: LD_ADDR_VAR 0 7
52144: PUSH
52145: LD_INT 0
52147: ST_TO_ADDR
52148: GO 52166
// min_y := y - r ;
52150: LD_ADDR_VAR 0 7
52154: PUSH
52155: LD_VAR 0 2
52159: PUSH
52160: LD_VAR 0 3
52164: MINUS
52165: ST_TO_ADDR
// max_x := x + r ;
52166: LD_ADDR_VAR 0 9
52170: PUSH
52171: LD_VAR 0 1
52175: PUSH
52176: LD_VAR 0 3
52180: PLUS
52181: ST_TO_ADDR
// max_y := y + r ;
52182: LD_ADDR_VAR 0 10
52186: PUSH
52187: LD_VAR 0 2
52191: PUSH
52192: LD_VAR 0 3
52196: PLUS
52197: ST_TO_ADDR
// for _x = min_x to max_x do
52198: LD_ADDR_VAR 0 5
52202: PUSH
52203: DOUBLE
52204: LD_VAR 0 8
52208: DEC
52209: ST_TO_ADDR
52210: LD_VAR 0 9
52214: PUSH
52215: FOR_TO
52216: IFFALSE 52317
// for _y = min_y to max_y do
52218: LD_ADDR_VAR 0 6
52222: PUSH
52223: DOUBLE
52224: LD_VAR 0 7
52228: DEC
52229: ST_TO_ADDR
52230: LD_VAR 0 10
52234: PUSH
52235: FOR_TO
52236: IFFALSE 52313
// begin if not ValidHex ( _x , _y ) then
52238: LD_VAR 0 5
52242: PPUSH
52243: LD_VAR 0 6
52247: PPUSH
52248: CALL_OW 488
52252: NOT
52253: IFFALSE 52257
// continue ;
52255: GO 52235
// if GetResourceTypeXY ( _x , _y ) then
52257: LD_VAR 0 5
52261: PPUSH
52262: LD_VAR 0 6
52266: PPUSH
52267: CALL_OW 283
52271: IFFALSE 52311
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52273: LD_ADDR_VAR 0 4
52277: PUSH
52278: LD_VAR 0 4
52282: PPUSH
52283: LD_VAR 0 4
52287: PUSH
52288: LD_INT 1
52290: PLUS
52291: PPUSH
52292: LD_VAR 0 5
52296: PUSH
52297: LD_VAR 0 6
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PPUSH
52306: CALL_OW 1
52310: ST_TO_ADDR
// end ;
52311: GO 52235
52313: POP
52314: POP
52315: GO 52215
52317: POP
52318: POP
// end ;
52319: LD_VAR 0 4
52323: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52324: LD_INT 0
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
// if not units then
52334: LD_VAR 0 1
52338: NOT
52339: IFFALSE 52343
// exit ;
52341: GO 52875
// result := UnitFilter ( units , [ f_ok ] ) ;
52343: LD_ADDR_VAR 0 3
52347: PUSH
52348: LD_VAR 0 1
52352: PPUSH
52353: LD_INT 50
52355: PUSH
52356: EMPTY
52357: LIST
52358: PPUSH
52359: CALL_OW 72
52363: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52364: LD_ADDR_VAR 0 8
52368: PUSH
52369: LD_VAR 0 1
52373: PUSH
52374: LD_INT 1
52376: ARRAY
52377: PPUSH
52378: CALL_OW 255
52382: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52383: LD_ADDR_VAR 0 10
52387: PUSH
52388: LD_INT 29
52390: PUSH
52391: LD_INT 91
52393: PUSH
52394: LD_INT 49
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: ST_TO_ADDR
// if not result then
52402: LD_VAR 0 3
52406: NOT
52407: IFFALSE 52411
// exit ;
52409: GO 52875
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52411: LD_ADDR_VAR 0 5
52415: PUSH
52416: LD_INT 81
52418: PUSH
52419: LD_VAR 0 8
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PPUSH
52428: CALL_OW 69
52432: ST_TO_ADDR
// for i in result do
52433: LD_ADDR_VAR 0 4
52437: PUSH
52438: LD_VAR 0 3
52442: PUSH
52443: FOR_IN
52444: IFFALSE 52873
// begin tag := GetTag ( i ) + 1 ;
52446: LD_ADDR_VAR 0 9
52450: PUSH
52451: LD_VAR 0 4
52455: PPUSH
52456: CALL_OW 110
52460: PUSH
52461: LD_INT 1
52463: PLUS
52464: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52465: LD_ADDR_VAR 0 7
52469: PUSH
52470: LD_VAR 0 4
52474: PPUSH
52475: CALL_OW 250
52479: PPUSH
52480: LD_VAR 0 4
52484: PPUSH
52485: CALL_OW 251
52489: PPUSH
52490: LD_INT 4
52492: PPUSH
52493: CALL 52066 0 3
52497: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52498: LD_VAR 0 4
52502: PPUSH
52503: CALL_OW 247
52507: PUSH
52508: LD_INT 2
52510: EQUAL
52511: IFFALSE 52523
52513: PUSH
52514: LD_VAR 0 7
52518: PUSH
52519: LD_INT 2
52521: GREATER
52522: AND
52523: IFFALSE 52543
52525: PUSH
52526: LD_VAR 0 4
52530: PPUSH
52531: CALL_OW 264
52535: PUSH
52536: LD_VAR 0 10
52540: IN
52541: NOT
52542: AND
52543: IFFALSE 52582
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52545: LD_VAR 0 4
52549: PPUSH
52550: LD_VAR 0 7
52554: PUSH
52555: LD_INT 1
52557: ARRAY
52558: PUSH
52559: LD_INT 1
52561: ARRAY
52562: PPUSH
52563: LD_VAR 0 7
52567: PUSH
52568: LD_INT 1
52570: ARRAY
52571: PUSH
52572: LD_INT 2
52574: ARRAY
52575: PPUSH
52576: CALL_OW 116
52580: GO 52871
// if path > tag then
52582: LD_VAR 0 2
52586: PUSH
52587: LD_VAR 0 9
52591: GREATER
52592: IFFALSE 52800
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52594: LD_ADDR_VAR 0 6
52598: PUSH
52599: LD_VAR 0 5
52603: PPUSH
52604: LD_INT 91
52606: PUSH
52607: LD_VAR 0 4
52611: PUSH
52612: LD_INT 8
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: PPUSH
52620: CALL_OW 72
52624: ST_TO_ADDR
// if nearEnemy then
52625: LD_VAR 0 6
52629: IFFALSE 52698
// begin if GetWeapon ( i ) = ru_time_lapser then
52631: LD_VAR 0 4
52635: PPUSH
52636: CALL_OW 264
52640: PUSH
52641: LD_INT 49
52643: EQUAL
52644: IFFALSE 52672
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52646: LD_VAR 0 4
52650: PPUSH
52651: LD_VAR 0 6
52655: PPUSH
52656: LD_VAR 0 4
52660: PPUSH
52661: CALL_OW 74
52665: PPUSH
52666: CALL_OW 112
52670: GO 52696
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52672: LD_VAR 0 4
52676: PPUSH
52677: LD_VAR 0 6
52681: PPUSH
52682: LD_VAR 0 4
52686: PPUSH
52687: CALL_OW 74
52691: PPUSH
52692: CALL 53956 0 2
// end else
52696: GO 52798
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52698: LD_VAR 0 4
52702: PPUSH
52703: LD_VAR 0 2
52707: PUSH
52708: LD_VAR 0 9
52712: ARRAY
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: PPUSH
52718: LD_VAR 0 2
52722: PUSH
52723: LD_VAR 0 9
52727: ARRAY
52728: PUSH
52729: LD_INT 2
52731: ARRAY
52732: PPUSH
52733: CALL_OW 297
52737: PUSH
52738: LD_INT 6
52740: GREATER
52741: IFFALSE 52784
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52743: LD_VAR 0 4
52747: PPUSH
52748: LD_VAR 0 2
52752: PUSH
52753: LD_VAR 0 9
52757: ARRAY
52758: PUSH
52759: LD_INT 1
52761: ARRAY
52762: PPUSH
52763: LD_VAR 0 2
52767: PUSH
52768: LD_VAR 0 9
52772: ARRAY
52773: PUSH
52774: LD_INT 2
52776: ARRAY
52777: PPUSH
52778: CALL_OW 114
52782: GO 52798
// SetTag ( i , tag ) ;
52784: LD_VAR 0 4
52788: PPUSH
52789: LD_VAR 0 9
52793: PPUSH
52794: CALL_OW 109
// end else
52798: GO 52871
// if enemy then
52800: LD_VAR 0 5
52804: IFFALSE 52871
// begin if GetWeapon ( i ) = ru_time_lapser then
52806: LD_VAR 0 4
52810: PPUSH
52811: CALL_OW 264
52815: PUSH
52816: LD_INT 49
52818: EQUAL
52819: IFFALSE 52847
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52821: LD_VAR 0 4
52825: PPUSH
52826: LD_VAR 0 5
52830: PPUSH
52831: LD_VAR 0 4
52835: PPUSH
52836: CALL_OW 74
52840: PPUSH
52841: CALL_OW 112
52845: GO 52871
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52847: LD_VAR 0 4
52851: PPUSH
52852: LD_VAR 0 5
52856: PPUSH
52857: LD_VAR 0 4
52861: PPUSH
52862: CALL_OW 74
52866: PPUSH
52867: CALL 53956 0 2
// end ; end ;
52871: GO 52443
52873: POP
52874: POP
// end ;
52875: LD_VAR 0 3
52879: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52880: LD_INT 0
52882: PPUSH
52883: PPUSH
52884: PPUSH
// if not unit or IsInUnit ( unit ) then
52885: LD_VAR 0 1
52889: NOT
52890: IFTRUE 52903
52892: PUSH
52893: LD_VAR 0 1
52897: PPUSH
52898: CALL_OW 310
52902: OR
52903: IFFALSE 52907
// exit ;
52905: GO 52998
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52907: LD_ADDR_VAR 0 4
52911: PUSH
52912: LD_VAR 0 1
52916: PPUSH
52917: CALL_OW 250
52921: PPUSH
52922: LD_VAR 0 2
52926: PPUSH
52927: LD_INT 1
52929: PPUSH
52930: CALL_OW 272
52934: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52935: LD_ADDR_VAR 0 5
52939: PUSH
52940: LD_VAR 0 1
52944: PPUSH
52945: CALL_OW 251
52949: PPUSH
52950: LD_VAR 0 2
52954: PPUSH
52955: LD_INT 1
52957: PPUSH
52958: CALL_OW 273
52962: ST_TO_ADDR
// if ValidHex ( x , y ) then
52963: LD_VAR 0 4
52967: PPUSH
52968: LD_VAR 0 5
52972: PPUSH
52973: CALL_OW 488
52977: IFFALSE 52998
// ComTurnXY ( unit , x , y ) ;
52979: LD_VAR 0 1
52983: PPUSH
52984: LD_VAR 0 4
52988: PPUSH
52989: LD_VAR 0 5
52993: PPUSH
52994: CALL_OW 118
// end ;
52998: LD_VAR 0 3
53002: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53003: LD_INT 0
53005: PPUSH
53006: PPUSH
// result := false ;
53007: LD_ADDR_VAR 0 3
53011: PUSH
53012: LD_INT 0
53014: ST_TO_ADDR
// if not units then
53015: LD_VAR 0 2
53019: NOT
53020: IFFALSE 53024
// exit ;
53022: GO 53069
// for i in units do
53024: LD_ADDR_VAR 0 4
53028: PUSH
53029: LD_VAR 0 2
53033: PUSH
53034: FOR_IN
53035: IFFALSE 53067
// if See ( side , i ) then
53037: LD_VAR 0 1
53041: PPUSH
53042: LD_VAR 0 4
53046: PPUSH
53047: CALL_OW 292
53051: IFFALSE 53065
// begin result := true ;
53053: LD_ADDR_VAR 0 3
53057: PUSH
53058: LD_INT 1
53060: ST_TO_ADDR
// exit ;
53061: POP
53062: POP
53063: GO 53069
// end ;
53065: GO 53034
53067: POP
53068: POP
// end ;
53069: LD_VAR 0 3
53073: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53074: LD_INT 0
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
// if not unit or not points then
53080: LD_VAR 0 1
53084: NOT
53085: IFTRUE 53094
53087: PUSH
53088: LD_VAR 0 2
53092: NOT
53093: OR
53094: IFFALSE 53098
// exit ;
53096: GO 53188
// dist := 99999 ;
53098: LD_ADDR_VAR 0 5
53102: PUSH
53103: LD_INT 99999
53105: ST_TO_ADDR
// for i in points do
53106: LD_ADDR_VAR 0 4
53110: PUSH
53111: LD_VAR 0 2
53115: PUSH
53116: FOR_IN
53117: IFFALSE 53186
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53119: LD_ADDR_VAR 0 6
53123: PUSH
53124: LD_VAR 0 1
53128: PPUSH
53129: LD_VAR 0 4
53133: PUSH
53134: LD_INT 1
53136: ARRAY
53137: PPUSH
53138: LD_VAR 0 4
53142: PUSH
53143: LD_INT 2
53145: ARRAY
53146: PPUSH
53147: CALL_OW 297
53151: ST_TO_ADDR
// if tmpDist < dist then
53152: LD_VAR 0 6
53156: PUSH
53157: LD_VAR 0 5
53161: LESS
53162: IFFALSE 53184
// begin result := i ;
53164: LD_ADDR_VAR 0 3
53168: PUSH
53169: LD_VAR 0 4
53173: ST_TO_ADDR
// dist := tmpDist ;
53174: LD_ADDR_VAR 0 5
53178: PUSH
53179: LD_VAR 0 6
53183: ST_TO_ADDR
// end ; end ;
53184: GO 53116
53186: POP
53187: POP
// end ;
53188: LD_VAR 0 3
53192: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53193: LD_INT 0
53195: PPUSH
// uc_side := side ;
53196: LD_ADDR_OWVAR 20
53200: PUSH
53201: LD_VAR 0 1
53205: ST_TO_ADDR
// uc_nation := 3 ;
53206: LD_ADDR_OWVAR 21
53210: PUSH
53211: LD_INT 3
53213: ST_TO_ADDR
// vc_chassis := 25 ;
53214: LD_ADDR_OWVAR 37
53218: PUSH
53219: LD_INT 25
53221: ST_TO_ADDR
// vc_engine := engine_siberite ;
53222: LD_ADDR_OWVAR 39
53226: PUSH
53227: LD_INT 3
53229: ST_TO_ADDR
// vc_control := control_computer ;
53230: LD_ADDR_OWVAR 38
53234: PUSH
53235: LD_INT 3
53237: ST_TO_ADDR
// vc_weapon := 59 ;
53238: LD_ADDR_OWVAR 40
53242: PUSH
53243: LD_INT 59
53245: ST_TO_ADDR
// result := CreateVehicle ;
53246: LD_ADDR_VAR 0 5
53250: PUSH
53251: CALL_OW 45
53255: ST_TO_ADDR
// SetDir ( result , d ) ;
53256: LD_VAR 0 5
53260: PPUSH
53261: LD_VAR 0 4
53265: PPUSH
53266: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53270: LD_VAR 0 5
53274: PPUSH
53275: LD_VAR 0 2
53279: PPUSH
53280: LD_VAR 0 3
53284: PPUSH
53285: LD_INT 0
53287: PPUSH
53288: CALL_OW 48
// end ;
53292: LD_VAR 0 5
53296: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53297: LD_INT 0
53299: PPUSH
53300: PPUSH
53301: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53302: LD_ADDR_VAR 0 2
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53325: LD_VAR 0 1
53329: NOT
53330: IFTRUE 53363
53332: PUSH
53333: LD_VAR 0 1
53337: PPUSH
53338: CALL_OW 264
53342: PUSH
53343: LD_INT 12
53345: PUSH
53346: LD_INT 51
53348: PUSH
53349: LD_INT 32
53351: PUSH
53352: LD_INT 89
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: IN
53361: NOT
53362: OR
53363: IFFALSE 53367
// exit ;
53365: GO 53465
// for i := 1 to 3 do
53367: LD_ADDR_VAR 0 3
53371: PUSH
53372: DOUBLE
53373: LD_INT 1
53375: DEC
53376: ST_TO_ADDR
53377: LD_INT 3
53379: PUSH
53380: FOR_TO
53381: IFFALSE 53463
// begin tmp := GetCargo ( cargo , i ) ;
53383: LD_ADDR_VAR 0 4
53387: PUSH
53388: LD_VAR 0 1
53392: PPUSH
53393: LD_VAR 0 3
53397: PPUSH
53398: CALL_OW 289
53402: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53403: LD_ADDR_VAR 0 2
53407: PUSH
53408: LD_VAR 0 2
53412: PPUSH
53413: LD_VAR 0 3
53417: PPUSH
53418: LD_VAR 0 4
53422: PPUSH
53423: CALL_OW 1
53427: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53428: LD_ADDR_VAR 0 2
53432: PUSH
53433: LD_VAR 0 2
53437: PPUSH
53438: LD_INT 4
53440: PPUSH
53441: LD_VAR 0 2
53445: PUSH
53446: LD_INT 4
53448: ARRAY
53449: PUSH
53450: LD_VAR 0 4
53454: PLUS
53455: PPUSH
53456: CALL_OW 1
53460: ST_TO_ADDR
// end ;
53461: GO 53380
53463: POP
53464: POP
// end ;
53465: LD_VAR 0 2
53469: RET
// export function Length ( array ) ; begin
53470: LD_INT 0
53472: PPUSH
// result := array + 0 ;
53473: LD_ADDR_VAR 0 2
53477: PUSH
53478: LD_VAR 0 1
53482: PUSH
53483: LD_INT 0
53485: PLUS
53486: ST_TO_ADDR
// end ;
53487: LD_VAR 0 2
53491: RET
// export function PrepareArray ( array ) ; begin
53492: LD_INT 0
53494: PPUSH
// result := array diff 0 ;
53495: LD_ADDR_VAR 0 2
53499: PUSH
53500: LD_VAR 0 1
53504: PUSH
53505: LD_INT 0
53507: DIFF
53508: ST_TO_ADDR
// if not result [ 1 ] then
53509: LD_VAR 0 2
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: NOT
53518: IFFALSE 53538
// result := Delete ( result , 1 ) ;
53520: LD_ADDR_VAR 0 2
53524: PUSH
53525: LD_VAR 0 2
53529: PPUSH
53530: LD_INT 1
53532: PPUSH
53533: CALL_OW 3
53537: ST_TO_ADDR
// end ;
53538: LD_VAR 0 2
53542: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53543: LD_INT 0
53545: PPUSH
53546: PPUSH
53547: PPUSH
53548: PPUSH
// sibRocketRange := 25 ;
53549: LD_ADDR_VAR 0 6
53553: PUSH
53554: LD_INT 25
53556: ST_TO_ADDR
// result := false ;
53557: LD_ADDR_VAR 0 4
53561: PUSH
53562: LD_INT 0
53564: ST_TO_ADDR
// for i := 0 to 5 do
53565: LD_ADDR_VAR 0 5
53569: PUSH
53570: DOUBLE
53571: LD_INT 0
53573: DEC
53574: ST_TO_ADDR
53575: LD_INT 5
53577: PUSH
53578: FOR_TO
53579: IFFALSE 53646
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53581: LD_VAR 0 1
53585: PPUSH
53586: LD_VAR 0 5
53590: PPUSH
53591: LD_VAR 0 6
53595: PPUSH
53596: CALL_OW 272
53600: PPUSH
53601: LD_VAR 0 2
53605: PPUSH
53606: LD_VAR 0 5
53610: PPUSH
53611: LD_VAR 0 6
53615: PPUSH
53616: CALL_OW 273
53620: PPUSH
53621: LD_VAR 0 3
53625: PPUSH
53626: CALL_OW 309
53630: IFFALSE 53644
// begin result := true ;
53632: LD_ADDR_VAR 0 4
53636: PUSH
53637: LD_INT 1
53639: ST_TO_ADDR
// exit ;
53640: POP
53641: POP
53642: GO 53648
// end ;
53644: GO 53578
53646: POP
53647: POP
// end ;
53648: LD_VAR 0 4
53652: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53653: LD_INT 0
53655: PPUSH
53656: PPUSH
53657: PPUSH
// if btype = b_depot then
53658: LD_VAR 0 2
53662: PUSH
53663: LD_INT 0
53665: EQUAL
53666: IFFALSE 53678
// begin result := true ;
53668: LD_ADDR_VAR 0 3
53672: PUSH
53673: LD_INT 1
53675: ST_TO_ADDR
// exit ;
53676: GO 53798
// end ; pom := GetBase ( depot ) ;
53678: LD_ADDR_VAR 0 4
53682: PUSH
53683: LD_VAR 0 1
53687: PPUSH
53688: CALL_OW 274
53692: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53693: LD_ADDR_VAR 0 5
53697: PUSH
53698: LD_VAR 0 2
53702: PPUSH
53703: LD_VAR 0 1
53707: PPUSH
53708: CALL_OW 248
53712: PPUSH
53713: CALL_OW 450
53717: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53718: LD_ADDR_VAR 0 3
53722: PUSH
53723: LD_VAR 0 4
53727: PPUSH
53728: LD_INT 1
53730: PPUSH
53731: CALL_OW 275
53735: PUSH
53736: LD_VAR 0 5
53740: PUSH
53741: LD_INT 1
53743: ARRAY
53744: GREATEREQUAL
53745: IFFALSE 53771
53747: PUSH
53748: LD_VAR 0 4
53752: PPUSH
53753: LD_INT 2
53755: PPUSH
53756: CALL_OW 275
53760: PUSH
53761: LD_VAR 0 5
53765: PUSH
53766: LD_INT 2
53768: ARRAY
53769: GREATEREQUAL
53770: AND
53771: IFFALSE 53797
53773: PUSH
53774: LD_VAR 0 4
53778: PPUSH
53779: LD_INT 3
53781: PPUSH
53782: CALL_OW 275
53786: PUSH
53787: LD_VAR 0 5
53791: PUSH
53792: LD_INT 3
53794: ARRAY
53795: GREATEREQUAL
53796: AND
53797: ST_TO_ADDR
// end ;
53798: LD_VAR 0 3
53802: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53803: LD_INT 0
53805: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53806: LD_VAR 0 1
53810: PPUSH
53811: LD_VAR 0 2
53815: PPUSH
53816: LD_INT 0
53818: PPUSH
53819: LD_INT 0
53821: PPUSH
53822: LD_INT 1
53824: PPUSH
53825: LD_INT 0
53827: PPUSH
53828: CALL_OW 587
// end ;
53832: LD_VAR 0 3
53836: RET
// export function CenterOnNow ( unit ) ; begin
53837: LD_INT 0
53839: PPUSH
// result := IsInUnit ( unit ) ;
53840: LD_ADDR_VAR 0 2
53844: PUSH
53845: LD_VAR 0 1
53849: PPUSH
53850: CALL_OW 310
53854: ST_TO_ADDR
// if not result then
53855: LD_VAR 0 2
53859: NOT
53860: IFFALSE 53872
// result := unit ;
53862: LD_ADDR_VAR 0 2
53866: PUSH
53867: LD_VAR 0 1
53871: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53872: LD_VAR 0 1
53876: PPUSH
53877: CALL_OW 87
// end ;
53881: LD_VAR 0 2
53885: RET
// export function ComMoveHex ( unit , hex ) ; begin
53886: LD_INT 0
53888: PPUSH
// if not hex then
53889: LD_VAR 0 2
53893: NOT
53894: IFFALSE 53898
// exit ;
53896: GO 53951
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53898: LD_VAR 0 2
53902: PUSH
53903: LD_INT 1
53905: ARRAY
53906: PPUSH
53907: LD_VAR 0 2
53911: PUSH
53912: LD_INT 2
53914: ARRAY
53915: PPUSH
53916: CALL_OW 428
53920: IFFALSE 53924
// exit ;
53922: GO 53951
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53924: LD_VAR 0 1
53928: PPUSH
53929: LD_VAR 0 2
53933: PUSH
53934: LD_INT 1
53936: ARRAY
53937: PPUSH
53938: LD_VAR 0 2
53942: PUSH
53943: LD_INT 2
53945: ARRAY
53946: PPUSH
53947: CALL_OW 111
// end ;
53951: LD_VAR 0 3
53955: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53956: LD_INT 0
53958: PPUSH
53959: PPUSH
53960: PPUSH
// if not unit or not enemy then
53961: LD_VAR 0 1
53965: NOT
53966: IFTRUE 53975
53968: PUSH
53969: LD_VAR 0 2
53973: NOT
53974: OR
53975: IFFALSE 53979
// exit ;
53977: GO 54105
// x := GetX ( enemy ) ;
53979: LD_ADDR_VAR 0 4
53983: PUSH
53984: LD_VAR 0 2
53988: PPUSH
53989: CALL_OW 250
53993: ST_TO_ADDR
// y := GetY ( enemy ) ;
53994: LD_ADDR_VAR 0 5
53998: PUSH
53999: LD_VAR 0 2
54003: PPUSH
54004: CALL_OW 251
54008: ST_TO_ADDR
// if ValidHex ( x , y ) then
54009: LD_VAR 0 4
54013: PPUSH
54014: LD_VAR 0 5
54018: PPUSH
54019: CALL_OW 488
54023: IFFALSE 54105
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54025: LD_VAR 0 2
54029: PPUSH
54030: CALL_OW 247
54034: PUSH
54035: LD_INT 3
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: IN
54045: IFTRUE 54068
54047: PUSH
54048: LD_VAR 0 1
54052: PPUSH
54053: CALL_OW 255
54057: PPUSH
54058: LD_VAR 0 2
54062: PPUSH
54063: CALL_OW 292
54067: OR
54068: IFFALSE 54086
// ComAttackUnit ( unit , enemy ) else
54070: LD_VAR 0 1
54074: PPUSH
54075: LD_VAR 0 2
54079: PPUSH
54080: CALL_OW 115
54084: GO 54105
// ComAgressiveMove ( unit , x , y ) ;
54086: LD_VAR 0 1
54090: PPUSH
54091: LD_VAR 0 4
54095: PPUSH
54096: LD_VAR 0 5
54100: PPUSH
54101: CALL_OW 114
// end ;
54105: LD_VAR 0 3
54109: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54110: LD_INT 0
54112: PPUSH
54113: PPUSH
54114: PPUSH
// list := AreaToList ( area , 0 ) ;
54115: LD_ADDR_VAR 0 5
54119: PUSH
54120: LD_VAR 0 1
54124: PPUSH
54125: LD_INT 0
54127: PPUSH
54128: CALL_OW 517
54132: ST_TO_ADDR
// if not list then
54133: LD_VAR 0 5
54137: NOT
54138: IFFALSE 54142
// exit ;
54140: GO 54272
// if all then
54142: LD_VAR 0 2
54146: IFFALSE 54234
// begin for i := 1 to list [ 1 ] do
54148: LD_ADDR_VAR 0 4
54152: PUSH
54153: DOUBLE
54154: LD_INT 1
54156: DEC
54157: ST_TO_ADDR
54158: LD_VAR 0 5
54162: PUSH
54163: LD_INT 1
54165: ARRAY
54166: PUSH
54167: FOR_TO
54168: IFFALSE 54230
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54170: LD_ADDR_VAR 0 3
54174: PUSH
54175: LD_VAR 0 3
54179: PPUSH
54180: LD_VAR 0 3
54184: PUSH
54185: LD_INT 1
54187: PLUS
54188: PPUSH
54189: LD_VAR 0 5
54193: PUSH
54194: LD_INT 1
54196: ARRAY
54197: PUSH
54198: LD_VAR 0 4
54202: ARRAY
54203: PUSH
54204: LD_VAR 0 5
54208: PUSH
54209: LD_INT 2
54211: ARRAY
54212: PUSH
54213: LD_VAR 0 4
54217: ARRAY
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PPUSH
54223: CALL_OW 1
54227: ST_TO_ADDR
54228: GO 54167
54230: POP
54231: POP
// exit ;
54232: GO 54272
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54234: LD_ADDR_VAR 0 3
54238: PUSH
54239: LD_VAR 0 5
54243: PUSH
54244: LD_INT 1
54246: ARRAY
54247: PUSH
54248: LD_INT 1
54250: ARRAY
54251: PUSH
54252: LD_VAR 0 5
54256: PUSH
54257: LD_INT 2
54259: ARRAY
54260: PUSH
54261: LD_INT 1
54263: ARRAY
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: EMPTY
54270: LIST
54271: ST_TO_ADDR
// end ;
54272: LD_VAR 0 3
54276: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54277: LD_INT 0
54279: PPUSH
54280: PPUSH
// list := AreaToList ( area , 0 ) ;
54281: LD_ADDR_VAR 0 4
54285: PUSH
54286: LD_VAR 0 1
54290: PPUSH
54291: LD_INT 0
54293: PPUSH
54294: CALL_OW 517
54298: ST_TO_ADDR
// if not list then
54299: LD_VAR 0 4
54303: NOT
54304: IFFALSE 54308
// exit ;
54306: GO 54349
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54308: LD_ADDR_VAR 0 3
54312: PUSH
54313: LD_VAR 0 4
54317: PUSH
54318: LD_INT 1
54320: ARRAY
54321: PUSH
54322: LD_INT 1
54324: ARRAY
54325: PUSH
54326: LD_VAR 0 4
54330: PUSH
54331: LD_INT 2
54333: ARRAY
54334: PUSH
54335: LD_INT 1
54337: ARRAY
54338: PUSH
54339: LD_VAR 0 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// end ;
54349: LD_VAR 0 3
54353: RET
// export function First ( array ) ; begin
54354: LD_INT 0
54356: PPUSH
// if not array then
54357: LD_VAR 0 1
54361: NOT
54362: IFFALSE 54366
// exit ;
54364: GO 54380
// result := array [ 1 ] ;
54366: LD_ADDR_VAR 0 2
54370: PUSH
54371: LD_VAR 0 1
54375: PUSH
54376: LD_INT 1
54378: ARRAY
54379: ST_TO_ADDR
// end ;
54380: LD_VAR 0 2
54384: RET
// export function Last ( array ) ; begin
54385: LD_INT 0
54387: PPUSH
// if not array then
54388: LD_VAR 0 1
54392: NOT
54393: IFFALSE 54397
// exit ;
54395: GO 54413
// result := array [ array ] ;
54397: LD_ADDR_VAR 0 2
54401: PUSH
54402: LD_VAR 0 1
54406: PUSH
54407: LD_VAR 0 1
54411: ARRAY
54412: ST_TO_ADDR
// end ;
54413: LD_VAR 0 2
54417: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54418: LD_INT 0
54420: PPUSH
54421: PPUSH
// result := [ ] ;
54422: LD_ADDR_VAR 0 5
54426: PUSH
54427: EMPTY
54428: ST_TO_ADDR
// if not array then
54429: LD_VAR 0 1
54433: NOT
54434: IFFALSE 54438
// exit ;
54436: GO 54550
// for i := 1 to array do
54438: LD_ADDR_VAR 0 6
54442: PUSH
54443: DOUBLE
54444: LD_INT 1
54446: DEC
54447: ST_TO_ADDR
54448: LD_VAR 0 1
54452: PUSH
54453: FOR_TO
54454: IFFALSE 54548
// if array [ i ] [ index ] = value then
54456: LD_VAR 0 1
54460: PUSH
54461: LD_VAR 0 6
54465: ARRAY
54466: PUSH
54467: LD_VAR 0 2
54471: ARRAY
54472: PUSH
54473: LD_VAR 0 3
54477: EQUAL
54478: IFFALSE 54546
// begin if indexColumn then
54480: LD_VAR 0 4
54484: IFFALSE 54520
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54486: LD_ADDR_VAR 0 5
54490: PUSH
54491: LD_VAR 0 5
54495: PPUSH
54496: LD_VAR 0 1
54500: PUSH
54501: LD_VAR 0 6
54505: ARRAY
54506: PUSH
54507: LD_VAR 0 4
54511: ARRAY
54512: PPUSH
54513: CALL 49558 0 2
54517: ST_TO_ADDR
54518: GO 54546
// result := Join ( result , array [ i ] ) ;
54520: LD_ADDR_VAR 0 5
54524: PUSH
54525: LD_VAR 0 5
54529: PPUSH
54530: LD_VAR 0 1
54534: PUSH
54535: LD_VAR 0 6
54539: ARRAY
54540: PPUSH
54541: CALL 49558 0 2
54545: ST_TO_ADDR
// end ;
54546: GO 54453
54548: POP
54549: POP
// end ;
54550: LD_VAR 0 5
54554: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54555: LD_INT 0
54557: PPUSH
// if not vehicles or not parkingPoint then
54558: LD_VAR 0 1
54562: NOT
54563: IFTRUE 54572
54565: PUSH
54566: LD_VAR 0 2
54570: NOT
54571: OR
54572: IFFALSE 54576
// exit ;
54574: GO 54674
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54576: LD_ADDR_VAR 0 1
54580: PUSH
54581: LD_VAR 0 1
54585: PPUSH
54586: LD_INT 50
54588: PUSH
54589: EMPTY
54590: LIST
54591: PUSH
54592: LD_INT 3
54594: PUSH
54595: LD_INT 92
54597: PUSH
54598: LD_VAR 0 2
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: PUSH
54607: LD_VAR 0 2
54611: PUSH
54612: LD_INT 2
54614: ARRAY
54615: PUSH
54616: LD_INT 8
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PPUSH
54633: CALL_OW 72
54637: ST_TO_ADDR
// if not vehicles then
54638: LD_VAR 0 1
54642: NOT
54643: IFFALSE 54647
// exit ;
54645: GO 54674
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54647: LD_VAR 0 1
54651: PPUSH
54652: LD_VAR 0 2
54656: PUSH
54657: LD_INT 1
54659: ARRAY
54660: PPUSH
54661: LD_VAR 0 2
54665: PUSH
54666: LD_INT 2
54668: ARRAY
54669: PPUSH
54670: CALL_OW 111
// end ;
54674: LD_VAR 0 3
54678: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54679: LD_INT 0
54681: PPUSH
54682: PPUSH
54683: PPUSH
// if not side or not area then
54684: LD_VAR 0 1
54688: NOT
54689: IFTRUE 54698
54691: PUSH
54692: LD_VAR 0 2
54696: NOT
54697: OR
54698: IFFALSE 54702
// exit ;
54700: GO 54821
// tmp := AreaToList ( area , 0 ) ;
54702: LD_ADDR_VAR 0 5
54706: PUSH
54707: LD_VAR 0 2
54711: PPUSH
54712: LD_INT 0
54714: PPUSH
54715: CALL_OW 517
54719: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54720: LD_ADDR_VAR 0 4
54724: PUSH
54725: DOUBLE
54726: LD_INT 1
54728: DEC
54729: ST_TO_ADDR
54730: LD_VAR 0 5
54734: PUSH
54735: LD_INT 1
54737: ARRAY
54738: PUSH
54739: FOR_TO
54740: IFFALSE 54819
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54742: LD_VAR 0 5
54746: PUSH
54747: LD_INT 1
54749: ARRAY
54750: PUSH
54751: LD_VAR 0 4
54755: ARRAY
54756: PPUSH
54757: LD_VAR 0 5
54761: PUSH
54762: LD_INT 2
54764: ARRAY
54765: PUSH
54766: LD_VAR 0 4
54770: ARRAY
54771: PPUSH
54772: CALL_OW 351
54776: IFFALSE 54817
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54778: LD_VAR 0 5
54782: PUSH
54783: LD_INT 1
54785: ARRAY
54786: PUSH
54787: LD_VAR 0 4
54791: ARRAY
54792: PPUSH
54793: LD_VAR 0 5
54797: PUSH
54798: LD_INT 2
54800: ARRAY
54801: PUSH
54802: LD_VAR 0 4
54806: ARRAY
54807: PPUSH
54808: LD_VAR 0 1
54812: PPUSH
54813: CALL_OW 244
// end ;
54817: GO 54739
54819: POP
54820: POP
// end ;
54821: LD_VAR 0 3
54825: RET
// export function UniqueArray ( array ) ; var i ; begin
54826: LD_INT 0
54828: PPUSH
54829: PPUSH
// result := [ ] ;
54830: LD_ADDR_VAR 0 2
54834: PUSH
54835: EMPTY
54836: ST_TO_ADDR
// if not array then
54837: LD_VAR 0 1
54841: NOT
54842: IFFALSE 54846
// exit ;
54844: GO 54907
// for i := 1 to array do
54846: LD_ADDR_VAR 0 3
54850: PUSH
54851: DOUBLE
54852: LD_INT 1
54854: DEC
54855: ST_TO_ADDR
54856: LD_VAR 0 1
54860: PUSH
54861: FOR_TO
54862: IFFALSE 54905
// if not array [ i ] in result then
54864: LD_VAR 0 1
54868: PUSH
54869: LD_VAR 0 3
54873: ARRAY
54874: PUSH
54875: LD_VAR 0 2
54879: IN
54880: NOT
54881: IFFALSE 54903
// result := Join ( result , i ) ;
54883: LD_ADDR_VAR 0 2
54887: PUSH
54888: LD_VAR 0 2
54892: PPUSH
54893: LD_VAR 0 3
54897: PPUSH
54898: CALL 49558 0 2
54902: ST_TO_ADDR
54903: GO 54861
54905: POP
54906: POP
// end ; end_of_file
54907: LD_VAR 0 2
54911: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54912: LD_VAR 0 1
54916: PUSH
54917: LD_INT 200
54919: DOUBLE
54920: GREATEREQUAL
54921: IFFALSE 54929
54923: LD_INT 299
54925: DOUBLE
54926: LESSEQUAL
54927: IFTRUE 54931
54929: GO 54963
54931: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54932: LD_VAR 0 1
54936: PPUSH
54937: LD_VAR 0 2
54941: PPUSH
54942: LD_VAR 0 3
54946: PPUSH
54947: LD_VAR 0 4
54951: PPUSH
54952: LD_VAR 0 5
54956: PPUSH
54957: CALL 55825 0 5
54961: GO 55040
54963: LD_INT 300
54965: DOUBLE
54966: GREATEREQUAL
54967: IFFALSE 54975
54969: LD_INT 399
54971: DOUBLE
54972: LESSEQUAL
54973: IFTRUE 54977
54975: GO 55039
54977: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54978: LD_VAR 0 1
54982: PPUSH
54983: LD_VAR 0 2
54987: PPUSH
54988: LD_VAR 0 3
54992: PPUSH
54993: LD_VAR 0 4
54997: PPUSH
54998: LD_VAR 0 5
55002: PPUSH
55003: LD_VAR 0 6
55007: PPUSH
55008: LD_VAR 0 7
55012: PPUSH
55013: LD_VAR 0 8
55017: PPUSH
55018: LD_VAR 0 9
55022: PPUSH
55023: LD_VAR 0 10
55027: PPUSH
55028: LD_VAR 0 11
55032: PPUSH
55033: CALL 63927 0 11
55037: GO 55040
55039: POP
// end ;
55040: PPOPN 11
55042: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55043: LD_VAR 0 1
55047: PPUSH
55048: LD_VAR 0 2
55052: PPUSH
55053: LD_VAR 0 3
55057: PPUSH
55058: LD_VAR 0 4
55062: PPUSH
55063: LD_VAR 0 5
55067: PPUSH
55068: CALL 55125 0 5
// end ; end_of_file
55072: PPOPN 5
55074: END
// export function SOS_UnitDestroyed ( un ) ; begin
55075: LD_INT 0
55077: PPUSH
// ComRadiation ( un ) ;
55078: LD_VAR 0 1
55082: PPUSH
55083: CALL 56245 0 1
// end ;
55087: LD_VAR 0 2
55091: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55092: LD_INT 0
55094: PPUSH
// ComRadiation ( un ) ;
55095: LD_VAR 0 1
55099: PPUSH
55100: CALL 56245 0 1
// end ;
55104: LD_VAR 0 2
55108: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55109: LD_INT 0
55111: PPUSH
// end ;
55112: LD_VAR 0 4
55116: RET
// export function SOS_Command ( cmd ) ; begin
55117: LD_INT 0
55119: PPUSH
// end ;
55120: LD_VAR 0 2
55124: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55125: LD_INT 0
55127: PPUSH
// end ;
55128: LD_VAR 0 6
55132: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55133: LD_INT 0
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
// if not vehicle or not factory then
55140: LD_VAR 0 1
55144: NOT
55145: IFTRUE 55154
55147: PUSH
55148: LD_VAR 0 2
55152: NOT
55153: OR
55154: IFFALSE 55158
// exit ;
55156: GO 55820
// weapon := GetWeapon ( vehicle ) ;
55158: LD_ADDR_VAR 0 7
55162: PUSH
55163: LD_VAR 0 1
55167: PPUSH
55168: CALL_OW 264
55172: ST_TO_ADDR
// if weapon = ar_miner then
55173: LD_VAR 0 7
55177: PUSH
55178: LD_INT 81
55180: EQUAL
55181: IFFALSE 55238
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55183: LD_ADDR_EXP 57
55187: PUSH
55188: LD_EXP 57
55192: PPUSH
55193: LD_EXP 57
55197: PUSH
55198: LD_INT 1
55200: PLUS
55201: PPUSH
55202: LD_VAR 0 1
55206: PPUSH
55207: CALL_OW 1
55211: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55212: LD_ADDR_EXP 58
55216: PUSH
55217: LD_EXP 58
55221: PPUSH
55222: LD_EXP 58
55226: PUSH
55227: LD_INT 1
55229: PLUS
55230: PPUSH
55231: EMPTY
55232: PPUSH
55233: CALL_OW 1
55237: ST_TO_ADDR
// end ; if not factoryWaypoints then
55238: LD_EXP 61
55242: NOT
55243: IFFALSE 55247
// exit ;
55245: GO 55820
// for i := 1 to Count ( factoryWaypoints ) do
55247: LD_ADDR_VAR 0 4
55251: PUSH
55252: DOUBLE
55253: LD_INT 1
55255: DEC
55256: ST_TO_ADDR
55257: LD_EXP 61
55261: PPUSH
55262: CALL 13582 0 1
55266: PUSH
55267: FOR_TO
55268: IFFALSE 55818
// if factoryWaypoints [ i ] [ 2 ] = factory then
55270: LD_EXP 61
55274: PUSH
55275: LD_VAR 0 4
55279: ARRAY
55280: PUSH
55281: LD_INT 2
55283: ARRAY
55284: PUSH
55285: LD_VAR 0 2
55289: EQUAL
55290: IFFALSE 55816
// begin if GetControl ( vehicle ) = control_manual then
55292: LD_VAR 0 1
55296: PPUSH
55297: CALL_OW 263
55301: PUSH
55302: LD_INT 1
55304: EQUAL
55305: IFFALSE 55669
// begin driver := IsDrivenBy ( vehicle ) ;
55307: LD_ADDR_VAR 0 5
55311: PUSH
55312: LD_VAR 0 1
55316: PPUSH
55317: CALL_OW 311
55321: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55322: LD_VAR 0 5
55326: PUSH
55327: LD_EXP 62
55331: IN
55332: IFTRUE 55346
55334: PUSH
55335: LD_VAR 0 1
55339: PUSH
55340: LD_EXP 62
55344: IN
55345: OR
55346: IFFALSE 55352
// exit ;
55348: POP
55349: POP
55350: GO 55820
// if not HasTask ( driver ) then
55352: LD_VAR 0 5
55356: PPUSH
55357: CALL_OW 314
55361: NOT
55362: IFFALSE 55667
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55364: LD_ADDR_EXP 62
55368: PUSH
55369: LD_EXP 62
55373: PPUSH
55374: LD_VAR 0 5
55378: PPUSH
55379: CALL 49558 0 2
55383: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55384: LD_ADDR_EXP 62
55388: PUSH
55389: LD_EXP 62
55393: PPUSH
55394: LD_VAR 0 1
55398: PPUSH
55399: CALL 49558 0 2
55403: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55404: LD_ADDR_VAR 0 6
55408: PUSH
55409: LD_EXP 61
55413: PUSH
55414: LD_VAR 0 4
55418: ARRAY
55419: PUSH
55420: LD_INT 3
55422: ARRAY
55423: PPUSH
55424: LD_EXP 61
55428: PUSH
55429: LD_VAR 0 4
55433: ARRAY
55434: PUSH
55435: LD_INT 4
55437: ARRAY
55438: PPUSH
55439: CALL_OW 428
55443: ST_TO_ADDR
// if hex then
55444: LD_VAR 0 6
55448: IFFALSE 55466
// ComMoveUnit ( driver , hex ) else
55450: LD_VAR 0 5
55454: PPUSH
55455: LD_VAR 0 6
55459: PPUSH
55460: CALL_OW 112
55464: GO 55550
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55466: LD_VAR 0 1
55470: PPUSH
55471: LD_EXP 61
55475: PUSH
55476: LD_VAR 0 4
55480: ARRAY
55481: PUSH
55482: LD_INT 3
55484: ARRAY
55485: PPUSH
55486: LD_EXP 61
55490: PUSH
55491: LD_VAR 0 4
55495: ARRAY
55496: PUSH
55497: LD_INT 4
55499: ARRAY
55500: PPUSH
55501: CALL_OW 297
55505: PUSH
55506: LD_INT 0
55508: GREATER
55509: IFFALSE 55550
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55511: LD_VAR 0 5
55515: PPUSH
55516: LD_EXP 61
55520: PUSH
55521: LD_VAR 0 4
55525: ARRAY
55526: PUSH
55527: LD_INT 3
55529: ARRAY
55530: PPUSH
55531: LD_EXP 61
55535: PUSH
55536: LD_VAR 0 4
55540: ARRAY
55541: PUSH
55542: LD_INT 4
55544: ARRAY
55545: PPUSH
55546: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55550: LD_VAR 0 5
55554: PPUSH
55555: CALL_OW 181
// if Multiplayer then
55559: LD_OWVAR 4
55563: IFFALSE 55612
// begin repeat wait ( 10 ) ;
55565: LD_INT 10
55567: PPUSH
55568: CALL_OW 67
// until not IsInUnit ( driver ) ;
55572: LD_VAR 0 5
55576: PPUSH
55577: CALL_OW 310
55581: NOT
55582: IFFALSE 55565
// if not HasTask ( driver ) then
55584: LD_VAR 0 5
55588: PPUSH
55589: CALL_OW 314
55593: NOT
55594: IFFALSE 55610
// ComEnterUnit ( driver , factory ) ;
55596: LD_VAR 0 5
55600: PPUSH
55601: LD_VAR 0 2
55605: PPUSH
55606: CALL_OW 120
// end else
55610: GO 55626
// AddComEnterUnit ( driver , factory ) ;
55612: LD_VAR 0 5
55616: PPUSH
55617: LD_VAR 0 2
55621: PPUSH
55622: CALL_OW 180
// wait ( 0 0$1 ) ;
55626: LD_INT 35
55628: PPUSH
55629: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55633: LD_ADDR_EXP 62
55637: PUSH
55638: LD_EXP 62
55642: PUSH
55643: LD_VAR 0 5
55647: DIFF
55648: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55649: LD_ADDR_EXP 62
55653: PUSH
55654: LD_EXP 62
55658: PUSH
55659: LD_VAR 0 1
55663: DIFF
55664: ST_TO_ADDR
// break ;
55665: GO 55818
// end ; end else
55667: GO 55816
// if GetControl ( vehicle ) = control_remote then
55669: LD_VAR 0 1
55673: PPUSH
55674: CALL_OW 263
55678: PUSH
55679: LD_INT 2
55681: EQUAL
55682: IFFALSE 55768
// begin wait ( 0 0$2 ) ;
55684: LD_INT 70
55686: PPUSH
55687: CALL_OW 67
// repeat wait ( 10 ) ;
55691: LD_INT 10
55693: PPUSH
55694: CALL_OW 67
// Connect ( vehicle ) ;
55698: LD_VAR 0 1
55702: PPUSH
55703: CALL 19860 0 1
// until IsControledBy ( vehicle ) ;
55707: LD_VAR 0 1
55711: PPUSH
55712: CALL_OW 312
55716: IFFALSE 55691
// wait ( 10 ) ;
55718: LD_INT 10
55720: PPUSH
55721: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55725: LD_VAR 0 1
55729: PPUSH
55730: LD_EXP 61
55734: PUSH
55735: LD_VAR 0 4
55739: ARRAY
55740: PUSH
55741: LD_INT 3
55743: ARRAY
55744: PPUSH
55745: LD_EXP 61
55749: PUSH
55750: LD_VAR 0 4
55754: ARRAY
55755: PUSH
55756: LD_INT 4
55758: ARRAY
55759: PPUSH
55760: CALL_OW 111
// break ;
55764: GO 55818
// end else
55766: GO 55816
// begin wait ( 0 0$3 ) ;
55768: LD_INT 105
55770: PPUSH
55771: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55775: LD_VAR 0 1
55779: PPUSH
55780: LD_EXP 61
55784: PUSH
55785: LD_VAR 0 4
55789: ARRAY
55790: PUSH
55791: LD_INT 3
55793: ARRAY
55794: PPUSH
55795: LD_EXP 61
55799: PUSH
55800: LD_VAR 0 4
55804: ARRAY
55805: PUSH
55806: LD_INT 4
55808: ARRAY
55809: PPUSH
55810: CALL_OW 111
// break ;
55814: GO 55818
// end ; end ;
55816: GO 55267
55818: POP
55819: POP
// end ;
55820: LD_VAR 0 3
55824: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55825: LD_INT 0
55827: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55828: LD_VAR 0 1
55832: PUSH
55833: LD_INT 250
55835: EQUAL
55836: IFFALSE 55853
55838: PUSH
55839: LD_VAR 0 2
55843: PPUSH
55844: CALL_OW 264
55848: PUSH
55849: LD_INT 81
55851: EQUAL
55852: AND
55853: IFFALSE 55874
// MinerPlaceMine ( unit , x , y ) ;
55855: LD_VAR 0 2
55859: PPUSH
55860: LD_VAR 0 4
55864: PPUSH
55865: LD_VAR 0 5
55869: PPUSH
55870: CALL 59220 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55874: LD_VAR 0 1
55878: PUSH
55879: LD_INT 251
55881: EQUAL
55882: IFFALSE 55899
55884: PUSH
55885: LD_VAR 0 2
55889: PPUSH
55890: CALL_OW 264
55894: PUSH
55895: LD_INT 81
55897: EQUAL
55898: AND
55899: IFFALSE 55920
// MinerDetonateMine ( unit , x , y ) ;
55901: LD_VAR 0 2
55905: PPUSH
55906: LD_VAR 0 4
55910: PPUSH
55911: LD_VAR 0 5
55915: PPUSH
55916: CALL 59627 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55920: LD_VAR 0 1
55924: PUSH
55925: LD_INT 252
55927: EQUAL
55928: IFFALSE 55945
55930: PUSH
55931: LD_VAR 0 2
55935: PPUSH
55936: CALL_OW 264
55940: PUSH
55941: LD_INT 81
55943: EQUAL
55944: AND
55945: IFFALSE 55966
// MinerCreateMinefield ( unit , x , y ) ;
55947: LD_VAR 0 2
55951: PPUSH
55952: LD_VAR 0 4
55956: PPUSH
55957: LD_VAR 0 5
55961: PPUSH
55962: CALL 59859 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55966: LD_VAR 0 1
55970: PUSH
55971: LD_INT 253
55973: EQUAL
55974: IFFALSE 55991
55976: PUSH
55977: LD_VAR 0 2
55981: PPUSH
55982: CALL_OW 257
55986: PUSH
55987: LD_INT 5
55989: EQUAL
55990: AND
55991: IFFALSE 56012
// ComBinocular ( unit , x , y ) ;
55993: LD_VAR 0 2
55997: PPUSH
55998: LD_VAR 0 4
56002: PPUSH
56003: LD_VAR 0 5
56007: PPUSH
56008: CALL 60234 0 3
// if selectedUnit then
56012: LD_VAR 0 3
56016: IFFALSE 56076
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56018: LD_VAR 0 1
56022: PUSH
56023: LD_INT 254
56025: EQUAL
56026: IFFALSE 56043
56028: PUSH
56029: LD_VAR 0 2
56033: PPUSH
56034: CALL_OW 264
56038: PUSH
56039: LD_INT 99
56041: EQUAL
56042: AND
56043: IFFALSE 56060
56045: PUSH
56046: LD_VAR 0 3
56050: PPUSH
56051: CALL_OW 263
56055: PUSH
56056: LD_INT 3
56058: EQUAL
56059: AND
56060: IFFALSE 56076
// HackDestroyVehicle ( unit , selectedUnit ) ;
56062: LD_VAR 0 2
56066: PPUSH
56067: LD_VAR 0 3
56071: PPUSH
56072: CALL 58410 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56076: LD_VAR 0 1
56080: PUSH
56081: LD_INT 255
56083: EQUAL
56084: IFFALSE 56108
56086: PUSH
56087: LD_VAR 0 2
56091: PPUSH
56092: CALL_OW 264
56096: PUSH
56097: LD_INT 14
56099: PUSH
56100: LD_INT 53
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: IN
56107: AND
56108: IFFALSE 56126
56110: PUSH
56111: LD_VAR 0 4
56115: PPUSH
56116: LD_VAR 0 5
56120: PPUSH
56121: CALL_OW 488
56125: AND
56126: IFFALSE 56150
// CutTreeXYR ( unit , x , y , 12 ) ;
56128: LD_VAR 0 2
56132: PPUSH
56133: LD_VAR 0 4
56137: PPUSH
56138: LD_VAR 0 5
56142: PPUSH
56143: LD_INT 12
56145: PPUSH
56146: CALL 56341 0 4
// if cmd = 256 then
56150: LD_VAR 0 1
56154: PUSH
56155: LD_INT 256
56157: EQUAL
56158: IFFALSE 56179
// SetFactoryWaypoint ( unit , x , y ) ;
56160: LD_VAR 0 2
56164: PPUSH
56165: LD_VAR 0 4
56169: PPUSH
56170: LD_VAR 0 5
56174: PPUSH
56175: CALL 63935 0 3
// if cmd = 257 then
56179: LD_VAR 0 1
56183: PUSH
56184: LD_INT 257
56186: EQUAL
56187: IFFALSE 56208
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56189: LD_VAR 0 2
56193: PPUSH
56194: LD_VAR 0 4
56198: PPUSH
56199: LD_VAR 0 5
56203: PPUSH
56204: CALL 64431 0 3
// if cmd = 258 then
56208: LD_VAR 0 1
56212: PUSH
56213: LD_INT 258
56215: EQUAL
56216: IFFALSE 56240
// BurnTreeXYR ( unit , x , y , 8 ) ;
56218: LD_VAR 0 2
56222: PPUSH
56223: LD_VAR 0 4
56227: PPUSH
56228: LD_VAR 0 5
56232: PPUSH
56233: LD_INT 8
56235: PPUSH
56236: CALL 56763 0 4
// end ;
56240: LD_VAR 0 6
56244: RET
// export function ComRadiation ( un ) ; var eff ; begin
56245: LD_INT 0
56247: PPUSH
56248: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56249: LD_VAR 0 1
56253: PPUSH
56254: CALL_OW 264
56258: PUSH
56259: LD_INT 91
56261: NONEQUAL
56262: IFFALSE 56266
// exit ;
56264: GO 56336
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56266: LD_INT 68
56268: PPUSH
56269: LD_VAR 0 1
56273: PPUSH
56274: CALL_OW 255
56278: PPUSH
56279: CALL_OW 321
56283: PUSH
56284: LD_INT 2
56286: EQUAL
56287: IFFALSE 56299
// eff := 50 else
56289: LD_ADDR_VAR 0 3
56293: PUSH
56294: LD_INT 50
56296: ST_TO_ADDR
56297: GO 56307
// eff := 25 ;
56299: LD_ADDR_VAR 0 3
56303: PUSH
56304: LD_INT 25
56306: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56307: LD_VAR 0 1
56311: PPUSH
56312: CALL_OW 250
56316: PPUSH
56317: LD_VAR 0 1
56321: PPUSH
56322: CALL_OW 251
56326: PPUSH
56327: LD_VAR 0 3
56331: PPUSH
56332: CALL_OW 495
// end ;
56336: LD_VAR 0 2
56340: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56341: LD_INT 0
56343: PPUSH
56344: PPUSH
56345: PPUSH
56346: PPUSH
56347: PPUSH
56348: PPUSH
56349: PPUSH
56350: PPUSH
56351: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56352: LD_VAR 0 1
56356: PPUSH
56357: CALL_OW 302
56361: NOT
56362: IFTRUE 56381
56364: PUSH
56365: LD_VAR 0 2
56369: PPUSH
56370: LD_VAR 0 3
56374: PPUSH
56375: CALL_OW 488
56379: NOT
56380: OR
56381: IFTRUE 56390
56383: PUSH
56384: LD_VAR 0 4
56388: NOT
56389: OR
56390: IFFALSE 56394
// exit ;
56392: GO 56758
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56394: LD_VAR 0 1
56398: PPUSH
56399: CALL_OW 437
56403: PPUSH
56404: CALL 13582 0 1
56408: PUSH
56409: LD_INT 10
56411: GREATER
56412: IFFALSE 56416
// exit ;
56414: GO 56758
// list := [ ] ;
56416: LD_ADDR_VAR 0 13
56420: PUSH
56421: EMPTY
56422: ST_TO_ADDR
// if x - r < 0 then
56423: LD_VAR 0 2
56427: PUSH
56428: LD_VAR 0 4
56432: MINUS
56433: PUSH
56434: LD_INT 0
56436: LESS
56437: IFFALSE 56449
// min_x := 0 else
56439: LD_ADDR_VAR 0 7
56443: PUSH
56444: LD_INT 0
56446: ST_TO_ADDR
56447: GO 56465
// min_x := x - r ;
56449: LD_ADDR_VAR 0 7
56453: PUSH
56454: LD_VAR 0 2
56458: PUSH
56459: LD_VAR 0 4
56463: MINUS
56464: ST_TO_ADDR
// if y - r < 0 then
56465: LD_VAR 0 3
56469: PUSH
56470: LD_VAR 0 4
56474: MINUS
56475: PUSH
56476: LD_INT 0
56478: LESS
56479: IFFALSE 56491
// min_y := 0 else
56481: LD_ADDR_VAR 0 8
56485: PUSH
56486: LD_INT 0
56488: ST_TO_ADDR
56489: GO 56507
// min_y := y - r ;
56491: LD_ADDR_VAR 0 8
56495: PUSH
56496: LD_VAR 0 3
56500: PUSH
56501: LD_VAR 0 4
56505: MINUS
56506: ST_TO_ADDR
// max_x := x + r ;
56507: LD_ADDR_VAR 0 9
56511: PUSH
56512: LD_VAR 0 2
56516: PUSH
56517: LD_VAR 0 4
56521: PLUS
56522: ST_TO_ADDR
// max_y := y + r ;
56523: LD_ADDR_VAR 0 10
56527: PUSH
56528: LD_VAR 0 3
56532: PUSH
56533: LD_VAR 0 4
56537: PLUS
56538: ST_TO_ADDR
// for _x = min_x to max_x do
56539: LD_ADDR_VAR 0 11
56543: PUSH
56544: DOUBLE
56545: LD_VAR 0 7
56549: DEC
56550: ST_TO_ADDR
56551: LD_VAR 0 9
56555: PUSH
56556: FOR_TO
56557: IFFALSE 56676
// for _y = min_y to max_y do
56559: LD_ADDR_VAR 0 12
56563: PUSH
56564: DOUBLE
56565: LD_VAR 0 8
56569: DEC
56570: ST_TO_ADDR
56571: LD_VAR 0 10
56575: PUSH
56576: FOR_TO
56577: IFFALSE 56672
// begin if not ValidHex ( _x , _y ) then
56579: LD_VAR 0 11
56583: PPUSH
56584: LD_VAR 0 12
56588: PPUSH
56589: CALL_OW 488
56593: NOT
56594: IFFALSE 56598
// continue ;
56596: GO 56576
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56598: LD_VAR 0 11
56602: PPUSH
56603: LD_VAR 0 12
56607: PPUSH
56608: CALL_OW 351
56612: IFFALSE 56630
56614: PUSH
56615: LD_VAR 0 11
56619: PPUSH
56620: LD_VAR 0 12
56624: PPUSH
56625: CALL_OW 554
56629: AND
56630: IFFALSE 56670
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56632: LD_ADDR_VAR 0 13
56636: PUSH
56637: LD_VAR 0 13
56641: PPUSH
56642: LD_VAR 0 13
56646: PUSH
56647: LD_INT 1
56649: PLUS
56650: PPUSH
56651: LD_VAR 0 11
56655: PUSH
56656: LD_VAR 0 12
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PPUSH
56665: CALL_OW 2
56669: ST_TO_ADDR
// end ;
56670: GO 56576
56672: POP
56673: POP
56674: GO 56556
56676: POP
56677: POP
// if not list then
56678: LD_VAR 0 13
56682: NOT
56683: IFFALSE 56687
// exit ;
56685: GO 56758
// for i in list do
56687: LD_ADDR_VAR 0 6
56691: PUSH
56692: LD_VAR 0 13
56696: PUSH
56697: FOR_IN
56698: IFFALSE 56756
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56700: LD_VAR 0 1
56704: PPUSH
56705: LD_STRING M
56707: PUSH
56708: LD_VAR 0 6
56712: PUSH
56713: LD_INT 1
56715: ARRAY
56716: PUSH
56717: LD_VAR 0 6
56721: PUSH
56722: LD_INT 2
56724: ARRAY
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: PPUSH
56750: CALL_OW 447
56754: GO 56697
56756: POP
56757: POP
// end ;
56758: LD_VAR 0 5
56762: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56763: LD_INT 0
56765: PPUSH
56766: PPUSH
56767: PPUSH
56768: PPUSH
56769: PPUSH
56770: PPUSH
56771: PPUSH
56772: PPUSH
56773: PPUSH
56774: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56775: LD_VAR 0 1
56779: PPUSH
56780: CALL_OW 302
56784: NOT
56785: IFTRUE 56804
56787: PUSH
56788: LD_VAR 0 2
56792: PPUSH
56793: LD_VAR 0 3
56797: PPUSH
56798: CALL_OW 488
56802: NOT
56803: OR
56804: IFTRUE 56813
56806: PUSH
56807: LD_VAR 0 4
56811: NOT
56812: OR
56813: IFFALSE 56817
// exit ;
56815: GO 57356
// if Count ( GetTaskList ( flame ) ) > 10 then
56817: LD_VAR 0 1
56821: PPUSH
56822: CALL_OW 437
56826: PPUSH
56827: CALL 13582 0 1
56831: PUSH
56832: LD_INT 10
56834: GREATER
56835: IFFALSE 56839
// exit ;
56837: GO 57356
// list := [ ] ;
56839: LD_ADDR_VAR 0 13
56843: PUSH
56844: EMPTY
56845: ST_TO_ADDR
// if x - r < 0 then
56846: LD_VAR 0 2
56850: PUSH
56851: LD_VAR 0 4
56855: MINUS
56856: PUSH
56857: LD_INT 0
56859: LESS
56860: IFFALSE 56872
// min_x := 0 else
56862: LD_ADDR_VAR 0 7
56866: PUSH
56867: LD_INT 0
56869: ST_TO_ADDR
56870: GO 56888
// min_x := x - r ;
56872: LD_ADDR_VAR 0 7
56876: PUSH
56877: LD_VAR 0 2
56881: PUSH
56882: LD_VAR 0 4
56886: MINUS
56887: ST_TO_ADDR
// if y - r < 0 then
56888: LD_VAR 0 3
56892: PUSH
56893: LD_VAR 0 4
56897: MINUS
56898: PUSH
56899: LD_INT 0
56901: LESS
56902: IFFALSE 56914
// min_y := 0 else
56904: LD_ADDR_VAR 0 8
56908: PUSH
56909: LD_INT 0
56911: ST_TO_ADDR
56912: GO 56930
// min_y := y - r ;
56914: LD_ADDR_VAR 0 8
56918: PUSH
56919: LD_VAR 0 3
56923: PUSH
56924: LD_VAR 0 4
56928: MINUS
56929: ST_TO_ADDR
// max_x := x + r ;
56930: LD_ADDR_VAR 0 9
56934: PUSH
56935: LD_VAR 0 2
56939: PUSH
56940: LD_VAR 0 4
56944: PLUS
56945: ST_TO_ADDR
// max_y := y + r ;
56946: LD_ADDR_VAR 0 10
56950: PUSH
56951: LD_VAR 0 3
56955: PUSH
56956: LD_VAR 0 4
56960: PLUS
56961: ST_TO_ADDR
// for _x = min_x to max_x do
56962: LD_ADDR_VAR 0 11
56966: PUSH
56967: DOUBLE
56968: LD_VAR 0 7
56972: DEC
56973: ST_TO_ADDR
56974: LD_VAR 0 9
56978: PUSH
56979: FOR_TO
56980: IFFALSE 57099
// for _y = min_y to max_y do
56982: LD_ADDR_VAR 0 12
56986: PUSH
56987: DOUBLE
56988: LD_VAR 0 8
56992: DEC
56993: ST_TO_ADDR
56994: LD_VAR 0 10
56998: PUSH
56999: FOR_TO
57000: IFFALSE 57095
// begin if not ValidHex ( _x , _y ) then
57002: LD_VAR 0 11
57006: PPUSH
57007: LD_VAR 0 12
57011: PPUSH
57012: CALL_OW 488
57016: NOT
57017: IFFALSE 57021
// continue ;
57019: GO 56999
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57021: LD_VAR 0 11
57025: PPUSH
57026: LD_VAR 0 12
57030: PPUSH
57031: CALL_OW 351
57035: IFFALSE 57053
57037: PUSH
57038: LD_VAR 0 11
57042: PPUSH
57043: LD_VAR 0 12
57047: PPUSH
57048: CALL_OW 554
57052: AND
57053: IFFALSE 57093
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57055: LD_ADDR_VAR 0 13
57059: PUSH
57060: LD_VAR 0 13
57064: PPUSH
57065: LD_VAR 0 13
57069: PUSH
57070: LD_INT 1
57072: PLUS
57073: PPUSH
57074: LD_VAR 0 11
57078: PUSH
57079: LD_VAR 0 12
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PPUSH
57088: CALL_OW 2
57092: ST_TO_ADDR
// end ;
57093: GO 56999
57095: POP
57096: POP
57097: GO 56979
57099: POP
57100: POP
// if not list then
57101: LD_VAR 0 13
57105: NOT
57106: IFFALSE 57110
// exit ;
57108: GO 57356
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57110: LD_ADDR_VAR 0 13
57114: PUSH
57115: LD_VAR 0 1
57119: PPUSH
57120: LD_VAR 0 13
57124: PPUSH
57125: LD_INT 1
57127: PPUSH
57128: LD_INT 1
57130: PPUSH
57131: CALL 16988 0 4
57135: ST_TO_ADDR
// ComStop ( flame ) ;
57136: LD_VAR 0 1
57140: PPUSH
57141: CALL_OW 141
// for i in list do
57145: LD_ADDR_VAR 0 6
57149: PUSH
57150: LD_VAR 0 13
57154: PUSH
57155: FOR_IN
57156: IFFALSE 57187
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57158: LD_VAR 0 1
57162: PPUSH
57163: LD_VAR 0 6
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PPUSH
57172: LD_VAR 0 6
57176: PUSH
57177: LD_INT 2
57179: ARRAY
57180: PPUSH
57181: CALL_OW 176
57185: GO 57155
57187: POP
57188: POP
// repeat wait ( 0 0$1 ) ;
57189: LD_INT 35
57191: PPUSH
57192: CALL_OW 67
// task := GetTaskList ( flame ) ;
57196: LD_ADDR_VAR 0 14
57200: PUSH
57201: LD_VAR 0 1
57205: PPUSH
57206: CALL_OW 437
57210: ST_TO_ADDR
// if not task then
57211: LD_VAR 0 14
57215: NOT
57216: IFFALSE 57220
// exit ;
57218: GO 57356
// if task [ 1 ] [ 1 ] <> | then
57220: LD_VAR 0 14
57224: PUSH
57225: LD_INT 1
57227: ARRAY
57228: PUSH
57229: LD_INT 1
57231: ARRAY
57232: PUSH
57233: LD_STRING |
57235: NONEQUAL
57236: IFFALSE 57240
// exit ;
57238: GO 57356
// _x := task [ 1 ] [ 2 ] ;
57240: LD_ADDR_VAR 0 11
57244: PUSH
57245: LD_VAR 0 14
57249: PUSH
57250: LD_INT 1
57252: ARRAY
57253: PUSH
57254: LD_INT 2
57256: ARRAY
57257: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57258: LD_ADDR_VAR 0 12
57262: PUSH
57263: LD_VAR 0 14
57267: PUSH
57268: LD_INT 1
57270: ARRAY
57271: PUSH
57272: LD_INT 3
57274: ARRAY
57275: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57276: LD_VAR 0 11
57280: PPUSH
57281: LD_VAR 0 12
57285: PPUSH
57286: CALL_OW 351
57290: NOT
57291: IFTRUE 57310
57293: PUSH
57294: LD_VAR 0 11
57298: PPUSH
57299: LD_VAR 0 12
57303: PPUSH
57304: CALL_OW 554
57308: NOT
57309: OR
57310: IFFALSE 57344
// begin task := Delete ( task , 1 ) ;
57312: LD_ADDR_VAR 0 14
57316: PUSH
57317: LD_VAR 0 14
57321: PPUSH
57322: LD_INT 1
57324: PPUSH
57325: CALL_OW 3
57329: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57330: LD_VAR 0 1
57334: PPUSH
57335: LD_VAR 0 14
57339: PPUSH
57340: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57344: LD_VAR 0 1
57348: PPUSH
57349: CALL_OW 314
57353: NOT
57354: IFFALSE 57189
// end ;
57356: LD_VAR 0 5
57360: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57361: LD_EXP 50
57365: NOT
57366: IFFALSE 57416
57368: GO 57370
57370: DISABLE
// begin initHack := true ;
57371: LD_ADDR_EXP 50
57375: PUSH
57376: LD_INT 1
57378: ST_TO_ADDR
// hackTanks := [ ] ;
57379: LD_ADDR_EXP 51
57383: PUSH
57384: EMPTY
57385: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57386: LD_ADDR_EXP 52
57390: PUSH
57391: EMPTY
57392: ST_TO_ADDR
// hackLimit := 3 ;
57393: LD_ADDR_EXP 53
57397: PUSH
57398: LD_INT 3
57400: ST_TO_ADDR
// hackDist := 12 ;
57401: LD_ADDR_EXP 54
57405: PUSH
57406: LD_INT 12
57408: ST_TO_ADDR
// hackCounter := [ ] ;
57409: LD_ADDR_EXP 55
57413: PUSH
57414: EMPTY
57415: ST_TO_ADDR
// end ;
57416: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57417: LD_EXP 50
57421: IFFALSE 57439
57423: PUSH
57424: LD_INT 34
57426: PUSH
57427: LD_INT 99
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PPUSH
57434: CALL_OW 69
57438: AND
57439: IFFALSE 57692
57441: GO 57443
57443: DISABLE
57444: LD_INT 0
57446: PPUSH
57447: PPUSH
// begin enable ;
57448: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57449: LD_ADDR_VAR 0 1
57453: PUSH
57454: LD_INT 34
57456: PUSH
57457: LD_INT 99
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PPUSH
57464: CALL_OW 69
57468: PUSH
57469: FOR_IN
57470: IFFALSE 57690
// begin if not i in hackTanks then
57472: LD_VAR 0 1
57476: PUSH
57477: LD_EXP 51
57481: IN
57482: NOT
57483: IFFALSE 57566
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57485: LD_ADDR_EXP 51
57489: PUSH
57490: LD_EXP 51
57494: PPUSH
57495: LD_EXP 51
57499: PUSH
57500: LD_INT 1
57502: PLUS
57503: PPUSH
57504: LD_VAR 0 1
57508: PPUSH
57509: CALL_OW 1
57513: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57514: LD_ADDR_EXP 52
57518: PUSH
57519: LD_EXP 52
57523: PPUSH
57524: LD_EXP 52
57528: PUSH
57529: LD_INT 1
57531: PLUS
57532: PPUSH
57533: EMPTY
57534: PPUSH
57535: CALL_OW 1
57539: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57540: LD_ADDR_EXP 55
57544: PUSH
57545: LD_EXP 55
57549: PPUSH
57550: LD_EXP 55
57554: PUSH
57555: LD_INT 1
57557: PLUS
57558: PPUSH
57559: EMPTY
57560: PPUSH
57561: CALL_OW 1
57565: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57566: LD_VAR 0 1
57570: PPUSH
57571: CALL_OW 302
57575: NOT
57576: IFFALSE 57589
// begin HackUnlinkAll ( i ) ;
57578: LD_VAR 0 1
57582: PPUSH
57583: CALL 57695 0 1
// continue ;
57587: GO 57469
// end ; HackCheckCapturedStatus ( i ) ;
57589: LD_VAR 0 1
57593: PPUSH
57594: CALL 58140 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57598: LD_ADDR_VAR 0 2
57602: PUSH
57603: LD_INT 81
57605: PUSH
57606: LD_VAR 0 1
57610: PPUSH
57611: CALL_OW 255
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 33
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 91
57632: PUSH
57633: LD_VAR 0 1
57637: PUSH
57638: LD_EXP 54
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 50
57650: PUSH
57651: EMPTY
57652: LIST
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: PPUSH
57660: CALL_OW 69
57664: ST_TO_ADDR
// if not tmp then
57665: LD_VAR 0 2
57669: NOT
57670: IFFALSE 57674
// continue ;
57672: GO 57469
// HackLink ( i , tmp ) ;
57674: LD_VAR 0 1
57678: PPUSH
57679: LD_VAR 0 2
57683: PPUSH
57684: CALL 57831 0 2
// end ;
57688: GO 57469
57690: POP
57691: POP
// end ;
57692: PPOPN 2
57694: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57695: LD_INT 0
57697: PPUSH
57698: PPUSH
57699: PPUSH
// if not hack in hackTanks then
57700: LD_VAR 0 1
57704: PUSH
57705: LD_EXP 51
57709: IN
57710: NOT
57711: IFFALSE 57715
// exit ;
57713: GO 57826
// index := GetElementIndex ( hackTanks , hack ) ;
57715: LD_ADDR_VAR 0 4
57719: PUSH
57720: LD_EXP 51
57724: PPUSH
57725: LD_VAR 0 1
57729: PPUSH
57730: CALL 16283 0 2
57734: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57735: LD_EXP 52
57739: PUSH
57740: LD_VAR 0 4
57744: ARRAY
57745: IFFALSE 57826
// begin for i in hackTanksCaptured [ index ] do
57747: LD_ADDR_VAR 0 3
57751: PUSH
57752: LD_EXP 52
57756: PUSH
57757: LD_VAR 0 4
57761: ARRAY
57762: PUSH
57763: FOR_IN
57764: IFFALSE 57790
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57766: LD_VAR 0 3
57770: PUSH
57771: LD_INT 1
57773: ARRAY
57774: PPUSH
57775: LD_VAR 0 3
57779: PUSH
57780: LD_INT 2
57782: ARRAY
57783: PPUSH
57784: CALL_OW 235
57788: GO 57763
57790: POP
57791: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57792: LD_ADDR_EXP 52
57796: PUSH
57797: LD_EXP 52
57801: PPUSH
57802: LD_VAR 0 4
57806: PPUSH
57807: EMPTY
57808: PPUSH
57809: CALL_OW 1
57813: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57814: LD_VAR 0 1
57818: PPUSH
57819: LD_INT 0
57821: PPUSH
57822: CALL_OW 505
// end ; end ;
57826: LD_VAR 0 2
57830: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57831: LD_INT 0
57833: PPUSH
57834: PPUSH
57835: PPUSH
// if not hack in hackTanks or not vehicles then
57836: LD_VAR 0 1
57840: PUSH
57841: LD_EXP 51
57845: IN
57846: NOT
57847: IFTRUE 57856
57849: PUSH
57850: LD_VAR 0 2
57854: NOT
57855: OR
57856: IFFALSE 57860
// exit ;
57858: GO 58135
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57860: LD_ADDR_VAR 0 2
57864: PUSH
57865: LD_VAR 0 1
57869: PPUSH
57870: LD_VAR 0 2
57874: PPUSH
57875: LD_INT 1
57877: PPUSH
57878: LD_INT 1
57880: PPUSH
57881: CALL 16935 0 4
57885: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57886: LD_ADDR_VAR 0 5
57890: PUSH
57891: LD_EXP 51
57895: PPUSH
57896: LD_VAR 0 1
57900: PPUSH
57901: CALL 16283 0 2
57905: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57906: LD_EXP 52
57910: PUSH
57911: LD_VAR 0 5
57915: ARRAY
57916: PUSH
57917: LD_EXP 53
57921: LESS
57922: IFFALSE 58111
// begin for i := 1 to vehicles do
57924: LD_ADDR_VAR 0 4
57928: PUSH
57929: DOUBLE
57930: LD_INT 1
57932: DEC
57933: ST_TO_ADDR
57934: LD_VAR 0 2
57938: PUSH
57939: FOR_TO
57940: IFFALSE 58109
// begin if hackTanksCaptured [ index ] = hackLimit then
57942: LD_EXP 52
57946: PUSH
57947: LD_VAR 0 5
57951: ARRAY
57952: PUSH
57953: LD_EXP 53
57957: EQUAL
57958: IFFALSE 57962
// break ;
57960: GO 58109
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57962: LD_ADDR_EXP 55
57966: PUSH
57967: LD_EXP 55
57971: PPUSH
57972: LD_VAR 0 5
57976: PPUSH
57977: LD_EXP 55
57981: PUSH
57982: LD_VAR 0 5
57986: ARRAY
57987: PUSH
57988: LD_INT 1
57990: PLUS
57991: PPUSH
57992: CALL_OW 1
57996: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57997: LD_ADDR_EXP 52
58001: PUSH
58002: LD_EXP 52
58006: PPUSH
58007: LD_VAR 0 5
58011: PUSH
58012: LD_EXP 52
58016: PUSH
58017: LD_VAR 0 5
58021: ARRAY
58022: PUSH
58023: LD_INT 1
58025: PLUS
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PPUSH
58031: LD_VAR 0 2
58035: PUSH
58036: LD_VAR 0 4
58040: ARRAY
58041: PUSH
58042: LD_VAR 0 2
58046: PUSH
58047: LD_VAR 0 4
58051: ARRAY
58052: PPUSH
58053: CALL_OW 255
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PPUSH
58062: CALL 16500 0 3
58066: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58067: LD_VAR 0 2
58071: PUSH
58072: LD_VAR 0 4
58076: ARRAY
58077: PPUSH
58078: LD_VAR 0 1
58082: PPUSH
58083: CALL_OW 255
58087: PPUSH
58088: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58092: LD_VAR 0 2
58096: PUSH
58097: LD_VAR 0 4
58101: ARRAY
58102: PPUSH
58103: CALL_OW 141
// end ;
58107: GO 57939
58109: POP
58110: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58111: LD_VAR 0 1
58115: PPUSH
58116: LD_EXP 52
58120: PUSH
58121: LD_VAR 0 5
58125: ARRAY
58126: PUSH
58127: LD_INT 0
58129: PLUS
58130: PPUSH
58131: CALL_OW 505
// end ;
58135: LD_VAR 0 3
58139: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58140: LD_INT 0
58142: PPUSH
58143: PPUSH
58144: PPUSH
58145: PPUSH
// if not hack in hackTanks then
58146: LD_VAR 0 1
58150: PUSH
58151: LD_EXP 51
58155: IN
58156: NOT
58157: IFFALSE 58161
// exit ;
58159: GO 58405
// index := GetElementIndex ( hackTanks , hack ) ;
58161: LD_ADDR_VAR 0 4
58165: PUSH
58166: LD_EXP 51
58170: PPUSH
58171: LD_VAR 0 1
58175: PPUSH
58176: CALL 16283 0 2
58180: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58181: LD_ADDR_VAR 0 3
58185: PUSH
58186: DOUBLE
58187: LD_EXP 52
58191: PUSH
58192: LD_VAR 0 4
58196: ARRAY
58197: INC
58198: ST_TO_ADDR
58199: LD_INT 1
58201: PUSH
58202: FOR_DOWNTO
58203: IFFALSE 58379
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58205: LD_ADDR_VAR 0 5
58209: PUSH
58210: LD_EXP 52
58214: PUSH
58215: LD_VAR 0 4
58219: ARRAY
58220: PUSH
58221: LD_VAR 0 3
58225: ARRAY
58226: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58227: LD_VAR 0 5
58231: PUSH
58232: LD_INT 1
58234: ARRAY
58235: PPUSH
58236: CALL_OW 302
58240: NOT
58241: IFTRUE 58269
58243: PUSH
58244: LD_VAR 0 5
58248: PUSH
58249: LD_INT 1
58251: ARRAY
58252: PPUSH
58253: CALL_OW 255
58257: PUSH
58258: LD_VAR 0 1
58262: PPUSH
58263: CALL_OW 255
58267: NONEQUAL
58268: OR
58269: IFFALSE 58377
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58271: LD_VAR 0 5
58275: PUSH
58276: LD_INT 1
58278: ARRAY
58279: PPUSH
58280: CALL_OW 305
58284: IFFALSE 58312
58286: PUSH
58287: LD_VAR 0 5
58291: PUSH
58292: LD_INT 1
58294: ARRAY
58295: PPUSH
58296: CALL_OW 255
58300: PUSH
58301: LD_VAR 0 1
58305: PPUSH
58306: CALL_OW 255
58310: EQUAL
58311: AND
58312: IFFALSE 58336
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58314: LD_VAR 0 5
58318: PUSH
58319: LD_INT 1
58321: ARRAY
58322: PPUSH
58323: LD_VAR 0 5
58327: PUSH
58328: LD_INT 2
58330: ARRAY
58331: PPUSH
58332: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58336: LD_ADDR_EXP 52
58340: PUSH
58341: LD_EXP 52
58345: PPUSH
58346: LD_VAR 0 4
58350: PPUSH
58351: LD_EXP 52
58355: PUSH
58356: LD_VAR 0 4
58360: ARRAY
58361: PPUSH
58362: LD_VAR 0 3
58366: PPUSH
58367: CALL_OW 3
58371: PPUSH
58372: CALL_OW 1
58376: ST_TO_ADDR
// end ; end ;
58377: GO 58202
58379: POP
58380: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58381: LD_VAR 0 1
58385: PPUSH
58386: LD_EXP 52
58390: PUSH
58391: LD_VAR 0 4
58395: ARRAY
58396: PUSH
58397: LD_INT 0
58399: PLUS
58400: PPUSH
58401: CALL_OW 505
// end ;
58405: LD_VAR 0 2
58409: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58410: LD_INT 0
58412: PPUSH
58413: PPUSH
58414: PPUSH
58415: PPUSH
// if not hack in hackTanks then
58416: LD_VAR 0 1
58420: PUSH
58421: LD_EXP 51
58425: IN
58426: NOT
58427: IFFALSE 58431
// exit ;
58429: GO 58516
// index := GetElementIndex ( hackTanks , hack ) ;
58431: LD_ADDR_VAR 0 5
58435: PUSH
58436: LD_EXP 51
58440: PPUSH
58441: LD_VAR 0 1
58445: PPUSH
58446: CALL 16283 0 2
58450: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58451: LD_ADDR_VAR 0 4
58455: PUSH
58456: DOUBLE
58457: LD_INT 1
58459: DEC
58460: ST_TO_ADDR
58461: LD_EXP 52
58465: PUSH
58466: LD_VAR 0 5
58470: ARRAY
58471: PUSH
58472: FOR_TO
58473: IFFALSE 58514
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58475: LD_EXP 52
58479: PUSH
58480: LD_VAR 0 5
58484: ARRAY
58485: PUSH
58486: LD_VAR 0 4
58490: ARRAY
58491: PUSH
58492: LD_INT 1
58494: ARRAY
58495: PUSH
58496: LD_VAR 0 2
58500: EQUAL
58501: IFFALSE 58512
// KillUnit ( vehicle ) ;
58503: LD_VAR 0 2
58507: PPUSH
58508: CALL_OW 66
58512: GO 58472
58514: POP
58515: POP
// end ;
58516: LD_VAR 0 3
58520: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58521: LD_EXP 56
58525: NOT
58526: IFFALSE 58659
58528: GO 58530
58530: DISABLE
58531: LD_INT 0
58533: PPUSH
// begin initMiner := true ;
58534: LD_ADDR_EXP 56
58538: PUSH
58539: LD_INT 1
58541: ST_TO_ADDR
// minersList := [ ] ;
58542: LD_ADDR_EXP 57
58546: PUSH
58547: EMPTY
58548: ST_TO_ADDR
// minerMinesList := [ ] ;
58549: LD_ADDR_EXP 58
58553: PUSH
58554: EMPTY
58555: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58556: LD_ADDR_EXP 59
58560: PUSH
58561: LD_INT 10
58563: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58564: LD_ADDR_VAR 0 1
58568: PUSH
58569: LD_INT 34
58571: PUSH
58572: LD_INT 81
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PPUSH
58579: CALL_OW 69
58583: PUSH
58584: FOR_IN
58585: IFFALSE 58657
// begin if not i in minersList then
58587: LD_VAR 0 1
58591: PUSH
58592: LD_EXP 57
58596: IN
58597: NOT
58598: IFFALSE 58655
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58600: LD_ADDR_EXP 57
58604: PUSH
58605: LD_EXP 57
58609: PPUSH
58610: LD_EXP 57
58614: PUSH
58615: LD_INT 1
58617: PLUS
58618: PPUSH
58619: LD_VAR 0 1
58623: PPUSH
58624: CALL_OW 1
58628: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58629: LD_ADDR_EXP 58
58633: PUSH
58634: LD_EXP 58
58638: PPUSH
58639: LD_EXP 58
58643: PUSH
58644: LD_INT 1
58646: PLUS
58647: PPUSH
58648: EMPTY
58649: PPUSH
58650: CALL_OW 1
58654: ST_TO_ADDR
// end end ;
58655: GO 58584
58657: POP
58658: POP
// end ;
58659: PPOPN 1
58661: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58662: LD_EXP 56
58666: IFFALSE 58697
58668: PUSH
58669: LD_EXP 58
58673: PPUSH
58674: CALL 13582 0 1
58678: IFTRUE 58696
58680: PUSH
58681: LD_INT 34
58683: PUSH
58684: LD_INT 81
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PPUSH
58691: CALL_OW 69
58695: OR
58696: AND
58697: IFFALSE 59217
58699: GO 58701
58701: DISABLE
58702: LD_INT 0
58704: PPUSH
58705: PPUSH
58706: PPUSH
58707: PPUSH
// begin enable ;
58708: ENABLE
// for i := minerMinesList downto 1 do
58709: LD_ADDR_VAR 0 1
58713: PUSH
58714: DOUBLE
58715: LD_EXP 58
58719: INC
58720: ST_TO_ADDR
58721: LD_INT 1
58723: PUSH
58724: FOR_DOWNTO
58725: IFFALSE 59215
// begin side := GetSide ( minersList [ i ] ) ;
58727: LD_ADDR_VAR 0 3
58731: PUSH
58732: LD_EXP 57
58736: PUSH
58737: LD_VAR 0 1
58741: ARRAY
58742: PPUSH
58743: CALL_OW 255
58747: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58748: LD_EXP 57
58752: PUSH
58753: LD_VAR 0 1
58757: ARRAY
58758: PPUSH
58759: CALL_OW 300
58763: IFFALSE 58784
58765: PUSH
58766: LD_VAR 0 3
58770: PUSH
58771: LD_OWVAR 2
58775: PUSH
58776: LD_INT 9
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: IN
58783: AND
58784: IFFALSE 58817
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58786: LD_EXP 57
58790: PUSH
58791: LD_VAR 0 1
58795: ARRAY
58796: PPUSH
58797: LD_EXP 58
58801: PUSH
58802: LD_VAR 0 1
58806: ARRAY
58807: PPUSH
58808: CALL 13582 0 1
58812: PPUSH
58813: CALL_OW 505
// if not minerMinesList [ i ] then
58817: LD_EXP 58
58821: PUSH
58822: LD_VAR 0 1
58826: ARRAY
58827: NOT
58828: IFFALSE 58832
// continue ;
58830: GO 58724
// for j := minerMinesList [ i ] downto 1 do
58832: LD_ADDR_VAR 0 2
58836: PUSH
58837: DOUBLE
58838: LD_EXP 58
58842: PUSH
58843: LD_VAR 0 1
58847: ARRAY
58848: INC
58849: ST_TO_ADDR
58850: LD_INT 1
58852: PUSH
58853: FOR_DOWNTO
58854: IFFALSE 59211
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58856: LD_EXP 57
58860: PUSH
58861: LD_VAR 0 1
58865: ARRAY
58866: PPUSH
58867: CALL_OW 301
58871: IFTRUE 58891
58873: PUSH
58874: LD_EXP 57
58878: PUSH
58879: LD_VAR 0 1
58883: ARRAY
58884: PPUSH
58885: CALL_OW 305
58889: NOT
58890: OR
58891: IFFALSE 58982
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58893: LD_EXP 58
58897: PUSH
58898: LD_VAR 0 1
58902: ARRAY
58903: PUSH
58904: LD_VAR 0 2
58908: ARRAY
58909: PUSH
58910: LD_INT 1
58912: ARRAY
58913: PPUSH
58914: LD_EXP 58
58918: PUSH
58919: LD_VAR 0 1
58923: ARRAY
58924: PUSH
58925: LD_VAR 0 2
58929: ARRAY
58930: PUSH
58931: LD_INT 2
58933: ARRAY
58934: PPUSH
58935: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58939: LD_ADDR_EXP 58
58943: PUSH
58944: LD_EXP 58
58948: PPUSH
58949: LD_VAR 0 1
58953: PPUSH
58954: LD_EXP 58
58958: PUSH
58959: LD_VAR 0 1
58963: ARRAY
58964: PPUSH
58965: LD_VAR 0 2
58969: PPUSH
58970: CALL_OW 3
58974: PPUSH
58975: CALL_OW 1
58979: ST_TO_ADDR
// continue ;
58980: GO 58853
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58982: LD_ADDR_VAR 0 4
58986: PUSH
58987: LD_EXP 58
58991: PUSH
58992: LD_VAR 0 1
58996: ARRAY
58997: PUSH
58998: LD_VAR 0 2
59002: ARRAY
59003: PUSH
59004: LD_INT 1
59006: ARRAY
59007: PPUSH
59008: LD_EXP 58
59012: PUSH
59013: LD_VAR 0 1
59017: ARRAY
59018: PUSH
59019: LD_VAR 0 2
59023: ARRAY
59024: PUSH
59025: LD_INT 2
59027: ARRAY
59028: PPUSH
59029: CALL_OW 428
59033: ST_TO_ADDR
// if not tmp then
59034: LD_VAR 0 4
59038: NOT
59039: IFFALSE 59043
// continue ;
59041: GO 58853
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59043: LD_VAR 0 4
59047: PUSH
59048: LD_INT 81
59050: PUSH
59051: LD_VAR 0 3
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PPUSH
59060: CALL_OW 69
59064: IN
59065: IFFALSE 59115
59067: PUSH
59068: LD_EXP 58
59072: PUSH
59073: LD_VAR 0 1
59077: ARRAY
59078: PUSH
59079: LD_VAR 0 2
59083: ARRAY
59084: PUSH
59085: LD_INT 1
59087: ARRAY
59088: PPUSH
59089: LD_EXP 58
59093: PUSH
59094: LD_VAR 0 1
59098: ARRAY
59099: PUSH
59100: LD_VAR 0 2
59104: ARRAY
59105: PUSH
59106: LD_INT 2
59108: ARRAY
59109: PPUSH
59110: CALL_OW 458
59114: AND
59115: IFFALSE 59209
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59117: LD_EXP 58
59121: PUSH
59122: LD_VAR 0 1
59126: ARRAY
59127: PUSH
59128: LD_VAR 0 2
59132: ARRAY
59133: PUSH
59134: LD_INT 1
59136: ARRAY
59137: PPUSH
59138: LD_EXP 58
59142: PUSH
59143: LD_VAR 0 1
59147: ARRAY
59148: PUSH
59149: LD_VAR 0 2
59153: ARRAY
59154: PUSH
59155: LD_INT 2
59157: ARRAY
59158: PPUSH
59159: LD_VAR 0 3
59163: PPUSH
59164: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59168: LD_ADDR_EXP 58
59172: PUSH
59173: LD_EXP 58
59177: PPUSH
59178: LD_VAR 0 1
59182: PPUSH
59183: LD_EXP 58
59187: PUSH
59188: LD_VAR 0 1
59192: ARRAY
59193: PPUSH
59194: LD_VAR 0 2
59198: PPUSH
59199: CALL_OW 3
59203: PPUSH
59204: CALL_OW 1
59208: ST_TO_ADDR
// end ; end ;
59209: GO 58853
59211: POP
59212: POP
// end ;
59213: GO 58724
59215: POP
59216: POP
// end ;
59217: PPOPN 4
59219: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59220: LD_INT 0
59222: PPUSH
59223: PPUSH
59224: PPUSH
59225: PPUSH
// result := false ;
59226: LD_ADDR_VAR 0 4
59230: PUSH
59231: LD_INT 0
59233: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59234: LD_VAR 0 1
59238: PPUSH
59239: CALL_OW 264
59243: PUSH
59244: LD_INT 81
59246: EQUAL
59247: NOT
59248: IFFALSE 59252
// exit ;
59250: GO 59622
// side := GetSide ( unit ) ;
59252: LD_ADDR_VAR 0 6
59256: PUSH
59257: LD_VAR 0 1
59261: PPUSH
59262: CALL_OW 255
59266: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59267: LD_ADDR_VAR 0 5
59271: PUSH
59272: LD_EXP 57
59276: PPUSH
59277: LD_VAR 0 1
59281: PPUSH
59282: CALL 16283 0 2
59286: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59287: LD_EXP 58
59291: PUSH
59292: LD_VAR 0 5
59296: ARRAY
59297: PUSH
59298: LD_EXP 59
59302: GREATEREQUAL
59303: IFFALSE 59307
// exit ;
59305: GO 59622
// ComMoveXY ( unit , x , y ) ;
59307: LD_VAR 0 1
59311: PPUSH
59312: LD_VAR 0 2
59316: PPUSH
59317: LD_VAR 0 3
59321: PPUSH
59322: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59326: LD_INT 35
59328: PPUSH
59329: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59333: LD_VAR 0 1
59337: PPUSH
59338: LD_VAR 0 2
59342: PPUSH
59343: LD_VAR 0 3
59347: PPUSH
59348: CALL 48339 0 3
59352: NOT
59353: IFFALSE 59366
59355: PUSH
59356: LD_VAR 0 1
59360: PPUSH
59361: CALL_OW 314
59365: AND
59366: IFFALSE 59370
// exit ;
59368: GO 59622
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59370: LD_VAR 0 2
59374: PPUSH
59375: LD_VAR 0 3
59379: PPUSH
59380: CALL_OW 428
59384: PUSH
59385: LD_VAR 0 1
59389: EQUAL
59390: IFFALSE 59404
59392: PUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 314
59402: NOT
59403: AND
59404: IFFALSE 59326
// if MineAtPos ( x , y ) then
59406: LD_VAR 0 2
59410: PPUSH
59411: LD_VAR 0 3
59415: PPUSH
59416: CALL_OW 458
59420: IFFALSE 59424
// exit ;
59422: GO 59622
// if your_side = side then
59424: LD_OWVAR 2
59428: PUSH
59429: LD_VAR 0 6
59433: EQUAL
59434: IFFALSE 59453
// PlaySoundXY ( x , y , PlantMine ) ;
59436: LD_VAR 0 2
59440: PPUSH
59441: LD_VAR 0 3
59445: PPUSH
59446: LD_STRING PlantMine
59448: PPUSH
59449: CALL_OW 366
// repeat wait ( 1 ) ;
59453: LD_INT 1
59455: PPUSH
59456: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59460: LD_VAR 0 2
59464: PPUSH
59465: LD_VAR 0 3
59469: PPUSH
59470: LD_VAR 0 6
59474: PPUSH
59475: LD_INT 0
59477: PPUSH
59478: CALL_OW 454
59482: IFFALSE 59453
// if MineAtPos ( x , y ) then
59484: LD_VAR 0 2
59488: PPUSH
59489: LD_VAR 0 3
59493: PPUSH
59494: CALL_OW 458
59498: IFFALSE 59614
// begin for i in minerMinesList [ index ] do
59500: LD_ADDR_VAR 0 7
59504: PUSH
59505: LD_EXP 58
59509: PUSH
59510: LD_VAR 0 5
59514: ARRAY
59515: PUSH
59516: FOR_IN
59517: IFFALSE 59559
// if i [ 1 ] = x and i [ 2 ] = y then
59519: LD_VAR 0 7
59523: PUSH
59524: LD_INT 1
59526: ARRAY
59527: PUSH
59528: LD_VAR 0 2
59532: EQUAL
59533: IFFALSE 59551
59535: PUSH
59536: LD_VAR 0 7
59540: PUSH
59541: LD_INT 2
59543: ARRAY
59544: PUSH
59545: LD_VAR 0 3
59549: EQUAL
59550: AND
59551: IFFALSE 59557
// exit ;
59553: POP
59554: POP
59555: GO 59622
59557: GO 59516
59559: POP
59560: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59561: LD_ADDR_EXP 58
59565: PUSH
59566: LD_EXP 58
59570: PPUSH
59571: LD_VAR 0 5
59575: PUSH
59576: LD_EXP 58
59580: PUSH
59581: LD_VAR 0 5
59585: ARRAY
59586: PUSH
59587: LD_INT 1
59589: PLUS
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PPUSH
59595: LD_VAR 0 2
59599: PUSH
59600: LD_VAR 0 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PPUSH
59609: CALL 16500 0 3
59613: ST_TO_ADDR
// end ; result := true ;
59614: LD_ADDR_VAR 0 4
59618: PUSH
59619: LD_INT 1
59621: ST_TO_ADDR
// end ;
59622: LD_VAR 0 4
59626: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59627: LD_INT 0
59629: PPUSH
59630: PPUSH
59631: PPUSH
// if not unit in minersList then
59632: LD_VAR 0 1
59636: PUSH
59637: LD_EXP 57
59641: IN
59642: NOT
59643: IFFALSE 59647
// exit ;
59645: GO 59854
// index := GetElementIndex ( minersList , unit ) ;
59647: LD_ADDR_VAR 0 6
59651: PUSH
59652: LD_EXP 57
59656: PPUSH
59657: LD_VAR 0 1
59661: PPUSH
59662: CALL 16283 0 2
59666: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59667: LD_ADDR_VAR 0 5
59671: PUSH
59672: DOUBLE
59673: LD_EXP 58
59677: PUSH
59678: LD_VAR 0 6
59682: ARRAY
59683: INC
59684: ST_TO_ADDR
59685: LD_INT 1
59687: PUSH
59688: FOR_DOWNTO
59689: IFFALSE 59852
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59691: LD_EXP 58
59695: PUSH
59696: LD_VAR 0 6
59700: ARRAY
59701: PUSH
59702: LD_VAR 0 5
59706: ARRAY
59707: PUSH
59708: LD_INT 1
59710: ARRAY
59711: PPUSH
59712: LD_EXP 58
59716: PUSH
59717: LD_VAR 0 6
59721: ARRAY
59722: PUSH
59723: LD_VAR 0 5
59727: ARRAY
59728: PUSH
59729: LD_INT 2
59731: ARRAY
59732: PPUSH
59733: LD_VAR 0 2
59737: PPUSH
59738: LD_VAR 0 3
59742: PPUSH
59743: CALL_OW 298
59747: PUSH
59748: LD_INT 6
59750: LESS
59751: IFFALSE 59850
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59753: LD_EXP 58
59757: PUSH
59758: LD_VAR 0 6
59762: ARRAY
59763: PUSH
59764: LD_VAR 0 5
59768: ARRAY
59769: PUSH
59770: LD_INT 1
59772: ARRAY
59773: PPUSH
59774: LD_EXP 58
59778: PUSH
59779: LD_VAR 0 6
59783: ARRAY
59784: PUSH
59785: LD_VAR 0 5
59789: ARRAY
59790: PUSH
59791: LD_INT 2
59793: ARRAY
59794: PPUSH
59795: LD_VAR 0 1
59799: PPUSH
59800: CALL_OW 255
59804: PPUSH
59805: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59809: LD_ADDR_EXP 58
59813: PUSH
59814: LD_EXP 58
59818: PPUSH
59819: LD_VAR 0 6
59823: PPUSH
59824: LD_EXP 58
59828: PUSH
59829: LD_VAR 0 6
59833: ARRAY
59834: PPUSH
59835: LD_VAR 0 5
59839: PPUSH
59840: CALL_OW 3
59844: PPUSH
59845: CALL_OW 1
59849: ST_TO_ADDR
// end ; end ;
59850: GO 59688
59852: POP
59853: POP
// end ;
59854: LD_VAR 0 4
59858: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59859: LD_INT 0
59861: PPUSH
59862: PPUSH
59863: PPUSH
59864: PPUSH
59865: PPUSH
59866: PPUSH
59867: PPUSH
59868: PPUSH
59869: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59870: LD_VAR 0 1
59874: PPUSH
59875: CALL_OW 264
59879: PUSH
59880: LD_INT 81
59882: EQUAL
59883: NOT
59884: IFTRUE 59899
59886: PUSH
59887: LD_VAR 0 1
59891: PUSH
59892: LD_EXP 57
59896: IN
59897: NOT
59898: OR
59899: IFFALSE 59903
// exit ;
59901: GO 60229
// index := GetElementIndex ( minersList , unit ) ;
59903: LD_ADDR_VAR 0 6
59907: PUSH
59908: LD_EXP 57
59912: PPUSH
59913: LD_VAR 0 1
59917: PPUSH
59918: CALL 16283 0 2
59922: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59923: LD_ADDR_VAR 0 8
59927: PUSH
59928: LD_EXP 59
59932: PUSH
59933: LD_EXP 58
59937: PUSH
59938: LD_VAR 0 6
59942: ARRAY
59943: MINUS
59944: ST_TO_ADDR
// if not minesFreeAmount then
59945: LD_VAR 0 8
59949: NOT
59950: IFFALSE 59954
// exit ;
59952: GO 60229
// tmp := [ ] ;
59954: LD_ADDR_VAR 0 7
59958: PUSH
59959: EMPTY
59960: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59961: LD_ADDR_VAR 0 5
59965: PUSH
59966: DOUBLE
59967: LD_INT 1
59969: DEC
59970: ST_TO_ADDR
59971: LD_VAR 0 8
59975: PUSH
59976: FOR_TO
59977: IFFALSE 60176
// begin _d := rand ( 0 , 5 ) ;
59979: LD_ADDR_VAR 0 11
59983: PUSH
59984: LD_INT 0
59986: PPUSH
59987: LD_INT 5
59989: PPUSH
59990: CALL_OW 12
59994: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59995: LD_ADDR_VAR 0 12
59999: PUSH
60000: LD_INT 2
60002: PPUSH
60003: LD_INT 6
60005: PPUSH
60006: CALL_OW 12
60010: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60011: LD_ADDR_VAR 0 9
60015: PUSH
60016: LD_VAR 0 2
60020: PPUSH
60021: LD_VAR 0 11
60025: PPUSH
60026: LD_VAR 0 12
60030: PPUSH
60031: CALL_OW 272
60035: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60036: LD_ADDR_VAR 0 10
60040: PUSH
60041: LD_VAR 0 3
60045: PPUSH
60046: LD_VAR 0 11
60050: PPUSH
60051: LD_VAR 0 12
60055: PPUSH
60056: CALL_OW 273
60060: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60061: LD_VAR 0 9
60065: PPUSH
60066: LD_VAR 0 10
60070: PPUSH
60071: CALL_OW 488
60075: IFFALSE 60099
60077: PUSH
60078: LD_VAR 0 9
60082: PUSH
60083: LD_VAR 0 10
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_VAR 0 7
60096: IN
60097: NOT
60098: AND
60099: IFFALSE 60118
60101: PUSH
60102: LD_VAR 0 9
60106: PPUSH
60107: LD_VAR 0 10
60111: PPUSH
60112: CALL_OW 458
60116: NOT
60117: AND
60118: IFFALSE 60160
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60120: LD_ADDR_VAR 0 7
60124: PUSH
60125: LD_VAR 0 7
60129: PPUSH
60130: LD_VAR 0 7
60134: PUSH
60135: LD_INT 1
60137: PLUS
60138: PPUSH
60139: LD_VAR 0 9
60143: PUSH
60144: LD_VAR 0 10
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PPUSH
60153: CALL_OW 1
60157: ST_TO_ADDR
60158: GO 60174
// i := i - 1 ;
60160: LD_ADDR_VAR 0 5
60164: PUSH
60165: LD_VAR 0 5
60169: PUSH
60170: LD_INT 1
60172: MINUS
60173: ST_TO_ADDR
// end ;
60174: GO 59976
60176: POP
60177: POP
// for i in tmp do
60178: LD_ADDR_VAR 0 5
60182: PUSH
60183: LD_VAR 0 7
60187: PUSH
60188: FOR_IN
60189: IFFALSE 60227
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60191: LD_VAR 0 1
60195: PPUSH
60196: LD_VAR 0 5
60200: PUSH
60201: LD_INT 1
60203: ARRAY
60204: PPUSH
60205: LD_VAR 0 5
60209: PUSH
60210: LD_INT 2
60212: ARRAY
60213: PPUSH
60214: CALL 59220 0 3
60218: NOT
60219: IFFALSE 60225
// exit ;
60221: POP
60222: POP
60223: GO 60229
60225: GO 60188
60227: POP
60228: POP
// end ;
60229: LD_VAR 0 4
60233: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60234: LD_INT 0
60236: PPUSH
60237: PPUSH
60238: PPUSH
60239: PPUSH
60240: PPUSH
60241: PPUSH
60242: PPUSH
60243: PPUSH
60244: PPUSH
// if GetClass ( unit ) <> class_sniper then
60245: LD_VAR 0 1
60249: PPUSH
60250: CALL_OW 257
60254: PUSH
60255: LD_INT 5
60257: NONEQUAL
60258: IFFALSE 60262
// exit ;
60260: GO 60732
// dist := 8 ;
60262: LD_ADDR_VAR 0 5
60266: PUSH
60267: LD_INT 8
60269: ST_TO_ADDR
// viewRange := 12 ;
60270: LD_ADDR_VAR 0 8
60274: PUSH
60275: LD_INT 12
60277: ST_TO_ADDR
// side := GetSide ( unit ) ;
60278: LD_ADDR_VAR 0 6
60282: PUSH
60283: LD_VAR 0 1
60287: PPUSH
60288: CALL_OW 255
60292: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60293: LD_INT 61
60295: PPUSH
60296: LD_VAR 0 6
60300: PPUSH
60301: CALL_OW 321
60305: PUSH
60306: LD_INT 2
60308: EQUAL
60309: IFFALSE 60319
// viewRange := 16 ;
60311: LD_ADDR_VAR 0 8
60315: PUSH
60316: LD_INT 16
60318: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60319: LD_VAR 0 1
60323: PPUSH
60324: LD_VAR 0 2
60328: PPUSH
60329: LD_VAR 0 3
60333: PPUSH
60334: CALL_OW 297
60338: PUSH
60339: LD_VAR 0 5
60343: GREATER
60344: IFFALSE 60423
// begin ComMoveXY ( unit , x , y ) ;
60346: LD_VAR 0 1
60350: PPUSH
60351: LD_VAR 0 2
60355: PPUSH
60356: LD_VAR 0 3
60360: PPUSH
60361: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60365: LD_INT 35
60367: PPUSH
60368: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60372: LD_VAR 0 1
60376: PPUSH
60377: LD_VAR 0 2
60381: PPUSH
60382: LD_VAR 0 3
60386: PPUSH
60387: CALL 48339 0 3
60391: NOT
60392: IFFALSE 60396
// exit ;
60394: GO 60732
// until GetDistUnitXY ( unit , x , y ) < dist ;
60396: LD_VAR 0 1
60400: PPUSH
60401: LD_VAR 0 2
60405: PPUSH
60406: LD_VAR 0 3
60410: PPUSH
60411: CALL_OW 297
60415: PUSH
60416: LD_VAR 0 5
60420: LESS
60421: IFFALSE 60365
// end ; ComTurnXY ( unit , x , y ) ;
60423: LD_VAR 0 1
60427: PPUSH
60428: LD_VAR 0 2
60432: PPUSH
60433: LD_VAR 0 3
60437: PPUSH
60438: CALL_OW 118
// repeat if Multiplayer then
60442: LD_OWVAR 4
60446: IFFALSE 60457
// wait ( 35 ) else
60448: LD_INT 35
60450: PPUSH
60451: CALL_OW 67
60455: GO 60464
// wait ( 5 ) ;
60457: LD_INT 5
60459: PPUSH
60460: CALL_OW 67
// _d := GetDir ( unit ) ;
60464: LD_ADDR_VAR 0 11
60468: PUSH
60469: LD_VAR 0 1
60473: PPUSH
60474: CALL_OW 254
60478: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60479: LD_ADDR_VAR 0 7
60483: PUSH
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL_OW 250
60493: PPUSH
60494: LD_VAR 0 1
60498: PPUSH
60499: CALL_OW 251
60503: PPUSH
60504: LD_VAR 0 2
60508: PPUSH
60509: LD_VAR 0 3
60513: PPUSH
60514: CALL 50975 0 4
60518: ST_TO_ADDR
// until dir = _d ;
60519: LD_VAR 0 7
60523: PUSH
60524: LD_VAR 0 11
60528: EQUAL
60529: IFFALSE 60442
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60531: LD_ADDR_VAR 0 9
60535: PUSH
60536: LD_VAR 0 1
60540: PPUSH
60541: CALL_OW 250
60545: PPUSH
60546: LD_VAR 0 7
60550: PPUSH
60551: LD_VAR 0 5
60555: PPUSH
60556: CALL_OW 272
60560: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60561: LD_ADDR_VAR 0 10
60565: PUSH
60566: LD_VAR 0 1
60570: PPUSH
60571: CALL_OW 251
60575: PPUSH
60576: LD_VAR 0 7
60580: PPUSH
60581: LD_VAR 0 5
60585: PPUSH
60586: CALL_OW 273
60590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60591: LD_VAR 0 9
60595: PPUSH
60596: LD_VAR 0 10
60600: PPUSH
60601: CALL_OW 488
60605: NOT
60606: IFFALSE 60610
// exit ;
60608: GO 60732
// ComAnimCustom ( unit , 1 ) ;
60610: LD_VAR 0 1
60614: PPUSH
60615: LD_INT 1
60617: PPUSH
60618: CALL_OW 592
// p := 0 ;
60622: LD_ADDR_VAR 0 12
60626: PUSH
60627: LD_INT 0
60629: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60630: LD_VAR 0 9
60634: PPUSH
60635: LD_VAR 0 10
60639: PPUSH
60640: LD_VAR 0 6
60644: PPUSH
60645: LD_VAR 0 8
60649: PPUSH
60650: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60654: LD_INT 35
60656: PPUSH
60657: CALL_OW 67
// p := Inc ( p ) ;
60661: LD_ADDR_VAR 0 12
60665: PUSH
60666: LD_VAR 0 12
60670: PPUSH
60671: CALL 50931 0 1
60675: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60676: LD_VAR 0 12
60680: PUSH
60681: LD_INT 3
60683: EQUAL
60684: IFTRUE 60698
60686: PUSH
60687: LD_VAR 0 1
60691: PPUSH
60692: CALL_OW 302
60696: NOT
60697: OR
60698: IFTRUE 60711
60700: PUSH
60701: LD_VAR 0 1
60705: PPUSH
60706: CALL_OW 301
60710: OR
60711: IFFALSE 60654
// RemoveSeeing ( _x , _y , side ) ;
60713: LD_VAR 0 9
60717: PPUSH
60718: LD_VAR 0 10
60722: PPUSH
60723: LD_VAR 0 6
60727: PPUSH
60728: CALL_OW 331
// end ;
60732: LD_VAR 0 4
60736: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60737: LD_INT 0
60739: PPUSH
60740: PPUSH
60741: PPUSH
60742: PPUSH
60743: PPUSH
60744: PPUSH
60745: PPUSH
60746: PPUSH
60747: PPUSH
60748: PPUSH
60749: PPUSH
// if not unit then
60750: LD_VAR 0 1
60754: NOT
60755: IFFALSE 60759
// exit ;
60757: GO 61030
// side := GetSide ( unit ) ;
60759: LD_ADDR_VAR 0 3
60763: PUSH
60764: LD_VAR 0 1
60768: PPUSH
60769: CALL_OW 255
60773: ST_TO_ADDR
// x := GetX ( unit ) ;
60774: LD_ADDR_VAR 0 5
60778: PUSH
60779: LD_VAR 0 1
60783: PPUSH
60784: CALL_OW 250
60788: ST_TO_ADDR
// y := GetY ( unit ) ;
60789: LD_ADDR_VAR 0 6
60793: PUSH
60794: LD_VAR 0 1
60798: PPUSH
60799: CALL_OW 251
60803: ST_TO_ADDR
// r := 8 ;
60804: LD_ADDR_VAR 0 4
60808: PUSH
60809: LD_INT 8
60811: ST_TO_ADDR
// if x - r < 0 then
60812: LD_VAR 0 5
60816: PUSH
60817: LD_VAR 0 4
60821: MINUS
60822: PUSH
60823: LD_INT 0
60825: LESS
60826: IFFALSE 60838
// min_x := 0 else
60828: LD_ADDR_VAR 0 7
60832: PUSH
60833: LD_INT 0
60835: ST_TO_ADDR
60836: GO 60854
// min_x := x - r ;
60838: LD_ADDR_VAR 0 7
60842: PUSH
60843: LD_VAR 0 5
60847: PUSH
60848: LD_VAR 0 4
60852: MINUS
60853: ST_TO_ADDR
// if y - r < 0 then
60854: LD_VAR 0 6
60858: PUSH
60859: LD_VAR 0 4
60863: MINUS
60864: PUSH
60865: LD_INT 0
60867: LESS
60868: IFFALSE 60880
// min_y := 0 else
60870: LD_ADDR_VAR 0 8
60874: PUSH
60875: LD_INT 0
60877: ST_TO_ADDR
60878: GO 60896
// min_y := y - r ;
60880: LD_ADDR_VAR 0 8
60884: PUSH
60885: LD_VAR 0 6
60889: PUSH
60890: LD_VAR 0 4
60894: MINUS
60895: ST_TO_ADDR
// max_x := x + r ;
60896: LD_ADDR_VAR 0 9
60900: PUSH
60901: LD_VAR 0 5
60905: PUSH
60906: LD_VAR 0 4
60910: PLUS
60911: ST_TO_ADDR
// max_y := y + r ;
60912: LD_ADDR_VAR 0 10
60916: PUSH
60917: LD_VAR 0 6
60921: PUSH
60922: LD_VAR 0 4
60926: PLUS
60927: ST_TO_ADDR
// for _x = min_x to max_x do
60928: LD_ADDR_VAR 0 11
60932: PUSH
60933: DOUBLE
60934: LD_VAR 0 7
60938: DEC
60939: ST_TO_ADDR
60940: LD_VAR 0 9
60944: PUSH
60945: FOR_TO
60946: IFFALSE 61028
// for _y = min_y to max_y do
60948: LD_ADDR_VAR 0 12
60952: PUSH
60953: DOUBLE
60954: LD_VAR 0 8
60958: DEC
60959: ST_TO_ADDR
60960: LD_VAR 0 10
60964: PUSH
60965: FOR_TO
60966: IFFALSE 61024
// begin if not ValidHex ( _x , _y ) then
60968: LD_VAR 0 11
60972: PPUSH
60973: LD_VAR 0 12
60977: PPUSH
60978: CALL_OW 488
60982: NOT
60983: IFFALSE 60987
// continue ;
60985: GO 60965
// if MineAtPos ( _x , _y ) then
60987: LD_VAR 0 11
60991: PPUSH
60992: LD_VAR 0 12
60996: PPUSH
60997: CALL_OW 458
61001: IFFALSE 61022
// ViewMineAtPos ( _x , _y , side ) ;
61003: LD_VAR 0 11
61007: PPUSH
61008: LD_VAR 0 12
61012: PPUSH
61013: LD_VAR 0 3
61017: PPUSH
61018: CALL_OW 457
// end ;
61022: GO 60965
61024: POP
61025: POP
61026: GO 60945
61028: POP
61029: POP
// end ;
61030: LD_VAR 0 2
61034: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61035: LD_INT 0
61037: PPUSH
61038: PPUSH
61039: PPUSH
61040: PPUSH
61041: PPUSH
61042: PPUSH
61043: PPUSH
// if not units then
61044: LD_VAR 0 1
61048: NOT
61049: IFFALSE 61053
// exit ;
61051: GO 61517
// scaners := [ ] ;
61053: LD_ADDR_VAR 0 6
61057: PUSH
61058: EMPTY
61059: ST_TO_ADDR
// for i in units do
61060: LD_ADDR_VAR 0 3
61064: PUSH
61065: LD_VAR 0 1
61069: PUSH
61070: FOR_IN
61071: IFFALSE 61228
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61073: LD_VAR 0 3
61077: PPUSH
61078: CALL_OW 264
61082: PUSH
61083: LD_INT 11
61085: NONEQUAL
61086: IFTRUE 61100
61088: PUSH
61089: LD_VAR 0 3
61093: PPUSH
61094: CALL_OW 302
61098: NOT
61099: OR
61100: IFTRUE 61117
61102: PUSH
61103: LD_VAR 0 3
61107: PPUSH
61108: CALL_OW 110
61112: PUSH
61113: LD_INT 502
61115: EQUAL
61116: OR
61117: IFFALSE 61121
// continue ;
61119: GO 61070
// ComStop ( i ) ;
61121: LD_VAR 0 3
61125: PPUSH
61126: CALL_OW 141
// x := GetX ( i ) ;
61130: LD_ADDR_VAR 0 4
61134: PUSH
61135: LD_VAR 0 3
61139: PPUSH
61140: CALL_OW 250
61144: ST_TO_ADDR
// y := GetY ( i ) ;
61145: LD_ADDR_VAR 0 5
61149: PUSH
61150: LD_VAR 0 3
61154: PPUSH
61155: CALL_OW 251
61159: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61160: LD_VAR 0 3
61164: PPUSH
61165: CALL_OW 255
61169: PUSH
61170: LD_OWVAR 2
61174: EQUAL
61175: IFFALSE 61194
// PlaySoundXY ( x , y , mineDetector ) ;
61177: LD_VAR 0 4
61181: PPUSH
61182: LD_VAR 0 5
61186: PPUSH
61187: LD_STRING mineDetector
61189: PPUSH
61190: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61194: LD_ADDR_VAR 0 6
61198: PUSH
61199: LD_VAR 0 6
61203: PPUSH
61204: LD_VAR 0 3
61208: PPUSH
61209: CALL 49558 0 2
61213: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61214: LD_VAR 0 3
61218: PPUSH
61219: LD_INT 502
61221: PPUSH
61222: CALL_OW 109
// end ;
61226: GO 61070
61228: POP
61229: POP
// if not scaners then
61230: LD_VAR 0 6
61234: NOT
61235: IFFALSE 61239
// exit ;
61237: GO 61517
// wait ( 3 ) ;
61239: LD_INT 3
61241: PPUSH
61242: CALL_OW 67
// timer := 6 ;
61246: LD_ADDR_VAR 0 7
61250: PUSH
61251: LD_INT 6
61253: ST_TO_ADDR
// repeat for i in scaners do
61254: LD_ADDR_VAR 0 3
61258: PUSH
61259: LD_VAR 0 6
61263: PUSH
61264: FOR_IN
61265: IFFALSE 61415
// begin side := GetSide ( i ) ;
61267: LD_ADDR_VAR 0 8
61271: PUSH
61272: LD_VAR 0 3
61276: PPUSH
61277: CALL_OW 255
61281: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61282: LD_VAR 0 3
61286: PPUSH
61287: CALL_OW 302
61291: NOT
61292: IFTRUE 61305
61294: PUSH
61295: LD_VAR 0 3
61299: PPUSH
61300: CALL_OW 314
61304: OR
61305: IFTRUE 61336
61307: PUSH
61308: LD_VAR 0 3
61312: PPUSH
61313: CALL_OW 263
61317: PUSH
61318: LD_INT 1
61320: EQUAL
61321: IFFALSE 61335
61323: PUSH
61324: LD_VAR 0 3
61328: PPUSH
61329: CALL_OW 311
61333: NOT
61334: AND
61335: OR
61336: IFFALSE 61380
// begin SetUnitDisplayNumber ( i , 0 ) ;
61338: LD_VAR 0 3
61342: PPUSH
61343: LD_INT 0
61345: PPUSH
61346: CALL_OW 505
// SetTag ( i , 0 ) ;
61350: LD_VAR 0 3
61354: PPUSH
61355: LD_INT 0
61357: PPUSH
61358: CALL_OW 109
// scaners := scaners diff i ;
61362: LD_ADDR_VAR 0 6
61366: PUSH
61367: LD_VAR 0 6
61371: PUSH
61372: LD_VAR 0 3
61376: DIFF
61377: ST_TO_ADDR
// continue ;
61378: GO 61264
// end ; if side in [ your_side , 9 ] then
61380: LD_VAR 0 8
61384: PUSH
61385: LD_OWVAR 2
61389: PUSH
61390: LD_INT 9
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: IN
61397: IFFALSE 61413
// SetUnitDisplayNumber ( i , timer ) ;
61399: LD_VAR 0 3
61403: PPUSH
61404: LD_VAR 0 7
61408: PPUSH
61409: CALL_OW 505
// end ;
61413: GO 61264
61415: POP
61416: POP
// if not scaners then
61417: LD_VAR 0 6
61421: NOT
61422: IFFALSE 61426
// exit ;
61424: GO 61517
// timer := Dec ( timer ) ;
61426: LD_ADDR_VAR 0 7
61430: PUSH
61431: LD_VAR 0 7
61435: PPUSH
61436: CALL 50953 0 1
61440: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61441: LD_INT 35
61443: PPUSH
61444: CALL_OW 67
// until timer = 0 ;
61448: LD_VAR 0 7
61452: PUSH
61453: LD_INT 0
61455: EQUAL
61456: IFFALSE 61254
// if not scaners then
61458: LD_VAR 0 6
61462: NOT
61463: IFFALSE 61467
// exit ;
61465: GO 61517
// for i in scaners do
61467: LD_ADDR_VAR 0 3
61471: PUSH
61472: LD_VAR 0 6
61476: PUSH
61477: FOR_IN
61478: IFFALSE 61515
// begin SetUnitDisplayNumber ( i , 0 ) ;
61480: LD_VAR 0 3
61484: PPUSH
61485: LD_INT 0
61487: PPUSH
61488: CALL_OW 505
// SetTag ( i , 0 ) ;
61492: LD_VAR 0 3
61496: PPUSH
61497: LD_INT 0
61499: PPUSH
61500: CALL_OW 109
// RevealDetectorMine ( i ) ;
61504: LD_VAR 0 3
61508: PPUSH
61509: CALL 60737 0 1
// end ;
61513: GO 61477
61515: POP
61516: POP
// end ;
61517: LD_VAR 0 2
61521: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61522: LD_INT 0
61524: PPUSH
// if p1 = mine_detector_mode then
61525: LD_VAR 0 2
61529: PUSH
61530: LD_INT 103
61532: EQUAL
61533: IFFALSE 61544
// DetectMine ( units ) ;
61535: LD_VAR 0 1
61539: PPUSH
61540: CALL 61035 0 1
// end ; end_of_file
61544: LD_VAR 0 7
61548: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61549: LD_EXP 39
61553: IFFALSE 61894
61555: GO 61557
61557: DISABLE
61558: LD_INT 0
61560: PPUSH
61561: PPUSH
61562: PPUSH
// begin mpKingPoints := [ ] ;
61563: LD_ADDR_EXP 60
61567: PUSH
61568: EMPTY
61569: ST_TO_ADDR
// if mpTeamGame then
61570: LD_EXP 11
61574: IFFALSE 61628
// begin for i := 1 to Count ( mpTeams ) do
61576: LD_ADDR_VAR 0 1
61580: PUSH
61581: DOUBLE
61582: LD_INT 1
61584: DEC
61585: ST_TO_ADDR
61586: LD_EXP 10
61590: PPUSH
61591: CALL 13582 0 1
61595: PUSH
61596: FOR_TO
61597: IFFALSE 61624
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61599: LD_ADDR_EXP 60
61603: PUSH
61604: LD_EXP 60
61608: PPUSH
61609: LD_VAR 0 1
61613: PPUSH
61614: LD_INT 0
61616: PPUSH
61617: CALL_OW 1
61621: ST_TO_ADDR
61622: GO 61596
61624: POP
61625: POP
// end else
61626: GO 61671
// begin for i := 1 to 8 do
61628: LD_ADDR_VAR 0 1
61632: PUSH
61633: DOUBLE
61634: LD_INT 1
61636: DEC
61637: ST_TO_ADDR
61638: LD_INT 8
61640: PUSH
61641: FOR_TO
61642: IFFALSE 61669
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61644: LD_ADDR_EXP 60
61648: PUSH
61649: LD_EXP 60
61653: PPUSH
61654: LD_VAR 0 1
61658: PPUSH
61659: LD_INT 0
61661: PPUSH
61662: CALL_OW 1
61666: ST_TO_ADDR
61667: GO 61641
61669: POP
61670: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61671: LD_ADDR_VAR 0 3
61675: PUSH
61676: LD_EXP 2
61680: PPUSH
61681: LD_INT 0
61683: PPUSH
61684: CALL_OW 517
61688: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61689: LD_ADDR_VAR 0 1
61693: PUSH
61694: DOUBLE
61695: LD_INT 1
61697: DEC
61698: ST_TO_ADDR
61699: LD_VAR 0 3
61703: PUSH
61704: LD_INT 1
61706: ARRAY
61707: PUSH
61708: FOR_TO
61709: IFFALSE 61776
// for j := 1 to 8 do
61711: LD_ADDR_VAR 0 2
61715: PUSH
61716: DOUBLE
61717: LD_INT 1
61719: DEC
61720: ST_TO_ADDR
61721: LD_INT 8
61723: PUSH
61724: FOR_TO
61725: IFFALSE 61772
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61727: LD_VAR 0 3
61731: PUSH
61732: LD_INT 1
61734: ARRAY
61735: PUSH
61736: LD_VAR 0 1
61740: ARRAY
61741: PPUSH
61742: LD_VAR 0 3
61746: PUSH
61747: LD_INT 2
61749: ARRAY
61750: PUSH
61751: LD_VAR 0 1
61755: ARRAY
61756: PPUSH
61757: LD_VAR 0 2
61761: PPUSH
61762: LD_INT 12
61764: NEG
61765: PPUSH
61766: CALL_OW 330
61770: GO 61724
61772: POP
61773: POP
61774: GO 61708
61776: POP
61777: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61778: LD_EXP 34
61782: PPUSH
61783: LD_INT 1
61785: PPUSH
61786: CALL_OW 424
// UpdateCounter ;
61790: CALL 62400 0 0
// repeat wait ( 0 0$1 ) ;
61794: LD_INT 35
61796: PPUSH
61797: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61801: LD_ADDR_VAR 0 3
61805: PUSH
61806: LD_EXP 34
61810: PPUSH
61811: LD_INT 3
61813: PUSH
61814: LD_INT 57
61816: PUSH
61817: EMPTY
61818: LIST
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 50
61826: PUSH
61827: EMPTY
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: LD_INT 30
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 30
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: LIST
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: PPUSH
61863: CALL_OW 70
61867: ST_TO_ADDR
// if not tmp then
61868: LD_VAR 0 3
61872: NOT
61873: IFFALSE 61877
// continue ;
61875: GO 61794
// AddPoints ( tmp ) ;
61877: LD_VAR 0 3
61881: PPUSH
61882: CALL 62078 0 1
// UpdateCounter ;
61886: CALL 62400 0 0
// until false ;
61890: LD_INT 0
61892: IFFALSE 61794
// end ;
61894: PPOPN 3
61896: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61897: LD_EXP 39
61901: IFFALSE 61909
61903: PUSH
61904: LD_EXP 37
61908: AND
61909: IFFALSE 62075
61911: GO 61913
61913: DISABLE
61914: LD_INT 0
61916: PPUSH
61917: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61918: LD_ADDR_VAR 0 2
61922: PUSH
61923: LD_EXP 2
61927: PPUSH
61928: LD_INT 0
61930: PPUSH
61931: CALL_OW 517
61935: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61936: LD_ADDR_VAR 0 1
61940: PUSH
61941: DOUBLE
61942: LD_INT 1
61944: DEC
61945: ST_TO_ADDR
61946: LD_VAR 0 2
61950: PUSH
61951: LD_INT 1
61953: ARRAY
61954: PUSH
61955: FOR_TO
61956: IFFALSE 61997
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61958: LD_VAR 0 2
61962: PUSH
61963: LD_INT 1
61965: ARRAY
61966: PUSH
61967: LD_VAR 0 1
61971: ARRAY
61972: PPUSH
61973: LD_VAR 0 2
61977: PUSH
61978: LD_INT 2
61980: ARRAY
61981: PUSH
61982: LD_VAR 0 1
61986: ARRAY
61987: PPUSH
61988: LD_INT 125
61990: PPUSH
61991: CALL_OW 495
61995: GO 61955
61997: POP
61998: POP
// repeat wait ( mpEmissions ) ;
61999: LD_EXP 37
62003: PPUSH
62004: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
62008: LD_ADDR_VAR 0 1
62012: PUSH
62013: DOUBLE
62014: LD_INT 1
62016: DEC
62017: ST_TO_ADDR
62018: LD_VAR 0 2
62022: PUSH
62023: LD_INT 1
62025: ARRAY
62026: PUSH
62027: FOR_TO
62028: IFFALSE 62069
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62030: LD_VAR 0 2
62034: PUSH
62035: LD_INT 1
62037: ARRAY
62038: PUSH
62039: LD_VAR 0 1
62043: ARRAY
62044: PPUSH
62045: LD_VAR 0 2
62049: PUSH
62050: LD_INT 2
62052: ARRAY
62053: PUSH
62054: LD_VAR 0 1
62058: ARRAY
62059: PPUSH
62060: LD_INT 15
62062: PPUSH
62063: CALL_OW 495
62067: GO 62027
62069: POP
62070: POP
// until false ;
62071: LD_INT 0
62073: IFFALSE 61999
// end ;
62075: PPOPN 2
62077: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62078: LD_INT 0
62080: PPUSH
62081: PPUSH
62082: PPUSH
62083: PPUSH
62084: PPUSH
// if mpTeamGame then
62085: LD_EXP 11
62089: IFFALSE 62286
// begin first := depots [ 1 ] ;
62091: LD_ADDR_VAR 0 4
62095: PUSH
62096: LD_VAR 0 1
62100: PUSH
62101: LD_INT 1
62103: ARRAY
62104: ST_TO_ADDR
// side := GetSide ( first ) ;
62105: LD_ADDR_VAR 0 6
62109: PUSH
62110: LD_VAR 0 4
62114: PPUSH
62115: CALL_OW 255
62119: ST_TO_ADDR
// for i := 1 to mpTeams do
62120: LD_ADDR_VAR 0 3
62124: PUSH
62125: DOUBLE
62126: LD_INT 1
62128: DEC
62129: ST_TO_ADDR
62130: LD_EXP 10
62134: PUSH
62135: FOR_TO
62136: IFFALSE 62170
// if side in mpTeams [ i ] then
62138: LD_VAR 0 6
62142: PUSH
62143: LD_EXP 10
62147: PUSH
62148: LD_VAR 0 3
62152: ARRAY
62153: IN
62154: IFFALSE 62168
// begin team := i ;
62156: LD_ADDR_VAR 0 5
62160: PUSH
62161: LD_VAR 0 3
62165: ST_TO_ADDR
// break ;
62166: GO 62170
// end ;
62168: GO 62135
62170: POP
62171: POP
// if not team then
62172: LD_VAR 0 5
62176: NOT
62177: IFFALSE 62181
// exit ;
62179: GO 62395
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62181: LD_EXP 34
62185: PPUSH
62186: LD_INT 81
62188: PUSH
62189: LD_VAR 0 6
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PPUSH
62198: CALL_OW 70
62202: IFFALSE 62206
// exit ;
62204: GO 62395
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62206: LD_ADDR_EXP 60
62210: PUSH
62211: LD_EXP 60
62215: PPUSH
62216: LD_VAR 0 5
62220: PPUSH
62221: LD_EXP 60
62225: PUSH
62226: LD_VAR 0 5
62230: ARRAY
62231: PUSH
62232: LD_INT 1
62234: PLUS
62235: PPUSH
62236: CALL_OW 1
62240: ST_TO_ADDR
// for i in mpTeams [ team ] do
62241: LD_ADDR_VAR 0 3
62245: PUSH
62246: LD_EXP 10
62250: PUSH
62251: LD_VAR 0 5
62255: ARRAY
62256: PUSH
62257: FOR_IN
62258: IFFALSE 62282
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62260: LD_VAR 0 3
62264: PPUSH
62265: LD_EXP 60
62269: PUSH
62270: LD_VAR 0 5
62274: ARRAY
62275: PPUSH
62276: CALL_OW 506
62280: GO 62257
62282: POP
62283: POP
// end else
62284: GO 62395
// begin first := depots [ 1 ] ;
62286: LD_ADDR_VAR 0 4
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: LD_INT 1
62298: ARRAY
62299: ST_TO_ADDR
// side := GetSide ( first ) ;
62300: LD_ADDR_VAR 0 6
62304: PUSH
62305: LD_VAR 0 4
62309: PPUSH
62310: CALL_OW 255
62314: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62315: LD_EXP 34
62319: PPUSH
62320: LD_INT 81
62322: PUSH
62323: LD_VAR 0 6
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PPUSH
62332: CALL_OW 70
62336: IFFALSE 62340
// exit ;
62338: GO 62395
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62340: LD_ADDR_EXP 60
62344: PUSH
62345: LD_EXP 60
62349: PPUSH
62350: LD_VAR 0 6
62354: PPUSH
62355: LD_EXP 60
62359: PUSH
62360: LD_VAR 0 6
62364: ARRAY
62365: PUSH
62366: LD_INT 1
62368: PLUS
62369: PPUSH
62370: CALL_OW 1
62374: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62375: LD_VAR 0 6
62379: PPUSH
62380: LD_EXP 60
62384: PUSH
62385: LD_VAR 0 6
62389: ARRAY
62390: PPUSH
62391: CALL_OW 506
// end ; end ;
62395: LD_VAR 0 2
62399: RET
// function UpdateCounter ; var i ; begin
62400: LD_INT 0
62402: PPUSH
62403: PPUSH
// result := [ ] ;
62404: LD_ADDR_VAR 0 1
62408: PUSH
62409: EMPTY
62410: ST_TO_ADDR
// if mpTeamGame then
62411: LD_EXP 11
62415: IFFALSE 62482
// begin for i := 1 to mpTeams do
62417: LD_ADDR_VAR 0 2
62421: PUSH
62422: DOUBLE
62423: LD_INT 1
62425: DEC
62426: ST_TO_ADDR
62427: LD_EXP 10
62431: PUSH
62432: FOR_TO
62433: IFFALSE 62478
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62435: LD_ADDR_VAR 0 1
62439: PUSH
62440: LD_VAR 0 1
62444: PUSH
62445: LD_STRING #KingoftheHill-Team
62447: PUSH
62448: LD_VAR 0 2
62452: PUSH
62453: LD_EXP 60
62457: PUSH
62458: LD_VAR 0 2
62462: ARRAY
62463: PUSH
62464: LD_EXP 35
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ADD
62475: ST_TO_ADDR
62476: GO 62432
62478: POP
62479: POP
// end else
62480: GO 62555
// begin for i := 1 to 8 do
62482: LD_ADDR_VAR 0 2
62486: PUSH
62487: DOUBLE
62488: LD_INT 1
62490: DEC
62491: ST_TO_ADDR
62492: LD_INT 8
62494: PUSH
62495: FOR_TO
62496: IFFALSE 62553
// if mpSidePositions [ i ] then
62498: LD_EXP 7
62502: PUSH
62503: LD_VAR 0 2
62507: ARRAY
62508: IFFALSE 62551
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62510: LD_ADDR_VAR 0 1
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_STRING #KingoftheHill-Player
62522: PUSH
62523: LD_VAR 0 2
62527: PUSH
62528: LD_EXP 60
62532: PUSH
62533: LD_VAR 0 2
62537: ARRAY
62538: PUSH
62539: LD_EXP 35
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: ADD
62550: ST_TO_ADDR
62551: GO 62495
62553: POP
62554: POP
// end ; mpDisplayStrings := result ;
62555: LD_ADDR_EXP 38
62559: PUSH
62560: LD_VAR 0 1
62564: ST_TO_ADDR
// end ;
62565: LD_VAR 0 1
62569: RET
// export function HowMuchPointsKing ( side ) ; begin
62570: LD_INT 0
62572: PPUSH
// result := HowMuchPoints ( side ) ;
62573: LD_ADDR_VAR 0 2
62577: PUSH
62578: LD_VAR 0 1
62582: PPUSH
62583: CALL 62593 0 1
62587: ST_TO_ADDR
// end ;
62588: LD_VAR 0 2
62592: RET
// function HowMuchPoints ( side ) ; var i ; begin
62593: LD_INT 0
62595: PPUSH
62596: PPUSH
// if mpTeamGame then
62597: LD_EXP 11
62601: IFFALSE 62670
// begin for i := 1 to Count ( mpTeams ) do
62603: LD_ADDR_VAR 0 3
62607: PUSH
62608: DOUBLE
62609: LD_INT 1
62611: DEC
62612: ST_TO_ADDR
62613: LD_EXP 10
62617: PPUSH
62618: CALL 13582 0 1
62622: PUSH
62623: FOR_TO
62624: IFFALSE 62666
// begin if side in mpTeams [ i ] then
62626: LD_VAR 0 1
62630: PUSH
62631: LD_EXP 10
62635: PUSH
62636: LD_VAR 0 3
62640: ARRAY
62641: IN
62642: IFFALSE 62664
// begin result := mpKingPoints [ i ] ;
62644: LD_ADDR_VAR 0 2
62648: PUSH
62649: LD_EXP 60
62653: PUSH
62654: LD_VAR 0 3
62658: ARRAY
62659: ST_TO_ADDR
// exit ;
62660: POP
62661: POP
62662: GO 62686
// end ; end ;
62664: GO 62623
62666: POP
62667: POP
// end else
62668: GO 62686
// result := mpKingPoints [ side ] ;
62670: LD_ADDR_VAR 0 2
62674: PUSH
62675: LD_EXP 60
62679: PUSH
62680: LD_VAR 0 1
62684: ARRAY
62685: ST_TO_ADDR
// end ;
62686: LD_VAR 0 2
62690: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62691: LD_EXP 39
62695: IFFALSE 62703
62697: PUSH
62698: CALL 63115 0 0
62702: AND
62703: IFFALSE 62711
62705: PUSH
62706: LD_OWVAR 4
62710: AND
62711: IFFALSE 62964
62713: GO 62715
62715: DISABLE
62716: LD_INT 0
62718: PPUSH
62719: PPUSH
// begin canWin := false ;
62720: LD_ADDR_VAR 0 2
62724: PUSH
62725: LD_INT 0
62727: ST_TO_ADDR
// if not HasPower ( your_side ) then
62728: LD_OWVAR 2
62732: PPUSH
62733: CALL 63157 0 1
62737: NOT
62738: IFFALSE 62749
// begin Multiplayer_Loose_Message ;
62740: CALL_OW 521
// enable ( mpLose ) ;
62744: LD_INT 102
62746: ENABLE_MARKED
// end else
62747: GO 62964
// begin if not EnemiesInGame then
62749: CALL 62967 0 0
62753: NOT
62754: IFFALSE 62761
// begin enable ( mpWin ) ;
62756: LD_INT 101
62758: ENABLE_MARKED
// exit ;
62759: GO 62964
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62761: LD_ADDR_VAR 0 2
62765: PUSH
62766: LD_OWVAR 2
62770: PPUSH
62771: CALL 62593 0 1
62775: PUSH
62776: LD_EXP 35
62780: GREATEREQUAL
62781: IFFALSE 62794
62783: PUSH
62784: LD_OWVAR 2
62788: PPUSH
62789: CALL 63157 0 1
62793: AND
62794: ST_TO_ADDR
// for i := 1 to 8 do
62795: LD_ADDR_VAR 0 1
62799: PUSH
62800: DOUBLE
62801: LD_INT 1
62803: DEC
62804: ST_TO_ADDR
62805: LD_INT 8
62807: PUSH
62808: FOR_TO
62809: IFFALSE 62950
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62811: LD_EXP 7
62815: PUSH
62816: LD_VAR 0 1
62820: ARRAY
62821: IFFALSE 62834
62823: PUSH
62824: LD_VAR 0 1
62828: PPUSH
62829: CALL_OW 108
62833: AND
62834: IFFALSE 62848
62836: PUSH
62837: LD_VAR 0 1
62841: PUSH
62842: LD_OWVAR 2
62846: NONEQUAL
62847: AND
62848: IFFALSE 62948
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62850: LD_EXP 8
62854: PUSH
62855: LD_VAR 0 1
62859: ARRAY
62860: NOT
62861: IFTRUE 62909
62863: PUSH
62864: LD_EXP 8
62868: PUSH
62869: LD_VAR 0 1
62873: ARRAY
62874: PUSH
62875: LD_EXP 8
62879: PUSH
62880: LD_OWVAR 2
62884: ARRAY
62885: NONEQUAL
62886: IFFALSE 62908
62888: PUSH
62889: LD_OWVAR 2
62893: PPUSH
62894: LD_VAR 0 1
62898: PPUSH
62899: CALL_OW 81
62903: PUSH
62904: LD_INT 1
62906: NONEQUAL
62907: AND
62908: OR
62909: IFFALSE 62948
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62911: LD_VAR 0 1
62915: PPUSH
62916: CALL 62593 0 1
62920: PUSH
62921: LD_EXP 35
62925: GREATEREQUAL
62926: IFFALSE 62939
62928: PUSH
62929: LD_VAR 0 1
62933: PPUSH
62934: CALL 63157 0 1
62938: AND
62939: IFFALSE 62948
// begin enable ( mpLose ) ;
62941: LD_INT 102
62943: ENABLE_MARKED
// exit ;
62944: POP
62945: POP
62946: GO 62964
// end ;
62948: GO 62808
62950: POP
62951: POP
// if canWin then
62952: LD_VAR 0 2
62956: IFFALSE 62963
// enable ( mpWin ) else
62958: LD_INT 101
62960: ENABLE_MARKED
62961: GO 62964
// enable ;
62963: ENABLE
// end ; end ;
62964: PPOPN 2
62966: END
// function EnemiesInGame ; var i ; begin
62967: LD_INT 0
62969: PPUSH
62970: PPUSH
// result := false ;
62971: LD_ADDR_VAR 0 1
62975: PUSH
62976: LD_INT 0
62978: ST_TO_ADDR
// for i := 1 to 8 do
62979: LD_ADDR_VAR 0 2
62983: PUSH
62984: DOUBLE
62985: LD_INT 1
62987: DEC
62988: ST_TO_ADDR
62989: LD_INT 8
62991: PUSH
62992: FOR_TO
62993: IFFALSE 63108
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62995: LD_VAR 0 2
62999: PUSH
63000: LD_OWVAR 2
63004: NONEQUAL
63005: IFFALSE 63018
63007: PUSH
63008: LD_VAR 0 2
63012: PPUSH
63013: CALL 63157 0 1
63017: AND
63018: IFFALSE 63031
63020: PUSH
63021: LD_VAR 0 2
63025: PPUSH
63026: CALL_OW 108
63030: AND
63031: IFFALSE 63106
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63033: LD_EXP 8
63037: PUSH
63038: LD_VAR 0 2
63042: ARRAY
63043: NOT
63044: IFTRUE 63092
63046: PUSH
63047: LD_EXP 8
63051: PUSH
63052: LD_VAR 0 2
63056: ARRAY
63057: PUSH
63058: LD_EXP 8
63062: PUSH
63063: LD_OWVAR 2
63067: ARRAY
63068: NONEQUAL
63069: IFFALSE 63091
63071: PUSH
63072: LD_OWVAR 2
63076: PPUSH
63077: LD_VAR 0 2
63081: PPUSH
63082: CALL_OW 81
63086: PUSH
63087: LD_INT 1
63089: NONEQUAL
63090: AND
63091: OR
63092: IFFALSE 63106
// begin result := true ;
63094: LD_ADDR_VAR 0 1
63098: PUSH
63099: LD_INT 1
63101: ST_TO_ADDR
// exit ;
63102: POP
63103: POP
63104: GO 63110
// end ;
63106: GO 62992
63108: POP
63109: POP
// end ;
63110: LD_VAR 0 1
63114: RET
// function CanWinLoose ; begin
63115: LD_INT 0
63117: PPUSH
// result := true ;
63118: LD_ADDR_VAR 0 1
63122: PUSH
63123: LD_INT 1
63125: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63126: CALL_OW 531
63130: IFFALSE 63142
63132: PUSH
63133: CALL_OW 519
63137: PUSH
63138: LD_INT 1
63140: GREATER
63141: AND
63142: IFFALSE 63152
// result := false ;
63144: LD_ADDR_VAR 0 1
63148: PUSH
63149: LD_INT 0
63151: ST_TO_ADDR
// end ;
63152: LD_VAR 0 1
63156: RET
// function HasPower ( i ) ; begin
63157: LD_INT 0
63159: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63160: LD_ADDR_VAR 0 2
63164: PUSH
63165: LD_INT 22
63167: PUSH
63168: LD_VAR 0 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: LD_INT 21
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 33
63192: PUSH
63193: LD_INT 3
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 33
63202: PUSH
63203: LD_INT 5
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PPUSH
63220: CALL_OW 69
63224: ST_TO_ADDR
// end ; end_of_file
63225: LD_VAR 0 2
63229: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63230: PPOPN 6
63232: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63233: LD_INT 0
63235: PPUSH
// begin if not units then
63236: LD_VAR 0 1
63240: NOT
63241: IFFALSE 63245
// exit ;
63243: GO 63279
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63245: LD_VAR 0 1
63249: PPUSH
63250: LD_VAR 0 2
63254: PPUSH
63255: LD_VAR 0 3
63259: PPUSH
63260: LD_VAR 0 4
63264: PPUSH
63265: LD_VAR 0 5
63269: PPUSH
63270: LD_VAR 0 6
63274: PPUSH
63275: CALL 61522 0 6
// end ;
63279: PPOPN 7
63281: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63282: LD_EXP 3
63286: PUSH
63287: LD_INT 4
63289: EQUAL
63290: IFFALSE 63326
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63292: LD_STRING setGameDifficulty(
63294: PUSH
63295: LD_OWVAR 67
63299: STR
63300: PUSH
63301: LD_STRING )
63303: STR
63304: PPUSH
63305: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63309: LD_STRING displayDifficulty(
63311: PUSH
63312: LD_OWVAR 67
63316: STR
63317: PUSH
63318: LD_STRING )
63320: STR
63321: PPUSH
63322: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63326: CALL 63355 0 0
// end ; end_of_file
63330: PPOPN 1
63332: END
// every 0 0$1 do
63333: GO 63335
63335: DISABLE
// begin enable ;
63336: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63337: LD_STRING updateTimer(
63339: PUSH
63340: LD_OWVAR 1
63344: STR
63345: PUSH
63346: LD_STRING );
63348: STR
63349: PPUSH
63350: CALL_OW 559
// end ;
63354: END
// export function SOS_MapStart ( ) ; begin
63355: LD_INT 0
63357: PPUSH
// UpdateFactoryWaypoints ( ) ;
63358: CALL 64289 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63362: CALL 64541 0 0
// ParseMultiDataToLua ( ) ;
63366: CALL 64688 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63370: LD_STRING setSpecLogoNumber(
63372: PUSH
63373: LD_INT 2
63375: STR
63376: PUSH
63377: LD_STRING ,
63379: STR
63380: PUSH
63381: LD_INT 1
63383: STR
63384: PUSH
63385: LD_STRING )
63387: STR
63388: PPUSH
63389: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63393: LD_STRING setSpecLogoNumber(
63395: PUSH
63396: LD_INT 3
63398: STR
63399: PUSH
63400: LD_STRING ,
63402: STR
63403: PUSH
63404: LD_INT 2
63406: STR
63407: PUSH
63408: LD_STRING )
63410: STR
63411: PPUSH
63412: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63416: LD_STRING setSpecLogoNumber(
63418: PUSH
63419: LD_INT 4
63421: STR
63422: PUSH
63423: LD_STRING ,
63425: STR
63426: PUSH
63427: LD_INT 3
63429: STR
63430: PUSH
63431: LD_STRING )
63433: STR
63434: PPUSH
63435: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63439: LD_STRING setSpecLogoNumber(
63441: PUSH
63442: LD_INT 5
63444: STR
63445: PUSH
63446: LD_STRING ,
63448: STR
63449: PUSH
63450: LD_INT 4
63452: STR
63453: PUSH
63454: LD_STRING )
63456: STR
63457: PPUSH
63458: CALL_OW 559
// end ;
63462: LD_VAR 0 1
63466: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63467: LD_INT 0
63469: PPUSH
63470: PPUSH
63471: PPUSH
63472: PPUSH
63473: PPUSH
63474: PPUSH
63475: PPUSH
63476: PPUSH
63477: PPUSH
// for i := 1 to 8 do
63478: LD_ADDR_VAR 0 2
63482: PUSH
63483: DOUBLE
63484: LD_INT 1
63486: DEC
63487: ST_TO_ADDR
63488: LD_INT 8
63490: PUSH
63491: FOR_TO
63492: IFFALSE 63877
// begin if mpSidePositions [ i ] then
63494: LD_EXP 7
63498: PUSH
63499: LD_VAR 0 2
63503: ARRAY
63504: IFFALSE 63875
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63506: LD_ADDR_VAR 0 7
63510: PUSH
63511: LD_INT 22
63513: PUSH
63514: LD_VAR 0 2
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 21
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PPUSH
63537: CALL_OW 69
63541: PPUSH
63542: CALL 13582 0 1
63546: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63547: LD_ADDR_VAR 0 9
63551: PUSH
63552: LD_INT 22
63554: PUSH
63555: LD_VAR 0 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: LD_INT 30
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 30
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PPUSH
63596: CALL_OW 69
63600: ST_TO_ADDR
// crates := 0 ;
63601: LD_ADDR_VAR 0 4
63605: PUSH
63606: LD_INT 0
63608: ST_TO_ADDR
// oil := 0 ;
63609: LD_ADDR_VAR 0 5
63613: PUSH
63614: LD_INT 0
63616: ST_TO_ADDR
// sib := 0 ;
63617: LD_ADDR_VAR 0 6
63621: PUSH
63622: LD_INT 0
63624: ST_TO_ADDR
// if bases then
63625: LD_VAR 0 9
63629: IFFALSE 63735
// begin for j in bases do
63631: LD_ADDR_VAR 0 3
63635: PUSH
63636: LD_VAR 0 9
63640: PUSH
63641: FOR_IN
63642: IFFALSE 63733
// begin base := GetBase ( j ) ;
63644: LD_ADDR_VAR 0 8
63648: PUSH
63649: LD_VAR 0 3
63653: PPUSH
63654: CALL_OW 274
63658: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63659: LD_ADDR_VAR 0 4
63663: PUSH
63664: LD_VAR 0 4
63668: PUSH
63669: LD_VAR 0 8
63673: PPUSH
63674: LD_INT 1
63676: PPUSH
63677: CALL_OW 275
63681: PLUS
63682: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63683: LD_ADDR_VAR 0 5
63687: PUSH
63688: LD_VAR 0 5
63692: PUSH
63693: LD_VAR 0 8
63697: PPUSH
63698: LD_INT 2
63700: PPUSH
63701: CALL_OW 275
63705: PLUS
63706: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63707: LD_ADDR_VAR 0 6
63711: PUSH
63712: LD_VAR 0 6
63716: PUSH
63717: LD_VAR 0 8
63721: PPUSH
63722: LD_INT 3
63724: PPUSH
63725: CALL_OW 275
63729: PLUS
63730: ST_TO_ADDR
// end ;
63731: GO 63641
63733: POP
63734: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63735: LD_STRING setSpecText(
63737: PUSH
63738: LD_VAR 0 2
63742: STR
63743: PUSH
63744: LD_STRING ,
63746: STR
63747: PUSH
63748: LD_INT 2
63750: STR
63751: PUSH
63752: LD_STRING ,
63754: STR
63755: PUSH
63756: LD_VAR 0 4
63760: STR
63761: PUSH
63762: LD_STRING )
63764: STR
63765: PPUSH
63766: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63770: LD_STRING setSpecText(
63772: PUSH
63773: LD_VAR 0 2
63777: STR
63778: PUSH
63779: LD_STRING ,
63781: STR
63782: PUSH
63783: LD_INT 3
63785: STR
63786: PUSH
63787: LD_STRING ,
63789: STR
63790: PUSH
63791: LD_VAR 0 5
63795: STR
63796: PUSH
63797: LD_STRING )
63799: STR
63800: PPUSH
63801: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63805: LD_STRING setSpecText(
63807: PUSH
63808: LD_VAR 0 2
63812: STR
63813: PUSH
63814: LD_STRING ,
63816: STR
63817: PUSH
63818: LD_INT 4
63820: STR
63821: PUSH
63822: LD_STRING ,
63824: STR
63825: PUSH
63826: LD_VAR 0 6
63830: STR
63831: PUSH
63832: LD_STRING )
63834: STR
63835: PPUSH
63836: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63840: LD_STRING setSpecText(
63842: PUSH
63843: LD_VAR 0 2
63847: STR
63848: PUSH
63849: LD_STRING ,
63851: STR
63852: PUSH
63853: LD_INT 5
63855: STR
63856: PUSH
63857: LD_STRING ,
63859: STR
63860: PUSH
63861: LD_VAR 0 7
63865: STR
63866: PUSH
63867: LD_STRING )
63869: STR
63870: PPUSH
63871: CALL_OW 559
// end ; end ;
63875: GO 63491
63877: POP
63878: POP
// end ;
63879: LD_VAR 0 1
63883: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63884: LD_INT 2
63886: PUSH
63887: LD_INT 30
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 30
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: PPUSH
63912: CALL_OW 69
63916: IFFALSE 63926
63918: GO 63920
63920: DISABLE
// begin enable ;
63921: ENABLE
// UpdateSpectatorBar ;
63922: CALL 63467 0 0
// end ;
63926: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63927: LD_INT 0
63929: PPUSH
// end ;
63930: LD_VAR 0 12
63934: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63935: LD_INT 0
63937: PPUSH
63938: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63939: LD_VAR 0 1
63943: NOT
63944: IFTRUE 63963
63946: PUSH
63947: LD_VAR 0 2
63951: PPUSH
63952: LD_VAR 0 3
63956: PPUSH
63957: CALL_OW 488
63961: NOT
63962: OR
63963: IFTRUE 63998
63965: PUSH
63966: LD_VAR 0 1
63970: PPUSH
63971: CALL_OW 266
63975: PUSH
63976: LD_INT 3
63978: NONEQUAL
63979: IFFALSE 63997
63981: PUSH
63982: LD_VAR 0 1
63986: PPUSH
63987: CALL_OW 247
63991: PUSH
63992: LD_INT 1
63994: EQUAL
63995: NOT
63996: AND
63997: OR
63998: IFFALSE 64002
// exit ;
64000: GO 64284
// if GetType ( factory ) = unit_human then
64002: LD_VAR 0 1
64006: PPUSH
64007: CALL_OW 247
64011: PUSH
64012: LD_INT 1
64014: EQUAL
64015: IFFALSE 64032
// factory := IsInUnit ( factory ) ;
64017: LD_ADDR_VAR 0 1
64021: PUSH
64022: LD_VAR 0 1
64026: PPUSH
64027: CALL_OW 310
64031: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64032: LD_VAR 0 1
64036: PPUSH
64037: CALL_OW 266
64041: PUSH
64042: LD_INT 3
64044: NONEQUAL
64045: IFFALSE 64049
// exit ;
64047: GO 64284
// for i := 1 to Count ( factoryWaypoints ) do
64049: LD_ADDR_VAR 0 5
64053: PUSH
64054: DOUBLE
64055: LD_INT 1
64057: DEC
64058: ST_TO_ADDR
64059: LD_EXP 61
64063: PPUSH
64064: CALL 13582 0 1
64068: PUSH
64069: FOR_TO
64070: IFFALSE 64232
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64072: LD_VAR 0 2
64076: PPUSH
64077: LD_VAR 0 3
64081: PPUSH
64082: CALL_OW 428
64086: PUSH
64087: LD_EXP 61
64091: PUSH
64092: LD_VAR 0 5
64096: ARRAY
64097: PUSH
64098: LD_INT 2
64100: ARRAY
64101: EQUAL
64102: IFFALSE 64134
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64104: LD_ADDR_EXP 61
64108: PUSH
64109: LD_EXP 61
64113: PPUSH
64114: LD_VAR 0 5
64118: PPUSH
64119: CALL_OW 3
64123: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64124: CALL 64289 0 0
// exit ;
64128: POP
64129: POP
64130: GO 64284
// end else
64132: GO 64230
// if factory = factoryWaypoints [ i ] [ 2 ] then
64134: LD_VAR 0 1
64138: PUSH
64139: LD_EXP 61
64143: PUSH
64144: LD_VAR 0 5
64148: ARRAY
64149: PUSH
64150: LD_INT 2
64152: ARRAY
64153: EQUAL
64154: IFFALSE 64230
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64156: LD_ADDR_EXP 61
64160: PUSH
64161: LD_EXP 61
64165: PPUSH
64166: LD_VAR 0 5
64170: PPUSH
64171: CALL_OW 3
64175: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64176: LD_ADDR_EXP 61
64180: PUSH
64181: LD_EXP 61
64185: PPUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 255
64195: PUSH
64196: LD_VAR 0 1
64200: PUSH
64201: LD_VAR 0 2
64205: PUSH
64206: LD_VAR 0 3
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: PPUSH
64217: CALL 49558 0 2
64221: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64222: CALL 64289 0 0
// exit ;
64226: POP
64227: POP
64228: GO 64284
// end ; end ;
64230: GO 64069
64232: POP
64233: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64234: LD_ADDR_EXP 61
64238: PUSH
64239: LD_EXP 61
64243: PPUSH
64244: LD_VAR 0 1
64248: PPUSH
64249: CALL_OW 255
64253: PUSH
64254: LD_VAR 0 1
64258: PUSH
64259: LD_VAR 0 2
64263: PUSH
64264: LD_VAR 0 3
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: PPUSH
64275: CALL 49558 0 2
64279: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64280: CALL 64289 0 0
// end ;
64284: LD_VAR 0 4
64288: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64289: LD_INT 0
64291: PPUSH
64292: PPUSH
64293: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64294: LD_STRING resetFactoryWaypoint();
64296: PPUSH
64297: CALL_OW 559
// if factoryWaypoints then
64301: LD_EXP 61
64305: IFFALSE 64426
// begin list := factoryWaypoints ;
64307: LD_ADDR_VAR 0 3
64311: PUSH
64312: LD_EXP 61
64316: ST_TO_ADDR
// for i := 1 to list do
64317: LD_ADDR_VAR 0 2
64321: PUSH
64322: DOUBLE
64323: LD_INT 1
64325: DEC
64326: ST_TO_ADDR
64327: LD_VAR 0 3
64331: PUSH
64332: FOR_TO
64333: IFFALSE 64424
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64335: LD_STRING setFactoryWaypointXY(
64337: PUSH
64338: LD_VAR 0 3
64342: PUSH
64343: LD_VAR 0 2
64347: ARRAY
64348: PUSH
64349: LD_INT 1
64351: ARRAY
64352: STR
64353: PUSH
64354: LD_STRING ,
64356: STR
64357: PUSH
64358: LD_VAR 0 3
64362: PUSH
64363: LD_VAR 0 2
64367: ARRAY
64368: PUSH
64369: LD_INT 2
64371: ARRAY
64372: STR
64373: PUSH
64374: LD_STRING ,
64376: STR
64377: PUSH
64378: LD_VAR 0 3
64382: PUSH
64383: LD_VAR 0 2
64387: ARRAY
64388: PUSH
64389: LD_INT 3
64391: ARRAY
64392: STR
64393: PUSH
64394: LD_STRING ,
64396: STR
64397: PUSH
64398: LD_VAR 0 3
64402: PUSH
64403: LD_VAR 0 2
64407: ARRAY
64408: PUSH
64409: LD_INT 4
64411: ARRAY
64412: STR
64413: PUSH
64414: LD_STRING )
64416: STR
64417: PPUSH
64418: CALL_OW 559
64422: GO 64332
64424: POP
64425: POP
// end ; end ;
64426: LD_VAR 0 1
64430: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64431: LD_INT 0
64433: PPUSH
// if HexInfo ( x , y ) = warehouse then
64434: LD_VAR 0 2
64438: PPUSH
64439: LD_VAR 0 3
64443: PPUSH
64444: CALL_OW 428
64448: PUSH
64449: LD_VAR 0 1
64453: EQUAL
64454: IFFALSE 64481
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64456: LD_ADDR_EXP 63
64460: PUSH
64461: LD_EXP 63
64465: PPUSH
64466: LD_VAR 0 1
64470: PPUSH
64471: LD_INT 0
64473: PPUSH
64474: CALL_OW 1
64478: ST_TO_ADDR
64479: GO 64532
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64481: LD_ADDR_EXP 63
64485: PUSH
64486: LD_EXP 63
64490: PPUSH
64491: LD_VAR 0 1
64495: PPUSH
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 255
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: LD_VAR 0 2
64515: PUSH
64516: LD_VAR 0 3
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: PPUSH
64527: CALL_OW 1
64531: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64532: CALL 64541 0 0
// end ;
64536: LD_VAR 0 4
64540: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64541: LD_INT 0
64543: PPUSH
64544: PPUSH
64545: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64546: LD_STRING resetWarehouseGatheringPoints();
64548: PPUSH
64549: CALL_OW 559
// if warehouseGatheringPoints then
64553: LD_EXP 63
64557: IFFALSE 64683
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64559: LD_ADDR_VAR 0 3
64563: PUSH
64564: LD_EXP 63
64568: PPUSH
64569: CALL 53492 0 1
64573: ST_TO_ADDR
// for i := 1 to list do
64574: LD_ADDR_VAR 0 2
64578: PUSH
64579: DOUBLE
64580: LD_INT 1
64582: DEC
64583: ST_TO_ADDR
64584: LD_VAR 0 3
64588: PUSH
64589: FOR_TO
64590: IFFALSE 64681
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64592: LD_STRING setWarehouseGatheringPointXY(
64594: PUSH
64595: LD_VAR 0 3
64599: PUSH
64600: LD_VAR 0 2
64604: ARRAY
64605: PUSH
64606: LD_INT 1
64608: ARRAY
64609: STR
64610: PUSH
64611: LD_STRING ,
64613: STR
64614: PUSH
64615: LD_VAR 0 3
64619: PUSH
64620: LD_VAR 0 2
64624: ARRAY
64625: PUSH
64626: LD_INT 2
64628: ARRAY
64629: STR
64630: PUSH
64631: LD_STRING ,
64633: STR
64634: PUSH
64635: LD_VAR 0 3
64639: PUSH
64640: LD_VAR 0 2
64644: ARRAY
64645: PUSH
64646: LD_INT 3
64648: ARRAY
64649: STR
64650: PUSH
64651: LD_STRING ,
64653: STR
64654: PUSH
64655: LD_VAR 0 3
64659: PUSH
64660: LD_VAR 0 2
64664: ARRAY
64665: PUSH
64666: LD_INT 4
64668: ARRAY
64669: STR
64670: PUSH
64671: LD_STRING )
64673: STR
64674: PPUSH
64675: CALL_OW 559
64679: GO 64589
64681: POP
64682: POP
// end ; end ;
64683: LD_VAR 0 1
64687: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64688: LD_INT 0
64690: PPUSH
64691: PPUSH
// if not mpSidePositions then
64692: LD_EXP 7
64696: NOT
64697: IFFALSE 64701
// exit ;
64699: GO 64772
// result :=  ;
64701: LD_ADDR_VAR 0 1
64705: PUSH
64706: LD_STRING 
64708: ST_TO_ADDR
// for i := 1 to 8 do
64709: LD_ADDR_VAR 0 2
64713: PUSH
64714: DOUBLE
64715: LD_INT 1
64717: DEC
64718: ST_TO_ADDR
64719: LD_INT 8
64721: PUSH
64722: FOR_TO
64723: IFFALSE 64753
// begin result := result & mpSidePositions [ i ] & ; ;
64725: LD_ADDR_VAR 0 1
64729: PUSH
64730: LD_VAR 0 1
64734: PUSH
64735: LD_EXP 7
64739: PUSH
64740: LD_VAR 0 2
64744: ARRAY
64745: STR
64746: PUSH
64747: LD_STRING ;
64749: STR
64750: ST_TO_ADDR
// end ;
64751: GO 64722
64753: POP
64754: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64755: LD_STRING setMultiplayerRealPosition("
64757: PUSH
64758: LD_VAR 0 1
64762: STR
64763: PUSH
64764: LD_STRING ");
64766: STR
64767: PPUSH
64768: CALL_OW 559
// end ;
64772: LD_VAR 0 1
64776: RET
