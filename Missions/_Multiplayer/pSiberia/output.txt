// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2746 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3092 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 35
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 37
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 36
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 33
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 51640 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 51640 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 51640 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 51640 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 51640 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 51640 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 11486 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 51473 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 51473 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 51473 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 51473 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 51473 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 51473 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 51473 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 51473 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 51473 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 51473 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 51473 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 51473 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 51640 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 51640 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 51640 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 51640 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 51640 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 51640 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 51640 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 51640 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 51640 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 51640 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 51640 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 51640 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 51640 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 51640 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 51640 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 51640 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 51640 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 51640 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 48456 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 52348 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 7684 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 52365 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 8349 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 52406 0 2
2721: PPOPN 2
2723: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 8402 0 3
2743: PPOPN 3
2745: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
// disable ( mpActive ) ;
2750: LD_INT 100
2752: DISABLE_MARKED
// disable ( mpWin ) ;
2753: LD_INT 101
2755: DISABLE_MARKED
// disable ( mpLose ) ;
2756: LD_INT 102
2758: DISABLE_MARKED
// mpGameType := 0 ;
2759: LD_ADDR_EXP 3
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// mpGameSettings := [ ] ;
2767: LD_ADDR_EXP 6
2771: PUSH
2772: EMPTY
2773: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2774: LD_ADDR_EXP 4
2778: PUSH
2779: EMPTY
2780: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2781: LD_ADDR_EXP 5
2785: PUSH
2786: EMPTY
2787: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2788: LD_ADDR_EXP 29
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2803: LD_ADDR_EXP 12
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2810: LD_ADDR_EXP 13
2814: PUSH
2815: EMPTY
2816: ST_TO_ADDR
// mpDepots := [ ] ;
2817: LD_ADDR_EXP 14
2821: PUSH
2822: EMPTY
2823: ST_TO_ADDR
// mpBuildings := [ ] ;
2824: LD_ADDR_EXP 17
2828: PUSH
2829: EMPTY
2830: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2831: LD_ADDR_EXP 18
2835: PUSH
2836: EMPTY
2837: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2838: LD_ADDR_EXP 19
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2845: LD_ADDR_EXP 20
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpStartingResources := [ ] ;
2852: LD_ADDR_EXP 15
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// mpStartPos := [ ] ;
2859: LD_ADDR_EXP 21
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2866: LD_ADDR_EXP 22
2870: PUSH
2871: LD_INT 1
2873: NEG
2874: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2875: LD_ADDR_EXP 23
2879: PUSH
2880: EMPTY
2881: ST_TO_ADDR
// mpApemans := [ ] ;
2882: LD_ADDR_EXP 30
2886: PUSH
2887: EMPTY
2888: ST_TO_ADDR
// mpApemansArea := [ ] ;
2889: LD_ADDR_EXP 31
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpRespawn := [ ] ;
2896: LD_ADDR_EXP 33
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpKingArea := 0 ;
2903: LD_ADDR_EXP 34
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// mpPoints := [ ] ;
2911: LD_ADDR_EXP 35
2915: PUSH
2916: EMPTY
2917: ST_TO_ADDR
// mpVehicles := 0 ;
2918: LD_ADDR_EXP 36
2922: PUSH
2923: LD_INT 0
2925: ST_TO_ADDR
// mpShipments := 0 ;
2926: LD_ADDR_EXP 27
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2934: LD_ADDR_EXP 40
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2965: LD_ADDR_EXP 32
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: ST_TO_ADDR
// mpEmissions := 0 ;
2996: LD_ADDR_EXP 37
3000: PUSH
3001: LD_INT 0
3003: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3004: LD_ADDR_EXP 25
3008: PUSH
3009: LD_INT 3
3011: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3012: LD_ADDR_EXP 24
3016: PUSH
3017: LD_INT 15
3019: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3020: LD_ADDR_EXP 38
3024: PUSH
3025: LD_INT 0
3027: ST_TO_ADDR
// mpGameActive := false ;
3028: LD_ADDR_EXP 39
3032: PUSH
3033: LD_INT 0
3035: ST_TO_ADDR
// mpBlockRespThread := false ;
3036: LD_ADDR_EXP 41
3040: PUSH
3041: LD_INT 0
3043: ST_TO_ADDR
// for i := 1 to 32 do
3044: LD_ADDR_VAR 0 2
3048: PUSH
3049: DOUBLE
3050: LD_INT 1
3052: DEC
3053: ST_TO_ADDR
3054: LD_INT 32
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3085
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3060: LD_ADDR_EXP 6
3064: PUSH
3065: LD_EXP 6
3069: PPUSH
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 1
3082: ST_TO_ADDR
3083: GO 3057
3085: POP
3086: POP
// end ;
3087: LD_VAR 0 1
3091: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3092: LD_INT 0
3094: PPUSH
3095: PPUSH
3096: PPUSH
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
3101: PPUSH
3102: PPUSH
3103: PPUSH
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3108: LD_ADDR_VAR 0 14
3112: PUSH
3113: LD_INT 1
3115: PUSH
3116: LD_INT 2
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: ST_TO_ADDR
// for i in gameTypes do
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_VAR 0 14
3136: PUSH
3137: FOR_IN
3138: IFFALSE 3147
// disable ( i ) ;
3140: LD_VAR 0 2
3144: DISABLE_MARKED
3145: GO 3137
3147: POP
3148: POP
// if Multiplayer then
3149: LD_OWVAR 4
3153: IFFALSE 3337
// begin mpGameType := mp_game_type ;
3155: LD_ADDR_EXP 3
3159: PUSH
3160: LD_OWVAR 6
3164: ST_TO_ADDR
// your_side := mp_player_side ;
3165: LD_ADDR_OWVAR 2
3169: PUSH
3170: LD_OWVAR 7
3174: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3175: LD_ADDR_EXP 7
3179: PUSH
3180: LD_OWVAR 17
3184: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3185: LD_ADDR_EXP 8
3189: PUSH
3190: LD_OWVAR 15
3194: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3195: LD_ADDR_EXP 9
3199: PUSH
3200: LD_OWVAR 16
3204: ST_TO_ADDR
// mpTeams := mp_teams ;
3205: LD_ADDR_EXP 10
3209: PUSH
3210: LD_OWVAR 12
3214: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3215: LD_ADDR_VAR 0 2
3219: PUSH
3220: DOUBLE
3221: LD_INT 1
3223: DEC
3224: ST_TO_ADDR
3225: LD_EXP 4
3229: PPUSH
3230: CALL 11486 0 1
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3312
// begin setting := mpGameSettingsKeys [ i ] ;
3238: LD_ADDR_VAR 0 12
3242: PUSH
3243: LD_EXP 4
3247: PUSH
3248: LD_VAR 0 2
3252: ARRAY
3253: ST_TO_ADDR
// if setting then
3254: LD_VAR 0 12
3258: IFFALSE 3310
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3260: LD_ADDR_EXP 6
3264: PUSH
3265: LD_EXP 6
3269: PPUSH
3270: LD_VAR 0 2
3274: PPUSH
3275: LD_EXP 5
3279: PUSH
3280: LD_VAR 0 2
3284: ARRAY
3285: PUSH
3286: LD_VAR 0 2
3290: PUSH
3291: LD_INT 1
3293: MINUS
3294: PPUSH
3295: CALL_OW 426
3299: PUSH
3300: LD_INT 1
3302: PLUS
3303: ARRAY
3304: PPUSH
3305: CALL_OW 1
3309: ST_TO_ADDR
// end ;
3310: GO 3235
3312: POP
3313: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3314: LD_ADDR_EXP 11
3318: PUSH
3319: LD_EXP 8
3323: PUSH
3324: LD_INT 0
3326: PUSH
3327: EMPTY
3328: LIST
3329: DIFF
3330: PUSH
3331: LD_INT 1
3333: GREATER
3334: ST_TO_ADDR
// end else
3335: GO 3337
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3337: LD_EXP 3
3341: PPUSH
3342: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3346: LD_EXP 18
3350: PPUSH
3351: CALL 11486 0 1
3355: IFFALSE 3386
// begin for i in mpMarkedAreas do
3357: LD_ADDR_VAR 0 2
3361: PUSH
3362: LD_EXP 18
3366: PUSH
3367: FOR_IN
3368: IFFALSE 3384
// SetAreaMapShow ( i , 0 ) ;
3370: LD_VAR 0 2
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL_OW 424
3382: GO 3367
3384: POP
3385: POP
// end ; for i := 1 to 8 do
3386: LD_ADDR_VAR 0 2
3390: PUSH
3391: DOUBLE
3392: LD_INT 1
3394: DEC
3395: ST_TO_ADDR
3396: LD_INT 8
3398: PUSH
3399: FOR_TO
3400: IFFALSE 4657
// begin if not mpSidePositions [ i ] then
3402: LD_EXP 7
3406: PUSH
3407: LD_VAR 0 2
3411: ARRAY
3412: NOT
3413: IFFALSE 3417
// continue ;
3415: GO 3399
// side := i ;
3417: LD_ADDR_VAR 0 7
3421: PUSH
3422: LD_VAR 0 2
3426: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3427: LD_ADDR_VAR 0 9
3431: PUSH
3432: LD_EXP 9
3436: PUSH
3437: LD_VAR 0 2
3441: ARRAY
3442: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3443: LD_ADDR_VAR 0 8
3447: PUSH
3448: LD_EXP 7
3452: PUSH
3453: LD_VAR 0 2
3457: ARRAY
3458: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3459: LD_EXP 12
3463: PPUSH
3464: CALL 11486 0 1
3468: IFFALSE 3545
// begin for j in mpOilDeposits [ pos ] do
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: LD_EXP 12
3479: PUSH
3480: LD_VAR 0 8
3484: ARRAY
3485: PUSH
3486: FOR_IN
3487: IFFALSE 3543
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3489: LD_VAR 0 3
3493: PUSH
3494: LD_INT 1
3496: ARRAY
3497: PPUSH
3498: LD_VAR 0 3
3502: PUSH
3503: LD_INT 2
3505: ARRAY
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3514: LD_VAR 0 3
3518: PUSH
3519: LD_INT 1
3521: ARRAY
3522: PPUSH
3523: LD_VAR 0 3
3527: PUSH
3528: LD_INT 2
3530: ARRAY
3531: PPUSH
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL_OW 441
// end ;
3541: GO 3486
3543: POP
3544: POP
// end ; if Count ( mpSibDeposits ) then
3545: LD_EXP 13
3549: PPUSH
3550: CALL 11486 0 1
3554: IFFALSE 3631
// begin for j in mpSibDeposits [ pos ] do
3556: LD_ADDR_VAR 0 3
3560: PUSH
3561: LD_EXP 13
3565: PUSH
3566: LD_VAR 0 8
3570: ARRAY
3571: PUSH
3572: FOR_IN
3573: IFFALSE 3629
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3575: LD_VAR 0 3
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: PPUSH
3584: LD_VAR 0 3
3588: PUSH
3589: LD_INT 2
3591: ARRAY
3592: PPUSH
3593: LD_INT 3
3595: PPUSH
3596: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3600: LD_VAR 0 3
3604: PUSH
3605: LD_INT 1
3607: ARRAY
3608: PPUSH
3609: LD_VAR 0 3
3613: PUSH
3614: LD_INT 2
3616: ARRAY
3617: PPUSH
3618: LD_VAR 0 7
3622: PPUSH
3623: CALL_OW 441
// end ;
3627: GO 3572
3629: POP
3630: POP
// end ; InitBc ;
3631: CALL_OW 21
// InitUc ;
3635: CALL_OW 18
// uc_side := side ;
3639: LD_ADDR_OWVAR 20
3643: PUSH
3644: LD_VAR 0 7
3648: ST_TO_ADDR
// uc_nation := nation ;
3649: LD_ADDR_OWVAR 21
3653: PUSH
3654: LD_VAR 0 9
3658: ST_TO_ADDR
// if Count ( mpDepots ) then
3659: LD_EXP 14
3663: PPUSH
3664: CALL 11486 0 1
3668: IFFALSE 3852
// begin if mpGameType = GameTypeSurvival then
3670: LD_EXP 3
3674: PUSH
3675: LD_INT 2
3677: EQUAL
3678: IFFALSE 3698
// begin bc_level := 10 ;
3680: LD_ADDR_OWVAR 43
3684: PUSH
3685: LD_INT 10
3687: ST_TO_ADDR
// bc_type := b_warehouse ;
3688: LD_ADDR_OWVAR 42
3692: PUSH
3693: LD_INT 1
3695: ST_TO_ADDR
// end else
3696: GO 3714
// begin bc_level := 0 ;
3698: LD_ADDR_OWVAR 43
3702: PUSH
3703: LD_INT 0
3705: ST_TO_ADDR
// bc_type := b_depot ;
3706: LD_ADDR_OWVAR 42
3710: PUSH
3711: LD_INT 0
3713: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3714: LD_ADDR_VAR 0 4
3718: PUSH
3719: LD_EXP 14
3723: PUSH
3724: LD_VAR 0 8
3728: ARRAY
3729: PUSH
3730: LD_INT 1
3732: ARRAY
3733: PPUSH
3734: LD_EXP 14
3738: PUSH
3739: LD_VAR 0 8
3743: ARRAY
3744: PUSH
3745: LD_INT 2
3747: ARRAY
3748: PPUSH
3749: LD_EXP 14
3753: PUSH
3754: LD_VAR 0 8
3758: ARRAY
3759: PUSH
3760: LD_INT 3
3762: ARRAY
3763: PPUSH
3764: CALL_OW 47
3768: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_STRING @
3776: PUSH
3777: LD_VAR 0 7
3781: STR
3782: PPUSH
3783: CALL_OW 500
// if Count ( mpStartingResources ) then
3787: LD_EXP 15
3791: PPUSH
3792: CALL 11486 0 1
3796: IFFALSE 3850
// begin for j := 1 to mpStartingResources do
3798: LD_ADDR_VAR 0 3
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_EXP 15
3812: PUSH
3813: FOR_TO
3814: IFFALSE 3848
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3816: LD_VAR 0 4
3820: PPUSH
3821: CALL_OW 274
3825: PPUSH
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_EXP 15
3835: PUSH
3836: LD_VAR 0 3
3840: ARRAY
3841: PPUSH
3842: CALL_OW 277
3846: GO 3813
3848: POP
3849: POP
// end ; end else
3850: GO 3999
// if Count ( mpStartingResources ) then
3852: LD_EXP 15
3856: PPUSH
3857: CALL 11486 0 1
3861: IFFALSE 3999
// begin for j := 1 to mpStartingResources do
3863: LD_ADDR_VAR 0 3
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_EXP 15
3877: PUSH
3878: FOR_TO
3879: IFFALSE 3997
// begin resources := mpStartingResources [ j ] ;
3881: LD_ADDR_VAR 0 13
3885: PUSH
3886: LD_EXP 15
3890: PUSH
3891: LD_VAR 0 3
3895: ARRAY
3896: ST_TO_ADDR
// repeat if resources >= 50 then
3897: LD_VAR 0 13
3901: PUSH
3902: LD_INT 50
3904: GREATEREQUAL
3905: IFFALSE 3951
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3907: LD_VAR 0 3
3911: PPUSH
3912: LD_INT 5
3914: PPUSH
3915: LD_VAR 0 5
3919: PPUSH
3920: LD_VAR 0 6
3924: PPUSH
3925: LD_INT 4
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 60
// resources := resources - 50 ;
3935: LD_ADDR_VAR 0 13
3939: PUSH
3940: LD_VAR 0 13
3944: PUSH
3945: LD_INT 50
3947: MINUS
3948: ST_TO_ADDR
// end else
3949: GO 3985
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3951: LD_VAR 0 3
3955: PPUSH
3956: LD_VAR 0 13
3960: PUSH
3961: LD_INT 10
3963: DIV
3964: PPUSH
3965: LD_VAR 0 5
3969: PPUSH
3970: LD_VAR 0 6
3974: PPUSH
3975: LD_INT 4
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 60
// until resources <= 0 ;
3985: LD_VAR 0 13
3989: PUSH
3990: LD_INT 0
3992: LESSEQUAL
3993: IFFALSE 3897
// end ;
3995: GO 3878
3997: POP
3998: POP
// end ; if Count ( mpBuildings ) then
3999: LD_EXP 17
4003: PPUSH
4004: CALL 11486 0 1
4008: IFFALSE 4086
// begin for j in mpBuildings [ pos ] do
4010: LD_ADDR_VAR 0 3
4014: PUSH
4015: LD_EXP 17
4019: PUSH
4020: LD_VAR 0 8
4024: ARRAY
4025: PUSH
4026: FOR_IN
4027: IFFALSE 4084
// begin bc_level := 0 ;
4029: LD_ADDR_OWVAR 43
4033: PUSH
4034: LD_INT 0
4036: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4037: LD_ADDR_OWVAR 42
4041: PUSH
4042: LD_VAR 0 3
4046: PUSH
4047: LD_INT 1
4049: ARRAY
4050: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4051: LD_VAR 0 3
4055: PUSH
4056: LD_INT 2
4058: ARRAY
4059: PPUSH
4060: LD_VAR 0 3
4064: PUSH
4065: LD_INT 3
4067: ARRAY
4068: PPUSH
4069: LD_VAR 0 3
4073: PUSH
4074: LD_INT 4
4076: ARRAY
4077: PPUSH
4078: CALL_OW 47
// end ;
4082: GO 4026
4084: POP
4085: POP
// end ; if mpBattleFlag > - 1 then
4086: LD_EXP 22
4090: PUSH
4091: LD_INT 1
4093: NEG
4094: GREATER
4095: IFFALSE 4254
// begin x := mpStartPos [ pos ] [ 1 ] ;
4097: LD_ADDR_VAR 0 5
4101: PUSH
4102: LD_EXP 21
4106: PUSH
4107: LD_VAR 0 8
4111: ARRAY
4112: PUSH
4113: LD_INT 1
4115: ARRAY
4116: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4117: LD_ADDR_VAR 0 6
4121: PUSH
4122: LD_EXP 21
4126: PUSH
4127: LD_VAR 0 8
4131: ARRAY
4132: PUSH
4133: LD_INT 2
4135: ARRAY
4136: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4137: LD_VAR 0 5
4141: PPUSH
4142: LD_VAR 0 6
4146: PPUSH
4147: LD_INT 12
4149: PPUSH
4150: LD_INT 2
4152: PPUSH
4153: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4157: LD_ADDR_EXP 23
4161: PUSH
4162: LD_EXP 23
4166: PPUSH
4167: LD_VAR 0 7
4171: PPUSH
4172: LD_VAR 0 7
4176: PPUSH
4177: LD_VAR 0 5
4181: PPUSH
4182: LD_VAR 0 6
4186: PPUSH
4187: LD_INT 1
4189: PUSH
4190: LD_INT 100
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: LD_INT 70
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 40
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 10
4219: PUSH
4220: LD_INT 25
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 20
4229: PUSH
4230: LD_INT 100
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 418
4248: PPUSH
4249: CALL_OW 1
4253: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4254: LD_EXP 26
4258: PUSH
4259: LD_INT 20
4261: PPUSH
4262: LD_VAR 0 7
4266: PPUSH
4267: CALL_OW 321
4271: PUSH
4272: LD_INT 1
4274: EQUAL
4275: AND
4276: IFFALSE 4293
// SetTech ( tech_SibDet , side , state_researched ) ;
4278: LD_INT 20
4280: PPUSH
4281: LD_VAR 0 7
4285: PPUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4293: LD_INT 24
4295: PPUSH
4296: LD_VAR 0 7
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 322
// if mpSibBomb = 1 then
4308: LD_EXP 28
4312: PUSH
4313: LD_INT 1
4315: EQUAL
4316: IFFALSE 4335
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4318: LD_INT 25
4320: PPUSH
4321: LD_VAR 0 7
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: CALL_OW 322
// end else
4333: GO 4350
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4335: LD_INT 25
4337: PPUSH
4338: LD_VAR 0 7
4342: PPUSH
4343: LD_INT 0
4345: PPUSH
4346: CALL_OW 322
// end ; if mpVehicles then
4350: LD_EXP 36
4354: IFFALSE 4453
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4356: LD_ADDR_VAR 0 3
4360: PUSH
4361: LD_VAR 0 7
4365: PPUSH
4366: LD_VAR 0 9
4370: PPUSH
4371: LD_EXP 36
4375: PPUSH
4376: CALL 5567 0 3
4380: PUSH
4381: FOR_IN
4382: IFFALSE 4451
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4384: LD_VAR 0 3
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: LD_INT 5
4394: PPUSH
4395: CALL_OW 12
4399: PPUSH
4400: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_EXP 21
4413: PUSH
4414: LD_VAR 0 8
4418: ARRAY
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: LD_EXP 21
4428: PUSH
4429: LD_VAR 0 8
4433: ARRAY
4434: PUSH
4435: LD_INT 2
4437: ARRAY
4438: PPUSH
4439: LD_INT 12
4441: PPUSH
4442: LD_INT 0
4444: PPUSH
4445: CALL_OW 50
// end ;
4449: GO 4381
4451: POP
4452: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4453: LD_ADDR_VAR 0 11
4457: PUSH
4458: LD_VAR 0 7
4462: PPUSH
4463: LD_VAR 0 9
4467: PPUSH
4468: LD_EXP 24
4472: PPUSH
4473: LD_EXP 25
4477: PPUSH
4478: CALL 5069 0 4
4482: ST_TO_ADDR
// for j in team do
4483: LD_ADDR_VAR 0 3
4487: PUSH
4488: LD_VAR 0 11
4492: PUSH
4493: FOR_IN
4494: IFFALSE 4543
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4496: LD_VAR 0 3
4500: PPUSH
4501: LD_EXP 21
4505: PUSH
4506: LD_VAR 0 8
4510: ARRAY
4511: PUSH
4512: LD_INT 1
4514: ARRAY
4515: PPUSH
4516: LD_EXP 21
4520: PUSH
4521: LD_VAR 0 8
4525: ARRAY
4526: PUSH
4527: LD_INT 2
4529: ARRAY
4530: PPUSH
4531: LD_INT 12
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 50
4541: GO 4493
4543: POP
4544: POP
// if mpApemans then
4545: LD_EXP 30
4549: IFFALSE 4655
// begin for j := 1 to mpApemans do
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: DOUBLE
4557: LD_INT 1
4559: DEC
4560: ST_TO_ADDR
4561: LD_EXP 30
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4653
// begin PrepareApeman ( - 5 ) ;
4569: LD_INT 5
4571: NEG
4572: PPUSH
4573: CALL 43343 0 1
// ape := CreateHuman ;
4577: LD_ADDR_VAR 0 10
4581: PUSH
4582: CALL_OW 44
4586: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4587: LD_ADDR_EXP 32
4591: PUSH
4592: LD_EXP 32
4596: PPUSH
4597: LD_VAR 0 8
4601: PPUSH
4602: LD_EXP 32
4606: PUSH
4607: LD_VAR 0 8
4611: ARRAY
4612: PPUSH
4613: LD_VAR 0 10
4617: PPUSH
4618: CALL 47095 0 2
4622: PPUSH
4623: CALL_OW 1
4627: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4628: LD_VAR 0 10
4632: PPUSH
4633: LD_EXP 31
4637: PUSH
4638: LD_VAR 0 8
4642: ARRAY
4643: PPUSH
4644: LD_INT 0
4646: PPUSH
4647: CALL_OW 49
// end ;
4651: GO 4566
4653: POP
4654: POP
// end ; end ;
4655: GO 3399
4657: POP
4658: POP
// if not mpTeamGame then
4659: LD_EXP 11
4663: NOT
4664: IFFALSE 4762
// begin for i := 1 to 8 do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_INT 8
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4758
// for j := 1 to 8 do
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: DOUBLE
4688: LD_INT 1
4690: DEC
4691: ST_TO_ADDR
4692: LD_INT 8
4694: PUSH
4695: FOR_TO
4696: IFFALSE 4754
// if i <> j then
4698: LD_VAR 0 2
4702: PUSH
4703: LD_VAR 0 3
4707: NONEQUAL
4708: IFFALSE 4732
// SetAttitude ( i , j , att_neutral , true ) else
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_VAR 0 3
4719: PPUSH
4720: LD_INT 0
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 80
4730: GO 4752
// SetAttitude ( i , j , att_friend , true ) ;
4732: LD_VAR 0 2
4736: PPUSH
4737: LD_VAR 0 3
4741: PPUSH
4742: LD_INT 1
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: CALL_OW 80
4752: GO 4695
4754: POP
4755: POP
4756: GO 4679
4758: POP
4759: POP
// end else
4760: GO 4937
// begin if mpSharedVision then
4762: LD_EXP 16
4766: IFFALSE 4831
// begin for i in mpTeams do
4768: LD_ADDR_VAR 0 2
4772: PUSH
4773: LD_EXP 10
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4829
// for j := 2 to i do
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: DOUBLE
4787: LD_INT 2
4789: DEC
4790: ST_TO_ADDR
4791: LD_VAR 0 2
4795: PUSH
4796: FOR_TO
4797: IFFALSE 4825
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4799: LD_VAR 0 2
4803: PUSH
4804: LD_VAR 0 3
4808: ARRAY
4809: PPUSH
4810: LD_VAR 0 2
4814: PUSH
4815: LD_INT 1
4817: ARRAY
4818: PPUSH
4819: CALL_OW 343
4823: GO 4796
4825: POP
4826: POP
4827: GO 4778
4829: POP
4830: POP
// end ; for i := 1 to 8 do
4831: LD_ADDR_VAR 0 2
4835: PUSH
4836: DOUBLE
4837: LD_INT 1
4839: DEC
4840: ST_TO_ADDR
4841: LD_INT 8
4843: PUSH
4844: FOR_TO
4845: IFFALSE 4935
// for j := 1 to 8 do
4847: LD_ADDR_VAR 0 3
4851: PUSH
4852: DOUBLE
4853: LD_INT 1
4855: DEC
4856: ST_TO_ADDR
4857: LD_INT 8
4859: PUSH
4860: FOR_TO
4861: IFFALSE 4931
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4863: LD_EXP 8
4867: PUSH
4868: LD_VAR 0 2
4872: ARRAY
4873: PUSH
4874: LD_EXP 8
4878: PUSH
4879: LD_VAR 0 3
4883: ARRAY
4884: EQUAL
4885: IFFALSE 4909
// SetAttitude ( i , j , att_friend , true ) else
4887: LD_VAR 0 2
4891: PPUSH
4892: LD_VAR 0 3
4896: PPUSH
4897: LD_INT 1
4899: PPUSH
4900: LD_INT 1
4902: PPUSH
4903: CALL_OW 80
4907: GO 4929
// SetAttitude ( i , j , att_enemy , true ) ;
4909: LD_VAR 0 2
4913: PPUSH
4914: LD_VAR 0 3
4918: PPUSH
4919: LD_INT 2
4921: PPUSH
4922: LD_INT 1
4924: PPUSH
4925: CALL_OW 80
4929: GO 4860
4931: POP
4932: POP
4933: GO 4844
4935: POP
4936: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4937: LD_ADDR_OWVAR 71
4941: PUSH
4942: LD_EXP 9
4946: PUSH
4947: LD_OWVAR 2
4951: ARRAY
4952: ST_TO_ADDR
// if IAmSpec then
4953: CALL_OW 531
4957: IFFALSE 4998
// begin FogOff ( true ) ;
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4966: LD_EXP 29
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PUSH
4975: LD_INT 2
4977: DIV
4978: PPUSH
4979: LD_EXP 29
4983: PUSH
4984: LD_INT 2
4986: ARRAY
4987: PUSH
4988: LD_INT 2
4990: DIV
4991: PPUSH
4992: CALL_OW 86
// end else
4996: GO 5044
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4998: LD_EXP 21
5002: PUSH
5003: LD_EXP 7
5007: PUSH
5008: LD_OWVAR 2
5012: ARRAY
5013: ARRAY
5014: PUSH
5015: LD_INT 1
5017: ARRAY
5018: PPUSH
5019: LD_EXP 21
5023: PUSH
5024: LD_EXP 7
5028: PUSH
5029: LD_OWVAR 2
5033: ARRAY
5034: ARRAY
5035: PUSH
5036: LD_INT 2
5038: ARRAY
5039: PPUSH
5040: CALL_OW 86
// end ; BeginBuildUp ;
5044: CALL 6045 0 0
// enable ( mpActive ) ;
5048: LD_INT 100
5050: ENABLE_MARKED
// enable ( mpGameType ) ;
5051: LD_EXP 3
5055: ENABLE_MARKED
// mpGameActive := true ;
5056: LD_ADDR_EXP 39
5060: PUSH
5061: LD_INT 1
5063: ST_TO_ADDR
// end ;
5064: LD_VAR 0 1
5068: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5069: LD_INT 0
5071: PPUSH
5072: PPUSH
5073: PPUSH
5074: PPUSH
// result := [ ] ;
5075: LD_ADDR_VAR 0 5
5079: PUSH
5080: EMPTY
5081: ST_TO_ADDR
// class := class_soldier ;
5082: LD_ADDR_VAR 0 8
5086: PUSH
5087: LD_INT 1
5089: ST_TO_ADDR
// uc_side := side ;
5090: LD_ADDR_OWVAR 20
5094: PUSH
5095: LD_VAR 0 1
5099: ST_TO_ADDR
// uc_nation := nation ;
5100: LD_ADDR_OWVAR 21
5104: PUSH
5105: LD_VAR 0 2
5109: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5110: LD_ADDR_OWVAR 26
5114: PUSH
5115: LD_OWVAR 19
5119: PUSH
5120: LD_VAR 0 1
5124: ARRAY
5125: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5126: LD_INT 1
5128: PPUSH
5129: LD_INT 2
5131: PPUSH
5132: CALL_OW 12
5136: PPUSH
5137: LD_VAR 0 8
5141: PPUSH
5142: LD_VAR 0 4
5146: PUSH
5147: LD_INT 2
5149: PLUS
5150: PPUSH
5151: CALL_OW 380
// hc_importance := 105 ;
5155: LD_ADDR_OWVAR 32
5159: PUSH
5160: LD_INT 105
5162: ST_TO_ADDR
// if Multiplayer then
5163: LD_OWVAR 4
5167: IFFALSE 5207
// begin hc_gallery := MULTIAVATARS ;
5169: LD_ADDR_OWVAR 33
5173: PUSH
5174: LD_STRING MULTIAVATARS
5176: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5177: LD_ADDR_OWVAR 34
5181: PUSH
5182: LD_VAR 0 1
5186: PPUSH
5187: CALL_OW 525
5191: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5192: LD_ADDR_OWVAR 27
5196: PUSH
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL_OW 526
5206: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5207: LD_ADDR_VAR 0 5
5211: PUSH
5212: LD_VAR 0 5
5216: PPUSH
5217: CALL_OW 44
5221: PPUSH
5222: CALL 47095 0 2
5226: ST_TO_ADDR
// if mpTeamPreset then
5227: LD_LOC 1
5231: IFFALSE 5327
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5233: LD_LOC 1
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_VAR 0 5
5246: PUSH
5247: LD_VAR 0 5
5251: ARRAY
5252: PPUSH
5253: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5257: LD_VAR 0 5
5261: PUSH
5262: LD_VAR 0 5
5266: ARRAY
5267: PPUSH
5268: LD_INT 1
5270: PPUSH
5271: LD_LOC 1
5275: PUSH
5276: LD_INT 1
5278: ARRAY
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: CALL_OW 260
5287: PPUSH
5288: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5292: LD_VAR 0 5
5296: PUSH
5297: LD_VAR 0 5
5301: ARRAY
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: LD_LOC 1
5310: PUSH
5311: LD_INT 1
5313: ARRAY
5314: PPUSH
5315: LD_INT 2
5317: PPUSH
5318: CALL_OW 260
5322: PPUSH
5323: CALL_OW 239
// end ; InitHc_All ( ) ;
5327: CALL_OW 584
// class := 2 ;
5331: LD_ADDR_VAR 0 8
5335: PUSH
5336: LD_INT 2
5338: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5339: LD_ADDR_VAR 0 6
5343: PUSH
5344: DOUBLE
5345: LD_INT 1
5347: DEC
5348: ST_TO_ADDR
5349: LD_VAR 0 3
5353: PUSH
5354: LD_INT 1
5356: MINUS
5357: PUSH
5358: FOR_TO
5359: IFFALSE 5543
// begin PrepareHuman ( false , class , skill ) ;
5361: LD_INT 0
5363: PPUSH
5364: LD_VAR 0 8
5368: PPUSH
5369: LD_VAR 0 4
5373: PPUSH
5374: CALL_OW 380
// un := CreateHuman ;
5378: LD_ADDR_VAR 0 7
5382: PUSH
5383: CALL_OW 44
5387: ST_TO_ADDR
// result := Join ( result , un ) ;
5388: LD_ADDR_VAR 0 5
5392: PUSH
5393: LD_VAR 0 5
5397: PPUSH
5398: LD_VAR 0 7
5402: PPUSH
5403: CALL 47095 0 2
5407: ST_TO_ADDR
// if mpTeamPreset then
5408: LD_LOC 1
5412: IFFALSE 5508
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5414: LD_LOC 1
5418: PUSH
5419: LD_VAR 0 6
5423: PUSH
5424: LD_INT 1
5426: PLUS
5427: ARRAY
5428: PPUSH
5429: LD_VAR 0 7
5433: PPUSH
5434: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5438: LD_VAR 0 7
5442: PPUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_LOC 1
5450: PUSH
5451: LD_VAR 0 6
5455: PUSH
5456: LD_INT 1
5458: PLUS
5459: ARRAY
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 260
5468: PPUSH
5469: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5473: LD_VAR 0 7
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: LD_LOC 1
5485: PUSH
5486: LD_VAR 0 6
5490: PUSH
5491: LD_INT 1
5493: PLUS
5494: ARRAY
5495: PPUSH
5496: LD_INT 2
5498: PPUSH
5499: CALL_OW 260
5503: PPUSH
5504: CALL_OW 239
// end ; class := Inc ( class ) ;
5508: LD_ADDR_VAR 0 8
5512: PUSH
5513: LD_VAR 0 8
5517: PPUSH
5518: CALL 48456 0 1
5522: ST_TO_ADDR
// if class = 5 then
5523: LD_VAR 0 8
5527: PUSH
5528: LD_INT 5
5530: EQUAL
5531: IFFALSE 5541
// class := 1 ;
5533: LD_ADDR_VAR 0 8
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// end ;
5541: GO 5358
5543: POP
5544: POP
// if not mpTeamPreset then
5545: LD_LOC 1
5549: NOT
5550: IFFALSE 5562
// mpTeamPreset := result ;
5552: LD_ADDR_LOC 1
5556: PUSH
5557: LD_VAR 0 5
5561: ST_TO_ADDR
// end ;
5562: LD_VAR 0 5
5566: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
// result := [ ] ;
5571: LD_ADDR_VAR 0 4
5575: PUSH
5576: EMPTY
5577: ST_TO_ADDR
// if not vehicles then
5578: LD_VAR 0 3
5582: NOT
5583: IFFALSE 5587
// exit ;
5585: GO 5746
// for i := 1 to vehicles [ nation ] do
5587: LD_ADDR_VAR 0 5
5591: PUSH
5592: DOUBLE
5593: LD_INT 1
5595: DEC
5596: ST_TO_ADDR
5597: LD_VAR 0 3
5601: PUSH
5602: LD_VAR 0 2
5606: ARRAY
5607: PUSH
5608: FOR_TO
5609: IFFALSE 5744
// begin uc_side := side ;
5611: LD_ADDR_OWVAR 20
5615: PUSH
5616: LD_VAR 0 1
5620: ST_TO_ADDR
// uc_nation := nation ;
5621: LD_ADDR_OWVAR 21
5625: PUSH
5626: LD_VAR 0 2
5630: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5631: LD_VAR 0 3
5635: PUSH
5636: LD_VAR 0 2
5640: ARRAY
5641: PUSH
5642: LD_VAR 0 5
5646: ARRAY
5647: PUSH
5648: LD_INT 1
5650: ARRAY
5651: PPUSH
5652: LD_VAR 0 3
5656: PUSH
5657: LD_VAR 0 2
5661: ARRAY
5662: PUSH
5663: LD_VAR 0 5
5667: ARRAY
5668: PUSH
5669: LD_INT 2
5671: ARRAY
5672: PPUSH
5673: LD_VAR 0 3
5677: PUSH
5678: LD_VAR 0 2
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 5
5688: ARRAY
5689: PUSH
5690: LD_INT 3
5692: ARRAY
5693: PPUSH
5694: LD_VAR 0 3
5698: PUSH
5699: LD_VAR 0 2
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 5
5709: ARRAY
5710: PUSH
5711: LD_INT 4
5713: ARRAY
5714: PPUSH
5715: LD_INT 80
5717: PPUSH
5718: CALL 14224 0 5
// result := Join ( result , CreateVehicle ) ;
5722: LD_ADDR_VAR 0 4
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: CALL_OW 45
5736: PPUSH
5737: CALL 47095 0 2
5741: ST_TO_ADDR
// end ;
5742: GO 5608
5744: POP
5745: POP
// end ;
5746: LD_VAR 0 4
5750: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5751: LD_INT 0
5753: PPUSH
5754: PPUSH
// for i in mpBattleFlags do
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_EXP 23
5764: PUSH
5765: FOR_IN
5766: IFFALSE 5843
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5768: LD_VAR 0 3
5772: PPUSH
5773: LD_INT 1
5775: PUSH
5776: LD_VAR 0 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 2
5787: PUSH
5788: LD_VAR 0 1
5792: PUSH
5793: LD_REAL  7.00000000000000E-0001
5796: MUL
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: LD_VAR 0 1
5809: PUSH
5810: LD_REAL  4.00000000000000E-0001
5813: MUL
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: LD_INT 20
5821: PUSH
5822: LD_VAR 0 1
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 423
5841: GO 5765
5843: POP
5844: POP
// end ;
5845: LD_VAR 0 2
5849: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5850: LD_INT 100
5852: IFFALSE 5947
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
// begin if mpBattleFlag <= 0 then
5861: LD_EXP 22
5865: PUSH
5866: LD_INT 0
5868: LESSEQUAL
5869: IFFALSE 5873
// exit ;
5871: GO 5947
// strength := 100 ;
5873: LD_ADDR_VAR 0 2
5877: PUSH
5878: LD_INT 100
5880: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5881: LD_EXP 22
5885: PPUSH
5886: CALL_OW 67
// strength := Dec ( strength ) ;
5890: LD_ADDR_VAR 0 2
5894: PUSH
5895: LD_VAR 0 2
5899: PPUSH
5900: CALL 48478 0 1
5904: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5905: LD_VAR 0 2
5909: PPUSH
5910: CALL 5751 0 1
// until not strength ;
5914: LD_VAR 0 2
5918: NOT
5919: IFFALSE 5881
// for i in mpBattleFlags do
5921: LD_ADDR_VAR 0 1
5925: PUSH
5926: LD_EXP 23
5930: PUSH
5931: FOR_IN
5932: IFFALSE 5945
// KillBattleFlag ( i ) ;
5934: LD_VAR 0 1
5938: PPUSH
5939: CALL_OW 419
5943: GO 5931
5945: POP
5946: POP
// end ;
5947: PPOPN 2
5949: END
// every 0 0$1 marked mpActive do var side , tmp ;
5950: GO 5952
5952: DISABLE
5953: LD_INT 0
5955: PPUSH
5956: PPUSH
// begin if mpSibBomb <= 1 then
5957: LD_EXP 28
5961: PUSH
5962: LD_INT 1
5964: LESSEQUAL
5965: IFFALSE 5969
// exit ;
5967: GO 6042
// tmp := mpSibBomb ;
5969: LD_ADDR_VAR 0 2
5973: PUSH
5974: LD_EXP 28
5978: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5979: LD_INT 35
5981: PPUSH
5982: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5986: LD_ADDR_VAR 0 2
5990: PUSH
5991: LD_VAR 0 2
5995: PUSH
5996: LD_INT 35
5998: MINUS
5999: ST_TO_ADDR
// until not tmp ;
6000: LD_VAR 0 2
6004: NOT
6005: IFFALSE 5979
// for side := 1 to 8 do
6007: LD_ADDR_VAR 0 1
6011: PUSH
6012: DOUBLE
6013: LD_INT 1
6015: DEC
6016: ST_TO_ADDR
6017: LD_INT 8
6019: PUSH
6020: FOR_TO
6021: IFFALSE 6040
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6023: LD_INT 25
6025: PPUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: CALL_OW 322
6038: GO 6020
6040: POP
6041: POP
// end ;
6042: PPOPN 2
6044: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6045: LD_INT 0
6047: PPUSH
6048: PPUSH
6049: PPUSH
// mpBuildUpTimeDelay := 0 ;
6050: LD_ADDR_EXP 42
6054: PUSH
6055: LD_INT 0
6057: ST_TO_ADDR
// if not mpBuildUpTime then
6058: LD_EXP 20
6062: NOT
6063: IFFALSE 6067
// exit ;
6065: GO 6250
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6067: LD_ADDR_EXP 42
6071: PUSH
6072: LD_INT 8400
6074: PUSH
6075: LD_INT 2100
6077: PUSH
6078: LD_EXP 20
6082: MUL
6083: PLUS
6084: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6085: LD_ADDR_EXP 43
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// for i := 1 to 8 do
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: DOUBLE
6099: LD_INT 1
6101: DEC
6102: ST_TO_ADDR
6103: LD_INT 8
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6248
// if mpSidePositions [ i ] then
6109: LD_EXP 7
6113: PUSH
6114: LD_VAR 0 2
6118: ARRAY
6119: IFFALSE 6246
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6121: LD_EXP 19
6125: PUSH
6126: LD_EXP 7
6130: PUSH
6131: LD_VAR 0 2
6135: ARRAY
6136: ARRAY
6137: PPUSH
6138: LD_INT 5
6140: PPUSH
6141: CALL_OW 424
// for j := 1 to 8 do
6145: LD_ADDR_VAR 0 3
6149: PUSH
6150: DOUBLE
6151: LD_INT 1
6153: DEC
6154: ST_TO_ADDR
6155: LD_INT 8
6157: PUSH
6158: FOR_TO
6159: IFFALSE 6244
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6161: LD_EXP 7
6165: PUSH
6166: LD_VAR 0 3
6170: ARRAY
6171: PUSH
6172: LD_EXP 8
6176: PUSH
6177: LD_VAR 0 2
6181: ARRAY
6182: PUSH
6183: LD_EXP 8
6187: PUSH
6188: LD_VAR 0 3
6192: ARRAY
6193: NONEQUAL
6194: PUSH
6195: LD_EXP 11
6199: NOT
6200: PUSH
6201: LD_VAR 0 2
6205: PUSH
6206: LD_VAR 0 3
6210: NONEQUAL
6211: AND
6212: OR
6213: AND
6214: IFFALSE 6242
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6216: LD_VAR 0 3
6220: PPUSH
6221: LD_EXP 19
6225: PUSH
6226: LD_EXP 7
6230: PUSH
6231: LD_VAR 0 2
6235: ARRAY
6236: ARRAY
6237: PPUSH
6238: CALL_OW 333
6242: GO 6158
6244: POP
6245: POP
// end ;
6246: GO 6106
6248: POP
6249: POP
// end ;
6250: LD_VAR 0 1
6254: RET
// function EndBuildUp ; var i , j ; begin
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
// mpBuildUpTimeActive := false ;
6260: LD_ADDR_EXP 43
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// for i := 1 to 8 do
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: DOUBLE
6274: LD_INT 1
6276: DEC
6277: ST_TO_ADDR
6278: LD_INT 8
6280: PUSH
6281: FOR_TO
6282: IFFALSE 6423
// if mpSidePositions [ i ] then
6284: LD_EXP 7
6288: PUSH
6289: LD_VAR 0 2
6293: ARRAY
6294: IFFALSE 6421
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6296: LD_EXP 19
6300: PUSH
6301: LD_EXP 7
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: ARRAY
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 424
// for j := 1 to 8 do
6320: LD_ADDR_VAR 0 3
6324: PUSH
6325: DOUBLE
6326: LD_INT 1
6328: DEC
6329: ST_TO_ADDR
6330: LD_INT 8
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6419
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6336: LD_EXP 7
6340: PUSH
6341: LD_VAR 0 3
6345: ARRAY
6346: PUSH
6347: LD_EXP 8
6351: PUSH
6352: LD_VAR 0 2
6356: ARRAY
6357: PUSH
6358: LD_EXP 8
6362: PUSH
6363: LD_VAR 0 3
6367: ARRAY
6368: NONEQUAL
6369: PUSH
6370: LD_EXP 11
6374: NOT
6375: PUSH
6376: LD_VAR 0 2
6380: PUSH
6381: LD_VAR 0 3
6385: NONEQUAL
6386: AND
6387: OR
6388: AND
6389: IFFALSE 6417
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6391: LD_VAR 0 3
6395: PPUSH
6396: LD_EXP 19
6400: PUSH
6401: LD_EXP 7
6405: PUSH
6406: LD_VAR 0 2
6410: ARRAY
6411: ARRAY
6412: PPUSH
6413: CALL_OW 334
6417: GO 6333
6419: POP
6420: POP
// end ;
6421: GO 6281
6423: POP
6424: POP
// end ;
6425: LD_VAR 0 1
6429: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6430: LD_EXP 43
6434: IFFALSE 6609
6436: GO 6438
6438: DISABLE
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
// begin for i := 1 to 8 do
6443: LD_ADDR_VAR 0 1
6447: PUSH
6448: DOUBLE
6449: LD_INT 1
6451: DEC
6452: ST_TO_ADDR
6453: LD_INT 8
6455: PUSH
6456: FOR_TO
6457: IFFALSE 6606
// if mpSidePositions [ i ] then
6459: LD_EXP 7
6463: PUSH
6464: LD_VAR 0 1
6468: ARRAY
6469: IFFALSE 6604
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6471: LD_ADDR_VAR 0 2
6475: PUSH
6476: LD_EXP 19
6480: PUSH
6481: LD_EXP 7
6485: PUSH
6486: LD_VAR 0 1
6490: ARRAY
6491: ARRAY
6492: PPUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 21
6498: PUSH
6499: LD_INT 1
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 21
6508: PUSH
6509: LD_INT 2
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 22
6523: PUSH
6524: LD_OWVAR 2
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 70
6541: PUSH
6542: FOR_IN
6543: IFFALSE 6602
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6545: LD_EXP 8
6549: PUSH
6550: LD_VAR 0 1
6554: ARRAY
6555: PUSH
6556: LD_EXP 8
6560: PUSH
6561: LD_OWVAR 2
6565: ARRAY
6566: NONEQUAL
6567: PUSH
6568: LD_EXP 11
6572: NOT
6573: PUSH
6574: LD_VAR 0 1
6578: PUSH
6579: LD_OWVAR 2
6583: NONEQUAL
6584: AND
6585: OR
6586: IFFALSE 6600
// ComMoveToArea ( un , BuildUpEscape ) ;
6588: LD_VAR 0 2
6592: PPUSH
6593: LD_INT 15
6595: PPUSH
6596: CALL_OW 113
6600: GO 6542
6602: POP
6603: POP
6604: GO 6456
6606: POP
6607: POP
// enable ;
6608: ENABLE
// end ;
6609: PPOPN 2
6611: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6612: LD_EXP 20
6616: IFFALSE 6666
6618: GO 6620
6620: DISABLE
6621: LD_INT 0
6623: PPUSH
// begin tmp := mpBuildUpTime ;
6624: LD_ADDR_VAR 0 1
6628: PUSH
6629: LD_EXP 20
6633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6634: LD_INT 35
6636: PPUSH
6637: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6641: LD_ADDR_VAR 0 1
6645: PUSH
6646: LD_VAR 0 1
6650: PUSH
6651: LD_INT 35
6653: MINUS
6654: ST_TO_ADDR
// until not tmp ;
6655: LD_VAR 0 1
6659: NOT
6660: IFFALSE 6634
// EndBuildUp ;
6662: CALL 6255 0 0
// end ;
6666: PPOPN 1
6668: END
// every 0 0$1 trigger mpActive marked mpWin do
6669: LD_INT 100
6671: IFFALSE 6705
6673: GO 6675
6675: DISABLE
// begin if IAmServer then
6676: CALL_OW 518
6680: IFFALSE 6689
// wait ( 0 0$3 ) ;
6682: LD_INT 105
6684: PPUSH
6685: CALL_OW 67
// if Multiplayer then
6689: LD_OWVAR 4
6693: IFFALSE 6701
// YouWinInMultiplayer else
6695: CALL_OW 106
6699: GO 6705
// YouWin ;
6701: CALL_OW 103
// end ;
6705: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6706: LD_INT 0
6708: PPUSH
// result := false ;
6709: LD_ADDR_VAR 0 3
6713: PUSH
6714: LD_INT 0
6716: ST_TO_ADDR
// case gameType of GameTypeNormal :
6717: LD_VAR 0 1
6721: PUSH
6722: LD_INT 1
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6803
6730: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6731: LD_ADDR_VAR 0 3
6735: PUSH
6736: LD_INT 22
6738: PUSH
6739: LD_VAR 0 2
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 2
6750: PUSH
6751: LD_INT 21
6753: PUSH
6754: LD_INT 1
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 33
6763: PUSH
6764: LD_INT 3
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 33
6773: PUSH
6774: LD_INT 5
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: PPUSH
6796: CALL 11486 0 1
6800: ST_TO_ADDR
// end ; GameTypeSurvival :
6801: GO 7038
6803: LD_INT 2
6805: DOUBLE
6806: EQUAL
6807: IFTRUE 6811
6809: GO 6939
6811: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6812: LD_ADDR_VAR 0 3
6816: PUSH
6817: LD_INT 22
6819: PUSH
6820: LD_VAR 0 2
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 2
6831: PUSH
6832: LD_INT 30
6834: PUSH
6835: LD_INT 0
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 30
6844: PUSH
6845: LD_INT 1
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: CALL_OW 69
6865: PPUSH
6866: CALL 11486 0 1
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_VAR 0 2
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: LD_INT 21
6888: PUSH
6889: LD_INT 1
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 33
6898: PUSH
6899: LD_INT 3
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 33
6908: PUSH
6909: LD_INT 5
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PPUSH
6926: CALL_OW 69
6930: PPUSH
6931: CALL 11486 0 1
6935: AND
6936: ST_TO_ADDR
// end ; GameTypeKing :
6937: GO 7038
6939: LD_INT 3
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 7037
6947: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_VAR 0 2
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 2
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 33
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 33
6990: PUSH
6991: LD_INT 5
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PPUSH
7008: CALL_OW 69
7012: PPUSH
7013: CALL 11486 0 1
7017: PUSH
7018: LD_VAR 0 2
7022: PPUSH
7023: CALL 58731 0 1
7027: PUSH
7028: LD_EXP 35
7032: LESS
7033: AND
7034: ST_TO_ADDR
// end ; end ;
7035: GO 7038
7037: POP
// end ;
7038: LD_VAR 0 3
7042: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7043: LD_INT 100
7045: IFFALSE 7267
7047: GO 7049
7049: DISABLE
7050: LD_INT 0
7052: PPUSH
7053: PPUSH
// begin if Multiplayer then
7054: LD_OWVAR 4
7058: IFFALSE 7066
// SetPlayerSpectator ( ) else
7060: CALL_OW 572
7064: GO 7075
// FogOff ( your_side ) ;
7066: LD_OWVAR 2
7070: PPUSH
7071: CALL_OW 344
// repeat gameIsOn := false ;
7075: LD_ADDR_VAR 0 1
7079: PUSH
7080: LD_INT 0
7082: ST_TO_ADDR
// for i := 1 to 8 do
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: DOUBLE
7089: LD_INT 1
7091: DEC
7092: ST_TO_ADDR
7093: LD_INT 8
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7219
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7099: LD_EXP 7
7103: PUSH
7104: LD_VAR 0 2
7108: ARRAY
7109: PUSH
7110: LD_VAR 0 2
7114: PPUSH
7115: CALL_OW 108
7119: AND
7120: PUSH
7121: LD_VAR 0 2
7125: PUSH
7126: LD_OWVAR 2
7130: NONEQUAL
7131: AND
7132: IFFALSE 7217
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7134: LD_EXP 8
7138: PUSH
7139: LD_VAR 0 2
7143: ARRAY
7144: NOT
7145: PUSH
7146: LD_EXP 8
7150: PUSH
7151: LD_VAR 0 2
7155: ARRAY
7156: PUSH
7157: LD_EXP 8
7161: PUSH
7162: LD_OWVAR 2
7166: ARRAY
7167: NONEQUAL
7168: PUSH
7169: LD_OWVAR 2
7173: PPUSH
7174: LD_VAR 0 2
7178: PPUSH
7179: CALL_OW 81
7183: PUSH
7184: LD_INT 1
7186: NONEQUAL
7187: AND
7188: OR
7189: IFFALSE 7217
// if HasPowerByGameType ( mpGameType , i ) then
7191: LD_EXP 3
7195: PPUSH
7196: LD_VAR 0 2
7200: PPUSH
7201: CALL 6706 0 2
7205: IFFALSE 7217
// begin gameIsOn := true ;
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 1
7214: ST_TO_ADDR
// break ;
7215: GO 7219
// end ;
7217: GO 7096
7219: POP
7220: POP
// wait ( 100 ) ;
7221: LD_INT 100
7223: PPUSH
7224: CALL_OW 67
// until not gameIsOn ;
7228: LD_VAR 0 1
7232: NOT
7233: IFFALSE 7075
// if IAmServer then
7235: CALL_OW 518
7239: IFFALSE 7248
// wait ( 0 0$3 ) ;
7241: LD_INT 105
7243: PPUSH
7244: CALL_OW 67
// if Multiplayer then
7248: LD_OWVAR 4
7252: IFFALSE 7260
// YouLostInMultiplayer else
7254: CALL_OW 107
7258: GO 7267
// YouLost (  ) ;
7260: LD_STRING 
7262: PPUSH
7263: CALL_OW 104
// end ;
7267: PPOPN 2
7269: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7270: LD_EXP 33
7274: IFFALSE 7650
7276: GO 7278
7278: DISABLE
7279: LD_INT 0
7281: PPUSH
7282: PPUSH
7283: PPUSH
7284: PPUSH
7285: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7286: LD_ADDR_VAR 0 5
7290: PUSH
7291: LD_INT 1
7293: PUSH
7294: LD_INT 2
7296: PUSH
7297: LD_INT 3
7299: PUSH
7300: LD_INT 4
7302: PUSH
7303: LD_INT 5
7305: PUSH
7306: LD_INT 6
7308: PUSH
7309: LD_INT 7
7311: PUSH
7312: LD_INT 8
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7325: LD_INT 350
7327: PPUSH
7328: CALL_OW 67
// for i := 1 to 8 do
7332: LD_ADDR_VAR 0 1
7336: PUSH
7337: DOUBLE
7338: LD_INT 1
7340: DEC
7341: ST_TO_ADDR
7342: LD_INT 8
7344: PUSH
7345: FOR_TO
7346: IFFALSE 7620
// begin j := sides [ i ] ;
7348: LD_ADDR_VAR 0 2
7352: PUSH
7353: LD_VAR 0 5
7357: PUSH
7358: LD_VAR 0 1
7362: ARRAY
7363: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7364: LD_EXP 40
7368: PUSH
7369: LD_VAR 0 2
7373: ARRAY
7374: PPUSH
7375: CALL 11486 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PPUSH
7385: CALL_OW 108
7389: AND
7390: PUSH
7391: LD_EXP 3
7395: PPUSH
7396: LD_VAR 0 2
7400: PPUSH
7401: CALL 6706 0 2
7405: AND
7406: IFFALSE 7618
// begin wait ( mpRespawn div 3 ) ;
7408: LD_EXP 33
7412: PUSH
7413: LD_INT 3
7415: DIV
7416: PPUSH
7417: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7421: LD_ADDR_VAR 0 3
7425: PUSH
7426: LD_INT 22
7428: PUSH
7429: LD_VAR 0 2
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 50
7440: PUSH
7441: EMPTY
7442: LIST
7443: PUSH
7444: LD_INT 2
7446: PUSH
7447: LD_INT 30
7449: PUSH
7450: LD_INT 0
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 30
7459: PUSH
7460: LD_INT 1
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 69
7481: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7482: LD_VAR 0 3
7486: NOT
7487: PUSH
7488: LD_VAR 0 2
7492: PPUSH
7493: CALL_OW 108
7497: NOT
7498: OR
7499: PUSH
7500: LD_EXP 3
7504: PPUSH
7505: LD_VAR 0 2
7509: PPUSH
7510: CALL 6706 0 2
7514: NOT
7515: OR
7516: IFFALSE 7520
// continue ;
7518: GO 7345
// spawn := tmp [ 1 ] ;
7520: LD_ADDR_VAR 0 4
7524: PUSH
7525: LD_VAR 0 3
7529: PUSH
7530: LD_INT 1
7532: ARRAY
7533: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7534: LD_EXP 40
7538: PUSH
7539: LD_VAR 0 2
7543: ARRAY
7544: PUSH
7545: LD_INT 1
7547: ARRAY
7548: PPUSH
7549: LD_VAR 0 4
7553: PPUSH
7554: CALL_OW 250
7558: PPUSH
7559: LD_VAR 0 4
7563: PPUSH
7564: CALL_OW 251
7568: PPUSH
7569: LD_INT 32
7571: PPUSH
7572: LD_INT 1
7574: PPUSH
7575: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7579: LD_ADDR_EXP 40
7583: PUSH
7584: LD_EXP 40
7588: PPUSH
7589: LD_VAR 0 2
7593: PPUSH
7594: LD_EXP 40
7598: PUSH
7599: LD_VAR 0 2
7603: ARRAY
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: CALL_OW 3
7612: PPUSH
7613: CALL_OW 1
7617: ST_TO_ADDR
// end ; end ;
7618: GO 7345
7620: POP
7621: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7622: LD_ADDR_VAR 0 5
7626: PUSH
7627: LD_VAR 0 5
7631: PPUSH
7632: LD_INT 1
7634: PPUSH
7635: LD_INT 8
7637: PPUSH
7638: LD_INT 1
7640: PPUSH
7641: CALL 13764 0 4
7645: ST_TO_ADDR
// until false ;
7646: LD_INT 0
7648: IFFALSE 7325
// end ;
7650: PPOPN 5
7652: END
// every 0 0$1 marked mpActive do
7653: GO 7655
7655: DISABLE
// begin enable ;
7656: ENABLE
// if not mpDisplayStrings then
7657: LD_EXP 38
7661: NOT
7662: IFFALSE 7673
// begin display_strings := [ ] ;
7664: LD_ADDR_OWVAR 47
7668: PUSH
7669: EMPTY
7670: ST_TO_ADDR
// exit ;
7671: GO 7683
// end ; display_strings := mpDisplayStrings ;
7673: LD_ADDR_OWVAR 47
7677: PUSH
7678: LD_EXP 38
7682: ST_TO_ADDR
// end ; end_of_file
7683: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7684: LD_INT 0
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
// if GetType ( un ) = unit_vehicle then
7695: LD_VAR 0 1
7699: PPUSH
7700: CALL_OW 247
7704: PUSH
7705: LD_INT 2
7707: EQUAL
7708: IFFALSE 7712
// exit ;
7710: GO 8344
// side := GetSide ( un ) ;
7712: LD_ADDR_VAR 0 9
7716: PUSH
7717: LD_VAR 0 1
7721: PPUSH
7722: CALL_OW 255
7726: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7727: LD_EXP 3
7731: PUSH
7732: LD_INT 2
7734: EQUAL
7735: IFFALSE 7811
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7737: LD_VAR 0 1
7741: PPUSH
7742: CALL_OW 266
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: IN
7757: IFFALSE 7811
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_VAR 0 9
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 21
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: PUSH
7795: FOR_IN
7796: IFFALSE 7809
// KillUnit ( i ) ;
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 66
7807: GO 7795
7809: POP
7810: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7811: LD_VAR 0 1
7815: PPUSH
7816: CALL_OW 257
7820: PUSH
7821: LD_INT 12
7823: PUSH
7824: LD_INT 17
7826: PUSH
7827: LD_INT 15
7829: PUSH
7830: LD_INT 16
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: IN
7839: PUSH
7840: LD_VAR 0 1
7844: PPUSH
7845: CALL_OW 263
7849: PUSH
7850: LD_INT 5
7852: EQUAL
7853: OR
7854: IFFALSE 8073
// begin tag := 0 ;
7856: LD_ADDR_VAR 0 5
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// for i := 1 to 8 do
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: DOUBLE
7870: LD_INT 1
7872: DEC
7873: ST_TO_ADDR
7874: LD_INT 8
7876: PUSH
7877: FOR_TO
7878: IFFALSE 7912
// if un in mpApePosIndex [ i ] then
7880: LD_VAR 0 1
7884: PUSH
7885: LD_EXP 32
7889: PUSH
7890: LD_VAR 0 3
7894: ARRAY
7895: IN
7896: IFFALSE 7910
// begin tag := i ;
7898: LD_ADDR_VAR 0 5
7902: PUSH
7903: LD_VAR 0 3
7907: ST_TO_ADDR
// break ;
7908: GO 7912
// end ;
7910: GO 7877
7912: POP
7913: POP
// if not tag then
7914: LD_VAR 0 5
7918: NOT
7919: IFFALSE 7923
// exit ;
7921: GO 8344
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7923: LD_ADDR_VAR 0 7
7927: PUSH
7928: LD_EXP 31
7932: PUSH
7933: LD_EXP 7
7937: PUSH
7938: LD_VAR 0 5
7942: ARRAY
7943: ARRAY
7944: ST_TO_ADDR
// if not area then
7945: LD_VAR 0 7
7949: NOT
7950: IFFALSE 7954
// exit ;
7952: GO 8344
// wait ( 4 4$00 ) ;
7954: LD_INT 8400
7956: PPUSH
7957: CALL_OW 67
// repeat wait ( 10 ) ;
7961: LD_INT 10
7963: PPUSH
7964: CALL_OW 67
// until not mpBlockRespThread ;
7968: LD_EXP 41
7972: NOT
7973: IFFALSE 7961
// mpBlockRespThread := true ;
7975: LD_ADDR_EXP 41
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7983: LD_INT 0
7985: PPUSH
7986: CALL 43343 0 1
// ape := CreateHuman ;
7990: LD_ADDR_VAR 0 4
7994: PUSH
7995: CALL_OW 44
7999: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8000: LD_ADDR_EXP 32
8004: PUSH
8005: LD_EXP 32
8009: PPUSH
8010: LD_VAR 0 5
8014: PPUSH
8015: LD_EXP 32
8019: PUSH
8020: LD_VAR 0 5
8024: ARRAY
8025: PPUSH
8026: LD_VAR 0 4
8030: PPUSH
8031: CALL 47095 0 2
8035: PPUSH
8036: CALL_OW 1
8040: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8041: LD_VAR 0 4
8045: PPUSH
8046: LD_VAR 0 7
8050: PPUSH
8051: LD_INT 0
8053: PPUSH
8054: CALL_OW 49
// wait ( 10 ) ;
8058: LD_INT 10
8060: PPUSH
8061: CALL_OW 67
// mpBlockRespThread := false ;
8065: LD_ADDR_EXP 41
8069: PUSH
8070: LD_INT 0
8072: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 247
8082: PUSH
8083: LD_INT 1
8085: EQUAL
8086: PUSH
8087: LD_VAR 0 1
8091: PPUSH
8092: CALL_OW 248
8096: PUSH
8097: LD_INT 0
8099: GREATER
8100: AND
8101: IFFALSE 8344
// begin if not mpRespawn then
8103: LD_EXP 33
8107: NOT
8108: IFFALSE 8112
// exit ;
8110: GO 8344
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8112: LD_VAR 0 9
8116: PPUSH
8117: CALL_OW 108
8121: NOT
8122: PUSH
8123: LD_EXP 3
8127: PPUSH
8128: LD_VAR 0 9
8132: PPUSH
8133: CALL 6706 0 2
8137: NOT
8138: AND
8139: IFFALSE 8143
// exit ;
8141: GO 8344
// side := GetSide ( un ) ;
8143: LD_ADDR_VAR 0 9
8147: PUSH
8148: LD_VAR 0 1
8152: PPUSH
8153: CALL_OW 255
8157: ST_TO_ADDR
// nation := GetNation ( un ) ;
8158: LD_ADDR_VAR 0 8
8162: PUSH
8163: LD_VAR 0 1
8167: PPUSH
8168: CALL_OW 248
8172: ST_TO_ADDR
// class := GetClass ( un ) ;
8173: LD_ADDR_VAR 0 6
8177: PUSH
8178: LD_VAR 0 1
8182: PPUSH
8183: CALL_OW 257
8187: ST_TO_ADDR
// if class > 4 then
8188: LD_VAR 0 6
8192: PUSH
8193: LD_INT 4
8195: GREATER
8196: IFFALSE 8206
// class := 1 ;
8198: LD_ADDR_VAR 0 6
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// repeat wait ( 10 ) ;
8206: LD_INT 10
8208: PPUSH
8209: CALL_OW 67
// until not mpBlockRespThread ;
8213: LD_EXP 41
8217: NOT
8218: IFFALSE 8206
// mpBlockRespThread := true ;
8220: LD_ADDR_EXP 41
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// uc_side := side ;
8228: LD_ADDR_OWVAR 20
8232: PUSH
8233: LD_VAR 0 9
8237: ST_TO_ADDR
// uc_nation := nation ;
8238: LD_ADDR_OWVAR 21
8242: PUSH
8243: LD_VAR 0 8
8247: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8248: LD_INT 0
8250: PPUSH
8251: LD_VAR 0 6
8255: PPUSH
8256: LD_INT 2
8258: PPUSH
8259: CALL_OW 380
// un := CreateHuman ;
8263: LD_ADDR_VAR 0 1
8267: PUSH
8268: CALL_OW 44
8272: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8273: LD_ADDR_EXP 40
8277: PUSH
8278: LD_EXP 40
8282: PPUSH
8283: LD_VAR 0 9
8287: PPUSH
8288: LD_EXP 40
8292: PUSH
8293: LD_VAR 0 9
8297: ARRAY
8298: PPUSH
8299: LD_EXP 40
8303: PUSH
8304: LD_VAR 0 9
8308: ARRAY
8309: PUSH
8310: LD_INT 1
8312: PLUS
8313: PPUSH
8314: LD_VAR 0 1
8318: PPUSH
8319: CALL_OW 1
8323: PPUSH
8324: CALL_OW 1
8328: ST_TO_ADDR
// wait ( 10 ) ;
8329: LD_INT 10
8331: PPUSH
8332: CALL_OW 67
// mpBlockRespThread := false ;
8336: LD_ADDR_EXP 41
8340: PUSH
8341: LD_INT 0
8343: ST_TO_ADDR
// end ; end ;
8344: LD_VAR 0 2
8348: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8349: LD_INT 0
8351: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 266
8361: PUSH
8362: LD_INT 0
8364: PUSH
8365: LD_INT 1
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: IN
8372: IFFALSE 8397
// SetBName ( building , @ & GetSide ( building ) ) ;
8374: LD_VAR 0 1
8378: PPUSH
8379: LD_STRING @
8381: PUSH
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: STR
8392: PPUSH
8393: CALL_OW 500
// end ;
8397: LD_VAR 0 2
8401: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8402: LD_INT 0
8404: PPUSH
8405: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8406: LD_EXP 3
8410: PUSH
8411: LD_INT 2
8413: EQUAL
8414: PUSH
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 266
8424: PUSH
8425: LD_INT 0
8427: PUSH
8428: LD_INT 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: IN
8435: AND
8436: IFFALSE 8501
// begin KillUnit ( building ) ;
8438: LD_VAR 0 1
8442: PPUSH
8443: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8447: LD_ADDR_VAR 0 5
8451: PUSH
8452: LD_INT 22
8454: PUSH
8455: LD_VAR 0 2
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 21
8466: PUSH
8467: LD_INT 1
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PPUSH
8478: CALL_OW 69
8482: PUSH
8483: FOR_IN
8484: IFFALSE 8497
// KillUnit ( i ) ;
8486: LD_VAR 0 5
8490: PPUSH
8491: CALL_OW 66
8495: GO 8483
8497: POP
8498: POP
// exit ;
8499: GO 8546
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 266
8510: PUSH
8511: LD_INT 0
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: IN
8521: IFFALSE 8546
// SetBName ( building , @ & GetSide ( building ) ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_STRING @
8530: PUSH
8531: LD_VAR 0 1
8535: PPUSH
8536: CALL_OW 255
8540: STR
8541: PPUSH
8542: CALL_OW 500
// end ; end_of_file
8546: LD_VAR 0 4
8550: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8551: LD_EXP 39
8555: PUSH
8556: CALL 8761 0 0
8560: AND
8561: PUSH
8562: LD_OWVAR 4
8566: AND
8567: IFFALSE 8758
8569: GO 8571
8571: DISABLE
8572: LD_INT 0
8574: PPUSH
8575: PPUSH
// begin canWin := false ;
8576: LD_ADDR_VAR 0 2
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// if not HasPower ( your_side ) then
8584: LD_OWVAR 2
8588: PPUSH
8589: CALL 8801 0 1
8593: NOT
8594: IFFALSE 8605
// begin Multiplayer_Loose_Message ;
8596: CALL_OW 521
// enable ( mpLose ) ;
8600: LD_INT 102
8602: ENABLE_MARKED
// end else
8603: GO 8758
// begin canWin := true ;
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_INT 1
8612: ST_TO_ADDR
// for i := 1 to 8 do
8613: LD_ADDR_VAR 0 1
8617: PUSH
8618: DOUBLE
8619: LD_INT 1
8621: DEC
8622: ST_TO_ADDR
8623: LD_INT 8
8625: PUSH
8626: FOR_TO
8627: IFFALSE 8744
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8629: LD_EXP 7
8633: PUSH
8634: LD_VAR 0 1
8638: ARRAY
8639: PUSH
8640: LD_VAR 0 1
8644: PPUSH
8645: CALL_OW 108
8649: AND
8650: PUSH
8651: LD_VAR 0 1
8655: PUSH
8656: LD_OWVAR 2
8660: NONEQUAL
8661: AND
8662: IFFALSE 8742
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8664: LD_EXP 8
8668: PUSH
8669: LD_VAR 0 1
8673: ARRAY
8674: NOT
8675: PUSH
8676: LD_EXP 8
8680: PUSH
8681: LD_VAR 0 1
8685: ARRAY
8686: PUSH
8687: LD_EXP 8
8691: PUSH
8692: LD_OWVAR 2
8696: ARRAY
8697: NONEQUAL
8698: PUSH
8699: LD_OWVAR 2
8703: PPUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: CALL_OW 81
8713: PUSH
8714: LD_INT 1
8716: NONEQUAL
8717: AND
8718: OR
8719: IFFALSE 8742
// if HasPower ( i ) then
8721: LD_VAR 0 1
8725: PPUSH
8726: CALL 8801 0 1
8730: IFFALSE 8742
// begin canWin := false ;
8732: LD_ADDR_VAR 0 2
8736: PUSH
8737: LD_INT 0
8739: ST_TO_ADDR
// break ;
8740: GO 8744
// end ;
8742: GO 8626
8744: POP
8745: POP
// if canWin then
8746: LD_VAR 0 2
8750: IFFALSE 8757
// enable ( mpWin ) else
8752: LD_INT 101
8754: ENABLE_MARKED
8755: GO 8758
// enable ;
8757: ENABLE
// end ; end ;
8758: PPOPN 2
8760: END
// function CanWinLoose ; begin
8761: LD_INT 0
8763: PPUSH
// result := true ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8772: CALL_OW 531
8776: PUSH
8777: CALL_OW 519
8781: PUSH
8782: LD_INT 1
8784: GREATER
8785: AND
8786: IFFALSE 8796
// result := false ;
8788: LD_ADDR_VAR 0 1
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// end ;
8796: LD_VAR 0 1
8800: RET
// function HasPower ( i ) ; begin
8801: LD_INT 0
8803: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8804: LD_ADDR_VAR 0 2
8808: PUSH
8809: LD_INT 22
8811: PUSH
8812: LD_VAR 0 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 1
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 33
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 33
8846: PUSH
8847: LD_INT 5
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// end ; end_of_file
8869: LD_VAR 0 2
8873: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8874: LD_EXP 39
8878: IFFALSE 8921
8880: GO 8882
8882: DISABLE
8883: LD_INT 0
8885: PPUSH
// begin for i := 1 to 8 do
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: DOUBLE
8892: LD_INT 1
8894: DEC
8895: ST_TO_ADDR
8896: LD_INT 8
8898: PUSH
8899: FOR_TO
8900: IFFALSE 8919
// SetRestrict ( b_depot , i , state_disabled ) ;
8902: LD_INT 0
8904: PPUSH
8905: LD_VAR 0 1
8909: PPUSH
8910: LD_INT 0
8912: PPUSH
8913: CALL_OW 324
8917: GO 8899
8919: POP
8920: POP
// end ;
8921: PPOPN 1
8923: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8924: LD_EXP 39
8928: PUSH
8929: CALL 9134 0 0
8933: AND
8934: PUSH
8935: LD_OWVAR 4
8939: AND
8940: IFFALSE 9131
8942: GO 8944
8944: DISABLE
8945: LD_INT 0
8947: PPUSH
8948: PPUSH
// begin canWin := false ;
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: LD_INT 0
8956: ST_TO_ADDR
// if not HasPower ( your_side ) then
8957: LD_OWVAR 2
8961: PPUSH
8962: CALL 9174 0 1
8966: NOT
8967: IFFALSE 8978
// begin Multiplayer_Loose_Message ;
8969: CALL_OW 521
// enable ( mpLose ) ;
8973: LD_INT 102
8975: ENABLE_MARKED
// end else
8976: GO 9131
// begin canWin := true ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// for i := 1 to 8 do
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: DOUBLE
8992: LD_INT 1
8994: DEC
8995: ST_TO_ADDR
8996: LD_INT 8
8998: PUSH
8999: FOR_TO
9000: IFFALSE 9117
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9002: LD_EXP 7
9006: PUSH
9007: LD_VAR 0 1
9011: ARRAY
9012: PUSH
9013: LD_VAR 0 1
9017: PPUSH
9018: CALL_OW 108
9022: AND
9023: PUSH
9024: LD_VAR 0 1
9028: PUSH
9029: LD_OWVAR 2
9033: NONEQUAL
9034: AND
9035: IFFALSE 9115
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9037: LD_EXP 8
9041: PUSH
9042: LD_VAR 0 1
9046: ARRAY
9047: NOT
9048: PUSH
9049: LD_EXP 8
9053: PUSH
9054: LD_VAR 0 1
9058: ARRAY
9059: PUSH
9060: LD_EXP 8
9064: PUSH
9065: LD_OWVAR 2
9069: ARRAY
9070: NONEQUAL
9071: PUSH
9072: LD_OWVAR 2
9076: PPUSH
9077: LD_VAR 0 1
9081: PPUSH
9082: CALL_OW 81
9086: PUSH
9087: LD_INT 1
9089: NONEQUAL
9090: AND
9091: OR
9092: IFFALSE 9115
// if HasPower ( i ) then
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL 9174 0 1
9103: IFFALSE 9115
// begin canWin := false ;
9105: LD_ADDR_VAR 0 2
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// break ;
9113: GO 9117
// end ;
9115: GO 8999
9117: POP
9118: POP
// if canWin then
9119: LD_VAR 0 2
9123: IFFALSE 9130
// enable ( mpWin ) else
9125: LD_INT 101
9127: ENABLE_MARKED
9128: GO 9131
// enable ;
9130: ENABLE
// end ; end ;
9131: PPOPN 2
9133: END
// function CanWinLoose ; begin
9134: LD_INT 0
9136: PPUSH
// result := true ;
9137: LD_ADDR_VAR 0 1
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9145: CALL_OW 531
9149: PUSH
9150: CALL_OW 519
9154: PUSH
9155: LD_INT 1
9157: GREATER
9158: AND
9159: IFFALSE 9169
// result := false ;
9161: LD_ADDR_VAR 0 1
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// end ;
9169: LD_VAR 0 1
9173: RET
// function HasPower ( i ) ; begin
9174: LD_INT 0
9176: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9177: LD_INT 22
9179: PUSH
9180: LD_VAR 0 1
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 2
9191: PUSH
9192: LD_INT 30
9194: PUSH
9195: LD_INT 0
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: LD_INT 30
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PPUSH
9221: CALL_OW 69
9225: NOT
9226: IFFALSE 9230
// exit ;
9228: GO 9295
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: LD_INT 22
9237: PUSH
9238: LD_VAR 0 1
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 2
9249: PUSH
9250: LD_INT 21
9252: PUSH
9253: LD_INT 1
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 33
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 33
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PPUSH
9290: CALL_OW 69
9294: ST_TO_ADDR
// end ; end_of_file
9295: LD_VAR 0 2
9299: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9300: LD_INT 0
9302: PPUSH
9303: PPUSH
// if exist_mode then
9304: LD_VAR 0 2
9308: IFFALSE 9354
// begin unit := CreateCharacter ( prefix & ident ) ;
9310: LD_ADDR_VAR 0 5
9314: PUSH
9315: LD_VAR 0 3
9319: PUSH
9320: LD_VAR 0 1
9324: STR
9325: PPUSH
9326: CALL_OW 34
9330: ST_TO_ADDR
// if unit then
9331: LD_VAR 0 5
9335: IFFALSE 9352
// DeleteCharacters ( prefix & ident ) ;
9337: LD_VAR 0 3
9341: PUSH
9342: LD_VAR 0 1
9346: STR
9347: PPUSH
9348: CALL_OW 40
// end else
9352: GO 9369
// unit := NewCharacter ( ident ) ;
9354: LD_ADDR_VAR 0 5
9358: PUSH
9359: LD_VAR 0 1
9363: PPUSH
9364: CALL_OW 25
9368: ST_TO_ADDR
// result := unit ;
9369: LD_ADDR_VAR 0 4
9373: PUSH
9374: LD_VAR 0 5
9378: ST_TO_ADDR
// end ;
9379: LD_VAR 0 4
9383: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9384: LD_INT 0
9386: PPUSH
9387: PPUSH
// if exist_mode then
9388: LD_VAR 0 2
9392: IFFALSE 9417
// unit := CreateCharacter ( prefix & ident ) else
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_VAR 0 3
9403: PUSH
9404: LD_VAR 0 1
9408: STR
9409: PPUSH
9410: CALL_OW 34
9414: ST_TO_ADDR
9415: GO 9432
// unit := NewCharacter ( ident ) ;
9417: LD_ADDR_VAR 0 5
9421: PUSH
9422: LD_VAR 0 1
9426: PPUSH
9427: CALL_OW 25
9431: ST_TO_ADDR
// result := unit ;
9432: LD_ADDR_VAR 0 4
9436: PUSH
9437: LD_VAR 0 5
9441: ST_TO_ADDR
// end ;
9442: LD_VAR 0 4
9446: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9447: LD_INT 0
9449: PPUSH
9450: PPUSH
// if not side or not nation then
9451: LD_VAR 0 1
9455: NOT
9456: PUSH
9457: LD_VAR 0 2
9461: NOT
9462: OR
9463: IFFALSE 9467
// exit ;
9465: GO 10235
// case nation of nation_american :
9467: LD_VAR 0 2
9471: PUSH
9472: LD_INT 1
9474: DOUBLE
9475: EQUAL
9476: IFTRUE 9480
9478: GO 9694
9480: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9481: LD_ADDR_VAR 0 4
9485: PUSH
9486: LD_INT 35
9488: PUSH
9489: LD_INT 45
9491: PUSH
9492: LD_INT 46
9494: PUSH
9495: LD_INT 47
9497: PUSH
9498: LD_INT 82
9500: PUSH
9501: LD_INT 83
9503: PUSH
9504: LD_INT 84
9506: PUSH
9507: LD_INT 85
9509: PUSH
9510: LD_INT 86
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: LD_INT 2
9518: PUSH
9519: LD_INT 6
9521: PUSH
9522: LD_INT 15
9524: PUSH
9525: LD_INT 16
9527: PUSH
9528: LD_INT 7
9530: PUSH
9531: LD_INT 12
9533: PUSH
9534: LD_INT 13
9536: PUSH
9537: LD_INT 10
9539: PUSH
9540: LD_INT 14
9542: PUSH
9543: LD_INT 20
9545: PUSH
9546: LD_INT 21
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 32
9557: PUSH
9558: LD_INT 27
9560: PUSH
9561: LD_INT 36
9563: PUSH
9564: LD_INT 69
9566: PUSH
9567: LD_INT 39
9569: PUSH
9570: LD_INT 34
9572: PUSH
9573: LD_INT 40
9575: PUSH
9576: LD_INT 48
9578: PUSH
9579: LD_INT 49
9581: PUSH
9582: LD_INT 50
9584: PUSH
9585: LD_INT 51
9587: PUSH
9588: LD_INT 52
9590: PUSH
9591: LD_INT 53
9593: PUSH
9594: LD_INT 54
9596: PUSH
9597: LD_INT 55
9599: PUSH
9600: LD_INT 56
9602: PUSH
9603: LD_INT 57
9605: PUSH
9606: LD_INT 58
9608: PUSH
9609: LD_INT 59
9611: PUSH
9612: LD_INT 60
9614: PUSH
9615: LD_INT 61
9617: PUSH
9618: LD_INT 62
9620: PUSH
9621: LD_INT 80
9623: PUSH
9624: LD_INT 82
9626: PUSH
9627: LD_INT 83
9629: PUSH
9630: LD_INT 84
9632: PUSH
9633: LD_INT 85
9635: PUSH
9636: LD_INT 86
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: ST_TO_ADDR
9692: GO 10159
9694: LD_INT 2
9696: DOUBLE
9697: EQUAL
9698: IFTRUE 9702
9700: GO 9928
9702: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9703: LD_ADDR_VAR 0 4
9707: PUSH
9708: LD_INT 35
9710: PUSH
9711: LD_INT 45
9713: PUSH
9714: LD_INT 46
9716: PUSH
9717: LD_INT 47
9719: PUSH
9720: LD_INT 82
9722: PUSH
9723: LD_INT 83
9725: PUSH
9726: LD_INT 84
9728: PUSH
9729: LD_INT 85
9731: PUSH
9732: LD_INT 87
9734: PUSH
9735: LD_INT 70
9737: PUSH
9738: LD_INT 1
9740: PUSH
9741: LD_INT 11
9743: PUSH
9744: LD_INT 3
9746: PUSH
9747: LD_INT 4
9749: PUSH
9750: LD_INT 5
9752: PUSH
9753: LD_INT 6
9755: PUSH
9756: LD_INT 15
9758: PUSH
9759: LD_INT 18
9761: PUSH
9762: LD_INT 7
9764: PUSH
9765: LD_INT 17
9767: PUSH
9768: LD_INT 8
9770: PUSH
9771: LD_INT 20
9773: PUSH
9774: LD_INT 21
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 72
9782: PUSH
9783: LD_INT 26
9785: PUSH
9786: LD_INT 69
9788: PUSH
9789: LD_INT 39
9791: PUSH
9792: LD_INT 40
9794: PUSH
9795: LD_INT 41
9797: PUSH
9798: LD_INT 42
9800: PUSH
9801: LD_INT 43
9803: PUSH
9804: LD_INT 48
9806: PUSH
9807: LD_INT 49
9809: PUSH
9810: LD_INT 50
9812: PUSH
9813: LD_INT 51
9815: PUSH
9816: LD_INT 52
9818: PUSH
9819: LD_INT 53
9821: PUSH
9822: LD_INT 54
9824: PUSH
9825: LD_INT 55
9827: PUSH
9828: LD_INT 56
9830: PUSH
9831: LD_INT 60
9833: PUSH
9834: LD_INT 61
9836: PUSH
9837: LD_INT 62
9839: PUSH
9840: LD_INT 66
9842: PUSH
9843: LD_INT 67
9845: PUSH
9846: LD_INT 68
9848: PUSH
9849: LD_INT 81
9851: PUSH
9852: LD_INT 82
9854: PUSH
9855: LD_INT 83
9857: PUSH
9858: LD_INT 84
9860: PUSH
9861: LD_INT 85
9863: PUSH
9864: LD_INT 87
9866: PUSH
9867: LD_INT 88
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ST_TO_ADDR
9926: GO 10159
9928: LD_INT 3
9930: DOUBLE
9931: EQUAL
9932: IFTRUE 9936
9934: GO 10158
9936: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9937: LD_ADDR_VAR 0 4
9941: PUSH
9942: LD_INT 46
9944: PUSH
9945: LD_INT 47
9947: PUSH
9948: LD_INT 1
9950: PUSH
9951: LD_INT 2
9953: PUSH
9954: LD_INT 82
9956: PUSH
9957: LD_INT 83
9959: PUSH
9960: LD_INT 84
9962: PUSH
9963: LD_INT 85
9965: PUSH
9966: LD_INT 86
9968: PUSH
9969: LD_INT 11
9971: PUSH
9972: LD_INT 9
9974: PUSH
9975: LD_INT 20
9977: PUSH
9978: LD_INT 19
9980: PUSH
9981: LD_INT 21
9983: PUSH
9984: LD_INT 24
9986: PUSH
9987: LD_INT 22
9989: PUSH
9990: LD_INT 25
9992: PUSH
9993: LD_INT 28
9995: PUSH
9996: LD_INT 29
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 31
10004: PUSH
10005: LD_INT 37
10007: PUSH
10008: LD_INT 38
10010: PUSH
10011: LD_INT 32
10013: PUSH
10014: LD_INT 27
10016: PUSH
10017: LD_INT 33
10019: PUSH
10020: LD_INT 69
10022: PUSH
10023: LD_INT 39
10025: PUSH
10026: LD_INT 34
10028: PUSH
10029: LD_INT 40
10031: PUSH
10032: LD_INT 71
10034: PUSH
10035: LD_INT 23
10037: PUSH
10038: LD_INT 44
10040: PUSH
10041: LD_INT 48
10043: PUSH
10044: LD_INT 49
10046: PUSH
10047: LD_INT 50
10049: PUSH
10050: LD_INT 51
10052: PUSH
10053: LD_INT 52
10055: PUSH
10056: LD_INT 53
10058: PUSH
10059: LD_INT 54
10061: PUSH
10062: LD_INT 55
10064: PUSH
10065: LD_INT 56
10067: PUSH
10068: LD_INT 57
10070: PUSH
10071: LD_INT 58
10073: PUSH
10074: LD_INT 59
10076: PUSH
10077: LD_INT 63
10079: PUSH
10080: LD_INT 64
10082: PUSH
10083: LD_INT 65
10085: PUSH
10086: LD_INT 82
10088: PUSH
10089: LD_INT 83
10091: PUSH
10092: LD_INT 84
10094: PUSH
10095: LD_INT 85
10097: PUSH
10098: LD_INT 86
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: ST_TO_ADDR
10156: GO 10159
10158: POP
// if state > - 1 and state < 3 then
10159: LD_VAR 0 3
10163: PUSH
10164: LD_INT 1
10166: NEG
10167: GREATER
10168: PUSH
10169: LD_VAR 0 3
10173: PUSH
10174: LD_INT 3
10176: LESS
10177: AND
10178: IFFALSE 10235
// for i in result do
10180: LD_ADDR_VAR 0 5
10184: PUSH
10185: LD_VAR 0 4
10189: PUSH
10190: FOR_IN
10191: IFFALSE 10233
// if GetTech ( i , side ) <> state then
10193: LD_VAR 0 5
10197: PPUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 321
10207: PUSH
10208: LD_VAR 0 3
10212: NONEQUAL
10213: IFFALSE 10231
// result := result diff i ;
10215: LD_ADDR_VAR 0 4
10219: PUSH
10220: LD_VAR 0 4
10224: PUSH
10225: LD_VAR 0 5
10229: DIFF
10230: ST_TO_ADDR
10231: GO 10190
10233: POP
10234: POP
// end ;
10235: LD_VAR 0 4
10239: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10240: LD_INT 0
10242: PPUSH
10243: PPUSH
10244: PPUSH
// result := true ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10253: LD_ADDR_VAR 0 5
10257: PUSH
10258: LD_VAR 0 2
10262: PPUSH
10263: CALL_OW 480
10267: ST_TO_ADDR
// if not tmp then
10268: LD_VAR 0 5
10272: NOT
10273: IFFALSE 10277
// exit ;
10275: GO 10326
// for i in tmp do
10277: LD_ADDR_VAR 0 4
10281: PUSH
10282: LD_VAR 0 5
10286: PUSH
10287: FOR_IN
10288: IFFALSE 10324
// if GetTech ( i , side ) <> state_researched then
10290: LD_VAR 0 4
10294: PPUSH
10295: LD_VAR 0 1
10299: PPUSH
10300: CALL_OW 321
10304: PUSH
10305: LD_INT 2
10307: NONEQUAL
10308: IFFALSE 10322
// begin result := false ;
10310: LD_ADDR_VAR 0 3
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// exit ;
10318: POP
10319: POP
10320: GO 10326
// end ;
10322: GO 10287
10324: POP
10325: POP
// end ;
10326: LD_VAR 0 3
10330: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10331: LD_INT 0
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
10338: PPUSH
10339: PPUSH
10340: PPUSH
10341: PPUSH
10342: PPUSH
10343: PPUSH
10344: PPUSH
10345: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10346: LD_VAR 0 1
10350: NOT
10351: PUSH
10352: LD_VAR 0 1
10356: PPUSH
10357: CALL_OW 257
10361: PUSH
10362: LD_INT 9
10364: NONEQUAL
10365: OR
10366: IFFALSE 10370
// exit ;
10368: GO 10943
// side := GetSide ( unit ) ;
10370: LD_ADDR_VAR 0 9
10374: PUSH
10375: LD_VAR 0 1
10379: PPUSH
10380: CALL_OW 255
10384: ST_TO_ADDR
// tech_space := tech_spacanom ;
10385: LD_ADDR_VAR 0 12
10389: PUSH
10390: LD_INT 29
10392: ST_TO_ADDR
// tech_time := tech_taurad ;
10393: LD_ADDR_VAR 0 13
10397: PUSH
10398: LD_INT 28
10400: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10401: LD_ADDR_VAR 0 11
10405: PUSH
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 310
10415: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10416: LD_VAR 0 11
10420: PPUSH
10421: CALL_OW 247
10425: PUSH
10426: LD_INT 2
10428: EQUAL
10429: IFFALSE 10433
// exit ;
10431: GO 10943
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10433: LD_ADDR_VAR 0 8
10437: PUSH
10438: LD_INT 81
10440: PUSH
10441: LD_VAR 0 9
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 3
10452: PUSH
10453: LD_INT 21
10455: PUSH
10456: LD_INT 3
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: ST_TO_ADDR
// if not tmp then
10476: LD_VAR 0 8
10480: NOT
10481: IFFALSE 10485
// exit ;
10483: GO 10943
// if in_unit then
10485: LD_VAR 0 11
10489: IFFALSE 10513
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10491: LD_ADDR_VAR 0 10
10495: PUSH
10496: LD_VAR 0 8
10500: PPUSH
10501: LD_VAR 0 11
10505: PPUSH
10506: CALL_OW 74
10510: ST_TO_ADDR
10511: GO 10533
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10513: LD_ADDR_VAR 0 10
10517: PUSH
10518: LD_VAR 0 8
10522: PPUSH
10523: LD_VAR 0 1
10527: PPUSH
10528: CALL_OW 74
10532: ST_TO_ADDR
// if not enemy then
10533: LD_VAR 0 10
10537: NOT
10538: IFFALSE 10542
// exit ;
10540: GO 10943
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10542: LD_VAR 0 11
10546: PUSH
10547: LD_VAR 0 11
10551: PPUSH
10552: LD_VAR 0 10
10556: PPUSH
10557: CALL_OW 296
10561: PUSH
10562: LD_INT 13
10564: GREATER
10565: AND
10566: PUSH
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_VAR 0 10
10576: PPUSH
10577: CALL_OW 296
10581: PUSH
10582: LD_INT 12
10584: GREATER
10585: OR
10586: IFFALSE 10590
// exit ;
10588: GO 10943
// missile := [ 1 ] ;
10590: LD_ADDR_VAR 0 14
10594: PUSH
10595: LD_INT 1
10597: PUSH
10598: EMPTY
10599: LIST
10600: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10601: LD_VAR 0 9
10605: PPUSH
10606: LD_VAR 0 12
10610: PPUSH
10611: CALL_OW 325
10615: IFFALSE 10644
// missile := Replace ( missile , missile + 1 , 2 ) ;
10617: LD_ADDR_VAR 0 14
10621: PUSH
10622: LD_VAR 0 14
10626: PPUSH
10627: LD_VAR 0 14
10631: PUSH
10632: LD_INT 1
10634: PLUS
10635: PPUSH
10636: LD_INT 2
10638: PPUSH
10639: CALL_OW 1
10643: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10644: LD_VAR 0 9
10648: PPUSH
10649: LD_VAR 0 13
10653: PPUSH
10654: CALL_OW 325
10658: PUSH
10659: LD_VAR 0 10
10663: PPUSH
10664: CALL_OW 255
10668: PPUSH
10669: LD_VAR 0 13
10673: PPUSH
10674: CALL_OW 325
10678: NOT
10679: AND
10680: IFFALSE 10709
// missile := Replace ( missile , missile + 1 , 3 ) ;
10682: LD_ADDR_VAR 0 14
10686: PUSH
10687: LD_VAR 0 14
10691: PPUSH
10692: LD_VAR 0 14
10696: PUSH
10697: LD_INT 1
10699: PLUS
10700: PPUSH
10701: LD_INT 3
10703: PPUSH
10704: CALL_OW 1
10708: ST_TO_ADDR
// if missile < 2 then
10709: LD_VAR 0 14
10713: PUSH
10714: LD_INT 2
10716: LESS
10717: IFFALSE 10721
// exit ;
10719: GO 10943
// x := GetX ( enemy ) ;
10721: LD_ADDR_VAR 0 4
10725: PUSH
10726: LD_VAR 0 10
10730: PPUSH
10731: CALL_OW 250
10735: ST_TO_ADDR
// y := GetY ( enemy ) ;
10736: LD_ADDR_VAR 0 5
10740: PUSH
10741: LD_VAR 0 10
10745: PPUSH
10746: CALL_OW 251
10750: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10751: LD_ADDR_VAR 0 6
10755: PUSH
10756: LD_VAR 0 4
10760: PUSH
10761: LD_INT 1
10763: NEG
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 12
10772: PLUS
10773: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10774: LD_ADDR_VAR 0 7
10778: PUSH
10779: LD_VAR 0 5
10783: PUSH
10784: LD_INT 1
10786: NEG
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 12
10795: PLUS
10796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10797: LD_VAR 0 6
10801: PPUSH
10802: LD_VAR 0 7
10806: PPUSH
10807: CALL_OW 488
10811: NOT
10812: IFFALSE 10834
// begin _x := x ;
10814: LD_ADDR_VAR 0 6
10818: PUSH
10819: LD_VAR 0 4
10823: ST_TO_ADDR
// _y := y ;
10824: LD_ADDR_VAR 0 7
10828: PUSH
10829: LD_VAR 0 5
10833: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10834: LD_ADDR_VAR 0 3
10838: PUSH
10839: LD_INT 1
10841: PPUSH
10842: LD_VAR 0 14
10846: PPUSH
10847: CALL_OW 12
10851: ST_TO_ADDR
// case i of 1 :
10852: LD_VAR 0 3
10856: PUSH
10857: LD_INT 1
10859: DOUBLE
10860: EQUAL
10861: IFTRUE 10865
10863: GO 10882
10865: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10866: LD_VAR 0 1
10870: PPUSH
10871: LD_VAR 0 10
10875: PPUSH
10876: CALL_OW 115
10880: GO 10943
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10912
10890: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10891: LD_VAR 0 1
10895: PPUSH
10896: LD_VAR 0 6
10900: PPUSH
10901: LD_VAR 0 7
10905: PPUSH
10906: CALL_OW 153
10910: GO 10943
10912: LD_INT 3
10914: DOUBLE
10915: EQUAL
10916: IFTRUE 10920
10918: GO 10942
10920: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10921: LD_VAR 0 1
10925: PPUSH
10926: LD_VAR 0 6
10930: PPUSH
10931: LD_VAR 0 7
10935: PPUSH
10936: CALL_OW 154
10940: GO 10943
10942: POP
// end ;
10943: LD_VAR 0 2
10947: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10948: LD_INT 0
10950: PPUSH
10951: PPUSH
10952: PPUSH
10953: PPUSH
10954: PPUSH
10955: PPUSH
// if not unit or not building then
10956: LD_VAR 0 1
10960: NOT
10961: PUSH
10962: LD_VAR 0 2
10966: NOT
10967: OR
10968: IFFALSE 10972
// exit ;
10970: GO 11130
// x := GetX ( building ) ;
10972: LD_ADDR_VAR 0 5
10976: PUSH
10977: LD_VAR 0 2
10981: PPUSH
10982: CALL_OW 250
10986: ST_TO_ADDR
// y := GetY ( building ) ;
10987: LD_ADDR_VAR 0 6
10991: PUSH
10992: LD_VAR 0 2
10996: PPUSH
10997: CALL_OW 251
11001: ST_TO_ADDR
// for i = 0 to 5 do
11002: LD_ADDR_VAR 0 4
11006: PUSH
11007: DOUBLE
11008: LD_INT 0
11010: DEC
11011: ST_TO_ADDR
11012: LD_INT 5
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11128
// begin _x := ShiftX ( x , i , 3 ) ;
11018: LD_ADDR_VAR 0 7
11022: PUSH
11023: LD_VAR 0 5
11027: PPUSH
11028: LD_VAR 0 4
11032: PPUSH
11033: LD_INT 3
11035: PPUSH
11036: CALL_OW 272
11040: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11041: LD_ADDR_VAR 0 8
11045: PUSH
11046: LD_VAR 0 6
11050: PPUSH
11051: LD_VAR 0 4
11055: PPUSH
11056: LD_INT 3
11058: PPUSH
11059: CALL_OW 273
11063: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11064: LD_VAR 0 7
11068: PPUSH
11069: LD_VAR 0 8
11073: PPUSH
11074: CALL_OW 488
11078: NOT
11079: IFFALSE 11083
// continue ;
11081: GO 11015
// if HexInfo ( _x , _y ) = 0 then
11083: LD_VAR 0 7
11087: PPUSH
11088: LD_VAR 0 8
11092: PPUSH
11093: CALL_OW 428
11097: PUSH
11098: LD_INT 0
11100: EQUAL
11101: IFFALSE 11126
// begin ComMoveXY ( unit , _x , _y ) ;
11103: LD_VAR 0 1
11107: PPUSH
11108: LD_VAR 0 7
11112: PPUSH
11113: LD_VAR 0 8
11117: PPUSH
11118: CALL_OW 111
// exit ;
11122: POP
11123: POP
11124: GO 11130
// end ; end ;
11126: GO 11015
11128: POP
11129: POP
// end ;
11130: LD_VAR 0 3
11134: RET
// export function ScanBase ( side , base_area ) ; begin
11135: LD_INT 0
11137: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11138: LD_ADDR_VAR 0 3
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: LD_INT 81
11150: PUSH
11151: LD_VAR 0 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PPUSH
11160: CALL_OW 70
11164: ST_TO_ADDR
// end ;
11165: LD_VAR 0 3
11169: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11170: LD_INT 0
11172: PPUSH
11173: PPUSH
11174: PPUSH
11175: PPUSH
// result := false ;
11176: LD_ADDR_VAR 0 2
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// side := GetSide ( unit ) ;
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: LD_VAR 0 1
11193: PPUSH
11194: CALL_OW 255
11198: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 248
11213: ST_TO_ADDR
// case nat of 1 :
11214: LD_VAR 0 4
11218: PUSH
11219: LD_INT 1
11221: DOUBLE
11222: EQUAL
11223: IFTRUE 11227
11225: GO 11238
11227: POP
// tech := tech_lassight ; 2 :
11228: LD_ADDR_VAR 0 5
11232: PUSH
11233: LD_INT 12
11235: ST_TO_ADDR
11236: GO 11277
11238: LD_INT 2
11240: DOUBLE
11241: EQUAL
11242: IFTRUE 11246
11244: GO 11257
11246: POP
// tech := tech_mortar ; 3 :
11247: LD_ADDR_VAR 0 5
11251: PUSH
11252: LD_INT 41
11254: ST_TO_ADDR
11255: GO 11277
11257: LD_INT 3
11259: DOUBLE
11260: EQUAL
11261: IFTRUE 11265
11263: GO 11276
11265: POP
// tech := tech_bazooka ; end ;
11266: LD_ADDR_VAR 0 5
11270: PUSH
11271: LD_INT 44
11273: ST_TO_ADDR
11274: GO 11277
11276: POP
// if Researched ( side , tech ) then
11277: LD_VAR 0 3
11281: PPUSH
11282: LD_VAR 0 5
11286: PPUSH
11287: CALL_OW 325
11291: IFFALSE 11318
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11293: LD_ADDR_VAR 0 2
11297: PUSH
11298: LD_INT 5
11300: PUSH
11301: LD_INT 8
11303: PUSH
11304: LD_INT 9
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: PUSH
11312: LD_VAR 0 4
11316: ARRAY
11317: ST_TO_ADDR
// end ;
11318: LD_VAR 0 2
11322: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
11327: PPUSH
// if not mines then
11328: LD_VAR 0 2
11332: NOT
11333: IFFALSE 11337
// exit ;
11335: GO 11481
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11337: LD_ADDR_VAR 0 5
11341: PUSH
11342: LD_INT 81
11344: PUSH
11345: LD_VAR 0 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: LD_INT 21
11359: PUSH
11360: LD_INT 3
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: ST_TO_ADDR
// for i in mines do
11380: LD_ADDR_VAR 0 4
11384: PUSH
11385: LD_VAR 0 2
11389: PUSH
11390: FOR_IN
11391: IFFALSE 11479
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11393: LD_VAR 0 4
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PPUSH
11402: LD_VAR 0 4
11406: PUSH
11407: LD_INT 2
11409: ARRAY
11410: PPUSH
11411: CALL_OW 458
11415: NOT
11416: IFFALSE 11420
// continue ;
11418: GO 11390
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11420: LD_VAR 0 4
11424: PUSH
11425: LD_INT 1
11427: ARRAY
11428: PPUSH
11429: LD_VAR 0 4
11433: PUSH
11434: LD_INT 2
11436: ARRAY
11437: PPUSH
11438: CALL_OW 428
11442: PUSH
11443: LD_VAR 0 5
11447: IN
11448: IFFALSE 11477
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11450: LD_VAR 0 4
11454: PUSH
11455: LD_INT 1
11457: ARRAY
11458: PPUSH
11459: LD_VAR 0 4
11463: PUSH
11464: LD_INT 2
11466: ARRAY
11467: PPUSH
11468: LD_VAR 0 1
11472: PPUSH
11473: CALL_OW 456
// end ;
11477: GO 11390
11479: POP
11480: POP
// end ;
11481: LD_VAR 0 3
11485: RET
// export function Count ( array ) ; begin
11486: LD_INT 0
11488: PPUSH
// result := array + 0 ;
11489: LD_ADDR_VAR 0 2
11493: PUSH
11494: LD_VAR 0 1
11498: PUSH
11499: LD_INT 0
11501: PLUS
11502: ST_TO_ADDR
// end ;
11503: LD_VAR 0 2
11507: RET
// export function IsEmpty ( building ) ; begin
11508: LD_INT 0
11510: PPUSH
// if not building then
11511: LD_VAR 0 1
11515: NOT
11516: IFFALSE 11520
// exit ;
11518: GO 11563
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_VAR 0 1
11529: PUSH
11530: LD_INT 22
11532: PUSH
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 255
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 58
11549: PUSH
11550: EMPTY
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PPUSH
11557: CALL_OW 69
11561: IN
11562: ST_TO_ADDR
// end ;
11563: LD_VAR 0 2
11567: RET
// export function IsNotFull ( building ) ; var places ; begin
11568: LD_INT 0
11570: PPUSH
11571: PPUSH
// if not building then
11572: LD_VAR 0 1
11576: NOT
11577: IFFALSE 11581
// exit ;
11579: GO 11609
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11581: LD_ADDR_VAR 0 2
11585: PUSH
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 62
11596: PUSH
11597: EMPTY
11598: LIST
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PPUSH
11604: CALL_OW 72
11608: ST_TO_ADDR
// end ;
11609: LD_VAR 0 2
11613: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11614: LD_INT 0
11616: PPUSH
11617: PPUSH
11618: PPUSH
11619: PPUSH
// tmp := [ ] ;
11620: LD_ADDR_VAR 0 3
11624: PUSH
11625: EMPTY
11626: ST_TO_ADDR
// list := [ ] ;
11627: LD_ADDR_VAR 0 5
11631: PUSH
11632: EMPTY
11633: ST_TO_ADDR
// for i = 16 to 25 do
11634: LD_ADDR_VAR 0 4
11638: PUSH
11639: DOUBLE
11640: LD_INT 16
11642: DEC
11643: ST_TO_ADDR
11644: LD_INT 25
11646: PUSH
11647: FOR_TO
11648: IFFALSE 11721
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11650: LD_ADDR_VAR 0 3
11654: PUSH
11655: LD_VAR 0 3
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_VAR 0 1
11667: PPUSH
11668: CALL_OW 255
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 91
11679: PUSH
11680: LD_VAR 0 1
11684: PUSH
11685: LD_INT 6
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 30
11695: PUSH
11696: LD_VAR 0 4
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: EMPTY
11711: LIST
11712: PPUSH
11713: CALL_OW 69
11717: ADD
11718: ST_TO_ADDR
11719: GO 11647
11721: POP
11722: POP
// for i = 1 to tmp do
11723: LD_ADDR_VAR 0 4
11727: PUSH
11728: DOUBLE
11729: LD_INT 1
11731: DEC
11732: ST_TO_ADDR
11733: LD_VAR 0 3
11737: PUSH
11738: FOR_TO
11739: IFFALSE 11827
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11741: LD_ADDR_VAR 0 5
11745: PUSH
11746: LD_VAR 0 5
11750: PUSH
11751: LD_VAR 0 3
11755: PUSH
11756: LD_VAR 0 4
11760: ARRAY
11761: PPUSH
11762: CALL_OW 266
11766: PUSH
11767: LD_VAR 0 3
11771: PUSH
11772: LD_VAR 0 4
11776: ARRAY
11777: PPUSH
11778: CALL_OW 250
11782: PUSH
11783: LD_VAR 0 3
11787: PUSH
11788: LD_VAR 0 4
11792: ARRAY
11793: PPUSH
11794: CALL_OW 251
11798: PUSH
11799: LD_VAR 0 3
11803: PUSH
11804: LD_VAR 0 4
11808: ARRAY
11809: PPUSH
11810: CALL_OW 254
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: ADD
11824: ST_TO_ADDR
11825: GO 11738
11827: POP
11828: POP
// result := list ;
11829: LD_ADDR_VAR 0 2
11833: PUSH
11834: LD_VAR 0 5
11838: ST_TO_ADDR
// end ;
11839: LD_VAR 0 2
11843: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11844: LD_INT 0
11846: PPUSH
11847: PPUSH
11848: PPUSH
11849: PPUSH
11850: PPUSH
11851: PPUSH
11852: PPUSH
// if not factory then
11853: LD_VAR 0 1
11857: NOT
11858: IFFALSE 11862
// exit ;
11860: GO 12455
// if control = control_apeman then
11862: LD_VAR 0 4
11866: PUSH
11867: LD_INT 5
11869: EQUAL
11870: IFFALSE 11979
// begin tmp := UnitsInside ( factory ) ;
11872: LD_ADDR_VAR 0 8
11876: PUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 313
11886: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11887: LD_VAR 0 8
11891: PPUSH
11892: LD_INT 25
11894: PUSH
11895: LD_INT 12
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PPUSH
11902: CALL_OW 72
11906: NOT
11907: IFFALSE 11917
// control := control_manual ;
11909: LD_ADDR_VAR 0 4
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11917: LD_ADDR_VAR 0 8
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL 11614 0 1
11931: ST_TO_ADDR
// if tmp then
11932: LD_VAR 0 8
11936: IFFALSE 11979
// begin for i in tmp do
11938: LD_ADDR_VAR 0 7
11942: PUSH
11943: LD_VAR 0 8
11947: PUSH
11948: FOR_IN
11949: IFFALSE 11977
// if i [ 1 ] = b_ext_radio then
11951: LD_VAR 0 7
11955: PUSH
11956: LD_INT 1
11958: ARRAY
11959: PUSH
11960: LD_INT 22
11962: EQUAL
11963: IFFALSE 11975
// begin control := control_remote ;
11965: LD_ADDR_VAR 0 4
11969: PUSH
11970: LD_INT 2
11972: ST_TO_ADDR
// break ;
11973: GO 11977
// end ;
11975: GO 11948
11977: POP
11978: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11979: LD_VAR 0 1
11983: PPUSH
11984: LD_VAR 0 2
11988: PPUSH
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_VAR 0 4
11998: PPUSH
11999: LD_VAR 0 5
12003: PPUSH
12004: CALL_OW 448
12008: IFFALSE 12043
// begin result := [ chassis , engine , control , weapon ] ;
12010: LD_ADDR_VAR 0 6
12014: PUSH
12015: LD_VAR 0 2
12019: PUSH
12020: LD_VAR 0 3
12024: PUSH
12025: LD_VAR 0 4
12029: PUSH
12030: LD_VAR 0 5
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: ST_TO_ADDR
// exit ;
12041: GO 12455
// end ; _chassis := AvailableChassisList ( factory ) ;
12043: LD_ADDR_VAR 0 9
12047: PUSH
12048: LD_VAR 0 1
12052: PPUSH
12053: CALL_OW 475
12057: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12058: LD_ADDR_VAR 0 11
12062: PUSH
12063: LD_VAR 0 1
12067: PPUSH
12068: CALL_OW 476
12072: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12073: LD_ADDR_VAR 0 12
12077: PUSH
12078: LD_VAR 0 1
12082: PPUSH
12083: CALL_OW 477
12087: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12088: LD_ADDR_VAR 0 10
12092: PUSH
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 478
12102: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12103: LD_VAR 0 9
12107: NOT
12108: PUSH
12109: LD_VAR 0 11
12113: NOT
12114: OR
12115: PUSH
12116: LD_VAR 0 12
12120: NOT
12121: OR
12122: PUSH
12123: LD_VAR 0 10
12127: NOT
12128: OR
12129: IFFALSE 12164
// begin result := [ chassis , engine , control , weapon ] ;
12131: LD_ADDR_VAR 0 6
12135: PUSH
12136: LD_VAR 0 2
12140: PUSH
12141: LD_VAR 0 3
12145: PUSH
12146: LD_VAR 0 4
12150: PUSH
12151: LD_VAR 0 5
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: ST_TO_ADDR
// exit ;
12162: GO 12455
// end ; if not chassis in _chassis then
12164: LD_VAR 0 2
12168: PUSH
12169: LD_VAR 0 9
12173: IN
12174: NOT
12175: IFFALSE 12201
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12177: LD_ADDR_VAR 0 2
12181: PUSH
12182: LD_VAR 0 9
12186: PUSH
12187: LD_INT 1
12189: PPUSH
12190: LD_VAR 0 9
12194: PPUSH
12195: CALL_OW 12
12199: ARRAY
12200: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12201: LD_VAR 0 2
12205: PPUSH
12206: LD_VAR 0 3
12210: PPUSH
12211: CALL 12460 0 2
12215: NOT
12216: IFFALSE 12275
// repeat engine := _engine [ 1 ] ;
12218: LD_ADDR_VAR 0 3
12222: PUSH
12223: LD_VAR 0 11
12227: PUSH
12228: LD_INT 1
12230: ARRAY
12231: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12232: LD_ADDR_VAR 0 11
12236: PUSH
12237: LD_VAR 0 11
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 3
12249: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12250: LD_VAR 0 2
12254: PPUSH
12255: LD_VAR 0 3
12259: PPUSH
12260: CALL 12460 0 2
12264: PUSH
12265: LD_VAR 0 11
12269: PUSH
12270: EMPTY
12271: EQUAL
12272: OR
12273: IFFALSE 12218
// if not control in _control then
12275: LD_VAR 0 4
12279: PUSH
12280: LD_VAR 0 12
12284: IN
12285: NOT
12286: IFFALSE 12312
// control := _control [ rand ( 1 , _control ) ] ;
12288: LD_ADDR_VAR 0 4
12292: PUSH
12293: LD_VAR 0 12
12297: PUSH
12298: LD_INT 1
12300: PPUSH
12301: LD_VAR 0 12
12305: PPUSH
12306: CALL_OW 12
12310: ARRAY
12311: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12312: LD_VAR 0 2
12316: PPUSH
12317: LD_VAR 0 5
12321: PPUSH
12322: CALL 12680 0 2
12326: NOT
12327: IFFALSE 12386
// repeat weapon := _weapon [ 1 ] ;
12329: LD_ADDR_VAR 0 5
12333: PUSH
12334: LD_VAR 0 10
12338: PUSH
12339: LD_INT 1
12341: ARRAY
12342: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12343: LD_ADDR_VAR 0 10
12347: PUSH
12348: LD_VAR 0 10
12352: PPUSH
12353: LD_INT 1
12355: PPUSH
12356: CALL_OW 3
12360: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12361: LD_VAR 0 2
12365: PPUSH
12366: LD_VAR 0 5
12370: PPUSH
12371: CALL 12680 0 2
12375: PUSH
12376: LD_VAR 0 10
12380: PUSH
12381: EMPTY
12382: EQUAL
12383: OR
12384: IFFALSE 12329
// result := [ ] ;
12386: LD_ADDR_VAR 0 6
12390: PUSH
12391: EMPTY
12392: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12393: LD_VAR 0 1
12397: PPUSH
12398: LD_VAR 0 2
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_VAR 0 4
12412: PPUSH
12413: LD_VAR 0 5
12417: PPUSH
12418: CALL_OW 448
12422: IFFALSE 12455
// result := [ chassis , engine , control , weapon ] ;
12424: LD_ADDR_VAR 0 6
12428: PUSH
12429: LD_VAR 0 2
12433: PUSH
12434: LD_VAR 0 3
12438: PUSH
12439: LD_VAR 0 4
12443: PUSH
12444: LD_VAR 0 5
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: ST_TO_ADDR
// end ;
12455: LD_VAR 0 6
12459: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12460: LD_INT 0
12462: PPUSH
// if not chassis or not engine then
12463: LD_VAR 0 1
12467: NOT
12468: PUSH
12469: LD_VAR 0 2
12473: NOT
12474: OR
12475: IFFALSE 12479
// exit ;
12477: GO 12675
// case engine of engine_solar :
12479: LD_VAR 0 2
12483: PUSH
12484: LD_INT 2
12486: DOUBLE
12487: EQUAL
12488: IFTRUE 12492
12490: GO 12530
12492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12493: LD_ADDR_VAR 0 3
12497: PUSH
12498: LD_INT 11
12500: PUSH
12501: LD_INT 12
12503: PUSH
12504: LD_INT 13
12506: PUSH
12507: LD_INT 14
12509: PUSH
12510: LD_INT 1
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: ST_TO_ADDR
12528: GO 12659
12530: LD_INT 1
12532: DOUBLE
12533: EQUAL
12534: IFTRUE 12538
12536: GO 12600
12538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_INT 11
12546: PUSH
12547: LD_INT 12
12549: PUSH
12550: LD_INT 13
12552: PUSH
12553: LD_INT 14
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: LD_INT 4
12567: PUSH
12568: LD_INT 5
12570: PUSH
12571: LD_INT 21
12573: PUSH
12574: LD_INT 23
12576: PUSH
12577: LD_INT 22
12579: PUSH
12580: LD_INT 24
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: ST_TO_ADDR
12598: GO 12659
12600: LD_INT 3
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 12658
12608: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12609: LD_ADDR_VAR 0 3
12613: PUSH
12614: LD_INT 13
12616: PUSH
12617: LD_INT 14
12619: PUSH
12620: LD_INT 2
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: LD_INT 4
12628: PUSH
12629: LD_INT 5
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 22
12637: PUSH
12638: LD_INT 23
12640: PUSH
12641: LD_INT 24
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: ST_TO_ADDR
12656: GO 12659
12658: POP
// result := ( chassis in result ) ;
12659: LD_ADDR_VAR 0 3
12663: PUSH
12664: LD_VAR 0 1
12668: PUSH
12669: LD_VAR 0 3
12673: IN
12674: ST_TO_ADDR
// end ;
12675: LD_VAR 0 3
12679: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12680: LD_INT 0
12682: PPUSH
// if not chassis or not weapon then
12683: LD_VAR 0 1
12687: NOT
12688: PUSH
12689: LD_VAR 0 2
12693: NOT
12694: OR
12695: IFFALSE 12699
// exit ;
12697: GO 13759
// case weapon of us_machine_gun :
12699: LD_VAR 0 2
12703: PUSH
12704: LD_INT 2
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12742
12712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12713: LD_ADDR_VAR 0 3
12717: PUSH
12718: LD_INT 1
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: LD_INT 3
12726: PUSH
12727: LD_INT 4
12729: PUSH
12730: LD_INT 5
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: ST_TO_ADDR
12740: GO 13743
12742: LD_INT 3
12744: DOUBLE
12745: EQUAL
12746: IFTRUE 12750
12748: GO 12780
12750: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12751: LD_ADDR_VAR 0 3
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: LD_INT 2
12761: PUSH
12762: LD_INT 3
12764: PUSH
12765: LD_INT 4
12767: PUSH
12768: LD_INT 5
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: ST_TO_ADDR
12778: GO 13743
12780: LD_INT 11
12782: DOUBLE
12783: EQUAL
12784: IFTRUE 12788
12786: GO 12818
12788: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12789: LD_ADDR_VAR 0 3
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: LD_INT 3
12802: PUSH
12803: LD_INT 4
12805: PUSH
12806: LD_INT 5
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: ST_TO_ADDR
12816: GO 13743
12818: LD_INT 4
12820: DOUBLE
12821: EQUAL
12822: IFTRUE 12826
12824: GO 12852
12826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_INT 2
12834: PUSH
12835: LD_INT 3
12837: PUSH
12838: LD_INT 4
12840: PUSH
12841: LD_INT 5
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: ST_TO_ADDR
12850: GO 13743
12852: LD_INT 5
12854: DOUBLE
12855: EQUAL
12856: IFTRUE 12860
12858: GO 12886
12860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12861: LD_ADDR_VAR 0 3
12865: PUSH
12866: LD_INT 2
12868: PUSH
12869: LD_INT 3
12871: PUSH
12872: LD_INT 4
12874: PUSH
12875: LD_INT 5
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 13743
12886: LD_INT 9
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12920
12894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12895: LD_ADDR_VAR 0 3
12899: PUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 3
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: LD_INT 5
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: ST_TO_ADDR
12918: GO 13743
12920: LD_INT 7
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 12954
12928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12929: LD_ADDR_VAR 0 3
12933: PUSH
12934: LD_INT 2
12936: PUSH
12937: LD_INT 3
12939: PUSH
12940: LD_INT 4
12942: PUSH
12943: LD_INT 5
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: ST_TO_ADDR
12952: GO 13743
12954: LD_INT 12
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 12988
12962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12963: LD_ADDR_VAR 0 3
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: LD_INT 3
12973: PUSH
12974: LD_INT 4
12976: PUSH
12977: LD_INT 5
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: ST_TO_ADDR
12986: GO 13743
12988: LD_INT 13
12990: DOUBLE
12991: EQUAL
12992: IFTRUE 12996
12994: GO 13022
12996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12997: LD_ADDR_VAR 0 3
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: LD_INT 3
13007: PUSH
13008: LD_INT 4
13010: PUSH
13011: LD_INT 5
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: ST_TO_ADDR
13020: GO 13743
13022: LD_INT 14
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13048
13030: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13031: LD_ADDR_VAR 0 3
13035: PUSH
13036: LD_INT 4
13038: PUSH
13039: LD_INT 5
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: ST_TO_ADDR
13046: GO 13743
13048: LD_INT 6
13050: DOUBLE
13051: EQUAL
13052: IFTRUE 13056
13054: GO 13074
13056: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13057: LD_ADDR_VAR 0 3
13061: PUSH
13062: LD_INT 4
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: ST_TO_ADDR
13072: GO 13743
13074: LD_INT 10
13076: DOUBLE
13077: EQUAL
13078: IFTRUE 13082
13080: GO 13100
13082: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13083: LD_ADDR_VAR 0 3
13087: PUSH
13088: LD_INT 4
13090: PUSH
13091: LD_INT 5
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: ST_TO_ADDR
13098: GO 13743
13100: LD_INT 22
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13134
13108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13109: LD_ADDR_VAR 0 3
13113: PUSH
13114: LD_INT 11
13116: PUSH
13117: LD_INT 12
13119: PUSH
13120: LD_INT 13
13122: PUSH
13123: LD_INT 14
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: ST_TO_ADDR
13132: GO 13743
13134: LD_INT 23
13136: DOUBLE
13137: EQUAL
13138: IFTRUE 13142
13140: GO 13168
13142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13143: LD_ADDR_VAR 0 3
13147: PUSH
13148: LD_INT 11
13150: PUSH
13151: LD_INT 12
13153: PUSH
13154: LD_INT 13
13156: PUSH
13157: LD_INT 14
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: ST_TO_ADDR
13166: GO 13743
13168: LD_INT 24
13170: DOUBLE
13171: EQUAL
13172: IFTRUE 13176
13174: GO 13202
13176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13177: LD_ADDR_VAR 0 3
13181: PUSH
13182: LD_INT 11
13184: PUSH
13185: LD_INT 12
13187: PUSH
13188: LD_INT 13
13190: PUSH
13191: LD_INT 14
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: ST_TO_ADDR
13200: GO 13743
13202: LD_INT 30
13204: DOUBLE
13205: EQUAL
13206: IFTRUE 13210
13208: GO 13236
13210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13211: LD_ADDR_VAR 0 3
13215: PUSH
13216: LD_INT 11
13218: PUSH
13219: LD_INT 12
13221: PUSH
13222: LD_INT 13
13224: PUSH
13225: LD_INT 14
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: ST_TO_ADDR
13234: GO 13743
13236: LD_INT 25
13238: DOUBLE
13239: EQUAL
13240: IFTRUE 13244
13242: GO 13262
13244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13245: LD_ADDR_VAR 0 3
13249: PUSH
13250: LD_INT 13
13252: PUSH
13253: LD_INT 14
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: ST_TO_ADDR
13260: GO 13743
13262: LD_INT 27
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13288
13270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13271: LD_ADDR_VAR 0 3
13275: PUSH
13276: LD_INT 13
13278: PUSH
13279: LD_INT 14
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: ST_TO_ADDR
13286: GO 13743
13288: LD_INT 92
13290: DOUBLE
13291: EQUAL
13292: IFTRUE 13296
13294: GO 13322
13296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13297: LD_ADDR_VAR 0 3
13301: PUSH
13302: LD_INT 11
13304: PUSH
13305: LD_INT 12
13307: PUSH
13308: LD_INT 13
13310: PUSH
13311: LD_INT 14
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: ST_TO_ADDR
13320: GO 13743
13322: LD_INT 28
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13348
13330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13331: LD_ADDR_VAR 0 3
13335: PUSH
13336: LD_INT 13
13338: PUSH
13339: LD_INT 14
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: ST_TO_ADDR
13346: GO 13743
13348: LD_INT 29
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13356
13354: GO 13374
13356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13357: LD_ADDR_VAR 0 3
13361: PUSH
13362: LD_INT 13
13364: PUSH
13365: LD_INT 14
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: ST_TO_ADDR
13372: GO 13743
13374: LD_INT 31
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13400
13382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13383: LD_ADDR_VAR 0 3
13387: PUSH
13388: LD_INT 13
13390: PUSH
13391: LD_INT 14
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: ST_TO_ADDR
13398: GO 13743
13400: LD_INT 26
13402: DOUBLE
13403: EQUAL
13404: IFTRUE 13408
13406: GO 13426
13408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13409: LD_ADDR_VAR 0 3
13413: PUSH
13414: LD_INT 13
13416: PUSH
13417: LD_INT 14
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: ST_TO_ADDR
13424: GO 13743
13426: LD_INT 42
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13460
13434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13435: LD_ADDR_VAR 0 3
13439: PUSH
13440: LD_INT 21
13442: PUSH
13443: LD_INT 22
13445: PUSH
13446: LD_INT 23
13448: PUSH
13449: LD_INT 24
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: ST_TO_ADDR
13458: GO 13743
13460: LD_INT 43
13462: DOUBLE
13463: EQUAL
13464: IFTRUE 13468
13466: GO 13494
13468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13469: LD_ADDR_VAR 0 3
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 24
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: ST_TO_ADDR
13492: GO 13743
13494: LD_INT 44
13496: DOUBLE
13497: EQUAL
13498: IFTRUE 13502
13500: GO 13528
13502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_INT 21
13510: PUSH
13511: LD_INT 22
13513: PUSH
13514: LD_INT 23
13516: PUSH
13517: LD_INT 24
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: ST_TO_ADDR
13526: GO 13743
13528: LD_INT 45
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13562
13536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13537: LD_ADDR_VAR 0 3
13541: PUSH
13542: LD_INT 21
13544: PUSH
13545: LD_INT 22
13547: PUSH
13548: LD_INT 23
13550: PUSH
13551: LD_INT 24
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: ST_TO_ADDR
13560: GO 13743
13562: LD_INT 49
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13596
13570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13571: LD_ADDR_VAR 0 3
13575: PUSH
13576: LD_INT 21
13578: PUSH
13579: LD_INT 22
13581: PUSH
13582: LD_INT 23
13584: PUSH
13585: LD_INT 24
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: ST_TO_ADDR
13594: GO 13743
13596: LD_INT 51
13598: DOUBLE
13599: EQUAL
13600: IFTRUE 13604
13602: GO 13630
13604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13605: LD_ADDR_VAR 0 3
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 22
13615: PUSH
13616: LD_INT 23
13618: PUSH
13619: LD_INT 24
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: ST_TO_ADDR
13628: GO 13743
13630: LD_INT 52
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13664
13638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_INT 21
13646: PUSH
13647: LD_INT 22
13649: PUSH
13650: LD_INT 23
13652: PUSH
13653: LD_INT 24
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: ST_TO_ADDR
13662: GO 13743
13664: LD_INT 53
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13672
13670: GO 13690
13672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13673: LD_ADDR_VAR 0 3
13677: PUSH
13678: LD_INT 23
13680: PUSH
13681: LD_INT 24
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: ST_TO_ADDR
13688: GO 13743
13690: LD_INT 46
13692: DOUBLE
13693: EQUAL
13694: IFTRUE 13698
13696: GO 13716
13698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13699: LD_ADDR_VAR 0 3
13703: PUSH
13704: LD_INT 23
13706: PUSH
13707: LD_INT 24
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: ST_TO_ADDR
13714: GO 13743
13716: LD_INT 47
13718: DOUBLE
13719: EQUAL
13720: IFTRUE 13724
13722: GO 13742
13724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13725: LD_ADDR_VAR 0 3
13729: PUSH
13730: LD_INT 23
13732: PUSH
13733: LD_INT 24
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: ST_TO_ADDR
13740: GO 13743
13742: POP
// result := ( chassis in result ) ;
13743: LD_ADDR_VAR 0 3
13747: PUSH
13748: LD_VAR 0 1
13752: PUSH
13753: LD_VAR 0 3
13757: IN
13758: ST_TO_ADDR
// end ;
13759: LD_VAR 0 3
13763: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13764: LD_INT 0
13766: PPUSH
13767: PPUSH
13768: PPUSH
13769: PPUSH
13770: PPUSH
13771: PPUSH
13772: PPUSH
// result := array ;
13773: LD_ADDR_VAR 0 5
13777: PUSH
13778: LD_VAR 0 1
13782: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13783: LD_VAR 0 1
13787: NOT
13788: PUSH
13789: LD_VAR 0 2
13793: NOT
13794: OR
13795: PUSH
13796: LD_VAR 0 3
13800: NOT
13801: OR
13802: PUSH
13803: LD_VAR 0 2
13807: PUSH
13808: LD_VAR 0 1
13812: GREATER
13813: OR
13814: PUSH
13815: LD_VAR 0 3
13819: PUSH
13820: LD_VAR 0 1
13824: GREATER
13825: OR
13826: IFFALSE 13830
// exit ;
13828: GO 14126
// if direction then
13830: LD_VAR 0 4
13834: IFFALSE 13898
// begin d := 1 ;
13836: LD_ADDR_VAR 0 9
13840: PUSH
13841: LD_INT 1
13843: ST_TO_ADDR
// if i_from > i_to then
13844: LD_VAR 0 2
13848: PUSH
13849: LD_VAR 0 3
13853: GREATER
13854: IFFALSE 13880
// length := ( array - i_from ) + i_to else
13856: LD_ADDR_VAR 0 11
13860: PUSH
13861: LD_VAR 0 1
13865: PUSH
13866: LD_VAR 0 2
13870: MINUS
13871: PUSH
13872: LD_VAR 0 3
13876: PLUS
13877: ST_TO_ADDR
13878: GO 13896
// length := i_to - i_from ;
13880: LD_ADDR_VAR 0 11
13884: PUSH
13885: LD_VAR 0 3
13889: PUSH
13890: LD_VAR 0 2
13894: MINUS
13895: ST_TO_ADDR
// end else
13896: GO 13959
// begin d := - 1 ;
13898: LD_ADDR_VAR 0 9
13902: PUSH
13903: LD_INT 1
13905: NEG
13906: ST_TO_ADDR
// if i_from > i_to then
13907: LD_VAR 0 2
13911: PUSH
13912: LD_VAR 0 3
13916: GREATER
13917: IFFALSE 13937
// length := i_from - i_to else
13919: LD_ADDR_VAR 0 11
13923: PUSH
13924: LD_VAR 0 2
13928: PUSH
13929: LD_VAR 0 3
13933: MINUS
13934: ST_TO_ADDR
13935: GO 13959
// length := ( array - i_to ) + i_from ;
13937: LD_ADDR_VAR 0 11
13941: PUSH
13942: LD_VAR 0 1
13946: PUSH
13947: LD_VAR 0 3
13951: MINUS
13952: PUSH
13953: LD_VAR 0 2
13957: PLUS
13958: ST_TO_ADDR
// end ; if not length then
13959: LD_VAR 0 11
13963: NOT
13964: IFFALSE 13968
// exit ;
13966: GO 14126
// tmp := array ;
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 1
13977: ST_TO_ADDR
// for i = 1 to length do
13978: LD_ADDR_VAR 0 6
13982: PUSH
13983: DOUBLE
13984: LD_INT 1
13986: DEC
13987: ST_TO_ADDR
13988: LD_VAR 0 11
13992: PUSH
13993: FOR_TO
13994: IFFALSE 14114
// begin for j = 1 to array do
13996: LD_ADDR_VAR 0 7
14000: PUSH
14001: DOUBLE
14002: LD_INT 1
14004: DEC
14005: ST_TO_ADDR
14006: LD_VAR 0 1
14010: PUSH
14011: FOR_TO
14012: IFFALSE 14100
// begin k := j + d ;
14014: LD_ADDR_VAR 0 8
14018: PUSH
14019: LD_VAR 0 7
14023: PUSH
14024: LD_VAR 0 9
14028: PLUS
14029: ST_TO_ADDR
// if k > array then
14030: LD_VAR 0 8
14034: PUSH
14035: LD_VAR 0 1
14039: GREATER
14040: IFFALSE 14050
// k := 1 ;
14042: LD_ADDR_VAR 0 8
14046: PUSH
14047: LD_INT 1
14049: ST_TO_ADDR
// if not k then
14050: LD_VAR 0 8
14054: NOT
14055: IFFALSE 14067
// k := array ;
14057: LD_ADDR_VAR 0 8
14061: PUSH
14062: LD_VAR 0 1
14066: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14067: LD_ADDR_VAR 0 10
14071: PUSH
14072: LD_VAR 0 10
14076: PPUSH
14077: LD_VAR 0 8
14081: PPUSH
14082: LD_VAR 0 1
14086: PUSH
14087: LD_VAR 0 7
14091: ARRAY
14092: PPUSH
14093: CALL_OW 1
14097: ST_TO_ADDR
// end ;
14098: GO 14011
14100: POP
14101: POP
// array := tmp ;
14102: LD_ADDR_VAR 0 1
14106: PUSH
14107: LD_VAR 0 10
14111: ST_TO_ADDR
// end ;
14112: GO 13993
14114: POP
14115: POP
// result := array ;
14116: LD_ADDR_VAR 0 5
14120: PUSH
14121: LD_VAR 0 1
14125: ST_TO_ADDR
// end ;
14126: LD_VAR 0 5
14130: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14131: LD_INT 0
14133: PPUSH
14134: PPUSH
// result := 0 ;
14135: LD_ADDR_VAR 0 3
14139: PUSH
14140: LD_INT 0
14142: ST_TO_ADDR
// if not array or not value in array then
14143: LD_VAR 0 1
14147: NOT
14148: PUSH
14149: LD_VAR 0 2
14153: PUSH
14154: LD_VAR 0 1
14158: IN
14159: NOT
14160: OR
14161: IFFALSE 14165
// exit ;
14163: GO 14219
// for i = 1 to array do
14165: LD_ADDR_VAR 0 4
14169: PUSH
14170: DOUBLE
14171: LD_INT 1
14173: DEC
14174: ST_TO_ADDR
14175: LD_VAR 0 1
14179: PUSH
14180: FOR_TO
14181: IFFALSE 14217
// if value = array [ i ] then
14183: LD_VAR 0 2
14187: PUSH
14188: LD_VAR 0 1
14192: PUSH
14193: LD_VAR 0 4
14197: ARRAY
14198: EQUAL
14199: IFFALSE 14215
// begin result := i ;
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_VAR 0 4
14210: ST_TO_ADDR
// exit ;
14211: POP
14212: POP
14213: GO 14219
// end ;
14215: GO 14180
14217: POP
14218: POP
// end ;
14219: LD_VAR 0 3
14223: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14224: LD_INT 0
14226: PPUSH
// vc_chassis := chassis ;
14227: LD_ADDR_OWVAR 37
14231: PUSH
14232: LD_VAR 0 1
14236: ST_TO_ADDR
// vc_engine := engine ;
14237: LD_ADDR_OWVAR 39
14241: PUSH
14242: LD_VAR 0 2
14246: ST_TO_ADDR
// vc_control := control ;
14247: LD_ADDR_OWVAR 38
14251: PUSH
14252: LD_VAR 0 3
14256: ST_TO_ADDR
// vc_weapon := weapon ;
14257: LD_ADDR_OWVAR 40
14261: PUSH
14262: LD_VAR 0 4
14266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14267: LD_ADDR_OWVAR 41
14271: PUSH
14272: LD_VAR 0 5
14276: ST_TO_ADDR
// end ;
14277: LD_VAR 0 6
14281: RET
// export function WantPlant ( unit ) ; var task ; begin
14282: LD_INT 0
14284: PPUSH
14285: PPUSH
// result := false ;
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 0
14293: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14294: LD_ADDR_VAR 0 3
14298: PUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 437
14308: ST_TO_ADDR
// if task then
14309: LD_VAR 0 3
14313: IFFALSE 14341
// if task [ 1 ] [ 1 ] = p then
14315: LD_VAR 0 3
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PUSH
14324: LD_INT 1
14326: ARRAY
14327: PUSH
14328: LD_STRING p
14330: EQUAL
14331: IFFALSE 14341
// result := true ;
14333: LD_ADDR_VAR 0 2
14337: PUSH
14338: LD_INT 1
14340: ST_TO_ADDR
// end ;
14341: LD_VAR 0 2
14345: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14346: LD_INT 0
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
// if pos < 1 then
14352: LD_VAR 0 2
14356: PUSH
14357: LD_INT 1
14359: LESS
14360: IFFALSE 14364
// exit ;
14362: GO 14667
// if pos = 1 then
14364: LD_VAR 0 2
14368: PUSH
14369: LD_INT 1
14371: EQUAL
14372: IFFALSE 14405
// result := Replace ( arr , pos [ 1 ] , value ) else
14374: LD_ADDR_VAR 0 4
14378: PUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: LD_VAR 0 2
14388: PUSH
14389: LD_INT 1
14391: ARRAY
14392: PPUSH
14393: LD_VAR 0 3
14397: PPUSH
14398: CALL_OW 1
14402: ST_TO_ADDR
14403: GO 14667
// begin tmp := arr ;
14405: LD_ADDR_VAR 0 6
14409: PUSH
14410: LD_VAR 0 1
14414: ST_TO_ADDR
// s_arr := [ tmp ] ;
14415: LD_ADDR_VAR 0 7
14419: PUSH
14420: LD_VAR 0 6
14424: PUSH
14425: EMPTY
14426: LIST
14427: ST_TO_ADDR
// for i = 1 to pos - 1 do
14428: LD_ADDR_VAR 0 5
14432: PUSH
14433: DOUBLE
14434: LD_INT 1
14436: DEC
14437: ST_TO_ADDR
14438: LD_VAR 0 2
14442: PUSH
14443: LD_INT 1
14445: MINUS
14446: PUSH
14447: FOR_TO
14448: IFFALSE 14493
// begin tmp := tmp [ pos [ i ] ] ;
14450: LD_ADDR_VAR 0 6
14454: PUSH
14455: LD_VAR 0 6
14459: PUSH
14460: LD_VAR 0 2
14464: PUSH
14465: LD_VAR 0 5
14469: ARRAY
14470: ARRAY
14471: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14472: LD_ADDR_VAR 0 7
14476: PUSH
14477: LD_VAR 0 7
14481: PUSH
14482: LD_VAR 0 6
14486: PUSH
14487: EMPTY
14488: LIST
14489: ADD
14490: ST_TO_ADDR
// end ;
14491: GO 14447
14493: POP
14494: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14495: LD_ADDR_VAR 0 6
14499: PUSH
14500: LD_VAR 0 6
14504: PPUSH
14505: LD_VAR 0 2
14509: PUSH
14510: LD_VAR 0 2
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 3
14520: PPUSH
14521: CALL_OW 1
14525: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14526: LD_ADDR_VAR 0 7
14530: PUSH
14531: LD_VAR 0 7
14535: PPUSH
14536: LD_VAR 0 7
14540: PPUSH
14541: LD_VAR 0 6
14545: PPUSH
14546: CALL_OW 1
14550: ST_TO_ADDR
// for i = s_arr downto 2 do
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: DOUBLE
14557: LD_VAR 0 7
14561: INC
14562: ST_TO_ADDR
14563: LD_INT 2
14565: PUSH
14566: FOR_DOWNTO
14567: IFFALSE 14651
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14569: LD_ADDR_VAR 0 6
14573: PUSH
14574: LD_VAR 0 7
14578: PUSH
14579: LD_VAR 0 5
14583: PUSH
14584: LD_INT 1
14586: MINUS
14587: ARRAY
14588: PPUSH
14589: LD_VAR 0 2
14593: PUSH
14594: LD_VAR 0 5
14598: PUSH
14599: LD_INT 1
14601: MINUS
14602: ARRAY
14603: PPUSH
14604: LD_VAR 0 7
14608: PUSH
14609: LD_VAR 0 5
14613: ARRAY
14614: PPUSH
14615: CALL_OW 1
14619: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14620: LD_ADDR_VAR 0 7
14624: PUSH
14625: LD_VAR 0 7
14629: PPUSH
14630: LD_VAR 0 5
14634: PUSH
14635: LD_INT 1
14637: MINUS
14638: PPUSH
14639: LD_VAR 0 6
14643: PPUSH
14644: CALL_OW 1
14648: ST_TO_ADDR
// end ;
14649: GO 14566
14651: POP
14652: POP
// result := s_arr [ 1 ] ;
14653: LD_ADDR_VAR 0 4
14657: PUSH
14658: LD_VAR 0 7
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: ST_TO_ADDR
// end ; end ;
14667: LD_VAR 0 4
14671: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14672: LD_INT 0
14674: PPUSH
14675: PPUSH
// if not list then
14676: LD_VAR 0 1
14680: NOT
14681: IFFALSE 14685
// exit ;
14683: GO 14776
// i := list [ pos1 ] ;
14685: LD_ADDR_VAR 0 5
14689: PUSH
14690: LD_VAR 0 1
14694: PUSH
14695: LD_VAR 0 2
14699: ARRAY
14700: ST_TO_ADDR
// if not i then
14701: LD_VAR 0 5
14705: NOT
14706: IFFALSE 14710
// exit ;
14708: GO 14776
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14710: LD_ADDR_VAR 0 1
14714: PUSH
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_VAR 0 2
14724: PPUSH
14725: LD_VAR 0 1
14729: PUSH
14730: LD_VAR 0 3
14734: ARRAY
14735: PPUSH
14736: CALL_OW 1
14740: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14741: LD_ADDR_VAR 0 1
14745: PUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: LD_VAR 0 5
14760: PPUSH
14761: CALL_OW 1
14765: ST_TO_ADDR
// result := list ;
14766: LD_ADDR_VAR 0 4
14770: PUSH
14771: LD_VAR 0 1
14775: ST_TO_ADDR
// end ;
14776: LD_VAR 0 4
14780: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14781: LD_INT 0
14783: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14784: LD_ADDR_VAR 0 5
14788: PUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_VAR 0 2
14813: PPUSH
14814: LD_VAR 0 3
14818: PPUSH
14819: LD_VAR 0 4
14823: PPUSH
14824: CALL 15202 0 5
14828: ST_TO_ADDR
// end ;
14829: LD_VAR 0 5
14833: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14834: LD_INT 0
14836: PPUSH
14837: PPUSH
14838: PPUSH
14839: PPUSH
// if not list or not unit then
14840: LD_VAR 0 2
14844: NOT
14845: PUSH
14846: LD_VAR 0 1
14850: NOT
14851: OR
14852: IFFALSE 14856
// exit ;
14854: GO 15197
// result := [ ] ;
14856: LD_ADDR_VAR 0 5
14860: PUSH
14861: EMPTY
14862: ST_TO_ADDR
// for i in list do
14863: LD_ADDR_VAR 0 6
14867: PUSH
14868: LD_VAR 0 2
14872: PUSH
14873: FOR_IN
14874: IFFALSE 15092
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14876: LD_ADDR_VAR 0 8
14880: PUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: LD_VAR 0 6
14890: PUSH
14891: LD_INT 1
14893: ARRAY
14894: PPUSH
14895: LD_VAR 0 6
14899: PUSH
14900: LD_INT 2
14902: ARRAY
14903: PPUSH
14904: CALL_OW 297
14908: ST_TO_ADDR
// if not Count ( result ) then
14909: LD_VAR 0 5
14913: PPUSH
14914: CALL 11486 0 1
14918: NOT
14919: IFFALSE 14952
// begin result := Join ( result , [ i , tmp ] ) ;
14921: LD_ADDR_VAR 0 5
14925: PUSH
14926: LD_VAR 0 5
14930: PPUSH
14931: LD_VAR 0 6
14935: PUSH
14936: LD_VAR 0 8
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL 47095 0 2
14949: ST_TO_ADDR
// continue ;
14950: GO 14873
// end ; if result [ result ] [ 2 ] <= tmp then
14952: LD_VAR 0 5
14956: PUSH
14957: LD_VAR 0 5
14961: ARRAY
14962: PUSH
14963: LD_INT 2
14965: ARRAY
14966: PUSH
14967: LD_VAR 0 8
14971: LESSEQUAL
14972: IFFALSE 15005
// result := Join ( result , [ i , tmp ] ) else
14974: LD_ADDR_VAR 0 5
14978: PUSH
14979: LD_VAR 0 5
14983: PPUSH
14984: LD_VAR 0 6
14988: PUSH
14989: LD_VAR 0 8
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PPUSH
14998: CALL 47095 0 2
15002: ST_TO_ADDR
15003: GO 15090
// begin for j := 1 to Count ( result ) do
15005: LD_ADDR_VAR 0 7
15009: PUSH
15010: DOUBLE
15011: LD_INT 1
15013: DEC
15014: ST_TO_ADDR
15015: LD_VAR 0 5
15019: PPUSH
15020: CALL 11486 0 1
15024: PUSH
15025: FOR_TO
15026: IFFALSE 15088
// begin if tmp < result [ j ] [ 2 ] then
15028: LD_VAR 0 8
15032: PUSH
15033: LD_VAR 0 5
15037: PUSH
15038: LD_VAR 0 7
15042: ARRAY
15043: PUSH
15044: LD_INT 2
15046: ARRAY
15047: LESS
15048: IFFALSE 15086
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15050: LD_ADDR_VAR 0 5
15054: PUSH
15055: LD_VAR 0 5
15059: PPUSH
15060: LD_VAR 0 7
15064: PPUSH
15065: LD_VAR 0 6
15069: PUSH
15070: LD_VAR 0 8
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 2
15083: ST_TO_ADDR
// break ;
15084: GO 15088
// end ; end ;
15086: GO 15025
15088: POP
15089: POP
// end ; end ;
15090: GO 14873
15092: POP
15093: POP
// if result and not asc then
15094: LD_VAR 0 5
15098: PUSH
15099: LD_VAR 0 3
15103: NOT
15104: AND
15105: IFFALSE 15122
// result := ReverseArray ( result ) ;
15107: LD_ADDR_VAR 0 5
15111: PUSH
15112: LD_VAR 0 5
15116: PPUSH
15117: CALL 42362 0 1
15121: ST_TO_ADDR
// tmp := [ ] ;
15122: LD_ADDR_VAR 0 8
15126: PUSH
15127: EMPTY
15128: ST_TO_ADDR
// if mode then
15129: LD_VAR 0 4
15133: IFFALSE 15197
// begin for i := 1 to result do
15135: LD_ADDR_VAR 0 6
15139: PUSH
15140: DOUBLE
15141: LD_INT 1
15143: DEC
15144: ST_TO_ADDR
15145: LD_VAR 0 5
15149: PUSH
15150: FOR_TO
15151: IFFALSE 15185
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15153: LD_ADDR_VAR 0 8
15157: PUSH
15158: LD_VAR 0 8
15162: PPUSH
15163: LD_VAR 0 5
15167: PUSH
15168: LD_VAR 0 6
15172: ARRAY
15173: PUSH
15174: LD_INT 1
15176: ARRAY
15177: PPUSH
15178: CALL 47095 0 2
15182: ST_TO_ADDR
15183: GO 15150
15185: POP
15186: POP
// result := tmp ;
15187: LD_ADDR_VAR 0 5
15191: PUSH
15192: LD_VAR 0 8
15196: ST_TO_ADDR
// end ; end ;
15197: LD_VAR 0 5
15201: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15202: LD_INT 0
15204: PPUSH
15205: PPUSH
15206: PPUSH
15207: PPUSH
// if not list then
15208: LD_VAR 0 3
15212: NOT
15213: IFFALSE 15217
// exit ;
15215: GO 15605
// result := [ ] ;
15217: LD_ADDR_VAR 0 6
15221: PUSH
15222: EMPTY
15223: ST_TO_ADDR
// for i in list do
15224: LD_ADDR_VAR 0 7
15228: PUSH
15229: LD_VAR 0 3
15233: PUSH
15234: FOR_IN
15235: IFFALSE 15437
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15237: LD_ADDR_VAR 0 9
15241: PUSH
15242: LD_VAR 0 7
15246: PPUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: LD_VAR 0 2
15256: PPUSH
15257: CALL_OW 297
15261: ST_TO_ADDR
// if not result then
15262: LD_VAR 0 6
15266: NOT
15267: IFFALSE 15293
// result := [ [ i , tmp ] ] else
15269: LD_ADDR_VAR 0 6
15273: PUSH
15274: LD_VAR 0 7
15278: PUSH
15279: LD_VAR 0 9
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: ST_TO_ADDR
15291: GO 15435
// begin if result [ result ] [ 2 ] <= tmp then
15293: LD_VAR 0 6
15297: PUSH
15298: LD_VAR 0 6
15302: ARRAY
15303: PUSH
15304: LD_INT 2
15306: ARRAY
15307: PUSH
15308: LD_VAR 0 9
15312: LESSEQUAL
15313: IFFALSE 15355
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15315: LD_ADDR_VAR 0 6
15319: PUSH
15320: LD_VAR 0 6
15324: PPUSH
15325: LD_VAR 0 6
15329: PUSH
15330: LD_INT 1
15332: PLUS
15333: PPUSH
15334: LD_VAR 0 7
15338: PUSH
15339: LD_VAR 0 9
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 2
15352: ST_TO_ADDR
15353: GO 15435
// for j := 1 to result do
15355: LD_ADDR_VAR 0 8
15359: PUSH
15360: DOUBLE
15361: LD_INT 1
15363: DEC
15364: ST_TO_ADDR
15365: LD_VAR 0 6
15369: PUSH
15370: FOR_TO
15371: IFFALSE 15433
// begin if tmp < result [ j ] [ 2 ] then
15373: LD_VAR 0 9
15377: PUSH
15378: LD_VAR 0 6
15382: PUSH
15383: LD_VAR 0 8
15387: ARRAY
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: LESS
15393: IFFALSE 15431
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15395: LD_ADDR_VAR 0 6
15399: PUSH
15400: LD_VAR 0 6
15404: PPUSH
15405: LD_VAR 0 8
15409: PPUSH
15410: LD_VAR 0 7
15414: PUSH
15415: LD_VAR 0 9
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 2
15428: ST_TO_ADDR
// break ;
15429: GO 15433
// end ; end ;
15431: GO 15370
15433: POP
15434: POP
// end ; end ;
15435: GO 15234
15437: POP
15438: POP
// if result and not asc then
15439: LD_VAR 0 6
15443: PUSH
15444: LD_VAR 0 4
15448: NOT
15449: AND
15450: IFFALSE 15525
// begin tmp := result ;
15452: LD_ADDR_VAR 0 9
15456: PUSH
15457: LD_VAR 0 6
15461: ST_TO_ADDR
// for i = tmp downto 1 do
15462: LD_ADDR_VAR 0 7
15466: PUSH
15467: DOUBLE
15468: LD_VAR 0 9
15472: INC
15473: ST_TO_ADDR
15474: LD_INT 1
15476: PUSH
15477: FOR_DOWNTO
15478: IFFALSE 15523
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15480: LD_ADDR_VAR 0 6
15484: PUSH
15485: LD_VAR 0 6
15489: PPUSH
15490: LD_VAR 0 9
15494: PUSH
15495: LD_VAR 0 7
15499: MINUS
15500: PUSH
15501: LD_INT 1
15503: PLUS
15504: PPUSH
15505: LD_VAR 0 9
15509: PUSH
15510: LD_VAR 0 7
15514: ARRAY
15515: PPUSH
15516: CALL_OW 1
15520: ST_TO_ADDR
15521: GO 15477
15523: POP
15524: POP
// end ; tmp := [ ] ;
15525: LD_ADDR_VAR 0 9
15529: PUSH
15530: EMPTY
15531: ST_TO_ADDR
// if mode then
15532: LD_VAR 0 5
15536: IFFALSE 15605
// begin for i = 1 to result do
15538: LD_ADDR_VAR 0 7
15542: PUSH
15543: DOUBLE
15544: LD_INT 1
15546: DEC
15547: ST_TO_ADDR
15548: LD_VAR 0 6
15552: PUSH
15553: FOR_TO
15554: IFFALSE 15593
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15556: LD_ADDR_VAR 0 9
15560: PUSH
15561: LD_VAR 0 9
15565: PPUSH
15566: LD_VAR 0 7
15570: PPUSH
15571: LD_VAR 0 6
15575: PUSH
15576: LD_VAR 0 7
15580: ARRAY
15581: PUSH
15582: LD_INT 1
15584: ARRAY
15585: PPUSH
15586: CALL_OW 1
15590: ST_TO_ADDR
15591: GO 15553
15593: POP
15594: POP
// result := tmp ;
15595: LD_ADDR_VAR 0 6
15599: PUSH
15600: LD_VAR 0 9
15604: ST_TO_ADDR
// end ; end ;
15605: LD_VAR 0 6
15609: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15610: LD_INT 0
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15618: LD_ADDR_VAR 0 5
15622: PUSH
15623: LD_INT 0
15625: PUSH
15626: LD_INT 0
15628: PUSH
15629: LD_INT 0
15631: PUSH
15632: EMPTY
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: ST_TO_ADDR
// if not x or not y then
15640: LD_VAR 0 2
15644: NOT
15645: PUSH
15646: LD_VAR 0 3
15650: NOT
15651: OR
15652: IFFALSE 15656
// exit ;
15654: GO 17306
// if not range then
15656: LD_VAR 0 4
15660: NOT
15661: IFFALSE 15671
// range := 10 ;
15663: LD_ADDR_VAR 0 4
15667: PUSH
15668: LD_INT 10
15670: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15671: LD_ADDR_VAR 0 8
15675: PUSH
15676: LD_INT 81
15678: PUSH
15679: LD_VAR 0 1
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 92
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: LD_VAR 0 3
15700: PUSH
15701: LD_VAR 0 4
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 3
15714: PUSH
15715: LD_INT 21
15717: PUSH
15718: LD_INT 3
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 69
15738: ST_TO_ADDR
// if not tmp then
15739: LD_VAR 0 8
15743: NOT
15744: IFFALSE 15748
// exit ;
15746: GO 17306
// for i in tmp do
15748: LD_ADDR_VAR 0 6
15752: PUSH
15753: LD_VAR 0 8
15757: PUSH
15758: FOR_IN
15759: IFFALSE 17281
// begin points := [ 0 , 0 , 0 ] ;
15761: LD_ADDR_VAR 0 9
15765: PUSH
15766: LD_INT 0
15768: PUSH
15769: LD_INT 0
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: ST_TO_ADDR
// bpoints := 1 ;
15780: LD_ADDR_VAR 0 10
15784: PUSH
15785: LD_INT 1
15787: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15788: LD_VAR 0 6
15792: PPUSH
15793: CALL_OW 247
15797: PUSH
15798: LD_INT 1
15800: DOUBLE
15801: EQUAL
15802: IFTRUE 15806
15804: GO 16384
15806: POP
// begin if GetClass ( i ) = 1 then
15807: LD_VAR 0 6
15811: PPUSH
15812: CALL_OW 257
15816: PUSH
15817: LD_INT 1
15819: EQUAL
15820: IFFALSE 15841
// points := [ 10 , 5 , 3 ] ;
15822: LD_ADDR_VAR 0 9
15826: PUSH
15827: LD_INT 10
15829: PUSH
15830: LD_INT 5
15832: PUSH
15833: LD_INT 3
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15841: LD_VAR 0 6
15845: PPUSH
15846: CALL_OW 257
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: IN
15865: IFFALSE 15886
// points := [ 3 , 2 , 1 ] ;
15867: LD_ADDR_VAR 0 9
15871: PUSH
15872: LD_INT 3
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 1
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15886: LD_VAR 0 6
15890: PPUSH
15891: CALL_OW 257
15895: PUSH
15896: LD_INT 5
15898: EQUAL
15899: IFFALSE 15920
// points := [ 130 , 5 , 2 ] ;
15901: LD_ADDR_VAR 0 9
15905: PUSH
15906: LD_INT 130
15908: PUSH
15909: LD_INT 5
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15920: LD_VAR 0 6
15924: PPUSH
15925: CALL_OW 257
15929: PUSH
15930: LD_INT 8
15932: EQUAL
15933: IFFALSE 15954
// points := [ 35 , 35 , 30 ] ;
15935: LD_ADDR_VAR 0 9
15939: PUSH
15940: LD_INT 35
15942: PUSH
15943: LD_INT 35
15945: PUSH
15946: LD_INT 30
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15954: LD_VAR 0 6
15958: PPUSH
15959: CALL_OW 257
15963: PUSH
15964: LD_INT 9
15966: EQUAL
15967: IFFALSE 15988
// points := [ 20 , 55 , 40 ] ;
15969: LD_ADDR_VAR 0 9
15973: PUSH
15974: LD_INT 20
15976: PUSH
15977: LD_INT 55
15979: PUSH
15980: LD_INT 40
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: LIST
15987: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15988: LD_VAR 0 6
15992: PPUSH
15993: CALL_OW 257
15997: PUSH
15998: LD_INT 12
16000: PUSH
16001: LD_INT 16
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: IN
16008: IFFALSE 16029
// points := [ 5 , 3 , 2 ] ;
16010: LD_ADDR_VAR 0 9
16014: PUSH
16015: LD_INT 5
16017: PUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16029: LD_VAR 0 6
16033: PPUSH
16034: CALL_OW 257
16038: PUSH
16039: LD_INT 17
16041: EQUAL
16042: IFFALSE 16063
// points := [ 100 , 50 , 75 ] ;
16044: LD_ADDR_VAR 0 9
16048: PUSH
16049: LD_INT 100
16051: PUSH
16052: LD_INT 50
16054: PUSH
16055: LD_INT 75
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16063: LD_VAR 0 6
16067: PPUSH
16068: CALL_OW 257
16072: PUSH
16073: LD_INT 15
16075: EQUAL
16076: IFFALSE 16097
// points := [ 10 , 5 , 3 ] ;
16078: LD_ADDR_VAR 0 9
16082: PUSH
16083: LD_INT 10
16085: PUSH
16086: LD_INT 5
16088: PUSH
16089: LD_INT 3
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: LIST
16096: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16097: LD_VAR 0 6
16101: PPUSH
16102: CALL_OW 257
16106: PUSH
16107: LD_INT 14
16109: EQUAL
16110: IFFALSE 16131
// points := [ 10 , 0 , 0 ] ;
16112: LD_ADDR_VAR 0 9
16116: PUSH
16117: LD_INT 10
16119: PUSH
16120: LD_INT 0
16122: PUSH
16123: LD_INT 0
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16131: LD_VAR 0 6
16135: PPUSH
16136: CALL_OW 257
16140: PUSH
16141: LD_INT 11
16143: EQUAL
16144: IFFALSE 16165
// points := [ 30 , 10 , 5 ] ;
16146: LD_ADDR_VAR 0 9
16150: PUSH
16151: LD_INT 30
16153: PUSH
16154: LD_INT 10
16156: PUSH
16157: LD_INT 5
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16165: LD_VAR 0 1
16169: PPUSH
16170: LD_INT 5
16172: PPUSH
16173: CALL_OW 321
16177: PUSH
16178: LD_INT 2
16180: EQUAL
16181: IFFALSE 16198
// bpoints := bpoints * 1.8 ;
16183: LD_ADDR_VAR 0 10
16187: PUSH
16188: LD_VAR 0 10
16192: PUSH
16193: LD_REAL  1.80000000000000E+0000
16196: MUL
16197: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16198: LD_VAR 0 6
16202: PPUSH
16203: CALL_OW 257
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: LD_INT 3
16216: PUSH
16217: LD_INT 4
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: IN
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: LD_INT 51
16234: PPUSH
16235: CALL_OW 321
16239: PUSH
16240: LD_INT 2
16242: EQUAL
16243: AND
16244: IFFALSE 16261
// bpoints := bpoints * 1.2 ;
16246: LD_ADDR_VAR 0 10
16250: PUSH
16251: LD_VAR 0 10
16255: PUSH
16256: LD_REAL  1.20000000000000E+0000
16259: MUL
16260: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16261: LD_VAR 0 6
16265: PPUSH
16266: CALL_OW 257
16270: PUSH
16271: LD_INT 5
16273: PUSH
16274: LD_INT 7
16276: PUSH
16277: LD_INT 9
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: IN
16285: PUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: LD_INT 52
16293: PPUSH
16294: CALL_OW 321
16298: PUSH
16299: LD_INT 2
16301: EQUAL
16302: AND
16303: IFFALSE 16320
// bpoints := bpoints * 1.5 ;
16305: LD_ADDR_VAR 0 10
16309: PUSH
16310: LD_VAR 0 10
16314: PUSH
16315: LD_REAL  1.50000000000000E+0000
16318: MUL
16319: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_INT 66
16327: PPUSH
16328: CALL_OW 321
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: IFFALSE 16353
// bpoints := bpoints * 1.1 ;
16338: LD_ADDR_VAR 0 10
16342: PUSH
16343: LD_VAR 0 10
16347: PUSH
16348: LD_REAL  1.10000000000000E+0000
16351: MUL
16352: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16353: LD_ADDR_VAR 0 10
16357: PUSH
16358: LD_VAR 0 10
16362: PUSH
16363: LD_VAR 0 6
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 259
16375: PUSH
16376: LD_REAL  1.15000000000000E+0000
16379: MUL
16380: MUL
16381: ST_TO_ADDR
// end ; unit_vehicle :
16382: GO 17210
16384: LD_INT 2
16386: DOUBLE
16387: EQUAL
16388: IFTRUE 16392
16390: GO 17198
16392: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16393: LD_VAR 0 6
16397: PPUSH
16398: CALL_OW 264
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 42
16408: PUSH
16409: LD_INT 24
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: IN
16417: IFFALSE 16438
// points := [ 25 , 5 , 3 ] ;
16419: LD_ADDR_VAR 0 9
16423: PUSH
16424: LD_INT 25
16426: PUSH
16427: LD_INT 5
16429: PUSH
16430: LD_INT 3
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16438: LD_VAR 0 6
16442: PPUSH
16443: CALL_OW 264
16447: PUSH
16448: LD_INT 4
16450: PUSH
16451: LD_INT 43
16453: PUSH
16454: LD_INT 25
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: IN
16462: IFFALSE 16483
// points := [ 40 , 15 , 5 ] ;
16464: LD_ADDR_VAR 0 9
16468: PUSH
16469: LD_INT 40
16471: PUSH
16472: LD_INT 15
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16483: LD_VAR 0 6
16487: PPUSH
16488: CALL_OW 264
16492: PUSH
16493: LD_INT 3
16495: PUSH
16496: LD_INT 23
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: IN
16503: IFFALSE 16524
// points := [ 7 , 25 , 8 ] ;
16505: LD_ADDR_VAR 0 9
16509: PUSH
16510: LD_INT 7
16512: PUSH
16513: LD_INT 25
16515: PUSH
16516: LD_INT 8
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16524: LD_VAR 0 6
16528: PPUSH
16529: CALL_OW 264
16533: PUSH
16534: LD_INT 5
16536: PUSH
16537: LD_INT 27
16539: PUSH
16540: LD_INT 44
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: IN
16548: IFFALSE 16569
// points := [ 14 , 50 , 16 ] ;
16550: LD_ADDR_VAR 0 9
16554: PUSH
16555: LD_INT 14
16557: PUSH
16558: LD_INT 50
16560: PUSH
16561: LD_INT 16
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16569: LD_VAR 0 6
16573: PPUSH
16574: CALL_OW 264
16578: PUSH
16579: LD_INT 6
16581: PUSH
16582: LD_INT 46
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: IN
16589: IFFALSE 16610
// points := [ 32 , 120 , 70 ] ;
16591: LD_ADDR_VAR 0 9
16595: PUSH
16596: LD_INT 32
16598: PUSH
16599: LD_INT 120
16601: PUSH
16602: LD_INT 70
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16610: LD_VAR 0 6
16614: PPUSH
16615: CALL_OW 264
16619: PUSH
16620: LD_INT 7
16622: PUSH
16623: LD_INT 28
16625: PUSH
16626: LD_INT 45
16628: PUSH
16629: LD_INT 92
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: IN
16638: IFFALSE 16659
// points := [ 35 , 20 , 45 ] ;
16640: LD_ADDR_VAR 0 9
16644: PUSH
16645: LD_INT 35
16647: PUSH
16648: LD_INT 20
16650: PUSH
16651: LD_INT 45
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16659: LD_VAR 0 6
16663: PPUSH
16664: CALL_OW 264
16668: PUSH
16669: LD_INT 47
16671: PUSH
16672: EMPTY
16673: LIST
16674: IN
16675: IFFALSE 16696
// points := [ 67 , 45 , 75 ] ;
16677: LD_ADDR_VAR 0 9
16681: PUSH
16682: LD_INT 67
16684: PUSH
16685: LD_INT 45
16687: PUSH
16688: LD_INT 75
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16696: LD_VAR 0 6
16700: PPUSH
16701: CALL_OW 264
16705: PUSH
16706: LD_INT 26
16708: PUSH
16709: EMPTY
16710: LIST
16711: IN
16712: IFFALSE 16733
// points := [ 120 , 30 , 80 ] ;
16714: LD_ADDR_VAR 0 9
16718: PUSH
16719: LD_INT 120
16721: PUSH
16722: LD_INT 30
16724: PUSH
16725: LD_INT 80
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16733: LD_VAR 0 6
16737: PPUSH
16738: CALL_OW 264
16742: PUSH
16743: LD_INT 22
16745: PUSH
16746: EMPTY
16747: LIST
16748: IN
16749: IFFALSE 16770
// points := [ 40 , 1 , 1 ] ;
16751: LD_ADDR_VAR 0 9
16755: PUSH
16756: LD_INT 40
16758: PUSH
16759: LD_INT 1
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16770: LD_VAR 0 6
16774: PPUSH
16775: CALL_OW 264
16779: PUSH
16780: LD_INT 29
16782: PUSH
16783: EMPTY
16784: LIST
16785: IN
16786: IFFALSE 16807
// points := [ 70 , 200 , 400 ] ;
16788: LD_ADDR_VAR 0 9
16792: PUSH
16793: LD_INT 70
16795: PUSH
16796: LD_INT 200
16798: PUSH
16799: LD_INT 400
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16807: LD_VAR 0 6
16811: PPUSH
16812: CALL_OW 264
16816: PUSH
16817: LD_INT 14
16819: PUSH
16820: LD_INT 53
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: IN
16827: IFFALSE 16848
// points := [ 40 , 10 , 20 ] ;
16829: LD_ADDR_VAR 0 9
16833: PUSH
16834: LD_INT 40
16836: PUSH
16837: LD_INT 10
16839: PUSH
16840: LD_INT 20
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: LIST
16847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16848: LD_VAR 0 6
16852: PPUSH
16853: CALL_OW 264
16857: PUSH
16858: LD_INT 9
16860: PUSH
16861: EMPTY
16862: LIST
16863: IN
16864: IFFALSE 16885
// points := [ 5 , 70 , 20 ] ;
16866: LD_ADDR_VAR 0 9
16870: PUSH
16871: LD_INT 5
16873: PUSH
16874: LD_INT 70
16876: PUSH
16877: LD_INT 20
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16885: LD_VAR 0 6
16889: PPUSH
16890: CALL_OW 264
16894: PUSH
16895: LD_INT 10
16897: PUSH
16898: EMPTY
16899: LIST
16900: IN
16901: IFFALSE 16922
// points := [ 35 , 110 , 70 ] ;
16903: LD_ADDR_VAR 0 9
16907: PUSH
16908: LD_INT 35
16910: PUSH
16911: LD_INT 110
16913: PUSH
16914: LD_INT 70
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16922: LD_VAR 0 6
16926: PPUSH
16927: CALL_OW 265
16931: PUSH
16932: LD_INT 25
16934: EQUAL
16935: IFFALSE 16956
// points := [ 80 , 65 , 100 ] ;
16937: LD_ADDR_VAR 0 9
16941: PUSH
16942: LD_INT 80
16944: PUSH
16945: LD_INT 65
16947: PUSH
16948: LD_INT 100
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16956: LD_VAR 0 6
16960: PPUSH
16961: CALL_OW 263
16965: PUSH
16966: LD_INT 1
16968: EQUAL
16969: IFFALSE 17004
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16971: LD_ADDR_VAR 0 10
16975: PUSH
16976: LD_VAR 0 10
16980: PUSH
16981: LD_VAR 0 6
16985: PPUSH
16986: CALL_OW 311
16990: PPUSH
16991: LD_INT 3
16993: PPUSH
16994: CALL_OW 259
16998: PUSH
16999: LD_INT 4
17001: MUL
17002: MUL
17003: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17004: LD_VAR 0 6
17008: PPUSH
17009: CALL_OW 263
17013: PUSH
17014: LD_INT 2
17016: EQUAL
17017: IFFALSE 17068
// begin j := IsControledBy ( i ) ;
17019: LD_ADDR_VAR 0 7
17023: PUSH
17024: LD_VAR 0 6
17028: PPUSH
17029: CALL_OW 312
17033: ST_TO_ADDR
// if j then
17034: LD_VAR 0 7
17038: IFFALSE 17068
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17040: LD_ADDR_VAR 0 10
17044: PUSH
17045: LD_VAR 0 10
17049: PUSH
17050: LD_VAR 0 7
17054: PPUSH
17055: LD_INT 3
17057: PPUSH
17058: CALL_OW 259
17062: PUSH
17063: LD_INT 3
17065: MUL
17066: MUL
17067: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17068: LD_VAR 0 6
17072: PPUSH
17073: CALL_OW 264
17077: PUSH
17078: LD_INT 5
17080: PUSH
17081: LD_INT 6
17083: PUSH
17084: LD_INT 46
17086: PUSH
17087: LD_INT 44
17089: PUSH
17090: LD_INT 47
17092: PUSH
17093: LD_INT 45
17095: PUSH
17096: LD_INT 28
17098: PUSH
17099: LD_INT 7
17101: PUSH
17102: LD_INT 27
17104: PUSH
17105: LD_INT 29
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: IN
17120: PUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: LD_INT 52
17128: PPUSH
17129: CALL_OW 321
17133: PUSH
17134: LD_INT 2
17136: EQUAL
17137: AND
17138: IFFALSE 17155
// bpoints := bpoints * 1.2 ;
17140: LD_ADDR_VAR 0 10
17144: PUSH
17145: LD_VAR 0 10
17149: PUSH
17150: LD_REAL  1.20000000000000E+0000
17153: MUL
17154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17155: LD_VAR 0 6
17159: PPUSH
17160: CALL_OW 264
17164: PUSH
17165: LD_INT 6
17167: PUSH
17168: LD_INT 46
17170: PUSH
17171: LD_INT 47
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: IN
17179: IFFALSE 17196
// bpoints := bpoints * 1.2 ;
17181: LD_ADDR_VAR 0 10
17185: PUSH
17186: LD_VAR 0 10
17190: PUSH
17191: LD_REAL  1.20000000000000E+0000
17194: MUL
17195: ST_TO_ADDR
// end ; unit_building :
17196: GO 17210
17198: LD_INT 3
17200: DOUBLE
17201: EQUAL
17202: IFTRUE 17206
17204: GO 17209
17206: POP
// ; end ;
17207: GO 17210
17209: POP
// for j = 1 to 3 do
17210: LD_ADDR_VAR 0 7
17214: PUSH
17215: DOUBLE
17216: LD_INT 1
17218: DEC
17219: ST_TO_ADDR
17220: LD_INT 3
17222: PUSH
17223: FOR_TO
17224: IFFALSE 17277
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17226: LD_ADDR_VAR 0 5
17230: PUSH
17231: LD_VAR 0 5
17235: PPUSH
17236: LD_VAR 0 7
17240: PPUSH
17241: LD_VAR 0 5
17245: PUSH
17246: LD_VAR 0 7
17250: ARRAY
17251: PUSH
17252: LD_VAR 0 9
17256: PUSH
17257: LD_VAR 0 7
17261: ARRAY
17262: PUSH
17263: LD_VAR 0 10
17267: MUL
17268: PLUS
17269: PPUSH
17270: CALL_OW 1
17274: ST_TO_ADDR
17275: GO 17223
17277: POP
17278: POP
// end ;
17279: GO 15758
17281: POP
17282: POP
// result := Replace ( result , 4 , tmp ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_VAR 0 5
17292: PPUSH
17293: LD_INT 4
17295: PPUSH
17296: LD_VAR 0 8
17300: PPUSH
17301: CALL_OW 1
17305: ST_TO_ADDR
// end ;
17306: LD_VAR 0 5
17310: RET
// export function DangerAtRange ( unit , range ) ; begin
17311: LD_INT 0
17313: PPUSH
// if not unit then
17314: LD_VAR 0 1
17318: NOT
17319: IFFALSE 17323
// exit ;
17321: GO 17368
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 255
17337: PPUSH
17338: LD_VAR 0 1
17342: PPUSH
17343: CALL_OW 250
17347: PPUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 251
17357: PPUSH
17358: LD_VAR 0 2
17362: PPUSH
17363: CALL 15610 0 4
17367: ST_TO_ADDR
// end ;
17368: LD_VAR 0 3
17372: RET
// export function DangerInArea ( side , area ) ; begin
17373: LD_INT 0
17375: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 2
17385: PPUSH
17386: LD_INT 81
17388: PUSH
17389: LD_VAR 0 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PPUSH
17398: CALL_OW 70
17402: ST_TO_ADDR
// end ;
17403: LD_VAR 0 3
17407: RET
// export function IsExtension ( b ) ; begin
17408: LD_INT 0
17410: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17411: LD_ADDR_VAR 0 2
17415: PUSH
17416: LD_VAR 0 1
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 20
17426: PUSH
17427: LD_INT 22
17429: PUSH
17430: LD_INT 17
17432: PUSH
17433: LD_INT 24
17435: PUSH
17436: LD_INT 21
17438: PUSH
17439: LD_INT 19
17441: PUSH
17442: LD_INT 16
17444: PUSH
17445: LD_INT 25
17447: PUSH
17448: LD_INT 18
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: IN
17463: ST_TO_ADDR
// end ;
17464: LD_VAR 0 2
17468: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17469: LD_INT 0
17471: PPUSH
17472: PPUSH
17473: PPUSH
// result := [ ] ;
17474: LD_ADDR_VAR 0 4
17478: PUSH
17479: EMPTY
17480: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17481: LD_ADDR_VAR 0 5
17485: PUSH
17486: LD_VAR 0 2
17490: PPUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 3
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: CALL_OW 70
17505: ST_TO_ADDR
// if not tmp then
17506: LD_VAR 0 5
17510: NOT
17511: IFFALSE 17515
// exit ;
17513: GO 17579
// if checkLink then
17515: LD_VAR 0 3
17519: IFFALSE 17569
// begin for i in tmp do
17521: LD_ADDR_VAR 0 6
17525: PUSH
17526: LD_VAR 0 5
17530: PUSH
17531: FOR_IN
17532: IFFALSE 17567
// if GetBase ( i ) <> base then
17534: LD_VAR 0 6
17538: PPUSH
17539: CALL_OW 274
17543: PUSH
17544: LD_VAR 0 1
17548: NONEQUAL
17549: IFFALSE 17565
// ComLinkToBase ( base , i ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_VAR 0 6
17560: PPUSH
17561: CALL_OW 169
17565: GO 17531
17567: POP
17568: POP
// end ; result := tmp ;
17569: LD_ADDR_VAR 0 4
17573: PUSH
17574: LD_VAR 0 5
17578: ST_TO_ADDR
// end ;
17579: LD_VAR 0 4
17583: RET
// export function ComComplete ( units , b ) ; var i ; begin
17584: LD_INT 0
17586: PPUSH
17587: PPUSH
// if not units then
17588: LD_VAR 0 1
17592: NOT
17593: IFFALSE 17597
// exit ;
17595: GO 17687
// for i in units do
17597: LD_ADDR_VAR 0 4
17601: PUSH
17602: LD_VAR 0 1
17606: PUSH
17607: FOR_IN
17608: IFFALSE 17685
// if BuildingStatus ( b ) = bs_build then
17610: LD_VAR 0 2
17614: PPUSH
17615: CALL_OW 461
17619: PUSH
17620: LD_INT 1
17622: EQUAL
17623: IFFALSE 17683
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17625: LD_VAR 0 4
17629: PPUSH
17630: LD_STRING h
17632: PUSH
17633: LD_VAR 0 2
17637: PPUSH
17638: CALL_OW 250
17642: PUSH
17643: LD_VAR 0 2
17647: PPUSH
17648: CALL_OW 251
17652: PUSH
17653: LD_VAR 0 2
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: LD_INT 0
17663: PUSH
17664: LD_INT 0
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: PPUSH
17679: CALL_OW 446
17683: GO 17607
17685: POP
17686: POP
// end ;
17687: LD_VAR 0 3
17691: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17692: LD_INT 0
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17700: LD_VAR 0 1
17704: NOT
17705: PUSH
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 263
17715: PUSH
17716: LD_INT 2
17718: NONEQUAL
17719: OR
17720: IFFALSE 17724
// exit ;
17722: GO 18040
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17724: LD_ADDR_VAR 0 6
17728: PUSH
17729: LD_INT 22
17731: PUSH
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 255
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 30
17751: PUSH
17752: LD_INT 36
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 34
17761: PUSH
17762: LD_INT 31
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 69
17782: ST_TO_ADDR
// if not tmp then
17783: LD_VAR 0 6
17787: NOT
17788: IFFALSE 17792
// exit ;
17790: GO 18040
// result := [ ] ;
17792: LD_ADDR_VAR 0 2
17796: PUSH
17797: EMPTY
17798: ST_TO_ADDR
// for i in tmp do
17799: LD_ADDR_VAR 0 3
17803: PUSH
17804: LD_VAR 0 6
17808: PUSH
17809: FOR_IN
17810: IFFALSE 17881
// begin t := UnitsInside ( i ) ;
17812: LD_ADDR_VAR 0 4
17816: PUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: CALL_OW 313
17826: ST_TO_ADDR
// if t then
17827: LD_VAR 0 4
17831: IFFALSE 17879
// for j in t do
17833: LD_ADDR_VAR 0 7
17837: PUSH
17838: LD_VAR 0 4
17842: PUSH
17843: FOR_IN
17844: IFFALSE 17877
// result := Replace ( result , result + 1 , j ) ;
17846: LD_ADDR_VAR 0 2
17850: PUSH
17851: LD_VAR 0 2
17855: PPUSH
17856: LD_VAR 0 2
17860: PUSH
17861: LD_INT 1
17863: PLUS
17864: PPUSH
17865: LD_VAR 0 7
17869: PPUSH
17870: CALL_OW 1
17874: ST_TO_ADDR
17875: GO 17843
17877: POP
17878: POP
// end ;
17879: GO 17809
17881: POP
17882: POP
// if not result then
17883: LD_VAR 0 2
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 18040
// mech := result [ 1 ] ;
17892: LD_ADDR_VAR 0 5
17896: PUSH
17897: LD_VAR 0 2
17901: PUSH
17902: LD_INT 1
17904: ARRAY
17905: ST_TO_ADDR
// if result > 1 then
17906: LD_VAR 0 2
17910: PUSH
17911: LD_INT 1
17913: GREATER
17914: IFFALSE 18026
// begin for i = 2 to result do
17916: LD_ADDR_VAR 0 3
17920: PUSH
17921: DOUBLE
17922: LD_INT 2
17924: DEC
17925: ST_TO_ADDR
17926: LD_VAR 0 2
17930: PUSH
17931: FOR_TO
17932: IFFALSE 18024
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17934: LD_ADDR_VAR 0 4
17938: PUSH
17939: LD_VAR 0 2
17943: PUSH
17944: LD_VAR 0 3
17948: ARRAY
17949: PPUSH
17950: LD_INT 3
17952: PPUSH
17953: CALL_OW 259
17957: PUSH
17958: LD_VAR 0 2
17962: PUSH
17963: LD_VAR 0 3
17967: ARRAY
17968: PPUSH
17969: CALL_OW 432
17973: MINUS
17974: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17975: LD_VAR 0 4
17979: PUSH
17980: LD_VAR 0 5
17984: PPUSH
17985: LD_INT 3
17987: PPUSH
17988: CALL_OW 259
17992: PUSH
17993: LD_VAR 0 5
17997: PPUSH
17998: CALL_OW 432
18002: MINUS
18003: GREATEREQUAL
18004: IFFALSE 18022
// mech := result [ i ] ;
18006: LD_ADDR_VAR 0 5
18010: PUSH
18011: LD_VAR 0 2
18015: PUSH
18016: LD_VAR 0 3
18020: ARRAY
18021: ST_TO_ADDR
// end ;
18022: GO 17931
18024: POP
18025: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18026: LD_VAR 0 1
18030: PPUSH
18031: LD_VAR 0 5
18035: PPUSH
18036: CALL_OW 135
// end ;
18040: LD_VAR 0 2
18044: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18045: LD_INT 0
18047: PPUSH
18048: PPUSH
18049: PPUSH
18050: PPUSH
18051: PPUSH
18052: PPUSH
18053: PPUSH
18054: PPUSH
18055: PPUSH
18056: PPUSH
18057: PPUSH
18058: PPUSH
18059: PPUSH
// result := [ ] ;
18060: LD_ADDR_VAR 0 7
18064: PUSH
18065: EMPTY
18066: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18067: LD_VAR 0 1
18071: PPUSH
18072: CALL_OW 266
18076: PUSH
18077: LD_INT 0
18079: PUSH
18080: LD_INT 1
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: IN
18087: NOT
18088: IFFALSE 18092
// exit ;
18090: GO 19726
// if name then
18092: LD_VAR 0 3
18096: IFFALSE 18112
// SetBName ( base_dep , name ) ;
18098: LD_VAR 0 1
18102: PPUSH
18103: LD_VAR 0 3
18107: PPUSH
18108: CALL_OW 500
// base := GetBase ( base_dep ) ;
18112: LD_ADDR_VAR 0 15
18116: PUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: CALL_OW 274
18126: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18127: LD_ADDR_VAR 0 16
18131: PUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 255
18141: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18142: LD_ADDR_VAR 0 17
18146: PUSH
18147: LD_VAR 0 1
18151: PPUSH
18152: CALL_OW 248
18156: ST_TO_ADDR
// if sources then
18157: LD_VAR 0 5
18161: IFFALSE 18208
// for i = 1 to 3 do
18163: LD_ADDR_VAR 0 8
18167: PUSH
18168: DOUBLE
18169: LD_INT 1
18171: DEC
18172: ST_TO_ADDR
18173: LD_INT 3
18175: PUSH
18176: FOR_TO
18177: IFFALSE 18206
// AddResourceType ( base , i , sources [ i ] ) ;
18179: LD_VAR 0 15
18183: PPUSH
18184: LD_VAR 0 8
18188: PPUSH
18189: LD_VAR 0 5
18193: PUSH
18194: LD_VAR 0 8
18198: ARRAY
18199: PPUSH
18200: CALL_OW 276
18204: GO 18176
18206: POP
18207: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18208: LD_ADDR_VAR 0 18
18212: PUSH
18213: LD_VAR 0 15
18217: PPUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_INT 1
18225: PPUSH
18226: CALL 17469 0 3
18230: ST_TO_ADDR
// InitHc ;
18231: CALL_OW 19
// InitUc ;
18235: CALL_OW 18
// uc_side := side ;
18239: LD_ADDR_OWVAR 20
18243: PUSH
18244: LD_VAR 0 16
18248: ST_TO_ADDR
// uc_nation := nation ;
18249: LD_ADDR_OWVAR 21
18253: PUSH
18254: LD_VAR 0 17
18258: ST_TO_ADDR
// if buildings then
18259: LD_VAR 0 18
18263: IFFALSE 19585
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18265: LD_ADDR_VAR 0 19
18269: PUSH
18270: LD_VAR 0 18
18274: PPUSH
18275: LD_INT 2
18277: PUSH
18278: LD_INT 30
18280: PUSH
18281: LD_INT 29
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 30
18290: PUSH
18291: LD_INT 30
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 72
18307: ST_TO_ADDR
// if tmp then
18308: LD_VAR 0 19
18312: IFFALSE 18360
// for i in tmp do
18314: LD_ADDR_VAR 0 8
18318: PUSH
18319: LD_VAR 0 19
18323: PUSH
18324: FOR_IN
18325: IFFALSE 18358
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18327: LD_VAR 0 8
18331: PPUSH
18332: CALL_OW 250
18336: PPUSH
18337: LD_VAR 0 8
18341: PPUSH
18342: CALL_OW 251
18346: PPUSH
18347: LD_VAR 0 16
18351: PPUSH
18352: CALL_OW 441
18356: GO 18324
18358: POP
18359: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18360: LD_VAR 0 18
18364: PPUSH
18365: LD_INT 2
18367: PUSH
18368: LD_INT 30
18370: PUSH
18371: LD_INT 32
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 30
18380: PUSH
18381: LD_INT 33
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 72
18397: IFFALSE 18485
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18399: LD_ADDR_VAR 0 8
18403: PUSH
18404: LD_VAR 0 18
18408: PPUSH
18409: LD_INT 2
18411: PUSH
18412: LD_INT 30
18414: PUSH
18415: LD_INT 32
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 30
18424: PUSH
18425: LD_INT 33
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 72
18441: PUSH
18442: FOR_IN
18443: IFFALSE 18483
// begin if not GetBWeapon ( i ) then
18445: LD_VAR 0 8
18449: PPUSH
18450: CALL_OW 269
18454: NOT
18455: IFFALSE 18481
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18457: LD_VAR 0 8
18461: PPUSH
18462: LD_VAR 0 8
18466: PPUSH
18467: LD_VAR 0 2
18471: PPUSH
18472: CALL 19731 0 2
18476: PPUSH
18477: CALL_OW 431
// end ;
18481: GO 18442
18483: POP
18484: POP
// end ; for i = 1 to personel do
18485: LD_ADDR_VAR 0 8
18489: PUSH
18490: DOUBLE
18491: LD_INT 1
18493: DEC
18494: ST_TO_ADDR
18495: LD_VAR 0 6
18499: PUSH
18500: FOR_TO
18501: IFFALSE 19565
// begin if i > 4 then
18503: LD_VAR 0 8
18507: PUSH
18508: LD_INT 4
18510: GREATER
18511: IFFALSE 18515
// break ;
18513: GO 19565
// case i of 1 :
18515: LD_VAR 0 8
18519: PUSH
18520: LD_INT 1
18522: DOUBLE
18523: EQUAL
18524: IFTRUE 18528
18526: GO 18608
18528: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18529: LD_ADDR_VAR 0 12
18533: PUSH
18534: LD_VAR 0 18
18538: PPUSH
18539: LD_INT 22
18541: PUSH
18542: LD_VAR 0 16
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 58
18553: PUSH
18554: EMPTY
18555: LIST
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: LD_INT 30
18562: PUSH
18563: LD_INT 32
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 30
18572: PUSH
18573: LD_INT 4
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 30
18582: PUSH
18583: LD_INT 5
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: LIST
18600: PPUSH
18601: CALL_OW 72
18605: ST_TO_ADDR
18606: GO 18830
18608: LD_INT 2
18610: DOUBLE
18611: EQUAL
18612: IFTRUE 18616
18614: GO 18678
18616: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18617: LD_ADDR_VAR 0 12
18621: PUSH
18622: LD_VAR 0 18
18626: PPUSH
18627: LD_INT 22
18629: PUSH
18630: LD_VAR 0 16
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: LD_INT 30
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 30
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 72
18675: ST_TO_ADDR
18676: GO 18830
18678: LD_INT 3
18680: DOUBLE
18681: EQUAL
18682: IFTRUE 18686
18684: GO 18748
18686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18687: LD_ADDR_VAR 0 12
18691: PUSH
18692: LD_VAR 0 18
18696: PPUSH
18697: LD_INT 22
18699: PUSH
18700: LD_VAR 0 16
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: LD_INT 30
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 30
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PPUSH
18741: CALL_OW 72
18745: ST_TO_ADDR
18746: GO 18830
18748: LD_INT 4
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18829
18756: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18757: LD_ADDR_VAR 0 12
18761: PUSH
18762: LD_VAR 0 18
18766: PPUSH
18767: LD_INT 22
18769: PUSH
18770: LD_VAR 0 16
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: LD_INT 30
18784: PUSH
18785: LD_INT 6
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 30
18794: PUSH
18795: LD_INT 7
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 30
18804: PUSH
18805: LD_INT 8
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PPUSH
18822: CALL_OW 72
18826: ST_TO_ADDR
18827: GO 18830
18829: POP
// if i = 1 then
18830: LD_VAR 0 8
18834: PUSH
18835: LD_INT 1
18837: EQUAL
18838: IFFALSE 18949
// begin tmp := [ ] ;
18840: LD_ADDR_VAR 0 19
18844: PUSH
18845: EMPTY
18846: ST_TO_ADDR
// for j in f do
18847: LD_ADDR_VAR 0 9
18851: PUSH
18852: LD_VAR 0 12
18856: PUSH
18857: FOR_IN
18858: IFFALSE 18931
// if GetBType ( j ) = b_bunker then
18860: LD_VAR 0 9
18864: PPUSH
18865: CALL_OW 266
18869: PUSH
18870: LD_INT 32
18872: EQUAL
18873: IFFALSE 18900
// tmp := Insert ( tmp , 1 , j ) else
18875: LD_ADDR_VAR 0 19
18879: PUSH
18880: LD_VAR 0 19
18884: PPUSH
18885: LD_INT 1
18887: PPUSH
18888: LD_VAR 0 9
18892: PPUSH
18893: CALL_OW 2
18897: ST_TO_ADDR
18898: GO 18929
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18900: LD_ADDR_VAR 0 19
18904: PUSH
18905: LD_VAR 0 19
18909: PPUSH
18910: LD_VAR 0 19
18914: PUSH
18915: LD_INT 1
18917: PLUS
18918: PPUSH
18919: LD_VAR 0 9
18923: PPUSH
18924: CALL_OW 2
18928: ST_TO_ADDR
18929: GO 18857
18931: POP
18932: POP
// if tmp then
18933: LD_VAR 0 19
18937: IFFALSE 18949
// f := tmp ;
18939: LD_ADDR_VAR 0 12
18943: PUSH
18944: LD_VAR 0 19
18948: ST_TO_ADDR
// end ; x := personel [ i ] ;
18949: LD_ADDR_VAR 0 13
18953: PUSH
18954: LD_VAR 0 6
18958: PUSH
18959: LD_VAR 0 8
18963: ARRAY
18964: ST_TO_ADDR
// if x = - 1 then
18965: LD_VAR 0 13
18969: PUSH
18970: LD_INT 1
18972: NEG
18973: EQUAL
18974: IFFALSE 19183
// begin for j in f do
18976: LD_ADDR_VAR 0 9
18980: PUSH
18981: LD_VAR 0 12
18985: PUSH
18986: FOR_IN
18987: IFFALSE 19179
// repeat InitHc ;
18989: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18993: LD_VAR 0 9
18997: PPUSH
18998: CALL_OW 266
19002: PUSH
19003: LD_INT 5
19005: EQUAL
19006: IFFALSE 19076
// begin if UnitsInside ( j ) < 3 then
19008: LD_VAR 0 9
19012: PPUSH
19013: CALL_OW 313
19017: PUSH
19018: LD_INT 3
19020: LESS
19021: IFFALSE 19057
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19023: LD_INT 0
19025: PPUSH
19026: LD_INT 5
19028: PUSH
19029: LD_INT 8
19031: PUSH
19032: LD_INT 9
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: LD_VAR 0 17
19044: ARRAY
19045: PPUSH
19046: LD_VAR 0 4
19050: PPUSH
19051: CALL_OW 380
19055: GO 19074
// PrepareHuman ( false , i , skill ) ;
19057: LD_INT 0
19059: PPUSH
19060: LD_VAR 0 8
19064: PPUSH
19065: LD_VAR 0 4
19069: PPUSH
19070: CALL_OW 380
// end else
19074: GO 19093
// PrepareHuman ( false , i , skill ) ;
19076: LD_INT 0
19078: PPUSH
19079: LD_VAR 0 8
19083: PPUSH
19084: LD_VAR 0 4
19088: PPUSH
19089: CALL_OW 380
// un := CreateHuman ;
19093: LD_ADDR_VAR 0 14
19097: PUSH
19098: CALL_OW 44
19102: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19103: LD_ADDR_VAR 0 7
19107: PUSH
19108: LD_VAR 0 7
19112: PPUSH
19113: LD_INT 1
19115: PPUSH
19116: LD_VAR 0 14
19120: PPUSH
19121: CALL_OW 2
19125: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19126: LD_VAR 0 14
19130: PPUSH
19131: LD_VAR 0 9
19135: PPUSH
19136: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19140: LD_VAR 0 9
19144: PPUSH
19145: CALL_OW 313
19149: PUSH
19150: LD_INT 6
19152: EQUAL
19153: PUSH
19154: LD_VAR 0 9
19158: PPUSH
19159: CALL_OW 266
19163: PUSH
19164: LD_INT 32
19166: PUSH
19167: LD_INT 31
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: IN
19174: OR
19175: IFFALSE 18989
19177: GO 18986
19179: POP
19180: POP
// end else
19181: GO 19563
// for j = 1 to x do
19183: LD_ADDR_VAR 0 9
19187: PUSH
19188: DOUBLE
19189: LD_INT 1
19191: DEC
19192: ST_TO_ADDR
19193: LD_VAR 0 13
19197: PUSH
19198: FOR_TO
19199: IFFALSE 19561
// begin InitHc ;
19201: CALL_OW 19
// if not f then
19205: LD_VAR 0 12
19209: NOT
19210: IFFALSE 19299
// begin PrepareHuman ( false , i , skill ) ;
19212: LD_INT 0
19214: PPUSH
19215: LD_VAR 0 8
19219: PPUSH
19220: LD_VAR 0 4
19224: PPUSH
19225: CALL_OW 380
// un := CreateHuman ;
19229: LD_ADDR_VAR 0 14
19233: PUSH
19234: CALL_OW 44
19238: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19239: LD_ADDR_VAR 0 7
19243: PUSH
19244: LD_VAR 0 7
19248: PPUSH
19249: LD_INT 1
19251: PPUSH
19252: LD_VAR 0 14
19256: PPUSH
19257: CALL_OW 2
19261: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19262: LD_VAR 0 14
19266: PPUSH
19267: LD_VAR 0 1
19271: PPUSH
19272: CALL_OW 250
19276: PPUSH
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL_OW 251
19286: PPUSH
19287: LD_INT 10
19289: PPUSH
19290: LD_INT 0
19292: PPUSH
19293: CALL_OW 50
// continue ;
19297: GO 19198
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19299: LD_VAR 0 12
19303: PUSH
19304: LD_INT 1
19306: ARRAY
19307: PPUSH
19308: CALL_OW 313
19312: PUSH
19313: LD_VAR 0 12
19317: PUSH
19318: LD_INT 1
19320: ARRAY
19321: PPUSH
19322: CALL_OW 266
19326: PUSH
19327: LD_INT 32
19329: PUSH
19330: LD_INT 31
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: IN
19337: AND
19338: PUSH
19339: LD_VAR 0 12
19343: PUSH
19344: LD_INT 1
19346: ARRAY
19347: PPUSH
19348: CALL_OW 313
19352: PUSH
19353: LD_INT 6
19355: EQUAL
19356: OR
19357: IFFALSE 19377
// f := Delete ( f , 1 ) ;
19359: LD_ADDR_VAR 0 12
19363: PUSH
19364: LD_VAR 0 12
19368: PPUSH
19369: LD_INT 1
19371: PPUSH
19372: CALL_OW 3
19376: ST_TO_ADDR
// if not f then
19377: LD_VAR 0 12
19381: NOT
19382: IFFALSE 19400
// begin x := x + 2 ;
19384: LD_ADDR_VAR 0 13
19388: PUSH
19389: LD_VAR 0 13
19393: PUSH
19394: LD_INT 2
19396: PLUS
19397: ST_TO_ADDR
// continue ;
19398: GO 19198
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19400: LD_VAR 0 12
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PPUSH
19409: CALL_OW 266
19413: PUSH
19414: LD_INT 5
19416: EQUAL
19417: IFFALSE 19491
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19419: LD_VAR 0 12
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: CALL_OW 313
19432: PUSH
19433: LD_INT 3
19435: LESS
19436: IFFALSE 19472
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19438: LD_INT 0
19440: PPUSH
19441: LD_INT 5
19443: PUSH
19444: LD_INT 8
19446: PUSH
19447: LD_INT 9
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: LIST
19454: PUSH
19455: LD_VAR 0 17
19459: ARRAY
19460: PPUSH
19461: LD_VAR 0 4
19465: PPUSH
19466: CALL_OW 380
19470: GO 19489
// PrepareHuman ( false , i , skill ) ;
19472: LD_INT 0
19474: PPUSH
19475: LD_VAR 0 8
19479: PPUSH
19480: LD_VAR 0 4
19484: PPUSH
19485: CALL_OW 380
// end else
19489: GO 19508
// PrepareHuman ( false , i , skill ) ;
19491: LD_INT 0
19493: PPUSH
19494: LD_VAR 0 8
19498: PPUSH
19499: LD_VAR 0 4
19503: PPUSH
19504: CALL_OW 380
// un := CreateHuman ;
19508: LD_ADDR_VAR 0 14
19512: PUSH
19513: CALL_OW 44
19517: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19518: LD_ADDR_VAR 0 7
19522: PUSH
19523: LD_VAR 0 7
19527: PPUSH
19528: LD_INT 1
19530: PPUSH
19531: LD_VAR 0 14
19535: PPUSH
19536: CALL_OW 2
19540: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19541: LD_VAR 0 14
19545: PPUSH
19546: LD_VAR 0 12
19550: PUSH
19551: LD_INT 1
19553: ARRAY
19554: PPUSH
19555: CALL_OW 52
// end ;
19559: GO 19198
19561: POP
19562: POP
// end ;
19563: GO 18500
19565: POP
19566: POP
// result := result ^ buildings ;
19567: LD_ADDR_VAR 0 7
19571: PUSH
19572: LD_VAR 0 7
19576: PUSH
19577: LD_VAR 0 18
19581: ADD
19582: ST_TO_ADDR
// end else
19583: GO 19726
// begin for i = 1 to personel do
19585: LD_ADDR_VAR 0 8
19589: PUSH
19590: DOUBLE
19591: LD_INT 1
19593: DEC
19594: ST_TO_ADDR
19595: LD_VAR 0 6
19599: PUSH
19600: FOR_TO
19601: IFFALSE 19724
// begin if i > 4 then
19603: LD_VAR 0 8
19607: PUSH
19608: LD_INT 4
19610: GREATER
19611: IFFALSE 19615
// break ;
19613: GO 19724
// x := personel [ i ] ;
19615: LD_ADDR_VAR 0 13
19619: PUSH
19620: LD_VAR 0 6
19624: PUSH
19625: LD_VAR 0 8
19629: ARRAY
19630: ST_TO_ADDR
// if x = - 1 then
19631: LD_VAR 0 13
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: EQUAL
19640: IFFALSE 19644
// continue ;
19642: GO 19600
// PrepareHuman ( false , i , skill ) ;
19644: LD_INT 0
19646: PPUSH
19647: LD_VAR 0 8
19651: PPUSH
19652: LD_VAR 0 4
19656: PPUSH
19657: CALL_OW 380
// un := CreateHuman ;
19661: LD_ADDR_VAR 0 14
19665: PUSH
19666: CALL_OW 44
19670: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19671: LD_VAR 0 14
19675: PPUSH
19676: LD_VAR 0 1
19680: PPUSH
19681: CALL_OW 250
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 251
19695: PPUSH
19696: LD_INT 10
19698: PPUSH
19699: LD_INT 0
19701: PPUSH
19702: CALL_OW 50
// result := result ^ un ;
19706: LD_ADDR_VAR 0 7
19710: PUSH
19711: LD_VAR 0 7
19715: PUSH
19716: LD_VAR 0 14
19720: ADD
19721: ST_TO_ADDR
// end ;
19722: GO 19600
19724: POP
19725: POP
// end ; end ;
19726: LD_VAR 0 7
19730: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19731: LD_INT 0
19733: PPUSH
19734: PPUSH
19735: PPUSH
19736: PPUSH
19737: PPUSH
19738: PPUSH
19739: PPUSH
19740: PPUSH
19741: PPUSH
19742: PPUSH
19743: PPUSH
19744: PPUSH
19745: PPUSH
19746: PPUSH
19747: PPUSH
19748: PPUSH
// result := false ;
19749: LD_ADDR_VAR 0 3
19753: PUSH
19754: LD_INT 0
19756: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19757: LD_VAR 0 1
19761: NOT
19762: PUSH
19763: LD_VAR 0 1
19767: PPUSH
19768: CALL_OW 266
19772: PUSH
19773: LD_INT 32
19775: PUSH
19776: LD_INT 33
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: IN
19783: NOT
19784: OR
19785: IFFALSE 19789
// exit ;
19787: GO 20898
// nat := GetNation ( tower ) ;
19789: LD_ADDR_VAR 0 12
19793: PUSH
19794: LD_VAR 0 1
19798: PPUSH
19799: CALL_OW 248
19803: ST_TO_ADDR
// side := GetSide ( tower ) ;
19804: LD_ADDR_VAR 0 16
19808: PUSH
19809: LD_VAR 0 1
19813: PPUSH
19814: CALL_OW 255
19818: ST_TO_ADDR
// x := GetX ( tower ) ;
19819: LD_ADDR_VAR 0 10
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 250
19833: ST_TO_ADDR
// y := GetY ( tower ) ;
19834: LD_ADDR_VAR 0 11
19838: PUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 251
19848: ST_TO_ADDR
// if not x or not y then
19849: LD_VAR 0 10
19853: NOT
19854: PUSH
19855: LD_VAR 0 11
19859: NOT
19860: OR
19861: IFFALSE 19865
// exit ;
19863: GO 20898
// weapon := 0 ;
19865: LD_ADDR_VAR 0 18
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// fac_list := [ ] ;
19873: LD_ADDR_VAR 0 17
19877: PUSH
19878: EMPTY
19879: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19880: LD_ADDR_VAR 0 6
19884: PUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 274
19894: PPUSH
19895: LD_VAR 0 2
19899: PPUSH
19900: LD_INT 0
19902: PPUSH
19903: CALL 17469 0 3
19907: PPUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PPUSH
19918: CALL_OW 72
19922: ST_TO_ADDR
// if not factories then
19923: LD_VAR 0 6
19927: NOT
19928: IFFALSE 19932
// exit ;
19930: GO 20898
// for i in factories do
19932: LD_ADDR_VAR 0 8
19936: PUSH
19937: LD_VAR 0 6
19941: PUSH
19942: FOR_IN
19943: IFFALSE 19968
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19945: LD_ADDR_VAR 0 17
19949: PUSH
19950: LD_VAR 0 17
19954: PUSH
19955: LD_VAR 0 8
19959: PPUSH
19960: CALL_OW 478
19964: UNION
19965: ST_TO_ADDR
19966: GO 19942
19968: POP
19969: POP
// if not fac_list then
19970: LD_VAR 0 17
19974: NOT
19975: IFFALSE 19979
// exit ;
19977: GO 20898
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19979: LD_ADDR_VAR 0 5
19983: PUSH
19984: LD_INT 4
19986: PUSH
19987: LD_INT 5
19989: PUSH
19990: LD_INT 9
19992: PUSH
19993: LD_INT 10
19995: PUSH
19996: LD_INT 6
19998: PUSH
19999: LD_INT 7
20001: PUSH
20002: LD_INT 11
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 27
20016: PUSH
20017: LD_INT 28
20019: PUSH
20020: LD_INT 26
20022: PUSH
20023: LD_INT 30
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 43
20034: PUSH
20035: LD_INT 44
20037: PUSH
20038: LD_INT 46
20040: PUSH
20041: LD_INT 45
20043: PUSH
20044: LD_INT 47
20046: PUSH
20047: LD_INT 49
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PUSH
20063: LD_VAR 0 12
20067: ARRAY
20068: ST_TO_ADDR
// list := list isect fac_list ;
20069: LD_ADDR_VAR 0 5
20073: PUSH
20074: LD_VAR 0 5
20078: PUSH
20079: LD_VAR 0 17
20083: ISECT
20084: ST_TO_ADDR
// if not list then
20085: LD_VAR 0 5
20089: NOT
20090: IFFALSE 20094
// exit ;
20092: GO 20898
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20094: LD_VAR 0 12
20098: PUSH
20099: LD_INT 3
20101: EQUAL
20102: PUSH
20103: LD_INT 49
20105: PUSH
20106: LD_VAR 0 5
20110: IN
20111: AND
20112: PUSH
20113: LD_INT 31
20115: PPUSH
20116: LD_VAR 0 16
20120: PPUSH
20121: CALL_OW 321
20125: PUSH
20126: LD_INT 2
20128: EQUAL
20129: AND
20130: IFFALSE 20190
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20132: LD_INT 22
20134: PUSH
20135: LD_VAR 0 16
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 35
20146: PUSH
20147: LD_INT 49
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 91
20156: PUSH
20157: LD_VAR 0 1
20161: PUSH
20162: LD_INT 10
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: LIST
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: LIST
20174: PPUSH
20175: CALL_OW 69
20179: NOT
20180: IFFALSE 20190
// weapon := ru_time_lapser ;
20182: LD_ADDR_VAR 0 18
20186: PUSH
20187: LD_INT 49
20189: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20190: LD_VAR 0 12
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: IN
20205: PUSH
20206: LD_INT 11
20208: PUSH
20209: LD_VAR 0 5
20213: IN
20214: PUSH
20215: LD_INT 30
20217: PUSH
20218: LD_VAR 0 5
20222: IN
20223: OR
20224: AND
20225: PUSH
20226: LD_INT 6
20228: PPUSH
20229: LD_VAR 0 16
20233: PPUSH
20234: CALL_OW 321
20238: PUSH
20239: LD_INT 2
20241: EQUAL
20242: AND
20243: IFFALSE 20408
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20245: LD_INT 22
20247: PUSH
20248: LD_VAR 0 16
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: LD_INT 35
20262: PUSH
20263: LD_INT 11
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 35
20272: PUSH
20273: LD_INT 30
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 91
20287: PUSH
20288: LD_VAR 0 1
20292: PUSH
20293: LD_INT 18
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: PPUSH
20306: CALL_OW 69
20310: NOT
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_VAR 0 16
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: LD_INT 30
20329: PUSH
20330: LD_INT 32
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 30
20339: PUSH
20340: LD_INT 33
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 91
20354: PUSH
20355: LD_VAR 0 1
20359: PUSH
20360: LD_INT 12
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: PUSH
20381: LD_INT 2
20383: GREATER
20384: AND
20385: IFFALSE 20408
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20387: LD_ADDR_VAR 0 18
20391: PUSH
20392: LD_INT 11
20394: PUSH
20395: LD_INT 30
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_VAR 0 12
20406: ARRAY
20407: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20408: LD_VAR 0 18
20412: NOT
20413: PUSH
20414: LD_INT 40
20416: PPUSH
20417: LD_VAR 0 16
20421: PPUSH
20422: CALL_OW 321
20426: PUSH
20427: LD_INT 2
20429: EQUAL
20430: AND
20431: PUSH
20432: LD_INT 7
20434: PUSH
20435: LD_VAR 0 5
20439: IN
20440: PUSH
20441: LD_INT 28
20443: PUSH
20444: LD_VAR 0 5
20448: IN
20449: OR
20450: PUSH
20451: LD_INT 45
20453: PUSH
20454: LD_VAR 0 5
20458: IN
20459: OR
20460: AND
20461: IFFALSE 20715
// begin hex := GetHexInfo ( x , y ) ;
20463: LD_ADDR_VAR 0 4
20467: PUSH
20468: LD_VAR 0 10
20472: PPUSH
20473: LD_VAR 0 11
20477: PPUSH
20478: CALL_OW 546
20482: ST_TO_ADDR
// if hex [ 1 ] then
20483: LD_VAR 0 4
20487: PUSH
20488: LD_INT 1
20490: ARRAY
20491: IFFALSE 20495
// exit ;
20493: GO 20898
// height := hex [ 2 ] ;
20495: LD_ADDR_VAR 0 15
20499: PUSH
20500: LD_VAR 0 4
20504: PUSH
20505: LD_INT 2
20507: ARRAY
20508: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20509: LD_ADDR_VAR 0 14
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 3
20522: PUSH
20523: LD_INT 5
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: ST_TO_ADDR
// for i in tmp do
20532: LD_ADDR_VAR 0 8
20536: PUSH
20537: LD_VAR 0 14
20541: PUSH
20542: FOR_IN
20543: IFFALSE 20713
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20545: LD_ADDR_VAR 0 9
20549: PUSH
20550: LD_VAR 0 10
20554: PPUSH
20555: LD_VAR 0 8
20559: PPUSH
20560: LD_INT 5
20562: PPUSH
20563: CALL_OW 272
20567: PUSH
20568: LD_VAR 0 11
20572: PPUSH
20573: LD_VAR 0 8
20577: PPUSH
20578: LD_INT 5
20580: PPUSH
20581: CALL_OW 273
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20590: LD_VAR 0 9
20594: PUSH
20595: LD_INT 1
20597: ARRAY
20598: PPUSH
20599: LD_VAR 0 9
20603: PUSH
20604: LD_INT 2
20606: ARRAY
20607: PPUSH
20608: CALL_OW 488
20612: IFFALSE 20711
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20614: LD_ADDR_VAR 0 4
20618: PUSH
20619: LD_VAR 0 9
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PPUSH
20628: LD_VAR 0 9
20632: PUSH
20633: LD_INT 2
20635: ARRAY
20636: PPUSH
20637: CALL_OW 546
20641: ST_TO_ADDR
// if hex [ 1 ] then
20642: LD_VAR 0 4
20646: PUSH
20647: LD_INT 1
20649: ARRAY
20650: IFFALSE 20654
// continue ;
20652: GO 20542
// h := hex [ 2 ] ;
20654: LD_ADDR_VAR 0 13
20658: PUSH
20659: LD_VAR 0 4
20663: PUSH
20664: LD_INT 2
20666: ARRAY
20667: ST_TO_ADDR
// if h + 7 < height then
20668: LD_VAR 0 13
20672: PUSH
20673: LD_INT 7
20675: PLUS
20676: PUSH
20677: LD_VAR 0 15
20681: LESS
20682: IFFALSE 20711
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20684: LD_ADDR_VAR 0 18
20688: PUSH
20689: LD_INT 7
20691: PUSH
20692: LD_INT 28
20694: PUSH
20695: LD_INT 45
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: PUSH
20703: LD_VAR 0 12
20707: ARRAY
20708: ST_TO_ADDR
// break ;
20709: GO 20713
// end ; end ; end ;
20711: GO 20542
20713: POP
20714: POP
// end ; if not weapon then
20715: LD_VAR 0 18
20719: NOT
20720: IFFALSE 20780
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20722: LD_ADDR_VAR 0 5
20726: PUSH
20727: LD_VAR 0 5
20731: PUSH
20732: LD_INT 11
20734: PUSH
20735: LD_INT 30
20737: PUSH
20738: LD_INT 49
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: DIFF
20746: ST_TO_ADDR
// if not list then
20747: LD_VAR 0 5
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 20898
// weapon := list [ rand ( 1 , list ) ] ;
20756: LD_ADDR_VAR 0 18
20760: PUSH
20761: LD_VAR 0 5
20765: PUSH
20766: LD_INT 1
20768: PPUSH
20769: LD_VAR 0 5
20773: PPUSH
20774: CALL_OW 12
20778: ARRAY
20779: ST_TO_ADDR
// end ; if weapon then
20780: LD_VAR 0 18
20784: IFFALSE 20898
// begin tmp := CostOfWeapon ( weapon ) ;
20786: LD_ADDR_VAR 0 14
20790: PUSH
20791: LD_VAR 0 18
20795: PPUSH
20796: CALL_OW 451
20800: ST_TO_ADDR
// j := GetBase ( tower ) ;
20801: LD_ADDR_VAR 0 9
20805: PUSH
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL_OW 274
20815: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20816: LD_VAR 0 9
20820: PPUSH
20821: LD_INT 1
20823: PPUSH
20824: CALL_OW 275
20828: PUSH
20829: LD_VAR 0 14
20833: PUSH
20834: LD_INT 1
20836: ARRAY
20837: GREATEREQUAL
20838: PUSH
20839: LD_VAR 0 9
20843: PPUSH
20844: LD_INT 2
20846: PPUSH
20847: CALL_OW 275
20851: PUSH
20852: LD_VAR 0 14
20856: PUSH
20857: LD_INT 2
20859: ARRAY
20860: GREATEREQUAL
20861: AND
20862: PUSH
20863: LD_VAR 0 9
20867: PPUSH
20868: LD_INT 3
20870: PPUSH
20871: CALL_OW 275
20875: PUSH
20876: LD_VAR 0 14
20880: PUSH
20881: LD_INT 3
20883: ARRAY
20884: GREATEREQUAL
20885: AND
20886: IFFALSE 20898
// result := weapon ;
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_VAR 0 18
20897: ST_TO_ADDR
// end ; end ;
20898: LD_VAR 0 3
20902: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20903: LD_INT 0
20905: PPUSH
20906: PPUSH
// result := true ;
20907: LD_ADDR_VAR 0 3
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// if array1 = array2 then
20915: LD_VAR 0 1
20919: PUSH
20920: LD_VAR 0 2
20924: EQUAL
20925: IFFALSE 20985
// begin for i = 1 to array1 do
20927: LD_ADDR_VAR 0 4
20931: PUSH
20932: DOUBLE
20933: LD_INT 1
20935: DEC
20936: ST_TO_ADDR
20937: LD_VAR 0 1
20941: PUSH
20942: FOR_TO
20943: IFFALSE 20981
// if array1 [ i ] <> array2 [ i ] then
20945: LD_VAR 0 1
20949: PUSH
20950: LD_VAR 0 4
20954: ARRAY
20955: PUSH
20956: LD_VAR 0 2
20960: PUSH
20961: LD_VAR 0 4
20965: ARRAY
20966: NONEQUAL
20967: IFFALSE 20979
// begin result := false ;
20969: LD_ADDR_VAR 0 3
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// break ;
20977: GO 20981
// end ;
20979: GO 20942
20981: POP
20982: POP
// end else
20983: GO 20993
// result := false ;
20985: LD_ADDR_VAR 0 3
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// end ;
20993: LD_VAR 0 3
20997: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20998: LD_INT 0
21000: PPUSH
21001: PPUSH
// if not array1 or not array2 then
21002: LD_VAR 0 1
21006: NOT
21007: PUSH
21008: LD_VAR 0 2
21012: NOT
21013: OR
21014: IFFALSE 21018
// exit ;
21016: GO 21082
// result := true ;
21018: LD_ADDR_VAR 0 3
21022: PUSH
21023: LD_INT 1
21025: ST_TO_ADDR
// for i = 1 to array1 do
21026: LD_ADDR_VAR 0 4
21030: PUSH
21031: DOUBLE
21032: LD_INT 1
21034: DEC
21035: ST_TO_ADDR
21036: LD_VAR 0 1
21040: PUSH
21041: FOR_TO
21042: IFFALSE 21080
// if array1 [ i ] <> array2 [ i ] then
21044: LD_VAR 0 1
21048: PUSH
21049: LD_VAR 0 4
21053: ARRAY
21054: PUSH
21055: LD_VAR 0 2
21059: PUSH
21060: LD_VAR 0 4
21064: ARRAY
21065: NONEQUAL
21066: IFFALSE 21078
// begin result := false ;
21068: LD_ADDR_VAR 0 3
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// break ;
21076: GO 21080
// end ;
21078: GO 21041
21080: POP
21081: POP
// end ;
21082: LD_VAR 0 3
21086: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21087: LD_INT 0
21089: PPUSH
21090: PPUSH
21091: PPUSH
// pom := GetBase ( fac ) ;
21092: LD_ADDR_VAR 0 5
21096: PUSH
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 274
21106: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21107: LD_ADDR_VAR 0 4
21111: PUSH
21112: LD_VAR 0 2
21116: PUSH
21117: LD_INT 1
21119: ARRAY
21120: PPUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_INT 2
21128: ARRAY
21129: PPUSH
21130: LD_VAR 0 2
21134: PUSH
21135: LD_INT 3
21137: ARRAY
21138: PPUSH
21139: LD_VAR 0 2
21143: PUSH
21144: LD_INT 4
21146: ARRAY
21147: PPUSH
21148: CALL_OW 449
21152: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: LD_VAR 0 5
21162: PPUSH
21163: LD_INT 1
21165: PPUSH
21166: CALL_OW 275
21170: PUSH
21171: LD_VAR 0 4
21175: PUSH
21176: LD_INT 1
21178: ARRAY
21179: GREATEREQUAL
21180: PUSH
21181: LD_VAR 0 5
21185: PPUSH
21186: LD_INT 2
21188: PPUSH
21189: CALL_OW 275
21193: PUSH
21194: LD_VAR 0 4
21198: PUSH
21199: LD_INT 2
21201: ARRAY
21202: GREATEREQUAL
21203: AND
21204: PUSH
21205: LD_VAR 0 5
21209: PPUSH
21210: LD_INT 3
21212: PPUSH
21213: CALL_OW 275
21217: PUSH
21218: LD_VAR 0 4
21222: PUSH
21223: LD_INT 3
21225: ARRAY
21226: GREATEREQUAL
21227: AND
21228: ST_TO_ADDR
// end ;
21229: LD_VAR 0 3
21233: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21234: LD_INT 0
21236: PPUSH
21237: PPUSH
21238: PPUSH
21239: PPUSH
// pom := GetBase ( building ) ;
21240: LD_ADDR_VAR 0 3
21244: PUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 274
21254: ST_TO_ADDR
// if not pom then
21255: LD_VAR 0 3
21259: NOT
21260: IFFALSE 21264
// exit ;
21262: GO 21434
// btype := GetBType ( building ) ;
21264: LD_ADDR_VAR 0 5
21268: PUSH
21269: LD_VAR 0 1
21273: PPUSH
21274: CALL_OW 266
21278: ST_TO_ADDR
// if btype = b_armoury then
21279: LD_VAR 0 5
21283: PUSH
21284: LD_INT 4
21286: EQUAL
21287: IFFALSE 21297
// btype := b_barracks ;
21289: LD_ADDR_VAR 0 5
21293: PUSH
21294: LD_INT 5
21296: ST_TO_ADDR
// if btype = b_depot then
21297: LD_VAR 0 5
21301: PUSH
21302: LD_INT 0
21304: EQUAL
21305: IFFALSE 21315
// btype := b_warehouse ;
21307: LD_ADDR_VAR 0 5
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if btype = b_workshop then
21315: LD_VAR 0 5
21319: PUSH
21320: LD_INT 2
21322: EQUAL
21323: IFFALSE 21333
// btype := b_factory ;
21325: LD_ADDR_VAR 0 5
21329: PUSH
21330: LD_INT 3
21332: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21333: LD_ADDR_VAR 0 4
21337: PUSH
21338: LD_VAR 0 5
21342: PPUSH
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL_OW 248
21352: PPUSH
21353: CALL_OW 450
21357: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21358: LD_ADDR_VAR 0 2
21362: PUSH
21363: LD_VAR 0 3
21367: PPUSH
21368: LD_INT 1
21370: PPUSH
21371: CALL_OW 275
21375: PUSH
21376: LD_VAR 0 4
21380: PUSH
21381: LD_INT 1
21383: ARRAY
21384: GREATEREQUAL
21385: PUSH
21386: LD_VAR 0 3
21390: PPUSH
21391: LD_INT 2
21393: PPUSH
21394: CALL_OW 275
21398: PUSH
21399: LD_VAR 0 4
21403: PUSH
21404: LD_INT 2
21406: ARRAY
21407: GREATEREQUAL
21408: AND
21409: PUSH
21410: LD_VAR 0 3
21414: PPUSH
21415: LD_INT 3
21417: PPUSH
21418: CALL_OW 275
21422: PUSH
21423: LD_VAR 0 4
21427: PUSH
21428: LD_INT 3
21430: ARRAY
21431: GREATEREQUAL
21432: AND
21433: ST_TO_ADDR
// end ;
21434: LD_VAR 0 2
21438: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21439: LD_INT 0
21441: PPUSH
21442: PPUSH
21443: PPUSH
// pom := GetBase ( building ) ;
21444: LD_ADDR_VAR 0 4
21448: PUSH
21449: LD_VAR 0 1
21453: PPUSH
21454: CALL_OW 274
21458: ST_TO_ADDR
// if not pom then
21459: LD_VAR 0 4
21463: NOT
21464: IFFALSE 21468
// exit ;
21466: GO 21569
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21468: LD_ADDR_VAR 0 5
21472: PUSH
21473: LD_VAR 0 2
21477: PPUSH
21478: LD_VAR 0 1
21482: PPUSH
21483: CALL_OW 248
21487: PPUSH
21488: CALL_OW 450
21492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21493: LD_ADDR_VAR 0 3
21497: PUSH
21498: LD_VAR 0 4
21502: PPUSH
21503: LD_INT 1
21505: PPUSH
21506: CALL_OW 275
21510: PUSH
21511: LD_VAR 0 5
21515: PUSH
21516: LD_INT 1
21518: ARRAY
21519: GREATEREQUAL
21520: PUSH
21521: LD_VAR 0 4
21525: PPUSH
21526: LD_INT 2
21528: PPUSH
21529: CALL_OW 275
21533: PUSH
21534: LD_VAR 0 5
21538: PUSH
21539: LD_INT 2
21541: ARRAY
21542: GREATEREQUAL
21543: AND
21544: PUSH
21545: LD_VAR 0 4
21549: PPUSH
21550: LD_INT 3
21552: PPUSH
21553: CALL_OW 275
21557: PUSH
21558: LD_VAR 0 5
21562: PUSH
21563: LD_INT 3
21565: ARRAY
21566: GREATEREQUAL
21567: AND
21568: ST_TO_ADDR
// end ;
21569: LD_VAR 0 3
21573: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21574: LD_INT 0
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
// result := false ;
21587: LD_ADDR_VAR 0 8
21591: PUSH
21592: LD_INT 0
21594: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21595: LD_VAR 0 5
21599: NOT
21600: PUSH
21601: LD_VAR 0 1
21605: NOT
21606: OR
21607: PUSH
21608: LD_VAR 0 2
21612: NOT
21613: OR
21614: PUSH
21615: LD_VAR 0 3
21619: NOT
21620: OR
21621: IFFALSE 21625
// exit ;
21623: GO 22439
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21625: LD_ADDR_VAR 0 14
21629: PUSH
21630: LD_VAR 0 1
21634: PPUSH
21635: LD_VAR 0 2
21639: PPUSH
21640: LD_VAR 0 3
21644: PPUSH
21645: LD_VAR 0 4
21649: PPUSH
21650: LD_VAR 0 5
21654: PUSH
21655: LD_INT 1
21657: ARRAY
21658: PPUSH
21659: CALL_OW 248
21663: PPUSH
21664: LD_INT 0
21666: PPUSH
21667: CALL 23692 0 6
21671: ST_TO_ADDR
// if not hexes then
21672: LD_VAR 0 14
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 22439
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21681: LD_ADDR_VAR 0 17
21685: PUSH
21686: LD_VAR 0 5
21690: PPUSH
21691: LD_INT 22
21693: PUSH
21694: LD_VAR 0 13
21698: PPUSH
21699: CALL_OW 255
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 2
21710: PUSH
21711: LD_INT 30
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PPUSH
21740: CALL_OW 72
21744: ST_TO_ADDR
// for i = 1 to hexes do
21745: LD_ADDR_VAR 0 9
21749: PUSH
21750: DOUBLE
21751: LD_INT 1
21753: DEC
21754: ST_TO_ADDR
21755: LD_VAR 0 14
21759: PUSH
21760: FOR_TO
21761: IFFALSE 22437
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21763: LD_ADDR_VAR 0 13
21767: PUSH
21768: LD_VAR 0 14
21772: PUSH
21773: LD_VAR 0 9
21777: ARRAY
21778: PUSH
21779: LD_INT 1
21781: ARRAY
21782: PPUSH
21783: LD_VAR 0 14
21787: PUSH
21788: LD_VAR 0 9
21792: ARRAY
21793: PUSH
21794: LD_INT 2
21796: ARRAY
21797: PPUSH
21798: CALL_OW 428
21802: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21803: LD_VAR 0 14
21807: PUSH
21808: LD_VAR 0 9
21812: ARRAY
21813: PUSH
21814: LD_INT 1
21816: ARRAY
21817: PPUSH
21818: LD_VAR 0 14
21822: PUSH
21823: LD_VAR 0 9
21827: ARRAY
21828: PUSH
21829: LD_INT 2
21831: ARRAY
21832: PPUSH
21833: CALL_OW 351
21837: PUSH
21838: LD_VAR 0 14
21842: PUSH
21843: LD_VAR 0 9
21847: ARRAY
21848: PUSH
21849: LD_INT 1
21851: ARRAY
21852: PPUSH
21853: LD_VAR 0 14
21857: PUSH
21858: LD_VAR 0 9
21862: ARRAY
21863: PUSH
21864: LD_INT 2
21866: ARRAY
21867: PPUSH
21868: CALL_OW 488
21872: NOT
21873: OR
21874: PUSH
21875: LD_VAR 0 13
21879: PPUSH
21880: CALL_OW 247
21884: PUSH
21885: LD_INT 3
21887: EQUAL
21888: OR
21889: IFFALSE 21895
// exit ;
21891: POP
21892: POP
21893: GO 22439
// if not tmp then
21895: LD_VAR 0 13
21899: NOT
21900: IFFALSE 21904
// continue ;
21902: GO 21760
// result := true ;
21904: LD_ADDR_VAR 0 8
21908: PUSH
21909: LD_INT 1
21911: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21912: LD_VAR 0 6
21916: PUSH
21917: LD_VAR 0 13
21921: PPUSH
21922: CALL_OW 247
21926: PUSH
21927: LD_INT 2
21929: EQUAL
21930: AND
21931: PUSH
21932: LD_VAR 0 13
21936: PPUSH
21937: CALL_OW 263
21941: PUSH
21942: LD_INT 1
21944: EQUAL
21945: AND
21946: IFFALSE 22110
// begin if IsDrivenBy ( tmp ) then
21948: LD_VAR 0 13
21952: PPUSH
21953: CALL_OW 311
21957: IFFALSE 21961
// continue ;
21959: GO 21760
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21961: LD_VAR 0 6
21965: PPUSH
21966: LD_INT 3
21968: PUSH
21969: LD_INT 60
21971: PUSH
21972: EMPTY
21973: LIST
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: LD_INT 55
21984: PUSH
21985: EMPTY
21986: LIST
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PPUSH
21996: CALL_OW 72
22000: IFFALSE 22108
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22002: LD_ADDR_VAR 0 18
22006: PUSH
22007: LD_VAR 0 6
22011: PPUSH
22012: LD_INT 3
22014: PUSH
22015: LD_INT 60
22017: PUSH
22018: EMPTY
22019: LIST
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 3
22027: PUSH
22028: LD_INT 55
22030: PUSH
22031: EMPTY
22032: LIST
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PPUSH
22042: CALL_OW 72
22046: PUSH
22047: LD_INT 1
22049: ARRAY
22050: ST_TO_ADDR
// if IsInUnit ( driver ) then
22051: LD_VAR 0 18
22055: PPUSH
22056: CALL_OW 310
22060: IFFALSE 22071
// ComExit ( driver ) ;
22062: LD_VAR 0 18
22066: PPUSH
22067: CALL 47493 0 1
// AddComEnterUnit ( driver , tmp ) ;
22071: LD_VAR 0 18
22075: PPUSH
22076: LD_VAR 0 13
22080: PPUSH
22081: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22085: LD_VAR 0 18
22089: PPUSH
22090: LD_VAR 0 7
22094: PPUSH
22095: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22099: LD_VAR 0 18
22103: PPUSH
22104: CALL_OW 181
// end ; continue ;
22108: GO 21760
// end ; if not cleaners or not tmp in cleaners then
22110: LD_VAR 0 6
22114: NOT
22115: PUSH
22116: LD_VAR 0 13
22120: PUSH
22121: LD_VAR 0 6
22125: IN
22126: NOT
22127: OR
22128: IFFALSE 22435
// begin if dep then
22130: LD_VAR 0 17
22134: IFFALSE 22270
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22136: LD_ADDR_VAR 0 16
22140: PUSH
22141: LD_VAR 0 17
22145: PUSH
22146: LD_INT 1
22148: ARRAY
22149: PPUSH
22150: CALL_OW 250
22154: PPUSH
22155: LD_VAR 0 17
22159: PUSH
22160: LD_INT 1
22162: ARRAY
22163: PPUSH
22164: CALL_OW 254
22168: PPUSH
22169: LD_INT 5
22171: PPUSH
22172: CALL_OW 272
22176: PUSH
22177: LD_VAR 0 17
22181: PUSH
22182: LD_INT 1
22184: ARRAY
22185: PPUSH
22186: CALL_OW 251
22190: PPUSH
22191: LD_VAR 0 17
22195: PUSH
22196: LD_INT 1
22198: ARRAY
22199: PPUSH
22200: CALL_OW 254
22204: PPUSH
22205: LD_INT 5
22207: PPUSH
22208: CALL_OW 273
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22217: LD_VAR 0 16
22221: PUSH
22222: LD_INT 1
22224: ARRAY
22225: PPUSH
22226: LD_VAR 0 16
22230: PUSH
22231: LD_INT 2
22233: ARRAY
22234: PPUSH
22235: CALL_OW 488
22239: IFFALSE 22270
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22241: LD_VAR 0 13
22245: PPUSH
22246: LD_VAR 0 16
22250: PUSH
22251: LD_INT 1
22253: ARRAY
22254: PPUSH
22255: LD_VAR 0 16
22259: PUSH
22260: LD_INT 2
22262: ARRAY
22263: PPUSH
22264: CALL_OW 111
// continue ;
22268: GO 21760
// end ; end ; r := GetDir ( tmp ) ;
22270: LD_ADDR_VAR 0 15
22274: PUSH
22275: LD_VAR 0 13
22279: PPUSH
22280: CALL_OW 254
22284: ST_TO_ADDR
// if r = 5 then
22285: LD_VAR 0 15
22289: PUSH
22290: LD_INT 5
22292: EQUAL
22293: IFFALSE 22303
// r := 0 ;
22295: LD_ADDR_VAR 0 15
22299: PUSH
22300: LD_INT 0
22302: ST_TO_ADDR
// for j = r to 5 do
22303: LD_ADDR_VAR 0 10
22307: PUSH
22308: DOUBLE
22309: LD_VAR 0 15
22313: DEC
22314: ST_TO_ADDR
22315: LD_INT 5
22317: PUSH
22318: FOR_TO
22319: IFFALSE 22433
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22321: LD_ADDR_VAR 0 11
22325: PUSH
22326: LD_VAR 0 13
22330: PPUSH
22331: CALL_OW 250
22335: PPUSH
22336: LD_VAR 0 10
22340: PPUSH
22341: LD_INT 2
22343: PPUSH
22344: CALL_OW 272
22348: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22349: LD_ADDR_VAR 0 12
22353: PUSH
22354: LD_VAR 0 13
22358: PPUSH
22359: CALL_OW 251
22363: PPUSH
22364: LD_VAR 0 10
22368: PPUSH
22369: LD_INT 2
22371: PPUSH
22372: CALL_OW 273
22376: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22377: LD_VAR 0 11
22381: PPUSH
22382: LD_VAR 0 12
22386: PPUSH
22387: CALL_OW 488
22391: PUSH
22392: LD_VAR 0 11
22396: PPUSH
22397: LD_VAR 0 12
22401: PPUSH
22402: CALL_OW 428
22406: NOT
22407: AND
22408: IFFALSE 22431
// begin ComMoveXY ( tmp , _x , _y ) ;
22410: LD_VAR 0 13
22414: PPUSH
22415: LD_VAR 0 11
22419: PPUSH
22420: LD_VAR 0 12
22424: PPUSH
22425: CALL_OW 111
// break ;
22429: GO 22433
// end ; end ;
22431: GO 22318
22433: POP
22434: POP
// end ; end ;
22435: GO 21760
22437: POP
22438: POP
// end ;
22439: LD_VAR 0 8
22443: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22444: LD_INT 0
22446: PPUSH
// result := true ;
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: LD_INT 1
22454: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22455: LD_VAR 0 2
22459: PUSH
22460: LD_INT 24
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22474
22466: LD_INT 33
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22499
22474: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22475: LD_ADDR_VAR 0 3
22479: PUSH
22480: LD_INT 32
22482: PPUSH
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 321
22492: PUSH
22493: LD_INT 2
22495: EQUAL
22496: ST_TO_ADDR
22497: GO 22815
22499: LD_INT 20
22501: DOUBLE
22502: EQUAL
22503: IFTRUE 22507
22505: GO 22532
22507: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22508: LD_ADDR_VAR 0 3
22512: PUSH
22513: LD_INT 6
22515: PPUSH
22516: LD_VAR 0 1
22520: PPUSH
22521: CALL_OW 321
22525: PUSH
22526: LD_INT 2
22528: EQUAL
22529: ST_TO_ADDR
22530: GO 22815
22532: LD_INT 22
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22546
22538: LD_INT 36
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22571
22546: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22547: LD_ADDR_VAR 0 3
22551: PUSH
22552: LD_INT 15
22554: PPUSH
22555: LD_VAR 0 1
22559: PPUSH
22560: CALL_OW 321
22564: PUSH
22565: LD_INT 2
22567: EQUAL
22568: ST_TO_ADDR
22569: GO 22815
22571: LD_INT 30
22573: DOUBLE
22574: EQUAL
22575: IFTRUE 22579
22577: GO 22604
22579: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22580: LD_ADDR_VAR 0 3
22584: PUSH
22585: LD_INT 20
22587: PPUSH
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL_OW 321
22597: PUSH
22598: LD_INT 2
22600: EQUAL
22601: ST_TO_ADDR
22602: GO 22815
22604: LD_INT 28
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22618
22610: LD_INT 21
22612: DOUBLE
22613: EQUAL
22614: IFTRUE 22618
22616: GO 22643
22618: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22619: LD_ADDR_VAR 0 3
22623: PUSH
22624: LD_INT 21
22626: PPUSH
22627: LD_VAR 0 1
22631: PPUSH
22632: CALL_OW 321
22636: PUSH
22637: LD_INT 2
22639: EQUAL
22640: ST_TO_ADDR
22641: GO 22815
22643: LD_INT 16
22645: DOUBLE
22646: EQUAL
22647: IFTRUE 22651
22649: GO 22676
22651: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22652: LD_ADDR_VAR 0 3
22656: PUSH
22657: LD_INT 84
22659: PPUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 321
22669: PUSH
22670: LD_INT 2
22672: EQUAL
22673: ST_TO_ADDR
22674: GO 22815
22676: LD_INT 19
22678: DOUBLE
22679: EQUAL
22680: IFTRUE 22690
22682: LD_INT 23
22684: DOUBLE
22685: EQUAL
22686: IFTRUE 22690
22688: GO 22715
22690: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22691: LD_ADDR_VAR 0 3
22695: PUSH
22696: LD_INT 83
22698: PPUSH
22699: LD_VAR 0 1
22703: PPUSH
22704: CALL_OW 321
22708: PUSH
22709: LD_INT 2
22711: EQUAL
22712: ST_TO_ADDR
22713: GO 22815
22715: LD_INT 17
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22748
22723: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22724: LD_ADDR_VAR 0 3
22728: PUSH
22729: LD_INT 39
22731: PPUSH
22732: LD_VAR 0 1
22736: PPUSH
22737: CALL_OW 321
22741: PUSH
22742: LD_INT 2
22744: EQUAL
22745: ST_TO_ADDR
22746: GO 22815
22748: LD_INT 18
22750: DOUBLE
22751: EQUAL
22752: IFTRUE 22756
22754: GO 22781
22756: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22757: LD_ADDR_VAR 0 3
22761: PUSH
22762: LD_INT 40
22764: PPUSH
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL_OW 321
22774: PUSH
22775: LD_INT 2
22777: EQUAL
22778: ST_TO_ADDR
22779: GO 22815
22781: LD_INT 27
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 22814
22789: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22790: LD_ADDR_VAR 0 3
22794: PUSH
22795: LD_INT 35
22797: PPUSH
22798: LD_VAR 0 1
22802: PPUSH
22803: CALL_OW 321
22807: PUSH
22808: LD_INT 2
22810: EQUAL
22811: ST_TO_ADDR
22812: GO 22815
22814: POP
// end ;
22815: LD_VAR 0 3
22819: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22820: LD_INT 0
22822: PPUSH
22823: PPUSH
22824: PPUSH
22825: PPUSH
22826: PPUSH
22827: PPUSH
22828: PPUSH
22829: PPUSH
22830: PPUSH
22831: PPUSH
22832: PPUSH
// result := false ;
22833: LD_ADDR_VAR 0 6
22837: PUSH
22838: LD_INT 0
22840: ST_TO_ADDR
// if btype = b_depot then
22841: LD_VAR 0 2
22845: PUSH
22846: LD_INT 0
22848: EQUAL
22849: IFFALSE 22861
// begin result := true ;
22851: LD_ADDR_VAR 0 6
22855: PUSH
22856: LD_INT 1
22858: ST_TO_ADDR
// exit ;
22859: GO 23687
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22861: LD_VAR 0 1
22865: NOT
22866: PUSH
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: IN
22887: NOT
22888: OR
22889: PUSH
22890: LD_VAR 0 2
22894: NOT
22895: OR
22896: PUSH
22897: LD_VAR 0 5
22901: PUSH
22902: LD_INT 0
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: LD_INT 4
22916: PUSH
22917: LD_INT 5
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: IN
22928: NOT
22929: OR
22930: PUSH
22931: LD_VAR 0 3
22935: PPUSH
22936: LD_VAR 0 4
22940: PPUSH
22941: CALL_OW 488
22945: NOT
22946: OR
22947: IFFALSE 22951
// exit ;
22949: GO 23687
// side := GetSide ( depot ) ;
22951: LD_ADDR_VAR 0 9
22955: PUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 255
22965: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22966: LD_VAR 0 9
22970: PPUSH
22971: LD_VAR 0 2
22975: PPUSH
22976: CALL 22444 0 2
22980: NOT
22981: IFFALSE 22985
// exit ;
22983: GO 23687
// pom := GetBase ( depot ) ;
22985: LD_ADDR_VAR 0 10
22989: PUSH
22990: LD_VAR 0 1
22994: PPUSH
22995: CALL_OW 274
22999: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23000: LD_ADDR_VAR 0 11
23004: PUSH
23005: LD_VAR 0 2
23009: PPUSH
23010: LD_VAR 0 1
23014: PPUSH
23015: CALL_OW 248
23019: PPUSH
23020: CALL_OW 450
23024: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23025: LD_VAR 0 10
23029: PPUSH
23030: LD_INT 1
23032: PPUSH
23033: CALL_OW 275
23037: PUSH
23038: LD_VAR 0 11
23042: PUSH
23043: LD_INT 1
23045: ARRAY
23046: GREATEREQUAL
23047: PUSH
23048: LD_VAR 0 10
23052: PPUSH
23053: LD_INT 2
23055: PPUSH
23056: CALL_OW 275
23060: PUSH
23061: LD_VAR 0 11
23065: PUSH
23066: LD_INT 2
23068: ARRAY
23069: GREATEREQUAL
23070: AND
23071: PUSH
23072: LD_VAR 0 10
23076: PPUSH
23077: LD_INT 3
23079: PPUSH
23080: CALL_OW 275
23084: PUSH
23085: LD_VAR 0 11
23089: PUSH
23090: LD_INT 3
23092: ARRAY
23093: GREATEREQUAL
23094: AND
23095: NOT
23096: IFFALSE 23100
// exit ;
23098: GO 23687
// if GetBType ( depot ) = b_depot then
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL_OW 266
23109: PUSH
23110: LD_INT 0
23112: EQUAL
23113: IFFALSE 23125
// dist := 28 else
23115: LD_ADDR_VAR 0 14
23119: PUSH
23120: LD_INT 28
23122: ST_TO_ADDR
23123: GO 23133
// dist := 36 ;
23125: LD_ADDR_VAR 0 14
23129: PUSH
23130: LD_INT 36
23132: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_VAR 0 3
23142: PPUSH
23143: LD_VAR 0 4
23147: PPUSH
23148: CALL_OW 297
23152: PUSH
23153: LD_VAR 0 14
23157: GREATER
23158: IFFALSE 23162
// exit ;
23160: GO 23687
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23162: LD_ADDR_VAR 0 12
23166: PUSH
23167: LD_VAR 0 2
23171: PPUSH
23172: LD_VAR 0 3
23176: PPUSH
23177: LD_VAR 0 4
23181: PPUSH
23182: LD_VAR 0 5
23186: PPUSH
23187: LD_VAR 0 1
23191: PPUSH
23192: CALL_OW 248
23196: PPUSH
23197: LD_INT 0
23199: PPUSH
23200: CALL 23692 0 6
23204: ST_TO_ADDR
// if not hexes then
23205: LD_VAR 0 12
23209: NOT
23210: IFFALSE 23214
// exit ;
23212: GO 23687
// hex := GetHexInfo ( x , y ) ;
23214: LD_ADDR_VAR 0 15
23218: PUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: LD_VAR 0 4
23228: PPUSH
23229: CALL_OW 546
23233: ST_TO_ADDR
// if hex [ 1 ] then
23234: LD_VAR 0 15
23238: PUSH
23239: LD_INT 1
23241: ARRAY
23242: IFFALSE 23246
// exit ;
23244: GO 23687
// height := hex [ 2 ] ;
23246: LD_ADDR_VAR 0 13
23250: PUSH
23251: LD_VAR 0 15
23255: PUSH
23256: LD_INT 2
23258: ARRAY
23259: ST_TO_ADDR
// for i = 1 to hexes do
23260: LD_ADDR_VAR 0 7
23264: PUSH
23265: DOUBLE
23266: LD_INT 1
23268: DEC
23269: ST_TO_ADDR
23270: LD_VAR 0 12
23274: PUSH
23275: FOR_TO
23276: IFFALSE 23606
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23278: LD_VAR 0 12
23282: PUSH
23283: LD_VAR 0 7
23287: ARRAY
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 12
23297: PUSH
23298: LD_VAR 0 7
23302: ARRAY
23303: PUSH
23304: LD_INT 2
23306: ARRAY
23307: PPUSH
23308: CALL_OW 488
23312: NOT
23313: PUSH
23314: LD_VAR 0 12
23318: PUSH
23319: LD_VAR 0 7
23323: ARRAY
23324: PUSH
23325: LD_INT 1
23327: ARRAY
23328: PPUSH
23329: LD_VAR 0 12
23333: PUSH
23334: LD_VAR 0 7
23338: ARRAY
23339: PUSH
23340: LD_INT 2
23342: ARRAY
23343: PPUSH
23344: CALL_OW 428
23348: PUSH
23349: LD_INT 0
23351: GREATER
23352: OR
23353: PUSH
23354: LD_VAR 0 12
23358: PUSH
23359: LD_VAR 0 7
23363: ARRAY
23364: PUSH
23365: LD_INT 1
23367: ARRAY
23368: PPUSH
23369: LD_VAR 0 12
23373: PUSH
23374: LD_VAR 0 7
23378: ARRAY
23379: PUSH
23380: LD_INT 2
23382: ARRAY
23383: PPUSH
23384: CALL_OW 351
23388: OR
23389: IFFALSE 23395
// exit ;
23391: POP
23392: POP
23393: GO 23687
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23395: LD_ADDR_VAR 0 8
23399: PUSH
23400: LD_VAR 0 12
23404: PUSH
23405: LD_VAR 0 7
23409: ARRAY
23410: PUSH
23411: LD_INT 1
23413: ARRAY
23414: PPUSH
23415: LD_VAR 0 12
23419: PUSH
23420: LD_VAR 0 7
23424: ARRAY
23425: PUSH
23426: LD_INT 2
23428: ARRAY
23429: PPUSH
23430: CALL_OW 546
23434: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23435: LD_VAR 0 8
23439: PUSH
23440: LD_INT 1
23442: ARRAY
23443: PUSH
23444: LD_VAR 0 8
23448: PUSH
23449: LD_INT 2
23451: ARRAY
23452: PUSH
23453: LD_VAR 0 13
23457: PUSH
23458: LD_INT 2
23460: PLUS
23461: GREATER
23462: OR
23463: PUSH
23464: LD_VAR 0 8
23468: PUSH
23469: LD_INT 2
23471: ARRAY
23472: PUSH
23473: LD_VAR 0 13
23477: PUSH
23478: LD_INT 2
23480: MINUS
23481: LESS
23482: OR
23483: PUSH
23484: LD_VAR 0 8
23488: PUSH
23489: LD_INT 3
23491: ARRAY
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: LD_INT 8
23498: PUSH
23499: LD_INT 9
23501: PUSH
23502: LD_INT 10
23504: PUSH
23505: LD_INT 11
23507: PUSH
23508: LD_INT 12
23510: PUSH
23511: LD_INT 13
23513: PUSH
23514: LD_INT 16
23516: PUSH
23517: LD_INT 17
23519: PUSH
23520: LD_INT 18
23522: PUSH
23523: LD_INT 19
23525: PUSH
23526: LD_INT 20
23528: PUSH
23529: LD_INT 21
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: IN
23547: NOT
23548: OR
23549: PUSH
23550: LD_VAR 0 8
23554: PUSH
23555: LD_INT 5
23557: ARRAY
23558: NOT
23559: OR
23560: PUSH
23561: LD_VAR 0 8
23565: PUSH
23566: LD_INT 6
23568: ARRAY
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: LD_INT 7
23578: PUSH
23579: LD_INT 9
23581: PUSH
23582: LD_INT 10
23584: PUSH
23585: LD_INT 11
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: IN
23596: NOT
23597: OR
23598: IFFALSE 23604
// exit ;
23600: POP
23601: POP
23602: GO 23687
// end ;
23604: GO 23275
23606: POP
23607: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23608: LD_VAR 0 9
23612: PPUSH
23613: LD_VAR 0 3
23617: PPUSH
23618: LD_VAR 0 4
23622: PPUSH
23623: LD_INT 20
23625: PPUSH
23626: CALL 15610 0 4
23630: PUSH
23631: LD_INT 4
23633: ARRAY
23634: IFFALSE 23638
// exit ;
23636: GO 23687
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23638: LD_VAR 0 2
23642: PUSH
23643: LD_INT 29
23645: PUSH
23646: LD_INT 30
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: IN
23653: PUSH
23654: LD_VAR 0 3
23658: PPUSH
23659: LD_VAR 0 4
23663: PPUSH
23664: LD_VAR 0 9
23668: PPUSH
23669: CALL_OW 440
23673: NOT
23674: AND
23675: IFFALSE 23679
// exit ;
23677: GO 23687
// result := true ;
23679: LD_ADDR_VAR 0 6
23683: PUSH
23684: LD_INT 1
23686: ST_TO_ADDR
// end ;
23687: LD_VAR 0 6
23691: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23692: LD_INT 0
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
23729: PPUSH
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
23743: PPUSH
23744: PPUSH
23745: PPUSH
23746: PPUSH
23747: PPUSH
23748: PPUSH
23749: PPUSH
23750: PPUSH
23751: PPUSH
// result = [ ] ;
23752: LD_ADDR_VAR 0 7
23756: PUSH
23757: EMPTY
23758: ST_TO_ADDR
// temp_list = [ ] ;
23759: LD_ADDR_VAR 0 9
23763: PUSH
23764: EMPTY
23765: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23766: LD_VAR 0 4
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: LD_INT 4
23785: PUSH
23786: LD_INT 5
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: IN
23797: NOT
23798: PUSH
23799: LD_VAR 0 1
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: IN
23814: PUSH
23815: LD_VAR 0 5
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 3
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: IN
23834: NOT
23835: AND
23836: OR
23837: IFFALSE 23841
// exit ;
23839: GO 42232
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23841: LD_VAR 0 1
23845: PUSH
23846: LD_INT 6
23848: PUSH
23849: LD_INT 7
23851: PUSH
23852: LD_INT 8
23854: PUSH
23855: LD_INT 13
23857: PUSH
23858: LD_INT 12
23860: PUSH
23861: LD_INT 15
23863: PUSH
23864: LD_INT 11
23866: PUSH
23867: LD_INT 14
23869: PUSH
23870: LD_INT 10
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: IN
23884: IFFALSE 23894
// btype = b_lab ;
23886: LD_ADDR_VAR 0 1
23890: PUSH
23891: LD_INT 6
23893: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23894: LD_VAR 0 6
23898: PUSH
23899: LD_INT 0
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 2
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: IN
23913: NOT
23914: PUSH
23915: LD_VAR 0 1
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 3
23931: PUSH
23932: LD_INT 6
23934: PUSH
23935: LD_INT 36
23937: PUSH
23938: LD_INT 4
23940: PUSH
23941: LD_INT 5
23943: PUSH
23944: LD_INT 31
23946: PUSH
23947: LD_INT 32
23949: PUSH
23950: LD_INT 33
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: IN
23966: NOT
23967: PUSH
23968: LD_VAR 0 6
23972: PUSH
23973: LD_INT 1
23975: EQUAL
23976: AND
23977: OR
23978: PUSH
23979: LD_VAR 0 1
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 3
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: IN
23994: NOT
23995: PUSH
23996: LD_VAR 0 6
24000: PUSH
24001: LD_INT 2
24003: EQUAL
24004: AND
24005: OR
24006: IFFALSE 24016
// mode = 0 ;
24008: LD_ADDR_VAR 0 6
24012: PUSH
24013: LD_INT 0
24015: ST_TO_ADDR
// case mode of 0 :
24016: LD_VAR 0 6
24020: PUSH
24021: LD_INT 0
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 35482
24029: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24030: LD_ADDR_VAR 0 11
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 2
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 2
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 1
24165: NEG
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: LD_INT 3
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: LD_INT 3
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: LD_INT 2
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24223: LD_ADDR_VAR 0 12
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 2
24346: NEG
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 2
24369: NEG
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 3
24380: NEG
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 3
24391: NEG
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24419: LD_ADDR_VAR 0 13
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: LD_INT 1
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: LD_INT 2
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: NEG
24567: PUSH
24568: LD_INT 3
24570: NEG
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 3
24578: NEG
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 3
24590: NEG
24591: PUSH
24592: LD_INT 3
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24618: LD_ADDR_VAR 0 14
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: LD_INT 1
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: PUSH
24701: LD_INT 2
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: LD_INT 2
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 2
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 3
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 3
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 2
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24814: LD_ADDR_VAR 0 15
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 2
24937: NEG
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 2
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25007: LD_ADDR_VAR 0 16
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 2
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 2
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 3
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 3
25164: PUSH
25165: LD_INT 3
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: LD_INT 3
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25200: LD_ADDR_VAR 0 17
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25430: LD_ADDR_VAR 0 18
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 2
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25660: LD_ADDR_VAR 0 19
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 0
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: NEG
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25890: LD_ADDR_VAR 0 20
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: NEG
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: LD_INT 2
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: LD_INT 2
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26120: LD_ADDR_VAR 0 21
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26350: LD_ADDR_VAR 0 22
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 2
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26580: LD_ADDR_VAR 0 23
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 2
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: LD_INT 3
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 3
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26860: LD_ADDR_VAR 0 24
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: LD_INT 2
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: LD_INT 2
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 2
27036: NEG
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: NEG
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: NEG
27060: PUSH
27061: LD_INT 2
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 2
27074: NEG
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 2
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: LD_INT 1
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 3
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27136: LD_ADDR_VAR 0 25
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: LD_INT 2
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 2
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 2
27312: NEG
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: NEG
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 3
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 3
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 3
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27410: LD_ADDR_VAR 0 26
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 2
27495: NEG
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 2
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 2
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: LD_INT 2
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: LD_INT 2
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: LD_INT 2
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: LD_INT 3
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27686: LD_ADDR_VAR 0 27
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: NEG
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 3
27919: NEG
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 3
27931: NEG
27932: PUSH
27933: LD_INT 2
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27966: LD_ADDR_VAR 0 28
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: LD_INT 2
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: NEG
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: LD_INT 3
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 3
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: NEG
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 3
28213: NEG
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28248: LD_ADDR_VAR 0 29
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: NEG
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: LD_INT 2
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 2
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: LD_INT 3
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 3
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: LD_INT 3
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: NEG
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28527: LD_ADDR_VAR 0 30
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 1
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: LD_INT 2
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 2
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 3
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 3
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 3
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 2
28759: NEG
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 3
28770: NEG
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28805: LD_ADDR_VAR 0 31
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 2
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 2
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: LD_INT 3
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: LD_INT 1
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: LD_INT 3
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 3
29048: NEG
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29083: LD_ADDR_VAR 0 32
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: LD_INT 3
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: PUSH
29296: LD_INT 2
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: LD_INT 3
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 2
29315: NEG
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 3
29326: NEG
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29361: LD_ADDR_VAR 0 33
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: LD_INT 2
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 2
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 3
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: NEG
29606: PUSH
29607: LD_INT 2
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29640: LD_ADDR_VAR 0 34
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 0
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: LD_INT 2
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 2
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 3
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: LD_INT 3
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 3
29885: NEG
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29920: LD_ADDR_VAR 0 35
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: NEG
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 2
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30032: LD_ADDR_VAR 0 36
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 2
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: LD_INT 2
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30144: LD_ADDR_VAR 0 37
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30256: LD_ADDR_VAR 0 38
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: NEG
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30368: LD_ADDR_VAR 0 39
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 1
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: LD_INT 2
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30480: LD_ADDR_VAR 0 40
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: LD_INT 1
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30592: LD_ADDR_VAR 0 41
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 2
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: LD_INT 3
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: NEG
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 3
30877: NEG
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: NEG
30902: PUSH
30903: LD_INT 3
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30942: LD_ADDR_VAR 0 42
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: LD_INT 1
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: NEG
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: LD_INT 3
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 3
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 3
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 3
31239: NEG
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 3
31251: NEG
31252: PUSH
31253: LD_INT 3
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31292: LD_ADDR_VAR 0 43
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: LD_INT 3
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 3
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: NEG
31578: PUSH
31579: LD_INT 1
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 3
31599: NEG
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31640: LD_ADDR_VAR 0 44
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: LD_INT 3
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 2
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 3
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: LD_INT 3
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 3
31949: NEG
31950: PUSH
31951: LD_INT 3
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31990: LD_ADDR_VAR 0 45
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: LD_INT 3
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: LD_INT 3
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 3
32287: NEG
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 3
32299: NEG
32300: PUSH
32301: LD_INT 3
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32340: LD_ADDR_VAR 0 46
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 3
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: LD_INT 3
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32688: LD_ADDR_VAR 0 47
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32839: LD_ADDR_VAR 0 48
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32986: LD_ADDR_VAR 0 49
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33130: LD_ADDR_VAR 0 50
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33274: LD_ADDR_VAR 0 51
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: NEG
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33421: LD_ADDR_VAR 0 52
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 2
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 2
33548: NEG
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33572: LD_ADDR_VAR 0 53
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33802: LD_ADDR_VAR 0 54
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34032: LD_ADDR_VAR 0 55
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 2
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34262: LD_ADDR_VAR 0 56
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34492: LD_ADDR_VAR 0 57
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34722: LD_ADDR_VAR 0 58
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34952: LD_ADDR_VAR 0 59
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35040: LD_ADDR_VAR 0 60
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35128: LD_ADDR_VAR 0 61
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35216: LD_ADDR_VAR 0 62
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35304: LD_ADDR_VAR 0 63
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 1
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35392: LD_ADDR_VAR 0 64
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: ST_TO_ADDR
// end ; 1 :
35480: GO 41377
35482: LD_INT 1
35484: DOUBLE
35485: EQUAL
35486: IFTRUE 35490
35488: GO 38113
35490: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35491: LD_ADDR_VAR 0 11
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 3
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: LD_INT 3
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35535: LD_ADDR_VAR 0 12
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 3
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35576: LD_ADDR_VAR 0 13
35580: PUSH
35581: LD_INT 3
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 3
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35616: LD_ADDR_VAR 0 14
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 3
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: LD_INT 2
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35657: LD_ADDR_VAR 0 15
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 3
35675: NEG
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 3
35686: NEG
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35701: LD_ADDR_VAR 0 16
35705: PUSH
35706: LD_INT 2
35708: NEG
35709: PUSH
35710: LD_INT 3
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 3
35720: NEG
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: LD_INT 3
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35747: LD_ADDR_VAR 0 17
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: LD_INT 3
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: LD_INT 3
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35791: LD_ADDR_VAR 0 18
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 3
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35832: LD_ADDR_VAR 0 19
35836: PUSH
35837: LD_INT 3
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 3
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 3
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35872: LD_ADDR_VAR 0 20
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35913: LD_ADDR_VAR 0 21
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 3
35931: NEG
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35957: LD_ADDR_VAR 0 22
35961: PUSH
35962: LD_INT 2
35964: NEG
35965: PUSH
35966: LD_INT 3
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 3
35976: NEG
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 3
35988: NEG
35989: PUSH
35990: LD_INT 3
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36003: LD_ADDR_VAR 0 23
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 3
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 4
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 3
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36047: LD_ADDR_VAR 0 24
36051: PUSH
36052: LD_INT 3
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 4
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36088: LD_ADDR_VAR 0 25
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: LD_INT 3
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 4
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 3
36115: PUSH
36116: LD_INT 4
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36128: LD_ADDR_VAR 0 26
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 4
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 3
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36169: LD_ADDR_VAR 0 27
36173: PUSH
36174: LD_INT 3
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 3
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 4
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: LIST
36212: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36213: LD_ADDR_VAR 0 28
36217: PUSH
36218: LD_INT 3
36220: NEG
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 3
36232: NEG
36233: PUSH
36234: LD_INT 4
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 4
36244: NEG
36245: PUSH
36246: LD_INT 3
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36259: LD_ADDR_VAR 0 29
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: LD_INT 3
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 3
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 4
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 4
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 3
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 5
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 5
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 4
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 6
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 6
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 5
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36414: LD_ADDR_VAR 0 30
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 3
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 3
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 4
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 4
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 4
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 5
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 5
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 5
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 6
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 6
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36557: LD_ADDR_VAR 0 31
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: LD_INT 3
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: LD_INT 3
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 4
36594: PUSH
36595: LD_INT 3
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: LD_INT 4
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: LD_INT 4
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 5
36624: PUSH
36625: LD_INT 4
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: LD_INT 5
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 4
36644: PUSH
36645: LD_INT 5
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 6
36654: PUSH
36655: LD_INT 5
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 6
36664: PUSH
36665: LD_INT 6
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 5
36674: PUSH
36675: LD_INT 6
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36696: LD_ADDR_VAR 0 32
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 4
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 4
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: LD_INT 5
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: LD_INT 5
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 4
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 6
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 6
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: LD_INT 5
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36839: LD_ADDR_VAR 0 33
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 3
36857: NEG
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: NEG
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 4
36891: NEG
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 4
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 4
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 5
36925: NEG
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 5
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 5
36948: NEG
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 6
36959: NEG
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 6
36970: NEG
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36994: LD_ADDR_VAR 0 34
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: LD_INT 3
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 3
37013: NEG
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 3
37025: NEG
37026: PUSH
37027: LD_INT 3
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: NEG
37038: PUSH
37039: LD_INT 4
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 4
37049: NEG
37050: PUSH
37051: LD_INT 3
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 4
37061: NEG
37062: PUSH
37063: LD_INT 4
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 4
37073: NEG
37074: PUSH
37075: LD_INT 5
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 5
37085: NEG
37086: PUSH
37087: LD_INT 4
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 5
37097: NEG
37098: PUSH
37099: LD_INT 5
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 5
37109: NEG
37110: PUSH
37111: LD_INT 6
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 6
37121: NEG
37122: PUSH
37123: LD_INT 5
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 6
37133: NEG
37134: PUSH
37135: LD_INT 6
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37157: LD_ADDR_VAR 0 41
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: LD_INT 3
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: LD_INT 2
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37201: LD_ADDR_VAR 0 42
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 3
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37242: LD_ADDR_VAR 0 43
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37282: LD_ADDR_VAR 0 44
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37323: LD_ADDR_VAR 0 45
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: NEG
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 3
37352: NEG
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37367: LD_ADDR_VAR 0 46
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: NEG
37387: PUSH
37388: LD_INT 3
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 3
37398: NEG
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37413: LD_ADDR_VAR 0 47
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 3
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37446: LD_ADDR_VAR 0 48
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37477: LD_ADDR_VAR 0 49
37481: PUSH
37482: LD_INT 3
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37506: LD_ADDR_VAR 0 50
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 3
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: LD_INT 3
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37535: LD_ADDR_VAR 0 51
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37566: LD_ADDR_VAR 0 52
37570: PUSH
37571: LD_INT 3
37573: NEG
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 3
37585: NEG
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37599: LD_ADDR_VAR 0 53
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 3
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 3
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37643: LD_ADDR_VAR 0 54
37647: PUSH
37648: LD_INT 2
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 3
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 3
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37684: LD_ADDR_VAR 0 55
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 3
37701: PUSH
37702: LD_INT 3
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37724: LD_ADDR_VAR 0 56
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 3
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 3
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37765: LD_ADDR_VAR 0 57
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 3
37783: NEG
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 3
37794: NEG
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37809: LD_ADDR_VAR 0 58
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 3
37840: NEG
37841: PUSH
37842: LD_INT 3
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37855: LD_ADDR_VAR 0 59
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37899: LD_ADDR_VAR 0 60
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 2
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37940: LD_ADDR_VAR 0 61
37944: PUSH
37945: LD_INT 2
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37980: LD_ADDR_VAR 0 62
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38021: LD_ADDR_VAR 0 63
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38065: LD_ADDR_VAR 0 64
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// end ; 2 :
38111: GO 41377
38113: LD_INT 2
38115: DOUBLE
38116: EQUAL
38117: IFTRUE 38121
38119: GO 41376
38121: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38122: LD_ADDR_VAR 0 29
38126: PUSH
38127: LD_INT 4
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 4
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 5
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 5
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 4
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 3
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 3
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 3
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 5
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 3
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 4
38242: PUSH
38243: LD_INT 3
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 4
38252: PUSH
38253: LD_INT 4
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: LD_INT 4
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 4
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: LD_INT 4
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: LD_INT 4
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 3
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 4
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 5
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 5
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: LD_INT 4
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 5
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 3
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 3
38405: NEG
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 3
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: NEG
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 3
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 4
38461: NEG
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 4
38472: NEG
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 4
38484: NEG
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 4
38507: NEG
38508: PUSH
38509: LD_INT 4
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 4
38519: NEG
38520: PUSH
38521: LD_INT 5
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 3
38531: NEG
38532: PUSH
38533: LD_INT 4
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 3
38543: NEG
38544: PUSH
38545: LD_INT 3
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 4
38555: NEG
38556: PUSH
38557: LD_INT 3
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 5
38567: NEG
38568: PUSH
38569: LD_INT 4
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 5
38579: NEG
38580: PUSH
38581: LD_INT 5
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 3
38591: NEG
38592: PUSH
38593: LD_INT 5
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 5
38603: NEG
38604: PUSH
38605: LD_INT 3
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38660: LD_ADDR_VAR 0 30
38664: PUSH
38665: LD_INT 4
38667: PUSH
38668: LD_INT 4
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 4
38677: PUSH
38678: LD_INT 3
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 5
38687: PUSH
38688: LD_INT 4
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 5
38697: PUSH
38698: LD_INT 5
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 4
38707: PUSH
38708: LD_INT 5
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 3
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 5
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: PUSH
38748: LD_INT 5
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 3
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 3
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 4
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 4
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 4
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 4
38850: NEG
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 4
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 3
38873: NEG
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: NEG
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 4
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 5
38906: NEG
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 5
38917: NEG
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 5
38929: NEG
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 3
38941: NEG
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: NEG
38953: PUSH
38954: LD_INT 3
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 3
38964: NEG
38965: PUSH
38966: LD_INT 4
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 2
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 3
39000: NEG
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 4
39012: NEG
39013: PUSH
39014: LD_INT 3
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 4
39024: NEG
39025: PUSH
39026: LD_INT 4
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 4
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 4
39048: NEG
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 4
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 5
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 4
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: LD_INT 3
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 3
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 4
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: LD_INT 5
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 3
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: LD_INT 5
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39207: LD_ADDR_VAR 0 31
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 4
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 4
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 5
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 5
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 4
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 5
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 3
39307: NEG
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 3
39318: NEG
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 3
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 4
39363: NEG
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 4
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 4
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 4
39409: NEG
39410: PUSH
39411: LD_INT 4
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 4
39421: NEG
39422: PUSH
39423: LD_INT 5
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: LD_INT 4
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 3
39445: NEG
39446: PUSH
39447: LD_INT 3
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 4
39457: NEG
39458: PUSH
39459: LD_INT 3
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 5
39469: NEG
39470: PUSH
39471: LD_INT 4
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 5
39481: NEG
39482: PUSH
39483: LD_INT 5
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: NEG
39494: PUSH
39495: LD_INT 5
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 5
39505: NEG
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 3
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 4
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 3
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 3
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 4
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 4
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 4
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 4
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 5
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 5
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 4
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: LD_INT 2
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 5
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39757: LD_ADDR_VAR 0 32
39761: PUSH
39762: LD_INT 4
39764: NEG
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 4
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 3
39787: NEG
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: NEG
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 4
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 5
39820: NEG
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 5
39831: NEG
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 5
39843: NEG
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: NEG
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: LD_INT 3
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: LD_INT 4
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: LD_INT 3
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 2
39902: NEG
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: NEG
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 4
39926: NEG
39927: PUSH
39928: LD_INT 3
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 4
39938: NEG
39939: PUSH
39940: LD_INT 4
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: LD_INT 4
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 4
39962: NEG
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 4
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 5
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 4
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 3
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: LD_INT 3
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 4
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 5
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 3
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 5
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 3
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 3
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 4
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 4
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 4
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 4
40169: PUSH
40170: LD_INT 4
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 4
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 5
40189: PUSH
40190: LD_INT 4
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 5
40199: PUSH
40200: LD_INT 5
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 4
40209: PUSH
40210: LD_INT 5
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 3
40219: PUSH
40220: LD_INT 4
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 3
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 5
40239: PUSH
40240: LD_INT 3
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 3
40249: PUSH
40250: LD_INT 5
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40304: LD_ADDR_VAR 0 33
40308: PUSH
40309: LD_INT 4
40311: NEG
40312: PUSH
40313: LD_INT 4
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 4
40323: NEG
40324: PUSH
40325: LD_INT 5
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: NEG
40336: PUSH
40337: LD_INT 4
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 3
40347: NEG
40348: PUSH
40349: LD_INT 3
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 4
40359: NEG
40360: PUSH
40361: LD_INT 3
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 5
40371: NEG
40372: PUSH
40373: LD_INT 4
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 5
40383: NEG
40384: PUSH
40385: LD_INT 5
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 3
40395: NEG
40396: PUSH
40397: LD_INT 5
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 5
40407: NEG
40408: PUSH
40409: LD_INT 3
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 3
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 4
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 3
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 3
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 4
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: LD_INT 4
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 4
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 5
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 5
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 4
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 3
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 5
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: LD_INT 3
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 3
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 4
40634: PUSH
40635: LD_INT 3
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 4
40644: PUSH
40645: LD_INT 4
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 3
40654: PUSH
40655: LD_INT 4
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 3
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 4
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 4
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 4
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 3
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 4
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 5
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 5
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 4
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 5
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: LD_INT 3
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40842: LD_ADDR_VAR 0 34
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 4
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 5
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 4
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 3
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 3
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 4
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 5
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: LD_INT 5
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 3
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 4
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 4
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 4
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 4
41044: PUSH
41045: LD_INT 4
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 4
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 5
41064: PUSH
41065: LD_INT 4
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 5
41074: PUSH
41075: LD_INT 5
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 4
41084: PUSH
41085: LD_INT 5
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 4
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 5
41114: PUSH
41115: LD_INT 3
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 3
41124: PUSH
41125: LD_INT 5
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 4
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 4
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 3
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 4
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 4
41227: NEG
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 4
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 3
41250: NEG
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 3
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 4
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 5
41283: NEG
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 5
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 5
41306: NEG
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 3
41318: NEG
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// end ; end ;
41374: GO 41377
41376: POP
// case btype of b_depot , b_warehouse :
41377: LD_VAR 0 1
41381: PUSH
41382: LD_INT 0
41384: DOUBLE
41385: EQUAL
41386: IFTRUE 41396
41388: LD_INT 1
41390: DOUBLE
41391: EQUAL
41392: IFTRUE 41396
41394: GO 41597
41396: POP
// case nation of nation_american :
41397: LD_VAR 0 5
41401: PUSH
41402: LD_INT 1
41404: DOUBLE
41405: EQUAL
41406: IFTRUE 41410
41408: GO 41466
41410: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41411: LD_ADDR_VAR 0 9
41415: PUSH
41416: LD_VAR 0 11
41420: PUSH
41421: LD_VAR 0 12
41425: PUSH
41426: LD_VAR 0 13
41430: PUSH
41431: LD_VAR 0 14
41435: PUSH
41436: LD_VAR 0 15
41440: PUSH
41441: LD_VAR 0 16
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: PUSH
41454: LD_VAR 0 4
41458: PUSH
41459: LD_INT 1
41461: PLUS
41462: ARRAY
41463: ST_TO_ADDR
41464: GO 41595
41466: LD_INT 2
41468: DOUBLE
41469: EQUAL
41470: IFTRUE 41474
41472: GO 41530
41474: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41475: LD_ADDR_VAR 0 9
41479: PUSH
41480: LD_VAR 0 17
41484: PUSH
41485: LD_VAR 0 18
41489: PUSH
41490: LD_VAR 0 19
41494: PUSH
41495: LD_VAR 0 20
41499: PUSH
41500: LD_VAR 0 21
41504: PUSH
41505: LD_VAR 0 22
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: PUSH
41518: LD_VAR 0 4
41522: PUSH
41523: LD_INT 1
41525: PLUS
41526: ARRAY
41527: ST_TO_ADDR
41528: GO 41595
41530: LD_INT 3
41532: DOUBLE
41533: EQUAL
41534: IFTRUE 41538
41536: GO 41594
41538: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41539: LD_ADDR_VAR 0 9
41543: PUSH
41544: LD_VAR 0 23
41548: PUSH
41549: LD_VAR 0 24
41553: PUSH
41554: LD_VAR 0 25
41558: PUSH
41559: LD_VAR 0 26
41563: PUSH
41564: LD_VAR 0 27
41568: PUSH
41569: LD_VAR 0 28
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: PUSH
41582: LD_VAR 0 4
41586: PUSH
41587: LD_INT 1
41589: PLUS
41590: ARRAY
41591: ST_TO_ADDR
41592: GO 41595
41594: POP
41595: GO 42150
41597: LD_INT 2
41599: DOUBLE
41600: EQUAL
41601: IFTRUE 41611
41603: LD_INT 3
41605: DOUBLE
41606: EQUAL
41607: IFTRUE 41611
41609: GO 41667
41611: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41612: LD_ADDR_VAR 0 9
41616: PUSH
41617: LD_VAR 0 29
41621: PUSH
41622: LD_VAR 0 30
41626: PUSH
41627: LD_VAR 0 31
41631: PUSH
41632: LD_VAR 0 32
41636: PUSH
41637: LD_VAR 0 33
41641: PUSH
41642: LD_VAR 0 34
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: PUSH
41655: LD_VAR 0 4
41659: PUSH
41660: LD_INT 1
41662: PLUS
41663: ARRAY
41664: ST_TO_ADDR
41665: GO 42150
41667: LD_INT 16
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41729
41673: LD_INT 17
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41729
41679: LD_INT 18
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41729
41685: LD_INT 19
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41729
41691: LD_INT 22
41693: DOUBLE
41694: EQUAL
41695: IFTRUE 41729
41697: LD_INT 20
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41729
41703: LD_INT 21
41705: DOUBLE
41706: EQUAL
41707: IFTRUE 41729
41709: LD_INT 23
41711: DOUBLE
41712: EQUAL
41713: IFTRUE 41729
41715: LD_INT 24
41717: DOUBLE
41718: EQUAL
41719: IFTRUE 41729
41721: LD_INT 25
41723: DOUBLE
41724: EQUAL
41725: IFTRUE 41729
41727: GO 41785
41729: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41730: LD_ADDR_VAR 0 9
41734: PUSH
41735: LD_VAR 0 35
41739: PUSH
41740: LD_VAR 0 36
41744: PUSH
41745: LD_VAR 0 37
41749: PUSH
41750: LD_VAR 0 38
41754: PUSH
41755: LD_VAR 0 39
41759: PUSH
41760: LD_VAR 0 40
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: PUSH
41773: LD_VAR 0 4
41777: PUSH
41778: LD_INT 1
41780: PLUS
41781: ARRAY
41782: ST_TO_ADDR
41783: GO 42150
41785: LD_INT 6
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41841
41791: LD_INT 7
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41841
41797: LD_INT 8
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41841
41803: LD_INT 13
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41841
41809: LD_INT 12
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41841
41815: LD_INT 15
41817: DOUBLE
41818: EQUAL
41819: IFTRUE 41841
41821: LD_INT 11
41823: DOUBLE
41824: EQUAL
41825: IFTRUE 41841
41827: LD_INT 14
41829: DOUBLE
41830: EQUAL
41831: IFTRUE 41841
41833: LD_INT 10
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41841
41839: GO 41897
41841: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41842: LD_ADDR_VAR 0 9
41846: PUSH
41847: LD_VAR 0 41
41851: PUSH
41852: LD_VAR 0 42
41856: PUSH
41857: LD_VAR 0 43
41861: PUSH
41862: LD_VAR 0 44
41866: PUSH
41867: LD_VAR 0 45
41871: PUSH
41872: LD_VAR 0 46
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: PUSH
41885: LD_VAR 0 4
41889: PUSH
41890: LD_INT 1
41892: PLUS
41893: ARRAY
41894: ST_TO_ADDR
41895: GO 42150
41897: LD_INT 36
41899: DOUBLE
41900: EQUAL
41901: IFTRUE 41905
41903: GO 41961
41905: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41906: LD_ADDR_VAR 0 9
41910: PUSH
41911: LD_VAR 0 47
41915: PUSH
41916: LD_VAR 0 48
41920: PUSH
41921: LD_VAR 0 49
41925: PUSH
41926: LD_VAR 0 50
41930: PUSH
41931: LD_VAR 0 51
41935: PUSH
41936: LD_VAR 0 52
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: PUSH
41949: LD_VAR 0 4
41953: PUSH
41954: LD_INT 1
41956: PLUS
41957: ARRAY
41958: ST_TO_ADDR
41959: GO 42150
41961: LD_INT 4
41963: DOUBLE
41964: EQUAL
41965: IFTRUE 41987
41967: LD_INT 5
41969: DOUBLE
41970: EQUAL
41971: IFTRUE 41987
41973: LD_INT 34
41975: DOUBLE
41976: EQUAL
41977: IFTRUE 41987
41979: LD_INT 37
41981: DOUBLE
41982: EQUAL
41983: IFTRUE 41987
41985: GO 42043
41987: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41988: LD_ADDR_VAR 0 9
41992: PUSH
41993: LD_VAR 0 53
41997: PUSH
41998: LD_VAR 0 54
42002: PUSH
42003: LD_VAR 0 55
42007: PUSH
42008: LD_VAR 0 56
42012: PUSH
42013: LD_VAR 0 57
42017: PUSH
42018: LD_VAR 0 58
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: PUSH
42031: LD_VAR 0 4
42035: PUSH
42036: LD_INT 1
42038: PLUS
42039: ARRAY
42040: ST_TO_ADDR
42041: GO 42150
42043: LD_INT 31
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42093
42049: LD_INT 32
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42093
42055: LD_INT 33
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42093
42061: LD_INT 27
42063: DOUBLE
42064: EQUAL
42065: IFTRUE 42093
42067: LD_INT 26
42069: DOUBLE
42070: EQUAL
42071: IFTRUE 42093
42073: LD_INT 28
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42093
42079: LD_INT 29
42081: DOUBLE
42082: EQUAL
42083: IFTRUE 42093
42085: LD_INT 30
42087: DOUBLE
42088: EQUAL
42089: IFTRUE 42093
42091: GO 42149
42093: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42094: LD_ADDR_VAR 0 9
42098: PUSH
42099: LD_VAR 0 59
42103: PUSH
42104: LD_VAR 0 60
42108: PUSH
42109: LD_VAR 0 61
42113: PUSH
42114: LD_VAR 0 62
42118: PUSH
42119: LD_VAR 0 63
42123: PUSH
42124: LD_VAR 0 64
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: PUSH
42137: LD_VAR 0 4
42141: PUSH
42142: LD_INT 1
42144: PLUS
42145: ARRAY
42146: ST_TO_ADDR
42147: GO 42150
42149: POP
// temp_list2 = [ ] ;
42150: LD_ADDR_VAR 0 10
42154: PUSH
42155: EMPTY
42156: ST_TO_ADDR
// for i in temp_list do
42157: LD_ADDR_VAR 0 8
42161: PUSH
42162: LD_VAR 0 9
42166: PUSH
42167: FOR_IN
42168: IFFALSE 42220
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42170: LD_ADDR_VAR 0 10
42174: PUSH
42175: LD_VAR 0 10
42179: PUSH
42180: LD_VAR 0 8
42184: PUSH
42185: LD_INT 1
42187: ARRAY
42188: PUSH
42189: LD_VAR 0 2
42193: PLUS
42194: PUSH
42195: LD_VAR 0 8
42199: PUSH
42200: LD_INT 2
42202: ARRAY
42203: PUSH
42204: LD_VAR 0 3
42208: PLUS
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: EMPTY
42215: LIST
42216: ADD
42217: ST_TO_ADDR
42218: GO 42167
42220: POP
42221: POP
// result = temp_list2 ;
42222: LD_ADDR_VAR 0 7
42226: PUSH
42227: LD_VAR 0 10
42231: ST_TO_ADDR
// end ;
42232: LD_VAR 0 7
42236: RET
// export function EnemyInRange ( unit , dist ) ; begin
42237: LD_INT 0
42239: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42240: LD_ADDR_VAR 0 3
42244: PUSH
42245: LD_VAR 0 1
42249: PPUSH
42250: CALL_OW 255
42254: PPUSH
42255: LD_VAR 0 1
42259: PPUSH
42260: CALL_OW 250
42264: PPUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 251
42274: PPUSH
42275: LD_VAR 0 2
42279: PPUSH
42280: CALL 15610 0 4
42284: PUSH
42285: LD_INT 4
42287: ARRAY
42288: ST_TO_ADDR
// end ;
42289: LD_VAR 0 3
42293: RET
// export function PlayerSeeMe ( unit ) ; begin
42294: LD_INT 0
42296: PPUSH
// result := See ( your_side , unit ) ;
42297: LD_ADDR_VAR 0 2
42301: PUSH
42302: LD_OWVAR 2
42306: PPUSH
42307: LD_VAR 0 1
42311: PPUSH
42312: CALL_OW 292
42316: ST_TO_ADDR
// end ;
42317: LD_VAR 0 2
42321: RET
// export function ReverseDir ( unit ) ; begin
42322: LD_INT 0
42324: PPUSH
// if not unit then
42325: LD_VAR 0 1
42329: NOT
42330: IFFALSE 42334
// exit ;
42332: GO 42357
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42334: LD_ADDR_VAR 0 2
42338: PUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 254
42348: PUSH
42349: LD_INT 3
42351: PLUS
42352: PUSH
42353: LD_INT 6
42355: MOD
42356: ST_TO_ADDR
// end ;
42357: LD_VAR 0 2
42361: RET
// export function ReverseArray ( array ) ; var i ; begin
42362: LD_INT 0
42364: PPUSH
42365: PPUSH
// if not array then
42366: LD_VAR 0 1
42370: NOT
42371: IFFALSE 42375
// exit ;
42373: GO 42430
// result := [ ] ;
42375: LD_ADDR_VAR 0 2
42379: PUSH
42380: EMPTY
42381: ST_TO_ADDR
// for i := array downto 1 do
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: DOUBLE
42388: LD_VAR 0 1
42392: INC
42393: ST_TO_ADDR
42394: LD_INT 1
42396: PUSH
42397: FOR_DOWNTO
42398: IFFALSE 42428
// result := Join ( result , array [ i ] ) ;
42400: LD_ADDR_VAR 0 2
42404: PUSH
42405: LD_VAR 0 2
42409: PPUSH
42410: LD_VAR 0 1
42414: PUSH
42415: LD_VAR 0 3
42419: ARRAY
42420: PPUSH
42421: CALL 47095 0 2
42425: ST_TO_ADDR
42426: GO 42397
42428: POP
42429: POP
// end ;
42430: LD_VAR 0 2
42434: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42435: LD_INT 0
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
// if not unit or not hexes then
42443: LD_VAR 0 1
42447: NOT
42448: PUSH
42449: LD_VAR 0 2
42453: NOT
42454: OR
42455: IFFALSE 42459
// exit ;
42457: GO 42582
// dist := 9999 ;
42459: LD_ADDR_VAR 0 5
42463: PUSH
42464: LD_INT 9999
42466: ST_TO_ADDR
// for i = 1 to hexes do
42467: LD_ADDR_VAR 0 4
42471: PUSH
42472: DOUBLE
42473: LD_INT 1
42475: DEC
42476: ST_TO_ADDR
42477: LD_VAR 0 2
42481: PUSH
42482: FOR_TO
42483: IFFALSE 42570
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42485: LD_ADDR_VAR 0 6
42489: PUSH
42490: LD_VAR 0 1
42494: PPUSH
42495: LD_VAR 0 2
42499: PUSH
42500: LD_VAR 0 4
42504: ARRAY
42505: PUSH
42506: LD_INT 1
42508: ARRAY
42509: PPUSH
42510: LD_VAR 0 2
42514: PUSH
42515: LD_VAR 0 4
42519: ARRAY
42520: PUSH
42521: LD_INT 2
42523: ARRAY
42524: PPUSH
42525: CALL_OW 297
42529: ST_TO_ADDR
// if tdist < dist then
42530: LD_VAR 0 6
42534: PUSH
42535: LD_VAR 0 5
42539: LESS
42540: IFFALSE 42568
// begin hex := hexes [ i ] ;
42542: LD_ADDR_VAR 0 8
42546: PUSH
42547: LD_VAR 0 2
42551: PUSH
42552: LD_VAR 0 4
42556: ARRAY
42557: ST_TO_ADDR
// dist := tdist ;
42558: LD_ADDR_VAR 0 5
42562: PUSH
42563: LD_VAR 0 6
42567: ST_TO_ADDR
// end ; end ;
42568: GO 42482
42570: POP
42571: POP
// result := hex ;
42572: LD_ADDR_VAR 0 3
42576: PUSH
42577: LD_VAR 0 8
42581: ST_TO_ADDR
// end ;
42582: LD_VAR 0 3
42586: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42587: LD_INT 0
42589: PPUSH
42590: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42591: LD_VAR 0 1
42595: NOT
42596: PUSH
42597: LD_VAR 0 1
42601: PUSH
42602: LD_INT 21
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 23
42614: PUSH
42615: LD_INT 2
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PPUSH
42626: CALL_OW 69
42630: IN
42631: NOT
42632: OR
42633: IFFALSE 42637
// exit ;
42635: GO 42684
// for i = 1 to 3 do
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: DOUBLE
42643: LD_INT 1
42645: DEC
42646: ST_TO_ADDR
42647: LD_INT 3
42649: PUSH
42650: FOR_TO
42651: IFFALSE 42682
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42653: LD_VAR 0 1
42657: PPUSH
42658: CALL_OW 250
42662: PPUSH
42663: LD_VAR 0 1
42667: PPUSH
42668: CALL_OW 251
42672: PPUSH
42673: LD_INT 1
42675: PPUSH
42676: CALL_OW 453
42680: GO 42650
42682: POP
42683: POP
// end ;
42684: LD_VAR 0 2
42688: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42689: LD_INT 0
42691: PPUSH
42692: PPUSH
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
// if not unit or not enemy_unit then
42697: LD_VAR 0 1
42701: NOT
42702: PUSH
42703: LD_VAR 0 2
42707: NOT
42708: OR
42709: IFFALSE 42713
// exit ;
42711: GO 43180
// if GetLives ( i ) < 250 then
42713: LD_VAR 0 4
42717: PPUSH
42718: CALL_OW 256
42722: PUSH
42723: LD_INT 250
42725: LESS
42726: IFFALSE 42739
// begin ComAutodestruct ( i ) ;
42728: LD_VAR 0 4
42732: PPUSH
42733: CALL 42587 0 1
// exit ;
42737: GO 43180
// end ; x := GetX ( enemy_unit ) ;
42739: LD_ADDR_VAR 0 7
42743: PUSH
42744: LD_VAR 0 2
42748: PPUSH
42749: CALL_OW 250
42753: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42754: LD_ADDR_VAR 0 8
42758: PUSH
42759: LD_VAR 0 2
42763: PPUSH
42764: CALL_OW 251
42768: ST_TO_ADDR
// if not x or not y then
42769: LD_VAR 0 7
42773: NOT
42774: PUSH
42775: LD_VAR 0 8
42779: NOT
42780: OR
42781: IFFALSE 42785
// exit ;
42783: GO 43180
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42785: LD_ADDR_VAR 0 6
42789: PUSH
42790: LD_VAR 0 7
42794: PPUSH
42795: LD_INT 0
42797: PPUSH
42798: LD_INT 4
42800: PPUSH
42801: CALL_OW 272
42805: PUSH
42806: LD_VAR 0 8
42810: PPUSH
42811: LD_INT 0
42813: PPUSH
42814: LD_INT 4
42816: PPUSH
42817: CALL_OW 273
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_VAR 0 7
42830: PPUSH
42831: LD_INT 1
42833: PPUSH
42834: LD_INT 4
42836: PPUSH
42837: CALL_OW 272
42841: PUSH
42842: LD_VAR 0 8
42846: PPUSH
42847: LD_INT 1
42849: PPUSH
42850: LD_INT 4
42852: PPUSH
42853: CALL_OW 273
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_VAR 0 7
42866: PPUSH
42867: LD_INT 2
42869: PPUSH
42870: LD_INT 4
42872: PPUSH
42873: CALL_OW 272
42877: PUSH
42878: LD_VAR 0 8
42882: PPUSH
42883: LD_INT 2
42885: PPUSH
42886: LD_INT 4
42888: PPUSH
42889: CALL_OW 273
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_VAR 0 7
42902: PPUSH
42903: LD_INT 3
42905: PPUSH
42906: LD_INT 4
42908: PPUSH
42909: CALL_OW 272
42913: PUSH
42914: LD_VAR 0 8
42918: PPUSH
42919: LD_INT 3
42921: PPUSH
42922: LD_INT 4
42924: PPUSH
42925: CALL_OW 273
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_VAR 0 7
42938: PPUSH
42939: LD_INT 4
42941: PPUSH
42942: LD_INT 4
42944: PPUSH
42945: CALL_OW 272
42949: PUSH
42950: LD_VAR 0 8
42954: PPUSH
42955: LD_INT 4
42957: PPUSH
42958: LD_INT 4
42960: PPUSH
42961: CALL_OW 273
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_VAR 0 7
42974: PPUSH
42975: LD_INT 5
42977: PPUSH
42978: LD_INT 4
42980: PPUSH
42981: CALL_OW 272
42985: PUSH
42986: LD_VAR 0 8
42990: PPUSH
42991: LD_INT 5
42993: PPUSH
42994: LD_INT 4
42996: PPUSH
42997: CALL_OW 273
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: ST_TO_ADDR
// for i = tmp downto 1 do
43014: LD_ADDR_VAR 0 4
43018: PUSH
43019: DOUBLE
43020: LD_VAR 0 6
43024: INC
43025: ST_TO_ADDR
43026: LD_INT 1
43028: PUSH
43029: FOR_DOWNTO
43030: IFFALSE 43131
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43032: LD_VAR 0 6
43036: PUSH
43037: LD_VAR 0 4
43041: ARRAY
43042: PUSH
43043: LD_INT 1
43045: ARRAY
43046: PPUSH
43047: LD_VAR 0 6
43051: PUSH
43052: LD_VAR 0 4
43056: ARRAY
43057: PUSH
43058: LD_INT 2
43060: ARRAY
43061: PPUSH
43062: CALL_OW 488
43066: NOT
43067: PUSH
43068: LD_VAR 0 6
43072: PUSH
43073: LD_VAR 0 4
43077: ARRAY
43078: PUSH
43079: LD_INT 1
43081: ARRAY
43082: PPUSH
43083: LD_VAR 0 6
43087: PUSH
43088: LD_VAR 0 4
43092: ARRAY
43093: PUSH
43094: LD_INT 2
43096: ARRAY
43097: PPUSH
43098: CALL_OW 428
43102: PUSH
43103: LD_INT 0
43105: NONEQUAL
43106: OR
43107: IFFALSE 43129
// tmp := Delete ( tmp , i ) ;
43109: LD_ADDR_VAR 0 6
43113: PUSH
43114: LD_VAR 0 6
43118: PPUSH
43119: LD_VAR 0 4
43123: PPUSH
43124: CALL_OW 3
43128: ST_TO_ADDR
43129: GO 43029
43131: POP
43132: POP
// j := GetClosestHex ( unit , tmp ) ;
43133: LD_ADDR_VAR 0 5
43137: PUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: LD_VAR 0 6
43147: PPUSH
43148: CALL 42435 0 2
43152: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43153: LD_VAR 0 1
43157: PPUSH
43158: LD_VAR 0 5
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PPUSH
43167: LD_VAR 0 5
43171: PUSH
43172: LD_INT 2
43174: ARRAY
43175: PPUSH
43176: CALL_OW 111
// end ;
43180: LD_VAR 0 3
43184: RET
// export function PrepareApemanSoldier ( ) ; begin
43185: LD_INT 0
43187: PPUSH
// uc_nation := 0 ;
43188: LD_ADDR_OWVAR 21
43192: PUSH
43193: LD_INT 0
43195: ST_TO_ADDR
// hc_sex := sex_male ;
43196: LD_ADDR_OWVAR 27
43200: PUSH
43201: LD_INT 1
43203: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43204: LD_ADDR_OWVAR 28
43208: PUSH
43209: LD_INT 15
43211: ST_TO_ADDR
// hc_gallery :=  ;
43212: LD_ADDR_OWVAR 33
43216: PUSH
43217: LD_STRING 
43219: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43220: LD_ADDR_OWVAR 31
43224: PUSH
43225: LD_INT 0
43227: PPUSH
43228: LD_INT 3
43230: PPUSH
43231: CALL_OW 12
43235: PUSH
43236: LD_INT 0
43238: PPUSH
43239: LD_INT 3
43241: PPUSH
43242: CALL_OW 12
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: ST_TO_ADDR
// end ;
43259: LD_VAR 0 1
43263: RET
// export function PrepareApemanEngineer ( ) ; begin
43264: LD_INT 0
43266: PPUSH
// uc_nation := 0 ;
43267: LD_ADDR_OWVAR 21
43271: PUSH
43272: LD_INT 0
43274: ST_TO_ADDR
// hc_sex := sex_male ;
43275: LD_ADDR_OWVAR 27
43279: PUSH
43280: LD_INT 1
43282: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43283: LD_ADDR_OWVAR 28
43287: PUSH
43288: LD_INT 16
43290: ST_TO_ADDR
// hc_gallery :=  ;
43291: LD_ADDR_OWVAR 33
43295: PUSH
43296: LD_STRING 
43298: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43299: LD_ADDR_OWVAR 31
43303: PUSH
43304: LD_INT 0
43306: PPUSH
43307: LD_INT 3
43309: PPUSH
43310: CALL_OW 12
43314: PUSH
43315: LD_INT 0
43317: PPUSH
43318: LD_INT 3
43320: PPUSH
43321: CALL_OW 12
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: ST_TO_ADDR
// end ;
43338: LD_VAR 0 1
43342: RET
// export function PrepareApeman ( agressivity ) ; begin
43343: LD_INT 0
43345: PPUSH
// uc_side := 0 ;
43346: LD_ADDR_OWVAR 20
43350: PUSH
43351: LD_INT 0
43353: ST_TO_ADDR
// uc_nation := 0 ;
43354: LD_ADDR_OWVAR 21
43358: PUSH
43359: LD_INT 0
43361: ST_TO_ADDR
// hc_sex := sex_male ;
43362: LD_ADDR_OWVAR 27
43366: PUSH
43367: LD_INT 1
43369: ST_TO_ADDR
// hc_class := class_apeman ;
43370: LD_ADDR_OWVAR 28
43374: PUSH
43375: LD_INT 12
43377: ST_TO_ADDR
// hc_gallery :=  ;
43378: LD_ADDR_OWVAR 33
43382: PUSH
43383: LD_STRING 
43385: ST_TO_ADDR
// if agressivity = 0 then
43386: LD_VAR 0 1
43390: PUSH
43391: LD_INT 0
43393: EQUAL
43394: IFFALSE 43406
// hc_agressivity := 0 else
43396: LD_ADDR_OWVAR 35
43400: PUSH
43401: LD_INT 0
43403: ST_TO_ADDR
43404: GO 43427
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43406: LD_ADDR_OWVAR 35
43410: PUSH
43411: LD_VAR 0 1
43415: NEG
43416: PPUSH
43417: LD_VAR 0 1
43421: PPUSH
43422: CALL_OW 12
43426: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43427: LD_ADDR_OWVAR 31
43431: PUSH
43432: LD_INT 0
43434: PPUSH
43435: LD_INT 3
43437: PPUSH
43438: CALL_OW 12
43442: PUSH
43443: LD_INT 0
43445: PPUSH
43446: LD_INT 3
43448: PPUSH
43449: CALL_OW 12
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
// end ;
43466: LD_VAR 0 2
43470: RET
// export function PrepareTiger ( agressivity ) ; begin
43471: LD_INT 0
43473: PPUSH
// uc_side := 0 ;
43474: LD_ADDR_OWVAR 20
43478: PUSH
43479: LD_INT 0
43481: ST_TO_ADDR
// uc_nation := 0 ;
43482: LD_ADDR_OWVAR 21
43486: PUSH
43487: LD_INT 0
43489: ST_TO_ADDR
// hc_class := class_tiger ;
43490: LD_ADDR_OWVAR 28
43494: PUSH
43495: LD_INT 14
43497: ST_TO_ADDR
// hc_gallery :=  ;
43498: LD_ADDR_OWVAR 33
43502: PUSH
43503: LD_STRING 
43505: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43506: LD_ADDR_OWVAR 35
43510: PUSH
43511: LD_VAR 0 1
43515: NEG
43516: PPUSH
43517: LD_VAR 0 1
43521: PPUSH
43522: CALL_OW 12
43526: ST_TO_ADDR
// end ;
43527: LD_VAR 0 2
43531: RET
// export function PrepareEnchidna ( ) ; begin
43532: LD_INT 0
43534: PPUSH
// uc_side := 0 ;
43535: LD_ADDR_OWVAR 20
43539: PUSH
43540: LD_INT 0
43542: ST_TO_ADDR
// uc_nation := 0 ;
43543: LD_ADDR_OWVAR 21
43547: PUSH
43548: LD_INT 0
43550: ST_TO_ADDR
// hc_class := class_baggie ;
43551: LD_ADDR_OWVAR 28
43555: PUSH
43556: LD_INT 13
43558: ST_TO_ADDR
// hc_gallery :=  ;
43559: LD_ADDR_OWVAR 33
43563: PUSH
43564: LD_STRING 
43566: ST_TO_ADDR
// end ;
43567: LD_VAR 0 1
43571: RET
// export function PrepareFrog ( ) ; begin
43572: LD_INT 0
43574: PPUSH
// uc_side := 0 ;
43575: LD_ADDR_OWVAR 20
43579: PUSH
43580: LD_INT 0
43582: ST_TO_ADDR
// uc_nation := 0 ;
43583: LD_ADDR_OWVAR 21
43587: PUSH
43588: LD_INT 0
43590: ST_TO_ADDR
// hc_class := class_frog ;
43591: LD_ADDR_OWVAR 28
43595: PUSH
43596: LD_INT 19
43598: ST_TO_ADDR
// hc_gallery :=  ;
43599: LD_ADDR_OWVAR 33
43603: PUSH
43604: LD_STRING 
43606: ST_TO_ADDR
// end ;
43607: LD_VAR 0 1
43611: RET
// export function PrepareFish ( ) ; begin
43612: LD_INT 0
43614: PPUSH
// uc_side := 0 ;
43615: LD_ADDR_OWVAR 20
43619: PUSH
43620: LD_INT 0
43622: ST_TO_ADDR
// uc_nation := 0 ;
43623: LD_ADDR_OWVAR 21
43627: PUSH
43628: LD_INT 0
43630: ST_TO_ADDR
// hc_class := class_fish ;
43631: LD_ADDR_OWVAR 28
43635: PUSH
43636: LD_INT 20
43638: ST_TO_ADDR
// hc_gallery :=  ;
43639: LD_ADDR_OWVAR 33
43643: PUSH
43644: LD_STRING 
43646: ST_TO_ADDR
// end ;
43647: LD_VAR 0 1
43651: RET
// export function PrepareBird ( ) ; begin
43652: LD_INT 0
43654: PPUSH
// uc_side := 0 ;
43655: LD_ADDR_OWVAR 20
43659: PUSH
43660: LD_INT 0
43662: ST_TO_ADDR
// uc_nation := 0 ;
43663: LD_ADDR_OWVAR 21
43667: PUSH
43668: LD_INT 0
43670: ST_TO_ADDR
// hc_class := class_phororhacos ;
43671: LD_ADDR_OWVAR 28
43675: PUSH
43676: LD_INT 18
43678: ST_TO_ADDR
// hc_gallery :=  ;
43679: LD_ADDR_OWVAR 33
43683: PUSH
43684: LD_STRING 
43686: ST_TO_ADDR
// end ;
43687: LD_VAR 0 1
43691: RET
// export function PrepareHorse ( ) ; begin
43692: LD_INT 0
43694: PPUSH
// uc_side := 0 ;
43695: LD_ADDR_OWVAR 20
43699: PUSH
43700: LD_INT 0
43702: ST_TO_ADDR
// uc_nation := 0 ;
43703: LD_ADDR_OWVAR 21
43707: PUSH
43708: LD_INT 0
43710: ST_TO_ADDR
// hc_class := class_horse ;
43711: LD_ADDR_OWVAR 28
43715: PUSH
43716: LD_INT 21
43718: ST_TO_ADDR
// hc_gallery :=  ;
43719: LD_ADDR_OWVAR 33
43723: PUSH
43724: LD_STRING 
43726: ST_TO_ADDR
// end ;
43727: LD_VAR 0 1
43731: RET
// export function PrepareMastodont ( ) ; begin
43732: LD_INT 0
43734: PPUSH
// uc_side := 0 ;
43735: LD_ADDR_OWVAR 20
43739: PUSH
43740: LD_INT 0
43742: ST_TO_ADDR
// uc_nation := 0 ;
43743: LD_ADDR_OWVAR 21
43747: PUSH
43748: LD_INT 0
43750: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43751: LD_ADDR_OWVAR 37
43755: PUSH
43756: LD_INT 31
43758: ST_TO_ADDR
// vc_control := control_rider ;
43759: LD_ADDR_OWVAR 38
43763: PUSH
43764: LD_INT 4
43766: ST_TO_ADDR
// end ;
43767: LD_VAR 0 1
43771: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43772: LD_INT 0
43774: PPUSH
43775: PPUSH
43776: PPUSH
// uc_side = 0 ;
43777: LD_ADDR_OWVAR 20
43781: PUSH
43782: LD_INT 0
43784: ST_TO_ADDR
// uc_nation = 0 ;
43785: LD_ADDR_OWVAR 21
43789: PUSH
43790: LD_INT 0
43792: ST_TO_ADDR
// InitHc_All ( ) ;
43793: CALL_OW 584
// InitVc ;
43797: CALL_OW 20
// if mastodonts then
43801: LD_VAR 0 6
43805: IFFALSE 43872
// for i = 1 to mastodonts do
43807: LD_ADDR_VAR 0 11
43811: PUSH
43812: DOUBLE
43813: LD_INT 1
43815: DEC
43816: ST_TO_ADDR
43817: LD_VAR 0 6
43821: PUSH
43822: FOR_TO
43823: IFFALSE 43870
// begin vc_chassis := 31 ;
43825: LD_ADDR_OWVAR 37
43829: PUSH
43830: LD_INT 31
43832: ST_TO_ADDR
// vc_control := control_rider ;
43833: LD_ADDR_OWVAR 38
43837: PUSH
43838: LD_INT 4
43840: ST_TO_ADDR
// animal := CreateVehicle ;
43841: LD_ADDR_VAR 0 12
43845: PUSH
43846: CALL_OW 45
43850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43851: LD_VAR 0 12
43855: PPUSH
43856: LD_VAR 0 8
43860: PPUSH
43861: LD_INT 0
43863: PPUSH
43864: CALL 46000 0 3
// end ;
43868: GO 43822
43870: POP
43871: POP
// if horses then
43872: LD_VAR 0 5
43876: IFFALSE 43943
// for i = 1 to horses do
43878: LD_ADDR_VAR 0 11
43882: PUSH
43883: DOUBLE
43884: LD_INT 1
43886: DEC
43887: ST_TO_ADDR
43888: LD_VAR 0 5
43892: PUSH
43893: FOR_TO
43894: IFFALSE 43941
// begin hc_class := 21 ;
43896: LD_ADDR_OWVAR 28
43900: PUSH
43901: LD_INT 21
43903: ST_TO_ADDR
// hc_gallery :=  ;
43904: LD_ADDR_OWVAR 33
43908: PUSH
43909: LD_STRING 
43911: ST_TO_ADDR
// animal := CreateHuman ;
43912: LD_ADDR_VAR 0 12
43916: PUSH
43917: CALL_OW 44
43921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43922: LD_VAR 0 12
43926: PPUSH
43927: LD_VAR 0 8
43931: PPUSH
43932: LD_INT 0
43934: PPUSH
43935: CALL 46000 0 3
// end ;
43939: GO 43893
43941: POP
43942: POP
// if birds then
43943: LD_VAR 0 1
43947: IFFALSE 44014
// for i = 1 to birds do
43949: LD_ADDR_VAR 0 11
43953: PUSH
43954: DOUBLE
43955: LD_INT 1
43957: DEC
43958: ST_TO_ADDR
43959: LD_VAR 0 1
43963: PUSH
43964: FOR_TO
43965: IFFALSE 44012
// begin hc_class := 18 ;
43967: LD_ADDR_OWVAR 28
43971: PUSH
43972: LD_INT 18
43974: ST_TO_ADDR
// hc_gallery =  ;
43975: LD_ADDR_OWVAR 33
43979: PUSH
43980: LD_STRING 
43982: ST_TO_ADDR
// animal := CreateHuman ;
43983: LD_ADDR_VAR 0 12
43987: PUSH
43988: CALL_OW 44
43992: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43993: LD_VAR 0 12
43997: PPUSH
43998: LD_VAR 0 8
44002: PPUSH
44003: LD_INT 0
44005: PPUSH
44006: CALL 46000 0 3
// end ;
44010: GO 43964
44012: POP
44013: POP
// if tigers then
44014: LD_VAR 0 2
44018: IFFALSE 44102
// for i = 1 to tigers do
44020: LD_ADDR_VAR 0 11
44024: PUSH
44025: DOUBLE
44026: LD_INT 1
44028: DEC
44029: ST_TO_ADDR
44030: LD_VAR 0 2
44034: PUSH
44035: FOR_TO
44036: IFFALSE 44100
// begin hc_class = class_tiger ;
44038: LD_ADDR_OWVAR 28
44042: PUSH
44043: LD_INT 14
44045: ST_TO_ADDR
// hc_gallery =  ;
44046: LD_ADDR_OWVAR 33
44050: PUSH
44051: LD_STRING 
44053: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44054: LD_ADDR_OWVAR 35
44058: PUSH
44059: LD_INT 7
44061: NEG
44062: PPUSH
44063: LD_INT 7
44065: PPUSH
44066: CALL_OW 12
44070: ST_TO_ADDR
// animal := CreateHuman ;
44071: LD_ADDR_VAR 0 12
44075: PUSH
44076: CALL_OW 44
44080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44081: LD_VAR 0 12
44085: PPUSH
44086: LD_VAR 0 8
44090: PPUSH
44091: LD_INT 0
44093: PPUSH
44094: CALL 46000 0 3
// end ;
44098: GO 44035
44100: POP
44101: POP
// if apemans then
44102: LD_VAR 0 3
44106: IFFALSE 44229
// for i = 1 to apemans do
44108: LD_ADDR_VAR 0 11
44112: PUSH
44113: DOUBLE
44114: LD_INT 1
44116: DEC
44117: ST_TO_ADDR
44118: LD_VAR 0 3
44122: PUSH
44123: FOR_TO
44124: IFFALSE 44227
// begin hc_class = class_apeman ;
44126: LD_ADDR_OWVAR 28
44130: PUSH
44131: LD_INT 12
44133: ST_TO_ADDR
// hc_gallery =  ;
44134: LD_ADDR_OWVAR 33
44138: PUSH
44139: LD_STRING 
44141: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44142: LD_ADDR_OWVAR 35
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PPUSH
44151: LD_INT 2
44153: PPUSH
44154: CALL_OW 12
44158: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44159: LD_ADDR_OWVAR 31
44163: PUSH
44164: LD_INT 1
44166: PPUSH
44167: LD_INT 3
44169: PPUSH
44170: CALL_OW 12
44174: PUSH
44175: LD_INT 1
44177: PPUSH
44178: LD_INT 3
44180: PPUSH
44181: CALL_OW 12
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// animal := CreateHuman ;
44198: LD_ADDR_VAR 0 12
44202: PUSH
44203: CALL_OW 44
44207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44208: LD_VAR 0 12
44212: PPUSH
44213: LD_VAR 0 8
44217: PPUSH
44218: LD_INT 0
44220: PPUSH
44221: CALL 46000 0 3
// end ;
44225: GO 44123
44227: POP
44228: POP
// if enchidnas then
44229: LD_VAR 0 4
44233: IFFALSE 44300
// for i = 1 to enchidnas do
44235: LD_ADDR_VAR 0 11
44239: PUSH
44240: DOUBLE
44241: LD_INT 1
44243: DEC
44244: ST_TO_ADDR
44245: LD_VAR 0 4
44249: PUSH
44250: FOR_TO
44251: IFFALSE 44298
// begin hc_class = 13 ;
44253: LD_ADDR_OWVAR 28
44257: PUSH
44258: LD_INT 13
44260: ST_TO_ADDR
// hc_gallery =  ;
44261: LD_ADDR_OWVAR 33
44265: PUSH
44266: LD_STRING 
44268: ST_TO_ADDR
// animal := CreateHuman ;
44269: LD_ADDR_VAR 0 12
44273: PUSH
44274: CALL_OW 44
44278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44279: LD_VAR 0 12
44283: PPUSH
44284: LD_VAR 0 8
44288: PPUSH
44289: LD_INT 0
44291: PPUSH
44292: CALL 46000 0 3
// end ;
44296: GO 44250
44298: POP
44299: POP
// if fishes then
44300: LD_VAR 0 7
44304: IFFALSE 44371
// for i = 1 to fishes do
44306: LD_ADDR_VAR 0 11
44310: PUSH
44311: DOUBLE
44312: LD_INT 1
44314: DEC
44315: ST_TO_ADDR
44316: LD_VAR 0 7
44320: PUSH
44321: FOR_TO
44322: IFFALSE 44369
// begin hc_class = 20 ;
44324: LD_ADDR_OWVAR 28
44328: PUSH
44329: LD_INT 20
44331: ST_TO_ADDR
// hc_gallery =  ;
44332: LD_ADDR_OWVAR 33
44336: PUSH
44337: LD_STRING 
44339: ST_TO_ADDR
// animal := CreateHuman ;
44340: LD_ADDR_VAR 0 12
44344: PUSH
44345: CALL_OW 44
44349: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44350: LD_VAR 0 12
44354: PPUSH
44355: LD_VAR 0 9
44359: PPUSH
44360: LD_INT 0
44362: PPUSH
44363: CALL 46000 0 3
// end ;
44367: GO 44321
44369: POP
44370: POP
// end ;
44371: LD_VAR 0 10
44375: RET
// export function WantHeal ( sci , unit ) ; begin
44376: LD_INT 0
44378: PPUSH
// if GetTaskList ( sci ) > 0 then
44379: LD_VAR 0 1
44383: PPUSH
44384: CALL_OW 437
44388: PUSH
44389: LD_INT 0
44391: GREATER
44392: IFFALSE 44462
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44394: LD_VAR 0 1
44398: PPUSH
44399: CALL_OW 437
44403: PUSH
44404: LD_INT 1
44406: ARRAY
44407: PUSH
44408: LD_INT 1
44410: ARRAY
44411: PUSH
44412: LD_STRING l
44414: EQUAL
44415: PUSH
44416: LD_VAR 0 1
44420: PPUSH
44421: CALL_OW 437
44425: PUSH
44426: LD_INT 1
44428: ARRAY
44429: PUSH
44430: LD_INT 4
44432: ARRAY
44433: PUSH
44434: LD_VAR 0 2
44438: EQUAL
44439: AND
44440: IFFALSE 44452
// result := true else
44442: LD_ADDR_VAR 0 3
44446: PUSH
44447: LD_INT 1
44449: ST_TO_ADDR
44450: GO 44460
// result := false ;
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_INT 0
44459: ST_TO_ADDR
// end else
44460: GO 44470
// result := false ;
44462: LD_ADDR_VAR 0 3
44466: PUSH
44467: LD_INT 0
44469: ST_TO_ADDR
// end ;
44470: LD_VAR 0 3
44474: RET
// export function HealTarget ( sci ) ; begin
44475: LD_INT 0
44477: PPUSH
// if not sci then
44478: LD_VAR 0 1
44482: NOT
44483: IFFALSE 44487
// exit ;
44485: GO 44552
// result := 0 ;
44487: LD_ADDR_VAR 0 2
44491: PUSH
44492: LD_INT 0
44494: ST_TO_ADDR
// if GetTaskList ( sci ) then
44495: LD_VAR 0 1
44499: PPUSH
44500: CALL_OW 437
44504: IFFALSE 44552
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44506: LD_VAR 0 1
44510: PPUSH
44511: CALL_OW 437
44515: PUSH
44516: LD_INT 1
44518: ARRAY
44519: PUSH
44520: LD_INT 1
44522: ARRAY
44523: PUSH
44524: LD_STRING l
44526: EQUAL
44527: IFFALSE 44552
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44529: LD_ADDR_VAR 0 2
44533: PUSH
44534: LD_VAR 0 1
44538: PPUSH
44539: CALL_OW 437
44543: PUSH
44544: LD_INT 1
44546: ARRAY
44547: PUSH
44548: LD_INT 4
44550: ARRAY
44551: ST_TO_ADDR
// end ;
44552: LD_VAR 0 2
44556: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44557: LD_INT 0
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
// if not base_units then
44563: LD_VAR 0 1
44567: NOT
44568: IFFALSE 44572
// exit ;
44570: GO 44659
// result := false ;
44572: LD_ADDR_VAR 0 2
44576: PUSH
44577: LD_INT 0
44579: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44580: LD_ADDR_VAR 0 5
44584: PUSH
44585: LD_VAR 0 1
44589: PPUSH
44590: LD_INT 21
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PPUSH
44600: CALL_OW 72
44604: ST_TO_ADDR
// if not tmp then
44605: LD_VAR 0 5
44609: NOT
44610: IFFALSE 44614
// exit ;
44612: GO 44659
// for i in tmp do
44614: LD_ADDR_VAR 0 3
44618: PUSH
44619: LD_VAR 0 5
44623: PUSH
44624: FOR_IN
44625: IFFALSE 44657
// begin result := EnemyInRange ( i , 22 ) ;
44627: LD_ADDR_VAR 0 2
44631: PUSH
44632: LD_VAR 0 3
44636: PPUSH
44637: LD_INT 22
44639: PPUSH
44640: CALL 42237 0 2
44644: ST_TO_ADDR
// if result then
44645: LD_VAR 0 2
44649: IFFALSE 44655
// exit ;
44651: POP
44652: POP
44653: GO 44659
// end ;
44655: GO 44624
44657: POP
44658: POP
// end ;
44659: LD_VAR 0 2
44663: RET
// export function FilterByTag ( units , tag ) ; begin
44664: LD_INT 0
44666: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44667: LD_ADDR_VAR 0 3
44671: PUSH
44672: LD_VAR 0 1
44676: PPUSH
44677: LD_INT 120
44679: PUSH
44680: LD_VAR 0 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PPUSH
44689: CALL_OW 72
44693: ST_TO_ADDR
// end ;
44694: LD_VAR 0 3
44698: RET
// export function IsDriver ( un ) ; begin
44699: LD_INT 0
44701: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44702: LD_ADDR_VAR 0 2
44706: PUSH
44707: LD_VAR 0 1
44711: PUSH
44712: LD_INT 55
44714: PUSH
44715: EMPTY
44716: LIST
44717: PPUSH
44718: CALL_OW 69
44722: IN
44723: ST_TO_ADDR
// end ;
44724: LD_VAR 0 2
44728: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44729: LD_INT 0
44731: PPUSH
44732: PPUSH
// list := [ ] ;
44733: LD_ADDR_VAR 0 5
44737: PUSH
44738: EMPTY
44739: ST_TO_ADDR
// case d of 0 :
44740: LD_VAR 0 3
44744: PUSH
44745: LD_INT 0
44747: DOUBLE
44748: EQUAL
44749: IFTRUE 44753
44751: GO 44886
44753: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44754: LD_ADDR_VAR 0 5
44758: PUSH
44759: LD_VAR 0 1
44763: PUSH
44764: LD_INT 4
44766: MINUS
44767: PUSH
44768: LD_VAR 0 2
44772: PUSH
44773: LD_INT 4
44775: MINUS
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: PUSH
44785: LD_VAR 0 1
44789: PUSH
44790: LD_INT 3
44792: MINUS
44793: PUSH
44794: LD_VAR 0 2
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: PUSH
44807: LD_VAR 0 1
44811: PUSH
44812: LD_INT 4
44814: PLUS
44815: PUSH
44816: LD_VAR 0 2
44820: PUSH
44821: LD_INT 4
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: PUSH
44829: LD_VAR 0 1
44833: PUSH
44834: LD_INT 3
44836: PLUS
44837: PUSH
44838: LD_VAR 0 2
44842: PUSH
44843: LD_INT 3
44845: PLUS
44846: PUSH
44847: LD_INT 5
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: PUSH
44855: LD_VAR 0 1
44859: PUSH
44860: LD_VAR 0 2
44864: PUSH
44865: LD_INT 4
44867: PLUS
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
// end ; 1 :
44884: GO 45584
44886: LD_INT 1
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44894
44892: GO 45027
44894: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44895: LD_ADDR_VAR 0 5
44899: PUSH
44900: LD_VAR 0 1
44904: PUSH
44905: LD_VAR 0 2
44909: PUSH
44910: LD_INT 4
44912: MINUS
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: PUSH
44922: LD_VAR 0 1
44926: PUSH
44927: LD_INT 3
44929: MINUS
44930: PUSH
44931: LD_VAR 0 2
44935: PUSH
44936: LD_INT 3
44938: MINUS
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: PUSH
44948: LD_VAR 0 1
44952: PUSH
44953: LD_INT 4
44955: MINUS
44956: PUSH
44957: LD_VAR 0 2
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: PUSH
44970: LD_VAR 0 1
44974: PUSH
44975: LD_VAR 0 2
44979: PUSH
44980: LD_INT 3
44982: PLUS
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: PUSH
44992: LD_VAR 0 1
44996: PUSH
44997: LD_INT 4
44999: PLUS
45000: PUSH
45001: LD_VAR 0 2
45005: PUSH
45006: LD_INT 4
45008: PLUS
45009: PUSH
45010: LD_INT 5
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// end ; 2 :
45025: GO 45584
45027: LD_INT 2
45029: DOUBLE
45030: EQUAL
45031: IFTRUE 45035
45033: GO 45164
45035: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45036: LD_ADDR_VAR 0 5
45040: PUSH
45041: LD_VAR 0 1
45045: PUSH
45046: LD_VAR 0 2
45050: PUSH
45051: LD_INT 3
45053: MINUS
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: PUSH
45063: LD_VAR 0 1
45067: PUSH
45068: LD_INT 4
45070: PLUS
45071: PUSH
45072: LD_VAR 0 2
45076: PUSH
45077: LD_INT 4
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: PUSH
45085: LD_VAR 0 1
45089: PUSH
45090: LD_VAR 0 2
45094: PUSH
45095: LD_INT 4
45097: PLUS
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: PUSH
45107: LD_VAR 0 1
45111: PUSH
45112: LD_INT 3
45114: MINUS
45115: PUSH
45116: LD_VAR 0 2
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: PUSH
45129: LD_VAR 0 1
45133: PUSH
45134: LD_INT 4
45136: MINUS
45137: PUSH
45138: LD_VAR 0 2
45142: PUSH
45143: LD_INT 4
45145: MINUS
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: ST_TO_ADDR
// end ; 3 :
45162: GO 45584
45164: LD_INT 3
45166: DOUBLE
45167: EQUAL
45168: IFTRUE 45172
45170: GO 45305
45172: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45173: LD_ADDR_VAR 0 5
45177: PUSH
45178: LD_VAR 0 1
45182: PUSH
45183: LD_INT 3
45185: PLUS
45186: PUSH
45187: LD_VAR 0 2
45191: PUSH
45192: LD_INT 4
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: PUSH
45200: LD_VAR 0 1
45204: PUSH
45205: LD_INT 4
45207: PLUS
45208: PUSH
45209: LD_VAR 0 2
45213: PUSH
45214: LD_INT 4
45216: PLUS
45217: PUSH
45218: LD_INT 5
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: PUSH
45226: LD_VAR 0 1
45230: PUSH
45231: LD_INT 4
45233: MINUS
45234: PUSH
45235: LD_VAR 0 2
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: PUSH
45248: LD_VAR 0 1
45252: PUSH
45253: LD_VAR 0 2
45257: PUSH
45258: LD_INT 4
45260: MINUS
45261: PUSH
45262: LD_INT 3
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: PUSH
45270: LD_VAR 0 1
45274: PUSH
45275: LD_INT 3
45277: MINUS
45278: PUSH
45279: LD_VAR 0 2
45283: PUSH
45284: LD_INT 3
45286: MINUS
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// end ; 4 :
45303: GO 45584
45305: LD_INT 4
45307: DOUBLE
45308: EQUAL
45309: IFTRUE 45313
45311: GO 45446
45313: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45314: LD_ADDR_VAR 0 5
45318: PUSH
45319: LD_VAR 0 1
45323: PUSH
45324: LD_VAR 0 2
45328: PUSH
45329: LD_INT 4
45331: PLUS
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: PUSH
45341: LD_VAR 0 1
45345: PUSH
45346: LD_INT 3
45348: PLUS
45349: PUSH
45350: LD_VAR 0 2
45354: PUSH
45355: LD_INT 3
45357: PLUS
45358: PUSH
45359: LD_INT 5
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: LIST
45366: PUSH
45367: LD_VAR 0 1
45371: PUSH
45372: LD_INT 4
45374: PLUS
45375: PUSH
45376: LD_VAR 0 2
45380: PUSH
45381: LD_INT 4
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: PUSH
45389: LD_VAR 0 1
45393: PUSH
45394: LD_VAR 0 2
45398: PUSH
45399: LD_INT 3
45401: MINUS
45402: PUSH
45403: LD_INT 3
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: PUSH
45411: LD_VAR 0 1
45415: PUSH
45416: LD_INT 4
45418: MINUS
45419: PUSH
45420: LD_VAR 0 2
45424: PUSH
45425: LD_INT 4
45427: MINUS
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// end ; 5 :
45444: GO 45584
45446: LD_INT 5
45448: DOUBLE
45449: EQUAL
45450: IFTRUE 45454
45452: GO 45583
45454: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45455: LD_ADDR_VAR 0 5
45459: PUSH
45460: LD_VAR 0 1
45464: PUSH
45465: LD_INT 4
45467: MINUS
45468: PUSH
45469: LD_VAR 0 2
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: LIST
45481: PUSH
45482: LD_VAR 0 1
45486: PUSH
45487: LD_VAR 0 2
45491: PUSH
45492: LD_INT 4
45494: MINUS
45495: PUSH
45496: LD_INT 3
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: PUSH
45504: LD_VAR 0 1
45508: PUSH
45509: LD_INT 4
45511: PLUS
45512: PUSH
45513: LD_VAR 0 2
45517: PUSH
45518: LD_INT 4
45520: PLUS
45521: PUSH
45522: LD_INT 5
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: PUSH
45530: LD_VAR 0 1
45534: PUSH
45535: LD_INT 3
45537: PLUS
45538: PUSH
45539: LD_VAR 0 2
45543: PUSH
45544: LD_INT 4
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: LIST
45551: PUSH
45552: LD_VAR 0 1
45556: PUSH
45557: LD_VAR 0 2
45561: PUSH
45562: LD_INT 3
45564: PLUS
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// end ; end ;
45581: GO 45584
45583: POP
// result := list ;
45584: LD_ADDR_VAR 0 4
45588: PUSH
45589: LD_VAR 0 5
45593: ST_TO_ADDR
// end ;
45594: LD_VAR 0 4
45598: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45599: LD_INT 0
45601: PPUSH
45602: PPUSH
45603: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45604: LD_VAR 0 1
45608: NOT
45609: PUSH
45610: LD_VAR 0 2
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: LD_INT 3
45623: PUSH
45624: LD_INT 4
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: IN
45633: NOT
45634: OR
45635: IFFALSE 45639
// exit ;
45637: GO 45722
// tmp := [ ] ;
45639: LD_ADDR_VAR 0 5
45643: PUSH
45644: EMPTY
45645: ST_TO_ADDR
// for i in units do
45646: LD_ADDR_VAR 0 4
45650: PUSH
45651: LD_VAR 0 1
45655: PUSH
45656: FOR_IN
45657: IFFALSE 45691
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45659: LD_ADDR_VAR 0 5
45663: PUSH
45664: LD_VAR 0 5
45668: PPUSH
45669: LD_VAR 0 4
45673: PPUSH
45674: LD_VAR 0 2
45678: PPUSH
45679: CALL_OW 259
45683: PPUSH
45684: CALL 47095 0 2
45688: ST_TO_ADDR
45689: GO 45656
45691: POP
45692: POP
// if not tmp then
45693: LD_VAR 0 5
45697: NOT
45698: IFFALSE 45702
// exit ;
45700: GO 45722
// result := SortListByListDesc ( units , tmp ) ;
45702: LD_ADDR_VAR 0 3
45706: PUSH
45707: LD_VAR 0 1
45711: PPUSH
45712: LD_VAR 0 5
45716: PPUSH
45717: CALL_OW 77
45721: ST_TO_ADDR
// end ;
45722: LD_VAR 0 3
45726: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45727: LD_INT 0
45729: PPUSH
45730: PPUSH
45731: PPUSH
// result := false ;
45732: LD_ADDR_VAR 0 3
45736: PUSH
45737: LD_INT 0
45739: ST_TO_ADDR
// if not building then
45740: LD_VAR 0 2
45744: NOT
45745: IFFALSE 45749
// exit ;
45747: GO 45887
// x := GetX ( building ) ;
45749: LD_ADDR_VAR 0 4
45753: PUSH
45754: LD_VAR 0 2
45758: PPUSH
45759: CALL_OW 250
45763: ST_TO_ADDR
// y := GetY ( building ) ;
45764: LD_ADDR_VAR 0 5
45768: PUSH
45769: LD_VAR 0 2
45773: PPUSH
45774: CALL_OW 251
45778: ST_TO_ADDR
// if not x or not y then
45779: LD_VAR 0 4
45783: NOT
45784: PUSH
45785: LD_VAR 0 5
45789: NOT
45790: OR
45791: IFFALSE 45795
// exit ;
45793: GO 45887
// if GetTaskList ( unit ) then
45795: LD_VAR 0 1
45799: PPUSH
45800: CALL_OW 437
45804: IFFALSE 45887
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45806: LD_STRING e
45808: PUSH
45809: LD_VAR 0 1
45813: PPUSH
45814: CALL_OW 437
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PUSH
45823: LD_INT 1
45825: ARRAY
45826: EQUAL
45827: PUSH
45828: LD_VAR 0 4
45832: PUSH
45833: LD_VAR 0 1
45837: PPUSH
45838: CALL_OW 437
45842: PUSH
45843: LD_INT 1
45845: ARRAY
45846: PUSH
45847: LD_INT 2
45849: ARRAY
45850: EQUAL
45851: AND
45852: PUSH
45853: LD_VAR 0 5
45857: PUSH
45858: LD_VAR 0 1
45862: PPUSH
45863: CALL_OW 437
45867: PUSH
45868: LD_INT 1
45870: ARRAY
45871: PUSH
45872: LD_INT 3
45874: ARRAY
45875: EQUAL
45876: AND
45877: IFFALSE 45887
// result := true end ;
45879: LD_ADDR_VAR 0 3
45883: PUSH
45884: LD_INT 1
45886: ST_TO_ADDR
// end ;
45887: LD_VAR 0 3
45891: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45892: LD_INT 0
45894: PPUSH
// result := false ;
45895: LD_ADDR_VAR 0 4
45899: PUSH
45900: LD_INT 0
45902: ST_TO_ADDR
// if GetTaskList ( unit ) then
45903: LD_VAR 0 1
45907: PPUSH
45908: CALL_OW 437
45912: IFFALSE 45995
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45914: LD_STRING M
45916: PUSH
45917: LD_VAR 0 1
45921: PPUSH
45922: CALL_OW 437
45926: PUSH
45927: LD_INT 1
45929: ARRAY
45930: PUSH
45931: LD_INT 1
45933: ARRAY
45934: EQUAL
45935: PUSH
45936: LD_VAR 0 2
45940: PUSH
45941: LD_VAR 0 1
45945: PPUSH
45946: CALL_OW 437
45950: PUSH
45951: LD_INT 1
45953: ARRAY
45954: PUSH
45955: LD_INT 2
45957: ARRAY
45958: EQUAL
45959: AND
45960: PUSH
45961: LD_VAR 0 3
45965: PUSH
45966: LD_VAR 0 1
45970: PPUSH
45971: CALL_OW 437
45975: PUSH
45976: LD_INT 1
45978: ARRAY
45979: PUSH
45980: LD_INT 3
45982: ARRAY
45983: EQUAL
45984: AND
45985: IFFALSE 45995
// result := true ;
45987: LD_ADDR_VAR 0 4
45991: PUSH
45992: LD_INT 1
45994: ST_TO_ADDR
// end ; end ;
45995: LD_VAR 0 4
45999: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46000: LD_INT 0
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
// if not unit or not area then
46006: LD_VAR 0 1
46010: NOT
46011: PUSH
46012: LD_VAR 0 2
46016: NOT
46017: OR
46018: IFFALSE 46022
// exit ;
46020: GO 46198
// tmp := AreaToList ( area , i ) ;
46022: LD_ADDR_VAR 0 6
46026: PUSH
46027: LD_VAR 0 2
46031: PPUSH
46032: LD_VAR 0 5
46036: PPUSH
46037: CALL_OW 517
46041: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46042: LD_ADDR_VAR 0 5
46046: PUSH
46047: DOUBLE
46048: LD_INT 1
46050: DEC
46051: ST_TO_ADDR
46052: LD_VAR 0 6
46056: PUSH
46057: LD_INT 1
46059: ARRAY
46060: PUSH
46061: FOR_TO
46062: IFFALSE 46196
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46064: LD_ADDR_VAR 0 7
46068: PUSH
46069: LD_VAR 0 6
46073: PUSH
46074: LD_INT 1
46076: ARRAY
46077: PUSH
46078: LD_VAR 0 5
46082: ARRAY
46083: PUSH
46084: LD_VAR 0 6
46088: PUSH
46089: LD_INT 2
46091: ARRAY
46092: PUSH
46093: LD_VAR 0 5
46097: ARRAY
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46103: LD_INT 92
46105: PUSH
46106: LD_VAR 0 7
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: PUSH
46115: LD_VAR 0 7
46119: PUSH
46120: LD_INT 2
46122: ARRAY
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: PPUSH
46133: CALL_OW 69
46137: PUSH
46138: LD_INT 0
46140: EQUAL
46141: IFFALSE 46194
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46143: LD_VAR 0 1
46147: PPUSH
46148: LD_VAR 0 7
46152: PUSH
46153: LD_INT 1
46155: ARRAY
46156: PPUSH
46157: LD_VAR 0 7
46161: PUSH
46162: LD_INT 2
46164: ARRAY
46165: PPUSH
46166: LD_VAR 0 3
46170: PPUSH
46171: CALL_OW 48
// result := IsPlaced ( unit ) ;
46175: LD_ADDR_VAR 0 4
46179: PUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: CALL_OW 305
46189: ST_TO_ADDR
// exit ;
46190: POP
46191: POP
46192: GO 46198
// end ; end ;
46194: GO 46061
46196: POP
46197: POP
// end ;
46198: LD_VAR 0 4
46202: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46203: LD_INT 0
46205: PPUSH
46206: PPUSH
46207: PPUSH
// if not side or side > 8 then
46208: LD_VAR 0 1
46212: NOT
46213: PUSH
46214: LD_VAR 0 1
46218: PUSH
46219: LD_INT 8
46221: GREATER
46222: OR
46223: IFFALSE 46227
// exit ;
46225: GO 46414
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46227: LD_ADDR_VAR 0 4
46231: PUSH
46232: LD_INT 22
46234: PUSH
46235: LD_VAR 0 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 21
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PPUSH
46258: CALL_OW 69
46262: ST_TO_ADDR
// if not tmp then
46263: LD_VAR 0 4
46267: NOT
46268: IFFALSE 46272
// exit ;
46270: GO 46414
// enable_addtolog := true ;
46272: LD_ADDR_OWVAR 81
46276: PUSH
46277: LD_INT 1
46279: ST_TO_ADDR
// AddToLog ( [ ) ;
46280: LD_STRING [
46282: PPUSH
46283: CALL_OW 561
// for i in tmp do
46287: LD_ADDR_VAR 0 3
46291: PUSH
46292: LD_VAR 0 4
46296: PUSH
46297: FOR_IN
46298: IFFALSE 46405
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46300: LD_STRING [
46302: PUSH
46303: LD_VAR 0 3
46307: PPUSH
46308: CALL_OW 266
46312: STR
46313: PUSH
46314: LD_STRING , 
46316: STR
46317: PUSH
46318: LD_VAR 0 3
46322: PPUSH
46323: CALL_OW 250
46327: STR
46328: PUSH
46329: LD_STRING , 
46331: STR
46332: PUSH
46333: LD_VAR 0 3
46337: PPUSH
46338: CALL_OW 251
46342: STR
46343: PUSH
46344: LD_STRING , 
46346: STR
46347: PUSH
46348: LD_VAR 0 3
46352: PPUSH
46353: CALL_OW 254
46357: STR
46358: PUSH
46359: LD_STRING , 
46361: STR
46362: PUSH
46363: LD_VAR 0 3
46367: PPUSH
46368: LD_INT 1
46370: PPUSH
46371: CALL_OW 268
46375: STR
46376: PUSH
46377: LD_STRING , 
46379: STR
46380: PUSH
46381: LD_VAR 0 3
46385: PPUSH
46386: LD_INT 2
46388: PPUSH
46389: CALL_OW 268
46393: STR
46394: PUSH
46395: LD_STRING ],
46397: STR
46398: PPUSH
46399: CALL_OW 561
// end ;
46403: GO 46297
46405: POP
46406: POP
// AddToLog ( ]; ) ;
46407: LD_STRING ];
46409: PPUSH
46410: CALL_OW 561
// end ;
46414: LD_VAR 0 2
46418: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46419: LD_INT 0
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
// if not area or not rate or not max then
46426: LD_VAR 0 1
46430: NOT
46431: PUSH
46432: LD_VAR 0 2
46436: NOT
46437: OR
46438: PUSH
46439: LD_VAR 0 4
46443: NOT
46444: OR
46445: IFFALSE 46449
// exit ;
46447: GO 46638
// while 1 do
46449: LD_INT 1
46451: IFFALSE 46638
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46453: LD_ADDR_VAR 0 9
46457: PUSH
46458: LD_VAR 0 1
46462: PPUSH
46463: LD_INT 1
46465: PPUSH
46466: CALL_OW 287
46470: PUSH
46471: LD_INT 10
46473: MUL
46474: ST_TO_ADDR
// r := rate / 10 ;
46475: LD_ADDR_VAR 0 7
46479: PUSH
46480: LD_VAR 0 2
46484: PUSH
46485: LD_INT 10
46487: DIVREAL
46488: ST_TO_ADDR
// time := 1 1$00 ;
46489: LD_ADDR_VAR 0 8
46493: PUSH
46494: LD_INT 2100
46496: ST_TO_ADDR
// if amount < min then
46497: LD_VAR 0 9
46501: PUSH
46502: LD_VAR 0 3
46506: LESS
46507: IFFALSE 46525
// r := r * 2 else
46509: LD_ADDR_VAR 0 7
46513: PUSH
46514: LD_VAR 0 7
46518: PUSH
46519: LD_INT 2
46521: MUL
46522: ST_TO_ADDR
46523: GO 46551
// if amount > max then
46525: LD_VAR 0 9
46529: PUSH
46530: LD_VAR 0 4
46534: GREATER
46535: IFFALSE 46551
// r := r / 2 ;
46537: LD_ADDR_VAR 0 7
46541: PUSH
46542: LD_VAR 0 7
46546: PUSH
46547: LD_INT 2
46549: DIVREAL
46550: ST_TO_ADDR
// time := time / r ;
46551: LD_ADDR_VAR 0 8
46555: PUSH
46556: LD_VAR 0 8
46560: PUSH
46561: LD_VAR 0 7
46565: DIVREAL
46566: ST_TO_ADDR
// if time < 0 then
46567: LD_VAR 0 8
46571: PUSH
46572: LD_INT 0
46574: LESS
46575: IFFALSE 46592
// time := time * - 1 ;
46577: LD_ADDR_VAR 0 8
46581: PUSH
46582: LD_VAR 0 8
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: MUL
46591: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46592: LD_VAR 0 8
46596: PUSH
46597: LD_INT 35
46599: PPUSH
46600: LD_INT 875
46602: PPUSH
46603: CALL_OW 12
46607: PLUS
46608: PPUSH
46609: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46613: LD_INT 1
46615: PPUSH
46616: LD_INT 5
46618: PPUSH
46619: CALL_OW 12
46623: PPUSH
46624: LD_VAR 0 1
46628: PPUSH
46629: LD_INT 1
46631: PPUSH
46632: CALL_OW 55
// end ;
46636: GO 46449
// end ;
46638: LD_VAR 0 5
46642: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46643: LD_INT 0
46645: PPUSH
46646: PPUSH
46647: PPUSH
46648: PPUSH
46649: PPUSH
46650: PPUSH
46651: PPUSH
46652: PPUSH
// if not turrets or not factories then
46653: LD_VAR 0 1
46657: NOT
46658: PUSH
46659: LD_VAR 0 2
46663: NOT
46664: OR
46665: IFFALSE 46669
// exit ;
46667: GO 46976
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46669: LD_ADDR_VAR 0 10
46673: PUSH
46674: LD_INT 5
46676: PUSH
46677: LD_INT 6
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: LD_INT 5
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 24
46711: PUSH
46712: LD_INT 25
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 23
46721: PUSH
46722: LD_INT 27
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 42
46735: PUSH
46736: LD_INT 43
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 44
46745: PUSH
46746: LD_INT 46
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 45
46755: PUSH
46756: LD_INT 47
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// result := [ ] ;
46773: LD_ADDR_VAR 0 3
46777: PUSH
46778: EMPTY
46779: ST_TO_ADDR
// for i in turrets do
46780: LD_ADDR_VAR 0 4
46784: PUSH
46785: LD_VAR 0 1
46789: PUSH
46790: FOR_IN
46791: IFFALSE 46974
// begin nat := GetNation ( i ) ;
46793: LD_ADDR_VAR 0 7
46797: PUSH
46798: LD_VAR 0 4
46802: PPUSH
46803: CALL_OW 248
46807: ST_TO_ADDR
// weapon := 0 ;
46808: LD_ADDR_VAR 0 8
46812: PUSH
46813: LD_INT 0
46815: ST_TO_ADDR
// if not nat then
46816: LD_VAR 0 7
46820: NOT
46821: IFFALSE 46825
// continue ;
46823: GO 46790
// for j in list [ nat ] do
46825: LD_ADDR_VAR 0 5
46829: PUSH
46830: LD_VAR 0 10
46834: PUSH
46835: LD_VAR 0 7
46839: ARRAY
46840: PUSH
46841: FOR_IN
46842: IFFALSE 46883
// if GetBWeapon ( i ) = j [ 1 ] then
46844: LD_VAR 0 4
46848: PPUSH
46849: CALL_OW 269
46853: PUSH
46854: LD_VAR 0 5
46858: PUSH
46859: LD_INT 1
46861: ARRAY
46862: EQUAL
46863: IFFALSE 46881
// begin weapon := j [ 2 ] ;
46865: LD_ADDR_VAR 0 8
46869: PUSH
46870: LD_VAR 0 5
46874: PUSH
46875: LD_INT 2
46877: ARRAY
46878: ST_TO_ADDR
// break ;
46879: GO 46883
// end ;
46881: GO 46841
46883: POP
46884: POP
// if not weapon then
46885: LD_VAR 0 8
46889: NOT
46890: IFFALSE 46894
// continue ;
46892: GO 46790
// for k in factories do
46894: LD_ADDR_VAR 0 6
46898: PUSH
46899: LD_VAR 0 2
46903: PUSH
46904: FOR_IN
46905: IFFALSE 46970
// begin weapons := AvailableWeaponList ( k ) ;
46907: LD_ADDR_VAR 0 9
46911: PUSH
46912: LD_VAR 0 6
46916: PPUSH
46917: CALL_OW 478
46921: ST_TO_ADDR
// if not weapons then
46922: LD_VAR 0 9
46926: NOT
46927: IFFALSE 46931
// continue ;
46929: GO 46904
// if weapon in weapons then
46931: LD_VAR 0 8
46935: PUSH
46936: LD_VAR 0 9
46940: IN
46941: IFFALSE 46968
// begin result := [ i , weapon ] ;
46943: LD_ADDR_VAR 0 3
46947: PUSH
46948: LD_VAR 0 4
46952: PUSH
46953: LD_VAR 0 8
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: ST_TO_ADDR
// exit ;
46962: POP
46963: POP
46964: POP
46965: POP
46966: GO 46976
// end ; end ;
46968: GO 46904
46970: POP
46971: POP
// end ;
46972: GO 46790
46974: POP
46975: POP
// end ;
46976: LD_VAR 0 3
46980: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46981: LD_INT 0
46983: PPUSH
// if not side or side > 8 then
46984: LD_VAR 0 3
46988: NOT
46989: PUSH
46990: LD_VAR 0 3
46994: PUSH
46995: LD_INT 8
46997: GREATER
46998: OR
46999: IFFALSE 47003
// exit ;
47001: GO 47062
// if not range then
47003: LD_VAR 0 4
47007: NOT
47008: IFFALSE 47019
// range := - 12 ;
47010: LD_ADDR_VAR 0 4
47014: PUSH
47015: LD_INT 12
47017: NEG
47018: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47019: LD_VAR 0 1
47023: PPUSH
47024: LD_VAR 0 2
47028: PPUSH
47029: LD_VAR 0 3
47033: PPUSH
47034: LD_VAR 0 4
47038: PPUSH
47039: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47043: LD_VAR 0 1
47047: PPUSH
47048: LD_VAR 0 2
47052: PPUSH
47053: LD_VAR 0 3
47057: PPUSH
47058: CALL_OW 331
// end ;
47062: LD_VAR 0 5
47066: RET
// export function Video ( mode ) ; begin
47067: LD_INT 0
47069: PPUSH
// ingame_video = mode ;
47070: LD_ADDR_OWVAR 52
47074: PUSH
47075: LD_VAR 0 1
47079: ST_TO_ADDR
// interface_hidden = mode ;
47080: LD_ADDR_OWVAR 54
47084: PUSH
47085: LD_VAR 0 1
47089: ST_TO_ADDR
// end ;
47090: LD_VAR 0 2
47094: RET
// export function Join ( array , element ) ; begin
47095: LD_INT 0
47097: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47098: LD_ADDR_VAR 0 3
47102: PUSH
47103: LD_VAR 0 1
47107: PPUSH
47108: LD_VAR 0 1
47112: PUSH
47113: LD_INT 1
47115: PLUS
47116: PPUSH
47117: LD_VAR 0 2
47121: PPUSH
47122: CALL_OW 1
47126: ST_TO_ADDR
// end ;
47127: LD_VAR 0 3
47131: RET
// export function JoinUnion ( array , element ) ; begin
47132: LD_INT 0
47134: PPUSH
// result := array union element ;
47135: LD_ADDR_VAR 0 3
47139: PUSH
47140: LD_VAR 0 1
47144: PUSH
47145: LD_VAR 0 2
47149: UNION
47150: ST_TO_ADDR
// end ;
47151: LD_VAR 0 3
47155: RET
// export function GetBehemoths ( side ) ; begin
47156: LD_INT 0
47158: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47159: LD_ADDR_VAR 0 2
47163: PUSH
47164: LD_INT 22
47166: PUSH
47167: LD_VAR 0 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 31
47178: PUSH
47179: LD_INT 25
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PPUSH
47190: CALL_OW 69
47194: ST_TO_ADDR
// end ;
47195: LD_VAR 0 2
47199: RET
// export function Shuffle ( array ) ; var i , index ; begin
47200: LD_INT 0
47202: PPUSH
47203: PPUSH
47204: PPUSH
// result := [ ] ;
47205: LD_ADDR_VAR 0 2
47209: PUSH
47210: EMPTY
47211: ST_TO_ADDR
// if not array then
47212: LD_VAR 0 1
47216: NOT
47217: IFFALSE 47221
// exit ;
47219: GO 47320
// Randomize ;
47221: CALL_OW 10
// for i = array downto 1 do
47225: LD_ADDR_VAR 0 3
47229: PUSH
47230: DOUBLE
47231: LD_VAR 0 1
47235: INC
47236: ST_TO_ADDR
47237: LD_INT 1
47239: PUSH
47240: FOR_DOWNTO
47241: IFFALSE 47318
// begin index := rand ( 1 , array ) ;
47243: LD_ADDR_VAR 0 4
47247: PUSH
47248: LD_INT 1
47250: PPUSH
47251: LD_VAR 0 1
47255: PPUSH
47256: CALL_OW 12
47260: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47261: LD_ADDR_VAR 0 2
47265: PUSH
47266: LD_VAR 0 2
47270: PPUSH
47271: LD_VAR 0 2
47275: PUSH
47276: LD_INT 1
47278: PLUS
47279: PPUSH
47280: LD_VAR 0 1
47284: PUSH
47285: LD_VAR 0 4
47289: ARRAY
47290: PPUSH
47291: CALL_OW 2
47295: ST_TO_ADDR
// array := Delete ( array , index ) ;
47296: LD_ADDR_VAR 0 1
47300: PUSH
47301: LD_VAR 0 1
47305: PPUSH
47306: LD_VAR 0 4
47310: PPUSH
47311: CALL_OW 3
47315: ST_TO_ADDR
// end ;
47316: GO 47240
47318: POP
47319: POP
// end ;
47320: LD_VAR 0 2
47324: RET
// export function GetBaseMaterials ( base ) ; begin
47325: LD_INT 0
47327: PPUSH
// result := [ 0 , 0 , 0 ] ;
47328: LD_ADDR_VAR 0 2
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: ST_TO_ADDR
// if not base then
47347: LD_VAR 0 1
47351: NOT
47352: IFFALSE 47356
// exit ;
47354: GO 47405
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47356: LD_ADDR_VAR 0 2
47360: PUSH
47361: LD_VAR 0 1
47365: PPUSH
47366: LD_INT 1
47368: PPUSH
47369: CALL_OW 275
47373: PUSH
47374: LD_VAR 0 1
47378: PPUSH
47379: LD_INT 2
47381: PPUSH
47382: CALL_OW 275
47386: PUSH
47387: LD_VAR 0 1
47391: PPUSH
47392: LD_INT 3
47394: PPUSH
47395: CALL_OW 275
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// end ;
47405: LD_VAR 0 2
47409: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47410: LD_INT 0
47412: PPUSH
47413: PPUSH
// result := array ;
47414: LD_ADDR_VAR 0 3
47418: PUSH
47419: LD_VAR 0 1
47423: ST_TO_ADDR
// if size >= result then
47424: LD_VAR 0 2
47428: PUSH
47429: LD_VAR 0 3
47433: GREATEREQUAL
47434: IFFALSE 47438
// exit ;
47436: GO 47488
// if size then
47438: LD_VAR 0 2
47442: IFFALSE 47488
// for i := array downto size do
47444: LD_ADDR_VAR 0 4
47448: PUSH
47449: DOUBLE
47450: LD_VAR 0 1
47454: INC
47455: ST_TO_ADDR
47456: LD_VAR 0 2
47460: PUSH
47461: FOR_DOWNTO
47462: IFFALSE 47486
// result := Delete ( result , result ) ;
47464: LD_ADDR_VAR 0 3
47468: PUSH
47469: LD_VAR 0 3
47473: PPUSH
47474: LD_VAR 0 3
47478: PPUSH
47479: CALL_OW 3
47483: ST_TO_ADDR
47484: GO 47461
47486: POP
47487: POP
// end ;
47488: LD_VAR 0 3
47492: RET
// export function ComExit ( unit ) ; var tmp ; begin
47493: LD_INT 0
47495: PPUSH
47496: PPUSH
// if not IsInUnit ( unit ) then
47497: LD_VAR 0 1
47501: PPUSH
47502: CALL_OW 310
47506: NOT
47507: IFFALSE 47511
// exit ;
47509: GO 47571
// tmp := IsInUnit ( unit ) ;
47511: LD_ADDR_VAR 0 3
47515: PUSH
47516: LD_VAR 0 1
47520: PPUSH
47521: CALL_OW 310
47525: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47526: LD_VAR 0 3
47530: PPUSH
47531: CALL_OW 247
47535: PUSH
47536: LD_INT 2
47538: EQUAL
47539: IFFALSE 47552
// ComExitVehicle ( unit ) else
47541: LD_VAR 0 1
47545: PPUSH
47546: CALL_OW 121
47550: GO 47561
// ComExitBuilding ( unit ) ;
47552: LD_VAR 0 1
47556: PPUSH
47557: CALL_OW 122
// result := tmp ;
47561: LD_ADDR_VAR 0 2
47565: PUSH
47566: LD_VAR 0 3
47570: ST_TO_ADDR
// end ;
47571: LD_VAR 0 2
47575: RET
// export function ComExitAll ( units ) ; var i ; begin
47576: LD_INT 0
47578: PPUSH
47579: PPUSH
// if not units then
47580: LD_VAR 0 1
47584: NOT
47585: IFFALSE 47589
// exit ;
47587: GO 47615
// for i in units do
47589: LD_ADDR_VAR 0 3
47593: PUSH
47594: LD_VAR 0 1
47598: PUSH
47599: FOR_IN
47600: IFFALSE 47613
// ComExit ( i ) ;
47602: LD_VAR 0 3
47606: PPUSH
47607: CALL 47493 0 1
47611: GO 47599
47613: POP
47614: POP
// end ;
47615: LD_VAR 0 2
47619: RET
// export function ResetHc ; begin
47620: LD_INT 0
47622: PPUSH
// InitHc ;
47623: CALL_OW 19
// hc_importance := 0 ;
47627: LD_ADDR_OWVAR 32
47631: PUSH
47632: LD_INT 0
47634: ST_TO_ADDR
// end ;
47635: LD_VAR 0 1
47639: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47640: LD_INT 0
47642: PPUSH
47643: PPUSH
47644: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47645: LD_ADDR_VAR 0 6
47649: PUSH
47650: LD_VAR 0 1
47654: PUSH
47655: LD_VAR 0 3
47659: PLUS
47660: PUSH
47661: LD_INT 2
47663: DIV
47664: ST_TO_ADDR
// if _x < 0 then
47665: LD_VAR 0 6
47669: PUSH
47670: LD_INT 0
47672: LESS
47673: IFFALSE 47690
// _x := _x * - 1 ;
47675: LD_ADDR_VAR 0 6
47679: PUSH
47680: LD_VAR 0 6
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: MUL
47689: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47690: LD_ADDR_VAR 0 7
47694: PUSH
47695: LD_VAR 0 2
47699: PUSH
47700: LD_VAR 0 4
47704: PLUS
47705: PUSH
47706: LD_INT 2
47708: DIV
47709: ST_TO_ADDR
// if _y < 0 then
47710: LD_VAR 0 7
47714: PUSH
47715: LD_INT 0
47717: LESS
47718: IFFALSE 47735
// _y := _y * - 1 ;
47720: LD_ADDR_VAR 0 7
47724: PUSH
47725: LD_VAR 0 7
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: MUL
47734: ST_TO_ADDR
// result := [ _x , _y ] ;
47735: LD_ADDR_VAR 0 5
47739: PUSH
47740: LD_VAR 0 6
47744: PUSH
47745: LD_VAR 0 7
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// end ;
47754: LD_VAR 0 5
47758: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47759: LD_INT 0
47761: PPUSH
47762: PPUSH
47763: PPUSH
47764: PPUSH
// task := GetTaskList ( unit ) ;
47765: LD_ADDR_VAR 0 7
47769: PUSH
47770: LD_VAR 0 1
47774: PPUSH
47775: CALL_OW 437
47779: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47780: LD_VAR 0 7
47784: NOT
47785: PUSH
47786: LD_VAR 0 1
47790: PPUSH
47791: LD_VAR 0 2
47795: PPUSH
47796: CALL_OW 308
47800: NOT
47801: AND
47802: IFFALSE 47806
// exit ;
47804: GO 47924
// if IsInArea ( unit , area ) then
47806: LD_VAR 0 1
47810: PPUSH
47811: LD_VAR 0 2
47815: PPUSH
47816: CALL_OW 308
47820: IFFALSE 47838
// begin ComMoveToArea ( unit , goAway ) ;
47822: LD_VAR 0 1
47826: PPUSH
47827: LD_VAR 0 3
47831: PPUSH
47832: CALL_OW 113
// exit ;
47836: GO 47924
// end ; if task [ 1 ] [ 1 ] <> M then
47838: LD_VAR 0 7
47842: PUSH
47843: LD_INT 1
47845: ARRAY
47846: PUSH
47847: LD_INT 1
47849: ARRAY
47850: PUSH
47851: LD_STRING M
47853: NONEQUAL
47854: IFFALSE 47858
// exit ;
47856: GO 47924
// x := task [ 1 ] [ 2 ] ;
47858: LD_ADDR_VAR 0 5
47862: PUSH
47863: LD_VAR 0 7
47867: PUSH
47868: LD_INT 1
47870: ARRAY
47871: PUSH
47872: LD_INT 2
47874: ARRAY
47875: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47876: LD_ADDR_VAR 0 6
47880: PUSH
47881: LD_VAR 0 7
47885: PUSH
47886: LD_INT 1
47888: ARRAY
47889: PUSH
47890: LD_INT 3
47892: ARRAY
47893: ST_TO_ADDR
// if InArea ( x , y , area ) then
47894: LD_VAR 0 5
47898: PPUSH
47899: LD_VAR 0 6
47903: PPUSH
47904: LD_VAR 0 2
47908: PPUSH
47909: CALL_OW 309
47913: IFFALSE 47924
// ComStop ( unit ) ;
47915: LD_VAR 0 1
47919: PPUSH
47920: CALL_OW 141
// end ;
47924: LD_VAR 0 4
47928: RET
// export function Abs ( value ) ; begin
47929: LD_INT 0
47931: PPUSH
// result := value ;
47932: LD_ADDR_VAR 0 2
47936: PUSH
47937: LD_VAR 0 1
47941: ST_TO_ADDR
// if value < 0 then
47942: LD_VAR 0 1
47946: PUSH
47947: LD_INT 0
47949: LESS
47950: IFFALSE 47967
// result := value * - 1 ;
47952: LD_ADDR_VAR 0 2
47956: PUSH
47957: LD_VAR 0 1
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: MUL
47966: ST_TO_ADDR
// end ;
47967: LD_VAR 0 2
47971: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47972: LD_INT 0
47974: PPUSH
47975: PPUSH
47976: PPUSH
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
47981: PPUSH
// if not unit or not building then
47982: LD_VAR 0 1
47986: NOT
47987: PUSH
47988: LD_VAR 0 2
47992: NOT
47993: OR
47994: IFFALSE 47998
// exit ;
47996: GO 48224
// x := GetX ( building ) ;
47998: LD_ADDR_VAR 0 4
48002: PUSH
48003: LD_VAR 0 2
48007: PPUSH
48008: CALL_OW 250
48012: ST_TO_ADDR
// y := GetY ( building ) ;
48013: LD_ADDR_VAR 0 6
48017: PUSH
48018: LD_VAR 0 2
48022: PPUSH
48023: CALL_OW 251
48027: ST_TO_ADDR
// d := GetDir ( building ) ;
48028: LD_ADDR_VAR 0 8
48032: PUSH
48033: LD_VAR 0 2
48037: PPUSH
48038: CALL_OW 254
48042: ST_TO_ADDR
// r := 4 ;
48043: LD_ADDR_VAR 0 9
48047: PUSH
48048: LD_INT 4
48050: ST_TO_ADDR
// for i := 1 to 5 do
48051: LD_ADDR_VAR 0 10
48055: PUSH
48056: DOUBLE
48057: LD_INT 1
48059: DEC
48060: ST_TO_ADDR
48061: LD_INT 5
48063: PUSH
48064: FOR_TO
48065: IFFALSE 48222
// begin _x := ShiftX ( x , d , r + i ) ;
48067: LD_ADDR_VAR 0 5
48071: PUSH
48072: LD_VAR 0 4
48076: PPUSH
48077: LD_VAR 0 8
48081: PPUSH
48082: LD_VAR 0 9
48086: PUSH
48087: LD_VAR 0 10
48091: PLUS
48092: PPUSH
48093: CALL_OW 272
48097: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48098: LD_ADDR_VAR 0 7
48102: PUSH
48103: LD_VAR 0 6
48107: PPUSH
48108: LD_VAR 0 8
48112: PPUSH
48113: LD_VAR 0 9
48117: PUSH
48118: LD_VAR 0 10
48122: PLUS
48123: PPUSH
48124: CALL_OW 273
48128: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48129: LD_VAR 0 5
48133: PPUSH
48134: LD_VAR 0 7
48138: PPUSH
48139: CALL_OW 488
48143: PUSH
48144: LD_VAR 0 5
48148: PPUSH
48149: LD_VAR 0 7
48153: PPUSH
48154: CALL_OW 428
48158: PPUSH
48159: CALL_OW 247
48163: PUSH
48164: LD_INT 3
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: IN
48174: NOT
48175: AND
48176: IFFALSE 48220
// begin ComMoveXY ( unit , _x , _y ) ;
48178: LD_VAR 0 1
48182: PPUSH
48183: LD_VAR 0 5
48187: PPUSH
48188: LD_VAR 0 7
48192: PPUSH
48193: CALL_OW 111
// result := [ _x , _y ] ;
48197: LD_ADDR_VAR 0 3
48201: PUSH
48202: LD_VAR 0 5
48206: PUSH
48207: LD_VAR 0 7
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// exit ;
48216: POP
48217: POP
48218: GO 48224
// end ; end ;
48220: GO 48064
48222: POP
48223: POP
// end ;
48224: LD_VAR 0 3
48228: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48229: LD_INT 0
48231: PPUSH
48232: PPUSH
48233: PPUSH
// result := 0 ;
48234: LD_ADDR_VAR 0 3
48238: PUSH
48239: LD_INT 0
48241: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48242: LD_VAR 0 1
48246: PUSH
48247: LD_INT 0
48249: LESS
48250: PUSH
48251: LD_VAR 0 1
48255: PUSH
48256: LD_INT 8
48258: GREATER
48259: OR
48260: PUSH
48261: LD_VAR 0 2
48265: PUSH
48266: LD_INT 0
48268: LESS
48269: OR
48270: PUSH
48271: LD_VAR 0 2
48275: PUSH
48276: LD_INT 8
48278: GREATER
48279: OR
48280: IFFALSE 48284
// exit ;
48282: GO 48359
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48284: LD_ADDR_VAR 0 4
48288: PUSH
48289: LD_INT 22
48291: PUSH
48292: LD_VAR 0 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PPUSH
48301: CALL_OW 69
48305: PUSH
48306: FOR_IN
48307: IFFALSE 48357
// begin un := UnitShoot ( i ) ;
48309: LD_ADDR_VAR 0 5
48313: PUSH
48314: LD_VAR 0 4
48318: PPUSH
48319: CALL_OW 504
48323: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48324: LD_VAR 0 5
48328: PPUSH
48329: CALL_OW 255
48333: PUSH
48334: LD_VAR 0 1
48338: EQUAL
48339: IFFALSE 48355
// begin result := un ;
48341: LD_ADDR_VAR 0 3
48345: PUSH
48346: LD_VAR 0 5
48350: ST_TO_ADDR
// exit ;
48351: POP
48352: POP
48353: GO 48359
// end ; end ;
48355: GO 48306
48357: POP
48358: POP
// end ;
48359: LD_VAR 0 3
48363: RET
// export function GetCargoBay ( units ) ; begin
48364: LD_INT 0
48366: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48367: LD_ADDR_VAR 0 2
48371: PUSH
48372: LD_VAR 0 1
48376: PPUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 34
48382: PUSH
48383: LD_INT 12
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 34
48392: PUSH
48393: LD_INT 51
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 34
48402: PUSH
48403: LD_INT 32
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 34
48412: PUSH
48413: LD_INT 89
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: PPUSH
48427: CALL_OW 72
48431: ST_TO_ADDR
// end ;
48432: LD_VAR 0 2
48436: RET
// export function Negate ( value ) ; begin
48437: LD_INT 0
48439: PPUSH
// result := not value ;
48440: LD_ADDR_VAR 0 2
48444: PUSH
48445: LD_VAR 0 1
48449: NOT
48450: ST_TO_ADDR
// end ;
48451: LD_VAR 0 2
48455: RET
// export function Inc ( value ) ; begin
48456: LD_INT 0
48458: PPUSH
// result := value + 1 ;
48459: LD_ADDR_VAR 0 2
48463: PUSH
48464: LD_VAR 0 1
48468: PUSH
48469: LD_INT 1
48471: PLUS
48472: ST_TO_ADDR
// end ;
48473: LD_VAR 0 2
48477: RET
// export function Dec ( value ) ; begin
48478: LD_INT 0
48480: PPUSH
// result := value - 1 ;
48481: LD_ADDR_VAR 0 2
48485: PUSH
48486: LD_VAR 0 1
48490: PUSH
48491: LD_INT 1
48493: MINUS
48494: ST_TO_ADDR
// end ;
48495: LD_VAR 0 2
48499: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48500: LD_INT 0
48502: PPUSH
48503: PPUSH
48504: PPUSH
48505: PPUSH
48506: PPUSH
48507: PPUSH
48508: PPUSH
48509: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48510: LD_VAR 0 1
48514: PPUSH
48515: LD_VAR 0 2
48519: PPUSH
48520: CALL_OW 488
48524: NOT
48525: PUSH
48526: LD_VAR 0 3
48530: PPUSH
48531: LD_VAR 0 4
48535: PPUSH
48536: CALL_OW 488
48540: NOT
48541: OR
48542: IFFALSE 48555
// begin result := - 1 ;
48544: LD_ADDR_VAR 0 5
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: ST_TO_ADDR
// exit ;
48553: GO 48790
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48555: LD_ADDR_VAR 0 12
48559: PUSH
48560: LD_VAR 0 1
48564: PPUSH
48565: LD_VAR 0 2
48569: PPUSH
48570: LD_VAR 0 3
48574: PPUSH
48575: LD_VAR 0 4
48579: PPUSH
48580: CALL 47640 0 4
48584: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48585: LD_ADDR_VAR 0 11
48589: PUSH
48590: LD_VAR 0 1
48594: PPUSH
48595: LD_VAR 0 2
48599: PPUSH
48600: LD_VAR 0 12
48604: PUSH
48605: LD_INT 1
48607: ARRAY
48608: PPUSH
48609: LD_VAR 0 12
48613: PUSH
48614: LD_INT 2
48616: ARRAY
48617: PPUSH
48618: CALL_OW 298
48622: ST_TO_ADDR
// distance := 9999 ;
48623: LD_ADDR_VAR 0 10
48627: PUSH
48628: LD_INT 9999
48630: ST_TO_ADDR
// for i := 0 to 5 do
48631: LD_ADDR_VAR 0 6
48635: PUSH
48636: DOUBLE
48637: LD_INT 0
48639: DEC
48640: ST_TO_ADDR
48641: LD_INT 5
48643: PUSH
48644: FOR_TO
48645: IFFALSE 48788
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48647: LD_ADDR_VAR 0 7
48651: PUSH
48652: LD_VAR 0 1
48656: PPUSH
48657: LD_VAR 0 6
48661: PPUSH
48662: LD_VAR 0 11
48666: PPUSH
48667: CALL_OW 272
48671: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48672: LD_ADDR_VAR 0 8
48676: PUSH
48677: LD_VAR 0 2
48681: PPUSH
48682: LD_VAR 0 6
48686: PPUSH
48687: LD_VAR 0 11
48691: PPUSH
48692: CALL_OW 273
48696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48697: LD_VAR 0 7
48701: PPUSH
48702: LD_VAR 0 8
48706: PPUSH
48707: CALL_OW 488
48711: NOT
48712: IFFALSE 48716
// continue ;
48714: GO 48644
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48716: LD_ADDR_VAR 0 9
48720: PUSH
48721: LD_VAR 0 12
48725: PUSH
48726: LD_INT 1
48728: ARRAY
48729: PPUSH
48730: LD_VAR 0 12
48734: PUSH
48735: LD_INT 2
48737: ARRAY
48738: PPUSH
48739: LD_VAR 0 7
48743: PPUSH
48744: LD_VAR 0 8
48748: PPUSH
48749: CALL_OW 298
48753: ST_TO_ADDR
// if tmp < distance then
48754: LD_VAR 0 9
48758: PUSH
48759: LD_VAR 0 10
48763: LESS
48764: IFFALSE 48786
// begin result := i ;
48766: LD_ADDR_VAR 0 5
48770: PUSH
48771: LD_VAR 0 6
48775: ST_TO_ADDR
// distance := tmp ;
48776: LD_ADDR_VAR 0 10
48780: PUSH
48781: LD_VAR 0 9
48785: ST_TO_ADDR
// end ; end ;
48786: GO 48644
48788: POP
48789: POP
// end ;
48790: LD_VAR 0 5
48794: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48795: LD_INT 0
48797: PPUSH
48798: PPUSH
// if not driver or not IsInUnit ( driver ) then
48799: LD_VAR 0 1
48803: NOT
48804: PUSH
48805: LD_VAR 0 1
48809: PPUSH
48810: CALL_OW 310
48814: NOT
48815: OR
48816: IFFALSE 48820
// exit ;
48818: GO 48910
// vehicle := IsInUnit ( driver ) ;
48820: LD_ADDR_VAR 0 3
48824: PUSH
48825: LD_VAR 0 1
48829: PPUSH
48830: CALL_OW 310
48834: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48835: LD_VAR 0 1
48839: PPUSH
48840: LD_STRING \
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: PUSH
48870: LD_STRING E
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_VAR 0 3
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PPUSH
48906: CALL_OW 446
// end ;
48910: LD_VAR 0 2
48914: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48915: LD_INT 0
48917: PPUSH
48918: PPUSH
// if not driver or not IsInUnit ( driver ) then
48919: LD_VAR 0 1
48923: NOT
48924: PUSH
48925: LD_VAR 0 1
48929: PPUSH
48930: CALL_OW 310
48934: NOT
48935: OR
48936: IFFALSE 48940
// exit ;
48938: GO 49030
// vehicle := IsInUnit ( driver ) ;
48940: LD_ADDR_VAR 0 3
48944: PUSH
48945: LD_VAR 0 1
48949: PPUSH
48950: CALL_OW 310
48954: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48955: LD_VAR 0 1
48959: PPUSH
48960: LD_STRING \
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: PUSH
48990: LD_STRING E
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_VAR 0 3
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PPUSH
49026: CALL_OW 447
// end ;
49030: LD_VAR 0 2
49034: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49035: LD_INT 0
49037: PPUSH
49038: PPUSH
49039: PPUSH
// tmp := [ ] ;
49040: LD_ADDR_VAR 0 5
49044: PUSH
49045: EMPTY
49046: ST_TO_ADDR
// for i in units do
49047: LD_ADDR_VAR 0 4
49051: PUSH
49052: LD_VAR 0 1
49056: PUSH
49057: FOR_IN
49058: IFFALSE 49096
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49060: LD_ADDR_VAR 0 5
49064: PUSH
49065: LD_VAR 0 5
49069: PPUSH
49070: LD_VAR 0 5
49074: PUSH
49075: LD_INT 1
49077: PLUS
49078: PPUSH
49079: LD_VAR 0 4
49083: PPUSH
49084: CALL_OW 256
49088: PPUSH
49089: CALL_OW 2
49093: ST_TO_ADDR
49094: GO 49057
49096: POP
49097: POP
// if not tmp then
49098: LD_VAR 0 5
49102: NOT
49103: IFFALSE 49107
// exit ;
49105: GO 49155
// if asc then
49107: LD_VAR 0 2
49111: IFFALSE 49135
// result := SortListByListAsc ( units , tmp ) else
49113: LD_ADDR_VAR 0 3
49117: PUSH
49118: LD_VAR 0 1
49122: PPUSH
49123: LD_VAR 0 5
49127: PPUSH
49128: CALL_OW 76
49132: ST_TO_ADDR
49133: GO 49155
// result := SortListByListDesc ( units , tmp ) ;
49135: LD_ADDR_VAR 0 3
49139: PUSH
49140: LD_VAR 0 1
49144: PPUSH
49145: LD_VAR 0 5
49149: PPUSH
49150: CALL_OW 77
49154: ST_TO_ADDR
// end ;
49155: LD_VAR 0 3
49159: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49160: LD_INT 0
49162: PPUSH
49163: PPUSH
// task := GetTaskList ( mech ) ;
49164: LD_ADDR_VAR 0 4
49168: PUSH
49169: LD_VAR 0 1
49173: PPUSH
49174: CALL_OW 437
49178: ST_TO_ADDR
// if not task then
49179: LD_VAR 0 4
49183: NOT
49184: IFFALSE 49188
// exit ;
49186: GO 49230
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49188: LD_ADDR_VAR 0 3
49192: PUSH
49193: LD_VAR 0 4
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: PUSH
49202: LD_INT 1
49204: ARRAY
49205: PUSH
49206: LD_STRING r
49208: EQUAL
49209: PUSH
49210: LD_VAR 0 4
49214: PUSH
49215: LD_INT 1
49217: ARRAY
49218: PUSH
49219: LD_INT 4
49221: ARRAY
49222: PUSH
49223: LD_VAR 0 2
49227: EQUAL
49228: AND
49229: ST_TO_ADDR
// end ;
49230: LD_VAR 0 3
49234: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49235: LD_INT 0
49237: PPUSH
// SetDir ( unit , d ) ;
49238: LD_VAR 0 1
49242: PPUSH
49243: LD_VAR 0 4
49247: PPUSH
49248: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49252: LD_ADDR_VAR 0 6
49256: PUSH
49257: LD_VAR 0 1
49261: PPUSH
49262: LD_VAR 0 2
49266: PPUSH
49267: LD_VAR 0 3
49271: PPUSH
49272: LD_VAR 0 5
49276: PPUSH
49277: CALL_OW 48
49281: ST_TO_ADDR
// end ;
49282: LD_VAR 0 6
49286: RET
// export function ToNaturalNumber ( number ) ; begin
49287: LD_INT 0
49289: PPUSH
// result := number div 1 ;
49290: LD_ADDR_VAR 0 2
49294: PUSH
49295: LD_VAR 0 1
49299: PUSH
49300: LD_INT 1
49302: DIV
49303: ST_TO_ADDR
// if number < 0 then
49304: LD_VAR 0 1
49308: PUSH
49309: LD_INT 0
49311: LESS
49312: IFFALSE 49322
// result := 0 ;
49314: LD_ADDR_VAR 0 2
49318: PUSH
49319: LD_INT 0
49321: ST_TO_ADDR
// end ;
49322: LD_VAR 0 2
49326: RET
// export function SortByClass ( units , class ) ; var un ; begin
49327: LD_INT 0
49329: PPUSH
49330: PPUSH
// if not units or not class then
49331: LD_VAR 0 1
49335: NOT
49336: PUSH
49337: LD_VAR 0 2
49341: NOT
49342: OR
49343: IFFALSE 49347
// exit ;
49345: GO 49442
// result := [ ] ;
49347: LD_ADDR_VAR 0 3
49351: PUSH
49352: EMPTY
49353: ST_TO_ADDR
// for un in units do
49354: LD_ADDR_VAR 0 4
49358: PUSH
49359: LD_VAR 0 1
49363: PUSH
49364: FOR_IN
49365: IFFALSE 49440
// if GetClass ( un ) = class then
49367: LD_VAR 0 4
49371: PPUSH
49372: CALL_OW 257
49376: PUSH
49377: LD_VAR 0 2
49381: EQUAL
49382: IFFALSE 49409
// result := Insert ( result , 1 , un ) else
49384: LD_ADDR_VAR 0 3
49388: PUSH
49389: LD_VAR 0 3
49393: PPUSH
49394: LD_INT 1
49396: PPUSH
49397: LD_VAR 0 4
49401: PPUSH
49402: CALL_OW 2
49406: ST_TO_ADDR
49407: GO 49438
// result := Replace ( result , result + 1 , un ) ;
49409: LD_ADDR_VAR 0 3
49413: PUSH
49414: LD_VAR 0 3
49418: PPUSH
49419: LD_VAR 0 3
49423: PUSH
49424: LD_INT 1
49426: PLUS
49427: PPUSH
49428: LD_VAR 0 4
49432: PPUSH
49433: CALL_OW 1
49437: ST_TO_ADDR
49438: GO 49364
49440: POP
49441: POP
// end ;
49442: LD_VAR 0 3
49446: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49447: LD_INT 0
49449: PPUSH
49450: PPUSH
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
// result := [ ] ;
49456: LD_ADDR_VAR 0 4
49460: PUSH
49461: EMPTY
49462: ST_TO_ADDR
// if x - r < 0 then
49463: LD_VAR 0 1
49467: PUSH
49468: LD_VAR 0 3
49472: MINUS
49473: PUSH
49474: LD_INT 0
49476: LESS
49477: IFFALSE 49489
// min_x := 0 else
49479: LD_ADDR_VAR 0 8
49483: PUSH
49484: LD_INT 0
49486: ST_TO_ADDR
49487: GO 49505
// min_x := x - r ;
49489: LD_ADDR_VAR 0 8
49493: PUSH
49494: LD_VAR 0 1
49498: PUSH
49499: LD_VAR 0 3
49503: MINUS
49504: ST_TO_ADDR
// if y - r < 0 then
49505: LD_VAR 0 2
49509: PUSH
49510: LD_VAR 0 3
49514: MINUS
49515: PUSH
49516: LD_INT 0
49518: LESS
49519: IFFALSE 49531
// min_y := 0 else
49521: LD_ADDR_VAR 0 7
49525: PUSH
49526: LD_INT 0
49528: ST_TO_ADDR
49529: GO 49547
// min_y := y - r ;
49531: LD_ADDR_VAR 0 7
49535: PUSH
49536: LD_VAR 0 2
49540: PUSH
49541: LD_VAR 0 3
49545: MINUS
49546: ST_TO_ADDR
// max_x := x + r ;
49547: LD_ADDR_VAR 0 9
49551: PUSH
49552: LD_VAR 0 1
49556: PUSH
49557: LD_VAR 0 3
49561: PLUS
49562: ST_TO_ADDR
// max_y := y + r ;
49563: LD_ADDR_VAR 0 10
49567: PUSH
49568: LD_VAR 0 2
49572: PUSH
49573: LD_VAR 0 3
49577: PLUS
49578: ST_TO_ADDR
// for _x = min_x to max_x do
49579: LD_ADDR_VAR 0 5
49583: PUSH
49584: DOUBLE
49585: LD_VAR 0 8
49589: DEC
49590: ST_TO_ADDR
49591: LD_VAR 0 9
49595: PUSH
49596: FOR_TO
49597: IFFALSE 49698
// for _y = min_y to max_y do
49599: LD_ADDR_VAR 0 6
49603: PUSH
49604: DOUBLE
49605: LD_VAR 0 7
49609: DEC
49610: ST_TO_ADDR
49611: LD_VAR 0 10
49615: PUSH
49616: FOR_TO
49617: IFFALSE 49694
// begin if not ValidHex ( _x , _y ) then
49619: LD_VAR 0 5
49623: PPUSH
49624: LD_VAR 0 6
49628: PPUSH
49629: CALL_OW 488
49633: NOT
49634: IFFALSE 49638
// continue ;
49636: GO 49616
// if GetResourceTypeXY ( _x , _y ) then
49638: LD_VAR 0 5
49642: PPUSH
49643: LD_VAR 0 6
49647: PPUSH
49648: CALL_OW 283
49652: IFFALSE 49692
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49654: LD_ADDR_VAR 0 4
49658: PUSH
49659: LD_VAR 0 4
49663: PPUSH
49664: LD_VAR 0 4
49668: PUSH
49669: LD_INT 1
49671: PLUS
49672: PPUSH
49673: LD_VAR 0 5
49677: PUSH
49678: LD_VAR 0 6
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PPUSH
49687: CALL_OW 1
49691: ST_TO_ADDR
// end ;
49692: GO 49616
49694: POP
49695: POP
49696: GO 49596
49698: POP
49699: POP
// end ;
49700: LD_VAR 0 4
49704: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49705: LD_INT 0
49707: PPUSH
49708: PPUSH
49709: PPUSH
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
// if not units then
49715: LD_VAR 0 1
49719: NOT
49720: IFFALSE 49724
// exit ;
49722: GO 50252
// result := UnitFilter ( units , [ f_ok ] ) ;
49724: LD_ADDR_VAR 0 3
49728: PUSH
49729: LD_VAR 0 1
49733: PPUSH
49734: LD_INT 50
49736: PUSH
49737: EMPTY
49738: LIST
49739: PPUSH
49740: CALL_OW 72
49744: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49745: LD_ADDR_VAR 0 8
49749: PUSH
49750: LD_VAR 0 1
49754: PUSH
49755: LD_INT 1
49757: ARRAY
49758: PPUSH
49759: CALL_OW 255
49763: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49764: LD_ADDR_VAR 0 10
49768: PUSH
49769: LD_INT 29
49771: PUSH
49772: LD_INT 91
49774: PUSH
49775: LD_INT 49
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// if not result then
49783: LD_VAR 0 3
49787: NOT
49788: IFFALSE 49792
// exit ;
49790: GO 50252
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49792: LD_ADDR_VAR 0 5
49796: PUSH
49797: LD_INT 81
49799: PUSH
49800: LD_VAR 0 8
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PPUSH
49809: CALL_OW 69
49813: ST_TO_ADDR
// for i in result do
49814: LD_ADDR_VAR 0 4
49818: PUSH
49819: LD_VAR 0 3
49823: PUSH
49824: FOR_IN
49825: IFFALSE 50250
// begin tag := GetTag ( i ) + 1 ;
49827: LD_ADDR_VAR 0 9
49831: PUSH
49832: LD_VAR 0 4
49836: PPUSH
49837: CALL_OW 110
49841: PUSH
49842: LD_INT 1
49844: PLUS
49845: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49846: LD_ADDR_VAR 0 7
49850: PUSH
49851: LD_VAR 0 4
49855: PPUSH
49856: CALL_OW 250
49860: PPUSH
49861: LD_VAR 0 4
49865: PPUSH
49866: CALL_OW 251
49870: PPUSH
49871: LD_INT 4
49873: PPUSH
49874: CALL 49447 0 3
49878: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49879: LD_VAR 0 4
49883: PPUSH
49884: CALL_OW 247
49888: PUSH
49889: LD_INT 2
49891: EQUAL
49892: PUSH
49893: LD_VAR 0 7
49897: PUSH
49898: LD_INT 2
49900: GREATER
49901: AND
49902: PUSH
49903: LD_VAR 0 4
49907: PPUSH
49908: CALL_OW 264
49912: PUSH
49913: LD_VAR 0 10
49917: IN
49918: NOT
49919: AND
49920: IFFALSE 49959
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49922: LD_VAR 0 4
49926: PPUSH
49927: LD_VAR 0 7
49931: PUSH
49932: LD_INT 1
49934: ARRAY
49935: PUSH
49936: LD_INT 1
49938: ARRAY
49939: PPUSH
49940: LD_VAR 0 7
49944: PUSH
49945: LD_INT 1
49947: ARRAY
49948: PUSH
49949: LD_INT 2
49951: ARRAY
49952: PPUSH
49953: CALL_OW 116
49957: GO 50248
// if path > tag then
49959: LD_VAR 0 2
49963: PUSH
49964: LD_VAR 0 9
49968: GREATER
49969: IFFALSE 50177
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49971: LD_ADDR_VAR 0 6
49975: PUSH
49976: LD_VAR 0 5
49980: PPUSH
49981: LD_INT 91
49983: PUSH
49984: LD_VAR 0 4
49988: PUSH
49989: LD_INT 8
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: PPUSH
49997: CALL_OW 72
50001: ST_TO_ADDR
// if nearEnemy then
50002: LD_VAR 0 6
50006: IFFALSE 50075
// begin if GetWeapon ( i ) = ru_time_lapser then
50008: LD_VAR 0 4
50012: PPUSH
50013: CALL_OW 264
50017: PUSH
50018: LD_INT 49
50020: EQUAL
50021: IFFALSE 50049
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50023: LD_VAR 0 4
50027: PPUSH
50028: LD_VAR 0 6
50032: PPUSH
50033: LD_VAR 0 4
50037: PPUSH
50038: CALL_OW 74
50042: PPUSH
50043: CALL_OW 112
50047: GO 50073
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50049: LD_VAR 0 4
50053: PPUSH
50054: LD_VAR 0 6
50058: PPUSH
50059: LD_VAR 0 4
50063: PPUSH
50064: CALL_OW 74
50068: PPUSH
50069: CALL 51323 0 2
// end else
50073: GO 50175
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50075: LD_VAR 0 4
50079: PPUSH
50080: LD_VAR 0 2
50084: PUSH
50085: LD_VAR 0 9
50089: ARRAY
50090: PUSH
50091: LD_INT 1
50093: ARRAY
50094: PPUSH
50095: LD_VAR 0 2
50099: PUSH
50100: LD_VAR 0 9
50104: ARRAY
50105: PUSH
50106: LD_INT 2
50108: ARRAY
50109: PPUSH
50110: CALL_OW 297
50114: PUSH
50115: LD_INT 6
50117: GREATER
50118: IFFALSE 50161
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50120: LD_VAR 0 4
50124: PPUSH
50125: LD_VAR 0 2
50129: PUSH
50130: LD_VAR 0 9
50134: ARRAY
50135: PUSH
50136: LD_INT 1
50138: ARRAY
50139: PPUSH
50140: LD_VAR 0 2
50144: PUSH
50145: LD_VAR 0 9
50149: ARRAY
50150: PUSH
50151: LD_INT 2
50153: ARRAY
50154: PPUSH
50155: CALL_OW 114
50159: GO 50175
// SetTag ( i , tag ) ;
50161: LD_VAR 0 4
50165: PPUSH
50166: LD_VAR 0 9
50170: PPUSH
50171: CALL_OW 109
// end else
50175: GO 50248
// if enemy then
50177: LD_VAR 0 5
50181: IFFALSE 50248
// begin if GetWeapon ( i ) = ru_time_lapser then
50183: LD_VAR 0 4
50187: PPUSH
50188: CALL_OW 264
50192: PUSH
50193: LD_INT 49
50195: EQUAL
50196: IFFALSE 50224
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50198: LD_VAR 0 4
50202: PPUSH
50203: LD_VAR 0 5
50207: PPUSH
50208: LD_VAR 0 4
50212: PPUSH
50213: CALL_OW 74
50217: PPUSH
50218: CALL_OW 112
50222: GO 50248
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50224: LD_VAR 0 4
50228: PPUSH
50229: LD_VAR 0 5
50233: PPUSH
50234: LD_VAR 0 4
50238: PPUSH
50239: CALL_OW 74
50243: PPUSH
50244: CALL 51323 0 2
// end ; end ;
50248: GO 49824
50250: POP
50251: POP
// end ;
50252: LD_VAR 0 3
50256: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50257: LD_INT 0
50259: PPUSH
50260: PPUSH
50261: PPUSH
// if not unit or IsInUnit ( unit ) then
50262: LD_VAR 0 1
50266: NOT
50267: PUSH
50268: LD_VAR 0 1
50272: PPUSH
50273: CALL_OW 310
50277: OR
50278: IFFALSE 50282
// exit ;
50280: GO 50373
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50282: LD_ADDR_VAR 0 4
50286: PUSH
50287: LD_VAR 0 1
50291: PPUSH
50292: CALL_OW 250
50296: PPUSH
50297: LD_VAR 0 2
50301: PPUSH
50302: LD_INT 1
50304: PPUSH
50305: CALL_OW 272
50309: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50310: LD_ADDR_VAR 0 5
50314: PUSH
50315: LD_VAR 0 1
50319: PPUSH
50320: CALL_OW 251
50324: PPUSH
50325: LD_VAR 0 2
50329: PPUSH
50330: LD_INT 1
50332: PPUSH
50333: CALL_OW 273
50337: ST_TO_ADDR
// if ValidHex ( x , y ) then
50338: LD_VAR 0 4
50342: PPUSH
50343: LD_VAR 0 5
50347: PPUSH
50348: CALL_OW 488
50352: IFFALSE 50373
// ComTurnXY ( unit , x , y ) ;
50354: LD_VAR 0 1
50358: PPUSH
50359: LD_VAR 0 4
50363: PPUSH
50364: LD_VAR 0 5
50368: PPUSH
50369: CALL_OW 118
// end ;
50373: LD_VAR 0 3
50377: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50378: LD_INT 0
50380: PPUSH
50381: PPUSH
// result := false ;
50382: LD_ADDR_VAR 0 3
50386: PUSH
50387: LD_INT 0
50389: ST_TO_ADDR
// if not units then
50390: LD_VAR 0 2
50394: NOT
50395: IFFALSE 50399
// exit ;
50397: GO 50444
// for i in units do
50399: LD_ADDR_VAR 0 4
50403: PUSH
50404: LD_VAR 0 2
50408: PUSH
50409: FOR_IN
50410: IFFALSE 50442
// if See ( side , i ) then
50412: LD_VAR 0 1
50416: PPUSH
50417: LD_VAR 0 4
50421: PPUSH
50422: CALL_OW 292
50426: IFFALSE 50440
// begin result := true ;
50428: LD_ADDR_VAR 0 3
50432: PUSH
50433: LD_INT 1
50435: ST_TO_ADDR
// exit ;
50436: POP
50437: POP
50438: GO 50444
// end ;
50440: GO 50409
50442: POP
50443: POP
// end ;
50444: LD_VAR 0 3
50448: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50449: LD_INT 0
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
// if not unit or not points then
50455: LD_VAR 0 1
50459: NOT
50460: PUSH
50461: LD_VAR 0 2
50465: NOT
50466: OR
50467: IFFALSE 50471
// exit ;
50469: GO 50561
// dist := 99999 ;
50471: LD_ADDR_VAR 0 5
50475: PUSH
50476: LD_INT 99999
50478: ST_TO_ADDR
// for i in points do
50479: LD_ADDR_VAR 0 4
50483: PUSH
50484: LD_VAR 0 2
50488: PUSH
50489: FOR_IN
50490: IFFALSE 50559
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50492: LD_ADDR_VAR 0 6
50496: PUSH
50497: LD_VAR 0 1
50501: PPUSH
50502: LD_VAR 0 4
50506: PUSH
50507: LD_INT 1
50509: ARRAY
50510: PPUSH
50511: LD_VAR 0 4
50515: PUSH
50516: LD_INT 2
50518: ARRAY
50519: PPUSH
50520: CALL_OW 297
50524: ST_TO_ADDR
// if tmpDist < dist then
50525: LD_VAR 0 6
50529: PUSH
50530: LD_VAR 0 5
50534: LESS
50535: IFFALSE 50557
// begin result := i ;
50537: LD_ADDR_VAR 0 3
50541: PUSH
50542: LD_VAR 0 4
50546: ST_TO_ADDR
// dist := tmpDist ;
50547: LD_ADDR_VAR 0 5
50551: PUSH
50552: LD_VAR 0 6
50556: ST_TO_ADDR
// end ; end ;
50557: GO 50489
50559: POP
50560: POP
// end ;
50561: LD_VAR 0 3
50565: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50566: LD_INT 0
50568: PPUSH
// uc_side := side ;
50569: LD_ADDR_OWVAR 20
50573: PUSH
50574: LD_VAR 0 1
50578: ST_TO_ADDR
// uc_nation := 3 ;
50579: LD_ADDR_OWVAR 21
50583: PUSH
50584: LD_INT 3
50586: ST_TO_ADDR
// vc_chassis := 25 ;
50587: LD_ADDR_OWVAR 37
50591: PUSH
50592: LD_INT 25
50594: ST_TO_ADDR
// vc_engine := engine_siberite ;
50595: LD_ADDR_OWVAR 39
50599: PUSH
50600: LD_INT 3
50602: ST_TO_ADDR
// vc_control := control_computer ;
50603: LD_ADDR_OWVAR 38
50607: PUSH
50608: LD_INT 3
50610: ST_TO_ADDR
// vc_weapon := 59 ;
50611: LD_ADDR_OWVAR 40
50615: PUSH
50616: LD_INT 59
50618: ST_TO_ADDR
// result := CreateVehicle ;
50619: LD_ADDR_VAR 0 5
50623: PUSH
50624: CALL_OW 45
50628: ST_TO_ADDR
// SetDir ( result , d ) ;
50629: LD_VAR 0 5
50633: PPUSH
50634: LD_VAR 0 4
50638: PPUSH
50639: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50643: LD_VAR 0 5
50647: PPUSH
50648: LD_VAR 0 2
50652: PPUSH
50653: LD_VAR 0 3
50657: PPUSH
50658: LD_INT 0
50660: PPUSH
50661: CALL_OW 48
// end ;
50665: LD_VAR 0 5
50669: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50670: LD_INT 0
50672: PPUSH
50673: PPUSH
50674: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50675: LD_ADDR_VAR 0 2
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50698: LD_VAR 0 1
50702: NOT
50703: PUSH
50704: LD_VAR 0 1
50708: PPUSH
50709: CALL_OW 264
50713: PUSH
50714: LD_INT 12
50716: PUSH
50717: LD_INT 51
50719: PUSH
50720: LD_INT 32
50722: PUSH
50723: LD_INT 89
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: IN
50732: NOT
50733: OR
50734: IFFALSE 50738
// exit ;
50736: GO 50836
// for i := 1 to 3 do
50738: LD_ADDR_VAR 0 3
50742: PUSH
50743: DOUBLE
50744: LD_INT 1
50746: DEC
50747: ST_TO_ADDR
50748: LD_INT 3
50750: PUSH
50751: FOR_TO
50752: IFFALSE 50834
// begin tmp := GetCargo ( cargo , i ) ;
50754: LD_ADDR_VAR 0 4
50758: PUSH
50759: LD_VAR 0 1
50763: PPUSH
50764: LD_VAR 0 3
50768: PPUSH
50769: CALL_OW 289
50773: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50774: LD_ADDR_VAR 0 2
50778: PUSH
50779: LD_VAR 0 2
50783: PPUSH
50784: LD_VAR 0 3
50788: PPUSH
50789: LD_VAR 0 4
50793: PPUSH
50794: CALL_OW 1
50798: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50799: LD_ADDR_VAR 0 2
50803: PUSH
50804: LD_VAR 0 2
50808: PPUSH
50809: LD_INT 4
50811: PPUSH
50812: LD_VAR 0 2
50816: PUSH
50817: LD_INT 4
50819: ARRAY
50820: PUSH
50821: LD_VAR 0 4
50825: PLUS
50826: PPUSH
50827: CALL_OW 1
50831: ST_TO_ADDR
// end ;
50832: GO 50751
50834: POP
50835: POP
// end ;
50836: LD_VAR 0 2
50840: RET
// export function Length ( array ) ; begin
50841: LD_INT 0
50843: PPUSH
// result := array + 0 ;
50844: LD_ADDR_VAR 0 2
50848: PUSH
50849: LD_VAR 0 1
50853: PUSH
50854: LD_INT 0
50856: PLUS
50857: ST_TO_ADDR
// end ;
50858: LD_VAR 0 2
50862: RET
// export function PrepareArray ( array ) ; begin
50863: LD_INT 0
50865: PPUSH
// result := array diff 0 ;
50866: LD_ADDR_VAR 0 2
50870: PUSH
50871: LD_VAR 0 1
50875: PUSH
50876: LD_INT 0
50878: DIFF
50879: ST_TO_ADDR
// if not result [ 1 ] then
50880: LD_VAR 0 2
50884: PUSH
50885: LD_INT 1
50887: ARRAY
50888: NOT
50889: IFFALSE 50909
// result := Delete ( result , 1 ) ;
50891: LD_ADDR_VAR 0 2
50895: PUSH
50896: LD_VAR 0 2
50900: PPUSH
50901: LD_INT 1
50903: PPUSH
50904: CALL_OW 3
50908: ST_TO_ADDR
// end ;
50909: LD_VAR 0 2
50913: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50914: LD_INT 0
50916: PPUSH
50917: PPUSH
50918: PPUSH
50919: PPUSH
// sibRocketRange := 25 ;
50920: LD_ADDR_VAR 0 6
50924: PUSH
50925: LD_INT 25
50927: ST_TO_ADDR
// result := false ;
50928: LD_ADDR_VAR 0 4
50932: PUSH
50933: LD_INT 0
50935: ST_TO_ADDR
// for i := 0 to 5 do
50936: LD_ADDR_VAR 0 5
50940: PUSH
50941: DOUBLE
50942: LD_INT 0
50944: DEC
50945: ST_TO_ADDR
50946: LD_INT 5
50948: PUSH
50949: FOR_TO
50950: IFFALSE 51017
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50952: LD_VAR 0 1
50956: PPUSH
50957: LD_VAR 0 5
50961: PPUSH
50962: LD_VAR 0 6
50966: PPUSH
50967: CALL_OW 272
50971: PPUSH
50972: LD_VAR 0 2
50976: PPUSH
50977: LD_VAR 0 5
50981: PPUSH
50982: LD_VAR 0 6
50986: PPUSH
50987: CALL_OW 273
50991: PPUSH
50992: LD_VAR 0 3
50996: PPUSH
50997: CALL_OW 309
51001: IFFALSE 51015
// begin result := true ;
51003: LD_ADDR_VAR 0 4
51007: PUSH
51008: LD_INT 1
51010: ST_TO_ADDR
// exit ;
51011: POP
51012: POP
51013: GO 51019
// end ;
51015: GO 50949
51017: POP
51018: POP
// end ;
51019: LD_VAR 0 4
51023: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51024: LD_INT 0
51026: PPUSH
51027: PPUSH
51028: PPUSH
// if btype = b_depot then
51029: LD_VAR 0 2
51033: PUSH
51034: LD_INT 0
51036: EQUAL
51037: IFFALSE 51049
// begin result := true ;
51039: LD_ADDR_VAR 0 3
51043: PUSH
51044: LD_INT 1
51046: ST_TO_ADDR
// exit ;
51047: GO 51165
// end ; pom := GetBase ( depot ) ;
51049: LD_ADDR_VAR 0 4
51053: PUSH
51054: LD_VAR 0 1
51058: PPUSH
51059: CALL_OW 274
51063: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51064: LD_ADDR_VAR 0 5
51068: PUSH
51069: LD_VAR 0 2
51073: PPUSH
51074: LD_VAR 0 1
51078: PPUSH
51079: CALL_OW 248
51083: PPUSH
51084: CALL_OW 450
51088: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51089: LD_ADDR_VAR 0 3
51093: PUSH
51094: LD_VAR 0 4
51098: PPUSH
51099: LD_INT 1
51101: PPUSH
51102: CALL_OW 275
51106: PUSH
51107: LD_VAR 0 5
51111: PUSH
51112: LD_INT 1
51114: ARRAY
51115: GREATEREQUAL
51116: PUSH
51117: LD_VAR 0 4
51121: PPUSH
51122: LD_INT 2
51124: PPUSH
51125: CALL_OW 275
51129: PUSH
51130: LD_VAR 0 5
51134: PUSH
51135: LD_INT 2
51137: ARRAY
51138: GREATEREQUAL
51139: AND
51140: PUSH
51141: LD_VAR 0 4
51145: PPUSH
51146: LD_INT 3
51148: PPUSH
51149: CALL_OW 275
51153: PUSH
51154: LD_VAR 0 5
51158: PUSH
51159: LD_INT 3
51161: ARRAY
51162: GREATEREQUAL
51163: AND
51164: ST_TO_ADDR
// end ;
51165: LD_VAR 0 3
51169: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51170: LD_INT 0
51172: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51173: LD_VAR 0 1
51177: PPUSH
51178: LD_VAR 0 2
51182: PPUSH
51183: LD_INT 0
51185: PPUSH
51186: LD_INT 0
51188: PPUSH
51189: LD_INT 1
51191: PPUSH
51192: LD_INT 0
51194: PPUSH
51195: CALL_OW 587
// end ;
51199: LD_VAR 0 3
51203: RET
// export function CenterOnNow ( unit ) ; begin
51204: LD_INT 0
51206: PPUSH
// result := IsInUnit ( unit ) ;
51207: LD_ADDR_VAR 0 2
51211: PUSH
51212: LD_VAR 0 1
51216: PPUSH
51217: CALL_OW 310
51221: ST_TO_ADDR
// if not result then
51222: LD_VAR 0 2
51226: NOT
51227: IFFALSE 51239
// result := unit ;
51229: LD_ADDR_VAR 0 2
51233: PUSH
51234: LD_VAR 0 1
51238: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51239: LD_VAR 0 1
51243: PPUSH
51244: CALL_OW 87
// end ;
51248: LD_VAR 0 2
51252: RET
// export function ComMoveHex ( unit , hex ) ; begin
51253: LD_INT 0
51255: PPUSH
// if not hex then
51256: LD_VAR 0 2
51260: NOT
51261: IFFALSE 51265
// exit ;
51263: GO 51318
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51265: LD_VAR 0 2
51269: PUSH
51270: LD_INT 1
51272: ARRAY
51273: PPUSH
51274: LD_VAR 0 2
51278: PUSH
51279: LD_INT 2
51281: ARRAY
51282: PPUSH
51283: CALL_OW 428
51287: IFFALSE 51291
// exit ;
51289: GO 51318
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51291: LD_VAR 0 1
51295: PPUSH
51296: LD_VAR 0 2
51300: PUSH
51301: LD_INT 1
51303: ARRAY
51304: PPUSH
51305: LD_VAR 0 2
51309: PUSH
51310: LD_INT 2
51312: ARRAY
51313: PPUSH
51314: CALL_OW 111
// end ;
51318: LD_VAR 0 3
51322: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51323: LD_INT 0
51325: PPUSH
51326: PPUSH
51327: PPUSH
// if not unit or not enemy then
51328: LD_VAR 0 1
51332: NOT
51333: PUSH
51334: LD_VAR 0 2
51338: NOT
51339: OR
51340: IFFALSE 51344
// exit ;
51342: GO 51468
// x := GetX ( enemy ) ;
51344: LD_ADDR_VAR 0 4
51348: PUSH
51349: LD_VAR 0 2
51353: PPUSH
51354: CALL_OW 250
51358: ST_TO_ADDR
// y := GetY ( enemy ) ;
51359: LD_ADDR_VAR 0 5
51363: PUSH
51364: LD_VAR 0 2
51368: PPUSH
51369: CALL_OW 251
51373: ST_TO_ADDR
// if ValidHex ( x , y ) then
51374: LD_VAR 0 4
51378: PPUSH
51379: LD_VAR 0 5
51383: PPUSH
51384: CALL_OW 488
51388: IFFALSE 51468
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51390: LD_VAR 0 2
51394: PPUSH
51395: CALL_OW 247
51399: PUSH
51400: LD_INT 3
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: IN
51410: PUSH
51411: LD_VAR 0 1
51415: PPUSH
51416: CALL_OW 255
51420: PPUSH
51421: LD_VAR 0 2
51425: PPUSH
51426: CALL_OW 292
51430: OR
51431: IFFALSE 51449
// ComAttackUnit ( unit , enemy ) else
51433: LD_VAR 0 1
51437: PPUSH
51438: LD_VAR 0 2
51442: PPUSH
51443: CALL_OW 115
51447: GO 51468
// ComAgressiveMove ( unit , x , y ) ;
51449: LD_VAR 0 1
51453: PPUSH
51454: LD_VAR 0 4
51458: PPUSH
51459: LD_VAR 0 5
51463: PPUSH
51464: CALL_OW 114
// end ;
51468: LD_VAR 0 3
51472: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51473: LD_INT 0
51475: PPUSH
51476: PPUSH
51477: PPUSH
// list := AreaToList ( area , 0 ) ;
51478: LD_ADDR_VAR 0 5
51482: PUSH
51483: LD_VAR 0 1
51487: PPUSH
51488: LD_INT 0
51490: PPUSH
51491: CALL_OW 517
51495: ST_TO_ADDR
// if not list then
51496: LD_VAR 0 5
51500: NOT
51501: IFFALSE 51505
// exit ;
51503: GO 51635
// if all then
51505: LD_VAR 0 2
51509: IFFALSE 51597
// begin for i := 1 to list [ 1 ] do
51511: LD_ADDR_VAR 0 4
51515: PUSH
51516: DOUBLE
51517: LD_INT 1
51519: DEC
51520: ST_TO_ADDR
51521: LD_VAR 0 5
51525: PUSH
51526: LD_INT 1
51528: ARRAY
51529: PUSH
51530: FOR_TO
51531: IFFALSE 51593
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51533: LD_ADDR_VAR 0 3
51537: PUSH
51538: LD_VAR 0 3
51542: PPUSH
51543: LD_VAR 0 3
51547: PUSH
51548: LD_INT 1
51550: PLUS
51551: PPUSH
51552: LD_VAR 0 5
51556: PUSH
51557: LD_INT 1
51559: ARRAY
51560: PUSH
51561: LD_VAR 0 4
51565: ARRAY
51566: PUSH
51567: LD_VAR 0 5
51571: PUSH
51572: LD_INT 2
51574: ARRAY
51575: PUSH
51576: LD_VAR 0 4
51580: ARRAY
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PPUSH
51586: CALL_OW 1
51590: ST_TO_ADDR
51591: GO 51530
51593: POP
51594: POP
// exit ;
51595: GO 51635
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51597: LD_ADDR_VAR 0 3
51601: PUSH
51602: LD_VAR 0 5
51606: PUSH
51607: LD_INT 1
51609: ARRAY
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: PUSH
51615: LD_VAR 0 5
51619: PUSH
51620: LD_INT 2
51622: ARRAY
51623: PUSH
51624: LD_INT 1
51626: ARRAY
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: EMPTY
51633: LIST
51634: ST_TO_ADDR
// end ;
51635: LD_VAR 0 3
51639: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51640: LD_INT 0
51642: PPUSH
51643: PPUSH
// list := AreaToList ( area , 0 ) ;
51644: LD_ADDR_VAR 0 4
51648: PUSH
51649: LD_VAR 0 1
51653: PPUSH
51654: LD_INT 0
51656: PPUSH
51657: CALL_OW 517
51661: ST_TO_ADDR
// if not list then
51662: LD_VAR 0 4
51666: NOT
51667: IFFALSE 51671
// exit ;
51669: GO 51712
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51671: LD_ADDR_VAR 0 3
51675: PUSH
51676: LD_VAR 0 4
51680: PUSH
51681: LD_INT 1
51683: ARRAY
51684: PUSH
51685: LD_INT 1
51687: ARRAY
51688: PUSH
51689: LD_VAR 0 4
51693: PUSH
51694: LD_INT 2
51696: ARRAY
51697: PUSH
51698: LD_INT 1
51700: ARRAY
51701: PUSH
51702: LD_VAR 0 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: ST_TO_ADDR
// end ;
51712: LD_VAR 0 3
51716: RET
// export function First ( array ) ; begin
51717: LD_INT 0
51719: PPUSH
// if not array then
51720: LD_VAR 0 1
51724: NOT
51725: IFFALSE 51729
// exit ;
51727: GO 51743
// result := array [ 1 ] ;
51729: LD_ADDR_VAR 0 2
51733: PUSH
51734: LD_VAR 0 1
51738: PUSH
51739: LD_INT 1
51741: ARRAY
51742: ST_TO_ADDR
// end ;
51743: LD_VAR 0 2
51747: RET
// export function Last ( array ) ; begin
51748: LD_INT 0
51750: PPUSH
// if not array then
51751: LD_VAR 0 1
51755: NOT
51756: IFFALSE 51760
// exit ;
51758: GO 51776
// result := array [ array ] ;
51760: LD_ADDR_VAR 0 2
51764: PUSH
51765: LD_VAR 0 1
51769: PUSH
51770: LD_VAR 0 1
51774: ARRAY
51775: ST_TO_ADDR
// end ;
51776: LD_VAR 0 2
51780: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51781: LD_INT 0
51783: PPUSH
51784: PPUSH
// result := [ ] ;
51785: LD_ADDR_VAR 0 5
51789: PUSH
51790: EMPTY
51791: ST_TO_ADDR
// if not array then
51792: LD_VAR 0 1
51796: NOT
51797: IFFALSE 51801
// exit ;
51799: GO 51913
// for i := 1 to array do
51801: LD_ADDR_VAR 0 6
51805: PUSH
51806: DOUBLE
51807: LD_INT 1
51809: DEC
51810: ST_TO_ADDR
51811: LD_VAR 0 1
51815: PUSH
51816: FOR_TO
51817: IFFALSE 51911
// if array [ i ] [ index ] = value then
51819: LD_VAR 0 1
51823: PUSH
51824: LD_VAR 0 6
51828: ARRAY
51829: PUSH
51830: LD_VAR 0 2
51834: ARRAY
51835: PUSH
51836: LD_VAR 0 3
51840: EQUAL
51841: IFFALSE 51909
// begin if indexColumn then
51843: LD_VAR 0 4
51847: IFFALSE 51883
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51849: LD_ADDR_VAR 0 5
51853: PUSH
51854: LD_VAR 0 5
51858: PPUSH
51859: LD_VAR 0 1
51863: PUSH
51864: LD_VAR 0 6
51868: ARRAY
51869: PUSH
51870: LD_VAR 0 4
51874: ARRAY
51875: PPUSH
51876: CALL 47095 0 2
51880: ST_TO_ADDR
51881: GO 51909
// result := Join ( result , array [ i ] ) ;
51883: LD_ADDR_VAR 0 5
51887: PUSH
51888: LD_VAR 0 5
51892: PPUSH
51893: LD_VAR 0 1
51897: PUSH
51898: LD_VAR 0 6
51902: ARRAY
51903: PPUSH
51904: CALL 47095 0 2
51908: ST_TO_ADDR
// end ;
51909: GO 51816
51911: POP
51912: POP
// end ;
51913: LD_VAR 0 5
51917: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51918: LD_INT 0
51920: PPUSH
// if not vehicles or not parkingPoint then
51921: LD_VAR 0 1
51925: NOT
51926: PUSH
51927: LD_VAR 0 2
51931: NOT
51932: OR
51933: IFFALSE 51937
// exit ;
51935: GO 52035
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51937: LD_ADDR_VAR 0 1
51941: PUSH
51942: LD_VAR 0 1
51946: PPUSH
51947: LD_INT 50
51949: PUSH
51950: EMPTY
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: LD_INT 92
51958: PUSH
51959: LD_VAR 0 2
51963: PUSH
51964: LD_INT 1
51966: ARRAY
51967: PUSH
51968: LD_VAR 0 2
51972: PUSH
51973: LD_INT 2
51975: ARRAY
51976: PUSH
51977: LD_INT 8
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PPUSH
51994: CALL_OW 72
51998: ST_TO_ADDR
// if not vehicles then
51999: LD_VAR 0 1
52003: NOT
52004: IFFALSE 52008
// exit ;
52006: GO 52035
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52008: LD_VAR 0 1
52012: PPUSH
52013: LD_VAR 0 2
52017: PUSH
52018: LD_INT 1
52020: ARRAY
52021: PPUSH
52022: LD_VAR 0 2
52026: PUSH
52027: LD_INT 2
52029: ARRAY
52030: PPUSH
52031: CALL_OW 111
// end ;
52035: LD_VAR 0 3
52039: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52040: LD_INT 0
52042: PPUSH
52043: PPUSH
52044: PPUSH
// if not side or not area then
52045: LD_VAR 0 1
52049: NOT
52050: PUSH
52051: LD_VAR 0 2
52055: NOT
52056: OR
52057: IFFALSE 52061
// exit ;
52059: GO 52180
// tmp := AreaToList ( area , 0 ) ;
52061: LD_ADDR_VAR 0 5
52065: PUSH
52066: LD_VAR 0 2
52070: PPUSH
52071: LD_INT 0
52073: PPUSH
52074: CALL_OW 517
52078: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52079: LD_ADDR_VAR 0 4
52083: PUSH
52084: DOUBLE
52085: LD_INT 1
52087: DEC
52088: ST_TO_ADDR
52089: LD_VAR 0 5
52093: PUSH
52094: LD_INT 1
52096: ARRAY
52097: PUSH
52098: FOR_TO
52099: IFFALSE 52178
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52101: LD_VAR 0 5
52105: PUSH
52106: LD_INT 1
52108: ARRAY
52109: PUSH
52110: LD_VAR 0 4
52114: ARRAY
52115: PPUSH
52116: LD_VAR 0 5
52120: PUSH
52121: LD_INT 2
52123: ARRAY
52124: PUSH
52125: LD_VAR 0 4
52129: ARRAY
52130: PPUSH
52131: CALL_OW 351
52135: IFFALSE 52176
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52137: LD_VAR 0 5
52141: PUSH
52142: LD_INT 1
52144: ARRAY
52145: PUSH
52146: LD_VAR 0 4
52150: ARRAY
52151: PPUSH
52152: LD_VAR 0 5
52156: PUSH
52157: LD_INT 2
52159: ARRAY
52160: PUSH
52161: LD_VAR 0 4
52165: ARRAY
52166: PPUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 244
// end ;
52176: GO 52098
52178: POP
52179: POP
// end ; end_of_file
52180: LD_VAR 0 3
52184: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52185: LD_VAR 0 1
52189: PUSH
52190: LD_INT 200
52192: DOUBLE
52193: GREATEREQUAL
52194: IFFALSE 52202
52196: LD_INT 299
52198: DOUBLE
52199: LESSEQUAL
52200: IFTRUE 52204
52202: GO 52236
52204: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52205: LD_VAR 0 1
52209: PPUSH
52210: LD_VAR 0 2
52214: PPUSH
52215: LD_VAR 0 3
52219: PPUSH
52220: LD_VAR 0 4
52224: PPUSH
52225: LD_VAR 0 5
52229: PPUSH
52230: CALL 53013 0 5
52234: GO 52313
52236: LD_INT 300
52238: DOUBLE
52239: GREATEREQUAL
52240: IFFALSE 52248
52242: LD_INT 399
52244: DOUBLE
52245: LESSEQUAL
52246: IFTRUE 52250
52248: GO 52312
52250: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52251: LD_VAR 0 1
52255: PPUSH
52256: LD_VAR 0 2
52260: PPUSH
52261: LD_VAR 0 3
52265: PPUSH
52266: LD_VAR 0 4
52270: PPUSH
52271: LD_VAR 0 5
52275: PPUSH
52276: LD_VAR 0 6
52280: PPUSH
52281: LD_VAR 0 7
52285: PPUSH
52286: LD_VAR 0 8
52290: PPUSH
52291: LD_VAR 0 9
52295: PPUSH
52296: LD_VAR 0 10
52300: PPUSH
52301: LD_VAR 0 11
52305: PPUSH
52306: CALL 59940 0 11
52310: GO 52313
52312: POP
// end ;
52313: PPOPN 11
52315: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52316: LD_VAR 0 1
52320: PPUSH
52321: LD_VAR 0 2
52325: PPUSH
52326: LD_VAR 0 3
52330: PPUSH
52331: LD_VAR 0 4
52335: PPUSH
52336: LD_VAR 0 5
52340: PPUSH
52341: CALL 52398 0 5
// end ; end_of_file
52345: PPOPN 5
52347: END
// export function SOS_UnitDestroyed ( un ) ; begin
52348: LD_INT 0
52350: PPUSH
// ComRadiation ( un ) ;
52351: LD_VAR 0 1
52355: PPUSH
52356: CALL 53417 0 1
// end ;
52360: LD_VAR 0 2
52364: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52365: LD_INT 0
52367: PPUSH
// ComRadiation ( un ) ;
52368: LD_VAR 0 1
52372: PPUSH
52373: CALL 53417 0 1
// end ;
52377: LD_VAR 0 2
52381: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52382: LD_INT 0
52384: PPUSH
// end ;
52385: LD_VAR 0 4
52389: RET
// export function SOS_Command ( cmd ) ; begin
52390: LD_INT 0
52392: PPUSH
// end ;
52393: LD_VAR 0 2
52397: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52398: LD_INT 0
52400: PPUSH
// end ;
52401: LD_VAR 0 6
52405: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
52406: LD_INT 0
52408: PPUSH
52409: PPUSH
52410: PPUSH
52411: PPUSH
// if not vehicle or not factory then
52412: LD_VAR 0 1
52416: NOT
52417: PUSH
52418: LD_VAR 0 2
52422: NOT
52423: OR
52424: IFFALSE 52428
// exit ;
52426: GO 53008
// if not factoryWaypoints then
52428: LD_EXP 55
52432: NOT
52433: IFFALSE 52437
// exit ;
52435: GO 53008
// for i := 1 to Count ( factoryWaypoints ) do
52437: LD_ADDR_VAR 0 4
52441: PUSH
52442: DOUBLE
52443: LD_INT 1
52445: DEC
52446: ST_TO_ADDR
52447: LD_EXP 55
52451: PPUSH
52452: CALL 11486 0 1
52456: PUSH
52457: FOR_TO
52458: IFFALSE 53006
// if factoryWaypoints [ i ] [ 2 ] = factory then
52460: LD_EXP 55
52464: PUSH
52465: LD_VAR 0 4
52469: ARRAY
52470: PUSH
52471: LD_INT 2
52473: ARRAY
52474: PUSH
52475: LD_VAR 0 2
52479: EQUAL
52480: IFFALSE 53004
// begin if GetControl ( vehicle ) = control_manual then
52482: LD_VAR 0 1
52486: PPUSH
52487: CALL_OW 263
52491: PUSH
52492: LD_INT 1
52494: EQUAL
52495: IFFALSE 52857
// begin driver := IsDrivenBy ( vehicle ) ;
52497: LD_ADDR_VAR 0 5
52501: PUSH
52502: LD_VAR 0 1
52506: PPUSH
52507: CALL_OW 311
52511: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
52512: LD_VAR 0 5
52516: PUSH
52517: LD_EXP 56
52521: IN
52522: PUSH
52523: LD_VAR 0 1
52527: PUSH
52528: LD_EXP 56
52532: IN
52533: OR
52534: IFFALSE 52540
// exit ;
52536: POP
52537: POP
52538: GO 53008
// if not HasTask ( driver ) then
52540: LD_VAR 0 5
52544: PPUSH
52545: CALL_OW 314
52549: NOT
52550: IFFALSE 52855
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
52552: LD_ADDR_EXP 56
52556: PUSH
52557: LD_EXP 56
52561: PPUSH
52562: LD_VAR 0 5
52566: PPUSH
52567: CALL 47095 0 2
52571: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
52572: LD_ADDR_EXP 56
52576: PUSH
52577: LD_EXP 56
52581: PPUSH
52582: LD_VAR 0 1
52586: PPUSH
52587: CALL 47095 0 2
52591: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52592: LD_ADDR_VAR 0 6
52596: PUSH
52597: LD_EXP 55
52601: PUSH
52602: LD_VAR 0 4
52606: ARRAY
52607: PUSH
52608: LD_INT 3
52610: ARRAY
52611: PPUSH
52612: LD_EXP 55
52616: PUSH
52617: LD_VAR 0 4
52621: ARRAY
52622: PUSH
52623: LD_INT 4
52625: ARRAY
52626: PPUSH
52627: CALL_OW 428
52631: ST_TO_ADDR
// if hex then
52632: LD_VAR 0 6
52636: IFFALSE 52654
// ComMoveUnit ( driver , hex ) else
52638: LD_VAR 0 5
52642: PPUSH
52643: LD_VAR 0 6
52647: PPUSH
52648: CALL_OW 112
52652: GO 52738
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
52654: LD_VAR 0 1
52658: PPUSH
52659: LD_EXP 55
52663: PUSH
52664: LD_VAR 0 4
52668: ARRAY
52669: PUSH
52670: LD_INT 3
52672: ARRAY
52673: PPUSH
52674: LD_EXP 55
52678: PUSH
52679: LD_VAR 0 4
52683: ARRAY
52684: PUSH
52685: LD_INT 4
52687: ARRAY
52688: PPUSH
52689: CALL_OW 297
52693: PUSH
52694: LD_INT 0
52696: GREATER
52697: IFFALSE 52738
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52699: LD_VAR 0 5
52703: PPUSH
52704: LD_EXP 55
52708: PUSH
52709: LD_VAR 0 4
52713: ARRAY
52714: PUSH
52715: LD_INT 3
52717: ARRAY
52718: PPUSH
52719: LD_EXP 55
52723: PUSH
52724: LD_VAR 0 4
52728: ARRAY
52729: PUSH
52730: LD_INT 4
52732: ARRAY
52733: PPUSH
52734: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52738: LD_VAR 0 5
52742: PPUSH
52743: CALL_OW 181
// if Multiplayer then
52747: LD_OWVAR 4
52751: IFFALSE 52800
// begin repeat wait ( 10 ) ;
52753: LD_INT 10
52755: PPUSH
52756: CALL_OW 67
// until not IsInUnit ( driver ) ;
52760: LD_VAR 0 5
52764: PPUSH
52765: CALL_OW 310
52769: NOT
52770: IFFALSE 52753
// if not HasTask ( driver ) then
52772: LD_VAR 0 5
52776: PPUSH
52777: CALL_OW 314
52781: NOT
52782: IFFALSE 52798
// ComEnterUnit ( driver , factory ) ;
52784: LD_VAR 0 5
52788: PPUSH
52789: LD_VAR 0 2
52793: PPUSH
52794: CALL_OW 120
// end else
52798: GO 52814
// AddComEnterUnit ( driver , factory ) ;
52800: LD_VAR 0 5
52804: PPUSH
52805: LD_VAR 0 2
52809: PPUSH
52810: CALL_OW 180
// wait ( 0 0$1 ) ;
52814: LD_INT 35
52816: PPUSH
52817: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
52821: LD_ADDR_EXP 56
52825: PUSH
52826: LD_EXP 56
52830: PUSH
52831: LD_VAR 0 5
52835: DIFF
52836: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
52837: LD_ADDR_EXP 56
52841: PUSH
52842: LD_EXP 56
52846: PUSH
52847: LD_VAR 0 1
52851: DIFF
52852: ST_TO_ADDR
// break ;
52853: GO 53006
// end ; end else
52855: GO 53004
// if GetControl ( vehicle ) = control_remote then
52857: LD_VAR 0 1
52861: PPUSH
52862: CALL_OW 263
52866: PUSH
52867: LD_INT 2
52869: EQUAL
52870: IFFALSE 52956
// begin wait ( 0 0$2 ) ;
52872: LD_INT 70
52874: PPUSH
52875: CALL_OW 67
// repeat wait ( 10 ) ;
52879: LD_INT 10
52881: PPUSH
52882: CALL_OW 67
// Connect ( vehicle ) ;
52886: LD_VAR 0 1
52890: PPUSH
52891: CALL 17692 0 1
// until IsControledBy ( vehicle ) ;
52895: LD_VAR 0 1
52899: PPUSH
52900: CALL_OW 312
52904: IFFALSE 52879
// wait ( 10 ) ;
52906: LD_INT 10
52908: PPUSH
52909: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52913: LD_VAR 0 1
52917: PPUSH
52918: LD_EXP 55
52922: PUSH
52923: LD_VAR 0 4
52927: ARRAY
52928: PUSH
52929: LD_INT 3
52931: ARRAY
52932: PPUSH
52933: LD_EXP 55
52937: PUSH
52938: LD_VAR 0 4
52942: ARRAY
52943: PUSH
52944: LD_INT 4
52946: ARRAY
52947: PPUSH
52948: CALL_OW 111
// break ;
52952: GO 53006
// end else
52954: GO 53004
// begin wait ( 0 0$3 ) ;
52956: LD_INT 105
52958: PPUSH
52959: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52963: LD_VAR 0 1
52967: PPUSH
52968: LD_EXP 55
52972: PUSH
52973: LD_VAR 0 4
52977: ARRAY
52978: PUSH
52979: LD_INT 3
52981: ARRAY
52982: PPUSH
52983: LD_EXP 55
52987: PUSH
52988: LD_VAR 0 4
52992: ARRAY
52993: PUSH
52994: LD_INT 4
52996: ARRAY
52997: PPUSH
52998: CALL_OW 111
// break ;
53002: GO 53006
// end ; end ;
53004: GO 52457
53006: POP
53007: POP
// end ;
53008: LD_VAR 0 3
53012: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53013: LD_INT 0
53015: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53016: LD_VAR 0 1
53020: PUSH
53021: LD_INT 250
53023: EQUAL
53024: PUSH
53025: LD_VAR 0 2
53029: PPUSH
53030: CALL_OW 264
53034: PUSH
53035: LD_INT 81
53037: EQUAL
53038: AND
53039: IFFALSE 53060
// MinerPlaceMine ( unit , x , y ) ;
53041: LD_VAR 0 2
53045: PPUSH
53046: LD_VAR 0 4
53050: PPUSH
53051: LD_VAR 0 5
53055: PPUSH
53056: CALL 56152 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53060: LD_VAR 0 1
53064: PUSH
53065: LD_INT 251
53067: EQUAL
53068: PUSH
53069: LD_VAR 0 2
53073: PPUSH
53074: CALL_OW 264
53078: PUSH
53079: LD_INT 81
53081: EQUAL
53082: AND
53083: IFFALSE 53104
// MinerDetonateMine ( unit , x , y ) ;
53085: LD_VAR 0 2
53089: PPUSH
53090: LD_VAR 0 4
53094: PPUSH
53095: LD_VAR 0 5
53099: PPUSH
53100: CALL 56427 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53104: LD_VAR 0 1
53108: PUSH
53109: LD_INT 252
53111: EQUAL
53112: PUSH
53113: LD_VAR 0 2
53117: PPUSH
53118: CALL_OW 264
53122: PUSH
53123: LD_INT 81
53125: EQUAL
53126: AND
53127: IFFALSE 53148
// MinerCreateMinefield ( unit , x , y ) ;
53129: LD_VAR 0 2
53133: PPUSH
53134: LD_VAR 0 4
53138: PPUSH
53139: LD_VAR 0 5
53143: PPUSH
53144: CALL 56844 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53148: LD_VAR 0 1
53152: PUSH
53153: LD_INT 253
53155: EQUAL
53156: PUSH
53157: LD_VAR 0 2
53161: PPUSH
53162: CALL_OW 257
53166: PUSH
53167: LD_INT 5
53169: EQUAL
53170: AND
53171: IFFALSE 53192
// ComBinocular ( unit , x , y ) ;
53173: LD_VAR 0 2
53177: PPUSH
53178: LD_VAR 0 4
53182: PPUSH
53183: LD_VAR 0 5
53187: PPUSH
53188: CALL 57213 0 3
// if selectedUnit then
53192: LD_VAR 0 3
53196: IFFALSE 53252
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53198: LD_VAR 0 1
53202: PUSH
53203: LD_INT 254
53205: EQUAL
53206: PUSH
53207: LD_VAR 0 2
53211: PPUSH
53212: CALL_OW 264
53216: PUSH
53217: LD_INT 99
53219: EQUAL
53220: AND
53221: PUSH
53222: LD_VAR 0 3
53226: PPUSH
53227: CALL_OW 263
53231: PUSH
53232: LD_INT 3
53234: EQUAL
53235: AND
53236: IFFALSE 53252
// HackDestroyVehicle ( unit , selectedUnit ) ;
53238: LD_VAR 0 2
53242: PPUSH
53243: LD_VAR 0 3
53247: PPUSH
53248: CALL 55516 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53252: LD_VAR 0 1
53256: PUSH
53257: LD_INT 255
53259: EQUAL
53260: PUSH
53261: LD_VAR 0 2
53265: PPUSH
53266: CALL_OW 264
53270: PUSH
53271: LD_INT 14
53273: PUSH
53274: LD_INT 53
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: IN
53281: AND
53282: PUSH
53283: LD_VAR 0 4
53287: PPUSH
53288: LD_VAR 0 5
53292: PPUSH
53293: CALL_OW 488
53297: AND
53298: IFFALSE 53322
// CutTreeXYR ( unit , x , y , 12 ) ;
53300: LD_VAR 0 2
53304: PPUSH
53305: LD_VAR 0 4
53309: PPUSH
53310: LD_VAR 0 5
53314: PPUSH
53315: LD_INT 12
53317: PPUSH
53318: CALL 53513 0 4
// if cmd = 256 then
53322: LD_VAR 0 1
53326: PUSH
53327: LD_INT 256
53329: EQUAL
53330: IFFALSE 53351
// SetFactoryWaypoint ( unit , x , y ) ;
53332: LD_VAR 0 2
53336: PPUSH
53337: LD_VAR 0 4
53341: PPUSH
53342: LD_VAR 0 5
53346: PPUSH
53347: CALL 59948 0 3
// if cmd = 257 then
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 257
53358: EQUAL
53359: IFFALSE 53380
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53361: LD_VAR 0 2
53365: PPUSH
53366: LD_VAR 0 4
53370: PPUSH
53371: LD_VAR 0 5
53375: PPUSH
53376: CALL 60438 0 3
// if cmd = 258 then
53380: LD_VAR 0 1
53384: PUSH
53385: LD_INT 258
53387: EQUAL
53388: IFFALSE 53412
// BurnTreeXYR ( unit , x , y , 8 ) ;
53390: LD_VAR 0 2
53394: PPUSH
53395: LD_VAR 0 4
53399: PPUSH
53400: LD_VAR 0 5
53404: PPUSH
53405: LD_INT 8
53407: PPUSH
53408: CALL 53907 0 4
// end ;
53412: LD_VAR 0 6
53416: RET
// export function ComRadiation ( un ) ; var eff ; begin
53417: LD_INT 0
53419: PPUSH
53420: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53421: LD_VAR 0 1
53425: PPUSH
53426: CALL_OW 264
53430: PUSH
53431: LD_INT 91
53433: NONEQUAL
53434: IFFALSE 53438
// exit ;
53436: GO 53508
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53438: LD_INT 68
53440: PPUSH
53441: LD_VAR 0 1
53445: PPUSH
53446: CALL_OW 255
53450: PPUSH
53451: CALL_OW 321
53455: PUSH
53456: LD_INT 2
53458: EQUAL
53459: IFFALSE 53471
// eff := 50 else
53461: LD_ADDR_VAR 0 3
53465: PUSH
53466: LD_INT 50
53468: ST_TO_ADDR
53469: GO 53479
// eff := 25 ;
53471: LD_ADDR_VAR 0 3
53475: PUSH
53476: LD_INT 25
53478: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53479: LD_VAR 0 1
53483: PPUSH
53484: CALL_OW 250
53488: PPUSH
53489: LD_VAR 0 1
53493: PPUSH
53494: CALL_OW 251
53498: PPUSH
53499: LD_VAR 0 3
53503: PPUSH
53504: CALL_OW 495
// end ;
53508: LD_VAR 0 2
53512: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53513: LD_INT 0
53515: PPUSH
53516: PPUSH
53517: PPUSH
53518: PPUSH
53519: PPUSH
53520: PPUSH
53521: PPUSH
53522: PPUSH
53523: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53524: LD_VAR 0 1
53528: PPUSH
53529: CALL_OW 302
53533: NOT
53534: PUSH
53535: LD_VAR 0 2
53539: PPUSH
53540: LD_VAR 0 3
53544: PPUSH
53545: CALL_OW 488
53549: NOT
53550: OR
53551: PUSH
53552: LD_VAR 0 4
53556: NOT
53557: OR
53558: IFFALSE 53562
// exit ;
53560: GO 53902
// list := [ ] ;
53562: LD_ADDR_VAR 0 13
53566: PUSH
53567: EMPTY
53568: ST_TO_ADDR
// if x - r < 0 then
53569: LD_VAR 0 2
53573: PUSH
53574: LD_VAR 0 4
53578: MINUS
53579: PUSH
53580: LD_INT 0
53582: LESS
53583: IFFALSE 53595
// min_x := 0 else
53585: LD_ADDR_VAR 0 7
53589: PUSH
53590: LD_INT 0
53592: ST_TO_ADDR
53593: GO 53611
// min_x := x - r ;
53595: LD_ADDR_VAR 0 7
53599: PUSH
53600: LD_VAR 0 2
53604: PUSH
53605: LD_VAR 0 4
53609: MINUS
53610: ST_TO_ADDR
// if y - r < 0 then
53611: LD_VAR 0 3
53615: PUSH
53616: LD_VAR 0 4
53620: MINUS
53621: PUSH
53622: LD_INT 0
53624: LESS
53625: IFFALSE 53637
// min_y := 0 else
53627: LD_ADDR_VAR 0 8
53631: PUSH
53632: LD_INT 0
53634: ST_TO_ADDR
53635: GO 53653
// min_y := y - r ;
53637: LD_ADDR_VAR 0 8
53641: PUSH
53642: LD_VAR 0 3
53646: PUSH
53647: LD_VAR 0 4
53651: MINUS
53652: ST_TO_ADDR
// max_x := x + r ;
53653: LD_ADDR_VAR 0 9
53657: PUSH
53658: LD_VAR 0 2
53662: PUSH
53663: LD_VAR 0 4
53667: PLUS
53668: ST_TO_ADDR
// max_y := y + r ;
53669: LD_ADDR_VAR 0 10
53673: PUSH
53674: LD_VAR 0 3
53678: PUSH
53679: LD_VAR 0 4
53683: PLUS
53684: ST_TO_ADDR
// for _x = min_x to max_x do
53685: LD_ADDR_VAR 0 11
53689: PUSH
53690: DOUBLE
53691: LD_VAR 0 7
53695: DEC
53696: ST_TO_ADDR
53697: LD_VAR 0 9
53701: PUSH
53702: FOR_TO
53703: IFFALSE 53820
// for _y = min_y to max_y do
53705: LD_ADDR_VAR 0 12
53709: PUSH
53710: DOUBLE
53711: LD_VAR 0 8
53715: DEC
53716: ST_TO_ADDR
53717: LD_VAR 0 10
53721: PUSH
53722: FOR_TO
53723: IFFALSE 53816
// begin if not ValidHex ( _x , _y ) then
53725: LD_VAR 0 11
53729: PPUSH
53730: LD_VAR 0 12
53734: PPUSH
53735: CALL_OW 488
53739: NOT
53740: IFFALSE 53744
// continue ;
53742: GO 53722
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53744: LD_VAR 0 11
53748: PPUSH
53749: LD_VAR 0 12
53753: PPUSH
53754: CALL_OW 351
53758: PUSH
53759: LD_VAR 0 11
53763: PPUSH
53764: LD_VAR 0 12
53768: PPUSH
53769: CALL_OW 554
53773: AND
53774: IFFALSE 53814
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53776: LD_ADDR_VAR 0 13
53780: PUSH
53781: LD_VAR 0 13
53785: PPUSH
53786: LD_VAR 0 13
53790: PUSH
53791: LD_INT 1
53793: PLUS
53794: PPUSH
53795: LD_VAR 0 11
53799: PUSH
53800: LD_VAR 0 12
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PPUSH
53809: CALL_OW 2
53813: ST_TO_ADDR
// end ;
53814: GO 53722
53816: POP
53817: POP
53818: GO 53702
53820: POP
53821: POP
// if not list then
53822: LD_VAR 0 13
53826: NOT
53827: IFFALSE 53831
// exit ;
53829: GO 53902
// for i in list do
53831: LD_ADDR_VAR 0 6
53835: PUSH
53836: LD_VAR 0 13
53840: PUSH
53841: FOR_IN
53842: IFFALSE 53900
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53844: LD_VAR 0 1
53848: PPUSH
53849: LD_STRING M
53851: PUSH
53852: LD_VAR 0 6
53856: PUSH
53857: LD_INT 1
53859: ARRAY
53860: PUSH
53861: LD_VAR 0 6
53865: PUSH
53866: LD_INT 2
53868: ARRAY
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: PPUSH
53894: CALL_OW 447
53898: GO 53841
53900: POP
53901: POP
// end ;
53902: LD_VAR 0 5
53906: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53907: LD_INT 0
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53919: LD_VAR 0 1
53923: PPUSH
53924: CALL_OW 302
53928: NOT
53929: PUSH
53930: LD_VAR 0 2
53934: PPUSH
53935: LD_VAR 0 3
53939: PPUSH
53940: CALL_OW 488
53944: NOT
53945: OR
53946: PUSH
53947: LD_VAR 0 4
53951: NOT
53952: OR
53953: IFFALSE 53957
// exit ;
53955: GO 54470
// list := [ ] ;
53957: LD_ADDR_VAR 0 13
53961: PUSH
53962: EMPTY
53963: ST_TO_ADDR
// if x - r < 0 then
53964: LD_VAR 0 2
53968: PUSH
53969: LD_VAR 0 4
53973: MINUS
53974: PUSH
53975: LD_INT 0
53977: LESS
53978: IFFALSE 53990
// min_x := 0 else
53980: LD_ADDR_VAR 0 7
53984: PUSH
53985: LD_INT 0
53987: ST_TO_ADDR
53988: GO 54006
// min_x := x - r ;
53990: LD_ADDR_VAR 0 7
53994: PUSH
53995: LD_VAR 0 2
53999: PUSH
54000: LD_VAR 0 4
54004: MINUS
54005: ST_TO_ADDR
// if y - r < 0 then
54006: LD_VAR 0 3
54010: PUSH
54011: LD_VAR 0 4
54015: MINUS
54016: PUSH
54017: LD_INT 0
54019: LESS
54020: IFFALSE 54032
// min_y := 0 else
54022: LD_ADDR_VAR 0 8
54026: PUSH
54027: LD_INT 0
54029: ST_TO_ADDR
54030: GO 54048
// min_y := y - r ;
54032: LD_ADDR_VAR 0 8
54036: PUSH
54037: LD_VAR 0 3
54041: PUSH
54042: LD_VAR 0 4
54046: MINUS
54047: ST_TO_ADDR
// max_x := x + r ;
54048: LD_ADDR_VAR 0 9
54052: PUSH
54053: LD_VAR 0 2
54057: PUSH
54058: LD_VAR 0 4
54062: PLUS
54063: ST_TO_ADDR
// max_y := y + r ;
54064: LD_ADDR_VAR 0 10
54068: PUSH
54069: LD_VAR 0 3
54073: PUSH
54074: LD_VAR 0 4
54078: PLUS
54079: ST_TO_ADDR
// for _x = min_x to max_x do
54080: LD_ADDR_VAR 0 11
54084: PUSH
54085: DOUBLE
54086: LD_VAR 0 7
54090: DEC
54091: ST_TO_ADDR
54092: LD_VAR 0 9
54096: PUSH
54097: FOR_TO
54098: IFFALSE 54215
// for _y = min_y to max_y do
54100: LD_ADDR_VAR 0 12
54104: PUSH
54105: DOUBLE
54106: LD_VAR 0 8
54110: DEC
54111: ST_TO_ADDR
54112: LD_VAR 0 10
54116: PUSH
54117: FOR_TO
54118: IFFALSE 54211
// begin if not ValidHex ( _x , _y ) then
54120: LD_VAR 0 11
54124: PPUSH
54125: LD_VAR 0 12
54129: PPUSH
54130: CALL_OW 488
54134: NOT
54135: IFFALSE 54139
// continue ;
54137: GO 54117
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54139: LD_VAR 0 11
54143: PPUSH
54144: LD_VAR 0 12
54148: PPUSH
54149: CALL_OW 351
54153: PUSH
54154: LD_VAR 0 11
54158: PPUSH
54159: LD_VAR 0 12
54163: PPUSH
54164: CALL_OW 554
54168: AND
54169: IFFALSE 54209
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54171: LD_ADDR_VAR 0 13
54175: PUSH
54176: LD_VAR 0 13
54180: PPUSH
54181: LD_VAR 0 13
54185: PUSH
54186: LD_INT 1
54188: PLUS
54189: PPUSH
54190: LD_VAR 0 11
54194: PUSH
54195: LD_VAR 0 12
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PPUSH
54204: CALL_OW 2
54208: ST_TO_ADDR
// end ;
54209: GO 54117
54211: POP
54212: POP
54213: GO 54097
54215: POP
54216: POP
// if not list then
54217: LD_VAR 0 13
54221: NOT
54222: IFFALSE 54226
// exit ;
54224: GO 54470
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54226: LD_ADDR_VAR 0 13
54230: PUSH
54231: LD_VAR 0 1
54235: PPUSH
54236: LD_VAR 0 13
54240: PPUSH
54241: LD_INT 1
54243: PPUSH
54244: LD_INT 1
54246: PPUSH
54247: CALL 14834 0 4
54251: ST_TO_ADDR
// ComStop ( flame ) ;
54252: LD_VAR 0 1
54256: PPUSH
54257: CALL_OW 141
// for i in list do
54261: LD_ADDR_VAR 0 6
54265: PUSH
54266: LD_VAR 0 13
54270: PUSH
54271: FOR_IN
54272: IFFALSE 54303
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54274: LD_VAR 0 1
54278: PPUSH
54279: LD_VAR 0 6
54283: PUSH
54284: LD_INT 1
54286: ARRAY
54287: PPUSH
54288: LD_VAR 0 6
54292: PUSH
54293: LD_INT 2
54295: ARRAY
54296: PPUSH
54297: CALL_OW 176
54301: GO 54271
54303: POP
54304: POP
// repeat wait ( 0 0$1 ) ;
54305: LD_INT 35
54307: PPUSH
54308: CALL_OW 67
// task := GetTaskList ( flame ) ;
54312: LD_ADDR_VAR 0 14
54316: PUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: CALL_OW 437
54326: ST_TO_ADDR
// if not task then
54327: LD_VAR 0 14
54331: NOT
54332: IFFALSE 54336
// exit ;
54334: GO 54470
// if task [ 1 ] [ 1 ] <> | then
54336: LD_VAR 0 14
54340: PUSH
54341: LD_INT 1
54343: ARRAY
54344: PUSH
54345: LD_INT 1
54347: ARRAY
54348: PUSH
54349: LD_STRING |
54351: NONEQUAL
54352: IFFALSE 54356
// exit ;
54354: GO 54470
// _x := task [ 1 ] [ 2 ] ;
54356: LD_ADDR_VAR 0 11
54360: PUSH
54361: LD_VAR 0 14
54365: PUSH
54366: LD_INT 1
54368: ARRAY
54369: PUSH
54370: LD_INT 2
54372: ARRAY
54373: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54374: LD_ADDR_VAR 0 12
54378: PUSH
54379: LD_VAR 0 14
54383: PUSH
54384: LD_INT 1
54386: ARRAY
54387: PUSH
54388: LD_INT 3
54390: ARRAY
54391: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54392: LD_VAR 0 11
54396: PPUSH
54397: LD_VAR 0 12
54401: PPUSH
54402: CALL_OW 351
54406: NOT
54407: PUSH
54408: LD_VAR 0 11
54412: PPUSH
54413: LD_VAR 0 12
54417: PPUSH
54418: CALL_OW 554
54422: NOT
54423: OR
54424: IFFALSE 54458
// begin task := Delete ( task , 1 ) ;
54426: LD_ADDR_VAR 0 14
54430: PUSH
54431: LD_VAR 0 14
54435: PPUSH
54436: LD_INT 1
54438: PPUSH
54439: CALL_OW 3
54443: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54444: LD_VAR 0 1
54448: PPUSH
54449: LD_VAR 0 14
54453: PPUSH
54454: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54458: LD_VAR 0 1
54462: PPUSH
54463: CALL_OW 314
54467: NOT
54468: IFFALSE 54305
// end ;
54470: LD_VAR 0 5
54474: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54475: LD_EXP 44
54479: NOT
54480: IFFALSE 54530
54482: GO 54484
54484: DISABLE
// begin initHack := true ;
54485: LD_ADDR_EXP 44
54489: PUSH
54490: LD_INT 1
54492: ST_TO_ADDR
// hackTanks := [ ] ;
54493: LD_ADDR_EXP 45
54497: PUSH
54498: EMPTY
54499: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54500: LD_ADDR_EXP 46
54504: PUSH
54505: EMPTY
54506: ST_TO_ADDR
// hackLimit := 3 ;
54507: LD_ADDR_EXP 47
54511: PUSH
54512: LD_INT 3
54514: ST_TO_ADDR
// hackDist := 12 ;
54515: LD_ADDR_EXP 48
54519: PUSH
54520: LD_INT 12
54522: ST_TO_ADDR
// hackCounter := [ ] ;
54523: LD_ADDR_EXP 49
54527: PUSH
54528: EMPTY
54529: ST_TO_ADDR
// end ;
54530: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54531: LD_EXP 44
54535: PUSH
54536: LD_INT 34
54538: PUSH
54539: LD_INT 99
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PPUSH
54546: CALL_OW 69
54550: AND
54551: IFFALSE 54804
54553: GO 54555
54555: DISABLE
54556: LD_INT 0
54558: PPUSH
54559: PPUSH
// begin enable ;
54560: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54561: LD_ADDR_VAR 0 1
54565: PUSH
54566: LD_INT 34
54568: PUSH
54569: LD_INT 99
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PPUSH
54576: CALL_OW 69
54580: PUSH
54581: FOR_IN
54582: IFFALSE 54802
// begin if not i in hackTanks then
54584: LD_VAR 0 1
54588: PUSH
54589: LD_EXP 45
54593: IN
54594: NOT
54595: IFFALSE 54678
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54597: LD_ADDR_EXP 45
54601: PUSH
54602: LD_EXP 45
54606: PPUSH
54607: LD_EXP 45
54611: PUSH
54612: LD_INT 1
54614: PLUS
54615: PPUSH
54616: LD_VAR 0 1
54620: PPUSH
54621: CALL_OW 1
54625: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54626: LD_ADDR_EXP 46
54630: PUSH
54631: LD_EXP 46
54635: PPUSH
54636: LD_EXP 46
54640: PUSH
54641: LD_INT 1
54643: PLUS
54644: PPUSH
54645: EMPTY
54646: PPUSH
54647: CALL_OW 1
54651: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54652: LD_ADDR_EXP 49
54656: PUSH
54657: LD_EXP 49
54661: PPUSH
54662: LD_EXP 49
54666: PUSH
54667: LD_INT 1
54669: PLUS
54670: PPUSH
54671: EMPTY
54672: PPUSH
54673: CALL_OW 1
54677: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54678: LD_VAR 0 1
54682: PPUSH
54683: CALL_OW 302
54687: NOT
54688: IFFALSE 54701
// begin HackUnlinkAll ( i ) ;
54690: LD_VAR 0 1
54694: PPUSH
54695: CALL 54807 0 1
// continue ;
54699: GO 54581
// end ; HackCheckCapturedStatus ( i ) ;
54701: LD_VAR 0 1
54705: PPUSH
54706: CALL 55250 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54710: LD_ADDR_VAR 0 2
54714: PUSH
54715: LD_INT 81
54717: PUSH
54718: LD_VAR 0 1
54722: PPUSH
54723: CALL_OW 255
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 33
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 91
54744: PUSH
54745: LD_VAR 0 1
54749: PUSH
54750: LD_EXP 48
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 50
54762: PUSH
54763: EMPTY
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: PPUSH
54772: CALL_OW 69
54776: ST_TO_ADDR
// if not tmp then
54777: LD_VAR 0 2
54781: NOT
54782: IFFALSE 54786
// continue ;
54784: GO 54581
// HackLink ( i , tmp ) ;
54786: LD_VAR 0 1
54790: PPUSH
54791: LD_VAR 0 2
54795: PPUSH
54796: CALL 54943 0 2
// end ;
54800: GO 54581
54802: POP
54803: POP
// end ;
54804: PPOPN 2
54806: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54807: LD_INT 0
54809: PPUSH
54810: PPUSH
54811: PPUSH
// if not hack in hackTanks then
54812: LD_VAR 0 1
54816: PUSH
54817: LD_EXP 45
54821: IN
54822: NOT
54823: IFFALSE 54827
// exit ;
54825: GO 54938
// index := GetElementIndex ( hackTanks , hack ) ;
54827: LD_ADDR_VAR 0 4
54831: PUSH
54832: LD_EXP 45
54836: PPUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: CALL 14131 0 2
54846: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54847: LD_EXP 46
54851: PUSH
54852: LD_VAR 0 4
54856: ARRAY
54857: IFFALSE 54938
// begin for i in hackTanksCaptured [ index ] do
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: LD_EXP 46
54868: PUSH
54869: LD_VAR 0 4
54873: ARRAY
54874: PUSH
54875: FOR_IN
54876: IFFALSE 54902
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54878: LD_VAR 0 3
54882: PUSH
54883: LD_INT 1
54885: ARRAY
54886: PPUSH
54887: LD_VAR 0 3
54891: PUSH
54892: LD_INT 2
54894: ARRAY
54895: PPUSH
54896: CALL_OW 235
54900: GO 54875
54902: POP
54903: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54904: LD_ADDR_EXP 46
54908: PUSH
54909: LD_EXP 46
54913: PPUSH
54914: LD_VAR 0 4
54918: PPUSH
54919: EMPTY
54920: PPUSH
54921: CALL_OW 1
54925: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54926: LD_VAR 0 1
54930: PPUSH
54931: LD_INT 0
54933: PPUSH
54934: CALL_OW 505
// end ; end ;
54938: LD_VAR 0 2
54942: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54943: LD_INT 0
54945: PPUSH
54946: PPUSH
54947: PPUSH
// if not hack in hackTanks or not vehicles then
54948: LD_VAR 0 1
54952: PUSH
54953: LD_EXP 45
54957: IN
54958: NOT
54959: PUSH
54960: LD_VAR 0 2
54964: NOT
54965: OR
54966: IFFALSE 54970
// exit ;
54968: GO 55245
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54970: LD_ADDR_VAR 0 2
54974: PUSH
54975: LD_VAR 0 1
54979: PPUSH
54980: LD_VAR 0 2
54984: PPUSH
54985: LD_INT 1
54987: PPUSH
54988: LD_INT 1
54990: PPUSH
54991: CALL 14781 0 4
54995: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54996: LD_ADDR_VAR 0 5
55000: PUSH
55001: LD_EXP 45
55005: PPUSH
55006: LD_VAR 0 1
55010: PPUSH
55011: CALL 14131 0 2
55015: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55016: LD_EXP 46
55020: PUSH
55021: LD_VAR 0 5
55025: ARRAY
55026: PUSH
55027: LD_EXP 47
55031: LESS
55032: IFFALSE 55221
// begin for i := 1 to vehicles do
55034: LD_ADDR_VAR 0 4
55038: PUSH
55039: DOUBLE
55040: LD_INT 1
55042: DEC
55043: ST_TO_ADDR
55044: LD_VAR 0 2
55048: PUSH
55049: FOR_TO
55050: IFFALSE 55219
// begin if hackTanksCaptured [ index ] = hackLimit then
55052: LD_EXP 46
55056: PUSH
55057: LD_VAR 0 5
55061: ARRAY
55062: PUSH
55063: LD_EXP 47
55067: EQUAL
55068: IFFALSE 55072
// break ;
55070: GO 55219
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55072: LD_ADDR_EXP 49
55076: PUSH
55077: LD_EXP 49
55081: PPUSH
55082: LD_VAR 0 5
55086: PPUSH
55087: LD_EXP 49
55091: PUSH
55092: LD_VAR 0 5
55096: ARRAY
55097: PUSH
55098: LD_INT 1
55100: PLUS
55101: PPUSH
55102: CALL_OW 1
55106: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55107: LD_ADDR_EXP 46
55111: PUSH
55112: LD_EXP 46
55116: PPUSH
55117: LD_VAR 0 5
55121: PUSH
55122: LD_EXP 46
55126: PUSH
55127: LD_VAR 0 5
55131: ARRAY
55132: PUSH
55133: LD_INT 1
55135: PLUS
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PPUSH
55141: LD_VAR 0 2
55145: PUSH
55146: LD_VAR 0 4
55150: ARRAY
55151: PUSH
55152: LD_VAR 0 2
55156: PUSH
55157: LD_VAR 0 4
55161: ARRAY
55162: PPUSH
55163: CALL_OW 255
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PPUSH
55172: CALL 14346 0 3
55176: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55177: LD_VAR 0 2
55181: PUSH
55182: LD_VAR 0 4
55186: ARRAY
55187: PPUSH
55188: LD_VAR 0 1
55192: PPUSH
55193: CALL_OW 255
55197: PPUSH
55198: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55202: LD_VAR 0 2
55206: PUSH
55207: LD_VAR 0 4
55211: ARRAY
55212: PPUSH
55213: CALL_OW 141
// end ;
55217: GO 55049
55219: POP
55220: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55221: LD_VAR 0 1
55225: PPUSH
55226: LD_EXP 46
55230: PUSH
55231: LD_VAR 0 5
55235: ARRAY
55236: PUSH
55237: LD_INT 0
55239: PLUS
55240: PPUSH
55241: CALL_OW 505
// end ;
55245: LD_VAR 0 3
55249: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55250: LD_INT 0
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
// if not hack in hackTanks then
55256: LD_VAR 0 1
55260: PUSH
55261: LD_EXP 45
55265: IN
55266: NOT
55267: IFFALSE 55271
// exit ;
55269: GO 55511
// index := GetElementIndex ( hackTanks , hack ) ;
55271: LD_ADDR_VAR 0 4
55275: PUSH
55276: LD_EXP 45
55280: PPUSH
55281: LD_VAR 0 1
55285: PPUSH
55286: CALL 14131 0 2
55290: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55291: LD_ADDR_VAR 0 3
55295: PUSH
55296: DOUBLE
55297: LD_EXP 46
55301: PUSH
55302: LD_VAR 0 4
55306: ARRAY
55307: INC
55308: ST_TO_ADDR
55309: LD_INT 1
55311: PUSH
55312: FOR_DOWNTO
55313: IFFALSE 55485
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55315: LD_ADDR_VAR 0 5
55319: PUSH
55320: LD_EXP 46
55324: PUSH
55325: LD_VAR 0 4
55329: ARRAY
55330: PUSH
55331: LD_VAR 0 3
55335: ARRAY
55336: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55337: LD_VAR 0 5
55341: PUSH
55342: LD_INT 1
55344: ARRAY
55345: PPUSH
55346: CALL_OW 302
55350: NOT
55351: PUSH
55352: LD_VAR 0 5
55356: PUSH
55357: LD_INT 1
55359: ARRAY
55360: PPUSH
55361: CALL_OW 255
55365: PUSH
55366: LD_VAR 0 1
55370: PPUSH
55371: CALL_OW 255
55375: NONEQUAL
55376: OR
55377: IFFALSE 55483
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55379: LD_VAR 0 5
55383: PUSH
55384: LD_INT 1
55386: ARRAY
55387: PPUSH
55388: CALL_OW 305
55392: PUSH
55393: LD_VAR 0 5
55397: PUSH
55398: LD_INT 1
55400: ARRAY
55401: PPUSH
55402: CALL_OW 255
55406: PUSH
55407: LD_VAR 0 1
55411: PPUSH
55412: CALL_OW 255
55416: EQUAL
55417: AND
55418: IFFALSE 55442
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55420: LD_VAR 0 5
55424: PUSH
55425: LD_INT 1
55427: ARRAY
55428: PPUSH
55429: LD_VAR 0 5
55433: PUSH
55434: LD_INT 2
55436: ARRAY
55437: PPUSH
55438: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55442: LD_ADDR_EXP 46
55446: PUSH
55447: LD_EXP 46
55451: PPUSH
55452: LD_VAR 0 4
55456: PPUSH
55457: LD_EXP 46
55461: PUSH
55462: LD_VAR 0 4
55466: ARRAY
55467: PPUSH
55468: LD_VAR 0 3
55472: PPUSH
55473: CALL_OW 3
55477: PPUSH
55478: CALL_OW 1
55482: ST_TO_ADDR
// end ; end ;
55483: GO 55312
55485: POP
55486: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55487: LD_VAR 0 1
55491: PPUSH
55492: LD_EXP 46
55496: PUSH
55497: LD_VAR 0 4
55501: ARRAY
55502: PUSH
55503: LD_INT 0
55505: PLUS
55506: PPUSH
55507: CALL_OW 505
// end ;
55511: LD_VAR 0 2
55515: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55516: LD_INT 0
55518: PPUSH
55519: PPUSH
55520: PPUSH
55521: PPUSH
// if not hack in hackTanks then
55522: LD_VAR 0 1
55526: PUSH
55527: LD_EXP 45
55531: IN
55532: NOT
55533: IFFALSE 55537
// exit ;
55535: GO 55622
// index := GetElementIndex ( hackTanks , hack ) ;
55537: LD_ADDR_VAR 0 5
55541: PUSH
55542: LD_EXP 45
55546: PPUSH
55547: LD_VAR 0 1
55551: PPUSH
55552: CALL 14131 0 2
55556: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55557: LD_ADDR_VAR 0 4
55561: PUSH
55562: DOUBLE
55563: LD_INT 1
55565: DEC
55566: ST_TO_ADDR
55567: LD_EXP 46
55571: PUSH
55572: LD_VAR 0 5
55576: ARRAY
55577: PUSH
55578: FOR_TO
55579: IFFALSE 55620
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55581: LD_EXP 46
55585: PUSH
55586: LD_VAR 0 5
55590: ARRAY
55591: PUSH
55592: LD_VAR 0 4
55596: ARRAY
55597: PUSH
55598: LD_INT 1
55600: ARRAY
55601: PUSH
55602: LD_VAR 0 2
55606: EQUAL
55607: IFFALSE 55618
// KillUnit ( vehicle ) ;
55609: LD_VAR 0 2
55613: PPUSH
55614: CALL_OW 66
55618: GO 55578
55620: POP
55621: POP
// end ;
55622: LD_VAR 0 3
55626: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55627: LD_EXP 50
55631: NOT
55632: IFFALSE 55667
55634: GO 55636
55636: DISABLE
// begin initMiner := true ;
55637: LD_ADDR_EXP 50
55641: PUSH
55642: LD_INT 1
55644: ST_TO_ADDR
// minersList := [ ] ;
55645: LD_ADDR_EXP 51
55649: PUSH
55650: EMPTY
55651: ST_TO_ADDR
// minerMinesList := [ ] ;
55652: LD_ADDR_EXP 52
55656: PUSH
55657: EMPTY
55658: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55659: LD_ADDR_EXP 53
55663: PUSH
55664: LD_INT 5
55666: ST_TO_ADDR
// end ;
55667: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55668: LD_EXP 50
55672: PUSH
55673: LD_INT 34
55675: PUSH
55676: LD_INT 81
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PPUSH
55683: CALL_OW 69
55687: AND
55688: IFFALSE 56149
55690: GO 55692
55692: DISABLE
55693: LD_INT 0
55695: PPUSH
55696: PPUSH
55697: PPUSH
55698: PPUSH
// begin enable ;
55699: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55700: LD_ADDR_VAR 0 1
55704: PUSH
55705: LD_INT 34
55707: PUSH
55708: LD_INT 81
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PPUSH
55715: CALL_OW 69
55719: PUSH
55720: FOR_IN
55721: IFFALSE 55793
// begin if not i in minersList then
55723: LD_VAR 0 1
55727: PUSH
55728: LD_EXP 51
55732: IN
55733: NOT
55734: IFFALSE 55791
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55736: LD_ADDR_EXP 51
55740: PUSH
55741: LD_EXP 51
55745: PPUSH
55746: LD_EXP 51
55750: PUSH
55751: LD_INT 1
55753: PLUS
55754: PPUSH
55755: LD_VAR 0 1
55759: PPUSH
55760: CALL_OW 1
55764: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55765: LD_ADDR_EXP 52
55769: PUSH
55770: LD_EXP 52
55774: PPUSH
55775: LD_EXP 52
55779: PUSH
55780: LD_INT 1
55782: PLUS
55783: PPUSH
55784: EMPTY
55785: PPUSH
55786: CALL_OW 1
55790: ST_TO_ADDR
// end end ;
55791: GO 55720
55793: POP
55794: POP
// for i := minerMinesList downto 1 do
55795: LD_ADDR_VAR 0 1
55799: PUSH
55800: DOUBLE
55801: LD_EXP 52
55805: INC
55806: ST_TO_ADDR
55807: LD_INT 1
55809: PUSH
55810: FOR_DOWNTO
55811: IFFALSE 56147
// begin if IsLive ( minersList [ i ] ) then
55813: LD_EXP 51
55817: PUSH
55818: LD_VAR 0 1
55822: ARRAY
55823: PPUSH
55824: CALL_OW 300
55828: IFFALSE 55856
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55830: LD_EXP 51
55834: PUSH
55835: LD_VAR 0 1
55839: ARRAY
55840: PPUSH
55841: LD_EXP 52
55845: PUSH
55846: LD_VAR 0 1
55850: ARRAY
55851: PPUSH
55852: CALL_OW 505
// if not minerMinesList [ i ] then
55856: LD_EXP 52
55860: PUSH
55861: LD_VAR 0 1
55865: ARRAY
55866: NOT
55867: IFFALSE 55871
// continue ;
55869: GO 55810
// for j := minerMinesList [ i ] downto 1 do
55871: LD_ADDR_VAR 0 2
55875: PUSH
55876: DOUBLE
55877: LD_EXP 52
55881: PUSH
55882: LD_VAR 0 1
55886: ARRAY
55887: INC
55888: ST_TO_ADDR
55889: LD_INT 1
55891: PUSH
55892: FOR_DOWNTO
55893: IFFALSE 56143
// begin side := GetSide ( minersList [ i ] ) ;
55895: LD_ADDR_VAR 0 3
55899: PUSH
55900: LD_EXP 51
55904: PUSH
55905: LD_VAR 0 1
55909: ARRAY
55910: PPUSH
55911: CALL_OW 255
55915: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55916: LD_ADDR_VAR 0 4
55920: PUSH
55921: LD_EXP 52
55925: PUSH
55926: LD_VAR 0 1
55930: ARRAY
55931: PUSH
55932: LD_VAR 0 2
55936: ARRAY
55937: PUSH
55938: LD_INT 1
55940: ARRAY
55941: PPUSH
55942: LD_EXP 52
55946: PUSH
55947: LD_VAR 0 1
55951: ARRAY
55952: PUSH
55953: LD_VAR 0 2
55957: ARRAY
55958: PUSH
55959: LD_INT 2
55961: ARRAY
55962: PPUSH
55963: CALL_OW 428
55967: ST_TO_ADDR
// if not tmp then
55968: LD_VAR 0 4
55972: NOT
55973: IFFALSE 55977
// continue ;
55975: GO 55892
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55977: LD_VAR 0 4
55981: PUSH
55982: LD_INT 81
55984: PUSH
55985: LD_VAR 0 3
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PPUSH
55994: CALL_OW 69
55998: IN
55999: PUSH
56000: LD_EXP 52
56004: PUSH
56005: LD_VAR 0 1
56009: ARRAY
56010: PUSH
56011: LD_VAR 0 2
56015: ARRAY
56016: PUSH
56017: LD_INT 1
56019: ARRAY
56020: PPUSH
56021: LD_EXP 52
56025: PUSH
56026: LD_VAR 0 1
56030: ARRAY
56031: PUSH
56032: LD_VAR 0 2
56036: ARRAY
56037: PUSH
56038: LD_INT 2
56040: ARRAY
56041: PPUSH
56042: CALL_OW 458
56046: AND
56047: IFFALSE 56141
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56049: LD_EXP 52
56053: PUSH
56054: LD_VAR 0 1
56058: ARRAY
56059: PUSH
56060: LD_VAR 0 2
56064: ARRAY
56065: PUSH
56066: LD_INT 1
56068: ARRAY
56069: PPUSH
56070: LD_EXP 52
56074: PUSH
56075: LD_VAR 0 1
56079: ARRAY
56080: PUSH
56081: LD_VAR 0 2
56085: ARRAY
56086: PUSH
56087: LD_INT 2
56089: ARRAY
56090: PPUSH
56091: LD_VAR 0 3
56095: PPUSH
56096: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56100: LD_ADDR_EXP 52
56104: PUSH
56105: LD_EXP 52
56109: PPUSH
56110: LD_VAR 0 1
56114: PPUSH
56115: LD_EXP 52
56119: PUSH
56120: LD_VAR 0 1
56124: ARRAY
56125: PPUSH
56126: LD_VAR 0 2
56130: PPUSH
56131: CALL_OW 3
56135: PPUSH
56136: CALL_OW 1
56140: ST_TO_ADDR
// end ; end ;
56141: GO 55892
56143: POP
56144: POP
// end ;
56145: GO 55810
56147: POP
56148: POP
// end ;
56149: PPOPN 4
56151: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56152: LD_INT 0
56154: PPUSH
56155: PPUSH
// result := false ;
56156: LD_ADDR_VAR 0 4
56160: PUSH
56161: LD_INT 0
56163: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56164: LD_VAR 0 1
56168: PPUSH
56169: CALL_OW 264
56173: PUSH
56174: LD_INT 81
56176: EQUAL
56177: NOT
56178: IFFALSE 56182
// exit ;
56180: GO 56422
// index := GetElementIndex ( minersList , unit ) ;
56182: LD_ADDR_VAR 0 5
56186: PUSH
56187: LD_EXP 51
56191: PPUSH
56192: LD_VAR 0 1
56196: PPUSH
56197: CALL 14131 0 2
56201: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56202: LD_EXP 52
56206: PUSH
56207: LD_VAR 0 5
56211: ARRAY
56212: PUSH
56213: LD_EXP 53
56217: GREATEREQUAL
56218: IFFALSE 56222
// exit ;
56220: GO 56422
// ComMoveXY ( unit , x , y ) ;
56222: LD_VAR 0 1
56226: PPUSH
56227: LD_VAR 0 2
56231: PPUSH
56232: LD_VAR 0 3
56236: PPUSH
56237: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56241: LD_INT 35
56243: PPUSH
56244: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56248: LD_VAR 0 1
56252: PPUSH
56253: LD_VAR 0 2
56257: PPUSH
56258: LD_VAR 0 3
56262: PPUSH
56263: CALL 45892 0 3
56267: NOT
56268: PUSH
56269: LD_VAR 0 1
56273: PPUSH
56274: CALL_OW 314
56278: AND
56279: IFFALSE 56283
// exit ;
56281: GO 56422
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56283: LD_VAR 0 2
56287: PPUSH
56288: LD_VAR 0 3
56292: PPUSH
56293: CALL_OW 428
56297: PUSH
56298: LD_VAR 0 1
56302: EQUAL
56303: PUSH
56304: LD_VAR 0 1
56308: PPUSH
56309: CALL_OW 314
56313: NOT
56314: AND
56315: IFFALSE 56241
// PlaySoundXY ( x , y , PlantMine ) ;
56317: LD_VAR 0 2
56321: PPUSH
56322: LD_VAR 0 3
56326: PPUSH
56327: LD_STRING PlantMine
56329: PPUSH
56330: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56334: LD_VAR 0 2
56338: PPUSH
56339: LD_VAR 0 3
56343: PPUSH
56344: LD_VAR 0 1
56348: PPUSH
56349: CALL_OW 255
56353: PPUSH
56354: LD_INT 0
56356: PPUSH
56357: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56361: LD_ADDR_EXP 52
56365: PUSH
56366: LD_EXP 52
56370: PPUSH
56371: LD_VAR 0 5
56375: PUSH
56376: LD_EXP 52
56380: PUSH
56381: LD_VAR 0 5
56385: ARRAY
56386: PUSH
56387: LD_INT 1
56389: PLUS
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PPUSH
56395: LD_VAR 0 2
56399: PUSH
56400: LD_VAR 0 3
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PPUSH
56409: CALL 14346 0 3
56413: ST_TO_ADDR
// result := true ;
56414: LD_ADDR_VAR 0 4
56418: PUSH
56419: LD_INT 1
56421: ST_TO_ADDR
// end ;
56422: LD_VAR 0 4
56426: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56427: LD_INT 0
56429: PPUSH
56430: PPUSH
56431: PPUSH
// if not unit in minersList then
56432: LD_VAR 0 1
56436: PUSH
56437: LD_EXP 51
56441: IN
56442: NOT
56443: IFFALSE 56447
// exit ;
56445: GO 56839
// index := GetElementIndex ( minersList , unit ) ;
56447: LD_ADDR_VAR 0 6
56451: PUSH
56452: LD_EXP 51
56456: PPUSH
56457: LD_VAR 0 1
56461: PPUSH
56462: CALL 14131 0 2
56466: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56467: LD_ADDR_VAR 0 5
56471: PUSH
56472: DOUBLE
56473: LD_EXP 52
56477: PUSH
56478: LD_VAR 0 6
56482: ARRAY
56483: INC
56484: ST_TO_ADDR
56485: LD_INT 1
56487: PUSH
56488: FOR_DOWNTO
56489: IFFALSE 56650
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56491: LD_EXP 52
56495: PUSH
56496: LD_VAR 0 6
56500: ARRAY
56501: PUSH
56502: LD_VAR 0 5
56506: ARRAY
56507: PUSH
56508: LD_INT 1
56510: ARRAY
56511: PUSH
56512: LD_VAR 0 2
56516: EQUAL
56517: PUSH
56518: LD_EXP 52
56522: PUSH
56523: LD_VAR 0 6
56527: ARRAY
56528: PUSH
56529: LD_VAR 0 5
56533: ARRAY
56534: PUSH
56535: LD_INT 2
56537: ARRAY
56538: PUSH
56539: LD_VAR 0 3
56543: EQUAL
56544: AND
56545: IFFALSE 56648
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56547: LD_EXP 52
56551: PUSH
56552: LD_VAR 0 6
56556: ARRAY
56557: PUSH
56558: LD_VAR 0 5
56562: ARRAY
56563: PUSH
56564: LD_INT 1
56566: ARRAY
56567: PPUSH
56568: LD_EXP 52
56572: PUSH
56573: LD_VAR 0 6
56577: ARRAY
56578: PUSH
56579: LD_VAR 0 5
56583: ARRAY
56584: PUSH
56585: LD_INT 2
56587: ARRAY
56588: PPUSH
56589: LD_VAR 0 1
56593: PPUSH
56594: CALL_OW 255
56598: PPUSH
56599: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56603: LD_ADDR_EXP 52
56607: PUSH
56608: LD_EXP 52
56612: PPUSH
56613: LD_VAR 0 6
56617: PPUSH
56618: LD_EXP 52
56622: PUSH
56623: LD_VAR 0 6
56627: ARRAY
56628: PPUSH
56629: LD_VAR 0 5
56633: PPUSH
56634: CALL_OW 3
56638: PPUSH
56639: CALL_OW 1
56643: ST_TO_ADDR
// exit ;
56644: POP
56645: POP
56646: GO 56839
// end ; end ;
56648: GO 56488
56650: POP
56651: POP
// for i := minerMinesList [ index ] downto 1 do
56652: LD_ADDR_VAR 0 5
56656: PUSH
56657: DOUBLE
56658: LD_EXP 52
56662: PUSH
56663: LD_VAR 0 6
56667: ARRAY
56668: INC
56669: ST_TO_ADDR
56670: LD_INT 1
56672: PUSH
56673: FOR_DOWNTO
56674: IFFALSE 56837
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56676: LD_EXP 52
56680: PUSH
56681: LD_VAR 0 6
56685: ARRAY
56686: PUSH
56687: LD_VAR 0 5
56691: ARRAY
56692: PUSH
56693: LD_INT 1
56695: ARRAY
56696: PPUSH
56697: LD_EXP 52
56701: PUSH
56702: LD_VAR 0 6
56706: ARRAY
56707: PUSH
56708: LD_VAR 0 5
56712: ARRAY
56713: PUSH
56714: LD_INT 2
56716: ARRAY
56717: PPUSH
56718: LD_VAR 0 2
56722: PPUSH
56723: LD_VAR 0 3
56727: PPUSH
56728: CALL_OW 298
56732: PUSH
56733: LD_INT 6
56735: LESS
56736: IFFALSE 56835
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56738: LD_EXP 52
56742: PUSH
56743: LD_VAR 0 6
56747: ARRAY
56748: PUSH
56749: LD_VAR 0 5
56753: ARRAY
56754: PUSH
56755: LD_INT 1
56757: ARRAY
56758: PPUSH
56759: LD_EXP 52
56763: PUSH
56764: LD_VAR 0 6
56768: ARRAY
56769: PUSH
56770: LD_VAR 0 5
56774: ARRAY
56775: PUSH
56776: LD_INT 2
56778: ARRAY
56779: PPUSH
56780: LD_VAR 0 1
56784: PPUSH
56785: CALL_OW 255
56789: PPUSH
56790: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56794: LD_ADDR_EXP 52
56798: PUSH
56799: LD_EXP 52
56803: PPUSH
56804: LD_VAR 0 6
56808: PPUSH
56809: LD_EXP 52
56813: PUSH
56814: LD_VAR 0 6
56818: ARRAY
56819: PPUSH
56820: LD_VAR 0 5
56824: PPUSH
56825: CALL_OW 3
56829: PPUSH
56830: CALL_OW 1
56834: ST_TO_ADDR
// end ; end ;
56835: GO 56673
56837: POP
56838: POP
// end ;
56839: LD_VAR 0 4
56843: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56844: LD_INT 0
56846: PPUSH
56847: PPUSH
56848: PPUSH
56849: PPUSH
56850: PPUSH
56851: PPUSH
56852: PPUSH
56853: PPUSH
56854: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56855: LD_VAR 0 1
56859: PPUSH
56860: CALL_OW 264
56864: PUSH
56865: LD_INT 81
56867: EQUAL
56868: NOT
56869: PUSH
56870: LD_VAR 0 1
56874: PUSH
56875: LD_EXP 51
56879: IN
56880: NOT
56881: OR
56882: IFFALSE 56886
// exit ;
56884: GO 57208
// index := GetElementIndex ( minersList , unit ) ;
56886: LD_ADDR_VAR 0 6
56890: PUSH
56891: LD_EXP 51
56895: PPUSH
56896: LD_VAR 0 1
56900: PPUSH
56901: CALL 14131 0 2
56905: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56906: LD_ADDR_VAR 0 8
56910: PUSH
56911: LD_EXP 53
56915: PUSH
56916: LD_EXP 52
56920: PUSH
56921: LD_VAR 0 6
56925: ARRAY
56926: MINUS
56927: ST_TO_ADDR
// if not minesFreeAmount then
56928: LD_VAR 0 8
56932: NOT
56933: IFFALSE 56937
// exit ;
56935: GO 57208
// tmp := [ ] ;
56937: LD_ADDR_VAR 0 7
56941: PUSH
56942: EMPTY
56943: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56944: LD_ADDR_VAR 0 5
56948: PUSH
56949: DOUBLE
56950: LD_INT 1
56952: DEC
56953: ST_TO_ADDR
56954: LD_VAR 0 8
56958: PUSH
56959: FOR_TO
56960: IFFALSE 57155
// begin _d := rand ( 0 , 5 ) ;
56962: LD_ADDR_VAR 0 11
56966: PUSH
56967: LD_INT 0
56969: PPUSH
56970: LD_INT 5
56972: PPUSH
56973: CALL_OW 12
56977: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56978: LD_ADDR_VAR 0 12
56982: PUSH
56983: LD_INT 2
56985: PPUSH
56986: LD_INT 6
56988: PPUSH
56989: CALL_OW 12
56993: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56994: LD_ADDR_VAR 0 9
56998: PUSH
56999: LD_VAR 0 2
57003: PPUSH
57004: LD_VAR 0 11
57008: PPUSH
57009: LD_VAR 0 12
57013: PPUSH
57014: CALL_OW 272
57018: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57019: LD_ADDR_VAR 0 10
57023: PUSH
57024: LD_VAR 0 3
57028: PPUSH
57029: LD_VAR 0 11
57033: PPUSH
57034: LD_VAR 0 12
57038: PPUSH
57039: CALL_OW 273
57043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57044: LD_VAR 0 9
57048: PPUSH
57049: LD_VAR 0 10
57053: PPUSH
57054: CALL_OW 488
57058: PUSH
57059: LD_VAR 0 9
57063: PUSH
57064: LD_VAR 0 10
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_VAR 0 7
57077: IN
57078: NOT
57079: AND
57080: PUSH
57081: LD_VAR 0 9
57085: PPUSH
57086: LD_VAR 0 10
57090: PPUSH
57091: CALL_OW 458
57095: NOT
57096: AND
57097: IFFALSE 57139
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57099: LD_ADDR_VAR 0 7
57103: PUSH
57104: LD_VAR 0 7
57108: PPUSH
57109: LD_VAR 0 7
57113: PUSH
57114: LD_INT 1
57116: PLUS
57117: PPUSH
57118: LD_VAR 0 9
57122: PUSH
57123: LD_VAR 0 10
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PPUSH
57132: CALL_OW 1
57136: ST_TO_ADDR
57137: GO 57153
// i := i - 1 ;
57139: LD_ADDR_VAR 0 5
57143: PUSH
57144: LD_VAR 0 5
57148: PUSH
57149: LD_INT 1
57151: MINUS
57152: ST_TO_ADDR
// end ;
57153: GO 56959
57155: POP
57156: POP
// for i in tmp do
57157: LD_ADDR_VAR 0 5
57161: PUSH
57162: LD_VAR 0 7
57166: PUSH
57167: FOR_IN
57168: IFFALSE 57206
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57170: LD_VAR 0 1
57174: PPUSH
57175: LD_VAR 0 5
57179: PUSH
57180: LD_INT 1
57182: ARRAY
57183: PPUSH
57184: LD_VAR 0 5
57188: PUSH
57189: LD_INT 2
57191: ARRAY
57192: PPUSH
57193: CALL 56152 0 3
57197: NOT
57198: IFFALSE 57204
// exit ;
57200: POP
57201: POP
57202: GO 57208
57204: GO 57167
57206: POP
57207: POP
// end ;
57208: LD_VAR 0 4
57212: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57213: LD_INT 0
57215: PPUSH
57216: PPUSH
57217: PPUSH
57218: PPUSH
57219: PPUSH
57220: PPUSH
57221: PPUSH
57222: PPUSH
57223: PPUSH
// if GetClass ( unit ) <> class_sniper then
57224: LD_VAR 0 1
57228: PPUSH
57229: CALL_OW 257
57233: PUSH
57234: LD_INT 5
57236: NONEQUAL
57237: IFFALSE 57241
// exit ;
57239: GO 57707
// dist := 8 ;
57241: LD_ADDR_VAR 0 5
57245: PUSH
57246: LD_INT 8
57248: ST_TO_ADDR
// viewRange := 12 ;
57249: LD_ADDR_VAR 0 8
57253: PUSH
57254: LD_INT 12
57256: ST_TO_ADDR
// side := GetSide ( unit ) ;
57257: LD_ADDR_VAR 0 6
57261: PUSH
57262: LD_VAR 0 1
57266: PPUSH
57267: CALL_OW 255
57271: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57272: LD_INT 61
57274: PPUSH
57275: LD_VAR 0 6
57279: PPUSH
57280: CALL_OW 321
57284: PUSH
57285: LD_INT 2
57287: EQUAL
57288: IFFALSE 57298
// viewRange := 16 ;
57290: LD_ADDR_VAR 0 8
57294: PUSH
57295: LD_INT 16
57297: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57298: LD_VAR 0 1
57302: PPUSH
57303: LD_VAR 0 2
57307: PPUSH
57308: LD_VAR 0 3
57312: PPUSH
57313: CALL_OW 297
57317: PUSH
57318: LD_VAR 0 5
57322: GREATER
57323: IFFALSE 57402
// begin ComMoveXY ( unit , x , y ) ;
57325: LD_VAR 0 1
57329: PPUSH
57330: LD_VAR 0 2
57334: PPUSH
57335: LD_VAR 0 3
57339: PPUSH
57340: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57344: LD_INT 35
57346: PPUSH
57347: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57351: LD_VAR 0 1
57355: PPUSH
57356: LD_VAR 0 2
57360: PPUSH
57361: LD_VAR 0 3
57365: PPUSH
57366: CALL 45892 0 3
57370: NOT
57371: IFFALSE 57375
// exit ;
57373: GO 57707
// until GetDistUnitXY ( unit , x , y ) < dist ;
57375: LD_VAR 0 1
57379: PPUSH
57380: LD_VAR 0 2
57384: PPUSH
57385: LD_VAR 0 3
57389: PPUSH
57390: CALL_OW 297
57394: PUSH
57395: LD_VAR 0 5
57399: LESS
57400: IFFALSE 57344
// end ; ComTurnXY ( unit , x , y ) ;
57402: LD_VAR 0 1
57406: PPUSH
57407: LD_VAR 0 2
57411: PPUSH
57412: LD_VAR 0 3
57416: PPUSH
57417: CALL_OW 118
// repeat if Multiplayer then
57421: LD_OWVAR 4
57425: IFFALSE 57436
// wait ( 35 ) else
57427: LD_INT 35
57429: PPUSH
57430: CALL_OW 67
57434: GO 57443
// wait ( 5 ) ;
57436: LD_INT 5
57438: PPUSH
57439: CALL_OW 67
// _d := GetDir ( unit ) ;
57443: LD_ADDR_VAR 0 11
57447: PUSH
57448: LD_VAR 0 1
57452: PPUSH
57453: CALL_OW 254
57457: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57458: LD_ADDR_VAR 0 7
57462: PUSH
57463: LD_VAR 0 1
57467: PPUSH
57468: CALL_OW 250
57472: PPUSH
57473: LD_VAR 0 1
57477: PPUSH
57478: CALL_OW 251
57482: PPUSH
57483: LD_VAR 0 2
57487: PPUSH
57488: LD_VAR 0 3
57492: PPUSH
57493: CALL 48500 0 4
57497: ST_TO_ADDR
// until dir = _d ;
57498: LD_VAR 0 7
57502: PUSH
57503: LD_VAR 0 11
57507: EQUAL
57508: IFFALSE 57421
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57510: LD_ADDR_VAR 0 9
57514: PUSH
57515: LD_VAR 0 1
57519: PPUSH
57520: CALL_OW 250
57524: PPUSH
57525: LD_VAR 0 7
57529: PPUSH
57530: LD_VAR 0 5
57534: PPUSH
57535: CALL_OW 272
57539: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57540: LD_ADDR_VAR 0 10
57544: PUSH
57545: LD_VAR 0 1
57549: PPUSH
57550: CALL_OW 251
57554: PPUSH
57555: LD_VAR 0 7
57559: PPUSH
57560: LD_VAR 0 5
57564: PPUSH
57565: CALL_OW 273
57569: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57570: LD_VAR 0 9
57574: PPUSH
57575: LD_VAR 0 10
57579: PPUSH
57580: CALL_OW 488
57584: NOT
57585: IFFALSE 57589
// exit ;
57587: GO 57707
// ComAnimCustom ( unit , 1 ) ;
57589: LD_VAR 0 1
57593: PPUSH
57594: LD_INT 1
57596: PPUSH
57597: CALL_OW 592
// p := 0 ;
57601: LD_ADDR_VAR 0 12
57605: PUSH
57606: LD_INT 0
57608: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57609: LD_VAR 0 9
57613: PPUSH
57614: LD_VAR 0 10
57618: PPUSH
57619: LD_VAR 0 6
57623: PPUSH
57624: LD_VAR 0 8
57628: PPUSH
57629: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57633: LD_INT 35
57635: PPUSH
57636: CALL_OW 67
// p := Inc ( p ) ;
57640: LD_ADDR_VAR 0 12
57644: PUSH
57645: LD_VAR 0 12
57649: PPUSH
57650: CALL 48456 0 1
57654: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57655: LD_VAR 0 12
57659: PUSH
57660: LD_INT 3
57662: EQUAL
57663: PUSH
57664: LD_VAR 0 1
57668: PPUSH
57669: CALL_OW 302
57673: NOT
57674: OR
57675: PUSH
57676: LD_VAR 0 1
57680: PPUSH
57681: CALL_OW 301
57685: OR
57686: IFFALSE 57633
// RemoveSeeing ( _x , _y , side ) ;
57688: LD_VAR 0 9
57692: PPUSH
57693: LD_VAR 0 10
57697: PPUSH
57698: LD_VAR 0 6
57702: PPUSH
57703: CALL_OW 331
// end ; end_of_file
57707: LD_VAR 0 4
57711: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57712: LD_EXP 39
57716: IFFALSE 58057
57718: GO 57720
57720: DISABLE
57721: LD_INT 0
57723: PPUSH
57724: PPUSH
57725: PPUSH
// begin mpKingPoints := [ ] ;
57726: LD_ADDR_EXP 54
57730: PUSH
57731: EMPTY
57732: ST_TO_ADDR
// if mpTeamGame then
57733: LD_EXP 11
57737: IFFALSE 57791
// begin for i := 1 to Count ( mpTeams ) do
57739: LD_ADDR_VAR 0 1
57743: PUSH
57744: DOUBLE
57745: LD_INT 1
57747: DEC
57748: ST_TO_ADDR
57749: LD_EXP 10
57753: PPUSH
57754: CALL 11486 0 1
57758: PUSH
57759: FOR_TO
57760: IFFALSE 57787
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57762: LD_ADDR_EXP 54
57766: PUSH
57767: LD_EXP 54
57771: PPUSH
57772: LD_VAR 0 1
57776: PPUSH
57777: LD_INT 0
57779: PPUSH
57780: CALL_OW 1
57784: ST_TO_ADDR
57785: GO 57759
57787: POP
57788: POP
// end else
57789: GO 57834
// begin for i := 1 to 8 do
57791: LD_ADDR_VAR 0 1
57795: PUSH
57796: DOUBLE
57797: LD_INT 1
57799: DEC
57800: ST_TO_ADDR
57801: LD_INT 8
57803: PUSH
57804: FOR_TO
57805: IFFALSE 57832
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57807: LD_ADDR_EXP 54
57811: PUSH
57812: LD_EXP 54
57816: PPUSH
57817: LD_VAR 0 1
57821: PPUSH
57822: LD_INT 0
57824: PPUSH
57825: CALL_OW 1
57829: ST_TO_ADDR
57830: GO 57804
57832: POP
57833: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57834: LD_ADDR_VAR 0 3
57838: PUSH
57839: LD_EXP 2
57843: PPUSH
57844: LD_INT 0
57846: PPUSH
57847: CALL_OW 517
57851: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57852: LD_ADDR_VAR 0 1
57856: PUSH
57857: DOUBLE
57858: LD_INT 1
57860: DEC
57861: ST_TO_ADDR
57862: LD_VAR 0 3
57866: PUSH
57867: LD_INT 1
57869: ARRAY
57870: PUSH
57871: FOR_TO
57872: IFFALSE 57939
// for j := 1 to 8 do
57874: LD_ADDR_VAR 0 2
57878: PUSH
57879: DOUBLE
57880: LD_INT 1
57882: DEC
57883: ST_TO_ADDR
57884: LD_INT 8
57886: PUSH
57887: FOR_TO
57888: IFFALSE 57935
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57890: LD_VAR 0 3
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PUSH
57899: LD_VAR 0 1
57903: ARRAY
57904: PPUSH
57905: LD_VAR 0 3
57909: PUSH
57910: LD_INT 2
57912: ARRAY
57913: PUSH
57914: LD_VAR 0 1
57918: ARRAY
57919: PPUSH
57920: LD_VAR 0 2
57924: PPUSH
57925: LD_INT 12
57927: NEG
57928: PPUSH
57929: CALL_OW 330
57933: GO 57887
57935: POP
57936: POP
57937: GO 57871
57939: POP
57940: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57941: LD_EXP 34
57945: PPUSH
57946: LD_INT 1
57948: PPUSH
57949: CALL_OW 424
// UpdateCounter ;
57953: CALL 58561 0 0
// repeat wait ( 0 0$1 ) ;
57957: LD_INT 35
57959: PPUSH
57960: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57964: LD_ADDR_VAR 0 3
57968: PUSH
57969: LD_EXP 34
57973: PPUSH
57974: LD_INT 3
57976: PUSH
57977: LD_INT 57
57979: PUSH
57980: EMPTY
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 50
57989: PUSH
57990: EMPTY
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 30
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 30
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: PPUSH
58026: CALL_OW 70
58030: ST_TO_ADDR
// if not tmp then
58031: LD_VAR 0 3
58035: NOT
58036: IFFALSE 58040
// continue ;
58038: GO 57957
// AddPoints ( tmp ) ;
58040: LD_VAR 0 3
58044: PPUSH
58045: CALL 58239 0 1
// UpdateCounter ;
58049: CALL 58561 0 0
// until false ;
58053: LD_INT 0
58055: IFFALSE 57957
// end ;
58057: PPOPN 3
58059: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58060: LD_EXP 39
58064: PUSH
58065: LD_EXP 37
58069: AND
58070: IFFALSE 58236
58072: GO 58074
58074: DISABLE
58075: LD_INT 0
58077: PPUSH
58078: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58079: LD_ADDR_VAR 0 2
58083: PUSH
58084: LD_EXP 2
58088: PPUSH
58089: LD_INT 0
58091: PPUSH
58092: CALL_OW 517
58096: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58097: LD_ADDR_VAR 0 1
58101: PUSH
58102: DOUBLE
58103: LD_INT 1
58105: DEC
58106: ST_TO_ADDR
58107: LD_VAR 0 2
58111: PUSH
58112: LD_INT 1
58114: ARRAY
58115: PUSH
58116: FOR_TO
58117: IFFALSE 58158
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58119: LD_VAR 0 2
58123: PUSH
58124: LD_INT 1
58126: ARRAY
58127: PUSH
58128: LD_VAR 0 1
58132: ARRAY
58133: PPUSH
58134: LD_VAR 0 2
58138: PUSH
58139: LD_INT 2
58141: ARRAY
58142: PUSH
58143: LD_VAR 0 1
58147: ARRAY
58148: PPUSH
58149: LD_INT 125
58151: PPUSH
58152: CALL_OW 495
58156: GO 58116
58158: POP
58159: POP
// repeat wait ( mpEmissions ) ;
58160: LD_EXP 37
58164: PPUSH
58165: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58169: LD_ADDR_VAR 0 1
58173: PUSH
58174: DOUBLE
58175: LD_INT 1
58177: DEC
58178: ST_TO_ADDR
58179: LD_VAR 0 2
58183: PUSH
58184: LD_INT 1
58186: ARRAY
58187: PUSH
58188: FOR_TO
58189: IFFALSE 58230
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58191: LD_VAR 0 2
58195: PUSH
58196: LD_INT 1
58198: ARRAY
58199: PUSH
58200: LD_VAR 0 1
58204: ARRAY
58205: PPUSH
58206: LD_VAR 0 2
58210: PUSH
58211: LD_INT 2
58213: ARRAY
58214: PUSH
58215: LD_VAR 0 1
58219: ARRAY
58220: PPUSH
58221: LD_INT 15
58223: PPUSH
58224: CALL_OW 495
58228: GO 58188
58230: POP
58231: POP
// until false ;
58232: LD_INT 0
58234: IFFALSE 58160
// end ;
58236: PPOPN 2
58238: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58239: LD_INT 0
58241: PPUSH
58242: PPUSH
58243: PPUSH
58244: PPUSH
58245: PPUSH
// if mpTeamGame then
58246: LD_EXP 11
58250: IFFALSE 58447
// begin first := depots [ 1 ] ;
58252: LD_ADDR_VAR 0 4
58256: PUSH
58257: LD_VAR 0 1
58261: PUSH
58262: LD_INT 1
58264: ARRAY
58265: ST_TO_ADDR
// side := GetSide ( first ) ;
58266: LD_ADDR_VAR 0 6
58270: PUSH
58271: LD_VAR 0 4
58275: PPUSH
58276: CALL_OW 255
58280: ST_TO_ADDR
// for i := 1 to mpTeams do
58281: LD_ADDR_VAR 0 3
58285: PUSH
58286: DOUBLE
58287: LD_INT 1
58289: DEC
58290: ST_TO_ADDR
58291: LD_EXP 10
58295: PUSH
58296: FOR_TO
58297: IFFALSE 58331
// if side in mpTeams [ i ] then
58299: LD_VAR 0 6
58303: PUSH
58304: LD_EXP 10
58308: PUSH
58309: LD_VAR 0 3
58313: ARRAY
58314: IN
58315: IFFALSE 58329
// begin team := i ;
58317: LD_ADDR_VAR 0 5
58321: PUSH
58322: LD_VAR 0 3
58326: ST_TO_ADDR
// break ;
58327: GO 58331
// end ;
58329: GO 58296
58331: POP
58332: POP
// if not team then
58333: LD_VAR 0 5
58337: NOT
58338: IFFALSE 58342
// exit ;
58340: GO 58556
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58342: LD_EXP 34
58346: PPUSH
58347: LD_INT 81
58349: PUSH
58350: LD_VAR 0 6
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PPUSH
58359: CALL_OW 70
58363: IFFALSE 58367
// exit ;
58365: GO 58556
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58367: LD_ADDR_EXP 54
58371: PUSH
58372: LD_EXP 54
58376: PPUSH
58377: LD_VAR 0 5
58381: PPUSH
58382: LD_EXP 54
58386: PUSH
58387: LD_VAR 0 5
58391: ARRAY
58392: PUSH
58393: LD_INT 1
58395: PLUS
58396: PPUSH
58397: CALL_OW 1
58401: ST_TO_ADDR
// for i in mpTeams [ team ] do
58402: LD_ADDR_VAR 0 3
58406: PUSH
58407: LD_EXP 10
58411: PUSH
58412: LD_VAR 0 5
58416: ARRAY
58417: PUSH
58418: FOR_IN
58419: IFFALSE 58443
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58421: LD_VAR 0 3
58425: PPUSH
58426: LD_EXP 54
58430: PUSH
58431: LD_VAR 0 5
58435: ARRAY
58436: PPUSH
58437: CALL_OW 506
58441: GO 58418
58443: POP
58444: POP
// end else
58445: GO 58556
// begin first := depots [ 1 ] ;
58447: LD_ADDR_VAR 0 4
58451: PUSH
58452: LD_VAR 0 1
58456: PUSH
58457: LD_INT 1
58459: ARRAY
58460: ST_TO_ADDR
// side := GetSide ( first ) ;
58461: LD_ADDR_VAR 0 6
58465: PUSH
58466: LD_VAR 0 4
58470: PPUSH
58471: CALL_OW 255
58475: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58476: LD_EXP 34
58480: PPUSH
58481: LD_INT 81
58483: PUSH
58484: LD_VAR 0 6
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PPUSH
58493: CALL_OW 70
58497: IFFALSE 58501
// exit ;
58499: GO 58556
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58501: LD_ADDR_EXP 54
58505: PUSH
58506: LD_EXP 54
58510: PPUSH
58511: LD_VAR 0 6
58515: PPUSH
58516: LD_EXP 54
58520: PUSH
58521: LD_VAR 0 6
58525: ARRAY
58526: PUSH
58527: LD_INT 1
58529: PLUS
58530: PPUSH
58531: CALL_OW 1
58535: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58536: LD_VAR 0 6
58540: PPUSH
58541: LD_EXP 54
58545: PUSH
58546: LD_VAR 0 6
58550: ARRAY
58551: PPUSH
58552: CALL_OW 506
// end ; end ;
58556: LD_VAR 0 2
58560: RET
// function UpdateCounter ; var i ; begin
58561: LD_INT 0
58563: PPUSH
58564: PPUSH
// result := [ ] ;
58565: LD_ADDR_VAR 0 1
58569: PUSH
58570: EMPTY
58571: ST_TO_ADDR
// if mpTeamGame then
58572: LD_EXP 11
58576: IFFALSE 58643
// begin for i := 1 to mpTeams do
58578: LD_ADDR_VAR 0 2
58582: PUSH
58583: DOUBLE
58584: LD_INT 1
58586: DEC
58587: ST_TO_ADDR
58588: LD_EXP 10
58592: PUSH
58593: FOR_TO
58594: IFFALSE 58639
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58596: LD_ADDR_VAR 0 1
58600: PUSH
58601: LD_VAR 0 1
58605: PUSH
58606: LD_STRING #KingoftheHill-Team
58608: PUSH
58609: LD_VAR 0 2
58613: PUSH
58614: LD_EXP 54
58618: PUSH
58619: LD_VAR 0 2
58623: ARRAY
58624: PUSH
58625: LD_EXP 35
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: ADD
58636: ST_TO_ADDR
58637: GO 58593
58639: POP
58640: POP
// end else
58641: GO 58716
// begin for i := 1 to 8 do
58643: LD_ADDR_VAR 0 2
58647: PUSH
58648: DOUBLE
58649: LD_INT 1
58651: DEC
58652: ST_TO_ADDR
58653: LD_INT 8
58655: PUSH
58656: FOR_TO
58657: IFFALSE 58714
// if mpSidePositions [ i ] then
58659: LD_EXP 7
58663: PUSH
58664: LD_VAR 0 2
58668: ARRAY
58669: IFFALSE 58712
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58671: LD_ADDR_VAR 0 1
58675: PUSH
58676: LD_VAR 0 1
58680: PUSH
58681: LD_STRING #KingoftheHill-Player
58683: PUSH
58684: LD_VAR 0 2
58688: PUSH
58689: LD_EXP 54
58693: PUSH
58694: LD_VAR 0 2
58698: ARRAY
58699: PUSH
58700: LD_EXP 35
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: ADD
58711: ST_TO_ADDR
58712: GO 58656
58714: POP
58715: POP
// end ; mpDisplayStrings := result ;
58716: LD_ADDR_EXP 38
58720: PUSH
58721: LD_VAR 0 1
58725: ST_TO_ADDR
// end ;
58726: LD_VAR 0 1
58730: RET
// export function HowMuchPointsKing ( side ) ; begin
58731: LD_INT 0
58733: PPUSH
// result := HowMuchPoints ( side ) ;
58734: LD_ADDR_VAR 0 2
58738: PUSH
58739: LD_VAR 0 1
58743: PPUSH
58744: CALL 58754 0 1
58748: ST_TO_ADDR
// end ;
58749: LD_VAR 0 2
58753: RET
// function HowMuchPoints ( side ) ; var i ; begin
58754: LD_INT 0
58756: PPUSH
58757: PPUSH
// if mpTeamGame then
58758: LD_EXP 11
58762: IFFALSE 58831
// begin for i := 1 to Count ( mpTeams ) do
58764: LD_ADDR_VAR 0 3
58768: PUSH
58769: DOUBLE
58770: LD_INT 1
58772: DEC
58773: ST_TO_ADDR
58774: LD_EXP 10
58778: PPUSH
58779: CALL 11486 0 1
58783: PUSH
58784: FOR_TO
58785: IFFALSE 58827
// begin if side in mpTeams [ i ] then
58787: LD_VAR 0 1
58791: PUSH
58792: LD_EXP 10
58796: PUSH
58797: LD_VAR 0 3
58801: ARRAY
58802: IN
58803: IFFALSE 58825
// begin result := mpKingPoints [ i ] ;
58805: LD_ADDR_VAR 0 2
58809: PUSH
58810: LD_EXP 54
58814: PUSH
58815: LD_VAR 0 3
58819: ARRAY
58820: ST_TO_ADDR
// exit ;
58821: POP
58822: POP
58823: GO 58847
// end ; end ;
58825: GO 58784
58827: POP
58828: POP
// end else
58829: GO 58847
// result := mpKingPoints [ side ] ;
58831: LD_ADDR_VAR 0 2
58835: PUSH
58836: LD_EXP 54
58840: PUSH
58841: LD_VAR 0 1
58845: ARRAY
58846: ST_TO_ADDR
// end ;
58847: LD_VAR 0 2
58851: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58852: LD_EXP 39
58856: PUSH
58857: CALL 59179 0 0
58861: AND
58862: PUSH
58863: LD_OWVAR 4
58867: AND
58868: IFFALSE 59104
58870: GO 58872
58872: DISABLE
58873: LD_INT 0
58875: PPUSH
58876: PPUSH
// begin canWin := false ;
58877: LD_ADDR_VAR 0 2
58881: PUSH
58882: LD_INT 0
58884: ST_TO_ADDR
// if not HasPower ( your_side ) then
58885: LD_OWVAR 2
58889: PPUSH
58890: CALL 59219 0 1
58894: NOT
58895: IFFALSE 58906
// begin Multiplayer_Loose_Message ;
58897: CALL_OW 521
// enable ( mpLose ) ;
58901: LD_INT 102
58903: ENABLE_MARKED
// end else
58904: GO 59104
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58906: LD_ADDR_VAR 0 2
58910: PUSH
58911: LD_OWVAR 2
58915: PPUSH
58916: CALL 58754 0 1
58920: PUSH
58921: LD_EXP 35
58925: GREATEREQUAL
58926: PUSH
58927: LD_OWVAR 2
58931: PPUSH
58932: CALL 59219 0 1
58936: AND
58937: PUSH
58938: CALL 59107 0 0
58942: NOT
58943: OR
58944: ST_TO_ADDR
// for i := 1 to 8 do
58945: LD_ADDR_VAR 0 1
58949: PUSH
58950: DOUBLE
58951: LD_INT 1
58953: DEC
58954: ST_TO_ADDR
58955: LD_INT 8
58957: PUSH
58958: FOR_TO
58959: IFFALSE 59090
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58961: LD_EXP 7
58965: PUSH
58966: LD_VAR 0 1
58970: ARRAY
58971: PUSH
58972: LD_VAR 0 1
58976: PPUSH
58977: CALL_OW 108
58981: AND
58982: PUSH
58983: LD_VAR 0 1
58987: PUSH
58988: LD_OWVAR 2
58992: NONEQUAL
58993: AND
58994: IFFALSE 59088
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58996: LD_EXP 8
59000: PUSH
59001: LD_VAR 0 1
59005: ARRAY
59006: NOT
59007: PUSH
59008: LD_EXP 8
59012: PUSH
59013: LD_VAR 0 1
59017: ARRAY
59018: PUSH
59019: LD_EXP 8
59023: PUSH
59024: LD_OWVAR 2
59028: ARRAY
59029: NONEQUAL
59030: PUSH
59031: LD_OWVAR 2
59035: PPUSH
59036: LD_VAR 0 1
59040: PPUSH
59041: CALL_OW 81
59045: PUSH
59046: LD_INT 1
59048: NONEQUAL
59049: AND
59050: OR
59051: IFFALSE 59088
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59053: LD_VAR 0 1
59057: PPUSH
59058: CALL 58754 0 1
59062: PUSH
59063: LD_EXP 35
59067: GREATEREQUAL
59068: PUSH
59069: LD_VAR 0 1
59073: PPUSH
59074: CALL 59219 0 1
59078: AND
59079: IFFALSE 59088
// begin enable ( mpLose ) ;
59081: LD_INT 102
59083: ENABLE_MARKED
// exit ;
59084: POP
59085: POP
59086: GO 59104
// end ;
59088: GO 58958
59090: POP
59091: POP
// if canWin then
59092: LD_VAR 0 2
59096: IFFALSE 59103
// enable ( mpWin ) else
59098: LD_INT 101
59100: ENABLE_MARKED
59101: GO 59104
// enable ;
59103: ENABLE
// end ; end ;
59104: PPOPN 2
59106: END
// function EnemiesInGame ; var i ; begin
59107: LD_INT 0
59109: PPUSH
59110: PPUSH
// result := false ;
59111: LD_ADDR_VAR 0 1
59115: PUSH
59116: LD_INT 0
59118: ST_TO_ADDR
// for i := 1 to 8 do
59119: LD_ADDR_VAR 0 2
59123: PUSH
59124: DOUBLE
59125: LD_INT 1
59127: DEC
59128: ST_TO_ADDR
59129: LD_INT 8
59131: PUSH
59132: FOR_TO
59133: IFFALSE 59172
// if i <> your_side and HasPower ( i ) then
59135: LD_VAR 0 2
59139: PUSH
59140: LD_OWVAR 2
59144: NONEQUAL
59145: PUSH
59146: LD_VAR 0 2
59150: PPUSH
59151: CALL 59219 0 1
59155: AND
59156: IFFALSE 59170
// begin result := true ;
59158: LD_ADDR_VAR 0 1
59162: PUSH
59163: LD_INT 1
59165: ST_TO_ADDR
// exit ;
59166: POP
59167: POP
59168: GO 59174
// end ;
59170: GO 59132
59172: POP
59173: POP
// end ;
59174: LD_VAR 0 1
59178: RET
// function CanWinLoose ; begin
59179: LD_INT 0
59181: PPUSH
// result := true ;
59182: LD_ADDR_VAR 0 1
59186: PUSH
59187: LD_INT 1
59189: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59190: CALL_OW 531
59194: PUSH
59195: CALL_OW 519
59199: PUSH
59200: LD_INT 1
59202: GREATER
59203: AND
59204: IFFALSE 59214
// result := false ;
59206: LD_ADDR_VAR 0 1
59210: PUSH
59211: LD_INT 0
59213: ST_TO_ADDR
// end ;
59214: LD_VAR 0 1
59218: RET
// function HasPower ( i ) ; begin
59219: LD_INT 0
59221: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59222: LD_ADDR_VAR 0 2
59226: PUSH
59227: LD_INT 22
59229: PUSH
59230: LD_VAR 0 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 21
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 33
59254: PUSH
59255: LD_INT 3
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 33
59264: PUSH
59265: LD_INT 5
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PPUSH
59282: CALL_OW 69
59286: ST_TO_ADDR
// end ; end_of_file
59287: LD_VAR 0 2
59291: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59292: PPOPN 6
59294: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59295: LD_EXP 3
59299: PUSH
59300: LD_INT 4
59302: EQUAL
59303: IFFALSE 59339
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59305: LD_STRING setGameDifficulty(
59307: PUSH
59308: LD_OWVAR 67
59312: STR
59313: PUSH
59314: LD_STRING )
59316: STR
59317: PPUSH
59318: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59322: LD_STRING displayDifficulty(
59324: PUSH
59325: LD_OWVAR 67
59329: STR
59330: PUSH
59331: LD_STRING )
59333: STR
59334: PPUSH
59335: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59339: CALL 59368 0 0
// end ; end_of_file
59343: PPOPN 1
59345: END
// every 0 0$1 do
59346: GO 59348
59348: DISABLE
// begin enable ;
59349: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59350: LD_STRING updateTimer(
59352: PUSH
59353: LD_OWVAR 1
59357: STR
59358: PUSH
59359: LD_STRING );
59361: STR
59362: PPUSH
59363: CALL_OW 559
// end ;
59367: END
// export function SOS_MapStart ( ) ; begin
59368: LD_INT 0
59370: PPUSH
// UpdateFactoryWaypoints ( ) ;
59371: CALL 60296 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59375: CALL 60548 0 0
// ParseMultiDataToLua ( ) ;
59379: CALL 60695 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59383: LD_STRING setSpecLogoNumber(
59385: PUSH
59386: LD_INT 2
59388: STR
59389: PUSH
59390: LD_STRING ,
59392: STR
59393: PUSH
59394: LD_INT 1
59396: STR
59397: PUSH
59398: LD_STRING )
59400: STR
59401: PPUSH
59402: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59406: LD_STRING setSpecLogoNumber(
59408: PUSH
59409: LD_INT 3
59411: STR
59412: PUSH
59413: LD_STRING ,
59415: STR
59416: PUSH
59417: LD_INT 2
59419: STR
59420: PUSH
59421: LD_STRING )
59423: STR
59424: PPUSH
59425: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59429: LD_STRING setSpecLogoNumber(
59431: PUSH
59432: LD_INT 4
59434: STR
59435: PUSH
59436: LD_STRING ,
59438: STR
59439: PUSH
59440: LD_INT 3
59442: STR
59443: PUSH
59444: LD_STRING )
59446: STR
59447: PPUSH
59448: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59452: LD_STRING setSpecLogoNumber(
59454: PUSH
59455: LD_INT 5
59457: STR
59458: PUSH
59459: LD_STRING ,
59461: STR
59462: PUSH
59463: LD_INT 4
59465: STR
59466: PUSH
59467: LD_STRING )
59469: STR
59470: PPUSH
59471: CALL_OW 559
// end ;
59475: LD_VAR 0 1
59479: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59480: LD_INT 0
59482: PPUSH
59483: PPUSH
59484: PPUSH
59485: PPUSH
59486: PPUSH
59487: PPUSH
59488: PPUSH
59489: PPUSH
59490: PPUSH
// for i := 1 to 8 do
59491: LD_ADDR_VAR 0 2
59495: PUSH
59496: DOUBLE
59497: LD_INT 1
59499: DEC
59500: ST_TO_ADDR
59501: LD_INT 8
59503: PUSH
59504: FOR_TO
59505: IFFALSE 59890
// begin if mpSidePositions [ i ] then
59507: LD_EXP 7
59511: PUSH
59512: LD_VAR 0 2
59516: ARRAY
59517: IFFALSE 59888
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59519: LD_ADDR_VAR 0 7
59523: PUSH
59524: LD_INT 22
59526: PUSH
59527: LD_VAR 0 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 21
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PPUSH
59550: CALL_OW 69
59554: PPUSH
59555: CALL 11486 0 1
59559: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59560: LD_ADDR_VAR 0 9
59564: PUSH
59565: LD_INT 22
59567: PUSH
59568: LD_VAR 0 2
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 30
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 30
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PPUSH
59609: CALL_OW 69
59613: ST_TO_ADDR
// crates := 0 ;
59614: LD_ADDR_VAR 0 4
59618: PUSH
59619: LD_INT 0
59621: ST_TO_ADDR
// oil := 0 ;
59622: LD_ADDR_VAR 0 5
59626: PUSH
59627: LD_INT 0
59629: ST_TO_ADDR
// sib := 0 ;
59630: LD_ADDR_VAR 0 6
59634: PUSH
59635: LD_INT 0
59637: ST_TO_ADDR
// if bases then
59638: LD_VAR 0 9
59642: IFFALSE 59748
// begin for j in bases do
59644: LD_ADDR_VAR 0 3
59648: PUSH
59649: LD_VAR 0 9
59653: PUSH
59654: FOR_IN
59655: IFFALSE 59746
// begin base := GetBase ( j ) ;
59657: LD_ADDR_VAR 0 8
59661: PUSH
59662: LD_VAR 0 3
59666: PPUSH
59667: CALL_OW 274
59671: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
59672: LD_ADDR_VAR 0 4
59676: PUSH
59677: LD_VAR 0 4
59681: PUSH
59682: LD_VAR 0 8
59686: PPUSH
59687: LD_INT 1
59689: PPUSH
59690: CALL_OW 275
59694: PLUS
59695: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
59696: LD_ADDR_VAR 0 5
59700: PUSH
59701: LD_VAR 0 5
59705: PUSH
59706: LD_VAR 0 8
59710: PPUSH
59711: LD_INT 2
59713: PPUSH
59714: CALL_OW 275
59718: PLUS
59719: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
59720: LD_ADDR_VAR 0 6
59724: PUSH
59725: LD_VAR 0 6
59729: PUSH
59730: LD_VAR 0 8
59734: PPUSH
59735: LD_INT 3
59737: PPUSH
59738: CALL_OW 275
59742: PLUS
59743: ST_TO_ADDR
// end ;
59744: GO 59654
59746: POP
59747: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
59748: LD_STRING setSpecText(
59750: PUSH
59751: LD_VAR 0 2
59755: STR
59756: PUSH
59757: LD_STRING ,
59759: STR
59760: PUSH
59761: LD_INT 2
59763: STR
59764: PUSH
59765: LD_STRING ,
59767: STR
59768: PUSH
59769: LD_VAR 0 4
59773: STR
59774: PUSH
59775: LD_STRING )
59777: STR
59778: PPUSH
59779: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
59783: LD_STRING setSpecText(
59785: PUSH
59786: LD_VAR 0 2
59790: STR
59791: PUSH
59792: LD_STRING ,
59794: STR
59795: PUSH
59796: LD_INT 3
59798: STR
59799: PUSH
59800: LD_STRING ,
59802: STR
59803: PUSH
59804: LD_VAR 0 5
59808: STR
59809: PUSH
59810: LD_STRING )
59812: STR
59813: PPUSH
59814: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
59818: LD_STRING setSpecText(
59820: PUSH
59821: LD_VAR 0 2
59825: STR
59826: PUSH
59827: LD_STRING ,
59829: STR
59830: PUSH
59831: LD_INT 4
59833: STR
59834: PUSH
59835: LD_STRING ,
59837: STR
59838: PUSH
59839: LD_VAR 0 6
59843: STR
59844: PUSH
59845: LD_STRING )
59847: STR
59848: PPUSH
59849: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
59853: LD_STRING setSpecText(
59855: PUSH
59856: LD_VAR 0 2
59860: STR
59861: PUSH
59862: LD_STRING ,
59864: STR
59865: PUSH
59866: LD_INT 5
59868: STR
59869: PUSH
59870: LD_STRING ,
59872: STR
59873: PUSH
59874: LD_VAR 0 7
59878: STR
59879: PUSH
59880: LD_STRING )
59882: STR
59883: PPUSH
59884: CALL_OW 559
// end ; end ;
59888: GO 59504
59890: POP
59891: POP
// end ;
59892: LD_VAR 0 1
59896: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
59897: LD_INT 2
59899: PUSH
59900: LD_INT 30
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 30
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: PPUSH
59925: CALL_OW 69
59929: IFFALSE 59939
59931: GO 59933
59933: DISABLE
// begin enable ;
59934: ENABLE
// UpdateSpectatorBar ;
59935: CALL 59480 0 0
// end ;
59939: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59940: LD_INT 0
59942: PPUSH
// end ;
59943: LD_VAR 0 12
59947: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59948: LD_INT 0
59950: PPUSH
59951: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59952: LD_VAR 0 1
59956: NOT
59957: PUSH
59958: LD_VAR 0 2
59962: PPUSH
59963: LD_VAR 0 3
59967: PPUSH
59968: CALL_OW 488
59972: NOT
59973: OR
59974: PUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: CALL_OW 266
59984: PUSH
59985: LD_INT 3
59987: NONEQUAL
59988: PUSH
59989: LD_VAR 0 1
59993: PPUSH
59994: CALL_OW 247
59998: PUSH
59999: LD_INT 1
60001: EQUAL
60002: NOT
60003: AND
60004: OR
60005: IFFALSE 60009
// exit ;
60007: GO 60291
// if GetType ( factory ) = unit_human then
60009: LD_VAR 0 1
60013: PPUSH
60014: CALL_OW 247
60018: PUSH
60019: LD_INT 1
60021: EQUAL
60022: IFFALSE 60039
// factory := IsInUnit ( factory ) ;
60024: LD_ADDR_VAR 0 1
60028: PUSH
60029: LD_VAR 0 1
60033: PPUSH
60034: CALL_OW 310
60038: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60039: LD_VAR 0 1
60043: PPUSH
60044: CALL_OW 266
60048: PUSH
60049: LD_INT 3
60051: NONEQUAL
60052: IFFALSE 60056
// exit ;
60054: GO 60291
// for i := 1 to Count ( factoryWaypoints ) do
60056: LD_ADDR_VAR 0 5
60060: PUSH
60061: DOUBLE
60062: LD_INT 1
60064: DEC
60065: ST_TO_ADDR
60066: LD_EXP 55
60070: PPUSH
60071: CALL 11486 0 1
60075: PUSH
60076: FOR_TO
60077: IFFALSE 60239
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60079: LD_VAR 0 2
60083: PPUSH
60084: LD_VAR 0 3
60088: PPUSH
60089: CALL_OW 428
60093: PUSH
60094: LD_EXP 55
60098: PUSH
60099: LD_VAR 0 5
60103: ARRAY
60104: PUSH
60105: LD_INT 2
60107: ARRAY
60108: EQUAL
60109: IFFALSE 60141
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60111: LD_ADDR_EXP 55
60115: PUSH
60116: LD_EXP 55
60120: PPUSH
60121: LD_VAR 0 5
60125: PPUSH
60126: CALL_OW 3
60130: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60131: CALL 60296 0 0
// exit ;
60135: POP
60136: POP
60137: GO 60291
// end else
60139: GO 60237
// if factory = factoryWaypoints [ i ] [ 2 ] then
60141: LD_VAR 0 1
60145: PUSH
60146: LD_EXP 55
60150: PUSH
60151: LD_VAR 0 5
60155: ARRAY
60156: PUSH
60157: LD_INT 2
60159: ARRAY
60160: EQUAL
60161: IFFALSE 60237
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60163: LD_ADDR_EXP 55
60167: PUSH
60168: LD_EXP 55
60172: PPUSH
60173: LD_VAR 0 5
60177: PPUSH
60178: CALL_OW 3
60182: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60183: LD_ADDR_EXP 55
60187: PUSH
60188: LD_EXP 55
60192: PPUSH
60193: LD_VAR 0 1
60197: PPUSH
60198: CALL_OW 255
60202: PUSH
60203: LD_VAR 0 1
60207: PUSH
60208: LD_VAR 0 2
60212: PUSH
60213: LD_VAR 0 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: PPUSH
60224: CALL 47095 0 2
60228: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60229: CALL 60296 0 0
// exit ;
60233: POP
60234: POP
60235: GO 60291
// end ; end ;
60237: GO 60076
60239: POP
60240: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60241: LD_ADDR_EXP 55
60245: PUSH
60246: LD_EXP 55
60250: PPUSH
60251: LD_VAR 0 1
60255: PPUSH
60256: CALL_OW 255
60260: PUSH
60261: LD_VAR 0 1
60265: PUSH
60266: LD_VAR 0 2
60270: PUSH
60271: LD_VAR 0 3
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: PPUSH
60282: CALL 47095 0 2
60286: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60287: CALL 60296 0 0
// end ;
60291: LD_VAR 0 4
60295: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60296: LD_INT 0
60298: PPUSH
60299: PPUSH
60300: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60301: LD_STRING resetFactoryWaypoint();
60303: PPUSH
60304: CALL_OW 559
// if factoryWaypoints then
60308: LD_EXP 55
60312: IFFALSE 60433
// begin list := factoryWaypoints ;
60314: LD_ADDR_VAR 0 3
60318: PUSH
60319: LD_EXP 55
60323: ST_TO_ADDR
// for i := 1 to list do
60324: LD_ADDR_VAR 0 2
60328: PUSH
60329: DOUBLE
60330: LD_INT 1
60332: DEC
60333: ST_TO_ADDR
60334: LD_VAR 0 3
60338: PUSH
60339: FOR_TO
60340: IFFALSE 60431
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60342: LD_STRING setFactoryWaypointXY(
60344: PUSH
60345: LD_VAR 0 3
60349: PUSH
60350: LD_VAR 0 2
60354: ARRAY
60355: PUSH
60356: LD_INT 1
60358: ARRAY
60359: STR
60360: PUSH
60361: LD_STRING ,
60363: STR
60364: PUSH
60365: LD_VAR 0 3
60369: PUSH
60370: LD_VAR 0 2
60374: ARRAY
60375: PUSH
60376: LD_INT 2
60378: ARRAY
60379: STR
60380: PUSH
60381: LD_STRING ,
60383: STR
60384: PUSH
60385: LD_VAR 0 3
60389: PUSH
60390: LD_VAR 0 2
60394: ARRAY
60395: PUSH
60396: LD_INT 3
60398: ARRAY
60399: STR
60400: PUSH
60401: LD_STRING ,
60403: STR
60404: PUSH
60405: LD_VAR 0 3
60409: PUSH
60410: LD_VAR 0 2
60414: ARRAY
60415: PUSH
60416: LD_INT 4
60418: ARRAY
60419: STR
60420: PUSH
60421: LD_STRING )
60423: STR
60424: PPUSH
60425: CALL_OW 559
60429: GO 60339
60431: POP
60432: POP
// end ; end ;
60433: LD_VAR 0 1
60437: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60438: LD_INT 0
60440: PPUSH
// if HexInfo ( x , y ) = warehouse then
60441: LD_VAR 0 2
60445: PPUSH
60446: LD_VAR 0 3
60450: PPUSH
60451: CALL_OW 428
60455: PUSH
60456: LD_VAR 0 1
60460: EQUAL
60461: IFFALSE 60488
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60463: LD_ADDR_EXP 57
60467: PUSH
60468: LD_EXP 57
60472: PPUSH
60473: LD_VAR 0 1
60477: PPUSH
60478: LD_INT 0
60480: PPUSH
60481: CALL_OW 1
60485: ST_TO_ADDR
60486: GO 60539
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60488: LD_ADDR_EXP 57
60492: PUSH
60493: LD_EXP 57
60497: PPUSH
60498: LD_VAR 0 1
60502: PPUSH
60503: LD_VAR 0 1
60507: PPUSH
60508: CALL_OW 255
60512: PUSH
60513: LD_VAR 0 1
60517: PUSH
60518: LD_VAR 0 2
60522: PUSH
60523: LD_VAR 0 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: PPUSH
60534: CALL_OW 1
60538: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60539: CALL 60548 0 0
// end ;
60543: LD_VAR 0 4
60547: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60548: LD_INT 0
60550: PPUSH
60551: PPUSH
60552: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60553: LD_STRING resetWarehouseGatheringPoints();
60555: PPUSH
60556: CALL_OW 559
// if warehouseGatheringPoints then
60560: LD_EXP 57
60564: IFFALSE 60690
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60566: LD_ADDR_VAR 0 3
60570: PUSH
60571: LD_EXP 57
60575: PPUSH
60576: CALL 50863 0 1
60580: ST_TO_ADDR
// for i := 1 to list do
60581: LD_ADDR_VAR 0 2
60585: PUSH
60586: DOUBLE
60587: LD_INT 1
60589: DEC
60590: ST_TO_ADDR
60591: LD_VAR 0 3
60595: PUSH
60596: FOR_TO
60597: IFFALSE 60688
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60599: LD_STRING setWarehouseGatheringPointXY(
60601: PUSH
60602: LD_VAR 0 3
60606: PUSH
60607: LD_VAR 0 2
60611: ARRAY
60612: PUSH
60613: LD_INT 1
60615: ARRAY
60616: STR
60617: PUSH
60618: LD_STRING ,
60620: STR
60621: PUSH
60622: LD_VAR 0 3
60626: PUSH
60627: LD_VAR 0 2
60631: ARRAY
60632: PUSH
60633: LD_INT 2
60635: ARRAY
60636: STR
60637: PUSH
60638: LD_STRING ,
60640: STR
60641: PUSH
60642: LD_VAR 0 3
60646: PUSH
60647: LD_VAR 0 2
60651: ARRAY
60652: PUSH
60653: LD_INT 3
60655: ARRAY
60656: STR
60657: PUSH
60658: LD_STRING ,
60660: STR
60661: PUSH
60662: LD_VAR 0 3
60666: PUSH
60667: LD_VAR 0 2
60671: ARRAY
60672: PUSH
60673: LD_INT 4
60675: ARRAY
60676: STR
60677: PUSH
60678: LD_STRING )
60680: STR
60681: PPUSH
60682: CALL_OW 559
60686: GO 60596
60688: POP
60689: POP
// end ; end ;
60690: LD_VAR 0 1
60694: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60695: LD_INT 0
60697: PPUSH
60698: PPUSH
// if not mpSidePositions then
60699: LD_EXP 7
60703: NOT
60704: IFFALSE 60708
// exit ;
60706: GO 60779
// result :=  ;
60708: LD_ADDR_VAR 0 1
60712: PUSH
60713: LD_STRING 
60715: ST_TO_ADDR
// for i := 1 to 8 do
60716: LD_ADDR_VAR 0 2
60720: PUSH
60721: DOUBLE
60722: LD_INT 1
60724: DEC
60725: ST_TO_ADDR
60726: LD_INT 8
60728: PUSH
60729: FOR_TO
60730: IFFALSE 60760
// begin result := result & mpSidePositions [ i ] & ; ;
60732: LD_ADDR_VAR 0 1
60736: PUSH
60737: LD_VAR 0 1
60741: PUSH
60742: LD_EXP 7
60746: PUSH
60747: LD_VAR 0 2
60751: ARRAY
60752: STR
60753: PUSH
60754: LD_STRING ;
60756: STR
60757: ST_TO_ADDR
// end ;
60758: GO 60729
60760: POP
60761: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60762: LD_STRING setMultiplayerRealPosition("
60764: PUSH
60765: LD_VAR 0 1
60769: STR
60770: PUSH
60771: LD_STRING ");
60773: STR
60774: PPUSH
60775: CALL_OW 559
// end ;
60779: LD_VAR 0 1
60783: RET
