// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2746 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3122 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 35
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 37
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 36
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 33
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 52919 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 52919 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 52919 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 52919 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 52919 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 52919 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 12268 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 52752 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 52752 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 52752 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 52752 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 52752 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 52752 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 52752 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 52752 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 52752 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 52752 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 52752 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 52752 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 52919 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 52919 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 52919 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 52919 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 52919 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 52919 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 52919 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 52919 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 52919 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 52919 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 52919 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 52919 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 52919 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 52919 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 52919 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 52919 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 52919 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 52919 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 49573 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 53717 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 7894 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 53734 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 8601 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 53775 0 2
2721: PPOPN 2
2723: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 8654 0 3
2743: PPOPN 3
2745: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
// disable ( mpActive ) ;
2750: LD_INT 100
2752: DISABLE_MARKED
// disable ( mpWin ) ;
2753: LD_INT 101
2755: DISABLE_MARKED
// disable ( mpLose ) ;
2756: LD_INT 102
2758: DISABLE_MARKED
// mpGameType := 0 ;
2759: LD_ADDR_EXP 3
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// mpGameSettings := [ ] ;
2767: LD_ADDR_EXP 6
2771: PUSH
2772: EMPTY
2773: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2774: LD_ADDR_EXP 4
2778: PUSH
2779: EMPTY
2780: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2781: LD_ADDR_EXP 5
2785: PUSH
2786: EMPTY
2787: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2788: LD_ADDR_EXP 29
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2803: LD_ADDR_EXP 12
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2810: LD_ADDR_EXP 13
2814: PUSH
2815: EMPTY
2816: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2817: LD_ADDR_EXP 41
2821: PUSH
2822: EMPTY
2823: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2824: LD_ADDR_EXP 42
2828: PUSH
2829: EMPTY
2830: ST_TO_ADDR
// mpDepots := [ ] ;
2831: LD_ADDR_EXP 14
2835: PUSH
2836: EMPTY
2837: ST_TO_ADDR
// mpBuildings := [ ] ;
2838: LD_ADDR_EXP 17
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2845: LD_ADDR_EXP 18
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2852: LD_ADDR_EXP 19
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2859: LD_ADDR_EXP 20
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpStartingResources := [ ] ;
2866: LD_ADDR_EXP 15
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// mpStartPos := [ ] ;
2873: LD_ADDR_EXP 21
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2880: LD_ADDR_EXP 22
2884: PUSH
2885: LD_INT 1
2887: NEG
2888: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2889: LD_ADDR_EXP 23
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpApemans := [ ] ;
2896: LD_ADDR_EXP 30
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpApemansArea := [ ] ;
2903: LD_ADDR_EXP 31
2907: PUSH
2908: EMPTY
2909: ST_TO_ADDR
// mpRespawn := [ ] ;
2910: LD_ADDR_EXP 33
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// mpKingArea := 0 ;
2917: LD_ADDR_EXP 34
2921: PUSH
2922: LD_INT 0
2924: ST_TO_ADDR
// mpPoints := [ ] ;
2925: LD_ADDR_EXP 35
2929: PUSH
2930: EMPTY
2931: ST_TO_ADDR
// mpVehicles := 0 ;
2932: LD_ADDR_EXP 36
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// mpShipments := 0 ;
2940: LD_ADDR_EXP 27
2944: PUSH
2945: LD_INT 0
2947: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2948: LD_ADDR_EXP 40
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: PUSH
2957: EMPTY
2958: PUSH
2959: EMPTY
2960: PUSH
2961: EMPTY
2962: PUSH
2963: EMPTY
2964: PUSH
2965: EMPTY
2966: PUSH
2967: EMPTY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2979: LD_ADDR_EXP 32
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: PUSH
2988: EMPTY
2989: PUSH
2990: EMPTY
2991: PUSH
2992: EMPTY
2993: PUSH
2994: EMPTY
2995: PUSH
2996: EMPTY
2997: PUSH
2998: EMPTY
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: ST_TO_ADDR
// mpEmissions := 0 ;
3010: LD_ADDR_EXP 37
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpTeleports := 0 ;
3018: LD_ADDR_EXP 43
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// mpArtifacts := 0 ;
3026: LD_ADDR_EXP 44
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3034: LD_ADDR_EXP 25
3038: PUSH
3039: LD_INT 3
3041: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3042: LD_ADDR_EXP 24
3046: PUSH
3047: LD_INT 15
3049: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3050: LD_ADDR_EXP 38
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// mpGameActive := false ;
3058: LD_ADDR_EXP 39
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// mpBlockRespThread := false ;
3066: LD_ADDR_EXP 45
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// for i := 1 to 32 do
3074: LD_ADDR_VAR 0 2
3078: PUSH
3079: DOUBLE
3080: LD_INT 1
3082: DEC
3083: ST_TO_ADDR
3084: LD_INT 32
3086: PUSH
3087: FOR_TO
3088: IFFALSE 3115
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3090: LD_ADDR_EXP 6
3094: PUSH
3095: LD_EXP 6
3099: PPUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 0
3107: PPUSH
3108: CALL_OW 1
3112: ST_TO_ADDR
3113: GO 3087
3115: POP
3116: POP
// end ;
3117: LD_VAR 0 1
3121: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3138: LD_ADDR_VAR 0 14
3142: PUSH
3143: LD_INT 1
3145: PUSH
3146: LD_INT 2
3148: PUSH
3149: LD_INT 3
3151: PUSH
3152: LD_INT 5
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: ST_TO_ADDR
// for i in gameTypes do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_VAR 0 14
3170: PUSH
3171: FOR_IN
3172: IFFALSE 3181
// disable ( i ) ;
3174: LD_VAR 0 2
3178: DISABLE_MARKED
3179: GO 3171
3181: POP
3182: POP
// if Multiplayer then
3183: LD_OWVAR 4
3187: IFFALSE 3371
// begin mpGameType := mp_game_type ;
3189: LD_ADDR_EXP 3
3193: PUSH
3194: LD_OWVAR 6
3198: ST_TO_ADDR
// your_side := mp_player_side ;
3199: LD_ADDR_OWVAR 2
3203: PUSH
3204: LD_OWVAR 7
3208: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3209: LD_ADDR_EXP 7
3213: PUSH
3214: LD_OWVAR 17
3218: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3219: LD_ADDR_EXP 8
3223: PUSH
3224: LD_OWVAR 15
3228: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3229: LD_ADDR_EXP 9
3233: PUSH
3234: LD_OWVAR 16
3238: ST_TO_ADDR
// mpTeams := mp_teams ;
3239: LD_ADDR_EXP 10
3243: PUSH
3244: LD_OWVAR 12
3248: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: DOUBLE
3255: LD_INT 1
3257: DEC
3258: ST_TO_ADDR
3259: LD_EXP 4
3263: PPUSH
3264: CALL 12268 0 1
3268: PUSH
3269: FOR_TO
3270: IFFALSE 3346
// begin setting := mpGameSettingsKeys [ i ] ;
3272: LD_ADDR_VAR 0 12
3276: PUSH
3277: LD_EXP 4
3281: PUSH
3282: LD_VAR 0 2
3286: ARRAY
3287: ST_TO_ADDR
// if setting then
3288: LD_VAR 0 12
3292: IFFALSE 3344
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3294: LD_ADDR_EXP 6
3298: PUSH
3299: LD_EXP 6
3303: PPUSH
3304: LD_VAR 0 2
3308: PPUSH
3309: LD_EXP 5
3313: PUSH
3314: LD_VAR 0 2
3318: ARRAY
3319: PUSH
3320: LD_VAR 0 2
3324: PUSH
3325: LD_INT 1
3327: MINUS
3328: PPUSH
3329: CALL_OW 426
3333: PUSH
3334: LD_INT 1
3336: PLUS
3337: ARRAY
3338: PPUSH
3339: CALL_OW 1
3343: ST_TO_ADDR
// end ;
3344: GO 3269
3346: POP
3347: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3348: LD_ADDR_EXP 11
3352: PUSH
3353: LD_EXP 8
3357: PUSH
3358: LD_INT 0
3360: PUSH
3361: EMPTY
3362: LIST
3363: DIFF
3364: PUSH
3365: LD_INT 1
3367: GREATER
3368: ST_TO_ADDR
// end else
3369: GO 3371
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3371: LD_EXP 3
3375: PPUSH
3376: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3380: LD_EXP 18
3384: PPUSH
3385: CALL 12268 0 1
3389: IFFALSE 3420
// begin for i in mpMarkedAreas do
3391: LD_ADDR_VAR 0 2
3395: PUSH
3396: LD_EXP 18
3400: PUSH
3401: FOR_IN
3402: IFFALSE 3418
// SetAreaMapShow ( i , 0 ) ;
3404: LD_VAR 0 2
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL_OW 424
3416: GO 3401
3418: POP
3419: POP
// end ; for i := 1 to 8 do
3420: LD_ADDR_VAR 0 2
3424: PUSH
3425: DOUBLE
3426: LD_INT 1
3428: DEC
3429: ST_TO_ADDR
3430: LD_INT 8
3432: PUSH
3433: FOR_TO
3434: IFFALSE 4770
// begin if not mpSidePositions [ i ] then
3436: LD_EXP 7
3440: PUSH
3441: LD_VAR 0 2
3445: ARRAY
3446: NOT
3447: IFFALSE 3451
// continue ;
3449: GO 3433
// side := i ;
3451: LD_ADDR_VAR 0 7
3455: PUSH
3456: LD_VAR 0 2
3460: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3461: LD_ADDR_VAR 0 9
3465: PUSH
3466: LD_EXP 9
3470: PUSH
3471: LD_VAR 0 2
3475: ARRAY
3476: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3477: LD_ADDR_VAR 0 8
3481: PUSH
3482: LD_EXP 7
3486: PUSH
3487: LD_VAR 0 2
3491: ARRAY
3492: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3493: LD_EXP 12
3497: PPUSH
3498: CALL 12268 0 1
3502: IFFALSE 3579
// begin for j in mpOilDeposits [ pos ] do
3504: LD_ADDR_VAR 0 3
3508: PUSH
3509: LD_EXP 12
3513: PUSH
3514: LD_VAR 0 8
3518: ARRAY
3519: PUSH
3520: FOR_IN
3521: IFFALSE 3577
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3523: LD_VAR 0 3
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: PPUSH
3532: LD_VAR 0 3
3536: PUSH
3537: LD_INT 2
3539: ARRAY
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3548: LD_VAR 0 3
3552: PUSH
3553: LD_INT 1
3555: ARRAY
3556: PPUSH
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 7
3570: PPUSH
3571: CALL_OW 441
// end ;
3575: GO 3520
3577: POP
3578: POP
// end ; if Count ( mpSibDeposits ) then
3579: LD_EXP 13
3583: PPUSH
3584: CALL 12268 0 1
3588: IFFALSE 3665
// begin for j in mpSibDeposits [ pos ] do
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_EXP 13
3599: PUSH
3600: LD_VAR 0 8
3604: ARRAY
3605: PUSH
3606: FOR_IN
3607: IFFALSE 3663
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3609: LD_VAR 0 3
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3634: LD_VAR 0 3
3638: PUSH
3639: LD_INT 1
3641: ARRAY
3642: PPUSH
3643: LD_VAR 0 3
3647: PUSH
3648: LD_INT 2
3650: ARRAY
3651: PPUSH
3652: LD_VAR 0 7
3656: PPUSH
3657: CALL_OW 441
// end ;
3661: GO 3606
3663: POP
3664: POP
// end ; InitBc ;
3665: CALL_OW 21
// InitUc ;
3669: CALL_OW 18
// uc_side := side ;
3673: LD_ADDR_OWVAR 20
3677: PUSH
3678: LD_VAR 0 7
3682: ST_TO_ADDR
// uc_nation := nation ;
3683: LD_ADDR_OWVAR 21
3687: PUSH
3688: LD_VAR 0 9
3692: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3693: LD_EXP 22
3697: PUSH
3698: LD_INT 1
3700: NEG
3701: GREATER
3702: IFFALSE 3861
// begin x := mpStartPos [ pos ] [ 1 ] ;
3704: LD_ADDR_VAR 0 5
3708: PUSH
3709: LD_EXP 21
3713: PUSH
3714: LD_VAR 0 8
3718: ARRAY
3719: PUSH
3720: LD_INT 1
3722: ARRAY
3723: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3724: LD_ADDR_VAR 0 6
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: LD_VAR 0 8
3738: ARRAY
3739: PUSH
3740: LD_INT 2
3742: ARRAY
3743: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3744: LD_VAR 0 5
3748: PPUSH
3749: LD_VAR 0 6
3753: PPUSH
3754: LD_INT 12
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3764: LD_ADDR_EXP 23
3768: PUSH
3769: LD_EXP 23
3773: PPUSH
3774: LD_VAR 0 7
3778: PPUSH
3779: LD_VAR 0 7
3783: PPUSH
3784: LD_VAR 0 5
3788: PPUSH
3789: LD_VAR 0 6
3793: PPUSH
3794: LD_INT 1
3796: PUSH
3797: LD_INT 100
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: LD_INT 70
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 3
3816: PUSH
3817: LD_INT 40
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 10
3826: PUSH
3827: LD_INT 25
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: LD_INT 20
3836: PUSH
3837: LD_INT 100
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 418
3855: PPUSH
3856: CALL_OW 1
3860: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3861: LD_EXP 14
3865: PPUSH
3866: CALL 12268 0 1
3870: IFFALSE 4054
// begin if mpGameType = GameTypeSurvival then
3872: LD_EXP 3
3876: PUSH
3877: LD_INT 2
3879: EQUAL
3880: IFFALSE 3900
// begin bc_level := 10 ;
3882: LD_ADDR_OWVAR 43
3886: PUSH
3887: LD_INT 10
3889: ST_TO_ADDR
// bc_type := b_warehouse ;
3890: LD_ADDR_OWVAR 42
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// end else
3898: GO 3916
// begin bc_level := 0 ;
3900: LD_ADDR_OWVAR 43
3904: PUSH
3905: LD_INT 0
3907: ST_TO_ADDR
// bc_type := b_depot ;
3908: LD_ADDR_OWVAR 42
3912: PUSH
3913: LD_INT 0
3915: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3916: LD_ADDR_VAR 0 4
3920: PUSH
3921: LD_EXP 14
3925: PUSH
3926: LD_VAR 0 8
3930: ARRAY
3931: PUSH
3932: LD_INT 1
3934: ARRAY
3935: PPUSH
3936: LD_EXP 14
3940: PUSH
3941: LD_VAR 0 8
3945: ARRAY
3946: PUSH
3947: LD_INT 2
3949: ARRAY
3950: PPUSH
3951: LD_EXP 14
3955: PUSH
3956: LD_VAR 0 8
3960: ARRAY
3961: PUSH
3962: LD_INT 3
3964: ARRAY
3965: PPUSH
3966: CALL_OW 47
3970: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3971: LD_VAR 0 4
3975: PPUSH
3976: LD_STRING @
3978: PUSH
3979: LD_VAR 0 7
3983: STR
3984: PPUSH
3985: CALL_OW 500
// if Count ( mpStartingResources ) then
3989: LD_EXP 15
3993: PPUSH
3994: CALL 12268 0 1
3998: IFFALSE 4052
// begin for j := 1 to mpStartingResources do
4000: LD_ADDR_VAR 0 3
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_EXP 15
4014: PUSH
4015: FOR_TO
4016: IFFALSE 4050
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4018: LD_VAR 0 4
4022: PPUSH
4023: CALL_OW 274
4027: PPUSH
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_EXP 15
4037: PUSH
4038: LD_VAR 0 3
4042: ARRAY
4043: PPUSH
4044: CALL_OW 277
4048: GO 4015
4050: POP
4051: POP
// end ; end else
4052: GO 4261
// if Count ( mpStartingResources ) then
4054: LD_EXP 15
4058: PPUSH
4059: CALL 12268 0 1
4063: IFFALSE 4261
// begin x := mpStartPos [ pos ] [ 1 ] ;
4065: LD_ADDR_VAR 0 5
4069: PUSH
4070: LD_EXP 21
4074: PUSH
4075: LD_VAR 0 8
4079: ARRAY
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4085: LD_ADDR_VAR 0 6
4089: PUSH
4090: LD_EXP 21
4094: PUSH
4095: LD_VAR 0 8
4099: ARRAY
4100: PUSH
4101: LD_INT 2
4103: ARRAY
4104: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4105: LD_ADDR_VAR 0 3
4109: PUSH
4110: DOUBLE
4111: LD_INT 1
4113: DEC
4114: ST_TO_ADDR
4115: LD_EXP 15
4119: PUSH
4120: FOR_TO
4121: IFFALSE 4259
// begin resources := mpStartingResources [ j ] ;
4123: LD_ADDR_VAR 0 13
4127: PUSH
4128: LD_EXP 15
4132: PUSH
4133: LD_VAR 0 3
4137: ARRAY
4138: ST_TO_ADDR
// if resources = 0 then
4139: LD_VAR 0 13
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: IFFALSE 4151
// continue ;
4149: GO 4120
// repeat if resources >= 50 then
4151: LD_VAR 0 13
4155: PUSH
4156: LD_INT 50
4158: GREATEREQUAL
4159: IFFALSE 4205
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4161: LD_VAR 0 3
4165: PPUSH
4166: LD_INT 5
4168: PPUSH
4169: LD_VAR 0 5
4173: PPUSH
4174: LD_VAR 0 6
4178: PPUSH
4179: LD_INT 6
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 60
// resources := resources - 50 ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_VAR 0 13
4198: PUSH
4199: LD_INT 50
4201: MINUS
4202: ST_TO_ADDR
// end else
4203: GO 4247
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4205: LD_VAR 0 3
4209: PPUSH
4210: LD_VAR 0 13
4214: PUSH
4215: LD_INT 10
4217: DIV
4218: PPUSH
4219: LD_VAR 0 5
4223: PPUSH
4224: LD_VAR 0 6
4228: PPUSH
4229: LD_INT 6
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 60
// resources := 0 ;
4239: LD_ADDR_VAR 0 13
4243: PUSH
4244: LD_INT 0
4246: ST_TO_ADDR
// end ; until resources <= 0 ;
4247: LD_VAR 0 13
4251: PUSH
4252: LD_INT 0
4254: LESSEQUAL
4255: IFFALSE 4151
// end ;
4257: GO 4120
4259: POP
4260: POP
// end ; if Count ( mpBuildings ) then
4261: LD_EXP 17
4265: PPUSH
4266: CALL 12268 0 1
4270: IFFALSE 4348
// begin for j in mpBuildings [ pos ] do
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_EXP 17
4281: PUSH
4282: LD_VAR 0 8
4286: ARRAY
4287: PUSH
4288: FOR_IN
4289: IFFALSE 4346
// begin bc_level := 0 ;
4291: LD_ADDR_OWVAR 43
4295: PUSH
4296: LD_INT 0
4298: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4299: LD_ADDR_OWVAR 42
4303: PUSH
4304: LD_VAR 0 3
4308: PUSH
4309: LD_INT 1
4311: ARRAY
4312: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_VAR 0 3
4326: PUSH
4327: LD_INT 3
4329: ARRAY
4330: PPUSH
4331: LD_VAR 0 3
4335: PUSH
4336: LD_INT 4
4338: ARRAY
4339: PPUSH
4340: CALL_OW 47
// end ;
4344: GO 4288
4346: POP
4347: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4348: LD_EXP 26
4352: IFFALSE 4372
4354: PUSH
4355: LD_INT 20
4357: PPUSH
4358: LD_VAR 0 7
4362: PPUSH
4363: CALL_OW 321
4367: PUSH
4368: LD_INT 1
4370: EQUAL
4371: AND
4372: IFFALSE 4389
// SetTech ( tech_SibDet , side , state_researched ) ;
4374: LD_INT 20
4376: PPUSH
4377: LD_VAR 0 7
4381: PPUSH
4382: LD_INT 2
4384: PPUSH
4385: CALL_OW 322
// if not mpArtifacts then
4389: LD_EXP 44
4393: NOT
4394: IFFALSE 4411
// SetTech ( tech_artifact , side , state_disabled ) ;
4396: LD_INT 24
4398: PPUSH
4399: LD_VAR 0 7
4403: PPUSH
4404: LD_INT 0
4406: PPUSH
4407: CALL_OW 322
// if mpSibBomb = 1 then
4411: LD_EXP 28
4415: PUSH
4416: LD_INT 1
4418: EQUAL
4419: IFFALSE 4438
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4421: LD_INT 25
4423: PPUSH
4424: LD_VAR 0 7
4428: PPUSH
4429: LD_INT 1
4431: PPUSH
4432: CALL_OW 322
// end else
4436: GO 4453
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4438: LD_INT 25
4440: PPUSH
4441: LD_VAR 0 7
4445: PPUSH
4446: LD_INT 0
4448: PPUSH
4449: CALL_OW 322
// end ; if mpVehicles then
4453: LD_EXP 36
4457: IFFALSE 4556
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_VAR 0 7
4468: PPUSH
4469: LD_VAR 0 9
4473: PPUSH
4474: LD_EXP 36
4478: PPUSH
4479: CALL 5680 0 3
4483: PUSH
4484: FOR_IN
4485: IFFALSE 4554
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 0
4494: PPUSH
4495: LD_INT 5
4497: PPUSH
4498: CALL_OW 12
4502: PPUSH
4503: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4507: LD_VAR 0 3
4511: PPUSH
4512: LD_EXP 21
4516: PUSH
4517: LD_VAR 0 8
4521: ARRAY
4522: PUSH
4523: LD_INT 1
4525: ARRAY
4526: PPUSH
4527: LD_EXP 21
4531: PUSH
4532: LD_VAR 0 8
4536: ARRAY
4537: PUSH
4538: LD_INT 2
4540: ARRAY
4541: PPUSH
4542: LD_INT 12
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 50
// end ;
4552: GO 4484
4554: POP
4555: POP
// end ; uc_nation := nation ;
4556: LD_ADDR_OWVAR 21
4560: PUSH
4561: LD_VAR 0 9
4565: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4566: LD_ADDR_VAR 0 11
4570: PUSH
4571: LD_VAR 0 7
4575: PPUSH
4576: LD_VAR 0 9
4580: PPUSH
4581: LD_EXP 24
4585: PPUSH
4586: LD_EXP 25
4590: PPUSH
4591: CALL 5182 0 4
4595: ST_TO_ADDR
// for j in team do
4596: LD_ADDR_VAR 0 3
4600: PUSH
4601: LD_VAR 0 11
4605: PUSH
4606: FOR_IN
4607: IFFALSE 4656
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4609: LD_VAR 0 3
4613: PPUSH
4614: LD_EXP 21
4618: PUSH
4619: LD_VAR 0 8
4623: ARRAY
4624: PUSH
4625: LD_INT 1
4627: ARRAY
4628: PPUSH
4629: LD_EXP 21
4633: PUSH
4634: LD_VAR 0 8
4638: ARRAY
4639: PUSH
4640: LD_INT 2
4642: ARRAY
4643: PPUSH
4644: LD_INT 12
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
4654: GO 4606
4656: POP
4657: POP
// if mpApemans then
4658: LD_EXP 30
4662: IFFALSE 4768
// begin for j := 1 to mpApemans do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_EXP 30
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4766
// begin PrepareApeman ( - 5 ) ;
4682: LD_INT 5
4684: NEG
4685: PPUSH
4686: CALL 44327 0 1
// ape := CreateHuman ;
4690: LD_ADDR_VAR 0 10
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4700: LD_ADDR_EXP 32
4704: PUSH
4705: LD_EXP 32
4709: PPUSH
4710: LD_VAR 0 8
4714: PPUSH
4715: LD_EXP 32
4719: PUSH
4720: LD_VAR 0 8
4724: ARRAY
4725: PPUSH
4726: LD_VAR 0 10
4730: PPUSH
4731: CALL 48200 0 2
4735: PPUSH
4736: CALL_OW 1
4740: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4741: LD_VAR 0 10
4745: PPUSH
4746: LD_EXP 31
4750: PUSH
4751: LD_VAR 0 8
4755: ARRAY
4756: PPUSH
4757: LD_INT 0
4759: PPUSH
4760: CALL_OW 49
// end ;
4764: GO 4679
4766: POP
4767: POP
// end ; end ;
4768: GO 3433
4770: POP
4771: POP
// if not mpTeamGame then
4772: LD_EXP 11
4776: NOT
4777: IFFALSE 4875
// begin for i := 1 to 8 do
4779: LD_ADDR_VAR 0 2
4783: PUSH
4784: DOUBLE
4785: LD_INT 1
4787: DEC
4788: ST_TO_ADDR
4789: LD_INT 8
4791: PUSH
4792: FOR_TO
4793: IFFALSE 4871
// for j := 1 to 8 do
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: DOUBLE
4801: LD_INT 1
4803: DEC
4804: ST_TO_ADDR
4805: LD_INT 8
4807: PUSH
4808: FOR_TO
4809: IFFALSE 4867
// if i <> j then
4811: LD_VAR 0 2
4815: PUSH
4816: LD_VAR 0 3
4820: NONEQUAL
4821: IFFALSE 4845
// SetAttitude ( i , j , att_neutral , true ) else
4823: LD_VAR 0 2
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 0
4835: PPUSH
4836: LD_INT 1
4838: PPUSH
4839: CALL_OW 80
4843: GO 4865
// SetAttitude ( i , j , att_friend , true ) ;
4845: LD_VAR 0 2
4849: PPUSH
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 80
4865: GO 4808
4867: POP
4868: POP
4869: GO 4792
4871: POP
4872: POP
// end else
4873: GO 5050
// begin if mpSharedVision then
4875: LD_EXP 16
4879: IFFALSE 4944
// begin for i in mpTeams do
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: LD_EXP 10
4890: PUSH
4891: FOR_IN
4892: IFFALSE 4942
// for j := 2 to i do
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: DOUBLE
4900: LD_INT 2
4902: DEC
4903: ST_TO_ADDR
4904: LD_VAR 0 2
4908: PUSH
4909: FOR_TO
4910: IFFALSE 4938
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4912: LD_VAR 0 2
4916: PUSH
4917: LD_VAR 0 3
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 2
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: PPUSH
4932: CALL_OW 343
4936: GO 4909
4938: POP
4939: POP
4940: GO 4891
4942: POP
4943: POP
// end ; for i := 1 to 8 do
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: DOUBLE
4950: LD_INT 1
4952: DEC
4953: ST_TO_ADDR
4954: LD_INT 8
4956: PUSH
4957: FOR_TO
4958: IFFALSE 5048
// for j := 1 to 8 do
4960: LD_ADDR_VAR 0 3
4964: PUSH
4965: DOUBLE
4966: LD_INT 1
4968: DEC
4969: ST_TO_ADDR
4970: LD_INT 8
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5044
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4976: LD_EXP 8
4980: PUSH
4981: LD_VAR 0 2
4985: ARRAY
4986: PUSH
4987: LD_EXP 8
4991: PUSH
4992: LD_VAR 0 3
4996: ARRAY
4997: EQUAL
4998: IFFALSE 5022
// SetAttitude ( i , j , att_friend , true ) else
5000: LD_VAR 0 2
5004: PPUSH
5005: LD_VAR 0 3
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: CALL_OW 80
5020: GO 5042
// SetAttitude ( i , j , att_enemy , true ) ;
5022: LD_VAR 0 2
5026: PPUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 2
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 80
5042: GO 4973
5044: POP
5045: POP
5046: GO 4957
5048: POP
5049: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5050: LD_ADDR_OWVAR 71
5054: PUSH
5055: LD_EXP 9
5059: PUSH
5060: LD_OWVAR 2
5064: ARRAY
5065: ST_TO_ADDR
// if IAmSpec then
5066: CALL_OW 531
5070: IFFALSE 5111
// begin FogOff ( true ) ;
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5079: LD_EXP 29
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 2
5090: DIV
5091: PPUSH
5092: LD_EXP 29
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PUSH
5101: LD_INT 2
5103: DIV
5104: PPUSH
5105: CALL_OW 86
// end else
5109: GO 5157
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5111: LD_EXP 21
5115: PUSH
5116: LD_EXP 7
5120: PUSH
5121: LD_OWVAR 2
5125: ARRAY
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: ARRAY
5131: PPUSH
5132: LD_EXP 21
5136: PUSH
5137: LD_EXP 7
5141: PUSH
5142: LD_OWVAR 2
5146: ARRAY
5147: ARRAY
5148: PUSH
5149: LD_INT 2
5151: ARRAY
5152: PPUSH
5153: CALL_OW 86
// end ; BeginBuildUp ;
5157: CALL 6213 0 0
// enable ( mpActive ) ;
5161: LD_INT 100
5163: ENABLE_MARKED
// enable ( mpGameType ) ;
5164: LD_EXP 3
5168: ENABLE_MARKED
// mpGameActive := true ;
5169: LD_ADDR_EXP 39
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// end ;
5177: LD_VAR 0 1
5181: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5182: LD_INT 0
5184: PPUSH
5185: PPUSH
5186: PPUSH
5187: PPUSH
// result := [ ] ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: EMPTY
5194: ST_TO_ADDR
// class := class_soldier ;
5195: LD_ADDR_VAR 0 8
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// uc_side := side ;
5203: LD_ADDR_OWVAR 20
5207: PUSH
5208: LD_VAR 0 1
5212: ST_TO_ADDR
// uc_nation := nation ;
5213: LD_ADDR_OWVAR 21
5217: PUSH
5218: LD_VAR 0 2
5222: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5223: LD_ADDR_OWVAR 26
5227: PUSH
5228: LD_OWVAR 19
5232: PUSH
5233: LD_VAR 0 1
5237: ARRAY
5238: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5239: LD_INT 1
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: CALL_OW 12
5249: PPUSH
5250: LD_VAR 0 8
5254: PPUSH
5255: LD_VAR 0 4
5259: PUSH
5260: LD_INT 2
5262: PLUS
5263: PPUSH
5264: CALL_OW 380
// hc_importance := 105 ;
5268: LD_ADDR_OWVAR 32
5272: PUSH
5273: LD_INT 105
5275: ST_TO_ADDR
// if Multiplayer then
5276: LD_OWVAR 4
5280: IFFALSE 5320
// begin hc_gallery := MULTIAVATARS ;
5282: LD_ADDR_OWVAR 33
5286: PUSH
5287: LD_STRING MULTIAVATARS
5289: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5290: LD_ADDR_OWVAR 34
5294: PUSH
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL_OW 525
5304: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5305: LD_ADDR_OWVAR 27
5309: PUSH
5310: LD_VAR 0 1
5314: PPUSH
5315: CALL_OW 526
5319: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5320: LD_ADDR_VAR 0 5
5324: PUSH
5325: LD_VAR 0 5
5329: PPUSH
5330: CALL_OW 44
5334: PPUSH
5335: CALL 48200 0 2
5339: ST_TO_ADDR
// if mpTeamPreset then
5340: LD_LOC 1
5344: IFFALSE 5440
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5346: LD_LOC 1
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: PPUSH
5355: LD_VAR 0 5
5359: PUSH
5360: LD_VAR 0 5
5364: ARRAY
5365: PPUSH
5366: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5370: LD_VAR 0 5
5374: PUSH
5375: LD_VAR 0 5
5379: ARRAY
5380: PPUSH
5381: LD_INT 1
5383: PPUSH
5384: LD_LOC 1
5388: PUSH
5389: LD_INT 1
5391: ARRAY
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 260
5400: PPUSH
5401: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5405: LD_VAR 0 5
5409: PUSH
5410: LD_VAR 0 5
5414: ARRAY
5415: PPUSH
5416: LD_INT 2
5418: PPUSH
5419: LD_LOC 1
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_INT 2
5430: PPUSH
5431: CALL_OW 260
5435: PPUSH
5436: CALL_OW 239
// end ; InitHc_All ( ) ;
5440: CALL_OW 584
// class := 2 ;
5444: LD_ADDR_VAR 0 8
5448: PUSH
5449: LD_INT 2
5451: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5452: LD_ADDR_VAR 0 6
5456: PUSH
5457: DOUBLE
5458: LD_INT 1
5460: DEC
5461: ST_TO_ADDR
5462: LD_VAR 0 3
5466: PUSH
5467: LD_INT 1
5469: MINUS
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5656
// begin PrepareHuman ( false , class , skill ) ;
5474: LD_INT 0
5476: PPUSH
5477: LD_VAR 0 8
5481: PPUSH
5482: LD_VAR 0 4
5486: PPUSH
5487: CALL_OW 380
// un := CreateHuman ;
5491: LD_ADDR_VAR 0 7
5495: PUSH
5496: CALL_OW 44
5500: ST_TO_ADDR
// result := Join ( result , un ) ;
5501: LD_ADDR_VAR 0 5
5505: PUSH
5506: LD_VAR 0 5
5510: PPUSH
5511: LD_VAR 0 7
5515: PPUSH
5516: CALL 48200 0 2
5520: ST_TO_ADDR
// if mpTeamPreset then
5521: LD_LOC 1
5525: IFFALSE 5621
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5527: LD_LOC 1
5531: PUSH
5532: LD_VAR 0 6
5536: PUSH
5537: LD_INT 1
5539: PLUS
5540: ARRAY
5541: PPUSH
5542: LD_VAR 0 7
5546: PPUSH
5547: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5551: LD_VAR 0 7
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: LD_LOC 1
5563: PUSH
5564: LD_VAR 0 6
5568: PUSH
5569: LD_INT 1
5571: PLUS
5572: ARRAY
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: CALL_OW 260
5581: PPUSH
5582: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5586: LD_VAR 0 7
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: LD_LOC 1
5598: PUSH
5599: LD_VAR 0 6
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: ARRAY
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: CALL_OW 260
5616: PPUSH
5617: CALL_OW 239
// end ; class := Inc ( class ) ;
5621: LD_ADDR_VAR 0 8
5625: PUSH
5626: LD_VAR 0 8
5630: PPUSH
5631: CALL 49573 0 1
5635: ST_TO_ADDR
// if class = 5 then
5636: LD_VAR 0 8
5640: PUSH
5641: LD_INT 5
5643: EQUAL
5644: IFFALSE 5654
// class := 1 ;
5646: LD_ADDR_VAR 0 8
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// end ;
5654: GO 5471
5656: POP
5657: POP
// if not mpTeamPreset then
5658: LD_LOC 1
5662: NOT
5663: IFFALSE 5675
// mpTeamPreset := result ;
5665: LD_ADDR_LOC 1
5669: PUSH
5670: LD_VAR 0 5
5674: ST_TO_ADDR
// end ;
5675: LD_VAR 0 5
5679: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5680: LD_INT 0
5682: PPUSH
5683: PPUSH
// result := [ ] ;
5684: LD_ADDR_VAR 0 4
5688: PUSH
5689: EMPTY
5690: ST_TO_ADDR
// if not vehicles then
5691: LD_VAR 0 3
5695: NOT
5696: IFFALSE 5700
// exit ;
5698: GO 5914
// for i := 1 to vehicles [ nation ] do
5700: LD_ADDR_VAR 0 5
5704: PUSH
5705: DOUBLE
5706: LD_INT 1
5708: DEC
5709: ST_TO_ADDR
5710: LD_VAR 0 3
5714: PUSH
5715: LD_VAR 0 2
5719: ARRAY
5720: PUSH
5721: FOR_TO
5722: IFFALSE 5912
// begin uc_side := side ;
5724: LD_ADDR_OWVAR 20
5728: PUSH
5729: LD_VAR 0 1
5733: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5734: LD_VAR 0 3
5738: PUSH
5739: LD_VAR 0 2
5743: ARRAY
5744: PUSH
5745: LD_VAR 0 5
5749: ARRAY
5750: PPUSH
5751: CALL 12268 0 1
5755: PUSH
5756: LD_INT 4
5758: GREATER
5759: IFFALSE 5789
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5761: LD_ADDR_OWVAR 21
5765: PUSH
5766: LD_VAR 0 3
5770: PUSH
5771: LD_VAR 0 2
5775: ARRAY
5776: PUSH
5777: LD_VAR 0 5
5781: ARRAY
5782: PUSH
5783: LD_INT 5
5785: ARRAY
5786: ST_TO_ADDR
5787: GO 5799
// uc_nation := nation ;
5789: LD_ADDR_OWVAR 21
5793: PUSH
5794: LD_VAR 0 2
5798: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5799: LD_VAR 0 3
5803: PUSH
5804: LD_VAR 0 2
5808: ARRAY
5809: PUSH
5810: LD_VAR 0 5
5814: ARRAY
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: PPUSH
5820: LD_VAR 0 3
5824: PUSH
5825: LD_VAR 0 2
5829: ARRAY
5830: PUSH
5831: LD_VAR 0 5
5835: ARRAY
5836: PUSH
5837: LD_INT 2
5839: ARRAY
5840: PPUSH
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 2
5850: ARRAY
5851: PUSH
5852: LD_VAR 0 5
5856: ARRAY
5857: PUSH
5858: LD_INT 3
5860: ARRAY
5861: PPUSH
5862: LD_VAR 0 3
5866: PUSH
5867: LD_VAR 0 2
5871: ARRAY
5872: PUSH
5873: LD_VAR 0 5
5877: ARRAY
5878: PUSH
5879: LD_INT 4
5881: ARRAY
5882: PPUSH
5883: LD_INT 80
5885: PPUSH
5886: CALL 15030 0 5
// result := Join ( result , CreateVehicle ) ;
5890: LD_ADDR_VAR 0 4
5894: PUSH
5895: LD_VAR 0 4
5899: PPUSH
5900: CALL_OW 45
5904: PPUSH
5905: CALL 48200 0 2
5909: ST_TO_ADDR
// end ;
5910: GO 5721
5912: POP
5913: POP
// end ;
5914: LD_VAR 0 4
5918: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
// for i in mpBattleFlags do
5923: LD_ADDR_VAR 0 3
5927: PUSH
5928: LD_EXP 23
5932: PUSH
5933: FOR_IN
5934: IFFALSE 6011
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_INT 1
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: LD_INT 2
5955: PUSH
5956: LD_VAR 0 1
5960: PUSH
5961: LD_REAL  7.00000000000000E-0001
5964: MUL
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: LD_VAR 0 1
5977: PUSH
5978: LD_REAL  4.00000000000000E-0001
5981: MUL
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 20
5989: PUSH
5990: LD_VAR 0 1
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 423
6009: GO 5933
6011: POP
6012: POP
// end ;
6013: LD_VAR 0 2
6017: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6018: LD_INT 100
6020: IFFALSE 6115
6022: GO 6024
6024: DISABLE
6025: LD_INT 0
6027: PPUSH
6028: PPUSH
// begin if mpBattleFlag <= 0 then
6029: LD_EXP 22
6033: PUSH
6034: LD_INT 0
6036: LESSEQUAL
6037: IFFALSE 6041
// exit ;
6039: GO 6115
// strength := 100 ;
6041: LD_ADDR_VAR 0 2
6045: PUSH
6046: LD_INT 100
6048: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6049: LD_EXP 22
6053: PPUSH
6054: CALL_OW 67
// strength := Dec ( strength ) ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_VAR 0 2
6067: PPUSH
6068: CALL 49595 0 1
6072: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL 5919 0 1
// until not strength ;
6082: LD_VAR 0 2
6086: NOT
6087: IFFALSE 6049
// for i in mpBattleFlags do
6089: LD_ADDR_VAR 0 1
6093: PUSH
6094: LD_EXP 23
6098: PUSH
6099: FOR_IN
6100: IFFALSE 6113
// KillBattleFlag ( i ) ;
6102: LD_VAR 0 1
6106: PPUSH
6107: CALL_OW 419
6111: GO 6099
6113: POP
6114: POP
// end ;
6115: PPOPN 2
6117: END
// every 0 0$1 marked mpActive do var side , tmp ;
6118: GO 6120
6120: DISABLE
6121: LD_INT 0
6123: PPUSH
6124: PPUSH
// begin if mpSibBomb <= 1 then
6125: LD_EXP 28
6129: PUSH
6130: LD_INT 1
6132: LESSEQUAL
6133: IFFALSE 6137
// exit ;
6135: GO 6210
// tmp := mpSibBomb ;
6137: LD_ADDR_VAR 0 2
6141: PUSH
6142: LD_EXP 28
6146: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6147: LD_INT 35
6149: PPUSH
6150: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6154: LD_ADDR_VAR 0 2
6158: PUSH
6159: LD_VAR 0 2
6163: PUSH
6164: LD_INT 35
6166: MINUS
6167: ST_TO_ADDR
// until not tmp ;
6168: LD_VAR 0 2
6172: NOT
6173: IFFALSE 6147
// for side := 1 to 8 do
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_INT 8
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6208
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6191: LD_INT 25
6193: PPUSH
6194: LD_VAR 0 1
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 322
6206: GO 6188
6208: POP
6209: POP
// end ;
6210: PPOPN 2
6212: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
6217: PPUSH
// mpBuildUpTimeDelay := 0 ;
6218: LD_ADDR_EXP 46
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// if not mpBuildUpTime then
6226: LD_EXP 20
6230: NOT
6231: IFFALSE 6235
// exit ;
6233: GO 6424
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6235: LD_ADDR_EXP 46
6239: PUSH
6240: LD_INT 8400
6242: PUSH
6243: LD_INT 2100
6245: PUSH
6246: LD_EXP 20
6250: MUL
6251: PLUS
6252: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6253: LD_ADDR_EXP 47
6257: PUSH
6258: LD_INT 1
6260: ST_TO_ADDR
// for i := 1 to 8 do
6261: LD_ADDR_VAR 0 2
6265: PUSH
6266: DOUBLE
6267: LD_INT 1
6269: DEC
6270: ST_TO_ADDR
6271: LD_INT 8
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6422
// if mpSidePositions [ i ] then
6277: LD_EXP 7
6281: PUSH
6282: LD_VAR 0 2
6286: ARRAY
6287: IFFALSE 6420
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6289: LD_EXP 19
6293: PUSH
6294: LD_EXP 7
6298: PUSH
6299: LD_VAR 0 2
6303: ARRAY
6304: ARRAY
6305: PPUSH
6306: LD_INT 5
6308: PPUSH
6309: CALL_OW 424
// for j := 1 to 8 do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_INT 8
6325: PUSH
6326: FOR_TO
6327: IFFALSE 6418
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6329: LD_EXP 7
6333: PUSH
6334: LD_VAR 0 3
6338: ARRAY
6339: IFFALSE 6388
6341: PUSH
6342: LD_EXP 8
6346: PUSH
6347: LD_VAR 0 2
6351: ARRAY
6352: PUSH
6353: LD_EXP 8
6357: PUSH
6358: LD_VAR 0 3
6362: ARRAY
6363: NONEQUAL
6364: IFTRUE 6387
6366: PUSH
6367: LD_EXP 11
6371: NOT
6372: IFFALSE 6386
6374: PUSH
6375: LD_VAR 0 2
6379: PUSH
6380: LD_VAR 0 3
6384: NONEQUAL
6385: AND
6386: OR
6387: AND
6388: IFFALSE 6416
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6390: LD_VAR 0 3
6394: PPUSH
6395: LD_EXP 19
6399: PUSH
6400: LD_EXP 7
6404: PUSH
6405: LD_VAR 0 2
6409: ARRAY
6410: ARRAY
6411: PPUSH
6412: CALL_OW 333
6416: GO 6326
6418: POP
6419: POP
// end ;
6420: GO 6274
6422: POP
6423: POP
// end ;
6424: LD_VAR 0 1
6428: RET
// function EndBuildUp ; var i , j ; begin
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
6433: PPUSH
// mpBuildUpTimeActive := false ;
6434: LD_ADDR_EXP 47
6438: PUSH
6439: LD_INT 0
6441: ST_TO_ADDR
// for i := 1 to 8 do
6442: LD_ADDR_VAR 0 2
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 8
6454: PUSH
6455: FOR_TO
6456: IFFALSE 6603
// if mpSidePositions [ i ] then
6458: LD_EXP 7
6462: PUSH
6463: LD_VAR 0 2
6467: ARRAY
6468: IFFALSE 6601
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6470: LD_EXP 19
6474: PUSH
6475: LD_EXP 7
6479: PUSH
6480: LD_VAR 0 2
6484: ARRAY
6485: ARRAY
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 424
// for j := 1 to 8 do
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_INT 8
6506: PUSH
6507: FOR_TO
6508: IFFALSE 6599
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6510: LD_EXP 7
6514: PUSH
6515: LD_VAR 0 3
6519: ARRAY
6520: IFFALSE 6569
6522: PUSH
6523: LD_EXP 8
6527: PUSH
6528: LD_VAR 0 2
6532: ARRAY
6533: PUSH
6534: LD_EXP 8
6538: PUSH
6539: LD_VAR 0 3
6543: ARRAY
6544: NONEQUAL
6545: IFTRUE 6568
6547: PUSH
6548: LD_EXP 11
6552: NOT
6553: IFFALSE 6567
6555: PUSH
6556: LD_VAR 0 2
6560: PUSH
6561: LD_VAR 0 3
6565: NONEQUAL
6566: AND
6567: OR
6568: AND
6569: IFFALSE 6597
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6571: LD_VAR 0 3
6575: PPUSH
6576: LD_EXP 19
6580: PUSH
6581: LD_EXP 7
6585: PUSH
6586: LD_VAR 0 2
6590: ARRAY
6591: ARRAY
6592: PPUSH
6593: CALL_OW 334
6597: GO 6507
6599: POP
6600: POP
// end ;
6601: GO 6455
6603: POP
6604: POP
// end ;
6605: LD_VAR 0 1
6609: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6610: LD_EXP 47
6614: IFFALSE 6793
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin for i := 1 to 8 do
6623: LD_ADDR_VAR 0 1
6627: PUSH
6628: DOUBLE
6629: LD_INT 1
6631: DEC
6632: ST_TO_ADDR
6633: LD_INT 8
6635: PUSH
6636: FOR_TO
6637: IFFALSE 6790
// if mpSidePositions [ i ] then
6639: LD_EXP 7
6643: PUSH
6644: LD_VAR 0 1
6648: ARRAY
6649: IFFALSE 6788
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6651: LD_ADDR_VAR 0 2
6655: PUSH
6656: LD_EXP 19
6660: PUSH
6661: LD_EXP 7
6665: PUSH
6666: LD_VAR 0 1
6670: ARRAY
6671: ARRAY
6672: PPUSH
6673: LD_INT 2
6675: PUSH
6676: LD_INT 21
6678: PUSH
6679: LD_INT 1
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 21
6688: PUSH
6689: LD_INT 2
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 22
6703: PUSH
6704: LD_OWVAR 2
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PPUSH
6717: CALL_OW 70
6721: PUSH
6722: FOR_IN
6723: IFFALSE 6786
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6725: LD_EXP 8
6729: PUSH
6730: LD_VAR 0 1
6734: ARRAY
6735: PUSH
6736: LD_EXP 8
6740: PUSH
6741: LD_OWVAR 2
6745: ARRAY
6746: NONEQUAL
6747: IFTRUE 6770
6749: PUSH
6750: LD_EXP 11
6754: NOT
6755: IFFALSE 6769
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: LD_OWVAR 2
6767: NONEQUAL
6768: AND
6769: OR
6770: IFFALSE 6784
// ComMoveToArea ( un , BuildUpEscape ) ;
6772: LD_VAR 0 2
6776: PPUSH
6777: LD_INT 15
6779: PPUSH
6780: CALL_OW 113
6784: GO 6722
6786: POP
6787: POP
6788: GO 6636
6790: POP
6791: POP
// enable ;
6792: ENABLE
// end ;
6793: PPOPN 2
6795: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6796: LD_EXP 20
6800: IFFALSE 6850
6802: GO 6804
6804: DISABLE
6805: LD_INT 0
6807: PPUSH
// begin tmp := mpBuildUpTime ;
6808: LD_ADDR_VAR 0 1
6812: PUSH
6813: LD_EXP 20
6817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6818: LD_INT 35
6820: PPUSH
6821: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6825: LD_ADDR_VAR 0 1
6829: PUSH
6830: LD_VAR 0 1
6834: PUSH
6835: LD_INT 35
6837: MINUS
6838: ST_TO_ADDR
// until not tmp ;
6839: LD_VAR 0 1
6843: NOT
6844: IFFALSE 6818
// EndBuildUp ;
6846: CALL 6429 0 0
// end ;
6850: PPOPN 1
6852: END
// every 0 0$1 trigger mpActive marked mpWin do
6853: LD_INT 100
6855: IFFALSE 6889
6857: GO 6859
6859: DISABLE
// begin if IAmServer then
6860: CALL_OW 518
6864: IFFALSE 6873
// wait ( 0 0$3 ) ;
6866: LD_INT 105
6868: PPUSH
6869: CALL_OW 67
// if Multiplayer then
6873: LD_OWVAR 4
6877: IFFALSE 6885
// YouWinInMultiplayer else
6879: CALL_OW 106
6883: GO 6889
// YouWin ;
6885: CALL_OW 103
// end ;
6889: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6890: LD_INT 0
6892: PPUSH
// result := false ;
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_INT 0
6900: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6901: LD_VAR 0 1
6905: PUSH
6906: LD_INT 1
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6920
6912: LD_INT 5
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6993
6920: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6921: LD_ADDR_VAR 0 3
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_VAR 0 2
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: LD_INT 21
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 33
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 33
6963: PUSH
6964: LD_INT 5
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 69
6985: PPUSH
6986: CALL 12268 0 1
6990: ST_TO_ADDR
// end ; GameTypeSurvival :
6991: GO 7232
6993: LD_INT 2
6995: DOUBLE
6996: EQUAL
6997: IFTRUE 7001
6999: GO 7131
7001: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7002: LD_ADDR_VAR 0 3
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_VAR 0 2
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 2
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 0
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: PPUSH
7056: CALL 12268 0 1
7060: IFFALSE 7128
7062: PUSH
7063: LD_INT 22
7065: PUSH
7066: LD_VAR 0 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 2
7077: PUSH
7078: LD_INT 21
7080: PUSH
7081: LD_INT 1
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 33
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 33
7100: PUSH
7101: LD_INT 5
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 69
7122: PPUSH
7123: CALL 12268 0 1
7127: AND
7128: ST_TO_ADDR
// end ; GameTypeKing :
7129: GO 7232
7131: LD_INT 3
7133: DOUBLE
7134: EQUAL
7135: IFTRUE 7139
7137: GO 7231
7139: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7140: LD_ADDR_VAR 0 3
7144: PUSH
7145: LD_INT 22
7147: PUSH
7148: LD_VAR 0 2
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 33
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 33
7182: PUSH
7183: LD_INT 5
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PPUSH
7200: CALL_OW 69
7204: PPUSH
7205: CALL 12268 0 1
7209: IFFALSE 7228
7211: PUSH
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL 60164 0 1
7221: PUSH
7222: LD_EXP 35
7226: LESS
7227: AND
7228: ST_TO_ADDR
// end ; end ;
7229: GO 7232
7231: POP
// end ;
7232: LD_VAR 0 3
7236: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7237: LD_INT 100
7239: IFFALSE 7469
7241: GO 7243
7243: DISABLE
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
// begin if Multiplayer then
7248: LD_OWVAR 4
7252: IFFALSE 7260
// SetPlayerSpectator ( ) else
7254: CALL_OW 572
7258: GO 7269
// FogOff ( your_side ) ;
7260: LD_OWVAR 2
7264: PPUSH
7265: CALL_OW 344
// repeat gameIsOn := false ;
7269: LD_ADDR_VAR 0 1
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// for i := 1 to 8 do
7277: LD_ADDR_VAR 0 2
7281: PUSH
7282: DOUBLE
7283: LD_INT 1
7285: DEC
7286: ST_TO_ADDR
7287: LD_INT 8
7289: PUSH
7290: FOR_TO
7291: IFFALSE 7421
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7293: LD_EXP 7
7297: PUSH
7298: LD_VAR 0 2
7302: ARRAY
7303: IFFALSE 7316
7305: PUSH
7306: LD_VAR 0 2
7310: PPUSH
7311: CALL_OW 108
7315: AND
7316: IFFALSE 7330
7318: PUSH
7319: LD_VAR 0 2
7323: PUSH
7324: LD_OWVAR 2
7328: NONEQUAL
7329: AND
7330: IFFALSE 7419
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7332: LD_EXP 8
7336: PUSH
7337: LD_VAR 0 2
7341: ARRAY
7342: NOT
7343: IFTRUE 7391
7345: PUSH
7346: LD_EXP 8
7350: PUSH
7351: LD_VAR 0 2
7355: ARRAY
7356: PUSH
7357: LD_EXP 8
7361: PUSH
7362: LD_OWVAR 2
7366: ARRAY
7367: NONEQUAL
7368: IFFALSE 7390
7370: PUSH
7371: LD_OWVAR 2
7375: PPUSH
7376: LD_VAR 0 2
7380: PPUSH
7381: CALL_OW 81
7385: PUSH
7386: LD_INT 1
7388: NONEQUAL
7389: AND
7390: OR
7391: IFFALSE 7419
// if HasPowerByGameType ( mpGameType , i ) then
7393: LD_EXP 3
7397: PPUSH
7398: LD_VAR 0 2
7402: PPUSH
7403: CALL 6890 0 2
7407: IFFALSE 7419
// begin gameIsOn := true ;
7409: LD_ADDR_VAR 0 1
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// break ;
7417: GO 7421
// end ;
7419: GO 7290
7421: POP
7422: POP
// wait ( 100 ) ;
7423: LD_INT 100
7425: PPUSH
7426: CALL_OW 67
// until not gameIsOn ;
7430: LD_VAR 0 1
7434: NOT
7435: IFFALSE 7269
// if IAmServer then
7437: CALL_OW 518
7441: IFFALSE 7450
// wait ( 0 0$3 ) ;
7443: LD_INT 105
7445: PPUSH
7446: CALL_OW 67
// if Multiplayer then
7450: LD_OWVAR 4
7454: IFFALSE 7462
// YouLostInMultiplayer else
7456: CALL_OW 107
7460: GO 7469
// YouLost (  ) ;
7462: LD_STRING 
7464: PPUSH
7465: CALL_OW 104
// end ;
7469: PPOPN 2
7471: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7472: LD_EXP 33
7476: IFFALSE 7860
7478: GO 7480
7480: DISABLE
7481: LD_INT 0
7483: PPUSH
7484: PPUSH
7485: PPUSH
7486: PPUSH
7487: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7488: LD_ADDR_VAR 0 5
7492: PUSH
7493: LD_INT 1
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: LD_INT 4
7504: PUSH
7505: LD_INT 5
7507: PUSH
7508: LD_INT 6
7510: PUSH
7511: LD_INT 7
7513: PUSH
7514: LD_INT 8
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7527: LD_INT 350
7529: PPUSH
7530: CALL_OW 67
// for i := 1 to 8 do
7534: LD_ADDR_VAR 0 1
7538: PUSH
7539: DOUBLE
7540: LD_INT 1
7542: DEC
7543: ST_TO_ADDR
7544: LD_INT 8
7546: PUSH
7547: FOR_TO
7548: IFFALSE 7830
// begin j := sides [ i ] ;
7550: LD_ADDR_VAR 0 2
7554: PUSH
7555: LD_VAR 0 5
7559: PUSH
7560: LD_VAR 0 1
7564: ARRAY
7565: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7566: LD_EXP 40
7570: PUSH
7571: LD_VAR 0 2
7575: ARRAY
7576: PPUSH
7577: CALL 12268 0 1
7581: IFFALSE 7594
7583: PUSH
7584: LD_VAR 0 2
7588: PPUSH
7589: CALL_OW 108
7593: AND
7594: IFFALSE 7612
7596: PUSH
7597: LD_EXP 3
7601: PPUSH
7602: LD_VAR 0 2
7606: PPUSH
7607: CALL 6890 0 2
7611: AND
7612: IFFALSE 7828
// begin wait ( mpRespawn div 2 ) ;
7614: LD_EXP 33
7618: PUSH
7619: LD_INT 2
7621: DIV
7622: PPUSH
7623: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7627: LD_ADDR_VAR 0 3
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_VAR 0 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 50
7646: PUSH
7647: EMPTY
7648: LIST
7649: PUSH
7650: LD_INT 2
7652: PUSH
7653: LD_INT 30
7655: PUSH
7656: LD_INT 0
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 30
7665: PUSH
7666: LD_INT 1
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 69
7687: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7688: LD_VAR 0 3
7692: NOT
7693: IFTRUE 7707
7695: PUSH
7696: LD_VAR 0 2
7700: PPUSH
7701: CALL_OW 108
7705: NOT
7706: OR
7707: IFTRUE 7726
7709: PUSH
7710: LD_EXP 3
7714: PPUSH
7715: LD_VAR 0 2
7719: PPUSH
7720: CALL 6890 0 2
7724: NOT
7725: OR
7726: IFFALSE 7730
// continue ;
7728: GO 7547
// spawn := tmp [ 1 ] ;
7730: LD_ADDR_VAR 0 4
7734: PUSH
7735: LD_VAR 0 3
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7744: LD_EXP 40
7748: PUSH
7749: LD_VAR 0 2
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_VAR 0 4
7763: PPUSH
7764: CALL_OW 250
7768: PPUSH
7769: LD_VAR 0 4
7773: PPUSH
7774: CALL_OW 251
7778: PPUSH
7779: LD_INT 32
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7789: LD_ADDR_EXP 40
7793: PUSH
7794: LD_EXP 40
7798: PPUSH
7799: LD_VAR 0 2
7803: PPUSH
7804: LD_EXP 40
7808: PUSH
7809: LD_VAR 0 2
7813: ARRAY
7814: PPUSH
7815: LD_INT 1
7817: PPUSH
7818: CALL_OW 3
7822: PPUSH
7823: CALL_OW 1
7827: ST_TO_ADDR
// end ; end ;
7828: GO 7547
7830: POP
7831: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7832: LD_ADDR_VAR 0 5
7836: PUSH
7837: LD_VAR 0 5
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: LD_INT 8
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: CALL 14560 0 4
7855: ST_TO_ADDR
// until false ;
7856: LD_INT 0
7858: IFFALSE 7527
// end ;
7860: PPOPN 5
7862: END
// every 0 0$1 marked mpActive do
7863: GO 7865
7865: DISABLE
// begin enable ;
7866: ENABLE
// if not mpDisplayStrings then
7867: LD_EXP 38
7871: NOT
7872: IFFALSE 7883
// begin display_strings := [ ] ;
7874: LD_ADDR_OWVAR 47
7878: PUSH
7879: EMPTY
7880: ST_TO_ADDR
// exit ;
7881: GO 7893
// end ; display_strings := mpDisplayStrings ;
7883: LD_ADDR_OWVAR 47
7887: PUSH
7888: LD_EXP 38
7892: ST_TO_ADDR
// end ; end_of_file
7893: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7894: LD_INT 0
7896: PPUSH
7897: PPUSH
7898: PPUSH
7899: PPUSH
7900: PPUSH
7901: PPUSH
7902: PPUSH
7903: PPUSH
7904: PPUSH
// if GetType ( un ) = unit_vehicle then
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 247
7914: PUSH
7915: LD_INT 2
7917: EQUAL
7918: IFFALSE 7922
// exit ;
7920: GO 8596
// side := GetSide ( un ) ;
7922: LD_ADDR_VAR 0 9
7926: PUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 255
7936: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7937: LD_EXP 3
7941: PUSH
7942: LD_INT 2
7944: EQUAL
7945: IFFALSE 8039
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7947: LD_VAR 0 1
7951: PPUSH
7952: CALL_OW 266
7956: PUSH
7957: LD_INT 0
7959: PUSH
7960: LD_INT 1
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: IN
7967: IFFALSE 8039
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7969: LD_ADDR_VAR 0 3
7973: PUSH
7974: LD_INT 22
7976: PUSH
7977: LD_VAR 0 9
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 2
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 1
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 33
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 69
8022: PUSH
8023: FOR_IN
8024: IFFALSE 8037
// KillUnit ( i ) ;
8026: LD_VAR 0 3
8030: PPUSH
8031: CALL_OW 66
8035: GO 8023
8037: POP
8038: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8039: LD_VAR 0 1
8043: PPUSH
8044: CALL_OW 257
8048: PUSH
8049: LD_INT 12
8051: PUSH
8052: LD_INT 17
8054: PUSH
8055: LD_INT 15
8057: PUSH
8058: LD_INT 16
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: IN
8067: IFTRUE 8084
8069: PUSH
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 263
8079: PUSH
8080: LD_INT 5
8082: EQUAL
8083: OR
8084: IFFALSE 8321
// begin tag := 0 ;
8086: LD_ADDR_VAR 0 5
8090: PUSH
8091: LD_INT 0
8093: ST_TO_ADDR
// for i := 1 to 8 do
8094: LD_ADDR_VAR 0 3
8098: PUSH
8099: DOUBLE
8100: LD_INT 1
8102: DEC
8103: ST_TO_ADDR
8104: LD_INT 8
8106: PUSH
8107: FOR_TO
8108: IFFALSE 8142
// if un in mpApePosIndex [ i ] then
8110: LD_VAR 0 1
8114: PUSH
8115: LD_EXP 32
8119: PUSH
8120: LD_VAR 0 3
8124: ARRAY
8125: IN
8126: IFFALSE 8140
// begin tag := i ;
8128: LD_ADDR_VAR 0 5
8132: PUSH
8133: LD_VAR 0 3
8137: ST_TO_ADDR
// break ;
8138: GO 8142
// end ;
8140: GO 8107
8142: POP
8143: POP
// if not tag then
8144: LD_VAR 0 5
8148: NOT
8149: IFFALSE 8153
// exit ;
8151: GO 8596
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8153: LD_ADDR_VAR 0 7
8157: PUSH
8158: LD_EXP 31
8162: PUSH
8163: LD_EXP 7
8167: PUSH
8168: LD_VAR 0 5
8172: ARRAY
8173: ARRAY
8174: ST_TO_ADDR
// if not area then
8175: LD_VAR 0 7
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8596
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8184: LD_INT 14700
8186: PUSH
8187: LD_VAR 0 1
8191: PUSH
8192: LD_INT 5
8194: MOD
8195: PUSH
8196: LD_INT 1
8198: PLUS
8199: PUSH
8200: LD_INT 700
8202: MUL
8203: PLUS
8204: PPUSH
8205: CALL_OW 67
// repeat wait ( 10 ) ;
8209: LD_INT 10
8211: PPUSH
8212: CALL_OW 67
// until not mpBlockRespThread ;
8216: LD_EXP 45
8220: NOT
8221: IFFALSE 8209
// mpBlockRespThread := true ;
8223: LD_ADDR_EXP 45
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8231: LD_INT 0
8233: PPUSH
8234: CALL 44327 0 1
// ape := CreateHuman ;
8238: LD_ADDR_VAR 0 4
8242: PUSH
8243: CALL_OW 44
8247: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8248: LD_ADDR_EXP 32
8252: PUSH
8253: LD_EXP 32
8257: PPUSH
8258: LD_VAR 0 5
8262: PPUSH
8263: LD_EXP 32
8267: PUSH
8268: LD_VAR 0 5
8272: ARRAY
8273: PPUSH
8274: LD_VAR 0 4
8278: PPUSH
8279: CALL 48200 0 2
8283: PPUSH
8284: CALL_OW 1
8288: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8289: LD_VAR 0 4
8293: PPUSH
8294: LD_VAR 0 7
8298: PPUSH
8299: LD_INT 0
8301: PPUSH
8302: CALL_OW 49
// wait ( 10 ) ;
8306: LD_INT 10
8308: PPUSH
8309: CALL_OW 67
// mpBlockRespThread := false ;
8313: LD_ADDR_EXP 45
8317: PUSH
8318: LD_INT 0
8320: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 247
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: IFFALSE 8351
8336: PUSH
8337: LD_VAR 0 1
8341: PPUSH
8342: CALL_OW 248
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: AND
8351: IFFALSE 8596
// begin if not mpRespawn then
8353: LD_EXP 33
8357: NOT
8358: IFFALSE 8362
// exit ;
8360: GO 8596
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8362: LD_VAR 0 9
8366: PPUSH
8367: CALL_OW 108
8371: NOT
8372: IFFALSE 8391
8374: PUSH
8375: LD_EXP 3
8379: PPUSH
8380: LD_VAR 0 9
8384: PPUSH
8385: CALL 6890 0 2
8389: NOT
8390: AND
8391: IFFALSE 8395
// exit ;
8393: GO 8596
// side := GetSide ( un ) ;
8395: LD_ADDR_VAR 0 9
8399: PUSH
8400: LD_VAR 0 1
8404: PPUSH
8405: CALL_OW 255
8409: ST_TO_ADDR
// nation := GetNation ( un ) ;
8410: LD_ADDR_VAR 0 8
8414: PUSH
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 248
8424: ST_TO_ADDR
// class := GetClass ( un ) ;
8425: LD_ADDR_VAR 0 6
8429: PUSH
8430: LD_VAR 0 1
8434: PPUSH
8435: CALL_OW 257
8439: ST_TO_ADDR
// if class > 4 then
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 4
8447: GREATER
8448: IFFALSE 8458
// class := 1 ;
8450: LD_ADDR_VAR 0 6
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// repeat wait ( 10 ) ;
8458: LD_INT 10
8460: PPUSH
8461: CALL_OW 67
// until not mpBlockRespThread ;
8465: LD_EXP 45
8469: NOT
8470: IFFALSE 8458
// mpBlockRespThread := true ;
8472: LD_ADDR_EXP 45
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// uc_side := side ;
8480: LD_ADDR_OWVAR 20
8484: PUSH
8485: LD_VAR 0 9
8489: ST_TO_ADDR
// uc_nation := nation ;
8490: LD_ADDR_OWVAR 21
8494: PUSH
8495: LD_VAR 0 8
8499: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8500: LD_INT 0
8502: PPUSH
8503: LD_VAR 0 6
8507: PPUSH
8508: LD_INT 2
8510: PPUSH
8511: CALL_OW 380
// un := CreateHuman ;
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: CALL_OW 44
8524: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8525: LD_ADDR_EXP 40
8529: PUSH
8530: LD_EXP 40
8534: PPUSH
8535: LD_VAR 0 9
8539: PPUSH
8540: LD_EXP 40
8544: PUSH
8545: LD_VAR 0 9
8549: ARRAY
8550: PPUSH
8551: LD_EXP 40
8555: PUSH
8556: LD_VAR 0 9
8560: ARRAY
8561: PUSH
8562: LD_INT 1
8564: PLUS
8565: PPUSH
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL_OW 1
8575: PPUSH
8576: CALL_OW 1
8580: ST_TO_ADDR
// wait ( 10 ) ;
8581: LD_INT 10
8583: PPUSH
8584: CALL_OW 67
// mpBlockRespThread := false ;
8588: LD_ADDR_EXP 45
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// end ; end ;
8596: LD_VAR 0 2
8600: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8601: LD_INT 0
8603: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 266
8613: PUSH
8614: LD_INT 0
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: IN
8624: IFFALSE 8649
// SetBName ( building , @ & GetSide ( building ) ) ;
8626: LD_VAR 0 1
8630: PPUSH
8631: LD_STRING @
8633: PUSH
8634: LD_VAR 0 1
8638: PPUSH
8639: CALL_OW 255
8643: STR
8644: PPUSH
8645: CALL_OW 500
// end ;
8649: LD_VAR 0 2
8653: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8654: LD_INT 0
8656: PPUSH
8657: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8658: LD_EXP 3
8662: PUSH
8663: LD_INT 2
8665: EQUAL
8666: IFFALSE 8690
8668: PUSH
8669: LD_VAR 0 1
8673: PPUSH
8674: CALL_OW 266
8678: PUSH
8679: LD_INT 0
8681: PUSH
8682: LD_INT 1
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: IN
8689: AND
8690: IFFALSE 8769
// begin SetSide ( building , oldSide ) ;
8692: LD_VAR 0 1
8696: PPUSH
8697: LD_VAR 0 2
8701: PPUSH
8702: CALL_OW 235
// KillUnit ( building ) ;
8706: LD_VAR 0 1
8710: PPUSH
8711: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8715: LD_ADDR_VAR 0 5
8719: PUSH
8720: LD_INT 22
8722: PUSH
8723: LD_VAR 0 2
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 21
8734: PUSH
8735: LD_INT 1
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PPUSH
8746: CALL_OW 69
8750: PUSH
8751: FOR_IN
8752: IFFALSE 8765
// KillUnit ( i ) ;
8754: LD_VAR 0 5
8758: PPUSH
8759: CALL_OW 66
8763: GO 8751
8765: POP
8766: POP
// exit ;
8767: GO 8814
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 266
8778: PUSH
8779: LD_INT 0
8781: PUSH
8782: LD_INT 1
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: IN
8789: IFFALSE 8814
// SetBName ( building , @ & GetSide ( building ) ) ;
8791: LD_VAR 0 1
8795: PPUSH
8796: LD_STRING @
8798: PUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 255
8808: STR
8809: PPUSH
8810: CALL_OW 500
// end ;
8814: LD_VAR 0 4
8818: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8819: LD_INT 0
8821: PPUSH
8822: PPUSH
8823: PPUSH
// if mpGameType <> GameTypeFamine then
8824: LD_EXP 3
8828: PUSH
8829: LD_INT 5
8831: NONEQUAL
8832: IFFALSE 8836
// exit ;
8834: GO 9050
// for i := 1 to mpGlobalOilDeposits do
8836: LD_ADDR_VAR 0 6
8840: PUSH
8841: DOUBLE
8842: LD_INT 1
8844: DEC
8845: ST_TO_ADDR
8846: LD_EXP 41
8850: PUSH
8851: FOR_TO
8852: IFFALSE 9048
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8854: LD_EXP 41
8858: PUSH
8859: LD_VAR 0 6
8863: ARRAY
8864: PUSH
8865: LD_INT 1
8867: ARRAY
8868: PPUSH
8869: LD_EXP 41
8873: PUSH
8874: LD_VAR 0 6
8878: ARRAY
8879: PUSH
8880: LD_INT 2
8882: ARRAY
8883: PPUSH
8884: CALL_OW 428
8888: PUSH
8889: LD_VAR 0 1
8893: EQUAL
8894: IFFALSE 9046
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8896: LD_ADDR_VAR 0 7
8900: PUSH
8901: LD_EXP 41
8905: PUSH
8906: LD_VAR 0 6
8910: ARRAY
8911: PUSH
8912: LD_INT 3
8914: ARRAY
8915: ST_TO_ADDR
// value := Dec ( value ) ;
8916: LD_ADDR_VAR 0 7
8920: PUSH
8921: LD_VAR 0 7
8925: PPUSH
8926: CALL 49595 0 1
8930: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8931: LD_ADDR_EXP 41
8935: PUSH
8936: LD_EXP 41
8940: PPUSH
8941: LD_VAR 0 6
8945: PPUSH
8946: LD_EXP 41
8950: PUSH
8951: LD_VAR 0 6
8955: ARRAY
8956: PPUSH
8957: LD_INT 3
8959: PPUSH
8960: LD_VAR 0 7
8964: PPUSH
8965: CALL_OW 1
8969: PPUSH
8970: CALL_OW 1
8974: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8975: LD_VAR 0 1
8979: PPUSH
8980: LD_VAR 0 7
8984: PPUSH
8985: CALL_OW 505
// if value = 0 then
8989: LD_VAR 0 7
8993: PUSH
8994: LD_INT 0
8996: EQUAL
8997: IFFALSE 9046
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8999: LD_EXP 41
9003: PUSH
9004: LD_VAR 0 6
9008: ARRAY
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_EXP 41
9018: PUSH
9019: LD_VAR 0 6
9023: ARRAY
9024: PUSH
9025: LD_INT 2
9027: ARRAY
9028: PPUSH
9029: CALL_OW 63
// KillUnit ( building ) ;
9033: LD_VAR 0 1
9037: PPUSH
9038: CALL_OW 66
// exit ;
9042: POP
9043: POP
9044: GO 9050
// end ; end ; end ;
9046: GO 8851
9048: POP
9049: POP
// end ;
9050: LD_VAR 0 5
9054: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
9059: PPUSH
// if mpGameType <> GameTypeFamine then
9060: LD_EXP 3
9064: PUSH
9065: LD_INT 5
9067: NONEQUAL
9068: IFFALSE 9072
// exit ;
9070: GO 9286
// for i := 1 to mpGlobalSibDeposits do
9072: LD_ADDR_VAR 0 6
9076: PUSH
9077: DOUBLE
9078: LD_INT 1
9080: DEC
9081: ST_TO_ADDR
9082: LD_EXP 42
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9284
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9090: LD_EXP 42
9094: PUSH
9095: LD_VAR 0 6
9099: ARRAY
9100: PUSH
9101: LD_INT 1
9103: ARRAY
9104: PPUSH
9105: LD_EXP 42
9109: PUSH
9110: LD_VAR 0 6
9114: ARRAY
9115: PUSH
9116: LD_INT 2
9118: ARRAY
9119: PPUSH
9120: CALL_OW 428
9124: PUSH
9125: LD_VAR 0 1
9129: EQUAL
9130: IFFALSE 9282
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9132: LD_ADDR_VAR 0 7
9136: PUSH
9137: LD_EXP 42
9141: PUSH
9142: LD_VAR 0 6
9146: ARRAY
9147: PUSH
9148: LD_INT 3
9150: ARRAY
9151: ST_TO_ADDR
// value := Dec ( value ) ;
9152: LD_ADDR_VAR 0 7
9156: PUSH
9157: LD_VAR 0 7
9161: PPUSH
9162: CALL 49595 0 1
9166: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9167: LD_ADDR_EXP 42
9171: PUSH
9172: LD_EXP 42
9176: PPUSH
9177: LD_VAR 0 6
9181: PPUSH
9182: LD_EXP 42
9186: PUSH
9187: LD_VAR 0 6
9191: ARRAY
9192: PPUSH
9193: LD_INT 3
9195: PPUSH
9196: LD_VAR 0 7
9200: PPUSH
9201: CALL_OW 1
9205: PPUSH
9206: CALL_OW 1
9210: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9211: LD_VAR 0 1
9215: PPUSH
9216: LD_VAR 0 7
9220: PPUSH
9221: CALL_OW 505
// if value = 0 then
9225: LD_VAR 0 7
9229: PUSH
9230: LD_INT 0
9232: EQUAL
9233: IFFALSE 9282
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9235: LD_EXP 42
9239: PUSH
9240: LD_VAR 0 6
9244: ARRAY
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: LD_EXP 42
9254: PUSH
9255: LD_VAR 0 6
9259: ARRAY
9260: PUSH
9261: LD_INT 2
9263: ARRAY
9264: PPUSH
9265: CALL_OW 63
// KillUnit ( building ) ;
9269: LD_VAR 0 1
9273: PPUSH
9274: CALL_OW 66
// exit ;
9278: POP
9279: POP
9280: GO 9286
// end ; end ; end ;
9282: GO 9087
9284: POP
9285: POP
// end ; end_of_file
9286: LD_VAR 0 5
9290: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9291: LD_EXP 39
9295: IFFALSE 9303
9297: PUSH
9298: CALL 9513 0 0
9302: AND
9303: IFFALSE 9311
9305: PUSH
9306: LD_OWVAR 4
9310: AND
9311: IFFALSE 9510
9313: GO 9315
9315: DISABLE
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
// begin canWin := false ;
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// if not HasPower ( your_side ) then
9328: LD_OWVAR 2
9332: PPUSH
9333: CALL 9555 0 1
9337: NOT
9338: IFFALSE 9349
// begin Multiplayer_Loose_Message ;
9340: CALL_OW 521
// enable ( mpLose ) ;
9344: LD_INT 102
9346: ENABLE_MARKED
// end else
9347: GO 9510
// begin canWin := true ;
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// for i := 1 to 8 do
9357: LD_ADDR_VAR 0 1
9361: PUSH
9362: DOUBLE
9363: LD_INT 1
9365: DEC
9366: ST_TO_ADDR
9367: LD_INT 8
9369: PUSH
9370: FOR_TO
9371: IFFALSE 9496
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9373: LD_EXP 7
9377: PUSH
9378: LD_VAR 0 1
9382: ARRAY
9383: IFFALSE 9396
9385: PUSH
9386: LD_VAR 0 1
9390: PPUSH
9391: CALL_OW 108
9395: AND
9396: IFFALSE 9410
9398: PUSH
9399: LD_VAR 0 1
9403: PUSH
9404: LD_OWVAR 2
9408: NONEQUAL
9409: AND
9410: IFFALSE 9494
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9412: LD_EXP 8
9416: PUSH
9417: LD_VAR 0 1
9421: ARRAY
9422: NOT
9423: IFTRUE 9471
9425: PUSH
9426: LD_EXP 8
9430: PUSH
9431: LD_VAR 0 1
9435: ARRAY
9436: PUSH
9437: LD_EXP 8
9441: PUSH
9442: LD_OWVAR 2
9446: ARRAY
9447: NONEQUAL
9448: IFFALSE 9470
9450: PUSH
9451: LD_OWVAR 2
9455: PPUSH
9456: LD_VAR 0 1
9460: PPUSH
9461: CALL_OW 81
9465: PUSH
9466: LD_INT 1
9468: NONEQUAL
9469: AND
9470: OR
9471: IFFALSE 9494
// if HasPower ( i ) then
9473: LD_VAR 0 1
9477: PPUSH
9478: CALL 9555 0 1
9482: IFFALSE 9494
// begin canWin := false ;
9484: LD_ADDR_VAR 0 2
9488: PUSH
9489: LD_INT 0
9491: ST_TO_ADDR
// break ;
9492: GO 9496
// end ;
9494: GO 9370
9496: POP
9497: POP
// if canWin then
9498: LD_VAR 0 2
9502: IFFALSE 9509
// enable ( mpWin ) else
9504: LD_INT 101
9506: ENABLE_MARKED
9507: GO 9510
// enable ;
9509: ENABLE
// end ; end ;
9510: PPOPN 2
9512: END
// function CanWinLoose ; begin
9513: LD_INT 0
9515: PPUSH
// result := true ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_INT 1
9523: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9524: CALL_OW 531
9528: IFFALSE 9540
9530: PUSH
9531: CALL_OW 519
9535: PUSH
9536: LD_INT 1
9538: GREATER
9539: AND
9540: IFFALSE 9550
// result := false ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_INT 0
9549: ST_TO_ADDR
// end ;
9550: LD_VAR 0 1
9554: RET
// function HasPower ( i ) ; begin
9555: LD_INT 0
9557: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9558: LD_ADDR_VAR 0 2
9562: PUSH
9563: LD_INT 22
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 21
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 33
9590: PUSH
9591: LD_INT 3
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 33
9600: PUSH
9601: LD_INT 5
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 69
9622: ST_TO_ADDR
// end ; end_of_file
9623: LD_VAR 0 2
9627: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9628: LD_EXP 39
9632: IFFALSE 9675
9634: GO 9636
9636: DISABLE
9637: LD_INT 0
9639: PPUSH
// begin for i := 1 to 8 do
9640: LD_ADDR_VAR 0 1
9644: PUSH
9645: DOUBLE
9646: LD_INT 1
9648: DEC
9649: ST_TO_ADDR
9650: LD_INT 8
9652: PUSH
9653: FOR_TO
9654: IFFALSE 9673
// SetRestrict ( b_depot , i , state_disabled ) ;
9656: LD_INT 0
9658: PPUSH
9659: LD_VAR 0 1
9663: PPUSH
9664: LD_INT 0
9666: PPUSH
9667: CALL_OW 324
9671: GO 9653
9673: POP
9674: POP
// end ;
9675: PPOPN 1
9677: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9678: LD_EXP 39
9682: IFFALSE 9690
9684: PUSH
9685: CALL 9900 0 0
9689: AND
9690: IFFALSE 9698
9692: PUSH
9693: LD_OWVAR 4
9697: AND
9698: IFFALSE 9897
9700: GO 9702
9702: DISABLE
9703: LD_INT 0
9705: PPUSH
9706: PPUSH
// begin canWin := false ;
9707: LD_ADDR_VAR 0 2
9711: PUSH
9712: LD_INT 0
9714: ST_TO_ADDR
// if not HasPower ( your_side ) then
9715: LD_OWVAR 2
9719: PPUSH
9720: CALL 9942 0 1
9724: NOT
9725: IFFALSE 9736
// begin Multiplayer_Loose_Message ;
9727: CALL_OW 521
// enable ( mpLose ) ;
9731: LD_INT 102
9733: ENABLE_MARKED
// end else
9734: GO 9897
// begin canWin := true ;
9736: LD_ADDR_VAR 0 2
9740: PUSH
9741: LD_INT 1
9743: ST_TO_ADDR
// for i := 1 to 8 do
9744: LD_ADDR_VAR 0 1
9748: PUSH
9749: DOUBLE
9750: LD_INT 1
9752: DEC
9753: ST_TO_ADDR
9754: LD_INT 8
9756: PUSH
9757: FOR_TO
9758: IFFALSE 9883
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9760: LD_EXP 7
9764: PUSH
9765: LD_VAR 0 1
9769: ARRAY
9770: IFFALSE 9783
9772: PUSH
9773: LD_VAR 0 1
9777: PPUSH
9778: CALL_OW 108
9782: AND
9783: IFFALSE 9797
9785: PUSH
9786: LD_VAR 0 1
9790: PUSH
9791: LD_OWVAR 2
9795: NONEQUAL
9796: AND
9797: IFFALSE 9881
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9799: LD_EXP 8
9803: PUSH
9804: LD_VAR 0 1
9808: ARRAY
9809: NOT
9810: IFTRUE 9858
9812: PUSH
9813: LD_EXP 8
9817: PUSH
9818: LD_VAR 0 1
9822: ARRAY
9823: PUSH
9824: LD_EXP 8
9828: PUSH
9829: LD_OWVAR 2
9833: ARRAY
9834: NONEQUAL
9835: IFFALSE 9857
9837: PUSH
9838: LD_OWVAR 2
9842: PPUSH
9843: LD_VAR 0 1
9847: PPUSH
9848: CALL_OW 81
9852: PUSH
9853: LD_INT 1
9855: NONEQUAL
9856: AND
9857: OR
9858: IFFALSE 9881
// if HasPower ( i ) then
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL 9942 0 1
9869: IFFALSE 9881
// begin canWin := false ;
9871: LD_ADDR_VAR 0 2
9875: PUSH
9876: LD_INT 0
9878: ST_TO_ADDR
// break ;
9879: GO 9883
// end ;
9881: GO 9757
9883: POP
9884: POP
// if canWin then
9885: LD_VAR 0 2
9889: IFFALSE 9896
// enable ( mpWin ) else
9891: LD_INT 101
9893: ENABLE_MARKED
9894: GO 9897
// enable ;
9896: ENABLE
// end ; end ;
9897: PPOPN 2
9899: END
// function CanWinLoose ; begin
9900: LD_INT 0
9902: PPUSH
// result := true ;
9903: LD_ADDR_VAR 0 1
9907: PUSH
9908: LD_INT 1
9910: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9911: CALL_OW 531
9915: IFFALSE 9927
9917: PUSH
9918: CALL_OW 519
9922: PUSH
9923: LD_INT 1
9925: GREATER
9926: AND
9927: IFFALSE 9937
// result := false ;
9929: LD_ADDR_VAR 0 1
9933: PUSH
9934: LD_INT 0
9936: ST_TO_ADDR
// end ;
9937: LD_VAR 0 1
9941: RET
// function HasPower ( i ) ; begin
9942: LD_INT 0
9944: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9945: LD_INT 22
9947: PUSH
9948: LD_VAR 0 1
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 2
9959: PUSH
9960: LD_INT 30
9962: PUSH
9963: LD_INT 0
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 30
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: NOT
9994: IFFALSE 9998
// exit ;
9996: GO 10063
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: LD_INT 21
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 33
10030: PUSH
10031: LD_INT 3
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 33
10040: PUSH
10041: LD_INT 5
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: ST_TO_ADDR
// end ; end_of_file
10063: LD_VAR 0 2
10067: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
// if exist_mode then
10072: LD_VAR 0 2
10076: IFFALSE 10122
// begin unit := CreateCharacter ( prefix & ident ) ;
10078: LD_ADDR_VAR 0 5
10082: PUSH
10083: LD_VAR 0 3
10087: PUSH
10088: LD_VAR 0 1
10092: STR
10093: PPUSH
10094: CALL_OW 34
10098: ST_TO_ADDR
// if unit then
10099: LD_VAR 0 5
10103: IFFALSE 10120
// DeleteCharacters ( prefix & ident ) ;
10105: LD_VAR 0 3
10109: PUSH
10110: LD_VAR 0 1
10114: STR
10115: PPUSH
10116: CALL_OW 40
// end else
10120: GO 10137
// unit := NewCharacter ( ident ) ;
10122: LD_ADDR_VAR 0 5
10126: PUSH
10127: LD_VAR 0 1
10131: PPUSH
10132: CALL_OW 25
10136: ST_TO_ADDR
// result := unit ;
10137: LD_ADDR_VAR 0 4
10141: PUSH
10142: LD_VAR 0 5
10146: ST_TO_ADDR
// end ;
10147: LD_VAR 0 4
10151: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
// if exist_mode then
10156: LD_VAR 0 2
10160: IFFALSE 10185
// unit := CreateCharacter ( prefix & ident ) else
10162: LD_ADDR_VAR 0 5
10166: PUSH
10167: LD_VAR 0 3
10171: PUSH
10172: LD_VAR 0 1
10176: STR
10177: PPUSH
10178: CALL_OW 34
10182: ST_TO_ADDR
10183: GO 10200
// unit := NewCharacter ( ident ) ;
10185: LD_ADDR_VAR 0 5
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: CALL_OW 25
10199: ST_TO_ADDR
// result := unit ;
10200: LD_ADDR_VAR 0 4
10204: PUSH
10205: LD_VAR 0 5
10209: ST_TO_ADDR
// end ;
10210: LD_VAR 0 4
10214: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if not side or not nation then
10219: LD_VAR 0 1
10223: NOT
10224: IFTRUE 10233
10226: PUSH
10227: LD_VAR 0 2
10231: NOT
10232: OR
10233: IFFALSE 10237
// exit ;
10235: GO 11007
// case nation of nation_american :
10237: LD_VAR 0 2
10241: PUSH
10242: LD_INT 1
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10250
10248: GO 10464
10250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10251: LD_ADDR_VAR 0 4
10255: PUSH
10256: LD_INT 35
10258: PUSH
10259: LD_INT 45
10261: PUSH
10262: LD_INT 46
10264: PUSH
10265: LD_INT 47
10267: PUSH
10268: LD_INT 82
10270: PUSH
10271: LD_INT 83
10273: PUSH
10274: LD_INT 84
10276: PUSH
10277: LD_INT 85
10279: PUSH
10280: LD_INT 86
10282: PUSH
10283: LD_INT 1
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: LD_INT 6
10291: PUSH
10292: LD_INT 15
10294: PUSH
10295: LD_INT 16
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: LD_INT 12
10303: PUSH
10304: LD_INT 13
10306: PUSH
10307: LD_INT 10
10309: PUSH
10310: LD_INT 14
10312: PUSH
10313: LD_INT 20
10315: PUSH
10316: LD_INT 21
10318: PUSH
10319: LD_INT 22
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 32
10327: PUSH
10328: LD_INT 27
10330: PUSH
10331: LD_INT 36
10333: PUSH
10334: LD_INT 69
10336: PUSH
10337: LD_INT 39
10339: PUSH
10340: LD_INT 34
10342: PUSH
10343: LD_INT 40
10345: PUSH
10346: LD_INT 48
10348: PUSH
10349: LD_INT 49
10351: PUSH
10352: LD_INT 50
10354: PUSH
10355: LD_INT 51
10357: PUSH
10358: LD_INT 52
10360: PUSH
10361: LD_INT 53
10363: PUSH
10364: LD_INT 54
10366: PUSH
10367: LD_INT 55
10369: PUSH
10370: LD_INT 56
10372: PUSH
10373: LD_INT 57
10375: PUSH
10376: LD_INT 58
10378: PUSH
10379: LD_INT 59
10381: PUSH
10382: LD_INT 60
10384: PUSH
10385: LD_INT 61
10387: PUSH
10388: LD_INT 62
10390: PUSH
10391: LD_INT 80
10393: PUSH
10394: LD_INT 82
10396: PUSH
10397: LD_INT 83
10399: PUSH
10400: LD_INT 84
10402: PUSH
10403: LD_INT 85
10405: PUSH
10406: LD_INT 86
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: ST_TO_ADDR
10462: GO 10929
10464: LD_INT 2
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10698
10472: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10473: LD_ADDR_VAR 0 4
10477: PUSH
10478: LD_INT 35
10480: PUSH
10481: LD_INT 45
10483: PUSH
10484: LD_INT 46
10486: PUSH
10487: LD_INT 47
10489: PUSH
10490: LD_INT 82
10492: PUSH
10493: LD_INT 83
10495: PUSH
10496: LD_INT 84
10498: PUSH
10499: LD_INT 85
10501: PUSH
10502: LD_INT 87
10504: PUSH
10505: LD_INT 70
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: LD_INT 11
10513: PUSH
10514: LD_INT 3
10516: PUSH
10517: LD_INT 4
10519: PUSH
10520: LD_INT 5
10522: PUSH
10523: LD_INT 6
10525: PUSH
10526: LD_INT 15
10528: PUSH
10529: LD_INT 18
10531: PUSH
10532: LD_INT 7
10534: PUSH
10535: LD_INT 17
10537: PUSH
10538: LD_INT 8
10540: PUSH
10541: LD_INT 20
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 72
10552: PUSH
10553: LD_INT 26
10555: PUSH
10556: LD_INT 69
10558: PUSH
10559: LD_INT 39
10561: PUSH
10562: LD_INT 40
10564: PUSH
10565: LD_INT 41
10567: PUSH
10568: LD_INT 42
10570: PUSH
10571: LD_INT 43
10573: PUSH
10574: LD_INT 48
10576: PUSH
10577: LD_INT 49
10579: PUSH
10580: LD_INT 50
10582: PUSH
10583: LD_INT 51
10585: PUSH
10586: LD_INT 52
10588: PUSH
10589: LD_INT 53
10591: PUSH
10592: LD_INT 54
10594: PUSH
10595: LD_INT 55
10597: PUSH
10598: LD_INT 56
10600: PUSH
10601: LD_INT 60
10603: PUSH
10604: LD_INT 61
10606: PUSH
10607: LD_INT 62
10609: PUSH
10610: LD_INT 66
10612: PUSH
10613: LD_INT 67
10615: PUSH
10616: LD_INT 68
10618: PUSH
10619: LD_INT 81
10621: PUSH
10622: LD_INT 82
10624: PUSH
10625: LD_INT 83
10627: PUSH
10628: LD_INT 84
10630: PUSH
10631: LD_INT 85
10633: PUSH
10634: LD_INT 87
10636: PUSH
10637: LD_INT 88
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: ST_TO_ADDR
10696: GO 10929
10698: LD_INT 3
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10928
10706: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10707: LD_ADDR_VAR 0 4
10711: PUSH
10712: LD_INT 46
10714: PUSH
10715: LD_INT 47
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: LD_INT 82
10726: PUSH
10727: LD_INT 83
10729: PUSH
10730: LD_INT 84
10732: PUSH
10733: LD_INT 85
10735: PUSH
10736: LD_INT 86
10738: PUSH
10739: LD_INT 11
10741: PUSH
10742: LD_INT 9
10744: PUSH
10745: LD_INT 20
10747: PUSH
10748: LD_INT 19
10750: PUSH
10751: LD_INT 21
10753: PUSH
10754: LD_INT 24
10756: PUSH
10757: LD_INT 22
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 28
10765: PUSH
10766: LD_INT 29
10768: PUSH
10769: LD_INT 30
10771: PUSH
10772: LD_INT 31
10774: PUSH
10775: LD_INT 37
10777: PUSH
10778: LD_INT 38
10780: PUSH
10781: LD_INT 32
10783: PUSH
10784: LD_INT 27
10786: PUSH
10787: LD_INT 33
10789: PUSH
10790: LD_INT 69
10792: PUSH
10793: LD_INT 39
10795: PUSH
10796: LD_INT 34
10798: PUSH
10799: LD_INT 40
10801: PUSH
10802: LD_INT 71
10804: PUSH
10805: LD_INT 23
10807: PUSH
10808: LD_INT 44
10810: PUSH
10811: LD_INT 48
10813: PUSH
10814: LD_INT 49
10816: PUSH
10817: LD_INT 50
10819: PUSH
10820: LD_INT 51
10822: PUSH
10823: LD_INT 52
10825: PUSH
10826: LD_INT 53
10828: PUSH
10829: LD_INT 54
10831: PUSH
10832: LD_INT 55
10834: PUSH
10835: LD_INT 56
10837: PUSH
10838: LD_INT 57
10840: PUSH
10841: LD_INT 58
10843: PUSH
10844: LD_INT 59
10846: PUSH
10847: LD_INT 63
10849: PUSH
10850: LD_INT 64
10852: PUSH
10853: LD_INT 65
10855: PUSH
10856: LD_INT 82
10858: PUSH
10859: LD_INT 83
10861: PUSH
10862: LD_INT 84
10864: PUSH
10865: LD_INT 85
10867: PUSH
10868: LD_INT 86
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: ST_TO_ADDR
10926: GO 10929
10928: POP
// if state > - 1 and state < 3 then
10929: LD_VAR 0 3
10933: PUSH
10934: LD_INT 1
10936: NEG
10937: GREATER
10938: IFFALSE 10950
10940: PUSH
10941: LD_VAR 0 3
10945: PUSH
10946: LD_INT 3
10948: LESS
10949: AND
10950: IFFALSE 11007
// for i in result do
10952: LD_ADDR_VAR 0 5
10956: PUSH
10957: LD_VAR 0 4
10961: PUSH
10962: FOR_IN
10963: IFFALSE 11005
// if GetTech ( i , side ) <> state then
10965: LD_VAR 0 5
10969: PPUSH
10970: LD_VAR 0 1
10974: PPUSH
10975: CALL_OW 321
10979: PUSH
10980: LD_VAR 0 3
10984: NONEQUAL
10985: IFFALSE 11003
// result := result diff i ;
10987: LD_ADDR_VAR 0 4
10991: PUSH
10992: LD_VAR 0 4
10996: PUSH
10997: LD_VAR 0 5
11001: DIFF
11002: ST_TO_ADDR
11003: GO 10962
11005: POP
11006: POP
// end ;
11007: LD_VAR 0 4
11011: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11012: LD_INT 0
11014: PPUSH
11015: PPUSH
11016: PPUSH
// result := true ;
11017: LD_ADDR_VAR 0 3
11021: PUSH
11022: LD_INT 1
11024: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11025: LD_ADDR_VAR 0 5
11029: PUSH
11030: LD_VAR 0 2
11034: PPUSH
11035: CALL_OW 480
11039: ST_TO_ADDR
// if not tmp then
11040: LD_VAR 0 5
11044: NOT
11045: IFFALSE 11049
// exit ;
11047: GO 11098
// for i in tmp do
11049: LD_ADDR_VAR 0 4
11053: PUSH
11054: LD_VAR 0 5
11058: PUSH
11059: FOR_IN
11060: IFFALSE 11096
// if GetTech ( i , side ) <> state_researched then
11062: LD_VAR 0 4
11066: PPUSH
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 321
11076: PUSH
11077: LD_INT 2
11079: NONEQUAL
11080: IFFALSE 11094
// begin result := false ;
11082: LD_ADDR_VAR 0 3
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// exit ;
11090: POP
11091: POP
11092: GO 11098
// end ;
11094: GO 11059
11096: POP
11097: POP
// end ;
11098: LD_VAR 0 3
11102: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11103: LD_INT 0
11105: PPUSH
11106: PPUSH
11107: PPUSH
11108: PPUSH
11109: PPUSH
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
11114: PPUSH
11115: PPUSH
11116: PPUSH
11117: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11118: LD_VAR 0 1
11122: NOT
11123: IFTRUE 11140
11125: PUSH
11126: LD_VAR 0 1
11130: PPUSH
11131: CALL_OW 257
11135: PUSH
11136: LD_INT 9
11138: NONEQUAL
11139: OR
11140: IFFALSE 11144
// exit ;
11142: GO 11723
// side := GetSide ( unit ) ;
11144: LD_ADDR_VAR 0 9
11148: PUSH
11149: LD_VAR 0 1
11153: PPUSH
11154: CALL_OW 255
11158: ST_TO_ADDR
// tech_space := tech_spacanom ;
11159: LD_ADDR_VAR 0 12
11163: PUSH
11164: LD_INT 29
11166: ST_TO_ADDR
// tech_time := tech_taurad ;
11167: LD_ADDR_VAR 0 13
11171: PUSH
11172: LD_INT 28
11174: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11175: LD_ADDR_VAR 0 11
11179: PUSH
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 310
11189: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11190: LD_VAR 0 11
11194: PPUSH
11195: CALL_OW 247
11199: PUSH
11200: LD_INT 2
11202: EQUAL
11203: IFFALSE 11207
// exit ;
11205: GO 11723
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11207: LD_ADDR_VAR 0 8
11211: PUSH
11212: LD_INT 81
11214: PUSH
11215: LD_VAR 0 9
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: LD_INT 21
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PPUSH
11245: CALL_OW 69
11249: ST_TO_ADDR
// if not tmp then
11250: LD_VAR 0 8
11254: NOT
11255: IFFALSE 11259
// exit ;
11257: GO 11723
// if in_unit then
11259: LD_VAR 0 11
11263: IFFALSE 11287
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11265: LD_ADDR_VAR 0 10
11269: PUSH
11270: LD_VAR 0 8
11274: PPUSH
11275: LD_VAR 0 11
11279: PPUSH
11280: CALL_OW 74
11284: ST_TO_ADDR
11285: GO 11307
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11287: LD_ADDR_VAR 0 10
11291: PUSH
11292: LD_VAR 0 8
11296: PPUSH
11297: LD_VAR 0 1
11301: PPUSH
11302: CALL_OW 74
11306: ST_TO_ADDR
// if not enemy then
11307: LD_VAR 0 10
11311: NOT
11312: IFFALSE 11316
// exit ;
11314: GO 11723
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11316: LD_VAR 0 11
11320: IFFALSE 11342
11322: PUSH
11323: LD_VAR 0 11
11327: PPUSH
11328: LD_VAR 0 10
11332: PPUSH
11333: CALL_OW 296
11337: PUSH
11338: LD_INT 13
11340: GREATER
11341: AND
11342: IFTRUE 11364
11344: PUSH
11345: LD_VAR 0 1
11349: PPUSH
11350: LD_VAR 0 10
11354: PPUSH
11355: CALL_OW 296
11359: PUSH
11360: LD_INT 12
11362: GREATER
11363: OR
11364: IFFALSE 11368
// exit ;
11366: GO 11723
// missile := [ 1 ] ;
11368: LD_ADDR_VAR 0 14
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11379: LD_VAR 0 9
11383: PPUSH
11384: LD_VAR 0 12
11388: PPUSH
11389: CALL_OW 325
11393: IFFALSE 11422
// missile := Replace ( missile , missile + 1 , 2 ) ;
11395: LD_ADDR_VAR 0 14
11399: PUSH
11400: LD_VAR 0 14
11404: PPUSH
11405: LD_VAR 0 14
11409: PUSH
11410: LD_INT 1
11412: PLUS
11413: PPUSH
11414: LD_INT 2
11416: PPUSH
11417: CALL_OW 1
11421: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11422: LD_VAR 0 9
11426: PPUSH
11427: LD_VAR 0 13
11431: PPUSH
11432: CALL_OW 325
11436: IFFALSE 11460
11438: PUSH
11439: LD_VAR 0 10
11443: PPUSH
11444: CALL_OW 255
11448: PPUSH
11449: LD_VAR 0 13
11453: PPUSH
11454: CALL_OW 325
11458: NOT
11459: AND
11460: IFFALSE 11489
// missile := Replace ( missile , missile + 1 , 3 ) ;
11462: LD_ADDR_VAR 0 14
11466: PUSH
11467: LD_VAR 0 14
11471: PPUSH
11472: LD_VAR 0 14
11476: PUSH
11477: LD_INT 1
11479: PLUS
11480: PPUSH
11481: LD_INT 3
11483: PPUSH
11484: CALL_OW 1
11488: ST_TO_ADDR
// if missile < 2 then
11489: LD_VAR 0 14
11493: PUSH
11494: LD_INT 2
11496: LESS
11497: IFFALSE 11501
// exit ;
11499: GO 11723
// x := GetX ( enemy ) ;
11501: LD_ADDR_VAR 0 4
11505: PUSH
11506: LD_VAR 0 10
11510: PPUSH
11511: CALL_OW 250
11515: ST_TO_ADDR
// y := GetY ( enemy ) ;
11516: LD_ADDR_VAR 0 5
11520: PUSH
11521: LD_VAR 0 10
11525: PPUSH
11526: CALL_OW 251
11530: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11531: LD_ADDR_VAR 0 6
11535: PUSH
11536: LD_VAR 0 4
11540: PUSH
11541: LD_INT 1
11543: NEG
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 12
11552: PLUS
11553: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11554: LD_ADDR_VAR 0 7
11558: PUSH
11559: LD_VAR 0 5
11563: PUSH
11564: LD_INT 1
11566: NEG
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 12
11575: PLUS
11576: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11577: LD_VAR 0 6
11581: PPUSH
11582: LD_VAR 0 7
11586: PPUSH
11587: CALL_OW 488
11591: NOT
11592: IFFALSE 11614
// begin _x := x ;
11594: LD_ADDR_VAR 0 6
11598: PUSH
11599: LD_VAR 0 4
11603: ST_TO_ADDR
// _y := y ;
11604: LD_ADDR_VAR 0 7
11608: PUSH
11609: LD_VAR 0 5
11613: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11614: LD_ADDR_VAR 0 3
11618: PUSH
11619: LD_INT 1
11621: PPUSH
11622: LD_VAR 0 14
11626: PPUSH
11627: CALL_OW 12
11631: ST_TO_ADDR
// case i of 1 :
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 1
11639: DOUBLE
11640: EQUAL
11641: IFTRUE 11645
11643: GO 11662
11645: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11646: LD_VAR 0 1
11650: PPUSH
11651: LD_VAR 0 10
11655: PPUSH
11656: CALL_OW 115
11660: GO 11723
11662: LD_INT 2
11664: DOUBLE
11665: EQUAL
11666: IFTRUE 11670
11668: GO 11692
11670: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11671: LD_VAR 0 1
11675: PPUSH
11676: LD_VAR 0 6
11680: PPUSH
11681: LD_VAR 0 7
11685: PPUSH
11686: CALL_OW 153
11690: GO 11723
11692: LD_INT 3
11694: DOUBLE
11695: EQUAL
11696: IFTRUE 11700
11698: GO 11722
11700: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11701: LD_VAR 0 1
11705: PPUSH
11706: LD_VAR 0 6
11710: PPUSH
11711: LD_VAR 0 7
11715: PPUSH
11716: CALL_OW 154
11720: GO 11723
11722: POP
// end ;
11723: LD_VAR 0 2
11727: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11728: LD_INT 0
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
// if not unit or not building then
11736: LD_VAR 0 1
11740: NOT
11741: IFTRUE 11750
11743: PUSH
11744: LD_VAR 0 2
11748: NOT
11749: OR
11750: IFFALSE 11754
// exit ;
11752: GO 11912
// x := GetX ( building ) ;
11754: LD_ADDR_VAR 0 5
11758: PUSH
11759: LD_VAR 0 2
11763: PPUSH
11764: CALL_OW 250
11768: ST_TO_ADDR
// y := GetY ( building ) ;
11769: LD_ADDR_VAR 0 6
11773: PUSH
11774: LD_VAR 0 2
11778: PPUSH
11779: CALL_OW 251
11783: ST_TO_ADDR
// for i := 0 to 5 do
11784: LD_ADDR_VAR 0 4
11788: PUSH
11789: DOUBLE
11790: LD_INT 0
11792: DEC
11793: ST_TO_ADDR
11794: LD_INT 5
11796: PUSH
11797: FOR_TO
11798: IFFALSE 11910
// begin _x := ShiftX ( x , i , 3 ) ;
11800: LD_ADDR_VAR 0 7
11804: PUSH
11805: LD_VAR 0 5
11809: PPUSH
11810: LD_VAR 0 4
11814: PPUSH
11815: LD_INT 3
11817: PPUSH
11818: CALL_OW 272
11822: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11823: LD_ADDR_VAR 0 8
11827: PUSH
11828: LD_VAR 0 6
11832: PPUSH
11833: LD_VAR 0 4
11837: PPUSH
11838: LD_INT 3
11840: PPUSH
11841: CALL_OW 273
11845: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11846: LD_VAR 0 7
11850: PPUSH
11851: LD_VAR 0 8
11855: PPUSH
11856: CALL_OW 488
11860: NOT
11861: IFFALSE 11865
// continue ;
11863: GO 11797
// if HexInfo ( _x , _y ) = 0 then
11865: LD_VAR 0 7
11869: PPUSH
11870: LD_VAR 0 8
11874: PPUSH
11875: CALL_OW 428
11879: PUSH
11880: LD_INT 0
11882: EQUAL
11883: IFFALSE 11908
// begin ComMoveXY ( unit , _x , _y ) ;
11885: LD_VAR 0 1
11889: PPUSH
11890: LD_VAR 0 7
11894: PPUSH
11895: LD_VAR 0 8
11899: PPUSH
11900: CALL_OW 111
// exit ;
11904: POP
11905: POP
11906: GO 11912
// end ; end ;
11908: GO 11797
11910: POP
11911: POP
// end ;
11912: LD_VAR 0 3
11916: RET
// export function ScanBase ( side , base_area ) ; begin
11917: LD_INT 0
11919: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11920: LD_ADDR_VAR 0 3
11924: PUSH
11925: LD_VAR 0 2
11929: PPUSH
11930: LD_INT 81
11932: PUSH
11933: LD_VAR 0 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PPUSH
11942: CALL_OW 70
11946: ST_TO_ADDR
// end ;
11947: LD_VAR 0 3
11951: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11952: LD_INT 0
11954: PPUSH
11955: PPUSH
11956: PPUSH
11957: PPUSH
// result := false ;
11958: LD_ADDR_VAR 0 2
11962: PUSH
11963: LD_INT 0
11965: ST_TO_ADDR
// side := GetSide ( unit ) ;
11966: LD_ADDR_VAR 0 3
11970: PUSH
11971: LD_VAR 0 1
11975: PPUSH
11976: CALL_OW 255
11980: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11981: LD_ADDR_VAR 0 4
11985: PUSH
11986: LD_VAR 0 1
11990: PPUSH
11991: CALL_OW 248
11995: ST_TO_ADDR
// case nat of 1 :
11996: LD_VAR 0 4
12000: PUSH
12001: LD_INT 1
12003: DOUBLE
12004: EQUAL
12005: IFTRUE 12009
12007: GO 12020
12009: POP
// tech := tech_lassight ; 2 :
12010: LD_ADDR_VAR 0 5
12014: PUSH
12015: LD_INT 12
12017: ST_TO_ADDR
12018: GO 12059
12020: LD_INT 2
12022: DOUBLE
12023: EQUAL
12024: IFTRUE 12028
12026: GO 12039
12028: POP
// tech := tech_mortar ; 3 :
12029: LD_ADDR_VAR 0 5
12033: PUSH
12034: LD_INT 41
12036: ST_TO_ADDR
12037: GO 12059
12039: LD_INT 3
12041: DOUBLE
12042: EQUAL
12043: IFTRUE 12047
12045: GO 12058
12047: POP
// tech := tech_bazooka ; end ;
12048: LD_ADDR_VAR 0 5
12052: PUSH
12053: LD_INT 44
12055: ST_TO_ADDR
12056: GO 12059
12058: POP
// if Researched ( side , tech ) then
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_VAR 0 5
12068: PPUSH
12069: CALL_OW 325
12073: IFFALSE 12100
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12075: LD_ADDR_VAR 0 2
12079: PUSH
12080: LD_INT 5
12082: PUSH
12083: LD_INT 8
12085: PUSH
12086: LD_INT 9
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: LD_VAR 0 4
12098: ARRAY
12099: ST_TO_ADDR
// end ;
12100: LD_VAR 0 2
12104: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
// if not mines then
12110: LD_VAR 0 2
12114: NOT
12115: IFFALSE 12119
// exit ;
12117: GO 12263
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12119: LD_ADDR_VAR 0 5
12123: PUSH
12124: LD_INT 81
12126: PUSH
12127: LD_VAR 0 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 3
12138: PUSH
12139: LD_INT 21
12141: PUSH
12142: LD_INT 3
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 69
12161: ST_TO_ADDR
// for i in mines do
12162: LD_ADDR_VAR 0 4
12166: PUSH
12167: LD_VAR 0 2
12171: PUSH
12172: FOR_IN
12173: IFFALSE 12261
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12175: LD_VAR 0 4
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 4
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: PPUSH
12193: CALL_OW 458
12197: NOT
12198: IFFALSE 12202
// continue ;
12200: GO 12172
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12202: LD_VAR 0 4
12206: PUSH
12207: LD_INT 1
12209: ARRAY
12210: PPUSH
12211: LD_VAR 0 4
12215: PUSH
12216: LD_INT 2
12218: ARRAY
12219: PPUSH
12220: CALL_OW 428
12224: PUSH
12225: LD_VAR 0 5
12229: IN
12230: IFFALSE 12259
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12232: LD_VAR 0 4
12236: PUSH
12237: LD_INT 1
12239: ARRAY
12240: PPUSH
12241: LD_VAR 0 4
12245: PUSH
12246: LD_INT 2
12248: ARRAY
12249: PPUSH
12250: LD_VAR 0 1
12254: PPUSH
12255: CALL_OW 456
// end ;
12259: GO 12172
12261: POP
12262: POP
// end ;
12263: LD_VAR 0 3
12267: RET
// export function Count ( array ) ; begin
12268: LD_INT 0
12270: PPUSH
// result := array + 0 ;
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: LD_VAR 0 1
12280: PUSH
12281: LD_INT 0
12283: PLUS
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 2
12289: RET
// export function IsEmpty ( building ) ; begin
12290: LD_INT 0
12292: PPUSH
// if not building then
12293: LD_VAR 0 1
12297: NOT
12298: IFFALSE 12302
// exit ;
12300: GO 12345
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12302: LD_ADDR_VAR 0 2
12306: PUSH
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PPUSH
12320: CALL_OW 255
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 58
12331: PUSH
12332: EMPTY
12333: LIST
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PPUSH
12339: CALL_OW 69
12343: IN
12344: ST_TO_ADDR
// end ;
12345: LD_VAR 0 2
12349: RET
// export function IsNotFull ( building ) ; var places ; begin
12350: LD_INT 0
12352: PPUSH
12353: PPUSH
// if not building then
12354: LD_VAR 0 1
12358: NOT
12359: IFFALSE 12363
// exit ;
12361: GO 12391
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12363: LD_ADDR_VAR 0 2
12367: PUSH
12368: LD_VAR 0 1
12372: PPUSH
12373: LD_INT 3
12375: PUSH
12376: LD_INT 62
12378: PUSH
12379: EMPTY
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 72
12390: ST_TO_ADDR
// end ;
12391: LD_VAR 0 2
12395: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
// tmp := [ ] ;
12402: LD_ADDR_VAR 0 3
12406: PUSH
12407: EMPTY
12408: ST_TO_ADDR
// list := [ ] ;
12409: LD_ADDR_VAR 0 5
12413: PUSH
12414: EMPTY
12415: ST_TO_ADDR
// for i = 16 to 25 do
12416: LD_ADDR_VAR 0 4
12420: PUSH
12421: DOUBLE
12422: LD_INT 16
12424: DEC
12425: ST_TO_ADDR
12426: LD_INT 25
12428: PUSH
12429: FOR_TO
12430: IFFALSE 12503
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12432: LD_ADDR_VAR 0 3
12436: PUSH
12437: LD_VAR 0 3
12441: PUSH
12442: LD_INT 22
12444: PUSH
12445: LD_VAR 0 1
12449: PPUSH
12450: CALL_OW 255
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 91
12461: PUSH
12462: LD_VAR 0 1
12466: PUSH
12467: LD_INT 6
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: LD_VAR 0 4
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: PPUSH
12495: CALL_OW 69
12499: ADD
12500: ST_TO_ADDR
12501: GO 12429
12503: POP
12504: POP
// for i = 1 to tmp do
12505: LD_ADDR_VAR 0 4
12509: PUSH
12510: DOUBLE
12511: LD_INT 1
12513: DEC
12514: ST_TO_ADDR
12515: LD_VAR 0 3
12519: PUSH
12520: FOR_TO
12521: IFFALSE 12609
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12523: LD_ADDR_VAR 0 5
12527: PUSH
12528: LD_VAR 0 5
12532: PUSH
12533: LD_VAR 0 3
12537: PUSH
12538: LD_VAR 0 4
12542: ARRAY
12543: PPUSH
12544: CALL_OW 266
12548: PUSH
12549: LD_VAR 0 3
12553: PUSH
12554: LD_VAR 0 4
12558: ARRAY
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 3
12569: PUSH
12570: LD_VAR 0 4
12574: ARRAY
12575: PPUSH
12576: CALL_OW 251
12580: PUSH
12581: LD_VAR 0 3
12585: PUSH
12586: LD_VAR 0 4
12590: ARRAY
12591: PPUSH
12592: CALL_OW 254
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: ADD
12606: ST_TO_ADDR
12607: GO 12520
12609: POP
12610: POP
// result := list ;
12611: LD_ADDR_VAR 0 2
12615: PUSH
12616: LD_VAR 0 5
12620: ST_TO_ADDR
// end ;
12621: LD_VAR 0 2
12625: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12626: LD_INT 0
12628: PPUSH
12629: PPUSH
12630: PPUSH
12631: PPUSH
12632: PPUSH
12633: PPUSH
12634: PPUSH
// if not factory then
12635: LD_VAR 0 1
12639: NOT
12640: IFFALSE 12644
// exit ;
12642: GO 13247
// if control = control_apeman then
12644: LD_VAR 0 4
12648: PUSH
12649: LD_INT 5
12651: EQUAL
12652: IFFALSE 12761
// begin tmp := UnitsInside ( factory ) ;
12654: LD_ADDR_VAR 0 8
12658: PUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 313
12668: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12669: LD_VAR 0 8
12673: PPUSH
12674: LD_INT 25
12676: PUSH
12677: LD_INT 12
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PPUSH
12684: CALL_OW 72
12688: NOT
12689: IFFALSE 12699
// control := control_manual ;
12691: LD_ADDR_VAR 0 4
12695: PUSH
12696: LD_INT 1
12698: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12699: LD_ADDR_VAR 0 8
12703: PUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: CALL 12396 0 1
12713: ST_TO_ADDR
// if tmp then
12714: LD_VAR 0 8
12718: IFFALSE 12761
// begin for i in tmp do
12720: LD_ADDR_VAR 0 7
12724: PUSH
12725: LD_VAR 0 8
12729: PUSH
12730: FOR_IN
12731: IFFALSE 12759
// if i [ 1 ] = b_ext_radio then
12733: LD_VAR 0 7
12737: PUSH
12738: LD_INT 1
12740: ARRAY
12741: PUSH
12742: LD_INT 22
12744: EQUAL
12745: IFFALSE 12757
// begin control := control_remote ;
12747: LD_ADDR_VAR 0 4
12751: PUSH
12752: LD_INT 2
12754: ST_TO_ADDR
// break ;
12755: GO 12759
// end ;
12757: GO 12730
12759: POP
12760: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12761: LD_VAR 0 1
12765: PPUSH
12766: LD_VAR 0 2
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_VAR 0 4
12780: PPUSH
12781: LD_VAR 0 5
12785: PPUSH
12786: CALL_OW 448
12790: IFFALSE 12825
// begin result := [ chassis , engine , control , weapon ] ;
12792: LD_ADDR_VAR 0 6
12796: PUSH
12797: LD_VAR 0 2
12801: PUSH
12802: LD_VAR 0 3
12806: PUSH
12807: LD_VAR 0 4
12811: PUSH
12812: LD_VAR 0 5
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: ST_TO_ADDR
// exit ;
12823: GO 13247
// end ; _chassis := AvailableChassisList ( factory ) ;
12825: LD_ADDR_VAR 0 9
12829: PUSH
12830: LD_VAR 0 1
12834: PPUSH
12835: CALL_OW 475
12839: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12840: LD_ADDR_VAR 0 11
12844: PUSH
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 476
12854: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12855: LD_ADDR_VAR 0 12
12859: PUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 477
12869: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12870: LD_ADDR_VAR 0 10
12874: PUSH
12875: LD_VAR 0 1
12879: PPUSH
12880: CALL_OW 478
12884: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12885: LD_VAR 0 9
12889: NOT
12890: IFTRUE 12899
12892: PUSH
12893: LD_VAR 0 11
12897: NOT
12898: OR
12899: IFTRUE 12908
12901: PUSH
12902: LD_VAR 0 12
12906: NOT
12907: OR
12908: IFTRUE 12917
12910: PUSH
12911: LD_VAR 0 10
12915: NOT
12916: OR
12917: IFFALSE 12952
// begin result := [ chassis , engine , control , weapon ] ;
12919: LD_ADDR_VAR 0 6
12923: PUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_VAR 0 3
12933: PUSH
12934: LD_VAR 0 4
12938: PUSH
12939: LD_VAR 0 5
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: ST_TO_ADDR
// exit ;
12950: GO 13247
// end ; if not chassis in _chassis then
12952: LD_VAR 0 2
12956: PUSH
12957: LD_VAR 0 9
12961: IN
12962: NOT
12963: IFFALSE 12989
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_VAR 0 9
12974: PUSH
12975: LD_INT 1
12977: PPUSH
12978: LD_VAR 0 9
12982: PPUSH
12983: CALL_OW 12
12987: ARRAY
12988: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12989: LD_VAR 0 2
12993: PPUSH
12994: LD_VAR 0 3
12998: PPUSH
12999: CALL 13252 0 2
13003: NOT
13004: IFFALSE 13065
// repeat engine := _engine [ 1 ] ;
13006: LD_ADDR_VAR 0 3
13010: PUSH
13011: LD_VAR 0 11
13015: PUSH
13016: LD_INT 1
13018: ARRAY
13019: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13020: LD_ADDR_VAR 0 11
13024: PUSH
13025: LD_VAR 0 11
13029: PPUSH
13030: LD_INT 1
13032: PPUSH
13033: CALL_OW 3
13037: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13038: LD_VAR 0 2
13042: PPUSH
13043: LD_VAR 0 3
13047: PPUSH
13048: CALL 13252 0 2
13052: IFTRUE 13063
13054: PUSH
13055: LD_VAR 0 11
13059: PUSH
13060: EMPTY
13061: EQUAL
13062: OR
13063: IFFALSE 13006
// if not control in _control then
13065: LD_VAR 0 4
13069: PUSH
13070: LD_VAR 0 12
13074: IN
13075: NOT
13076: IFFALSE 13102
// control := _control [ rand ( 1 , _control ) ] ;
13078: LD_ADDR_VAR 0 4
13082: PUSH
13083: LD_VAR 0 12
13087: PUSH
13088: LD_INT 1
13090: PPUSH
13091: LD_VAR 0 12
13095: PPUSH
13096: CALL_OW 12
13100: ARRAY
13101: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13102: LD_VAR 0 2
13106: PPUSH
13107: LD_VAR 0 5
13111: PPUSH
13112: CALL 13474 0 2
13116: NOT
13117: IFFALSE 13178
// repeat weapon := _weapon [ 1 ] ;
13119: LD_ADDR_VAR 0 5
13123: PUSH
13124: LD_VAR 0 10
13128: PUSH
13129: LD_INT 1
13131: ARRAY
13132: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13133: LD_ADDR_VAR 0 10
13137: PUSH
13138: LD_VAR 0 10
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 3
13150: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13151: LD_VAR 0 2
13155: PPUSH
13156: LD_VAR 0 5
13160: PPUSH
13161: CALL 13474 0 2
13165: IFTRUE 13176
13167: PUSH
13168: LD_VAR 0 10
13172: PUSH
13173: EMPTY
13174: EQUAL
13175: OR
13176: IFFALSE 13119
// result := [ ] ;
13178: LD_ADDR_VAR 0 6
13182: PUSH
13183: EMPTY
13184: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13185: LD_VAR 0 1
13189: PPUSH
13190: LD_VAR 0 2
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_VAR 0 4
13204: PPUSH
13205: LD_VAR 0 5
13209: PPUSH
13210: CALL_OW 448
13214: IFFALSE 13247
// result := [ chassis , engine , control , weapon ] ;
13216: LD_ADDR_VAR 0 6
13220: PUSH
13221: LD_VAR 0 2
13225: PUSH
13226: LD_VAR 0 3
13230: PUSH
13231: LD_VAR 0 4
13235: PUSH
13236: LD_VAR 0 5
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: ST_TO_ADDR
// end ;
13247: LD_VAR 0 6
13251: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13252: LD_INT 0
13254: PPUSH
// if not chassis or not engine then
13255: LD_VAR 0 1
13259: NOT
13260: IFTRUE 13269
13262: PUSH
13263: LD_VAR 0 2
13267: NOT
13268: OR
13269: IFFALSE 13273
// exit ;
13271: GO 13469
// case engine of engine_solar :
13273: LD_VAR 0 2
13277: PUSH
13278: LD_INT 2
13280: DOUBLE
13281: EQUAL
13282: IFTRUE 13286
13284: GO 13324
13286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13287: LD_ADDR_VAR 0 3
13291: PUSH
13292: LD_INT 11
13294: PUSH
13295: LD_INT 12
13297: PUSH
13298: LD_INT 13
13300: PUSH
13301: LD_INT 14
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 3
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: ST_TO_ADDR
13322: GO 13453
13324: LD_INT 1
13326: DOUBLE
13327: EQUAL
13328: IFTRUE 13332
13330: GO 13394
13332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13333: LD_ADDR_VAR 0 3
13337: PUSH
13338: LD_INT 11
13340: PUSH
13341: LD_INT 12
13343: PUSH
13344: LD_INT 13
13346: PUSH
13347: LD_INT 14
13349: PUSH
13350: LD_INT 1
13352: PUSH
13353: LD_INT 2
13355: PUSH
13356: LD_INT 3
13358: PUSH
13359: LD_INT 4
13361: PUSH
13362: LD_INT 5
13364: PUSH
13365: LD_INT 21
13367: PUSH
13368: LD_INT 23
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_INT 24
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
13392: GO 13453
13394: LD_INT 3
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13452
13402: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 13
13410: PUSH
13411: LD_INT 14
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: LD_INT 3
13419: PUSH
13420: LD_INT 4
13422: PUSH
13423: LD_INT 5
13425: PUSH
13426: LD_INT 21
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_INT 23
13434: PUSH
13435: LD_INT 24
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: ST_TO_ADDR
13450: GO 13453
13452: POP
// result := ( chassis in result ) ;
13453: LD_ADDR_VAR 0 3
13457: PUSH
13458: LD_VAR 0 1
13462: PUSH
13463: LD_VAR 0 3
13467: IN
13468: ST_TO_ADDR
// end ;
13469: LD_VAR 0 3
13473: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13474: LD_INT 0
13476: PPUSH
// if not chassis or not weapon then
13477: LD_VAR 0 1
13481: NOT
13482: IFTRUE 13491
13484: PUSH
13485: LD_VAR 0 2
13489: NOT
13490: OR
13491: IFFALSE 13495
// exit ;
13493: GO 14555
// case weapon of us_machine_gun :
13495: LD_VAR 0 2
13499: PUSH
13500: LD_INT 2
13502: DOUBLE
13503: EQUAL
13504: IFTRUE 13508
13506: GO 13538
13508: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13509: LD_ADDR_VAR 0 3
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: LD_INT 2
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: LD_INT 4
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: ST_TO_ADDR
13536: GO 14539
13538: LD_INT 3
13540: DOUBLE
13541: EQUAL
13542: IFTRUE 13546
13544: GO 13576
13546: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13547: LD_ADDR_VAR 0 3
13551: PUSH
13552: LD_INT 1
13554: PUSH
13555: LD_INT 2
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: LD_INT 4
13563: PUSH
13564: LD_INT 5
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: ST_TO_ADDR
13574: GO 14539
13576: LD_INT 11
13578: DOUBLE
13579: EQUAL
13580: IFTRUE 13584
13582: GO 13614
13584: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13585: LD_ADDR_VAR 0 3
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: LD_INT 2
13595: PUSH
13596: LD_INT 3
13598: PUSH
13599: LD_INT 4
13601: PUSH
13602: LD_INT 5
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: ST_TO_ADDR
13612: GO 14539
13614: LD_INT 4
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13648
13622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13623: LD_ADDR_VAR 0 3
13627: PUSH
13628: LD_INT 2
13630: PUSH
13631: LD_INT 3
13633: PUSH
13634: LD_INT 4
13636: PUSH
13637: LD_INT 5
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: ST_TO_ADDR
13646: GO 14539
13648: LD_INT 5
13650: DOUBLE
13651: EQUAL
13652: IFTRUE 13656
13654: GO 13682
13656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13657: LD_ADDR_VAR 0 3
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: LD_INT 5
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: ST_TO_ADDR
13680: GO 14539
13682: LD_INT 9
13684: DOUBLE
13685: EQUAL
13686: IFTRUE 13690
13688: GO 13716
13690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13691: LD_ADDR_VAR 0 3
13695: PUSH
13696: LD_INT 2
13698: PUSH
13699: LD_INT 3
13701: PUSH
13702: LD_INT 4
13704: PUSH
13705: LD_INT 5
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: ST_TO_ADDR
13714: GO 14539
13716: LD_INT 7
13718: DOUBLE
13719: EQUAL
13720: IFTRUE 13724
13722: GO 13750
13724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13725: LD_ADDR_VAR 0 3
13729: PUSH
13730: LD_INT 2
13732: PUSH
13733: LD_INT 3
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: LD_INT 5
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: ST_TO_ADDR
13748: GO 14539
13750: LD_INT 12
13752: DOUBLE
13753: EQUAL
13754: IFTRUE 13758
13756: GO 13784
13758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13759: LD_ADDR_VAR 0 3
13763: PUSH
13764: LD_INT 2
13766: PUSH
13767: LD_INT 3
13769: PUSH
13770: LD_INT 4
13772: PUSH
13773: LD_INT 5
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: ST_TO_ADDR
13782: GO 14539
13784: LD_INT 13
13786: DOUBLE
13787: EQUAL
13788: IFTRUE 13792
13790: GO 13818
13792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13793: LD_ADDR_VAR 0 3
13797: PUSH
13798: LD_INT 2
13800: PUSH
13801: LD_INT 3
13803: PUSH
13804: LD_INT 4
13806: PUSH
13807: LD_INT 5
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: ST_TO_ADDR
13816: GO 14539
13818: LD_INT 14
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 13844
13826: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13827: LD_ADDR_VAR 0 3
13831: PUSH
13832: LD_INT 4
13834: PUSH
13835: LD_INT 5
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: ST_TO_ADDR
13842: GO 14539
13844: LD_INT 6
13846: DOUBLE
13847: EQUAL
13848: IFTRUE 13852
13850: GO 13870
13852: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13853: LD_ADDR_VAR 0 3
13857: PUSH
13858: LD_INT 4
13860: PUSH
13861: LD_INT 5
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: ST_TO_ADDR
13868: GO 14539
13870: LD_INT 10
13872: DOUBLE
13873: EQUAL
13874: IFTRUE 13878
13876: GO 13896
13878: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13879: LD_ADDR_VAR 0 3
13883: PUSH
13884: LD_INT 4
13886: PUSH
13887: LD_INT 5
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: ST_TO_ADDR
13894: GO 14539
13896: LD_INT 22
13898: DOUBLE
13899: EQUAL
13900: IFTRUE 13904
13902: GO 13930
13904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13905: LD_ADDR_VAR 0 3
13909: PUSH
13910: LD_INT 11
13912: PUSH
13913: LD_INT 12
13915: PUSH
13916: LD_INT 13
13918: PUSH
13919: LD_INT 14
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: ST_TO_ADDR
13928: GO 14539
13930: LD_INT 23
13932: DOUBLE
13933: EQUAL
13934: IFTRUE 13938
13936: GO 13964
13938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13939: LD_ADDR_VAR 0 3
13943: PUSH
13944: LD_INT 11
13946: PUSH
13947: LD_INT 12
13949: PUSH
13950: LD_INT 13
13952: PUSH
13953: LD_INT 14
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: ST_TO_ADDR
13962: GO 14539
13964: LD_INT 24
13966: DOUBLE
13967: EQUAL
13968: IFTRUE 13972
13970: GO 13998
13972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13973: LD_ADDR_VAR 0 3
13977: PUSH
13978: LD_INT 11
13980: PUSH
13981: LD_INT 12
13983: PUSH
13984: LD_INT 13
13986: PUSH
13987: LD_INT 14
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: ST_TO_ADDR
13996: GO 14539
13998: LD_INT 30
14000: DOUBLE
14001: EQUAL
14002: IFTRUE 14006
14004: GO 14032
14006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14007: LD_ADDR_VAR 0 3
14011: PUSH
14012: LD_INT 11
14014: PUSH
14015: LD_INT 12
14017: PUSH
14018: LD_INT 13
14020: PUSH
14021: LD_INT 14
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: ST_TO_ADDR
14030: GO 14539
14032: LD_INT 25
14034: DOUBLE
14035: EQUAL
14036: IFTRUE 14040
14038: GO 14058
14040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: LD_INT 13
14048: PUSH
14049: LD_INT 14
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: ST_TO_ADDR
14056: GO 14539
14058: LD_INT 27
14060: DOUBLE
14061: EQUAL
14062: IFTRUE 14066
14064: GO 14084
14066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14067: LD_ADDR_VAR 0 3
14071: PUSH
14072: LD_INT 13
14074: PUSH
14075: LD_INT 14
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: ST_TO_ADDR
14082: GO 14539
14084: LD_INT 92
14086: DOUBLE
14087: EQUAL
14088: IFTRUE 14092
14090: GO 14118
14092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14093: LD_ADDR_VAR 0 3
14097: PUSH
14098: LD_INT 11
14100: PUSH
14101: LD_INT 12
14103: PUSH
14104: LD_INT 13
14106: PUSH
14107: LD_INT 14
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: ST_TO_ADDR
14116: GO 14539
14118: LD_INT 28
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14144
14126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: LD_INT 13
14134: PUSH
14135: LD_INT 14
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: ST_TO_ADDR
14142: GO 14539
14144: LD_INT 29
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14170
14152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: LD_INT 13
14160: PUSH
14161: LD_INT 14
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: ST_TO_ADDR
14168: GO 14539
14170: LD_INT 31
14172: DOUBLE
14173: EQUAL
14174: IFTRUE 14178
14176: GO 14196
14178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14179: LD_ADDR_VAR 0 3
14183: PUSH
14184: LD_INT 13
14186: PUSH
14187: LD_INT 14
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: ST_TO_ADDR
14194: GO 14539
14196: LD_INT 26
14198: DOUBLE
14199: EQUAL
14200: IFTRUE 14204
14202: GO 14222
14204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14205: LD_ADDR_VAR 0 3
14209: PUSH
14210: LD_INT 13
14212: PUSH
14213: LD_INT 14
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: ST_TO_ADDR
14220: GO 14539
14222: LD_INT 42
14224: DOUBLE
14225: EQUAL
14226: IFTRUE 14230
14228: GO 14256
14230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_INT 21
14238: PUSH
14239: LD_INT 22
14241: PUSH
14242: LD_INT 23
14244: PUSH
14245: LD_INT 24
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: ST_TO_ADDR
14254: GO 14539
14256: LD_INT 43
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14290
14264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14265: LD_ADDR_VAR 0 3
14269: PUSH
14270: LD_INT 21
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_INT 23
14278: PUSH
14279: LD_INT 24
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: ST_TO_ADDR
14288: GO 14539
14290: LD_INT 44
14292: DOUBLE
14293: EQUAL
14294: IFTRUE 14298
14296: GO 14324
14298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14299: LD_ADDR_VAR 0 3
14303: PUSH
14304: LD_INT 21
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: LD_INT 23
14312: PUSH
14313: LD_INT 24
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: ST_TO_ADDR
14322: GO 14539
14324: LD_INT 45
14326: DOUBLE
14327: EQUAL
14328: IFTRUE 14332
14330: GO 14358
14332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14333: LD_ADDR_VAR 0 3
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_INT 23
14346: PUSH
14347: LD_INT 24
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: ST_TO_ADDR
14356: GO 14539
14358: LD_INT 49
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14392
14366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14367: LD_ADDR_VAR 0 3
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_INT 23
14380: PUSH
14381: LD_INT 24
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: ST_TO_ADDR
14390: GO 14539
14392: LD_INT 51
14394: DOUBLE
14395: EQUAL
14396: IFTRUE 14400
14398: GO 14426
14400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14401: LD_ADDR_VAR 0 3
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 22
14411: PUSH
14412: LD_INT 23
14414: PUSH
14415: LD_INT 24
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: ST_TO_ADDR
14424: GO 14539
14426: LD_INT 52
14428: DOUBLE
14429: EQUAL
14430: IFTRUE 14434
14432: GO 14460
14434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14435: LD_ADDR_VAR 0 3
14439: PUSH
14440: LD_INT 21
14442: PUSH
14443: LD_INT 22
14445: PUSH
14446: LD_INT 23
14448: PUSH
14449: LD_INT 24
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: ST_TO_ADDR
14458: GO 14539
14460: LD_INT 53
14462: DOUBLE
14463: EQUAL
14464: IFTRUE 14468
14466: GO 14486
14468: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14469: LD_ADDR_VAR 0 3
14473: PUSH
14474: LD_INT 23
14476: PUSH
14477: LD_INT 24
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: ST_TO_ADDR
14484: GO 14539
14486: LD_INT 46
14488: DOUBLE
14489: EQUAL
14490: IFTRUE 14494
14492: GO 14512
14494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14495: LD_ADDR_VAR 0 3
14499: PUSH
14500: LD_INT 23
14502: PUSH
14503: LD_INT 24
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: ST_TO_ADDR
14510: GO 14539
14512: LD_INT 47
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 14538
14520: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14521: LD_ADDR_VAR 0 3
14525: PUSH
14526: LD_INT 23
14528: PUSH
14529: LD_INT 24
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: ST_TO_ADDR
14536: GO 14539
14538: POP
// result := ( chassis in result ) ;
14539: LD_ADDR_VAR 0 3
14543: PUSH
14544: LD_VAR 0 1
14548: PUSH
14549: LD_VAR 0 3
14553: IN
14554: ST_TO_ADDR
// end ;
14555: LD_VAR 0 3
14559: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14560: LD_INT 0
14562: PPUSH
14563: PPUSH
14564: PPUSH
14565: PPUSH
14566: PPUSH
14567: PPUSH
14568: PPUSH
// result := array ;
14569: LD_ADDR_VAR 0 5
14573: PUSH
14574: LD_VAR 0 1
14578: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14579: LD_VAR 0 1
14583: NOT
14584: IFTRUE 14593
14586: PUSH
14587: LD_VAR 0 2
14591: NOT
14592: OR
14593: IFTRUE 14602
14595: PUSH
14596: LD_VAR 0 3
14600: NOT
14601: OR
14602: IFTRUE 14616
14604: PUSH
14605: LD_VAR 0 2
14609: PUSH
14610: LD_VAR 0 1
14614: GREATER
14615: OR
14616: IFTRUE 14630
14618: PUSH
14619: LD_VAR 0 3
14623: PUSH
14624: LD_VAR 0 1
14628: GREATER
14629: OR
14630: IFFALSE 14634
// exit ;
14632: GO 14930
// if direction then
14634: LD_VAR 0 4
14638: IFFALSE 14702
// begin d := 1 ;
14640: LD_ADDR_VAR 0 9
14644: PUSH
14645: LD_INT 1
14647: ST_TO_ADDR
// if i_from > i_to then
14648: LD_VAR 0 2
14652: PUSH
14653: LD_VAR 0 3
14657: GREATER
14658: IFFALSE 14684
// length := ( array - i_from ) + i_to else
14660: LD_ADDR_VAR 0 11
14664: PUSH
14665: LD_VAR 0 1
14669: PUSH
14670: LD_VAR 0 2
14674: MINUS
14675: PUSH
14676: LD_VAR 0 3
14680: PLUS
14681: ST_TO_ADDR
14682: GO 14700
// length := i_to - i_from ;
14684: LD_ADDR_VAR 0 11
14688: PUSH
14689: LD_VAR 0 3
14693: PUSH
14694: LD_VAR 0 2
14698: MINUS
14699: ST_TO_ADDR
// end else
14700: GO 14763
// begin d := - 1 ;
14702: LD_ADDR_VAR 0 9
14706: PUSH
14707: LD_INT 1
14709: NEG
14710: ST_TO_ADDR
// if i_from > i_to then
14711: LD_VAR 0 2
14715: PUSH
14716: LD_VAR 0 3
14720: GREATER
14721: IFFALSE 14741
// length := i_from - i_to else
14723: LD_ADDR_VAR 0 11
14727: PUSH
14728: LD_VAR 0 2
14732: PUSH
14733: LD_VAR 0 3
14737: MINUS
14738: ST_TO_ADDR
14739: GO 14763
// length := ( array - i_to ) + i_from ;
14741: LD_ADDR_VAR 0 11
14745: PUSH
14746: LD_VAR 0 1
14750: PUSH
14751: LD_VAR 0 3
14755: MINUS
14756: PUSH
14757: LD_VAR 0 2
14761: PLUS
14762: ST_TO_ADDR
// end ; if not length then
14763: LD_VAR 0 11
14767: NOT
14768: IFFALSE 14772
// exit ;
14770: GO 14930
// tmp := array ;
14772: LD_ADDR_VAR 0 10
14776: PUSH
14777: LD_VAR 0 1
14781: ST_TO_ADDR
// for i = 1 to length do
14782: LD_ADDR_VAR 0 6
14786: PUSH
14787: DOUBLE
14788: LD_INT 1
14790: DEC
14791: ST_TO_ADDR
14792: LD_VAR 0 11
14796: PUSH
14797: FOR_TO
14798: IFFALSE 14918
// begin for j = 1 to array do
14800: LD_ADDR_VAR 0 7
14804: PUSH
14805: DOUBLE
14806: LD_INT 1
14808: DEC
14809: ST_TO_ADDR
14810: LD_VAR 0 1
14814: PUSH
14815: FOR_TO
14816: IFFALSE 14904
// begin k := j + d ;
14818: LD_ADDR_VAR 0 8
14822: PUSH
14823: LD_VAR 0 7
14827: PUSH
14828: LD_VAR 0 9
14832: PLUS
14833: ST_TO_ADDR
// if k > array then
14834: LD_VAR 0 8
14838: PUSH
14839: LD_VAR 0 1
14843: GREATER
14844: IFFALSE 14854
// k := 1 ;
14846: LD_ADDR_VAR 0 8
14850: PUSH
14851: LD_INT 1
14853: ST_TO_ADDR
// if not k then
14854: LD_VAR 0 8
14858: NOT
14859: IFFALSE 14871
// k := array ;
14861: LD_ADDR_VAR 0 8
14865: PUSH
14866: LD_VAR 0 1
14870: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14871: LD_ADDR_VAR 0 10
14875: PUSH
14876: LD_VAR 0 10
14880: PPUSH
14881: LD_VAR 0 8
14885: PPUSH
14886: LD_VAR 0 1
14890: PUSH
14891: LD_VAR 0 7
14895: ARRAY
14896: PPUSH
14897: CALL_OW 1
14901: ST_TO_ADDR
// end ;
14902: GO 14815
14904: POP
14905: POP
// array := tmp ;
14906: LD_ADDR_VAR 0 1
14910: PUSH
14911: LD_VAR 0 10
14915: ST_TO_ADDR
// end ;
14916: GO 14797
14918: POP
14919: POP
// result := array ;
14920: LD_ADDR_VAR 0 5
14924: PUSH
14925: LD_VAR 0 1
14929: ST_TO_ADDR
// end ;
14930: LD_VAR 0 5
14934: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14935: LD_INT 0
14937: PPUSH
14938: PPUSH
// result := 0 ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_INT 0
14946: ST_TO_ADDR
// if not array or not value in array then
14947: LD_VAR 0 1
14951: NOT
14952: IFTRUE 14967
14954: PUSH
14955: LD_VAR 0 2
14959: PUSH
14960: LD_VAR 0 1
14964: IN
14965: NOT
14966: OR
14967: IFFALSE 14971
// exit ;
14969: GO 15025
// for i = 1 to array do
14971: LD_ADDR_VAR 0 4
14975: PUSH
14976: DOUBLE
14977: LD_INT 1
14979: DEC
14980: ST_TO_ADDR
14981: LD_VAR 0 1
14985: PUSH
14986: FOR_TO
14987: IFFALSE 15023
// if value = array [ i ] then
14989: LD_VAR 0 2
14993: PUSH
14994: LD_VAR 0 1
14998: PUSH
14999: LD_VAR 0 4
15003: ARRAY
15004: EQUAL
15005: IFFALSE 15021
// begin result := i ;
15007: LD_ADDR_VAR 0 3
15011: PUSH
15012: LD_VAR 0 4
15016: ST_TO_ADDR
// exit ;
15017: POP
15018: POP
15019: GO 15025
// end ;
15021: GO 14986
15023: POP
15024: POP
// end ;
15025: LD_VAR 0 3
15029: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15030: LD_INT 0
15032: PPUSH
// vc_chassis := chassis ;
15033: LD_ADDR_OWVAR 37
15037: PUSH
15038: LD_VAR 0 1
15042: ST_TO_ADDR
// vc_engine := engine ;
15043: LD_ADDR_OWVAR 39
15047: PUSH
15048: LD_VAR 0 2
15052: ST_TO_ADDR
// vc_control := control ;
15053: LD_ADDR_OWVAR 38
15057: PUSH
15058: LD_VAR 0 3
15062: ST_TO_ADDR
// vc_weapon := weapon ;
15063: LD_ADDR_OWVAR 40
15067: PUSH
15068: LD_VAR 0 4
15072: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15073: LD_ADDR_OWVAR 41
15077: PUSH
15078: LD_VAR 0 5
15082: ST_TO_ADDR
// end ;
15083: LD_VAR 0 6
15087: RET
// export function WantPlant ( unit ) ; var task ; begin
15088: LD_INT 0
15090: PPUSH
15091: PPUSH
// result := false ;
15092: LD_ADDR_VAR 0 2
15096: PUSH
15097: LD_INT 0
15099: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15100: LD_ADDR_VAR 0 3
15104: PUSH
15105: LD_VAR 0 1
15109: PPUSH
15110: CALL_OW 437
15114: ST_TO_ADDR
// if task then
15115: LD_VAR 0 3
15119: IFFALSE 15147
// if task [ 1 ] [ 1 ] = p then
15121: LD_VAR 0 3
15125: PUSH
15126: LD_INT 1
15128: ARRAY
15129: PUSH
15130: LD_INT 1
15132: ARRAY
15133: PUSH
15134: LD_STRING p
15136: EQUAL
15137: IFFALSE 15147
// result := true ;
15139: LD_ADDR_VAR 0 2
15143: PUSH
15144: LD_INT 1
15146: ST_TO_ADDR
// end ;
15147: LD_VAR 0 2
15151: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15152: LD_INT 0
15154: PPUSH
15155: PPUSH
15156: PPUSH
15157: PPUSH
// if pos < 1 then
15158: LD_VAR 0 2
15162: PUSH
15163: LD_INT 1
15165: LESS
15166: IFFALSE 15170
// exit ;
15168: GO 15473
// if pos = 1 then
15170: LD_VAR 0 2
15174: PUSH
15175: LD_INT 1
15177: EQUAL
15178: IFFALSE 15211
// result := Replace ( arr , pos [ 1 ] , value ) else
15180: LD_ADDR_VAR 0 4
15184: PUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: LD_VAR 0 2
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: PPUSH
15199: LD_VAR 0 3
15203: PPUSH
15204: CALL_OW 1
15208: ST_TO_ADDR
15209: GO 15473
// begin tmp := arr ;
15211: LD_ADDR_VAR 0 6
15215: PUSH
15216: LD_VAR 0 1
15220: ST_TO_ADDR
// s_arr := [ tmp ] ;
15221: LD_ADDR_VAR 0 7
15225: PUSH
15226: LD_VAR 0 6
15230: PUSH
15231: EMPTY
15232: LIST
15233: ST_TO_ADDR
// for i = 1 to pos - 1 do
15234: LD_ADDR_VAR 0 5
15238: PUSH
15239: DOUBLE
15240: LD_INT 1
15242: DEC
15243: ST_TO_ADDR
15244: LD_VAR 0 2
15248: PUSH
15249: LD_INT 1
15251: MINUS
15252: PUSH
15253: FOR_TO
15254: IFFALSE 15299
// begin tmp := tmp [ pos [ i ] ] ;
15256: LD_ADDR_VAR 0 6
15260: PUSH
15261: LD_VAR 0 6
15265: PUSH
15266: LD_VAR 0 2
15270: PUSH
15271: LD_VAR 0 5
15275: ARRAY
15276: ARRAY
15277: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15278: LD_ADDR_VAR 0 7
15282: PUSH
15283: LD_VAR 0 7
15287: PUSH
15288: LD_VAR 0 6
15292: PUSH
15293: EMPTY
15294: LIST
15295: ADD
15296: ST_TO_ADDR
// end ;
15297: GO 15253
15299: POP
15300: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15301: LD_ADDR_VAR 0 6
15305: PUSH
15306: LD_VAR 0 6
15310: PPUSH
15311: LD_VAR 0 2
15315: PUSH
15316: LD_VAR 0 2
15320: ARRAY
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 1
15331: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15332: LD_ADDR_VAR 0 7
15336: PUSH
15337: LD_VAR 0 7
15341: PPUSH
15342: LD_VAR 0 7
15346: PPUSH
15347: LD_VAR 0 6
15351: PPUSH
15352: CALL_OW 1
15356: ST_TO_ADDR
// for i = s_arr downto 2 do
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: DOUBLE
15363: LD_VAR 0 7
15367: INC
15368: ST_TO_ADDR
15369: LD_INT 2
15371: PUSH
15372: FOR_DOWNTO
15373: IFFALSE 15457
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15375: LD_ADDR_VAR 0 6
15379: PUSH
15380: LD_VAR 0 7
15384: PUSH
15385: LD_VAR 0 5
15389: PUSH
15390: LD_INT 1
15392: MINUS
15393: ARRAY
15394: PPUSH
15395: LD_VAR 0 2
15399: PUSH
15400: LD_VAR 0 5
15404: PUSH
15405: LD_INT 1
15407: MINUS
15408: ARRAY
15409: PPUSH
15410: LD_VAR 0 7
15414: PUSH
15415: LD_VAR 0 5
15419: ARRAY
15420: PPUSH
15421: CALL_OW 1
15425: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15426: LD_ADDR_VAR 0 7
15430: PUSH
15431: LD_VAR 0 7
15435: PPUSH
15436: LD_VAR 0 5
15440: PUSH
15441: LD_INT 1
15443: MINUS
15444: PPUSH
15445: LD_VAR 0 6
15449: PPUSH
15450: CALL_OW 1
15454: ST_TO_ADDR
// end ;
15455: GO 15372
15457: POP
15458: POP
// result := s_arr [ 1 ] ;
15459: LD_ADDR_VAR 0 4
15463: PUSH
15464: LD_VAR 0 7
15468: PUSH
15469: LD_INT 1
15471: ARRAY
15472: ST_TO_ADDR
// end ; end ;
15473: LD_VAR 0 4
15477: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15478: LD_INT 0
15480: PPUSH
15481: PPUSH
// if not list then
15482: LD_VAR 0 1
15486: NOT
15487: IFFALSE 15491
// exit ;
15489: GO 15582
// i := list [ pos1 ] ;
15491: LD_ADDR_VAR 0 5
15495: PUSH
15496: LD_VAR 0 1
15500: PUSH
15501: LD_VAR 0 2
15505: ARRAY
15506: ST_TO_ADDR
// if not i then
15507: LD_VAR 0 5
15511: NOT
15512: IFFALSE 15516
// exit ;
15514: GO 15582
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15516: LD_ADDR_VAR 0 1
15520: PUSH
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: LD_VAR 0 1
15535: PUSH
15536: LD_VAR 0 3
15540: ARRAY
15541: PPUSH
15542: CALL_OW 1
15546: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15547: LD_ADDR_VAR 0 1
15551: PUSH
15552: LD_VAR 0 1
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: LD_VAR 0 5
15566: PPUSH
15567: CALL_OW 1
15571: ST_TO_ADDR
// result := list ;
15572: LD_ADDR_VAR 0 4
15576: PUSH
15577: LD_VAR 0 1
15581: ST_TO_ADDR
// end ;
15582: LD_VAR 0 4
15586: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15587: LD_INT 0
15589: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15590: LD_ADDR_VAR 0 5
15594: PUSH
15595: LD_VAR 0 1
15599: PPUSH
15600: CALL_OW 250
15604: PPUSH
15605: LD_VAR 0 1
15609: PPUSH
15610: CALL_OW 251
15614: PPUSH
15615: LD_VAR 0 2
15619: PPUSH
15620: LD_VAR 0 3
15624: PPUSH
15625: LD_VAR 0 4
15629: PPUSH
15630: CALL 16012 0 5
15634: ST_TO_ADDR
// end ;
15635: LD_VAR 0 5
15639: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15640: LD_INT 0
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
// if not list or not unit then
15646: LD_VAR 0 2
15650: NOT
15651: IFTRUE 15660
15653: PUSH
15654: LD_VAR 0 1
15658: NOT
15659: OR
15660: IFFALSE 15664
// exit ;
15662: GO 16007
// result := [ ] ;
15664: LD_ADDR_VAR 0 5
15668: PUSH
15669: EMPTY
15670: ST_TO_ADDR
// for i in list do
15671: LD_ADDR_VAR 0 6
15675: PUSH
15676: LD_VAR 0 2
15680: PUSH
15681: FOR_IN
15682: IFFALSE 15900
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15684: LD_ADDR_VAR 0 8
15688: PUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_VAR 0 6
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 6
15707: PUSH
15708: LD_INT 2
15710: ARRAY
15711: PPUSH
15712: CALL_OW 297
15716: ST_TO_ADDR
// if not Count ( result ) then
15717: LD_VAR 0 5
15721: PPUSH
15722: CALL 12268 0 1
15726: NOT
15727: IFFALSE 15760
// begin result := Join ( result , [ i , tmp ] ) ;
15729: LD_ADDR_VAR 0 5
15733: PUSH
15734: LD_VAR 0 5
15738: PPUSH
15739: LD_VAR 0 6
15743: PUSH
15744: LD_VAR 0 8
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL 48200 0 2
15757: ST_TO_ADDR
// continue ;
15758: GO 15681
// end ; if result [ result ] [ 2 ] <= tmp then
15760: LD_VAR 0 5
15764: PUSH
15765: LD_VAR 0 5
15769: ARRAY
15770: PUSH
15771: LD_INT 2
15773: ARRAY
15774: PUSH
15775: LD_VAR 0 8
15779: LESSEQUAL
15780: IFFALSE 15813
// result := Join ( result , [ i , tmp ] ) else
15782: LD_ADDR_VAR 0 5
15786: PUSH
15787: LD_VAR 0 5
15791: PPUSH
15792: LD_VAR 0 6
15796: PUSH
15797: LD_VAR 0 8
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL 48200 0 2
15810: ST_TO_ADDR
15811: GO 15898
// begin for j := 1 to Count ( result ) do
15813: LD_ADDR_VAR 0 7
15817: PUSH
15818: DOUBLE
15819: LD_INT 1
15821: DEC
15822: ST_TO_ADDR
15823: LD_VAR 0 5
15827: PPUSH
15828: CALL 12268 0 1
15832: PUSH
15833: FOR_TO
15834: IFFALSE 15896
// begin if tmp < result [ j ] [ 2 ] then
15836: LD_VAR 0 8
15840: PUSH
15841: LD_VAR 0 5
15845: PUSH
15846: LD_VAR 0 7
15850: ARRAY
15851: PUSH
15852: LD_INT 2
15854: ARRAY
15855: LESS
15856: IFFALSE 15894
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15858: LD_ADDR_VAR 0 5
15862: PUSH
15863: LD_VAR 0 5
15867: PPUSH
15868: LD_VAR 0 7
15872: PPUSH
15873: LD_VAR 0 6
15877: PUSH
15878: LD_VAR 0 8
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL_OW 2
15891: ST_TO_ADDR
// break ;
15892: GO 15896
// end ; end ;
15894: GO 15833
15896: POP
15897: POP
// end ; end ;
15898: GO 15681
15900: POP
15901: POP
// if result and not asc then
15902: LD_VAR 0 5
15906: IFFALSE 15915
15908: PUSH
15909: LD_VAR 0 3
15913: NOT
15914: AND
15915: IFFALSE 15932
// result := ReverseArray ( result ) ;
15917: LD_ADDR_VAR 0 5
15921: PUSH
15922: LD_VAR 0 5
15926: PPUSH
15927: CALL 43290 0 1
15931: ST_TO_ADDR
// tmp := [ ] ;
15932: LD_ADDR_VAR 0 8
15936: PUSH
15937: EMPTY
15938: ST_TO_ADDR
// if mode then
15939: LD_VAR 0 4
15943: IFFALSE 16007
// begin for i := 1 to result do
15945: LD_ADDR_VAR 0 6
15949: PUSH
15950: DOUBLE
15951: LD_INT 1
15953: DEC
15954: ST_TO_ADDR
15955: LD_VAR 0 5
15959: PUSH
15960: FOR_TO
15961: IFFALSE 15995
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15963: LD_ADDR_VAR 0 8
15967: PUSH
15968: LD_VAR 0 8
15972: PPUSH
15973: LD_VAR 0 5
15977: PUSH
15978: LD_VAR 0 6
15982: ARRAY
15983: PUSH
15984: LD_INT 1
15986: ARRAY
15987: PPUSH
15988: CALL 48200 0 2
15992: ST_TO_ADDR
15993: GO 15960
15995: POP
15996: POP
// result := tmp ;
15997: LD_ADDR_VAR 0 5
16001: PUSH
16002: LD_VAR 0 8
16006: ST_TO_ADDR
// end ; end ;
16007: LD_VAR 0 5
16011: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16012: LD_INT 0
16014: PPUSH
16015: PPUSH
16016: PPUSH
16017: PPUSH
// if not list then
16018: LD_VAR 0 3
16022: NOT
16023: IFFALSE 16027
// exit ;
16025: GO 16417
// result := [ ] ;
16027: LD_ADDR_VAR 0 6
16031: PUSH
16032: EMPTY
16033: ST_TO_ADDR
// for i in list do
16034: LD_ADDR_VAR 0 7
16038: PUSH
16039: LD_VAR 0 3
16043: PUSH
16044: FOR_IN
16045: IFFALSE 16247
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16047: LD_ADDR_VAR 0 9
16051: PUSH
16052: LD_VAR 0 7
16056: PPUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: LD_VAR 0 2
16066: PPUSH
16067: CALL_OW 297
16071: ST_TO_ADDR
// if not result then
16072: LD_VAR 0 6
16076: NOT
16077: IFFALSE 16103
// result := [ [ i , tmp ] ] else
16079: LD_ADDR_VAR 0 6
16083: PUSH
16084: LD_VAR 0 7
16088: PUSH
16089: LD_VAR 0 9
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: ST_TO_ADDR
16101: GO 16245
// begin if result [ result ] [ 2 ] <= tmp then
16103: LD_VAR 0 6
16107: PUSH
16108: LD_VAR 0 6
16112: ARRAY
16113: PUSH
16114: LD_INT 2
16116: ARRAY
16117: PUSH
16118: LD_VAR 0 9
16122: LESSEQUAL
16123: IFFALSE 16165
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16125: LD_ADDR_VAR 0 6
16129: PUSH
16130: LD_VAR 0 6
16134: PPUSH
16135: LD_VAR 0 6
16139: PUSH
16140: LD_INT 1
16142: PLUS
16143: PPUSH
16144: LD_VAR 0 7
16148: PUSH
16149: LD_VAR 0 9
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PPUSH
16158: CALL_OW 2
16162: ST_TO_ADDR
16163: GO 16245
// for j := 1 to result do
16165: LD_ADDR_VAR 0 8
16169: PUSH
16170: DOUBLE
16171: LD_INT 1
16173: DEC
16174: ST_TO_ADDR
16175: LD_VAR 0 6
16179: PUSH
16180: FOR_TO
16181: IFFALSE 16243
// begin if tmp < result [ j ] [ 2 ] then
16183: LD_VAR 0 9
16187: PUSH
16188: LD_VAR 0 6
16192: PUSH
16193: LD_VAR 0 8
16197: ARRAY
16198: PUSH
16199: LD_INT 2
16201: ARRAY
16202: LESS
16203: IFFALSE 16241
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16205: LD_ADDR_VAR 0 6
16209: PUSH
16210: LD_VAR 0 6
16214: PPUSH
16215: LD_VAR 0 8
16219: PPUSH
16220: LD_VAR 0 7
16224: PUSH
16225: LD_VAR 0 9
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 2
16238: ST_TO_ADDR
// break ;
16239: GO 16243
// end ; end ;
16241: GO 16180
16243: POP
16244: POP
// end ; end ;
16245: GO 16044
16247: POP
16248: POP
// if result and not asc then
16249: LD_VAR 0 6
16253: IFFALSE 16262
16255: PUSH
16256: LD_VAR 0 4
16260: NOT
16261: AND
16262: IFFALSE 16337
// begin tmp := result ;
16264: LD_ADDR_VAR 0 9
16268: PUSH
16269: LD_VAR 0 6
16273: ST_TO_ADDR
// for i = tmp downto 1 do
16274: LD_ADDR_VAR 0 7
16278: PUSH
16279: DOUBLE
16280: LD_VAR 0 9
16284: INC
16285: ST_TO_ADDR
16286: LD_INT 1
16288: PUSH
16289: FOR_DOWNTO
16290: IFFALSE 16335
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16292: LD_ADDR_VAR 0 6
16296: PUSH
16297: LD_VAR 0 6
16301: PPUSH
16302: LD_VAR 0 9
16306: PUSH
16307: LD_VAR 0 7
16311: MINUS
16312: PUSH
16313: LD_INT 1
16315: PLUS
16316: PPUSH
16317: LD_VAR 0 9
16321: PUSH
16322: LD_VAR 0 7
16326: ARRAY
16327: PPUSH
16328: CALL_OW 1
16332: ST_TO_ADDR
16333: GO 16289
16335: POP
16336: POP
// end ; tmp := [ ] ;
16337: LD_ADDR_VAR 0 9
16341: PUSH
16342: EMPTY
16343: ST_TO_ADDR
// if mode then
16344: LD_VAR 0 5
16348: IFFALSE 16417
// begin for i = 1 to result do
16350: LD_ADDR_VAR 0 7
16354: PUSH
16355: DOUBLE
16356: LD_INT 1
16358: DEC
16359: ST_TO_ADDR
16360: LD_VAR 0 6
16364: PUSH
16365: FOR_TO
16366: IFFALSE 16405
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16368: LD_ADDR_VAR 0 9
16372: PUSH
16373: LD_VAR 0 9
16377: PPUSH
16378: LD_VAR 0 7
16382: PPUSH
16383: LD_VAR 0 6
16387: PUSH
16388: LD_VAR 0 7
16392: ARRAY
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: CALL_OW 1
16402: ST_TO_ADDR
16403: GO 16365
16405: POP
16406: POP
// result := tmp ;
16407: LD_ADDR_VAR 0 6
16411: PUSH
16412: LD_VAR 0 9
16416: ST_TO_ADDR
// end ; end ;
16417: LD_VAR 0 6
16421: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16422: LD_INT 0
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16430: LD_ADDR_VAR 0 5
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: ST_TO_ADDR
// if not x or not y then
16452: LD_VAR 0 2
16456: NOT
16457: IFTRUE 16466
16459: PUSH
16460: LD_VAR 0 3
16464: NOT
16465: OR
16466: IFFALSE 16470
// exit ;
16468: GO 18126
// if not range then
16470: LD_VAR 0 4
16474: NOT
16475: IFFALSE 16485
// range := 10 ;
16477: LD_ADDR_VAR 0 4
16481: PUSH
16482: LD_INT 10
16484: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16485: LD_ADDR_VAR 0 8
16489: PUSH
16490: LD_INT 81
16492: PUSH
16493: LD_VAR 0 1
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 92
16504: PUSH
16505: LD_VAR 0 2
16509: PUSH
16510: LD_VAR 0 3
16514: PUSH
16515: LD_VAR 0 4
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 3
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 3
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: ST_TO_ADDR
// if not tmp then
16553: LD_VAR 0 8
16557: NOT
16558: IFFALSE 16562
// exit ;
16560: GO 18126
// for i in tmp do
16562: LD_ADDR_VAR 0 6
16566: PUSH
16567: LD_VAR 0 8
16571: PUSH
16572: FOR_IN
16573: IFFALSE 18101
// begin points := [ 0 , 0 , 0 ] ;
16575: LD_ADDR_VAR 0 9
16579: PUSH
16580: LD_INT 0
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: LD_INT 0
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: ST_TO_ADDR
// bpoints := 1 ;
16594: LD_ADDR_VAR 0 10
16598: PUSH
16599: LD_INT 1
16601: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16602: LD_VAR 0 6
16606: PPUSH
16607: CALL_OW 247
16611: PUSH
16612: LD_INT 1
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 17202
16620: POP
// begin if GetClass ( i ) = 1 then
16621: LD_VAR 0 6
16625: PPUSH
16626: CALL_OW 257
16630: PUSH
16631: LD_INT 1
16633: EQUAL
16634: IFFALSE 16655
// points := [ 10 , 5 , 3 ] ;
16636: LD_ADDR_VAR 0 9
16640: PUSH
16641: LD_INT 10
16643: PUSH
16644: LD_INT 5
16646: PUSH
16647: LD_INT 3
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: LIST
16654: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16655: LD_VAR 0 6
16659: PPUSH
16660: CALL_OW 257
16664: PUSH
16665: LD_INT 2
16667: PUSH
16668: LD_INT 3
16670: PUSH
16671: LD_INT 4
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: IN
16679: IFFALSE 16700
// points := [ 3 , 2 , 1 ] ;
16681: LD_ADDR_VAR 0 9
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: LIST
16699: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16700: LD_VAR 0 6
16704: PPUSH
16705: CALL_OW 257
16709: PUSH
16710: LD_INT 5
16712: EQUAL
16713: IFFALSE 16734
// points := [ 130 , 5 , 2 ] ;
16715: LD_ADDR_VAR 0 9
16719: PUSH
16720: LD_INT 130
16722: PUSH
16723: LD_INT 5
16725: PUSH
16726: LD_INT 2
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16734: LD_VAR 0 6
16738: PPUSH
16739: CALL_OW 257
16743: PUSH
16744: LD_INT 8
16746: EQUAL
16747: IFFALSE 16768
// points := [ 35 , 35 , 30 ] ;
16749: LD_ADDR_VAR 0 9
16753: PUSH
16754: LD_INT 35
16756: PUSH
16757: LD_INT 35
16759: PUSH
16760: LD_INT 30
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: LIST
16767: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16768: LD_VAR 0 6
16772: PPUSH
16773: CALL_OW 257
16777: PUSH
16778: LD_INT 9
16780: EQUAL
16781: IFFALSE 16802
// points := [ 20 , 55 , 40 ] ;
16783: LD_ADDR_VAR 0 9
16787: PUSH
16788: LD_INT 20
16790: PUSH
16791: LD_INT 55
16793: PUSH
16794: LD_INT 40
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16802: LD_VAR 0 6
16806: PPUSH
16807: CALL_OW 257
16811: PUSH
16812: LD_INT 12
16814: PUSH
16815: LD_INT 16
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: IN
16822: IFFALSE 16843
// points := [ 5 , 3 , 2 ] ;
16824: LD_ADDR_VAR 0 9
16828: PUSH
16829: LD_INT 5
16831: PUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 2
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16843: LD_VAR 0 6
16847: PPUSH
16848: CALL_OW 257
16852: PUSH
16853: LD_INT 17
16855: EQUAL
16856: IFFALSE 16877
// points := [ 100 , 50 , 75 ] ;
16858: LD_ADDR_VAR 0 9
16862: PUSH
16863: LD_INT 100
16865: PUSH
16866: LD_INT 50
16868: PUSH
16869: LD_INT 75
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16877: LD_VAR 0 6
16881: PPUSH
16882: CALL_OW 257
16886: PUSH
16887: LD_INT 15
16889: EQUAL
16890: IFFALSE 16911
// points := [ 10 , 5 , 3 ] ;
16892: LD_ADDR_VAR 0 9
16896: PUSH
16897: LD_INT 10
16899: PUSH
16900: LD_INT 5
16902: PUSH
16903: LD_INT 3
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16911: LD_VAR 0 6
16915: PPUSH
16916: CALL_OW 257
16920: PUSH
16921: LD_INT 14
16923: EQUAL
16924: IFFALSE 16945
// points := [ 10 , 0 , 0 ] ;
16926: LD_ADDR_VAR 0 9
16930: PUSH
16931: LD_INT 10
16933: PUSH
16934: LD_INT 0
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16945: LD_VAR 0 6
16949: PPUSH
16950: CALL_OW 257
16954: PUSH
16955: LD_INT 11
16957: EQUAL
16958: IFFALSE 16979
// points := [ 30 , 10 , 5 ] ;
16960: LD_ADDR_VAR 0 9
16964: PUSH
16965: LD_INT 30
16967: PUSH
16968: LD_INT 10
16970: PUSH
16971: LD_INT 5
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_INT 5
16986: PPUSH
16987: CALL_OW 321
16991: PUSH
16992: LD_INT 2
16994: EQUAL
16995: IFFALSE 17012
// bpoints := bpoints * 1.8 ;
16997: LD_ADDR_VAR 0 10
17001: PUSH
17002: LD_VAR 0 10
17006: PUSH
17007: LD_REAL  1.80000000000000E+0000
17010: MUL
17011: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17012: LD_VAR 0 6
17016: PPUSH
17017: CALL_OW 257
17021: PUSH
17022: LD_INT 1
17024: PUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: LD_INT 4
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: IN
17040: IFFALSE 17060
17042: PUSH
17043: LD_VAR 0 1
17047: PPUSH
17048: LD_INT 51
17050: PPUSH
17051: CALL_OW 321
17055: PUSH
17056: LD_INT 2
17058: EQUAL
17059: AND
17060: IFFALSE 17077
// bpoints := bpoints * 1.2 ;
17062: LD_ADDR_VAR 0 10
17066: PUSH
17067: LD_VAR 0 10
17071: PUSH
17072: LD_REAL  1.20000000000000E+0000
17075: MUL
17076: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17077: LD_VAR 0 6
17081: PPUSH
17082: CALL_OW 257
17086: PUSH
17087: LD_INT 5
17089: PUSH
17090: LD_INT 7
17092: PUSH
17093: LD_INT 9
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: IN
17101: IFFALSE 17121
17103: PUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: LD_INT 52
17111: PPUSH
17112: CALL_OW 321
17116: PUSH
17117: LD_INT 2
17119: EQUAL
17120: AND
17121: IFFALSE 17138
// bpoints := bpoints * 1.5 ;
17123: LD_ADDR_VAR 0 10
17127: PUSH
17128: LD_VAR 0 10
17132: PUSH
17133: LD_REAL  1.50000000000000E+0000
17136: MUL
17137: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17138: LD_VAR 0 1
17142: PPUSH
17143: LD_INT 66
17145: PPUSH
17146: CALL_OW 321
17150: PUSH
17151: LD_INT 2
17153: EQUAL
17154: IFFALSE 17171
// bpoints := bpoints * 1.1 ;
17156: LD_ADDR_VAR 0 10
17160: PUSH
17161: LD_VAR 0 10
17165: PUSH
17166: LD_REAL  1.10000000000000E+0000
17169: MUL
17170: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17171: LD_ADDR_VAR 0 10
17175: PUSH
17176: LD_VAR 0 10
17180: PUSH
17181: LD_VAR 0 6
17185: PPUSH
17186: LD_INT 1
17188: PPUSH
17189: CALL_OW 259
17193: PUSH
17194: LD_REAL  1.15000000000000E+0000
17197: MUL
17198: MUL
17199: ST_TO_ADDR
// end ; unit_vehicle :
17200: GO 18030
17202: LD_INT 2
17204: DOUBLE
17205: EQUAL
17206: IFTRUE 17210
17208: GO 18018
17210: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17211: LD_VAR 0 6
17215: PPUSH
17216: CALL_OW 264
17220: PUSH
17221: LD_INT 2
17223: PUSH
17224: LD_INT 42
17226: PUSH
17227: LD_INT 24
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: IN
17235: IFFALSE 17256
// points := [ 25 , 5 , 3 ] ;
17237: LD_ADDR_VAR 0 9
17241: PUSH
17242: LD_INT 25
17244: PUSH
17245: LD_INT 5
17247: PUSH
17248: LD_INT 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17256: LD_VAR 0 6
17260: PPUSH
17261: CALL_OW 264
17265: PUSH
17266: LD_INT 4
17268: PUSH
17269: LD_INT 43
17271: PUSH
17272: LD_INT 25
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: IN
17280: IFFALSE 17301
// points := [ 40 , 15 , 5 ] ;
17282: LD_ADDR_VAR 0 9
17286: PUSH
17287: LD_INT 40
17289: PUSH
17290: LD_INT 15
17292: PUSH
17293: LD_INT 5
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: LIST
17300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17301: LD_VAR 0 6
17305: PPUSH
17306: CALL_OW 264
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 23
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: IN
17321: IFFALSE 17342
// points := [ 7 , 25 , 8 ] ;
17323: LD_ADDR_VAR 0 9
17327: PUSH
17328: LD_INT 7
17330: PUSH
17331: LD_INT 25
17333: PUSH
17334: LD_INT 8
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17342: LD_VAR 0 6
17346: PPUSH
17347: CALL_OW 264
17351: PUSH
17352: LD_INT 5
17354: PUSH
17355: LD_INT 27
17357: PUSH
17358: LD_INT 44
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: IN
17366: IFFALSE 17387
// points := [ 14 , 50 , 16 ] ;
17368: LD_ADDR_VAR 0 9
17372: PUSH
17373: LD_INT 14
17375: PUSH
17376: LD_INT 50
17378: PUSH
17379: LD_INT 16
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17387: LD_VAR 0 6
17391: PPUSH
17392: CALL_OW 264
17396: PUSH
17397: LD_INT 6
17399: PUSH
17400: LD_INT 46
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: IN
17407: IFFALSE 17428
// points := [ 32 , 120 , 70 ] ;
17409: LD_ADDR_VAR 0 9
17413: PUSH
17414: LD_INT 32
17416: PUSH
17417: LD_INT 120
17419: PUSH
17420: LD_INT 70
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17428: LD_VAR 0 6
17432: PPUSH
17433: CALL_OW 264
17437: PUSH
17438: LD_INT 7
17440: PUSH
17441: LD_INT 28
17443: PUSH
17444: LD_INT 45
17446: PUSH
17447: LD_INT 92
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: IN
17456: IFFALSE 17477
// points := [ 35 , 20 , 45 ] ;
17458: LD_ADDR_VAR 0 9
17462: PUSH
17463: LD_INT 35
17465: PUSH
17466: LD_INT 20
17468: PUSH
17469: LD_INT 45
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17477: LD_VAR 0 6
17481: PPUSH
17482: CALL_OW 264
17486: PUSH
17487: LD_INT 47
17489: PUSH
17490: EMPTY
17491: LIST
17492: IN
17493: IFFALSE 17514
// points := [ 67 , 45 , 75 ] ;
17495: LD_ADDR_VAR 0 9
17499: PUSH
17500: LD_INT 67
17502: PUSH
17503: LD_INT 45
17505: PUSH
17506: LD_INT 75
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17514: LD_VAR 0 6
17518: PPUSH
17519: CALL_OW 264
17523: PUSH
17524: LD_INT 26
17526: PUSH
17527: EMPTY
17528: LIST
17529: IN
17530: IFFALSE 17551
// points := [ 120 , 30 , 80 ] ;
17532: LD_ADDR_VAR 0 9
17536: PUSH
17537: LD_INT 120
17539: PUSH
17540: LD_INT 30
17542: PUSH
17543: LD_INT 80
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17551: LD_VAR 0 6
17555: PPUSH
17556: CALL_OW 264
17560: PUSH
17561: LD_INT 22
17563: PUSH
17564: EMPTY
17565: LIST
17566: IN
17567: IFFALSE 17588
// points := [ 40 , 1 , 1 ] ;
17569: LD_ADDR_VAR 0 9
17573: PUSH
17574: LD_INT 40
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: LIST
17587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17588: LD_VAR 0 6
17592: PPUSH
17593: CALL_OW 264
17597: PUSH
17598: LD_INT 29
17600: PUSH
17601: EMPTY
17602: LIST
17603: IN
17604: IFFALSE 17625
// points := [ 70 , 200 , 400 ] ;
17606: LD_ADDR_VAR 0 9
17610: PUSH
17611: LD_INT 70
17613: PUSH
17614: LD_INT 200
17616: PUSH
17617: LD_INT 400
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17625: LD_VAR 0 6
17629: PPUSH
17630: CALL_OW 264
17634: PUSH
17635: LD_INT 14
17637: PUSH
17638: LD_INT 53
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: IN
17645: IFFALSE 17666
// points := [ 40 , 10 , 20 ] ;
17647: LD_ADDR_VAR 0 9
17651: PUSH
17652: LD_INT 40
17654: PUSH
17655: LD_INT 10
17657: PUSH
17658: LD_INT 20
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17666: LD_VAR 0 6
17670: PPUSH
17671: CALL_OW 264
17675: PUSH
17676: LD_INT 9
17678: PUSH
17679: EMPTY
17680: LIST
17681: IN
17682: IFFALSE 17703
// points := [ 5 , 70 , 20 ] ;
17684: LD_ADDR_VAR 0 9
17688: PUSH
17689: LD_INT 5
17691: PUSH
17692: LD_INT 70
17694: PUSH
17695: LD_INT 20
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17703: LD_VAR 0 6
17707: PPUSH
17708: CALL_OW 264
17712: PUSH
17713: LD_INT 10
17715: PUSH
17716: EMPTY
17717: LIST
17718: IN
17719: IFFALSE 17740
// points := [ 35 , 110 , 70 ] ;
17721: LD_ADDR_VAR 0 9
17725: PUSH
17726: LD_INT 35
17728: PUSH
17729: LD_INT 110
17731: PUSH
17732: LD_INT 70
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17740: LD_VAR 0 6
17744: PPUSH
17745: CALL_OW 265
17749: PUSH
17750: LD_INT 25
17752: EQUAL
17753: IFFALSE 17774
// points := [ 80 , 65 , 100 ] ;
17755: LD_ADDR_VAR 0 9
17759: PUSH
17760: LD_INT 80
17762: PUSH
17763: LD_INT 65
17765: PUSH
17766: LD_INT 100
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17774: LD_VAR 0 6
17778: PPUSH
17779: CALL_OW 263
17783: PUSH
17784: LD_INT 1
17786: EQUAL
17787: IFFALSE 17822
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17789: LD_ADDR_VAR 0 10
17793: PUSH
17794: LD_VAR 0 10
17798: PUSH
17799: LD_VAR 0 6
17803: PPUSH
17804: CALL_OW 311
17808: PPUSH
17809: LD_INT 3
17811: PPUSH
17812: CALL_OW 259
17816: PUSH
17817: LD_INT 4
17819: MUL
17820: MUL
17821: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17822: LD_VAR 0 6
17826: PPUSH
17827: CALL_OW 263
17831: PUSH
17832: LD_INT 2
17834: EQUAL
17835: IFFALSE 17886
// begin j := IsControledBy ( i ) ;
17837: LD_ADDR_VAR 0 7
17841: PUSH
17842: LD_VAR 0 6
17846: PPUSH
17847: CALL_OW 312
17851: ST_TO_ADDR
// if j then
17852: LD_VAR 0 7
17856: IFFALSE 17886
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17858: LD_ADDR_VAR 0 10
17862: PUSH
17863: LD_VAR 0 10
17867: PUSH
17868: LD_VAR 0 7
17872: PPUSH
17873: LD_INT 3
17875: PPUSH
17876: CALL_OW 259
17880: PUSH
17881: LD_INT 3
17883: MUL
17884: MUL
17885: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17886: LD_VAR 0 6
17890: PPUSH
17891: CALL_OW 264
17895: PUSH
17896: LD_INT 5
17898: PUSH
17899: LD_INT 6
17901: PUSH
17902: LD_INT 46
17904: PUSH
17905: LD_INT 44
17907: PUSH
17908: LD_INT 47
17910: PUSH
17911: LD_INT 45
17913: PUSH
17914: LD_INT 28
17916: PUSH
17917: LD_INT 7
17919: PUSH
17920: LD_INT 27
17922: PUSH
17923: LD_INT 29
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: IN
17938: IFFALSE 17958
17940: PUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: LD_INT 52
17948: PPUSH
17949: CALL_OW 321
17953: PUSH
17954: LD_INT 2
17956: EQUAL
17957: AND
17958: IFFALSE 17975
// bpoints := bpoints * 1.2 ;
17960: LD_ADDR_VAR 0 10
17964: PUSH
17965: LD_VAR 0 10
17969: PUSH
17970: LD_REAL  1.20000000000000E+0000
17973: MUL
17974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17975: LD_VAR 0 6
17979: PPUSH
17980: CALL_OW 264
17984: PUSH
17985: LD_INT 6
17987: PUSH
17988: LD_INT 46
17990: PUSH
17991: LD_INT 47
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: LIST
17998: IN
17999: IFFALSE 18016
// bpoints := bpoints * 1.2 ;
18001: LD_ADDR_VAR 0 10
18005: PUSH
18006: LD_VAR 0 10
18010: PUSH
18011: LD_REAL  1.20000000000000E+0000
18014: MUL
18015: ST_TO_ADDR
// end ; unit_building :
18016: GO 18030
18018: LD_INT 3
18020: DOUBLE
18021: EQUAL
18022: IFTRUE 18026
18024: GO 18029
18026: POP
// ; end ;
18027: GO 18030
18029: POP
// for j = 1 to 3 do
18030: LD_ADDR_VAR 0 7
18034: PUSH
18035: DOUBLE
18036: LD_INT 1
18038: DEC
18039: ST_TO_ADDR
18040: LD_INT 3
18042: PUSH
18043: FOR_TO
18044: IFFALSE 18097
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18046: LD_ADDR_VAR 0 5
18050: PUSH
18051: LD_VAR 0 5
18055: PPUSH
18056: LD_VAR 0 7
18060: PPUSH
18061: LD_VAR 0 5
18065: PUSH
18066: LD_VAR 0 7
18070: ARRAY
18071: PUSH
18072: LD_VAR 0 9
18076: PUSH
18077: LD_VAR 0 7
18081: ARRAY
18082: PUSH
18083: LD_VAR 0 10
18087: MUL
18088: PLUS
18089: PPUSH
18090: CALL_OW 1
18094: ST_TO_ADDR
18095: GO 18043
18097: POP
18098: POP
// end ;
18099: GO 16572
18101: POP
18102: POP
// result := Replace ( result , 4 , tmp ) ;
18103: LD_ADDR_VAR 0 5
18107: PUSH
18108: LD_VAR 0 5
18112: PPUSH
18113: LD_INT 4
18115: PPUSH
18116: LD_VAR 0 8
18120: PPUSH
18121: CALL_OW 1
18125: ST_TO_ADDR
// end ;
18126: LD_VAR 0 5
18130: RET
// export function DangerAtRange ( unit , range ) ; begin
18131: LD_INT 0
18133: PPUSH
// if not unit then
18134: LD_VAR 0 1
18138: NOT
18139: IFFALSE 18143
// exit ;
18141: GO 18188
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18143: LD_ADDR_VAR 0 3
18147: PUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 255
18157: PPUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 250
18167: PPUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 251
18177: PPUSH
18178: LD_VAR 0 2
18182: PPUSH
18183: CALL 16422 0 4
18187: ST_TO_ADDR
// end ;
18188: LD_VAR 0 3
18192: RET
// export function DangerInArea ( side , area ) ; begin
18193: LD_INT 0
18195: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18196: LD_ADDR_VAR 0 3
18200: PUSH
18201: LD_VAR 0 2
18205: PPUSH
18206: LD_INT 81
18208: PUSH
18209: LD_VAR 0 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 70
18222: ST_TO_ADDR
// end ;
18223: LD_VAR 0 3
18227: RET
// export function IsExtension ( b ) ; begin
18228: LD_INT 0
18230: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18231: LD_ADDR_VAR 0 2
18235: PUSH
18236: LD_VAR 0 1
18240: PUSH
18241: LD_INT 23
18243: PUSH
18244: LD_INT 20
18246: PUSH
18247: LD_INT 22
18249: PUSH
18250: LD_INT 17
18252: PUSH
18253: LD_INT 24
18255: PUSH
18256: LD_INT 21
18258: PUSH
18259: LD_INT 19
18261: PUSH
18262: LD_INT 16
18264: PUSH
18265: LD_INT 25
18267: PUSH
18268: LD_INT 18
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: IN
18283: ST_TO_ADDR
// end ;
18284: LD_VAR 0 2
18288: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18289: LD_INT 0
18291: PPUSH
18292: PPUSH
18293: PPUSH
// result := [ ] ;
18294: LD_ADDR_VAR 0 4
18298: PUSH
18299: EMPTY
18300: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18301: LD_ADDR_VAR 0 5
18305: PUSH
18306: LD_VAR 0 2
18310: PPUSH
18311: LD_INT 21
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PPUSH
18321: CALL_OW 70
18325: ST_TO_ADDR
// if not tmp then
18326: LD_VAR 0 5
18330: NOT
18331: IFFALSE 18335
// exit ;
18333: GO 18399
// if checkLink then
18335: LD_VAR 0 3
18339: IFFALSE 18389
// begin for i in tmp do
18341: LD_ADDR_VAR 0 6
18345: PUSH
18346: LD_VAR 0 5
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18387
// if GetBase ( i ) <> base then
18354: LD_VAR 0 6
18358: PPUSH
18359: CALL_OW 274
18363: PUSH
18364: LD_VAR 0 1
18368: NONEQUAL
18369: IFFALSE 18385
// ComLinkToBase ( base , i ) ;
18371: LD_VAR 0 1
18375: PPUSH
18376: LD_VAR 0 6
18380: PPUSH
18381: CALL_OW 169
18385: GO 18351
18387: POP
18388: POP
// end ; result := tmp ;
18389: LD_ADDR_VAR 0 4
18393: PUSH
18394: LD_VAR 0 5
18398: ST_TO_ADDR
// end ;
18399: LD_VAR 0 4
18403: RET
// export function ComComplete ( units , b ) ; var i ; begin
18404: LD_INT 0
18406: PPUSH
18407: PPUSH
// if not units then
18408: LD_VAR 0 1
18412: NOT
18413: IFFALSE 18417
// exit ;
18415: GO 18507
// for i in units do
18417: LD_ADDR_VAR 0 4
18421: PUSH
18422: LD_VAR 0 1
18426: PUSH
18427: FOR_IN
18428: IFFALSE 18505
// if BuildingStatus ( b ) = bs_build then
18430: LD_VAR 0 2
18434: PPUSH
18435: CALL_OW 461
18439: PUSH
18440: LD_INT 1
18442: EQUAL
18443: IFFALSE 18503
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18445: LD_VAR 0 4
18449: PPUSH
18450: LD_STRING h
18452: PUSH
18453: LD_VAR 0 2
18457: PPUSH
18458: CALL_OW 250
18462: PUSH
18463: LD_VAR 0 2
18467: PPUSH
18468: CALL_OW 251
18472: PUSH
18473: LD_VAR 0 2
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: PPUSH
18499: CALL_OW 446
18503: GO 18427
18505: POP
18506: POP
// end ;
18507: LD_VAR 0 3
18511: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18512: LD_INT 0
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18520: LD_VAR 0 1
18524: NOT
18525: IFTRUE 18542
18527: PUSH
18528: LD_VAR 0 1
18532: PPUSH
18533: CALL_OW 263
18537: PUSH
18538: LD_INT 2
18540: NONEQUAL
18541: OR
18542: IFFALSE 18546
// exit ;
18544: GO 18862
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18546: LD_ADDR_VAR 0 6
18550: PUSH
18551: LD_INT 22
18553: PUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 255
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: PUSH
18571: LD_INT 30
18573: PUSH
18574: LD_INT 36
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 34
18583: PUSH
18584: LD_INT 31
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PPUSH
18600: CALL_OW 69
18604: ST_TO_ADDR
// if not tmp then
18605: LD_VAR 0 6
18609: NOT
18610: IFFALSE 18614
// exit ;
18612: GO 18862
// result := [ ] ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: EMPTY
18620: ST_TO_ADDR
// for i in tmp do
18621: LD_ADDR_VAR 0 3
18625: PUSH
18626: LD_VAR 0 6
18630: PUSH
18631: FOR_IN
18632: IFFALSE 18703
// begin t := UnitsInside ( i ) ;
18634: LD_ADDR_VAR 0 4
18638: PUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: CALL_OW 313
18648: ST_TO_ADDR
// if t then
18649: LD_VAR 0 4
18653: IFFALSE 18701
// for j in t do
18655: LD_ADDR_VAR 0 7
18659: PUSH
18660: LD_VAR 0 4
18664: PUSH
18665: FOR_IN
18666: IFFALSE 18699
// result := Replace ( result , result + 1 , j ) ;
18668: LD_ADDR_VAR 0 2
18672: PUSH
18673: LD_VAR 0 2
18677: PPUSH
18678: LD_VAR 0 2
18682: PUSH
18683: LD_INT 1
18685: PLUS
18686: PPUSH
18687: LD_VAR 0 7
18691: PPUSH
18692: CALL_OW 1
18696: ST_TO_ADDR
18697: GO 18665
18699: POP
18700: POP
// end ;
18701: GO 18631
18703: POP
18704: POP
// if not result then
18705: LD_VAR 0 2
18709: NOT
18710: IFFALSE 18714
// exit ;
18712: GO 18862
// mech := result [ 1 ] ;
18714: LD_ADDR_VAR 0 5
18718: PUSH
18719: LD_VAR 0 2
18723: PUSH
18724: LD_INT 1
18726: ARRAY
18727: ST_TO_ADDR
// if result > 1 then
18728: LD_VAR 0 2
18732: PUSH
18733: LD_INT 1
18735: GREATER
18736: IFFALSE 18848
// begin for i = 2 to result do
18738: LD_ADDR_VAR 0 3
18742: PUSH
18743: DOUBLE
18744: LD_INT 2
18746: DEC
18747: ST_TO_ADDR
18748: LD_VAR 0 2
18752: PUSH
18753: FOR_TO
18754: IFFALSE 18846
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18756: LD_ADDR_VAR 0 4
18760: PUSH
18761: LD_VAR 0 2
18765: PUSH
18766: LD_VAR 0 3
18770: ARRAY
18771: PPUSH
18772: LD_INT 3
18774: PPUSH
18775: CALL_OW 259
18779: PUSH
18780: LD_VAR 0 2
18784: PUSH
18785: LD_VAR 0 3
18789: ARRAY
18790: PPUSH
18791: CALL_OW 432
18795: MINUS
18796: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18797: LD_VAR 0 4
18801: PUSH
18802: LD_VAR 0 5
18806: PPUSH
18807: LD_INT 3
18809: PPUSH
18810: CALL_OW 259
18814: PUSH
18815: LD_VAR 0 5
18819: PPUSH
18820: CALL_OW 432
18824: MINUS
18825: GREATEREQUAL
18826: IFFALSE 18844
// mech := result [ i ] ;
18828: LD_ADDR_VAR 0 5
18832: PUSH
18833: LD_VAR 0 2
18837: PUSH
18838: LD_VAR 0 3
18842: ARRAY
18843: ST_TO_ADDR
// end ;
18844: GO 18753
18846: POP
18847: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18848: LD_VAR 0 1
18852: PPUSH
18853: LD_VAR 0 5
18857: PPUSH
18858: CALL_OW 135
// end ;
18862: LD_VAR 0 2
18866: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
18871: PPUSH
18872: PPUSH
18873: PPUSH
18874: PPUSH
18875: PPUSH
18876: PPUSH
18877: PPUSH
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
// result := [ ] ;
18882: LD_ADDR_VAR 0 7
18886: PUSH
18887: EMPTY
18888: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 266
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: IN
18909: NOT
18910: IFFALSE 18914
// exit ;
18912: GO 20554
// if name then
18914: LD_VAR 0 3
18918: IFFALSE 18934
// SetBName ( base_dep , name ) ;
18920: LD_VAR 0 1
18924: PPUSH
18925: LD_VAR 0 3
18929: PPUSH
18930: CALL_OW 500
// base := GetBase ( base_dep ) ;
18934: LD_ADDR_VAR 0 15
18938: PUSH
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL_OW 274
18948: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18949: LD_ADDR_VAR 0 16
18953: PUSH
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 255
18963: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18964: LD_ADDR_VAR 0 17
18968: PUSH
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 248
18978: ST_TO_ADDR
// if sources then
18979: LD_VAR 0 5
18983: IFFALSE 19030
// for i = 1 to 3 do
18985: LD_ADDR_VAR 0 8
18989: PUSH
18990: DOUBLE
18991: LD_INT 1
18993: DEC
18994: ST_TO_ADDR
18995: LD_INT 3
18997: PUSH
18998: FOR_TO
18999: IFFALSE 19028
// AddResourceType ( base , i , sources [ i ] ) ;
19001: LD_VAR 0 15
19005: PPUSH
19006: LD_VAR 0 8
19010: PPUSH
19011: LD_VAR 0 5
19015: PUSH
19016: LD_VAR 0 8
19020: ARRAY
19021: PPUSH
19022: CALL_OW 276
19026: GO 18998
19028: POP
19029: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19030: LD_ADDR_VAR 0 18
19034: PUSH
19035: LD_VAR 0 15
19039: PPUSH
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 1
19047: PPUSH
19048: CALL 18289 0 3
19052: ST_TO_ADDR
// InitHc ;
19053: CALL_OW 19
// InitUc ;
19057: CALL_OW 18
// uc_side := side ;
19061: LD_ADDR_OWVAR 20
19065: PUSH
19066: LD_VAR 0 16
19070: ST_TO_ADDR
// uc_nation := nation ;
19071: LD_ADDR_OWVAR 21
19075: PUSH
19076: LD_VAR 0 17
19080: ST_TO_ADDR
// if buildings then
19081: LD_VAR 0 18
19085: IFFALSE 20413
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19087: LD_ADDR_VAR 0 19
19091: PUSH
19092: LD_VAR 0 18
19096: PPUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 30
19102: PUSH
19103: LD_INT 29
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 30
19112: PUSH
19113: LD_INT 30
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 72
19129: ST_TO_ADDR
// if tmp then
19130: LD_VAR 0 19
19134: IFFALSE 19182
// for i in tmp do
19136: LD_ADDR_VAR 0 8
19140: PUSH
19141: LD_VAR 0 19
19145: PUSH
19146: FOR_IN
19147: IFFALSE 19180
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19149: LD_VAR 0 8
19153: PPUSH
19154: CALL_OW 250
19158: PPUSH
19159: LD_VAR 0 8
19163: PPUSH
19164: CALL_OW 251
19168: PPUSH
19169: LD_VAR 0 16
19173: PPUSH
19174: CALL_OW 441
19178: GO 19146
19180: POP
19181: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19182: LD_VAR 0 18
19186: PPUSH
19187: LD_INT 2
19189: PUSH
19190: LD_INT 30
19192: PUSH
19193: LD_INT 32
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 30
19202: PUSH
19203: LD_INT 33
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: PPUSH
19215: CALL_OW 72
19219: IFFALSE 19307
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19221: LD_ADDR_VAR 0 8
19225: PUSH
19226: LD_VAR 0 18
19230: PPUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 30
19236: PUSH
19237: LD_INT 32
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 30
19246: PUSH
19247: LD_INT 33
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 72
19263: PUSH
19264: FOR_IN
19265: IFFALSE 19305
// begin if not GetBWeapon ( i ) then
19267: LD_VAR 0 8
19271: PPUSH
19272: CALL_OW 269
19276: NOT
19277: IFFALSE 19303
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19279: LD_VAR 0 8
19283: PPUSH
19284: LD_VAR 0 8
19288: PPUSH
19289: LD_VAR 0 2
19293: PPUSH
19294: CALL 20559 0 2
19298: PPUSH
19299: CALL_OW 431
// end ;
19303: GO 19264
19305: POP
19306: POP
// end ; for i = 1 to personel do
19307: LD_ADDR_VAR 0 8
19311: PUSH
19312: DOUBLE
19313: LD_INT 1
19315: DEC
19316: ST_TO_ADDR
19317: LD_VAR 0 6
19321: PUSH
19322: FOR_TO
19323: IFFALSE 20393
// begin if i > 4 then
19325: LD_VAR 0 8
19329: PUSH
19330: LD_INT 4
19332: GREATER
19333: IFFALSE 19337
// break ;
19335: GO 20393
// case i of 1 :
19337: LD_VAR 0 8
19341: PUSH
19342: LD_INT 1
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19430
19350: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19351: LD_ADDR_VAR 0 12
19355: PUSH
19356: LD_VAR 0 18
19360: PPUSH
19361: LD_INT 22
19363: PUSH
19364: LD_VAR 0 16
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 58
19375: PUSH
19376: EMPTY
19377: LIST
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: LD_INT 30
19384: PUSH
19385: LD_INT 32
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 30
19394: PUSH
19395: LD_INT 4
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 30
19404: PUSH
19405: LD_INT 5
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: PPUSH
19423: CALL_OW 72
19427: ST_TO_ADDR
19428: GO 19652
19430: LD_INT 2
19432: DOUBLE
19433: EQUAL
19434: IFTRUE 19438
19436: GO 19500
19438: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19439: LD_ADDR_VAR 0 12
19443: PUSH
19444: LD_VAR 0 18
19448: PPUSH
19449: LD_INT 22
19451: PUSH
19452: LD_VAR 0 16
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 30
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 30
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PPUSH
19493: CALL_OW 72
19497: ST_TO_ADDR
19498: GO 19652
19500: LD_INT 3
19502: DOUBLE
19503: EQUAL
19504: IFTRUE 19508
19506: GO 19570
19508: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19509: LD_ADDR_VAR 0 12
19513: PUSH
19514: LD_VAR 0 18
19518: PPUSH
19519: LD_INT 22
19521: PUSH
19522: LD_VAR 0 16
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: LD_INT 30
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 30
19546: PUSH
19547: LD_INT 3
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PPUSH
19563: CALL_OW 72
19567: ST_TO_ADDR
19568: GO 19652
19570: LD_INT 4
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19651
19578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19579: LD_ADDR_VAR 0 12
19583: PUSH
19584: LD_VAR 0 18
19588: PPUSH
19589: LD_INT 22
19591: PUSH
19592: LD_VAR 0 16
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 30
19606: PUSH
19607: LD_INT 6
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 30
19616: PUSH
19617: LD_INT 7
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 30
19626: PUSH
19627: LD_INT 8
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PPUSH
19644: CALL_OW 72
19648: ST_TO_ADDR
19649: GO 19652
19651: POP
// if i = 1 then
19652: LD_VAR 0 8
19656: PUSH
19657: LD_INT 1
19659: EQUAL
19660: IFFALSE 19771
// begin tmp := [ ] ;
19662: LD_ADDR_VAR 0 19
19666: PUSH
19667: EMPTY
19668: ST_TO_ADDR
// for j in f do
19669: LD_ADDR_VAR 0 9
19673: PUSH
19674: LD_VAR 0 12
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19753
// if GetBType ( j ) = b_bunker then
19682: LD_VAR 0 9
19686: PPUSH
19687: CALL_OW 266
19691: PUSH
19692: LD_INT 32
19694: EQUAL
19695: IFFALSE 19722
// tmp := Insert ( tmp , 1 , j ) else
19697: LD_ADDR_VAR 0 19
19701: PUSH
19702: LD_VAR 0 19
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_VAR 0 9
19714: PPUSH
19715: CALL_OW 2
19719: ST_TO_ADDR
19720: GO 19751
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19722: LD_ADDR_VAR 0 19
19726: PUSH
19727: LD_VAR 0 19
19731: PPUSH
19732: LD_VAR 0 19
19736: PUSH
19737: LD_INT 1
19739: PLUS
19740: PPUSH
19741: LD_VAR 0 9
19745: PPUSH
19746: CALL_OW 2
19750: ST_TO_ADDR
19751: GO 19679
19753: POP
19754: POP
// if tmp then
19755: LD_VAR 0 19
19759: IFFALSE 19771
// f := tmp ;
19761: LD_ADDR_VAR 0 12
19765: PUSH
19766: LD_VAR 0 19
19770: ST_TO_ADDR
// end ; x := personel [ i ] ;
19771: LD_ADDR_VAR 0 13
19775: PUSH
19776: LD_VAR 0 6
19780: PUSH
19781: LD_VAR 0 8
19785: ARRAY
19786: ST_TO_ADDR
// if x = - 1 then
19787: LD_VAR 0 13
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: EQUAL
19796: IFFALSE 20007
// begin for j in f do
19798: LD_ADDR_VAR 0 9
19802: PUSH
19803: LD_VAR 0 12
19807: PUSH
19808: FOR_IN
19809: IFFALSE 20003
// repeat InitHc ;
19811: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19815: LD_VAR 0 9
19819: PPUSH
19820: CALL_OW 266
19824: PUSH
19825: LD_INT 5
19827: EQUAL
19828: IFFALSE 19898
// begin if UnitsInside ( j ) < 3 then
19830: LD_VAR 0 9
19834: PPUSH
19835: CALL_OW 313
19839: PUSH
19840: LD_INT 3
19842: LESS
19843: IFFALSE 19879
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19845: LD_INT 0
19847: PPUSH
19848: LD_INT 5
19850: PUSH
19851: LD_INT 8
19853: PUSH
19854: LD_INT 9
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: LD_VAR 0 17
19866: ARRAY
19867: PPUSH
19868: LD_VAR 0 4
19872: PPUSH
19873: CALL_OW 380
19877: GO 19896
// PrepareHuman ( false , i , skill ) ;
19879: LD_INT 0
19881: PPUSH
19882: LD_VAR 0 8
19886: PPUSH
19887: LD_VAR 0 4
19891: PPUSH
19892: CALL_OW 380
// end else
19896: GO 19915
// PrepareHuman ( false , i , skill ) ;
19898: LD_INT 0
19900: PPUSH
19901: LD_VAR 0 8
19905: PPUSH
19906: LD_VAR 0 4
19910: PPUSH
19911: CALL_OW 380
// un := CreateHuman ;
19915: LD_ADDR_VAR 0 14
19919: PUSH
19920: CALL_OW 44
19924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19925: LD_ADDR_VAR 0 7
19929: PUSH
19930: LD_VAR 0 7
19934: PPUSH
19935: LD_INT 1
19937: PPUSH
19938: LD_VAR 0 14
19942: PPUSH
19943: CALL_OW 2
19947: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19948: LD_VAR 0 14
19952: PPUSH
19953: LD_VAR 0 9
19957: PPUSH
19958: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19962: LD_VAR 0 9
19966: PPUSH
19967: CALL_OW 313
19971: PUSH
19972: LD_INT 6
19974: EQUAL
19975: IFTRUE 19999
19977: PUSH
19978: LD_VAR 0 9
19982: PPUSH
19983: CALL_OW 266
19987: PUSH
19988: LD_INT 32
19990: PUSH
19991: LD_INT 31
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: IN
19998: OR
19999: IFFALSE 19811
20001: GO 19808
20003: POP
20004: POP
// end else
20005: GO 20391
// for j = 1 to x do
20007: LD_ADDR_VAR 0 9
20011: PUSH
20012: DOUBLE
20013: LD_INT 1
20015: DEC
20016: ST_TO_ADDR
20017: LD_VAR 0 13
20021: PUSH
20022: FOR_TO
20023: IFFALSE 20389
// begin InitHc ;
20025: CALL_OW 19
// if not f then
20029: LD_VAR 0 12
20033: NOT
20034: IFFALSE 20123
// begin PrepareHuman ( false , i , skill ) ;
20036: LD_INT 0
20038: PPUSH
20039: LD_VAR 0 8
20043: PPUSH
20044: LD_VAR 0 4
20048: PPUSH
20049: CALL_OW 380
// un := CreateHuman ;
20053: LD_ADDR_VAR 0 14
20057: PUSH
20058: CALL_OW 44
20062: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20063: LD_ADDR_VAR 0 7
20067: PUSH
20068: LD_VAR 0 7
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: LD_VAR 0 14
20080: PPUSH
20081: CALL_OW 2
20085: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20086: LD_VAR 0 14
20090: PPUSH
20091: LD_VAR 0 1
20095: PPUSH
20096: CALL_OW 250
20100: PPUSH
20101: LD_VAR 0 1
20105: PPUSH
20106: CALL_OW 251
20110: PPUSH
20111: LD_INT 10
20113: PPUSH
20114: LD_INT 0
20116: PPUSH
20117: CALL_OW 50
// continue ;
20121: GO 20022
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20123: LD_VAR 0 12
20127: PUSH
20128: LD_INT 1
20130: ARRAY
20131: PPUSH
20132: CALL_OW 313
20136: IFFALSE 20164
20138: PUSH
20139: LD_VAR 0 12
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: CALL_OW 266
20152: PUSH
20153: LD_INT 32
20155: PUSH
20156: LD_INT 31
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: IN
20163: AND
20164: IFTRUE 20185
20166: PUSH
20167: LD_VAR 0 12
20171: PUSH
20172: LD_INT 1
20174: ARRAY
20175: PPUSH
20176: CALL_OW 313
20180: PUSH
20181: LD_INT 6
20183: EQUAL
20184: OR
20185: IFFALSE 20205
// f := Delete ( f , 1 ) ;
20187: LD_ADDR_VAR 0 12
20191: PUSH
20192: LD_VAR 0 12
20196: PPUSH
20197: LD_INT 1
20199: PPUSH
20200: CALL_OW 3
20204: ST_TO_ADDR
// if not f then
20205: LD_VAR 0 12
20209: NOT
20210: IFFALSE 20228
// begin x := x + 2 ;
20212: LD_ADDR_VAR 0 13
20216: PUSH
20217: LD_VAR 0 13
20221: PUSH
20222: LD_INT 2
20224: PLUS
20225: ST_TO_ADDR
// continue ;
20226: GO 20022
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20228: LD_VAR 0 12
20232: PUSH
20233: LD_INT 1
20235: ARRAY
20236: PPUSH
20237: CALL_OW 266
20241: PUSH
20242: LD_INT 5
20244: EQUAL
20245: IFFALSE 20319
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20247: LD_VAR 0 12
20251: PUSH
20252: LD_INT 1
20254: ARRAY
20255: PPUSH
20256: CALL_OW 313
20260: PUSH
20261: LD_INT 3
20263: LESS
20264: IFFALSE 20300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20266: LD_INT 0
20268: PPUSH
20269: LD_INT 5
20271: PUSH
20272: LD_INT 8
20274: PUSH
20275: LD_INT 9
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: LD_VAR 0 17
20287: ARRAY
20288: PPUSH
20289: LD_VAR 0 4
20293: PPUSH
20294: CALL_OW 380
20298: GO 20317
// PrepareHuman ( false , i , skill ) ;
20300: LD_INT 0
20302: PPUSH
20303: LD_VAR 0 8
20307: PPUSH
20308: LD_VAR 0 4
20312: PPUSH
20313: CALL_OW 380
// end else
20317: GO 20336
// PrepareHuman ( false , i , skill ) ;
20319: LD_INT 0
20321: PPUSH
20322: LD_VAR 0 8
20326: PPUSH
20327: LD_VAR 0 4
20331: PPUSH
20332: CALL_OW 380
// un := CreateHuman ;
20336: LD_ADDR_VAR 0 14
20340: PUSH
20341: CALL_OW 44
20345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20346: LD_ADDR_VAR 0 7
20350: PUSH
20351: LD_VAR 0 7
20355: PPUSH
20356: LD_INT 1
20358: PPUSH
20359: LD_VAR 0 14
20363: PPUSH
20364: CALL_OW 2
20368: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20369: LD_VAR 0 14
20373: PPUSH
20374: LD_VAR 0 12
20378: PUSH
20379: LD_INT 1
20381: ARRAY
20382: PPUSH
20383: CALL_OW 52
// end ;
20387: GO 20022
20389: POP
20390: POP
// end ;
20391: GO 19322
20393: POP
20394: POP
// result := result ^ buildings ;
20395: LD_ADDR_VAR 0 7
20399: PUSH
20400: LD_VAR 0 7
20404: PUSH
20405: LD_VAR 0 18
20409: ADD
20410: ST_TO_ADDR
// end else
20411: GO 20554
// begin for i = 1 to personel do
20413: LD_ADDR_VAR 0 8
20417: PUSH
20418: DOUBLE
20419: LD_INT 1
20421: DEC
20422: ST_TO_ADDR
20423: LD_VAR 0 6
20427: PUSH
20428: FOR_TO
20429: IFFALSE 20552
// begin if i > 4 then
20431: LD_VAR 0 8
20435: PUSH
20436: LD_INT 4
20438: GREATER
20439: IFFALSE 20443
// break ;
20441: GO 20552
// x := personel [ i ] ;
20443: LD_ADDR_VAR 0 13
20447: PUSH
20448: LD_VAR 0 6
20452: PUSH
20453: LD_VAR 0 8
20457: ARRAY
20458: ST_TO_ADDR
// if x = - 1 then
20459: LD_VAR 0 13
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: EQUAL
20468: IFFALSE 20472
// continue ;
20470: GO 20428
// PrepareHuman ( false , i , skill ) ;
20472: LD_INT 0
20474: PPUSH
20475: LD_VAR 0 8
20479: PPUSH
20480: LD_VAR 0 4
20484: PPUSH
20485: CALL_OW 380
// un := CreateHuman ;
20489: LD_ADDR_VAR 0 14
20493: PUSH
20494: CALL_OW 44
20498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20499: LD_VAR 0 14
20503: PPUSH
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 250
20513: PPUSH
20514: LD_VAR 0 1
20518: PPUSH
20519: CALL_OW 251
20523: PPUSH
20524: LD_INT 10
20526: PPUSH
20527: LD_INT 0
20529: PPUSH
20530: CALL_OW 50
// result := result ^ un ;
20534: LD_ADDR_VAR 0 7
20538: PUSH
20539: LD_VAR 0 7
20543: PUSH
20544: LD_VAR 0 14
20548: ADD
20549: ST_TO_ADDR
// end ;
20550: GO 20428
20552: POP
20553: POP
// end ; end ;
20554: LD_VAR 0 7
20558: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20559: LD_INT 0
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
20565: PPUSH
20566: PPUSH
20567: PPUSH
20568: PPUSH
20569: PPUSH
20570: PPUSH
20571: PPUSH
20572: PPUSH
20573: PPUSH
20574: PPUSH
20575: PPUSH
20576: PPUSH
// result := false ;
20577: LD_ADDR_VAR 0 3
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20585: LD_VAR 0 1
20589: NOT
20590: IFTRUE 20615
20592: PUSH
20593: LD_VAR 0 1
20597: PPUSH
20598: CALL_OW 266
20602: PUSH
20603: LD_INT 32
20605: PUSH
20606: LD_INT 33
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: IN
20613: NOT
20614: OR
20615: IFFALSE 20619
// exit ;
20617: GO 21754
// nat := GetNation ( tower ) ;
20619: LD_ADDR_VAR 0 12
20623: PUSH
20624: LD_VAR 0 1
20628: PPUSH
20629: CALL_OW 248
20633: ST_TO_ADDR
// side := GetSide ( tower ) ;
20634: LD_ADDR_VAR 0 16
20638: PUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 255
20648: ST_TO_ADDR
// x := GetX ( tower ) ;
20649: LD_ADDR_VAR 0 10
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 250
20663: ST_TO_ADDR
// y := GetY ( tower ) ;
20664: LD_ADDR_VAR 0 11
20668: PUSH
20669: LD_VAR 0 1
20673: PPUSH
20674: CALL_OW 251
20678: ST_TO_ADDR
// if not x or not y then
20679: LD_VAR 0 10
20683: NOT
20684: IFTRUE 20693
20686: PUSH
20687: LD_VAR 0 11
20691: NOT
20692: OR
20693: IFFALSE 20697
// exit ;
20695: GO 21754
// weapon := 0 ;
20697: LD_ADDR_VAR 0 18
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// fac_list := [ ] ;
20705: LD_ADDR_VAR 0 17
20709: PUSH
20710: EMPTY
20711: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20712: LD_ADDR_VAR 0 6
20716: PUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 274
20726: PPUSH
20727: LD_VAR 0 2
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL 18289 0 3
20739: PPUSH
20740: LD_INT 30
20742: PUSH
20743: LD_INT 3
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PPUSH
20750: CALL_OW 72
20754: ST_TO_ADDR
// if not factories then
20755: LD_VAR 0 6
20759: NOT
20760: IFFALSE 20764
// exit ;
20762: GO 21754
// for i in factories do
20764: LD_ADDR_VAR 0 8
20768: PUSH
20769: LD_VAR 0 6
20773: PUSH
20774: FOR_IN
20775: IFFALSE 20800
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20777: LD_ADDR_VAR 0 17
20781: PUSH
20782: LD_VAR 0 17
20786: PUSH
20787: LD_VAR 0 8
20791: PPUSH
20792: CALL_OW 478
20796: UNION
20797: ST_TO_ADDR
20798: GO 20774
20800: POP
20801: POP
// if not fac_list then
20802: LD_VAR 0 17
20806: NOT
20807: IFFALSE 20811
// exit ;
20809: GO 21754
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20811: LD_ADDR_VAR 0 5
20815: PUSH
20816: LD_INT 4
20818: PUSH
20819: LD_INT 5
20821: PUSH
20822: LD_INT 9
20824: PUSH
20825: LD_INT 10
20827: PUSH
20828: LD_INT 6
20830: PUSH
20831: LD_INT 7
20833: PUSH
20834: LD_INT 11
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 27
20848: PUSH
20849: LD_INT 28
20851: PUSH
20852: LD_INT 26
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 43
20866: PUSH
20867: LD_INT 44
20869: PUSH
20870: LD_INT 46
20872: PUSH
20873: LD_INT 45
20875: PUSH
20876: LD_INT 47
20878: PUSH
20879: LD_INT 49
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: PUSH
20895: LD_VAR 0 12
20899: ARRAY
20900: ST_TO_ADDR
// list := list isect fac_list ;
20901: LD_ADDR_VAR 0 5
20905: PUSH
20906: LD_VAR 0 5
20910: PUSH
20911: LD_VAR 0 17
20915: ISECT
20916: ST_TO_ADDR
// if not list then
20917: LD_VAR 0 5
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21754
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20926: LD_VAR 0 12
20930: PUSH
20931: LD_INT 3
20933: EQUAL
20934: IFFALSE 20946
20936: PUSH
20937: LD_INT 49
20939: PUSH
20940: LD_VAR 0 5
20944: IN
20945: AND
20946: IFFALSE 20966
20948: PUSH
20949: LD_INT 31
20951: PPUSH
20952: LD_VAR 0 16
20956: PPUSH
20957: CALL_OW 321
20961: PUSH
20962: LD_INT 2
20964: EQUAL
20965: AND
20966: IFFALSE 21026
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20968: LD_INT 22
20970: PUSH
20971: LD_VAR 0 16
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 35
20982: PUSH
20983: LD_INT 49
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 91
20992: PUSH
20993: LD_VAR 0 1
20997: PUSH
20998: LD_INT 10
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: PPUSH
21011: CALL_OW 69
21015: NOT
21016: IFFALSE 21026
// weapon := ru_time_lapser ;
21018: LD_ADDR_VAR 0 18
21022: PUSH
21023: LD_INT 49
21025: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21026: LD_VAR 0 12
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: IN
21041: IFFALSE 21065
21043: PUSH
21044: LD_INT 11
21046: PUSH
21047: LD_VAR 0 5
21051: IN
21052: IFTRUE 21064
21054: PUSH
21055: LD_INT 30
21057: PUSH
21058: LD_VAR 0 5
21062: IN
21063: OR
21064: AND
21065: IFFALSE 21085
21067: PUSH
21068: LD_INT 6
21070: PPUSH
21071: LD_VAR 0 16
21075: PPUSH
21076: CALL_OW 321
21080: PUSH
21081: LD_INT 2
21083: EQUAL
21084: AND
21085: IFFALSE 21252
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21087: LD_INT 22
21089: PUSH
21090: LD_VAR 0 16
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 2
21101: PUSH
21102: LD_INT 35
21104: PUSH
21105: LD_INT 11
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 35
21114: PUSH
21115: LD_INT 30
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 91
21129: PUSH
21130: LD_VAR 0 1
21134: PUSH
21135: LD_INT 18
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: PPUSH
21148: CALL_OW 69
21152: NOT
21153: IFFALSE 21229
21155: PUSH
21156: LD_INT 22
21158: PUSH
21159: LD_VAR 0 16
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: LD_INT 30
21173: PUSH
21174: LD_INT 32
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 30
21183: PUSH
21184: LD_INT 33
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 91
21198: PUSH
21199: LD_VAR 0 1
21203: PUSH
21204: LD_INT 12
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: PUSH
21217: EMPTY
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: PUSH
21225: LD_INT 2
21227: GREATER
21228: AND
21229: IFFALSE 21252
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21231: LD_ADDR_VAR 0 18
21235: PUSH
21236: LD_INT 11
21238: PUSH
21239: LD_INT 30
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_VAR 0 12
21250: ARRAY
21251: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21252: LD_VAR 0 18
21256: NOT
21257: IFFALSE 21277
21259: PUSH
21260: LD_INT 40
21262: PPUSH
21263: LD_VAR 0 16
21267: PPUSH
21268: CALL_OW 321
21272: PUSH
21273: LD_INT 2
21275: EQUAL
21276: AND
21277: IFFALSE 21313
21279: PUSH
21280: LD_INT 7
21282: PUSH
21283: LD_VAR 0 5
21287: IN
21288: IFTRUE 21300
21290: PUSH
21291: LD_INT 28
21293: PUSH
21294: LD_VAR 0 5
21298: IN
21299: OR
21300: IFTRUE 21312
21302: PUSH
21303: LD_INT 45
21305: PUSH
21306: LD_VAR 0 5
21310: IN
21311: OR
21312: AND
21313: IFFALSE 21567
// begin hex := GetHexInfo ( x , y ) ;
21315: LD_ADDR_VAR 0 4
21319: PUSH
21320: LD_VAR 0 10
21324: PPUSH
21325: LD_VAR 0 11
21329: PPUSH
21330: CALL_OW 546
21334: ST_TO_ADDR
// if hex [ 1 ] then
21335: LD_VAR 0 4
21339: PUSH
21340: LD_INT 1
21342: ARRAY
21343: IFFALSE 21347
// exit ;
21345: GO 21754
// height := hex [ 2 ] ;
21347: LD_ADDR_VAR 0 15
21351: PUSH
21352: LD_VAR 0 4
21356: PUSH
21357: LD_INT 2
21359: ARRAY
21360: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21361: LD_ADDR_VAR 0 14
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: LD_INT 3
21374: PUSH
21375: LD_INT 5
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: ST_TO_ADDR
// for i in tmp do
21384: LD_ADDR_VAR 0 8
21388: PUSH
21389: LD_VAR 0 14
21393: PUSH
21394: FOR_IN
21395: IFFALSE 21565
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21397: LD_ADDR_VAR 0 9
21401: PUSH
21402: LD_VAR 0 10
21406: PPUSH
21407: LD_VAR 0 8
21411: PPUSH
21412: LD_INT 5
21414: PPUSH
21415: CALL_OW 272
21419: PUSH
21420: LD_VAR 0 11
21424: PPUSH
21425: LD_VAR 0 8
21429: PPUSH
21430: LD_INT 5
21432: PPUSH
21433: CALL_OW 273
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21442: LD_VAR 0 9
21446: PUSH
21447: LD_INT 1
21449: ARRAY
21450: PPUSH
21451: LD_VAR 0 9
21455: PUSH
21456: LD_INT 2
21458: ARRAY
21459: PPUSH
21460: CALL_OW 488
21464: IFFALSE 21563
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21466: LD_ADDR_VAR 0 4
21470: PUSH
21471: LD_VAR 0 9
21475: PUSH
21476: LD_INT 1
21478: ARRAY
21479: PPUSH
21480: LD_VAR 0 9
21484: PUSH
21485: LD_INT 2
21487: ARRAY
21488: PPUSH
21489: CALL_OW 546
21493: ST_TO_ADDR
// if hex [ 1 ] then
21494: LD_VAR 0 4
21498: PUSH
21499: LD_INT 1
21501: ARRAY
21502: IFFALSE 21506
// continue ;
21504: GO 21394
// h := hex [ 2 ] ;
21506: LD_ADDR_VAR 0 13
21510: PUSH
21511: LD_VAR 0 4
21515: PUSH
21516: LD_INT 2
21518: ARRAY
21519: ST_TO_ADDR
// if h + 7 < height then
21520: LD_VAR 0 13
21524: PUSH
21525: LD_INT 7
21527: PLUS
21528: PUSH
21529: LD_VAR 0 15
21533: LESS
21534: IFFALSE 21563
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21536: LD_ADDR_VAR 0 18
21540: PUSH
21541: LD_INT 7
21543: PUSH
21544: LD_INT 28
21546: PUSH
21547: LD_INT 45
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: PUSH
21555: LD_VAR 0 12
21559: ARRAY
21560: ST_TO_ADDR
// break ;
21561: GO 21565
// end ; end ; end ;
21563: GO 21394
21565: POP
21566: POP
// end ; if not weapon then
21567: LD_VAR 0 18
21571: NOT
21572: IFFALSE 21632
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21574: LD_ADDR_VAR 0 5
21578: PUSH
21579: LD_VAR 0 5
21583: PUSH
21584: LD_INT 11
21586: PUSH
21587: LD_INT 30
21589: PUSH
21590: LD_INT 49
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: DIFF
21598: ST_TO_ADDR
// if not list then
21599: LD_VAR 0 5
21603: NOT
21604: IFFALSE 21608
// exit ;
21606: GO 21754
// weapon := list [ rand ( 1 , list ) ] ;
21608: LD_ADDR_VAR 0 18
21612: PUSH
21613: LD_VAR 0 5
21617: PUSH
21618: LD_INT 1
21620: PPUSH
21621: LD_VAR 0 5
21625: PPUSH
21626: CALL_OW 12
21630: ARRAY
21631: ST_TO_ADDR
// end ; if weapon then
21632: LD_VAR 0 18
21636: IFFALSE 21754
// begin tmp := CostOfWeapon ( weapon ) ;
21638: LD_ADDR_VAR 0 14
21642: PUSH
21643: LD_VAR 0 18
21647: PPUSH
21648: CALL_OW 451
21652: ST_TO_ADDR
// j := GetBase ( tower ) ;
21653: LD_ADDR_VAR 0 9
21657: PUSH
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 274
21667: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21668: LD_VAR 0 9
21672: PPUSH
21673: LD_INT 1
21675: PPUSH
21676: CALL_OW 275
21680: PUSH
21681: LD_VAR 0 14
21685: PUSH
21686: LD_INT 1
21688: ARRAY
21689: GREATEREQUAL
21690: IFFALSE 21716
21692: PUSH
21693: LD_VAR 0 9
21697: PPUSH
21698: LD_INT 2
21700: PPUSH
21701: CALL_OW 275
21705: PUSH
21706: LD_VAR 0 14
21710: PUSH
21711: LD_INT 2
21713: ARRAY
21714: GREATEREQUAL
21715: AND
21716: IFFALSE 21742
21718: PUSH
21719: LD_VAR 0 9
21723: PPUSH
21724: LD_INT 3
21726: PPUSH
21727: CALL_OW 275
21731: PUSH
21732: LD_VAR 0 14
21736: PUSH
21737: LD_INT 3
21739: ARRAY
21740: GREATEREQUAL
21741: AND
21742: IFFALSE 21754
// result := weapon ;
21744: LD_ADDR_VAR 0 3
21748: PUSH
21749: LD_VAR 0 18
21753: ST_TO_ADDR
// end ; end ;
21754: LD_VAR 0 3
21758: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
// result := true ;
21763: LD_ADDR_VAR 0 3
21767: PUSH
21768: LD_INT 1
21770: ST_TO_ADDR
// if array1 = array2 then
21771: LD_VAR 0 1
21775: PUSH
21776: LD_VAR 0 2
21780: EQUAL
21781: IFFALSE 21841
// begin for i = 1 to array1 do
21783: LD_ADDR_VAR 0 4
21787: PUSH
21788: DOUBLE
21789: LD_INT 1
21791: DEC
21792: ST_TO_ADDR
21793: LD_VAR 0 1
21797: PUSH
21798: FOR_TO
21799: IFFALSE 21837
// if array1 [ i ] <> array2 [ i ] then
21801: LD_VAR 0 1
21805: PUSH
21806: LD_VAR 0 4
21810: ARRAY
21811: PUSH
21812: LD_VAR 0 2
21816: PUSH
21817: LD_VAR 0 4
21821: ARRAY
21822: NONEQUAL
21823: IFFALSE 21835
// begin result := false ;
21825: LD_ADDR_VAR 0 3
21829: PUSH
21830: LD_INT 0
21832: ST_TO_ADDR
// break ;
21833: GO 21837
// end ;
21835: GO 21798
21837: POP
21838: POP
// end else
21839: GO 21849
// result := false ;
21841: LD_ADDR_VAR 0 3
21845: PUSH
21846: LD_INT 0
21848: ST_TO_ADDR
// end ;
21849: LD_VAR 0 3
21853: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21854: LD_INT 0
21856: PPUSH
21857: PPUSH
// if not array1 or not array2 then
21858: LD_VAR 0 1
21862: NOT
21863: IFTRUE 21872
21865: PUSH
21866: LD_VAR 0 2
21870: NOT
21871: OR
21872: IFFALSE 21876
// exit ;
21874: GO 21940
// result := true ;
21876: LD_ADDR_VAR 0 3
21880: PUSH
21881: LD_INT 1
21883: ST_TO_ADDR
// for i = 1 to array1 do
21884: LD_ADDR_VAR 0 4
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_VAR 0 1
21898: PUSH
21899: FOR_TO
21900: IFFALSE 21938
// if array1 [ i ] <> array2 [ i ] then
21902: LD_VAR 0 1
21906: PUSH
21907: LD_VAR 0 4
21911: ARRAY
21912: PUSH
21913: LD_VAR 0 2
21917: PUSH
21918: LD_VAR 0 4
21922: ARRAY
21923: NONEQUAL
21924: IFFALSE 21936
// begin result := false ;
21926: LD_ADDR_VAR 0 3
21930: PUSH
21931: LD_INT 0
21933: ST_TO_ADDR
// break ;
21934: GO 21938
// end ;
21936: GO 21899
21938: POP
21939: POP
// end ;
21940: LD_VAR 0 3
21944: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21945: LD_INT 0
21947: PPUSH
21948: PPUSH
21949: PPUSH
// pom := GetBase ( fac ) ;
21950: LD_ADDR_VAR 0 5
21954: PUSH
21955: LD_VAR 0 1
21959: PPUSH
21960: CALL_OW 274
21964: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21965: LD_ADDR_VAR 0 4
21969: PUSH
21970: LD_VAR 0 2
21974: PUSH
21975: LD_INT 1
21977: ARRAY
21978: PPUSH
21979: LD_VAR 0 2
21983: PUSH
21984: LD_INT 2
21986: ARRAY
21987: PPUSH
21988: LD_VAR 0 2
21992: PUSH
21993: LD_INT 3
21995: ARRAY
21996: PPUSH
21997: LD_VAR 0 2
22001: PUSH
22002: LD_INT 4
22004: ARRAY
22005: PPUSH
22006: CALL_OW 449
22010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: LD_VAR 0 5
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 275
22028: PUSH
22029: LD_VAR 0 4
22033: PUSH
22034: LD_INT 1
22036: ARRAY
22037: GREATEREQUAL
22038: IFFALSE 22064
22040: PUSH
22041: LD_VAR 0 5
22045: PPUSH
22046: LD_INT 2
22048: PPUSH
22049: CALL_OW 275
22053: PUSH
22054: LD_VAR 0 4
22058: PUSH
22059: LD_INT 2
22061: ARRAY
22062: GREATEREQUAL
22063: AND
22064: IFFALSE 22090
22066: PUSH
22067: LD_VAR 0 5
22071: PPUSH
22072: LD_INT 3
22074: PPUSH
22075: CALL_OW 275
22079: PUSH
22080: LD_VAR 0 4
22084: PUSH
22085: LD_INT 3
22087: ARRAY
22088: GREATEREQUAL
22089: AND
22090: ST_TO_ADDR
// end ;
22091: LD_VAR 0 3
22095: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22096: LD_INT 0
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
// pom := GetBase ( building ) ;
22102: LD_ADDR_VAR 0 3
22106: PUSH
22107: LD_VAR 0 1
22111: PPUSH
22112: CALL_OW 274
22116: ST_TO_ADDR
// if not pom then
22117: LD_VAR 0 3
22121: NOT
22122: IFFALSE 22126
// exit ;
22124: GO 22300
// btype := GetBType ( building ) ;
22126: LD_ADDR_VAR 0 5
22130: PUSH
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL_OW 266
22140: ST_TO_ADDR
// if btype = b_armoury then
22141: LD_VAR 0 5
22145: PUSH
22146: LD_INT 4
22148: EQUAL
22149: IFFALSE 22159
// btype := b_barracks ;
22151: LD_ADDR_VAR 0 5
22155: PUSH
22156: LD_INT 5
22158: ST_TO_ADDR
// if btype = b_depot then
22159: LD_VAR 0 5
22163: PUSH
22164: LD_INT 0
22166: EQUAL
22167: IFFALSE 22177
// btype := b_warehouse ;
22169: LD_ADDR_VAR 0 5
22173: PUSH
22174: LD_INT 1
22176: ST_TO_ADDR
// if btype = b_workshop then
22177: LD_VAR 0 5
22181: PUSH
22182: LD_INT 2
22184: EQUAL
22185: IFFALSE 22195
// btype := b_factory ;
22187: LD_ADDR_VAR 0 5
22191: PUSH
22192: LD_INT 3
22194: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22195: LD_ADDR_VAR 0 4
22199: PUSH
22200: LD_VAR 0 5
22204: PPUSH
22205: LD_VAR 0 1
22209: PPUSH
22210: CALL_OW 248
22214: PPUSH
22215: CALL_OW 450
22219: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22220: LD_ADDR_VAR 0 2
22224: PUSH
22225: LD_VAR 0 3
22229: PPUSH
22230: LD_INT 1
22232: PPUSH
22233: CALL_OW 275
22237: PUSH
22238: LD_VAR 0 4
22242: PUSH
22243: LD_INT 1
22245: ARRAY
22246: GREATEREQUAL
22247: IFFALSE 22273
22249: PUSH
22250: LD_VAR 0 3
22254: PPUSH
22255: LD_INT 2
22257: PPUSH
22258: CALL_OW 275
22262: PUSH
22263: LD_VAR 0 4
22267: PUSH
22268: LD_INT 2
22270: ARRAY
22271: GREATEREQUAL
22272: AND
22273: IFFALSE 22299
22275: PUSH
22276: LD_VAR 0 3
22280: PPUSH
22281: LD_INT 3
22283: PPUSH
22284: CALL_OW 275
22288: PUSH
22289: LD_VAR 0 4
22293: PUSH
22294: LD_INT 3
22296: ARRAY
22297: GREATEREQUAL
22298: AND
22299: ST_TO_ADDR
// end ;
22300: LD_VAR 0 2
22304: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22305: LD_INT 0
22307: PPUSH
22308: PPUSH
22309: PPUSH
// pom := GetBase ( building ) ;
22310: LD_ADDR_VAR 0 4
22314: PUSH
22315: LD_VAR 0 1
22319: PPUSH
22320: CALL_OW 274
22324: ST_TO_ADDR
// if not pom then
22325: LD_VAR 0 4
22329: NOT
22330: IFFALSE 22334
// exit ;
22332: GO 22439
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22334: LD_ADDR_VAR 0 5
22338: PUSH
22339: LD_VAR 0 2
22343: PPUSH
22344: LD_VAR 0 1
22348: PPUSH
22349: CALL_OW 248
22353: PPUSH
22354: CALL_OW 450
22358: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22359: LD_ADDR_VAR 0 3
22363: PUSH
22364: LD_VAR 0 4
22368: PPUSH
22369: LD_INT 1
22371: PPUSH
22372: CALL_OW 275
22376: PUSH
22377: LD_VAR 0 5
22381: PUSH
22382: LD_INT 1
22384: ARRAY
22385: GREATEREQUAL
22386: IFFALSE 22412
22388: PUSH
22389: LD_VAR 0 4
22393: PPUSH
22394: LD_INT 2
22396: PPUSH
22397: CALL_OW 275
22401: PUSH
22402: LD_VAR 0 5
22406: PUSH
22407: LD_INT 2
22409: ARRAY
22410: GREATEREQUAL
22411: AND
22412: IFFALSE 22438
22414: PUSH
22415: LD_VAR 0 4
22419: PPUSH
22420: LD_INT 3
22422: PPUSH
22423: CALL_OW 275
22427: PUSH
22428: LD_VAR 0 5
22432: PUSH
22433: LD_INT 3
22435: ARRAY
22436: GREATEREQUAL
22437: AND
22438: ST_TO_ADDR
// end ;
22439: LD_VAR 0 3
22443: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
// result := false ;
22457: LD_ADDR_VAR 0 8
22461: PUSH
22462: LD_INT 0
22464: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22465: LD_VAR 0 5
22469: NOT
22470: IFTRUE 22479
22472: PUSH
22473: LD_VAR 0 1
22477: NOT
22478: OR
22479: IFTRUE 22488
22481: PUSH
22482: LD_VAR 0 2
22486: NOT
22487: OR
22488: IFTRUE 22497
22490: PUSH
22491: LD_VAR 0 3
22495: NOT
22496: OR
22497: IFFALSE 22501
// exit ;
22499: GO 23327
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22501: LD_ADDR_VAR 0 14
22505: PUSH
22506: LD_VAR 0 1
22510: PPUSH
22511: LD_VAR 0 2
22515: PPUSH
22516: LD_VAR 0 3
22520: PPUSH
22521: LD_VAR 0 4
22525: PPUSH
22526: LD_VAR 0 5
22530: PUSH
22531: LD_INT 1
22533: ARRAY
22534: PPUSH
22535: CALL_OW 248
22539: PPUSH
22540: LD_INT 0
22542: PPUSH
22543: CALL 24608 0 6
22547: ST_TO_ADDR
// if not hexes then
22548: LD_VAR 0 14
22552: NOT
22553: IFFALSE 22557
// exit ;
22555: GO 23327
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22557: LD_ADDR_VAR 0 17
22561: PUSH
22562: LD_VAR 0 5
22566: PPUSH
22567: LD_INT 22
22569: PUSH
22570: LD_VAR 0 13
22574: PPUSH
22575: CALL_OW 255
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 30
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 30
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PPUSH
22616: CALL_OW 72
22620: ST_TO_ADDR
// for i = 1 to hexes do
22621: LD_ADDR_VAR 0 9
22625: PUSH
22626: DOUBLE
22627: LD_INT 1
22629: DEC
22630: ST_TO_ADDR
22631: LD_VAR 0 14
22635: PUSH
22636: FOR_TO
22637: IFFALSE 23325
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22639: LD_ADDR_VAR 0 13
22643: PUSH
22644: LD_VAR 0 14
22648: PUSH
22649: LD_VAR 0 9
22653: ARRAY
22654: PUSH
22655: LD_INT 1
22657: ARRAY
22658: PPUSH
22659: LD_VAR 0 14
22663: PUSH
22664: LD_VAR 0 9
22668: ARRAY
22669: PUSH
22670: LD_INT 2
22672: ARRAY
22673: PPUSH
22674: CALL_OW 428
22678: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22679: LD_VAR 0 14
22683: PUSH
22684: LD_VAR 0 9
22688: ARRAY
22689: PUSH
22690: LD_INT 1
22692: ARRAY
22693: PPUSH
22694: LD_VAR 0 14
22698: PUSH
22699: LD_VAR 0 9
22703: ARRAY
22704: PUSH
22705: LD_INT 2
22707: ARRAY
22708: PPUSH
22709: CALL_OW 351
22713: IFTRUE 22752
22715: PUSH
22716: LD_VAR 0 14
22720: PUSH
22721: LD_VAR 0 9
22725: ARRAY
22726: PUSH
22727: LD_INT 1
22729: ARRAY
22730: PPUSH
22731: LD_VAR 0 14
22735: PUSH
22736: LD_VAR 0 9
22740: ARRAY
22741: PUSH
22742: LD_INT 2
22744: ARRAY
22745: PPUSH
22746: CALL_OW 488
22750: NOT
22751: OR
22752: IFTRUE 22769
22754: PUSH
22755: LD_VAR 0 13
22759: PPUSH
22760: CALL_OW 247
22764: PUSH
22765: LD_INT 3
22767: EQUAL
22768: OR
22769: IFFALSE 22775
// exit ;
22771: POP
22772: POP
22773: GO 23327
// if not tmp then
22775: LD_VAR 0 13
22779: NOT
22780: IFFALSE 22784
// continue ;
22782: GO 22636
// result := true ;
22784: LD_ADDR_VAR 0 8
22788: PUSH
22789: LD_INT 1
22791: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22792: LD_VAR 0 6
22796: IFFALSE 22813
22798: PUSH
22799: LD_VAR 0 13
22803: PPUSH
22804: CALL_OW 247
22808: PUSH
22809: LD_INT 2
22811: EQUAL
22812: AND
22813: IFFALSE 22830
22815: PUSH
22816: LD_VAR 0 13
22820: PPUSH
22821: CALL_OW 263
22825: PUSH
22826: LD_INT 1
22828: EQUAL
22829: AND
22830: IFFALSE 22994
// begin if IsDrivenBy ( tmp ) then
22832: LD_VAR 0 13
22836: PPUSH
22837: CALL_OW 311
22841: IFFALSE 22845
// continue ;
22843: GO 22636
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22845: LD_VAR 0 6
22849: PPUSH
22850: LD_INT 3
22852: PUSH
22853: LD_INT 60
22855: PUSH
22856: EMPTY
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 3
22865: PUSH
22866: LD_INT 55
22868: PUSH
22869: EMPTY
22870: LIST
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PPUSH
22880: CALL_OW 72
22884: IFFALSE 22992
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22886: LD_ADDR_VAR 0 18
22890: PUSH
22891: LD_VAR 0 6
22895: PPUSH
22896: LD_INT 3
22898: PUSH
22899: LD_INT 60
22901: PUSH
22902: EMPTY
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 3
22911: PUSH
22912: LD_INT 55
22914: PUSH
22915: EMPTY
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PPUSH
22926: CALL_OW 72
22930: PUSH
22931: LD_INT 1
22933: ARRAY
22934: ST_TO_ADDR
// if IsInUnit ( driver ) then
22935: LD_VAR 0 18
22939: PPUSH
22940: CALL_OW 310
22944: IFFALSE 22955
// ComExit ( driver ) ;
22946: LD_VAR 0 18
22950: PPUSH
22951: CALL 48598 0 1
// AddComEnterUnit ( driver , tmp ) ;
22955: LD_VAR 0 18
22959: PPUSH
22960: LD_VAR 0 13
22964: PPUSH
22965: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22969: LD_VAR 0 18
22973: PPUSH
22974: LD_VAR 0 7
22978: PPUSH
22979: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22983: LD_VAR 0 18
22987: PPUSH
22988: CALL_OW 181
// end ; continue ;
22992: GO 22636
// end ; if not cleaners or not tmp in cleaners then
22994: LD_VAR 0 6
22998: NOT
22999: IFTRUE 23014
23001: PUSH
23002: LD_VAR 0 13
23006: PUSH
23007: LD_VAR 0 6
23011: IN
23012: NOT
23013: OR
23014: IFFALSE 23323
// begin if dep then
23016: LD_VAR 0 17
23020: IFFALSE 23156
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23022: LD_ADDR_VAR 0 16
23026: PUSH
23027: LD_VAR 0 17
23031: PUSH
23032: LD_INT 1
23034: ARRAY
23035: PPUSH
23036: CALL_OW 250
23040: PPUSH
23041: LD_VAR 0 17
23045: PUSH
23046: LD_INT 1
23048: ARRAY
23049: PPUSH
23050: CALL_OW 254
23054: PPUSH
23055: LD_INT 5
23057: PPUSH
23058: CALL_OW 272
23062: PUSH
23063: LD_VAR 0 17
23067: PUSH
23068: LD_INT 1
23070: ARRAY
23071: PPUSH
23072: CALL_OW 251
23076: PPUSH
23077: LD_VAR 0 17
23081: PUSH
23082: LD_INT 1
23084: ARRAY
23085: PPUSH
23086: CALL_OW 254
23090: PPUSH
23091: LD_INT 5
23093: PPUSH
23094: CALL_OW 273
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23103: LD_VAR 0 16
23107: PUSH
23108: LD_INT 1
23110: ARRAY
23111: PPUSH
23112: LD_VAR 0 16
23116: PUSH
23117: LD_INT 2
23119: ARRAY
23120: PPUSH
23121: CALL_OW 488
23125: IFFALSE 23156
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23127: LD_VAR 0 13
23131: PPUSH
23132: LD_VAR 0 16
23136: PUSH
23137: LD_INT 1
23139: ARRAY
23140: PPUSH
23141: LD_VAR 0 16
23145: PUSH
23146: LD_INT 2
23148: ARRAY
23149: PPUSH
23150: CALL_OW 111
// continue ;
23154: GO 22636
// end ; end ; r := GetDir ( tmp ) ;
23156: LD_ADDR_VAR 0 15
23160: PUSH
23161: LD_VAR 0 13
23165: PPUSH
23166: CALL_OW 254
23170: ST_TO_ADDR
// if r = 5 then
23171: LD_VAR 0 15
23175: PUSH
23176: LD_INT 5
23178: EQUAL
23179: IFFALSE 23189
// r := 0 ;
23181: LD_ADDR_VAR 0 15
23185: PUSH
23186: LD_INT 0
23188: ST_TO_ADDR
// for j = r to 5 do
23189: LD_ADDR_VAR 0 10
23193: PUSH
23194: DOUBLE
23195: LD_VAR 0 15
23199: DEC
23200: ST_TO_ADDR
23201: LD_INT 5
23203: PUSH
23204: FOR_TO
23205: IFFALSE 23321
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23207: LD_ADDR_VAR 0 11
23211: PUSH
23212: LD_VAR 0 13
23216: PPUSH
23217: CALL_OW 250
23221: PPUSH
23222: LD_VAR 0 10
23226: PPUSH
23227: LD_INT 2
23229: PPUSH
23230: CALL_OW 272
23234: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23235: LD_ADDR_VAR 0 12
23239: PUSH
23240: LD_VAR 0 13
23244: PPUSH
23245: CALL_OW 251
23249: PPUSH
23250: LD_VAR 0 10
23254: PPUSH
23255: LD_INT 2
23257: PPUSH
23258: CALL_OW 273
23262: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23263: LD_VAR 0 11
23267: PPUSH
23268: LD_VAR 0 12
23272: PPUSH
23273: CALL_OW 488
23277: IFFALSE 23296
23279: PUSH
23280: LD_VAR 0 11
23284: PPUSH
23285: LD_VAR 0 12
23289: PPUSH
23290: CALL_OW 428
23294: NOT
23295: AND
23296: IFFALSE 23319
// begin ComMoveXY ( tmp , _x , _y ) ;
23298: LD_VAR 0 13
23302: PPUSH
23303: LD_VAR 0 11
23307: PPUSH
23308: LD_VAR 0 12
23312: PPUSH
23313: CALL_OW 111
// break ;
23317: GO 23321
// end ; end ;
23319: GO 23204
23321: POP
23322: POP
// end ; end ;
23323: GO 22636
23325: POP
23326: POP
// end ;
23327: LD_VAR 0 8
23331: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23332: LD_INT 0
23334: PPUSH
// result := true ;
23335: LD_ADDR_VAR 0 3
23339: PUSH
23340: LD_INT 1
23342: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23343: LD_VAR 0 2
23347: PUSH
23348: LD_INT 24
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23362
23354: LD_INT 33
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23387
23362: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23363: LD_ADDR_VAR 0 3
23367: PUSH
23368: LD_INT 32
23370: PPUSH
23371: LD_VAR 0 1
23375: PPUSH
23376: CALL_OW 321
23380: PUSH
23381: LD_INT 2
23383: EQUAL
23384: ST_TO_ADDR
23385: GO 23703
23387: LD_INT 20
23389: DOUBLE
23390: EQUAL
23391: IFTRUE 23395
23393: GO 23420
23395: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23396: LD_ADDR_VAR 0 3
23400: PUSH
23401: LD_INT 6
23403: PPUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 321
23413: PUSH
23414: LD_INT 2
23416: EQUAL
23417: ST_TO_ADDR
23418: GO 23703
23420: LD_INT 22
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23434
23426: LD_INT 36
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23459
23434: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_INT 15
23442: PPUSH
23443: LD_VAR 0 1
23447: PPUSH
23448: CALL_OW 321
23452: PUSH
23453: LD_INT 2
23455: EQUAL
23456: ST_TO_ADDR
23457: GO 23703
23459: LD_INT 30
23461: DOUBLE
23462: EQUAL
23463: IFTRUE 23467
23465: GO 23492
23467: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23468: LD_ADDR_VAR 0 3
23472: PUSH
23473: LD_INT 20
23475: PPUSH
23476: LD_VAR 0 1
23480: PPUSH
23481: CALL_OW 321
23485: PUSH
23486: LD_INT 2
23488: EQUAL
23489: ST_TO_ADDR
23490: GO 23703
23492: LD_INT 28
23494: DOUBLE
23495: EQUAL
23496: IFTRUE 23506
23498: LD_INT 21
23500: DOUBLE
23501: EQUAL
23502: IFTRUE 23506
23504: GO 23531
23506: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: LD_INT 21
23514: PPUSH
23515: LD_VAR 0 1
23519: PPUSH
23520: CALL_OW 321
23524: PUSH
23525: LD_INT 2
23527: EQUAL
23528: ST_TO_ADDR
23529: GO 23703
23531: LD_INT 16
23533: DOUBLE
23534: EQUAL
23535: IFTRUE 23539
23537: GO 23564
23539: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23540: LD_ADDR_VAR 0 3
23544: PUSH
23545: LD_INT 84
23547: PPUSH
23548: LD_VAR 0 1
23552: PPUSH
23553: CALL_OW 321
23557: PUSH
23558: LD_INT 2
23560: EQUAL
23561: ST_TO_ADDR
23562: GO 23703
23564: LD_INT 19
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23578
23570: LD_INT 23
23572: DOUBLE
23573: EQUAL
23574: IFTRUE 23578
23576: GO 23603
23578: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23579: LD_ADDR_VAR 0 3
23583: PUSH
23584: LD_INT 83
23586: PPUSH
23587: LD_VAR 0 1
23591: PPUSH
23592: CALL_OW 321
23596: PUSH
23597: LD_INT 2
23599: EQUAL
23600: ST_TO_ADDR
23601: GO 23703
23603: LD_INT 17
23605: DOUBLE
23606: EQUAL
23607: IFTRUE 23611
23609: GO 23636
23611: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23612: LD_ADDR_VAR 0 3
23616: PUSH
23617: LD_INT 39
23619: PPUSH
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 321
23629: PUSH
23630: LD_INT 2
23632: EQUAL
23633: ST_TO_ADDR
23634: GO 23703
23636: LD_INT 18
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23669
23644: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23645: LD_ADDR_VAR 0 3
23649: PUSH
23650: LD_INT 40
23652: PPUSH
23653: LD_VAR 0 1
23657: PPUSH
23658: CALL_OW 321
23662: PUSH
23663: LD_INT 2
23665: EQUAL
23666: ST_TO_ADDR
23667: GO 23703
23669: LD_INT 27
23671: DOUBLE
23672: EQUAL
23673: IFTRUE 23677
23675: GO 23702
23677: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23678: LD_ADDR_VAR 0 3
23682: PUSH
23683: LD_INT 35
23685: PPUSH
23686: LD_VAR 0 1
23690: PPUSH
23691: CALL_OW 321
23695: PUSH
23696: LD_INT 2
23698: EQUAL
23699: ST_TO_ADDR
23700: GO 23703
23702: POP
// end ;
23703: LD_VAR 0 3
23707: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23708: LD_INT 0
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// result := false ;
23721: LD_ADDR_VAR 0 6
23725: PUSH
23726: LD_INT 0
23728: ST_TO_ADDR
// if btype = b_depot then
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 0
23736: EQUAL
23737: IFFALSE 23749
// begin result := true ;
23739: LD_ADDR_VAR 0 6
23743: PUSH
23744: LD_INT 1
23746: ST_TO_ADDR
// exit ;
23747: GO 24603
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23749: LD_VAR 0 1
23753: NOT
23754: IFTRUE 23779
23756: PUSH
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 266
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: IN
23777: NOT
23778: OR
23779: IFTRUE 23788
23781: PUSH
23782: LD_VAR 0 2
23786: NOT
23787: OR
23788: IFTRUE 23824
23790: PUSH
23791: LD_VAR 0 5
23795: PUSH
23796: LD_INT 0
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 3
23807: PUSH
23808: LD_INT 4
23810: PUSH
23811: LD_INT 5
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: IN
23822: NOT
23823: OR
23824: IFTRUE 23843
23826: PUSH
23827: LD_VAR 0 3
23831: PPUSH
23832: LD_VAR 0 4
23836: PPUSH
23837: CALL_OW 488
23841: NOT
23842: OR
23843: IFFALSE 23847
// exit ;
23845: GO 24603
// side := GetSide ( depot ) ;
23847: LD_ADDR_VAR 0 9
23851: PUSH
23852: LD_VAR 0 1
23856: PPUSH
23857: CALL_OW 255
23861: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23862: LD_VAR 0 9
23866: PPUSH
23867: LD_VAR 0 2
23871: PPUSH
23872: CALL 23332 0 2
23876: NOT
23877: IFFALSE 23881
// exit ;
23879: GO 24603
// pom := GetBase ( depot ) ;
23881: LD_ADDR_VAR 0 10
23885: PUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 274
23895: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23896: LD_ADDR_VAR 0 11
23900: PUSH
23901: LD_VAR 0 2
23905: PPUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 248
23915: PPUSH
23916: CALL_OW 450
23920: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23921: LD_VAR 0 10
23925: PPUSH
23926: LD_INT 1
23928: PPUSH
23929: CALL_OW 275
23933: PUSH
23934: LD_VAR 0 11
23938: PUSH
23939: LD_INT 1
23941: ARRAY
23942: GREATEREQUAL
23943: IFFALSE 23969
23945: PUSH
23946: LD_VAR 0 10
23950: PPUSH
23951: LD_INT 2
23953: PPUSH
23954: CALL_OW 275
23958: PUSH
23959: LD_VAR 0 11
23963: PUSH
23964: LD_INT 2
23966: ARRAY
23967: GREATEREQUAL
23968: AND
23969: IFFALSE 23995
23971: PUSH
23972: LD_VAR 0 10
23976: PPUSH
23977: LD_INT 3
23979: PPUSH
23980: CALL_OW 275
23984: PUSH
23985: LD_VAR 0 11
23989: PUSH
23990: LD_INT 3
23992: ARRAY
23993: GREATEREQUAL
23994: AND
23995: NOT
23996: IFFALSE 24000
// exit ;
23998: GO 24603
// if GetBType ( depot ) = b_depot then
24000: LD_VAR 0 1
24004: PPUSH
24005: CALL_OW 266
24009: PUSH
24010: LD_INT 0
24012: EQUAL
24013: IFFALSE 24025
// dist := 28 else
24015: LD_ADDR_VAR 0 14
24019: PUSH
24020: LD_INT 28
24022: ST_TO_ADDR
24023: GO 24033
// dist := 36 ;
24025: LD_ADDR_VAR 0 14
24029: PUSH
24030: LD_INT 36
24032: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24033: LD_VAR 0 1
24037: PPUSH
24038: LD_VAR 0 3
24042: PPUSH
24043: LD_VAR 0 4
24047: PPUSH
24048: CALL_OW 297
24052: PUSH
24053: LD_VAR 0 14
24057: GREATER
24058: IFFALSE 24062
// exit ;
24060: GO 24603
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24062: LD_ADDR_VAR 0 12
24066: PUSH
24067: LD_VAR 0 2
24071: PPUSH
24072: LD_VAR 0 3
24076: PPUSH
24077: LD_VAR 0 4
24081: PPUSH
24082: LD_VAR 0 5
24086: PPUSH
24087: LD_VAR 0 1
24091: PPUSH
24092: CALL_OW 248
24096: PPUSH
24097: LD_INT 0
24099: PPUSH
24100: CALL 24608 0 6
24104: ST_TO_ADDR
// if not hexes then
24105: LD_VAR 0 12
24109: NOT
24110: IFFALSE 24114
// exit ;
24112: GO 24603
// hex := GetHexInfo ( x , y ) ;
24114: LD_ADDR_VAR 0 15
24118: PUSH
24119: LD_VAR 0 3
24123: PPUSH
24124: LD_VAR 0 4
24128: PPUSH
24129: CALL_OW 546
24133: ST_TO_ADDR
// if hex [ 1 ] then
24134: LD_VAR 0 15
24138: PUSH
24139: LD_INT 1
24141: ARRAY
24142: IFFALSE 24146
// exit ;
24144: GO 24603
// height := hex [ 2 ] ;
24146: LD_ADDR_VAR 0 13
24150: PUSH
24151: LD_VAR 0 15
24155: PUSH
24156: LD_INT 2
24158: ARRAY
24159: ST_TO_ADDR
// for i = 1 to hexes do
24160: LD_ADDR_VAR 0 7
24164: PUSH
24165: DOUBLE
24166: LD_INT 1
24168: DEC
24169: ST_TO_ADDR
24170: LD_VAR 0 12
24174: PUSH
24175: FOR_TO
24176: IFFALSE 24520
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24178: LD_VAR 0 12
24182: PUSH
24183: LD_VAR 0 7
24187: ARRAY
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: PPUSH
24193: LD_VAR 0 12
24197: PUSH
24198: LD_VAR 0 7
24202: ARRAY
24203: PUSH
24204: LD_INT 2
24206: ARRAY
24207: PPUSH
24208: CALL_OW 488
24212: NOT
24213: IFTRUE 24255
24215: PUSH
24216: LD_VAR 0 12
24220: PUSH
24221: LD_VAR 0 7
24225: ARRAY
24226: PUSH
24227: LD_INT 1
24229: ARRAY
24230: PPUSH
24231: LD_VAR 0 12
24235: PUSH
24236: LD_VAR 0 7
24240: ARRAY
24241: PUSH
24242: LD_INT 2
24244: ARRAY
24245: PPUSH
24246: CALL_OW 428
24250: PUSH
24251: LD_INT 0
24253: GREATER
24254: OR
24255: IFTRUE 24293
24257: PUSH
24258: LD_VAR 0 12
24262: PUSH
24263: LD_VAR 0 7
24267: ARRAY
24268: PUSH
24269: LD_INT 1
24271: ARRAY
24272: PPUSH
24273: LD_VAR 0 12
24277: PUSH
24278: LD_VAR 0 7
24282: ARRAY
24283: PUSH
24284: LD_INT 2
24286: ARRAY
24287: PPUSH
24288: CALL_OW 351
24292: OR
24293: IFFALSE 24299
// exit ;
24295: POP
24296: POP
24297: GO 24603
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24299: LD_ADDR_VAR 0 8
24303: PUSH
24304: LD_VAR 0 12
24308: PUSH
24309: LD_VAR 0 7
24313: ARRAY
24314: PUSH
24315: LD_INT 1
24317: ARRAY
24318: PPUSH
24319: LD_VAR 0 12
24323: PUSH
24324: LD_VAR 0 7
24328: ARRAY
24329: PUSH
24330: LD_INT 2
24332: ARRAY
24333: PPUSH
24334: CALL_OW 546
24338: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24339: LD_VAR 0 8
24343: PUSH
24344: LD_INT 1
24346: ARRAY
24347: IFTRUE 24369
24349: PUSH
24350: LD_VAR 0 8
24354: PUSH
24355: LD_INT 2
24357: ARRAY
24358: PUSH
24359: LD_VAR 0 13
24363: PUSH
24364: LD_INT 2
24366: PLUS
24367: GREATER
24368: OR
24369: IFTRUE 24391
24371: PUSH
24372: LD_VAR 0 8
24376: PUSH
24377: LD_INT 2
24379: ARRAY
24380: PUSH
24381: LD_VAR 0 13
24385: PUSH
24386: LD_INT 2
24388: MINUS
24389: LESS
24390: OR
24391: IFTRUE 24459
24393: PUSH
24394: LD_VAR 0 8
24398: PUSH
24399: LD_INT 3
24401: ARRAY
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 8
24408: PUSH
24409: LD_INT 9
24411: PUSH
24412: LD_INT 10
24414: PUSH
24415: LD_INT 11
24417: PUSH
24418: LD_INT 12
24420: PUSH
24421: LD_INT 13
24423: PUSH
24424: LD_INT 16
24426: PUSH
24427: LD_INT 17
24429: PUSH
24430: LD_INT 18
24432: PUSH
24433: LD_INT 19
24435: PUSH
24436: LD_INT 20
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: IN
24457: NOT
24458: OR
24459: IFTRUE 24472
24461: PUSH
24462: LD_VAR 0 8
24466: PUSH
24467: LD_INT 5
24469: ARRAY
24470: NOT
24471: OR
24472: IFTRUE 24512
24474: PUSH
24475: LD_VAR 0 8
24479: PUSH
24480: LD_INT 6
24482: ARRAY
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: LD_INT 7
24492: PUSH
24493: LD_INT 9
24495: PUSH
24496: LD_INT 10
24498: PUSH
24499: LD_INT 11
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: IN
24510: NOT
24511: OR
24512: IFFALSE 24518
// exit ;
24514: POP
24515: POP
24516: GO 24603
// end ;
24518: GO 24175
24520: POP
24521: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24522: LD_VAR 0 9
24526: PPUSH
24527: LD_VAR 0 3
24531: PPUSH
24532: LD_VAR 0 4
24536: PPUSH
24537: LD_INT 20
24539: PPUSH
24540: CALL 16422 0 4
24544: PUSH
24545: LD_INT 4
24547: ARRAY
24548: IFFALSE 24552
// exit ;
24550: GO 24603
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24552: LD_VAR 0 2
24556: PUSH
24557: LD_INT 29
24559: PUSH
24560: LD_INT 30
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: IN
24567: IFFALSE 24591
24569: PUSH
24570: LD_VAR 0 3
24574: PPUSH
24575: LD_VAR 0 4
24579: PPUSH
24580: LD_VAR 0 9
24584: PPUSH
24585: CALL_OW 440
24589: NOT
24590: AND
24591: IFFALSE 24595
// exit ;
24593: GO 24603
// result := true ;
24595: LD_ADDR_VAR 0 6
24599: PUSH
24600: LD_INT 1
24602: ST_TO_ADDR
// end ;
24603: LD_VAR 0 6
24607: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24608: LD_INT 0
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
24656: PPUSH
24657: PPUSH
24658: PPUSH
24659: PPUSH
24660: PPUSH
24661: PPUSH
24662: PPUSH
24663: PPUSH
24664: PPUSH
24665: PPUSH
24666: PPUSH
24667: PPUSH
// result = [ ] ;
24668: LD_ADDR_VAR 0 7
24672: PUSH
24673: EMPTY
24674: ST_TO_ADDR
// temp_list = [ ] ;
24675: LD_ADDR_VAR 0 9
24679: PUSH
24680: EMPTY
24681: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24682: LD_VAR 0 4
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 3
24698: PUSH
24699: LD_INT 4
24701: PUSH
24702: LD_INT 5
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: IN
24713: NOT
24714: IFTRUE 24757
24716: PUSH
24717: LD_VAR 0 1
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: IN
24732: IFFALSE 24756
24734: PUSH
24735: LD_VAR 0 5
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 3
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: IN
24754: NOT
24755: AND
24756: OR
24757: IFFALSE 24761
// exit ;
24759: GO 43160
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24761: LD_VAR 0 1
24765: PUSH
24766: LD_INT 6
24768: PUSH
24769: LD_INT 7
24771: PUSH
24772: LD_INT 8
24774: PUSH
24775: LD_INT 13
24777: PUSH
24778: LD_INT 12
24780: PUSH
24781: LD_INT 15
24783: PUSH
24784: LD_INT 11
24786: PUSH
24787: LD_INT 14
24789: PUSH
24790: LD_INT 10
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: IN
24804: IFFALSE 24814
// btype = b_lab ;
24806: LD_ADDR_VAR 0 1
24810: PUSH
24811: LD_INT 6
24813: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24814: LD_VAR 0 6
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: IN
24833: NOT
24834: IFTRUE 24902
24836: PUSH
24837: LD_VAR 0 1
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: LD_INT 6
24856: PUSH
24857: LD_INT 36
24859: PUSH
24860: LD_INT 4
24862: PUSH
24863: LD_INT 5
24865: PUSH
24866: LD_INT 31
24868: PUSH
24869: LD_INT 32
24871: PUSH
24872: LD_INT 33
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: IN
24888: NOT
24889: IFFALSE 24901
24891: PUSH
24892: LD_VAR 0 6
24896: PUSH
24897: LD_INT 1
24899: EQUAL
24900: AND
24901: OR
24902: IFTRUE 24934
24904: PUSH
24905: LD_VAR 0 1
24909: PUSH
24910: LD_INT 2
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: IN
24920: NOT
24921: IFFALSE 24933
24923: PUSH
24924: LD_VAR 0 6
24928: PUSH
24929: LD_INT 2
24931: EQUAL
24932: AND
24933: OR
24934: IFFALSE 24944
// mode = 0 ;
24936: LD_ADDR_VAR 0 6
24940: PUSH
24941: LD_INT 0
24943: ST_TO_ADDR
// case mode of 0 :
24944: LD_VAR 0 6
24948: PUSH
24949: LD_INT 0
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 36410
24957: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24958: LD_ADDR_VAR 0 11
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 2
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 2
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 3
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25151: LD_ADDR_VAR 0 12
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 2
25274: NEG
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 2
25297: NEG
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 3
25308: NEG
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 3
25319: NEG
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25347: LD_ADDR_VAR 0 13
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: NEG
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 3
25506: NEG
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 3
25518: NEG
25519: PUSH
25520: LD_INT 3
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25546: LD_ADDR_VAR 0 14
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: LD_INT 0
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: LD_INT 3
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: LD_INT 3
25707: NEG
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: LD_INT 2
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25742: LD_ADDR_VAR 0 15
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: NEG
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 1
25891: NEG
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25935: LD_ADDR_VAR 0 16
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26128: LD_ADDR_VAR 0 17
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: LD_INT 2
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: NEG
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26358: LD_ADDR_VAR 0 18
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26588: LD_ADDR_VAR 0 19
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: LD_INT 2
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: LD_INT 2
26684: NEG
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: NEG
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26818: LD_ADDR_VAR 0 20
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 2
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 2
26994: NEG
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: NEG
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27048: LD_ADDR_VAR 0 21
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 2
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 2
27144: NEG
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: LD_INT 2
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27278: LD_ADDR_VAR 0 22
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: LD_INT 2
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 1
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: LD_INT 2
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 2
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: LD_INT 2
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27508: LD_ADDR_VAR 0 23
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: LD_INT 2
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: LD_INT 3
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 3
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27788: LD_ADDR_VAR 0 24
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 2
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 2
27964: NEG
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 2
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28064: LD_ADDR_VAR 0 25
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 3
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 3
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28338: LD_ADDR_VAR 0 26
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 2
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 2
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 2
28514: NEG
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: NEG
28538: PUSH
28539: LD_INT 2
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 3
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 3
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28614: LD_ADDR_VAR 0 27
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 3
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 3
28859: NEG
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28894: LD_ADDR_VAR 0 28
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 2
29105: NEG
29106: PUSH
29107: LD_INT 3
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 3
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 3
29129: NEG
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29176: LD_ADDR_VAR 0 29
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: LD_INT 0
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: PUSH
29259: LD_INT 2
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 2
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: LD_INT 3
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29455: LD_ADDR_VAR 0 30
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 2
29621: NEG
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29733: LD_ADDR_VAR 0 31
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 3
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 3
29976: NEG
29977: PUSH
29978: LD_INT 2
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30011: LD_ADDR_VAR 0 32
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: NEG
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 3
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 3
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30289: LD_ADDR_VAR 0 33
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 0
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: NEG
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 2
30467: NEG
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 3
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30568: LD_ADDR_VAR 0 34
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30848: LD_ADDR_VAR 0 35
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 0
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30960: LD_ADDR_VAR 0 36
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31072: LD_ADDR_VAR 0 37
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31184: LD_ADDR_VAR 0 38
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31296: LD_ADDR_VAR 0 39
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31408: LD_ADDR_VAR 0 40
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31520: LD_ADDR_VAR 0 41
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 2
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 3
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 3
31794: NEG
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 3
31817: NEG
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: NEG
31830: PUSH
31831: LD_INT 3
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31870: LD_ADDR_VAR 0 42
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 3
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: LD_INT 3
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 3
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 3
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: LD_INT 3
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32220: LD_ADDR_VAR 0 43
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: NEG
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32568: LD_ADDR_VAR 0 44
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: LD_INT 3
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32918: LD_ADDR_VAR 0 45
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 2
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 3
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 3
33227: NEG
33228: PUSH
33229: LD_INT 3
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33268: LD_ADDR_VAR 0 46
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 2
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: LD_INT 3
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 3
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 3
33575: NEG
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33616: LD_ADDR_VAR 0 47
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: NEG
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33767: LD_ADDR_VAR 0 48
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33914: LD_ADDR_VAR 0 49
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 2
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34058: LD_ADDR_VAR 0 50
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34202: LD_ADDR_VAR 0 51
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 0
34219: PUSH
34220: LD_INT 1
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34349: LD_ADDR_VAR 0 52
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 2
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34500: LD_ADDR_VAR 0 53
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 2
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34730: LD_ADDR_VAR 0 54
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34960: LD_ADDR_VAR 0 55
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: NEG
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35190: LD_ADDR_VAR 0 56
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: NEG
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: NEG
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35420: LD_ADDR_VAR 0 57
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35650: LD_ADDR_VAR 0 58
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 2
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 2
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35880: LD_ADDR_VAR 0 59
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35968: LD_ADDR_VAR 0 60
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36056: LD_ADDR_VAR 0 61
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36144: LD_ADDR_VAR 0 62
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36232: LD_ADDR_VAR 0 63
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36320: LD_ADDR_VAR 0 64
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// end ; 1 :
36408: GO 42305
36410: LD_INT 1
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 39041
36418: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36419: LD_ADDR_VAR 0 11
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 3
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36463: LD_ADDR_VAR 0 12
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36504: LD_ADDR_VAR 0 13
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36544: LD_ADDR_VAR 0 14
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36585: LD_ADDR_VAR 0 15
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 3
36603: NEG
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36629: LD_ADDR_VAR 0 16
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: LD_INT 3
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 3
36648: NEG
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 3
36660: NEG
36661: PUSH
36662: LD_INT 3
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36675: LD_ADDR_VAR 0 17
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 3
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 3
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36719: LD_ADDR_VAR 0 18
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36760: LD_ADDR_VAR 0 19
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 2
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 3
36777: PUSH
36778: LD_INT 3
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: LD_INT 3
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36800: LD_ADDR_VAR 0 20
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 3
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36841: LD_ADDR_VAR 0 21
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 3
36859: NEG
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 3
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36885: LD_ADDR_VAR 0 22
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 3
36904: NEG
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 3
36916: NEG
36917: PUSH
36918: LD_INT 3
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36931: LD_ADDR_VAR 0 23
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 4
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 3
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36975: LD_ADDR_VAR 0 24
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 3
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 4
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37016: LD_ADDR_VAR 0 25
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 4
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: LD_INT 4
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37056: LD_ADDR_VAR 0 26
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 3
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 3
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37097: LD_ADDR_VAR 0 27
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 4
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37141: LD_ADDR_VAR 0 28
37145: PUSH
37146: LD_INT 3
37148: NEG
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 3
37160: NEG
37161: PUSH
37162: LD_INT 4
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 4
37172: NEG
37173: PUSH
37174: LD_INT 3
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37187: LD_ADDR_VAR 0 29
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 3
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: LD_INT 4
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 4
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 5
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 5
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 4
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: LD_INT 6
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 6
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 5
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37342: LD_ADDR_VAR 0 30
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 3
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 4
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 4
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 4
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 5
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 5
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 5
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 6
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 6
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37485: LD_ADDR_VAR 0 31
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 4
37522: PUSH
37523: LD_INT 3
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 4
37532: PUSH
37533: LD_INT 4
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: LD_INT 4
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 5
37552: PUSH
37553: LD_INT 4
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 5
37562: PUSH
37563: LD_INT 5
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: PUSH
37573: LD_INT 5
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 6
37582: PUSH
37583: LD_INT 5
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 6
37592: PUSH
37593: LD_INT 6
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 5
37602: PUSH
37603: LD_INT 6
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37624: LD_ADDR_VAR 0 32
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 4
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 5
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 4
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 6
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 6
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 5
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37767: LD_ADDR_VAR 0 33
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 4
37819: NEG
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 4
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 4
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 5
37853: NEG
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 5
37864: NEG
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 5
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 6
37887: NEG
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 6
37898: NEG
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37922: LD_ADDR_VAR 0 34
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 3
37953: NEG
37954: PUSH
37955: LD_INT 3
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 3
37965: NEG
37966: PUSH
37967: LD_INT 4
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 4
37977: NEG
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 4
37989: NEG
37990: PUSH
37991: LD_INT 4
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 4
38001: NEG
38002: PUSH
38003: LD_INT 5
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 5
38013: NEG
38014: PUSH
38015: LD_INT 4
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 5
38025: NEG
38026: PUSH
38027: LD_INT 5
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 5
38037: NEG
38038: PUSH
38039: LD_INT 6
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 6
38049: NEG
38050: PUSH
38051: LD_INT 5
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 6
38061: NEG
38062: PUSH
38063: LD_INT 6
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38085: LD_ADDR_VAR 0 41
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38129: LD_ADDR_VAR 0 42
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38170: LD_ADDR_VAR 0 43
38174: PUSH
38175: LD_INT 2
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38210: LD_ADDR_VAR 0 44
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38251: LD_ADDR_VAR 0 45
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: NEG
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 3
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38295: LD_ADDR_VAR 0 46
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 3
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 3
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38341: LD_ADDR_VAR 0 47
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 3
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38374: LD_ADDR_VAR 0 48
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 1
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38405: LD_ADDR_VAR 0 49
38409: PUSH
38410: LD_INT 3
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 3
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38434: LD_ADDR_VAR 0 50
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38463: LD_ADDR_VAR 0 51
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: NEG
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38494: LD_ADDR_VAR 0 52
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: NEG
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38527: LD_ADDR_VAR 0 53
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 3
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 3
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38571: LD_ADDR_VAR 0 54
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38612: LD_ADDR_VAR 0 55
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 3
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: LD_INT 3
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38652: LD_ADDR_VAR 0 56
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38693: LD_ADDR_VAR 0 57
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 3
38711: NEG
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 3
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38737: LD_ADDR_VAR 0 58
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: LD_INT 3
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38783: LD_ADDR_VAR 0 59
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38827: LD_ADDR_VAR 0 60
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38868: LD_ADDR_VAR 0 61
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38908: LD_ADDR_VAR 0 62
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38949: LD_ADDR_VAR 0 63
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38993: LD_ADDR_VAR 0 64
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
// end ; 2 :
39039: GO 42305
39041: LD_INT 2
39043: DOUBLE
39044: EQUAL
39045: IFTRUE 39049
39047: GO 42304
39049: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39050: LD_ADDR_VAR 0 29
39054: PUSH
39055: LD_INT 4
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 4
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 5
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 5
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 4
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 3
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 5
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 3
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 4
39170: PUSH
39171: LD_INT 3
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 4
39180: PUSH
39181: LD_INT 4
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: LD_INT 4
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 4
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 4
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 3
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 4
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 5
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 5
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: LD_INT 4
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 5
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: LD_INT 3
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 3
39333: NEG
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: NEG
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 4
39389: NEG
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 4
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 4
39412: NEG
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 4
39435: NEG
39436: PUSH
39437: LD_INT 4
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 4
39447: NEG
39448: PUSH
39449: LD_INT 5
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 4
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 3
39471: NEG
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 4
39483: NEG
39484: PUSH
39485: LD_INT 3
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 5
39495: NEG
39496: PUSH
39497: LD_INT 4
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 5
39507: NEG
39508: PUSH
39509: LD_INT 5
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: NEG
39520: PUSH
39521: LD_INT 5
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 5
39531: NEG
39532: PUSH
39533: LD_INT 3
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39588: LD_ADDR_VAR 0 30
39592: PUSH
39593: LD_INT 4
39595: PUSH
39596: LD_INT 4
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 4
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 5
39615: PUSH
39616: LD_INT 4
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 5
39625: PUSH
39626: LD_INT 5
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 4
39635: PUSH
39636: LD_INT 5
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 3
39645: PUSH
39646: LD_INT 4
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 5
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: LD_INT 5
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 4
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 4
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 4
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 4
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 4
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 3
39801: NEG
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 3
39812: NEG
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 4
39823: NEG
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 5
39834: NEG
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 5
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 5
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: NEG
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 3
39880: NEG
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 3
39892: NEG
39893: PUSH
39894: LD_INT 4
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: NEG
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 4
39940: NEG
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 4
39952: NEG
39953: PUSH
39954: LD_INT 4
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 4
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 4
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 4
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 5
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 4
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 4
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 5
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: LD_INT 5
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40135: LD_ADDR_VAR 0 31
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 4
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 4
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 5
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 5
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 5
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 3
40235: NEG
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 3
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 2
40269: NEG
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 3
40280: NEG
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 4
40291: NEG
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 4
40302: NEG
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 4
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 4
40337: NEG
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 4
40349: NEG
40350: PUSH
40351: LD_INT 5
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 3
40361: NEG
40362: PUSH
40363: LD_INT 4
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 3
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 4
40385: NEG
40386: PUSH
40387: LD_INT 3
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 5
40397: NEG
40398: PUSH
40399: LD_INT 4
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 5
40409: NEG
40410: PUSH
40411: LD_INT 5
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 3
40421: NEG
40422: PUSH
40423: LD_INT 5
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 5
40433: NEG
40434: PUSH
40435: LD_INT 3
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 4
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 3
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 4
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 4
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 4
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 4
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 5
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 5
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 4
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 3
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 5
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40685: LD_ADDR_VAR 0 32
40689: PUSH
40690: LD_INT 4
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 4
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 4
40737: NEG
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 5
40748: NEG
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 5
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 5
40771: NEG
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 3
40783: NEG
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 3
40794: NEG
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: NEG
40807: PUSH
40808: LD_INT 4
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 4
40854: NEG
40855: PUSH
40856: LD_INT 3
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 4
40866: NEG
40867: PUSH
40868: LD_INT 4
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: LD_INT 4
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 4
40890: NEG
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 4
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 5
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 4
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 3
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 4
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 5
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: LD_INT 3
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 5
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 4
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 4
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 3
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 4
41097: PUSH
41098: LD_INT 4
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 4
41107: PUSH
41108: LD_INT 3
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 4
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 5
41127: PUSH
41128: LD_INT 5
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: PUSH
41138: LD_INT 5
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: LD_INT 4
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 3
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 5
41167: PUSH
41168: LD_INT 3
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 3
41177: PUSH
41178: LD_INT 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41232: LD_ADDR_VAR 0 33
41236: PUSH
41237: LD_INT 4
41239: NEG
41240: PUSH
41241: LD_INT 4
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 4
41251: NEG
41252: PUSH
41253: LD_INT 5
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 3
41263: NEG
41264: PUSH
41265: LD_INT 4
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 3
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 4
41287: NEG
41288: PUSH
41289: LD_INT 3
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 5
41299: NEG
41300: PUSH
41301: LD_INT 4
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 5
41311: NEG
41312: PUSH
41313: LD_INT 5
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 3
41323: NEG
41324: PUSH
41325: LD_INT 5
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 5
41335: NEG
41336: PUSH
41337: LD_INT 3
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 3
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 4
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 4
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: LD_INT 4
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 4
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 4
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 5
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 5
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 4
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 3
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 5
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 3
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 4
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 4
41572: PUSH
41573: LD_INT 4
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: PUSH
41583: LD_INT 4
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 4
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: LD_INT 4
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 4
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 5
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 5
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 4
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: LD_INT 5
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41770: LD_ADDR_VAR 0 34
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 4
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 5
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 4
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: LD_INT 3
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 3
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 4
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 5
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 5
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 4
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 4
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 4
41972: PUSH
41973: LD_INT 4
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 4
41982: PUSH
41983: LD_INT 3
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 5
41992: PUSH
41993: LD_INT 4
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 5
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 4
42012: PUSH
42013: LD_INT 5
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 4
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 5
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: LD_INT 5
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 4
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 4
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: LD_INT 4
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 4
42155: NEG
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 4
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 3
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 3
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 4
42200: NEG
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 5
42211: NEG
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 5
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 5
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// end ; end ;
42302: GO 42305
42304: POP
// case btype of b_depot , b_warehouse :
42305: LD_VAR 0 1
42309: PUSH
42310: LD_INT 0
42312: DOUBLE
42313: EQUAL
42314: IFTRUE 42324
42316: LD_INT 1
42318: DOUBLE
42319: EQUAL
42320: IFTRUE 42324
42322: GO 42525
42324: POP
// case nation of nation_american :
42325: LD_VAR 0 5
42329: PUSH
42330: LD_INT 1
42332: DOUBLE
42333: EQUAL
42334: IFTRUE 42338
42336: GO 42394
42338: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42339: LD_ADDR_VAR 0 9
42343: PUSH
42344: LD_VAR 0 11
42348: PUSH
42349: LD_VAR 0 12
42353: PUSH
42354: LD_VAR 0 13
42358: PUSH
42359: LD_VAR 0 14
42363: PUSH
42364: LD_VAR 0 15
42368: PUSH
42369: LD_VAR 0 16
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: PUSH
42382: LD_VAR 0 4
42386: PUSH
42387: LD_INT 1
42389: PLUS
42390: ARRAY
42391: ST_TO_ADDR
42392: GO 42523
42394: LD_INT 2
42396: DOUBLE
42397: EQUAL
42398: IFTRUE 42402
42400: GO 42458
42402: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42403: LD_ADDR_VAR 0 9
42407: PUSH
42408: LD_VAR 0 17
42412: PUSH
42413: LD_VAR 0 18
42417: PUSH
42418: LD_VAR 0 19
42422: PUSH
42423: LD_VAR 0 20
42427: PUSH
42428: LD_VAR 0 21
42432: PUSH
42433: LD_VAR 0 22
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: PUSH
42446: LD_VAR 0 4
42450: PUSH
42451: LD_INT 1
42453: PLUS
42454: ARRAY
42455: ST_TO_ADDR
42456: GO 42523
42458: LD_INT 3
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42522
42466: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42467: LD_ADDR_VAR 0 9
42471: PUSH
42472: LD_VAR 0 23
42476: PUSH
42477: LD_VAR 0 24
42481: PUSH
42482: LD_VAR 0 25
42486: PUSH
42487: LD_VAR 0 26
42491: PUSH
42492: LD_VAR 0 27
42496: PUSH
42497: LD_VAR 0 28
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: PUSH
42510: LD_VAR 0 4
42514: PUSH
42515: LD_INT 1
42517: PLUS
42518: ARRAY
42519: ST_TO_ADDR
42520: GO 42523
42522: POP
42523: GO 43078
42525: LD_INT 2
42527: DOUBLE
42528: EQUAL
42529: IFTRUE 42539
42531: LD_INT 3
42533: DOUBLE
42534: EQUAL
42535: IFTRUE 42539
42537: GO 42595
42539: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42540: LD_ADDR_VAR 0 9
42544: PUSH
42545: LD_VAR 0 29
42549: PUSH
42550: LD_VAR 0 30
42554: PUSH
42555: LD_VAR 0 31
42559: PUSH
42560: LD_VAR 0 32
42564: PUSH
42565: LD_VAR 0 33
42569: PUSH
42570: LD_VAR 0 34
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: LD_VAR 0 4
42587: PUSH
42588: LD_INT 1
42590: PLUS
42591: ARRAY
42592: ST_TO_ADDR
42593: GO 43078
42595: LD_INT 16
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42657
42601: LD_INT 17
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42657
42607: LD_INT 18
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42657
42613: LD_INT 19
42615: DOUBLE
42616: EQUAL
42617: IFTRUE 42657
42619: LD_INT 22
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42657
42625: LD_INT 20
42627: DOUBLE
42628: EQUAL
42629: IFTRUE 42657
42631: LD_INT 21
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42657
42637: LD_INT 23
42639: DOUBLE
42640: EQUAL
42641: IFTRUE 42657
42643: LD_INT 24
42645: DOUBLE
42646: EQUAL
42647: IFTRUE 42657
42649: LD_INT 25
42651: DOUBLE
42652: EQUAL
42653: IFTRUE 42657
42655: GO 42713
42657: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42658: LD_ADDR_VAR 0 9
42662: PUSH
42663: LD_VAR 0 35
42667: PUSH
42668: LD_VAR 0 36
42672: PUSH
42673: LD_VAR 0 37
42677: PUSH
42678: LD_VAR 0 38
42682: PUSH
42683: LD_VAR 0 39
42687: PUSH
42688: LD_VAR 0 40
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: PUSH
42701: LD_VAR 0 4
42705: PUSH
42706: LD_INT 1
42708: PLUS
42709: ARRAY
42710: ST_TO_ADDR
42711: GO 43078
42713: LD_INT 6
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42769
42719: LD_INT 7
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42769
42725: LD_INT 8
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42769
42731: LD_INT 13
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42769
42737: LD_INT 12
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42769
42743: LD_INT 15
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42769
42749: LD_INT 11
42751: DOUBLE
42752: EQUAL
42753: IFTRUE 42769
42755: LD_INT 14
42757: DOUBLE
42758: EQUAL
42759: IFTRUE 42769
42761: LD_INT 10
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42825
42769: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42770: LD_ADDR_VAR 0 9
42774: PUSH
42775: LD_VAR 0 41
42779: PUSH
42780: LD_VAR 0 42
42784: PUSH
42785: LD_VAR 0 43
42789: PUSH
42790: LD_VAR 0 44
42794: PUSH
42795: LD_VAR 0 45
42799: PUSH
42800: LD_VAR 0 46
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: PUSH
42813: LD_VAR 0 4
42817: PUSH
42818: LD_INT 1
42820: PLUS
42821: ARRAY
42822: ST_TO_ADDR
42823: GO 43078
42825: LD_INT 36
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42889
42833: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42834: LD_ADDR_VAR 0 9
42838: PUSH
42839: LD_VAR 0 47
42843: PUSH
42844: LD_VAR 0 48
42848: PUSH
42849: LD_VAR 0 49
42853: PUSH
42854: LD_VAR 0 50
42858: PUSH
42859: LD_VAR 0 51
42863: PUSH
42864: LD_VAR 0 52
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: PUSH
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 1
42884: PLUS
42885: ARRAY
42886: ST_TO_ADDR
42887: GO 43078
42889: LD_INT 4
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42915
42895: LD_INT 5
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42915
42901: LD_INT 34
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42915
42907: LD_INT 37
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42915
42913: GO 42971
42915: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42916: LD_ADDR_VAR 0 9
42920: PUSH
42921: LD_VAR 0 53
42925: PUSH
42926: LD_VAR 0 54
42930: PUSH
42931: LD_VAR 0 55
42935: PUSH
42936: LD_VAR 0 56
42940: PUSH
42941: LD_VAR 0 57
42945: PUSH
42946: LD_VAR 0 58
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: PUSH
42959: LD_VAR 0 4
42963: PUSH
42964: LD_INT 1
42966: PLUS
42967: ARRAY
42968: ST_TO_ADDR
42969: GO 43078
42971: LD_INT 31
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 43021
42977: LD_INT 32
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 43021
42983: LD_INT 33
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 43021
42989: LD_INT 27
42991: DOUBLE
42992: EQUAL
42993: IFTRUE 43021
42995: LD_INT 26
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43021
43001: LD_INT 28
43003: DOUBLE
43004: EQUAL
43005: IFTRUE 43021
43007: LD_INT 29
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43021
43013: LD_INT 30
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43021
43019: GO 43077
43021: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43022: LD_ADDR_VAR 0 9
43026: PUSH
43027: LD_VAR 0 59
43031: PUSH
43032: LD_VAR 0 60
43036: PUSH
43037: LD_VAR 0 61
43041: PUSH
43042: LD_VAR 0 62
43046: PUSH
43047: LD_VAR 0 63
43051: PUSH
43052: LD_VAR 0 64
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: PUSH
43065: LD_VAR 0 4
43069: PUSH
43070: LD_INT 1
43072: PLUS
43073: ARRAY
43074: ST_TO_ADDR
43075: GO 43078
43077: POP
// temp_list2 = [ ] ;
43078: LD_ADDR_VAR 0 10
43082: PUSH
43083: EMPTY
43084: ST_TO_ADDR
// for i in temp_list do
43085: LD_ADDR_VAR 0 8
43089: PUSH
43090: LD_VAR 0 9
43094: PUSH
43095: FOR_IN
43096: IFFALSE 43148
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43098: LD_ADDR_VAR 0 10
43102: PUSH
43103: LD_VAR 0 10
43107: PUSH
43108: LD_VAR 0 8
43112: PUSH
43113: LD_INT 1
43115: ARRAY
43116: PUSH
43117: LD_VAR 0 2
43121: PLUS
43122: PUSH
43123: LD_VAR 0 8
43127: PUSH
43128: LD_INT 2
43130: ARRAY
43131: PUSH
43132: LD_VAR 0 3
43136: PLUS
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: EMPTY
43143: LIST
43144: ADD
43145: ST_TO_ADDR
43146: GO 43095
43148: POP
43149: POP
// result = temp_list2 ;
43150: LD_ADDR_VAR 0 7
43154: PUSH
43155: LD_VAR 0 10
43159: ST_TO_ADDR
// end ;
43160: LD_VAR 0 7
43164: RET
// export function EnemyInRange ( unit , dist ) ; begin
43165: LD_INT 0
43167: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43168: LD_ADDR_VAR 0 3
43172: PUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: CALL_OW 255
43182: PPUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 250
43192: PPUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: CALL_OW 251
43202: PPUSH
43203: LD_VAR 0 2
43207: PPUSH
43208: CALL 16422 0 4
43212: PUSH
43213: LD_INT 4
43215: ARRAY
43216: ST_TO_ADDR
// end ;
43217: LD_VAR 0 3
43221: RET
// export function PlayerSeeMe ( unit ) ; begin
43222: LD_INT 0
43224: PPUSH
// result := See ( your_side , unit ) ;
43225: LD_ADDR_VAR 0 2
43229: PUSH
43230: LD_OWVAR 2
43234: PPUSH
43235: LD_VAR 0 1
43239: PPUSH
43240: CALL_OW 292
43244: ST_TO_ADDR
// end ;
43245: LD_VAR 0 2
43249: RET
// export function ReverseDir ( unit ) ; begin
43250: LD_INT 0
43252: PPUSH
// if not unit then
43253: LD_VAR 0 1
43257: NOT
43258: IFFALSE 43262
// exit ;
43260: GO 43285
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43262: LD_ADDR_VAR 0 2
43266: PUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 254
43276: PUSH
43277: LD_INT 3
43279: PLUS
43280: PUSH
43281: LD_INT 6
43283: MOD
43284: ST_TO_ADDR
// end ;
43285: LD_VAR 0 2
43289: RET
// export function ReverseArray ( array ) ; var i ; begin
43290: LD_INT 0
43292: PPUSH
43293: PPUSH
// if not array then
43294: LD_VAR 0 1
43298: NOT
43299: IFFALSE 43303
// exit ;
43301: GO 43358
// result := [ ] ;
43303: LD_ADDR_VAR 0 2
43307: PUSH
43308: EMPTY
43309: ST_TO_ADDR
// for i := array downto 1 do
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: DOUBLE
43316: LD_VAR 0 1
43320: INC
43321: ST_TO_ADDR
43322: LD_INT 1
43324: PUSH
43325: FOR_DOWNTO
43326: IFFALSE 43356
// result := Join ( result , array [ i ] ) ;
43328: LD_ADDR_VAR 0 2
43332: PUSH
43333: LD_VAR 0 2
43337: PPUSH
43338: LD_VAR 0 1
43342: PUSH
43343: LD_VAR 0 3
43347: ARRAY
43348: PPUSH
43349: CALL 48200 0 2
43353: ST_TO_ADDR
43354: GO 43325
43356: POP
43357: POP
// end ;
43358: LD_VAR 0 2
43362: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43363: LD_INT 0
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
// if not unit or not hexes then
43371: LD_VAR 0 1
43375: NOT
43376: IFTRUE 43385
43378: PUSH
43379: LD_VAR 0 2
43383: NOT
43384: OR
43385: IFFALSE 43389
// exit ;
43387: GO 43512
// dist := 9999 ;
43389: LD_ADDR_VAR 0 5
43393: PUSH
43394: LD_INT 9999
43396: ST_TO_ADDR
// for i = 1 to hexes do
43397: LD_ADDR_VAR 0 4
43401: PUSH
43402: DOUBLE
43403: LD_INT 1
43405: DEC
43406: ST_TO_ADDR
43407: LD_VAR 0 2
43411: PUSH
43412: FOR_TO
43413: IFFALSE 43500
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43415: LD_ADDR_VAR 0 6
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: LD_VAR 0 2
43429: PUSH
43430: LD_VAR 0 4
43434: ARRAY
43435: PUSH
43436: LD_INT 1
43438: ARRAY
43439: PPUSH
43440: LD_VAR 0 2
43444: PUSH
43445: LD_VAR 0 4
43449: ARRAY
43450: PUSH
43451: LD_INT 2
43453: ARRAY
43454: PPUSH
43455: CALL_OW 297
43459: ST_TO_ADDR
// if tdist < dist then
43460: LD_VAR 0 6
43464: PUSH
43465: LD_VAR 0 5
43469: LESS
43470: IFFALSE 43498
// begin hex := hexes [ i ] ;
43472: LD_ADDR_VAR 0 8
43476: PUSH
43477: LD_VAR 0 2
43481: PUSH
43482: LD_VAR 0 4
43486: ARRAY
43487: ST_TO_ADDR
// dist := tdist ;
43488: LD_ADDR_VAR 0 5
43492: PUSH
43493: LD_VAR 0 6
43497: ST_TO_ADDR
// end ; end ;
43498: GO 43412
43500: POP
43501: POP
// result := hex ;
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_VAR 0 8
43511: ST_TO_ADDR
// end ;
43512: LD_VAR 0 3
43516: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43521: LD_VAR 0 1
43525: NOT
43526: IFTRUE 43565
43528: PUSH
43529: LD_VAR 0 1
43533: PUSH
43534: LD_INT 21
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 23
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PPUSH
43558: CALL_OW 69
43562: IN
43563: NOT
43564: OR
43565: IFFALSE 43569
// exit ;
43567: GO 43616
// for i = 1 to 3 do
43569: LD_ADDR_VAR 0 3
43573: PUSH
43574: DOUBLE
43575: LD_INT 1
43577: DEC
43578: ST_TO_ADDR
43579: LD_INT 3
43581: PUSH
43582: FOR_TO
43583: IFFALSE 43614
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43585: LD_VAR 0 1
43589: PPUSH
43590: CALL_OW 250
43594: PPUSH
43595: LD_VAR 0 1
43599: PPUSH
43600: CALL_OW 251
43604: PPUSH
43605: LD_INT 1
43607: PPUSH
43608: CALL_OW 453
43612: GO 43582
43614: POP
43615: POP
// end ;
43616: LD_VAR 0 2
43620: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43621: LD_INT 0
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
// if not unit or not enemy_unit then
43629: LD_VAR 0 1
43633: NOT
43634: IFTRUE 43643
43636: PUSH
43637: LD_VAR 0 2
43641: NOT
43642: OR
43643: IFFALSE 43647
// exit ;
43645: GO 44118
// if GetLives ( i ) < 250 then
43647: LD_VAR 0 4
43651: PPUSH
43652: CALL_OW 256
43656: PUSH
43657: LD_INT 250
43659: LESS
43660: IFFALSE 43673
// begin ComAutodestruct ( i ) ;
43662: LD_VAR 0 4
43666: PPUSH
43667: CALL 43517 0 1
// exit ;
43671: GO 44118
// end ; x := GetX ( enemy_unit ) ;
43673: LD_ADDR_VAR 0 7
43677: PUSH
43678: LD_VAR 0 2
43682: PPUSH
43683: CALL_OW 250
43687: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43688: LD_ADDR_VAR 0 8
43692: PUSH
43693: LD_VAR 0 2
43697: PPUSH
43698: CALL_OW 251
43702: ST_TO_ADDR
// if not x or not y then
43703: LD_VAR 0 7
43707: NOT
43708: IFTRUE 43717
43710: PUSH
43711: LD_VAR 0 8
43715: NOT
43716: OR
43717: IFFALSE 43721
// exit ;
43719: GO 44118
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43721: LD_ADDR_VAR 0 6
43725: PUSH
43726: LD_VAR 0 7
43730: PPUSH
43731: LD_INT 0
43733: PPUSH
43734: LD_INT 4
43736: PPUSH
43737: CALL_OW 272
43741: PUSH
43742: LD_VAR 0 8
43746: PPUSH
43747: LD_INT 0
43749: PPUSH
43750: LD_INT 4
43752: PPUSH
43753: CALL_OW 273
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_VAR 0 7
43766: PPUSH
43767: LD_INT 1
43769: PPUSH
43770: LD_INT 4
43772: PPUSH
43773: CALL_OW 272
43777: PUSH
43778: LD_VAR 0 8
43782: PPUSH
43783: LD_INT 1
43785: PPUSH
43786: LD_INT 4
43788: PPUSH
43789: CALL_OW 273
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_VAR 0 7
43802: PPUSH
43803: LD_INT 2
43805: PPUSH
43806: LD_INT 4
43808: PPUSH
43809: CALL_OW 272
43813: PUSH
43814: LD_VAR 0 8
43818: PPUSH
43819: LD_INT 2
43821: PPUSH
43822: LD_INT 4
43824: PPUSH
43825: CALL_OW 273
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_VAR 0 7
43838: PPUSH
43839: LD_INT 3
43841: PPUSH
43842: LD_INT 4
43844: PPUSH
43845: CALL_OW 272
43849: PUSH
43850: LD_VAR 0 8
43854: PPUSH
43855: LD_INT 3
43857: PPUSH
43858: LD_INT 4
43860: PPUSH
43861: CALL_OW 273
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_VAR 0 7
43874: PPUSH
43875: LD_INT 4
43877: PPUSH
43878: LD_INT 4
43880: PPUSH
43881: CALL_OW 272
43885: PUSH
43886: LD_VAR 0 8
43890: PPUSH
43891: LD_INT 4
43893: PPUSH
43894: LD_INT 4
43896: PPUSH
43897: CALL_OW 273
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_VAR 0 7
43910: PPUSH
43911: LD_INT 5
43913: PPUSH
43914: LD_INT 4
43916: PPUSH
43917: CALL_OW 272
43921: PUSH
43922: LD_VAR 0 8
43926: PPUSH
43927: LD_INT 5
43929: PPUSH
43930: LD_INT 4
43932: PPUSH
43933: CALL_OW 273
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// for i = tmp downto 1 do
43950: LD_ADDR_VAR 0 4
43954: PUSH
43955: DOUBLE
43956: LD_VAR 0 6
43960: INC
43961: ST_TO_ADDR
43962: LD_INT 1
43964: PUSH
43965: FOR_DOWNTO
43966: IFFALSE 44069
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43968: LD_VAR 0 6
43972: PUSH
43973: LD_VAR 0 4
43977: ARRAY
43978: PUSH
43979: LD_INT 1
43981: ARRAY
43982: PPUSH
43983: LD_VAR 0 6
43987: PUSH
43988: LD_VAR 0 4
43992: ARRAY
43993: PUSH
43994: LD_INT 2
43996: ARRAY
43997: PPUSH
43998: CALL_OW 488
44002: NOT
44003: IFTRUE 44045
44005: PUSH
44006: LD_VAR 0 6
44010: PUSH
44011: LD_VAR 0 4
44015: ARRAY
44016: PUSH
44017: LD_INT 1
44019: ARRAY
44020: PPUSH
44021: LD_VAR 0 6
44025: PUSH
44026: LD_VAR 0 4
44030: ARRAY
44031: PUSH
44032: LD_INT 2
44034: ARRAY
44035: PPUSH
44036: CALL_OW 428
44040: PUSH
44041: LD_INT 0
44043: NONEQUAL
44044: OR
44045: IFFALSE 44067
// tmp := Delete ( tmp , i ) ;
44047: LD_ADDR_VAR 0 6
44051: PUSH
44052: LD_VAR 0 6
44056: PPUSH
44057: LD_VAR 0 4
44061: PPUSH
44062: CALL_OW 3
44066: ST_TO_ADDR
44067: GO 43965
44069: POP
44070: POP
// j := GetClosestHex ( unit , tmp ) ;
44071: LD_ADDR_VAR 0 5
44075: PUSH
44076: LD_VAR 0 1
44080: PPUSH
44081: LD_VAR 0 6
44085: PPUSH
44086: CALL 43363 0 2
44090: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44091: LD_VAR 0 1
44095: PPUSH
44096: LD_VAR 0 5
44100: PUSH
44101: LD_INT 1
44103: ARRAY
44104: PPUSH
44105: LD_VAR 0 5
44109: PUSH
44110: LD_INT 2
44112: ARRAY
44113: PPUSH
44114: CALL_OW 111
// end ;
44118: LD_VAR 0 3
44122: RET
// export function PrepareApemanSoldier ( ) ; begin
44123: LD_INT 0
44125: PPUSH
// uc_nation := 0 ;
44126: LD_ADDR_OWVAR 21
44130: PUSH
44131: LD_INT 0
44133: ST_TO_ADDR
// hc_sex := sex_male ;
44134: LD_ADDR_OWVAR 27
44138: PUSH
44139: LD_INT 1
44141: ST_TO_ADDR
// hc_name :=  ;
44142: LD_ADDR_OWVAR 26
44146: PUSH
44147: LD_STRING 
44149: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44150: LD_ADDR_OWVAR 28
44154: PUSH
44155: LD_INT 15
44157: ST_TO_ADDR
// hc_gallery :=  ;
44158: LD_ADDR_OWVAR 33
44162: PUSH
44163: LD_STRING 
44165: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44166: LD_ADDR_OWVAR 31
44170: PUSH
44171: LD_INT 0
44173: PPUSH
44174: LD_INT 3
44176: PPUSH
44177: CALL_OW 12
44181: PUSH
44182: LD_INT 0
44184: PPUSH
44185: LD_INT 3
44187: PPUSH
44188: CALL_OW 12
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44205: LD_ADDR_OWVAR 29
44209: PUSH
44210: LD_INT 12
44212: PUSH
44213: LD_INT 12
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// end ;
44220: LD_VAR 0 1
44224: RET
// export function PrepareApemanEngineer ( ) ; begin
44225: LD_INT 0
44227: PPUSH
// uc_nation := 0 ;
44228: LD_ADDR_OWVAR 21
44232: PUSH
44233: LD_INT 0
44235: ST_TO_ADDR
// hc_sex := sex_male ;
44236: LD_ADDR_OWVAR 27
44240: PUSH
44241: LD_INT 1
44243: ST_TO_ADDR
// hc_name :=  ;
44244: LD_ADDR_OWVAR 26
44248: PUSH
44249: LD_STRING 
44251: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44252: LD_ADDR_OWVAR 28
44256: PUSH
44257: LD_INT 16
44259: ST_TO_ADDR
// hc_gallery :=  ;
44260: LD_ADDR_OWVAR 33
44264: PUSH
44265: LD_STRING 
44267: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44268: LD_ADDR_OWVAR 31
44272: PUSH
44273: LD_INT 0
44275: PPUSH
44276: LD_INT 3
44278: PPUSH
44279: CALL_OW 12
44283: PUSH
44284: LD_INT 0
44286: PPUSH
44287: LD_INT 3
44289: PPUSH
44290: CALL_OW 12
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44307: LD_ADDR_OWVAR 29
44311: PUSH
44312: LD_INT 12
44314: PUSH
44315: LD_INT 12
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// end ;
44322: LD_VAR 0 1
44326: RET
// export function PrepareApeman ( agressivity ) ; begin
44327: LD_INT 0
44329: PPUSH
// uc_side := 0 ;
44330: LD_ADDR_OWVAR 20
44334: PUSH
44335: LD_INT 0
44337: ST_TO_ADDR
// uc_nation := 0 ;
44338: LD_ADDR_OWVAR 21
44342: PUSH
44343: LD_INT 0
44345: ST_TO_ADDR
// hc_sex := sex_male ;
44346: LD_ADDR_OWVAR 27
44350: PUSH
44351: LD_INT 1
44353: ST_TO_ADDR
// hc_class := class_apeman ;
44354: LD_ADDR_OWVAR 28
44358: PUSH
44359: LD_INT 12
44361: ST_TO_ADDR
// hc_gallery :=  ;
44362: LD_ADDR_OWVAR 33
44366: PUSH
44367: LD_STRING 
44369: ST_TO_ADDR
// hc_name :=  ;
44370: LD_ADDR_OWVAR 26
44374: PUSH
44375: LD_STRING 
44377: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44378: LD_ADDR_OWVAR 29
44382: PUSH
44383: LD_INT 12
44385: PUSH
44386: LD_INT 12
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: ST_TO_ADDR
// if agressivity = 0 then
44393: LD_VAR 0 1
44397: PUSH
44398: LD_INT 0
44400: EQUAL
44401: IFFALSE 44413
// hc_agressivity := 0 else
44403: LD_ADDR_OWVAR 35
44407: PUSH
44408: LD_INT 0
44410: ST_TO_ADDR
44411: GO 44434
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44413: LD_ADDR_OWVAR 35
44417: PUSH
44418: LD_VAR 0 1
44422: NEG
44423: PPUSH
44424: LD_VAR 0 1
44428: PPUSH
44429: CALL_OW 12
44433: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44434: LD_ADDR_OWVAR 31
44438: PUSH
44439: LD_INT 0
44441: PPUSH
44442: LD_INT 3
44444: PPUSH
44445: CALL_OW 12
44449: PUSH
44450: LD_INT 0
44452: PPUSH
44453: LD_INT 3
44455: PPUSH
44456: CALL_OW 12
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
// end ;
44473: LD_VAR 0 2
44477: RET
// export function PrepareTiger ( agressivity ) ; begin
44478: LD_INT 0
44480: PPUSH
// uc_side := 0 ;
44481: LD_ADDR_OWVAR 20
44485: PUSH
44486: LD_INT 0
44488: ST_TO_ADDR
// uc_nation := 0 ;
44489: LD_ADDR_OWVAR 21
44493: PUSH
44494: LD_INT 0
44496: ST_TO_ADDR
// InitHc ;
44497: CALL_OW 19
// hc_class := class_tiger ;
44501: LD_ADDR_OWVAR 28
44505: PUSH
44506: LD_INT 14
44508: ST_TO_ADDR
// hc_gallery :=  ;
44509: LD_ADDR_OWVAR 33
44513: PUSH
44514: LD_STRING 
44516: ST_TO_ADDR
// hc_name :=  ;
44517: LD_ADDR_OWVAR 26
44521: PUSH
44522: LD_STRING 
44524: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44525: LD_ADDR_OWVAR 35
44529: PUSH
44530: LD_VAR 0 1
44534: NEG
44535: PPUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 12
44545: ST_TO_ADDR
// end ;
44546: LD_VAR 0 2
44550: RET
// export function PrepareEnchidna ( ) ; begin
44551: LD_INT 0
44553: PPUSH
// uc_side := 0 ;
44554: LD_ADDR_OWVAR 20
44558: PUSH
44559: LD_INT 0
44561: ST_TO_ADDR
// uc_nation := 0 ;
44562: LD_ADDR_OWVAR 21
44566: PUSH
44567: LD_INT 0
44569: ST_TO_ADDR
// InitHc ;
44570: CALL_OW 19
// hc_class := class_baggie ;
44574: LD_ADDR_OWVAR 28
44578: PUSH
44579: LD_INT 13
44581: ST_TO_ADDR
// hc_gallery :=  ;
44582: LD_ADDR_OWVAR 33
44586: PUSH
44587: LD_STRING 
44589: ST_TO_ADDR
// hc_name :=  ;
44590: LD_ADDR_OWVAR 26
44594: PUSH
44595: LD_STRING 
44597: ST_TO_ADDR
// end ;
44598: LD_VAR 0 1
44602: RET
// export function PrepareFrog ( ) ; begin
44603: LD_INT 0
44605: PPUSH
// uc_side := 0 ;
44606: LD_ADDR_OWVAR 20
44610: PUSH
44611: LD_INT 0
44613: ST_TO_ADDR
// uc_nation := 0 ;
44614: LD_ADDR_OWVAR 21
44618: PUSH
44619: LD_INT 0
44621: ST_TO_ADDR
// InitHc ;
44622: CALL_OW 19
// hc_class := class_frog ;
44626: LD_ADDR_OWVAR 28
44630: PUSH
44631: LD_INT 19
44633: ST_TO_ADDR
// hc_gallery :=  ;
44634: LD_ADDR_OWVAR 33
44638: PUSH
44639: LD_STRING 
44641: ST_TO_ADDR
// hc_name :=  ;
44642: LD_ADDR_OWVAR 26
44646: PUSH
44647: LD_STRING 
44649: ST_TO_ADDR
// end ;
44650: LD_VAR 0 1
44654: RET
// export function PrepareFish ( ) ; begin
44655: LD_INT 0
44657: PPUSH
// uc_side := 0 ;
44658: LD_ADDR_OWVAR 20
44662: PUSH
44663: LD_INT 0
44665: ST_TO_ADDR
// uc_nation := 0 ;
44666: LD_ADDR_OWVAR 21
44670: PUSH
44671: LD_INT 0
44673: ST_TO_ADDR
// InitHc ;
44674: CALL_OW 19
// hc_class := class_fish ;
44678: LD_ADDR_OWVAR 28
44682: PUSH
44683: LD_INT 20
44685: ST_TO_ADDR
// hc_gallery :=  ;
44686: LD_ADDR_OWVAR 33
44690: PUSH
44691: LD_STRING 
44693: ST_TO_ADDR
// hc_name :=  ;
44694: LD_ADDR_OWVAR 26
44698: PUSH
44699: LD_STRING 
44701: ST_TO_ADDR
// end ;
44702: LD_VAR 0 1
44706: RET
// export function PrepareBird ( ) ; begin
44707: LD_INT 0
44709: PPUSH
// uc_side := 0 ;
44710: LD_ADDR_OWVAR 20
44714: PUSH
44715: LD_INT 0
44717: ST_TO_ADDR
// uc_nation := 0 ;
44718: LD_ADDR_OWVAR 21
44722: PUSH
44723: LD_INT 0
44725: ST_TO_ADDR
// InitHc ;
44726: CALL_OW 19
// hc_class := class_phororhacos ;
44730: LD_ADDR_OWVAR 28
44734: PUSH
44735: LD_INT 18
44737: ST_TO_ADDR
// hc_gallery :=  ;
44738: LD_ADDR_OWVAR 33
44742: PUSH
44743: LD_STRING 
44745: ST_TO_ADDR
// hc_name :=  ;
44746: LD_ADDR_OWVAR 26
44750: PUSH
44751: LD_STRING 
44753: ST_TO_ADDR
// end ;
44754: LD_VAR 0 1
44758: RET
// export function PrepareHorse ( ) ; begin
44759: LD_INT 0
44761: PPUSH
// uc_side := 0 ;
44762: LD_ADDR_OWVAR 20
44766: PUSH
44767: LD_INT 0
44769: ST_TO_ADDR
// uc_nation := 0 ;
44770: LD_ADDR_OWVAR 21
44774: PUSH
44775: LD_INT 0
44777: ST_TO_ADDR
// InitHc ;
44778: CALL_OW 19
// hc_class := class_horse ;
44782: LD_ADDR_OWVAR 28
44786: PUSH
44787: LD_INT 21
44789: ST_TO_ADDR
// hc_gallery :=  ;
44790: LD_ADDR_OWVAR 33
44794: PUSH
44795: LD_STRING 
44797: ST_TO_ADDR
// hc_name :=  ;
44798: LD_ADDR_OWVAR 26
44802: PUSH
44803: LD_STRING 
44805: ST_TO_ADDR
// end ;
44806: LD_VAR 0 1
44810: RET
// export function PrepareMastodont ( ) ; begin
44811: LD_INT 0
44813: PPUSH
// uc_side := 0 ;
44814: LD_ADDR_OWVAR 20
44818: PUSH
44819: LD_INT 0
44821: ST_TO_ADDR
// uc_nation := 0 ;
44822: LD_ADDR_OWVAR 21
44826: PUSH
44827: LD_INT 0
44829: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44830: LD_ADDR_OWVAR 37
44834: PUSH
44835: LD_INT 31
44837: ST_TO_ADDR
// vc_control := control_rider ;
44838: LD_ADDR_OWVAR 38
44842: PUSH
44843: LD_INT 4
44845: ST_TO_ADDR
// end ;
44846: LD_VAR 0 1
44850: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44851: LD_INT 0
44853: PPUSH
44854: PPUSH
44855: PPUSH
// uc_side = 0 ;
44856: LD_ADDR_OWVAR 20
44860: PUSH
44861: LD_INT 0
44863: ST_TO_ADDR
// uc_nation = 0 ;
44864: LD_ADDR_OWVAR 21
44868: PUSH
44869: LD_INT 0
44871: ST_TO_ADDR
// InitHc_All ( ) ;
44872: CALL_OW 584
// InitVc ;
44876: CALL_OW 20
// if mastodonts then
44880: LD_VAR 0 6
44884: IFFALSE 44951
// for i = 1 to mastodonts do
44886: LD_ADDR_VAR 0 11
44890: PUSH
44891: DOUBLE
44892: LD_INT 1
44894: DEC
44895: ST_TO_ADDR
44896: LD_VAR 0 6
44900: PUSH
44901: FOR_TO
44902: IFFALSE 44949
// begin vc_chassis := 31 ;
44904: LD_ADDR_OWVAR 37
44908: PUSH
44909: LD_INT 31
44911: ST_TO_ADDR
// vc_control := control_rider ;
44912: LD_ADDR_OWVAR 38
44916: PUSH
44917: LD_INT 4
44919: ST_TO_ADDR
// animal := CreateVehicle ;
44920: LD_ADDR_VAR 0 12
44924: PUSH
44925: CALL_OW 45
44929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44930: LD_VAR 0 12
44934: PPUSH
44935: LD_VAR 0 8
44939: PPUSH
44940: LD_INT 0
44942: PPUSH
44943: CALL 47093 0 3
// end ;
44947: GO 44901
44949: POP
44950: POP
// if horses then
44951: LD_VAR 0 5
44955: IFFALSE 45022
// for i = 1 to horses do
44957: LD_ADDR_VAR 0 11
44961: PUSH
44962: DOUBLE
44963: LD_INT 1
44965: DEC
44966: ST_TO_ADDR
44967: LD_VAR 0 5
44971: PUSH
44972: FOR_TO
44973: IFFALSE 45020
// begin hc_class := 21 ;
44975: LD_ADDR_OWVAR 28
44979: PUSH
44980: LD_INT 21
44982: ST_TO_ADDR
// hc_gallery :=  ;
44983: LD_ADDR_OWVAR 33
44987: PUSH
44988: LD_STRING 
44990: ST_TO_ADDR
// animal := CreateHuman ;
44991: LD_ADDR_VAR 0 12
44995: PUSH
44996: CALL_OW 44
45000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45001: LD_VAR 0 12
45005: PPUSH
45006: LD_VAR 0 8
45010: PPUSH
45011: LD_INT 0
45013: PPUSH
45014: CALL 47093 0 3
// end ;
45018: GO 44972
45020: POP
45021: POP
// if birds then
45022: LD_VAR 0 1
45026: IFFALSE 45093
// for i = 1 to birds do
45028: LD_ADDR_VAR 0 11
45032: PUSH
45033: DOUBLE
45034: LD_INT 1
45036: DEC
45037: ST_TO_ADDR
45038: LD_VAR 0 1
45042: PUSH
45043: FOR_TO
45044: IFFALSE 45091
// begin hc_class := 18 ;
45046: LD_ADDR_OWVAR 28
45050: PUSH
45051: LD_INT 18
45053: ST_TO_ADDR
// hc_gallery =  ;
45054: LD_ADDR_OWVAR 33
45058: PUSH
45059: LD_STRING 
45061: ST_TO_ADDR
// animal := CreateHuman ;
45062: LD_ADDR_VAR 0 12
45066: PUSH
45067: CALL_OW 44
45071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45072: LD_VAR 0 12
45076: PPUSH
45077: LD_VAR 0 8
45081: PPUSH
45082: LD_INT 0
45084: PPUSH
45085: CALL 47093 0 3
// end ;
45089: GO 45043
45091: POP
45092: POP
// if tigers then
45093: LD_VAR 0 2
45097: IFFALSE 45181
// for i = 1 to tigers do
45099: LD_ADDR_VAR 0 11
45103: PUSH
45104: DOUBLE
45105: LD_INT 1
45107: DEC
45108: ST_TO_ADDR
45109: LD_VAR 0 2
45113: PUSH
45114: FOR_TO
45115: IFFALSE 45179
// begin hc_class = class_tiger ;
45117: LD_ADDR_OWVAR 28
45121: PUSH
45122: LD_INT 14
45124: ST_TO_ADDR
// hc_gallery =  ;
45125: LD_ADDR_OWVAR 33
45129: PUSH
45130: LD_STRING 
45132: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45133: LD_ADDR_OWVAR 35
45137: PUSH
45138: LD_INT 7
45140: NEG
45141: PPUSH
45142: LD_INT 7
45144: PPUSH
45145: CALL_OW 12
45149: ST_TO_ADDR
// animal := CreateHuman ;
45150: LD_ADDR_VAR 0 12
45154: PUSH
45155: CALL_OW 44
45159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45160: LD_VAR 0 12
45164: PPUSH
45165: LD_VAR 0 8
45169: PPUSH
45170: LD_INT 0
45172: PPUSH
45173: CALL 47093 0 3
// end ;
45177: GO 45114
45179: POP
45180: POP
// if apemans then
45181: LD_VAR 0 3
45185: IFFALSE 45308
// for i = 1 to apemans do
45187: LD_ADDR_VAR 0 11
45191: PUSH
45192: DOUBLE
45193: LD_INT 1
45195: DEC
45196: ST_TO_ADDR
45197: LD_VAR 0 3
45201: PUSH
45202: FOR_TO
45203: IFFALSE 45306
// begin hc_class = class_apeman ;
45205: LD_ADDR_OWVAR 28
45209: PUSH
45210: LD_INT 12
45212: ST_TO_ADDR
// hc_gallery =  ;
45213: LD_ADDR_OWVAR 33
45217: PUSH
45218: LD_STRING 
45220: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45221: LD_ADDR_OWVAR 35
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PPUSH
45230: LD_INT 2
45232: PPUSH
45233: CALL_OW 12
45237: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45238: LD_ADDR_OWVAR 31
45242: PUSH
45243: LD_INT 1
45245: PPUSH
45246: LD_INT 3
45248: PPUSH
45249: CALL_OW 12
45253: PUSH
45254: LD_INT 1
45256: PPUSH
45257: LD_INT 3
45259: PPUSH
45260: CALL_OW 12
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
// animal := CreateHuman ;
45277: LD_ADDR_VAR 0 12
45281: PUSH
45282: CALL_OW 44
45286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45287: LD_VAR 0 12
45291: PPUSH
45292: LD_VAR 0 8
45296: PPUSH
45297: LD_INT 0
45299: PPUSH
45300: CALL 47093 0 3
// end ;
45304: GO 45202
45306: POP
45307: POP
// if enchidnas then
45308: LD_VAR 0 4
45312: IFFALSE 45379
// for i = 1 to enchidnas do
45314: LD_ADDR_VAR 0 11
45318: PUSH
45319: DOUBLE
45320: LD_INT 1
45322: DEC
45323: ST_TO_ADDR
45324: LD_VAR 0 4
45328: PUSH
45329: FOR_TO
45330: IFFALSE 45377
// begin hc_class = 13 ;
45332: LD_ADDR_OWVAR 28
45336: PUSH
45337: LD_INT 13
45339: ST_TO_ADDR
// hc_gallery =  ;
45340: LD_ADDR_OWVAR 33
45344: PUSH
45345: LD_STRING 
45347: ST_TO_ADDR
// animal := CreateHuman ;
45348: LD_ADDR_VAR 0 12
45352: PUSH
45353: CALL_OW 44
45357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45358: LD_VAR 0 12
45362: PPUSH
45363: LD_VAR 0 8
45367: PPUSH
45368: LD_INT 0
45370: PPUSH
45371: CALL 47093 0 3
// end ;
45375: GO 45329
45377: POP
45378: POP
// if fishes then
45379: LD_VAR 0 7
45383: IFFALSE 45450
// for i = 1 to fishes do
45385: LD_ADDR_VAR 0 11
45389: PUSH
45390: DOUBLE
45391: LD_INT 1
45393: DEC
45394: ST_TO_ADDR
45395: LD_VAR 0 7
45399: PUSH
45400: FOR_TO
45401: IFFALSE 45448
// begin hc_class = 20 ;
45403: LD_ADDR_OWVAR 28
45407: PUSH
45408: LD_INT 20
45410: ST_TO_ADDR
// hc_gallery =  ;
45411: LD_ADDR_OWVAR 33
45415: PUSH
45416: LD_STRING 
45418: ST_TO_ADDR
// animal := CreateHuman ;
45419: LD_ADDR_VAR 0 12
45423: PUSH
45424: CALL_OW 44
45428: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45429: LD_VAR 0 12
45433: PPUSH
45434: LD_VAR 0 9
45438: PPUSH
45439: LD_INT 0
45441: PPUSH
45442: CALL 47093 0 3
// end ;
45446: GO 45400
45448: POP
45449: POP
// end ;
45450: LD_VAR 0 10
45454: RET
// export function WantHeal ( sci , unit ) ; begin
45455: LD_INT 0
45457: PPUSH
// if GetTaskList ( sci ) > 0 then
45458: LD_VAR 0 1
45462: PPUSH
45463: CALL_OW 437
45467: PUSH
45468: LD_INT 0
45470: GREATER
45471: IFFALSE 45543
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45473: LD_VAR 0 1
45477: PPUSH
45478: CALL_OW 437
45482: PUSH
45483: LD_INT 1
45485: ARRAY
45486: PUSH
45487: LD_INT 1
45489: ARRAY
45490: PUSH
45491: LD_STRING l
45493: EQUAL
45494: IFFALSE 45521
45496: PUSH
45497: LD_VAR 0 1
45501: PPUSH
45502: CALL_OW 437
45506: PUSH
45507: LD_INT 1
45509: ARRAY
45510: PUSH
45511: LD_INT 4
45513: ARRAY
45514: PUSH
45515: LD_VAR 0 2
45519: EQUAL
45520: AND
45521: IFFALSE 45533
// result := true else
45523: LD_ADDR_VAR 0 3
45527: PUSH
45528: LD_INT 1
45530: ST_TO_ADDR
45531: GO 45541
// result := false ;
45533: LD_ADDR_VAR 0 3
45537: PUSH
45538: LD_INT 0
45540: ST_TO_ADDR
// end else
45541: GO 45551
// result := false ;
45543: LD_ADDR_VAR 0 3
45547: PUSH
45548: LD_INT 0
45550: ST_TO_ADDR
// end ;
45551: LD_VAR 0 3
45555: RET
// export function HealTarget ( sci ) ; begin
45556: LD_INT 0
45558: PPUSH
// if not sci then
45559: LD_VAR 0 1
45563: NOT
45564: IFFALSE 45568
// exit ;
45566: GO 45633
// result := 0 ;
45568: LD_ADDR_VAR 0 2
45572: PUSH
45573: LD_INT 0
45575: ST_TO_ADDR
// if GetTaskList ( sci ) then
45576: LD_VAR 0 1
45580: PPUSH
45581: CALL_OW 437
45585: IFFALSE 45633
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45587: LD_VAR 0 1
45591: PPUSH
45592: CALL_OW 437
45596: PUSH
45597: LD_INT 1
45599: ARRAY
45600: PUSH
45601: LD_INT 1
45603: ARRAY
45604: PUSH
45605: LD_STRING l
45607: EQUAL
45608: IFFALSE 45633
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45610: LD_ADDR_VAR 0 2
45614: PUSH
45615: LD_VAR 0 1
45619: PPUSH
45620: CALL_OW 437
45624: PUSH
45625: LD_INT 1
45627: ARRAY
45628: PUSH
45629: LD_INT 4
45631: ARRAY
45632: ST_TO_ADDR
// end ;
45633: LD_VAR 0 2
45637: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45638: LD_INT 0
45640: PPUSH
45641: PPUSH
45642: PPUSH
45643: PPUSH
// if not base_units then
45644: LD_VAR 0 1
45648: NOT
45649: IFFALSE 45653
// exit ;
45651: GO 45740
// result := false ;
45653: LD_ADDR_VAR 0 2
45657: PUSH
45658: LD_INT 0
45660: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45661: LD_ADDR_VAR 0 5
45665: PUSH
45666: LD_VAR 0 1
45670: PPUSH
45671: LD_INT 21
45673: PUSH
45674: LD_INT 3
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PPUSH
45681: CALL_OW 72
45685: ST_TO_ADDR
// if not tmp then
45686: LD_VAR 0 5
45690: NOT
45691: IFFALSE 45695
// exit ;
45693: GO 45740
// for i in tmp do
45695: LD_ADDR_VAR 0 3
45699: PUSH
45700: LD_VAR 0 5
45704: PUSH
45705: FOR_IN
45706: IFFALSE 45738
// begin result := EnemyInRange ( i , 22 ) ;
45708: LD_ADDR_VAR 0 2
45712: PUSH
45713: LD_VAR 0 3
45717: PPUSH
45718: LD_INT 22
45720: PPUSH
45721: CALL 43165 0 2
45725: ST_TO_ADDR
// if result then
45726: LD_VAR 0 2
45730: IFFALSE 45736
// exit ;
45732: POP
45733: POP
45734: GO 45740
// end ;
45736: GO 45705
45738: POP
45739: POP
// end ;
45740: LD_VAR 0 2
45744: RET
// export function FilterByTag ( units , tag ) ; begin
45745: LD_INT 0
45747: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45748: LD_ADDR_VAR 0 3
45752: PUSH
45753: LD_VAR 0 1
45757: PPUSH
45758: LD_INT 120
45760: PUSH
45761: LD_VAR 0 2
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PPUSH
45770: CALL_OW 72
45774: ST_TO_ADDR
// end ;
45775: LD_VAR 0 3
45779: RET
// export function IsDriver ( un ) ; begin
45780: LD_INT 0
45782: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45783: LD_ADDR_VAR 0 2
45787: PUSH
45788: LD_VAR 0 1
45792: PUSH
45793: LD_INT 55
45795: PUSH
45796: EMPTY
45797: LIST
45798: PPUSH
45799: CALL_OW 69
45803: IN
45804: ST_TO_ADDR
// end ;
45805: LD_VAR 0 2
45809: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45810: LD_INT 0
45812: PPUSH
45813: PPUSH
// list := [ ] ;
45814: LD_ADDR_VAR 0 5
45818: PUSH
45819: EMPTY
45820: ST_TO_ADDR
// case d of 0 :
45821: LD_VAR 0 3
45825: PUSH
45826: LD_INT 0
45828: DOUBLE
45829: EQUAL
45830: IFTRUE 45834
45832: GO 45967
45834: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45835: LD_ADDR_VAR 0 5
45839: PUSH
45840: LD_VAR 0 1
45844: PUSH
45845: LD_INT 4
45847: MINUS
45848: PUSH
45849: LD_VAR 0 2
45853: PUSH
45854: LD_INT 4
45856: MINUS
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: PUSH
45866: LD_VAR 0 1
45870: PUSH
45871: LD_INT 3
45873: MINUS
45874: PUSH
45875: LD_VAR 0 2
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: PUSH
45888: LD_VAR 0 1
45892: PUSH
45893: LD_INT 4
45895: PLUS
45896: PUSH
45897: LD_VAR 0 2
45901: PUSH
45902: LD_INT 4
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: PUSH
45910: LD_VAR 0 1
45914: PUSH
45915: LD_INT 3
45917: PLUS
45918: PUSH
45919: LD_VAR 0 2
45923: PUSH
45924: LD_INT 3
45926: PLUS
45927: PUSH
45928: LD_INT 5
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: PUSH
45936: LD_VAR 0 1
45940: PUSH
45941: LD_VAR 0 2
45945: PUSH
45946: LD_INT 4
45948: PLUS
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: ST_TO_ADDR
// end ; 1 :
45965: GO 46665
45967: LD_INT 1
45969: DOUBLE
45970: EQUAL
45971: IFTRUE 45975
45973: GO 46108
45975: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45976: LD_ADDR_VAR 0 5
45980: PUSH
45981: LD_VAR 0 1
45985: PUSH
45986: LD_VAR 0 2
45990: PUSH
45991: LD_INT 4
45993: MINUS
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: PUSH
46003: LD_VAR 0 1
46007: PUSH
46008: LD_INT 3
46010: MINUS
46011: PUSH
46012: LD_VAR 0 2
46016: PUSH
46017: LD_INT 3
46019: MINUS
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: PUSH
46029: LD_VAR 0 1
46033: PUSH
46034: LD_INT 4
46036: MINUS
46037: PUSH
46038: LD_VAR 0 2
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: PUSH
46051: LD_VAR 0 1
46055: PUSH
46056: LD_VAR 0 2
46060: PUSH
46061: LD_INT 3
46063: PLUS
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: PUSH
46073: LD_VAR 0 1
46077: PUSH
46078: LD_INT 4
46080: PLUS
46081: PUSH
46082: LD_VAR 0 2
46086: PUSH
46087: LD_INT 4
46089: PLUS
46090: PUSH
46091: LD_INT 5
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// end ; 2 :
46106: GO 46665
46108: LD_INT 2
46110: DOUBLE
46111: EQUAL
46112: IFTRUE 46116
46114: GO 46245
46116: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46117: LD_ADDR_VAR 0 5
46121: PUSH
46122: LD_VAR 0 1
46126: PUSH
46127: LD_VAR 0 2
46131: PUSH
46132: LD_INT 3
46134: MINUS
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: PUSH
46144: LD_VAR 0 1
46148: PUSH
46149: LD_INT 4
46151: PLUS
46152: PUSH
46153: LD_VAR 0 2
46157: PUSH
46158: LD_INT 4
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: PUSH
46166: LD_VAR 0 1
46170: PUSH
46171: LD_VAR 0 2
46175: PUSH
46176: LD_INT 4
46178: PLUS
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: PUSH
46188: LD_VAR 0 1
46192: PUSH
46193: LD_INT 3
46195: MINUS
46196: PUSH
46197: LD_VAR 0 2
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: PUSH
46210: LD_VAR 0 1
46214: PUSH
46215: LD_INT 4
46217: MINUS
46218: PUSH
46219: LD_VAR 0 2
46223: PUSH
46224: LD_INT 4
46226: MINUS
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// end ; 3 :
46243: GO 46665
46245: LD_INT 3
46247: DOUBLE
46248: EQUAL
46249: IFTRUE 46253
46251: GO 46386
46253: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46254: LD_ADDR_VAR 0 5
46258: PUSH
46259: LD_VAR 0 1
46263: PUSH
46264: LD_INT 3
46266: PLUS
46267: PUSH
46268: LD_VAR 0 2
46272: PUSH
46273: LD_INT 4
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: PUSH
46281: LD_VAR 0 1
46285: PUSH
46286: LD_INT 4
46288: PLUS
46289: PUSH
46290: LD_VAR 0 2
46294: PUSH
46295: LD_INT 4
46297: PLUS
46298: PUSH
46299: LD_INT 5
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: PUSH
46307: LD_VAR 0 1
46311: PUSH
46312: LD_INT 4
46314: MINUS
46315: PUSH
46316: LD_VAR 0 2
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: PUSH
46329: LD_VAR 0 1
46333: PUSH
46334: LD_VAR 0 2
46338: PUSH
46339: LD_INT 4
46341: MINUS
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: PUSH
46351: LD_VAR 0 1
46355: PUSH
46356: LD_INT 3
46358: MINUS
46359: PUSH
46360: LD_VAR 0 2
46364: PUSH
46365: LD_INT 3
46367: MINUS
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// end ; 4 :
46384: GO 46665
46386: LD_INT 4
46388: DOUBLE
46389: EQUAL
46390: IFTRUE 46394
46392: GO 46527
46394: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46395: LD_ADDR_VAR 0 5
46399: PUSH
46400: LD_VAR 0 1
46404: PUSH
46405: LD_VAR 0 2
46409: PUSH
46410: LD_INT 4
46412: PLUS
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: PUSH
46422: LD_VAR 0 1
46426: PUSH
46427: LD_INT 3
46429: PLUS
46430: PUSH
46431: LD_VAR 0 2
46435: PUSH
46436: LD_INT 3
46438: PLUS
46439: PUSH
46440: LD_INT 5
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: PUSH
46448: LD_VAR 0 1
46452: PUSH
46453: LD_INT 4
46455: PLUS
46456: PUSH
46457: LD_VAR 0 2
46461: PUSH
46462: LD_INT 4
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: PUSH
46470: LD_VAR 0 1
46474: PUSH
46475: LD_VAR 0 2
46479: PUSH
46480: LD_INT 3
46482: MINUS
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: PUSH
46492: LD_VAR 0 1
46496: PUSH
46497: LD_INT 4
46499: MINUS
46500: PUSH
46501: LD_VAR 0 2
46505: PUSH
46506: LD_INT 4
46508: MINUS
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
// end ; 5 :
46525: GO 46665
46527: LD_INT 5
46529: DOUBLE
46530: EQUAL
46531: IFTRUE 46535
46533: GO 46664
46535: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46536: LD_ADDR_VAR 0 5
46540: PUSH
46541: LD_VAR 0 1
46545: PUSH
46546: LD_INT 4
46548: MINUS
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: PUSH
46563: LD_VAR 0 1
46567: PUSH
46568: LD_VAR 0 2
46572: PUSH
46573: LD_INT 4
46575: MINUS
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: PUSH
46585: LD_VAR 0 1
46589: PUSH
46590: LD_INT 4
46592: PLUS
46593: PUSH
46594: LD_VAR 0 2
46598: PUSH
46599: LD_INT 4
46601: PLUS
46602: PUSH
46603: LD_INT 5
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: PUSH
46611: LD_VAR 0 1
46615: PUSH
46616: LD_INT 3
46618: PLUS
46619: PUSH
46620: LD_VAR 0 2
46624: PUSH
46625: LD_INT 4
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: PUSH
46633: LD_VAR 0 1
46637: PUSH
46638: LD_VAR 0 2
46642: PUSH
46643: LD_INT 3
46645: PLUS
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: ST_TO_ADDR
// end ; end ;
46662: GO 46665
46664: POP
// result := list ;
46665: LD_ADDR_VAR 0 4
46669: PUSH
46670: LD_VAR 0 5
46674: ST_TO_ADDR
// end ;
46675: LD_VAR 0 4
46679: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46680: LD_INT 0
46682: PPUSH
46683: PPUSH
46684: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46685: LD_VAR 0 1
46689: NOT
46690: IFTRUE 46718
46692: PUSH
46693: LD_VAR 0 2
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 3
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: IN
46716: NOT
46717: OR
46718: IFFALSE 46722
// exit ;
46720: GO 46805
// tmp := [ ] ;
46722: LD_ADDR_VAR 0 5
46726: PUSH
46727: EMPTY
46728: ST_TO_ADDR
// for i in units do
46729: LD_ADDR_VAR 0 4
46733: PUSH
46734: LD_VAR 0 1
46738: PUSH
46739: FOR_IN
46740: IFFALSE 46774
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46742: LD_ADDR_VAR 0 5
46746: PUSH
46747: LD_VAR 0 5
46751: PPUSH
46752: LD_VAR 0 4
46756: PPUSH
46757: LD_VAR 0 2
46761: PPUSH
46762: CALL_OW 259
46766: PPUSH
46767: CALL 48200 0 2
46771: ST_TO_ADDR
46772: GO 46739
46774: POP
46775: POP
// if not tmp then
46776: LD_VAR 0 5
46780: NOT
46781: IFFALSE 46785
// exit ;
46783: GO 46805
// result := SortListByListDesc ( units , tmp ) ;
46785: LD_ADDR_VAR 0 3
46789: PUSH
46790: LD_VAR 0 1
46794: PPUSH
46795: LD_VAR 0 5
46799: PPUSH
46800: CALL_OW 77
46804: ST_TO_ADDR
// end ;
46805: LD_VAR 0 3
46809: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46810: LD_INT 0
46812: PPUSH
46813: PPUSH
46814: PPUSH
// result := false ;
46815: LD_ADDR_VAR 0 3
46819: PUSH
46820: LD_INT 0
46822: ST_TO_ADDR
// if not building then
46823: LD_VAR 0 2
46827: NOT
46828: IFFALSE 46832
// exit ;
46830: GO 46976
// x := GetX ( building ) ;
46832: LD_ADDR_VAR 0 4
46836: PUSH
46837: LD_VAR 0 2
46841: PPUSH
46842: CALL_OW 250
46846: ST_TO_ADDR
// y := GetY ( building ) ;
46847: LD_ADDR_VAR 0 5
46851: PUSH
46852: LD_VAR 0 2
46856: PPUSH
46857: CALL_OW 251
46861: ST_TO_ADDR
// if not x or not y then
46862: LD_VAR 0 4
46866: NOT
46867: IFTRUE 46876
46869: PUSH
46870: LD_VAR 0 5
46874: NOT
46875: OR
46876: IFFALSE 46880
// exit ;
46878: GO 46976
// if GetTaskList ( unit ) then
46880: LD_VAR 0 1
46884: PPUSH
46885: CALL_OW 437
46889: IFFALSE 46976
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46891: LD_STRING e
46893: PUSH
46894: LD_VAR 0 1
46898: PPUSH
46899: CALL_OW 437
46903: PUSH
46904: LD_INT 1
46906: ARRAY
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: EQUAL
46912: IFFALSE 46939
46914: PUSH
46915: LD_VAR 0 4
46919: PUSH
46920: LD_VAR 0 1
46924: PPUSH
46925: CALL_OW 437
46929: PUSH
46930: LD_INT 1
46932: ARRAY
46933: PUSH
46934: LD_INT 2
46936: ARRAY
46937: EQUAL
46938: AND
46939: IFFALSE 46966
46941: PUSH
46942: LD_VAR 0 5
46946: PUSH
46947: LD_VAR 0 1
46951: PPUSH
46952: CALL_OW 437
46956: PUSH
46957: LD_INT 1
46959: ARRAY
46960: PUSH
46961: LD_INT 3
46963: ARRAY
46964: EQUAL
46965: AND
46966: IFFALSE 46976
// result := true end ;
46968: LD_ADDR_VAR 0 3
46972: PUSH
46973: LD_INT 1
46975: ST_TO_ADDR
// end ;
46976: LD_VAR 0 3
46980: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46981: LD_INT 0
46983: PPUSH
// result := false ;
46984: LD_ADDR_VAR 0 4
46988: PUSH
46989: LD_INT 0
46991: ST_TO_ADDR
// if GetTaskList ( unit ) then
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 437
47001: IFFALSE 47088
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47003: LD_STRING M
47005: PUSH
47006: LD_VAR 0 1
47010: PPUSH
47011: CALL_OW 437
47015: PUSH
47016: LD_INT 1
47018: ARRAY
47019: PUSH
47020: LD_INT 1
47022: ARRAY
47023: EQUAL
47024: IFFALSE 47051
47026: PUSH
47027: LD_VAR 0 2
47031: PUSH
47032: LD_VAR 0 1
47036: PPUSH
47037: CALL_OW 437
47041: PUSH
47042: LD_INT 1
47044: ARRAY
47045: PUSH
47046: LD_INT 2
47048: ARRAY
47049: EQUAL
47050: AND
47051: IFFALSE 47078
47053: PUSH
47054: LD_VAR 0 3
47058: PUSH
47059: LD_VAR 0 1
47063: PPUSH
47064: CALL_OW 437
47068: PUSH
47069: LD_INT 1
47071: ARRAY
47072: PUSH
47073: LD_INT 3
47075: ARRAY
47076: EQUAL
47077: AND
47078: IFFALSE 47088
// result := true ;
47080: LD_ADDR_VAR 0 4
47084: PUSH
47085: LD_INT 1
47087: ST_TO_ADDR
// end ; end ;
47088: LD_VAR 0 4
47092: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47093: LD_INT 0
47095: PPUSH
47096: PPUSH
47097: PPUSH
47098: PPUSH
// if not unit or not area then
47099: LD_VAR 0 1
47103: NOT
47104: IFTRUE 47113
47106: PUSH
47107: LD_VAR 0 2
47111: NOT
47112: OR
47113: IFFALSE 47117
// exit ;
47115: GO 47293
// tmp := AreaToList ( area , i ) ;
47117: LD_ADDR_VAR 0 6
47121: PUSH
47122: LD_VAR 0 2
47126: PPUSH
47127: LD_VAR 0 5
47131: PPUSH
47132: CALL_OW 517
47136: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47137: LD_ADDR_VAR 0 5
47141: PUSH
47142: DOUBLE
47143: LD_INT 1
47145: DEC
47146: ST_TO_ADDR
47147: LD_VAR 0 6
47151: PUSH
47152: LD_INT 1
47154: ARRAY
47155: PUSH
47156: FOR_TO
47157: IFFALSE 47291
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47159: LD_ADDR_VAR 0 7
47163: PUSH
47164: LD_VAR 0 6
47168: PUSH
47169: LD_INT 1
47171: ARRAY
47172: PUSH
47173: LD_VAR 0 5
47177: ARRAY
47178: PUSH
47179: LD_VAR 0 6
47183: PUSH
47184: LD_INT 2
47186: ARRAY
47187: PUSH
47188: LD_VAR 0 5
47192: ARRAY
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47198: LD_INT 92
47200: PUSH
47201: LD_VAR 0 7
47205: PUSH
47206: LD_INT 1
47208: ARRAY
47209: PUSH
47210: LD_VAR 0 7
47214: PUSH
47215: LD_INT 2
47217: ARRAY
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: PPUSH
47228: CALL_OW 69
47232: PUSH
47233: LD_INT 0
47235: EQUAL
47236: IFFALSE 47289
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47238: LD_VAR 0 1
47242: PPUSH
47243: LD_VAR 0 7
47247: PUSH
47248: LD_INT 1
47250: ARRAY
47251: PPUSH
47252: LD_VAR 0 7
47256: PUSH
47257: LD_INT 2
47259: ARRAY
47260: PPUSH
47261: LD_VAR 0 3
47265: PPUSH
47266: CALL_OW 48
// result := IsPlaced ( unit ) ;
47270: LD_ADDR_VAR 0 4
47274: PUSH
47275: LD_VAR 0 1
47279: PPUSH
47280: CALL_OW 305
47284: ST_TO_ADDR
// exit ;
47285: POP
47286: POP
47287: GO 47293
// end ; end ;
47289: GO 47156
47291: POP
47292: POP
// end ;
47293: LD_VAR 0 4
47297: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47298: LD_INT 0
47300: PPUSH
47301: PPUSH
47302: PPUSH
// if not side or side > 8 then
47303: LD_VAR 0 1
47307: NOT
47308: IFTRUE 47320
47310: PUSH
47311: LD_VAR 0 1
47315: PUSH
47316: LD_INT 8
47318: GREATER
47319: OR
47320: IFFALSE 47324
// exit ;
47322: GO 47511
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47324: LD_ADDR_VAR 0 4
47328: PUSH
47329: LD_INT 22
47331: PUSH
47332: LD_VAR 0 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 21
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PPUSH
47355: CALL_OW 69
47359: ST_TO_ADDR
// if not tmp then
47360: LD_VAR 0 4
47364: NOT
47365: IFFALSE 47369
// exit ;
47367: GO 47511
// enable_addtolog := true ;
47369: LD_ADDR_OWVAR 81
47373: PUSH
47374: LD_INT 1
47376: ST_TO_ADDR
// AddToLog ( [ ) ;
47377: LD_STRING [
47379: PPUSH
47380: CALL_OW 561
// for i in tmp do
47384: LD_ADDR_VAR 0 3
47388: PUSH
47389: LD_VAR 0 4
47393: PUSH
47394: FOR_IN
47395: IFFALSE 47502
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47397: LD_STRING [
47399: PUSH
47400: LD_VAR 0 3
47404: PPUSH
47405: CALL_OW 266
47409: STR
47410: PUSH
47411: LD_STRING , 
47413: STR
47414: PUSH
47415: LD_VAR 0 3
47419: PPUSH
47420: CALL_OW 250
47424: STR
47425: PUSH
47426: LD_STRING , 
47428: STR
47429: PUSH
47430: LD_VAR 0 3
47434: PPUSH
47435: CALL_OW 251
47439: STR
47440: PUSH
47441: LD_STRING , 
47443: STR
47444: PUSH
47445: LD_VAR 0 3
47449: PPUSH
47450: CALL_OW 254
47454: STR
47455: PUSH
47456: LD_STRING , 
47458: STR
47459: PUSH
47460: LD_VAR 0 3
47464: PPUSH
47465: LD_INT 1
47467: PPUSH
47468: CALL_OW 268
47472: STR
47473: PUSH
47474: LD_STRING , 
47476: STR
47477: PUSH
47478: LD_VAR 0 3
47482: PPUSH
47483: LD_INT 2
47485: PPUSH
47486: CALL_OW 268
47490: STR
47491: PUSH
47492: LD_STRING ],
47494: STR
47495: PPUSH
47496: CALL_OW 561
// end ;
47500: GO 47394
47502: POP
47503: POP
// AddToLog ( ]; ) ;
47504: LD_STRING ];
47506: PPUSH
47507: CALL_OW 561
// end ;
47511: LD_VAR 0 2
47515: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47516: LD_INT 0
47518: PPUSH
47519: PPUSH
47520: PPUSH
47521: PPUSH
47522: PPUSH
// if not area or not rate or not max then
47523: LD_VAR 0 1
47527: NOT
47528: IFTRUE 47537
47530: PUSH
47531: LD_VAR 0 2
47535: NOT
47536: OR
47537: IFTRUE 47546
47539: PUSH
47540: LD_VAR 0 4
47544: NOT
47545: OR
47546: IFFALSE 47550
// exit ;
47548: GO 47739
// while 1 do
47550: LD_INT 1
47552: IFFALSE 47739
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47554: LD_ADDR_VAR 0 9
47558: PUSH
47559: LD_VAR 0 1
47563: PPUSH
47564: LD_INT 1
47566: PPUSH
47567: CALL_OW 287
47571: PUSH
47572: LD_INT 10
47574: MUL
47575: ST_TO_ADDR
// r := rate / 10 ;
47576: LD_ADDR_VAR 0 7
47580: PUSH
47581: LD_VAR 0 2
47585: PUSH
47586: LD_INT 10
47588: DIVREAL
47589: ST_TO_ADDR
// time := 1 1$00 ;
47590: LD_ADDR_VAR 0 8
47594: PUSH
47595: LD_INT 2100
47597: ST_TO_ADDR
// if amount < min then
47598: LD_VAR 0 9
47602: PUSH
47603: LD_VAR 0 3
47607: LESS
47608: IFFALSE 47626
// r := r * 2 else
47610: LD_ADDR_VAR 0 7
47614: PUSH
47615: LD_VAR 0 7
47619: PUSH
47620: LD_INT 2
47622: MUL
47623: ST_TO_ADDR
47624: GO 47652
// if amount > max then
47626: LD_VAR 0 9
47630: PUSH
47631: LD_VAR 0 4
47635: GREATER
47636: IFFALSE 47652
// r := r / 2 ;
47638: LD_ADDR_VAR 0 7
47642: PUSH
47643: LD_VAR 0 7
47647: PUSH
47648: LD_INT 2
47650: DIVREAL
47651: ST_TO_ADDR
// time := time / r ;
47652: LD_ADDR_VAR 0 8
47656: PUSH
47657: LD_VAR 0 8
47661: PUSH
47662: LD_VAR 0 7
47666: DIVREAL
47667: ST_TO_ADDR
// if time < 0 then
47668: LD_VAR 0 8
47672: PUSH
47673: LD_INT 0
47675: LESS
47676: IFFALSE 47693
// time := time * - 1 ;
47678: LD_ADDR_VAR 0 8
47682: PUSH
47683: LD_VAR 0 8
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: MUL
47692: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47693: LD_VAR 0 8
47697: PUSH
47698: LD_INT 35
47700: PPUSH
47701: LD_INT 875
47703: PPUSH
47704: CALL_OW 12
47708: PLUS
47709: PPUSH
47710: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47714: LD_INT 1
47716: PPUSH
47717: LD_INT 5
47719: PPUSH
47720: CALL_OW 12
47724: PPUSH
47725: LD_VAR 0 1
47729: PPUSH
47730: LD_INT 1
47732: PPUSH
47733: CALL_OW 55
// end ;
47737: GO 47550
// end ;
47739: LD_VAR 0 5
47743: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47744: LD_INT 0
47746: PPUSH
47747: PPUSH
47748: PPUSH
47749: PPUSH
47750: PPUSH
47751: PPUSH
47752: PPUSH
47753: PPUSH
// if not turrets or not factories then
47754: LD_VAR 0 1
47758: NOT
47759: IFTRUE 47768
47761: PUSH
47762: LD_VAR 0 2
47766: NOT
47767: OR
47768: IFFALSE 47772
// exit ;
47770: GO 48079
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47772: LD_ADDR_VAR 0 10
47776: PUSH
47777: LD_INT 5
47779: PUSH
47780: LD_INT 6
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 4
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: LD_INT 5
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 24
47814: PUSH
47815: LD_INT 25
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 23
47824: PUSH
47825: LD_INT 27
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 42
47838: PUSH
47839: LD_INT 43
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 44
47848: PUSH
47849: LD_INT 46
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 45
47858: PUSH
47859: LD_INT 47
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// result := [ ] ;
47876: LD_ADDR_VAR 0 3
47880: PUSH
47881: EMPTY
47882: ST_TO_ADDR
// for i in turrets do
47883: LD_ADDR_VAR 0 4
47887: PUSH
47888: LD_VAR 0 1
47892: PUSH
47893: FOR_IN
47894: IFFALSE 48077
// begin nat := GetNation ( i ) ;
47896: LD_ADDR_VAR 0 7
47900: PUSH
47901: LD_VAR 0 4
47905: PPUSH
47906: CALL_OW 248
47910: ST_TO_ADDR
// weapon := 0 ;
47911: LD_ADDR_VAR 0 8
47915: PUSH
47916: LD_INT 0
47918: ST_TO_ADDR
// if not nat then
47919: LD_VAR 0 7
47923: NOT
47924: IFFALSE 47928
// continue ;
47926: GO 47893
// for j in list [ nat ] do
47928: LD_ADDR_VAR 0 5
47932: PUSH
47933: LD_VAR 0 10
47937: PUSH
47938: LD_VAR 0 7
47942: ARRAY
47943: PUSH
47944: FOR_IN
47945: IFFALSE 47986
// if GetBWeapon ( i ) = j [ 1 ] then
47947: LD_VAR 0 4
47951: PPUSH
47952: CALL_OW 269
47956: PUSH
47957: LD_VAR 0 5
47961: PUSH
47962: LD_INT 1
47964: ARRAY
47965: EQUAL
47966: IFFALSE 47984
// begin weapon := j [ 2 ] ;
47968: LD_ADDR_VAR 0 8
47972: PUSH
47973: LD_VAR 0 5
47977: PUSH
47978: LD_INT 2
47980: ARRAY
47981: ST_TO_ADDR
// break ;
47982: GO 47986
// end ;
47984: GO 47944
47986: POP
47987: POP
// if not weapon then
47988: LD_VAR 0 8
47992: NOT
47993: IFFALSE 47997
// continue ;
47995: GO 47893
// for k in factories do
47997: LD_ADDR_VAR 0 6
48001: PUSH
48002: LD_VAR 0 2
48006: PUSH
48007: FOR_IN
48008: IFFALSE 48073
// begin weapons := AvailableWeaponList ( k ) ;
48010: LD_ADDR_VAR 0 9
48014: PUSH
48015: LD_VAR 0 6
48019: PPUSH
48020: CALL_OW 478
48024: ST_TO_ADDR
// if not weapons then
48025: LD_VAR 0 9
48029: NOT
48030: IFFALSE 48034
// continue ;
48032: GO 48007
// if weapon in weapons then
48034: LD_VAR 0 8
48038: PUSH
48039: LD_VAR 0 9
48043: IN
48044: IFFALSE 48071
// begin result := [ i , weapon ] ;
48046: LD_ADDR_VAR 0 3
48050: PUSH
48051: LD_VAR 0 4
48055: PUSH
48056: LD_VAR 0 8
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: ST_TO_ADDR
// exit ;
48065: POP
48066: POP
48067: POP
48068: POP
48069: GO 48079
// end ; end ;
48071: GO 48007
48073: POP
48074: POP
// end ;
48075: GO 47893
48077: POP
48078: POP
// end ;
48079: LD_VAR 0 3
48083: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48084: LD_INT 0
48086: PPUSH
// if not side or side > 8 then
48087: LD_VAR 0 3
48091: NOT
48092: IFTRUE 48104
48094: PUSH
48095: LD_VAR 0 3
48099: PUSH
48100: LD_INT 8
48102: GREATER
48103: OR
48104: IFFALSE 48108
// exit ;
48106: GO 48167
// if not range then
48108: LD_VAR 0 4
48112: NOT
48113: IFFALSE 48124
// range := - 12 ;
48115: LD_ADDR_VAR 0 4
48119: PUSH
48120: LD_INT 12
48122: NEG
48123: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48124: LD_VAR 0 1
48128: PPUSH
48129: LD_VAR 0 2
48133: PPUSH
48134: LD_VAR 0 3
48138: PPUSH
48139: LD_VAR 0 4
48143: PPUSH
48144: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48148: LD_VAR 0 1
48152: PPUSH
48153: LD_VAR 0 2
48157: PPUSH
48158: LD_VAR 0 3
48162: PPUSH
48163: CALL_OW 331
// end ;
48167: LD_VAR 0 5
48171: RET
// export function Video ( mode ) ; begin
48172: LD_INT 0
48174: PPUSH
// ingame_video = mode ;
48175: LD_ADDR_OWVAR 52
48179: PUSH
48180: LD_VAR 0 1
48184: ST_TO_ADDR
// interface_hidden = mode ;
48185: LD_ADDR_OWVAR 54
48189: PUSH
48190: LD_VAR 0 1
48194: ST_TO_ADDR
// end ;
48195: LD_VAR 0 2
48199: RET
// export function Join ( array , element ) ; begin
48200: LD_INT 0
48202: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48203: LD_ADDR_VAR 0 3
48207: PUSH
48208: LD_VAR 0 1
48212: PPUSH
48213: LD_VAR 0 1
48217: PUSH
48218: LD_INT 1
48220: PLUS
48221: PPUSH
48222: LD_VAR 0 2
48226: PPUSH
48227: CALL_OW 1
48231: ST_TO_ADDR
// end ;
48232: LD_VAR 0 3
48236: RET
// export function JoinUnion ( array , element ) ; begin
48237: LD_INT 0
48239: PPUSH
// result := array union element ;
48240: LD_ADDR_VAR 0 3
48244: PUSH
48245: LD_VAR 0 1
48249: PUSH
48250: LD_VAR 0 2
48254: UNION
48255: ST_TO_ADDR
// end ;
48256: LD_VAR 0 3
48260: RET
// export function GetBehemoths ( side ) ; begin
48261: LD_INT 0
48263: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48264: LD_ADDR_VAR 0 2
48268: PUSH
48269: LD_INT 22
48271: PUSH
48272: LD_VAR 0 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 31
48283: PUSH
48284: LD_INT 25
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PPUSH
48295: CALL_OW 69
48299: ST_TO_ADDR
// end ;
48300: LD_VAR 0 2
48304: RET
// export function Shuffle ( array ) ; var i , index ; begin
48305: LD_INT 0
48307: PPUSH
48308: PPUSH
48309: PPUSH
// result := [ ] ;
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: EMPTY
48316: ST_TO_ADDR
// if not array then
48317: LD_VAR 0 1
48321: NOT
48322: IFFALSE 48326
// exit ;
48324: GO 48425
// Randomize ;
48326: CALL_OW 10
// for i = array downto 1 do
48330: LD_ADDR_VAR 0 3
48334: PUSH
48335: DOUBLE
48336: LD_VAR 0 1
48340: INC
48341: ST_TO_ADDR
48342: LD_INT 1
48344: PUSH
48345: FOR_DOWNTO
48346: IFFALSE 48423
// begin index := rand ( 1 , array ) ;
48348: LD_ADDR_VAR 0 4
48352: PUSH
48353: LD_INT 1
48355: PPUSH
48356: LD_VAR 0 1
48360: PPUSH
48361: CALL_OW 12
48365: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48366: LD_ADDR_VAR 0 2
48370: PUSH
48371: LD_VAR 0 2
48375: PPUSH
48376: LD_VAR 0 2
48380: PUSH
48381: LD_INT 1
48383: PLUS
48384: PPUSH
48385: LD_VAR 0 1
48389: PUSH
48390: LD_VAR 0 4
48394: ARRAY
48395: PPUSH
48396: CALL_OW 2
48400: ST_TO_ADDR
// array := Delete ( array , index ) ;
48401: LD_ADDR_VAR 0 1
48405: PUSH
48406: LD_VAR 0 1
48410: PPUSH
48411: LD_VAR 0 4
48415: PPUSH
48416: CALL_OW 3
48420: ST_TO_ADDR
// end ;
48421: GO 48345
48423: POP
48424: POP
// end ;
48425: LD_VAR 0 2
48429: RET
// export function GetBaseMaterials ( base ) ; begin
48430: LD_INT 0
48432: PPUSH
// result := [ 0 , 0 , 0 ] ;
48433: LD_ADDR_VAR 0 2
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// if not base then
48452: LD_VAR 0 1
48456: NOT
48457: IFFALSE 48461
// exit ;
48459: GO 48510
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48461: LD_ADDR_VAR 0 2
48465: PUSH
48466: LD_VAR 0 1
48470: PPUSH
48471: LD_INT 1
48473: PPUSH
48474: CALL_OW 275
48478: PUSH
48479: LD_VAR 0 1
48483: PPUSH
48484: LD_INT 2
48486: PPUSH
48487: CALL_OW 275
48491: PUSH
48492: LD_VAR 0 1
48496: PPUSH
48497: LD_INT 3
48499: PPUSH
48500: CALL_OW 275
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: ST_TO_ADDR
// end ;
48510: LD_VAR 0 2
48514: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48515: LD_INT 0
48517: PPUSH
48518: PPUSH
// result := array ;
48519: LD_ADDR_VAR 0 3
48523: PUSH
48524: LD_VAR 0 1
48528: ST_TO_ADDR
// if size >= result then
48529: LD_VAR 0 2
48533: PUSH
48534: LD_VAR 0 3
48538: GREATEREQUAL
48539: IFFALSE 48543
// exit ;
48541: GO 48593
// if size then
48543: LD_VAR 0 2
48547: IFFALSE 48593
// for i := array downto size do
48549: LD_ADDR_VAR 0 4
48553: PUSH
48554: DOUBLE
48555: LD_VAR 0 1
48559: INC
48560: ST_TO_ADDR
48561: LD_VAR 0 2
48565: PUSH
48566: FOR_DOWNTO
48567: IFFALSE 48591
// result := Delete ( result , result ) ;
48569: LD_ADDR_VAR 0 3
48573: PUSH
48574: LD_VAR 0 3
48578: PPUSH
48579: LD_VAR 0 3
48583: PPUSH
48584: CALL_OW 3
48588: ST_TO_ADDR
48589: GO 48566
48591: POP
48592: POP
// end ;
48593: LD_VAR 0 3
48597: RET
// export function ComExit ( unit ) ; var tmp ; begin
48598: LD_INT 0
48600: PPUSH
48601: PPUSH
// if not IsInUnit ( unit ) then
48602: LD_VAR 0 1
48606: PPUSH
48607: CALL_OW 310
48611: NOT
48612: IFFALSE 48616
// exit ;
48614: GO 48676
// tmp := IsInUnit ( unit ) ;
48616: LD_ADDR_VAR 0 3
48620: PUSH
48621: LD_VAR 0 1
48625: PPUSH
48626: CALL_OW 310
48630: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48631: LD_VAR 0 3
48635: PPUSH
48636: CALL_OW 247
48640: PUSH
48641: LD_INT 2
48643: EQUAL
48644: IFFALSE 48657
// ComExitVehicle ( unit ) else
48646: LD_VAR 0 1
48650: PPUSH
48651: CALL_OW 121
48655: GO 48666
// ComExitBuilding ( unit ) ;
48657: LD_VAR 0 1
48661: PPUSH
48662: CALL_OW 122
// result := tmp ;
48666: LD_ADDR_VAR 0 2
48670: PUSH
48671: LD_VAR 0 3
48675: ST_TO_ADDR
// end ;
48676: LD_VAR 0 2
48680: RET
// export function ComExitAll ( units ) ; var i ; begin
48681: LD_INT 0
48683: PPUSH
48684: PPUSH
// if not units then
48685: LD_VAR 0 1
48689: NOT
48690: IFFALSE 48694
// exit ;
48692: GO 48720
// for i in units do
48694: LD_ADDR_VAR 0 3
48698: PUSH
48699: LD_VAR 0 1
48703: PUSH
48704: FOR_IN
48705: IFFALSE 48718
// ComExit ( i ) ;
48707: LD_VAR 0 3
48711: PPUSH
48712: CALL 48598 0 1
48716: GO 48704
48718: POP
48719: POP
// end ;
48720: LD_VAR 0 2
48724: RET
// export function ResetHc ; begin
48725: LD_INT 0
48727: PPUSH
// InitHc ;
48728: CALL_OW 19
// hc_importance := 0 ;
48732: LD_ADDR_OWVAR 32
48736: PUSH
48737: LD_INT 0
48739: ST_TO_ADDR
// end ;
48740: LD_VAR 0 1
48744: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48745: LD_INT 0
48747: PPUSH
48748: PPUSH
48749: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48750: LD_ADDR_VAR 0 6
48754: PUSH
48755: LD_VAR 0 1
48759: PUSH
48760: LD_VAR 0 3
48764: PLUS
48765: PUSH
48766: LD_INT 2
48768: DIV
48769: ST_TO_ADDR
// if _x < 0 then
48770: LD_VAR 0 6
48774: PUSH
48775: LD_INT 0
48777: LESS
48778: IFFALSE 48795
// _x := _x * - 1 ;
48780: LD_ADDR_VAR 0 6
48784: PUSH
48785: LD_VAR 0 6
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: MUL
48794: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48795: LD_ADDR_VAR 0 7
48799: PUSH
48800: LD_VAR 0 2
48804: PUSH
48805: LD_VAR 0 4
48809: PLUS
48810: PUSH
48811: LD_INT 2
48813: DIV
48814: ST_TO_ADDR
// if _y < 0 then
48815: LD_VAR 0 7
48819: PUSH
48820: LD_INT 0
48822: LESS
48823: IFFALSE 48840
// _y := _y * - 1 ;
48825: LD_ADDR_VAR 0 7
48829: PUSH
48830: LD_VAR 0 7
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: MUL
48839: ST_TO_ADDR
// result := [ _x , _y ] ;
48840: LD_ADDR_VAR 0 5
48844: PUSH
48845: LD_VAR 0 6
48849: PUSH
48850: LD_VAR 0 7
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// end ;
48859: LD_VAR 0 5
48863: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48864: LD_INT 0
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
// task := GetTaskList ( unit ) ;
48870: LD_ADDR_VAR 0 7
48874: PUSH
48875: LD_VAR 0 1
48879: PPUSH
48880: CALL_OW 437
48884: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48885: LD_VAR 0 7
48889: NOT
48890: IFFALSE 48909
48892: PUSH
48893: LD_VAR 0 1
48897: PPUSH
48898: LD_VAR 0 2
48902: PPUSH
48903: CALL_OW 308
48907: NOT
48908: AND
48909: IFFALSE 48913
// exit ;
48911: GO 49031
// if IsInArea ( unit , area ) then
48913: LD_VAR 0 1
48917: PPUSH
48918: LD_VAR 0 2
48922: PPUSH
48923: CALL_OW 308
48927: IFFALSE 48945
// begin ComMoveToArea ( unit , goAway ) ;
48929: LD_VAR 0 1
48933: PPUSH
48934: LD_VAR 0 3
48938: PPUSH
48939: CALL_OW 113
// exit ;
48943: GO 49031
// end ; if task [ 1 ] [ 1 ] <> M then
48945: LD_VAR 0 7
48949: PUSH
48950: LD_INT 1
48952: ARRAY
48953: PUSH
48954: LD_INT 1
48956: ARRAY
48957: PUSH
48958: LD_STRING M
48960: NONEQUAL
48961: IFFALSE 48965
// exit ;
48963: GO 49031
// x := task [ 1 ] [ 2 ] ;
48965: LD_ADDR_VAR 0 5
48969: PUSH
48970: LD_VAR 0 7
48974: PUSH
48975: LD_INT 1
48977: ARRAY
48978: PUSH
48979: LD_INT 2
48981: ARRAY
48982: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48983: LD_ADDR_VAR 0 6
48987: PUSH
48988: LD_VAR 0 7
48992: PUSH
48993: LD_INT 1
48995: ARRAY
48996: PUSH
48997: LD_INT 3
48999: ARRAY
49000: ST_TO_ADDR
// if InArea ( x , y , area ) then
49001: LD_VAR 0 5
49005: PPUSH
49006: LD_VAR 0 6
49010: PPUSH
49011: LD_VAR 0 2
49015: PPUSH
49016: CALL_OW 309
49020: IFFALSE 49031
// ComStop ( unit ) ;
49022: LD_VAR 0 1
49026: PPUSH
49027: CALL_OW 141
// end ;
49031: LD_VAR 0 4
49035: RET
// export function Abs ( value ) ; begin
49036: LD_INT 0
49038: PPUSH
// result := value ;
49039: LD_ADDR_VAR 0 2
49043: PUSH
49044: LD_VAR 0 1
49048: ST_TO_ADDR
// if value < 0 then
49049: LD_VAR 0 1
49053: PUSH
49054: LD_INT 0
49056: LESS
49057: IFFALSE 49074
// result := value * - 1 ;
49059: LD_ADDR_VAR 0 2
49063: PUSH
49064: LD_VAR 0 1
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: MUL
49073: ST_TO_ADDR
// end ;
49074: LD_VAR 0 2
49078: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49079: LD_INT 0
49081: PPUSH
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
// if not unit or not building then
49089: LD_VAR 0 1
49093: NOT
49094: IFTRUE 49103
49096: PUSH
49097: LD_VAR 0 2
49101: NOT
49102: OR
49103: IFFALSE 49107
// exit ;
49105: GO 49335
// x := GetX ( building ) ;
49107: LD_ADDR_VAR 0 4
49111: PUSH
49112: LD_VAR 0 2
49116: PPUSH
49117: CALL_OW 250
49121: ST_TO_ADDR
// y := GetY ( building ) ;
49122: LD_ADDR_VAR 0 6
49126: PUSH
49127: LD_VAR 0 2
49131: PPUSH
49132: CALL_OW 251
49136: ST_TO_ADDR
// d := GetDir ( building ) ;
49137: LD_ADDR_VAR 0 8
49141: PUSH
49142: LD_VAR 0 2
49146: PPUSH
49147: CALL_OW 254
49151: ST_TO_ADDR
// r := 4 ;
49152: LD_ADDR_VAR 0 9
49156: PUSH
49157: LD_INT 4
49159: ST_TO_ADDR
// for i := 1 to 5 do
49160: LD_ADDR_VAR 0 10
49164: PUSH
49165: DOUBLE
49166: LD_INT 1
49168: DEC
49169: ST_TO_ADDR
49170: LD_INT 5
49172: PUSH
49173: FOR_TO
49174: IFFALSE 49333
// begin _x := ShiftX ( x , d , r + i ) ;
49176: LD_ADDR_VAR 0 5
49180: PUSH
49181: LD_VAR 0 4
49185: PPUSH
49186: LD_VAR 0 8
49190: PPUSH
49191: LD_VAR 0 9
49195: PUSH
49196: LD_VAR 0 10
49200: PLUS
49201: PPUSH
49202: CALL_OW 272
49206: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49207: LD_ADDR_VAR 0 7
49211: PUSH
49212: LD_VAR 0 6
49216: PPUSH
49217: LD_VAR 0 8
49221: PPUSH
49222: LD_VAR 0 9
49226: PUSH
49227: LD_VAR 0 10
49231: PLUS
49232: PPUSH
49233: CALL_OW 273
49237: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49238: LD_VAR 0 5
49242: PPUSH
49243: LD_VAR 0 7
49247: PPUSH
49248: CALL_OW 488
49252: IFFALSE 49287
49254: PUSH
49255: LD_VAR 0 5
49259: PPUSH
49260: LD_VAR 0 7
49264: PPUSH
49265: CALL_OW 428
49269: PPUSH
49270: CALL_OW 247
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: IN
49285: NOT
49286: AND
49287: IFFALSE 49331
// begin ComMoveXY ( unit , _x , _y ) ;
49289: LD_VAR 0 1
49293: PPUSH
49294: LD_VAR 0 5
49298: PPUSH
49299: LD_VAR 0 7
49303: PPUSH
49304: CALL_OW 111
// result := [ _x , _y ] ;
49308: LD_ADDR_VAR 0 3
49312: PUSH
49313: LD_VAR 0 5
49317: PUSH
49318: LD_VAR 0 7
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: ST_TO_ADDR
// exit ;
49327: POP
49328: POP
49329: GO 49335
// end ; end ;
49331: GO 49173
49333: POP
49334: POP
// end ;
49335: LD_VAR 0 3
49339: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49340: LD_INT 0
49342: PPUSH
49343: PPUSH
49344: PPUSH
// result := 0 ;
49345: LD_ADDR_VAR 0 3
49349: PUSH
49350: LD_INT 0
49352: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49353: LD_VAR 0 1
49357: PUSH
49358: LD_INT 0
49360: LESS
49361: IFTRUE 49373
49363: PUSH
49364: LD_VAR 0 1
49368: PUSH
49369: LD_INT 8
49371: GREATER
49372: OR
49373: IFTRUE 49385
49375: PUSH
49376: LD_VAR 0 2
49380: PUSH
49381: LD_INT 0
49383: LESS
49384: OR
49385: IFTRUE 49397
49387: PUSH
49388: LD_VAR 0 2
49392: PUSH
49393: LD_INT 8
49395: GREATER
49396: OR
49397: IFFALSE 49401
// exit ;
49399: GO 49476
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49401: LD_ADDR_VAR 0 4
49405: PUSH
49406: LD_INT 22
49408: PUSH
49409: LD_VAR 0 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PPUSH
49418: CALL_OW 69
49422: PUSH
49423: FOR_IN
49424: IFFALSE 49474
// begin un := UnitShoot ( i ) ;
49426: LD_ADDR_VAR 0 5
49430: PUSH
49431: LD_VAR 0 4
49435: PPUSH
49436: CALL_OW 504
49440: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49441: LD_VAR 0 5
49445: PPUSH
49446: CALL_OW 255
49450: PUSH
49451: LD_VAR 0 1
49455: EQUAL
49456: IFFALSE 49472
// begin result := un ;
49458: LD_ADDR_VAR 0 3
49462: PUSH
49463: LD_VAR 0 5
49467: ST_TO_ADDR
// exit ;
49468: POP
49469: POP
49470: GO 49476
// end ; end ;
49472: GO 49423
49474: POP
49475: POP
// end ;
49476: LD_VAR 0 3
49480: RET
// export function GetCargoBay ( units ) ; begin
49481: LD_INT 0
49483: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49484: LD_ADDR_VAR 0 2
49488: PUSH
49489: LD_VAR 0 1
49493: PPUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 34
49499: PUSH
49500: LD_INT 12
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 34
49509: PUSH
49510: LD_INT 51
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 34
49519: PUSH
49520: LD_INT 32
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 34
49529: PUSH
49530: LD_INT 89
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: PPUSH
49544: CALL_OW 72
49548: ST_TO_ADDR
// end ;
49549: LD_VAR 0 2
49553: RET
// export function Negate ( value ) ; begin
49554: LD_INT 0
49556: PPUSH
// result := not value ;
49557: LD_ADDR_VAR 0 2
49561: PUSH
49562: LD_VAR 0 1
49566: NOT
49567: ST_TO_ADDR
// end ;
49568: LD_VAR 0 2
49572: RET
// export function Inc ( value ) ; begin
49573: LD_INT 0
49575: PPUSH
// result := value + 1 ;
49576: LD_ADDR_VAR 0 2
49580: PUSH
49581: LD_VAR 0 1
49585: PUSH
49586: LD_INT 1
49588: PLUS
49589: ST_TO_ADDR
// end ;
49590: LD_VAR 0 2
49594: RET
// export function Dec ( value ) ; begin
49595: LD_INT 0
49597: PPUSH
// result := value - 1 ;
49598: LD_ADDR_VAR 0 2
49602: PUSH
49603: LD_VAR 0 1
49607: PUSH
49608: LD_INT 1
49610: MINUS
49611: ST_TO_ADDR
// end ;
49612: LD_VAR 0 2
49616: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49617: LD_INT 0
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_VAR 0 2
49636: PPUSH
49637: CALL_OW 488
49641: NOT
49642: IFTRUE 49661
49644: PUSH
49645: LD_VAR 0 3
49649: PPUSH
49650: LD_VAR 0 4
49654: PPUSH
49655: CALL_OW 488
49659: NOT
49660: OR
49661: IFFALSE 49674
// begin result := - 1 ;
49663: LD_ADDR_VAR 0 5
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: ST_TO_ADDR
// exit ;
49672: GO 49909
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49674: LD_ADDR_VAR 0 12
49678: PUSH
49679: LD_VAR 0 1
49683: PPUSH
49684: LD_VAR 0 2
49688: PPUSH
49689: LD_VAR 0 3
49693: PPUSH
49694: LD_VAR 0 4
49698: PPUSH
49699: CALL 48745 0 4
49703: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49704: LD_ADDR_VAR 0 11
49708: PUSH
49709: LD_VAR 0 1
49713: PPUSH
49714: LD_VAR 0 2
49718: PPUSH
49719: LD_VAR 0 12
49723: PUSH
49724: LD_INT 1
49726: ARRAY
49727: PPUSH
49728: LD_VAR 0 12
49732: PUSH
49733: LD_INT 2
49735: ARRAY
49736: PPUSH
49737: CALL_OW 298
49741: ST_TO_ADDR
// distance := 9999 ;
49742: LD_ADDR_VAR 0 10
49746: PUSH
49747: LD_INT 9999
49749: ST_TO_ADDR
// for i := 0 to 5 do
49750: LD_ADDR_VAR 0 6
49754: PUSH
49755: DOUBLE
49756: LD_INT 0
49758: DEC
49759: ST_TO_ADDR
49760: LD_INT 5
49762: PUSH
49763: FOR_TO
49764: IFFALSE 49907
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49766: LD_ADDR_VAR 0 7
49770: PUSH
49771: LD_VAR 0 1
49775: PPUSH
49776: LD_VAR 0 6
49780: PPUSH
49781: LD_VAR 0 11
49785: PPUSH
49786: CALL_OW 272
49790: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49791: LD_ADDR_VAR 0 8
49795: PUSH
49796: LD_VAR 0 2
49800: PPUSH
49801: LD_VAR 0 6
49805: PPUSH
49806: LD_VAR 0 11
49810: PPUSH
49811: CALL_OW 273
49815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49816: LD_VAR 0 7
49820: PPUSH
49821: LD_VAR 0 8
49825: PPUSH
49826: CALL_OW 488
49830: NOT
49831: IFFALSE 49835
// continue ;
49833: GO 49763
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49835: LD_ADDR_VAR 0 9
49839: PUSH
49840: LD_VAR 0 12
49844: PUSH
49845: LD_INT 1
49847: ARRAY
49848: PPUSH
49849: LD_VAR 0 12
49853: PUSH
49854: LD_INT 2
49856: ARRAY
49857: PPUSH
49858: LD_VAR 0 7
49862: PPUSH
49863: LD_VAR 0 8
49867: PPUSH
49868: CALL_OW 298
49872: ST_TO_ADDR
// if tmp < distance then
49873: LD_VAR 0 9
49877: PUSH
49878: LD_VAR 0 10
49882: LESS
49883: IFFALSE 49905
// begin result := i ;
49885: LD_ADDR_VAR 0 5
49889: PUSH
49890: LD_VAR 0 6
49894: ST_TO_ADDR
// distance := tmp ;
49895: LD_ADDR_VAR 0 10
49899: PUSH
49900: LD_VAR 0 9
49904: ST_TO_ADDR
// end ; end ;
49905: GO 49763
49907: POP
49908: POP
// end ;
49909: LD_VAR 0 5
49913: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49914: LD_INT 0
49916: PPUSH
49917: PPUSH
// if not driver or not IsInUnit ( driver ) then
49918: LD_VAR 0 1
49922: NOT
49923: IFTRUE 49937
49925: PUSH
49926: LD_VAR 0 1
49930: PPUSH
49931: CALL_OW 310
49935: NOT
49936: OR
49937: IFFALSE 49941
// exit ;
49939: GO 50031
// vehicle := IsInUnit ( driver ) ;
49941: LD_ADDR_VAR 0 3
49945: PUSH
49946: LD_VAR 0 1
49950: PPUSH
49951: CALL_OW 310
49955: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49956: LD_VAR 0 1
49960: PPUSH
49961: LD_STRING \
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: PUSH
49991: LD_STRING E
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_VAR 0 3
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PPUSH
50027: CALL_OW 446
// end ;
50031: LD_VAR 0 2
50035: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50036: LD_INT 0
50038: PPUSH
50039: PPUSH
// if not driver or not IsInUnit ( driver ) then
50040: LD_VAR 0 1
50044: NOT
50045: IFTRUE 50059
50047: PUSH
50048: LD_VAR 0 1
50052: PPUSH
50053: CALL_OW 310
50057: NOT
50058: OR
50059: IFFALSE 50063
// exit ;
50061: GO 50153
// vehicle := IsInUnit ( driver ) ;
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_VAR 0 1
50072: PPUSH
50073: CALL_OW 310
50077: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50078: LD_VAR 0 1
50082: PPUSH
50083: LD_STRING \
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: PUSH
50113: LD_STRING E
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_VAR 0 3
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PPUSH
50149: CALL_OW 447
// end ;
50153: LD_VAR 0 2
50157: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50158: LD_INT 0
50160: PPUSH
50161: PPUSH
50162: PPUSH
// tmp := [ ] ;
50163: LD_ADDR_VAR 0 5
50167: PUSH
50168: EMPTY
50169: ST_TO_ADDR
// for i in units do
50170: LD_ADDR_VAR 0 4
50174: PUSH
50175: LD_VAR 0 1
50179: PUSH
50180: FOR_IN
50181: IFFALSE 50219
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50183: LD_ADDR_VAR 0 5
50187: PUSH
50188: LD_VAR 0 5
50192: PPUSH
50193: LD_VAR 0 5
50197: PUSH
50198: LD_INT 1
50200: PLUS
50201: PPUSH
50202: LD_VAR 0 4
50206: PPUSH
50207: CALL_OW 256
50211: PPUSH
50212: CALL_OW 2
50216: ST_TO_ADDR
50217: GO 50180
50219: POP
50220: POP
// if not tmp then
50221: LD_VAR 0 5
50225: NOT
50226: IFFALSE 50230
// exit ;
50228: GO 50278
// if asc then
50230: LD_VAR 0 2
50234: IFFALSE 50258
// result := SortListByListAsc ( units , tmp ) else
50236: LD_ADDR_VAR 0 3
50240: PUSH
50241: LD_VAR 0 1
50245: PPUSH
50246: LD_VAR 0 5
50250: PPUSH
50251: CALL_OW 76
50255: ST_TO_ADDR
50256: GO 50278
// result := SortListByListDesc ( units , tmp ) ;
50258: LD_ADDR_VAR 0 3
50262: PUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: LD_VAR 0 5
50272: PPUSH
50273: CALL_OW 77
50277: ST_TO_ADDR
// end ;
50278: LD_VAR 0 3
50282: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50283: LD_INT 0
50285: PPUSH
50286: PPUSH
// task := GetTaskList ( mech ) ;
50287: LD_ADDR_VAR 0 4
50291: PUSH
50292: LD_VAR 0 1
50296: PPUSH
50297: CALL_OW 437
50301: ST_TO_ADDR
// if not task then
50302: LD_VAR 0 4
50306: NOT
50307: IFFALSE 50311
// exit ;
50309: GO 50355
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50311: LD_ADDR_VAR 0 3
50315: PUSH
50316: LD_VAR 0 4
50320: PUSH
50321: LD_INT 1
50323: ARRAY
50324: PUSH
50325: LD_INT 1
50327: ARRAY
50328: PUSH
50329: LD_STRING r
50331: EQUAL
50332: IFFALSE 50354
50334: PUSH
50335: LD_VAR 0 4
50339: PUSH
50340: LD_INT 1
50342: ARRAY
50343: PUSH
50344: LD_INT 4
50346: ARRAY
50347: PUSH
50348: LD_VAR 0 2
50352: EQUAL
50353: AND
50354: ST_TO_ADDR
// end ;
50355: LD_VAR 0 3
50359: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50360: LD_INT 0
50362: PPUSH
// SetDir ( unit , d ) ;
50363: LD_VAR 0 1
50367: PPUSH
50368: LD_VAR 0 4
50372: PPUSH
50373: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50377: LD_ADDR_VAR 0 6
50381: PUSH
50382: LD_VAR 0 1
50386: PPUSH
50387: LD_VAR 0 2
50391: PPUSH
50392: LD_VAR 0 3
50396: PPUSH
50397: LD_VAR 0 5
50401: PPUSH
50402: CALL_OW 48
50406: ST_TO_ADDR
// end ;
50407: LD_VAR 0 6
50411: RET
// export function ToNaturalNumber ( number ) ; begin
50412: LD_INT 0
50414: PPUSH
// result := number div 1 ;
50415: LD_ADDR_VAR 0 2
50419: PUSH
50420: LD_VAR 0 1
50424: PUSH
50425: LD_INT 1
50427: DIV
50428: ST_TO_ADDR
// if number < 0 then
50429: LD_VAR 0 1
50433: PUSH
50434: LD_INT 0
50436: LESS
50437: IFFALSE 50447
// result := 0 ;
50439: LD_ADDR_VAR 0 2
50443: PUSH
50444: LD_INT 0
50446: ST_TO_ADDR
// end ;
50447: LD_VAR 0 2
50451: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50452: LD_INT 0
50454: PPUSH
50455: PPUSH
50456: PPUSH
// if not buildings then
50457: LD_VAR 0 1
50461: NOT
50462: IFFALSE 50466
// exit ;
50464: GO 50581
// tmp := [ ] ;
50466: LD_ADDR_VAR 0 5
50470: PUSH
50471: EMPTY
50472: ST_TO_ADDR
// for b in buildings do
50473: LD_ADDR_VAR 0 4
50477: PUSH
50478: LD_VAR 0 1
50482: PUSH
50483: FOR_IN
50484: IFFALSE 50522
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50486: LD_ADDR_VAR 0 5
50490: PUSH
50491: LD_VAR 0 5
50495: PPUSH
50496: LD_VAR 0 5
50500: PUSH
50501: LD_INT 1
50503: PLUS
50504: PPUSH
50505: LD_VAR 0 4
50509: PPUSH
50510: CALL_OW 266
50514: PPUSH
50515: CALL_OW 1
50519: ST_TO_ADDR
50520: GO 50483
50522: POP
50523: POP
// if not tmp then
50524: LD_VAR 0 5
50528: NOT
50529: IFFALSE 50533
// exit ;
50531: GO 50581
// if asc then
50533: LD_VAR 0 2
50537: IFFALSE 50561
// result := SortListByListAsc ( buildings , tmp ) else
50539: LD_ADDR_VAR 0 3
50543: PUSH
50544: LD_VAR 0 1
50548: PPUSH
50549: LD_VAR 0 5
50553: PPUSH
50554: CALL_OW 76
50558: ST_TO_ADDR
50559: GO 50581
// result := SortListByListDesc ( buildings , tmp ) ;
50561: LD_ADDR_VAR 0 3
50565: PUSH
50566: LD_VAR 0 1
50570: PPUSH
50571: LD_VAR 0 5
50575: PPUSH
50576: CALL_OW 77
50580: ST_TO_ADDR
// end ;
50581: LD_VAR 0 3
50585: RET
// export function SortByClass ( units , class ) ; var un ; begin
50586: LD_INT 0
50588: PPUSH
50589: PPUSH
// if not units or not class then
50590: LD_VAR 0 1
50594: NOT
50595: IFTRUE 50604
50597: PUSH
50598: LD_VAR 0 2
50602: NOT
50603: OR
50604: IFFALSE 50608
// exit ;
50606: GO 50703
// result := [ ] ;
50608: LD_ADDR_VAR 0 3
50612: PUSH
50613: EMPTY
50614: ST_TO_ADDR
// for un in units do
50615: LD_ADDR_VAR 0 4
50619: PUSH
50620: LD_VAR 0 1
50624: PUSH
50625: FOR_IN
50626: IFFALSE 50701
// if GetClass ( un ) = class then
50628: LD_VAR 0 4
50632: PPUSH
50633: CALL_OW 257
50637: PUSH
50638: LD_VAR 0 2
50642: EQUAL
50643: IFFALSE 50670
// result := Insert ( result , 1 , un ) else
50645: LD_ADDR_VAR 0 3
50649: PUSH
50650: LD_VAR 0 3
50654: PPUSH
50655: LD_INT 1
50657: PPUSH
50658: LD_VAR 0 4
50662: PPUSH
50663: CALL_OW 2
50667: ST_TO_ADDR
50668: GO 50699
// result := Replace ( result , result + 1 , un ) ;
50670: LD_ADDR_VAR 0 3
50674: PUSH
50675: LD_VAR 0 3
50679: PPUSH
50680: LD_VAR 0 3
50684: PUSH
50685: LD_INT 1
50687: PLUS
50688: PPUSH
50689: LD_VAR 0 4
50693: PPUSH
50694: CALL_OW 1
50698: ST_TO_ADDR
50699: GO 50625
50701: POP
50702: POP
// end ;
50703: LD_VAR 0 3
50707: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50708: LD_INT 0
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
// result := [ ] ;
50717: LD_ADDR_VAR 0 4
50721: PUSH
50722: EMPTY
50723: ST_TO_ADDR
// if x - r < 0 then
50724: LD_VAR 0 1
50728: PUSH
50729: LD_VAR 0 3
50733: MINUS
50734: PUSH
50735: LD_INT 0
50737: LESS
50738: IFFALSE 50750
// min_x := 0 else
50740: LD_ADDR_VAR 0 8
50744: PUSH
50745: LD_INT 0
50747: ST_TO_ADDR
50748: GO 50766
// min_x := x - r ;
50750: LD_ADDR_VAR 0 8
50754: PUSH
50755: LD_VAR 0 1
50759: PUSH
50760: LD_VAR 0 3
50764: MINUS
50765: ST_TO_ADDR
// if y - r < 0 then
50766: LD_VAR 0 2
50770: PUSH
50771: LD_VAR 0 3
50775: MINUS
50776: PUSH
50777: LD_INT 0
50779: LESS
50780: IFFALSE 50792
// min_y := 0 else
50782: LD_ADDR_VAR 0 7
50786: PUSH
50787: LD_INT 0
50789: ST_TO_ADDR
50790: GO 50808
// min_y := y - r ;
50792: LD_ADDR_VAR 0 7
50796: PUSH
50797: LD_VAR 0 2
50801: PUSH
50802: LD_VAR 0 3
50806: MINUS
50807: ST_TO_ADDR
// max_x := x + r ;
50808: LD_ADDR_VAR 0 9
50812: PUSH
50813: LD_VAR 0 1
50817: PUSH
50818: LD_VAR 0 3
50822: PLUS
50823: ST_TO_ADDR
// max_y := y + r ;
50824: LD_ADDR_VAR 0 10
50828: PUSH
50829: LD_VAR 0 2
50833: PUSH
50834: LD_VAR 0 3
50838: PLUS
50839: ST_TO_ADDR
// for _x = min_x to max_x do
50840: LD_ADDR_VAR 0 5
50844: PUSH
50845: DOUBLE
50846: LD_VAR 0 8
50850: DEC
50851: ST_TO_ADDR
50852: LD_VAR 0 9
50856: PUSH
50857: FOR_TO
50858: IFFALSE 50959
// for _y = min_y to max_y do
50860: LD_ADDR_VAR 0 6
50864: PUSH
50865: DOUBLE
50866: LD_VAR 0 7
50870: DEC
50871: ST_TO_ADDR
50872: LD_VAR 0 10
50876: PUSH
50877: FOR_TO
50878: IFFALSE 50955
// begin if not ValidHex ( _x , _y ) then
50880: LD_VAR 0 5
50884: PPUSH
50885: LD_VAR 0 6
50889: PPUSH
50890: CALL_OW 488
50894: NOT
50895: IFFALSE 50899
// continue ;
50897: GO 50877
// if GetResourceTypeXY ( _x , _y ) then
50899: LD_VAR 0 5
50903: PPUSH
50904: LD_VAR 0 6
50908: PPUSH
50909: CALL_OW 283
50913: IFFALSE 50953
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50915: LD_ADDR_VAR 0 4
50919: PUSH
50920: LD_VAR 0 4
50924: PPUSH
50925: LD_VAR 0 4
50929: PUSH
50930: LD_INT 1
50932: PLUS
50933: PPUSH
50934: LD_VAR 0 5
50938: PUSH
50939: LD_VAR 0 6
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PPUSH
50948: CALL_OW 1
50952: ST_TO_ADDR
// end ;
50953: GO 50877
50955: POP
50956: POP
50957: GO 50857
50959: POP
50960: POP
// end ;
50961: LD_VAR 0 4
50965: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50966: LD_INT 0
50968: PPUSH
50969: PPUSH
50970: PPUSH
50971: PPUSH
50972: PPUSH
50973: PPUSH
50974: PPUSH
50975: PPUSH
// if not units then
50976: LD_VAR 0 1
50980: NOT
50981: IFFALSE 50985
// exit ;
50983: GO 51517
// result := UnitFilter ( units , [ f_ok ] ) ;
50985: LD_ADDR_VAR 0 3
50989: PUSH
50990: LD_VAR 0 1
50994: PPUSH
50995: LD_INT 50
50997: PUSH
50998: EMPTY
50999: LIST
51000: PPUSH
51001: CALL_OW 72
51005: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51006: LD_ADDR_VAR 0 8
51010: PUSH
51011: LD_VAR 0 1
51015: PUSH
51016: LD_INT 1
51018: ARRAY
51019: PPUSH
51020: CALL_OW 255
51024: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51025: LD_ADDR_VAR 0 10
51029: PUSH
51030: LD_INT 29
51032: PUSH
51033: LD_INT 91
51035: PUSH
51036: LD_INT 49
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: LIST
51043: ST_TO_ADDR
// if not result then
51044: LD_VAR 0 3
51048: NOT
51049: IFFALSE 51053
// exit ;
51051: GO 51517
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51053: LD_ADDR_VAR 0 5
51057: PUSH
51058: LD_INT 81
51060: PUSH
51061: LD_VAR 0 8
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PPUSH
51070: CALL_OW 69
51074: ST_TO_ADDR
// for i in result do
51075: LD_ADDR_VAR 0 4
51079: PUSH
51080: LD_VAR 0 3
51084: PUSH
51085: FOR_IN
51086: IFFALSE 51515
// begin tag := GetTag ( i ) + 1 ;
51088: LD_ADDR_VAR 0 9
51092: PUSH
51093: LD_VAR 0 4
51097: PPUSH
51098: CALL_OW 110
51102: PUSH
51103: LD_INT 1
51105: PLUS
51106: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51107: LD_ADDR_VAR 0 7
51111: PUSH
51112: LD_VAR 0 4
51116: PPUSH
51117: CALL_OW 250
51121: PPUSH
51122: LD_VAR 0 4
51126: PPUSH
51127: CALL_OW 251
51131: PPUSH
51132: LD_INT 4
51134: PPUSH
51135: CALL 50708 0 3
51139: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51140: LD_VAR 0 4
51144: PPUSH
51145: CALL_OW 247
51149: PUSH
51150: LD_INT 2
51152: EQUAL
51153: IFFALSE 51165
51155: PUSH
51156: LD_VAR 0 7
51160: PUSH
51161: LD_INT 2
51163: GREATER
51164: AND
51165: IFFALSE 51185
51167: PUSH
51168: LD_VAR 0 4
51172: PPUSH
51173: CALL_OW 264
51177: PUSH
51178: LD_VAR 0 10
51182: IN
51183: NOT
51184: AND
51185: IFFALSE 51224
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51187: LD_VAR 0 4
51191: PPUSH
51192: LD_VAR 0 7
51196: PUSH
51197: LD_INT 1
51199: ARRAY
51200: PUSH
51201: LD_INT 1
51203: ARRAY
51204: PPUSH
51205: LD_VAR 0 7
51209: PUSH
51210: LD_INT 1
51212: ARRAY
51213: PUSH
51214: LD_INT 2
51216: ARRAY
51217: PPUSH
51218: CALL_OW 116
51222: GO 51513
// if path > tag then
51224: LD_VAR 0 2
51228: PUSH
51229: LD_VAR 0 9
51233: GREATER
51234: IFFALSE 51442
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51236: LD_ADDR_VAR 0 6
51240: PUSH
51241: LD_VAR 0 5
51245: PPUSH
51246: LD_INT 91
51248: PUSH
51249: LD_VAR 0 4
51253: PUSH
51254: LD_INT 8
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: PPUSH
51262: CALL_OW 72
51266: ST_TO_ADDR
// if nearEnemy then
51267: LD_VAR 0 6
51271: IFFALSE 51340
// begin if GetWeapon ( i ) = ru_time_lapser then
51273: LD_VAR 0 4
51277: PPUSH
51278: CALL_OW 264
51282: PUSH
51283: LD_INT 49
51285: EQUAL
51286: IFFALSE 51314
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51288: LD_VAR 0 4
51292: PPUSH
51293: LD_VAR 0 6
51297: PPUSH
51298: LD_VAR 0 4
51302: PPUSH
51303: CALL_OW 74
51307: PPUSH
51308: CALL_OW 112
51312: GO 51338
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51314: LD_VAR 0 4
51318: PPUSH
51319: LD_VAR 0 6
51323: PPUSH
51324: LD_VAR 0 4
51328: PPUSH
51329: CALL_OW 74
51333: PPUSH
51334: CALL 52598 0 2
// end else
51338: GO 51440
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51340: LD_VAR 0 4
51344: PPUSH
51345: LD_VAR 0 2
51349: PUSH
51350: LD_VAR 0 9
51354: ARRAY
51355: PUSH
51356: LD_INT 1
51358: ARRAY
51359: PPUSH
51360: LD_VAR 0 2
51364: PUSH
51365: LD_VAR 0 9
51369: ARRAY
51370: PUSH
51371: LD_INT 2
51373: ARRAY
51374: PPUSH
51375: CALL_OW 297
51379: PUSH
51380: LD_INT 6
51382: GREATER
51383: IFFALSE 51426
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51385: LD_VAR 0 4
51389: PPUSH
51390: LD_VAR 0 2
51394: PUSH
51395: LD_VAR 0 9
51399: ARRAY
51400: PUSH
51401: LD_INT 1
51403: ARRAY
51404: PPUSH
51405: LD_VAR 0 2
51409: PUSH
51410: LD_VAR 0 9
51414: ARRAY
51415: PUSH
51416: LD_INT 2
51418: ARRAY
51419: PPUSH
51420: CALL_OW 114
51424: GO 51440
// SetTag ( i , tag ) ;
51426: LD_VAR 0 4
51430: PPUSH
51431: LD_VAR 0 9
51435: PPUSH
51436: CALL_OW 109
// end else
51440: GO 51513
// if enemy then
51442: LD_VAR 0 5
51446: IFFALSE 51513
// begin if GetWeapon ( i ) = ru_time_lapser then
51448: LD_VAR 0 4
51452: PPUSH
51453: CALL_OW 264
51457: PUSH
51458: LD_INT 49
51460: EQUAL
51461: IFFALSE 51489
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51463: LD_VAR 0 4
51467: PPUSH
51468: LD_VAR 0 5
51472: PPUSH
51473: LD_VAR 0 4
51477: PPUSH
51478: CALL_OW 74
51482: PPUSH
51483: CALL_OW 112
51487: GO 51513
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51489: LD_VAR 0 4
51493: PPUSH
51494: LD_VAR 0 5
51498: PPUSH
51499: LD_VAR 0 4
51503: PPUSH
51504: CALL_OW 74
51508: PPUSH
51509: CALL 52598 0 2
// end ; end ;
51513: GO 51085
51515: POP
51516: POP
// end ;
51517: LD_VAR 0 3
51521: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51522: LD_INT 0
51524: PPUSH
51525: PPUSH
51526: PPUSH
// if not unit or IsInUnit ( unit ) then
51527: LD_VAR 0 1
51531: NOT
51532: IFTRUE 51545
51534: PUSH
51535: LD_VAR 0 1
51539: PPUSH
51540: CALL_OW 310
51544: OR
51545: IFFALSE 51549
// exit ;
51547: GO 51640
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51549: LD_ADDR_VAR 0 4
51553: PUSH
51554: LD_VAR 0 1
51558: PPUSH
51559: CALL_OW 250
51563: PPUSH
51564: LD_VAR 0 2
51568: PPUSH
51569: LD_INT 1
51571: PPUSH
51572: CALL_OW 272
51576: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51577: LD_ADDR_VAR 0 5
51581: PUSH
51582: LD_VAR 0 1
51586: PPUSH
51587: CALL_OW 251
51591: PPUSH
51592: LD_VAR 0 2
51596: PPUSH
51597: LD_INT 1
51599: PPUSH
51600: CALL_OW 273
51604: ST_TO_ADDR
// if ValidHex ( x , y ) then
51605: LD_VAR 0 4
51609: PPUSH
51610: LD_VAR 0 5
51614: PPUSH
51615: CALL_OW 488
51619: IFFALSE 51640
// ComTurnXY ( unit , x , y ) ;
51621: LD_VAR 0 1
51625: PPUSH
51626: LD_VAR 0 4
51630: PPUSH
51631: LD_VAR 0 5
51635: PPUSH
51636: CALL_OW 118
// end ;
51640: LD_VAR 0 3
51644: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51645: LD_INT 0
51647: PPUSH
51648: PPUSH
// result := false ;
51649: LD_ADDR_VAR 0 3
51653: PUSH
51654: LD_INT 0
51656: ST_TO_ADDR
// if not units then
51657: LD_VAR 0 2
51661: NOT
51662: IFFALSE 51666
// exit ;
51664: GO 51711
// for i in units do
51666: LD_ADDR_VAR 0 4
51670: PUSH
51671: LD_VAR 0 2
51675: PUSH
51676: FOR_IN
51677: IFFALSE 51709
// if See ( side , i ) then
51679: LD_VAR 0 1
51683: PPUSH
51684: LD_VAR 0 4
51688: PPUSH
51689: CALL_OW 292
51693: IFFALSE 51707
// begin result := true ;
51695: LD_ADDR_VAR 0 3
51699: PUSH
51700: LD_INT 1
51702: ST_TO_ADDR
// exit ;
51703: POP
51704: POP
51705: GO 51711
// end ;
51707: GO 51676
51709: POP
51710: POP
// end ;
51711: LD_VAR 0 3
51715: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51716: LD_INT 0
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
// if not unit or not points then
51722: LD_VAR 0 1
51726: NOT
51727: IFTRUE 51736
51729: PUSH
51730: LD_VAR 0 2
51734: NOT
51735: OR
51736: IFFALSE 51740
// exit ;
51738: GO 51830
// dist := 99999 ;
51740: LD_ADDR_VAR 0 5
51744: PUSH
51745: LD_INT 99999
51747: ST_TO_ADDR
// for i in points do
51748: LD_ADDR_VAR 0 4
51752: PUSH
51753: LD_VAR 0 2
51757: PUSH
51758: FOR_IN
51759: IFFALSE 51828
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51761: LD_ADDR_VAR 0 6
51765: PUSH
51766: LD_VAR 0 1
51770: PPUSH
51771: LD_VAR 0 4
51775: PUSH
51776: LD_INT 1
51778: ARRAY
51779: PPUSH
51780: LD_VAR 0 4
51784: PUSH
51785: LD_INT 2
51787: ARRAY
51788: PPUSH
51789: CALL_OW 297
51793: ST_TO_ADDR
// if tmpDist < dist then
51794: LD_VAR 0 6
51798: PUSH
51799: LD_VAR 0 5
51803: LESS
51804: IFFALSE 51826
// begin result := i ;
51806: LD_ADDR_VAR 0 3
51810: PUSH
51811: LD_VAR 0 4
51815: ST_TO_ADDR
// dist := tmpDist ;
51816: LD_ADDR_VAR 0 5
51820: PUSH
51821: LD_VAR 0 6
51825: ST_TO_ADDR
// end ; end ;
51826: GO 51758
51828: POP
51829: POP
// end ;
51830: LD_VAR 0 3
51834: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51835: LD_INT 0
51837: PPUSH
// uc_side := side ;
51838: LD_ADDR_OWVAR 20
51842: PUSH
51843: LD_VAR 0 1
51847: ST_TO_ADDR
// uc_nation := 3 ;
51848: LD_ADDR_OWVAR 21
51852: PUSH
51853: LD_INT 3
51855: ST_TO_ADDR
// vc_chassis := 25 ;
51856: LD_ADDR_OWVAR 37
51860: PUSH
51861: LD_INT 25
51863: ST_TO_ADDR
// vc_engine := engine_siberite ;
51864: LD_ADDR_OWVAR 39
51868: PUSH
51869: LD_INT 3
51871: ST_TO_ADDR
// vc_control := control_computer ;
51872: LD_ADDR_OWVAR 38
51876: PUSH
51877: LD_INT 3
51879: ST_TO_ADDR
// vc_weapon := 59 ;
51880: LD_ADDR_OWVAR 40
51884: PUSH
51885: LD_INT 59
51887: ST_TO_ADDR
// result := CreateVehicle ;
51888: LD_ADDR_VAR 0 5
51892: PUSH
51893: CALL_OW 45
51897: ST_TO_ADDR
// SetDir ( result , d ) ;
51898: LD_VAR 0 5
51902: PPUSH
51903: LD_VAR 0 4
51907: PPUSH
51908: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51912: LD_VAR 0 5
51916: PPUSH
51917: LD_VAR 0 2
51921: PPUSH
51922: LD_VAR 0 3
51926: PPUSH
51927: LD_INT 0
51929: PPUSH
51930: CALL_OW 48
// end ;
51934: LD_VAR 0 5
51938: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51939: LD_INT 0
51941: PPUSH
51942: PPUSH
51943: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51944: LD_ADDR_VAR 0 2
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51967: LD_VAR 0 1
51971: NOT
51972: IFTRUE 52005
51974: PUSH
51975: LD_VAR 0 1
51979: PPUSH
51980: CALL_OW 264
51984: PUSH
51985: LD_INT 12
51987: PUSH
51988: LD_INT 51
51990: PUSH
51991: LD_INT 32
51993: PUSH
51994: LD_INT 89
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: IN
52003: NOT
52004: OR
52005: IFFALSE 52009
// exit ;
52007: GO 52107
// for i := 1 to 3 do
52009: LD_ADDR_VAR 0 3
52013: PUSH
52014: DOUBLE
52015: LD_INT 1
52017: DEC
52018: ST_TO_ADDR
52019: LD_INT 3
52021: PUSH
52022: FOR_TO
52023: IFFALSE 52105
// begin tmp := GetCargo ( cargo , i ) ;
52025: LD_ADDR_VAR 0 4
52029: PUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: LD_VAR 0 3
52039: PPUSH
52040: CALL_OW 289
52044: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52045: LD_ADDR_VAR 0 2
52049: PUSH
52050: LD_VAR 0 2
52054: PPUSH
52055: LD_VAR 0 3
52059: PPUSH
52060: LD_VAR 0 4
52064: PPUSH
52065: CALL_OW 1
52069: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52070: LD_ADDR_VAR 0 2
52074: PUSH
52075: LD_VAR 0 2
52079: PPUSH
52080: LD_INT 4
52082: PPUSH
52083: LD_VAR 0 2
52087: PUSH
52088: LD_INT 4
52090: ARRAY
52091: PUSH
52092: LD_VAR 0 4
52096: PLUS
52097: PPUSH
52098: CALL_OW 1
52102: ST_TO_ADDR
// end ;
52103: GO 52022
52105: POP
52106: POP
// end ;
52107: LD_VAR 0 2
52111: RET
// export function Length ( array ) ; begin
52112: LD_INT 0
52114: PPUSH
// result := array + 0 ;
52115: LD_ADDR_VAR 0 2
52119: PUSH
52120: LD_VAR 0 1
52124: PUSH
52125: LD_INT 0
52127: PLUS
52128: ST_TO_ADDR
// end ;
52129: LD_VAR 0 2
52133: RET
// export function PrepareArray ( array ) ; begin
52134: LD_INT 0
52136: PPUSH
// result := array diff 0 ;
52137: LD_ADDR_VAR 0 2
52141: PUSH
52142: LD_VAR 0 1
52146: PUSH
52147: LD_INT 0
52149: DIFF
52150: ST_TO_ADDR
// if not result [ 1 ] then
52151: LD_VAR 0 2
52155: PUSH
52156: LD_INT 1
52158: ARRAY
52159: NOT
52160: IFFALSE 52180
// result := Delete ( result , 1 ) ;
52162: LD_ADDR_VAR 0 2
52166: PUSH
52167: LD_VAR 0 2
52171: PPUSH
52172: LD_INT 1
52174: PPUSH
52175: CALL_OW 3
52179: ST_TO_ADDR
// end ;
52180: LD_VAR 0 2
52184: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52185: LD_INT 0
52187: PPUSH
52188: PPUSH
52189: PPUSH
52190: PPUSH
// sibRocketRange := 25 ;
52191: LD_ADDR_VAR 0 6
52195: PUSH
52196: LD_INT 25
52198: ST_TO_ADDR
// result := false ;
52199: LD_ADDR_VAR 0 4
52203: PUSH
52204: LD_INT 0
52206: ST_TO_ADDR
// for i := 0 to 5 do
52207: LD_ADDR_VAR 0 5
52211: PUSH
52212: DOUBLE
52213: LD_INT 0
52215: DEC
52216: ST_TO_ADDR
52217: LD_INT 5
52219: PUSH
52220: FOR_TO
52221: IFFALSE 52288
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52223: LD_VAR 0 1
52227: PPUSH
52228: LD_VAR 0 5
52232: PPUSH
52233: LD_VAR 0 6
52237: PPUSH
52238: CALL_OW 272
52242: PPUSH
52243: LD_VAR 0 2
52247: PPUSH
52248: LD_VAR 0 5
52252: PPUSH
52253: LD_VAR 0 6
52257: PPUSH
52258: CALL_OW 273
52262: PPUSH
52263: LD_VAR 0 3
52267: PPUSH
52268: CALL_OW 309
52272: IFFALSE 52286
// begin result := true ;
52274: LD_ADDR_VAR 0 4
52278: PUSH
52279: LD_INT 1
52281: ST_TO_ADDR
// exit ;
52282: POP
52283: POP
52284: GO 52290
// end ;
52286: GO 52220
52288: POP
52289: POP
// end ;
52290: LD_VAR 0 4
52294: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52295: LD_INT 0
52297: PPUSH
52298: PPUSH
52299: PPUSH
// if btype = b_depot then
52300: LD_VAR 0 2
52304: PUSH
52305: LD_INT 0
52307: EQUAL
52308: IFFALSE 52320
// begin result := true ;
52310: LD_ADDR_VAR 0 3
52314: PUSH
52315: LD_INT 1
52317: ST_TO_ADDR
// exit ;
52318: GO 52440
// end ; pom := GetBase ( depot ) ;
52320: LD_ADDR_VAR 0 4
52324: PUSH
52325: LD_VAR 0 1
52329: PPUSH
52330: CALL_OW 274
52334: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52335: LD_ADDR_VAR 0 5
52339: PUSH
52340: LD_VAR 0 2
52344: PPUSH
52345: LD_VAR 0 1
52349: PPUSH
52350: CALL_OW 248
52354: PPUSH
52355: CALL_OW 450
52359: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_VAR 0 4
52369: PPUSH
52370: LD_INT 1
52372: PPUSH
52373: CALL_OW 275
52377: PUSH
52378: LD_VAR 0 5
52382: PUSH
52383: LD_INT 1
52385: ARRAY
52386: GREATEREQUAL
52387: IFFALSE 52413
52389: PUSH
52390: LD_VAR 0 4
52394: PPUSH
52395: LD_INT 2
52397: PPUSH
52398: CALL_OW 275
52402: PUSH
52403: LD_VAR 0 5
52407: PUSH
52408: LD_INT 2
52410: ARRAY
52411: GREATEREQUAL
52412: AND
52413: IFFALSE 52439
52415: PUSH
52416: LD_VAR 0 4
52420: PPUSH
52421: LD_INT 3
52423: PPUSH
52424: CALL_OW 275
52428: PUSH
52429: LD_VAR 0 5
52433: PUSH
52434: LD_INT 3
52436: ARRAY
52437: GREATEREQUAL
52438: AND
52439: ST_TO_ADDR
// end ;
52440: LD_VAR 0 3
52444: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52445: LD_INT 0
52447: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52448: LD_VAR 0 1
52452: PPUSH
52453: LD_VAR 0 2
52457: PPUSH
52458: LD_INT 0
52460: PPUSH
52461: LD_INT 0
52463: PPUSH
52464: LD_INT 1
52466: PPUSH
52467: LD_INT 0
52469: PPUSH
52470: CALL_OW 587
// end ;
52474: LD_VAR 0 3
52478: RET
// export function CenterOnNow ( unit ) ; begin
52479: LD_INT 0
52481: PPUSH
// result := IsInUnit ( unit ) ;
52482: LD_ADDR_VAR 0 2
52486: PUSH
52487: LD_VAR 0 1
52491: PPUSH
52492: CALL_OW 310
52496: ST_TO_ADDR
// if not result then
52497: LD_VAR 0 2
52501: NOT
52502: IFFALSE 52514
// result := unit ;
52504: LD_ADDR_VAR 0 2
52508: PUSH
52509: LD_VAR 0 1
52513: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52514: LD_VAR 0 1
52518: PPUSH
52519: CALL_OW 87
// end ;
52523: LD_VAR 0 2
52527: RET
// export function ComMoveHex ( unit , hex ) ; begin
52528: LD_INT 0
52530: PPUSH
// if not hex then
52531: LD_VAR 0 2
52535: NOT
52536: IFFALSE 52540
// exit ;
52538: GO 52593
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52540: LD_VAR 0 2
52544: PUSH
52545: LD_INT 1
52547: ARRAY
52548: PPUSH
52549: LD_VAR 0 2
52553: PUSH
52554: LD_INT 2
52556: ARRAY
52557: PPUSH
52558: CALL_OW 428
52562: IFFALSE 52566
// exit ;
52564: GO 52593
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52566: LD_VAR 0 1
52570: PPUSH
52571: LD_VAR 0 2
52575: PUSH
52576: LD_INT 1
52578: ARRAY
52579: PPUSH
52580: LD_VAR 0 2
52584: PUSH
52585: LD_INT 2
52587: ARRAY
52588: PPUSH
52589: CALL_OW 111
// end ;
52593: LD_VAR 0 3
52597: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52598: LD_INT 0
52600: PPUSH
52601: PPUSH
52602: PPUSH
// if not unit or not enemy then
52603: LD_VAR 0 1
52607: NOT
52608: IFTRUE 52617
52610: PUSH
52611: LD_VAR 0 2
52615: NOT
52616: OR
52617: IFFALSE 52621
// exit ;
52619: GO 52747
// x := GetX ( enemy ) ;
52621: LD_ADDR_VAR 0 4
52625: PUSH
52626: LD_VAR 0 2
52630: PPUSH
52631: CALL_OW 250
52635: ST_TO_ADDR
// y := GetY ( enemy ) ;
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: LD_VAR 0 2
52645: PPUSH
52646: CALL_OW 251
52650: ST_TO_ADDR
// if ValidHex ( x , y ) then
52651: LD_VAR 0 4
52655: PPUSH
52656: LD_VAR 0 5
52660: PPUSH
52661: CALL_OW 488
52665: IFFALSE 52747
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52667: LD_VAR 0 2
52671: PPUSH
52672: CALL_OW 247
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: IN
52687: IFTRUE 52710
52689: PUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 255
52699: PPUSH
52700: LD_VAR 0 2
52704: PPUSH
52705: CALL_OW 292
52709: OR
52710: IFFALSE 52728
// ComAttackUnit ( unit , enemy ) else
52712: LD_VAR 0 1
52716: PPUSH
52717: LD_VAR 0 2
52721: PPUSH
52722: CALL_OW 115
52726: GO 52747
// ComAgressiveMove ( unit , x , y ) ;
52728: LD_VAR 0 1
52732: PPUSH
52733: LD_VAR 0 4
52737: PPUSH
52738: LD_VAR 0 5
52742: PPUSH
52743: CALL_OW 114
// end ;
52747: LD_VAR 0 3
52751: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52752: LD_INT 0
52754: PPUSH
52755: PPUSH
52756: PPUSH
// list := AreaToList ( area , 0 ) ;
52757: LD_ADDR_VAR 0 5
52761: PUSH
52762: LD_VAR 0 1
52766: PPUSH
52767: LD_INT 0
52769: PPUSH
52770: CALL_OW 517
52774: ST_TO_ADDR
// if not list then
52775: LD_VAR 0 5
52779: NOT
52780: IFFALSE 52784
// exit ;
52782: GO 52914
// if all then
52784: LD_VAR 0 2
52788: IFFALSE 52876
// begin for i := 1 to list [ 1 ] do
52790: LD_ADDR_VAR 0 4
52794: PUSH
52795: DOUBLE
52796: LD_INT 1
52798: DEC
52799: ST_TO_ADDR
52800: LD_VAR 0 5
52804: PUSH
52805: LD_INT 1
52807: ARRAY
52808: PUSH
52809: FOR_TO
52810: IFFALSE 52872
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52812: LD_ADDR_VAR 0 3
52816: PUSH
52817: LD_VAR 0 3
52821: PPUSH
52822: LD_VAR 0 3
52826: PUSH
52827: LD_INT 1
52829: PLUS
52830: PPUSH
52831: LD_VAR 0 5
52835: PUSH
52836: LD_INT 1
52838: ARRAY
52839: PUSH
52840: LD_VAR 0 4
52844: ARRAY
52845: PUSH
52846: LD_VAR 0 5
52850: PUSH
52851: LD_INT 2
52853: ARRAY
52854: PUSH
52855: LD_VAR 0 4
52859: ARRAY
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PPUSH
52865: CALL_OW 1
52869: ST_TO_ADDR
52870: GO 52809
52872: POP
52873: POP
// exit ;
52874: GO 52914
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52876: LD_ADDR_VAR 0 3
52880: PUSH
52881: LD_VAR 0 5
52885: PUSH
52886: LD_INT 1
52888: ARRAY
52889: PUSH
52890: LD_INT 1
52892: ARRAY
52893: PUSH
52894: LD_VAR 0 5
52898: PUSH
52899: LD_INT 2
52901: ARRAY
52902: PUSH
52903: LD_INT 1
52905: ARRAY
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: ST_TO_ADDR
// end ;
52914: LD_VAR 0 3
52918: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52919: LD_INT 0
52921: PPUSH
52922: PPUSH
// list := AreaToList ( area , 0 ) ;
52923: LD_ADDR_VAR 0 4
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: LD_INT 0
52935: PPUSH
52936: CALL_OW 517
52940: ST_TO_ADDR
// if not list then
52941: LD_VAR 0 4
52945: NOT
52946: IFFALSE 52950
// exit ;
52948: GO 52991
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52950: LD_ADDR_VAR 0 3
52954: PUSH
52955: LD_VAR 0 4
52959: PUSH
52960: LD_INT 1
52962: ARRAY
52963: PUSH
52964: LD_INT 1
52966: ARRAY
52967: PUSH
52968: LD_VAR 0 4
52972: PUSH
52973: LD_INT 2
52975: ARRAY
52976: PUSH
52977: LD_INT 1
52979: ARRAY
52980: PUSH
52981: LD_VAR 0 2
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: ST_TO_ADDR
// end ;
52991: LD_VAR 0 3
52995: RET
// export function First ( array ) ; begin
52996: LD_INT 0
52998: PPUSH
// if not array then
52999: LD_VAR 0 1
53003: NOT
53004: IFFALSE 53008
// exit ;
53006: GO 53022
// result := array [ 1 ] ;
53008: LD_ADDR_VAR 0 2
53012: PUSH
53013: LD_VAR 0 1
53017: PUSH
53018: LD_INT 1
53020: ARRAY
53021: ST_TO_ADDR
// end ;
53022: LD_VAR 0 2
53026: RET
// export function Last ( array ) ; begin
53027: LD_INT 0
53029: PPUSH
// if not array then
53030: LD_VAR 0 1
53034: NOT
53035: IFFALSE 53039
// exit ;
53037: GO 53055
// result := array [ array ] ;
53039: LD_ADDR_VAR 0 2
53043: PUSH
53044: LD_VAR 0 1
53048: PUSH
53049: LD_VAR 0 1
53053: ARRAY
53054: ST_TO_ADDR
// end ;
53055: LD_VAR 0 2
53059: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53060: LD_INT 0
53062: PPUSH
53063: PPUSH
// result := [ ] ;
53064: LD_ADDR_VAR 0 5
53068: PUSH
53069: EMPTY
53070: ST_TO_ADDR
// if not array then
53071: LD_VAR 0 1
53075: NOT
53076: IFFALSE 53080
// exit ;
53078: GO 53192
// for i := 1 to array do
53080: LD_ADDR_VAR 0 6
53084: PUSH
53085: DOUBLE
53086: LD_INT 1
53088: DEC
53089: ST_TO_ADDR
53090: LD_VAR 0 1
53094: PUSH
53095: FOR_TO
53096: IFFALSE 53190
// if array [ i ] [ index ] = value then
53098: LD_VAR 0 1
53102: PUSH
53103: LD_VAR 0 6
53107: ARRAY
53108: PUSH
53109: LD_VAR 0 2
53113: ARRAY
53114: PUSH
53115: LD_VAR 0 3
53119: EQUAL
53120: IFFALSE 53188
// begin if indexColumn then
53122: LD_VAR 0 4
53126: IFFALSE 53162
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53128: LD_ADDR_VAR 0 5
53132: PUSH
53133: LD_VAR 0 5
53137: PPUSH
53138: LD_VAR 0 1
53142: PUSH
53143: LD_VAR 0 6
53147: ARRAY
53148: PUSH
53149: LD_VAR 0 4
53153: ARRAY
53154: PPUSH
53155: CALL 48200 0 2
53159: ST_TO_ADDR
53160: GO 53188
// result := Join ( result , array [ i ] ) ;
53162: LD_ADDR_VAR 0 5
53166: PUSH
53167: LD_VAR 0 5
53171: PPUSH
53172: LD_VAR 0 1
53176: PUSH
53177: LD_VAR 0 6
53181: ARRAY
53182: PPUSH
53183: CALL 48200 0 2
53187: ST_TO_ADDR
// end ;
53188: GO 53095
53190: POP
53191: POP
// end ;
53192: LD_VAR 0 5
53196: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53197: LD_INT 0
53199: PPUSH
// if not vehicles or not parkingPoint then
53200: LD_VAR 0 1
53204: NOT
53205: IFTRUE 53214
53207: PUSH
53208: LD_VAR 0 2
53212: NOT
53213: OR
53214: IFFALSE 53218
// exit ;
53216: GO 53316
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53218: LD_ADDR_VAR 0 1
53222: PUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: LD_INT 50
53230: PUSH
53231: EMPTY
53232: LIST
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: LD_INT 92
53239: PUSH
53240: LD_VAR 0 2
53244: PUSH
53245: LD_INT 1
53247: ARRAY
53248: PUSH
53249: LD_VAR 0 2
53253: PUSH
53254: LD_INT 2
53256: ARRAY
53257: PUSH
53258: LD_INT 8
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PPUSH
53275: CALL_OW 72
53279: ST_TO_ADDR
// if not vehicles then
53280: LD_VAR 0 1
53284: NOT
53285: IFFALSE 53289
// exit ;
53287: GO 53316
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53289: LD_VAR 0 1
53293: PPUSH
53294: LD_VAR 0 2
53298: PUSH
53299: LD_INT 1
53301: ARRAY
53302: PPUSH
53303: LD_VAR 0 2
53307: PUSH
53308: LD_INT 2
53310: ARRAY
53311: PPUSH
53312: CALL_OW 111
// end ;
53316: LD_VAR 0 3
53320: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53321: LD_INT 0
53323: PPUSH
53324: PPUSH
53325: PPUSH
// if not side or not area then
53326: LD_VAR 0 1
53330: NOT
53331: IFTRUE 53340
53333: PUSH
53334: LD_VAR 0 2
53338: NOT
53339: OR
53340: IFFALSE 53344
// exit ;
53342: GO 53463
// tmp := AreaToList ( area , 0 ) ;
53344: LD_ADDR_VAR 0 5
53348: PUSH
53349: LD_VAR 0 2
53353: PPUSH
53354: LD_INT 0
53356: PPUSH
53357: CALL_OW 517
53361: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53362: LD_ADDR_VAR 0 4
53366: PUSH
53367: DOUBLE
53368: LD_INT 1
53370: DEC
53371: ST_TO_ADDR
53372: LD_VAR 0 5
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PUSH
53381: FOR_TO
53382: IFFALSE 53461
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53384: LD_VAR 0 5
53388: PUSH
53389: LD_INT 1
53391: ARRAY
53392: PUSH
53393: LD_VAR 0 4
53397: ARRAY
53398: PPUSH
53399: LD_VAR 0 5
53403: PUSH
53404: LD_INT 2
53406: ARRAY
53407: PUSH
53408: LD_VAR 0 4
53412: ARRAY
53413: PPUSH
53414: CALL_OW 351
53418: IFFALSE 53459
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53420: LD_VAR 0 5
53424: PUSH
53425: LD_INT 1
53427: ARRAY
53428: PUSH
53429: LD_VAR 0 4
53433: ARRAY
53434: PPUSH
53435: LD_VAR 0 5
53439: PUSH
53440: LD_INT 2
53442: ARRAY
53443: PUSH
53444: LD_VAR 0 4
53448: ARRAY
53449: PPUSH
53450: LD_VAR 0 1
53454: PPUSH
53455: CALL_OW 244
// end ;
53459: GO 53381
53461: POP
53462: POP
// end ;
53463: LD_VAR 0 3
53467: RET
// export function UniqueArray ( array ) ; var i ; begin
53468: LD_INT 0
53470: PPUSH
53471: PPUSH
// result := [ ] ;
53472: LD_ADDR_VAR 0 2
53476: PUSH
53477: EMPTY
53478: ST_TO_ADDR
// if not array then
53479: LD_VAR 0 1
53483: NOT
53484: IFFALSE 53488
// exit ;
53486: GO 53549
// for i := 1 to array do
53488: LD_ADDR_VAR 0 3
53492: PUSH
53493: DOUBLE
53494: LD_INT 1
53496: DEC
53497: ST_TO_ADDR
53498: LD_VAR 0 1
53502: PUSH
53503: FOR_TO
53504: IFFALSE 53547
// if not array [ i ] in result then
53506: LD_VAR 0 1
53510: PUSH
53511: LD_VAR 0 3
53515: ARRAY
53516: PUSH
53517: LD_VAR 0 2
53521: IN
53522: NOT
53523: IFFALSE 53545
// result := Join ( result , i ) ;
53525: LD_ADDR_VAR 0 2
53529: PUSH
53530: LD_VAR 0 2
53534: PPUSH
53535: LD_VAR 0 3
53539: PPUSH
53540: CALL 48200 0 2
53544: ST_TO_ADDR
53545: GO 53503
53547: POP
53548: POP
// end ; end_of_file
53549: LD_VAR 0 2
53553: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53554: LD_VAR 0 1
53558: PUSH
53559: LD_INT 200
53561: DOUBLE
53562: GREATEREQUAL
53563: IFFALSE 53571
53565: LD_INT 299
53567: DOUBLE
53568: LESSEQUAL
53569: IFTRUE 53573
53571: GO 53605
53573: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53574: LD_VAR 0 1
53578: PPUSH
53579: LD_VAR 0 2
53583: PPUSH
53584: LD_VAR 0 3
53588: PPUSH
53589: LD_VAR 0 4
53593: PPUSH
53594: LD_VAR 0 5
53598: PPUSH
53599: CALL 54386 0 5
53603: GO 53682
53605: LD_INT 300
53607: DOUBLE
53608: GREATEREQUAL
53609: IFFALSE 53617
53611: LD_INT 399
53613: DOUBLE
53614: LESSEQUAL
53615: IFTRUE 53619
53617: GO 53681
53619: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53620: LD_VAR 0 1
53624: PPUSH
53625: LD_VAR 0 2
53629: PPUSH
53630: LD_VAR 0 3
53634: PPUSH
53635: LD_VAR 0 4
53639: PPUSH
53640: LD_VAR 0 5
53644: PPUSH
53645: LD_VAR 0 6
53649: PPUSH
53650: LD_VAR 0 7
53654: PPUSH
53655: LD_VAR 0 8
53659: PPUSH
53660: LD_VAR 0 9
53664: PPUSH
53665: LD_VAR 0 10
53669: PPUSH
53670: LD_VAR 0 11
53674: PPUSH
53675: CALL 61472 0 11
53679: GO 53682
53681: POP
// end ;
53682: PPOPN 11
53684: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53685: LD_VAR 0 1
53689: PPUSH
53690: LD_VAR 0 2
53694: PPUSH
53695: LD_VAR 0 3
53699: PPUSH
53700: LD_VAR 0 4
53704: PPUSH
53705: LD_VAR 0 5
53709: PPUSH
53710: CALL 53767 0 5
// end ; end_of_file
53714: PPOPN 5
53716: END
// export function SOS_UnitDestroyed ( un ) ; begin
53717: LD_INT 0
53719: PPUSH
// ComRadiation ( un ) ;
53720: LD_VAR 0 1
53724: PPUSH
53725: CALL 54806 0 1
// end ;
53729: LD_VAR 0 2
53733: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53734: LD_INT 0
53736: PPUSH
// ComRadiation ( un ) ;
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL 54806 0 1
// end ;
53746: LD_VAR 0 2
53750: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53751: LD_INT 0
53753: PPUSH
// end ;
53754: LD_VAR 0 4
53758: RET
// export function SOS_Command ( cmd ) ; begin
53759: LD_INT 0
53761: PPUSH
// end ;
53762: LD_VAR 0 2
53766: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53767: LD_INT 0
53769: PPUSH
// end ;
53770: LD_VAR 0 6
53774: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53775: LD_INT 0
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
// if not vehicle or not factory then
53781: LD_VAR 0 1
53785: NOT
53786: IFTRUE 53795
53788: PUSH
53789: LD_VAR 0 2
53793: NOT
53794: OR
53795: IFFALSE 53799
// exit ;
53797: GO 54381
// if not factoryWaypoints then
53799: LD_EXP 59
53803: NOT
53804: IFFALSE 53808
// exit ;
53806: GO 54381
// for i := 1 to Count ( factoryWaypoints ) do
53808: LD_ADDR_VAR 0 4
53812: PUSH
53813: DOUBLE
53814: LD_INT 1
53816: DEC
53817: ST_TO_ADDR
53818: LD_EXP 59
53822: PPUSH
53823: CALL 12268 0 1
53827: PUSH
53828: FOR_TO
53829: IFFALSE 54379
// if factoryWaypoints [ i ] [ 2 ] = factory then
53831: LD_EXP 59
53835: PUSH
53836: LD_VAR 0 4
53840: ARRAY
53841: PUSH
53842: LD_INT 2
53844: ARRAY
53845: PUSH
53846: LD_VAR 0 2
53850: EQUAL
53851: IFFALSE 54377
// begin if GetControl ( vehicle ) = control_manual then
53853: LD_VAR 0 1
53857: PPUSH
53858: CALL_OW 263
53862: PUSH
53863: LD_INT 1
53865: EQUAL
53866: IFFALSE 54230
// begin driver := IsDrivenBy ( vehicle ) ;
53868: LD_ADDR_VAR 0 5
53872: PUSH
53873: LD_VAR 0 1
53877: PPUSH
53878: CALL_OW 311
53882: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53883: LD_VAR 0 5
53887: PUSH
53888: LD_EXP 60
53892: IN
53893: IFTRUE 53907
53895: PUSH
53896: LD_VAR 0 1
53900: PUSH
53901: LD_EXP 60
53905: IN
53906: OR
53907: IFFALSE 53913
// exit ;
53909: POP
53910: POP
53911: GO 54381
// if not HasTask ( driver ) then
53913: LD_VAR 0 5
53917: PPUSH
53918: CALL_OW 314
53922: NOT
53923: IFFALSE 54228
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53925: LD_ADDR_EXP 60
53929: PUSH
53930: LD_EXP 60
53934: PPUSH
53935: LD_VAR 0 5
53939: PPUSH
53940: CALL 48200 0 2
53944: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53945: LD_ADDR_EXP 60
53949: PUSH
53950: LD_EXP 60
53954: PPUSH
53955: LD_VAR 0 1
53959: PPUSH
53960: CALL 48200 0 2
53964: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53965: LD_ADDR_VAR 0 6
53969: PUSH
53970: LD_EXP 59
53974: PUSH
53975: LD_VAR 0 4
53979: ARRAY
53980: PUSH
53981: LD_INT 3
53983: ARRAY
53984: PPUSH
53985: LD_EXP 59
53989: PUSH
53990: LD_VAR 0 4
53994: ARRAY
53995: PUSH
53996: LD_INT 4
53998: ARRAY
53999: PPUSH
54000: CALL_OW 428
54004: ST_TO_ADDR
// if hex then
54005: LD_VAR 0 6
54009: IFFALSE 54027
// ComMoveUnit ( driver , hex ) else
54011: LD_VAR 0 5
54015: PPUSH
54016: LD_VAR 0 6
54020: PPUSH
54021: CALL_OW 112
54025: GO 54111
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54027: LD_VAR 0 1
54031: PPUSH
54032: LD_EXP 59
54036: PUSH
54037: LD_VAR 0 4
54041: ARRAY
54042: PUSH
54043: LD_INT 3
54045: ARRAY
54046: PPUSH
54047: LD_EXP 59
54051: PUSH
54052: LD_VAR 0 4
54056: ARRAY
54057: PUSH
54058: LD_INT 4
54060: ARRAY
54061: PPUSH
54062: CALL_OW 297
54066: PUSH
54067: LD_INT 0
54069: GREATER
54070: IFFALSE 54111
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54072: LD_VAR 0 5
54076: PPUSH
54077: LD_EXP 59
54081: PUSH
54082: LD_VAR 0 4
54086: ARRAY
54087: PUSH
54088: LD_INT 3
54090: ARRAY
54091: PPUSH
54092: LD_EXP 59
54096: PUSH
54097: LD_VAR 0 4
54101: ARRAY
54102: PUSH
54103: LD_INT 4
54105: ARRAY
54106: PPUSH
54107: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54111: LD_VAR 0 5
54115: PPUSH
54116: CALL_OW 181
// if Multiplayer then
54120: LD_OWVAR 4
54124: IFFALSE 54173
// begin repeat wait ( 10 ) ;
54126: LD_INT 10
54128: PPUSH
54129: CALL_OW 67
// until not IsInUnit ( driver ) ;
54133: LD_VAR 0 5
54137: PPUSH
54138: CALL_OW 310
54142: NOT
54143: IFFALSE 54126
// if not HasTask ( driver ) then
54145: LD_VAR 0 5
54149: PPUSH
54150: CALL_OW 314
54154: NOT
54155: IFFALSE 54171
// ComEnterUnit ( driver , factory ) ;
54157: LD_VAR 0 5
54161: PPUSH
54162: LD_VAR 0 2
54166: PPUSH
54167: CALL_OW 120
// end else
54171: GO 54187
// AddComEnterUnit ( driver , factory ) ;
54173: LD_VAR 0 5
54177: PPUSH
54178: LD_VAR 0 2
54182: PPUSH
54183: CALL_OW 180
// wait ( 0 0$1 ) ;
54187: LD_INT 35
54189: PPUSH
54190: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54194: LD_ADDR_EXP 60
54198: PUSH
54199: LD_EXP 60
54203: PUSH
54204: LD_VAR 0 5
54208: DIFF
54209: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54210: LD_ADDR_EXP 60
54214: PUSH
54215: LD_EXP 60
54219: PUSH
54220: LD_VAR 0 1
54224: DIFF
54225: ST_TO_ADDR
// break ;
54226: GO 54379
// end ; end else
54228: GO 54377
// if GetControl ( vehicle ) = control_remote then
54230: LD_VAR 0 1
54234: PPUSH
54235: CALL_OW 263
54239: PUSH
54240: LD_INT 2
54242: EQUAL
54243: IFFALSE 54329
// begin wait ( 0 0$2 ) ;
54245: LD_INT 70
54247: PPUSH
54248: CALL_OW 67
// repeat wait ( 10 ) ;
54252: LD_INT 10
54254: PPUSH
54255: CALL_OW 67
// Connect ( vehicle ) ;
54259: LD_VAR 0 1
54263: PPUSH
54264: CALL 18512 0 1
// until IsControledBy ( vehicle ) ;
54268: LD_VAR 0 1
54272: PPUSH
54273: CALL_OW 312
54277: IFFALSE 54252
// wait ( 10 ) ;
54279: LD_INT 10
54281: PPUSH
54282: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54286: LD_VAR 0 1
54290: PPUSH
54291: LD_EXP 59
54295: PUSH
54296: LD_VAR 0 4
54300: ARRAY
54301: PUSH
54302: LD_INT 3
54304: ARRAY
54305: PPUSH
54306: LD_EXP 59
54310: PUSH
54311: LD_VAR 0 4
54315: ARRAY
54316: PUSH
54317: LD_INT 4
54319: ARRAY
54320: PPUSH
54321: CALL_OW 111
// break ;
54325: GO 54379
// end else
54327: GO 54377
// begin wait ( 0 0$3 ) ;
54329: LD_INT 105
54331: PPUSH
54332: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54336: LD_VAR 0 1
54340: PPUSH
54341: LD_EXP 59
54345: PUSH
54346: LD_VAR 0 4
54350: ARRAY
54351: PUSH
54352: LD_INT 3
54354: ARRAY
54355: PPUSH
54356: LD_EXP 59
54360: PUSH
54361: LD_VAR 0 4
54365: ARRAY
54366: PUSH
54367: LD_INT 4
54369: ARRAY
54370: PPUSH
54371: CALL_OW 111
// break ;
54375: GO 54379
// end ; end ;
54377: GO 53828
54379: POP
54380: POP
// end ;
54381: LD_VAR 0 3
54385: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54386: LD_INT 0
54388: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54389: LD_VAR 0 1
54393: PUSH
54394: LD_INT 250
54396: EQUAL
54397: IFFALSE 54414
54399: PUSH
54400: LD_VAR 0 2
54404: PPUSH
54405: CALL_OW 264
54409: PUSH
54410: LD_INT 81
54412: EQUAL
54413: AND
54414: IFFALSE 54435
// MinerPlaceMine ( unit , x , y ) ;
54416: LD_VAR 0 2
54420: PPUSH
54421: LD_VAR 0 4
54425: PPUSH
54426: LD_VAR 0 5
54430: PPUSH
54431: CALL 57567 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54435: LD_VAR 0 1
54439: PUSH
54440: LD_INT 251
54442: EQUAL
54443: IFFALSE 54460
54445: PUSH
54446: LD_VAR 0 2
54450: PPUSH
54451: CALL_OW 264
54455: PUSH
54456: LD_INT 81
54458: EQUAL
54459: AND
54460: IFFALSE 54481
// MinerDetonateMine ( unit , x , y ) ;
54462: LD_VAR 0 2
54466: PPUSH
54467: LD_VAR 0 4
54471: PPUSH
54472: LD_VAR 0 5
54476: PPUSH
54477: CALL 57846 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54481: LD_VAR 0 1
54485: PUSH
54486: LD_INT 252
54488: EQUAL
54489: IFFALSE 54506
54491: PUSH
54492: LD_VAR 0 2
54496: PPUSH
54497: CALL_OW 264
54501: PUSH
54502: LD_INT 81
54504: EQUAL
54505: AND
54506: IFFALSE 54527
// MinerCreateMinefield ( unit , x , y ) ;
54508: LD_VAR 0 2
54512: PPUSH
54513: LD_VAR 0 4
54517: PPUSH
54518: LD_VAR 0 5
54522: PPUSH
54523: CALL 58265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54527: LD_VAR 0 1
54531: PUSH
54532: LD_INT 253
54534: EQUAL
54535: IFFALSE 54552
54537: PUSH
54538: LD_VAR 0 2
54542: PPUSH
54543: CALL_OW 257
54547: PUSH
54548: LD_INT 5
54550: EQUAL
54551: AND
54552: IFFALSE 54573
// ComBinocular ( unit , x , y ) ;
54554: LD_VAR 0 2
54558: PPUSH
54559: LD_VAR 0 4
54563: PPUSH
54564: LD_VAR 0 5
54568: PPUSH
54569: CALL 58640 0 3
// if selectedUnit then
54573: LD_VAR 0 3
54577: IFFALSE 54637
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54579: LD_VAR 0 1
54583: PUSH
54584: LD_INT 254
54586: EQUAL
54587: IFFALSE 54604
54589: PUSH
54590: LD_VAR 0 2
54594: PPUSH
54595: CALL_OW 264
54599: PUSH
54600: LD_INT 99
54602: EQUAL
54603: AND
54604: IFFALSE 54621
54606: PUSH
54607: LD_VAR 0 3
54611: PPUSH
54612: CALL_OW 263
54616: PUSH
54617: LD_INT 3
54619: EQUAL
54620: AND
54621: IFFALSE 54637
// HackDestroyVehicle ( unit , selectedUnit ) ;
54623: LD_VAR 0 2
54627: PPUSH
54628: LD_VAR 0 3
54632: PPUSH
54633: CALL 56927 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54637: LD_VAR 0 1
54641: PUSH
54642: LD_INT 255
54644: EQUAL
54645: IFFALSE 54669
54647: PUSH
54648: LD_VAR 0 2
54652: PPUSH
54653: CALL_OW 264
54657: PUSH
54658: LD_INT 14
54660: PUSH
54661: LD_INT 53
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: IN
54668: AND
54669: IFFALSE 54687
54671: PUSH
54672: LD_VAR 0 4
54676: PPUSH
54677: LD_VAR 0 5
54681: PPUSH
54682: CALL_OW 488
54686: AND
54687: IFFALSE 54711
// CutTreeXYR ( unit , x , y , 12 ) ;
54689: LD_VAR 0 2
54693: PPUSH
54694: LD_VAR 0 4
54698: PPUSH
54699: LD_VAR 0 5
54703: PPUSH
54704: LD_INT 12
54706: PPUSH
54707: CALL 54902 0 4
// if cmd = 256 then
54711: LD_VAR 0 1
54715: PUSH
54716: LD_INT 256
54718: EQUAL
54719: IFFALSE 54740
// SetFactoryWaypoint ( unit , x , y ) ;
54721: LD_VAR 0 2
54725: PPUSH
54726: LD_VAR 0 4
54730: PPUSH
54731: LD_VAR 0 5
54735: PPUSH
54736: CALL 61480 0 3
// if cmd = 257 then
54740: LD_VAR 0 1
54744: PUSH
54745: LD_INT 257
54747: EQUAL
54748: IFFALSE 54769
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54750: LD_VAR 0 2
54754: PPUSH
54755: LD_VAR 0 4
54759: PPUSH
54760: LD_VAR 0 5
54764: PPUSH
54765: CALL 61976 0 3
// if cmd = 258 then
54769: LD_VAR 0 1
54773: PUSH
54774: LD_INT 258
54776: EQUAL
54777: IFFALSE 54801
// BurnTreeXYR ( unit , x , y , 8 ) ;
54779: LD_VAR 0 2
54783: PPUSH
54784: LD_VAR 0 4
54788: PPUSH
54789: LD_VAR 0 5
54793: PPUSH
54794: LD_INT 8
54796: PPUSH
54797: CALL 55302 0 4
// end ;
54801: LD_VAR 0 6
54805: RET
// export function ComRadiation ( un ) ; var eff ; begin
54806: LD_INT 0
54808: PPUSH
54809: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54810: LD_VAR 0 1
54814: PPUSH
54815: CALL_OW 264
54819: PUSH
54820: LD_INT 91
54822: NONEQUAL
54823: IFFALSE 54827
// exit ;
54825: GO 54897
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54827: LD_INT 68
54829: PPUSH
54830: LD_VAR 0 1
54834: PPUSH
54835: CALL_OW 255
54839: PPUSH
54840: CALL_OW 321
54844: PUSH
54845: LD_INT 2
54847: EQUAL
54848: IFFALSE 54860
// eff := 50 else
54850: LD_ADDR_VAR 0 3
54854: PUSH
54855: LD_INT 50
54857: ST_TO_ADDR
54858: GO 54868
// eff := 25 ;
54860: LD_ADDR_VAR 0 3
54864: PUSH
54865: LD_INT 25
54867: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54868: LD_VAR 0 1
54872: PPUSH
54873: CALL_OW 250
54877: PPUSH
54878: LD_VAR 0 1
54882: PPUSH
54883: CALL_OW 251
54887: PPUSH
54888: LD_VAR 0 3
54892: PPUSH
54893: CALL_OW 495
// end ;
54897: LD_VAR 0 2
54901: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54902: LD_INT 0
54904: PPUSH
54905: PPUSH
54906: PPUSH
54907: PPUSH
54908: PPUSH
54909: PPUSH
54910: PPUSH
54911: PPUSH
54912: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54913: LD_VAR 0 1
54917: PPUSH
54918: CALL_OW 302
54922: NOT
54923: IFTRUE 54942
54925: PUSH
54926: LD_VAR 0 2
54930: PPUSH
54931: LD_VAR 0 3
54935: PPUSH
54936: CALL_OW 488
54940: NOT
54941: OR
54942: IFTRUE 54951
54944: PUSH
54945: LD_VAR 0 4
54949: NOT
54950: OR
54951: IFFALSE 54955
// exit ;
54953: GO 55297
// list := [ ] ;
54955: LD_ADDR_VAR 0 13
54959: PUSH
54960: EMPTY
54961: ST_TO_ADDR
// if x - r < 0 then
54962: LD_VAR 0 2
54966: PUSH
54967: LD_VAR 0 4
54971: MINUS
54972: PUSH
54973: LD_INT 0
54975: LESS
54976: IFFALSE 54988
// min_x := 0 else
54978: LD_ADDR_VAR 0 7
54982: PUSH
54983: LD_INT 0
54985: ST_TO_ADDR
54986: GO 55004
// min_x := x - r ;
54988: LD_ADDR_VAR 0 7
54992: PUSH
54993: LD_VAR 0 2
54997: PUSH
54998: LD_VAR 0 4
55002: MINUS
55003: ST_TO_ADDR
// if y - r < 0 then
55004: LD_VAR 0 3
55008: PUSH
55009: LD_VAR 0 4
55013: MINUS
55014: PUSH
55015: LD_INT 0
55017: LESS
55018: IFFALSE 55030
// min_y := 0 else
55020: LD_ADDR_VAR 0 8
55024: PUSH
55025: LD_INT 0
55027: ST_TO_ADDR
55028: GO 55046
// min_y := y - r ;
55030: LD_ADDR_VAR 0 8
55034: PUSH
55035: LD_VAR 0 3
55039: PUSH
55040: LD_VAR 0 4
55044: MINUS
55045: ST_TO_ADDR
// max_x := x + r ;
55046: LD_ADDR_VAR 0 9
55050: PUSH
55051: LD_VAR 0 2
55055: PUSH
55056: LD_VAR 0 4
55060: PLUS
55061: ST_TO_ADDR
// max_y := y + r ;
55062: LD_ADDR_VAR 0 10
55066: PUSH
55067: LD_VAR 0 3
55071: PUSH
55072: LD_VAR 0 4
55076: PLUS
55077: ST_TO_ADDR
// for _x = min_x to max_x do
55078: LD_ADDR_VAR 0 11
55082: PUSH
55083: DOUBLE
55084: LD_VAR 0 7
55088: DEC
55089: ST_TO_ADDR
55090: LD_VAR 0 9
55094: PUSH
55095: FOR_TO
55096: IFFALSE 55215
// for _y = min_y to max_y do
55098: LD_ADDR_VAR 0 12
55102: PUSH
55103: DOUBLE
55104: LD_VAR 0 8
55108: DEC
55109: ST_TO_ADDR
55110: LD_VAR 0 10
55114: PUSH
55115: FOR_TO
55116: IFFALSE 55211
// begin if not ValidHex ( _x , _y ) then
55118: LD_VAR 0 11
55122: PPUSH
55123: LD_VAR 0 12
55127: PPUSH
55128: CALL_OW 488
55132: NOT
55133: IFFALSE 55137
// continue ;
55135: GO 55115
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55137: LD_VAR 0 11
55141: PPUSH
55142: LD_VAR 0 12
55146: PPUSH
55147: CALL_OW 351
55151: IFFALSE 55169
55153: PUSH
55154: LD_VAR 0 11
55158: PPUSH
55159: LD_VAR 0 12
55163: PPUSH
55164: CALL_OW 554
55168: AND
55169: IFFALSE 55209
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55171: LD_ADDR_VAR 0 13
55175: PUSH
55176: LD_VAR 0 13
55180: PPUSH
55181: LD_VAR 0 13
55185: PUSH
55186: LD_INT 1
55188: PLUS
55189: PPUSH
55190: LD_VAR 0 11
55194: PUSH
55195: LD_VAR 0 12
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PPUSH
55204: CALL_OW 2
55208: ST_TO_ADDR
// end ;
55209: GO 55115
55211: POP
55212: POP
55213: GO 55095
55215: POP
55216: POP
// if not list then
55217: LD_VAR 0 13
55221: NOT
55222: IFFALSE 55226
// exit ;
55224: GO 55297
// for i in list do
55226: LD_ADDR_VAR 0 6
55230: PUSH
55231: LD_VAR 0 13
55235: PUSH
55236: FOR_IN
55237: IFFALSE 55295
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55239: LD_VAR 0 1
55243: PPUSH
55244: LD_STRING M
55246: PUSH
55247: LD_VAR 0 6
55251: PUSH
55252: LD_INT 1
55254: ARRAY
55255: PUSH
55256: LD_VAR 0 6
55260: PUSH
55261: LD_INT 2
55263: ARRAY
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: PPUSH
55289: CALL_OW 447
55293: GO 55236
55295: POP
55296: POP
// end ;
55297: LD_VAR 0 5
55301: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55302: LD_INT 0
55304: PPUSH
55305: PPUSH
55306: PPUSH
55307: PPUSH
55308: PPUSH
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55314: LD_VAR 0 1
55318: PPUSH
55319: CALL_OW 302
55323: NOT
55324: IFTRUE 55343
55326: PUSH
55327: LD_VAR 0 2
55331: PPUSH
55332: LD_VAR 0 3
55336: PPUSH
55337: CALL_OW 488
55341: NOT
55342: OR
55343: IFTRUE 55352
55345: PUSH
55346: LD_VAR 0 4
55350: NOT
55351: OR
55352: IFFALSE 55356
// exit ;
55354: GO 55873
// list := [ ] ;
55356: LD_ADDR_VAR 0 13
55360: PUSH
55361: EMPTY
55362: ST_TO_ADDR
// if x - r < 0 then
55363: LD_VAR 0 2
55367: PUSH
55368: LD_VAR 0 4
55372: MINUS
55373: PUSH
55374: LD_INT 0
55376: LESS
55377: IFFALSE 55389
// min_x := 0 else
55379: LD_ADDR_VAR 0 7
55383: PUSH
55384: LD_INT 0
55386: ST_TO_ADDR
55387: GO 55405
// min_x := x - r ;
55389: LD_ADDR_VAR 0 7
55393: PUSH
55394: LD_VAR 0 2
55398: PUSH
55399: LD_VAR 0 4
55403: MINUS
55404: ST_TO_ADDR
// if y - r < 0 then
55405: LD_VAR 0 3
55409: PUSH
55410: LD_VAR 0 4
55414: MINUS
55415: PUSH
55416: LD_INT 0
55418: LESS
55419: IFFALSE 55431
// min_y := 0 else
55421: LD_ADDR_VAR 0 8
55425: PUSH
55426: LD_INT 0
55428: ST_TO_ADDR
55429: GO 55447
// min_y := y - r ;
55431: LD_ADDR_VAR 0 8
55435: PUSH
55436: LD_VAR 0 3
55440: PUSH
55441: LD_VAR 0 4
55445: MINUS
55446: ST_TO_ADDR
// max_x := x + r ;
55447: LD_ADDR_VAR 0 9
55451: PUSH
55452: LD_VAR 0 2
55456: PUSH
55457: LD_VAR 0 4
55461: PLUS
55462: ST_TO_ADDR
// max_y := y + r ;
55463: LD_ADDR_VAR 0 10
55467: PUSH
55468: LD_VAR 0 3
55472: PUSH
55473: LD_VAR 0 4
55477: PLUS
55478: ST_TO_ADDR
// for _x = min_x to max_x do
55479: LD_ADDR_VAR 0 11
55483: PUSH
55484: DOUBLE
55485: LD_VAR 0 7
55489: DEC
55490: ST_TO_ADDR
55491: LD_VAR 0 9
55495: PUSH
55496: FOR_TO
55497: IFFALSE 55616
// for _y = min_y to max_y do
55499: LD_ADDR_VAR 0 12
55503: PUSH
55504: DOUBLE
55505: LD_VAR 0 8
55509: DEC
55510: ST_TO_ADDR
55511: LD_VAR 0 10
55515: PUSH
55516: FOR_TO
55517: IFFALSE 55612
// begin if not ValidHex ( _x , _y ) then
55519: LD_VAR 0 11
55523: PPUSH
55524: LD_VAR 0 12
55528: PPUSH
55529: CALL_OW 488
55533: NOT
55534: IFFALSE 55538
// continue ;
55536: GO 55516
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55538: LD_VAR 0 11
55542: PPUSH
55543: LD_VAR 0 12
55547: PPUSH
55548: CALL_OW 351
55552: IFFALSE 55570
55554: PUSH
55555: LD_VAR 0 11
55559: PPUSH
55560: LD_VAR 0 12
55564: PPUSH
55565: CALL_OW 554
55569: AND
55570: IFFALSE 55610
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55572: LD_ADDR_VAR 0 13
55576: PUSH
55577: LD_VAR 0 13
55581: PPUSH
55582: LD_VAR 0 13
55586: PUSH
55587: LD_INT 1
55589: PLUS
55590: PPUSH
55591: LD_VAR 0 11
55595: PUSH
55596: LD_VAR 0 12
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PPUSH
55605: CALL_OW 2
55609: ST_TO_ADDR
// end ;
55610: GO 55516
55612: POP
55613: POP
55614: GO 55496
55616: POP
55617: POP
// if not list then
55618: LD_VAR 0 13
55622: NOT
55623: IFFALSE 55627
// exit ;
55625: GO 55873
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55627: LD_ADDR_VAR 0 13
55631: PUSH
55632: LD_VAR 0 1
55636: PPUSH
55637: LD_VAR 0 13
55641: PPUSH
55642: LD_INT 1
55644: PPUSH
55645: LD_INT 1
55647: PPUSH
55648: CALL 15640 0 4
55652: ST_TO_ADDR
// ComStop ( flame ) ;
55653: LD_VAR 0 1
55657: PPUSH
55658: CALL_OW 141
// for i in list do
55662: LD_ADDR_VAR 0 6
55666: PUSH
55667: LD_VAR 0 13
55671: PUSH
55672: FOR_IN
55673: IFFALSE 55704
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55675: LD_VAR 0 1
55679: PPUSH
55680: LD_VAR 0 6
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: PPUSH
55689: LD_VAR 0 6
55693: PUSH
55694: LD_INT 2
55696: ARRAY
55697: PPUSH
55698: CALL_OW 176
55702: GO 55672
55704: POP
55705: POP
// repeat wait ( 0 0$1 ) ;
55706: LD_INT 35
55708: PPUSH
55709: CALL_OW 67
// task := GetTaskList ( flame ) ;
55713: LD_ADDR_VAR 0 14
55717: PUSH
55718: LD_VAR 0 1
55722: PPUSH
55723: CALL_OW 437
55727: ST_TO_ADDR
// if not task then
55728: LD_VAR 0 14
55732: NOT
55733: IFFALSE 55737
// exit ;
55735: GO 55873
// if task [ 1 ] [ 1 ] <> | then
55737: LD_VAR 0 14
55741: PUSH
55742: LD_INT 1
55744: ARRAY
55745: PUSH
55746: LD_INT 1
55748: ARRAY
55749: PUSH
55750: LD_STRING |
55752: NONEQUAL
55753: IFFALSE 55757
// exit ;
55755: GO 55873
// _x := task [ 1 ] [ 2 ] ;
55757: LD_ADDR_VAR 0 11
55761: PUSH
55762: LD_VAR 0 14
55766: PUSH
55767: LD_INT 1
55769: ARRAY
55770: PUSH
55771: LD_INT 2
55773: ARRAY
55774: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55775: LD_ADDR_VAR 0 12
55779: PUSH
55780: LD_VAR 0 14
55784: PUSH
55785: LD_INT 1
55787: ARRAY
55788: PUSH
55789: LD_INT 3
55791: ARRAY
55792: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55793: LD_VAR 0 11
55797: PPUSH
55798: LD_VAR 0 12
55802: PPUSH
55803: CALL_OW 351
55807: NOT
55808: IFTRUE 55827
55810: PUSH
55811: LD_VAR 0 11
55815: PPUSH
55816: LD_VAR 0 12
55820: PPUSH
55821: CALL_OW 554
55825: NOT
55826: OR
55827: IFFALSE 55861
// begin task := Delete ( task , 1 ) ;
55829: LD_ADDR_VAR 0 14
55833: PUSH
55834: LD_VAR 0 14
55838: PPUSH
55839: LD_INT 1
55841: PPUSH
55842: CALL_OW 3
55846: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55847: LD_VAR 0 1
55851: PPUSH
55852: LD_VAR 0 14
55856: PPUSH
55857: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55861: LD_VAR 0 1
55865: PPUSH
55866: CALL_OW 314
55870: NOT
55871: IFFALSE 55706
// end ;
55873: LD_VAR 0 5
55877: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55878: LD_EXP 48
55882: NOT
55883: IFFALSE 55933
55885: GO 55887
55887: DISABLE
// begin initHack := true ;
55888: LD_ADDR_EXP 48
55892: PUSH
55893: LD_INT 1
55895: ST_TO_ADDR
// hackTanks := [ ] ;
55896: LD_ADDR_EXP 49
55900: PUSH
55901: EMPTY
55902: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55903: LD_ADDR_EXP 50
55907: PUSH
55908: EMPTY
55909: ST_TO_ADDR
// hackLimit := 3 ;
55910: LD_ADDR_EXP 51
55914: PUSH
55915: LD_INT 3
55917: ST_TO_ADDR
// hackDist := 12 ;
55918: LD_ADDR_EXP 52
55922: PUSH
55923: LD_INT 12
55925: ST_TO_ADDR
// hackCounter := [ ] ;
55926: LD_ADDR_EXP 53
55930: PUSH
55931: EMPTY
55932: ST_TO_ADDR
// end ;
55933: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55934: LD_EXP 48
55938: IFFALSE 55956
55940: PUSH
55941: LD_INT 34
55943: PUSH
55944: LD_INT 99
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PPUSH
55951: CALL_OW 69
55955: AND
55956: IFFALSE 56209
55958: GO 55960
55960: DISABLE
55961: LD_INT 0
55963: PPUSH
55964: PPUSH
// begin enable ;
55965: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55966: LD_ADDR_VAR 0 1
55970: PUSH
55971: LD_INT 34
55973: PUSH
55974: LD_INT 99
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PPUSH
55981: CALL_OW 69
55985: PUSH
55986: FOR_IN
55987: IFFALSE 56207
// begin if not i in hackTanks then
55989: LD_VAR 0 1
55993: PUSH
55994: LD_EXP 49
55998: IN
55999: NOT
56000: IFFALSE 56083
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56002: LD_ADDR_EXP 49
56006: PUSH
56007: LD_EXP 49
56011: PPUSH
56012: LD_EXP 49
56016: PUSH
56017: LD_INT 1
56019: PLUS
56020: PPUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: CALL_OW 1
56030: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56031: LD_ADDR_EXP 50
56035: PUSH
56036: LD_EXP 50
56040: PPUSH
56041: LD_EXP 50
56045: PUSH
56046: LD_INT 1
56048: PLUS
56049: PPUSH
56050: EMPTY
56051: PPUSH
56052: CALL_OW 1
56056: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56057: LD_ADDR_EXP 53
56061: PUSH
56062: LD_EXP 53
56066: PPUSH
56067: LD_EXP 53
56071: PUSH
56072: LD_INT 1
56074: PLUS
56075: PPUSH
56076: EMPTY
56077: PPUSH
56078: CALL_OW 1
56082: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56083: LD_VAR 0 1
56087: PPUSH
56088: CALL_OW 302
56092: NOT
56093: IFFALSE 56106
// begin HackUnlinkAll ( i ) ;
56095: LD_VAR 0 1
56099: PPUSH
56100: CALL 56212 0 1
// continue ;
56104: GO 55986
// end ; HackCheckCapturedStatus ( i ) ;
56106: LD_VAR 0 1
56110: PPUSH
56111: CALL 56657 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56115: LD_ADDR_VAR 0 2
56119: PUSH
56120: LD_INT 81
56122: PUSH
56123: LD_VAR 0 1
56127: PPUSH
56128: CALL_OW 255
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 33
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 91
56149: PUSH
56150: LD_VAR 0 1
56154: PUSH
56155: LD_EXP 52
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 50
56167: PUSH
56168: EMPTY
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: PPUSH
56177: CALL_OW 69
56181: ST_TO_ADDR
// if not tmp then
56182: LD_VAR 0 2
56186: NOT
56187: IFFALSE 56191
// continue ;
56189: GO 55986
// HackLink ( i , tmp ) ;
56191: LD_VAR 0 1
56195: PPUSH
56196: LD_VAR 0 2
56200: PPUSH
56201: CALL 56348 0 2
// end ;
56205: GO 55986
56207: POP
56208: POP
// end ;
56209: PPOPN 2
56211: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56212: LD_INT 0
56214: PPUSH
56215: PPUSH
56216: PPUSH
// if not hack in hackTanks then
56217: LD_VAR 0 1
56221: PUSH
56222: LD_EXP 49
56226: IN
56227: NOT
56228: IFFALSE 56232
// exit ;
56230: GO 56343
// index := GetElementIndex ( hackTanks , hack ) ;
56232: LD_ADDR_VAR 0 4
56236: PUSH
56237: LD_EXP 49
56241: PPUSH
56242: LD_VAR 0 1
56246: PPUSH
56247: CALL 14935 0 2
56251: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56252: LD_EXP 50
56256: PUSH
56257: LD_VAR 0 4
56261: ARRAY
56262: IFFALSE 56343
// begin for i in hackTanksCaptured [ index ] do
56264: LD_ADDR_VAR 0 3
56268: PUSH
56269: LD_EXP 50
56273: PUSH
56274: LD_VAR 0 4
56278: ARRAY
56279: PUSH
56280: FOR_IN
56281: IFFALSE 56307
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56283: LD_VAR 0 3
56287: PUSH
56288: LD_INT 1
56290: ARRAY
56291: PPUSH
56292: LD_VAR 0 3
56296: PUSH
56297: LD_INT 2
56299: ARRAY
56300: PPUSH
56301: CALL_OW 235
56305: GO 56280
56307: POP
56308: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56309: LD_ADDR_EXP 50
56313: PUSH
56314: LD_EXP 50
56318: PPUSH
56319: LD_VAR 0 4
56323: PPUSH
56324: EMPTY
56325: PPUSH
56326: CALL_OW 1
56330: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56331: LD_VAR 0 1
56335: PPUSH
56336: LD_INT 0
56338: PPUSH
56339: CALL_OW 505
// end ; end ;
56343: LD_VAR 0 2
56347: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56348: LD_INT 0
56350: PPUSH
56351: PPUSH
56352: PPUSH
// if not hack in hackTanks or not vehicles then
56353: LD_VAR 0 1
56357: PUSH
56358: LD_EXP 49
56362: IN
56363: NOT
56364: IFTRUE 56373
56366: PUSH
56367: LD_VAR 0 2
56371: NOT
56372: OR
56373: IFFALSE 56377
// exit ;
56375: GO 56652
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56377: LD_ADDR_VAR 0 2
56381: PUSH
56382: LD_VAR 0 1
56386: PPUSH
56387: LD_VAR 0 2
56391: PPUSH
56392: LD_INT 1
56394: PPUSH
56395: LD_INT 1
56397: PPUSH
56398: CALL 15587 0 4
56402: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56403: LD_ADDR_VAR 0 5
56407: PUSH
56408: LD_EXP 49
56412: PPUSH
56413: LD_VAR 0 1
56417: PPUSH
56418: CALL 14935 0 2
56422: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56423: LD_EXP 50
56427: PUSH
56428: LD_VAR 0 5
56432: ARRAY
56433: PUSH
56434: LD_EXP 51
56438: LESS
56439: IFFALSE 56628
// begin for i := 1 to vehicles do
56441: LD_ADDR_VAR 0 4
56445: PUSH
56446: DOUBLE
56447: LD_INT 1
56449: DEC
56450: ST_TO_ADDR
56451: LD_VAR 0 2
56455: PUSH
56456: FOR_TO
56457: IFFALSE 56626
// begin if hackTanksCaptured [ index ] = hackLimit then
56459: LD_EXP 50
56463: PUSH
56464: LD_VAR 0 5
56468: ARRAY
56469: PUSH
56470: LD_EXP 51
56474: EQUAL
56475: IFFALSE 56479
// break ;
56477: GO 56626
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56479: LD_ADDR_EXP 53
56483: PUSH
56484: LD_EXP 53
56488: PPUSH
56489: LD_VAR 0 5
56493: PPUSH
56494: LD_EXP 53
56498: PUSH
56499: LD_VAR 0 5
56503: ARRAY
56504: PUSH
56505: LD_INT 1
56507: PLUS
56508: PPUSH
56509: CALL_OW 1
56513: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56514: LD_ADDR_EXP 50
56518: PUSH
56519: LD_EXP 50
56523: PPUSH
56524: LD_VAR 0 5
56528: PUSH
56529: LD_EXP 50
56533: PUSH
56534: LD_VAR 0 5
56538: ARRAY
56539: PUSH
56540: LD_INT 1
56542: PLUS
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PPUSH
56548: LD_VAR 0 2
56552: PUSH
56553: LD_VAR 0 4
56557: ARRAY
56558: PUSH
56559: LD_VAR 0 2
56563: PUSH
56564: LD_VAR 0 4
56568: ARRAY
56569: PPUSH
56570: CALL_OW 255
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PPUSH
56579: CALL 15152 0 3
56583: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56584: LD_VAR 0 2
56588: PUSH
56589: LD_VAR 0 4
56593: ARRAY
56594: PPUSH
56595: LD_VAR 0 1
56599: PPUSH
56600: CALL_OW 255
56604: PPUSH
56605: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56609: LD_VAR 0 2
56613: PUSH
56614: LD_VAR 0 4
56618: ARRAY
56619: PPUSH
56620: CALL_OW 141
// end ;
56624: GO 56456
56626: POP
56627: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56628: LD_VAR 0 1
56632: PPUSH
56633: LD_EXP 50
56637: PUSH
56638: LD_VAR 0 5
56642: ARRAY
56643: PUSH
56644: LD_INT 0
56646: PLUS
56647: PPUSH
56648: CALL_OW 505
// end ;
56652: LD_VAR 0 3
56656: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56657: LD_INT 0
56659: PPUSH
56660: PPUSH
56661: PPUSH
56662: PPUSH
// if not hack in hackTanks then
56663: LD_VAR 0 1
56667: PUSH
56668: LD_EXP 49
56672: IN
56673: NOT
56674: IFFALSE 56678
// exit ;
56676: GO 56922
// index := GetElementIndex ( hackTanks , hack ) ;
56678: LD_ADDR_VAR 0 4
56682: PUSH
56683: LD_EXP 49
56687: PPUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: CALL 14935 0 2
56697: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56698: LD_ADDR_VAR 0 3
56702: PUSH
56703: DOUBLE
56704: LD_EXP 50
56708: PUSH
56709: LD_VAR 0 4
56713: ARRAY
56714: INC
56715: ST_TO_ADDR
56716: LD_INT 1
56718: PUSH
56719: FOR_DOWNTO
56720: IFFALSE 56896
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56722: LD_ADDR_VAR 0 5
56726: PUSH
56727: LD_EXP 50
56731: PUSH
56732: LD_VAR 0 4
56736: ARRAY
56737: PUSH
56738: LD_VAR 0 3
56742: ARRAY
56743: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56744: LD_VAR 0 5
56748: PUSH
56749: LD_INT 1
56751: ARRAY
56752: PPUSH
56753: CALL_OW 302
56757: NOT
56758: IFTRUE 56786
56760: PUSH
56761: LD_VAR 0 5
56765: PUSH
56766: LD_INT 1
56768: ARRAY
56769: PPUSH
56770: CALL_OW 255
56774: PUSH
56775: LD_VAR 0 1
56779: PPUSH
56780: CALL_OW 255
56784: NONEQUAL
56785: OR
56786: IFFALSE 56894
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56788: LD_VAR 0 5
56792: PUSH
56793: LD_INT 1
56795: ARRAY
56796: PPUSH
56797: CALL_OW 305
56801: IFFALSE 56829
56803: PUSH
56804: LD_VAR 0 5
56808: PUSH
56809: LD_INT 1
56811: ARRAY
56812: PPUSH
56813: CALL_OW 255
56817: PUSH
56818: LD_VAR 0 1
56822: PPUSH
56823: CALL_OW 255
56827: EQUAL
56828: AND
56829: IFFALSE 56853
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56831: LD_VAR 0 5
56835: PUSH
56836: LD_INT 1
56838: ARRAY
56839: PPUSH
56840: LD_VAR 0 5
56844: PUSH
56845: LD_INT 2
56847: ARRAY
56848: PPUSH
56849: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56853: LD_ADDR_EXP 50
56857: PUSH
56858: LD_EXP 50
56862: PPUSH
56863: LD_VAR 0 4
56867: PPUSH
56868: LD_EXP 50
56872: PUSH
56873: LD_VAR 0 4
56877: ARRAY
56878: PPUSH
56879: LD_VAR 0 3
56883: PPUSH
56884: CALL_OW 3
56888: PPUSH
56889: CALL_OW 1
56893: ST_TO_ADDR
// end ; end ;
56894: GO 56719
56896: POP
56897: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56898: LD_VAR 0 1
56902: PPUSH
56903: LD_EXP 50
56907: PUSH
56908: LD_VAR 0 4
56912: ARRAY
56913: PUSH
56914: LD_INT 0
56916: PLUS
56917: PPUSH
56918: CALL_OW 505
// end ;
56922: LD_VAR 0 2
56926: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56927: LD_INT 0
56929: PPUSH
56930: PPUSH
56931: PPUSH
56932: PPUSH
// if not hack in hackTanks then
56933: LD_VAR 0 1
56937: PUSH
56938: LD_EXP 49
56942: IN
56943: NOT
56944: IFFALSE 56948
// exit ;
56946: GO 57033
// index := GetElementIndex ( hackTanks , hack ) ;
56948: LD_ADDR_VAR 0 5
56952: PUSH
56953: LD_EXP 49
56957: PPUSH
56958: LD_VAR 0 1
56962: PPUSH
56963: CALL 14935 0 2
56967: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56968: LD_ADDR_VAR 0 4
56972: PUSH
56973: DOUBLE
56974: LD_INT 1
56976: DEC
56977: ST_TO_ADDR
56978: LD_EXP 50
56982: PUSH
56983: LD_VAR 0 5
56987: ARRAY
56988: PUSH
56989: FOR_TO
56990: IFFALSE 57031
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56992: LD_EXP 50
56996: PUSH
56997: LD_VAR 0 5
57001: ARRAY
57002: PUSH
57003: LD_VAR 0 4
57007: ARRAY
57008: PUSH
57009: LD_INT 1
57011: ARRAY
57012: PUSH
57013: LD_VAR 0 2
57017: EQUAL
57018: IFFALSE 57029
// KillUnit ( vehicle ) ;
57020: LD_VAR 0 2
57024: PPUSH
57025: CALL_OW 66
57029: GO 56989
57031: POP
57032: POP
// end ;
57033: LD_VAR 0 3
57037: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57038: LD_EXP 54
57042: NOT
57043: IFFALSE 57078
57045: GO 57047
57047: DISABLE
// begin initMiner := true ;
57048: LD_ADDR_EXP 54
57052: PUSH
57053: LD_INT 1
57055: ST_TO_ADDR
// minersList := [ ] ;
57056: LD_ADDR_EXP 55
57060: PUSH
57061: EMPTY
57062: ST_TO_ADDR
// minerMinesList := [ ] ;
57063: LD_ADDR_EXP 56
57067: PUSH
57068: EMPTY
57069: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57070: LD_ADDR_EXP 57
57074: PUSH
57075: LD_INT 5
57077: ST_TO_ADDR
// end ;
57078: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57079: LD_EXP 54
57083: IFFALSE 57101
57085: PUSH
57086: LD_INT 34
57088: PUSH
57089: LD_INT 81
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PPUSH
57096: CALL_OW 69
57100: AND
57101: IFFALSE 57564
57103: GO 57105
57105: DISABLE
57106: LD_INT 0
57108: PPUSH
57109: PPUSH
57110: PPUSH
57111: PPUSH
// begin enable ;
57112: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57113: LD_ADDR_VAR 0 1
57117: PUSH
57118: LD_INT 34
57120: PUSH
57121: LD_INT 81
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PPUSH
57128: CALL_OW 69
57132: PUSH
57133: FOR_IN
57134: IFFALSE 57206
// begin if not i in minersList then
57136: LD_VAR 0 1
57140: PUSH
57141: LD_EXP 55
57145: IN
57146: NOT
57147: IFFALSE 57204
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57149: LD_ADDR_EXP 55
57153: PUSH
57154: LD_EXP 55
57158: PPUSH
57159: LD_EXP 55
57163: PUSH
57164: LD_INT 1
57166: PLUS
57167: PPUSH
57168: LD_VAR 0 1
57172: PPUSH
57173: CALL_OW 1
57177: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57178: LD_ADDR_EXP 56
57182: PUSH
57183: LD_EXP 56
57187: PPUSH
57188: LD_EXP 56
57192: PUSH
57193: LD_INT 1
57195: PLUS
57196: PPUSH
57197: EMPTY
57198: PPUSH
57199: CALL_OW 1
57203: ST_TO_ADDR
// end end ;
57204: GO 57133
57206: POP
57207: POP
// for i := minerMinesList downto 1 do
57208: LD_ADDR_VAR 0 1
57212: PUSH
57213: DOUBLE
57214: LD_EXP 56
57218: INC
57219: ST_TO_ADDR
57220: LD_INT 1
57222: PUSH
57223: FOR_DOWNTO
57224: IFFALSE 57562
// begin if IsLive ( minersList [ i ] ) then
57226: LD_EXP 55
57230: PUSH
57231: LD_VAR 0 1
57235: ARRAY
57236: PPUSH
57237: CALL_OW 300
57241: IFFALSE 57269
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57243: LD_EXP 55
57247: PUSH
57248: LD_VAR 0 1
57252: ARRAY
57253: PPUSH
57254: LD_EXP 56
57258: PUSH
57259: LD_VAR 0 1
57263: ARRAY
57264: PPUSH
57265: CALL_OW 505
// if not minerMinesList [ i ] then
57269: LD_EXP 56
57273: PUSH
57274: LD_VAR 0 1
57278: ARRAY
57279: NOT
57280: IFFALSE 57284
// continue ;
57282: GO 57223
// for j := minerMinesList [ i ] downto 1 do
57284: LD_ADDR_VAR 0 2
57288: PUSH
57289: DOUBLE
57290: LD_EXP 56
57294: PUSH
57295: LD_VAR 0 1
57299: ARRAY
57300: INC
57301: ST_TO_ADDR
57302: LD_INT 1
57304: PUSH
57305: FOR_DOWNTO
57306: IFFALSE 57558
// begin side := GetSide ( minersList [ i ] ) ;
57308: LD_ADDR_VAR 0 3
57312: PUSH
57313: LD_EXP 55
57317: PUSH
57318: LD_VAR 0 1
57322: ARRAY
57323: PPUSH
57324: CALL_OW 255
57328: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57329: LD_ADDR_VAR 0 4
57333: PUSH
57334: LD_EXP 56
57338: PUSH
57339: LD_VAR 0 1
57343: ARRAY
57344: PUSH
57345: LD_VAR 0 2
57349: ARRAY
57350: PUSH
57351: LD_INT 1
57353: ARRAY
57354: PPUSH
57355: LD_EXP 56
57359: PUSH
57360: LD_VAR 0 1
57364: ARRAY
57365: PUSH
57366: LD_VAR 0 2
57370: ARRAY
57371: PUSH
57372: LD_INT 2
57374: ARRAY
57375: PPUSH
57376: CALL_OW 428
57380: ST_TO_ADDR
// if not tmp then
57381: LD_VAR 0 4
57385: NOT
57386: IFFALSE 57390
// continue ;
57388: GO 57305
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57390: LD_VAR 0 4
57394: PUSH
57395: LD_INT 81
57397: PUSH
57398: LD_VAR 0 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PPUSH
57407: CALL_OW 69
57411: IN
57412: IFFALSE 57462
57414: PUSH
57415: LD_EXP 56
57419: PUSH
57420: LD_VAR 0 1
57424: ARRAY
57425: PUSH
57426: LD_VAR 0 2
57430: ARRAY
57431: PUSH
57432: LD_INT 1
57434: ARRAY
57435: PPUSH
57436: LD_EXP 56
57440: PUSH
57441: LD_VAR 0 1
57445: ARRAY
57446: PUSH
57447: LD_VAR 0 2
57451: ARRAY
57452: PUSH
57453: LD_INT 2
57455: ARRAY
57456: PPUSH
57457: CALL_OW 458
57461: AND
57462: IFFALSE 57556
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57464: LD_EXP 56
57468: PUSH
57469: LD_VAR 0 1
57473: ARRAY
57474: PUSH
57475: LD_VAR 0 2
57479: ARRAY
57480: PUSH
57481: LD_INT 1
57483: ARRAY
57484: PPUSH
57485: LD_EXP 56
57489: PUSH
57490: LD_VAR 0 1
57494: ARRAY
57495: PUSH
57496: LD_VAR 0 2
57500: ARRAY
57501: PUSH
57502: LD_INT 2
57504: ARRAY
57505: PPUSH
57506: LD_VAR 0 3
57510: PPUSH
57511: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57515: LD_ADDR_EXP 56
57519: PUSH
57520: LD_EXP 56
57524: PPUSH
57525: LD_VAR 0 1
57529: PPUSH
57530: LD_EXP 56
57534: PUSH
57535: LD_VAR 0 1
57539: ARRAY
57540: PPUSH
57541: LD_VAR 0 2
57545: PPUSH
57546: CALL_OW 3
57550: PPUSH
57551: CALL_OW 1
57555: ST_TO_ADDR
// end ; end ;
57556: GO 57305
57558: POP
57559: POP
// end ;
57560: GO 57223
57562: POP
57563: POP
// end ;
57564: PPOPN 4
57566: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57567: LD_INT 0
57569: PPUSH
57570: PPUSH
// result := false ;
57571: LD_ADDR_VAR 0 4
57575: PUSH
57576: LD_INT 0
57578: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57579: LD_VAR 0 1
57583: PPUSH
57584: CALL_OW 264
57588: PUSH
57589: LD_INT 81
57591: EQUAL
57592: NOT
57593: IFFALSE 57597
// exit ;
57595: GO 57841
// index := GetElementIndex ( minersList , unit ) ;
57597: LD_ADDR_VAR 0 5
57601: PUSH
57602: LD_EXP 55
57606: PPUSH
57607: LD_VAR 0 1
57611: PPUSH
57612: CALL 14935 0 2
57616: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57617: LD_EXP 56
57621: PUSH
57622: LD_VAR 0 5
57626: ARRAY
57627: PUSH
57628: LD_EXP 57
57632: GREATEREQUAL
57633: IFFALSE 57637
// exit ;
57635: GO 57841
// ComMoveXY ( unit , x , y ) ;
57637: LD_VAR 0 1
57641: PPUSH
57642: LD_VAR 0 2
57646: PPUSH
57647: LD_VAR 0 3
57651: PPUSH
57652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57656: LD_INT 35
57658: PPUSH
57659: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57663: LD_VAR 0 1
57667: PPUSH
57668: LD_VAR 0 2
57672: PPUSH
57673: LD_VAR 0 3
57677: PPUSH
57678: CALL 46981 0 3
57682: NOT
57683: IFFALSE 57696
57685: PUSH
57686: LD_VAR 0 1
57690: PPUSH
57691: CALL_OW 314
57695: AND
57696: IFFALSE 57700
// exit ;
57698: GO 57841
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57700: LD_VAR 0 2
57704: PPUSH
57705: LD_VAR 0 3
57709: PPUSH
57710: CALL_OW 428
57714: PUSH
57715: LD_VAR 0 1
57719: EQUAL
57720: IFFALSE 57734
57722: PUSH
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 314
57732: NOT
57733: AND
57734: IFFALSE 57656
// PlaySoundXY ( x , y , PlantMine ) ;
57736: LD_VAR 0 2
57740: PPUSH
57741: LD_VAR 0 3
57745: PPUSH
57746: LD_STRING PlantMine
57748: PPUSH
57749: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57753: LD_VAR 0 2
57757: PPUSH
57758: LD_VAR 0 3
57762: PPUSH
57763: LD_VAR 0 1
57767: PPUSH
57768: CALL_OW 255
57772: PPUSH
57773: LD_INT 0
57775: PPUSH
57776: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57780: LD_ADDR_EXP 56
57784: PUSH
57785: LD_EXP 56
57789: PPUSH
57790: LD_VAR 0 5
57794: PUSH
57795: LD_EXP 56
57799: PUSH
57800: LD_VAR 0 5
57804: ARRAY
57805: PUSH
57806: LD_INT 1
57808: PLUS
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PPUSH
57814: LD_VAR 0 2
57818: PUSH
57819: LD_VAR 0 3
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PPUSH
57828: CALL 15152 0 3
57832: ST_TO_ADDR
// result := true ;
57833: LD_ADDR_VAR 0 4
57837: PUSH
57838: LD_INT 1
57840: ST_TO_ADDR
// end ;
57841: LD_VAR 0 4
57845: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57846: LD_INT 0
57848: PPUSH
57849: PPUSH
57850: PPUSH
// if not unit in minersList then
57851: LD_VAR 0 1
57855: PUSH
57856: LD_EXP 55
57860: IN
57861: NOT
57862: IFFALSE 57866
// exit ;
57864: GO 58260
// index := GetElementIndex ( minersList , unit ) ;
57866: LD_ADDR_VAR 0 6
57870: PUSH
57871: LD_EXP 55
57875: PPUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: CALL 14935 0 2
57885: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57886: LD_ADDR_VAR 0 5
57890: PUSH
57891: DOUBLE
57892: LD_EXP 56
57896: PUSH
57897: LD_VAR 0 6
57901: ARRAY
57902: INC
57903: ST_TO_ADDR
57904: LD_INT 1
57906: PUSH
57907: FOR_DOWNTO
57908: IFFALSE 58071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57910: LD_EXP 56
57914: PUSH
57915: LD_VAR 0 6
57919: ARRAY
57920: PUSH
57921: LD_VAR 0 5
57925: ARRAY
57926: PUSH
57927: LD_INT 1
57929: ARRAY
57930: PUSH
57931: LD_VAR 0 2
57935: EQUAL
57936: IFFALSE 57966
57938: PUSH
57939: LD_EXP 56
57943: PUSH
57944: LD_VAR 0 6
57948: ARRAY
57949: PUSH
57950: LD_VAR 0 5
57954: ARRAY
57955: PUSH
57956: LD_INT 2
57958: ARRAY
57959: PUSH
57960: LD_VAR 0 3
57964: EQUAL
57965: AND
57966: IFFALSE 58069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57968: LD_EXP 56
57972: PUSH
57973: LD_VAR 0 6
57977: ARRAY
57978: PUSH
57979: LD_VAR 0 5
57983: ARRAY
57984: PUSH
57985: LD_INT 1
57987: ARRAY
57988: PPUSH
57989: LD_EXP 56
57993: PUSH
57994: LD_VAR 0 6
57998: ARRAY
57999: PUSH
58000: LD_VAR 0 5
58004: ARRAY
58005: PUSH
58006: LD_INT 2
58008: ARRAY
58009: PPUSH
58010: LD_VAR 0 1
58014: PPUSH
58015: CALL_OW 255
58019: PPUSH
58020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58024: LD_ADDR_EXP 56
58028: PUSH
58029: LD_EXP 56
58033: PPUSH
58034: LD_VAR 0 6
58038: PPUSH
58039: LD_EXP 56
58043: PUSH
58044: LD_VAR 0 6
58048: ARRAY
58049: PPUSH
58050: LD_VAR 0 5
58054: PPUSH
58055: CALL_OW 3
58059: PPUSH
58060: CALL_OW 1
58064: ST_TO_ADDR
// exit ;
58065: POP
58066: POP
58067: GO 58260
// end ; end ;
58069: GO 57907
58071: POP
58072: POP
// for i := minerMinesList [ index ] downto 1 do
58073: LD_ADDR_VAR 0 5
58077: PUSH
58078: DOUBLE
58079: LD_EXP 56
58083: PUSH
58084: LD_VAR 0 6
58088: ARRAY
58089: INC
58090: ST_TO_ADDR
58091: LD_INT 1
58093: PUSH
58094: FOR_DOWNTO
58095: IFFALSE 58258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58097: LD_EXP 56
58101: PUSH
58102: LD_VAR 0 6
58106: ARRAY
58107: PUSH
58108: LD_VAR 0 5
58112: ARRAY
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: PPUSH
58118: LD_EXP 56
58122: PUSH
58123: LD_VAR 0 6
58127: ARRAY
58128: PUSH
58129: LD_VAR 0 5
58133: ARRAY
58134: PUSH
58135: LD_INT 2
58137: ARRAY
58138: PPUSH
58139: LD_VAR 0 2
58143: PPUSH
58144: LD_VAR 0 3
58148: PPUSH
58149: CALL_OW 298
58153: PUSH
58154: LD_INT 6
58156: LESS
58157: IFFALSE 58256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58159: LD_EXP 56
58163: PUSH
58164: LD_VAR 0 6
58168: ARRAY
58169: PUSH
58170: LD_VAR 0 5
58174: ARRAY
58175: PUSH
58176: LD_INT 1
58178: ARRAY
58179: PPUSH
58180: LD_EXP 56
58184: PUSH
58185: LD_VAR 0 6
58189: ARRAY
58190: PUSH
58191: LD_VAR 0 5
58195: ARRAY
58196: PUSH
58197: LD_INT 2
58199: ARRAY
58200: PPUSH
58201: LD_VAR 0 1
58205: PPUSH
58206: CALL_OW 255
58210: PPUSH
58211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58215: LD_ADDR_EXP 56
58219: PUSH
58220: LD_EXP 56
58224: PPUSH
58225: LD_VAR 0 6
58229: PPUSH
58230: LD_EXP 56
58234: PUSH
58235: LD_VAR 0 6
58239: ARRAY
58240: PPUSH
58241: LD_VAR 0 5
58245: PPUSH
58246: CALL_OW 3
58250: PPUSH
58251: CALL_OW 1
58255: ST_TO_ADDR
// end ; end ;
58256: GO 58094
58258: POP
58259: POP
// end ;
58260: LD_VAR 0 4
58264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58265: LD_INT 0
58267: PPUSH
58268: PPUSH
58269: PPUSH
58270: PPUSH
58271: PPUSH
58272: PPUSH
58273: PPUSH
58274: PPUSH
58275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58276: LD_VAR 0 1
58280: PPUSH
58281: CALL_OW 264
58285: PUSH
58286: LD_INT 81
58288: EQUAL
58289: NOT
58290: IFTRUE 58305
58292: PUSH
58293: LD_VAR 0 1
58297: PUSH
58298: LD_EXP 55
58302: IN
58303: NOT
58304: OR
58305: IFFALSE 58309
// exit ;
58307: GO 58635
// index := GetElementIndex ( minersList , unit ) ;
58309: LD_ADDR_VAR 0 6
58313: PUSH
58314: LD_EXP 55
58318: PPUSH
58319: LD_VAR 0 1
58323: PPUSH
58324: CALL 14935 0 2
58328: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58329: LD_ADDR_VAR 0 8
58333: PUSH
58334: LD_EXP 57
58338: PUSH
58339: LD_EXP 56
58343: PUSH
58344: LD_VAR 0 6
58348: ARRAY
58349: MINUS
58350: ST_TO_ADDR
// if not minesFreeAmount then
58351: LD_VAR 0 8
58355: NOT
58356: IFFALSE 58360
// exit ;
58358: GO 58635
// tmp := [ ] ;
58360: LD_ADDR_VAR 0 7
58364: PUSH
58365: EMPTY
58366: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58367: LD_ADDR_VAR 0 5
58371: PUSH
58372: DOUBLE
58373: LD_INT 1
58375: DEC
58376: ST_TO_ADDR
58377: LD_VAR 0 8
58381: PUSH
58382: FOR_TO
58383: IFFALSE 58582
// begin _d := rand ( 0 , 5 ) ;
58385: LD_ADDR_VAR 0 11
58389: PUSH
58390: LD_INT 0
58392: PPUSH
58393: LD_INT 5
58395: PPUSH
58396: CALL_OW 12
58400: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58401: LD_ADDR_VAR 0 12
58405: PUSH
58406: LD_INT 2
58408: PPUSH
58409: LD_INT 6
58411: PPUSH
58412: CALL_OW 12
58416: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58417: LD_ADDR_VAR 0 9
58421: PUSH
58422: LD_VAR 0 2
58426: PPUSH
58427: LD_VAR 0 11
58431: PPUSH
58432: LD_VAR 0 12
58436: PPUSH
58437: CALL_OW 272
58441: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58442: LD_ADDR_VAR 0 10
58446: PUSH
58447: LD_VAR 0 3
58451: PPUSH
58452: LD_VAR 0 11
58456: PPUSH
58457: LD_VAR 0 12
58461: PPUSH
58462: CALL_OW 273
58466: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58467: LD_VAR 0 9
58471: PPUSH
58472: LD_VAR 0 10
58476: PPUSH
58477: CALL_OW 488
58481: IFFALSE 58505
58483: PUSH
58484: LD_VAR 0 9
58488: PUSH
58489: LD_VAR 0 10
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_VAR 0 7
58502: IN
58503: NOT
58504: AND
58505: IFFALSE 58524
58507: PUSH
58508: LD_VAR 0 9
58512: PPUSH
58513: LD_VAR 0 10
58517: PPUSH
58518: CALL_OW 458
58522: NOT
58523: AND
58524: IFFALSE 58566
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58526: LD_ADDR_VAR 0 7
58530: PUSH
58531: LD_VAR 0 7
58535: PPUSH
58536: LD_VAR 0 7
58540: PUSH
58541: LD_INT 1
58543: PLUS
58544: PPUSH
58545: LD_VAR 0 9
58549: PUSH
58550: LD_VAR 0 10
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PPUSH
58559: CALL_OW 1
58563: ST_TO_ADDR
58564: GO 58580
// i := i - 1 ;
58566: LD_ADDR_VAR 0 5
58570: PUSH
58571: LD_VAR 0 5
58575: PUSH
58576: LD_INT 1
58578: MINUS
58579: ST_TO_ADDR
// end ;
58580: GO 58382
58582: POP
58583: POP
// for i in tmp do
58584: LD_ADDR_VAR 0 5
58588: PUSH
58589: LD_VAR 0 7
58593: PUSH
58594: FOR_IN
58595: IFFALSE 58633
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58597: LD_VAR 0 1
58601: PPUSH
58602: LD_VAR 0 5
58606: PUSH
58607: LD_INT 1
58609: ARRAY
58610: PPUSH
58611: LD_VAR 0 5
58615: PUSH
58616: LD_INT 2
58618: ARRAY
58619: PPUSH
58620: CALL 57567 0 3
58624: NOT
58625: IFFALSE 58631
// exit ;
58627: POP
58628: POP
58629: GO 58635
58631: GO 58594
58633: POP
58634: POP
// end ;
58635: LD_VAR 0 4
58639: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58640: LD_INT 0
58642: PPUSH
58643: PPUSH
58644: PPUSH
58645: PPUSH
58646: PPUSH
58647: PPUSH
58648: PPUSH
58649: PPUSH
58650: PPUSH
// if GetClass ( unit ) <> class_sniper then
58651: LD_VAR 0 1
58655: PPUSH
58656: CALL_OW 257
58660: PUSH
58661: LD_INT 5
58663: NONEQUAL
58664: IFFALSE 58668
// exit ;
58666: GO 59138
// dist := 8 ;
58668: LD_ADDR_VAR 0 5
58672: PUSH
58673: LD_INT 8
58675: ST_TO_ADDR
// viewRange := 12 ;
58676: LD_ADDR_VAR 0 8
58680: PUSH
58681: LD_INT 12
58683: ST_TO_ADDR
// side := GetSide ( unit ) ;
58684: LD_ADDR_VAR 0 6
58688: PUSH
58689: LD_VAR 0 1
58693: PPUSH
58694: CALL_OW 255
58698: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58699: LD_INT 61
58701: PPUSH
58702: LD_VAR 0 6
58706: PPUSH
58707: CALL_OW 321
58711: PUSH
58712: LD_INT 2
58714: EQUAL
58715: IFFALSE 58725
// viewRange := 16 ;
58717: LD_ADDR_VAR 0 8
58721: PUSH
58722: LD_INT 16
58724: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58725: LD_VAR 0 1
58729: PPUSH
58730: LD_VAR 0 2
58734: PPUSH
58735: LD_VAR 0 3
58739: PPUSH
58740: CALL_OW 297
58744: PUSH
58745: LD_VAR 0 5
58749: GREATER
58750: IFFALSE 58829
// begin ComMoveXY ( unit , x , y ) ;
58752: LD_VAR 0 1
58756: PPUSH
58757: LD_VAR 0 2
58761: PPUSH
58762: LD_VAR 0 3
58766: PPUSH
58767: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58771: LD_INT 35
58773: PPUSH
58774: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58778: LD_VAR 0 1
58782: PPUSH
58783: LD_VAR 0 2
58787: PPUSH
58788: LD_VAR 0 3
58792: PPUSH
58793: CALL 46981 0 3
58797: NOT
58798: IFFALSE 58802
// exit ;
58800: GO 59138
// until GetDistUnitXY ( unit , x , y ) < dist ;
58802: LD_VAR 0 1
58806: PPUSH
58807: LD_VAR 0 2
58811: PPUSH
58812: LD_VAR 0 3
58816: PPUSH
58817: CALL_OW 297
58821: PUSH
58822: LD_VAR 0 5
58826: LESS
58827: IFFALSE 58771
// end ; ComTurnXY ( unit , x , y ) ;
58829: LD_VAR 0 1
58833: PPUSH
58834: LD_VAR 0 2
58838: PPUSH
58839: LD_VAR 0 3
58843: PPUSH
58844: CALL_OW 118
// repeat if Multiplayer then
58848: LD_OWVAR 4
58852: IFFALSE 58863
// wait ( 35 ) else
58854: LD_INT 35
58856: PPUSH
58857: CALL_OW 67
58861: GO 58870
// wait ( 5 ) ;
58863: LD_INT 5
58865: PPUSH
58866: CALL_OW 67
// _d := GetDir ( unit ) ;
58870: LD_ADDR_VAR 0 11
58874: PUSH
58875: LD_VAR 0 1
58879: PPUSH
58880: CALL_OW 254
58884: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58885: LD_ADDR_VAR 0 7
58889: PUSH
58890: LD_VAR 0 1
58894: PPUSH
58895: CALL_OW 250
58899: PPUSH
58900: LD_VAR 0 1
58904: PPUSH
58905: CALL_OW 251
58909: PPUSH
58910: LD_VAR 0 2
58914: PPUSH
58915: LD_VAR 0 3
58919: PPUSH
58920: CALL 49617 0 4
58924: ST_TO_ADDR
// until dir = _d ;
58925: LD_VAR 0 7
58929: PUSH
58930: LD_VAR 0 11
58934: EQUAL
58935: IFFALSE 58848
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58937: LD_ADDR_VAR 0 9
58941: PUSH
58942: LD_VAR 0 1
58946: PPUSH
58947: CALL_OW 250
58951: PPUSH
58952: LD_VAR 0 7
58956: PPUSH
58957: LD_VAR 0 5
58961: PPUSH
58962: CALL_OW 272
58966: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58967: LD_ADDR_VAR 0 10
58971: PUSH
58972: LD_VAR 0 1
58976: PPUSH
58977: CALL_OW 251
58981: PPUSH
58982: LD_VAR 0 7
58986: PPUSH
58987: LD_VAR 0 5
58991: PPUSH
58992: CALL_OW 273
58996: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58997: LD_VAR 0 9
59001: PPUSH
59002: LD_VAR 0 10
59006: PPUSH
59007: CALL_OW 488
59011: NOT
59012: IFFALSE 59016
// exit ;
59014: GO 59138
// ComAnimCustom ( unit , 1 ) ;
59016: LD_VAR 0 1
59020: PPUSH
59021: LD_INT 1
59023: PPUSH
59024: CALL_OW 592
// p := 0 ;
59028: LD_ADDR_VAR 0 12
59032: PUSH
59033: LD_INT 0
59035: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59036: LD_VAR 0 9
59040: PPUSH
59041: LD_VAR 0 10
59045: PPUSH
59046: LD_VAR 0 6
59050: PPUSH
59051: LD_VAR 0 8
59055: PPUSH
59056: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59060: LD_INT 35
59062: PPUSH
59063: CALL_OW 67
// p := Inc ( p ) ;
59067: LD_ADDR_VAR 0 12
59071: PUSH
59072: LD_VAR 0 12
59076: PPUSH
59077: CALL 49573 0 1
59081: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59082: LD_VAR 0 12
59086: PUSH
59087: LD_INT 3
59089: EQUAL
59090: IFTRUE 59104
59092: PUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: CALL_OW 302
59102: NOT
59103: OR
59104: IFTRUE 59117
59106: PUSH
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 301
59116: OR
59117: IFFALSE 59060
// RemoveSeeing ( _x , _y , side ) ;
59119: LD_VAR 0 9
59123: PPUSH
59124: LD_VAR 0 10
59128: PPUSH
59129: LD_VAR 0 6
59133: PPUSH
59134: CALL_OW 331
// end ; end_of_file
59138: LD_VAR 0 4
59142: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59143: LD_EXP 39
59147: IFFALSE 59488
59149: GO 59151
59151: DISABLE
59152: LD_INT 0
59154: PPUSH
59155: PPUSH
59156: PPUSH
// begin mpKingPoints := [ ] ;
59157: LD_ADDR_EXP 58
59161: PUSH
59162: EMPTY
59163: ST_TO_ADDR
// if mpTeamGame then
59164: LD_EXP 11
59168: IFFALSE 59222
// begin for i := 1 to Count ( mpTeams ) do
59170: LD_ADDR_VAR 0 1
59174: PUSH
59175: DOUBLE
59176: LD_INT 1
59178: DEC
59179: ST_TO_ADDR
59180: LD_EXP 10
59184: PPUSH
59185: CALL 12268 0 1
59189: PUSH
59190: FOR_TO
59191: IFFALSE 59218
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59193: LD_ADDR_EXP 58
59197: PUSH
59198: LD_EXP 58
59202: PPUSH
59203: LD_VAR 0 1
59207: PPUSH
59208: LD_INT 0
59210: PPUSH
59211: CALL_OW 1
59215: ST_TO_ADDR
59216: GO 59190
59218: POP
59219: POP
// end else
59220: GO 59265
// begin for i := 1 to 8 do
59222: LD_ADDR_VAR 0 1
59226: PUSH
59227: DOUBLE
59228: LD_INT 1
59230: DEC
59231: ST_TO_ADDR
59232: LD_INT 8
59234: PUSH
59235: FOR_TO
59236: IFFALSE 59263
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59238: LD_ADDR_EXP 58
59242: PUSH
59243: LD_EXP 58
59247: PPUSH
59248: LD_VAR 0 1
59252: PPUSH
59253: LD_INT 0
59255: PPUSH
59256: CALL_OW 1
59260: ST_TO_ADDR
59261: GO 59235
59263: POP
59264: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59265: LD_ADDR_VAR 0 3
59269: PUSH
59270: LD_EXP 2
59274: PPUSH
59275: LD_INT 0
59277: PPUSH
59278: CALL_OW 517
59282: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59283: LD_ADDR_VAR 0 1
59287: PUSH
59288: DOUBLE
59289: LD_INT 1
59291: DEC
59292: ST_TO_ADDR
59293: LD_VAR 0 3
59297: PUSH
59298: LD_INT 1
59300: ARRAY
59301: PUSH
59302: FOR_TO
59303: IFFALSE 59370
// for j := 1 to 8 do
59305: LD_ADDR_VAR 0 2
59309: PUSH
59310: DOUBLE
59311: LD_INT 1
59313: DEC
59314: ST_TO_ADDR
59315: LD_INT 8
59317: PUSH
59318: FOR_TO
59319: IFFALSE 59366
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59321: LD_VAR 0 3
59325: PUSH
59326: LD_INT 1
59328: ARRAY
59329: PUSH
59330: LD_VAR 0 1
59334: ARRAY
59335: PPUSH
59336: LD_VAR 0 3
59340: PUSH
59341: LD_INT 2
59343: ARRAY
59344: PUSH
59345: LD_VAR 0 1
59349: ARRAY
59350: PPUSH
59351: LD_VAR 0 2
59355: PPUSH
59356: LD_INT 12
59358: NEG
59359: PPUSH
59360: CALL_OW 330
59364: GO 59318
59366: POP
59367: POP
59368: GO 59302
59370: POP
59371: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59372: LD_EXP 34
59376: PPUSH
59377: LD_INT 1
59379: PPUSH
59380: CALL_OW 424
// UpdateCounter ;
59384: CALL 59994 0 0
// repeat wait ( 0 0$1 ) ;
59388: LD_INT 35
59390: PPUSH
59391: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59395: LD_ADDR_VAR 0 3
59399: PUSH
59400: LD_EXP 34
59404: PPUSH
59405: LD_INT 3
59407: PUSH
59408: LD_INT 57
59410: PUSH
59411: EMPTY
59412: LIST
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 50
59420: PUSH
59421: EMPTY
59422: LIST
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: LD_INT 30
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 30
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: LIST
59456: PPUSH
59457: CALL_OW 70
59461: ST_TO_ADDR
// if not tmp then
59462: LD_VAR 0 3
59466: NOT
59467: IFFALSE 59471
// continue ;
59469: GO 59388
// AddPoints ( tmp ) ;
59471: LD_VAR 0 3
59475: PPUSH
59476: CALL 59672 0 1
// UpdateCounter ;
59480: CALL 59994 0 0
// until false ;
59484: LD_INT 0
59486: IFFALSE 59388
// end ;
59488: PPOPN 3
59490: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59491: LD_EXP 39
59495: IFFALSE 59503
59497: PUSH
59498: LD_EXP 37
59502: AND
59503: IFFALSE 59669
59505: GO 59507
59507: DISABLE
59508: LD_INT 0
59510: PPUSH
59511: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59512: LD_ADDR_VAR 0 2
59516: PUSH
59517: LD_EXP 2
59521: PPUSH
59522: LD_INT 0
59524: PPUSH
59525: CALL_OW 517
59529: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59530: LD_ADDR_VAR 0 1
59534: PUSH
59535: DOUBLE
59536: LD_INT 1
59538: DEC
59539: ST_TO_ADDR
59540: LD_VAR 0 2
59544: PUSH
59545: LD_INT 1
59547: ARRAY
59548: PUSH
59549: FOR_TO
59550: IFFALSE 59591
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59552: LD_VAR 0 2
59556: PUSH
59557: LD_INT 1
59559: ARRAY
59560: PUSH
59561: LD_VAR 0 1
59565: ARRAY
59566: PPUSH
59567: LD_VAR 0 2
59571: PUSH
59572: LD_INT 2
59574: ARRAY
59575: PUSH
59576: LD_VAR 0 1
59580: ARRAY
59581: PPUSH
59582: LD_INT 125
59584: PPUSH
59585: CALL_OW 495
59589: GO 59549
59591: POP
59592: POP
// repeat wait ( mpEmissions ) ;
59593: LD_EXP 37
59597: PPUSH
59598: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59602: LD_ADDR_VAR 0 1
59606: PUSH
59607: DOUBLE
59608: LD_INT 1
59610: DEC
59611: ST_TO_ADDR
59612: LD_VAR 0 2
59616: PUSH
59617: LD_INT 1
59619: ARRAY
59620: PUSH
59621: FOR_TO
59622: IFFALSE 59663
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59624: LD_VAR 0 2
59628: PUSH
59629: LD_INT 1
59631: ARRAY
59632: PUSH
59633: LD_VAR 0 1
59637: ARRAY
59638: PPUSH
59639: LD_VAR 0 2
59643: PUSH
59644: LD_INT 2
59646: ARRAY
59647: PUSH
59648: LD_VAR 0 1
59652: ARRAY
59653: PPUSH
59654: LD_INT 15
59656: PPUSH
59657: CALL_OW 495
59661: GO 59621
59663: POP
59664: POP
// until false ;
59665: LD_INT 0
59667: IFFALSE 59593
// end ;
59669: PPOPN 2
59671: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59672: LD_INT 0
59674: PPUSH
59675: PPUSH
59676: PPUSH
59677: PPUSH
59678: PPUSH
// if mpTeamGame then
59679: LD_EXP 11
59683: IFFALSE 59880
// begin first := depots [ 1 ] ;
59685: LD_ADDR_VAR 0 4
59689: PUSH
59690: LD_VAR 0 1
59694: PUSH
59695: LD_INT 1
59697: ARRAY
59698: ST_TO_ADDR
// side := GetSide ( first ) ;
59699: LD_ADDR_VAR 0 6
59703: PUSH
59704: LD_VAR 0 4
59708: PPUSH
59709: CALL_OW 255
59713: ST_TO_ADDR
// for i := 1 to mpTeams do
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: DOUBLE
59720: LD_INT 1
59722: DEC
59723: ST_TO_ADDR
59724: LD_EXP 10
59728: PUSH
59729: FOR_TO
59730: IFFALSE 59764
// if side in mpTeams [ i ] then
59732: LD_VAR 0 6
59736: PUSH
59737: LD_EXP 10
59741: PUSH
59742: LD_VAR 0 3
59746: ARRAY
59747: IN
59748: IFFALSE 59762
// begin team := i ;
59750: LD_ADDR_VAR 0 5
59754: PUSH
59755: LD_VAR 0 3
59759: ST_TO_ADDR
// break ;
59760: GO 59764
// end ;
59762: GO 59729
59764: POP
59765: POP
// if not team then
59766: LD_VAR 0 5
59770: NOT
59771: IFFALSE 59775
// exit ;
59773: GO 59989
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59775: LD_EXP 34
59779: PPUSH
59780: LD_INT 81
59782: PUSH
59783: LD_VAR 0 6
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PPUSH
59792: CALL_OW 70
59796: IFFALSE 59800
// exit ;
59798: GO 59989
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59800: LD_ADDR_EXP 58
59804: PUSH
59805: LD_EXP 58
59809: PPUSH
59810: LD_VAR 0 5
59814: PPUSH
59815: LD_EXP 58
59819: PUSH
59820: LD_VAR 0 5
59824: ARRAY
59825: PUSH
59826: LD_INT 1
59828: PLUS
59829: PPUSH
59830: CALL_OW 1
59834: ST_TO_ADDR
// for i in mpTeams [ team ] do
59835: LD_ADDR_VAR 0 3
59839: PUSH
59840: LD_EXP 10
59844: PUSH
59845: LD_VAR 0 5
59849: ARRAY
59850: PUSH
59851: FOR_IN
59852: IFFALSE 59876
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59854: LD_VAR 0 3
59858: PPUSH
59859: LD_EXP 58
59863: PUSH
59864: LD_VAR 0 5
59868: ARRAY
59869: PPUSH
59870: CALL_OW 506
59874: GO 59851
59876: POP
59877: POP
// end else
59878: GO 59989
// begin first := depots [ 1 ] ;
59880: LD_ADDR_VAR 0 4
59884: PUSH
59885: LD_VAR 0 1
59889: PUSH
59890: LD_INT 1
59892: ARRAY
59893: ST_TO_ADDR
// side := GetSide ( first ) ;
59894: LD_ADDR_VAR 0 6
59898: PUSH
59899: LD_VAR 0 4
59903: PPUSH
59904: CALL_OW 255
59908: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59909: LD_EXP 34
59913: PPUSH
59914: LD_INT 81
59916: PUSH
59917: LD_VAR 0 6
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PPUSH
59926: CALL_OW 70
59930: IFFALSE 59934
// exit ;
59932: GO 59989
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59934: LD_ADDR_EXP 58
59938: PUSH
59939: LD_EXP 58
59943: PPUSH
59944: LD_VAR 0 6
59948: PPUSH
59949: LD_EXP 58
59953: PUSH
59954: LD_VAR 0 6
59958: ARRAY
59959: PUSH
59960: LD_INT 1
59962: PLUS
59963: PPUSH
59964: CALL_OW 1
59968: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59969: LD_VAR 0 6
59973: PPUSH
59974: LD_EXP 58
59978: PUSH
59979: LD_VAR 0 6
59983: ARRAY
59984: PPUSH
59985: CALL_OW 506
// end ; end ;
59989: LD_VAR 0 2
59993: RET
// function UpdateCounter ; var i ; begin
59994: LD_INT 0
59996: PPUSH
59997: PPUSH
// result := [ ] ;
59998: LD_ADDR_VAR 0 1
60002: PUSH
60003: EMPTY
60004: ST_TO_ADDR
// if mpTeamGame then
60005: LD_EXP 11
60009: IFFALSE 60076
// begin for i := 1 to mpTeams do
60011: LD_ADDR_VAR 0 2
60015: PUSH
60016: DOUBLE
60017: LD_INT 1
60019: DEC
60020: ST_TO_ADDR
60021: LD_EXP 10
60025: PUSH
60026: FOR_TO
60027: IFFALSE 60072
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
60029: LD_ADDR_VAR 0 1
60033: PUSH
60034: LD_VAR 0 1
60038: PUSH
60039: LD_STRING #KingoftheHill-Team
60041: PUSH
60042: LD_VAR 0 2
60046: PUSH
60047: LD_EXP 58
60051: PUSH
60052: LD_VAR 0 2
60056: ARRAY
60057: PUSH
60058: LD_EXP 35
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: ADD
60069: ST_TO_ADDR
60070: GO 60026
60072: POP
60073: POP
// end else
60074: GO 60149
// begin for i := 1 to 8 do
60076: LD_ADDR_VAR 0 2
60080: PUSH
60081: DOUBLE
60082: LD_INT 1
60084: DEC
60085: ST_TO_ADDR
60086: LD_INT 8
60088: PUSH
60089: FOR_TO
60090: IFFALSE 60147
// if mpSidePositions [ i ] then
60092: LD_EXP 7
60096: PUSH
60097: LD_VAR 0 2
60101: ARRAY
60102: IFFALSE 60145
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60104: LD_ADDR_VAR 0 1
60108: PUSH
60109: LD_VAR 0 1
60113: PUSH
60114: LD_STRING #KingoftheHill-Player
60116: PUSH
60117: LD_VAR 0 2
60121: PUSH
60122: LD_EXP 58
60126: PUSH
60127: LD_VAR 0 2
60131: ARRAY
60132: PUSH
60133: LD_EXP 35
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: ADD
60144: ST_TO_ADDR
60145: GO 60089
60147: POP
60148: POP
// end ; mpDisplayStrings := result ;
60149: LD_ADDR_EXP 38
60153: PUSH
60154: LD_VAR 0 1
60158: ST_TO_ADDR
// end ;
60159: LD_VAR 0 1
60163: RET
// export function HowMuchPointsKing ( side ) ; begin
60164: LD_INT 0
60166: PPUSH
// result := HowMuchPoints ( side ) ;
60167: LD_ADDR_VAR 0 2
60171: PUSH
60172: LD_VAR 0 1
60176: PPUSH
60177: CALL 60187 0 1
60181: ST_TO_ADDR
// end ;
60182: LD_VAR 0 2
60186: RET
// function HowMuchPoints ( side ) ; var i ; begin
60187: LD_INT 0
60189: PPUSH
60190: PPUSH
// if mpTeamGame then
60191: LD_EXP 11
60195: IFFALSE 60264
// begin for i := 1 to Count ( mpTeams ) do
60197: LD_ADDR_VAR 0 3
60201: PUSH
60202: DOUBLE
60203: LD_INT 1
60205: DEC
60206: ST_TO_ADDR
60207: LD_EXP 10
60211: PPUSH
60212: CALL 12268 0 1
60216: PUSH
60217: FOR_TO
60218: IFFALSE 60260
// begin if side in mpTeams [ i ] then
60220: LD_VAR 0 1
60224: PUSH
60225: LD_EXP 10
60229: PUSH
60230: LD_VAR 0 3
60234: ARRAY
60235: IN
60236: IFFALSE 60258
// begin result := mpKingPoints [ i ] ;
60238: LD_ADDR_VAR 0 2
60242: PUSH
60243: LD_EXP 58
60247: PUSH
60248: LD_VAR 0 3
60252: ARRAY
60253: ST_TO_ADDR
// exit ;
60254: POP
60255: POP
60256: GO 60280
// end ; end ;
60258: GO 60217
60260: POP
60261: POP
// end else
60262: GO 60280
// result := mpKingPoints [ side ] ;
60264: LD_ADDR_VAR 0 2
60268: PUSH
60269: LD_EXP 58
60273: PUSH
60274: LD_VAR 0 1
60278: ARRAY
60279: ST_TO_ADDR
// end ;
60280: LD_VAR 0 2
60284: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60285: LD_EXP 39
60289: IFFALSE 60297
60291: PUSH
60292: CALL 60709 0 0
60296: AND
60297: IFFALSE 60305
60299: PUSH
60300: LD_OWVAR 4
60304: AND
60305: IFFALSE 60558
60307: GO 60309
60309: DISABLE
60310: LD_INT 0
60312: PPUSH
60313: PPUSH
// begin canWin := false ;
60314: LD_ADDR_VAR 0 2
60318: PUSH
60319: LD_INT 0
60321: ST_TO_ADDR
// if not HasPower ( your_side ) then
60322: LD_OWVAR 2
60326: PPUSH
60327: CALL 60751 0 1
60331: NOT
60332: IFFALSE 60343
// begin Multiplayer_Loose_Message ;
60334: CALL_OW 521
// enable ( mpLose ) ;
60338: LD_INT 102
60340: ENABLE_MARKED
// end else
60341: GO 60558
// begin if not EnemiesInGame then
60343: CALL 60561 0 0
60347: NOT
60348: IFFALSE 60355
// begin enable ( mpWin ) ;
60350: LD_INT 101
60352: ENABLE_MARKED
// exit ;
60353: GO 60558
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60355: LD_ADDR_VAR 0 2
60359: PUSH
60360: LD_OWVAR 2
60364: PPUSH
60365: CALL 60187 0 1
60369: PUSH
60370: LD_EXP 35
60374: GREATEREQUAL
60375: IFFALSE 60388
60377: PUSH
60378: LD_OWVAR 2
60382: PPUSH
60383: CALL 60751 0 1
60387: AND
60388: ST_TO_ADDR
// for i := 1 to 8 do
60389: LD_ADDR_VAR 0 1
60393: PUSH
60394: DOUBLE
60395: LD_INT 1
60397: DEC
60398: ST_TO_ADDR
60399: LD_INT 8
60401: PUSH
60402: FOR_TO
60403: IFFALSE 60544
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60405: LD_EXP 7
60409: PUSH
60410: LD_VAR 0 1
60414: ARRAY
60415: IFFALSE 60428
60417: PUSH
60418: LD_VAR 0 1
60422: PPUSH
60423: CALL_OW 108
60427: AND
60428: IFFALSE 60442
60430: PUSH
60431: LD_VAR 0 1
60435: PUSH
60436: LD_OWVAR 2
60440: NONEQUAL
60441: AND
60442: IFFALSE 60542
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60444: LD_EXP 8
60448: PUSH
60449: LD_VAR 0 1
60453: ARRAY
60454: NOT
60455: IFTRUE 60503
60457: PUSH
60458: LD_EXP 8
60462: PUSH
60463: LD_VAR 0 1
60467: ARRAY
60468: PUSH
60469: LD_EXP 8
60473: PUSH
60474: LD_OWVAR 2
60478: ARRAY
60479: NONEQUAL
60480: IFFALSE 60502
60482: PUSH
60483: LD_OWVAR 2
60487: PPUSH
60488: LD_VAR 0 1
60492: PPUSH
60493: CALL_OW 81
60497: PUSH
60498: LD_INT 1
60500: NONEQUAL
60501: AND
60502: OR
60503: IFFALSE 60542
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60505: LD_VAR 0 1
60509: PPUSH
60510: CALL 60187 0 1
60514: PUSH
60515: LD_EXP 35
60519: GREATEREQUAL
60520: IFFALSE 60533
60522: PUSH
60523: LD_VAR 0 1
60527: PPUSH
60528: CALL 60751 0 1
60532: AND
60533: IFFALSE 60542
// begin enable ( mpLose ) ;
60535: LD_INT 102
60537: ENABLE_MARKED
// exit ;
60538: POP
60539: POP
60540: GO 60558
// end ;
60542: GO 60402
60544: POP
60545: POP
// if canWin then
60546: LD_VAR 0 2
60550: IFFALSE 60557
// enable ( mpWin ) else
60552: LD_INT 101
60554: ENABLE_MARKED
60555: GO 60558
// enable ;
60557: ENABLE
// end ; end ;
60558: PPOPN 2
60560: END
// function EnemiesInGame ; var i ; begin
60561: LD_INT 0
60563: PPUSH
60564: PPUSH
// result := false ;
60565: LD_ADDR_VAR 0 1
60569: PUSH
60570: LD_INT 0
60572: ST_TO_ADDR
// for i := 1 to 8 do
60573: LD_ADDR_VAR 0 2
60577: PUSH
60578: DOUBLE
60579: LD_INT 1
60581: DEC
60582: ST_TO_ADDR
60583: LD_INT 8
60585: PUSH
60586: FOR_TO
60587: IFFALSE 60702
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60589: LD_VAR 0 2
60593: PUSH
60594: LD_OWVAR 2
60598: NONEQUAL
60599: IFFALSE 60612
60601: PUSH
60602: LD_VAR 0 2
60606: PPUSH
60607: CALL 60751 0 1
60611: AND
60612: IFFALSE 60625
60614: PUSH
60615: LD_VAR 0 2
60619: PPUSH
60620: CALL_OW 108
60624: AND
60625: IFFALSE 60700
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60627: LD_EXP 8
60631: PUSH
60632: LD_VAR 0 2
60636: ARRAY
60637: NOT
60638: IFTRUE 60686
60640: PUSH
60641: LD_EXP 8
60645: PUSH
60646: LD_VAR 0 2
60650: ARRAY
60651: PUSH
60652: LD_EXP 8
60656: PUSH
60657: LD_OWVAR 2
60661: ARRAY
60662: NONEQUAL
60663: IFFALSE 60685
60665: PUSH
60666: LD_OWVAR 2
60670: PPUSH
60671: LD_VAR 0 2
60675: PPUSH
60676: CALL_OW 81
60680: PUSH
60681: LD_INT 1
60683: NONEQUAL
60684: AND
60685: OR
60686: IFFALSE 60700
// begin result := true ;
60688: LD_ADDR_VAR 0 1
60692: PUSH
60693: LD_INT 1
60695: ST_TO_ADDR
// exit ;
60696: POP
60697: POP
60698: GO 60704
// end ;
60700: GO 60586
60702: POP
60703: POP
// end ;
60704: LD_VAR 0 1
60708: RET
// function CanWinLoose ; begin
60709: LD_INT 0
60711: PPUSH
// result := true ;
60712: LD_ADDR_VAR 0 1
60716: PUSH
60717: LD_INT 1
60719: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60720: CALL_OW 531
60724: IFFALSE 60736
60726: PUSH
60727: CALL_OW 519
60731: PUSH
60732: LD_INT 1
60734: GREATER
60735: AND
60736: IFFALSE 60746
// result := false ;
60738: LD_ADDR_VAR 0 1
60742: PUSH
60743: LD_INT 0
60745: ST_TO_ADDR
// end ;
60746: LD_VAR 0 1
60750: RET
// function HasPower ( i ) ; begin
60751: LD_INT 0
60753: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60754: LD_ADDR_VAR 0 2
60758: PUSH
60759: LD_INT 22
60761: PUSH
60762: LD_VAR 0 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: LD_INT 21
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 33
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 33
60796: PUSH
60797: LD_INT 5
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PPUSH
60814: CALL_OW 69
60818: ST_TO_ADDR
// end ; end_of_file
60819: LD_VAR 0 2
60823: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60824: PPOPN 6
60826: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60827: LD_EXP 3
60831: PUSH
60832: LD_INT 4
60834: EQUAL
60835: IFFALSE 60871
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60837: LD_STRING setGameDifficulty(
60839: PUSH
60840: LD_OWVAR 67
60844: STR
60845: PUSH
60846: LD_STRING )
60848: STR
60849: PPUSH
60850: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60854: LD_STRING displayDifficulty(
60856: PUSH
60857: LD_OWVAR 67
60861: STR
60862: PUSH
60863: LD_STRING )
60865: STR
60866: PPUSH
60867: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60871: CALL 60900 0 0
// end ; end_of_file
60875: PPOPN 1
60877: END
// every 0 0$1 do
60878: GO 60880
60880: DISABLE
// begin enable ;
60881: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60882: LD_STRING updateTimer(
60884: PUSH
60885: LD_OWVAR 1
60889: STR
60890: PUSH
60891: LD_STRING );
60893: STR
60894: PPUSH
60895: CALL_OW 559
// end ;
60899: END
// export function SOS_MapStart ( ) ; begin
60900: LD_INT 0
60902: PPUSH
// UpdateFactoryWaypoints ( ) ;
60903: CALL 61834 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60907: CALL 62086 0 0
// ParseMultiDataToLua ( ) ;
60911: CALL 62233 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60915: LD_STRING setSpecLogoNumber(
60917: PUSH
60918: LD_INT 2
60920: STR
60921: PUSH
60922: LD_STRING ,
60924: STR
60925: PUSH
60926: LD_INT 1
60928: STR
60929: PUSH
60930: LD_STRING )
60932: STR
60933: PPUSH
60934: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60938: LD_STRING setSpecLogoNumber(
60940: PUSH
60941: LD_INT 3
60943: STR
60944: PUSH
60945: LD_STRING ,
60947: STR
60948: PUSH
60949: LD_INT 2
60951: STR
60952: PUSH
60953: LD_STRING )
60955: STR
60956: PPUSH
60957: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60961: LD_STRING setSpecLogoNumber(
60963: PUSH
60964: LD_INT 4
60966: STR
60967: PUSH
60968: LD_STRING ,
60970: STR
60971: PUSH
60972: LD_INT 3
60974: STR
60975: PUSH
60976: LD_STRING )
60978: STR
60979: PPUSH
60980: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60984: LD_STRING setSpecLogoNumber(
60986: PUSH
60987: LD_INT 5
60989: STR
60990: PUSH
60991: LD_STRING ,
60993: STR
60994: PUSH
60995: LD_INT 4
60997: STR
60998: PUSH
60999: LD_STRING )
61001: STR
61002: PPUSH
61003: CALL_OW 559
// end ;
61007: LD_VAR 0 1
61011: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61012: LD_INT 0
61014: PPUSH
61015: PPUSH
61016: PPUSH
61017: PPUSH
61018: PPUSH
61019: PPUSH
61020: PPUSH
61021: PPUSH
61022: PPUSH
// for i := 1 to 8 do
61023: LD_ADDR_VAR 0 2
61027: PUSH
61028: DOUBLE
61029: LD_INT 1
61031: DEC
61032: ST_TO_ADDR
61033: LD_INT 8
61035: PUSH
61036: FOR_TO
61037: IFFALSE 61422
// begin if mpSidePositions [ i ] then
61039: LD_EXP 7
61043: PUSH
61044: LD_VAR 0 2
61048: ARRAY
61049: IFFALSE 61420
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61051: LD_ADDR_VAR 0 7
61055: PUSH
61056: LD_INT 22
61058: PUSH
61059: LD_VAR 0 2
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 21
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PPUSH
61082: CALL_OW 69
61086: PPUSH
61087: CALL 12268 0 1
61091: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61092: LD_ADDR_VAR 0 9
61096: PUSH
61097: LD_INT 22
61099: PUSH
61100: LD_VAR 0 2
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 30
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 30
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PPUSH
61141: CALL_OW 69
61145: ST_TO_ADDR
// crates := 0 ;
61146: LD_ADDR_VAR 0 4
61150: PUSH
61151: LD_INT 0
61153: ST_TO_ADDR
// oil := 0 ;
61154: LD_ADDR_VAR 0 5
61158: PUSH
61159: LD_INT 0
61161: ST_TO_ADDR
// sib := 0 ;
61162: LD_ADDR_VAR 0 6
61166: PUSH
61167: LD_INT 0
61169: ST_TO_ADDR
// if bases then
61170: LD_VAR 0 9
61174: IFFALSE 61280
// begin for j in bases do
61176: LD_ADDR_VAR 0 3
61180: PUSH
61181: LD_VAR 0 9
61185: PUSH
61186: FOR_IN
61187: IFFALSE 61278
// begin base := GetBase ( j ) ;
61189: LD_ADDR_VAR 0 8
61193: PUSH
61194: LD_VAR 0 3
61198: PPUSH
61199: CALL_OW 274
61203: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61204: LD_ADDR_VAR 0 4
61208: PUSH
61209: LD_VAR 0 4
61213: PUSH
61214: LD_VAR 0 8
61218: PPUSH
61219: LD_INT 1
61221: PPUSH
61222: CALL_OW 275
61226: PLUS
61227: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61228: LD_ADDR_VAR 0 5
61232: PUSH
61233: LD_VAR 0 5
61237: PUSH
61238: LD_VAR 0 8
61242: PPUSH
61243: LD_INT 2
61245: PPUSH
61246: CALL_OW 275
61250: PLUS
61251: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61252: LD_ADDR_VAR 0 6
61256: PUSH
61257: LD_VAR 0 6
61261: PUSH
61262: LD_VAR 0 8
61266: PPUSH
61267: LD_INT 3
61269: PPUSH
61270: CALL_OW 275
61274: PLUS
61275: ST_TO_ADDR
// end ;
61276: GO 61186
61278: POP
61279: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61280: LD_STRING setSpecText(
61282: PUSH
61283: LD_VAR 0 2
61287: STR
61288: PUSH
61289: LD_STRING ,
61291: STR
61292: PUSH
61293: LD_INT 2
61295: STR
61296: PUSH
61297: LD_STRING ,
61299: STR
61300: PUSH
61301: LD_VAR 0 4
61305: STR
61306: PUSH
61307: LD_STRING )
61309: STR
61310: PPUSH
61311: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61315: LD_STRING setSpecText(
61317: PUSH
61318: LD_VAR 0 2
61322: STR
61323: PUSH
61324: LD_STRING ,
61326: STR
61327: PUSH
61328: LD_INT 3
61330: STR
61331: PUSH
61332: LD_STRING ,
61334: STR
61335: PUSH
61336: LD_VAR 0 5
61340: STR
61341: PUSH
61342: LD_STRING )
61344: STR
61345: PPUSH
61346: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61350: LD_STRING setSpecText(
61352: PUSH
61353: LD_VAR 0 2
61357: STR
61358: PUSH
61359: LD_STRING ,
61361: STR
61362: PUSH
61363: LD_INT 4
61365: STR
61366: PUSH
61367: LD_STRING ,
61369: STR
61370: PUSH
61371: LD_VAR 0 6
61375: STR
61376: PUSH
61377: LD_STRING )
61379: STR
61380: PPUSH
61381: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61385: LD_STRING setSpecText(
61387: PUSH
61388: LD_VAR 0 2
61392: STR
61393: PUSH
61394: LD_STRING ,
61396: STR
61397: PUSH
61398: LD_INT 5
61400: STR
61401: PUSH
61402: LD_STRING ,
61404: STR
61405: PUSH
61406: LD_VAR 0 7
61410: STR
61411: PUSH
61412: LD_STRING )
61414: STR
61415: PPUSH
61416: CALL_OW 559
// end ; end ;
61420: GO 61036
61422: POP
61423: POP
// end ;
61424: LD_VAR 0 1
61428: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61429: LD_INT 2
61431: PUSH
61432: LD_INT 30
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 30
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: LIST
61456: PPUSH
61457: CALL_OW 69
61461: IFFALSE 61471
61463: GO 61465
61465: DISABLE
// begin enable ;
61466: ENABLE
// UpdateSpectatorBar ;
61467: CALL 61012 0 0
// end ;
61471: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61472: LD_INT 0
61474: PPUSH
// end ;
61475: LD_VAR 0 12
61479: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61480: LD_INT 0
61482: PPUSH
61483: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61484: LD_VAR 0 1
61488: NOT
61489: IFTRUE 61508
61491: PUSH
61492: LD_VAR 0 2
61496: PPUSH
61497: LD_VAR 0 3
61501: PPUSH
61502: CALL_OW 488
61506: NOT
61507: OR
61508: IFTRUE 61543
61510: PUSH
61511: LD_VAR 0 1
61515: PPUSH
61516: CALL_OW 266
61520: PUSH
61521: LD_INT 3
61523: NONEQUAL
61524: IFFALSE 61542
61526: PUSH
61527: LD_VAR 0 1
61531: PPUSH
61532: CALL_OW 247
61536: PUSH
61537: LD_INT 1
61539: EQUAL
61540: NOT
61541: AND
61542: OR
61543: IFFALSE 61547
// exit ;
61545: GO 61829
// if GetType ( factory ) = unit_human then
61547: LD_VAR 0 1
61551: PPUSH
61552: CALL_OW 247
61556: PUSH
61557: LD_INT 1
61559: EQUAL
61560: IFFALSE 61577
// factory := IsInUnit ( factory ) ;
61562: LD_ADDR_VAR 0 1
61566: PUSH
61567: LD_VAR 0 1
61571: PPUSH
61572: CALL_OW 310
61576: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61577: LD_VAR 0 1
61581: PPUSH
61582: CALL_OW 266
61586: PUSH
61587: LD_INT 3
61589: NONEQUAL
61590: IFFALSE 61594
// exit ;
61592: GO 61829
// for i := 1 to Count ( factoryWaypoints ) do
61594: LD_ADDR_VAR 0 5
61598: PUSH
61599: DOUBLE
61600: LD_INT 1
61602: DEC
61603: ST_TO_ADDR
61604: LD_EXP 59
61608: PPUSH
61609: CALL 12268 0 1
61613: PUSH
61614: FOR_TO
61615: IFFALSE 61777
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61617: LD_VAR 0 2
61621: PPUSH
61622: LD_VAR 0 3
61626: PPUSH
61627: CALL_OW 428
61631: PUSH
61632: LD_EXP 59
61636: PUSH
61637: LD_VAR 0 5
61641: ARRAY
61642: PUSH
61643: LD_INT 2
61645: ARRAY
61646: EQUAL
61647: IFFALSE 61679
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61649: LD_ADDR_EXP 59
61653: PUSH
61654: LD_EXP 59
61658: PPUSH
61659: LD_VAR 0 5
61663: PPUSH
61664: CALL_OW 3
61668: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61669: CALL 61834 0 0
// exit ;
61673: POP
61674: POP
61675: GO 61829
// end else
61677: GO 61775
// if factory = factoryWaypoints [ i ] [ 2 ] then
61679: LD_VAR 0 1
61683: PUSH
61684: LD_EXP 59
61688: PUSH
61689: LD_VAR 0 5
61693: ARRAY
61694: PUSH
61695: LD_INT 2
61697: ARRAY
61698: EQUAL
61699: IFFALSE 61775
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61701: LD_ADDR_EXP 59
61705: PUSH
61706: LD_EXP 59
61710: PPUSH
61711: LD_VAR 0 5
61715: PPUSH
61716: CALL_OW 3
61720: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61721: LD_ADDR_EXP 59
61725: PUSH
61726: LD_EXP 59
61730: PPUSH
61731: LD_VAR 0 1
61735: PPUSH
61736: CALL_OW 255
61740: PUSH
61741: LD_VAR 0 1
61745: PUSH
61746: LD_VAR 0 2
61750: PUSH
61751: LD_VAR 0 3
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: PPUSH
61762: CALL 48200 0 2
61766: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61767: CALL 61834 0 0
// exit ;
61771: POP
61772: POP
61773: GO 61829
// end ; end ;
61775: GO 61614
61777: POP
61778: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61779: LD_ADDR_EXP 59
61783: PUSH
61784: LD_EXP 59
61788: PPUSH
61789: LD_VAR 0 1
61793: PPUSH
61794: CALL_OW 255
61798: PUSH
61799: LD_VAR 0 1
61803: PUSH
61804: LD_VAR 0 2
61808: PUSH
61809: LD_VAR 0 3
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: PPUSH
61820: CALL 48200 0 2
61824: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61825: CALL 61834 0 0
// end ;
61829: LD_VAR 0 4
61833: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61834: LD_INT 0
61836: PPUSH
61837: PPUSH
61838: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61839: LD_STRING resetFactoryWaypoint();
61841: PPUSH
61842: CALL_OW 559
// if factoryWaypoints then
61846: LD_EXP 59
61850: IFFALSE 61971
// begin list := factoryWaypoints ;
61852: LD_ADDR_VAR 0 3
61856: PUSH
61857: LD_EXP 59
61861: ST_TO_ADDR
// for i := 1 to list do
61862: LD_ADDR_VAR 0 2
61866: PUSH
61867: DOUBLE
61868: LD_INT 1
61870: DEC
61871: ST_TO_ADDR
61872: LD_VAR 0 3
61876: PUSH
61877: FOR_TO
61878: IFFALSE 61969
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61880: LD_STRING setFactoryWaypointXY(
61882: PUSH
61883: LD_VAR 0 3
61887: PUSH
61888: LD_VAR 0 2
61892: ARRAY
61893: PUSH
61894: LD_INT 1
61896: ARRAY
61897: STR
61898: PUSH
61899: LD_STRING ,
61901: STR
61902: PUSH
61903: LD_VAR 0 3
61907: PUSH
61908: LD_VAR 0 2
61912: ARRAY
61913: PUSH
61914: LD_INT 2
61916: ARRAY
61917: STR
61918: PUSH
61919: LD_STRING ,
61921: STR
61922: PUSH
61923: LD_VAR 0 3
61927: PUSH
61928: LD_VAR 0 2
61932: ARRAY
61933: PUSH
61934: LD_INT 3
61936: ARRAY
61937: STR
61938: PUSH
61939: LD_STRING ,
61941: STR
61942: PUSH
61943: LD_VAR 0 3
61947: PUSH
61948: LD_VAR 0 2
61952: ARRAY
61953: PUSH
61954: LD_INT 4
61956: ARRAY
61957: STR
61958: PUSH
61959: LD_STRING )
61961: STR
61962: PPUSH
61963: CALL_OW 559
61967: GO 61877
61969: POP
61970: POP
// end ; end ;
61971: LD_VAR 0 1
61975: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61976: LD_INT 0
61978: PPUSH
// if HexInfo ( x , y ) = warehouse then
61979: LD_VAR 0 2
61983: PPUSH
61984: LD_VAR 0 3
61988: PPUSH
61989: CALL_OW 428
61993: PUSH
61994: LD_VAR 0 1
61998: EQUAL
61999: IFFALSE 62026
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62001: LD_ADDR_EXP 61
62005: PUSH
62006: LD_EXP 61
62010: PPUSH
62011: LD_VAR 0 1
62015: PPUSH
62016: LD_INT 0
62018: PPUSH
62019: CALL_OW 1
62023: ST_TO_ADDR
62024: GO 62077
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62026: LD_ADDR_EXP 61
62030: PUSH
62031: LD_EXP 61
62035: PPUSH
62036: LD_VAR 0 1
62040: PPUSH
62041: LD_VAR 0 1
62045: PPUSH
62046: CALL_OW 255
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_VAR 0 2
62060: PUSH
62061: LD_VAR 0 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: PPUSH
62072: CALL_OW 1
62076: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62077: CALL 62086 0 0
// end ;
62081: LD_VAR 0 4
62085: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62086: LD_INT 0
62088: PPUSH
62089: PPUSH
62090: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62091: LD_STRING resetWarehouseGatheringPoints();
62093: PPUSH
62094: CALL_OW 559
// if warehouseGatheringPoints then
62098: LD_EXP 61
62102: IFFALSE 62228
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62104: LD_ADDR_VAR 0 3
62108: PUSH
62109: LD_EXP 61
62113: PPUSH
62114: CALL 52134 0 1
62118: ST_TO_ADDR
// for i := 1 to list do
62119: LD_ADDR_VAR 0 2
62123: PUSH
62124: DOUBLE
62125: LD_INT 1
62127: DEC
62128: ST_TO_ADDR
62129: LD_VAR 0 3
62133: PUSH
62134: FOR_TO
62135: IFFALSE 62226
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62137: LD_STRING setWarehouseGatheringPointXY(
62139: PUSH
62140: LD_VAR 0 3
62144: PUSH
62145: LD_VAR 0 2
62149: ARRAY
62150: PUSH
62151: LD_INT 1
62153: ARRAY
62154: STR
62155: PUSH
62156: LD_STRING ,
62158: STR
62159: PUSH
62160: LD_VAR 0 3
62164: PUSH
62165: LD_VAR 0 2
62169: ARRAY
62170: PUSH
62171: LD_INT 2
62173: ARRAY
62174: STR
62175: PUSH
62176: LD_STRING ,
62178: STR
62179: PUSH
62180: LD_VAR 0 3
62184: PUSH
62185: LD_VAR 0 2
62189: ARRAY
62190: PUSH
62191: LD_INT 3
62193: ARRAY
62194: STR
62195: PUSH
62196: LD_STRING ,
62198: STR
62199: PUSH
62200: LD_VAR 0 3
62204: PUSH
62205: LD_VAR 0 2
62209: ARRAY
62210: PUSH
62211: LD_INT 4
62213: ARRAY
62214: STR
62215: PUSH
62216: LD_STRING )
62218: STR
62219: PPUSH
62220: CALL_OW 559
62224: GO 62134
62226: POP
62227: POP
// end ; end ;
62228: LD_VAR 0 1
62232: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62233: LD_INT 0
62235: PPUSH
62236: PPUSH
// if not mpSidePositions then
62237: LD_EXP 7
62241: NOT
62242: IFFALSE 62246
// exit ;
62244: GO 62317
// result :=  ;
62246: LD_ADDR_VAR 0 1
62250: PUSH
62251: LD_STRING 
62253: ST_TO_ADDR
// for i := 1 to 8 do
62254: LD_ADDR_VAR 0 2
62258: PUSH
62259: DOUBLE
62260: LD_INT 1
62262: DEC
62263: ST_TO_ADDR
62264: LD_INT 8
62266: PUSH
62267: FOR_TO
62268: IFFALSE 62298
// begin result := result & mpSidePositions [ i ] & ; ;
62270: LD_ADDR_VAR 0 1
62274: PUSH
62275: LD_VAR 0 1
62279: PUSH
62280: LD_EXP 7
62284: PUSH
62285: LD_VAR 0 2
62289: ARRAY
62290: STR
62291: PUSH
62292: LD_STRING ;
62294: STR
62295: ST_TO_ADDR
// end ;
62296: GO 62267
62298: POP
62299: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62300: LD_STRING setMultiplayerRealPosition("
62302: PUSH
62303: LD_VAR 0 1
62307: STR
62308: PUSH
62309: LD_STRING ");
62311: STR
62312: PPUSH
62313: CALL_OW 559
// end ;
62317: LD_VAR 0 1
62321: RET
