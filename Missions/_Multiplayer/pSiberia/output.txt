// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2746 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3122 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 10
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 13
 850: PUSH
 851: LD_INT 14
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 16
 869: PUSH
 870: LD_INT 17
 872: PUSH
 873: LD_INT 18
 875: PUSH
 876: LD_INT 19
 878: PUSH
 879: LD_INT 20
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: PUSH
 889: LD_EXP 19
 893: UNION
 894: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 895: LD_VAR 0 1
 899: PUSH
 900: LD_INT 2
 902: EQUAL
 903: IFFALSE 915
// baseLevel := 1 else
 905: LD_ADDR_VAR 0 7
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
 913: GO 929
// baseLevel := mpGameSettings [ 1 ] ;
 915: LD_ADDR_VAR 0 7
 919: PUSH
 920: LD_EXP 6
 924: PUSH
 925: LD_INT 1
 927: ARRAY
 928: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 929: LD_ADDR_EXP 24
 933: PUSH
 934: LD_EXP 6
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 943: LD_ADDR_EXP 25
 947: PUSH
 948: LD_EXP 6
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 957: LD_ADDR_EXP 15
 961: PUSH
 962: LD_EXP 6
 966: PUSH
 967: LD_INT 4
 969: ARRAY
 970: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 971: LD_ADDR_EXP 27
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 5
 983: ARRAY
 984: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_INT 6
 997: ARRAY
 998: PUSH
 999: LD_INT 0
1001: GREATER
1002: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1003: LD_ADDR_VAR 0 6
1007: PUSH
1008: LD_EXP 6
1012: PUSH
1013: LD_INT 7
1015: ARRAY
1016: PUSH
1017: LD_INT 0
1019: GREATER
1020: ST_TO_ADDR
// mpKingArea := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpPoints := 0 ;
1029: LD_ADDR_EXP 35
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// mpEmissions := 0 ;
1037: LD_ADDR_EXP 37
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingArea := 0 ;
1045: LD_ADDR_EXP 1
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// kingCamArea := 0 ;
1053: LD_ADDR_EXP 2
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1061: LD_EXP 6
1065: PUSH
1066: LD_INT 9
1068: ARRAY
1069: IFFALSE 1201
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1071: LD_ADDR_EXP 36
1075: PUSH
1076: LD_INT 1
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 21
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 42
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 42
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1201: LD_ADDR_EXP 16
1205: PUSH
1206: LD_EXP 6
1210: PUSH
1211: LD_INT 11
1213: ARRAY
1214: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1215: LD_ADDR_EXP 22
1219: PUSH
1220: LD_EXP 6
1224: PUSH
1225: LD_INT 12
1227: ARRAY
1228: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1229: LD_ADDR_EXP 26
1233: PUSH
1234: LD_EXP 6
1238: PUSH
1239: LD_INT 13
1241: ARRAY
1242: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1243: LD_ADDR_EXP 33
1247: PUSH
1248: LD_EXP 6
1252: PUSH
1253: LD_INT 14
1255: ARRAY
1256: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1257: LD_ADDR_EXP 30
1261: PUSH
1262: LD_EXP 6
1266: PUSH
1267: LD_INT 15
1269: ARRAY
1270: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1271: LD_ADDR_EXP 28
1275: PUSH
1276: LD_EXP 6
1280: PUSH
1281: LD_INT 18
1283: ARRAY
1284: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1285: LD_ADDR_EXP 20
1289: PUSH
1290: LD_EXP 6
1294: PUSH
1295: LD_INT 21
1297: ARRAY
1298: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1299: LD_ADDR_EXP 31
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1330: LD_ADDR_VAR 0 8
1334: PUSH
1335: LD_INT 23
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 52883 0 2
1345: PUSH
1346: LD_INT 29
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: CALL 52883 0 2
1356: PUSH
1357: LD_INT 35
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL 52883 0 2
1367: PUSH
1368: LD_INT 41
1370: PPUSH
1371: LD_INT 3
1373: PPUSH
1374: CALL 52883 0 2
1378: PUSH
1379: LD_INT 47
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: CALL 52883 0 2
1389: PUSH
1390: LD_INT 53
1392: PPUSH
1393: LD_INT 5
1395: PPUSH
1396: CALL 52883 0 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_VAR 0 8
1423: PPUSH
1424: CALL 12232 0 1
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1534
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1432: LD_ADDR_EXP 21
1436: PUSH
1437: LD_EXP 21
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 272
1484: PUSH
1485: LD_VAR 0 8
1489: PUSH
1490: LD_VAR 0 3
1494: ARRAY
1495: PUSH
1496: LD_INT 2
1498: ARRAY
1499: PPUSH
1500: LD_VAR 0 8
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PUSH
1511: LD_INT 3
1513: ARRAY
1514: PPUSH
1515: LD_INT 10
1517: PPUSH
1518: CALL_OW 273
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 1
1531: ST_TO_ADDR
1532: GO 1429
1534: POP
1535: POP
// if hasOil then
1536: LD_VAR 0 5
1540: IFFALSE 1651
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_EXP 6
1551: PUSH
1552: LD_INT 6
1554: ARRAY
1555: PUSH
1556: LD_INT 2
1558: EQUAL
1559: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1560: LD_ADDR_EXP 12
1564: PUSH
1565: LD_INT 21
1567: PPUSH
1568: LD_VAR 0 4
1572: PPUSH
1573: CALL 52716 0 2
1577: PUSH
1578: LD_INT 27
1580: PPUSH
1581: LD_VAR 0 4
1585: PPUSH
1586: CALL 52716 0 2
1590: PUSH
1591: LD_INT 33
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL 52716 0 2
1603: PUSH
1604: LD_INT 39
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 52716 0 2
1616: PUSH
1617: LD_INT 45
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 52716 0 2
1629: PUSH
1630: LD_INT 51
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 52716 0 2
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end ; if hasSib then
1651: LD_VAR 0 6
1655: IFFALSE 1766
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1657: LD_ADDR_VAR 0 4
1661: PUSH
1662: LD_EXP 6
1666: PUSH
1667: LD_INT 7
1669: ARRAY
1670: PUSH
1671: LD_INT 2
1673: EQUAL
1674: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1675: LD_ADDR_EXP 13
1679: PUSH
1680: LD_INT 22
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL 52716 0 2
1692: PUSH
1693: LD_INT 28
1695: PPUSH
1696: LD_VAR 0 4
1700: PPUSH
1701: CALL 52716 0 2
1705: PUSH
1706: LD_INT 34
1708: PPUSH
1709: LD_VAR 0 4
1713: PPUSH
1714: CALL 52716 0 2
1718: PUSH
1719: LD_INT 40
1721: PPUSH
1722: LD_VAR 0 4
1726: PPUSH
1727: CALL 52716 0 2
1731: PUSH
1732: LD_INT 46
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL 52716 0 2
1744: PUSH
1745: LD_INT 52
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: CALL 52716 0 2
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1766: LD_VAR 0 7
1770: PUSH
1771: LD_INT 1
1773: GREATEREQUAL
1774: IFFALSE 1786
// mpDepots := startPos ;
1776: LD_ADDR_EXP 14
1780: PUSH
1781: LD_VAR 0 8
1785: ST_TO_ADDR
// if baseLevel >= 2 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 2
1793: GREATEREQUAL
1794: IFFALSE 2109
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1796: LD_ADDR_EXP 17
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: LD_INT 24
1806: PPUSH
1807: LD_INT 5
1809: PPUSH
1810: CALL 52883 0 2
1814: ADD
1815: PUSH
1816: LD_INT 31
1818: PUSH
1819: LD_INT 25
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: CALL 52883 0 2
1829: ADD
1830: PUSH
1831: LD_INT 4
1833: PUSH
1834: LD_INT 26
1836: PPUSH
1837: LD_INT 5
1839: PPUSH
1840: CALL 52883 0 2
1844: ADD
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: LD_INT 30
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL 52883 0 2
1864: ADD
1865: PUSH
1866: LD_INT 31
1868: PUSH
1869: LD_INT 31
1871: PPUSH
1872: LD_INT 5
1874: PPUSH
1875: CALL 52883 0 2
1879: ADD
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: LD_INT 32
1886: PPUSH
1887: LD_INT 4
1889: PPUSH
1890: CALL 52883 0 2
1894: ADD
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: LD_INT 36
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: CALL 52883 0 2
1914: ADD
1915: PUSH
1916: LD_INT 31
1918: PUSH
1919: LD_INT 37
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL 52883 0 2
1929: ADD
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 38
1936: PPUSH
1937: LD_INT 3
1939: PPUSH
1940: CALL 52883 0 2
1944: ADD
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: LD_INT 42
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL 52883 0 2
1964: ADD
1965: PUSH
1966: LD_INT 31
1968: PUSH
1969: LD_INT 43
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL 52883 0 2
1979: ADD
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 44
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 52883 0 2
1994: ADD
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 31
2003: PUSH
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 52883 0 2
2014: ADD
2015: PUSH
2016: LD_INT 31
2018: PUSH
2019: LD_INT 49
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL 52883 0 2
2029: ADD
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 50
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL 52883 0 2
2044: ADD
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: LD_INT 54
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL 52883 0 2
2064: ADD
2065: PUSH
2066: LD_INT 31
2068: PUSH
2069: LD_INT 55
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL 52883 0 2
2079: ADD
2080: PUSH
2081: LD_INT 4
2083: PUSH
2084: LD_INT 56
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL 52883 0 2
2094: ADD
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: ST_TO_ADDR
// end ; end ;
2109: LD_VAR 0 2
2113: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2114: GO 2116
2116: DISABLE
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
2125: PPUSH
2126: PPUSH
// begin if not mpShipments then
2127: LD_EXP 27
2131: NOT
2132: IFFALSE 2136
// exit ;
2134: GO 2659
// case mpShipments of 1 :
2136: LD_EXP 27
2140: PUSH
2141: LD_INT 1
2143: DOUBLE
2144: EQUAL
2145: IFTRUE 2149
2147: GO 2184
2149: POP
// begin time := 0 0$30 ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// normalTime := 0 0$30 ;
2158: LD_ADDR_VAR 0 6
2162: PUSH
2163: LD_INT 1050
2165: ST_TO_ADDR
// maxTime := 1 1$20 ;
2166: LD_ADDR_VAR 0 8
2170: PUSH
2171: LD_INT 2800
2173: ST_TO_ADDR
// delayTime := 0 0$5 ;
2174: LD_ADDR_VAR 0 7
2178: PUSH
2179: LD_INT 175
2181: ST_TO_ADDR
// end ; 2 :
2182: GO 2314
2184: LD_INT 2
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2227
2192: POP
// begin time := 0 0$25 ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// normalTime := 0 0$25 ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 875
2208: ST_TO_ADDR
// maxTime := 1 1$10 ;
2209: LD_ADDR_VAR 0 8
2213: PUSH
2214: LD_INT 2450
2216: ST_TO_ADDR
// delayTime := 0 0$4 ;
2217: LD_ADDR_VAR 0 7
2221: PUSH
2222: LD_INT 140
2224: ST_TO_ADDR
// end ; 3 :
2225: GO 2314
2227: LD_INT 3
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2270
2235: POP
// begin time := 0 0$20 ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// normalTime := 0 0$20 ;
2244: LD_ADDR_VAR 0 6
2248: PUSH
2249: LD_INT 700
2251: ST_TO_ADDR
// maxTime := 1 1$00 ;
2252: LD_ADDR_VAR 0 8
2256: PUSH
2257: LD_INT 2100
2259: ST_TO_ADDR
// delayTime := 0 0$3 ;
2260: LD_ADDR_VAR 0 7
2264: PUSH
2265: LD_INT 105
2267: ST_TO_ADDR
// end ; 4 :
2268: GO 2314
2270: LD_INT 4
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2313
2278: POP
// begin time := 0 0$15 ;
2279: LD_ADDR_VAR 0 4
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// normalTime := 0 0$15 ;
2287: LD_ADDR_VAR 0 6
2291: PUSH
2292: LD_INT 525
2294: ST_TO_ADDR
// maxTime := 0 0$55 ;
2295: LD_ADDR_VAR 0 8
2299: PUSH
2300: LD_INT 1925
2302: ST_TO_ADDR
// delayTime := 0 0$2 ;
2303: LD_ADDR_VAR 0 7
2307: PUSH
2308: LD_INT 70
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: PUSH
2322: LD_INT 11
2324: PUSH
2325: LD_INT 9
2327: PUSH
2328: LD_INT 12
2330: PUSH
2331: LD_INT 13
2333: PUSH
2334: LD_INT 14
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2345: LD_ADDR_VAR 0 5
2349: PUSH
2350: LD_INT 16
2352: PUSH
2353: LD_INT 17
2355: PUSH
2356: LD_INT 18
2358: PUSH
2359: LD_INT 19
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// for i := 1 to 8 do
2368: LD_ADDR_VAR 0 1
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 8
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2429
// begin if not mpSidePositions [ i ] then
2384: LD_EXP 7
2388: PUSH
2389: LD_VAR 0 1
2393: ARRAY
2394: NOT
2395: IFFALSE 2399
// continue ;
2397: GO 2381
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_VAR 0 3
2413: PUSH
2414: LD_EXP 7
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: ARRAY
2425: ADD
2426: ST_TO_ADDR
// end ;
2427: GO 2381
2429: POP
2430: POP
// x := 1 ;
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_INT 1
2438: ST_TO_ADDR
// repeat wait ( time ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: CALL_OW 67
// x := Inc ( x ) ;
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL 49537 0 1
2462: ST_TO_ADDR
// if x > 5 then
2463: LD_VAR 0 2
2467: PUSH
2468: LD_INT 5
2470: GREATER
2471: IFFALSE 2481
// x := 1 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// for i in areas do
2481: LD_ADDR_VAR 0 1
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2531
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2494: LD_VAR 0 1
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 287
2506: PUSH
2507: LD_INT 20
2509: LESS
2510: IFFALSE 2529
// begin CreateCratesArea ( x , i , true ) ;
2512: LD_VAR 0 2
2516: PPUSH
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL_OW 55
// end ; end ;
2529: GO 2491
2531: POP
2532: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2533: LD_INT 20
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 287
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2586
// begin for i := 1 to 3 do
2549: LD_ADDR_VAR 0 1
2553: PUSH
2554: DOUBLE
2555: LD_INT 1
2557: DEC
2558: ST_TO_ADDR
2559: LD_INT 3
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2582
// CreateCratesArea ( x , CenterArea , true ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 20
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 55
2580: GO 2562
2582: POP
2583: POP
// end else
2584: GO 2617
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2586: LD_INT 20
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 287
2596: PUSH
2597: LD_INT 30
2599: LESS
2600: IFFALSE 2617
// CreateCratesArea ( x , CenterArea , true ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 20
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 55
// time := time + delayTime ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_VAR 0 7
2631: PLUS
2632: ST_TO_ADDR
// if time > maxTime then
2633: LD_VAR 0 4
2637: PUSH
2638: LD_VAR 0 8
2642: GREATER
2643: IFFALSE 2655
// time := normalTime ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 6
2654: ST_TO_ADDR
// until false ;
2655: LD_INT 0
2657: IFFALSE 2439
// end ; end_of_file
2659: PPOPN 8
2661: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL 53681 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 7894 0 1
// end ;
2680: PPOPN 1
2682: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 53698 0 1
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL 8565 0 1
2704: PPOPN 1
2706: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL 53739 0 2
2721: PPOPN 2
2723: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 8618 0 3
2743: PPOPN 3
2745: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
// disable ( mpActive ) ;
2750: LD_INT 100
2752: DISABLE_MARKED
// disable ( mpWin ) ;
2753: LD_INT 101
2755: DISABLE_MARKED
// disable ( mpLose ) ;
2756: LD_INT 102
2758: DISABLE_MARKED
// mpGameType := 0 ;
2759: LD_ADDR_EXP 3
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// mpGameSettings := [ ] ;
2767: LD_ADDR_EXP 6
2771: PUSH
2772: EMPTY
2773: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2774: LD_ADDR_EXP 4
2778: PUSH
2779: EMPTY
2780: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2781: LD_ADDR_EXP 5
2785: PUSH
2786: EMPTY
2787: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2788: LD_ADDR_EXP 29
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2803: LD_ADDR_EXP 12
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2810: LD_ADDR_EXP 13
2814: PUSH
2815: EMPTY
2816: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2817: LD_ADDR_EXP 41
2821: PUSH
2822: EMPTY
2823: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2824: LD_ADDR_EXP 42
2828: PUSH
2829: EMPTY
2830: ST_TO_ADDR
// mpDepots := [ ] ;
2831: LD_ADDR_EXP 14
2835: PUSH
2836: EMPTY
2837: ST_TO_ADDR
// mpBuildings := [ ] ;
2838: LD_ADDR_EXP 17
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2845: LD_ADDR_EXP 18
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2852: LD_ADDR_EXP 19
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2859: LD_ADDR_EXP 20
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// mpStartingResources := [ ] ;
2866: LD_ADDR_EXP 15
2870: PUSH
2871: EMPTY
2872: ST_TO_ADDR
// mpStartPos := [ ] ;
2873: LD_ADDR_EXP 21
2877: PUSH
2878: EMPTY
2879: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2880: LD_ADDR_EXP 22
2884: PUSH
2885: LD_INT 1
2887: NEG
2888: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2889: LD_ADDR_EXP 23
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpApemans := [ ] ;
2896: LD_ADDR_EXP 30
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpApemansArea := [ ] ;
2903: LD_ADDR_EXP 31
2907: PUSH
2908: EMPTY
2909: ST_TO_ADDR
// mpRespawn := [ ] ;
2910: LD_ADDR_EXP 33
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// mpKingArea := 0 ;
2917: LD_ADDR_EXP 34
2921: PUSH
2922: LD_INT 0
2924: ST_TO_ADDR
// mpPoints := [ ] ;
2925: LD_ADDR_EXP 35
2929: PUSH
2930: EMPTY
2931: ST_TO_ADDR
// mpVehicles := 0 ;
2932: LD_ADDR_EXP 36
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// mpShipments := 0 ;
2940: LD_ADDR_EXP 27
2944: PUSH
2945: LD_INT 0
2947: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2948: LD_ADDR_EXP 40
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: PUSH
2957: EMPTY
2958: PUSH
2959: EMPTY
2960: PUSH
2961: EMPTY
2962: PUSH
2963: EMPTY
2964: PUSH
2965: EMPTY
2966: PUSH
2967: EMPTY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2979: LD_ADDR_EXP 32
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: PUSH
2988: EMPTY
2989: PUSH
2990: EMPTY
2991: PUSH
2992: EMPTY
2993: PUSH
2994: EMPTY
2995: PUSH
2996: EMPTY
2997: PUSH
2998: EMPTY
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: ST_TO_ADDR
// mpEmissions := 0 ;
3010: LD_ADDR_EXP 37
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpTeleports := 0 ;
3018: LD_ADDR_EXP 43
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// mpArtifacts := 0 ;
3026: LD_ADDR_EXP 44
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3034: LD_ADDR_EXP 25
3038: PUSH
3039: LD_INT 3
3041: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3042: LD_ADDR_EXP 24
3046: PUSH
3047: LD_INT 15
3049: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3050: LD_ADDR_EXP 38
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// mpGameActive := false ;
3058: LD_ADDR_EXP 39
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// mpBlockRespThread := false ;
3066: LD_ADDR_EXP 45
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// for i := 1 to 32 do
3074: LD_ADDR_VAR 0 2
3078: PUSH
3079: DOUBLE
3080: LD_INT 1
3082: DEC
3083: ST_TO_ADDR
3084: LD_INT 32
3086: PUSH
3087: FOR_TO
3088: IFFALSE 3115
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3090: LD_ADDR_EXP 6
3094: PUSH
3095: LD_EXP 6
3099: PPUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 0
3107: PPUSH
3108: CALL_OW 1
3112: ST_TO_ADDR
3113: GO 3087
3115: POP
3116: POP
// end ;
3117: LD_VAR 0 1
3121: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3138: LD_ADDR_VAR 0 14
3142: PUSH
3143: LD_INT 1
3145: PUSH
3146: LD_INT 2
3148: PUSH
3149: LD_INT 3
3151: PUSH
3152: LD_INT 5
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: ST_TO_ADDR
// for i in gameTypes do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_VAR 0 14
3170: PUSH
3171: FOR_IN
3172: IFFALSE 3181
// disable ( i ) ;
3174: LD_VAR 0 2
3178: DISABLE_MARKED
3179: GO 3171
3181: POP
3182: POP
// if Multiplayer then
3183: LD_OWVAR 4
3187: IFFALSE 3371
// begin mpGameType := mp_game_type ;
3189: LD_ADDR_EXP 3
3193: PUSH
3194: LD_OWVAR 6
3198: ST_TO_ADDR
// your_side := mp_player_side ;
3199: LD_ADDR_OWVAR 2
3203: PUSH
3204: LD_OWVAR 7
3208: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3209: LD_ADDR_EXP 7
3213: PUSH
3214: LD_OWVAR 17
3218: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3219: LD_ADDR_EXP 8
3223: PUSH
3224: LD_OWVAR 15
3228: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3229: LD_ADDR_EXP 9
3233: PUSH
3234: LD_OWVAR 16
3238: ST_TO_ADDR
// mpTeams := mp_teams ;
3239: LD_ADDR_EXP 10
3243: PUSH
3244: LD_OWVAR 12
3248: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: DOUBLE
3255: LD_INT 1
3257: DEC
3258: ST_TO_ADDR
3259: LD_EXP 4
3263: PPUSH
3264: CALL 12232 0 1
3268: PUSH
3269: FOR_TO
3270: IFFALSE 3346
// begin setting := mpGameSettingsKeys [ i ] ;
3272: LD_ADDR_VAR 0 12
3276: PUSH
3277: LD_EXP 4
3281: PUSH
3282: LD_VAR 0 2
3286: ARRAY
3287: ST_TO_ADDR
// if setting then
3288: LD_VAR 0 12
3292: IFFALSE 3344
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3294: LD_ADDR_EXP 6
3298: PUSH
3299: LD_EXP 6
3303: PPUSH
3304: LD_VAR 0 2
3308: PPUSH
3309: LD_EXP 5
3313: PUSH
3314: LD_VAR 0 2
3318: ARRAY
3319: PUSH
3320: LD_VAR 0 2
3324: PUSH
3325: LD_INT 1
3327: MINUS
3328: PPUSH
3329: CALL_OW 426
3333: PUSH
3334: LD_INT 1
3336: PLUS
3337: ARRAY
3338: PPUSH
3339: CALL_OW 1
3343: ST_TO_ADDR
// end ;
3344: GO 3269
3346: POP
3347: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3348: LD_ADDR_EXP 11
3352: PUSH
3353: LD_EXP 8
3357: PUSH
3358: LD_INT 0
3360: PUSH
3361: EMPTY
3362: LIST
3363: DIFF
3364: PUSH
3365: LD_INT 1
3367: GREATER
3368: ST_TO_ADDR
// end else
3369: GO 3371
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3371: LD_EXP 3
3375: PPUSH
3376: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3380: LD_EXP 18
3384: PPUSH
3385: CALL 12232 0 1
3389: IFFALSE 3420
// begin for i in mpMarkedAreas do
3391: LD_ADDR_VAR 0 2
3395: PUSH
3396: LD_EXP 18
3400: PUSH
3401: FOR_IN
3402: IFFALSE 3418
// SetAreaMapShow ( i , 0 ) ;
3404: LD_VAR 0 2
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL_OW 424
3416: GO 3401
3418: POP
3419: POP
// end ; for i := 1 to 8 do
3420: LD_ADDR_VAR 0 2
3424: PUSH
3425: DOUBLE
3426: LD_INT 1
3428: DEC
3429: ST_TO_ADDR
3430: LD_INT 8
3432: PUSH
3433: FOR_TO
3434: IFFALSE 4770
// begin if not mpSidePositions [ i ] then
3436: LD_EXP 7
3440: PUSH
3441: LD_VAR 0 2
3445: ARRAY
3446: NOT
3447: IFFALSE 3451
// continue ;
3449: GO 3433
// side := i ;
3451: LD_ADDR_VAR 0 7
3455: PUSH
3456: LD_VAR 0 2
3460: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3461: LD_ADDR_VAR 0 9
3465: PUSH
3466: LD_EXP 9
3470: PUSH
3471: LD_VAR 0 2
3475: ARRAY
3476: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3477: LD_ADDR_VAR 0 8
3481: PUSH
3482: LD_EXP 7
3486: PUSH
3487: LD_VAR 0 2
3491: ARRAY
3492: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3493: LD_EXP 12
3497: PPUSH
3498: CALL 12232 0 1
3502: IFFALSE 3579
// begin for j in mpOilDeposits [ pos ] do
3504: LD_ADDR_VAR 0 3
3508: PUSH
3509: LD_EXP 12
3513: PUSH
3514: LD_VAR 0 8
3518: ARRAY
3519: PUSH
3520: FOR_IN
3521: IFFALSE 3577
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3523: LD_VAR 0 3
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: PPUSH
3532: LD_VAR 0 3
3536: PUSH
3537: LD_INT 2
3539: ARRAY
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3548: LD_VAR 0 3
3552: PUSH
3553: LD_INT 1
3555: ARRAY
3556: PPUSH
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 7
3570: PPUSH
3571: CALL_OW 441
// end ;
3575: GO 3520
3577: POP
3578: POP
// end ; if Count ( mpSibDeposits ) then
3579: LD_EXP 13
3583: PPUSH
3584: CALL 12232 0 1
3588: IFFALSE 3665
// begin for j in mpSibDeposits [ pos ] do
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_EXP 13
3599: PUSH
3600: LD_VAR 0 8
3604: ARRAY
3605: PUSH
3606: FOR_IN
3607: IFFALSE 3663
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3609: LD_VAR 0 3
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3634: LD_VAR 0 3
3638: PUSH
3639: LD_INT 1
3641: ARRAY
3642: PPUSH
3643: LD_VAR 0 3
3647: PUSH
3648: LD_INT 2
3650: ARRAY
3651: PPUSH
3652: LD_VAR 0 7
3656: PPUSH
3657: CALL_OW 441
// end ;
3661: GO 3606
3663: POP
3664: POP
// end ; InitBc ;
3665: CALL_OW 21
// InitUc ;
3669: CALL_OW 18
// uc_side := side ;
3673: LD_ADDR_OWVAR 20
3677: PUSH
3678: LD_VAR 0 7
3682: ST_TO_ADDR
// uc_nation := nation ;
3683: LD_ADDR_OWVAR 21
3687: PUSH
3688: LD_VAR 0 9
3692: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3693: LD_EXP 22
3697: PUSH
3698: LD_INT 1
3700: NEG
3701: GREATER
3702: IFFALSE 3861
// begin x := mpStartPos [ pos ] [ 1 ] ;
3704: LD_ADDR_VAR 0 5
3708: PUSH
3709: LD_EXP 21
3713: PUSH
3714: LD_VAR 0 8
3718: ARRAY
3719: PUSH
3720: LD_INT 1
3722: ARRAY
3723: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3724: LD_ADDR_VAR 0 6
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: LD_VAR 0 8
3738: ARRAY
3739: PUSH
3740: LD_INT 2
3742: ARRAY
3743: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3744: LD_VAR 0 5
3748: PPUSH
3749: LD_VAR 0 6
3753: PPUSH
3754: LD_INT 12
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3764: LD_ADDR_EXP 23
3768: PUSH
3769: LD_EXP 23
3773: PPUSH
3774: LD_VAR 0 7
3778: PPUSH
3779: LD_VAR 0 7
3783: PPUSH
3784: LD_VAR 0 5
3788: PPUSH
3789: LD_VAR 0 6
3793: PPUSH
3794: LD_INT 1
3796: PUSH
3797: LD_INT 100
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: LD_INT 70
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 3
3816: PUSH
3817: LD_INT 40
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 10
3826: PUSH
3827: LD_INT 25
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: LD_INT 20
3836: PUSH
3837: LD_INT 100
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PPUSH
3851: CALL_OW 418
3855: PPUSH
3856: CALL_OW 1
3860: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3861: LD_EXP 14
3865: PPUSH
3866: CALL 12232 0 1
3870: IFFALSE 4054
// begin if mpGameType = GameTypeSurvival then
3872: LD_EXP 3
3876: PUSH
3877: LD_INT 2
3879: EQUAL
3880: IFFALSE 3900
// begin bc_level := 10 ;
3882: LD_ADDR_OWVAR 43
3886: PUSH
3887: LD_INT 10
3889: ST_TO_ADDR
// bc_type := b_warehouse ;
3890: LD_ADDR_OWVAR 42
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// end else
3898: GO 3916
// begin bc_level := 0 ;
3900: LD_ADDR_OWVAR 43
3904: PUSH
3905: LD_INT 0
3907: ST_TO_ADDR
// bc_type := b_depot ;
3908: LD_ADDR_OWVAR 42
3912: PUSH
3913: LD_INT 0
3915: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3916: LD_ADDR_VAR 0 4
3920: PUSH
3921: LD_EXP 14
3925: PUSH
3926: LD_VAR 0 8
3930: ARRAY
3931: PUSH
3932: LD_INT 1
3934: ARRAY
3935: PPUSH
3936: LD_EXP 14
3940: PUSH
3941: LD_VAR 0 8
3945: ARRAY
3946: PUSH
3947: LD_INT 2
3949: ARRAY
3950: PPUSH
3951: LD_EXP 14
3955: PUSH
3956: LD_VAR 0 8
3960: ARRAY
3961: PUSH
3962: LD_INT 3
3964: ARRAY
3965: PPUSH
3966: CALL_OW 47
3970: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3971: LD_VAR 0 4
3975: PPUSH
3976: LD_STRING @
3978: PUSH
3979: LD_VAR 0 7
3983: STR
3984: PPUSH
3985: CALL_OW 500
// if Count ( mpStartingResources ) then
3989: LD_EXP 15
3993: PPUSH
3994: CALL 12232 0 1
3998: IFFALSE 4052
// begin for j := 1 to mpStartingResources do
4000: LD_ADDR_VAR 0 3
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_EXP 15
4014: PUSH
4015: FOR_TO
4016: IFFALSE 4050
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4018: LD_VAR 0 4
4022: PPUSH
4023: CALL_OW 274
4027: PPUSH
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_EXP 15
4037: PUSH
4038: LD_VAR 0 3
4042: ARRAY
4043: PPUSH
4044: CALL_OW 277
4048: GO 4015
4050: POP
4051: POP
// end ; end else
4052: GO 4261
// if Count ( mpStartingResources ) then
4054: LD_EXP 15
4058: PPUSH
4059: CALL 12232 0 1
4063: IFFALSE 4261
// begin x := mpStartPos [ pos ] [ 1 ] ;
4065: LD_ADDR_VAR 0 5
4069: PUSH
4070: LD_EXP 21
4074: PUSH
4075: LD_VAR 0 8
4079: ARRAY
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4085: LD_ADDR_VAR 0 6
4089: PUSH
4090: LD_EXP 21
4094: PUSH
4095: LD_VAR 0 8
4099: ARRAY
4100: PUSH
4101: LD_INT 2
4103: ARRAY
4104: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4105: LD_ADDR_VAR 0 3
4109: PUSH
4110: DOUBLE
4111: LD_INT 1
4113: DEC
4114: ST_TO_ADDR
4115: LD_EXP 15
4119: PUSH
4120: FOR_TO
4121: IFFALSE 4259
// begin resources := mpStartingResources [ j ] ;
4123: LD_ADDR_VAR 0 13
4127: PUSH
4128: LD_EXP 15
4132: PUSH
4133: LD_VAR 0 3
4137: ARRAY
4138: ST_TO_ADDR
// if resources = 0 then
4139: LD_VAR 0 13
4143: PUSH
4144: LD_INT 0
4146: EQUAL
4147: IFFALSE 4151
// continue ;
4149: GO 4120
// repeat if resources >= 50 then
4151: LD_VAR 0 13
4155: PUSH
4156: LD_INT 50
4158: GREATEREQUAL
4159: IFFALSE 4205
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4161: LD_VAR 0 3
4165: PPUSH
4166: LD_INT 5
4168: PPUSH
4169: LD_VAR 0 5
4173: PPUSH
4174: LD_VAR 0 6
4178: PPUSH
4179: LD_INT 6
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 60
// resources := resources - 50 ;
4189: LD_ADDR_VAR 0 13
4193: PUSH
4194: LD_VAR 0 13
4198: PUSH
4199: LD_INT 50
4201: MINUS
4202: ST_TO_ADDR
// end else
4203: GO 4247
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4205: LD_VAR 0 3
4209: PPUSH
4210: LD_VAR 0 13
4214: PUSH
4215: LD_INT 10
4217: DIV
4218: PPUSH
4219: LD_VAR 0 5
4223: PPUSH
4224: LD_VAR 0 6
4228: PPUSH
4229: LD_INT 6
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 60
// resources := 0 ;
4239: LD_ADDR_VAR 0 13
4243: PUSH
4244: LD_INT 0
4246: ST_TO_ADDR
// end ; until resources <= 0 ;
4247: LD_VAR 0 13
4251: PUSH
4252: LD_INT 0
4254: LESSEQUAL
4255: IFFALSE 4151
// end ;
4257: GO 4120
4259: POP
4260: POP
// end ; if Count ( mpBuildings ) then
4261: LD_EXP 17
4265: PPUSH
4266: CALL 12232 0 1
4270: IFFALSE 4348
// begin for j in mpBuildings [ pos ] do
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_EXP 17
4281: PUSH
4282: LD_VAR 0 8
4286: ARRAY
4287: PUSH
4288: FOR_IN
4289: IFFALSE 4346
// begin bc_level := 0 ;
4291: LD_ADDR_OWVAR 43
4295: PUSH
4296: LD_INT 0
4298: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4299: LD_ADDR_OWVAR 42
4303: PUSH
4304: LD_VAR 0 3
4308: PUSH
4309: LD_INT 1
4311: ARRAY
4312: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_VAR 0 3
4326: PUSH
4327: LD_INT 3
4329: ARRAY
4330: PPUSH
4331: LD_VAR 0 3
4335: PUSH
4336: LD_INT 4
4338: ARRAY
4339: PPUSH
4340: CALL_OW 47
// end ;
4344: GO 4288
4346: POP
4347: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4348: LD_EXP 26
4352: IFFALSE 4372
4354: PUSH
4355: LD_INT 20
4357: PPUSH
4358: LD_VAR 0 7
4362: PPUSH
4363: CALL_OW 321
4367: PUSH
4368: LD_INT 1
4370: EQUAL
4371: AND
4372: IFFALSE 4389
// SetTech ( tech_SibDet , side , state_researched ) ;
4374: LD_INT 20
4376: PPUSH
4377: LD_VAR 0 7
4381: PPUSH
4382: LD_INT 2
4384: PPUSH
4385: CALL_OW 322
// if not mpArtifacts then
4389: LD_EXP 44
4393: NOT
4394: IFFALSE 4411
// SetTech ( tech_artifact , side , state_disabled ) ;
4396: LD_INT 24
4398: PPUSH
4399: LD_VAR 0 7
4403: PPUSH
4404: LD_INT 0
4406: PPUSH
4407: CALL_OW 322
// if mpSibBomb = 1 then
4411: LD_EXP 28
4415: PUSH
4416: LD_INT 1
4418: EQUAL
4419: IFFALSE 4438
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4421: LD_INT 25
4423: PPUSH
4424: LD_VAR 0 7
4428: PPUSH
4429: LD_INT 1
4431: PPUSH
4432: CALL_OW 322
// end else
4436: GO 4453
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4438: LD_INT 25
4440: PPUSH
4441: LD_VAR 0 7
4445: PPUSH
4446: LD_INT 0
4448: PPUSH
4449: CALL_OW 322
// end ; if mpVehicles then
4453: LD_EXP 36
4457: IFFALSE 4556
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_VAR 0 7
4468: PPUSH
4469: LD_VAR 0 9
4473: PPUSH
4474: LD_EXP 36
4478: PPUSH
4479: CALL 5680 0 3
4483: PUSH
4484: FOR_IN
4485: IFFALSE 4554
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 0
4494: PPUSH
4495: LD_INT 5
4497: PPUSH
4498: CALL_OW 12
4502: PPUSH
4503: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4507: LD_VAR 0 3
4511: PPUSH
4512: LD_EXP 21
4516: PUSH
4517: LD_VAR 0 8
4521: ARRAY
4522: PUSH
4523: LD_INT 1
4525: ARRAY
4526: PPUSH
4527: LD_EXP 21
4531: PUSH
4532: LD_VAR 0 8
4536: ARRAY
4537: PUSH
4538: LD_INT 2
4540: ARRAY
4541: PPUSH
4542: LD_INT 12
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 50
// end ;
4552: GO 4484
4554: POP
4555: POP
// end ; uc_nation := nation ;
4556: LD_ADDR_OWVAR 21
4560: PUSH
4561: LD_VAR 0 9
4565: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4566: LD_ADDR_VAR 0 11
4570: PUSH
4571: LD_VAR 0 7
4575: PPUSH
4576: LD_VAR 0 9
4580: PPUSH
4581: LD_EXP 24
4585: PPUSH
4586: LD_EXP 25
4590: PPUSH
4591: CALL 5182 0 4
4595: ST_TO_ADDR
// for j in team do
4596: LD_ADDR_VAR 0 3
4600: PUSH
4601: LD_VAR 0 11
4605: PUSH
4606: FOR_IN
4607: IFFALSE 4656
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4609: LD_VAR 0 3
4613: PPUSH
4614: LD_EXP 21
4618: PUSH
4619: LD_VAR 0 8
4623: ARRAY
4624: PUSH
4625: LD_INT 1
4627: ARRAY
4628: PPUSH
4629: LD_EXP 21
4633: PUSH
4634: LD_VAR 0 8
4638: ARRAY
4639: PUSH
4640: LD_INT 2
4642: ARRAY
4643: PPUSH
4644: LD_INT 12
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
4654: GO 4606
4656: POP
4657: POP
// if mpApemans then
4658: LD_EXP 30
4662: IFFALSE 4768
// begin for j := 1 to mpApemans do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_EXP 30
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4766
// begin PrepareApeman ( - 5 ) ;
4682: LD_INT 5
4684: NEG
4685: PPUSH
4686: CALL 44291 0 1
// ape := CreateHuman ;
4690: LD_ADDR_VAR 0 10
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4700: LD_ADDR_EXP 32
4704: PUSH
4705: LD_EXP 32
4709: PPUSH
4710: LD_VAR 0 8
4714: PPUSH
4715: LD_EXP 32
4719: PUSH
4720: LD_VAR 0 8
4724: ARRAY
4725: PPUSH
4726: LD_VAR 0 10
4730: PPUSH
4731: CALL 48164 0 2
4735: PPUSH
4736: CALL_OW 1
4740: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4741: LD_VAR 0 10
4745: PPUSH
4746: LD_EXP 31
4750: PUSH
4751: LD_VAR 0 8
4755: ARRAY
4756: PPUSH
4757: LD_INT 0
4759: PPUSH
4760: CALL_OW 49
// end ;
4764: GO 4679
4766: POP
4767: POP
// end ; end ;
4768: GO 3433
4770: POP
4771: POP
// if not mpTeamGame then
4772: LD_EXP 11
4776: NOT
4777: IFFALSE 4875
// begin for i := 1 to 8 do
4779: LD_ADDR_VAR 0 2
4783: PUSH
4784: DOUBLE
4785: LD_INT 1
4787: DEC
4788: ST_TO_ADDR
4789: LD_INT 8
4791: PUSH
4792: FOR_TO
4793: IFFALSE 4871
// for j := 1 to 8 do
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: DOUBLE
4801: LD_INT 1
4803: DEC
4804: ST_TO_ADDR
4805: LD_INT 8
4807: PUSH
4808: FOR_TO
4809: IFFALSE 4867
// if i <> j then
4811: LD_VAR 0 2
4815: PUSH
4816: LD_VAR 0 3
4820: NONEQUAL
4821: IFFALSE 4845
// SetAttitude ( i , j , att_neutral , true ) else
4823: LD_VAR 0 2
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 0
4835: PPUSH
4836: LD_INT 1
4838: PPUSH
4839: CALL_OW 80
4843: GO 4865
// SetAttitude ( i , j , att_friend , true ) ;
4845: LD_VAR 0 2
4849: PPUSH
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 80
4865: GO 4808
4867: POP
4868: POP
4869: GO 4792
4871: POP
4872: POP
// end else
4873: GO 5050
// begin if mpSharedVision then
4875: LD_EXP 16
4879: IFFALSE 4944
// begin for i in mpTeams do
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: LD_EXP 10
4890: PUSH
4891: FOR_IN
4892: IFFALSE 4942
// for j := 2 to i do
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: DOUBLE
4900: LD_INT 2
4902: DEC
4903: ST_TO_ADDR
4904: LD_VAR 0 2
4908: PUSH
4909: FOR_TO
4910: IFFALSE 4938
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4912: LD_VAR 0 2
4916: PUSH
4917: LD_VAR 0 3
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 2
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: PPUSH
4932: CALL_OW 343
4936: GO 4909
4938: POP
4939: POP
4940: GO 4891
4942: POP
4943: POP
// end ; for i := 1 to 8 do
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: DOUBLE
4950: LD_INT 1
4952: DEC
4953: ST_TO_ADDR
4954: LD_INT 8
4956: PUSH
4957: FOR_TO
4958: IFFALSE 5048
// for j := 1 to 8 do
4960: LD_ADDR_VAR 0 3
4964: PUSH
4965: DOUBLE
4966: LD_INT 1
4968: DEC
4969: ST_TO_ADDR
4970: LD_INT 8
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5044
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4976: LD_EXP 8
4980: PUSH
4981: LD_VAR 0 2
4985: ARRAY
4986: PUSH
4987: LD_EXP 8
4991: PUSH
4992: LD_VAR 0 3
4996: ARRAY
4997: EQUAL
4998: IFFALSE 5022
// SetAttitude ( i , j , att_friend , true ) else
5000: LD_VAR 0 2
5004: PPUSH
5005: LD_VAR 0 3
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: CALL_OW 80
5020: GO 5042
// SetAttitude ( i , j , att_enemy , true ) ;
5022: LD_VAR 0 2
5026: PPUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 2
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 80
5042: GO 4973
5044: POP
5045: POP
5046: GO 4957
5048: POP
5049: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5050: LD_ADDR_OWVAR 71
5054: PUSH
5055: LD_EXP 9
5059: PUSH
5060: LD_OWVAR 2
5064: ARRAY
5065: ST_TO_ADDR
// if IAmSpec then
5066: CALL_OW 531
5070: IFFALSE 5111
// begin FogOff ( true ) ;
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5079: LD_EXP 29
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 2
5090: DIV
5091: PPUSH
5092: LD_EXP 29
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PUSH
5101: LD_INT 2
5103: DIV
5104: PPUSH
5105: CALL_OW 86
// end else
5109: GO 5157
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5111: LD_EXP 21
5115: PUSH
5116: LD_EXP 7
5120: PUSH
5121: LD_OWVAR 2
5125: ARRAY
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: ARRAY
5131: PPUSH
5132: LD_EXP 21
5136: PUSH
5137: LD_EXP 7
5141: PUSH
5142: LD_OWVAR 2
5146: ARRAY
5147: ARRAY
5148: PUSH
5149: LD_INT 2
5151: ARRAY
5152: PPUSH
5153: CALL_OW 86
// end ; BeginBuildUp ;
5157: CALL 6213 0 0
// enable ( mpActive ) ;
5161: LD_INT 100
5163: ENABLE_MARKED
// enable ( mpGameType ) ;
5164: LD_EXP 3
5168: ENABLE_MARKED
// mpGameActive := true ;
5169: LD_ADDR_EXP 39
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// end ;
5177: LD_VAR 0 1
5181: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5182: LD_INT 0
5184: PPUSH
5185: PPUSH
5186: PPUSH
5187: PPUSH
// result := [ ] ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: EMPTY
5194: ST_TO_ADDR
// class := class_soldier ;
5195: LD_ADDR_VAR 0 8
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// uc_side := side ;
5203: LD_ADDR_OWVAR 20
5207: PUSH
5208: LD_VAR 0 1
5212: ST_TO_ADDR
// uc_nation := nation ;
5213: LD_ADDR_OWVAR 21
5217: PUSH
5218: LD_VAR 0 2
5222: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5223: LD_ADDR_OWVAR 26
5227: PUSH
5228: LD_OWVAR 19
5232: PUSH
5233: LD_VAR 0 1
5237: ARRAY
5238: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5239: LD_INT 1
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: CALL_OW 12
5249: PPUSH
5250: LD_VAR 0 8
5254: PPUSH
5255: LD_VAR 0 4
5259: PUSH
5260: LD_INT 2
5262: PLUS
5263: PPUSH
5264: CALL_OW 380
// hc_importance := 105 ;
5268: LD_ADDR_OWVAR 32
5272: PUSH
5273: LD_INT 105
5275: ST_TO_ADDR
// if Multiplayer then
5276: LD_OWVAR 4
5280: IFFALSE 5320
// begin hc_gallery := MULTIAVATARS ;
5282: LD_ADDR_OWVAR 33
5286: PUSH
5287: LD_STRING MULTIAVATARS
5289: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5290: LD_ADDR_OWVAR 34
5294: PUSH
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL_OW 525
5304: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5305: LD_ADDR_OWVAR 27
5309: PUSH
5310: LD_VAR 0 1
5314: PPUSH
5315: CALL_OW 526
5319: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5320: LD_ADDR_VAR 0 5
5324: PUSH
5325: LD_VAR 0 5
5329: PPUSH
5330: CALL_OW 44
5334: PPUSH
5335: CALL 48164 0 2
5339: ST_TO_ADDR
// if mpTeamPreset then
5340: LD_LOC 1
5344: IFFALSE 5440
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5346: LD_LOC 1
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: PPUSH
5355: LD_VAR 0 5
5359: PUSH
5360: LD_VAR 0 5
5364: ARRAY
5365: PPUSH
5366: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5370: LD_VAR 0 5
5374: PUSH
5375: LD_VAR 0 5
5379: ARRAY
5380: PPUSH
5381: LD_INT 1
5383: PPUSH
5384: LD_LOC 1
5388: PUSH
5389: LD_INT 1
5391: ARRAY
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 260
5400: PPUSH
5401: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5405: LD_VAR 0 5
5409: PUSH
5410: LD_VAR 0 5
5414: ARRAY
5415: PPUSH
5416: LD_INT 2
5418: PPUSH
5419: LD_LOC 1
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_INT 2
5430: PPUSH
5431: CALL_OW 260
5435: PPUSH
5436: CALL_OW 239
// end ; InitHc_All ( ) ;
5440: CALL_OW 584
// class := 2 ;
5444: LD_ADDR_VAR 0 8
5448: PUSH
5449: LD_INT 2
5451: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5452: LD_ADDR_VAR 0 6
5456: PUSH
5457: DOUBLE
5458: LD_INT 1
5460: DEC
5461: ST_TO_ADDR
5462: LD_VAR 0 3
5466: PUSH
5467: LD_INT 1
5469: MINUS
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5656
// begin PrepareHuman ( false , class , skill ) ;
5474: LD_INT 0
5476: PPUSH
5477: LD_VAR 0 8
5481: PPUSH
5482: LD_VAR 0 4
5486: PPUSH
5487: CALL_OW 380
// un := CreateHuman ;
5491: LD_ADDR_VAR 0 7
5495: PUSH
5496: CALL_OW 44
5500: ST_TO_ADDR
// result := Join ( result , un ) ;
5501: LD_ADDR_VAR 0 5
5505: PUSH
5506: LD_VAR 0 5
5510: PPUSH
5511: LD_VAR 0 7
5515: PPUSH
5516: CALL 48164 0 2
5520: ST_TO_ADDR
// if mpTeamPreset then
5521: LD_LOC 1
5525: IFFALSE 5621
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5527: LD_LOC 1
5531: PUSH
5532: LD_VAR 0 6
5536: PUSH
5537: LD_INT 1
5539: PLUS
5540: ARRAY
5541: PPUSH
5542: LD_VAR 0 7
5546: PPUSH
5547: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5551: LD_VAR 0 7
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: LD_LOC 1
5563: PUSH
5564: LD_VAR 0 6
5568: PUSH
5569: LD_INT 1
5571: PLUS
5572: ARRAY
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: CALL_OW 260
5581: PPUSH
5582: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5586: LD_VAR 0 7
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: LD_LOC 1
5598: PUSH
5599: LD_VAR 0 6
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: ARRAY
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: CALL_OW 260
5616: PPUSH
5617: CALL_OW 239
// end ; class := Inc ( class ) ;
5621: LD_ADDR_VAR 0 8
5625: PUSH
5626: LD_VAR 0 8
5630: PPUSH
5631: CALL 49537 0 1
5635: ST_TO_ADDR
// if class = 5 then
5636: LD_VAR 0 8
5640: PUSH
5641: LD_INT 5
5643: EQUAL
5644: IFFALSE 5654
// class := 1 ;
5646: LD_ADDR_VAR 0 8
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// end ;
5654: GO 5471
5656: POP
5657: POP
// if not mpTeamPreset then
5658: LD_LOC 1
5662: NOT
5663: IFFALSE 5675
// mpTeamPreset := result ;
5665: LD_ADDR_LOC 1
5669: PUSH
5670: LD_VAR 0 5
5674: ST_TO_ADDR
// end ;
5675: LD_VAR 0 5
5679: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5680: LD_INT 0
5682: PPUSH
5683: PPUSH
// result := [ ] ;
5684: LD_ADDR_VAR 0 4
5688: PUSH
5689: EMPTY
5690: ST_TO_ADDR
// if not vehicles then
5691: LD_VAR 0 3
5695: NOT
5696: IFFALSE 5700
// exit ;
5698: GO 5914
// for i := 1 to vehicles [ nation ] do
5700: LD_ADDR_VAR 0 5
5704: PUSH
5705: DOUBLE
5706: LD_INT 1
5708: DEC
5709: ST_TO_ADDR
5710: LD_VAR 0 3
5714: PUSH
5715: LD_VAR 0 2
5719: ARRAY
5720: PUSH
5721: FOR_TO
5722: IFFALSE 5912
// begin uc_side := side ;
5724: LD_ADDR_OWVAR 20
5728: PUSH
5729: LD_VAR 0 1
5733: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5734: LD_VAR 0 3
5738: PUSH
5739: LD_VAR 0 2
5743: ARRAY
5744: PUSH
5745: LD_VAR 0 5
5749: ARRAY
5750: PPUSH
5751: CALL 12232 0 1
5755: PUSH
5756: LD_INT 4
5758: GREATER
5759: IFFALSE 5789
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5761: LD_ADDR_OWVAR 21
5765: PUSH
5766: LD_VAR 0 3
5770: PUSH
5771: LD_VAR 0 2
5775: ARRAY
5776: PUSH
5777: LD_VAR 0 5
5781: ARRAY
5782: PUSH
5783: LD_INT 5
5785: ARRAY
5786: ST_TO_ADDR
5787: GO 5799
// uc_nation := nation ;
5789: LD_ADDR_OWVAR 21
5793: PUSH
5794: LD_VAR 0 2
5798: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5799: LD_VAR 0 3
5803: PUSH
5804: LD_VAR 0 2
5808: ARRAY
5809: PUSH
5810: LD_VAR 0 5
5814: ARRAY
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: PPUSH
5820: LD_VAR 0 3
5824: PUSH
5825: LD_VAR 0 2
5829: ARRAY
5830: PUSH
5831: LD_VAR 0 5
5835: ARRAY
5836: PUSH
5837: LD_INT 2
5839: ARRAY
5840: PPUSH
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 2
5850: ARRAY
5851: PUSH
5852: LD_VAR 0 5
5856: ARRAY
5857: PUSH
5858: LD_INT 3
5860: ARRAY
5861: PPUSH
5862: LD_VAR 0 3
5866: PUSH
5867: LD_VAR 0 2
5871: ARRAY
5872: PUSH
5873: LD_VAR 0 5
5877: ARRAY
5878: PUSH
5879: LD_INT 4
5881: ARRAY
5882: PPUSH
5883: LD_INT 80
5885: PPUSH
5886: CALL 14994 0 5
// result := Join ( result , CreateVehicle ) ;
5890: LD_ADDR_VAR 0 4
5894: PUSH
5895: LD_VAR 0 4
5899: PPUSH
5900: CALL_OW 45
5904: PPUSH
5905: CALL 48164 0 2
5909: ST_TO_ADDR
// end ;
5910: GO 5721
5912: POP
5913: POP
// end ;
5914: LD_VAR 0 4
5918: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
// for i in mpBattleFlags do
5923: LD_ADDR_VAR 0 3
5927: PUSH
5928: LD_EXP 23
5932: PUSH
5933: FOR_IN
5934: IFFALSE 6011
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_INT 1
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: LD_INT 2
5955: PUSH
5956: LD_VAR 0 1
5960: PUSH
5961: LD_REAL  7.00000000000000E-0001
5964: MUL
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: LD_VAR 0 1
5977: PUSH
5978: LD_REAL  4.00000000000000E-0001
5981: MUL
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 20
5989: PUSH
5990: LD_VAR 0 1
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 423
6009: GO 5933
6011: POP
6012: POP
// end ;
6013: LD_VAR 0 2
6017: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6018: LD_INT 100
6020: IFFALSE 6115
6022: GO 6024
6024: DISABLE
6025: LD_INT 0
6027: PPUSH
6028: PPUSH
// begin if mpBattleFlag <= 0 then
6029: LD_EXP 22
6033: PUSH
6034: LD_INT 0
6036: LESSEQUAL
6037: IFFALSE 6041
// exit ;
6039: GO 6115
// strength := 100 ;
6041: LD_ADDR_VAR 0 2
6045: PUSH
6046: LD_INT 100
6048: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6049: LD_EXP 22
6053: PPUSH
6054: CALL_OW 67
// strength := Dec ( strength ) ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_VAR 0 2
6067: PPUSH
6068: CALL 49559 0 1
6072: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL 5919 0 1
// until not strength ;
6082: LD_VAR 0 2
6086: NOT
6087: IFFALSE 6049
// for i in mpBattleFlags do
6089: LD_ADDR_VAR 0 1
6093: PUSH
6094: LD_EXP 23
6098: PUSH
6099: FOR_IN
6100: IFFALSE 6113
// KillBattleFlag ( i ) ;
6102: LD_VAR 0 1
6106: PPUSH
6107: CALL_OW 419
6111: GO 6099
6113: POP
6114: POP
// end ;
6115: PPOPN 2
6117: END
// every 0 0$1 marked mpActive do var side , tmp ;
6118: GO 6120
6120: DISABLE
6121: LD_INT 0
6123: PPUSH
6124: PPUSH
// begin if mpSibBomb <= 1 then
6125: LD_EXP 28
6129: PUSH
6130: LD_INT 1
6132: LESSEQUAL
6133: IFFALSE 6137
// exit ;
6135: GO 6210
// tmp := mpSibBomb ;
6137: LD_ADDR_VAR 0 2
6141: PUSH
6142: LD_EXP 28
6146: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6147: LD_INT 35
6149: PPUSH
6150: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6154: LD_ADDR_VAR 0 2
6158: PUSH
6159: LD_VAR 0 2
6163: PUSH
6164: LD_INT 35
6166: MINUS
6167: ST_TO_ADDR
// until not tmp ;
6168: LD_VAR 0 2
6172: NOT
6173: IFFALSE 6147
// for side := 1 to 8 do
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_INT 8
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6208
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6191: LD_INT 25
6193: PPUSH
6194: LD_VAR 0 1
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 322
6206: GO 6188
6208: POP
6209: POP
// end ;
6210: PPOPN 2
6212: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
6217: PPUSH
// mpBuildUpTimeDelay := 0 ;
6218: LD_ADDR_EXP 46
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// if not mpBuildUpTime then
6226: LD_EXP 20
6230: NOT
6231: IFFALSE 6235
// exit ;
6233: GO 6424
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6235: LD_ADDR_EXP 46
6239: PUSH
6240: LD_INT 8400
6242: PUSH
6243: LD_INT 2100
6245: PUSH
6246: LD_EXP 20
6250: MUL
6251: PLUS
6252: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6253: LD_ADDR_EXP 47
6257: PUSH
6258: LD_INT 1
6260: ST_TO_ADDR
// for i := 1 to 8 do
6261: LD_ADDR_VAR 0 2
6265: PUSH
6266: DOUBLE
6267: LD_INT 1
6269: DEC
6270: ST_TO_ADDR
6271: LD_INT 8
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6422
// if mpSidePositions [ i ] then
6277: LD_EXP 7
6281: PUSH
6282: LD_VAR 0 2
6286: ARRAY
6287: IFFALSE 6420
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6289: LD_EXP 19
6293: PUSH
6294: LD_EXP 7
6298: PUSH
6299: LD_VAR 0 2
6303: ARRAY
6304: ARRAY
6305: PPUSH
6306: LD_INT 5
6308: PPUSH
6309: CALL_OW 424
// for j := 1 to 8 do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_INT 8
6325: PUSH
6326: FOR_TO
6327: IFFALSE 6418
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6329: LD_EXP 7
6333: PUSH
6334: LD_VAR 0 3
6338: ARRAY
6339: IFFALSE 6388
6341: PUSH
6342: LD_EXP 8
6346: PUSH
6347: LD_VAR 0 2
6351: ARRAY
6352: PUSH
6353: LD_EXP 8
6357: PUSH
6358: LD_VAR 0 3
6362: ARRAY
6363: NONEQUAL
6364: IFTRUE 6387
6366: PUSH
6367: LD_EXP 11
6371: NOT
6372: IFFALSE 6386
6374: PUSH
6375: LD_VAR 0 2
6379: PUSH
6380: LD_VAR 0 3
6384: NONEQUAL
6385: AND
6386: OR
6387: AND
6388: IFFALSE 6416
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6390: LD_VAR 0 3
6394: PPUSH
6395: LD_EXP 19
6399: PUSH
6400: LD_EXP 7
6404: PUSH
6405: LD_VAR 0 2
6409: ARRAY
6410: ARRAY
6411: PPUSH
6412: CALL_OW 333
6416: GO 6326
6418: POP
6419: POP
// end ;
6420: GO 6274
6422: POP
6423: POP
// end ;
6424: LD_VAR 0 1
6428: RET
// function EndBuildUp ; var i , j ; begin
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
6433: PPUSH
// mpBuildUpTimeActive := false ;
6434: LD_ADDR_EXP 47
6438: PUSH
6439: LD_INT 0
6441: ST_TO_ADDR
// for i := 1 to 8 do
6442: LD_ADDR_VAR 0 2
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 8
6454: PUSH
6455: FOR_TO
6456: IFFALSE 6603
// if mpSidePositions [ i ] then
6458: LD_EXP 7
6462: PUSH
6463: LD_VAR 0 2
6467: ARRAY
6468: IFFALSE 6601
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6470: LD_EXP 19
6474: PUSH
6475: LD_EXP 7
6479: PUSH
6480: LD_VAR 0 2
6484: ARRAY
6485: ARRAY
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 424
// for j := 1 to 8 do
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_INT 8
6506: PUSH
6507: FOR_TO
6508: IFFALSE 6599
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6510: LD_EXP 7
6514: PUSH
6515: LD_VAR 0 3
6519: ARRAY
6520: IFFALSE 6569
6522: PUSH
6523: LD_EXP 8
6527: PUSH
6528: LD_VAR 0 2
6532: ARRAY
6533: PUSH
6534: LD_EXP 8
6538: PUSH
6539: LD_VAR 0 3
6543: ARRAY
6544: NONEQUAL
6545: IFTRUE 6568
6547: PUSH
6548: LD_EXP 11
6552: NOT
6553: IFFALSE 6567
6555: PUSH
6556: LD_VAR 0 2
6560: PUSH
6561: LD_VAR 0 3
6565: NONEQUAL
6566: AND
6567: OR
6568: AND
6569: IFFALSE 6597
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6571: LD_VAR 0 3
6575: PPUSH
6576: LD_EXP 19
6580: PUSH
6581: LD_EXP 7
6585: PUSH
6586: LD_VAR 0 2
6590: ARRAY
6591: ARRAY
6592: PPUSH
6593: CALL_OW 334
6597: GO 6507
6599: POP
6600: POP
// end ;
6601: GO 6455
6603: POP
6604: POP
// end ;
6605: LD_VAR 0 1
6609: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6610: LD_EXP 47
6614: IFFALSE 6793
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin for i := 1 to 8 do
6623: LD_ADDR_VAR 0 1
6627: PUSH
6628: DOUBLE
6629: LD_INT 1
6631: DEC
6632: ST_TO_ADDR
6633: LD_INT 8
6635: PUSH
6636: FOR_TO
6637: IFFALSE 6790
// if mpSidePositions [ i ] then
6639: LD_EXP 7
6643: PUSH
6644: LD_VAR 0 1
6648: ARRAY
6649: IFFALSE 6788
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6651: LD_ADDR_VAR 0 2
6655: PUSH
6656: LD_EXP 19
6660: PUSH
6661: LD_EXP 7
6665: PUSH
6666: LD_VAR 0 1
6670: ARRAY
6671: ARRAY
6672: PPUSH
6673: LD_INT 2
6675: PUSH
6676: LD_INT 21
6678: PUSH
6679: LD_INT 1
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 21
6688: PUSH
6689: LD_INT 2
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 22
6703: PUSH
6704: LD_OWVAR 2
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PPUSH
6717: CALL_OW 70
6721: PUSH
6722: FOR_IN
6723: IFFALSE 6786
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6725: LD_EXP 8
6729: PUSH
6730: LD_VAR 0 1
6734: ARRAY
6735: PUSH
6736: LD_EXP 8
6740: PUSH
6741: LD_OWVAR 2
6745: ARRAY
6746: NONEQUAL
6747: IFTRUE 6770
6749: PUSH
6750: LD_EXP 11
6754: NOT
6755: IFFALSE 6769
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: LD_OWVAR 2
6767: NONEQUAL
6768: AND
6769: OR
6770: IFFALSE 6784
// ComMoveToArea ( un , BuildUpEscape ) ;
6772: LD_VAR 0 2
6776: PPUSH
6777: LD_INT 15
6779: PPUSH
6780: CALL_OW 113
6784: GO 6722
6786: POP
6787: POP
6788: GO 6636
6790: POP
6791: POP
// enable ;
6792: ENABLE
// end ;
6793: PPOPN 2
6795: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6796: LD_EXP 20
6800: IFFALSE 6850
6802: GO 6804
6804: DISABLE
6805: LD_INT 0
6807: PPUSH
// begin tmp := mpBuildUpTime ;
6808: LD_ADDR_VAR 0 1
6812: PUSH
6813: LD_EXP 20
6817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6818: LD_INT 35
6820: PPUSH
6821: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6825: LD_ADDR_VAR 0 1
6829: PUSH
6830: LD_VAR 0 1
6834: PUSH
6835: LD_INT 35
6837: MINUS
6838: ST_TO_ADDR
// until not tmp ;
6839: LD_VAR 0 1
6843: NOT
6844: IFFALSE 6818
// EndBuildUp ;
6846: CALL 6429 0 0
// end ;
6850: PPOPN 1
6852: END
// every 0 0$1 trigger mpActive marked mpWin do
6853: LD_INT 100
6855: IFFALSE 6889
6857: GO 6859
6859: DISABLE
// begin if IAmServer then
6860: CALL_OW 518
6864: IFFALSE 6873
// wait ( 0 0$3 ) ;
6866: LD_INT 105
6868: PPUSH
6869: CALL_OW 67
// if Multiplayer then
6873: LD_OWVAR 4
6877: IFFALSE 6885
// YouWinInMultiplayer else
6879: CALL_OW 106
6883: GO 6889
// YouWin ;
6885: CALL_OW 103
// end ;
6889: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6890: LD_INT 0
6892: PPUSH
// result := false ;
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_INT 0
6900: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6901: LD_VAR 0 1
6905: PUSH
6906: LD_INT 1
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6920
6912: LD_INT 5
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6993
6920: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6921: LD_ADDR_VAR 0 3
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_VAR 0 2
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: LD_INT 21
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 33
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 33
6963: PUSH
6964: LD_INT 5
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 69
6985: PPUSH
6986: CALL 12232 0 1
6990: ST_TO_ADDR
// end ; GameTypeSurvival :
6991: GO 7232
6993: LD_INT 2
6995: DOUBLE
6996: EQUAL
6997: IFTRUE 7001
6999: GO 7131
7001: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7002: LD_ADDR_VAR 0 3
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_VAR 0 2
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 2
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 0
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: PPUSH
7056: CALL 12232 0 1
7060: IFFALSE 7128
7062: PUSH
7063: LD_INT 22
7065: PUSH
7066: LD_VAR 0 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 2
7077: PUSH
7078: LD_INT 21
7080: PUSH
7081: LD_INT 1
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 33
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 33
7100: PUSH
7101: LD_INT 5
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 69
7122: PPUSH
7123: CALL 12232 0 1
7127: AND
7128: ST_TO_ADDR
// end ; GameTypeKing :
7129: GO 7232
7131: LD_INT 3
7133: DOUBLE
7134: EQUAL
7135: IFTRUE 7139
7137: GO 7231
7139: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7140: LD_ADDR_VAR 0 3
7144: PUSH
7145: LD_INT 22
7147: PUSH
7148: LD_VAR 0 2
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 33
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 33
7182: PUSH
7183: LD_INT 5
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PPUSH
7200: CALL_OW 69
7204: PPUSH
7205: CALL 12232 0 1
7209: IFFALSE 7228
7211: PUSH
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL 60128 0 1
7221: PUSH
7222: LD_EXP 35
7226: LESS
7227: AND
7228: ST_TO_ADDR
// end ; end ;
7229: GO 7232
7231: POP
// end ;
7232: LD_VAR 0 3
7236: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7237: LD_INT 100
7239: IFFALSE 7469
7241: GO 7243
7243: DISABLE
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
// begin if Multiplayer then
7248: LD_OWVAR 4
7252: IFFALSE 7260
// SetPlayerSpectator ( ) else
7254: CALL_OW 572
7258: GO 7269
// FogOff ( your_side ) ;
7260: LD_OWVAR 2
7264: PPUSH
7265: CALL_OW 344
// repeat gameIsOn := false ;
7269: LD_ADDR_VAR 0 1
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// for i := 1 to 8 do
7277: LD_ADDR_VAR 0 2
7281: PUSH
7282: DOUBLE
7283: LD_INT 1
7285: DEC
7286: ST_TO_ADDR
7287: LD_INT 8
7289: PUSH
7290: FOR_TO
7291: IFFALSE 7421
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7293: LD_EXP 7
7297: PUSH
7298: LD_VAR 0 2
7302: ARRAY
7303: IFFALSE 7316
7305: PUSH
7306: LD_VAR 0 2
7310: PPUSH
7311: CALL_OW 108
7315: AND
7316: IFFALSE 7330
7318: PUSH
7319: LD_VAR 0 2
7323: PUSH
7324: LD_OWVAR 2
7328: NONEQUAL
7329: AND
7330: IFFALSE 7419
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7332: LD_EXP 8
7336: PUSH
7337: LD_VAR 0 2
7341: ARRAY
7342: NOT
7343: IFTRUE 7391
7345: PUSH
7346: LD_EXP 8
7350: PUSH
7351: LD_VAR 0 2
7355: ARRAY
7356: PUSH
7357: LD_EXP 8
7361: PUSH
7362: LD_OWVAR 2
7366: ARRAY
7367: NONEQUAL
7368: IFFALSE 7390
7370: PUSH
7371: LD_OWVAR 2
7375: PPUSH
7376: LD_VAR 0 2
7380: PPUSH
7381: CALL_OW 81
7385: PUSH
7386: LD_INT 1
7388: NONEQUAL
7389: AND
7390: OR
7391: IFFALSE 7419
// if HasPowerByGameType ( mpGameType , i ) then
7393: LD_EXP 3
7397: PPUSH
7398: LD_VAR 0 2
7402: PPUSH
7403: CALL 6890 0 2
7407: IFFALSE 7419
// begin gameIsOn := true ;
7409: LD_ADDR_VAR 0 1
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// break ;
7417: GO 7421
// end ;
7419: GO 7290
7421: POP
7422: POP
// wait ( 100 ) ;
7423: LD_INT 100
7425: PPUSH
7426: CALL_OW 67
// until not gameIsOn ;
7430: LD_VAR 0 1
7434: NOT
7435: IFFALSE 7269
// if IAmServer then
7437: CALL_OW 518
7441: IFFALSE 7450
// wait ( 0 0$3 ) ;
7443: LD_INT 105
7445: PPUSH
7446: CALL_OW 67
// if Multiplayer then
7450: LD_OWVAR 4
7454: IFFALSE 7462
// YouLostInMultiplayer else
7456: CALL_OW 107
7460: GO 7469
// YouLost (  ) ;
7462: LD_STRING 
7464: PPUSH
7465: CALL_OW 104
// end ;
7469: PPOPN 2
7471: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7472: LD_EXP 33
7476: IFFALSE 7860
7478: GO 7480
7480: DISABLE
7481: LD_INT 0
7483: PPUSH
7484: PPUSH
7485: PPUSH
7486: PPUSH
7487: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7488: LD_ADDR_VAR 0 5
7492: PUSH
7493: LD_INT 1
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: LD_INT 4
7504: PUSH
7505: LD_INT 5
7507: PUSH
7508: LD_INT 6
7510: PUSH
7511: LD_INT 7
7513: PUSH
7514: LD_INT 8
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7527: LD_INT 350
7529: PPUSH
7530: CALL_OW 67
// for i := 1 to 8 do
7534: LD_ADDR_VAR 0 1
7538: PUSH
7539: DOUBLE
7540: LD_INT 1
7542: DEC
7543: ST_TO_ADDR
7544: LD_INT 8
7546: PUSH
7547: FOR_TO
7548: IFFALSE 7830
// begin j := sides [ i ] ;
7550: LD_ADDR_VAR 0 2
7554: PUSH
7555: LD_VAR 0 5
7559: PUSH
7560: LD_VAR 0 1
7564: ARRAY
7565: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7566: LD_EXP 40
7570: PUSH
7571: LD_VAR 0 2
7575: ARRAY
7576: PPUSH
7577: CALL 12232 0 1
7581: IFFALSE 7594
7583: PUSH
7584: LD_VAR 0 2
7588: PPUSH
7589: CALL_OW 108
7593: AND
7594: IFFALSE 7612
7596: PUSH
7597: LD_EXP 3
7601: PPUSH
7602: LD_VAR 0 2
7606: PPUSH
7607: CALL 6890 0 2
7611: AND
7612: IFFALSE 7828
// begin wait ( mpRespawn div 3 ) ;
7614: LD_EXP 33
7618: PUSH
7619: LD_INT 3
7621: DIV
7622: PPUSH
7623: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7627: LD_ADDR_VAR 0 3
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_VAR 0 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 50
7646: PUSH
7647: EMPTY
7648: LIST
7649: PUSH
7650: LD_INT 2
7652: PUSH
7653: LD_INT 30
7655: PUSH
7656: LD_INT 0
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 30
7665: PUSH
7666: LD_INT 1
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 69
7687: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7688: LD_VAR 0 3
7692: NOT
7693: IFTRUE 7707
7695: PUSH
7696: LD_VAR 0 2
7700: PPUSH
7701: CALL_OW 108
7705: NOT
7706: OR
7707: IFTRUE 7726
7709: PUSH
7710: LD_EXP 3
7714: PPUSH
7715: LD_VAR 0 2
7719: PPUSH
7720: CALL 6890 0 2
7724: NOT
7725: OR
7726: IFFALSE 7730
// continue ;
7728: GO 7547
// spawn := tmp [ 1 ] ;
7730: LD_ADDR_VAR 0 4
7734: PUSH
7735: LD_VAR 0 3
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7744: LD_EXP 40
7748: PUSH
7749: LD_VAR 0 2
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_VAR 0 4
7763: PPUSH
7764: CALL_OW 250
7768: PPUSH
7769: LD_VAR 0 4
7773: PPUSH
7774: CALL_OW 251
7778: PPUSH
7779: LD_INT 32
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7789: LD_ADDR_EXP 40
7793: PUSH
7794: LD_EXP 40
7798: PPUSH
7799: LD_VAR 0 2
7803: PPUSH
7804: LD_EXP 40
7808: PUSH
7809: LD_VAR 0 2
7813: ARRAY
7814: PPUSH
7815: LD_INT 1
7817: PPUSH
7818: CALL_OW 3
7822: PPUSH
7823: CALL_OW 1
7827: ST_TO_ADDR
// end ; end ;
7828: GO 7547
7830: POP
7831: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7832: LD_ADDR_VAR 0 5
7836: PUSH
7837: LD_VAR 0 5
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: LD_INT 8
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: CALL 14524 0 4
7855: ST_TO_ADDR
// until false ;
7856: LD_INT 0
7858: IFFALSE 7527
// end ;
7860: PPOPN 5
7862: END
// every 0 0$1 marked mpActive do
7863: GO 7865
7865: DISABLE
// begin enable ;
7866: ENABLE
// if not mpDisplayStrings then
7867: LD_EXP 38
7871: NOT
7872: IFFALSE 7883
// begin display_strings := [ ] ;
7874: LD_ADDR_OWVAR 47
7878: PUSH
7879: EMPTY
7880: ST_TO_ADDR
// exit ;
7881: GO 7893
// end ; display_strings := mpDisplayStrings ;
7883: LD_ADDR_OWVAR 47
7887: PUSH
7888: LD_EXP 38
7892: ST_TO_ADDR
// end ; end_of_file
7893: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7894: LD_INT 0
7896: PPUSH
7897: PPUSH
7898: PPUSH
7899: PPUSH
7900: PPUSH
7901: PPUSH
7902: PPUSH
7903: PPUSH
7904: PPUSH
// if GetType ( un ) = unit_vehicle then
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 247
7914: PUSH
7915: LD_INT 2
7917: EQUAL
7918: IFFALSE 7922
// exit ;
7920: GO 8560
// side := GetSide ( un ) ;
7922: LD_ADDR_VAR 0 9
7926: PUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 255
7936: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7937: LD_EXP 3
7941: PUSH
7942: LD_INT 2
7944: EQUAL
7945: IFFALSE 8021
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7947: LD_VAR 0 1
7951: PPUSH
7952: CALL_OW 266
7956: PUSH
7957: LD_INT 0
7959: PUSH
7960: LD_INT 1
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: IN
7967: IFFALSE 8021
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7969: LD_ADDR_VAR 0 3
7973: PUSH
7974: LD_INT 22
7976: PUSH
7977: LD_VAR 0 9
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 21
7988: PUSH
7989: LD_INT 1
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PPUSH
8000: CALL_OW 69
8004: PUSH
8005: FOR_IN
8006: IFFALSE 8019
// KillUnit ( i ) ;
8008: LD_VAR 0 3
8012: PPUSH
8013: CALL_OW 66
8017: GO 8005
8019: POP
8020: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8021: LD_VAR 0 1
8025: PPUSH
8026: CALL_OW 257
8030: PUSH
8031: LD_INT 12
8033: PUSH
8034: LD_INT 17
8036: PUSH
8037: LD_INT 15
8039: PUSH
8040: LD_INT 16
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: IN
8049: IFTRUE 8066
8051: PUSH
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL_OW 263
8061: PUSH
8062: LD_INT 5
8064: EQUAL
8065: OR
8066: IFFALSE 8285
// begin tag := 0 ;
8068: LD_ADDR_VAR 0 5
8072: PUSH
8073: LD_INT 0
8075: ST_TO_ADDR
// for i := 1 to 8 do
8076: LD_ADDR_VAR 0 3
8080: PUSH
8081: DOUBLE
8082: LD_INT 1
8084: DEC
8085: ST_TO_ADDR
8086: LD_INT 8
8088: PUSH
8089: FOR_TO
8090: IFFALSE 8124
// if un in mpApePosIndex [ i ] then
8092: LD_VAR 0 1
8096: PUSH
8097: LD_EXP 32
8101: PUSH
8102: LD_VAR 0 3
8106: ARRAY
8107: IN
8108: IFFALSE 8122
// begin tag := i ;
8110: LD_ADDR_VAR 0 5
8114: PUSH
8115: LD_VAR 0 3
8119: ST_TO_ADDR
// break ;
8120: GO 8124
// end ;
8122: GO 8089
8124: POP
8125: POP
// if not tag then
8126: LD_VAR 0 5
8130: NOT
8131: IFFALSE 8135
// exit ;
8133: GO 8560
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8135: LD_ADDR_VAR 0 7
8139: PUSH
8140: LD_EXP 31
8144: PUSH
8145: LD_EXP 7
8149: PUSH
8150: LD_VAR 0 5
8154: ARRAY
8155: ARRAY
8156: ST_TO_ADDR
// if not area then
8157: LD_VAR 0 7
8161: NOT
8162: IFFALSE 8166
// exit ;
8164: GO 8560
// wait ( 4 4$00 ) ;
8166: LD_INT 8400
8168: PPUSH
8169: CALL_OW 67
// repeat wait ( 10 ) ;
8173: LD_INT 10
8175: PPUSH
8176: CALL_OW 67
// until not mpBlockRespThread ;
8180: LD_EXP 45
8184: NOT
8185: IFFALSE 8173
// mpBlockRespThread := true ;
8187: LD_ADDR_EXP 45
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8195: LD_INT 0
8197: PPUSH
8198: CALL 44291 0 1
// ape := CreateHuman ;
8202: LD_ADDR_VAR 0 4
8206: PUSH
8207: CALL_OW 44
8211: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8212: LD_ADDR_EXP 32
8216: PUSH
8217: LD_EXP 32
8221: PPUSH
8222: LD_VAR 0 5
8226: PPUSH
8227: LD_EXP 32
8231: PUSH
8232: LD_VAR 0 5
8236: ARRAY
8237: PPUSH
8238: LD_VAR 0 4
8242: PPUSH
8243: CALL 48164 0 2
8247: PPUSH
8248: CALL_OW 1
8252: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8253: LD_VAR 0 4
8257: PPUSH
8258: LD_VAR 0 7
8262: PPUSH
8263: LD_INT 0
8265: PPUSH
8266: CALL_OW 49
// wait ( 10 ) ;
8270: LD_INT 10
8272: PPUSH
8273: CALL_OW 67
// mpBlockRespThread := false ;
8277: LD_ADDR_EXP 45
8281: PUSH
8282: LD_INT 0
8284: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8285: LD_VAR 0 1
8289: PPUSH
8290: CALL_OW 247
8294: PUSH
8295: LD_INT 1
8297: EQUAL
8298: IFFALSE 8315
8300: PUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL_OW 248
8310: PUSH
8311: LD_INT 0
8313: GREATER
8314: AND
8315: IFFALSE 8560
// begin if not mpRespawn then
8317: LD_EXP 33
8321: NOT
8322: IFFALSE 8326
// exit ;
8324: GO 8560
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8326: LD_VAR 0 9
8330: PPUSH
8331: CALL_OW 108
8335: NOT
8336: IFFALSE 8355
8338: PUSH
8339: LD_EXP 3
8343: PPUSH
8344: LD_VAR 0 9
8348: PPUSH
8349: CALL 6890 0 2
8353: NOT
8354: AND
8355: IFFALSE 8359
// exit ;
8357: GO 8560
// side := GetSide ( un ) ;
8359: LD_ADDR_VAR 0 9
8363: PUSH
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 255
8373: ST_TO_ADDR
// nation := GetNation ( un ) ;
8374: LD_ADDR_VAR 0 8
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 248
8388: ST_TO_ADDR
// class := GetClass ( un ) ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_VAR 0 1
8398: PPUSH
8399: CALL_OW 257
8403: ST_TO_ADDR
// if class > 4 then
8404: LD_VAR 0 6
8408: PUSH
8409: LD_INT 4
8411: GREATER
8412: IFFALSE 8422
// class := 1 ;
8414: LD_ADDR_VAR 0 6
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// repeat wait ( 10 ) ;
8422: LD_INT 10
8424: PPUSH
8425: CALL_OW 67
// until not mpBlockRespThread ;
8429: LD_EXP 45
8433: NOT
8434: IFFALSE 8422
// mpBlockRespThread := true ;
8436: LD_ADDR_EXP 45
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// uc_side := side ;
8444: LD_ADDR_OWVAR 20
8448: PUSH
8449: LD_VAR 0 9
8453: ST_TO_ADDR
// uc_nation := nation ;
8454: LD_ADDR_OWVAR 21
8458: PUSH
8459: LD_VAR 0 8
8463: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8464: LD_INT 0
8466: PPUSH
8467: LD_VAR 0 6
8471: PPUSH
8472: LD_INT 2
8474: PPUSH
8475: CALL_OW 380
// un := CreateHuman ;
8479: LD_ADDR_VAR 0 1
8483: PUSH
8484: CALL_OW 44
8488: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8489: LD_ADDR_EXP 40
8493: PUSH
8494: LD_EXP 40
8498: PPUSH
8499: LD_VAR 0 9
8503: PPUSH
8504: LD_EXP 40
8508: PUSH
8509: LD_VAR 0 9
8513: ARRAY
8514: PPUSH
8515: LD_EXP 40
8519: PUSH
8520: LD_VAR 0 9
8524: ARRAY
8525: PUSH
8526: LD_INT 1
8528: PLUS
8529: PPUSH
8530: LD_VAR 0 1
8534: PPUSH
8535: CALL_OW 1
8539: PPUSH
8540: CALL_OW 1
8544: ST_TO_ADDR
// wait ( 10 ) ;
8545: LD_INT 10
8547: PPUSH
8548: CALL_OW 67
// mpBlockRespThread := false ;
8552: LD_ADDR_EXP 45
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// end ; end ;
8560: LD_VAR 0 2
8564: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8565: LD_INT 0
8567: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 266
8577: PUSH
8578: LD_INT 0
8580: PUSH
8581: LD_INT 1
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: IN
8588: IFFALSE 8613
// SetBName ( building , @ & GetSide ( building ) ) ;
8590: LD_VAR 0 1
8594: PPUSH
8595: LD_STRING @
8597: PUSH
8598: LD_VAR 0 1
8602: PPUSH
8603: CALL_OW 255
8607: STR
8608: PPUSH
8609: CALL_OW 500
// end ;
8613: LD_VAR 0 2
8617: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8618: LD_INT 0
8620: PPUSH
8621: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8622: LD_EXP 3
8626: PUSH
8627: LD_INT 2
8629: EQUAL
8630: IFFALSE 8654
8632: PUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 266
8642: PUSH
8643: LD_INT 0
8645: PUSH
8646: LD_INT 1
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: IN
8653: AND
8654: IFFALSE 8733
// begin SetSide ( building , oldSide ) ;
8656: LD_VAR 0 1
8660: PPUSH
8661: LD_VAR 0 2
8665: PPUSH
8666: CALL_OW 235
// KillUnit ( building ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8679: LD_ADDR_VAR 0 5
8683: PUSH
8684: LD_INT 22
8686: PUSH
8687: LD_VAR 0 2
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 21
8698: PUSH
8699: LD_INT 1
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: PUSH
8715: FOR_IN
8716: IFFALSE 8729
// KillUnit ( i ) ;
8718: LD_VAR 0 5
8722: PPUSH
8723: CALL_OW 66
8727: GO 8715
8729: POP
8730: POP
// exit ;
8731: GO 8778
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8733: LD_VAR 0 1
8737: PPUSH
8738: CALL_OW 266
8742: PUSH
8743: LD_INT 0
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: IN
8753: IFFALSE 8778
// SetBName ( building , @ & GetSide ( building ) ) ;
8755: LD_VAR 0 1
8759: PPUSH
8760: LD_STRING @
8762: PUSH
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 255
8772: STR
8773: PPUSH
8774: CALL_OW 500
// end ;
8778: LD_VAR 0 4
8782: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8783: LD_INT 0
8785: PPUSH
8786: PPUSH
8787: PPUSH
// if mpGameType <> GameTypeFamine then
8788: LD_EXP 3
8792: PUSH
8793: LD_INT 5
8795: NONEQUAL
8796: IFFALSE 8800
// exit ;
8798: GO 9014
// for i := 1 to mpGlobalOilDeposits do
8800: LD_ADDR_VAR 0 6
8804: PUSH
8805: DOUBLE
8806: LD_INT 1
8808: DEC
8809: ST_TO_ADDR
8810: LD_EXP 41
8814: PUSH
8815: FOR_TO
8816: IFFALSE 9012
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8818: LD_EXP 41
8822: PUSH
8823: LD_VAR 0 6
8827: ARRAY
8828: PUSH
8829: LD_INT 1
8831: ARRAY
8832: PPUSH
8833: LD_EXP 41
8837: PUSH
8838: LD_VAR 0 6
8842: ARRAY
8843: PUSH
8844: LD_INT 2
8846: ARRAY
8847: PPUSH
8848: CALL_OW 428
8852: PUSH
8853: LD_VAR 0 1
8857: EQUAL
8858: IFFALSE 9010
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_EXP 41
8869: PUSH
8870: LD_VAR 0 6
8874: ARRAY
8875: PUSH
8876: LD_INT 3
8878: ARRAY
8879: ST_TO_ADDR
// value := Dec ( value ) ;
8880: LD_ADDR_VAR 0 7
8884: PUSH
8885: LD_VAR 0 7
8889: PPUSH
8890: CALL 49559 0 1
8894: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8895: LD_ADDR_EXP 41
8899: PUSH
8900: LD_EXP 41
8904: PPUSH
8905: LD_VAR 0 6
8909: PPUSH
8910: LD_EXP 41
8914: PUSH
8915: LD_VAR 0 6
8919: ARRAY
8920: PPUSH
8921: LD_INT 3
8923: PPUSH
8924: LD_VAR 0 7
8928: PPUSH
8929: CALL_OW 1
8933: PPUSH
8934: CALL_OW 1
8938: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8939: LD_VAR 0 1
8943: PPUSH
8944: LD_VAR 0 7
8948: PPUSH
8949: CALL_OW 505
// if value = 0 then
8953: LD_VAR 0 7
8957: PUSH
8958: LD_INT 0
8960: EQUAL
8961: IFFALSE 9010
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8963: LD_EXP 41
8967: PUSH
8968: LD_VAR 0 6
8972: ARRAY
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: LD_EXP 41
8982: PUSH
8983: LD_VAR 0 6
8987: ARRAY
8988: PUSH
8989: LD_INT 2
8991: ARRAY
8992: PPUSH
8993: CALL_OW 63
// KillUnit ( building ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: CALL_OW 66
// exit ;
9006: POP
9007: POP
9008: GO 9014
// end ; end ; end ;
9010: GO 8815
9012: POP
9013: POP
// end ;
9014: LD_VAR 0 5
9018: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9019: LD_INT 0
9021: PPUSH
9022: PPUSH
9023: PPUSH
// if mpGameType <> GameTypeFamine then
9024: LD_EXP 3
9028: PUSH
9029: LD_INT 5
9031: NONEQUAL
9032: IFFALSE 9036
// exit ;
9034: GO 9250
// for i := 1 to mpGlobalSibDeposits do
9036: LD_ADDR_VAR 0 6
9040: PUSH
9041: DOUBLE
9042: LD_INT 1
9044: DEC
9045: ST_TO_ADDR
9046: LD_EXP 42
9050: PUSH
9051: FOR_TO
9052: IFFALSE 9248
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9054: LD_EXP 42
9058: PUSH
9059: LD_VAR 0 6
9063: ARRAY
9064: PUSH
9065: LD_INT 1
9067: ARRAY
9068: PPUSH
9069: LD_EXP 42
9073: PUSH
9074: LD_VAR 0 6
9078: ARRAY
9079: PUSH
9080: LD_INT 2
9082: ARRAY
9083: PPUSH
9084: CALL_OW 428
9088: PUSH
9089: LD_VAR 0 1
9093: EQUAL
9094: IFFALSE 9246
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: LD_EXP 42
9105: PUSH
9106: LD_VAR 0 6
9110: ARRAY
9111: PUSH
9112: LD_INT 3
9114: ARRAY
9115: ST_TO_ADDR
// value := Dec ( value ) ;
9116: LD_ADDR_VAR 0 7
9120: PUSH
9121: LD_VAR 0 7
9125: PPUSH
9126: CALL 49559 0 1
9130: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9131: LD_ADDR_EXP 42
9135: PUSH
9136: LD_EXP 42
9140: PPUSH
9141: LD_VAR 0 6
9145: PPUSH
9146: LD_EXP 42
9150: PUSH
9151: LD_VAR 0 6
9155: ARRAY
9156: PPUSH
9157: LD_INT 3
9159: PPUSH
9160: LD_VAR 0 7
9164: PPUSH
9165: CALL_OW 1
9169: PPUSH
9170: CALL_OW 1
9174: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9175: LD_VAR 0 1
9179: PPUSH
9180: LD_VAR 0 7
9184: PPUSH
9185: CALL_OW 505
// if value = 0 then
9189: LD_VAR 0 7
9193: PUSH
9194: LD_INT 0
9196: EQUAL
9197: IFFALSE 9246
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9199: LD_EXP 42
9203: PUSH
9204: LD_VAR 0 6
9208: ARRAY
9209: PUSH
9210: LD_INT 1
9212: ARRAY
9213: PPUSH
9214: LD_EXP 42
9218: PUSH
9219: LD_VAR 0 6
9223: ARRAY
9224: PUSH
9225: LD_INT 2
9227: ARRAY
9228: PPUSH
9229: CALL_OW 63
// KillUnit ( building ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: CALL_OW 66
// exit ;
9242: POP
9243: POP
9244: GO 9250
// end ; end ; end ;
9246: GO 9051
9248: POP
9249: POP
// end ; end_of_file
9250: LD_VAR 0 5
9254: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9255: LD_EXP 39
9259: IFFALSE 9267
9261: PUSH
9262: CALL 9477 0 0
9266: AND
9267: IFFALSE 9275
9269: PUSH
9270: LD_OWVAR 4
9274: AND
9275: IFFALSE 9474
9277: GO 9279
9279: DISABLE
9280: LD_INT 0
9282: PPUSH
9283: PPUSH
// begin canWin := false ;
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: LD_INT 0
9291: ST_TO_ADDR
// if not HasPower ( your_side ) then
9292: LD_OWVAR 2
9296: PPUSH
9297: CALL 9519 0 1
9301: NOT
9302: IFFALSE 9313
// begin Multiplayer_Loose_Message ;
9304: CALL_OW 521
// enable ( mpLose ) ;
9308: LD_INT 102
9310: ENABLE_MARKED
// end else
9311: GO 9474
// begin canWin := true ;
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 1
9320: ST_TO_ADDR
// for i := 1 to 8 do
9321: LD_ADDR_VAR 0 1
9325: PUSH
9326: DOUBLE
9327: LD_INT 1
9329: DEC
9330: ST_TO_ADDR
9331: LD_INT 8
9333: PUSH
9334: FOR_TO
9335: IFFALSE 9460
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9337: LD_EXP 7
9341: PUSH
9342: LD_VAR 0 1
9346: ARRAY
9347: IFFALSE 9360
9349: PUSH
9350: LD_VAR 0 1
9354: PPUSH
9355: CALL_OW 108
9359: AND
9360: IFFALSE 9374
9362: PUSH
9363: LD_VAR 0 1
9367: PUSH
9368: LD_OWVAR 2
9372: NONEQUAL
9373: AND
9374: IFFALSE 9458
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9376: LD_EXP 8
9380: PUSH
9381: LD_VAR 0 1
9385: ARRAY
9386: NOT
9387: IFTRUE 9435
9389: PUSH
9390: LD_EXP 8
9394: PUSH
9395: LD_VAR 0 1
9399: ARRAY
9400: PUSH
9401: LD_EXP 8
9405: PUSH
9406: LD_OWVAR 2
9410: ARRAY
9411: NONEQUAL
9412: IFFALSE 9434
9414: PUSH
9415: LD_OWVAR 2
9419: PPUSH
9420: LD_VAR 0 1
9424: PPUSH
9425: CALL_OW 81
9429: PUSH
9430: LD_INT 1
9432: NONEQUAL
9433: AND
9434: OR
9435: IFFALSE 9458
// if HasPower ( i ) then
9437: LD_VAR 0 1
9441: PPUSH
9442: CALL 9519 0 1
9446: IFFALSE 9458
// begin canWin := false ;
9448: LD_ADDR_VAR 0 2
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// break ;
9456: GO 9460
// end ;
9458: GO 9334
9460: POP
9461: POP
// if canWin then
9462: LD_VAR 0 2
9466: IFFALSE 9473
// enable ( mpWin ) else
9468: LD_INT 101
9470: ENABLE_MARKED
9471: GO 9474
// enable ;
9473: ENABLE
// end ; end ;
9474: PPOPN 2
9476: END
// function CanWinLoose ; begin
9477: LD_INT 0
9479: PPUSH
// result := true ;
9480: LD_ADDR_VAR 0 1
9484: PUSH
9485: LD_INT 1
9487: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9488: CALL_OW 531
9492: IFFALSE 9504
9494: PUSH
9495: CALL_OW 519
9499: PUSH
9500: LD_INT 1
9502: GREATER
9503: AND
9504: IFFALSE 9514
// result := false ;
9506: LD_ADDR_VAR 0 1
9510: PUSH
9511: LD_INT 0
9513: ST_TO_ADDR
// end ;
9514: LD_VAR 0 1
9518: RET
// function HasPower ( i ) ; begin
9519: LD_INT 0
9521: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_INT 22
9529: PUSH
9530: LD_VAR 0 1
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 33
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 33
9564: PUSH
9565: LD_INT 5
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: ST_TO_ADDR
// end ; end_of_file
9587: LD_VAR 0 2
9591: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9592: LD_EXP 39
9596: IFFALSE 9639
9598: GO 9600
9600: DISABLE
9601: LD_INT 0
9603: PPUSH
// begin for i := 1 to 8 do
9604: LD_ADDR_VAR 0 1
9608: PUSH
9609: DOUBLE
9610: LD_INT 1
9612: DEC
9613: ST_TO_ADDR
9614: LD_INT 8
9616: PUSH
9617: FOR_TO
9618: IFFALSE 9637
// SetRestrict ( b_depot , i , state_disabled ) ;
9620: LD_INT 0
9622: PPUSH
9623: LD_VAR 0 1
9627: PPUSH
9628: LD_INT 0
9630: PPUSH
9631: CALL_OW 324
9635: GO 9617
9637: POP
9638: POP
// end ;
9639: PPOPN 1
9641: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9642: LD_EXP 39
9646: IFFALSE 9654
9648: PUSH
9649: CALL 9864 0 0
9653: AND
9654: IFFALSE 9662
9656: PUSH
9657: LD_OWVAR 4
9661: AND
9662: IFFALSE 9861
9664: GO 9666
9666: DISABLE
9667: LD_INT 0
9669: PPUSH
9670: PPUSH
// begin canWin := false ;
9671: LD_ADDR_VAR 0 2
9675: PUSH
9676: LD_INT 0
9678: ST_TO_ADDR
// if not HasPower ( your_side ) then
9679: LD_OWVAR 2
9683: PPUSH
9684: CALL 9906 0 1
9688: NOT
9689: IFFALSE 9700
// begin Multiplayer_Loose_Message ;
9691: CALL_OW 521
// enable ( mpLose ) ;
9695: LD_INT 102
9697: ENABLE_MARKED
// end else
9698: GO 9861
// begin canWin := true ;
9700: LD_ADDR_VAR 0 2
9704: PUSH
9705: LD_INT 1
9707: ST_TO_ADDR
// for i := 1 to 8 do
9708: LD_ADDR_VAR 0 1
9712: PUSH
9713: DOUBLE
9714: LD_INT 1
9716: DEC
9717: ST_TO_ADDR
9718: LD_INT 8
9720: PUSH
9721: FOR_TO
9722: IFFALSE 9847
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9724: LD_EXP 7
9728: PUSH
9729: LD_VAR 0 1
9733: ARRAY
9734: IFFALSE 9747
9736: PUSH
9737: LD_VAR 0 1
9741: PPUSH
9742: CALL_OW 108
9746: AND
9747: IFFALSE 9761
9749: PUSH
9750: LD_VAR 0 1
9754: PUSH
9755: LD_OWVAR 2
9759: NONEQUAL
9760: AND
9761: IFFALSE 9845
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9763: LD_EXP 8
9767: PUSH
9768: LD_VAR 0 1
9772: ARRAY
9773: NOT
9774: IFTRUE 9822
9776: PUSH
9777: LD_EXP 8
9781: PUSH
9782: LD_VAR 0 1
9786: ARRAY
9787: PUSH
9788: LD_EXP 8
9792: PUSH
9793: LD_OWVAR 2
9797: ARRAY
9798: NONEQUAL
9799: IFFALSE 9821
9801: PUSH
9802: LD_OWVAR 2
9806: PPUSH
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 81
9816: PUSH
9817: LD_INT 1
9819: NONEQUAL
9820: AND
9821: OR
9822: IFFALSE 9845
// if HasPower ( i ) then
9824: LD_VAR 0 1
9828: PPUSH
9829: CALL 9906 0 1
9833: IFFALSE 9845
// begin canWin := false ;
9835: LD_ADDR_VAR 0 2
9839: PUSH
9840: LD_INT 0
9842: ST_TO_ADDR
// break ;
9843: GO 9847
// end ;
9845: GO 9721
9847: POP
9848: POP
// if canWin then
9849: LD_VAR 0 2
9853: IFFALSE 9860
// enable ( mpWin ) else
9855: LD_INT 101
9857: ENABLE_MARKED
9858: GO 9861
// enable ;
9860: ENABLE
// end ; end ;
9861: PPOPN 2
9863: END
// function CanWinLoose ; begin
9864: LD_INT 0
9866: PPUSH
// result := true ;
9867: LD_ADDR_VAR 0 1
9871: PUSH
9872: LD_INT 1
9874: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9875: CALL_OW 531
9879: IFFALSE 9891
9881: PUSH
9882: CALL_OW 519
9886: PUSH
9887: LD_INT 1
9889: GREATER
9890: AND
9891: IFFALSE 9901
// result := false ;
9893: LD_ADDR_VAR 0 1
9897: PUSH
9898: LD_INT 0
9900: ST_TO_ADDR
// end ;
9901: LD_VAR 0 1
9905: RET
// function HasPower ( i ) ; begin
9906: LD_INT 0
9908: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9909: LD_INT 22
9911: PUSH
9912: LD_VAR 0 1
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: LD_INT 30
9926: PUSH
9927: LD_INT 0
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 30
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PPUSH
9953: CALL_OW 69
9957: NOT
9958: IFFALSE 9962
// exit ;
9960: GO 10027
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_VAR 0 1
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 21
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 33
9994: PUSH
9995: LD_INT 3
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 33
10004: PUSH
10005: LD_INT 5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 69
10026: ST_TO_ADDR
// end ; end_of_file
10027: LD_VAR 0 2
10031: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10032: LD_INT 0
10034: PPUSH
10035: PPUSH
// if exist_mode then
10036: LD_VAR 0 2
10040: IFFALSE 10086
// begin unit := CreateCharacter ( prefix & ident ) ;
10042: LD_ADDR_VAR 0 5
10046: PUSH
10047: LD_VAR 0 3
10051: PUSH
10052: LD_VAR 0 1
10056: STR
10057: PPUSH
10058: CALL_OW 34
10062: ST_TO_ADDR
// if unit then
10063: LD_VAR 0 5
10067: IFFALSE 10084
// DeleteCharacters ( prefix & ident ) ;
10069: LD_VAR 0 3
10073: PUSH
10074: LD_VAR 0 1
10078: STR
10079: PPUSH
10080: CALL_OW 40
// end else
10084: GO 10101
// unit := NewCharacter ( ident ) ;
10086: LD_ADDR_VAR 0 5
10090: PUSH
10091: LD_VAR 0 1
10095: PPUSH
10096: CALL_OW 25
10100: ST_TO_ADDR
// result := unit ;
10101: LD_ADDR_VAR 0 4
10105: PUSH
10106: LD_VAR 0 5
10110: ST_TO_ADDR
// end ;
10111: LD_VAR 0 4
10115: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// if exist_mode then
10120: LD_VAR 0 2
10124: IFFALSE 10149
// unit := CreateCharacter ( prefix & ident ) else
10126: LD_ADDR_VAR 0 5
10130: PUSH
10131: LD_VAR 0 3
10135: PUSH
10136: LD_VAR 0 1
10140: STR
10141: PPUSH
10142: CALL_OW 34
10146: ST_TO_ADDR
10147: GO 10164
// unit := NewCharacter ( ident ) ;
10149: LD_ADDR_VAR 0 5
10153: PUSH
10154: LD_VAR 0 1
10158: PPUSH
10159: CALL_OW 25
10163: ST_TO_ADDR
// result := unit ;
10164: LD_ADDR_VAR 0 4
10168: PUSH
10169: LD_VAR 0 5
10173: ST_TO_ADDR
// end ;
10174: LD_VAR 0 4
10178: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10179: LD_INT 0
10181: PPUSH
10182: PPUSH
// if not side or not nation then
10183: LD_VAR 0 1
10187: NOT
10188: IFTRUE 10197
10190: PUSH
10191: LD_VAR 0 2
10195: NOT
10196: OR
10197: IFFALSE 10201
// exit ;
10199: GO 10971
// case nation of nation_american :
10201: LD_VAR 0 2
10205: PUSH
10206: LD_INT 1
10208: DOUBLE
10209: EQUAL
10210: IFTRUE 10214
10212: GO 10428
10214: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10215: LD_ADDR_VAR 0 4
10219: PUSH
10220: LD_INT 35
10222: PUSH
10223: LD_INT 45
10225: PUSH
10226: LD_INT 46
10228: PUSH
10229: LD_INT 47
10231: PUSH
10232: LD_INT 82
10234: PUSH
10235: LD_INT 83
10237: PUSH
10238: LD_INT 84
10240: PUSH
10241: LD_INT 85
10243: PUSH
10244: LD_INT 86
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 2
10252: PUSH
10253: LD_INT 6
10255: PUSH
10256: LD_INT 15
10258: PUSH
10259: LD_INT 16
10261: PUSH
10262: LD_INT 7
10264: PUSH
10265: LD_INT 12
10267: PUSH
10268: LD_INT 13
10270: PUSH
10271: LD_INT 10
10273: PUSH
10274: LD_INT 14
10276: PUSH
10277: LD_INT 20
10279: PUSH
10280: LD_INT 21
10282: PUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 25
10288: PUSH
10289: LD_INT 32
10291: PUSH
10292: LD_INT 27
10294: PUSH
10295: LD_INT 36
10297: PUSH
10298: LD_INT 69
10300: PUSH
10301: LD_INT 39
10303: PUSH
10304: LD_INT 34
10306: PUSH
10307: LD_INT 40
10309: PUSH
10310: LD_INT 48
10312: PUSH
10313: LD_INT 49
10315: PUSH
10316: LD_INT 50
10318: PUSH
10319: LD_INT 51
10321: PUSH
10322: LD_INT 52
10324: PUSH
10325: LD_INT 53
10327: PUSH
10328: LD_INT 54
10330: PUSH
10331: LD_INT 55
10333: PUSH
10334: LD_INT 56
10336: PUSH
10337: LD_INT 57
10339: PUSH
10340: LD_INT 58
10342: PUSH
10343: LD_INT 59
10345: PUSH
10346: LD_INT 60
10348: PUSH
10349: LD_INT 61
10351: PUSH
10352: LD_INT 62
10354: PUSH
10355: LD_INT 80
10357: PUSH
10358: LD_INT 82
10360: PUSH
10361: LD_INT 83
10363: PUSH
10364: LD_INT 84
10366: PUSH
10367: LD_INT 85
10369: PUSH
10370: LD_INT 86
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: ST_TO_ADDR
10426: GO 10893
10428: LD_INT 2
10430: DOUBLE
10431: EQUAL
10432: IFTRUE 10436
10434: GO 10662
10436: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10437: LD_ADDR_VAR 0 4
10441: PUSH
10442: LD_INT 35
10444: PUSH
10445: LD_INT 45
10447: PUSH
10448: LD_INT 46
10450: PUSH
10451: LD_INT 47
10453: PUSH
10454: LD_INT 82
10456: PUSH
10457: LD_INT 83
10459: PUSH
10460: LD_INT 84
10462: PUSH
10463: LD_INT 85
10465: PUSH
10466: LD_INT 87
10468: PUSH
10469: LD_INT 70
10471: PUSH
10472: LD_INT 1
10474: PUSH
10475: LD_INT 11
10477: PUSH
10478: LD_INT 3
10480: PUSH
10481: LD_INT 4
10483: PUSH
10484: LD_INT 5
10486: PUSH
10487: LD_INT 6
10489: PUSH
10490: LD_INT 15
10492: PUSH
10493: LD_INT 18
10495: PUSH
10496: LD_INT 7
10498: PUSH
10499: LD_INT 17
10501: PUSH
10502: LD_INT 8
10504: PUSH
10505: LD_INT 20
10507: PUSH
10508: LD_INT 21
10510: PUSH
10511: LD_INT 22
10513: PUSH
10514: LD_INT 72
10516: PUSH
10517: LD_INT 26
10519: PUSH
10520: LD_INT 69
10522: PUSH
10523: LD_INT 39
10525: PUSH
10526: LD_INT 40
10528: PUSH
10529: LD_INT 41
10531: PUSH
10532: LD_INT 42
10534: PUSH
10535: LD_INT 43
10537: PUSH
10538: LD_INT 48
10540: PUSH
10541: LD_INT 49
10543: PUSH
10544: LD_INT 50
10546: PUSH
10547: LD_INT 51
10549: PUSH
10550: LD_INT 52
10552: PUSH
10553: LD_INT 53
10555: PUSH
10556: LD_INT 54
10558: PUSH
10559: LD_INT 55
10561: PUSH
10562: LD_INT 56
10564: PUSH
10565: LD_INT 60
10567: PUSH
10568: LD_INT 61
10570: PUSH
10571: LD_INT 62
10573: PUSH
10574: LD_INT 66
10576: PUSH
10577: LD_INT 67
10579: PUSH
10580: LD_INT 68
10582: PUSH
10583: LD_INT 81
10585: PUSH
10586: LD_INT 82
10588: PUSH
10589: LD_INT 83
10591: PUSH
10592: LD_INT 84
10594: PUSH
10595: LD_INT 85
10597: PUSH
10598: LD_INT 87
10600: PUSH
10601: LD_INT 88
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: ST_TO_ADDR
10660: GO 10893
10662: LD_INT 3
10664: DOUBLE
10665: EQUAL
10666: IFTRUE 10670
10668: GO 10892
10670: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10671: LD_ADDR_VAR 0 4
10675: PUSH
10676: LD_INT 46
10678: PUSH
10679: LD_INT 47
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: LD_INT 2
10687: PUSH
10688: LD_INT 82
10690: PUSH
10691: LD_INT 83
10693: PUSH
10694: LD_INT 84
10696: PUSH
10697: LD_INT 85
10699: PUSH
10700: LD_INT 86
10702: PUSH
10703: LD_INT 11
10705: PUSH
10706: LD_INT 9
10708: PUSH
10709: LD_INT 20
10711: PUSH
10712: LD_INT 19
10714: PUSH
10715: LD_INT 21
10717: PUSH
10718: LD_INT 24
10720: PUSH
10721: LD_INT 22
10723: PUSH
10724: LD_INT 25
10726: PUSH
10727: LD_INT 28
10729: PUSH
10730: LD_INT 29
10732: PUSH
10733: LD_INT 30
10735: PUSH
10736: LD_INT 31
10738: PUSH
10739: LD_INT 37
10741: PUSH
10742: LD_INT 38
10744: PUSH
10745: LD_INT 32
10747: PUSH
10748: LD_INT 27
10750: PUSH
10751: LD_INT 33
10753: PUSH
10754: LD_INT 69
10756: PUSH
10757: LD_INT 39
10759: PUSH
10760: LD_INT 34
10762: PUSH
10763: LD_INT 40
10765: PUSH
10766: LD_INT 71
10768: PUSH
10769: LD_INT 23
10771: PUSH
10772: LD_INT 44
10774: PUSH
10775: LD_INT 48
10777: PUSH
10778: LD_INT 49
10780: PUSH
10781: LD_INT 50
10783: PUSH
10784: LD_INT 51
10786: PUSH
10787: LD_INT 52
10789: PUSH
10790: LD_INT 53
10792: PUSH
10793: LD_INT 54
10795: PUSH
10796: LD_INT 55
10798: PUSH
10799: LD_INT 56
10801: PUSH
10802: LD_INT 57
10804: PUSH
10805: LD_INT 58
10807: PUSH
10808: LD_INT 59
10810: PUSH
10811: LD_INT 63
10813: PUSH
10814: LD_INT 64
10816: PUSH
10817: LD_INT 65
10819: PUSH
10820: LD_INT 82
10822: PUSH
10823: LD_INT 83
10825: PUSH
10826: LD_INT 84
10828: PUSH
10829: LD_INT 85
10831: PUSH
10832: LD_INT 86
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: ST_TO_ADDR
10890: GO 10893
10892: POP
// if state > - 1 and state < 3 then
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 1
10900: NEG
10901: GREATER
10902: IFFALSE 10914
10904: PUSH
10905: LD_VAR 0 3
10909: PUSH
10910: LD_INT 3
10912: LESS
10913: AND
10914: IFFALSE 10971
// for i in result do
10916: LD_ADDR_VAR 0 5
10920: PUSH
10921: LD_VAR 0 4
10925: PUSH
10926: FOR_IN
10927: IFFALSE 10969
// if GetTech ( i , side ) <> state then
10929: LD_VAR 0 5
10933: PPUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 321
10943: PUSH
10944: LD_VAR 0 3
10948: NONEQUAL
10949: IFFALSE 10967
// result := result diff i ;
10951: LD_ADDR_VAR 0 4
10955: PUSH
10956: LD_VAR 0 4
10960: PUSH
10961: LD_VAR 0 5
10965: DIFF
10966: ST_TO_ADDR
10967: GO 10926
10969: POP
10970: POP
// end ;
10971: LD_VAR 0 4
10975: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
10980: PPUSH
// result := true ;
10981: LD_ADDR_VAR 0 3
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10989: LD_ADDR_VAR 0 5
10993: PUSH
10994: LD_VAR 0 2
10998: PPUSH
10999: CALL_OW 480
11003: ST_TO_ADDR
// if not tmp then
11004: LD_VAR 0 5
11008: NOT
11009: IFFALSE 11013
// exit ;
11011: GO 11062
// for i in tmp do
11013: LD_ADDR_VAR 0 4
11017: PUSH
11018: LD_VAR 0 5
11022: PUSH
11023: FOR_IN
11024: IFFALSE 11060
// if GetTech ( i , side ) <> state_researched then
11026: LD_VAR 0 4
11030: PPUSH
11031: LD_VAR 0 1
11035: PPUSH
11036: CALL_OW 321
11040: PUSH
11041: LD_INT 2
11043: NONEQUAL
11044: IFFALSE 11058
// begin result := false ;
11046: LD_ADDR_VAR 0 3
11050: PUSH
11051: LD_INT 0
11053: ST_TO_ADDR
// exit ;
11054: POP
11055: POP
11056: GO 11062
// end ;
11058: GO 11023
11060: POP
11061: POP
// end ;
11062: LD_VAR 0 3
11066: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11067: LD_INT 0
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
11073: PPUSH
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
11078: PPUSH
11079: PPUSH
11080: PPUSH
11081: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11082: LD_VAR 0 1
11086: NOT
11087: IFTRUE 11104
11089: PUSH
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 257
11099: PUSH
11100: LD_INT 9
11102: NONEQUAL
11103: OR
11104: IFFALSE 11108
// exit ;
11106: GO 11687
// side := GetSide ( unit ) ;
11108: LD_ADDR_VAR 0 9
11112: PUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: CALL_OW 255
11122: ST_TO_ADDR
// tech_space := tech_spacanom ;
11123: LD_ADDR_VAR 0 12
11127: PUSH
11128: LD_INT 29
11130: ST_TO_ADDR
// tech_time := tech_taurad ;
11131: LD_ADDR_VAR 0 13
11135: PUSH
11136: LD_INT 28
11138: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11139: LD_ADDR_VAR 0 11
11143: PUSH
11144: LD_VAR 0 1
11148: PPUSH
11149: CALL_OW 310
11153: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11154: LD_VAR 0 11
11158: PPUSH
11159: CALL_OW 247
11163: PUSH
11164: LD_INT 2
11166: EQUAL
11167: IFFALSE 11171
// exit ;
11169: GO 11687
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11171: LD_ADDR_VAR 0 8
11175: PUSH
11176: LD_INT 81
11178: PUSH
11179: LD_VAR 0 9
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 3
11190: PUSH
11191: LD_INT 21
11193: PUSH
11194: LD_INT 3
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PPUSH
11209: CALL_OW 69
11213: ST_TO_ADDR
// if not tmp then
11214: LD_VAR 0 8
11218: NOT
11219: IFFALSE 11223
// exit ;
11221: GO 11687
// if in_unit then
11223: LD_VAR 0 11
11227: IFFALSE 11251
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11229: LD_ADDR_VAR 0 10
11233: PUSH
11234: LD_VAR 0 8
11238: PPUSH
11239: LD_VAR 0 11
11243: PPUSH
11244: CALL_OW 74
11248: ST_TO_ADDR
11249: GO 11271
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11251: LD_ADDR_VAR 0 10
11255: PUSH
11256: LD_VAR 0 8
11260: PPUSH
11261: LD_VAR 0 1
11265: PPUSH
11266: CALL_OW 74
11270: ST_TO_ADDR
// if not enemy then
11271: LD_VAR 0 10
11275: NOT
11276: IFFALSE 11280
// exit ;
11278: GO 11687
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11280: LD_VAR 0 11
11284: IFFALSE 11306
11286: PUSH
11287: LD_VAR 0 11
11291: PPUSH
11292: LD_VAR 0 10
11296: PPUSH
11297: CALL_OW 296
11301: PUSH
11302: LD_INT 13
11304: GREATER
11305: AND
11306: IFTRUE 11328
11308: PUSH
11309: LD_VAR 0 1
11313: PPUSH
11314: LD_VAR 0 10
11318: PPUSH
11319: CALL_OW 296
11323: PUSH
11324: LD_INT 12
11326: GREATER
11327: OR
11328: IFFALSE 11332
// exit ;
11330: GO 11687
// missile := [ 1 ] ;
11332: LD_ADDR_VAR 0 14
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11343: LD_VAR 0 9
11347: PPUSH
11348: LD_VAR 0 12
11352: PPUSH
11353: CALL_OW 325
11357: IFFALSE 11386
// missile := Replace ( missile , missile + 1 , 2 ) ;
11359: LD_ADDR_VAR 0 14
11363: PUSH
11364: LD_VAR 0 14
11368: PPUSH
11369: LD_VAR 0 14
11373: PUSH
11374: LD_INT 1
11376: PLUS
11377: PPUSH
11378: LD_INT 2
11380: PPUSH
11381: CALL_OW 1
11385: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11386: LD_VAR 0 9
11390: PPUSH
11391: LD_VAR 0 13
11395: PPUSH
11396: CALL_OW 325
11400: IFFALSE 11424
11402: PUSH
11403: LD_VAR 0 10
11407: PPUSH
11408: CALL_OW 255
11412: PPUSH
11413: LD_VAR 0 13
11417: PPUSH
11418: CALL_OW 325
11422: NOT
11423: AND
11424: IFFALSE 11453
// missile := Replace ( missile , missile + 1 , 3 ) ;
11426: LD_ADDR_VAR 0 14
11430: PUSH
11431: LD_VAR 0 14
11435: PPUSH
11436: LD_VAR 0 14
11440: PUSH
11441: LD_INT 1
11443: PLUS
11444: PPUSH
11445: LD_INT 3
11447: PPUSH
11448: CALL_OW 1
11452: ST_TO_ADDR
// if missile < 2 then
11453: LD_VAR 0 14
11457: PUSH
11458: LD_INT 2
11460: LESS
11461: IFFALSE 11465
// exit ;
11463: GO 11687
// x := GetX ( enemy ) ;
11465: LD_ADDR_VAR 0 4
11469: PUSH
11470: LD_VAR 0 10
11474: PPUSH
11475: CALL_OW 250
11479: ST_TO_ADDR
// y := GetY ( enemy ) ;
11480: LD_ADDR_VAR 0 5
11484: PUSH
11485: LD_VAR 0 10
11489: PPUSH
11490: CALL_OW 251
11494: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11495: LD_ADDR_VAR 0 6
11499: PUSH
11500: LD_VAR 0 4
11504: PUSH
11505: LD_INT 1
11507: NEG
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: CALL_OW 12
11516: PLUS
11517: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11518: LD_ADDR_VAR 0 7
11522: PUSH
11523: LD_VAR 0 5
11527: PUSH
11528: LD_INT 1
11530: NEG
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 12
11539: PLUS
11540: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11541: LD_VAR 0 6
11545: PPUSH
11546: LD_VAR 0 7
11550: PPUSH
11551: CALL_OW 488
11555: NOT
11556: IFFALSE 11578
// begin _x := x ;
11558: LD_ADDR_VAR 0 6
11562: PUSH
11563: LD_VAR 0 4
11567: ST_TO_ADDR
// _y := y ;
11568: LD_ADDR_VAR 0 7
11572: PUSH
11573: LD_VAR 0 5
11577: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11578: LD_ADDR_VAR 0 3
11582: PUSH
11583: LD_INT 1
11585: PPUSH
11586: LD_VAR 0 14
11590: PPUSH
11591: CALL_OW 12
11595: ST_TO_ADDR
// case i of 1 :
11596: LD_VAR 0 3
11600: PUSH
11601: LD_INT 1
11603: DOUBLE
11604: EQUAL
11605: IFTRUE 11609
11607: GO 11626
11609: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11610: LD_VAR 0 1
11614: PPUSH
11615: LD_VAR 0 10
11619: PPUSH
11620: CALL_OW 115
11624: GO 11687
11626: LD_INT 2
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11656
11634: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11635: LD_VAR 0 1
11639: PPUSH
11640: LD_VAR 0 6
11644: PPUSH
11645: LD_VAR 0 7
11649: PPUSH
11650: CALL_OW 153
11654: GO 11687
11656: LD_INT 3
11658: DOUBLE
11659: EQUAL
11660: IFTRUE 11664
11662: GO 11686
11664: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_VAR 0 6
11674: PPUSH
11675: LD_VAR 0 7
11679: PPUSH
11680: CALL_OW 154
11684: GO 11687
11686: POP
// end ;
11687: LD_VAR 0 2
11691: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
11696: PPUSH
11697: PPUSH
11698: PPUSH
11699: PPUSH
// if not unit or not building then
11700: LD_VAR 0 1
11704: NOT
11705: IFTRUE 11714
11707: PUSH
11708: LD_VAR 0 2
11712: NOT
11713: OR
11714: IFFALSE 11718
// exit ;
11716: GO 11876
// x := GetX ( building ) ;
11718: LD_ADDR_VAR 0 5
11722: PUSH
11723: LD_VAR 0 2
11727: PPUSH
11728: CALL_OW 250
11732: ST_TO_ADDR
// y := GetY ( building ) ;
11733: LD_ADDR_VAR 0 6
11737: PUSH
11738: LD_VAR 0 2
11742: PPUSH
11743: CALL_OW 251
11747: ST_TO_ADDR
// for i := 0 to 5 do
11748: LD_ADDR_VAR 0 4
11752: PUSH
11753: DOUBLE
11754: LD_INT 0
11756: DEC
11757: ST_TO_ADDR
11758: LD_INT 5
11760: PUSH
11761: FOR_TO
11762: IFFALSE 11874
// begin _x := ShiftX ( x , i , 3 ) ;
11764: LD_ADDR_VAR 0 7
11768: PUSH
11769: LD_VAR 0 5
11773: PPUSH
11774: LD_VAR 0 4
11778: PPUSH
11779: LD_INT 3
11781: PPUSH
11782: CALL_OW 272
11786: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11787: LD_ADDR_VAR 0 8
11791: PUSH
11792: LD_VAR 0 6
11796: PPUSH
11797: LD_VAR 0 4
11801: PPUSH
11802: LD_INT 3
11804: PPUSH
11805: CALL_OW 273
11809: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11810: LD_VAR 0 7
11814: PPUSH
11815: LD_VAR 0 8
11819: PPUSH
11820: CALL_OW 488
11824: NOT
11825: IFFALSE 11829
// continue ;
11827: GO 11761
// if HexInfo ( _x , _y ) = 0 then
11829: LD_VAR 0 7
11833: PPUSH
11834: LD_VAR 0 8
11838: PPUSH
11839: CALL_OW 428
11843: PUSH
11844: LD_INT 0
11846: EQUAL
11847: IFFALSE 11872
// begin ComMoveXY ( unit , _x , _y ) ;
11849: LD_VAR 0 1
11853: PPUSH
11854: LD_VAR 0 7
11858: PPUSH
11859: LD_VAR 0 8
11863: PPUSH
11864: CALL_OW 111
// exit ;
11868: POP
11869: POP
11870: GO 11876
// end ; end ;
11872: GO 11761
11874: POP
11875: POP
// end ;
11876: LD_VAR 0 3
11880: RET
// export function ScanBase ( side , base_area ) ; begin
11881: LD_INT 0
11883: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_VAR 0 2
11893: PPUSH
11894: LD_INT 81
11896: PUSH
11897: LD_VAR 0 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: ST_TO_ADDR
// end ;
11911: LD_VAR 0 3
11915: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11916: LD_INT 0
11918: PPUSH
11919: PPUSH
11920: PPUSH
11921: PPUSH
// result := false ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_INT 0
11929: ST_TO_ADDR
// side := GetSide ( unit ) ;
11930: LD_ADDR_VAR 0 3
11934: PUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: CALL_OW 255
11944: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11945: LD_ADDR_VAR 0 4
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 248
11959: ST_TO_ADDR
// case nat of 1 :
11960: LD_VAR 0 4
11964: PUSH
11965: LD_INT 1
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 11984
11973: POP
// tech := tech_lassight ; 2 :
11974: LD_ADDR_VAR 0 5
11978: PUSH
11979: LD_INT 12
11981: ST_TO_ADDR
11982: GO 12023
11984: LD_INT 2
11986: DOUBLE
11987: EQUAL
11988: IFTRUE 11992
11990: GO 12003
11992: POP
// tech := tech_mortar ; 3 :
11993: LD_ADDR_VAR 0 5
11997: PUSH
11998: LD_INT 41
12000: ST_TO_ADDR
12001: GO 12023
12003: LD_INT 3
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12022
12011: POP
// tech := tech_bazooka ; end ;
12012: LD_ADDR_VAR 0 5
12016: PUSH
12017: LD_INT 44
12019: ST_TO_ADDR
12020: GO 12023
12022: POP
// if Researched ( side , tech ) then
12023: LD_VAR 0 3
12027: PPUSH
12028: LD_VAR 0 5
12032: PPUSH
12033: CALL_OW 325
12037: IFFALSE 12064
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12039: LD_ADDR_VAR 0 2
12043: PUSH
12044: LD_INT 5
12046: PUSH
12047: LD_INT 8
12049: PUSH
12050: LD_INT 9
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: LD_VAR 0 4
12062: ARRAY
12063: ST_TO_ADDR
// end ;
12064: LD_VAR 0 2
12068: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12069: LD_INT 0
12071: PPUSH
12072: PPUSH
12073: PPUSH
// if not mines then
12074: LD_VAR 0 2
12078: NOT
12079: IFFALSE 12083
// exit ;
12081: GO 12227
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12083: LD_ADDR_VAR 0 5
12087: PUSH
12088: LD_INT 81
12090: PUSH
12091: LD_VAR 0 1
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 3
12102: PUSH
12103: LD_INT 21
12105: PUSH
12106: LD_INT 3
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: CALL_OW 69
12125: ST_TO_ADDR
// for i in mines do
12126: LD_ADDR_VAR 0 4
12130: PUSH
12131: LD_VAR 0 2
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12225
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12139: LD_VAR 0 4
12143: PUSH
12144: LD_INT 1
12146: ARRAY
12147: PPUSH
12148: LD_VAR 0 4
12152: PUSH
12153: LD_INT 2
12155: ARRAY
12156: PPUSH
12157: CALL_OW 458
12161: NOT
12162: IFFALSE 12166
// continue ;
12164: GO 12136
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12166: LD_VAR 0 4
12170: PUSH
12171: LD_INT 1
12173: ARRAY
12174: PPUSH
12175: LD_VAR 0 4
12179: PUSH
12180: LD_INT 2
12182: ARRAY
12183: PPUSH
12184: CALL_OW 428
12188: PUSH
12189: LD_VAR 0 5
12193: IN
12194: IFFALSE 12223
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12196: LD_VAR 0 4
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: PPUSH
12205: LD_VAR 0 4
12209: PUSH
12210: LD_INT 2
12212: ARRAY
12213: PPUSH
12214: LD_VAR 0 1
12218: PPUSH
12219: CALL_OW 456
// end ;
12223: GO 12136
12225: POP
12226: POP
// end ;
12227: LD_VAR 0 3
12231: RET
// export function Count ( array ) ; begin
12232: LD_INT 0
12234: PPUSH
// result := array + 0 ;
12235: LD_ADDR_VAR 0 2
12239: PUSH
12240: LD_VAR 0 1
12244: PUSH
12245: LD_INT 0
12247: PLUS
12248: ST_TO_ADDR
// end ;
12249: LD_VAR 0 2
12253: RET
// export function IsEmpty ( building ) ; begin
12254: LD_INT 0
12256: PPUSH
// if not building then
12257: LD_VAR 0 1
12261: NOT
12262: IFFALSE 12266
// exit ;
12264: GO 12309
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12266: LD_ADDR_VAR 0 2
12270: PUSH
12271: LD_VAR 0 1
12275: PUSH
12276: LD_INT 22
12278: PUSH
12279: LD_VAR 0 1
12283: PPUSH
12284: CALL_OW 255
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 58
12295: PUSH
12296: EMPTY
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: IN
12308: ST_TO_ADDR
// end ;
12309: LD_VAR 0 2
12313: RET
// export function IsNotFull ( building ) ; var places ; begin
12314: LD_INT 0
12316: PPUSH
12317: PPUSH
// if not building then
12318: LD_VAR 0 1
12322: NOT
12323: IFFALSE 12327
// exit ;
12325: GO 12355
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12327: LD_ADDR_VAR 0 2
12331: PUSH
12332: LD_VAR 0 1
12336: PPUSH
12337: LD_INT 3
12339: PUSH
12340: LD_INT 62
12342: PUSH
12343: EMPTY
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: ST_TO_ADDR
// end ;
12355: LD_VAR 0 2
12359: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12360: LD_INT 0
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
// tmp := [ ] ;
12366: LD_ADDR_VAR 0 3
12370: PUSH
12371: EMPTY
12372: ST_TO_ADDR
// list := [ ] ;
12373: LD_ADDR_VAR 0 5
12377: PUSH
12378: EMPTY
12379: ST_TO_ADDR
// for i = 16 to 25 do
12380: LD_ADDR_VAR 0 4
12384: PUSH
12385: DOUBLE
12386: LD_INT 16
12388: DEC
12389: ST_TO_ADDR
12390: LD_INT 25
12392: PUSH
12393: FOR_TO
12394: IFFALSE 12467
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12396: LD_ADDR_VAR 0 3
12400: PUSH
12401: LD_VAR 0 3
12405: PUSH
12406: LD_INT 22
12408: PUSH
12409: LD_VAR 0 1
12413: PPUSH
12414: CALL_OW 255
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 91
12425: PUSH
12426: LD_VAR 0 1
12430: PUSH
12431: LD_INT 6
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 30
12441: PUSH
12442: LD_VAR 0 4
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: PPUSH
12459: CALL_OW 69
12463: ADD
12464: ST_TO_ADDR
12465: GO 12393
12467: POP
12468: POP
// for i = 1 to tmp do
12469: LD_ADDR_VAR 0 4
12473: PUSH
12474: DOUBLE
12475: LD_INT 1
12477: DEC
12478: ST_TO_ADDR
12479: LD_VAR 0 3
12483: PUSH
12484: FOR_TO
12485: IFFALSE 12573
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12487: LD_ADDR_VAR 0 5
12491: PUSH
12492: LD_VAR 0 5
12496: PUSH
12497: LD_VAR 0 3
12501: PUSH
12502: LD_VAR 0 4
12506: ARRAY
12507: PPUSH
12508: CALL_OW 266
12512: PUSH
12513: LD_VAR 0 3
12517: PUSH
12518: LD_VAR 0 4
12522: ARRAY
12523: PPUSH
12524: CALL_OW 250
12528: PUSH
12529: LD_VAR 0 3
12533: PUSH
12534: LD_VAR 0 4
12538: ARRAY
12539: PPUSH
12540: CALL_OW 251
12544: PUSH
12545: LD_VAR 0 3
12549: PUSH
12550: LD_VAR 0 4
12554: ARRAY
12555: PPUSH
12556: CALL_OW 254
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: PUSH
12567: EMPTY
12568: LIST
12569: ADD
12570: ST_TO_ADDR
12571: GO 12484
12573: POP
12574: POP
// result := list ;
12575: LD_ADDR_VAR 0 2
12579: PUSH
12580: LD_VAR 0 5
12584: ST_TO_ADDR
// end ;
12585: LD_VAR 0 2
12589: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
12597: PPUSH
12598: PPUSH
// if not factory then
12599: LD_VAR 0 1
12603: NOT
12604: IFFALSE 12608
// exit ;
12606: GO 13211
// if control = control_apeman then
12608: LD_VAR 0 4
12612: PUSH
12613: LD_INT 5
12615: EQUAL
12616: IFFALSE 12725
// begin tmp := UnitsInside ( factory ) ;
12618: LD_ADDR_VAR 0 8
12622: PUSH
12623: LD_VAR 0 1
12627: PPUSH
12628: CALL_OW 313
12632: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12633: LD_VAR 0 8
12637: PPUSH
12638: LD_INT 25
12640: PUSH
12641: LD_INT 12
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 72
12652: NOT
12653: IFFALSE 12663
// control := control_manual ;
12655: LD_ADDR_VAR 0 4
12659: PUSH
12660: LD_INT 1
12662: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12663: LD_ADDR_VAR 0 8
12667: PUSH
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL 12360 0 1
12677: ST_TO_ADDR
// if tmp then
12678: LD_VAR 0 8
12682: IFFALSE 12725
// begin for i in tmp do
12684: LD_ADDR_VAR 0 7
12688: PUSH
12689: LD_VAR 0 8
12693: PUSH
12694: FOR_IN
12695: IFFALSE 12723
// if i [ 1 ] = b_ext_radio then
12697: LD_VAR 0 7
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PUSH
12706: LD_INT 22
12708: EQUAL
12709: IFFALSE 12721
// begin control := control_remote ;
12711: LD_ADDR_VAR 0 4
12715: PUSH
12716: LD_INT 2
12718: ST_TO_ADDR
// break ;
12719: GO 12723
// end ;
12721: GO 12694
12723: POP
12724: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12725: LD_VAR 0 1
12729: PPUSH
12730: LD_VAR 0 2
12734: PPUSH
12735: LD_VAR 0 3
12739: PPUSH
12740: LD_VAR 0 4
12744: PPUSH
12745: LD_VAR 0 5
12749: PPUSH
12750: CALL_OW 448
12754: IFFALSE 12789
// begin result := [ chassis , engine , control , weapon ] ;
12756: LD_ADDR_VAR 0 6
12760: PUSH
12761: LD_VAR 0 2
12765: PUSH
12766: LD_VAR 0 3
12770: PUSH
12771: LD_VAR 0 4
12775: PUSH
12776: LD_VAR 0 5
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: ST_TO_ADDR
// exit ;
12787: GO 13211
// end ; _chassis := AvailableChassisList ( factory ) ;
12789: LD_ADDR_VAR 0 9
12793: PUSH
12794: LD_VAR 0 1
12798: PPUSH
12799: CALL_OW 475
12803: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12804: LD_ADDR_VAR 0 11
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 476
12818: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12819: LD_ADDR_VAR 0 12
12823: PUSH
12824: LD_VAR 0 1
12828: PPUSH
12829: CALL_OW 477
12833: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12834: LD_ADDR_VAR 0 10
12838: PUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 478
12848: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12849: LD_VAR 0 9
12853: NOT
12854: IFTRUE 12863
12856: PUSH
12857: LD_VAR 0 11
12861: NOT
12862: OR
12863: IFTRUE 12872
12865: PUSH
12866: LD_VAR 0 12
12870: NOT
12871: OR
12872: IFTRUE 12881
12874: PUSH
12875: LD_VAR 0 10
12879: NOT
12880: OR
12881: IFFALSE 12916
// begin result := [ chassis , engine , control , weapon ] ;
12883: LD_ADDR_VAR 0 6
12887: PUSH
12888: LD_VAR 0 2
12892: PUSH
12893: LD_VAR 0 3
12897: PUSH
12898: LD_VAR 0 4
12902: PUSH
12903: LD_VAR 0 5
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: ST_TO_ADDR
// exit ;
12914: GO 13211
// end ; if not chassis in _chassis then
12916: LD_VAR 0 2
12920: PUSH
12921: LD_VAR 0 9
12925: IN
12926: NOT
12927: IFFALSE 12953
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_VAR 0 9
12938: PUSH
12939: LD_INT 1
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: CALL_OW 12
12951: ARRAY
12952: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12953: LD_VAR 0 2
12957: PPUSH
12958: LD_VAR 0 3
12962: PPUSH
12963: CALL 13216 0 2
12967: NOT
12968: IFFALSE 13029
// repeat engine := _engine [ 1 ] ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_VAR 0 11
12979: PUSH
12980: LD_INT 1
12982: ARRAY
12983: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12984: LD_ADDR_VAR 0 11
12988: PUSH
12989: LD_VAR 0 11
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 3
13001: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13002: LD_VAR 0 2
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: CALL 13216 0 2
13016: IFTRUE 13027
13018: PUSH
13019: LD_VAR 0 11
13023: PUSH
13024: EMPTY
13025: EQUAL
13026: OR
13027: IFFALSE 12970
// if not control in _control then
13029: LD_VAR 0 4
13033: PUSH
13034: LD_VAR 0 12
13038: IN
13039: NOT
13040: IFFALSE 13066
// control := _control [ rand ( 1 , _control ) ] ;
13042: LD_ADDR_VAR 0 4
13046: PUSH
13047: LD_VAR 0 12
13051: PUSH
13052: LD_INT 1
13054: PPUSH
13055: LD_VAR 0 12
13059: PPUSH
13060: CALL_OW 12
13064: ARRAY
13065: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13066: LD_VAR 0 2
13070: PPUSH
13071: LD_VAR 0 5
13075: PPUSH
13076: CALL 13438 0 2
13080: NOT
13081: IFFALSE 13142
// repeat weapon := _weapon [ 1 ] ;
13083: LD_ADDR_VAR 0 5
13087: PUSH
13088: LD_VAR 0 10
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13097: LD_ADDR_VAR 0 10
13101: PUSH
13102: LD_VAR 0 10
13106: PPUSH
13107: LD_INT 1
13109: PPUSH
13110: CALL_OW 3
13114: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13115: LD_VAR 0 2
13119: PPUSH
13120: LD_VAR 0 5
13124: PPUSH
13125: CALL 13438 0 2
13129: IFTRUE 13140
13131: PUSH
13132: LD_VAR 0 10
13136: PUSH
13137: EMPTY
13138: EQUAL
13139: OR
13140: IFFALSE 13083
// result := [ ] ;
13142: LD_ADDR_VAR 0 6
13146: PUSH
13147: EMPTY
13148: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13149: LD_VAR 0 1
13153: PPUSH
13154: LD_VAR 0 2
13158: PPUSH
13159: LD_VAR 0 3
13163: PPUSH
13164: LD_VAR 0 4
13168: PPUSH
13169: LD_VAR 0 5
13173: PPUSH
13174: CALL_OW 448
13178: IFFALSE 13211
// result := [ chassis , engine , control , weapon ] ;
13180: LD_ADDR_VAR 0 6
13184: PUSH
13185: LD_VAR 0 2
13189: PUSH
13190: LD_VAR 0 3
13194: PUSH
13195: LD_VAR 0 4
13199: PUSH
13200: LD_VAR 0 5
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: ST_TO_ADDR
// end ;
13211: LD_VAR 0 6
13215: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13216: LD_INT 0
13218: PPUSH
// if not chassis or not engine then
13219: LD_VAR 0 1
13223: NOT
13224: IFTRUE 13233
13226: PUSH
13227: LD_VAR 0 2
13231: NOT
13232: OR
13233: IFFALSE 13237
// exit ;
13235: GO 13433
// case engine of engine_solar :
13237: LD_VAR 0 2
13241: PUSH
13242: LD_INT 2
13244: DOUBLE
13245: EQUAL
13246: IFTRUE 13250
13248: GO 13288
13250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13251: LD_ADDR_VAR 0 3
13255: PUSH
13256: LD_INT 11
13258: PUSH
13259: LD_INT 12
13261: PUSH
13262: LD_INT 13
13264: PUSH
13265: LD_INT 14
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: LD_INT 3
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: ST_TO_ADDR
13286: GO 13417
13288: LD_INT 1
13290: DOUBLE
13291: EQUAL
13292: IFTRUE 13296
13294: GO 13358
13296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13297: LD_ADDR_VAR 0 3
13301: PUSH
13302: LD_INT 11
13304: PUSH
13305: LD_INT 12
13307: PUSH
13308: LD_INT 13
13310: PUSH
13311: LD_INT 14
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: LD_INT 2
13319: PUSH
13320: LD_INT 3
13322: PUSH
13323: LD_INT 4
13325: PUSH
13326: LD_INT 5
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 23
13334: PUSH
13335: LD_INT 22
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: ST_TO_ADDR
13356: GO 13417
13358: LD_INT 3
13360: DOUBLE
13361: EQUAL
13362: IFTRUE 13366
13364: GO 13416
13366: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13367: LD_ADDR_VAR 0 3
13371: PUSH
13372: LD_INT 13
13374: PUSH
13375: LD_INT 14
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: LD_INT 3
13383: PUSH
13384: LD_INT 4
13386: PUSH
13387: LD_INT 5
13389: PUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_INT 23
13398: PUSH
13399: LD_INT 24
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: ST_TO_ADDR
13414: GO 13417
13416: POP
// result := ( chassis in result ) ;
13417: LD_ADDR_VAR 0 3
13421: PUSH
13422: LD_VAR 0 1
13426: PUSH
13427: LD_VAR 0 3
13431: IN
13432: ST_TO_ADDR
// end ;
13433: LD_VAR 0 3
13437: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13438: LD_INT 0
13440: PPUSH
// if not chassis or not weapon then
13441: LD_VAR 0 1
13445: NOT
13446: IFTRUE 13455
13448: PUSH
13449: LD_VAR 0 2
13453: NOT
13454: OR
13455: IFFALSE 13459
// exit ;
13457: GO 14519
// case weapon of us_machine_gun :
13459: LD_VAR 0 2
13463: PUSH
13464: LD_INT 2
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13502
13472: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13473: LD_ADDR_VAR 0 3
13477: PUSH
13478: LD_INT 1
13480: PUSH
13481: LD_INT 2
13483: PUSH
13484: LD_INT 3
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: LD_INT 5
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: ST_TO_ADDR
13500: GO 14503
13502: LD_INT 3
13504: DOUBLE
13505: EQUAL
13506: IFTRUE 13510
13508: GO 13540
13510: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13511: LD_ADDR_VAR 0 3
13515: PUSH
13516: LD_INT 1
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: LD_INT 3
13524: PUSH
13525: LD_INT 4
13527: PUSH
13528: LD_INT 5
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: ST_TO_ADDR
13538: GO 14503
13540: LD_INT 11
13542: DOUBLE
13543: EQUAL
13544: IFTRUE 13548
13546: GO 13578
13548: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13549: LD_ADDR_VAR 0 3
13553: PUSH
13554: LD_INT 1
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: LD_INT 3
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: LD_INT 5
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: ST_TO_ADDR
13576: GO 14503
13578: LD_INT 4
13580: DOUBLE
13581: EQUAL
13582: IFTRUE 13586
13584: GO 13612
13586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13587: LD_ADDR_VAR 0 3
13591: PUSH
13592: LD_INT 2
13594: PUSH
13595: LD_INT 3
13597: PUSH
13598: LD_INT 4
13600: PUSH
13601: LD_INT 5
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: ST_TO_ADDR
13610: GO 14503
13612: LD_INT 5
13614: DOUBLE
13615: EQUAL
13616: IFTRUE 13620
13618: GO 13646
13620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13621: LD_ADDR_VAR 0 3
13625: PUSH
13626: LD_INT 2
13628: PUSH
13629: LD_INT 3
13631: PUSH
13632: LD_INT 4
13634: PUSH
13635: LD_INT 5
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: ST_TO_ADDR
13644: GO 14503
13646: LD_INT 9
13648: DOUBLE
13649: EQUAL
13650: IFTRUE 13654
13652: GO 13680
13654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13655: LD_ADDR_VAR 0 3
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: LD_INT 3
13665: PUSH
13666: LD_INT 4
13668: PUSH
13669: LD_INT 5
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: ST_TO_ADDR
13678: GO 14503
13680: LD_INT 7
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13714
13688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: LD_INT 2
13696: PUSH
13697: LD_INT 3
13699: PUSH
13700: LD_INT 4
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: ST_TO_ADDR
13712: GO 14503
13714: LD_INT 12
13716: DOUBLE
13717: EQUAL
13718: IFTRUE 13722
13720: GO 13748
13722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: LD_INT 3
13733: PUSH
13734: LD_INT 4
13736: PUSH
13737: LD_INT 5
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: ST_TO_ADDR
13746: GO 14503
13748: LD_INT 13
13750: DOUBLE
13751: EQUAL
13752: IFTRUE 13756
13754: GO 13782
13756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 3
13767: PUSH
13768: LD_INT 4
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: ST_TO_ADDR
13780: GO 14503
13782: LD_INT 14
13784: DOUBLE
13785: EQUAL
13786: IFTRUE 13790
13788: GO 13808
13790: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13791: LD_ADDR_VAR 0 3
13795: PUSH
13796: LD_INT 4
13798: PUSH
13799: LD_INT 5
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: ST_TO_ADDR
13806: GO 14503
13808: LD_INT 6
13810: DOUBLE
13811: EQUAL
13812: IFTRUE 13816
13814: GO 13834
13816: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_INT 4
13824: PUSH
13825: LD_INT 5
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 14503
13834: LD_INT 10
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 13860
13842: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13843: LD_ADDR_VAR 0 3
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: ST_TO_ADDR
13858: GO 14503
13860: LD_INT 22
13862: DOUBLE
13863: EQUAL
13864: IFTRUE 13868
13866: GO 13894
13868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: LD_INT 11
13876: PUSH
13877: LD_INT 12
13879: PUSH
13880: LD_INT 13
13882: PUSH
13883: LD_INT 14
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: ST_TO_ADDR
13892: GO 14503
13894: LD_INT 23
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 13928
13902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13903: LD_ADDR_VAR 0 3
13907: PUSH
13908: LD_INT 11
13910: PUSH
13911: LD_INT 12
13913: PUSH
13914: LD_INT 13
13916: PUSH
13917: LD_INT 14
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: ST_TO_ADDR
13926: GO 14503
13928: LD_INT 24
13930: DOUBLE
13931: EQUAL
13932: IFTRUE 13936
13934: GO 13962
13936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: LD_INT 11
13944: PUSH
13945: LD_INT 12
13947: PUSH
13948: LD_INT 13
13950: PUSH
13951: LD_INT 14
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: ST_TO_ADDR
13960: GO 14503
13962: LD_INT 30
13964: DOUBLE
13965: EQUAL
13966: IFTRUE 13970
13968: GO 13996
13970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13971: LD_ADDR_VAR 0 3
13975: PUSH
13976: LD_INT 11
13978: PUSH
13979: LD_INT 12
13981: PUSH
13982: LD_INT 13
13984: PUSH
13985: LD_INT 14
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: ST_TO_ADDR
13994: GO 14503
13996: LD_INT 25
13998: DOUBLE
13999: EQUAL
14000: IFTRUE 14004
14002: GO 14022
14004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14005: LD_ADDR_VAR 0 3
14009: PUSH
14010: LD_INT 13
14012: PUSH
14013: LD_INT 14
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: ST_TO_ADDR
14020: GO 14503
14022: LD_INT 27
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14048
14030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 13
14038: PUSH
14039: LD_INT 14
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: ST_TO_ADDR
14046: GO 14503
14048: LD_INT 92
14050: DOUBLE
14051: EQUAL
14052: IFTRUE 14056
14054: GO 14082
14056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14057: LD_ADDR_VAR 0 3
14061: PUSH
14062: LD_INT 11
14064: PUSH
14065: LD_INT 12
14067: PUSH
14068: LD_INT 13
14070: PUSH
14071: LD_INT 14
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: ST_TO_ADDR
14080: GO 14503
14082: LD_INT 28
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14108
14090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_INT 13
14098: PUSH
14099: LD_INT 14
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: ST_TO_ADDR
14106: GO 14503
14108: LD_INT 29
14110: DOUBLE
14111: EQUAL
14112: IFTRUE 14116
14114: GO 14134
14116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14117: LD_ADDR_VAR 0 3
14121: PUSH
14122: LD_INT 13
14124: PUSH
14125: LD_INT 14
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 14503
14134: LD_INT 31
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14160
14142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14143: LD_ADDR_VAR 0 3
14147: PUSH
14148: LD_INT 13
14150: PUSH
14151: LD_INT 14
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: ST_TO_ADDR
14158: GO 14503
14160: LD_INT 26
14162: DOUBLE
14163: EQUAL
14164: IFTRUE 14168
14166: GO 14186
14168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14169: LD_ADDR_VAR 0 3
14173: PUSH
14174: LD_INT 13
14176: PUSH
14177: LD_INT 14
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: ST_TO_ADDR
14184: GO 14503
14186: LD_INT 42
14188: DOUBLE
14189: EQUAL
14190: IFTRUE 14194
14192: GO 14220
14194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14195: LD_ADDR_VAR 0 3
14199: PUSH
14200: LD_INT 21
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_INT 23
14208: PUSH
14209: LD_INT 24
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: ST_TO_ADDR
14218: GO 14503
14220: LD_INT 43
14222: DOUBLE
14223: EQUAL
14224: IFTRUE 14228
14226: GO 14254
14228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14229: LD_ADDR_VAR 0 3
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 23
14242: PUSH
14243: LD_INT 24
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: ST_TO_ADDR
14252: GO 14503
14254: LD_INT 44
14256: DOUBLE
14257: EQUAL
14258: IFTRUE 14262
14260: GO 14288
14262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14263: LD_ADDR_VAR 0 3
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 23
14276: PUSH
14277: LD_INT 24
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: ST_TO_ADDR
14286: GO 14503
14288: LD_INT 45
14290: DOUBLE
14291: EQUAL
14292: IFTRUE 14296
14294: GO 14322
14296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14297: LD_ADDR_VAR 0 3
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_INT 23
14310: PUSH
14311: LD_INT 24
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: ST_TO_ADDR
14320: GO 14503
14322: LD_INT 49
14324: DOUBLE
14325: EQUAL
14326: IFTRUE 14330
14328: GO 14356
14330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 21
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: LD_INT 23
14344: PUSH
14345: LD_INT 24
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: ST_TO_ADDR
14354: GO 14503
14356: LD_INT 51
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14390
14364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14365: LD_ADDR_VAR 0 3
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 22
14375: PUSH
14376: LD_INT 23
14378: PUSH
14379: LD_INT 24
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: ST_TO_ADDR
14388: GO 14503
14390: LD_INT 52
14392: DOUBLE
14393: EQUAL
14394: IFTRUE 14398
14396: GO 14424
14398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_INT 21
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 23
14412: PUSH
14413: LD_INT 24
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: ST_TO_ADDR
14422: GO 14503
14424: LD_INT 53
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14450
14432: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14433: LD_ADDR_VAR 0 3
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: ST_TO_ADDR
14448: GO 14503
14450: LD_INT 46
14452: DOUBLE
14453: EQUAL
14454: IFTRUE 14458
14456: GO 14476
14458: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: LD_INT 23
14466: PUSH
14467: LD_INT 24
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: ST_TO_ADDR
14474: GO 14503
14476: LD_INT 47
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14502
14484: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 23
14492: PUSH
14493: LD_INT 24
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: ST_TO_ADDR
14500: GO 14503
14502: POP
// result := ( chassis in result ) ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: LD_VAR 0 1
14512: PUSH
14513: LD_VAR 0 3
14517: IN
14518: ST_TO_ADDR
// end ;
14519: LD_VAR 0 3
14523: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14524: LD_INT 0
14526: PPUSH
14527: PPUSH
14528: PPUSH
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
// result := array ;
14533: LD_ADDR_VAR 0 5
14537: PUSH
14538: LD_VAR 0 1
14542: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14543: LD_VAR 0 1
14547: NOT
14548: IFTRUE 14557
14550: PUSH
14551: LD_VAR 0 2
14555: NOT
14556: OR
14557: IFTRUE 14566
14559: PUSH
14560: LD_VAR 0 3
14564: NOT
14565: OR
14566: IFTRUE 14580
14568: PUSH
14569: LD_VAR 0 2
14573: PUSH
14574: LD_VAR 0 1
14578: GREATER
14579: OR
14580: IFTRUE 14594
14582: PUSH
14583: LD_VAR 0 3
14587: PUSH
14588: LD_VAR 0 1
14592: GREATER
14593: OR
14594: IFFALSE 14598
// exit ;
14596: GO 14894
// if direction then
14598: LD_VAR 0 4
14602: IFFALSE 14666
// begin d := 1 ;
14604: LD_ADDR_VAR 0 9
14608: PUSH
14609: LD_INT 1
14611: ST_TO_ADDR
// if i_from > i_to then
14612: LD_VAR 0 2
14616: PUSH
14617: LD_VAR 0 3
14621: GREATER
14622: IFFALSE 14648
// length := ( array - i_from ) + i_to else
14624: LD_ADDR_VAR 0 11
14628: PUSH
14629: LD_VAR 0 1
14633: PUSH
14634: LD_VAR 0 2
14638: MINUS
14639: PUSH
14640: LD_VAR 0 3
14644: PLUS
14645: ST_TO_ADDR
14646: GO 14664
// length := i_to - i_from ;
14648: LD_ADDR_VAR 0 11
14652: PUSH
14653: LD_VAR 0 3
14657: PUSH
14658: LD_VAR 0 2
14662: MINUS
14663: ST_TO_ADDR
// end else
14664: GO 14727
// begin d := - 1 ;
14666: LD_ADDR_VAR 0 9
14670: PUSH
14671: LD_INT 1
14673: NEG
14674: ST_TO_ADDR
// if i_from > i_to then
14675: LD_VAR 0 2
14679: PUSH
14680: LD_VAR 0 3
14684: GREATER
14685: IFFALSE 14705
// length := i_from - i_to else
14687: LD_ADDR_VAR 0 11
14691: PUSH
14692: LD_VAR 0 2
14696: PUSH
14697: LD_VAR 0 3
14701: MINUS
14702: ST_TO_ADDR
14703: GO 14727
// length := ( array - i_to ) + i_from ;
14705: LD_ADDR_VAR 0 11
14709: PUSH
14710: LD_VAR 0 1
14714: PUSH
14715: LD_VAR 0 3
14719: MINUS
14720: PUSH
14721: LD_VAR 0 2
14725: PLUS
14726: ST_TO_ADDR
// end ; if not length then
14727: LD_VAR 0 11
14731: NOT
14732: IFFALSE 14736
// exit ;
14734: GO 14894
// tmp := array ;
14736: LD_ADDR_VAR 0 10
14740: PUSH
14741: LD_VAR 0 1
14745: ST_TO_ADDR
// for i = 1 to length do
14746: LD_ADDR_VAR 0 6
14750: PUSH
14751: DOUBLE
14752: LD_INT 1
14754: DEC
14755: ST_TO_ADDR
14756: LD_VAR 0 11
14760: PUSH
14761: FOR_TO
14762: IFFALSE 14882
// begin for j = 1 to array do
14764: LD_ADDR_VAR 0 7
14768: PUSH
14769: DOUBLE
14770: LD_INT 1
14772: DEC
14773: ST_TO_ADDR
14774: LD_VAR 0 1
14778: PUSH
14779: FOR_TO
14780: IFFALSE 14868
// begin k := j + d ;
14782: LD_ADDR_VAR 0 8
14786: PUSH
14787: LD_VAR 0 7
14791: PUSH
14792: LD_VAR 0 9
14796: PLUS
14797: ST_TO_ADDR
// if k > array then
14798: LD_VAR 0 8
14802: PUSH
14803: LD_VAR 0 1
14807: GREATER
14808: IFFALSE 14818
// k := 1 ;
14810: LD_ADDR_VAR 0 8
14814: PUSH
14815: LD_INT 1
14817: ST_TO_ADDR
// if not k then
14818: LD_VAR 0 8
14822: NOT
14823: IFFALSE 14835
// k := array ;
14825: LD_ADDR_VAR 0 8
14829: PUSH
14830: LD_VAR 0 1
14834: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14835: LD_ADDR_VAR 0 10
14839: PUSH
14840: LD_VAR 0 10
14844: PPUSH
14845: LD_VAR 0 8
14849: PPUSH
14850: LD_VAR 0 1
14854: PUSH
14855: LD_VAR 0 7
14859: ARRAY
14860: PPUSH
14861: CALL_OW 1
14865: ST_TO_ADDR
// end ;
14866: GO 14779
14868: POP
14869: POP
// array := tmp ;
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: LD_VAR 0 10
14879: ST_TO_ADDR
// end ;
14880: GO 14761
14882: POP
14883: POP
// result := array ;
14884: LD_ADDR_VAR 0 5
14888: PUSH
14889: LD_VAR 0 1
14893: ST_TO_ADDR
// end ;
14894: LD_VAR 0 5
14898: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14899: LD_INT 0
14901: PPUSH
14902: PPUSH
// result := 0 ;
14903: LD_ADDR_VAR 0 3
14907: PUSH
14908: LD_INT 0
14910: ST_TO_ADDR
// if not array or not value in array then
14911: LD_VAR 0 1
14915: NOT
14916: IFTRUE 14931
14918: PUSH
14919: LD_VAR 0 2
14923: PUSH
14924: LD_VAR 0 1
14928: IN
14929: NOT
14930: OR
14931: IFFALSE 14935
// exit ;
14933: GO 14989
// for i = 1 to array do
14935: LD_ADDR_VAR 0 4
14939: PUSH
14940: DOUBLE
14941: LD_INT 1
14943: DEC
14944: ST_TO_ADDR
14945: LD_VAR 0 1
14949: PUSH
14950: FOR_TO
14951: IFFALSE 14987
// if value = array [ i ] then
14953: LD_VAR 0 2
14957: PUSH
14958: LD_VAR 0 1
14962: PUSH
14963: LD_VAR 0 4
14967: ARRAY
14968: EQUAL
14969: IFFALSE 14985
// begin result := i ;
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_VAR 0 4
14980: ST_TO_ADDR
// exit ;
14981: POP
14982: POP
14983: GO 14989
// end ;
14985: GO 14950
14987: POP
14988: POP
// end ;
14989: LD_VAR 0 3
14993: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14994: LD_INT 0
14996: PPUSH
// vc_chassis := chassis ;
14997: LD_ADDR_OWVAR 37
15001: PUSH
15002: LD_VAR 0 1
15006: ST_TO_ADDR
// vc_engine := engine ;
15007: LD_ADDR_OWVAR 39
15011: PUSH
15012: LD_VAR 0 2
15016: ST_TO_ADDR
// vc_control := control ;
15017: LD_ADDR_OWVAR 38
15021: PUSH
15022: LD_VAR 0 3
15026: ST_TO_ADDR
// vc_weapon := weapon ;
15027: LD_ADDR_OWVAR 40
15031: PUSH
15032: LD_VAR 0 4
15036: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15037: LD_ADDR_OWVAR 41
15041: PUSH
15042: LD_VAR 0 5
15046: ST_TO_ADDR
// end ;
15047: LD_VAR 0 6
15051: RET
// export function WantPlant ( unit ) ; var task ; begin
15052: LD_INT 0
15054: PPUSH
15055: PPUSH
// result := false ;
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_INT 0
15063: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15064: LD_ADDR_VAR 0 3
15068: PUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 437
15078: ST_TO_ADDR
// if task then
15079: LD_VAR 0 3
15083: IFFALSE 15111
// if task [ 1 ] [ 1 ] = p then
15085: LD_VAR 0 3
15089: PUSH
15090: LD_INT 1
15092: ARRAY
15093: PUSH
15094: LD_INT 1
15096: ARRAY
15097: PUSH
15098: LD_STRING p
15100: EQUAL
15101: IFFALSE 15111
// result := true ;
15103: LD_ADDR_VAR 0 2
15107: PUSH
15108: LD_INT 1
15110: ST_TO_ADDR
// end ;
15111: LD_VAR 0 2
15115: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15116: LD_INT 0
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
// if pos < 1 then
15122: LD_VAR 0 2
15126: PUSH
15127: LD_INT 1
15129: LESS
15130: IFFALSE 15134
// exit ;
15132: GO 15437
// if pos = 1 then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: IFFALSE 15175
// result := Replace ( arr , pos [ 1 ] , value ) else
15144: LD_ADDR_VAR 0 4
15148: PUSH
15149: LD_VAR 0 1
15153: PPUSH
15154: LD_VAR 0 2
15158: PUSH
15159: LD_INT 1
15161: ARRAY
15162: PPUSH
15163: LD_VAR 0 3
15167: PPUSH
15168: CALL_OW 1
15172: ST_TO_ADDR
15173: GO 15437
// begin tmp := arr ;
15175: LD_ADDR_VAR 0 6
15179: PUSH
15180: LD_VAR 0 1
15184: ST_TO_ADDR
// s_arr := [ tmp ] ;
15185: LD_ADDR_VAR 0 7
15189: PUSH
15190: LD_VAR 0 6
15194: PUSH
15195: EMPTY
15196: LIST
15197: ST_TO_ADDR
// for i = 1 to pos - 1 do
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: DOUBLE
15204: LD_INT 1
15206: DEC
15207: ST_TO_ADDR
15208: LD_VAR 0 2
15212: PUSH
15213: LD_INT 1
15215: MINUS
15216: PUSH
15217: FOR_TO
15218: IFFALSE 15263
// begin tmp := tmp [ pos [ i ] ] ;
15220: LD_ADDR_VAR 0 6
15224: PUSH
15225: LD_VAR 0 6
15229: PUSH
15230: LD_VAR 0 2
15234: PUSH
15235: LD_VAR 0 5
15239: ARRAY
15240: ARRAY
15241: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15242: LD_ADDR_VAR 0 7
15246: PUSH
15247: LD_VAR 0 7
15251: PUSH
15252: LD_VAR 0 6
15256: PUSH
15257: EMPTY
15258: LIST
15259: ADD
15260: ST_TO_ADDR
// end ;
15261: GO 15217
15263: POP
15264: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15265: LD_ADDR_VAR 0 6
15269: PUSH
15270: LD_VAR 0 6
15274: PPUSH
15275: LD_VAR 0 2
15279: PUSH
15280: LD_VAR 0 2
15284: ARRAY
15285: PPUSH
15286: LD_VAR 0 3
15290: PPUSH
15291: CALL_OW 1
15295: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15296: LD_ADDR_VAR 0 7
15300: PUSH
15301: LD_VAR 0 7
15305: PPUSH
15306: LD_VAR 0 7
15310: PPUSH
15311: LD_VAR 0 6
15315: PPUSH
15316: CALL_OW 1
15320: ST_TO_ADDR
// for i = s_arr downto 2 do
15321: LD_ADDR_VAR 0 5
15325: PUSH
15326: DOUBLE
15327: LD_VAR 0 7
15331: INC
15332: ST_TO_ADDR
15333: LD_INT 2
15335: PUSH
15336: FOR_DOWNTO
15337: IFFALSE 15421
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15339: LD_ADDR_VAR 0 6
15343: PUSH
15344: LD_VAR 0 7
15348: PUSH
15349: LD_VAR 0 5
15353: PUSH
15354: LD_INT 1
15356: MINUS
15357: ARRAY
15358: PPUSH
15359: LD_VAR 0 2
15363: PUSH
15364: LD_VAR 0 5
15368: PUSH
15369: LD_INT 1
15371: MINUS
15372: ARRAY
15373: PPUSH
15374: LD_VAR 0 7
15378: PUSH
15379: LD_VAR 0 5
15383: ARRAY
15384: PPUSH
15385: CALL_OW 1
15389: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15390: LD_ADDR_VAR 0 7
15394: PUSH
15395: LD_VAR 0 7
15399: PPUSH
15400: LD_VAR 0 5
15404: PUSH
15405: LD_INT 1
15407: MINUS
15408: PPUSH
15409: LD_VAR 0 6
15413: PPUSH
15414: CALL_OW 1
15418: ST_TO_ADDR
// end ;
15419: GO 15336
15421: POP
15422: POP
// result := s_arr [ 1 ] ;
15423: LD_ADDR_VAR 0 4
15427: PUSH
15428: LD_VAR 0 7
15432: PUSH
15433: LD_INT 1
15435: ARRAY
15436: ST_TO_ADDR
// end ; end ;
15437: LD_VAR 0 4
15441: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15442: LD_INT 0
15444: PPUSH
15445: PPUSH
// if not list then
15446: LD_VAR 0 1
15450: NOT
15451: IFFALSE 15455
// exit ;
15453: GO 15546
// i := list [ pos1 ] ;
15455: LD_ADDR_VAR 0 5
15459: PUSH
15460: LD_VAR 0 1
15464: PUSH
15465: LD_VAR 0 2
15469: ARRAY
15470: ST_TO_ADDR
// if not i then
15471: LD_VAR 0 5
15475: NOT
15476: IFFALSE 15480
// exit ;
15478: GO 15546
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15480: LD_ADDR_VAR 0 1
15484: PUSH
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_VAR 0 2
15494: PPUSH
15495: LD_VAR 0 1
15499: PUSH
15500: LD_VAR 0 3
15504: ARRAY
15505: PPUSH
15506: CALL_OW 1
15510: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15511: LD_ADDR_VAR 0 1
15515: PUSH
15516: LD_VAR 0 1
15520: PPUSH
15521: LD_VAR 0 3
15525: PPUSH
15526: LD_VAR 0 5
15530: PPUSH
15531: CALL_OW 1
15535: ST_TO_ADDR
// result := list ;
15536: LD_ADDR_VAR 0 4
15540: PUSH
15541: LD_VAR 0 1
15545: ST_TO_ADDR
// end ;
15546: LD_VAR 0 4
15550: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15551: LD_INT 0
15553: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15554: LD_ADDR_VAR 0 5
15558: PUSH
15559: LD_VAR 0 1
15563: PPUSH
15564: CALL_OW 250
15568: PPUSH
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL_OW 251
15578: PPUSH
15579: LD_VAR 0 2
15583: PPUSH
15584: LD_VAR 0 3
15588: PPUSH
15589: LD_VAR 0 4
15593: PPUSH
15594: CALL 15976 0 5
15598: ST_TO_ADDR
// end ;
15599: LD_VAR 0 5
15603: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
// if not list or not unit then
15610: LD_VAR 0 2
15614: NOT
15615: IFTRUE 15624
15617: PUSH
15618: LD_VAR 0 1
15622: NOT
15623: OR
15624: IFFALSE 15628
// exit ;
15626: GO 15971
// result := [ ] ;
15628: LD_ADDR_VAR 0 5
15632: PUSH
15633: EMPTY
15634: ST_TO_ADDR
// for i in list do
15635: LD_ADDR_VAR 0 6
15639: PUSH
15640: LD_VAR 0 2
15644: PUSH
15645: FOR_IN
15646: IFFALSE 15864
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15648: LD_ADDR_VAR 0 8
15652: PUSH
15653: LD_VAR 0 1
15657: PPUSH
15658: LD_VAR 0 6
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: LD_VAR 0 6
15671: PUSH
15672: LD_INT 2
15674: ARRAY
15675: PPUSH
15676: CALL_OW 297
15680: ST_TO_ADDR
// if not Count ( result ) then
15681: LD_VAR 0 5
15685: PPUSH
15686: CALL 12232 0 1
15690: NOT
15691: IFFALSE 15724
// begin result := Join ( result , [ i , tmp ] ) ;
15693: LD_ADDR_VAR 0 5
15697: PUSH
15698: LD_VAR 0 5
15702: PPUSH
15703: LD_VAR 0 6
15707: PUSH
15708: LD_VAR 0 8
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PPUSH
15717: CALL 48164 0 2
15721: ST_TO_ADDR
// continue ;
15722: GO 15645
// end ; if result [ result ] [ 2 ] <= tmp then
15724: LD_VAR 0 5
15728: PUSH
15729: LD_VAR 0 5
15733: ARRAY
15734: PUSH
15735: LD_INT 2
15737: ARRAY
15738: PUSH
15739: LD_VAR 0 8
15743: LESSEQUAL
15744: IFFALSE 15777
// result := Join ( result , [ i , tmp ] ) else
15746: LD_ADDR_VAR 0 5
15750: PUSH
15751: LD_VAR 0 5
15755: PPUSH
15756: LD_VAR 0 6
15760: PUSH
15761: LD_VAR 0 8
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PPUSH
15770: CALL 48164 0 2
15774: ST_TO_ADDR
15775: GO 15862
// begin for j := 1 to Count ( result ) do
15777: LD_ADDR_VAR 0 7
15781: PUSH
15782: DOUBLE
15783: LD_INT 1
15785: DEC
15786: ST_TO_ADDR
15787: LD_VAR 0 5
15791: PPUSH
15792: CALL 12232 0 1
15796: PUSH
15797: FOR_TO
15798: IFFALSE 15860
// begin if tmp < result [ j ] [ 2 ] then
15800: LD_VAR 0 8
15804: PUSH
15805: LD_VAR 0 5
15809: PUSH
15810: LD_VAR 0 7
15814: ARRAY
15815: PUSH
15816: LD_INT 2
15818: ARRAY
15819: LESS
15820: IFFALSE 15858
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15822: LD_ADDR_VAR 0 5
15826: PUSH
15827: LD_VAR 0 5
15831: PPUSH
15832: LD_VAR 0 7
15836: PPUSH
15837: LD_VAR 0 6
15841: PUSH
15842: LD_VAR 0 8
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 2
15855: ST_TO_ADDR
// break ;
15856: GO 15860
// end ; end ;
15858: GO 15797
15860: POP
15861: POP
// end ; end ;
15862: GO 15645
15864: POP
15865: POP
// if result and not asc then
15866: LD_VAR 0 5
15870: IFFALSE 15879
15872: PUSH
15873: LD_VAR 0 3
15877: NOT
15878: AND
15879: IFFALSE 15896
// result := ReverseArray ( result ) ;
15881: LD_ADDR_VAR 0 5
15885: PUSH
15886: LD_VAR 0 5
15890: PPUSH
15891: CALL 43254 0 1
15895: ST_TO_ADDR
// tmp := [ ] ;
15896: LD_ADDR_VAR 0 8
15900: PUSH
15901: EMPTY
15902: ST_TO_ADDR
// if mode then
15903: LD_VAR 0 4
15907: IFFALSE 15971
// begin for i := 1 to result do
15909: LD_ADDR_VAR 0 6
15913: PUSH
15914: DOUBLE
15915: LD_INT 1
15917: DEC
15918: ST_TO_ADDR
15919: LD_VAR 0 5
15923: PUSH
15924: FOR_TO
15925: IFFALSE 15959
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15927: LD_ADDR_VAR 0 8
15931: PUSH
15932: LD_VAR 0 8
15936: PPUSH
15937: LD_VAR 0 5
15941: PUSH
15942: LD_VAR 0 6
15946: ARRAY
15947: PUSH
15948: LD_INT 1
15950: ARRAY
15951: PPUSH
15952: CALL 48164 0 2
15956: ST_TO_ADDR
15957: GO 15924
15959: POP
15960: POP
// result := tmp ;
15961: LD_ADDR_VAR 0 5
15965: PUSH
15966: LD_VAR 0 8
15970: ST_TO_ADDR
// end ; end ;
15971: LD_VAR 0 5
15975: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15976: LD_INT 0
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
// if not list then
15982: LD_VAR 0 3
15986: NOT
15987: IFFALSE 15991
// exit ;
15989: GO 16381
// result := [ ] ;
15991: LD_ADDR_VAR 0 6
15995: PUSH
15996: EMPTY
15997: ST_TO_ADDR
// for i in list do
15998: LD_ADDR_VAR 0 7
16002: PUSH
16003: LD_VAR 0 3
16007: PUSH
16008: FOR_IN
16009: IFFALSE 16211
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16011: LD_ADDR_VAR 0 9
16015: PUSH
16016: LD_VAR 0 7
16020: PPUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: LD_VAR 0 2
16030: PPUSH
16031: CALL_OW 297
16035: ST_TO_ADDR
// if not result then
16036: LD_VAR 0 6
16040: NOT
16041: IFFALSE 16067
// result := [ [ i , tmp ] ] else
16043: LD_ADDR_VAR 0 6
16047: PUSH
16048: LD_VAR 0 7
16052: PUSH
16053: LD_VAR 0 9
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: ST_TO_ADDR
16065: GO 16209
// begin if result [ result ] [ 2 ] <= tmp then
16067: LD_VAR 0 6
16071: PUSH
16072: LD_VAR 0 6
16076: ARRAY
16077: PUSH
16078: LD_INT 2
16080: ARRAY
16081: PUSH
16082: LD_VAR 0 9
16086: LESSEQUAL
16087: IFFALSE 16129
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16089: LD_ADDR_VAR 0 6
16093: PUSH
16094: LD_VAR 0 6
16098: PPUSH
16099: LD_VAR 0 6
16103: PUSH
16104: LD_INT 1
16106: PLUS
16107: PPUSH
16108: LD_VAR 0 7
16112: PUSH
16113: LD_VAR 0 9
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 2
16126: ST_TO_ADDR
16127: GO 16209
// for j := 1 to result do
16129: LD_ADDR_VAR 0 8
16133: PUSH
16134: DOUBLE
16135: LD_INT 1
16137: DEC
16138: ST_TO_ADDR
16139: LD_VAR 0 6
16143: PUSH
16144: FOR_TO
16145: IFFALSE 16207
// begin if tmp < result [ j ] [ 2 ] then
16147: LD_VAR 0 9
16151: PUSH
16152: LD_VAR 0 6
16156: PUSH
16157: LD_VAR 0 8
16161: ARRAY
16162: PUSH
16163: LD_INT 2
16165: ARRAY
16166: LESS
16167: IFFALSE 16205
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16169: LD_ADDR_VAR 0 6
16173: PUSH
16174: LD_VAR 0 6
16178: PPUSH
16179: LD_VAR 0 8
16183: PPUSH
16184: LD_VAR 0 7
16188: PUSH
16189: LD_VAR 0 9
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 2
16202: ST_TO_ADDR
// break ;
16203: GO 16207
// end ; end ;
16205: GO 16144
16207: POP
16208: POP
// end ; end ;
16209: GO 16008
16211: POP
16212: POP
// if result and not asc then
16213: LD_VAR 0 6
16217: IFFALSE 16226
16219: PUSH
16220: LD_VAR 0 4
16224: NOT
16225: AND
16226: IFFALSE 16301
// begin tmp := result ;
16228: LD_ADDR_VAR 0 9
16232: PUSH
16233: LD_VAR 0 6
16237: ST_TO_ADDR
// for i = tmp downto 1 do
16238: LD_ADDR_VAR 0 7
16242: PUSH
16243: DOUBLE
16244: LD_VAR 0 9
16248: INC
16249: ST_TO_ADDR
16250: LD_INT 1
16252: PUSH
16253: FOR_DOWNTO
16254: IFFALSE 16299
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16256: LD_ADDR_VAR 0 6
16260: PUSH
16261: LD_VAR 0 6
16265: PPUSH
16266: LD_VAR 0 9
16270: PUSH
16271: LD_VAR 0 7
16275: MINUS
16276: PUSH
16277: LD_INT 1
16279: PLUS
16280: PPUSH
16281: LD_VAR 0 9
16285: PUSH
16286: LD_VAR 0 7
16290: ARRAY
16291: PPUSH
16292: CALL_OW 1
16296: ST_TO_ADDR
16297: GO 16253
16299: POP
16300: POP
// end ; tmp := [ ] ;
16301: LD_ADDR_VAR 0 9
16305: PUSH
16306: EMPTY
16307: ST_TO_ADDR
// if mode then
16308: LD_VAR 0 5
16312: IFFALSE 16381
// begin for i = 1 to result do
16314: LD_ADDR_VAR 0 7
16318: PUSH
16319: DOUBLE
16320: LD_INT 1
16322: DEC
16323: ST_TO_ADDR
16324: LD_VAR 0 6
16328: PUSH
16329: FOR_TO
16330: IFFALSE 16369
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16332: LD_ADDR_VAR 0 9
16336: PUSH
16337: LD_VAR 0 9
16341: PPUSH
16342: LD_VAR 0 7
16346: PPUSH
16347: LD_VAR 0 6
16351: PUSH
16352: LD_VAR 0 7
16356: ARRAY
16357: PUSH
16358: LD_INT 1
16360: ARRAY
16361: PPUSH
16362: CALL_OW 1
16366: ST_TO_ADDR
16367: GO 16329
16369: POP
16370: POP
// result := tmp ;
16371: LD_ADDR_VAR 0 6
16375: PUSH
16376: LD_VAR 0 9
16380: ST_TO_ADDR
// end ; end ;
16381: LD_VAR 0 6
16385: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16386: LD_INT 0
16388: PPUSH
16389: PPUSH
16390: PPUSH
16391: PPUSH
16392: PPUSH
16393: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16394: LD_ADDR_VAR 0 5
16398: PUSH
16399: LD_INT 0
16401: PUSH
16402: LD_INT 0
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: EMPTY
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: ST_TO_ADDR
// if not x or not y then
16416: LD_VAR 0 2
16420: NOT
16421: IFTRUE 16430
16423: PUSH
16424: LD_VAR 0 3
16428: NOT
16429: OR
16430: IFFALSE 16434
// exit ;
16432: GO 18090
// if not range then
16434: LD_VAR 0 4
16438: NOT
16439: IFFALSE 16449
// range := 10 ;
16441: LD_ADDR_VAR 0 4
16445: PUSH
16446: LD_INT 10
16448: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16449: LD_ADDR_VAR 0 8
16453: PUSH
16454: LD_INT 81
16456: PUSH
16457: LD_VAR 0 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 92
16468: PUSH
16469: LD_VAR 0 2
16473: PUSH
16474: LD_VAR 0 3
16478: PUSH
16479: LD_VAR 0 4
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 3
16492: PUSH
16493: LD_INT 21
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: ST_TO_ADDR
// if not tmp then
16517: LD_VAR 0 8
16521: NOT
16522: IFFALSE 16526
// exit ;
16524: GO 18090
// for i in tmp do
16526: LD_ADDR_VAR 0 6
16530: PUSH
16531: LD_VAR 0 8
16535: PUSH
16536: FOR_IN
16537: IFFALSE 18065
// begin points := [ 0 , 0 , 0 ] ;
16539: LD_ADDR_VAR 0 9
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: LD_INT 0
16549: PUSH
16550: LD_INT 0
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: ST_TO_ADDR
// bpoints := 1 ;
16558: LD_ADDR_VAR 0 10
16562: PUSH
16563: LD_INT 1
16565: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16566: LD_VAR 0 6
16570: PPUSH
16571: CALL_OW 247
16575: PUSH
16576: LD_INT 1
16578: DOUBLE
16579: EQUAL
16580: IFTRUE 16584
16582: GO 17166
16584: POP
// begin if GetClass ( i ) = 1 then
16585: LD_VAR 0 6
16589: PPUSH
16590: CALL_OW 257
16594: PUSH
16595: LD_INT 1
16597: EQUAL
16598: IFFALSE 16619
// points := [ 10 , 5 , 3 ] ;
16600: LD_ADDR_VAR 0 9
16604: PUSH
16605: LD_INT 10
16607: PUSH
16608: LD_INT 5
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16619: LD_VAR 0 6
16623: PPUSH
16624: CALL_OW 257
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 4
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: IN
16643: IFFALSE 16664
// points := [ 3 , 2 , 1 ] ;
16645: LD_ADDR_VAR 0 9
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16664: LD_VAR 0 6
16668: PPUSH
16669: CALL_OW 257
16673: PUSH
16674: LD_INT 5
16676: EQUAL
16677: IFFALSE 16698
// points := [ 130 , 5 , 2 ] ;
16679: LD_ADDR_VAR 0 9
16683: PUSH
16684: LD_INT 130
16686: PUSH
16687: LD_INT 5
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16698: LD_VAR 0 6
16702: PPUSH
16703: CALL_OW 257
16707: PUSH
16708: LD_INT 8
16710: EQUAL
16711: IFFALSE 16732
// points := [ 35 , 35 , 30 ] ;
16713: LD_ADDR_VAR 0 9
16717: PUSH
16718: LD_INT 35
16720: PUSH
16721: LD_INT 35
16723: PUSH
16724: LD_INT 30
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16732: LD_VAR 0 6
16736: PPUSH
16737: CALL_OW 257
16741: PUSH
16742: LD_INT 9
16744: EQUAL
16745: IFFALSE 16766
// points := [ 20 , 55 , 40 ] ;
16747: LD_ADDR_VAR 0 9
16751: PUSH
16752: LD_INT 20
16754: PUSH
16755: LD_INT 55
16757: PUSH
16758: LD_INT 40
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16766: LD_VAR 0 6
16770: PPUSH
16771: CALL_OW 257
16775: PUSH
16776: LD_INT 12
16778: PUSH
16779: LD_INT 16
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: IN
16786: IFFALSE 16807
// points := [ 5 , 3 , 2 ] ;
16788: LD_ADDR_VAR 0 9
16792: PUSH
16793: LD_INT 5
16795: PUSH
16796: LD_INT 3
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16807: LD_VAR 0 6
16811: PPUSH
16812: CALL_OW 257
16816: PUSH
16817: LD_INT 17
16819: EQUAL
16820: IFFALSE 16841
// points := [ 100 , 50 , 75 ] ;
16822: LD_ADDR_VAR 0 9
16826: PUSH
16827: LD_INT 100
16829: PUSH
16830: LD_INT 50
16832: PUSH
16833: LD_INT 75
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16841: LD_VAR 0 6
16845: PPUSH
16846: CALL_OW 257
16850: PUSH
16851: LD_INT 15
16853: EQUAL
16854: IFFALSE 16875
// points := [ 10 , 5 , 3 ] ;
16856: LD_ADDR_VAR 0 9
16860: PUSH
16861: LD_INT 10
16863: PUSH
16864: LD_INT 5
16866: PUSH
16867: LD_INT 3
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16875: LD_VAR 0 6
16879: PPUSH
16880: CALL_OW 257
16884: PUSH
16885: LD_INT 14
16887: EQUAL
16888: IFFALSE 16909
// points := [ 10 , 0 , 0 ] ;
16890: LD_ADDR_VAR 0 9
16894: PUSH
16895: LD_INT 10
16897: PUSH
16898: LD_INT 0
16900: PUSH
16901: LD_INT 0
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16909: LD_VAR 0 6
16913: PPUSH
16914: CALL_OW 257
16918: PUSH
16919: LD_INT 11
16921: EQUAL
16922: IFFALSE 16943
// points := [ 30 , 10 , 5 ] ;
16924: LD_ADDR_VAR 0 9
16928: PUSH
16929: LD_INT 30
16931: PUSH
16932: LD_INT 10
16934: PUSH
16935: LD_INT 5
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16943: LD_VAR 0 1
16947: PPUSH
16948: LD_INT 5
16950: PPUSH
16951: CALL_OW 321
16955: PUSH
16956: LD_INT 2
16958: EQUAL
16959: IFFALSE 16976
// bpoints := bpoints * 1.8 ;
16961: LD_ADDR_VAR 0 10
16965: PUSH
16966: LD_VAR 0 10
16970: PUSH
16971: LD_REAL  1.80000000000000E+0000
16974: MUL
16975: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16976: LD_VAR 0 6
16980: PPUSH
16981: CALL_OW 257
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 3
16994: PUSH
16995: LD_INT 4
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: IN
17004: IFFALSE 17024
17006: PUSH
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 51
17014: PPUSH
17015: CALL_OW 321
17019: PUSH
17020: LD_INT 2
17022: EQUAL
17023: AND
17024: IFFALSE 17041
// bpoints := bpoints * 1.2 ;
17026: LD_ADDR_VAR 0 10
17030: PUSH
17031: LD_VAR 0 10
17035: PUSH
17036: LD_REAL  1.20000000000000E+0000
17039: MUL
17040: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17041: LD_VAR 0 6
17045: PPUSH
17046: CALL_OW 257
17050: PUSH
17051: LD_INT 5
17053: PUSH
17054: LD_INT 7
17056: PUSH
17057: LD_INT 9
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: IN
17065: IFFALSE 17085
17067: PUSH
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_INT 52
17075: PPUSH
17076: CALL_OW 321
17080: PUSH
17081: LD_INT 2
17083: EQUAL
17084: AND
17085: IFFALSE 17102
// bpoints := bpoints * 1.5 ;
17087: LD_ADDR_VAR 0 10
17091: PUSH
17092: LD_VAR 0 10
17096: PUSH
17097: LD_REAL  1.50000000000000E+0000
17100: MUL
17101: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17102: LD_VAR 0 1
17106: PPUSH
17107: LD_INT 66
17109: PPUSH
17110: CALL_OW 321
17114: PUSH
17115: LD_INT 2
17117: EQUAL
17118: IFFALSE 17135
// bpoints := bpoints * 1.1 ;
17120: LD_ADDR_VAR 0 10
17124: PUSH
17125: LD_VAR 0 10
17129: PUSH
17130: LD_REAL  1.10000000000000E+0000
17133: MUL
17134: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17135: LD_ADDR_VAR 0 10
17139: PUSH
17140: LD_VAR 0 10
17144: PUSH
17145: LD_VAR 0 6
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 259
17157: PUSH
17158: LD_REAL  1.15000000000000E+0000
17161: MUL
17162: MUL
17163: ST_TO_ADDR
// end ; unit_vehicle :
17164: GO 17994
17166: LD_INT 2
17168: DOUBLE
17169: EQUAL
17170: IFTRUE 17174
17172: GO 17982
17174: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17175: LD_VAR 0 6
17179: PPUSH
17180: CALL_OW 264
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: LD_INT 42
17190: PUSH
17191: LD_INT 24
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: IN
17199: IFFALSE 17220
// points := [ 25 , 5 , 3 ] ;
17201: LD_ADDR_VAR 0 9
17205: PUSH
17206: LD_INT 25
17208: PUSH
17209: LD_INT 5
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17220: LD_VAR 0 6
17224: PPUSH
17225: CALL_OW 264
17229: PUSH
17230: LD_INT 4
17232: PUSH
17233: LD_INT 43
17235: PUSH
17236: LD_INT 25
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: IN
17244: IFFALSE 17265
// points := [ 40 , 15 , 5 ] ;
17246: LD_ADDR_VAR 0 9
17250: PUSH
17251: LD_INT 40
17253: PUSH
17254: LD_INT 15
17256: PUSH
17257: LD_INT 5
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17265: LD_VAR 0 6
17269: PPUSH
17270: CALL_OW 264
17274: PUSH
17275: LD_INT 3
17277: PUSH
17278: LD_INT 23
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: IN
17285: IFFALSE 17306
// points := [ 7 , 25 , 8 ] ;
17287: LD_ADDR_VAR 0 9
17291: PUSH
17292: LD_INT 7
17294: PUSH
17295: LD_INT 25
17297: PUSH
17298: LD_INT 8
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17306: LD_VAR 0 6
17310: PPUSH
17311: CALL_OW 264
17315: PUSH
17316: LD_INT 5
17318: PUSH
17319: LD_INT 27
17321: PUSH
17322: LD_INT 44
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: IN
17330: IFFALSE 17351
// points := [ 14 , 50 , 16 ] ;
17332: LD_ADDR_VAR 0 9
17336: PUSH
17337: LD_INT 14
17339: PUSH
17340: LD_INT 50
17342: PUSH
17343: LD_INT 16
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17351: LD_VAR 0 6
17355: PPUSH
17356: CALL_OW 264
17360: PUSH
17361: LD_INT 6
17363: PUSH
17364: LD_INT 46
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: IN
17371: IFFALSE 17392
// points := [ 32 , 120 , 70 ] ;
17373: LD_ADDR_VAR 0 9
17377: PUSH
17378: LD_INT 32
17380: PUSH
17381: LD_INT 120
17383: PUSH
17384: LD_INT 70
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17392: LD_VAR 0 6
17396: PPUSH
17397: CALL_OW 264
17401: PUSH
17402: LD_INT 7
17404: PUSH
17405: LD_INT 28
17407: PUSH
17408: LD_INT 45
17410: PUSH
17411: LD_INT 92
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: IN
17420: IFFALSE 17441
// points := [ 35 , 20 , 45 ] ;
17422: LD_ADDR_VAR 0 9
17426: PUSH
17427: LD_INT 35
17429: PUSH
17430: LD_INT 20
17432: PUSH
17433: LD_INT 45
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17441: LD_VAR 0 6
17445: PPUSH
17446: CALL_OW 264
17450: PUSH
17451: LD_INT 47
17453: PUSH
17454: EMPTY
17455: LIST
17456: IN
17457: IFFALSE 17478
// points := [ 67 , 45 , 75 ] ;
17459: LD_ADDR_VAR 0 9
17463: PUSH
17464: LD_INT 67
17466: PUSH
17467: LD_INT 45
17469: PUSH
17470: LD_INT 75
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17478: LD_VAR 0 6
17482: PPUSH
17483: CALL_OW 264
17487: PUSH
17488: LD_INT 26
17490: PUSH
17491: EMPTY
17492: LIST
17493: IN
17494: IFFALSE 17515
// points := [ 120 , 30 , 80 ] ;
17496: LD_ADDR_VAR 0 9
17500: PUSH
17501: LD_INT 120
17503: PUSH
17504: LD_INT 30
17506: PUSH
17507: LD_INT 80
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17515: LD_VAR 0 6
17519: PPUSH
17520: CALL_OW 264
17524: PUSH
17525: LD_INT 22
17527: PUSH
17528: EMPTY
17529: LIST
17530: IN
17531: IFFALSE 17552
// points := [ 40 , 1 , 1 ] ;
17533: LD_ADDR_VAR 0 9
17537: PUSH
17538: LD_INT 40
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17552: LD_VAR 0 6
17556: PPUSH
17557: CALL_OW 264
17561: PUSH
17562: LD_INT 29
17564: PUSH
17565: EMPTY
17566: LIST
17567: IN
17568: IFFALSE 17589
// points := [ 70 , 200 , 400 ] ;
17570: LD_ADDR_VAR 0 9
17574: PUSH
17575: LD_INT 70
17577: PUSH
17578: LD_INT 200
17580: PUSH
17581: LD_INT 400
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17589: LD_VAR 0 6
17593: PPUSH
17594: CALL_OW 264
17598: PUSH
17599: LD_INT 14
17601: PUSH
17602: LD_INT 53
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: IN
17609: IFFALSE 17630
// points := [ 40 , 10 , 20 ] ;
17611: LD_ADDR_VAR 0 9
17615: PUSH
17616: LD_INT 40
17618: PUSH
17619: LD_INT 10
17621: PUSH
17622: LD_INT 20
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17630: LD_VAR 0 6
17634: PPUSH
17635: CALL_OW 264
17639: PUSH
17640: LD_INT 9
17642: PUSH
17643: EMPTY
17644: LIST
17645: IN
17646: IFFALSE 17667
// points := [ 5 , 70 , 20 ] ;
17648: LD_ADDR_VAR 0 9
17652: PUSH
17653: LD_INT 5
17655: PUSH
17656: LD_INT 70
17658: PUSH
17659: LD_INT 20
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17667: LD_VAR 0 6
17671: PPUSH
17672: CALL_OW 264
17676: PUSH
17677: LD_INT 10
17679: PUSH
17680: EMPTY
17681: LIST
17682: IN
17683: IFFALSE 17704
// points := [ 35 , 110 , 70 ] ;
17685: LD_ADDR_VAR 0 9
17689: PUSH
17690: LD_INT 35
17692: PUSH
17693: LD_INT 110
17695: PUSH
17696: LD_INT 70
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17704: LD_VAR 0 6
17708: PPUSH
17709: CALL_OW 265
17713: PUSH
17714: LD_INT 25
17716: EQUAL
17717: IFFALSE 17738
// points := [ 80 , 65 , 100 ] ;
17719: LD_ADDR_VAR 0 9
17723: PUSH
17724: LD_INT 80
17726: PUSH
17727: LD_INT 65
17729: PUSH
17730: LD_INT 100
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17738: LD_VAR 0 6
17742: PPUSH
17743: CALL_OW 263
17747: PUSH
17748: LD_INT 1
17750: EQUAL
17751: IFFALSE 17786
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17753: LD_ADDR_VAR 0 10
17757: PUSH
17758: LD_VAR 0 10
17762: PUSH
17763: LD_VAR 0 6
17767: PPUSH
17768: CALL_OW 311
17772: PPUSH
17773: LD_INT 3
17775: PPUSH
17776: CALL_OW 259
17780: PUSH
17781: LD_INT 4
17783: MUL
17784: MUL
17785: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17786: LD_VAR 0 6
17790: PPUSH
17791: CALL_OW 263
17795: PUSH
17796: LD_INT 2
17798: EQUAL
17799: IFFALSE 17850
// begin j := IsControledBy ( i ) ;
17801: LD_ADDR_VAR 0 7
17805: PUSH
17806: LD_VAR 0 6
17810: PPUSH
17811: CALL_OW 312
17815: ST_TO_ADDR
// if j then
17816: LD_VAR 0 7
17820: IFFALSE 17850
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17822: LD_ADDR_VAR 0 10
17826: PUSH
17827: LD_VAR 0 10
17831: PUSH
17832: LD_VAR 0 7
17836: PPUSH
17837: LD_INT 3
17839: PPUSH
17840: CALL_OW 259
17844: PUSH
17845: LD_INT 3
17847: MUL
17848: MUL
17849: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17850: LD_VAR 0 6
17854: PPUSH
17855: CALL_OW 264
17859: PUSH
17860: LD_INT 5
17862: PUSH
17863: LD_INT 6
17865: PUSH
17866: LD_INT 46
17868: PUSH
17869: LD_INT 44
17871: PUSH
17872: LD_INT 47
17874: PUSH
17875: LD_INT 45
17877: PUSH
17878: LD_INT 28
17880: PUSH
17881: LD_INT 7
17883: PUSH
17884: LD_INT 27
17886: PUSH
17887: LD_INT 29
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: IN
17902: IFFALSE 17922
17904: PUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: LD_INT 52
17912: PPUSH
17913: CALL_OW 321
17917: PUSH
17918: LD_INT 2
17920: EQUAL
17921: AND
17922: IFFALSE 17939
// bpoints := bpoints * 1.2 ;
17924: LD_ADDR_VAR 0 10
17928: PUSH
17929: LD_VAR 0 10
17933: PUSH
17934: LD_REAL  1.20000000000000E+0000
17937: MUL
17938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17939: LD_VAR 0 6
17943: PPUSH
17944: CALL_OW 264
17948: PUSH
17949: LD_INT 6
17951: PUSH
17952: LD_INT 46
17954: PUSH
17955: LD_INT 47
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: IN
17963: IFFALSE 17980
// bpoints := bpoints * 1.2 ;
17965: LD_ADDR_VAR 0 10
17969: PUSH
17970: LD_VAR 0 10
17974: PUSH
17975: LD_REAL  1.20000000000000E+0000
17978: MUL
17979: ST_TO_ADDR
// end ; unit_building :
17980: GO 17994
17982: LD_INT 3
17984: DOUBLE
17985: EQUAL
17986: IFTRUE 17990
17988: GO 17993
17990: POP
// ; end ;
17991: GO 17994
17993: POP
// for j = 1 to 3 do
17994: LD_ADDR_VAR 0 7
17998: PUSH
17999: DOUBLE
18000: LD_INT 1
18002: DEC
18003: ST_TO_ADDR
18004: LD_INT 3
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18061
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18010: LD_ADDR_VAR 0 5
18014: PUSH
18015: LD_VAR 0 5
18019: PPUSH
18020: LD_VAR 0 7
18024: PPUSH
18025: LD_VAR 0 5
18029: PUSH
18030: LD_VAR 0 7
18034: ARRAY
18035: PUSH
18036: LD_VAR 0 9
18040: PUSH
18041: LD_VAR 0 7
18045: ARRAY
18046: PUSH
18047: LD_VAR 0 10
18051: MUL
18052: PLUS
18053: PPUSH
18054: CALL_OW 1
18058: ST_TO_ADDR
18059: GO 18007
18061: POP
18062: POP
// end ;
18063: GO 16536
18065: POP
18066: POP
// result := Replace ( result , 4 , tmp ) ;
18067: LD_ADDR_VAR 0 5
18071: PUSH
18072: LD_VAR 0 5
18076: PPUSH
18077: LD_INT 4
18079: PPUSH
18080: LD_VAR 0 8
18084: PPUSH
18085: CALL_OW 1
18089: ST_TO_ADDR
// end ;
18090: LD_VAR 0 5
18094: RET
// export function DangerAtRange ( unit , range ) ; begin
18095: LD_INT 0
18097: PPUSH
// if not unit then
18098: LD_VAR 0 1
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18152
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18107: LD_ADDR_VAR 0 3
18111: PUSH
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 255
18121: PPUSH
18122: LD_VAR 0 1
18126: PPUSH
18127: CALL_OW 250
18131: PPUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 251
18141: PPUSH
18142: LD_VAR 0 2
18146: PPUSH
18147: CALL 16386 0 4
18151: ST_TO_ADDR
// end ;
18152: LD_VAR 0 3
18156: RET
// export function DangerInArea ( side , area ) ; begin
18157: LD_INT 0
18159: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18160: LD_ADDR_VAR 0 3
18164: PUSH
18165: LD_VAR 0 2
18169: PPUSH
18170: LD_INT 81
18172: PUSH
18173: LD_VAR 0 1
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 70
18186: ST_TO_ADDR
// end ;
18187: LD_VAR 0 3
18191: RET
// export function IsExtension ( b ) ; begin
18192: LD_INT 0
18194: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18195: LD_ADDR_VAR 0 2
18199: PUSH
18200: LD_VAR 0 1
18204: PUSH
18205: LD_INT 23
18207: PUSH
18208: LD_INT 20
18210: PUSH
18211: LD_INT 22
18213: PUSH
18214: LD_INT 17
18216: PUSH
18217: LD_INT 24
18219: PUSH
18220: LD_INT 21
18222: PUSH
18223: LD_INT 19
18225: PUSH
18226: LD_INT 16
18228: PUSH
18229: LD_INT 25
18231: PUSH
18232: LD_INT 18
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: IN
18247: ST_TO_ADDR
// end ;
18248: LD_VAR 0 2
18252: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18253: LD_INT 0
18255: PPUSH
18256: PPUSH
18257: PPUSH
// result := [ ] ;
18258: LD_ADDR_VAR 0 4
18262: PUSH
18263: EMPTY
18264: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18265: LD_ADDR_VAR 0 5
18269: PUSH
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 3
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 70
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 5
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18363
// if checkLink then
18299: LD_VAR 0 3
18303: IFFALSE 18353
// begin for i in tmp do
18305: LD_ADDR_VAR 0 6
18309: PUSH
18310: LD_VAR 0 5
18314: PUSH
18315: FOR_IN
18316: IFFALSE 18351
// if GetBase ( i ) <> base then
18318: LD_VAR 0 6
18322: PPUSH
18323: CALL_OW 274
18327: PUSH
18328: LD_VAR 0 1
18332: NONEQUAL
18333: IFFALSE 18349
// ComLinkToBase ( base , i ) ;
18335: LD_VAR 0 1
18339: PPUSH
18340: LD_VAR 0 6
18344: PPUSH
18345: CALL_OW 169
18349: GO 18315
18351: POP
18352: POP
// end ; result := tmp ;
18353: LD_ADDR_VAR 0 4
18357: PUSH
18358: LD_VAR 0 5
18362: ST_TO_ADDR
// end ;
18363: LD_VAR 0 4
18367: RET
// export function ComComplete ( units , b ) ; var i ; begin
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
// if not units then
18372: LD_VAR 0 1
18376: NOT
18377: IFFALSE 18381
// exit ;
18379: GO 18471
// for i in units do
18381: LD_ADDR_VAR 0 4
18385: PUSH
18386: LD_VAR 0 1
18390: PUSH
18391: FOR_IN
18392: IFFALSE 18469
// if BuildingStatus ( b ) = bs_build then
18394: LD_VAR 0 2
18398: PPUSH
18399: CALL_OW 461
18403: PUSH
18404: LD_INT 1
18406: EQUAL
18407: IFFALSE 18467
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18409: LD_VAR 0 4
18413: PPUSH
18414: LD_STRING h
18416: PUSH
18417: LD_VAR 0 2
18421: PPUSH
18422: CALL_OW 250
18426: PUSH
18427: LD_VAR 0 2
18431: PPUSH
18432: CALL_OW 251
18436: PUSH
18437: LD_VAR 0 2
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: LD_INT 0
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: PPUSH
18463: CALL_OW 446
18467: GO 18391
18469: POP
18470: POP
// end ;
18471: LD_VAR 0 3
18475: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18476: LD_INT 0
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18484: LD_VAR 0 1
18488: NOT
18489: IFTRUE 18506
18491: PUSH
18492: LD_VAR 0 1
18496: PPUSH
18497: CALL_OW 263
18501: PUSH
18502: LD_INT 2
18504: NONEQUAL
18505: OR
18506: IFFALSE 18510
// exit ;
18508: GO 18826
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18510: LD_ADDR_VAR 0 6
18514: PUSH
18515: LD_INT 22
18517: PUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 255
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: LD_INT 30
18537: PUSH
18538: LD_INT 36
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 34
18547: PUSH
18548: LD_INT 31
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 6
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18826
// result := [ ] ;
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: EMPTY
18584: ST_TO_ADDR
// for i in tmp do
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_VAR 0 6
18594: PUSH
18595: FOR_IN
18596: IFFALSE 18667
// begin t := UnitsInside ( i ) ;
18598: LD_ADDR_VAR 0 4
18602: PUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: CALL_OW 313
18612: ST_TO_ADDR
// if t then
18613: LD_VAR 0 4
18617: IFFALSE 18665
// for j in t do
18619: LD_ADDR_VAR 0 7
18623: PUSH
18624: LD_VAR 0 4
18628: PUSH
18629: FOR_IN
18630: IFFALSE 18663
// result := Replace ( result , result + 1 , j ) ;
18632: LD_ADDR_VAR 0 2
18636: PUSH
18637: LD_VAR 0 2
18641: PPUSH
18642: LD_VAR 0 2
18646: PUSH
18647: LD_INT 1
18649: PLUS
18650: PPUSH
18651: LD_VAR 0 7
18655: PPUSH
18656: CALL_OW 1
18660: ST_TO_ADDR
18661: GO 18629
18663: POP
18664: POP
// end ;
18665: GO 18595
18667: POP
18668: POP
// if not result then
18669: LD_VAR 0 2
18673: NOT
18674: IFFALSE 18678
// exit ;
18676: GO 18826
// mech := result [ 1 ] ;
18678: LD_ADDR_VAR 0 5
18682: PUSH
18683: LD_VAR 0 2
18687: PUSH
18688: LD_INT 1
18690: ARRAY
18691: ST_TO_ADDR
// if result > 1 then
18692: LD_VAR 0 2
18696: PUSH
18697: LD_INT 1
18699: GREATER
18700: IFFALSE 18812
// begin for i = 2 to result do
18702: LD_ADDR_VAR 0 3
18706: PUSH
18707: DOUBLE
18708: LD_INT 2
18710: DEC
18711: ST_TO_ADDR
18712: LD_VAR 0 2
18716: PUSH
18717: FOR_TO
18718: IFFALSE 18810
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18720: LD_ADDR_VAR 0 4
18724: PUSH
18725: LD_VAR 0 2
18729: PUSH
18730: LD_VAR 0 3
18734: ARRAY
18735: PPUSH
18736: LD_INT 3
18738: PPUSH
18739: CALL_OW 259
18743: PUSH
18744: LD_VAR 0 2
18748: PUSH
18749: LD_VAR 0 3
18753: ARRAY
18754: PPUSH
18755: CALL_OW 432
18759: MINUS
18760: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18761: LD_VAR 0 4
18765: PUSH
18766: LD_VAR 0 5
18770: PPUSH
18771: LD_INT 3
18773: PPUSH
18774: CALL_OW 259
18778: PUSH
18779: LD_VAR 0 5
18783: PPUSH
18784: CALL_OW 432
18788: MINUS
18789: GREATEREQUAL
18790: IFFALSE 18808
// mech := result [ i ] ;
18792: LD_ADDR_VAR 0 5
18796: PUSH
18797: LD_VAR 0 2
18801: PUSH
18802: LD_VAR 0 3
18806: ARRAY
18807: ST_TO_ADDR
// end ;
18808: GO 18717
18810: POP
18811: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_VAR 0 5
18821: PPUSH
18822: CALL_OW 135
// end ;
18826: LD_VAR 0 2
18830: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18831: LD_INT 0
18833: PPUSH
18834: PPUSH
18835: PPUSH
18836: PPUSH
18837: PPUSH
18838: PPUSH
18839: PPUSH
18840: PPUSH
18841: PPUSH
18842: PPUSH
18843: PPUSH
18844: PPUSH
18845: PPUSH
// result := [ ] ;
18846: LD_ADDR_VAR 0 7
18850: PUSH
18851: EMPTY
18852: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18853: LD_VAR 0 1
18857: PPUSH
18858: CALL_OW 266
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: IN
18873: NOT
18874: IFFALSE 18878
// exit ;
18876: GO 20518
// if name then
18878: LD_VAR 0 3
18882: IFFALSE 18898
// SetBName ( base_dep , name ) ;
18884: LD_VAR 0 1
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL_OW 500
// base := GetBase ( base_dep ) ;
18898: LD_ADDR_VAR 0 15
18902: PUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 274
18912: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18913: LD_ADDR_VAR 0 16
18917: PUSH
18918: LD_VAR 0 1
18922: PPUSH
18923: CALL_OW 255
18927: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18928: LD_ADDR_VAR 0 17
18932: PUSH
18933: LD_VAR 0 1
18937: PPUSH
18938: CALL_OW 248
18942: ST_TO_ADDR
// if sources then
18943: LD_VAR 0 5
18947: IFFALSE 18994
// for i = 1 to 3 do
18949: LD_ADDR_VAR 0 8
18953: PUSH
18954: DOUBLE
18955: LD_INT 1
18957: DEC
18958: ST_TO_ADDR
18959: LD_INT 3
18961: PUSH
18962: FOR_TO
18963: IFFALSE 18992
// AddResourceType ( base , i , sources [ i ] ) ;
18965: LD_VAR 0 15
18969: PPUSH
18970: LD_VAR 0 8
18974: PPUSH
18975: LD_VAR 0 5
18979: PUSH
18980: LD_VAR 0 8
18984: ARRAY
18985: PPUSH
18986: CALL_OW 276
18990: GO 18962
18992: POP
18993: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18994: LD_ADDR_VAR 0 18
18998: PUSH
18999: LD_VAR 0 15
19003: PPUSH
19004: LD_VAR 0 2
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: CALL 18253 0 3
19016: ST_TO_ADDR
// InitHc ;
19017: CALL_OW 19
// InitUc ;
19021: CALL_OW 18
// uc_side := side ;
19025: LD_ADDR_OWVAR 20
19029: PUSH
19030: LD_VAR 0 16
19034: ST_TO_ADDR
// uc_nation := nation ;
19035: LD_ADDR_OWVAR 21
19039: PUSH
19040: LD_VAR 0 17
19044: ST_TO_ADDR
// if buildings then
19045: LD_VAR 0 18
19049: IFFALSE 20377
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19051: LD_ADDR_VAR 0 19
19055: PUSH
19056: LD_VAR 0 18
19060: PPUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 30
19066: PUSH
19067: LD_INT 29
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 30
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 72
19093: ST_TO_ADDR
// if tmp then
19094: LD_VAR 0 19
19098: IFFALSE 19146
// for i in tmp do
19100: LD_ADDR_VAR 0 8
19104: PUSH
19105: LD_VAR 0 19
19109: PUSH
19110: FOR_IN
19111: IFFALSE 19144
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19113: LD_VAR 0 8
19117: PPUSH
19118: CALL_OW 250
19122: PPUSH
19123: LD_VAR 0 8
19127: PPUSH
19128: CALL_OW 251
19132: PPUSH
19133: LD_VAR 0 16
19137: PPUSH
19138: CALL_OW 441
19142: GO 19110
19144: POP
19145: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19146: LD_VAR 0 18
19150: PPUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 30
19156: PUSH
19157: LD_INT 32
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 30
19166: PUSH
19167: LD_INT 33
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 72
19183: IFFALSE 19271
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19185: LD_ADDR_VAR 0 8
19189: PUSH
19190: LD_VAR 0 18
19194: PPUSH
19195: LD_INT 2
19197: PUSH
19198: LD_INT 30
19200: PUSH
19201: LD_INT 32
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 30
19210: PUSH
19211: LD_INT 33
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 72
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19269
// begin if not GetBWeapon ( i ) then
19231: LD_VAR 0 8
19235: PPUSH
19236: CALL_OW 269
19240: NOT
19241: IFFALSE 19267
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19243: LD_VAR 0 8
19247: PPUSH
19248: LD_VAR 0 8
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL 20523 0 2
19262: PPUSH
19263: CALL_OW 431
// end ;
19267: GO 19228
19269: POP
19270: POP
// end ; for i = 1 to personel do
19271: LD_ADDR_VAR 0 8
19275: PUSH
19276: DOUBLE
19277: LD_INT 1
19279: DEC
19280: ST_TO_ADDR
19281: LD_VAR 0 6
19285: PUSH
19286: FOR_TO
19287: IFFALSE 20357
// begin if i > 4 then
19289: LD_VAR 0 8
19293: PUSH
19294: LD_INT 4
19296: GREATER
19297: IFFALSE 19301
// break ;
19299: GO 20357
// case i of 1 :
19301: LD_VAR 0 8
19305: PUSH
19306: LD_INT 1
19308: DOUBLE
19309: EQUAL
19310: IFTRUE 19314
19312: GO 19394
19314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19315: LD_ADDR_VAR 0 12
19319: PUSH
19320: LD_VAR 0 18
19324: PPUSH
19325: LD_INT 22
19327: PUSH
19328: LD_VAR 0 16
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 58
19339: PUSH
19340: EMPTY
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 30
19348: PUSH
19349: LD_INT 32
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 30
19358: PUSH
19359: LD_INT 4
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 30
19368: PUSH
19369: LD_INT 5
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 72
19391: ST_TO_ADDR
19392: GO 19616
19394: LD_INT 2
19396: DOUBLE
19397: EQUAL
19398: IFTRUE 19402
19400: GO 19464
19402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19403: LD_ADDR_VAR 0 12
19407: PUSH
19408: LD_VAR 0 18
19412: PPUSH
19413: LD_INT 22
19415: PUSH
19416: LD_VAR 0 16
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: LD_INT 30
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 30
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PPUSH
19457: CALL_OW 72
19461: ST_TO_ADDR
19462: GO 19616
19464: LD_INT 3
19466: DOUBLE
19467: EQUAL
19468: IFTRUE 19472
19470: GO 19534
19472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19473: LD_ADDR_VAR 0 12
19477: PUSH
19478: LD_VAR 0 18
19482: PPUSH
19483: LD_INT 22
19485: PUSH
19486: LD_VAR 0 16
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: LD_INT 30
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 30
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 72
19531: ST_TO_ADDR
19532: GO 19616
19534: LD_INT 4
19536: DOUBLE
19537: EQUAL
19538: IFTRUE 19542
19540: GO 19615
19542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19543: LD_ADDR_VAR 0 12
19547: PUSH
19548: LD_VAR 0 18
19552: PPUSH
19553: LD_INT 22
19555: PUSH
19556: LD_VAR 0 16
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 30
19570: PUSH
19571: LD_INT 6
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 30
19580: PUSH
19581: LD_INT 7
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 30
19590: PUSH
19591: LD_INT 8
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PPUSH
19608: CALL_OW 72
19612: ST_TO_ADDR
19613: GO 19616
19615: POP
// if i = 1 then
19616: LD_VAR 0 8
19620: PUSH
19621: LD_INT 1
19623: EQUAL
19624: IFFALSE 19735
// begin tmp := [ ] ;
19626: LD_ADDR_VAR 0 19
19630: PUSH
19631: EMPTY
19632: ST_TO_ADDR
// for j in f do
19633: LD_ADDR_VAR 0 9
19637: PUSH
19638: LD_VAR 0 12
19642: PUSH
19643: FOR_IN
19644: IFFALSE 19717
// if GetBType ( j ) = b_bunker then
19646: LD_VAR 0 9
19650: PPUSH
19651: CALL_OW 266
19655: PUSH
19656: LD_INT 32
19658: EQUAL
19659: IFFALSE 19686
// tmp := Insert ( tmp , 1 , j ) else
19661: LD_ADDR_VAR 0 19
19665: PUSH
19666: LD_VAR 0 19
19670: PPUSH
19671: LD_INT 1
19673: PPUSH
19674: LD_VAR 0 9
19678: PPUSH
19679: CALL_OW 2
19683: ST_TO_ADDR
19684: GO 19715
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19686: LD_ADDR_VAR 0 19
19690: PUSH
19691: LD_VAR 0 19
19695: PPUSH
19696: LD_VAR 0 19
19700: PUSH
19701: LD_INT 1
19703: PLUS
19704: PPUSH
19705: LD_VAR 0 9
19709: PPUSH
19710: CALL_OW 2
19714: ST_TO_ADDR
19715: GO 19643
19717: POP
19718: POP
// if tmp then
19719: LD_VAR 0 19
19723: IFFALSE 19735
// f := tmp ;
19725: LD_ADDR_VAR 0 12
19729: PUSH
19730: LD_VAR 0 19
19734: ST_TO_ADDR
// end ; x := personel [ i ] ;
19735: LD_ADDR_VAR 0 13
19739: PUSH
19740: LD_VAR 0 6
19744: PUSH
19745: LD_VAR 0 8
19749: ARRAY
19750: ST_TO_ADDR
// if x = - 1 then
19751: LD_VAR 0 13
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: EQUAL
19760: IFFALSE 19971
// begin for j in f do
19762: LD_ADDR_VAR 0 9
19766: PUSH
19767: LD_VAR 0 12
19771: PUSH
19772: FOR_IN
19773: IFFALSE 19967
// repeat InitHc ;
19775: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19779: LD_VAR 0 9
19783: PPUSH
19784: CALL_OW 266
19788: PUSH
19789: LD_INT 5
19791: EQUAL
19792: IFFALSE 19862
// begin if UnitsInside ( j ) < 3 then
19794: LD_VAR 0 9
19798: PPUSH
19799: CALL_OW 313
19803: PUSH
19804: LD_INT 3
19806: LESS
19807: IFFALSE 19843
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19809: LD_INT 0
19811: PPUSH
19812: LD_INT 5
19814: PUSH
19815: LD_INT 8
19817: PUSH
19818: LD_INT 9
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: PUSH
19826: LD_VAR 0 17
19830: ARRAY
19831: PPUSH
19832: LD_VAR 0 4
19836: PPUSH
19837: CALL_OW 380
19841: GO 19860
// PrepareHuman ( false , i , skill ) ;
19843: LD_INT 0
19845: PPUSH
19846: LD_VAR 0 8
19850: PPUSH
19851: LD_VAR 0 4
19855: PPUSH
19856: CALL_OW 380
// end else
19860: GO 19879
// PrepareHuman ( false , i , skill ) ;
19862: LD_INT 0
19864: PPUSH
19865: LD_VAR 0 8
19869: PPUSH
19870: LD_VAR 0 4
19874: PPUSH
19875: CALL_OW 380
// un := CreateHuman ;
19879: LD_ADDR_VAR 0 14
19883: PUSH
19884: CALL_OW 44
19888: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19889: LD_ADDR_VAR 0 7
19893: PUSH
19894: LD_VAR 0 7
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_VAR 0 14
19906: PPUSH
19907: CALL_OW 2
19911: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19912: LD_VAR 0 14
19916: PPUSH
19917: LD_VAR 0 9
19921: PPUSH
19922: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19926: LD_VAR 0 9
19930: PPUSH
19931: CALL_OW 313
19935: PUSH
19936: LD_INT 6
19938: EQUAL
19939: IFTRUE 19963
19941: PUSH
19942: LD_VAR 0 9
19946: PPUSH
19947: CALL_OW 266
19951: PUSH
19952: LD_INT 32
19954: PUSH
19955: LD_INT 31
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: IN
19962: OR
19963: IFFALSE 19775
19965: GO 19772
19967: POP
19968: POP
// end else
19969: GO 20355
// for j = 1 to x do
19971: LD_ADDR_VAR 0 9
19975: PUSH
19976: DOUBLE
19977: LD_INT 1
19979: DEC
19980: ST_TO_ADDR
19981: LD_VAR 0 13
19985: PUSH
19986: FOR_TO
19987: IFFALSE 20353
// begin InitHc ;
19989: CALL_OW 19
// if not f then
19993: LD_VAR 0 12
19997: NOT
19998: IFFALSE 20087
// begin PrepareHuman ( false , i , skill ) ;
20000: LD_INT 0
20002: PPUSH
20003: LD_VAR 0 8
20007: PPUSH
20008: LD_VAR 0 4
20012: PPUSH
20013: CALL_OW 380
// un := CreateHuman ;
20017: LD_ADDR_VAR 0 14
20021: PUSH
20022: CALL_OW 44
20026: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20027: LD_ADDR_VAR 0 7
20031: PUSH
20032: LD_VAR 0 7
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: LD_VAR 0 14
20044: PPUSH
20045: CALL_OW 2
20049: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20050: LD_VAR 0 14
20054: PPUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 250
20064: PPUSH
20065: LD_VAR 0 1
20069: PPUSH
20070: CALL_OW 251
20074: PPUSH
20075: LD_INT 10
20077: PPUSH
20078: LD_INT 0
20080: PPUSH
20081: CALL_OW 50
// continue ;
20085: GO 19986
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20087: LD_VAR 0 12
20091: PUSH
20092: LD_INT 1
20094: ARRAY
20095: PPUSH
20096: CALL_OW 313
20100: IFFALSE 20128
20102: PUSH
20103: LD_VAR 0 12
20107: PUSH
20108: LD_INT 1
20110: ARRAY
20111: PPUSH
20112: CALL_OW 266
20116: PUSH
20117: LD_INT 32
20119: PUSH
20120: LD_INT 31
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: IN
20127: AND
20128: IFTRUE 20149
20130: PUSH
20131: LD_VAR 0 12
20135: PUSH
20136: LD_INT 1
20138: ARRAY
20139: PPUSH
20140: CALL_OW 313
20144: PUSH
20145: LD_INT 6
20147: EQUAL
20148: OR
20149: IFFALSE 20169
// f := Delete ( f , 1 ) ;
20151: LD_ADDR_VAR 0 12
20155: PUSH
20156: LD_VAR 0 12
20160: PPUSH
20161: LD_INT 1
20163: PPUSH
20164: CALL_OW 3
20168: ST_TO_ADDR
// if not f then
20169: LD_VAR 0 12
20173: NOT
20174: IFFALSE 20192
// begin x := x + 2 ;
20176: LD_ADDR_VAR 0 13
20180: PUSH
20181: LD_VAR 0 13
20185: PUSH
20186: LD_INT 2
20188: PLUS
20189: ST_TO_ADDR
// continue ;
20190: GO 19986
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20192: LD_VAR 0 12
20196: PUSH
20197: LD_INT 1
20199: ARRAY
20200: PPUSH
20201: CALL_OW 266
20205: PUSH
20206: LD_INT 5
20208: EQUAL
20209: IFFALSE 20283
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20211: LD_VAR 0 12
20215: PUSH
20216: LD_INT 1
20218: ARRAY
20219: PPUSH
20220: CALL_OW 313
20224: PUSH
20225: LD_INT 3
20227: LESS
20228: IFFALSE 20264
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20230: LD_INT 0
20232: PPUSH
20233: LD_INT 5
20235: PUSH
20236: LD_INT 8
20238: PUSH
20239: LD_INT 9
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: PUSH
20247: LD_VAR 0 17
20251: ARRAY
20252: PPUSH
20253: LD_VAR 0 4
20257: PPUSH
20258: CALL_OW 380
20262: GO 20281
// PrepareHuman ( false , i , skill ) ;
20264: LD_INT 0
20266: PPUSH
20267: LD_VAR 0 8
20271: PPUSH
20272: LD_VAR 0 4
20276: PPUSH
20277: CALL_OW 380
// end else
20281: GO 20300
// PrepareHuman ( false , i , skill ) ;
20283: LD_INT 0
20285: PPUSH
20286: LD_VAR 0 8
20290: PPUSH
20291: LD_VAR 0 4
20295: PPUSH
20296: CALL_OW 380
// un := CreateHuman ;
20300: LD_ADDR_VAR 0 14
20304: PUSH
20305: CALL_OW 44
20309: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20310: LD_ADDR_VAR 0 7
20314: PUSH
20315: LD_VAR 0 7
20319: PPUSH
20320: LD_INT 1
20322: PPUSH
20323: LD_VAR 0 14
20327: PPUSH
20328: CALL_OW 2
20332: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20333: LD_VAR 0 14
20337: PPUSH
20338: LD_VAR 0 12
20342: PUSH
20343: LD_INT 1
20345: ARRAY
20346: PPUSH
20347: CALL_OW 52
// end ;
20351: GO 19986
20353: POP
20354: POP
// end ;
20355: GO 19286
20357: POP
20358: POP
// result := result ^ buildings ;
20359: LD_ADDR_VAR 0 7
20363: PUSH
20364: LD_VAR 0 7
20368: PUSH
20369: LD_VAR 0 18
20373: ADD
20374: ST_TO_ADDR
// end else
20375: GO 20518
// begin for i = 1 to personel do
20377: LD_ADDR_VAR 0 8
20381: PUSH
20382: DOUBLE
20383: LD_INT 1
20385: DEC
20386: ST_TO_ADDR
20387: LD_VAR 0 6
20391: PUSH
20392: FOR_TO
20393: IFFALSE 20516
// begin if i > 4 then
20395: LD_VAR 0 8
20399: PUSH
20400: LD_INT 4
20402: GREATER
20403: IFFALSE 20407
// break ;
20405: GO 20516
// x := personel [ i ] ;
20407: LD_ADDR_VAR 0 13
20411: PUSH
20412: LD_VAR 0 6
20416: PUSH
20417: LD_VAR 0 8
20421: ARRAY
20422: ST_TO_ADDR
// if x = - 1 then
20423: LD_VAR 0 13
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: EQUAL
20432: IFFALSE 20436
// continue ;
20434: GO 20392
// PrepareHuman ( false , i , skill ) ;
20436: LD_INT 0
20438: PPUSH
20439: LD_VAR 0 8
20443: PPUSH
20444: LD_VAR 0 4
20448: PPUSH
20449: CALL_OW 380
// un := CreateHuman ;
20453: LD_ADDR_VAR 0 14
20457: PUSH
20458: CALL_OW 44
20462: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20463: LD_VAR 0 14
20467: PPUSH
20468: LD_VAR 0 1
20472: PPUSH
20473: CALL_OW 250
20477: PPUSH
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL_OW 251
20487: PPUSH
20488: LD_INT 10
20490: PPUSH
20491: LD_INT 0
20493: PPUSH
20494: CALL_OW 50
// result := result ^ un ;
20498: LD_ADDR_VAR 0 7
20502: PUSH
20503: LD_VAR 0 7
20507: PUSH
20508: LD_VAR 0 14
20512: ADD
20513: ST_TO_ADDR
// end ;
20514: GO 20392
20516: POP
20517: POP
// end ; end ;
20518: LD_VAR 0 7
20522: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20523: LD_INT 0
20525: PPUSH
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
20530: PPUSH
20531: PPUSH
20532: PPUSH
20533: PPUSH
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
20540: PPUSH
// result := false ;
20541: LD_ADDR_VAR 0 3
20545: PUSH
20546: LD_INT 0
20548: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20549: LD_VAR 0 1
20553: NOT
20554: IFTRUE 20579
20556: PUSH
20557: LD_VAR 0 1
20561: PPUSH
20562: CALL_OW 266
20566: PUSH
20567: LD_INT 32
20569: PUSH
20570: LD_INT 33
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: IN
20577: NOT
20578: OR
20579: IFFALSE 20583
// exit ;
20581: GO 21718
// nat := GetNation ( tower ) ;
20583: LD_ADDR_VAR 0 12
20587: PUSH
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 248
20597: ST_TO_ADDR
// side := GetSide ( tower ) ;
20598: LD_ADDR_VAR 0 16
20602: PUSH
20603: LD_VAR 0 1
20607: PPUSH
20608: CALL_OW 255
20612: ST_TO_ADDR
// x := GetX ( tower ) ;
20613: LD_ADDR_VAR 0 10
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 250
20627: ST_TO_ADDR
// y := GetY ( tower ) ;
20628: LD_ADDR_VAR 0 11
20632: PUSH
20633: LD_VAR 0 1
20637: PPUSH
20638: CALL_OW 251
20642: ST_TO_ADDR
// if not x or not y then
20643: LD_VAR 0 10
20647: NOT
20648: IFTRUE 20657
20650: PUSH
20651: LD_VAR 0 11
20655: NOT
20656: OR
20657: IFFALSE 20661
// exit ;
20659: GO 21718
// weapon := 0 ;
20661: LD_ADDR_VAR 0 18
20665: PUSH
20666: LD_INT 0
20668: ST_TO_ADDR
// fac_list := [ ] ;
20669: LD_ADDR_VAR 0 17
20673: PUSH
20674: EMPTY
20675: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20676: LD_ADDR_VAR 0 6
20680: PUSH
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 274
20690: PPUSH
20691: LD_VAR 0 2
20695: PPUSH
20696: LD_INT 0
20698: PPUSH
20699: CALL 18253 0 3
20703: PPUSH
20704: LD_INT 30
20706: PUSH
20707: LD_INT 3
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PPUSH
20714: CALL_OW 72
20718: ST_TO_ADDR
// if not factories then
20719: LD_VAR 0 6
20723: NOT
20724: IFFALSE 20728
// exit ;
20726: GO 21718
// for i in factories do
20728: LD_ADDR_VAR 0 8
20732: PUSH
20733: LD_VAR 0 6
20737: PUSH
20738: FOR_IN
20739: IFFALSE 20764
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20741: LD_ADDR_VAR 0 17
20745: PUSH
20746: LD_VAR 0 17
20750: PUSH
20751: LD_VAR 0 8
20755: PPUSH
20756: CALL_OW 478
20760: UNION
20761: ST_TO_ADDR
20762: GO 20738
20764: POP
20765: POP
// if not fac_list then
20766: LD_VAR 0 17
20770: NOT
20771: IFFALSE 20775
// exit ;
20773: GO 21718
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20775: LD_ADDR_VAR 0 5
20779: PUSH
20780: LD_INT 4
20782: PUSH
20783: LD_INT 5
20785: PUSH
20786: LD_INT 9
20788: PUSH
20789: LD_INT 10
20791: PUSH
20792: LD_INT 6
20794: PUSH
20795: LD_INT 7
20797: PUSH
20798: LD_INT 11
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 27
20812: PUSH
20813: LD_INT 28
20815: PUSH
20816: LD_INT 26
20818: PUSH
20819: LD_INT 30
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 43
20830: PUSH
20831: LD_INT 44
20833: PUSH
20834: LD_INT 46
20836: PUSH
20837: LD_INT 45
20839: PUSH
20840: LD_INT 47
20842: PUSH
20843: LD_INT 49
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 12
20863: ARRAY
20864: ST_TO_ADDR
// list := list isect fac_list ;
20865: LD_ADDR_VAR 0 5
20869: PUSH
20870: LD_VAR 0 5
20874: PUSH
20875: LD_VAR 0 17
20879: ISECT
20880: ST_TO_ADDR
// if not list then
20881: LD_VAR 0 5
20885: NOT
20886: IFFALSE 20890
// exit ;
20888: GO 21718
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20890: LD_VAR 0 12
20894: PUSH
20895: LD_INT 3
20897: EQUAL
20898: IFFALSE 20910
20900: PUSH
20901: LD_INT 49
20903: PUSH
20904: LD_VAR 0 5
20908: IN
20909: AND
20910: IFFALSE 20930
20912: PUSH
20913: LD_INT 31
20915: PPUSH
20916: LD_VAR 0 16
20920: PPUSH
20921: CALL_OW 321
20925: PUSH
20926: LD_INT 2
20928: EQUAL
20929: AND
20930: IFFALSE 20990
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20932: LD_INT 22
20934: PUSH
20935: LD_VAR 0 16
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 35
20946: PUSH
20947: LD_INT 49
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 91
20956: PUSH
20957: LD_VAR 0 1
20961: PUSH
20962: LD_INT 10
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: PPUSH
20975: CALL_OW 69
20979: NOT
20980: IFFALSE 20990
// weapon := ru_time_lapser ;
20982: LD_ADDR_VAR 0 18
20986: PUSH
20987: LD_INT 49
20989: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20990: LD_VAR 0 12
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: IN
21005: IFFALSE 21029
21007: PUSH
21008: LD_INT 11
21010: PUSH
21011: LD_VAR 0 5
21015: IN
21016: IFTRUE 21028
21018: PUSH
21019: LD_INT 30
21021: PUSH
21022: LD_VAR 0 5
21026: IN
21027: OR
21028: AND
21029: IFFALSE 21049
21031: PUSH
21032: LD_INT 6
21034: PPUSH
21035: LD_VAR 0 16
21039: PPUSH
21040: CALL_OW 321
21044: PUSH
21045: LD_INT 2
21047: EQUAL
21048: AND
21049: IFFALSE 21216
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21051: LD_INT 22
21053: PUSH
21054: LD_VAR 0 16
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: LD_INT 35
21068: PUSH
21069: LD_INT 11
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 35
21078: PUSH
21079: LD_INT 30
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 91
21093: PUSH
21094: LD_VAR 0 1
21098: PUSH
21099: LD_INT 18
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 69
21116: NOT
21117: IFFALSE 21193
21119: PUSH
21120: LD_INT 22
21122: PUSH
21123: LD_VAR 0 16
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 30
21137: PUSH
21138: LD_INT 32
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 30
21147: PUSH
21148: LD_INT 33
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 91
21162: PUSH
21163: LD_VAR 0 1
21167: PUSH
21168: LD_INT 12
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: LD_INT 2
21191: GREATER
21192: AND
21193: IFFALSE 21216
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21195: LD_ADDR_VAR 0 18
21199: PUSH
21200: LD_INT 11
21202: PUSH
21203: LD_INT 30
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_VAR 0 12
21214: ARRAY
21215: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21216: LD_VAR 0 18
21220: NOT
21221: IFFALSE 21241
21223: PUSH
21224: LD_INT 40
21226: PPUSH
21227: LD_VAR 0 16
21231: PPUSH
21232: CALL_OW 321
21236: PUSH
21237: LD_INT 2
21239: EQUAL
21240: AND
21241: IFFALSE 21277
21243: PUSH
21244: LD_INT 7
21246: PUSH
21247: LD_VAR 0 5
21251: IN
21252: IFTRUE 21264
21254: PUSH
21255: LD_INT 28
21257: PUSH
21258: LD_VAR 0 5
21262: IN
21263: OR
21264: IFTRUE 21276
21266: PUSH
21267: LD_INT 45
21269: PUSH
21270: LD_VAR 0 5
21274: IN
21275: OR
21276: AND
21277: IFFALSE 21531
// begin hex := GetHexInfo ( x , y ) ;
21279: LD_ADDR_VAR 0 4
21283: PUSH
21284: LD_VAR 0 10
21288: PPUSH
21289: LD_VAR 0 11
21293: PPUSH
21294: CALL_OW 546
21298: ST_TO_ADDR
// if hex [ 1 ] then
21299: LD_VAR 0 4
21303: PUSH
21304: LD_INT 1
21306: ARRAY
21307: IFFALSE 21311
// exit ;
21309: GO 21718
// height := hex [ 2 ] ;
21311: LD_ADDR_VAR 0 15
21315: PUSH
21316: LD_VAR 0 4
21320: PUSH
21321: LD_INT 2
21323: ARRAY
21324: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21325: LD_ADDR_VAR 0 14
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 3
21338: PUSH
21339: LD_INT 5
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: ST_TO_ADDR
// for i in tmp do
21348: LD_ADDR_VAR 0 8
21352: PUSH
21353: LD_VAR 0 14
21357: PUSH
21358: FOR_IN
21359: IFFALSE 21529
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21361: LD_ADDR_VAR 0 9
21365: PUSH
21366: LD_VAR 0 10
21370: PPUSH
21371: LD_VAR 0 8
21375: PPUSH
21376: LD_INT 5
21378: PPUSH
21379: CALL_OW 272
21383: PUSH
21384: LD_VAR 0 11
21388: PPUSH
21389: LD_VAR 0 8
21393: PPUSH
21394: LD_INT 5
21396: PPUSH
21397: CALL_OW 273
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21406: LD_VAR 0 9
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: LD_VAR 0 9
21419: PUSH
21420: LD_INT 2
21422: ARRAY
21423: PPUSH
21424: CALL_OW 488
21428: IFFALSE 21527
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21430: LD_ADDR_VAR 0 4
21434: PUSH
21435: LD_VAR 0 9
21439: PUSH
21440: LD_INT 1
21442: ARRAY
21443: PPUSH
21444: LD_VAR 0 9
21448: PUSH
21449: LD_INT 2
21451: ARRAY
21452: PPUSH
21453: CALL_OW 546
21457: ST_TO_ADDR
// if hex [ 1 ] then
21458: LD_VAR 0 4
21462: PUSH
21463: LD_INT 1
21465: ARRAY
21466: IFFALSE 21470
// continue ;
21468: GO 21358
// h := hex [ 2 ] ;
21470: LD_ADDR_VAR 0 13
21474: PUSH
21475: LD_VAR 0 4
21479: PUSH
21480: LD_INT 2
21482: ARRAY
21483: ST_TO_ADDR
// if h + 7 < height then
21484: LD_VAR 0 13
21488: PUSH
21489: LD_INT 7
21491: PLUS
21492: PUSH
21493: LD_VAR 0 15
21497: LESS
21498: IFFALSE 21527
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21500: LD_ADDR_VAR 0 18
21504: PUSH
21505: LD_INT 7
21507: PUSH
21508: LD_INT 28
21510: PUSH
21511: LD_INT 45
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: PUSH
21519: LD_VAR 0 12
21523: ARRAY
21524: ST_TO_ADDR
// break ;
21525: GO 21529
// end ; end ; end ;
21527: GO 21358
21529: POP
21530: POP
// end ; if not weapon then
21531: LD_VAR 0 18
21535: NOT
21536: IFFALSE 21596
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21538: LD_ADDR_VAR 0 5
21542: PUSH
21543: LD_VAR 0 5
21547: PUSH
21548: LD_INT 11
21550: PUSH
21551: LD_INT 30
21553: PUSH
21554: LD_INT 49
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: LIST
21561: DIFF
21562: ST_TO_ADDR
// if not list then
21563: LD_VAR 0 5
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21718
// weapon := list [ rand ( 1 , list ) ] ;
21572: LD_ADDR_VAR 0 18
21576: PUSH
21577: LD_VAR 0 5
21581: PUSH
21582: LD_INT 1
21584: PPUSH
21585: LD_VAR 0 5
21589: PPUSH
21590: CALL_OW 12
21594: ARRAY
21595: ST_TO_ADDR
// end ; if weapon then
21596: LD_VAR 0 18
21600: IFFALSE 21718
// begin tmp := CostOfWeapon ( weapon ) ;
21602: LD_ADDR_VAR 0 14
21606: PUSH
21607: LD_VAR 0 18
21611: PPUSH
21612: CALL_OW 451
21616: ST_TO_ADDR
// j := GetBase ( tower ) ;
21617: LD_ADDR_VAR 0 9
21621: PUSH
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 274
21631: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21632: LD_VAR 0 9
21636: PPUSH
21637: LD_INT 1
21639: PPUSH
21640: CALL_OW 275
21644: PUSH
21645: LD_VAR 0 14
21649: PUSH
21650: LD_INT 1
21652: ARRAY
21653: GREATEREQUAL
21654: IFFALSE 21680
21656: PUSH
21657: LD_VAR 0 9
21661: PPUSH
21662: LD_INT 2
21664: PPUSH
21665: CALL_OW 275
21669: PUSH
21670: LD_VAR 0 14
21674: PUSH
21675: LD_INT 2
21677: ARRAY
21678: GREATEREQUAL
21679: AND
21680: IFFALSE 21706
21682: PUSH
21683: LD_VAR 0 9
21687: PPUSH
21688: LD_INT 3
21690: PPUSH
21691: CALL_OW 275
21695: PUSH
21696: LD_VAR 0 14
21700: PUSH
21701: LD_INT 3
21703: ARRAY
21704: GREATEREQUAL
21705: AND
21706: IFFALSE 21718
// result := weapon ;
21708: LD_ADDR_VAR 0 3
21712: PUSH
21713: LD_VAR 0 18
21717: ST_TO_ADDR
// end ; end ;
21718: LD_VAR 0 3
21722: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21723: LD_INT 0
21725: PPUSH
21726: PPUSH
// result := true ;
21727: LD_ADDR_VAR 0 3
21731: PUSH
21732: LD_INT 1
21734: ST_TO_ADDR
// if array1 = array2 then
21735: LD_VAR 0 1
21739: PUSH
21740: LD_VAR 0 2
21744: EQUAL
21745: IFFALSE 21805
// begin for i = 1 to array1 do
21747: LD_ADDR_VAR 0 4
21751: PUSH
21752: DOUBLE
21753: LD_INT 1
21755: DEC
21756: ST_TO_ADDR
21757: LD_VAR 0 1
21761: PUSH
21762: FOR_TO
21763: IFFALSE 21801
// if array1 [ i ] <> array2 [ i ] then
21765: LD_VAR 0 1
21769: PUSH
21770: LD_VAR 0 4
21774: ARRAY
21775: PUSH
21776: LD_VAR 0 2
21780: PUSH
21781: LD_VAR 0 4
21785: ARRAY
21786: NONEQUAL
21787: IFFALSE 21799
// begin result := false ;
21789: LD_ADDR_VAR 0 3
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// break ;
21797: GO 21801
// end ;
21799: GO 21762
21801: POP
21802: POP
// end else
21803: GO 21813
// result := false ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// end ;
21813: LD_VAR 0 3
21817: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21818: LD_INT 0
21820: PPUSH
21821: PPUSH
// if not array1 or not array2 then
21822: LD_VAR 0 1
21826: NOT
21827: IFTRUE 21836
21829: PUSH
21830: LD_VAR 0 2
21834: NOT
21835: OR
21836: IFFALSE 21840
// exit ;
21838: GO 21904
// result := true ;
21840: LD_ADDR_VAR 0 3
21844: PUSH
21845: LD_INT 1
21847: ST_TO_ADDR
// for i = 1 to array1 do
21848: LD_ADDR_VAR 0 4
21852: PUSH
21853: DOUBLE
21854: LD_INT 1
21856: DEC
21857: ST_TO_ADDR
21858: LD_VAR 0 1
21862: PUSH
21863: FOR_TO
21864: IFFALSE 21902
// if array1 [ i ] <> array2 [ i ] then
21866: LD_VAR 0 1
21870: PUSH
21871: LD_VAR 0 4
21875: ARRAY
21876: PUSH
21877: LD_VAR 0 2
21881: PUSH
21882: LD_VAR 0 4
21886: ARRAY
21887: NONEQUAL
21888: IFFALSE 21900
// begin result := false ;
21890: LD_ADDR_VAR 0 3
21894: PUSH
21895: LD_INT 0
21897: ST_TO_ADDR
// break ;
21898: GO 21902
// end ;
21900: GO 21863
21902: POP
21903: POP
// end ;
21904: LD_VAR 0 3
21908: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
21913: PPUSH
// pom := GetBase ( fac ) ;
21914: LD_ADDR_VAR 0 5
21918: PUSH
21919: LD_VAR 0 1
21923: PPUSH
21924: CALL_OW 274
21928: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21929: LD_ADDR_VAR 0 4
21933: PUSH
21934: LD_VAR 0 2
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 2
21947: PUSH
21948: LD_INT 2
21950: ARRAY
21951: PPUSH
21952: LD_VAR 0 2
21956: PUSH
21957: LD_INT 3
21959: ARRAY
21960: PPUSH
21961: LD_VAR 0 2
21965: PUSH
21966: LD_INT 4
21968: ARRAY
21969: PPUSH
21970: CALL_OW 449
21974: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21975: LD_ADDR_VAR 0 3
21979: PUSH
21980: LD_VAR 0 5
21984: PPUSH
21985: LD_INT 1
21987: PPUSH
21988: CALL_OW 275
21992: PUSH
21993: LD_VAR 0 4
21997: PUSH
21998: LD_INT 1
22000: ARRAY
22001: GREATEREQUAL
22002: IFFALSE 22028
22004: PUSH
22005: LD_VAR 0 5
22009: PPUSH
22010: LD_INT 2
22012: PPUSH
22013: CALL_OW 275
22017: PUSH
22018: LD_VAR 0 4
22022: PUSH
22023: LD_INT 2
22025: ARRAY
22026: GREATEREQUAL
22027: AND
22028: IFFALSE 22054
22030: PUSH
22031: LD_VAR 0 5
22035: PPUSH
22036: LD_INT 3
22038: PPUSH
22039: CALL_OW 275
22043: PUSH
22044: LD_VAR 0 4
22048: PUSH
22049: LD_INT 3
22051: ARRAY
22052: GREATEREQUAL
22053: AND
22054: ST_TO_ADDR
// end ;
22055: LD_VAR 0 3
22059: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22060: LD_INT 0
22062: PPUSH
22063: PPUSH
22064: PPUSH
22065: PPUSH
// pom := GetBase ( building ) ;
22066: LD_ADDR_VAR 0 3
22070: PUSH
22071: LD_VAR 0 1
22075: PPUSH
22076: CALL_OW 274
22080: ST_TO_ADDR
// if not pom then
22081: LD_VAR 0 3
22085: NOT
22086: IFFALSE 22090
// exit ;
22088: GO 22264
// btype := GetBType ( building ) ;
22090: LD_ADDR_VAR 0 5
22094: PUSH
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 266
22104: ST_TO_ADDR
// if btype = b_armoury then
22105: LD_VAR 0 5
22109: PUSH
22110: LD_INT 4
22112: EQUAL
22113: IFFALSE 22123
// btype := b_barracks ;
22115: LD_ADDR_VAR 0 5
22119: PUSH
22120: LD_INT 5
22122: ST_TO_ADDR
// if btype = b_depot then
22123: LD_VAR 0 5
22127: PUSH
22128: LD_INT 0
22130: EQUAL
22131: IFFALSE 22141
// btype := b_warehouse ;
22133: LD_ADDR_VAR 0 5
22137: PUSH
22138: LD_INT 1
22140: ST_TO_ADDR
// if btype = b_workshop then
22141: LD_VAR 0 5
22145: PUSH
22146: LD_INT 2
22148: EQUAL
22149: IFFALSE 22159
// btype := b_factory ;
22151: LD_ADDR_VAR 0 5
22155: PUSH
22156: LD_INT 3
22158: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22159: LD_ADDR_VAR 0 4
22163: PUSH
22164: LD_VAR 0 5
22168: PPUSH
22169: LD_VAR 0 1
22173: PPUSH
22174: CALL_OW 248
22178: PPUSH
22179: CALL_OW 450
22183: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22184: LD_ADDR_VAR 0 2
22188: PUSH
22189: LD_VAR 0 3
22193: PPUSH
22194: LD_INT 1
22196: PPUSH
22197: CALL_OW 275
22201: PUSH
22202: LD_VAR 0 4
22206: PUSH
22207: LD_INT 1
22209: ARRAY
22210: GREATEREQUAL
22211: IFFALSE 22237
22213: PUSH
22214: LD_VAR 0 3
22218: PPUSH
22219: LD_INT 2
22221: PPUSH
22222: CALL_OW 275
22226: PUSH
22227: LD_VAR 0 4
22231: PUSH
22232: LD_INT 2
22234: ARRAY
22235: GREATEREQUAL
22236: AND
22237: IFFALSE 22263
22239: PUSH
22240: LD_VAR 0 3
22244: PPUSH
22245: LD_INT 3
22247: PPUSH
22248: CALL_OW 275
22252: PUSH
22253: LD_VAR 0 4
22257: PUSH
22258: LD_INT 3
22260: ARRAY
22261: GREATEREQUAL
22262: AND
22263: ST_TO_ADDR
// end ;
22264: LD_VAR 0 2
22268: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22269: LD_INT 0
22271: PPUSH
22272: PPUSH
22273: PPUSH
// pom := GetBase ( building ) ;
22274: LD_ADDR_VAR 0 4
22278: PUSH
22279: LD_VAR 0 1
22283: PPUSH
22284: CALL_OW 274
22288: ST_TO_ADDR
// if not pom then
22289: LD_VAR 0 4
22293: NOT
22294: IFFALSE 22298
// exit ;
22296: GO 22403
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22298: LD_ADDR_VAR 0 5
22302: PUSH
22303: LD_VAR 0 2
22307: PPUSH
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 248
22317: PPUSH
22318: CALL_OW 450
22322: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22323: LD_ADDR_VAR 0 3
22327: PUSH
22328: LD_VAR 0 4
22332: PPUSH
22333: LD_INT 1
22335: PPUSH
22336: CALL_OW 275
22340: PUSH
22341: LD_VAR 0 5
22345: PUSH
22346: LD_INT 1
22348: ARRAY
22349: GREATEREQUAL
22350: IFFALSE 22376
22352: PUSH
22353: LD_VAR 0 4
22357: PPUSH
22358: LD_INT 2
22360: PPUSH
22361: CALL_OW 275
22365: PUSH
22366: LD_VAR 0 5
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: GREATEREQUAL
22375: AND
22376: IFFALSE 22402
22378: PUSH
22379: LD_VAR 0 4
22383: PPUSH
22384: LD_INT 3
22386: PPUSH
22387: CALL_OW 275
22391: PUSH
22392: LD_VAR 0 5
22396: PUSH
22397: LD_INT 3
22399: ARRAY
22400: GREATEREQUAL
22401: AND
22402: ST_TO_ADDR
// end ;
22403: LD_VAR 0 3
22407: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22408: LD_INT 0
22410: PPUSH
22411: PPUSH
22412: PPUSH
22413: PPUSH
22414: PPUSH
22415: PPUSH
22416: PPUSH
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
// result := false ;
22421: LD_ADDR_VAR 0 8
22425: PUSH
22426: LD_INT 0
22428: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22429: LD_VAR 0 5
22433: NOT
22434: IFTRUE 22443
22436: PUSH
22437: LD_VAR 0 1
22441: NOT
22442: OR
22443: IFTRUE 22452
22445: PUSH
22446: LD_VAR 0 2
22450: NOT
22451: OR
22452: IFTRUE 22461
22454: PUSH
22455: LD_VAR 0 3
22459: NOT
22460: OR
22461: IFFALSE 22465
// exit ;
22463: GO 23291
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22465: LD_ADDR_VAR 0 14
22469: PUSH
22470: LD_VAR 0 1
22474: PPUSH
22475: LD_VAR 0 2
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: LD_VAR 0 4
22489: PPUSH
22490: LD_VAR 0 5
22494: PUSH
22495: LD_INT 1
22497: ARRAY
22498: PPUSH
22499: CALL_OW 248
22503: PPUSH
22504: LD_INT 0
22506: PPUSH
22507: CALL 24572 0 6
22511: ST_TO_ADDR
// if not hexes then
22512: LD_VAR 0 14
22516: NOT
22517: IFFALSE 22521
// exit ;
22519: GO 23291
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22521: LD_ADDR_VAR 0 17
22525: PUSH
22526: LD_VAR 0 5
22530: PPUSH
22531: LD_INT 22
22533: PUSH
22534: LD_VAR 0 13
22538: PPUSH
22539: CALL_OW 255
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 30
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 30
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PPUSH
22580: CALL_OW 72
22584: ST_TO_ADDR
// for i = 1 to hexes do
22585: LD_ADDR_VAR 0 9
22589: PUSH
22590: DOUBLE
22591: LD_INT 1
22593: DEC
22594: ST_TO_ADDR
22595: LD_VAR 0 14
22599: PUSH
22600: FOR_TO
22601: IFFALSE 23289
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22603: LD_ADDR_VAR 0 13
22607: PUSH
22608: LD_VAR 0 14
22612: PUSH
22613: LD_VAR 0 9
22617: ARRAY
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: LD_VAR 0 14
22627: PUSH
22628: LD_VAR 0 9
22632: ARRAY
22633: PUSH
22634: LD_INT 2
22636: ARRAY
22637: PPUSH
22638: CALL_OW 428
22642: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22643: LD_VAR 0 14
22647: PUSH
22648: LD_VAR 0 9
22652: ARRAY
22653: PUSH
22654: LD_INT 1
22656: ARRAY
22657: PPUSH
22658: LD_VAR 0 14
22662: PUSH
22663: LD_VAR 0 9
22667: ARRAY
22668: PUSH
22669: LD_INT 2
22671: ARRAY
22672: PPUSH
22673: CALL_OW 351
22677: IFTRUE 22716
22679: PUSH
22680: LD_VAR 0 14
22684: PUSH
22685: LD_VAR 0 9
22689: ARRAY
22690: PUSH
22691: LD_INT 1
22693: ARRAY
22694: PPUSH
22695: LD_VAR 0 14
22699: PUSH
22700: LD_VAR 0 9
22704: ARRAY
22705: PUSH
22706: LD_INT 2
22708: ARRAY
22709: PPUSH
22710: CALL_OW 488
22714: NOT
22715: OR
22716: IFTRUE 22733
22718: PUSH
22719: LD_VAR 0 13
22723: PPUSH
22724: CALL_OW 247
22728: PUSH
22729: LD_INT 3
22731: EQUAL
22732: OR
22733: IFFALSE 22739
// exit ;
22735: POP
22736: POP
22737: GO 23291
// if not tmp then
22739: LD_VAR 0 13
22743: NOT
22744: IFFALSE 22748
// continue ;
22746: GO 22600
// result := true ;
22748: LD_ADDR_VAR 0 8
22752: PUSH
22753: LD_INT 1
22755: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22756: LD_VAR 0 6
22760: IFFALSE 22777
22762: PUSH
22763: LD_VAR 0 13
22767: PPUSH
22768: CALL_OW 247
22772: PUSH
22773: LD_INT 2
22775: EQUAL
22776: AND
22777: IFFALSE 22794
22779: PUSH
22780: LD_VAR 0 13
22784: PPUSH
22785: CALL_OW 263
22789: PUSH
22790: LD_INT 1
22792: EQUAL
22793: AND
22794: IFFALSE 22958
// begin if IsDrivenBy ( tmp ) then
22796: LD_VAR 0 13
22800: PPUSH
22801: CALL_OW 311
22805: IFFALSE 22809
// continue ;
22807: GO 22600
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22809: LD_VAR 0 6
22813: PPUSH
22814: LD_INT 3
22816: PUSH
22817: LD_INT 60
22819: PUSH
22820: EMPTY
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: LD_INT 55
22832: PUSH
22833: EMPTY
22834: LIST
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PPUSH
22844: CALL_OW 72
22848: IFFALSE 22956
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22850: LD_ADDR_VAR 0 18
22854: PUSH
22855: LD_VAR 0 6
22859: PPUSH
22860: LD_INT 3
22862: PUSH
22863: LD_INT 60
22865: PUSH
22866: EMPTY
22867: LIST
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 3
22875: PUSH
22876: LD_INT 55
22878: PUSH
22879: EMPTY
22880: LIST
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 72
22894: PUSH
22895: LD_INT 1
22897: ARRAY
22898: ST_TO_ADDR
// if IsInUnit ( driver ) then
22899: LD_VAR 0 18
22903: PPUSH
22904: CALL_OW 310
22908: IFFALSE 22919
// ComExit ( driver ) ;
22910: LD_VAR 0 18
22914: PPUSH
22915: CALL 48562 0 1
// AddComEnterUnit ( driver , tmp ) ;
22919: LD_VAR 0 18
22923: PPUSH
22924: LD_VAR 0 13
22928: PPUSH
22929: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22933: LD_VAR 0 18
22937: PPUSH
22938: LD_VAR 0 7
22942: PPUSH
22943: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22947: LD_VAR 0 18
22951: PPUSH
22952: CALL_OW 181
// end ; continue ;
22956: GO 22600
// end ; if not cleaners or not tmp in cleaners then
22958: LD_VAR 0 6
22962: NOT
22963: IFTRUE 22978
22965: PUSH
22966: LD_VAR 0 13
22970: PUSH
22971: LD_VAR 0 6
22975: IN
22976: NOT
22977: OR
22978: IFFALSE 23287
// begin if dep then
22980: LD_VAR 0 17
22984: IFFALSE 23120
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22986: LD_ADDR_VAR 0 16
22990: PUSH
22991: LD_VAR 0 17
22995: PUSH
22996: LD_INT 1
22998: ARRAY
22999: PPUSH
23000: CALL_OW 250
23004: PPUSH
23005: LD_VAR 0 17
23009: PUSH
23010: LD_INT 1
23012: ARRAY
23013: PPUSH
23014: CALL_OW 254
23018: PPUSH
23019: LD_INT 5
23021: PPUSH
23022: CALL_OW 272
23026: PUSH
23027: LD_VAR 0 17
23031: PUSH
23032: LD_INT 1
23034: ARRAY
23035: PPUSH
23036: CALL_OW 251
23040: PPUSH
23041: LD_VAR 0 17
23045: PUSH
23046: LD_INT 1
23048: ARRAY
23049: PPUSH
23050: CALL_OW 254
23054: PPUSH
23055: LD_INT 5
23057: PPUSH
23058: CALL_OW 273
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23067: LD_VAR 0 16
23071: PUSH
23072: LD_INT 1
23074: ARRAY
23075: PPUSH
23076: LD_VAR 0 16
23080: PUSH
23081: LD_INT 2
23083: ARRAY
23084: PPUSH
23085: CALL_OW 488
23089: IFFALSE 23120
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23091: LD_VAR 0 13
23095: PPUSH
23096: LD_VAR 0 16
23100: PUSH
23101: LD_INT 1
23103: ARRAY
23104: PPUSH
23105: LD_VAR 0 16
23109: PUSH
23110: LD_INT 2
23112: ARRAY
23113: PPUSH
23114: CALL_OW 111
// continue ;
23118: GO 22600
// end ; end ; r := GetDir ( tmp ) ;
23120: LD_ADDR_VAR 0 15
23124: PUSH
23125: LD_VAR 0 13
23129: PPUSH
23130: CALL_OW 254
23134: ST_TO_ADDR
// if r = 5 then
23135: LD_VAR 0 15
23139: PUSH
23140: LD_INT 5
23142: EQUAL
23143: IFFALSE 23153
// r := 0 ;
23145: LD_ADDR_VAR 0 15
23149: PUSH
23150: LD_INT 0
23152: ST_TO_ADDR
// for j = r to 5 do
23153: LD_ADDR_VAR 0 10
23157: PUSH
23158: DOUBLE
23159: LD_VAR 0 15
23163: DEC
23164: ST_TO_ADDR
23165: LD_INT 5
23167: PUSH
23168: FOR_TO
23169: IFFALSE 23285
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23171: LD_ADDR_VAR 0 11
23175: PUSH
23176: LD_VAR 0 13
23180: PPUSH
23181: CALL_OW 250
23185: PPUSH
23186: LD_VAR 0 10
23190: PPUSH
23191: LD_INT 2
23193: PPUSH
23194: CALL_OW 272
23198: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23199: LD_ADDR_VAR 0 12
23203: PUSH
23204: LD_VAR 0 13
23208: PPUSH
23209: CALL_OW 251
23213: PPUSH
23214: LD_VAR 0 10
23218: PPUSH
23219: LD_INT 2
23221: PPUSH
23222: CALL_OW 273
23226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23227: LD_VAR 0 11
23231: PPUSH
23232: LD_VAR 0 12
23236: PPUSH
23237: CALL_OW 488
23241: IFFALSE 23260
23243: PUSH
23244: LD_VAR 0 11
23248: PPUSH
23249: LD_VAR 0 12
23253: PPUSH
23254: CALL_OW 428
23258: NOT
23259: AND
23260: IFFALSE 23283
// begin ComMoveXY ( tmp , _x , _y ) ;
23262: LD_VAR 0 13
23266: PPUSH
23267: LD_VAR 0 11
23271: PPUSH
23272: LD_VAR 0 12
23276: PPUSH
23277: CALL_OW 111
// break ;
23281: GO 23285
// end ; end ;
23283: GO 23168
23285: POP
23286: POP
// end ; end ;
23287: GO 22600
23289: POP
23290: POP
// end ;
23291: LD_VAR 0 8
23295: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23296: LD_INT 0
23298: PPUSH
// result := true ;
23299: LD_ADDR_VAR 0 3
23303: PUSH
23304: LD_INT 1
23306: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23307: LD_VAR 0 2
23311: PUSH
23312: LD_INT 24
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23326
23318: LD_INT 33
23320: DOUBLE
23321: EQUAL
23322: IFTRUE 23326
23324: GO 23351
23326: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23327: LD_ADDR_VAR 0 3
23331: PUSH
23332: LD_INT 32
23334: PPUSH
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 321
23344: PUSH
23345: LD_INT 2
23347: EQUAL
23348: ST_TO_ADDR
23349: GO 23667
23351: LD_INT 20
23353: DOUBLE
23354: EQUAL
23355: IFTRUE 23359
23357: GO 23384
23359: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23360: LD_ADDR_VAR 0 3
23364: PUSH
23365: LD_INT 6
23367: PPUSH
23368: LD_VAR 0 1
23372: PPUSH
23373: CALL_OW 321
23377: PUSH
23378: LD_INT 2
23380: EQUAL
23381: ST_TO_ADDR
23382: GO 23667
23384: LD_INT 22
23386: DOUBLE
23387: EQUAL
23388: IFTRUE 23398
23390: LD_INT 36
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23423
23398: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23399: LD_ADDR_VAR 0 3
23403: PUSH
23404: LD_INT 15
23406: PPUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL_OW 321
23416: PUSH
23417: LD_INT 2
23419: EQUAL
23420: ST_TO_ADDR
23421: GO 23667
23423: LD_INT 30
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23431
23429: GO 23456
23431: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_INT 20
23439: PPUSH
23440: LD_VAR 0 1
23444: PPUSH
23445: CALL_OW 321
23449: PUSH
23450: LD_INT 2
23452: EQUAL
23453: ST_TO_ADDR
23454: GO 23667
23456: LD_INT 28
23458: DOUBLE
23459: EQUAL
23460: IFTRUE 23470
23462: LD_INT 21
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23495
23470: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23471: LD_ADDR_VAR 0 3
23475: PUSH
23476: LD_INT 21
23478: PPUSH
23479: LD_VAR 0 1
23483: PPUSH
23484: CALL_OW 321
23488: PUSH
23489: LD_INT 2
23491: EQUAL
23492: ST_TO_ADDR
23493: GO 23667
23495: LD_INT 16
23497: DOUBLE
23498: EQUAL
23499: IFTRUE 23503
23501: GO 23528
23503: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23504: LD_ADDR_VAR 0 3
23508: PUSH
23509: LD_INT 84
23511: PPUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 321
23521: PUSH
23522: LD_INT 2
23524: EQUAL
23525: ST_TO_ADDR
23526: GO 23667
23528: LD_INT 19
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23542
23534: LD_INT 23
23536: DOUBLE
23537: EQUAL
23538: IFTRUE 23542
23540: GO 23567
23542: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23543: LD_ADDR_VAR 0 3
23547: PUSH
23548: LD_INT 83
23550: PPUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: CALL_OW 321
23560: PUSH
23561: LD_INT 2
23563: EQUAL
23564: ST_TO_ADDR
23565: GO 23667
23567: LD_INT 17
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 23600
23575: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23576: LD_ADDR_VAR 0 3
23580: PUSH
23581: LD_INT 39
23583: PPUSH
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 321
23593: PUSH
23594: LD_INT 2
23596: EQUAL
23597: ST_TO_ADDR
23598: GO 23667
23600: LD_INT 18
23602: DOUBLE
23603: EQUAL
23604: IFTRUE 23608
23606: GO 23633
23608: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23609: LD_ADDR_VAR 0 3
23613: PUSH
23614: LD_INT 40
23616: PPUSH
23617: LD_VAR 0 1
23621: PPUSH
23622: CALL_OW 321
23626: PUSH
23627: LD_INT 2
23629: EQUAL
23630: ST_TO_ADDR
23631: GO 23667
23633: LD_INT 27
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23666
23641: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_INT 35
23649: PPUSH
23650: LD_VAR 0 1
23654: PPUSH
23655: CALL_OW 321
23659: PUSH
23660: LD_INT 2
23662: EQUAL
23663: ST_TO_ADDR
23664: GO 23667
23666: POP
// end ;
23667: LD_VAR 0 3
23671: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23672: LD_INT 0
23674: PPUSH
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
// result := false ;
23685: LD_ADDR_VAR 0 6
23689: PUSH
23690: LD_INT 0
23692: ST_TO_ADDR
// if btype = b_depot then
23693: LD_VAR 0 2
23697: PUSH
23698: LD_INT 0
23700: EQUAL
23701: IFFALSE 23713
// begin result := true ;
23703: LD_ADDR_VAR 0 6
23707: PUSH
23708: LD_INT 1
23710: ST_TO_ADDR
// exit ;
23711: GO 24567
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23713: LD_VAR 0 1
23717: NOT
23718: IFTRUE 23743
23720: PUSH
23721: LD_VAR 0 1
23725: PPUSH
23726: CALL_OW 266
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: IN
23741: NOT
23742: OR
23743: IFTRUE 23752
23745: PUSH
23746: LD_VAR 0 2
23750: NOT
23751: OR
23752: IFTRUE 23788
23754: PUSH
23755: LD_VAR 0 5
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: LD_INT 3
23771: PUSH
23772: LD_INT 4
23774: PUSH
23775: LD_INT 5
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: IN
23786: NOT
23787: OR
23788: IFTRUE 23807
23790: PUSH
23791: LD_VAR 0 3
23795: PPUSH
23796: LD_VAR 0 4
23800: PPUSH
23801: CALL_OW 488
23805: NOT
23806: OR
23807: IFFALSE 23811
// exit ;
23809: GO 24567
// side := GetSide ( depot ) ;
23811: LD_ADDR_VAR 0 9
23815: PUSH
23816: LD_VAR 0 1
23820: PPUSH
23821: CALL_OW 255
23825: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23826: LD_VAR 0 9
23830: PPUSH
23831: LD_VAR 0 2
23835: PPUSH
23836: CALL 23296 0 2
23840: NOT
23841: IFFALSE 23845
// exit ;
23843: GO 24567
// pom := GetBase ( depot ) ;
23845: LD_ADDR_VAR 0 10
23849: PUSH
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL_OW 274
23859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23860: LD_ADDR_VAR 0 11
23864: PUSH
23865: LD_VAR 0 2
23869: PPUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 248
23879: PPUSH
23880: CALL_OW 450
23884: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23885: LD_VAR 0 10
23889: PPUSH
23890: LD_INT 1
23892: PPUSH
23893: CALL_OW 275
23897: PUSH
23898: LD_VAR 0 11
23902: PUSH
23903: LD_INT 1
23905: ARRAY
23906: GREATEREQUAL
23907: IFFALSE 23933
23909: PUSH
23910: LD_VAR 0 10
23914: PPUSH
23915: LD_INT 2
23917: PPUSH
23918: CALL_OW 275
23922: PUSH
23923: LD_VAR 0 11
23927: PUSH
23928: LD_INT 2
23930: ARRAY
23931: GREATEREQUAL
23932: AND
23933: IFFALSE 23959
23935: PUSH
23936: LD_VAR 0 10
23940: PPUSH
23941: LD_INT 3
23943: PPUSH
23944: CALL_OW 275
23948: PUSH
23949: LD_VAR 0 11
23953: PUSH
23954: LD_INT 3
23956: ARRAY
23957: GREATEREQUAL
23958: AND
23959: NOT
23960: IFFALSE 23964
// exit ;
23962: GO 24567
// if GetBType ( depot ) = b_depot then
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 266
23973: PUSH
23974: LD_INT 0
23976: EQUAL
23977: IFFALSE 23989
// dist := 28 else
23979: LD_ADDR_VAR 0 14
23983: PUSH
23984: LD_INT 28
23986: ST_TO_ADDR
23987: GO 23997
// dist := 36 ;
23989: LD_ADDR_VAR 0 14
23993: PUSH
23994: LD_INT 36
23996: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23997: LD_VAR 0 1
24001: PPUSH
24002: LD_VAR 0 3
24006: PPUSH
24007: LD_VAR 0 4
24011: PPUSH
24012: CALL_OW 297
24016: PUSH
24017: LD_VAR 0 14
24021: GREATER
24022: IFFALSE 24026
// exit ;
24024: GO 24567
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24026: LD_ADDR_VAR 0 12
24030: PUSH
24031: LD_VAR 0 2
24035: PPUSH
24036: LD_VAR 0 3
24040: PPUSH
24041: LD_VAR 0 4
24045: PPUSH
24046: LD_VAR 0 5
24050: PPUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 248
24060: PPUSH
24061: LD_INT 0
24063: PPUSH
24064: CALL 24572 0 6
24068: ST_TO_ADDR
// if not hexes then
24069: LD_VAR 0 12
24073: NOT
24074: IFFALSE 24078
// exit ;
24076: GO 24567
// hex := GetHexInfo ( x , y ) ;
24078: LD_ADDR_VAR 0 15
24082: PUSH
24083: LD_VAR 0 3
24087: PPUSH
24088: LD_VAR 0 4
24092: PPUSH
24093: CALL_OW 546
24097: ST_TO_ADDR
// if hex [ 1 ] then
24098: LD_VAR 0 15
24102: PUSH
24103: LD_INT 1
24105: ARRAY
24106: IFFALSE 24110
// exit ;
24108: GO 24567
// height := hex [ 2 ] ;
24110: LD_ADDR_VAR 0 13
24114: PUSH
24115: LD_VAR 0 15
24119: PUSH
24120: LD_INT 2
24122: ARRAY
24123: ST_TO_ADDR
// for i = 1 to hexes do
24124: LD_ADDR_VAR 0 7
24128: PUSH
24129: DOUBLE
24130: LD_INT 1
24132: DEC
24133: ST_TO_ADDR
24134: LD_VAR 0 12
24138: PUSH
24139: FOR_TO
24140: IFFALSE 24484
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24142: LD_VAR 0 12
24146: PUSH
24147: LD_VAR 0 7
24151: ARRAY
24152: PUSH
24153: LD_INT 1
24155: ARRAY
24156: PPUSH
24157: LD_VAR 0 12
24161: PUSH
24162: LD_VAR 0 7
24166: ARRAY
24167: PUSH
24168: LD_INT 2
24170: ARRAY
24171: PPUSH
24172: CALL_OW 488
24176: NOT
24177: IFTRUE 24219
24179: PUSH
24180: LD_VAR 0 12
24184: PUSH
24185: LD_VAR 0 7
24189: ARRAY
24190: PUSH
24191: LD_INT 1
24193: ARRAY
24194: PPUSH
24195: LD_VAR 0 12
24199: PUSH
24200: LD_VAR 0 7
24204: ARRAY
24205: PUSH
24206: LD_INT 2
24208: ARRAY
24209: PPUSH
24210: CALL_OW 428
24214: PUSH
24215: LD_INT 0
24217: GREATER
24218: OR
24219: IFTRUE 24257
24221: PUSH
24222: LD_VAR 0 12
24226: PUSH
24227: LD_VAR 0 7
24231: ARRAY
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: PPUSH
24237: LD_VAR 0 12
24241: PUSH
24242: LD_VAR 0 7
24246: ARRAY
24247: PUSH
24248: LD_INT 2
24250: ARRAY
24251: PPUSH
24252: CALL_OW 351
24256: OR
24257: IFFALSE 24263
// exit ;
24259: POP
24260: POP
24261: GO 24567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24263: LD_ADDR_VAR 0 8
24267: PUSH
24268: LD_VAR 0 12
24272: PUSH
24273: LD_VAR 0 7
24277: ARRAY
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: PPUSH
24283: LD_VAR 0 12
24287: PUSH
24288: LD_VAR 0 7
24292: ARRAY
24293: PUSH
24294: LD_INT 2
24296: ARRAY
24297: PPUSH
24298: CALL_OW 546
24302: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24303: LD_VAR 0 8
24307: PUSH
24308: LD_INT 1
24310: ARRAY
24311: IFTRUE 24333
24313: PUSH
24314: LD_VAR 0 8
24318: PUSH
24319: LD_INT 2
24321: ARRAY
24322: PUSH
24323: LD_VAR 0 13
24327: PUSH
24328: LD_INT 2
24330: PLUS
24331: GREATER
24332: OR
24333: IFTRUE 24355
24335: PUSH
24336: LD_VAR 0 8
24340: PUSH
24341: LD_INT 2
24343: ARRAY
24344: PUSH
24345: LD_VAR 0 13
24349: PUSH
24350: LD_INT 2
24352: MINUS
24353: LESS
24354: OR
24355: IFTRUE 24423
24357: PUSH
24358: LD_VAR 0 8
24362: PUSH
24363: LD_INT 3
24365: ARRAY
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: LD_INT 8
24372: PUSH
24373: LD_INT 9
24375: PUSH
24376: LD_INT 10
24378: PUSH
24379: LD_INT 11
24381: PUSH
24382: LD_INT 12
24384: PUSH
24385: LD_INT 13
24387: PUSH
24388: LD_INT 16
24390: PUSH
24391: LD_INT 17
24393: PUSH
24394: LD_INT 18
24396: PUSH
24397: LD_INT 19
24399: PUSH
24400: LD_INT 20
24402: PUSH
24403: LD_INT 21
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: IN
24421: NOT
24422: OR
24423: IFTRUE 24436
24425: PUSH
24426: LD_VAR 0 8
24430: PUSH
24431: LD_INT 5
24433: ARRAY
24434: NOT
24435: OR
24436: IFTRUE 24476
24438: PUSH
24439: LD_VAR 0 8
24443: PUSH
24444: LD_INT 6
24446: ARRAY
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 7
24456: PUSH
24457: LD_INT 9
24459: PUSH
24460: LD_INT 10
24462: PUSH
24463: LD_INT 11
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: IN
24474: NOT
24475: OR
24476: IFFALSE 24482
// exit ;
24478: POP
24479: POP
24480: GO 24567
// end ;
24482: GO 24139
24484: POP
24485: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24486: LD_VAR 0 9
24490: PPUSH
24491: LD_VAR 0 3
24495: PPUSH
24496: LD_VAR 0 4
24500: PPUSH
24501: LD_INT 20
24503: PPUSH
24504: CALL 16386 0 4
24508: PUSH
24509: LD_INT 4
24511: ARRAY
24512: IFFALSE 24516
// exit ;
24514: GO 24567
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 29
24523: PUSH
24524: LD_INT 30
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: IN
24531: IFFALSE 24555
24533: PUSH
24534: LD_VAR 0 3
24538: PPUSH
24539: LD_VAR 0 4
24543: PPUSH
24544: LD_VAR 0 9
24548: PPUSH
24549: CALL_OW 440
24553: NOT
24554: AND
24555: IFFALSE 24559
// exit ;
24557: GO 24567
// result := true ;
24559: LD_ADDR_VAR 0 6
24563: PUSH
24564: LD_INT 1
24566: ST_TO_ADDR
// end ;
24567: LD_VAR 0 6
24571: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24572: LD_INT 0
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
// result = [ ] ;
24632: LD_ADDR_VAR 0 7
24636: PUSH
24637: EMPTY
24638: ST_TO_ADDR
// temp_list = [ ] ;
24639: LD_ADDR_VAR 0 9
24643: PUSH
24644: EMPTY
24645: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24646: LD_VAR 0 4
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 4
24665: PUSH
24666: LD_INT 5
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: IN
24677: NOT
24678: IFTRUE 24721
24680: PUSH
24681: LD_VAR 0 1
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: IN
24696: IFFALSE 24720
24698: PUSH
24699: LD_VAR 0 5
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: IN
24718: NOT
24719: AND
24720: OR
24721: IFFALSE 24725
// exit ;
24723: GO 43124
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24725: LD_VAR 0 1
24729: PUSH
24730: LD_INT 6
24732: PUSH
24733: LD_INT 7
24735: PUSH
24736: LD_INT 8
24738: PUSH
24739: LD_INT 13
24741: PUSH
24742: LD_INT 12
24744: PUSH
24745: LD_INT 15
24747: PUSH
24748: LD_INT 11
24750: PUSH
24751: LD_INT 14
24753: PUSH
24754: LD_INT 10
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: IN
24768: IFFALSE 24778
// btype = b_lab ;
24770: LD_ADDR_VAR 0 1
24774: PUSH
24775: LD_INT 6
24777: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24778: LD_VAR 0 6
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: LIST
24796: IN
24797: NOT
24798: IFTRUE 24866
24800: PUSH
24801: LD_VAR 0 1
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: LD_INT 3
24817: PUSH
24818: LD_INT 6
24820: PUSH
24821: LD_INT 36
24823: PUSH
24824: LD_INT 4
24826: PUSH
24827: LD_INT 5
24829: PUSH
24830: LD_INT 31
24832: PUSH
24833: LD_INT 32
24835: PUSH
24836: LD_INT 33
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: IN
24852: NOT
24853: IFFALSE 24865
24855: PUSH
24856: LD_VAR 0 6
24860: PUSH
24861: LD_INT 1
24863: EQUAL
24864: AND
24865: OR
24866: IFTRUE 24898
24868: PUSH
24869: LD_VAR 0 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: IN
24884: NOT
24885: IFFALSE 24897
24887: PUSH
24888: LD_VAR 0 6
24892: PUSH
24893: LD_INT 2
24895: EQUAL
24896: AND
24897: OR
24898: IFFALSE 24908
// mode = 0 ;
24900: LD_ADDR_VAR 0 6
24904: PUSH
24905: LD_INT 0
24907: ST_TO_ADDR
// case mode of 0 :
24908: LD_VAR 0 6
24912: PUSH
24913: LD_INT 0
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 36374
24921: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24922: LD_ADDR_VAR 0 11
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 0
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: LD_INT 2
25018: NEG
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 3
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 3
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25115: LD_ADDR_VAR 0 12
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 2
25238: NEG
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 2
25261: NEG
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 3
25272: NEG
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 3
25283: NEG
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25311: LD_ADDR_VAR 0 13
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 2
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 2
25446: NEG
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: LD_INT 3
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 3
25470: NEG
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 3
25482: NEG
25483: PUSH
25484: LD_INT 3
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25510: LD_ADDR_VAR 0 14
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: LD_INT 2
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 2
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: LD_INT 3
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 3
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: LD_INT 2
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25706: LD_ADDR_VAR 0 15
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 3
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25899: LD_ADDR_VAR 0 16
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: LD_INT 2
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: NEG
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 3
26056: PUSH
26057: LD_INT 3
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: LD_INT 3
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26092: LD_ADDR_VAR 0 17
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: LD_INT 2
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: NEG
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26322: LD_ADDR_VAR 0 18
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 2
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: NEG
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26552: LD_ADDR_VAR 0 19
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 2
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 2
26728: NEG
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: NEG
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: NEG
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26782: LD_ADDR_VAR 0 20
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: LD_INT 2
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 2
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 2
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: LD_INT 2
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 2
26958: NEG
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 2
26969: NEG
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: NEG
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27012: LD_ADDR_VAR 0 21
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 2
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 2
27211: NEG
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27242: LD_ADDR_VAR 0 22
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 2
27418: NEG
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 2
27441: NEG
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27472: LD_ADDR_VAR 0 23
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: LD_INT 1
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: LD_INT 2
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 2
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 2
27648: NEG
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: LD_INT 3
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27752: LD_ADDR_VAR 0 24
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 1
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: LD_INT 2
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 2
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: NEG
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 2
27951: NEG
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28028: LD_ADDR_VAR 0 25
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 3
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28302: LD_ADDR_VAR 0 26
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 2
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 2
28489: NEG
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 3
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 3
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28578: LD_ADDR_VAR 0 27
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: LD_INT 2
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 2
28754: NEG
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: NEG
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 2
28777: NEG
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 2
28800: NEG
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 3
28811: NEG
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 3
28823: NEG
28824: PUSH
28825: LD_INT 2
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28858: LD_ADDR_VAR 0 28
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 2
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 2
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: LD_INT 2
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: LD_INT 3
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: NEG
29082: PUSH
29083: LD_INT 3
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 3
29093: NEG
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: NEG
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29140: LD_ADDR_VAR 0 29
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 2
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 2
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 2
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 2
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: LD_INT 3
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: LD_INT 3
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 3
29384: NEG
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29419: LD_ADDR_VAR 0 30
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: LD_INT 2
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: LD_INT 0
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 2
29596: NEG
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: LD_INT 3
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: LD_INT 2
29623: NEG
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 3
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: PUSH
29642: LD_INT 3
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 3
29662: NEG
29663: PUSH
29664: LD_INT 1
29666: NEG
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29697: LD_ADDR_VAR 0 31
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: NEG
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: LD_INT 3
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 3
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: NEG
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29975: LD_ADDR_VAR 0 32
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PUSH
30058: LD_INT 2
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 2
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 2
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 3
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: NEG
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30253: LD_ADDR_VAR 0 33
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: LD_INT 3
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 3
30497: NEG
30498: PUSH
30499: LD_INT 2
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30532: LD_ADDR_VAR 0 34
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 2
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 2
30711: NEG
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 3
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: LD_INT 3
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30812: LD_ADDR_VAR 0 35
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: NEG
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30924: LD_ADDR_VAR 0 36
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31036: LD_ADDR_VAR 0 37
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: LD_INT 1
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31148: LD_ADDR_VAR 0 38
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31260: LD_ADDR_VAR 0 39
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31372: LD_ADDR_VAR 0 40
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31484: LD_ADDR_VAR 0 41
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 2
31639: NEG
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 3
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 3
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: LD_INT 3
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 2
31747: NEG
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 3
31758: NEG
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: NEG
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: NEG
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31834: LD_ADDR_VAR 0 42
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 2
32012: NEG
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 3
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: LD_INT 3
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 3
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 3
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: NEG
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: LD_INT 3
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32184: LD_ADDR_VAR 0 43
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 2
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: LD_INT 3
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 3
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 3
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 3
32480: NEG
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32532: LD_ADDR_VAR 0 44
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: LD_INT 2
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: LD_INT 3
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 3
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 3
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 3
32775: PUSH
32776: LD_INT 3
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 3
32806: NEG
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32882: LD_ADDR_VAR 0 45
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 3
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 3
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 3
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 3
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: LD_INT 3
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 3
33179: NEG
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: LD_INT 3
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33232: LD_ADDR_VAR 0 46
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 2
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: LD_INT 3
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 2
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 3
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 2
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 3
33528: NEG
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: NEG
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33580: LD_ADDR_VAR 0 47
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: LD_INT 2
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 2
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 2
33707: NEG
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33731: LD_ADDR_VAR 0 48
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 2
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33878: LD_ADDR_VAR 0 49
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: LD_INT 2
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34022: LD_ADDR_VAR 0 50
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34166: LD_ADDR_VAR 0 51
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34313: LD_ADDR_VAR 0 52
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34464: LD_ADDR_VAR 0 53
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: LD_INT 2
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 2
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: NEG
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34694: LD_ADDR_VAR 0 54
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 2
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: NEG
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34924: LD_ADDR_VAR 0 55
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 2
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 2
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35154: LD_ADDR_VAR 0 56
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: LD_INT 2
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 1
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: NEG
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35384: LD_ADDR_VAR 0 57
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 2
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 2
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35614: LD_ADDR_VAR 0 58
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 2
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 2
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35844: LD_ADDR_VAR 0 59
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35932: LD_ADDR_VAR 0 60
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36020: LD_ADDR_VAR 0 61
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36108: LD_ADDR_VAR 0 62
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36196: LD_ADDR_VAR 0 63
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36284: LD_ADDR_VAR 0 64
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: ST_TO_ADDR
// end ; 1 :
36372: GO 42269
36374: LD_INT 1
36376: DOUBLE
36377: EQUAL
36378: IFTRUE 36382
36380: GO 39005
36382: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36383: LD_ADDR_VAR 0 11
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 3
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 3
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36427: LD_ADDR_VAR 0 12
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 3
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 3
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36468: LD_ADDR_VAR 0 13
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 3
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36508: LD_ADDR_VAR 0 14
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 3
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 3
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36549: LD_ADDR_VAR 0 15
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 3
36567: NEG
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 3
36578: NEG
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36593: LD_ADDR_VAR 0 16
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: LD_INT 3
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 3
36612: NEG
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 3
36624: NEG
36625: PUSH
36626: LD_INT 3
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36639: LD_ADDR_VAR 0 17
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 3
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 3
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36683: LD_ADDR_VAR 0 18
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 3
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36724: LD_ADDR_VAR 0 19
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 3
36741: PUSH
36742: LD_INT 3
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36764: LD_ADDR_VAR 0 20
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36805: LD_ADDR_VAR 0 21
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 3
36823: NEG
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 3
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36849: LD_ADDR_VAR 0 22
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: LD_INT 3
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: NEG
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36895: LD_ADDR_VAR 0 23
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: LD_INT 3
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: LD_INT 4
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 3
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36939: LD_ADDR_VAR 0 24
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 3
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 4
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36980: LD_ADDR_VAR 0 25
36984: PUSH
36985: LD_INT 3
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 4
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 3
37007: PUSH
37008: LD_INT 4
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37020: LD_ADDR_VAR 0 26
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 4
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37061: LD_ADDR_VAR 0 27
37065: PUSH
37066: LD_INT 3
37068: NEG
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: NEG
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 4
37090: NEG
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37105: LD_ADDR_VAR 0 28
37109: PUSH
37110: LD_INT 3
37112: NEG
37113: PUSH
37114: LD_INT 3
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 3
37124: NEG
37125: PUSH
37126: LD_INT 4
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 4
37136: NEG
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37151: LD_ADDR_VAR 0 29
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: LD_INT 3
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 4
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: LD_INT 4
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 3
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 5
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: LD_INT 5
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: LD_INT 4
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 6
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 6
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 5
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37306: LD_ADDR_VAR 0 30
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 3
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 4
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 4
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 5
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 5
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 5
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 6
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 6
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37449: LD_ADDR_VAR 0 31
37453: PUSH
37454: LD_INT 3
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 4
37486: PUSH
37487: LD_INT 3
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 4
37496: PUSH
37497: LD_INT 4
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 3
37506: PUSH
37507: LD_INT 4
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 5
37516: PUSH
37517: LD_INT 4
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 5
37526: PUSH
37527: LD_INT 5
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 4
37536: PUSH
37537: LD_INT 5
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 6
37546: PUSH
37547: LD_INT 5
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 6
37556: PUSH
37557: LD_INT 6
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 5
37566: PUSH
37567: LD_INT 6
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37588: LD_ADDR_VAR 0 32
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 3
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 4
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 4
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: LD_INT 3
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: LD_INT 5
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 5
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: LD_INT 4
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 6
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 6
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 5
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37731: LD_ADDR_VAR 0 33
37735: PUSH
37736: LD_INT 2
37738: NEG
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 3
37749: NEG
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 3
37760: NEG
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 3
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 4
37783: NEG
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 4
37794: NEG
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 4
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 5
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 5
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 5
37840: NEG
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 6
37851: NEG
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 6
37862: NEG
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37886: LD_ADDR_VAR 0 34
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 3
37905: NEG
37906: PUSH
37907: LD_INT 2
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: NEG
37918: PUSH
37919: LD_INT 3
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: NEG
37930: PUSH
37931: LD_INT 4
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 4
37941: NEG
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 4
37953: NEG
37954: PUSH
37955: LD_INT 4
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 4
37965: NEG
37966: PUSH
37967: LD_INT 5
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 5
37977: NEG
37978: PUSH
37979: LD_INT 4
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 5
37989: NEG
37990: PUSH
37991: LD_INT 5
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 5
38001: NEG
38002: PUSH
38003: LD_INT 6
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 6
38013: NEG
38014: PUSH
38015: LD_INT 5
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 6
38025: NEG
38026: PUSH
38027: LD_INT 6
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38049: LD_ADDR_VAR 0 41
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: LD_INT 3
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38093: LD_ADDR_VAR 0 42
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38134: LD_ADDR_VAR 0 43
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 2
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38174: LD_ADDR_VAR 0 44
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 3
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38215: LD_ADDR_VAR 0 45
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 3
38244: NEG
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38259: LD_ADDR_VAR 0 46
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 3
38290: NEG
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38305: LD_ADDR_VAR 0 47
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: LD_INT 3
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 3
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38338: LD_ADDR_VAR 0 48
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38369: LD_ADDR_VAR 0 49
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38398: LD_ADDR_VAR 0 50
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38427: LD_ADDR_VAR 0 51
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38458: LD_ADDR_VAR 0 52
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: LD_INT 2
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38491: LD_ADDR_VAR 0 53
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 3
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 3
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38535: LD_ADDR_VAR 0 54
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 3
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 3
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: LIST
38575: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38576: LD_ADDR_VAR 0 55
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: LD_INT 3
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38616: LD_ADDR_VAR 0 56
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 3
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38657: LD_ADDR_VAR 0 57
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 3
38675: NEG
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 3
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38701: LD_ADDR_VAR 0 58
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 3
38732: NEG
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38747: LD_ADDR_VAR 0 59
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38791: LD_ADDR_VAR 0 60
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38832: LD_ADDR_VAR 0 61
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38872: LD_ADDR_VAR 0 62
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38913: LD_ADDR_VAR 0 63
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38957: LD_ADDR_VAR 0 64
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 2
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// end ; 2 :
39003: GO 42269
39005: LD_INT 2
39007: DOUBLE
39008: EQUAL
39009: IFTRUE 39013
39011: GO 42268
39013: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39014: LD_ADDR_VAR 0 29
39018: PUSH
39019: LD_INT 4
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 4
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 5
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 4
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: PUSH
39094: LD_INT 2
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 5
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: LD_INT 3
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 4
39134: PUSH
39135: LD_INT 3
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 4
39144: PUSH
39145: LD_INT 4
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 3
39154: PUSH
39155: LD_INT 4
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 3
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 4
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: LD_INT 4
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 4
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: LD_INT 4
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 5
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: LD_INT 5
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: LD_INT 4
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 5
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 3
39342: NEG
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 4
39353: NEG
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 4
39364: NEG
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 4
39376: NEG
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: NEG
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 4
39399: NEG
39400: PUSH
39401: LD_INT 4
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 4
39411: NEG
39412: PUSH
39413: LD_INT 5
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: NEG
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 3
39435: NEG
39436: PUSH
39437: LD_INT 3
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 4
39447: NEG
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 5
39459: NEG
39460: PUSH
39461: LD_INT 4
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 5
39471: NEG
39472: PUSH
39473: LD_INT 5
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 3
39483: NEG
39484: PUSH
39485: LD_INT 5
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 5
39495: NEG
39496: PUSH
39497: LD_INT 3
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39552: LD_ADDR_VAR 0 30
39556: PUSH
39557: LD_INT 4
39559: PUSH
39560: LD_INT 4
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 4
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 5
39579: PUSH
39580: LD_INT 4
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 5
39589: PUSH
39590: LD_INT 5
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 4
39599: PUSH
39600: LD_INT 5
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 3
39609: PUSH
39610: LD_INT 4
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 5
39629: PUSH
39630: LD_INT 3
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 5
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 3
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 4
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 4
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 4
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: NEG
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 4
39742: NEG
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 4
39753: NEG
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: NEG
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 4
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 5
39798: NEG
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 5
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 5
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: NEG
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 3
39844: NEG
39845: PUSH
39846: LD_INT 3
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 3
39856: NEG
39857: PUSH
39858: LD_INT 4
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 3
39892: NEG
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 4
39904: NEG
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 4
39916: NEG
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 4
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 4
39940: NEG
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 4
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 5
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: LD_INT 4
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 4
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 5
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 3
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 5
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40099: LD_ADDR_VAR 0 31
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 4
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 4
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 5
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: LD_INT 5
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: LD_INT 4
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 3
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 5
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: NEG
40189: PUSH
40190: LD_INT 3
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 3
40199: NEG
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 3
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 4
40255: NEG
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 4
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 4
40278: NEG
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 4
40301: NEG
40302: PUSH
40303: LD_INT 4
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 4
40313: NEG
40314: PUSH
40315: LD_INT 5
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: LD_INT 4
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 3
40337: NEG
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 4
40349: NEG
40350: PUSH
40351: LD_INT 3
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 5
40361: NEG
40362: PUSH
40363: LD_INT 4
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 5
40373: NEG
40374: PUSH
40375: LD_INT 5
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: NEG
40386: PUSH
40387: LD_INT 5
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 5
40397: NEG
40398: PUSH
40399: LD_INT 3
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 3
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 4
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 3
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 3
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 4
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: NEG
40500: PUSH
40501: LD_INT 4
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 4
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 5
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 5
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 4
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 3
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 5
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40649: LD_ADDR_VAR 0 32
40653: PUSH
40654: LD_INT 4
40656: NEG
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 4
40667: NEG
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 3
40679: NEG
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 3
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 4
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 5
40712: NEG
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 5
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 5
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 3
40747: NEG
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 3
40758: NEG
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: NEG
40771: PUSH
40772: LD_INT 4
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 4
40818: NEG
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 4
40830: NEG
40831: PUSH
40832: LD_INT 4
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 4
40854: NEG
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 4
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 5
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 4
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 3
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 4
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 5
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 3
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: LD_INT 5
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 3
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 3
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 4
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 4
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 4
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 4
41061: PUSH
41062: LD_INT 4
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 4
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 5
41081: PUSH
41082: LD_INT 4
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 5
41091: PUSH
41092: LD_INT 5
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 4
41101: PUSH
41102: LD_INT 5
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 3
41111: PUSH
41112: LD_INT 4
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: LD_INT 3
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 5
41131: PUSH
41132: LD_INT 3
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: LD_INT 5
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41196: LD_ADDR_VAR 0 33
41200: PUSH
41201: LD_INT 4
41203: NEG
41204: PUSH
41205: LD_INT 4
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 4
41215: NEG
41216: PUSH
41217: LD_INT 5
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: LD_INT 4
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 3
41239: NEG
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 4
41251: NEG
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 5
41263: NEG
41264: PUSH
41265: LD_INT 4
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 5
41275: NEG
41276: PUSH
41277: LD_INT 5
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: LD_INT 5
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 5
41299: NEG
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 3
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 4
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 3
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 3
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 4
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: NEG
41402: PUSH
41403: LD_INT 4
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 4
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 4
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 5
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 4
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 3
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 5
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 3
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 4
41526: PUSH
41527: LD_INT 3
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 4
41536: PUSH
41537: LD_INT 4
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 3
41546: PUSH
41547: LD_INT 4
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 4
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 4
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 4
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 4
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: LD_INT 5
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 5
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 4
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 3
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 5
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41734: LD_ADDR_VAR 0 34
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 4
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 5
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 4
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 3
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 4
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 5
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 3
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 5
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 3
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 4
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 4
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 4
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 4
41936: PUSH
41937: LD_INT 4
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 4
41946: PUSH
41947: LD_INT 3
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 5
41956: PUSH
41957: LD_INT 4
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 5
41966: PUSH
41967: LD_INT 5
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 4
41976: PUSH
41977: LD_INT 5
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 3
41986: PUSH
41987: LD_INT 4
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 5
42006: PUSH
42007: LD_INT 3
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 3
42016: PUSH
42017: LD_INT 5
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 4
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 4
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 4
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 4
42119: NEG
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 4
42130: NEG
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 4
42164: NEG
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 5
42175: NEG
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 5
42186: NEG
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 5
42198: NEG
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 3
42210: NEG
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
// end ; end ;
42266: GO 42269
42268: POP
// case btype of b_depot , b_warehouse :
42269: LD_VAR 0 1
42273: PUSH
42274: LD_INT 0
42276: DOUBLE
42277: EQUAL
42278: IFTRUE 42288
42280: LD_INT 1
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42288
42286: GO 42489
42288: POP
// case nation of nation_american :
42289: LD_VAR 0 5
42293: PUSH
42294: LD_INT 1
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42358
42302: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42303: LD_ADDR_VAR 0 9
42307: PUSH
42308: LD_VAR 0 11
42312: PUSH
42313: LD_VAR 0 12
42317: PUSH
42318: LD_VAR 0 13
42322: PUSH
42323: LD_VAR 0 14
42327: PUSH
42328: LD_VAR 0 15
42332: PUSH
42333: LD_VAR 0 16
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: PUSH
42346: LD_VAR 0 4
42350: PUSH
42351: LD_INT 1
42353: PLUS
42354: ARRAY
42355: ST_TO_ADDR
42356: GO 42487
42358: LD_INT 2
42360: DOUBLE
42361: EQUAL
42362: IFTRUE 42366
42364: GO 42422
42366: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42367: LD_ADDR_VAR 0 9
42371: PUSH
42372: LD_VAR 0 17
42376: PUSH
42377: LD_VAR 0 18
42381: PUSH
42382: LD_VAR 0 19
42386: PUSH
42387: LD_VAR 0 20
42391: PUSH
42392: LD_VAR 0 21
42396: PUSH
42397: LD_VAR 0 22
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: PUSH
42410: LD_VAR 0 4
42414: PUSH
42415: LD_INT 1
42417: PLUS
42418: ARRAY
42419: ST_TO_ADDR
42420: GO 42487
42422: LD_INT 3
42424: DOUBLE
42425: EQUAL
42426: IFTRUE 42430
42428: GO 42486
42430: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42431: LD_ADDR_VAR 0 9
42435: PUSH
42436: LD_VAR 0 23
42440: PUSH
42441: LD_VAR 0 24
42445: PUSH
42446: LD_VAR 0 25
42450: PUSH
42451: LD_VAR 0 26
42455: PUSH
42456: LD_VAR 0 27
42460: PUSH
42461: LD_VAR 0 28
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: PUSH
42474: LD_VAR 0 4
42478: PUSH
42479: LD_INT 1
42481: PLUS
42482: ARRAY
42483: ST_TO_ADDR
42484: GO 42487
42486: POP
42487: GO 43042
42489: LD_INT 2
42491: DOUBLE
42492: EQUAL
42493: IFTRUE 42503
42495: LD_INT 3
42497: DOUBLE
42498: EQUAL
42499: IFTRUE 42503
42501: GO 42559
42503: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42504: LD_ADDR_VAR 0 9
42508: PUSH
42509: LD_VAR 0 29
42513: PUSH
42514: LD_VAR 0 30
42518: PUSH
42519: LD_VAR 0 31
42523: PUSH
42524: LD_VAR 0 32
42528: PUSH
42529: LD_VAR 0 33
42533: PUSH
42534: LD_VAR 0 34
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: PUSH
42547: LD_VAR 0 4
42551: PUSH
42552: LD_INT 1
42554: PLUS
42555: ARRAY
42556: ST_TO_ADDR
42557: GO 43042
42559: LD_INT 16
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42621
42565: LD_INT 17
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42621
42571: LD_INT 18
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42621
42577: LD_INT 19
42579: DOUBLE
42580: EQUAL
42581: IFTRUE 42621
42583: LD_INT 22
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42621
42589: LD_INT 20
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42621
42595: LD_INT 21
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42621
42601: LD_INT 23
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42621
42607: LD_INT 24
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42621
42613: LD_INT 25
42615: DOUBLE
42616: EQUAL
42617: IFTRUE 42621
42619: GO 42677
42621: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42622: LD_ADDR_VAR 0 9
42626: PUSH
42627: LD_VAR 0 35
42631: PUSH
42632: LD_VAR 0 36
42636: PUSH
42637: LD_VAR 0 37
42641: PUSH
42642: LD_VAR 0 38
42646: PUSH
42647: LD_VAR 0 39
42651: PUSH
42652: LD_VAR 0 40
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: PUSH
42665: LD_VAR 0 4
42669: PUSH
42670: LD_INT 1
42672: PLUS
42673: ARRAY
42674: ST_TO_ADDR
42675: GO 43042
42677: LD_INT 6
42679: DOUBLE
42680: EQUAL
42681: IFTRUE 42733
42683: LD_INT 7
42685: DOUBLE
42686: EQUAL
42687: IFTRUE 42733
42689: LD_INT 8
42691: DOUBLE
42692: EQUAL
42693: IFTRUE 42733
42695: LD_INT 13
42697: DOUBLE
42698: EQUAL
42699: IFTRUE 42733
42701: LD_INT 12
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42733
42707: LD_INT 15
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42733
42713: LD_INT 11
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42733
42719: LD_INT 14
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42733
42725: LD_INT 10
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42733
42731: GO 42789
42733: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42734: LD_ADDR_VAR 0 9
42738: PUSH
42739: LD_VAR 0 41
42743: PUSH
42744: LD_VAR 0 42
42748: PUSH
42749: LD_VAR 0 43
42753: PUSH
42754: LD_VAR 0 44
42758: PUSH
42759: LD_VAR 0 45
42763: PUSH
42764: LD_VAR 0 46
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: PUSH
42777: LD_VAR 0 4
42781: PUSH
42782: LD_INT 1
42784: PLUS
42785: ARRAY
42786: ST_TO_ADDR
42787: GO 43042
42789: LD_INT 36
42791: DOUBLE
42792: EQUAL
42793: IFTRUE 42797
42795: GO 42853
42797: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42798: LD_ADDR_VAR 0 9
42802: PUSH
42803: LD_VAR 0 47
42807: PUSH
42808: LD_VAR 0 48
42812: PUSH
42813: LD_VAR 0 49
42817: PUSH
42818: LD_VAR 0 50
42822: PUSH
42823: LD_VAR 0 51
42827: PUSH
42828: LD_VAR 0 52
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: PUSH
42841: LD_VAR 0 4
42845: PUSH
42846: LD_INT 1
42848: PLUS
42849: ARRAY
42850: ST_TO_ADDR
42851: GO 43042
42853: LD_INT 4
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42879
42859: LD_INT 5
42861: DOUBLE
42862: EQUAL
42863: IFTRUE 42879
42865: LD_INT 34
42867: DOUBLE
42868: EQUAL
42869: IFTRUE 42879
42871: LD_INT 37
42873: DOUBLE
42874: EQUAL
42875: IFTRUE 42879
42877: GO 42935
42879: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42880: LD_ADDR_VAR 0 9
42884: PUSH
42885: LD_VAR 0 53
42889: PUSH
42890: LD_VAR 0 54
42894: PUSH
42895: LD_VAR 0 55
42899: PUSH
42900: LD_VAR 0 56
42904: PUSH
42905: LD_VAR 0 57
42909: PUSH
42910: LD_VAR 0 58
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: PUSH
42923: LD_VAR 0 4
42927: PUSH
42928: LD_INT 1
42930: PLUS
42931: ARRAY
42932: ST_TO_ADDR
42933: GO 43042
42935: LD_INT 31
42937: DOUBLE
42938: EQUAL
42939: IFTRUE 42985
42941: LD_INT 32
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42985
42947: LD_INT 33
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42985
42953: LD_INT 27
42955: DOUBLE
42956: EQUAL
42957: IFTRUE 42985
42959: LD_INT 26
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 42985
42965: LD_INT 28
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42985
42971: LD_INT 29
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 42985
42977: LD_INT 30
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 42985
42983: GO 43041
42985: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42986: LD_ADDR_VAR 0 9
42990: PUSH
42991: LD_VAR 0 59
42995: PUSH
42996: LD_VAR 0 60
43000: PUSH
43001: LD_VAR 0 61
43005: PUSH
43006: LD_VAR 0 62
43010: PUSH
43011: LD_VAR 0 63
43015: PUSH
43016: LD_VAR 0 64
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: PUSH
43029: LD_VAR 0 4
43033: PUSH
43034: LD_INT 1
43036: PLUS
43037: ARRAY
43038: ST_TO_ADDR
43039: GO 43042
43041: POP
// temp_list2 = [ ] ;
43042: LD_ADDR_VAR 0 10
43046: PUSH
43047: EMPTY
43048: ST_TO_ADDR
// for i in temp_list do
43049: LD_ADDR_VAR 0 8
43053: PUSH
43054: LD_VAR 0 9
43058: PUSH
43059: FOR_IN
43060: IFFALSE 43112
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43062: LD_ADDR_VAR 0 10
43066: PUSH
43067: LD_VAR 0 10
43071: PUSH
43072: LD_VAR 0 8
43076: PUSH
43077: LD_INT 1
43079: ARRAY
43080: PUSH
43081: LD_VAR 0 2
43085: PLUS
43086: PUSH
43087: LD_VAR 0 8
43091: PUSH
43092: LD_INT 2
43094: ARRAY
43095: PUSH
43096: LD_VAR 0 3
43100: PLUS
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: ADD
43109: ST_TO_ADDR
43110: GO 43059
43112: POP
43113: POP
// result = temp_list2 ;
43114: LD_ADDR_VAR 0 7
43118: PUSH
43119: LD_VAR 0 10
43123: ST_TO_ADDR
// end ;
43124: LD_VAR 0 7
43128: RET
// export function EnemyInRange ( unit , dist ) ; begin
43129: LD_INT 0
43131: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: CALL_OW 255
43146: PPUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: CALL_OW 250
43156: PPUSH
43157: LD_VAR 0 1
43161: PPUSH
43162: CALL_OW 251
43166: PPUSH
43167: LD_VAR 0 2
43171: PPUSH
43172: CALL 16386 0 4
43176: PUSH
43177: LD_INT 4
43179: ARRAY
43180: ST_TO_ADDR
// end ;
43181: LD_VAR 0 3
43185: RET
// export function PlayerSeeMe ( unit ) ; begin
43186: LD_INT 0
43188: PPUSH
// result := See ( your_side , unit ) ;
43189: LD_ADDR_VAR 0 2
43193: PUSH
43194: LD_OWVAR 2
43198: PPUSH
43199: LD_VAR 0 1
43203: PPUSH
43204: CALL_OW 292
43208: ST_TO_ADDR
// end ;
43209: LD_VAR 0 2
43213: RET
// export function ReverseDir ( unit ) ; begin
43214: LD_INT 0
43216: PPUSH
// if not unit then
43217: LD_VAR 0 1
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 43249
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43226: LD_ADDR_VAR 0 2
43230: PUSH
43231: LD_VAR 0 1
43235: PPUSH
43236: CALL_OW 254
43240: PUSH
43241: LD_INT 3
43243: PLUS
43244: PUSH
43245: LD_INT 6
43247: MOD
43248: ST_TO_ADDR
// end ;
43249: LD_VAR 0 2
43253: RET
// export function ReverseArray ( array ) ; var i ; begin
43254: LD_INT 0
43256: PPUSH
43257: PPUSH
// if not array then
43258: LD_VAR 0 1
43262: NOT
43263: IFFALSE 43267
// exit ;
43265: GO 43322
// result := [ ] ;
43267: LD_ADDR_VAR 0 2
43271: PUSH
43272: EMPTY
43273: ST_TO_ADDR
// for i := array downto 1 do
43274: LD_ADDR_VAR 0 3
43278: PUSH
43279: DOUBLE
43280: LD_VAR 0 1
43284: INC
43285: ST_TO_ADDR
43286: LD_INT 1
43288: PUSH
43289: FOR_DOWNTO
43290: IFFALSE 43320
// result := Join ( result , array [ i ] ) ;
43292: LD_ADDR_VAR 0 2
43296: PUSH
43297: LD_VAR 0 2
43301: PPUSH
43302: LD_VAR 0 1
43306: PUSH
43307: LD_VAR 0 3
43311: ARRAY
43312: PPUSH
43313: CALL 48164 0 2
43317: ST_TO_ADDR
43318: GO 43289
43320: POP
43321: POP
// end ;
43322: LD_VAR 0 2
43326: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43327: LD_INT 0
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
43334: PPUSH
// if not unit or not hexes then
43335: LD_VAR 0 1
43339: NOT
43340: IFTRUE 43349
43342: PUSH
43343: LD_VAR 0 2
43347: NOT
43348: OR
43349: IFFALSE 43353
// exit ;
43351: GO 43476
// dist := 9999 ;
43353: LD_ADDR_VAR 0 5
43357: PUSH
43358: LD_INT 9999
43360: ST_TO_ADDR
// for i = 1 to hexes do
43361: LD_ADDR_VAR 0 4
43365: PUSH
43366: DOUBLE
43367: LD_INT 1
43369: DEC
43370: ST_TO_ADDR
43371: LD_VAR 0 2
43375: PUSH
43376: FOR_TO
43377: IFFALSE 43464
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43379: LD_ADDR_VAR 0 6
43383: PUSH
43384: LD_VAR 0 1
43388: PPUSH
43389: LD_VAR 0 2
43393: PUSH
43394: LD_VAR 0 4
43398: ARRAY
43399: PUSH
43400: LD_INT 1
43402: ARRAY
43403: PPUSH
43404: LD_VAR 0 2
43408: PUSH
43409: LD_VAR 0 4
43413: ARRAY
43414: PUSH
43415: LD_INT 2
43417: ARRAY
43418: PPUSH
43419: CALL_OW 297
43423: ST_TO_ADDR
// if tdist < dist then
43424: LD_VAR 0 6
43428: PUSH
43429: LD_VAR 0 5
43433: LESS
43434: IFFALSE 43462
// begin hex := hexes [ i ] ;
43436: LD_ADDR_VAR 0 8
43440: PUSH
43441: LD_VAR 0 2
43445: PUSH
43446: LD_VAR 0 4
43450: ARRAY
43451: ST_TO_ADDR
// dist := tdist ;
43452: LD_ADDR_VAR 0 5
43456: PUSH
43457: LD_VAR 0 6
43461: ST_TO_ADDR
// end ; end ;
43462: GO 43376
43464: POP
43465: POP
// result := hex ;
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: LD_VAR 0 8
43475: ST_TO_ADDR
// end ;
43476: LD_VAR 0 3
43480: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43481: LD_INT 0
43483: PPUSH
43484: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43485: LD_VAR 0 1
43489: NOT
43490: IFTRUE 43529
43492: PUSH
43493: LD_VAR 0 1
43497: PUSH
43498: LD_INT 21
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 23
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PPUSH
43522: CALL_OW 69
43526: IN
43527: NOT
43528: OR
43529: IFFALSE 43533
// exit ;
43531: GO 43580
// for i = 1 to 3 do
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: DOUBLE
43539: LD_INT 1
43541: DEC
43542: ST_TO_ADDR
43543: LD_INT 3
43545: PUSH
43546: FOR_TO
43547: IFFALSE 43578
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43549: LD_VAR 0 1
43553: PPUSH
43554: CALL_OW 250
43558: PPUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: CALL_OW 251
43568: PPUSH
43569: LD_INT 1
43571: PPUSH
43572: CALL_OW 453
43576: GO 43546
43578: POP
43579: POP
// end ;
43580: LD_VAR 0 2
43584: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43585: LD_INT 0
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
// if not unit or not enemy_unit then
43593: LD_VAR 0 1
43597: NOT
43598: IFTRUE 43607
43600: PUSH
43601: LD_VAR 0 2
43605: NOT
43606: OR
43607: IFFALSE 43611
// exit ;
43609: GO 44082
// if GetLives ( i ) < 250 then
43611: LD_VAR 0 4
43615: PPUSH
43616: CALL_OW 256
43620: PUSH
43621: LD_INT 250
43623: LESS
43624: IFFALSE 43637
// begin ComAutodestruct ( i ) ;
43626: LD_VAR 0 4
43630: PPUSH
43631: CALL 43481 0 1
// exit ;
43635: GO 44082
// end ; x := GetX ( enemy_unit ) ;
43637: LD_ADDR_VAR 0 7
43641: PUSH
43642: LD_VAR 0 2
43646: PPUSH
43647: CALL_OW 250
43651: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43652: LD_ADDR_VAR 0 8
43656: PUSH
43657: LD_VAR 0 2
43661: PPUSH
43662: CALL_OW 251
43666: ST_TO_ADDR
// if not x or not y then
43667: LD_VAR 0 7
43671: NOT
43672: IFTRUE 43681
43674: PUSH
43675: LD_VAR 0 8
43679: NOT
43680: OR
43681: IFFALSE 43685
// exit ;
43683: GO 44082
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43685: LD_ADDR_VAR 0 6
43689: PUSH
43690: LD_VAR 0 7
43694: PPUSH
43695: LD_INT 0
43697: PPUSH
43698: LD_INT 4
43700: PPUSH
43701: CALL_OW 272
43705: PUSH
43706: LD_VAR 0 8
43710: PPUSH
43711: LD_INT 0
43713: PPUSH
43714: LD_INT 4
43716: PPUSH
43717: CALL_OW 273
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_VAR 0 7
43730: PPUSH
43731: LD_INT 1
43733: PPUSH
43734: LD_INT 4
43736: PPUSH
43737: CALL_OW 272
43741: PUSH
43742: LD_VAR 0 8
43746: PPUSH
43747: LD_INT 1
43749: PPUSH
43750: LD_INT 4
43752: PPUSH
43753: CALL_OW 273
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_VAR 0 7
43766: PPUSH
43767: LD_INT 2
43769: PPUSH
43770: LD_INT 4
43772: PPUSH
43773: CALL_OW 272
43777: PUSH
43778: LD_VAR 0 8
43782: PPUSH
43783: LD_INT 2
43785: PPUSH
43786: LD_INT 4
43788: PPUSH
43789: CALL_OW 273
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_VAR 0 7
43802: PPUSH
43803: LD_INT 3
43805: PPUSH
43806: LD_INT 4
43808: PPUSH
43809: CALL_OW 272
43813: PUSH
43814: LD_VAR 0 8
43818: PPUSH
43819: LD_INT 3
43821: PPUSH
43822: LD_INT 4
43824: PPUSH
43825: CALL_OW 273
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_VAR 0 7
43838: PPUSH
43839: LD_INT 4
43841: PPUSH
43842: LD_INT 4
43844: PPUSH
43845: CALL_OW 272
43849: PUSH
43850: LD_VAR 0 8
43854: PPUSH
43855: LD_INT 4
43857: PPUSH
43858: LD_INT 4
43860: PPUSH
43861: CALL_OW 273
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_VAR 0 7
43874: PPUSH
43875: LD_INT 5
43877: PPUSH
43878: LD_INT 4
43880: PPUSH
43881: CALL_OW 272
43885: PUSH
43886: LD_VAR 0 8
43890: PPUSH
43891: LD_INT 5
43893: PPUSH
43894: LD_INT 4
43896: PPUSH
43897: CALL_OW 273
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: ST_TO_ADDR
// for i = tmp downto 1 do
43914: LD_ADDR_VAR 0 4
43918: PUSH
43919: DOUBLE
43920: LD_VAR 0 6
43924: INC
43925: ST_TO_ADDR
43926: LD_INT 1
43928: PUSH
43929: FOR_DOWNTO
43930: IFFALSE 44033
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43932: LD_VAR 0 6
43936: PUSH
43937: LD_VAR 0 4
43941: ARRAY
43942: PUSH
43943: LD_INT 1
43945: ARRAY
43946: PPUSH
43947: LD_VAR 0 6
43951: PUSH
43952: LD_VAR 0 4
43956: ARRAY
43957: PUSH
43958: LD_INT 2
43960: ARRAY
43961: PPUSH
43962: CALL_OW 488
43966: NOT
43967: IFTRUE 44009
43969: PUSH
43970: LD_VAR 0 6
43974: PUSH
43975: LD_VAR 0 4
43979: ARRAY
43980: PUSH
43981: LD_INT 1
43983: ARRAY
43984: PPUSH
43985: LD_VAR 0 6
43989: PUSH
43990: LD_VAR 0 4
43994: ARRAY
43995: PUSH
43996: LD_INT 2
43998: ARRAY
43999: PPUSH
44000: CALL_OW 428
44004: PUSH
44005: LD_INT 0
44007: NONEQUAL
44008: OR
44009: IFFALSE 44031
// tmp := Delete ( tmp , i ) ;
44011: LD_ADDR_VAR 0 6
44015: PUSH
44016: LD_VAR 0 6
44020: PPUSH
44021: LD_VAR 0 4
44025: PPUSH
44026: CALL_OW 3
44030: ST_TO_ADDR
44031: GO 43929
44033: POP
44034: POP
// j := GetClosestHex ( unit , tmp ) ;
44035: LD_ADDR_VAR 0 5
44039: PUSH
44040: LD_VAR 0 1
44044: PPUSH
44045: LD_VAR 0 6
44049: PPUSH
44050: CALL 43327 0 2
44054: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44055: LD_VAR 0 1
44059: PPUSH
44060: LD_VAR 0 5
44064: PUSH
44065: LD_INT 1
44067: ARRAY
44068: PPUSH
44069: LD_VAR 0 5
44073: PUSH
44074: LD_INT 2
44076: ARRAY
44077: PPUSH
44078: CALL_OW 111
// end ;
44082: LD_VAR 0 3
44086: RET
// export function PrepareApemanSoldier ( ) ; begin
44087: LD_INT 0
44089: PPUSH
// uc_nation := 0 ;
44090: LD_ADDR_OWVAR 21
44094: PUSH
44095: LD_INT 0
44097: ST_TO_ADDR
// hc_sex := sex_male ;
44098: LD_ADDR_OWVAR 27
44102: PUSH
44103: LD_INT 1
44105: ST_TO_ADDR
// hc_name :=  ;
44106: LD_ADDR_OWVAR 26
44110: PUSH
44111: LD_STRING 
44113: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44114: LD_ADDR_OWVAR 28
44118: PUSH
44119: LD_INT 15
44121: ST_TO_ADDR
// hc_gallery :=  ;
44122: LD_ADDR_OWVAR 33
44126: PUSH
44127: LD_STRING 
44129: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44130: LD_ADDR_OWVAR 31
44134: PUSH
44135: LD_INT 0
44137: PPUSH
44138: LD_INT 3
44140: PPUSH
44141: CALL_OW 12
44145: PUSH
44146: LD_INT 0
44148: PPUSH
44149: LD_INT 3
44151: PPUSH
44152: CALL_OW 12
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44169: LD_ADDR_OWVAR 29
44173: PUSH
44174: LD_INT 12
44176: PUSH
44177: LD_INT 12
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// end ;
44184: LD_VAR 0 1
44188: RET
// export function PrepareApemanEngineer ( ) ; begin
44189: LD_INT 0
44191: PPUSH
// uc_nation := 0 ;
44192: LD_ADDR_OWVAR 21
44196: PUSH
44197: LD_INT 0
44199: ST_TO_ADDR
// hc_sex := sex_male ;
44200: LD_ADDR_OWVAR 27
44204: PUSH
44205: LD_INT 1
44207: ST_TO_ADDR
// hc_name :=  ;
44208: LD_ADDR_OWVAR 26
44212: PUSH
44213: LD_STRING 
44215: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44216: LD_ADDR_OWVAR 28
44220: PUSH
44221: LD_INT 16
44223: ST_TO_ADDR
// hc_gallery :=  ;
44224: LD_ADDR_OWVAR 33
44228: PUSH
44229: LD_STRING 
44231: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44232: LD_ADDR_OWVAR 31
44236: PUSH
44237: LD_INT 0
44239: PPUSH
44240: LD_INT 3
44242: PPUSH
44243: CALL_OW 12
44247: PUSH
44248: LD_INT 0
44250: PPUSH
44251: LD_INT 3
44253: PPUSH
44254: CALL_OW 12
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44271: LD_ADDR_OWVAR 29
44275: PUSH
44276: LD_INT 12
44278: PUSH
44279: LD_INT 12
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// end ;
44286: LD_VAR 0 1
44290: RET
// export function PrepareApeman ( agressivity ) ; begin
44291: LD_INT 0
44293: PPUSH
// uc_side := 0 ;
44294: LD_ADDR_OWVAR 20
44298: PUSH
44299: LD_INT 0
44301: ST_TO_ADDR
// uc_nation := 0 ;
44302: LD_ADDR_OWVAR 21
44306: PUSH
44307: LD_INT 0
44309: ST_TO_ADDR
// hc_sex := sex_male ;
44310: LD_ADDR_OWVAR 27
44314: PUSH
44315: LD_INT 1
44317: ST_TO_ADDR
// hc_class := class_apeman ;
44318: LD_ADDR_OWVAR 28
44322: PUSH
44323: LD_INT 12
44325: ST_TO_ADDR
// hc_gallery :=  ;
44326: LD_ADDR_OWVAR 33
44330: PUSH
44331: LD_STRING 
44333: ST_TO_ADDR
// hc_name :=  ;
44334: LD_ADDR_OWVAR 26
44338: PUSH
44339: LD_STRING 
44341: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44342: LD_ADDR_OWVAR 29
44346: PUSH
44347: LD_INT 12
44349: PUSH
44350: LD_INT 12
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// if agressivity = 0 then
44357: LD_VAR 0 1
44361: PUSH
44362: LD_INT 0
44364: EQUAL
44365: IFFALSE 44377
// hc_agressivity := 0 else
44367: LD_ADDR_OWVAR 35
44371: PUSH
44372: LD_INT 0
44374: ST_TO_ADDR
44375: GO 44398
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44377: LD_ADDR_OWVAR 35
44381: PUSH
44382: LD_VAR 0 1
44386: NEG
44387: PPUSH
44388: LD_VAR 0 1
44392: PPUSH
44393: CALL_OW 12
44397: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44398: LD_ADDR_OWVAR 31
44402: PUSH
44403: LD_INT 0
44405: PPUSH
44406: LD_INT 3
44408: PPUSH
44409: CALL_OW 12
44413: PUSH
44414: LD_INT 0
44416: PPUSH
44417: LD_INT 3
44419: PPUSH
44420: CALL_OW 12
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// end ;
44437: LD_VAR 0 2
44441: RET
// export function PrepareTiger ( agressivity ) ; begin
44442: LD_INT 0
44444: PPUSH
// uc_side := 0 ;
44445: LD_ADDR_OWVAR 20
44449: PUSH
44450: LD_INT 0
44452: ST_TO_ADDR
// uc_nation := 0 ;
44453: LD_ADDR_OWVAR 21
44457: PUSH
44458: LD_INT 0
44460: ST_TO_ADDR
// InitHc ;
44461: CALL_OW 19
// hc_class := class_tiger ;
44465: LD_ADDR_OWVAR 28
44469: PUSH
44470: LD_INT 14
44472: ST_TO_ADDR
// hc_gallery :=  ;
44473: LD_ADDR_OWVAR 33
44477: PUSH
44478: LD_STRING 
44480: ST_TO_ADDR
// hc_name :=  ;
44481: LD_ADDR_OWVAR 26
44485: PUSH
44486: LD_STRING 
44488: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44489: LD_ADDR_OWVAR 35
44493: PUSH
44494: LD_VAR 0 1
44498: NEG
44499: PPUSH
44500: LD_VAR 0 1
44504: PPUSH
44505: CALL_OW 12
44509: ST_TO_ADDR
// end ;
44510: LD_VAR 0 2
44514: RET
// export function PrepareEnchidna ( ) ; begin
44515: LD_INT 0
44517: PPUSH
// uc_side := 0 ;
44518: LD_ADDR_OWVAR 20
44522: PUSH
44523: LD_INT 0
44525: ST_TO_ADDR
// uc_nation := 0 ;
44526: LD_ADDR_OWVAR 21
44530: PUSH
44531: LD_INT 0
44533: ST_TO_ADDR
// InitHc ;
44534: CALL_OW 19
// hc_class := class_baggie ;
44538: LD_ADDR_OWVAR 28
44542: PUSH
44543: LD_INT 13
44545: ST_TO_ADDR
// hc_gallery :=  ;
44546: LD_ADDR_OWVAR 33
44550: PUSH
44551: LD_STRING 
44553: ST_TO_ADDR
// hc_name :=  ;
44554: LD_ADDR_OWVAR 26
44558: PUSH
44559: LD_STRING 
44561: ST_TO_ADDR
// end ;
44562: LD_VAR 0 1
44566: RET
// export function PrepareFrog ( ) ; begin
44567: LD_INT 0
44569: PPUSH
// uc_side := 0 ;
44570: LD_ADDR_OWVAR 20
44574: PUSH
44575: LD_INT 0
44577: ST_TO_ADDR
// uc_nation := 0 ;
44578: LD_ADDR_OWVAR 21
44582: PUSH
44583: LD_INT 0
44585: ST_TO_ADDR
// InitHc ;
44586: CALL_OW 19
// hc_class := class_frog ;
44590: LD_ADDR_OWVAR 28
44594: PUSH
44595: LD_INT 19
44597: ST_TO_ADDR
// hc_gallery :=  ;
44598: LD_ADDR_OWVAR 33
44602: PUSH
44603: LD_STRING 
44605: ST_TO_ADDR
// hc_name :=  ;
44606: LD_ADDR_OWVAR 26
44610: PUSH
44611: LD_STRING 
44613: ST_TO_ADDR
// end ;
44614: LD_VAR 0 1
44618: RET
// export function PrepareFish ( ) ; begin
44619: LD_INT 0
44621: PPUSH
// uc_side := 0 ;
44622: LD_ADDR_OWVAR 20
44626: PUSH
44627: LD_INT 0
44629: ST_TO_ADDR
// uc_nation := 0 ;
44630: LD_ADDR_OWVAR 21
44634: PUSH
44635: LD_INT 0
44637: ST_TO_ADDR
// InitHc ;
44638: CALL_OW 19
// hc_class := class_fish ;
44642: LD_ADDR_OWVAR 28
44646: PUSH
44647: LD_INT 20
44649: ST_TO_ADDR
// hc_gallery :=  ;
44650: LD_ADDR_OWVAR 33
44654: PUSH
44655: LD_STRING 
44657: ST_TO_ADDR
// hc_name :=  ;
44658: LD_ADDR_OWVAR 26
44662: PUSH
44663: LD_STRING 
44665: ST_TO_ADDR
// end ;
44666: LD_VAR 0 1
44670: RET
// export function PrepareBird ( ) ; begin
44671: LD_INT 0
44673: PPUSH
// uc_side := 0 ;
44674: LD_ADDR_OWVAR 20
44678: PUSH
44679: LD_INT 0
44681: ST_TO_ADDR
// uc_nation := 0 ;
44682: LD_ADDR_OWVAR 21
44686: PUSH
44687: LD_INT 0
44689: ST_TO_ADDR
// InitHc ;
44690: CALL_OW 19
// hc_class := class_phororhacos ;
44694: LD_ADDR_OWVAR 28
44698: PUSH
44699: LD_INT 18
44701: ST_TO_ADDR
// hc_gallery :=  ;
44702: LD_ADDR_OWVAR 33
44706: PUSH
44707: LD_STRING 
44709: ST_TO_ADDR
// hc_name :=  ;
44710: LD_ADDR_OWVAR 26
44714: PUSH
44715: LD_STRING 
44717: ST_TO_ADDR
// end ;
44718: LD_VAR 0 1
44722: RET
// export function PrepareHorse ( ) ; begin
44723: LD_INT 0
44725: PPUSH
// uc_side := 0 ;
44726: LD_ADDR_OWVAR 20
44730: PUSH
44731: LD_INT 0
44733: ST_TO_ADDR
// uc_nation := 0 ;
44734: LD_ADDR_OWVAR 21
44738: PUSH
44739: LD_INT 0
44741: ST_TO_ADDR
// InitHc ;
44742: CALL_OW 19
// hc_class := class_horse ;
44746: LD_ADDR_OWVAR 28
44750: PUSH
44751: LD_INT 21
44753: ST_TO_ADDR
// hc_gallery :=  ;
44754: LD_ADDR_OWVAR 33
44758: PUSH
44759: LD_STRING 
44761: ST_TO_ADDR
// hc_name :=  ;
44762: LD_ADDR_OWVAR 26
44766: PUSH
44767: LD_STRING 
44769: ST_TO_ADDR
// end ;
44770: LD_VAR 0 1
44774: RET
// export function PrepareMastodont ( ) ; begin
44775: LD_INT 0
44777: PPUSH
// uc_side := 0 ;
44778: LD_ADDR_OWVAR 20
44782: PUSH
44783: LD_INT 0
44785: ST_TO_ADDR
// uc_nation := 0 ;
44786: LD_ADDR_OWVAR 21
44790: PUSH
44791: LD_INT 0
44793: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44794: LD_ADDR_OWVAR 37
44798: PUSH
44799: LD_INT 31
44801: ST_TO_ADDR
// vc_control := control_rider ;
44802: LD_ADDR_OWVAR 38
44806: PUSH
44807: LD_INT 4
44809: ST_TO_ADDR
// end ;
44810: LD_VAR 0 1
44814: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44815: LD_INT 0
44817: PPUSH
44818: PPUSH
44819: PPUSH
// uc_side = 0 ;
44820: LD_ADDR_OWVAR 20
44824: PUSH
44825: LD_INT 0
44827: ST_TO_ADDR
// uc_nation = 0 ;
44828: LD_ADDR_OWVAR 21
44832: PUSH
44833: LD_INT 0
44835: ST_TO_ADDR
// InitHc_All ( ) ;
44836: CALL_OW 584
// InitVc ;
44840: CALL_OW 20
// if mastodonts then
44844: LD_VAR 0 6
44848: IFFALSE 44915
// for i = 1 to mastodonts do
44850: LD_ADDR_VAR 0 11
44854: PUSH
44855: DOUBLE
44856: LD_INT 1
44858: DEC
44859: ST_TO_ADDR
44860: LD_VAR 0 6
44864: PUSH
44865: FOR_TO
44866: IFFALSE 44913
// begin vc_chassis := 31 ;
44868: LD_ADDR_OWVAR 37
44872: PUSH
44873: LD_INT 31
44875: ST_TO_ADDR
// vc_control := control_rider ;
44876: LD_ADDR_OWVAR 38
44880: PUSH
44881: LD_INT 4
44883: ST_TO_ADDR
// animal := CreateVehicle ;
44884: LD_ADDR_VAR 0 12
44888: PUSH
44889: CALL_OW 45
44893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44894: LD_VAR 0 12
44898: PPUSH
44899: LD_VAR 0 8
44903: PPUSH
44904: LD_INT 0
44906: PPUSH
44907: CALL 47057 0 3
// end ;
44911: GO 44865
44913: POP
44914: POP
// if horses then
44915: LD_VAR 0 5
44919: IFFALSE 44986
// for i = 1 to horses do
44921: LD_ADDR_VAR 0 11
44925: PUSH
44926: DOUBLE
44927: LD_INT 1
44929: DEC
44930: ST_TO_ADDR
44931: LD_VAR 0 5
44935: PUSH
44936: FOR_TO
44937: IFFALSE 44984
// begin hc_class := 21 ;
44939: LD_ADDR_OWVAR 28
44943: PUSH
44944: LD_INT 21
44946: ST_TO_ADDR
// hc_gallery :=  ;
44947: LD_ADDR_OWVAR 33
44951: PUSH
44952: LD_STRING 
44954: ST_TO_ADDR
// animal := CreateHuman ;
44955: LD_ADDR_VAR 0 12
44959: PUSH
44960: CALL_OW 44
44964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44965: LD_VAR 0 12
44969: PPUSH
44970: LD_VAR 0 8
44974: PPUSH
44975: LD_INT 0
44977: PPUSH
44978: CALL 47057 0 3
// end ;
44982: GO 44936
44984: POP
44985: POP
// if birds then
44986: LD_VAR 0 1
44990: IFFALSE 45057
// for i = 1 to birds do
44992: LD_ADDR_VAR 0 11
44996: PUSH
44997: DOUBLE
44998: LD_INT 1
45000: DEC
45001: ST_TO_ADDR
45002: LD_VAR 0 1
45006: PUSH
45007: FOR_TO
45008: IFFALSE 45055
// begin hc_class := 18 ;
45010: LD_ADDR_OWVAR 28
45014: PUSH
45015: LD_INT 18
45017: ST_TO_ADDR
// hc_gallery =  ;
45018: LD_ADDR_OWVAR 33
45022: PUSH
45023: LD_STRING 
45025: ST_TO_ADDR
// animal := CreateHuman ;
45026: LD_ADDR_VAR 0 12
45030: PUSH
45031: CALL_OW 44
45035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45036: LD_VAR 0 12
45040: PPUSH
45041: LD_VAR 0 8
45045: PPUSH
45046: LD_INT 0
45048: PPUSH
45049: CALL 47057 0 3
// end ;
45053: GO 45007
45055: POP
45056: POP
// if tigers then
45057: LD_VAR 0 2
45061: IFFALSE 45145
// for i = 1 to tigers do
45063: LD_ADDR_VAR 0 11
45067: PUSH
45068: DOUBLE
45069: LD_INT 1
45071: DEC
45072: ST_TO_ADDR
45073: LD_VAR 0 2
45077: PUSH
45078: FOR_TO
45079: IFFALSE 45143
// begin hc_class = class_tiger ;
45081: LD_ADDR_OWVAR 28
45085: PUSH
45086: LD_INT 14
45088: ST_TO_ADDR
// hc_gallery =  ;
45089: LD_ADDR_OWVAR 33
45093: PUSH
45094: LD_STRING 
45096: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45097: LD_ADDR_OWVAR 35
45101: PUSH
45102: LD_INT 7
45104: NEG
45105: PPUSH
45106: LD_INT 7
45108: PPUSH
45109: CALL_OW 12
45113: ST_TO_ADDR
// animal := CreateHuman ;
45114: LD_ADDR_VAR 0 12
45118: PUSH
45119: CALL_OW 44
45123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45124: LD_VAR 0 12
45128: PPUSH
45129: LD_VAR 0 8
45133: PPUSH
45134: LD_INT 0
45136: PPUSH
45137: CALL 47057 0 3
// end ;
45141: GO 45078
45143: POP
45144: POP
// if apemans then
45145: LD_VAR 0 3
45149: IFFALSE 45272
// for i = 1 to apemans do
45151: LD_ADDR_VAR 0 11
45155: PUSH
45156: DOUBLE
45157: LD_INT 1
45159: DEC
45160: ST_TO_ADDR
45161: LD_VAR 0 3
45165: PUSH
45166: FOR_TO
45167: IFFALSE 45270
// begin hc_class = class_apeman ;
45169: LD_ADDR_OWVAR 28
45173: PUSH
45174: LD_INT 12
45176: ST_TO_ADDR
// hc_gallery =  ;
45177: LD_ADDR_OWVAR 33
45181: PUSH
45182: LD_STRING 
45184: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45185: LD_ADDR_OWVAR 35
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PPUSH
45194: LD_INT 2
45196: PPUSH
45197: CALL_OW 12
45201: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45202: LD_ADDR_OWVAR 31
45206: PUSH
45207: LD_INT 1
45209: PPUSH
45210: LD_INT 3
45212: PPUSH
45213: CALL_OW 12
45217: PUSH
45218: LD_INT 1
45220: PPUSH
45221: LD_INT 3
45223: PPUSH
45224: CALL_OW 12
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// animal := CreateHuman ;
45241: LD_ADDR_VAR 0 12
45245: PUSH
45246: CALL_OW 44
45250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45251: LD_VAR 0 12
45255: PPUSH
45256: LD_VAR 0 8
45260: PPUSH
45261: LD_INT 0
45263: PPUSH
45264: CALL 47057 0 3
// end ;
45268: GO 45166
45270: POP
45271: POP
// if enchidnas then
45272: LD_VAR 0 4
45276: IFFALSE 45343
// for i = 1 to enchidnas do
45278: LD_ADDR_VAR 0 11
45282: PUSH
45283: DOUBLE
45284: LD_INT 1
45286: DEC
45287: ST_TO_ADDR
45288: LD_VAR 0 4
45292: PUSH
45293: FOR_TO
45294: IFFALSE 45341
// begin hc_class = 13 ;
45296: LD_ADDR_OWVAR 28
45300: PUSH
45301: LD_INT 13
45303: ST_TO_ADDR
// hc_gallery =  ;
45304: LD_ADDR_OWVAR 33
45308: PUSH
45309: LD_STRING 
45311: ST_TO_ADDR
// animal := CreateHuman ;
45312: LD_ADDR_VAR 0 12
45316: PUSH
45317: CALL_OW 44
45321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45322: LD_VAR 0 12
45326: PPUSH
45327: LD_VAR 0 8
45331: PPUSH
45332: LD_INT 0
45334: PPUSH
45335: CALL 47057 0 3
// end ;
45339: GO 45293
45341: POP
45342: POP
// if fishes then
45343: LD_VAR 0 7
45347: IFFALSE 45414
// for i = 1 to fishes do
45349: LD_ADDR_VAR 0 11
45353: PUSH
45354: DOUBLE
45355: LD_INT 1
45357: DEC
45358: ST_TO_ADDR
45359: LD_VAR 0 7
45363: PUSH
45364: FOR_TO
45365: IFFALSE 45412
// begin hc_class = 20 ;
45367: LD_ADDR_OWVAR 28
45371: PUSH
45372: LD_INT 20
45374: ST_TO_ADDR
// hc_gallery =  ;
45375: LD_ADDR_OWVAR 33
45379: PUSH
45380: LD_STRING 
45382: ST_TO_ADDR
// animal := CreateHuman ;
45383: LD_ADDR_VAR 0 12
45387: PUSH
45388: CALL_OW 44
45392: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45393: LD_VAR 0 12
45397: PPUSH
45398: LD_VAR 0 9
45402: PPUSH
45403: LD_INT 0
45405: PPUSH
45406: CALL 47057 0 3
// end ;
45410: GO 45364
45412: POP
45413: POP
// end ;
45414: LD_VAR 0 10
45418: RET
// export function WantHeal ( sci , unit ) ; begin
45419: LD_INT 0
45421: PPUSH
// if GetTaskList ( sci ) > 0 then
45422: LD_VAR 0 1
45426: PPUSH
45427: CALL_OW 437
45431: PUSH
45432: LD_INT 0
45434: GREATER
45435: IFFALSE 45507
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45437: LD_VAR 0 1
45441: PPUSH
45442: CALL_OW 437
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PUSH
45455: LD_STRING l
45457: EQUAL
45458: IFFALSE 45485
45460: PUSH
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 437
45470: PUSH
45471: LD_INT 1
45473: ARRAY
45474: PUSH
45475: LD_INT 4
45477: ARRAY
45478: PUSH
45479: LD_VAR 0 2
45483: EQUAL
45484: AND
45485: IFFALSE 45497
// result := true else
45487: LD_ADDR_VAR 0 3
45491: PUSH
45492: LD_INT 1
45494: ST_TO_ADDR
45495: GO 45505
// result := false ;
45497: LD_ADDR_VAR 0 3
45501: PUSH
45502: LD_INT 0
45504: ST_TO_ADDR
// end else
45505: GO 45515
// result := false ;
45507: LD_ADDR_VAR 0 3
45511: PUSH
45512: LD_INT 0
45514: ST_TO_ADDR
// end ;
45515: LD_VAR 0 3
45519: RET
// export function HealTarget ( sci ) ; begin
45520: LD_INT 0
45522: PPUSH
// if not sci then
45523: LD_VAR 0 1
45527: NOT
45528: IFFALSE 45532
// exit ;
45530: GO 45597
// result := 0 ;
45532: LD_ADDR_VAR 0 2
45536: PUSH
45537: LD_INT 0
45539: ST_TO_ADDR
// if GetTaskList ( sci ) then
45540: LD_VAR 0 1
45544: PPUSH
45545: CALL_OW 437
45549: IFFALSE 45597
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45551: LD_VAR 0 1
45555: PPUSH
45556: CALL_OW 437
45560: PUSH
45561: LD_INT 1
45563: ARRAY
45564: PUSH
45565: LD_INT 1
45567: ARRAY
45568: PUSH
45569: LD_STRING l
45571: EQUAL
45572: IFFALSE 45597
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45574: LD_ADDR_VAR 0 2
45578: PUSH
45579: LD_VAR 0 1
45583: PPUSH
45584: CALL_OW 437
45588: PUSH
45589: LD_INT 1
45591: ARRAY
45592: PUSH
45593: LD_INT 4
45595: ARRAY
45596: ST_TO_ADDR
// end ;
45597: LD_VAR 0 2
45601: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45602: LD_INT 0
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
// if not base_units then
45608: LD_VAR 0 1
45612: NOT
45613: IFFALSE 45617
// exit ;
45615: GO 45704
// result := false ;
45617: LD_ADDR_VAR 0 2
45621: PUSH
45622: LD_INT 0
45624: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45625: LD_ADDR_VAR 0 5
45629: PUSH
45630: LD_VAR 0 1
45634: PPUSH
45635: LD_INT 21
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PPUSH
45645: CALL_OW 72
45649: ST_TO_ADDR
// if not tmp then
45650: LD_VAR 0 5
45654: NOT
45655: IFFALSE 45659
// exit ;
45657: GO 45704
// for i in tmp do
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_VAR 0 5
45668: PUSH
45669: FOR_IN
45670: IFFALSE 45702
// begin result := EnemyInRange ( i , 22 ) ;
45672: LD_ADDR_VAR 0 2
45676: PUSH
45677: LD_VAR 0 3
45681: PPUSH
45682: LD_INT 22
45684: PPUSH
45685: CALL 43129 0 2
45689: ST_TO_ADDR
// if result then
45690: LD_VAR 0 2
45694: IFFALSE 45700
// exit ;
45696: POP
45697: POP
45698: GO 45704
// end ;
45700: GO 45669
45702: POP
45703: POP
// end ;
45704: LD_VAR 0 2
45708: RET
// export function FilterByTag ( units , tag ) ; begin
45709: LD_INT 0
45711: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45712: LD_ADDR_VAR 0 3
45716: PUSH
45717: LD_VAR 0 1
45721: PPUSH
45722: LD_INT 120
45724: PUSH
45725: LD_VAR 0 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PPUSH
45734: CALL_OW 72
45738: ST_TO_ADDR
// end ;
45739: LD_VAR 0 3
45743: RET
// export function IsDriver ( un ) ; begin
45744: LD_INT 0
45746: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45747: LD_ADDR_VAR 0 2
45751: PUSH
45752: LD_VAR 0 1
45756: PUSH
45757: LD_INT 55
45759: PUSH
45760: EMPTY
45761: LIST
45762: PPUSH
45763: CALL_OW 69
45767: IN
45768: ST_TO_ADDR
// end ;
45769: LD_VAR 0 2
45773: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45774: LD_INT 0
45776: PPUSH
45777: PPUSH
// list := [ ] ;
45778: LD_ADDR_VAR 0 5
45782: PUSH
45783: EMPTY
45784: ST_TO_ADDR
// case d of 0 :
45785: LD_VAR 0 3
45789: PUSH
45790: LD_INT 0
45792: DOUBLE
45793: EQUAL
45794: IFTRUE 45798
45796: GO 45931
45798: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45799: LD_ADDR_VAR 0 5
45803: PUSH
45804: LD_VAR 0 1
45808: PUSH
45809: LD_INT 4
45811: MINUS
45812: PUSH
45813: LD_VAR 0 2
45817: PUSH
45818: LD_INT 4
45820: MINUS
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: PUSH
45830: LD_VAR 0 1
45834: PUSH
45835: LD_INT 3
45837: MINUS
45838: PUSH
45839: LD_VAR 0 2
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: PUSH
45852: LD_VAR 0 1
45856: PUSH
45857: LD_INT 4
45859: PLUS
45860: PUSH
45861: LD_VAR 0 2
45865: PUSH
45866: LD_INT 4
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: PUSH
45874: LD_VAR 0 1
45878: PUSH
45879: LD_INT 3
45881: PLUS
45882: PUSH
45883: LD_VAR 0 2
45887: PUSH
45888: LD_INT 3
45890: PLUS
45891: PUSH
45892: LD_INT 5
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: PUSH
45900: LD_VAR 0 1
45904: PUSH
45905: LD_VAR 0 2
45909: PUSH
45910: LD_INT 4
45912: PLUS
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: ST_TO_ADDR
// end ; 1 :
45929: GO 46629
45931: LD_INT 1
45933: DOUBLE
45934: EQUAL
45935: IFTRUE 45939
45937: GO 46072
45939: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45940: LD_ADDR_VAR 0 5
45944: PUSH
45945: LD_VAR 0 1
45949: PUSH
45950: LD_VAR 0 2
45954: PUSH
45955: LD_INT 4
45957: MINUS
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: PUSH
45967: LD_VAR 0 1
45971: PUSH
45972: LD_INT 3
45974: MINUS
45975: PUSH
45976: LD_VAR 0 2
45980: PUSH
45981: LD_INT 3
45983: MINUS
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: PUSH
45993: LD_VAR 0 1
45997: PUSH
45998: LD_INT 4
46000: MINUS
46001: PUSH
46002: LD_VAR 0 2
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: PUSH
46015: LD_VAR 0 1
46019: PUSH
46020: LD_VAR 0 2
46024: PUSH
46025: LD_INT 3
46027: PLUS
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: PUSH
46037: LD_VAR 0 1
46041: PUSH
46042: LD_INT 4
46044: PLUS
46045: PUSH
46046: LD_VAR 0 2
46050: PUSH
46051: LD_INT 4
46053: PLUS
46054: PUSH
46055: LD_INT 5
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// end ; 2 :
46070: GO 46629
46072: LD_INT 2
46074: DOUBLE
46075: EQUAL
46076: IFTRUE 46080
46078: GO 46209
46080: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46081: LD_ADDR_VAR 0 5
46085: PUSH
46086: LD_VAR 0 1
46090: PUSH
46091: LD_VAR 0 2
46095: PUSH
46096: LD_INT 3
46098: MINUS
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: PUSH
46108: LD_VAR 0 1
46112: PUSH
46113: LD_INT 4
46115: PLUS
46116: PUSH
46117: LD_VAR 0 2
46121: PUSH
46122: LD_INT 4
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: PUSH
46130: LD_VAR 0 1
46134: PUSH
46135: LD_VAR 0 2
46139: PUSH
46140: LD_INT 4
46142: PLUS
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: PUSH
46152: LD_VAR 0 1
46156: PUSH
46157: LD_INT 3
46159: MINUS
46160: PUSH
46161: LD_VAR 0 2
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: PUSH
46174: LD_VAR 0 1
46178: PUSH
46179: LD_INT 4
46181: MINUS
46182: PUSH
46183: LD_VAR 0 2
46187: PUSH
46188: LD_INT 4
46190: MINUS
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// end ; 3 :
46207: GO 46629
46209: LD_INT 3
46211: DOUBLE
46212: EQUAL
46213: IFTRUE 46217
46215: GO 46350
46217: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46218: LD_ADDR_VAR 0 5
46222: PUSH
46223: LD_VAR 0 1
46227: PUSH
46228: LD_INT 3
46230: PLUS
46231: PUSH
46232: LD_VAR 0 2
46236: PUSH
46237: LD_INT 4
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: PUSH
46245: LD_VAR 0 1
46249: PUSH
46250: LD_INT 4
46252: PLUS
46253: PUSH
46254: LD_VAR 0 2
46258: PUSH
46259: LD_INT 4
46261: PLUS
46262: PUSH
46263: LD_INT 5
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: LIST
46270: PUSH
46271: LD_VAR 0 1
46275: PUSH
46276: LD_INT 4
46278: MINUS
46279: PUSH
46280: LD_VAR 0 2
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: PUSH
46293: LD_VAR 0 1
46297: PUSH
46298: LD_VAR 0 2
46302: PUSH
46303: LD_INT 4
46305: MINUS
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: PUSH
46315: LD_VAR 0 1
46319: PUSH
46320: LD_INT 3
46322: MINUS
46323: PUSH
46324: LD_VAR 0 2
46328: PUSH
46329: LD_INT 3
46331: MINUS
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// end ; 4 :
46348: GO 46629
46350: LD_INT 4
46352: DOUBLE
46353: EQUAL
46354: IFTRUE 46358
46356: GO 46491
46358: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46359: LD_ADDR_VAR 0 5
46363: PUSH
46364: LD_VAR 0 1
46368: PUSH
46369: LD_VAR 0 2
46373: PUSH
46374: LD_INT 4
46376: PLUS
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: PUSH
46386: LD_VAR 0 1
46390: PUSH
46391: LD_INT 3
46393: PLUS
46394: PUSH
46395: LD_VAR 0 2
46399: PUSH
46400: LD_INT 3
46402: PLUS
46403: PUSH
46404: LD_INT 5
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: PUSH
46412: LD_VAR 0 1
46416: PUSH
46417: LD_INT 4
46419: PLUS
46420: PUSH
46421: LD_VAR 0 2
46425: PUSH
46426: LD_INT 4
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: PUSH
46434: LD_VAR 0 1
46438: PUSH
46439: LD_VAR 0 2
46443: PUSH
46444: LD_INT 3
46446: MINUS
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: PUSH
46456: LD_VAR 0 1
46460: PUSH
46461: LD_INT 4
46463: MINUS
46464: PUSH
46465: LD_VAR 0 2
46469: PUSH
46470: LD_INT 4
46472: MINUS
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: ST_TO_ADDR
// end ; 5 :
46489: GO 46629
46491: LD_INT 5
46493: DOUBLE
46494: EQUAL
46495: IFTRUE 46499
46497: GO 46628
46499: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46500: LD_ADDR_VAR 0 5
46504: PUSH
46505: LD_VAR 0 1
46509: PUSH
46510: LD_INT 4
46512: MINUS
46513: PUSH
46514: LD_VAR 0 2
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: PUSH
46527: LD_VAR 0 1
46531: PUSH
46532: LD_VAR 0 2
46536: PUSH
46537: LD_INT 4
46539: MINUS
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: PUSH
46549: LD_VAR 0 1
46553: PUSH
46554: LD_INT 4
46556: PLUS
46557: PUSH
46558: LD_VAR 0 2
46562: PUSH
46563: LD_INT 4
46565: PLUS
46566: PUSH
46567: LD_INT 5
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: PUSH
46575: LD_VAR 0 1
46579: PUSH
46580: LD_INT 3
46582: PLUS
46583: PUSH
46584: LD_VAR 0 2
46588: PUSH
46589: LD_INT 4
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: PUSH
46597: LD_VAR 0 1
46601: PUSH
46602: LD_VAR 0 2
46606: PUSH
46607: LD_INT 3
46609: PLUS
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: LIST
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: ST_TO_ADDR
// end ; end ;
46626: GO 46629
46628: POP
// result := list ;
46629: LD_ADDR_VAR 0 4
46633: PUSH
46634: LD_VAR 0 5
46638: ST_TO_ADDR
// end ;
46639: LD_VAR 0 4
46643: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46644: LD_INT 0
46646: PPUSH
46647: PPUSH
46648: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46649: LD_VAR 0 1
46653: NOT
46654: IFTRUE 46682
46656: PUSH
46657: LD_VAR 0 2
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 4
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: IN
46680: NOT
46681: OR
46682: IFFALSE 46686
// exit ;
46684: GO 46769
// tmp := [ ] ;
46686: LD_ADDR_VAR 0 5
46690: PUSH
46691: EMPTY
46692: ST_TO_ADDR
// for i in units do
46693: LD_ADDR_VAR 0 4
46697: PUSH
46698: LD_VAR 0 1
46702: PUSH
46703: FOR_IN
46704: IFFALSE 46738
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46706: LD_ADDR_VAR 0 5
46710: PUSH
46711: LD_VAR 0 5
46715: PPUSH
46716: LD_VAR 0 4
46720: PPUSH
46721: LD_VAR 0 2
46725: PPUSH
46726: CALL_OW 259
46730: PPUSH
46731: CALL 48164 0 2
46735: ST_TO_ADDR
46736: GO 46703
46738: POP
46739: POP
// if not tmp then
46740: LD_VAR 0 5
46744: NOT
46745: IFFALSE 46749
// exit ;
46747: GO 46769
// result := SortListByListDesc ( units , tmp ) ;
46749: LD_ADDR_VAR 0 3
46753: PUSH
46754: LD_VAR 0 1
46758: PPUSH
46759: LD_VAR 0 5
46763: PPUSH
46764: CALL_OW 77
46768: ST_TO_ADDR
// end ;
46769: LD_VAR 0 3
46773: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46774: LD_INT 0
46776: PPUSH
46777: PPUSH
46778: PPUSH
// result := false ;
46779: LD_ADDR_VAR 0 3
46783: PUSH
46784: LD_INT 0
46786: ST_TO_ADDR
// if not building then
46787: LD_VAR 0 2
46791: NOT
46792: IFFALSE 46796
// exit ;
46794: GO 46940
// x := GetX ( building ) ;
46796: LD_ADDR_VAR 0 4
46800: PUSH
46801: LD_VAR 0 2
46805: PPUSH
46806: CALL_OW 250
46810: ST_TO_ADDR
// y := GetY ( building ) ;
46811: LD_ADDR_VAR 0 5
46815: PUSH
46816: LD_VAR 0 2
46820: PPUSH
46821: CALL_OW 251
46825: ST_TO_ADDR
// if not x or not y then
46826: LD_VAR 0 4
46830: NOT
46831: IFTRUE 46840
46833: PUSH
46834: LD_VAR 0 5
46838: NOT
46839: OR
46840: IFFALSE 46844
// exit ;
46842: GO 46940
// if GetTaskList ( unit ) then
46844: LD_VAR 0 1
46848: PPUSH
46849: CALL_OW 437
46853: IFFALSE 46940
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46855: LD_STRING e
46857: PUSH
46858: LD_VAR 0 1
46862: PPUSH
46863: CALL_OW 437
46867: PUSH
46868: LD_INT 1
46870: ARRAY
46871: PUSH
46872: LD_INT 1
46874: ARRAY
46875: EQUAL
46876: IFFALSE 46903
46878: PUSH
46879: LD_VAR 0 4
46883: PUSH
46884: LD_VAR 0 1
46888: PPUSH
46889: CALL_OW 437
46893: PUSH
46894: LD_INT 1
46896: ARRAY
46897: PUSH
46898: LD_INT 2
46900: ARRAY
46901: EQUAL
46902: AND
46903: IFFALSE 46930
46905: PUSH
46906: LD_VAR 0 5
46910: PUSH
46911: LD_VAR 0 1
46915: PPUSH
46916: CALL_OW 437
46920: PUSH
46921: LD_INT 1
46923: ARRAY
46924: PUSH
46925: LD_INT 3
46927: ARRAY
46928: EQUAL
46929: AND
46930: IFFALSE 46940
// result := true end ;
46932: LD_ADDR_VAR 0 3
46936: PUSH
46937: LD_INT 1
46939: ST_TO_ADDR
// end ;
46940: LD_VAR 0 3
46944: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46945: LD_INT 0
46947: PPUSH
// result := false ;
46948: LD_ADDR_VAR 0 4
46952: PUSH
46953: LD_INT 0
46955: ST_TO_ADDR
// if GetTaskList ( unit ) then
46956: LD_VAR 0 1
46960: PPUSH
46961: CALL_OW 437
46965: IFFALSE 47052
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46967: LD_STRING M
46969: PUSH
46970: LD_VAR 0 1
46974: PPUSH
46975: CALL_OW 437
46979: PUSH
46980: LD_INT 1
46982: ARRAY
46983: PUSH
46984: LD_INT 1
46986: ARRAY
46987: EQUAL
46988: IFFALSE 47015
46990: PUSH
46991: LD_VAR 0 2
46995: PUSH
46996: LD_VAR 0 1
47000: PPUSH
47001: CALL_OW 437
47005: PUSH
47006: LD_INT 1
47008: ARRAY
47009: PUSH
47010: LD_INT 2
47012: ARRAY
47013: EQUAL
47014: AND
47015: IFFALSE 47042
47017: PUSH
47018: LD_VAR 0 3
47022: PUSH
47023: LD_VAR 0 1
47027: PPUSH
47028: CALL_OW 437
47032: PUSH
47033: LD_INT 1
47035: ARRAY
47036: PUSH
47037: LD_INT 3
47039: ARRAY
47040: EQUAL
47041: AND
47042: IFFALSE 47052
// result := true ;
47044: LD_ADDR_VAR 0 4
47048: PUSH
47049: LD_INT 1
47051: ST_TO_ADDR
// end ; end ;
47052: LD_VAR 0 4
47056: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47057: LD_INT 0
47059: PPUSH
47060: PPUSH
47061: PPUSH
47062: PPUSH
// if not unit or not area then
47063: LD_VAR 0 1
47067: NOT
47068: IFTRUE 47077
47070: PUSH
47071: LD_VAR 0 2
47075: NOT
47076: OR
47077: IFFALSE 47081
// exit ;
47079: GO 47257
// tmp := AreaToList ( area , i ) ;
47081: LD_ADDR_VAR 0 6
47085: PUSH
47086: LD_VAR 0 2
47090: PPUSH
47091: LD_VAR 0 5
47095: PPUSH
47096: CALL_OW 517
47100: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47101: LD_ADDR_VAR 0 5
47105: PUSH
47106: DOUBLE
47107: LD_INT 1
47109: DEC
47110: ST_TO_ADDR
47111: LD_VAR 0 6
47115: PUSH
47116: LD_INT 1
47118: ARRAY
47119: PUSH
47120: FOR_TO
47121: IFFALSE 47255
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47123: LD_ADDR_VAR 0 7
47127: PUSH
47128: LD_VAR 0 6
47132: PUSH
47133: LD_INT 1
47135: ARRAY
47136: PUSH
47137: LD_VAR 0 5
47141: ARRAY
47142: PUSH
47143: LD_VAR 0 6
47147: PUSH
47148: LD_INT 2
47150: ARRAY
47151: PUSH
47152: LD_VAR 0 5
47156: ARRAY
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47162: LD_INT 92
47164: PUSH
47165: LD_VAR 0 7
47169: PUSH
47170: LD_INT 1
47172: ARRAY
47173: PUSH
47174: LD_VAR 0 7
47178: PUSH
47179: LD_INT 2
47181: ARRAY
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: PPUSH
47192: CALL_OW 69
47196: PUSH
47197: LD_INT 0
47199: EQUAL
47200: IFFALSE 47253
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47202: LD_VAR 0 1
47206: PPUSH
47207: LD_VAR 0 7
47211: PUSH
47212: LD_INT 1
47214: ARRAY
47215: PPUSH
47216: LD_VAR 0 7
47220: PUSH
47221: LD_INT 2
47223: ARRAY
47224: PPUSH
47225: LD_VAR 0 3
47229: PPUSH
47230: CALL_OW 48
// result := IsPlaced ( unit ) ;
47234: LD_ADDR_VAR 0 4
47238: PUSH
47239: LD_VAR 0 1
47243: PPUSH
47244: CALL_OW 305
47248: ST_TO_ADDR
// exit ;
47249: POP
47250: POP
47251: GO 47257
// end ; end ;
47253: GO 47120
47255: POP
47256: POP
// end ;
47257: LD_VAR 0 4
47261: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47262: LD_INT 0
47264: PPUSH
47265: PPUSH
47266: PPUSH
// if not side or side > 8 then
47267: LD_VAR 0 1
47271: NOT
47272: IFTRUE 47284
47274: PUSH
47275: LD_VAR 0 1
47279: PUSH
47280: LD_INT 8
47282: GREATER
47283: OR
47284: IFFALSE 47288
// exit ;
47286: GO 47475
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47288: LD_ADDR_VAR 0 4
47292: PUSH
47293: LD_INT 22
47295: PUSH
47296: LD_VAR 0 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 21
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PPUSH
47319: CALL_OW 69
47323: ST_TO_ADDR
// if not tmp then
47324: LD_VAR 0 4
47328: NOT
47329: IFFALSE 47333
// exit ;
47331: GO 47475
// enable_addtolog := true ;
47333: LD_ADDR_OWVAR 81
47337: PUSH
47338: LD_INT 1
47340: ST_TO_ADDR
// AddToLog ( [ ) ;
47341: LD_STRING [
47343: PPUSH
47344: CALL_OW 561
// for i in tmp do
47348: LD_ADDR_VAR 0 3
47352: PUSH
47353: LD_VAR 0 4
47357: PUSH
47358: FOR_IN
47359: IFFALSE 47466
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47361: LD_STRING [
47363: PUSH
47364: LD_VAR 0 3
47368: PPUSH
47369: CALL_OW 266
47373: STR
47374: PUSH
47375: LD_STRING , 
47377: STR
47378: PUSH
47379: LD_VAR 0 3
47383: PPUSH
47384: CALL_OW 250
47388: STR
47389: PUSH
47390: LD_STRING , 
47392: STR
47393: PUSH
47394: LD_VAR 0 3
47398: PPUSH
47399: CALL_OW 251
47403: STR
47404: PUSH
47405: LD_STRING , 
47407: STR
47408: PUSH
47409: LD_VAR 0 3
47413: PPUSH
47414: CALL_OW 254
47418: STR
47419: PUSH
47420: LD_STRING , 
47422: STR
47423: PUSH
47424: LD_VAR 0 3
47428: PPUSH
47429: LD_INT 1
47431: PPUSH
47432: CALL_OW 268
47436: STR
47437: PUSH
47438: LD_STRING , 
47440: STR
47441: PUSH
47442: LD_VAR 0 3
47446: PPUSH
47447: LD_INT 2
47449: PPUSH
47450: CALL_OW 268
47454: STR
47455: PUSH
47456: LD_STRING ],
47458: STR
47459: PPUSH
47460: CALL_OW 561
// end ;
47464: GO 47358
47466: POP
47467: POP
// AddToLog ( ]; ) ;
47468: LD_STRING ];
47470: PPUSH
47471: CALL_OW 561
// end ;
47475: LD_VAR 0 2
47479: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47480: LD_INT 0
47482: PPUSH
47483: PPUSH
47484: PPUSH
47485: PPUSH
47486: PPUSH
// if not area or not rate or not max then
47487: LD_VAR 0 1
47491: NOT
47492: IFTRUE 47501
47494: PUSH
47495: LD_VAR 0 2
47499: NOT
47500: OR
47501: IFTRUE 47510
47503: PUSH
47504: LD_VAR 0 4
47508: NOT
47509: OR
47510: IFFALSE 47514
// exit ;
47512: GO 47703
// while 1 do
47514: LD_INT 1
47516: IFFALSE 47703
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47518: LD_ADDR_VAR 0 9
47522: PUSH
47523: LD_VAR 0 1
47527: PPUSH
47528: LD_INT 1
47530: PPUSH
47531: CALL_OW 287
47535: PUSH
47536: LD_INT 10
47538: MUL
47539: ST_TO_ADDR
// r := rate / 10 ;
47540: LD_ADDR_VAR 0 7
47544: PUSH
47545: LD_VAR 0 2
47549: PUSH
47550: LD_INT 10
47552: DIVREAL
47553: ST_TO_ADDR
// time := 1 1$00 ;
47554: LD_ADDR_VAR 0 8
47558: PUSH
47559: LD_INT 2100
47561: ST_TO_ADDR
// if amount < min then
47562: LD_VAR 0 9
47566: PUSH
47567: LD_VAR 0 3
47571: LESS
47572: IFFALSE 47590
// r := r * 2 else
47574: LD_ADDR_VAR 0 7
47578: PUSH
47579: LD_VAR 0 7
47583: PUSH
47584: LD_INT 2
47586: MUL
47587: ST_TO_ADDR
47588: GO 47616
// if amount > max then
47590: LD_VAR 0 9
47594: PUSH
47595: LD_VAR 0 4
47599: GREATER
47600: IFFALSE 47616
// r := r / 2 ;
47602: LD_ADDR_VAR 0 7
47606: PUSH
47607: LD_VAR 0 7
47611: PUSH
47612: LD_INT 2
47614: DIVREAL
47615: ST_TO_ADDR
// time := time / r ;
47616: LD_ADDR_VAR 0 8
47620: PUSH
47621: LD_VAR 0 8
47625: PUSH
47626: LD_VAR 0 7
47630: DIVREAL
47631: ST_TO_ADDR
// if time < 0 then
47632: LD_VAR 0 8
47636: PUSH
47637: LD_INT 0
47639: LESS
47640: IFFALSE 47657
// time := time * - 1 ;
47642: LD_ADDR_VAR 0 8
47646: PUSH
47647: LD_VAR 0 8
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: MUL
47656: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47657: LD_VAR 0 8
47661: PUSH
47662: LD_INT 35
47664: PPUSH
47665: LD_INT 875
47667: PPUSH
47668: CALL_OW 12
47672: PLUS
47673: PPUSH
47674: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47678: LD_INT 1
47680: PPUSH
47681: LD_INT 5
47683: PPUSH
47684: CALL_OW 12
47688: PPUSH
47689: LD_VAR 0 1
47693: PPUSH
47694: LD_INT 1
47696: PPUSH
47697: CALL_OW 55
// end ;
47701: GO 47514
// end ;
47703: LD_VAR 0 5
47707: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47708: LD_INT 0
47710: PPUSH
47711: PPUSH
47712: PPUSH
47713: PPUSH
47714: PPUSH
47715: PPUSH
47716: PPUSH
47717: PPUSH
// if not turrets or not factories then
47718: LD_VAR 0 1
47722: NOT
47723: IFTRUE 47732
47725: PUSH
47726: LD_VAR 0 2
47730: NOT
47731: OR
47732: IFFALSE 47736
// exit ;
47734: GO 48043
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47736: LD_ADDR_VAR 0 10
47740: PUSH
47741: LD_INT 5
47743: PUSH
47744: LD_INT 6
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 5
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 24
47778: PUSH
47779: LD_INT 25
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 23
47788: PUSH
47789: LD_INT 27
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 42
47802: PUSH
47803: LD_INT 43
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 44
47812: PUSH
47813: LD_INT 46
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 45
47822: PUSH
47823: LD_INT 47
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// result := [ ] ;
47840: LD_ADDR_VAR 0 3
47844: PUSH
47845: EMPTY
47846: ST_TO_ADDR
// for i in turrets do
47847: LD_ADDR_VAR 0 4
47851: PUSH
47852: LD_VAR 0 1
47856: PUSH
47857: FOR_IN
47858: IFFALSE 48041
// begin nat := GetNation ( i ) ;
47860: LD_ADDR_VAR 0 7
47864: PUSH
47865: LD_VAR 0 4
47869: PPUSH
47870: CALL_OW 248
47874: ST_TO_ADDR
// weapon := 0 ;
47875: LD_ADDR_VAR 0 8
47879: PUSH
47880: LD_INT 0
47882: ST_TO_ADDR
// if not nat then
47883: LD_VAR 0 7
47887: NOT
47888: IFFALSE 47892
// continue ;
47890: GO 47857
// for j in list [ nat ] do
47892: LD_ADDR_VAR 0 5
47896: PUSH
47897: LD_VAR 0 10
47901: PUSH
47902: LD_VAR 0 7
47906: ARRAY
47907: PUSH
47908: FOR_IN
47909: IFFALSE 47950
// if GetBWeapon ( i ) = j [ 1 ] then
47911: LD_VAR 0 4
47915: PPUSH
47916: CALL_OW 269
47920: PUSH
47921: LD_VAR 0 5
47925: PUSH
47926: LD_INT 1
47928: ARRAY
47929: EQUAL
47930: IFFALSE 47948
// begin weapon := j [ 2 ] ;
47932: LD_ADDR_VAR 0 8
47936: PUSH
47937: LD_VAR 0 5
47941: PUSH
47942: LD_INT 2
47944: ARRAY
47945: ST_TO_ADDR
// break ;
47946: GO 47950
// end ;
47948: GO 47908
47950: POP
47951: POP
// if not weapon then
47952: LD_VAR 0 8
47956: NOT
47957: IFFALSE 47961
// continue ;
47959: GO 47857
// for k in factories do
47961: LD_ADDR_VAR 0 6
47965: PUSH
47966: LD_VAR 0 2
47970: PUSH
47971: FOR_IN
47972: IFFALSE 48037
// begin weapons := AvailableWeaponList ( k ) ;
47974: LD_ADDR_VAR 0 9
47978: PUSH
47979: LD_VAR 0 6
47983: PPUSH
47984: CALL_OW 478
47988: ST_TO_ADDR
// if not weapons then
47989: LD_VAR 0 9
47993: NOT
47994: IFFALSE 47998
// continue ;
47996: GO 47971
// if weapon in weapons then
47998: LD_VAR 0 8
48002: PUSH
48003: LD_VAR 0 9
48007: IN
48008: IFFALSE 48035
// begin result := [ i , weapon ] ;
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: LD_VAR 0 4
48019: PUSH
48020: LD_VAR 0 8
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// exit ;
48029: POP
48030: POP
48031: POP
48032: POP
48033: GO 48043
// end ; end ;
48035: GO 47971
48037: POP
48038: POP
// end ;
48039: GO 47857
48041: POP
48042: POP
// end ;
48043: LD_VAR 0 3
48047: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48048: LD_INT 0
48050: PPUSH
// if not side or side > 8 then
48051: LD_VAR 0 3
48055: NOT
48056: IFTRUE 48068
48058: PUSH
48059: LD_VAR 0 3
48063: PUSH
48064: LD_INT 8
48066: GREATER
48067: OR
48068: IFFALSE 48072
// exit ;
48070: GO 48131
// if not range then
48072: LD_VAR 0 4
48076: NOT
48077: IFFALSE 48088
// range := - 12 ;
48079: LD_ADDR_VAR 0 4
48083: PUSH
48084: LD_INT 12
48086: NEG
48087: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48088: LD_VAR 0 1
48092: PPUSH
48093: LD_VAR 0 2
48097: PPUSH
48098: LD_VAR 0 3
48102: PPUSH
48103: LD_VAR 0 4
48107: PPUSH
48108: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48112: LD_VAR 0 1
48116: PPUSH
48117: LD_VAR 0 2
48121: PPUSH
48122: LD_VAR 0 3
48126: PPUSH
48127: CALL_OW 331
// end ;
48131: LD_VAR 0 5
48135: RET
// export function Video ( mode ) ; begin
48136: LD_INT 0
48138: PPUSH
// ingame_video = mode ;
48139: LD_ADDR_OWVAR 52
48143: PUSH
48144: LD_VAR 0 1
48148: ST_TO_ADDR
// interface_hidden = mode ;
48149: LD_ADDR_OWVAR 54
48153: PUSH
48154: LD_VAR 0 1
48158: ST_TO_ADDR
// end ;
48159: LD_VAR 0 2
48163: RET
// export function Join ( array , element ) ; begin
48164: LD_INT 0
48166: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48167: LD_ADDR_VAR 0 3
48171: PUSH
48172: LD_VAR 0 1
48176: PPUSH
48177: LD_VAR 0 1
48181: PUSH
48182: LD_INT 1
48184: PLUS
48185: PPUSH
48186: LD_VAR 0 2
48190: PPUSH
48191: CALL_OW 1
48195: ST_TO_ADDR
// end ;
48196: LD_VAR 0 3
48200: RET
// export function JoinUnion ( array , element ) ; begin
48201: LD_INT 0
48203: PPUSH
// result := array union element ;
48204: LD_ADDR_VAR 0 3
48208: PUSH
48209: LD_VAR 0 1
48213: PUSH
48214: LD_VAR 0 2
48218: UNION
48219: ST_TO_ADDR
// end ;
48220: LD_VAR 0 3
48224: RET
// export function GetBehemoths ( side ) ; begin
48225: LD_INT 0
48227: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48228: LD_ADDR_VAR 0 2
48232: PUSH
48233: LD_INT 22
48235: PUSH
48236: LD_VAR 0 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 31
48247: PUSH
48248: LD_INT 25
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PPUSH
48259: CALL_OW 69
48263: ST_TO_ADDR
// end ;
48264: LD_VAR 0 2
48268: RET
// export function Shuffle ( array ) ; var i , index ; begin
48269: LD_INT 0
48271: PPUSH
48272: PPUSH
48273: PPUSH
// result := [ ] ;
48274: LD_ADDR_VAR 0 2
48278: PUSH
48279: EMPTY
48280: ST_TO_ADDR
// if not array then
48281: LD_VAR 0 1
48285: NOT
48286: IFFALSE 48290
// exit ;
48288: GO 48389
// Randomize ;
48290: CALL_OW 10
// for i = array downto 1 do
48294: LD_ADDR_VAR 0 3
48298: PUSH
48299: DOUBLE
48300: LD_VAR 0 1
48304: INC
48305: ST_TO_ADDR
48306: LD_INT 1
48308: PUSH
48309: FOR_DOWNTO
48310: IFFALSE 48387
// begin index := rand ( 1 , array ) ;
48312: LD_ADDR_VAR 0 4
48316: PUSH
48317: LD_INT 1
48319: PPUSH
48320: LD_VAR 0 1
48324: PPUSH
48325: CALL_OW 12
48329: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48330: LD_ADDR_VAR 0 2
48334: PUSH
48335: LD_VAR 0 2
48339: PPUSH
48340: LD_VAR 0 2
48344: PUSH
48345: LD_INT 1
48347: PLUS
48348: PPUSH
48349: LD_VAR 0 1
48353: PUSH
48354: LD_VAR 0 4
48358: ARRAY
48359: PPUSH
48360: CALL_OW 2
48364: ST_TO_ADDR
// array := Delete ( array , index ) ;
48365: LD_ADDR_VAR 0 1
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: LD_VAR 0 4
48379: PPUSH
48380: CALL_OW 3
48384: ST_TO_ADDR
// end ;
48385: GO 48309
48387: POP
48388: POP
// end ;
48389: LD_VAR 0 2
48393: RET
// export function GetBaseMaterials ( base ) ; begin
48394: LD_INT 0
48396: PPUSH
// result := [ 0 , 0 , 0 ] ;
48397: LD_ADDR_VAR 0 2
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: LIST
48415: ST_TO_ADDR
// if not base then
48416: LD_VAR 0 1
48420: NOT
48421: IFFALSE 48425
// exit ;
48423: GO 48474
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48425: LD_ADDR_VAR 0 2
48429: PUSH
48430: LD_VAR 0 1
48434: PPUSH
48435: LD_INT 1
48437: PPUSH
48438: CALL_OW 275
48442: PUSH
48443: LD_VAR 0 1
48447: PPUSH
48448: LD_INT 2
48450: PPUSH
48451: CALL_OW 275
48455: PUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: LD_INT 3
48463: PPUSH
48464: CALL_OW 275
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// end ;
48474: LD_VAR 0 2
48478: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48479: LD_INT 0
48481: PPUSH
48482: PPUSH
// result := array ;
48483: LD_ADDR_VAR 0 3
48487: PUSH
48488: LD_VAR 0 1
48492: ST_TO_ADDR
// if size >= result then
48493: LD_VAR 0 2
48497: PUSH
48498: LD_VAR 0 3
48502: GREATEREQUAL
48503: IFFALSE 48507
// exit ;
48505: GO 48557
// if size then
48507: LD_VAR 0 2
48511: IFFALSE 48557
// for i := array downto size do
48513: LD_ADDR_VAR 0 4
48517: PUSH
48518: DOUBLE
48519: LD_VAR 0 1
48523: INC
48524: ST_TO_ADDR
48525: LD_VAR 0 2
48529: PUSH
48530: FOR_DOWNTO
48531: IFFALSE 48555
// result := Delete ( result , result ) ;
48533: LD_ADDR_VAR 0 3
48537: PUSH
48538: LD_VAR 0 3
48542: PPUSH
48543: LD_VAR 0 3
48547: PPUSH
48548: CALL_OW 3
48552: ST_TO_ADDR
48553: GO 48530
48555: POP
48556: POP
// end ;
48557: LD_VAR 0 3
48561: RET
// export function ComExit ( unit ) ; var tmp ; begin
48562: LD_INT 0
48564: PPUSH
48565: PPUSH
// if not IsInUnit ( unit ) then
48566: LD_VAR 0 1
48570: PPUSH
48571: CALL_OW 310
48575: NOT
48576: IFFALSE 48580
// exit ;
48578: GO 48640
// tmp := IsInUnit ( unit ) ;
48580: LD_ADDR_VAR 0 3
48584: PUSH
48585: LD_VAR 0 1
48589: PPUSH
48590: CALL_OW 310
48594: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48595: LD_VAR 0 3
48599: PPUSH
48600: CALL_OW 247
48604: PUSH
48605: LD_INT 2
48607: EQUAL
48608: IFFALSE 48621
// ComExitVehicle ( unit ) else
48610: LD_VAR 0 1
48614: PPUSH
48615: CALL_OW 121
48619: GO 48630
// ComExitBuilding ( unit ) ;
48621: LD_VAR 0 1
48625: PPUSH
48626: CALL_OW 122
// result := tmp ;
48630: LD_ADDR_VAR 0 2
48634: PUSH
48635: LD_VAR 0 3
48639: ST_TO_ADDR
// end ;
48640: LD_VAR 0 2
48644: RET
// export function ComExitAll ( units ) ; var i ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
// if not units then
48649: LD_VAR 0 1
48653: NOT
48654: IFFALSE 48658
// exit ;
48656: GO 48684
// for i in units do
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_VAR 0 1
48667: PUSH
48668: FOR_IN
48669: IFFALSE 48682
// ComExit ( i ) ;
48671: LD_VAR 0 3
48675: PPUSH
48676: CALL 48562 0 1
48680: GO 48668
48682: POP
48683: POP
// end ;
48684: LD_VAR 0 2
48688: RET
// export function ResetHc ; begin
48689: LD_INT 0
48691: PPUSH
// InitHc ;
48692: CALL_OW 19
// hc_importance := 0 ;
48696: LD_ADDR_OWVAR 32
48700: PUSH
48701: LD_INT 0
48703: ST_TO_ADDR
// end ;
48704: LD_VAR 0 1
48708: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48709: LD_INT 0
48711: PPUSH
48712: PPUSH
48713: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48714: LD_ADDR_VAR 0 6
48718: PUSH
48719: LD_VAR 0 1
48723: PUSH
48724: LD_VAR 0 3
48728: PLUS
48729: PUSH
48730: LD_INT 2
48732: DIV
48733: ST_TO_ADDR
// if _x < 0 then
48734: LD_VAR 0 6
48738: PUSH
48739: LD_INT 0
48741: LESS
48742: IFFALSE 48759
// _x := _x * - 1 ;
48744: LD_ADDR_VAR 0 6
48748: PUSH
48749: LD_VAR 0 6
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: MUL
48758: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48759: LD_ADDR_VAR 0 7
48763: PUSH
48764: LD_VAR 0 2
48768: PUSH
48769: LD_VAR 0 4
48773: PLUS
48774: PUSH
48775: LD_INT 2
48777: DIV
48778: ST_TO_ADDR
// if _y < 0 then
48779: LD_VAR 0 7
48783: PUSH
48784: LD_INT 0
48786: LESS
48787: IFFALSE 48804
// _y := _y * - 1 ;
48789: LD_ADDR_VAR 0 7
48793: PUSH
48794: LD_VAR 0 7
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: MUL
48803: ST_TO_ADDR
// result := [ _x , _y ] ;
48804: LD_ADDR_VAR 0 5
48808: PUSH
48809: LD_VAR 0 6
48813: PUSH
48814: LD_VAR 0 7
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// end ;
48823: LD_VAR 0 5
48827: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48828: LD_INT 0
48830: PPUSH
48831: PPUSH
48832: PPUSH
48833: PPUSH
// task := GetTaskList ( unit ) ;
48834: LD_ADDR_VAR 0 7
48838: PUSH
48839: LD_VAR 0 1
48843: PPUSH
48844: CALL_OW 437
48848: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48849: LD_VAR 0 7
48853: NOT
48854: IFFALSE 48873
48856: PUSH
48857: LD_VAR 0 1
48861: PPUSH
48862: LD_VAR 0 2
48866: PPUSH
48867: CALL_OW 308
48871: NOT
48872: AND
48873: IFFALSE 48877
// exit ;
48875: GO 48995
// if IsInArea ( unit , area ) then
48877: LD_VAR 0 1
48881: PPUSH
48882: LD_VAR 0 2
48886: PPUSH
48887: CALL_OW 308
48891: IFFALSE 48909
// begin ComMoveToArea ( unit , goAway ) ;
48893: LD_VAR 0 1
48897: PPUSH
48898: LD_VAR 0 3
48902: PPUSH
48903: CALL_OW 113
// exit ;
48907: GO 48995
// end ; if task [ 1 ] [ 1 ] <> M then
48909: LD_VAR 0 7
48913: PUSH
48914: LD_INT 1
48916: ARRAY
48917: PUSH
48918: LD_INT 1
48920: ARRAY
48921: PUSH
48922: LD_STRING M
48924: NONEQUAL
48925: IFFALSE 48929
// exit ;
48927: GO 48995
// x := task [ 1 ] [ 2 ] ;
48929: LD_ADDR_VAR 0 5
48933: PUSH
48934: LD_VAR 0 7
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PUSH
48943: LD_INT 2
48945: ARRAY
48946: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48947: LD_ADDR_VAR 0 6
48951: PUSH
48952: LD_VAR 0 7
48956: PUSH
48957: LD_INT 1
48959: ARRAY
48960: PUSH
48961: LD_INT 3
48963: ARRAY
48964: ST_TO_ADDR
// if InArea ( x , y , area ) then
48965: LD_VAR 0 5
48969: PPUSH
48970: LD_VAR 0 6
48974: PPUSH
48975: LD_VAR 0 2
48979: PPUSH
48980: CALL_OW 309
48984: IFFALSE 48995
// ComStop ( unit ) ;
48986: LD_VAR 0 1
48990: PPUSH
48991: CALL_OW 141
// end ;
48995: LD_VAR 0 4
48999: RET
// export function Abs ( value ) ; begin
49000: LD_INT 0
49002: PPUSH
// result := value ;
49003: LD_ADDR_VAR 0 2
49007: PUSH
49008: LD_VAR 0 1
49012: ST_TO_ADDR
// if value < 0 then
49013: LD_VAR 0 1
49017: PUSH
49018: LD_INT 0
49020: LESS
49021: IFFALSE 49038
// result := value * - 1 ;
49023: LD_ADDR_VAR 0 2
49027: PUSH
49028: LD_VAR 0 1
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: MUL
49037: ST_TO_ADDR
// end ;
49038: LD_VAR 0 2
49042: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49043: LD_INT 0
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
// if not unit or not building then
49053: LD_VAR 0 1
49057: NOT
49058: IFTRUE 49067
49060: PUSH
49061: LD_VAR 0 2
49065: NOT
49066: OR
49067: IFFALSE 49071
// exit ;
49069: GO 49299
// x := GetX ( building ) ;
49071: LD_ADDR_VAR 0 4
49075: PUSH
49076: LD_VAR 0 2
49080: PPUSH
49081: CALL_OW 250
49085: ST_TO_ADDR
// y := GetY ( building ) ;
49086: LD_ADDR_VAR 0 6
49090: PUSH
49091: LD_VAR 0 2
49095: PPUSH
49096: CALL_OW 251
49100: ST_TO_ADDR
// d := GetDir ( building ) ;
49101: LD_ADDR_VAR 0 8
49105: PUSH
49106: LD_VAR 0 2
49110: PPUSH
49111: CALL_OW 254
49115: ST_TO_ADDR
// r := 4 ;
49116: LD_ADDR_VAR 0 9
49120: PUSH
49121: LD_INT 4
49123: ST_TO_ADDR
// for i := 1 to 5 do
49124: LD_ADDR_VAR 0 10
49128: PUSH
49129: DOUBLE
49130: LD_INT 1
49132: DEC
49133: ST_TO_ADDR
49134: LD_INT 5
49136: PUSH
49137: FOR_TO
49138: IFFALSE 49297
// begin _x := ShiftX ( x , d , r + i ) ;
49140: LD_ADDR_VAR 0 5
49144: PUSH
49145: LD_VAR 0 4
49149: PPUSH
49150: LD_VAR 0 8
49154: PPUSH
49155: LD_VAR 0 9
49159: PUSH
49160: LD_VAR 0 10
49164: PLUS
49165: PPUSH
49166: CALL_OW 272
49170: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49171: LD_ADDR_VAR 0 7
49175: PUSH
49176: LD_VAR 0 6
49180: PPUSH
49181: LD_VAR 0 8
49185: PPUSH
49186: LD_VAR 0 9
49190: PUSH
49191: LD_VAR 0 10
49195: PLUS
49196: PPUSH
49197: CALL_OW 273
49201: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49202: LD_VAR 0 5
49206: PPUSH
49207: LD_VAR 0 7
49211: PPUSH
49212: CALL_OW 488
49216: IFFALSE 49251
49218: PUSH
49219: LD_VAR 0 5
49223: PPUSH
49224: LD_VAR 0 7
49228: PPUSH
49229: CALL_OW 428
49233: PPUSH
49234: CALL_OW 247
49238: PUSH
49239: LD_INT 3
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: IN
49249: NOT
49250: AND
49251: IFFALSE 49295
// begin ComMoveXY ( unit , _x , _y ) ;
49253: LD_VAR 0 1
49257: PPUSH
49258: LD_VAR 0 5
49262: PPUSH
49263: LD_VAR 0 7
49267: PPUSH
49268: CALL_OW 111
// result := [ _x , _y ] ;
49272: LD_ADDR_VAR 0 3
49276: PUSH
49277: LD_VAR 0 5
49281: PUSH
49282: LD_VAR 0 7
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// exit ;
49291: POP
49292: POP
49293: GO 49299
// end ; end ;
49295: GO 49137
49297: POP
49298: POP
// end ;
49299: LD_VAR 0 3
49303: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49304: LD_INT 0
49306: PPUSH
49307: PPUSH
49308: PPUSH
// result := 0 ;
49309: LD_ADDR_VAR 0 3
49313: PUSH
49314: LD_INT 0
49316: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49317: LD_VAR 0 1
49321: PUSH
49322: LD_INT 0
49324: LESS
49325: IFTRUE 49337
49327: PUSH
49328: LD_VAR 0 1
49332: PUSH
49333: LD_INT 8
49335: GREATER
49336: OR
49337: IFTRUE 49349
49339: PUSH
49340: LD_VAR 0 2
49344: PUSH
49345: LD_INT 0
49347: LESS
49348: OR
49349: IFTRUE 49361
49351: PUSH
49352: LD_VAR 0 2
49356: PUSH
49357: LD_INT 8
49359: GREATER
49360: OR
49361: IFFALSE 49365
// exit ;
49363: GO 49440
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49365: LD_ADDR_VAR 0 4
49369: PUSH
49370: LD_INT 22
49372: PUSH
49373: LD_VAR 0 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PPUSH
49382: CALL_OW 69
49386: PUSH
49387: FOR_IN
49388: IFFALSE 49438
// begin un := UnitShoot ( i ) ;
49390: LD_ADDR_VAR 0 5
49394: PUSH
49395: LD_VAR 0 4
49399: PPUSH
49400: CALL_OW 504
49404: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49405: LD_VAR 0 5
49409: PPUSH
49410: CALL_OW 255
49414: PUSH
49415: LD_VAR 0 1
49419: EQUAL
49420: IFFALSE 49436
// begin result := un ;
49422: LD_ADDR_VAR 0 3
49426: PUSH
49427: LD_VAR 0 5
49431: ST_TO_ADDR
// exit ;
49432: POP
49433: POP
49434: GO 49440
// end ; end ;
49436: GO 49387
49438: POP
49439: POP
// end ;
49440: LD_VAR 0 3
49444: RET
// export function GetCargoBay ( units ) ; begin
49445: LD_INT 0
49447: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49448: LD_ADDR_VAR 0 2
49452: PUSH
49453: LD_VAR 0 1
49457: PPUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 34
49463: PUSH
49464: LD_INT 12
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 34
49473: PUSH
49474: LD_INT 51
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 34
49483: PUSH
49484: LD_INT 32
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 34
49493: PUSH
49494: LD_INT 89
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: PPUSH
49508: CALL_OW 72
49512: ST_TO_ADDR
// end ;
49513: LD_VAR 0 2
49517: RET
// export function Negate ( value ) ; begin
49518: LD_INT 0
49520: PPUSH
// result := not value ;
49521: LD_ADDR_VAR 0 2
49525: PUSH
49526: LD_VAR 0 1
49530: NOT
49531: ST_TO_ADDR
// end ;
49532: LD_VAR 0 2
49536: RET
// export function Inc ( value ) ; begin
49537: LD_INT 0
49539: PPUSH
// result := value + 1 ;
49540: LD_ADDR_VAR 0 2
49544: PUSH
49545: LD_VAR 0 1
49549: PUSH
49550: LD_INT 1
49552: PLUS
49553: ST_TO_ADDR
// end ;
49554: LD_VAR 0 2
49558: RET
// export function Dec ( value ) ; begin
49559: LD_INT 0
49561: PPUSH
// result := value - 1 ;
49562: LD_ADDR_VAR 0 2
49566: PUSH
49567: LD_VAR 0 1
49571: PUSH
49572: LD_INT 1
49574: MINUS
49575: ST_TO_ADDR
// end ;
49576: LD_VAR 0 2
49580: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49581: LD_INT 0
49583: PPUSH
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
49590: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49591: LD_VAR 0 1
49595: PPUSH
49596: LD_VAR 0 2
49600: PPUSH
49601: CALL_OW 488
49605: NOT
49606: IFTRUE 49625
49608: PUSH
49609: LD_VAR 0 3
49613: PPUSH
49614: LD_VAR 0 4
49618: PPUSH
49619: CALL_OW 488
49623: NOT
49624: OR
49625: IFFALSE 49638
// begin result := - 1 ;
49627: LD_ADDR_VAR 0 5
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: ST_TO_ADDR
// exit ;
49636: GO 49873
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49638: LD_ADDR_VAR 0 12
49642: PUSH
49643: LD_VAR 0 1
49647: PPUSH
49648: LD_VAR 0 2
49652: PPUSH
49653: LD_VAR 0 3
49657: PPUSH
49658: LD_VAR 0 4
49662: PPUSH
49663: CALL 48709 0 4
49667: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49668: LD_ADDR_VAR 0 11
49672: PUSH
49673: LD_VAR 0 1
49677: PPUSH
49678: LD_VAR 0 2
49682: PPUSH
49683: LD_VAR 0 12
49687: PUSH
49688: LD_INT 1
49690: ARRAY
49691: PPUSH
49692: LD_VAR 0 12
49696: PUSH
49697: LD_INT 2
49699: ARRAY
49700: PPUSH
49701: CALL_OW 298
49705: ST_TO_ADDR
// distance := 9999 ;
49706: LD_ADDR_VAR 0 10
49710: PUSH
49711: LD_INT 9999
49713: ST_TO_ADDR
// for i := 0 to 5 do
49714: LD_ADDR_VAR 0 6
49718: PUSH
49719: DOUBLE
49720: LD_INT 0
49722: DEC
49723: ST_TO_ADDR
49724: LD_INT 5
49726: PUSH
49727: FOR_TO
49728: IFFALSE 49871
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49730: LD_ADDR_VAR 0 7
49734: PUSH
49735: LD_VAR 0 1
49739: PPUSH
49740: LD_VAR 0 6
49744: PPUSH
49745: LD_VAR 0 11
49749: PPUSH
49750: CALL_OW 272
49754: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49755: LD_ADDR_VAR 0 8
49759: PUSH
49760: LD_VAR 0 2
49764: PPUSH
49765: LD_VAR 0 6
49769: PPUSH
49770: LD_VAR 0 11
49774: PPUSH
49775: CALL_OW 273
49779: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49780: LD_VAR 0 7
49784: PPUSH
49785: LD_VAR 0 8
49789: PPUSH
49790: CALL_OW 488
49794: NOT
49795: IFFALSE 49799
// continue ;
49797: GO 49727
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49799: LD_ADDR_VAR 0 9
49803: PUSH
49804: LD_VAR 0 12
49808: PUSH
49809: LD_INT 1
49811: ARRAY
49812: PPUSH
49813: LD_VAR 0 12
49817: PUSH
49818: LD_INT 2
49820: ARRAY
49821: PPUSH
49822: LD_VAR 0 7
49826: PPUSH
49827: LD_VAR 0 8
49831: PPUSH
49832: CALL_OW 298
49836: ST_TO_ADDR
// if tmp < distance then
49837: LD_VAR 0 9
49841: PUSH
49842: LD_VAR 0 10
49846: LESS
49847: IFFALSE 49869
// begin result := i ;
49849: LD_ADDR_VAR 0 5
49853: PUSH
49854: LD_VAR 0 6
49858: ST_TO_ADDR
// distance := tmp ;
49859: LD_ADDR_VAR 0 10
49863: PUSH
49864: LD_VAR 0 9
49868: ST_TO_ADDR
// end ; end ;
49869: GO 49727
49871: POP
49872: POP
// end ;
49873: LD_VAR 0 5
49877: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49878: LD_INT 0
49880: PPUSH
49881: PPUSH
// if not driver or not IsInUnit ( driver ) then
49882: LD_VAR 0 1
49886: NOT
49887: IFTRUE 49901
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 310
49899: NOT
49900: OR
49901: IFFALSE 49905
// exit ;
49903: GO 49995
// vehicle := IsInUnit ( driver ) ;
49905: LD_ADDR_VAR 0 3
49909: PUSH
49910: LD_VAR 0 1
49914: PPUSH
49915: CALL_OW 310
49919: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49920: LD_VAR 0 1
49924: PPUSH
49925: LD_STRING \
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: PUSH
49955: LD_STRING E
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_VAR 0 3
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PPUSH
49991: CALL_OW 446
// end ;
49995: LD_VAR 0 2
49999: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50000: LD_INT 0
50002: PPUSH
50003: PPUSH
// if not driver or not IsInUnit ( driver ) then
50004: LD_VAR 0 1
50008: NOT
50009: IFTRUE 50023
50011: PUSH
50012: LD_VAR 0 1
50016: PPUSH
50017: CALL_OW 310
50021: NOT
50022: OR
50023: IFFALSE 50027
// exit ;
50025: GO 50117
// vehicle := IsInUnit ( driver ) ;
50027: LD_ADDR_VAR 0 3
50031: PUSH
50032: LD_VAR 0 1
50036: PPUSH
50037: CALL_OW 310
50041: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50042: LD_VAR 0 1
50046: PPUSH
50047: LD_STRING \
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: PUSH
50077: LD_STRING E
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_VAR 0 3
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PPUSH
50113: CALL_OW 447
// end ;
50117: LD_VAR 0 2
50121: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50122: LD_INT 0
50124: PPUSH
50125: PPUSH
50126: PPUSH
// tmp := [ ] ;
50127: LD_ADDR_VAR 0 5
50131: PUSH
50132: EMPTY
50133: ST_TO_ADDR
// for i in units do
50134: LD_ADDR_VAR 0 4
50138: PUSH
50139: LD_VAR 0 1
50143: PUSH
50144: FOR_IN
50145: IFFALSE 50183
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50147: LD_ADDR_VAR 0 5
50151: PUSH
50152: LD_VAR 0 5
50156: PPUSH
50157: LD_VAR 0 5
50161: PUSH
50162: LD_INT 1
50164: PLUS
50165: PPUSH
50166: LD_VAR 0 4
50170: PPUSH
50171: CALL_OW 256
50175: PPUSH
50176: CALL_OW 2
50180: ST_TO_ADDR
50181: GO 50144
50183: POP
50184: POP
// if not tmp then
50185: LD_VAR 0 5
50189: NOT
50190: IFFALSE 50194
// exit ;
50192: GO 50242
// if asc then
50194: LD_VAR 0 2
50198: IFFALSE 50222
// result := SortListByListAsc ( units , tmp ) else
50200: LD_ADDR_VAR 0 3
50204: PUSH
50205: LD_VAR 0 1
50209: PPUSH
50210: LD_VAR 0 5
50214: PPUSH
50215: CALL_OW 76
50219: ST_TO_ADDR
50220: GO 50242
// result := SortListByListDesc ( units , tmp ) ;
50222: LD_ADDR_VAR 0 3
50226: PUSH
50227: LD_VAR 0 1
50231: PPUSH
50232: LD_VAR 0 5
50236: PPUSH
50237: CALL_OW 77
50241: ST_TO_ADDR
// end ;
50242: LD_VAR 0 3
50246: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50247: LD_INT 0
50249: PPUSH
50250: PPUSH
// task := GetTaskList ( mech ) ;
50251: LD_ADDR_VAR 0 4
50255: PUSH
50256: LD_VAR 0 1
50260: PPUSH
50261: CALL_OW 437
50265: ST_TO_ADDR
// if not task then
50266: LD_VAR 0 4
50270: NOT
50271: IFFALSE 50275
// exit ;
50273: GO 50319
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50275: LD_ADDR_VAR 0 3
50279: PUSH
50280: LD_VAR 0 4
50284: PUSH
50285: LD_INT 1
50287: ARRAY
50288: PUSH
50289: LD_INT 1
50291: ARRAY
50292: PUSH
50293: LD_STRING r
50295: EQUAL
50296: IFFALSE 50318
50298: PUSH
50299: LD_VAR 0 4
50303: PUSH
50304: LD_INT 1
50306: ARRAY
50307: PUSH
50308: LD_INT 4
50310: ARRAY
50311: PUSH
50312: LD_VAR 0 2
50316: EQUAL
50317: AND
50318: ST_TO_ADDR
// end ;
50319: LD_VAR 0 3
50323: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50324: LD_INT 0
50326: PPUSH
// SetDir ( unit , d ) ;
50327: LD_VAR 0 1
50331: PPUSH
50332: LD_VAR 0 4
50336: PPUSH
50337: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50341: LD_ADDR_VAR 0 6
50345: PUSH
50346: LD_VAR 0 1
50350: PPUSH
50351: LD_VAR 0 2
50355: PPUSH
50356: LD_VAR 0 3
50360: PPUSH
50361: LD_VAR 0 5
50365: PPUSH
50366: CALL_OW 48
50370: ST_TO_ADDR
// end ;
50371: LD_VAR 0 6
50375: RET
// export function ToNaturalNumber ( number ) ; begin
50376: LD_INT 0
50378: PPUSH
// result := number div 1 ;
50379: LD_ADDR_VAR 0 2
50383: PUSH
50384: LD_VAR 0 1
50388: PUSH
50389: LD_INT 1
50391: DIV
50392: ST_TO_ADDR
// if number < 0 then
50393: LD_VAR 0 1
50397: PUSH
50398: LD_INT 0
50400: LESS
50401: IFFALSE 50411
// result := 0 ;
50403: LD_ADDR_VAR 0 2
50407: PUSH
50408: LD_INT 0
50410: ST_TO_ADDR
// end ;
50411: LD_VAR 0 2
50415: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50416: LD_INT 0
50418: PPUSH
50419: PPUSH
50420: PPUSH
// if not buildings then
50421: LD_VAR 0 1
50425: NOT
50426: IFFALSE 50430
// exit ;
50428: GO 50545
// tmp := [ ] ;
50430: LD_ADDR_VAR 0 5
50434: PUSH
50435: EMPTY
50436: ST_TO_ADDR
// for b in buildings do
50437: LD_ADDR_VAR 0 4
50441: PUSH
50442: LD_VAR 0 1
50446: PUSH
50447: FOR_IN
50448: IFFALSE 50486
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50450: LD_ADDR_VAR 0 5
50454: PUSH
50455: LD_VAR 0 5
50459: PPUSH
50460: LD_VAR 0 5
50464: PUSH
50465: LD_INT 1
50467: PLUS
50468: PPUSH
50469: LD_VAR 0 4
50473: PPUSH
50474: CALL_OW 266
50478: PPUSH
50479: CALL_OW 1
50483: ST_TO_ADDR
50484: GO 50447
50486: POP
50487: POP
// if not tmp then
50488: LD_VAR 0 5
50492: NOT
50493: IFFALSE 50497
// exit ;
50495: GO 50545
// if asc then
50497: LD_VAR 0 2
50501: IFFALSE 50525
// result := SortListByListAsc ( buildings , tmp ) else
50503: LD_ADDR_VAR 0 3
50507: PUSH
50508: LD_VAR 0 1
50512: PPUSH
50513: LD_VAR 0 5
50517: PPUSH
50518: CALL_OW 76
50522: ST_TO_ADDR
50523: GO 50545
// result := SortListByListDesc ( buildings , tmp ) ;
50525: LD_ADDR_VAR 0 3
50529: PUSH
50530: LD_VAR 0 1
50534: PPUSH
50535: LD_VAR 0 5
50539: PPUSH
50540: CALL_OW 77
50544: ST_TO_ADDR
// end ;
50545: LD_VAR 0 3
50549: RET
// export function SortByClass ( units , class ) ; var un ; begin
50550: LD_INT 0
50552: PPUSH
50553: PPUSH
// if not units or not class then
50554: LD_VAR 0 1
50558: NOT
50559: IFTRUE 50568
50561: PUSH
50562: LD_VAR 0 2
50566: NOT
50567: OR
50568: IFFALSE 50572
// exit ;
50570: GO 50667
// result := [ ] ;
50572: LD_ADDR_VAR 0 3
50576: PUSH
50577: EMPTY
50578: ST_TO_ADDR
// for un in units do
50579: LD_ADDR_VAR 0 4
50583: PUSH
50584: LD_VAR 0 1
50588: PUSH
50589: FOR_IN
50590: IFFALSE 50665
// if GetClass ( un ) = class then
50592: LD_VAR 0 4
50596: PPUSH
50597: CALL_OW 257
50601: PUSH
50602: LD_VAR 0 2
50606: EQUAL
50607: IFFALSE 50634
// result := Insert ( result , 1 , un ) else
50609: LD_ADDR_VAR 0 3
50613: PUSH
50614: LD_VAR 0 3
50618: PPUSH
50619: LD_INT 1
50621: PPUSH
50622: LD_VAR 0 4
50626: PPUSH
50627: CALL_OW 2
50631: ST_TO_ADDR
50632: GO 50663
// result := Replace ( result , result + 1 , un ) ;
50634: LD_ADDR_VAR 0 3
50638: PUSH
50639: LD_VAR 0 3
50643: PPUSH
50644: LD_VAR 0 3
50648: PUSH
50649: LD_INT 1
50651: PLUS
50652: PPUSH
50653: LD_VAR 0 4
50657: PPUSH
50658: CALL_OW 1
50662: ST_TO_ADDR
50663: GO 50589
50665: POP
50666: POP
// end ;
50667: LD_VAR 0 3
50671: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50672: LD_INT 0
50674: PPUSH
50675: PPUSH
50676: PPUSH
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
// result := [ ] ;
50681: LD_ADDR_VAR 0 4
50685: PUSH
50686: EMPTY
50687: ST_TO_ADDR
// if x - r < 0 then
50688: LD_VAR 0 1
50692: PUSH
50693: LD_VAR 0 3
50697: MINUS
50698: PUSH
50699: LD_INT 0
50701: LESS
50702: IFFALSE 50714
// min_x := 0 else
50704: LD_ADDR_VAR 0 8
50708: PUSH
50709: LD_INT 0
50711: ST_TO_ADDR
50712: GO 50730
// min_x := x - r ;
50714: LD_ADDR_VAR 0 8
50718: PUSH
50719: LD_VAR 0 1
50723: PUSH
50724: LD_VAR 0 3
50728: MINUS
50729: ST_TO_ADDR
// if y - r < 0 then
50730: LD_VAR 0 2
50734: PUSH
50735: LD_VAR 0 3
50739: MINUS
50740: PUSH
50741: LD_INT 0
50743: LESS
50744: IFFALSE 50756
// min_y := 0 else
50746: LD_ADDR_VAR 0 7
50750: PUSH
50751: LD_INT 0
50753: ST_TO_ADDR
50754: GO 50772
// min_y := y - r ;
50756: LD_ADDR_VAR 0 7
50760: PUSH
50761: LD_VAR 0 2
50765: PUSH
50766: LD_VAR 0 3
50770: MINUS
50771: ST_TO_ADDR
// max_x := x + r ;
50772: LD_ADDR_VAR 0 9
50776: PUSH
50777: LD_VAR 0 1
50781: PUSH
50782: LD_VAR 0 3
50786: PLUS
50787: ST_TO_ADDR
// max_y := y + r ;
50788: LD_ADDR_VAR 0 10
50792: PUSH
50793: LD_VAR 0 2
50797: PUSH
50798: LD_VAR 0 3
50802: PLUS
50803: ST_TO_ADDR
// for _x = min_x to max_x do
50804: LD_ADDR_VAR 0 5
50808: PUSH
50809: DOUBLE
50810: LD_VAR 0 8
50814: DEC
50815: ST_TO_ADDR
50816: LD_VAR 0 9
50820: PUSH
50821: FOR_TO
50822: IFFALSE 50923
// for _y = min_y to max_y do
50824: LD_ADDR_VAR 0 6
50828: PUSH
50829: DOUBLE
50830: LD_VAR 0 7
50834: DEC
50835: ST_TO_ADDR
50836: LD_VAR 0 10
50840: PUSH
50841: FOR_TO
50842: IFFALSE 50919
// begin if not ValidHex ( _x , _y ) then
50844: LD_VAR 0 5
50848: PPUSH
50849: LD_VAR 0 6
50853: PPUSH
50854: CALL_OW 488
50858: NOT
50859: IFFALSE 50863
// continue ;
50861: GO 50841
// if GetResourceTypeXY ( _x , _y ) then
50863: LD_VAR 0 5
50867: PPUSH
50868: LD_VAR 0 6
50872: PPUSH
50873: CALL_OW 283
50877: IFFALSE 50917
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50879: LD_ADDR_VAR 0 4
50883: PUSH
50884: LD_VAR 0 4
50888: PPUSH
50889: LD_VAR 0 4
50893: PUSH
50894: LD_INT 1
50896: PLUS
50897: PPUSH
50898: LD_VAR 0 5
50902: PUSH
50903: LD_VAR 0 6
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PPUSH
50912: CALL_OW 1
50916: ST_TO_ADDR
// end ;
50917: GO 50841
50919: POP
50920: POP
50921: GO 50821
50923: POP
50924: POP
// end ;
50925: LD_VAR 0 4
50929: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50930: LD_INT 0
50932: PPUSH
50933: PPUSH
50934: PPUSH
50935: PPUSH
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
// if not units then
50940: LD_VAR 0 1
50944: NOT
50945: IFFALSE 50949
// exit ;
50947: GO 51481
// result := UnitFilter ( units , [ f_ok ] ) ;
50949: LD_ADDR_VAR 0 3
50953: PUSH
50954: LD_VAR 0 1
50958: PPUSH
50959: LD_INT 50
50961: PUSH
50962: EMPTY
50963: LIST
50964: PPUSH
50965: CALL_OW 72
50969: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50970: LD_ADDR_VAR 0 8
50974: PUSH
50975: LD_VAR 0 1
50979: PUSH
50980: LD_INT 1
50982: ARRAY
50983: PPUSH
50984: CALL_OW 255
50988: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50989: LD_ADDR_VAR 0 10
50993: PUSH
50994: LD_INT 29
50996: PUSH
50997: LD_INT 91
50999: PUSH
51000: LD_INT 49
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// if not result then
51008: LD_VAR 0 3
51012: NOT
51013: IFFALSE 51017
// exit ;
51015: GO 51481
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51017: LD_ADDR_VAR 0 5
51021: PUSH
51022: LD_INT 81
51024: PUSH
51025: LD_VAR 0 8
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PPUSH
51034: CALL_OW 69
51038: ST_TO_ADDR
// for i in result do
51039: LD_ADDR_VAR 0 4
51043: PUSH
51044: LD_VAR 0 3
51048: PUSH
51049: FOR_IN
51050: IFFALSE 51479
// begin tag := GetTag ( i ) + 1 ;
51052: LD_ADDR_VAR 0 9
51056: PUSH
51057: LD_VAR 0 4
51061: PPUSH
51062: CALL_OW 110
51066: PUSH
51067: LD_INT 1
51069: PLUS
51070: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51071: LD_ADDR_VAR 0 7
51075: PUSH
51076: LD_VAR 0 4
51080: PPUSH
51081: CALL_OW 250
51085: PPUSH
51086: LD_VAR 0 4
51090: PPUSH
51091: CALL_OW 251
51095: PPUSH
51096: LD_INT 4
51098: PPUSH
51099: CALL 50672 0 3
51103: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51104: LD_VAR 0 4
51108: PPUSH
51109: CALL_OW 247
51113: PUSH
51114: LD_INT 2
51116: EQUAL
51117: IFFALSE 51129
51119: PUSH
51120: LD_VAR 0 7
51124: PUSH
51125: LD_INT 2
51127: GREATER
51128: AND
51129: IFFALSE 51149
51131: PUSH
51132: LD_VAR 0 4
51136: PPUSH
51137: CALL_OW 264
51141: PUSH
51142: LD_VAR 0 10
51146: IN
51147: NOT
51148: AND
51149: IFFALSE 51188
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51151: LD_VAR 0 4
51155: PPUSH
51156: LD_VAR 0 7
51160: PUSH
51161: LD_INT 1
51163: ARRAY
51164: PUSH
51165: LD_INT 1
51167: ARRAY
51168: PPUSH
51169: LD_VAR 0 7
51173: PUSH
51174: LD_INT 1
51176: ARRAY
51177: PUSH
51178: LD_INT 2
51180: ARRAY
51181: PPUSH
51182: CALL_OW 116
51186: GO 51477
// if path > tag then
51188: LD_VAR 0 2
51192: PUSH
51193: LD_VAR 0 9
51197: GREATER
51198: IFFALSE 51406
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51200: LD_ADDR_VAR 0 6
51204: PUSH
51205: LD_VAR 0 5
51209: PPUSH
51210: LD_INT 91
51212: PUSH
51213: LD_VAR 0 4
51217: PUSH
51218: LD_INT 8
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: PPUSH
51226: CALL_OW 72
51230: ST_TO_ADDR
// if nearEnemy then
51231: LD_VAR 0 6
51235: IFFALSE 51304
// begin if GetWeapon ( i ) = ru_time_lapser then
51237: LD_VAR 0 4
51241: PPUSH
51242: CALL_OW 264
51246: PUSH
51247: LD_INT 49
51249: EQUAL
51250: IFFALSE 51278
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51252: LD_VAR 0 4
51256: PPUSH
51257: LD_VAR 0 6
51261: PPUSH
51262: LD_VAR 0 4
51266: PPUSH
51267: CALL_OW 74
51271: PPUSH
51272: CALL_OW 112
51276: GO 51302
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51278: LD_VAR 0 4
51282: PPUSH
51283: LD_VAR 0 6
51287: PPUSH
51288: LD_VAR 0 4
51292: PPUSH
51293: CALL_OW 74
51297: PPUSH
51298: CALL 52562 0 2
// end else
51302: GO 51404
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51304: LD_VAR 0 4
51308: PPUSH
51309: LD_VAR 0 2
51313: PUSH
51314: LD_VAR 0 9
51318: ARRAY
51319: PUSH
51320: LD_INT 1
51322: ARRAY
51323: PPUSH
51324: LD_VAR 0 2
51328: PUSH
51329: LD_VAR 0 9
51333: ARRAY
51334: PUSH
51335: LD_INT 2
51337: ARRAY
51338: PPUSH
51339: CALL_OW 297
51343: PUSH
51344: LD_INT 6
51346: GREATER
51347: IFFALSE 51390
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51349: LD_VAR 0 4
51353: PPUSH
51354: LD_VAR 0 2
51358: PUSH
51359: LD_VAR 0 9
51363: ARRAY
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: PPUSH
51369: LD_VAR 0 2
51373: PUSH
51374: LD_VAR 0 9
51378: ARRAY
51379: PUSH
51380: LD_INT 2
51382: ARRAY
51383: PPUSH
51384: CALL_OW 114
51388: GO 51404
// SetTag ( i , tag ) ;
51390: LD_VAR 0 4
51394: PPUSH
51395: LD_VAR 0 9
51399: PPUSH
51400: CALL_OW 109
// end else
51404: GO 51477
// if enemy then
51406: LD_VAR 0 5
51410: IFFALSE 51477
// begin if GetWeapon ( i ) = ru_time_lapser then
51412: LD_VAR 0 4
51416: PPUSH
51417: CALL_OW 264
51421: PUSH
51422: LD_INT 49
51424: EQUAL
51425: IFFALSE 51453
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51427: LD_VAR 0 4
51431: PPUSH
51432: LD_VAR 0 5
51436: PPUSH
51437: LD_VAR 0 4
51441: PPUSH
51442: CALL_OW 74
51446: PPUSH
51447: CALL_OW 112
51451: GO 51477
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51453: LD_VAR 0 4
51457: PPUSH
51458: LD_VAR 0 5
51462: PPUSH
51463: LD_VAR 0 4
51467: PPUSH
51468: CALL_OW 74
51472: PPUSH
51473: CALL 52562 0 2
// end ; end ;
51477: GO 51049
51479: POP
51480: POP
// end ;
51481: LD_VAR 0 3
51485: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51486: LD_INT 0
51488: PPUSH
51489: PPUSH
51490: PPUSH
// if not unit or IsInUnit ( unit ) then
51491: LD_VAR 0 1
51495: NOT
51496: IFTRUE 51509
51498: PUSH
51499: LD_VAR 0 1
51503: PPUSH
51504: CALL_OW 310
51508: OR
51509: IFFALSE 51513
// exit ;
51511: GO 51604
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51513: LD_ADDR_VAR 0 4
51517: PUSH
51518: LD_VAR 0 1
51522: PPUSH
51523: CALL_OW 250
51527: PPUSH
51528: LD_VAR 0 2
51532: PPUSH
51533: LD_INT 1
51535: PPUSH
51536: CALL_OW 272
51540: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51541: LD_ADDR_VAR 0 5
51545: PUSH
51546: LD_VAR 0 1
51550: PPUSH
51551: CALL_OW 251
51555: PPUSH
51556: LD_VAR 0 2
51560: PPUSH
51561: LD_INT 1
51563: PPUSH
51564: CALL_OW 273
51568: ST_TO_ADDR
// if ValidHex ( x , y ) then
51569: LD_VAR 0 4
51573: PPUSH
51574: LD_VAR 0 5
51578: PPUSH
51579: CALL_OW 488
51583: IFFALSE 51604
// ComTurnXY ( unit , x , y ) ;
51585: LD_VAR 0 1
51589: PPUSH
51590: LD_VAR 0 4
51594: PPUSH
51595: LD_VAR 0 5
51599: PPUSH
51600: CALL_OW 118
// end ;
51604: LD_VAR 0 3
51608: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51609: LD_INT 0
51611: PPUSH
51612: PPUSH
// result := false ;
51613: LD_ADDR_VAR 0 3
51617: PUSH
51618: LD_INT 0
51620: ST_TO_ADDR
// if not units then
51621: LD_VAR 0 2
51625: NOT
51626: IFFALSE 51630
// exit ;
51628: GO 51675
// for i in units do
51630: LD_ADDR_VAR 0 4
51634: PUSH
51635: LD_VAR 0 2
51639: PUSH
51640: FOR_IN
51641: IFFALSE 51673
// if See ( side , i ) then
51643: LD_VAR 0 1
51647: PPUSH
51648: LD_VAR 0 4
51652: PPUSH
51653: CALL_OW 292
51657: IFFALSE 51671
// begin result := true ;
51659: LD_ADDR_VAR 0 3
51663: PUSH
51664: LD_INT 1
51666: ST_TO_ADDR
// exit ;
51667: POP
51668: POP
51669: GO 51675
// end ;
51671: GO 51640
51673: POP
51674: POP
// end ;
51675: LD_VAR 0 3
51679: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51680: LD_INT 0
51682: PPUSH
51683: PPUSH
51684: PPUSH
51685: PPUSH
// if not unit or not points then
51686: LD_VAR 0 1
51690: NOT
51691: IFTRUE 51700
51693: PUSH
51694: LD_VAR 0 2
51698: NOT
51699: OR
51700: IFFALSE 51704
// exit ;
51702: GO 51794
// dist := 99999 ;
51704: LD_ADDR_VAR 0 5
51708: PUSH
51709: LD_INT 99999
51711: ST_TO_ADDR
// for i in points do
51712: LD_ADDR_VAR 0 4
51716: PUSH
51717: LD_VAR 0 2
51721: PUSH
51722: FOR_IN
51723: IFFALSE 51792
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51725: LD_ADDR_VAR 0 6
51729: PUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: LD_VAR 0 4
51739: PUSH
51740: LD_INT 1
51742: ARRAY
51743: PPUSH
51744: LD_VAR 0 4
51748: PUSH
51749: LD_INT 2
51751: ARRAY
51752: PPUSH
51753: CALL_OW 297
51757: ST_TO_ADDR
// if tmpDist < dist then
51758: LD_VAR 0 6
51762: PUSH
51763: LD_VAR 0 5
51767: LESS
51768: IFFALSE 51790
// begin result := i ;
51770: LD_ADDR_VAR 0 3
51774: PUSH
51775: LD_VAR 0 4
51779: ST_TO_ADDR
// dist := tmpDist ;
51780: LD_ADDR_VAR 0 5
51784: PUSH
51785: LD_VAR 0 6
51789: ST_TO_ADDR
// end ; end ;
51790: GO 51722
51792: POP
51793: POP
// end ;
51794: LD_VAR 0 3
51798: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51799: LD_INT 0
51801: PPUSH
// uc_side := side ;
51802: LD_ADDR_OWVAR 20
51806: PUSH
51807: LD_VAR 0 1
51811: ST_TO_ADDR
// uc_nation := 3 ;
51812: LD_ADDR_OWVAR 21
51816: PUSH
51817: LD_INT 3
51819: ST_TO_ADDR
// vc_chassis := 25 ;
51820: LD_ADDR_OWVAR 37
51824: PUSH
51825: LD_INT 25
51827: ST_TO_ADDR
// vc_engine := engine_siberite ;
51828: LD_ADDR_OWVAR 39
51832: PUSH
51833: LD_INT 3
51835: ST_TO_ADDR
// vc_control := control_computer ;
51836: LD_ADDR_OWVAR 38
51840: PUSH
51841: LD_INT 3
51843: ST_TO_ADDR
// vc_weapon := 59 ;
51844: LD_ADDR_OWVAR 40
51848: PUSH
51849: LD_INT 59
51851: ST_TO_ADDR
// result := CreateVehicle ;
51852: LD_ADDR_VAR 0 5
51856: PUSH
51857: CALL_OW 45
51861: ST_TO_ADDR
// SetDir ( result , d ) ;
51862: LD_VAR 0 5
51866: PPUSH
51867: LD_VAR 0 4
51871: PPUSH
51872: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51876: LD_VAR 0 5
51880: PPUSH
51881: LD_VAR 0 2
51885: PPUSH
51886: LD_VAR 0 3
51890: PPUSH
51891: LD_INT 0
51893: PPUSH
51894: CALL_OW 48
// end ;
51898: LD_VAR 0 5
51902: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51903: LD_INT 0
51905: PPUSH
51906: PPUSH
51907: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51908: LD_ADDR_VAR 0 2
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51931: LD_VAR 0 1
51935: NOT
51936: IFTRUE 51969
51938: PUSH
51939: LD_VAR 0 1
51943: PPUSH
51944: CALL_OW 264
51948: PUSH
51949: LD_INT 12
51951: PUSH
51952: LD_INT 51
51954: PUSH
51955: LD_INT 32
51957: PUSH
51958: LD_INT 89
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: IN
51967: NOT
51968: OR
51969: IFFALSE 51973
// exit ;
51971: GO 52071
// for i := 1 to 3 do
51973: LD_ADDR_VAR 0 3
51977: PUSH
51978: DOUBLE
51979: LD_INT 1
51981: DEC
51982: ST_TO_ADDR
51983: LD_INT 3
51985: PUSH
51986: FOR_TO
51987: IFFALSE 52069
// begin tmp := GetCargo ( cargo , i ) ;
51989: LD_ADDR_VAR 0 4
51993: PUSH
51994: LD_VAR 0 1
51998: PPUSH
51999: LD_VAR 0 3
52003: PPUSH
52004: CALL_OW 289
52008: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52009: LD_ADDR_VAR 0 2
52013: PUSH
52014: LD_VAR 0 2
52018: PPUSH
52019: LD_VAR 0 3
52023: PPUSH
52024: LD_VAR 0 4
52028: PPUSH
52029: CALL_OW 1
52033: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52034: LD_ADDR_VAR 0 2
52038: PUSH
52039: LD_VAR 0 2
52043: PPUSH
52044: LD_INT 4
52046: PPUSH
52047: LD_VAR 0 2
52051: PUSH
52052: LD_INT 4
52054: ARRAY
52055: PUSH
52056: LD_VAR 0 4
52060: PLUS
52061: PPUSH
52062: CALL_OW 1
52066: ST_TO_ADDR
// end ;
52067: GO 51986
52069: POP
52070: POP
// end ;
52071: LD_VAR 0 2
52075: RET
// export function Length ( array ) ; begin
52076: LD_INT 0
52078: PPUSH
// result := array + 0 ;
52079: LD_ADDR_VAR 0 2
52083: PUSH
52084: LD_VAR 0 1
52088: PUSH
52089: LD_INT 0
52091: PLUS
52092: ST_TO_ADDR
// end ;
52093: LD_VAR 0 2
52097: RET
// export function PrepareArray ( array ) ; begin
52098: LD_INT 0
52100: PPUSH
// result := array diff 0 ;
52101: LD_ADDR_VAR 0 2
52105: PUSH
52106: LD_VAR 0 1
52110: PUSH
52111: LD_INT 0
52113: DIFF
52114: ST_TO_ADDR
// if not result [ 1 ] then
52115: LD_VAR 0 2
52119: PUSH
52120: LD_INT 1
52122: ARRAY
52123: NOT
52124: IFFALSE 52144
// result := Delete ( result , 1 ) ;
52126: LD_ADDR_VAR 0 2
52130: PUSH
52131: LD_VAR 0 2
52135: PPUSH
52136: LD_INT 1
52138: PPUSH
52139: CALL_OW 3
52143: ST_TO_ADDR
// end ;
52144: LD_VAR 0 2
52148: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52149: LD_INT 0
52151: PPUSH
52152: PPUSH
52153: PPUSH
52154: PPUSH
// sibRocketRange := 25 ;
52155: LD_ADDR_VAR 0 6
52159: PUSH
52160: LD_INT 25
52162: ST_TO_ADDR
// result := false ;
52163: LD_ADDR_VAR 0 4
52167: PUSH
52168: LD_INT 0
52170: ST_TO_ADDR
// for i := 0 to 5 do
52171: LD_ADDR_VAR 0 5
52175: PUSH
52176: DOUBLE
52177: LD_INT 0
52179: DEC
52180: ST_TO_ADDR
52181: LD_INT 5
52183: PUSH
52184: FOR_TO
52185: IFFALSE 52252
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52187: LD_VAR 0 1
52191: PPUSH
52192: LD_VAR 0 5
52196: PPUSH
52197: LD_VAR 0 6
52201: PPUSH
52202: CALL_OW 272
52206: PPUSH
52207: LD_VAR 0 2
52211: PPUSH
52212: LD_VAR 0 5
52216: PPUSH
52217: LD_VAR 0 6
52221: PPUSH
52222: CALL_OW 273
52226: PPUSH
52227: LD_VAR 0 3
52231: PPUSH
52232: CALL_OW 309
52236: IFFALSE 52250
// begin result := true ;
52238: LD_ADDR_VAR 0 4
52242: PUSH
52243: LD_INT 1
52245: ST_TO_ADDR
// exit ;
52246: POP
52247: POP
52248: GO 52254
// end ;
52250: GO 52184
52252: POP
52253: POP
// end ;
52254: LD_VAR 0 4
52258: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52259: LD_INT 0
52261: PPUSH
52262: PPUSH
52263: PPUSH
// if btype = b_depot then
52264: LD_VAR 0 2
52268: PUSH
52269: LD_INT 0
52271: EQUAL
52272: IFFALSE 52284
// begin result := true ;
52274: LD_ADDR_VAR 0 3
52278: PUSH
52279: LD_INT 1
52281: ST_TO_ADDR
// exit ;
52282: GO 52404
// end ; pom := GetBase ( depot ) ;
52284: LD_ADDR_VAR 0 4
52288: PUSH
52289: LD_VAR 0 1
52293: PPUSH
52294: CALL_OW 274
52298: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52299: LD_ADDR_VAR 0 5
52303: PUSH
52304: LD_VAR 0 2
52308: PPUSH
52309: LD_VAR 0 1
52313: PPUSH
52314: CALL_OW 248
52318: PPUSH
52319: CALL_OW 450
52323: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52324: LD_ADDR_VAR 0 3
52328: PUSH
52329: LD_VAR 0 4
52333: PPUSH
52334: LD_INT 1
52336: PPUSH
52337: CALL_OW 275
52341: PUSH
52342: LD_VAR 0 5
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: GREATEREQUAL
52351: IFFALSE 52377
52353: PUSH
52354: LD_VAR 0 4
52358: PPUSH
52359: LD_INT 2
52361: PPUSH
52362: CALL_OW 275
52366: PUSH
52367: LD_VAR 0 5
52371: PUSH
52372: LD_INT 2
52374: ARRAY
52375: GREATEREQUAL
52376: AND
52377: IFFALSE 52403
52379: PUSH
52380: LD_VAR 0 4
52384: PPUSH
52385: LD_INT 3
52387: PPUSH
52388: CALL_OW 275
52392: PUSH
52393: LD_VAR 0 5
52397: PUSH
52398: LD_INT 3
52400: ARRAY
52401: GREATEREQUAL
52402: AND
52403: ST_TO_ADDR
// end ;
52404: LD_VAR 0 3
52408: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52409: LD_INT 0
52411: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52412: LD_VAR 0 1
52416: PPUSH
52417: LD_VAR 0 2
52421: PPUSH
52422: LD_INT 0
52424: PPUSH
52425: LD_INT 0
52427: PPUSH
52428: LD_INT 1
52430: PPUSH
52431: LD_INT 0
52433: PPUSH
52434: CALL_OW 587
// end ;
52438: LD_VAR 0 3
52442: RET
// export function CenterOnNow ( unit ) ; begin
52443: LD_INT 0
52445: PPUSH
// result := IsInUnit ( unit ) ;
52446: LD_ADDR_VAR 0 2
52450: PUSH
52451: LD_VAR 0 1
52455: PPUSH
52456: CALL_OW 310
52460: ST_TO_ADDR
// if not result then
52461: LD_VAR 0 2
52465: NOT
52466: IFFALSE 52478
// result := unit ;
52468: LD_ADDR_VAR 0 2
52472: PUSH
52473: LD_VAR 0 1
52477: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52478: LD_VAR 0 1
52482: PPUSH
52483: CALL_OW 87
// end ;
52487: LD_VAR 0 2
52491: RET
// export function ComMoveHex ( unit , hex ) ; begin
52492: LD_INT 0
52494: PPUSH
// if not hex then
52495: LD_VAR 0 2
52499: NOT
52500: IFFALSE 52504
// exit ;
52502: GO 52557
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52504: LD_VAR 0 2
52508: PUSH
52509: LD_INT 1
52511: ARRAY
52512: PPUSH
52513: LD_VAR 0 2
52517: PUSH
52518: LD_INT 2
52520: ARRAY
52521: PPUSH
52522: CALL_OW 428
52526: IFFALSE 52530
// exit ;
52528: GO 52557
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52530: LD_VAR 0 1
52534: PPUSH
52535: LD_VAR 0 2
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PPUSH
52544: LD_VAR 0 2
52548: PUSH
52549: LD_INT 2
52551: ARRAY
52552: PPUSH
52553: CALL_OW 111
// end ;
52557: LD_VAR 0 3
52561: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52562: LD_INT 0
52564: PPUSH
52565: PPUSH
52566: PPUSH
// if not unit or not enemy then
52567: LD_VAR 0 1
52571: NOT
52572: IFTRUE 52581
52574: PUSH
52575: LD_VAR 0 2
52579: NOT
52580: OR
52581: IFFALSE 52585
// exit ;
52583: GO 52711
// x := GetX ( enemy ) ;
52585: LD_ADDR_VAR 0 4
52589: PUSH
52590: LD_VAR 0 2
52594: PPUSH
52595: CALL_OW 250
52599: ST_TO_ADDR
// y := GetY ( enemy ) ;
52600: LD_ADDR_VAR 0 5
52604: PUSH
52605: LD_VAR 0 2
52609: PPUSH
52610: CALL_OW 251
52614: ST_TO_ADDR
// if ValidHex ( x , y ) then
52615: LD_VAR 0 4
52619: PPUSH
52620: LD_VAR 0 5
52624: PPUSH
52625: CALL_OW 488
52629: IFFALSE 52711
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52631: LD_VAR 0 2
52635: PPUSH
52636: CALL_OW 247
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: IN
52651: IFTRUE 52674
52653: PUSH
52654: LD_VAR 0 1
52658: PPUSH
52659: CALL_OW 255
52663: PPUSH
52664: LD_VAR 0 2
52668: PPUSH
52669: CALL_OW 292
52673: OR
52674: IFFALSE 52692
// ComAttackUnit ( unit , enemy ) else
52676: LD_VAR 0 1
52680: PPUSH
52681: LD_VAR 0 2
52685: PPUSH
52686: CALL_OW 115
52690: GO 52711
// ComAgressiveMove ( unit , x , y ) ;
52692: LD_VAR 0 1
52696: PPUSH
52697: LD_VAR 0 4
52701: PPUSH
52702: LD_VAR 0 5
52706: PPUSH
52707: CALL_OW 114
// end ;
52711: LD_VAR 0 3
52715: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52716: LD_INT 0
52718: PPUSH
52719: PPUSH
52720: PPUSH
// list := AreaToList ( area , 0 ) ;
52721: LD_ADDR_VAR 0 5
52725: PUSH
52726: LD_VAR 0 1
52730: PPUSH
52731: LD_INT 0
52733: PPUSH
52734: CALL_OW 517
52738: ST_TO_ADDR
// if not list then
52739: LD_VAR 0 5
52743: NOT
52744: IFFALSE 52748
// exit ;
52746: GO 52878
// if all then
52748: LD_VAR 0 2
52752: IFFALSE 52840
// begin for i := 1 to list [ 1 ] do
52754: LD_ADDR_VAR 0 4
52758: PUSH
52759: DOUBLE
52760: LD_INT 1
52762: DEC
52763: ST_TO_ADDR
52764: LD_VAR 0 5
52768: PUSH
52769: LD_INT 1
52771: ARRAY
52772: PUSH
52773: FOR_TO
52774: IFFALSE 52836
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52776: LD_ADDR_VAR 0 3
52780: PUSH
52781: LD_VAR 0 3
52785: PPUSH
52786: LD_VAR 0 3
52790: PUSH
52791: LD_INT 1
52793: PLUS
52794: PPUSH
52795: LD_VAR 0 5
52799: PUSH
52800: LD_INT 1
52802: ARRAY
52803: PUSH
52804: LD_VAR 0 4
52808: ARRAY
52809: PUSH
52810: LD_VAR 0 5
52814: PUSH
52815: LD_INT 2
52817: ARRAY
52818: PUSH
52819: LD_VAR 0 4
52823: ARRAY
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PPUSH
52829: CALL_OW 1
52833: ST_TO_ADDR
52834: GO 52773
52836: POP
52837: POP
// exit ;
52838: GO 52878
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52840: LD_ADDR_VAR 0 3
52844: PUSH
52845: LD_VAR 0 5
52849: PUSH
52850: LD_INT 1
52852: ARRAY
52853: PUSH
52854: LD_INT 1
52856: ARRAY
52857: PUSH
52858: LD_VAR 0 5
52862: PUSH
52863: LD_INT 2
52865: ARRAY
52866: PUSH
52867: LD_INT 1
52869: ARRAY
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: EMPTY
52876: LIST
52877: ST_TO_ADDR
// end ;
52878: LD_VAR 0 3
52882: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52883: LD_INT 0
52885: PPUSH
52886: PPUSH
// list := AreaToList ( area , 0 ) ;
52887: LD_ADDR_VAR 0 4
52891: PUSH
52892: LD_VAR 0 1
52896: PPUSH
52897: LD_INT 0
52899: PPUSH
52900: CALL_OW 517
52904: ST_TO_ADDR
// if not list then
52905: LD_VAR 0 4
52909: NOT
52910: IFFALSE 52914
// exit ;
52912: GO 52955
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52914: LD_ADDR_VAR 0 3
52918: PUSH
52919: LD_VAR 0 4
52923: PUSH
52924: LD_INT 1
52926: ARRAY
52927: PUSH
52928: LD_INT 1
52930: ARRAY
52931: PUSH
52932: LD_VAR 0 4
52936: PUSH
52937: LD_INT 2
52939: ARRAY
52940: PUSH
52941: LD_INT 1
52943: ARRAY
52944: PUSH
52945: LD_VAR 0 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// end ;
52955: LD_VAR 0 3
52959: RET
// export function First ( array ) ; begin
52960: LD_INT 0
52962: PPUSH
// if not array then
52963: LD_VAR 0 1
52967: NOT
52968: IFFALSE 52972
// exit ;
52970: GO 52986
// result := array [ 1 ] ;
52972: LD_ADDR_VAR 0 2
52976: PUSH
52977: LD_VAR 0 1
52981: PUSH
52982: LD_INT 1
52984: ARRAY
52985: ST_TO_ADDR
// end ;
52986: LD_VAR 0 2
52990: RET
// export function Last ( array ) ; begin
52991: LD_INT 0
52993: PPUSH
// if not array then
52994: LD_VAR 0 1
52998: NOT
52999: IFFALSE 53003
// exit ;
53001: GO 53019
// result := array [ array ] ;
53003: LD_ADDR_VAR 0 2
53007: PUSH
53008: LD_VAR 0 1
53012: PUSH
53013: LD_VAR 0 1
53017: ARRAY
53018: ST_TO_ADDR
// end ;
53019: LD_VAR 0 2
53023: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53024: LD_INT 0
53026: PPUSH
53027: PPUSH
// result := [ ] ;
53028: LD_ADDR_VAR 0 5
53032: PUSH
53033: EMPTY
53034: ST_TO_ADDR
// if not array then
53035: LD_VAR 0 1
53039: NOT
53040: IFFALSE 53044
// exit ;
53042: GO 53156
// for i := 1 to array do
53044: LD_ADDR_VAR 0 6
53048: PUSH
53049: DOUBLE
53050: LD_INT 1
53052: DEC
53053: ST_TO_ADDR
53054: LD_VAR 0 1
53058: PUSH
53059: FOR_TO
53060: IFFALSE 53154
// if array [ i ] [ index ] = value then
53062: LD_VAR 0 1
53066: PUSH
53067: LD_VAR 0 6
53071: ARRAY
53072: PUSH
53073: LD_VAR 0 2
53077: ARRAY
53078: PUSH
53079: LD_VAR 0 3
53083: EQUAL
53084: IFFALSE 53152
// begin if indexColumn then
53086: LD_VAR 0 4
53090: IFFALSE 53126
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53092: LD_ADDR_VAR 0 5
53096: PUSH
53097: LD_VAR 0 5
53101: PPUSH
53102: LD_VAR 0 1
53106: PUSH
53107: LD_VAR 0 6
53111: ARRAY
53112: PUSH
53113: LD_VAR 0 4
53117: ARRAY
53118: PPUSH
53119: CALL 48164 0 2
53123: ST_TO_ADDR
53124: GO 53152
// result := Join ( result , array [ i ] ) ;
53126: LD_ADDR_VAR 0 5
53130: PUSH
53131: LD_VAR 0 5
53135: PPUSH
53136: LD_VAR 0 1
53140: PUSH
53141: LD_VAR 0 6
53145: ARRAY
53146: PPUSH
53147: CALL 48164 0 2
53151: ST_TO_ADDR
// end ;
53152: GO 53059
53154: POP
53155: POP
// end ;
53156: LD_VAR 0 5
53160: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53161: LD_INT 0
53163: PPUSH
// if not vehicles or not parkingPoint then
53164: LD_VAR 0 1
53168: NOT
53169: IFTRUE 53178
53171: PUSH
53172: LD_VAR 0 2
53176: NOT
53177: OR
53178: IFFALSE 53182
// exit ;
53180: GO 53280
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53182: LD_ADDR_VAR 0 1
53186: PUSH
53187: LD_VAR 0 1
53191: PPUSH
53192: LD_INT 50
53194: PUSH
53195: EMPTY
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: LD_INT 92
53203: PUSH
53204: LD_VAR 0 2
53208: PUSH
53209: LD_INT 1
53211: ARRAY
53212: PUSH
53213: LD_VAR 0 2
53217: PUSH
53218: LD_INT 2
53220: ARRAY
53221: PUSH
53222: LD_INT 8
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PPUSH
53239: CALL_OW 72
53243: ST_TO_ADDR
// if not vehicles then
53244: LD_VAR 0 1
53248: NOT
53249: IFFALSE 53253
// exit ;
53251: GO 53280
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53253: LD_VAR 0 1
53257: PPUSH
53258: LD_VAR 0 2
53262: PUSH
53263: LD_INT 1
53265: ARRAY
53266: PPUSH
53267: LD_VAR 0 2
53271: PUSH
53272: LD_INT 2
53274: ARRAY
53275: PPUSH
53276: CALL_OW 111
// end ;
53280: LD_VAR 0 3
53284: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53285: LD_INT 0
53287: PPUSH
53288: PPUSH
53289: PPUSH
// if not side or not area then
53290: LD_VAR 0 1
53294: NOT
53295: IFTRUE 53304
53297: PUSH
53298: LD_VAR 0 2
53302: NOT
53303: OR
53304: IFFALSE 53308
// exit ;
53306: GO 53427
// tmp := AreaToList ( area , 0 ) ;
53308: LD_ADDR_VAR 0 5
53312: PUSH
53313: LD_VAR 0 2
53317: PPUSH
53318: LD_INT 0
53320: PPUSH
53321: CALL_OW 517
53325: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53326: LD_ADDR_VAR 0 4
53330: PUSH
53331: DOUBLE
53332: LD_INT 1
53334: DEC
53335: ST_TO_ADDR
53336: LD_VAR 0 5
53340: PUSH
53341: LD_INT 1
53343: ARRAY
53344: PUSH
53345: FOR_TO
53346: IFFALSE 53425
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53348: LD_VAR 0 5
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PUSH
53357: LD_VAR 0 4
53361: ARRAY
53362: PPUSH
53363: LD_VAR 0 5
53367: PUSH
53368: LD_INT 2
53370: ARRAY
53371: PUSH
53372: LD_VAR 0 4
53376: ARRAY
53377: PPUSH
53378: CALL_OW 351
53382: IFFALSE 53423
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53384: LD_VAR 0 5
53388: PUSH
53389: LD_INT 1
53391: ARRAY
53392: PUSH
53393: LD_VAR 0 4
53397: ARRAY
53398: PPUSH
53399: LD_VAR 0 5
53403: PUSH
53404: LD_INT 2
53406: ARRAY
53407: PUSH
53408: LD_VAR 0 4
53412: ARRAY
53413: PPUSH
53414: LD_VAR 0 1
53418: PPUSH
53419: CALL_OW 244
// end ;
53423: GO 53345
53425: POP
53426: POP
// end ;
53427: LD_VAR 0 3
53431: RET
// export function UniqueArray ( array ) ; var i ; begin
53432: LD_INT 0
53434: PPUSH
53435: PPUSH
// result := [ ] ;
53436: LD_ADDR_VAR 0 2
53440: PUSH
53441: EMPTY
53442: ST_TO_ADDR
// if not array then
53443: LD_VAR 0 1
53447: NOT
53448: IFFALSE 53452
// exit ;
53450: GO 53513
// for i := 1 to array do
53452: LD_ADDR_VAR 0 3
53456: PUSH
53457: DOUBLE
53458: LD_INT 1
53460: DEC
53461: ST_TO_ADDR
53462: LD_VAR 0 1
53466: PUSH
53467: FOR_TO
53468: IFFALSE 53511
// if not array [ i ] in result then
53470: LD_VAR 0 1
53474: PUSH
53475: LD_VAR 0 3
53479: ARRAY
53480: PUSH
53481: LD_VAR 0 2
53485: IN
53486: NOT
53487: IFFALSE 53509
// result := Join ( result , i ) ;
53489: LD_ADDR_VAR 0 2
53493: PUSH
53494: LD_VAR 0 2
53498: PPUSH
53499: LD_VAR 0 3
53503: PPUSH
53504: CALL 48164 0 2
53508: ST_TO_ADDR
53509: GO 53467
53511: POP
53512: POP
// end ; end_of_file
53513: LD_VAR 0 2
53517: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53518: LD_VAR 0 1
53522: PUSH
53523: LD_INT 200
53525: DOUBLE
53526: GREATEREQUAL
53527: IFFALSE 53535
53529: LD_INT 299
53531: DOUBLE
53532: LESSEQUAL
53533: IFTRUE 53537
53535: GO 53569
53537: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53538: LD_VAR 0 1
53542: PPUSH
53543: LD_VAR 0 2
53547: PPUSH
53548: LD_VAR 0 3
53552: PPUSH
53553: LD_VAR 0 4
53557: PPUSH
53558: LD_VAR 0 5
53562: PPUSH
53563: CALL 54350 0 5
53567: GO 53646
53569: LD_INT 300
53571: DOUBLE
53572: GREATEREQUAL
53573: IFFALSE 53581
53575: LD_INT 399
53577: DOUBLE
53578: LESSEQUAL
53579: IFTRUE 53583
53581: GO 53645
53583: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53584: LD_VAR 0 1
53588: PPUSH
53589: LD_VAR 0 2
53593: PPUSH
53594: LD_VAR 0 3
53598: PPUSH
53599: LD_VAR 0 4
53603: PPUSH
53604: LD_VAR 0 5
53608: PPUSH
53609: LD_VAR 0 6
53613: PPUSH
53614: LD_VAR 0 7
53618: PPUSH
53619: LD_VAR 0 8
53623: PPUSH
53624: LD_VAR 0 9
53628: PPUSH
53629: LD_VAR 0 10
53633: PPUSH
53634: LD_VAR 0 11
53638: PPUSH
53639: CALL 61359 0 11
53643: GO 53646
53645: POP
// end ;
53646: PPOPN 11
53648: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53649: LD_VAR 0 1
53653: PPUSH
53654: LD_VAR 0 2
53658: PPUSH
53659: LD_VAR 0 3
53663: PPUSH
53664: LD_VAR 0 4
53668: PPUSH
53669: LD_VAR 0 5
53673: PPUSH
53674: CALL 53731 0 5
// end ; end_of_file
53678: PPOPN 5
53680: END
// export function SOS_UnitDestroyed ( un ) ; begin
53681: LD_INT 0
53683: PPUSH
// ComRadiation ( un ) ;
53684: LD_VAR 0 1
53688: PPUSH
53689: CALL 54770 0 1
// end ;
53693: LD_VAR 0 2
53697: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53698: LD_INT 0
53700: PPUSH
// ComRadiation ( un ) ;
53701: LD_VAR 0 1
53705: PPUSH
53706: CALL 54770 0 1
// end ;
53710: LD_VAR 0 2
53714: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53715: LD_INT 0
53717: PPUSH
// end ;
53718: LD_VAR 0 4
53722: RET
// export function SOS_Command ( cmd ) ; begin
53723: LD_INT 0
53725: PPUSH
// end ;
53726: LD_VAR 0 2
53730: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53731: LD_INT 0
53733: PPUSH
// end ;
53734: LD_VAR 0 6
53738: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53739: LD_INT 0
53741: PPUSH
53742: PPUSH
53743: PPUSH
53744: PPUSH
// if not vehicle or not factory then
53745: LD_VAR 0 1
53749: NOT
53750: IFTRUE 53759
53752: PUSH
53753: LD_VAR 0 2
53757: NOT
53758: OR
53759: IFFALSE 53763
// exit ;
53761: GO 54345
// if not factoryWaypoints then
53763: LD_EXP 59
53767: NOT
53768: IFFALSE 53772
// exit ;
53770: GO 54345
// for i := 1 to Count ( factoryWaypoints ) do
53772: LD_ADDR_VAR 0 4
53776: PUSH
53777: DOUBLE
53778: LD_INT 1
53780: DEC
53781: ST_TO_ADDR
53782: LD_EXP 59
53786: PPUSH
53787: CALL 12232 0 1
53791: PUSH
53792: FOR_TO
53793: IFFALSE 54343
// if factoryWaypoints [ i ] [ 2 ] = factory then
53795: LD_EXP 59
53799: PUSH
53800: LD_VAR 0 4
53804: ARRAY
53805: PUSH
53806: LD_INT 2
53808: ARRAY
53809: PUSH
53810: LD_VAR 0 2
53814: EQUAL
53815: IFFALSE 54341
// begin if GetControl ( vehicle ) = control_manual then
53817: LD_VAR 0 1
53821: PPUSH
53822: CALL_OW 263
53826: PUSH
53827: LD_INT 1
53829: EQUAL
53830: IFFALSE 54194
// begin driver := IsDrivenBy ( vehicle ) ;
53832: LD_ADDR_VAR 0 5
53836: PUSH
53837: LD_VAR 0 1
53841: PPUSH
53842: CALL_OW 311
53846: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53847: LD_VAR 0 5
53851: PUSH
53852: LD_EXP 60
53856: IN
53857: IFTRUE 53871
53859: PUSH
53860: LD_VAR 0 1
53864: PUSH
53865: LD_EXP 60
53869: IN
53870: OR
53871: IFFALSE 53877
// exit ;
53873: POP
53874: POP
53875: GO 54345
// if not HasTask ( driver ) then
53877: LD_VAR 0 5
53881: PPUSH
53882: CALL_OW 314
53886: NOT
53887: IFFALSE 54192
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53889: LD_ADDR_EXP 60
53893: PUSH
53894: LD_EXP 60
53898: PPUSH
53899: LD_VAR 0 5
53903: PPUSH
53904: CALL 48164 0 2
53908: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53909: LD_ADDR_EXP 60
53913: PUSH
53914: LD_EXP 60
53918: PPUSH
53919: LD_VAR 0 1
53923: PPUSH
53924: CALL 48164 0 2
53928: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53929: LD_ADDR_VAR 0 6
53933: PUSH
53934: LD_EXP 59
53938: PUSH
53939: LD_VAR 0 4
53943: ARRAY
53944: PUSH
53945: LD_INT 3
53947: ARRAY
53948: PPUSH
53949: LD_EXP 59
53953: PUSH
53954: LD_VAR 0 4
53958: ARRAY
53959: PUSH
53960: LD_INT 4
53962: ARRAY
53963: PPUSH
53964: CALL_OW 428
53968: ST_TO_ADDR
// if hex then
53969: LD_VAR 0 6
53973: IFFALSE 53991
// ComMoveUnit ( driver , hex ) else
53975: LD_VAR 0 5
53979: PPUSH
53980: LD_VAR 0 6
53984: PPUSH
53985: CALL_OW 112
53989: GO 54075
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53991: LD_VAR 0 1
53995: PPUSH
53996: LD_EXP 59
54000: PUSH
54001: LD_VAR 0 4
54005: ARRAY
54006: PUSH
54007: LD_INT 3
54009: ARRAY
54010: PPUSH
54011: LD_EXP 59
54015: PUSH
54016: LD_VAR 0 4
54020: ARRAY
54021: PUSH
54022: LD_INT 4
54024: ARRAY
54025: PPUSH
54026: CALL_OW 297
54030: PUSH
54031: LD_INT 0
54033: GREATER
54034: IFFALSE 54075
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54036: LD_VAR 0 5
54040: PPUSH
54041: LD_EXP 59
54045: PUSH
54046: LD_VAR 0 4
54050: ARRAY
54051: PUSH
54052: LD_INT 3
54054: ARRAY
54055: PPUSH
54056: LD_EXP 59
54060: PUSH
54061: LD_VAR 0 4
54065: ARRAY
54066: PUSH
54067: LD_INT 4
54069: ARRAY
54070: PPUSH
54071: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54075: LD_VAR 0 5
54079: PPUSH
54080: CALL_OW 181
// if Multiplayer then
54084: LD_OWVAR 4
54088: IFFALSE 54137
// begin repeat wait ( 10 ) ;
54090: LD_INT 10
54092: PPUSH
54093: CALL_OW 67
// until not IsInUnit ( driver ) ;
54097: LD_VAR 0 5
54101: PPUSH
54102: CALL_OW 310
54106: NOT
54107: IFFALSE 54090
// if not HasTask ( driver ) then
54109: LD_VAR 0 5
54113: PPUSH
54114: CALL_OW 314
54118: NOT
54119: IFFALSE 54135
// ComEnterUnit ( driver , factory ) ;
54121: LD_VAR 0 5
54125: PPUSH
54126: LD_VAR 0 2
54130: PPUSH
54131: CALL_OW 120
// end else
54135: GO 54151
// AddComEnterUnit ( driver , factory ) ;
54137: LD_VAR 0 5
54141: PPUSH
54142: LD_VAR 0 2
54146: PPUSH
54147: CALL_OW 180
// wait ( 0 0$1 ) ;
54151: LD_INT 35
54153: PPUSH
54154: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54158: LD_ADDR_EXP 60
54162: PUSH
54163: LD_EXP 60
54167: PUSH
54168: LD_VAR 0 5
54172: DIFF
54173: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54174: LD_ADDR_EXP 60
54178: PUSH
54179: LD_EXP 60
54183: PUSH
54184: LD_VAR 0 1
54188: DIFF
54189: ST_TO_ADDR
// break ;
54190: GO 54343
// end ; end else
54192: GO 54341
// if GetControl ( vehicle ) = control_remote then
54194: LD_VAR 0 1
54198: PPUSH
54199: CALL_OW 263
54203: PUSH
54204: LD_INT 2
54206: EQUAL
54207: IFFALSE 54293
// begin wait ( 0 0$2 ) ;
54209: LD_INT 70
54211: PPUSH
54212: CALL_OW 67
// repeat wait ( 10 ) ;
54216: LD_INT 10
54218: PPUSH
54219: CALL_OW 67
// Connect ( vehicle ) ;
54223: LD_VAR 0 1
54227: PPUSH
54228: CALL 18476 0 1
// until IsControledBy ( vehicle ) ;
54232: LD_VAR 0 1
54236: PPUSH
54237: CALL_OW 312
54241: IFFALSE 54216
// wait ( 10 ) ;
54243: LD_INT 10
54245: PPUSH
54246: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54250: LD_VAR 0 1
54254: PPUSH
54255: LD_EXP 59
54259: PUSH
54260: LD_VAR 0 4
54264: ARRAY
54265: PUSH
54266: LD_INT 3
54268: ARRAY
54269: PPUSH
54270: LD_EXP 59
54274: PUSH
54275: LD_VAR 0 4
54279: ARRAY
54280: PUSH
54281: LD_INT 4
54283: ARRAY
54284: PPUSH
54285: CALL_OW 111
// break ;
54289: GO 54343
// end else
54291: GO 54341
// begin wait ( 0 0$3 ) ;
54293: LD_INT 105
54295: PPUSH
54296: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54300: LD_VAR 0 1
54304: PPUSH
54305: LD_EXP 59
54309: PUSH
54310: LD_VAR 0 4
54314: ARRAY
54315: PUSH
54316: LD_INT 3
54318: ARRAY
54319: PPUSH
54320: LD_EXP 59
54324: PUSH
54325: LD_VAR 0 4
54329: ARRAY
54330: PUSH
54331: LD_INT 4
54333: ARRAY
54334: PPUSH
54335: CALL_OW 111
// break ;
54339: GO 54343
// end ; end ;
54341: GO 53792
54343: POP
54344: POP
// end ;
54345: LD_VAR 0 3
54349: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54350: LD_INT 0
54352: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54353: LD_VAR 0 1
54357: PUSH
54358: LD_INT 250
54360: EQUAL
54361: IFFALSE 54378
54363: PUSH
54364: LD_VAR 0 2
54368: PPUSH
54369: CALL_OW 264
54373: PUSH
54374: LD_INT 81
54376: EQUAL
54377: AND
54378: IFFALSE 54399
// MinerPlaceMine ( unit , x , y ) ;
54380: LD_VAR 0 2
54384: PPUSH
54385: LD_VAR 0 4
54389: PPUSH
54390: LD_VAR 0 5
54394: PPUSH
54395: CALL 57531 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54399: LD_VAR 0 1
54403: PUSH
54404: LD_INT 251
54406: EQUAL
54407: IFFALSE 54424
54409: PUSH
54410: LD_VAR 0 2
54414: PPUSH
54415: CALL_OW 264
54419: PUSH
54420: LD_INT 81
54422: EQUAL
54423: AND
54424: IFFALSE 54445
// MinerDetonateMine ( unit , x , y ) ;
54426: LD_VAR 0 2
54430: PPUSH
54431: LD_VAR 0 4
54435: PPUSH
54436: LD_VAR 0 5
54440: PPUSH
54441: CALL 57810 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54445: LD_VAR 0 1
54449: PUSH
54450: LD_INT 252
54452: EQUAL
54453: IFFALSE 54470
54455: PUSH
54456: LD_VAR 0 2
54460: PPUSH
54461: CALL_OW 264
54465: PUSH
54466: LD_INT 81
54468: EQUAL
54469: AND
54470: IFFALSE 54491
// MinerCreateMinefield ( unit , x , y ) ;
54472: LD_VAR 0 2
54476: PPUSH
54477: LD_VAR 0 4
54481: PPUSH
54482: LD_VAR 0 5
54486: PPUSH
54487: CALL 58229 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54491: LD_VAR 0 1
54495: PUSH
54496: LD_INT 253
54498: EQUAL
54499: IFFALSE 54516
54501: PUSH
54502: LD_VAR 0 2
54506: PPUSH
54507: CALL_OW 257
54511: PUSH
54512: LD_INT 5
54514: EQUAL
54515: AND
54516: IFFALSE 54537
// ComBinocular ( unit , x , y ) ;
54518: LD_VAR 0 2
54522: PPUSH
54523: LD_VAR 0 4
54527: PPUSH
54528: LD_VAR 0 5
54532: PPUSH
54533: CALL 58604 0 3
// if selectedUnit then
54537: LD_VAR 0 3
54541: IFFALSE 54601
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54543: LD_VAR 0 1
54547: PUSH
54548: LD_INT 254
54550: EQUAL
54551: IFFALSE 54568
54553: PUSH
54554: LD_VAR 0 2
54558: PPUSH
54559: CALL_OW 264
54563: PUSH
54564: LD_INT 99
54566: EQUAL
54567: AND
54568: IFFALSE 54585
54570: PUSH
54571: LD_VAR 0 3
54575: PPUSH
54576: CALL_OW 263
54580: PUSH
54581: LD_INT 3
54583: EQUAL
54584: AND
54585: IFFALSE 54601
// HackDestroyVehicle ( unit , selectedUnit ) ;
54587: LD_VAR 0 2
54591: PPUSH
54592: LD_VAR 0 3
54596: PPUSH
54597: CALL 56891 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54601: LD_VAR 0 1
54605: PUSH
54606: LD_INT 255
54608: EQUAL
54609: IFFALSE 54633
54611: PUSH
54612: LD_VAR 0 2
54616: PPUSH
54617: CALL_OW 264
54621: PUSH
54622: LD_INT 14
54624: PUSH
54625: LD_INT 53
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: IN
54632: AND
54633: IFFALSE 54651
54635: PUSH
54636: LD_VAR 0 4
54640: PPUSH
54641: LD_VAR 0 5
54645: PPUSH
54646: CALL_OW 488
54650: AND
54651: IFFALSE 54675
// CutTreeXYR ( unit , x , y , 12 ) ;
54653: LD_VAR 0 2
54657: PPUSH
54658: LD_VAR 0 4
54662: PPUSH
54663: LD_VAR 0 5
54667: PPUSH
54668: LD_INT 12
54670: PPUSH
54671: CALL 54866 0 4
// if cmd = 256 then
54675: LD_VAR 0 1
54679: PUSH
54680: LD_INT 256
54682: EQUAL
54683: IFFALSE 54704
// SetFactoryWaypoint ( unit , x , y ) ;
54685: LD_VAR 0 2
54689: PPUSH
54690: LD_VAR 0 4
54694: PPUSH
54695: LD_VAR 0 5
54699: PPUSH
54700: CALL 61367 0 3
// if cmd = 257 then
54704: LD_VAR 0 1
54708: PUSH
54709: LD_INT 257
54711: EQUAL
54712: IFFALSE 54733
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54714: LD_VAR 0 2
54718: PPUSH
54719: LD_VAR 0 4
54723: PPUSH
54724: LD_VAR 0 5
54728: PPUSH
54729: CALL 61863 0 3
// if cmd = 258 then
54733: LD_VAR 0 1
54737: PUSH
54738: LD_INT 258
54740: EQUAL
54741: IFFALSE 54765
// BurnTreeXYR ( unit , x , y , 8 ) ;
54743: LD_VAR 0 2
54747: PPUSH
54748: LD_VAR 0 4
54752: PPUSH
54753: LD_VAR 0 5
54757: PPUSH
54758: LD_INT 8
54760: PPUSH
54761: CALL 55266 0 4
// end ;
54765: LD_VAR 0 6
54769: RET
// export function ComRadiation ( un ) ; var eff ; begin
54770: LD_INT 0
54772: PPUSH
54773: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54774: LD_VAR 0 1
54778: PPUSH
54779: CALL_OW 264
54783: PUSH
54784: LD_INT 91
54786: NONEQUAL
54787: IFFALSE 54791
// exit ;
54789: GO 54861
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54791: LD_INT 68
54793: PPUSH
54794: LD_VAR 0 1
54798: PPUSH
54799: CALL_OW 255
54803: PPUSH
54804: CALL_OW 321
54808: PUSH
54809: LD_INT 2
54811: EQUAL
54812: IFFALSE 54824
// eff := 50 else
54814: LD_ADDR_VAR 0 3
54818: PUSH
54819: LD_INT 50
54821: ST_TO_ADDR
54822: GO 54832
// eff := 25 ;
54824: LD_ADDR_VAR 0 3
54828: PUSH
54829: LD_INT 25
54831: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 250
54841: PPUSH
54842: LD_VAR 0 1
54846: PPUSH
54847: CALL_OW 251
54851: PPUSH
54852: LD_VAR 0 3
54856: PPUSH
54857: CALL_OW 495
// end ;
54861: LD_VAR 0 2
54865: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54866: LD_INT 0
54868: PPUSH
54869: PPUSH
54870: PPUSH
54871: PPUSH
54872: PPUSH
54873: PPUSH
54874: PPUSH
54875: PPUSH
54876: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54877: LD_VAR 0 1
54881: PPUSH
54882: CALL_OW 302
54886: NOT
54887: IFTRUE 54906
54889: PUSH
54890: LD_VAR 0 2
54894: PPUSH
54895: LD_VAR 0 3
54899: PPUSH
54900: CALL_OW 488
54904: NOT
54905: OR
54906: IFTRUE 54915
54908: PUSH
54909: LD_VAR 0 4
54913: NOT
54914: OR
54915: IFFALSE 54919
// exit ;
54917: GO 55261
// list := [ ] ;
54919: LD_ADDR_VAR 0 13
54923: PUSH
54924: EMPTY
54925: ST_TO_ADDR
// if x - r < 0 then
54926: LD_VAR 0 2
54930: PUSH
54931: LD_VAR 0 4
54935: MINUS
54936: PUSH
54937: LD_INT 0
54939: LESS
54940: IFFALSE 54952
// min_x := 0 else
54942: LD_ADDR_VAR 0 7
54946: PUSH
54947: LD_INT 0
54949: ST_TO_ADDR
54950: GO 54968
// min_x := x - r ;
54952: LD_ADDR_VAR 0 7
54956: PUSH
54957: LD_VAR 0 2
54961: PUSH
54962: LD_VAR 0 4
54966: MINUS
54967: ST_TO_ADDR
// if y - r < 0 then
54968: LD_VAR 0 3
54972: PUSH
54973: LD_VAR 0 4
54977: MINUS
54978: PUSH
54979: LD_INT 0
54981: LESS
54982: IFFALSE 54994
// min_y := 0 else
54984: LD_ADDR_VAR 0 8
54988: PUSH
54989: LD_INT 0
54991: ST_TO_ADDR
54992: GO 55010
// min_y := y - r ;
54994: LD_ADDR_VAR 0 8
54998: PUSH
54999: LD_VAR 0 3
55003: PUSH
55004: LD_VAR 0 4
55008: MINUS
55009: ST_TO_ADDR
// max_x := x + r ;
55010: LD_ADDR_VAR 0 9
55014: PUSH
55015: LD_VAR 0 2
55019: PUSH
55020: LD_VAR 0 4
55024: PLUS
55025: ST_TO_ADDR
// max_y := y + r ;
55026: LD_ADDR_VAR 0 10
55030: PUSH
55031: LD_VAR 0 3
55035: PUSH
55036: LD_VAR 0 4
55040: PLUS
55041: ST_TO_ADDR
// for _x = min_x to max_x do
55042: LD_ADDR_VAR 0 11
55046: PUSH
55047: DOUBLE
55048: LD_VAR 0 7
55052: DEC
55053: ST_TO_ADDR
55054: LD_VAR 0 9
55058: PUSH
55059: FOR_TO
55060: IFFALSE 55179
// for _y = min_y to max_y do
55062: LD_ADDR_VAR 0 12
55066: PUSH
55067: DOUBLE
55068: LD_VAR 0 8
55072: DEC
55073: ST_TO_ADDR
55074: LD_VAR 0 10
55078: PUSH
55079: FOR_TO
55080: IFFALSE 55175
// begin if not ValidHex ( _x , _y ) then
55082: LD_VAR 0 11
55086: PPUSH
55087: LD_VAR 0 12
55091: PPUSH
55092: CALL_OW 488
55096: NOT
55097: IFFALSE 55101
// continue ;
55099: GO 55079
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55101: LD_VAR 0 11
55105: PPUSH
55106: LD_VAR 0 12
55110: PPUSH
55111: CALL_OW 351
55115: IFFALSE 55133
55117: PUSH
55118: LD_VAR 0 11
55122: PPUSH
55123: LD_VAR 0 12
55127: PPUSH
55128: CALL_OW 554
55132: AND
55133: IFFALSE 55173
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55135: LD_ADDR_VAR 0 13
55139: PUSH
55140: LD_VAR 0 13
55144: PPUSH
55145: LD_VAR 0 13
55149: PUSH
55150: LD_INT 1
55152: PLUS
55153: PPUSH
55154: LD_VAR 0 11
55158: PUSH
55159: LD_VAR 0 12
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PPUSH
55168: CALL_OW 2
55172: ST_TO_ADDR
// end ;
55173: GO 55079
55175: POP
55176: POP
55177: GO 55059
55179: POP
55180: POP
// if not list then
55181: LD_VAR 0 13
55185: NOT
55186: IFFALSE 55190
// exit ;
55188: GO 55261
// for i in list do
55190: LD_ADDR_VAR 0 6
55194: PUSH
55195: LD_VAR 0 13
55199: PUSH
55200: FOR_IN
55201: IFFALSE 55259
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55203: LD_VAR 0 1
55207: PPUSH
55208: LD_STRING M
55210: PUSH
55211: LD_VAR 0 6
55215: PUSH
55216: LD_INT 1
55218: ARRAY
55219: PUSH
55220: LD_VAR 0 6
55224: PUSH
55225: LD_INT 2
55227: ARRAY
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: PPUSH
55253: CALL_OW 447
55257: GO 55200
55259: POP
55260: POP
// end ;
55261: LD_VAR 0 5
55265: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55266: LD_INT 0
55268: PPUSH
55269: PPUSH
55270: PPUSH
55271: PPUSH
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55278: LD_VAR 0 1
55282: PPUSH
55283: CALL_OW 302
55287: NOT
55288: IFTRUE 55307
55290: PUSH
55291: LD_VAR 0 2
55295: PPUSH
55296: LD_VAR 0 3
55300: PPUSH
55301: CALL_OW 488
55305: NOT
55306: OR
55307: IFTRUE 55316
55309: PUSH
55310: LD_VAR 0 4
55314: NOT
55315: OR
55316: IFFALSE 55320
// exit ;
55318: GO 55837
// list := [ ] ;
55320: LD_ADDR_VAR 0 13
55324: PUSH
55325: EMPTY
55326: ST_TO_ADDR
// if x - r < 0 then
55327: LD_VAR 0 2
55331: PUSH
55332: LD_VAR 0 4
55336: MINUS
55337: PUSH
55338: LD_INT 0
55340: LESS
55341: IFFALSE 55353
// min_x := 0 else
55343: LD_ADDR_VAR 0 7
55347: PUSH
55348: LD_INT 0
55350: ST_TO_ADDR
55351: GO 55369
// min_x := x - r ;
55353: LD_ADDR_VAR 0 7
55357: PUSH
55358: LD_VAR 0 2
55362: PUSH
55363: LD_VAR 0 4
55367: MINUS
55368: ST_TO_ADDR
// if y - r < 0 then
55369: LD_VAR 0 3
55373: PUSH
55374: LD_VAR 0 4
55378: MINUS
55379: PUSH
55380: LD_INT 0
55382: LESS
55383: IFFALSE 55395
// min_y := 0 else
55385: LD_ADDR_VAR 0 8
55389: PUSH
55390: LD_INT 0
55392: ST_TO_ADDR
55393: GO 55411
// min_y := y - r ;
55395: LD_ADDR_VAR 0 8
55399: PUSH
55400: LD_VAR 0 3
55404: PUSH
55405: LD_VAR 0 4
55409: MINUS
55410: ST_TO_ADDR
// max_x := x + r ;
55411: LD_ADDR_VAR 0 9
55415: PUSH
55416: LD_VAR 0 2
55420: PUSH
55421: LD_VAR 0 4
55425: PLUS
55426: ST_TO_ADDR
// max_y := y + r ;
55427: LD_ADDR_VAR 0 10
55431: PUSH
55432: LD_VAR 0 3
55436: PUSH
55437: LD_VAR 0 4
55441: PLUS
55442: ST_TO_ADDR
// for _x = min_x to max_x do
55443: LD_ADDR_VAR 0 11
55447: PUSH
55448: DOUBLE
55449: LD_VAR 0 7
55453: DEC
55454: ST_TO_ADDR
55455: LD_VAR 0 9
55459: PUSH
55460: FOR_TO
55461: IFFALSE 55580
// for _y = min_y to max_y do
55463: LD_ADDR_VAR 0 12
55467: PUSH
55468: DOUBLE
55469: LD_VAR 0 8
55473: DEC
55474: ST_TO_ADDR
55475: LD_VAR 0 10
55479: PUSH
55480: FOR_TO
55481: IFFALSE 55576
// begin if not ValidHex ( _x , _y ) then
55483: LD_VAR 0 11
55487: PPUSH
55488: LD_VAR 0 12
55492: PPUSH
55493: CALL_OW 488
55497: NOT
55498: IFFALSE 55502
// continue ;
55500: GO 55480
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55502: LD_VAR 0 11
55506: PPUSH
55507: LD_VAR 0 12
55511: PPUSH
55512: CALL_OW 351
55516: IFFALSE 55534
55518: PUSH
55519: LD_VAR 0 11
55523: PPUSH
55524: LD_VAR 0 12
55528: PPUSH
55529: CALL_OW 554
55533: AND
55534: IFFALSE 55574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55536: LD_ADDR_VAR 0 13
55540: PUSH
55541: LD_VAR 0 13
55545: PPUSH
55546: LD_VAR 0 13
55550: PUSH
55551: LD_INT 1
55553: PLUS
55554: PPUSH
55555: LD_VAR 0 11
55559: PUSH
55560: LD_VAR 0 12
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PPUSH
55569: CALL_OW 2
55573: ST_TO_ADDR
// end ;
55574: GO 55480
55576: POP
55577: POP
55578: GO 55460
55580: POP
55581: POP
// if not list then
55582: LD_VAR 0 13
55586: NOT
55587: IFFALSE 55591
// exit ;
55589: GO 55837
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55591: LD_ADDR_VAR 0 13
55595: PUSH
55596: LD_VAR 0 1
55600: PPUSH
55601: LD_VAR 0 13
55605: PPUSH
55606: LD_INT 1
55608: PPUSH
55609: LD_INT 1
55611: PPUSH
55612: CALL 15604 0 4
55616: ST_TO_ADDR
// ComStop ( flame ) ;
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 141
// for i in list do
55626: LD_ADDR_VAR 0 6
55630: PUSH
55631: LD_VAR 0 13
55635: PUSH
55636: FOR_IN
55637: IFFALSE 55668
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55639: LD_VAR 0 1
55643: PPUSH
55644: LD_VAR 0 6
55648: PUSH
55649: LD_INT 1
55651: ARRAY
55652: PPUSH
55653: LD_VAR 0 6
55657: PUSH
55658: LD_INT 2
55660: ARRAY
55661: PPUSH
55662: CALL_OW 176
55666: GO 55636
55668: POP
55669: POP
// repeat wait ( 0 0$1 ) ;
55670: LD_INT 35
55672: PPUSH
55673: CALL_OW 67
// task := GetTaskList ( flame ) ;
55677: LD_ADDR_VAR 0 14
55681: PUSH
55682: LD_VAR 0 1
55686: PPUSH
55687: CALL_OW 437
55691: ST_TO_ADDR
// if not task then
55692: LD_VAR 0 14
55696: NOT
55697: IFFALSE 55701
// exit ;
55699: GO 55837
// if task [ 1 ] [ 1 ] <> | then
55701: LD_VAR 0 14
55705: PUSH
55706: LD_INT 1
55708: ARRAY
55709: PUSH
55710: LD_INT 1
55712: ARRAY
55713: PUSH
55714: LD_STRING |
55716: NONEQUAL
55717: IFFALSE 55721
// exit ;
55719: GO 55837
// _x := task [ 1 ] [ 2 ] ;
55721: LD_ADDR_VAR 0 11
55725: PUSH
55726: LD_VAR 0 14
55730: PUSH
55731: LD_INT 1
55733: ARRAY
55734: PUSH
55735: LD_INT 2
55737: ARRAY
55738: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55739: LD_ADDR_VAR 0 12
55743: PUSH
55744: LD_VAR 0 14
55748: PUSH
55749: LD_INT 1
55751: ARRAY
55752: PUSH
55753: LD_INT 3
55755: ARRAY
55756: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55757: LD_VAR 0 11
55761: PPUSH
55762: LD_VAR 0 12
55766: PPUSH
55767: CALL_OW 351
55771: NOT
55772: IFTRUE 55791
55774: PUSH
55775: LD_VAR 0 11
55779: PPUSH
55780: LD_VAR 0 12
55784: PPUSH
55785: CALL_OW 554
55789: NOT
55790: OR
55791: IFFALSE 55825
// begin task := Delete ( task , 1 ) ;
55793: LD_ADDR_VAR 0 14
55797: PUSH
55798: LD_VAR 0 14
55802: PPUSH
55803: LD_INT 1
55805: PPUSH
55806: CALL_OW 3
55810: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55811: LD_VAR 0 1
55815: PPUSH
55816: LD_VAR 0 14
55820: PPUSH
55821: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55825: LD_VAR 0 1
55829: PPUSH
55830: CALL_OW 314
55834: NOT
55835: IFFALSE 55670
// end ;
55837: LD_VAR 0 5
55841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55842: LD_EXP 48
55846: NOT
55847: IFFALSE 55897
55849: GO 55851
55851: DISABLE
// begin initHack := true ;
55852: LD_ADDR_EXP 48
55856: PUSH
55857: LD_INT 1
55859: ST_TO_ADDR
// hackTanks := [ ] ;
55860: LD_ADDR_EXP 49
55864: PUSH
55865: EMPTY
55866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55867: LD_ADDR_EXP 50
55871: PUSH
55872: EMPTY
55873: ST_TO_ADDR
// hackLimit := 3 ;
55874: LD_ADDR_EXP 51
55878: PUSH
55879: LD_INT 3
55881: ST_TO_ADDR
// hackDist := 12 ;
55882: LD_ADDR_EXP 52
55886: PUSH
55887: LD_INT 12
55889: ST_TO_ADDR
// hackCounter := [ ] ;
55890: LD_ADDR_EXP 53
55894: PUSH
55895: EMPTY
55896: ST_TO_ADDR
// end ;
55897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55898: LD_EXP 48
55902: IFFALSE 55920
55904: PUSH
55905: LD_INT 34
55907: PUSH
55908: LD_INT 99
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PPUSH
55915: CALL_OW 69
55919: AND
55920: IFFALSE 56173
55922: GO 55924
55924: DISABLE
55925: LD_INT 0
55927: PPUSH
55928: PPUSH
// begin enable ;
55929: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55930: LD_ADDR_VAR 0 1
55934: PUSH
55935: LD_INT 34
55937: PUSH
55938: LD_INT 99
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PPUSH
55945: CALL_OW 69
55949: PUSH
55950: FOR_IN
55951: IFFALSE 56171
// begin if not i in hackTanks then
55953: LD_VAR 0 1
55957: PUSH
55958: LD_EXP 49
55962: IN
55963: NOT
55964: IFFALSE 56047
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55966: LD_ADDR_EXP 49
55970: PUSH
55971: LD_EXP 49
55975: PPUSH
55976: LD_EXP 49
55980: PUSH
55981: LD_INT 1
55983: PLUS
55984: PPUSH
55985: LD_VAR 0 1
55989: PPUSH
55990: CALL_OW 1
55994: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55995: LD_ADDR_EXP 50
55999: PUSH
56000: LD_EXP 50
56004: PPUSH
56005: LD_EXP 50
56009: PUSH
56010: LD_INT 1
56012: PLUS
56013: PPUSH
56014: EMPTY
56015: PPUSH
56016: CALL_OW 1
56020: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56021: LD_ADDR_EXP 53
56025: PUSH
56026: LD_EXP 53
56030: PPUSH
56031: LD_EXP 53
56035: PUSH
56036: LD_INT 1
56038: PLUS
56039: PPUSH
56040: EMPTY
56041: PPUSH
56042: CALL_OW 1
56046: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56047: LD_VAR 0 1
56051: PPUSH
56052: CALL_OW 302
56056: NOT
56057: IFFALSE 56070
// begin HackUnlinkAll ( i ) ;
56059: LD_VAR 0 1
56063: PPUSH
56064: CALL 56176 0 1
// continue ;
56068: GO 55950
// end ; HackCheckCapturedStatus ( i ) ;
56070: LD_VAR 0 1
56074: PPUSH
56075: CALL 56621 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56079: LD_ADDR_VAR 0 2
56083: PUSH
56084: LD_INT 81
56086: PUSH
56087: LD_VAR 0 1
56091: PPUSH
56092: CALL_OW 255
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 33
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 91
56113: PUSH
56114: LD_VAR 0 1
56118: PUSH
56119: LD_EXP 52
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 50
56131: PUSH
56132: EMPTY
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: PPUSH
56141: CALL_OW 69
56145: ST_TO_ADDR
// if not tmp then
56146: LD_VAR 0 2
56150: NOT
56151: IFFALSE 56155
// continue ;
56153: GO 55950
// HackLink ( i , tmp ) ;
56155: LD_VAR 0 1
56159: PPUSH
56160: LD_VAR 0 2
56164: PPUSH
56165: CALL 56312 0 2
// end ;
56169: GO 55950
56171: POP
56172: POP
// end ;
56173: PPOPN 2
56175: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56176: LD_INT 0
56178: PPUSH
56179: PPUSH
56180: PPUSH
// if not hack in hackTanks then
56181: LD_VAR 0 1
56185: PUSH
56186: LD_EXP 49
56190: IN
56191: NOT
56192: IFFALSE 56196
// exit ;
56194: GO 56307
// index := GetElementIndex ( hackTanks , hack ) ;
56196: LD_ADDR_VAR 0 4
56200: PUSH
56201: LD_EXP 49
56205: PPUSH
56206: LD_VAR 0 1
56210: PPUSH
56211: CALL 14899 0 2
56215: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56216: LD_EXP 50
56220: PUSH
56221: LD_VAR 0 4
56225: ARRAY
56226: IFFALSE 56307
// begin for i in hackTanksCaptured [ index ] do
56228: LD_ADDR_VAR 0 3
56232: PUSH
56233: LD_EXP 50
56237: PUSH
56238: LD_VAR 0 4
56242: ARRAY
56243: PUSH
56244: FOR_IN
56245: IFFALSE 56271
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56247: LD_VAR 0 3
56251: PUSH
56252: LD_INT 1
56254: ARRAY
56255: PPUSH
56256: LD_VAR 0 3
56260: PUSH
56261: LD_INT 2
56263: ARRAY
56264: PPUSH
56265: CALL_OW 235
56269: GO 56244
56271: POP
56272: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56273: LD_ADDR_EXP 50
56277: PUSH
56278: LD_EXP 50
56282: PPUSH
56283: LD_VAR 0 4
56287: PPUSH
56288: EMPTY
56289: PPUSH
56290: CALL_OW 1
56294: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56295: LD_VAR 0 1
56299: PPUSH
56300: LD_INT 0
56302: PPUSH
56303: CALL_OW 505
// end ; end ;
56307: LD_VAR 0 2
56311: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56312: LD_INT 0
56314: PPUSH
56315: PPUSH
56316: PPUSH
// if not hack in hackTanks or not vehicles then
56317: LD_VAR 0 1
56321: PUSH
56322: LD_EXP 49
56326: IN
56327: NOT
56328: IFTRUE 56337
56330: PUSH
56331: LD_VAR 0 2
56335: NOT
56336: OR
56337: IFFALSE 56341
// exit ;
56339: GO 56616
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56341: LD_ADDR_VAR 0 2
56345: PUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: LD_VAR 0 2
56355: PPUSH
56356: LD_INT 1
56358: PPUSH
56359: LD_INT 1
56361: PPUSH
56362: CALL 15551 0 4
56366: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56367: LD_ADDR_VAR 0 5
56371: PUSH
56372: LD_EXP 49
56376: PPUSH
56377: LD_VAR 0 1
56381: PPUSH
56382: CALL 14899 0 2
56386: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56387: LD_EXP 50
56391: PUSH
56392: LD_VAR 0 5
56396: ARRAY
56397: PUSH
56398: LD_EXP 51
56402: LESS
56403: IFFALSE 56592
// begin for i := 1 to vehicles do
56405: LD_ADDR_VAR 0 4
56409: PUSH
56410: DOUBLE
56411: LD_INT 1
56413: DEC
56414: ST_TO_ADDR
56415: LD_VAR 0 2
56419: PUSH
56420: FOR_TO
56421: IFFALSE 56590
// begin if hackTanksCaptured [ index ] = hackLimit then
56423: LD_EXP 50
56427: PUSH
56428: LD_VAR 0 5
56432: ARRAY
56433: PUSH
56434: LD_EXP 51
56438: EQUAL
56439: IFFALSE 56443
// break ;
56441: GO 56590
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56443: LD_ADDR_EXP 53
56447: PUSH
56448: LD_EXP 53
56452: PPUSH
56453: LD_VAR 0 5
56457: PPUSH
56458: LD_EXP 53
56462: PUSH
56463: LD_VAR 0 5
56467: ARRAY
56468: PUSH
56469: LD_INT 1
56471: PLUS
56472: PPUSH
56473: CALL_OW 1
56477: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56478: LD_ADDR_EXP 50
56482: PUSH
56483: LD_EXP 50
56487: PPUSH
56488: LD_VAR 0 5
56492: PUSH
56493: LD_EXP 50
56497: PUSH
56498: LD_VAR 0 5
56502: ARRAY
56503: PUSH
56504: LD_INT 1
56506: PLUS
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PPUSH
56512: LD_VAR 0 2
56516: PUSH
56517: LD_VAR 0 4
56521: ARRAY
56522: PUSH
56523: LD_VAR 0 2
56527: PUSH
56528: LD_VAR 0 4
56532: ARRAY
56533: PPUSH
56534: CALL_OW 255
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PPUSH
56543: CALL 15116 0 3
56547: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56548: LD_VAR 0 2
56552: PUSH
56553: LD_VAR 0 4
56557: ARRAY
56558: PPUSH
56559: LD_VAR 0 1
56563: PPUSH
56564: CALL_OW 255
56568: PPUSH
56569: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56573: LD_VAR 0 2
56577: PUSH
56578: LD_VAR 0 4
56582: ARRAY
56583: PPUSH
56584: CALL_OW 141
// end ;
56588: GO 56420
56590: POP
56591: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56592: LD_VAR 0 1
56596: PPUSH
56597: LD_EXP 50
56601: PUSH
56602: LD_VAR 0 5
56606: ARRAY
56607: PUSH
56608: LD_INT 0
56610: PLUS
56611: PPUSH
56612: CALL_OW 505
// end ;
56616: LD_VAR 0 3
56620: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56621: LD_INT 0
56623: PPUSH
56624: PPUSH
56625: PPUSH
56626: PPUSH
// if not hack in hackTanks then
56627: LD_VAR 0 1
56631: PUSH
56632: LD_EXP 49
56636: IN
56637: NOT
56638: IFFALSE 56642
// exit ;
56640: GO 56886
// index := GetElementIndex ( hackTanks , hack ) ;
56642: LD_ADDR_VAR 0 4
56646: PUSH
56647: LD_EXP 49
56651: PPUSH
56652: LD_VAR 0 1
56656: PPUSH
56657: CALL 14899 0 2
56661: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56662: LD_ADDR_VAR 0 3
56666: PUSH
56667: DOUBLE
56668: LD_EXP 50
56672: PUSH
56673: LD_VAR 0 4
56677: ARRAY
56678: INC
56679: ST_TO_ADDR
56680: LD_INT 1
56682: PUSH
56683: FOR_DOWNTO
56684: IFFALSE 56860
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56686: LD_ADDR_VAR 0 5
56690: PUSH
56691: LD_EXP 50
56695: PUSH
56696: LD_VAR 0 4
56700: ARRAY
56701: PUSH
56702: LD_VAR 0 3
56706: ARRAY
56707: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56708: LD_VAR 0 5
56712: PUSH
56713: LD_INT 1
56715: ARRAY
56716: PPUSH
56717: CALL_OW 302
56721: NOT
56722: IFTRUE 56750
56724: PUSH
56725: LD_VAR 0 5
56729: PUSH
56730: LD_INT 1
56732: ARRAY
56733: PPUSH
56734: CALL_OW 255
56738: PUSH
56739: LD_VAR 0 1
56743: PPUSH
56744: CALL_OW 255
56748: NONEQUAL
56749: OR
56750: IFFALSE 56858
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56752: LD_VAR 0 5
56756: PUSH
56757: LD_INT 1
56759: ARRAY
56760: PPUSH
56761: CALL_OW 305
56765: IFFALSE 56793
56767: PUSH
56768: LD_VAR 0 5
56772: PUSH
56773: LD_INT 1
56775: ARRAY
56776: PPUSH
56777: CALL_OW 255
56781: PUSH
56782: LD_VAR 0 1
56786: PPUSH
56787: CALL_OW 255
56791: EQUAL
56792: AND
56793: IFFALSE 56817
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56795: LD_VAR 0 5
56799: PUSH
56800: LD_INT 1
56802: ARRAY
56803: PPUSH
56804: LD_VAR 0 5
56808: PUSH
56809: LD_INT 2
56811: ARRAY
56812: PPUSH
56813: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56817: LD_ADDR_EXP 50
56821: PUSH
56822: LD_EXP 50
56826: PPUSH
56827: LD_VAR 0 4
56831: PPUSH
56832: LD_EXP 50
56836: PUSH
56837: LD_VAR 0 4
56841: ARRAY
56842: PPUSH
56843: LD_VAR 0 3
56847: PPUSH
56848: CALL_OW 3
56852: PPUSH
56853: CALL_OW 1
56857: ST_TO_ADDR
// end ; end ;
56858: GO 56683
56860: POP
56861: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56862: LD_VAR 0 1
56866: PPUSH
56867: LD_EXP 50
56871: PUSH
56872: LD_VAR 0 4
56876: ARRAY
56877: PUSH
56878: LD_INT 0
56880: PLUS
56881: PPUSH
56882: CALL_OW 505
// end ;
56886: LD_VAR 0 2
56890: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56891: LD_INT 0
56893: PPUSH
56894: PPUSH
56895: PPUSH
56896: PPUSH
// if not hack in hackTanks then
56897: LD_VAR 0 1
56901: PUSH
56902: LD_EXP 49
56906: IN
56907: NOT
56908: IFFALSE 56912
// exit ;
56910: GO 56997
// index := GetElementIndex ( hackTanks , hack ) ;
56912: LD_ADDR_VAR 0 5
56916: PUSH
56917: LD_EXP 49
56921: PPUSH
56922: LD_VAR 0 1
56926: PPUSH
56927: CALL 14899 0 2
56931: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56932: LD_ADDR_VAR 0 4
56936: PUSH
56937: DOUBLE
56938: LD_INT 1
56940: DEC
56941: ST_TO_ADDR
56942: LD_EXP 50
56946: PUSH
56947: LD_VAR 0 5
56951: ARRAY
56952: PUSH
56953: FOR_TO
56954: IFFALSE 56995
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56956: LD_EXP 50
56960: PUSH
56961: LD_VAR 0 5
56965: ARRAY
56966: PUSH
56967: LD_VAR 0 4
56971: ARRAY
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PUSH
56977: LD_VAR 0 2
56981: EQUAL
56982: IFFALSE 56993
// KillUnit ( vehicle ) ;
56984: LD_VAR 0 2
56988: PPUSH
56989: CALL_OW 66
56993: GO 56953
56995: POP
56996: POP
// end ;
56997: LD_VAR 0 3
57001: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57002: LD_EXP 54
57006: NOT
57007: IFFALSE 57042
57009: GO 57011
57011: DISABLE
// begin initMiner := true ;
57012: LD_ADDR_EXP 54
57016: PUSH
57017: LD_INT 1
57019: ST_TO_ADDR
// minersList := [ ] ;
57020: LD_ADDR_EXP 55
57024: PUSH
57025: EMPTY
57026: ST_TO_ADDR
// minerMinesList := [ ] ;
57027: LD_ADDR_EXP 56
57031: PUSH
57032: EMPTY
57033: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57034: LD_ADDR_EXP 57
57038: PUSH
57039: LD_INT 5
57041: ST_TO_ADDR
// end ;
57042: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57043: LD_EXP 54
57047: IFFALSE 57065
57049: PUSH
57050: LD_INT 34
57052: PUSH
57053: LD_INT 81
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PPUSH
57060: CALL_OW 69
57064: AND
57065: IFFALSE 57528
57067: GO 57069
57069: DISABLE
57070: LD_INT 0
57072: PPUSH
57073: PPUSH
57074: PPUSH
57075: PPUSH
// begin enable ;
57076: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57077: LD_ADDR_VAR 0 1
57081: PUSH
57082: LD_INT 34
57084: PUSH
57085: LD_INT 81
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PPUSH
57092: CALL_OW 69
57096: PUSH
57097: FOR_IN
57098: IFFALSE 57170
// begin if not i in minersList then
57100: LD_VAR 0 1
57104: PUSH
57105: LD_EXP 55
57109: IN
57110: NOT
57111: IFFALSE 57168
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57113: LD_ADDR_EXP 55
57117: PUSH
57118: LD_EXP 55
57122: PPUSH
57123: LD_EXP 55
57127: PUSH
57128: LD_INT 1
57130: PLUS
57131: PPUSH
57132: LD_VAR 0 1
57136: PPUSH
57137: CALL_OW 1
57141: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57142: LD_ADDR_EXP 56
57146: PUSH
57147: LD_EXP 56
57151: PPUSH
57152: LD_EXP 56
57156: PUSH
57157: LD_INT 1
57159: PLUS
57160: PPUSH
57161: EMPTY
57162: PPUSH
57163: CALL_OW 1
57167: ST_TO_ADDR
// end end ;
57168: GO 57097
57170: POP
57171: POP
// for i := minerMinesList downto 1 do
57172: LD_ADDR_VAR 0 1
57176: PUSH
57177: DOUBLE
57178: LD_EXP 56
57182: INC
57183: ST_TO_ADDR
57184: LD_INT 1
57186: PUSH
57187: FOR_DOWNTO
57188: IFFALSE 57526
// begin if IsLive ( minersList [ i ] ) then
57190: LD_EXP 55
57194: PUSH
57195: LD_VAR 0 1
57199: ARRAY
57200: PPUSH
57201: CALL_OW 300
57205: IFFALSE 57233
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57207: LD_EXP 55
57211: PUSH
57212: LD_VAR 0 1
57216: ARRAY
57217: PPUSH
57218: LD_EXP 56
57222: PUSH
57223: LD_VAR 0 1
57227: ARRAY
57228: PPUSH
57229: CALL_OW 505
// if not minerMinesList [ i ] then
57233: LD_EXP 56
57237: PUSH
57238: LD_VAR 0 1
57242: ARRAY
57243: NOT
57244: IFFALSE 57248
// continue ;
57246: GO 57187
// for j := minerMinesList [ i ] downto 1 do
57248: LD_ADDR_VAR 0 2
57252: PUSH
57253: DOUBLE
57254: LD_EXP 56
57258: PUSH
57259: LD_VAR 0 1
57263: ARRAY
57264: INC
57265: ST_TO_ADDR
57266: LD_INT 1
57268: PUSH
57269: FOR_DOWNTO
57270: IFFALSE 57522
// begin side := GetSide ( minersList [ i ] ) ;
57272: LD_ADDR_VAR 0 3
57276: PUSH
57277: LD_EXP 55
57281: PUSH
57282: LD_VAR 0 1
57286: ARRAY
57287: PPUSH
57288: CALL_OW 255
57292: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57293: LD_ADDR_VAR 0 4
57297: PUSH
57298: LD_EXP 56
57302: PUSH
57303: LD_VAR 0 1
57307: ARRAY
57308: PUSH
57309: LD_VAR 0 2
57313: ARRAY
57314: PUSH
57315: LD_INT 1
57317: ARRAY
57318: PPUSH
57319: LD_EXP 56
57323: PUSH
57324: LD_VAR 0 1
57328: ARRAY
57329: PUSH
57330: LD_VAR 0 2
57334: ARRAY
57335: PUSH
57336: LD_INT 2
57338: ARRAY
57339: PPUSH
57340: CALL_OW 428
57344: ST_TO_ADDR
// if not tmp then
57345: LD_VAR 0 4
57349: NOT
57350: IFFALSE 57354
// continue ;
57352: GO 57269
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57354: LD_VAR 0 4
57358: PUSH
57359: LD_INT 81
57361: PUSH
57362: LD_VAR 0 3
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PPUSH
57371: CALL_OW 69
57375: IN
57376: IFFALSE 57426
57378: PUSH
57379: LD_EXP 56
57383: PUSH
57384: LD_VAR 0 1
57388: ARRAY
57389: PUSH
57390: LD_VAR 0 2
57394: ARRAY
57395: PUSH
57396: LD_INT 1
57398: ARRAY
57399: PPUSH
57400: LD_EXP 56
57404: PUSH
57405: LD_VAR 0 1
57409: ARRAY
57410: PUSH
57411: LD_VAR 0 2
57415: ARRAY
57416: PUSH
57417: LD_INT 2
57419: ARRAY
57420: PPUSH
57421: CALL_OW 458
57425: AND
57426: IFFALSE 57520
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57428: LD_EXP 56
57432: PUSH
57433: LD_VAR 0 1
57437: ARRAY
57438: PUSH
57439: LD_VAR 0 2
57443: ARRAY
57444: PUSH
57445: LD_INT 1
57447: ARRAY
57448: PPUSH
57449: LD_EXP 56
57453: PUSH
57454: LD_VAR 0 1
57458: ARRAY
57459: PUSH
57460: LD_VAR 0 2
57464: ARRAY
57465: PUSH
57466: LD_INT 2
57468: ARRAY
57469: PPUSH
57470: LD_VAR 0 3
57474: PPUSH
57475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57479: LD_ADDR_EXP 56
57483: PUSH
57484: LD_EXP 56
57488: PPUSH
57489: LD_VAR 0 1
57493: PPUSH
57494: LD_EXP 56
57498: PUSH
57499: LD_VAR 0 1
57503: ARRAY
57504: PPUSH
57505: LD_VAR 0 2
57509: PPUSH
57510: CALL_OW 3
57514: PPUSH
57515: CALL_OW 1
57519: ST_TO_ADDR
// end ; end ;
57520: GO 57269
57522: POP
57523: POP
// end ;
57524: GO 57187
57526: POP
57527: POP
// end ;
57528: PPOPN 4
57530: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57531: LD_INT 0
57533: PPUSH
57534: PPUSH
// result := false ;
57535: LD_ADDR_VAR 0 4
57539: PUSH
57540: LD_INT 0
57542: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57543: LD_VAR 0 1
57547: PPUSH
57548: CALL_OW 264
57552: PUSH
57553: LD_INT 81
57555: EQUAL
57556: NOT
57557: IFFALSE 57561
// exit ;
57559: GO 57805
// index := GetElementIndex ( minersList , unit ) ;
57561: LD_ADDR_VAR 0 5
57565: PUSH
57566: LD_EXP 55
57570: PPUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL 14899 0 2
57580: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57581: LD_EXP 56
57585: PUSH
57586: LD_VAR 0 5
57590: ARRAY
57591: PUSH
57592: LD_EXP 57
57596: GREATEREQUAL
57597: IFFALSE 57601
// exit ;
57599: GO 57805
// ComMoveXY ( unit , x , y ) ;
57601: LD_VAR 0 1
57605: PPUSH
57606: LD_VAR 0 2
57610: PPUSH
57611: LD_VAR 0 3
57615: PPUSH
57616: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57620: LD_INT 35
57622: PPUSH
57623: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57627: LD_VAR 0 1
57631: PPUSH
57632: LD_VAR 0 2
57636: PPUSH
57637: LD_VAR 0 3
57641: PPUSH
57642: CALL 46945 0 3
57646: NOT
57647: IFFALSE 57660
57649: PUSH
57650: LD_VAR 0 1
57654: PPUSH
57655: CALL_OW 314
57659: AND
57660: IFFALSE 57664
// exit ;
57662: GO 57805
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57664: LD_VAR 0 2
57668: PPUSH
57669: LD_VAR 0 3
57673: PPUSH
57674: CALL_OW 428
57678: PUSH
57679: LD_VAR 0 1
57683: EQUAL
57684: IFFALSE 57698
57686: PUSH
57687: LD_VAR 0 1
57691: PPUSH
57692: CALL_OW 314
57696: NOT
57697: AND
57698: IFFALSE 57620
// PlaySoundXY ( x , y , PlantMine ) ;
57700: LD_VAR 0 2
57704: PPUSH
57705: LD_VAR 0 3
57709: PPUSH
57710: LD_STRING PlantMine
57712: PPUSH
57713: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57717: LD_VAR 0 2
57721: PPUSH
57722: LD_VAR 0 3
57726: PPUSH
57727: LD_VAR 0 1
57731: PPUSH
57732: CALL_OW 255
57736: PPUSH
57737: LD_INT 0
57739: PPUSH
57740: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57744: LD_ADDR_EXP 56
57748: PUSH
57749: LD_EXP 56
57753: PPUSH
57754: LD_VAR 0 5
57758: PUSH
57759: LD_EXP 56
57763: PUSH
57764: LD_VAR 0 5
57768: ARRAY
57769: PUSH
57770: LD_INT 1
57772: PLUS
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PPUSH
57778: LD_VAR 0 2
57782: PUSH
57783: LD_VAR 0 3
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PPUSH
57792: CALL 15116 0 3
57796: ST_TO_ADDR
// result := true ;
57797: LD_ADDR_VAR 0 4
57801: PUSH
57802: LD_INT 1
57804: ST_TO_ADDR
// end ;
57805: LD_VAR 0 4
57809: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57810: LD_INT 0
57812: PPUSH
57813: PPUSH
57814: PPUSH
// if not unit in minersList then
57815: LD_VAR 0 1
57819: PUSH
57820: LD_EXP 55
57824: IN
57825: NOT
57826: IFFALSE 57830
// exit ;
57828: GO 58224
// index := GetElementIndex ( minersList , unit ) ;
57830: LD_ADDR_VAR 0 6
57834: PUSH
57835: LD_EXP 55
57839: PPUSH
57840: LD_VAR 0 1
57844: PPUSH
57845: CALL 14899 0 2
57849: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57850: LD_ADDR_VAR 0 5
57854: PUSH
57855: DOUBLE
57856: LD_EXP 56
57860: PUSH
57861: LD_VAR 0 6
57865: ARRAY
57866: INC
57867: ST_TO_ADDR
57868: LD_INT 1
57870: PUSH
57871: FOR_DOWNTO
57872: IFFALSE 58035
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57874: LD_EXP 56
57878: PUSH
57879: LD_VAR 0 6
57883: ARRAY
57884: PUSH
57885: LD_VAR 0 5
57889: ARRAY
57890: PUSH
57891: LD_INT 1
57893: ARRAY
57894: PUSH
57895: LD_VAR 0 2
57899: EQUAL
57900: IFFALSE 57930
57902: PUSH
57903: LD_EXP 56
57907: PUSH
57908: LD_VAR 0 6
57912: ARRAY
57913: PUSH
57914: LD_VAR 0 5
57918: ARRAY
57919: PUSH
57920: LD_INT 2
57922: ARRAY
57923: PUSH
57924: LD_VAR 0 3
57928: EQUAL
57929: AND
57930: IFFALSE 58033
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57932: LD_EXP 56
57936: PUSH
57937: LD_VAR 0 6
57941: ARRAY
57942: PUSH
57943: LD_VAR 0 5
57947: ARRAY
57948: PUSH
57949: LD_INT 1
57951: ARRAY
57952: PPUSH
57953: LD_EXP 56
57957: PUSH
57958: LD_VAR 0 6
57962: ARRAY
57963: PUSH
57964: LD_VAR 0 5
57968: ARRAY
57969: PUSH
57970: LD_INT 2
57972: ARRAY
57973: PPUSH
57974: LD_VAR 0 1
57978: PPUSH
57979: CALL_OW 255
57983: PPUSH
57984: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57988: LD_ADDR_EXP 56
57992: PUSH
57993: LD_EXP 56
57997: PPUSH
57998: LD_VAR 0 6
58002: PPUSH
58003: LD_EXP 56
58007: PUSH
58008: LD_VAR 0 6
58012: ARRAY
58013: PPUSH
58014: LD_VAR 0 5
58018: PPUSH
58019: CALL_OW 3
58023: PPUSH
58024: CALL_OW 1
58028: ST_TO_ADDR
// exit ;
58029: POP
58030: POP
58031: GO 58224
// end ; end ;
58033: GO 57871
58035: POP
58036: POP
// for i := minerMinesList [ index ] downto 1 do
58037: LD_ADDR_VAR 0 5
58041: PUSH
58042: DOUBLE
58043: LD_EXP 56
58047: PUSH
58048: LD_VAR 0 6
58052: ARRAY
58053: INC
58054: ST_TO_ADDR
58055: LD_INT 1
58057: PUSH
58058: FOR_DOWNTO
58059: IFFALSE 58222
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58061: LD_EXP 56
58065: PUSH
58066: LD_VAR 0 6
58070: ARRAY
58071: PUSH
58072: LD_VAR 0 5
58076: ARRAY
58077: PUSH
58078: LD_INT 1
58080: ARRAY
58081: PPUSH
58082: LD_EXP 56
58086: PUSH
58087: LD_VAR 0 6
58091: ARRAY
58092: PUSH
58093: LD_VAR 0 5
58097: ARRAY
58098: PUSH
58099: LD_INT 2
58101: ARRAY
58102: PPUSH
58103: LD_VAR 0 2
58107: PPUSH
58108: LD_VAR 0 3
58112: PPUSH
58113: CALL_OW 298
58117: PUSH
58118: LD_INT 6
58120: LESS
58121: IFFALSE 58220
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58123: LD_EXP 56
58127: PUSH
58128: LD_VAR 0 6
58132: ARRAY
58133: PUSH
58134: LD_VAR 0 5
58138: ARRAY
58139: PUSH
58140: LD_INT 1
58142: ARRAY
58143: PPUSH
58144: LD_EXP 56
58148: PUSH
58149: LD_VAR 0 6
58153: ARRAY
58154: PUSH
58155: LD_VAR 0 5
58159: ARRAY
58160: PUSH
58161: LD_INT 2
58163: ARRAY
58164: PPUSH
58165: LD_VAR 0 1
58169: PPUSH
58170: CALL_OW 255
58174: PPUSH
58175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58179: LD_ADDR_EXP 56
58183: PUSH
58184: LD_EXP 56
58188: PPUSH
58189: LD_VAR 0 6
58193: PPUSH
58194: LD_EXP 56
58198: PUSH
58199: LD_VAR 0 6
58203: ARRAY
58204: PPUSH
58205: LD_VAR 0 5
58209: PPUSH
58210: CALL_OW 3
58214: PPUSH
58215: CALL_OW 1
58219: ST_TO_ADDR
// end ; end ;
58220: GO 58058
58222: POP
58223: POP
// end ;
58224: LD_VAR 0 4
58228: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58229: LD_INT 0
58231: PPUSH
58232: PPUSH
58233: PPUSH
58234: PPUSH
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
58239: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58240: LD_VAR 0 1
58244: PPUSH
58245: CALL_OW 264
58249: PUSH
58250: LD_INT 81
58252: EQUAL
58253: NOT
58254: IFTRUE 58269
58256: PUSH
58257: LD_VAR 0 1
58261: PUSH
58262: LD_EXP 55
58266: IN
58267: NOT
58268: OR
58269: IFFALSE 58273
// exit ;
58271: GO 58599
// index := GetElementIndex ( minersList , unit ) ;
58273: LD_ADDR_VAR 0 6
58277: PUSH
58278: LD_EXP 55
58282: PPUSH
58283: LD_VAR 0 1
58287: PPUSH
58288: CALL 14899 0 2
58292: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58293: LD_ADDR_VAR 0 8
58297: PUSH
58298: LD_EXP 57
58302: PUSH
58303: LD_EXP 56
58307: PUSH
58308: LD_VAR 0 6
58312: ARRAY
58313: MINUS
58314: ST_TO_ADDR
// if not minesFreeAmount then
58315: LD_VAR 0 8
58319: NOT
58320: IFFALSE 58324
// exit ;
58322: GO 58599
// tmp := [ ] ;
58324: LD_ADDR_VAR 0 7
58328: PUSH
58329: EMPTY
58330: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58331: LD_ADDR_VAR 0 5
58335: PUSH
58336: DOUBLE
58337: LD_INT 1
58339: DEC
58340: ST_TO_ADDR
58341: LD_VAR 0 8
58345: PUSH
58346: FOR_TO
58347: IFFALSE 58546
// begin _d := rand ( 0 , 5 ) ;
58349: LD_ADDR_VAR 0 11
58353: PUSH
58354: LD_INT 0
58356: PPUSH
58357: LD_INT 5
58359: PPUSH
58360: CALL_OW 12
58364: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58365: LD_ADDR_VAR 0 12
58369: PUSH
58370: LD_INT 2
58372: PPUSH
58373: LD_INT 6
58375: PPUSH
58376: CALL_OW 12
58380: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58381: LD_ADDR_VAR 0 9
58385: PUSH
58386: LD_VAR 0 2
58390: PPUSH
58391: LD_VAR 0 11
58395: PPUSH
58396: LD_VAR 0 12
58400: PPUSH
58401: CALL_OW 272
58405: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58406: LD_ADDR_VAR 0 10
58410: PUSH
58411: LD_VAR 0 3
58415: PPUSH
58416: LD_VAR 0 11
58420: PPUSH
58421: LD_VAR 0 12
58425: PPUSH
58426: CALL_OW 273
58430: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58431: LD_VAR 0 9
58435: PPUSH
58436: LD_VAR 0 10
58440: PPUSH
58441: CALL_OW 488
58445: IFFALSE 58469
58447: PUSH
58448: LD_VAR 0 9
58452: PUSH
58453: LD_VAR 0 10
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_VAR 0 7
58466: IN
58467: NOT
58468: AND
58469: IFFALSE 58488
58471: PUSH
58472: LD_VAR 0 9
58476: PPUSH
58477: LD_VAR 0 10
58481: PPUSH
58482: CALL_OW 458
58486: NOT
58487: AND
58488: IFFALSE 58530
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58490: LD_ADDR_VAR 0 7
58494: PUSH
58495: LD_VAR 0 7
58499: PPUSH
58500: LD_VAR 0 7
58504: PUSH
58505: LD_INT 1
58507: PLUS
58508: PPUSH
58509: LD_VAR 0 9
58513: PUSH
58514: LD_VAR 0 10
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PPUSH
58523: CALL_OW 1
58527: ST_TO_ADDR
58528: GO 58544
// i := i - 1 ;
58530: LD_ADDR_VAR 0 5
58534: PUSH
58535: LD_VAR 0 5
58539: PUSH
58540: LD_INT 1
58542: MINUS
58543: ST_TO_ADDR
// end ;
58544: GO 58346
58546: POP
58547: POP
// for i in tmp do
58548: LD_ADDR_VAR 0 5
58552: PUSH
58553: LD_VAR 0 7
58557: PUSH
58558: FOR_IN
58559: IFFALSE 58597
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58561: LD_VAR 0 1
58565: PPUSH
58566: LD_VAR 0 5
58570: PUSH
58571: LD_INT 1
58573: ARRAY
58574: PPUSH
58575: LD_VAR 0 5
58579: PUSH
58580: LD_INT 2
58582: ARRAY
58583: PPUSH
58584: CALL 57531 0 3
58588: NOT
58589: IFFALSE 58595
// exit ;
58591: POP
58592: POP
58593: GO 58599
58595: GO 58558
58597: POP
58598: POP
// end ;
58599: LD_VAR 0 4
58603: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58604: LD_INT 0
58606: PPUSH
58607: PPUSH
58608: PPUSH
58609: PPUSH
58610: PPUSH
58611: PPUSH
58612: PPUSH
58613: PPUSH
58614: PPUSH
// if GetClass ( unit ) <> class_sniper then
58615: LD_VAR 0 1
58619: PPUSH
58620: CALL_OW 257
58624: PUSH
58625: LD_INT 5
58627: NONEQUAL
58628: IFFALSE 58632
// exit ;
58630: GO 59102
// dist := 8 ;
58632: LD_ADDR_VAR 0 5
58636: PUSH
58637: LD_INT 8
58639: ST_TO_ADDR
// viewRange := 12 ;
58640: LD_ADDR_VAR 0 8
58644: PUSH
58645: LD_INT 12
58647: ST_TO_ADDR
// side := GetSide ( unit ) ;
58648: LD_ADDR_VAR 0 6
58652: PUSH
58653: LD_VAR 0 1
58657: PPUSH
58658: CALL_OW 255
58662: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58663: LD_INT 61
58665: PPUSH
58666: LD_VAR 0 6
58670: PPUSH
58671: CALL_OW 321
58675: PUSH
58676: LD_INT 2
58678: EQUAL
58679: IFFALSE 58689
// viewRange := 16 ;
58681: LD_ADDR_VAR 0 8
58685: PUSH
58686: LD_INT 16
58688: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58689: LD_VAR 0 1
58693: PPUSH
58694: LD_VAR 0 2
58698: PPUSH
58699: LD_VAR 0 3
58703: PPUSH
58704: CALL_OW 297
58708: PUSH
58709: LD_VAR 0 5
58713: GREATER
58714: IFFALSE 58793
// begin ComMoveXY ( unit , x , y ) ;
58716: LD_VAR 0 1
58720: PPUSH
58721: LD_VAR 0 2
58725: PPUSH
58726: LD_VAR 0 3
58730: PPUSH
58731: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58735: LD_INT 35
58737: PPUSH
58738: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58742: LD_VAR 0 1
58746: PPUSH
58747: LD_VAR 0 2
58751: PPUSH
58752: LD_VAR 0 3
58756: PPUSH
58757: CALL 46945 0 3
58761: NOT
58762: IFFALSE 58766
// exit ;
58764: GO 59102
// until GetDistUnitXY ( unit , x , y ) < dist ;
58766: LD_VAR 0 1
58770: PPUSH
58771: LD_VAR 0 2
58775: PPUSH
58776: LD_VAR 0 3
58780: PPUSH
58781: CALL_OW 297
58785: PUSH
58786: LD_VAR 0 5
58790: LESS
58791: IFFALSE 58735
// end ; ComTurnXY ( unit , x , y ) ;
58793: LD_VAR 0 1
58797: PPUSH
58798: LD_VAR 0 2
58802: PPUSH
58803: LD_VAR 0 3
58807: PPUSH
58808: CALL_OW 118
// repeat if Multiplayer then
58812: LD_OWVAR 4
58816: IFFALSE 58827
// wait ( 35 ) else
58818: LD_INT 35
58820: PPUSH
58821: CALL_OW 67
58825: GO 58834
// wait ( 5 ) ;
58827: LD_INT 5
58829: PPUSH
58830: CALL_OW 67
// _d := GetDir ( unit ) ;
58834: LD_ADDR_VAR 0 11
58838: PUSH
58839: LD_VAR 0 1
58843: PPUSH
58844: CALL_OW 254
58848: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58849: LD_ADDR_VAR 0 7
58853: PUSH
58854: LD_VAR 0 1
58858: PPUSH
58859: CALL_OW 250
58863: PPUSH
58864: LD_VAR 0 1
58868: PPUSH
58869: CALL_OW 251
58873: PPUSH
58874: LD_VAR 0 2
58878: PPUSH
58879: LD_VAR 0 3
58883: PPUSH
58884: CALL 49581 0 4
58888: ST_TO_ADDR
// until dir = _d ;
58889: LD_VAR 0 7
58893: PUSH
58894: LD_VAR 0 11
58898: EQUAL
58899: IFFALSE 58812
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58901: LD_ADDR_VAR 0 9
58905: PUSH
58906: LD_VAR 0 1
58910: PPUSH
58911: CALL_OW 250
58915: PPUSH
58916: LD_VAR 0 7
58920: PPUSH
58921: LD_VAR 0 5
58925: PPUSH
58926: CALL_OW 272
58930: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58931: LD_ADDR_VAR 0 10
58935: PUSH
58936: LD_VAR 0 1
58940: PPUSH
58941: CALL_OW 251
58945: PPUSH
58946: LD_VAR 0 7
58950: PPUSH
58951: LD_VAR 0 5
58955: PPUSH
58956: CALL_OW 273
58960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58961: LD_VAR 0 9
58965: PPUSH
58966: LD_VAR 0 10
58970: PPUSH
58971: CALL_OW 488
58975: NOT
58976: IFFALSE 58980
// exit ;
58978: GO 59102
// ComAnimCustom ( unit , 1 ) ;
58980: LD_VAR 0 1
58984: PPUSH
58985: LD_INT 1
58987: PPUSH
58988: CALL_OW 592
// p := 0 ;
58992: LD_ADDR_VAR 0 12
58996: PUSH
58997: LD_INT 0
58999: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59000: LD_VAR 0 9
59004: PPUSH
59005: LD_VAR 0 10
59009: PPUSH
59010: LD_VAR 0 6
59014: PPUSH
59015: LD_VAR 0 8
59019: PPUSH
59020: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59024: LD_INT 35
59026: PPUSH
59027: CALL_OW 67
// p := Inc ( p ) ;
59031: LD_ADDR_VAR 0 12
59035: PUSH
59036: LD_VAR 0 12
59040: PPUSH
59041: CALL 49537 0 1
59045: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59046: LD_VAR 0 12
59050: PUSH
59051: LD_INT 3
59053: EQUAL
59054: IFTRUE 59068
59056: PUSH
59057: LD_VAR 0 1
59061: PPUSH
59062: CALL_OW 302
59066: NOT
59067: OR
59068: IFTRUE 59081
59070: PUSH
59071: LD_VAR 0 1
59075: PPUSH
59076: CALL_OW 301
59080: OR
59081: IFFALSE 59024
// RemoveSeeing ( _x , _y , side ) ;
59083: LD_VAR 0 9
59087: PPUSH
59088: LD_VAR 0 10
59092: PPUSH
59093: LD_VAR 0 6
59097: PPUSH
59098: CALL_OW 331
// end ; end_of_file
59102: LD_VAR 0 4
59106: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59107: LD_EXP 39
59111: IFFALSE 59452
59113: GO 59115
59115: DISABLE
59116: LD_INT 0
59118: PPUSH
59119: PPUSH
59120: PPUSH
// begin mpKingPoints := [ ] ;
59121: LD_ADDR_EXP 58
59125: PUSH
59126: EMPTY
59127: ST_TO_ADDR
// if mpTeamGame then
59128: LD_EXP 11
59132: IFFALSE 59186
// begin for i := 1 to Count ( mpTeams ) do
59134: LD_ADDR_VAR 0 1
59138: PUSH
59139: DOUBLE
59140: LD_INT 1
59142: DEC
59143: ST_TO_ADDR
59144: LD_EXP 10
59148: PPUSH
59149: CALL 12232 0 1
59153: PUSH
59154: FOR_TO
59155: IFFALSE 59182
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59157: LD_ADDR_EXP 58
59161: PUSH
59162: LD_EXP 58
59166: PPUSH
59167: LD_VAR 0 1
59171: PPUSH
59172: LD_INT 0
59174: PPUSH
59175: CALL_OW 1
59179: ST_TO_ADDR
59180: GO 59154
59182: POP
59183: POP
// end else
59184: GO 59229
// begin for i := 1 to 8 do
59186: LD_ADDR_VAR 0 1
59190: PUSH
59191: DOUBLE
59192: LD_INT 1
59194: DEC
59195: ST_TO_ADDR
59196: LD_INT 8
59198: PUSH
59199: FOR_TO
59200: IFFALSE 59227
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59202: LD_ADDR_EXP 58
59206: PUSH
59207: LD_EXP 58
59211: PPUSH
59212: LD_VAR 0 1
59216: PPUSH
59217: LD_INT 0
59219: PPUSH
59220: CALL_OW 1
59224: ST_TO_ADDR
59225: GO 59199
59227: POP
59228: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59229: LD_ADDR_VAR 0 3
59233: PUSH
59234: LD_EXP 2
59238: PPUSH
59239: LD_INT 0
59241: PPUSH
59242: CALL_OW 517
59246: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59247: LD_ADDR_VAR 0 1
59251: PUSH
59252: DOUBLE
59253: LD_INT 1
59255: DEC
59256: ST_TO_ADDR
59257: LD_VAR 0 3
59261: PUSH
59262: LD_INT 1
59264: ARRAY
59265: PUSH
59266: FOR_TO
59267: IFFALSE 59334
// for j := 1 to 8 do
59269: LD_ADDR_VAR 0 2
59273: PUSH
59274: DOUBLE
59275: LD_INT 1
59277: DEC
59278: ST_TO_ADDR
59279: LD_INT 8
59281: PUSH
59282: FOR_TO
59283: IFFALSE 59330
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59285: LD_VAR 0 3
59289: PUSH
59290: LD_INT 1
59292: ARRAY
59293: PUSH
59294: LD_VAR 0 1
59298: ARRAY
59299: PPUSH
59300: LD_VAR 0 3
59304: PUSH
59305: LD_INT 2
59307: ARRAY
59308: PUSH
59309: LD_VAR 0 1
59313: ARRAY
59314: PPUSH
59315: LD_VAR 0 2
59319: PPUSH
59320: LD_INT 12
59322: NEG
59323: PPUSH
59324: CALL_OW 330
59328: GO 59282
59330: POP
59331: POP
59332: GO 59266
59334: POP
59335: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59336: LD_EXP 34
59340: PPUSH
59341: LD_INT 1
59343: PPUSH
59344: CALL_OW 424
// UpdateCounter ;
59348: CALL 59958 0 0
// repeat wait ( 0 0$1 ) ;
59352: LD_INT 35
59354: PPUSH
59355: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59359: LD_ADDR_VAR 0 3
59363: PUSH
59364: LD_EXP 34
59368: PPUSH
59369: LD_INT 3
59371: PUSH
59372: LD_INT 57
59374: PUSH
59375: EMPTY
59376: LIST
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 50
59384: PUSH
59385: EMPTY
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: LD_INT 30
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 30
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: LIST
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: PPUSH
59421: CALL_OW 70
59425: ST_TO_ADDR
// if not tmp then
59426: LD_VAR 0 3
59430: NOT
59431: IFFALSE 59435
// continue ;
59433: GO 59352
// AddPoints ( tmp ) ;
59435: LD_VAR 0 3
59439: PPUSH
59440: CALL 59636 0 1
// UpdateCounter ;
59444: CALL 59958 0 0
// until false ;
59448: LD_INT 0
59450: IFFALSE 59352
// end ;
59452: PPOPN 3
59454: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59455: LD_EXP 39
59459: IFFALSE 59467
59461: PUSH
59462: LD_EXP 37
59466: AND
59467: IFFALSE 59633
59469: GO 59471
59471: DISABLE
59472: LD_INT 0
59474: PPUSH
59475: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59476: LD_ADDR_VAR 0 2
59480: PUSH
59481: LD_EXP 2
59485: PPUSH
59486: LD_INT 0
59488: PPUSH
59489: CALL_OW 517
59493: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59494: LD_ADDR_VAR 0 1
59498: PUSH
59499: DOUBLE
59500: LD_INT 1
59502: DEC
59503: ST_TO_ADDR
59504: LD_VAR 0 2
59508: PUSH
59509: LD_INT 1
59511: ARRAY
59512: PUSH
59513: FOR_TO
59514: IFFALSE 59555
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59516: LD_VAR 0 2
59520: PUSH
59521: LD_INT 1
59523: ARRAY
59524: PUSH
59525: LD_VAR 0 1
59529: ARRAY
59530: PPUSH
59531: LD_VAR 0 2
59535: PUSH
59536: LD_INT 2
59538: ARRAY
59539: PUSH
59540: LD_VAR 0 1
59544: ARRAY
59545: PPUSH
59546: LD_INT 125
59548: PPUSH
59549: CALL_OW 495
59553: GO 59513
59555: POP
59556: POP
// repeat wait ( mpEmissions ) ;
59557: LD_EXP 37
59561: PPUSH
59562: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59566: LD_ADDR_VAR 0 1
59570: PUSH
59571: DOUBLE
59572: LD_INT 1
59574: DEC
59575: ST_TO_ADDR
59576: LD_VAR 0 2
59580: PUSH
59581: LD_INT 1
59583: ARRAY
59584: PUSH
59585: FOR_TO
59586: IFFALSE 59627
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59588: LD_VAR 0 2
59592: PUSH
59593: LD_INT 1
59595: ARRAY
59596: PUSH
59597: LD_VAR 0 1
59601: ARRAY
59602: PPUSH
59603: LD_VAR 0 2
59607: PUSH
59608: LD_INT 2
59610: ARRAY
59611: PUSH
59612: LD_VAR 0 1
59616: ARRAY
59617: PPUSH
59618: LD_INT 15
59620: PPUSH
59621: CALL_OW 495
59625: GO 59585
59627: POP
59628: POP
// until false ;
59629: LD_INT 0
59631: IFFALSE 59557
// end ;
59633: PPOPN 2
59635: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
59640: PPUSH
59641: PPUSH
59642: PPUSH
// if mpTeamGame then
59643: LD_EXP 11
59647: IFFALSE 59844
// begin first := depots [ 1 ] ;
59649: LD_ADDR_VAR 0 4
59653: PUSH
59654: LD_VAR 0 1
59658: PUSH
59659: LD_INT 1
59661: ARRAY
59662: ST_TO_ADDR
// side := GetSide ( first ) ;
59663: LD_ADDR_VAR 0 6
59667: PUSH
59668: LD_VAR 0 4
59672: PPUSH
59673: CALL_OW 255
59677: ST_TO_ADDR
// for i := 1 to mpTeams do
59678: LD_ADDR_VAR 0 3
59682: PUSH
59683: DOUBLE
59684: LD_INT 1
59686: DEC
59687: ST_TO_ADDR
59688: LD_EXP 10
59692: PUSH
59693: FOR_TO
59694: IFFALSE 59728
// if side in mpTeams [ i ] then
59696: LD_VAR 0 6
59700: PUSH
59701: LD_EXP 10
59705: PUSH
59706: LD_VAR 0 3
59710: ARRAY
59711: IN
59712: IFFALSE 59726
// begin team := i ;
59714: LD_ADDR_VAR 0 5
59718: PUSH
59719: LD_VAR 0 3
59723: ST_TO_ADDR
// break ;
59724: GO 59728
// end ;
59726: GO 59693
59728: POP
59729: POP
// if not team then
59730: LD_VAR 0 5
59734: NOT
59735: IFFALSE 59739
// exit ;
59737: GO 59953
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59739: LD_EXP 34
59743: PPUSH
59744: LD_INT 81
59746: PUSH
59747: LD_VAR 0 6
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PPUSH
59756: CALL_OW 70
59760: IFFALSE 59764
// exit ;
59762: GO 59953
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59764: LD_ADDR_EXP 58
59768: PUSH
59769: LD_EXP 58
59773: PPUSH
59774: LD_VAR 0 5
59778: PPUSH
59779: LD_EXP 58
59783: PUSH
59784: LD_VAR 0 5
59788: ARRAY
59789: PUSH
59790: LD_INT 1
59792: PLUS
59793: PPUSH
59794: CALL_OW 1
59798: ST_TO_ADDR
// for i in mpTeams [ team ] do
59799: LD_ADDR_VAR 0 3
59803: PUSH
59804: LD_EXP 10
59808: PUSH
59809: LD_VAR 0 5
59813: ARRAY
59814: PUSH
59815: FOR_IN
59816: IFFALSE 59840
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59818: LD_VAR 0 3
59822: PPUSH
59823: LD_EXP 58
59827: PUSH
59828: LD_VAR 0 5
59832: ARRAY
59833: PPUSH
59834: CALL_OW 506
59838: GO 59815
59840: POP
59841: POP
// end else
59842: GO 59953
// begin first := depots [ 1 ] ;
59844: LD_ADDR_VAR 0 4
59848: PUSH
59849: LD_VAR 0 1
59853: PUSH
59854: LD_INT 1
59856: ARRAY
59857: ST_TO_ADDR
// side := GetSide ( first ) ;
59858: LD_ADDR_VAR 0 6
59862: PUSH
59863: LD_VAR 0 4
59867: PPUSH
59868: CALL_OW 255
59872: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59873: LD_EXP 34
59877: PPUSH
59878: LD_INT 81
59880: PUSH
59881: LD_VAR 0 6
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PPUSH
59890: CALL_OW 70
59894: IFFALSE 59898
// exit ;
59896: GO 59953
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59898: LD_ADDR_EXP 58
59902: PUSH
59903: LD_EXP 58
59907: PPUSH
59908: LD_VAR 0 6
59912: PPUSH
59913: LD_EXP 58
59917: PUSH
59918: LD_VAR 0 6
59922: ARRAY
59923: PUSH
59924: LD_INT 1
59926: PLUS
59927: PPUSH
59928: CALL_OW 1
59932: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59933: LD_VAR 0 6
59937: PPUSH
59938: LD_EXP 58
59942: PUSH
59943: LD_VAR 0 6
59947: ARRAY
59948: PPUSH
59949: CALL_OW 506
// end ; end ;
59953: LD_VAR 0 2
59957: RET
// function UpdateCounter ; var i ; begin
59958: LD_INT 0
59960: PPUSH
59961: PPUSH
// result := [ ] ;
59962: LD_ADDR_VAR 0 1
59966: PUSH
59967: EMPTY
59968: ST_TO_ADDR
// if mpTeamGame then
59969: LD_EXP 11
59973: IFFALSE 60040
// begin for i := 1 to mpTeams do
59975: LD_ADDR_VAR 0 2
59979: PUSH
59980: DOUBLE
59981: LD_INT 1
59983: DEC
59984: ST_TO_ADDR
59985: LD_EXP 10
59989: PUSH
59990: FOR_TO
59991: IFFALSE 60036
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59993: LD_ADDR_VAR 0 1
59997: PUSH
59998: LD_VAR 0 1
60002: PUSH
60003: LD_STRING #KingoftheHill-Team
60005: PUSH
60006: LD_VAR 0 2
60010: PUSH
60011: LD_EXP 58
60015: PUSH
60016: LD_VAR 0 2
60020: ARRAY
60021: PUSH
60022: LD_EXP 35
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: ADD
60033: ST_TO_ADDR
60034: GO 59990
60036: POP
60037: POP
// end else
60038: GO 60113
// begin for i := 1 to 8 do
60040: LD_ADDR_VAR 0 2
60044: PUSH
60045: DOUBLE
60046: LD_INT 1
60048: DEC
60049: ST_TO_ADDR
60050: LD_INT 8
60052: PUSH
60053: FOR_TO
60054: IFFALSE 60111
// if mpSidePositions [ i ] then
60056: LD_EXP 7
60060: PUSH
60061: LD_VAR 0 2
60065: ARRAY
60066: IFFALSE 60109
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60068: LD_ADDR_VAR 0 1
60072: PUSH
60073: LD_VAR 0 1
60077: PUSH
60078: LD_STRING #KingoftheHill-Player
60080: PUSH
60081: LD_VAR 0 2
60085: PUSH
60086: LD_EXP 58
60090: PUSH
60091: LD_VAR 0 2
60095: ARRAY
60096: PUSH
60097: LD_EXP 35
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: ADD
60108: ST_TO_ADDR
60109: GO 60053
60111: POP
60112: POP
// end ; mpDisplayStrings := result ;
60113: LD_ADDR_EXP 38
60117: PUSH
60118: LD_VAR 0 1
60122: ST_TO_ADDR
// end ;
60123: LD_VAR 0 1
60127: RET
// export function HowMuchPointsKing ( side ) ; begin
60128: LD_INT 0
60130: PPUSH
// result := HowMuchPoints ( side ) ;
60131: LD_ADDR_VAR 0 2
60135: PUSH
60136: LD_VAR 0 1
60140: PPUSH
60141: CALL 60151 0 1
60145: ST_TO_ADDR
// end ;
60146: LD_VAR 0 2
60150: RET
// function HowMuchPoints ( side ) ; var i ; begin
60151: LD_INT 0
60153: PPUSH
60154: PPUSH
// if mpTeamGame then
60155: LD_EXP 11
60159: IFFALSE 60228
// begin for i := 1 to Count ( mpTeams ) do
60161: LD_ADDR_VAR 0 3
60165: PUSH
60166: DOUBLE
60167: LD_INT 1
60169: DEC
60170: ST_TO_ADDR
60171: LD_EXP 10
60175: PPUSH
60176: CALL 12232 0 1
60180: PUSH
60181: FOR_TO
60182: IFFALSE 60224
// begin if side in mpTeams [ i ] then
60184: LD_VAR 0 1
60188: PUSH
60189: LD_EXP 10
60193: PUSH
60194: LD_VAR 0 3
60198: ARRAY
60199: IN
60200: IFFALSE 60222
// begin result := mpKingPoints [ i ] ;
60202: LD_ADDR_VAR 0 2
60206: PUSH
60207: LD_EXP 58
60211: PUSH
60212: LD_VAR 0 3
60216: ARRAY
60217: ST_TO_ADDR
// exit ;
60218: POP
60219: POP
60220: GO 60244
// end ; end ;
60222: GO 60181
60224: POP
60225: POP
// end else
60226: GO 60244
// result := mpKingPoints [ side ] ;
60228: LD_ADDR_VAR 0 2
60232: PUSH
60233: LD_EXP 58
60237: PUSH
60238: LD_VAR 0 1
60242: ARRAY
60243: ST_TO_ADDR
// end ;
60244: LD_VAR 0 2
60248: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60249: LD_EXP 39
60253: IFFALSE 60261
60255: PUSH
60256: CALL 60596 0 0
60260: AND
60261: IFFALSE 60269
60263: PUSH
60264: LD_OWVAR 4
60268: AND
60269: IFFALSE 60519
60271: GO 60273
60273: DISABLE
60274: LD_INT 0
60276: PPUSH
60277: PPUSH
// begin canWin := false ;
60278: LD_ADDR_VAR 0 2
60282: PUSH
60283: LD_INT 0
60285: ST_TO_ADDR
// if not HasPower ( your_side ) then
60286: LD_OWVAR 2
60290: PPUSH
60291: CALL 60638 0 1
60295: NOT
60296: IFFALSE 60307
// begin Multiplayer_Loose_Message ;
60298: CALL_OW 521
// enable ( mpLose ) ;
60302: LD_INT 102
60304: ENABLE_MARKED
// end else
60305: GO 60519
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
60307: LD_ADDR_VAR 0 2
60311: PUSH
60312: LD_OWVAR 2
60316: PPUSH
60317: CALL 60151 0 1
60321: PUSH
60322: LD_EXP 35
60326: GREATEREQUAL
60327: IFFALSE 60340
60329: PUSH
60330: LD_OWVAR 2
60334: PPUSH
60335: CALL 60638 0 1
60339: AND
60340: IFTRUE 60349
60342: PUSH
60343: CALL 60522 0 0
60347: NOT
60348: OR
60349: ST_TO_ADDR
// for i := 1 to 8 do
60350: LD_ADDR_VAR 0 1
60354: PUSH
60355: DOUBLE
60356: LD_INT 1
60358: DEC
60359: ST_TO_ADDR
60360: LD_INT 8
60362: PUSH
60363: FOR_TO
60364: IFFALSE 60505
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60366: LD_EXP 7
60370: PUSH
60371: LD_VAR 0 1
60375: ARRAY
60376: IFFALSE 60389
60378: PUSH
60379: LD_VAR 0 1
60383: PPUSH
60384: CALL_OW 108
60388: AND
60389: IFFALSE 60403
60391: PUSH
60392: LD_VAR 0 1
60396: PUSH
60397: LD_OWVAR 2
60401: NONEQUAL
60402: AND
60403: IFFALSE 60503
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60405: LD_EXP 8
60409: PUSH
60410: LD_VAR 0 1
60414: ARRAY
60415: NOT
60416: IFTRUE 60464
60418: PUSH
60419: LD_EXP 8
60423: PUSH
60424: LD_VAR 0 1
60428: ARRAY
60429: PUSH
60430: LD_EXP 8
60434: PUSH
60435: LD_OWVAR 2
60439: ARRAY
60440: NONEQUAL
60441: IFFALSE 60463
60443: PUSH
60444: LD_OWVAR 2
60448: PPUSH
60449: LD_VAR 0 1
60453: PPUSH
60454: CALL_OW 81
60458: PUSH
60459: LD_INT 1
60461: NONEQUAL
60462: AND
60463: OR
60464: IFFALSE 60503
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60466: LD_VAR 0 1
60470: PPUSH
60471: CALL 60151 0 1
60475: PUSH
60476: LD_EXP 35
60480: GREATEREQUAL
60481: IFFALSE 60494
60483: PUSH
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL 60638 0 1
60493: AND
60494: IFFALSE 60503
// begin enable ( mpLose ) ;
60496: LD_INT 102
60498: ENABLE_MARKED
// exit ;
60499: POP
60500: POP
60501: GO 60519
// end ;
60503: GO 60363
60505: POP
60506: POP
// if canWin then
60507: LD_VAR 0 2
60511: IFFALSE 60518
// enable ( mpWin ) else
60513: LD_INT 101
60515: ENABLE_MARKED
60516: GO 60519
// enable ;
60518: ENABLE
// end ; end ;
60519: PPOPN 2
60521: END
// function EnemiesInGame ; var i ; begin
60522: LD_INT 0
60524: PPUSH
60525: PPUSH
// result := false ;
60526: LD_ADDR_VAR 0 1
60530: PUSH
60531: LD_INT 0
60533: ST_TO_ADDR
// for i := 1 to 8 do
60534: LD_ADDR_VAR 0 2
60538: PUSH
60539: DOUBLE
60540: LD_INT 1
60542: DEC
60543: ST_TO_ADDR
60544: LD_INT 8
60546: PUSH
60547: FOR_TO
60548: IFFALSE 60589
// if i <> your_side and HasPower ( i ) then
60550: LD_VAR 0 2
60554: PUSH
60555: LD_OWVAR 2
60559: NONEQUAL
60560: IFFALSE 60573
60562: PUSH
60563: LD_VAR 0 2
60567: PPUSH
60568: CALL 60638 0 1
60572: AND
60573: IFFALSE 60587
// begin result := true ;
60575: LD_ADDR_VAR 0 1
60579: PUSH
60580: LD_INT 1
60582: ST_TO_ADDR
// exit ;
60583: POP
60584: POP
60585: GO 60591
// end ;
60587: GO 60547
60589: POP
60590: POP
// end ;
60591: LD_VAR 0 1
60595: RET
// function CanWinLoose ; begin
60596: LD_INT 0
60598: PPUSH
// result := true ;
60599: LD_ADDR_VAR 0 1
60603: PUSH
60604: LD_INT 1
60606: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60607: CALL_OW 531
60611: IFFALSE 60623
60613: PUSH
60614: CALL_OW 519
60618: PUSH
60619: LD_INT 1
60621: GREATER
60622: AND
60623: IFFALSE 60633
// result := false ;
60625: LD_ADDR_VAR 0 1
60629: PUSH
60630: LD_INT 0
60632: ST_TO_ADDR
// end ;
60633: LD_VAR 0 1
60637: RET
// function HasPower ( i ) ; begin
60638: LD_INT 0
60640: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60641: LD_ADDR_VAR 0 2
60645: PUSH
60646: LD_INT 22
60648: PUSH
60649: LD_VAR 0 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: LD_INT 21
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 33
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 33
60683: PUSH
60684: LD_INT 5
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PPUSH
60701: CALL_OW 69
60705: ST_TO_ADDR
// end ; end_of_file
60706: LD_VAR 0 2
60710: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60711: PPOPN 6
60713: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60714: LD_EXP 3
60718: PUSH
60719: LD_INT 4
60721: EQUAL
60722: IFFALSE 60758
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60724: LD_STRING setGameDifficulty(
60726: PUSH
60727: LD_OWVAR 67
60731: STR
60732: PUSH
60733: LD_STRING )
60735: STR
60736: PPUSH
60737: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60741: LD_STRING displayDifficulty(
60743: PUSH
60744: LD_OWVAR 67
60748: STR
60749: PUSH
60750: LD_STRING )
60752: STR
60753: PPUSH
60754: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60758: CALL 60787 0 0
// end ; end_of_file
60762: PPOPN 1
60764: END
// every 0 0$1 do
60765: GO 60767
60767: DISABLE
// begin enable ;
60768: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60769: LD_STRING updateTimer(
60771: PUSH
60772: LD_OWVAR 1
60776: STR
60777: PUSH
60778: LD_STRING );
60780: STR
60781: PPUSH
60782: CALL_OW 559
// end ;
60786: END
// export function SOS_MapStart ( ) ; begin
60787: LD_INT 0
60789: PPUSH
// UpdateFactoryWaypoints ( ) ;
60790: CALL 61721 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60794: CALL 61973 0 0
// ParseMultiDataToLua ( ) ;
60798: CALL 62120 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60802: LD_STRING setSpecLogoNumber(
60804: PUSH
60805: LD_INT 2
60807: STR
60808: PUSH
60809: LD_STRING ,
60811: STR
60812: PUSH
60813: LD_INT 1
60815: STR
60816: PUSH
60817: LD_STRING )
60819: STR
60820: PPUSH
60821: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60825: LD_STRING setSpecLogoNumber(
60827: PUSH
60828: LD_INT 3
60830: STR
60831: PUSH
60832: LD_STRING ,
60834: STR
60835: PUSH
60836: LD_INT 2
60838: STR
60839: PUSH
60840: LD_STRING )
60842: STR
60843: PPUSH
60844: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60848: LD_STRING setSpecLogoNumber(
60850: PUSH
60851: LD_INT 4
60853: STR
60854: PUSH
60855: LD_STRING ,
60857: STR
60858: PUSH
60859: LD_INT 3
60861: STR
60862: PUSH
60863: LD_STRING )
60865: STR
60866: PPUSH
60867: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60871: LD_STRING setSpecLogoNumber(
60873: PUSH
60874: LD_INT 5
60876: STR
60877: PUSH
60878: LD_STRING ,
60880: STR
60881: PUSH
60882: LD_INT 4
60884: STR
60885: PUSH
60886: LD_STRING )
60888: STR
60889: PPUSH
60890: CALL_OW 559
// end ;
60894: LD_VAR 0 1
60898: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60899: LD_INT 0
60901: PPUSH
60902: PPUSH
60903: PPUSH
60904: PPUSH
60905: PPUSH
60906: PPUSH
60907: PPUSH
60908: PPUSH
60909: PPUSH
// for i := 1 to 8 do
60910: LD_ADDR_VAR 0 2
60914: PUSH
60915: DOUBLE
60916: LD_INT 1
60918: DEC
60919: ST_TO_ADDR
60920: LD_INT 8
60922: PUSH
60923: FOR_TO
60924: IFFALSE 61309
// begin if mpSidePositions [ i ] then
60926: LD_EXP 7
60930: PUSH
60931: LD_VAR 0 2
60935: ARRAY
60936: IFFALSE 61307
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60938: LD_ADDR_VAR 0 7
60942: PUSH
60943: LD_INT 22
60945: PUSH
60946: LD_VAR 0 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 21
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PPUSH
60969: CALL_OW 69
60973: PPUSH
60974: CALL 12232 0 1
60978: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60979: LD_ADDR_VAR 0 9
60983: PUSH
60984: LD_INT 22
60986: PUSH
60987: LD_VAR 0 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 30
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 30
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: LIST
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PPUSH
61028: CALL_OW 69
61032: ST_TO_ADDR
// crates := 0 ;
61033: LD_ADDR_VAR 0 4
61037: PUSH
61038: LD_INT 0
61040: ST_TO_ADDR
// oil := 0 ;
61041: LD_ADDR_VAR 0 5
61045: PUSH
61046: LD_INT 0
61048: ST_TO_ADDR
// sib := 0 ;
61049: LD_ADDR_VAR 0 6
61053: PUSH
61054: LD_INT 0
61056: ST_TO_ADDR
// if bases then
61057: LD_VAR 0 9
61061: IFFALSE 61167
// begin for j in bases do
61063: LD_ADDR_VAR 0 3
61067: PUSH
61068: LD_VAR 0 9
61072: PUSH
61073: FOR_IN
61074: IFFALSE 61165
// begin base := GetBase ( j ) ;
61076: LD_ADDR_VAR 0 8
61080: PUSH
61081: LD_VAR 0 3
61085: PPUSH
61086: CALL_OW 274
61090: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61091: LD_ADDR_VAR 0 4
61095: PUSH
61096: LD_VAR 0 4
61100: PUSH
61101: LD_VAR 0 8
61105: PPUSH
61106: LD_INT 1
61108: PPUSH
61109: CALL_OW 275
61113: PLUS
61114: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61115: LD_ADDR_VAR 0 5
61119: PUSH
61120: LD_VAR 0 5
61124: PUSH
61125: LD_VAR 0 8
61129: PPUSH
61130: LD_INT 2
61132: PPUSH
61133: CALL_OW 275
61137: PLUS
61138: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61139: LD_ADDR_VAR 0 6
61143: PUSH
61144: LD_VAR 0 6
61148: PUSH
61149: LD_VAR 0 8
61153: PPUSH
61154: LD_INT 3
61156: PPUSH
61157: CALL_OW 275
61161: PLUS
61162: ST_TO_ADDR
// end ;
61163: GO 61073
61165: POP
61166: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61167: LD_STRING setSpecText(
61169: PUSH
61170: LD_VAR 0 2
61174: STR
61175: PUSH
61176: LD_STRING ,
61178: STR
61179: PUSH
61180: LD_INT 2
61182: STR
61183: PUSH
61184: LD_STRING ,
61186: STR
61187: PUSH
61188: LD_VAR 0 4
61192: STR
61193: PUSH
61194: LD_STRING )
61196: STR
61197: PPUSH
61198: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61202: LD_STRING setSpecText(
61204: PUSH
61205: LD_VAR 0 2
61209: STR
61210: PUSH
61211: LD_STRING ,
61213: STR
61214: PUSH
61215: LD_INT 3
61217: STR
61218: PUSH
61219: LD_STRING ,
61221: STR
61222: PUSH
61223: LD_VAR 0 5
61227: STR
61228: PUSH
61229: LD_STRING )
61231: STR
61232: PPUSH
61233: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61237: LD_STRING setSpecText(
61239: PUSH
61240: LD_VAR 0 2
61244: STR
61245: PUSH
61246: LD_STRING ,
61248: STR
61249: PUSH
61250: LD_INT 4
61252: STR
61253: PUSH
61254: LD_STRING ,
61256: STR
61257: PUSH
61258: LD_VAR 0 6
61262: STR
61263: PUSH
61264: LD_STRING )
61266: STR
61267: PPUSH
61268: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61272: LD_STRING setSpecText(
61274: PUSH
61275: LD_VAR 0 2
61279: STR
61280: PUSH
61281: LD_STRING ,
61283: STR
61284: PUSH
61285: LD_INT 5
61287: STR
61288: PUSH
61289: LD_STRING ,
61291: STR
61292: PUSH
61293: LD_VAR 0 7
61297: STR
61298: PUSH
61299: LD_STRING )
61301: STR
61302: PPUSH
61303: CALL_OW 559
// end ; end ;
61307: GO 60923
61309: POP
61310: POP
// end ;
61311: LD_VAR 0 1
61315: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61316: LD_INT 2
61318: PUSH
61319: LD_INT 30
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 30
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: LIST
61343: PPUSH
61344: CALL_OW 69
61348: IFFALSE 61358
61350: GO 61352
61352: DISABLE
// begin enable ;
61353: ENABLE
// UpdateSpectatorBar ;
61354: CALL 60899 0 0
// end ;
61358: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61359: LD_INT 0
61361: PPUSH
// end ;
61362: LD_VAR 0 12
61366: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61367: LD_INT 0
61369: PPUSH
61370: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61371: LD_VAR 0 1
61375: NOT
61376: IFTRUE 61395
61378: PUSH
61379: LD_VAR 0 2
61383: PPUSH
61384: LD_VAR 0 3
61388: PPUSH
61389: CALL_OW 488
61393: NOT
61394: OR
61395: IFTRUE 61430
61397: PUSH
61398: LD_VAR 0 1
61402: PPUSH
61403: CALL_OW 266
61407: PUSH
61408: LD_INT 3
61410: NONEQUAL
61411: IFFALSE 61429
61413: PUSH
61414: LD_VAR 0 1
61418: PPUSH
61419: CALL_OW 247
61423: PUSH
61424: LD_INT 1
61426: EQUAL
61427: NOT
61428: AND
61429: OR
61430: IFFALSE 61434
// exit ;
61432: GO 61716
// if GetType ( factory ) = unit_human then
61434: LD_VAR 0 1
61438: PPUSH
61439: CALL_OW 247
61443: PUSH
61444: LD_INT 1
61446: EQUAL
61447: IFFALSE 61464
// factory := IsInUnit ( factory ) ;
61449: LD_ADDR_VAR 0 1
61453: PUSH
61454: LD_VAR 0 1
61458: PPUSH
61459: CALL_OW 310
61463: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 266
61473: PUSH
61474: LD_INT 3
61476: NONEQUAL
61477: IFFALSE 61481
// exit ;
61479: GO 61716
// for i := 1 to Count ( factoryWaypoints ) do
61481: LD_ADDR_VAR 0 5
61485: PUSH
61486: DOUBLE
61487: LD_INT 1
61489: DEC
61490: ST_TO_ADDR
61491: LD_EXP 59
61495: PPUSH
61496: CALL 12232 0 1
61500: PUSH
61501: FOR_TO
61502: IFFALSE 61664
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61504: LD_VAR 0 2
61508: PPUSH
61509: LD_VAR 0 3
61513: PPUSH
61514: CALL_OW 428
61518: PUSH
61519: LD_EXP 59
61523: PUSH
61524: LD_VAR 0 5
61528: ARRAY
61529: PUSH
61530: LD_INT 2
61532: ARRAY
61533: EQUAL
61534: IFFALSE 61566
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61536: LD_ADDR_EXP 59
61540: PUSH
61541: LD_EXP 59
61545: PPUSH
61546: LD_VAR 0 5
61550: PPUSH
61551: CALL_OW 3
61555: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61556: CALL 61721 0 0
// exit ;
61560: POP
61561: POP
61562: GO 61716
// end else
61564: GO 61662
// if factory = factoryWaypoints [ i ] [ 2 ] then
61566: LD_VAR 0 1
61570: PUSH
61571: LD_EXP 59
61575: PUSH
61576: LD_VAR 0 5
61580: ARRAY
61581: PUSH
61582: LD_INT 2
61584: ARRAY
61585: EQUAL
61586: IFFALSE 61662
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61588: LD_ADDR_EXP 59
61592: PUSH
61593: LD_EXP 59
61597: PPUSH
61598: LD_VAR 0 5
61602: PPUSH
61603: CALL_OW 3
61607: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61608: LD_ADDR_EXP 59
61612: PUSH
61613: LD_EXP 59
61617: PPUSH
61618: LD_VAR 0 1
61622: PPUSH
61623: CALL_OW 255
61627: PUSH
61628: LD_VAR 0 1
61632: PUSH
61633: LD_VAR 0 2
61637: PUSH
61638: LD_VAR 0 3
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: PPUSH
61649: CALL 48164 0 2
61653: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61654: CALL 61721 0 0
// exit ;
61658: POP
61659: POP
61660: GO 61716
// end ; end ;
61662: GO 61501
61664: POP
61665: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61666: LD_ADDR_EXP 59
61670: PUSH
61671: LD_EXP 59
61675: PPUSH
61676: LD_VAR 0 1
61680: PPUSH
61681: CALL_OW 255
61685: PUSH
61686: LD_VAR 0 1
61690: PUSH
61691: LD_VAR 0 2
61695: PUSH
61696: LD_VAR 0 3
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: PPUSH
61707: CALL 48164 0 2
61711: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61712: CALL 61721 0 0
// end ;
61716: LD_VAR 0 4
61720: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61721: LD_INT 0
61723: PPUSH
61724: PPUSH
61725: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61726: LD_STRING resetFactoryWaypoint();
61728: PPUSH
61729: CALL_OW 559
// if factoryWaypoints then
61733: LD_EXP 59
61737: IFFALSE 61858
// begin list := factoryWaypoints ;
61739: LD_ADDR_VAR 0 3
61743: PUSH
61744: LD_EXP 59
61748: ST_TO_ADDR
// for i := 1 to list do
61749: LD_ADDR_VAR 0 2
61753: PUSH
61754: DOUBLE
61755: LD_INT 1
61757: DEC
61758: ST_TO_ADDR
61759: LD_VAR 0 3
61763: PUSH
61764: FOR_TO
61765: IFFALSE 61856
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61767: LD_STRING setFactoryWaypointXY(
61769: PUSH
61770: LD_VAR 0 3
61774: PUSH
61775: LD_VAR 0 2
61779: ARRAY
61780: PUSH
61781: LD_INT 1
61783: ARRAY
61784: STR
61785: PUSH
61786: LD_STRING ,
61788: STR
61789: PUSH
61790: LD_VAR 0 3
61794: PUSH
61795: LD_VAR 0 2
61799: ARRAY
61800: PUSH
61801: LD_INT 2
61803: ARRAY
61804: STR
61805: PUSH
61806: LD_STRING ,
61808: STR
61809: PUSH
61810: LD_VAR 0 3
61814: PUSH
61815: LD_VAR 0 2
61819: ARRAY
61820: PUSH
61821: LD_INT 3
61823: ARRAY
61824: STR
61825: PUSH
61826: LD_STRING ,
61828: STR
61829: PUSH
61830: LD_VAR 0 3
61834: PUSH
61835: LD_VAR 0 2
61839: ARRAY
61840: PUSH
61841: LD_INT 4
61843: ARRAY
61844: STR
61845: PUSH
61846: LD_STRING )
61848: STR
61849: PPUSH
61850: CALL_OW 559
61854: GO 61764
61856: POP
61857: POP
// end ; end ;
61858: LD_VAR 0 1
61862: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61863: LD_INT 0
61865: PPUSH
// if HexInfo ( x , y ) = warehouse then
61866: LD_VAR 0 2
61870: PPUSH
61871: LD_VAR 0 3
61875: PPUSH
61876: CALL_OW 428
61880: PUSH
61881: LD_VAR 0 1
61885: EQUAL
61886: IFFALSE 61913
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61888: LD_ADDR_EXP 61
61892: PUSH
61893: LD_EXP 61
61897: PPUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: LD_INT 0
61905: PPUSH
61906: CALL_OW 1
61910: ST_TO_ADDR
61911: GO 61964
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61913: LD_ADDR_EXP 61
61917: PUSH
61918: LD_EXP 61
61922: PPUSH
61923: LD_VAR 0 1
61927: PPUSH
61928: LD_VAR 0 1
61932: PPUSH
61933: CALL_OW 255
61937: PUSH
61938: LD_VAR 0 1
61942: PUSH
61943: LD_VAR 0 2
61947: PUSH
61948: LD_VAR 0 3
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: PPUSH
61959: CALL_OW 1
61963: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61964: CALL 61973 0 0
// end ;
61968: LD_VAR 0 4
61972: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61973: LD_INT 0
61975: PPUSH
61976: PPUSH
61977: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61978: LD_STRING resetWarehouseGatheringPoints();
61980: PPUSH
61981: CALL_OW 559
// if warehouseGatheringPoints then
61985: LD_EXP 61
61989: IFFALSE 62115
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: LD_EXP 61
62000: PPUSH
62001: CALL 52098 0 1
62005: ST_TO_ADDR
// for i := 1 to list do
62006: LD_ADDR_VAR 0 2
62010: PUSH
62011: DOUBLE
62012: LD_INT 1
62014: DEC
62015: ST_TO_ADDR
62016: LD_VAR 0 3
62020: PUSH
62021: FOR_TO
62022: IFFALSE 62113
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62024: LD_STRING setWarehouseGatheringPointXY(
62026: PUSH
62027: LD_VAR 0 3
62031: PUSH
62032: LD_VAR 0 2
62036: ARRAY
62037: PUSH
62038: LD_INT 1
62040: ARRAY
62041: STR
62042: PUSH
62043: LD_STRING ,
62045: STR
62046: PUSH
62047: LD_VAR 0 3
62051: PUSH
62052: LD_VAR 0 2
62056: ARRAY
62057: PUSH
62058: LD_INT 2
62060: ARRAY
62061: STR
62062: PUSH
62063: LD_STRING ,
62065: STR
62066: PUSH
62067: LD_VAR 0 3
62071: PUSH
62072: LD_VAR 0 2
62076: ARRAY
62077: PUSH
62078: LD_INT 3
62080: ARRAY
62081: STR
62082: PUSH
62083: LD_STRING ,
62085: STR
62086: PUSH
62087: LD_VAR 0 3
62091: PUSH
62092: LD_VAR 0 2
62096: ARRAY
62097: PUSH
62098: LD_INT 4
62100: ARRAY
62101: STR
62102: PUSH
62103: LD_STRING )
62105: STR
62106: PPUSH
62107: CALL_OW 559
62111: GO 62021
62113: POP
62114: POP
// end ; end ;
62115: LD_VAR 0 1
62119: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62120: LD_INT 0
62122: PPUSH
62123: PPUSH
// if not mpSidePositions then
62124: LD_EXP 7
62128: NOT
62129: IFFALSE 62133
// exit ;
62131: GO 62204
// result :=  ;
62133: LD_ADDR_VAR 0 1
62137: PUSH
62138: LD_STRING 
62140: ST_TO_ADDR
// for i := 1 to 8 do
62141: LD_ADDR_VAR 0 2
62145: PUSH
62146: DOUBLE
62147: LD_INT 1
62149: DEC
62150: ST_TO_ADDR
62151: LD_INT 8
62153: PUSH
62154: FOR_TO
62155: IFFALSE 62185
// begin result := result & mpSidePositions [ i ] & ; ;
62157: LD_ADDR_VAR 0 1
62161: PUSH
62162: LD_VAR 0 1
62166: PUSH
62167: LD_EXP 7
62171: PUSH
62172: LD_VAR 0 2
62176: ARRAY
62177: STR
62178: PUSH
62179: LD_STRING ;
62181: STR
62182: ST_TO_ADDR
// end ;
62183: GO 62154
62185: POP
62186: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62187: LD_STRING setMultiplayerRealPosition("
62189: PUSH
62190: LD_VAR 0 1
62194: STR
62195: PUSH
62196: LD_STRING ");
62198: STR
62199: PPUSH
62200: CALL_OW 559
// end ;
62204: LD_VAR 0 1
62208: RET
