// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9195 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9342 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 36 , 6 ] , [ 103 , 5 ] , [ 163 , 9 ] , [ 200 , 51 ] , [ 54 , 86 ] , [ 134 , 154 ] , [ 177 , 151 ] , [ 239 , 152 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 36
1236: PUSH
1237: LD_INT 6
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 103
1246: PUSH
1247: LD_INT 5
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 163
1256: PUSH
1257: LD_INT 9
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 200
1266: PUSH
1267: LD_INT 51
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 54
1276: PUSH
1277: LD_INT 86
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 134
1286: PUSH
1287: LD_INT 154
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 177
1296: PUSH
1297: LD_INT 151
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 239
1306: PUSH
1307: LD_INT 152
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 54 , 6 ] , [ 62 , 7 ] , [ 186 , 17 ] , [ 219 , 87 ] , [ 83 , 131 ] , [ 114 , 153 ] , [ 214 , 156 ] , [ 221 , 109 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 54
1331: PUSH
1332: LD_INT 6
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 62
1341: PUSH
1342: LD_INT 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 186
1351: PUSH
1352: LD_INT 17
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 219
1361: PUSH
1362: LD_INT 87
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 83
1371: PUSH
1372: LD_INT 131
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 114
1381: PUSH
1382: LD_INT 153
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 214
1391: PUSH
1392: LD_INT 156
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 221
1401: PUSH
1402: LD_INT 109
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 26 , 32 ] , [ 115 , 31 ] , [ 142 , 28 ] , [ 175 , 54 ] , [ 84 , 100 ] , [ 133 , 122 ] , [ 161 , 122 ] , [ 214 , 121 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 26
1426: PUSH
1427: LD_INT 32
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 115
1436: PUSH
1437: LD_INT 31
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 142
1446: PUSH
1447: LD_INT 28
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 175
1456: PUSH
1457: LD_INT 54
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 84
1466: PUSH
1467: LD_INT 100
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 133
1476: PUSH
1477: LD_INT 122
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 161
1486: PUSH
1487: LD_INT 122
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 214
1496: PUSH
1497: LD_INT 121
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 57 , 13 ] , [ 72 , 27 ] , [ 125 , 14 ] , [ 216 , 85 ] , [ 86 , 130 ] , [ 110 , 147 ] , [ 213 , 149 ] , [ 226 , 110 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 57
1521: PUSH
1522: LD_INT 13
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 72
1531: PUSH
1532: LD_INT 27
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 125
1541: PUSH
1542: LD_INT 14
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 216
1551: PUSH
1552: LD_INT 85
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 86
1561: PUSH
1562: LD_INT 130
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 110
1571: PUSH
1572: LD_INT 147
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 213
1581: PUSH
1582: LD_INT 149
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 226
1591: PUSH
1592: LD_INT 110
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 32 , 17 , 2 ] , [ 95 , 16 , 3 ] , [ 154 , 14 , 3 ] , [ 188 , 54 , 4 ] , [ 65 , 97 , 1 ] , [ 136 , 144 , 5 ] , [ 182 , 145 , 0 ] , [ 234 , 140 , 5 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 32
1616: PUSH
1617: LD_INT 17
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 95
1630: PUSH
1631: LD_INT 16
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 154
1644: PUSH
1645: LD_INT 14
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 188
1658: PUSH
1659: LD_INT 54
1661: PUSH
1662: LD_INT 4
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 65
1672: PUSH
1673: LD_INT 97
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 136
1686: PUSH
1687: LD_INT 144
1689: PUSH
1690: LD_INT 5
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 182
1700: PUSH
1701: LD_INT 145
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 234
1714: PUSH
1715: LD_INT 140
1717: PUSH
1718: LD_INT 5
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 54 , 30 , 5 ] , [ 21 , 30 , 0 ] , [ 41 , 33 , 5 ] ] , [ [ 113 , 34 , 5 ] , [ 97 , 35 , 0 ] , [ 82 , 27 , 0 ] ] , [ [ 165 , 32 , 5 ] , [ 150 , 33 , 0 ] , [ 134 , 19 , 0 ] ] , [ [ 196 , 75 , 0 ] , [ 179 , 66 , 0 ] , [ 171 , 48 , 1 ] ] , [ [ 69 , 82 , 3 ] , [ 82 , 93 , 4 ] , [ 90 , 110 , 4 ] ] , [ [ 114 , 130 , 2 ] , [ 123 , 123 , 2 ] , [ 140 , 125 , 3 ] ] , [ [ 187 , 125 , 2 ] , [ 176 , 123 , 2 ] , [ 166 , 125 , 3 ] ] , [ [ 213 , 128 , 2 ] , [ 222 , 122 , 2 ] , [ 234 , 121 , 2 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 54
1832: PUSH
1833: LD_INT 30
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 21
1846: PUSH
1847: LD_INT 30
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 41
1860: PUSH
1861: LD_INT 33
1863: PUSH
1864: LD_INT 5
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 113
1879: PUSH
1880: LD_INT 34
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 97
1893: PUSH
1894: LD_INT 35
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 82
1907: PUSH
1908: LD_INT 27
1910: PUSH
1911: LD_INT 0
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 165
1926: PUSH
1927: LD_INT 32
1929: PUSH
1930: LD_INT 5
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 150
1940: PUSH
1941: LD_INT 33
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 134
1954: PUSH
1955: LD_INT 19
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 196
1973: PUSH
1974: LD_INT 75
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 179
1987: PUSH
1988: LD_INT 66
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 171
2001: PUSH
2002: LD_INT 48
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 69
2020: PUSH
2021: LD_INT 82
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 82
2034: PUSH
2035: LD_INT 93
2037: PUSH
2038: LD_INT 4
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 90
2048: PUSH
2049: LD_INT 110
2051: PUSH
2052: LD_INT 4
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 114
2067: PUSH
2068: LD_INT 130
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 123
2081: PUSH
2082: LD_INT 123
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 140
2095: PUSH
2096: LD_INT 125
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 187
2114: PUSH
2115: LD_INT 125
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 176
2128: PUSH
2129: LD_INT 123
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 166
2142: PUSH
2143: LD_INT 125
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 213
2161: PUSH
2162: LD_INT 128
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 222
2175: PUSH
2176: LD_INT 122
2178: PUSH
2179: LD_INT 2
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 234
2189: PUSH
2190: LD_INT 121
2192: PUSH
2193: LD_INT 2
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 13919 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 7900 0 0
// ShowTimer ;
4837: CALL 7478 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 6008 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 9
4942: PUSH
4943: LD_INT 10
4945: PUSH
4946: LD_INT 11
4948: PUSH
4949: LD_INT 12
4951: PUSH
4952: LD_INT 13
4954: PUSH
4955: LD_INT 14
4957: PUSH
4958: LD_INT 15
4960: PUSH
4961: LD_INT 16
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 14413 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do
5077: GO 5079
5079: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5080: LD_INT 20
5082: PPUSH
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 287
5090: PUSH
5091: LD_INT 200
5093: PUSH
5094: LD_EXP 23
5098: MINUS
5099: PUSH
5100: LD_INT 50
5102: DIVREAL
5103: PUSH
5104: LD_INT 5
5106: MUL
5107: LESS
5108: IFFALSE 5131
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5110: LD_INT 3
5112: PPUSH
5113: LD_INT 4
5115: PPUSH
5116: CALL_OW 12
5120: PPUSH
5121: LD_INT 20
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5131: LD_INT 21
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5182
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_INT 21
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5182: LD_INT 22
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 287
5192: PUSH
5193: LD_INT 200
5195: PUSH
5196: LD_EXP 23
5200: MINUS
5201: PUSH
5202: LD_INT 50
5204: DIVREAL
5205: PUSH
5206: LD_INT 5
5208: MUL
5209: LESS
5210: IFFALSE 5233
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5212: LD_INT 3
5214: PPUSH
5215: LD_INT 4
5217: PPUSH
5218: CALL_OW 12
5222: PPUSH
5223: LD_INT 22
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5233: LD_INT 23
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 287
5243: PUSH
5244: LD_INT 200
5246: PUSH
5247: LD_EXP 23
5251: MINUS
5252: PUSH
5253: LD_INT 50
5255: DIVREAL
5256: PUSH
5257: LD_INT 5
5259: MUL
5260: LESS
5261: IFFALSE 5284
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5263: LD_INT 3
5265: PPUSH
5266: LD_INT 4
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: LD_INT 23
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5284: LD_INT 18
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 287
5294: PUSH
5295: LD_INT 200
5297: PUSH
5298: LD_EXP 23
5302: MINUS
5303: PUSH
5304: LD_INT 25
5306: DIVREAL
5307: PUSH
5308: LD_INT 5
5310: MUL
5311: LESS
5312: IFFALSE 5327
// CreateCratesArea ( 5 , Center1 , true ) ;
5314: LD_INT 5
5316: PPUSH
5317: LD_INT 18
5319: PPUSH
5320: LD_INT 1
5322: PPUSH
5323: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5327: LD_INT 19
5329: PPUSH
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 287
5337: PUSH
5338: LD_INT 200
5340: PUSH
5341: LD_EXP 23
5345: MINUS
5346: PUSH
5347: LD_INT 25
5349: DIVREAL
5350: PUSH
5351: LD_INT 5
5353: MUL
5354: LESS
5355: IFFALSE 5370
// CreateCratesArea ( 5 , Center2 , true ) ;
5357: LD_INT 5
5359: PPUSH
5360: LD_INT 19
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 55
// enable ;
5370: ENABLE
// end ;
5371: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5372: GO 5374
5374: DISABLE
5375: LD_INT 0
5377: PPUSH
5378: PPUSH
// begin case tick of 1 .. 1 1$0 :
5379: LD_OWVAR 1
5383: PUSH
5384: LD_INT 1
5386: DOUBLE
5387: GREATEREQUAL
5388: IFFALSE 5396
5390: LD_INT 2100
5392: DOUBLE
5393: LESSEQUAL
5394: IFTRUE 5398
5396: GO 5426
5398: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5399: LD_EXP 23
5403: PUSH
5404: LD_INT 100
5406: DIVREAL
5407: PUSH
5408: LD_INT 525
5410: PPUSH
5411: LD_INT 1050
5413: PPUSH
5414: CALL_OW 12
5418: MUL
5419: PPUSH
5420: CALL_OW 67
5424: GO 5728
5426: LD_INT 2100
5428: PUSH
5429: LD_INT 1
5431: PLUS
5432: DOUBLE
5433: GREATEREQUAL
5434: IFFALSE 5442
5436: LD_INT 10500
5438: DOUBLE
5439: LESSEQUAL
5440: IFTRUE 5444
5442: GO 5472
5444: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5445: LD_EXP 23
5449: PUSH
5450: LD_INT 100
5452: DIVREAL
5453: PUSH
5454: LD_INT 1050
5456: PPUSH
5457: LD_INT 1750
5459: PPUSH
5460: CALL_OW 12
5464: MUL
5465: PPUSH
5466: CALL_OW 67
5470: GO 5728
5472: LD_INT 10500
5474: PUSH
5475: LD_INT 1
5477: PLUS
5478: DOUBLE
5479: GREATEREQUAL
5480: IFFALSE 5488
5482: LD_INT 21000
5484: DOUBLE
5485: LESSEQUAL
5486: IFTRUE 5490
5488: GO 5518
5490: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5491: LD_EXP 23
5495: PUSH
5496: LD_INT 100
5498: DIVREAL
5499: PUSH
5500: LD_INT 1750
5502: PPUSH
5503: LD_INT 2100
5505: PPUSH
5506: CALL_OW 12
5510: MUL
5511: PPUSH
5512: CALL_OW 67
5516: GO 5728
5518: LD_INT 21000
5520: PUSH
5521: LD_INT 1
5523: PLUS
5524: DOUBLE
5525: GREATEREQUAL
5526: IFFALSE 5534
5528: LD_INT 42000
5530: DOUBLE
5531: LESSEQUAL
5532: IFTRUE 5536
5534: GO 5564
5536: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5537: LD_EXP 23
5541: PUSH
5542: LD_INT 100
5544: DIVREAL
5545: PUSH
5546: LD_INT 2100
5548: PPUSH
5549: LD_INT 2275
5551: PPUSH
5552: CALL_OW 12
5556: MUL
5557: PPUSH
5558: CALL_OW 67
5562: GO 5728
5564: LD_INT 42000
5566: PUSH
5567: LD_INT 1
5569: PLUS
5570: DOUBLE
5571: GREATEREQUAL
5572: IFFALSE 5580
5574: LD_INT 63000
5576: DOUBLE
5577: LESSEQUAL
5578: IFTRUE 5582
5580: GO 5610
5582: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5583: LD_EXP 23
5587: PUSH
5588: LD_INT 100
5590: DIVREAL
5591: PUSH
5592: LD_INT 2275
5594: PPUSH
5595: LD_INT 2450
5597: PPUSH
5598: CALL_OW 12
5602: MUL
5603: PPUSH
5604: CALL_OW 67
5608: GO 5728
5610: LD_INT 63000
5612: PUSH
5613: LD_INT 1
5615: PLUS
5616: DOUBLE
5617: GREATEREQUAL
5618: IFFALSE 5626
5620: LD_INT 105000
5622: DOUBLE
5623: LESSEQUAL
5624: IFTRUE 5628
5626: GO 5656
5628: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5629: LD_EXP 23
5633: PUSH
5634: LD_INT 100
5636: DIVREAL
5637: PUSH
5638: LD_INT 2450
5640: PPUSH
5641: LD_INT 2800
5643: PPUSH
5644: CALL_OW 12
5648: MUL
5649: PPUSH
5650: CALL_OW 67
5654: GO 5728
5656: LD_INT 105000
5658: PUSH
5659: LD_INT 1
5661: PLUS
5662: DOUBLE
5663: GREATEREQUAL
5664: IFFALSE 5672
5666: LD_INT 630000
5668: DOUBLE
5669: LESSEQUAL
5670: IFTRUE 5674
5672: GO 5702
5674: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5675: LD_EXP 23
5679: PUSH
5680: LD_INT 100
5682: DIVREAL
5683: PUSH
5684: LD_INT 2800
5686: PPUSH
5687: LD_INT 3500
5689: PPUSH
5690: CALL_OW 12
5694: MUL
5695: PPUSH
5696: CALL_OW 67
5700: GO 5728
5702: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5703: LD_EXP 23
5707: PUSH
5708: LD_INT 100
5710: DIVREAL
5711: PUSH
5712: LD_INT 3500
5714: PPUSH
5715: LD_INT 3850
5717: PPUSH
5718: CALL_OW 12
5722: MUL
5723: PPUSH
5724: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: LD_INT 3
5735: PPUSH
5736: LD_INT 5
5738: PPUSH
5739: CALL_OW 12
5743: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5744: LD_ADDR_VAR 0 1
5748: PUSH
5749: LD_EXP 34
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: EMPTY
5758: LIST
5759: DIFF
5760: PUSH
5761: FOR_IN
5762: IFFALSE 5811
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_EXP 39
5773: PUSH
5774: LD_VAR 0 1
5778: ARRAY
5779: PUSH
5780: LD_INT 1
5782: ARRAY
5783: PPUSH
5784: LD_EXP 39
5788: PUSH
5789: LD_VAR 0 1
5793: ARRAY
5794: PUSH
5795: LD_INT 2
5797: ARRAY
5798: PPUSH
5799: LD_INT 20
5801: PPUSH
5802: LD_INT 1
5804: PPUSH
5805: CALL_OW 56
5809: GO 5761
5811: POP
5812: POP
// enable ;
5813: ENABLE
// end ; end_of_file
5814: PPOPN 2
5816: END
// every 20 20$00 trigger apemanNumber do
5817: LD_EXP 46
5821: IFFALSE 5854
5823: GO 5825
5825: DISABLE
// begin enable ;
5826: ENABLE
// if apeLevel >= 8 then
5827: LD_EXP 51
5831: PUSH
5832: LD_INT 8
5834: GREATEREQUAL
5835: IFFALSE 5840
// disable else
5837: DISABLE
5838: GO 5854
// apeLevel := apeLevel + 1 ;
5840: LD_ADDR_EXP 51
5844: PUSH
5845: LD_EXP 51
5849: PUSH
5850: LD_INT 1
5852: PLUS
5853: ST_TO_ADDR
// end ;
5854: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5855: LD_EXP 46
5859: PUSH
5860: LD_EXP 47
5864: LESS
5865: IFFALSE 6005
5867: GO 5869
5869: DISABLE
5870: LD_INT 0
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
// begin enable ;
5876: ENABLE
// for i := 1 to apemanPos do
5877: LD_ADDR_VAR 0 1
5881: PUSH
5882: DOUBLE
5883: LD_INT 1
5885: DEC
5886: ST_TO_ADDR
5887: LD_EXP 49
5891: PUSH
5892: FOR_TO
5893: IFFALSE 6003
// begin if apemanPlayerCount [ i ] then
5895: LD_EXP 50
5899: PUSH
5900: LD_VAR 0 1
5904: ARRAY
5905: IFFALSE 6001
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5907: LD_EXP 50
5911: PUSH
5912: LD_VAR 0 1
5916: ARRAY
5917: PUSH
5918: LD_EXP 49
5922: PUSH
5923: LD_VAR 0 1
5927: ARRAY
5928: GREATER
5929: IFFALSE 6001
// begin ape := PrepareApeman ;
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: CALL 6524 0 0
5940: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_EXP 52
5950: PUSH
5951: LD_VAR 0 1
5955: ARRAY
5956: PPUSH
5957: LD_INT 0
5959: PPUSH
5960: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5964: LD_ADDR_EXP 49
5968: PUSH
5969: LD_EXP 49
5973: PPUSH
5974: LD_VAR 0 1
5978: PPUSH
5979: LD_EXP 49
5983: PUSH
5984: LD_VAR 0 1
5988: ARRAY
5989: PUSH
5990: LD_VAR 0 2
5994: UNION
5995: PPUSH
5996: CALL_OW 1
6000: ST_TO_ADDR
// end ; end ; end ;
6001: GO 5892
6003: POP
6004: POP
// end ;
6005: PPOPN 4
6007: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
// playersAmount := 0 ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 0
6024: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: LD_INT 2
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: LD_INT 4
6041: PUSH
6042: LD_INT 5
6044: PUSH
6045: LD_INT 6
6047: PUSH
6048: LD_INT 7
6050: PUSH
6051: LD_INT 8
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6064: LD_ADDR_EXP 52
6068: PUSH
6069: LD_INT 0
6071: PUSH
6072: LD_INT 0
6074: PUSH
6075: LD_INT 0
6077: PUSH
6078: LD_INT 0
6080: PUSH
6081: LD_INT 0
6083: PUSH
6084: LD_INT 0
6086: PUSH
6087: LD_INT 0
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: ST_TO_ADDR
// for j = 1 to Side_Positions do
6103: LD_ADDR_VAR 0 4
6107: PUSH
6108: DOUBLE
6109: LD_INT 1
6111: DEC
6112: ST_TO_ADDR
6113: LD_EXP 34
6117: PUSH
6118: FOR_TO
6119: IFFALSE 6186
// if Side_Positions [ j ] then
6121: LD_EXP 34
6125: PUSH
6126: LD_VAR 0 4
6130: ARRAY
6131: IFFALSE 6184
// begin playersAmount := playersAmount + 1 ;
6133: LD_ADDR_VAR 0 3
6137: PUSH
6138: LD_VAR 0 3
6142: PUSH
6143: LD_INT 1
6145: PLUS
6146: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6147: LD_ADDR_EXP 52
6151: PUSH
6152: LD_EXP 52
6156: PPUSH
6157: LD_VAR 0 4
6161: PPUSH
6162: LD_VAR 0 7
6166: PUSH
6167: LD_EXP 34
6171: PUSH
6172: LD_VAR 0 4
6176: ARRAY
6177: ARRAY
6178: PPUSH
6179: CALL_OW 1
6183: ST_TO_ADDR
// end ;
6184: GO 6118
6186: POP
6187: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6188: LD_ADDR_EXP 48
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: LD_EXP 25
6200: MUL
6201: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6202: LD_ADDR_EXP 46
6206: PUSH
6207: LD_VAR 0 3
6211: PUSH
6212: LD_EXP 48
6216: MUL
6217: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6218: LD_ADDR_EXP 47
6222: PUSH
6223: LD_EXP 46
6227: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6228: LD_ADDR_EXP 49
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: LD_INT 0
6238: PUSH
6239: LD_INT 0
6241: PUSH
6242: LD_INT 0
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: LD_INT 0
6250: PUSH
6251: LD_INT 0
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6267: LD_ADDR_EXP 50
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: LD_INT 0
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
// apeLevel := 1 ;
6306: LD_ADDR_EXP 51
6310: PUSH
6311: LD_INT 1
6313: ST_TO_ADDR
// if not apemanNumber then
6314: LD_EXP 46
6318: NOT
6319: IFFALSE 6323
// exit ;
6321: GO 6519
// for i := 1 to apemanPerPlayer do
6323: LD_ADDR_VAR 0 2
6327: PUSH
6328: DOUBLE
6329: LD_INT 1
6331: DEC
6332: ST_TO_ADDR
6333: LD_EXP 48
6337: PUSH
6338: FOR_TO
6339: IFFALSE 6517
// begin for j := 1 to Side_Positions do
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: DOUBLE
6347: LD_INT 1
6349: DEC
6350: ST_TO_ADDR
6351: LD_EXP 34
6355: PUSH
6356: FOR_TO
6357: IFFALSE 6513
// if Side_Positions [ j ] then
6359: LD_EXP 34
6363: PUSH
6364: LD_VAR 0 4
6368: ARRAY
6369: IFFALSE 6511
// begin pos := Side_Positions [ j ] ;
6371: LD_ADDR_VAR 0 6
6375: PUSH
6376: LD_EXP 34
6380: PUSH
6381: LD_VAR 0 4
6385: ARRAY
6386: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6387: LD_ADDR_EXP 50
6391: PUSH
6392: LD_EXP 50
6396: PPUSH
6397: LD_VAR 0 4
6401: PPUSH
6402: LD_EXP 50
6406: PUSH
6407: LD_VAR 0 4
6411: ARRAY
6412: PUSH
6413: LD_INT 1
6415: PLUS
6416: PPUSH
6417: CALL_OW 1
6421: ST_TO_ADDR
// ape := PrepareApeman ;
6422: LD_ADDR_VAR 0 5
6426: PUSH
6427: CALL 6524 0 0
6431: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6432: LD_ADDR_EXP 49
6436: PUSH
6437: LD_EXP 49
6441: PPUSH
6442: LD_VAR 0 4
6446: PPUSH
6447: LD_EXP 49
6451: PUSH
6452: LD_VAR 0 4
6456: ARRAY
6457: PPUSH
6458: LD_EXP 49
6462: PUSH
6463: LD_VAR 0 4
6467: ARRAY
6468: PUSH
6469: LD_INT 1
6471: PLUS
6472: PPUSH
6473: LD_VAR 0 5
6477: PPUSH
6478: CALL_OW 1
6482: PPUSH
6483: CALL_OW 1
6487: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6488: LD_VAR 0 5
6492: PPUSH
6493: LD_EXP 52
6497: PUSH
6498: LD_VAR 0 4
6502: ARRAY
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 49
// end ;
6511: GO 6356
6513: POP
6514: POP
// end ;
6515: GO 6338
6517: POP
6518: POP
// end ;
6519: LD_VAR 0 1
6523: RET
// export function PrepareApeman ; var bonus ; begin
6524: LD_INT 0
6526: PPUSH
6527: PPUSH
// uc_side := 0 ;
6528: LD_ADDR_OWVAR 20
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// uc_nation := 0 ;
6536: LD_ADDR_OWVAR 21
6540: PUSH
6541: LD_INT 0
6543: ST_TO_ADDR
// InitHc ;
6544: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_INT 1
6555: NEG
6556: PUSH
6557: LD_INT 0
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 25
6570: PUSH
6571: LD_INT 12
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PPUSH
6578: CALL_OW 69
6582: PUSH
6583: LD_INT 3
6585: MOD
6586: PUSH
6587: LD_INT 1
6589: PLUS
6590: ARRAY
6591: ST_TO_ADDR
// hc_class := class_apeman ;
6592: LD_ADDR_OWVAR 28
6596: PUSH
6597: LD_INT 12
6599: ST_TO_ADDR
// hc_gallery :=  ;
6600: LD_ADDR_OWVAR 33
6604: PUSH
6605: LD_STRING 
6607: ST_TO_ADDR
// hc_name :=  ;
6608: LD_ADDR_OWVAR 26
6612: PUSH
6613: LD_STRING 
6615: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6616: LD_ADDR_OWVAR 31
6620: PUSH
6621: LD_EXP 51
6625: PUSH
6626: LD_VAR 0 2
6630: PLUS
6631: PUSH
6632: LD_EXP 51
6636: PUSH
6637: LD_VAR 0 2
6641: PLUS
6642: PUSH
6643: LD_EXP 51
6647: PUSH
6648: LD_VAR 0 2
6652: PLUS
6653: PUSH
6654: LD_EXP 51
6658: PUSH
6659: LD_VAR 0 2
6663: PLUS
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6671: LD_ADDR_OWVAR 35
6675: PUSH
6676: LD_INT 10
6678: PUSH
6679: LD_VAR 0 2
6683: MUL
6684: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6685: LD_ADDR_OWVAR 29
6689: PUSH
6690: LD_INT 12
6692: PUSH
6693: LD_INT 12
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: ST_TO_ADDR
// result := CreateHuman ;
6700: LD_ADDR_VAR 0 1
6704: PUSH
6705: CALL_OW 44
6709: ST_TO_ADDR
// end ;
6710: LD_VAR 0 1
6714: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6715: LD_INT 0
6717: PPUSH
6718: PPUSH
6719: PPUSH
// if not ape then
6720: LD_VAR 0 1
6724: NOT
6725: IFFALSE 6729
// exit ;
6727: GO 6832
// for i = 1 to apemanPos do
6729: LD_ADDR_VAR 0 4
6733: PUSH
6734: DOUBLE
6735: LD_INT 1
6737: DEC
6738: ST_TO_ADDR
6739: LD_EXP 49
6743: PUSH
6744: FOR_TO
6745: IFFALSE 6779
// if ape in apemanPos [ i ] then
6747: LD_VAR 0 1
6751: PUSH
6752: LD_EXP 49
6756: PUSH
6757: LD_VAR 0 4
6761: ARRAY
6762: IN
6763: IFFALSE 6777
// begin s := i ;
6765: LD_ADDR_VAR 0 3
6769: PUSH
6770: LD_VAR 0 4
6774: ST_TO_ADDR
// break ;
6775: GO 6779
// end ;
6777: GO 6744
6779: POP
6780: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6781: LD_ADDR_EXP 49
6785: PUSH
6786: LD_EXP 49
6790: PPUSH
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_EXP 49
6800: PUSH
6801: LD_VAR 0 3
6805: ARRAY
6806: PUSH
6807: LD_VAR 0 1
6811: DIFF
6812: PPUSH
6813: CALL_OW 1
6817: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6818: LD_ADDR_EXP 46
6822: PUSH
6823: LD_EXP 46
6827: PUSH
6828: LD_INT 1
6830: MINUS
6831: ST_TO_ADDR
// end ; end_of_file
6832: LD_VAR 0 2
6836: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 266
6846: PUSH
6847: LD_INT 0
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: IN
6857: IFFALSE 6882
// SetBName ( b , @ & GetSide ( b ) ) ;
6859: LD_VAR 0 1
6863: PPUSH
6864: LD_STRING @
6866: PUSH
6867: LD_VAR 0 1
6871: PPUSH
6872: CALL_OW 255
6876: STR
6877: PPUSH
6878: CALL_OW 500
// end ;
6882: PPOPN 2
6884: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 266
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 1
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: IN
6905: IFFALSE 6930
// SetBName ( b , @ & GetSide ( b ) ) ;
6907: LD_VAR 0 1
6911: PPUSH
6912: LD_STRING @
6914: PUSH
6915: LD_VAR 0 1
6919: PPUSH
6920: CALL_OW 255
6924: STR
6925: PPUSH
6926: CALL_OW 500
// end ;
6930: PPOPN 3
6932: END
// on VehicleConstructed ( veh , fac ) do var side ;
6933: LD_INT 0
6935: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6936: LD_VAR 0 1
6940: PPUSH
6941: CALL_OW 263
6945: PUSH
6946: LD_INT 5
6948: EQUAL
6949: IFFALSE 7091
// begin side := GetSide ( veh ) ;
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: LD_VAR 0 1
6960: PPUSH
6961: CALL_OW 255
6965: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6966: LD_ADDR_EXP 49
6970: PUSH
6971: LD_EXP 49
6975: PPUSH
6976: LD_VAR 0 3
6980: PPUSH
6981: LD_EXP 49
6985: PUSH
6986: LD_VAR 0 3
6990: ARRAY
6991: PPUSH
6992: LD_INT 52
6994: PUSH
6995: EMPTY
6996: LIST
6997: PPUSH
6998: CALL_OW 72
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_VAR 0 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: LD_INT 33
7020: PUSH
7021: LD_INT 5
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 25
7030: PUSH
7031: LD_INT 12
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 25
7040: PUSH
7041: LD_INT 15
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 25
7050: PUSH
7051: LD_INT 16
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 25
7060: PUSH
7061: LD_INT 17
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PPUSH
7080: CALL_OW 69
7084: UNION
7085: PPUSH
7086: CALL_OW 1
7090: ST_TO_ADDR
// end ; end ;
7091: PPOPN 3
7093: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7094: LD_INT 0
7096: PPUSH
7097: PPUSH
7098: PPUSH
7099: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7100: LD_VAR 0 1
7104: PPUSH
7105: CALL_OW 257
7109: PUSH
7110: LD_INT 12
7112: PUSH
7113: LD_INT 15
7115: PUSH
7116: LD_INT 17
7118: PUSH
7119: LD_INT 16
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: IN
7128: PUSH
7129: LD_VAR 0 1
7133: PPUSH
7134: CALL_OW 263
7138: PUSH
7139: LD_INT 5
7141: EQUAL
7142: OR
7143: IFFALSE 7154
// ApeKilled ( j ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL 6715 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7154: LD_VAR 0 1
7158: PPUSH
7159: CALL_OW 266
7163: PUSH
7164: LD_INT 0
7166: PUSH
7167: LD_INT 1
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: IN
7174: IFFALSE 7256
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7176: LD_ADDR_VAR 0 4
7180: PUSH
7181: LD_EXP 34
7185: PUSH
7186: LD_VAR 0 1
7190: PPUSH
7191: CALL_OW 255
7195: ARRAY
7196: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: LD_EXP 39
7206: PUSH
7207: LD_VAR 0 4
7211: ARRAY
7212: PUSH
7213: LD_INT 1
7215: ARRAY
7216: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: LD_EXP 39
7226: PUSH
7227: LD_VAR 0 4
7231: ARRAY
7232: PUSH
7233: LD_INT 2
7235: ARRAY
7236: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7237: LD_VAR 0 2
7241: PPUSH
7242: LD_VAR 0 3
7246: PPUSH
7247: CALL_OW 420
7251: PPUSH
7252: CALL_OW 419
// end ; end ;
7256: PPOPN 5
7258: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_VAR 0 2
7268: PPUSH
7269: LD_VAR 0 3
7273: PPUSH
7274: LD_OWVAR 2
7278: PPUSH
7279: CALL 7661 0 4
7283: PPOPN 3
7285: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7286: LD_INT 0
7288: PPUSH
7289: PPUSH
// for un in battle_flags_id do
7290: LD_ADDR_VAR 0 2
7294: PUSH
7295: LD_EXP 44
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7376
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7303: LD_VAR 0 2
7307: PPUSH
7308: LD_INT 1
7310: PUSH
7311: LD_LOC 9
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: LD_LOC 9
7327: PUSH
7328: LD_INT 2
7330: DIV
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 3
7338: PUSH
7339: LD_LOC 9
7343: PUSH
7344: LD_INT 5
7346: DIV
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 20
7354: PUSH
7355: LD_LOC 9
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PPUSH
7370: CALL_OW 423
7374: GO 7300
7376: POP
7377: POP
// end ;
7378: LD_VAR 0 1
7382: RET
// every 1 do var un ;
7383: GO 7385
7385: DISABLE
7386: LD_INT 0
7388: PPUSH
// begin if not def_morale_flags then
7389: LD_EXP 9
7393: NOT
7394: IFFALSE 7398
// exit ;
7396: GO 7475
// if not morale_decreasing_time then
7398: LD_EXP 24
7402: NOT
7403: IFFALSE 7407
// exit ;
7405: GO 7475
// strength = 100 ;
7407: LD_ADDR_LOC 9
7411: PUSH
7412: LD_INT 100
7414: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7415: LD_EXP 24
7419: PPUSH
7420: CALL_OW 67
// strength := strength - 1 ;
7424: LD_ADDR_LOC 9
7428: PUSH
7429: LD_LOC 9
7433: PUSH
7434: LD_INT 1
7436: MINUS
7437: ST_TO_ADDR
// Update_Flags ;
7438: CALL 7286 0 0
// until not strength ;
7442: LD_LOC 9
7446: NOT
7447: IFFALSE 7415
// for un in battle_flags_id do
7449: LD_ADDR_VAR 0 1
7453: PUSH
7454: LD_EXP 44
7458: PUSH
7459: FOR_IN
7460: IFFALSE 7473
// KillBattleFlag ( un ) ;
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 419
7471: GO 7459
7473: POP
7474: POP
// end ; end_of_file
7475: PPOPN 1
7477: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7478: LD_INT 0
7480: PPUSH
7481: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7482: LD_ADDR_VAR 0 2
7486: PUSH
7487: LD_STRING #Multi1x1-Time
7489: PUSH
7490: LD_OWVAR 1
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: ST_TO_ADDR
// if WaitServerStrings then
7499: LD_EXP 54
7503: IFFALSE 7521
// AllStrings = AllStrings ^ WaitServerStrings ;
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_VAR 0 2
7514: PUSH
7515: LD_EXP 54
7519: ADD
7520: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7521: LD_INT 0
7523: PUSH
7524: LD_EXP 29
7528: PUSH
7529: LD_OWVAR 1
7533: MINUS
7534: LESSEQUAL
7535: IFFALSE 7566
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7537: LD_ADDR_VAR 0 2
7541: PUSH
7542: LD_VAR 0 2
7546: PUSH
7547: LD_STRING #allowedsibbomb
7549: PUSH
7550: LD_EXP 29
7554: PUSH
7555: LD_OWVAR 1
7559: MINUS
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: ADD
7565: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7566: LD_INT 0
7568: PUSH
7569: LD_EXP 57
7573: PUSH
7574: LD_OWVAR 1
7578: MINUS
7579: LESSEQUAL
7580: IFFALSE 7611
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: LD_STRING #builduptime
7594: PUSH
7595: LD_EXP 57
7599: PUSH
7600: LD_OWVAR 1
7604: MINUS
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: ADD
7610: ST_TO_ADDR
// if ( ExtraStrings ) then
7611: LD_EXP 53
7615: IFFALSE 7637
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7617: LD_ADDR_VAR 0 2
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: LD_STRING 
7629: ADD
7630: PUSH
7631: LD_EXP 53
7635: ADD
7636: ST_TO_ADDR
// Display_Strings := AllStrings ;
7637: LD_ADDR_OWVAR 47
7641: PUSH
7642: LD_VAR 0 2
7646: ST_TO_ADDR
// end ;
7647: LD_VAR 0 1
7651: RET
// every 0 0$1 do
7652: GO 7654
7654: DISABLE
// begin ShowTimer ;
7655: CALL 7478 0 0
// enable ;
7659: ENABLE
// end ; end_of_file
7660: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7661: LD_INT 0
7663: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7664: LD_VAR 0 1
7668: PPUSH
7669: CALL_OW 255
7673: PUSH
7674: LD_VAR 0 4
7678: EQUAL
7679: IFFALSE 7698
// begin SetAchievement ( ACH_RAD ) ;
7681: LD_STRING ACH_RAD
7683: PPUSH
7684: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7688: LD_STRING ACH_NL
7690: PPUSH
7691: LD_INT 1
7693: PPUSH
7694: CALL_OW 564
// end end ;
7698: LD_VAR 0 5
7702: RET
// export function SA_Win ( side ) ; begin
7703: LD_INT 0
7705: PPUSH
// case side of 1 :
7706: LD_VAR 0 1
7710: PUSH
7711: LD_INT 1
7713: DOUBLE
7714: EQUAL
7715: IFTRUE 7719
7717: GO 7732
7719: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7720: LD_STRING ACH_AH
7722: PPUSH
7723: LD_INT 1
7725: PPUSH
7726: CALL_OW 564
7730: GO 7895
7732: LD_INT 2
7734: DOUBLE
7735: EQUAL
7736: IFTRUE 7740
7738: GO 7753
7740: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7741: LD_STRING ACH_E
7743: PPUSH
7744: LD_INT 1
7746: PPUSH
7747: CALL_OW 564
7751: GO 7895
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7774
7761: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7762: LD_STRING ACH_OOL
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: CALL_OW 564
7772: GO 7895
7774: LD_INT 1
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: DOUBLE
7784: EQUAL
7785: IFTRUE 7789
7787: GO 7814
7789: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7790: LD_STRING ACH_AH
7792: PPUSH
7793: LD_REAL  5.00000000000000E-0001
7796: PPUSH
7797: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7801: LD_STRING ACH_E
7803: PPUSH
7804: LD_REAL  5.00000000000000E-0001
7807: PPUSH
7808: CALL_OW 564
// end ; [ 2 , 3 ] :
7812: GO 7895
7814: LD_INT 2
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 7854
7829: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7830: LD_STRING ACH_OOL
7832: PPUSH
7833: LD_REAL  5.00000000000000E-0001
7836: PPUSH
7837: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7841: LD_STRING ACH_E
7843: PPUSH
7844: LD_REAL  5.00000000000000E-0001
7847: PPUSH
7848: CALL_OW 564
// end ; [ 3 , 1 ] :
7852: GO 7895
7854: LD_INT 3
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: DOUBLE
7864: EQUAL
7865: IFTRUE 7869
7867: GO 7894
7869: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7870: LD_STRING ACH_AH
7872: PPUSH
7873: LD_REAL  5.00000000000000E-0001
7876: PPUSH
7877: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7881: LD_STRING ACH_OOL
7883: PPUSH
7884: LD_REAL  5.00000000000000E-0001
7887: PPUSH
7888: CALL_OW 564
// end ; end ;
7892: GO 7895
7894: POP
// end ; end_of_file
7895: LD_VAR 0 2
7899: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7900: LD_INT 0
7902: PPUSH
7903: PPUSH
// enable ( 98 ) ;
7904: LD_INT 98
7906: ENABLE_MARKED
// GameEnded = false ;
7907: LD_ADDR_LOC 15
7911: PUSH
7912: LD_INT 0
7914: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7915: LD_ADDR_LOC 14
7919: PUSH
7920: LD_INT 0
7922: PUSH
7923: LD_INT 0
7925: PUSH
7926: LD_INT 0
7928: PUSH
7929: LD_INT 0
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: LD_INT 0
7937: PUSH
7938: LD_INT 0
7940: PUSH
7941: LD_INT 0
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: ST_TO_ADDR
// unfoged = false ;
7954: LD_ADDR_LOC 16
7958: PUSH
7959: LD_INT 0
7961: ST_TO_ADDR
// defeated_specs := [ ] ;
7962: LD_ADDR_LOC 17
7966: PUSH
7967: EMPTY
7968: ST_TO_ADDR
// for i = 1 to side_positions do
7969: LD_ADDR_VAR 0 2
7973: PUSH
7974: DOUBLE
7975: LD_INT 1
7977: DEC
7978: ST_TO_ADDR
7979: LD_EXP 34
7983: PUSH
7984: FOR_TO
7985: IFFALSE 8025
// if not side_positions [ i ] then
7987: LD_EXP 34
7991: PUSH
7992: LD_VAR 0 2
7996: ARRAY
7997: NOT
7998: IFFALSE 8023
// defeated = replace ( defeated , i , true ) ;
8000: LD_ADDR_LOC 14
8004: PUSH
8005: LD_LOC 14
8009: PPUSH
8010: LD_VAR 0 2
8014: PPUSH
8015: LD_INT 1
8017: PPUSH
8018: CALL_OW 1
8022: ST_TO_ADDR
8023: GO 7984
8025: POP
8026: POP
// end ;
8027: LD_VAR 0 1
8031: RET
// function CanWinLoose ; begin
8032: LD_INT 0
8034: PPUSH
// Result := true ;
8035: LD_ADDR_VAR 0 1
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8043: CALL_OW 518
8047: PUSH
8048: CALL_OW 519
8052: PUSH
8053: LD_INT 0
8055: GREATER
8056: AND
8057: IFFALSE 8067
// Result := false ;
8059: LD_ADDR_VAR 0 1
8063: PUSH
8064: LD_INT 0
8066: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8067: CALL_OW 531
8071: PUSH
8072: CALL_OW 519
8076: PUSH
8077: LD_INT 1
8079: GREATER
8080: AND
8081: IFFALSE 8091
// Result := false ;
8083: LD_ADDR_VAR 0 1
8087: PUSH
8088: LD_INT 0
8090: ST_TO_ADDR
// end ;
8091: LD_VAR 0 1
8095: RET
// export function HasPower ( i ) ; var k , h ; begin
8096: LD_INT 0
8098: PPUSH
8099: PPUSH
8100: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 108
8110: NOT
8111: PUSH
8112: LD_EXP 33
8116: PUSH
8117: LD_VAR 0 1
8121: ARRAY
8122: NOT
8123: AND
8124: PUSH
8125: LD_OWVAR 4
8129: AND
8130: IFFALSE 8142
// begin result = false ;
8132: LD_ADDR_VAR 0 2
8136: PUSH
8137: LD_INT 0
8139: ST_TO_ADDR
// end else
8140: GO 8437
// case def_win_rules of 0 :
8142: LD_EXP 30
8146: PUSH
8147: LD_INT 0
8149: DOUBLE
8150: EQUAL
8151: IFTRUE 8155
8153: GO 8318
8155: POP
// if def_people_respawning then
8156: LD_EXP 11
8160: IFFALSE 8251
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: LD_INT 22
8169: PUSH
8170: LD_VAR 0 1
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 2
8181: PUSH
8182: LD_INT 21
8184: PUSH
8185: LD_INT 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 33
8194: PUSH
8195: LD_INT 3
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 33
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 30
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 30
8224: PUSH
8225: LD_INT 1
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PPUSH
8244: CALL_OW 69
8248: ST_TO_ADDR
8249: GO 8316
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8251: LD_ADDR_VAR 0 2
8255: PUSH
8256: LD_INT 22
8258: PUSH
8259: LD_VAR 0 1
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: LD_INT 2
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 33
8283: PUSH
8284: LD_INT 3
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 33
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: ST_TO_ADDR
8316: GO 8437
8318: LD_INT 1
8320: DOUBLE
8321: EQUAL
8322: IFTRUE 8326
8324: GO 8365
8326: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8327: LD_ADDR_VAR 0 2
8331: PUSH
8332: LD_INT 22
8334: PUSH
8335: LD_VAR 0 1
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 21
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PPUSH
8358: CALL_OW 69
8362: ST_TO_ADDR
8363: GO 8437
8365: LD_INT 2
8367: DOUBLE
8368: EQUAL
8369: IFTRUE 8373
8371: GO 8436
8373: POP
// begin h = false ;
8374: LD_ADDR_VAR 0 4
8378: PUSH
8379: LD_INT 0
8381: ST_TO_ADDR
// for k in heroes [ i ] do
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_EXP 45
8391: PUSH
8392: LD_VAR 0 1
8396: ARRAY
8397: PUSH
8398: FOR_IN
8399: IFFALSE 8422
// if IsLive ( k ) then
8401: LD_VAR 0 3
8405: PPUSH
8406: CALL_OW 300
8410: IFFALSE 8420
// h = true ;
8412: LD_ADDR_VAR 0 4
8416: PUSH
8417: LD_INT 1
8419: ST_TO_ADDR
8420: GO 8398
8422: POP
8423: POP
// Result := h ;
8424: LD_ADDR_VAR 0 2
8428: PUSH
8429: LD_VAR 0 4
8433: ST_TO_ADDR
// end ; end ;
8434: GO 8437
8436: POP
// end ;
8437: LD_VAR 0 2
8441: RET
// function AlliedSides ( i , j ) ; begin
8442: LD_INT 0
8444: PPUSH
// Result := false ;
8445: LD_ADDR_VAR 0 3
8449: PUSH
8450: LD_INT 0
8452: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8453: LD_VAR 0 1
8457: PPUSH
8458: LD_VAR 0 2
8462: PPUSH
8463: CALL_OW 81
8467: PUSH
8468: LD_INT 1
8470: EQUAL
8471: PUSH
8472: LD_VAR 0 2
8476: PPUSH
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 81
8486: PUSH
8487: LD_INT 1
8489: EQUAL
8490: AND
8491: PUSH
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 83
8501: AND
8502: PUSH
8503: LD_VAR 0 2
8507: PPUSH
8508: CALL_OW 83
8512: AND
8513: IFFALSE 8523
// Result := true ;
8515: LD_ADDR_VAR 0 3
8519: PUSH
8520: LD_INT 1
8522: ST_TO_ADDR
// end ;
8523: LD_VAR 0 3
8527: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8528: CALL 8032 0 0
8532: PUSH
8533: LD_LOC 15
8537: NOT
8538: AND
8539: IFFALSE 8555
8541: GO 8543
8543: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8544: LD_ADDR_EXP 54
8548: PUSH
8549: LD_STRING #Player-Ended
8551: PUSH
8552: EMPTY
8553: LIST
8554: ST_TO_ADDR
8555: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8556: CALL 8032 0 0
8560: PUSH
8561: LD_LOC 15
8565: AND
8566: IFFALSE 8575
8568: GO 8570
8570: DISABLE
// YouLostInMultiplayer ;
8571: CALL_OW 107
8575: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8576: CALL 8032 0 0
8580: NOT
8581: PUSH
8582: CALL_OW 531
8586: NOT
8587: AND
8588: IFFALSE 8604
8590: GO 8592
8592: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8593: LD_ADDR_EXP 54
8597: PUSH
8598: LD_STRING #server-wait
8600: PUSH
8601: EMPTY
8602: LIST
8603: ST_TO_ADDR
8604: END
// every 100 trigger IAmSpec do
8605: CALL_OW 531
8609: IFFALSE 8625
8611: GO 8613
8613: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8614: LD_ADDR_EXP 54
8618: PUSH
8619: LD_STRING #Player-IAmSpec
8621: PUSH
8622: EMPTY
8623: LIST
8624: ST_TO_ADDR
8625: END
// every 100 trigger GameEnded and IAmSpec do
8626: LD_LOC 15
8630: PUSH
8631: CALL_OW 531
8635: AND
8636: IFFALSE 8645
8638: GO 8640
8640: DISABLE
// YouLostInMultiplayer ;
8641: CALL_OW 107
8645: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8646: CALL 8032 0 0
8650: PUSH
8651: LD_LOC 15
8655: NOT
8656: AND
8657: IFFALSE 8673
8659: GO 8661
8661: DISABLE
// WaitServerStrings = [ $player-win ] ;
8662: LD_ADDR_EXP 54
8666: PUSH
8667: LD_STRING $player-win
8669: PUSH
8670: EMPTY
8671: LIST
8672: ST_TO_ADDR
8673: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8674: CALL 8032 0 0
8678: PUSH
8679: LD_LOC 15
8683: AND
8684: IFFALSE 8708
8686: GO 8688
8688: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8689: LD_EXP 35
8693: PUSH
8694: LD_OWVAR 7
8698: ARRAY
8699: PPUSH
8700: CALL 7703 0 1
// YouWinInMultiplayer ;
8704: CALL_OW 106
// end ;
8708: END
// every 100 trigger isEditor marked 401 do
8709: LD_OWVAR 84
8713: IFFALSE 8729
8715: GO 8717
8717: DISABLE
// Debug_Strings = [ You won ] ;
8718: LD_ADDR_OWVAR 48
8722: PUSH
8723: LD_STRING You won
8725: PUSH
8726: EMPTY
8727: LIST
8728: ST_TO_ADDR
8729: END
// every 100 trigger isEditor marked 400 do
8730: LD_OWVAR 84
8734: IFFALSE 8750
8736: GO 8738
8738: DISABLE
// Debug_Strings = [ You loss ] ;
8739: LD_ADDR_OWVAR 48
8743: PUSH
8744: LD_STRING You loss
8746: PUSH
8747: EMPTY
8748: LIST
8749: ST_TO_ADDR
8750: END
// every 100 marked 98 do var i , un ;
8751: GO 8753
8753: DISABLE
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
// begin for i = 1 to side_positions do
8758: LD_ADDR_VAR 0 1
8762: PUSH
8763: DOUBLE
8764: LD_INT 1
8766: DEC
8767: ST_TO_ADDR
8768: LD_EXP 34
8772: PUSH
8773: FOR_TO
8774: IFFALSE 8861
// begin if side_positions [ i ] then
8776: LD_EXP 34
8780: PUSH
8781: LD_VAR 0 1
8785: ARRAY
8786: IFFALSE 8859
// if not HasPower ( i ) and not defeated [ i ] then
8788: LD_VAR 0 1
8792: PPUSH
8793: CALL 8096 0 1
8797: NOT
8798: PUSH
8799: LD_LOC 14
8803: PUSH
8804: LD_VAR 0 1
8808: ARRAY
8809: NOT
8810: AND
8811: IFFALSE 8859
// begin defeated = replace ( defeated , i , true ) ;
8813: LD_ADDR_LOC 14
8817: PUSH
8818: LD_LOC 14
8822: PPUSH
8823: LD_VAR 0 1
8827: PPUSH
8828: LD_INT 1
8830: PPUSH
8831: CALL_OW 1
8835: ST_TO_ADDR
// if i = mp_player_side then
8836: LD_VAR 0 1
8840: PUSH
8841: LD_OWVAR 7
8845: EQUAL
8846: IFFALSE 8859
// begin Multiplayer_Loose_Message ;
8848: CALL_OW 521
// SetPlayerSpectator ( ) ;
8852: CALL_OW 572
// enable ( 400 ) ;
8856: LD_INT 400
8858: ENABLE_MARKED
// end ; end ; end ;
8859: GO 8773
8861: POP
8862: POP
// DidGameEnd ;
8863: CALL 8878 0 0
// if not GameEnded then
8867: LD_LOC 15
8871: NOT
8872: IFFALSE 8875
// enable ;
8874: ENABLE
// end ;
8875: PPOPN 2
8877: END
// function DidGameEnd ; var i , k , enemy ; begin
8878: LD_INT 0
8880: PPUSH
8881: PPUSH
8882: PPUSH
8883: PPUSH
// enemy = [ ] ;
8884: LD_ADDR_VAR 0 4
8888: PUSH
8889: EMPTY
8890: ST_TO_ADDR
// for i = 1 to side_positions do
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: DOUBLE
8897: LD_INT 1
8899: DEC
8900: ST_TO_ADDR
8901: LD_EXP 34
8905: PUSH
8906: FOR_TO
8907: IFFALSE 9001
// if not defeated [ i ] then
8909: LD_LOC 14
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: NOT
8920: IFFALSE 8999
// for k = 1 to side_positions do
8922: LD_ADDR_VAR 0 3
8926: PUSH
8927: DOUBLE
8928: LD_INT 1
8930: DEC
8931: ST_TO_ADDR
8932: LD_EXP 34
8936: PUSH
8937: FOR_TO
8938: IFFALSE 8997
// if not defeated [ k ] then
8940: LD_LOC 14
8944: PUSH
8945: LD_VAR 0 3
8949: ARRAY
8950: NOT
8951: IFFALSE 8995
// if not AlliedSides ( i , k ) then
8953: LD_VAR 0 2
8957: PPUSH
8958: LD_VAR 0 3
8962: PPUSH
8963: CALL 8442 0 2
8967: NOT
8968: IFFALSE 8995
// enemy = enemy ^ [ i , k ] ;
8970: LD_ADDR_VAR 0 4
8974: PUSH
8975: LD_VAR 0 4
8979: PUSH
8980: LD_VAR 0 2
8984: PUSH
8985: LD_VAR 0 3
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: ADD
8994: ST_TO_ADDR
8995: GO 8937
8997: POP
8998: POP
8999: GO 8906
9001: POP
9002: POP
// if not enemy then
9003: LD_VAR 0 4
9007: NOT
9008: IFFALSE 9034
// begin GameEnded = true ;
9010: LD_ADDR_LOC 15
9014: PUSH
9015: LD_INT 1
9017: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9018: LD_LOC 14
9022: PUSH
9023: LD_OWVAR 7
9027: ARRAY
9028: NOT
9029: IFFALSE 9034
// enable ( 401 ) ;
9031: LD_INT 401
9033: ENABLE_MARKED
// end ; end ;
9034: LD_VAR 0 1
9038: RET
// function unfog ; var k , friends ; begin
9039: LD_INT 0
9041: PPUSH
9042: PPUSH
9043: PPUSH
// for k = 1 to side_positions do
9044: LD_ADDR_VAR 0 2
9048: PUSH
9049: DOUBLE
9050: LD_INT 1
9052: DEC
9053: ST_TO_ADDR
9054: LD_EXP 34
9058: PUSH
9059: FOR_TO
9060: IFFALSE 9116
// if not defeated [ k ] then
9062: LD_LOC 14
9066: PUSH
9067: LD_VAR 0 2
9071: ARRAY
9072: NOT
9073: IFFALSE 9114
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9075: LD_OWVAR 7
9079: PPUSH
9080: LD_VAR 0 2
9084: PPUSH
9085: CALL_OW 81
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: EMPTY
9094: LIST
9095: IN
9096: IFFALSE 9114
// friends = friends ^ k ;
9098: LD_ADDR_VAR 0 3
9102: PUSH
9103: LD_VAR 0 3
9107: PUSH
9108: LD_VAR 0 2
9112: ADD
9113: ST_TO_ADDR
9114: GO 9059
9116: POP
9117: POP
// if not friends then
9118: LD_VAR 0 3
9122: NOT
9123: IFFALSE 9137
// begin SetPlayerSpectator ( ) ;
9125: CALL_OW 572
// unfoged = true ;
9129: LD_ADDR_LOC 16
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// end ; end ;
9137: LD_VAR 0 1
9141: RET
// export function MakeGameEnd ; begin
9142: LD_INT 0
9144: PPUSH
// SetPlayerSpectator ( ) ;
9145: CALL_OW 572
// unfoged = true ;
9149: LD_ADDR_LOC 16
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9157: LD_INT 175
9159: PPUSH
9160: CALL_OW 67
// GameEnded = true ;
9164: LD_ADDR_LOC 15
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// end ;
9172: LD_VAR 0 1
9176: RET
// export function GetGameEnded ; begin
9177: LD_INT 0
9179: PPUSH
// result = GameEnded ;
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: LD_LOC 15
9189: ST_TO_ADDR
// end ; end_of_file
9190: LD_VAR 0 1
9194: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9195: LD_INT 0
9197: PPUSH
9198: PPUSH
9199: PPUSH
// for side = 1 to 8 do
9200: LD_ADDR_VAR 0 2
9204: PUSH
9205: DOUBLE
9206: LD_INT 1
9208: DEC
9209: ST_TO_ADDR
9210: LD_INT 8
9212: PUSH
9213: FOR_TO
9214: IFFALSE 9335
// begin for i = 1 to 72 do
9216: LD_ADDR_VAR 0 3
9220: PUSH
9221: DOUBLE
9222: LD_INT 1
9224: DEC
9225: ST_TO_ADDR
9226: LD_INT 72
9228: PUSH
9229: FOR_TO
9230: IFFALSE 9261
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9232: LD_VAR 0 3
9236: PPUSH
9237: LD_VAR 0 2
9241: PPUSH
9242: LD_INT 0
9244: PPUSH
9245: LD_VAR 0 3
9249: PPUSH
9250: CALL_OW 565
9254: PPUSH
9255: CALL_OW 322
9259: GO 9229
9261: POP
9262: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9263: LD_INT 73
9265: PPUSH
9266: LD_VAR 0 2
9270: PPUSH
9271: LD_INT 0
9273: PPUSH
9274: LD_INT 25
9276: PPUSH
9277: CALL_OW 565
9281: PPUSH
9282: CALL_OW 322
// for i = 0 to 40 do
9286: LD_ADDR_VAR 0 3
9290: PUSH
9291: DOUBLE
9292: LD_INT 0
9294: DEC
9295: ST_TO_ADDR
9296: LD_INT 40
9298: PUSH
9299: FOR_TO
9300: IFFALSE 9331
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9302: LD_VAR 0 3
9306: PPUSH
9307: LD_VAR 0 2
9311: PPUSH
9312: LD_INT 1
9314: PPUSH
9315: LD_VAR 0 3
9319: PPUSH
9320: CALL_OW 565
9324: PPUSH
9325: CALL_OW 324
9329: GO 9299
9331: POP
9332: POP
// end ;
9333: GO 9213
9335: POP
9336: POP
// end ;
9337: LD_VAR 0 1
9341: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9342: LD_INT 0
9344: PPUSH
9345: PPUSH
9346: PPUSH
// for side = 1 to 8 do
9347: LD_ADDR_VAR 0 3
9351: PUSH
9352: DOUBLE
9353: LD_INT 1
9355: DEC
9356: ST_TO_ADDR
9357: LD_INT 8
9359: PUSH
9360: FOR_TO
9361: IFFALSE 13357
// begin for i = 1 to 73 do
9363: LD_ADDR_VAR 0 4
9367: PUSH
9368: DOUBLE
9369: LD_INT 1
9371: DEC
9372: ST_TO_ADDR
9373: LD_INT 73
9375: PUSH
9376: FOR_TO
9377: IFFALSE 9398
// SetTech ( i , side , state_disabled ) ;
9379: LD_VAR 0 4
9383: PPUSH
9384: LD_VAR 0 3
9388: PPUSH
9389: LD_INT 0
9391: PPUSH
9392: CALL_OW 322
9396: GO 9376
9398: POP
9399: POP
// for i = 0 to 40 do
9400: LD_ADDR_VAR 0 4
9404: PUSH
9405: DOUBLE
9406: LD_INT 0
9408: DEC
9409: ST_TO_ADDR
9410: LD_INT 40
9412: PUSH
9413: FOR_TO
9414: IFFALSE 9435
// SetRestrict ( i , side , false ) ;
9416: LD_VAR 0 4
9420: PPUSH
9421: LD_VAR 0 3
9425: PPUSH
9426: LD_INT 0
9428: PPUSH
9429: CALL_OW 324
9433: GO 9413
9435: POP
9436: POP
// case level of 1 :
9437: LD_VAR 0 1
9441: PUSH
9442: LD_INT 1
9444: DOUBLE
9445: EQUAL
9446: IFTRUE 9450
9448: GO 9603
9450: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9451: LD_INT 35
9453: PPUSH
9454: LD_VAR 0 3
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9466: LD_INT 45
9468: PPUSH
9469: LD_VAR 0 3
9473: PPUSH
9474: LD_INT 1
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9481: LD_INT 46
9483: PPUSH
9484: LD_VAR 0 3
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9496: LD_INT 47
9498: PPUSH
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9511: LD_INT 0
9513: PPUSH
9514: LD_VAR 0 3
9518: PPUSH
9519: LD_INT 1
9521: PPUSH
9522: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 3
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9541: LD_INT 4
9543: PPUSH
9544: LD_VAR 0 3
9548: PPUSH
9549: LD_INT 1
9551: PPUSH
9552: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9556: LD_INT 6
9558: PPUSH
9559: LD_VAR 0 3
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9571: LD_INT 29
9573: PPUSH
9574: LD_VAR 0 3
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9586: LD_INT 31
9588: PPUSH
9589: LD_VAR 0 3
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 324
// end ; 2 :
9601: GO 13355
9603: LD_INT 2
9605: DOUBLE
9606: EQUAL
9607: IFTRUE 9611
9609: GO 9809
9611: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9612: LD_INT 35
9614: PPUSH
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_INT 1
9622: PPUSH
9623: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9627: LD_INT 45
9629: PPUSH
9630: LD_VAR 0 3
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9642: LD_INT 46
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: LD_INT 1
9652: PPUSH
9653: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9657: LD_INT 47
9659: PPUSH
9660: LD_VAR 0 3
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9672: LD_INT 1
9674: PPUSH
9675: LD_VAR 0 3
9679: PPUSH
9680: LD_INT 1
9682: PPUSH
9683: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9687: LD_INT 2
9689: PPUSH
9690: LD_VAR 0 3
9694: PPUSH
9695: LD_INT 1
9697: PPUSH
9698: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9702: LD_INT 11
9704: PPUSH
9705: LD_VAR 0 3
9709: PPUSH
9710: LD_INT 1
9712: PPUSH
9713: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9717: LD_INT 0
9719: PPUSH
9720: LD_VAR 0 3
9724: PPUSH
9725: LD_INT 1
9727: PPUSH
9728: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9732: LD_INT 2
9734: PPUSH
9735: LD_VAR 0 3
9739: PPUSH
9740: LD_INT 1
9742: PPUSH
9743: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9747: LD_INT 4
9749: PPUSH
9750: LD_VAR 0 3
9754: PPUSH
9755: LD_INT 1
9757: PPUSH
9758: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9762: LD_INT 6
9764: PPUSH
9765: LD_VAR 0 3
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9777: LD_INT 29
9779: PPUSH
9780: LD_VAR 0 3
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9792: LD_INT 31
9794: PPUSH
9795: LD_VAR 0 3
9799: PPUSH
9800: LD_INT 1
9802: PPUSH
9803: CALL_OW 324
// end ; 3 :
9807: GO 13355
9809: LD_INT 3
9811: DOUBLE
9812: EQUAL
9813: IFTRUE 9817
9815: GO 10270
9817: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9818: LD_INT 35
9820: PPUSH
9821: LD_VAR 0 3
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9833: LD_INT 45
9835: PPUSH
9836: LD_VAR 0 3
9840: PPUSH
9841: LD_INT 1
9843: PPUSH
9844: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9848: LD_INT 46
9850: PPUSH
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 1
9858: PPUSH
9859: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9863: LD_INT 47
9865: PPUSH
9866: LD_VAR 0 3
9870: PPUSH
9871: LD_INT 1
9873: PPUSH
9874: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9878: LD_INT 1
9880: PPUSH
9881: LD_VAR 0 3
9885: PPUSH
9886: LD_INT 1
9888: PPUSH
9889: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9893: LD_INT 2
9895: PPUSH
9896: LD_VAR 0 3
9900: PPUSH
9901: LD_INT 1
9903: PPUSH
9904: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9908: LD_INT 11
9910: PPUSH
9911: LD_VAR 0 3
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9923: LD_INT 48
9925: PPUSH
9926: LD_VAR 0 3
9930: PPUSH
9931: LD_INT 1
9933: PPUSH
9934: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9938: LD_INT 69
9940: PPUSH
9941: LD_VAR 0 3
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9953: LD_INT 39
9955: PPUSH
9956: LD_VAR 0 3
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9968: LD_INT 43
9970: PPUSH
9971: LD_VAR 0 3
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9983: LD_INT 51
9985: PPUSH
9986: LD_VAR 0 3
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9998: LD_INT 6
10000: PPUSH
10001: LD_VAR 0 3
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10013: LD_INT 0
10015: PPUSH
10016: LD_VAR 0 3
10020: PPUSH
10021: LD_INT 1
10023: PPUSH
10024: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10028: LD_INT 2
10030: PPUSH
10031: LD_VAR 0 3
10035: PPUSH
10036: LD_INT 1
10038: PPUSH
10039: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10043: LD_INT 3
10045: PPUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10058: LD_INT 4
10060: PPUSH
10061: LD_VAR 0 3
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10073: LD_INT 6
10075: PPUSH
10076: LD_VAR 0 3
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10088: LD_INT 7
10090: PPUSH
10091: LD_VAR 0 3
10095: PPUSH
10096: LD_INT 1
10098: PPUSH
10099: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10103: LD_INT 8
10105: PPUSH
10106: LD_VAR 0 3
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10118: LD_INT 10
10120: PPUSH
10121: LD_VAR 0 3
10125: PPUSH
10126: LD_INT 1
10128: PPUSH
10129: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10133: LD_INT 15
10135: PPUSH
10136: LD_VAR 0 3
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10148: LD_INT 16
10150: PPUSH
10151: LD_VAR 0 3
10155: PPUSH
10156: LD_INT 1
10158: PPUSH
10159: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10163: LD_INT 17
10165: PPUSH
10166: LD_VAR 0 3
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10178: LD_INT 20
10180: PPUSH
10181: LD_VAR 0 3
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10193: LD_INT 26
10195: PPUSH
10196: LD_VAR 0 3
10200: PPUSH
10201: LD_INT 1
10203: PPUSH
10204: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10208: LD_INT 27
10210: PPUSH
10211: LD_VAR 0 3
10215: PPUSH
10216: LD_INT 1
10218: PPUSH
10219: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10223: LD_INT 29
10225: PPUSH
10226: LD_VAR 0 3
10230: PPUSH
10231: LD_INT 1
10233: PPUSH
10234: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10238: LD_INT 31
10240: PPUSH
10241: LD_VAR 0 3
10245: PPUSH
10246: LD_INT 1
10248: PPUSH
10249: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10253: LD_INT 32
10255: PPUSH
10256: LD_VAR 0 3
10260: PPUSH
10261: LD_INT 1
10263: PPUSH
10264: CALL_OW 324
// end ; 4 :
10268: GO 13355
10270: LD_INT 4
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 11226
10278: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10279: LD_INT 35
10281: PPUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10294: LD_INT 45
10296: PPUSH
10297: LD_VAR 0 3
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10309: LD_INT 46
10311: PPUSH
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10324: LD_INT 47
10326: PPUSH
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10339: LD_INT 1
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10354: LD_INT 2
10356: PPUSH
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10369: LD_INT 11
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10384: LD_INT 20
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10399: LD_INT 48
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10414: LD_INT 49
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10429: LD_INT 69
10431: PPUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10444: LD_INT 39
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10459: LD_INT 34
10461: PPUSH
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10474: LD_INT 42
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10489: LD_INT 44
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10504: LD_INT 41
10506: PPUSH
10507: LD_VAR 0 3
10511: PPUSH
10512: LD_INT 1
10514: PPUSH
10515: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10519: LD_INT 43
10521: PPUSH
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10534: LD_INT 70
10536: PPUSH
10537: LD_VAR 0 3
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10549: LD_INT 51
10551: PPUSH
10552: LD_VAR 0 3
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10564: LD_INT 52
10566: PPUSH
10567: LD_VAR 0 3
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10579: LD_INT 6
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10594: LD_INT 15
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10609: LD_INT 7
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10624: LD_INT 12
10626: PPUSH
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10639: LD_INT 18
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10654: LD_INT 60
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10669: LD_INT 9
10671: PPUSH
10672: LD_VAR 0 3
10676: PPUSH
10677: LD_INT 1
10679: PPUSH
10680: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10684: LD_INT 30
10686: PPUSH
10687: LD_VAR 0 3
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10699: LD_INT 37
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10714: LD_INT 5
10716: PPUSH
10717: LD_VAR 0 3
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10729: LD_INT 66
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10744: LD_INT 21
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10759: LD_INT 22
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10774: LD_INT 54
10776: PPUSH
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10804: LD_INT 1
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10819: LD_INT 2
10821: PPUSH
10822: LD_VAR 0 3
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10834: LD_INT 3
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10849: LD_INT 4
10851: PPUSH
10852: LD_VAR 0 3
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10864: LD_INT 5
10866: PPUSH
10867: LD_VAR 0 3
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10879: LD_INT 6
10881: PPUSH
10882: LD_VAR 0 3
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10894: LD_INT 7
10896: PPUSH
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10909: LD_INT 8
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10924: LD_INT 10
10926: PPUSH
10927: LD_VAR 0 3
10931: PPUSH
10932: LD_INT 1
10934: PPUSH
10935: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10939: LD_INT 11
10941: PPUSH
10942: LD_VAR 0 3
10946: PPUSH
10947: LD_INT 1
10949: PPUSH
10950: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10954: LD_INT 12
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10969: LD_INT 13
10971: PPUSH
10972: LD_VAR 0 3
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10984: LD_INT 14
10986: PPUSH
10987: LD_VAR 0 3
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10999: LD_INT 15
11001: PPUSH
11002: LD_VAR 0 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11014: LD_INT 16
11016: PPUSH
11017: LD_VAR 0 3
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11029: LD_INT 17
11031: PPUSH
11032: LD_VAR 0 3
11036: PPUSH
11037: LD_INT 1
11039: PPUSH
11040: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11044: LD_INT 19
11046: PPUSH
11047: LD_VAR 0 3
11051: PPUSH
11052: LD_INT 1
11054: PPUSH
11055: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11059: LD_INT 20
11061: PPUSH
11062: LD_VAR 0 3
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11074: LD_INT 21
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11089: LD_INT 23
11091: PPUSH
11092: LD_VAR 0 3
11096: PPUSH
11097: LD_INT 1
11099: PPUSH
11100: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11104: LD_INT 26
11106: PPUSH
11107: LD_VAR 0 3
11111: PPUSH
11112: LD_INT 1
11114: PPUSH
11115: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11119: LD_INT 27
11121: PPUSH
11122: LD_VAR 0 3
11126: PPUSH
11127: LD_INT 1
11129: PPUSH
11130: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11134: LD_INT 28
11136: PPUSH
11137: LD_VAR 0 3
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11149: LD_INT 29
11151: PPUSH
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11164: LD_INT 30
11166: PPUSH
11167: LD_VAR 0 3
11171: PPUSH
11172: LD_INT 1
11174: PPUSH
11175: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11179: LD_INT 31
11181: PPUSH
11182: LD_VAR 0 3
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11194: LD_INT 32
11196: PPUSH
11197: LD_VAR 0 3
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11209: LD_INT 36
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: LD_INT 1
11219: PPUSH
11220: CALL_OW 324
// end ; 5 :
11224: GO 13355
11226: LD_INT 5
11228: DOUBLE
11229: EQUAL
11230: IFTRUE 11234
11232: GO 12347
11234: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11235: LD_INT 35
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11250: LD_INT 45
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11265: LD_INT 46
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11280: LD_INT 47
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11295: LD_INT 1
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11310: LD_INT 2
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11325: LD_INT 11
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11340: LD_INT 20
11342: PPUSH
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11355: LD_INT 48
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11370: LD_INT 49
11372: PPUSH
11373: LD_VAR 0 3
11377: PPUSH
11378: LD_INT 1
11380: PPUSH
11381: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11385: LD_INT 69
11387: PPUSH
11388: LD_VAR 0 3
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11400: LD_INT 39
11402: PPUSH
11403: LD_VAR 0 3
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11415: LD_INT 34
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11430: LD_INT 42
11432: PPUSH
11433: LD_VAR 0 3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11445: LD_INT 44
11447: PPUSH
11448: LD_VAR 0 3
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11460: LD_INT 41
11462: PPUSH
11463: LD_VAR 0 3
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11475: LD_INT 40
11477: PPUSH
11478: LD_VAR 0 3
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11490: LD_INT 43
11492: PPUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11505: LD_INT 70
11507: PPUSH
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11520: LD_INT 51
11522: PPUSH
11523: LD_VAR 0 3
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11535: LD_INT 52
11537: PPUSH
11538: LD_VAR 0 3
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11550: LD_INT 6
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11565: LD_INT 15
11567: PPUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11580: LD_INT 7
11582: PPUSH
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11595: LD_INT 12
11597: PPUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11610: LD_INT 17
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11625: LD_INT 18
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11640: LD_INT 60
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11655: LD_INT 32
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11670: LD_INT 9
11672: PPUSH
11673: LD_VAR 0 3
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11685: LD_INT 57
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11700: LD_INT 30
11702: PPUSH
11703: LD_VAR 0 3
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11715: LD_INT 37
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11730: LD_INT 63
11732: PPUSH
11733: LD_VAR 0 3
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11745: LD_INT 3
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_INT 1
11755: PPUSH
11756: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11760: LD_INT 4
11762: PPUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11775: LD_INT 5
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11790: LD_INT 66
11792: PPUSH
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11805: LD_INT 21
11807: PPUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11820: LD_INT 22
11822: PPUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11835: LD_INT 19
11837: PPUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11850: LD_INT 54
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: LD_INT 1
11860: PPUSH
11861: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11865: LD_INT 55
11867: PPUSH
11868: LD_VAR 0 3
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11880: LD_INT 0
11882: PPUSH
11883: LD_VAR 0 3
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11895: LD_INT 1
11897: PPUSH
11898: LD_VAR 0 3
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11910: LD_INT 2
11912: PPUSH
11913: LD_VAR 0 3
11917: PPUSH
11918: LD_INT 1
11920: PPUSH
11921: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11925: LD_INT 3
11927: PPUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11940: LD_INT 4
11942: PPUSH
11943: LD_VAR 0 3
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11955: LD_INT 5
11957: PPUSH
11958: LD_VAR 0 3
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11970: LD_INT 6
11972: PPUSH
11973: LD_VAR 0 3
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11985: LD_INT 7
11987: PPUSH
11988: LD_VAR 0 3
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12000: LD_INT 8
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12015: LD_INT 10
12017: PPUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12030: LD_INT 11
12032: PPUSH
12033: LD_VAR 0 3
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12045: LD_INT 12
12047: PPUSH
12048: LD_VAR 0 3
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12060: LD_INT 13
12062: PPUSH
12063: LD_VAR 0 3
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12075: LD_INT 14
12077: PPUSH
12078: LD_VAR 0 3
12082: PPUSH
12083: LD_INT 1
12085: PPUSH
12086: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12090: LD_INT 15
12092: PPUSH
12093: LD_VAR 0 3
12097: PPUSH
12098: LD_INT 1
12100: PPUSH
12101: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12105: LD_INT 16
12107: PPUSH
12108: LD_VAR 0 3
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12120: LD_INT 17
12122: PPUSH
12123: LD_VAR 0 3
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12135: LD_INT 18
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12150: LD_INT 19
12152: PPUSH
12153: LD_VAR 0 3
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12165: LD_INT 20
12167: PPUSH
12168: LD_VAR 0 3
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12180: LD_INT 21
12182: PPUSH
12183: LD_VAR 0 3
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12195: LD_INT 23
12197: PPUSH
12198: LD_VAR 0 3
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12210: LD_INT 26
12212: PPUSH
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12225: LD_INT 27
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: LD_INT 1
12235: PPUSH
12236: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12240: LD_INT 28
12242: PPUSH
12243: LD_VAR 0 3
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12255: LD_INT 29
12257: PPUSH
12258: LD_VAR 0 3
12262: PPUSH
12263: LD_INT 1
12265: PPUSH
12266: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12270: LD_INT 30
12272: PPUSH
12273: LD_VAR 0 3
12277: PPUSH
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12285: LD_INT 31
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12300: LD_INT 32
12302: PPUSH
12303: LD_VAR 0 3
12307: PPUSH
12308: LD_INT 1
12310: PPUSH
12311: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12315: LD_INT 33
12317: PPUSH
12318: LD_VAR 0 3
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12330: LD_INT 36
12332: PPUSH
12333: LD_VAR 0 3
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: CALL_OW 324
// end ; 6 :
12345: GO 13355
12347: LD_INT 6
12349: DOUBLE
12350: EQUAL
12351: IFTRUE 12355
12353: GO 13280
12355: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12356: LD_INT 35
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12371: LD_INT 45
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12386: LD_INT 46
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12401: LD_INT 47
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12416: LD_INT 1
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12431: LD_INT 2
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12446: LD_INT 11
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12461: LD_INT 20
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12476: LD_INT 48
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12491: LD_INT 49
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12506: LD_INT 50
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12521: LD_INT 69
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12536: LD_INT 39
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12551: LD_INT 34
12553: PPUSH
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12566: LD_INT 42
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12581: LD_INT 44
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12596: LD_INT 41
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12611: LD_INT 13
12613: PPUSH
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12626: LD_INT 40
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12641: LD_INT 43
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12656: LD_INT 70
12658: PPUSH
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12671: LD_INT 23
12673: PPUSH
12674: LD_VAR 0 3
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12686: LD_INT 51
12688: PPUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12701: LD_INT 52
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12716: LD_INT 6
12718: PPUSH
12719: LD_VAR 0 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12731: LD_INT 15
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12746: LD_INT 7
12748: PPUSH
12749: LD_VAR 0 3
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12761: LD_INT 12
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12776: LD_INT 10
12778: PPUSH
12779: LD_VAR 0 3
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12791: LD_INT 17
12793: PPUSH
12794: LD_VAR 0 3
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12806: LD_INT 18
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12821: LD_INT 60
12823: PPUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12836: LD_INT 61
12838: PPUSH
12839: LD_VAR 0 3
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12851: LD_INT 32
12853: PPUSH
12854: LD_VAR 0 3
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12866: LD_INT 27
12868: PPUSH
12869: LD_VAR 0 3
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12881: LD_INT 36
12883: PPUSH
12884: LD_VAR 0 3
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12896: LD_INT 33
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12911: LD_INT 9
12913: PPUSH
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12926: LD_INT 38
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12941: LD_INT 57
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12956: LD_INT 58
12958: PPUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12971: LD_INT 28
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12986: LD_INT 29
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13001: LD_INT 30
13003: PPUSH
13004: LD_VAR 0 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13016: LD_INT 37
13018: PPUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13031: LD_INT 63
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13046: LD_INT 64
13048: PPUSH
13049: LD_VAR 0 3
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13061: LD_INT 3
13063: PPUSH
13064: LD_VAR 0 3
13068: PPUSH
13069: LD_INT 1
13071: PPUSH
13072: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13076: LD_INT 4
13078: PPUSH
13079: LD_VAR 0 3
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13091: LD_INT 5
13093: PPUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13106: LD_INT 8
13108: PPUSH
13109: LD_VAR 0 3
13113: PPUSH
13114: LD_INT 1
13116: PPUSH
13117: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13121: LD_INT 66
13123: PPUSH
13124: LD_VAR 0 3
13128: PPUSH
13129: LD_INT 1
13131: PPUSH
13132: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13136: LD_INT 67
13138: PPUSH
13139: LD_VAR 0 3
13143: PPUSH
13144: LD_INT 1
13146: PPUSH
13147: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13151: LD_INT 21
13153: PPUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13166: LD_INT 22
13168: PPUSH
13169: LD_VAR 0 3
13173: PPUSH
13174: LD_INT 1
13176: PPUSH
13177: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13181: LD_INT 19
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13196: LD_INT 26
13198: PPUSH
13199: LD_VAR 0 3
13203: PPUSH
13204: LD_INT 1
13206: PPUSH
13207: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13211: LD_INT 54
13213: PPUSH
13214: LD_VAR 0 3
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13226: LD_INT 55
13228: PPUSH
13229: LD_VAR 0 3
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: CALL_OW 322
// for i = 0 to 39 do
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: DOUBLE
13247: LD_INT 0
13249: DEC
13250: ST_TO_ADDR
13251: LD_INT 39
13253: PUSH
13254: FOR_TO
13255: IFFALSE 13276
// SetRestrict ( i , side , true ) ;
13257: LD_VAR 0 4
13261: PPUSH
13262: LD_VAR 0 3
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 324
13274: GO 13254
13276: POP
13277: POP
// end ; else
13278: GO 13355
13280: POP
// begin for i = 1 to 73 do
13281: LD_ADDR_VAR 0 4
13285: PUSH
13286: DOUBLE
13287: LD_INT 1
13289: DEC
13290: ST_TO_ADDR
13291: LD_INT 73
13293: PUSH
13294: FOR_TO
13295: IFFALSE 13316
// SetTech ( i , side , state_enabled ) ;
13297: LD_VAR 0 4
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 322
13314: GO 13294
13316: POP
13317: POP
// for i = 0 to 39 do
13318: LD_ADDR_VAR 0 4
13322: PUSH
13323: DOUBLE
13324: LD_INT 0
13326: DEC
13327: ST_TO_ADDR
13328: LD_INT 39
13330: PUSH
13331: FOR_TO
13332: IFFALSE 13353
// SetRestrict ( i , side , true ) ;
13334: LD_VAR 0 4
13338: PPUSH
13339: LD_VAR 0 3
13343: PPUSH
13344: LD_INT 1
13346: PPUSH
13347: CALL_OW 324
13351: GO 13331
13353: POP
13354: POP
// end ; end ; end ;
13355: GO 9360
13357: POP
13358: POP
// end ; end_of_file
13359: LD_VAR 0 2
13363: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13364: LD_INT 0
13366: PPUSH
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
// for i := 1 to 8 do
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: DOUBLE
13381: LD_INT 1
13383: DEC
13384: ST_TO_ADDR
13385: LD_INT 8
13387: PUSH
13388: FOR_TO
13389: IFFALSE 13773
// begin if Side_Positions [ i ] then
13391: LD_EXP 34
13395: PUSH
13396: LD_VAR 0 2
13400: ARRAY
13401: IFFALSE 13771
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13403: LD_ADDR_VAR 0 7
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_VAR 0 2
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 21
13422: PUSH
13423: LD_INT 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: PUSH
13439: LD_INT 0
13441: PLUS
13442: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13443: LD_ADDR_VAR 0 9
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_VAR 0 2
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 2
13462: PUSH
13463: LD_INT 30
13465: PUSH
13466: LD_INT 0
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 30
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 69
13496: ST_TO_ADDR
// crates := 0 ;
13497: LD_ADDR_VAR 0 4
13501: PUSH
13502: LD_INT 0
13504: ST_TO_ADDR
// oil := 0 ;
13505: LD_ADDR_VAR 0 5
13509: PUSH
13510: LD_INT 0
13512: ST_TO_ADDR
// sib := 0 ;
13513: LD_ADDR_VAR 0 6
13517: PUSH
13518: LD_INT 0
13520: ST_TO_ADDR
// if bases then
13521: LD_VAR 0 9
13525: IFFALSE 13631
// begin for j in bases do
13527: LD_ADDR_VAR 0 3
13531: PUSH
13532: LD_VAR 0 9
13536: PUSH
13537: FOR_IN
13538: IFFALSE 13629
// begin base := GetBase ( j ) ;
13540: LD_ADDR_VAR 0 8
13544: PUSH
13545: LD_VAR 0 3
13549: PPUSH
13550: CALL_OW 274
13554: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13555: LD_ADDR_VAR 0 4
13559: PUSH
13560: LD_VAR 0 4
13564: PUSH
13565: LD_VAR 0 8
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 275
13577: PLUS
13578: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13579: LD_ADDR_VAR 0 5
13583: PUSH
13584: LD_VAR 0 5
13588: PUSH
13589: LD_VAR 0 8
13593: PPUSH
13594: LD_INT 2
13596: PPUSH
13597: CALL_OW 275
13601: PLUS
13602: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: LD_VAR 0 6
13612: PUSH
13613: LD_VAR 0 8
13617: PPUSH
13618: LD_INT 3
13620: PPUSH
13621: CALL_OW 275
13625: PLUS
13626: ST_TO_ADDR
// end ;
13627: GO 13537
13629: POP
13630: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13631: LD_STRING setSpecText(
13633: PUSH
13634: LD_VAR 0 2
13638: STR
13639: PUSH
13640: LD_STRING ,
13642: STR
13643: PUSH
13644: LD_INT 2
13646: STR
13647: PUSH
13648: LD_STRING ,
13650: STR
13651: PUSH
13652: LD_VAR 0 4
13656: STR
13657: PUSH
13658: LD_STRING )
13660: STR
13661: PPUSH
13662: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13666: LD_STRING setSpecText(
13668: PUSH
13669: LD_VAR 0 2
13673: STR
13674: PUSH
13675: LD_STRING ,
13677: STR
13678: PUSH
13679: LD_INT 3
13681: STR
13682: PUSH
13683: LD_STRING ,
13685: STR
13686: PUSH
13687: LD_VAR 0 5
13691: STR
13692: PUSH
13693: LD_STRING )
13695: STR
13696: PPUSH
13697: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13701: LD_STRING setSpecText(
13703: PUSH
13704: LD_VAR 0 2
13708: STR
13709: PUSH
13710: LD_STRING ,
13712: STR
13713: PUSH
13714: LD_INT 4
13716: STR
13717: PUSH
13718: LD_STRING ,
13720: STR
13721: PUSH
13722: LD_VAR 0 6
13726: STR
13727: PUSH
13728: LD_STRING )
13730: STR
13731: PPUSH
13732: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13736: LD_STRING setSpecText(
13738: PUSH
13739: LD_VAR 0 2
13743: STR
13744: PUSH
13745: LD_STRING ,
13747: STR
13748: PUSH
13749: LD_INT 5
13751: STR
13752: PUSH
13753: LD_STRING ,
13755: STR
13756: PUSH
13757: LD_VAR 0 7
13761: STR
13762: PUSH
13763: LD_STRING )
13765: STR
13766: PPUSH
13767: CALL_OW 559
// end ; end ;
13771: GO 13388
13773: POP
13774: POP
// end ;
13775: LD_VAR 0 1
13779: RET
// every 0 0$1 do
13780: GO 13782
13782: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13783: LD_STRING setSpecLogoNumber(
13785: PUSH
13786: LD_INT 2
13788: STR
13789: PUSH
13790: LD_STRING ,
13792: STR
13793: PUSH
13794: LD_INT 1
13796: STR
13797: PUSH
13798: LD_STRING )
13800: STR
13801: PPUSH
13802: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13806: LD_STRING setSpecLogoNumber(
13808: PUSH
13809: LD_INT 3
13811: STR
13812: PUSH
13813: LD_STRING ,
13815: STR
13816: PUSH
13817: LD_INT 2
13819: STR
13820: PUSH
13821: LD_STRING )
13823: STR
13824: PPUSH
13825: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13829: LD_STRING setSpecLogoNumber(
13831: PUSH
13832: LD_INT 4
13834: STR
13835: PUSH
13836: LD_STRING ,
13838: STR
13839: PUSH
13840: LD_INT 3
13842: STR
13843: PUSH
13844: LD_STRING )
13846: STR
13847: PPUSH
13848: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13852: LD_STRING setSpecLogoNumber(
13854: PUSH
13855: LD_INT 5
13857: STR
13858: PUSH
13859: LD_STRING ,
13861: STR
13862: PUSH
13863: LD_INT 4
13865: STR
13866: PUSH
13867: LD_STRING )
13869: STR
13870: PPUSH
13871: CALL_OW 559
// end ;
13875: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13876: LD_INT 2
13878: PUSH
13879: LD_INT 30
13881: PUSH
13882: LD_INT 0
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 30
13891: PUSH
13892: LD_INT 1
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: PPUSH
13904: CALL_OW 69
13908: IFFALSE 13918
13910: GO 13912
13912: DISABLE
// begin enable ;
13913: ENABLE
// UpdateSpectatorBar ;
13914: CALL 13364 0 0
// end ; end_of_file
13918: END
// var respawn , inqueue ; export function init_respawning ; begin
13919: LD_INT 0
13921: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13922: LD_ADDR_LOC 18
13926: PUSH
13927: LD_INT 1
13929: PPUSH
13930: LD_INT 8
13932: PPUSH
13933: CALL_OW 12
13937: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13938: LD_ADDR_LOC 19
13942: PUSH
13943: LD_INT 0
13945: PUSH
13946: LD_INT 0
13948: PUSH
13949: LD_INT 0
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: LD_INT 0
13957: PUSH
13958: LD_INT 0
13960: PUSH
13961: LD_INT 0
13963: PUSH
13964: LD_INT 0
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: ST_TO_ADDR
// end ;
13977: LD_VAR 0 1
13981: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13982: GO 13984
13984: DISABLE
13985: LD_INT 0
13987: PPUSH
13988: PPUSH
13989: PPUSH
// begin if respawning_time_max = 0 then
13990: LD_EXP 28
13994: PUSH
13995: LD_INT 0
13997: EQUAL
13998: IFFALSE 14002
// exit ;
14000: GO 14410
// if respawn = 8 then
14002: LD_LOC 18
14006: PUSH
14007: LD_INT 8
14009: EQUAL
14010: IFFALSE 14022
// respawn := 1 else
14012: LD_ADDR_LOC 18
14016: PUSH
14017: LD_INT 1
14019: ST_TO_ADDR
14020: GO 14036
// respawn := respawn + 1 ;
14022: LD_ADDR_LOC 18
14026: PUSH
14027: LD_LOC 18
14031: PUSH
14032: LD_INT 1
14034: PLUS
14035: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14036: LD_EXP 34
14040: PUSH
14041: LD_LOC 18
14045: ARRAY
14046: PUSH
14047: LD_LOC 19
14051: PUSH
14052: LD_LOC 18
14056: ARRAY
14057: NOT
14058: AND
14059: IFFALSE 14409
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14061: LD_ADDR_VAR 0 1
14065: PUSH
14066: LD_INT 21
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_LOC 18
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 3
14090: PUSH
14091: LD_INT 23
14093: PUSH
14094: LD_INT 0
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 69
14111: ST_TO_ADDR
// if n < number_of_people then
14112: LD_VAR 0 1
14116: PUSH
14117: LD_EXP 19
14121: LESS
14122: IFFALSE 14406
// begin aktresp := respawn ;
14124: LD_ADDR_VAR 0 3
14128: PUSH
14129: LD_LOC 18
14133: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14134: LD_ADDR_LOC 19
14138: PUSH
14139: LD_LOC 19
14143: PPUSH
14144: LD_VAR 0 3
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 1
14156: ST_TO_ADDR
// enable ;
14157: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14158: LD_EXP 27
14162: PPUSH
14163: LD_EXP 28
14167: PPUSH
14168: CALL_OW 12
14172: PPUSH
14173: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14177: LD_ADDR_LOC 19
14181: PUSH
14182: LD_LOC 19
14186: PPUSH
14187: LD_VAR 0 3
14191: PPUSH
14192: LD_INT 0
14194: PPUSH
14195: CALL_OW 1
14199: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 2
14217: PUSH
14218: LD_INT 30
14220: PUSH
14221: LD_INT 0
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 30
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 50
14245: PUSH
14246: EMPTY
14247: LIST
14248: PUSH
14249: LD_INT 22
14251: PUSH
14252: LD_VAR 0 3
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 69
14271: ST_TO_ADDR
// if dep = 0 then
14272: LD_VAR 0 2
14276: PUSH
14277: LD_INT 0
14279: EQUAL
14280: IFFALSE 14284
// exit ;
14282: GO 14410
// hc_name :=  ;
14284: LD_ADDR_OWVAR 26
14288: PUSH
14289: LD_STRING 
14291: ST_TO_ADDR
// hc_importance := 0 ;
14292: LD_ADDR_OWVAR 32
14296: PUSH
14297: LD_INT 0
14299: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14300: LD_INT 0
14302: PPUSH
14303: LD_INT 0
14305: PPUSH
14306: LD_EXP 20
14310: PUSH
14311: LD_INT 2
14313: DIV
14314: PPUSH
14315: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14319: LD_ADDR_OWVAR 21
14323: PUSH
14324: LD_EXP 35
14328: PUSH
14329: LD_VAR 0 3
14333: ARRAY
14334: ST_TO_ADDR
// uc_side := aktresp ;
14335: LD_ADDR_OWVAR 20
14339: PUSH
14340: LD_VAR 0 3
14344: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_VAR 0 2
14354: PUSH
14355: LD_INT 1
14357: PPUSH
14358: LD_VAR 0 2
14362: PPUSH
14363: CALL_OW 12
14367: ARRAY
14368: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14369: CALL_OW 44
14373: PPUSH
14374: LD_VAR 0 2
14378: PPUSH
14379: CALL_OW 250
14383: PPUSH
14384: LD_VAR 0 2
14388: PPUSH
14389: CALL_OW 251
14393: PPUSH
14394: LD_INT 7
14396: PPUSH
14397: LD_INT 1
14399: PPUSH
14400: CALL_OW 50
// end else
14404: GO 14407
// enable ;
14406: ENABLE
// end else
14407: GO 14410
// enable ;
14409: ENABLE
// end ; end_of_file
14410: PPOPN 3
14412: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14413: LD_INT 0
14415: PPUSH
14416: PPUSH
14417: PPUSH
// BuildUpTime_Delay = 0 ;
14418: LD_ADDR_EXP 57
14422: PUSH
14423: LD_INT 0
14425: ST_TO_ADDR
// if not def_builduptime then
14426: LD_EXP 14
14430: NOT
14431: IFFALSE 14435
// exit ;
14433: GO 14618
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14435: LD_ADDR_EXP 57
14439: PUSH
14440: LD_INT 8400
14442: PUSH
14443: LD_INT 2100
14445: PUSH
14446: LD_EXP 14
14450: MUL
14451: PLUS
14452: ST_TO_ADDR
// BuildUpTimeActive := true ;
14453: LD_ADDR_EXP 56
14457: PUSH
14458: LD_INT 1
14460: ST_TO_ADDR
// for i := 1 to 8 do
14461: LD_ADDR_VAR 0 2
14465: PUSH
14466: DOUBLE
14467: LD_INT 1
14469: DEC
14470: ST_TO_ADDR
14471: LD_INT 8
14473: PUSH
14474: FOR_TO
14475: IFFALSE 14616
// if Side_Positions [ i ] then
14477: LD_EXP 34
14481: PUSH
14482: LD_VAR 0 2
14486: ARRAY
14487: IFFALSE 14614
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14489: LD_EXP 55
14493: PUSH
14494: LD_EXP 34
14498: PUSH
14499: LD_VAR 0 2
14503: ARRAY
14504: ARRAY
14505: PPUSH
14506: LD_INT 5
14508: PPUSH
14509: CALL_OW 424
// for j := 1 to 8 do
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: DOUBLE
14519: LD_INT 1
14521: DEC
14522: ST_TO_ADDR
14523: LD_INT 8
14525: PUSH
14526: FOR_TO
14527: IFFALSE 14612
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14529: LD_EXP 34
14533: PUSH
14534: LD_VAR 0 3
14538: ARRAY
14539: PUSH
14540: LD_EXP 31
14544: PUSH
14545: LD_VAR 0 2
14549: ARRAY
14550: PUSH
14551: LD_EXP 31
14555: PUSH
14556: LD_VAR 0 3
14560: ARRAY
14561: NONEQUAL
14562: PUSH
14563: LD_EXP 36
14567: NOT
14568: PUSH
14569: LD_VAR 0 2
14573: PUSH
14574: LD_VAR 0 3
14578: NONEQUAL
14579: AND
14580: OR
14581: AND
14582: IFFALSE 14610
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14584: LD_VAR 0 3
14588: PPUSH
14589: LD_EXP 55
14593: PUSH
14594: LD_EXP 34
14598: PUSH
14599: LD_VAR 0 2
14603: ARRAY
14604: ARRAY
14605: PPUSH
14606: CALL_OW 333
14610: GO 14526
14612: POP
14613: POP
// end ;
14614: GO 14474
14616: POP
14617: POP
// end ;
14618: LD_VAR 0 1
14622: RET
// export function EndBuildUp ; var i , j ; begin
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
// BuildUpTimeActive := false ;
14628: LD_ADDR_EXP 56
14632: PUSH
14633: LD_INT 0
14635: ST_TO_ADDR
// for i := 1 to 8 do
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: DOUBLE
14642: LD_INT 1
14644: DEC
14645: ST_TO_ADDR
14646: LD_INT 8
14648: PUSH
14649: FOR_TO
14650: IFFALSE 14791
// if Side_Positions [ i ] then
14652: LD_EXP 34
14656: PUSH
14657: LD_VAR 0 2
14661: ARRAY
14662: IFFALSE 14789
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14664: LD_EXP 55
14668: PUSH
14669: LD_EXP 34
14673: PUSH
14674: LD_VAR 0 2
14678: ARRAY
14679: ARRAY
14680: PPUSH
14681: LD_INT 0
14683: PPUSH
14684: CALL_OW 424
// for j := 1 to 8 do
14688: LD_ADDR_VAR 0 3
14692: PUSH
14693: DOUBLE
14694: LD_INT 1
14696: DEC
14697: ST_TO_ADDR
14698: LD_INT 8
14700: PUSH
14701: FOR_TO
14702: IFFALSE 14787
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14704: LD_EXP 34
14708: PUSH
14709: LD_VAR 0 3
14713: ARRAY
14714: PUSH
14715: LD_EXP 31
14719: PUSH
14720: LD_VAR 0 2
14724: ARRAY
14725: PUSH
14726: LD_EXP 31
14730: PUSH
14731: LD_VAR 0 3
14735: ARRAY
14736: NONEQUAL
14737: PUSH
14738: LD_EXP 36
14742: NOT
14743: PUSH
14744: LD_VAR 0 2
14748: PUSH
14749: LD_VAR 0 3
14753: NONEQUAL
14754: AND
14755: OR
14756: AND
14757: IFFALSE 14785
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14759: LD_VAR 0 3
14763: PPUSH
14764: LD_EXP 55
14768: PUSH
14769: LD_EXP 34
14773: PUSH
14774: LD_VAR 0 2
14778: ARRAY
14779: ARRAY
14780: PPUSH
14781: CALL_OW 334
14785: GO 14701
14787: POP
14788: POP
// end ;
14789: GO 14649
14791: POP
14792: POP
// end ;
14793: LD_VAR 0 1
14797: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14798: LD_EXP 56
14802: IFFALSE 14977
14804: GO 14806
14806: DISABLE
14807: LD_INT 0
14809: PPUSH
14810: PPUSH
// begin for i := 1 to 8 do
14811: LD_ADDR_VAR 0 1
14815: PUSH
14816: DOUBLE
14817: LD_INT 1
14819: DEC
14820: ST_TO_ADDR
14821: LD_INT 8
14823: PUSH
14824: FOR_TO
14825: IFFALSE 14974
// if Side_Positions [ i ] then
14827: LD_EXP 34
14831: PUSH
14832: LD_VAR 0 1
14836: ARRAY
14837: IFFALSE 14972
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14839: LD_ADDR_VAR 0 2
14843: PUSH
14844: LD_EXP 55
14848: PUSH
14849: LD_EXP 34
14853: PUSH
14854: LD_VAR 0 1
14858: ARRAY
14859: ARRAY
14860: PPUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 2
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 22
14891: PUSH
14892: LD_OWVAR 2
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 70
14909: PUSH
14910: FOR_IN
14911: IFFALSE 14970
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14913: LD_EXP 31
14917: PUSH
14918: LD_VAR 0 1
14922: ARRAY
14923: PUSH
14924: LD_EXP 31
14928: PUSH
14929: LD_OWVAR 2
14933: ARRAY
14934: NONEQUAL
14935: PUSH
14936: LD_EXP 36
14940: NOT
14941: PUSH
14942: LD_VAR 0 1
14946: PUSH
14947: LD_OWVAR 2
14951: NONEQUAL
14952: AND
14953: OR
14954: IFFALSE 14968
// ComMoveToArea ( un , BuildUpEscape ) ;
14956: LD_VAR 0 2
14960: PPUSH
14961: LD_INT 17
14963: PPUSH
14964: CALL_OW 113
14968: GO 14910
14970: POP
14971: POP
14972: GO 14824
14974: POP
14975: POP
// enable ;
14976: ENABLE
// end ;
14977: PPOPN 2
14979: END
// every 0 0$1 trigger def_builduptime do
14980: LD_EXP 14
14984: IFFALSE 15010
14986: GO 14988
14988: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14989: LD_INT 8400
14991: PUSH
14992: LD_EXP 14
14996: PUSH
14997: LD_INT 2100
14999: MUL
15000: PLUS
15001: PPUSH
15002: CALL_OW 67
// EndBuildUp ;
15006: CALL 14623 0 0
// end ;
15010: END
