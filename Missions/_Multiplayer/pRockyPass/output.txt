// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46294 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46670 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 32
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 33
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 35
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 35
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 34
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 31
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45659 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45659 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45659 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45659 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45659 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45659 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 5008 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 45492 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 45492 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 45492 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 45492 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 45492 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 45492 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 45492 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 45492 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 45492 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 45492 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 45492 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 45492 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45659 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45659 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45659 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45659 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45659 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45659 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45659 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45659 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45659 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45659 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45659 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45659 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45659 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45659 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45659 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45659 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45659 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45659 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2721
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// x := 1 ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// repeat wait ( time ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 67
// x := Inc ( x ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL 42313 0 1
2466: ST_TO_ADDR
// if x > 5 then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: GREATER
2475: IFFALSE 2485
// x := 1 ;
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for i in areas do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_VAR 0 5
2494: PUSH
2495: FOR_IN
2496: IFFALSE 2535
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2498: LD_VAR 0 1
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 287
2510: PUSH
2511: LD_INT 20
2513: LESS
2514: IFFALSE 2533
// begin CreateCratesArea ( x , i , true ) ;
2516: LD_VAR 0 2
2520: PPUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ; end ;
2533: GO 2495
2535: POP
2536: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 287
2547: PUSH
2548: LD_INT 100
2550: LESS
2551: IFFALSE 2595
// for i := 1 to Count ( areas ) do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_VAR 0 5
2567: PPUSH
2568: CALL 5008 0 1
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2593
// CreateCratesArea ( x , MZBaseArea , true ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 14
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 55
2591: GO 2573
2593: POP
2594: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2595: LD_INT 15
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 287
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2648
// begin for i := 1 to 3 do
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_INT 3
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2644
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 15
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 55
2642: GO 2624
2644: POP
2645: POP
// end else
2646: GO 2679
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2648: LD_INT 15
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 287
2658: PUSH
2659: LD_INT 30
2661: LESS
2662: IFFALSE 2679
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 15
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 55
// time := time + delayTime ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 7
2693: PLUS
2694: ST_TO_ADDR
// if time > maxTime then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_VAR 0 8
2704: GREATER
2705: IFFALSE 2717
// time := normalTime ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_VAR 0 6
2716: ST_TO_ADDR
// until false ;
2717: LD_INT 0
2719: IFFALSE 2443
// end ; end_of_file
2721: PPOPN 8
2723: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL 55456 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: CALL 51442 0 1
// end ;
2742: PPOPN 1
2744: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL 55473 0 1
// end ;
2754: PPOPN 1
2756: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 52149 0 1
2766: PPOPN 1
2768: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 55514 0 2
2783: PPOPN 2
2785: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_VAR 0 3
2800: PPUSH
2801: CALL 52202 0 3
2805: PPOPN 3
2807: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2808: LD_INT 0
2810: PPUSH
2811: PPUSH
// if exist_mode then
2812: LD_VAR 0 2
2816: IFFALSE 2862
// begin unit := CreateCharacter ( prefix & ident ) ;
2818: LD_ADDR_VAR 0 5
2822: PUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_VAR 0 1
2832: STR
2833: PPUSH
2834: CALL_OW 34
2838: ST_TO_ADDR
// if unit then
2839: LD_VAR 0 5
2843: IFFALSE 2860
// DeleteCharacters ( prefix & ident ) ;
2845: LD_VAR 0 3
2849: PUSH
2850: LD_VAR 0 1
2854: STR
2855: PPUSH
2856: CALL_OW 40
// end else
2860: GO 2877
// unit := NewCharacter ( ident ) ;
2862: LD_ADDR_VAR 0 5
2866: PUSH
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL_OW 25
2876: ST_TO_ADDR
// result := unit ;
2877: LD_ADDR_VAR 0 4
2881: PUSH
2882: LD_VAR 0 5
2886: ST_TO_ADDR
// end ;
2887: LD_VAR 0 4
2891: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
// if exist_mode then
2896: LD_VAR 0 2
2900: IFFALSE 2925
// unit := CreateCharacter ( prefix & ident ) else
2902: LD_ADDR_VAR 0 5
2906: PUSH
2907: LD_VAR 0 3
2911: PUSH
2912: LD_VAR 0 1
2916: STR
2917: PPUSH
2918: CALL_OW 34
2922: ST_TO_ADDR
2923: GO 2940
// unit := NewCharacter ( ident ) ;
2925: LD_ADDR_VAR 0 5
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 25
2939: ST_TO_ADDR
// result := unit ;
2940: LD_ADDR_VAR 0 4
2944: PUSH
2945: LD_VAR 0 5
2949: ST_TO_ADDR
// end ;
2950: LD_VAR 0 4
2954: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2955: LD_INT 0
2957: PPUSH
2958: PPUSH
// if not side or not nation then
2959: LD_VAR 0 1
2963: NOT
2964: IFTRUE 2973
2966: PUSH
2967: LD_VAR 0 2
2971: NOT
2972: OR
2973: IFFALSE 2977
// exit ;
2975: GO 3747
// case nation of nation_american :
2977: LD_VAR 0 2
2981: PUSH
2982: LD_INT 1
2984: DOUBLE
2985: EQUAL
2986: IFTRUE 2990
2988: GO 3204
2990: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 35
2998: PUSH
2999: LD_INT 45
3001: PUSH
3002: LD_INT 46
3004: PUSH
3005: LD_INT 47
3007: PUSH
3008: LD_INT 82
3010: PUSH
3011: LD_INT 83
3013: PUSH
3014: LD_INT 84
3016: PUSH
3017: LD_INT 85
3019: PUSH
3020: LD_INT 86
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: LD_INT 2
3028: PUSH
3029: LD_INT 6
3031: PUSH
3032: LD_INT 15
3034: PUSH
3035: LD_INT 16
3037: PUSH
3038: LD_INT 7
3040: PUSH
3041: LD_INT 12
3043: PUSH
3044: LD_INT 13
3046: PUSH
3047: LD_INT 10
3049: PUSH
3050: LD_INT 14
3052: PUSH
3053: LD_INT 20
3055: PUSH
3056: LD_INT 21
3058: PUSH
3059: LD_INT 22
3061: PUSH
3062: LD_INT 25
3064: PUSH
3065: LD_INT 32
3067: PUSH
3068: LD_INT 27
3070: PUSH
3071: LD_INT 36
3073: PUSH
3074: LD_INT 69
3076: PUSH
3077: LD_INT 39
3079: PUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 40
3085: PUSH
3086: LD_INT 48
3088: PUSH
3089: LD_INT 49
3091: PUSH
3092: LD_INT 50
3094: PUSH
3095: LD_INT 51
3097: PUSH
3098: LD_INT 52
3100: PUSH
3101: LD_INT 53
3103: PUSH
3104: LD_INT 54
3106: PUSH
3107: LD_INT 55
3109: PUSH
3110: LD_INT 56
3112: PUSH
3113: LD_INT 57
3115: PUSH
3116: LD_INT 58
3118: PUSH
3119: LD_INT 59
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: LD_INT 61
3127: PUSH
3128: LD_INT 62
3130: PUSH
3131: LD_INT 80
3133: PUSH
3134: LD_INT 82
3136: PUSH
3137: LD_INT 83
3139: PUSH
3140: LD_INT 84
3142: PUSH
3143: LD_INT 85
3145: PUSH
3146: LD_INT 86
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: ST_TO_ADDR
3202: GO 3669
3204: LD_INT 2
3206: DOUBLE
3207: EQUAL
3208: IFTRUE 3212
3210: GO 3438
3212: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3213: LD_ADDR_VAR 0 4
3217: PUSH
3218: LD_INT 35
3220: PUSH
3221: LD_INT 45
3223: PUSH
3224: LD_INT 46
3226: PUSH
3227: LD_INT 47
3229: PUSH
3230: LD_INT 82
3232: PUSH
3233: LD_INT 83
3235: PUSH
3236: LD_INT 84
3238: PUSH
3239: LD_INT 85
3241: PUSH
3242: LD_INT 87
3244: PUSH
3245: LD_INT 70
3247: PUSH
3248: LD_INT 1
3250: PUSH
3251: LD_INT 11
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 5
3262: PUSH
3263: LD_INT 6
3265: PUSH
3266: LD_INT 15
3268: PUSH
3269: LD_INT 18
3271: PUSH
3272: LD_INT 7
3274: PUSH
3275: LD_INT 17
3277: PUSH
3278: LD_INT 8
3280: PUSH
3281: LD_INT 20
3283: PUSH
3284: LD_INT 21
3286: PUSH
3287: LD_INT 22
3289: PUSH
3290: LD_INT 72
3292: PUSH
3293: LD_INT 26
3295: PUSH
3296: LD_INT 69
3298: PUSH
3299: LD_INT 39
3301: PUSH
3302: LD_INT 40
3304: PUSH
3305: LD_INT 41
3307: PUSH
3308: LD_INT 42
3310: PUSH
3311: LD_INT 43
3313: PUSH
3314: LD_INT 48
3316: PUSH
3317: LD_INT 49
3319: PUSH
3320: LD_INT 50
3322: PUSH
3323: LD_INT 51
3325: PUSH
3326: LD_INT 52
3328: PUSH
3329: LD_INT 53
3331: PUSH
3332: LD_INT 54
3334: PUSH
3335: LD_INT 55
3337: PUSH
3338: LD_INT 56
3340: PUSH
3341: LD_INT 60
3343: PUSH
3344: LD_INT 61
3346: PUSH
3347: LD_INT 62
3349: PUSH
3350: LD_INT 66
3352: PUSH
3353: LD_INT 67
3355: PUSH
3356: LD_INT 68
3358: PUSH
3359: LD_INT 81
3361: PUSH
3362: LD_INT 82
3364: PUSH
3365: LD_INT 83
3367: PUSH
3368: LD_INT 84
3370: PUSH
3371: LD_INT 85
3373: PUSH
3374: LD_INT 87
3376: PUSH
3377: LD_INT 88
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: ST_TO_ADDR
3436: GO 3669
3438: LD_INT 3
3440: DOUBLE
3441: EQUAL
3442: IFTRUE 3446
3444: GO 3668
3446: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3447: LD_ADDR_VAR 0 4
3451: PUSH
3452: LD_INT 46
3454: PUSH
3455: LD_INT 47
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: LD_INT 2
3463: PUSH
3464: LD_INT 82
3466: PUSH
3467: LD_INT 83
3469: PUSH
3470: LD_INT 84
3472: PUSH
3473: LD_INT 85
3475: PUSH
3476: LD_INT 86
3478: PUSH
3479: LD_INT 11
3481: PUSH
3482: LD_INT 9
3484: PUSH
3485: LD_INT 20
3487: PUSH
3488: LD_INT 19
3490: PUSH
3491: LD_INT 21
3493: PUSH
3494: LD_INT 24
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_INT 25
3502: PUSH
3503: LD_INT 28
3505: PUSH
3506: LD_INT 29
3508: PUSH
3509: LD_INT 30
3511: PUSH
3512: LD_INT 31
3514: PUSH
3515: LD_INT 37
3517: PUSH
3518: LD_INT 38
3520: PUSH
3521: LD_INT 32
3523: PUSH
3524: LD_INT 27
3526: PUSH
3527: LD_INT 33
3529: PUSH
3530: LD_INT 69
3532: PUSH
3533: LD_INT 39
3535: PUSH
3536: LD_INT 34
3538: PUSH
3539: LD_INT 40
3541: PUSH
3542: LD_INT 71
3544: PUSH
3545: LD_INT 23
3547: PUSH
3548: LD_INT 44
3550: PUSH
3551: LD_INT 48
3553: PUSH
3554: LD_INT 49
3556: PUSH
3557: LD_INT 50
3559: PUSH
3560: LD_INT 51
3562: PUSH
3563: LD_INT 52
3565: PUSH
3566: LD_INT 53
3568: PUSH
3569: LD_INT 54
3571: PUSH
3572: LD_INT 55
3574: PUSH
3575: LD_INT 56
3577: PUSH
3578: LD_INT 57
3580: PUSH
3581: LD_INT 58
3583: PUSH
3584: LD_INT 59
3586: PUSH
3587: LD_INT 63
3589: PUSH
3590: LD_INT 64
3592: PUSH
3593: LD_INT 65
3595: PUSH
3596: LD_INT 82
3598: PUSH
3599: LD_INT 83
3601: PUSH
3602: LD_INT 84
3604: PUSH
3605: LD_INT 85
3607: PUSH
3608: LD_INT 86
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: ST_TO_ADDR
3666: GO 3669
3668: POP
// if state > - 1 and state < 3 then
3669: LD_VAR 0 3
3673: PUSH
3674: LD_INT 1
3676: NEG
3677: GREATER
3678: IFFALSE 3690
3680: PUSH
3681: LD_VAR 0 3
3685: PUSH
3686: LD_INT 3
3688: LESS
3689: AND
3690: IFFALSE 3747
// for i in result do
3692: LD_ADDR_VAR 0 5
3696: PUSH
3697: LD_VAR 0 4
3701: PUSH
3702: FOR_IN
3703: IFFALSE 3745
// if GetTech ( i , side ) <> state then
3705: LD_VAR 0 5
3709: PPUSH
3710: LD_VAR 0 1
3714: PPUSH
3715: CALL_OW 321
3719: PUSH
3720: LD_VAR 0 3
3724: NONEQUAL
3725: IFFALSE 3743
// result := result diff i ;
3727: LD_ADDR_VAR 0 4
3731: PUSH
3732: LD_VAR 0 4
3736: PUSH
3737: LD_VAR 0 5
3741: DIFF
3742: ST_TO_ADDR
3743: GO 3702
3745: POP
3746: POP
// end ;
3747: LD_VAR 0 4
3751: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
3756: PPUSH
// result := true ;
3757: LD_ADDR_VAR 0 3
3761: PUSH
3762: LD_INT 1
3764: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3765: LD_ADDR_VAR 0 5
3769: PUSH
3770: LD_VAR 0 2
3774: PPUSH
3775: CALL_OW 480
3779: ST_TO_ADDR
// if not tmp then
3780: LD_VAR 0 5
3784: NOT
3785: IFFALSE 3789
// exit ;
3787: GO 3838
// for i in tmp do
3789: LD_ADDR_VAR 0 4
3793: PUSH
3794: LD_VAR 0 5
3798: PUSH
3799: FOR_IN
3800: IFFALSE 3836
// if GetTech ( i , side ) <> state_researched then
3802: LD_VAR 0 4
3806: PPUSH
3807: LD_VAR 0 1
3811: PPUSH
3812: CALL_OW 321
3816: PUSH
3817: LD_INT 2
3819: NONEQUAL
3820: IFFALSE 3834
// begin result := false ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: LD_INT 0
3829: ST_TO_ADDR
// exit ;
3830: POP
3831: POP
3832: GO 3838
// end ;
3834: GO 3799
3836: POP
3837: POP
// end ;
3838: LD_VAR 0 3
3842: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3843: LD_INT 0
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
3856: PPUSH
3857: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3858: LD_VAR 0 1
3862: NOT
3863: IFTRUE 3880
3865: PUSH
3866: LD_VAR 0 1
3870: PPUSH
3871: CALL_OW 257
3875: PUSH
3876: LD_INT 9
3878: NONEQUAL
3879: OR
3880: IFFALSE 3884
// exit ;
3882: GO 4463
// side := GetSide ( unit ) ;
3884: LD_ADDR_VAR 0 9
3888: PUSH
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 255
3898: ST_TO_ADDR
// tech_space := tech_spacanom ;
3899: LD_ADDR_VAR 0 12
3903: PUSH
3904: LD_INT 29
3906: ST_TO_ADDR
// tech_time := tech_taurad ;
3907: LD_ADDR_VAR 0 13
3911: PUSH
3912: LD_INT 28
3914: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3915: LD_ADDR_VAR 0 11
3919: PUSH
3920: LD_VAR 0 1
3924: PPUSH
3925: CALL_OW 310
3929: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3930: LD_VAR 0 11
3934: PPUSH
3935: CALL_OW 247
3939: PUSH
3940: LD_INT 2
3942: EQUAL
3943: IFFALSE 3947
// exit ;
3945: GO 4463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3947: LD_ADDR_VAR 0 8
3951: PUSH
3952: LD_INT 81
3954: PUSH
3955: LD_VAR 0 9
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PUSH
3964: LD_INT 3
3966: PUSH
3967: LD_INT 21
3969: PUSH
3970: LD_INT 3
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: ST_TO_ADDR
// if not tmp then
3990: LD_VAR 0 8
3994: NOT
3995: IFFALSE 3999
// exit ;
3997: GO 4463
// if in_unit then
3999: LD_VAR 0 11
4003: IFFALSE 4027
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4005: LD_ADDR_VAR 0 10
4009: PUSH
4010: LD_VAR 0 8
4014: PPUSH
4015: LD_VAR 0 11
4019: PPUSH
4020: CALL_OW 74
4024: ST_TO_ADDR
4025: GO 4047
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4027: LD_ADDR_VAR 0 10
4031: PUSH
4032: LD_VAR 0 8
4036: PPUSH
4037: LD_VAR 0 1
4041: PPUSH
4042: CALL_OW 74
4046: ST_TO_ADDR
// if not enemy then
4047: LD_VAR 0 10
4051: NOT
4052: IFFALSE 4056
// exit ;
4054: GO 4463
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4056: LD_VAR 0 11
4060: IFFALSE 4082
4062: PUSH
4063: LD_VAR 0 11
4067: PPUSH
4068: LD_VAR 0 10
4072: PPUSH
4073: CALL_OW 296
4077: PUSH
4078: LD_INT 13
4080: GREATER
4081: AND
4082: IFTRUE 4104
4084: PUSH
4085: LD_VAR 0 1
4089: PPUSH
4090: LD_VAR 0 10
4094: PPUSH
4095: CALL_OW 296
4099: PUSH
4100: LD_INT 12
4102: GREATER
4103: OR
4104: IFFALSE 4108
// exit ;
4106: GO 4463
// missile := [ 1 ] ;
4108: LD_ADDR_VAR 0 14
4112: PUSH
4113: LD_INT 1
4115: PUSH
4116: EMPTY
4117: LIST
4118: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4119: LD_VAR 0 9
4123: PPUSH
4124: LD_VAR 0 12
4128: PPUSH
4129: CALL_OW 325
4133: IFFALSE 4162
// missile := Replace ( missile , missile + 1 , 2 ) ;
4135: LD_ADDR_VAR 0 14
4139: PUSH
4140: LD_VAR 0 14
4144: PPUSH
4145: LD_VAR 0 14
4149: PUSH
4150: LD_INT 1
4152: PLUS
4153: PPUSH
4154: LD_INT 2
4156: PPUSH
4157: CALL_OW 1
4161: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4162: LD_VAR 0 9
4166: PPUSH
4167: LD_VAR 0 13
4171: PPUSH
4172: CALL_OW 325
4176: IFFALSE 4200
4178: PUSH
4179: LD_VAR 0 10
4183: PPUSH
4184: CALL_OW 255
4188: PPUSH
4189: LD_VAR 0 13
4193: PPUSH
4194: CALL_OW 325
4198: NOT
4199: AND
4200: IFFALSE 4229
// missile := Replace ( missile , missile + 1 , 3 ) ;
4202: LD_ADDR_VAR 0 14
4206: PUSH
4207: LD_VAR 0 14
4211: PPUSH
4212: LD_VAR 0 14
4216: PUSH
4217: LD_INT 1
4219: PLUS
4220: PPUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL_OW 1
4228: ST_TO_ADDR
// if missile < 2 then
4229: LD_VAR 0 14
4233: PUSH
4234: LD_INT 2
4236: LESS
4237: IFFALSE 4241
// exit ;
4239: GO 4463
// x := GetX ( enemy ) ;
4241: LD_ADDR_VAR 0 4
4245: PUSH
4246: LD_VAR 0 10
4250: PPUSH
4251: CALL_OW 250
4255: ST_TO_ADDR
// y := GetY ( enemy ) ;
4256: LD_ADDR_VAR 0 5
4260: PUSH
4261: LD_VAR 0 10
4265: PPUSH
4266: CALL_OW 251
4270: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_VAR 0 4
4280: PUSH
4281: LD_INT 1
4283: NEG
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: CALL_OW 12
4292: PLUS
4293: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4294: LD_ADDR_VAR 0 7
4298: PUSH
4299: LD_VAR 0 5
4303: PUSH
4304: LD_INT 1
4306: NEG
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: CALL_OW 12
4315: PLUS
4316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4317: LD_VAR 0 6
4321: PPUSH
4322: LD_VAR 0 7
4326: PPUSH
4327: CALL_OW 488
4331: NOT
4332: IFFALSE 4354
// begin _x := x ;
4334: LD_ADDR_VAR 0 6
4338: PUSH
4339: LD_VAR 0 4
4343: ST_TO_ADDR
// _y := y ;
4344: LD_ADDR_VAR 0 7
4348: PUSH
4349: LD_VAR 0 5
4353: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_VAR 0 14
4366: PPUSH
4367: CALL_OW 12
4371: ST_TO_ADDR
// case i of 1 :
4372: LD_VAR 0 3
4376: PUSH
4377: LD_INT 1
4379: DOUBLE
4380: EQUAL
4381: IFTRUE 4385
4383: GO 4402
4385: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4386: LD_VAR 0 1
4390: PPUSH
4391: LD_VAR 0 10
4395: PPUSH
4396: CALL_OW 115
4400: GO 4463
4402: LD_INT 2
4404: DOUBLE
4405: EQUAL
4406: IFTRUE 4410
4408: GO 4432
4410: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_VAR 0 6
4420: PPUSH
4421: LD_VAR 0 7
4425: PPUSH
4426: CALL_OW 153
4430: GO 4463
4432: LD_INT 3
4434: DOUBLE
4435: EQUAL
4436: IFTRUE 4440
4438: GO 4462
4440: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_VAR 0 6
4450: PPUSH
4451: LD_VAR 0 7
4455: PPUSH
4456: CALL_OW 154
4460: GO 4463
4462: POP
// end ;
4463: LD_VAR 0 2
4467: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4468: LD_INT 0
4470: PPUSH
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
// if not unit or not building then
4476: LD_VAR 0 1
4480: NOT
4481: IFTRUE 4490
4483: PUSH
4484: LD_VAR 0 2
4488: NOT
4489: OR
4490: IFFALSE 4494
// exit ;
4492: GO 4652
// x := GetX ( building ) ;
4494: LD_ADDR_VAR 0 5
4498: PUSH
4499: LD_VAR 0 2
4503: PPUSH
4504: CALL_OW 250
4508: ST_TO_ADDR
// y := GetY ( building ) ;
4509: LD_ADDR_VAR 0 6
4513: PUSH
4514: LD_VAR 0 2
4518: PPUSH
4519: CALL_OW 251
4523: ST_TO_ADDR
// for i := 0 to 5 do
4524: LD_ADDR_VAR 0 4
4528: PUSH
4529: DOUBLE
4530: LD_INT 0
4532: DEC
4533: ST_TO_ADDR
4534: LD_INT 5
4536: PUSH
4537: FOR_TO
4538: IFFALSE 4650
// begin _x := ShiftX ( x , i , 3 ) ;
4540: LD_ADDR_VAR 0 7
4544: PUSH
4545: LD_VAR 0 5
4549: PPUSH
4550: LD_VAR 0 4
4554: PPUSH
4555: LD_INT 3
4557: PPUSH
4558: CALL_OW 272
4562: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4563: LD_ADDR_VAR 0 8
4567: PUSH
4568: LD_VAR 0 6
4572: PPUSH
4573: LD_VAR 0 4
4577: PPUSH
4578: LD_INT 3
4580: PPUSH
4581: CALL_OW 273
4585: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4586: LD_VAR 0 7
4590: PPUSH
4591: LD_VAR 0 8
4595: PPUSH
4596: CALL_OW 488
4600: NOT
4601: IFFALSE 4605
// continue ;
4603: GO 4537
// if HexInfo ( _x , _y ) = 0 then
4605: LD_VAR 0 7
4609: PPUSH
4610: LD_VAR 0 8
4614: PPUSH
4615: CALL_OW 428
4619: PUSH
4620: LD_INT 0
4622: EQUAL
4623: IFFALSE 4648
// begin ComMoveXY ( unit , _x , _y ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: LD_VAR 0 7
4634: PPUSH
4635: LD_VAR 0 8
4639: PPUSH
4640: CALL_OW 111
// exit ;
4644: POP
4645: POP
4646: GO 4652
// end ; end ;
4648: GO 4537
4650: POP
4651: POP
// end ;
4652: LD_VAR 0 3
4656: RET
// export function ScanBase ( side , base_area ) ; begin
4657: LD_INT 0
4659: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: LD_INT 81
4672: PUSH
4673: LD_VAR 0 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 70
4686: ST_TO_ADDR
// end ;
4687: LD_VAR 0 3
4691: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4692: LD_INT 0
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// result := false ;
4698: LD_ADDR_VAR 0 2
4702: PUSH
4703: LD_INT 0
4705: ST_TO_ADDR
// side := GetSide ( unit ) ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_VAR 0 1
4715: PPUSH
4716: CALL_OW 255
4720: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4721: LD_ADDR_VAR 0 4
4725: PUSH
4726: LD_VAR 0 1
4730: PPUSH
4731: CALL_OW 248
4735: ST_TO_ADDR
// case nat of 1 :
4736: LD_VAR 0 4
4740: PUSH
4741: LD_INT 1
4743: DOUBLE
4744: EQUAL
4745: IFTRUE 4749
4747: GO 4760
4749: POP
// tech := tech_lassight ; 2 :
4750: LD_ADDR_VAR 0 5
4754: PUSH
4755: LD_INT 12
4757: ST_TO_ADDR
4758: GO 4799
4760: LD_INT 2
4762: DOUBLE
4763: EQUAL
4764: IFTRUE 4768
4766: GO 4779
4768: POP
// tech := tech_mortar ; 3 :
4769: LD_ADDR_VAR 0 5
4773: PUSH
4774: LD_INT 41
4776: ST_TO_ADDR
4777: GO 4799
4779: LD_INT 3
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4787
4785: GO 4798
4787: POP
// tech := tech_bazooka ; end ;
4788: LD_ADDR_VAR 0 5
4792: PUSH
4793: LD_INT 44
4795: ST_TO_ADDR
4796: GO 4799
4798: POP
// if Researched ( side , tech ) then
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_VAR 0 5
4808: PPUSH
4809: CALL_OW 325
4813: IFFALSE 4840
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: LD_INT 5
4822: PUSH
4823: LD_INT 8
4825: PUSH
4826: LD_INT 9
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: PUSH
4834: LD_VAR 0 4
4838: ARRAY
4839: ST_TO_ADDR
// end ;
4840: LD_VAR 0 2
4844: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
// if not mines then
4850: LD_VAR 0 2
4854: NOT
4855: IFFALSE 4859
// exit ;
4857: GO 5003
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4859: LD_ADDR_VAR 0 5
4863: PUSH
4864: LD_INT 81
4866: PUSH
4867: LD_VAR 0 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 3
4878: PUSH
4879: LD_INT 21
4881: PUSH
4882: LD_INT 3
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PPUSH
4897: CALL_OW 69
4901: ST_TO_ADDR
// for i in mines do
4902: LD_ADDR_VAR 0 4
4906: PUSH
4907: LD_VAR 0 2
4911: PUSH
4912: FOR_IN
4913: IFFALSE 5001
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4915: LD_VAR 0 4
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: LD_VAR 0 4
4928: PUSH
4929: LD_INT 2
4931: ARRAY
4932: PPUSH
4933: CALL_OW 458
4937: NOT
4938: IFFALSE 4942
// continue ;
4940: GO 4912
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4942: LD_VAR 0 4
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_VAR 0 4
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: CALL_OW 428
4964: PUSH
4965: LD_VAR 0 5
4969: IN
4970: IFFALSE 4999
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: PPUSH
4981: LD_VAR 0 4
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: LD_VAR 0 1
4994: PPUSH
4995: CALL_OW 456
// end ;
4999: GO 4912
5001: POP
5002: POP
// end ;
5003: LD_VAR 0 3
5007: RET
// export function Count ( array ) ; begin
5008: LD_INT 0
5010: PPUSH
// result := array + 0 ;
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_VAR 0 1
5020: PUSH
5021: LD_INT 0
5023: PLUS
5024: ST_TO_ADDR
// end ;
5025: LD_VAR 0 2
5029: RET
// export function IsEmpty ( building ) ; begin
5030: LD_INT 0
5032: PPUSH
// if not building then
5033: LD_VAR 0 1
5037: NOT
5038: IFFALSE 5042
// exit ;
5040: GO 5085
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5042: LD_ADDR_VAR 0 2
5046: PUSH
5047: LD_VAR 0 1
5051: PUSH
5052: LD_INT 22
5054: PUSH
5055: LD_VAR 0 1
5059: PPUSH
5060: CALL_OW 255
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 58
5071: PUSH
5072: EMPTY
5073: LIST
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PPUSH
5079: CALL_OW 69
5083: IN
5084: ST_TO_ADDR
// end ;
5085: LD_VAR 0 2
5089: RET
// export function IsNotFull ( building ) ; var places ; begin
5090: LD_INT 0
5092: PPUSH
5093: PPUSH
// if not building then
5094: LD_VAR 0 1
5098: NOT
5099: IFFALSE 5103
// exit ;
5101: GO 5131
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: LD_VAR 0 1
5112: PPUSH
5113: LD_INT 3
5115: PUSH
5116: LD_INT 62
5118: PUSH
5119: EMPTY
5120: LIST
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PPUSH
5126: CALL_OW 72
5130: ST_TO_ADDR
// end ;
5131: LD_VAR 0 2
5135: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// tmp := [ ] ;
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: EMPTY
5148: ST_TO_ADDR
// list := [ ] ;
5149: LD_ADDR_VAR 0 5
5153: PUSH
5154: EMPTY
5155: ST_TO_ADDR
// for i = 16 to 25 do
5156: LD_ADDR_VAR 0 4
5160: PUSH
5161: DOUBLE
5162: LD_INT 16
5164: DEC
5165: ST_TO_ADDR
5166: LD_INT 25
5168: PUSH
5169: FOR_TO
5170: IFFALSE 5243
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5172: LD_ADDR_VAR 0 3
5176: PUSH
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 22
5184: PUSH
5185: LD_VAR 0 1
5189: PPUSH
5190: CALL_OW 255
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 91
5201: PUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 6
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: LD_INT 30
5217: PUSH
5218: LD_VAR 0 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: PPUSH
5235: CALL_OW 69
5239: ADD
5240: ST_TO_ADDR
5241: GO 5169
5243: POP
5244: POP
// for i = 1 to tmp do
5245: LD_ADDR_VAR 0 4
5249: PUSH
5250: DOUBLE
5251: LD_INT 1
5253: DEC
5254: ST_TO_ADDR
5255: LD_VAR 0 3
5259: PUSH
5260: FOR_TO
5261: IFFALSE 5349
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5263: LD_ADDR_VAR 0 5
5267: PUSH
5268: LD_VAR 0 5
5272: PUSH
5273: LD_VAR 0 3
5277: PUSH
5278: LD_VAR 0 4
5282: ARRAY
5283: PPUSH
5284: CALL_OW 266
5288: PUSH
5289: LD_VAR 0 3
5293: PUSH
5294: LD_VAR 0 4
5298: ARRAY
5299: PPUSH
5300: CALL_OW 250
5304: PUSH
5305: LD_VAR 0 3
5309: PUSH
5310: LD_VAR 0 4
5314: ARRAY
5315: PPUSH
5316: CALL_OW 251
5320: PUSH
5321: LD_VAR 0 3
5325: PUSH
5326: LD_VAR 0 4
5330: ARRAY
5331: PPUSH
5332: CALL_OW 254
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: ADD
5346: ST_TO_ADDR
5347: GO 5260
5349: POP
5350: POP
// result := list ;
5351: LD_ADDR_VAR 0 2
5355: PUSH
5356: LD_VAR 0 5
5360: ST_TO_ADDR
// end ;
5361: LD_VAR 0 2
5365: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5366: LD_INT 0
5368: PPUSH
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
5374: PPUSH
// if not factory then
5375: LD_VAR 0 1
5379: NOT
5380: IFFALSE 5384
// exit ;
5382: GO 5987
// if control = control_apeman then
5384: LD_VAR 0 4
5388: PUSH
5389: LD_INT 5
5391: EQUAL
5392: IFFALSE 5501
// begin tmp := UnitsInside ( factory ) ;
5394: LD_ADDR_VAR 0 8
5398: PUSH
5399: LD_VAR 0 1
5403: PPUSH
5404: CALL_OW 313
5408: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5409: LD_VAR 0 8
5413: PPUSH
5414: LD_INT 25
5416: PUSH
5417: LD_INT 12
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PPUSH
5424: CALL_OW 72
5428: NOT
5429: IFFALSE 5439
// control := control_manual ;
5431: LD_ADDR_VAR 0 4
5435: PUSH
5436: LD_INT 1
5438: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5439: LD_ADDR_VAR 0 8
5443: PUSH
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL 5136 0 1
5453: ST_TO_ADDR
// if tmp then
5454: LD_VAR 0 8
5458: IFFALSE 5501
// begin for i in tmp do
5460: LD_ADDR_VAR 0 7
5464: PUSH
5465: LD_VAR 0 8
5469: PUSH
5470: FOR_IN
5471: IFFALSE 5499
// if i [ 1 ] = b_ext_radio then
5473: LD_VAR 0 7
5477: PUSH
5478: LD_INT 1
5480: ARRAY
5481: PUSH
5482: LD_INT 22
5484: EQUAL
5485: IFFALSE 5497
// begin control := control_remote ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// break ;
5495: GO 5499
// end ;
5497: GO 5470
5499: POP
5500: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5501: LD_VAR 0 1
5505: PPUSH
5506: LD_VAR 0 2
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: LD_VAR 0 4
5520: PPUSH
5521: LD_VAR 0 5
5525: PPUSH
5526: CALL_OW 448
5530: IFFALSE 5565
// begin result := [ chassis , engine , control , weapon ] ;
5532: LD_ADDR_VAR 0 6
5536: PUSH
5537: LD_VAR 0 2
5541: PUSH
5542: LD_VAR 0 3
5546: PUSH
5547: LD_VAR 0 4
5551: PUSH
5552: LD_VAR 0 5
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: ST_TO_ADDR
// exit ;
5563: GO 5987
// end ; _chassis := AvailableChassisList ( factory ) ;
5565: LD_ADDR_VAR 0 9
5569: PUSH
5570: LD_VAR 0 1
5574: PPUSH
5575: CALL_OW 475
5579: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5580: LD_ADDR_VAR 0 11
5584: PUSH
5585: LD_VAR 0 1
5589: PPUSH
5590: CALL_OW 476
5594: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5595: LD_ADDR_VAR 0 12
5599: PUSH
5600: LD_VAR 0 1
5604: PPUSH
5605: CALL_OW 477
5609: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5610: LD_ADDR_VAR 0 10
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: CALL_OW 478
5624: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5625: LD_VAR 0 9
5629: NOT
5630: IFTRUE 5639
5632: PUSH
5633: LD_VAR 0 11
5637: NOT
5638: OR
5639: IFTRUE 5648
5641: PUSH
5642: LD_VAR 0 12
5646: NOT
5647: OR
5648: IFTRUE 5657
5650: PUSH
5651: LD_VAR 0 10
5655: NOT
5656: OR
5657: IFFALSE 5692
// begin result := [ chassis , engine , control , weapon ] ;
5659: LD_ADDR_VAR 0 6
5663: PUSH
5664: LD_VAR 0 2
5668: PUSH
5669: LD_VAR 0 3
5673: PUSH
5674: LD_VAR 0 4
5678: PUSH
5679: LD_VAR 0 5
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: ST_TO_ADDR
// exit ;
5690: GO 5987
// end ; if not chassis in _chassis then
5692: LD_VAR 0 2
5696: PUSH
5697: LD_VAR 0 9
5701: IN
5702: NOT
5703: IFFALSE 5729
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5705: LD_ADDR_VAR 0 2
5709: PUSH
5710: LD_VAR 0 9
5714: PUSH
5715: LD_INT 1
5717: PPUSH
5718: LD_VAR 0 9
5722: PPUSH
5723: CALL_OW 12
5727: ARRAY
5728: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5729: LD_VAR 0 2
5733: PPUSH
5734: LD_VAR 0 3
5738: PPUSH
5739: CALL 5992 0 2
5743: NOT
5744: IFFALSE 5805
// repeat engine := _engine [ 1 ] ;
5746: LD_ADDR_VAR 0 3
5750: PUSH
5751: LD_VAR 0 11
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5760: LD_ADDR_VAR 0 11
5764: PUSH
5765: LD_VAR 0 11
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: CALL_OW 3
5777: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5778: LD_VAR 0 2
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: CALL 5992 0 2
5792: IFTRUE 5803
5794: PUSH
5795: LD_VAR 0 11
5799: PUSH
5800: EMPTY
5801: EQUAL
5802: OR
5803: IFFALSE 5746
// if not control in _control then
5805: LD_VAR 0 4
5809: PUSH
5810: LD_VAR 0 12
5814: IN
5815: NOT
5816: IFFALSE 5842
// control := _control [ rand ( 1 , _control ) ] ;
5818: LD_ADDR_VAR 0 4
5822: PUSH
5823: LD_VAR 0 12
5827: PUSH
5828: LD_INT 1
5830: PPUSH
5831: LD_VAR 0 12
5835: PPUSH
5836: CALL_OW 12
5840: ARRAY
5841: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5842: LD_VAR 0 2
5846: PPUSH
5847: LD_VAR 0 5
5851: PPUSH
5852: CALL 6214 0 2
5856: NOT
5857: IFFALSE 5918
// repeat weapon := _weapon [ 1 ] ;
5859: LD_ADDR_VAR 0 5
5863: PUSH
5864: LD_VAR 0 10
5868: PUSH
5869: LD_INT 1
5871: ARRAY
5872: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5873: LD_ADDR_VAR 0 10
5877: PUSH
5878: LD_VAR 0 10
5882: PPUSH
5883: LD_INT 1
5885: PPUSH
5886: CALL_OW 3
5890: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5891: LD_VAR 0 2
5895: PPUSH
5896: LD_VAR 0 5
5900: PPUSH
5901: CALL 6214 0 2
5905: IFTRUE 5916
5907: PUSH
5908: LD_VAR 0 10
5912: PUSH
5913: EMPTY
5914: EQUAL
5915: OR
5916: IFFALSE 5859
// result := [ ] ;
5918: LD_ADDR_VAR 0 6
5922: PUSH
5923: EMPTY
5924: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5925: LD_VAR 0 1
5929: PPUSH
5930: LD_VAR 0 2
5934: PPUSH
5935: LD_VAR 0 3
5939: PPUSH
5940: LD_VAR 0 4
5944: PPUSH
5945: LD_VAR 0 5
5949: PPUSH
5950: CALL_OW 448
5954: IFFALSE 5987
// result := [ chassis , engine , control , weapon ] ;
5956: LD_ADDR_VAR 0 6
5960: PUSH
5961: LD_VAR 0 2
5965: PUSH
5966: LD_VAR 0 3
5970: PUSH
5971: LD_VAR 0 4
5975: PUSH
5976: LD_VAR 0 5
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: ST_TO_ADDR
// end ;
5987: LD_VAR 0 6
5991: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5992: LD_INT 0
5994: PPUSH
// if not chassis or not engine then
5995: LD_VAR 0 1
5999: NOT
6000: IFTRUE 6009
6002: PUSH
6003: LD_VAR 0 2
6007: NOT
6008: OR
6009: IFFALSE 6013
// exit ;
6011: GO 6209
// case engine of engine_solar :
6013: LD_VAR 0 2
6017: PUSH
6018: LD_INT 2
6020: DOUBLE
6021: EQUAL
6022: IFTRUE 6026
6024: GO 6064
6026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6027: LD_ADDR_VAR 0 3
6031: PUSH
6032: LD_INT 11
6034: PUSH
6035: LD_INT 12
6037: PUSH
6038: LD_INT 13
6040: PUSH
6041: LD_INT 14
6043: PUSH
6044: LD_INT 1
6046: PUSH
6047: LD_INT 2
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: ST_TO_ADDR
6062: GO 6193
6064: LD_INT 1
6066: DOUBLE
6067: EQUAL
6068: IFTRUE 6072
6070: GO 6134
6072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6073: LD_ADDR_VAR 0 3
6077: PUSH
6078: LD_INT 11
6080: PUSH
6081: LD_INT 12
6083: PUSH
6084: LD_INT 13
6086: PUSH
6087: LD_INT 14
6089: PUSH
6090: LD_INT 1
6092: PUSH
6093: LD_INT 2
6095: PUSH
6096: LD_INT 3
6098: PUSH
6099: LD_INT 4
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 21
6107: PUSH
6108: LD_INT 23
6110: PUSH
6111: LD_INT 22
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: ST_TO_ADDR
6132: GO 6193
6134: LD_INT 3
6136: DOUBLE
6137: EQUAL
6138: IFTRUE 6142
6140: GO 6192
6142: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6143: LD_ADDR_VAR 0 3
6147: PUSH
6148: LD_INT 13
6150: PUSH
6151: LD_INT 14
6153: PUSH
6154: LD_INT 2
6156: PUSH
6157: LD_INT 3
6159: PUSH
6160: LD_INT 4
6162: PUSH
6163: LD_INT 5
6165: PUSH
6166: LD_INT 21
6168: PUSH
6169: LD_INT 22
6171: PUSH
6172: LD_INT 23
6174: PUSH
6175: LD_INT 24
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: ST_TO_ADDR
6190: GO 6193
6192: POP
// result := ( chassis in result ) ;
6193: LD_ADDR_VAR 0 3
6197: PUSH
6198: LD_VAR 0 1
6202: PUSH
6203: LD_VAR 0 3
6207: IN
6208: ST_TO_ADDR
// end ;
6209: LD_VAR 0 3
6213: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6214: LD_INT 0
6216: PPUSH
// if not chassis or not weapon then
6217: LD_VAR 0 1
6221: NOT
6222: IFTRUE 6231
6224: PUSH
6225: LD_VAR 0 2
6229: NOT
6230: OR
6231: IFFALSE 6235
// exit ;
6233: GO 7295
// case weapon of us_machine_gun :
6235: LD_VAR 0 2
6239: PUSH
6240: LD_INT 2
6242: DOUBLE
6243: EQUAL
6244: IFTRUE 6248
6246: GO 6278
6248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6249: LD_ADDR_VAR 0 3
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 3
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: ST_TO_ADDR
6276: GO 7279
6278: LD_INT 3
6280: DOUBLE
6281: EQUAL
6282: IFTRUE 6286
6284: GO 6316
6286: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6287: LD_ADDR_VAR 0 3
6291: PUSH
6292: LD_INT 1
6294: PUSH
6295: LD_INT 2
6297: PUSH
6298: LD_INT 3
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: ST_TO_ADDR
6314: GO 7279
6316: LD_INT 11
6318: DOUBLE
6319: EQUAL
6320: IFTRUE 6324
6322: GO 6354
6324: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: LD_INT 1
6332: PUSH
6333: LD_INT 2
6335: PUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: LD_INT 5
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: ST_TO_ADDR
6352: GO 7279
6354: LD_INT 4
6356: DOUBLE
6357: EQUAL
6358: IFTRUE 6362
6360: GO 6388
6362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: LD_INT 5
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: ST_TO_ADDR
6386: GO 7279
6388: LD_INT 5
6390: DOUBLE
6391: EQUAL
6392: IFTRUE 6396
6394: GO 6422
6396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6397: LD_ADDR_VAR 0 3
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: ST_TO_ADDR
6420: GO 7279
6422: LD_INT 9
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 6456
6430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6431: LD_ADDR_VAR 0 3
6435: PUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 3
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: ST_TO_ADDR
6454: GO 7279
6456: LD_INT 7
6458: DOUBLE
6459: EQUAL
6460: IFTRUE 6464
6462: GO 6490
6464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6465: LD_ADDR_VAR 0 3
6469: PUSH
6470: LD_INT 2
6472: PUSH
6473: LD_INT 3
6475: PUSH
6476: LD_INT 4
6478: PUSH
6479: LD_INT 5
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: ST_TO_ADDR
6488: GO 7279
6490: LD_INT 12
6492: DOUBLE
6493: EQUAL
6494: IFTRUE 6498
6496: GO 6524
6498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6499: LD_ADDR_VAR 0 3
6503: PUSH
6504: LD_INT 2
6506: PUSH
6507: LD_INT 3
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: LD_INT 5
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 7279
6524: LD_INT 13
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6558
6532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6533: LD_ADDR_VAR 0 3
6537: PUSH
6538: LD_INT 2
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 4
6546: PUSH
6547: LD_INT 5
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: ST_TO_ADDR
6556: GO 7279
6558: LD_INT 14
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6584
6566: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_INT 4
6574: PUSH
6575: LD_INT 5
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: ST_TO_ADDR
6582: GO 7279
6584: LD_INT 6
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6610
6592: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6593: LD_ADDR_VAR 0 3
6597: PUSH
6598: LD_INT 4
6600: PUSH
6601: LD_INT 5
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: ST_TO_ADDR
6608: GO 7279
6610: LD_INT 10
6612: DOUBLE
6613: EQUAL
6614: IFTRUE 6618
6616: GO 6636
6618: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_INT 4
6626: PUSH
6627: LD_INT 5
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: ST_TO_ADDR
6634: GO 7279
6636: LD_INT 22
6638: DOUBLE
6639: EQUAL
6640: IFTRUE 6644
6642: GO 6670
6644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6645: LD_ADDR_VAR 0 3
6649: PUSH
6650: LD_INT 11
6652: PUSH
6653: LD_INT 12
6655: PUSH
6656: LD_INT 13
6658: PUSH
6659: LD_INT 14
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: ST_TO_ADDR
6668: GO 7279
6670: LD_INT 23
6672: DOUBLE
6673: EQUAL
6674: IFTRUE 6678
6676: GO 6704
6678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6679: LD_ADDR_VAR 0 3
6683: PUSH
6684: LD_INT 11
6686: PUSH
6687: LD_INT 12
6689: PUSH
6690: LD_INT 13
6692: PUSH
6693: LD_INT 14
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: ST_TO_ADDR
6702: GO 7279
6704: LD_INT 24
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6712
6710: GO 6738
6712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: LD_INT 11
6720: PUSH
6721: LD_INT 12
6723: PUSH
6724: LD_INT 13
6726: PUSH
6727: LD_INT 14
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: ST_TO_ADDR
6736: GO 7279
6738: LD_INT 30
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6746
6744: GO 6772
6746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6747: LD_ADDR_VAR 0 3
6751: PUSH
6752: LD_INT 11
6754: PUSH
6755: LD_INT 12
6757: PUSH
6758: LD_INT 13
6760: PUSH
6761: LD_INT 14
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: ST_TO_ADDR
6770: GO 7279
6772: LD_INT 25
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6798
6780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: LD_INT 13
6788: PUSH
6789: LD_INT 14
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: ST_TO_ADDR
6796: GO 7279
6798: LD_INT 27
6800: DOUBLE
6801: EQUAL
6802: IFTRUE 6806
6804: GO 6824
6806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: LD_INT 13
6814: PUSH
6815: LD_INT 14
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
6822: GO 7279
6824: LD_INT 92
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6858
6832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6833: LD_ADDR_VAR 0 3
6837: PUSH
6838: LD_INT 11
6840: PUSH
6841: LD_INT 12
6843: PUSH
6844: LD_INT 13
6846: PUSH
6847: LD_INT 14
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: ST_TO_ADDR
6856: GO 7279
6858: LD_INT 28
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6884
6866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_INT 13
6874: PUSH
6875: LD_INT 14
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: ST_TO_ADDR
6882: GO 7279
6884: LD_INT 29
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6892
6890: GO 6910
6892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_INT 13
6900: PUSH
6901: LD_INT 14
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: ST_TO_ADDR
6908: GO 7279
6910: LD_INT 31
6912: DOUBLE
6913: EQUAL
6914: IFTRUE 6918
6916: GO 6936
6918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_INT 13
6926: PUSH
6927: LD_INT 14
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: ST_TO_ADDR
6934: GO 7279
6936: LD_INT 26
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 6962
6944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: LD_INT 13
6952: PUSH
6953: LD_INT 14
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: ST_TO_ADDR
6960: GO 7279
6962: LD_INT 42
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 6996
6970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6971: LD_ADDR_VAR 0 3
6975: PUSH
6976: LD_INT 21
6978: PUSH
6979: LD_INT 22
6981: PUSH
6982: LD_INT 23
6984: PUSH
6985: LD_INT 24
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: ST_TO_ADDR
6994: GO 7279
6996: LD_INT 43
6998: DOUBLE
6999: EQUAL
7000: IFTRUE 7004
7002: GO 7030
7004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7005: LD_ADDR_VAR 0 3
7009: PUSH
7010: LD_INT 21
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_INT 23
7018: PUSH
7019: LD_INT 24
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: ST_TO_ADDR
7028: GO 7279
7030: LD_INT 44
7032: DOUBLE
7033: EQUAL
7034: IFTRUE 7038
7036: GO 7064
7038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 22
7049: PUSH
7050: LD_INT 23
7052: PUSH
7053: LD_INT 24
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: ST_TO_ADDR
7062: GO 7279
7064: LD_INT 45
7066: DOUBLE
7067: EQUAL
7068: IFTRUE 7072
7070: GO 7098
7072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7073: LD_ADDR_VAR 0 3
7077: PUSH
7078: LD_INT 21
7080: PUSH
7081: LD_INT 22
7083: PUSH
7084: LD_INT 23
7086: PUSH
7087: LD_INT 24
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: ST_TO_ADDR
7096: GO 7279
7098: LD_INT 49
7100: DOUBLE
7101: EQUAL
7102: IFTRUE 7106
7104: GO 7132
7106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7107: LD_ADDR_VAR 0 3
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 22
7117: PUSH
7118: LD_INT 23
7120: PUSH
7121: LD_INT 24
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: ST_TO_ADDR
7130: GO 7279
7132: LD_INT 51
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7140
7138: GO 7166
7140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7141: LD_ADDR_VAR 0 3
7145: PUSH
7146: LD_INT 21
7148: PUSH
7149: LD_INT 22
7151: PUSH
7152: LD_INT 23
7154: PUSH
7155: LD_INT 24
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: ST_TO_ADDR
7164: GO 7279
7166: LD_INT 52
7168: DOUBLE
7169: EQUAL
7170: IFTRUE 7174
7172: GO 7200
7174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7175: LD_ADDR_VAR 0 3
7179: PUSH
7180: LD_INT 21
7182: PUSH
7183: LD_INT 22
7185: PUSH
7186: LD_INT 23
7188: PUSH
7189: LD_INT 24
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: ST_TO_ADDR
7198: GO 7279
7200: LD_INT 53
7202: DOUBLE
7203: EQUAL
7204: IFTRUE 7208
7206: GO 7226
7208: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 23
7216: PUSH
7217: LD_INT 24
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: ST_TO_ADDR
7224: GO 7279
7226: LD_INT 46
7228: DOUBLE
7229: EQUAL
7230: IFTRUE 7234
7232: GO 7252
7234: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7235: LD_ADDR_VAR 0 3
7239: PUSH
7240: LD_INT 23
7242: PUSH
7243: LD_INT 24
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: ST_TO_ADDR
7250: GO 7279
7252: LD_INT 47
7254: DOUBLE
7255: EQUAL
7256: IFTRUE 7260
7258: GO 7278
7260: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7261: LD_ADDR_VAR 0 3
7265: PUSH
7266: LD_INT 23
7268: PUSH
7269: LD_INT 24
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: ST_TO_ADDR
7276: GO 7279
7278: POP
// result := ( chassis in result ) ;
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 1
7288: PUSH
7289: LD_VAR 0 3
7293: IN
7294: ST_TO_ADDR
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// result := array ;
7309: LD_ADDR_VAR 0 5
7313: PUSH
7314: LD_VAR 0 1
7318: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7319: LD_VAR 0 1
7323: NOT
7324: IFTRUE 7333
7326: PUSH
7327: LD_VAR 0 2
7331: NOT
7332: OR
7333: IFTRUE 7342
7335: PUSH
7336: LD_VAR 0 3
7340: NOT
7341: OR
7342: IFTRUE 7356
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_VAR 0 1
7354: GREATER
7355: OR
7356: IFTRUE 7370
7358: PUSH
7359: LD_VAR 0 3
7363: PUSH
7364: LD_VAR 0 1
7368: GREATER
7369: OR
7370: IFFALSE 7374
// exit ;
7372: GO 7670
// if direction then
7374: LD_VAR 0 4
7378: IFFALSE 7442
// begin d := 1 ;
7380: LD_ADDR_VAR 0 9
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// if i_from > i_to then
7388: LD_VAR 0 2
7392: PUSH
7393: LD_VAR 0 3
7397: GREATER
7398: IFFALSE 7424
// length := ( array - i_from ) + i_to else
7400: LD_ADDR_VAR 0 11
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: LD_VAR 0 2
7414: MINUS
7415: PUSH
7416: LD_VAR 0 3
7420: PLUS
7421: ST_TO_ADDR
7422: GO 7440
// length := i_to - i_from ;
7424: LD_ADDR_VAR 0 11
7428: PUSH
7429: LD_VAR 0 3
7433: PUSH
7434: LD_VAR 0 2
7438: MINUS
7439: ST_TO_ADDR
// end else
7440: GO 7503
// begin d := - 1 ;
7442: LD_ADDR_VAR 0 9
7446: PUSH
7447: LD_INT 1
7449: NEG
7450: ST_TO_ADDR
// if i_from > i_to then
7451: LD_VAR 0 2
7455: PUSH
7456: LD_VAR 0 3
7460: GREATER
7461: IFFALSE 7481
// length := i_from - i_to else
7463: LD_ADDR_VAR 0 11
7467: PUSH
7468: LD_VAR 0 2
7472: PUSH
7473: LD_VAR 0 3
7477: MINUS
7478: ST_TO_ADDR
7479: GO 7503
// length := ( array - i_to ) + i_from ;
7481: LD_ADDR_VAR 0 11
7485: PUSH
7486: LD_VAR 0 1
7490: PUSH
7491: LD_VAR 0 3
7495: MINUS
7496: PUSH
7497: LD_VAR 0 2
7501: PLUS
7502: ST_TO_ADDR
// end ; if not length then
7503: LD_VAR 0 11
7507: NOT
7508: IFFALSE 7512
// exit ;
7510: GO 7670
// tmp := array ;
7512: LD_ADDR_VAR 0 10
7516: PUSH
7517: LD_VAR 0 1
7521: ST_TO_ADDR
// for i = 1 to length do
7522: LD_ADDR_VAR 0 6
7526: PUSH
7527: DOUBLE
7528: LD_INT 1
7530: DEC
7531: ST_TO_ADDR
7532: LD_VAR 0 11
7536: PUSH
7537: FOR_TO
7538: IFFALSE 7658
// begin for j = 1 to array do
7540: LD_ADDR_VAR 0 7
7544: PUSH
7545: DOUBLE
7546: LD_INT 1
7548: DEC
7549: ST_TO_ADDR
7550: LD_VAR 0 1
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7644
// begin k := j + d ;
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: LD_VAR 0 7
7567: PUSH
7568: LD_VAR 0 9
7572: PLUS
7573: ST_TO_ADDR
// if k > array then
7574: LD_VAR 0 8
7578: PUSH
7579: LD_VAR 0 1
7583: GREATER
7584: IFFALSE 7594
// k := 1 ;
7586: LD_ADDR_VAR 0 8
7590: PUSH
7591: LD_INT 1
7593: ST_TO_ADDR
// if not k then
7594: LD_VAR 0 8
7598: NOT
7599: IFFALSE 7611
// k := array ;
7601: LD_ADDR_VAR 0 8
7605: PUSH
7606: LD_VAR 0 1
7610: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7611: LD_ADDR_VAR 0 10
7615: PUSH
7616: LD_VAR 0 10
7620: PPUSH
7621: LD_VAR 0 8
7625: PPUSH
7626: LD_VAR 0 1
7630: PUSH
7631: LD_VAR 0 7
7635: ARRAY
7636: PPUSH
7637: CALL_OW 1
7641: ST_TO_ADDR
// end ;
7642: GO 7555
7644: POP
7645: POP
// array := tmp ;
7646: LD_ADDR_VAR 0 1
7650: PUSH
7651: LD_VAR 0 10
7655: ST_TO_ADDR
// end ;
7656: GO 7537
7658: POP
7659: POP
// result := array ;
7660: LD_ADDR_VAR 0 5
7664: PUSH
7665: LD_VAR 0 1
7669: ST_TO_ADDR
// end ;
7670: LD_VAR 0 5
7674: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7675: LD_INT 0
7677: PPUSH
7678: PPUSH
// result := 0 ;
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: LD_INT 0
7686: ST_TO_ADDR
// if not array or not value in array then
7687: LD_VAR 0 1
7691: NOT
7692: IFTRUE 7707
7694: PUSH
7695: LD_VAR 0 2
7699: PUSH
7700: LD_VAR 0 1
7704: IN
7705: NOT
7706: OR
7707: IFFALSE 7711
// exit ;
7709: GO 7765
// for i = 1 to array do
7711: LD_ADDR_VAR 0 4
7715: PUSH
7716: DOUBLE
7717: LD_INT 1
7719: DEC
7720: ST_TO_ADDR
7721: LD_VAR 0 1
7725: PUSH
7726: FOR_TO
7727: IFFALSE 7763
// if value = array [ i ] then
7729: LD_VAR 0 2
7733: PUSH
7734: LD_VAR 0 1
7738: PUSH
7739: LD_VAR 0 4
7743: ARRAY
7744: EQUAL
7745: IFFALSE 7761
// begin result := i ;
7747: LD_ADDR_VAR 0 3
7751: PUSH
7752: LD_VAR 0 4
7756: ST_TO_ADDR
// exit ;
7757: POP
7758: POP
7759: GO 7765
// end ;
7761: GO 7726
7763: POP
7764: POP
// end ;
7765: LD_VAR 0 3
7769: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7770: LD_INT 0
7772: PPUSH
// vc_chassis := chassis ;
7773: LD_ADDR_OWVAR 37
7777: PUSH
7778: LD_VAR 0 1
7782: ST_TO_ADDR
// vc_engine := engine ;
7783: LD_ADDR_OWVAR 39
7787: PUSH
7788: LD_VAR 0 2
7792: ST_TO_ADDR
// vc_control := control ;
7793: LD_ADDR_OWVAR 38
7797: PUSH
7798: LD_VAR 0 3
7802: ST_TO_ADDR
// vc_weapon := weapon ;
7803: LD_ADDR_OWVAR 40
7807: PUSH
7808: LD_VAR 0 4
7812: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7813: LD_ADDR_OWVAR 41
7817: PUSH
7818: LD_VAR 0 5
7822: ST_TO_ADDR
// end ;
7823: LD_VAR 0 6
7827: RET
// export function WantPlant ( unit ) ; var task ; begin
7828: LD_INT 0
7830: PPUSH
7831: PPUSH
// result := false ;
7832: LD_ADDR_VAR 0 2
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7840: LD_ADDR_VAR 0 3
7844: PUSH
7845: LD_VAR 0 1
7849: PPUSH
7850: CALL_OW 437
7854: ST_TO_ADDR
// if task then
7855: LD_VAR 0 3
7859: IFFALSE 7887
// if task [ 1 ] [ 1 ] = p then
7861: LD_VAR 0 3
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PUSH
7870: LD_INT 1
7872: ARRAY
7873: PUSH
7874: LD_STRING p
7876: EQUAL
7877: IFFALSE 7887
// result := true ;
7879: LD_ADDR_VAR 0 2
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end ;
7887: LD_VAR 0 2
7891: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7892: LD_INT 0
7894: PPUSH
7895: PPUSH
7896: PPUSH
7897: PPUSH
// if pos < 1 then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 1
7905: LESS
7906: IFFALSE 7910
// exit ;
7908: GO 8213
// if pos = 1 then
7910: LD_VAR 0 2
7914: PUSH
7915: LD_INT 1
7917: EQUAL
7918: IFFALSE 7951
// result := Replace ( arr , pos [ 1 ] , value ) else
7920: LD_ADDR_VAR 0 4
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 2
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: LD_VAR 0 3
7943: PPUSH
7944: CALL_OW 1
7948: ST_TO_ADDR
7949: GO 8213
// begin tmp := arr ;
7951: LD_ADDR_VAR 0 6
7955: PUSH
7956: LD_VAR 0 1
7960: ST_TO_ADDR
// s_arr := [ tmp ] ;
7961: LD_ADDR_VAR 0 7
7965: PUSH
7966: LD_VAR 0 6
7970: PUSH
7971: EMPTY
7972: LIST
7973: ST_TO_ADDR
// for i = 1 to pos - 1 do
7974: LD_ADDR_VAR 0 5
7978: PUSH
7979: DOUBLE
7980: LD_INT 1
7982: DEC
7983: ST_TO_ADDR
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: MINUS
7992: PUSH
7993: FOR_TO
7994: IFFALSE 8039
// begin tmp := tmp [ pos [ i ] ] ;
7996: LD_ADDR_VAR 0 6
8000: PUSH
8001: LD_VAR 0 6
8005: PUSH
8006: LD_VAR 0 2
8010: PUSH
8011: LD_VAR 0 5
8015: ARRAY
8016: ARRAY
8017: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8018: LD_ADDR_VAR 0 7
8022: PUSH
8023: LD_VAR 0 7
8027: PUSH
8028: LD_VAR 0 6
8032: PUSH
8033: EMPTY
8034: LIST
8035: ADD
8036: ST_TO_ADDR
// end ;
8037: GO 7993
8039: POP
8040: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8041: LD_ADDR_VAR 0 6
8045: PUSH
8046: LD_VAR 0 6
8050: PPUSH
8051: LD_VAR 0 2
8055: PUSH
8056: LD_VAR 0 2
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 3
8066: PPUSH
8067: CALL_OW 1
8071: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8072: LD_ADDR_VAR 0 7
8076: PUSH
8077: LD_VAR 0 7
8081: PPUSH
8082: LD_VAR 0 7
8086: PPUSH
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 1
8096: ST_TO_ADDR
// for i = s_arr downto 2 do
8097: LD_ADDR_VAR 0 5
8101: PUSH
8102: DOUBLE
8103: LD_VAR 0 7
8107: INC
8108: ST_TO_ADDR
8109: LD_INT 2
8111: PUSH
8112: FOR_DOWNTO
8113: IFFALSE 8197
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8115: LD_ADDR_VAR 0 6
8119: PUSH
8120: LD_VAR 0 7
8124: PUSH
8125: LD_VAR 0 5
8129: PUSH
8130: LD_INT 1
8132: MINUS
8133: ARRAY
8134: PPUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_VAR 0 5
8144: PUSH
8145: LD_INT 1
8147: MINUS
8148: ARRAY
8149: PPUSH
8150: LD_VAR 0 7
8154: PUSH
8155: LD_VAR 0 5
8159: ARRAY
8160: PPUSH
8161: CALL_OW 1
8165: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8166: LD_ADDR_VAR 0 7
8170: PUSH
8171: LD_VAR 0 7
8175: PPUSH
8176: LD_VAR 0 5
8180: PUSH
8181: LD_INT 1
8183: MINUS
8184: PPUSH
8185: LD_VAR 0 6
8189: PPUSH
8190: CALL_OW 1
8194: ST_TO_ADDR
// end ;
8195: GO 8112
8197: POP
8198: POP
// result := s_arr [ 1 ] ;
8199: LD_ADDR_VAR 0 4
8203: PUSH
8204: LD_VAR 0 7
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: ST_TO_ADDR
// end ; end ;
8213: LD_VAR 0 4
8217: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8218: LD_INT 0
8220: PPUSH
8221: PPUSH
// if not list then
8222: LD_VAR 0 1
8226: NOT
8227: IFFALSE 8231
// exit ;
8229: GO 8322
// i := list [ pos1 ] ;
8231: LD_ADDR_VAR 0 5
8235: PUSH
8236: LD_VAR 0 1
8240: PUSH
8241: LD_VAR 0 2
8245: ARRAY
8246: ST_TO_ADDR
// if not i then
8247: LD_VAR 0 5
8251: NOT
8252: IFFALSE 8256
// exit ;
8254: GO 8322
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: LD_VAR 0 1
8265: PPUSH
8266: LD_VAR 0 2
8270: PPUSH
8271: LD_VAR 0 1
8275: PUSH
8276: LD_VAR 0 3
8280: ARRAY
8281: PPUSH
8282: CALL_OW 1
8286: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 3
8301: PPUSH
8302: LD_VAR 0 5
8306: PPUSH
8307: CALL_OW 1
8311: ST_TO_ADDR
// result := list ;
8312: LD_ADDR_VAR 0 4
8316: PUSH
8317: LD_VAR 0 1
8321: ST_TO_ADDR
// end ;
8322: LD_VAR 0 4
8326: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8327: LD_INT 0
8329: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8330: LD_ADDR_VAR 0 5
8334: PUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 250
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 251
8354: PPUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: LD_VAR 0 3
8364: PPUSH
8365: LD_VAR 0 4
8369: PPUSH
8370: CALL 8752 0 5
8374: ST_TO_ADDR
// end ;
8375: LD_VAR 0 5
8379: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8380: LD_INT 0
8382: PPUSH
8383: PPUSH
8384: PPUSH
8385: PPUSH
// if not list or not unit then
8386: LD_VAR 0 2
8390: NOT
8391: IFTRUE 8400
8393: PUSH
8394: LD_VAR 0 1
8398: NOT
8399: OR
8400: IFFALSE 8404
// exit ;
8402: GO 8747
// result := [ ] ;
8404: LD_ADDR_VAR 0 5
8408: PUSH
8409: EMPTY
8410: ST_TO_ADDR
// for i in list do
8411: LD_ADDR_VAR 0 6
8415: PUSH
8416: LD_VAR 0 2
8420: PUSH
8421: FOR_IN
8422: IFFALSE 8640
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8424: LD_ADDR_VAR 0 8
8428: PUSH
8429: LD_VAR 0 1
8433: PPUSH
8434: LD_VAR 0 6
8438: PUSH
8439: LD_INT 1
8441: ARRAY
8442: PPUSH
8443: LD_VAR 0 6
8447: PUSH
8448: LD_INT 2
8450: ARRAY
8451: PPUSH
8452: CALL_OW 297
8456: ST_TO_ADDR
// if not Count ( result ) then
8457: LD_VAR 0 5
8461: PPUSH
8462: CALL 5008 0 1
8466: NOT
8467: IFFALSE 8500
// begin result := Join ( result , [ i , tmp ] ) ;
8469: LD_ADDR_VAR 0 5
8473: PUSH
8474: LD_VAR 0 5
8478: PPUSH
8479: LD_VAR 0 6
8483: PUSH
8484: LD_VAR 0 8
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL 40940 0 2
8497: ST_TO_ADDR
// continue ;
8498: GO 8421
// end ; if result [ result ] [ 2 ] <= tmp then
8500: LD_VAR 0 5
8504: PUSH
8505: LD_VAR 0 5
8509: ARRAY
8510: PUSH
8511: LD_INT 2
8513: ARRAY
8514: PUSH
8515: LD_VAR 0 8
8519: LESSEQUAL
8520: IFFALSE 8553
// result := Join ( result , [ i , tmp ] ) else
8522: LD_ADDR_VAR 0 5
8526: PUSH
8527: LD_VAR 0 5
8531: PPUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_VAR 0 8
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL 40940 0 2
8550: ST_TO_ADDR
8551: GO 8638
// begin for j := 1 to Count ( result ) do
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: DOUBLE
8559: LD_INT 1
8561: DEC
8562: ST_TO_ADDR
8563: LD_VAR 0 5
8567: PPUSH
8568: CALL 5008 0 1
8572: PUSH
8573: FOR_TO
8574: IFFALSE 8636
// begin if tmp < result [ j ] [ 2 ] then
8576: LD_VAR 0 8
8580: PUSH
8581: LD_VAR 0 5
8585: PUSH
8586: LD_VAR 0 7
8590: ARRAY
8591: PUSH
8592: LD_INT 2
8594: ARRAY
8595: LESS
8596: IFFALSE 8634
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8598: LD_ADDR_VAR 0 5
8602: PUSH
8603: LD_VAR 0 5
8607: PPUSH
8608: LD_VAR 0 7
8612: PPUSH
8613: LD_VAR 0 6
8617: PUSH
8618: LD_VAR 0 8
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PPUSH
8627: CALL_OW 2
8631: ST_TO_ADDR
// break ;
8632: GO 8636
// end ; end ;
8634: GO 8573
8636: POP
8637: POP
// end ; end ;
8638: GO 8421
8640: POP
8641: POP
// if result and not asc then
8642: LD_VAR 0 5
8646: IFFALSE 8655
8648: PUSH
8649: LD_VAR 0 3
8653: NOT
8654: AND
8655: IFFALSE 8672
// result := ReverseArray ( result ) ;
8657: LD_ADDR_VAR 0 5
8661: PUSH
8662: LD_VAR 0 5
8666: PPUSH
8667: CALL 36030 0 1
8671: ST_TO_ADDR
// tmp := [ ] ;
8672: LD_ADDR_VAR 0 8
8676: PUSH
8677: EMPTY
8678: ST_TO_ADDR
// if mode then
8679: LD_VAR 0 4
8683: IFFALSE 8747
// begin for i := 1 to result do
8685: LD_ADDR_VAR 0 6
8689: PUSH
8690: DOUBLE
8691: LD_INT 1
8693: DEC
8694: ST_TO_ADDR
8695: LD_VAR 0 5
8699: PUSH
8700: FOR_TO
8701: IFFALSE 8735
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8703: LD_ADDR_VAR 0 8
8707: PUSH
8708: LD_VAR 0 8
8712: PPUSH
8713: LD_VAR 0 5
8717: PUSH
8718: LD_VAR 0 6
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: CALL 40940 0 2
8732: ST_TO_ADDR
8733: GO 8700
8735: POP
8736: POP
// result := tmp ;
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: LD_VAR 0 8
8746: ST_TO_ADDR
// end ; end ;
8747: LD_VAR 0 5
8751: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8752: LD_INT 0
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
// if not list then
8758: LD_VAR 0 3
8762: NOT
8763: IFFALSE 8767
// exit ;
8765: GO 9157
// result := [ ] ;
8767: LD_ADDR_VAR 0 6
8771: PUSH
8772: EMPTY
8773: ST_TO_ADDR
// for i in list do
8774: LD_ADDR_VAR 0 7
8778: PUSH
8779: LD_VAR 0 3
8783: PUSH
8784: FOR_IN
8785: IFFALSE 8987
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8787: LD_ADDR_VAR 0 9
8791: PUSH
8792: LD_VAR 0 7
8796: PPUSH
8797: LD_VAR 0 1
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 297
8811: ST_TO_ADDR
// if not result then
8812: LD_VAR 0 6
8816: NOT
8817: IFFALSE 8843
// result := [ [ i , tmp ] ] else
8819: LD_ADDR_VAR 0 6
8823: PUSH
8824: LD_VAR 0 7
8828: PUSH
8829: LD_VAR 0 9
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: EMPTY
8839: LIST
8840: ST_TO_ADDR
8841: GO 8985
// begin if result [ result ] [ 2 ] <= tmp then
8843: LD_VAR 0 6
8847: PUSH
8848: LD_VAR 0 6
8852: ARRAY
8853: PUSH
8854: LD_INT 2
8856: ARRAY
8857: PUSH
8858: LD_VAR 0 9
8862: LESSEQUAL
8863: IFFALSE 8905
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8865: LD_ADDR_VAR 0 6
8869: PUSH
8870: LD_VAR 0 6
8874: PPUSH
8875: LD_VAR 0 6
8879: PUSH
8880: LD_INT 1
8882: PLUS
8883: PPUSH
8884: LD_VAR 0 7
8888: PUSH
8889: LD_VAR 0 9
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 2
8902: ST_TO_ADDR
8903: GO 8985
// for j := 1 to result do
8905: LD_ADDR_VAR 0 8
8909: PUSH
8910: DOUBLE
8911: LD_INT 1
8913: DEC
8914: ST_TO_ADDR
8915: LD_VAR 0 6
8919: PUSH
8920: FOR_TO
8921: IFFALSE 8983
// begin if tmp < result [ j ] [ 2 ] then
8923: LD_VAR 0 9
8927: PUSH
8928: LD_VAR 0 6
8932: PUSH
8933: LD_VAR 0 8
8937: ARRAY
8938: PUSH
8939: LD_INT 2
8941: ARRAY
8942: LESS
8943: IFFALSE 8981
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8945: LD_ADDR_VAR 0 6
8949: PUSH
8950: LD_VAR 0 6
8954: PPUSH
8955: LD_VAR 0 8
8959: PPUSH
8960: LD_VAR 0 7
8964: PUSH
8965: LD_VAR 0 9
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PPUSH
8974: CALL_OW 2
8978: ST_TO_ADDR
// break ;
8979: GO 8983
// end ; end ;
8981: GO 8920
8983: POP
8984: POP
// end ; end ;
8985: GO 8784
8987: POP
8988: POP
// if result and not asc then
8989: LD_VAR 0 6
8993: IFFALSE 9002
8995: PUSH
8996: LD_VAR 0 4
9000: NOT
9001: AND
9002: IFFALSE 9077
// begin tmp := result ;
9004: LD_ADDR_VAR 0 9
9008: PUSH
9009: LD_VAR 0 6
9013: ST_TO_ADDR
// for i = tmp downto 1 do
9014: LD_ADDR_VAR 0 7
9018: PUSH
9019: DOUBLE
9020: LD_VAR 0 9
9024: INC
9025: ST_TO_ADDR
9026: LD_INT 1
9028: PUSH
9029: FOR_DOWNTO
9030: IFFALSE 9075
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9032: LD_ADDR_VAR 0 6
9036: PUSH
9037: LD_VAR 0 6
9041: PPUSH
9042: LD_VAR 0 9
9046: PUSH
9047: LD_VAR 0 7
9051: MINUS
9052: PUSH
9053: LD_INT 1
9055: PLUS
9056: PPUSH
9057: LD_VAR 0 9
9061: PUSH
9062: LD_VAR 0 7
9066: ARRAY
9067: PPUSH
9068: CALL_OW 1
9072: ST_TO_ADDR
9073: GO 9029
9075: POP
9076: POP
// end ; tmp := [ ] ;
9077: LD_ADDR_VAR 0 9
9081: PUSH
9082: EMPTY
9083: ST_TO_ADDR
// if mode then
9084: LD_VAR 0 5
9088: IFFALSE 9157
// begin for i = 1 to result do
9090: LD_ADDR_VAR 0 7
9094: PUSH
9095: DOUBLE
9096: LD_INT 1
9098: DEC
9099: ST_TO_ADDR
9100: LD_VAR 0 6
9104: PUSH
9105: FOR_TO
9106: IFFALSE 9145
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9108: LD_ADDR_VAR 0 9
9112: PUSH
9113: LD_VAR 0 9
9117: PPUSH
9118: LD_VAR 0 7
9122: PPUSH
9123: LD_VAR 0 6
9127: PUSH
9128: LD_VAR 0 7
9132: ARRAY
9133: PUSH
9134: LD_INT 1
9136: ARRAY
9137: PPUSH
9138: CALL_OW 1
9142: ST_TO_ADDR
9143: GO 9105
9145: POP
9146: POP
// result := tmp ;
9147: LD_ADDR_VAR 0 6
9151: PUSH
9152: LD_VAR 0 9
9156: ST_TO_ADDR
// end ; end ;
9157: LD_VAR 0 6
9161: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9162: LD_INT 0
9164: PPUSH
9165: PPUSH
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9170: LD_ADDR_VAR 0 5
9174: PUSH
9175: LD_INT 0
9177: PUSH
9178: LD_INT 0
9180: PUSH
9181: LD_INT 0
9183: PUSH
9184: EMPTY
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: ST_TO_ADDR
// if not x or not y then
9192: LD_VAR 0 2
9196: NOT
9197: IFTRUE 9206
9199: PUSH
9200: LD_VAR 0 3
9204: NOT
9205: OR
9206: IFFALSE 9210
// exit ;
9208: GO 10866
// if not range then
9210: LD_VAR 0 4
9214: NOT
9215: IFFALSE 9225
// range := 10 ;
9217: LD_ADDR_VAR 0 4
9221: PUSH
9222: LD_INT 10
9224: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9225: LD_ADDR_VAR 0 8
9229: PUSH
9230: LD_INT 81
9232: PUSH
9233: LD_VAR 0 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 92
9244: PUSH
9245: LD_VAR 0 2
9249: PUSH
9250: LD_VAR 0 3
9254: PUSH
9255: LD_VAR 0 4
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 3
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 3
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 69
9292: ST_TO_ADDR
// if not tmp then
9293: LD_VAR 0 8
9297: NOT
9298: IFFALSE 9302
// exit ;
9300: GO 10866
// for i in tmp do
9302: LD_ADDR_VAR 0 6
9306: PUSH
9307: LD_VAR 0 8
9311: PUSH
9312: FOR_IN
9313: IFFALSE 10841
// begin points := [ 0 , 0 , 0 ] ;
9315: LD_ADDR_VAR 0 9
9319: PUSH
9320: LD_INT 0
9322: PUSH
9323: LD_INT 0
9325: PUSH
9326: LD_INT 0
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: ST_TO_ADDR
// bpoints := 1 ;
9334: LD_ADDR_VAR 0 10
9338: PUSH
9339: LD_INT 1
9341: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9342: LD_VAR 0 6
9346: PPUSH
9347: CALL_OW 247
9351: PUSH
9352: LD_INT 1
9354: DOUBLE
9355: EQUAL
9356: IFTRUE 9360
9358: GO 9942
9360: POP
// begin if GetClass ( i ) = 1 then
9361: LD_VAR 0 6
9365: PPUSH
9366: CALL_OW 257
9370: PUSH
9371: LD_INT 1
9373: EQUAL
9374: IFFALSE 9395
// points := [ 10 , 5 , 3 ] ;
9376: LD_ADDR_VAR 0 9
9380: PUSH
9381: LD_INT 10
9383: PUSH
9384: LD_INT 5
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9395: LD_VAR 0 6
9399: PPUSH
9400: CALL_OW 257
9404: PUSH
9405: LD_INT 2
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: LD_INT 4
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: IN
9419: IFFALSE 9440
// points := [ 3 , 2 , 1 ] ;
9421: LD_ADDR_VAR 0 9
9425: PUSH
9426: LD_INT 3
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: LD_INT 1
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9440: LD_VAR 0 6
9444: PPUSH
9445: CALL_OW 257
9449: PUSH
9450: LD_INT 5
9452: EQUAL
9453: IFFALSE 9474
// points := [ 130 , 5 , 2 ] ;
9455: LD_ADDR_VAR 0 9
9459: PUSH
9460: LD_INT 130
9462: PUSH
9463: LD_INT 5
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9474: LD_VAR 0 6
9478: PPUSH
9479: CALL_OW 257
9483: PUSH
9484: LD_INT 8
9486: EQUAL
9487: IFFALSE 9508
// points := [ 35 , 35 , 30 ] ;
9489: LD_ADDR_VAR 0 9
9493: PUSH
9494: LD_INT 35
9496: PUSH
9497: LD_INT 35
9499: PUSH
9500: LD_INT 30
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9508: LD_VAR 0 6
9512: PPUSH
9513: CALL_OW 257
9517: PUSH
9518: LD_INT 9
9520: EQUAL
9521: IFFALSE 9542
// points := [ 20 , 55 , 40 ] ;
9523: LD_ADDR_VAR 0 9
9527: PUSH
9528: LD_INT 20
9530: PUSH
9531: LD_INT 55
9533: PUSH
9534: LD_INT 40
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9542: LD_VAR 0 6
9546: PPUSH
9547: CALL_OW 257
9551: PUSH
9552: LD_INT 12
9554: PUSH
9555: LD_INT 16
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: IN
9562: IFFALSE 9583
// points := [ 5 , 3 , 2 ] ;
9564: LD_ADDR_VAR 0 9
9568: PUSH
9569: LD_INT 5
9571: PUSH
9572: LD_INT 3
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9583: LD_VAR 0 6
9587: PPUSH
9588: CALL_OW 257
9592: PUSH
9593: LD_INT 17
9595: EQUAL
9596: IFFALSE 9617
// points := [ 100 , 50 , 75 ] ;
9598: LD_ADDR_VAR 0 9
9602: PUSH
9603: LD_INT 100
9605: PUSH
9606: LD_INT 50
9608: PUSH
9609: LD_INT 75
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9617: LD_VAR 0 6
9621: PPUSH
9622: CALL_OW 257
9626: PUSH
9627: LD_INT 15
9629: EQUAL
9630: IFFALSE 9651
// points := [ 10 , 5 , 3 ] ;
9632: LD_ADDR_VAR 0 9
9636: PUSH
9637: LD_INT 10
9639: PUSH
9640: LD_INT 5
9642: PUSH
9643: LD_INT 3
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9651: LD_VAR 0 6
9655: PPUSH
9656: CALL_OW 257
9660: PUSH
9661: LD_INT 14
9663: EQUAL
9664: IFFALSE 9685
// points := [ 10 , 0 , 0 ] ;
9666: LD_ADDR_VAR 0 9
9670: PUSH
9671: LD_INT 10
9673: PUSH
9674: LD_INT 0
9676: PUSH
9677: LD_INT 0
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: LIST
9684: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9685: LD_VAR 0 6
9689: PPUSH
9690: CALL_OW 257
9694: PUSH
9695: LD_INT 11
9697: EQUAL
9698: IFFALSE 9719
// points := [ 30 , 10 , 5 ] ;
9700: LD_ADDR_VAR 0 9
9704: PUSH
9705: LD_INT 30
9707: PUSH
9708: LD_INT 10
9710: PUSH
9711: LD_INT 5
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9719: LD_VAR 0 1
9723: PPUSH
9724: LD_INT 5
9726: PPUSH
9727: CALL_OW 321
9731: PUSH
9732: LD_INT 2
9734: EQUAL
9735: IFFALSE 9752
// bpoints := bpoints * 1.8 ;
9737: LD_ADDR_VAR 0 10
9741: PUSH
9742: LD_VAR 0 10
9746: PUSH
9747: LD_REAL  1.80000000000000E+0000
9750: MUL
9751: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9752: LD_VAR 0 6
9756: PPUSH
9757: CALL_OW 257
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: LD_INT 2
9767: PUSH
9768: LD_INT 3
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: IN
9780: IFFALSE 9800
9782: PUSH
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_INT 51
9790: PPUSH
9791: CALL_OW 321
9795: PUSH
9796: LD_INT 2
9798: EQUAL
9799: AND
9800: IFFALSE 9817
// bpoints := bpoints * 1.2 ;
9802: LD_ADDR_VAR 0 10
9806: PUSH
9807: LD_VAR 0 10
9811: PUSH
9812: LD_REAL  1.20000000000000E+0000
9815: MUL
9816: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9817: LD_VAR 0 6
9821: PPUSH
9822: CALL_OW 257
9826: PUSH
9827: LD_INT 5
9829: PUSH
9830: LD_INT 7
9832: PUSH
9833: LD_INT 9
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: IN
9841: IFFALSE 9861
9843: PUSH
9844: LD_VAR 0 1
9848: PPUSH
9849: LD_INT 52
9851: PPUSH
9852: CALL_OW 321
9856: PUSH
9857: LD_INT 2
9859: EQUAL
9860: AND
9861: IFFALSE 9878
// bpoints := bpoints * 1.5 ;
9863: LD_ADDR_VAR 0 10
9867: PUSH
9868: LD_VAR 0 10
9872: PUSH
9873: LD_REAL  1.50000000000000E+0000
9876: MUL
9877: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_INT 66
9885: PPUSH
9886: CALL_OW 321
9890: PUSH
9891: LD_INT 2
9893: EQUAL
9894: IFFALSE 9911
// bpoints := bpoints * 1.1 ;
9896: LD_ADDR_VAR 0 10
9900: PUSH
9901: LD_VAR 0 10
9905: PUSH
9906: LD_REAL  1.10000000000000E+0000
9909: MUL
9910: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9911: LD_ADDR_VAR 0 10
9915: PUSH
9916: LD_VAR 0 10
9920: PUSH
9921: LD_VAR 0 6
9925: PPUSH
9926: LD_INT 1
9928: PPUSH
9929: CALL_OW 259
9933: PUSH
9934: LD_REAL  1.15000000000000E+0000
9937: MUL
9938: MUL
9939: ST_TO_ADDR
// end ; unit_vehicle :
9940: GO 10770
9942: LD_INT 2
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9950
9948: GO 10758
9950: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9951: LD_VAR 0 6
9955: PPUSH
9956: CALL_OW 264
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: LD_INT 42
9966: PUSH
9967: LD_INT 24
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: IN
9975: IFFALSE 9996
// points := [ 25 , 5 , 3 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 25
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 264
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: LD_INT 43
10011: PUSH
10012: LD_INT 25
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: IN
10020: IFFALSE 10041
// points := [ 40 , 15 , 5 ] ;
10022: LD_ADDR_VAR 0 9
10026: PUSH
10027: LD_INT 40
10029: PUSH
10030: LD_INT 15
10032: PUSH
10033: LD_INT 5
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10041: LD_VAR 0 6
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: LD_INT 23
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: IN
10061: IFFALSE 10082
// points := [ 7 , 25 , 8 ] ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 7
10070: PUSH
10071: LD_INT 25
10073: PUSH
10074: LD_INT 8
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 27
10097: PUSH
10098: LD_INT 44
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: IN
10106: IFFALSE 10127
// points := [ 14 , 50 , 16 ] ;
10108: LD_ADDR_VAR 0 9
10112: PUSH
10113: LD_INT 14
10115: PUSH
10116: LD_INT 50
10118: PUSH
10119: LD_INT 16
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10127: LD_VAR 0 6
10131: PPUSH
10132: CALL_OW 264
10136: PUSH
10137: LD_INT 6
10139: PUSH
10140: LD_INT 46
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: IN
10147: IFFALSE 10168
// points := [ 32 , 120 , 70 ] ;
10149: LD_ADDR_VAR 0 9
10153: PUSH
10154: LD_INT 32
10156: PUSH
10157: LD_INT 120
10159: PUSH
10160: LD_INT 70
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10168: LD_VAR 0 6
10172: PPUSH
10173: CALL_OW 264
10177: PUSH
10178: LD_INT 7
10180: PUSH
10181: LD_INT 28
10183: PUSH
10184: LD_INT 45
10186: PUSH
10187: LD_INT 92
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: IN
10196: IFFALSE 10217
// points := [ 35 , 20 , 45 ] ;
10198: LD_ADDR_VAR 0 9
10202: PUSH
10203: LD_INT 35
10205: PUSH
10206: LD_INT 20
10208: PUSH
10209: LD_INT 45
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10217: LD_VAR 0 6
10221: PPUSH
10222: CALL_OW 264
10226: PUSH
10227: LD_INT 47
10229: PUSH
10230: EMPTY
10231: LIST
10232: IN
10233: IFFALSE 10254
// points := [ 67 , 45 , 75 ] ;
10235: LD_ADDR_VAR 0 9
10239: PUSH
10240: LD_INT 67
10242: PUSH
10243: LD_INT 45
10245: PUSH
10246: LD_INT 75
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10254: LD_VAR 0 6
10258: PPUSH
10259: CALL_OW 264
10263: PUSH
10264: LD_INT 26
10266: PUSH
10267: EMPTY
10268: LIST
10269: IN
10270: IFFALSE 10291
// points := [ 120 , 30 , 80 ] ;
10272: LD_ADDR_VAR 0 9
10276: PUSH
10277: LD_INT 120
10279: PUSH
10280: LD_INT 30
10282: PUSH
10283: LD_INT 80
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: EMPTY
10305: LIST
10306: IN
10307: IFFALSE 10328
// points := [ 40 , 1 , 1 ] ;
10309: LD_ADDR_VAR 0 9
10313: PUSH
10314: LD_INT 40
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10328: LD_VAR 0 6
10332: PPUSH
10333: CALL_OW 264
10337: PUSH
10338: LD_INT 29
10340: PUSH
10341: EMPTY
10342: LIST
10343: IN
10344: IFFALSE 10365
// points := [ 70 , 200 , 400 ] ;
10346: LD_ADDR_VAR 0 9
10350: PUSH
10351: LD_INT 70
10353: PUSH
10354: LD_INT 200
10356: PUSH
10357: LD_INT 400
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10365: LD_VAR 0 6
10369: PPUSH
10370: CALL_OW 264
10374: PUSH
10375: LD_INT 14
10377: PUSH
10378: LD_INT 53
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: IFFALSE 10406
// points := [ 40 , 10 , 20 ] ;
10387: LD_ADDR_VAR 0 9
10391: PUSH
10392: LD_INT 40
10394: PUSH
10395: LD_INT 10
10397: PUSH
10398: LD_INT 20
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10406: LD_VAR 0 6
10410: PPUSH
10411: CALL_OW 264
10415: PUSH
10416: LD_INT 9
10418: PUSH
10419: EMPTY
10420: LIST
10421: IN
10422: IFFALSE 10443
// points := [ 5 , 70 , 20 ] ;
10424: LD_ADDR_VAR 0 9
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: LD_INT 70
10434: PUSH
10435: LD_INT 20
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10443: LD_VAR 0 6
10447: PPUSH
10448: CALL_OW 264
10452: PUSH
10453: LD_INT 10
10455: PUSH
10456: EMPTY
10457: LIST
10458: IN
10459: IFFALSE 10480
// points := [ 35 , 110 , 70 ] ;
10461: LD_ADDR_VAR 0 9
10465: PUSH
10466: LD_INT 35
10468: PUSH
10469: LD_INT 110
10471: PUSH
10472: LD_INT 70
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10480: LD_VAR 0 6
10484: PPUSH
10485: CALL_OW 265
10489: PUSH
10490: LD_INT 25
10492: EQUAL
10493: IFFALSE 10514
// points := [ 80 , 65 , 100 ] ;
10495: LD_ADDR_VAR 0 9
10499: PUSH
10500: LD_INT 80
10502: PUSH
10503: LD_INT 65
10505: PUSH
10506: LD_INT 100
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10514: LD_VAR 0 6
10518: PPUSH
10519: CALL_OW 263
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10562
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10529: LD_ADDR_VAR 0 10
10533: PUSH
10534: LD_VAR 0 10
10538: PUSH
10539: LD_VAR 0 6
10543: PPUSH
10544: CALL_OW 311
10548: PPUSH
10549: LD_INT 3
10551: PPUSH
10552: CALL_OW 259
10556: PUSH
10557: LD_INT 4
10559: MUL
10560: MUL
10561: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10562: LD_VAR 0 6
10566: PPUSH
10567: CALL_OW 263
10571: PUSH
10572: LD_INT 2
10574: EQUAL
10575: IFFALSE 10626
// begin j := IsControledBy ( i ) ;
10577: LD_ADDR_VAR 0 7
10581: PUSH
10582: LD_VAR 0 6
10586: PPUSH
10587: CALL_OW 312
10591: ST_TO_ADDR
// if j then
10592: LD_VAR 0 7
10596: IFFALSE 10626
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10598: LD_ADDR_VAR 0 10
10602: PUSH
10603: LD_VAR 0 10
10607: PUSH
10608: LD_VAR 0 7
10612: PPUSH
10613: LD_INT 3
10615: PPUSH
10616: CALL_OW 259
10620: PUSH
10621: LD_INT 3
10623: MUL
10624: MUL
10625: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10626: LD_VAR 0 6
10630: PPUSH
10631: CALL_OW 264
10635: PUSH
10636: LD_INT 5
10638: PUSH
10639: LD_INT 6
10641: PUSH
10642: LD_INT 46
10644: PUSH
10645: LD_INT 44
10647: PUSH
10648: LD_INT 47
10650: PUSH
10651: LD_INT 45
10653: PUSH
10654: LD_INT 28
10656: PUSH
10657: LD_INT 7
10659: PUSH
10660: LD_INT 27
10662: PUSH
10663: LD_INT 29
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: IN
10678: IFFALSE 10698
10680: PUSH
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_INT 52
10688: PPUSH
10689: CALL_OW 321
10693: PUSH
10694: LD_INT 2
10696: EQUAL
10697: AND
10698: IFFALSE 10715
// bpoints := bpoints * 1.2 ;
10700: LD_ADDR_VAR 0 10
10704: PUSH
10705: LD_VAR 0 10
10709: PUSH
10710: LD_REAL  1.20000000000000E+0000
10713: MUL
10714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10715: LD_VAR 0 6
10719: PPUSH
10720: CALL_OW 264
10724: PUSH
10725: LD_INT 6
10727: PUSH
10728: LD_INT 46
10730: PUSH
10731: LD_INT 47
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: IN
10739: IFFALSE 10756
// bpoints := bpoints * 1.2 ;
10741: LD_ADDR_VAR 0 10
10745: PUSH
10746: LD_VAR 0 10
10750: PUSH
10751: LD_REAL  1.20000000000000E+0000
10754: MUL
10755: ST_TO_ADDR
// end ; unit_building :
10756: GO 10770
10758: LD_INT 3
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10769
10766: POP
// ; end ;
10767: GO 10770
10769: POP
// for j = 1 to 3 do
10770: LD_ADDR_VAR 0 7
10774: PUSH
10775: DOUBLE
10776: LD_INT 1
10778: DEC
10779: ST_TO_ADDR
10780: LD_INT 3
10782: PUSH
10783: FOR_TO
10784: IFFALSE 10837
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10786: LD_ADDR_VAR 0 5
10790: PUSH
10791: LD_VAR 0 5
10795: PPUSH
10796: LD_VAR 0 7
10800: PPUSH
10801: LD_VAR 0 5
10805: PUSH
10806: LD_VAR 0 7
10810: ARRAY
10811: PUSH
10812: LD_VAR 0 9
10816: PUSH
10817: LD_VAR 0 7
10821: ARRAY
10822: PUSH
10823: LD_VAR 0 10
10827: MUL
10828: PLUS
10829: PPUSH
10830: CALL_OW 1
10834: ST_TO_ADDR
10835: GO 10783
10837: POP
10838: POP
// end ;
10839: GO 9312
10841: POP
10842: POP
// result := Replace ( result , 4 , tmp ) ;
10843: LD_ADDR_VAR 0 5
10847: PUSH
10848: LD_VAR 0 5
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: LD_VAR 0 8
10860: PPUSH
10861: CALL_OW 1
10865: ST_TO_ADDR
// end ;
10866: LD_VAR 0 5
10870: RET
// export function DangerAtRange ( unit , range ) ; begin
10871: LD_INT 0
10873: PPUSH
// if not unit then
10874: LD_VAR 0 1
10878: NOT
10879: IFFALSE 10883
// exit ;
10881: GO 10928
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10883: LD_ADDR_VAR 0 3
10887: PUSH
10888: LD_VAR 0 1
10892: PPUSH
10893: CALL_OW 255
10897: PPUSH
10898: LD_VAR 0 1
10902: PPUSH
10903: CALL_OW 250
10907: PPUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 251
10917: PPUSH
10918: LD_VAR 0 2
10922: PPUSH
10923: CALL 9162 0 4
10927: ST_TO_ADDR
// end ;
10928: LD_VAR 0 3
10932: RET
// export function DangerInArea ( side , area ) ; begin
10933: LD_INT 0
10935: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: LD_INT 81
10948: PUSH
10949: LD_VAR 0 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 70
10962: ST_TO_ADDR
// end ;
10963: LD_VAR 0 3
10967: RET
// export function IsExtension ( b ) ; begin
10968: LD_INT 0
10970: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10971: LD_ADDR_VAR 0 2
10975: PUSH
10976: LD_VAR 0 1
10980: PUSH
10981: LD_INT 23
10983: PUSH
10984: LD_INT 20
10986: PUSH
10987: LD_INT 22
10989: PUSH
10990: LD_INT 17
10992: PUSH
10993: LD_INT 24
10995: PUSH
10996: LD_INT 21
10998: PUSH
10999: LD_INT 19
11001: PUSH
11002: LD_INT 16
11004: PUSH
11005: LD_INT 25
11007: PUSH
11008: LD_INT 18
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: IN
11023: ST_TO_ADDR
// end ;
11024: LD_VAR 0 2
11028: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
11033: PPUSH
// result := [ ] ;
11034: LD_ADDR_VAR 0 4
11038: PUSH
11039: EMPTY
11040: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11041: LD_ADDR_VAR 0 5
11045: PUSH
11046: LD_VAR 0 2
11050: PPUSH
11051: LD_INT 21
11053: PUSH
11054: LD_INT 3
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 70
11065: ST_TO_ADDR
// if not tmp then
11066: LD_VAR 0 5
11070: NOT
11071: IFFALSE 11075
// exit ;
11073: GO 11139
// if checkLink then
11075: LD_VAR 0 3
11079: IFFALSE 11129
// begin for i in tmp do
11081: LD_ADDR_VAR 0 6
11085: PUSH
11086: LD_VAR 0 5
11090: PUSH
11091: FOR_IN
11092: IFFALSE 11127
// if GetBase ( i ) <> base then
11094: LD_VAR 0 6
11098: PPUSH
11099: CALL_OW 274
11103: PUSH
11104: LD_VAR 0 1
11108: NONEQUAL
11109: IFFALSE 11125
// ComLinkToBase ( base , i ) ;
11111: LD_VAR 0 1
11115: PPUSH
11116: LD_VAR 0 6
11120: PPUSH
11121: CALL_OW 169
11125: GO 11091
11127: POP
11128: POP
// end ; result := tmp ;
11129: LD_ADDR_VAR 0 4
11133: PUSH
11134: LD_VAR 0 5
11138: ST_TO_ADDR
// end ;
11139: LD_VAR 0 4
11143: RET
// export function ComComplete ( units , b ) ; var i ; begin
11144: LD_INT 0
11146: PPUSH
11147: PPUSH
// if not units then
11148: LD_VAR 0 1
11152: NOT
11153: IFFALSE 11157
// exit ;
11155: GO 11247
// for i in units do
11157: LD_ADDR_VAR 0 4
11161: PUSH
11162: LD_VAR 0 1
11166: PUSH
11167: FOR_IN
11168: IFFALSE 11245
// if BuildingStatus ( b ) = bs_build then
11170: LD_VAR 0 2
11174: PPUSH
11175: CALL_OW 461
11179: PUSH
11180: LD_INT 1
11182: EQUAL
11183: IFFALSE 11243
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11185: LD_VAR 0 4
11189: PPUSH
11190: LD_STRING h
11192: PUSH
11193: LD_VAR 0 2
11197: PPUSH
11198: CALL_OW 250
11202: PUSH
11203: LD_VAR 0 2
11207: PPUSH
11208: CALL_OW 251
11212: PUSH
11213: LD_VAR 0 2
11217: PUSH
11218: LD_INT 0
11220: PUSH
11221: LD_INT 0
11223: PUSH
11224: LD_INT 0
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: PUSH
11236: EMPTY
11237: LIST
11238: PPUSH
11239: CALL_OW 446
11243: GO 11167
11245: POP
11246: POP
// end ;
11247: LD_VAR 0 3
11251: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11252: LD_INT 0
11254: PPUSH
11255: PPUSH
11256: PPUSH
11257: PPUSH
11258: PPUSH
11259: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11260: LD_VAR 0 1
11264: NOT
11265: IFTRUE 11282
11267: PUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 263
11277: PUSH
11278: LD_INT 2
11280: NONEQUAL
11281: OR
11282: IFFALSE 11286
// exit ;
11284: GO 11602
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11286: LD_ADDR_VAR 0 6
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_VAR 0 1
11298: PPUSH
11299: CALL_OW 255
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 2
11310: PUSH
11311: LD_INT 30
11313: PUSH
11314: LD_INT 36
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 34
11323: PUSH
11324: LD_INT 31
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 69
11344: ST_TO_ADDR
// if not tmp then
11345: LD_VAR 0 6
11349: NOT
11350: IFFALSE 11354
// exit ;
11352: GO 11602
// result := [ ] ;
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: EMPTY
11360: ST_TO_ADDR
// for i in tmp do
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: LD_VAR 0 6
11370: PUSH
11371: FOR_IN
11372: IFFALSE 11443
// begin t := UnitsInside ( i ) ;
11374: LD_ADDR_VAR 0 4
11378: PUSH
11379: LD_VAR 0 3
11383: PPUSH
11384: CALL_OW 313
11388: ST_TO_ADDR
// if t then
11389: LD_VAR 0 4
11393: IFFALSE 11441
// for j in t do
11395: LD_ADDR_VAR 0 7
11399: PUSH
11400: LD_VAR 0 4
11404: PUSH
11405: FOR_IN
11406: IFFALSE 11439
// result := Replace ( result , result + 1 , j ) ;
11408: LD_ADDR_VAR 0 2
11412: PUSH
11413: LD_VAR 0 2
11417: PPUSH
11418: LD_VAR 0 2
11422: PUSH
11423: LD_INT 1
11425: PLUS
11426: PPUSH
11427: LD_VAR 0 7
11431: PPUSH
11432: CALL_OW 1
11436: ST_TO_ADDR
11437: GO 11405
11439: POP
11440: POP
// end ;
11441: GO 11371
11443: POP
11444: POP
// if not result then
11445: LD_VAR 0 2
11449: NOT
11450: IFFALSE 11454
// exit ;
11452: GO 11602
// mech := result [ 1 ] ;
11454: LD_ADDR_VAR 0 5
11458: PUSH
11459: LD_VAR 0 2
11463: PUSH
11464: LD_INT 1
11466: ARRAY
11467: ST_TO_ADDR
// if result > 1 then
11468: LD_VAR 0 2
11472: PUSH
11473: LD_INT 1
11475: GREATER
11476: IFFALSE 11588
// begin for i = 2 to result do
11478: LD_ADDR_VAR 0 3
11482: PUSH
11483: DOUBLE
11484: LD_INT 2
11486: DEC
11487: ST_TO_ADDR
11488: LD_VAR 0 2
11492: PUSH
11493: FOR_TO
11494: IFFALSE 11586
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11496: LD_ADDR_VAR 0 4
11500: PUSH
11501: LD_VAR 0 2
11505: PUSH
11506: LD_VAR 0 3
11510: ARRAY
11511: PPUSH
11512: LD_INT 3
11514: PPUSH
11515: CALL_OW 259
11519: PUSH
11520: LD_VAR 0 2
11524: PUSH
11525: LD_VAR 0 3
11529: ARRAY
11530: PPUSH
11531: CALL_OW 432
11535: MINUS
11536: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11537: LD_VAR 0 4
11541: PUSH
11542: LD_VAR 0 5
11546: PPUSH
11547: LD_INT 3
11549: PPUSH
11550: CALL_OW 259
11554: PUSH
11555: LD_VAR 0 5
11559: PPUSH
11560: CALL_OW 432
11564: MINUS
11565: GREATEREQUAL
11566: IFFALSE 11584
// mech := result [ i ] ;
11568: LD_ADDR_VAR 0 5
11572: PUSH
11573: LD_VAR 0 2
11577: PUSH
11578: LD_VAR 0 3
11582: ARRAY
11583: ST_TO_ADDR
// end ;
11584: GO 11493
11586: POP
11587: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11588: LD_VAR 0 1
11592: PPUSH
11593: LD_VAR 0 5
11597: PPUSH
11598: CALL_OW 135
// end ;
11602: LD_VAR 0 2
11606: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11607: LD_INT 0
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
11619: PPUSH
11620: PPUSH
11621: PPUSH
// result := [ ] ;
11622: LD_ADDR_VAR 0 7
11626: PUSH
11627: EMPTY
11628: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11629: LD_VAR 0 1
11633: PPUSH
11634: CALL_OW 266
11638: PUSH
11639: LD_INT 0
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: IN
11649: NOT
11650: IFFALSE 11654
// exit ;
11652: GO 13294
// if name then
11654: LD_VAR 0 3
11658: IFFALSE 11674
// SetBName ( base_dep , name ) ;
11660: LD_VAR 0 1
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: CALL_OW 500
// base := GetBase ( base_dep ) ;
11674: LD_ADDR_VAR 0 15
11678: PUSH
11679: LD_VAR 0 1
11683: PPUSH
11684: CALL_OW 274
11688: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11689: LD_ADDR_VAR 0 16
11693: PUSH
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 255
11703: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11704: LD_ADDR_VAR 0 17
11708: PUSH
11709: LD_VAR 0 1
11713: PPUSH
11714: CALL_OW 248
11718: ST_TO_ADDR
// if sources then
11719: LD_VAR 0 5
11723: IFFALSE 11770
// for i = 1 to 3 do
11725: LD_ADDR_VAR 0 8
11729: PUSH
11730: DOUBLE
11731: LD_INT 1
11733: DEC
11734: ST_TO_ADDR
11735: LD_INT 3
11737: PUSH
11738: FOR_TO
11739: IFFALSE 11768
// AddResourceType ( base , i , sources [ i ] ) ;
11741: LD_VAR 0 15
11745: PPUSH
11746: LD_VAR 0 8
11750: PPUSH
11751: LD_VAR 0 5
11755: PUSH
11756: LD_VAR 0 8
11760: ARRAY
11761: PPUSH
11762: CALL_OW 276
11766: GO 11738
11768: POP
11769: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11770: LD_ADDR_VAR 0 18
11774: PUSH
11775: LD_VAR 0 15
11779: PPUSH
11780: LD_VAR 0 2
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL 11029 0 3
11792: ST_TO_ADDR
// InitHc ;
11793: CALL_OW 19
// InitUc ;
11797: CALL_OW 18
// uc_side := side ;
11801: LD_ADDR_OWVAR 20
11805: PUSH
11806: LD_VAR 0 16
11810: ST_TO_ADDR
// uc_nation := nation ;
11811: LD_ADDR_OWVAR 21
11815: PUSH
11816: LD_VAR 0 17
11820: ST_TO_ADDR
// if buildings then
11821: LD_VAR 0 18
11825: IFFALSE 13153
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11827: LD_ADDR_VAR 0 19
11831: PUSH
11832: LD_VAR 0 18
11836: PPUSH
11837: LD_INT 2
11839: PUSH
11840: LD_INT 30
11842: PUSH
11843: LD_INT 29
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 30
11852: PUSH
11853: LD_INT 30
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: PPUSH
11865: CALL_OW 72
11869: ST_TO_ADDR
// if tmp then
11870: LD_VAR 0 19
11874: IFFALSE 11922
// for i in tmp do
11876: LD_ADDR_VAR 0 8
11880: PUSH
11881: LD_VAR 0 19
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11920
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11889: LD_VAR 0 8
11893: PPUSH
11894: CALL_OW 250
11898: PPUSH
11899: LD_VAR 0 8
11903: PPUSH
11904: CALL_OW 251
11908: PPUSH
11909: LD_VAR 0 16
11913: PPUSH
11914: CALL_OW 441
11918: GO 11886
11920: POP
11921: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11922: LD_VAR 0 18
11926: PPUSH
11927: LD_INT 2
11929: PUSH
11930: LD_INT 30
11932: PUSH
11933: LD_INT 32
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: LD_INT 33
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 72
11959: IFFALSE 12047
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11961: LD_ADDR_VAR 0 8
11965: PUSH
11966: LD_VAR 0 18
11970: PPUSH
11971: LD_INT 2
11973: PUSH
11974: LD_INT 30
11976: PUSH
11977: LD_INT 32
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 33
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 72
12003: PUSH
12004: FOR_IN
12005: IFFALSE 12045
// begin if not GetBWeapon ( i ) then
12007: LD_VAR 0 8
12011: PPUSH
12012: CALL_OW 269
12016: NOT
12017: IFFALSE 12043
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12019: LD_VAR 0 8
12023: PPUSH
12024: LD_VAR 0 8
12028: PPUSH
12029: LD_VAR 0 2
12033: PPUSH
12034: CALL 13299 0 2
12038: PPUSH
12039: CALL_OW 431
// end ;
12043: GO 12004
12045: POP
12046: POP
// end ; for i = 1 to personel do
12047: LD_ADDR_VAR 0 8
12051: PUSH
12052: DOUBLE
12053: LD_INT 1
12055: DEC
12056: ST_TO_ADDR
12057: LD_VAR 0 6
12061: PUSH
12062: FOR_TO
12063: IFFALSE 13133
// begin if i > 4 then
12065: LD_VAR 0 8
12069: PUSH
12070: LD_INT 4
12072: GREATER
12073: IFFALSE 12077
// break ;
12075: GO 13133
// case i of 1 :
12077: LD_VAR 0 8
12081: PUSH
12082: LD_INT 1
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12170
12090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12091: LD_ADDR_VAR 0 12
12095: PUSH
12096: LD_VAR 0 18
12100: PPUSH
12101: LD_INT 22
12103: PUSH
12104: LD_VAR 0 16
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 58
12115: PUSH
12116: EMPTY
12117: LIST
12118: PUSH
12119: LD_INT 2
12121: PUSH
12122: LD_INT 30
12124: PUSH
12125: LD_INT 32
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 30
12134: PUSH
12135: LD_INT 4
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 30
12144: PUSH
12145: LD_INT 5
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 72
12167: ST_TO_ADDR
12168: GO 12392
12170: LD_INT 2
12172: DOUBLE
12173: EQUAL
12174: IFTRUE 12178
12176: GO 12240
12178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12179: LD_ADDR_VAR 0 12
12183: PUSH
12184: LD_VAR 0 18
12188: PPUSH
12189: LD_INT 22
12191: PUSH
12192: LD_VAR 0 16
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 2
12203: PUSH
12204: LD_INT 30
12206: PUSH
12207: LD_INT 0
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 30
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PPUSH
12233: CALL_OW 72
12237: ST_TO_ADDR
12238: GO 12392
12240: LD_INT 3
12242: DOUBLE
12243: EQUAL
12244: IFTRUE 12248
12246: GO 12310
12248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12249: LD_ADDR_VAR 0 12
12253: PUSH
12254: LD_VAR 0 18
12258: PPUSH
12259: LD_INT 22
12261: PUSH
12262: LD_VAR 0 16
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: LD_INT 30
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 30
12286: PUSH
12287: LD_INT 3
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 72
12307: ST_TO_ADDR
12308: GO 12392
12310: LD_INT 4
12312: DOUBLE
12313: EQUAL
12314: IFTRUE 12318
12316: GO 12391
12318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12319: LD_ADDR_VAR 0 12
12323: PUSH
12324: LD_VAR 0 18
12328: PPUSH
12329: LD_INT 22
12331: PUSH
12332: LD_VAR 0 16
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: LD_INT 6
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 30
12356: PUSH
12357: LD_INT 7
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 30
12366: PUSH
12367: LD_INT 8
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PPUSH
12384: CALL_OW 72
12388: ST_TO_ADDR
12389: GO 12392
12391: POP
// if i = 1 then
12392: LD_VAR 0 8
12396: PUSH
12397: LD_INT 1
12399: EQUAL
12400: IFFALSE 12511
// begin tmp := [ ] ;
12402: LD_ADDR_VAR 0 19
12406: PUSH
12407: EMPTY
12408: ST_TO_ADDR
// for j in f do
12409: LD_ADDR_VAR 0 9
12413: PUSH
12414: LD_VAR 0 12
12418: PUSH
12419: FOR_IN
12420: IFFALSE 12493
// if GetBType ( j ) = b_bunker then
12422: LD_VAR 0 9
12426: PPUSH
12427: CALL_OW 266
12431: PUSH
12432: LD_INT 32
12434: EQUAL
12435: IFFALSE 12462
// tmp := Insert ( tmp , 1 , j ) else
12437: LD_ADDR_VAR 0 19
12441: PUSH
12442: LD_VAR 0 19
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: LD_VAR 0 9
12454: PPUSH
12455: CALL_OW 2
12459: ST_TO_ADDR
12460: GO 12491
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12462: LD_ADDR_VAR 0 19
12466: PUSH
12467: LD_VAR 0 19
12471: PPUSH
12472: LD_VAR 0 19
12476: PUSH
12477: LD_INT 1
12479: PLUS
12480: PPUSH
12481: LD_VAR 0 9
12485: PPUSH
12486: CALL_OW 2
12490: ST_TO_ADDR
12491: GO 12419
12493: POP
12494: POP
// if tmp then
12495: LD_VAR 0 19
12499: IFFALSE 12511
// f := tmp ;
12501: LD_ADDR_VAR 0 12
12505: PUSH
12506: LD_VAR 0 19
12510: ST_TO_ADDR
// end ; x := personel [ i ] ;
12511: LD_ADDR_VAR 0 13
12515: PUSH
12516: LD_VAR 0 6
12520: PUSH
12521: LD_VAR 0 8
12525: ARRAY
12526: ST_TO_ADDR
// if x = - 1 then
12527: LD_VAR 0 13
12531: PUSH
12532: LD_INT 1
12534: NEG
12535: EQUAL
12536: IFFALSE 12747
// begin for j in f do
12538: LD_ADDR_VAR 0 9
12542: PUSH
12543: LD_VAR 0 12
12547: PUSH
12548: FOR_IN
12549: IFFALSE 12743
// repeat InitHc ;
12551: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12555: LD_VAR 0 9
12559: PPUSH
12560: CALL_OW 266
12564: PUSH
12565: LD_INT 5
12567: EQUAL
12568: IFFALSE 12638
// begin if UnitsInside ( j ) < 3 then
12570: LD_VAR 0 9
12574: PPUSH
12575: CALL_OW 313
12579: PUSH
12580: LD_INT 3
12582: LESS
12583: IFFALSE 12619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12585: LD_INT 0
12587: PPUSH
12588: LD_INT 5
12590: PUSH
12591: LD_INT 8
12593: PUSH
12594: LD_INT 9
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_VAR 0 17
12606: ARRAY
12607: PPUSH
12608: LD_VAR 0 4
12612: PPUSH
12613: CALL_OW 380
12617: GO 12636
// PrepareHuman ( false , i , skill ) ;
12619: LD_INT 0
12621: PPUSH
12622: LD_VAR 0 8
12626: PPUSH
12627: LD_VAR 0 4
12631: PPUSH
12632: CALL_OW 380
// end else
12636: GO 12655
// PrepareHuman ( false , i , skill ) ;
12638: LD_INT 0
12640: PPUSH
12641: LD_VAR 0 8
12645: PPUSH
12646: LD_VAR 0 4
12650: PPUSH
12651: CALL_OW 380
// un := CreateHuman ;
12655: LD_ADDR_VAR 0 14
12659: PUSH
12660: CALL_OW 44
12664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12665: LD_ADDR_VAR 0 7
12669: PUSH
12670: LD_VAR 0 7
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: LD_VAR 0 14
12682: PPUSH
12683: CALL_OW 2
12687: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12688: LD_VAR 0 14
12692: PPUSH
12693: LD_VAR 0 9
12697: PPUSH
12698: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12702: LD_VAR 0 9
12706: PPUSH
12707: CALL_OW 313
12711: PUSH
12712: LD_INT 6
12714: EQUAL
12715: IFTRUE 12739
12717: PUSH
12718: LD_VAR 0 9
12722: PPUSH
12723: CALL_OW 266
12727: PUSH
12728: LD_INT 32
12730: PUSH
12731: LD_INT 31
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: IN
12738: OR
12739: IFFALSE 12551
12741: GO 12548
12743: POP
12744: POP
// end else
12745: GO 13131
// for j = 1 to x do
12747: LD_ADDR_VAR 0 9
12751: PUSH
12752: DOUBLE
12753: LD_INT 1
12755: DEC
12756: ST_TO_ADDR
12757: LD_VAR 0 13
12761: PUSH
12762: FOR_TO
12763: IFFALSE 13129
// begin InitHc ;
12765: CALL_OW 19
// if not f then
12769: LD_VAR 0 12
12773: NOT
12774: IFFALSE 12863
// begin PrepareHuman ( false , i , skill ) ;
12776: LD_INT 0
12778: PPUSH
12779: LD_VAR 0 8
12783: PPUSH
12784: LD_VAR 0 4
12788: PPUSH
12789: CALL_OW 380
// un := CreateHuman ;
12793: LD_ADDR_VAR 0 14
12797: PUSH
12798: CALL_OW 44
12802: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12803: LD_ADDR_VAR 0 7
12807: PUSH
12808: LD_VAR 0 7
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: LD_VAR 0 14
12820: PPUSH
12821: CALL_OW 2
12825: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12826: LD_VAR 0 14
12830: PPUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 250
12840: PPUSH
12841: LD_VAR 0 1
12845: PPUSH
12846: CALL_OW 251
12850: PPUSH
12851: LD_INT 10
12853: PPUSH
12854: LD_INT 0
12856: PPUSH
12857: CALL_OW 50
// continue ;
12861: GO 12762
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12863: LD_VAR 0 12
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: PPUSH
12872: CALL_OW 313
12876: IFFALSE 12904
12878: PUSH
12879: LD_VAR 0 12
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 266
12892: PUSH
12893: LD_INT 32
12895: PUSH
12896: LD_INT 31
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: IN
12903: AND
12904: IFTRUE 12925
12906: PUSH
12907: LD_VAR 0 12
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: CALL_OW 313
12920: PUSH
12921: LD_INT 6
12923: EQUAL
12924: OR
12925: IFFALSE 12945
// f := Delete ( f , 1 ) ;
12927: LD_ADDR_VAR 0 12
12931: PUSH
12932: LD_VAR 0 12
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 3
12944: ST_TO_ADDR
// if not f then
12945: LD_VAR 0 12
12949: NOT
12950: IFFALSE 12968
// begin x := x + 2 ;
12952: LD_ADDR_VAR 0 13
12956: PUSH
12957: LD_VAR 0 13
12961: PUSH
12962: LD_INT 2
12964: PLUS
12965: ST_TO_ADDR
// continue ;
12966: GO 12762
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12968: LD_VAR 0 12
12972: PUSH
12973: LD_INT 1
12975: ARRAY
12976: PPUSH
12977: CALL_OW 266
12981: PUSH
12982: LD_INT 5
12984: EQUAL
12985: IFFALSE 13059
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12987: LD_VAR 0 12
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PPUSH
12996: CALL_OW 313
13000: PUSH
13001: LD_INT 3
13003: LESS
13004: IFFALSE 13040
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13006: LD_INT 0
13008: PPUSH
13009: LD_INT 5
13011: PUSH
13012: LD_INT 8
13014: PUSH
13015: LD_INT 9
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_VAR 0 17
13027: ARRAY
13028: PPUSH
13029: LD_VAR 0 4
13033: PPUSH
13034: CALL_OW 380
13038: GO 13057
// PrepareHuman ( false , i , skill ) ;
13040: LD_INT 0
13042: PPUSH
13043: LD_VAR 0 8
13047: PPUSH
13048: LD_VAR 0 4
13052: PPUSH
13053: CALL_OW 380
// end else
13057: GO 13076
// PrepareHuman ( false , i , skill ) ;
13059: LD_INT 0
13061: PPUSH
13062: LD_VAR 0 8
13066: PPUSH
13067: LD_VAR 0 4
13071: PPUSH
13072: CALL_OW 380
// un := CreateHuman ;
13076: LD_ADDR_VAR 0 14
13080: PUSH
13081: CALL_OW 44
13085: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13086: LD_ADDR_VAR 0 7
13090: PUSH
13091: LD_VAR 0 7
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: LD_VAR 0 14
13103: PPUSH
13104: CALL_OW 2
13108: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13109: LD_VAR 0 14
13113: PPUSH
13114: LD_VAR 0 12
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: CALL_OW 52
// end ;
13127: GO 12762
13129: POP
13130: POP
// end ;
13131: GO 12062
13133: POP
13134: POP
// result := result ^ buildings ;
13135: LD_ADDR_VAR 0 7
13139: PUSH
13140: LD_VAR 0 7
13144: PUSH
13145: LD_VAR 0 18
13149: ADD
13150: ST_TO_ADDR
// end else
13151: GO 13294
// begin for i = 1 to personel do
13153: LD_ADDR_VAR 0 8
13157: PUSH
13158: DOUBLE
13159: LD_INT 1
13161: DEC
13162: ST_TO_ADDR
13163: LD_VAR 0 6
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13292
// begin if i > 4 then
13171: LD_VAR 0 8
13175: PUSH
13176: LD_INT 4
13178: GREATER
13179: IFFALSE 13183
// break ;
13181: GO 13292
// x := personel [ i ] ;
13183: LD_ADDR_VAR 0 13
13187: PUSH
13188: LD_VAR 0 6
13192: PUSH
13193: LD_VAR 0 8
13197: ARRAY
13198: ST_TO_ADDR
// if x = - 1 then
13199: LD_VAR 0 13
13203: PUSH
13204: LD_INT 1
13206: NEG
13207: EQUAL
13208: IFFALSE 13212
// continue ;
13210: GO 13168
// PrepareHuman ( false , i , skill ) ;
13212: LD_INT 0
13214: PPUSH
13215: LD_VAR 0 8
13219: PPUSH
13220: LD_VAR 0 4
13224: PPUSH
13225: CALL_OW 380
// un := CreateHuman ;
13229: LD_ADDR_VAR 0 14
13233: PUSH
13234: CALL_OW 44
13238: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13239: LD_VAR 0 14
13243: PPUSH
13244: LD_VAR 0 1
13248: PPUSH
13249: CALL_OW 250
13253: PPUSH
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 251
13263: PPUSH
13264: LD_INT 10
13266: PPUSH
13267: LD_INT 0
13269: PPUSH
13270: CALL_OW 50
// result := result ^ un ;
13274: LD_ADDR_VAR 0 7
13278: PUSH
13279: LD_VAR 0 7
13283: PUSH
13284: LD_VAR 0 14
13288: ADD
13289: ST_TO_ADDR
// end ;
13290: GO 13168
13292: POP
13293: POP
// end ; end ;
13294: LD_VAR 0 7
13298: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13299: LD_INT 0
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
13305: PPUSH
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
13310: PPUSH
13311: PPUSH
13312: PPUSH
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
// result := false ;
13317: LD_ADDR_VAR 0 3
13321: PUSH
13322: LD_INT 0
13324: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13325: LD_VAR 0 1
13329: NOT
13330: IFTRUE 13355
13332: PUSH
13333: LD_VAR 0 1
13337: PPUSH
13338: CALL_OW 266
13342: PUSH
13343: LD_INT 32
13345: PUSH
13346: LD_INT 33
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: IN
13353: NOT
13354: OR
13355: IFFALSE 13359
// exit ;
13357: GO 14494
// nat := GetNation ( tower ) ;
13359: LD_ADDR_VAR 0 12
13363: PUSH
13364: LD_VAR 0 1
13368: PPUSH
13369: CALL_OW 248
13373: ST_TO_ADDR
// side := GetSide ( tower ) ;
13374: LD_ADDR_VAR 0 16
13378: PUSH
13379: LD_VAR 0 1
13383: PPUSH
13384: CALL_OW 255
13388: ST_TO_ADDR
// x := GetX ( tower ) ;
13389: LD_ADDR_VAR 0 10
13393: PUSH
13394: LD_VAR 0 1
13398: PPUSH
13399: CALL_OW 250
13403: ST_TO_ADDR
// y := GetY ( tower ) ;
13404: LD_ADDR_VAR 0 11
13408: PUSH
13409: LD_VAR 0 1
13413: PPUSH
13414: CALL_OW 251
13418: ST_TO_ADDR
// if not x or not y then
13419: LD_VAR 0 10
13423: NOT
13424: IFTRUE 13433
13426: PUSH
13427: LD_VAR 0 11
13431: NOT
13432: OR
13433: IFFALSE 13437
// exit ;
13435: GO 14494
// weapon := 0 ;
13437: LD_ADDR_VAR 0 18
13441: PUSH
13442: LD_INT 0
13444: ST_TO_ADDR
// fac_list := [ ] ;
13445: LD_ADDR_VAR 0 17
13449: PUSH
13450: EMPTY
13451: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13452: LD_ADDR_VAR 0 6
13456: PUSH
13457: LD_VAR 0 1
13461: PPUSH
13462: CALL_OW 274
13466: PPUSH
13467: LD_VAR 0 2
13471: PPUSH
13472: LD_INT 0
13474: PPUSH
13475: CALL 11029 0 3
13479: PPUSH
13480: LD_INT 30
13482: PUSH
13483: LD_INT 3
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 72
13494: ST_TO_ADDR
// if not factories then
13495: LD_VAR 0 6
13499: NOT
13500: IFFALSE 13504
// exit ;
13502: GO 14494
// for i in factories do
13504: LD_ADDR_VAR 0 8
13508: PUSH
13509: LD_VAR 0 6
13513: PUSH
13514: FOR_IN
13515: IFFALSE 13540
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13517: LD_ADDR_VAR 0 17
13521: PUSH
13522: LD_VAR 0 17
13526: PUSH
13527: LD_VAR 0 8
13531: PPUSH
13532: CALL_OW 478
13536: UNION
13537: ST_TO_ADDR
13538: GO 13514
13540: POP
13541: POP
// if not fac_list then
13542: LD_VAR 0 17
13546: NOT
13547: IFFALSE 13551
// exit ;
13549: GO 14494
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13551: LD_ADDR_VAR 0 5
13555: PUSH
13556: LD_INT 4
13558: PUSH
13559: LD_INT 5
13561: PUSH
13562: LD_INT 9
13564: PUSH
13565: LD_INT 10
13567: PUSH
13568: LD_INT 6
13570: PUSH
13571: LD_INT 7
13573: PUSH
13574: LD_INT 11
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 27
13588: PUSH
13589: LD_INT 28
13591: PUSH
13592: LD_INT 26
13594: PUSH
13595: LD_INT 30
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 43
13606: PUSH
13607: LD_INT 44
13609: PUSH
13610: LD_INT 46
13612: PUSH
13613: LD_INT 45
13615: PUSH
13616: LD_INT 47
13618: PUSH
13619: LD_INT 49
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: PUSH
13635: LD_VAR 0 12
13639: ARRAY
13640: ST_TO_ADDR
// list := list isect fac_list ;
13641: LD_ADDR_VAR 0 5
13645: PUSH
13646: LD_VAR 0 5
13650: PUSH
13651: LD_VAR 0 17
13655: ISECT
13656: ST_TO_ADDR
// if not list then
13657: LD_VAR 0 5
13661: NOT
13662: IFFALSE 13666
// exit ;
13664: GO 14494
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13666: LD_VAR 0 12
13670: PUSH
13671: LD_INT 3
13673: EQUAL
13674: IFFALSE 13686
13676: PUSH
13677: LD_INT 49
13679: PUSH
13680: LD_VAR 0 5
13684: IN
13685: AND
13686: IFFALSE 13706
13688: PUSH
13689: LD_INT 31
13691: PPUSH
13692: LD_VAR 0 16
13696: PPUSH
13697: CALL_OW 321
13701: PUSH
13702: LD_INT 2
13704: EQUAL
13705: AND
13706: IFFALSE 13766
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13708: LD_INT 22
13710: PUSH
13711: LD_VAR 0 16
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 35
13722: PUSH
13723: LD_INT 49
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 91
13732: PUSH
13733: LD_VAR 0 1
13737: PUSH
13738: LD_INT 10
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: NOT
13756: IFFALSE 13766
// weapon := ru_time_lapser ;
13758: LD_ADDR_VAR 0 18
13762: PUSH
13763: LD_INT 49
13765: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13766: LD_VAR 0 12
13770: PUSH
13771: LD_INT 1
13773: PUSH
13774: LD_INT 2
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: IN
13781: IFFALSE 13805
13783: PUSH
13784: LD_INT 11
13786: PUSH
13787: LD_VAR 0 5
13791: IN
13792: IFTRUE 13804
13794: PUSH
13795: LD_INT 30
13797: PUSH
13798: LD_VAR 0 5
13802: IN
13803: OR
13804: AND
13805: IFFALSE 13825
13807: PUSH
13808: LD_INT 6
13810: PPUSH
13811: LD_VAR 0 16
13815: PPUSH
13816: CALL_OW 321
13820: PUSH
13821: LD_INT 2
13823: EQUAL
13824: AND
13825: IFFALSE 13992
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13827: LD_INT 22
13829: PUSH
13830: LD_VAR 0 16
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 2
13841: PUSH
13842: LD_INT 35
13844: PUSH
13845: LD_INT 11
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 35
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 91
13869: PUSH
13870: LD_VAR 0 1
13874: PUSH
13875: LD_INT 18
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: PPUSH
13888: CALL_OW 69
13892: NOT
13893: IFFALSE 13969
13895: PUSH
13896: LD_INT 22
13898: PUSH
13899: LD_VAR 0 16
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 32
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 30
13923: PUSH
13924: LD_INT 33
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 91
13938: PUSH
13939: LD_VAR 0 1
13943: PUSH
13944: LD_INT 12
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: PUSH
13965: LD_INT 2
13967: GREATER
13968: AND
13969: IFFALSE 13992
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13971: LD_ADDR_VAR 0 18
13975: PUSH
13976: LD_INT 11
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_VAR 0 12
13990: ARRAY
13991: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13992: LD_VAR 0 18
13996: NOT
13997: IFFALSE 14017
13999: PUSH
14000: LD_INT 40
14002: PPUSH
14003: LD_VAR 0 16
14007: PPUSH
14008: CALL_OW 321
14012: PUSH
14013: LD_INT 2
14015: EQUAL
14016: AND
14017: IFFALSE 14053
14019: PUSH
14020: LD_INT 7
14022: PUSH
14023: LD_VAR 0 5
14027: IN
14028: IFTRUE 14040
14030: PUSH
14031: LD_INT 28
14033: PUSH
14034: LD_VAR 0 5
14038: IN
14039: OR
14040: IFTRUE 14052
14042: PUSH
14043: LD_INT 45
14045: PUSH
14046: LD_VAR 0 5
14050: IN
14051: OR
14052: AND
14053: IFFALSE 14307
// begin hex := GetHexInfo ( x , y ) ;
14055: LD_ADDR_VAR 0 4
14059: PUSH
14060: LD_VAR 0 10
14064: PPUSH
14065: LD_VAR 0 11
14069: PPUSH
14070: CALL_OW 546
14074: ST_TO_ADDR
// if hex [ 1 ] then
14075: LD_VAR 0 4
14079: PUSH
14080: LD_INT 1
14082: ARRAY
14083: IFFALSE 14087
// exit ;
14085: GO 14494
// height := hex [ 2 ] ;
14087: LD_ADDR_VAR 0 15
14091: PUSH
14092: LD_VAR 0 4
14096: PUSH
14097: LD_INT 2
14099: ARRAY
14100: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14101: LD_ADDR_VAR 0 14
14105: PUSH
14106: LD_INT 0
14108: PUSH
14109: LD_INT 2
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: ST_TO_ADDR
// for i in tmp do
14124: LD_ADDR_VAR 0 8
14128: PUSH
14129: LD_VAR 0 14
14133: PUSH
14134: FOR_IN
14135: IFFALSE 14305
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14137: LD_ADDR_VAR 0 9
14141: PUSH
14142: LD_VAR 0 10
14146: PPUSH
14147: LD_VAR 0 8
14151: PPUSH
14152: LD_INT 5
14154: PPUSH
14155: CALL_OW 272
14159: PUSH
14160: LD_VAR 0 11
14164: PPUSH
14165: LD_VAR 0 8
14169: PPUSH
14170: LD_INT 5
14172: PPUSH
14173: CALL_OW 273
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14182: LD_VAR 0 9
14186: PUSH
14187: LD_INT 1
14189: ARRAY
14190: PPUSH
14191: LD_VAR 0 9
14195: PUSH
14196: LD_INT 2
14198: ARRAY
14199: PPUSH
14200: CALL_OW 488
14204: IFFALSE 14303
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14206: LD_ADDR_VAR 0 4
14210: PUSH
14211: LD_VAR 0 9
14215: PUSH
14216: LD_INT 1
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 9
14224: PUSH
14225: LD_INT 2
14227: ARRAY
14228: PPUSH
14229: CALL_OW 546
14233: ST_TO_ADDR
// if hex [ 1 ] then
14234: LD_VAR 0 4
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: IFFALSE 14246
// continue ;
14244: GO 14134
// h := hex [ 2 ] ;
14246: LD_ADDR_VAR 0 13
14250: PUSH
14251: LD_VAR 0 4
14255: PUSH
14256: LD_INT 2
14258: ARRAY
14259: ST_TO_ADDR
// if h + 7 < height then
14260: LD_VAR 0 13
14264: PUSH
14265: LD_INT 7
14267: PLUS
14268: PUSH
14269: LD_VAR 0 15
14273: LESS
14274: IFFALSE 14303
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14276: LD_ADDR_VAR 0 18
14280: PUSH
14281: LD_INT 7
14283: PUSH
14284: LD_INT 28
14286: PUSH
14287: LD_INT 45
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: PUSH
14295: LD_VAR 0 12
14299: ARRAY
14300: ST_TO_ADDR
// break ;
14301: GO 14305
// end ; end ; end ;
14303: GO 14134
14305: POP
14306: POP
// end ; if not weapon then
14307: LD_VAR 0 18
14311: NOT
14312: IFFALSE 14372
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14314: LD_ADDR_VAR 0 5
14318: PUSH
14319: LD_VAR 0 5
14323: PUSH
14324: LD_INT 11
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: LD_INT 49
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: DIFF
14338: ST_TO_ADDR
// if not list then
14339: LD_VAR 0 5
14343: NOT
14344: IFFALSE 14348
// exit ;
14346: GO 14494
// weapon := list [ rand ( 1 , list ) ] ;
14348: LD_ADDR_VAR 0 18
14352: PUSH
14353: LD_VAR 0 5
14357: PUSH
14358: LD_INT 1
14360: PPUSH
14361: LD_VAR 0 5
14365: PPUSH
14366: CALL_OW 12
14370: ARRAY
14371: ST_TO_ADDR
// end ; if weapon then
14372: LD_VAR 0 18
14376: IFFALSE 14494
// begin tmp := CostOfWeapon ( weapon ) ;
14378: LD_ADDR_VAR 0 14
14382: PUSH
14383: LD_VAR 0 18
14387: PPUSH
14388: CALL_OW 451
14392: ST_TO_ADDR
// j := GetBase ( tower ) ;
14393: LD_ADDR_VAR 0 9
14397: PUSH
14398: LD_VAR 0 1
14402: PPUSH
14403: CALL_OW 274
14407: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14408: LD_VAR 0 9
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 275
14420: PUSH
14421: LD_VAR 0 14
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: GREATEREQUAL
14430: IFFALSE 14456
14432: PUSH
14433: LD_VAR 0 9
14437: PPUSH
14438: LD_INT 2
14440: PPUSH
14441: CALL_OW 275
14445: PUSH
14446: LD_VAR 0 14
14450: PUSH
14451: LD_INT 2
14453: ARRAY
14454: GREATEREQUAL
14455: AND
14456: IFFALSE 14482
14458: PUSH
14459: LD_VAR 0 9
14463: PPUSH
14464: LD_INT 3
14466: PPUSH
14467: CALL_OW 275
14471: PUSH
14472: LD_VAR 0 14
14476: PUSH
14477: LD_INT 3
14479: ARRAY
14480: GREATEREQUAL
14481: AND
14482: IFFALSE 14494
// result := weapon ;
14484: LD_ADDR_VAR 0 3
14488: PUSH
14489: LD_VAR 0 18
14493: ST_TO_ADDR
// end ; end ;
14494: LD_VAR 0 3
14498: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14499: LD_INT 0
14501: PPUSH
14502: PPUSH
// result := true ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: LD_INT 1
14510: ST_TO_ADDR
// if array1 = array2 then
14511: LD_VAR 0 1
14515: PUSH
14516: LD_VAR 0 2
14520: EQUAL
14521: IFFALSE 14581
// begin for i = 1 to array1 do
14523: LD_ADDR_VAR 0 4
14527: PUSH
14528: DOUBLE
14529: LD_INT 1
14531: DEC
14532: ST_TO_ADDR
14533: LD_VAR 0 1
14537: PUSH
14538: FOR_TO
14539: IFFALSE 14577
// if array1 [ i ] <> array2 [ i ] then
14541: LD_VAR 0 1
14545: PUSH
14546: LD_VAR 0 4
14550: ARRAY
14551: PUSH
14552: LD_VAR 0 2
14556: PUSH
14557: LD_VAR 0 4
14561: ARRAY
14562: NONEQUAL
14563: IFFALSE 14575
// begin result := false ;
14565: LD_ADDR_VAR 0 3
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// break ;
14573: GO 14577
// end ;
14575: GO 14538
14577: POP
14578: POP
// end else
14579: GO 14589
// result := false ;
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// end ;
14589: LD_VAR 0 3
14593: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
// if not array1 or not array2 then
14598: LD_VAR 0 1
14602: NOT
14603: IFTRUE 14612
14605: PUSH
14606: LD_VAR 0 2
14610: NOT
14611: OR
14612: IFFALSE 14616
// exit ;
14614: GO 14680
// result := true ;
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_INT 1
14623: ST_TO_ADDR
// for i = 1 to array1 do
14624: LD_ADDR_VAR 0 4
14628: PUSH
14629: DOUBLE
14630: LD_INT 1
14632: DEC
14633: ST_TO_ADDR
14634: LD_VAR 0 1
14638: PUSH
14639: FOR_TO
14640: IFFALSE 14678
// if array1 [ i ] <> array2 [ i ] then
14642: LD_VAR 0 1
14646: PUSH
14647: LD_VAR 0 4
14651: ARRAY
14652: PUSH
14653: LD_VAR 0 2
14657: PUSH
14658: LD_VAR 0 4
14662: ARRAY
14663: NONEQUAL
14664: IFFALSE 14676
// begin result := false ;
14666: LD_ADDR_VAR 0 3
14670: PUSH
14671: LD_INT 0
14673: ST_TO_ADDR
// break ;
14674: GO 14678
// end ;
14676: GO 14639
14678: POP
14679: POP
// end ;
14680: LD_VAR 0 3
14684: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14685: LD_INT 0
14687: PPUSH
14688: PPUSH
14689: PPUSH
// pom := GetBase ( fac ) ;
14690: LD_ADDR_VAR 0 5
14694: PUSH
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 274
14704: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14705: LD_ADDR_VAR 0 4
14709: PUSH
14710: LD_VAR 0 2
14714: PUSH
14715: LD_INT 1
14717: ARRAY
14718: PPUSH
14719: LD_VAR 0 2
14723: PUSH
14724: LD_INT 2
14726: ARRAY
14727: PPUSH
14728: LD_VAR 0 2
14732: PUSH
14733: LD_INT 3
14735: ARRAY
14736: PPUSH
14737: LD_VAR 0 2
14741: PUSH
14742: LD_INT 4
14744: ARRAY
14745: PPUSH
14746: CALL_OW 449
14750: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14751: LD_ADDR_VAR 0 3
14755: PUSH
14756: LD_VAR 0 5
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 275
14768: PUSH
14769: LD_VAR 0 4
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: GREATEREQUAL
14778: IFFALSE 14804
14780: PUSH
14781: LD_VAR 0 5
14785: PPUSH
14786: LD_INT 2
14788: PPUSH
14789: CALL_OW 275
14793: PUSH
14794: LD_VAR 0 4
14798: PUSH
14799: LD_INT 2
14801: ARRAY
14802: GREATEREQUAL
14803: AND
14804: IFFALSE 14830
14806: PUSH
14807: LD_VAR 0 5
14811: PPUSH
14812: LD_INT 3
14814: PPUSH
14815: CALL_OW 275
14819: PUSH
14820: LD_VAR 0 4
14824: PUSH
14825: LD_INT 3
14827: ARRAY
14828: GREATEREQUAL
14829: AND
14830: ST_TO_ADDR
// end ;
14831: LD_VAR 0 3
14835: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
14840: PPUSH
14841: PPUSH
// pom := GetBase ( building ) ;
14842: LD_ADDR_VAR 0 3
14846: PUSH
14847: LD_VAR 0 1
14851: PPUSH
14852: CALL_OW 274
14856: ST_TO_ADDR
// if not pom then
14857: LD_VAR 0 3
14861: NOT
14862: IFFALSE 14866
// exit ;
14864: GO 15040
// btype := GetBType ( building ) ;
14866: LD_ADDR_VAR 0 5
14870: PUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 266
14880: ST_TO_ADDR
// if btype = b_armoury then
14881: LD_VAR 0 5
14885: PUSH
14886: LD_INT 4
14888: EQUAL
14889: IFFALSE 14899
// btype := b_barracks ;
14891: LD_ADDR_VAR 0 5
14895: PUSH
14896: LD_INT 5
14898: ST_TO_ADDR
// if btype = b_depot then
14899: LD_VAR 0 5
14903: PUSH
14904: LD_INT 0
14906: EQUAL
14907: IFFALSE 14917
// btype := b_warehouse ;
14909: LD_ADDR_VAR 0 5
14913: PUSH
14914: LD_INT 1
14916: ST_TO_ADDR
// if btype = b_workshop then
14917: LD_VAR 0 5
14921: PUSH
14922: LD_INT 2
14924: EQUAL
14925: IFFALSE 14935
// btype := b_factory ;
14927: LD_ADDR_VAR 0 5
14931: PUSH
14932: LD_INT 3
14934: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14935: LD_ADDR_VAR 0 4
14939: PUSH
14940: LD_VAR 0 5
14944: PPUSH
14945: LD_VAR 0 1
14949: PPUSH
14950: CALL_OW 248
14954: PPUSH
14955: CALL_OW 450
14959: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14960: LD_ADDR_VAR 0 2
14964: PUSH
14965: LD_VAR 0 3
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 275
14977: PUSH
14978: LD_VAR 0 4
14982: PUSH
14983: LD_INT 1
14985: ARRAY
14986: GREATEREQUAL
14987: IFFALSE 15013
14989: PUSH
14990: LD_VAR 0 3
14994: PPUSH
14995: LD_INT 2
14997: PPUSH
14998: CALL_OW 275
15002: PUSH
15003: LD_VAR 0 4
15007: PUSH
15008: LD_INT 2
15010: ARRAY
15011: GREATEREQUAL
15012: AND
15013: IFFALSE 15039
15015: PUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 3
15023: PPUSH
15024: CALL_OW 275
15028: PUSH
15029: LD_VAR 0 4
15033: PUSH
15034: LD_INT 3
15036: ARRAY
15037: GREATEREQUAL
15038: AND
15039: ST_TO_ADDR
// end ;
15040: LD_VAR 0 2
15044: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15045: LD_INT 0
15047: PPUSH
15048: PPUSH
15049: PPUSH
// pom := GetBase ( building ) ;
15050: LD_ADDR_VAR 0 4
15054: PUSH
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 274
15064: ST_TO_ADDR
// if not pom then
15065: LD_VAR 0 4
15069: NOT
15070: IFFALSE 15074
// exit ;
15072: GO 15179
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15074: LD_ADDR_VAR 0 5
15078: PUSH
15079: LD_VAR 0 2
15083: PPUSH
15084: LD_VAR 0 1
15088: PPUSH
15089: CALL_OW 248
15093: PPUSH
15094: CALL_OW 450
15098: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15099: LD_ADDR_VAR 0 3
15103: PUSH
15104: LD_VAR 0 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 275
15116: PUSH
15117: LD_VAR 0 5
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: GREATEREQUAL
15126: IFFALSE 15152
15128: PUSH
15129: LD_VAR 0 4
15133: PPUSH
15134: LD_INT 2
15136: PPUSH
15137: CALL_OW 275
15141: PUSH
15142: LD_VAR 0 5
15146: PUSH
15147: LD_INT 2
15149: ARRAY
15150: GREATEREQUAL
15151: AND
15152: IFFALSE 15178
15154: PUSH
15155: LD_VAR 0 4
15159: PPUSH
15160: LD_INT 3
15162: PPUSH
15163: CALL_OW 275
15167: PUSH
15168: LD_VAR 0 5
15172: PUSH
15173: LD_INT 3
15175: ARRAY
15176: GREATEREQUAL
15177: AND
15178: ST_TO_ADDR
// end ;
15179: LD_VAR 0 3
15183: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15184: LD_INT 0
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
// result := false ;
15197: LD_ADDR_VAR 0 8
15201: PUSH
15202: LD_INT 0
15204: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15205: LD_VAR 0 5
15209: NOT
15210: IFTRUE 15219
15212: PUSH
15213: LD_VAR 0 1
15217: NOT
15218: OR
15219: IFTRUE 15228
15221: PUSH
15222: LD_VAR 0 2
15226: NOT
15227: OR
15228: IFTRUE 15237
15230: PUSH
15231: LD_VAR 0 3
15235: NOT
15236: OR
15237: IFFALSE 15241
// exit ;
15239: GO 16067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15241: LD_ADDR_VAR 0 14
15245: PUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_VAR 0 2
15255: PPUSH
15256: LD_VAR 0 3
15260: PPUSH
15261: LD_VAR 0 4
15265: PPUSH
15266: LD_VAR 0 5
15270: PUSH
15271: LD_INT 1
15273: ARRAY
15274: PPUSH
15275: CALL_OW 248
15279: PPUSH
15280: LD_INT 0
15282: PPUSH
15283: CALL 17348 0 6
15287: ST_TO_ADDR
// if not hexes then
15288: LD_VAR 0 14
15292: NOT
15293: IFFALSE 15297
// exit ;
15295: GO 16067
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15297: LD_ADDR_VAR 0 17
15301: PUSH
15302: LD_VAR 0 5
15306: PPUSH
15307: LD_INT 22
15309: PUSH
15310: LD_VAR 0 13
15314: PPUSH
15315: CALL_OW 255
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: LD_INT 30
15329: PUSH
15330: LD_INT 0
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PPUSH
15356: CALL_OW 72
15360: ST_TO_ADDR
// for i = 1 to hexes do
15361: LD_ADDR_VAR 0 9
15365: PUSH
15366: DOUBLE
15367: LD_INT 1
15369: DEC
15370: ST_TO_ADDR
15371: LD_VAR 0 14
15375: PUSH
15376: FOR_TO
15377: IFFALSE 16065
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15379: LD_ADDR_VAR 0 13
15383: PUSH
15384: LD_VAR 0 14
15388: PUSH
15389: LD_VAR 0 9
15393: ARRAY
15394: PUSH
15395: LD_INT 1
15397: ARRAY
15398: PPUSH
15399: LD_VAR 0 14
15403: PUSH
15404: LD_VAR 0 9
15408: ARRAY
15409: PUSH
15410: LD_INT 2
15412: ARRAY
15413: PPUSH
15414: CALL_OW 428
15418: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15419: LD_VAR 0 14
15423: PUSH
15424: LD_VAR 0 9
15428: ARRAY
15429: PUSH
15430: LD_INT 1
15432: ARRAY
15433: PPUSH
15434: LD_VAR 0 14
15438: PUSH
15439: LD_VAR 0 9
15443: ARRAY
15444: PUSH
15445: LD_INT 2
15447: ARRAY
15448: PPUSH
15449: CALL_OW 351
15453: IFTRUE 15492
15455: PUSH
15456: LD_VAR 0 14
15460: PUSH
15461: LD_VAR 0 9
15465: ARRAY
15466: PUSH
15467: LD_INT 1
15469: ARRAY
15470: PPUSH
15471: LD_VAR 0 14
15475: PUSH
15476: LD_VAR 0 9
15480: ARRAY
15481: PUSH
15482: LD_INT 2
15484: ARRAY
15485: PPUSH
15486: CALL_OW 488
15490: NOT
15491: OR
15492: IFTRUE 15509
15494: PUSH
15495: LD_VAR 0 13
15499: PPUSH
15500: CALL_OW 247
15504: PUSH
15505: LD_INT 3
15507: EQUAL
15508: OR
15509: IFFALSE 15515
// exit ;
15511: POP
15512: POP
15513: GO 16067
// if not tmp then
15515: LD_VAR 0 13
15519: NOT
15520: IFFALSE 15524
// continue ;
15522: GO 15376
// result := true ;
15524: LD_ADDR_VAR 0 8
15528: PUSH
15529: LD_INT 1
15531: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15532: LD_VAR 0 6
15536: IFFALSE 15553
15538: PUSH
15539: LD_VAR 0 13
15543: PPUSH
15544: CALL_OW 247
15548: PUSH
15549: LD_INT 2
15551: EQUAL
15552: AND
15553: IFFALSE 15570
15555: PUSH
15556: LD_VAR 0 13
15560: PPUSH
15561: CALL_OW 263
15565: PUSH
15566: LD_INT 1
15568: EQUAL
15569: AND
15570: IFFALSE 15734
// begin if IsDrivenBy ( tmp ) then
15572: LD_VAR 0 13
15576: PPUSH
15577: CALL_OW 311
15581: IFFALSE 15585
// continue ;
15583: GO 15376
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15585: LD_VAR 0 6
15589: PPUSH
15590: LD_INT 3
15592: PUSH
15593: LD_INT 60
15595: PUSH
15596: EMPTY
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: LD_INT 55
15608: PUSH
15609: EMPTY
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 72
15624: IFFALSE 15732
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15626: LD_ADDR_VAR 0 18
15630: PUSH
15631: LD_VAR 0 6
15635: PPUSH
15636: LD_INT 3
15638: PUSH
15639: LD_INT 60
15641: PUSH
15642: EMPTY
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 3
15651: PUSH
15652: LD_INT 55
15654: PUSH
15655: EMPTY
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: PUSH
15671: LD_INT 1
15673: ARRAY
15674: ST_TO_ADDR
// if IsInUnit ( driver ) then
15675: LD_VAR 0 18
15679: PPUSH
15680: CALL_OW 310
15684: IFFALSE 15695
// ComExit ( driver ) ;
15686: LD_VAR 0 18
15690: PPUSH
15691: CALL 41338 0 1
// AddComEnterUnit ( driver , tmp ) ;
15695: LD_VAR 0 18
15699: PPUSH
15700: LD_VAR 0 13
15704: PPUSH
15705: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15709: LD_VAR 0 18
15713: PPUSH
15714: LD_VAR 0 7
15718: PPUSH
15719: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15723: LD_VAR 0 18
15727: PPUSH
15728: CALL_OW 181
// end ; continue ;
15732: GO 15376
// end ; if not cleaners or not tmp in cleaners then
15734: LD_VAR 0 6
15738: NOT
15739: IFTRUE 15754
15741: PUSH
15742: LD_VAR 0 13
15746: PUSH
15747: LD_VAR 0 6
15751: IN
15752: NOT
15753: OR
15754: IFFALSE 16063
// begin if dep then
15756: LD_VAR 0 17
15760: IFFALSE 15896
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15762: LD_ADDR_VAR 0 16
15766: PUSH
15767: LD_VAR 0 17
15771: PUSH
15772: LD_INT 1
15774: ARRAY
15775: PPUSH
15776: CALL_OW 250
15780: PPUSH
15781: LD_VAR 0 17
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: CALL_OW 254
15794: PPUSH
15795: LD_INT 5
15797: PPUSH
15798: CALL_OW 272
15802: PUSH
15803: LD_VAR 0 17
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: CALL_OW 251
15816: PPUSH
15817: LD_VAR 0 17
15821: PUSH
15822: LD_INT 1
15824: ARRAY
15825: PPUSH
15826: CALL_OW 254
15830: PPUSH
15831: LD_INT 5
15833: PPUSH
15834: CALL_OW 273
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15843: LD_VAR 0 16
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_VAR 0 16
15856: PUSH
15857: LD_INT 2
15859: ARRAY
15860: PPUSH
15861: CALL_OW 488
15865: IFFALSE 15896
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15867: LD_VAR 0 13
15871: PPUSH
15872: LD_VAR 0 16
15876: PUSH
15877: LD_INT 1
15879: ARRAY
15880: PPUSH
15881: LD_VAR 0 16
15885: PUSH
15886: LD_INT 2
15888: ARRAY
15889: PPUSH
15890: CALL_OW 111
// continue ;
15894: GO 15376
// end ; end ; r := GetDir ( tmp ) ;
15896: LD_ADDR_VAR 0 15
15900: PUSH
15901: LD_VAR 0 13
15905: PPUSH
15906: CALL_OW 254
15910: ST_TO_ADDR
// if r = 5 then
15911: LD_VAR 0 15
15915: PUSH
15916: LD_INT 5
15918: EQUAL
15919: IFFALSE 15929
// r := 0 ;
15921: LD_ADDR_VAR 0 15
15925: PUSH
15926: LD_INT 0
15928: ST_TO_ADDR
// for j = r to 5 do
15929: LD_ADDR_VAR 0 10
15933: PUSH
15934: DOUBLE
15935: LD_VAR 0 15
15939: DEC
15940: ST_TO_ADDR
15941: LD_INT 5
15943: PUSH
15944: FOR_TO
15945: IFFALSE 16061
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15947: LD_ADDR_VAR 0 11
15951: PUSH
15952: LD_VAR 0 13
15956: PPUSH
15957: CALL_OW 250
15961: PPUSH
15962: LD_VAR 0 10
15966: PPUSH
15967: LD_INT 2
15969: PPUSH
15970: CALL_OW 272
15974: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15975: LD_ADDR_VAR 0 12
15979: PUSH
15980: LD_VAR 0 13
15984: PPUSH
15985: CALL_OW 251
15989: PPUSH
15990: LD_VAR 0 10
15994: PPUSH
15995: LD_INT 2
15997: PPUSH
15998: CALL_OW 273
16002: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16003: LD_VAR 0 11
16007: PPUSH
16008: LD_VAR 0 12
16012: PPUSH
16013: CALL_OW 488
16017: IFFALSE 16036
16019: PUSH
16020: LD_VAR 0 11
16024: PPUSH
16025: LD_VAR 0 12
16029: PPUSH
16030: CALL_OW 428
16034: NOT
16035: AND
16036: IFFALSE 16059
// begin ComMoveXY ( tmp , _x , _y ) ;
16038: LD_VAR 0 13
16042: PPUSH
16043: LD_VAR 0 11
16047: PPUSH
16048: LD_VAR 0 12
16052: PPUSH
16053: CALL_OW 111
// break ;
16057: GO 16061
// end ; end ;
16059: GO 15944
16061: POP
16062: POP
// end ; end ;
16063: GO 15376
16065: POP
16066: POP
// end ;
16067: LD_VAR 0 8
16071: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16072: LD_INT 0
16074: PPUSH
// result := true ;
16075: LD_ADDR_VAR 0 3
16079: PUSH
16080: LD_INT 1
16082: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16083: LD_VAR 0 2
16087: PUSH
16088: LD_INT 24
16090: DOUBLE
16091: EQUAL
16092: IFTRUE 16102
16094: LD_INT 33
16096: DOUBLE
16097: EQUAL
16098: IFTRUE 16102
16100: GO 16127
16102: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16103: LD_ADDR_VAR 0 3
16107: PUSH
16108: LD_INT 32
16110: PPUSH
16111: LD_VAR 0 1
16115: PPUSH
16116: CALL_OW 321
16120: PUSH
16121: LD_INT 2
16123: EQUAL
16124: ST_TO_ADDR
16125: GO 16443
16127: LD_INT 20
16129: DOUBLE
16130: EQUAL
16131: IFTRUE 16135
16133: GO 16160
16135: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16136: LD_ADDR_VAR 0 3
16140: PUSH
16141: LD_INT 6
16143: PPUSH
16144: LD_VAR 0 1
16148: PPUSH
16149: CALL_OW 321
16153: PUSH
16154: LD_INT 2
16156: EQUAL
16157: ST_TO_ADDR
16158: GO 16443
16160: LD_INT 22
16162: DOUBLE
16163: EQUAL
16164: IFTRUE 16174
16166: LD_INT 36
16168: DOUBLE
16169: EQUAL
16170: IFTRUE 16174
16172: GO 16199
16174: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16175: LD_ADDR_VAR 0 3
16179: PUSH
16180: LD_INT 15
16182: PPUSH
16183: LD_VAR 0 1
16187: PPUSH
16188: CALL_OW 321
16192: PUSH
16193: LD_INT 2
16195: EQUAL
16196: ST_TO_ADDR
16197: GO 16443
16199: LD_INT 30
16201: DOUBLE
16202: EQUAL
16203: IFTRUE 16207
16205: GO 16232
16207: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16208: LD_ADDR_VAR 0 3
16212: PUSH
16213: LD_INT 20
16215: PPUSH
16216: LD_VAR 0 1
16220: PPUSH
16221: CALL_OW 321
16225: PUSH
16226: LD_INT 2
16228: EQUAL
16229: ST_TO_ADDR
16230: GO 16443
16232: LD_INT 28
16234: DOUBLE
16235: EQUAL
16236: IFTRUE 16246
16238: LD_INT 21
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16271
16246: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16247: LD_ADDR_VAR 0 3
16251: PUSH
16252: LD_INT 21
16254: PPUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: CALL_OW 321
16264: PUSH
16265: LD_INT 2
16267: EQUAL
16268: ST_TO_ADDR
16269: GO 16443
16271: LD_INT 16
16273: DOUBLE
16274: EQUAL
16275: IFTRUE 16279
16277: GO 16304
16279: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: LD_INT 84
16287: PPUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 321
16297: PUSH
16298: LD_INT 2
16300: EQUAL
16301: ST_TO_ADDR
16302: GO 16443
16304: LD_INT 19
16306: DOUBLE
16307: EQUAL
16308: IFTRUE 16318
16310: LD_INT 23
16312: DOUBLE
16313: EQUAL
16314: IFTRUE 16318
16316: GO 16343
16318: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16319: LD_ADDR_VAR 0 3
16323: PUSH
16324: LD_INT 83
16326: PPUSH
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 321
16336: PUSH
16337: LD_INT 2
16339: EQUAL
16340: ST_TO_ADDR
16341: GO 16443
16343: LD_INT 17
16345: DOUBLE
16346: EQUAL
16347: IFTRUE 16351
16349: GO 16376
16351: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16352: LD_ADDR_VAR 0 3
16356: PUSH
16357: LD_INT 39
16359: PPUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: CALL_OW 321
16369: PUSH
16370: LD_INT 2
16372: EQUAL
16373: ST_TO_ADDR
16374: GO 16443
16376: LD_INT 18
16378: DOUBLE
16379: EQUAL
16380: IFTRUE 16384
16382: GO 16409
16384: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16385: LD_ADDR_VAR 0 3
16389: PUSH
16390: LD_INT 40
16392: PPUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 321
16402: PUSH
16403: LD_INT 2
16405: EQUAL
16406: ST_TO_ADDR
16407: GO 16443
16409: LD_INT 27
16411: DOUBLE
16412: EQUAL
16413: IFTRUE 16417
16415: GO 16442
16417: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16418: LD_ADDR_VAR 0 3
16422: PUSH
16423: LD_INT 35
16425: PPUSH
16426: LD_VAR 0 1
16430: PPUSH
16431: CALL_OW 321
16435: PUSH
16436: LD_INT 2
16438: EQUAL
16439: ST_TO_ADDR
16440: GO 16443
16442: POP
// end ;
16443: LD_VAR 0 3
16447: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16448: LD_INT 0
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
// result := false ;
16461: LD_ADDR_VAR 0 6
16465: PUSH
16466: LD_INT 0
16468: ST_TO_ADDR
// if btype = b_depot then
16469: LD_VAR 0 2
16473: PUSH
16474: LD_INT 0
16476: EQUAL
16477: IFFALSE 16489
// begin result := true ;
16479: LD_ADDR_VAR 0 6
16483: PUSH
16484: LD_INT 1
16486: ST_TO_ADDR
// exit ;
16487: GO 17343
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16489: LD_VAR 0 1
16493: NOT
16494: IFTRUE 16519
16496: PUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 266
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: IN
16517: NOT
16518: OR
16519: IFTRUE 16528
16521: PUSH
16522: LD_VAR 0 2
16526: NOT
16527: OR
16528: IFTRUE 16564
16530: PUSH
16531: LD_VAR 0 5
16535: PUSH
16536: LD_INT 0
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: LD_INT 3
16547: PUSH
16548: LD_INT 4
16550: PUSH
16551: LD_INT 5
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: IN
16562: NOT
16563: OR
16564: IFTRUE 16583
16566: PUSH
16567: LD_VAR 0 3
16571: PPUSH
16572: LD_VAR 0 4
16576: PPUSH
16577: CALL_OW 488
16581: NOT
16582: OR
16583: IFFALSE 16587
// exit ;
16585: GO 17343
// side := GetSide ( depot ) ;
16587: LD_ADDR_VAR 0 9
16591: PUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 255
16601: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16602: LD_VAR 0 9
16606: PPUSH
16607: LD_VAR 0 2
16611: PPUSH
16612: CALL 16072 0 2
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 17343
// pom := GetBase ( depot ) ;
16621: LD_ADDR_VAR 0 10
16625: PUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 274
16635: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16636: LD_ADDR_VAR 0 11
16640: PUSH
16641: LD_VAR 0 2
16645: PPUSH
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 248
16655: PPUSH
16656: CALL_OW 450
16660: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16661: LD_VAR 0 10
16665: PPUSH
16666: LD_INT 1
16668: PPUSH
16669: CALL_OW 275
16673: PUSH
16674: LD_VAR 0 11
16678: PUSH
16679: LD_INT 1
16681: ARRAY
16682: GREATEREQUAL
16683: IFFALSE 16709
16685: PUSH
16686: LD_VAR 0 10
16690: PPUSH
16691: LD_INT 2
16693: PPUSH
16694: CALL_OW 275
16698: PUSH
16699: LD_VAR 0 11
16703: PUSH
16704: LD_INT 2
16706: ARRAY
16707: GREATEREQUAL
16708: AND
16709: IFFALSE 16735
16711: PUSH
16712: LD_VAR 0 10
16716: PPUSH
16717: LD_INT 3
16719: PPUSH
16720: CALL_OW 275
16724: PUSH
16725: LD_VAR 0 11
16729: PUSH
16730: LD_INT 3
16732: ARRAY
16733: GREATEREQUAL
16734: AND
16735: NOT
16736: IFFALSE 16740
// exit ;
16738: GO 17343
// if GetBType ( depot ) = b_depot then
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 266
16749: PUSH
16750: LD_INT 0
16752: EQUAL
16753: IFFALSE 16765
// dist := 28 else
16755: LD_ADDR_VAR 0 14
16759: PUSH
16760: LD_INT 28
16762: ST_TO_ADDR
16763: GO 16773
// dist := 36 ;
16765: LD_ADDR_VAR 0 14
16769: PUSH
16770: LD_INT 36
16772: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16773: LD_VAR 0 1
16777: PPUSH
16778: LD_VAR 0 3
16782: PPUSH
16783: LD_VAR 0 4
16787: PPUSH
16788: CALL_OW 297
16792: PUSH
16793: LD_VAR 0 14
16797: GREATER
16798: IFFALSE 16802
// exit ;
16800: GO 17343
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16802: LD_ADDR_VAR 0 12
16806: PUSH
16807: LD_VAR 0 2
16811: PPUSH
16812: LD_VAR 0 3
16816: PPUSH
16817: LD_VAR 0 4
16821: PPUSH
16822: LD_VAR 0 5
16826: PPUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: CALL_OW 248
16836: PPUSH
16837: LD_INT 0
16839: PPUSH
16840: CALL 17348 0 6
16844: ST_TO_ADDR
// if not hexes then
16845: LD_VAR 0 12
16849: NOT
16850: IFFALSE 16854
// exit ;
16852: GO 17343
// hex := GetHexInfo ( x , y ) ;
16854: LD_ADDR_VAR 0 15
16858: PUSH
16859: LD_VAR 0 3
16863: PPUSH
16864: LD_VAR 0 4
16868: PPUSH
16869: CALL_OW 546
16873: ST_TO_ADDR
// if hex [ 1 ] then
16874: LD_VAR 0 15
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: IFFALSE 16886
// exit ;
16884: GO 17343
// height := hex [ 2 ] ;
16886: LD_ADDR_VAR 0 13
16890: PUSH
16891: LD_VAR 0 15
16895: PUSH
16896: LD_INT 2
16898: ARRAY
16899: ST_TO_ADDR
// for i = 1 to hexes do
16900: LD_ADDR_VAR 0 7
16904: PUSH
16905: DOUBLE
16906: LD_INT 1
16908: DEC
16909: ST_TO_ADDR
16910: LD_VAR 0 12
16914: PUSH
16915: FOR_TO
16916: IFFALSE 17260
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16918: LD_VAR 0 12
16922: PUSH
16923: LD_VAR 0 7
16927: ARRAY
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: PPUSH
16933: LD_VAR 0 12
16937: PUSH
16938: LD_VAR 0 7
16942: ARRAY
16943: PUSH
16944: LD_INT 2
16946: ARRAY
16947: PPUSH
16948: CALL_OW 488
16952: NOT
16953: IFTRUE 16995
16955: PUSH
16956: LD_VAR 0 12
16960: PUSH
16961: LD_VAR 0 7
16965: ARRAY
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: PPUSH
16971: LD_VAR 0 12
16975: PUSH
16976: LD_VAR 0 7
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 428
16990: PUSH
16991: LD_INT 0
16993: GREATER
16994: OR
16995: IFTRUE 17033
16997: PUSH
16998: LD_VAR 0 12
17002: PUSH
17003: LD_VAR 0 7
17007: ARRAY
17008: PUSH
17009: LD_INT 1
17011: ARRAY
17012: PPUSH
17013: LD_VAR 0 12
17017: PUSH
17018: LD_VAR 0 7
17022: ARRAY
17023: PUSH
17024: LD_INT 2
17026: ARRAY
17027: PPUSH
17028: CALL_OW 351
17032: OR
17033: IFFALSE 17039
// exit ;
17035: POP
17036: POP
17037: GO 17343
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17039: LD_ADDR_VAR 0 8
17043: PUSH
17044: LD_VAR 0 12
17048: PUSH
17049: LD_VAR 0 7
17053: ARRAY
17054: PUSH
17055: LD_INT 1
17057: ARRAY
17058: PPUSH
17059: LD_VAR 0 12
17063: PUSH
17064: LD_VAR 0 7
17068: ARRAY
17069: PUSH
17070: LD_INT 2
17072: ARRAY
17073: PPUSH
17074: CALL_OW 546
17078: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17079: LD_VAR 0 8
17083: PUSH
17084: LD_INT 1
17086: ARRAY
17087: IFTRUE 17109
17089: PUSH
17090: LD_VAR 0 8
17094: PUSH
17095: LD_INT 2
17097: ARRAY
17098: PUSH
17099: LD_VAR 0 13
17103: PUSH
17104: LD_INT 2
17106: PLUS
17107: GREATER
17108: OR
17109: IFTRUE 17131
17111: PUSH
17112: LD_VAR 0 8
17116: PUSH
17117: LD_INT 2
17119: ARRAY
17120: PUSH
17121: LD_VAR 0 13
17125: PUSH
17126: LD_INT 2
17128: MINUS
17129: LESS
17130: OR
17131: IFTRUE 17199
17133: PUSH
17134: LD_VAR 0 8
17138: PUSH
17139: LD_INT 3
17141: ARRAY
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: LD_INT 8
17148: PUSH
17149: LD_INT 9
17151: PUSH
17152: LD_INT 10
17154: PUSH
17155: LD_INT 11
17157: PUSH
17158: LD_INT 12
17160: PUSH
17161: LD_INT 13
17163: PUSH
17164: LD_INT 16
17166: PUSH
17167: LD_INT 17
17169: PUSH
17170: LD_INT 18
17172: PUSH
17173: LD_INT 19
17175: PUSH
17176: LD_INT 20
17178: PUSH
17179: LD_INT 21
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: IN
17197: NOT
17198: OR
17199: IFTRUE 17212
17201: PUSH
17202: LD_VAR 0 8
17206: PUSH
17207: LD_INT 5
17209: ARRAY
17210: NOT
17211: OR
17212: IFTRUE 17252
17214: PUSH
17215: LD_VAR 0 8
17219: PUSH
17220: LD_INT 6
17222: ARRAY
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 7
17232: PUSH
17233: LD_INT 9
17235: PUSH
17236: LD_INT 10
17238: PUSH
17239: LD_INT 11
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: IN
17250: NOT
17251: OR
17252: IFFALSE 17258
// exit ;
17254: POP
17255: POP
17256: GO 17343
// end ;
17258: GO 16915
17260: POP
17261: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17262: LD_VAR 0 9
17266: PPUSH
17267: LD_VAR 0 3
17271: PPUSH
17272: LD_VAR 0 4
17276: PPUSH
17277: LD_INT 20
17279: PPUSH
17280: CALL 9162 0 4
17284: PUSH
17285: LD_INT 4
17287: ARRAY
17288: IFFALSE 17292
// exit ;
17290: GO 17343
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17292: LD_VAR 0 2
17296: PUSH
17297: LD_INT 29
17299: PUSH
17300: LD_INT 30
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: IN
17307: IFFALSE 17331
17309: PUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_VAR 0 4
17319: PPUSH
17320: LD_VAR 0 9
17324: PPUSH
17325: CALL_OW 440
17329: NOT
17330: AND
17331: IFFALSE 17335
// exit ;
17333: GO 17343
// result := true ;
17335: LD_ADDR_VAR 0 6
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
// end ;
17343: LD_VAR 0 6
17347: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17348: LD_INT 0
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
// result = [ ] ;
17408: LD_ADDR_VAR 0 7
17412: PUSH
17413: EMPTY
17414: ST_TO_ADDR
// temp_list = [ ] ;
17415: LD_ADDR_VAR 0 9
17419: PUSH
17420: EMPTY
17421: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17422: LD_VAR 0 4
17426: PUSH
17427: LD_INT 0
17429: PUSH
17430: LD_INT 1
17432: PUSH
17433: LD_INT 2
17435: PUSH
17436: LD_INT 3
17438: PUSH
17439: LD_INT 4
17441: PUSH
17442: LD_INT 5
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: IN
17453: NOT
17454: IFTRUE 17497
17456: PUSH
17457: LD_VAR 0 1
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: IN
17472: IFFALSE 17496
17474: PUSH
17475: LD_VAR 0 5
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: LD_INT 2
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: IN
17494: NOT
17495: AND
17496: OR
17497: IFFALSE 17501
// exit ;
17499: GO 35900
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17501: LD_VAR 0 1
17505: PUSH
17506: LD_INT 6
17508: PUSH
17509: LD_INT 7
17511: PUSH
17512: LD_INT 8
17514: PUSH
17515: LD_INT 13
17517: PUSH
17518: LD_INT 12
17520: PUSH
17521: LD_INT 15
17523: PUSH
17524: LD_INT 11
17526: PUSH
17527: LD_INT 14
17529: PUSH
17530: LD_INT 10
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: IN
17544: IFFALSE 17554
// btype = b_lab ;
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_INT 6
17553: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17554: LD_VAR 0 6
17558: PUSH
17559: LD_INT 0
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: IN
17573: NOT
17574: IFTRUE 17642
17576: PUSH
17577: LD_VAR 0 1
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 3
17593: PUSH
17594: LD_INT 6
17596: PUSH
17597: LD_INT 36
17599: PUSH
17600: LD_INT 4
17602: PUSH
17603: LD_INT 5
17605: PUSH
17606: LD_INT 31
17608: PUSH
17609: LD_INT 32
17611: PUSH
17612: LD_INT 33
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: IN
17628: NOT
17629: IFFALSE 17641
17631: PUSH
17632: LD_VAR 0 6
17636: PUSH
17637: LD_INT 1
17639: EQUAL
17640: AND
17641: OR
17642: IFTRUE 17674
17644: PUSH
17645: LD_VAR 0 1
17649: PUSH
17650: LD_INT 2
17652: PUSH
17653: LD_INT 3
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: IN
17660: NOT
17661: IFFALSE 17673
17663: PUSH
17664: LD_VAR 0 6
17668: PUSH
17669: LD_INT 2
17671: EQUAL
17672: AND
17673: OR
17674: IFFALSE 17684
// mode = 0 ;
17676: LD_ADDR_VAR 0 6
17680: PUSH
17681: LD_INT 0
17683: ST_TO_ADDR
// case mode of 0 :
17684: LD_VAR 0 6
17688: PUSH
17689: LD_INT 0
17691: DOUBLE
17692: EQUAL
17693: IFTRUE 17697
17695: GO 29150
17697: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17698: LD_ADDR_VAR 0 11
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 1
17718: NEG
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 0
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 1
17767: NEG
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: LD_INT 2
17783: NEG
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: LD_INT 2
17794: NEG
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: LD_INT 3
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: LD_INT 3
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: LD_INT 2
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17891: LD_ADDR_VAR 0 12
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 1
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: NEG
17950: PUSH
17951: LD_INT 0
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: LD_INT 1
17964: NEG
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 1
18003: NEG
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 2
18014: NEG
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 2
18025: NEG
18026: PUSH
18027: LD_INT 1
18029: NEG
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 2
18037: NEG
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 3
18048: NEG
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 3
18059: NEG
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18087: LD_ADDR_VAR 0 13
18091: PUSH
18092: LD_INT 0
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: NEG
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 1
18156: NEG
18157: PUSH
18158: LD_INT 1
18160: NEG
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 1
18168: NEG
18169: PUSH
18170: LD_INT 2
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: LD_INT 1
18214: NEG
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: LD_INT 2
18226: NEG
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: LD_INT 3
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 3
18246: NEG
18247: PUSH
18248: LD_INT 2
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 3
18258: NEG
18259: PUSH
18260: LD_INT 3
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18286: LD_ADDR_VAR 0 14
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 1
18344: NEG
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 1
18355: NEG
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 1
18367: NEG
18368: PUSH
18369: LD_INT 2
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 2
18382: NEG
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: LD_INT 1
18393: NEG
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: NEG
18433: PUSH
18434: LD_INT 3
18436: NEG
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: LD_INT 3
18447: NEG
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: LD_INT 2
18458: NEG
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18482: LD_ADDR_VAR 0 15
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: LD_INT 0
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: LD_INT 1
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 0
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 1
18551: NEG
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 2
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 2
18605: NEG
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: NEG
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 2
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 3
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 3
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18675: LD_ADDR_VAR 0 16
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: LD_INT 1
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: LD_INT 0
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 1
18733: NEG
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 2
18798: NEG
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 2
18810: NEG
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 3
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 3
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18868: LD_ADDR_VAR 0 17
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 1
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 1
18926: NEG
18927: PUSH
18928: LD_INT 0
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 1
18937: NEG
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: LD_INT 2
18953: NEG
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 2
18964: NEG
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 0
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: NEG
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 2
19044: NEG
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 2
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19098: LD_ADDR_VAR 0 18
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 1
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: LD_INT 2
19194: NEG
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: NEG
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19328: LD_ADDR_VAR 0 19
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: LD_INT 1
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: LD_INT 2
19413: NEG
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 2
19424: NEG
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 2
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 2
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: NEG
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19558: LD_ADDR_VAR 0 20
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 2
19643: NEG
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: LD_INT 2
19654: NEG
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: NEG
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19788: LD_ADDR_VAR 0 21
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 0
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 1
19857: NEG
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 2
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 0
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: LD_INT 1
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 0
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: NEG
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20018: LD_ADDR_VAR 0 22
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: LD_INT 0
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: LD_INT 2
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 1
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: NEG
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: NEG
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20248: LD_ADDR_VAR 0 23
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: NEG
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: LD_INT 2
20344: NEG
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 2
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 2
20424: NEG
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: NEG
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: LD_INT 2
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 2
20459: NEG
20460: PUSH
20461: LD_INT 3
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: LD_INT 3
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: LD_INT 2
20486: NEG
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 2
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20528: LD_ADDR_VAR 0 24
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 1
20548: NEG
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: LD_INT 2
20613: NEG
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: LD_INT 2
20624: NEG
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: LD_INT 1
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 2
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: NEG
20728: PUSH
20729: LD_INT 2
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 3
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 3
20771: PUSH
20772: LD_INT 2
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20804: LD_ADDR_VAR 0 25
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: LD_INT 1
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: NEG
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 2
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: LD_INT 2
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: NEG
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: NEG
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 2
21003: NEG
21004: PUSH
21005: LD_INT 2
21007: NEG
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 3
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 3
21025: PUSH
21026: LD_INT 2
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 2
21035: PUSH
21036: LD_INT 3
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: LD_INT 3
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21078: LD_ADDR_VAR 0 26
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: LD_INT 2
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 2
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: LD_INT 1
21185: NEG
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 2
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: LD_INT 2
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: LD_INT 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: NEG
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: NEG
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 2
21277: NEG
21278: PUSH
21279: LD_INT 2
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: LD_INT 3
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: LD_INT 2
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: NEG
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21354: LD_ADDR_VAR 0 27
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: LD_INT 1
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 1
21412: NEG
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 3
21587: NEG
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 3
21599: NEG
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21634: LD_ADDR_VAR 0 28
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: NEG
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: NEG
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 2
21845: NEG
21846: PUSH
21847: LD_INT 3
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: LD_INT 3
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 3
21869: NEG
21870: PUSH
21871: LD_INT 1
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 3
21881: NEG
21882: PUSH
21883: LD_INT 2
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21916: LD_ADDR_VAR 0 29
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: LD_INT 1
21936: NEG
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 1
21997: NEG
21998: PUSH
21999: LD_INT 2
22001: NEG
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: LD_INT 2
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 0
22061: PUSH
22062: LD_INT 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 2
22082: NEG
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 2
22094: NEG
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 2
22106: NEG
22107: PUSH
22108: LD_INT 3
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 3
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 3
22160: NEG
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22195: LD_ADDR_VAR 0 30
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: LD_INT 2
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 2
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 2
22361: NEG
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 3
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 3
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: LD_INT 3
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: NEG
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 3
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22473: LD_ADDR_VAR 0 31
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: LD_INT 2
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: LD_INT 0
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: NEG
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 2
22650: NEG
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 2
22662: NEG
22663: PUSH
22664: LD_INT 3
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 3
22685: PUSH
22686: LD_INT 1
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 3
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 3
22716: NEG
22717: PUSH
22718: LD_INT 2
22720: NEG
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22751: LD_ADDR_VAR 0 32
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: NEG
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: LD_INT 2
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 2
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 2
22917: NEG
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: NEG
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 3
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 3
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 3
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: NEG
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 3
22994: NEG
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23029: LD_ADDR_VAR 0 33
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: LD_INT 0
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: LD_INT 0
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 2
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 2
23195: NEG
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: NEG
23220: PUSH
23221: LD_INT 3
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 3
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: LD_INT 3
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: NEG
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 3
23273: NEG
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23308: LD_ADDR_VAR 0 34
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 2
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: LD_INT 2
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: NEG
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: NEG
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: LD_INT 2
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: LD_INT 3
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 3
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 3
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 2
23542: NEG
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 3
23553: NEG
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23588: LD_ADDR_VAR 0 35
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: PUSH
23617: LD_INT 0
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 2
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23700: LD_ADDR_VAR 0 36
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23812: LD_ADDR_VAR 0 37
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23924: LD_ADDR_VAR 0 38
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 1
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24036: LD_ADDR_VAR 0 39
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 2
24121: NEG
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24148: LD_ADDR_VAR 0 40
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: LD_INT 1
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 1
24206: NEG
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24260: LD_ADDR_VAR 0 41
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: NEG
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: NEG
24451: PUSH
24452: LD_INT 3
24454: NEG
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 3
24493: PUSH
24494: LD_INT 2
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: LD_INT 3
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: LD_INT 3
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 2
24523: NEG
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 3
24534: NEG
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 3
24545: NEG
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 3
24557: NEG
24558: PUSH
24559: LD_INT 2
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 3
24569: NEG
24570: PUSH
24571: LD_INT 3
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24610: LD_ADDR_VAR 0 42
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 1
24691: NEG
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: LD_INT 2
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 2
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 2
24776: NEG
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 2
24788: NEG
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: LD_INT 3
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: NEG
24813: PUSH
24814: LD_INT 3
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 3
24827: NEG
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: LD_INT 2
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 3
24846: PUSH
24847: LD_INT 2
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 3
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 3
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 3
24907: NEG
24908: PUSH
24909: LD_INT 2
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 3
24919: NEG
24920: PUSH
24921: LD_INT 3
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24960: LD_ADDR_VAR 0 43
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: LD_INT 2
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 2
25126: NEG
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: LD_INT 3
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 3
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: LD_INT 2
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 3
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 3
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 3
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: LD_INT 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 2
25245: NEG
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 3
25256: NEG
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 3
25267: NEG
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25308: LD_ADDR_VAR 0 44
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 2
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: LD_INT 3
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 2
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 3
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 3
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 3
25551: PUSH
25552: LD_INT 3
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: LD_INT 3
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 3
25582: NEG
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 3
25593: NEG
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 3
25605: NEG
25606: PUSH
25607: LD_INT 2
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 3
25617: NEG
25618: PUSH
25619: LD_INT 3
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25658: LD_ADDR_VAR 0 45
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: NEG
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 2
25848: NEG
25849: PUSH
25850: LD_INT 3
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: LD_INT 3
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 3
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 2
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 3
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 3
25955: NEG
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 3
25967: NEG
25968: PUSH
25969: LD_INT 3
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26008: LD_ADDR_VAR 0 46
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 2
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: NEG
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: NEG
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 3
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: LD_INT 3
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: LD_INT 2
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 3
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 3
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: PUSH
26263: LD_INT 3
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 3
26304: NEG
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 3
26315: NEG
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26356: LD_ADDR_VAR 0 47
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: NEG
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: LD_INT 2
26452: NEG
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 2
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26507: LD_ADDR_VAR 0 48
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 2
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26654: LD_ADDR_VAR 0 49
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26798: LD_ADDR_VAR 0 50
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 2
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26942: LD_ADDR_VAR 0 51
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27089: LD_ADDR_VAR 0 52
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: LD_INT 0
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: NEG
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: NEG
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27240: LD_ADDR_VAR 0 53
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 2
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: LD_INT 2
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 0
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: LD_INT 2
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27470: LD_ADDR_VAR 0 54
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 2
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 2
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 2
27646: NEG
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27700: LD_ADDR_VAR 0 55
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 2
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: LD_INT 2
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 2
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 2
27876: NEG
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27930: LD_ADDR_VAR 0 56
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 2
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 2
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28160: LD_ADDR_VAR 0 57
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 2
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 2
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 2
28336: NEG
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 2
28347: NEG
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28390: LD_ADDR_VAR 0 58
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 1
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: LD_INT 2
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28620: LD_ADDR_VAR 0 59
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28708: LD_ADDR_VAR 0 60
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28796: LD_ADDR_VAR 0 61
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28884: LD_ADDR_VAR 0 62
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28972: LD_ADDR_VAR 0 63
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29060: LD_ADDR_VAR 0 64
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: ST_TO_ADDR
// end ; 1 :
29148: GO 35045
29150: LD_INT 1
29152: DOUBLE
29153: EQUAL
29154: IFTRUE 29158
29156: GO 31781
29158: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29159: LD_ADDR_VAR 0 11
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: LD_INT 3
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: LD_INT 3
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: LD_INT 2
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29203: LD_ADDR_VAR 0 12
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 3
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 3
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29244: LD_ADDR_VAR 0 13
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 3
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 3
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29284: LD_ADDR_VAR 0 14
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: LD_INT 3
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29325: LD_ADDR_VAR 0 15
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 3
29343: NEG
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29369: LD_ADDR_VAR 0 16
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: LD_INT 3
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 3
29388: NEG
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: LD_INT 3
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29415: LD_ADDR_VAR 0 17
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: LD_INT 3
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: LD_INT 3
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: LD_INT 2
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29459: LD_ADDR_VAR 0 18
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 3
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 3
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29500: LD_ADDR_VAR 0 19
29504: PUSH
29505: LD_INT 3
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29540: LD_ADDR_VAR 0 20
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 3
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29581: LD_ADDR_VAR 0 21
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 3
29599: NEG
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29625: LD_ADDR_VAR 0 22
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 3
29644: NEG
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 3
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29671: LD_ADDR_VAR 0 23
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: LD_INT 3
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: LD_INT 4
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 3
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29715: LD_ADDR_VAR 0 24
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 3
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 4
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29756: LD_ADDR_VAR 0 25
29760: PUSH
29761: LD_INT 3
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 4
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: LD_INT 4
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29796: LD_ADDR_VAR 0 26
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 4
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 3
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29837: LD_ADDR_VAR 0 27
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 3
29855: NEG
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 4
29866: NEG
29867: PUSH
29868: LD_INT 1
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29881: LD_ADDR_VAR 0 28
29885: PUSH
29886: LD_INT 3
29888: NEG
29889: PUSH
29890: LD_INT 3
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: NEG
29901: PUSH
29902: LD_INT 4
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 4
29912: NEG
29913: PUSH
29914: LD_INT 3
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29927: LD_ADDR_VAR 0 29
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 3
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 3
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 1
29968: NEG
29969: PUSH
29970: LD_INT 4
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 4
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 3
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: LD_INT 5
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 5
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 4
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: LD_INT 6
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 6
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: LD_INT 5
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30082: LD_ADDR_VAR 0 30
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 3
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 4
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 4
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 4
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 5
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 6
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 6
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30225: LD_ADDR_VAR 0 31
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 3
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 4
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 4
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 3
30282: PUSH
30283: LD_INT 4
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 5
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 5
30302: PUSH
30303: LD_INT 5
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 4
30312: PUSH
30313: LD_INT 5
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 6
30322: PUSH
30323: LD_INT 5
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 6
30332: PUSH
30333: LD_INT 6
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 5
30342: PUSH
30343: LD_INT 6
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30364: LD_ADDR_VAR 0 32
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 4
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: LD_INT 3
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 5
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 5
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: LD_INT 4
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 6
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 6
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: LD_INT 5
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30507: LD_ADDR_VAR 0 33
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: NEG
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 3
30536: NEG
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 4
30559: NEG
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 4
30570: NEG
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: NEG
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 5
30593: NEG
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 5
30604: NEG
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 5
30616: NEG
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 6
30627: NEG
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 6
30638: NEG
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30662: LD_ADDR_VAR 0 34
30666: PUSH
30667: LD_INT 2
30669: NEG
30670: PUSH
30671: LD_INT 3
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 3
30681: NEG
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 3
30693: NEG
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 3
30705: NEG
30706: PUSH
30707: LD_INT 4
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 4
30717: NEG
30718: PUSH
30719: LD_INT 3
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 4
30729: NEG
30730: PUSH
30731: LD_INT 4
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 4
30741: NEG
30742: PUSH
30743: LD_INT 5
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 5
30753: NEG
30754: PUSH
30755: LD_INT 4
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 5
30765: NEG
30766: PUSH
30767: LD_INT 5
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 5
30777: NEG
30778: PUSH
30779: LD_INT 6
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 6
30789: NEG
30790: PUSH
30791: LD_INT 5
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 6
30801: NEG
30802: PUSH
30803: LD_INT 6
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30825: LD_ADDR_VAR 0 41
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: LIST
30868: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30869: LD_ADDR_VAR 0 42
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 3
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30910: LD_ADDR_VAR 0 43
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30950: LD_ADDR_VAR 0 44
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 3
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30991: LD_ADDR_VAR 0 45
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31035: LD_ADDR_VAR 0 46
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: LD_INT 3
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: NEG
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31081: LD_ADDR_VAR 0 47
31085: PUSH
31086: LD_INT 2
31088: NEG
31089: PUSH
31090: LD_INT 3
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 3
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31114: LD_ADDR_VAR 0 48
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31145: LD_ADDR_VAR 0 49
31149: PUSH
31150: LD_INT 3
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31174: LD_ADDR_VAR 0 50
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31203: LD_ADDR_VAR 0 51
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31234: LD_ADDR_VAR 0 52
31238: PUSH
31239: LD_INT 3
31241: NEG
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31267: LD_ADDR_VAR 0 53
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31311: LD_ADDR_VAR 0 54
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 3
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 3
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31352: LD_ADDR_VAR 0 55
31356: PUSH
31357: LD_INT 3
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: PUSH
31370: LD_INT 3
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31392: LD_ADDR_VAR 0 56
31396: PUSH
31397: LD_INT 1
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31433: LD_ADDR_VAR 0 57
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 3
31451: NEG
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 3
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31477: LD_ADDR_VAR 0 58
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 3
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: NEG
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31523: LD_ADDR_VAR 0 59
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31567: LD_ADDR_VAR 0 60
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31608: LD_ADDR_VAR 0 61
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31648: LD_ADDR_VAR 0 62
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31689: LD_ADDR_VAR 0 63
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31733: LD_ADDR_VAR 0 64
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: ST_TO_ADDR
// end ; 2 :
31779: GO 35045
31781: LD_INT 2
31783: DOUBLE
31784: EQUAL
31785: IFTRUE 31789
31787: GO 35044
31789: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31790: LD_ADDR_VAR 0 29
31794: PUSH
31795: LD_INT 4
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 4
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 5
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 5
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 4
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 3
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: PUSH
31870: LD_INT 2
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 5
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: LD_INT 3
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 3
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 4
31910: PUSH
31911: LD_INT 3
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 4
31920: PUSH
31921: LD_INT 4
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 4
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: LD_INT 4
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: LD_INT 4
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 4
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 5
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: LD_INT 4
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 5
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: NEG
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: NEG
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 3
32118: NEG
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 4
32129: NEG
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 4
32140: NEG
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 4
32152: NEG
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 4
32175: NEG
32176: PUSH
32177: LD_INT 4
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 4
32187: NEG
32188: PUSH
32189: LD_INT 5
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 3
32199: NEG
32200: PUSH
32201: LD_INT 4
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: LD_INT 3
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 4
32223: NEG
32224: PUSH
32225: LD_INT 3
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 5
32235: NEG
32236: PUSH
32237: LD_INT 4
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 5
32247: NEG
32248: PUSH
32249: LD_INT 5
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 3
32259: NEG
32260: PUSH
32261: LD_INT 5
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 5
32271: NEG
32272: PUSH
32273: LD_INT 3
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32328: LD_ADDR_VAR 0 30
32332: PUSH
32333: LD_INT 4
32335: PUSH
32336: LD_INT 4
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 4
32345: PUSH
32346: LD_INT 3
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 5
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 5
32365: PUSH
32366: LD_INT 5
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 4
32375: PUSH
32376: LD_INT 5
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: LD_INT 4
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 5
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: LD_INT 4
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 0
32465: PUSH
32466: LD_INT 4
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 1
32475: NEG
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 4
32518: NEG
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 4
32529: NEG
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 3
32541: NEG
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 3
32552: NEG
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 4
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 5
32574: NEG
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 5
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 5
32597: NEG
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 3
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 3
32632: NEG
32633: PUSH
32634: LD_INT 4
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: LD_INT 3
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: NEG
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 4
32680: NEG
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 4
32692: NEG
32693: PUSH
32694: LD_INT 4
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 4
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 4
32716: NEG
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 4
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: LD_INT 5
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: LD_INT 4
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 3
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 3
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 4
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: LD_INT 5
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: NEG
32819: PUSH
32820: LD_INT 5
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32875: LD_ADDR_VAR 0 31
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: LD_INT 4
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 4
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 5
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: LD_INT 4
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 3
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 5
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: LD_INT 3
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: NEG
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 3
32986: NEG
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: NEG
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 3
33020: NEG
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 4
33031: NEG
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 4
33042: NEG
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 4
33054: NEG
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 4
33077: NEG
33078: PUSH
33079: LD_INT 4
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 4
33089: NEG
33090: PUSH
33091: LD_INT 5
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 3
33101: NEG
33102: PUSH
33103: LD_INT 4
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 3
33113: NEG
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 4
33125: NEG
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 5
33137: NEG
33138: PUSH
33139: LD_INT 4
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 5
33149: NEG
33150: PUSH
33151: LD_INT 5
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: NEG
33162: PUSH
33163: LD_INT 5
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 5
33173: NEG
33174: PUSH
33175: LD_INT 3
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: LD_INT 3
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 4
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 3
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 3
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: LD_INT 4
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: LD_INT 4
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 4
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 4
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 5
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 5
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 4
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 3
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 5
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33425: LD_ADDR_VAR 0 32
33429: PUSH
33430: LD_INT 4
33432: NEG
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 4
33443: NEG
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: NEG
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 3
33466: NEG
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 4
33477: NEG
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 5
33488: NEG
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 5
33499: NEG
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 5
33511: NEG
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 3
33523: NEG
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: NEG
33547: PUSH
33548: LD_INT 4
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: NEG
33559: PUSH
33560: LD_INT 3
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: LD_INT 2
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 3
33582: NEG
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: NEG
33595: PUSH
33596: LD_INT 3
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 4
33606: NEG
33607: PUSH
33608: LD_INT 4
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: LD_INT 4
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 4
33630: NEG
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: LD_INT 4
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 5
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 4
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: LD_INT 3
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 3
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 4
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: LD_INT 5
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: LD_INT 3
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: NEG
33733: PUSH
33734: LD_INT 5
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 4
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 4
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 4
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 4
33837: PUSH
33838: LD_INT 4
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 4
33847: PUSH
33848: LD_INT 3
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 5
33857: PUSH
33858: LD_INT 4
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 5
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 4
33877: PUSH
33878: LD_INT 5
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: LD_INT 4
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 3
33917: PUSH
33918: LD_INT 5
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33972: LD_ADDR_VAR 0 33
33976: PUSH
33977: LD_INT 4
33979: NEG
33980: PUSH
33981: LD_INT 4
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 4
33991: NEG
33992: PUSH
33993: LD_INT 5
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: LD_INT 4
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: NEG
34016: PUSH
34017: LD_INT 3
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 4
34027: NEG
34028: PUSH
34029: LD_INT 3
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 5
34039: NEG
34040: PUSH
34041: LD_INT 4
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 5
34051: NEG
34052: PUSH
34053: LD_INT 5
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 3
34063: NEG
34064: PUSH
34065: LD_INT 5
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 5
34075: NEG
34076: PUSH
34077: LD_INT 3
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: LD_INT 3
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 4
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 3
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: LD_INT 3
34146: NEG
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: LD_INT 4
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: LD_INT 4
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 4
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 5
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 5
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 4
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 3
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 3
34261: PUSH
34262: LD_INT 2
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 5
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 3
34282: PUSH
34283: LD_INT 3
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 4
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 4
34312: PUSH
34313: LD_INT 4
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: PUSH
34323: LD_INT 4
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 4
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: LD_INT 4
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 4
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: LD_INT 3
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 4
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 5
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 5
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 4
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: LD_INT 5
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34510: LD_ADDR_VAR 0 34
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 4
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 5
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 4
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 3
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 3
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: LD_INT 4
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: LD_INT 5
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: LD_INT 3
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: LD_INT 5
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 4
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 4
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 3
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 4
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 4
34712: PUSH
34713: LD_INT 4
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 4
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 5
34732: PUSH
34733: LD_INT 4
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 5
34742: PUSH
34743: LD_INT 5
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 4
34752: PUSH
34753: LD_INT 5
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: LD_INT 4
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 3
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 5
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: LD_INT 5
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 4
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: LD_INT 4
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: LD_INT 3
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 4
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 4
34895: NEG
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 4
34906: NEG
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 3
34929: NEG
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 4
34940: NEG
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 5
34951: NEG
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 5
34962: NEG
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 5
34974: NEG
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 3
34986: NEG
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: ST_TO_ADDR
// end ; end ;
35042: GO 35045
35044: POP
// case btype of b_depot , b_warehouse :
35045: LD_VAR 0 1
35049: PUSH
35050: LD_INT 0
35052: DOUBLE
35053: EQUAL
35054: IFTRUE 35064
35056: LD_INT 1
35058: DOUBLE
35059: EQUAL
35060: IFTRUE 35064
35062: GO 35265
35064: POP
// case nation of nation_american :
35065: LD_VAR 0 5
35069: PUSH
35070: LD_INT 1
35072: DOUBLE
35073: EQUAL
35074: IFTRUE 35078
35076: GO 35134
35078: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35079: LD_ADDR_VAR 0 9
35083: PUSH
35084: LD_VAR 0 11
35088: PUSH
35089: LD_VAR 0 12
35093: PUSH
35094: LD_VAR 0 13
35098: PUSH
35099: LD_VAR 0 14
35103: PUSH
35104: LD_VAR 0 15
35108: PUSH
35109: LD_VAR 0 16
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: PUSH
35122: LD_VAR 0 4
35126: PUSH
35127: LD_INT 1
35129: PLUS
35130: ARRAY
35131: ST_TO_ADDR
35132: GO 35263
35134: LD_INT 2
35136: DOUBLE
35137: EQUAL
35138: IFTRUE 35142
35140: GO 35198
35142: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35143: LD_ADDR_VAR 0 9
35147: PUSH
35148: LD_VAR 0 17
35152: PUSH
35153: LD_VAR 0 18
35157: PUSH
35158: LD_VAR 0 19
35162: PUSH
35163: LD_VAR 0 20
35167: PUSH
35168: LD_VAR 0 21
35172: PUSH
35173: LD_VAR 0 22
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: PUSH
35186: LD_VAR 0 4
35190: PUSH
35191: LD_INT 1
35193: PLUS
35194: ARRAY
35195: ST_TO_ADDR
35196: GO 35263
35198: LD_INT 3
35200: DOUBLE
35201: EQUAL
35202: IFTRUE 35206
35204: GO 35262
35206: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35207: LD_ADDR_VAR 0 9
35211: PUSH
35212: LD_VAR 0 23
35216: PUSH
35217: LD_VAR 0 24
35221: PUSH
35222: LD_VAR 0 25
35226: PUSH
35227: LD_VAR 0 26
35231: PUSH
35232: LD_VAR 0 27
35236: PUSH
35237: LD_VAR 0 28
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: PUSH
35250: LD_VAR 0 4
35254: PUSH
35255: LD_INT 1
35257: PLUS
35258: ARRAY
35259: ST_TO_ADDR
35260: GO 35263
35262: POP
35263: GO 35818
35265: LD_INT 2
35267: DOUBLE
35268: EQUAL
35269: IFTRUE 35279
35271: LD_INT 3
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35335
35279: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35280: LD_ADDR_VAR 0 9
35284: PUSH
35285: LD_VAR 0 29
35289: PUSH
35290: LD_VAR 0 30
35294: PUSH
35295: LD_VAR 0 31
35299: PUSH
35300: LD_VAR 0 32
35304: PUSH
35305: LD_VAR 0 33
35309: PUSH
35310: LD_VAR 0 34
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: PUSH
35323: LD_VAR 0 4
35327: PUSH
35328: LD_INT 1
35330: PLUS
35331: ARRAY
35332: ST_TO_ADDR
35333: GO 35818
35335: LD_INT 16
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35397
35341: LD_INT 17
35343: DOUBLE
35344: EQUAL
35345: IFTRUE 35397
35347: LD_INT 18
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35397
35353: LD_INT 19
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35397
35359: LD_INT 22
35361: DOUBLE
35362: EQUAL
35363: IFTRUE 35397
35365: LD_INT 20
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35397
35371: LD_INT 21
35373: DOUBLE
35374: EQUAL
35375: IFTRUE 35397
35377: LD_INT 23
35379: DOUBLE
35380: EQUAL
35381: IFTRUE 35397
35383: LD_INT 24
35385: DOUBLE
35386: EQUAL
35387: IFTRUE 35397
35389: LD_INT 25
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35453
35397: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35398: LD_ADDR_VAR 0 9
35402: PUSH
35403: LD_VAR 0 35
35407: PUSH
35408: LD_VAR 0 36
35412: PUSH
35413: LD_VAR 0 37
35417: PUSH
35418: LD_VAR 0 38
35422: PUSH
35423: LD_VAR 0 39
35427: PUSH
35428: LD_VAR 0 40
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: PUSH
35441: LD_VAR 0 4
35445: PUSH
35446: LD_INT 1
35448: PLUS
35449: ARRAY
35450: ST_TO_ADDR
35451: GO 35818
35453: LD_INT 6
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35509
35459: LD_INT 7
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35509
35465: LD_INT 8
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35509
35471: LD_INT 13
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35509
35477: LD_INT 12
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35509
35483: LD_INT 15
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35509
35489: LD_INT 11
35491: DOUBLE
35492: EQUAL
35493: IFTRUE 35509
35495: LD_INT 14
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35509
35501: LD_INT 10
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35509
35507: GO 35565
35509: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35510: LD_ADDR_VAR 0 9
35514: PUSH
35515: LD_VAR 0 41
35519: PUSH
35520: LD_VAR 0 42
35524: PUSH
35525: LD_VAR 0 43
35529: PUSH
35530: LD_VAR 0 44
35534: PUSH
35535: LD_VAR 0 45
35539: PUSH
35540: LD_VAR 0 46
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: PUSH
35553: LD_VAR 0 4
35557: PUSH
35558: LD_INT 1
35560: PLUS
35561: ARRAY
35562: ST_TO_ADDR
35563: GO 35818
35565: LD_INT 36
35567: DOUBLE
35568: EQUAL
35569: IFTRUE 35573
35571: GO 35629
35573: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35574: LD_ADDR_VAR 0 9
35578: PUSH
35579: LD_VAR 0 47
35583: PUSH
35584: LD_VAR 0 48
35588: PUSH
35589: LD_VAR 0 49
35593: PUSH
35594: LD_VAR 0 50
35598: PUSH
35599: LD_VAR 0 51
35603: PUSH
35604: LD_VAR 0 52
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: PUSH
35617: LD_VAR 0 4
35621: PUSH
35622: LD_INT 1
35624: PLUS
35625: ARRAY
35626: ST_TO_ADDR
35627: GO 35818
35629: LD_INT 4
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35655
35635: LD_INT 5
35637: DOUBLE
35638: EQUAL
35639: IFTRUE 35655
35641: LD_INT 34
35643: DOUBLE
35644: EQUAL
35645: IFTRUE 35655
35647: LD_INT 37
35649: DOUBLE
35650: EQUAL
35651: IFTRUE 35655
35653: GO 35711
35655: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35656: LD_ADDR_VAR 0 9
35660: PUSH
35661: LD_VAR 0 53
35665: PUSH
35666: LD_VAR 0 54
35670: PUSH
35671: LD_VAR 0 55
35675: PUSH
35676: LD_VAR 0 56
35680: PUSH
35681: LD_VAR 0 57
35685: PUSH
35686: LD_VAR 0 58
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: PUSH
35699: LD_VAR 0 4
35703: PUSH
35704: LD_INT 1
35706: PLUS
35707: ARRAY
35708: ST_TO_ADDR
35709: GO 35818
35711: LD_INT 31
35713: DOUBLE
35714: EQUAL
35715: IFTRUE 35761
35717: LD_INT 32
35719: DOUBLE
35720: EQUAL
35721: IFTRUE 35761
35723: LD_INT 33
35725: DOUBLE
35726: EQUAL
35727: IFTRUE 35761
35729: LD_INT 27
35731: DOUBLE
35732: EQUAL
35733: IFTRUE 35761
35735: LD_INT 26
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35761
35741: LD_INT 28
35743: DOUBLE
35744: EQUAL
35745: IFTRUE 35761
35747: LD_INT 29
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35761
35753: LD_INT 30
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35761
35759: GO 35817
35761: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35762: LD_ADDR_VAR 0 9
35766: PUSH
35767: LD_VAR 0 59
35771: PUSH
35772: LD_VAR 0 60
35776: PUSH
35777: LD_VAR 0 61
35781: PUSH
35782: LD_VAR 0 62
35786: PUSH
35787: LD_VAR 0 63
35791: PUSH
35792: LD_VAR 0 64
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: PUSH
35805: LD_VAR 0 4
35809: PUSH
35810: LD_INT 1
35812: PLUS
35813: ARRAY
35814: ST_TO_ADDR
35815: GO 35818
35817: POP
// temp_list2 = [ ] ;
35818: LD_ADDR_VAR 0 10
35822: PUSH
35823: EMPTY
35824: ST_TO_ADDR
// for i in temp_list do
35825: LD_ADDR_VAR 0 8
35829: PUSH
35830: LD_VAR 0 9
35834: PUSH
35835: FOR_IN
35836: IFFALSE 35888
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35838: LD_ADDR_VAR 0 10
35842: PUSH
35843: LD_VAR 0 10
35847: PUSH
35848: LD_VAR 0 8
35852: PUSH
35853: LD_INT 1
35855: ARRAY
35856: PUSH
35857: LD_VAR 0 2
35861: PLUS
35862: PUSH
35863: LD_VAR 0 8
35867: PUSH
35868: LD_INT 2
35870: ARRAY
35871: PUSH
35872: LD_VAR 0 3
35876: PLUS
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: ADD
35885: ST_TO_ADDR
35886: GO 35835
35888: POP
35889: POP
// result = temp_list2 ;
35890: LD_ADDR_VAR 0 7
35894: PUSH
35895: LD_VAR 0 10
35899: ST_TO_ADDR
// end ;
35900: LD_VAR 0 7
35904: RET
// export function EnemyInRange ( unit , dist ) ; begin
35905: LD_INT 0
35907: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35908: LD_ADDR_VAR 0 3
35912: PUSH
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 255
35922: PPUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 250
35932: PPUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 251
35942: PPUSH
35943: LD_VAR 0 2
35947: PPUSH
35948: CALL 9162 0 4
35952: PUSH
35953: LD_INT 4
35955: ARRAY
35956: ST_TO_ADDR
// end ;
35957: LD_VAR 0 3
35961: RET
// export function PlayerSeeMe ( unit ) ; begin
35962: LD_INT 0
35964: PPUSH
// result := See ( your_side , unit ) ;
35965: LD_ADDR_VAR 0 2
35969: PUSH
35970: LD_OWVAR 2
35974: PPUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 292
35984: ST_TO_ADDR
// end ;
35985: LD_VAR 0 2
35989: RET
// export function ReverseDir ( unit ) ; begin
35990: LD_INT 0
35992: PPUSH
// if not unit then
35993: LD_VAR 0 1
35997: NOT
35998: IFFALSE 36002
// exit ;
36000: GO 36025
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36002: LD_ADDR_VAR 0 2
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 254
36016: PUSH
36017: LD_INT 3
36019: PLUS
36020: PUSH
36021: LD_INT 6
36023: MOD
36024: ST_TO_ADDR
// end ;
36025: LD_VAR 0 2
36029: RET
// export function ReverseArray ( array ) ; var i ; begin
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
// if not array then
36034: LD_VAR 0 1
36038: NOT
36039: IFFALSE 36043
// exit ;
36041: GO 36098
// result := [ ] ;
36043: LD_ADDR_VAR 0 2
36047: PUSH
36048: EMPTY
36049: ST_TO_ADDR
// for i := array downto 1 do
36050: LD_ADDR_VAR 0 3
36054: PUSH
36055: DOUBLE
36056: LD_VAR 0 1
36060: INC
36061: ST_TO_ADDR
36062: LD_INT 1
36064: PUSH
36065: FOR_DOWNTO
36066: IFFALSE 36096
// result := Join ( result , array [ i ] ) ;
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: LD_VAR 0 1
36082: PUSH
36083: LD_VAR 0 3
36087: ARRAY
36088: PPUSH
36089: CALL 40940 0 2
36093: ST_TO_ADDR
36094: GO 36065
36096: POP
36097: POP
// end ;
36098: LD_VAR 0 2
36102: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36103: LD_INT 0
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
36109: PPUSH
36110: PPUSH
// if not unit or not hexes then
36111: LD_VAR 0 1
36115: NOT
36116: IFTRUE 36125
36118: PUSH
36119: LD_VAR 0 2
36123: NOT
36124: OR
36125: IFFALSE 36129
// exit ;
36127: GO 36252
// dist := 9999 ;
36129: LD_ADDR_VAR 0 5
36133: PUSH
36134: LD_INT 9999
36136: ST_TO_ADDR
// for i = 1 to hexes do
36137: LD_ADDR_VAR 0 4
36141: PUSH
36142: DOUBLE
36143: LD_INT 1
36145: DEC
36146: ST_TO_ADDR
36147: LD_VAR 0 2
36151: PUSH
36152: FOR_TO
36153: IFFALSE 36240
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36155: LD_ADDR_VAR 0 6
36159: PUSH
36160: LD_VAR 0 1
36164: PPUSH
36165: LD_VAR 0 2
36169: PUSH
36170: LD_VAR 0 4
36174: ARRAY
36175: PUSH
36176: LD_INT 1
36178: ARRAY
36179: PPUSH
36180: LD_VAR 0 2
36184: PUSH
36185: LD_VAR 0 4
36189: ARRAY
36190: PUSH
36191: LD_INT 2
36193: ARRAY
36194: PPUSH
36195: CALL_OW 297
36199: ST_TO_ADDR
// if tdist < dist then
36200: LD_VAR 0 6
36204: PUSH
36205: LD_VAR 0 5
36209: LESS
36210: IFFALSE 36238
// begin hex := hexes [ i ] ;
36212: LD_ADDR_VAR 0 8
36216: PUSH
36217: LD_VAR 0 2
36221: PUSH
36222: LD_VAR 0 4
36226: ARRAY
36227: ST_TO_ADDR
// dist := tdist ;
36228: LD_ADDR_VAR 0 5
36232: PUSH
36233: LD_VAR 0 6
36237: ST_TO_ADDR
// end ; end ;
36238: GO 36152
36240: POP
36241: POP
// result := hex ;
36242: LD_ADDR_VAR 0 3
36246: PUSH
36247: LD_VAR 0 8
36251: ST_TO_ADDR
// end ;
36252: LD_VAR 0 3
36256: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36257: LD_INT 0
36259: PPUSH
36260: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36261: LD_VAR 0 1
36265: NOT
36266: IFTRUE 36305
36268: PUSH
36269: LD_VAR 0 1
36273: PUSH
36274: LD_INT 21
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 23
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PPUSH
36298: CALL_OW 69
36302: IN
36303: NOT
36304: OR
36305: IFFALSE 36309
// exit ;
36307: GO 36356
// for i = 1 to 3 do
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: DOUBLE
36315: LD_INT 1
36317: DEC
36318: ST_TO_ADDR
36319: LD_INT 3
36321: PUSH
36322: FOR_TO
36323: IFFALSE 36354
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 250
36334: PPUSH
36335: LD_VAR 0 1
36339: PPUSH
36340: CALL_OW 251
36344: PPUSH
36345: LD_INT 1
36347: PPUSH
36348: CALL_OW 453
36352: GO 36322
36354: POP
36355: POP
// end ;
36356: LD_VAR 0 2
36360: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36361: LD_INT 0
36363: PPUSH
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
// if not unit or not enemy_unit then
36369: LD_VAR 0 1
36373: NOT
36374: IFTRUE 36383
36376: PUSH
36377: LD_VAR 0 2
36381: NOT
36382: OR
36383: IFFALSE 36387
// exit ;
36385: GO 36858
// if GetLives ( i ) < 250 then
36387: LD_VAR 0 4
36391: PPUSH
36392: CALL_OW 256
36396: PUSH
36397: LD_INT 250
36399: LESS
36400: IFFALSE 36413
// begin ComAutodestruct ( i ) ;
36402: LD_VAR 0 4
36406: PPUSH
36407: CALL 36257 0 1
// exit ;
36411: GO 36858
// end ; x := GetX ( enemy_unit ) ;
36413: LD_ADDR_VAR 0 7
36417: PUSH
36418: LD_VAR 0 2
36422: PPUSH
36423: CALL_OW 250
36427: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36428: LD_ADDR_VAR 0 8
36432: PUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: CALL_OW 251
36442: ST_TO_ADDR
// if not x or not y then
36443: LD_VAR 0 7
36447: NOT
36448: IFTRUE 36457
36450: PUSH
36451: LD_VAR 0 8
36455: NOT
36456: OR
36457: IFFALSE 36461
// exit ;
36459: GO 36858
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36461: LD_ADDR_VAR 0 6
36465: PUSH
36466: LD_VAR 0 7
36470: PPUSH
36471: LD_INT 0
36473: PPUSH
36474: LD_INT 4
36476: PPUSH
36477: CALL_OW 272
36481: PUSH
36482: LD_VAR 0 8
36486: PPUSH
36487: LD_INT 0
36489: PPUSH
36490: LD_INT 4
36492: PPUSH
36493: CALL_OW 273
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_VAR 0 7
36506: PPUSH
36507: LD_INT 1
36509: PPUSH
36510: LD_INT 4
36512: PPUSH
36513: CALL_OW 272
36517: PUSH
36518: LD_VAR 0 8
36522: PPUSH
36523: LD_INT 1
36525: PPUSH
36526: LD_INT 4
36528: PPUSH
36529: CALL_OW 273
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_VAR 0 7
36542: PPUSH
36543: LD_INT 2
36545: PPUSH
36546: LD_INT 4
36548: PPUSH
36549: CALL_OW 272
36553: PUSH
36554: LD_VAR 0 8
36558: PPUSH
36559: LD_INT 2
36561: PPUSH
36562: LD_INT 4
36564: PPUSH
36565: CALL_OW 273
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_VAR 0 7
36578: PPUSH
36579: LD_INT 3
36581: PPUSH
36582: LD_INT 4
36584: PPUSH
36585: CALL_OW 272
36589: PUSH
36590: LD_VAR 0 8
36594: PPUSH
36595: LD_INT 3
36597: PPUSH
36598: LD_INT 4
36600: PPUSH
36601: CALL_OW 273
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_VAR 0 7
36614: PPUSH
36615: LD_INT 4
36617: PPUSH
36618: LD_INT 4
36620: PPUSH
36621: CALL_OW 272
36625: PUSH
36626: LD_VAR 0 8
36630: PPUSH
36631: LD_INT 4
36633: PPUSH
36634: LD_INT 4
36636: PPUSH
36637: CALL_OW 273
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_VAR 0 7
36650: PPUSH
36651: LD_INT 5
36653: PPUSH
36654: LD_INT 4
36656: PPUSH
36657: CALL_OW 272
36661: PUSH
36662: LD_VAR 0 8
36666: PPUSH
36667: LD_INT 5
36669: PPUSH
36670: LD_INT 4
36672: PPUSH
36673: CALL_OW 273
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// for i = tmp downto 1 do
36690: LD_ADDR_VAR 0 4
36694: PUSH
36695: DOUBLE
36696: LD_VAR 0 6
36700: INC
36701: ST_TO_ADDR
36702: LD_INT 1
36704: PUSH
36705: FOR_DOWNTO
36706: IFFALSE 36809
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36708: LD_VAR 0 6
36712: PUSH
36713: LD_VAR 0 4
36717: ARRAY
36718: PUSH
36719: LD_INT 1
36721: ARRAY
36722: PPUSH
36723: LD_VAR 0 6
36727: PUSH
36728: LD_VAR 0 4
36732: ARRAY
36733: PUSH
36734: LD_INT 2
36736: ARRAY
36737: PPUSH
36738: CALL_OW 488
36742: NOT
36743: IFTRUE 36785
36745: PUSH
36746: LD_VAR 0 6
36750: PUSH
36751: LD_VAR 0 4
36755: ARRAY
36756: PUSH
36757: LD_INT 1
36759: ARRAY
36760: PPUSH
36761: LD_VAR 0 6
36765: PUSH
36766: LD_VAR 0 4
36770: ARRAY
36771: PUSH
36772: LD_INT 2
36774: ARRAY
36775: PPUSH
36776: CALL_OW 428
36780: PUSH
36781: LD_INT 0
36783: NONEQUAL
36784: OR
36785: IFFALSE 36807
// tmp := Delete ( tmp , i ) ;
36787: LD_ADDR_VAR 0 6
36791: PUSH
36792: LD_VAR 0 6
36796: PPUSH
36797: LD_VAR 0 4
36801: PPUSH
36802: CALL_OW 3
36806: ST_TO_ADDR
36807: GO 36705
36809: POP
36810: POP
// j := GetClosestHex ( unit , tmp ) ;
36811: LD_ADDR_VAR 0 5
36815: PUSH
36816: LD_VAR 0 1
36820: PPUSH
36821: LD_VAR 0 6
36825: PPUSH
36826: CALL 36103 0 2
36830: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36831: LD_VAR 0 1
36835: PPUSH
36836: LD_VAR 0 5
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: PPUSH
36845: LD_VAR 0 5
36849: PUSH
36850: LD_INT 2
36852: ARRAY
36853: PPUSH
36854: CALL_OW 111
// end ;
36858: LD_VAR 0 3
36862: RET
// export function PrepareApemanSoldier ( ) ; begin
36863: LD_INT 0
36865: PPUSH
// uc_nation := 0 ;
36866: LD_ADDR_OWVAR 21
36870: PUSH
36871: LD_INT 0
36873: ST_TO_ADDR
// hc_sex := sex_male ;
36874: LD_ADDR_OWVAR 27
36878: PUSH
36879: LD_INT 1
36881: ST_TO_ADDR
// hc_name :=  ;
36882: LD_ADDR_OWVAR 26
36886: PUSH
36887: LD_STRING 
36889: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36890: LD_ADDR_OWVAR 28
36894: PUSH
36895: LD_INT 15
36897: ST_TO_ADDR
// hc_gallery :=  ;
36898: LD_ADDR_OWVAR 33
36902: PUSH
36903: LD_STRING 
36905: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36906: LD_ADDR_OWVAR 31
36910: PUSH
36911: LD_INT 0
36913: PPUSH
36914: LD_INT 3
36916: PPUSH
36917: CALL_OW 12
36921: PUSH
36922: LD_INT 0
36924: PPUSH
36925: LD_INT 3
36927: PPUSH
36928: CALL_OW 12
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36945: LD_ADDR_OWVAR 29
36949: PUSH
36950: LD_INT 12
36952: PUSH
36953: LD_INT 12
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// end ;
36960: LD_VAR 0 1
36964: RET
// export function PrepareApemanEngineer ( ) ; begin
36965: LD_INT 0
36967: PPUSH
// uc_nation := 0 ;
36968: LD_ADDR_OWVAR 21
36972: PUSH
36973: LD_INT 0
36975: ST_TO_ADDR
// hc_sex := sex_male ;
36976: LD_ADDR_OWVAR 27
36980: PUSH
36981: LD_INT 1
36983: ST_TO_ADDR
// hc_name :=  ;
36984: LD_ADDR_OWVAR 26
36988: PUSH
36989: LD_STRING 
36991: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36992: LD_ADDR_OWVAR 28
36996: PUSH
36997: LD_INT 16
36999: ST_TO_ADDR
// hc_gallery :=  ;
37000: LD_ADDR_OWVAR 33
37004: PUSH
37005: LD_STRING 
37007: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37008: LD_ADDR_OWVAR 31
37012: PUSH
37013: LD_INT 0
37015: PPUSH
37016: LD_INT 3
37018: PPUSH
37019: CALL_OW 12
37023: PUSH
37024: LD_INT 0
37026: PPUSH
37027: LD_INT 3
37029: PPUSH
37030: CALL_OW 12
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37047: LD_ADDR_OWVAR 29
37051: PUSH
37052: LD_INT 12
37054: PUSH
37055: LD_INT 12
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// end ;
37062: LD_VAR 0 1
37066: RET
// export function PrepareApeman ( agressivity ) ; begin
37067: LD_INT 0
37069: PPUSH
// uc_side := 0 ;
37070: LD_ADDR_OWVAR 20
37074: PUSH
37075: LD_INT 0
37077: ST_TO_ADDR
// uc_nation := 0 ;
37078: LD_ADDR_OWVAR 21
37082: PUSH
37083: LD_INT 0
37085: ST_TO_ADDR
// hc_sex := sex_male ;
37086: LD_ADDR_OWVAR 27
37090: PUSH
37091: LD_INT 1
37093: ST_TO_ADDR
// hc_class := class_apeman ;
37094: LD_ADDR_OWVAR 28
37098: PUSH
37099: LD_INT 12
37101: ST_TO_ADDR
// hc_gallery :=  ;
37102: LD_ADDR_OWVAR 33
37106: PUSH
37107: LD_STRING 
37109: ST_TO_ADDR
// hc_name :=  ;
37110: LD_ADDR_OWVAR 26
37114: PUSH
37115: LD_STRING 
37117: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37118: LD_ADDR_OWVAR 29
37122: PUSH
37123: LD_INT 12
37125: PUSH
37126: LD_INT 12
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// if agressivity = 0 then
37133: LD_VAR 0 1
37137: PUSH
37138: LD_INT 0
37140: EQUAL
37141: IFFALSE 37153
// hc_agressivity := 0 else
37143: LD_ADDR_OWVAR 35
37147: PUSH
37148: LD_INT 0
37150: ST_TO_ADDR
37151: GO 37174
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37153: LD_ADDR_OWVAR 35
37157: PUSH
37158: LD_VAR 0 1
37162: NEG
37163: PPUSH
37164: LD_VAR 0 1
37168: PPUSH
37169: CALL_OW 12
37173: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37174: LD_ADDR_OWVAR 31
37178: PUSH
37179: LD_INT 0
37181: PPUSH
37182: LD_INT 3
37184: PPUSH
37185: CALL_OW 12
37189: PUSH
37190: LD_INT 0
37192: PPUSH
37193: LD_INT 3
37195: PPUSH
37196: CALL_OW 12
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// end ;
37213: LD_VAR 0 2
37217: RET
// export function PrepareTiger ( agressivity ) ; begin
37218: LD_INT 0
37220: PPUSH
// uc_side := 0 ;
37221: LD_ADDR_OWVAR 20
37225: PUSH
37226: LD_INT 0
37228: ST_TO_ADDR
// uc_nation := 0 ;
37229: LD_ADDR_OWVAR 21
37233: PUSH
37234: LD_INT 0
37236: ST_TO_ADDR
// InitHc ;
37237: CALL_OW 19
// hc_class := class_tiger ;
37241: LD_ADDR_OWVAR 28
37245: PUSH
37246: LD_INT 14
37248: ST_TO_ADDR
// hc_gallery :=  ;
37249: LD_ADDR_OWVAR 33
37253: PUSH
37254: LD_STRING 
37256: ST_TO_ADDR
// hc_name :=  ;
37257: LD_ADDR_OWVAR 26
37261: PUSH
37262: LD_STRING 
37264: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37265: LD_ADDR_OWVAR 35
37269: PUSH
37270: LD_VAR 0 1
37274: NEG
37275: PPUSH
37276: LD_VAR 0 1
37280: PPUSH
37281: CALL_OW 12
37285: ST_TO_ADDR
// end ;
37286: LD_VAR 0 2
37290: RET
// export function PrepareEnchidna ( ) ; begin
37291: LD_INT 0
37293: PPUSH
// uc_side := 0 ;
37294: LD_ADDR_OWVAR 20
37298: PUSH
37299: LD_INT 0
37301: ST_TO_ADDR
// uc_nation := 0 ;
37302: LD_ADDR_OWVAR 21
37306: PUSH
37307: LD_INT 0
37309: ST_TO_ADDR
// InitHc ;
37310: CALL_OW 19
// hc_class := class_baggie ;
37314: LD_ADDR_OWVAR 28
37318: PUSH
37319: LD_INT 13
37321: ST_TO_ADDR
// hc_gallery :=  ;
37322: LD_ADDR_OWVAR 33
37326: PUSH
37327: LD_STRING 
37329: ST_TO_ADDR
// hc_name :=  ;
37330: LD_ADDR_OWVAR 26
37334: PUSH
37335: LD_STRING 
37337: ST_TO_ADDR
// end ;
37338: LD_VAR 0 1
37342: RET
// export function PrepareFrog ( ) ; begin
37343: LD_INT 0
37345: PPUSH
// uc_side := 0 ;
37346: LD_ADDR_OWVAR 20
37350: PUSH
37351: LD_INT 0
37353: ST_TO_ADDR
// uc_nation := 0 ;
37354: LD_ADDR_OWVAR 21
37358: PUSH
37359: LD_INT 0
37361: ST_TO_ADDR
// InitHc ;
37362: CALL_OW 19
// hc_class := class_frog ;
37366: LD_ADDR_OWVAR 28
37370: PUSH
37371: LD_INT 19
37373: ST_TO_ADDR
// hc_gallery :=  ;
37374: LD_ADDR_OWVAR 33
37378: PUSH
37379: LD_STRING 
37381: ST_TO_ADDR
// hc_name :=  ;
37382: LD_ADDR_OWVAR 26
37386: PUSH
37387: LD_STRING 
37389: ST_TO_ADDR
// end ;
37390: LD_VAR 0 1
37394: RET
// export function PrepareFish ( ) ; begin
37395: LD_INT 0
37397: PPUSH
// uc_side := 0 ;
37398: LD_ADDR_OWVAR 20
37402: PUSH
37403: LD_INT 0
37405: ST_TO_ADDR
// uc_nation := 0 ;
37406: LD_ADDR_OWVAR 21
37410: PUSH
37411: LD_INT 0
37413: ST_TO_ADDR
// InitHc ;
37414: CALL_OW 19
// hc_class := class_fish ;
37418: LD_ADDR_OWVAR 28
37422: PUSH
37423: LD_INT 20
37425: ST_TO_ADDR
// hc_gallery :=  ;
37426: LD_ADDR_OWVAR 33
37430: PUSH
37431: LD_STRING 
37433: ST_TO_ADDR
// hc_name :=  ;
37434: LD_ADDR_OWVAR 26
37438: PUSH
37439: LD_STRING 
37441: ST_TO_ADDR
// end ;
37442: LD_VAR 0 1
37446: RET
// export function PrepareBird ( ) ; begin
37447: LD_INT 0
37449: PPUSH
// uc_side := 0 ;
37450: LD_ADDR_OWVAR 20
37454: PUSH
37455: LD_INT 0
37457: ST_TO_ADDR
// uc_nation := 0 ;
37458: LD_ADDR_OWVAR 21
37462: PUSH
37463: LD_INT 0
37465: ST_TO_ADDR
// InitHc ;
37466: CALL_OW 19
// hc_class := class_phororhacos ;
37470: LD_ADDR_OWVAR 28
37474: PUSH
37475: LD_INT 18
37477: ST_TO_ADDR
// hc_gallery :=  ;
37478: LD_ADDR_OWVAR 33
37482: PUSH
37483: LD_STRING 
37485: ST_TO_ADDR
// hc_name :=  ;
37486: LD_ADDR_OWVAR 26
37490: PUSH
37491: LD_STRING 
37493: ST_TO_ADDR
// end ;
37494: LD_VAR 0 1
37498: RET
// export function PrepareHorse ( ) ; begin
37499: LD_INT 0
37501: PPUSH
// uc_side := 0 ;
37502: LD_ADDR_OWVAR 20
37506: PUSH
37507: LD_INT 0
37509: ST_TO_ADDR
// uc_nation := 0 ;
37510: LD_ADDR_OWVAR 21
37514: PUSH
37515: LD_INT 0
37517: ST_TO_ADDR
// InitHc ;
37518: CALL_OW 19
// hc_class := class_horse ;
37522: LD_ADDR_OWVAR 28
37526: PUSH
37527: LD_INT 21
37529: ST_TO_ADDR
// hc_gallery :=  ;
37530: LD_ADDR_OWVAR 33
37534: PUSH
37535: LD_STRING 
37537: ST_TO_ADDR
// hc_name :=  ;
37538: LD_ADDR_OWVAR 26
37542: PUSH
37543: LD_STRING 
37545: ST_TO_ADDR
// end ;
37546: LD_VAR 0 1
37550: RET
// export function PrepareMastodont ( ) ; begin
37551: LD_INT 0
37553: PPUSH
// uc_side := 0 ;
37554: LD_ADDR_OWVAR 20
37558: PUSH
37559: LD_INT 0
37561: ST_TO_ADDR
// uc_nation := 0 ;
37562: LD_ADDR_OWVAR 21
37566: PUSH
37567: LD_INT 0
37569: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37570: LD_ADDR_OWVAR 37
37574: PUSH
37575: LD_INT 31
37577: ST_TO_ADDR
// vc_control := control_rider ;
37578: LD_ADDR_OWVAR 38
37582: PUSH
37583: LD_INT 4
37585: ST_TO_ADDR
// end ;
37586: LD_VAR 0 1
37590: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37591: LD_INT 0
37593: PPUSH
37594: PPUSH
37595: PPUSH
// uc_side = 0 ;
37596: LD_ADDR_OWVAR 20
37600: PUSH
37601: LD_INT 0
37603: ST_TO_ADDR
// uc_nation = 0 ;
37604: LD_ADDR_OWVAR 21
37608: PUSH
37609: LD_INT 0
37611: ST_TO_ADDR
// InitHc_All ( ) ;
37612: CALL_OW 584
// InitVc ;
37616: CALL_OW 20
// if mastodonts then
37620: LD_VAR 0 6
37624: IFFALSE 37691
// for i = 1 to mastodonts do
37626: LD_ADDR_VAR 0 11
37630: PUSH
37631: DOUBLE
37632: LD_INT 1
37634: DEC
37635: ST_TO_ADDR
37636: LD_VAR 0 6
37640: PUSH
37641: FOR_TO
37642: IFFALSE 37689
// begin vc_chassis := 31 ;
37644: LD_ADDR_OWVAR 37
37648: PUSH
37649: LD_INT 31
37651: ST_TO_ADDR
// vc_control := control_rider ;
37652: LD_ADDR_OWVAR 38
37656: PUSH
37657: LD_INT 4
37659: ST_TO_ADDR
// animal := CreateVehicle ;
37660: LD_ADDR_VAR 0 12
37664: PUSH
37665: CALL_OW 45
37669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37670: LD_VAR 0 12
37674: PPUSH
37675: LD_VAR 0 8
37679: PPUSH
37680: LD_INT 0
37682: PPUSH
37683: CALL 39833 0 3
// end ;
37687: GO 37641
37689: POP
37690: POP
// if horses then
37691: LD_VAR 0 5
37695: IFFALSE 37762
// for i = 1 to horses do
37697: LD_ADDR_VAR 0 11
37701: PUSH
37702: DOUBLE
37703: LD_INT 1
37705: DEC
37706: ST_TO_ADDR
37707: LD_VAR 0 5
37711: PUSH
37712: FOR_TO
37713: IFFALSE 37760
// begin hc_class := 21 ;
37715: LD_ADDR_OWVAR 28
37719: PUSH
37720: LD_INT 21
37722: ST_TO_ADDR
// hc_gallery :=  ;
37723: LD_ADDR_OWVAR 33
37727: PUSH
37728: LD_STRING 
37730: ST_TO_ADDR
// animal := CreateHuman ;
37731: LD_ADDR_VAR 0 12
37735: PUSH
37736: CALL_OW 44
37740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37741: LD_VAR 0 12
37745: PPUSH
37746: LD_VAR 0 8
37750: PPUSH
37751: LD_INT 0
37753: PPUSH
37754: CALL 39833 0 3
// end ;
37758: GO 37712
37760: POP
37761: POP
// if birds then
37762: LD_VAR 0 1
37766: IFFALSE 37833
// for i = 1 to birds do
37768: LD_ADDR_VAR 0 11
37772: PUSH
37773: DOUBLE
37774: LD_INT 1
37776: DEC
37777: ST_TO_ADDR
37778: LD_VAR 0 1
37782: PUSH
37783: FOR_TO
37784: IFFALSE 37831
// begin hc_class := 18 ;
37786: LD_ADDR_OWVAR 28
37790: PUSH
37791: LD_INT 18
37793: ST_TO_ADDR
// hc_gallery =  ;
37794: LD_ADDR_OWVAR 33
37798: PUSH
37799: LD_STRING 
37801: ST_TO_ADDR
// animal := CreateHuman ;
37802: LD_ADDR_VAR 0 12
37806: PUSH
37807: CALL_OW 44
37811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37812: LD_VAR 0 12
37816: PPUSH
37817: LD_VAR 0 8
37821: PPUSH
37822: LD_INT 0
37824: PPUSH
37825: CALL 39833 0 3
// end ;
37829: GO 37783
37831: POP
37832: POP
// if tigers then
37833: LD_VAR 0 2
37837: IFFALSE 37921
// for i = 1 to tigers do
37839: LD_ADDR_VAR 0 11
37843: PUSH
37844: DOUBLE
37845: LD_INT 1
37847: DEC
37848: ST_TO_ADDR
37849: LD_VAR 0 2
37853: PUSH
37854: FOR_TO
37855: IFFALSE 37919
// begin hc_class = class_tiger ;
37857: LD_ADDR_OWVAR 28
37861: PUSH
37862: LD_INT 14
37864: ST_TO_ADDR
// hc_gallery =  ;
37865: LD_ADDR_OWVAR 33
37869: PUSH
37870: LD_STRING 
37872: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37873: LD_ADDR_OWVAR 35
37877: PUSH
37878: LD_INT 7
37880: NEG
37881: PPUSH
37882: LD_INT 7
37884: PPUSH
37885: CALL_OW 12
37889: ST_TO_ADDR
// animal := CreateHuman ;
37890: LD_ADDR_VAR 0 12
37894: PUSH
37895: CALL_OW 44
37899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37900: LD_VAR 0 12
37904: PPUSH
37905: LD_VAR 0 8
37909: PPUSH
37910: LD_INT 0
37912: PPUSH
37913: CALL 39833 0 3
// end ;
37917: GO 37854
37919: POP
37920: POP
// if apemans then
37921: LD_VAR 0 3
37925: IFFALSE 38048
// for i = 1 to apemans do
37927: LD_ADDR_VAR 0 11
37931: PUSH
37932: DOUBLE
37933: LD_INT 1
37935: DEC
37936: ST_TO_ADDR
37937: LD_VAR 0 3
37941: PUSH
37942: FOR_TO
37943: IFFALSE 38046
// begin hc_class = class_apeman ;
37945: LD_ADDR_OWVAR 28
37949: PUSH
37950: LD_INT 12
37952: ST_TO_ADDR
// hc_gallery =  ;
37953: LD_ADDR_OWVAR 33
37957: PUSH
37958: LD_STRING 
37960: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37961: LD_ADDR_OWVAR 35
37965: PUSH
37966: LD_INT 2
37968: NEG
37969: PPUSH
37970: LD_INT 2
37972: PPUSH
37973: CALL_OW 12
37977: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37978: LD_ADDR_OWVAR 31
37982: PUSH
37983: LD_INT 1
37985: PPUSH
37986: LD_INT 3
37988: PPUSH
37989: CALL_OW 12
37993: PUSH
37994: LD_INT 1
37996: PPUSH
37997: LD_INT 3
37999: PPUSH
38000: CALL_OW 12
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// animal := CreateHuman ;
38017: LD_ADDR_VAR 0 12
38021: PUSH
38022: CALL_OW 44
38026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38027: LD_VAR 0 12
38031: PPUSH
38032: LD_VAR 0 8
38036: PPUSH
38037: LD_INT 0
38039: PPUSH
38040: CALL 39833 0 3
// end ;
38044: GO 37942
38046: POP
38047: POP
// if enchidnas then
38048: LD_VAR 0 4
38052: IFFALSE 38119
// for i = 1 to enchidnas do
38054: LD_ADDR_VAR 0 11
38058: PUSH
38059: DOUBLE
38060: LD_INT 1
38062: DEC
38063: ST_TO_ADDR
38064: LD_VAR 0 4
38068: PUSH
38069: FOR_TO
38070: IFFALSE 38117
// begin hc_class = 13 ;
38072: LD_ADDR_OWVAR 28
38076: PUSH
38077: LD_INT 13
38079: ST_TO_ADDR
// hc_gallery =  ;
38080: LD_ADDR_OWVAR 33
38084: PUSH
38085: LD_STRING 
38087: ST_TO_ADDR
// animal := CreateHuman ;
38088: LD_ADDR_VAR 0 12
38092: PUSH
38093: CALL_OW 44
38097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38098: LD_VAR 0 12
38102: PPUSH
38103: LD_VAR 0 8
38107: PPUSH
38108: LD_INT 0
38110: PPUSH
38111: CALL 39833 0 3
// end ;
38115: GO 38069
38117: POP
38118: POP
// if fishes then
38119: LD_VAR 0 7
38123: IFFALSE 38190
// for i = 1 to fishes do
38125: LD_ADDR_VAR 0 11
38129: PUSH
38130: DOUBLE
38131: LD_INT 1
38133: DEC
38134: ST_TO_ADDR
38135: LD_VAR 0 7
38139: PUSH
38140: FOR_TO
38141: IFFALSE 38188
// begin hc_class = 20 ;
38143: LD_ADDR_OWVAR 28
38147: PUSH
38148: LD_INT 20
38150: ST_TO_ADDR
// hc_gallery =  ;
38151: LD_ADDR_OWVAR 33
38155: PUSH
38156: LD_STRING 
38158: ST_TO_ADDR
// animal := CreateHuman ;
38159: LD_ADDR_VAR 0 12
38163: PUSH
38164: CALL_OW 44
38168: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38169: LD_VAR 0 12
38173: PPUSH
38174: LD_VAR 0 9
38178: PPUSH
38179: LD_INT 0
38181: PPUSH
38182: CALL 39833 0 3
// end ;
38186: GO 38140
38188: POP
38189: POP
// end ;
38190: LD_VAR 0 10
38194: RET
// export function WantHeal ( sci , unit ) ; begin
38195: LD_INT 0
38197: PPUSH
// if GetTaskList ( sci ) > 0 then
38198: LD_VAR 0 1
38202: PPUSH
38203: CALL_OW 437
38207: PUSH
38208: LD_INT 0
38210: GREATER
38211: IFFALSE 38283
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 437
38222: PUSH
38223: LD_INT 1
38225: ARRAY
38226: PUSH
38227: LD_INT 1
38229: ARRAY
38230: PUSH
38231: LD_STRING l
38233: EQUAL
38234: IFFALSE 38261
38236: PUSH
38237: LD_VAR 0 1
38241: PPUSH
38242: CALL_OW 437
38246: PUSH
38247: LD_INT 1
38249: ARRAY
38250: PUSH
38251: LD_INT 4
38253: ARRAY
38254: PUSH
38255: LD_VAR 0 2
38259: EQUAL
38260: AND
38261: IFFALSE 38273
// result := true else
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_INT 1
38270: ST_TO_ADDR
38271: GO 38281
// result := false ;
38273: LD_ADDR_VAR 0 3
38277: PUSH
38278: LD_INT 0
38280: ST_TO_ADDR
// end else
38281: GO 38291
// result := false ;
38283: LD_ADDR_VAR 0 3
38287: PUSH
38288: LD_INT 0
38290: ST_TO_ADDR
// end ;
38291: LD_VAR 0 3
38295: RET
// export function HealTarget ( sci ) ; begin
38296: LD_INT 0
38298: PPUSH
// if not sci then
38299: LD_VAR 0 1
38303: NOT
38304: IFFALSE 38308
// exit ;
38306: GO 38373
// result := 0 ;
38308: LD_ADDR_VAR 0 2
38312: PUSH
38313: LD_INT 0
38315: ST_TO_ADDR
// if GetTaskList ( sci ) then
38316: LD_VAR 0 1
38320: PPUSH
38321: CALL_OW 437
38325: IFFALSE 38373
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 437
38336: PUSH
38337: LD_INT 1
38339: ARRAY
38340: PUSH
38341: LD_INT 1
38343: ARRAY
38344: PUSH
38345: LD_STRING l
38347: EQUAL
38348: IFFALSE 38373
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38350: LD_ADDR_VAR 0 2
38354: PUSH
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 437
38364: PUSH
38365: LD_INT 1
38367: ARRAY
38368: PUSH
38369: LD_INT 4
38371: ARRAY
38372: ST_TO_ADDR
// end ;
38373: LD_VAR 0 2
38377: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38378: LD_INT 0
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
// if not base_units then
38384: LD_VAR 0 1
38388: NOT
38389: IFFALSE 38393
// exit ;
38391: GO 38480
// result := false ;
38393: LD_ADDR_VAR 0 2
38397: PUSH
38398: LD_INT 0
38400: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38401: LD_ADDR_VAR 0 5
38405: PUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: LD_INT 21
38413: PUSH
38414: LD_INT 3
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PPUSH
38421: CALL_OW 72
38425: ST_TO_ADDR
// if not tmp then
38426: LD_VAR 0 5
38430: NOT
38431: IFFALSE 38435
// exit ;
38433: GO 38480
// for i in tmp do
38435: LD_ADDR_VAR 0 3
38439: PUSH
38440: LD_VAR 0 5
38444: PUSH
38445: FOR_IN
38446: IFFALSE 38478
// begin result := EnemyInRange ( i , 22 ) ;
38448: LD_ADDR_VAR 0 2
38452: PUSH
38453: LD_VAR 0 3
38457: PPUSH
38458: LD_INT 22
38460: PPUSH
38461: CALL 35905 0 2
38465: ST_TO_ADDR
// if result then
38466: LD_VAR 0 2
38470: IFFALSE 38476
// exit ;
38472: POP
38473: POP
38474: GO 38480
// end ;
38476: GO 38445
38478: POP
38479: POP
// end ;
38480: LD_VAR 0 2
38484: RET
// export function FilterByTag ( units , tag ) ; begin
38485: LD_INT 0
38487: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38488: LD_ADDR_VAR 0 3
38492: PUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: LD_INT 120
38500: PUSH
38501: LD_VAR 0 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PPUSH
38510: CALL_OW 72
38514: ST_TO_ADDR
// end ;
38515: LD_VAR 0 3
38519: RET
// export function IsDriver ( un ) ; begin
38520: LD_INT 0
38522: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38523: LD_ADDR_VAR 0 2
38527: PUSH
38528: LD_VAR 0 1
38532: PUSH
38533: LD_INT 55
38535: PUSH
38536: EMPTY
38537: LIST
38538: PPUSH
38539: CALL_OW 69
38543: IN
38544: ST_TO_ADDR
// end ;
38545: LD_VAR 0 2
38549: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38550: LD_INT 0
38552: PPUSH
38553: PPUSH
// list := [ ] ;
38554: LD_ADDR_VAR 0 5
38558: PUSH
38559: EMPTY
38560: ST_TO_ADDR
// case d of 0 :
38561: LD_VAR 0 3
38565: PUSH
38566: LD_INT 0
38568: DOUBLE
38569: EQUAL
38570: IFTRUE 38574
38572: GO 38707
38574: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: LD_VAR 0 1
38584: PUSH
38585: LD_INT 4
38587: MINUS
38588: PUSH
38589: LD_VAR 0 2
38593: PUSH
38594: LD_INT 4
38596: MINUS
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: PUSH
38606: LD_VAR 0 1
38610: PUSH
38611: LD_INT 3
38613: MINUS
38614: PUSH
38615: LD_VAR 0 2
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: PUSH
38628: LD_VAR 0 1
38632: PUSH
38633: LD_INT 4
38635: PLUS
38636: PUSH
38637: LD_VAR 0 2
38641: PUSH
38642: LD_INT 4
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: PUSH
38650: LD_VAR 0 1
38654: PUSH
38655: LD_INT 3
38657: PLUS
38658: PUSH
38659: LD_VAR 0 2
38663: PUSH
38664: LD_INT 3
38666: PLUS
38667: PUSH
38668: LD_INT 5
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: LD_VAR 0 1
38680: PUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 4
38688: PLUS
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// end ; 1 :
38705: GO 39405
38707: LD_INT 1
38709: DOUBLE
38710: EQUAL
38711: IFTRUE 38715
38713: GO 38848
38715: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38716: LD_ADDR_VAR 0 5
38720: PUSH
38721: LD_VAR 0 1
38725: PUSH
38726: LD_VAR 0 2
38730: PUSH
38731: LD_INT 4
38733: MINUS
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: PUSH
38743: LD_VAR 0 1
38747: PUSH
38748: LD_INT 3
38750: MINUS
38751: PUSH
38752: LD_VAR 0 2
38756: PUSH
38757: LD_INT 3
38759: MINUS
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: PUSH
38769: LD_VAR 0 1
38773: PUSH
38774: LD_INT 4
38776: MINUS
38777: PUSH
38778: LD_VAR 0 2
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: PUSH
38791: LD_VAR 0 1
38795: PUSH
38796: LD_VAR 0 2
38800: PUSH
38801: LD_INT 3
38803: PLUS
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: LD_VAR 0 1
38817: PUSH
38818: LD_INT 4
38820: PLUS
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: LD_INT 4
38829: PLUS
38830: PUSH
38831: LD_INT 5
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// end ; 2 :
38846: GO 39405
38848: LD_INT 2
38850: DOUBLE
38851: EQUAL
38852: IFTRUE 38856
38854: GO 38985
38856: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38857: LD_ADDR_VAR 0 5
38861: PUSH
38862: LD_VAR 0 1
38866: PUSH
38867: LD_VAR 0 2
38871: PUSH
38872: LD_INT 3
38874: MINUS
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 4
38891: PLUS
38892: PUSH
38893: LD_VAR 0 2
38897: PUSH
38898: LD_INT 4
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: PUSH
38906: LD_VAR 0 1
38910: PUSH
38911: LD_VAR 0 2
38915: PUSH
38916: LD_INT 4
38918: PLUS
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: PUSH
38928: LD_VAR 0 1
38932: PUSH
38933: LD_INT 3
38935: MINUS
38936: PUSH
38937: LD_VAR 0 2
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: LD_INT 4
38957: MINUS
38958: PUSH
38959: LD_VAR 0 2
38963: PUSH
38964: LD_INT 4
38966: MINUS
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// end ; 3 :
38983: GO 39405
38985: LD_INT 3
38987: DOUBLE
38988: EQUAL
38989: IFTRUE 38993
38991: GO 39126
38993: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38994: LD_ADDR_VAR 0 5
38998: PUSH
38999: LD_VAR 0 1
39003: PUSH
39004: LD_INT 3
39006: PLUS
39007: PUSH
39008: LD_VAR 0 2
39012: PUSH
39013: LD_INT 4
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: PUSH
39021: LD_VAR 0 1
39025: PUSH
39026: LD_INT 4
39028: PLUS
39029: PUSH
39030: LD_VAR 0 2
39034: PUSH
39035: LD_INT 4
39037: PLUS
39038: PUSH
39039: LD_INT 5
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: PUSH
39047: LD_VAR 0 1
39051: PUSH
39052: LD_INT 4
39054: MINUS
39055: PUSH
39056: LD_VAR 0 2
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: PUSH
39069: LD_VAR 0 1
39073: PUSH
39074: LD_VAR 0 2
39078: PUSH
39079: LD_INT 4
39081: MINUS
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: LIST
39090: PUSH
39091: LD_VAR 0 1
39095: PUSH
39096: LD_INT 3
39098: MINUS
39099: PUSH
39100: LD_VAR 0 2
39104: PUSH
39105: LD_INT 3
39107: MINUS
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// end ; 4 :
39124: GO 39405
39126: LD_INT 4
39128: DOUBLE
39129: EQUAL
39130: IFTRUE 39134
39132: GO 39267
39134: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39135: LD_ADDR_VAR 0 5
39139: PUSH
39140: LD_VAR 0 1
39144: PUSH
39145: LD_VAR 0 2
39149: PUSH
39150: LD_INT 4
39152: PLUS
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: PUSH
39162: LD_VAR 0 1
39166: PUSH
39167: LD_INT 3
39169: PLUS
39170: PUSH
39171: LD_VAR 0 2
39175: PUSH
39176: LD_INT 3
39178: PLUS
39179: PUSH
39180: LD_INT 5
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: PUSH
39188: LD_VAR 0 1
39192: PUSH
39193: LD_INT 4
39195: PLUS
39196: PUSH
39197: LD_VAR 0 2
39201: PUSH
39202: LD_INT 4
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: PUSH
39210: LD_VAR 0 1
39214: PUSH
39215: LD_VAR 0 2
39219: PUSH
39220: LD_INT 3
39222: MINUS
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: PUSH
39232: LD_VAR 0 1
39236: PUSH
39237: LD_INT 4
39239: MINUS
39240: PUSH
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 4
39248: MINUS
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: LIST
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// end ; 5 :
39265: GO 39405
39267: LD_INT 5
39269: DOUBLE
39270: EQUAL
39271: IFTRUE 39275
39273: GO 39404
39275: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39276: LD_ADDR_VAR 0 5
39280: PUSH
39281: LD_VAR 0 1
39285: PUSH
39286: LD_INT 4
39288: MINUS
39289: PUSH
39290: LD_VAR 0 2
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: PUSH
39303: LD_VAR 0 1
39307: PUSH
39308: LD_VAR 0 2
39312: PUSH
39313: LD_INT 4
39315: MINUS
39316: PUSH
39317: LD_INT 3
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: PUSH
39325: LD_VAR 0 1
39329: PUSH
39330: LD_INT 4
39332: PLUS
39333: PUSH
39334: LD_VAR 0 2
39338: PUSH
39339: LD_INT 4
39341: PLUS
39342: PUSH
39343: LD_INT 5
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: PUSH
39351: LD_VAR 0 1
39355: PUSH
39356: LD_INT 3
39358: PLUS
39359: PUSH
39360: LD_VAR 0 2
39364: PUSH
39365: LD_INT 4
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: PUSH
39373: LD_VAR 0 1
39377: PUSH
39378: LD_VAR 0 2
39382: PUSH
39383: LD_INT 3
39385: PLUS
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
// end ; end ;
39402: GO 39405
39404: POP
// result := list ;
39405: LD_ADDR_VAR 0 4
39409: PUSH
39410: LD_VAR 0 5
39414: ST_TO_ADDR
// end ;
39415: LD_VAR 0 4
39419: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39420: LD_INT 0
39422: PPUSH
39423: PPUSH
39424: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39425: LD_VAR 0 1
39429: NOT
39430: IFTRUE 39458
39432: PUSH
39433: LD_VAR 0 2
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: LD_INT 4
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: IN
39456: NOT
39457: OR
39458: IFFALSE 39462
// exit ;
39460: GO 39545
// tmp := [ ] ;
39462: LD_ADDR_VAR 0 5
39466: PUSH
39467: EMPTY
39468: ST_TO_ADDR
// for i in units do
39469: LD_ADDR_VAR 0 4
39473: PUSH
39474: LD_VAR 0 1
39478: PUSH
39479: FOR_IN
39480: IFFALSE 39514
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39482: LD_ADDR_VAR 0 5
39486: PUSH
39487: LD_VAR 0 5
39491: PPUSH
39492: LD_VAR 0 4
39496: PPUSH
39497: LD_VAR 0 2
39501: PPUSH
39502: CALL_OW 259
39506: PPUSH
39507: CALL 40940 0 2
39511: ST_TO_ADDR
39512: GO 39479
39514: POP
39515: POP
// if not tmp then
39516: LD_VAR 0 5
39520: NOT
39521: IFFALSE 39525
// exit ;
39523: GO 39545
// result := SortListByListDesc ( units , tmp ) ;
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_VAR 0 1
39534: PPUSH
39535: LD_VAR 0 5
39539: PPUSH
39540: CALL_OW 77
39544: ST_TO_ADDR
// end ;
39545: LD_VAR 0 3
39549: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39550: LD_INT 0
39552: PPUSH
39553: PPUSH
39554: PPUSH
// result := false ;
39555: LD_ADDR_VAR 0 3
39559: PUSH
39560: LD_INT 0
39562: ST_TO_ADDR
// if not building then
39563: LD_VAR 0 2
39567: NOT
39568: IFFALSE 39572
// exit ;
39570: GO 39716
// x := GetX ( building ) ;
39572: LD_ADDR_VAR 0 4
39576: PUSH
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL_OW 250
39586: ST_TO_ADDR
// y := GetY ( building ) ;
39587: LD_ADDR_VAR 0 5
39591: PUSH
39592: LD_VAR 0 2
39596: PPUSH
39597: CALL_OW 251
39601: ST_TO_ADDR
// if not x or not y then
39602: LD_VAR 0 4
39606: NOT
39607: IFTRUE 39616
39609: PUSH
39610: LD_VAR 0 5
39614: NOT
39615: OR
39616: IFFALSE 39620
// exit ;
39618: GO 39716
// if GetTaskList ( unit ) then
39620: LD_VAR 0 1
39624: PPUSH
39625: CALL_OW 437
39629: IFFALSE 39716
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39631: LD_STRING e
39633: PUSH
39634: LD_VAR 0 1
39638: PPUSH
39639: CALL_OW 437
39643: PUSH
39644: LD_INT 1
39646: ARRAY
39647: PUSH
39648: LD_INT 1
39650: ARRAY
39651: EQUAL
39652: IFFALSE 39679
39654: PUSH
39655: LD_VAR 0 4
39659: PUSH
39660: LD_VAR 0 1
39664: PPUSH
39665: CALL_OW 437
39669: PUSH
39670: LD_INT 1
39672: ARRAY
39673: PUSH
39674: LD_INT 2
39676: ARRAY
39677: EQUAL
39678: AND
39679: IFFALSE 39706
39681: PUSH
39682: LD_VAR 0 5
39686: PUSH
39687: LD_VAR 0 1
39691: PPUSH
39692: CALL_OW 437
39696: PUSH
39697: LD_INT 1
39699: ARRAY
39700: PUSH
39701: LD_INT 3
39703: ARRAY
39704: EQUAL
39705: AND
39706: IFFALSE 39716
// result := true end ;
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: LD_INT 1
39715: ST_TO_ADDR
// end ;
39716: LD_VAR 0 3
39720: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39721: LD_INT 0
39723: PPUSH
// result := false ;
39724: LD_ADDR_VAR 0 4
39728: PUSH
39729: LD_INT 0
39731: ST_TO_ADDR
// if GetTaskList ( unit ) then
39732: LD_VAR 0 1
39736: PPUSH
39737: CALL_OW 437
39741: IFFALSE 39828
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39743: LD_STRING M
39745: PUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL_OW 437
39755: PUSH
39756: LD_INT 1
39758: ARRAY
39759: PUSH
39760: LD_INT 1
39762: ARRAY
39763: EQUAL
39764: IFFALSE 39791
39766: PUSH
39767: LD_VAR 0 2
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 437
39781: PUSH
39782: LD_INT 1
39784: ARRAY
39785: PUSH
39786: LD_INT 2
39788: ARRAY
39789: EQUAL
39790: AND
39791: IFFALSE 39818
39793: PUSH
39794: LD_VAR 0 3
39798: PUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 437
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: PUSH
39813: LD_INT 3
39815: ARRAY
39816: EQUAL
39817: AND
39818: IFFALSE 39828
// result := true ;
39820: LD_ADDR_VAR 0 4
39824: PUSH
39825: LD_INT 1
39827: ST_TO_ADDR
// end ; end ;
39828: LD_VAR 0 4
39832: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39833: LD_INT 0
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
// if not unit or not area then
39839: LD_VAR 0 1
39843: NOT
39844: IFTRUE 39853
39846: PUSH
39847: LD_VAR 0 2
39851: NOT
39852: OR
39853: IFFALSE 39857
// exit ;
39855: GO 40033
// tmp := AreaToList ( area , i ) ;
39857: LD_ADDR_VAR 0 6
39861: PUSH
39862: LD_VAR 0 2
39866: PPUSH
39867: LD_VAR 0 5
39871: PPUSH
39872: CALL_OW 517
39876: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39877: LD_ADDR_VAR 0 5
39881: PUSH
39882: DOUBLE
39883: LD_INT 1
39885: DEC
39886: ST_TO_ADDR
39887: LD_VAR 0 6
39891: PUSH
39892: LD_INT 1
39894: ARRAY
39895: PUSH
39896: FOR_TO
39897: IFFALSE 40031
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39899: LD_ADDR_VAR 0 7
39903: PUSH
39904: LD_VAR 0 6
39908: PUSH
39909: LD_INT 1
39911: ARRAY
39912: PUSH
39913: LD_VAR 0 5
39917: ARRAY
39918: PUSH
39919: LD_VAR 0 6
39923: PUSH
39924: LD_INT 2
39926: ARRAY
39927: PUSH
39928: LD_VAR 0 5
39932: ARRAY
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39938: LD_INT 92
39940: PUSH
39941: LD_VAR 0 7
39945: PUSH
39946: LD_INT 1
39948: ARRAY
39949: PUSH
39950: LD_VAR 0 7
39954: PUSH
39955: LD_INT 2
39957: ARRAY
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: PPUSH
39968: CALL_OW 69
39972: PUSH
39973: LD_INT 0
39975: EQUAL
39976: IFFALSE 40029
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39978: LD_VAR 0 1
39982: PPUSH
39983: LD_VAR 0 7
39987: PUSH
39988: LD_INT 1
39990: ARRAY
39991: PPUSH
39992: LD_VAR 0 7
39996: PUSH
39997: LD_INT 2
39999: ARRAY
40000: PPUSH
40001: LD_VAR 0 3
40005: PPUSH
40006: CALL_OW 48
// result := IsPlaced ( unit ) ;
40010: LD_ADDR_VAR 0 4
40014: PUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 305
40024: ST_TO_ADDR
// exit ;
40025: POP
40026: POP
40027: GO 40033
// end ; end ;
40029: GO 39896
40031: POP
40032: POP
// end ;
40033: LD_VAR 0 4
40037: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40038: LD_INT 0
40040: PPUSH
40041: PPUSH
40042: PPUSH
// if not side or side > 8 then
40043: LD_VAR 0 1
40047: NOT
40048: IFTRUE 40060
40050: PUSH
40051: LD_VAR 0 1
40055: PUSH
40056: LD_INT 8
40058: GREATER
40059: OR
40060: IFFALSE 40064
// exit ;
40062: GO 40251
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40064: LD_ADDR_VAR 0 4
40068: PUSH
40069: LD_INT 22
40071: PUSH
40072: LD_VAR 0 1
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 21
40083: PUSH
40084: LD_INT 3
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PPUSH
40095: CALL_OW 69
40099: ST_TO_ADDR
// if not tmp then
40100: LD_VAR 0 4
40104: NOT
40105: IFFALSE 40109
// exit ;
40107: GO 40251
// enable_addtolog := true ;
40109: LD_ADDR_OWVAR 81
40113: PUSH
40114: LD_INT 1
40116: ST_TO_ADDR
// AddToLog ( [ ) ;
40117: LD_STRING [
40119: PPUSH
40120: CALL_OW 561
// for i in tmp do
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_VAR 0 4
40133: PUSH
40134: FOR_IN
40135: IFFALSE 40242
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40137: LD_STRING [
40139: PUSH
40140: LD_VAR 0 3
40144: PPUSH
40145: CALL_OW 266
40149: STR
40150: PUSH
40151: LD_STRING , 
40153: STR
40154: PUSH
40155: LD_VAR 0 3
40159: PPUSH
40160: CALL_OW 250
40164: STR
40165: PUSH
40166: LD_STRING , 
40168: STR
40169: PUSH
40170: LD_VAR 0 3
40174: PPUSH
40175: CALL_OW 251
40179: STR
40180: PUSH
40181: LD_STRING , 
40183: STR
40184: PUSH
40185: LD_VAR 0 3
40189: PPUSH
40190: CALL_OW 254
40194: STR
40195: PUSH
40196: LD_STRING , 
40198: STR
40199: PUSH
40200: LD_VAR 0 3
40204: PPUSH
40205: LD_INT 1
40207: PPUSH
40208: CALL_OW 268
40212: STR
40213: PUSH
40214: LD_STRING , 
40216: STR
40217: PUSH
40218: LD_VAR 0 3
40222: PPUSH
40223: LD_INT 2
40225: PPUSH
40226: CALL_OW 268
40230: STR
40231: PUSH
40232: LD_STRING ],
40234: STR
40235: PPUSH
40236: CALL_OW 561
// end ;
40240: GO 40134
40242: POP
40243: POP
// AddToLog ( ]; ) ;
40244: LD_STRING ];
40246: PPUSH
40247: CALL_OW 561
// end ;
40251: LD_VAR 0 2
40255: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40256: LD_INT 0
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
// if not area or not rate or not max then
40263: LD_VAR 0 1
40267: NOT
40268: IFTRUE 40277
40270: PUSH
40271: LD_VAR 0 2
40275: NOT
40276: OR
40277: IFTRUE 40286
40279: PUSH
40280: LD_VAR 0 4
40284: NOT
40285: OR
40286: IFFALSE 40290
// exit ;
40288: GO 40479
// while 1 do
40290: LD_INT 1
40292: IFFALSE 40479
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40294: LD_ADDR_VAR 0 9
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: LD_INT 1
40306: PPUSH
40307: CALL_OW 287
40311: PUSH
40312: LD_INT 10
40314: MUL
40315: ST_TO_ADDR
// r := rate / 10 ;
40316: LD_ADDR_VAR 0 7
40320: PUSH
40321: LD_VAR 0 2
40325: PUSH
40326: LD_INT 10
40328: DIVREAL
40329: ST_TO_ADDR
// time := 1 1$00 ;
40330: LD_ADDR_VAR 0 8
40334: PUSH
40335: LD_INT 2100
40337: ST_TO_ADDR
// if amount < min then
40338: LD_VAR 0 9
40342: PUSH
40343: LD_VAR 0 3
40347: LESS
40348: IFFALSE 40366
// r := r * 2 else
40350: LD_ADDR_VAR 0 7
40354: PUSH
40355: LD_VAR 0 7
40359: PUSH
40360: LD_INT 2
40362: MUL
40363: ST_TO_ADDR
40364: GO 40392
// if amount > max then
40366: LD_VAR 0 9
40370: PUSH
40371: LD_VAR 0 4
40375: GREATER
40376: IFFALSE 40392
// r := r / 2 ;
40378: LD_ADDR_VAR 0 7
40382: PUSH
40383: LD_VAR 0 7
40387: PUSH
40388: LD_INT 2
40390: DIVREAL
40391: ST_TO_ADDR
// time := time / r ;
40392: LD_ADDR_VAR 0 8
40396: PUSH
40397: LD_VAR 0 8
40401: PUSH
40402: LD_VAR 0 7
40406: DIVREAL
40407: ST_TO_ADDR
// if time < 0 then
40408: LD_VAR 0 8
40412: PUSH
40413: LD_INT 0
40415: LESS
40416: IFFALSE 40433
// time := time * - 1 ;
40418: LD_ADDR_VAR 0 8
40422: PUSH
40423: LD_VAR 0 8
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: MUL
40432: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40433: LD_VAR 0 8
40437: PUSH
40438: LD_INT 35
40440: PPUSH
40441: LD_INT 875
40443: PPUSH
40444: CALL_OW 12
40448: PLUS
40449: PPUSH
40450: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40454: LD_INT 1
40456: PPUSH
40457: LD_INT 5
40459: PPUSH
40460: CALL_OW 12
40464: PPUSH
40465: LD_VAR 0 1
40469: PPUSH
40470: LD_INT 1
40472: PPUSH
40473: CALL_OW 55
// end ;
40477: GO 40290
// end ;
40479: LD_VAR 0 5
40483: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40484: LD_INT 0
40486: PPUSH
40487: PPUSH
40488: PPUSH
40489: PPUSH
40490: PPUSH
40491: PPUSH
40492: PPUSH
40493: PPUSH
// if not turrets or not factories then
40494: LD_VAR 0 1
40498: NOT
40499: IFTRUE 40508
40501: PUSH
40502: LD_VAR 0 2
40506: NOT
40507: OR
40508: IFFALSE 40512
// exit ;
40510: GO 40819
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40512: LD_ADDR_VAR 0 10
40516: PUSH
40517: LD_INT 5
40519: PUSH
40520: LD_INT 6
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 4
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: LD_INT 5
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 24
40554: PUSH
40555: LD_INT 25
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 23
40564: PUSH
40565: LD_INT 27
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 42
40578: PUSH
40579: LD_INT 43
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 44
40588: PUSH
40589: LD_INT 46
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 45
40598: PUSH
40599: LD_INT 47
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: ST_TO_ADDR
// result := [ ] ;
40616: LD_ADDR_VAR 0 3
40620: PUSH
40621: EMPTY
40622: ST_TO_ADDR
// for i in turrets do
40623: LD_ADDR_VAR 0 4
40627: PUSH
40628: LD_VAR 0 1
40632: PUSH
40633: FOR_IN
40634: IFFALSE 40817
// begin nat := GetNation ( i ) ;
40636: LD_ADDR_VAR 0 7
40640: PUSH
40641: LD_VAR 0 4
40645: PPUSH
40646: CALL_OW 248
40650: ST_TO_ADDR
// weapon := 0 ;
40651: LD_ADDR_VAR 0 8
40655: PUSH
40656: LD_INT 0
40658: ST_TO_ADDR
// if not nat then
40659: LD_VAR 0 7
40663: NOT
40664: IFFALSE 40668
// continue ;
40666: GO 40633
// for j in list [ nat ] do
40668: LD_ADDR_VAR 0 5
40672: PUSH
40673: LD_VAR 0 10
40677: PUSH
40678: LD_VAR 0 7
40682: ARRAY
40683: PUSH
40684: FOR_IN
40685: IFFALSE 40726
// if GetBWeapon ( i ) = j [ 1 ] then
40687: LD_VAR 0 4
40691: PPUSH
40692: CALL_OW 269
40696: PUSH
40697: LD_VAR 0 5
40701: PUSH
40702: LD_INT 1
40704: ARRAY
40705: EQUAL
40706: IFFALSE 40724
// begin weapon := j [ 2 ] ;
40708: LD_ADDR_VAR 0 8
40712: PUSH
40713: LD_VAR 0 5
40717: PUSH
40718: LD_INT 2
40720: ARRAY
40721: ST_TO_ADDR
// break ;
40722: GO 40726
// end ;
40724: GO 40684
40726: POP
40727: POP
// if not weapon then
40728: LD_VAR 0 8
40732: NOT
40733: IFFALSE 40737
// continue ;
40735: GO 40633
// for k in factories do
40737: LD_ADDR_VAR 0 6
40741: PUSH
40742: LD_VAR 0 2
40746: PUSH
40747: FOR_IN
40748: IFFALSE 40813
// begin weapons := AvailableWeaponList ( k ) ;
40750: LD_ADDR_VAR 0 9
40754: PUSH
40755: LD_VAR 0 6
40759: PPUSH
40760: CALL_OW 478
40764: ST_TO_ADDR
// if not weapons then
40765: LD_VAR 0 9
40769: NOT
40770: IFFALSE 40774
// continue ;
40772: GO 40747
// if weapon in weapons then
40774: LD_VAR 0 8
40778: PUSH
40779: LD_VAR 0 9
40783: IN
40784: IFFALSE 40811
// begin result := [ i , weapon ] ;
40786: LD_ADDR_VAR 0 3
40790: PUSH
40791: LD_VAR 0 4
40795: PUSH
40796: LD_VAR 0 8
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: ST_TO_ADDR
// exit ;
40805: POP
40806: POP
40807: POP
40808: POP
40809: GO 40819
// end ; end ;
40811: GO 40747
40813: POP
40814: POP
// end ;
40815: GO 40633
40817: POP
40818: POP
// end ;
40819: LD_VAR 0 3
40823: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40824: LD_INT 0
40826: PPUSH
// if not side or side > 8 then
40827: LD_VAR 0 3
40831: NOT
40832: IFTRUE 40844
40834: PUSH
40835: LD_VAR 0 3
40839: PUSH
40840: LD_INT 8
40842: GREATER
40843: OR
40844: IFFALSE 40848
// exit ;
40846: GO 40907
// if not range then
40848: LD_VAR 0 4
40852: NOT
40853: IFFALSE 40864
// range := - 12 ;
40855: LD_ADDR_VAR 0 4
40859: PUSH
40860: LD_INT 12
40862: NEG
40863: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40864: LD_VAR 0 1
40868: PPUSH
40869: LD_VAR 0 2
40873: PPUSH
40874: LD_VAR 0 3
40878: PPUSH
40879: LD_VAR 0 4
40883: PPUSH
40884: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40888: LD_VAR 0 1
40892: PPUSH
40893: LD_VAR 0 2
40897: PPUSH
40898: LD_VAR 0 3
40902: PPUSH
40903: CALL_OW 331
// end ;
40907: LD_VAR 0 5
40911: RET
// export function Video ( mode ) ; begin
40912: LD_INT 0
40914: PPUSH
// ingame_video = mode ;
40915: LD_ADDR_OWVAR 52
40919: PUSH
40920: LD_VAR 0 1
40924: ST_TO_ADDR
// interface_hidden = mode ;
40925: LD_ADDR_OWVAR 54
40929: PUSH
40930: LD_VAR 0 1
40934: ST_TO_ADDR
// end ;
40935: LD_VAR 0 2
40939: RET
// export function Join ( array , element ) ; begin
40940: LD_INT 0
40942: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40943: LD_ADDR_VAR 0 3
40947: PUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: LD_VAR 0 1
40957: PUSH
40958: LD_INT 1
40960: PLUS
40961: PPUSH
40962: LD_VAR 0 2
40966: PPUSH
40967: CALL_OW 1
40971: ST_TO_ADDR
// end ;
40972: LD_VAR 0 3
40976: RET
// export function JoinUnion ( array , element ) ; begin
40977: LD_INT 0
40979: PPUSH
// result := array union element ;
40980: LD_ADDR_VAR 0 3
40984: PUSH
40985: LD_VAR 0 1
40989: PUSH
40990: LD_VAR 0 2
40994: UNION
40995: ST_TO_ADDR
// end ;
40996: LD_VAR 0 3
41000: RET
// export function GetBehemoths ( side ) ; begin
41001: LD_INT 0
41003: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41004: LD_ADDR_VAR 0 2
41008: PUSH
41009: LD_INT 22
41011: PUSH
41012: LD_VAR 0 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 31
41023: PUSH
41024: LD_INT 25
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PPUSH
41035: CALL_OW 69
41039: ST_TO_ADDR
// end ;
41040: LD_VAR 0 2
41044: RET
// export function Shuffle ( array ) ; var i , index ; begin
41045: LD_INT 0
41047: PPUSH
41048: PPUSH
41049: PPUSH
// result := [ ] ;
41050: LD_ADDR_VAR 0 2
41054: PUSH
41055: EMPTY
41056: ST_TO_ADDR
// if not array then
41057: LD_VAR 0 1
41061: NOT
41062: IFFALSE 41066
// exit ;
41064: GO 41165
// Randomize ;
41066: CALL_OW 10
// for i = array downto 1 do
41070: LD_ADDR_VAR 0 3
41074: PUSH
41075: DOUBLE
41076: LD_VAR 0 1
41080: INC
41081: ST_TO_ADDR
41082: LD_INT 1
41084: PUSH
41085: FOR_DOWNTO
41086: IFFALSE 41163
// begin index := rand ( 1 , array ) ;
41088: LD_ADDR_VAR 0 4
41092: PUSH
41093: LD_INT 1
41095: PPUSH
41096: LD_VAR 0 1
41100: PPUSH
41101: CALL_OW 12
41105: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41106: LD_ADDR_VAR 0 2
41110: PUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: LD_VAR 0 2
41120: PUSH
41121: LD_INT 1
41123: PLUS
41124: PPUSH
41125: LD_VAR 0 1
41129: PUSH
41130: LD_VAR 0 4
41134: ARRAY
41135: PPUSH
41136: CALL_OW 2
41140: ST_TO_ADDR
// array := Delete ( array , index ) ;
41141: LD_ADDR_VAR 0 1
41145: PUSH
41146: LD_VAR 0 1
41150: PPUSH
41151: LD_VAR 0 4
41155: PPUSH
41156: CALL_OW 3
41160: ST_TO_ADDR
// end ;
41161: GO 41085
41163: POP
41164: POP
// end ;
41165: LD_VAR 0 2
41169: RET
// export function GetBaseMaterials ( base ) ; begin
41170: LD_INT 0
41172: PPUSH
// result := [ 0 , 0 , 0 ] ;
41173: LD_ADDR_VAR 0 2
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: ST_TO_ADDR
// if not base then
41192: LD_VAR 0 1
41196: NOT
41197: IFFALSE 41201
// exit ;
41199: GO 41250
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41201: LD_ADDR_VAR 0 2
41205: PUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: LD_INT 1
41213: PPUSH
41214: CALL_OW 275
41218: PUSH
41219: LD_VAR 0 1
41223: PPUSH
41224: LD_INT 2
41226: PPUSH
41227: CALL_OW 275
41231: PUSH
41232: LD_VAR 0 1
41236: PPUSH
41237: LD_INT 3
41239: PPUSH
41240: CALL_OW 275
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: ST_TO_ADDR
// end ;
41250: LD_VAR 0 2
41254: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41255: LD_INT 0
41257: PPUSH
41258: PPUSH
// result := array ;
41259: LD_ADDR_VAR 0 3
41263: PUSH
41264: LD_VAR 0 1
41268: ST_TO_ADDR
// if size >= result then
41269: LD_VAR 0 2
41273: PUSH
41274: LD_VAR 0 3
41278: GREATEREQUAL
41279: IFFALSE 41283
// exit ;
41281: GO 41333
// if size then
41283: LD_VAR 0 2
41287: IFFALSE 41333
// for i := array downto size do
41289: LD_ADDR_VAR 0 4
41293: PUSH
41294: DOUBLE
41295: LD_VAR 0 1
41299: INC
41300: ST_TO_ADDR
41301: LD_VAR 0 2
41305: PUSH
41306: FOR_DOWNTO
41307: IFFALSE 41331
// result := Delete ( result , result ) ;
41309: LD_ADDR_VAR 0 3
41313: PUSH
41314: LD_VAR 0 3
41318: PPUSH
41319: LD_VAR 0 3
41323: PPUSH
41324: CALL_OW 3
41328: ST_TO_ADDR
41329: GO 41306
41331: POP
41332: POP
// end ;
41333: LD_VAR 0 3
41337: RET
// export function ComExit ( unit ) ; var tmp ; begin
41338: LD_INT 0
41340: PPUSH
41341: PPUSH
// if not IsInUnit ( unit ) then
41342: LD_VAR 0 1
41346: PPUSH
41347: CALL_OW 310
41351: NOT
41352: IFFALSE 41356
// exit ;
41354: GO 41416
// tmp := IsInUnit ( unit ) ;
41356: LD_ADDR_VAR 0 3
41360: PUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL_OW 310
41370: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41371: LD_VAR 0 3
41375: PPUSH
41376: CALL_OW 247
41380: PUSH
41381: LD_INT 2
41383: EQUAL
41384: IFFALSE 41397
// ComExitVehicle ( unit ) else
41386: LD_VAR 0 1
41390: PPUSH
41391: CALL_OW 121
41395: GO 41406
// ComExitBuilding ( unit ) ;
41397: LD_VAR 0 1
41401: PPUSH
41402: CALL_OW 122
// result := tmp ;
41406: LD_ADDR_VAR 0 2
41410: PUSH
41411: LD_VAR 0 3
41415: ST_TO_ADDR
// end ;
41416: LD_VAR 0 2
41420: RET
// export function ComExitAll ( units ) ; var i ; begin
41421: LD_INT 0
41423: PPUSH
41424: PPUSH
// if not units then
41425: LD_VAR 0 1
41429: NOT
41430: IFFALSE 41434
// exit ;
41432: GO 41460
// for i in units do
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_VAR 0 1
41443: PUSH
41444: FOR_IN
41445: IFFALSE 41458
// ComExit ( i ) ;
41447: LD_VAR 0 3
41451: PPUSH
41452: CALL 41338 0 1
41456: GO 41444
41458: POP
41459: POP
// end ;
41460: LD_VAR 0 2
41464: RET
// export function ResetHc ; begin
41465: LD_INT 0
41467: PPUSH
// InitHc ;
41468: CALL_OW 19
// hc_importance := 0 ;
41472: LD_ADDR_OWVAR 32
41476: PUSH
41477: LD_INT 0
41479: ST_TO_ADDR
// end ;
41480: LD_VAR 0 1
41484: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41485: LD_INT 0
41487: PPUSH
41488: PPUSH
41489: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41490: LD_ADDR_VAR 0 6
41494: PUSH
41495: LD_VAR 0 1
41499: PUSH
41500: LD_VAR 0 3
41504: PLUS
41505: PUSH
41506: LD_INT 2
41508: DIV
41509: ST_TO_ADDR
// if _x < 0 then
41510: LD_VAR 0 6
41514: PUSH
41515: LD_INT 0
41517: LESS
41518: IFFALSE 41535
// _x := _x * - 1 ;
41520: LD_ADDR_VAR 0 6
41524: PUSH
41525: LD_VAR 0 6
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: MUL
41534: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41535: LD_ADDR_VAR 0 7
41539: PUSH
41540: LD_VAR 0 2
41544: PUSH
41545: LD_VAR 0 4
41549: PLUS
41550: PUSH
41551: LD_INT 2
41553: DIV
41554: ST_TO_ADDR
// if _y < 0 then
41555: LD_VAR 0 7
41559: PUSH
41560: LD_INT 0
41562: LESS
41563: IFFALSE 41580
// _y := _y * - 1 ;
41565: LD_ADDR_VAR 0 7
41569: PUSH
41570: LD_VAR 0 7
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: MUL
41579: ST_TO_ADDR
// result := [ _x , _y ] ;
41580: LD_ADDR_VAR 0 5
41584: PUSH
41585: LD_VAR 0 6
41589: PUSH
41590: LD_VAR 0 7
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: ST_TO_ADDR
// end ;
41599: LD_VAR 0 5
41603: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41604: LD_INT 0
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
// task := GetTaskList ( unit ) ;
41610: LD_ADDR_VAR 0 7
41614: PUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 437
41624: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41625: LD_VAR 0 7
41629: NOT
41630: IFFALSE 41649
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: LD_VAR 0 2
41642: PPUSH
41643: CALL_OW 308
41647: NOT
41648: AND
41649: IFFALSE 41653
// exit ;
41651: GO 41771
// if IsInArea ( unit , area ) then
41653: LD_VAR 0 1
41657: PPUSH
41658: LD_VAR 0 2
41662: PPUSH
41663: CALL_OW 308
41667: IFFALSE 41685
// begin ComMoveToArea ( unit , goAway ) ;
41669: LD_VAR 0 1
41673: PPUSH
41674: LD_VAR 0 3
41678: PPUSH
41679: CALL_OW 113
// exit ;
41683: GO 41771
// end ; if task [ 1 ] [ 1 ] <> M then
41685: LD_VAR 0 7
41689: PUSH
41690: LD_INT 1
41692: ARRAY
41693: PUSH
41694: LD_INT 1
41696: ARRAY
41697: PUSH
41698: LD_STRING M
41700: NONEQUAL
41701: IFFALSE 41705
// exit ;
41703: GO 41771
// x := task [ 1 ] [ 2 ] ;
41705: LD_ADDR_VAR 0 5
41709: PUSH
41710: LD_VAR 0 7
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PUSH
41719: LD_INT 2
41721: ARRAY
41722: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41723: LD_ADDR_VAR 0 6
41727: PUSH
41728: LD_VAR 0 7
41732: PUSH
41733: LD_INT 1
41735: ARRAY
41736: PUSH
41737: LD_INT 3
41739: ARRAY
41740: ST_TO_ADDR
// if InArea ( x , y , area ) then
41741: LD_VAR 0 5
41745: PPUSH
41746: LD_VAR 0 6
41750: PPUSH
41751: LD_VAR 0 2
41755: PPUSH
41756: CALL_OW 309
41760: IFFALSE 41771
// ComStop ( unit ) ;
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 141
// end ;
41771: LD_VAR 0 4
41775: RET
// export function Abs ( value ) ; begin
41776: LD_INT 0
41778: PPUSH
// result := value ;
41779: LD_ADDR_VAR 0 2
41783: PUSH
41784: LD_VAR 0 1
41788: ST_TO_ADDR
// if value < 0 then
41789: LD_VAR 0 1
41793: PUSH
41794: LD_INT 0
41796: LESS
41797: IFFALSE 41814
// result := value * - 1 ;
41799: LD_ADDR_VAR 0 2
41803: PUSH
41804: LD_VAR 0 1
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: MUL
41813: ST_TO_ADDR
// end ;
41814: LD_VAR 0 2
41818: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41819: LD_INT 0
41821: PPUSH
41822: PPUSH
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
// if not unit or not building then
41829: LD_VAR 0 1
41833: NOT
41834: IFTRUE 41843
41836: PUSH
41837: LD_VAR 0 2
41841: NOT
41842: OR
41843: IFFALSE 41847
// exit ;
41845: GO 42075
// x := GetX ( building ) ;
41847: LD_ADDR_VAR 0 4
41851: PUSH
41852: LD_VAR 0 2
41856: PPUSH
41857: CALL_OW 250
41861: ST_TO_ADDR
// y := GetY ( building ) ;
41862: LD_ADDR_VAR 0 6
41866: PUSH
41867: LD_VAR 0 2
41871: PPUSH
41872: CALL_OW 251
41876: ST_TO_ADDR
// d := GetDir ( building ) ;
41877: LD_ADDR_VAR 0 8
41881: PUSH
41882: LD_VAR 0 2
41886: PPUSH
41887: CALL_OW 254
41891: ST_TO_ADDR
// r := 4 ;
41892: LD_ADDR_VAR 0 9
41896: PUSH
41897: LD_INT 4
41899: ST_TO_ADDR
// for i := 1 to 5 do
41900: LD_ADDR_VAR 0 10
41904: PUSH
41905: DOUBLE
41906: LD_INT 1
41908: DEC
41909: ST_TO_ADDR
41910: LD_INT 5
41912: PUSH
41913: FOR_TO
41914: IFFALSE 42073
// begin _x := ShiftX ( x , d , r + i ) ;
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: LD_VAR 0 4
41925: PPUSH
41926: LD_VAR 0 8
41930: PPUSH
41931: LD_VAR 0 9
41935: PUSH
41936: LD_VAR 0 10
41940: PLUS
41941: PPUSH
41942: CALL_OW 272
41946: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41947: LD_ADDR_VAR 0 7
41951: PUSH
41952: LD_VAR 0 6
41956: PPUSH
41957: LD_VAR 0 8
41961: PPUSH
41962: LD_VAR 0 9
41966: PUSH
41967: LD_VAR 0 10
41971: PLUS
41972: PPUSH
41973: CALL_OW 273
41977: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41978: LD_VAR 0 5
41982: PPUSH
41983: LD_VAR 0 7
41987: PPUSH
41988: CALL_OW 488
41992: IFFALSE 42027
41994: PUSH
41995: LD_VAR 0 5
41999: PPUSH
42000: LD_VAR 0 7
42004: PPUSH
42005: CALL_OW 428
42009: PPUSH
42010: CALL_OW 247
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: IN
42025: NOT
42026: AND
42027: IFFALSE 42071
// begin ComMoveXY ( unit , _x , _y ) ;
42029: LD_VAR 0 1
42033: PPUSH
42034: LD_VAR 0 5
42038: PPUSH
42039: LD_VAR 0 7
42043: PPUSH
42044: CALL_OW 111
// result := [ _x , _y ] ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_VAR 0 5
42057: PUSH
42058: LD_VAR 0 7
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: ST_TO_ADDR
// exit ;
42067: POP
42068: POP
42069: GO 42075
// end ; end ;
42071: GO 41913
42073: POP
42074: POP
// end ;
42075: LD_VAR 0 3
42079: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42080: LD_INT 0
42082: PPUSH
42083: PPUSH
42084: PPUSH
// result := 0 ;
42085: LD_ADDR_VAR 0 3
42089: PUSH
42090: LD_INT 0
42092: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42093: LD_VAR 0 1
42097: PUSH
42098: LD_INT 0
42100: LESS
42101: IFTRUE 42113
42103: PUSH
42104: LD_VAR 0 1
42108: PUSH
42109: LD_INT 8
42111: GREATER
42112: OR
42113: IFTRUE 42125
42115: PUSH
42116: LD_VAR 0 2
42120: PUSH
42121: LD_INT 0
42123: LESS
42124: OR
42125: IFTRUE 42137
42127: PUSH
42128: LD_VAR 0 2
42132: PUSH
42133: LD_INT 8
42135: GREATER
42136: OR
42137: IFFALSE 42141
// exit ;
42139: GO 42216
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42141: LD_ADDR_VAR 0 4
42145: PUSH
42146: LD_INT 22
42148: PUSH
42149: LD_VAR 0 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PPUSH
42158: CALL_OW 69
42162: PUSH
42163: FOR_IN
42164: IFFALSE 42214
// begin un := UnitShoot ( i ) ;
42166: LD_ADDR_VAR 0 5
42170: PUSH
42171: LD_VAR 0 4
42175: PPUSH
42176: CALL_OW 504
42180: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42181: LD_VAR 0 5
42185: PPUSH
42186: CALL_OW 255
42190: PUSH
42191: LD_VAR 0 1
42195: EQUAL
42196: IFFALSE 42212
// begin result := un ;
42198: LD_ADDR_VAR 0 3
42202: PUSH
42203: LD_VAR 0 5
42207: ST_TO_ADDR
// exit ;
42208: POP
42209: POP
42210: GO 42216
// end ; end ;
42212: GO 42163
42214: POP
42215: POP
// end ;
42216: LD_VAR 0 3
42220: RET
// export function GetCargoBay ( units ) ; begin
42221: LD_INT 0
42223: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42224: LD_ADDR_VAR 0 2
42228: PUSH
42229: LD_VAR 0 1
42233: PPUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 34
42239: PUSH
42240: LD_INT 12
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 34
42249: PUSH
42250: LD_INT 51
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 34
42259: PUSH
42260: LD_INT 32
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 34
42269: PUSH
42270: LD_INT 89
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: PPUSH
42284: CALL_OW 72
42288: ST_TO_ADDR
// end ;
42289: LD_VAR 0 2
42293: RET
// export function Negate ( value ) ; begin
42294: LD_INT 0
42296: PPUSH
// result := not value ;
42297: LD_ADDR_VAR 0 2
42301: PUSH
42302: LD_VAR 0 1
42306: NOT
42307: ST_TO_ADDR
// end ;
42308: LD_VAR 0 2
42312: RET
// export function Inc ( value ) ; begin
42313: LD_INT 0
42315: PPUSH
// result := value + 1 ;
42316: LD_ADDR_VAR 0 2
42320: PUSH
42321: LD_VAR 0 1
42325: PUSH
42326: LD_INT 1
42328: PLUS
42329: ST_TO_ADDR
// end ;
42330: LD_VAR 0 2
42334: RET
// export function Dec ( value ) ; begin
42335: LD_INT 0
42337: PPUSH
// result := value - 1 ;
42338: LD_ADDR_VAR 0 2
42342: PUSH
42343: LD_VAR 0 1
42347: PUSH
42348: LD_INT 1
42350: MINUS
42351: ST_TO_ADDR
// end ;
42352: LD_VAR 0 2
42356: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42357: LD_INT 0
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
42365: PPUSH
42366: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42367: LD_VAR 0 1
42371: PPUSH
42372: LD_VAR 0 2
42376: PPUSH
42377: CALL_OW 488
42381: NOT
42382: IFTRUE 42401
42384: PUSH
42385: LD_VAR 0 3
42389: PPUSH
42390: LD_VAR 0 4
42394: PPUSH
42395: CALL_OW 488
42399: NOT
42400: OR
42401: IFFALSE 42414
// begin result := - 1 ;
42403: LD_ADDR_VAR 0 5
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: ST_TO_ADDR
// exit ;
42412: GO 42649
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42414: LD_ADDR_VAR 0 12
42418: PUSH
42419: LD_VAR 0 1
42423: PPUSH
42424: LD_VAR 0 2
42428: PPUSH
42429: LD_VAR 0 3
42433: PPUSH
42434: LD_VAR 0 4
42438: PPUSH
42439: CALL 41485 0 4
42443: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42444: LD_ADDR_VAR 0 11
42448: PUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: LD_VAR 0 2
42458: PPUSH
42459: LD_VAR 0 12
42463: PUSH
42464: LD_INT 1
42466: ARRAY
42467: PPUSH
42468: LD_VAR 0 12
42472: PUSH
42473: LD_INT 2
42475: ARRAY
42476: PPUSH
42477: CALL_OW 298
42481: ST_TO_ADDR
// distance := 9999 ;
42482: LD_ADDR_VAR 0 10
42486: PUSH
42487: LD_INT 9999
42489: ST_TO_ADDR
// for i := 0 to 5 do
42490: LD_ADDR_VAR 0 6
42494: PUSH
42495: DOUBLE
42496: LD_INT 0
42498: DEC
42499: ST_TO_ADDR
42500: LD_INT 5
42502: PUSH
42503: FOR_TO
42504: IFFALSE 42647
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42506: LD_ADDR_VAR 0 7
42510: PUSH
42511: LD_VAR 0 1
42515: PPUSH
42516: LD_VAR 0 6
42520: PPUSH
42521: LD_VAR 0 11
42525: PPUSH
42526: CALL_OW 272
42530: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42531: LD_ADDR_VAR 0 8
42535: PUSH
42536: LD_VAR 0 2
42540: PPUSH
42541: LD_VAR 0 6
42545: PPUSH
42546: LD_VAR 0 11
42550: PPUSH
42551: CALL_OW 273
42555: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42556: LD_VAR 0 7
42560: PPUSH
42561: LD_VAR 0 8
42565: PPUSH
42566: CALL_OW 488
42570: NOT
42571: IFFALSE 42575
// continue ;
42573: GO 42503
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42575: LD_ADDR_VAR 0 9
42579: PUSH
42580: LD_VAR 0 12
42584: PUSH
42585: LD_INT 1
42587: ARRAY
42588: PPUSH
42589: LD_VAR 0 12
42593: PUSH
42594: LD_INT 2
42596: ARRAY
42597: PPUSH
42598: LD_VAR 0 7
42602: PPUSH
42603: LD_VAR 0 8
42607: PPUSH
42608: CALL_OW 298
42612: ST_TO_ADDR
// if tmp < distance then
42613: LD_VAR 0 9
42617: PUSH
42618: LD_VAR 0 10
42622: LESS
42623: IFFALSE 42645
// begin result := i ;
42625: LD_ADDR_VAR 0 5
42629: PUSH
42630: LD_VAR 0 6
42634: ST_TO_ADDR
// distance := tmp ;
42635: LD_ADDR_VAR 0 10
42639: PUSH
42640: LD_VAR 0 9
42644: ST_TO_ADDR
// end ; end ;
42645: GO 42503
42647: POP
42648: POP
// end ;
42649: LD_VAR 0 5
42653: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42654: LD_INT 0
42656: PPUSH
42657: PPUSH
// if not driver or not IsInUnit ( driver ) then
42658: LD_VAR 0 1
42662: NOT
42663: IFTRUE 42677
42665: PUSH
42666: LD_VAR 0 1
42670: PPUSH
42671: CALL_OW 310
42675: NOT
42676: OR
42677: IFFALSE 42681
// exit ;
42679: GO 42771
// vehicle := IsInUnit ( driver ) ;
42681: LD_ADDR_VAR 0 3
42685: PUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 310
42695: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42696: LD_VAR 0 1
42700: PPUSH
42701: LD_STRING \
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: PUSH
42731: LD_STRING E
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_VAR 0 3
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PPUSH
42767: CALL_OW 446
// end ;
42771: LD_VAR 0 2
42775: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42776: LD_INT 0
42778: PPUSH
42779: PPUSH
// if not driver or not IsInUnit ( driver ) then
42780: LD_VAR 0 1
42784: NOT
42785: IFTRUE 42799
42787: PUSH
42788: LD_VAR 0 1
42792: PPUSH
42793: CALL_OW 310
42797: NOT
42798: OR
42799: IFFALSE 42803
// exit ;
42801: GO 42893
// vehicle := IsInUnit ( driver ) ;
42803: LD_ADDR_VAR 0 3
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 310
42817: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42818: LD_VAR 0 1
42822: PPUSH
42823: LD_STRING \
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: PUSH
42853: LD_STRING E
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_VAR 0 3
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PPUSH
42889: CALL_OW 447
// end ;
42893: LD_VAR 0 2
42897: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
42902: PPUSH
// tmp := [ ] ;
42903: LD_ADDR_VAR 0 5
42907: PUSH
42908: EMPTY
42909: ST_TO_ADDR
// for i in units do
42910: LD_ADDR_VAR 0 4
42914: PUSH
42915: LD_VAR 0 1
42919: PUSH
42920: FOR_IN
42921: IFFALSE 42959
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42923: LD_ADDR_VAR 0 5
42927: PUSH
42928: LD_VAR 0 5
42932: PPUSH
42933: LD_VAR 0 5
42937: PUSH
42938: LD_INT 1
42940: PLUS
42941: PPUSH
42942: LD_VAR 0 4
42946: PPUSH
42947: CALL_OW 256
42951: PPUSH
42952: CALL_OW 2
42956: ST_TO_ADDR
42957: GO 42920
42959: POP
42960: POP
// if not tmp then
42961: LD_VAR 0 5
42965: NOT
42966: IFFALSE 42970
// exit ;
42968: GO 43018
// if asc then
42970: LD_VAR 0 2
42974: IFFALSE 42998
// result := SortListByListAsc ( units , tmp ) else
42976: LD_ADDR_VAR 0 3
42980: PUSH
42981: LD_VAR 0 1
42985: PPUSH
42986: LD_VAR 0 5
42990: PPUSH
42991: CALL_OW 76
42995: ST_TO_ADDR
42996: GO 43018
// result := SortListByListDesc ( units , tmp ) ;
42998: LD_ADDR_VAR 0 3
43002: PUSH
43003: LD_VAR 0 1
43007: PPUSH
43008: LD_VAR 0 5
43012: PPUSH
43013: CALL_OW 77
43017: ST_TO_ADDR
// end ;
43018: LD_VAR 0 3
43022: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43023: LD_INT 0
43025: PPUSH
43026: PPUSH
// task := GetTaskList ( mech ) ;
43027: LD_ADDR_VAR 0 4
43031: PUSH
43032: LD_VAR 0 1
43036: PPUSH
43037: CALL_OW 437
43041: ST_TO_ADDR
// if not task then
43042: LD_VAR 0 4
43046: NOT
43047: IFFALSE 43051
// exit ;
43049: GO 43095
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43051: LD_ADDR_VAR 0 3
43055: PUSH
43056: LD_VAR 0 4
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PUSH
43065: LD_INT 1
43067: ARRAY
43068: PUSH
43069: LD_STRING r
43071: EQUAL
43072: IFFALSE 43094
43074: PUSH
43075: LD_VAR 0 4
43079: PUSH
43080: LD_INT 1
43082: ARRAY
43083: PUSH
43084: LD_INT 4
43086: ARRAY
43087: PUSH
43088: LD_VAR 0 2
43092: EQUAL
43093: AND
43094: ST_TO_ADDR
// end ;
43095: LD_VAR 0 3
43099: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43100: LD_INT 0
43102: PPUSH
// SetDir ( unit , d ) ;
43103: LD_VAR 0 1
43107: PPUSH
43108: LD_VAR 0 4
43112: PPUSH
43113: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43117: LD_ADDR_VAR 0 6
43121: PUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: LD_VAR 0 2
43131: PPUSH
43132: LD_VAR 0 3
43136: PPUSH
43137: LD_VAR 0 5
43141: PPUSH
43142: CALL_OW 48
43146: ST_TO_ADDR
// end ;
43147: LD_VAR 0 6
43151: RET
// export function ToNaturalNumber ( number ) ; begin
43152: LD_INT 0
43154: PPUSH
// result := number div 1 ;
43155: LD_ADDR_VAR 0 2
43159: PUSH
43160: LD_VAR 0 1
43164: PUSH
43165: LD_INT 1
43167: DIV
43168: ST_TO_ADDR
// if number < 0 then
43169: LD_VAR 0 1
43173: PUSH
43174: LD_INT 0
43176: LESS
43177: IFFALSE 43187
// result := 0 ;
43179: LD_ADDR_VAR 0 2
43183: PUSH
43184: LD_INT 0
43186: ST_TO_ADDR
// end ;
43187: LD_VAR 0 2
43191: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43192: LD_INT 0
43194: PPUSH
43195: PPUSH
43196: PPUSH
// if not buildings then
43197: LD_VAR 0 1
43201: NOT
43202: IFFALSE 43206
// exit ;
43204: GO 43321
// tmp := [ ] ;
43206: LD_ADDR_VAR 0 5
43210: PUSH
43211: EMPTY
43212: ST_TO_ADDR
// for b in buildings do
43213: LD_ADDR_VAR 0 4
43217: PUSH
43218: LD_VAR 0 1
43222: PUSH
43223: FOR_IN
43224: IFFALSE 43262
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43226: LD_ADDR_VAR 0 5
43230: PUSH
43231: LD_VAR 0 5
43235: PPUSH
43236: LD_VAR 0 5
43240: PUSH
43241: LD_INT 1
43243: PLUS
43244: PPUSH
43245: LD_VAR 0 4
43249: PPUSH
43250: CALL_OW 266
43254: PPUSH
43255: CALL_OW 1
43259: ST_TO_ADDR
43260: GO 43223
43262: POP
43263: POP
// if not tmp then
43264: LD_VAR 0 5
43268: NOT
43269: IFFALSE 43273
// exit ;
43271: GO 43321
// if asc then
43273: LD_VAR 0 2
43277: IFFALSE 43301
// result := SortListByListAsc ( buildings , tmp ) else
43279: LD_ADDR_VAR 0 3
43283: PUSH
43284: LD_VAR 0 1
43288: PPUSH
43289: LD_VAR 0 5
43293: PPUSH
43294: CALL_OW 76
43298: ST_TO_ADDR
43299: GO 43321
// result := SortListByListDesc ( buildings , tmp ) ;
43301: LD_ADDR_VAR 0 3
43305: PUSH
43306: LD_VAR 0 1
43310: PPUSH
43311: LD_VAR 0 5
43315: PPUSH
43316: CALL_OW 77
43320: ST_TO_ADDR
// end ;
43321: LD_VAR 0 3
43325: RET
// export function SortByClass ( units , class ) ; var un ; begin
43326: LD_INT 0
43328: PPUSH
43329: PPUSH
// if not units or not class then
43330: LD_VAR 0 1
43334: NOT
43335: IFTRUE 43344
43337: PUSH
43338: LD_VAR 0 2
43342: NOT
43343: OR
43344: IFFALSE 43348
// exit ;
43346: GO 43443
// result := [ ] ;
43348: LD_ADDR_VAR 0 3
43352: PUSH
43353: EMPTY
43354: ST_TO_ADDR
// for un in units do
43355: LD_ADDR_VAR 0 4
43359: PUSH
43360: LD_VAR 0 1
43364: PUSH
43365: FOR_IN
43366: IFFALSE 43441
// if GetClass ( un ) = class then
43368: LD_VAR 0 4
43372: PPUSH
43373: CALL_OW 257
43377: PUSH
43378: LD_VAR 0 2
43382: EQUAL
43383: IFFALSE 43410
// result := Insert ( result , 1 , un ) else
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_VAR 0 3
43394: PPUSH
43395: LD_INT 1
43397: PPUSH
43398: LD_VAR 0 4
43402: PPUSH
43403: CALL_OW 2
43407: ST_TO_ADDR
43408: GO 43439
// result := Replace ( result , result + 1 , un ) ;
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_VAR 0 3
43419: PPUSH
43420: LD_VAR 0 3
43424: PUSH
43425: LD_INT 1
43427: PLUS
43428: PPUSH
43429: LD_VAR 0 4
43433: PPUSH
43434: CALL_OW 1
43438: ST_TO_ADDR
43439: GO 43365
43441: POP
43442: POP
// end ;
43443: LD_VAR 0 3
43447: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43448: LD_INT 0
43450: PPUSH
43451: PPUSH
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
// result := [ ] ;
43457: LD_ADDR_VAR 0 4
43461: PUSH
43462: EMPTY
43463: ST_TO_ADDR
// if x - r < 0 then
43464: LD_VAR 0 1
43468: PUSH
43469: LD_VAR 0 3
43473: MINUS
43474: PUSH
43475: LD_INT 0
43477: LESS
43478: IFFALSE 43490
// min_x := 0 else
43480: LD_ADDR_VAR 0 8
43484: PUSH
43485: LD_INT 0
43487: ST_TO_ADDR
43488: GO 43506
// min_x := x - r ;
43490: LD_ADDR_VAR 0 8
43494: PUSH
43495: LD_VAR 0 1
43499: PUSH
43500: LD_VAR 0 3
43504: MINUS
43505: ST_TO_ADDR
// if y - r < 0 then
43506: LD_VAR 0 2
43510: PUSH
43511: LD_VAR 0 3
43515: MINUS
43516: PUSH
43517: LD_INT 0
43519: LESS
43520: IFFALSE 43532
// min_y := 0 else
43522: LD_ADDR_VAR 0 7
43526: PUSH
43527: LD_INT 0
43529: ST_TO_ADDR
43530: GO 43548
// min_y := y - r ;
43532: LD_ADDR_VAR 0 7
43536: PUSH
43537: LD_VAR 0 2
43541: PUSH
43542: LD_VAR 0 3
43546: MINUS
43547: ST_TO_ADDR
// max_x := x + r ;
43548: LD_ADDR_VAR 0 9
43552: PUSH
43553: LD_VAR 0 1
43557: PUSH
43558: LD_VAR 0 3
43562: PLUS
43563: ST_TO_ADDR
// max_y := y + r ;
43564: LD_ADDR_VAR 0 10
43568: PUSH
43569: LD_VAR 0 2
43573: PUSH
43574: LD_VAR 0 3
43578: PLUS
43579: ST_TO_ADDR
// for _x = min_x to max_x do
43580: LD_ADDR_VAR 0 5
43584: PUSH
43585: DOUBLE
43586: LD_VAR 0 8
43590: DEC
43591: ST_TO_ADDR
43592: LD_VAR 0 9
43596: PUSH
43597: FOR_TO
43598: IFFALSE 43699
// for _y = min_y to max_y do
43600: LD_ADDR_VAR 0 6
43604: PUSH
43605: DOUBLE
43606: LD_VAR 0 7
43610: DEC
43611: ST_TO_ADDR
43612: LD_VAR 0 10
43616: PUSH
43617: FOR_TO
43618: IFFALSE 43695
// begin if not ValidHex ( _x , _y ) then
43620: LD_VAR 0 5
43624: PPUSH
43625: LD_VAR 0 6
43629: PPUSH
43630: CALL_OW 488
43634: NOT
43635: IFFALSE 43639
// continue ;
43637: GO 43617
// if GetResourceTypeXY ( _x , _y ) then
43639: LD_VAR 0 5
43643: PPUSH
43644: LD_VAR 0 6
43648: PPUSH
43649: CALL_OW 283
43653: IFFALSE 43693
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43655: LD_ADDR_VAR 0 4
43659: PUSH
43660: LD_VAR 0 4
43664: PPUSH
43665: LD_VAR 0 4
43669: PUSH
43670: LD_INT 1
43672: PLUS
43673: PPUSH
43674: LD_VAR 0 5
43678: PUSH
43679: LD_VAR 0 6
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 1
43692: ST_TO_ADDR
// end ;
43693: GO 43617
43695: POP
43696: POP
43697: GO 43597
43699: POP
43700: POP
// end ;
43701: LD_VAR 0 4
43705: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43706: LD_INT 0
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
// if not units then
43716: LD_VAR 0 1
43720: NOT
43721: IFFALSE 43725
// exit ;
43723: GO 44257
// result := UnitFilter ( units , [ f_ok ] ) ;
43725: LD_ADDR_VAR 0 3
43729: PUSH
43730: LD_VAR 0 1
43734: PPUSH
43735: LD_INT 50
43737: PUSH
43738: EMPTY
43739: LIST
43740: PPUSH
43741: CALL_OW 72
43745: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43746: LD_ADDR_VAR 0 8
43750: PUSH
43751: LD_VAR 0 1
43755: PUSH
43756: LD_INT 1
43758: ARRAY
43759: PPUSH
43760: CALL_OW 255
43764: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43765: LD_ADDR_VAR 0 10
43769: PUSH
43770: LD_INT 29
43772: PUSH
43773: LD_INT 91
43775: PUSH
43776: LD_INT 49
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// if not result then
43784: LD_VAR 0 3
43788: NOT
43789: IFFALSE 43793
// exit ;
43791: GO 44257
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43793: LD_ADDR_VAR 0 5
43797: PUSH
43798: LD_INT 81
43800: PUSH
43801: LD_VAR 0 8
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PPUSH
43810: CALL_OW 69
43814: ST_TO_ADDR
// for i in result do
43815: LD_ADDR_VAR 0 4
43819: PUSH
43820: LD_VAR 0 3
43824: PUSH
43825: FOR_IN
43826: IFFALSE 44255
// begin tag := GetTag ( i ) + 1 ;
43828: LD_ADDR_VAR 0 9
43832: PUSH
43833: LD_VAR 0 4
43837: PPUSH
43838: CALL_OW 110
43842: PUSH
43843: LD_INT 1
43845: PLUS
43846: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43847: LD_ADDR_VAR 0 7
43851: PUSH
43852: LD_VAR 0 4
43856: PPUSH
43857: CALL_OW 250
43861: PPUSH
43862: LD_VAR 0 4
43866: PPUSH
43867: CALL_OW 251
43871: PPUSH
43872: LD_INT 4
43874: PPUSH
43875: CALL 43448 0 3
43879: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43880: LD_VAR 0 4
43884: PPUSH
43885: CALL_OW 247
43889: PUSH
43890: LD_INT 2
43892: EQUAL
43893: IFFALSE 43905
43895: PUSH
43896: LD_VAR 0 7
43900: PUSH
43901: LD_INT 2
43903: GREATER
43904: AND
43905: IFFALSE 43925
43907: PUSH
43908: LD_VAR 0 4
43912: PPUSH
43913: CALL_OW 264
43917: PUSH
43918: LD_VAR 0 10
43922: IN
43923: NOT
43924: AND
43925: IFFALSE 43964
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43927: LD_VAR 0 4
43931: PPUSH
43932: LD_VAR 0 7
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PUSH
43941: LD_INT 1
43943: ARRAY
43944: PPUSH
43945: LD_VAR 0 7
43949: PUSH
43950: LD_INT 1
43952: ARRAY
43953: PUSH
43954: LD_INT 2
43956: ARRAY
43957: PPUSH
43958: CALL_OW 116
43962: GO 44253
// if path > tag then
43964: LD_VAR 0 2
43968: PUSH
43969: LD_VAR 0 9
43973: GREATER
43974: IFFALSE 44182
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43976: LD_ADDR_VAR 0 6
43980: PUSH
43981: LD_VAR 0 5
43985: PPUSH
43986: LD_INT 91
43988: PUSH
43989: LD_VAR 0 4
43993: PUSH
43994: LD_INT 8
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: PPUSH
44002: CALL_OW 72
44006: ST_TO_ADDR
// if nearEnemy then
44007: LD_VAR 0 6
44011: IFFALSE 44080
// begin if GetWeapon ( i ) = ru_time_lapser then
44013: LD_VAR 0 4
44017: PPUSH
44018: CALL_OW 264
44022: PUSH
44023: LD_INT 49
44025: EQUAL
44026: IFFALSE 44054
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44028: LD_VAR 0 4
44032: PPUSH
44033: LD_VAR 0 6
44037: PPUSH
44038: LD_VAR 0 4
44042: PPUSH
44043: CALL_OW 74
44047: PPUSH
44048: CALL_OW 112
44052: GO 44078
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44054: LD_VAR 0 4
44058: PPUSH
44059: LD_VAR 0 6
44063: PPUSH
44064: LD_VAR 0 4
44068: PPUSH
44069: CALL_OW 74
44073: PPUSH
44074: CALL 45338 0 2
// end else
44078: GO 44180
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44080: LD_VAR 0 4
44084: PPUSH
44085: LD_VAR 0 2
44089: PUSH
44090: LD_VAR 0 9
44094: ARRAY
44095: PUSH
44096: LD_INT 1
44098: ARRAY
44099: PPUSH
44100: LD_VAR 0 2
44104: PUSH
44105: LD_VAR 0 9
44109: ARRAY
44110: PUSH
44111: LD_INT 2
44113: ARRAY
44114: PPUSH
44115: CALL_OW 297
44119: PUSH
44120: LD_INT 6
44122: GREATER
44123: IFFALSE 44166
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44125: LD_VAR 0 4
44129: PPUSH
44130: LD_VAR 0 2
44134: PUSH
44135: LD_VAR 0 9
44139: ARRAY
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PPUSH
44145: LD_VAR 0 2
44149: PUSH
44150: LD_VAR 0 9
44154: ARRAY
44155: PUSH
44156: LD_INT 2
44158: ARRAY
44159: PPUSH
44160: CALL_OW 114
44164: GO 44180
// SetTag ( i , tag ) ;
44166: LD_VAR 0 4
44170: PPUSH
44171: LD_VAR 0 9
44175: PPUSH
44176: CALL_OW 109
// end else
44180: GO 44253
// if enemy then
44182: LD_VAR 0 5
44186: IFFALSE 44253
// begin if GetWeapon ( i ) = ru_time_lapser then
44188: LD_VAR 0 4
44192: PPUSH
44193: CALL_OW 264
44197: PUSH
44198: LD_INT 49
44200: EQUAL
44201: IFFALSE 44229
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44203: LD_VAR 0 4
44207: PPUSH
44208: LD_VAR 0 5
44212: PPUSH
44213: LD_VAR 0 4
44217: PPUSH
44218: CALL_OW 74
44222: PPUSH
44223: CALL_OW 112
44227: GO 44253
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44229: LD_VAR 0 4
44233: PPUSH
44234: LD_VAR 0 5
44238: PPUSH
44239: LD_VAR 0 4
44243: PPUSH
44244: CALL_OW 74
44248: PPUSH
44249: CALL 45338 0 2
// end ; end ;
44253: GO 43825
44255: POP
44256: POP
// end ;
44257: LD_VAR 0 3
44261: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44262: LD_INT 0
44264: PPUSH
44265: PPUSH
44266: PPUSH
// if not unit or IsInUnit ( unit ) then
44267: LD_VAR 0 1
44271: NOT
44272: IFTRUE 44285
44274: PUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 310
44284: OR
44285: IFFALSE 44289
// exit ;
44287: GO 44380
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44289: LD_ADDR_VAR 0 4
44293: PUSH
44294: LD_VAR 0 1
44298: PPUSH
44299: CALL_OW 250
44303: PPUSH
44304: LD_VAR 0 2
44308: PPUSH
44309: LD_INT 1
44311: PPUSH
44312: CALL_OW 272
44316: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44317: LD_ADDR_VAR 0 5
44321: PUSH
44322: LD_VAR 0 1
44326: PPUSH
44327: CALL_OW 251
44331: PPUSH
44332: LD_VAR 0 2
44336: PPUSH
44337: LD_INT 1
44339: PPUSH
44340: CALL_OW 273
44344: ST_TO_ADDR
// if ValidHex ( x , y ) then
44345: LD_VAR 0 4
44349: PPUSH
44350: LD_VAR 0 5
44354: PPUSH
44355: CALL_OW 488
44359: IFFALSE 44380
// ComTurnXY ( unit , x , y ) ;
44361: LD_VAR 0 1
44365: PPUSH
44366: LD_VAR 0 4
44370: PPUSH
44371: LD_VAR 0 5
44375: PPUSH
44376: CALL_OW 118
// end ;
44380: LD_VAR 0 3
44384: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44385: LD_INT 0
44387: PPUSH
44388: PPUSH
// result := false ;
44389: LD_ADDR_VAR 0 3
44393: PUSH
44394: LD_INT 0
44396: ST_TO_ADDR
// if not units then
44397: LD_VAR 0 2
44401: NOT
44402: IFFALSE 44406
// exit ;
44404: GO 44451
// for i in units do
44406: LD_ADDR_VAR 0 4
44410: PUSH
44411: LD_VAR 0 2
44415: PUSH
44416: FOR_IN
44417: IFFALSE 44449
// if See ( side , i ) then
44419: LD_VAR 0 1
44423: PPUSH
44424: LD_VAR 0 4
44428: PPUSH
44429: CALL_OW 292
44433: IFFALSE 44447
// begin result := true ;
44435: LD_ADDR_VAR 0 3
44439: PUSH
44440: LD_INT 1
44442: ST_TO_ADDR
// exit ;
44443: POP
44444: POP
44445: GO 44451
// end ;
44447: GO 44416
44449: POP
44450: POP
// end ;
44451: LD_VAR 0 3
44455: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44456: LD_INT 0
44458: PPUSH
44459: PPUSH
44460: PPUSH
44461: PPUSH
// if not unit or not points then
44462: LD_VAR 0 1
44466: NOT
44467: IFTRUE 44476
44469: PUSH
44470: LD_VAR 0 2
44474: NOT
44475: OR
44476: IFFALSE 44480
// exit ;
44478: GO 44570
// dist := 99999 ;
44480: LD_ADDR_VAR 0 5
44484: PUSH
44485: LD_INT 99999
44487: ST_TO_ADDR
// for i in points do
44488: LD_ADDR_VAR 0 4
44492: PUSH
44493: LD_VAR 0 2
44497: PUSH
44498: FOR_IN
44499: IFFALSE 44568
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44501: LD_ADDR_VAR 0 6
44505: PUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: LD_VAR 0 4
44515: PUSH
44516: LD_INT 1
44518: ARRAY
44519: PPUSH
44520: LD_VAR 0 4
44524: PUSH
44525: LD_INT 2
44527: ARRAY
44528: PPUSH
44529: CALL_OW 297
44533: ST_TO_ADDR
// if tmpDist < dist then
44534: LD_VAR 0 6
44538: PUSH
44539: LD_VAR 0 5
44543: LESS
44544: IFFALSE 44566
// begin result := i ;
44546: LD_ADDR_VAR 0 3
44550: PUSH
44551: LD_VAR 0 4
44555: ST_TO_ADDR
// dist := tmpDist ;
44556: LD_ADDR_VAR 0 5
44560: PUSH
44561: LD_VAR 0 6
44565: ST_TO_ADDR
// end ; end ;
44566: GO 44498
44568: POP
44569: POP
// end ;
44570: LD_VAR 0 3
44574: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44575: LD_INT 0
44577: PPUSH
// uc_side := side ;
44578: LD_ADDR_OWVAR 20
44582: PUSH
44583: LD_VAR 0 1
44587: ST_TO_ADDR
// uc_nation := 3 ;
44588: LD_ADDR_OWVAR 21
44592: PUSH
44593: LD_INT 3
44595: ST_TO_ADDR
// vc_chassis := 25 ;
44596: LD_ADDR_OWVAR 37
44600: PUSH
44601: LD_INT 25
44603: ST_TO_ADDR
// vc_engine := engine_siberite ;
44604: LD_ADDR_OWVAR 39
44608: PUSH
44609: LD_INT 3
44611: ST_TO_ADDR
// vc_control := control_computer ;
44612: LD_ADDR_OWVAR 38
44616: PUSH
44617: LD_INT 3
44619: ST_TO_ADDR
// vc_weapon := 59 ;
44620: LD_ADDR_OWVAR 40
44624: PUSH
44625: LD_INT 59
44627: ST_TO_ADDR
// result := CreateVehicle ;
44628: LD_ADDR_VAR 0 5
44632: PUSH
44633: CALL_OW 45
44637: ST_TO_ADDR
// SetDir ( result , d ) ;
44638: LD_VAR 0 5
44642: PPUSH
44643: LD_VAR 0 4
44647: PPUSH
44648: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44652: LD_VAR 0 5
44656: PPUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: LD_VAR 0 3
44666: PPUSH
44667: LD_INT 0
44669: PPUSH
44670: CALL_OW 48
// end ;
44674: LD_VAR 0 5
44678: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44679: LD_INT 0
44681: PPUSH
44682: PPUSH
44683: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44684: LD_ADDR_VAR 0 2
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44707: LD_VAR 0 1
44711: NOT
44712: IFTRUE 44745
44714: PUSH
44715: LD_VAR 0 1
44719: PPUSH
44720: CALL_OW 264
44724: PUSH
44725: LD_INT 12
44727: PUSH
44728: LD_INT 51
44730: PUSH
44731: LD_INT 32
44733: PUSH
44734: LD_INT 89
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: IN
44743: NOT
44744: OR
44745: IFFALSE 44749
// exit ;
44747: GO 44847
// for i := 1 to 3 do
44749: LD_ADDR_VAR 0 3
44753: PUSH
44754: DOUBLE
44755: LD_INT 1
44757: DEC
44758: ST_TO_ADDR
44759: LD_INT 3
44761: PUSH
44762: FOR_TO
44763: IFFALSE 44845
// begin tmp := GetCargo ( cargo , i ) ;
44765: LD_ADDR_VAR 0 4
44769: PUSH
44770: LD_VAR 0 1
44774: PPUSH
44775: LD_VAR 0 3
44779: PPUSH
44780: CALL_OW 289
44784: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44785: LD_ADDR_VAR 0 2
44789: PUSH
44790: LD_VAR 0 2
44794: PPUSH
44795: LD_VAR 0 3
44799: PPUSH
44800: LD_VAR 0 4
44804: PPUSH
44805: CALL_OW 1
44809: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44810: LD_ADDR_VAR 0 2
44814: PUSH
44815: LD_VAR 0 2
44819: PPUSH
44820: LD_INT 4
44822: PPUSH
44823: LD_VAR 0 2
44827: PUSH
44828: LD_INT 4
44830: ARRAY
44831: PUSH
44832: LD_VAR 0 4
44836: PLUS
44837: PPUSH
44838: CALL_OW 1
44842: ST_TO_ADDR
// end ;
44843: GO 44762
44845: POP
44846: POP
// end ;
44847: LD_VAR 0 2
44851: RET
// export function Length ( array ) ; begin
44852: LD_INT 0
44854: PPUSH
// result := array + 0 ;
44855: LD_ADDR_VAR 0 2
44859: PUSH
44860: LD_VAR 0 1
44864: PUSH
44865: LD_INT 0
44867: PLUS
44868: ST_TO_ADDR
// end ;
44869: LD_VAR 0 2
44873: RET
// export function PrepareArray ( array ) ; begin
44874: LD_INT 0
44876: PPUSH
// result := array diff 0 ;
44877: LD_ADDR_VAR 0 2
44881: PUSH
44882: LD_VAR 0 1
44886: PUSH
44887: LD_INT 0
44889: DIFF
44890: ST_TO_ADDR
// if not result [ 1 ] then
44891: LD_VAR 0 2
44895: PUSH
44896: LD_INT 1
44898: ARRAY
44899: NOT
44900: IFFALSE 44920
// result := Delete ( result , 1 ) ;
44902: LD_ADDR_VAR 0 2
44906: PUSH
44907: LD_VAR 0 2
44911: PPUSH
44912: LD_INT 1
44914: PPUSH
44915: CALL_OW 3
44919: ST_TO_ADDR
// end ;
44920: LD_VAR 0 2
44924: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44925: LD_INT 0
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
// sibRocketRange := 25 ;
44931: LD_ADDR_VAR 0 6
44935: PUSH
44936: LD_INT 25
44938: ST_TO_ADDR
// result := false ;
44939: LD_ADDR_VAR 0 4
44943: PUSH
44944: LD_INT 0
44946: ST_TO_ADDR
// for i := 0 to 5 do
44947: LD_ADDR_VAR 0 5
44951: PUSH
44952: DOUBLE
44953: LD_INT 0
44955: DEC
44956: ST_TO_ADDR
44957: LD_INT 5
44959: PUSH
44960: FOR_TO
44961: IFFALSE 45028
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44963: LD_VAR 0 1
44967: PPUSH
44968: LD_VAR 0 5
44972: PPUSH
44973: LD_VAR 0 6
44977: PPUSH
44978: CALL_OW 272
44982: PPUSH
44983: LD_VAR 0 2
44987: PPUSH
44988: LD_VAR 0 5
44992: PPUSH
44993: LD_VAR 0 6
44997: PPUSH
44998: CALL_OW 273
45002: PPUSH
45003: LD_VAR 0 3
45007: PPUSH
45008: CALL_OW 309
45012: IFFALSE 45026
// begin result := true ;
45014: LD_ADDR_VAR 0 4
45018: PUSH
45019: LD_INT 1
45021: ST_TO_ADDR
// exit ;
45022: POP
45023: POP
45024: GO 45030
// end ;
45026: GO 44960
45028: POP
45029: POP
// end ;
45030: LD_VAR 0 4
45034: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45035: LD_INT 0
45037: PPUSH
45038: PPUSH
45039: PPUSH
// if btype = b_depot then
45040: LD_VAR 0 2
45044: PUSH
45045: LD_INT 0
45047: EQUAL
45048: IFFALSE 45060
// begin result := true ;
45050: LD_ADDR_VAR 0 3
45054: PUSH
45055: LD_INT 1
45057: ST_TO_ADDR
// exit ;
45058: GO 45180
// end ; pom := GetBase ( depot ) ;
45060: LD_ADDR_VAR 0 4
45064: PUSH
45065: LD_VAR 0 1
45069: PPUSH
45070: CALL_OW 274
45074: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45075: LD_ADDR_VAR 0 5
45079: PUSH
45080: LD_VAR 0 2
45084: PPUSH
45085: LD_VAR 0 1
45089: PPUSH
45090: CALL_OW 248
45094: PPUSH
45095: CALL_OW 450
45099: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45100: LD_ADDR_VAR 0 3
45104: PUSH
45105: LD_VAR 0 4
45109: PPUSH
45110: LD_INT 1
45112: PPUSH
45113: CALL_OW 275
45117: PUSH
45118: LD_VAR 0 5
45122: PUSH
45123: LD_INT 1
45125: ARRAY
45126: GREATEREQUAL
45127: IFFALSE 45153
45129: PUSH
45130: LD_VAR 0 4
45134: PPUSH
45135: LD_INT 2
45137: PPUSH
45138: CALL_OW 275
45142: PUSH
45143: LD_VAR 0 5
45147: PUSH
45148: LD_INT 2
45150: ARRAY
45151: GREATEREQUAL
45152: AND
45153: IFFALSE 45179
45155: PUSH
45156: LD_VAR 0 4
45160: PPUSH
45161: LD_INT 3
45163: PPUSH
45164: CALL_OW 275
45168: PUSH
45169: LD_VAR 0 5
45173: PUSH
45174: LD_INT 3
45176: ARRAY
45177: GREATEREQUAL
45178: AND
45179: ST_TO_ADDR
// end ;
45180: LD_VAR 0 3
45184: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45185: LD_INT 0
45187: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45188: LD_VAR 0 1
45192: PPUSH
45193: LD_VAR 0 2
45197: PPUSH
45198: LD_INT 0
45200: PPUSH
45201: LD_INT 0
45203: PPUSH
45204: LD_INT 1
45206: PPUSH
45207: LD_INT 0
45209: PPUSH
45210: CALL_OW 587
// end ;
45214: LD_VAR 0 3
45218: RET
// export function CenterOnNow ( unit ) ; begin
45219: LD_INT 0
45221: PPUSH
// result := IsInUnit ( unit ) ;
45222: LD_ADDR_VAR 0 2
45226: PUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 310
45236: ST_TO_ADDR
// if not result then
45237: LD_VAR 0 2
45241: NOT
45242: IFFALSE 45254
// result := unit ;
45244: LD_ADDR_VAR 0 2
45248: PUSH
45249: LD_VAR 0 1
45253: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45254: LD_VAR 0 1
45258: PPUSH
45259: CALL_OW 87
// end ;
45263: LD_VAR 0 2
45267: RET
// export function ComMoveHex ( unit , hex ) ; begin
45268: LD_INT 0
45270: PPUSH
// if not hex then
45271: LD_VAR 0 2
45275: NOT
45276: IFFALSE 45280
// exit ;
45278: GO 45333
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45280: LD_VAR 0 2
45284: PUSH
45285: LD_INT 1
45287: ARRAY
45288: PPUSH
45289: LD_VAR 0 2
45293: PUSH
45294: LD_INT 2
45296: ARRAY
45297: PPUSH
45298: CALL_OW 428
45302: IFFALSE 45306
// exit ;
45304: GO 45333
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45306: LD_VAR 0 1
45310: PPUSH
45311: LD_VAR 0 2
45315: PUSH
45316: LD_INT 1
45318: ARRAY
45319: PPUSH
45320: LD_VAR 0 2
45324: PUSH
45325: LD_INT 2
45327: ARRAY
45328: PPUSH
45329: CALL_OW 111
// end ;
45333: LD_VAR 0 3
45337: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45338: LD_INT 0
45340: PPUSH
45341: PPUSH
45342: PPUSH
// if not unit or not enemy then
45343: LD_VAR 0 1
45347: NOT
45348: IFTRUE 45357
45350: PUSH
45351: LD_VAR 0 2
45355: NOT
45356: OR
45357: IFFALSE 45361
// exit ;
45359: GO 45487
// x := GetX ( enemy ) ;
45361: LD_ADDR_VAR 0 4
45365: PUSH
45366: LD_VAR 0 2
45370: PPUSH
45371: CALL_OW 250
45375: ST_TO_ADDR
// y := GetY ( enemy ) ;
45376: LD_ADDR_VAR 0 5
45380: PUSH
45381: LD_VAR 0 2
45385: PPUSH
45386: CALL_OW 251
45390: ST_TO_ADDR
// if ValidHex ( x , y ) then
45391: LD_VAR 0 4
45395: PPUSH
45396: LD_VAR 0 5
45400: PPUSH
45401: CALL_OW 488
45405: IFFALSE 45487
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45407: LD_VAR 0 2
45411: PPUSH
45412: CALL_OW 247
45416: PUSH
45417: LD_INT 3
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: IN
45427: IFTRUE 45450
45429: PUSH
45430: LD_VAR 0 1
45434: PPUSH
45435: CALL_OW 255
45439: PPUSH
45440: LD_VAR 0 2
45444: PPUSH
45445: CALL_OW 292
45449: OR
45450: IFFALSE 45468
// ComAttackUnit ( unit , enemy ) else
45452: LD_VAR 0 1
45456: PPUSH
45457: LD_VAR 0 2
45461: PPUSH
45462: CALL_OW 115
45466: GO 45487
// ComAgressiveMove ( unit , x , y ) ;
45468: LD_VAR 0 1
45472: PPUSH
45473: LD_VAR 0 4
45477: PPUSH
45478: LD_VAR 0 5
45482: PPUSH
45483: CALL_OW 114
// end ;
45487: LD_VAR 0 3
45491: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45492: LD_INT 0
45494: PPUSH
45495: PPUSH
45496: PPUSH
// list := AreaToList ( area , 0 ) ;
45497: LD_ADDR_VAR 0 5
45501: PUSH
45502: LD_VAR 0 1
45506: PPUSH
45507: LD_INT 0
45509: PPUSH
45510: CALL_OW 517
45514: ST_TO_ADDR
// if not list then
45515: LD_VAR 0 5
45519: NOT
45520: IFFALSE 45524
// exit ;
45522: GO 45654
// if all then
45524: LD_VAR 0 2
45528: IFFALSE 45616
// begin for i := 1 to list [ 1 ] do
45530: LD_ADDR_VAR 0 4
45534: PUSH
45535: DOUBLE
45536: LD_INT 1
45538: DEC
45539: ST_TO_ADDR
45540: LD_VAR 0 5
45544: PUSH
45545: LD_INT 1
45547: ARRAY
45548: PUSH
45549: FOR_TO
45550: IFFALSE 45612
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45552: LD_ADDR_VAR 0 3
45556: PUSH
45557: LD_VAR 0 3
45561: PPUSH
45562: LD_VAR 0 3
45566: PUSH
45567: LD_INT 1
45569: PLUS
45570: PPUSH
45571: LD_VAR 0 5
45575: PUSH
45576: LD_INT 1
45578: ARRAY
45579: PUSH
45580: LD_VAR 0 4
45584: ARRAY
45585: PUSH
45586: LD_VAR 0 5
45590: PUSH
45591: LD_INT 2
45593: ARRAY
45594: PUSH
45595: LD_VAR 0 4
45599: ARRAY
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PPUSH
45605: CALL_OW 1
45609: ST_TO_ADDR
45610: GO 45549
45612: POP
45613: POP
// exit ;
45614: GO 45654
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45616: LD_ADDR_VAR 0 3
45620: PUSH
45621: LD_VAR 0 5
45625: PUSH
45626: LD_INT 1
45628: ARRAY
45629: PUSH
45630: LD_INT 1
45632: ARRAY
45633: PUSH
45634: LD_VAR 0 5
45638: PUSH
45639: LD_INT 2
45641: ARRAY
45642: PUSH
45643: LD_INT 1
45645: ARRAY
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: ST_TO_ADDR
// end ;
45654: LD_VAR 0 3
45658: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45659: LD_INT 0
45661: PPUSH
45662: PPUSH
// list := AreaToList ( area , 0 ) ;
45663: LD_ADDR_VAR 0 4
45667: PUSH
45668: LD_VAR 0 1
45672: PPUSH
45673: LD_INT 0
45675: PPUSH
45676: CALL_OW 517
45680: ST_TO_ADDR
// if not list then
45681: LD_VAR 0 4
45685: NOT
45686: IFFALSE 45690
// exit ;
45688: GO 45731
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_VAR 0 4
45699: PUSH
45700: LD_INT 1
45702: ARRAY
45703: PUSH
45704: LD_INT 1
45706: ARRAY
45707: PUSH
45708: LD_VAR 0 4
45712: PUSH
45713: LD_INT 2
45715: ARRAY
45716: PUSH
45717: LD_INT 1
45719: ARRAY
45720: PUSH
45721: LD_VAR 0 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// end ;
45731: LD_VAR 0 3
45735: RET
// export function First ( array ) ; begin
45736: LD_INT 0
45738: PPUSH
// if not array then
45739: LD_VAR 0 1
45743: NOT
45744: IFFALSE 45748
// exit ;
45746: GO 45762
// result := array [ 1 ] ;
45748: LD_ADDR_VAR 0 2
45752: PUSH
45753: LD_VAR 0 1
45757: PUSH
45758: LD_INT 1
45760: ARRAY
45761: ST_TO_ADDR
// end ;
45762: LD_VAR 0 2
45766: RET
// export function Last ( array ) ; begin
45767: LD_INT 0
45769: PPUSH
// if not array then
45770: LD_VAR 0 1
45774: NOT
45775: IFFALSE 45779
// exit ;
45777: GO 45795
// result := array [ array ] ;
45779: LD_ADDR_VAR 0 2
45783: PUSH
45784: LD_VAR 0 1
45788: PUSH
45789: LD_VAR 0 1
45793: ARRAY
45794: ST_TO_ADDR
// end ;
45795: LD_VAR 0 2
45799: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45800: LD_INT 0
45802: PPUSH
45803: PPUSH
// result := [ ] ;
45804: LD_ADDR_VAR 0 5
45808: PUSH
45809: EMPTY
45810: ST_TO_ADDR
// if not array then
45811: LD_VAR 0 1
45815: NOT
45816: IFFALSE 45820
// exit ;
45818: GO 45932
// for i := 1 to array do
45820: LD_ADDR_VAR 0 6
45824: PUSH
45825: DOUBLE
45826: LD_INT 1
45828: DEC
45829: ST_TO_ADDR
45830: LD_VAR 0 1
45834: PUSH
45835: FOR_TO
45836: IFFALSE 45930
// if array [ i ] [ index ] = value then
45838: LD_VAR 0 1
45842: PUSH
45843: LD_VAR 0 6
45847: ARRAY
45848: PUSH
45849: LD_VAR 0 2
45853: ARRAY
45854: PUSH
45855: LD_VAR 0 3
45859: EQUAL
45860: IFFALSE 45928
// begin if indexColumn then
45862: LD_VAR 0 4
45866: IFFALSE 45902
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45868: LD_ADDR_VAR 0 5
45872: PUSH
45873: LD_VAR 0 5
45877: PPUSH
45878: LD_VAR 0 1
45882: PUSH
45883: LD_VAR 0 6
45887: ARRAY
45888: PUSH
45889: LD_VAR 0 4
45893: ARRAY
45894: PPUSH
45895: CALL 40940 0 2
45899: ST_TO_ADDR
45900: GO 45928
// result := Join ( result , array [ i ] ) ;
45902: LD_ADDR_VAR 0 5
45906: PUSH
45907: LD_VAR 0 5
45911: PPUSH
45912: LD_VAR 0 1
45916: PUSH
45917: LD_VAR 0 6
45921: ARRAY
45922: PPUSH
45923: CALL 40940 0 2
45927: ST_TO_ADDR
// end ;
45928: GO 45835
45930: POP
45931: POP
// end ;
45932: LD_VAR 0 5
45936: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45937: LD_INT 0
45939: PPUSH
// if not vehicles or not parkingPoint then
45940: LD_VAR 0 1
45944: NOT
45945: IFTRUE 45954
45947: PUSH
45948: LD_VAR 0 2
45952: NOT
45953: OR
45954: IFFALSE 45958
// exit ;
45956: GO 46056
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45958: LD_ADDR_VAR 0 1
45962: PUSH
45963: LD_VAR 0 1
45967: PPUSH
45968: LD_INT 50
45970: PUSH
45971: EMPTY
45972: LIST
45973: PUSH
45974: LD_INT 3
45976: PUSH
45977: LD_INT 92
45979: PUSH
45980: LD_VAR 0 2
45984: PUSH
45985: LD_INT 1
45987: ARRAY
45988: PUSH
45989: LD_VAR 0 2
45993: PUSH
45994: LD_INT 2
45996: ARRAY
45997: PUSH
45998: LD_INT 8
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PPUSH
46015: CALL_OW 72
46019: ST_TO_ADDR
// if not vehicles then
46020: LD_VAR 0 1
46024: NOT
46025: IFFALSE 46029
// exit ;
46027: GO 46056
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46029: LD_VAR 0 1
46033: PPUSH
46034: LD_VAR 0 2
46038: PUSH
46039: LD_INT 1
46041: ARRAY
46042: PPUSH
46043: LD_VAR 0 2
46047: PUSH
46048: LD_INT 2
46050: ARRAY
46051: PPUSH
46052: CALL_OW 111
// end ;
46056: LD_VAR 0 3
46060: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46061: LD_INT 0
46063: PPUSH
46064: PPUSH
46065: PPUSH
// if not side or not area then
46066: LD_VAR 0 1
46070: NOT
46071: IFTRUE 46080
46073: PUSH
46074: LD_VAR 0 2
46078: NOT
46079: OR
46080: IFFALSE 46084
// exit ;
46082: GO 46203
// tmp := AreaToList ( area , 0 ) ;
46084: LD_ADDR_VAR 0 5
46088: PUSH
46089: LD_VAR 0 2
46093: PPUSH
46094: LD_INT 0
46096: PPUSH
46097: CALL_OW 517
46101: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46102: LD_ADDR_VAR 0 4
46106: PUSH
46107: DOUBLE
46108: LD_INT 1
46110: DEC
46111: ST_TO_ADDR
46112: LD_VAR 0 5
46116: PUSH
46117: LD_INT 1
46119: ARRAY
46120: PUSH
46121: FOR_TO
46122: IFFALSE 46201
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46124: LD_VAR 0 5
46128: PUSH
46129: LD_INT 1
46131: ARRAY
46132: PUSH
46133: LD_VAR 0 4
46137: ARRAY
46138: PPUSH
46139: LD_VAR 0 5
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PUSH
46148: LD_VAR 0 4
46152: ARRAY
46153: PPUSH
46154: CALL_OW 351
46158: IFFALSE 46199
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46160: LD_VAR 0 5
46164: PUSH
46165: LD_INT 1
46167: ARRAY
46168: PUSH
46169: LD_VAR 0 4
46173: ARRAY
46174: PPUSH
46175: LD_VAR 0 5
46179: PUSH
46180: LD_INT 2
46182: ARRAY
46183: PUSH
46184: LD_VAR 0 4
46188: ARRAY
46189: PPUSH
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 244
// end ;
46199: GO 46121
46201: POP
46202: POP
// end ;
46203: LD_VAR 0 3
46207: RET
// export function UniqueArray ( array ) ; var i ; begin
46208: LD_INT 0
46210: PPUSH
46211: PPUSH
// result := [ ] ;
46212: LD_ADDR_VAR 0 2
46216: PUSH
46217: EMPTY
46218: ST_TO_ADDR
// if not array then
46219: LD_VAR 0 1
46223: NOT
46224: IFFALSE 46228
// exit ;
46226: GO 46289
// for i := 1 to array do
46228: LD_ADDR_VAR 0 3
46232: PUSH
46233: DOUBLE
46234: LD_INT 1
46236: DEC
46237: ST_TO_ADDR
46238: LD_VAR 0 1
46242: PUSH
46243: FOR_TO
46244: IFFALSE 46287
// if not array [ i ] in result then
46246: LD_VAR 0 1
46250: PUSH
46251: LD_VAR 0 3
46255: ARRAY
46256: PUSH
46257: LD_VAR 0 2
46261: IN
46262: NOT
46263: IFFALSE 46285
// result := Join ( result , i ) ;
46265: LD_ADDR_VAR 0 2
46269: PUSH
46270: LD_VAR 0 2
46274: PPUSH
46275: LD_VAR 0 3
46279: PPUSH
46280: CALL 40940 0 2
46284: ST_TO_ADDR
46285: GO 46243
46287: POP
46288: POP
// end ; end_of_file
46289: LD_VAR 0 2
46293: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46294: LD_INT 0
46296: PPUSH
46297: PPUSH
// disable ( mpActive ) ;
46298: LD_INT 100
46300: DISABLE_MARKED
// disable ( mpWin ) ;
46301: LD_INT 101
46303: DISABLE_MARKED
// disable ( mpLose ) ;
46304: LD_INT 102
46306: DISABLE_MARKED
// mpGameType := 0 ;
46307: LD_ADDR_EXP 1
46311: PUSH
46312: LD_INT 0
46314: ST_TO_ADDR
// mpGameSettings := [ ] ;
46315: LD_ADDR_EXP 4
46319: PUSH
46320: EMPTY
46321: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46322: LD_ADDR_EXP 2
46326: PUSH
46327: EMPTY
46328: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46329: LD_ADDR_EXP 3
46333: PUSH
46334: EMPTY
46335: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46336: LD_ADDR_EXP 27
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46351: LD_ADDR_EXP 10
46355: PUSH
46356: EMPTY
46357: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46358: LD_ADDR_EXP 11
46362: PUSH
46363: EMPTY
46364: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46365: LD_ADDR_EXP 39
46369: PUSH
46370: EMPTY
46371: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46372: LD_ADDR_EXP 40
46376: PUSH
46377: EMPTY
46378: ST_TO_ADDR
// mpDepots := [ ] ;
46379: LD_ADDR_EXP 12
46383: PUSH
46384: EMPTY
46385: ST_TO_ADDR
// mpBuildings := [ ] ;
46386: LD_ADDR_EXP 15
46390: PUSH
46391: EMPTY
46392: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46393: LD_ADDR_EXP 16
46397: PUSH
46398: EMPTY
46399: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46400: LD_ADDR_EXP 17
46404: PUSH
46405: EMPTY
46406: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46407: LD_ADDR_EXP 18
46411: PUSH
46412: EMPTY
46413: ST_TO_ADDR
// mpStartingResources := [ ] ;
46414: LD_ADDR_EXP 13
46418: PUSH
46419: EMPTY
46420: ST_TO_ADDR
// mpStartPos := [ ] ;
46421: LD_ADDR_EXP 19
46425: PUSH
46426: EMPTY
46427: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46428: LD_ADDR_EXP 20
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46437: LD_ADDR_EXP 21
46441: PUSH
46442: EMPTY
46443: ST_TO_ADDR
// mpApemans := [ ] ;
46444: LD_ADDR_EXP 28
46448: PUSH
46449: EMPTY
46450: ST_TO_ADDR
// mpApemansArea := [ ] ;
46451: LD_ADDR_EXP 29
46455: PUSH
46456: EMPTY
46457: ST_TO_ADDR
// mpRespawn := [ ] ;
46458: LD_ADDR_EXP 31
46462: PUSH
46463: EMPTY
46464: ST_TO_ADDR
// mpKingArea := 0 ;
46465: LD_ADDR_EXP 32
46469: PUSH
46470: LD_INT 0
46472: ST_TO_ADDR
// mpPoints := [ ] ;
46473: LD_ADDR_EXP 33
46477: PUSH
46478: EMPTY
46479: ST_TO_ADDR
// mpVehicles := 0 ;
46480: LD_ADDR_EXP 34
46484: PUSH
46485: LD_INT 0
46487: ST_TO_ADDR
// mpShipments := 0 ;
46488: LD_ADDR_EXP 25
46492: PUSH
46493: LD_INT 0
46495: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46496: LD_ADDR_EXP 38
46500: PUSH
46501: EMPTY
46502: PUSH
46503: EMPTY
46504: PUSH
46505: EMPTY
46506: PUSH
46507: EMPTY
46508: PUSH
46509: EMPTY
46510: PUSH
46511: EMPTY
46512: PUSH
46513: EMPTY
46514: PUSH
46515: EMPTY
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46527: LD_ADDR_EXP 30
46531: PUSH
46532: EMPTY
46533: PUSH
46534: EMPTY
46535: PUSH
46536: EMPTY
46537: PUSH
46538: EMPTY
46539: PUSH
46540: EMPTY
46541: PUSH
46542: EMPTY
46543: PUSH
46544: EMPTY
46545: PUSH
46546: EMPTY
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
// mpEmissions := 0 ;
46558: LD_ADDR_EXP 35
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// mpTeleports := 0 ;
46566: LD_ADDR_EXP 41
46570: PUSH
46571: LD_INT 0
46573: ST_TO_ADDR
// mpArtifacts := 0 ;
46574: LD_ADDR_EXP 42
46578: PUSH
46579: LD_INT 0
46581: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46582: LD_ADDR_EXP 23
46586: PUSH
46587: LD_INT 3
46589: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46590: LD_ADDR_EXP 22
46594: PUSH
46595: LD_INT 15
46597: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46598: LD_ADDR_EXP 36
46602: PUSH
46603: LD_INT 0
46605: ST_TO_ADDR
// mpGameActive := false ;
46606: LD_ADDR_EXP 37
46610: PUSH
46611: LD_INT 0
46613: ST_TO_ADDR
// mpBlockRespThread := false ;
46614: LD_ADDR_EXP 43
46618: PUSH
46619: LD_INT 0
46621: ST_TO_ADDR
// for i := 1 to 32 do
46622: LD_ADDR_VAR 0 2
46626: PUSH
46627: DOUBLE
46628: LD_INT 1
46630: DEC
46631: ST_TO_ADDR
46632: LD_INT 32
46634: PUSH
46635: FOR_TO
46636: IFFALSE 46663
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46638: LD_ADDR_EXP 4
46642: PUSH
46643: LD_EXP 4
46647: PPUSH
46648: LD_VAR 0 2
46652: PPUSH
46653: LD_INT 0
46655: PPUSH
46656: CALL_OW 1
46660: ST_TO_ADDR
46661: GO 46635
46663: POP
46664: POP
// end ;
46665: LD_VAR 0 1
46669: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46670: LD_INT 0
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
46686: LD_ADDR_VAR 0 14
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 5
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// for i in gameTypes do
46709: LD_ADDR_VAR 0 2
46713: PUSH
46714: LD_VAR 0 14
46718: PUSH
46719: FOR_IN
46720: IFFALSE 46729
// disable ( i ) ;
46722: LD_VAR 0 2
46726: DISABLE_MARKED
46727: GO 46719
46729: POP
46730: POP
// if Multiplayer then
46731: LD_OWVAR 4
46735: IFFALSE 46919
// begin mpGameType := mp_game_type ;
46737: LD_ADDR_EXP 1
46741: PUSH
46742: LD_OWVAR 6
46746: ST_TO_ADDR
// your_side := mp_player_side ;
46747: LD_ADDR_OWVAR 2
46751: PUSH
46752: LD_OWVAR 7
46756: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46757: LD_ADDR_EXP 5
46761: PUSH
46762: LD_OWVAR 17
46766: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46767: LD_ADDR_EXP 6
46771: PUSH
46772: LD_OWVAR 15
46776: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46777: LD_ADDR_EXP 7
46781: PUSH
46782: LD_OWVAR 16
46786: ST_TO_ADDR
// mpTeams := mp_teams ;
46787: LD_ADDR_EXP 8
46791: PUSH
46792: LD_OWVAR 12
46796: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46797: LD_ADDR_VAR 0 2
46801: PUSH
46802: DOUBLE
46803: LD_INT 1
46805: DEC
46806: ST_TO_ADDR
46807: LD_EXP 2
46811: PPUSH
46812: CALL 5008 0 1
46816: PUSH
46817: FOR_TO
46818: IFFALSE 46894
// begin setting := mpGameSettingsKeys [ i ] ;
46820: LD_ADDR_VAR 0 12
46824: PUSH
46825: LD_EXP 2
46829: PUSH
46830: LD_VAR 0 2
46834: ARRAY
46835: ST_TO_ADDR
// if setting then
46836: LD_VAR 0 12
46840: IFFALSE 46892
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46842: LD_ADDR_EXP 4
46846: PUSH
46847: LD_EXP 4
46851: PPUSH
46852: LD_VAR 0 2
46856: PPUSH
46857: LD_EXP 3
46861: PUSH
46862: LD_VAR 0 2
46866: ARRAY
46867: PUSH
46868: LD_VAR 0 2
46872: PUSH
46873: LD_INT 1
46875: MINUS
46876: PPUSH
46877: CALL_OW 426
46881: PUSH
46882: LD_INT 1
46884: PLUS
46885: ARRAY
46886: PPUSH
46887: CALL_OW 1
46891: ST_TO_ADDR
// end ;
46892: GO 46817
46894: POP
46895: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46896: LD_ADDR_EXP 9
46900: PUSH
46901: LD_EXP 6
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: DIFF
46912: PUSH
46913: LD_INT 1
46915: GREATER
46916: ST_TO_ADDR
// end else
46917: GO 46919
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46919: LD_EXP 1
46923: PPUSH
46924: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
46928: LD_EXP 16
46932: PPUSH
46933: CALL 5008 0 1
46937: IFFALSE 46968
// begin for i in mpMarkedAreas do
46939: LD_ADDR_VAR 0 2
46943: PUSH
46944: LD_EXP 16
46948: PUSH
46949: FOR_IN
46950: IFFALSE 46966
// SetAreaMapShow ( i , 0 ) ;
46952: LD_VAR 0 2
46956: PPUSH
46957: LD_INT 0
46959: PPUSH
46960: CALL_OW 424
46964: GO 46949
46966: POP
46967: POP
// end ; for i := 1 to 8 do
46968: LD_ADDR_VAR 0 2
46972: PUSH
46973: DOUBLE
46974: LD_INT 1
46976: DEC
46977: ST_TO_ADDR
46978: LD_INT 8
46980: PUSH
46981: FOR_TO
46982: IFFALSE 48318
// begin if not mpSidePositions [ i ] then
46984: LD_EXP 5
46988: PUSH
46989: LD_VAR 0 2
46993: ARRAY
46994: NOT
46995: IFFALSE 46999
// continue ;
46997: GO 46981
// side := i ;
46999: LD_ADDR_VAR 0 7
47003: PUSH
47004: LD_VAR 0 2
47008: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_EXP 7
47018: PUSH
47019: LD_VAR 0 2
47023: ARRAY
47024: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47025: LD_ADDR_VAR 0 8
47029: PUSH
47030: LD_EXP 5
47034: PUSH
47035: LD_VAR 0 2
47039: ARRAY
47040: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47041: LD_EXP 10
47045: PPUSH
47046: CALL 5008 0 1
47050: IFFALSE 47127
// begin for j in mpOilDeposits [ pos ] do
47052: LD_ADDR_VAR 0 3
47056: PUSH
47057: LD_EXP 10
47061: PUSH
47062: LD_VAR 0 8
47066: ARRAY
47067: PUSH
47068: FOR_IN
47069: IFFALSE 47125
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47071: LD_VAR 0 3
47075: PUSH
47076: LD_INT 1
47078: ARRAY
47079: PPUSH
47080: LD_VAR 0 3
47084: PUSH
47085: LD_INT 2
47087: ARRAY
47088: PPUSH
47089: LD_INT 2
47091: PPUSH
47092: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47096: LD_VAR 0 3
47100: PUSH
47101: LD_INT 1
47103: ARRAY
47104: PPUSH
47105: LD_VAR 0 3
47109: PUSH
47110: LD_INT 2
47112: ARRAY
47113: PPUSH
47114: LD_VAR 0 7
47118: PPUSH
47119: CALL_OW 441
// end ;
47123: GO 47068
47125: POP
47126: POP
// end ; if Count ( mpSibDeposits ) then
47127: LD_EXP 11
47131: PPUSH
47132: CALL 5008 0 1
47136: IFFALSE 47213
// begin for j in mpSibDeposits [ pos ] do
47138: LD_ADDR_VAR 0 3
47142: PUSH
47143: LD_EXP 11
47147: PUSH
47148: LD_VAR 0 8
47152: ARRAY
47153: PUSH
47154: FOR_IN
47155: IFFALSE 47211
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47157: LD_VAR 0 3
47161: PUSH
47162: LD_INT 1
47164: ARRAY
47165: PPUSH
47166: LD_VAR 0 3
47170: PUSH
47171: LD_INT 2
47173: ARRAY
47174: PPUSH
47175: LD_INT 3
47177: PPUSH
47178: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47182: LD_VAR 0 3
47186: PUSH
47187: LD_INT 1
47189: ARRAY
47190: PPUSH
47191: LD_VAR 0 3
47195: PUSH
47196: LD_INT 2
47198: ARRAY
47199: PPUSH
47200: LD_VAR 0 7
47204: PPUSH
47205: CALL_OW 441
// end ;
47209: GO 47154
47211: POP
47212: POP
// end ; InitBc ;
47213: CALL_OW 21
// InitUc ;
47217: CALL_OW 18
// uc_side := side ;
47221: LD_ADDR_OWVAR 20
47225: PUSH
47226: LD_VAR 0 7
47230: ST_TO_ADDR
// uc_nation := nation ;
47231: LD_ADDR_OWVAR 21
47235: PUSH
47236: LD_VAR 0 9
47240: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47241: LD_EXP 20
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: GREATER
47250: IFFALSE 47409
// begin x := mpStartPos [ pos ] [ 1 ] ;
47252: LD_ADDR_VAR 0 5
47256: PUSH
47257: LD_EXP 19
47261: PUSH
47262: LD_VAR 0 8
47266: ARRAY
47267: PUSH
47268: LD_INT 1
47270: ARRAY
47271: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47272: LD_ADDR_VAR 0 6
47276: PUSH
47277: LD_EXP 19
47281: PUSH
47282: LD_VAR 0 8
47286: ARRAY
47287: PUSH
47288: LD_INT 2
47290: ARRAY
47291: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47292: LD_VAR 0 5
47296: PPUSH
47297: LD_VAR 0 6
47301: PPUSH
47302: LD_INT 12
47304: PPUSH
47305: LD_INT 2
47307: PPUSH
47308: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47312: LD_ADDR_EXP 21
47316: PUSH
47317: LD_EXP 21
47321: PPUSH
47322: LD_VAR 0 7
47326: PPUSH
47327: LD_VAR 0 7
47331: PPUSH
47332: LD_VAR 0 5
47336: PPUSH
47337: LD_VAR 0 6
47341: PPUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 100
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 70
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: LD_INT 40
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 10
47374: PUSH
47375: LD_INT 25
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 20
47384: PUSH
47385: LD_INT 100
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: PPUSH
47399: CALL_OW 418
47403: PPUSH
47404: CALL_OW 1
47408: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47409: LD_EXP 12
47413: PPUSH
47414: CALL 5008 0 1
47418: IFFALSE 47602
// begin if mpGameType = GameTypeSurvival then
47420: LD_EXP 1
47424: PUSH
47425: LD_INT 2
47427: EQUAL
47428: IFFALSE 47448
// begin bc_level := 10 ;
47430: LD_ADDR_OWVAR 43
47434: PUSH
47435: LD_INT 10
47437: ST_TO_ADDR
// bc_type := b_warehouse ;
47438: LD_ADDR_OWVAR 42
47442: PUSH
47443: LD_INT 1
47445: ST_TO_ADDR
// end else
47446: GO 47464
// begin bc_level := 0 ;
47448: LD_ADDR_OWVAR 43
47452: PUSH
47453: LD_INT 0
47455: ST_TO_ADDR
// bc_type := b_depot ;
47456: LD_ADDR_OWVAR 42
47460: PUSH
47461: LD_INT 0
47463: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47464: LD_ADDR_VAR 0 4
47468: PUSH
47469: LD_EXP 12
47473: PUSH
47474: LD_VAR 0 8
47478: ARRAY
47479: PUSH
47480: LD_INT 1
47482: ARRAY
47483: PPUSH
47484: LD_EXP 12
47488: PUSH
47489: LD_VAR 0 8
47493: ARRAY
47494: PUSH
47495: LD_INT 2
47497: ARRAY
47498: PPUSH
47499: LD_EXP 12
47503: PUSH
47504: LD_VAR 0 8
47508: ARRAY
47509: PUSH
47510: LD_INT 3
47512: ARRAY
47513: PPUSH
47514: CALL_OW 47
47518: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47519: LD_VAR 0 4
47523: PPUSH
47524: LD_STRING @
47526: PUSH
47527: LD_VAR 0 7
47531: STR
47532: PPUSH
47533: CALL_OW 500
// if Count ( mpStartingResources ) then
47537: LD_EXP 13
47541: PPUSH
47542: CALL 5008 0 1
47546: IFFALSE 47600
// begin for j := 1 to mpStartingResources do
47548: LD_ADDR_VAR 0 3
47552: PUSH
47553: DOUBLE
47554: LD_INT 1
47556: DEC
47557: ST_TO_ADDR
47558: LD_EXP 13
47562: PUSH
47563: FOR_TO
47564: IFFALSE 47598
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47566: LD_VAR 0 4
47570: PPUSH
47571: CALL_OW 274
47575: PPUSH
47576: LD_VAR 0 3
47580: PPUSH
47581: LD_EXP 13
47585: PUSH
47586: LD_VAR 0 3
47590: ARRAY
47591: PPUSH
47592: CALL_OW 277
47596: GO 47563
47598: POP
47599: POP
// end ; end else
47600: GO 47809
// if Count ( mpStartingResources ) then
47602: LD_EXP 13
47606: PPUSH
47607: CALL 5008 0 1
47611: IFFALSE 47809
// begin x := mpStartPos [ pos ] [ 1 ] ;
47613: LD_ADDR_VAR 0 5
47617: PUSH
47618: LD_EXP 19
47622: PUSH
47623: LD_VAR 0 8
47627: ARRAY
47628: PUSH
47629: LD_INT 1
47631: ARRAY
47632: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47633: LD_ADDR_VAR 0 6
47637: PUSH
47638: LD_EXP 19
47642: PUSH
47643: LD_VAR 0 8
47647: ARRAY
47648: PUSH
47649: LD_INT 2
47651: ARRAY
47652: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47653: LD_ADDR_VAR 0 3
47657: PUSH
47658: DOUBLE
47659: LD_INT 1
47661: DEC
47662: ST_TO_ADDR
47663: LD_EXP 13
47667: PUSH
47668: FOR_TO
47669: IFFALSE 47807
// begin resources := mpStartingResources [ j ] ;
47671: LD_ADDR_VAR 0 13
47675: PUSH
47676: LD_EXP 13
47680: PUSH
47681: LD_VAR 0 3
47685: ARRAY
47686: ST_TO_ADDR
// if resources = 0 then
47687: LD_VAR 0 13
47691: PUSH
47692: LD_INT 0
47694: EQUAL
47695: IFFALSE 47699
// continue ;
47697: GO 47668
// repeat if resources >= 50 then
47699: LD_VAR 0 13
47703: PUSH
47704: LD_INT 50
47706: GREATEREQUAL
47707: IFFALSE 47753
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47709: LD_VAR 0 3
47713: PPUSH
47714: LD_INT 5
47716: PPUSH
47717: LD_VAR 0 5
47721: PPUSH
47722: LD_VAR 0 6
47726: PPUSH
47727: LD_INT 6
47729: PPUSH
47730: LD_INT 0
47732: PPUSH
47733: CALL_OW 60
// resources := resources - 50 ;
47737: LD_ADDR_VAR 0 13
47741: PUSH
47742: LD_VAR 0 13
47746: PUSH
47747: LD_INT 50
47749: MINUS
47750: ST_TO_ADDR
// end else
47751: GO 47795
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47753: LD_VAR 0 3
47757: PPUSH
47758: LD_VAR 0 13
47762: PUSH
47763: LD_INT 10
47765: DIV
47766: PPUSH
47767: LD_VAR 0 5
47771: PPUSH
47772: LD_VAR 0 6
47776: PPUSH
47777: LD_INT 6
47779: PPUSH
47780: LD_INT 0
47782: PPUSH
47783: CALL_OW 60
// resources := 0 ;
47787: LD_ADDR_VAR 0 13
47791: PUSH
47792: LD_INT 0
47794: ST_TO_ADDR
// end ; until resources <= 0 ;
47795: LD_VAR 0 13
47799: PUSH
47800: LD_INT 0
47802: LESSEQUAL
47803: IFFALSE 47699
// end ;
47805: GO 47668
47807: POP
47808: POP
// end ; if Count ( mpBuildings ) then
47809: LD_EXP 15
47813: PPUSH
47814: CALL 5008 0 1
47818: IFFALSE 47896
// begin for j in mpBuildings [ pos ] do
47820: LD_ADDR_VAR 0 3
47824: PUSH
47825: LD_EXP 15
47829: PUSH
47830: LD_VAR 0 8
47834: ARRAY
47835: PUSH
47836: FOR_IN
47837: IFFALSE 47894
// begin bc_level := 0 ;
47839: LD_ADDR_OWVAR 43
47843: PUSH
47844: LD_INT 0
47846: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47847: LD_ADDR_OWVAR 42
47851: PUSH
47852: LD_VAR 0 3
47856: PUSH
47857: LD_INT 1
47859: ARRAY
47860: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47861: LD_VAR 0 3
47865: PUSH
47866: LD_INT 2
47868: ARRAY
47869: PPUSH
47870: LD_VAR 0 3
47874: PUSH
47875: LD_INT 3
47877: ARRAY
47878: PPUSH
47879: LD_VAR 0 3
47883: PUSH
47884: LD_INT 4
47886: ARRAY
47887: PPUSH
47888: CALL_OW 47
// end ;
47892: GO 47836
47894: POP
47895: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47896: LD_EXP 24
47900: IFFALSE 47920
47902: PUSH
47903: LD_INT 20
47905: PPUSH
47906: LD_VAR 0 7
47910: PPUSH
47911: CALL_OW 321
47915: PUSH
47916: LD_INT 1
47918: EQUAL
47919: AND
47920: IFFALSE 47937
// SetTech ( tech_SibDet , side , state_researched ) ;
47922: LD_INT 20
47924: PPUSH
47925: LD_VAR 0 7
47929: PPUSH
47930: LD_INT 2
47932: PPUSH
47933: CALL_OW 322
// if not mpArtifacts then
47937: LD_EXP 42
47941: NOT
47942: IFFALSE 47959
// SetTech ( tech_artifact , side , state_disabled ) ;
47944: LD_INT 24
47946: PPUSH
47947: LD_VAR 0 7
47951: PPUSH
47952: LD_INT 0
47954: PPUSH
47955: CALL_OW 322
// if mpSibBomb = 1 then
47959: LD_EXP 26
47963: PUSH
47964: LD_INT 1
47966: EQUAL
47967: IFFALSE 47986
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47969: LD_INT 25
47971: PPUSH
47972: LD_VAR 0 7
47976: PPUSH
47977: LD_INT 1
47979: PPUSH
47980: CALL_OW 322
// end else
47984: GO 48001
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47986: LD_INT 25
47988: PPUSH
47989: LD_VAR 0 7
47993: PPUSH
47994: LD_INT 0
47996: PPUSH
47997: CALL_OW 322
// end ; if mpVehicles then
48001: LD_EXP 34
48005: IFFALSE 48104
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48007: LD_ADDR_VAR 0 3
48011: PUSH
48012: LD_VAR 0 7
48016: PPUSH
48017: LD_VAR 0 9
48021: PPUSH
48022: LD_EXP 34
48026: PPUSH
48027: CALL 49228 0 3
48031: PUSH
48032: FOR_IN
48033: IFFALSE 48102
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48035: LD_VAR 0 3
48039: PPUSH
48040: LD_INT 0
48042: PPUSH
48043: LD_INT 5
48045: PPUSH
48046: CALL_OW 12
48050: PPUSH
48051: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48055: LD_VAR 0 3
48059: PPUSH
48060: LD_EXP 19
48064: PUSH
48065: LD_VAR 0 8
48069: ARRAY
48070: PUSH
48071: LD_INT 1
48073: ARRAY
48074: PPUSH
48075: LD_EXP 19
48079: PUSH
48080: LD_VAR 0 8
48084: ARRAY
48085: PUSH
48086: LD_INT 2
48088: ARRAY
48089: PPUSH
48090: LD_INT 12
48092: PPUSH
48093: LD_INT 0
48095: PPUSH
48096: CALL_OW 50
// end ;
48100: GO 48032
48102: POP
48103: POP
// end ; uc_nation := nation ;
48104: LD_ADDR_OWVAR 21
48108: PUSH
48109: LD_VAR 0 9
48113: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48114: LD_ADDR_VAR 0 11
48118: PUSH
48119: LD_VAR 0 7
48123: PPUSH
48124: LD_VAR 0 9
48128: PPUSH
48129: LD_EXP 22
48133: PPUSH
48134: LD_EXP 23
48138: PPUSH
48139: CALL 48730 0 4
48143: ST_TO_ADDR
// for j in team do
48144: LD_ADDR_VAR 0 3
48148: PUSH
48149: LD_VAR 0 11
48153: PUSH
48154: FOR_IN
48155: IFFALSE 48204
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48157: LD_VAR 0 3
48161: PPUSH
48162: LD_EXP 19
48166: PUSH
48167: LD_VAR 0 8
48171: ARRAY
48172: PUSH
48173: LD_INT 1
48175: ARRAY
48176: PPUSH
48177: LD_EXP 19
48181: PUSH
48182: LD_VAR 0 8
48186: ARRAY
48187: PUSH
48188: LD_INT 2
48190: ARRAY
48191: PPUSH
48192: LD_INT 12
48194: PPUSH
48195: LD_INT 0
48197: PPUSH
48198: CALL_OW 50
48202: GO 48154
48204: POP
48205: POP
// if mpApemans then
48206: LD_EXP 28
48210: IFFALSE 48316
// begin for j := 1 to mpApemans do
48212: LD_ADDR_VAR 0 3
48216: PUSH
48217: DOUBLE
48218: LD_INT 1
48220: DEC
48221: ST_TO_ADDR
48222: LD_EXP 28
48226: PUSH
48227: FOR_TO
48228: IFFALSE 48314
// begin PrepareApeman ( - 5 ) ;
48230: LD_INT 5
48232: NEG
48233: PPUSH
48234: CALL 37067 0 1
// ape := CreateHuman ;
48238: LD_ADDR_VAR 0 10
48242: PUSH
48243: CALL_OW 44
48247: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48248: LD_ADDR_EXP 30
48252: PUSH
48253: LD_EXP 30
48257: PPUSH
48258: LD_VAR 0 8
48262: PPUSH
48263: LD_EXP 30
48267: PUSH
48268: LD_VAR 0 8
48272: ARRAY
48273: PPUSH
48274: LD_VAR 0 10
48278: PPUSH
48279: CALL 40940 0 2
48283: PPUSH
48284: CALL_OW 1
48288: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48289: LD_VAR 0 10
48293: PPUSH
48294: LD_EXP 29
48298: PUSH
48299: LD_VAR 0 8
48303: ARRAY
48304: PPUSH
48305: LD_INT 0
48307: PPUSH
48308: CALL_OW 49
// end ;
48312: GO 48227
48314: POP
48315: POP
// end ; end ;
48316: GO 46981
48318: POP
48319: POP
// if not mpTeamGame then
48320: LD_EXP 9
48324: NOT
48325: IFFALSE 48423
// begin for i := 1 to 8 do
48327: LD_ADDR_VAR 0 2
48331: PUSH
48332: DOUBLE
48333: LD_INT 1
48335: DEC
48336: ST_TO_ADDR
48337: LD_INT 8
48339: PUSH
48340: FOR_TO
48341: IFFALSE 48419
// for j := 1 to 8 do
48343: LD_ADDR_VAR 0 3
48347: PUSH
48348: DOUBLE
48349: LD_INT 1
48351: DEC
48352: ST_TO_ADDR
48353: LD_INT 8
48355: PUSH
48356: FOR_TO
48357: IFFALSE 48415
// if i <> j then
48359: LD_VAR 0 2
48363: PUSH
48364: LD_VAR 0 3
48368: NONEQUAL
48369: IFFALSE 48393
// SetAttitude ( i , j , att_neutral , true ) else
48371: LD_VAR 0 2
48375: PPUSH
48376: LD_VAR 0 3
48380: PPUSH
48381: LD_INT 0
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: CALL_OW 80
48391: GO 48413
// SetAttitude ( i , j , att_friend , true ) ;
48393: LD_VAR 0 2
48397: PPUSH
48398: LD_VAR 0 3
48402: PPUSH
48403: LD_INT 1
48405: PPUSH
48406: LD_INT 1
48408: PPUSH
48409: CALL_OW 80
48413: GO 48356
48415: POP
48416: POP
48417: GO 48340
48419: POP
48420: POP
// end else
48421: GO 48598
// begin if mpSharedVision then
48423: LD_EXP 14
48427: IFFALSE 48492
// begin for i in mpTeams do
48429: LD_ADDR_VAR 0 2
48433: PUSH
48434: LD_EXP 8
48438: PUSH
48439: FOR_IN
48440: IFFALSE 48490
// for j := 2 to i do
48442: LD_ADDR_VAR 0 3
48446: PUSH
48447: DOUBLE
48448: LD_INT 2
48450: DEC
48451: ST_TO_ADDR
48452: LD_VAR 0 2
48456: PUSH
48457: FOR_TO
48458: IFFALSE 48486
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48460: LD_VAR 0 2
48464: PUSH
48465: LD_VAR 0 3
48469: ARRAY
48470: PPUSH
48471: LD_VAR 0 2
48475: PUSH
48476: LD_INT 1
48478: ARRAY
48479: PPUSH
48480: CALL_OW 343
48484: GO 48457
48486: POP
48487: POP
48488: GO 48439
48490: POP
48491: POP
// end ; for i := 1 to 8 do
48492: LD_ADDR_VAR 0 2
48496: PUSH
48497: DOUBLE
48498: LD_INT 1
48500: DEC
48501: ST_TO_ADDR
48502: LD_INT 8
48504: PUSH
48505: FOR_TO
48506: IFFALSE 48596
// for j := 1 to 8 do
48508: LD_ADDR_VAR 0 3
48512: PUSH
48513: DOUBLE
48514: LD_INT 1
48516: DEC
48517: ST_TO_ADDR
48518: LD_INT 8
48520: PUSH
48521: FOR_TO
48522: IFFALSE 48592
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48524: LD_EXP 6
48528: PUSH
48529: LD_VAR 0 2
48533: ARRAY
48534: PUSH
48535: LD_EXP 6
48539: PUSH
48540: LD_VAR 0 3
48544: ARRAY
48545: EQUAL
48546: IFFALSE 48570
// SetAttitude ( i , j , att_friend , true ) else
48548: LD_VAR 0 2
48552: PPUSH
48553: LD_VAR 0 3
48557: PPUSH
48558: LD_INT 1
48560: PPUSH
48561: LD_INT 1
48563: PPUSH
48564: CALL_OW 80
48568: GO 48590
// SetAttitude ( i , j , att_enemy , true ) ;
48570: LD_VAR 0 2
48574: PPUSH
48575: LD_VAR 0 3
48579: PPUSH
48580: LD_INT 2
48582: PPUSH
48583: LD_INT 1
48585: PPUSH
48586: CALL_OW 80
48590: GO 48521
48592: POP
48593: POP
48594: GO 48505
48596: POP
48597: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48598: LD_ADDR_OWVAR 71
48602: PUSH
48603: LD_EXP 7
48607: PUSH
48608: LD_OWVAR 2
48612: ARRAY
48613: ST_TO_ADDR
// if IAmSpec then
48614: CALL_OW 531
48618: IFFALSE 48659
// begin FogOff ( true ) ;
48620: LD_INT 1
48622: PPUSH
48623: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48627: LD_EXP 27
48631: PUSH
48632: LD_INT 1
48634: ARRAY
48635: PUSH
48636: LD_INT 2
48638: DIV
48639: PPUSH
48640: LD_EXP 27
48644: PUSH
48645: LD_INT 2
48647: ARRAY
48648: PUSH
48649: LD_INT 2
48651: DIV
48652: PPUSH
48653: CALL_OW 86
// end else
48657: GO 48705
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48659: LD_EXP 19
48663: PUSH
48664: LD_EXP 5
48668: PUSH
48669: LD_OWVAR 2
48673: ARRAY
48674: ARRAY
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: PPUSH
48680: LD_EXP 19
48684: PUSH
48685: LD_EXP 5
48689: PUSH
48690: LD_OWVAR 2
48694: ARRAY
48695: ARRAY
48696: PUSH
48697: LD_INT 2
48699: ARRAY
48700: PPUSH
48701: CALL_OW 86
// end ; BeginBuildUp ;
48705: CALL 49761 0 0
// enable ( mpActive ) ;
48709: LD_INT 100
48711: ENABLE_MARKED
// enable ( mpGameType ) ;
48712: LD_EXP 1
48716: ENABLE_MARKED
// mpGameActive := true ;
48717: LD_ADDR_EXP 37
48721: PUSH
48722: LD_INT 1
48724: ST_TO_ADDR
// end ;
48725: LD_VAR 0 1
48729: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48730: LD_INT 0
48732: PPUSH
48733: PPUSH
48734: PPUSH
48735: PPUSH
// result := [ ] ;
48736: LD_ADDR_VAR 0 5
48740: PUSH
48741: EMPTY
48742: ST_TO_ADDR
// class := class_soldier ;
48743: LD_ADDR_VAR 0 8
48747: PUSH
48748: LD_INT 1
48750: ST_TO_ADDR
// uc_side := side ;
48751: LD_ADDR_OWVAR 20
48755: PUSH
48756: LD_VAR 0 1
48760: ST_TO_ADDR
// uc_nation := nation ;
48761: LD_ADDR_OWVAR 21
48765: PUSH
48766: LD_VAR 0 2
48770: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48771: LD_ADDR_OWVAR 26
48775: PUSH
48776: LD_OWVAR 19
48780: PUSH
48781: LD_VAR 0 1
48785: ARRAY
48786: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48787: LD_INT 1
48789: PPUSH
48790: LD_INT 2
48792: PPUSH
48793: CALL_OW 12
48797: PPUSH
48798: LD_VAR 0 8
48802: PPUSH
48803: LD_VAR 0 4
48807: PUSH
48808: LD_INT 2
48810: PLUS
48811: PPUSH
48812: CALL_OW 380
// hc_importance := 105 ;
48816: LD_ADDR_OWVAR 32
48820: PUSH
48821: LD_INT 105
48823: ST_TO_ADDR
// if Multiplayer then
48824: LD_OWVAR 4
48828: IFFALSE 48868
// begin hc_gallery := MULTIAVATARS ;
48830: LD_ADDR_OWVAR 33
48834: PUSH
48835: LD_STRING MULTIAVATARS
48837: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48838: LD_ADDR_OWVAR 34
48842: PUSH
48843: LD_VAR 0 1
48847: PPUSH
48848: CALL_OW 525
48852: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48853: LD_ADDR_OWVAR 27
48857: PUSH
48858: LD_VAR 0 1
48862: PPUSH
48863: CALL_OW 526
48867: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48868: LD_ADDR_VAR 0 5
48872: PUSH
48873: LD_VAR 0 5
48877: PPUSH
48878: CALL_OW 44
48882: PPUSH
48883: CALL 40940 0 2
48887: ST_TO_ADDR
// if mpTeamPreset then
48888: LD_LOC 1
48892: IFFALSE 48988
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48894: LD_LOC 1
48898: PUSH
48899: LD_INT 1
48901: ARRAY
48902: PPUSH
48903: LD_VAR 0 5
48907: PUSH
48908: LD_VAR 0 5
48912: ARRAY
48913: PPUSH
48914: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48918: LD_VAR 0 5
48922: PUSH
48923: LD_VAR 0 5
48927: ARRAY
48928: PPUSH
48929: LD_INT 1
48931: PPUSH
48932: LD_LOC 1
48936: PUSH
48937: LD_INT 1
48939: ARRAY
48940: PPUSH
48941: LD_INT 1
48943: PPUSH
48944: CALL_OW 260
48948: PPUSH
48949: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48953: LD_VAR 0 5
48957: PUSH
48958: LD_VAR 0 5
48962: ARRAY
48963: PPUSH
48964: LD_INT 2
48966: PPUSH
48967: LD_LOC 1
48971: PUSH
48972: LD_INT 1
48974: ARRAY
48975: PPUSH
48976: LD_INT 2
48978: PPUSH
48979: CALL_OW 260
48983: PPUSH
48984: CALL_OW 239
// end ; InitHc_All ( ) ;
48988: CALL_OW 584
// class := 2 ;
48992: LD_ADDR_VAR 0 8
48996: PUSH
48997: LD_INT 2
48999: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49000: LD_ADDR_VAR 0 6
49004: PUSH
49005: DOUBLE
49006: LD_INT 1
49008: DEC
49009: ST_TO_ADDR
49010: LD_VAR 0 3
49014: PUSH
49015: LD_INT 1
49017: MINUS
49018: PUSH
49019: FOR_TO
49020: IFFALSE 49204
// begin PrepareHuman ( false , class , skill ) ;
49022: LD_INT 0
49024: PPUSH
49025: LD_VAR 0 8
49029: PPUSH
49030: LD_VAR 0 4
49034: PPUSH
49035: CALL_OW 380
// un := CreateHuman ;
49039: LD_ADDR_VAR 0 7
49043: PUSH
49044: CALL_OW 44
49048: ST_TO_ADDR
// result := Join ( result , un ) ;
49049: LD_ADDR_VAR 0 5
49053: PUSH
49054: LD_VAR 0 5
49058: PPUSH
49059: LD_VAR 0 7
49063: PPUSH
49064: CALL 40940 0 2
49068: ST_TO_ADDR
// if mpTeamPreset then
49069: LD_LOC 1
49073: IFFALSE 49169
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49075: LD_LOC 1
49079: PUSH
49080: LD_VAR 0 6
49084: PUSH
49085: LD_INT 1
49087: PLUS
49088: ARRAY
49089: PPUSH
49090: LD_VAR 0 7
49094: PPUSH
49095: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49099: LD_VAR 0 7
49103: PPUSH
49104: LD_INT 1
49106: PPUSH
49107: LD_LOC 1
49111: PUSH
49112: LD_VAR 0 6
49116: PUSH
49117: LD_INT 1
49119: PLUS
49120: ARRAY
49121: PPUSH
49122: LD_INT 1
49124: PPUSH
49125: CALL_OW 260
49129: PPUSH
49130: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49134: LD_VAR 0 7
49138: PPUSH
49139: LD_INT 2
49141: PPUSH
49142: LD_LOC 1
49146: PUSH
49147: LD_VAR 0 6
49151: PUSH
49152: LD_INT 1
49154: PLUS
49155: ARRAY
49156: PPUSH
49157: LD_INT 2
49159: PPUSH
49160: CALL_OW 260
49164: PPUSH
49165: CALL_OW 239
// end ; class := Inc ( class ) ;
49169: LD_ADDR_VAR 0 8
49173: PUSH
49174: LD_VAR 0 8
49178: PPUSH
49179: CALL 42313 0 1
49183: ST_TO_ADDR
// if class = 5 then
49184: LD_VAR 0 8
49188: PUSH
49189: LD_INT 5
49191: EQUAL
49192: IFFALSE 49202
// class := 1 ;
49194: LD_ADDR_VAR 0 8
49198: PUSH
49199: LD_INT 1
49201: ST_TO_ADDR
// end ;
49202: GO 49019
49204: POP
49205: POP
// if not mpTeamPreset then
49206: LD_LOC 1
49210: NOT
49211: IFFALSE 49223
// mpTeamPreset := result ;
49213: LD_ADDR_LOC 1
49217: PUSH
49218: LD_VAR 0 5
49222: ST_TO_ADDR
// end ;
49223: LD_VAR 0 5
49227: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49228: LD_INT 0
49230: PPUSH
49231: PPUSH
// result := [ ] ;
49232: LD_ADDR_VAR 0 4
49236: PUSH
49237: EMPTY
49238: ST_TO_ADDR
// if not vehicles then
49239: LD_VAR 0 3
49243: NOT
49244: IFFALSE 49248
// exit ;
49246: GO 49462
// for i := 1 to vehicles [ nation ] do
49248: LD_ADDR_VAR 0 5
49252: PUSH
49253: DOUBLE
49254: LD_INT 1
49256: DEC
49257: ST_TO_ADDR
49258: LD_VAR 0 3
49262: PUSH
49263: LD_VAR 0 2
49267: ARRAY
49268: PUSH
49269: FOR_TO
49270: IFFALSE 49460
// begin uc_side := side ;
49272: LD_ADDR_OWVAR 20
49276: PUSH
49277: LD_VAR 0 1
49281: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49282: LD_VAR 0 3
49286: PUSH
49287: LD_VAR 0 2
49291: ARRAY
49292: PUSH
49293: LD_VAR 0 5
49297: ARRAY
49298: PPUSH
49299: CALL 5008 0 1
49303: PUSH
49304: LD_INT 4
49306: GREATER
49307: IFFALSE 49337
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49309: LD_ADDR_OWVAR 21
49313: PUSH
49314: LD_VAR 0 3
49318: PUSH
49319: LD_VAR 0 2
49323: ARRAY
49324: PUSH
49325: LD_VAR 0 5
49329: ARRAY
49330: PUSH
49331: LD_INT 5
49333: ARRAY
49334: ST_TO_ADDR
49335: GO 49347
// uc_nation := nation ;
49337: LD_ADDR_OWVAR 21
49341: PUSH
49342: LD_VAR 0 2
49346: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49347: LD_VAR 0 3
49351: PUSH
49352: LD_VAR 0 2
49356: ARRAY
49357: PUSH
49358: LD_VAR 0 5
49362: ARRAY
49363: PUSH
49364: LD_INT 1
49366: ARRAY
49367: PPUSH
49368: LD_VAR 0 3
49372: PUSH
49373: LD_VAR 0 2
49377: ARRAY
49378: PUSH
49379: LD_VAR 0 5
49383: ARRAY
49384: PUSH
49385: LD_INT 2
49387: ARRAY
49388: PPUSH
49389: LD_VAR 0 3
49393: PUSH
49394: LD_VAR 0 2
49398: ARRAY
49399: PUSH
49400: LD_VAR 0 5
49404: ARRAY
49405: PUSH
49406: LD_INT 3
49408: ARRAY
49409: PPUSH
49410: LD_VAR 0 3
49414: PUSH
49415: LD_VAR 0 2
49419: ARRAY
49420: PUSH
49421: LD_VAR 0 5
49425: ARRAY
49426: PUSH
49427: LD_INT 4
49429: ARRAY
49430: PPUSH
49431: LD_INT 80
49433: PPUSH
49434: CALL 7770 0 5
// result := Join ( result , CreateVehicle ) ;
49438: LD_ADDR_VAR 0 4
49442: PUSH
49443: LD_VAR 0 4
49447: PPUSH
49448: CALL_OW 45
49452: PPUSH
49453: CALL 40940 0 2
49457: ST_TO_ADDR
// end ;
49458: GO 49269
49460: POP
49461: POP
// end ;
49462: LD_VAR 0 4
49466: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49467: LD_INT 0
49469: PPUSH
49470: PPUSH
// for i in mpBattleFlags do
49471: LD_ADDR_VAR 0 3
49475: PUSH
49476: LD_EXP 21
49480: PUSH
49481: FOR_IN
49482: IFFALSE 49559
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49484: LD_VAR 0 3
49488: PPUSH
49489: LD_INT 1
49491: PUSH
49492: LD_VAR 0 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_VAR 0 1
49508: PUSH
49509: LD_REAL  7.00000000000000E-0001
49512: MUL
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: LD_VAR 0 1
49525: PUSH
49526: LD_REAL  4.00000000000000E-0001
49529: MUL
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 20
49537: PUSH
49538: LD_VAR 0 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: PPUSH
49553: CALL_OW 423
49557: GO 49481
49559: POP
49560: POP
// end ;
49561: LD_VAR 0 2
49565: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49566: LD_INT 100
49568: IFFALSE 49663
49570: GO 49572
49572: DISABLE
49573: LD_INT 0
49575: PPUSH
49576: PPUSH
// begin if mpBattleFlag <= 0 then
49577: LD_EXP 20
49581: PUSH
49582: LD_INT 0
49584: LESSEQUAL
49585: IFFALSE 49589
// exit ;
49587: GO 49663
// strength := 100 ;
49589: LD_ADDR_VAR 0 2
49593: PUSH
49594: LD_INT 100
49596: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49597: LD_EXP 20
49601: PPUSH
49602: CALL_OW 67
// strength := Dec ( strength ) ;
49606: LD_ADDR_VAR 0 2
49610: PUSH
49611: LD_VAR 0 2
49615: PPUSH
49616: CALL 42335 0 1
49620: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49621: LD_VAR 0 2
49625: PPUSH
49626: CALL 49467 0 1
// until not strength ;
49630: LD_VAR 0 2
49634: NOT
49635: IFFALSE 49597
// for i in mpBattleFlags do
49637: LD_ADDR_VAR 0 1
49641: PUSH
49642: LD_EXP 21
49646: PUSH
49647: FOR_IN
49648: IFFALSE 49661
// KillBattleFlag ( i ) ;
49650: LD_VAR 0 1
49654: PPUSH
49655: CALL_OW 419
49659: GO 49647
49661: POP
49662: POP
// end ;
49663: PPOPN 2
49665: END
// every 0 0$1 marked mpActive do var side , tmp ;
49666: GO 49668
49668: DISABLE
49669: LD_INT 0
49671: PPUSH
49672: PPUSH
// begin if mpSibBomb <= 1 then
49673: LD_EXP 26
49677: PUSH
49678: LD_INT 1
49680: LESSEQUAL
49681: IFFALSE 49685
// exit ;
49683: GO 49758
// tmp := mpSibBomb ;
49685: LD_ADDR_VAR 0 2
49689: PUSH
49690: LD_EXP 26
49694: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49695: LD_INT 35
49697: PPUSH
49698: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49702: LD_ADDR_VAR 0 2
49706: PUSH
49707: LD_VAR 0 2
49711: PUSH
49712: LD_INT 35
49714: MINUS
49715: ST_TO_ADDR
// until not tmp ;
49716: LD_VAR 0 2
49720: NOT
49721: IFFALSE 49695
// for side := 1 to 8 do
49723: LD_ADDR_VAR 0 1
49727: PUSH
49728: DOUBLE
49729: LD_INT 1
49731: DEC
49732: ST_TO_ADDR
49733: LD_INT 8
49735: PUSH
49736: FOR_TO
49737: IFFALSE 49756
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49739: LD_INT 25
49741: PPUSH
49742: LD_VAR 0 1
49746: PPUSH
49747: LD_INT 1
49749: PPUSH
49750: CALL_OW 322
49754: GO 49736
49756: POP
49757: POP
// end ;
49758: PPOPN 2
49760: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49761: LD_INT 0
49763: PPUSH
49764: PPUSH
49765: PPUSH
// mpBuildUpTimeDelay := 0 ;
49766: LD_ADDR_EXP 44
49770: PUSH
49771: LD_INT 0
49773: ST_TO_ADDR
// if not mpBuildUpTime then
49774: LD_EXP 18
49778: NOT
49779: IFFALSE 49783
// exit ;
49781: GO 49972
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49783: LD_ADDR_EXP 44
49787: PUSH
49788: LD_INT 8400
49790: PUSH
49791: LD_INT 2100
49793: PUSH
49794: LD_EXP 18
49798: MUL
49799: PLUS
49800: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49801: LD_ADDR_EXP 45
49805: PUSH
49806: LD_INT 1
49808: ST_TO_ADDR
// for i := 1 to 8 do
49809: LD_ADDR_VAR 0 2
49813: PUSH
49814: DOUBLE
49815: LD_INT 1
49817: DEC
49818: ST_TO_ADDR
49819: LD_INT 8
49821: PUSH
49822: FOR_TO
49823: IFFALSE 49970
// if mpSidePositions [ i ] then
49825: LD_EXP 5
49829: PUSH
49830: LD_VAR 0 2
49834: ARRAY
49835: IFFALSE 49968
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49837: LD_EXP 17
49841: PUSH
49842: LD_EXP 5
49846: PUSH
49847: LD_VAR 0 2
49851: ARRAY
49852: ARRAY
49853: PPUSH
49854: LD_INT 5
49856: PPUSH
49857: CALL_OW 424
// for j := 1 to 8 do
49861: LD_ADDR_VAR 0 3
49865: PUSH
49866: DOUBLE
49867: LD_INT 1
49869: DEC
49870: ST_TO_ADDR
49871: LD_INT 8
49873: PUSH
49874: FOR_TO
49875: IFFALSE 49966
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49877: LD_EXP 5
49881: PUSH
49882: LD_VAR 0 3
49886: ARRAY
49887: IFFALSE 49936
49889: PUSH
49890: LD_EXP 6
49894: PUSH
49895: LD_VAR 0 2
49899: ARRAY
49900: PUSH
49901: LD_EXP 6
49905: PUSH
49906: LD_VAR 0 3
49910: ARRAY
49911: NONEQUAL
49912: IFTRUE 49935
49914: PUSH
49915: LD_EXP 9
49919: NOT
49920: IFFALSE 49934
49922: PUSH
49923: LD_VAR 0 2
49927: PUSH
49928: LD_VAR 0 3
49932: NONEQUAL
49933: AND
49934: OR
49935: AND
49936: IFFALSE 49964
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49938: LD_VAR 0 3
49942: PPUSH
49943: LD_EXP 17
49947: PUSH
49948: LD_EXP 5
49952: PUSH
49953: LD_VAR 0 2
49957: ARRAY
49958: ARRAY
49959: PPUSH
49960: CALL_OW 333
49964: GO 49874
49966: POP
49967: POP
// end ;
49968: GO 49822
49970: POP
49971: POP
// end ;
49972: LD_VAR 0 1
49976: RET
// function EndBuildUp ; var i , j ; begin
49977: LD_INT 0
49979: PPUSH
49980: PPUSH
49981: PPUSH
// mpBuildUpTimeActive := false ;
49982: LD_ADDR_EXP 45
49986: PUSH
49987: LD_INT 0
49989: ST_TO_ADDR
// for i := 1 to 8 do
49990: LD_ADDR_VAR 0 2
49994: PUSH
49995: DOUBLE
49996: LD_INT 1
49998: DEC
49999: ST_TO_ADDR
50000: LD_INT 8
50002: PUSH
50003: FOR_TO
50004: IFFALSE 50151
// if mpSidePositions [ i ] then
50006: LD_EXP 5
50010: PUSH
50011: LD_VAR 0 2
50015: ARRAY
50016: IFFALSE 50149
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50018: LD_EXP 17
50022: PUSH
50023: LD_EXP 5
50027: PUSH
50028: LD_VAR 0 2
50032: ARRAY
50033: ARRAY
50034: PPUSH
50035: LD_INT 0
50037: PPUSH
50038: CALL_OW 424
// for j := 1 to 8 do
50042: LD_ADDR_VAR 0 3
50046: PUSH
50047: DOUBLE
50048: LD_INT 1
50050: DEC
50051: ST_TO_ADDR
50052: LD_INT 8
50054: PUSH
50055: FOR_TO
50056: IFFALSE 50147
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50058: LD_EXP 5
50062: PUSH
50063: LD_VAR 0 3
50067: ARRAY
50068: IFFALSE 50117
50070: PUSH
50071: LD_EXP 6
50075: PUSH
50076: LD_VAR 0 2
50080: ARRAY
50081: PUSH
50082: LD_EXP 6
50086: PUSH
50087: LD_VAR 0 3
50091: ARRAY
50092: NONEQUAL
50093: IFTRUE 50116
50095: PUSH
50096: LD_EXP 9
50100: NOT
50101: IFFALSE 50115
50103: PUSH
50104: LD_VAR 0 2
50108: PUSH
50109: LD_VAR 0 3
50113: NONEQUAL
50114: AND
50115: OR
50116: AND
50117: IFFALSE 50145
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50119: LD_VAR 0 3
50123: PPUSH
50124: LD_EXP 17
50128: PUSH
50129: LD_EXP 5
50133: PUSH
50134: LD_VAR 0 2
50138: ARRAY
50139: ARRAY
50140: PPUSH
50141: CALL_OW 334
50145: GO 50055
50147: POP
50148: POP
// end ;
50149: GO 50003
50151: POP
50152: POP
// end ;
50153: LD_VAR 0 1
50157: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50158: LD_EXP 45
50162: IFFALSE 50341
50164: GO 50166
50166: DISABLE
50167: LD_INT 0
50169: PPUSH
50170: PPUSH
// begin for i := 1 to 8 do
50171: LD_ADDR_VAR 0 1
50175: PUSH
50176: DOUBLE
50177: LD_INT 1
50179: DEC
50180: ST_TO_ADDR
50181: LD_INT 8
50183: PUSH
50184: FOR_TO
50185: IFFALSE 50338
// if mpSidePositions [ i ] then
50187: LD_EXP 5
50191: PUSH
50192: LD_VAR 0 1
50196: ARRAY
50197: IFFALSE 50336
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50199: LD_ADDR_VAR 0 2
50203: PUSH
50204: LD_EXP 17
50208: PUSH
50209: LD_EXP 5
50213: PUSH
50214: LD_VAR 0 1
50218: ARRAY
50219: ARRAY
50220: PPUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 21
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 21
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 22
50251: PUSH
50252: LD_OWVAR 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PPUSH
50265: CALL_OW 70
50269: PUSH
50270: FOR_IN
50271: IFFALSE 50334
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50273: LD_EXP 6
50277: PUSH
50278: LD_VAR 0 1
50282: ARRAY
50283: PUSH
50284: LD_EXP 6
50288: PUSH
50289: LD_OWVAR 2
50293: ARRAY
50294: NONEQUAL
50295: IFTRUE 50318
50297: PUSH
50298: LD_EXP 9
50302: NOT
50303: IFFALSE 50317
50305: PUSH
50306: LD_VAR 0 1
50310: PUSH
50311: LD_OWVAR 2
50315: NONEQUAL
50316: AND
50317: OR
50318: IFFALSE 50332
// ComMoveToArea ( un , BuildUpEscape ) ;
50320: LD_VAR 0 2
50324: PPUSH
50325: LD_INT 13
50327: PPUSH
50328: CALL_OW 113
50332: GO 50270
50334: POP
50335: POP
50336: GO 50184
50338: POP
50339: POP
// enable ;
50340: ENABLE
// end ;
50341: PPOPN 2
50343: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50344: LD_EXP 18
50348: IFFALSE 50398
50350: GO 50352
50352: DISABLE
50353: LD_INT 0
50355: PPUSH
// begin tmp := mpBuildUpTime ;
50356: LD_ADDR_VAR 0 1
50360: PUSH
50361: LD_EXP 18
50365: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50366: LD_INT 35
50368: PPUSH
50369: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50373: LD_ADDR_VAR 0 1
50377: PUSH
50378: LD_VAR 0 1
50382: PUSH
50383: LD_INT 35
50385: MINUS
50386: ST_TO_ADDR
// until not tmp ;
50387: LD_VAR 0 1
50391: NOT
50392: IFFALSE 50366
// EndBuildUp ;
50394: CALL 49977 0 0
// end ;
50398: PPOPN 1
50400: END
// every 0 0$1 trigger mpActive marked mpWin do
50401: LD_INT 100
50403: IFFALSE 50437
50405: GO 50407
50407: DISABLE
// begin if IAmServer then
50408: CALL_OW 518
50412: IFFALSE 50421
// wait ( 0 0$3 ) ;
50414: LD_INT 105
50416: PPUSH
50417: CALL_OW 67
// if Multiplayer then
50421: LD_OWVAR 4
50425: IFFALSE 50433
// YouWinInMultiplayer else
50427: CALL_OW 106
50431: GO 50437
// YouWin ;
50433: CALL_OW 103
// end ;
50437: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50438: LD_INT 0
50440: PPUSH
// result := false ;
50441: LD_ADDR_VAR 0 3
50445: PUSH
50446: LD_INT 0
50448: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50449: LD_VAR 0 1
50453: PUSH
50454: LD_INT 1
50456: DOUBLE
50457: EQUAL
50458: IFTRUE 50468
50460: LD_INT 5
50462: DOUBLE
50463: EQUAL
50464: IFTRUE 50468
50466: GO 50541
50468: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50469: LD_ADDR_VAR 0 3
50473: PUSH
50474: LD_INT 22
50476: PUSH
50477: LD_VAR 0 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 21
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 33
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 33
50511: PUSH
50512: LD_INT 5
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PPUSH
50529: CALL_OW 69
50533: PPUSH
50534: CALL 5008 0 1
50538: ST_TO_ADDR
// end ; GameTypeSurvival :
50539: GO 50780
50541: LD_INT 2
50543: DOUBLE
50544: EQUAL
50545: IFTRUE 50549
50547: GO 50679
50549: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50550: LD_ADDR_VAR 0 3
50554: PUSH
50555: LD_INT 22
50557: PUSH
50558: LD_VAR 0 2
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: LD_INT 30
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 30
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PPUSH
50599: CALL_OW 69
50603: PPUSH
50604: CALL 5008 0 1
50608: IFFALSE 50676
50610: PUSH
50611: LD_INT 22
50613: PUSH
50614: LD_VAR 0 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 21
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 33
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 33
50648: PUSH
50649: LD_INT 5
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PPUSH
50666: CALL_OW 69
50670: PPUSH
50671: CALL 5008 0 1
50675: AND
50676: ST_TO_ADDR
// end ; GameTypeKing :
50677: GO 50780
50679: LD_INT 3
50681: DOUBLE
50682: EQUAL
50683: IFTRUE 50687
50685: GO 50779
50687: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50688: LD_ADDR_VAR 0 3
50692: PUSH
50693: LD_INT 22
50695: PUSH
50696: LD_VAR 0 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 21
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 33
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 33
50730: PUSH
50731: LD_INT 5
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PPUSH
50748: CALL_OW 69
50752: PPUSH
50753: CALL 5008 0 1
50757: IFFALSE 50776
50759: PUSH
50760: LD_VAR 0 2
50764: PPUSH
50765: CALL 54633 0 1
50769: PUSH
50770: LD_EXP 33
50774: LESS
50775: AND
50776: ST_TO_ADDR
// end ; end ;
50777: GO 50780
50779: POP
// end ;
50780: LD_VAR 0 3
50784: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50785: LD_INT 100
50787: IFFALSE 51017
50789: GO 50791
50791: DISABLE
50792: LD_INT 0
50794: PPUSH
50795: PPUSH
// begin if Multiplayer then
50796: LD_OWVAR 4
50800: IFFALSE 50808
// SetPlayerSpectator ( ) else
50802: CALL_OW 572
50806: GO 50817
// FogOff ( your_side ) ;
50808: LD_OWVAR 2
50812: PPUSH
50813: CALL_OW 344
// repeat gameIsOn := false ;
50817: LD_ADDR_VAR 0 1
50821: PUSH
50822: LD_INT 0
50824: ST_TO_ADDR
// for i := 1 to 8 do
50825: LD_ADDR_VAR 0 2
50829: PUSH
50830: DOUBLE
50831: LD_INT 1
50833: DEC
50834: ST_TO_ADDR
50835: LD_INT 8
50837: PUSH
50838: FOR_TO
50839: IFFALSE 50969
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50841: LD_EXP 5
50845: PUSH
50846: LD_VAR 0 2
50850: ARRAY
50851: IFFALSE 50864
50853: PUSH
50854: LD_VAR 0 2
50858: PPUSH
50859: CALL_OW 108
50863: AND
50864: IFFALSE 50878
50866: PUSH
50867: LD_VAR 0 2
50871: PUSH
50872: LD_OWVAR 2
50876: NONEQUAL
50877: AND
50878: IFFALSE 50967
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50880: LD_EXP 6
50884: PUSH
50885: LD_VAR 0 2
50889: ARRAY
50890: NOT
50891: IFTRUE 50939
50893: PUSH
50894: LD_EXP 6
50898: PUSH
50899: LD_VAR 0 2
50903: ARRAY
50904: PUSH
50905: LD_EXP 6
50909: PUSH
50910: LD_OWVAR 2
50914: ARRAY
50915: NONEQUAL
50916: IFFALSE 50938
50918: PUSH
50919: LD_OWVAR 2
50923: PPUSH
50924: LD_VAR 0 2
50928: PPUSH
50929: CALL_OW 81
50933: PUSH
50934: LD_INT 1
50936: NONEQUAL
50937: AND
50938: OR
50939: IFFALSE 50967
// if HasPowerByGameType ( mpGameType , i ) then
50941: LD_EXP 1
50945: PPUSH
50946: LD_VAR 0 2
50950: PPUSH
50951: CALL 50438 0 2
50955: IFFALSE 50967
// begin gameIsOn := true ;
50957: LD_ADDR_VAR 0 1
50961: PUSH
50962: LD_INT 1
50964: ST_TO_ADDR
// break ;
50965: GO 50969
// end ;
50967: GO 50838
50969: POP
50970: POP
// wait ( 100 ) ;
50971: LD_INT 100
50973: PPUSH
50974: CALL_OW 67
// until not gameIsOn ;
50978: LD_VAR 0 1
50982: NOT
50983: IFFALSE 50817
// if IAmServer then
50985: CALL_OW 518
50989: IFFALSE 50998
// wait ( 0 0$3 ) ;
50991: LD_INT 105
50993: PPUSH
50994: CALL_OW 67
// if Multiplayer then
50998: LD_OWVAR 4
51002: IFFALSE 51010
// YouLostInMultiplayer else
51004: CALL_OW 107
51008: GO 51017
// YouLost (  ) ;
51010: LD_STRING 
51012: PPUSH
51013: CALL_OW 104
// end ;
51017: PPOPN 2
51019: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51020: LD_EXP 31
51024: IFFALSE 51408
51026: GO 51028
51028: DISABLE
51029: LD_INT 0
51031: PPUSH
51032: PPUSH
51033: PPUSH
51034: PPUSH
51035: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51036: LD_ADDR_VAR 0 5
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 5
51055: PUSH
51056: LD_INT 6
51058: PUSH
51059: LD_INT 7
51061: PUSH
51062: LD_INT 8
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51075: LD_INT 350
51077: PPUSH
51078: CALL_OW 67
// for i := 1 to 8 do
51082: LD_ADDR_VAR 0 1
51086: PUSH
51087: DOUBLE
51088: LD_INT 1
51090: DEC
51091: ST_TO_ADDR
51092: LD_INT 8
51094: PUSH
51095: FOR_TO
51096: IFFALSE 51378
// begin j := sides [ i ] ;
51098: LD_ADDR_VAR 0 2
51102: PUSH
51103: LD_VAR 0 5
51107: PUSH
51108: LD_VAR 0 1
51112: ARRAY
51113: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51114: LD_EXP 38
51118: PUSH
51119: LD_VAR 0 2
51123: ARRAY
51124: PPUSH
51125: CALL 5008 0 1
51129: IFFALSE 51142
51131: PUSH
51132: LD_VAR 0 2
51136: PPUSH
51137: CALL_OW 108
51141: AND
51142: IFFALSE 51160
51144: PUSH
51145: LD_EXP 1
51149: PPUSH
51150: LD_VAR 0 2
51154: PPUSH
51155: CALL 50438 0 2
51159: AND
51160: IFFALSE 51376
// begin wait ( mpRespawn div 2 ) ;
51162: LD_EXP 31
51166: PUSH
51167: LD_INT 2
51169: DIV
51170: PPUSH
51171: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51175: LD_ADDR_VAR 0 3
51179: PUSH
51180: LD_INT 22
51182: PUSH
51183: LD_VAR 0 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 50
51194: PUSH
51195: EMPTY
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 30
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 30
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: PPUSH
51231: CALL_OW 69
51235: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51236: LD_VAR 0 3
51240: NOT
51241: IFTRUE 51255
51243: PUSH
51244: LD_VAR 0 2
51248: PPUSH
51249: CALL_OW 108
51253: NOT
51254: OR
51255: IFTRUE 51274
51257: PUSH
51258: LD_EXP 1
51262: PPUSH
51263: LD_VAR 0 2
51267: PPUSH
51268: CALL 50438 0 2
51272: NOT
51273: OR
51274: IFFALSE 51278
// continue ;
51276: GO 51095
// spawn := tmp [ 1 ] ;
51278: LD_ADDR_VAR 0 4
51282: PUSH
51283: LD_VAR 0 3
51287: PUSH
51288: LD_INT 1
51290: ARRAY
51291: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51292: LD_EXP 38
51296: PUSH
51297: LD_VAR 0 2
51301: ARRAY
51302: PUSH
51303: LD_INT 1
51305: ARRAY
51306: PPUSH
51307: LD_VAR 0 4
51311: PPUSH
51312: CALL_OW 250
51316: PPUSH
51317: LD_VAR 0 4
51321: PPUSH
51322: CALL_OW 251
51326: PPUSH
51327: LD_INT 32
51329: PPUSH
51330: LD_INT 1
51332: PPUSH
51333: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51337: LD_ADDR_EXP 38
51341: PUSH
51342: LD_EXP 38
51346: PPUSH
51347: LD_VAR 0 2
51351: PPUSH
51352: LD_EXP 38
51356: PUSH
51357: LD_VAR 0 2
51361: ARRAY
51362: PPUSH
51363: LD_INT 1
51365: PPUSH
51366: CALL_OW 3
51370: PPUSH
51371: CALL_OW 1
51375: ST_TO_ADDR
// end ; end ;
51376: GO 51095
51378: POP
51379: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51380: LD_ADDR_VAR 0 5
51384: PUSH
51385: LD_VAR 0 5
51389: PPUSH
51390: LD_INT 1
51392: PPUSH
51393: LD_INT 8
51395: PPUSH
51396: LD_INT 1
51398: PPUSH
51399: CALL 7300 0 4
51403: ST_TO_ADDR
// until false ;
51404: LD_INT 0
51406: IFFALSE 51075
// end ;
51408: PPOPN 5
51410: END
// every 0 0$1 marked mpActive do
51411: GO 51413
51413: DISABLE
// begin enable ;
51414: ENABLE
// if not mpDisplayStrings then
51415: LD_EXP 36
51419: NOT
51420: IFFALSE 51431
// begin display_strings := [ ] ;
51422: LD_ADDR_OWVAR 47
51426: PUSH
51427: EMPTY
51428: ST_TO_ADDR
// exit ;
51429: GO 51441
// end ; display_strings := mpDisplayStrings ;
51431: LD_ADDR_OWVAR 47
51435: PUSH
51436: LD_EXP 36
51440: ST_TO_ADDR
// end ; end_of_file
51441: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51442: LD_INT 0
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
51450: PPUSH
51451: PPUSH
51452: PPUSH
// if GetType ( un ) = unit_vehicle then
51453: LD_VAR 0 1
51457: PPUSH
51458: CALL_OW 247
51462: PUSH
51463: LD_INT 2
51465: EQUAL
51466: IFFALSE 51470
// exit ;
51468: GO 52144
// side := GetSide ( un ) ;
51470: LD_ADDR_VAR 0 9
51474: PUSH
51475: LD_VAR 0 1
51479: PPUSH
51480: CALL_OW 255
51484: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51485: LD_EXP 1
51489: PUSH
51490: LD_INT 2
51492: EQUAL
51493: IFFALSE 51587
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51495: LD_VAR 0 1
51499: PPUSH
51500: CALL_OW 266
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: IN
51515: IFFALSE 51587
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51517: LD_ADDR_VAR 0 3
51521: PUSH
51522: LD_INT 22
51524: PUSH
51525: LD_VAR 0 9
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 21
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 33
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PPUSH
51566: CALL_OW 69
51570: PUSH
51571: FOR_IN
51572: IFFALSE 51585
// KillUnit ( i ) ;
51574: LD_VAR 0 3
51578: PPUSH
51579: CALL_OW 66
51583: GO 51571
51585: POP
51586: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51587: LD_VAR 0 1
51591: PPUSH
51592: CALL_OW 257
51596: PUSH
51597: LD_INT 12
51599: PUSH
51600: LD_INT 17
51602: PUSH
51603: LD_INT 15
51605: PUSH
51606: LD_INT 16
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: IN
51615: IFTRUE 51632
51617: PUSH
51618: LD_VAR 0 1
51622: PPUSH
51623: CALL_OW 263
51627: PUSH
51628: LD_INT 5
51630: EQUAL
51631: OR
51632: IFFALSE 51869
// begin tag := 0 ;
51634: LD_ADDR_VAR 0 5
51638: PUSH
51639: LD_INT 0
51641: ST_TO_ADDR
// for i := 1 to 8 do
51642: LD_ADDR_VAR 0 3
51646: PUSH
51647: DOUBLE
51648: LD_INT 1
51650: DEC
51651: ST_TO_ADDR
51652: LD_INT 8
51654: PUSH
51655: FOR_TO
51656: IFFALSE 51690
// if un in mpApePosIndex [ i ] then
51658: LD_VAR 0 1
51662: PUSH
51663: LD_EXP 30
51667: PUSH
51668: LD_VAR 0 3
51672: ARRAY
51673: IN
51674: IFFALSE 51688
// begin tag := i ;
51676: LD_ADDR_VAR 0 5
51680: PUSH
51681: LD_VAR 0 3
51685: ST_TO_ADDR
// break ;
51686: GO 51690
// end ;
51688: GO 51655
51690: POP
51691: POP
// if not tag then
51692: LD_VAR 0 5
51696: NOT
51697: IFFALSE 51701
// exit ;
51699: GO 52144
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51701: LD_ADDR_VAR 0 7
51705: PUSH
51706: LD_EXP 29
51710: PUSH
51711: LD_EXP 5
51715: PUSH
51716: LD_VAR 0 5
51720: ARRAY
51721: ARRAY
51722: ST_TO_ADDR
// if not area then
51723: LD_VAR 0 7
51727: NOT
51728: IFFALSE 51732
// exit ;
51730: GO 52144
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
51732: LD_INT 14700
51734: PUSH
51735: LD_VAR 0 1
51739: PUSH
51740: LD_INT 5
51742: MOD
51743: PUSH
51744: LD_INT 1
51746: PLUS
51747: PUSH
51748: LD_INT 700
51750: MUL
51751: PLUS
51752: PPUSH
51753: CALL_OW 67
// repeat wait ( 10 ) ;
51757: LD_INT 10
51759: PPUSH
51760: CALL_OW 67
// until not mpBlockRespThread ;
51764: LD_EXP 43
51768: NOT
51769: IFFALSE 51757
// mpBlockRespThread := true ;
51771: LD_ADDR_EXP 43
51775: PUSH
51776: LD_INT 1
51778: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51779: LD_INT 0
51781: PPUSH
51782: CALL 37067 0 1
// ape := CreateHuman ;
51786: LD_ADDR_VAR 0 4
51790: PUSH
51791: CALL_OW 44
51795: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51796: LD_ADDR_EXP 30
51800: PUSH
51801: LD_EXP 30
51805: PPUSH
51806: LD_VAR 0 5
51810: PPUSH
51811: LD_EXP 30
51815: PUSH
51816: LD_VAR 0 5
51820: ARRAY
51821: PPUSH
51822: LD_VAR 0 4
51826: PPUSH
51827: CALL 40940 0 2
51831: PPUSH
51832: CALL_OW 1
51836: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51837: LD_VAR 0 4
51841: PPUSH
51842: LD_VAR 0 7
51846: PPUSH
51847: LD_INT 0
51849: PPUSH
51850: CALL_OW 49
// wait ( 10 ) ;
51854: LD_INT 10
51856: PPUSH
51857: CALL_OW 67
// mpBlockRespThread := false ;
51861: LD_ADDR_EXP 43
51865: PUSH
51866: LD_INT 0
51868: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51869: LD_VAR 0 1
51873: PPUSH
51874: CALL_OW 247
51878: PUSH
51879: LD_INT 1
51881: EQUAL
51882: IFFALSE 51899
51884: PUSH
51885: LD_VAR 0 1
51889: PPUSH
51890: CALL_OW 248
51894: PUSH
51895: LD_INT 0
51897: GREATER
51898: AND
51899: IFFALSE 52144
// begin if not mpRespawn then
51901: LD_EXP 31
51905: NOT
51906: IFFALSE 51910
// exit ;
51908: GO 52144
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51910: LD_VAR 0 9
51914: PPUSH
51915: CALL_OW 108
51919: NOT
51920: IFFALSE 51939
51922: PUSH
51923: LD_EXP 1
51927: PPUSH
51928: LD_VAR 0 9
51932: PPUSH
51933: CALL 50438 0 2
51937: NOT
51938: AND
51939: IFFALSE 51943
// exit ;
51941: GO 52144
// side := GetSide ( un ) ;
51943: LD_ADDR_VAR 0 9
51947: PUSH
51948: LD_VAR 0 1
51952: PPUSH
51953: CALL_OW 255
51957: ST_TO_ADDR
// nation := GetNation ( un ) ;
51958: LD_ADDR_VAR 0 8
51962: PUSH
51963: LD_VAR 0 1
51967: PPUSH
51968: CALL_OW 248
51972: ST_TO_ADDR
// class := GetClass ( un ) ;
51973: LD_ADDR_VAR 0 6
51977: PUSH
51978: LD_VAR 0 1
51982: PPUSH
51983: CALL_OW 257
51987: ST_TO_ADDR
// if class > 4 then
51988: LD_VAR 0 6
51992: PUSH
51993: LD_INT 4
51995: GREATER
51996: IFFALSE 52006
// class := 1 ;
51998: LD_ADDR_VAR 0 6
52002: PUSH
52003: LD_INT 1
52005: ST_TO_ADDR
// repeat wait ( 10 ) ;
52006: LD_INT 10
52008: PPUSH
52009: CALL_OW 67
// until not mpBlockRespThread ;
52013: LD_EXP 43
52017: NOT
52018: IFFALSE 52006
// mpBlockRespThread := true ;
52020: LD_ADDR_EXP 43
52024: PUSH
52025: LD_INT 1
52027: ST_TO_ADDR
// uc_side := side ;
52028: LD_ADDR_OWVAR 20
52032: PUSH
52033: LD_VAR 0 9
52037: ST_TO_ADDR
// uc_nation := nation ;
52038: LD_ADDR_OWVAR 21
52042: PUSH
52043: LD_VAR 0 8
52047: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52048: LD_INT 0
52050: PPUSH
52051: LD_VAR 0 6
52055: PPUSH
52056: LD_INT 2
52058: PPUSH
52059: CALL_OW 380
// un := CreateHuman ;
52063: LD_ADDR_VAR 0 1
52067: PUSH
52068: CALL_OW 44
52072: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52073: LD_ADDR_EXP 38
52077: PUSH
52078: LD_EXP 38
52082: PPUSH
52083: LD_VAR 0 9
52087: PPUSH
52088: LD_EXP 38
52092: PUSH
52093: LD_VAR 0 9
52097: ARRAY
52098: PPUSH
52099: LD_EXP 38
52103: PUSH
52104: LD_VAR 0 9
52108: ARRAY
52109: PUSH
52110: LD_INT 1
52112: PLUS
52113: PPUSH
52114: LD_VAR 0 1
52118: PPUSH
52119: CALL_OW 1
52123: PPUSH
52124: CALL_OW 1
52128: ST_TO_ADDR
// wait ( 10 ) ;
52129: LD_INT 10
52131: PPUSH
52132: CALL_OW 67
// mpBlockRespThread := false ;
52136: LD_ADDR_EXP 43
52140: PUSH
52141: LD_INT 0
52143: ST_TO_ADDR
// end ; end ;
52144: LD_VAR 0 2
52148: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52149: LD_INT 0
52151: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52152: LD_VAR 0 1
52156: PPUSH
52157: CALL_OW 266
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: IN
52172: IFFALSE 52197
// SetBName ( building , @ & GetSide ( building ) ) ;
52174: LD_VAR 0 1
52178: PPUSH
52179: LD_STRING @
52181: PUSH
52182: LD_VAR 0 1
52186: PPUSH
52187: CALL_OW 255
52191: STR
52192: PPUSH
52193: CALL_OW 500
// end ;
52197: LD_VAR 0 2
52201: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52202: LD_INT 0
52204: PPUSH
52205: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52206: LD_EXP 1
52210: PUSH
52211: LD_INT 2
52213: EQUAL
52214: IFFALSE 52238
52216: PUSH
52217: LD_VAR 0 1
52221: PPUSH
52222: CALL_OW 266
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: IN
52237: AND
52238: IFFALSE 52317
// begin SetSide ( building , oldSide ) ;
52240: LD_VAR 0 1
52244: PPUSH
52245: LD_VAR 0 2
52249: PPUSH
52250: CALL_OW 235
// KillUnit ( building ) ;
52254: LD_VAR 0 1
52258: PPUSH
52259: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52263: LD_ADDR_VAR 0 5
52267: PUSH
52268: LD_INT 22
52270: PUSH
52271: LD_VAR 0 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 21
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PPUSH
52294: CALL_OW 69
52298: PUSH
52299: FOR_IN
52300: IFFALSE 52313
// KillUnit ( i ) ;
52302: LD_VAR 0 5
52306: PPUSH
52307: CALL_OW 66
52311: GO 52299
52313: POP
52314: POP
// exit ;
52315: GO 52362
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52317: LD_VAR 0 1
52321: PPUSH
52322: CALL_OW 266
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: IN
52337: IFFALSE 52362
// SetBName ( building , @ & GetSide ( building ) ) ;
52339: LD_VAR 0 1
52343: PPUSH
52344: LD_STRING @
52346: PUSH
52347: LD_VAR 0 1
52351: PPUSH
52352: CALL_OW 255
52356: STR
52357: PPUSH
52358: CALL_OW 500
// end ;
52362: LD_VAR 0 4
52366: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52367: LD_INT 0
52369: PPUSH
52370: PPUSH
52371: PPUSH
// if mpGameType <> GameTypeFamine then
52372: LD_EXP 1
52376: PUSH
52377: LD_INT 5
52379: NONEQUAL
52380: IFFALSE 52384
// exit ;
52382: GO 52598
// for i := 1 to mpGlobalOilDeposits do
52384: LD_ADDR_VAR 0 6
52388: PUSH
52389: DOUBLE
52390: LD_INT 1
52392: DEC
52393: ST_TO_ADDR
52394: LD_EXP 39
52398: PUSH
52399: FOR_TO
52400: IFFALSE 52596
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52402: LD_EXP 39
52406: PUSH
52407: LD_VAR 0 6
52411: ARRAY
52412: PUSH
52413: LD_INT 1
52415: ARRAY
52416: PPUSH
52417: LD_EXP 39
52421: PUSH
52422: LD_VAR 0 6
52426: ARRAY
52427: PUSH
52428: LD_INT 2
52430: ARRAY
52431: PPUSH
52432: CALL_OW 428
52436: PUSH
52437: LD_VAR 0 1
52441: EQUAL
52442: IFFALSE 52594
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52444: LD_ADDR_VAR 0 7
52448: PUSH
52449: LD_EXP 39
52453: PUSH
52454: LD_VAR 0 6
52458: ARRAY
52459: PUSH
52460: LD_INT 3
52462: ARRAY
52463: ST_TO_ADDR
// value := Dec ( value ) ;
52464: LD_ADDR_VAR 0 7
52468: PUSH
52469: LD_VAR 0 7
52473: PPUSH
52474: CALL 42335 0 1
52478: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52479: LD_ADDR_EXP 39
52483: PUSH
52484: LD_EXP 39
52488: PPUSH
52489: LD_VAR 0 6
52493: PPUSH
52494: LD_EXP 39
52498: PUSH
52499: LD_VAR 0 6
52503: ARRAY
52504: PPUSH
52505: LD_INT 3
52507: PPUSH
52508: LD_VAR 0 7
52512: PPUSH
52513: CALL_OW 1
52517: PPUSH
52518: CALL_OW 1
52522: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52523: LD_VAR 0 1
52527: PPUSH
52528: LD_VAR 0 7
52532: PPUSH
52533: CALL_OW 505
// if value = 0 then
52537: LD_VAR 0 7
52541: PUSH
52542: LD_INT 0
52544: EQUAL
52545: IFFALSE 52594
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52547: LD_EXP 39
52551: PUSH
52552: LD_VAR 0 6
52556: ARRAY
52557: PUSH
52558: LD_INT 1
52560: ARRAY
52561: PPUSH
52562: LD_EXP 39
52566: PUSH
52567: LD_VAR 0 6
52571: ARRAY
52572: PUSH
52573: LD_INT 2
52575: ARRAY
52576: PPUSH
52577: CALL_OW 63
// KillUnit ( building ) ;
52581: LD_VAR 0 1
52585: PPUSH
52586: CALL_OW 66
// exit ;
52590: POP
52591: POP
52592: GO 52598
// end ; end ; end ;
52594: GO 52399
52596: POP
52597: POP
// end ;
52598: LD_VAR 0 5
52602: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52603: LD_INT 0
52605: PPUSH
52606: PPUSH
52607: PPUSH
// if mpGameType <> GameTypeFamine then
52608: LD_EXP 1
52612: PUSH
52613: LD_INT 5
52615: NONEQUAL
52616: IFFALSE 52620
// exit ;
52618: GO 52834
// for i := 1 to mpGlobalSibDeposits do
52620: LD_ADDR_VAR 0 6
52624: PUSH
52625: DOUBLE
52626: LD_INT 1
52628: DEC
52629: ST_TO_ADDR
52630: LD_EXP 40
52634: PUSH
52635: FOR_TO
52636: IFFALSE 52832
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52638: LD_EXP 40
52642: PUSH
52643: LD_VAR 0 6
52647: ARRAY
52648: PUSH
52649: LD_INT 1
52651: ARRAY
52652: PPUSH
52653: LD_EXP 40
52657: PUSH
52658: LD_VAR 0 6
52662: ARRAY
52663: PUSH
52664: LD_INT 2
52666: ARRAY
52667: PPUSH
52668: CALL_OW 428
52672: PUSH
52673: LD_VAR 0 1
52677: EQUAL
52678: IFFALSE 52830
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52680: LD_ADDR_VAR 0 7
52684: PUSH
52685: LD_EXP 40
52689: PUSH
52690: LD_VAR 0 6
52694: ARRAY
52695: PUSH
52696: LD_INT 3
52698: ARRAY
52699: ST_TO_ADDR
// value := Dec ( value ) ;
52700: LD_ADDR_VAR 0 7
52704: PUSH
52705: LD_VAR 0 7
52709: PPUSH
52710: CALL 42335 0 1
52714: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52715: LD_ADDR_EXP 40
52719: PUSH
52720: LD_EXP 40
52724: PPUSH
52725: LD_VAR 0 6
52729: PPUSH
52730: LD_EXP 40
52734: PUSH
52735: LD_VAR 0 6
52739: ARRAY
52740: PPUSH
52741: LD_INT 3
52743: PPUSH
52744: LD_VAR 0 7
52748: PPUSH
52749: CALL_OW 1
52753: PPUSH
52754: CALL_OW 1
52758: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52759: LD_VAR 0 1
52763: PPUSH
52764: LD_VAR 0 7
52768: PPUSH
52769: CALL_OW 505
// if value = 0 then
52773: LD_VAR 0 7
52777: PUSH
52778: LD_INT 0
52780: EQUAL
52781: IFFALSE 52830
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52783: LD_EXP 40
52787: PUSH
52788: LD_VAR 0 6
52792: ARRAY
52793: PUSH
52794: LD_INT 1
52796: ARRAY
52797: PPUSH
52798: LD_EXP 40
52802: PUSH
52803: LD_VAR 0 6
52807: ARRAY
52808: PUSH
52809: LD_INT 2
52811: ARRAY
52812: PPUSH
52813: CALL_OW 63
// KillUnit ( building ) ;
52817: LD_VAR 0 1
52821: PPUSH
52822: CALL_OW 66
// exit ;
52826: POP
52827: POP
52828: GO 52834
// end ; end ; end ;
52830: GO 52635
52832: POP
52833: POP
// end ; end_of_file
52834: LD_VAR 0 5
52838: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
52839: LD_EXP 37
52843: IFFALSE 52851
52845: PUSH
52846: CALL 53061 0 0
52850: AND
52851: IFFALSE 52859
52853: PUSH
52854: LD_OWVAR 4
52858: AND
52859: IFFALSE 53058
52861: GO 52863
52863: DISABLE
52864: LD_INT 0
52866: PPUSH
52867: PPUSH
// begin canWin := false ;
52868: LD_ADDR_VAR 0 2
52872: PUSH
52873: LD_INT 0
52875: ST_TO_ADDR
// if not HasPower ( your_side ) then
52876: LD_OWVAR 2
52880: PPUSH
52881: CALL 53103 0 1
52885: NOT
52886: IFFALSE 52897
// begin Multiplayer_Loose_Message ;
52888: CALL_OW 521
// enable ( mpLose ) ;
52892: LD_INT 102
52894: ENABLE_MARKED
// end else
52895: GO 53058
// begin canWin := true ;
52897: LD_ADDR_VAR 0 2
52901: PUSH
52902: LD_INT 1
52904: ST_TO_ADDR
// for i := 1 to 8 do
52905: LD_ADDR_VAR 0 1
52909: PUSH
52910: DOUBLE
52911: LD_INT 1
52913: DEC
52914: ST_TO_ADDR
52915: LD_INT 8
52917: PUSH
52918: FOR_TO
52919: IFFALSE 53044
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52921: LD_EXP 5
52925: PUSH
52926: LD_VAR 0 1
52930: ARRAY
52931: IFFALSE 52944
52933: PUSH
52934: LD_VAR 0 1
52938: PPUSH
52939: CALL_OW 108
52943: AND
52944: IFFALSE 52958
52946: PUSH
52947: LD_VAR 0 1
52951: PUSH
52952: LD_OWVAR 2
52956: NONEQUAL
52957: AND
52958: IFFALSE 53042
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52960: LD_EXP 6
52964: PUSH
52965: LD_VAR 0 1
52969: ARRAY
52970: NOT
52971: IFTRUE 53019
52973: PUSH
52974: LD_EXP 6
52978: PUSH
52979: LD_VAR 0 1
52983: ARRAY
52984: PUSH
52985: LD_EXP 6
52989: PUSH
52990: LD_OWVAR 2
52994: ARRAY
52995: NONEQUAL
52996: IFFALSE 53018
52998: PUSH
52999: LD_OWVAR 2
53003: PPUSH
53004: LD_VAR 0 1
53008: PPUSH
53009: CALL_OW 81
53013: PUSH
53014: LD_INT 1
53016: NONEQUAL
53017: AND
53018: OR
53019: IFFALSE 53042
// if HasPower ( i ) then
53021: LD_VAR 0 1
53025: PPUSH
53026: CALL 53103 0 1
53030: IFFALSE 53042
// begin canWin := false ;
53032: LD_ADDR_VAR 0 2
53036: PUSH
53037: LD_INT 0
53039: ST_TO_ADDR
// break ;
53040: GO 53044
// end ;
53042: GO 52918
53044: POP
53045: POP
// if canWin then
53046: LD_VAR 0 2
53050: IFFALSE 53057
// enable ( mpWin ) else
53052: LD_INT 101
53054: ENABLE_MARKED
53055: GO 53058
// enable ;
53057: ENABLE
// end ; end ;
53058: PPOPN 2
53060: END
// function CanWinLoose ; begin
53061: LD_INT 0
53063: PPUSH
// result := true ;
53064: LD_ADDR_VAR 0 1
53068: PUSH
53069: LD_INT 1
53071: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53072: CALL_OW 531
53076: IFFALSE 53088
53078: PUSH
53079: CALL_OW 519
53083: PUSH
53084: LD_INT 1
53086: GREATER
53087: AND
53088: IFFALSE 53098
// result := false ;
53090: LD_ADDR_VAR 0 1
53094: PUSH
53095: LD_INT 0
53097: ST_TO_ADDR
// end ;
53098: LD_VAR 0 1
53102: RET
// function HasPower ( i ) ; begin
53103: LD_INT 0
53105: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53106: LD_ADDR_VAR 0 2
53110: PUSH
53111: LD_INT 22
53113: PUSH
53114: LD_VAR 0 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 21
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 33
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 33
53148: PUSH
53149: LD_INT 5
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PPUSH
53166: CALL_OW 69
53170: ST_TO_ADDR
// end ; end_of_file
53171: LD_VAR 0 2
53175: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53176: LD_EXP 37
53180: IFFALSE 53223
53182: GO 53184
53184: DISABLE
53185: LD_INT 0
53187: PPUSH
// begin for i := 1 to 8 do
53188: LD_ADDR_VAR 0 1
53192: PUSH
53193: DOUBLE
53194: LD_INT 1
53196: DEC
53197: ST_TO_ADDR
53198: LD_INT 8
53200: PUSH
53201: FOR_TO
53202: IFFALSE 53221
// SetRestrict ( b_depot , i , state_disabled ) ;
53204: LD_INT 0
53206: PPUSH
53207: LD_VAR 0 1
53211: PPUSH
53212: LD_INT 0
53214: PPUSH
53215: CALL_OW 324
53219: GO 53201
53221: POP
53222: POP
// end ;
53223: PPOPN 1
53225: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53226: LD_EXP 37
53230: IFFALSE 53238
53232: PUSH
53233: CALL 53448 0 0
53237: AND
53238: IFFALSE 53246
53240: PUSH
53241: LD_OWVAR 4
53245: AND
53246: IFFALSE 53445
53248: GO 53250
53250: DISABLE
53251: LD_INT 0
53253: PPUSH
53254: PPUSH
// begin canWin := false ;
53255: LD_ADDR_VAR 0 2
53259: PUSH
53260: LD_INT 0
53262: ST_TO_ADDR
// if not HasPower ( your_side ) then
53263: LD_OWVAR 2
53267: PPUSH
53268: CALL 53490 0 1
53272: NOT
53273: IFFALSE 53284
// begin Multiplayer_Loose_Message ;
53275: CALL_OW 521
// enable ( mpLose ) ;
53279: LD_INT 102
53281: ENABLE_MARKED
// end else
53282: GO 53445
// begin canWin := true ;
53284: LD_ADDR_VAR 0 2
53288: PUSH
53289: LD_INT 1
53291: ST_TO_ADDR
// for i := 1 to 8 do
53292: LD_ADDR_VAR 0 1
53296: PUSH
53297: DOUBLE
53298: LD_INT 1
53300: DEC
53301: ST_TO_ADDR
53302: LD_INT 8
53304: PUSH
53305: FOR_TO
53306: IFFALSE 53431
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53308: LD_EXP 5
53312: PUSH
53313: LD_VAR 0 1
53317: ARRAY
53318: IFFALSE 53331
53320: PUSH
53321: LD_VAR 0 1
53325: PPUSH
53326: CALL_OW 108
53330: AND
53331: IFFALSE 53345
53333: PUSH
53334: LD_VAR 0 1
53338: PUSH
53339: LD_OWVAR 2
53343: NONEQUAL
53344: AND
53345: IFFALSE 53429
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53347: LD_EXP 6
53351: PUSH
53352: LD_VAR 0 1
53356: ARRAY
53357: NOT
53358: IFTRUE 53406
53360: PUSH
53361: LD_EXP 6
53365: PUSH
53366: LD_VAR 0 1
53370: ARRAY
53371: PUSH
53372: LD_EXP 6
53376: PUSH
53377: LD_OWVAR 2
53381: ARRAY
53382: NONEQUAL
53383: IFFALSE 53405
53385: PUSH
53386: LD_OWVAR 2
53390: PPUSH
53391: LD_VAR 0 1
53395: PPUSH
53396: CALL_OW 81
53400: PUSH
53401: LD_INT 1
53403: NONEQUAL
53404: AND
53405: OR
53406: IFFALSE 53429
// if HasPower ( i ) then
53408: LD_VAR 0 1
53412: PPUSH
53413: CALL 53490 0 1
53417: IFFALSE 53429
// begin canWin := false ;
53419: LD_ADDR_VAR 0 2
53423: PUSH
53424: LD_INT 0
53426: ST_TO_ADDR
// break ;
53427: GO 53431
// end ;
53429: GO 53305
53431: POP
53432: POP
// if canWin then
53433: LD_VAR 0 2
53437: IFFALSE 53444
// enable ( mpWin ) else
53439: LD_INT 101
53441: ENABLE_MARKED
53442: GO 53445
// enable ;
53444: ENABLE
// end ; end ;
53445: PPOPN 2
53447: END
// function CanWinLoose ; begin
53448: LD_INT 0
53450: PPUSH
// result := true ;
53451: LD_ADDR_VAR 0 1
53455: PUSH
53456: LD_INT 1
53458: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53459: CALL_OW 531
53463: IFFALSE 53475
53465: PUSH
53466: CALL_OW 519
53470: PUSH
53471: LD_INT 1
53473: GREATER
53474: AND
53475: IFFALSE 53485
// result := false ;
53477: LD_ADDR_VAR 0 1
53481: PUSH
53482: LD_INT 0
53484: ST_TO_ADDR
// end ;
53485: LD_VAR 0 1
53489: RET
// function HasPower ( i ) ; begin
53490: LD_INT 0
53492: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53493: LD_INT 22
53495: PUSH
53496: LD_VAR 0 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 30
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 30
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PPUSH
53537: CALL_OW 69
53541: NOT
53542: IFFALSE 53546
// exit ;
53544: GO 53611
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53546: LD_ADDR_VAR 0 2
53550: PUSH
53551: LD_INT 22
53553: PUSH
53554: LD_VAR 0 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 21
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 33
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 33
53588: PUSH
53589: LD_INT 5
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PPUSH
53606: CALL_OW 69
53610: ST_TO_ADDR
// end ; end_of_file
53611: LD_VAR 0 2
53615: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
53616: LD_EXP 37
53620: IFFALSE 53959
53622: GO 53624
53624: DISABLE
53625: LD_INT 0
53627: PPUSH
53628: PPUSH
53629: PPUSH
// begin mpKingPoints := [ ] ;
53630: LD_ADDR_EXP 46
53634: PUSH
53635: EMPTY
53636: ST_TO_ADDR
// if mpTeamGame then
53637: LD_EXP 9
53641: IFFALSE 53695
// begin for i := 1 to Count ( mpTeams ) do
53643: LD_ADDR_VAR 0 1
53647: PUSH
53648: DOUBLE
53649: LD_INT 1
53651: DEC
53652: ST_TO_ADDR
53653: LD_EXP 8
53657: PPUSH
53658: CALL 5008 0 1
53662: PUSH
53663: FOR_TO
53664: IFFALSE 53691
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53666: LD_ADDR_EXP 46
53670: PUSH
53671: LD_EXP 46
53675: PPUSH
53676: LD_VAR 0 1
53680: PPUSH
53681: LD_INT 0
53683: PPUSH
53684: CALL_OW 1
53688: ST_TO_ADDR
53689: GO 53663
53691: POP
53692: POP
// end else
53693: GO 53738
// begin for i := 1 to 8 do
53695: LD_ADDR_VAR 0 1
53699: PUSH
53700: DOUBLE
53701: LD_INT 1
53703: DEC
53704: ST_TO_ADDR
53705: LD_INT 8
53707: PUSH
53708: FOR_TO
53709: IFFALSE 53736
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53711: LD_ADDR_EXP 46
53715: PUSH
53716: LD_EXP 46
53720: PPUSH
53721: LD_VAR 0 1
53725: PPUSH
53726: LD_INT 0
53728: PPUSH
53729: CALL_OW 1
53733: ST_TO_ADDR
53734: GO 53708
53736: POP
53737: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
53738: LD_ADDR_VAR 0 3
53742: PUSH
53743: LD_INT 17
53745: PPUSH
53746: LD_INT 0
53748: PPUSH
53749: CALL_OW 517
53753: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53754: LD_ADDR_VAR 0 1
53758: PUSH
53759: DOUBLE
53760: LD_INT 1
53762: DEC
53763: ST_TO_ADDR
53764: LD_VAR 0 3
53768: PUSH
53769: LD_INT 1
53771: ARRAY
53772: PUSH
53773: FOR_TO
53774: IFFALSE 53841
// for j := 1 to 8 do
53776: LD_ADDR_VAR 0 2
53780: PUSH
53781: DOUBLE
53782: LD_INT 1
53784: DEC
53785: ST_TO_ADDR
53786: LD_INT 8
53788: PUSH
53789: FOR_TO
53790: IFFALSE 53837
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
53792: LD_VAR 0 3
53796: PUSH
53797: LD_INT 1
53799: ARRAY
53800: PUSH
53801: LD_VAR 0 1
53805: ARRAY
53806: PPUSH
53807: LD_VAR 0 3
53811: PUSH
53812: LD_INT 2
53814: ARRAY
53815: PUSH
53816: LD_VAR 0 1
53820: ARRAY
53821: PPUSH
53822: LD_VAR 0 2
53826: PPUSH
53827: LD_INT 12
53829: NEG
53830: PPUSH
53831: CALL_OW 330
53835: GO 53789
53837: POP
53838: POP
53839: GO 53773
53841: POP
53842: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
53843: LD_EXP 32
53847: PPUSH
53848: LD_INT 1
53850: PPUSH
53851: CALL_OW 424
// UpdateCounter ;
53855: CALL 54463 0 0
// repeat wait ( 0 0$1 ) ;
53859: LD_INT 35
53861: PPUSH
53862: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53866: LD_ADDR_VAR 0 3
53870: PUSH
53871: LD_EXP 32
53875: PPUSH
53876: LD_INT 3
53878: PUSH
53879: LD_INT 57
53881: PUSH
53882: EMPTY
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 50
53891: PUSH
53892: EMPTY
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 30
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 30
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: LIST
53927: PPUSH
53928: CALL_OW 70
53932: ST_TO_ADDR
// if not tmp then
53933: LD_VAR 0 3
53937: NOT
53938: IFFALSE 53942
// continue ;
53940: GO 53859
// AddPoints ( tmp ) ;
53942: LD_VAR 0 3
53946: PPUSH
53947: CALL 54141 0 1
// UpdateCounter ;
53951: CALL 54463 0 0
// until false ;
53955: LD_INT 0
53957: IFFALSE 53859
// end ;
53959: PPOPN 3
53961: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
53962: LD_EXP 37
53966: IFFALSE 53974
53968: PUSH
53969: LD_EXP 35
53973: AND
53974: IFFALSE 54138
53976: GO 53978
53978: DISABLE
53979: LD_INT 0
53981: PPUSH
53982: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
53983: LD_ADDR_VAR 0 2
53987: PUSH
53988: LD_INT 17
53990: PPUSH
53991: LD_INT 0
53993: PPUSH
53994: CALL_OW 517
53998: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53999: LD_ADDR_VAR 0 1
54003: PUSH
54004: DOUBLE
54005: LD_INT 1
54007: DEC
54008: ST_TO_ADDR
54009: LD_VAR 0 2
54013: PUSH
54014: LD_INT 1
54016: ARRAY
54017: PUSH
54018: FOR_TO
54019: IFFALSE 54060
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54021: LD_VAR 0 2
54025: PUSH
54026: LD_INT 1
54028: ARRAY
54029: PUSH
54030: LD_VAR 0 1
54034: ARRAY
54035: PPUSH
54036: LD_VAR 0 2
54040: PUSH
54041: LD_INT 2
54043: ARRAY
54044: PUSH
54045: LD_VAR 0 1
54049: ARRAY
54050: PPUSH
54051: LD_INT 125
54053: PPUSH
54054: CALL_OW 495
54058: GO 54018
54060: POP
54061: POP
// repeat wait ( mpEmissions ) ;
54062: LD_EXP 35
54066: PPUSH
54067: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54071: LD_ADDR_VAR 0 1
54075: PUSH
54076: DOUBLE
54077: LD_INT 1
54079: DEC
54080: ST_TO_ADDR
54081: LD_VAR 0 2
54085: PUSH
54086: LD_INT 1
54088: ARRAY
54089: PUSH
54090: FOR_TO
54091: IFFALSE 54132
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54093: LD_VAR 0 2
54097: PUSH
54098: LD_INT 1
54100: ARRAY
54101: PUSH
54102: LD_VAR 0 1
54106: ARRAY
54107: PPUSH
54108: LD_VAR 0 2
54112: PUSH
54113: LD_INT 2
54115: ARRAY
54116: PUSH
54117: LD_VAR 0 1
54121: ARRAY
54122: PPUSH
54123: LD_INT 15
54125: PPUSH
54126: CALL_OW 495
54130: GO 54090
54132: POP
54133: POP
// until false ;
54134: LD_INT 0
54136: IFFALSE 54062
// end ;
54138: PPOPN 2
54140: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54141: LD_INT 0
54143: PPUSH
54144: PPUSH
54145: PPUSH
54146: PPUSH
54147: PPUSH
// if mpTeamGame then
54148: LD_EXP 9
54152: IFFALSE 54349
// begin first := depots [ 1 ] ;
54154: LD_ADDR_VAR 0 4
54158: PUSH
54159: LD_VAR 0 1
54163: PUSH
54164: LD_INT 1
54166: ARRAY
54167: ST_TO_ADDR
// side := GetSide ( first ) ;
54168: LD_ADDR_VAR 0 6
54172: PUSH
54173: LD_VAR 0 4
54177: PPUSH
54178: CALL_OW 255
54182: ST_TO_ADDR
// for i := 1 to mpTeams do
54183: LD_ADDR_VAR 0 3
54187: PUSH
54188: DOUBLE
54189: LD_INT 1
54191: DEC
54192: ST_TO_ADDR
54193: LD_EXP 8
54197: PUSH
54198: FOR_TO
54199: IFFALSE 54233
// if side in mpTeams [ i ] then
54201: LD_VAR 0 6
54205: PUSH
54206: LD_EXP 8
54210: PUSH
54211: LD_VAR 0 3
54215: ARRAY
54216: IN
54217: IFFALSE 54231
// begin team := i ;
54219: LD_ADDR_VAR 0 5
54223: PUSH
54224: LD_VAR 0 3
54228: ST_TO_ADDR
// break ;
54229: GO 54233
// end ;
54231: GO 54198
54233: POP
54234: POP
// if not team then
54235: LD_VAR 0 5
54239: NOT
54240: IFFALSE 54244
// exit ;
54242: GO 54458
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54244: LD_EXP 32
54248: PPUSH
54249: LD_INT 81
54251: PUSH
54252: LD_VAR 0 6
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PPUSH
54261: CALL_OW 70
54265: IFFALSE 54269
// exit ;
54267: GO 54458
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54269: LD_ADDR_EXP 46
54273: PUSH
54274: LD_EXP 46
54278: PPUSH
54279: LD_VAR 0 5
54283: PPUSH
54284: LD_EXP 46
54288: PUSH
54289: LD_VAR 0 5
54293: ARRAY
54294: PUSH
54295: LD_INT 1
54297: PLUS
54298: PPUSH
54299: CALL_OW 1
54303: ST_TO_ADDR
// for i in mpTeams [ team ] do
54304: LD_ADDR_VAR 0 3
54308: PUSH
54309: LD_EXP 8
54313: PUSH
54314: LD_VAR 0 5
54318: ARRAY
54319: PUSH
54320: FOR_IN
54321: IFFALSE 54345
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54323: LD_VAR 0 3
54327: PPUSH
54328: LD_EXP 46
54332: PUSH
54333: LD_VAR 0 5
54337: ARRAY
54338: PPUSH
54339: CALL_OW 506
54343: GO 54320
54345: POP
54346: POP
// end else
54347: GO 54458
// begin first := depots [ 1 ] ;
54349: LD_ADDR_VAR 0 4
54353: PUSH
54354: LD_VAR 0 1
54358: PUSH
54359: LD_INT 1
54361: ARRAY
54362: ST_TO_ADDR
// side := GetSide ( first ) ;
54363: LD_ADDR_VAR 0 6
54367: PUSH
54368: LD_VAR 0 4
54372: PPUSH
54373: CALL_OW 255
54377: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54378: LD_EXP 32
54382: PPUSH
54383: LD_INT 81
54385: PUSH
54386: LD_VAR 0 6
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PPUSH
54395: CALL_OW 70
54399: IFFALSE 54403
// exit ;
54401: GO 54458
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54403: LD_ADDR_EXP 46
54407: PUSH
54408: LD_EXP 46
54412: PPUSH
54413: LD_VAR 0 6
54417: PPUSH
54418: LD_EXP 46
54422: PUSH
54423: LD_VAR 0 6
54427: ARRAY
54428: PUSH
54429: LD_INT 1
54431: PLUS
54432: PPUSH
54433: CALL_OW 1
54437: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54438: LD_VAR 0 6
54442: PPUSH
54443: LD_EXP 46
54447: PUSH
54448: LD_VAR 0 6
54452: ARRAY
54453: PPUSH
54454: CALL_OW 506
// end ; end ;
54458: LD_VAR 0 2
54462: RET
// function UpdateCounter ; var i ; begin
54463: LD_INT 0
54465: PPUSH
54466: PPUSH
// result := [ ] ;
54467: LD_ADDR_VAR 0 1
54471: PUSH
54472: EMPTY
54473: ST_TO_ADDR
// if mpTeamGame then
54474: LD_EXP 9
54478: IFFALSE 54545
// begin for i := 1 to mpTeams do
54480: LD_ADDR_VAR 0 2
54484: PUSH
54485: DOUBLE
54486: LD_INT 1
54488: DEC
54489: ST_TO_ADDR
54490: LD_EXP 8
54494: PUSH
54495: FOR_TO
54496: IFFALSE 54541
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54498: LD_ADDR_VAR 0 1
54502: PUSH
54503: LD_VAR 0 1
54507: PUSH
54508: LD_STRING #KingoftheHill-Team
54510: PUSH
54511: LD_VAR 0 2
54515: PUSH
54516: LD_EXP 46
54520: PUSH
54521: LD_VAR 0 2
54525: ARRAY
54526: PUSH
54527: LD_EXP 33
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: ADD
54538: ST_TO_ADDR
54539: GO 54495
54541: POP
54542: POP
// end else
54543: GO 54618
// begin for i := 1 to 8 do
54545: LD_ADDR_VAR 0 2
54549: PUSH
54550: DOUBLE
54551: LD_INT 1
54553: DEC
54554: ST_TO_ADDR
54555: LD_INT 8
54557: PUSH
54558: FOR_TO
54559: IFFALSE 54616
// if mpSidePositions [ i ] then
54561: LD_EXP 5
54565: PUSH
54566: LD_VAR 0 2
54570: ARRAY
54571: IFFALSE 54614
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54573: LD_ADDR_VAR 0 1
54577: PUSH
54578: LD_VAR 0 1
54582: PUSH
54583: LD_STRING #KingoftheHill-Player
54585: PUSH
54586: LD_VAR 0 2
54590: PUSH
54591: LD_EXP 46
54595: PUSH
54596: LD_VAR 0 2
54600: ARRAY
54601: PUSH
54602: LD_EXP 33
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: ADD
54613: ST_TO_ADDR
54614: GO 54558
54616: POP
54617: POP
// end ; mpDisplayStrings := result ;
54618: LD_ADDR_EXP 36
54622: PUSH
54623: LD_VAR 0 1
54627: ST_TO_ADDR
// end ;
54628: LD_VAR 0 1
54632: RET
// export function HowMuchPointsKing ( side ) ; begin
54633: LD_INT 0
54635: PPUSH
// result := HowMuchPoints ( side ) ;
54636: LD_ADDR_VAR 0 2
54640: PUSH
54641: LD_VAR 0 1
54645: PPUSH
54646: CALL 54656 0 1
54650: ST_TO_ADDR
// end ;
54651: LD_VAR 0 2
54655: RET
// function HowMuchPoints ( side ) ; var i ; begin
54656: LD_INT 0
54658: PPUSH
54659: PPUSH
// if mpTeamGame then
54660: LD_EXP 9
54664: IFFALSE 54733
// begin for i := 1 to Count ( mpTeams ) do
54666: LD_ADDR_VAR 0 3
54670: PUSH
54671: DOUBLE
54672: LD_INT 1
54674: DEC
54675: ST_TO_ADDR
54676: LD_EXP 8
54680: PPUSH
54681: CALL 5008 0 1
54685: PUSH
54686: FOR_TO
54687: IFFALSE 54729
// begin if side in mpTeams [ i ] then
54689: LD_VAR 0 1
54693: PUSH
54694: LD_EXP 8
54698: PUSH
54699: LD_VAR 0 3
54703: ARRAY
54704: IN
54705: IFFALSE 54727
// begin result := mpKingPoints [ i ] ;
54707: LD_ADDR_VAR 0 2
54711: PUSH
54712: LD_EXP 46
54716: PUSH
54717: LD_VAR 0 3
54721: ARRAY
54722: ST_TO_ADDR
// exit ;
54723: POP
54724: POP
54725: GO 54749
// end ; end ;
54727: GO 54686
54729: POP
54730: POP
// end else
54731: GO 54749
// result := mpKingPoints [ side ] ;
54733: LD_ADDR_VAR 0 2
54737: PUSH
54738: LD_EXP 46
54742: PUSH
54743: LD_VAR 0 1
54747: ARRAY
54748: ST_TO_ADDR
// end ;
54749: LD_VAR 0 2
54753: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
54754: LD_EXP 37
54758: IFFALSE 54766
54760: PUSH
54761: CALL 55178 0 0
54765: AND
54766: IFFALSE 54774
54768: PUSH
54769: LD_OWVAR 4
54773: AND
54774: IFFALSE 55027
54776: GO 54778
54778: DISABLE
54779: LD_INT 0
54781: PPUSH
54782: PPUSH
// begin canWin := false ;
54783: LD_ADDR_VAR 0 2
54787: PUSH
54788: LD_INT 0
54790: ST_TO_ADDR
// if not HasPower ( your_side ) then
54791: LD_OWVAR 2
54795: PPUSH
54796: CALL 55220 0 1
54800: NOT
54801: IFFALSE 54812
// begin Multiplayer_Loose_Message ;
54803: CALL_OW 521
// enable ( mpLose ) ;
54807: LD_INT 102
54809: ENABLE_MARKED
// end else
54810: GO 55027
// begin if not EnemiesInGame then
54812: CALL 55030 0 0
54816: NOT
54817: IFFALSE 54824
// begin enable ( mpWin ) ;
54819: LD_INT 101
54821: ENABLE_MARKED
// exit ;
54822: GO 55027
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
54824: LD_ADDR_VAR 0 2
54828: PUSH
54829: LD_OWVAR 2
54833: PPUSH
54834: CALL 54656 0 1
54838: PUSH
54839: LD_EXP 33
54843: GREATEREQUAL
54844: IFFALSE 54857
54846: PUSH
54847: LD_OWVAR 2
54851: PPUSH
54852: CALL 55220 0 1
54856: AND
54857: ST_TO_ADDR
// for i := 1 to 8 do
54858: LD_ADDR_VAR 0 1
54862: PUSH
54863: DOUBLE
54864: LD_INT 1
54866: DEC
54867: ST_TO_ADDR
54868: LD_INT 8
54870: PUSH
54871: FOR_TO
54872: IFFALSE 55013
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54874: LD_EXP 5
54878: PUSH
54879: LD_VAR 0 1
54883: ARRAY
54884: IFFALSE 54897
54886: PUSH
54887: LD_VAR 0 1
54891: PPUSH
54892: CALL_OW 108
54896: AND
54897: IFFALSE 54911
54899: PUSH
54900: LD_VAR 0 1
54904: PUSH
54905: LD_OWVAR 2
54909: NONEQUAL
54910: AND
54911: IFFALSE 55011
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54913: LD_EXP 6
54917: PUSH
54918: LD_VAR 0 1
54922: ARRAY
54923: NOT
54924: IFTRUE 54972
54926: PUSH
54927: LD_EXP 6
54931: PUSH
54932: LD_VAR 0 1
54936: ARRAY
54937: PUSH
54938: LD_EXP 6
54942: PUSH
54943: LD_OWVAR 2
54947: ARRAY
54948: NONEQUAL
54949: IFFALSE 54971
54951: PUSH
54952: LD_OWVAR 2
54956: PPUSH
54957: LD_VAR 0 1
54961: PPUSH
54962: CALL_OW 81
54966: PUSH
54967: LD_INT 1
54969: NONEQUAL
54970: AND
54971: OR
54972: IFFALSE 55011
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
54974: LD_VAR 0 1
54978: PPUSH
54979: CALL 54656 0 1
54983: PUSH
54984: LD_EXP 33
54988: GREATEREQUAL
54989: IFFALSE 55002
54991: PUSH
54992: LD_VAR 0 1
54996: PPUSH
54997: CALL 55220 0 1
55001: AND
55002: IFFALSE 55011
// begin enable ( mpLose ) ;
55004: LD_INT 102
55006: ENABLE_MARKED
// exit ;
55007: POP
55008: POP
55009: GO 55027
// end ;
55011: GO 54871
55013: POP
55014: POP
// if canWin then
55015: LD_VAR 0 2
55019: IFFALSE 55026
// enable ( mpWin ) else
55021: LD_INT 101
55023: ENABLE_MARKED
55024: GO 55027
// enable ;
55026: ENABLE
// end ; end ;
55027: PPOPN 2
55029: END
// function EnemiesInGame ; var i ; begin
55030: LD_INT 0
55032: PPUSH
55033: PPUSH
// result := false ;
55034: LD_ADDR_VAR 0 1
55038: PUSH
55039: LD_INT 0
55041: ST_TO_ADDR
// for i := 1 to 8 do
55042: LD_ADDR_VAR 0 2
55046: PUSH
55047: DOUBLE
55048: LD_INT 1
55050: DEC
55051: ST_TO_ADDR
55052: LD_INT 8
55054: PUSH
55055: FOR_TO
55056: IFFALSE 55171
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55058: LD_VAR 0 2
55062: PUSH
55063: LD_OWVAR 2
55067: NONEQUAL
55068: IFFALSE 55081
55070: PUSH
55071: LD_VAR 0 2
55075: PPUSH
55076: CALL 55220 0 1
55080: AND
55081: IFFALSE 55094
55083: PUSH
55084: LD_VAR 0 2
55088: PPUSH
55089: CALL_OW 108
55093: AND
55094: IFFALSE 55169
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55096: LD_EXP 6
55100: PUSH
55101: LD_VAR 0 2
55105: ARRAY
55106: NOT
55107: IFTRUE 55155
55109: PUSH
55110: LD_EXP 6
55114: PUSH
55115: LD_VAR 0 2
55119: ARRAY
55120: PUSH
55121: LD_EXP 6
55125: PUSH
55126: LD_OWVAR 2
55130: ARRAY
55131: NONEQUAL
55132: IFFALSE 55154
55134: PUSH
55135: LD_OWVAR 2
55139: PPUSH
55140: LD_VAR 0 2
55144: PPUSH
55145: CALL_OW 81
55149: PUSH
55150: LD_INT 1
55152: NONEQUAL
55153: AND
55154: OR
55155: IFFALSE 55169
// begin result := true ;
55157: LD_ADDR_VAR 0 1
55161: PUSH
55162: LD_INT 1
55164: ST_TO_ADDR
// exit ;
55165: POP
55166: POP
55167: GO 55173
// end ;
55169: GO 55055
55171: POP
55172: POP
// end ;
55173: LD_VAR 0 1
55177: RET
// function CanWinLoose ; begin
55178: LD_INT 0
55180: PPUSH
// result := true ;
55181: LD_ADDR_VAR 0 1
55185: PUSH
55186: LD_INT 1
55188: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55189: CALL_OW 531
55193: IFFALSE 55205
55195: PUSH
55196: CALL_OW 519
55200: PUSH
55201: LD_INT 1
55203: GREATER
55204: AND
55205: IFFALSE 55215
// result := false ;
55207: LD_ADDR_VAR 0 1
55211: PUSH
55212: LD_INT 0
55214: ST_TO_ADDR
// end ;
55215: LD_VAR 0 1
55219: RET
// function HasPower ( i ) ; begin
55220: LD_INT 0
55222: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55223: LD_ADDR_VAR 0 2
55227: PUSH
55228: LD_INT 22
55230: PUSH
55231: LD_VAR 0 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 21
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 33
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 33
55265: PUSH
55266: LD_INT 5
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PPUSH
55283: CALL_OW 69
55287: ST_TO_ADDR
// end ; end_of_file end_of_file
55288: LD_VAR 0 2
55292: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55293: LD_VAR 0 1
55297: PUSH
55298: LD_INT 200
55300: DOUBLE
55301: GREATEREQUAL
55302: IFFALSE 55310
55304: LD_INT 299
55306: DOUBLE
55307: LESSEQUAL
55308: IFTRUE 55312
55310: GO 55344
55312: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55313: LD_VAR 0 1
55317: PPUSH
55318: LD_VAR 0 2
55322: PPUSH
55323: LD_VAR 0 3
55327: PPUSH
55328: LD_VAR 0 4
55332: PPUSH
55333: LD_VAR 0 5
55337: PPUSH
55338: CALL 56125 0 5
55342: GO 55421
55344: LD_INT 300
55346: DOUBLE
55347: GREATEREQUAL
55348: IFFALSE 55356
55350: LD_INT 399
55352: DOUBLE
55353: LESSEQUAL
55354: IFTRUE 55358
55356: GO 55420
55358: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55359: LD_VAR 0 1
55363: PPUSH
55364: LD_VAR 0 2
55368: PPUSH
55369: LD_VAR 0 3
55373: PPUSH
55374: LD_VAR 0 4
55378: PPUSH
55379: LD_VAR 0 5
55383: PPUSH
55384: LD_VAR 0 6
55388: PPUSH
55389: LD_VAR 0 7
55393: PPUSH
55394: LD_VAR 0 8
55398: PPUSH
55399: LD_VAR 0 9
55403: PPUSH
55404: LD_VAR 0 10
55408: PPUSH
55409: LD_VAR 0 11
55413: PPUSH
55414: CALL 61530 0 11
55418: GO 55421
55420: POP
// end ;
55421: PPOPN 11
55423: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_VAR 0 2
55433: PPUSH
55434: LD_VAR 0 3
55438: PPUSH
55439: LD_VAR 0 4
55443: PPUSH
55444: LD_VAR 0 5
55448: PPUSH
55449: CALL 55506 0 5
// end ; end_of_file
55453: PPOPN 5
55455: END
// export function SOS_UnitDestroyed ( un ) ; begin
55456: LD_INT 0
55458: PPUSH
// ComRadiation ( un ) ;
55459: LD_VAR 0 1
55463: PPUSH
55464: CALL 56545 0 1
// end ;
55468: LD_VAR 0 2
55472: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55473: LD_INT 0
55475: PPUSH
// ComRadiation ( un ) ;
55476: LD_VAR 0 1
55480: PPUSH
55481: CALL 56545 0 1
// end ;
55485: LD_VAR 0 2
55489: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55490: LD_INT 0
55492: PPUSH
// end ;
55493: LD_VAR 0 4
55497: RET
// export function SOS_Command ( cmd ) ; begin
55498: LD_INT 0
55500: PPUSH
// end ;
55501: LD_VAR 0 2
55505: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55506: LD_INT 0
55508: PPUSH
// end ;
55509: LD_VAR 0 6
55513: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55514: LD_INT 0
55516: PPUSH
55517: PPUSH
55518: PPUSH
55519: PPUSH
// if not vehicle or not factory then
55520: LD_VAR 0 1
55524: NOT
55525: IFTRUE 55534
55527: PUSH
55528: LD_VAR 0 2
55532: NOT
55533: OR
55534: IFFALSE 55538
// exit ;
55536: GO 56120
// if not factoryWaypoints then
55538: LD_EXP 57
55542: NOT
55543: IFFALSE 55547
// exit ;
55545: GO 56120
// for i := 1 to Count ( factoryWaypoints ) do
55547: LD_ADDR_VAR 0 4
55551: PUSH
55552: DOUBLE
55553: LD_INT 1
55555: DEC
55556: ST_TO_ADDR
55557: LD_EXP 57
55561: PPUSH
55562: CALL 5008 0 1
55566: PUSH
55567: FOR_TO
55568: IFFALSE 56118
// if factoryWaypoints [ i ] [ 2 ] = factory then
55570: LD_EXP 57
55574: PUSH
55575: LD_VAR 0 4
55579: ARRAY
55580: PUSH
55581: LD_INT 2
55583: ARRAY
55584: PUSH
55585: LD_VAR 0 2
55589: EQUAL
55590: IFFALSE 56116
// begin if GetControl ( vehicle ) = control_manual then
55592: LD_VAR 0 1
55596: PPUSH
55597: CALL_OW 263
55601: PUSH
55602: LD_INT 1
55604: EQUAL
55605: IFFALSE 55969
// begin driver := IsDrivenBy ( vehicle ) ;
55607: LD_ADDR_VAR 0 5
55611: PUSH
55612: LD_VAR 0 1
55616: PPUSH
55617: CALL_OW 311
55621: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55622: LD_VAR 0 5
55626: PUSH
55627: LD_EXP 58
55631: IN
55632: IFTRUE 55646
55634: PUSH
55635: LD_VAR 0 1
55639: PUSH
55640: LD_EXP 58
55644: IN
55645: OR
55646: IFFALSE 55652
// exit ;
55648: POP
55649: POP
55650: GO 56120
// if not HasTask ( driver ) then
55652: LD_VAR 0 5
55656: PPUSH
55657: CALL_OW 314
55661: NOT
55662: IFFALSE 55967
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55664: LD_ADDR_EXP 58
55668: PUSH
55669: LD_EXP 58
55673: PPUSH
55674: LD_VAR 0 5
55678: PPUSH
55679: CALL 40940 0 2
55683: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55684: LD_ADDR_EXP 58
55688: PUSH
55689: LD_EXP 58
55693: PPUSH
55694: LD_VAR 0 1
55698: PPUSH
55699: CALL 40940 0 2
55703: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55704: LD_ADDR_VAR 0 6
55708: PUSH
55709: LD_EXP 57
55713: PUSH
55714: LD_VAR 0 4
55718: ARRAY
55719: PUSH
55720: LD_INT 3
55722: ARRAY
55723: PPUSH
55724: LD_EXP 57
55728: PUSH
55729: LD_VAR 0 4
55733: ARRAY
55734: PUSH
55735: LD_INT 4
55737: ARRAY
55738: PPUSH
55739: CALL_OW 428
55743: ST_TO_ADDR
// if hex then
55744: LD_VAR 0 6
55748: IFFALSE 55766
// ComMoveUnit ( driver , hex ) else
55750: LD_VAR 0 5
55754: PPUSH
55755: LD_VAR 0 6
55759: PPUSH
55760: CALL_OW 112
55764: GO 55850
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55766: LD_VAR 0 1
55770: PPUSH
55771: LD_EXP 57
55775: PUSH
55776: LD_VAR 0 4
55780: ARRAY
55781: PUSH
55782: LD_INT 3
55784: ARRAY
55785: PPUSH
55786: LD_EXP 57
55790: PUSH
55791: LD_VAR 0 4
55795: ARRAY
55796: PUSH
55797: LD_INT 4
55799: ARRAY
55800: PPUSH
55801: CALL_OW 297
55805: PUSH
55806: LD_INT 0
55808: GREATER
55809: IFFALSE 55850
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55811: LD_VAR 0 5
55815: PPUSH
55816: LD_EXP 57
55820: PUSH
55821: LD_VAR 0 4
55825: ARRAY
55826: PUSH
55827: LD_INT 3
55829: ARRAY
55830: PPUSH
55831: LD_EXP 57
55835: PUSH
55836: LD_VAR 0 4
55840: ARRAY
55841: PUSH
55842: LD_INT 4
55844: ARRAY
55845: PPUSH
55846: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55850: LD_VAR 0 5
55854: PPUSH
55855: CALL_OW 181
// if Multiplayer then
55859: LD_OWVAR 4
55863: IFFALSE 55912
// begin repeat wait ( 10 ) ;
55865: LD_INT 10
55867: PPUSH
55868: CALL_OW 67
// until not IsInUnit ( driver ) ;
55872: LD_VAR 0 5
55876: PPUSH
55877: CALL_OW 310
55881: NOT
55882: IFFALSE 55865
// if not HasTask ( driver ) then
55884: LD_VAR 0 5
55888: PPUSH
55889: CALL_OW 314
55893: NOT
55894: IFFALSE 55910
// ComEnterUnit ( driver , factory ) ;
55896: LD_VAR 0 5
55900: PPUSH
55901: LD_VAR 0 2
55905: PPUSH
55906: CALL_OW 120
// end else
55910: GO 55926
// AddComEnterUnit ( driver , factory ) ;
55912: LD_VAR 0 5
55916: PPUSH
55917: LD_VAR 0 2
55921: PPUSH
55922: CALL_OW 180
// wait ( 0 0$1 ) ;
55926: LD_INT 35
55928: PPUSH
55929: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55933: LD_ADDR_EXP 58
55937: PUSH
55938: LD_EXP 58
55942: PUSH
55943: LD_VAR 0 5
55947: DIFF
55948: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55949: LD_ADDR_EXP 58
55953: PUSH
55954: LD_EXP 58
55958: PUSH
55959: LD_VAR 0 1
55963: DIFF
55964: ST_TO_ADDR
// break ;
55965: GO 56118
// end ; end else
55967: GO 56116
// if GetControl ( vehicle ) = control_remote then
55969: LD_VAR 0 1
55973: PPUSH
55974: CALL_OW 263
55978: PUSH
55979: LD_INT 2
55981: EQUAL
55982: IFFALSE 56068
// begin wait ( 0 0$2 ) ;
55984: LD_INT 70
55986: PPUSH
55987: CALL_OW 67
// repeat wait ( 10 ) ;
55991: LD_INT 10
55993: PPUSH
55994: CALL_OW 67
// Connect ( vehicle ) ;
55998: LD_VAR 0 1
56002: PPUSH
56003: CALL 11252 0 1
// until IsControledBy ( vehicle ) ;
56007: LD_VAR 0 1
56011: PPUSH
56012: CALL_OW 312
56016: IFFALSE 55991
// wait ( 10 ) ;
56018: LD_INT 10
56020: PPUSH
56021: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56025: LD_VAR 0 1
56029: PPUSH
56030: LD_EXP 57
56034: PUSH
56035: LD_VAR 0 4
56039: ARRAY
56040: PUSH
56041: LD_INT 3
56043: ARRAY
56044: PPUSH
56045: LD_EXP 57
56049: PUSH
56050: LD_VAR 0 4
56054: ARRAY
56055: PUSH
56056: LD_INT 4
56058: ARRAY
56059: PPUSH
56060: CALL_OW 111
// break ;
56064: GO 56118
// end else
56066: GO 56116
// begin wait ( 0 0$3 ) ;
56068: LD_INT 105
56070: PPUSH
56071: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56075: LD_VAR 0 1
56079: PPUSH
56080: LD_EXP 57
56084: PUSH
56085: LD_VAR 0 4
56089: ARRAY
56090: PUSH
56091: LD_INT 3
56093: ARRAY
56094: PPUSH
56095: LD_EXP 57
56099: PUSH
56100: LD_VAR 0 4
56104: ARRAY
56105: PUSH
56106: LD_INT 4
56108: ARRAY
56109: PPUSH
56110: CALL_OW 111
// break ;
56114: GO 56118
// end ; end ;
56116: GO 55567
56118: POP
56119: POP
// end ;
56120: LD_VAR 0 3
56124: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56125: LD_INT 0
56127: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56128: LD_VAR 0 1
56132: PUSH
56133: LD_INT 250
56135: EQUAL
56136: IFFALSE 56153
56138: PUSH
56139: LD_VAR 0 2
56143: PPUSH
56144: CALL_OW 264
56148: PUSH
56149: LD_INT 81
56151: EQUAL
56152: AND
56153: IFFALSE 56174
// MinerPlaceMine ( unit , x , y ) ;
56155: LD_VAR 0 2
56159: PPUSH
56160: LD_VAR 0 4
56164: PPUSH
56165: LD_VAR 0 5
56169: PPUSH
56170: CALL 59306 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56174: LD_VAR 0 1
56178: PUSH
56179: LD_INT 251
56181: EQUAL
56182: IFFALSE 56199
56184: PUSH
56185: LD_VAR 0 2
56189: PPUSH
56190: CALL_OW 264
56194: PUSH
56195: LD_INT 81
56197: EQUAL
56198: AND
56199: IFFALSE 56220
// MinerDetonateMine ( unit , x , y ) ;
56201: LD_VAR 0 2
56205: PPUSH
56206: LD_VAR 0 4
56210: PPUSH
56211: LD_VAR 0 5
56215: PPUSH
56216: CALL 59585 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56220: LD_VAR 0 1
56224: PUSH
56225: LD_INT 252
56227: EQUAL
56228: IFFALSE 56245
56230: PUSH
56231: LD_VAR 0 2
56235: PPUSH
56236: CALL_OW 264
56240: PUSH
56241: LD_INT 81
56243: EQUAL
56244: AND
56245: IFFALSE 56266
// MinerCreateMinefield ( unit , x , y ) ;
56247: LD_VAR 0 2
56251: PPUSH
56252: LD_VAR 0 4
56256: PPUSH
56257: LD_VAR 0 5
56261: PPUSH
56262: CALL 60004 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56266: LD_VAR 0 1
56270: PUSH
56271: LD_INT 253
56273: EQUAL
56274: IFFALSE 56291
56276: PUSH
56277: LD_VAR 0 2
56281: PPUSH
56282: CALL_OW 257
56286: PUSH
56287: LD_INT 5
56289: EQUAL
56290: AND
56291: IFFALSE 56312
// ComBinocular ( unit , x , y ) ;
56293: LD_VAR 0 2
56297: PPUSH
56298: LD_VAR 0 4
56302: PPUSH
56303: LD_VAR 0 5
56307: PPUSH
56308: CALL 60379 0 3
// if selectedUnit then
56312: LD_VAR 0 3
56316: IFFALSE 56376
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56318: LD_VAR 0 1
56322: PUSH
56323: LD_INT 254
56325: EQUAL
56326: IFFALSE 56343
56328: PUSH
56329: LD_VAR 0 2
56333: PPUSH
56334: CALL_OW 264
56338: PUSH
56339: LD_INT 99
56341: EQUAL
56342: AND
56343: IFFALSE 56360
56345: PUSH
56346: LD_VAR 0 3
56350: PPUSH
56351: CALL_OW 263
56355: PUSH
56356: LD_INT 3
56358: EQUAL
56359: AND
56360: IFFALSE 56376
// HackDestroyVehicle ( unit , selectedUnit ) ;
56362: LD_VAR 0 2
56366: PPUSH
56367: LD_VAR 0 3
56371: PPUSH
56372: CALL 58666 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56376: LD_VAR 0 1
56380: PUSH
56381: LD_INT 255
56383: EQUAL
56384: IFFALSE 56408
56386: PUSH
56387: LD_VAR 0 2
56391: PPUSH
56392: CALL_OW 264
56396: PUSH
56397: LD_INT 14
56399: PUSH
56400: LD_INT 53
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: IN
56407: AND
56408: IFFALSE 56426
56410: PUSH
56411: LD_VAR 0 4
56415: PPUSH
56416: LD_VAR 0 5
56420: PPUSH
56421: CALL_OW 488
56425: AND
56426: IFFALSE 56450
// CutTreeXYR ( unit , x , y , 12 ) ;
56428: LD_VAR 0 2
56432: PPUSH
56433: LD_VAR 0 4
56437: PPUSH
56438: LD_VAR 0 5
56442: PPUSH
56443: LD_INT 12
56445: PPUSH
56446: CALL 56641 0 4
// if cmd = 256 then
56450: LD_VAR 0 1
56454: PUSH
56455: LD_INT 256
56457: EQUAL
56458: IFFALSE 56479
// SetFactoryWaypoint ( unit , x , y ) ;
56460: LD_VAR 0 2
56464: PPUSH
56465: LD_VAR 0 4
56469: PPUSH
56470: LD_VAR 0 5
56474: PPUSH
56475: CALL 61538 0 3
// if cmd = 257 then
56479: LD_VAR 0 1
56483: PUSH
56484: LD_INT 257
56486: EQUAL
56487: IFFALSE 56508
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56489: LD_VAR 0 2
56493: PPUSH
56494: LD_VAR 0 4
56498: PPUSH
56499: LD_VAR 0 5
56503: PPUSH
56504: CALL 62034 0 3
// if cmd = 258 then
56508: LD_VAR 0 1
56512: PUSH
56513: LD_INT 258
56515: EQUAL
56516: IFFALSE 56540
// BurnTreeXYR ( unit , x , y , 8 ) ;
56518: LD_VAR 0 2
56522: PPUSH
56523: LD_VAR 0 4
56527: PPUSH
56528: LD_VAR 0 5
56532: PPUSH
56533: LD_INT 8
56535: PPUSH
56536: CALL 57041 0 4
// end ;
56540: LD_VAR 0 6
56544: RET
// export function ComRadiation ( un ) ; var eff ; begin
56545: LD_INT 0
56547: PPUSH
56548: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56549: LD_VAR 0 1
56553: PPUSH
56554: CALL_OW 264
56558: PUSH
56559: LD_INT 91
56561: NONEQUAL
56562: IFFALSE 56566
// exit ;
56564: GO 56636
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56566: LD_INT 68
56568: PPUSH
56569: LD_VAR 0 1
56573: PPUSH
56574: CALL_OW 255
56578: PPUSH
56579: CALL_OW 321
56583: PUSH
56584: LD_INT 2
56586: EQUAL
56587: IFFALSE 56599
// eff := 50 else
56589: LD_ADDR_VAR 0 3
56593: PUSH
56594: LD_INT 50
56596: ST_TO_ADDR
56597: GO 56607
// eff := 25 ;
56599: LD_ADDR_VAR 0 3
56603: PUSH
56604: LD_INT 25
56606: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56607: LD_VAR 0 1
56611: PPUSH
56612: CALL_OW 250
56616: PPUSH
56617: LD_VAR 0 1
56621: PPUSH
56622: CALL_OW 251
56626: PPUSH
56627: LD_VAR 0 3
56631: PPUSH
56632: CALL_OW 495
// end ;
56636: LD_VAR 0 2
56640: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56641: LD_INT 0
56643: PPUSH
56644: PPUSH
56645: PPUSH
56646: PPUSH
56647: PPUSH
56648: PPUSH
56649: PPUSH
56650: PPUSH
56651: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56652: LD_VAR 0 1
56656: PPUSH
56657: CALL_OW 302
56661: NOT
56662: IFTRUE 56681
56664: PUSH
56665: LD_VAR 0 2
56669: PPUSH
56670: LD_VAR 0 3
56674: PPUSH
56675: CALL_OW 488
56679: NOT
56680: OR
56681: IFTRUE 56690
56683: PUSH
56684: LD_VAR 0 4
56688: NOT
56689: OR
56690: IFFALSE 56694
// exit ;
56692: GO 57036
// list := [ ] ;
56694: LD_ADDR_VAR 0 13
56698: PUSH
56699: EMPTY
56700: ST_TO_ADDR
// if x - r < 0 then
56701: LD_VAR 0 2
56705: PUSH
56706: LD_VAR 0 4
56710: MINUS
56711: PUSH
56712: LD_INT 0
56714: LESS
56715: IFFALSE 56727
// min_x := 0 else
56717: LD_ADDR_VAR 0 7
56721: PUSH
56722: LD_INT 0
56724: ST_TO_ADDR
56725: GO 56743
// min_x := x - r ;
56727: LD_ADDR_VAR 0 7
56731: PUSH
56732: LD_VAR 0 2
56736: PUSH
56737: LD_VAR 0 4
56741: MINUS
56742: ST_TO_ADDR
// if y - r < 0 then
56743: LD_VAR 0 3
56747: PUSH
56748: LD_VAR 0 4
56752: MINUS
56753: PUSH
56754: LD_INT 0
56756: LESS
56757: IFFALSE 56769
// min_y := 0 else
56759: LD_ADDR_VAR 0 8
56763: PUSH
56764: LD_INT 0
56766: ST_TO_ADDR
56767: GO 56785
// min_y := y - r ;
56769: LD_ADDR_VAR 0 8
56773: PUSH
56774: LD_VAR 0 3
56778: PUSH
56779: LD_VAR 0 4
56783: MINUS
56784: ST_TO_ADDR
// max_x := x + r ;
56785: LD_ADDR_VAR 0 9
56789: PUSH
56790: LD_VAR 0 2
56794: PUSH
56795: LD_VAR 0 4
56799: PLUS
56800: ST_TO_ADDR
// max_y := y + r ;
56801: LD_ADDR_VAR 0 10
56805: PUSH
56806: LD_VAR 0 3
56810: PUSH
56811: LD_VAR 0 4
56815: PLUS
56816: ST_TO_ADDR
// for _x = min_x to max_x do
56817: LD_ADDR_VAR 0 11
56821: PUSH
56822: DOUBLE
56823: LD_VAR 0 7
56827: DEC
56828: ST_TO_ADDR
56829: LD_VAR 0 9
56833: PUSH
56834: FOR_TO
56835: IFFALSE 56954
// for _y = min_y to max_y do
56837: LD_ADDR_VAR 0 12
56841: PUSH
56842: DOUBLE
56843: LD_VAR 0 8
56847: DEC
56848: ST_TO_ADDR
56849: LD_VAR 0 10
56853: PUSH
56854: FOR_TO
56855: IFFALSE 56950
// begin if not ValidHex ( _x , _y ) then
56857: LD_VAR 0 11
56861: PPUSH
56862: LD_VAR 0 12
56866: PPUSH
56867: CALL_OW 488
56871: NOT
56872: IFFALSE 56876
// continue ;
56874: GO 56854
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56876: LD_VAR 0 11
56880: PPUSH
56881: LD_VAR 0 12
56885: PPUSH
56886: CALL_OW 351
56890: IFFALSE 56908
56892: PUSH
56893: LD_VAR 0 11
56897: PPUSH
56898: LD_VAR 0 12
56902: PPUSH
56903: CALL_OW 554
56907: AND
56908: IFFALSE 56948
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56910: LD_ADDR_VAR 0 13
56914: PUSH
56915: LD_VAR 0 13
56919: PPUSH
56920: LD_VAR 0 13
56924: PUSH
56925: LD_INT 1
56927: PLUS
56928: PPUSH
56929: LD_VAR 0 11
56933: PUSH
56934: LD_VAR 0 12
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PPUSH
56943: CALL_OW 2
56947: ST_TO_ADDR
// end ;
56948: GO 56854
56950: POP
56951: POP
56952: GO 56834
56954: POP
56955: POP
// if not list then
56956: LD_VAR 0 13
56960: NOT
56961: IFFALSE 56965
// exit ;
56963: GO 57036
// for i in list do
56965: LD_ADDR_VAR 0 6
56969: PUSH
56970: LD_VAR 0 13
56974: PUSH
56975: FOR_IN
56976: IFFALSE 57034
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56978: LD_VAR 0 1
56982: PPUSH
56983: LD_STRING M
56985: PUSH
56986: LD_VAR 0 6
56990: PUSH
56991: LD_INT 1
56993: ARRAY
56994: PUSH
56995: LD_VAR 0 6
56999: PUSH
57000: LD_INT 2
57002: ARRAY
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: PUSH
57025: EMPTY
57026: LIST
57027: PPUSH
57028: CALL_OW 447
57032: GO 56975
57034: POP
57035: POP
// end ;
57036: LD_VAR 0 5
57040: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57041: LD_INT 0
57043: PPUSH
57044: PPUSH
57045: PPUSH
57046: PPUSH
57047: PPUSH
57048: PPUSH
57049: PPUSH
57050: PPUSH
57051: PPUSH
57052: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57053: LD_VAR 0 1
57057: PPUSH
57058: CALL_OW 302
57062: NOT
57063: IFTRUE 57082
57065: PUSH
57066: LD_VAR 0 2
57070: PPUSH
57071: LD_VAR 0 3
57075: PPUSH
57076: CALL_OW 488
57080: NOT
57081: OR
57082: IFTRUE 57091
57084: PUSH
57085: LD_VAR 0 4
57089: NOT
57090: OR
57091: IFFALSE 57095
// exit ;
57093: GO 57612
// list := [ ] ;
57095: LD_ADDR_VAR 0 13
57099: PUSH
57100: EMPTY
57101: ST_TO_ADDR
// if x - r < 0 then
57102: LD_VAR 0 2
57106: PUSH
57107: LD_VAR 0 4
57111: MINUS
57112: PUSH
57113: LD_INT 0
57115: LESS
57116: IFFALSE 57128
// min_x := 0 else
57118: LD_ADDR_VAR 0 7
57122: PUSH
57123: LD_INT 0
57125: ST_TO_ADDR
57126: GO 57144
// min_x := x - r ;
57128: LD_ADDR_VAR 0 7
57132: PUSH
57133: LD_VAR 0 2
57137: PUSH
57138: LD_VAR 0 4
57142: MINUS
57143: ST_TO_ADDR
// if y - r < 0 then
57144: LD_VAR 0 3
57148: PUSH
57149: LD_VAR 0 4
57153: MINUS
57154: PUSH
57155: LD_INT 0
57157: LESS
57158: IFFALSE 57170
// min_y := 0 else
57160: LD_ADDR_VAR 0 8
57164: PUSH
57165: LD_INT 0
57167: ST_TO_ADDR
57168: GO 57186
// min_y := y - r ;
57170: LD_ADDR_VAR 0 8
57174: PUSH
57175: LD_VAR 0 3
57179: PUSH
57180: LD_VAR 0 4
57184: MINUS
57185: ST_TO_ADDR
// max_x := x + r ;
57186: LD_ADDR_VAR 0 9
57190: PUSH
57191: LD_VAR 0 2
57195: PUSH
57196: LD_VAR 0 4
57200: PLUS
57201: ST_TO_ADDR
// max_y := y + r ;
57202: LD_ADDR_VAR 0 10
57206: PUSH
57207: LD_VAR 0 3
57211: PUSH
57212: LD_VAR 0 4
57216: PLUS
57217: ST_TO_ADDR
// for _x = min_x to max_x do
57218: LD_ADDR_VAR 0 11
57222: PUSH
57223: DOUBLE
57224: LD_VAR 0 7
57228: DEC
57229: ST_TO_ADDR
57230: LD_VAR 0 9
57234: PUSH
57235: FOR_TO
57236: IFFALSE 57355
// for _y = min_y to max_y do
57238: LD_ADDR_VAR 0 12
57242: PUSH
57243: DOUBLE
57244: LD_VAR 0 8
57248: DEC
57249: ST_TO_ADDR
57250: LD_VAR 0 10
57254: PUSH
57255: FOR_TO
57256: IFFALSE 57351
// begin if not ValidHex ( _x , _y ) then
57258: LD_VAR 0 11
57262: PPUSH
57263: LD_VAR 0 12
57267: PPUSH
57268: CALL_OW 488
57272: NOT
57273: IFFALSE 57277
// continue ;
57275: GO 57255
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57277: LD_VAR 0 11
57281: PPUSH
57282: LD_VAR 0 12
57286: PPUSH
57287: CALL_OW 351
57291: IFFALSE 57309
57293: PUSH
57294: LD_VAR 0 11
57298: PPUSH
57299: LD_VAR 0 12
57303: PPUSH
57304: CALL_OW 554
57308: AND
57309: IFFALSE 57349
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57311: LD_ADDR_VAR 0 13
57315: PUSH
57316: LD_VAR 0 13
57320: PPUSH
57321: LD_VAR 0 13
57325: PUSH
57326: LD_INT 1
57328: PLUS
57329: PPUSH
57330: LD_VAR 0 11
57334: PUSH
57335: LD_VAR 0 12
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PPUSH
57344: CALL_OW 2
57348: ST_TO_ADDR
// end ;
57349: GO 57255
57351: POP
57352: POP
57353: GO 57235
57355: POP
57356: POP
// if not list then
57357: LD_VAR 0 13
57361: NOT
57362: IFFALSE 57366
// exit ;
57364: GO 57612
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57366: LD_ADDR_VAR 0 13
57370: PUSH
57371: LD_VAR 0 1
57375: PPUSH
57376: LD_VAR 0 13
57380: PPUSH
57381: LD_INT 1
57383: PPUSH
57384: LD_INT 1
57386: PPUSH
57387: CALL 8380 0 4
57391: ST_TO_ADDR
// ComStop ( flame ) ;
57392: LD_VAR 0 1
57396: PPUSH
57397: CALL_OW 141
// for i in list do
57401: LD_ADDR_VAR 0 6
57405: PUSH
57406: LD_VAR 0 13
57410: PUSH
57411: FOR_IN
57412: IFFALSE 57443
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57414: LD_VAR 0 1
57418: PPUSH
57419: LD_VAR 0 6
57423: PUSH
57424: LD_INT 1
57426: ARRAY
57427: PPUSH
57428: LD_VAR 0 6
57432: PUSH
57433: LD_INT 2
57435: ARRAY
57436: PPUSH
57437: CALL_OW 176
57441: GO 57411
57443: POP
57444: POP
// repeat wait ( 0 0$1 ) ;
57445: LD_INT 35
57447: PPUSH
57448: CALL_OW 67
// task := GetTaskList ( flame ) ;
57452: LD_ADDR_VAR 0 14
57456: PUSH
57457: LD_VAR 0 1
57461: PPUSH
57462: CALL_OW 437
57466: ST_TO_ADDR
// if not task then
57467: LD_VAR 0 14
57471: NOT
57472: IFFALSE 57476
// exit ;
57474: GO 57612
// if task [ 1 ] [ 1 ] <> | then
57476: LD_VAR 0 14
57480: PUSH
57481: LD_INT 1
57483: ARRAY
57484: PUSH
57485: LD_INT 1
57487: ARRAY
57488: PUSH
57489: LD_STRING |
57491: NONEQUAL
57492: IFFALSE 57496
// exit ;
57494: GO 57612
// _x := task [ 1 ] [ 2 ] ;
57496: LD_ADDR_VAR 0 11
57500: PUSH
57501: LD_VAR 0 14
57505: PUSH
57506: LD_INT 1
57508: ARRAY
57509: PUSH
57510: LD_INT 2
57512: ARRAY
57513: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57514: LD_ADDR_VAR 0 12
57518: PUSH
57519: LD_VAR 0 14
57523: PUSH
57524: LD_INT 1
57526: ARRAY
57527: PUSH
57528: LD_INT 3
57530: ARRAY
57531: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57532: LD_VAR 0 11
57536: PPUSH
57537: LD_VAR 0 12
57541: PPUSH
57542: CALL_OW 351
57546: NOT
57547: IFTRUE 57566
57549: PUSH
57550: LD_VAR 0 11
57554: PPUSH
57555: LD_VAR 0 12
57559: PPUSH
57560: CALL_OW 554
57564: NOT
57565: OR
57566: IFFALSE 57600
// begin task := Delete ( task , 1 ) ;
57568: LD_ADDR_VAR 0 14
57572: PUSH
57573: LD_VAR 0 14
57577: PPUSH
57578: LD_INT 1
57580: PPUSH
57581: CALL_OW 3
57585: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57586: LD_VAR 0 1
57590: PPUSH
57591: LD_VAR 0 14
57595: PPUSH
57596: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57600: LD_VAR 0 1
57604: PPUSH
57605: CALL_OW 314
57609: NOT
57610: IFFALSE 57445
// end ;
57612: LD_VAR 0 5
57616: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57617: LD_EXP 47
57621: NOT
57622: IFFALSE 57672
57624: GO 57626
57626: DISABLE
// begin initHack := true ;
57627: LD_ADDR_EXP 47
57631: PUSH
57632: LD_INT 1
57634: ST_TO_ADDR
// hackTanks := [ ] ;
57635: LD_ADDR_EXP 48
57639: PUSH
57640: EMPTY
57641: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57642: LD_ADDR_EXP 49
57646: PUSH
57647: EMPTY
57648: ST_TO_ADDR
// hackLimit := 3 ;
57649: LD_ADDR_EXP 50
57653: PUSH
57654: LD_INT 3
57656: ST_TO_ADDR
// hackDist := 12 ;
57657: LD_ADDR_EXP 51
57661: PUSH
57662: LD_INT 12
57664: ST_TO_ADDR
// hackCounter := [ ] ;
57665: LD_ADDR_EXP 52
57669: PUSH
57670: EMPTY
57671: ST_TO_ADDR
// end ;
57672: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57673: LD_EXP 47
57677: IFFALSE 57695
57679: PUSH
57680: LD_INT 34
57682: PUSH
57683: LD_INT 99
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PPUSH
57690: CALL_OW 69
57694: AND
57695: IFFALSE 57948
57697: GO 57699
57699: DISABLE
57700: LD_INT 0
57702: PPUSH
57703: PPUSH
// begin enable ;
57704: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57705: LD_ADDR_VAR 0 1
57709: PUSH
57710: LD_INT 34
57712: PUSH
57713: LD_INT 99
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PPUSH
57720: CALL_OW 69
57724: PUSH
57725: FOR_IN
57726: IFFALSE 57946
// begin if not i in hackTanks then
57728: LD_VAR 0 1
57732: PUSH
57733: LD_EXP 48
57737: IN
57738: NOT
57739: IFFALSE 57822
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57741: LD_ADDR_EXP 48
57745: PUSH
57746: LD_EXP 48
57750: PPUSH
57751: LD_EXP 48
57755: PUSH
57756: LD_INT 1
57758: PLUS
57759: PPUSH
57760: LD_VAR 0 1
57764: PPUSH
57765: CALL_OW 1
57769: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57770: LD_ADDR_EXP 49
57774: PUSH
57775: LD_EXP 49
57779: PPUSH
57780: LD_EXP 49
57784: PUSH
57785: LD_INT 1
57787: PLUS
57788: PPUSH
57789: EMPTY
57790: PPUSH
57791: CALL_OW 1
57795: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57796: LD_ADDR_EXP 52
57800: PUSH
57801: LD_EXP 52
57805: PPUSH
57806: LD_EXP 52
57810: PUSH
57811: LD_INT 1
57813: PLUS
57814: PPUSH
57815: EMPTY
57816: PPUSH
57817: CALL_OW 1
57821: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57822: LD_VAR 0 1
57826: PPUSH
57827: CALL_OW 302
57831: NOT
57832: IFFALSE 57845
// begin HackUnlinkAll ( i ) ;
57834: LD_VAR 0 1
57838: PPUSH
57839: CALL 57951 0 1
// continue ;
57843: GO 57725
// end ; HackCheckCapturedStatus ( i ) ;
57845: LD_VAR 0 1
57849: PPUSH
57850: CALL 58396 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57854: LD_ADDR_VAR 0 2
57858: PUSH
57859: LD_INT 81
57861: PUSH
57862: LD_VAR 0 1
57866: PPUSH
57867: CALL_OW 255
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 33
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 91
57888: PUSH
57889: LD_VAR 0 1
57893: PUSH
57894: LD_EXP 51
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 50
57906: PUSH
57907: EMPTY
57908: LIST
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: PPUSH
57916: CALL_OW 69
57920: ST_TO_ADDR
// if not tmp then
57921: LD_VAR 0 2
57925: NOT
57926: IFFALSE 57930
// continue ;
57928: GO 57725
// HackLink ( i , tmp ) ;
57930: LD_VAR 0 1
57934: PPUSH
57935: LD_VAR 0 2
57939: PPUSH
57940: CALL 58087 0 2
// end ;
57944: GO 57725
57946: POP
57947: POP
// end ;
57948: PPOPN 2
57950: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57951: LD_INT 0
57953: PPUSH
57954: PPUSH
57955: PPUSH
// if not hack in hackTanks then
57956: LD_VAR 0 1
57960: PUSH
57961: LD_EXP 48
57965: IN
57966: NOT
57967: IFFALSE 57971
// exit ;
57969: GO 58082
// index := GetElementIndex ( hackTanks , hack ) ;
57971: LD_ADDR_VAR 0 4
57975: PUSH
57976: LD_EXP 48
57980: PPUSH
57981: LD_VAR 0 1
57985: PPUSH
57986: CALL 7675 0 2
57990: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57991: LD_EXP 49
57995: PUSH
57996: LD_VAR 0 4
58000: ARRAY
58001: IFFALSE 58082
// begin for i in hackTanksCaptured [ index ] do
58003: LD_ADDR_VAR 0 3
58007: PUSH
58008: LD_EXP 49
58012: PUSH
58013: LD_VAR 0 4
58017: ARRAY
58018: PUSH
58019: FOR_IN
58020: IFFALSE 58046
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58022: LD_VAR 0 3
58026: PUSH
58027: LD_INT 1
58029: ARRAY
58030: PPUSH
58031: LD_VAR 0 3
58035: PUSH
58036: LD_INT 2
58038: ARRAY
58039: PPUSH
58040: CALL_OW 235
58044: GO 58019
58046: POP
58047: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58048: LD_ADDR_EXP 49
58052: PUSH
58053: LD_EXP 49
58057: PPUSH
58058: LD_VAR 0 4
58062: PPUSH
58063: EMPTY
58064: PPUSH
58065: CALL_OW 1
58069: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58070: LD_VAR 0 1
58074: PPUSH
58075: LD_INT 0
58077: PPUSH
58078: CALL_OW 505
// end ; end ;
58082: LD_VAR 0 2
58086: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58087: LD_INT 0
58089: PPUSH
58090: PPUSH
58091: PPUSH
// if not hack in hackTanks or not vehicles then
58092: LD_VAR 0 1
58096: PUSH
58097: LD_EXP 48
58101: IN
58102: NOT
58103: IFTRUE 58112
58105: PUSH
58106: LD_VAR 0 2
58110: NOT
58111: OR
58112: IFFALSE 58116
// exit ;
58114: GO 58391
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58116: LD_ADDR_VAR 0 2
58120: PUSH
58121: LD_VAR 0 1
58125: PPUSH
58126: LD_VAR 0 2
58130: PPUSH
58131: LD_INT 1
58133: PPUSH
58134: LD_INT 1
58136: PPUSH
58137: CALL 8327 0 4
58141: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58142: LD_ADDR_VAR 0 5
58146: PUSH
58147: LD_EXP 48
58151: PPUSH
58152: LD_VAR 0 1
58156: PPUSH
58157: CALL 7675 0 2
58161: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58162: LD_EXP 49
58166: PUSH
58167: LD_VAR 0 5
58171: ARRAY
58172: PUSH
58173: LD_EXP 50
58177: LESS
58178: IFFALSE 58367
// begin for i := 1 to vehicles do
58180: LD_ADDR_VAR 0 4
58184: PUSH
58185: DOUBLE
58186: LD_INT 1
58188: DEC
58189: ST_TO_ADDR
58190: LD_VAR 0 2
58194: PUSH
58195: FOR_TO
58196: IFFALSE 58365
// begin if hackTanksCaptured [ index ] = hackLimit then
58198: LD_EXP 49
58202: PUSH
58203: LD_VAR 0 5
58207: ARRAY
58208: PUSH
58209: LD_EXP 50
58213: EQUAL
58214: IFFALSE 58218
// break ;
58216: GO 58365
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58218: LD_ADDR_EXP 52
58222: PUSH
58223: LD_EXP 52
58227: PPUSH
58228: LD_VAR 0 5
58232: PPUSH
58233: LD_EXP 52
58237: PUSH
58238: LD_VAR 0 5
58242: ARRAY
58243: PUSH
58244: LD_INT 1
58246: PLUS
58247: PPUSH
58248: CALL_OW 1
58252: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58253: LD_ADDR_EXP 49
58257: PUSH
58258: LD_EXP 49
58262: PPUSH
58263: LD_VAR 0 5
58267: PUSH
58268: LD_EXP 49
58272: PUSH
58273: LD_VAR 0 5
58277: ARRAY
58278: PUSH
58279: LD_INT 1
58281: PLUS
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PPUSH
58287: LD_VAR 0 2
58291: PUSH
58292: LD_VAR 0 4
58296: ARRAY
58297: PUSH
58298: LD_VAR 0 2
58302: PUSH
58303: LD_VAR 0 4
58307: ARRAY
58308: PPUSH
58309: CALL_OW 255
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PPUSH
58318: CALL 7892 0 3
58322: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58323: LD_VAR 0 2
58327: PUSH
58328: LD_VAR 0 4
58332: ARRAY
58333: PPUSH
58334: LD_VAR 0 1
58338: PPUSH
58339: CALL_OW 255
58343: PPUSH
58344: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58348: LD_VAR 0 2
58352: PUSH
58353: LD_VAR 0 4
58357: ARRAY
58358: PPUSH
58359: CALL_OW 141
// end ;
58363: GO 58195
58365: POP
58366: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58367: LD_VAR 0 1
58371: PPUSH
58372: LD_EXP 49
58376: PUSH
58377: LD_VAR 0 5
58381: ARRAY
58382: PUSH
58383: LD_INT 0
58385: PLUS
58386: PPUSH
58387: CALL_OW 505
// end ;
58391: LD_VAR 0 3
58395: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58396: LD_INT 0
58398: PPUSH
58399: PPUSH
58400: PPUSH
58401: PPUSH
// if not hack in hackTanks then
58402: LD_VAR 0 1
58406: PUSH
58407: LD_EXP 48
58411: IN
58412: NOT
58413: IFFALSE 58417
// exit ;
58415: GO 58661
// index := GetElementIndex ( hackTanks , hack ) ;
58417: LD_ADDR_VAR 0 4
58421: PUSH
58422: LD_EXP 48
58426: PPUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: CALL 7675 0 2
58436: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58437: LD_ADDR_VAR 0 3
58441: PUSH
58442: DOUBLE
58443: LD_EXP 49
58447: PUSH
58448: LD_VAR 0 4
58452: ARRAY
58453: INC
58454: ST_TO_ADDR
58455: LD_INT 1
58457: PUSH
58458: FOR_DOWNTO
58459: IFFALSE 58635
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58461: LD_ADDR_VAR 0 5
58465: PUSH
58466: LD_EXP 49
58470: PUSH
58471: LD_VAR 0 4
58475: ARRAY
58476: PUSH
58477: LD_VAR 0 3
58481: ARRAY
58482: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58483: LD_VAR 0 5
58487: PUSH
58488: LD_INT 1
58490: ARRAY
58491: PPUSH
58492: CALL_OW 302
58496: NOT
58497: IFTRUE 58525
58499: PUSH
58500: LD_VAR 0 5
58504: PUSH
58505: LD_INT 1
58507: ARRAY
58508: PPUSH
58509: CALL_OW 255
58513: PUSH
58514: LD_VAR 0 1
58518: PPUSH
58519: CALL_OW 255
58523: NONEQUAL
58524: OR
58525: IFFALSE 58633
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58527: LD_VAR 0 5
58531: PUSH
58532: LD_INT 1
58534: ARRAY
58535: PPUSH
58536: CALL_OW 305
58540: IFFALSE 58568
58542: PUSH
58543: LD_VAR 0 5
58547: PUSH
58548: LD_INT 1
58550: ARRAY
58551: PPUSH
58552: CALL_OW 255
58556: PUSH
58557: LD_VAR 0 1
58561: PPUSH
58562: CALL_OW 255
58566: EQUAL
58567: AND
58568: IFFALSE 58592
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58570: LD_VAR 0 5
58574: PUSH
58575: LD_INT 1
58577: ARRAY
58578: PPUSH
58579: LD_VAR 0 5
58583: PUSH
58584: LD_INT 2
58586: ARRAY
58587: PPUSH
58588: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58592: LD_ADDR_EXP 49
58596: PUSH
58597: LD_EXP 49
58601: PPUSH
58602: LD_VAR 0 4
58606: PPUSH
58607: LD_EXP 49
58611: PUSH
58612: LD_VAR 0 4
58616: ARRAY
58617: PPUSH
58618: LD_VAR 0 3
58622: PPUSH
58623: CALL_OW 3
58627: PPUSH
58628: CALL_OW 1
58632: ST_TO_ADDR
// end ; end ;
58633: GO 58458
58635: POP
58636: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58637: LD_VAR 0 1
58641: PPUSH
58642: LD_EXP 49
58646: PUSH
58647: LD_VAR 0 4
58651: ARRAY
58652: PUSH
58653: LD_INT 0
58655: PLUS
58656: PPUSH
58657: CALL_OW 505
// end ;
58661: LD_VAR 0 2
58665: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58666: LD_INT 0
58668: PPUSH
58669: PPUSH
58670: PPUSH
58671: PPUSH
// if not hack in hackTanks then
58672: LD_VAR 0 1
58676: PUSH
58677: LD_EXP 48
58681: IN
58682: NOT
58683: IFFALSE 58687
// exit ;
58685: GO 58772
// index := GetElementIndex ( hackTanks , hack ) ;
58687: LD_ADDR_VAR 0 5
58691: PUSH
58692: LD_EXP 48
58696: PPUSH
58697: LD_VAR 0 1
58701: PPUSH
58702: CALL 7675 0 2
58706: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58707: LD_ADDR_VAR 0 4
58711: PUSH
58712: DOUBLE
58713: LD_INT 1
58715: DEC
58716: ST_TO_ADDR
58717: LD_EXP 49
58721: PUSH
58722: LD_VAR 0 5
58726: ARRAY
58727: PUSH
58728: FOR_TO
58729: IFFALSE 58770
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58731: LD_EXP 49
58735: PUSH
58736: LD_VAR 0 5
58740: ARRAY
58741: PUSH
58742: LD_VAR 0 4
58746: ARRAY
58747: PUSH
58748: LD_INT 1
58750: ARRAY
58751: PUSH
58752: LD_VAR 0 2
58756: EQUAL
58757: IFFALSE 58768
// KillUnit ( vehicle ) ;
58759: LD_VAR 0 2
58763: PPUSH
58764: CALL_OW 66
58768: GO 58728
58770: POP
58771: POP
// end ;
58772: LD_VAR 0 3
58776: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58777: LD_EXP 53
58781: NOT
58782: IFFALSE 58817
58784: GO 58786
58786: DISABLE
// begin initMiner := true ;
58787: LD_ADDR_EXP 53
58791: PUSH
58792: LD_INT 1
58794: ST_TO_ADDR
// minersList := [ ] ;
58795: LD_ADDR_EXP 54
58799: PUSH
58800: EMPTY
58801: ST_TO_ADDR
// minerMinesList := [ ] ;
58802: LD_ADDR_EXP 55
58806: PUSH
58807: EMPTY
58808: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58809: LD_ADDR_EXP 56
58813: PUSH
58814: LD_INT 5
58816: ST_TO_ADDR
// end ;
58817: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58818: LD_EXP 53
58822: IFFALSE 58840
58824: PUSH
58825: LD_INT 34
58827: PUSH
58828: LD_INT 81
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PPUSH
58835: CALL_OW 69
58839: AND
58840: IFFALSE 59303
58842: GO 58844
58844: DISABLE
58845: LD_INT 0
58847: PPUSH
58848: PPUSH
58849: PPUSH
58850: PPUSH
// begin enable ;
58851: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58852: LD_ADDR_VAR 0 1
58856: PUSH
58857: LD_INT 34
58859: PUSH
58860: LD_INT 81
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PPUSH
58867: CALL_OW 69
58871: PUSH
58872: FOR_IN
58873: IFFALSE 58945
// begin if not i in minersList then
58875: LD_VAR 0 1
58879: PUSH
58880: LD_EXP 54
58884: IN
58885: NOT
58886: IFFALSE 58943
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58888: LD_ADDR_EXP 54
58892: PUSH
58893: LD_EXP 54
58897: PPUSH
58898: LD_EXP 54
58902: PUSH
58903: LD_INT 1
58905: PLUS
58906: PPUSH
58907: LD_VAR 0 1
58911: PPUSH
58912: CALL_OW 1
58916: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58917: LD_ADDR_EXP 55
58921: PUSH
58922: LD_EXP 55
58926: PPUSH
58927: LD_EXP 55
58931: PUSH
58932: LD_INT 1
58934: PLUS
58935: PPUSH
58936: EMPTY
58937: PPUSH
58938: CALL_OW 1
58942: ST_TO_ADDR
// end end ;
58943: GO 58872
58945: POP
58946: POP
// for i := minerMinesList downto 1 do
58947: LD_ADDR_VAR 0 1
58951: PUSH
58952: DOUBLE
58953: LD_EXP 55
58957: INC
58958: ST_TO_ADDR
58959: LD_INT 1
58961: PUSH
58962: FOR_DOWNTO
58963: IFFALSE 59301
// begin if IsLive ( minersList [ i ] ) then
58965: LD_EXP 54
58969: PUSH
58970: LD_VAR 0 1
58974: ARRAY
58975: PPUSH
58976: CALL_OW 300
58980: IFFALSE 59008
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58982: LD_EXP 54
58986: PUSH
58987: LD_VAR 0 1
58991: ARRAY
58992: PPUSH
58993: LD_EXP 55
58997: PUSH
58998: LD_VAR 0 1
59002: ARRAY
59003: PPUSH
59004: CALL_OW 505
// if not minerMinesList [ i ] then
59008: LD_EXP 55
59012: PUSH
59013: LD_VAR 0 1
59017: ARRAY
59018: NOT
59019: IFFALSE 59023
// continue ;
59021: GO 58962
// for j := minerMinesList [ i ] downto 1 do
59023: LD_ADDR_VAR 0 2
59027: PUSH
59028: DOUBLE
59029: LD_EXP 55
59033: PUSH
59034: LD_VAR 0 1
59038: ARRAY
59039: INC
59040: ST_TO_ADDR
59041: LD_INT 1
59043: PUSH
59044: FOR_DOWNTO
59045: IFFALSE 59297
// begin side := GetSide ( minersList [ i ] ) ;
59047: LD_ADDR_VAR 0 3
59051: PUSH
59052: LD_EXP 54
59056: PUSH
59057: LD_VAR 0 1
59061: ARRAY
59062: PPUSH
59063: CALL_OW 255
59067: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59068: LD_ADDR_VAR 0 4
59072: PUSH
59073: LD_EXP 55
59077: PUSH
59078: LD_VAR 0 1
59082: ARRAY
59083: PUSH
59084: LD_VAR 0 2
59088: ARRAY
59089: PUSH
59090: LD_INT 1
59092: ARRAY
59093: PPUSH
59094: LD_EXP 55
59098: PUSH
59099: LD_VAR 0 1
59103: ARRAY
59104: PUSH
59105: LD_VAR 0 2
59109: ARRAY
59110: PUSH
59111: LD_INT 2
59113: ARRAY
59114: PPUSH
59115: CALL_OW 428
59119: ST_TO_ADDR
// if not tmp then
59120: LD_VAR 0 4
59124: NOT
59125: IFFALSE 59129
// continue ;
59127: GO 59044
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59129: LD_VAR 0 4
59133: PUSH
59134: LD_INT 81
59136: PUSH
59137: LD_VAR 0 3
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PPUSH
59146: CALL_OW 69
59150: IN
59151: IFFALSE 59201
59153: PUSH
59154: LD_EXP 55
59158: PUSH
59159: LD_VAR 0 1
59163: ARRAY
59164: PUSH
59165: LD_VAR 0 2
59169: ARRAY
59170: PUSH
59171: LD_INT 1
59173: ARRAY
59174: PPUSH
59175: LD_EXP 55
59179: PUSH
59180: LD_VAR 0 1
59184: ARRAY
59185: PUSH
59186: LD_VAR 0 2
59190: ARRAY
59191: PUSH
59192: LD_INT 2
59194: ARRAY
59195: PPUSH
59196: CALL_OW 458
59200: AND
59201: IFFALSE 59295
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59203: LD_EXP 55
59207: PUSH
59208: LD_VAR 0 1
59212: ARRAY
59213: PUSH
59214: LD_VAR 0 2
59218: ARRAY
59219: PUSH
59220: LD_INT 1
59222: ARRAY
59223: PPUSH
59224: LD_EXP 55
59228: PUSH
59229: LD_VAR 0 1
59233: ARRAY
59234: PUSH
59235: LD_VAR 0 2
59239: ARRAY
59240: PUSH
59241: LD_INT 2
59243: ARRAY
59244: PPUSH
59245: LD_VAR 0 3
59249: PPUSH
59250: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59254: LD_ADDR_EXP 55
59258: PUSH
59259: LD_EXP 55
59263: PPUSH
59264: LD_VAR 0 1
59268: PPUSH
59269: LD_EXP 55
59273: PUSH
59274: LD_VAR 0 1
59278: ARRAY
59279: PPUSH
59280: LD_VAR 0 2
59284: PPUSH
59285: CALL_OW 3
59289: PPUSH
59290: CALL_OW 1
59294: ST_TO_ADDR
// end ; end ;
59295: GO 59044
59297: POP
59298: POP
// end ;
59299: GO 58962
59301: POP
59302: POP
// end ;
59303: PPOPN 4
59305: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59306: LD_INT 0
59308: PPUSH
59309: PPUSH
// result := false ;
59310: LD_ADDR_VAR 0 4
59314: PUSH
59315: LD_INT 0
59317: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59318: LD_VAR 0 1
59322: PPUSH
59323: CALL_OW 264
59327: PUSH
59328: LD_INT 81
59330: EQUAL
59331: NOT
59332: IFFALSE 59336
// exit ;
59334: GO 59580
// index := GetElementIndex ( minersList , unit ) ;
59336: LD_ADDR_VAR 0 5
59340: PUSH
59341: LD_EXP 54
59345: PPUSH
59346: LD_VAR 0 1
59350: PPUSH
59351: CALL 7675 0 2
59355: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59356: LD_EXP 55
59360: PUSH
59361: LD_VAR 0 5
59365: ARRAY
59366: PUSH
59367: LD_EXP 56
59371: GREATEREQUAL
59372: IFFALSE 59376
// exit ;
59374: GO 59580
// ComMoveXY ( unit , x , y ) ;
59376: LD_VAR 0 1
59380: PPUSH
59381: LD_VAR 0 2
59385: PPUSH
59386: LD_VAR 0 3
59390: PPUSH
59391: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59395: LD_INT 35
59397: PPUSH
59398: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59402: LD_VAR 0 1
59406: PPUSH
59407: LD_VAR 0 2
59411: PPUSH
59412: LD_VAR 0 3
59416: PPUSH
59417: CALL 39721 0 3
59421: NOT
59422: IFFALSE 59435
59424: PUSH
59425: LD_VAR 0 1
59429: PPUSH
59430: CALL_OW 314
59434: AND
59435: IFFALSE 59439
// exit ;
59437: GO 59580
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59439: LD_VAR 0 2
59443: PPUSH
59444: LD_VAR 0 3
59448: PPUSH
59449: CALL_OW 428
59453: PUSH
59454: LD_VAR 0 1
59458: EQUAL
59459: IFFALSE 59473
59461: PUSH
59462: LD_VAR 0 1
59466: PPUSH
59467: CALL_OW 314
59471: NOT
59472: AND
59473: IFFALSE 59395
// PlaySoundXY ( x , y , PlantMine ) ;
59475: LD_VAR 0 2
59479: PPUSH
59480: LD_VAR 0 3
59484: PPUSH
59485: LD_STRING PlantMine
59487: PPUSH
59488: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59492: LD_VAR 0 2
59496: PPUSH
59497: LD_VAR 0 3
59501: PPUSH
59502: LD_VAR 0 1
59506: PPUSH
59507: CALL_OW 255
59511: PPUSH
59512: LD_INT 0
59514: PPUSH
59515: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59519: LD_ADDR_EXP 55
59523: PUSH
59524: LD_EXP 55
59528: PPUSH
59529: LD_VAR 0 5
59533: PUSH
59534: LD_EXP 55
59538: PUSH
59539: LD_VAR 0 5
59543: ARRAY
59544: PUSH
59545: LD_INT 1
59547: PLUS
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PPUSH
59553: LD_VAR 0 2
59557: PUSH
59558: LD_VAR 0 3
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PPUSH
59567: CALL 7892 0 3
59571: ST_TO_ADDR
// result := true ;
59572: LD_ADDR_VAR 0 4
59576: PUSH
59577: LD_INT 1
59579: ST_TO_ADDR
// end ;
59580: LD_VAR 0 4
59584: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59585: LD_INT 0
59587: PPUSH
59588: PPUSH
59589: PPUSH
// if not unit in minersList then
59590: LD_VAR 0 1
59594: PUSH
59595: LD_EXP 54
59599: IN
59600: NOT
59601: IFFALSE 59605
// exit ;
59603: GO 59999
// index := GetElementIndex ( minersList , unit ) ;
59605: LD_ADDR_VAR 0 6
59609: PUSH
59610: LD_EXP 54
59614: PPUSH
59615: LD_VAR 0 1
59619: PPUSH
59620: CALL 7675 0 2
59624: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59625: LD_ADDR_VAR 0 5
59629: PUSH
59630: DOUBLE
59631: LD_EXP 55
59635: PUSH
59636: LD_VAR 0 6
59640: ARRAY
59641: INC
59642: ST_TO_ADDR
59643: LD_INT 1
59645: PUSH
59646: FOR_DOWNTO
59647: IFFALSE 59810
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59649: LD_EXP 55
59653: PUSH
59654: LD_VAR 0 6
59658: ARRAY
59659: PUSH
59660: LD_VAR 0 5
59664: ARRAY
59665: PUSH
59666: LD_INT 1
59668: ARRAY
59669: PUSH
59670: LD_VAR 0 2
59674: EQUAL
59675: IFFALSE 59705
59677: PUSH
59678: LD_EXP 55
59682: PUSH
59683: LD_VAR 0 6
59687: ARRAY
59688: PUSH
59689: LD_VAR 0 5
59693: ARRAY
59694: PUSH
59695: LD_INT 2
59697: ARRAY
59698: PUSH
59699: LD_VAR 0 3
59703: EQUAL
59704: AND
59705: IFFALSE 59808
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59707: LD_EXP 55
59711: PUSH
59712: LD_VAR 0 6
59716: ARRAY
59717: PUSH
59718: LD_VAR 0 5
59722: ARRAY
59723: PUSH
59724: LD_INT 1
59726: ARRAY
59727: PPUSH
59728: LD_EXP 55
59732: PUSH
59733: LD_VAR 0 6
59737: ARRAY
59738: PUSH
59739: LD_VAR 0 5
59743: ARRAY
59744: PUSH
59745: LD_INT 2
59747: ARRAY
59748: PPUSH
59749: LD_VAR 0 1
59753: PPUSH
59754: CALL_OW 255
59758: PPUSH
59759: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59763: LD_ADDR_EXP 55
59767: PUSH
59768: LD_EXP 55
59772: PPUSH
59773: LD_VAR 0 6
59777: PPUSH
59778: LD_EXP 55
59782: PUSH
59783: LD_VAR 0 6
59787: ARRAY
59788: PPUSH
59789: LD_VAR 0 5
59793: PPUSH
59794: CALL_OW 3
59798: PPUSH
59799: CALL_OW 1
59803: ST_TO_ADDR
// exit ;
59804: POP
59805: POP
59806: GO 59999
// end ; end ;
59808: GO 59646
59810: POP
59811: POP
// for i := minerMinesList [ index ] downto 1 do
59812: LD_ADDR_VAR 0 5
59816: PUSH
59817: DOUBLE
59818: LD_EXP 55
59822: PUSH
59823: LD_VAR 0 6
59827: ARRAY
59828: INC
59829: ST_TO_ADDR
59830: LD_INT 1
59832: PUSH
59833: FOR_DOWNTO
59834: IFFALSE 59997
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59836: LD_EXP 55
59840: PUSH
59841: LD_VAR 0 6
59845: ARRAY
59846: PUSH
59847: LD_VAR 0 5
59851: ARRAY
59852: PUSH
59853: LD_INT 1
59855: ARRAY
59856: PPUSH
59857: LD_EXP 55
59861: PUSH
59862: LD_VAR 0 6
59866: ARRAY
59867: PUSH
59868: LD_VAR 0 5
59872: ARRAY
59873: PUSH
59874: LD_INT 2
59876: ARRAY
59877: PPUSH
59878: LD_VAR 0 2
59882: PPUSH
59883: LD_VAR 0 3
59887: PPUSH
59888: CALL_OW 298
59892: PUSH
59893: LD_INT 6
59895: LESS
59896: IFFALSE 59995
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59898: LD_EXP 55
59902: PUSH
59903: LD_VAR 0 6
59907: ARRAY
59908: PUSH
59909: LD_VAR 0 5
59913: ARRAY
59914: PUSH
59915: LD_INT 1
59917: ARRAY
59918: PPUSH
59919: LD_EXP 55
59923: PUSH
59924: LD_VAR 0 6
59928: ARRAY
59929: PUSH
59930: LD_VAR 0 5
59934: ARRAY
59935: PUSH
59936: LD_INT 2
59938: ARRAY
59939: PPUSH
59940: LD_VAR 0 1
59944: PPUSH
59945: CALL_OW 255
59949: PPUSH
59950: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59954: LD_ADDR_EXP 55
59958: PUSH
59959: LD_EXP 55
59963: PPUSH
59964: LD_VAR 0 6
59968: PPUSH
59969: LD_EXP 55
59973: PUSH
59974: LD_VAR 0 6
59978: ARRAY
59979: PPUSH
59980: LD_VAR 0 5
59984: PPUSH
59985: CALL_OW 3
59989: PPUSH
59990: CALL_OW 1
59994: ST_TO_ADDR
// end ; end ;
59995: GO 59833
59997: POP
59998: POP
// end ;
59999: LD_VAR 0 4
60003: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60004: LD_INT 0
60006: PPUSH
60007: PPUSH
60008: PPUSH
60009: PPUSH
60010: PPUSH
60011: PPUSH
60012: PPUSH
60013: PPUSH
60014: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60015: LD_VAR 0 1
60019: PPUSH
60020: CALL_OW 264
60024: PUSH
60025: LD_INT 81
60027: EQUAL
60028: NOT
60029: IFTRUE 60044
60031: PUSH
60032: LD_VAR 0 1
60036: PUSH
60037: LD_EXP 54
60041: IN
60042: NOT
60043: OR
60044: IFFALSE 60048
// exit ;
60046: GO 60374
// index := GetElementIndex ( minersList , unit ) ;
60048: LD_ADDR_VAR 0 6
60052: PUSH
60053: LD_EXP 54
60057: PPUSH
60058: LD_VAR 0 1
60062: PPUSH
60063: CALL 7675 0 2
60067: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60068: LD_ADDR_VAR 0 8
60072: PUSH
60073: LD_EXP 56
60077: PUSH
60078: LD_EXP 55
60082: PUSH
60083: LD_VAR 0 6
60087: ARRAY
60088: MINUS
60089: ST_TO_ADDR
// if not minesFreeAmount then
60090: LD_VAR 0 8
60094: NOT
60095: IFFALSE 60099
// exit ;
60097: GO 60374
// tmp := [ ] ;
60099: LD_ADDR_VAR 0 7
60103: PUSH
60104: EMPTY
60105: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60106: LD_ADDR_VAR 0 5
60110: PUSH
60111: DOUBLE
60112: LD_INT 1
60114: DEC
60115: ST_TO_ADDR
60116: LD_VAR 0 8
60120: PUSH
60121: FOR_TO
60122: IFFALSE 60321
// begin _d := rand ( 0 , 5 ) ;
60124: LD_ADDR_VAR 0 11
60128: PUSH
60129: LD_INT 0
60131: PPUSH
60132: LD_INT 5
60134: PPUSH
60135: CALL_OW 12
60139: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60140: LD_ADDR_VAR 0 12
60144: PUSH
60145: LD_INT 2
60147: PPUSH
60148: LD_INT 6
60150: PPUSH
60151: CALL_OW 12
60155: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60156: LD_ADDR_VAR 0 9
60160: PUSH
60161: LD_VAR 0 2
60165: PPUSH
60166: LD_VAR 0 11
60170: PPUSH
60171: LD_VAR 0 12
60175: PPUSH
60176: CALL_OW 272
60180: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60181: LD_ADDR_VAR 0 10
60185: PUSH
60186: LD_VAR 0 3
60190: PPUSH
60191: LD_VAR 0 11
60195: PPUSH
60196: LD_VAR 0 12
60200: PPUSH
60201: CALL_OW 273
60205: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60206: LD_VAR 0 9
60210: PPUSH
60211: LD_VAR 0 10
60215: PPUSH
60216: CALL_OW 488
60220: IFFALSE 60244
60222: PUSH
60223: LD_VAR 0 9
60227: PUSH
60228: LD_VAR 0 10
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_VAR 0 7
60241: IN
60242: NOT
60243: AND
60244: IFFALSE 60263
60246: PUSH
60247: LD_VAR 0 9
60251: PPUSH
60252: LD_VAR 0 10
60256: PPUSH
60257: CALL_OW 458
60261: NOT
60262: AND
60263: IFFALSE 60305
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60265: LD_ADDR_VAR 0 7
60269: PUSH
60270: LD_VAR 0 7
60274: PPUSH
60275: LD_VAR 0 7
60279: PUSH
60280: LD_INT 1
60282: PLUS
60283: PPUSH
60284: LD_VAR 0 9
60288: PUSH
60289: LD_VAR 0 10
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PPUSH
60298: CALL_OW 1
60302: ST_TO_ADDR
60303: GO 60319
// i := i - 1 ;
60305: LD_ADDR_VAR 0 5
60309: PUSH
60310: LD_VAR 0 5
60314: PUSH
60315: LD_INT 1
60317: MINUS
60318: ST_TO_ADDR
// end ;
60319: GO 60121
60321: POP
60322: POP
// for i in tmp do
60323: LD_ADDR_VAR 0 5
60327: PUSH
60328: LD_VAR 0 7
60332: PUSH
60333: FOR_IN
60334: IFFALSE 60372
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60336: LD_VAR 0 1
60340: PPUSH
60341: LD_VAR 0 5
60345: PUSH
60346: LD_INT 1
60348: ARRAY
60349: PPUSH
60350: LD_VAR 0 5
60354: PUSH
60355: LD_INT 2
60357: ARRAY
60358: PPUSH
60359: CALL 59306 0 3
60363: NOT
60364: IFFALSE 60370
// exit ;
60366: POP
60367: POP
60368: GO 60374
60370: GO 60333
60372: POP
60373: POP
// end ;
60374: LD_VAR 0 4
60378: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60379: LD_INT 0
60381: PPUSH
60382: PPUSH
60383: PPUSH
60384: PPUSH
60385: PPUSH
60386: PPUSH
60387: PPUSH
60388: PPUSH
60389: PPUSH
// if GetClass ( unit ) <> class_sniper then
60390: LD_VAR 0 1
60394: PPUSH
60395: CALL_OW 257
60399: PUSH
60400: LD_INT 5
60402: NONEQUAL
60403: IFFALSE 60407
// exit ;
60405: GO 60877
// dist := 8 ;
60407: LD_ADDR_VAR 0 5
60411: PUSH
60412: LD_INT 8
60414: ST_TO_ADDR
// viewRange := 12 ;
60415: LD_ADDR_VAR 0 8
60419: PUSH
60420: LD_INT 12
60422: ST_TO_ADDR
// side := GetSide ( unit ) ;
60423: LD_ADDR_VAR 0 6
60427: PUSH
60428: LD_VAR 0 1
60432: PPUSH
60433: CALL_OW 255
60437: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60438: LD_INT 61
60440: PPUSH
60441: LD_VAR 0 6
60445: PPUSH
60446: CALL_OW 321
60450: PUSH
60451: LD_INT 2
60453: EQUAL
60454: IFFALSE 60464
// viewRange := 16 ;
60456: LD_ADDR_VAR 0 8
60460: PUSH
60461: LD_INT 16
60463: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_VAR 0 2
60473: PPUSH
60474: LD_VAR 0 3
60478: PPUSH
60479: CALL_OW 297
60483: PUSH
60484: LD_VAR 0 5
60488: GREATER
60489: IFFALSE 60568
// begin ComMoveXY ( unit , x , y ) ;
60491: LD_VAR 0 1
60495: PPUSH
60496: LD_VAR 0 2
60500: PPUSH
60501: LD_VAR 0 3
60505: PPUSH
60506: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60510: LD_INT 35
60512: PPUSH
60513: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60517: LD_VAR 0 1
60521: PPUSH
60522: LD_VAR 0 2
60526: PPUSH
60527: LD_VAR 0 3
60531: PPUSH
60532: CALL 39721 0 3
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 60877
// until GetDistUnitXY ( unit , x , y ) < dist ;
60541: LD_VAR 0 1
60545: PPUSH
60546: LD_VAR 0 2
60550: PPUSH
60551: LD_VAR 0 3
60555: PPUSH
60556: CALL_OW 297
60560: PUSH
60561: LD_VAR 0 5
60565: LESS
60566: IFFALSE 60510
// end ; ComTurnXY ( unit , x , y ) ;
60568: LD_VAR 0 1
60572: PPUSH
60573: LD_VAR 0 2
60577: PPUSH
60578: LD_VAR 0 3
60582: PPUSH
60583: CALL_OW 118
// repeat if Multiplayer then
60587: LD_OWVAR 4
60591: IFFALSE 60602
// wait ( 35 ) else
60593: LD_INT 35
60595: PPUSH
60596: CALL_OW 67
60600: GO 60609
// wait ( 5 ) ;
60602: LD_INT 5
60604: PPUSH
60605: CALL_OW 67
// _d := GetDir ( unit ) ;
60609: LD_ADDR_VAR 0 11
60613: PUSH
60614: LD_VAR 0 1
60618: PPUSH
60619: CALL_OW 254
60623: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60624: LD_ADDR_VAR 0 7
60628: PUSH
60629: LD_VAR 0 1
60633: PPUSH
60634: CALL_OW 250
60638: PPUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL_OW 251
60648: PPUSH
60649: LD_VAR 0 2
60653: PPUSH
60654: LD_VAR 0 3
60658: PPUSH
60659: CALL 42357 0 4
60663: ST_TO_ADDR
// until dir = _d ;
60664: LD_VAR 0 7
60668: PUSH
60669: LD_VAR 0 11
60673: EQUAL
60674: IFFALSE 60587
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60676: LD_ADDR_VAR 0 9
60680: PUSH
60681: LD_VAR 0 1
60685: PPUSH
60686: CALL_OW 250
60690: PPUSH
60691: LD_VAR 0 7
60695: PPUSH
60696: LD_VAR 0 5
60700: PPUSH
60701: CALL_OW 272
60705: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60706: LD_ADDR_VAR 0 10
60710: PUSH
60711: LD_VAR 0 1
60715: PPUSH
60716: CALL_OW 251
60720: PPUSH
60721: LD_VAR 0 7
60725: PPUSH
60726: LD_VAR 0 5
60730: PPUSH
60731: CALL_OW 273
60735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60736: LD_VAR 0 9
60740: PPUSH
60741: LD_VAR 0 10
60745: PPUSH
60746: CALL_OW 488
60750: NOT
60751: IFFALSE 60755
// exit ;
60753: GO 60877
// ComAnimCustom ( unit , 1 ) ;
60755: LD_VAR 0 1
60759: PPUSH
60760: LD_INT 1
60762: PPUSH
60763: CALL_OW 592
// p := 0 ;
60767: LD_ADDR_VAR 0 12
60771: PUSH
60772: LD_INT 0
60774: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60775: LD_VAR 0 9
60779: PPUSH
60780: LD_VAR 0 10
60784: PPUSH
60785: LD_VAR 0 6
60789: PPUSH
60790: LD_VAR 0 8
60794: PPUSH
60795: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60799: LD_INT 35
60801: PPUSH
60802: CALL_OW 67
// p := Inc ( p ) ;
60806: LD_ADDR_VAR 0 12
60810: PUSH
60811: LD_VAR 0 12
60815: PPUSH
60816: CALL 42313 0 1
60820: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60821: LD_VAR 0 12
60825: PUSH
60826: LD_INT 3
60828: EQUAL
60829: IFTRUE 60843
60831: PUSH
60832: LD_VAR 0 1
60836: PPUSH
60837: CALL_OW 302
60841: NOT
60842: OR
60843: IFTRUE 60856
60845: PUSH
60846: LD_VAR 0 1
60850: PPUSH
60851: CALL_OW 301
60855: OR
60856: IFFALSE 60799
// RemoveSeeing ( _x , _y , side ) ;
60858: LD_VAR 0 9
60862: PPUSH
60863: LD_VAR 0 10
60867: PPUSH
60868: LD_VAR 0 6
60872: PPUSH
60873: CALL_OW 331
// end ; end_of_file
60877: LD_VAR 0 4
60881: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60882: PPOPN 6
60884: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60885: LD_EXP 1
60889: PUSH
60890: LD_INT 4
60892: EQUAL
60893: IFFALSE 60929
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60895: LD_STRING setGameDifficulty(
60897: PUSH
60898: LD_OWVAR 67
60902: STR
60903: PUSH
60904: LD_STRING )
60906: STR
60907: PPUSH
60908: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60912: LD_STRING displayDifficulty(
60914: PUSH
60915: LD_OWVAR 67
60919: STR
60920: PUSH
60921: LD_STRING )
60923: STR
60924: PPUSH
60925: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60929: CALL 60958 0 0
// end ; end_of_file
60933: PPOPN 1
60935: END
// every 0 0$1 do
60936: GO 60938
60938: DISABLE
// begin enable ;
60939: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60940: LD_STRING updateTimer(
60942: PUSH
60943: LD_OWVAR 1
60947: STR
60948: PUSH
60949: LD_STRING );
60951: STR
60952: PPUSH
60953: CALL_OW 559
// end ;
60957: END
// export function SOS_MapStart ( ) ; begin
60958: LD_INT 0
60960: PPUSH
// UpdateFactoryWaypoints ( ) ;
60961: CALL 61892 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60965: CALL 62144 0 0
// ParseMultiDataToLua ( ) ;
60969: CALL 62291 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60973: LD_STRING setSpecLogoNumber(
60975: PUSH
60976: LD_INT 2
60978: STR
60979: PUSH
60980: LD_STRING ,
60982: STR
60983: PUSH
60984: LD_INT 1
60986: STR
60987: PUSH
60988: LD_STRING )
60990: STR
60991: PPUSH
60992: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60996: LD_STRING setSpecLogoNumber(
60998: PUSH
60999: LD_INT 3
61001: STR
61002: PUSH
61003: LD_STRING ,
61005: STR
61006: PUSH
61007: LD_INT 2
61009: STR
61010: PUSH
61011: LD_STRING )
61013: STR
61014: PPUSH
61015: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61019: LD_STRING setSpecLogoNumber(
61021: PUSH
61022: LD_INT 4
61024: STR
61025: PUSH
61026: LD_STRING ,
61028: STR
61029: PUSH
61030: LD_INT 3
61032: STR
61033: PUSH
61034: LD_STRING )
61036: STR
61037: PPUSH
61038: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61042: LD_STRING setSpecLogoNumber(
61044: PUSH
61045: LD_INT 5
61047: STR
61048: PUSH
61049: LD_STRING ,
61051: STR
61052: PUSH
61053: LD_INT 4
61055: STR
61056: PUSH
61057: LD_STRING )
61059: STR
61060: PPUSH
61061: CALL_OW 559
// end ;
61065: LD_VAR 0 1
61069: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61070: LD_INT 0
61072: PPUSH
61073: PPUSH
61074: PPUSH
61075: PPUSH
61076: PPUSH
61077: PPUSH
61078: PPUSH
61079: PPUSH
61080: PPUSH
// for i := 1 to 8 do
61081: LD_ADDR_VAR 0 2
61085: PUSH
61086: DOUBLE
61087: LD_INT 1
61089: DEC
61090: ST_TO_ADDR
61091: LD_INT 8
61093: PUSH
61094: FOR_TO
61095: IFFALSE 61480
// begin if mpSidePositions [ i ] then
61097: LD_EXP 5
61101: PUSH
61102: LD_VAR 0 2
61106: ARRAY
61107: IFFALSE 61478
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61109: LD_ADDR_VAR 0 7
61113: PUSH
61114: LD_INT 22
61116: PUSH
61117: LD_VAR 0 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 21
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PPUSH
61140: CALL_OW 69
61144: PPUSH
61145: CALL 5008 0 1
61149: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61150: LD_ADDR_VAR 0 9
61154: PUSH
61155: LD_INT 22
61157: PUSH
61158: LD_VAR 0 2
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 30
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 30
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PPUSH
61199: CALL_OW 69
61203: ST_TO_ADDR
// crates := 0 ;
61204: LD_ADDR_VAR 0 4
61208: PUSH
61209: LD_INT 0
61211: ST_TO_ADDR
// oil := 0 ;
61212: LD_ADDR_VAR 0 5
61216: PUSH
61217: LD_INT 0
61219: ST_TO_ADDR
// sib := 0 ;
61220: LD_ADDR_VAR 0 6
61224: PUSH
61225: LD_INT 0
61227: ST_TO_ADDR
// if bases then
61228: LD_VAR 0 9
61232: IFFALSE 61338
// begin for j in bases do
61234: LD_ADDR_VAR 0 3
61238: PUSH
61239: LD_VAR 0 9
61243: PUSH
61244: FOR_IN
61245: IFFALSE 61336
// begin base := GetBase ( j ) ;
61247: LD_ADDR_VAR 0 8
61251: PUSH
61252: LD_VAR 0 3
61256: PPUSH
61257: CALL_OW 274
61261: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61262: LD_ADDR_VAR 0 4
61266: PUSH
61267: LD_VAR 0 4
61271: PUSH
61272: LD_VAR 0 8
61276: PPUSH
61277: LD_INT 1
61279: PPUSH
61280: CALL_OW 275
61284: PLUS
61285: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61286: LD_ADDR_VAR 0 5
61290: PUSH
61291: LD_VAR 0 5
61295: PUSH
61296: LD_VAR 0 8
61300: PPUSH
61301: LD_INT 2
61303: PPUSH
61304: CALL_OW 275
61308: PLUS
61309: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61310: LD_ADDR_VAR 0 6
61314: PUSH
61315: LD_VAR 0 6
61319: PUSH
61320: LD_VAR 0 8
61324: PPUSH
61325: LD_INT 3
61327: PPUSH
61328: CALL_OW 275
61332: PLUS
61333: ST_TO_ADDR
// end ;
61334: GO 61244
61336: POP
61337: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61338: LD_STRING setSpecText(
61340: PUSH
61341: LD_VAR 0 2
61345: STR
61346: PUSH
61347: LD_STRING ,
61349: STR
61350: PUSH
61351: LD_INT 2
61353: STR
61354: PUSH
61355: LD_STRING ,
61357: STR
61358: PUSH
61359: LD_VAR 0 4
61363: STR
61364: PUSH
61365: LD_STRING )
61367: STR
61368: PPUSH
61369: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61373: LD_STRING setSpecText(
61375: PUSH
61376: LD_VAR 0 2
61380: STR
61381: PUSH
61382: LD_STRING ,
61384: STR
61385: PUSH
61386: LD_INT 3
61388: STR
61389: PUSH
61390: LD_STRING ,
61392: STR
61393: PUSH
61394: LD_VAR 0 5
61398: STR
61399: PUSH
61400: LD_STRING )
61402: STR
61403: PPUSH
61404: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61408: LD_STRING setSpecText(
61410: PUSH
61411: LD_VAR 0 2
61415: STR
61416: PUSH
61417: LD_STRING ,
61419: STR
61420: PUSH
61421: LD_INT 4
61423: STR
61424: PUSH
61425: LD_STRING ,
61427: STR
61428: PUSH
61429: LD_VAR 0 6
61433: STR
61434: PUSH
61435: LD_STRING )
61437: STR
61438: PPUSH
61439: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61443: LD_STRING setSpecText(
61445: PUSH
61446: LD_VAR 0 2
61450: STR
61451: PUSH
61452: LD_STRING ,
61454: STR
61455: PUSH
61456: LD_INT 5
61458: STR
61459: PUSH
61460: LD_STRING ,
61462: STR
61463: PUSH
61464: LD_VAR 0 7
61468: STR
61469: PUSH
61470: LD_STRING )
61472: STR
61473: PPUSH
61474: CALL_OW 559
// end ; end ;
61478: GO 61094
61480: POP
61481: POP
// end ;
61482: LD_VAR 0 1
61486: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61487: LD_INT 2
61489: PUSH
61490: LD_INT 30
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 30
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: LIST
61514: PPUSH
61515: CALL_OW 69
61519: IFFALSE 61529
61521: GO 61523
61523: DISABLE
// begin enable ;
61524: ENABLE
// UpdateSpectatorBar ;
61525: CALL 61070 0 0
// end ;
61529: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61530: LD_INT 0
61532: PPUSH
// end ;
61533: LD_VAR 0 12
61537: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61538: LD_INT 0
61540: PPUSH
61541: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61542: LD_VAR 0 1
61546: NOT
61547: IFTRUE 61566
61549: PUSH
61550: LD_VAR 0 2
61554: PPUSH
61555: LD_VAR 0 3
61559: PPUSH
61560: CALL_OW 488
61564: NOT
61565: OR
61566: IFTRUE 61601
61568: PUSH
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL_OW 266
61578: PUSH
61579: LD_INT 3
61581: NONEQUAL
61582: IFFALSE 61600
61584: PUSH
61585: LD_VAR 0 1
61589: PPUSH
61590: CALL_OW 247
61594: PUSH
61595: LD_INT 1
61597: EQUAL
61598: NOT
61599: AND
61600: OR
61601: IFFALSE 61605
// exit ;
61603: GO 61887
// if GetType ( factory ) = unit_human then
61605: LD_VAR 0 1
61609: PPUSH
61610: CALL_OW 247
61614: PUSH
61615: LD_INT 1
61617: EQUAL
61618: IFFALSE 61635
// factory := IsInUnit ( factory ) ;
61620: LD_ADDR_VAR 0 1
61624: PUSH
61625: LD_VAR 0 1
61629: PPUSH
61630: CALL_OW 310
61634: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61635: LD_VAR 0 1
61639: PPUSH
61640: CALL_OW 266
61644: PUSH
61645: LD_INT 3
61647: NONEQUAL
61648: IFFALSE 61652
// exit ;
61650: GO 61887
// for i := 1 to Count ( factoryWaypoints ) do
61652: LD_ADDR_VAR 0 5
61656: PUSH
61657: DOUBLE
61658: LD_INT 1
61660: DEC
61661: ST_TO_ADDR
61662: LD_EXP 57
61666: PPUSH
61667: CALL 5008 0 1
61671: PUSH
61672: FOR_TO
61673: IFFALSE 61835
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61675: LD_VAR 0 2
61679: PPUSH
61680: LD_VAR 0 3
61684: PPUSH
61685: CALL_OW 428
61689: PUSH
61690: LD_EXP 57
61694: PUSH
61695: LD_VAR 0 5
61699: ARRAY
61700: PUSH
61701: LD_INT 2
61703: ARRAY
61704: EQUAL
61705: IFFALSE 61737
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61707: LD_ADDR_EXP 57
61711: PUSH
61712: LD_EXP 57
61716: PPUSH
61717: LD_VAR 0 5
61721: PPUSH
61722: CALL_OW 3
61726: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61727: CALL 61892 0 0
// exit ;
61731: POP
61732: POP
61733: GO 61887
// end else
61735: GO 61833
// if factory = factoryWaypoints [ i ] [ 2 ] then
61737: LD_VAR 0 1
61741: PUSH
61742: LD_EXP 57
61746: PUSH
61747: LD_VAR 0 5
61751: ARRAY
61752: PUSH
61753: LD_INT 2
61755: ARRAY
61756: EQUAL
61757: IFFALSE 61833
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61759: LD_ADDR_EXP 57
61763: PUSH
61764: LD_EXP 57
61768: PPUSH
61769: LD_VAR 0 5
61773: PPUSH
61774: CALL_OW 3
61778: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61779: LD_ADDR_EXP 57
61783: PUSH
61784: LD_EXP 57
61788: PPUSH
61789: LD_VAR 0 1
61793: PPUSH
61794: CALL_OW 255
61798: PUSH
61799: LD_VAR 0 1
61803: PUSH
61804: LD_VAR 0 2
61808: PUSH
61809: LD_VAR 0 3
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: PPUSH
61820: CALL 40940 0 2
61824: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61825: CALL 61892 0 0
// exit ;
61829: POP
61830: POP
61831: GO 61887
// end ; end ;
61833: GO 61672
61835: POP
61836: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61837: LD_ADDR_EXP 57
61841: PUSH
61842: LD_EXP 57
61846: PPUSH
61847: LD_VAR 0 1
61851: PPUSH
61852: CALL_OW 255
61856: PUSH
61857: LD_VAR 0 1
61861: PUSH
61862: LD_VAR 0 2
61866: PUSH
61867: LD_VAR 0 3
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: PPUSH
61878: CALL 40940 0 2
61882: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61883: CALL 61892 0 0
// end ;
61887: LD_VAR 0 4
61891: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61892: LD_INT 0
61894: PPUSH
61895: PPUSH
61896: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61897: LD_STRING resetFactoryWaypoint();
61899: PPUSH
61900: CALL_OW 559
// if factoryWaypoints then
61904: LD_EXP 57
61908: IFFALSE 62029
// begin list := factoryWaypoints ;
61910: LD_ADDR_VAR 0 3
61914: PUSH
61915: LD_EXP 57
61919: ST_TO_ADDR
// for i := 1 to list do
61920: LD_ADDR_VAR 0 2
61924: PUSH
61925: DOUBLE
61926: LD_INT 1
61928: DEC
61929: ST_TO_ADDR
61930: LD_VAR 0 3
61934: PUSH
61935: FOR_TO
61936: IFFALSE 62027
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61938: LD_STRING setFactoryWaypointXY(
61940: PUSH
61941: LD_VAR 0 3
61945: PUSH
61946: LD_VAR 0 2
61950: ARRAY
61951: PUSH
61952: LD_INT 1
61954: ARRAY
61955: STR
61956: PUSH
61957: LD_STRING ,
61959: STR
61960: PUSH
61961: LD_VAR 0 3
61965: PUSH
61966: LD_VAR 0 2
61970: ARRAY
61971: PUSH
61972: LD_INT 2
61974: ARRAY
61975: STR
61976: PUSH
61977: LD_STRING ,
61979: STR
61980: PUSH
61981: LD_VAR 0 3
61985: PUSH
61986: LD_VAR 0 2
61990: ARRAY
61991: PUSH
61992: LD_INT 3
61994: ARRAY
61995: STR
61996: PUSH
61997: LD_STRING ,
61999: STR
62000: PUSH
62001: LD_VAR 0 3
62005: PUSH
62006: LD_VAR 0 2
62010: ARRAY
62011: PUSH
62012: LD_INT 4
62014: ARRAY
62015: STR
62016: PUSH
62017: LD_STRING )
62019: STR
62020: PPUSH
62021: CALL_OW 559
62025: GO 61935
62027: POP
62028: POP
// end ; end ;
62029: LD_VAR 0 1
62033: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62034: LD_INT 0
62036: PPUSH
// if HexInfo ( x , y ) = warehouse then
62037: LD_VAR 0 2
62041: PPUSH
62042: LD_VAR 0 3
62046: PPUSH
62047: CALL_OW 428
62051: PUSH
62052: LD_VAR 0 1
62056: EQUAL
62057: IFFALSE 62084
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62059: LD_ADDR_EXP 59
62063: PUSH
62064: LD_EXP 59
62068: PPUSH
62069: LD_VAR 0 1
62073: PPUSH
62074: LD_INT 0
62076: PPUSH
62077: CALL_OW 1
62081: ST_TO_ADDR
62082: GO 62135
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62084: LD_ADDR_EXP 59
62088: PUSH
62089: LD_EXP 59
62093: PPUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: LD_VAR 0 1
62103: PPUSH
62104: CALL_OW 255
62108: PUSH
62109: LD_VAR 0 1
62113: PUSH
62114: LD_VAR 0 2
62118: PUSH
62119: LD_VAR 0 3
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: PPUSH
62130: CALL_OW 1
62134: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62135: CALL 62144 0 0
// end ;
62139: LD_VAR 0 4
62143: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62144: LD_INT 0
62146: PPUSH
62147: PPUSH
62148: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62149: LD_STRING resetWarehouseGatheringPoints();
62151: PPUSH
62152: CALL_OW 559
// if warehouseGatheringPoints then
62156: LD_EXP 59
62160: IFFALSE 62286
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62162: LD_ADDR_VAR 0 3
62166: PUSH
62167: LD_EXP 59
62171: PPUSH
62172: CALL 44874 0 1
62176: ST_TO_ADDR
// for i := 1 to list do
62177: LD_ADDR_VAR 0 2
62181: PUSH
62182: DOUBLE
62183: LD_INT 1
62185: DEC
62186: ST_TO_ADDR
62187: LD_VAR 0 3
62191: PUSH
62192: FOR_TO
62193: IFFALSE 62284
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62195: LD_STRING setWarehouseGatheringPointXY(
62197: PUSH
62198: LD_VAR 0 3
62202: PUSH
62203: LD_VAR 0 2
62207: ARRAY
62208: PUSH
62209: LD_INT 1
62211: ARRAY
62212: STR
62213: PUSH
62214: LD_STRING ,
62216: STR
62217: PUSH
62218: LD_VAR 0 3
62222: PUSH
62223: LD_VAR 0 2
62227: ARRAY
62228: PUSH
62229: LD_INT 2
62231: ARRAY
62232: STR
62233: PUSH
62234: LD_STRING ,
62236: STR
62237: PUSH
62238: LD_VAR 0 3
62242: PUSH
62243: LD_VAR 0 2
62247: ARRAY
62248: PUSH
62249: LD_INT 3
62251: ARRAY
62252: STR
62253: PUSH
62254: LD_STRING ,
62256: STR
62257: PUSH
62258: LD_VAR 0 3
62262: PUSH
62263: LD_VAR 0 2
62267: ARRAY
62268: PUSH
62269: LD_INT 4
62271: ARRAY
62272: STR
62273: PUSH
62274: LD_STRING )
62276: STR
62277: PPUSH
62278: CALL_OW 559
62282: GO 62192
62284: POP
62285: POP
// end ; end ;
62286: LD_VAR 0 1
62290: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62291: LD_INT 0
62293: PPUSH
62294: PPUSH
// if not mpSidePositions then
62295: LD_EXP 5
62299: NOT
62300: IFFALSE 62304
// exit ;
62302: GO 62375
// result :=  ;
62304: LD_ADDR_VAR 0 1
62308: PUSH
62309: LD_STRING 
62311: ST_TO_ADDR
// for i := 1 to 8 do
62312: LD_ADDR_VAR 0 2
62316: PUSH
62317: DOUBLE
62318: LD_INT 1
62320: DEC
62321: ST_TO_ADDR
62322: LD_INT 8
62324: PUSH
62325: FOR_TO
62326: IFFALSE 62356
// begin result := result & mpSidePositions [ i ] & ; ;
62328: LD_ADDR_VAR 0 1
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: LD_EXP 5
62342: PUSH
62343: LD_VAR 0 2
62347: ARRAY
62348: STR
62349: PUSH
62350: LD_STRING ;
62352: STR
62353: ST_TO_ADDR
// end ;
62354: GO 62325
62356: POP
62357: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62358: LD_STRING setMultiplayerRealPosition("
62360: PUSH
62361: LD_VAR 0 1
62365: STR
62366: PUSH
62367: LD_STRING ");
62369: STR
62370: PPUSH
62371: CALL_OW 559
// end ;
62375: LD_VAR 0 1
62379: RET
