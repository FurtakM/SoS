// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46438 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46861 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 32
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 33
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 35
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 35
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 34
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 31
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45803 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45803 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45803 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45803 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45803 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45803 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 5108 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 45636 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 45636 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 45636 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 45636 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 45636 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 45636 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 45636 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 45636 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 45636 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 45636 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 45636 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 45636 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45803 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45803 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45803 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45803 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45803 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45803 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45803 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45803 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45803 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45803 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45803 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45803 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45803 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45803 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45803 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45803 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45803 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45803 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2721
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// x := 1 ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// repeat wait ( time ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 67
// x := Inc ( x ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL 42457 0 1
2466: ST_TO_ADDR
// if x > 5 then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: GREATER
2475: IFFALSE 2485
// x := 1 ;
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for i in areas do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_VAR 0 5
2494: PUSH
2495: FOR_IN
2496: IFFALSE 2535
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2498: LD_VAR 0 1
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 287
2510: PUSH
2511: LD_INT 20
2513: LESS
2514: IFFALSE 2533
// begin CreateCratesArea ( x , i , true ) ;
2516: LD_VAR 0 2
2520: PPUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ; end ;
2533: GO 2495
2535: POP
2536: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 287
2547: PUSH
2548: LD_INT 100
2550: LESS
2551: IFFALSE 2595
// for i := 1 to Count ( areas ) do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_VAR 0 5
2567: PPUSH
2568: CALL 5108 0 1
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2593
// CreateCratesArea ( x , MZBaseArea , true ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 14
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 55
2591: GO 2573
2593: POP
2594: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2595: LD_INT 15
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 287
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2648
// begin for i := 1 to 3 do
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_INT 3
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2644
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 15
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 55
2642: GO 2624
2644: POP
2645: POP
// end else
2646: GO 2679
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2648: LD_INT 15
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 287
2658: PUSH
2659: LD_INT 30
2661: LESS
2662: IFFALSE 2679
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 15
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 55
// time := time + delayTime ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 7
2693: PLUS
2694: ST_TO_ADDR
// if time > maxTime then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_VAR 0 8
2704: GREATER
2705: IFFALSE 2717
// time := normalTime ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_VAR 0 6
2716: ST_TO_ADDR
// until false ;
2717: LD_INT 0
2719: IFFALSE 2443
// end ; end_of_file
2721: PPOPN 8
2723: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL 56814 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: CALL 51984 0 1
// end ;
2742: PPOPN 1
2744: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL 56831 0 1
// end ;
2754: PPOPN 1
2756: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 53037 0 1
2766: PPOPN 1
2768: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 56872 0 2
2783: PPOPN 2
2785: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 52790 0 2
2800: PPOPN 2
2802: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2803: LD_VAR 0 1
2807: PPUSH
2808: LD_VAR 0 2
2812: PPUSH
2813: LD_VAR 0 3
2817: PPUSH
2818: CALL 53090 0 3
2822: PPOPN 3
2824: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2825: LD_VAR 0 1
2829: PPUSH
2830: LD_VAR 0 2
2834: PPUSH
2835: LD_VAR 0 3
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL 53774 0 5
2854: PPOPN 5
2856: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2857: LD_VAR 0 1
2861: PPUSH
2862: LD_VAR 0 2
2866: PPUSH
2867: LD_VAR 0 3
2871: PPUSH
2872: LD_VAR 0 4
2876: PPUSH
2877: CALL 53877 0 4
2881: PPOPN 4
2883: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
// if exist_mode then
2888: LD_VAR 0 2
2892: IFFALSE 2938
// begin unit := CreateCharacter ( prefix & ident ) ;
2894: LD_ADDR_VAR 0 5
2898: PUSH
2899: LD_VAR 0 3
2903: PUSH
2904: LD_VAR 0 1
2908: STR
2909: PPUSH
2910: CALL_OW 34
2914: ST_TO_ADDR
// if unit then
2915: LD_VAR 0 5
2919: IFFALSE 2936
// DeleteCharacters ( prefix & ident ) ;
2921: LD_VAR 0 3
2925: PUSH
2926: LD_VAR 0 1
2930: STR
2931: PPUSH
2932: CALL_OW 40
// end else
2936: GO 2953
// unit := NewCharacter ( ident ) ;
2938: LD_ADDR_VAR 0 5
2942: PUSH
2943: LD_VAR 0 1
2947: PPUSH
2948: CALL_OW 25
2952: ST_TO_ADDR
// result := unit ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_VAR 0 5
2962: ST_TO_ADDR
// end ;
2963: LD_VAR 0 4
2967: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2968: LD_INT 0
2970: PPUSH
2971: PPUSH
// if exist_mode then
2972: LD_VAR 0 2
2976: IFFALSE 3001
// unit := CreateCharacter ( prefix & ident ) else
2978: LD_ADDR_VAR 0 5
2982: PUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_VAR 0 1
2992: STR
2993: PPUSH
2994: CALL_OW 34
2998: ST_TO_ADDR
2999: GO 3016
// unit := NewCharacter ( ident ) ;
3001: LD_ADDR_VAR 0 5
3005: PUSH
3006: LD_VAR 0 1
3010: PPUSH
3011: CALL_OW 25
3015: ST_TO_ADDR
// result := unit ;
3016: LD_ADDR_VAR 0 4
3020: PUSH
3021: LD_VAR 0 5
3025: ST_TO_ADDR
// end ;
3026: LD_VAR 0 4
3030: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
// if not side or not nation then
3035: LD_VAR 0 1
3039: NOT
3040: IFTRUE 3049
3042: PUSH
3043: LD_VAR 0 2
3047: NOT
3048: OR
3049: IFFALSE 3053
// exit ;
3051: GO 3847
// case nation of nation_american :
3053: LD_VAR 0 2
3057: PUSH
3058: LD_INT 1
3060: DOUBLE
3061: EQUAL
3062: IFTRUE 3066
3064: GO 3288
3066: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3067: LD_ADDR_VAR 0 4
3071: PUSH
3072: LD_INT 35
3074: PUSH
3075: LD_INT 45
3077: PUSH
3078: LD_INT 46
3080: PUSH
3081: LD_INT 47
3083: PUSH
3084: LD_INT 82
3086: PUSH
3087: LD_INT 83
3089: PUSH
3090: LD_INT 84
3092: PUSH
3093: LD_INT 85
3095: PUSH
3096: LD_INT 86
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: LD_INT 2
3104: PUSH
3105: LD_INT 6
3107: PUSH
3108: LD_INT 15
3110: PUSH
3111: LD_INT 16
3113: PUSH
3114: LD_INT 7
3116: PUSH
3117: LD_INT 12
3119: PUSH
3120: LD_INT 13
3122: PUSH
3123: LD_INT 10
3125: PUSH
3126: LD_INT 14
3128: PUSH
3129: LD_INT 20
3131: PUSH
3132: LD_INT 21
3134: PUSH
3135: LD_INT 22
3137: PUSH
3138: LD_INT 25
3140: PUSH
3141: LD_INT 32
3143: PUSH
3144: LD_INT 27
3146: PUSH
3147: LD_INT 36
3149: PUSH
3150: LD_INT 69
3152: PUSH
3153: LD_INT 39
3155: PUSH
3156: LD_INT 34
3158: PUSH
3159: LD_INT 40
3161: PUSH
3162: LD_INT 48
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: LD_INT 50
3170: PUSH
3171: LD_INT 51
3173: PUSH
3174: LD_INT 52
3176: PUSH
3177: LD_INT 53
3179: PUSH
3180: LD_INT 54
3182: PUSH
3183: LD_INT 55
3185: PUSH
3186: LD_INT 56
3188: PUSH
3189: LD_INT 57
3191: PUSH
3192: LD_INT 58
3194: PUSH
3195: LD_INT 59
3197: PUSH
3198: LD_INT 60
3200: PUSH
3201: LD_INT 61
3203: PUSH
3204: LD_INT 62
3206: PUSH
3207: LD_INT 80
3209: PUSH
3210: LD_INT 82
3212: PUSH
3213: LD_INT 83
3215: PUSH
3216: LD_INT 84
3218: PUSH
3219: LD_INT 85
3221: PUSH
3222: LD_INT 86
3224: PUSH
3225: LD_INT 90
3227: PUSH
3228: LD_INT 93
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: ST_TO_ADDR
3286: GO 3769
3288: LD_INT 2
3290: DOUBLE
3291: EQUAL
3292: IFTRUE 3296
3294: GO 3530
3296: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3297: LD_ADDR_VAR 0 4
3301: PUSH
3302: LD_INT 35
3304: PUSH
3305: LD_INT 45
3307: PUSH
3308: LD_INT 46
3310: PUSH
3311: LD_INT 47
3313: PUSH
3314: LD_INT 82
3316: PUSH
3317: LD_INT 83
3319: PUSH
3320: LD_INT 84
3322: PUSH
3323: LD_INT 85
3325: PUSH
3326: LD_INT 87
3328: PUSH
3329: LD_INT 70
3331: PUSH
3332: LD_INT 1
3334: PUSH
3335: LD_INT 11
3337: PUSH
3338: LD_INT 3
3340: PUSH
3341: LD_INT 4
3343: PUSH
3344: LD_INT 5
3346: PUSH
3347: LD_INT 6
3349: PUSH
3350: LD_INT 15
3352: PUSH
3353: LD_INT 18
3355: PUSH
3356: LD_INT 7
3358: PUSH
3359: LD_INT 17
3361: PUSH
3362: LD_INT 8
3364: PUSH
3365: LD_INT 20
3367: PUSH
3368: LD_INT 21
3370: PUSH
3371: LD_INT 22
3373: PUSH
3374: LD_INT 72
3376: PUSH
3377: LD_INT 26
3379: PUSH
3380: LD_INT 69
3382: PUSH
3383: LD_INT 39
3385: PUSH
3386: LD_INT 40
3388: PUSH
3389: LD_INT 41
3391: PUSH
3392: LD_INT 42
3394: PUSH
3395: LD_INT 43
3397: PUSH
3398: LD_INT 48
3400: PUSH
3401: LD_INT 49
3403: PUSH
3404: LD_INT 50
3406: PUSH
3407: LD_INT 51
3409: PUSH
3410: LD_INT 52
3412: PUSH
3413: LD_INT 53
3415: PUSH
3416: LD_INT 54
3418: PUSH
3419: LD_INT 55
3421: PUSH
3422: LD_INT 56
3424: PUSH
3425: LD_INT 60
3427: PUSH
3428: LD_INT 61
3430: PUSH
3431: LD_INT 62
3433: PUSH
3434: LD_INT 66
3436: PUSH
3437: LD_INT 67
3439: PUSH
3440: LD_INT 68
3442: PUSH
3443: LD_INT 81
3445: PUSH
3446: LD_INT 82
3448: PUSH
3449: LD_INT 83
3451: PUSH
3452: LD_INT 84
3454: PUSH
3455: LD_INT 85
3457: PUSH
3458: LD_INT 87
3460: PUSH
3461: LD_INT 88
3463: PUSH
3464: LD_INT 92
3466: PUSH
3467: LD_INT 94
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: ST_TO_ADDR
3528: GO 3769
3530: LD_INT 3
3532: DOUBLE
3533: EQUAL
3534: IFTRUE 3538
3536: GO 3768
3538: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3539: LD_ADDR_VAR 0 4
3543: PUSH
3544: LD_INT 46
3546: PUSH
3547: LD_INT 47
3549: PUSH
3550: LD_INT 1
3552: PUSH
3553: LD_INT 2
3555: PUSH
3556: LD_INT 82
3558: PUSH
3559: LD_INT 83
3561: PUSH
3562: LD_INT 84
3564: PUSH
3565: LD_INT 85
3567: PUSH
3568: LD_INT 86
3570: PUSH
3571: LD_INT 11
3573: PUSH
3574: LD_INT 9
3576: PUSH
3577: LD_INT 20
3579: PUSH
3580: LD_INT 19
3582: PUSH
3583: LD_INT 21
3585: PUSH
3586: LD_INT 24
3588: PUSH
3589: LD_INT 22
3591: PUSH
3592: LD_INT 25
3594: PUSH
3595: LD_INT 28
3597: PUSH
3598: LD_INT 29
3600: PUSH
3601: LD_INT 30
3603: PUSH
3604: LD_INT 31
3606: PUSH
3607: LD_INT 37
3609: PUSH
3610: LD_INT 38
3612: PUSH
3613: LD_INT 32
3615: PUSH
3616: LD_INT 27
3618: PUSH
3619: LD_INT 33
3621: PUSH
3622: LD_INT 69
3624: PUSH
3625: LD_INT 39
3627: PUSH
3628: LD_INT 34
3630: PUSH
3631: LD_INT 40
3633: PUSH
3634: LD_INT 71
3636: PUSH
3637: LD_INT 23
3639: PUSH
3640: LD_INT 44
3642: PUSH
3643: LD_INT 48
3645: PUSH
3646: LD_INT 49
3648: PUSH
3649: LD_INT 50
3651: PUSH
3652: LD_INT 51
3654: PUSH
3655: LD_INT 52
3657: PUSH
3658: LD_INT 53
3660: PUSH
3661: LD_INT 54
3663: PUSH
3664: LD_INT 55
3666: PUSH
3667: LD_INT 56
3669: PUSH
3670: LD_INT 57
3672: PUSH
3673: LD_INT 58
3675: PUSH
3676: LD_INT 59
3678: PUSH
3679: LD_INT 63
3681: PUSH
3682: LD_INT 64
3684: PUSH
3685: LD_INT 65
3687: PUSH
3688: LD_INT 82
3690: PUSH
3691: LD_INT 83
3693: PUSH
3694: LD_INT 84
3696: PUSH
3697: LD_INT 85
3699: PUSH
3700: LD_INT 86
3702: PUSH
3703: LD_INT 89
3705: PUSH
3706: LD_INT 91
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: ST_TO_ADDR
3766: GO 3769
3768: POP
// if state > - 1 and state < 3 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_INT 1
3776: NEG
3777: GREATER
3778: IFFALSE 3790
3780: PUSH
3781: LD_VAR 0 3
3785: PUSH
3786: LD_INT 3
3788: LESS
3789: AND
3790: IFFALSE 3847
// for i in result do
3792: LD_ADDR_VAR 0 5
3796: PUSH
3797: LD_VAR 0 4
3801: PUSH
3802: FOR_IN
3803: IFFALSE 3845
// if GetTech ( i , side ) <> state then
3805: LD_VAR 0 5
3809: PPUSH
3810: LD_VAR 0 1
3814: PPUSH
3815: CALL_OW 321
3819: PUSH
3820: LD_VAR 0 3
3824: NONEQUAL
3825: IFFALSE 3843
// result := result diff i ;
3827: LD_ADDR_VAR 0 4
3831: PUSH
3832: LD_VAR 0 4
3836: PUSH
3837: LD_VAR 0 5
3841: DIFF
3842: ST_TO_ADDR
3843: GO 3802
3845: POP
3846: POP
// end ;
3847: LD_VAR 0 4
3851: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3852: LD_INT 0
3854: PPUSH
3855: PPUSH
3856: PPUSH
// result := true ;
3857: LD_ADDR_VAR 0 3
3861: PUSH
3862: LD_INT 1
3864: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3865: LD_ADDR_VAR 0 5
3869: PUSH
3870: LD_VAR 0 2
3874: PPUSH
3875: CALL_OW 480
3879: ST_TO_ADDR
// if not tmp then
3880: LD_VAR 0 5
3884: NOT
3885: IFFALSE 3889
// exit ;
3887: GO 3938
// for i in tmp do
3889: LD_ADDR_VAR 0 4
3893: PUSH
3894: LD_VAR 0 5
3898: PUSH
3899: FOR_IN
3900: IFFALSE 3936
// if GetTech ( i , side ) <> state_researched then
3902: LD_VAR 0 4
3906: PPUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: CALL_OW 321
3916: PUSH
3917: LD_INT 2
3919: NONEQUAL
3920: IFFALSE 3934
// begin result := false ;
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_INT 0
3929: ST_TO_ADDR
// exit ;
3930: POP
3931: POP
3932: GO 3938
// end ;
3934: GO 3899
3936: POP
3937: POP
// end ;
3938: LD_VAR 0 3
3942: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3943: LD_INT 0
3945: PPUSH
3946: PPUSH
3947: PPUSH
3948: PPUSH
3949: PPUSH
3950: PPUSH
3951: PPUSH
3952: PPUSH
3953: PPUSH
3954: PPUSH
3955: PPUSH
3956: PPUSH
3957: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3958: LD_VAR 0 1
3962: NOT
3963: IFTRUE 3980
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: CALL_OW 257
3975: PUSH
3976: LD_INT 9
3978: NONEQUAL
3979: OR
3980: IFFALSE 3984
// exit ;
3982: GO 4563
// side := GetSide ( unit ) ;
3984: LD_ADDR_VAR 0 9
3988: PUSH
3989: LD_VAR 0 1
3993: PPUSH
3994: CALL_OW 255
3998: ST_TO_ADDR
// tech_space := tech_spacanom ;
3999: LD_ADDR_VAR 0 12
4003: PUSH
4004: LD_INT 29
4006: ST_TO_ADDR
// tech_time := tech_taurad ;
4007: LD_ADDR_VAR 0 13
4011: PUSH
4012: LD_INT 28
4014: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4015: LD_ADDR_VAR 0 11
4019: PUSH
4020: LD_VAR 0 1
4024: PPUSH
4025: CALL_OW 310
4029: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4030: LD_VAR 0 11
4034: PPUSH
4035: CALL_OW 247
4039: PUSH
4040: LD_INT 2
4042: EQUAL
4043: IFFALSE 4047
// exit ;
4045: GO 4563
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4047: LD_ADDR_VAR 0 8
4051: PUSH
4052: LD_INT 81
4054: PUSH
4055: LD_VAR 0 9
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 3
4066: PUSH
4067: LD_INT 21
4069: PUSH
4070: LD_INT 3
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 69
4089: ST_TO_ADDR
// if not tmp then
4090: LD_VAR 0 8
4094: NOT
4095: IFFALSE 4099
// exit ;
4097: GO 4563
// if in_unit then
4099: LD_VAR 0 11
4103: IFFALSE 4127
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4105: LD_ADDR_VAR 0 10
4109: PUSH
4110: LD_VAR 0 8
4114: PPUSH
4115: LD_VAR 0 11
4119: PPUSH
4120: CALL_OW 74
4124: ST_TO_ADDR
4125: GO 4147
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4127: LD_ADDR_VAR 0 10
4131: PUSH
4132: LD_VAR 0 8
4136: PPUSH
4137: LD_VAR 0 1
4141: PPUSH
4142: CALL_OW 74
4146: ST_TO_ADDR
// if not enemy then
4147: LD_VAR 0 10
4151: NOT
4152: IFFALSE 4156
// exit ;
4154: GO 4563
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4156: LD_VAR 0 11
4160: IFFALSE 4182
4162: PUSH
4163: LD_VAR 0 11
4167: PPUSH
4168: LD_VAR 0 10
4172: PPUSH
4173: CALL_OW 296
4177: PUSH
4178: LD_INT 13
4180: GREATER
4181: AND
4182: IFTRUE 4204
4184: PUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_VAR 0 10
4194: PPUSH
4195: CALL_OW 296
4199: PUSH
4200: LD_INT 12
4202: GREATER
4203: OR
4204: IFFALSE 4208
// exit ;
4206: GO 4563
// missile := [ 1 ] ;
4208: LD_ADDR_VAR 0 14
4212: PUSH
4213: LD_INT 1
4215: PUSH
4216: EMPTY
4217: LIST
4218: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4219: LD_VAR 0 9
4223: PPUSH
4224: LD_VAR 0 12
4228: PPUSH
4229: CALL_OW 325
4233: IFFALSE 4262
// missile := Replace ( missile , missile + 1 , 2 ) ;
4235: LD_ADDR_VAR 0 14
4239: PUSH
4240: LD_VAR 0 14
4244: PPUSH
4245: LD_VAR 0 14
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_INT 2
4256: PPUSH
4257: CALL_OW 1
4261: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4262: LD_VAR 0 9
4266: PPUSH
4267: LD_VAR 0 13
4271: PPUSH
4272: CALL_OW 325
4276: IFFALSE 4300
4278: PUSH
4279: LD_VAR 0 10
4283: PPUSH
4284: CALL_OW 255
4288: PPUSH
4289: LD_VAR 0 13
4293: PPUSH
4294: CALL_OW 325
4298: NOT
4299: AND
4300: IFFALSE 4329
// missile := Replace ( missile , missile + 1 , 3 ) ;
4302: LD_ADDR_VAR 0 14
4306: PUSH
4307: LD_VAR 0 14
4311: PPUSH
4312: LD_VAR 0 14
4316: PUSH
4317: LD_INT 1
4319: PLUS
4320: PPUSH
4321: LD_INT 3
4323: PPUSH
4324: CALL_OW 1
4328: ST_TO_ADDR
// if missile < 2 then
4329: LD_VAR 0 14
4333: PUSH
4334: LD_INT 2
4336: LESS
4337: IFFALSE 4341
// exit ;
4339: GO 4563
// x := GetX ( enemy ) ;
4341: LD_ADDR_VAR 0 4
4345: PUSH
4346: LD_VAR 0 10
4350: PPUSH
4351: CALL_OW 250
4355: ST_TO_ADDR
// y := GetY ( enemy ) ;
4356: LD_ADDR_VAR 0 5
4360: PUSH
4361: LD_VAR 0 10
4365: PPUSH
4366: CALL_OW 251
4370: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4371: LD_ADDR_VAR 0 6
4375: PUSH
4376: LD_VAR 0 4
4380: PUSH
4381: LD_INT 1
4383: NEG
4384: PPUSH
4385: LD_INT 1
4387: PPUSH
4388: CALL_OW 12
4392: PLUS
4393: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4394: LD_ADDR_VAR 0 7
4398: PUSH
4399: LD_VAR 0 5
4403: PUSH
4404: LD_INT 1
4406: NEG
4407: PPUSH
4408: LD_INT 1
4410: PPUSH
4411: CALL_OW 12
4415: PLUS
4416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4417: LD_VAR 0 6
4421: PPUSH
4422: LD_VAR 0 7
4426: PPUSH
4427: CALL_OW 488
4431: NOT
4432: IFFALSE 4454
// begin _x := x ;
4434: LD_ADDR_VAR 0 6
4438: PUSH
4439: LD_VAR 0 4
4443: ST_TO_ADDR
// _y := y ;
4444: LD_ADDR_VAR 0 7
4448: PUSH
4449: LD_VAR 0 5
4453: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 1
4461: PPUSH
4462: LD_VAR 0 14
4466: PPUSH
4467: CALL_OW 12
4471: ST_TO_ADDR
// case i of 1 :
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 1
4479: DOUBLE
4480: EQUAL
4481: IFTRUE 4485
4483: GO 4502
4485: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4486: LD_VAR 0 1
4490: PPUSH
4491: LD_VAR 0 10
4495: PPUSH
4496: CALL_OW 115
4500: GO 4563
4502: LD_INT 2
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4532
4510: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_VAR 0 6
4520: PPUSH
4521: LD_VAR 0 7
4525: PPUSH
4526: CALL_OW 153
4530: GO 4563
4532: LD_INT 3
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4562
4540: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4541: LD_VAR 0 1
4545: PPUSH
4546: LD_VAR 0 6
4550: PPUSH
4551: LD_VAR 0 7
4555: PPUSH
4556: CALL_OW 154
4560: GO 4563
4562: POP
// end ;
4563: LD_VAR 0 2
4567: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4568: LD_INT 0
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
// if not unit or not building then
4576: LD_VAR 0 1
4580: NOT
4581: IFTRUE 4590
4583: PUSH
4584: LD_VAR 0 2
4588: NOT
4589: OR
4590: IFFALSE 4594
// exit ;
4592: GO 4752
// x := GetX ( building ) ;
4594: LD_ADDR_VAR 0 5
4598: PUSH
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL_OW 250
4608: ST_TO_ADDR
// y := GetY ( building ) ;
4609: LD_ADDR_VAR 0 6
4613: PUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 251
4623: ST_TO_ADDR
// for i := 0 to 5 do
4624: LD_ADDR_VAR 0 4
4628: PUSH
4629: DOUBLE
4630: LD_INT 0
4632: DEC
4633: ST_TO_ADDR
4634: LD_INT 5
4636: PUSH
4637: FOR_TO
4638: IFFALSE 4750
// begin _x := ShiftX ( x , i , 3 ) ;
4640: LD_ADDR_VAR 0 7
4644: PUSH
4645: LD_VAR 0 5
4649: PPUSH
4650: LD_VAR 0 4
4654: PPUSH
4655: LD_INT 3
4657: PPUSH
4658: CALL_OW 272
4662: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4663: LD_ADDR_VAR 0 8
4667: PUSH
4668: LD_VAR 0 6
4672: PPUSH
4673: LD_VAR 0 4
4677: PPUSH
4678: LD_INT 3
4680: PPUSH
4681: CALL_OW 273
4685: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4686: LD_VAR 0 7
4690: PPUSH
4691: LD_VAR 0 8
4695: PPUSH
4696: CALL_OW 488
4700: NOT
4701: IFFALSE 4705
// continue ;
4703: GO 4637
// if HexInfo ( _x , _y ) = 0 then
4705: LD_VAR 0 7
4709: PPUSH
4710: LD_VAR 0 8
4714: PPUSH
4715: CALL_OW 428
4719: PUSH
4720: LD_INT 0
4722: EQUAL
4723: IFFALSE 4748
// begin ComMoveXY ( unit , _x , _y ) ;
4725: LD_VAR 0 1
4729: PPUSH
4730: LD_VAR 0 7
4734: PPUSH
4735: LD_VAR 0 8
4739: PPUSH
4740: CALL_OW 111
// exit ;
4744: POP
4745: POP
4746: GO 4752
// end ; end ;
4748: GO 4637
4750: POP
4751: POP
// end ;
4752: LD_VAR 0 3
4756: RET
// export function ScanBase ( side , base_area ) ; begin
4757: LD_INT 0
4759: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4760: LD_ADDR_VAR 0 3
4764: PUSH
4765: LD_VAR 0 2
4769: PPUSH
4770: LD_INT 81
4772: PUSH
4773: LD_VAR 0 1
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PPUSH
4782: CALL_OW 70
4786: ST_TO_ADDR
// end ;
4787: LD_VAR 0 3
4791: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4792: LD_INT 0
4794: PPUSH
4795: PPUSH
4796: PPUSH
4797: PPUSH
// result := false ;
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: LD_INT 0
4805: ST_TO_ADDR
// side := GetSide ( unit ) ;
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: LD_VAR 0 1
4815: PPUSH
4816: CALL_OW 255
4820: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: LD_VAR 0 1
4830: PPUSH
4831: CALL_OW 248
4835: ST_TO_ADDR
// case nat of 1 :
4836: LD_VAR 0 4
4840: PUSH
4841: LD_INT 1
4843: DOUBLE
4844: EQUAL
4845: IFTRUE 4849
4847: GO 4860
4849: POP
// tech := tech_lassight ; 2 :
4850: LD_ADDR_VAR 0 5
4854: PUSH
4855: LD_INT 12
4857: ST_TO_ADDR
4858: GO 4899
4860: LD_INT 2
4862: DOUBLE
4863: EQUAL
4864: IFTRUE 4868
4866: GO 4879
4868: POP
// tech := tech_mortar ; 3 :
4869: LD_ADDR_VAR 0 5
4873: PUSH
4874: LD_INT 41
4876: ST_TO_ADDR
4877: GO 4899
4879: LD_INT 3
4881: DOUBLE
4882: EQUAL
4883: IFTRUE 4887
4885: GO 4898
4887: POP
// tech := tech_bazooka ; end ;
4888: LD_ADDR_VAR 0 5
4892: PUSH
4893: LD_INT 44
4895: ST_TO_ADDR
4896: GO 4899
4898: POP
// if Researched ( side , tech ) then
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_VAR 0 5
4908: PPUSH
4909: CALL_OW 325
4913: IFFALSE 4940
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4915: LD_ADDR_VAR 0 2
4919: PUSH
4920: LD_INT 5
4922: PUSH
4923: LD_INT 8
4925: PUSH
4926: LD_INT 9
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 4
4938: ARRAY
4939: ST_TO_ADDR
// end ;
4940: LD_VAR 0 2
4944: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4945: LD_INT 0
4947: PPUSH
4948: PPUSH
4949: PPUSH
// if not mines then
4950: LD_VAR 0 2
4954: NOT
4955: IFFALSE 4959
// exit ;
4957: GO 5103
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4959: LD_ADDR_VAR 0 5
4963: PUSH
4964: LD_INT 81
4966: PUSH
4967: LD_VAR 0 1
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 21
4981: PUSH
4982: LD_INT 3
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 69
5001: ST_TO_ADDR
// for i in mines do
5002: LD_ADDR_VAR 0 4
5006: PUSH
5007: LD_VAR 0 2
5011: PUSH
5012: FOR_IN
5013: IFFALSE 5101
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5015: LD_VAR 0 4
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: LD_VAR 0 4
5028: PUSH
5029: LD_INT 2
5031: ARRAY
5032: PPUSH
5033: CALL_OW 458
5037: NOT
5038: IFFALSE 5042
// continue ;
5040: GO 5012
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5042: LD_VAR 0 4
5046: PUSH
5047: LD_INT 1
5049: ARRAY
5050: PPUSH
5051: LD_VAR 0 4
5055: PUSH
5056: LD_INT 2
5058: ARRAY
5059: PPUSH
5060: CALL_OW 428
5064: PUSH
5065: LD_VAR 0 5
5069: IN
5070: IFFALSE 5099
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5072: LD_VAR 0 4
5076: PUSH
5077: LD_INT 1
5079: ARRAY
5080: PPUSH
5081: LD_VAR 0 4
5085: PUSH
5086: LD_INT 2
5088: ARRAY
5089: PPUSH
5090: LD_VAR 0 1
5094: PPUSH
5095: CALL_OW 456
// end ;
5099: GO 5012
5101: POP
5102: POP
// end ;
5103: LD_VAR 0 3
5107: RET
// export function Count ( array ) ; begin
5108: LD_INT 0
5110: PPUSH
// result := array + 0 ;
5111: LD_ADDR_VAR 0 2
5115: PUSH
5116: LD_VAR 0 1
5120: PUSH
5121: LD_INT 0
5123: PLUS
5124: ST_TO_ADDR
// end ;
5125: LD_VAR 0 2
5129: RET
// export function IsEmpty ( building ) ; begin
5130: LD_INT 0
5132: PPUSH
// if not building then
5133: LD_VAR 0 1
5137: NOT
5138: IFFALSE 5142
// exit ;
5140: GO 5185
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5142: LD_ADDR_VAR 0 2
5146: PUSH
5147: LD_VAR 0 1
5151: PUSH
5152: LD_INT 22
5154: PUSH
5155: LD_VAR 0 1
5159: PPUSH
5160: CALL_OW 255
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 58
5171: PUSH
5172: EMPTY
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PPUSH
5179: CALL_OW 69
5183: IN
5184: ST_TO_ADDR
// end ;
5185: LD_VAR 0 2
5189: RET
// export function IsNotFull ( building ) ; var places ; begin
5190: LD_INT 0
5192: PPUSH
5193: PPUSH
// if not building then
5194: LD_VAR 0 1
5198: NOT
5199: IFFALSE 5203
// exit ;
5201: GO 5231
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5203: LD_ADDR_VAR 0 2
5207: PUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: LD_INT 3
5215: PUSH
5216: LD_INT 62
5218: PUSH
5219: EMPTY
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 72
5230: ST_TO_ADDR
// end ;
5231: LD_VAR 0 2
5235: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5236: LD_INT 0
5238: PPUSH
5239: PPUSH
5240: PPUSH
5241: PPUSH
// tmp := [ ] ;
5242: LD_ADDR_VAR 0 3
5246: PUSH
5247: EMPTY
5248: ST_TO_ADDR
// list := [ ] ;
5249: LD_ADDR_VAR 0 5
5253: PUSH
5254: EMPTY
5255: ST_TO_ADDR
// for i = 16 to 25 do
5256: LD_ADDR_VAR 0 4
5260: PUSH
5261: DOUBLE
5262: LD_INT 16
5264: DEC
5265: ST_TO_ADDR
5266: LD_INT 25
5268: PUSH
5269: FOR_TO
5270: IFFALSE 5343
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 22
5284: PUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 255
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 91
5301: PUSH
5302: LD_VAR 0 1
5306: PUSH
5307: LD_INT 6
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 30
5317: PUSH
5318: LD_VAR 0 4
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: PUSH
5332: EMPTY
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: ADD
5340: ST_TO_ADDR
5341: GO 5269
5343: POP
5344: POP
// for i = 1 to tmp do
5345: LD_ADDR_VAR 0 4
5349: PUSH
5350: DOUBLE
5351: LD_INT 1
5353: DEC
5354: ST_TO_ADDR
5355: LD_VAR 0 3
5359: PUSH
5360: FOR_TO
5361: IFFALSE 5449
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5363: LD_ADDR_VAR 0 5
5367: PUSH
5368: LD_VAR 0 5
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: LD_VAR 0 4
5382: ARRAY
5383: PPUSH
5384: CALL_OW 266
5388: PUSH
5389: LD_VAR 0 3
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: PPUSH
5400: CALL_OW 250
5404: PUSH
5405: LD_VAR 0 3
5409: PUSH
5410: LD_VAR 0 4
5414: ARRAY
5415: PPUSH
5416: CALL_OW 251
5420: PUSH
5421: LD_VAR 0 3
5425: PUSH
5426: LD_VAR 0 4
5430: ARRAY
5431: PPUSH
5432: CALL_OW 254
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: EMPTY
5444: LIST
5445: ADD
5446: ST_TO_ADDR
5447: GO 5360
5449: POP
5450: POP
// result := list ;
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: LD_VAR 0 5
5460: ST_TO_ADDR
// end ;
5461: LD_VAR 0 2
5465: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5466: LD_INT 0
5468: PPUSH
5469: PPUSH
5470: PPUSH
5471: PPUSH
5472: PPUSH
5473: PPUSH
5474: PPUSH
// if not factory then
5475: LD_VAR 0 1
5479: NOT
5480: IFFALSE 5484
// exit ;
5482: GO 6087
// if control = control_apeman then
5484: LD_VAR 0 4
5488: PUSH
5489: LD_INT 5
5491: EQUAL
5492: IFFALSE 5601
// begin tmp := UnitsInside ( factory ) ;
5494: LD_ADDR_VAR 0 8
5498: PUSH
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL_OW 313
5508: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5509: LD_VAR 0 8
5513: PPUSH
5514: LD_INT 25
5516: PUSH
5517: LD_INT 12
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 72
5528: NOT
5529: IFFALSE 5539
// control := control_manual ;
5531: LD_ADDR_VAR 0 4
5535: PUSH
5536: LD_INT 1
5538: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5539: LD_ADDR_VAR 0 8
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL 5236 0 1
5553: ST_TO_ADDR
// if tmp then
5554: LD_VAR 0 8
5558: IFFALSE 5601
// begin for i in tmp do
5560: LD_ADDR_VAR 0 7
5564: PUSH
5565: LD_VAR 0 8
5569: PUSH
5570: FOR_IN
5571: IFFALSE 5599
// if i [ 1 ] = b_ext_radio then
5573: LD_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ARRAY
5581: PUSH
5582: LD_INT 22
5584: EQUAL
5585: IFFALSE 5597
// begin control := control_remote ;
5587: LD_ADDR_VAR 0 4
5591: PUSH
5592: LD_INT 2
5594: ST_TO_ADDR
// break ;
5595: GO 5599
// end ;
5597: GO 5570
5599: POP
5600: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5601: LD_VAR 0 1
5605: PPUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: LD_VAR 0 3
5615: PPUSH
5616: LD_VAR 0 4
5620: PPUSH
5621: LD_VAR 0 5
5625: PPUSH
5626: CALL_OW 448
5630: IFFALSE 5665
// begin result := [ chassis , engine , control , weapon ] ;
5632: LD_ADDR_VAR 0 6
5636: PUSH
5637: LD_VAR 0 2
5641: PUSH
5642: LD_VAR 0 3
5646: PUSH
5647: LD_VAR 0 4
5651: PUSH
5652: LD_VAR 0 5
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: ST_TO_ADDR
// exit ;
5663: GO 6087
// end ; _chassis := AvailableChassisList ( factory ) ;
5665: LD_ADDR_VAR 0 9
5669: PUSH
5670: LD_VAR 0 1
5674: PPUSH
5675: CALL_OW 475
5679: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5680: LD_ADDR_VAR 0 11
5684: PUSH
5685: LD_VAR 0 1
5689: PPUSH
5690: CALL_OW 476
5694: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5695: LD_ADDR_VAR 0 12
5699: PUSH
5700: LD_VAR 0 1
5704: PPUSH
5705: CALL_OW 477
5709: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5710: LD_ADDR_VAR 0 10
5714: PUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 478
5724: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5725: LD_VAR 0 9
5729: NOT
5730: IFTRUE 5739
5732: PUSH
5733: LD_VAR 0 11
5737: NOT
5738: OR
5739: IFTRUE 5748
5741: PUSH
5742: LD_VAR 0 12
5746: NOT
5747: OR
5748: IFTRUE 5757
5750: PUSH
5751: LD_VAR 0 10
5755: NOT
5756: OR
5757: IFFALSE 5792
// begin result := [ chassis , engine , control , weapon ] ;
5759: LD_ADDR_VAR 0 6
5763: PUSH
5764: LD_VAR 0 2
5768: PUSH
5769: LD_VAR 0 3
5773: PUSH
5774: LD_VAR 0 4
5778: PUSH
5779: LD_VAR 0 5
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: ST_TO_ADDR
// exit ;
5790: GO 6087
// end ; if not chassis in _chassis then
5792: LD_VAR 0 2
5796: PUSH
5797: LD_VAR 0 9
5801: IN
5802: NOT
5803: IFFALSE 5829
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: LD_VAR 0 9
5814: PUSH
5815: LD_INT 1
5817: PPUSH
5818: LD_VAR 0 9
5822: PPUSH
5823: CALL_OW 12
5827: ARRAY
5828: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5829: LD_VAR 0 2
5833: PPUSH
5834: LD_VAR 0 3
5838: PPUSH
5839: CALL 6092 0 2
5843: NOT
5844: IFFALSE 5905
// repeat engine := _engine [ 1 ] ;
5846: LD_ADDR_VAR 0 3
5850: PUSH
5851: LD_VAR 0 11
5855: PUSH
5856: LD_INT 1
5858: ARRAY
5859: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5860: LD_ADDR_VAR 0 11
5864: PUSH
5865: LD_VAR 0 11
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: CALL_OW 3
5877: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5878: LD_VAR 0 2
5882: PPUSH
5883: LD_VAR 0 3
5887: PPUSH
5888: CALL 6092 0 2
5892: IFTRUE 5903
5894: PUSH
5895: LD_VAR 0 11
5899: PUSH
5900: EMPTY
5901: EQUAL
5902: OR
5903: IFFALSE 5846
// if not control in _control then
5905: LD_VAR 0 4
5909: PUSH
5910: LD_VAR 0 12
5914: IN
5915: NOT
5916: IFFALSE 5942
// control := _control [ rand ( 1 , _control ) ] ;
5918: LD_ADDR_VAR 0 4
5922: PUSH
5923: LD_VAR 0 12
5927: PUSH
5928: LD_INT 1
5930: PPUSH
5931: LD_VAR 0 12
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5942: LD_VAR 0 2
5946: PPUSH
5947: LD_VAR 0 5
5951: PPUSH
5952: CALL 6314 0 2
5956: NOT
5957: IFFALSE 6018
// repeat weapon := _weapon [ 1 ] ;
5959: LD_ADDR_VAR 0 5
5963: PUSH
5964: LD_VAR 0 10
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5973: LD_ADDR_VAR 0 10
5977: PUSH
5978: LD_VAR 0 10
5982: PPUSH
5983: LD_INT 1
5985: PPUSH
5986: CALL_OW 3
5990: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_VAR 0 5
6000: PPUSH
6001: CALL 6314 0 2
6005: IFTRUE 6016
6007: PUSH
6008: LD_VAR 0 10
6012: PUSH
6013: EMPTY
6014: EQUAL
6015: OR
6016: IFFALSE 5959
// result := [ ] ;
6018: LD_ADDR_VAR 0 6
6022: PUSH
6023: EMPTY
6024: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: LD_VAR 0 3
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: LD_VAR 0 5
6049: PPUSH
6050: CALL_OW 448
6054: IFFALSE 6087
// result := [ chassis , engine , control , weapon ] ;
6056: LD_ADDR_VAR 0 6
6060: PUSH
6061: LD_VAR 0 2
6065: PUSH
6066: LD_VAR 0 3
6070: PUSH
6071: LD_VAR 0 4
6075: PUSH
6076: LD_VAR 0 5
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: ST_TO_ADDR
// end ;
6087: LD_VAR 0 6
6091: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6092: LD_INT 0
6094: PPUSH
// if not chassis or not engine then
6095: LD_VAR 0 1
6099: NOT
6100: IFTRUE 6109
6102: PUSH
6103: LD_VAR 0 2
6107: NOT
6108: OR
6109: IFFALSE 6113
// exit ;
6111: GO 6309
// case engine of engine_solar :
6113: LD_VAR 0 2
6117: PUSH
6118: LD_INT 2
6120: DOUBLE
6121: EQUAL
6122: IFTRUE 6126
6124: GO 6164
6126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 11
6134: PUSH
6135: LD_INT 12
6137: PUSH
6138: LD_INT 13
6140: PUSH
6141: LD_INT 14
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: LD_INT 2
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: ST_TO_ADDR
6162: GO 6293
6164: LD_INT 1
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6234
6172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6173: LD_ADDR_VAR 0 3
6177: PUSH
6178: LD_INT 11
6180: PUSH
6181: LD_INT 12
6183: PUSH
6184: LD_INT 13
6186: PUSH
6187: LD_INT 14
6189: PUSH
6190: LD_INT 1
6192: PUSH
6193: LD_INT 2
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_INT 4
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 23
6210: PUSH
6211: LD_INT 22
6213: PUSH
6214: LD_INT 24
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: ST_TO_ADDR
6232: GO 6293
6234: LD_INT 3
6236: DOUBLE
6237: EQUAL
6238: IFTRUE 6242
6240: GO 6292
6242: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: LD_INT 13
6250: PUSH
6251: LD_INT 14
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 3
6259: PUSH
6260: LD_INT 4
6262: PUSH
6263: LD_INT 5
6265: PUSH
6266: LD_INT 21
6268: PUSH
6269: LD_INT 22
6271: PUSH
6272: LD_INT 23
6274: PUSH
6275: LD_INT 24
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: ST_TO_ADDR
6290: GO 6293
6292: POP
// result := ( chassis in result ) ;
6293: LD_ADDR_VAR 0 3
6297: PUSH
6298: LD_VAR 0 1
6302: PUSH
6303: LD_VAR 0 3
6307: IN
6308: ST_TO_ADDR
// end ;
6309: LD_VAR 0 3
6313: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6314: LD_INT 0
6316: PPUSH
// if not chassis or not weapon then
6317: LD_VAR 0 1
6321: NOT
6322: IFTRUE 6331
6324: PUSH
6325: LD_VAR 0 2
6329: NOT
6330: OR
6331: IFFALSE 6335
// exit ;
6333: GO 7429
// case weapon of us_machine_gun :
6335: LD_VAR 0 2
6339: PUSH
6340: LD_INT 2
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6378
6348: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_INT 1
6356: PUSH
6357: LD_INT 2
6359: PUSH
6360: LD_INT 3
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: LD_INT 5
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: ST_TO_ADDR
6376: GO 7413
6378: LD_INT 3
6380: DOUBLE
6381: EQUAL
6382: IFTRUE 6386
6384: GO 6416
6386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6387: LD_ADDR_VAR 0 3
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: ST_TO_ADDR
6414: GO 7413
6416: LD_INT 11
6418: DOUBLE
6419: EQUAL
6420: IFTRUE 6424
6422: GO 6454
6424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6425: LD_ADDR_VAR 0 3
6429: PUSH
6430: LD_INT 1
6432: PUSH
6433: LD_INT 2
6435: PUSH
6436: LD_INT 3
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: ST_TO_ADDR
6452: GO 7413
6454: LD_INT 4
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6488
6462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6463: LD_ADDR_VAR 0 3
6467: PUSH
6468: LD_INT 2
6470: PUSH
6471: LD_INT 3
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: ST_TO_ADDR
6486: GO 7413
6488: LD_INT 5
6490: DOUBLE
6491: EQUAL
6492: IFTRUE 6496
6494: GO 6522
6496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: LD_INT 3
6507: PUSH
6508: LD_INT 4
6510: PUSH
6511: LD_INT 5
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: ST_TO_ADDR
6520: GO 7413
6522: LD_INT 9
6524: DOUBLE
6525: EQUAL
6526: IFTRUE 6530
6528: GO 6556
6530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: LD_INT 2
6538: PUSH
6539: LD_INT 3
6541: PUSH
6542: LD_INT 4
6544: PUSH
6545: LD_INT 5
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: ST_TO_ADDR
6554: GO 7413
6556: LD_INT 7
6558: DOUBLE
6559: EQUAL
6560: IFTRUE 6564
6562: GO 6590
6564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6565: LD_ADDR_VAR 0 3
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 3
6575: PUSH
6576: LD_INT 4
6578: PUSH
6579: LD_INT 5
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: ST_TO_ADDR
6588: GO 7413
6590: LD_INT 12
6592: DOUBLE
6593: EQUAL
6594: IFTRUE 6598
6596: GO 6624
6598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_INT 2
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: LD_INT 4
6612: PUSH
6613: LD_INT 5
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: ST_TO_ADDR
6622: GO 7413
6624: LD_INT 13
6626: DOUBLE
6627: EQUAL
6628: IFTRUE 6632
6630: GO 6658
6632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6633: LD_ADDR_VAR 0 3
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: LD_INT 3
6643: PUSH
6644: LD_INT 4
6646: PUSH
6647: LD_INT 5
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 7413
6658: LD_INT 14
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6684
6666: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6667: LD_ADDR_VAR 0 3
6671: PUSH
6672: LD_INT 4
6674: PUSH
6675: LD_INT 5
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: ST_TO_ADDR
6682: GO 7413
6684: LD_INT 6
6686: DOUBLE
6687: EQUAL
6688: IFTRUE 6692
6690: GO 6710
6692: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6693: LD_ADDR_VAR 0 3
6697: PUSH
6698: LD_INT 4
6700: PUSH
6701: LD_INT 5
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: ST_TO_ADDR
6708: GO 7413
6710: LD_INT 10
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6718
6716: GO 6736
6718: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 4
6726: PUSH
6727: LD_INT 5
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: ST_TO_ADDR
6734: GO 7413
6736: LD_INT 22
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6770
6744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6745: LD_ADDR_VAR 0 3
6749: PUSH
6750: LD_INT 11
6752: PUSH
6753: LD_INT 12
6755: PUSH
6756: LD_INT 13
6758: PUSH
6759: LD_INT 14
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: ST_TO_ADDR
6768: GO 7413
6770: LD_INT 23
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6804
6778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6779: LD_ADDR_VAR 0 3
6783: PUSH
6784: LD_INT 11
6786: PUSH
6787: LD_INT 12
6789: PUSH
6790: LD_INT 13
6792: PUSH
6793: LD_INT 14
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: ST_TO_ADDR
6802: GO 7413
6804: LD_INT 24
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6838
6812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_INT 11
6820: PUSH
6821: LD_INT 12
6823: PUSH
6824: LD_INT 13
6826: PUSH
6827: LD_INT 14
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: ST_TO_ADDR
6836: GO 7413
6838: LD_INT 30
6840: DOUBLE
6841: EQUAL
6842: IFTRUE 6846
6844: GO 6872
6846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6847: LD_ADDR_VAR 0 3
6851: PUSH
6852: LD_INT 11
6854: PUSH
6855: LD_INT 12
6857: PUSH
6858: LD_INT 13
6860: PUSH
6861: LD_INT 14
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: ST_TO_ADDR
6870: GO 7413
6872: LD_INT 25
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 6898
6880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 13
6888: PUSH
6889: LD_INT 14
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: ST_TO_ADDR
6896: GO 7413
6898: LD_INT 27
6900: DOUBLE
6901: EQUAL
6902: IFTRUE 6906
6904: GO 6924
6906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: LD_INT 13
6914: PUSH
6915: LD_INT 14
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 7413
6924: LD_INT 92
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 6958
6932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6933: LD_ADDR_VAR 0 3
6937: PUSH
6938: LD_INT 11
6940: PUSH
6941: LD_INT 12
6943: PUSH
6944: LD_INT 13
6946: PUSH
6947: LD_INT 14
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 7413
6958: LD_INT 28
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 6984
6966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_INT 13
6974: PUSH
6975: LD_INT 14
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: ST_TO_ADDR
6982: GO 7413
6984: LD_INT 29
6986: DOUBLE
6987: EQUAL
6988: IFTRUE 6992
6990: GO 7010
6992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6993: LD_ADDR_VAR 0 3
6997: PUSH
6998: LD_INT 13
7000: PUSH
7001: LD_INT 14
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: ST_TO_ADDR
7008: GO 7413
7010: LD_INT 31
7012: DOUBLE
7013: EQUAL
7014: IFTRUE 7018
7016: GO 7036
7018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_INT 13
7026: PUSH
7027: LD_INT 14
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: ST_TO_ADDR
7034: GO 7413
7036: LD_INT 26
7038: DOUBLE
7039: EQUAL
7040: IFTRUE 7044
7042: GO 7062
7044: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: LD_INT 13
7052: PUSH
7053: LD_INT 14
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: ST_TO_ADDR
7060: GO 7413
7062: LD_INT 42
7064: DOUBLE
7065: EQUAL
7066: IFTRUE 7070
7068: GO 7096
7070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7071: LD_ADDR_VAR 0 3
7075: PUSH
7076: LD_INT 21
7078: PUSH
7079: LD_INT 22
7081: PUSH
7082: LD_INT 23
7084: PUSH
7085: LD_INT 24
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: ST_TO_ADDR
7094: GO 7413
7096: LD_INT 43
7098: DOUBLE
7099: EQUAL
7100: IFTRUE 7104
7102: GO 7130
7104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7105: LD_ADDR_VAR 0 3
7109: PUSH
7110: LD_INT 21
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 23
7118: PUSH
7119: LD_INT 24
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: ST_TO_ADDR
7128: GO 7413
7130: LD_INT 44
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7164
7138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7139: LD_ADDR_VAR 0 3
7143: PUSH
7144: LD_INT 21
7146: PUSH
7147: LD_INT 22
7149: PUSH
7150: LD_INT 23
7152: PUSH
7153: LD_INT 24
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: ST_TO_ADDR
7162: GO 7413
7164: LD_INT 45
7166: DOUBLE
7167: EQUAL
7168: IFTRUE 7172
7170: GO 7198
7172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7173: LD_ADDR_VAR 0 3
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 22
7183: PUSH
7184: LD_INT 23
7186: PUSH
7187: LD_INT 24
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: ST_TO_ADDR
7196: GO 7413
7198: LD_INT 49
7200: DOUBLE
7201: EQUAL
7202: IFTRUE 7206
7204: GO 7232
7206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 21
7214: PUSH
7215: LD_INT 22
7217: PUSH
7218: LD_INT 23
7220: PUSH
7221: LD_INT 24
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: ST_TO_ADDR
7230: GO 7413
7232: LD_INT 51
7234: DOUBLE
7235: EQUAL
7236: IFTRUE 7240
7238: GO 7266
7240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7241: LD_ADDR_VAR 0 3
7245: PUSH
7246: LD_INT 21
7248: PUSH
7249: LD_INT 22
7251: PUSH
7252: LD_INT 23
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: ST_TO_ADDR
7264: GO 7413
7266: LD_INT 52
7268: DOUBLE
7269: EQUAL
7270: IFTRUE 7274
7272: GO 7300
7274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7275: LD_ADDR_VAR 0 3
7279: PUSH
7280: LD_INT 21
7282: PUSH
7283: LD_INT 22
7285: PUSH
7286: LD_INT 23
7288: PUSH
7289: LD_INT 24
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: ST_TO_ADDR
7298: GO 7413
7300: LD_INT 53
7302: DOUBLE
7303: EQUAL
7304: IFTRUE 7308
7306: GO 7326
7308: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 23
7316: PUSH
7317: LD_INT 24
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: ST_TO_ADDR
7324: GO 7413
7326: LD_INT 46
7328: DOUBLE
7329: EQUAL
7330: IFTRUE 7334
7332: GO 7352
7334: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7335: LD_ADDR_VAR 0 3
7339: PUSH
7340: LD_INT 23
7342: PUSH
7343: LD_INT 24
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: ST_TO_ADDR
7350: GO 7413
7352: LD_INT 47
7354: DOUBLE
7355: EQUAL
7356: IFTRUE 7360
7358: GO 7378
7360: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: LD_INT 23
7368: PUSH
7369: LD_INT 24
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: ST_TO_ADDR
7376: GO 7413
7378: LD_INT 98
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7412
7386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7387: LD_ADDR_VAR 0 3
7391: PUSH
7392: LD_INT 21
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_INT 23
7400: PUSH
7401: LD_INT 24
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: ST_TO_ADDR
7410: GO 7413
7412: POP
// result := ( chassis in result ) ;
7413: LD_ADDR_VAR 0 3
7417: PUSH
7418: LD_VAR 0 1
7422: PUSH
7423: LD_VAR 0 3
7427: IN
7428: ST_TO_ADDR
// end ;
7429: LD_VAR 0 3
7433: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7434: LD_INT 0
7436: PPUSH
7437: PPUSH
7438: PPUSH
7439: PPUSH
7440: PPUSH
7441: PPUSH
7442: PPUSH
// result := array ;
7443: LD_ADDR_VAR 0 5
7447: PUSH
7448: LD_VAR 0 1
7452: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7453: LD_VAR 0 1
7457: NOT
7458: IFTRUE 7467
7460: PUSH
7461: LD_VAR 0 2
7465: NOT
7466: OR
7467: IFTRUE 7476
7469: PUSH
7470: LD_VAR 0 3
7474: NOT
7475: OR
7476: IFTRUE 7490
7478: PUSH
7479: LD_VAR 0 2
7483: PUSH
7484: LD_VAR 0 1
7488: GREATER
7489: OR
7490: IFTRUE 7504
7492: PUSH
7493: LD_VAR 0 3
7497: PUSH
7498: LD_VAR 0 1
7502: GREATER
7503: OR
7504: IFFALSE 7508
// exit ;
7506: GO 7804
// if direction then
7508: LD_VAR 0 4
7512: IFFALSE 7576
// begin d := 1 ;
7514: LD_ADDR_VAR 0 9
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// if i_from > i_to then
7522: LD_VAR 0 2
7526: PUSH
7527: LD_VAR 0 3
7531: GREATER
7532: IFFALSE 7558
// length := ( array - i_from ) + i_to else
7534: LD_ADDR_VAR 0 11
7538: PUSH
7539: LD_VAR 0 1
7543: PUSH
7544: LD_VAR 0 2
7548: MINUS
7549: PUSH
7550: LD_VAR 0 3
7554: PLUS
7555: ST_TO_ADDR
7556: GO 7574
// length := i_to - i_from ;
7558: LD_ADDR_VAR 0 11
7562: PUSH
7563: LD_VAR 0 3
7567: PUSH
7568: LD_VAR 0 2
7572: MINUS
7573: ST_TO_ADDR
// end else
7574: GO 7637
// begin d := - 1 ;
7576: LD_ADDR_VAR 0 9
7580: PUSH
7581: LD_INT 1
7583: NEG
7584: ST_TO_ADDR
// if i_from > i_to then
7585: LD_VAR 0 2
7589: PUSH
7590: LD_VAR 0 3
7594: GREATER
7595: IFFALSE 7615
// length := i_from - i_to else
7597: LD_ADDR_VAR 0 11
7601: PUSH
7602: LD_VAR 0 2
7606: PUSH
7607: LD_VAR 0 3
7611: MINUS
7612: ST_TO_ADDR
7613: GO 7637
// length := ( array - i_to ) + i_from ;
7615: LD_ADDR_VAR 0 11
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: LD_VAR 0 3
7629: MINUS
7630: PUSH
7631: LD_VAR 0 2
7635: PLUS
7636: ST_TO_ADDR
// end ; if not length then
7637: LD_VAR 0 11
7641: NOT
7642: IFFALSE 7646
// exit ;
7644: GO 7804
// tmp := array ;
7646: LD_ADDR_VAR 0 10
7650: PUSH
7651: LD_VAR 0 1
7655: ST_TO_ADDR
// for i = 1 to length do
7656: LD_ADDR_VAR 0 6
7660: PUSH
7661: DOUBLE
7662: LD_INT 1
7664: DEC
7665: ST_TO_ADDR
7666: LD_VAR 0 11
7670: PUSH
7671: FOR_TO
7672: IFFALSE 7792
// begin for j = 1 to array do
7674: LD_ADDR_VAR 0 7
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_VAR 0 1
7688: PUSH
7689: FOR_TO
7690: IFFALSE 7778
// begin k := j + d ;
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: LD_VAR 0 7
7701: PUSH
7702: LD_VAR 0 9
7706: PLUS
7707: ST_TO_ADDR
// if k > array then
7708: LD_VAR 0 8
7712: PUSH
7713: LD_VAR 0 1
7717: GREATER
7718: IFFALSE 7728
// k := 1 ;
7720: LD_ADDR_VAR 0 8
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// if not k then
7728: LD_VAR 0 8
7732: NOT
7733: IFFALSE 7745
// k := array ;
7735: LD_ADDR_VAR 0 8
7739: PUSH
7740: LD_VAR 0 1
7744: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7745: LD_ADDR_VAR 0 10
7749: PUSH
7750: LD_VAR 0 10
7754: PPUSH
7755: LD_VAR 0 8
7759: PPUSH
7760: LD_VAR 0 1
7764: PUSH
7765: LD_VAR 0 7
7769: ARRAY
7770: PPUSH
7771: CALL_OW 1
7775: ST_TO_ADDR
// end ;
7776: GO 7689
7778: POP
7779: POP
// array := tmp ;
7780: LD_ADDR_VAR 0 1
7784: PUSH
7785: LD_VAR 0 10
7789: ST_TO_ADDR
// end ;
7790: GO 7671
7792: POP
7793: POP
// result := array ;
7794: LD_ADDR_VAR 0 5
7798: PUSH
7799: LD_VAR 0 1
7803: ST_TO_ADDR
// end ;
7804: LD_VAR 0 5
7808: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7809: LD_INT 0
7811: PPUSH
7812: PPUSH
// result := 0 ;
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: LD_INT 0
7820: ST_TO_ADDR
// if not array or not value in array then
7821: LD_VAR 0 1
7825: NOT
7826: IFTRUE 7841
7828: PUSH
7829: LD_VAR 0 2
7833: PUSH
7834: LD_VAR 0 1
7838: IN
7839: NOT
7840: OR
7841: IFFALSE 7845
// exit ;
7843: GO 7899
// for i = 1 to array do
7845: LD_ADDR_VAR 0 4
7849: PUSH
7850: DOUBLE
7851: LD_INT 1
7853: DEC
7854: ST_TO_ADDR
7855: LD_VAR 0 1
7859: PUSH
7860: FOR_TO
7861: IFFALSE 7897
// if value = array [ i ] then
7863: LD_VAR 0 2
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: LD_VAR 0 4
7877: ARRAY
7878: EQUAL
7879: IFFALSE 7895
// begin result := i ;
7881: LD_ADDR_VAR 0 3
7885: PUSH
7886: LD_VAR 0 4
7890: ST_TO_ADDR
// exit ;
7891: POP
7892: POP
7893: GO 7899
// end ;
7895: GO 7860
7897: POP
7898: POP
// end ;
7899: LD_VAR 0 3
7903: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7904: LD_INT 0
7906: PPUSH
// vc_chassis := chassis ;
7907: LD_ADDR_OWVAR 37
7911: PUSH
7912: LD_VAR 0 1
7916: ST_TO_ADDR
// vc_engine := engine ;
7917: LD_ADDR_OWVAR 39
7921: PUSH
7922: LD_VAR 0 2
7926: ST_TO_ADDR
// vc_control := control ;
7927: LD_ADDR_OWVAR 38
7931: PUSH
7932: LD_VAR 0 3
7936: ST_TO_ADDR
// vc_weapon := weapon ;
7937: LD_ADDR_OWVAR 40
7941: PUSH
7942: LD_VAR 0 4
7946: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7947: LD_ADDR_OWVAR 41
7951: PUSH
7952: LD_VAR 0 5
7956: ST_TO_ADDR
// end ;
7957: LD_VAR 0 6
7961: RET
// export function WantPlant ( unit ) ; var task ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
// result := false ;
7966: LD_ADDR_VAR 0 2
7970: PUSH
7971: LD_INT 0
7973: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7974: LD_ADDR_VAR 0 3
7978: PUSH
7979: LD_VAR 0 1
7983: PPUSH
7984: CALL_OW 437
7988: ST_TO_ADDR
// if task then
7989: LD_VAR 0 3
7993: IFFALSE 8021
// if task [ 1 ] [ 1 ] = p then
7995: LD_VAR 0 3
7999: PUSH
8000: LD_INT 1
8002: ARRAY
8003: PUSH
8004: LD_INT 1
8006: ARRAY
8007: PUSH
8008: LD_STRING p
8010: EQUAL
8011: IFFALSE 8021
// result := true ;
8013: LD_ADDR_VAR 0 2
8017: PUSH
8018: LD_INT 1
8020: ST_TO_ADDR
// end ;
8021: LD_VAR 0 2
8025: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8026: LD_INT 0
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
// if pos < 1 then
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 1
8039: LESS
8040: IFFALSE 8044
// exit ;
8042: GO 8347
// if pos = 1 then
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 1
8051: EQUAL
8052: IFFALSE 8085
// result := Replace ( arr , pos [ 1 ] , value ) else
8054: LD_ADDR_VAR 0 4
8058: PUSH
8059: LD_VAR 0 1
8063: PPUSH
8064: LD_VAR 0 2
8068: PUSH
8069: LD_INT 1
8071: ARRAY
8072: PPUSH
8073: LD_VAR 0 3
8077: PPUSH
8078: CALL_OW 1
8082: ST_TO_ADDR
8083: GO 8347
// begin tmp := arr ;
8085: LD_ADDR_VAR 0 6
8089: PUSH
8090: LD_VAR 0 1
8094: ST_TO_ADDR
// s_arr := [ tmp ] ;
8095: LD_ADDR_VAR 0 7
8099: PUSH
8100: LD_VAR 0 6
8104: PUSH
8105: EMPTY
8106: LIST
8107: ST_TO_ADDR
// for i = 1 to pos - 1 do
8108: LD_ADDR_VAR 0 5
8112: PUSH
8113: DOUBLE
8114: LD_INT 1
8116: DEC
8117: ST_TO_ADDR
8118: LD_VAR 0 2
8122: PUSH
8123: LD_INT 1
8125: MINUS
8126: PUSH
8127: FOR_TO
8128: IFFALSE 8173
// begin tmp := tmp [ pos [ i ] ] ;
8130: LD_ADDR_VAR 0 6
8134: PUSH
8135: LD_VAR 0 6
8139: PUSH
8140: LD_VAR 0 2
8144: PUSH
8145: LD_VAR 0 5
8149: ARRAY
8150: ARRAY
8151: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8152: LD_ADDR_VAR 0 7
8156: PUSH
8157: LD_VAR 0 7
8161: PUSH
8162: LD_VAR 0 6
8166: PUSH
8167: EMPTY
8168: LIST
8169: ADD
8170: ST_TO_ADDR
// end ;
8171: GO 8127
8173: POP
8174: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8175: LD_ADDR_VAR 0 6
8179: PUSH
8180: LD_VAR 0 6
8184: PPUSH
8185: LD_VAR 0 2
8189: PUSH
8190: LD_VAR 0 2
8194: ARRAY
8195: PPUSH
8196: LD_VAR 0 3
8200: PPUSH
8201: CALL_OW 1
8205: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8206: LD_ADDR_VAR 0 7
8210: PUSH
8211: LD_VAR 0 7
8215: PPUSH
8216: LD_VAR 0 7
8220: PPUSH
8221: LD_VAR 0 6
8225: PPUSH
8226: CALL_OW 1
8230: ST_TO_ADDR
// for i = s_arr downto 2 do
8231: LD_ADDR_VAR 0 5
8235: PUSH
8236: DOUBLE
8237: LD_VAR 0 7
8241: INC
8242: ST_TO_ADDR
8243: LD_INT 2
8245: PUSH
8246: FOR_DOWNTO
8247: IFFALSE 8331
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8249: LD_ADDR_VAR 0 6
8253: PUSH
8254: LD_VAR 0 7
8258: PUSH
8259: LD_VAR 0 5
8263: PUSH
8264: LD_INT 1
8266: MINUS
8267: ARRAY
8268: PPUSH
8269: LD_VAR 0 2
8273: PUSH
8274: LD_VAR 0 5
8278: PUSH
8279: LD_INT 1
8281: MINUS
8282: ARRAY
8283: PPUSH
8284: LD_VAR 0 7
8288: PUSH
8289: LD_VAR 0 5
8293: ARRAY
8294: PPUSH
8295: CALL_OW 1
8299: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8300: LD_ADDR_VAR 0 7
8304: PUSH
8305: LD_VAR 0 7
8309: PPUSH
8310: LD_VAR 0 5
8314: PUSH
8315: LD_INT 1
8317: MINUS
8318: PPUSH
8319: LD_VAR 0 6
8323: PPUSH
8324: CALL_OW 1
8328: ST_TO_ADDR
// end ;
8329: GO 8246
8331: POP
8332: POP
// result := s_arr [ 1 ] ;
8333: LD_ADDR_VAR 0 4
8337: PUSH
8338: LD_VAR 0 7
8342: PUSH
8343: LD_INT 1
8345: ARRAY
8346: ST_TO_ADDR
// end ; end ;
8347: LD_VAR 0 4
8351: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8352: LD_INT 0
8354: PPUSH
8355: PPUSH
// if not list then
8356: LD_VAR 0 1
8360: NOT
8361: IFFALSE 8365
// exit ;
8363: GO 8456
// i := list [ pos1 ] ;
8365: LD_ADDR_VAR 0 5
8369: PUSH
8370: LD_VAR 0 1
8374: PUSH
8375: LD_VAR 0 2
8379: ARRAY
8380: ST_TO_ADDR
// if not i then
8381: LD_VAR 0 5
8385: NOT
8386: IFFALSE 8390
// exit ;
8388: GO 8456
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8390: LD_ADDR_VAR 0 1
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_VAR 0 2
8404: PPUSH
8405: LD_VAR 0 1
8409: PUSH
8410: LD_VAR 0 3
8414: ARRAY
8415: PPUSH
8416: CALL_OW 1
8420: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_VAR 0 3
8435: PPUSH
8436: LD_VAR 0 5
8440: PPUSH
8441: CALL_OW 1
8445: ST_TO_ADDR
// result := list ;
8446: LD_ADDR_VAR 0 4
8450: PUSH
8451: LD_VAR 0 1
8455: ST_TO_ADDR
// end ;
8456: LD_VAR 0 4
8460: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8461: LD_INT 0
8463: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8464: LD_ADDR_VAR 0 5
8468: PUSH
8469: LD_VAR 0 1
8473: PPUSH
8474: CALL_OW 250
8478: PPUSH
8479: LD_VAR 0 1
8483: PPUSH
8484: CALL_OW 251
8488: PPUSH
8489: LD_VAR 0 2
8493: PPUSH
8494: LD_VAR 0 3
8498: PPUSH
8499: LD_VAR 0 4
8503: PPUSH
8504: CALL 8886 0 5
8508: ST_TO_ADDR
// end ;
8509: LD_VAR 0 5
8513: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8514: LD_INT 0
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
// if not list or not unit then
8520: LD_VAR 0 2
8524: NOT
8525: IFTRUE 8534
8527: PUSH
8528: LD_VAR 0 1
8532: NOT
8533: OR
8534: IFFALSE 8538
// exit ;
8536: GO 8881
// result := [ ] ;
8538: LD_ADDR_VAR 0 5
8542: PUSH
8543: EMPTY
8544: ST_TO_ADDR
// for i in list do
8545: LD_ADDR_VAR 0 6
8549: PUSH
8550: LD_VAR 0 2
8554: PUSH
8555: FOR_IN
8556: IFFALSE 8774
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8558: LD_ADDR_VAR 0 8
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_VAR 0 6
8581: PUSH
8582: LD_INT 2
8584: ARRAY
8585: PPUSH
8586: CALL_OW 297
8590: ST_TO_ADDR
// if not Count ( result ) then
8591: LD_VAR 0 5
8595: PPUSH
8596: CALL 5108 0 1
8600: NOT
8601: IFFALSE 8634
// begin result := Join ( result , [ i , tmp ] ) ;
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: LD_VAR 0 5
8612: PPUSH
8613: LD_VAR 0 6
8617: PUSH
8618: LD_VAR 0 8
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PPUSH
8627: CALL 41084 0 2
8631: ST_TO_ADDR
// continue ;
8632: GO 8555
// end ; if result [ result ] [ 2 ] <= tmp then
8634: LD_VAR 0 5
8638: PUSH
8639: LD_VAR 0 5
8643: ARRAY
8644: PUSH
8645: LD_INT 2
8647: ARRAY
8648: PUSH
8649: LD_VAR 0 8
8653: LESSEQUAL
8654: IFFALSE 8687
// result := Join ( result , [ i , tmp ] ) else
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: LD_VAR 0 5
8665: PPUSH
8666: LD_VAR 0 6
8670: PUSH
8671: LD_VAR 0 8
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL 41084 0 2
8684: ST_TO_ADDR
8685: GO 8772
// begin for j := 1 to Count ( result ) do
8687: LD_ADDR_VAR 0 7
8691: PUSH
8692: DOUBLE
8693: LD_INT 1
8695: DEC
8696: ST_TO_ADDR
8697: LD_VAR 0 5
8701: PPUSH
8702: CALL 5108 0 1
8706: PUSH
8707: FOR_TO
8708: IFFALSE 8770
// begin if tmp < result [ j ] [ 2 ] then
8710: LD_VAR 0 8
8714: PUSH
8715: LD_VAR 0 5
8719: PUSH
8720: LD_VAR 0 7
8724: ARRAY
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: LESS
8730: IFFALSE 8768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8732: LD_ADDR_VAR 0 5
8736: PUSH
8737: LD_VAR 0 5
8741: PPUSH
8742: LD_VAR 0 7
8746: PPUSH
8747: LD_VAR 0 6
8751: PUSH
8752: LD_VAR 0 8
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 2
8765: ST_TO_ADDR
// break ;
8766: GO 8770
// end ; end ;
8768: GO 8707
8770: POP
8771: POP
// end ; end ;
8772: GO 8555
8774: POP
8775: POP
// if result and not asc then
8776: LD_VAR 0 5
8780: IFFALSE 8789
8782: PUSH
8783: LD_VAR 0 3
8787: NOT
8788: AND
8789: IFFALSE 8806
// result := ReverseArray ( result ) ;
8791: LD_ADDR_VAR 0 5
8795: PUSH
8796: LD_VAR 0 5
8800: PPUSH
8801: CALL 36164 0 1
8805: ST_TO_ADDR
// tmp := [ ] ;
8806: LD_ADDR_VAR 0 8
8810: PUSH
8811: EMPTY
8812: ST_TO_ADDR
// if mode then
8813: LD_VAR 0 4
8817: IFFALSE 8881
// begin for i := 1 to result do
8819: LD_ADDR_VAR 0 6
8823: PUSH
8824: DOUBLE
8825: LD_INT 1
8827: DEC
8828: ST_TO_ADDR
8829: LD_VAR 0 5
8833: PUSH
8834: FOR_TO
8835: IFFALSE 8869
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8837: LD_ADDR_VAR 0 8
8841: PUSH
8842: LD_VAR 0 8
8846: PPUSH
8847: LD_VAR 0 5
8851: PUSH
8852: LD_VAR 0 6
8856: ARRAY
8857: PUSH
8858: LD_INT 1
8860: ARRAY
8861: PPUSH
8862: CALL 41084 0 2
8866: ST_TO_ADDR
8867: GO 8834
8869: POP
8870: POP
// result := tmp ;
8871: LD_ADDR_VAR 0 5
8875: PUSH
8876: LD_VAR 0 8
8880: ST_TO_ADDR
// end ; end ;
8881: LD_VAR 0 5
8885: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// if not list then
8892: LD_VAR 0 3
8896: NOT
8897: IFFALSE 8901
// exit ;
8899: GO 9291
// result := [ ] ;
8901: LD_ADDR_VAR 0 6
8905: PUSH
8906: EMPTY
8907: ST_TO_ADDR
// for i in list do
8908: LD_ADDR_VAR 0 7
8912: PUSH
8913: LD_VAR 0 3
8917: PUSH
8918: FOR_IN
8919: IFFALSE 9121
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8921: LD_ADDR_VAR 0 9
8925: PUSH
8926: LD_VAR 0 7
8930: PPUSH
8931: LD_VAR 0 1
8935: PPUSH
8936: LD_VAR 0 2
8940: PPUSH
8941: CALL_OW 297
8945: ST_TO_ADDR
// if not result then
8946: LD_VAR 0 6
8950: NOT
8951: IFFALSE 8977
// result := [ [ i , tmp ] ] else
8953: LD_ADDR_VAR 0 6
8957: PUSH
8958: LD_VAR 0 7
8962: PUSH
8963: LD_VAR 0 9
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: EMPTY
8973: LIST
8974: ST_TO_ADDR
8975: GO 9119
// begin if result [ result ] [ 2 ] <= tmp then
8977: LD_VAR 0 6
8981: PUSH
8982: LD_VAR 0 6
8986: ARRAY
8987: PUSH
8988: LD_INT 2
8990: ARRAY
8991: PUSH
8992: LD_VAR 0 9
8996: LESSEQUAL
8997: IFFALSE 9039
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8999: LD_ADDR_VAR 0 6
9003: PUSH
9004: LD_VAR 0 6
9008: PPUSH
9009: LD_VAR 0 6
9013: PUSH
9014: LD_INT 1
9016: PLUS
9017: PPUSH
9018: LD_VAR 0 7
9022: PUSH
9023: LD_VAR 0 9
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 2
9036: ST_TO_ADDR
9037: GO 9119
// for j := 1 to result do
9039: LD_ADDR_VAR 0 8
9043: PUSH
9044: DOUBLE
9045: LD_INT 1
9047: DEC
9048: ST_TO_ADDR
9049: LD_VAR 0 6
9053: PUSH
9054: FOR_TO
9055: IFFALSE 9117
// begin if tmp < result [ j ] [ 2 ] then
9057: LD_VAR 0 9
9061: PUSH
9062: LD_VAR 0 6
9066: PUSH
9067: LD_VAR 0 8
9071: ARRAY
9072: PUSH
9073: LD_INT 2
9075: ARRAY
9076: LESS
9077: IFFALSE 9115
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9079: LD_ADDR_VAR 0 6
9083: PUSH
9084: LD_VAR 0 6
9088: PPUSH
9089: LD_VAR 0 8
9093: PPUSH
9094: LD_VAR 0 7
9098: PUSH
9099: LD_VAR 0 9
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 2
9112: ST_TO_ADDR
// break ;
9113: GO 9117
// end ; end ;
9115: GO 9054
9117: POP
9118: POP
// end ; end ;
9119: GO 8918
9121: POP
9122: POP
// if result and not asc then
9123: LD_VAR 0 6
9127: IFFALSE 9136
9129: PUSH
9130: LD_VAR 0 4
9134: NOT
9135: AND
9136: IFFALSE 9211
// begin tmp := result ;
9138: LD_ADDR_VAR 0 9
9142: PUSH
9143: LD_VAR 0 6
9147: ST_TO_ADDR
// for i = tmp downto 1 do
9148: LD_ADDR_VAR 0 7
9152: PUSH
9153: DOUBLE
9154: LD_VAR 0 9
9158: INC
9159: ST_TO_ADDR
9160: LD_INT 1
9162: PUSH
9163: FOR_DOWNTO
9164: IFFALSE 9209
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9166: LD_ADDR_VAR 0 6
9170: PUSH
9171: LD_VAR 0 6
9175: PPUSH
9176: LD_VAR 0 9
9180: PUSH
9181: LD_VAR 0 7
9185: MINUS
9186: PUSH
9187: LD_INT 1
9189: PLUS
9190: PPUSH
9191: LD_VAR 0 9
9195: PUSH
9196: LD_VAR 0 7
9200: ARRAY
9201: PPUSH
9202: CALL_OW 1
9206: ST_TO_ADDR
9207: GO 9163
9209: POP
9210: POP
// end ; tmp := [ ] ;
9211: LD_ADDR_VAR 0 9
9215: PUSH
9216: EMPTY
9217: ST_TO_ADDR
// if mode then
9218: LD_VAR 0 5
9222: IFFALSE 9291
// begin for i = 1 to result do
9224: LD_ADDR_VAR 0 7
9228: PUSH
9229: DOUBLE
9230: LD_INT 1
9232: DEC
9233: ST_TO_ADDR
9234: LD_VAR 0 6
9238: PUSH
9239: FOR_TO
9240: IFFALSE 9279
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9242: LD_ADDR_VAR 0 9
9246: PUSH
9247: LD_VAR 0 9
9251: PPUSH
9252: LD_VAR 0 7
9256: PPUSH
9257: LD_VAR 0 6
9261: PUSH
9262: LD_VAR 0 7
9266: ARRAY
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: CALL_OW 1
9276: ST_TO_ADDR
9277: GO 9239
9279: POP
9280: POP
// result := tmp ;
9281: LD_ADDR_VAR 0 6
9285: PUSH
9286: LD_VAR 0 9
9290: ST_TO_ADDR
// end ; end ;
9291: LD_VAR 0 6
9295: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9296: LD_INT 0
9298: PPUSH
9299: PPUSH
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9304: LD_ADDR_VAR 0 5
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 0
9317: PUSH
9318: EMPTY
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: ST_TO_ADDR
// if not x or not y then
9326: LD_VAR 0 2
9330: NOT
9331: IFTRUE 9340
9333: PUSH
9334: LD_VAR 0 3
9338: NOT
9339: OR
9340: IFFALSE 9344
// exit ;
9342: GO 11000
// if not range then
9344: LD_VAR 0 4
9348: NOT
9349: IFFALSE 9359
// range := 10 ;
9351: LD_ADDR_VAR 0 4
9355: PUSH
9356: LD_INT 10
9358: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_INT 81
9366: PUSH
9367: LD_VAR 0 1
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 92
9378: PUSH
9379: LD_VAR 0 2
9383: PUSH
9384: LD_VAR 0 3
9388: PUSH
9389: LD_VAR 0 4
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 3
9402: PUSH
9403: LD_INT 21
9405: PUSH
9406: LD_INT 3
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: PPUSH
9422: CALL_OW 69
9426: ST_TO_ADDR
// if not tmp then
9427: LD_VAR 0 8
9431: NOT
9432: IFFALSE 9436
// exit ;
9434: GO 11000
// for i in tmp do
9436: LD_ADDR_VAR 0 6
9440: PUSH
9441: LD_VAR 0 8
9445: PUSH
9446: FOR_IN
9447: IFFALSE 10975
// begin points := [ 0 , 0 , 0 ] ;
9449: LD_ADDR_VAR 0 9
9453: PUSH
9454: LD_INT 0
9456: PUSH
9457: LD_INT 0
9459: PUSH
9460: LD_INT 0
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: LIST
9467: ST_TO_ADDR
// bpoints := 1 ;
9468: LD_ADDR_VAR 0 10
9472: PUSH
9473: LD_INT 1
9475: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9476: LD_VAR 0 6
9480: PPUSH
9481: CALL_OW 247
9485: PUSH
9486: LD_INT 1
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 10076
9494: POP
// begin if GetClass ( i ) = 1 then
9495: LD_VAR 0 6
9499: PPUSH
9500: CALL_OW 257
9504: PUSH
9505: LD_INT 1
9507: EQUAL
9508: IFFALSE 9529
// points := [ 10 , 5 , 3 ] ;
9510: LD_ADDR_VAR 0 9
9514: PUSH
9515: LD_INT 10
9517: PUSH
9518: LD_INT 5
9520: PUSH
9521: LD_INT 3
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9529: LD_VAR 0 6
9533: PPUSH
9534: CALL_OW 257
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 4
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: IN
9553: IFFALSE 9574
// points := [ 3 , 2 , 1 ] ;
9555: LD_ADDR_VAR 0 9
9559: PUSH
9560: LD_INT 3
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 1
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9574: LD_VAR 0 6
9578: PPUSH
9579: CALL_OW 257
9583: PUSH
9584: LD_INT 5
9586: EQUAL
9587: IFFALSE 9608
// points := [ 130 , 5 , 2 ] ;
9589: LD_ADDR_VAR 0 9
9593: PUSH
9594: LD_INT 130
9596: PUSH
9597: LD_INT 5
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9608: LD_VAR 0 6
9612: PPUSH
9613: CALL_OW 257
9617: PUSH
9618: LD_INT 8
9620: EQUAL
9621: IFFALSE 9642
// points := [ 35 , 35 , 30 ] ;
9623: LD_ADDR_VAR 0 9
9627: PUSH
9628: LD_INT 35
9630: PUSH
9631: LD_INT 35
9633: PUSH
9634: LD_INT 30
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9642: LD_VAR 0 6
9646: PPUSH
9647: CALL_OW 257
9651: PUSH
9652: LD_INT 9
9654: EQUAL
9655: IFFALSE 9676
// points := [ 20 , 55 , 40 ] ;
9657: LD_ADDR_VAR 0 9
9661: PUSH
9662: LD_INT 20
9664: PUSH
9665: LD_INT 55
9667: PUSH
9668: LD_INT 40
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 257
9685: PUSH
9686: LD_INT 12
9688: PUSH
9689: LD_INT 16
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: IN
9696: IFFALSE 9717
// points := [ 5 , 3 , 2 ] ;
9698: LD_ADDR_VAR 0 9
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: LD_INT 3
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 257
9726: PUSH
9727: LD_INT 17
9729: EQUAL
9730: IFFALSE 9751
// points := [ 100 , 50 , 75 ] ;
9732: LD_ADDR_VAR 0 9
9736: PUSH
9737: LD_INT 100
9739: PUSH
9740: LD_INT 50
9742: PUSH
9743: LD_INT 75
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9751: LD_VAR 0 6
9755: PPUSH
9756: CALL_OW 257
9760: PUSH
9761: LD_INT 15
9763: EQUAL
9764: IFFALSE 9785
// points := [ 10 , 5 , 3 ] ;
9766: LD_ADDR_VAR 0 9
9770: PUSH
9771: LD_INT 10
9773: PUSH
9774: LD_INT 5
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9785: LD_VAR 0 6
9789: PPUSH
9790: CALL_OW 257
9794: PUSH
9795: LD_INT 14
9797: EQUAL
9798: IFFALSE 9819
// points := [ 10 , 0 , 0 ] ;
9800: LD_ADDR_VAR 0 9
9804: PUSH
9805: LD_INT 10
9807: PUSH
9808: LD_INT 0
9810: PUSH
9811: LD_INT 0
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9819: LD_VAR 0 6
9823: PPUSH
9824: CALL_OW 257
9828: PUSH
9829: LD_INT 11
9831: EQUAL
9832: IFFALSE 9853
// points := [ 30 , 10 , 5 ] ;
9834: LD_ADDR_VAR 0 9
9838: PUSH
9839: LD_INT 30
9841: PUSH
9842: LD_INT 10
9844: PUSH
9845: LD_INT 5
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9853: LD_VAR 0 1
9857: PPUSH
9858: LD_INT 5
9860: PPUSH
9861: CALL_OW 321
9865: PUSH
9866: LD_INT 2
9868: EQUAL
9869: IFFALSE 9886
// bpoints := bpoints * 1.8 ;
9871: LD_ADDR_VAR 0 10
9875: PUSH
9876: LD_VAR 0 10
9880: PUSH
9881: LD_REAL  1.80000000000000E+0000
9884: MUL
9885: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 1
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 3
9904: PUSH
9905: LD_INT 4
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: IN
9914: IFFALSE 9934
9916: PUSH
9917: LD_VAR 0 1
9921: PPUSH
9922: LD_INT 51
9924: PPUSH
9925: CALL_OW 321
9929: PUSH
9930: LD_INT 2
9932: EQUAL
9933: AND
9934: IFFALSE 9951
// bpoints := bpoints * 1.2 ;
9936: LD_ADDR_VAR 0 10
9940: PUSH
9941: LD_VAR 0 10
9945: PUSH
9946: LD_REAL  1.20000000000000E+0000
9949: MUL
9950: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9951: LD_VAR 0 6
9955: PPUSH
9956: CALL_OW 257
9960: PUSH
9961: LD_INT 5
9963: PUSH
9964: LD_INT 7
9966: PUSH
9967: LD_INT 9
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: IN
9975: IFFALSE 9995
9977: PUSH
9978: LD_VAR 0 1
9982: PPUSH
9983: LD_INT 52
9985: PPUSH
9986: CALL_OW 321
9990: PUSH
9991: LD_INT 2
9993: EQUAL
9994: AND
9995: IFFALSE 10012
// bpoints := bpoints * 1.5 ;
9997: LD_ADDR_VAR 0 10
10001: PUSH
10002: LD_VAR 0 10
10006: PUSH
10007: LD_REAL  1.50000000000000E+0000
10010: MUL
10011: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10012: LD_VAR 0 1
10016: PPUSH
10017: LD_INT 66
10019: PPUSH
10020: CALL_OW 321
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: IFFALSE 10045
// bpoints := bpoints * 1.1 ;
10030: LD_ADDR_VAR 0 10
10034: PUSH
10035: LD_VAR 0 10
10039: PUSH
10040: LD_REAL  1.10000000000000E+0000
10043: MUL
10044: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10045: LD_ADDR_VAR 0 10
10049: PUSH
10050: LD_VAR 0 10
10054: PUSH
10055: LD_VAR 0 6
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL_OW 259
10067: PUSH
10068: LD_REAL  1.15000000000000E+0000
10071: MUL
10072: MUL
10073: ST_TO_ADDR
// end ; unit_vehicle :
10074: GO 10904
10076: LD_INT 2
10078: DOUBLE
10079: EQUAL
10080: IFTRUE 10084
10082: GO 10892
10084: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10085: LD_VAR 0 6
10089: PPUSH
10090: CALL_OW 264
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: LD_INT 42
10100: PUSH
10101: LD_INT 24
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: IN
10109: IFFALSE 10130
// points := [ 25 , 5 , 3 ] ;
10111: LD_ADDR_VAR 0 9
10115: PUSH
10116: LD_INT 25
10118: PUSH
10119: LD_INT 5
10121: PUSH
10122: LD_INT 3
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10130: LD_VAR 0 6
10134: PPUSH
10135: CALL_OW 264
10139: PUSH
10140: LD_INT 4
10142: PUSH
10143: LD_INT 43
10145: PUSH
10146: LD_INT 25
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: IN
10154: IFFALSE 10175
// points := [ 40 , 15 , 5 ] ;
10156: LD_ADDR_VAR 0 9
10160: PUSH
10161: LD_INT 40
10163: PUSH
10164: LD_INT 15
10166: PUSH
10167: LD_INT 5
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10175: LD_VAR 0 6
10179: PPUSH
10180: CALL_OW 264
10184: PUSH
10185: LD_INT 3
10187: PUSH
10188: LD_INT 23
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: IN
10195: IFFALSE 10216
// points := [ 7 , 25 , 8 ] ;
10197: LD_ADDR_VAR 0 9
10201: PUSH
10202: LD_INT 7
10204: PUSH
10205: LD_INT 25
10207: PUSH
10208: LD_INT 8
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10216: LD_VAR 0 6
10220: PPUSH
10221: CALL_OW 264
10225: PUSH
10226: LD_INT 5
10228: PUSH
10229: LD_INT 27
10231: PUSH
10232: LD_INT 44
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: IN
10240: IFFALSE 10261
// points := [ 14 , 50 , 16 ] ;
10242: LD_ADDR_VAR 0 9
10246: PUSH
10247: LD_INT 14
10249: PUSH
10250: LD_INT 50
10252: PUSH
10253: LD_INT 16
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10261: LD_VAR 0 6
10265: PPUSH
10266: CALL_OW 264
10270: PUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 46
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: IN
10281: IFFALSE 10302
// points := [ 32 , 120 , 70 ] ;
10283: LD_ADDR_VAR 0 9
10287: PUSH
10288: LD_INT 32
10290: PUSH
10291: LD_INT 120
10293: PUSH
10294: LD_INT 70
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10302: LD_VAR 0 6
10306: PPUSH
10307: CALL_OW 264
10311: PUSH
10312: LD_INT 7
10314: PUSH
10315: LD_INT 28
10317: PUSH
10318: LD_INT 45
10320: PUSH
10321: LD_INT 92
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: IN
10330: IFFALSE 10351
// points := [ 35 , 20 , 45 ] ;
10332: LD_ADDR_VAR 0 9
10336: PUSH
10337: LD_INT 35
10339: PUSH
10340: LD_INT 20
10342: PUSH
10343: LD_INT 45
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10351: LD_VAR 0 6
10355: PPUSH
10356: CALL_OW 264
10360: PUSH
10361: LD_INT 47
10363: PUSH
10364: EMPTY
10365: LIST
10366: IN
10367: IFFALSE 10388
// points := [ 67 , 45 , 75 ] ;
10369: LD_ADDR_VAR 0 9
10373: PUSH
10374: LD_INT 67
10376: PUSH
10377: LD_INT 45
10379: PUSH
10380: LD_INT 75
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10388: LD_VAR 0 6
10392: PPUSH
10393: CALL_OW 264
10397: PUSH
10398: LD_INT 26
10400: PUSH
10401: EMPTY
10402: LIST
10403: IN
10404: IFFALSE 10425
// points := [ 120 , 30 , 80 ] ;
10406: LD_ADDR_VAR 0 9
10410: PUSH
10411: LD_INT 120
10413: PUSH
10414: LD_INT 30
10416: PUSH
10417: LD_INT 80
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10425: LD_VAR 0 6
10429: PPUSH
10430: CALL_OW 264
10434: PUSH
10435: LD_INT 22
10437: PUSH
10438: EMPTY
10439: LIST
10440: IN
10441: IFFALSE 10462
// points := [ 40 , 1 , 1 ] ;
10443: LD_ADDR_VAR 0 9
10447: PUSH
10448: LD_INT 40
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10462: LD_VAR 0 6
10466: PPUSH
10467: CALL_OW 264
10471: PUSH
10472: LD_INT 29
10474: PUSH
10475: EMPTY
10476: LIST
10477: IN
10478: IFFALSE 10499
// points := [ 70 , 200 , 400 ] ;
10480: LD_ADDR_VAR 0 9
10484: PUSH
10485: LD_INT 70
10487: PUSH
10488: LD_INT 200
10490: PUSH
10491: LD_INT 400
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10499: LD_VAR 0 6
10503: PPUSH
10504: CALL_OW 264
10508: PUSH
10509: LD_INT 14
10511: PUSH
10512: LD_INT 53
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: IN
10519: IFFALSE 10540
// points := [ 40 , 10 , 20 ] ;
10521: LD_ADDR_VAR 0 9
10525: PUSH
10526: LD_INT 40
10528: PUSH
10529: LD_INT 10
10531: PUSH
10532: LD_INT 20
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10540: LD_VAR 0 6
10544: PPUSH
10545: CALL_OW 264
10549: PUSH
10550: LD_INT 9
10552: PUSH
10553: EMPTY
10554: LIST
10555: IN
10556: IFFALSE 10577
// points := [ 5 , 70 , 20 ] ;
10558: LD_ADDR_VAR 0 9
10562: PUSH
10563: LD_INT 5
10565: PUSH
10566: LD_INT 70
10568: PUSH
10569: LD_INT 20
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10577: LD_VAR 0 6
10581: PPUSH
10582: CALL_OW 264
10586: PUSH
10587: LD_INT 10
10589: PUSH
10590: EMPTY
10591: LIST
10592: IN
10593: IFFALSE 10614
// points := [ 35 , 110 , 70 ] ;
10595: LD_ADDR_VAR 0 9
10599: PUSH
10600: LD_INT 35
10602: PUSH
10603: LD_INT 110
10605: PUSH
10606: LD_INT 70
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10614: LD_VAR 0 6
10618: PPUSH
10619: CALL_OW 265
10623: PUSH
10624: LD_INT 25
10626: EQUAL
10627: IFFALSE 10648
// points := [ 80 , 65 , 100 ] ;
10629: LD_ADDR_VAR 0 9
10633: PUSH
10634: LD_INT 80
10636: PUSH
10637: LD_INT 65
10639: PUSH
10640: LD_INT 100
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10648: LD_VAR 0 6
10652: PPUSH
10653: CALL_OW 263
10657: PUSH
10658: LD_INT 1
10660: EQUAL
10661: IFFALSE 10696
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10663: LD_ADDR_VAR 0 10
10667: PUSH
10668: LD_VAR 0 10
10672: PUSH
10673: LD_VAR 0 6
10677: PPUSH
10678: CALL_OW 311
10682: PPUSH
10683: LD_INT 3
10685: PPUSH
10686: CALL_OW 259
10690: PUSH
10691: LD_INT 4
10693: MUL
10694: MUL
10695: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10696: LD_VAR 0 6
10700: PPUSH
10701: CALL_OW 263
10705: PUSH
10706: LD_INT 2
10708: EQUAL
10709: IFFALSE 10760
// begin j := IsControledBy ( i ) ;
10711: LD_ADDR_VAR 0 7
10715: PUSH
10716: LD_VAR 0 6
10720: PPUSH
10721: CALL_OW 312
10725: ST_TO_ADDR
// if j then
10726: LD_VAR 0 7
10730: IFFALSE 10760
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10732: LD_ADDR_VAR 0 10
10736: PUSH
10737: LD_VAR 0 10
10741: PUSH
10742: LD_VAR 0 7
10746: PPUSH
10747: LD_INT 3
10749: PPUSH
10750: CALL_OW 259
10754: PUSH
10755: LD_INT 3
10757: MUL
10758: MUL
10759: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10760: LD_VAR 0 6
10764: PPUSH
10765: CALL_OW 264
10769: PUSH
10770: LD_INT 5
10772: PUSH
10773: LD_INT 6
10775: PUSH
10776: LD_INT 46
10778: PUSH
10779: LD_INT 44
10781: PUSH
10782: LD_INT 47
10784: PUSH
10785: LD_INT 45
10787: PUSH
10788: LD_INT 28
10790: PUSH
10791: LD_INT 7
10793: PUSH
10794: LD_INT 27
10796: PUSH
10797: LD_INT 29
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: IN
10812: IFFALSE 10832
10814: PUSH
10815: LD_VAR 0 1
10819: PPUSH
10820: LD_INT 52
10822: PPUSH
10823: CALL_OW 321
10827: PUSH
10828: LD_INT 2
10830: EQUAL
10831: AND
10832: IFFALSE 10849
// bpoints := bpoints * 1.2 ;
10834: LD_ADDR_VAR 0 10
10838: PUSH
10839: LD_VAR 0 10
10843: PUSH
10844: LD_REAL  1.20000000000000E+0000
10847: MUL
10848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10849: LD_VAR 0 6
10853: PPUSH
10854: CALL_OW 264
10858: PUSH
10859: LD_INT 6
10861: PUSH
10862: LD_INT 46
10864: PUSH
10865: LD_INT 47
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: IN
10873: IFFALSE 10890
// bpoints := bpoints * 1.2 ;
10875: LD_ADDR_VAR 0 10
10879: PUSH
10880: LD_VAR 0 10
10884: PUSH
10885: LD_REAL  1.20000000000000E+0000
10888: MUL
10889: ST_TO_ADDR
// end ; unit_building :
10890: GO 10904
10892: LD_INT 3
10894: DOUBLE
10895: EQUAL
10896: IFTRUE 10900
10898: GO 10903
10900: POP
// ; end ;
10901: GO 10904
10903: POP
// for j = 1 to 3 do
10904: LD_ADDR_VAR 0 7
10908: PUSH
10909: DOUBLE
10910: LD_INT 1
10912: DEC
10913: ST_TO_ADDR
10914: LD_INT 3
10916: PUSH
10917: FOR_TO
10918: IFFALSE 10971
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10920: LD_ADDR_VAR 0 5
10924: PUSH
10925: LD_VAR 0 5
10929: PPUSH
10930: LD_VAR 0 7
10934: PPUSH
10935: LD_VAR 0 5
10939: PUSH
10940: LD_VAR 0 7
10944: ARRAY
10945: PUSH
10946: LD_VAR 0 9
10950: PUSH
10951: LD_VAR 0 7
10955: ARRAY
10956: PUSH
10957: LD_VAR 0 10
10961: MUL
10962: PLUS
10963: PPUSH
10964: CALL_OW 1
10968: ST_TO_ADDR
10969: GO 10917
10971: POP
10972: POP
// end ;
10973: GO 9446
10975: POP
10976: POP
// result := Replace ( result , 4 , tmp ) ;
10977: LD_ADDR_VAR 0 5
10981: PUSH
10982: LD_VAR 0 5
10986: PPUSH
10987: LD_INT 4
10989: PPUSH
10990: LD_VAR 0 8
10994: PPUSH
10995: CALL_OW 1
10999: ST_TO_ADDR
// end ;
11000: LD_VAR 0 5
11004: RET
// export function DangerAtRange ( unit , range ) ; begin
11005: LD_INT 0
11007: PPUSH
// if not unit then
11008: LD_VAR 0 1
11012: NOT
11013: IFFALSE 11017
// exit ;
11015: GO 11062
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11017: LD_ADDR_VAR 0 3
11021: PUSH
11022: LD_VAR 0 1
11026: PPUSH
11027: CALL_OW 255
11031: PPUSH
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 250
11041: PPUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 251
11051: PPUSH
11052: LD_VAR 0 2
11056: PPUSH
11057: CALL 9296 0 4
11061: ST_TO_ADDR
// end ;
11062: LD_VAR 0 3
11066: RET
// export function DangerInArea ( side , area ) ; begin
11067: LD_INT 0
11069: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11070: LD_ADDR_VAR 0 3
11074: PUSH
11075: LD_VAR 0 2
11079: PPUSH
11080: LD_INT 81
11082: PUSH
11083: LD_VAR 0 1
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PPUSH
11092: CALL_OW 70
11096: ST_TO_ADDR
// end ;
11097: LD_VAR 0 3
11101: RET
// export function IsExtension ( b ) ; begin
11102: LD_INT 0
11104: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11105: LD_ADDR_VAR 0 2
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: LD_INT 23
11117: PUSH
11118: LD_INT 20
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 17
11126: PUSH
11127: LD_INT 24
11129: PUSH
11130: LD_INT 21
11132: PUSH
11133: LD_INT 19
11135: PUSH
11136: LD_INT 16
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 18
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: IN
11157: ST_TO_ADDR
// end ;
11158: LD_VAR 0 2
11162: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
11167: PPUSH
// result := [ ] ;
11168: LD_ADDR_VAR 0 4
11172: PUSH
11173: EMPTY
11174: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11175: LD_ADDR_VAR 0 5
11179: PUSH
11180: LD_VAR 0 2
11184: PPUSH
11185: LD_INT 21
11187: PUSH
11188: LD_INT 3
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PPUSH
11195: CALL_OW 70
11199: ST_TO_ADDR
// if not tmp then
11200: LD_VAR 0 5
11204: NOT
11205: IFFALSE 11209
// exit ;
11207: GO 11273
// if checkLink then
11209: LD_VAR 0 3
11213: IFFALSE 11263
// begin for i in tmp do
11215: LD_ADDR_VAR 0 6
11219: PUSH
11220: LD_VAR 0 5
11224: PUSH
11225: FOR_IN
11226: IFFALSE 11261
// if GetBase ( i ) <> base then
11228: LD_VAR 0 6
11232: PPUSH
11233: CALL_OW 274
11237: PUSH
11238: LD_VAR 0 1
11242: NONEQUAL
11243: IFFALSE 11259
// ComLinkToBase ( base , i ) ;
11245: LD_VAR 0 1
11249: PPUSH
11250: LD_VAR 0 6
11254: PPUSH
11255: CALL_OW 169
11259: GO 11225
11261: POP
11262: POP
// end ; result := tmp ;
11263: LD_ADDR_VAR 0 4
11267: PUSH
11268: LD_VAR 0 5
11272: ST_TO_ADDR
// end ;
11273: LD_VAR 0 4
11277: RET
// export function ComComplete ( units , b ) ; var i ; begin
11278: LD_INT 0
11280: PPUSH
11281: PPUSH
// if not units then
11282: LD_VAR 0 1
11286: NOT
11287: IFFALSE 11291
// exit ;
11289: GO 11381
// for i in units do
11291: LD_ADDR_VAR 0 4
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: FOR_IN
11302: IFFALSE 11379
// if BuildingStatus ( b ) = bs_build then
11304: LD_VAR 0 2
11308: PPUSH
11309: CALL_OW 461
11313: PUSH
11314: LD_INT 1
11316: EQUAL
11317: IFFALSE 11377
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11319: LD_VAR 0 4
11323: PPUSH
11324: LD_STRING h
11326: PUSH
11327: LD_VAR 0 2
11331: PPUSH
11332: CALL_OW 250
11336: PUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: CALL_OW 251
11346: PUSH
11347: LD_VAR 0 2
11351: PUSH
11352: LD_INT 0
11354: PUSH
11355: LD_INT 0
11357: PUSH
11358: LD_INT 0
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: PPUSH
11373: CALL_OW 446
11377: GO 11301
11379: POP
11380: POP
// end ;
11381: LD_VAR 0 3
11385: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11394: LD_VAR 0 1
11398: NOT
11399: IFTRUE 11416
11401: PUSH
11402: LD_VAR 0 1
11406: PPUSH
11407: CALL_OW 263
11411: PUSH
11412: LD_INT 2
11414: NONEQUAL
11415: OR
11416: IFFALSE 11420
// exit ;
11418: GO 11736
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11420: LD_ADDR_VAR 0 6
11424: PUSH
11425: LD_INT 22
11427: PUSH
11428: LD_VAR 0 1
11432: PPUSH
11433: CALL_OW 255
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 2
11444: PUSH
11445: LD_INT 30
11447: PUSH
11448: LD_INT 36
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 34
11457: PUSH
11458: LD_INT 31
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 69
11478: ST_TO_ADDR
// if not tmp then
11479: LD_VAR 0 6
11483: NOT
11484: IFFALSE 11488
// exit ;
11486: GO 11736
// result := [ ] ;
11488: LD_ADDR_VAR 0 2
11492: PUSH
11493: EMPTY
11494: ST_TO_ADDR
// for i in tmp do
11495: LD_ADDR_VAR 0 3
11499: PUSH
11500: LD_VAR 0 6
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11577
// begin t := UnitsInside ( i ) ;
11508: LD_ADDR_VAR 0 4
11512: PUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: CALL_OW 313
11522: ST_TO_ADDR
// if t then
11523: LD_VAR 0 4
11527: IFFALSE 11575
// for j in t do
11529: LD_ADDR_VAR 0 7
11533: PUSH
11534: LD_VAR 0 4
11538: PUSH
11539: FOR_IN
11540: IFFALSE 11573
// result := Replace ( result , result + 1 , j ) ;
11542: LD_ADDR_VAR 0 2
11546: PUSH
11547: LD_VAR 0 2
11551: PPUSH
11552: LD_VAR 0 2
11556: PUSH
11557: LD_INT 1
11559: PLUS
11560: PPUSH
11561: LD_VAR 0 7
11565: PPUSH
11566: CALL_OW 1
11570: ST_TO_ADDR
11571: GO 11539
11573: POP
11574: POP
// end ;
11575: GO 11505
11577: POP
11578: POP
// if not result then
11579: LD_VAR 0 2
11583: NOT
11584: IFFALSE 11588
// exit ;
11586: GO 11736
// mech := result [ 1 ] ;
11588: LD_ADDR_VAR 0 5
11592: PUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_INT 1
11600: ARRAY
11601: ST_TO_ADDR
// if result > 1 then
11602: LD_VAR 0 2
11606: PUSH
11607: LD_INT 1
11609: GREATER
11610: IFFALSE 11722
// begin for i = 2 to result do
11612: LD_ADDR_VAR 0 3
11616: PUSH
11617: DOUBLE
11618: LD_INT 2
11620: DEC
11621: ST_TO_ADDR
11622: LD_VAR 0 2
11626: PUSH
11627: FOR_TO
11628: IFFALSE 11720
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11630: LD_ADDR_VAR 0 4
11634: PUSH
11635: LD_VAR 0 2
11639: PUSH
11640: LD_VAR 0 3
11644: ARRAY
11645: PPUSH
11646: LD_INT 3
11648: PPUSH
11649: CALL_OW 259
11653: PUSH
11654: LD_VAR 0 2
11658: PUSH
11659: LD_VAR 0 3
11663: ARRAY
11664: PPUSH
11665: CALL_OW 432
11669: MINUS
11670: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11671: LD_VAR 0 4
11675: PUSH
11676: LD_VAR 0 5
11680: PPUSH
11681: LD_INT 3
11683: PPUSH
11684: CALL_OW 259
11688: PUSH
11689: LD_VAR 0 5
11693: PPUSH
11694: CALL_OW 432
11698: MINUS
11699: GREATEREQUAL
11700: IFFALSE 11718
// mech := result [ i ] ;
11702: LD_ADDR_VAR 0 5
11706: PUSH
11707: LD_VAR 0 2
11711: PUSH
11712: LD_VAR 0 3
11716: ARRAY
11717: ST_TO_ADDR
// end ;
11718: GO 11627
11720: POP
11721: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11722: LD_VAR 0 1
11726: PPUSH
11727: LD_VAR 0 5
11731: PPUSH
11732: CALL_OW 135
// end ;
11736: LD_VAR 0 2
11740: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11741: LD_INT 0
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
// result := [ ] ;
11756: LD_ADDR_VAR 0 7
11760: PUSH
11761: EMPTY
11762: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11763: LD_VAR 0 1
11767: PPUSH
11768: CALL_OW 266
11772: PUSH
11773: LD_INT 0
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: IN
11783: NOT
11784: IFFALSE 11788
// exit ;
11786: GO 13428
// if name then
11788: LD_VAR 0 3
11792: IFFALSE 11808
// SetBName ( base_dep , name ) ;
11794: LD_VAR 0 1
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: CALL_OW 500
// base := GetBase ( base_dep ) ;
11808: LD_ADDR_VAR 0 15
11812: PUSH
11813: LD_VAR 0 1
11817: PPUSH
11818: CALL_OW 274
11822: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11823: LD_ADDR_VAR 0 16
11827: PUSH
11828: LD_VAR 0 1
11832: PPUSH
11833: CALL_OW 255
11837: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11838: LD_ADDR_VAR 0 17
11842: PUSH
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 248
11852: ST_TO_ADDR
// if sources then
11853: LD_VAR 0 5
11857: IFFALSE 11904
// for i = 1 to 3 do
11859: LD_ADDR_VAR 0 8
11863: PUSH
11864: DOUBLE
11865: LD_INT 1
11867: DEC
11868: ST_TO_ADDR
11869: LD_INT 3
11871: PUSH
11872: FOR_TO
11873: IFFALSE 11902
// AddResourceType ( base , i , sources [ i ] ) ;
11875: LD_VAR 0 15
11879: PPUSH
11880: LD_VAR 0 8
11884: PPUSH
11885: LD_VAR 0 5
11889: PUSH
11890: LD_VAR 0 8
11894: ARRAY
11895: PPUSH
11896: CALL_OW 276
11900: GO 11872
11902: POP
11903: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11904: LD_ADDR_VAR 0 18
11908: PUSH
11909: LD_VAR 0 15
11913: PPUSH
11914: LD_VAR 0 2
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL 11163 0 3
11926: ST_TO_ADDR
// InitHc ;
11927: CALL_OW 19
// InitUc ;
11931: CALL_OW 18
// uc_side := side ;
11935: LD_ADDR_OWVAR 20
11939: PUSH
11940: LD_VAR 0 16
11944: ST_TO_ADDR
// uc_nation := nation ;
11945: LD_ADDR_OWVAR 21
11949: PUSH
11950: LD_VAR 0 17
11954: ST_TO_ADDR
// if buildings then
11955: LD_VAR 0 18
11959: IFFALSE 13287
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11961: LD_ADDR_VAR 0 19
11965: PUSH
11966: LD_VAR 0 18
11970: PPUSH
11971: LD_INT 2
11973: PUSH
11974: LD_INT 30
11976: PUSH
11977: LD_INT 29
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 30
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 72
12003: ST_TO_ADDR
// if tmp then
12004: LD_VAR 0 19
12008: IFFALSE 12056
// for i in tmp do
12010: LD_ADDR_VAR 0 8
12014: PUSH
12015: LD_VAR 0 19
12019: PUSH
12020: FOR_IN
12021: IFFALSE 12054
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12023: LD_VAR 0 8
12027: PPUSH
12028: CALL_OW 250
12032: PPUSH
12033: LD_VAR 0 8
12037: PPUSH
12038: CALL_OW 251
12042: PPUSH
12043: LD_VAR 0 16
12047: PPUSH
12048: CALL_OW 441
12052: GO 12020
12054: POP
12055: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12056: LD_VAR 0 18
12060: PPUSH
12061: LD_INT 2
12063: PUSH
12064: LD_INT 30
12066: PUSH
12067: LD_INT 32
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 30
12076: PUSH
12077: LD_INT 33
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 72
12093: IFFALSE 12181
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_VAR 0 18
12104: PPUSH
12105: LD_INT 2
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 32
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 33
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PPUSH
12133: CALL_OW 72
12137: PUSH
12138: FOR_IN
12139: IFFALSE 12179
// begin if not GetBWeapon ( i ) then
12141: LD_VAR 0 8
12145: PPUSH
12146: CALL_OW 269
12150: NOT
12151: IFFALSE 12177
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12153: LD_VAR 0 8
12157: PPUSH
12158: LD_VAR 0 8
12162: PPUSH
12163: LD_VAR 0 2
12167: PPUSH
12168: CALL 13433 0 2
12172: PPUSH
12173: CALL_OW 431
// end ;
12177: GO 12138
12179: POP
12180: POP
// end ; for i = 1 to personel do
12181: LD_ADDR_VAR 0 8
12185: PUSH
12186: DOUBLE
12187: LD_INT 1
12189: DEC
12190: ST_TO_ADDR
12191: LD_VAR 0 6
12195: PUSH
12196: FOR_TO
12197: IFFALSE 13267
// begin if i > 4 then
12199: LD_VAR 0 8
12203: PUSH
12204: LD_INT 4
12206: GREATER
12207: IFFALSE 12211
// break ;
12209: GO 13267
// case i of 1 :
12211: LD_VAR 0 8
12215: PUSH
12216: LD_INT 1
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12304
12224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12225: LD_ADDR_VAR 0 12
12229: PUSH
12230: LD_VAR 0 18
12234: PPUSH
12235: LD_INT 22
12237: PUSH
12238: LD_VAR 0 16
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 58
12249: PUSH
12250: EMPTY
12251: LIST
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 30
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 30
12268: PUSH
12269: LD_INT 4
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: LD_INT 5
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 72
12301: ST_TO_ADDR
12302: GO 12526
12304: LD_INT 2
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12374
12312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12313: LD_ADDR_VAR 0 12
12317: PUSH
12318: LD_VAR 0 18
12322: PPUSH
12323: LD_INT 22
12325: PUSH
12326: LD_VAR 0 16
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 2
12337: PUSH
12338: LD_INT 30
12340: PUSH
12341: LD_INT 0
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 30
12350: PUSH
12351: LD_INT 1
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 72
12371: ST_TO_ADDR
12372: GO 12526
12374: LD_INT 3
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12444
12382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12383: LD_ADDR_VAR 0 12
12387: PUSH
12388: LD_VAR 0 18
12392: PPUSH
12393: LD_INT 22
12395: PUSH
12396: LD_VAR 0 16
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 3
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PPUSH
12437: CALL_OW 72
12441: ST_TO_ADDR
12442: GO 12526
12444: LD_INT 4
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12525
12452: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12453: LD_ADDR_VAR 0 12
12457: PUSH
12458: LD_VAR 0 18
12462: PPUSH
12463: LD_INT 22
12465: PUSH
12466: LD_VAR 0 16
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 2
12477: PUSH
12478: LD_INT 30
12480: PUSH
12481: LD_INT 6
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 30
12490: PUSH
12491: LD_INT 7
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 30
12500: PUSH
12501: LD_INT 8
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 72
12522: ST_TO_ADDR
12523: GO 12526
12525: POP
// if i = 1 then
12526: LD_VAR 0 8
12530: PUSH
12531: LD_INT 1
12533: EQUAL
12534: IFFALSE 12645
// begin tmp := [ ] ;
12536: LD_ADDR_VAR 0 19
12540: PUSH
12541: EMPTY
12542: ST_TO_ADDR
// for j in f do
12543: LD_ADDR_VAR 0 9
12547: PUSH
12548: LD_VAR 0 12
12552: PUSH
12553: FOR_IN
12554: IFFALSE 12627
// if GetBType ( j ) = b_bunker then
12556: LD_VAR 0 9
12560: PPUSH
12561: CALL_OW 266
12565: PUSH
12566: LD_INT 32
12568: EQUAL
12569: IFFALSE 12596
// tmp := Insert ( tmp , 1 , j ) else
12571: LD_ADDR_VAR 0 19
12575: PUSH
12576: LD_VAR 0 19
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: LD_VAR 0 9
12588: PPUSH
12589: CALL_OW 2
12593: ST_TO_ADDR
12594: GO 12625
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12596: LD_ADDR_VAR 0 19
12600: PUSH
12601: LD_VAR 0 19
12605: PPUSH
12606: LD_VAR 0 19
12610: PUSH
12611: LD_INT 1
12613: PLUS
12614: PPUSH
12615: LD_VAR 0 9
12619: PPUSH
12620: CALL_OW 2
12624: ST_TO_ADDR
12625: GO 12553
12627: POP
12628: POP
// if tmp then
12629: LD_VAR 0 19
12633: IFFALSE 12645
// f := tmp ;
12635: LD_ADDR_VAR 0 12
12639: PUSH
12640: LD_VAR 0 19
12644: ST_TO_ADDR
// end ; x := personel [ i ] ;
12645: LD_ADDR_VAR 0 13
12649: PUSH
12650: LD_VAR 0 6
12654: PUSH
12655: LD_VAR 0 8
12659: ARRAY
12660: ST_TO_ADDR
// if x = - 1 then
12661: LD_VAR 0 13
12665: PUSH
12666: LD_INT 1
12668: NEG
12669: EQUAL
12670: IFFALSE 12881
// begin for j in f do
12672: LD_ADDR_VAR 0 9
12676: PUSH
12677: LD_VAR 0 12
12681: PUSH
12682: FOR_IN
12683: IFFALSE 12877
// repeat InitHc ;
12685: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12689: LD_VAR 0 9
12693: PPUSH
12694: CALL_OW 266
12698: PUSH
12699: LD_INT 5
12701: EQUAL
12702: IFFALSE 12772
// begin if UnitsInside ( j ) < 3 then
12704: LD_VAR 0 9
12708: PPUSH
12709: CALL_OW 313
12713: PUSH
12714: LD_INT 3
12716: LESS
12717: IFFALSE 12753
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12719: LD_INT 0
12721: PPUSH
12722: LD_INT 5
12724: PUSH
12725: LD_INT 8
12727: PUSH
12728: LD_INT 9
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: PUSH
12736: LD_VAR 0 17
12740: ARRAY
12741: PPUSH
12742: LD_VAR 0 4
12746: PPUSH
12747: CALL_OW 380
12751: GO 12770
// PrepareHuman ( false , i , skill ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_VAR 0 8
12760: PPUSH
12761: LD_VAR 0 4
12765: PPUSH
12766: CALL_OW 380
// end else
12770: GO 12789
// PrepareHuman ( false , i , skill ) ;
12772: LD_INT 0
12774: PPUSH
12775: LD_VAR 0 8
12779: PPUSH
12780: LD_VAR 0 4
12784: PPUSH
12785: CALL_OW 380
// un := CreateHuman ;
12789: LD_ADDR_VAR 0 14
12793: PUSH
12794: CALL_OW 44
12798: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12799: LD_ADDR_VAR 0 7
12803: PUSH
12804: LD_VAR 0 7
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: LD_VAR 0 14
12816: PPUSH
12817: CALL_OW 2
12821: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12822: LD_VAR 0 14
12826: PPUSH
12827: LD_VAR 0 9
12831: PPUSH
12832: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12836: LD_VAR 0 9
12840: PPUSH
12841: CALL_OW 313
12845: PUSH
12846: LD_INT 6
12848: EQUAL
12849: IFTRUE 12873
12851: PUSH
12852: LD_VAR 0 9
12856: PPUSH
12857: CALL_OW 266
12861: PUSH
12862: LD_INT 32
12864: PUSH
12865: LD_INT 31
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: IN
12872: OR
12873: IFFALSE 12685
12875: GO 12682
12877: POP
12878: POP
// end else
12879: GO 13265
// for j = 1 to x do
12881: LD_ADDR_VAR 0 9
12885: PUSH
12886: DOUBLE
12887: LD_INT 1
12889: DEC
12890: ST_TO_ADDR
12891: LD_VAR 0 13
12895: PUSH
12896: FOR_TO
12897: IFFALSE 13263
// begin InitHc ;
12899: CALL_OW 19
// if not f then
12903: LD_VAR 0 12
12907: NOT
12908: IFFALSE 12997
// begin PrepareHuman ( false , i , skill ) ;
12910: LD_INT 0
12912: PPUSH
12913: LD_VAR 0 8
12917: PPUSH
12918: LD_VAR 0 4
12922: PPUSH
12923: CALL_OW 380
// un := CreateHuman ;
12927: LD_ADDR_VAR 0 14
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12937: LD_ADDR_VAR 0 7
12941: PUSH
12942: LD_VAR 0 7
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: LD_VAR 0 14
12954: PPUSH
12955: CALL_OW 2
12959: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12960: LD_VAR 0 14
12964: PPUSH
12965: LD_VAR 0 1
12969: PPUSH
12970: CALL_OW 250
12974: PPUSH
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 251
12984: PPUSH
12985: LD_INT 10
12987: PPUSH
12988: LD_INT 0
12990: PPUSH
12991: CALL_OW 50
// continue ;
12995: GO 12896
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12997: LD_VAR 0 12
13001: PUSH
13002: LD_INT 1
13004: ARRAY
13005: PPUSH
13006: CALL_OW 313
13010: IFFALSE 13038
13012: PUSH
13013: LD_VAR 0 12
13017: PUSH
13018: LD_INT 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 266
13026: PUSH
13027: LD_INT 32
13029: PUSH
13030: LD_INT 31
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: IN
13037: AND
13038: IFTRUE 13059
13040: PUSH
13041: LD_VAR 0 12
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: CALL_OW 313
13054: PUSH
13055: LD_INT 6
13057: EQUAL
13058: OR
13059: IFFALSE 13079
// f := Delete ( f , 1 ) ;
13061: LD_ADDR_VAR 0 12
13065: PUSH
13066: LD_VAR 0 12
13070: PPUSH
13071: LD_INT 1
13073: PPUSH
13074: CALL_OW 3
13078: ST_TO_ADDR
// if not f then
13079: LD_VAR 0 12
13083: NOT
13084: IFFALSE 13102
// begin x := x + 2 ;
13086: LD_ADDR_VAR 0 13
13090: PUSH
13091: LD_VAR 0 13
13095: PUSH
13096: LD_INT 2
13098: PLUS
13099: ST_TO_ADDR
// continue ;
13100: GO 12896
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13102: LD_VAR 0 12
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PPUSH
13111: CALL_OW 266
13115: PUSH
13116: LD_INT 5
13118: EQUAL
13119: IFFALSE 13193
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13121: LD_VAR 0 12
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 313
13134: PUSH
13135: LD_INT 3
13137: LESS
13138: IFFALSE 13174
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13140: LD_INT 0
13142: PPUSH
13143: LD_INT 5
13145: PUSH
13146: LD_INT 8
13148: PUSH
13149: LD_INT 9
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_VAR 0 17
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 4
13167: PPUSH
13168: CALL_OW 380
13172: GO 13191
// PrepareHuman ( false , i , skill ) ;
13174: LD_INT 0
13176: PPUSH
13177: LD_VAR 0 8
13181: PPUSH
13182: LD_VAR 0 4
13186: PPUSH
13187: CALL_OW 380
// end else
13191: GO 13210
// PrepareHuman ( false , i , skill ) ;
13193: LD_INT 0
13195: PPUSH
13196: LD_VAR 0 8
13200: PPUSH
13201: LD_VAR 0 4
13205: PPUSH
13206: CALL_OW 380
// un := CreateHuman ;
13210: LD_ADDR_VAR 0 14
13214: PUSH
13215: CALL_OW 44
13219: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13220: LD_ADDR_VAR 0 7
13224: PUSH
13225: LD_VAR 0 7
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: LD_VAR 0 14
13237: PPUSH
13238: CALL_OW 2
13242: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13243: LD_VAR 0 14
13247: PPUSH
13248: LD_VAR 0 12
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 52
// end ;
13261: GO 12896
13263: POP
13264: POP
// end ;
13265: GO 12196
13267: POP
13268: POP
// result := result ^ buildings ;
13269: LD_ADDR_VAR 0 7
13273: PUSH
13274: LD_VAR 0 7
13278: PUSH
13279: LD_VAR 0 18
13283: ADD
13284: ST_TO_ADDR
// end else
13285: GO 13428
// begin for i = 1 to personel do
13287: LD_ADDR_VAR 0 8
13291: PUSH
13292: DOUBLE
13293: LD_INT 1
13295: DEC
13296: ST_TO_ADDR
13297: LD_VAR 0 6
13301: PUSH
13302: FOR_TO
13303: IFFALSE 13426
// begin if i > 4 then
13305: LD_VAR 0 8
13309: PUSH
13310: LD_INT 4
13312: GREATER
13313: IFFALSE 13317
// break ;
13315: GO 13426
// x := personel [ i ] ;
13317: LD_ADDR_VAR 0 13
13321: PUSH
13322: LD_VAR 0 6
13326: PUSH
13327: LD_VAR 0 8
13331: ARRAY
13332: ST_TO_ADDR
// if x = - 1 then
13333: LD_VAR 0 13
13337: PUSH
13338: LD_INT 1
13340: NEG
13341: EQUAL
13342: IFFALSE 13346
// continue ;
13344: GO 13302
// PrepareHuman ( false , i , skill ) ;
13346: LD_INT 0
13348: PPUSH
13349: LD_VAR 0 8
13353: PPUSH
13354: LD_VAR 0 4
13358: PPUSH
13359: CALL_OW 380
// un := CreateHuman ;
13363: LD_ADDR_VAR 0 14
13367: PUSH
13368: CALL_OW 44
13372: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13373: LD_VAR 0 14
13377: PPUSH
13378: LD_VAR 0 1
13382: PPUSH
13383: CALL_OW 250
13387: PPUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 251
13397: PPUSH
13398: LD_INT 10
13400: PPUSH
13401: LD_INT 0
13403: PPUSH
13404: CALL_OW 50
// result := result ^ un ;
13408: LD_ADDR_VAR 0 7
13412: PUSH
13413: LD_VAR 0 7
13417: PUSH
13418: LD_VAR 0 14
13422: ADD
13423: ST_TO_ADDR
// end ;
13424: GO 13302
13426: POP
13427: POP
// end ; end ;
13428: LD_VAR 0 7
13432: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
// result := false ;
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_INT 0
13458: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13459: LD_VAR 0 1
13463: NOT
13464: IFTRUE 13489
13466: PUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 266
13476: PUSH
13477: LD_INT 32
13479: PUSH
13480: LD_INT 33
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: IN
13487: NOT
13488: OR
13489: IFFALSE 13493
// exit ;
13491: GO 14628
// nat := GetNation ( tower ) ;
13493: LD_ADDR_VAR 0 12
13497: PUSH
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 248
13507: ST_TO_ADDR
// side := GetSide ( tower ) ;
13508: LD_ADDR_VAR 0 16
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 255
13522: ST_TO_ADDR
// x := GetX ( tower ) ;
13523: LD_ADDR_VAR 0 10
13527: PUSH
13528: LD_VAR 0 1
13532: PPUSH
13533: CALL_OW 250
13537: ST_TO_ADDR
// y := GetY ( tower ) ;
13538: LD_ADDR_VAR 0 11
13542: PUSH
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 251
13552: ST_TO_ADDR
// if not x or not y then
13553: LD_VAR 0 10
13557: NOT
13558: IFTRUE 13567
13560: PUSH
13561: LD_VAR 0 11
13565: NOT
13566: OR
13567: IFFALSE 13571
// exit ;
13569: GO 14628
// weapon := 0 ;
13571: LD_ADDR_VAR 0 18
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// fac_list := [ ] ;
13579: LD_ADDR_VAR 0 17
13583: PUSH
13584: EMPTY
13585: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13586: LD_ADDR_VAR 0 6
13590: PUSH
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 274
13600: PPUSH
13601: LD_VAR 0 2
13605: PPUSH
13606: LD_INT 0
13608: PPUSH
13609: CALL 11163 0 3
13613: PPUSH
13614: LD_INT 30
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 72
13628: ST_TO_ADDR
// if not factories then
13629: LD_VAR 0 6
13633: NOT
13634: IFFALSE 13638
// exit ;
13636: GO 14628
// for i in factories do
13638: LD_ADDR_VAR 0 8
13642: PUSH
13643: LD_VAR 0 6
13647: PUSH
13648: FOR_IN
13649: IFFALSE 13674
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13651: LD_ADDR_VAR 0 17
13655: PUSH
13656: LD_VAR 0 17
13660: PUSH
13661: LD_VAR 0 8
13665: PPUSH
13666: CALL_OW 478
13670: UNION
13671: ST_TO_ADDR
13672: GO 13648
13674: POP
13675: POP
// if not fac_list then
13676: LD_VAR 0 17
13680: NOT
13681: IFFALSE 13685
// exit ;
13683: GO 14628
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13685: LD_ADDR_VAR 0 5
13689: PUSH
13690: LD_INT 4
13692: PUSH
13693: LD_INT 5
13695: PUSH
13696: LD_INT 9
13698: PUSH
13699: LD_INT 10
13701: PUSH
13702: LD_INT 6
13704: PUSH
13705: LD_INT 7
13707: PUSH
13708: LD_INT 11
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 27
13722: PUSH
13723: LD_INT 28
13725: PUSH
13726: LD_INT 26
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 43
13740: PUSH
13741: LD_INT 44
13743: PUSH
13744: LD_INT 46
13746: PUSH
13747: LD_INT 45
13749: PUSH
13750: LD_INT 47
13752: PUSH
13753: LD_INT 49
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_VAR 0 12
13773: ARRAY
13774: ST_TO_ADDR
// list := list isect fac_list ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: LD_VAR 0 5
13784: PUSH
13785: LD_VAR 0 17
13789: ISECT
13790: ST_TO_ADDR
// if not list then
13791: LD_VAR 0 5
13795: NOT
13796: IFFALSE 13800
// exit ;
13798: GO 14628
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13800: LD_VAR 0 12
13804: PUSH
13805: LD_INT 3
13807: EQUAL
13808: IFFALSE 13820
13810: PUSH
13811: LD_INT 49
13813: PUSH
13814: LD_VAR 0 5
13818: IN
13819: AND
13820: IFFALSE 13840
13822: PUSH
13823: LD_INT 31
13825: PPUSH
13826: LD_VAR 0 16
13830: PPUSH
13831: CALL_OW 321
13835: PUSH
13836: LD_INT 2
13838: EQUAL
13839: AND
13840: IFFALSE 13900
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13842: LD_INT 22
13844: PUSH
13845: LD_VAR 0 16
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 35
13856: PUSH
13857: LD_INT 49
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 91
13866: PUSH
13867: LD_VAR 0 1
13871: PUSH
13872: LD_INT 10
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: NOT
13890: IFFALSE 13900
// weapon := ru_time_lapser ;
13892: LD_ADDR_VAR 0 18
13896: PUSH
13897: LD_INT 49
13899: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13900: LD_VAR 0 12
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: IN
13915: IFFALSE 13939
13917: PUSH
13918: LD_INT 11
13920: PUSH
13921: LD_VAR 0 5
13925: IN
13926: IFTRUE 13938
13928: PUSH
13929: LD_INT 30
13931: PUSH
13932: LD_VAR 0 5
13936: IN
13937: OR
13938: AND
13939: IFFALSE 13959
13941: PUSH
13942: LD_INT 6
13944: PPUSH
13945: LD_VAR 0 16
13949: PPUSH
13950: CALL_OW 321
13954: PUSH
13955: LD_INT 2
13957: EQUAL
13958: AND
13959: IFFALSE 14126
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13961: LD_INT 22
13963: PUSH
13964: LD_VAR 0 16
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 2
13975: PUSH
13976: LD_INT 35
13978: PUSH
13979: LD_INT 11
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 35
13988: PUSH
13989: LD_INT 30
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 91
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_INT 18
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: NOT
14027: IFFALSE 14103
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_VAR 0 16
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: LD_INT 30
14047: PUSH
14048: LD_INT 32
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 30
14057: PUSH
14058: LD_INT 33
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 91
14072: PUSH
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 12
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: PUSH
14099: LD_INT 2
14101: GREATER
14102: AND
14103: IFFALSE 14126
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14105: LD_ADDR_VAR 0 18
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_VAR 0 12
14124: ARRAY
14125: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14126: LD_VAR 0 18
14130: NOT
14131: IFFALSE 14151
14133: PUSH
14134: LD_INT 40
14136: PPUSH
14137: LD_VAR 0 16
14141: PPUSH
14142: CALL_OW 321
14146: PUSH
14147: LD_INT 2
14149: EQUAL
14150: AND
14151: IFFALSE 14187
14153: PUSH
14154: LD_INT 7
14156: PUSH
14157: LD_VAR 0 5
14161: IN
14162: IFTRUE 14174
14164: PUSH
14165: LD_INT 28
14167: PUSH
14168: LD_VAR 0 5
14172: IN
14173: OR
14174: IFTRUE 14186
14176: PUSH
14177: LD_INT 45
14179: PUSH
14180: LD_VAR 0 5
14184: IN
14185: OR
14186: AND
14187: IFFALSE 14441
// begin hex := GetHexInfo ( x , y ) ;
14189: LD_ADDR_VAR 0 4
14193: PUSH
14194: LD_VAR 0 10
14198: PPUSH
14199: LD_VAR 0 11
14203: PPUSH
14204: CALL_OW 546
14208: ST_TO_ADDR
// if hex [ 1 ] then
14209: LD_VAR 0 4
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: IFFALSE 14221
// exit ;
14219: GO 14628
// height := hex [ 2 ] ;
14221: LD_ADDR_VAR 0 15
14225: PUSH
14226: LD_VAR 0 4
14230: PUSH
14231: LD_INT 2
14233: ARRAY
14234: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14235: LD_ADDR_VAR 0 14
14239: PUSH
14240: LD_INT 0
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: LD_INT 5
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: ST_TO_ADDR
// for i in tmp do
14258: LD_ADDR_VAR 0 8
14262: PUSH
14263: LD_VAR 0 14
14267: PUSH
14268: FOR_IN
14269: IFFALSE 14439
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14271: LD_ADDR_VAR 0 9
14275: PUSH
14276: LD_VAR 0 10
14280: PPUSH
14281: LD_VAR 0 8
14285: PPUSH
14286: LD_INT 5
14288: PPUSH
14289: CALL_OW 272
14293: PUSH
14294: LD_VAR 0 11
14298: PPUSH
14299: LD_VAR 0 8
14303: PPUSH
14304: LD_INT 5
14306: PPUSH
14307: CALL_OW 273
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14316: LD_VAR 0 9
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: LD_VAR 0 9
14329: PUSH
14330: LD_INT 2
14332: ARRAY
14333: PPUSH
14334: CALL_OW 488
14338: IFFALSE 14437
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14340: LD_ADDR_VAR 0 4
14344: PUSH
14345: LD_VAR 0 9
14349: PUSH
14350: LD_INT 1
14352: ARRAY
14353: PPUSH
14354: LD_VAR 0 9
14358: PUSH
14359: LD_INT 2
14361: ARRAY
14362: PPUSH
14363: CALL_OW 546
14367: ST_TO_ADDR
// if hex [ 1 ] then
14368: LD_VAR 0 4
14372: PUSH
14373: LD_INT 1
14375: ARRAY
14376: IFFALSE 14380
// continue ;
14378: GO 14268
// h := hex [ 2 ] ;
14380: LD_ADDR_VAR 0 13
14384: PUSH
14385: LD_VAR 0 4
14389: PUSH
14390: LD_INT 2
14392: ARRAY
14393: ST_TO_ADDR
// if h + 7 < height then
14394: LD_VAR 0 13
14398: PUSH
14399: LD_INT 7
14401: PLUS
14402: PUSH
14403: LD_VAR 0 15
14407: LESS
14408: IFFALSE 14437
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14410: LD_ADDR_VAR 0 18
14414: PUSH
14415: LD_INT 7
14417: PUSH
14418: LD_INT 28
14420: PUSH
14421: LD_INT 45
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: LD_VAR 0 12
14433: ARRAY
14434: ST_TO_ADDR
// break ;
14435: GO 14439
// end ; end ; end ;
14437: GO 14268
14439: POP
14440: POP
// end ; if not weapon then
14441: LD_VAR 0 18
14445: NOT
14446: IFFALSE 14506
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14448: LD_ADDR_VAR 0 5
14452: PUSH
14453: LD_VAR 0 5
14457: PUSH
14458: LD_INT 11
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 49
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: DIFF
14472: ST_TO_ADDR
// if not list then
14473: LD_VAR 0 5
14477: NOT
14478: IFFALSE 14482
// exit ;
14480: GO 14628
// weapon := list [ rand ( 1 , list ) ] ;
14482: LD_ADDR_VAR 0 18
14486: PUSH
14487: LD_VAR 0 5
14491: PUSH
14492: LD_INT 1
14494: PPUSH
14495: LD_VAR 0 5
14499: PPUSH
14500: CALL_OW 12
14504: ARRAY
14505: ST_TO_ADDR
// end ; if weapon then
14506: LD_VAR 0 18
14510: IFFALSE 14628
// begin tmp := CostOfWeapon ( weapon ) ;
14512: LD_ADDR_VAR 0 14
14516: PUSH
14517: LD_VAR 0 18
14521: PPUSH
14522: CALL_OW 451
14526: ST_TO_ADDR
// j := GetBase ( tower ) ;
14527: LD_ADDR_VAR 0 9
14531: PUSH
14532: LD_VAR 0 1
14536: PPUSH
14537: CALL_OW 274
14541: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14542: LD_VAR 0 9
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 275
14554: PUSH
14555: LD_VAR 0 14
14559: PUSH
14560: LD_INT 1
14562: ARRAY
14563: GREATEREQUAL
14564: IFFALSE 14590
14566: PUSH
14567: LD_VAR 0 9
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 275
14579: PUSH
14580: LD_VAR 0 14
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: GREATEREQUAL
14589: AND
14590: IFFALSE 14616
14592: PUSH
14593: LD_VAR 0 9
14597: PPUSH
14598: LD_INT 3
14600: PPUSH
14601: CALL_OW 275
14605: PUSH
14606: LD_VAR 0 14
14610: PUSH
14611: LD_INT 3
14613: ARRAY
14614: GREATEREQUAL
14615: AND
14616: IFFALSE 14628
// result := weapon ;
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_VAR 0 18
14627: ST_TO_ADDR
// end ; end ;
14628: LD_VAR 0 3
14632: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14633: LD_INT 0
14635: PPUSH
14636: PPUSH
// result := true ;
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: LD_INT 1
14644: ST_TO_ADDR
// if array1 = array2 then
14645: LD_VAR 0 1
14649: PUSH
14650: LD_VAR 0 2
14654: EQUAL
14655: IFFALSE 14715
// begin for i = 1 to array1 do
14657: LD_ADDR_VAR 0 4
14661: PUSH
14662: DOUBLE
14663: LD_INT 1
14665: DEC
14666: ST_TO_ADDR
14667: LD_VAR 0 1
14671: PUSH
14672: FOR_TO
14673: IFFALSE 14711
// if array1 [ i ] <> array2 [ i ] then
14675: LD_VAR 0 1
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PUSH
14686: LD_VAR 0 2
14690: PUSH
14691: LD_VAR 0 4
14695: ARRAY
14696: NONEQUAL
14697: IFFALSE 14709
// begin result := false ;
14699: LD_ADDR_VAR 0 3
14703: PUSH
14704: LD_INT 0
14706: ST_TO_ADDR
// break ;
14707: GO 14711
// end ;
14709: GO 14672
14711: POP
14712: POP
// end else
14713: GO 14723
// result := false ;
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: LD_INT 0
14722: ST_TO_ADDR
// end ;
14723: LD_VAR 0 3
14727: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14728: LD_INT 0
14730: PPUSH
14731: PPUSH
// if not array1 or not array2 then
14732: LD_VAR 0 1
14736: NOT
14737: IFTRUE 14746
14739: PUSH
14740: LD_VAR 0 2
14744: NOT
14745: OR
14746: IFFALSE 14750
// exit ;
14748: GO 14814
// result := true ;
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: LD_INT 1
14757: ST_TO_ADDR
// for i = 1 to array1 do
14758: LD_ADDR_VAR 0 4
14762: PUSH
14763: DOUBLE
14764: LD_INT 1
14766: DEC
14767: ST_TO_ADDR
14768: LD_VAR 0 1
14772: PUSH
14773: FOR_TO
14774: IFFALSE 14812
// if array1 [ i ] <> array2 [ i ] then
14776: LD_VAR 0 1
14780: PUSH
14781: LD_VAR 0 4
14785: ARRAY
14786: PUSH
14787: LD_VAR 0 2
14791: PUSH
14792: LD_VAR 0 4
14796: ARRAY
14797: NONEQUAL
14798: IFFALSE 14810
// begin result := false ;
14800: LD_ADDR_VAR 0 3
14804: PUSH
14805: LD_INT 0
14807: ST_TO_ADDR
// break ;
14808: GO 14812
// end ;
14810: GO 14773
14812: POP
14813: POP
// end ;
14814: LD_VAR 0 3
14818: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
14823: PPUSH
// pom := GetBase ( fac ) ;
14824: LD_ADDR_VAR 0 5
14828: PUSH
14829: LD_VAR 0 1
14833: PPUSH
14834: CALL_OW 274
14838: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_VAR 0 2
14848: PUSH
14849: LD_INT 1
14851: ARRAY
14852: PPUSH
14853: LD_VAR 0 2
14857: PUSH
14858: LD_INT 2
14860: ARRAY
14861: PPUSH
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 3
14869: ARRAY
14870: PPUSH
14871: LD_VAR 0 2
14875: PUSH
14876: LD_INT 4
14878: ARRAY
14879: PPUSH
14880: CALL_OW 449
14884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14885: LD_ADDR_VAR 0 3
14889: PUSH
14890: LD_VAR 0 5
14894: PPUSH
14895: LD_INT 1
14897: PPUSH
14898: CALL_OW 275
14902: PUSH
14903: LD_VAR 0 4
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: GREATEREQUAL
14912: IFFALSE 14938
14914: PUSH
14915: LD_VAR 0 5
14919: PPUSH
14920: LD_INT 2
14922: PPUSH
14923: CALL_OW 275
14927: PUSH
14928: LD_VAR 0 4
14932: PUSH
14933: LD_INT 2
14935: ARRAY
14936: GREATEREQUAL
14937: AND
14938: IFFALSE 14964
14940: PUSH
14941: LD_VAR 0 5
14945: PPUSH
14946: LD_INT 3
14948: PPUSH
14949: CALL_OW 275
14953: PUSH
14954: LD_VAR 0 4
14958: PUSH
14959: LD_INT 3
14961: ARRAY
14962: GREATEREQUAL
14963: AND
14964: ST_TO_ADDR
// end ;
14965: LD_VAR 0 3
14969: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14970: LD_INT 0
14972: PPUSH
14973: PPUSH
14974: PPUSH
14975: PPUSH
// pom := GetBase ( building ) ;
14976: LD_ADDR_VAR 0 3
14980: PUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 274
14990: ST_TO_ADDR
// if not pom then
14991: LD_VAR 0 3
14995: NOT
14996: IFFALSE 15000
// exit ;
14998: GO 15174
// btype := GetBType ( building ) ;
15000: LD_ADDR_VAR 0 5
15004: PUSH
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 266
15014: ST_TO_ADDR
// if btype = b_armoury then
15015: LD_VAR 0 5
15019: PUSH
15020: LD_INT 4
15022: EQUAL
15023: IFFALSE 15033
// btype := b_barracks ;
15025: LD_ADDR_VAR 0 5
15029: PUSH
15030: LD_INT 5
15032: ST_TO_ADDR
// if btype = b_depot then
15033: LD_VAR 0 5
15037: PUSH
15038: LD_INT 0
15040: EQUAL
15041: IFFALSE 15051
// btype := b_warehouse ;
15043: LD_ADDR_VAR 0 5
15047: PUSH
15048: LD_INT 1
15050: ST_TO_ADDR
// if btype = b_workshop then
15051: LD_VAR 0 5
15055: PUSH
15056: LD_INT 2
15058: EQUAL
15059: IFFALSE 15069
// btype := b_factory ;
15061: LD_ADDR_VAR 0 5
15065: PUSH
15066: LD_INT 3
15068: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15069: LD_ADDR_VAR 0 4
15073: PUSH
15074: LD_VAR 0 5
15078: PPUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 248
15088: PPUSH
15089: CALL_OW 450
15093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15094: LD_ADDR_VAR 0 2
15098: PUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: CALL_OW 275
15111: PUSH
15112: LD_VAR 0 4
15116: PUSH
15117: LD_INT 1
15119: ARRAY
15120: GREATEREQUAL
15121: IFFALSE 15147
15123: PUSH
15124: LD_VAR 0 3
15128: PPUSH
15129: LD_INT 2
15131: PPUSH
15132: CALL_OW 275
15136: PUSH
15137: LD_VAR 0 4
15141: PUSH
15142: LD_INT 2
15144: ARRAY
15145: GREATEREQUAL
15146: AND
15147: IFFALSE 15173
15149: PUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: LD_INT 3
15157: PPUSH
15158: CALL_OW 275
15162: PUSH
15163: LD_VAR 0 4
15167: PUSH
15168: LD_INT 3
15170: ARRAY
15171: GREATEREQUAL
15172: AND
15173: ST_TO_ADDR
// end ;
15174: LD_VAR 0 2
15178: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15179: LD_INT 0
15181: PPUSH
15182: PPUSH
15183: PPUSH
// pom := GetBase ( building ) ;
15184: LD_ADDR_VAR 0 4
15188: PUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: CALL_OW 274
15198: ST_TO_ADDR
// if not pom then
15199: LD_VAR 0 4
15203: NOT
15204: IFFALSE 15208
// exit ;
15206: GO 15313
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15208: LD_ADDR_VAR 0 5
15212: PUSH
15213: LD_VAR 0 2
15217: PPUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 248
15227: PPUSH
15228: CALL_OW 450
15232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15233: LD_ADDR_VAR 0 3
15237: PUSH
15238: LD_VAR 0 4
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 275
15250: PUSH
15251: LD_VAR 0 5
15255: PUSH
15256: LD_INT 1
15258: ARRAY
15259: GREATEREQUAL
15260: IFFALSE 15286
15262: PUSH
15263: LD_VAR 0 4
15267: PPUSH
15268: LD_INT 2
15270: PPUSH
15271: CALL_OW 275
15275: PUSH
15276: LD_VAR 0 5
15280: PUSH
15281: LD_INT 2
15283: ARRAY
15284: GREATEREQUAL
15285: AND
15286: IFFALSE 15312
15288: PUSH
15289: LD_VAR 0 4
15293: PPUSH
15294: LD_INT 3
15296: PPUSH
15297: CALL_OW 275
15301: PUSH
15302: LD_VAR 0 5
15306: PUSH
15307: LD_INT 3
15309: ARRAY
15310: GREATEREQUAL
15311: AND
15312: ST_TO_ADDR
// end ;
15313: LD_VAR 0 3
15317: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
15325: PPUSH
15326: PPUSH
15327: PPUSH
15328: PPUSH
15329: PPUSH
15330: PPUSH
// result := false ;
15331: LD_ADDR_VAR 0 8
15335: PUSH
15336: LD_INT 0
15338: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15339: LD_VAR 0 5
15343: NOT
15344: IFTRUE 15353
15346: PUSH
15347: LD_VAR 0 1
15351: NOT
15352: OR
15353: IFTRUE 15362
15355: PUSH
15356: LD_VAR 0 2
15360: NOT
15361: OR
15362: IFTRUE 15371
15364: PUSH
15365: LD_VAR 0 3
15369: NOT
15370: OR
15371: IFFALSE 15375
// exit ;
15373: GO 16201
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15375: LD_ADDR_VAR 0 14
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: LD_VAR 0 2
15389: PPUSH
15390: LD_VAR 0 3
15394: PPUSH
15395: LD_VAR 0 4
15399: PPUSH
15400: LD_VAR 0 5
15404: PUSH
15405: LD_INT 1
15407: ARRAY
15408: PPUSH
15409: CALL_OW 248
15413: PPUSH
15414: LD_INT 0
15416: PPUSH
15417: CALL 17482 0 6
15421: ST_TO_ADDR
// if not hexes then
15422: LD_VAR 0 14
15426: NOT
15427: IFFALSE 15431
// exit ;
15429: GO 16201
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15431: LD_ADDR_VAR 0 17
15435: PUSH
15436: LD_VAR 0 5
15440: PPUSH
15441: LD_INT 22
15443: PUSH
15444: LD_VAR 0 13
15448: PPUSH
15449: CALL_OW 255
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 2
15460: PUSH
15461: LD_INT 30
15463: PUSH
15464: LD_INT 0
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 30
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PPUSH
15490: CALL_OW 72
15494: ST_TO_ADDR
// for i = 1 to hexes do
15495: LD_ADDR_VAR 0 9
15499: PUSH
15500: DOUBLE
15501: LD_INT 1
15503: DEC
15504: ST_TO_ADDR
15505: LD_VAR 0 14
15509: PUSH
15510: FOR_TO
15511: IFFALSE 16199
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15513: LD_ADDR_VAR 0 13
15517: PUSH
15518: LD_VAR 0 14
15522: PUSH
15523: LD_VAR 0 9
15527: ARRAY
15528: PUSH
15529: LD_INT 1
15531: ARRAY
15532: PPUSH
15533: LD_VAR 0 14
15537: PUSH
15538: LD_VAR 0 9
15542: ARRAY
15543: PUSH
15544: LD_INT 2
15546: ARRAY
15547: PPUSH
15548: CALL_OW 428
15552: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15553: LD_VAR 0 14
15557: PUSH
15558: LD_VAR 0 9
15562: ARRAY
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: LD_VAR 0 14
15572: PUSH
15573: LD_VAR 0 9
15577: ARRAY
15578: PUSH
15579: LD_INT 2
15581: ARRAY
15582: PPUSH
15583: CALL_OW 351
15587: IFTRUE 15626
15589: PUSH
15590: LD_VAR 0 14
15594: PUSH
15595: LD_VAR 0 9
15599: ARRAY
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: LD_VAR 0 14
15609: PUSH
15610: LD_VAR 0 9
15614: ARRAY
15615: PUSH
15616: LD_INT 2
15618: ARRAY
15619: PPUSH
15620: CALL_OW 488
15624: NOT
15625: OR
15626: IFTRUE 15643
15628: PUSH
15629: LD_VAR 0 13
15633: PPUSH
15634: CALL_OW 247
15638: PUSH
15639: LD_INT 3
15641: EQUAL
15642: OR
15643: IFFALSE 15649
// exit ;
15645: POP
15646: POP
15647: GO 16201
// if not tmp then
15649: LD_VAR 0 13
15653: NOT
15654: IFFALSE 15658
// continue ;
15656: GO 15510
// result := true ;
15658: LD_ADDR_VAR 0 8
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15666: LD_VAR 0 6
15670: IFFALSE 15687
15672: PUSH
15673: LD_VAR 0 13
15677: PPUSH
15678: CALL_OW 247
15682: PUSH
15683: LD_INT 2
15685: EQUAL
15686: AND
15687: IFFALSE 15704
15689: PUSH
15690: LD_VAR 0 13
15694: PPUSH
15695: CALL_OW 263
15699: PUSH
15700: LD_INT 1
15702: EQUAL
15703: AND
15704: IFFALSE 15868
// begin if IsDrivenBy ( tmp ) then
15706: LD_VAR 0 13
15710: PPUSH
15711: CALL_OW 311
15715: IFFALSE 15719
// continue ;
15717: GO 15510
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15719: LD_VAR 0 6
15723: PPUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 60
15729: PUSH
15730: EMPTY
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 3
15739: PUSH
15740: LD_INT 55
15742: PUSH
15743: EMPTY
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PPUSH
15754: CALL_OW 72
15758: IFFALSE 15866
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15760: LD_ADDR_VAR 0 18
15764: PUSH
15765: LD_VAR 0 6
15769: PPUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 60
15775: PUSH
15776: EMPTY
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: LD_INT 55
15788: PUSH
15789: EMPTY
15790: LIST
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 72
15804: PUSH
15805: LD_INT 1
15807: ARRAY
15808: ST_TO_ADDR
// if IsInUnit ( driver ) then
15809: LD_VAR 0 18
15813: PPUSH
15814: CALL_OW 310
15818: IFFALSE 15829
// ComExit ( driver ) ;
15820: LD_VAR 0 18
15824: PPUSH
15825: CALL 41482 0 1
// AddComEnterUnit ( driver , tmp ) ;
15829: LD_VAR 0 18
15833: PPUSH
15834: LD_VAR 0 13
15838: PPUSH
15839: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15843: LD_VAR 0 18
15847: PPUSH
15848: LD_VAR 0 7
15852: PPUSH
15853: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15857: LD_VAR 0 18
15861: PPUSH
15862: CALL_OW 181
// end ; continue ;
15866: GO 15510
// end ; if not cleaners or not tmp in cleaners then
15868: LD_VAR 0 6
15872: NOT
15873: IFTRUE 15888
15875: PUSH
15876: LD_VAR 0 13
15880: PUSH
15881: LD_VAR 0 6
15885: IN
15886: NOT
15887: OR
15888: IFFALSE 16197
// begin if dep then
15890: LD_VAR 0 17
15894: IFFALSE 16030
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15896: LD_ADDR_VAR 0 16
15900: PUSH
15901: LD_VAR 0 17
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: PPUSH
15910: CALL_OW 250
15914: PPUSH
15915: LD_VAR 0 17
15919: PUSH
15920: LD_INT 1
15922: ARRAY
15923: PPUSH
15924: CALL_OW 254
15928: PPUSH
15929: LD_INT 5
15931: PPUSH
15932: CALL_OW 272
15936: PUSH
15937: LD_VAR 0 17
15941: PUSH
15942: LD_INT 1
15944: ARRAY
15945: PPUSH
15946: CALL_OW 251
15950: PPUSH
15951: LD_VAR 0 17
15955: PUSH
15956: LD_INT 1
15958: ARRAY
15959: PPUSH
15960: CALL_OW 254
15964: PPUSH
15965: LD_INT 5
15967: PPUSH
15968: CALL_OW 273
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15977: LD_VAR 0 16
15981: PUSH
15982: LD_INT 1
15984: ARRAY
15985: PPUSH
15986: LD_VAR 0 16
15990: PUSH
15991: LD_INT 2
15993: ARRAY
15994: PPUSH
15995: CALL_OW 488
15999: IFFALSE 16030
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16001: LD_VAR 0 13
16005: PPUSH
16006: LD_VAR 0 16
16010: PUSH
16011: LD_INT 1
16013: ARRAY
16014: PPUSH
16015: LD_VAR 0 16
16019: PUSH
16020: LD_INT 2
16022: ARRAY
16023: PPUSH
16024: CALL_OW 111
// continue ;
16028: GO 15510
// end ; end ; r := GetDir ( tmp ) ;
16030: LD_ADDR_VAR 0 15
16034: PUSH
16035: LD_VAR 0 13
16039: PPUSH
16040: CALL_OW 254
16044: ST_TO_ADDR
// if r = 5 then
16045: LD_VAR 0 15
16049: PUSH
16050: LD_INT 5
16052: EQUAL
16053: IFFALSE 16063
// r := 0 ;
16055: LD_ADDR_VAR 0 15
16059: PUSH
16060: LD_INT 0
16062: ST_TO_ADDR
// for j = r to 5 do
16063: LD_ADDR_VAR 0 10
16067: PUSH
16068: DOUBLE
16069: LD_VAR 0 15
16073: DEC
16074: ST_TO_ADDR
16075: LD_INT 5
16077: PUSH
16078: FOR_TO
16079: IFFALSE 16195
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16081: LD_ADDR_VAR 0 11
16085: PUSH
16086: LD_VAR 0 13
16090: PPUSH
16091: CALL_OW 250
16095: PPUSH
16096: LD_VAR 0 10
16100: PPUSH
16101: LD_INT 2
16103: PPUSH
16104: CALL_OW 272
16108: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16109: LD_ADDR_VAR 0 12
16113: PUSH
16114: LD_VAR 0 13
16118: PPUSH
16119: CALL_OW 251
16123: PPUSH
16124: LD_VAR 0 10
16128: PPUSH
16129: LD_INT 2
16131: PPUSH
16132: CALL_OW 273
16136: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16137: LD_VAR 0 11
16141: PPUSH
16142: LD_VAR 0 12
16146: PPUSH
16147: CALL_OW 488
16151: IFFALSE 16170
16153: PUSH
16154: LD_VAR 0 11
16158: PPUSH
16159: LD_VAR 0 12
16163: PPUSH
16164: CALL_OW 428
16168: NOT
16169: AND
16170: IFFALSE 16193
// begin ComMoveXY ( tmp , _x , _y ) ;
16172: LD_VAR 0 13
16176: PPUSH
16177: LD_VAR 0 11
16181: PPUSH
16182: LD_VAR 0 12
16186: PPUSH
16187: CALL_OW 111
// break ;
16191: GO 16195
// end ; end ;
16193: GO 16078
16195: POP
16196: POP
// end ; end ;
16197: GO 15510
16199: POP
16200: POP
// end ;
16201: LD_VAR 0 8
16205: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16206: LD_INT 0
16208: PPUSH
// result := true ;
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_INT 1
16216: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16217: LD_VAR 0 2
16221: PUSH
16222: LD_INT 24
16224: DOUBLE
16225: EQUAL
16226: IFTRUE 16236
16228: LD_INT 33
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16261
16236: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_INT 32
16244: PPUSH
16245: LD_VAR 0 1
16249: PPUSH
16250: CALL_OW 321
16254: PUSH
16255: LD_INT 2
16257: EQUAL
16258: ST_TO_ADDR
16259: GO 16577
16261: LD_INT 20
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16294
16269: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16270: LD_ADDR_VAR 0 3
16274: PUSH
16275: LD_INT 6
16277: PPUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 321
16287: PUSH
16288: LD_INT 2
16290: EQUAL
16291: ST_TO_ADDR
16292: GO 16577
16294: LD_INT 22
16296: DOUBLE
16297: EQUAL
16298: IFTRUE 16308
16300: LD_INT 36
16302: DOUBLE
16303: EQUAL
16304: IFTRUE 16308
16306: GO 16333
16308: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16309: LD_ADDR_VAR 0 3
16313: PUSH
16314: LD_INT 15
16316: PPUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 321
16326: PUSH
16327: LD_INT 2
16329: EQUAL
16330: ST_TO_ADDR
16331: GO 16577
16333: LD_INT 30
16335: DOUBLE
16336: EQUAL
16337: IFTRUE 16341
16339: GO 16366
16341: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16342: LD_ADDR_VAR 0 3
16346: PUSH
16347: LD_INT 20
16349: PPUSH
16350: LD_VAR 0 1
16354: PPUSH
16355: CALL_OW 321
16359: PUSH
16360: LD_INT 2
16362: EQUAL
16363: ST_TO_ADDR
16364: GO 16577
16366: LD_INT 28
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16380
16372: LD_INT 21
16374: DOUBLE
16375: EQUAL
16376: IFTRUE 16380
16378: GO 16405
16380: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_INT 21
16388: PPUSH
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 321
16398: PUSH
16399: LD_INT 2
16401: EQUAL
16402: ST_TO_ADDR
16403: GO 16577
16405: LD_INT 16
16407: DOUBLE
16408: EQUAL
16409: IFTRUE 16413
16411: GO 16438
16413: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_INT 84
16421: PPUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 321
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: ST_TO_ADDR
16436: GO 16577
16438: LD_INT 19
16440: DOUBLE
16441: EQUAL
16442: IFTRUE 16452
16444: LD_INT 23
16446: DOUBLE
16447: EQUAL
16448: IFTRUE 16452
16450: GO 16477
16452: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_INT 83
16460: PPUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: CALL_OW 321
16470: PUSH
16471: LD_INT 2
16473: EQUAL
16474: ST_TO_ADDR
16475: GO 16577
16477: LD_INT 17
16479: DOUBLE
16480: EQUAL
16481: IFTRUE 16485
16483: GO 16510
16485: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16486: LD_ADDR_VAR 0 3
16490: PUSH
16491: LD_INT 39
16493: PPUSH
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 321
16503: PUSH
16504: LD_INT 2
16506: EQUAL
16507: ST_TO_ADDR
16508: GO 16577
16510: LD_INT 18
16512: DOUBLE
16513: EQUAL
16514: IFTRUE 16518
16516: GO 16543
16518: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_INT 40
16526: PPUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 321
16536: PUSH
16537: LD_INT 2
16539: EQUAL
16540: ST_TO_ADDR
16541: GO 16577
16543: LD_INT 27
16545: DOUBLE
16546: EQUAL
16547: IFTRUE 16551
16549: GO 16576
16551: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16552: LD_ADDR_VAR 0 3
16556: PUSH
16557: LD_INT 35
16559: PPUSH
16560: LD_VAR 0 1
16564: PPUSH
16565: CALL_OW 321
16569: PUSH
16570: LD_INT 2
16572: EQUAL
16573: ST_TO_ADDR
16574: GO 16577
16576: POP
// end ;
16577: LD_VAR 0 3
16581: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16582: LD_INT 0
16584: PPUSH
16585: PPUSH
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
// result := false ;
16595: LD_ADDR_VAR 0 6
16599: PUSH
16600: LD_INT 0
16602: ST_TO_ADDR
// if btype = b_depot then
16603: LD_VAR 0 2
16607: PUSH
16608: LD_INT 0
16610: EQUAL
16611: IFFALSE 16623
// begin result := true ;
16613: LD_ADDR_VAR 0 6
16617: PUSH
16618: LD_INT 1
16620: ST_TO_ADDR
// exit ;
16621: GO 17477
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16623: LD_VAR 0 1
16627: NOT
16628: IFTRUE 16653
16630: PUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL_OW 266
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: IN
16651: NOT
16652: OR
16653: IFTRUE 16662
16655: PUSH
16656: LD_VAR 0 2
16660: NOT
16661: OR
16662: IFTRUE 16698
16664: PUSH
16665: LD_VAR 0 5
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: LD_INT 2
16678: PUSH
16679: LD_INT 3
16681: PUSH
16682: LD_INT 4
16684: PUSH
16685: LD_INT 5
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: IN
16696: NOT
16697: OR
16698: IFTRUE 16717
16700: PUSH
16701: LD_VAR 0 3
16705: PPUSH
16706: LD_VAR 0 4
16710: PPUSH
16711: CALL_OW 488
16715: NOT
16716: OR
16717: IFFALSE 16721
// exit ;
16719: GO 17477
// side := GetSide ( depot ) ;
16721: LD_ADDR_VAR 0 9
16725: PUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 255
16735: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16736: LD_VAR 0 9
16740: PPUSH
16741: LD_VAR 0 2
16745: PPUSH
16746: CALL 16206 0 2
16750: NOT
16751: IFFALSE 16755
// exit ;
16753: GO 17477
// pom := GetBase ( depot ) ;
16755: LD_ADDR_VAR 0 10
16759: PUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 274
16769: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16770: LD_ADDR_VAR 0 11
16774: PUSH
16775: LD_VAR 0 2
16779: PPUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 248
16789: PPUSH
16790: CALL_OW 450
16794: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16795: LD_VAR 0 10
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 275
16807: PUSH
16808: LD_VAR 0 11
16812: PUSH
16813: LD_INT 1
16815: ARRAY
16816: GREATEREQUAL
16817: IFFALSE 16843
16819: PUSH
16820: LD_VAR 0 10
16824: PPUSH
16825: LD_INT 2
16827: PPUSH
16828: CALL_OW 275
16832: PUSH
16833: LD_VAR 0 11
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: GREATEREQUAL
16842: AND
16843: IFFALSE 16869
16845: PUSH
16846: LD_VAR 0 10
16850: PPUSH
16851: LD_INT 3
16853: PPUSH
16854: CALL_OW 275
16858: PUSH
16859: LD_VAR 0 11
16863: PUSH
16864: LD_INT 3
16866: ARRAY
16867: GREATEREQUAL
16868: AND
16869: NOT
16870: IFFALSE 16874
// exit ;
16872: GO 17477
// if GetBType ( depot ) = b_depot then
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 266
16883: PUSH
16884: LD_INT 0
16886: EQUAL
16887: IFFALSE 16899
// dist := 28 else
16889: LD_ADDR_VAR 0 14
16893: PUSH
16894: LD_INT 28
16896: ST_TO_ADDR
16897: GO 16907
// dist := 36 ;
16899: LD_ADDR_VAR 0 14
16903: PUSH
16904: LD_INT 36
16906: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: LD_VAR 0 4
16921: PPUSH
16922: CALL_OW 297
16926: PUSH
16927: LD_VAR 0 14
16931: GREATER
16932: IFFALSE 16936
// exit ;
16934: GO 17477
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16936: LD_ADDR_VAR 0 12
16940: PUSH
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_VAR 0 3
16950: PPUSH
16951: LD_VAR 0 4
16955: PPUSH
16956: LD_VAR 0 5
16960: PPUSH
16961: LD_VAR 0 1
16965: PPUSH
16966: CALL_OW 248
16970: PPUSH
16971: LD_INT 0
16973: PPUSH
16974: CALL 17482 0 6
16978: ST_TO_ADDR
// if not hexes then
16979: LD_VAR 0 12
16983: NOT
16984: IFFALSE 16988
// exit ;
16986: GO 17477
// hex := GetHexInfo ( x , y ) ;
16988: LD_ADDR_VAR 0 15
16992: PUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: LD_VAR 0 4
17002: PPUSH
17003: CALL_OW 546
17007: ST_TO_ADDR
// if hex [ 1 ] then
17008: LD_VAR 0 15
17012: PUSH
17013: LD_INT 1
17015: ARRAY
17016: IFFALSE 17020
// exit ;
17018: GO 17477
// height := hex [ 2 ] ;
17020: LD_ADDR_VAR 0 13
17024: PUSH
17025: LD_VAR 0 15
17029: PUSH
17030: LD_INT 2
17032: ARRAY
17033: ST_TO_ADDR
// for i = 1 to hexes do
17034: LD_ADDR_VAR 0 7
17038: PUSH
17039: DOUBLE
17040: LD_INT 1
17042: DEC
17043: ST_TO_ADDR
17044: LD_VAR 0 12
17048: PUSH
17049: FOR_TO
17050: IFFALSE 17394
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17052: LD_VAR 0 12
17056: PUSH
17057: LD_VAR 0 7
17061: ARRAY
17062: PUSH
17063: LD_INT 1
17065: ARRAY
17066: PPUSH
17067: LD_VAR 0 12
17071: PUSH
17072: LD_VAR 0 7
17076: ARRAY
17077: PUSH
17078: LD_INT 2
17080: ARRAY
17081: PPUSH
17082: CALL_OW 488
17086: NOT
17087: IFTRUE 17129
17089: PUSH
17090: LD_VAR 0 12
17094: PUSH
17095: LD_VAR 0 7
17099: ARRAY
17100: PUSH
17101: LD_INT 1
17103: ARRAY
17104: PPUSH
17105: LD_VAR 0 12
17109: PUSH
17110: LD_VAR 0 7
17114: ARRAY
17115: PUSH
17116: LD_INT 2
17118: ARRAY
17119: PPUSH
17120: CALL_OW 428
17124: PUSH
17125: LD_INT 0
17127: GREATER
17128: OR
17129: IFTRUE 17167
17131: PUSH
17132: LD_VAR 0 12
17136: PUSH
17137: LD_VAR 0 7
17141: ARRAY
17142: PUSH
17143: LD_INT 1
17145: ARRAY
17146: PPUSH
17147: LD_VAR 0 12
17151: PUSH
17152: LD_VAR 0 7
17156: ARRAY
17157: PUSH
17158: LD_INT 2
17160: ARRAY
17161: PPUSH
17162: CALL_OW 351
17166: OR
17167: IFFALSE 17173
// exit ;
17169: POP
17170: POP
17171: GO 17477
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17173: LD_ADDR_VAR 0 8
17177: PUSH
17178: LD_VAR 0 12
17182: PUSH
17183: LD_VAR 0 7
17187: ARRAY
17188: PUSH
17189: LD_INT 1
17191: ARRAY
17192: PPUSH
17193: LD_VAR 0 12
17197: PUSH
17198: LD_VAR 0 7
17202: ARRAY
17203: PUSH
17204: LD_INT 2
17206: ARRAY
17207: PPUSH
17208: CALL_OW 546
17212: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17213: LD_VAR 0 8
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: IFTRUE 17243
17223: PUSH
17224: LD_VAR 0 8
17228: PUSH
17229: LD_INT 2
17231: ARRAY
17232: PUSH
17233: LD_VAR 0 13
17237: PUSH
17238: LD_INT 2
17240: PLUS
17241: GREATER
17242: OR
17243: IFTRUE 17265
17245: PUSH
17246: LD_VAR 0 8
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: PUSH
17255: LD_VAR 0 13
17259: PUSH
17260: LD_INT 2
17262: MINUS
17263: LESS
17264: OR
17265: IFTRUE 17333
17267: PUSH
17268: LD_VAR 0 8
17272: PUSH
17273: LD_INT 3
17275: ARRAY
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 8
17282: PUSH
17283: LD_INT 9
17285: PUSH
17286: LD_INT 10
17288: PUSH
17289: LD_INT 11
17291: PUSH
17292: LD_INT 12
17294: PUSH
17295: LD_INT 13
17297: PUSH
17298: LD_INT 16
17300: PUSH
17301: LD_INT 17
17303: PUSH
17304: LD_INT 18
17306: PUSH
17307: LD_INT 19
17309: PUSH
17310: LD_INT 20
17312: PUSH
17313: LD_INT 21
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: IN
17331: NOT
17332: OR
17333: IFTRUE 17346
17335: PUSH
17336: LD_VAR 0 8
17340: PUSH
17341: LD_INT 5
17343: ARRAY
17344: NOT
17345: OR
17346: IFTRUE 17386
17348: PUSH
17349: LD_VAR 0 8
17353: PUSH
17354: LD_INT 6
17356: ARRAY
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 7
17366: PUSH
17367: LD_INT 9
17369: PUSH
17370: LD_INT 10
17372: PUSH
17373: LD_INT 11
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: IN
17384: NOT
17385: OR
17386: IFFALSE 17392
// exit ;
17388: POP
17389: POP
17390: GO 17477
// end ;
17392: GO 17049
17394: POP
17395: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17396: LD_VAR 0 9
17400: PPUSH
17401: LD_VAR 0 3
17405: PPUSH
17406: LD_VAR 0 4
17410: PPUSH
17411: LD_INT 20
17413: PPUSH
17414: CALL 9296 0 4
17418: PUSH
17419: LD_INT 4
17421: ARRAY
17422: IFFALSE 17426
// exit ;
17424: GO 17477
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17426: LD_VAR 0 2
17430: PUSH
17431: LD_INT 29
17433: PUSH
17434: LD_INT 30
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: IN
17441: IFFALSE 17465
17443: PUSH
17444: LD_VAR 0 3
17448: PPUSH
17449: LD_VAR 0 4
17453: PPUSH
17454: LD_VAR 0 9
17458: PPUSH
17459: CALL_OW 440
17463: NOT
17464: AND
17465: IFFALSE 17469
// exit ;
17467: GO 17477
// result := true ;
17469: LD_ADDR_VAR 0 6
17473: PUSH
17474: LD_INT 1
17476: ST_TO_ADDR
// end ;
17477: LD_VAR 0 6
17481: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17482: LD_INT 0
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
17536: PPUSH
17537: PPUSH
17538: PPUSH
17539: PPUSH
17540: PPUSH
17541: PPUSH
// result = [ ] ;
17542: LD_ADDR_VAR 0 7
17546: PUSH
17547: EMPTY
17548: ST_TO_ADDR
// temp_list = [ ] ;
17549: LD_ADDR_VAR 0 9
17553: PUSH
17554: EMPTY
17555: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17556: LD_VAR 0 4
17560: PUSH
17561: LD_INT 0
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: LD_INT 3
17572: PUSH
17573: LD_INT 4
17575: PUSH
17576: LD_INT 5
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: IN
17587: NOT
17588: IFTRUE 17631
17590: PUSH
17591: LD_VAR 0 1
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: IN
17606: IFFALSE 17630
17608: PUSH
17609: LD_VAR 0 5
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: LD_INT 3
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: IN
17628: NOT
17629: AND
17630: OR
17631: IFFALSE 17635
// exit ;
17633: GO 36034
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17635: LD_VAR 0 1
17639: PUSH
17640: LD_INT 6
17642: PUSH
17643: LD_INT 7
17645: PUSH
17646: LD_INT 8
17648: PUSH
17649: LD_INT 13
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: LD_INT 15
17657: PUSH
17658: LD_INT 11
17660: PUSH
17661: LD_INT 14
17663: PUSH
17664: LD_INT 10
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: IN
17678: IFFALSE 17688
// btype = b_lab ;
17680: LD_ADDR_VAR 0 1
17684: PUSH
17685: LD_INT 6
17687: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17688: LD_VAR 0 6
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: IN
17707: NOT
17708: IFTRUE 17776
17710: PUSH
17711: LD_VAR 0 1
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 3
17727: PUSH
17728: LD_INT 6
17730: PUSH
17731: LD_INT 36
17733: PUSH
17734: LD_INT 4
17736: PUSH
17737: LD_INT 5
17739: PUSH
17740: LD_INT 31
17742: PUSH
17743: LD_INT 32
17745: PUSH
17746: LD_INT 33
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: IN
17762: NOT
17763: IFFALSE 17775
17765: PUSH
17766: LD_VAR 0 6
17770: PUSH
17771: LD_INT 1
17773: EQUAL
17774: AND
17775: OR
17776: IFTRUE 17808
17778: PUSH
17779: LD_VAR 0 1
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: IN
17794: NOT
17795: IFFALSE 17807
17797: PUSH
17798: LD_VAR 0 6
17802: PUSH
17803: LD_INT 2
17805: EQUAL
17806: AND
17807: OR
17808: IFFALSE 17818
// mode = 0 ;
17810: LD_ADDR_VAR 0 6
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// case mode of 0 :
17818: LD_VAR 0 6
17822: PUSH
17823: LD_INT 0
17825: DOUBLE
17826: EQUAL
17827: IFTRUE 17831
17829: GO 29284
17831: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17832: LD_ADDR_VAR 0 11
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: LD_INT 0
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 1
17905: NEG
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: LD_INT 2
17917: NEG
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: LD_INT 1
17939: NEG
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: LD_INT 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 1
17967: NEG
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 3
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18025: LD_ADDR_VAR 0 12
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 1
18045: NEG
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: NEG
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: NEG
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: NEG
18160: PUSH
18161: LD_INT 1
18163: NEG
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 2
18171: NEG
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 3
18182: NEG
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 3
18193: NEG
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18221: LD_ADDR_VAR 0 13
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: NEG
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: LD_INT 2
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: LD_INT 3
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 3
18380: NEG
18381: PUSH
18382: LD_INT 2
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 3
18392: NEG
18393: PUSH
18394: LD_INT 3
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18420: LD_ADDR_VAR 0 14
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 1
18478: NEG
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 1
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 1
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: LD_INT 2
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: LD_INT 3
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: LD_INT 3
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 2
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18616: LD_ADDR_VAR 0 15
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: NEG
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: NEG
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 3
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 3
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18809: LD_ADDR_VAR 0 16
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 1
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 0
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: NEG
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: LD_INT 2
18894: NEG
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 2
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 2
18932: NEG
18933: PUSH
18934: LD_INT 1
18936: NEG
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: NEG
18945: PUSH
18946: LD_INT 2
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 3
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 3
18966: PUSH
18967: LD_INT 3
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19002: LD_ADDR_VAR 0 17
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: LD_INT 0
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: NEG
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: LD_INT 2
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 2
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: LD_INT 2
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19232: LD_ADDR_VAR 0 18
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 1
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 1
19313: NEG
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: LD_INT 1
19339: NEG
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 2
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 2
19431: NEG
19432: PUSH
19433: LD_INT 2
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19462: LD_ADDR_VAR 0 19
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 2
19547: NEG
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 1
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 2
19638: NEG
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: NEG
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19692: LD_ADDR_VAR 0 20
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: NEG
19774: PUSH
19775: LD_INT 2
19777: NEG
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: LD_INT 1
19799: NEG
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 1
19857: NEG
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 2
19868: NEG
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: NEG
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19922: LD_ADDR_VAR 0 21
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: LD_INT 1
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: LD_INT 1
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 2
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: NEG
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: LD_INT 1
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 2
20121: NEG
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20152: LD_ADDR_VAR 0 22
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: LD_INT 1
20225: NEG
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: LD_INT 1
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: PUSH
20288: LD_INT 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: LD_INT 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 2
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: NEG
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 2
20328: NEG
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: NEG
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: NEG
20352: PUSH
20353: LD_INT 2
20355: NEG
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20382: LD_ADDR_VAR 0 23
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: LD_INT 0
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: LD_INT 1
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: LD_INT 1
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 1
20440: NEG
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: LD_INT 2
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: LD_INT 1
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 2
20558: NEG
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: LD_INT 2
20585: NEG
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: LD_INT 3
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: LD_INT 3
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20662: LD_ADDR_VAR 0 24
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: LD_INT 0
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: NEG
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: LD_INT 2
20747: NEG
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 2
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: LD_INT 2
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 1
20827: NEG
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: NEG
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 2
20861: NEG
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 3
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 3
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20938: LD_ADDR_VAR 0 25
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: NEG
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: NEG
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: LD_INT 2
21023: NEG
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 0
21031: PUSH
21032: LD_INT 2
21034: NEG
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: LD_INT 1
21045: NEG
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 2
21114: NEG
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: NEG
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: LD_INT 2
21141: NEG
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 3
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 3
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 3
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21212: LD_ADDR_VAR 0 26
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: LD_INT 3
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 3
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 2
21454: NEG
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21488: LD_ADDR_VAR 0 27
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: LD_INT 1
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: LD_INT 1
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: LD_INT 2
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: LD_INT 1
21595: NEG
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 2
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: NEG
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: NEG
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 2
21687: NEG
21688: PUSH
21689: LD_INT 2
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 2
21710: NEG
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 3
21721: NEG
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 3
21733: NEG
21734: PUSH
21735: LD_INT 2
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21768: LD_ADDR_VAR 0 28
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: LD_INT 1
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: LD_INT 2
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: NEG
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: NEG
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: NEG
21968: PUSH
21969: LD_INT 2
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 2
21979: NEG
21980: PUSH
21981: LD_INT 3
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 3
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: NEG
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 3
22015: NEG
22016: PUSH
22017: LD_INT 2
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22050: LD_ADDR_VAR 0 29
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 2
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 2
22228: NEG
22229: PUSH
22230: LD_INT 2
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: NEG
22241: PUSH
22242: LD_INT 3
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 3
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 3
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: LD_INT 2
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 3
22294: NEG
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22329: LD_ADDR_VAR 0 30
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: LD_INT 2
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: NEG
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 2
22495: NEG
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: NEG
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 3
22522: NEG
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 3
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 3
22572: NEG
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22607: LD_ADDR_VAR 0 31
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: NEG
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: NEG
22677: PUSH
22678: LD_INT 1
22680: NEG
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 2
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 2
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 2
22796: NEG
22797: PUSH
22798: LD_INT 3
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 2
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 3
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 3
22850: NEG
22851: PUSH
22852: LD_INT 2
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22885: LD_ADDR_VAR 0 32
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: NEG
22944: PUSH
22945: LD_INT 0
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 2
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: LD_INT 3
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 2
23117: NEG
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 3
23128: NEG
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23163: LD_ADDR_VAR 0 33
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 1
23221: NEG
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: NEG
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: NEG
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 2
23341: NEG
23342: PUSH
23343: LD_INT 2
23345: NEG
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 2
23353: NEG
23354: PUSH
23355: LD_INT 3
23357: NEG
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 3
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: LD_INT 3
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 1
23396: NEG
23397: PUSH
23398: LD_INT 2
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: NEG
23408: PUSH
23409: LD_INT 2
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23442: LD_ADDR_VAR 0 34
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: LD_INT 1
23462: NEG
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: NEG
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: NEG
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: LD_INT 2
23527: NEG
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 2
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 2
23598: NEG
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: NEG
23634: PUSH
23635: LD_INT 3
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 2
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 3
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 3
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 3
23687: NEG
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23722: LD_ADDR_VAR 0 35
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 2
23813: NEG
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23834: LD_ADDR_VAR 0 36
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23946: LD_ADDR_VAR 0 37
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24058: LD_ADDR_VAR 0 38
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24170: LD_ADDR_VAR 0 39
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 2
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24282: LD_ADDR_VAR 0 40
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: NEG
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24394: LD_ADDR_VAR 0 41
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 2
24572: NEG
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: NEG
24585: PUSH
24586: LD_INT 3
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 3
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 3
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: NEG
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 3
24668: NEG
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 3
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 3
24691: NEG
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 3
24703: NEG
24704: PUSH
24705: LD_INT 3
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24744: LD_ADDR_VAR 0 42
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 2
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 2
24922: NEG
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: NEG
24935: PUSH
24936: LD_INT 3
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 3
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 3
24990: PUSH
24991: LD_INT 3
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: LD_INT 3
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: LD_INT 3
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: LD_INT 3
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 3
25041: NEG
25042: PUSH
25043: LD_INT 2
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 3
25053: NEG
25054: PUSH
25055: LD_INT 3
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25094: LD_ADDR_VAR 0 43
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 1
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: LD_INT 3
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: LD_INT 3
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: NEG
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 3
25401: NEG
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25442: LD_ADDR_VAR 0 44
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: NEG
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: LD_INT 2
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: NEG
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: NEG
25621: PUSH
25622: LD_INT 2
25624: NEG
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: LD_INT 3
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 3
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 3
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 3
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: NEG
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 3
25716: NEG
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 3
25727: NEG
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 3
25739: NEG
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 3
25751: NEG
25752: PUSH
25753: LD_INT 3
25755: NEG
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25792: LD_ADDR_VAR 0 45
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 1
25850: NEG
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: LD_INT 2
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 2
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: LD_INT 3
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: LD_INT 3
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 3
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 3
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 3
26038: PUSH
26039: LD_INT 3
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: LD_INT 3
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 3
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 3
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 3
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 3
26101: NEG
26102: PUSH
26103: LD_INT 3
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26142: LD_ADDR_VAR 0 46
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 3
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 3
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 3
26438: NEG
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 3
26449: NEG
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26490: LD_ADDR_VAR 0 47
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26641: LD_ADDR_VAR 0 48
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: LD_INT 2
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26788: LD_ADDR_VAR 0 49
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26932: LD_ADDR_VAR 0 50
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27076: LD_ADDR_VAR 0 51
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27223: LD_ADDR_VAR 0 52
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27374: LD_ADDR_VAR 0 53
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 2
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: LD_INT 2
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: NEG
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: LD_INT 2
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27604: LD_ADDR_VAR 0 54
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 2
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 2
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: NEG
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 2
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27834: LD_ADDR_VAR 0 55
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 2
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 2
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: NEG
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: NEG
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28064: LD_ADDR_VAR 0 56
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28294: LD_ADDR_VAR 0 57
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28524: LD_ADDR_VAR 0 58
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 2
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28754: LD_ADDR_VAR 0 59
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28842: LD_ADDR_VAR 0 60
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28930: LD_ADDR_VAR 0 61
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29018: LD_ADDR_VAR 0 62
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29106: LD_ADDR_VAR 0 63
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29194: LD_ADDR_VAR 0 64
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: ST_TO_ADDR
// end ; 1 :
29282: GO 35179
29284: LD_INT 1
29286: DOUBLE
29287: EQUAL
29288: IFTRUE 29292
29290: GO 31915
29292: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29293: LD_ADDR_VAR 0 11
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: LD_INT 3
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 2
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29337: LD_ADDR_VAR 0 12
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 3
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29378: LD_ADDR_VAR 0 13
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 3
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29418: LD_ADDR_VAR 0 14
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29459: LD_ADDR_VAR 0 15
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 3
29477: NEG
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29503: LD_ADDR_VAR 0 16
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: LD_INT 3
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 3
29522: NEG
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: LD_INT 3
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29549: LD_ADDR_VAR 0 17
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 3
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29593: LD_ADDR_VAR 0 18
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29634: LD_ADDR_VAR 0 19
29638: PUSH
29639: LD_INT 3
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 3
29651: PUSH
29652: LD_INT 3
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: PUSH
29662: LD_INT 3
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29674: LD_ADDR_VAR 0 20
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 3
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 3
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29715: LD_ADDR_VAR 0 21
29719: PUSH
29720: LD_INT 2
29722: NEG
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 3
29733: NEG
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: NEG
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29759: LD_ADDR_VAR 0 22
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: LD_INT 3
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: LD_INT 3
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29805: LD_ADDR_VAR 0 23
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 3
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 4
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: LD_INT 3
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29849: LD_ADDR_VAR 0 24
29853: PUSH
29854: LD_INT 3
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 4
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29890: LD_ADDR_VAR 0 25
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: LD_INT 4
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29930: LD_ADDR_VAR 0 26
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 4
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29971: LD_ADDR_VAR 0 27
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 3
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 4
30000: NEG
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30015: LD_ADDR_VAR 0 28
30019: PUSH
30020: LD_INT 3
30022: NEG
30023: PUSH
30024: LD_INT 3
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: NEG
30035: PUSH
30036: LD_INT 4
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 4
30046: NEG
30047: PUSH
30048: LD_INT 3
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30061: LD_ADDR_VAR 0 29
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: LD_INT 3
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 3
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: LD_INT 4
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: LD_INT 4
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: LD_INT 3
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 5
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 5
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 4
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: LD_INT 6
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 6
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 5
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30216: LD_ADDR_VAR 0 30
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 4
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 4
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 5
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 5
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 5
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 6
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 6
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30359: LD_ADDR_VAR 0 31
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 4
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 4
30406: PUSH
30407: LD_INT 4
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 3
30416: PUSH
30417: LD_INT 4
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 5
30426: PUSH
30427: LD_INT 4
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 5
30436: PUSH
30437: LD_INT 5
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: LD_INT 5
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 6
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 6
30466: PUSH
30467: LD_INT 6
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 5
30476: PUSH
30477: LD_INT 6
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30498: LD_ADDR_VAR 0 32
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: LD_INT 4
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: LD_INT 4
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 3
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: LD_INT 5
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 5
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 4
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 6
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 6
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: LD_INT 5
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30641: LD_ADDR_VAR 0 33
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 3
30670: NEG
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 3
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 4
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 4
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 4
30716: NEG
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 5
30727: NEG
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 5
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 5
30750: NEG
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 6
30761: NEG
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 6
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30796: LD_ADDR_VAR 0 34
30800: PUSH
30801: LD_INT 2
30803: NEG
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: LD_INT 4
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 4
30851: NEG
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 4
30863: NEG
30864: PUSH
30865: LD_INT 4
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: LD_INT 5
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: LD_INT 4
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 5
30899: NEG
30900: PUSH
30901: LD_INT 5
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 5
30911: NEG
30912: PUSH
30913: LD_INT 6
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 6
30923: NEG
30924: PUSH
30925: LD_INT 5
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 6
30935: NEG
30936: PUSH
30937: LD_INT 6
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30959: LD_ADDR_VAR 0 41
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31003: LD_ADDR_VAR 0 42
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: LIST
31043: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31044: LD_ADDR_VAR 0 43
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31084: LD_ADDR_VAR 0 44
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31125: LD_ADDR_VAR 0 45
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: NEG
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31169: LD_ADDR_VAR 0 46
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: LD_INT 3
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31215: LD_ADDR_VAR 0 47
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: LD_INT 3
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: LD_INT 3
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31248: LD_ADDR_VAR 0 48
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31279: LD_ADDR_VAR 0 49
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 3
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31308: LD_ADDR_VAR 0 50
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 3
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31337: LD_ADDR_VAR 0 51
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31368: LD_ADDR_VAR 0 52
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: LD_INT 2
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31401: LD_ADDR_VAR 0 53
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31445: LD_ADDR_VAR 0 54
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 3
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31486: LD_ADDR_VAR 0 55
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31526: LD_ADDR_VAR 0 56
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31567: LD_ADDR_VAR 0 57
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31611: LD_ADDR_VAR 0 58
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 3
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 3
31630: NEG
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 3
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31657: LD_ADDR_VAR 0 59
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31701: LD_ADDR_VAR 0 60
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31742: LD_ADDR_VAR 0 61
31746: PUSH
31747: LD_INT 2
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 2
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31782: LD_ADDR_VAR 0 62
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31823: LD_ADDR_VAR 0 63
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31867: LD_ADDR_VAR 0 64
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: LD_INT 2
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
// end ; 2 :
31913: GO 35179
31915: LD_INT 2
31917: DOUBLE
31918: EQUAL
31919: IFTRUE 31923
31921: GO 35178
31923: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31924: LD_ADDR_VAR 0 29
31928: PUSH
31929: LD_INT 4
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 5
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 5
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 5
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 3
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 4
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 4
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 4
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: LD_INT 3
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 4
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: LD_INT 4
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 4
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 4
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 5
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 3
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 5
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 2
32196: NEG
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 3
32218: NEG
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 4
32263: NEG
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 4
32274: NEG
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 4
32286: NEG
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 4
32309: NEG
32310: PUSH
32311: LD_INT 4
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 4
32321: NEG
32322: PUSH
32323: LD_INT 5
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: LD_INT 4
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 4
32357: NEG
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 5
32369: NEG
32370: PUSH
32371: LD_INT 4
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 5
32381: NEG
32382: PUSH
32383: LD_INT 5
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: LD_INT 5
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 5
32405: NEG
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32462: LD_ADDR_VAR 0 30
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: LD_INT 4
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 5
32499: PUSH
32500: LD_INT 5
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: LD_INT 5
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 5
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 5
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 4
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 4
32652: NEG
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 4
32663: NEG
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 3
32675: NEG
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 4
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 5
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 5
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 5
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 3
32754: NEG
32755: PUSH
32756: LD_INT 3
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: NEG
32767: PUSH
32768: LD_INT 4
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 3
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: LD_INT 2
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 4
32814: NEG
32815: PUSH
32816: LD_INT 3
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 4
32826: NEG
32827: PUSH
32828: LD_INT 4
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 4
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 4
32850: NEG
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: LD_INT 4
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 5
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: LD_INT 4
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 4
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 5
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: NEG
32953: PUSH
32954: LD_INT 5
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33009: LD_ADDR_VAR 0 31
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 4
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 4
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: LD_INT 5
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 4
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 5
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: LD_INT 3
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 3
33109: NEG
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 3
33120: NEG
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 4
33165: NEG
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 4
33176: NEG
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 4
33188: NEG
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 4
33211: NEG
33212: PUSH
33213: LD_INT 4
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 4
33223: NEG
33224: PUSH
33225: LD_INT 5
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 3
33235: NEG
33236: PUSH
33237: LD_INT 4
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 4
33259: NEG
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 5
33271: NEG
33272: PUSH
33273: LD_INT 4
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 5
33283: NEG
33284: PUSH
33285: LD_INT 5
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 3
33295: NEG
33296: PUSH
33297: LD_INT 5
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 5
33307: NEG
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 3
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 3
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 4
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: LD_INT 4
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 4
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 5
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 5
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 4
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 5
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33559: LD_ADDR_VAR 0 32
33563: PUSH
33564: LD_INT 4
33566: NEG
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 4
33577: NEG
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 3
33589: NEG
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 3
33600: NEG
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 4
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 5
33622: NEG
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 5
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 5
33645: NEG
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: LD_INT 3
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 3
33680: NEG
33681: PUSH
33682: LD_INT 4
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: LD_INT 3
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 4
33728: NEG
33729: PUSH
33730: LD_INT 3
33732: NEG
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 4
33740: NEG
33741: PUSH
33742: LD_INT 4
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 4
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 4
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 4
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 5
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 4
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 3
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 3
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 4
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 5
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 5
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 3
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 3
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 4
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 4
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 2
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 4
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 4
33971: PUSH
33972: LD_INT 4
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 4
33981: PUSH
33982: LD_INT 3
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 5
34001: PUSH
34002: LD_INT 5
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 4
34011: PUSH
34012: LD_INT 5
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 3
34021: PUSH
34022: LD_INT 4
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 5
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: LD_INT 5
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34106: LD_ADDR_VAR 0 33
34110: PUSH
34111: LD_INT 4
34113: NEG
34114: PUSH
34115: LD_INT 4
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: LD_INT 5
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: LD_INT 4
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 3
34149: NEG
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 4
34161: NEG
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 5
34173: NEG
34174: PUSH
34175: LD_INT 4
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 5
34185: NEG
34186: PUSH
34187: LD_INT 5
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 3
34197: NEG
34198: PUSH
34199: LD_INT 5
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 5
34209: NEG
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 3
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 4
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 3
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: LD_INT 4
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: LD_INT 2
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 2
34311: NEG
34312: PUSH
34313: LD_INT 4
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 4
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 4
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 5
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 5
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 4
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 3
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 5
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 4
34436: PUSH
34437: LD_INT 3
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 4
34446: PUSH
34447: LD_INT 4
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 4
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: LD_INT 4
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: LD_INT 4
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 4
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 5
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34644: LD_ADDR_VAR 0 34
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 4
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 5
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 4
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 3
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 3
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 4
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 5
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: LD_INT 3
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: LD_INT 5
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 4
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 4
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 4
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 4
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: LD_INT 4
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 5
34876: PUSH
34877: LD_INT 5
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 4
34886: PUSH
34887: LD_INT 5
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 3
34896: PUSH
34897: LD_INT 4
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 5
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: LD_INT 5
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: LD_INT 3
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 4
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 4
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: LD_INT 3
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 2
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 4
35029: NEG
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 4
35040: NEG
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: NEG
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 4
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 5
35085: NEG
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 5
35096: NEG
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 5
35108: NEG
35109: PUSH
35110: LD_INT 2
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 3
35120: NEG
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// end ; end ;
35176: GO 35179
35178: POP
// case btype of b_depot , b_warehouse :
35179: LD_VAR 0 1
35183: PUSH
35184: LD_INT 0
35186: DOUBLE
35187: EQUAL
35188: IFTRUE 35198
35190: LD_INT 1
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35198
35196: GO 35399
35198: POP
// case nation of nation_american :
35199: LD_VAR 0 5
35203: PUSH
35204: LD_INT 1
35206: DOUBLE
35207: EQUAL
35208: IFTRUE 35212
35210: GO 35268
35212: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35213: LD_ADDR_VAR 0 9
35217: PUSH
35218: LD_VAR 0 11
35222: PUSH
35223: LD_VAR 0 12
35227: PUSH
35228: LD_VAR 0 13
35232: PUSH
35233: LD_VAR 0 14
35237: PUSH
35238: LD_VAR 0 15
35242: PUSH
35243: LD_VAR 0 16
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: PUSH
35256: LD_VAR 0 4
35260: PUSH
35261: LD_INT 1
35263: PLUS
35264: ARRAY
35265: ST_TO_ADDR
35266: GO 35397
35268: LD_INT 2
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35276
35274: GO 35332
35276: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35277: LD_ADDR_VAR 0 9
35281: PUSH
35282: LD_VAR 0 17
35286: PUSH
35287: LD_VAR 0 18
35291: PUSH
35292: LD_VAR 0 19
35296: PUSH
35297: LD_VAR 0 20
35301: PUSH
35302: LD_VAR 0 21
35306: PUSH
35307: LD_VAR 0 22
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: PUSH
35320: LD_VAR 0 4
35324: PUSH
35325: LD_INT 1
35327: PLUS
35328: ARRAY
35329: ST_TO_ADDR
35330: GO 35397
35332: LD_INT 3
35334: DOUBLE
35335: EQUAL
35336: IFTRUE 35340
35338: GO 35396
35340: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35341: LD_ADDR_VAR 0 9
35345: PUSH
35346: LD_VAR 0 23
35350: PUSH
35351: LD_VAR 0 24
35355: PUSH
35356: LD_VAR 0 25
35360: PUSH
35361: LD_VAR 0 26
35365: PUSH
35366: LD_VAR 0 27
35370: PUSH
35371: LD_VAR 0 28
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: PUSH
35384: LD_VAR 0 4
35388: PUSH
35389: LD_INT 1
35391: PLUS
35392: ARRAY
35393: ST_TO_ADDR
35394: GO 35397
35396: POP
35397: GO 35952
35399: LD_INT 2
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35413
35405: LD_INT 3
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35413
35411: GO 35469
35413: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35414: LD_ADDR_VAR 0 9
35418: PUSH
35419: LD_VAR 0 29
35423: PUSH
35424: LD_VAR 0 30
35428: PUSH
35429: LD_VAR 0 31
35433: PUSH
35434: LD_VAR 0 32
35438: PUSH
35439: LD_VAR 0 33
35443: PUSH
35444: LD_VAR 0 34
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: PUSH
35457: LD_VAR 0 4
35461: PUSH
35462: LD_INT 1
35464: PLUS
35465: ARRAY
35466: ST_TO_ADDR
35467: GO 35952
35469: LD_INT 16
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35531
35475: LD_INT 17
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35531
35481: LD_INT 18
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35531
35487: LD_INT 19
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35531
35493: LD_INT 22
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35531
35499: LD_INT 20
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35531
35505: LD_INT 21
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35531
35511: LD_INT 23
35513: DOUBLE
35514: EQUAL
35515: IFTRUE 35531
35517: LD_INT 24
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35531
35523: LD_INT 25
35525: DOUBLE
35526: EQUAL
35527: IFTRUE 35531
35529: GO 35587
35531: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_VAR 0 35
35541: PUSH
35542: LD_VAR 0 36
35546: PUSH
35547: LD_VAR 0 37
35551: PUSH
35552: LD_VAR 0 38
35556: PUSH
35557: LD_VAR 0 39
35561: PUSH
35562: LD_VAR 0 40
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: PUSH
35575: LD_VAR 0 4
35579: PUSH
35580: LD_INT 1
35582: PLUS
35583: ARRAY
35584: ST_TO_ADDR
35585: GO 35952
35587: LD_INT 6
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35643
35593: LD_INT 7
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35643
35599: LD_INT 8
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35643
35605: LD_INT 13
35607: DOUBLE
35608: EQUAL
35609: IFTRUE 35643
35611: LD_INT 12
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35643
35617: LD_INT 15
35619: DOUBLE
35620: EQUAL
35621: IFTRUE 35643
35623: LD_INT 11
35625: DOUBLE
35626: EQUAL
35627: IFTRUE 35643
35629: LD_INT 14
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35643
35635: LD_INT 10
35637: DOUBLE
35638: EQUAL
35639: IFTRUE 35643
35641: GO 35699
35643: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35644: LD_ADDR_VAR 0 9
35648: PUSH
35649: LD_VAR 0 41
35653: PUSH
35654: LD_VAR 0 42
35658: PUSH
35659: LD_VAR 0 43
35663: PUSH
35664: LD_VAR 0 44
35668: PUSH
35669: LD_VAR 0 45
35673: PUSH
35674: LD_VAR 0 46
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: PUSH
35687: LD_VAR 0 4
35691: PUSH
35692: LD_INT 1
35694: PLUS
35695: ARRAY
35696: ST_TO_ADDR
35697: GO 35952
35699: LD_INT 36
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35763
35707: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35708: LD_ADDR_VAR 0 9
35712: PUSH
35713: LD_VAR 0 47
35717: PUSH
35718: LD_VAR 0 48
35722: PUSH
35723: LD_VAR 0 49
35727: PUSH
35728: LD_VAR 0 50
35732: PUSH
35733: LD_VAR 0 51
35737: PUSH
35738: LD_VAR 0 52
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: PUSH
35751: LD_VAR 0 4
35755: PUSH
35756: LD_INT 1
35758: PLUS
35759: ARRAY
35760: ST_TO_ADDR
35761: GO 35952
35763: LD_INT 4
35765: DOUBLE
35766: EQUAL
35767: IFTRUE 35789
35769: LD_INT 5
35771: DOUBLE
35772: EQUAL
35773: IFTRUE 35789
35775: LD_INT 34
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35789
35781: LD_INT 37
35783: DOUBLE
35784: EQUAL
35785: IFTRUE 35789
35787: GO 35845
35789: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35790: LD_ADDR_VAR 0 9
35794: PUSH
35795: LD_VAR 0 53
35799: PUSH
35800: LD_VAR 0 54
35804: PUSH
35805: LD_VAR 0 55
35809: PUSH
35810: LD_VAR 0 56
35814: PUSH
35815: LD_VAR 0 57
35819: PUSH
35820: LD_VAR 0 58
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: PUSH
35833: LD_VAR 0 4
35837: PUSH
35838: LD_INT 1
35840: PLUS
35841: ARRAY
35842: ST_TO_ADDR
35843: GO 35952
35845: LD_INT 31
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35895
35851: LD_INT 32
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35895
35857: LD_INT 33
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35895
35863: LD_INT 27
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35895
35869: LD_INT 26
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35895
35875: LD_INT 28
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35895
35881: LD_INT 29
35883: DOUBLE
35884: EQUAL
35885: IFTRUE 35895
35887: LD_INT 30
35889: DOUBLE
35890: EQUAL
35891: IFTRUE 35895
35893: GO 35951
35895: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: LD_VAR 0 59
35905: PUSH
35906: LD_VAR 0 60
35910: PUSH
35911: LD_VAR 0 61
35915: PUSH
35916: LD_VAR 0 62
35920: PUSH
35921: LD_VAR 0 63
35925: PUSH
35926: LD_VAR 0 64
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: PUSH
35939: LD_VAR 0 4
35943: PUSH
35944: LD_INT 1
35946: PLUS
35947: ARRAY
35948: ST_TO_ADDR
35949: GO 35952
35951: POP
// temp_list2 = [ ] ;
35952: LD_ADDR_VAR 0 10
35956: PUSH
35957: EMPTY
35958: ST_TO_ADDR
// for i in temp_list do
35959: LD_ADDR_VAR 0 8
35963: PUSH
35964: LD_VAR 0 9
35968: PUSH
35969: FOR_IN
35970: IFFALSE 36022
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35972: LD_ADDR_VAR 0 10
35976: PUSH
35977: LD_VAR 0 10
35981: PUSH
35982: LD_VAR 0 8
35986: PUSH
35987: LD_INT 1
35989: ARRAY
35990: PUSH
35991: LD_VAR 0 2
35995: PLUS
35996: PUSH
35997: LD_VAR 0 8
36001: PUSH
36002: LD_INT 2
36004: ARRAY
36005: PUSH
36006: LD_VAR 0 3
36010: PLUS
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: ADD
36019: ST_TO_ADDR
36020: GO 35969
36022: POP
36023: POP
// result = temp_list2 ;
36024: LD_ADDR_VAR 0 7
36028: PUSH
36029: LD_VAR 0 10
36033: ST_TO_ADDR
// end ;
36034: LD_VAR 0 7
36038: RET
// export function EnemyInRange ( unit , dist ) ; begin
36039: LD_INT 0
36041: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 255
36056: PPUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 250
36066: PPUSH
36067: LD_VAR 0 1
36071: PPUSH
36072: CALL_OW 251
36076: PPUSH
36077: LD_VAR 0 2
36081: PPUSH
36082: CALL 9296 0 4
36086: PUSH
36087: LD_INT 4
36089: ARRAY
36090: ST_TO_ADDR
// end ;
36091: LD_VAR 0 3
36095: RET
// export function PlayerSeeMe ( unit ) ; begin
36096: LD_INT 0
36098: PPUSH
// result := See ( your_side , unit ) ;
36099: LD_ADDR_VAR 0 2
36103: PUSH
36104: LD_OWVAR 2
36108: PPUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 292
36118: ST_TO_ADDR
// end ;
36119: LD_VAR 0 2
36123: RET
// export function ReverseDir ( unit ) ; begin
36124: LD_INT 0
36126: PPUSH
// if not unit then
36127: LD_VAR 0 1
36131: NOT
36132: IFFALSE 36136
// exit ;
36134: GO 36159
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36136: LD_ADDR_VAR 0 2
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 254
36150: PUSH
36151: LD_INT 3
36153: PLUS
36154: PUSH
36155: LD_INT 6
36157: MOD
36158: ST_TO_ADDR
// end ;
36159: LD_VAR 0 2
36163: RET
// export function ReverseArray ( array ) ; var i ; begin
36164: LD_INT 0
36166: PPUSH
36167: PPUSH
// if not array then
36168: LD_VAR 0 1
36172: NOT
36173: IFFALSE 36177
// exit ;
36175: GO 36232
// result := [ ] ;
36177: LD_ADDR_VAR 0 2
36181: PUSH
36182: EMPTY
36183: ST_TO_ADDR
// for i := array downto 1 do
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: DOUBLE
36190: LD_VAR 0 1
36194: INC
36195: ST_TO_ADDR
36196: LD_INT 1
36198: PUSH
36199: FOR_DOWNTO
36200: IFFALSE 36230
// result := Join ( result , array [ i ] ) ;
36202: LD_ADDR_VAR 0 2
36206: PUSH
36207: LD_VAR 0 2
36211: PPUSH
36212: LD_VAR 0 1
36216: PUSH
36217: LD_VAR 0 3
36221: ARRAY
36222: PPUSH
36223: CALL 41084 0 2
36227: ST_TO_ADDR
36228: GO 36199
36230: POP
36231: POP
// end ;
36232: LD_VAR 0 2
36236: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36237: LD_INT 0
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
// if not unit or not hexes then
36245: LD_VAR 0 1
36249: NOT
36250: IFTRUE 36259
36252: PUSH
36253: LD_VAR 0 2
36257: NOT
36258: OR
36259: IFFALSE 36263
// exit ;
36261: GO 36386
// dist := 9999 ;
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: LD_INT 9999
36270: ST_TO_ADDR
// for i = 1 to hexes do
36271: LD_ADDR_VAR 0 4
36275: PUSH
36276: DOUBLE
36277: LD_INT 1
36279: DEC
36280: ST_TO_ADDR
36281: LD_VAR 0 2
36285: PUSH
36286: FOR_TO
36287: IFFALSE 36374
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36289: LD_ADDR_VAR 0 6
36293: PUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_VAR 0 4
36308: ARRAY
36309: PUSH
36310: LD_INT 1
36312: ARRAY
36313: PPUSH
36314: LD_VAR 0 2
36318: PUSH
36319: LD_VAR 0 4
36323: ARRAY
36324: PUSH
36325: LD_INT 2
36327: ARRAY
36328: PPUSH
36329: CALL_OW 297
36333: ST_TO_ADDR
// if tdist < dist then
36334: LD_VAR 0 6
36338: PUSH
36339: LD_VAR 0 5
36343: LESS
36344: IFFALSE 36372
// begin hex := hexes [ i ] ;
36346: LD_ADDR_VAR 0 8
36350: PUSH
36351: LD_VAR 0 2
36355: PUSH
36356: LD_VAR 0 4
36360: ARRAY
36361: ST_TO_ADDR
// dist := tdist ;
36362: LD_ADDR_VAR 0 5
36366: PUSH
36367: LD_VAR 0 6
36371: ST_TO_ADDR
// end ; end ;
36372: GO 36286
36374: POP
36375: POP
// result := hex ;
36376: LD_ADDR_VAR 0 3
36380: PUSH
36381: LD_VAR 0 8
36385: ST_TO_ADDR
// end ;
36386: LD_VAR 0 3
36390: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36391: LD_INT 0
36393: PPUSH
36394: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36395: LD_VAR 0 1
36399: NOT
36400: IFTRUE 36439
36402: PUSH
36403: LD_VAR 0 1
36407: PUSH
36408: LD_INT 21
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 23
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PPUSH
36432: CALL_OW 69
36436: IN
36437: NOT
36438: OR
36439: IFFALSE 36443
// exit ;
36441: GO 36490
// for i = 1 to 3 do
36443: LD_ADDR_VAR 0 3
36447: PUSH
36448: DOUBLE
36449: LD_INT 1
36451: DEC
36452: ST_TO_ADDR
36453: LD_INT 3
36455: PUSH
36456: FOR_TO
36457: IFFALSE 36488
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 250
36468: PPUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 251
36478: PPUSH
36479: LD_INT 1
36481: PPUSH
36482: CALL_OW 453
36486: GO 36456
36488: POP
36489: POP
// end ;
36490: LD_VAR 0 2
36494: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36495: LD_INT 0
36497: PPUSH
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
36502: PPUSH
// if not unit or not enemy_unit then
36503: LD_VAR 0 1
36507: NOT
36508: IFTRUE 36517
36510: PUSH
36511: LD_VAR 0 2
36515: NOT
36516: OR
36517: IFFALSE 36521
// exit ;
36519: GO 37002
// if GetLives ( i ) < 250 then
36521: LD_VAR 0 4
36525: PPUSH
36526: CALL_OW 256
36530: PUSH
36531: LD_INT 250
36533: LESS
36534: IFFALSE 36547
// begin ComAutodestruct ( i ) ;
36536: LD_VAR 0 4
36540: PPUSH
36541: CALL 36391 0 1
// exit ;
36545: GO 37002
// end ; x := GetX ( enemy_unit ) ;
36547: LD_ADDR_VAR 0 7
36551: PUSH
36552: LD_VAR 0 2
36556: PPUSH
36557: CALL_OW 250
36561: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36562: LD_ADDR_VAR 0 8
36566: PUSH
36567: LD_VAR 0 2
36571: PPUSH
36572: CALL_OW 251
36576: ST_TO_ADDR
// if not x or not y then
36577: LD_VAR 0 7
36581: NOT
36582: IFTRUE 36591
36584: PUSH
36585: LD_VAR 0 8
36589: NOT
36590: OR
36591: IFFALSE 36595
// exit ;
36593: GO 37002
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36595: LD_ADDR_VAR 0 6
36599: PUSH
36600: LD_VAR 0 7
36604: PPUSH
36605: LD_INT 0
36607: PPUSH
36608: LD_INT 4
36610: PPUSH
36611: CALL_OW 272
36615: PUSH
36616: LD_VAR 0 8
36620: PPUSH
36621: LD_INT 0
36623: PPUSH
36624: LD_INT 4
36626: PPUSH
36627: CALL_OW 273
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_VAR 0 7
36640: PPUSH
36641: LD_INT 1
36643: PPUSH
36644: LD_INT 4
36646: PPUSH
36647: CALL_OW 272
36651: PUSH
36652: LD_VAR 0 8
36656: PPUSH
36657: LD_INT 1
36659: PPUSH
36660: LD_INT 4
36662: PPUSH
36663: CALL_OW 273
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_VAR 0 7
36676: PPUSH
36677: LD_INT 2
36679: PPUSH
36680: LD_INT 4
36682: PPUSH
36683: CALL_OW 272
36687: PUSH
36688: LD_VAR 0 8
36692: PPUSH
36693: LD_INT 2
36695: PPUSH
36696: LD_INT 4
36698: PPUSH
36699: CALL_OW 273
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_VAR 0 7
36712: PPUSH
36713: LD_INT 3
36715: PPUSH
36716: LD_INT 4
36718: PPUSH
36719: CALL_OW 272
36723: PUSH
36724: LD_VAR 0 8
36728: PPUSH
36729: LD_INT 3
36731: PPUSH
36732: LD_INT 4
36734: PPUSH
36735: CALL_OW 273
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_VAR 0 7
36748: PPUSH
36749: LD_INT 4
36751: PPUSH
36752: LD_INT 4
36754: PPUSH
36755: CALL_OW 272
36759: PUSH
36760: LD_VAR 0 8
36764: PPUSH
36765: LD_INT 4
36767: PPUSH
36768: LD_INT 4
36770: PPUSH
36771: CALL_OW 273
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_VAR 0 7
36784: PPUSH
36785: LD_INT 5
36787: PPUSH
36788: LD_INT 4
36790: PPUSH
36791: CALL_OW 272
36795: PUSH
36796: LD_VAR 0 8
36800: PPUSH
36801: LD_INT 5
36803: PPUSH
36804: LD_INT 4
36806: PPUSH
36807: CALL_OW 273
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// for i = tmp downto 1 do
36824: LD_ADDR_VAR 0 4
36828: PUSH
36829: DOUBLE
36830: LD_VAR 0 6
36834: INC
36835: ST_TO_ADDR
36836: LD_INT 1
36838: PUSH
36839: FOR_DOWNTO
36840: IFFALSE 36943
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36842: LD_VAR 0 6
36846: PUSH
36847: LD_VAR 0 4
36851: ARRAY
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PPUSH
36857: LD_VAR 0 6
36861: PUSH
36862: LD_VAR 0 4
36866: ARRAY
36867: PUSH
36868: LD_INT 2
36870: ARRAY
36871: PPUSH
36872: CALL_OW 488
36876: NOT
36877: IFTRUE 36919
36879: PUSH
36880: LD_VAR 0 6
36884: PUSH
36885: LD_VAR 0 4
36889: ARRAY
36890: PUSH
36891: LD_INT 1
36893: ARRAY
36894: PPUSH
36895: LD_VAR 0 6
36899: PUSH
36900: LD_VAR 0 4
36904: ARRAY
36905: PUSH
36906: LD_INT 2
36908: ARRAY
36909: PPUSH
36910: CALL_OW 428
36914: PUSH
36915: LD_INT 0
36917: NONEQUAL
36918: OR
36919: IFFALSE 36941
// tmp := Delete ( tmp , i ) ;
36921: LD_ADDR_VAR 0 6
36925: PUSH
36926: LD_VAR 0 6
36930: PPUSH
36931: LD_VAR 0 4
36935: PPUSH
36936: CALL_OW 3
36940: ST_TO_ADDR
36941: GO 36839
36943: POP
36944: POP
// j := GetClosestHex ( unit , tmp ) ;
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: LD_VAR 0 6
36959: PPUSH
36960: CALL 36237 0 2
36964: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36965: LD_VAR 0 1
36969: PPUSH
36970: LD_VAR 0 5
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: LD_VAR 0 5
36983: PUSH
36984: LD_INT 2
36986: ARRAY
36987: PPUSH
36988: CALL_OW 111
// result := j ;
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_VAR 0 5
37001: ST_TO_ADDR
// end ;
37002: LD_VAR 0 3
37006: RET
// export function PrepareApemanSoldier ( ) ; begin
37007: LD_INT 0
37009: PPUSH
// uc_nation := 0 ;
37010: LD_ADDR_OWVAR 21
37014: PUSH
37015: LD_INT 0
37017: ST_TO_ADDR
// hc_sex := sex_male ;
37018: LD_ADDR_OWVAR 27
37022: PUSH
37023: LD_INT 1
37025: ST_TO_ADDR
// hc_name :=  ;
37026: LD_ADDR_OWVAR 26
37030: PUSH
37031: LD_STRING 
37033: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37034: LD_ADDR_OWVAR 28
37038: PUSH
37039: LD_INT 15
37041: ST_TO_ADDR
// hc_gallery :=  ;
37042: LD_ADDR_OWVAR 33
37046: PUSH
37047: LD_STRING 
37049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37050: LD_ADDR_OWVAR 31
37054: PUSH
37055: LD_INT 0
37057: PPUSH
37058: LD_INT 3
37060: PPUSH
37061: CALL_OW 12
37065: PUSH
37066: LD_INT 0
37068: PPUSH
37069: LD_INT 3
37071: PPUSH
37072: CALL_OW 12
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37089: LD_ADDR_OWVAR 29
37093: PUSH
37094: LD_INT 10
37096: PUSH
37097: LD_INT 12
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// end ;
37104: LD_VAR 0 1
37108: RET
// export function PrepareApemanEngineer ( ) ; begin
37109: LD_INT 0
37111: PPUSH
// uc_nation := 0 ;
37112: LD_ADDR_OWVAR 21
37116: PUSH
37117: LD_INT 0
37119: ST_TO_ADDR
// hc_sex := sex_male ;
37120: LD_ADDR_OWVAR 27
37124: PUSH
37125: LD_INT 1
37127: ST_TO_ADDR
// hc_name :=  ;
37128: LD_ADDR_OWVAR 26
37132: PUSH
37133: LD_STRING 
37135: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37136: LD_ADDR_OWVAR 28
37140: PUSH
37141: LD_INT 16
37143: ST_TO_ADDR
// hc_gallery :=  ;
37144: LD_ADDR_OWVAR 33
37148: PUSH
37149: LD_STRING 
37151: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37152: LD_ADDR_OWVAR 31
37156: PUSH
37157: LD_INT 0
37159: PPUSH
37160: LD_INT 3
37162: PPUSH
37163: CALL_OW 12
37167: PUSH
37168: LD_INT 0
37170: PPUSH
37171: LD_INT 3
37173: PPUSH
37174: CALL_OW 12
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37191: LD_ADDR_OWVAR 29
37195: PUSH
37196: LD_INT 10
37198: PUSH
37199: LD_INT 12
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: ST_TO_ADDR
// end ;
37206: LD_VAR 0 1
37210: RET
// export function PrepareApeman ( agressivity ) ; begin
37211: LD_INT 0
37213: PPUSH
// uc_side := 0 ;
37214: LD_ADDR_OWVAR 20
37218: PUSH
37219: LD_INT 0
37221: ST_TO_ADDR
// uc_nation := 0 ;
37222: LD_ADDR_OWVAR 21
37226: PUSH
37227: LD_INT 0
37229: ST_TO_ADDR
// hc_sex := sex_male ;
37230: LD_ADDR_OWVAR 27
37234: PUSH
37235: LD_INT 1
37237: ST_TO_ADDR
// hc_class := class_apeman ;
37238: LD_ADDR_OWVAR 28
37242: PUSH
37243: LD_INT 12
37245: ST_TO_ADDR
// hc_gallery :=  ;
37246: LD_ADDR_OWVAR 33
37250: PUSH
37251: LD_STRING 
37253: ST_TO_ADDR
// hc_name :=  ;
37254: LD_ADDR_OWVAR 26
37258: PUSH
37259: LD_STRING 
37261: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37262: LD_ADDR_OWVAR 29
37266: PUSH
37267: LD_INT 10
37269: PUSH
37270: LD_INT 12
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: ST_TO_ADDR
// if agressivity = 0 then
37277: LD_VAR 0 1
37281: PUSH
37282: LD_INT 0
37284: EQUAL
37285: IFFALSE 37297
// hc_agressivity := 0 else
37287: LD_ADDR_OWVAR 35
37291: PUSH
37292: LD_INT 0
37294: ST_TO_ADDR
37295: GO 37318
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37297: LD_ADDR_OWVAR 35
37301: PUSH
37302: LD_VAR 0 1
37306: NEG
37307: PPUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 12
37317: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37318: LD_ADDR_OWVAR 31
37322: PUSH
37323: LD_INT 0
37325: PPUSH
37326: LD_INT 3
37328: PPUSH
37329: CALL_OW 12
37333: PUSH
37334: LD_INT 0
37336: PPUSH
37337: LD_INT 3
37339: PPUSH
37340: CALL_OW 12
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// end ;
37357: LD_VAR 0 2
37361: RET
// export function PrepareTiger ( agressivity ) ; begin
37362: LD_INT 0
37364: PPUSH
// uc_side := 0 ;
37365: LD_ADDR_OWVAR 20
37369: PUSH
37370: LD_INT 0
37372: ST_TO_ADDR
// uc_nation := 0 ;
37373: LD_ADDR_OWVAR 21
37377: PUSH
37378: LD_INT 0
37380: ST_TO_ADDR
// InitHc ;
37381: CALL_OW 19
// hc_class := class_tiger ;
37385: LD_ADDR_OWVAR 28
37389: PUSH
37390: LD_INT 14
37392: ST_TO_ADDR
// hc_gallery :=  ;
37393: LD_ADDR_OWVAR 33
37397: PUSH
37398: LD_STRING 
37400: ST_TO_ADDR
// hc_name :=  ;
37401: LD_ADDR_OWVAR 26
37405: PUSH
37406: LD_STRING 
37408: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37409: LD_ADDR_OWVAR 35
37413: PUSH
37414: LD_VAR 0 1
37418: NEG
37419: PPUSH
37420: LD_VAR 0 1
37424: PPUSH
37425: CALL_OW 12
37429: ST_TO_ADDR
// end ;
37430: LD_VAR 0 2
37434: RET
// export function PrepareEnchidna ( ) ; begin
37435: LD_INT 0
37437: PPUSH
// uc_side := 0 ;
37438: LD_ADDR_OWVAR 20
37442: PUSH
37443: LD_INT 0
37445: ST_TO_ADDR
// uc_nation := 0 ;
37446: LD_ADDR_OWVAR 21
37450: PUSH
37451: LD_INT 0
37453: ST_TO_ADDR
// InitHc ;
37454: CALL_OW 19
// hc_class := class_baggie ;
37458: LD_ADDR_OWVAR 28
37462: PUSH
37463: LD_INT 13
37465: ST_TO_ADDR
// hc_gallery :=  ;
37466: LD_ADDR_OWVAR 33
37470: PUSH
37471: LD_STRING 
37473: ST_TO_ADDR
// hc_name :=  ;
37474: LD_ADDR_OWVAR 26
37478: PUSH
37479: LD_STRING 
37481: ST_TO_ADDR
// end ;
37482: LD_VAR 0 1
37486: RET
// export function PrepareFrog ( ) ; begin
37487: LD_INT 0
37489: PPUSH
// uc_side := 0 ;
37490: LD_ADDR_OWVAR 20
37494: PUSH
37495: LD_INT 0
37497: ST_TO_ADDR
// uc_nation := 0 ;
37498: LD_ADDR_OWVAR 21
37502: PUSH
37503: LD_INT 0
37505: ST_TO_ADDR
// InitHc ;
37506: CALL_OW 19
// hc_class := class_frog ;
37510: LD_ADDR_OWVAR 28
37514: PUSH
37515: LD_INT 19
37517: ST_TO_ADDR
// hc_gallery :=  ;
37518: LD_ADDR_OWVAR 33
37522: PUSH
37523: LD_STRING 
37525: ST_TO_ADDR
// hc_name :=  ;
37526: LD_ADDR_OWVAR 26
37530: PUSH
37531: LD_STRING 
37533: ST_TO_ADDR
// end ;
37534: LD_VAR 0 1
37538: RET
// export function PrepareFish ( ) ; begin
37539: LD_INT 0
37541: PPUSH
// uc_side := 0 ;
37542: LD_ADDR_OWVAR 20
37546: PUSH
37547: LD_INT 0
37549: ST_TO_ADDR
// uc_nation := 0 ;
37550: LD_ADDR_OWVAR 21
37554: PUSH
37555: LD_INT 0
37557: ST_TO_ADDR
// InitHc ;
37558: CALL_OW 19
// hc_class := class_fish ;
37562: LD_ADDR_OWVAR 28
37566: PUSH
37567: LD_INT 20
37569: ST_TO_ADDR
// hc_gallery :=  ;
37570: LD_ADDR_OWVAR 33
37574: PUSH
37575: LD_STRING 
37577: ST_TO_ADDR
// hc_name :=  ;
37578: LD_ADDR_OWVAR 26
37582: PUSH
37583: LD_STRING 
37585: ST_TO_ADDR
// end ;
37586: LD_VAR 0 1
37590: RET
// export function PrepareBird ( ) ; begin
37591: LD_INT 0
37593: PPUSH
// uc_side := 0 ;
37594: LD_ADDR_OWVAR 20
37598: PUSH
37599: LD_INT 0
37601: ST_TO_ADDR
// uc_nation := 0 ;
37602: LD_ADDR_OWVAR 21
37606: PUSH
37607: LD_INT 0
37609: ST_TO_ADDR
// InitHc ;
37610: CALL_OW 19
// hc_class := class_phororhacos ;
37614: LD_ADDR_OWVAR 28
37618: PUSH
37619: LD_INT 18
37621: ST_TO_ADDR
// hc_gallery :=  ;
37622: LD_ADDR_OWVAR 33
37626: PUSH
37627: LD_STRING 
37629: ST_TO_ADDR
// hc_name :=  ;
37630: LD_ADDR_OWVAR 26
37634: PUSH
37635: LD_STRING 
37637: ST_TO_ADDR
// end ;
37638: LD_VAR 0 1
37642: RET
// export function PrepareHorse ( ) ; begin
37643: LD_INT 0
37645: PPUSH
// uc_side := 0 ;
37646: LD_ADDR_OWVAR 20
37650: PUSH
37651: LD_INT 0
37653: ST_TO_ADDR
// uc_nation := 0 ;
37654: LD_ADDR_OWVAR 21
37658: PUSH
37659: LD_INT 0
37661: ST_TO_ADDR
// InitHc ;
37662: CALL_OW 19
// hc_class := class_horse ;
37666: LD_ADDR_OWVAR 28
37670: PUSH
37671: LD_INT 21
37673: ST_TO_ADDR
// hc_gallery :=  ;
37674: LD_ADDR_OWVAR 33
37678: PUSH
37679: LD_STRING 
37681: ST_TO_ADDR
// hc_name :=  ;
37682: LD_ADDR_OWVAR 26
37686: PUSH
37687: LD_STRING 
37689: ST_TO_ADDR
// end ;
37690: LD_VAR 0 1
37694: RET
// export function PrepareMastodont ( ) ; begin
37695: LD_INT 0
37697: PPUSH
// uc_side := 0 ;
37698: LD_ADDR_OWVAR 20
37702: PUSH
37703: LD_INT 0
37705: ST_TO_ADDR
// uc_nation := 0 ;
37706: LD_ADDR_OWVAR 21
37710: PUSH
37711: LD_INT 0
37713: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37714: LD_ADDR_OWVAR 37
37718: PUSH
37719: LD_INT 31
37721: ST_TO_ADDR
// vc_control := control_rider ;
37722: LD_ADDR_OWVAR 38
37726: PUSH
37727: LD_INT 4
37729: ST_TO_ADDR
// end ;
37730: LD_VAR 0 1
37734: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37735: LD_INT 0
37737: PPUSH
37738: PPUSH
37739: PPUSH
// uc_side = 0 ;
37740: LD_ADDR_OWVAR 20
37744: PUSH
37745: LD_INT 0
37747: ST_TO_ADDR
// uc_nation = 0 ;
37748: LD_ADDR_OWVAR 21
37752: PUSH
37753: LD_INT 0
37755: ST_TO_ADDR
// InitHc_All ( ) ;
37756: CALL_OW 584
// InitVc ;
37760: CALL_OW 20
// if mastodonts then
37764: LD_VAR 0 6
37768: IFFALSE 37835
// for i = 1 to mastodonts do
37770: LD_ADDR_VAR 0 11
37774: PUSH
37775: DOUBLE
37776: LD_INT 1
37778: DEC
37779: ST_TO_ADDR
37780: LD_VAR 0 6
37784: PUSH
37785: FOR_TO
37786: IFFALSE 37833
// begin vc_chassis := 31 ;
37788: LD_ADDR_OWVAR 37
37792: PUSH
37793: LD_INT 31
37795: ST_TO_ADDR
// vc_control := control_rider ;
37796: LD_ADDR_OWVAR 38
37800: PUSH
37801: LD_INT 4
37803: ST_TO_ADDR
// animal := CreateVehicle ;
37804: LD_ADDR_VAR 0 12
37808: PUSH
37809: CALL_OW 45
37813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37814: LD_VAR 0 12
37818: PPUSH
37819: LD_VAR 0 8
37823: PPUSH
37824: LD_INT 0
37826: PPUSH
37827: CALL 39977 0 3
// end ;
37831: GO 37785
37833: POP
37834: POP
// if horses then
37835: LD_VAR 0 5
37839: IFFALSE 37906
// for i = 1 to horses do
37841: LD_ADDR_VAR 0 11
37845: PUSH
37846: DOUBLE
37847: LD_INT 1
37849: DEC
37850: ST_TO_ADDR
37851: LD_VAR 0 5
37855: PUSH
37856: FOR_TO
37857: IFFALSE 37904
// begin hc_class := 21 ;
37859: LD_ADDR_OWVAR 28
37863: PUSH
37864: LD_INT 21
37866: ST_TO_ADDR
// hc_gallery :=  ;
37867: LD_ADDR_OWVAR 33
37871: PUSH
37872: LD_STRING 
37874: ST_TO_ADDR
// animal := CreateHuman ;
37875: LD_ADDR_VAR 0 12
37879: PUSH
37880: CALL_OW 44
37884: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37885: LD_VAR 0 12
37889: PPUSH
37890: LD_VAR 0 8
37894: PPUSH
37895: LD_INT 0
37897: PPUSH
37898: CALL 39977 0 3
// end ;
37902: GO 37856
37904: POP
37905: POP
// if birds then
37906: LD_VAR 0 1
37910: IFFALSE 37977
// for i = 1 to birds do
37912: LD_ADDR_VAR 0 11
37916: PUSH
37917: DOUBLE
37918: LD_INT 1
37920: DEC
37921: ST_TO_ADDR
37922: LD_VAR 0 1
37926: PUSH
37927: FOR_TO
37928: IFFALSE 37975
// begin hc_class := 18 ;
37930: LD_ADDR_OWVAR 28
37934: PUSH
37935: LD_INT 18
37937: ST_TO_ADDR
// hc_gallery =  ;
37938: LD_ADDR_OWVAR 33
37942: PUSH
37943: LD_STRING 
37945: ST_TO_ADDR
// animal := CreateHuman ;
37946: LD_ADDR_VAR 0 12
37950: PUSH
37951: CALL_OW 44
37955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37956: LD_VAR 0 12
37960: PPUSH
37961: LD_VAR 0 8
37965: PPUSH
37966: LD_INT 0
37968: PPUSH
37969: CALL 39977 0 3
// end ;
37973: GO 37927
37975: POP
37976: POP
// if tigers then
37977: LD_VAR 0 2
37981: IFFALSE 38065
// for i = 1 to tigers do
37983: LD_ADDR_VAR 0 11
37987: PUSH
37988: DOUBLE
37989: LD_INT 1
37991: DEC
37992: ST_TO_ADDR
37993: LD_VAR 0 2
37997: PUSH
37998: FOR_TO
37999: IFFALSE 38063
// begin hc_class = class_tiger ;
38001: LD_ADDR_OWVAR 28
38005: PUSH
38006: LD_INT 14
38008: ST_TO_ADDR
// hc_gallery =  ;
38009: LD_ADDR_OWVAR 33
38013: PUSH
38014: LD_STRING 
38016: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38017: LD_ADDR_OWVAR 35
38021: PUSH
38022: LD_INT 7
38024: NEG
38025: PPUSH
38026: LD_INT 7
38028: PPUSH
38029: CALL_OW 12
38033: ST_TO_ADDR
// animal := CreateHuman ;
38034: LD_ADDR_VAR 0 12
38038: PUSH
38039: CALL_OW 44
38043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38044: LD_VAR 0 12
38048: PPUSH
38049: LD_VAR 0 8
38053: PPUSH
38054: LD_INT 0
38056: PPUSH
38057: CALL 39977 0 3
// end ;
38061: GO 37998
38063: POP
38064: POP
// if apemans then
38065: LD_VAR 0 3
38069: IFFALSE 38192
// for i = 1 to apemans do
38071: LD_ADDR_VAR 0 11
38075: PUSH
38076: DOUBLE
38077: LD_INT 1
38079: DEC
38080: ST_TO_ADDR
38081: LD_VAR 0 3
38085: PUSH
38086: FOR_TO
38087: IFFALSE 38190
// begin hc_class = class_apeman ;
38089: LD_ADDR_OWVAR 28
38093: PUSH
38094: LD_INT 12
38096: ST_TO_ADDR
// hc_gallery =  ;
38097: LD_ADDR_OWVAR 33
38101: PUSH
38102: LD_STRING 
38104: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38105: LD_ADDR_OWVAR 35
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PPUSH
38114: LD_INT 2
38116: PPUSH
38117: CALL_OW 12
38121: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38122: LD_ADDR_OWVAR 31
38126: PUSH
38127: LD_INT 1
38129: PPUSH
38130: LD_INT 3
38132: PPUSH
38133: CALL_OW 12
38137: PUSH
38138: LD_INT 1
38140: PPUSH
38141: LD_INT 3
38143: PPUSH
38144: CALL_OW 12
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: ST_TO_ADDR
// animal := CreateHuman ;
38161: LD_ADDR_VAR 0 12
38165: PUSH
38166: CALL_OW 44
38170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38171: LD_VAR 0 12
38175: PPUSH
38176: LD_VAR 0 8
38180: PPUSH
38181: LD_INT 0
38183: PPUSH
38184: CALL 39977 0 3
// end ;
38188: GO 38086
38190: POP
38191: POP
// if enchidnas then
38192: LD_VAR 0 4
38196: IFFALSE 38263
// for i = 1 to enchidnas do
38198: LD_ADDR_VAR 0 11
38202: PUSH
38203: DOUBLE
38204: LD_INT 1
38206: DEC
38207: ST_TO_ADDR
38208: LD_VAR 0 4
38212: PUSH
38213: FOR_TO
38214: IFFALSE 38261
// begin hc_class = 13 ;
38216: LD_ADDR_OWVAR 28
38220: PUSH
38221: LD_INT 13
38223: ST_TO_ADDR
// hc_gallery =  ;
38224: LD_ADDR_OWVAR 33
38228: PUSH
38229: LD_STRING 
38231: ST_TO_ADDR
// animal := CreateHuman ;
38232: LD_ADDR_VAR 0 12
38236: PUSH
38237: CALL_OW 44
38241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38242: LD_VAR 0 12
38246: PPUSH
38247: LD_VAR 0 8
38251: PPUSH
38252: LD_INT 0
38254: PPUSH
38255: CALL 39977 0 3
// end ;
38259: GO 38213
38261: POP
38262: POP
// if fishes then
38263: LD_VAR 0 7
38267: IFFALSE 38334
// for i = 1 to fishes do
38269: LD_ADDR_VAR 0 11
38273: PUSH
38274: DOUBLE
38275: LD_INT 1
38277: DEC
38278: ST_TO_ADDR
38279: LD_VAR 0 7
38283: PUSH
38284: FOR_TO
38285: IFFALSE 38332
// begin hc_class = 20 ;
38287: LD_ADDR_OWVAR 28
38291: PUSH
38292: LD_INT 20
38294: ST_TO_ADDR
// hc_gallery =  ;
38295: LD_ADDR_OWVAR 33
38299: PUSH
38300: LD_STRING 
38302: ST_TO_ADDR
// animal := CreateHuman ;
38303: LD_ADDR_VAR 0 12
38307: PUSH
38308: CALL_OW 44
38312: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38313: LD_VAR 0 12
38317: PPUSH
38318: LD_VAR 0 9
38322: PPUSH
38323: LD_INT 0
38325: PPUSH
38326: CALL 39977 0 3
// end ;
38330: GO 38284
38332: POP
38333: POP
// end ;
38334: LD_VAR 0 10
38338: RET
// export function WantHeal ( sci , unit ) ; begin
38339: LD_INT 0
38341: PPUSH
// if GetTaskList ( sci ) > 0 then
38342: LD_VAR 0 1
38346: PPUSH
38347: CALL_OW 437
38351: PUSH
38352: LD_INT 0
38354: GREATER
38355: IFFALSE 38427
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38357: LD_VAR 0 1
38361: PPUSH
38362: CALL_OW 437
38366: PUSH
38367: LD_INT 1
38369: ARRAY
38370: PUSH
38371: LD_INT 1
38373: ARRAY
38374: PUSH
38375: LD_STRING l
38377: EQUAL
38378: IFFALSE 38405
38380: PUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 437
38390: PUSH
38391: LD_INT 1
38393: ARRAY
38394: PUSH
38395: LD_INT 4
38397: ARRAY
38398: PUSH
38399: LD_VAR 0 2
38403: EQUAL
38404: AND
38405: IFFALSE 38417
// result := true else
38407: LD_ADDR_VAR 0 3
38411: PUSH
38412: LD_INT 1
38414: ST_TO_ADDR
38415: GO 38425
// result := false ;
38417: LD_ADDR_VAR 0 3
38421: PUSH
38422: LD_INT 0
38424: ST_TO_ADDR
// end else
38425: GO 38435
// result := false ;
38427: LD_ADDR_VAR 0 3
38431: PUSH
38432: LD_INT 0
38434: ST_TO_ADDR
// end ;
38435: LD_VAR 0 3
38439: RET
// export function HealTarget ( sci ) ; begin
38440: LD_INT 0
38442: PPUSH
// if not sci then
38443: LD_VAR 0 1
38447: NOT
38448: IFFALSE 38452
// exit ;
38450: GO 38517
// result := 0 ;
38452: LD_ADDR_VAR 0 2
38456: PUSH
38457: LD_INT 0
38459: ST_TO_ADDR
// if GetTaskList ( sci ) then
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL_OW 437
38469: IFFALSE 38517
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 437
38480: PUSH
38481: LD_INT 1
38483: ARRAY
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: PUSH
38489: LD_STRING l
38491: EQUAL
38492: IFFALSE 38517
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38494: LD_ADDR_VAR 0 2
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 437
38508: PUSH
38509: LD_INT 1
38511: ARRAY
38512: PUSH
38513: LD_INT 4
38515: ARRAY
38516: ST_TO_ADDR
// end ;
38517: LD_VAR 0 2
38521: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38522: LD_INT 0
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
// if not base_units then
38528: LD_VAR 0 1
38532: NOT
38533: IFFALSE 38537
// exit ;
38535: GO 38624
// result := false ;
38537: LD_ADDR_VAR 0 2
38541: PUSH
38542: LD_INT 0
38544: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38545: LD_ADDR_VAR 0 5
38549: PUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: LD_INT 21
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PPUSH
38565: CALL_OW 72
38569: ST_TO_ADDR
// if not tmp then
38570: LD_VAR 0 5
38574: NOT
38575: IFFALSE 38579
// exit ;
38577: GO 38624
// for i in tmp do
38579: LD_ADDR_VAR 0 3
38583: PUSH
38584: LD_VAR 0 5
38588: PUSH
38589: FOR_IN
38590: IFFALSE 38622
// begin result := EnemyInRange ( i , 22 ) ;
38592: LD_ADDR_VAR 0 2
38596: PUSH
38597: LD_VAR 0 3
38601: PPUSH
38602: LD_INT 22
38604: PPUSH
38605: CALL 36039 0 2
38609: ST_TO_ADDR
// if result then
38610: LD_VAR 0 2
38614: IFFALSE 38620
// exit ;
38616: POP
38617: POP
38618: GO 38624
// end ;
38620: GO 38589
38622: POP
38623: POP
// end ;
38624: LD_VAR 0 2
38628: RET
// export function FilterByTag ( units , tag ) ; begin
38629: LD_INT 0
38631: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38632: LD_ADDR_VAR 0 3
38636: PUSH
38637: LD_VAR 0 1
38641: PPUSH
38642: LD_INT 120
38644: PUSH
38645: LD_VAR 0 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PPUSH
38654: CALL_OW 72
38658: ST_TO_ADDR
// end ;
38659: LD_VAR 0 3
38663: RET
// export function IsDriver ( un ) ; begin
38664: LD_INT 0
38666: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38667: LD_ADDR_VAR 0 2
38671: PUSH
38672: LD_VAR 0 1
38676: PUSH
38677: LD_INT 55
38679: PUSH
38680: EMPTY
38681: LIST
38682: PPUSH
38683: CALL_OW 69
38687: IN
38688: ST_TO_ADDR
// end ;
38689: LD_VAR 0 2
38693: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38694: LD_INT 0
38696: PPUSH
38697: PPUSH
// list := [ ] ;
38698: LD_ADDR_VAR 0 5
38702: PUSH
38703: EMPTY
38704: ST_TO_ADDR
// case d of 0 :
38705: LD_VAR 0 3
38709: PUSH
38710: LD_INT 0
38712: DOUBLE
38713: EQUAL
38714: IFTRUE 38718
38716: GO 38851
38718: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38719: LD_ADDR_VAR 0 5
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 4
38731: MINUS
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 4
38740: MINUS
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: PUSH
38750: LD_VAR 0 1
38754: PUSH
38755: LD_INT 3
38757: MINUS
38758: PUSH
38759: LD_VAR 0 2
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: PUSH
38772: LD_VAR 0 1
38776: PUSH
38777: LD_INT 4
38779: PLUS
38780: PUSH
38781: LD_VAR 0 2
38785: PUSH
38786: LD_INT 4
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: PUSH
38794: LD_VAR 0 1
38798: PUSH
38799: LD_INT 3
38801: PLUS
38802: PUSH
38803: LD_VAR 0 2
38807: PUSH
38808: LD_INT 3
38810: PLUS
38811: PUSH
38812: LD_INT 5
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: PUSH
38820: LD_VAR 0 1
38824: PUSH
38825: LD_VAR 0 2
38829: PUSH
38830: LD_INT 4
38832: PLUS
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: ST_TO_ADDR
// end ; 1 :
38849: GO 39549
38851: LD_INT 1
38853: DOUBLE
38854: EQUAL
38855: IFTRUE 38859
38857: GO 38992
38859: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38860: LD_ADDR_VAR 0 5
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: LD_VAR 0 2
38874: PUSH
38875: LD_INT 4
38877: MINUS
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 3
38894: MINUS
38895: PUSH
38896: LD_VAR 0 2
38900: PUSH
38901: LD_INT 3
38903: MINUS
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: PUSH
38913: LD_VAR 0 1
38917: PUSH
38918: LD_INT 4
38920: MINUS
38921: PUSH
38922: LD_VAR 0 2
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: LD_VAR 0 1
38939: PUSH
38940: LD_VAR 0 2
38944: PUSH
38945: LD_INT 3
38947: PLUS
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: PUSH
38957: LD_VAR 0 1
38961: PUSH
38962: LD_INT 4
38964: PLUS
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: LD_INT 4
38973: PLUS
38974: PUSH
38975: LD_INT 5
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: ST_TO_ADDR
// end ; 2 :
38990: GO 39549
38992: LD_INT 2
38994: DOUBLE
38995: EQUAL
38996: IFTRUE 39000
38998: GO 39129
39000: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39001: LD_ADDR_VAR 0 5
39005: PUSH
39006: LD_VAR 0 1
39010: PUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 3
39018: MINUS
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: PUSH
39028: LD_VAR 0 1
39032: PUSH
39033: LD_INT 4
39035: PLUS
39036: PUSH
39037: LD_VAR 0 2
39041: PUSH
39042: LD_INT 4
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: PUSH
39050: LD_VAR 0 1
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 4
39062: PLUS
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: LD_VAR 0 1
39076: PUSH
39077: LD_INT 3
39079: MINUS
39080: PUSH
39081: LD_VAR 0 2
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: PUSH
39094: LD_VAR 0 1
39098: PUSH
39099: LD_INT 4
39101: MINUS
39102: PUSH
39103: LD_VAR 0 2
39107: PUSH
39108: LD_INT 4
39110: MINUS
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: ST_TO_ADDR
// end ; 3 :
39127: GO 39549
39129: LD_INT 3
39131: DOUBLE
39132: EQUAL
39133: IFTRUE 39137
39135: GO 39270
39137: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39138: LD_ADDR_VAR 0 5
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 3
39150: PLUS
39151: PUSH
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 4
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_INT 4
39172: PLUS
39173: PUSH
39174: LD_VAR 0 2
39178: PUSH
39179: LD_INT 4
39181: PLUS
39182: PUSH
39183: LD_INT 5
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: PUSH
39191: LD_VAR 0 1
39195: PUSH
39196: LD_INT 4
39198: MINUS
39199: PUSH
39200: LD_VAR 0 2
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: PUSH
39213: LD_VAR 0 1
39217: PUSH
39218: LD_VAR 0 2
39222: PUSH
39223: LD_INT 4
39225: MINUS
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: PUSH
39235: LD_VAR 0 1
39239: PUSH
39240: LD_INT 3
39242: MINUS
39243: PUSH
39244: LD_VAR 0 2
39248: PUSH
39249: LD_INT 3
39251: MINUS
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: ST_TO_ADDR
// end ; 4 :
39268: GO 39549
39270: LD_INT 4
39272: DOUBLE
39273: EQUAL
39274: IFTRUE 39278
39276: GO 39411
39278: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39279: LD_ADDR_VAR 0 5
39283: PUSH
39284: LD_VAR 0 1
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 4
39296: PLUS
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 1
39310: PUSH
39311: LD_INT 3
39313: PLUS
39314: PUSH
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 3
39322: PLUS
39323: PUSH
39324: LD_INT 5
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: PUSH
39332: LD_VAR 0 1
39336: PUSH
39337: LD_INT 4
39339: PLUS
39340: PUSH
39341: LD_VAR 0 2
39345: PUSH
39346: LD_INT 4
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: PUSH
39354: LD_VAR 0 1
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 3
39366: MINUS
39367: PUSH
39368: LD_INT 3
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: PUSH
39376: LD_VAR 0 1
39380: PUSH
39381: LD_INT 4
39383: MINUS
39384: PUSH
39385: LD_VAR 0 2
39389: PUSH
39390: LD_INT 4
39392: MINUS
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
// end ; 5 :
39409: GO 39549
39411: LD_INT 5
39413: DOUBLE
39414: EQUAL
39415: IFTRUE 39419
39417: GO 39548
39419: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39420: LD_ADDR_VAR 0 5
39424: PUSH
39425: LD_VAR 0 1
39429: PUSH
39430: LD_INT 4
39432: MINUS
39433: PUSH
39434: LD_VAR 0 2
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: LD_VAR 0 1
39451: PUSH
39452: LD_VAR 0 2
39456: PUSH
39457: LD_INT 4
39459: MINUS
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: PUSH
39469: LD_VAR 0 1
39473: PUSH
39474: LD_INT 4
39476: PLUS
39477: PUSH
39478: LD_VAR 0 2
39482: PUSH
39483: LD_INT 4
39485: PLUS
39486: PUSH
39487: LD_INT 5
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: PUSH
39495: LD_VAR 0 1
39499: PUSH
39500: LD_INT 3
39502: PLUS
39503: PUSH
39504: LD_VAR 0 2
39508: PUSH
39509: LD_INT 4
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: PUSH
39517: LD_VAR 0 1
39521: PUSH
39522: LD_VAR 0 2
39526: PUSH
39527: LD_INT 3
39529: PLUS
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: ST_TO_ADDR
// end ; end ;
39546: GO 39549
39548: POP
// result := list ;
39549: LD_ADDR_VAR 0 4
39553: PUSH
39554: LD_VAR 0 5
39558: ST_TO_ADDR
// end ;
39559: LD_VAR 0 4
39563: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39564: LD_INT 0
39566: PPUSH
39567: PPUSH
39568: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39569: LD_VAR 0 1
39573: NOT
39574: IFTRUE 39602
39576: PUSH
39577: LD_VAR 0 2
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: LD_INT 4
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: IN
39600: NOT
39601: OR
39602: IFFALSE 39606
// exit ;
39604: GO 39689
// tmp := [ ] ;
39606: LD_ADDR_VAR 0 5
39610: PUSH
39611: EMPTY
39612: ST_TO_ADDR
// for i in units do
39613: LD_ADDR_VAR 0 4
39617: PUSH
39618: LD_VAR 0 1
39622: PUSH
39623: FOR_IN
39624: IFFALSE 39658
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39626: LD_ADDR_VAR 0 5
39630: PUSH
39631: LD_VAR 0 5
39635: PPUSH
39636: LD_VAR 0 4
39640: PPUSH
39641: LD_VAR 0 2
39645: PPUSH
39646: CALL_OW 259
39650: PPUSH
39651: CALL 41084 0 2
39655: ST_TO_ADDR
39656: GO 39623
39658: POP
39659: POP
// if not tmp then
39660: LD_VAR 0 5
39664: NOT
39665: IFFALSE 39669
// exit ;
39667: GO 39689
// result := SortListByListDesc ( units , tmp ) ;
39669: LD_ADDR_VAR 0 3
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: LD_VAR 0 5
39683: PPUSH
39684: CALL_OW 77
39688: ST_TO_ADDR
// end ;
39689: LD_VAR 0 3
39693: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
39698: PPUSH
// result := false ;
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_INT 0
39706: ST_TO_ADDR
// if not building then
39707: LD_VAR 0 2
39711: NOT
39712: IFFALSE 39716
// exit ;
39714: GO 39860
// x := GetX ( building ) ;
39716: LD_ADDR_VAR 0 4
39720: PUSH
39721: LD_VAR 0 2
39725: PPUSH
39726: CALL_OW 250
39730: ST_TO_ADDR
// y := GetY ( building ) ;
39731: LD_ADDR_VAR 0 5
39735: PUSH
39736: LD_VAR 0 2
39740: PPUSH
39741: CALL_OW 251
39745: ST_TO_ADDR
// if not x or not y then
39746: LD_VAR 0 4
39750: NOT
39751: IFTRUE 39760
39753: PUSH
39754: LD_VAR 0 5
39758: NOT
39759: OR
39760: IFFALSE 39764
// exit ;
39762: GO 39860
// if GetTaskList ( unit ) then
39764: LD_VAR 0 1
39768: PPUSH
39769: CALL_OW 437
39773: IFFALSE 39860
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39775: LD_STRING e
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: CALL_OW 437
39787: PUSH
39788: LD_INT 1
39790: ARRAY
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: EQUAL
39796: IFFALSE 39823
39798: PUSH
39799: LD_VAR 0 4
39803: PUSH
39804: LD_VAR 0 1
39808: PPUSH
39809: CALL_OW 437
39813: PUSH
39814: LD_INT 1
39816: ARRAY
39817: PUSH
39818: LD_INT 2
39820: ARRAY
39821: EQUAL
39822: AND
39823: IFFALSE 39850
39825: PUSH
39826: LD_VAR 0 5
39830: PUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 437
39840: PUSH
39841: LD_INT 1
39843: ARRAY
39844: PUSH
39845: LD_INT 3
39847: ARRAY
39848: EQUAL
39849: AND
39850: IFFALSE 39860
// result := true end ;
39852: LD_ADDR_VAR 0 3
39856: PUSH
39857: LD_INT 1
39859: ST_TO_ADDR
// end ;
39860: LD_VAR 0 3
39864: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39865: LD_INT 0
39867: PPUSH
// result := false ;
39868: LD_ADDR_VAR 0 4
39872: PUSH
39873: LD_INT 0
39875: ST_TO_ADDR
// if GetTaskList ( unit ) then
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 437
39885: IFFALSE 39972
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39887: LD_STRING M
39889: PUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 437
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: PUSH
39904: LD_INT 1
39906: ARRAY
39907: EQUAL
39908: IFFALSE 39935
39910: PUSH
39911: LD_VAR 0 2
39915: PUSH
39916: LD_VAR 0 1
39920: PPUSH
39921: CALL_OW 437
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: PUSH
39930: LD_INT 2
39932: ARRAY
39933: EQUAL
39934: AND
39935: IFFALSE 39962
39937: PUSH
39938: LD_VAR 0 3
39942: PUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 437
39952: PUSH
39953: LD_INT 1
39955: ARRAY
39956: PUSH
39957: LD_INT 3
39959: ARRAY
39960: EQUAL
39961: AND
39962: IFFALSE 39972
// result := true ;
39964: LD_ADDR_VAR 0 4
39968: PUSH
39969: LD_INT 1
39971: ST_TO_ADDR
// end ; end ;
39972: LD_VAR 0 4
39976: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39977: LD_INT 0
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
// if not unit or not area then
39983: LD_VAR 0 1
39987: NOT
39988: IFTRUE 39997
39990: PUSH
39991: LD_VAR 0 2
39995: NOT
39996: OR
39997: IFFALSE 40001
// exit ;
39999: GO 40177
// tmp := AreaToList ( area , i ) ;
40001: LD_ADDR_VAR 0 6
40005: PUSH
40006: LD_VAR 0 2
40010: PPUSH
40011: LD_VAR 0 5
40015: PPUSH
40016: CALL_OW 517
40020: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40021: LD_ADDR_VAR 0 5
40025: PUSH
40026: DOUBLE
40027: LD_INT 1
40029: DEC
40030: ST_TO_ADDR
40031: LD_VAR 0 6
40035: PUSH
40036: LD_INT 1
40038: ARRAY
40039: PUSH
40040: FOR_TO
40041: IFFALSE 40175
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40043: LD_ADDR_VAR 0 7
40047: PUSH
40048: LD_VAR 0 6
40052: PUSH
40053: LD_INT 1
40055: ARRAY
40056: PUSH
40057: LD_VAR 0 5
40061: ARRAY
40062: PUSH
40063: LD_VAR 0 6
40067: PUSH
40068: LD_INT 2
40070: ARRAY
40071: PUSH
40072: LD_VAR 0 5
40076: ARRAY
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40082: LD_INT 92
40084: PUSH
40085: LD_VAR 0 7
40089: PUSH
40090: LD_INT 1
40092: ARRAY
40093: PUSH
40094: LD_VAR 0 7
40098: PUSH
40099: LD_INT 2
40101: ARRAY
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: PPUSH
40112: CALL_OW 69
40116: PUSH
40117: LD_INT 0
40119: EQUAL
40120: IFFALSE 40173
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40122: LD_VAR 0 1
40126: PPUSH
40127: LD_VAR 0 7
40131: PUSH
40132: LD_INT 1
40134: ARRAY
40135: PPUSH
40136: LD_VAR 0 7
40140: PUSH
40141: LD_INT 2
40143: ARRAY
40144: PPUSH
40145: LD_VAR 0 3
40149: PPUSH
40150: CALL_OW 48
// result := IsPlaced ( unit ) ;
40154: LD_ADDR_VAR 0 4
40158: PUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 305
40168: ST_TO_ADDR
// exit ;
40169: POP
40170: POP
40171: GO 40177
// end ; end ;
40173: GO 40040
40175: POP
40176: POP
// end ;
40177: LD_VAR 0 4
40181: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40182: LD_INT 0
40184: PPUSH
40185: PPUSH
40186: PPUSH
// if not side or side > 8 then
40187: LD_VAR 0 1
40191: NOT
40192: IFTRUE 40204
40194: PUSH
40195: LD_VAR 0 1
40199: PUSH
40200: LD_INT 8
40202: GREATER
40203: OR
40204: IFFALSE 40208
// exit ;
40206: GO 40395
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40208: LD_ADDR_VAR 0 4
40212: PUSH
40213: LD_INT 22
40215: PUSH
40216: LD_VAR 0 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 21
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PPUSH
40239: CALL_OW 69
40243: ST_TO_ADDR
// if not tmp then
40244: LD_VAR 0 4
40248: NOT
40249: IFFALSE 40253
// exit ;
40251: GO 40395
// enable_addtolog := true ;
40253: LD_ADDR_OWVAR 81
40257: PUSH
40258: LD_INT 1
40260: ST_TO_ADDR
// AddToLog ( [ ) ;
40261: LD_STRING [
40263: PPUSH
40264: CALL_OW 561
// for i in tmp do
40268: LD_ADDR_VAR 0 3
40272: PUSH
40273: LD_VAR 0 4
40277: PUSH
40278: FOR_IN
40279: IFFALSE 40386
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40281: LD_STRING [
40283: PUSH
40284: LD_VAR 0 3
40288: PPUSH
40289: CALL_OW 266
40293: STR
40294: PUSH
40295: LD_STRING , 
40297: STR
40298: PUSH
40299: LD_VAR 0 3
40303: PPUSH
40304: CALL_OW 250
40308: STR
40309: PUSH
40310: LD_STRING , 
40312: STR
40313: PUSH
40314: LD_VAR 0 3
40318: PPUSH
40319: CALL_OW 251
40323: STR
40324: PUSH
40325: LD_STRING , 
40327: STR
40328: PUSH
40329: LD_VAR 0 3
40333: PPUSH
40334: CALL_OW 254
40338: STR
40339: PUSH
40340: LD_STRING , 
40342: STR
40343: PUSH
40344: LD_VAR 0 3
40348: PPUSH
40349: LD_INT 1
40351: PPUSH
40352: CALL_OW 268
40356: STR
40357: PUSH
40358: LD_STRING , 
40360: STR
40361: PUSH
40362: LD_VAR 0 3
40366: PPUSH
40367: LD_INT 2
40369: PPUSH
40370: CALL_OW 268
40374: STR
40375: PUSH
40376: LD_STRING ],
40378: STR
40379: PPUSH
40380: CALL_OW 561
// end ;
40384: GO 40278
40386: POP
40387: POP
// AddToLog ( ]; ) ;
40388: LD_STRING ];
40390: PPUSH
40391: CALL_OW 561
// end ;
40395: LD_VAR 0 2
40399: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40400: LD_INT 0
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
// if not area or not rate or not max then
40407: LD_VAR 0 1
40411: NOT
40412: IFTRUE 40421
40414: PUSH
40415: LD_VAR 0 2
40419: NOT
40420: OR
40421: IFTRUE 40430
40423: PUSH
40424: LD_VAR 0 4
40428: NOT
40429: OR
40430: IFFALSE 40434
// exit ;
40432: GO 40623
// while 1 do
40434: LD_INT 1
40436: IFFALSE 40623
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40438: LD_ADDR_VAR 0 9
40442: PUSH
40443: LD_VAR 0 1
40447: PPUSH
40448: LD_INT 1
40450: PPUSH
40451: CALL_OW 287
40455: PUSH
40456: LD_INT 10
40458: MUL
40459: ST_TO_ADDR
// r := rate / 10 ;
40460: LD_ADDR_VAR 0 7
40464: PUSH
40465: LD_VAR 0 2
40469: PUSH
40470: LD_INT 10
40472: DIVREAL
40473: ST_TO_ADDR
// time := 1 1$00 ;
40474: LD_ADDR_VAR 0 8
40478: PUSH
40479: LD_INT 2100
40481: ST_TO_ADDR
// if amount < min then
40482: LD_VAR 0 9
40486: PUSH
40487: LD_VAR 0 3
40491: LESS
40492: IFFALSE 40510
// r := r * 2 else
40494: LD_ADDR_VAR 0 7
40498: PUSH
40499: LD_VAR 0 7
40503: PUSH
40504: LD_INT 2
40506: MUL
40507: ST_TO_ADDR
40508: GO 40536
// if amount > max then
40510: LD_VAR 0 9
40514: PUSH
40515: LD_VAR 0 4
40519: GREATER
40520: IFFALSE 40536
// r := r / 2 ;
40522: LD_ADDR_VAR 0 7
40526: PUSH
40527: LD_VAR 0 7
40531: PUSH
40532: LD_INT 2
40534: DIVREAL
40535: ST_TO_ADDR
// time := time / r ;
40536: LD_ADDR_VAR 0 8
40540: PUSH
40541: LD_VAR 0 8
40545: PUSH
40546: LD_VAR 0 7
40550: DIVREAL
40551: ST_TO_ADDR
// if time < 0 then
40552: LD_VAR 0 8
40556: PUSH
40557: LD_INT 0
40559: LESS
40560: IFFALSE 40577
// time := time * - 1 ;
40562: LD_ADDR_VAR 0 8
40566: PUSH
40567: LD_VAR 0 8
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: MUL
40576: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40577: LD_VAR 0 8
40581: PUSH
40582: LD_INT 35
40584: PPUSH
40585: LD_INT 875
40587: PPUSH
40588: CALL_OW 12
40592: PLUS
40593: PPUSH
40594: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40598: LD_INT 1
40600: PPUSH
40601: LD_INT 5
40603: PPUSH
40604: CALL_OW 12
40608: PPUSH
40609: LD_VAR 0 1
40613: PPUSH
40614: LD_INT 1
40616: PPUSH
40617: CALL_OW 55
// end ;
40621: GO 40434
// end ;
40623: LD_VAR 0 5
40627: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40628: LD_INT 0
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
// if not turrets or not factories then
40638: LD_VAR 0 1
40642: NOT
40643: IFTRUE 40652
40645: PUSH
40646: LD_VAR 0 2
40650: NOT
40651: OR
40652: IFFALSE 40656
// exit ;
40654: GO 40963
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40656: LD_ADDR_VAR 0 10
40660: PUSH
40661: LD_INT 5
40663: PUSH
40664: LD_INT 6
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 4
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 3
40683: PUSH
40684: LD_INT 5
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 24
40698: PUSH
40699: LD_INT 25
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 23
40708: PUSH
40709: LD_INT 27
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 42
40722: PUSH
40723: LD_INT 43
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 44
40732: PUSH
40733: LD_INT 46
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 45
40742: PUSH
40743: LD_INT 47
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
// result := [ ] ;
40760: LD_ADDR_VAR 0 3
40764: PUSH
40765: EMPTY
40766: ST_TO_ADDR
// for i in turrets do
40767: LD_ADDR_VAR 0 4
40771: PUSH
40772: LD_VAR 0 1
40776: PUSH
40777: FOR_IN
40778: IFFALSE 40961
// begin nat := GetNation ( i ) ;
40780: LD_ADDR_VAR 0 7
40784: PUSH
40785: LD_VAR 0 4
40789: PPUSH
40790: CALL_OW 248
40794: ST_TO_ADDR
// weapon := 0 ;
40795: LD_ADDR_VAR 0 8
40799: PUSH
40800: LD_INT 0
40802: ST_TO_ADDR
// if not nat then
40803: LD_VAR 0 7
40807: NOT
40808: IFFALSE 40812
// continue ;
40810: GO 40777
// for j in list [ nat ] do
40812: LD_ADDR_VAR 0 5
40816: PUSH
40817: LD_VAR 0 10
40821: PUSH
40822: LD_VAR 0 7
40826: ARRAY
40827: PUSH
40828: FOR_IN
40829: IFFALSE 40870
// if GetBWeapon ( i ) = j [ 1 ] then
40831: LD_VAR 0 4
40835: PPUSH
40836: CALL_OW 269
40840: PUSH
40841: LD_VAR 0 5
40845: PUSH
40846: LD_INT 1
40848: ARRAY
40849: EQUAL
40850: IFFALSE 40868
// begin weapon := j [ 2 ] ;
40852: LD_ADDR_VAR 0 8
40856: PUSH
40857: LD_VAR 0 5
40861: PUSH
40862: LD_INT 2
40864: ARRAY
40865: ST_TO_ADDR
// break ;
40866: GO 40870
// end ;
40868: GO 40828
40870: POP
40871: POP
// if not weapon then
40872: LD_VAR 0 8
40876: NOT
40877: IFFALSE 40881
// continue ;
40879: GO 40777
// for k in factories do
40881: LD_ADDR_VAR 0 6
40885: PUSH
40886: LD_VAR 0 2
40890: PUSH
40891: FOR_IN
40892: IFFALSE 40957
// begin weapons := AvailableWeaponList ( k ) ;
40894: LD_ADDR_VAR 0 9
40898: PUSH
40899: LD_VAR 0 6
40903: PPUSH
40904: CALL_OW 478
40908: ST_TO_ADDR
// if not weapons then
40909: LD_VAR 0 9
40913: NOT
40914: IFFALSE 40918
// continue ;
40916: GO 40891
// if weapon in weapons then
40918: LD_VAR 0 8
40922: PUSH
40923: LD_VAR 0 9
40927: IN
40928: IFFALSE 40955
// begin result := [ i , weapon ] ;
40930: LD_ADDR_VAR 0 3
40934: PUSH
40935: LD_VAR 0 4
40939: PUSH
40940: LD_VAR 0 8
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// exit ;
40949: POP
40950: POP
40951: POP
40952: POP
40953: GO 40963
// end ; end ;
40955: GO 40891
40957: POP
40958: POP
// end ;
40959: GO 40777
40961: POP
40962: POP
// end ;
40963: LD_VAR 0 3
40967: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40968: LD_INT 0
40970: PPUSH
// if not side or side > 8 then
40971: LD_VAR 0 3
40975: NOT
40976: IFTRUE 40988
40978: PUSH
40979: LD_VAR 0 3
40983: PUSH
40984: LD_INT 8
40986: GREATER
40987: OR
40988: IFFALSE 40992
// exit ;
40990: GO 41051
// if not range then
40992: LD_VAR 0 4
40996: NOT
40997: IFFALSE 41008
// range := - 12 ;
40999: LD_ADDR_VAR 0 4
41003: PUSH
41004: LD_INT 12
41006: NEG
41007: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41008: LD_VAR 0 1
41012: PPUSH
41013: LD_VAR 0 2
41017: PPUSH
41018: LD_VAR 0 3
41022: PPUSH
41023: LD_VAR 0 4
41027: PPUSH
41028: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41032: LD_VAR 0 1
41036: PPUSH
41037: LD_VAR 0 2
41041: PPUSH
41042: LD_VAR 0 3
41046: PPUSH
41047: CALL_OW 331
// end ;
41051: LD_VAR 0 5
41055: RET
// export function Video ( mode ) ; begin
41056: LD_INT 0
41058: PPUSH
// ingame_video = mode ;
41059: LD_ADDR_OWVAR 52
41063: PUSH
41064: LD_VAR 0 1
41068: ST_TO_ADDR
// interface_hidden = mode ;
41069: LD_ADDR_OWVAR 54
41073: PUSH
41074: LD_VAR 0 1
41078: ST_TO_ADDR
// end ;
41079: LD_VAR 0 2
41083: RET
// export function Join ( array , element ) ; begin
41084: LD_INT 0
41086: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: LD_VAR 0 1
41101: PUSH
41102: LD_INT 1
41104: PLUS
41105: PPUSH
41106: LD_VAR 0 2
41110: PPUSH
41111: CALL_OW 1
41115: ST_TO_ADDR
// end ;
41116: LD_VAR 0 3
41120: RET
// export function JoinUnion ( array , element ) ; begin
41121: LD_INT 0
41123: PPUSH
// result := array union element ;
41124: LD_ADDR_VAR 0 3
41128: PUSH
41129: LD_VAR 0 1
41133: PUSH
41134: LD_VAR 0 2
41138: UNION
41139: ST_TO_ADDR
// end ;
41140: LD_VAR 0 3
41144: RET
// export function GetBehemoths ( side ) ; begin
41145: LD_INT 0
41147: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41148: LD_ADDR_VAR 0 2
41152: PUSH
41153: LD_INT 22
41155: PUSH
41156: LD_VAR 0 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 31
41167: PUSH
41168: LD_INT 25
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PPUSH
41179: CALL_OW 69
41183: ST_TO_ADDR
// end ;
41184: LD_VAR 0 2
41188: RET
// export function Shuffle ( array ) ; var i , index ; begin
41189: LD_INT 0
41191: PPUSH
41192: PPUSH
41193: PPUSH
// result := [ ] ;
41194: LD_ADDR_VAR 0 2
41198: PUSH
41199: EMPTY
41200: ST_TO_ADDR
// if not array then
41201: LD_VAR 0 1
41205: NOT
41206: IFFALSE 41210
// exit ;
41208: GO 41309
// Randomize ;
41210: CALL_OW 10
// for i = array downto 1 do
41214: LD_ADDR_VAR 0 3
41218: PUSH
41219: DOUBLE
41220: LD_VAR 0 1
41224: INC
41225: ST_TO_ADDR
41226: LD_INT 1
41228: PUSH
41229: FOR_DOWNTO
41230: IFFALSE 41307
// begin index := rand ( 1 , array ) ;
41232: LD_ADDR_VAR 0 4
41236: PUSH
41237: LD_INT 1
41239: PPUSH
41240: LD_VAR 0 1
41244: PPUSH
41245: CALL_OW 12
41249: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41250: LD_ADDR_VAR 0 2
41254: PUSH
41255: LD_VAR 0 2
41259: PPUSH
41260: LD_VAR 0 2
41264: PUSH
41265: LD_INT 1
41267: PLUS
41268: PPUSH
41269: LD_VAR 0 1
41273: PUSH
41274: LD_VAR 0 4
41278: ARRAY
41279: PPUSH
41280: CALL_OW 2
41284: ST_TO_ADDR
// array := Delete ( array , index ) ;
41285: LD_ADDR_VAR 0 1
41289: PUSH
41290: LD_VAR 0 1
41294: PPUSH
41295: LD_VAR 0 4
41299: PPUSH
41300: CALL_OW 3
41304: ST_TO_ADDR
// end ;
41305: GO 41229
41307: POP
41308: POP
// end ;
41309: LD_VAR 0 2
41313: RET
// export function GetBaseMaterials ( base ) ; begin
41314: LD_INT 0
41316: PPUSH
// result := [ 0 , 0 , 0 ] ;
41317: LD_ADDR_VAR 0 2
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: ST_TO_ADDR
// if not base then
41336: LD_VAR 0 1
41340: NOT
41341: IFFALSE 41345
// exit ;
41343: GO 41394
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41345: LD_ADDR_VAR 0 2
41349: PUSH
41350: LD_VAR 0 1
41354: PPUSH
41355: LD_INT 1
41357: PPUSH
41358: CALL_OW 275
41362: PUSH
41363: LD_VAR 0 1
41367: PPUSH
41368: LD_INT 2
41370: PPUSH
41371: CALL_OW 275
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: LD_INT 3
41383: PPUSH
41384: CALL_OW 275
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// end ;
41394: LD_VAR 0 2
41398: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41399: LD_INT 0
41401: PPUSH
41402: PPUSH
// result := array ;
41403: LD_ADDR_VAR 0 3
41407: PUSH
41408: LD_VAR 0 1
41412: ST_TO_ADDR
// if size >= result then
41413: LD_VAR 0 2
41417: PUSH
41418: LD_VAR 0 3
41422: GREATEREQUAL
41423: IFFALSE 41427
// exit ;
41425: GO 41477
// if size then
41427: LD_VAR 0 2
41431: IFFALSE 41477
// for i := array downto size do
41433: LD_ADDR_VAR 0 4
41437: PUSH
41438: DOUBLE
41439: LD_VAR 0 1
41443: INC
41444: ST_TO_ADDR
41445: LD_VAR 0 2
41449: PUSH
41450: FOR_DOWNTO
41451: IFFALSE 41475
// result := Delete ( result , result ) ;
41453: LD_ADDR_VAR 0 3
41457: PUSH
41458: LD_VAR 0 3
41462: PPUSH
41463: LD_VAR 0 3
41467: PPUSH
41468: CALL_OW 3
41472: ST_TO_ADDR
41473: GO 41450
41475: POP
41476: POP
// end ;
41477: LD_VAR 0 3
41481: RET
// export function ComExit ( unit ) ; var tmp ; begin
41482: LD_INT 0
41484: PPUSH
41485: PPUSH
// if not IsInUnit ( unit ) then
41486: LD_VAR 0 1
41490: PPUSH
41491: CALL_OW 310
41495: NOT
41496: IFFALSE 41500
// exit ;
41498: GO 41560
// tmp := IsInUnit ( unit ) ;
41500: LD_ADDR_VAR 0 3
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 310
41514: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41515: LD_VAR 0 3
41519: PPUSH
41520: CALL_OW 247
41524: PUSH
41525: LD_INT 2
41527: EQUAL
41528: IFFALSE 41541
// ComExitVehicle ( unit ) else
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 121
41539: GO 41550
// ComExitBuilding ( unit ) ;
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 122
// result := tmp ;
41550: LD_ADDR_VAR 0 2
41554: PUSH
41555: LD_VAR 0 3
41559: ST_TO_ADDR
// end ;
41560: LD_VAR 0 2
41564: RET
// export function ComExitAll ( units ) ; var i ; begin
41565: LD_INT 0
41567: PPUSH
41568: PPUSH
// if not units then
41569: LD_VAR 0 1
41573: NOT
41574: IFFALSE 41578
// exit ;
41576: GO 41604
// for i in units do
41578: LD_ADDR_VAR 0 3
41582: PUSH
41583: LD_VAR 0 1
41587: PUSH
41588: FOR_IN
41589: IFFALSE 41602
// ComExit ( i ) ;
41591: LD_VAR 0 3
41595: PPUSH
41596: CALL 41482 0 1
41600: GO 41588
41602: POP
41603: POP
// end ;
41604: LD_VAR 0 2
41608: RET
// export function ResetHc ; begin
41609: LD_INT 0
41611: PPUSH
// InitHc ;
41612: CALL_OW 19
// hc_importance := 0 ;
41616: LD_ADDR_OWVAR 32
41620: PUSH
41621: LD_INT 0
41623: ST_TO_ADDR
// end ;
41624: LD_VAR 0 1
41628: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41629: LD_INT 0
41631: PPUSH
41632: PPUSH
41633: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41634: LD_ADDR_VAR 0 6
41638: PUSH
41639: LD_VAR 0 1
41643: PUSH
41644: LD_VAR 0 3
41648: PLUS
41649: PUSH
41650: LD_INT 2
41652: DIV
41653: ST_TO_ADDR
// if _x < 0 then
41654: LD_VAR 0 6
41658: PUSH
41659: LD_INT 0
41661: LESS
41662: IFFALSE 41679
// _x := _x * - 1 ;
41664: LD_ADDR_VAR 0 6
41668: PUSH
41669: LD_VAR 0 6
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: MUL
41678: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41679: LD_ADDR_VAR 0 7
41683: PUSH
41684: LD_VAR 0 2
41688: PUSH
41689: LD_VAR 0 4
41693: PLUS
41694: PUSH
41695: LD_INT 2
41697: DIV
41698: ST_TO_ADDR
// if _y < 0 then
41699: LD_VAR 0 7
41703: PUSH
41704: LD_INT 0
41706: LESS
41707: IFFALSE 41724
// _y := _y * - 1 ;
41709: LD_ADDR_VAR 0 7
41713: PUSH
41714: LD_VAR 0 7
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: MUL
41723: ST_TO_ADDR
// result := [ _x , _y ] ;
41724: LD_ADDR_VAR 0 5
41728: PUSH
41729: LD_VAR 0 6
41733: PUSH
41734: LD_VAR 0 7
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: ST_TO_ADDR
// end ;
41743: LD_VAR 0 5
41747: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41748: LD_INT 0
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
// task := GetTaskList ( unit ) ;
41754: LD_ADDR_VAR 0 7
41758: PUSH
41759: LD_VAR 0 1
41763: PPUSH
41764: CALL_OW 437
41768: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41769: LD_VAR 0 7
41773: NOT
41774: IFFALSE 41793
41776: PUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: LD_VAR 0 2
41786: PPUSH
41787: CALL_OW 308
41791: NOT
41792: AND
41793: IFFALSE 41797
// exit ;
41795: GO 41915
// if IsInArea ( unit , area ) then
41797: LD_VAR 0 1
41801: PPUSH
41802: LD_VAR 0 2
41806: PPUSH
41807: CALL_OW 308
41811: IFFALSE 41829
// begin ComMoveToArea ( unit , goAway ) ;
41813: LD_VAR 0 1
41817: PPUSH
41818: LD_VAR 0 3
41822: PPUSH
41823: CALL_OW 113
// exit ;
41827: GO 41915
// end ; if task [ 1 ] [ 1 ] <> M then
41829: LD_VAR 0 7
41833: PUSH
41834: LD_INT 1
41836: ARRAY
41837: PUSH
41838: LD_INT 1
41840: ARRAY
41841: PUSH
41842: LD_STRING M
41844: NONEQUAL
41845: IFFALSE 41849
// exit ;
41847: GO 41915
// x := task [ 1 ] [ 2 ] ;
41849: LD_ADDR_VAR 0 5
41853: PUSH
41854: LD_VAR 0 7
41858: PUSH
41859: LD_INT 1
41861: ARRAY
41862: PUSH
41863: LD_INT 2
41865: ARRAY
41866: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41867: LD_ADDR_VAR 0 6
41871: PUSH
41872: LD_VAR 0 7
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: PUSH
41881: LD_INT 3
41883: ARRAY
41884: ST_TO_ADDR
// if InArea ( x , y , area ) then
41885: LD_VAR 0 5
41889: PPUSH
41890: LD_VAR 0 6
41894: PPUSH
41895: LD_VAR 0 2
41899: PPUSH
41900: CALL_OW 309
41904: IFFALSE 41915
// ComStop ( unit ) ;
41906: LD_VAR 0 1
41910: PPUSH
41911: CALL_OW 141
// end ;
41915: LD_VAR 0 4
41919: RET
// export function Abs ( value ) ; begin
41920: LD_INT 0
41922: PPUSH
// result := value ;
41923: LD_ADDR_VAR 0 2
41927: PUSH
41928: LD_VAR 0 1
41932: ST_TO_ADDR
// if value < 0 then
41933: LD_VAR 0 1
41937: PUSH
41938: LD_INT 0
41940: LESS
41941: IFFALSE 41958
// result := value * - 1 ;
41943: LD_ADDR_VAR 0 2
41947: PUSH
41948: LD_VAR 0 1
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: MUL
41957: ST_TO_ADDR
// end ;
41958: LD_VAR 0 2
41962: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41963: LD_INT 0
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
// if not unit or not building then
41973: LD_VAR 0 1
41977: NOT
41978: IFTRUE 41987
41980: PUSH
41981: LD_VAR 0 2
41985: NOT
41986: OR
41987: IFFALSE 41991
// exit ;
41989: GO 42219
// x := GetX ( building ) ;
41991: LD_ADDR_VAR 0 4
41995: PUSH
41996: LD_VAR 0 2
42000: PPUSH
42001: CALL_OW 250
42005: ST_TO_ADDR
// y := GetY ( building ) ;
42006: LD_ADDR_VAR 0 6
42010: PUSH
42011: LD_VAR 0 2
42015: PPUSH
42016: CALL_OW 251
42020: ST_TO_ADDR
// d := GetDir ( building ) ;
42021: LD_ADDR_VAR 0 8
42025: PUSH
42026: LD_VAR 0 2
42030: PPUSH
42031: CALL_OW 254
42035: ST_TO_ADDR
// r := 4 ;
42036: LD_ADDR_VAR 0 9
42040: PUSH
42041: LD_INT 4
42043: ST_TO_ADDR
// for i := 1 to 5 do
42044: LD_ADDR_VAR 0 10
42048: PUSH
42049: DOUBLE
42050: LD_INT 1
42052: DEC
42053: ST_TO_ADDR
42054: LD_INT 5
42056: PUSH
42057: FOR_TO
42058: IFFALSE 42217
// begin _x := ShiftX ( x , d , r + i ) ;
42060: LD_ADDR_VAR 0 5
42064: PUSH
42065: LD_VAR 0 4
42069: PPUSH
42070: LD_VAR 0 8
42074: PPUSH
42075: LD_VAR 0 9
42079: PUSH
42080: LD_VAR 0 10
42084: PLUS
42085: PPUSH
42086: CALL_OW 272
42090: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42091: LD_ADDR_VAR 0 7
42095: PUSH
42096: LD_VAR 0 6
42100: PPUSH
42101: LD_VAR 0 8
42105: PPUSH
42106: LD_VAR 0 9
42110: PUSH
42111: LD_VAR 0 10
42115: PLUS
42116: PPUSH
42117: CALL_OW 273
42121: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42122: LD_VAR 0 5
42126: PPUSH
42127: LD_VAR 0 7
42131: PPUSH
42132: CALL_OW 488
42136: IFFALSE 42171
42138: PUSH
42139: LD_VAR 0 5
42143: PPUSH
42144: LD_VAR 0 7
42148: PPUSH
42149: CALL_OW 428
42153: PPUSH
42154: CALL_OW 247
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: IN
42169: NOT
42170: AND
42171: IFFALSE 42215
// begin ComMoveXY ( unit , _x , _y ) ;
42173: LD_VAR 0 1
42177: PPUSH
42178: LD_VAR 0 5
42182: PPUSH
42183: LD_VAR 0 7
42187: PPUSH
42188: CALL_OW 111
// result := [ _x , _y ] ;
42192: LD_ADDR_VAR 0 3
42196: PUSH
42197: LD_VAR 0 5
42201: PUSH
42202: LD_VAR 0 7
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: ST_TO_ADDR
// exit ;
42211: POP
42212: POP
42213: GO 42219
// end ; end ;
42215: GO 42057
42217: POP
42218: POP
// end ;
42219: LD_VAR 0 3
42223: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42224: LD_INT 0
42226: PPUSH
42227: PPUSH
42228: PPUSH
// result := 0 ;
42229: LD_ADDR_VAR 0 3
42233: PUSH
42234: LD_INT 0
42236: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42237: LD_VAR 0 1
42241: PUSH
42242: LD_INT 0
42244: LESS
42245: IFTRUE 42257
42247: PUSH
42248: LD_VAR 0 1
42252: PUSH
42253: LD_INT 8
42255: GREATER
42256: OR
42257: IFTRUE 42269
42259: PUSH
42260: LD_VAR 0 2
42264: PUSH
42265: LD_INT 0
42267: LESS
42268: OR
42269: IFTRUE 42281
42271: PUSH
42272: LD_VAR 0 2
42276: PUSH
42277: LD_INT 8
42279: GREATER
42280: OR
42281: IFFALSE 42285
// exit ;
42283: GO 42360
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42285: LD_ADDR_VAR 0 4
42289: PUSH
42290: LD_INT 22
42292: PUSH
42293: LD_VAR 0 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PPUSH
42302: CALL_OW 69
42306: PUSH
42307: FOR_IN
42308: IFFALSE 42358
// begin un := UnitShoot ( i ) ;
42310: LD_ADDR_VAR 0 5
42314: PUSH
42315: LD_VAR 0 4
42319: PPUSH
42320: CALL_OW 504
42324: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42325: LD_VAR 0 5
42329: PPUSH
42330: CALL_OW 255
42334: PUSH
42335: LD_VAR 0 1
42339: EQUAL
42340: IFFALSE 42356
// begin result := un ;
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_VAR 0 5
42351: ST_TO_ADDR
// exit ;
42352: POP
42353: POP
42354: GO 42360
// end ; end ;
42356: GO 42307
42358: POP
42359: POP
// end ;
42360: LD_VAR 0 3
42364: RET
// export function GetCargoBay ( units ) ; begin
42365: LD_INT 0
42367: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42368: LD_ADDR_VAR 0 2
42372: PUSH
42373: LD_VAR 0 1
42377: PPUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 34
42383: PUSH
42384: LD_INT 12
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 34
42393: PUSH
42394: LD_INT 51
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 34
42403: PUSH
42404: LD_INT 32
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 34
42413: PUSH
42414: LD_INT 89
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: PPUSH
42428: CALL_OW 72
42432: ST_TO_ADDR
// end ;
42433: LD_VAR 0 2
42437: RET
// export function Negate ( value ) ; begin
42438: LD_INT 0
42440: PPUSH
// result := not value ;
42441: LD_ADDR_VAR 0 2
42445: PUSH
42446: LD_VAR 0 1
42450: NOT
42451: ST_TO_ADDR
// end ;
42452: LD_VAR 0 2
42456: RET
// export function Inc ( value ) ; begin
42457: LD_INT 0
42459: PPUSH
// result := value + 1 ;
42460: LD_ADDR_VAR 0 2
42464: PUSH
42465: LD_VAR 0 1
42469: PUSH
42470: LD_INT 1
42472: PLUS
42473: ST_TO_ADDR
// end ;
42474: LD_VAR 0 2
42478: RET
// export function Dec ( value ) ; begin
42479: LD_INT 0
42481: PPUSH
// result := value - 1 ;
42482: LD_ADDR_VAR 0 2
42486: PUSH
42487: LD_VAR 0 1
42491: PUSH
42492: LD_INT 1
42494: MINUS
42495: ST_TO_ADDR
// end ;
42496: LD_VAR 0 2
42500: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42501: LD_INT 0
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42511: LD_VAR 0 1
42515: PPUSH
42516: LD_VAR 0 2
42520: PPUSH
42521: CALL_OW 488
42525: NOT
42526: IFTRUE 42545
42528: PUSH
42529: LD_VAR 0 3
42533: PPUSH
42534: LD_VAR 0 4
42538: PPUSH
42539: CALL_OW 488
42543: NOT
42544: OR
42545: IFFALSE 42558
// begin result := - 1 ;
42547: LD_ADDR_VAR 0 5
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: ST_TO_ADDR
// exit ;
42556: GO 42793
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42558: LD_ADDR_VAR 0 12
42562: PUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: LD_VAR 0 2
42572: PPUSH
42573: LD_VAR 0 3
42577: PPUSH
42578: LD_VAR 0 4
42582: PPUSH
42583: CALL 41629 0 4
42587: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42588: LD_ADDR_VAR 0 11
42592: PUSH
42593: LD_VAR 0 1
42597: PPUSH
42598: LD_VAR 0 2
42602: PPUSH
42603: LD_VAR 0 12
42607: PUSH
42608: LD_INT 1
42610: ARRAY
42611: PPUSH
42612: LD_VAR 0 12
42616: PUSH
42617: LD_INT 2
42619: ARRAY
42620: PPUSH
42621: CALL_OW 298
42625: ST_TO_ADDR
// distance := 9999 ;
42626: LD_ADDR_VAR 0 10
42630: PUSH
42631: LD_INT 9999
42633: ST_TO_ADDR
// for i := 0 to 5 do
42634: LD_ADDR_VAR 0 6
42638: PUSH
42639: DOUBLE
42640: LD_INT 0
42642: DEC
42643: ST_TO_ADDR
42644: LD_INT 5
42646: PUSH
42647: FOR_TO
42648: IFFALSE 42791
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42650: LD_ADDR_VAR 0 7
42654: PUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: LD_VAR 0 6
42664: PPUSH
42665: LD_VAR 0 11
42669: PPUSH
42670: CALL_OW 272
42674: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42675: LD_ADDR_VAR 0 8
42679: PUSH
42680: LD_VAR 0 2
42684: PPUSH
42685: LD_VAR 0 6
42689: PPUSH
42690: LD_VAR 0 11
42694: PPUSH
42695: CALL_OW 273
42699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42700: LD_VAR 0 7
42704: PPUSH
42705: LD_VAR 0 8
42709: PPUSH
42710: CALL_OW 488
42714: NOT
42715: IFFALSE 42719
// continue ;
42717: GO 42647
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42719: LD_ADDR_VAR 0 9
42723: PUSH
42724: LD_VAR 0 12
42728: PUSH
42729: LD_INT 1
42731: ARRAY
42732: PPUSH
42733: LD_VAR 0 12
42737: PUSH
42738: LD_INT 2
42740: ARRAY
42741: PPUSH
42742: LD_VAR 0 7
42746: PPUSH
42747: LD_VAR 0 8
42751: PPUSH
42752: CALL_OW 298
42756: ST_TO_ADDR
// if tmp < distance then
42757: LD_VAR 0 9
42761: PUSH
42762: LD_VAR 0 10
42766: LESS
42767: IFFALSE 42789
// begin result := i ;
42769: LD_ADDR_VAR 0 5
42773: PUSH
42774: LD_VAR 0 6
42778: ST_TO_ADDR
// distance := tmp ;
42779: LD_ADDR_VAR 0 10
42783: PUSH
42784: LD_VAR 0 9
42788: ST_TO_ADDR
// end ; end ;
42789: GO 42647
42791: POP
42792: POP
// end ;
42793: LD_VAR 0 5
42797: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42798: LD_INT 0
42800: PPUSH
42801: PPUSH
// if not driver or not IsInUnit ( driver ) then
42802: LD_VAR 0 1
42806: NOT
42807: IFTRUE 42821
42809: PUSH
42810: LD_VAR 0 1
42814: PPUSH
42815: CALL_OW 310
42819: NOT
42820: OR
42821: IFFALSE 42825
// exit ;
42823: GO 42915
// vehicle := IsInUnit ( driver ) ;
42825: LD_ADDR_VAR 0 3
42829: PUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 310
42839: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42840: LD_VAR 0 1
42844: PPUSH
42845: LD_STRING \
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: PUSH
42875: LD_STRING E
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_VAR 0 3
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PPUSH
42911: CALL_OW 446
// end ;
42915: LD_VAR 0 2
42919: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42920: LD_INT 0
42922: PPUSH
42923: PPUSH
// if not driver or not IsInUnit ( driver ) then
42924: LD_VAR 0 1
42928: NOT
42929: IFTRUE 42943
42931: PUSH
42932: LD_VAR 0 1
42936: PPUSH
42937: CALL_OW 310
42941: NOT
42942: OR
42943: IFFALSE 42947
// exit ;
42945: GO 43037
// vehicle := IsInUnit ( driver ) ;
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: CALL_OW 310
42961: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42962: LD_VAR 0 1
42966: PPUSH
42967: LD_STRING \
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: PUSH
42997: LD_STRING E
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_VAR 0 3
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PPUSH
43033: CALL_OW 447
// end ;
43037: LD_VAR 0 2
43041: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43042: LD_INT 0
43044: PPUSH
43045: PPUSH
43046: PPUSH
// tmp := [ ] ;
43047: LD_ADDR_VAR 0 5
43051: PUSH
43052: EMPTY
43053: ST_TO_ADDR
// for i in units do
43054: LD_ADDR_VAR 0 4
43058: PUSH
43059: LD_VAR 0 1
43063: PUSH
43064: FOR_IN
43065: IFFALSE 43103
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43067: LD_ADDR_VAR 0 5
43071: PUSH
43072: LD_VAR 0 5
43076: PPUSH
43077: LD_VAR 0 5
43081: PUSH
43082: LD_INT 1
43084: PLUS
43085: PPUSH
43086: LD_VAR 0 4
43090: PPUSH
43091: CALL_OW 256
43095: PPUSH
43096: CALL_OW 2
43100: ST_TO_ADDR
43101: GO 43064
43103: POP
43104: POP
// if not tmp then
43105: LD_VAR 0 5
43109: NOT
43110: IFFALSE 43114
// exit ;
43112: GO 43162
// if asc then
43114: LD_VAR 0 2
43118: IFFALSE 43142
// result := SortListByListAsc ( units , tmp ) else
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_VAR 0 1
43129: PPUSH
43130: LD_VAR 0 5
43134: PPUSH
43135: CALL_OW 76
43139: ST_TO_ADDR
43140: GO 43162
// result := SortListByListDesc ( units , tmp ) ;
43142: LD_ADDR_VAR 0 3
43146: PUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: LD_VAR 0 5
43156: PPUSH
43157: CALL_OW 77
43161: ST_TO_ADDR
// end ;
43162: LD_VAR 0 3
43166: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43167: LD_INT 0
43169: PPUSH
43170: PPUSH
// task := GetTaskList ( mech ) ;
43171: LD_ADDR_VAR 0 4
43175: PUSH
43176: LD_VAR 0 1
43180: PPUSH
43181: CALL_OW 437
43185: ST_TO_ADDR
// if not task then
43186: LD_VAR 0 4
43190: NOT
43191: IFFALSE 43195
// exit ;
43193: GO 43239
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_VAR 0 4
43204: PUSH
43205: LD_INT 1
43207: ARRAY
43208: PUSH
43209: LD_INT 1
43211: ARRAY
43212: PUSH
43213: LD_STRING r
43215: EQUAL
43216: IFFALSE 43238
43218: PUSH
43219: LD_VAR 0 4
43223: PUSH
43224: LD_INT 1
43226: ARRAY
43227: PUSH
43228: LD_INT 4
43230: ARRAY
43231: PUSH
43232: LD_VAR 0 2
43236: EQUAL
43237: AND
43238: ST_TO_ADDR
// end ;
43239: LD_VAR 0 3
43243: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43244: LD_INT 0
43246: PPUSH
// SetDir ( unit , d ) ;
43247: LD_VAR 0 1
43251: PPUSH
43252: LD_VAR 0 4
43256: PPUSH
43257: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43261: LD_ADDR_VAR 0 6
43265: PUSH
43266: LD_VAR 0 1
43270: PPUSH
43271: LD_VAR 0 2
43275: PPUSH
43276: LD_VAR 0 3
43280: PPUSH
43281: LD_VAR 0 5
43285: PPUSH
43286: CALL_OW 48
43290: ST_TO_ADDR
// end ;
43291: LD_VAR 0 6
43295: RET
// export function ToNaturalNumber ( number ) ; begin
43296: LD_INT 0
43298: PPUSH
// result := number div 1 ;
43299: LD_ADDR_VAR 0 2
43303: PUSH
43304: LD_VAR 0 1
43308: PUSH
43309: LD_INT 1
43311: DIV
43312: ST_TO_ADDR
// if number < 0 then
43313: LD_VAR 0 1
43317: PUSH
43318: LD_INT 0
43320: LESS
43321: IFFALSE 43331
// result := 0 ;
43323: LD_ADDR_VAR 0 2
43327: PUSH
43328: LD_INT 0
43330: ST_TO_ADDR
// end ;
43331: LD_VAR 0 2
43335: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43336: LD_INT 0
43338: PPUSH
43339: PPUSH
43340: PPUSH
// if not buildings then
43341: LD_VAR 0 1
43345: NOT
43346: IFFALSE 43350
// exit ;
43348: GO 43465
// tmp := [ ] ;
43350: LD_ADDR_VAR 0 5
43354: PUSH
43355: EMPTY
43356: ST_TO_ADDR
// for b in buildings do
43357: LD_ADDR_VAR 0 4
43361: PUSH
43362: LD_VAR 0 1
43366: PUSH
43367: FOR_IN
43368: IFFALSE 43406
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43370: LD_ADDR_VAR 0 5
43374: PUSH
43375: LD_VAR 0 5
43379: PPUSH
43380: LD_VAR 0 5
43384: PUSH
43385: LD_INT 1
43387: PLUS
43388: PPUSH
43389: LD_VAR 0 4
43393: PPUSH
43394: CALL_OW 266
43398: PPUSH
43399: CALL_OW 1
43403: ST_TO_ADDR
43404: GO 43367
43406: POP
43407: POP
// if not tmp then
43408: LD_VAR 0 5
43412: NOT
43413: IFFALSE 43417
// exit ;
43415: GO 43465
// if asc then
43417: LD_VAR 0 2
43421: IFFALSE 43445
// result := SortListByListAsc ( buildings , tmp ) else
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_VAR 0 1
43432: PPUSH
43433: LD_VAR 0 5
43437: PPUSH
43438: CALL_OW 76
43442: ST_TO_ADDR
43443: GO 43465
// result := SortListByListDesc ( buildings , tmp ) ;
43445: LD_ADDR_VAR 0 3
43449: PUSH
43450: LD_VAR 0 1
43454: PPUSH
43455: LD_VAR 0 5
43459: PPUSH
43460: CALL_OW 77
43464: ST_TO_ADDR
// end ;
43465: LD_VAR 0 3
43469: RET
// export function SortByClass ( units , class ) ; var un ; begin
43470: LD_INT 0
43472: PPUSH
43473: PPUSH
// if not units or not class then
43474: LD_VAR 0 1
43478: NOT
43479: IFTRUE 43488
43481: PUSH
43482: LD_VAR 0 2
43486: NOT
43487: OR
43488: IFFALSE 43492
// exit ;
43490: GO 43587
// result := [ ] ;
43492: LD_ADDR_VAR 0 3
43496: PUSH
43497: EMPTY
43498: ST_TO_ADDR
// for un in units do
43499: LD_ADDR_VAR 0 4
43503: PUSH
43504: LD_VAR 0 1
43508: PUSH
43509: FOR_IN
43510: IFFALSE 43585
// if GetClass ( un ) = class then
43512: LD_VAR 0 4
43516: PPUSH
43517: CALL_OW 257
43521: PUSH
43522: LD_VAR 0 2
43526: EQUAL
43527: IFFALSE 43554
// result := Insert ( result , 1 , un ) else
43529: LD_ADDR_VAR 0 3
43533: PUSH
43534: LD_VAR 0 3
43538: PPUSH
43539: LD_INT 1
43541: PPUSH
43542: LD_VAR 0 4
43546: PPUSH
43547: CALL_OW 2
43551: ST_TO_ADDR
43552: GO 43583
// result := Replace ( result , result + 1 , un ) ;
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: LD_VAR 0 3
43563: PPUSH
43564: LD_VAR 0 3
43568: PUSH
43569: LD_INT 1
43571: PLUS
43572: PPUSH
43573: LD_VAR 0 4
43577: PPUSH
43578: CALL_OW 1
43582: ST_TO_ADDR
43583: GO 43509
43585: POP
43586: POP
// end ;
43587: LD_VAR 0 3
43591: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43592: LD_INT 0
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
// result := [ ] ;
43601: LD_ADDR_VAR 0 4
43605: PUSH
43606: EMPTY
43607: ST_TO_ADDR
// if x - r < 0 then
43608: LD_VAR 0 1
43612: PUSH
43613: LD_VAR 0 3
43617: MINUS
43618: PUSH
43619: LD_INT 0
43621: LESS
43622: IFFALSE 43634
// min_x := 0 else
43624: LD_ADDR_VAR 0 8
43628: PUSH
43629: LD_INT 0
43631: ST_TO_ADDR
43632: GO 43650
// min_x := x - r ;
43634: LD_ADDR_VAR 0 8
43638: PUSH
43639: LD_VAR 0 1
43643: PUSH
43644: LD_VAR 0 3
43648: MINUS
43649: ST_TO_ADDR
// if y - r < 0 then
43650: LD_VAR 0 2
43654: PUSH
43655: LD_VAR 0 3
43659: MINUS
43660: PUSH
43661: LD_INT 0
43663: LESS
43664: IFFALSE 43676
// min_y := 0 else
43666: LD_ADDR_VAR 0 7
43670: PUSH
43671: LD_INT 0
43673: ST_TO_ADDR
43674: GO 43692
// min_y := y - r ;
43676: LD_ADDR_VAR 0 7
43680: PUSH
43681: LD_VAR 0 2
43685: PUSH
43686: LD_VAR 0 3
43690: MINUS
43691: ST_TO_ADDR
// max_x := x + r ;
43692: LD_ADDR_VAR 0 9
43696: PUSH
43697: LD_VAR 0 1
43701: PUSH
43702: LD_VAR 0 3
43706: PLUS
43707: ST_TO_ADDR
// max_y := y + r ;
43708: LD_ADDR_VAR 0 10
43712: PUSH
43713: LD_VAR 0 2
43717: PUSH
43718: LD_VAR 0 3
43722: PLUS
43723: ST_TO_ADDR
// for _x = min_x to max_x do
43724: LD_ADDR_VAR 0 5
43728: PUSH
43729: DOUBLE
43730: LD_VAR 0 8
43734: DEC
43735: ST_TO_ADDR
43736: LD_VAR 0 9
43740: PUSH
43741: FOR_TO
43742: IFFALSE 43843
// for _y = min_y to max_y do
43744: LD_ADDR_VAR 0 6
43748: PUSH
43749: DOUBLE
43750: LD_VAR 0 7
43754: DEC
43755: ST_TO_ADDR
43756: LD_VAR 0 10
43760: PUSH
43761: FOR_TO
43762: IFFALSE 43839
// begin if not ValidHex ( _x , _y ) then
43764: LD_VAR 0 5
43768: PPUSH
43769: LD_VAR 0 6
43773: PPUSH
43774: CALL_OW 488
43778: NOT
43779: IFFALSE 43783
// continue ;
43781: GO 43761
// if GetResourceTypeXY ( _x , _y ) then
43783: LD_VAR 0 5
43787: PPUSH
43788: LD_VAR 0 6
43792: PPUSH
43793: CALL_OW 283
43797: IFFALSE 43837
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43799: LD_ADDR_VAR 0 4
43803: PUSH
43804: LD_VAR 0 4
43808: PPUSH
43809: LD_VAR 0 4
43813: PUSH
43814: LD_INT 1
43816: PLUS
43817: PPUSH
43818: LD_VAR 0 5
43822: PUSH
43823: LD_VAR 0 6
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PPUSH
43832: CALL_OW 1
43836: ST_TO_ADDR
// end ;
43837: GO 43761
43839: POP
43840: POP
43841: GO 43741
43843: POP
43844: POP
// end ;
43845: LD_VAR 0 4
43849: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43850: LD_INT 0
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
43859: PPUSH
// if not units then
43860: LD_VAR 0 1
43864: NOT
43865: IFFALSE 43869
// exit ;
43867: GO 44401
// result := UnitFilter ( units , [ f_ok ] ) ;
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: LD_INT 50
43881: PUSH
43882: EMPTY
43883: LIST
43884: PPUSH
43885: CALL_OW 72
43889: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43890: LD_ADDR_VAR 0 8
43894: PUSH
43895: LD_VAR 0 1
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PPUSH
43904: CALL_OW 255
43908: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43909: LD_ADDR_VAR 0 10
43913: PUSH
43914: LD_INT 29
43916: PUSH
43917: LD_INT 91
43919: PUSH
43920: LD_INT 49
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: ST_TO_ADDR
// if not result then
43928: LD_VAR 0 3
43932: NOT
43933: IFFALSE 43937
// exit ;
43935: GO 44401
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43937: LD_ADDR_VAR 0 5
43941: PUSH
43942: LD_INT 81
43944: PUSH
43945: LD_VAR 0 8
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PPUSH
43954: CALL_OW 69
43958: ST_TO_ADDR
// for i in result do
43959: LD_ADDR_VAR 0 4
43963: PUSH
43964: LD_VAR 0 3
43968: PUSH
43969: FOR_IN
43970: IFFALSE 44399
// begin tag := GetTag ( i ) + 1 ;
43972: LD_ADDR_VAR 0 9
43976: PUSH
43977: LD_VAR 0 4
43981: PPUSH
43982: CALL_OW 110
43986: PUSH
43987: LD_INT 1
43989: PLUS
43990: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43991: LD_ADDR_VAR 0 7
43995: PUSH
43996: LD_VAR 0 4
44000: PPUSH
44001: CALL_OW 250
44005: PPUSH
44006: LD_VAR 0 4
44010: PPUSH
44011: CALL_OW 251
44015: PPUSH
44016: LD_INT 4
44018: PPUSH
44019: CALL 43592 0 3
44023: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44024: LD_VAR 0 4
44028: PPUSH
44029: CALL_OW 247
44033: PUSH
44034: LD_INT 2
44036: EQUAL
44037: IFFALSE 44049
44039: PUSH
44040: LD_VAR 0 7
44044: PUSH
44045: LD_INT 2
44047: GREATER
44048: AND
44049: IFFALSE 44069
44051: PUSH
44052: LD_VAR 0 4
44056: PPUSH
44057: CALL_OW 264
44061: PUSH
44062: LD_VAR 0 10
44066: IN
44067: NOT
44068: AND
44069: IFFALSE 44108
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44071: LD_VAR 0 4
44075: PPUSH
44076: LD_VAR 0 7
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: PUSH
44085: LD_INT 1
44087: ARRAY
44088: PPUSH
44089: LD_VAR 0 7
44093: PUSH
44094: LD_INT 1
44096: ARRAY
44097: PUSH
44098: LD_INT 2
44100: ARRAY
44101: PPUSH
44102: CALL_OW 116
44106: GO 44397
// if path > tag then
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 9
44117: GREATER
44118: IFFALSE 44326
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44120: LD_ADDR_VAR 0 6
44124: PUSH
44125: LD_VAR 0 5
44129: PPUSH
44130: LD_INT 91
44132: PUSH
44133: LD_VAR 0 4
44137: PUSH
44138: LD_INT 8
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: PPUSH
44146: CALL_OW 72
44150: ST_TO_ADDR
// if nearEnemy then
44151: LD_VAR 0 6
44155: IFFALSE 44224
// begin if GetWeapon ( i ) = ru_time_lapser then
44157: LD_VAR 0 4
44161: PPUSH
44162: CALL_OW 264
44166: PUSH
44167: LD_INT 49
44169: EQUAL
44170: IFFALSE 44198
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44172: LD_VAR 0 4
44176: PPUSH
44177: LD_VAR 0 6
44181: PPUSH
44182: LD_VAR 0 4
44186: PPUSH
44187: CALL_OW 74
44191: PPUSH
44192: CALL_OW 112
44196: GO 44222
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44198: LD_VAR 0 4
44202: PPUSH
44203: LD_VAR 0 6
44207: PPUSH
44208: LD_VAR 0 4
44212: PPUSH
44213: CALL_OW 74
44217: PPUSH
44218: CALL 45482 0 2
// end else
44222: GO 44324
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44224: LD_VAR 0 4
44228: PPUSH
44229: LD_VAR 0 2
44233: PUSH
44234: LD_VAR 0 9
44238: ARRAY
44239: PUSH
44240: LD_INT 1
44242: ARRAY
44243: PPUSH
44244: LD_VAR 0 2
44248: PUSH
44249: LD_VAR 0 9
44253: ARRAY
44254: PUSH
44255: LD_INT 2
44257: ARRAY
44258: PPUSH
44259: CALL_OW 297
44263: PUSH
44264: LD_INT 6
44266: GREATER
44267: IFFALSE 44310
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44269: LD_VAR 0 4
44273: PPUSH
44274: LD_VAR 0 2
44278: PUSH
44279: LD_VAR 0 9
44283: ARRAY
44284: PUSH
44285: LD_INT 1
44287: ARRAY
44288: PPUSH
44289: LD_VAR 0 2
44293: PUSH
44294: LD_VAR 0 9
44298: ARRAY
44299: PUSH
44300: LD_INT 2
44302: ARRAY
44303: PPUSH
44304: CALL_OW 114
44308: GO 44324
// SetTag ( i , tag ) ;
44310: LD_VAR 0 4
44314: PPUSH
44315: LD_VAR 0 9
44319: PPUSH
44320: CALL_OW 109
// end else
44324: GO 44397
// if enemy then
44326: LD_VAR 0 5
44330: IFFALSE 44397
// begin if GetWeapon ( i ) = ru_time_lapser then
44332: LD_VAR 0 4
44336: PPUSH
44337: CALL_OW 264
44341: PUSH
44342: LD_INT 49
44344: EQUAL
44345: IFFALSE 44373
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44347: LD_VAR 0 4
44351: PPUSH
44352: LD_VAR 0 5
44356: PPUSH
44357: LD_VAR 0 4
44361: PPUSH
44362: CALL_OW 74
44366: PPUSH
44367: CALL_OW 112
44371: GO 44397
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44373: LD_VAR 0 4
44377: PPUSH
44378: LD_VAR 0 5
44382: PPUSH
44383: LD_VAR 0 4
44387: PPUSH
44388: CALL_OW 74
44392: PPUSH
44393: CALL 45482 0 2
// end ; end ;
44397: GO 43969
44399: POP
44400: POP
// end ;
44401: LD_VAR 0 3
44405: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44406: LD_INT 0
44408: PPUSH
44409: PPUSH
44410: PPUSH
// if not unit or IsInUnit ( unit ) then
44411: LD_VAR 0 1
44415: NOT
44416: IFTRUE 44429
44418: PUSH
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 310
44428: OR
44429: IFFALSE 44433
// exit ;
44431: GO 44524
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44433: LD_ADDR_VAR 0 4
44437: PUSH
44438: LD_VAR 0 1
44442: PPUSH
44443: CALL_OW 250
44447: PPUSH
44448: LD_VAR 0 2
44452: PPUSH
44453: LD_INT 1
44455: PPUSH
44456: CALL_OW 272
44460: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44461: LD_ADDR_VAR 0 5
44465: PUSH
44466: LD_VAR 0 1
44470: PPUSH
44471: CALL_OW 251
44475: PPUSH
44476: LD_VAR 0 2
44480: PPUSH
44481: LD_INT 1
44483: PPUSH
44484: CALL_OW 273
44488: ST_TO_ADDR
// if ValidHex ( x , y ) then
44489: LD_VAR 0 4
44493: PPUSH
44494: LD_VAR 0 5
44498: PPUSH
44499: CALL_OW 488
44503: IFFALSE 44524
// ComTurnXY ( unit , x , y ) ;
44505: LD_VAR 0 1
44509: PPUSH
44510: LD_VAR 0 4
44514: PPUSH
44515: LD_VAR 0 5
44519: PPUSH
44520: CALL_OW 118
// end ;
44524: LD_VAR 0 3
44528: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44529: LD_INT 0
44531: PPUSH
44532: PPUSH
// result := false ;
44533: LD_ADDR_VAR 0 3
44537: PUSH
44538: LD_INT 0
44540: ST_TO_ADDR
// if not units then
44541: LD_VAR 0 2
44545: NOT
44546: IFFALSE 44550
// exit ;
44548: GO 44595
// for i in units do
44550: LD_ADDR_VAR 0 4
44554: PUSH
44555: LD_VAR 0 2
44559: PUSH
44560: FOR_IN
44561: IFFALSE 44593
// if See ( side , i ) then
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 4
44572: PPUSH
44573: CALL_OW 292
44577: IFFALSE 44591
// begin result := true ;
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_INT 1
44586: ST_TO_ADDR
// exit ;
44587: POP
44588: POP
44589: GO 44595
// end ;
44591: GO 44560
44593: POP
44594: POP
// end ;
44595: LD_VAR 0 3
44599: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44600: LD_INT 0
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
// if not unit or not points then
44606: LD_VAR 0 1
44610: NOT
44611: IFTRUE 44620
44613: PUSH
44614: LD_VAR 0 2
44618: NOT
44619: OR
44620: IFFALSE 44624
// exit ;
44622: GO 44714
// dist := 99999 ;
44624: LD_ADDR_VAR 0 5
44628: PUSH
44629: LD_INT 99999
44631: ST_TO_ADDR
// for i in points do
44632: LD_ADDR_VAR 0 4
44636: PUSH
44637: LD_VAR 0 2
44641: PUSH
44642: FOR_IN
44643: IFFALSE 44712
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44645: LD_ADDR_VAR 0 6
44649: PUSH
44650: LD_VAR 0 1
44654: PPUSH
44655: LD_VAR 0 4
44659: PUSH
44660: LD_INT 1
44662: ARRAY
44663: PPUSH
44664: LD_VAR 0 4
44668: PUSH
44669: LD_INT 2
44671: ARRAY
44672: PPUSH
44673: CALL_OW 297
44677: ST_TO_ADDR
// if tmpDist < dist then
44678: LD_VAR 0 6
44682: PUSH
44683: LD_VAR 0 5
44687: LESS
44688: IFFALSE 44710
// begin result := i ;
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_VAR 0 4
44699: ST_TO_ADDR
// dist := tmpDist ;
44700: LD_ADDR_VAR 0 5
44704: PUSH
44705: LD_VAR 0 6
44709: ST_TO_ADDR
// end ; end ;
44710: GO 44642
44712: POP
44713: POP
// end ;
44714: LD_VAR 0 3
44718: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44719: LD_INT 0
44721: PPUSH
// uc_side := side ;
44722: LD_ADDR_OWVAR 20
44726: PUSH
44727: LD_VAR 0 1
44731: ST_TO_ADDR
// uc_nation := 3 ;
44732: LD_ADDR_OWVAR 21
44736: PUSH
44737: LD_INT 3
44739: ST_TO_ADDR
// vc_chassis := 25 ;
44740: LD_ADDR_OWVAR 37
44744: PUSH
44745: LD_INT 25
44747: ST_TO_ADDR
// vc_engine := engine_siberite ;
44748: LD_ADDR_OWVAR 39
44752: PUSH
44753: LD_INT 3
44755: ST_TO_ADDR
// vc_control := control_computer ;
44756: LD_ADDR_OWVAR 38
44760: PUSH
44761: LD_INT 3
44763: ST_TO_ADDR
// vc_weapon := 59 ;
44764: LD_ADDR_OWVAR 40
44768: PUSH
44769: LD_INT 59
44771: ST_TO_ADDR
// result := CreateVehicle ;
44772: LD_ADDR_VAR 0 5
44776: PUSH
44777: CALL_OW 45
44781: ST_TO_ADDR
// SetDir ( result , d ) ;
44782: LD_VAR 0 5
44786: PPUSH
44787: LD_VAR 0 4
44791: PPUSH
44792: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44796: LD_VAR 0 5
44800: PPUSH
44801: LD_VAR 0 2
44805: PPUSH
44806: LD_VAR 0 3
44810: PPUSH
44811: LD_INT 0
44813: PPUSH
44814: CALL_OW 48
// end ;
44818: LD_VAR 0 5
44822: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44823: LD_INT 0
44825: PPUSH
44826: PPUSH
44827: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44828: LD_ADDR_VAR 0 2
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44851: LD_VAR 0 1
44855: NOT
44856: IFTRUE 44889
44858: PUSH
44859: LD_VAR 0 1
44863: PPUSH
44864: CALL_OW 264
44868: PUSH
44869: LD_INT 12
44871: PUSH
44872: LD_INT 51
44874: PUSH
44875: LD_INT 32
44877: PUSH
44878: LD_INT 89
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: IN
44887: NOT
44888: OR
44889: IFFALSE 44893
// exit ;
44891: GO 44991
// for i := 1 to 3 do
44893: LD_ADDR_VAR 0 3
44897: PUSH
44898: DOUBLE
44899: LD_INT 1
44901: DEC
44902: ST_TO_ADDR
44903: LD_INT 3
44905: PUSH
44906: FOR_TO
44907: IFFALSE 44989
// begin tmp := GetCargo ( cargo , i ) ;
44909: LD_ADDR_VAR 0 4
44913: PUSH
44914: LD_VAR 0 1
44918: PPUSH
44919: LD_VAR 0 3
44923: PPUSH
44924: CALL_OW 289
44928: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44929: LD_ADDR_VAR 0 2
44933: PUSH
44934: LD_VAR 0 2
44938: PPUSH
44939: LD_VAR 0 3
44943: PPUSH
44944: LD_VAR 0 4
44948: PPUSH
44949: CALL_OW 1
44953: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44954: LD_ADDR_VAR 0 2
44958: PUSH
44959: LD_VAR 0 2
44963: PPUSH
44964: LD_INT 4
44966: PPUSH
44967: LD_VAR 0 2
44971: PUSH
44972: LD_INT 4
44974: ARRAY
44975: PUSH
44976: LD_VAR 0 4
44980: PLUS
44981: PPUSH
44982: CALL_OW 1
44986: ST_TO_ADDR
// end ;
44987: GO 44906
44989: POP
44990: POP
// end ;
44991: LD_VAR 0 2
44995: RET
// export function Length ( array ) ; begin
44996: LD_INT 0
44998: PPUSH
// result := array + 0 ;
44999: LD_ADDR_VAR 0 2
45003: PUSH
45004: LD_VAR 0 1
45008: PUSH
45009: LD_INT 0
45011: PLUS
45012: ST_TO_ADDR
// end ;
45013: LD_VAR 0 2
45017: RET
// export function PrepareArray ( array ) ; begin
45018: LD_INT 0
45020: PPUSH
// result := array diff 0 ;
45021: LD_ADDR_VAR 0 2
45025: PUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_INT 0
45033: DIFF
45034: ST_TO_ADDR
// if not result [ 1 ] then
45035: LD_VAR 0 2
45039: PUSH
45040: LD_INT 1
45042: ARRAY
45043: NOT
45044: IFFALSE 45064
// result := Delete ( result , 1 ) ;
45046: LD_ADDR_VAR 0 2
45050: PUSH
45051: LD_VAR 0 2
45055: PPUSH
45056: LD_INT 1
45058: PPUSH
45059: CALL_OW 3
45063: ST_TO_ADDR
// end ;
45064: LD_VAR 0 2
45068: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45069: LD_INT 0
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
// sibRocketRange := 25 ;
45075: LD_ADDR_VAR 0 6
45079: PUSH
45080: LD_INT 25
45082: ST_TO_ADDR
// result := false ;
45083: LD_ADDR_VAR 0 4
45087: PUSH
45088: LD_INT 0
45090: ST_TO_ADDR
// for i := 0 to 5 do
45091: LD_ADDR_VAR 0 5
45095: PUSH
45096: DOUBLE
45097: LD_INT 0
45099: DEC
45100: ST_TO_ADDR
45101: LD_INT 5
45103: PUSH
45104: FOR_TO
45105: IFFALSE 45172
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45107: LD_VAR 0 1
45111: PPUSH
45112: LD_VAR 0 5
45116: PPUSH
45117: LD_VAR 0 6
45121: PPUSH
45122: CALL_OW 272
45126: PPUSH
45127: LD_VAR 0 2
45131: PPUSH
45132: LD_VAR 0 5
45136: PPUSH
45137: LD_VAR 0 6
45141: PPUSH
45142: CALL_OW 273
45146: PPUSH
45147: LD_VAR 0 3
45151: PPUSH
45152: CALL_OW 309
45156: IFFALSE 45170
// begin result := true ;
45158: LD_ADDR_VAR 0 4
45162: PUSH
45163: LD_INT 1
45165: ST_TO_ADDR
// exit ;
45166: POP
45167: POP
45168: GO 45174
// end ;
45170: GO 45104
45172: POP
45173: POP
// end ;
45174: LD_VAR 0 4
45178: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45179: LD_INT 0
45181: PPUSH
45182: PPUSH
45183: PPUSH
// if btype = b_depot then
45184: LD_VAR 0 2
45188: PUSH
45189: LD_INT 0
45191: EQUAL
45192: IFFALSE 45204
// begin result := true ;
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: LD_INT 1
45201: ST_TO_ADDR
// exit ;
45202: GO 45324
// end ; pom := GetBase ( depot ) ;
45204: LD_ADDR_VAR 0 4
45208: PUSH
45209: LD_VAR 0 1
45213: PPUSH
45214: CALL_OW 274
45218: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45219: LD_ADDR_VAR 0 5
45223: PUSH
45224: LD_VAR 0 2
45228: PPUSH
45229: LD_VAR 0 1
45233: PPUSH
45234: CALL_OW 248
45238: PPUSH
45239: CALL_OW 450
45243: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_VAR 0 4
45253: PPUSH
45254: LD_INT 1
45256: PPUSH
45257: CALL_OW 275
45261: PUSH
45262: LD_VAR 0 5
45266: PUSH
45267: LD_INT 1
45269: ARRAY
45270: GREATEREQUAL
45271: IFFALSE 45297
45273: PUSH
45274: LD_VAR 0 4
45278: PPUSH
45279: LD_INT 2
45281: PPUSH
45282: CALL_OW 275
45286: PUSH
45287: LD_VAR 0 5
45291: PUSH
45292: LD_INT 2
45294: ARRAY
45295: GREATEREQUAL
45296: AND
45297: IFFALSE 45323
45299: PUSH
45300: LD_VAR 0 4
45304: PPUSH
45305: LD_INT 3
45307: PPUSH
45308: CALL_OW 275
45312: PUSH
45313: LD_VAR 0 5
45317: PUSH
45318: LD_INT 3
45320: ARRAY
45321: GREATEREQUAL
45322: AND
45323: ST_TO_ADDR
// end ;
45324: LD_VAR 0 3
45328: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45329: LD_INT 0
45331: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45332: LD_VAR 0 1
45336: PPUSH
45337: LD_VAR 0 2
45341: PPUSH
45342: LD_INT 0
45344: PPUSH
45345: LD_INT 0
45347: PPUSH
45348: LD_INT 1
45350: PPUSH
45351: LD_INT 0
45353: PPUSH
45354: CALL_OW 587
// end ;
45358: LD_VAR 0 3
45362: RET
// export function CenterOnNow ( unit ) ; begin
45363: LD_INT 0
45365: PPUSH
// result := IsInUnit ( unit ) ;
45366: LD_ADDR_VAR 0 2
45370: PUSH
45371: LD_VAR 0 1
45375: PPUSH
45376: CALL_OW 310
45380: ST_TO_ADDR
// if not result then
45381: LD_VAR 0 2
45385: NOT
45386: IFFALSE 45398
// result := unit ;
45388: LD_ADDR_VAR 0 2
45392: PUSH
45393: LD_VAR 0 1
45397: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45398: LD_VAR 0 1
45402: PPUSH
45403: CALL_OW 87
// end ;
45407: LD_VAR 0 2
45411: RET
// export function ComMoveHex ( unit , hex ) ; begin
45412: LD_INT 0
45414: PPUSH
// if not hex then
45415: LD_VAR 0 2
45419: NOT
45420: IFFALSE 45424
// exit ;
45422: GO 45477
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45424: LD_VAR 0 2
45428: PUSH
45429: LD_INT 1
45431: ARRAY
45432: PPUSH
45433: LD_VAR 0 2
45437: PUSH
45438: LD_INT 2
45440: ARRAY
45441: PPUSH
45442: CALL_OW 428
45446: IFFALSE 45450
// exit ;
45448: GO 45477
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45450: LD_VAR 0 1
45454: PPUSH
45455: LD_VAR 0 2
45459: PUSH
45460: LD_INT 1
45462: ARRAY
45463: PPUSH
45464: LD_VAR 0 2
45468: PUSH
45469: LD_INT 2
45471: ARRAY
45472: PPUSH
45473: CALL_OW 111
// end ;
45477: LD_VAR 0 3
45481: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45482: LD_INT 0
45484: PPUSH
45485: PPUSH
45486: PPUSH
// if not unit or not enemy then
45487: LD_VAR 0 1
45491: NOT
45492: IFTRUE 45501
45494: PUSH
45495: LD_VAR 0 2
45499: NOT
45500: OR
45501: IFFALSE 45505
// exit ;
45503: GO 45631
// x := GetX ( enemy ) ;
45505: LD_ADDR_VAR 0 4
45509: PUSH
45510: LD_VAR 0 2
45514: PPUSH
45515: CALL_OW 250
45519: ST_TO_ADDR
// y := GetY ( enemy ) ;
45520: LD_ADDR_VAR 0 5
45524: PUSH
45525: LD_VAR 0 2
45529: PPUSH
45530: CALL_OW 251
45534: ST_TO_ADDR
// if ValidHex ( x , y ) then
45535: LD_VAR 0 4
45539: PPUSH
45540: LD_VAR 0 5
45544: PPUSH
45545: CALL_OW 488
45549: IFFALSE 45631
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45551: LD_VAR 0 2
45555: PPUSH
45556: CALL_OW 247
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: IN
45571: IFTRUE 45594
45573: PUSH
45574: LD_VAR 0 1
45578: PPUSH
45579: CALL_OW 255
45583: PPUSH
45584: LD_VAR 0 2
45588: PPUSH
45589: CALL_OW 292
45593: OR
45594: IFFALSE 45612
// ComAttackUnit ( unit , enemy ) else
45596: LD_VAR 0 1
45600: PPUSH
45601: LD_VAR 0 2
45605: PPUSH
45606: CALL_OW 115
45610: GO 45631
// ComAgressiveMove ( unit , x , y ) ;
45612: LD_VAR 0 1
45616: PPUSH
45617: LD_VAR 0 4
45621: PPUSH
45622: LD_VAR 0 5
45626: PPUSH
45627: CALL_OW 114
// end ;
45631: LD_VAR 0 3
45635: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45636: LD_INT 0
45638: PPUSH
45639: PPUSH
45640: PPUSH
// list := AreaToList ( area , 0 ) ;
45641: LD_ADDR_VAR 0 5
45645: PUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: LD_INT 0
45653: PPUSH
45654: CALL_OW 517
45658: ST_TO_ADDR
// if not list then
45659: LD_VAR 0 5
45663: NOT
45664: IFFALSE 45668
// exit ;
45666: GO 45798
// if all then
45668: LD_VAR 0 2
45672: IFFALSE 45760
// begin for i := 1 to list [ 1 ] do
45674: LD_ADDR_VAR 0 4
45678: PUSH
45679: DOUBLE
45680: LD_INT 1
45682: DEC
45683: ST_TO_ADDR
45684: LD_VAR 0 5
45688: PUSH
45689: LD_INT 1
45691: ARRAY
45692: PUSH
45693: FOR_TO
45694: IFFALSE 45756
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45696: LD_ADDR_VAR 0 3
45700: PUSH
45701: LD_VAR 0 3
45705: PPUSH
45706: LD_VAR 0 3
45710: PUSH
45711: LD_INT 1
45713: PLUS
45714: PPUSH
45715: LD_VAR 0 5
45719: PUSH
45720: LD_INT 1
45722: ARRAY
45723: PUSH
45724: LD_VAR 0 4
45728: ARRAY
45729: PUSH
45730: LD_VAR 0 5
45734: PUSH
45735: LD_INT 2
45737: ARRAY
45738: PUSH
45739: LD_VAR 0 4
45743: ARRAY
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PPUSH
45749: CALL_OW 1
45753: ST_TO_ADDR
45754: GO 45693
45756: POP
45757: POP
// exit ;
45758: GO 45798
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45760: LD_ADDR_VAR 0 3
45764: PUSH
45765: LD_VAR 0 5
45769: PUSH
45770: LD_INT 1
45772: ARRAY
45773: PUSH
45774: LD_INT 1
45776: ARRAY
45777: PUSH
45778: LD_VAR 0 5
45782: PUSH
45783: LD_INT 2
45785: ARRAY
45786: PUSH
45787: LD_INT 1
45789: ARRAY
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: ST_TO_ADDR
// end ;
45798: LD_VAR 0 3
45802: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45803: LD_INT 0
45805: PPUSH
45806: PPUSH
// list := AreaToList ( area , 0 ) ;
45807: LD_ADDR_VAR 0 4
45811: PUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: LD_INT 0
45819: PPUSH
45820: CALL_OW 517
45824: ST_TO_ADDR
// if not list then
45825: LD_VAR 0 4
45829: NOT
45830: IFFALSE 45834
// exit ;
45832: GO 45875
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45834: LD_ADDR_VAR 0 3
45838: PUSH
45839: LD_VAR 0 4
45843: PUSH
45844: LD_INT 1
45846: ARRAY
45847: PUSH
45848: LD_INT 1
45850: ARRAY
45851: PUSH
45852: LD_VAR 0 4
45856: PUSH
45857: LD_INT 2
45859: ARRAY
45860: PUSH
45861: LD_INT 1
45863: ARRAY
45864: PUSH
45865: LD_VAR 0 2
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: ST_TO_ADDR
// end ;
45875: LD_VAR 0 3
45879: RET
// export function First ( array ) ; begin
45880: LD_INT 0
45882: PPUSH
// if not array then
45883: LD_VAR 0 1
45887: NOT
45888: IFFALSE 45892
// exit ;
45890: GO 45906
// result := array [ 1 ] ;
45892: LD_ADDR_VAR 0 2
45896: PUSH
45897: LD_VAR 0 1
45901: PUSH
45902: LD_INT 1
45904: ARRAY
45905: ST_TO_ADDR
// end ;
45906: LD_VAR 0 2
45910: RET
// export function Last ( array ) ; begin
45911: LD_INT 0
45913: PPUSH
// if not array then
45914: LD_VAR 0 1
45918: NOT
45919: IFFALSE 45923
// exit ;
45921: GO 45939
// result := array [ array ] ;
45923: LD_ADDR_VAR 0 2
45927: PUSH
45928: LD_VAR 0 1
45932: PUSH
45933: LD_VAR 0 1
45937: ARRAY
45938: ST_TO_ADDR
// end ;
45939: LD_VAR 0 2
45943: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45944: LD_INT 0
45946: PPUSH
45947: PPUSH
// result := [ ] ;
45948: LD_ADDR_VAR 0 5
45952: PUSH
45953: EMPTY
45954: ST_TO_ADDR
// if not array then
45955: LD_VAR 0 1
45959: NOT
45960: IFFALSE 45964
// exit ;
45962: GO 46076
// for i := 1 to array do
45964: LD_ADDR_VAR 0 6
45968: PUSH
45969: DOUBLE
45970: LD_INT 1
45972: DEC
45973: ST_TO_ADDR
45974: LD_VAR 0 1
45978: PUSH
45979: FOR_TO
45980: IFFALSE 46074
// if array [ i ] [ index ] = value then
45982: LD_VAR 0 1
45986: PUSH
45987: LD_VAR 0 6
45991: ARRAY
45992: PUSH
45993: LD_VAR 0 2
45997: ARRAY
45998: PUSH
45999: LD_VAR 0 3
46003: EQUAL
46004: IFFALSE 46072
// begin if indexColumn then
46006: LD_VAR 0 4
46010: IFFALSE 46046
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46012: LD_ADDR_VAR 0 5
46016: PUSH
46017: LD_VAR 0 5
46021: PPUSH
46022: LD_VAR 0 1
46026: PUSH
46027: LD_VAR 0 6
46031: ARRAY
46032: PUSH
46033: LD_VAR 0 4
46037: ARRAY
46038: PPUSH
46039: CALL 41084 0 2
46043: ST_TO_ADDR
46044: GO 46072
// result := Join ( result , array [ i ] ) ;
46046: LD_ADDR_VAR 0 5
46050: PUSH
46051: LD_VAR 0 5
46055: PPUSH
46056: LD_VAR 0 1
46060: PUSH
46061: LD_VAR 0 6
46065: ARRAY
46066: PPUSH
46067: CALL 41084 0 2
46071: ST_TO_ADDR
// end ;
46072: GO 45979
46074: POP
46075: POP
// end ;
46076: LD_VAR 0 5
46080: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46081: LD_INT 0
46083: PPUSH
// if not vehicles or not parkingPoint then
46084: LD_VAR 0 1
46088: NOT
46089: IFTRUE 46098
46091: PUSH
46092: LD_VAR 0 2
46096: NOT
46097: OR
46098: IFFALSE 46102
// exit ;
46100: GO 46200
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46102: LD_ADDR_VAR 0 1
46106: PUSH
46107: LD_VAR 0 1
46111: PPUSH
46112: LD_INT 50
46114: PUSH
46115: EMPTY
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: LD_INT 92
46123: PUSH
46124: LD_VAR 0 2
46128: PUSH
46129: LD_INT 1
46131: ARRAY
46132: PUSH
46133: LD_VAR 0 2
46137: PUSH
46138: LD_INT 2
46140: ARRAY
46141: PUSH
46142: LD_INT 8
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PPUSH
46159: CALL_OW 72
46163: ST_TO_ADDR
// if not vehicles then
46164: LD_VAR 0 1
46168: NOT
46169: IFFALSE 46173
// exit ;
46171: GO 46200
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46173: LD_VAR 0 1
46177: PPUSH
46178: LD_VAR 0 2
46182: PUSH
46183: LD_INT 1
46185: ARRAY
46186: PPUSH
46187: LD_VAR 0 2
46191: PUSH
46192: LD_INT 2
46194: ARRAY
46195: PPUSH
46196: CALL_OW 111
// end ;
46200: LD_VAR 0 3
46204: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46205: LD_INT 0
46207: PPUSH
46208: PPUSH
46209: PPUSH
// if not side or not area then
46210: LD_VAR 0 1
46214: NOT
46215: IFTRUE 46224
46217: PUSH
46218: LD_VAR 0 2
46222: NOT
46223: OR
46224: IFFALSE 46228
// exit ;
46226: GO 46347
// tmp := AreaToList ( area , 0 ) ;
46228: LD_ADDR_VAR 0 5
46232: PUSH
46233: LD_VAR 0 2
46237: PPUSH
46238: LD_INT 0
46240: PPUSH
46241: CALL_OW 517
46245: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46246: LD_ADDR_VAR 0 4
46250: PUSH
46251: DOUBLE
46252: LD_INT 1
46254: DEC
46255: ST_TO_ADDR
46256: LD_VAR 0 5
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: PUSH
46265: FOR_TO
46266: IFFALSE 46345
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46268: LD_VAR 0 5
46272: PUSH
46273: LD_INT 1
46275: ARRAY
46276: PUSH
46277: LD_VAR 0 4
46281: ARRAY
46282: PPUSH
46283: LD_VAR 0 5
46287: PUSH
46288: LD_INT 2
46290: ARRAY
46291: PUSH
46292: LD_VAR 0 4
46296: ARRAY
46297: PPUSH
46298: CALL_OW 351
46302: IFFALSE 46343
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46304: LD_VAR 0 5
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PUSH
46313: LD_VAR 0 4
46317: ARRAY
46318: PPUSH
46319: LD_VAR 0 5
46323: PUSH
46324: LD_INT 2
46326: ARRAY
46327: PUSH
46328: LD_VAR 0 4
46332: ARRAY
46333: PPUSH
46334: LD_VAR 0 1
46338: PPUSH
46339: CALL_OW 244
// end ;
46343: GO 46265
46345: POP
46346: POP
// end ;
46347: LD_VAR 0 3
46351: RET
// export function UniqueArray ( array ) ; var i ; begin
46352: LD_INT 0
46354: PPUSH
46355: PPUSH
// result := [ ] ;
46356: LD_ADDR_VAR 0 2
46360: PUSH
46361: EMPTY
46362: ST_TO_ADDR
// if not array then
46363: LD_VAR 0 1
46367: NOT
46368: IFFALSE 46372
// exit ;
46370: GO 46433
// for i := 1 to array do
46372: LD_ADDR_VAR 0 3
46376: PUSH
46377: DOUBLE
46378: LD_INT 1
46380: DEC
46381: ST_TO_ADDR
46382: LD_VAR 0 1
46386: PUSH
46387: FOR_TO
46388: IFFALSE 46431
// if not array [ i ] in result then
46390: LD_VAR 0 1
46394: PUSH
46395: LD_VAR 0 3
46399: ARRAY
46400: PUSH
46401: LD_VAR 0 2
46405: IN
46406: NOT
46407: IFFALSE 46429
// result := Join ( result , i ) ;
46409: LD_ADDR_VAR 0 2
46413: PUSH
46414: LD_VAR 0 2
46418: PPUSH
46419: LD_VAR 0 3
46423: PPUSH
46424: CALL 41084 0 2
46428: ST_TO_ADDR
46429: GO 46387
46431: POP
46432: POP
// end ; end_of_file
46433: LD_VAR 0 2
46437: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46438: LD_INT 0
46440: PPUSH
46441: PPUSH
// disable ( mpActive ) ;
46442: LD_INT 100
46444: DISABLE_MARKED
// disable ( mpWin ) ;
46445: LD_INT 101
46447: DISABLE_MARKED
// disable ( mpLose ) ;
46448: LD_INT 102
46450: DISABLE_MARKED
// mpGameType := 0 ;
46451: LD_ADDR_EXP 1
46455: PUSH
46456: LD_INT 0
46458: ST_TO_ADDR
// mpGameSettings := [ ] ;
46459: LD_ADDR_EXP 4
46463: PUSH
46464: EMPTY
46465: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46466: LD_ADDR_EXP 2
46470: PUSH
46471: EMPTY
46472: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46473: LD_ADDR_EXP 3
46477: PUSH
46478: EMPTY
46479: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46480: LD_ADDR_EXP 27
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46495: LD_ADDR_EXP 10
46499: PUSH
46500: EMPTY
46501: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46502: LD_ADDR_EXP 11
46506: PUSH
46507: EMPTY
46508: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46509: LD_ADDR_EXP 40
46513: PUSH
46514: EMPTY
46515: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46516: LD_ADDR_EXP 41
46520: PUSH
46521: EMPTY
46522: ST_TO_ADDR
// mpDepots := [ ] ;
46523: LD_ADDR_EXP 12
46527: PUSH
46528: EMPTY
46529: ST_TO_ADDR
// mpBuildings := [ ] ;
46530: LD_ADDR_EXP 15
46534: PUSH
46535: EMPTY
46536: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46537: LD_ADDR_EXP 16
46541: PUSH
46542: EMPTY
46543: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46544: LD_ADDR_EXP 17
46548: PUSH
46549: EMPTY
46550: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46551: LD_ADDR_EXP 18
46555: PUSH
46556: EMPTY
46557: ST_TO_ADDR
// mpStartingResources := [ ] ;
46558: LD_ADDR_EXP 13
46562: PUSH
46563: EMPTY
46564: ST_TO_ADDR
// mpStartPos := [ ] ;
46565: LD_ADDR_EXP 19
46569: PUSH
46570: EMPTY
46571: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46572: LD_ADDR_EXP 20
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46581: LD_ADDR_EXP 21
46585: PUSH
46586: EMPTY
46587: ST_TO_ADDR
// mpApemans := [ ] ;
46588: LD_ADDR_EXP 28
46592: PUSH
46593: EMPTY
46594: ST_TO_ADDR
// mpApemansArea := [ ] ;
46595: LD_ADDR_EXP 29
46599: PUSH
46600: EMPTY
46601: ST_TO_ADDR
// mpRespawn := [ ] ;
46602: LD_ADDR_EXP 31
46606: PUSH
46607: EMPTY
46608: ST_TO_ADDR
// mpKingArea := 0 ;
46609: LD_ADDR_EXP 32
46613: PUSH
46614: LD_INT 0
46616: ST_TO_ADDR
// mpPoints := [ ] ;
46617: LD_ADDR_EXP 33
46621: PUSH
46622: EMPTY
46623: ST_TO_ADDR
// mpVehicles := 0 ;
46624: LD_ADDR_EXP 34
46628: PUSH
46629: LD_INT 0
46631: ST_TO_ADDR
// mpShipments := 0 ;
46632: LD_ADDR_EXP 25
46636: PUSH
46637: LD_INT 0
46639: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46640: LD_ADDR_EXP 38
46644: PUSH
46645: EMPTY
46646: PUSH
46647: EMPTY
46648: PUSH
46649: EMPTY
46650: PUSH
46651: EMPTY
46652: PUSH
46653: EMPTY
46654: PUSH
46655: EMPTY
46656: PUSH
46657: EMPTY
46658: PUSH
46659: EMPTY
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46671: LD_ADDR_EXP 30
46675: PUSH
46676: EMPTY
46677: PUSH
46678: EMPTY
46679: PUSH
46680: EMPTY
46681: PUSH
46682: EMPTY
46683: PUSH
46684: EMPTY
46685: PUSH
46686: EMPTY
46687: PUSH
46688: EMPTY
46689: PUSH
46690: EMPTY
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
46702: LD_ADDR_EXP 39
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: ST_TO_ADDR
// mpEmissions := 0 ;
46741: LD_ADDR_EXP 35
46745: PUSH
46746: LD_INT 0
46748: ST_TO_ADDR
// mpTeleports := 0 ;
46749: LD_ADDR_EXP 42
46753: PUSH
46754: LD_INT 0
46756: ST_TO_ADDR
// mpArtifacts := 0 ;
46757: LD_ADDR_EXP 43
46761: PUSH
46762: LD_INT 0
46764: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46765: LD_ADDR_EXP 44
46769: PUSH
46770: LD_INT 0
46772: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46773: LD_ADDR_EXP 23
46777: PUSH
46778: LD_INT 3
46780: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46781: LD_ADDR_EXP 22
46785: PUSH
46786: LD_INT 15
46788: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46789: LD_ADDR_EXP 36
46793: PUSH
46794: LD_INT 0
46796: ST_TO_ADDR
// mpGameActive := false ;
46797: LD_ADDR_EXP 37
46801: PUSH
46802: LD_INT 0
46804: ST_TO_ADDR
// mpBlockRespThread := false ;
46805: LD_ADDR_EXP 45
46809: PUSH
46810: LD_INT 0
46812: ST_TO_ADDR
// for i := 1 to 32 do
46813: LD_ADDR_VAR 0 2
46817: PUSH
46818: DOUBLE
46819: LD_INT 1
46821: DEC
46822: ST_TO_ADDR
46823: LD_INT 32
46825: PUSH
46826: FOR_TO
46827: IFFALSE 46854
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46829: LD_ADDR_EXP 4
46833: PUSH
46834: LD_EXP 4
46838: PPUSH
46839: LD_VAR 0 2
46843: PPUSH
46844: LD_INT 0
46846: PPUSH
46847: CALL_OW 1
46851: ST_TO_ADDR
46852: GO 46826
46854: POP
46855: POP
// end ;
46856: LD_VAR 0 1
46860: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46861: LD_INT 0
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
46877: LD_ADDR_VAR 0 14
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 5
46893: PUSH
46894: LD_INT 6
46896: PUSH
46897: LD_INT 7
46899: PUSH
46900: LD_INT 8
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: ST_TO_ADDR
// for i in gameTypes do
46912: LD_ADDR_VAR 0 2
46916: PUSH
46917: LD_VAR 0 14
46921: PUSH
46922: FOR_IN
46923: IFFALSE 46932
// disable ( i ) ;
46925: LD_VAR 0 2
46929: DISABLE_MARKED
46930: GO 46922
46932: POP
46933: POP
// if Multiplayer then
46934: LD_OWVAR 4
46938: IFFALSE 47122
// begin mpGameType := mp_game_type ;
46940: LD_ADDR_EXP 1
46944: PUSH
46945: LD_OWVAR 6
46949: ST_TO_ADDR
// your_side := mp_player_side ;
46950: LD_ADDR_OWVAR 2
46954: PUSH
46955: LD_OWVAR 7
46959: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46960: LD_ADDR_EXP 5
46964: PUSH
46965: LD_OWVAR 17
46969: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46970: LD_ADDR_EXP 6
46974: PUSH
46975: LD_OWVAR 15
46979: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46980: LD_ADDR_EXP 7
46984: PUSH
46985: LD_OWVAR 16
46989: ST_TO_ADDR
// mpTeams := mp_teams ;
46990: LD_ADDR_EXP 8
46994: PUSH
46995: LD_OWVAR 12
46999: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47000: LD_ADDR_VAR 0 2
47004: PUSH
47005: DOUBLE
47006: LD_INT 1
47008: DEC
47009: ST_TO_ADDR
47010: LD_EXP 2
47014: PPUSH
47015: CALL 5108 0 1
47019: PUSH
47020: FOR_TO
47021: IFFALSE 47097
// begin setting := mpGameSettingsKeys [ i ] ;
47023: LD_ADDR_VAR 0 12
47027: PUSH
47028: LD_EXP 2
47032: PUSH
47033: LD_VAR 0 2
47037: ARRAY
47038: ST_TO_ADDR
// if setting then
47039: LD_VAR 0 12
47043: IFFALSE 47095
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47045: LD_ADDR_EXP 4
47049: PUSH
47050: LD_EXP 4
47054: PPUSH
47055: LD_VAR 0 2
47059: PPUSH
47060: LD_EXP 3
47064: PUSH
47065: LD_VAR 0 2
47069: ARRAY
47070: PUSH
47071: LD_VAR 0 2
47075: PUSH
47076: LD_INT 1
47078: MINUS
47079: PPUSH
47080: CALL_OW 426
47084: PUSH
47085: LD_INT 1
47087: PLUS
47088: ARRAY
47089: PPUSH
47090: CALL_OW 1
47094: ST_TO_ADDR
// end ;
47095: GO 47020
47097: POP
47098: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47099: LD_ADDR_EXP 9
47103: PUSH
47104: LD_EXP 6
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: DIFF
47115: PUSH
47116: LD_INT 1
47118: GREATER
47119: ST_TO_ADDR
// end else
47120: GO 47122
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47122: LD_EXP 1
47126: PPUSH
47127: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
47131: LD_EXP 16
47135: PPUSH
47136: CALL 5108 0 1
47140: IFFALSE 47171
// begin for i in mpMarkedAreas do
47142: LD_ADDR_VAR 0 2
47146: PUSH
47147: LD_EXP 16
47151: PUSH
47152: FOR_IN
47153: IFFALSE 47169
// SetAreaMapShow ( i , 0 ) ;
47155: LD_VAR 0 2
47159: PPUSH
47160: LD_INT 0
47162: PPUSH
47163: CALL_OW 424
47167: GO 47152
47169: POP
47170: POP
// end ; for i := 1 to 8 do
47171: LD_ADDR_VAR 0 2
47175: PUSH
47176: DOUBLE
47177: LD_INT 1
47179: DEC
47180: ST_TO_ADDR
47181: LD_INT 8
47183: PUSH
47184: FOR_TO
47185: IFFALSE 48644
// begin if not mpSidePositions [ i ] then
47187: LD_EXP 5
47191: PUSH
47192: LD_VAR 0 2
47196: ARRAY
47197: NOT
47198: IFFALSE 47202
// continue ;
47200: GO 47184
// side := i ;
47202: LD_ADDR_VAR 0 7
47206: PUSH
47207: LD_VAR 0 2
47211: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47212: LD_ADDR_VAR 0 9
47216: PUSH
47217: LD_EXP 7
47221: PUSH
47222: LD_VAR 0 2
47226: ARRAY
47227: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47228: LD_ADDR_VAR 0 8
47232: PUSH
47233: LD_EXP 5
47237: PUSH
47238: LD_VAR 0 2
47242: ARRAY
47243: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47244: LD_EXP 10
47248: PPUSH
47249: CALL 5108 0 1
47253: IFFALSE 47330
// begin for j in mpOilDeposits [ pos ] do
47255: LD_ADDR_VAR 0 3
47259: PUSH
47260: LD_EXP 10
47264: PUSH
47265: LD_VAR 0 8
47269: ARRAY
47270: PUSH
47271: FOR_IN
47272: IFFALSE 47328
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47274: LD_VAR 0 3
47278: PUSH
47279: LD_INT 1
47281: ARRAY
47282: PPUSH
47283: LD_VAR 0 3
47287: PUSH
47288: LD_INT 2
47290: ARRAY
47291: PPUSH
47292: LD_INT 2
47294: PPUSH
47295: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47299: LD_VAR 0 3
47303: PUSH
47304: LD_INT 1
47306: ARRAY
47307: PPUSH
47308: LD_VAR 0 3
47312: PUSH
47313: LD_INT 2
47315: ARRAY
47316: PPUSH
47317: LD_VAR 0 7
47321: PPUSH
47322: CALL_OW 441
// end ;
47326: GO 47271
47328: POP
47329: POP
// end ; if Count ( mpSibDeposits ) then
47330: LD_EXP 11
47334: PPUSH
47335: CALL 5108 0 1
47339: IFFALSE 47416
// begin for j in mpSibDeposits [ pos ] do
47341: LD_ADDR_VAR 0 3
47345: PUSH
47346: LD_EXP 11
47350: PUSH
47351: LD_VAR 0 8
47355: ARRAY
47356: PUSH
47357: FOR_IN
47358: IFFALSE 47414
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47360: LD_VAR 0 3
47364: PUSH
47365: LD_INT 1
47367: ARRAY
47368: PPUSH
47369: LD_VAR 0 3
47373: PUSH
47374: LD_INT 2
47376: ARRAY
47377: PPUSH
47378: LD_INT 3
47380: PPUSH
47381: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47385: LD_VAR 0 3
47389: PUSH
47390: LD_INT 1
47392: ARRAY
47393: PPUSH
47394: LD_VAR 0 3
47398: PUSH
47399: LD_INT 2
47401: ARRAY
47402: PPUSH
47403: LD_VAR 0 7
47407: PPUSH
47408: CALL_OW 441
// end ;
47412: GO 47357
47414: POP
47415: POP
// end ; InitBc ;
47416: CALL_OW 21
// InitUc ;
47420: CALL_OW 18
// uc_side := side ;
47424: LD_ADDR_OWVAR 20
47428: PUSH
47429: LD_VAR 0 7
47433: ST_TO_ADDR
// uc_nation := nation ;
47434: LD_ADDR_OWVAR 21
47438: PUSH
47439: LD_VAR 0 9
47443: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47444: LD_EXP 20
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: GREATER
47453: IFFALSE 47612
// begin x := mpStartPos [ pos ] [ 1 ] ;
47455: LD_ADDR_VAR 0 5
47459: PUSH
47460: LD_EXP 19
47464: PUSH
47465: LD_VAR 0 8
47469: ARRAY
47470: PUSH
47471: LD_INT 1
47473: ARRAY
47474: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47475: LD_ADDR_VAR 0 6
47479: PUSH
47480: LD_EXP 19
47484: PUSH
47485: LD_VAR 0 8
47489: ARRAY
47490: PUSH
47491: LD_INT 2
47493: ARRAY
47494: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47495: LD_VAR 0 5
47499: PPUSH
47500: LD_VAR 0 6
47504: PPUSH
47505: LD_INT 12
47507: PPUSH
47508: LD_INT 2
47510: PPUSH
47511: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47515: LD_ADDR_EXP 21
47519: PUSH
47520: LD_EXP 21
47524: PPUSH
47525: LD_VAR 0 7
47529: PPUSH
47530: LD_VAR 0 7
47534: PPUSH
47535: LD_VAR 0 5
47539: PPUSH
47540: LD_VAR 0 6
47544: PPUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 100
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 70
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 40
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 10
47577: PUSH
47578: LD_INT 25
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 20
47587: PUSH
47588: LD_INT 100
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: PPUSH
47602: CALL_OW 418
47606: PPUSH
47607: CALL_OW 1
47611: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47612: LD_EXP 12
47616: PPUSH
47617: CALL 5108 0 1
47621: IFFALSE 47820
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
47623: LD_EXP 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 8
47633: PUSH
47634: LD_INT 6
47636: PUSH
47637: LD_INT 7
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: IN
47646: IFFALSE 47666
// begin bc_level := 10 ;
47648: LD_ADDR_OWVAR 43
47652: PUSH
47653: LD_INT 10
47655: ST_TO_ADDR
// bc_type := b_warehouse ;
47656: LD_ADDR_OWVAR 42
47660: PUSH
47661: LD_INT 1
47663: ST_TO_ADDR
// end else
47664: GO 47682
// begin bc_level := 0 ;
47666: LD_ADDR_OWVAR 43
47670: PUSH
47671: LD_INT 0
47673: ST_TO_ADDR
// bc_type := b_depot ;
47674: LD_ADDR_OWVAR 42
47678: PUSH
47679: LD_INT 0
47681: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47682: LD_ADDR_VAR 0 4
47686: PUSH
47687: LD_EXP 12
47691: PUSH
47692: LD_VAR 0 8
47696: ARRAY
47697: PUSH
47698: LD_INT 1
47700: ARRAY
47701: PPUSH
47702: LD_EXP 12
47706: PUSH
47707: LD_VAR 0 8
47711: ARRAY
47712: PUSH
47713: LD_INT 2
47715: ARRAY
47716: PPUSH
47717: LD_EXP 12
47721: PUSH
47722: LD_VAR 0 8
47726: ARRAY
47727: PUSH
47728: LD_INT 3
47730: ARRAY
47731: PPUSH
47732: CALL_OW 47
47736: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47737: LD_VAR 0 4
47741: PPUSH
47742: LD_STRING @
47744: PUSH
47745: LD_VAR 0 7
47749: STR
47750: PPUSH
47751: CALL_OW 500
// if Count ( mpStartingResources ) then
47755: LD_EXP 13
47759: PPUSH
47760: CALL 5108 0 1
47764: IFFALSE 47818
// begin for j := 1 to mpStartingResources do
47766: LD_ADDR_VAR 0 3
47770: PUSH
47771: DOUBLE
47772: LD_INT 1
47774: DEC
47775: ST_TO_ADDR
47776: LD_EXP 13
47780: PUSH
47781: FOR_TO
47782: IFFALSE 47816
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47784: LD_VAR 0 4
47788: PPUSH
47789: CALL_OW 274
47793: PPUSH
47794: LD_VAR 0 3
47798: PPUSH
47799: LD_EXP 13
47803: PUSH
47804: LD_VAR 0 3
47808: ARRAY
47809: PPUSH
47810: CALL_OW 277
47814: GO 47781
47816: POP
47817: POP
// end ; end else
47818: GO 48027
// if Count ( mpStartingResources ) then
47820: LD_EXP 13
47824: PPUSH
47825: CALL 5108 0 1
47829: IFFALSE 48027
// begin x := mpStartPos [ pos ] [ 1 ] ;
47831: LD_ADDR_VAR 0 5
47835: PUSH
47836: LD_EXP 19
47840: PUSH
47841: LD_VAR 0 8
47845: ARRAY
47846: PUSH
47847: LD_INT 1
47849: ARRAY
47850: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47851: LD_ADDR_VAR 0 6
47855: PUSH
47856: LD_EXP 19
47860: PUSH
47861: LD_VAR 0 8
47865: ARRAY
47866: PUSH
47867: LD_INT 2
47869: ARRAY
47870: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47871: LD_ADDR_VAR 0 3
47875: PUSH
47876: DOUBLE
47877: LD_INT 1
47879: DEC
47880: ST_TO_ADDR
47881: LD_EXP 13
47885: PUSH
47886: FOR_TO
47887: IFFALSE 48025
// begin resources := mpStartingResources [ j ] ;
47889: LD_ADDR_VAR 0 13
47893: PUSH
47894: LD_EXP 13
47898: PUSH
47899: LD_VAR 0 3
47903: ARRAY
47904: ST_TO_ADDR
// if resources = 0 then
47905: LD_VAR 0 13
47909: PUSH
47910: LD_INT 0
47912: EQUAL
47913: IFFALSE 47917
// continue ;
47915: GO 47886
// repeat if resources >= 50 then
47917: LD_VAR 0 13
47921: PUSH
47922: LD_INT 50
47924: GREATEREQUAL
47925: IFFALSE 47971
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47927: LD_VAR 0 3
47931: PPUSH
47932: LD_INT 5
47934: PPUSH
47935: LD_VAR 0 5
47939: PPUSH
47940: LD_VAR 0 6
47944: PPUSH
47945: LD_INT 6
47947: PPUSH
47948: LD_INT 0
47950: PPUSH
47951: CALL_OW 60
// resources := resources - 50 ;
47955: LD_ADDR_VAR 0 13
47959: PUSH
47960: LD_VAR 0 13
47964: PUSH
47965: LD_INT 50
47967: MINUS
47968: ST_TO_ADDR
// end else
47969: GO 48013
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47971: LD_VAR 0 3
47975: PPUSH
47976: LD_VAR 0 13
47980: PUSH
47981: LD_INT 10
47983: DIV
47984: PPUSH
47985: LD_VAR 0 5
47989: PPUSH
47990: LD_VAR 0 6
47994: PPUSH
47995: LD_INT 6
47997: PPUSH
47998: LD_INT 0
48000: PPUSH
48001: CALL_OW 60
// resources := 0 ;
48005: LD_ADDR_VAR 0 13
48009: PUSH
48010: LD_INT 0
48012: ST_TO_ADDR
// end ; until resources <= 0 ;
48013: LD_VAR 0 13
48017: PUSH
48018: LD_INT 0
48020: LESSEQUAL
48021: IFFALSE 47917
// end ;
48023: GO 47886
48025: POP
48026: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
48027: LD_EXP 15
48031: PPUSH
48032: CALL 5108 0 1
48036: IFFALSE 48056
48038: PUSH
48039: LD_EXP 1
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 8
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: IN
48054: NOT
48055: AND
48056: IFFALSE 48134
// begin for j in mpBuildings [ pos ] do
48058: LD_ADDR_VAR 0 3
48062: PUSH
48063: LD_EXP 15
48067: PUSH
48068: LD_VAR 0 8
48072: ARRAY
48073: PUSH
48074: FOR_IN
48075: IFFALSE 48132
// begin bc_level := 0 ;
48077: LD_ADDR_OWVAR 43
48081: PUSH
48082: LD_INT 0
48084: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48085: LD_ADDR_OWVAR 42
48089: PUSH
48090: LD_VAR 0 3
48094: PUSH
48095: LD_INT 1
48097: ARRAY
48098: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48099: LD_VAR 0 3
48103: PUSH
48104: LD_INT 2
48106: ARRAY
48107: PPUSH
48108: LD_VAR 0 3
48112: PUSH
48113: LD_INT 3
48115: ARRAY
48116: PPUSH
48117: LD_VAR 0 3
48121: PUSH
48122: LD_INT 4
48124: ARRAY
48125: PPUSH
48126: CALL_OW 47
// end ;
48130: GO 48074
48132: POP
48133: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48134: LD_EXP 24
48138: IFFALSE 48158
48140: PUSH
48141: LD_INT 20
48143: PPUSH
48144: LD_VAR 0 7
48148: PPUSH
48149: CALL_OW 321
48153: PUSH
48154: LD_INT 1
48156: EQUAL
48157: AND
48158: IFFALSE 48175
// SetTech ( tech_SibDet , side , state_researched ) ;
48160: LD_INT 20
48162: PPUSH
48163: LD_VAR 0 7
48167: PPUSH
48168: LD_INT 2
48170: PPUSH
48171: CALL_OW 322
// if not mpArtifacts then
48175: LD_EXP 43
48179: NOT
48180: IFFALSE 48197
// SetTech ( tech_artifact , side , state_disabled ) ;
48182: LD_INT 24
48184: PPUSH
48185: LD_VAR 0 7
48189: PPUSH
48190: LD_INT 0
48192: PPUSH
48193: CALL_OW 322
// if mpSibBomb = 1 then
48197: LD_EXP 26
48201: PUSH
48202: LD_INT 1
48204: EQUAL
48205: IFFALSE 48224
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48207: LD_INT 25
48209: PPUSH
48210: LD_VAR 0 7
48214: PPUSH
48215: LD_INT 1
48217: PPUSH
48218: CALL_OW 322
// end else
48222: GO 48239
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48224: LD_INT 25
48226: PPUSH
48227: LD_VAR 0 7
48231: PPUSH
48232: LD_INT 0
48234: PPUSH
48235: CALL_OW 322
// end ; if mpVehicles then
48239: LD_EXP 34
48243: IFFALSE 48342
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48245: LD_ADDR_VAR 0 3
48249: PUSH
48250: LD_VAR 0 7
48254: PPUSH
48255: LD_VAR 0 9
48259: PPUSH
48260: LD_EXP 34
48264: PPUSH
48265: CALL 49601 0 3
48269: PUSH
48270: FOR_IN
48271: IFFALSE 48340
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48273: LD_VAR 0 3
48277: PPUSH
48278: LD_INT 0
48280: PPUSH
48281: LD_INT 5
48283: PPUSH
48284: CALL_OW 12
48288: PPUSH
48289: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48293: LD_VAR 0 3
48297: PPUSH
48298: LD_EXP 19
48302: PUSH
48303: LD_VAR 0 8
48307: ARRAY
48308: PUSH
48309: LD_INT 1
48311: ARRAY
48312: PPUSH
48313: LD_EXP 19
48317: PUSH
48318: LD_VAR 0 8
48322: ARRAY
48323: PUSH
48324: LD_INT 2
48326: ARRAY
48327: PPUSH
48328: LD_INT 12
48330: PPUSH
48331: LD_INT 0
48333: PPUSH
48334: CALL_OW 50
// end ;
48338: GO 48270
48340: POP
48341: POP
// end ; uc_nation := nation ;
48342: LD_ADDR_OWVAR 21
48346: PUSH
48347: LD_VAR 0 9
48351: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48352: LD_EXP 1
48356: PUSH
48357: LD_INT 6
48359: PUSH
48360: LD_INT 7
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: IN
48367: IFFALSE 48392
48369: PUSH
48370: LD_EXP 5
48374: PUSH
48375: LD_VAR 0 2
48379: ARRAY
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: IN
48391: AND
48392: IFFALSE 48440
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48394: LD_ADDR_VAR 0 11
48398: PUSH
48399: LD_VAR 0 7
48403: PPUSH
48404: LD_VAR 0 9
48408: PPUSH
48409: LD_EXP 22
48413: PUSH
48414: LD_EXP 22
48418: PUSH
48419: LD_INT 2
48421: DIV
48422: PLUS
48423: PPUSH
48424: LD_EXP 23
48428: PUSH
48429: LD_INT 1
48431: PLUS
48432: PPUSH
48433: CALL 49056 0 4
48437: ST_TO_ADDR
48438: GO 48470
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48440: LD_ADDR_VAR 0 11
48444: PUSH
48445: LD_VAR 0 7
48449: PPUSH
48450: LD_VAR 0 9
48454: PPUSH
48455: LD_EXP 22
48459: PPUSH
48460: LD_EXP 23
48464: PPUSH
48465: CALL 49056 0 4
48469: ST_TO_ADDR
// for j in team do
48470: LD_ADDR_VAR 0 3
48474: PUSH
48475: LD_VAR 0 11
48479: PUSH
48480: FOR_IN
48481: IFFALSE 48530
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48483: LD_VAR 0 3
48487: PPUSH
48488: LD_EXP 19
48492: PUSH
48493: LD_VAR 0 8
48497: ARRAY
48498: PUSH
48499: LD_INT 1
48501: ARRAY
48502: PPUSH
48503: LD_EXP 19
48507: PUSH
48508: LD_VAR 0 8
48512: ARRAY
48513: PUSH
48514: LD_INT 2
48516: ARRAY
48517: PPUSH
48518: LD_INT 12
48520: PPUSH
48521: LD_INT 0
48523: PPUSH
48524: CALL_OW 50
48528: GO 48480
48530: POP
48531: POP
// if mpApemans then
48532: LD_EXP 28
48536: IFFALSE 48642
// begin for j := 1 to mpApemans do
48538: LD_ADDR_VAR 0 3
48542: PUSH
48543: DOUBLE
48544: LD_INT 1
48546: DEC
48547: ST_TO_ADDR
48548: LD_EXP 28
48552: PUSH
48553: FOR_TO
48554: IFFALSE 48640
// begin PrepareApeman ( - 5 ) ;
48556: LD_INT 5
48558: NEG
48559: PPUSH
48560: CALL 37211 0 1
// ape := CreateHuman ;
48564: LD_ADDR_VAR 0 10
48568: PUSH
48569: CALL_OW 44
48573: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48574: LD_ADDR_EXP 30
48578: PUSH
48579: LD_EXP 30
48583: PPUSH
48584: LD_VAR 0 8
48588: PPUSH
48589: LD_EXP 30
48593: PUSH
48594: LD_VAR 0 8
48598: ARRAY
48599: PPUSH
48600: LD_VAR 0 10
48604: PPUSH
48605: CALL 41084 0 2
48609: PPUSH
48610: CALL_OW 1
48614: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48615: LD_VAR 0 10
48619: PPUSH
48620: LD_EXP 29
48624: PUSH
48625: LD_VAR 0 8
48629: ARRAY
48630: PPUSH
48631: LD_INT 0
48633: PPUSH
48634: CALL_OW 49
// end ;
48638: GO 48553
48640: POP
48641: POP
// end ; end ;
48642: GO 47184
48644: POP
48645: POP
// if not mpTeamGame then
48646: LD_EXP 9
48650: NOT
48651: IFFALSE 48749
// begin for i := 1 to 8 do
48653: LD_ADDR_VAR 0 2
48657: PUSH
48658: DOUBLE
48659: LD_INT 1
48661: DEC
48662: ST_TO_ADDR
48663: LD_INT 8
48665: PUSH
48666: FOR_TO
48667: IFFALSE 48745
// for j := 1 to 8 do
48669: LD_ADDR_VAR 0 3
48673: PUSH
48674: DOUBLE
48675: LD_INT 1
48677: DEC
48678: ST_TO_ADDR
48679: LD_INT 8
48681: PUSH
48682: FOR_TO
48683: IFFALSE 48741
// if i <> j then
48685: LD_VAR 0 2
48689: PUSH
48690: LD_VAR 0 3
48694: NONEQUAL
48695: IFFALSE 48719
// SetAttitude ( i , j , att_neutral , true ) else
48697: LD_VAR 0 2
48701: PPUSH
48702: LD_VAR 0 3
48706: PPUSH
48707: LD_INT 0
48709: PPUSH
48710: LD_INT 1
48712: PPUSH
48713: CALL_OW 80
48717: GO 48739
// SetAttitude ( i , j , att_friend , true ) ;
48719: LD_VAR 0 2
48723: PPUSH
48724: LD_VAR 0 3
48728: PPUSH
48729: LD_INT 1
48731: PPUSH
48732: LD_INT 1
48734: PPUSH
48735: CALL_OW 80
48739: GO 48682
48741: POP
48742: POP
48743: GO 48666
48745: POP
48746: POP
// end else
48747: GO 48924
// begin if mpSharedVision then
48749: LD_EXP 14
48753: IFFALSE 48818
// begin for i in mpTeams do
48755: LD_ADDR_VAR 0 2
48759: PUSH
48760: LD_EXP 8
48764: PUSH
48765: FOR_IN
48766: IFFALSE 48816
// for j := 2 to i do
48768: LD_ADDR_VAR 0 3
48772: PUSH
48773: DOUBLE
48774: LD_INT 2
48776: DEC
48777: ST_TO_ADDR
48778: LD_VAR 0 2
48782: PUSH
48783: FOR_TO
48784: IFFALSE 48812
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48786: LD_VAR 0 2
48790: PUSH
48791: LD_VAR 0 3
48795: ARRAY
48796: PPUSH
48797: LD_VAR 0 2
48801: PUSH
48802: LD_INT 1
48804: ARRAY
48805: PPUSH
48806: CALL_OW 343
48810: GO 48783
48812: POP
48813: POP
48814: GO 48765
48816: POP
48817: POP
// end ; for i := 1 to 8 do
48818: LD_ADDR_VAR 0 2
48822: PUSH
48823: DOUBLE
48824: LD_INT 1
48826: DEC
48827: ST_TO_ADDR
48828: LD_INT 8
48830: PUSH
48831: FOR_TO
48832: IFFALSE 48922
// for j := 1 to 8 do
48834: LD_ADDR_VAR 0 3
48838: PUSH
48839: DOUBLE
48840: LD_INT 1
48842: DEC
48843: ST_TO_ADDR
48844: LD_INT 8
48846: PUSH
48847: FOR_TO
48848: IFFALSE 48918
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48850: LD_EXP 6
48854: PUSH
48855: LD_VAR 0 2
48859: ARRAY
48860: PUSH
48861: LD_EXP 6
48865: PUSH
48866: LD_VAR 0 3
48870: ARRAY
48871: EQUAL
48872: IFFALSE 48896
// SetAttitude ( i , j , att_friend , true ) else
48874: LD_VAR 0 2
48878: PPUSH
48879: LD_VAR 0 3
48883: PPUSH
48884: LD_INT 1
48886: PPUSH
48887: LD_INT 1
48889: PPUSH
48890: CALL_OW 80
48894: GO 48916
// SetAttitude ( i , j , att_enemy , true ) ;
48896: LD_VAR 0 2
48900: PPUSH
48901: LD_VAR 0 3
48905: PPUSH
48906: LD_INT 2
48908: PPUSH
48909: LD_INT 1
48911: PPUSH
48912: CALL_OW 80
48916: GO 48847
48918: POP
48919: POP
48920: GO 48831
48922: POP
48923: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48924: LD_ADDR_OWVAR 71
48928: PUSH
48929: LD_EXP 7
48933: PUSH
48934: LD_OWVAR 2
48938: ARRAY
48939: ST_TO_ADDR
// if IAmSpec then
48940: CALL_OW 531
48944: IFFALSE 48985
// begin FogOff ( true ) ;
48946: LD_INT 1
48948: PPUSH
48949: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48953: LD_EXP 27
48957: PUSH
48958: LD_INT 1
48960: ARRAY
48961: PUSH
48962: LD_INT 2
48964: DIV
48965: PPUSH
48966: LD_EXP 27
48970: PUSH
48971: LD_INT 2
48973: ARRAY
48974: PUSH
48975: LD_INT 2
48977: DIV
48978: PPUSH
48979: CALL_OW 86
// end else
48983: GO 49031
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48985: LD_EXP 19
48989: PUSH
48990: LD_EXP 5
48994: PUSH
48995: LD_OWVAR 2
48999: ARRAY
49000: ARRAY
49001: PUSH
49002: LD_INT 1
49004: ARRAY
49005: PPUSH
49006: LD_EXP 19
49010: PUSH
49011: LD_EXP 5
49015: PUSH
49016: LD_OWVAR 2
49020: ARRAY
49021: ARRAY
49022: PUSH
49023: LD_INT 2
49025: ARRAY
49026: PPUSH
49027: CALL_OW 86
// end ; BeginBuildUp ;
49031: CALL 50134 0 0
// enable ( mpActive ) ;
49035: LD_INT 100
49037: ENABLE_MARKED
// enable ( mpGameType ) ;
49038: LD_EXP 1
49042: ENABLE_MARKED
// mpGameActive := true ;
49043: LD_ADDR_EXP 37
49047: PUSH
49048: LD_INT 1
49050: ST_TO_ADDR
// end ;
49051: LD_VAR 0 1
49055: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49056: LD_INT 0
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
// result := [ ] ;
49063: LD_ADDR_VAR 0 5
49067: PUSH
49068: EMPTY
49069: ST_TO_ADDR
// class := class_soldier ;
49070: LD_ADDR_VAR 0 8
49074: PUSH
49075: LD_INT 1
49077: ST_TO_ADDR
// uc_side := side ;
49078: LD_ADDR_OWVAR 20
49082: PUSH
49083: LD_VAR 0 1
49087: ST_TO_ADDR
// uc_nation := nation ;
49088: LD_ADDR_OWVAR 21
49092: PUSH
49093: LD_VAR 0 2
49097: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49098: LD_ADDR_OWVAR 26
49102: PUSH
49103: LD_OWVAR 19
49107: PUSH
49108: LD_VAR 0 1
49112: ARRAY
49113: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49114: LD_INT 1
49116: PPUSH
49117: LD_INT 2
49119: PPUSH
49120: CALL_OW 12
49124: PPUSH
49125: LD_VAR 0 8
49129: PPUSH
49130: LD_VAR 0 4
49134: PUSH
49135: LD_INT 2
49137: PLUS
49138: PPUSH
49139: CALL_OW 380
// hc_importance := 105 ;
49143: LD_ADDR_OWVAR 32
49147: PUSH
49148: LD_INT 105
49150: ST_TO_ADDR
// if Multiplayer then
49151: LD_OWVAR 4
49155: IFFALSE 49195
// begin hc_gallery := MULTIAVATARS ;
49157: LD_ADDR_OWVAR 33
49161: PUSH
49162: LD_STRING MULTIAVATARS
49164: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49165: LD_ADDR_OWVAR 34
49169: PUSH
49170: LD_VAR 0 1
49174: PPUSH
49175: CALL_OW 525
49179: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49180: LD_ADDR_OWVAR 27
49184: PUSH
49185: LD_VAR 0 1
49189: PPUSH
49190: CALL_OW 526
49194: ST_TO_ADDR
// end ; commander := CreateHuman ;
49195: LD_ADDR_VAR 0 9
49199: PUSH
49200: CALL_OW 44
49204: ST_TO_ADDR
// result := Join ( result , commander ) ;
49205: LD_ADDR_VAR 0 5
49209: PUSH
49210: LD_VAR 0 5
49214: PPUSH
49215: LD_VAR 0 9
49219: PPUSH
49220: CALL 41084 0 2
49224: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49225: LD_ADDR_EXP 39
49229: PUSH
49230: LD_EXP 39
49234: PPUSH
49235: LD_VAR 0 1
49239: PPUSH
49240: LD_VAR 0 9
49244: PPUSH
49245: CALL_OW 1
49249: ST_TO_ADDR
// if mpTeamPreset then
49250: LD_LOC 1
49254: IFFALSE 49350
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49256: LD_LOC 1
49260: PUSH
49261: LD_INT 1
49263: ARRAY
49264: PPUSH
49265: LD_VAR 0 5
49269: PUSH
49270: LD_VAR 0 5
49274: ARRAY
49275: PPUSH
49276: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49280: LD_VAR 0 5
49284: PUSH
49285: LD_VAR 0 5
49289: ARRAY
49290: PPUSH
49291: LD_INT 1
49293: PPUSH
49294: LD_LOC 1
49298: PUSH
49299: LD_INT 1
49301: ARRAY
49302: PPUSH
49303: LD_INT 1
49305: PPUSH
49306: CALL_OW 260
49310: PPUSH
49311: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49315: LD_VAR 0 5
49319: PUSH
49320: LD_VAR 0 5
49324: ARRAY
49325: PPUSH
49326: LD_INT 2
49328: PPUSH
49329: LD_LOC 1
49333: PUSH
49334: LD_INT 1
49336: ARRAY
49337: PPUSH
49338: LD_INT 2
49340: PPUSH
49341: CALL_OW 260
49345: PPUSH
49346: CALL_OW 239
// end ; InitHc_All ( ) ;
49350: CALL_OW 584
// class := 2 ;
49354: LD_ADDR_VAR 0 8
49358: PUSH
49359: LD_INT 2
49361: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49362: LD_ADDR_VAR 0 6
49366: PUSH
49367: DOUBLE
49368: LD_INT 1
49370: DEC
49371: ST_TO_ADDR
49372: LD_VAR 0 3
49376: PUSH
49377: LD_INT 1
49379: MINUS
49380: PUSH
49381: FOR_TO
49382: IFFALSE 49577
// begin PrepareHuman ( false , class , skill ) ;
49384: LD_INT 0
49386: PPUSH
49387: LD_VAR 0 8
49391: PPUSH
49392: LD_VAR 0 4
49396: PPUSH
49397: CALL_OW 380
// un := CreateHuman ;
49401: LD_ADDR_VAR 0 7
49405: PUSH
49406: CALL_OW 44
49410: ST_TO_ADDR
// result := Join ( result , un ) ;
49411: LD_ADDR_VAR 0 5
49415: PUSH
49416: LD_VAR 0 5
49420: PPUSH
49421: LD_VAR 0 7
49425: PPUSH
49426: CALL 41084 0 2
49430: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49431: LD_LOC 1
49435: PPUSH
49436: CALL 5108 0 1
49440: PUSH
49441: LD_VAR 0 3
49445: GREATEREQUAL
49446: IFFALSE 49542
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49448: LD_LOC 1
49452: PUSH
49453: LD_VAR 0 6
49457: PUSH
49458: LD_INT 1
49460: PLUS
49461: ARRAY
49462: PPUSH
49463: LD_VAR 0 7
49467: PPUSH
49468: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49472: LD_VAR 0 7
49476: PPUSH
49477: LD_INT 1
49479: PPUSH
49480: LD_LOC 1
49484: PUSH
49485: LD_VAR 0 6
49489: PUSH
49490: LD_INT 1
49492: PLUS
49493: ARRAY
49494: PPUSH
49495: LD_INT 1
49497: PPUSH
49498: CALL_OW 260
49502: PPUSH
49503: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49507: LD_VAR 0 7
49511: PPUSH
49512: LD_INT 2
49514: PPUSH
49515: LD_LOC 1
49519: PUSH
49520: LD_VAR 0 6
49524: PUSH
49525: LD_INT 1
49527: PLUS
49528: ARRAY
49529: PPUSH
49530: LD_INT 2
49532: PPUSH
49533: CALL_OW 260
49537: PPUSH
49538: CALL_OW 239
// end ; class := Inc ( class ) ;
49542: LD_ADDR_VAR 0 8
49546: PUSH
49547: LD_VAR 0 8
49551: PPUSH
49552: CALL 42457 0 1
49556: ST_TO_ADDR
// if class = 5 then
49557: LD_VAR 0 8
49561: PUSH
49562: LD_INT 5
49564: EQUAL
49565: IFFALSE 49575
// class := 1 ;
49567: LD_ADDR_VAR 0 8
49571: PUSH
49572: LD_INT 1
49574: ST_TO_ADDR
// end ;
49575: GO 49381
49577: POP
49578: POP
// if not mpTeamPreset then
49579: LD_LOC 1
49583: NOT
49584: IFFALSE 49596
// mpTeamPreset := result ;
49586: LD_ADDR_LOC 1
49590: PUSH
49591: LD_VAR 0 5
49595: ST_TO_ADDR
// end ;
49596: LD_VAR 0 5
49600: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49601: LD_INT 0
49603: PPUSH
49604: PPUSH
// result := [ ] ;
49605: LD_ADDR_VAR 0 4
49609: PUSH
49610: EMPTY
49611: ST_TO_ADDR
// if not vehicles then
49612: LD_VAR 0 3
49616: NOT
49617: IFFALSE 49621
// exit ;
49619: GO 49835
// for i := 1 to vehicles [ nation ] do
49621: LD_ADDR_VAR 0 5
49625: PUSH
49626: DOUBLE
49627: LD_INT 1
49629: DEC
49630: ST_TO_ADDR
49631: LD_VAR 0 3
49635: PUSH
49636: LD_VAR 0 2
49640: ARRAY
49641: PUSH
49642: FOR_TO
49643: IFFALSE 49833
// begin uc_side := side ;
49645: LD_ADDR_OWVAR 20
49649: PUSH
49650: LD_VAR 0 1
49654: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49655: LD_VAR 0 3
49659: PUSH
49660: LD_VAR 0 2
49664: ARRAY
49665: PUSH
49666: LD_VAR 0 5
49670: ARRAY
49671: PPUSH
49672: CALL 5108 0 1
49676: PUSH
49677: LD_INT 4
49679: GREATER
49680: IFFALSE 49710
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49682: LD_ADDR_OWVAR 21
49686: PUSH
49687: LD_VAR 0 3
49691: PUSH
49692: LD_VAR 0 2
49696: ARRAY
49697: PUSH
49698: LD_VAR 0 5
49702: ARRAY
49703: PUSH
49704: LD_INT 5
49706: ARRAY
49707: ST_TO_ADDR
49708: GO 49720
// uc_nation := nation ;
49710: LD_ADDR_OWVAR 21
49714: PUSH
49715: LD_VAR 0 2
49719: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49720: LD_VAR 0 3
49724: PUSH
49725: LD_VAR 0 2
49729: ARRAY
49730: PUSH
49731: LD_VAR 0 5
49735: ARRAY
49736: PUSH
49737: LD_INT 1
49739: ARRAY
49740: PPUSH
49741: LD_VAR 0 3
49745: PUSH
49746: LD_VAR 0 2
49750: ARRAY
49751: PUSH
49752: LD_VAR 0 5
49756: ARRAY
49757: PUSH
49758: LD_INT 2
49760: ARRAY
49761: PPUSH
49762: LD_VAR 0 3
49766: PUSH
49767: LD_VAR 0 2
49771: ARRAY
49772: PUSH
49773: LD_VAR 0 5
49777: ARRAY
49778: PUSH
49779: LD_INT 3
49781: ARRAY
49782: PPUSH
49783: LD_VAR 0 3
49787: PUSH
49788: LD_VAR 0 2
49792: ARRAY
49793: PUSH
49794: LD_VAR 0 5
49798: ARRAY
49799: PUSH
49800: LD_INT 4
49802: ARRAY
49803: PPUSH
49804: LD_INT 80
49806: PPUSH
49807: CALL 7904 0 5
// result := Join ( result , CreateVehicle ) ;
49811: LD_ADDR_VAR 0 4
49815: PUSH
49816: LD_VAR 0 4
49820: PPUSH
49821: CALL_OW 45
49825: PPUSH
49826: CALL 41084 0 2
49830: ST_TO_ADDR
// end ;
49831: GO 49642
49833: POP
49834: POP
// end ;
49835: LD_VAR 0 4
49839: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49840: LD_INT 0
49842: PPUSH
49843: PPUSH
// for i in mpBattleFlags do
49844: LD_ADDR_VAR 0 3
49848: PUSH
49849: LD_EXP 21
49853: PUSH
49854: FOR_IN
49855: IFFALSE 49932
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49857: LD_VAR 0 3
49861: PPUSH
49862: LD_INT 1
49864: PUSH
49865: LD_VAR 0 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_VAR 0 1
49881: PUSH
49882: LD_REAL  7.00000000000000E-0001
49885: MUL
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: PUSH
49894: LD_VAR 0 1
49898: PUSH
49899: LD_REAL  4.00000000000000E-0001
49902: MUL
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 20
49910: PUSH
49911: LD_VAR 0 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: PPUSH
49926: CALL_OW 423
49930: GO 49854
49932: POP
49933: POP
// end ;
49934: LD_VAR 0 2
49938: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49939: LD_INT 100
49941: IFFALSE 50036
49943: GO 49945
49945: DISABLE
49946: LD_INT 0
49948: PPUSH
49949: PPUSH
// begin if mpBattleFlag <= 0 then
49950: LD_EXP 20
49954: PUSH
49955: LD_INT 0
49957: LESSEQUAL
49958: IFFALSE 49962
// exit ;
49960: GO 50036
// strength := 100 ;
49962: LD_ADDR_VAR 0 2
49966: PUSH
49967: LD_INT 100
49969: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49970: LD_EXP 20
49974: PPUSH
49975: CALL_OW 67
// strength := Dec ( strength ) ;
49979: LD_ADDR_VAR 0 2
49983: PUSH
49984: LD_VAR 0 2
49988: PPUSH
49989: CALL 42479 0 1
49993: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49994: LD_VAR 0 2
49998: PPUSH
49999: CALL 49840 0 1
// until not strength ;
50003: LD_VAR 0 2
50007: NOT
50008: IFFALSE 49970
// for i in mpBattleFlags do
50010: LD_ADDR_VAR 0 1
50014: PUSH
50015: LD_EXP 21
50019: PUSH
50020: FOR_IN
50021: IFFALSE 50034
// KillBattleFlag ( i ) ;
50023: LD_VAR 0 1
50027: PPUSH
50028: CALL_OW 419
50032: GO 50020
50034: POP
50035: POP
// end ;
50036: PPOPN 2
50038: END
// every 0 0$1 marked mpActive do var side , tmp ;
50039: GO 50041
50041: DISABLE
50042: LD_INT 0
50044: PPUSH
50045: PPUSH
// begin if mpSibBomb <= 1 then
50046: LD_EXP 26
50050: PUSH
50051: LD_INT 1
50053: LESSEQUAL
50054: IFFALSE 50058
// exit ;
50056: GO 50131
// tmp := mpSibBomb ;
50058: LD_ADDR_VAR 0 2
50062: PUSH
50063: LD_EXP 26
50067: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50068: LD_INT 35
50070: PPUSH
50071: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50075: LD_ADDR_VAR 0 2
50079: PUSH
50080: LD_VAR 0 2
50084: PUSH
50085: LD_INT 35
50087: MINUS
50088: ST_TO_ADDR
// until not tmp ;
50089: LD_VAR 0 2
50093: NOT
50094: IFFALSE 50068
// for side := 1 to 8 do
50096: LD_ADDR_VAR 0 1
50100: PUSH
50101: DOUBLE
50102: LD_INT 1
50104: DEC
50105: ST_TO_ADDR
50106: LD_INT 8
50108: PUSH
50109: FOR_TO
50110: IFFALSE 50129
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50112: LD_INT 25
50114: PPUSH
50115: LD_VAR 0 1
50119: PPUSH
50120: LD_INT 1
50122: PPUSH
50123: CALL_OW 322
50127: GO 50109
50129: POP
50130: POP
// end ;
50131: PPOPN 2
50133: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50134: LD_INT 0
50136: PPUSH
50137: PPUSH
50138: PPUSH
// mpBuildUpTimeDelay := 0 ;
50139: LD_ADDR_EXP 46
50143: PUSH
50144: LD_INT 0
50146: ST_TO_ADDR
// if not mpBuildUpTime then
50147: LD_EXP 18
50151: NOT
50152: IFFALSE 50156
// exit ;
50154: GO 50345
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50156: LD_ADDR_EXP 46
50160: PUSH
50161: LD_INT 8400
50163: PUSH
50164: LD_INT 2100
50166: PUSH
50167: LD_EXP 18
50171: MUL
50172: PLUS
50173: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50174: LD_ADDR_EXP 47
50178: PUSH
50179: LD_INT 1
50181: ST_TO_ADDR
// for i := 1 to 8 do
50182: LD_ADDR_VAR 0 2
50186: PUSH
50187: DOUBLE
50188: LD_INT 1
50190: DEC
50191: ST_TO_ADDR
50192: LD_INT 8
50194: PUSH
50195: FOR_TO
50196: IFFALSE 50343
// if mpSidePositions [ i ] then
50198: LD_EXP 5
50202: PUSH
50203: LD_VAR 0 2
50207: ARRAY
50208: IFFALSE 50341
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50210: LD_EXP 17
50214: PUSH
50215: LD_EXP 5
50219: PUSH
50220: LD_VAR 0 2
50224: ARRAY
50225: ARRAY
50226: PPUSH
50227: LD_INT 5
50229: PPUSH
50230: CALL_OW 424
// for j := 1 to 8 do
50234: LD_ADDR_VAR 0 3
50238: PUSH
50239: DOUBLE
50240: LD_INT 1
50242: DEC
50243: ST_TO_ADDR
50244: LD_INT 8
50246: PUSH
50247: FOR_TO
50248: IFFALSE 50339
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50250: LD_EXP 5
50254: PUSH
50255: LD_VAR 0 3
50259: ARRAY
50260: IFFALSE 50309
50262: PUSH
50263: LD_EXP 6
50267: PUSH
50268: LD_VAR 0 2
50272: ARRAY
50273: PUSH
50274: LD_EXP 6
50278: PUSH
50279: LD_VAR 0 3
50283: ARRAY
50284: NONEQUAL
50285: IFTRUE 50308
50287: PUSH
50288: LD_EXP 9
50292: NOT
50293: IFFALSE 50307
50295: PUSH
50296: LD_VAR 0 2
50300: PUSH
50301: LD_VAR 0 3
50305: NONEQUAL
50306: AND
50307: OR
50308: AND
50309: IFFALSE 50337
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50311: LD_VAR 0 3
50315: PPUSH
50316: LD_EXP 17
50320: PUSH
50321: LD_EXP 5
50325: PUSH
50326: LD_VAR 0 2
50330: ARRAY
50331: ARRAY
50332: PPUSH
50333: CALL_OW 333
50337: GO 50247
50339: POP
50340: POP
// end ;
50341: GO 50195
50343: POP
50344: POP
// end ;
50345: LD_VAR 0 1
50349: RET
// function EndBuildUp ; var i , j ; begin
50350: LD_INT 0
50352: PPUSH
50353: PPUSH
50354: PPUSH
// mpBuildUpTimeActive := false ;
50355: LD_ADDR_EXP 47
50359: PUSH
50360: LD_INT 0
50362: ST_TO_ADDR
// for i := 1 to 8 do
50363: LD_ADDR_VAR 0 2
50367: PUSH
50368: DOUBLE
50369: LD_INT 1
50371: DEC
50372: ST_TO_ADDR
50373: LD_INT 8
50375: PUSH
50376: FOR_TO
50377: IFFALSE 50524
// if mpSidePositions [ i ] then
50379: LD_EXP 5
50383: PUSH
50384: LD_VAR 0 2
50388: ARRAY
50389: IFFALSE 50522
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50391: LD_EXP 17
50395: PUSH
50396: LD_EXP 5
50400: PUSH
50401: LD_VAR 0 2
50405: ARRAY
50406: ARRAY
50407: PPUSH
50408: LD_INT 0
50410: PPUSH
50411: CALL_OW 424
// for j := 1 to 8 do
50415: LD_ADDR_VAR 0 3
50419: PUSH
50420: DOUBLE
50421: LD_INT 1
50423: DEC
50424: ST_TO_ADDR
50425: LD_INT 8
50427: PUSH
50428: FOR_TO
50429: IFFALSE 50520
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50431: LD_EXP 5
50435: PUSH
50436: LD_VAR 0 3
50440: ARRAY
50441: IFFALSE 50490
50443: PUSH
50444: LD_EXP 6
50448: PUSH
50449: LD_VAR 0 2
50453: ARRAY
50454: PUSH
50455: LD_EXP 6
50459: PUSH
50460: LD_VAR 0 3
50464: ARRAY
50465: NONEQUAL
50466: IFTRUE 50489
50468: PUSH
50469: LD_EXP 9
50473: NOT
50474: IFFALSE 50488
50476: PUSH
50477: LD_VAR 0 2
50481: PUSH
50482: LD_VAR 0 3
50486: NONEQUAL
50487: AND
50488: OR
50489: AND
50490: IFFALSE 50518
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50492: LD_VAR 0 3
50496: PPUSH
50497: LD_EXP 17
50501: PUSH
50502: LD_EXP 5
50506: PUSH
50507: LD_VAR 0 2
50511: ARRAY
50512: ARRAY
50513: PPUSH
50514: CALL_OW 334
50518: GO 50428
50520: POP
50521: POP
// end ;
50522: GO 50376
50524: POP
50525: POP
// end ;
50526: LD_VAR 0 1
50530: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50531: LD_EXP 47
50535: IFFALSE 50714
50537: GO 50539
50539: DISABLE
50540: LD_INT 0
50542: PPUSH
50543: PPUSH
// begin for i := 1 to 8 do
50544: LD_ADDR_VAR 0 1
50548: PUSH
50549: DOUBLE
50550: LD_INT 1
50552: DEC
50553: ST_TO_ADDR
50554: LD_INT 8
50556: PUSH
50557: FOR_TO
50558: IFFALSE 50711
// if mpSidePositions [ i ] then
50560: LD_EXP 5
50564: PUSH
50565: LD_VAR 0 1
50569: ARRAY
50570: IFFALSE 50709
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50572: LD_ADDR_VAR 0 2
50576: PUSH
50577: LD_EXP 17
50581: PUSH
50582: LD_EXP 5
50586: PUSH
50587: LD_VAR 0 1
50591: ARRAY
50592: ARRAY
50593: PPUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 21
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 21
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 22
50624: PUSH
50625: LD_OWVAR 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PPUSH
50638: CALL_OW 70
50642: PUSH
50643: FOR_IN
50644: IFFALSE 50707
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50646: LD_EXP 6
50650: PUSH
50651: LD_VAR 0 1
50655: ARRAY
50656: PUSH
50657: LD_EXP 6
50661: PUSH
50662: LD_OWVAR 2
50666: ARRAY
50667: NONEQUAL
50668: IFTRUE 50691
50670: PUSH
50671: LD_EXP 9
50675: NOT
50676: IFFALSE 50690
50678: PUSH
50679: LD_VAR 0 1
50683: PUSH
50684: LD_OWVAR 2
50688: NONEQUAL
50689: AND
50690: OR
50691: IFFALSE 50705
// ComMoveToArea ( un , BuildUpEscape ) ;
50693: LD_VAR 0 2
50697: PPUSH
50698: LD_INT 13
50700: PPUSH
50701: CALL_OW 113
50705: GO 50643
50707: POP
50708: POP
50709: GO 50557
50711: POP
50712: POP
// enable ;
50713: ENABLE
// end ;
50714: PPOPN 2
50716: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50717: LD_EXP 18
50721: IFFALSE 50771
50723: GO 50725
50725: DISABLE
50726: LD_INT 0
50728: PPUSH
// begin tmp := mpBuildUpTime ;
50729: LD_ADDR_VAR 0 1
50733: PUSH
50734: LD_EXP 18
50738: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50739: LD_INT 35
50741: PPUSH
50742: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50746: LD_ADDR_VAR 0 1
50750: PUSH
50751: LD_VAR 0 1
50755: PUSH
50756: LD_INT 35
50758: MINUS
50759: ST_TO_ADDR
// until not tmp ;
50760: LD_VAR 0 1
50764: NOT
50765: IFFALSE 50739
// EndBuildUp ;
50767: CALL 50350 0 0
// end ;
50771: PPOPN 1
50773: END
// every 0 0$1 trigger mpActive marked mpWin do
50774: LD_INT 100
50776: IFFALSE 50810
50778: GO 50780
50780: DISABLE
// begin if IAmServer then
50781: CALL_OW 518
50785: IFFALSE 50794
// wait ( 0 0$3 ) ;
50787: LD_INT 105
50789: PPUSH
50790: CALL_OW 67
// if Multiplayer then
50794: LD_OWVAR 4
50798: IFFALSE 50806
// YouWinInMultiplayer else
50800: CALL_OW 106
50804: GO 50810
// YouWin ;
50806: CALL_OW 103
// end ;
50810: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50811: LD_INT 0
50813: PPUSH
// result := false ;
50814: LD_ADDR_VAR 0 3
50818: PUSH
50819: LD_INT 0
50821: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50822: LD_VAR 0 1
50826: PUSH
50827: LD_INT 1
50829: DOUBLE
50830: EQUAL
50831: IFTRUE 50853
50833: LD_INT 5
50835: DOUBLE
50836: EQUAL
50837: IFTRUE 50853
50839: LD_INT 6
50841: DOUBLE
50842: EQUAL
50843: IFTRUE 50853
50845: LD_INT 7
50847: DOUBLE
50848: EQUAL
50849: IFTRUE 50853
50851: GO 50926
50853: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50854: LD_ADDR_VAR 0 3
50858: PUSH
50859: LD_INT 22
50861: PUSH
50862: LD_VAR 0 2
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 21
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 33
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 33
50896: PUSH
50897: LD_INT 5
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PPUSH
50914: CALL_OW 69
50918: PPUSH
50919: CALL 5108 0 1
50923: ST_TO_ADDR
// end ; GameTypeSurvival :
50924: GO 51322
50926: LD_INT 2
50928: DOUBLE
50929: EQUAL
50930: IFTRUE 50934
50932: GO 51064
50934: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50935: LD_ADDR_VAR 0 3
50939: PUSH
50940: LD_INT 22
50942: PUSH
50943: LD_VAR 0 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 30
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 30
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PPUSH
50984: CALL_OW 69
50988: PPUSH
50989: CALL 5108 0 1
50993: IFFALSE 51061
50995: PUSH
50996: LD_INT 22
50998: PUSH
50999: LD_VAR 0 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 21
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 33
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 33
51033: PUSH
51034: LD_INT 5
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PPUSH
51051: CALL_OW 69
51055: PPUSH
51056: CALL 5108 0 1
51060: AND
51061: ST_TO_ADDR
// end ; GameTypeSurvivalH :
51062: GO 51322
51064: LD_INT 8
51066: DOUBLE
51067: EQUAL
51068: IFTRUE 51072
51070: GO 51221
51072: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51073: LD_ADDR_VAR 0 3
51077: PUSH
51078: LD_EXP 39
51082: PUSH
51083: LD_VAR 0 2
51087: ARRAY
51088: PPUSH
51089: CALL_OW 300
51093: IFFALSE 51150
51095: PUSH
51096: LD_INT 22
51098: PUSH
51099: LD_VAR 0 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: LD_INT 30
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 30
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PPUSH
51140: CALL_OW 69
51144: PPUSH
51145: CALL 5108 0 1
51149: AND
51150: IFFALSE 51218
51152: PUSH
51153: LD_INT 22
51155: PUSH
51156: LD_VAR 0 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 21
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 33
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 33
51190: PUSH
51191: LD_INT 5
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PPUSH
51208: CALL_OW 69
51212: PPUSH
51213: CALL 5108 0 1
51217: AND
51218: ST_TO_ADDR
// end ; GameTypeKing :
51219: GO 51322
51221: LD_INT 3
51223: DOUBLE
51224: EQUAL
51225: IFTRUE 51229
51227: GO 51321
51229: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51230: LD_ADDR_VAR 0 3
51234: PUSH
51235: LD_INT 22
51237: PUSH
51238: LD_VAR 0 2
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 21
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 33
51262: PUSH
51263: LD_INT 3
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 33
51272: PUSH
51273: LD_INT 5
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PPUSH
51290: CALL_OW 69
51294: PPUSH
51295: CALL 5108 0 1
51299: IFFALSE 51318
51301: PUSH
51302: LD_VAR 0 2
51306: PPUSH
51307: CALL 55991 0 1
51311: PUSH
51312: LD_EXP 33
51316: LESS
51317: AND
51318: ST_TO_ADDR
// end ; end ;
51319: GO 51322
51321: POP
// end ;
51322: LD_VAR 0 3
51326: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51327: LD_INT 100
51329: IFFALSE 51559
51331: GO 51333
51333: DISABLE
51334: LD_INT 0
51336: PPUSH
51337: PPUSH
// begin if Multiplayer then
51338: LD_OWVAR 4
51342: IFFALSE 51350
// SetPlayerSpectator ( ) else
51344: CALL_OW 572
51348: GO 51359
// FogOff ( your_side ) ;
51350: LD_OWVAR 2
51354: PPUSH
51355: CALL_OW 344
// repeat gameIsOn := false ;
51359: LD_ADDR_VAR 0 1
51363: PUSH
51364: LD_INT 0
51366: ST_TO_ADDR
// for i := 1 to 8 do
51367: LD_ADDR_VAR 0 2
51371: PUSH
51372: DOUBLE
51373: LD_INT 1
51375: DEC
51376: ST_TO_ADDR
51377: LD_INT 8
51379: PUSH
51380: FOR_TO
51381: IFFALSE 51511
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51383: LD_EXP 5
51387: PUSH
51388: LD_VAR 0 2
51392: ARRAY
51393: IFFALSE 51406
51395: PUSH
51396: LD_VAR 0 2
51400: PPUSH
51401: CALL_OW 108
51405: AND
51406: IFFALSE 51420
51408: PUSH
51409: LD_VAR 0 2
51413: PUSH
51414: LD_OWVAR 2
51418: NONEQUAL
51419: AND
51420: IFFALSE 51509
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51422: LD_EXP 6
51426: PUSH
51427: LD_VAR 0 2
51431: ARRAY
51432: NOT
51433: IFTRUE 51481
51435: PUSH
51436: LD_EXP 6
51440: PUSH
51441: LD_VAR 0 2
51445: ARRAY
51446: PUSH
51447: LD_EXP 6
51451: PUSH
51452: LD_OWVAR 2
51456: ARRAY
51457: NONEQUAL
51458: IFFALSE 51480
51460: PUSH
51461: LD_OWVAR 2
51465: PPUSH
51466: LD_VAR 0 2
51470: PPUSH
51471: CALL_OW 81
51475: PUSH
51476: LD_INT 1
51478: NONEQUAL
51479: AND
51480: OR
51481: IFFALSE 51509
// if HasPowerByGameType ( mpGameType , i ) then
51483: LD_EXP 1
51487: PPUSH
51488: LD_VAR 0 2
51492: PPUSH
51493: CALL 50811 0 2
51497: IFFALSE 51509
// begin gameIsOn := true ;
51499: LD_ADDR_VAR 0 1
51503: PUSH
51504: LD_INT 1
51506: ST_TO_ADDR
// break ;
51507: GO 51511
// end ;
51509: GO 51380
51511: POP
51512: POP
// wait ( 100 ) ;
51513: LD_INT 100
51515: PPUSH
51516: CALL_OW 67
// until not gameIsOn ;
51520: LD_VAR 0 1
51524: NOT
51525: IFFALSE 51359
// if IAmServer then
51527: CALL_OW 518
51531: IFFALSE 51540
// wait ( 0 0$3 ) ;
51533: LD_INT 105
51535: PPUSH
51536: CALL_OW 67
// if Multiplayer then
51540: LD_OWVAR 4
51544: IFFALSE 51552
// YouLostInMultiplayer else
51546: CALL_OW 107
51550: GO 51559
// YouLost (  ) ;
51552: LD_STRING 
51554: PPUSH
51555: CALL_OW 104
// end ;
51559: PPOPN 2
51561: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51562: LD_EXP 31
51566: IFFALSE 51950
51568: GO 51570
51570: DISABLE
51571: LD_INT 0
51573: PPUSH
51574: PPUSH
51575: PPUSH
51576: PPUSH
51577: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51578: LD_ADDR_VAR 0 5
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: LD_INT 4
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: LD_INT 6
51600: PUSH
51601: LD_INT 7
51603: PUSH
51604: LD_INT 8
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51617: LD_INT 350
51619: PPUSH
51620: CALL_OW 67
// for i := 1 to 8 do
51624: LD_ADDR_VAR 0 1
51628: PUSH
51629: DOUBLE
51630: LD_INT 1
51632: DEC
51633: ST_TO_ADDR
51634: LD_INT 8
51636: PUSH
51637: FOR_TO
51638: IFFALSE 51920
// begin j := sides [ i ] ;
51640: LD_ADDR_VAR 0 2
51644: PUSH
51645: LD_VAR 0 5
51649: PUSH
51650: LD_VAR 0 1
51654: ARRAY
51655: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51656: LD_EXP 38
51660: PUSH
51661: LD_VAR 0 2
51665: ARRAY
51666: PPUSH
51667: CALL 5108 0 1
51671: IFFALSE 51684
51673: PUSH
51674: LD_VAR 0 2
51678: PPUSH
51679: CALL_OW 108
51683: AND
51684: IFFALSE 51702
51686: PUSH
51687: LD_EXP 1
51691: PPUSH
51692: LD_VAR 0 2
51696: PPUSH
51697: CALL 50811 0 2
51701: AND
51702: IFFALSE 51918
// begin wait ( mpRespawn div 2 ) ;
51704: LD_EXP 31
51708: PUSH
51709: LD_INT 2
51711: DIV
51712: PPUSH
51713: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51717: LD_ADDR_VAR 0 3
51721: PUSH
51722: LD_INT 22
51724: PUSH
51725: LD_VAR 0 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 50
51736: PUSH
51737: EMPTY
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 30
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 30
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: PPUSH
51773: CALL_OW 69
51777: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51778: LD_VAR 0 3
51782: NOT
51783: IFTRUE 51797
51785: PUSH
51786: LD_VAR 0 2
51790: PPUSH
51791: CALL_OW 108
51795: NOT
51796: OR
51797: IFTRUE 51816
51799: PUSH
51800: LD_EXP 1
51804: PPUSH
51805: LD_VAR 0 2
51809: PPUSH
51810: CALL 50811 0 2
51814: NOT
51815: OR
51816: IFFALSE 51820
// continue ;
51818: GO 51637
// spawn := tmp [ 1 ] ;
51820: LD_ADDR_VAR 0 4
51824: PUSH
51825: LD_VAR 0 3
51829: PUSH
51830: LD_INT 1
51832: ARRAY
51833: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51834: LD_EXP 38
51838: PUSH
51839: LD_VAR 0 2
51843: ARRAY
51844: PUSH
51845: LD_INT 1
51847: ARRAY
51848: PPUSH
51849: LD_VAR 0 4
51853: PPUSH
51854: CALL_OW 250
51858: PPUSH
51859: LD_VAR 0 4
51863: PPUSH
51864: CALL_OW 251
51868: PPUSH
51869: LD_INT 32
51871: PPUSH
51872: LD_INT 1
51874: PPUSH
51875: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51879: LD_ADDR_EXP 38
51883: PUSH
51884: LD_EXP 38
51888: PPUSH
51889: LD_VAR 0 2
51893: PPUSH
51894: LD_EXP 38
51898: PUSH
51899: LD_VAR 0 2
51903: ARRAY
51904: PPUSH
51905: LD_INT 1
51907: PPUSH
51908: CALL_OW 3
51912: PPUSH
51913: CALL_OW 1
51917: ST_TO_ADDR
// end ; end ;
51918: GO 51637
51920: POP
51921: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51922: LD_ADDR_VAR 0 5
51926: PUSH
51927: LD_VAR 0 5
51931: PPUSH
51932: LD_INT 1
51934: PPUSH
51935: LD_INT 8
51937: PPUSH
51938: LD_INT 1
51940: PPUSH
51941: CALL 7434 0 4
51945: ST_TO_ADDR
// until false ;
51946: LD_INT 0
51948: IFFALSE 51617
// end ;
51950: PPOPN 5
51952: END
// every 0 0$1 marked mpActive do
51953: GO 51955
51955: DISABLE
// begin enable ;
51956: ENABLE
// if not mpDisplayStrings then
51957: LD_EXP 36
51961: NOT
51962: IFFALSE 51973
// begin display_strings := [ ] ;
51964: LD_ADDR_OWVAR 47
51968: PUSH
51969: EMPTY
51970: ST_TO_ADDR
// exit ;
51971: GO 51983
// end ; display_strings := mpDisplayStrings ;
51973: LD_ADDR_OWVAR 47
51977: PUSH
51978: LD_EXP 36
51982: ST_TO_ADDR
// end ; end_of_file
51983: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51984: LD_INT 0
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
51992: PPUSH
51993: PPUSH
51994: PPUSH
// if GetType ( un ) = unit_vehicle then
51995: LD_VAR 0 1
51999: PPUSH
52000: CALL_OW 247
52004: PUSH
52005: LD_INT 2
52007: EQUAL
52008: IFFALSE 52012
// exit ;
52010: GO 52785
// side := GetSide ( un ) ;
52012: LD_ADDR_VAR 0 9
52016: PUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: CALL_OW 255
52026: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
52027: LD_EXP 1
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 8
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: IN
52042: IFFALSE 52136
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52044: LD_VAR 0 1
52048: PPUSH
52049: CALL_OW 266
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: IN
52064: IFFALSE 52136
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52066: LD_ADDR_VAR 0 3
52070: PUSH
52071: LD_INT 22
52073: PUSH
52074: LD_VAR 0 9
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: LD_INT 21
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 33
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PPUSH
52115: CALL_OW 69
52119: PUSH
52120: FOR_IN
52121: IFFALSE 52134
// KillUnit ( i ) ;
52123: LD_VAR 0 3
52127: PPUSH
52128: CALL_OW 66
52132: GO 52120
52134: POP
52135: POP
// end ; if mpGameType = GameTypeSurvivalH then
52136: LD_EXP 1
52140: PUSH
52141: LD_INT 8
52143: EQUAL
52144: IFFALSE 52228
// if un in mpCommanders then
52146: LD_VAR 0 1
52150: PUSH
52151: LD_EXP 39
52155: IN
52156: IFFALSE 52228
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52158: LD_ADDR_VAR 0 3
52162: PUSH
52163: LD_INT 22
52165: PUSH
52166: LD_VAR 0 9
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 21
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 33
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PPUSH
52207: CALL_OW 69
52211: PUSH
52212: FOR_IN
52213: IFFALSE 52226
// KillUnit ( i ) ;
52215: LD_VAR 0 3
52219: PPUSH
52220: CALL_OW 66
52224: GO 52212
52226: POP
52227: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52228: LD_VAR 0 1
52232: PPUSH
52233: CALL_OW 257
52237: PUSH
52238: LD_INT 12
52240: PUSH
52241: LD_INT 17
52243: PUSH
52244: LD_INT 15
52246: PUSH
52247: LD_INT 16
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: IN
52256: IFTRUE 52273
52258: PUSH
52259: LD_VAR 0 1
52263: PPUSH
52264: CALL_OW 263
52268: PUSH
52269: LD_INT 5
52271: EQUAL
52272: OR
52273: IFFALSE 52510
// begin tag := 0 ;
52275: LD_ADDR_VAR 0 5
52279: PUSH
52280: LD_INT 0
52282: ST_TO_ADDR
// for i := 1 to 8 do
52283: LD_ADDR_VAR 0 3
52287: PUSH
52288: DOUBLE
52289: LD_INT 1
52291: DEC
52292: ST_TO_ADDR
52293: LD_INT 8
52295: PUSH
52296: FOR_TO
52297: IFFALSE 52331
// if un in mpApePosIndex [ i ] then
52299: LD_VAR 0 1
52303: PUSH
52304: LD_EXP 30
52308: PUSH
52309: LD_VAR 0 3
52313: ARRAY
52314: IN
52315: IFFALSE 52329
// begin tag := i ;
52317: LD_ADDR_VAR 0 5
52321: PUSH
52322: LD_VAR 0 3
52326: ST_TO_ADDR
// break ;
52327: GO 52331
// end ;
52329: GO 52296
52331: POP
52332: POP
// if not tag then
52333: LD_VAR 0 5
52337: NOT
52338: IFFALSE 52342
// exit ;
52340: GO 52785
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52342: LD_ADDR_VAR 0 7
52346: PUSH
52347: LD_EXP 29
52351: PUSH
52352: LD_EXP 5
52356: PUSH
52357: LD_VAR 0 5
52361: ARRAY
52362: ARRAY
52363: ST_TO_ADDR
// if not area then
52364: LD_VAR 0 7
52368: NOT
52369: IFFALSE 52373
// exit ;
52371: GO 52785
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52373: LD_INT 14700
52375: PUSH
52376: LD_VAR 0 1
52380: PUSH
52381: LD_INT 5
52383: MOD
52384: PUSH
52385: LD_INT 1
52387: PLUS
52388: PUSH
52389: LD_INT 700
52391: MUL
52392: PLUS
52393: PPUSH
52394: CALL_OW 67
// repeat wait ( 10 ) ;
52398: LD_INT 10
52400: PPUSH
52401: CALL_OW 67
// until not mpBlockRespThread ;
52405: LD_EXP 45
52409: NOT
52410: IFFALSE 52398
// mpBlockRespThread := true ;
52412: LD_ADDR_EXP 45
52416: PUSH
52417: LD_INT 1
52419: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52420: LD_INT 0
52422: PPUSH
52423: CALL 37211 0 1
// ape := CreateHuman ;
52427: LD_ADDR_VAR 0 4
52431: PUSH
52432: CALL_OW 44
52436: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52437: LD_ADDR_EXP 30
52441: PUSH
52442: LD_EXP 30
52446: PPUSH
52447: LD_VAR 0 5
52451: PPUSH
52452: LD_EXP 30
52456: PUSH
52457: LD_VAR 0 5
52461: ARRAY
52462: PPUSH
52463: LD_VAR 0 4
52467: PPUSH
52468: CALL 41084 0 2
52472: PPUSH
52473: CALL_OW 1
52477: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52478: LD_VAR 0 4
52482: PPUSH
52483: LD_VAR 0 7
52487: PPUSH
52488: LD_INT 0
52490: PPUSH
52491: CALL_OW 49
// wait ( 10 ) ;
52495: LD_INT 10
52497: PPUSH
52498: CALL_OW 67
// mpBlockRespThread := false ;
52502: LD_ADDR_EXP 45
52506: PUSH
52507: LD_INT 0
52509: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52510: LD_VAR 0 1
52514: PPUSH
52515: CALL_OW 247
52519: PUSH
52520: LD_INT 1
52522: EQUAL
52523: IFFALSE 52540
52525: PUSH
52526: LD_VAR 0 1
52530: PPUSH
52531: CALL_OW 248
52535: PUSH
52536: LD_INT 0
52538: GREATER
52539: AND
52540: IFFALSE 52785
// begin if not mpRespawn then
52542: LD_EXP 31
52546: NOT
52547: IFFALSE 52551
// exit ;
52549: GO 52785
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52551: LD_VAR 0 9
52555: PPUSH
52556: CALL_OW 108
52560: NOT
52561: IFFALSE 52580
52563: PUSH
52564: LD_EXP 1
52568: PPUSH
52569: LD_VAR 0 9
52573: PPUSH
52574: CALL 50811 0 2
52578: NOT
52579: AND
52580: IFFALSE 52584
// exit ;
52582: GO 52785
// side := GetSide ( un ) ;
52584: LD_ADDR_VAR 0 9
52588: PUSH
52589: LD_VAR 0 1
52593: PPUSH
52594: CALL_OW 255
52598: ST_TO_ADDR
// nation := GetNation ( un ) ;
52599: LD_ADDR_VAR 0 8
52603: PUSH
52604: LD_VAR 0 1
52608: PPUSH
52609: CALL_OW 248
52613: ST_TO_ADDR
// class := GetClass ( un ) ;
52614: LD_ADDR_VAR 0 6
52618: PUSH
52619: LD_VAR 0 1
52623: PPUSH
52624: CALL_OW 257
52628: ST_TO_ADDR
// if class > 4 then
52629: LD_VAR 0 6
52633: PUSH
52634: LD_INT 4
52636: GREATER
52637: IFFALSE 52647
// class := 1 ;
52639: LD_ADDR_VAR 0 6
52643: PUSH
52644: LD_INT 1
52646: ST_TO_ADDR
// repeat wait ( 10 ) ;
52647: LD_INT 10
52649: PPUSH
52650: CALL_OW 67
// until not mpBlockRespThread ;
52654: LD_EXP 45
52658: NOT
52659: IFFALSE 52647
// mpBlockRespThread := true ;
52661: LD_ADDR_EXP 45
52665: PUSH
52666: LD_INT 1
52668: ST_TO_ADDR
// uc_side := side ;
52669: LD_ADDR_OWVAR 20
52673: PUSH
52674: LD_VAR 0 9
52678: ST_TO_ADDR
// uc_nation := nation ;
52679: LD_ADDR_OWVAR 21
52683: PUSH
52684: LD_VAR 0 8
52688: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52689: LD_INT 0
52691: PPUSH
52692: LD_VAR 0 6
52696: PPUSH
52697: LD_INT 2
52699: PPUSH
52700: CALL_OW 380
// un := CreateHuman ;
52704: LD_ADDR_VAR 0 1
52708: PUSH
52709: CALL_OW 44
52713: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52714: LD_ADDR_EXP 38
52718: PUSH
52719: LD_EXP 38
52723: PPUSH
52724: LD_VAR 0 9
52728: PPUSH
52729: LD_EXP 38
52733: PUSH
52734: LD_VAR 0 9
52738: ARRAY
52739: PPUSH
52740: LD_EXP 38
52744: PUSH
52745: LD_VAR 0 9
52749: ARRAY
52750: PUSH
52751: LD_INT 1
52753: PLUS
52754: PPUSH
52755: LD_VAR 0 1
52759: PPUSH
52760: CALL_OW 1
52764: PPUSH
52765: CALL_OW 1
52769: ST_TO_ADDR
// wait ( 10 ) ;
52770: LD_INT 10
52772: PPUSH
52773: CALL_OW 67
// mpBlockRespThread := false ;
52777: LD_ADDR_EXP 45
52781: PUSH
52782: LD_INT 0
52784: ST_TO_ADDR
// end ; end ;
52785: LD_VAR 0 2
52789: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
52790: LD_INT 0
52792: PPUSH
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
// tag := 0 ;
52797: LD_ADDR_VAR 0 5
52801: PUSH
52802: LD_INT 0
52804: ST_TO_ADDR
// for i := 1 to 8 do
52805: LD_ADDR_VAR 0 4
52809: PUSH
52810: DOUBLE
52811: LD_INT 1
52813: DEC
52814: ST_TO_ADDR
52815: LD_INT 8
52817: PUSH
52818: FOR_TO
52819: IFFALSE 52853
// if un in mpApePosIndex [ i ] then
52821: LD_VAR 0 2
52825: PUSH
52826: LD_EXP 30
52830: PUSH
52831: LD_VAR 0 4
52835: ARRAY
52836: IN
52837: IFFALSE 52851
// begin tag := i ;
52839: LD_ADDR_VAR 0 5
52843: PUSH
52844: LD_VAR 0 4
52848: ST_TO_ADDR
// break ;
52849: GO 52853
// end ;
52851: GO 52818
52853: POP
52854: POP
// if not tag then
52855: LD_VAR 0 5
52859: NOT
52860: IFFALSE 52864
// exit ;
52862: GO 53032
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52864: LD_ADDR_VAR 0 6
52868: PUSH
52869: LD_EXP 29
52873: PUSH
52874: LD_EXP 5
52878: PUSH
52879: LD_VAR 0 5
52883: ARRAY
52884: ARRAY
52885: ST_TO_ADDR
// if not area then
52886: LD_VAR 0 6
52890: NOT
52891: IFFALSE 52895
// exit ;
52893: GO 53032
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52895: LD_INT 14700
52897: PUSH
52898: LD_VAR 0 2
52902: PUSH
52903: LD_INT 5
52905: MOD
52906: PUSH
52907: LD_INT 1
52909: PLUS
52910: PUSH
52911: LD_INT 700
52913: MUL
52914: PLUS
52915: PPUSH
52916: CALL_OW 67
// repeat wait ( 10 ) ;
52920: LD_INT 10
52922: PPUSH
52923: CALL_OW 67
// until not mpBlockRespThread ;
52927: LD_EXP 45
52931: NOT
52932: IFFALSE 52920
// mpBlockRespThread := true ;
52934: LD_ADDR_EXP 45
52938: PUSH
52939: LD_INT 1
52941: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52942: LD_INT 0
52944: PPUSH
52945: CALL 37211 0 1
// ape := CreateHuman ;
52949: LD_ADDR_VAR 0 7
52953: PUSH
52954: CALL_OW 44
52958: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52959: LD_ADDR_EXP 30
52963: PUSH
52964: LD_EXP 30
52968: PPUSH
52969: LD_VAR 0 5
52973: PPUSH
52974: LD_EXP 30
52978: PUSH
52979: LD_VAR 0 5
52983: ARRAY
52984: PPUSH
52985: LD_VAR 0 7
52989: PPUSH
52990: CALL 41084 0 2
52994: PPUSH
52995: CALL_OW 1
52999: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53000: LD_VAR 0 7
53004: PPUSH
53005: LD_VAR 0 6
53009: PPUSH
53010: LD_INT 0
53012: PPUSH
53013: CALL_OW 49
// wait ( 10 ) ;
53017: LD_INT 10
53019: PPUSH
53020: CALL_OW 67
// mpBlockRespThread := false ;
53024: LD_ADDR_EXP 45
53028: PUSH
53029: LD_INT 0
53031: ST_TO_ADDR
// end ;
53032: LD_VAR 0 3
53036: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53037: LD_INT 0
53039: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53040: LD_VAR 0 1
53044: PPUSH
53045: CALL_OW 266
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: IN
53060: IFFALSE 53085
// SetBName ( building , @ & GetSide ( building ) ) ;
53062: LD_VAR 0 1
53066: PPUSH
53067: LD_STRING @
53069: PUSH
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL_OW 255
53079: STR
53080: PPUSH
53081: CALL_OW 500
// end ;
53085: LD_VAR 0 2
53089: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53090: LD_INT 0
53092: PPUSH
53093: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53094: LD_EXP 1
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 8
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: IN
53109: IFFALSE 53133
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 266
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: IN
53132: AND
53133: IFFALSE 53212
// begin SetSide ( building , oldSide ) ;
53135: LD_VAR 0 1
53139: PPUSH
53140: LD_VAR 0 2
53144: PPUSH
53145: CALL_OW 235
// KillUnit ( building ) ;
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53158: LD_ADDR_VAR 0 5
53162: PUSH
53163: LD_INT 22
53165: PUSH
53166: LD_VAR 0 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 21
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PPUSH
53189: CALL_OW 69
53193: PUSH
53194: FOR_IN
53195: IFFALSE 53208
// KillUnit ( i ) ;
53197: LD_VAR 0 5
53201: PPUSH
53202: CALL_OW 66
53206: GO 53194
53208: POP
53209: POP
// exit ;
53210: GO 53257
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53212: LD_VAR 0 1
53216: PPUSH
53217: CALL_OW 266
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: IN
53232: IFFALSE 53257
// SetBName ( building , @ & GetSide ( building ) ) ;
53234: LD_VAR 0 1
53238: PPUSH
53239: LD_STRING @
53241: PUSH
53242: LD_VAR 0 1
53246: PPUSH
53247: CALL_OW 255
53251: STR
53252: PPUSH
53253: CALL_OW 500
// end ;
53257: LD_VAR 0 4
53261: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53262: LD_INT 0
53264: PPUSH
53265: PPUSH
53266: PPUSH
// if mpGameType <> GameTypeFamine then
53267: LD_EXP 1
53271: PUSH
53272: LD_INT 5
53274: NONEQUAL
53275: IFFALSE 53279
// exit ;
53277: GO 53513
// for i := 1 to mpGlobalOilDeposits do
53279: LD_ADDR_VAR 0 6
53283: PUSH
53284: DOUBLE
53285: LD_INT 1
53287: DEC
53288: ST_TO_ADDR
53289: LD_EXP 40
53293: PUSH
53294: FOR_TO
53295: IFFALSE 53511
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53297: LD_EXP 40
53301: PUSH
53302: LD_VAR 0 6
53306: ARRAY
53307: PUSH
53308: LD_INT 1
53310: ARRAY
53311: PPUSH
53312: LD_EXP 40
53316: PUSH
53317: LD_VAR 0 6
53321: ARRAY
53322: PUSH
53323: LD_INT 2
53325: ARRAY
53326: PPUSH
53327: CALL_OW 428
53331: PUSH
53332: LD_VAR 0 1
53336: EQUAL
53337: IFFALSE 53509
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53339: LD_ADDR_VAR 0 7
53343: PUSH
53344: LD_EXP 40
53348: PUSH
53349: LD_VAR 0 6
53353: ARRAY
53354: PUSH
53355: LD_INT 3
53357: ARRAY
53358: ST_TO_ADDR
// value := value - amount ;
53359: LD_ADDR_VAR 0 7
53363: PUSH
53364: LD_VAR 0 7
53368: PUSH
53369: LD_VAR 0 4
53373: MINUS
53374: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53375: LD_ADDR_EXP 40
53379: PUSH
53380: LD_EXP 40
53384: PPUSH
53385: LD_VAR 0 6
53389: PPUSH
53390: LD_EXP 40
53394: PUSH
53395: LD_VAR 0 6
53399: ARRAY
53400: PPUSH
53401: LD_INT 3
53403: PPUSH
53404: LD_VAR 0 7
53408: PPUSH
53409: CALL_OW 1
53413: PPUSH
53414: CALL_OW 1
53418: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53419: LD_VAR 0 2
53423: PUSH
53424: LD_OWVAR 2
53428: PUSH
53429: LD_INT 9
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: IN
53436: IFFALSE 53452
// SetUnitDisplayNumber ( building , value ) ;
53438: LD_VAR 0 1
53442: PPUSH
53443: LD_VAR 0 7
53447: PPUSH
53448: CALL_OW 505
// if value <= 0 then
53452: LD_VAR 0 7
53456: PUSH
53457: LD_INT 0
53459: LESSEQUAL
53460: IFFALSE 53509
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53462: LD_EXP 40
53466: PUSH
53467: LD_VAR 0 6
53471: ARRAY
53472: PUSH
53473: LD_INT 1
53475: ARRAY
53476: PPUSH
53477: LD_EXP 40
53481: PUSH
53482: LD_VAR 0 6
53486: ARRAY
53487: PUSH
53488: LD_INT 2
53490: ARRAY
53491: PPUSH
53492: CALL_OW 63
// KillUnit ( building ) ;
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 66
// exit ;
53505: POP
53506: POP
53507: GO 53513
// end ; end ; end ;
53509: GO 53294
53511: POP
53512: POP
// end ;
53513: LD_VAR 0 5
53517: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53518: LD_INT 0
53520: PPUSH
53521: PPUSH
53522: PPUSH
// if mpGameType <> GameTypeFamine then
53523: LD_EXP 1
53527: PUSH
53528: LD_INT 5
53530: NONEQUAL
53531: IFFALSE 53535
// exit ;
53533: GO 53769
// for i := 1 to mpGlobalSibDeposits do
53535: LD_ADDR_VAR 0 6
53539: PUSH
53540: DOUBLE
53541: LD_INT 1
53543: DEC
53544: ST_TO_ADDR
53545: LD_EXP 41
53549: PUSH
53550: FOR_TO
53551: IFFALSE 53767
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53553: LD_EXP 41
53557: PUSH
53558: LD_VAR 0 6
53562: ARRAY
53563: PUSH
53564: LD_INT 1
53566: ARRAY
53567: PPUSH
53568: LD_EXP 41
53572: PUSH
53573: LD_VAR 0 6
53577: ARRAY
53578: PUSH
53579: LD_INT 2
53581: ARRAY
53582: PPUSH
53583: CALL_OW 428
53587: PUSH
53588: LD_VAR 0 1
53592: EQUAL
53593: IFFALSE 53765
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53595: LD_ADDR_VAR 0 7
53599: PUSH
53600: LD_EXP 41
53604: PUSH
53605: LD_VAR 0 6
53609: ARRAY
53610: PUSH
53611: LD_INT 3
53613: ARRAY
53614: ST_TO_ADDR
// value := value - amount ;
53615: LD_ADDR_VAR 0 7
53619: PUSH
53620: LD_VAR 0 7
53624: PUSH
53625: LD_VAR 0 4
53629: MINUS
53630: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53631: LD_ADDR_EXP 41
53635: PUSH
53636: LD_EXP 41
53640: PPUSH
53641: LD_VAR 0 6
53645: PPUSH
53646: LD_EXP 41
53650: PUSH
53651: LD_VAR 0 6
53655: ARRAY
53656: PPUSH
53657: LD_INT 3
53659: PPUSH
53660: LD_VAR 0 7
53664: PPUSH
53665: CALL_OW 1
53669: PPUSH
53670: CALL_OW 1
53674: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53675: LD_VAR 0 2
53679: PUSH
53680: LD_OWVAR 2
53684: PUSH
53685: LD_INT 9
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: IN
53692: IFFALSE 53708
// SetUnitDisplayNumber ( building , value ) ;
53694: LD_VAR 0 1
53698: PPUSH
53699: LD_VAR 0 7
53703: PPUSH
53704: CALL_OW 505
// if value <= 0 then
53708: LD_VAR 0 7
53712: PUSH
53713: LD_INT 0
53715: LESSEQUAL
53716: IFFALSE 53765
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53718: LD_EXP 41
53722: PUSH
53723: LD_VAR 0 6
53727: ARRAY
53728: PUSH
53729: LD_INT 1
53731: ARRAY
53732: PPUSH
53733: LD_EXP 41
53737: PUSH
53738: LD_VAR 0 6
53742: ARRAY
53743: PUSH
53744: LD_INT 2
53746: ARRAY
53747: PPUSH
53748: CALL_OW 63
// KillUnit ( building ) ;
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 66
// exit ;
53761: POP
53762: POP
53763: GO 53769
// end ; end ; end ;
53765: GO 53550
53767: POP
53768: POP
// end ;
53769: LD_VAR 0 5
53773: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53774: LD_INT 0
53776: PPUSH
53777: PPUSH
// side := GetSide ( factory ) ;
53778: LD_ADDR_VAR 0 7
53782: PUSH
53783: LD_VAR 0 1
53787: PPUSH
53788: CALL_OW 255
53792: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53793: LD_VAR 0 5
53797: PUSH
53798: LD_INT 81
53800: EQUAL
53801: IFFALSE 53839
53803: PUSH
53804: LD_INT 22
53806: PUSH
53807: LD_VAR 0 7
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 34
53818: PUSH
53819: LD_INT 81
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PPUSH
53830: CALL_OW 69
53834: PUSH
53835: LD_INT 0
53837: GREATER
53838: AND
53839: IFFALSE 53872
// begin ComCancel ( factory ) ;
53841: LD_VAR 0 1
53845: PPUSH
53846: CALL_OW 127
// if side = your_side then
53850: LD_VAR 0 7
53854: PUSH
53855: LD_OWVAR 2
53859: EQUAL
53860: IFFALSE 53872
// HintSpec ( VehLimit , 2 ) ;
53862: LD_STRING VehLimit
53864: PPUSH
53865: LD_INT 2
53867: PPUSH
53868: CALL_OW 338
// end ; end ;
53872: LD_VAR 0 6
53876: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53877: LD_INT 0
53879: PPUSH
53880: PPUSH
53881: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53882: LD_VAR 0 1
53886: PPUSH
53887: CALL_OW 264
53891: PUSH
53892: LD_INT 81
53894: EQUAL
53895: IFFALSE 53912
53897: PUSH
53898: LD_VAR 0 1
53902: PPUSH
53903: CALL_OW 263
53907: PUSH
53908: LD_INT 1
53910: EQUAL
53911: AND
53912: IFFALSE 54192
// begin for i := 1 to Count ( minersList ) do
53914: LD_ADDR_VAR 0 6
53918: PUSH
53919: DOUBLE
53920: LD_INT 1
53922: DEC
53923: ST_TO_ADDR
53924: LD_EXP 56
53928: PPUSH
53929: CALL 5108 0 1
53933: PUSH
53934: FOR_TO
53935: IFFALSE 54053
// begin if minersList [ i ] = oldId then
53937: LD_EXP 56
53941: PUSH
53942: LD_VAR 0 6
53946: ARRAY
53947: PUSH
53948: LD_VAR 0 2
53952: EQUAL
53953: IFFALSE 54051
// begin for j := 1 to minerMinesList [ i ] do
53955: LD_ADDR_VAR 0 7
53959: PUSH
53960: DOUBLE
53961: LD_INT 1
53963: DEC
53964: ST_TO_ADDR
53965: LD_EXP 57
53969: PUSH
53970: LD_VAR 0 6
53974: ARRAY
53975: PUSH
53976: FOR_TO
53977: IFFALSE 54027
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53979: LD_EXP 57
53983: PUSH
53984: LD_VAR 0 6
53988: ARRAY
53989: PUSH
53990: LD_VAR 0 7
53994: ARRAY
53995: PUSH
53996: LD_INT 1
53998: ARRAY
53999: PPUSH
54000: LD_EXP 57
54004: PUSH
54005: LD_VAR 0 6
54009: ARRAY
54010: PUSH
54011: LD_VAR 0 7
54015: ARRAY
54016: PUSH
54017: LD_INT 2
54019: ARRAY
54020: PPUSH
54021: CALL_OW 612
54025: GO 53976
54027: POP
54028: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54029: LD_ADDR_EXP 57
54033: PUSH
54034: LD_EXP 57
54038: PPUSH
54039: LD_VAR 0 6
54043: PPUSH
54044: CALL_OW 3
54048: ST_TO_ADDR
// break ;
54049: GO 54053
// end ; end ;
54051: GO 53934
54053: POP
54054: POP
// minersList := minersList diff oldId ;
54055: LD_ADDR_EXP 56
54059: PUSH
54060: LD_EXP 56
54064: PUSH
54065: LD_VAR 0 2
54069: DIFF
54070: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54071: LD_INT 22
54073: PUSH
54074: LD_VAR 0 4
54078: PPUSH
54079: CALL_OW 255
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 34
54090: PUSH
54091: LD_INT 81
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PPUSH
54102: CALL_OW 69
54106: PUSH
54107: LD_INT 1
54109: GREATER
54110: IFFALSE 54137
// begin ComExit ( unit ) ;
54112: LD_VAR 0 4
54116: PPUSH
54117: CALL 41482 0 1
// SetSide ( newId , oldSide ) ;
54121: LD_VAR 0 1
54125: PPUSH
54126: LD_VAR 0 3
54130: PPUSH
54131: CALL_OW 235
// exit ;
54135: GO 54192
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54137: LD_ADDR_EXP 56
54141: PUSH
54142: LD_EXP 56
54146: PPUSH
54147: LD_EXP 56
54151: PUSH
54152: LD_INT 1
54154: PLUS
54155: PPUSH
54156: LD_VAR 0 1
54160: PPUSH
54161: CALL_OW 1
54165: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54166: LD_ADDR_EXP 57
54170: PUSH
54171: LD_EXP 57
54175: PPUSH
54176: LD_EXP 57
54180: PUSH
54181: LD_INT 1
54183: PLUS
54184: PPUSH
54185: EMPTY
54186: PPUSH
54187: CALL_OW 1
54191: ST_TO_ADDR
// end ; end ; end_of_file
54192: LD_VAR 0 5
54196: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54197: LD_EXP 37
54201: IFFALSE 54209
54203: PUSH
54204: CALL 54419 0 0
54208: AND
54209: IFFALSE 54217
54211: PUSH
54212: LD_OWVAR 4
54216: AND
54217: IFFALSE 54416
54219: GO 54221
54221: DISABLE
54222: LD_INT 0
54224: PPUSH
54225: PPUSH
// begin canWin := false ;
54226: LD_ADDR_VAR 0 2
54230: PUSH
54231: LD_INT 0
54233: ST_TO_ADDR
// if not HasPower ( your_side ) then
54234: LD_OWVAR 2
54238: PPUSH
54239: CALL 54461 0 1
54243: NOT
54244: IFFALSE 54255
// begin Multiplayer_Loose_Message ;
54246: CALL_OW 521
// enable ( mpLose ) ;
54250: LD_INT 102
54252: ENABLE_MARKED
// end else
54253: GO 54416
// begin canWin := true ;
54255: LD_ADDR_VAR 0 2
54259: PUSH
54260: LD_INT 1
54262: ST_TO_ADDR
// for i := 1 to 8 do
54263: LD_ADDR_VAR 0 1
54267: PUSH
54268: DOUBLE
54269: LD_INT 1
54271: DEC
54272: ST_TO_ADDR
54273: LD_INT 8
54275: PUSH
54276: FOR_TO
54277: IFFALSE 54402
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54279: LD_EXP 5
54283: PUSH
54284: LD_VAR 0 1
54288: ARRAY
54289: IFFALSE 54302
54291: PUSH
54292: LD_VAR 0 1
54296: PPUSH
54297: CALL_OW 108
54301: AND
54302: IFFALSE 54316
54304: PUSH
54305: LD_VAR 0 1
54309: PUSH
54310: LD_OWVAR 2
54314: NONEQUAL
54315: AND
54316: IFFALSE 54400
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54318: LD_EXP 6
54322: PUSH
54323: LD_VAR 0 1
54327: ARRAY
54328: NOT
54329: IFTRUE 54377
54331: PUSH
54332: LD_EXP 6
54336: PUSH
54337: LD_VAR 0 1
54341: ARRAY
54342: PUSH
54343: LD_EXP 6
54347: PUSH
54348: LD_OWVAR 2
54352: ARRAY
54353: NONEQUAL
54354: IFFALSE 54376
54356: PUSH
54357: LD_OWVAR 2
54361: PPUSH
54362: LD_VAR 0 1
54366: PPUSH
54367: CALL_OW 81
54371: PUSH
54372: LD_INT 1
54374: NONEQUAL
54375: AND
54376: OR
54377: IFFALSE 54400
// if HasPower ( i ) then
54379: LD_VAR 0 1
54383: PPUSH
54384: CALL 54461 0 1
54388: IFFALSE 54400
// begin canWin := false ;
54390: LD_ADDR_VAR 0 2
54394: PUSH
54395: LD_INT 0
54397: ST_TO_ADDR
// break ;
54398: GO 54402
// end ;
54400: GO 54276
54402: POP
54403: POP
// if canWin then
54404: LD_VAR 0 2
54408: IFFALSE 54415
// enable ( mpWin ) else
54410: LD_INT 101
54412: ENABLE_MARKED
54413: GO 54416
// enable ;
54415: ENABLE
// end ; end ;
54416: PPOPN 2
54418: END
// function CanWinLoose ; begin
54419: LD_INT 0
54421: PPUSH
// result := true ;
54422: LD_ADDR_VAR 0 1
54426: PUSH
54427: LD_INT 1
54429: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54430: CALL_OW 531
54434: IFFALSE 54446
54436: PUSH
54437: CALL_OW 519
54441: PUSH
54442: LD_INT 1
54444: GREATER
54445: AND
54446: IFFALSE 54456
// result := false ;
54448: LD_ADDR_VAR 0 1
54452: PUSH
54453: LD_INT 0
54455: ST_TO_ADDR
// end ;
54456: LD_VAR 0 1
54460: RET
// function HasPower ( i ) ; begin
54461: LD_INT 0
54463: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54464: LD_ADDR_VAR 0 2
54468: PUSH
54469: LD_INT 22
54471: PUSH
54472: LD_VAR 0 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 21
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 33
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 33
54506: PUSH
54507: LD_INT 5
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PPUSH
54524: CALL_OW 69
54528: ST_TO_ADDR
// end ; end_of_file
54529: LD_VAR 0 2
54533: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54534: LD_EXP 37
54538: IFFALSE 54581
54540: GO 54542
54542: DISABLE
54543: LD_INT 0
54545: PPUSH
// begin for i := 1 to 8 do
54546: LD_ADDR_VAR 0 1
54550: PUSH
54551: DOUBLE
54552: LD_INT 1
54554: DEC
54555: ST_TO_ADDR
54556: LD_INT 8
54558: PUSH
54559: FOR_TO
54560: IFFALSE 54579
// SetRestrict ( b_depot , i , state_disabled ) ;
54562: LD_INT 0
54564: PPUSH
54565: LD_VAR 0 1
54569: PPUSH
54570: LD_INT 0
54572: PPUSH
54573: CALL_OW 324
54577: GO 54559
54579: POP
54580: POP
// end ;
54581: PPOPN 1
54583: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54584: LD_EXP 37
54588: IFFALSE 54596
54590: PUSH
54591: CALL 54806 0 0
54595: AND
54596: IFFALSE 54604
54598: PUSH
54599: LD_OWVAR 4
54603: AND
54604: IFFALSE 54803
54606: GO 54608
54608: DISABLE
54609: LD_INT 0
54611: PPUSH
54612: PPUSH
// begin canWin := false ;
54613: LD_ADDR_VAR 0 2
54617: PUSH
54618: LD_INT 0
54620: ST_TO_ADDR
// if not HasPower ( your_side ) then
54621: LD_OWVAR 2
54625: PPUSH
54626: CALL 54848 0 1
54630: NOT
54631: IFFALSE 54642
// begin Multiplayer_Loose_Message ;
54633: CALL_OW 521
// enable ( mpLose ) ;
54637: LD_INT 102
54639: ENABLE_MARKED
// end else
54640: GO 54803
// begin canWin := true ;
54642: LD_ADDR_VAR 0 2
54646: PUSH
54647: LD_INT 1
54649: ST_TO_ADDR
// for i := 1 to 8 do
54650: LD_ADDR_VAR 0 1
54654: PUSH
54655: DOUBLE
54656: LD_INT 1
54658: DEC
54659: ST_TO_ADDR
54660: LD_INT 8
54662: PUSH
54663: FOR_TO
54664: IFFALSE 54789
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54666: LD_EXP 5
54670: PUSH
54671: LD_VAR 0 1
54675: ARRAY
54676: IFFALSE 54689
54678: PUSH
54679: LD_VAR 0 1
54683: PPUSH
54684: CALL_OW 108
54688: AND
54689: IFFALSE 54703
54691: PUSH
54692: LD_VAR 0 1
54696: PUSH
54697: LD_OWVAR 2
54701: NONEQUAL
54702: AND
54703: IFFALSE 54787
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54705: LD_EXP 6
54709: PUSH
54710: LD_VAR 0 1
54714: ARRAY
54715: NOT
54716: IFTRUE 54764
54718: PUSH
54719: LD_EXP 6
54723: PUSH
54724: LD_VAR 0 1
54728: ARRAY
54729: PUSH
54730: LD_EXP 6
54734: PUSH
54735: LD_OWVAR 2
54739: ARRAY
54740: NONEQUAL
54741: IFFALSE 54763
54743: PUSH
54744: LD_OWVAR 2
54748: PPUSH
54749: LD_VAR 0 1
54753: PPUSH
54754: CALL_OW 81
54758: PUSH
54759: LD_INT 1
54761: NONEQUAL
54762: AND
54763: OR
54764: IFFALSE 54787
// if HasPower ( i ) then
54766: LD_VAR 0 1
54770: PPUSH
54771: CALL 54848 0 1
54775: IFFALSE 54787
// begin canWin := false ;
54777: LD_ADDR_VAR 0 2
54781: PUSH
54782: LD_INT 0
54784: ST_TO_ADDR
// break ;
54785: GO 54789
// end ;
54787: GO 54663
54789: POP
54790: POP
// if canWin then
54791: LD_VAR 0 2
54795: IFFALSE 54802
// enable ( mpWin ) else
54797: LD_INT 101
54799: ENABLE_MARKED
54800: GO 54803
// enable ;
54802: ENABLE
// end ; end ;
54803: PPOPN 2
54805: END
// function CanWinLoose ; begin
54806: LD_INT 0
54808: PPUSH
// result := true ;
54809: LD_ADDR_VAR 0 1
54813: PUSH
54814: LD_INT 1
54816: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54817: CALL_OW 531
54821: IFFALSE 54833
54823: PUSH
54824: CALL_OW 519
54828: PUSH
54829: LD_INT 1
54831: GREATER
54832: AND
54833: IFFALSE 54843
// result := false ;
54835: LD_ADDR_VAR 0 1
54839: PUSH
54840: LD_INT 0
54842: ST_TO_ADDR
// end ;
54843: LD_VAR 0 1
54847: RET
// function HasPower ( i ) ; begin
54848: LD_INT 0
54850: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54851: LD_INT 22
54853: PUSH
54854: LD_VAR 0 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 30
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 30
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PPUSH
54895: CALL_OW 69
54899: NOT
54900: IFFALSE 54904
// exit ;
54902: GO 54969
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54904: LD_ADDR_VAR 0 2
54908: PUSH
54909: LD_INT 22
54911: PUSH
54912: LD_VAR 0 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 21
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 33
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 33
54946: PUSH
54947: LD_INT 5
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PPUSH
54964: CALL_OW 69
54968: ST_TO_ADDR
// end ; end_of_file
54969: LD_VAR 0 2
54973: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54974: LD_EXP 37
54978: IFFALSE 55317
54980: GO 54982
54982: DISABLE
54983: LD_INT 0
54985: PPUSH
54986: PPUSH
54987: PPUSH
// begin mpKingPoints := [ ] ;
54988: LD_ADDR_EXP 48
54992: PUSH
54993: EMPTY
54994: ST_TO_ADDR
// if mpTeamGame then
54995: LD_EXP 9
54999: IFFALSE 55053
// begin for i := 1 to Count ( mpTeams ) do
55001: LD_ADDR_VAR 0 1
55005: PUSH
55006: DOUBLE
55007: LD_INT 1
55009: DEC
55010: ST_TO_ADDR
55011: LD_EXP 8
55015: PPUSH
55016: CALL 5108 0 1
55020: PUSH
55021: FOR_TO
55022: IFFALSE 55049
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55024: LD_ADDR_EXP 48
55028: PUSH
55029: LD_EXP 48
55033: PPUSH
55034: LD_VAR 0 1
55038: PPUSH
55039: LD_INT 0
55041: PPUSH
55042: CALL_OW 1
55046: ST_TO_ADDR
55047: GO 55021
55049: POP
55050: POP
// end else
55051: GO 55096
// begin for i := 1 to 8 do
55053: LD_ADDR_VAR 0 1
55057: PUSH
55058: DOUBLE
55059: LD_INT 1
55061: DEC
55062: ST_TO_ADDR
55063: LD_INT 8
55065: PUSH
55066: FOR_TO
55067: IFFALSE 55094
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55069: LD_ADDR_EXP 48
55073: PUSH
55074: LD_EXP 48
55078: PPUSH
55079: LD_VAR 0 1
55083: PPUSH
55084: LD_INT 0
55086: PPUSH
55087: CALL_OW 1
55091: ST_TO_ADDR
55092: GO 55066
55094: POP
55095: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55096: LD_ADDR_VAR 0 3
55100: PUSH
55101: LD_INT 17
55103: PPUSH
55104: LD_INT 0
55106: PPUSH
55107: CALL_OW 517
55111: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55112: LD_ADDR_VAR 0 1
55116: PUSH
55117: DOUBLE
55118: LD_INT 1
55120: DEC
55121: ST_TO_ADDR
55122: LD_VAR 0 3
55126: PUSH
55127: LD_INT 1
55129: ARRAY
55130: PUSH
55131: FOR_TO
55132: IFFALSE 55199
// for j := 1 to 8 do
55134: LD_ADDR_VAR 0 2
55138: PUSH
55139: DOUBLE
55140: LD_INT 1
55142: DEC
55143: ST_TO_ADDR
55144: LD_INT 8
55146: PUSH
55147: FOR_TO
55148: IFFALSE 55195
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55150: LD_VAR 0 3
55154: PUSH
55155: LD_INT 1
55157: ARRAY
55158: PUSH
55159: LD_VAR 0 1
55163: ARRAY
55164: PPUSH
55165: LD_VAR 0 3
55169: PUSH
55170: LD_INT 2
55172: ARRAY
55173: PUSH
55174: LD_VAR 0 1
55178: ARRAY
55179: PPUSH
55180: LD_VAR 0 2
55184: PPUSH
55185: LD_INT 12
55187: NEG
55188: PPUSH
55189: CALL_OW 330
55193: GO 55147
55195: POP
55196: POP
55197: GO 55131
55199: POP
55200: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55201: LD_EXP 32
55205: PPUSH
55206: LD_INT 1
55208: PPUSH
55209: CALL_OW 424
// UpdateCounter ;
55213: CALL 55821 0 0
// repeat wait ( 0 0$1 ) ;
55217: LD_INT 35
55219: PPUSH
55220: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55224: LD_ADDR_VAR 0 3
55228: PUSH
55229: LD_EXP 32
55233: PPUSH
55234: LD_INT 3
55236: PUSH
55237: LD_INT 57
55239: PUSH
55240: EMPTY
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 50
55249: PUSH
55250: EMPTY
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 30
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 30
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: PPUSH
55286: CALL_OW 70
55290: ST_TO_ADDR
// if not tmp then
55291: LD_VAR 0 3
55295: NOT
55296: IFFALSE 55300
// continue ;
55298: GO 55217
// AddPoints ( tmp ) ;
55300: LD_VAR 0 3
55304: PPUSH
55305: CALL 55499 0 1
// UpdateCounter ;
55309: CALL 55821 0 0
// until false ;
55313: LD_INT 0
55315: IFFALSE 55217
// end ;
55317: PPOPN 3
55319: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55320: LD_EXP 37
55324: IFFALSE 55332
55326: PUSH
55327: LD_EXP 35
55331: AND
55332: IFFALSE 55496
55334: GO 55336
55336: DISABLE
55337: LD_INT 0
55339: PPUSH
55340: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55341: LD_ADDR_VAR 0 2
55345: PUSH
55346: LD_INT 17
55348: PPUSH
55349: LD_INT 0
55351: PPUSH
55352: CALL_OW 517
55356: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55357: LD_ADDR_VAR 0 1
55361: PUSH
55362: DOUBLE
55363: LD_INT 1
55365: DEC
55366: ST_TO_ADDR
55367: LD_VAR 0 2
55371: PUSH
55372: LD_INT 1
55374: ARRAY
55375: PUSH
55376: FOR_TO
55377: IFFALSE 55418
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55379: LD_VAR 0 2
55383: PUSH
55384: LD_INT 1
55386: ARRAY
55387: PUSH
55388: LD_VAR 0 1
55392: ARRAY
55393: PPUSH
55394: LD_VAR 0 2
55398: PUSH
55399: LD_INT 2
55401: ARRAY
55402: PUSH
55403: LD_VAR 0 1
55407: ARRAY
55408: PPUSH
55409: LD_INT 125
55411: PPUSH
55412: CALL_OW 495
55416: GO 55376
55418: POP
55419: POP
// repeat wait ( mpEmissions ) ;
55420: LD_EXP 35
55424: PPUSH
55425: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55429: LD_ADDR_VAR 0 1
55433: PUSH
55434: DOUBLE
55435: LD_INT 1
55437: DEC
55438: ST_TO_ADDR
55439: LD_VAR 0 2
55443: PUSH
55444: LD_INT 1
55446: ARRAY
55447: PUSH
55448: FOR_TO
55449: IFFALSE 55490
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55451: LD_VAR 0 2
55455: PUSH
55456: LD_INT 1
55458: ARRAY
55459: PUSH
55460: LD_VAR 0 1
55464: ARRAY
55465: PPUSH
55466: LD_VAR 0 2
55470: PUSH
55471: LD_INT 2
55473: ARRAY
55474: PUSH
55475: LD_VAR 0 1
55479: ARRAY
55480: PPUSH
55481: LD_INT 15
55483: PPUSH
55484: CALL_OW 495
55488: GO 55448
55490: POP
55491: POP
// until false ;
55492: LD_INT 0
55494: IFFALSE 55420
// end ;
55496: PPOPN 2
55498: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55499: LD_INT 0
55501: PPUSH
55502: PPUSH
55503: PPUSH
55504: PPUSH
55505: PPUSH
// if mpTeamGame then
55506: LD_EXP 9
55510: IFFALSE 55707
// begin first := depots [ 1 ] ;
55512: LD_ADDR_VAR 0 4
55516: PUSH
55517: LD_VAR 0 1
55521: PUSH
55522: LD_INT 1
55524: ARRAY
55525: ST_TO_ADDR
// side := GetSide ( first ) ;
55526: LD_ADDR_VAR 0 6
55530: PUSH
55531: LD_VAR 0 4
55535: PPUSH
55536: CALL_OW 255
55540: ST_TO_ADDR
// for i := 1 to mpTeams do
55541: LD_ADDR_VAR 0 3
55545: PUSH
55546: DOUBLE
55547: LD_INT 1
55549: DEC
55550: ST_TO_ADDR
55551: LD_EXP 8
55555: PUSH
55556: FOR_TO
55557: IFFALSE 55591
// if side in mpTeams [ i ] then
55559: LD_VAR 0 6
55563: PUSH
55564: LD_EXP 8
55568: PUSH
55569: LD_VAR 0 3
55573: ARRAY
55574: IN
55575: IFFALSE 55589
// begin team := i ;
55577: LD_ADDR_VAR 0 5
55581: PUSH
55582: LD_VAR 0 3
55586: ST_TO_ADDR
// break ;
55587: GO 55591
// end ;
55589: GO 55556
55591: POP
55592: POP
// if not team then
55593: LD_VAR 0 5
55597: NOT
55598: IFFALSE 55602
// exit ;
55600: GO 55816
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55602: LD_EXP 32
55606: PPUSH
55607: LD_INT 81
55609: PUSH
55610: LD_VAR 0 6
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PPUSH
55619: CALL_OW 70
55623: IFFALSE 55627
// exit ;
55625: GO 55816
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55627: LD_ADDR_EXP 48
55631: PUSH
55632: LD_EXP 48
55636: PPUSH
55637: LD_VAR 0 5
55641: PPUSH
55642: LD_EXP 48
55646: PUSH
55647: LD_VAR 0 5
55651: ARRAY
55652: PUSH
55653: LD_INT 1
55655: PLUS
55656: PPUSH
55657: CALL_OW 1
55661: ST_TO_ADDR
// for i in mpTeams [ team ] do
55662: LD_ADDR_VAR 0 3
55666: PUSH
55667: LD_EXP 8
55671: PUSH
55672: LD_VAR 0 5
55676: ARRAY
55677: PUSH
55678: FOR_IN
55679: IFFALSE 55703
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55681: LD_VAR 0 3
55685: PPUSH
55686: LD_EXP 48
55690: PUSH
55691: LD_VAR 0 5
55695: ARRAY
55696: PPUSH
55697: CALL_OW 506
55701: GO 55678
55703: POP
55704: POP
// end else
55705: GO 55816
// begin first := depots [ 1 ] ;
55707: LD_ADDR_VAR 0 4
55711: PUSH
55712: LD_VAR 0 1
55716: PUSH
55717: LD_INT 1
55719: ARRAY
55720: ST_TO_ADDR
// side := GetSide ( first ) ;
55721: LD_ADDR_VAR 0 6
55725: PUSH
55726: LD_VAR 0 4
55730: PPUSH
55731: CALL_OW 255
55735: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55736: LD_EXP 32
55740: PPUSH
55741: LD_INT 81
55743: PUSH
55744: LD_VAR 0 6
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PPUSH
55753: CALL_OW 70
55757: IFFALSE 55761
// exit ;
55759: GO 55816
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55761: LD_ADDR_EXP 48
55765: PUSH
55766: LD_EXP 48
55770: PPUSH
55771: LD_VAR 0 6
55775: PPUSH
55776: LD_EXP 48
55780: PUSH
55781: LD_VAR 0 6
55785: ARRAY
55786: PUSH
55787: LD_INT 1
55789: PLUS
55790: PPUSH
55791: CALL_OW 1
55795: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55796: LD_VAR 0 6
55800: PPUSH
55801: LD_EXP 48
55805: PUSH
55806: LD_VAR 0 6
55810: ARRAY
55811: PPUSH
55812: CALL_OW 506
// end ; end ;
55816: LD_VAR 0 2
55820: RET
// function UpdateCounter ; var i ; begin
55821: LD_INT 0
55823: PPUSH
55824: PPUSH
// result := [ ] ;
55825: LD_ADDR_VAR 0 1
55829: PUSH
55830: EMPTY
55831: ST_TO_ADDR
// if mpTeamGame then
55832: LD_EXP 9
55836: IFFALSE 55903
// begin for i := 1 to mpTeams do
55838: LD_ADDR_VAR 0 2
55842: PUSH
55843: DOUBLE
55844: LD_INT 1
55846: DEC
55847: ST_TO_ADDR
55848: LD_EXP 8
55852: PUSH
55853: FOR_TO
55854: IFFALSE 55899
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55856: LD_ADDR_VAR 0 1
55860: PUSH
55861: LD_VAR 0 1
55865: PUSH
55866: LD_STRING #KingoftheHill-Team
55868: PUSH
55869: LD_VAR 0 2
55873: PUSH
55874: LD_EXP 48
55878: PUSH
55879: LD_VAR 0 2
55883: ARRAY
55884: PUSH
55885: LD_EXP 33
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: ADD
55896: ST_TO_ADDR
55897: GO 55853
55899: POP
55900: POP
// end else
55901: GO 55976
// begin for i := 1 to 8 do
55903: LD_ADDR_VAR 0 2
55907: PUSH
55908: DOUBLE
55909: LD_INT 1
55911: DEC
55912: ST_TO_ADDR
55913: LD_INT 8
55915: PUSH
55916: FOR_TO
55917: IFFALSE 55974
// if mpSidePositions [ i ] then
55919: LD_EXP 5
55923: PUSH
55924: LD_VAR 0 2
55928: ARRAY
55929: IFFALSE 55972
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55931: LD_ADDR_VAR 0 1
55935: PUSH
55936: LD_VAR 0 1
55940: PUSH
55941: LD_STRING #KingoftheHill-Player
55943: PUSH
55944: LD_VAR 0 2
55948: PUSH
55949: LD_EXP 48
55953: PUSH
55954: LD_VAR 0 2
55958: ARRAY
55959: PUSH
55960: LD_EXP 33
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: ADD
55971: ST_TO_ADDR
55972: GO 55916
55974: POP
55975: POP
// end ; mpDisplayStrings := result ;
55976: LD_ADDR_EXP 36
55980: PUSH
55981: LD_VAR 0 1
55985: ST_TO_ADDR
// end ;
55986: LD_VAR 0 1
55990: RET
// export function HowMuchPointsKing ( side ) ; begin
55991: LD_INT 0
55993: PPUSH
// result := HowMuchPoints ( side ) ;
55994: LD_ADDR_VAR 0 2
55998: PUSH
55999: LD_VAR 0 1
56003: PPUSH
56004: CALL 56014 0 1
56008: ST_TO_ADDR
// end ;
56009: LD_VAR 0 2
56013: RET
// function HowMuchPoints ( side ) ; var i ; begin
56014: LD_INT 0
56016: PPUSH
56017: PPUSH
// if mpTeamGame then
56018: LD_EXP 9
56022: IFFALSE 56091
// begin for i := 1 to Count ( mpTeams ) do
56024: LD_ADDR_VAR 0 3
56028: PUSH
56029: DOUBLE
56030: LD_INT 1
56032: DEC
56033: ST_TO_ADDR
56034: LD_EXP 8
56038: PPUSH
56039: CALL 5108 0 1
56043: PUSH
56044: FOR_TO
56045: IFFALSE 56087
// begin if side in mpTeams [ i ] then
56047: LD_VAR 0 1
56051: PUSH
56052: LD_EXP 8
56056: PUSH
56057: LD_VAR 0 3
56061: ARRAY
56062: IN
56063: IFFALSE 56085
// begin result := mpKingPoints [ i ] ;
56065: LD_ADDR_VAR 0 2
56069: PUSH
56070: LD_EXP 48
56074: PUSH
56075: LD_VAR 0 3
56079: ARRAY
56080: ST_TO_ADDR
// exit ;
56081: POP
56082: POP
56083: GO 56107
// end ; end ;
56085: GO 56044
56087: POP
56088: POP
// end else
56089: GO 56107
// result := mpKingPoints [ side ] ;
56091: LD_ADDR_VAR 0 2
56095: PUSH
56096: LD_EXP 48
56100: PUSH
56101: LD_VAR 0 1
56105: ARRAY
56106: ST_TO_ADDR
// end ;
56107: LD_VAR 0 2
56111: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56112: LD_EXP 37
56116: IFFALSE 56124
56118: PUSH
56119: CALL 56536 0 0
56123: AND
56124: IFFALSE 56132
56126: PUSH
56127: LD_OWVAR 4
56131: AND
56132: IFFALSE 56385
56134: GO 56136
56136: DISABLE
56137: LD_INT 0
56139: PPUSH
56140: PPUSH
// begin canWin := false ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: LD_INT 0
56148: ST_TO_ADDR
// if not HasPower ( your_side ) then
56149: LD_OWVAR 2
56153: PPUSH
56154: CALL 56578 0 1
56158: NOT
56159: IFFALSE 56170
// begin Multiplayer_Loose_Message ;
56161: CALL_OW 521
// enable ( mpLose ) ;
56165: LD_INT 102
56167: ENABLE_MARKED
// end else
56168: GO 56385
// begin if not EnemiesInGame then
56170: CALL 56388 0 0
56174: NOT
56175: IFFALSE 56182
// begin enable ( mpWin ) ;
56177: LD_INT 101
56179: ENABLE_MARKED
// exit ;
56180: GO 56385
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56182: LD_ADDR_VAR 0 2
56186: PUSH
56187: LD_OWVAR 2
56191: PPUSH
56192: CALL 56014 0 1
56196: PUSH
56197: LD_EXP 33
56201: GREATEREQUAL
56202: IFFALSE 56215
56204: PUSH
56205: LD_OWVAR 2
56209: PPUSH
56210: CALL 56578 0 1
56214: AND
56215: ST_TO_ADDR
// for i := 1 to 8 do
56216: LD_ADDR_VAR 0 1
56220: PUSH
56221: DOUBLE
56222: LD_INT 1
56224: DEC
56225: ST_TO_ADDR
56226: LD_INT 8
56228: PUSH
56229: FOR_TO
56230: IFFALSE 56371
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56232: LD_EXP 5
56236: PUSH
56237: LD_VAR 0 1
56241: ARRAY
56242: IFFALSE 56255
56244: PUSH
56245: LD_VAR 0 1
56249: PPUSH
56250: CALL_OW 108
56254: AND
56255: IFFALSE 56269
56257: PUSH
56258: LD_VAR 0 1
56262: PUSH
56263: LD_OWVAR 2
56267: NONEQUAL
56268: AND
56269: IFFALSE 56369
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56271: LD_EXP 6
56275: PUSH
56276: LD_VAR 0 1
56280: ARRAY
56281: NOT
56282: IFTRUE 56330
56284: PUSH
56285: LD_EXP 6
56289: PUSH
56290: LD_VAR 0 1
56294: ARRAY
56295: PUSH
56296: LD_EXP 6
56300: PUSH
56301: LD_OWVAR 2
56305: ARRAY
56306: NONEQUAL
56307: IFFALSE 56329
56309: PUSH
56310: LD_OWVAR 2
56314: PPUSH
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 81
56324: PUSH
56325: LD_INT 1
56327: NONEQUAL
56328: AND
56329: OR
56330: IFFALSE 56369
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56332: LD_VAR 0 1
56336: PPUSH
56337: CALL 56014 0 1
56341: PUSH
56342: LD_EXP 33
56346: GREATEREQUAL
56347: IFFALSE 56360
56349: PUSH
56350: LD_VAR 0 1
56354: PPUSH
56355: CALL 56578 0 1
56359: AND
56360: IFFALSE 56369
// begin enable ( mpLose ) ;
56362: LD_INT 102
56364: ENABLE_MARKED
// exit ;
56365: POP
56366: POP
56367: GO 56385
// end ;
56369: GO 56229
56371: POP
56372: POP
// if canWin then
56373: LD_VAR 0 2
56377: IFFALSE 56384
// enable ( mpWin ) else
56379: LD_INT 101
56381: ENABLE_MARKED
56382: GO 56385
// enable ;
56384: ENABLE
// end ; end ;
56385: PPOPN 2
56387: END
// function EnemiesInGame ; var i ; begin
56388: LD_INT 0
56390: PPUSH
56391: PPUSH
// result := false ;
56392: LD_ADDR_VAR 0 1
56396: PUSH
56397: LD_INT 0
56399: ST_TO_ADDR
// for i := 1 to 8 do
56400: LD_ADDR_VAR 0 2
56404: PUSH
56405: DOUBLE
56406: LD_INT 1
56408: DEC
56409: ST_TO_ADDR
56410: LD_INT 8
56412: PUSH
56413: FOR_TO
56414: IFFALSE 56529
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56416: LD_VAR 0 2
56420: PUSH
56421: LD_OWVAR 2
56425: NONEQUAL
56426: IFFALSE 56439
56428: PUSH
56429: LD_VAR 0 2
56433: PPUSH
56434: CALL 56578 0 1
56438: AND
56439: IFFALSE 56452
56441: PUSH
56442: LD_VAR 0 2
56446: PPUSH
56447: CALL_OW 108
56451: AND
56452: IFFALSE 56527
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56454: LD_EXP 6
56458: PUSH
56459: LD_VAR 0 2
56463: ARRAY
56464: NOT
56465: IFTRUE 56513
56467: PUSH
56468: LD_EXP 6
56472: PUSH
56473: LD_VAR 0 2
56477: ARRAY
56478: PUSH
56479: LD_EXP 6
56483: PUSH
56484: LD_OWVAR 2
56488: ARRAY
56489: NONEQUAL
56490: IFFALSE 56512
56492: PUSH
56493: LD_OWVAR 2
56497: PPUSH
56498: LD_VAR 0 2
56502: PPUSH
56503: CALL_OW 81
56507: PUSH
56508: LD_INT 1
56510: NONEQUAL
56511: AND
56512: OR
56513: IFFALSE 56527
// begin result := true ;
56515: LD_ADDR_VAR 0 1
56519: PUSH
56520: LD_INT 1
56522: ST_TO_ADDR
// exit ;
56523: POP
56524: POP
56525: GO 56531
// end ;
56527: GO 56413
56529: POP
56530: POP
// end ;
56531: LD_VAR 0 1
56535: RET
// function CanWinLoose ; begin
56536: LD_INT 0
56538: PPUSH
// result := true ;
56539: LD_ADDR_VAR 0 1
56543: PUSH
56544: LD_INT 1
56546: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56547: CALL_OW 531
56551: IFFALSE 56563
56553: PUSH
56554: CALL_OW 519
56558: PUSH
56559: LD_INT 1
56561: GREATER
56562: AND
56563: IFFALSE 56573
// result := false ;
56565: LD_ADDR_VAR 0 1
56569: PUSH
56570: LD_INT 0
56572: ST_TO_ADDR
// end ;
56573: LD_VAR 0 1
56577: RET
// function HasPower ( i ) ; begin
56578: LD_INT 0
56580: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56581: LD_ADDR_VAR 0 2
56585: PUSH
56586: LD_INT 22
56588: PUSH
56589: LD_VAR 0 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 21
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 33
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 33
56623: PUSH
56624: LD_INT 5
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PPUSH
56641: CALL_OW 69
56645: ST_TO_ADDR
// end ; end_of_file end_of_file
56646: LD_VAR 0 2
56650: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56651: LD_VAR 0 1
56655: PUSH
56656: LD_INT 200
56658: DOUBLE
56659: GREATEREQUAL
56660: IFFALSE 56668
56662: LD_INT 299
56664: DOUBLE
56665: LESSEQUAL
56666: IFTRUE 56670
56668: GO 56702
56670: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56671: LD_VAR 0 1
56675: PPUSH
56676: LD_VAR 0 2
56680: PPUSH
56681: LD_VAR 0 3
56685: PPUSH
56686: LD_VAR 0 4
56690: PPUSH
56691: LD_VAR 0 5
56695: PPUSH
56696: CALL 57564 0 5
56700: GO 56779
56702: LD_INT 300
56704: DOUBLE
56705: GREATEREQUAL
56706: IFFALSE 56714
56708: LD_INT 399
56710: DOUBLE
56711: LESSEQUAL
56712: IFTRUE 56716
56714: GO 56778
56716: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56717: LD_VAR 0 1
56721: PPUSH
56722: LD_VAR 0 2
56726: PPUSH
56727: LD_VAR 0 3
56731: PPUSH
56732: LD_VAR 0 4
56736: PPUSH
56737: LD_VAR 0 5
56741: PPUSH
56742: LD_VAR 0 6
56746: PPUSH
56747: LD_VAR 0 7
56751: PPUSH
56752: LD_VAR 0 8
56756: PPUSH
56757: LD_VAR 0 9
56761: PPUSH
56762: LD_VAR 0 10
56766: PPUSH
56767: LD_VAR 0 11
56771: PPUSH
56772: CALL 63985 0 11
56776: GO 56779
56778: POP
// end ;
56779: PPOPN 11
56781: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56782: LD_VAR 0 1
56786: PPUSH
56787: LD_VAR 0 2
56791: PPUSH
56792: LD_VAR 0 3
56796: PPUSH
56797: LD_VAR 0 4
56801: PPUSH
56802: LD_VAR 0 5
56806: PPUSH
56807: CALL 56864 0 5
// end ; end_of_file
56811: PPOPN 5
56813: END
// export function SOS_UnitDestroyed ( un ) ; begin
56814: LD_INT 0
56816: PPUSH
// ComRadiation ( un ) ;
56817: LD_VAR 0 1
56821: PPUSH
56822: CALL 57984 0 1
// end ;
56826: LD_VAR 0 2
56830: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56831: LD_INT 0
56833: PPUSH
// ComRadiation ( un ) ;
56834: LD_VAR 0 1
56838: PPUSH
56839: CALL 57984 0 1
// end ;
56843: LD_VAR 0 2
56847: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56848: LD_INT 0
56850: PPUSH
// end ;
56851: LD_VAR 0 4
56855: RET
// export function SOS_Command ( cmd ) ; begin
56856: LD_INT 0
56858: PPUSH
// end ;
56859: LD_VAR 0 2
56863: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56864: LD_INT 0
56866: PPUSH
// end ;
56867: LD_VAR 0 6
56871: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56872: LD_INT 0
56874: PPUSH
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
// if not vehicle or not factory then
56879: LD_VAR 0 1
56883: NOT
56884: IFTRUE 56893
56886: PUSH
56887: LD_VAR 0 2
56891: NOT
56892: OR
56893: IFFALSE 56897
// exit ;
56895: GO 57559
// weapon := GetWeapon ( vehicle ) ;
56897: LD_ADDR_VAR 0 7
56901: PUSH
56902: LD_VAR 0 1
56906: PPUSH
56907: CALL_OW 264
56911: ST_TO_ADDR
// if weapon = ar_miner then
56912: LD_VAR 0 7
56916: PUSH
56917: LD_INT 81
56919: EQUAL
56920: IFFALSE 56977
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56922: LD_ADDR_EXP 56
56926: PUSH
56927: LD_EXP 56
56931: PPUSH
56932: LD_EXP 56
56936: PUSH
56937: LD_INT 1
56939: PLUS
56940: PPUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 1
56950: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56951: LD_ADDR_EXP 57
56955: PUSH
56956: LD_EXP 57
56960: PPUSH
56961: LD_EXP 57
56965: PUSH
56966: LD_INT 1
56968: PLUS
56969: PPUSH
56970: EMPTY
56971: PPUSH
56972: CALL_OW 1
56976: ST_TO_ADDR
// end ; if not factoryWaypoints then
56977: LD_EXP 59
56981: NOT
56982: IFFALSE 56986
// exit ;
56984: GO 57559
// for i := 1 to Count ( factoryWaypoints ) do
56986: LD_ADDR_VAR 0 4
56990: PUSH
56991: DOUBLE
56992: LD_INT 1
56994: DEC
56995: ST_TO_ADDR
56996: LD_EXP 59
57000: PPUSH
57001: CALL 5108 0 1
57005: PUSH
57006: FOR_TO
57007: IFFALSE 57557
// if factoryWaypoints [ i ] [ 2 ] = factory then
57009: LD_EXP 59
57013: PUSH
57014: LD_VAR 0 4
57018: ARRAY
57019: PUSH
57020: LD_INT 2
57022: ARRAY
57023: PUSH
57024: LD_VAR 0 2
57028: EQUAL
57029: IFFALSE 57555
// begin if GetControl ( vehicle ) = control_manual then
57031: LD_VAR 0 1
57035: PPUSH
57036: CALL_OW 263
57040: PUSH
57041: LD_INT 1
57043: EQUAL
57044: IFFALSE 57408
// begin driver := IsDrivenBy ( vehicle ) ;
57046: LD_ADDR_VAR 0 5
57050: PUSH
57051: LD_VAR 0 1
57055: PPUSH
57056: CALL_OW 311
57060: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57061: LD_VAR 0 5
57065: PUSH
57066: LD_EXP 60
57070: IN
57071: IFTRUE 57085
57073: PUSH
57074: LD_VAR 0 1
57078: PUSH
57079: LD_EXP 60
57083: IN
57084: OR
57085: IFFALSE 57091
// exit ;
57087: POP
57088: POP
57089: GO 57559
// if not HasTask ( driver ) then
57091: LD_VAR 0 5
57095: PPUSH
57096: CALL_OW 314
57100: NOT
57101: IFFALSE 57406
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57103: LD_ADDR_EXP 60
57107: PUSH
57108: LD_EXP 60
57112: PPUSH
57113: LD_VAR 0 5
57117: PPUSH
57118: CALL 41084 0 2
57122: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57123: LD_ADDR_EXP 60
57127: PUSH
57128: LD_EXP 60
57132: PPUSH
57133: LD_VAR 0 1
57137: PPUSH
57138: CALL 41084 0 2
57142: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57143: LD_ADDR_VAR 0 6
57147: PUSH
57148: LD_EXP 59
57152: PUSH
57153: LD_VAR 0 4
57157: ARRAY
57158: PUSH
57159: LD_INT 3
57161: ARRAY
57162: PPUSH
57163: LD_EXP 59
57167: PUSH
57168: LD_VAR 0 4
57172: ARRAY
57173: PUSH
57174: LD_INT 4
57176: ARRAY
57177: PPUSH
57178: CALL_OW 428
57182: ST_TO_ADDR
// if hex then
57183: LD_VAR 0 6
57187: IFFALSE 57205
// ComMoveUnit ( driver , hex ) else
57189: LD_VAR 0 5
57193: PPUSH
57194: LD_VAR 0 6
57198: PPUSH
57199: CALL_OW 112
57203: GO 57289
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57205: LD_VAR 0 1
57209: PPUSH
57210: LD_EXP 59
57214: PUSH
57215: LD_VAR 0 4
57219: ARRAY
57220: PUSH
57221: LD_INT 3
57223: ARRAY
57224: PPUSH
57225: LD_EXP 59
57229: PUSH
57230: LD_VAR 0 4
57234: ARRAY
57235: PUSH
57236: LD_INT 4
57238: ARRAY
57239: PPUSH
57240: CALL_OW 297
57244: PUSH
57245: LD_INT 0
57247: GREATER
57248: IFFALSE 57289
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57250: LD_VAR 0 5
57254: PPUSH
57255: LD_EXP 59
57259: PUSH
57260: LD_VAR 0 4
57264: ARRAY
57265: PUSH
57266: LD_INT 3
57268: ARRAY
57269: PPUSH
57270: LD_EXP 59
57274: PUSH
57275: LD_VAR 0 4
57279: ARRAY
57280: PUSH
57281: LD_INT 4
57283: ARRAY
57284: PPUSH
57285: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57289: LD_VAR 0 5
57293: PPUSH
57294: CALL_OW 181
// if Multiplayer then
57298: LD_OWVAR 4
57302: IFFALSE 57351
// begin repeat wait ( 10 ) ;
57304: LD_INT 10
57306: PPUSH
57307: CALL_OW 67
// until not IsInUnit ( driver ) ;
57311: LD_VAR 0 5
57315: PPUSH
57316: CALL_OW 310
57320: NOT
57321: IFFALSE 57304
// if not HasTask ( driver ) then
57323: LD_VAR 0 5
57327: PPUSH
57328: CALL_OW 314
57332: NOT
57333: IFFALSE 57349
// ComEnterUnit ( driver , factory ) ;
57335: LD_VAR 0 5
57339: PPUSH
57340: LD_VAR 0 2
57344: PPUSH
57345: CALL_OW 120
// end else
57349: GO 57365
// AddComEnterUnit ( driver , factory ) ;
57351: LD_VAR 0 5
57355: PPUSH
57356: LD_VAR 0 2
57360: PPUSH
57361: CALL_OW 180
// wait ( 0 0$1 ) ;
57365: LD_INT 35
57367: PPUSH
57368: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57372: LD_ADDR_EXP 60
57376: PUSH
57377: LD_EXP 60
57381: PUSH
57382: LD_VAR 0 5
57386: DIFF
57387: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57388: LD_ADDR_EXP 60
57392: PUSH
57393: LD_EXP 60
57397: PUSH
57398: LD_VAR 0 1
57402: DIFF
57403: ST_TO_ADDR
// break ;
57404: GO 57557
// end ; end else
57406: GO 57555
// if GetControl ( vehicle ) = control_remote then
57408: LD_VAR 0 1
57412: PPUSH
57413: CALL_OW 263
57417: PUSH
57418: LD_INT 2
57420: EQUAL
57421: IFFALSE 57507
// begin wait ( 0 0$2 ) ;
57423: LD_INT 70
57425: PPUSH
57426: CALL_OW 67
// repeat wait ( 10 ) ;
57430: LD_INT 10
57432: PPUSH
57433: CALL_OW 67
// Connect ( vehicle ) ;
57437: LD_VAR 0 1
57441: PPUSH
57442: CALL 11386 0 1
// until IsControledBy ( vehicle ) ;
57446: LD_VAR 0 1
57450: PPUSH
57451: CALL_OW 312
57455: IFFALSE 57430
// wait ( 10 ) ;
57457: LD_INT 10
57459: PPUSH
57460: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57464: LD_VAR 0 1
57468: PPUSH
57469: LD_EXP 59
57473: PUSH
57474: LD_VAR 0 4
57478: ARRAY
57479: PUSH
57480: LD_INT 3
57482: ARRAY
57483: PPUSH
57484: LD_EXP 59
57488: PUSH
57489: LD_VAR 0 4
57493: ARRAY
57494: PUSH
57495: LD_INT 4
57497: ARRAY
57498: PPUSH
57499: CALL_OW 111
// break ;
57503: GO 57557
// end else
57505: GO 57555
// begin wait ( 0 0$3 ) ;
57507: LD_INT 105
57509: PPUSH
57510: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57514: LD_VAR 0 1
57518: PPUSH
57519: LD_EXP 59
57523: PUSH
57524: LD_VAR 0 4
57528: ARRAY
57529: PUSH
57530: LD_INT 3
57532: ARRAY
57533: PPUSH
57534: LD_EXP 59
57538: PUSH
57539: LD_VAR 0 4
57543: ARRAY
57544: PUSH
57545: LD_INT 4
57547: ARRAY
57548: PPUSH
57549: CALL_OW 111
// break ;
57553: GO 57557
// end ; end ;
57555: GO 57006
57557: POP
57558: POP
// end ;
57559: LD_VAR 0 3
57563: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57564: LD_INT 0
57566: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57567: LD_VAR 0 1
57571: PUSH
57572: LD_INT 250
57574: EQUAL
57575: IFFALSE 57592
57577: PUSH
57578: LD_VAR 0 2
57582: PPUSH
57583: CALL_OW 264
57587: PUSH
57588: LD_INT 81
57590: EQUAL
57591: AND
57592: IFFALSE 57613
// MinerPlaceMine ( unit , x , y ) ;
57594: LD_VAR 0 2
57598: PPUSH
57599: LD_VAR 0 4
57603: PPUSH
57604: LD_VAR 0 5
57608: PPUSH
57609: CALL 60959 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57613: LD_VAR 0 1
57617: PUSH
57618: LD_INT 251
57620: EQUAL
57621: IFFALSE 57638
57623: PUSH
57624: LD_VAR 0 2
57628: PPUSH
57629: CALL_OW 264
57633: PUSH
57634: LD_INT 81
57636: EQUAL
57637: AND
57638: IFFALSE 57659
// MinerDetonateMine ( unit , x , y ) ;
57640: LD_VAR 0 2
57644: PPUSH
57645: LD_VAR 0 4
57649: PPUSH
57650: LD_VAR 0 5
57654: PPUSH
57655: CALL 61366 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57659: LD_VAR 0 1
57663: PUSH
57664: LD_INT 252
57666: EQUAL
57667: IFFALSE 57684
57669: PUSH
57670: LD_VAR 0 2
57674: PPUSH
57675: CALL_OW 264
57679: PUSH
57680: LD_INT 81
57682: EQUAL
57683: AND
57684: IFFALSE 57705
// MinerCreateMinefield ( unit , x , y ) ;
57686: LD_VAR 0 2
57690: PPUSH
57691: LD_VAR 0 4
57695: PPUSH
57696: LD_VAR 0 5
57700: PPUSH
57701: CALL 61598 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57705: LD_VAR 0 1
57709: PUSH
57710: LD_INT 253
57712: EQUAL
57713: IFFALSE 57730
57715: PUSH
57716: LD_VAR 0 2
57720: PPUSH
57721: CALL_OW 257
57725: PUSH
57726: LD_INT 5
57728: EQUAL
57729: AND
57730: IFFALSE 57751
// ComBinocular ( unit , x , y ) ;
57732: LD_VAR 0 2
57736: PPUSH
57737: LD_VAR 0 4
57741: PPUSH
57742: LD_VAR 0 5
57746: PPUSH
57747: CALL 61973 0 3
// if selectedUnit then
57751: LD_VAR 0 3
57755: IFFALSE 57815
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57757: LD_VAR 0 1
57761: PUSH
57762: LD_INT 254
57764: EQUAL
57765: IFFALSE 57782
57767: PUSH
57768: LD_VAR 0 2
57772: PPUSH
57773: CALL_OW 264
57777: PUSH
57778: LD_INT 99
57780: EQUAL
57781: AND
57782: IFFALSE 57799
57784: PUSH
57785: LD_VAR 0 3
57789: PPUSH
57790: CALL_OW 263
57794: PUSH
57795: LD_INT 3
57797: EQUAL
57798: AND
57799: IFFALSE 57815
// HackDestroyVehicle ( unit , selectedUnit ) ;
57801: LD_VAR 0 2
57805: PPUSH
57806: LD_VAR 0 3
57810: PPUSH
57811: CALL 60149 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57815: LD_VAR 0 1
57819: PUSH
57820: LD_INT 255
57822: EQUAL
57823: IFFALSE 57847
57825: PUSH
57826: LD_VAR 0 2
57830: PPUSH
57831: CALL_OW 264
57835: PUSH
57836: LD_INT 14
57838: PUSH
57839: LD_INT 53
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: IN
57846: AND
57847: IFFALSE 57865
57849: PUSH
57850: LD_VAR 0 4
57854: PPUSH
57855: LD_VAR 0 5
57859: PPUSH
57860: CALL_OW 488
57864: AND
57865: IFFALSE 57889
// CutTreeXYR ( unit , x , y , 12 ) ;
57867: LD_VAR 0 2
57871: PPUSH
57872: LD_VAR 0 4
57876: PPUSH
57877: LD_VAR 0 5
57881: PPUSH
57882: LD_INT 12
57884: PPUSH
57885: CALL 58080 0 4
// if cmd = 256 then
57889: LD_VAR 0 1
57893: PUSH
57894: LD_INT 256
57896: EQUAL
57897: IFFALSE 57918
// SetFactoryWaypoint ( unit , x , y ) ;
57899: LD_VAR 0 2
57903: PPUSH
57904: LD_VAR 0 4
57908: PPUSH
57909: LD_VAR 0 5
57913: PPUSH
57914: CALL 63993 0 3
// if cmd = 257 then
57918: LD_VAR 0 1
57922: PUSH
57923: LD_INT 257
57925: EQUAL
57926: IFFALSE 57947
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57928: LD_VAR 0 2
57932: PPUSH
57933: LD_VAR 0 4
57937: PPUSH
57938: LD_VAR 0 5
57942: PPUSH
57943: CALL 64489 0 3
// if cmd = 258 then
57947: LD_VAR 0 1
57951: PUSH
57952: LD_INT 258
57954: EQUAL
57955: IFFALSE 57979
// BurnTreeXYR ( unit , x , y , 8 ) ;
57957: LD_VAR 0 2
57961: PPUSH
57962: LD_VAR 0 4
57966: PPUSH
57967: LD_VAR 0 5
57971: PPUSH
57972: LD_INT 8
57974: PPUSH
57975: CALL 58502 0 4
// end ;
57979: LD_VAR 0 6
57983: RET
// export function ComRadiation ( un ) ; var eff ; begin
57984: LD_INT 0
57986: PPUSH
57987: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57988: LD_VAR 0 1
57992: PPUSH
57993: CALL_OW 264
57997: PUSH
57998: LD_INT 91
58000: NONEQUAL
58001: IFFALSE 58005
// exit ;
58003: GO 58075
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58005: LD_INT 68
58007: PPUSH
58008: LD_VAR 0 1
58012: PPUSH
58013: CALL_OW 255
58017: PPUSH
58018: CALL_OW 321
58022: PUSH
58023: LD_INT 2
58025: EQUAL
58026: IFFALSE 58038
// eff := 50 else
58028: LD_ADDR_VAR 0 3
58032: PUSH
58033: LD_INT 50
58035: ST_TO_ADDR
58036: GO 58046
// eff := 25 ;
58038: LD_ADDR_VAR 0 3
58042: PUSH
58043: LD_INT 25
58045: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58046: LD_VAR 0 1
58050: PPUSH
58051: CALL_OW 250
58055: PPUSH
58056: LD_VAR 0 1
58060: PPUSH
58061: CALL_OW 251
58065: PPUSH
58066: LD_VAR 0 3
58070: PPUSH
58071: CALL_OW 495
// end ;
58075: LD_VAR 0 2
58079: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58080: LD_INT 0
58082: PPUSH
58083: PPUSH
58084: PPUSH
58085: PPUSH
58086: PPUSH
58087: PPUSH
58088: PPUSH
58089: PPUSH
58090: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58091: LD_VAR 0 1
58095: PPUSH
58096: CALL_OW 302
58100: NOT
58101: IFTRUE 58120
58103: PUSH
58104: LD_VAR 0 2
58108: PPUSH
58109: LD_VAR 0 3
58113: PPUSH
58114: CALL_OW 488
58118: NOT
58119: OR
58120: IFTRUE 58129
58122: PUSH
58123: LD_VAR 0 4
58127: NOT
58128: OR
58129: IFFALSE 58133
// exit ;
58131: GO 58497
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 437
58142: PPUSH
58143: CALL 5108 0 1
58147: PUSH
58148: LD_INT 10
58150: GREATER
58151: IFFALSE 58155
// exit ;
58153: GO 58497
// list := [ ] ;
58155: LD_ADDR_VAR 0 13
58159: PUSH
58160: EMPTY
58161: ST_TO_ADDR
// if x - r < 0 then
58162: LD_VAR 0 2
58166: PUSH
58167: LD_VAR 0 4
58171: MINUS
58172: PUSH
58173: LD_INT 0
58175: LESS
58176: IFFALSE 58188
// min_x := 0 else
58178: LD_ADDR_VAR 0 7
58182: PUSH
58183: LD_INT 0
58185: ST_TO_ADDR
58186: GO 58204
// min_x := x - r ;
58188: LD_ADDR_VAR 0 7
58192: PUSH
58193: LD_VAR 0 2
58197: PUSH
58198: LD_VAR 0 4
58202: MINUS
58203: ST_TO_ADDR
// if y - r < 0 then
58204: LD_VAR 0 3
58208: PUSH
58209: LD_VAR 0 4
58213: MINUS
58214: PUSH
58215: LD_INT 0
58217: LESS
58218: IFFALSE 58230
// min_y := 0 else
58220: LD_ADDR_VAR 0 8
58224: PUSH
58225: LD_INT 0
58227: ST_TO_ADDR
58228: GO 58246
// min_y := y - r ;
58230: LD_ADDR_VAR 0 8
58234: PUSH
58235: LD_VAR 0 3
58239: PUSH
58240: LD_VAR 0 4
58244: MINUS
58245: ST_TO_ADDR
// max_x := x + r ;
58246: LD_ADDR_VAR 0 9
58250: PUSH
58251: LD_VAR 0 2
58255: PUSH
58256: LD_VAR 0 4
58260: PLUS
58261: ST_TO_ADDR
// max_y := y + r ;
58262: LD_ADDR_VAR 0 10
58266: PUSH
58267: LD_VAR 0 3
58271: PUSH
58272: LD_VAR 0 4
58276: PLUS
58277: ST_TO_ADDR
// for _x = min_x to max_x do
58278: LD_ADDR_VAR 0 11
58282: PUSH
58283: DOUBLE
58284: LD_VAR 0 7
58288: DEC
58289: ST_TO_ADDR
58290: LD_VAR 0 9
58294: PUSH
58295: FOR_TO
58296: IFFALSE 58415
// for _y = min_y to max_y do
58298: LD_ADDR_VAR 0 12
58302: PUSH
58303: DOUBLE
58304: LD_VAR 0 8
58308: DEC
58309: ST_TO_ADDR
58310: LD_VAR 0 10
58314: PUSH
58315: FOR_TO
58316: IFFALSE 58411
// begin if not ValidHex ( _x , _y ) then
58318: LD_VAR 0 11
58322: PPUSH
58323: LD_VAR 0 12
58327: PPUSH
58328: CALL_OW 488
58332: NOT
58333: IFFALSE 58337
// continue ;
58335: GO 58315
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58337: LD_VAR 0 11
58341: PPUSH
58342: LD_VAR 0 12
58346: PPUSH
58347: CALL_OW 351
58351: IFFALSE 58369
58353: PUSH
58354: LD_VAR 0 11
58358: PPUSH
58359: LD_VAR 0 12
58363: PPUSH
58364: CALL_OW 554
58368: AND
58369: IFFALSE 58409
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58371: LD_ADDR_VAR 0 13
58375: PUSH
58376: LD_VAR 0 13
58380: PPUSH
58381: LD_VAR 0 13
58385: PUSH
58386: LD_INT 1
58388: PLUS
58389: PPUSH
58390: LD_VAR 0 11
58394: PUSH
58395: LD_VAR 0 12
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PPUSH
58404: CALL_OW 2
58408: ST_TO_ADDR
// end ;
58409: GO 58315
58411: POP
58412: POP
58413: GO 58295
58415: POP
58416: POP
// if not list then
58417: LD_VAR 0 13
58421: NOT
58422: IFFALSE 58426
// exit ;
58424: GO 58497
// for i in list do
58426: LD_ADDR_VAR 0 6
58430: PUSH
58431: LD_VAR 0 13
58435: PUSH
58436: FOR_IN
58437: IFFALSE 58495
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58439: LD_VAR 0 1
58443: PPUSH
58444: LD_STRING M
58446: PUSH
58447: LD_VAR 0 6
58451: PUSH
58452: LD_INT 1
58454: ARRAY
58455: PUSH
58456: LD_VAR 0 6
58460: PUSH
58461: LD_INT 2
58463: ARRAY
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: PPUSH
58489: CALL_OW 447
58493: GO 58436
58495: POP
58496: POP
// end ;
58497: LD_VAR 0 5
58501: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58502: LD_INT 0
58504: PPUSH
58505: PPUSH
58506: PPUSH
58507: PPUSH
58508: PPUSH
58509: PPUSH
58510: PPUSH
58511: PPUSH
58512: PPUSH
58513: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58514: LD_VAR 0 1
58518: PPUSH
58519: CALL_OW 302
58523: NOT
58524: IFTRUE 58543
58526: PUSH
58527: LD_VAR 0 2
58531: PPUSH
58532: LD_VAR 0 3
58536: PPUSH
58537: CALL_OW 488
58541: NOT
58542: OR
58543: IFTRUE 58552
58545: PUSH
58546: LD_VAR 0 4
58550: NOT
58551: OR
58552: IFFALSE 58556
// exit ;
58554: GO 59095
// if Count ( GetTaskList ( flame ) ) > 10 then
58556: LD_VAR 0 1
58560: PPUSH
58561: CALL_OW 437
58565: PPUSH
58566: CALL 5108 0 1
58570: PUSH
58571: LD_INT 10
58573: GREATER
58574: IFFALSE 58578
// exit ;
58576: GO 59095
// list := [ ] ;
58578: LD_ADDR_VAR 0 13
58582: PUSH
58583: EMPTY
58584: ST_TO_ADDR
// if x - r < 0 then
58585: LD_VAR 0 2
58589: PUSH
58590: LD_VAR 0 4
58594: MINUS
58595: PUSH
58596: LD_INT 0
58598: LESS
58599: IFFALSE 58611
// min_x := 0 else
58601: LD_ADDR_VAR 0 7
58605: PUSH
58606: LD_INT 0
58608: ST_TO_ADDR
58609: GO 58627
// min_x := x - r ;
58611: LD_ADDR_VAR 0 7
58615: PUSH
58616: LD_VAR 0 2
58620: PUSH
58621: LD_VAR 0 4
58625: MINUS
58626: ST_TO_ADDR
// if y - r < 0 then
58627: LD_VAR 0 3
58631: PUSH
58632: LD_VAR 0 4
58636: MINUS
58637: PUSH
58638: LD_INT 0
58640: LESS
58641: IFFALSE 58653
// min_y := 0 else
58643: LD_ADDR_VAR 0 8
58647: PUSH
58648: LD_INT 0
58650: ST_TO_ADDR
58651: GO 58669
// min_y := y - r ;
58653: LD_ADDR_VAR 0 8
58657: PUSH
58658: LD_VAR 0 3
58662: PUSH
58663: LD_VAR 0 4
58667: MINUS
58668: ST_TO_ADDR
// max_x := x + r ;
58669: LD_ADDR_VAR 0 9
58673: PUSH
58674: LD_VAR 0 2
58678: PUSH
58679: LD_VAR 0 4
58683: PLUS
58684: ST_TO_ADDR
// max_y := y + r ;
58685: LD_ADDR_VAR 0 10
58689: PUSH
58690: LD_VAR 0 3
58694: PUSH
58695: LD_VAR 0 4
58699: PLUS
58700: ST_TO_ADDR
// for _x = min_x to max_x do
58701: LD_ADDR_VAR 0 11
58705: PUSH
58706: DOUBLE
58707: LD_VAR 0 7
58711: DEC
58712: ST_TO_ADDR
58713: LD_VAR 0 9
58717: PUSH
58718: FOR_TO
58719: IFFALSE 58838
// for _y = min_y to max_y do
58721: LD_ADDR_VAR 0 12
58725: PUSH
58726: DOUBLE
58727: LD_VAR 0 8
58731: DEC
58732: ST_TO_ADDR
58733: LD_VAR 0 10
58737: PUSH
58738: FOR_TO
58739: IFFALSE 58834
// begin if not ValidHex ( _x , _y ) then
58741: LD_VAR 0 11
58745: PPUSH
58746: LD_VAR 0 12
58750: PPUSH
58751: CALL_OW 488
58755: NOT
58756: IFFALSE 58760
// continue ;
58758: GO 58738
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58760: LD_VAR 0 11
58764: PPUSH
58765: LD_VAR 0 12
58769: PPUSH
58770: CALL_OW 351
58774: IFFALSE 58792
58776: PUSH
58777: LD_VAR 0 11
58781: PPUSH
58782: LD_VAR 0 12
58786: PPUSH
58787: CALL_OW 554
58791: AND
58792: IFFALSE 58832
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58794: LD_ADDR_VAR 0 13
58798: PUSH
58799: LD_VAR 0 13
58803: PPUSH
58804: LD_VAR 0 13
58808: PUSH
58809: LD_INT 1
58811: PLUS
58812: PPUSH
58813: LD_VAR 0 11
58817: PUSH
58818: LD_VAR 0 12
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PPUSH
58827: CALL_OW 2
58831: ST_TO_ADDR
// end ;
58832: GO 58738
58834: POP
58835: POP
58836: GO 58718
58838: POP
58839: POP
// if not list then
58840: LD_VAR 0 13
58844: NOT
58845: IFFALSE 58849
// exit ;
58847: GO 59095
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58849: LD_ADDR_VAR 0 13
58853: PUSH
58854: LD_VAR 0 1
58858: PPUSH
58859: LD_VAR 0 13
58863: PPUSH
58864: LD_INT 1
58866: PPUSH
58867: LD_INT 1
58869: PPUSH
58870: CALL 8514 0 4
58874: ST_TO_ADDR
// ComStop ( flame ) ;
58875: LD_VAR 0 1
58879: PPUSH
58880: CALL_OW 141
// for i in list do
58884: LD_ADDR_VAR 0 6
58888: PUSH
58889: LD_VAR 0 13
58893: PUSH
58894: FOR_IN
58895: IFFALSE 58926
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58897: LD_VAR 0 1
58901: PPUSH
58902: LD_VAR 0 6
58906: PUSH
58907: LD_INT 1
58909: ARRAY
58910: PPUSH
58911: LD_VAR 0 6
58915: PUSH
58916: LD_INT 2
58918: ARRAY
58919: PPUSH
58920: CALL_OW 176
58924: GO 58894
58926: POP
58927: POP
// repeat wait ( 0 0$1 ) ;
58928: LD_INT 35
58930: PPUSH
58931: CALL_OW 67
// task := GetTaskList ( flame ) ;
58935: LD_ADDR_VAR 0 14
58939: PUSH
58940: LD_VAR 0 1
58944: PPUSH
58945: CALL_OW 437
58949: ST_TO_ADDR
// if not task then
58950: LD_VAR 0 14
58954: NOT
58955: IFFALSE 58959
// exit ;
58957: GO 59095
// if task [ 1 ] [ 1 ] <> | then
58959: LD_VAR 0 14
58963: PUSH
58964: LD_INT 1
58966: ARRAY
58967: PUSH
58968: LD_INT 1
58970: ARRAY
58971: PUSH
58972: LD_STRING |
58974: NONEQUAL
58975: IFFALSE 58979
// exit ;
58977: GO 59095
// _x := task [ 1 ] [ 2 ] ;
58979: LD_ADDR_VAR 0 11
58983: PUSH
58984: LD_VAR 0 14
58988: PUSH
58989: LD_INT 1
58991: ARRAY
58992: PUSH
58993: LD_INT 2
58995: ARRAY
58996: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58997: LD_ADDR_VAR 0 12
59001: PUSH
59002: LD_VAR 0 14
59006: PUSH
59007: LD_INT 1
59009: ARRAY
59010: PUSH
59011: LD_INT 3
59013: ARRAY
59014: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59015: LD_VAR 0 11
59019: PPUSH
59020: LD_VAR 0 12
59024: PPUSH
59025: CALL_OW 351
59029: NOT
59030: IFTRUE 59049
59032: PUSH
59033: LD_VAR 0 11
59037: PPUSH
59038: LD_VAR 0 12
59042: PPUSH
59043: CALL_OW 554
59047: NOT
59048: OR
59049: IFFALSE 59083
// begin task := Delete ( task , 1 ) ;
59051: LD_ADDR_VAR 0 14
59055: PUSH
59056: LD_VAR 0 14
59060: PPUSH
59061: LD_INT 1
59063: PPUSH
59064: CALL_OW 3
59068: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59069: LD_VAR 0 1
59073: PPUSH
59074: LD_VAR 0 14
59078: PPUSH
59079: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59083: LD_VAR 0 1
59087: PPUSH
59088: CALL_OW 314
59092: NOT
59093: IFFALSE 58928
// end ;
59095: LD_VAR 0 5
59099: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59100: LD_EXP 49
59104: NOT
59105: IFFALSE 59155
59107: GO 59109
59109: DISABLE
// begin initHack := true ;
59110: LD_ADDR_EXP 49
59114: PUSH
59115: LD_INT 1
59117: ST_TO_ADDR
// hackTanks := [ ] ;
59118: LD_ADDR_EXP 50
59122: PUSH
59123: EMPTY
59124: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59125: LD_ADDR_EXP 51
59129: PUSH
59130: EMPTY
59131: ST_TO_ADDR
// hackLimit := 3 ;
59132: LD_ADDR_EXP 52
59136: PUSH
59137: LD_INT 3
59139: ST_TO_ADDR
// hackDist := 12 ;
59140: LD_ADDR_EXP 53
59144: PUSH
59145: LD_INT 12
59147: ST_TO_ADDR
// hackCounter := [ ] ;
59148: LD_ADDR_EXP 54
59152: PUSH
59153: EMPTY
59154: ST_TO_ADDR
// end ;
59155: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59156: LD_EXP 49
59160: IFFALSE 59178
59162: PUSH
59163: LD_INT 34
59165: PUSH
59166: LD_INT 99
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PPUSH
59173: CALL_OW 69
59177: AND
59178: IFFALSE 59431
59180: GO 59182
59182: DISABLE
59183: LD_INT 0
59185: PPUSH
59186: PPUSH
// begin enable ;
59187: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59188: LD_ADDR_VAR 0 1
59192: PUSH
59193: LD_INT 34
59195: PUSH
59196: LD_INT 99
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PPUSH
59203: CALL_OW 69
59207: PUSH
59208: FOR_IN
59209: IFFALSE 59429
// begin if not i in hackTanks then
59211: LD_VAR 0 1
59215: PUSH
59216: LD_EXP 50
59220: IN
59221: NOT
59222: IFFALSE 59305
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59224: LD_ADDR_EXP 50
59228: PUSH
59229: LD_EXP 50
59233: PPUSH
59234: LD_EXP 50
59238: PUSH
59239: LD_INT 1
59241: PLUS
59242: PPUSH
59243: LD_VAR 0 1
59247: PPUSH
59248: CALL_OW 1
59252: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59253: LD_ADDR_EXP 51
59257: PUSH
59258: LD_EXP 51
59262: PPUSH
59263: LD_EXP 51
59267: PUSH
59268: LD_INT 1
59270: PLUS
59271: PPUSH
59272: EMPTY
59273: PPUSH
59274: CALL_OW 1
59278: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59279: LD_ADDR_EXP 54
59283: PUSH
59284: LD_EXP 54
59288: PPUSH
59289: LD_EXP 54
59293: PUSH
59294: LD_INT 1
59296: PLUS
59297: PPUSH
59298: EMPTY
59299: PPUSH
59300: CALL_OW 1
59304: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59305: LD_VAR 0 1
59309: PPUSH
59310: CALL_OW 302
59314: NOT
59315: IFFALSE 59328
// begin HackUnlinkAll ( i ) ;
59317: LD_VAR 0 1
59321: PPUSH
59322: CALL 59434 0 1
// continue ;
59326: GO 59208
// end ; HackCheckCapturedStatus ( i ) ;
59328: LD_VAR 0 1
59332: PPUSH
59333: CALL 59879 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59337: LD_ADDR_VAR 0 2
59341: PUSH
59342: LD_INT 81
59344: PUSH
59345: LD_VAR 0 1
59349: PPUSH
59350: CALL_OW 255
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 33
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 91
59371: PUSH
59372: LD_VAR 0 1
59376: PUSH
59377: LD_EXP 53
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 50
59389: PUSH
59390: EMPTY
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: PPUSH
59399: CALL_OW 69
59403: ST_TO_ADDR
// if not tmp then
59404: LD_VAR 0 2
59408: NOT
59409: IFFALSE 59413
// continue ;
59411: GO 59208
// HackLink ( i , tmp ) ;
59413: LD_VAR 0 1
59417: PPUSH
59418: LD_VAR 0 2
59422: PPUSH
59423: CALL 59570 0 2
// end ;
59427: GO 59208
59429: POP
59430: POP
// end ;
59431: PPOPN 2
59433: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59434: LD_INT 0
59436: PPUSH
59437: PPUSH
59438: PPUSH
// if not hack in hackTanks then
59439: LD_VAR 0 1
59443: PUSH
59444: LD_EXP 50
59448: IN
59449: NOT
59450: IFFALSE 59454
// exit ;
59452: GO 59565
// index := GetElementIndex ( hackTanks , hack ) ;
59454: LD_ADDR_VAR 0 4
59458: PUSH
59459: LD_EXP 50
59463: PPUSH
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL 7809 0 2
59473: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59474: LD_EXP 51
59478: PUSH
59479: LD_VAR 0 4
59483: ARRAY
59484: IFFALSE 59565
// begin for i in hackTanksCaptured [ index ] do
59486: LD_ADDR_VAR 0 3
59490: PUSH
59491: LD_EXP 51
59495: PUSH
59496: LD_VAR 0 4
59500: ARRAY
59501: PUSH
59502: FOR_IN
59503: IFFALSE 59529
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59505: LD_VAR 0 3
59509: PUSH
59510: LD_INT 1
59512: ARRAY
59513: PPUSH
59514: LD_VAR 0 3
59518: PUSH
59519: LD_INT 2
59521: ARRAY
59522: PPUSH
59523: CALL_OW 235
59527: GO 59502
59529: POP
59530: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59531: LD_ADDR_EXP 51
59535: PUSH
59536: LD_EXP 51
59540: PPUSH
59541: LD_VAR 0 4
59545: PPUSH
59546: EMPTY
59547: PPUSH
59548: CALL_OW 1
59552: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_INT 0
59560: PPUSH
59561: CALL_OW 505
// end ; end ;
59565: LD_VAR 0 2
59569: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59570: LD_INT 0
59572: PPUSH
59573: PPUSH
59574: PPUSH
// if not hack in hackTanks or not vehicles then
59575: LD_VAR 0 1
59579: PUSH
59580: LD_EXP 50
59584: IN
59585: NOT
59586: IFTRUE 59595
59588: PUSH
59589: LD_VAR 0 2
59593: NOT
59594: OR
59595: IFFALSE 59599
// exit ;
59597: GO 59874
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59599: LD_ADDR_VAR 0 2
59603: PUSH
59604: LD_VAR 0 1
59608: PPUSH
59609: LD_VAR 0 2
59613: PPUSH
59614: LD_INT 1
59616: PPUSH
59617: LD_INT 1
59619: PPUSH
59620: CALL 8461 0 4
59624: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59625: LD_ADDR_VAR 0 5
59629: PUSH
59630: LD_EXP 50
59634: PPUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: CALL 7809 0 2
59644: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59645: LD_EXP 51
59649: PUSH
59650: LD_VAR 0 5
59654: ARRAY
59655: PUSH
59656: LD_EXP 52
59660: LESS
59661: IFFALSE 59850
// begin for i := 1 to vehicles do
59663: LD_ADDR_VAR 0 4
59667: PUSH
59668: DOUBLE
59669: LD_INT 1
59671: DEC
59672: ST_TO_ADDR
59673: LD_VAR 0 2
59677: PUSH
59678: FOR_TO
59679: IFFALSE 59848
// begin if hackTanksCaptured [ index ] = hackLimit then
59681: LD_EXP 51
59685: PUSH
59686: LD_VAR 0 5
59690: ARRAY
59691: PUSH
59692: LD_EXP 52
59696: EQUAL
59697: IFFALSE 59701
// break ;
59699: GO 59848
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59701: LD_ADDR_EXP 54
59705: PUSH
59706: LD_EXP 54
59710: PPUSH
59711: LD_VAR 0 5
59715: PPUSH
59716: LD_EXP 54
59720: PUSH
59721: LD_VAR 0 5
59725: ARRAY
59726: PUSH
59727: LD_INT 1
59729: PLUS
59730: PPUSH
59731: CALL_OW 1
59735: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59736: LD_ADDR_EXP 51
59740: PUSH
59741: LD_EXP 51
59745: PPUSH
59746: LD_VAR 0 5
59750: PUSH
59751: LD_EXP 51
59755: PUSH
59756: LD_VAR 0 5
59760: ARRAY
59761: PUSH
59762: LD_INT 1
59764: PLUS
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PPUSH
59770: LD_VAR 0 2
59774: PUSH
59775: LD_VAR 0 4
59779: ARRAY
59780: PUSH
59781: LD_VAR 0 2
59785: PUSH
59786: LD_VAR 0 4
59790: ARRAY
59791: PPUSH
59792: CALL_OW 255
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PPUSH
59801: CALL 8026 0 3
59805: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59806: LD_VAR 0 2
59810: PUSH
59811: LD_VAR 0 4
59815: ARRAY
59816: PPUSH
59817: LD_VAR 0 1
59821: PPUSH
59822: CALL_OW 255
59826: PPUSH
59827: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59831: LD_VAR 0 2
59835: PUSH
59836: LD_VAR 0 4
59840: ARRAY
59841: PPUSH
59842: CALL_OW 141
// end ;
59846: GO 59678
59848: POP
59849: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59850: LD_VAR 0 1
59854: PPUSH
59855: LD_EXP 51
59859: PUSH
59860: LD_VAR 0 5
59864: ARRAY
59865: PUSH
59866: LD_INT 0
59868: PLUS
59869: PPUSH
59870: CALL_OW 505
// end ;
59874: LD_VAR 0 3
59878: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59879: LD_INT 0
59881: PPUSH
59882: PPUSH
59883: PPUSH
59884: PPUSH
// if not hack in hackTanks then
59885: LD_VAR 0 1
59889: PUSH
59890: LD_EXP 50
59894: IN
59895: NOT
59896: IFFALSE 59900
// exit ;
59898: GO 60144
// index := GetElementIndex ( hackTanks , hack ) ;
59900: LD_ADDR_VAR 0 4
59904: PUSH
59905: LD_EXP 50
59909: PPUSH
59910: LD_VAR 0 1
59914: PPUSH
59915: CALL 7809 0 2
59919: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59920: LD_ADDR_VAR 0 3
59924: PUSH
59925: DOUBLE
59926: LD_EXP 51
59930: PUSH
59931: LD_VAR 0 4
59935: ARRAY
59936: INC
59937: ST_TO_ADDR
59938: LD_INT 1
59940: PUSH
59941: FOR_DOWNTO
59942: IFFALSE 60118
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59944: LD_ADDR_VAR 0 5
59948: PUSH
59949: LD_EXP 51
59953: PUSH
59954: LD_VAR 0 4
59958: ARRAY
59959: PUSH
59960: LD_VAR 0 3
59964: ARRAY
59965: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59966: LD_VAR 0 5
59970: PUSH
59971: LD_INT 1
59973: ARRAY
59974: PPUSH
59975: CALL_OW 302
59979: NOT
59980: IFTRUE 60008
59982: PUSH
59983: LD_VAR 0 5
59987: PUSH
59988: LD_INT 1
59990: ARRAY
59991: PPUSH
59992: CALL_OW 255
59996: PUSH
59997: LD_VAR 0 1
60001: PPUSH
60002: CALL_OW 255
60006: NONEQUAL
60007: OR
60008: IFFALSE 60116
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60010: LD_VAR 0 5
60014: PUSH
60015: LD_INT 1
60017: ARRAY
60018: PPUSH
60019: CALL_OW 305
60023: IFFALSE 60051
60025: PUSH
60026: LD_VAR 0 5
60030: PUSH
60031: LD_INT 1
60033: ARRAY
60034: PPUSH
60035: CALL_OW 255
60039: PUSH
60040: LD_VAR 0 1
60044: PPUSH
60045: CALL_OW 255
60049: EQUAL
60050: AND
60051: IFFALSE 60075
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60053: LD_VAR 0 5
60057: PUSH
60058: LD_INT 1
60060: ARRAY
60061: PPUSH
60062: LD_VAR 0 5
60066: PUSH
60067: LD_INT 2
60069: ARRAY
60070: PPUSH
60071: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60075: LD_ADDR_EXP 51
60079: PUSH
60080: LD_EXP 51
60084: PPUSH
60085: LD_VAR 0 4
60089: PPUSH
60090: LD_EXP 51
60094: PUSH
60095: LD_VAR 0 4
60099: ARRAY
60100: PPUSH
60101: LD_VAR 0 3
60105: PPUSH
60106: CALL_OW 3
60110: PPUSH
60111: CALL_OW 1
60115: ST_TO_ADDR
// end ; end ;
60116: GO 59941
60118: POP
60119: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60120: LD_VAR 0 1
60124: PPUSH
60125: LD_EXP 51
60129: PUSH
60130: LD_VAR 0 4
60134: ARRAY
60135: PUSH
60136: LD_INT 0
60138: PLUS
60139: PPUSH
60140: CALL_OW 505
// end ;
60144: LD_VAR 0 2
60148: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60149: LD_INT 0
60151: PPUSH
60152: PPUSH
60153: PPUSH
60154: PPUSH
// if not hack in hackTanks then
60155: LD_VAR 0 1
60159: PUSH
60160: LD_EXP 50
60164: IN
60165: NOT
60166: IFFALSE 60170
// exit ;
60168: GO 60255
// index := GetElementIndex ( hackTanks , hack ) ;
60170: LD_ADDR_VAR 0 5
60174: PUSH
60175: LD_EXP 50
60179: PPUSH
60180: LD_VAR 0 1
60184: PPUSH
60185: CALL 7809 0 2
60189: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60190: LD_ADDR_VAR 0 4
60194: PUSH
60195: DOUBLE
60196: LD_INT 1
60198: DEC
60199: ST_TO_ADDR
60200: LD_EXP 51
60204: PUSH
60205: LD_VAR 0 5
60209: ARRAY
60210: PUSH
60211: FOR_TO
60212: IFFALSE 60253
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60214: LD_EXP 51
60218: PUSH
60219: LD_VAR 0 5
60223: ARRAY
60224: PUSH
60225: LD_VAR 0 4
60229: ARRAY
60230: PUSH
60231: LD_INT 1
60233: ARRAY
60234: PUSH
60235: LD_VAR 0 2
60239: EQUAL
60240: IFFALSE 60251
// KillUnit ( vehicle ) ;
60242: LD_VAR 0 2
60246: PPUSH
60247: CALL_OW 66
60251: GO 60211
60253: POP
60254: POP
// end ;
60255: LD_VAR 0 3
60259: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60260: LD_EXP 55
60264: NOT
60265: IFFALSE 60398
60267: GO 60269
60269: DISABLE
60270: LD_INT 0
60272: PPUSH
// begin initMiner := true ;
60273: LD_ADDR_EXP 55
60277: PUSH
60278: LD_INT 1
60280: ST_TO_ADDR
// minersList := [ ] ;
60281: LD_ADDR_EXP 56
60285: PUSH
60286: EMPTY
60287: ST_TO_ADDR
// minerMinesList := [ ] ;
60288: LD_ADDR_EXP 57
60292: PUSH
60293: EMPTY
60294: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60295: LD_ADDR_EXP 58
60299: PUSH
60300: LD_INT 10
60302: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60303: LD_ADDR_VAR 0 1
60307: PUSH
60308: LD_INT 34
60310: PUSH
60311: LD_INT 81
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PPUSH
60318: CALL_OW 69
60322: PUSH
60323: FOR_IN
60324: IFFALSE 60396
// begin if not i in minersList then
60326: LD_VAR 0 1
60330: PUSH
60331: LD_EXP 56
60335: IN
60336: NOT
60337: IFFALSE 60394
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60339: LD_ADDR_EXP 56
60343: PUSH
60344: LD_EXP 56
60348: PPUSH
60349: LD_EXP 56
60353: PUSH
60354: LD_INT 1
60356: PLUS
60357: PPUSH
60358: LD_VAR 0 1
60362: PPUSH
60363: CALL_OW 1
60367: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60368: LD_ADDR_EXP 57
60372: PUSH
60373: LD_EXP 57
60377: PPUSH
60378: LD_EXP 57
60382: PUSH
60383: LD_INT 1
60385: PLUS
60386: PPUSH
60387: EMPTY
60388: PPUSH
60389: CALL_OW 1
60393: ST_TO_ADDR
// end end ;
60394: GO 60323
60396: POP
60397: POP
// end ;
60398: PPOPN 1
60400: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60401: LD_EXP 55
60405: IFFALSE 60436
60407: PUSH
60408: LD_EXP 57
60412: PPUSH
60413: CALL 5108 0 1
60417: IFTRUE 60435
60419: PUSH
60420: LD_INT 34
60422: PUSH
60423: LD_INT 81
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PPUSH
60430: CALL_OW 69
60434: OR
60435: AND
60436: IFFALSE 60956
60438: GO 60440
60440: DISABLE
60441: LD_INT 0
60443: PPUSH
60444: PPUSH
60445: PPUSH
60446: PPUSH
// begin enable ;
60447: ENABLE
// for i := minerMinesList downto 1 do
60448: LD_ADDR_VAR 0 1
60452: PUSH
60453: DOUBLE
60454: LD_EXP 57
60458: INC
60459: ST_TO_ADDR
60460: LD_INT 1
60462: PUSH
60463: FOR_DOWNTO
60464: IFFALSE 60954
// begin side := GetSide ( minersList [ i ] ) ;
60466: LD_ADDR_VAR 0 3
60470: PUSH
60471: LD_EXP 56
60475: PUSH
60476: LD_VAR 0 1
60480: ARRAY
60481: PPUSH
60482: CALL_OW 255
60486: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60487: LD_EXP 56
60491: PUSH
60492: LD_VAR 0 1
60496: ARRAY
60497: PPUSH
60498: CALL_OW 300
60502: IFFALSE 60523
60504: PUSH
60505: LD_VAR 0 3
60509: PUSH
60510: LD_OWVAR 2
60514: PUSH
60515: LD_INT 9
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: IN
60522: AND
60523: IFFALSE 60556
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60525: LD_EXP 56
60529: PUSH
60530: LD_VAR 0 1
60534: ARRAY
60535: PPUSH
60536: LD_EXP 57
60540: PUSH
60541: LD_VAR 0 1
60545: ARRAY
60546: PPUSH
60547: CALL 5108 0 1
60551: PPUSH
60552: CALL_OW 505
// if not minerMinesList [ i ] then
60556: LD_EXP 57
60560: PUSH
60561: LD_VAR 0 1
60565: ARRAY
60566: NOT
60567: IFFALSE 60571
// continue ;
60569: GO 60463
// for j := minerMinesList [ i ] downto 1 do
60571: LD_ADDR_VAR 0 2
60575: PUSH
60576: DOUBLE
60577: LD_EXP 57
60581: PUSH
60582: LD_VAR 0 1
60586: ARRAY
60587: INC
60588: ST_TO_ADDR
60589: LD_INT 1
60591: PUSH
60592: FOR_DOWNTO
60593: IFFALSE 60950
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60595: LD_EXP 56
60599: PUSH
60600: LD_VAR 0 1
60604: ARRAY
60605: PPUSH
60606: CALL_OW 301
60610: IFTRUE 60630
60612: PUSH
60613: LD_EXP 56
60617: PUSH
60618: LD_VAR 0 1
60622: ARRAY
60623: PPUSH
60624: CALL_OW 305
60628: NOT
60629: OR
60630: IFFALSE 60721
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60632: LD_EXP 57
60636: PUSH
60637: LD_VAR 0 1
60641: ARRAY
60642: PUSH
60643: LD_VAR 0 2
60647: ARRAY
60648: PUSH
60649: LD_INT 1
60651: ARRAY
60652: PPUSH
60653: LD_EXP 57
60657: PUSH
60658: LD_VAR 0 1
60662: ARRAY
60663: PUSH
60664: LD_VAR 0 2
60668: ARRAY
60669: PUSH
60670: LD_INT 2
60672: ARRAY
60673: PPUSH
60674: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60678: LD_ADDR_EXP 57
60682: PUSH
60683: LD_EXP 57
60687: PPUSH
60688: LD_VAR 0 1
60692: PPUSH
60693: LD_EXP 57
60697: PUSH
60698: LD_VAR 0 1
60702: ARRAY
60703: PPUSH
60704: LD_VAR 0 2
60708: PPUSH
60709: CALL_OW 3
60713: PPUSH
60714: CALL_OW 1
60718: ST_TO_ADDR
// continue ;
60719: GO 60592
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60721: LD_ADDR_VAR 0 4
60725: PUSH
60726: LD_EXP 57
60730: PUSH
60731: LD_VAR 0 1
60735: ARRAY
60736: PUSH
60737: LD_VAR 0 2
60741: ARRAY
60742: PUSH
60743: LD_INT 1
60745: ARRAY
60746: PPUSH
60747: LD_EXP 57
60751: PUSH
60752: LD_VAR 0 1
60756: ARRAY
60757: PUSH
60758: LD_VAR 0 2
60762: ARRAY
60763: PUSH
60764: LD_INT 2
60766: ARRAY
60767: PPUSH
60768: CALL_OW 428
60772: ST_TO_ADDR
// if not tmp then
60773: LD_VAR 0 4
60777: NOT
60778: IFFALSE 60782
// continue ;
60780: GO 60592
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60782: LD_VAR 0 4
60786: PUSH
60787: LD_INT 81
60789: PUSH
60790: LD_VAR 0 3
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PPUSH
60799: CALL_OW 69
60803: IN
60804: IFFALSE 60854
60806: PUSH
60807: LD_EXP 57
60811: PUSH
60812: LD_VAR 0 1
60816: ARRAY
60817: PUSH
60818: LD_VAR 0 2
60822: ARRAY
60823: PUSH
60824: LD_INT 1
60826: ARRAY
60827: PPUSH
60828: LD_EXP 57
60832: PUSH
60833: LD_VAR 0 1
60837: ARRAY
60838: PUSH
60839: LD_VAR 0 2
60843: ARRAY
60844: PUSH
60845: LD_INT 2
60847: ARRAY
60848: PPUSH
60849: CALL_OW 458
60853: AND
60854: IFFALSE 60948
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60856: LD_EXP 57
60860: PUSH
60861: LD_VAR 0 1
60865: ARRAY
60866: PUSH
60867: LD_VAR 0 2
60871: ARRAY
60872: PUSH
60873: LD_INT 1
60875: ARRAY
60876: PPUSH
60877: LD_EXP 57
60881: PUSH
60882: LD_VAR 0 1
60886: ARRAY
60887: PUSH
60888: LD_VAR 0 2
60892: ARRAY
60893: PUSH
60894: LD_INT 2
60896: ARRAY
60897: PPUSH
60898: LD_VAR 0 3
60902: PPUSH
60903: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60907: LD_ADDR_EXP 57
60911: PUSH
60912: LD_EXP 57
60916: PPUSH
60917: LD_VAR 0 1
60921: PPUSH
60922: LD_EXP 57
60926: PUSH
60927: LD_VAR 0 1
60931: ARRAY
60932: PPUSH
60933: LD_VAR 0 2
60937: PPUSH
60938: CALL_OW 3
60942: PPUSH
60943: CALL_OW 1
60947: ST_TO_ADDR
// end ; end ;
60948: GO 60592
60950: POP
60951: POP
// end ;
60952: GO 60463
60954: POP
60955: POP
// end ;
60956: PPOPN 4
60958: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60959: LD_INT 0
60961: PPUSH
60962: PPUSH
60963: PPUSH
60964: PPUSH
// result := false ;
60965: LD_ADDR_VAR 0 4
60969: PUSH
60970: LD_INT 0
60972: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60973: LD_VAR 0 1
60977: PPUSH
60978: CALL_OW 264
60982: PUSH
60983: LD_INT 81
60985: EQUAL
60986: NOT
60987: IFFALSE 60991
// exit ;
60989: GO 61361
// side := GetSide ( unit ) ;
60991: LD_ADDR_VAR 0 6
60995: PUSH
60996: LD_VAR 0 1
61000: PPUSH
61001: CALL_OW 255
61005: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61006: LD_ADDR_VAR 0 5
61010: PUSH
61011: LD_EXP 56
61015: PPUSH
61016: LD_VAR 0 1
61020: PPUSH
61021: CALL 7809 0 2
61025: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61026: LD_EXP 57
61030: PUSH
61031: LD_VAR 0 5
61035: ARRAY
61036: PUSH
61037: LD_EXP 58
61041: GREATEREQUAL
61042: IFFALSE 61046
// exit ;
61044: GO 61361
// ComMoveXY ( unit , x , y ) ;
61046: LD_VAR 0 1
61050: PPUSH
61051: LD_VAR 0 2
61055: PPUSH
61056: LD_VAR 0 3
61060: PPUSH
61061: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61065: LD_INT 35
61067: PPUSH
61068: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61072: LD_VAR 0 1
61076: PPUSH
61077: LD_VAR 0 2
61081: PPUSH
61082: LD_VAR 0 3
61086: PPUSH
61087: CALL 39865 0 3
61091: NOT
61092: IFFALSE 61105
61094: PUSH
61095: LD_VAR 0 1
61099: PPUSH
61100: CALL_OW 314
61104: AND
61105: IFFALSE 61109
// exit ;
61107: GO 61361
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61109: LD_VAR 0 2
61113: PPUSH
61114: LD_VAR 0 3
61118: PPUSH
61119: CALL_OW 428
61123: PUSH
61124: LD_VAR 0 1
61128: EQUAL
61129: IFFALSE 61143
61131: PUSH
61132: LD_VAR 0 1
61136: PPUSH
61137: CALL_OW 314
61141: NOT
61142: AND
61143: IFFALSE 61065
// if MineAtPos ( x , y ) then
61145: LD_VAR 0 2
61149: PPUSH
61150: LD_VAR 0 3
61154: PPUSH
61155: CALL_OW 458
61159: IFFALSE 61163
// exit ;
61161: GO 61361
// if your_side = side then
61163: LD_OWVAR 2
61167: PUSH
61168: LD_VAR 0 6
61172: EQUAL
61173: IFFALSE 61192
// PlaySoundXY ( x , y , PlantMine ) ;
61175: LD_VAR 0 2
61179: PPUSH
61180: LD_VAR 0 3
61184: PPUSH
61185: LD_STRING PlantMine
61187: PPUSH
61188: CALL_OW 366
// repeat wait ( 1 ) ;
61192: LD_INT 1
61194: PPUSH
61195: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61199: LD_VAR 0 2
61203: PPUSH
61204: LD_VAR 0 3
61208: PPUSH
61209: LD_VAR 0 6
61213: PPUSH
61214: LD_INT 0
61216: PPUSH
61217: CALL_OW 454
61221: IFFALSE 61192
// if MineAtPos ( x , y ) then
61223: LD_VAR 0 2
61227: PPUSH
61228: LD_VAR 0 3
61232: PPUSH
61233: CALL_OW 458
61237: IFFALSE 61353
// begin for i in minerMinesList [ index ] do
61239: LD_ADDR_VAR 0 7
61243: PUSH
61244: LD_EXP 57
61248: PUSH
61249: LD_VAR 0 5
61253: ARRAY
61254: PUSH
61255: FOR_IN
61256: IFFALSE 61298
// if i [ 1 ] = x and i [ 2 ] = y then
61258: LD_VAR 0 7
61262: PUSH
61263: LD_INT 1
61265: ARRAY
61266: PUSH
61267: LD_VAR 0 2
61271: EQUAL
61272: IFFALSE 61290
61274: PUSH
61275: LD_VAR 0 7
61279: PUSH
61280: LD_INT 2
61282: ARRAY
61283: PUSH
61284: LD_VAR 0 3
61288: EQUAL
61289: AND
61290: IFFALSE 61296
// exit ;
61292: POP
61293: POP
61294: GO 61361
61296: GO 61255
61298: POP
61299: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61300: LD_ADDR_EXP 57
61304: PUSH
61305: LD_EXP 57
61309: PPUSH
61310: LD_VAR 0 5
61314: PUSH
61315: LD_EXP 57
61319: PUSH
61320: LD_VAR 0 5
61324: ARRAY
61325: PUSH
61326: LD_INT 1
61328: PLUS
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PPUSH
61334: LD_VAR 0 2
61338: PUSH
61339: LD_VAR 0 3
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PPUSH
61348: CALL 8026 0 3
61352: ST_TO_ADDR
// end ; result := true ;
61353: LD_ADDR_VAR 0 4
61357: PUSH
61358: LD_INT 1
61360: ST_TO_ADDR
// end ;
61361: LD_VAR 0 4
61365: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61366: LD_INT 0
61368: PPUSH
61369: PPUSH
61370: PPUSH
// if not unit in minersList then
61371: LD_VAR 0 1
61375: PUSH
61376: LD_EXP 56
61380: IN
61381: NOT
61382: IFFALSE 61386
// exit ;
61384: GO 61593
// index := GetElementIndex ( minersList , unit ) ;
61386: LD_ADDR_VAR 0 6
61390: PUSH
61391: LD_EXP 56
61395: PPUSH
61396: LD_VAR 0 1
61400: PPUSH
61401: CALL 7809 0 2
61405: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61406: LD_ADDR_VAR 0 5
61410: PUSH
61411: DOUBLE
61412: LD_EXP 57
61416: PUSH
61417: LD_VAR 0 6
61421: ARRAY
61422: INC
61423: ST_TO_ADDR
61424: LD_INT 1
61426: PUSH
61427: FOR_DOWNTO
61428: IFFALSE 61591
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61430: LD_EXP 57
61434: PUSH
61435: LD_VAR 0 6
61439: ARRAY
61440: PUSH
61441: LD_VAR 0 5
61445: ARRAY
61446: PUSH
61447: LD_INT 1
61449: ARRAY
61450: PPUSH
61451: LD_EXP 57
61455: PUSH
61456: LD_VAR 0 6
61460: ARRAY
61461: PUSH
61462: LD_VAR 0 5
61466: ARRAY
61467: PUSH
61468: LD_INT 2
61470: ARRAY
61471: PPUSH
61472: LD_VAR 0 2
61476: PPUSH
61477: LD_VAR 0 3
61481: PPUSH
61482: CALL_OW 298
61486: PUSH
61487: LD_INT 6
61489: LESS
61490: IFFALSE 61589
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61492: LD_EXP 57
61496: PUSH
61497: LD_VAR 0 6
61501: ARRAY
61502: PUSH
61503: LD_VAR 0 5
61507: ARRAY
61508: PUSH
61509: LD_INT 1
61511: ARRAY
61512: PPUSH
61513: LD_EXP 57
61517: PUSH
61518: LD_VAR 0 6
61522: ARRAY
61523: PUSH
61524: LD_VAR 0 5
61528: ARRAY
61529: PUSH
61530: LD_INT 2
61532: ARRAY
61533: PPUSH
61534: LD_VAR 0 1
61538: PPUSH
61539: CALL_OW 255
61543: PPUSH
61544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61548: LD_ADDR_EXP 57
61552: PUSH
61553: LD_EXP 57
61557: PPUSH
61558: LD_VAR 0 6
61562: PPUSH
61563: LD_EXP 57
61567: PUSH
61568: LD_VAR 0 6
61572: ARRAY
61573: PPUSH
61574: LD_VAR 0 5
61578: PPUSH
61579: CALL_OW 3
61583: PPUSH
61584: CALL_OW 1
61588: ST_TO_ADDR
// end ; end ;
61589: GO 61427
61591: POP
61592: POP
// end ;
61593: LD_VAR 0 4
61597: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61598: LD_INT 0
61600: PPUSH
61601: PPUSH
61602: PPUSH
61603: PPUSH
61604: PPUSH
61605: PPUSH
61606: PPUSH
61607: PPUSH
61608: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61609: LD_VAR 0 1
61613: PPUSH
61614: CALL_OW 264
61618: PUSH
61619: LD_INT 81
61621: EQUAL
61622: NOT
61623: IFTRUE 61638
61625: PUSH
61626: LD_VAR 0 1
61630: PUSH
61631: LD_EXP 56
61635: IN
61636: NOT
61637: OR
61638: IFFALSE 61642
// exit ;
61640: GO 61968
// index := GetElementIndex ( minersList , unit ) ;
61642: LD_ADDR_VAR 0 6
61646: PUSH
61647: LD_EXP 56
61651: PPUSH
61652: LD_VAR 0 1
61656: PPUSH
61657: CALL 7809 0 2
61661: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61662: LD_ADDR_VAR 0 8
61666: PUSH
61667: LD_EXP 58
61671: PUSH
61672: LD_EXP 57
61676: PUSH
61677: LD_VAR 0 6
61681: ARRAY
61682: MINUS
61683: ST_TO_ADDR
// if not minesFreeAmount then
61684: LD_VAR 0 8
61688: NOT
61689: IFFALSE 61693
// exit ;
61691: GO 61968
// tmp := [ ] ;
61693: LD_ADDR_VAR 0 7
61697: PUSH
61698: EMPTY
61699: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61700: LD_ADDR_VAR 0 5
61704: PUSH
61705: DOUBLE
61706: LD_INT 1
61708: DEC
61709: ST_TO_ADDR
61710: LD_VAR 0 8
61714: PUSH
61715: FOR_TO
61716: IFFALSE 61915
// begin _d := rand ( 0 , 5 ) ;
61718: LD_ADDR_VAR 0 11
61722: PUSH
61723: LD_INT 0
61725: PPUSH
61726: LD_INT 5
61728: PPUSH
61729: CALL_OW 12
61733: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61734: LD_ADDR_VAR 0 12
61738: PUSH
61739: LD_INT 2
61741: PPUSH
61742: LD_INT 6
61744: PPUSH
61745: CALL_OW 12
61749: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61750: LD_ADDR_VAR 0 9
61754: PUSH
61755: LD_VAR 0 2
61759: PPUSH
61760: LD_VAR 0 11
61764: PPUSH
61765: LD_VAR 0 12
61769: PPUSH
61770: CALL_OW 272
61774: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61775: LD_ADDR_VAR 0 10
61779: PUSH
61780: LD_VAR 0 3
61784: PPUSH
61785: LD_VAR 0 11
61789: PPUSH
61790: LD_VAR 0 12
61794: PPUSH
61795: CALL_OW 273
61799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61800: LD_VAR 0 9
61804: PPUSH
61805: LD_VAR 0 10
61809: PPUSH
61810: CALL_OW 488
61814: IFFALSE 61838
61816: PUSH
61817: LD_VAR 0 9
61821: PUSH
61822: LD_VAR 0 10
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_VAR 0 7
61835: IN
61836: NOT
61837: AND
61838: IFFALSE 61857
61840: PUSH
61841: LD_VAR 0 9
61845: PPUSH
61846: LD_VAR 0 10
61850: PPUSH
61851: CALL_OW 458
61855: NOT
61856: AND
61857: IFFALSE 61899
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61859: LD_ADDR_VAR 0 7
61863: PUSH
61864: LD_VAR 0 7
61868: PPUSH
61869: LD_VAR 0 7
61873: PUSH
61874: LD_INT 1
61876: PLUS
61877: PPUSH
61878: LD_VAR 0 9
61882: PUSH
61883: LD_VAR 0 10
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PPUSH
61892: CALL_OW 1
61896: ST_TO_ADDR
61897: GO 61913
// i := i - 1 ;
61899: LD_ADDR_VAR 0 5
61903: PUSH
61904: LD_VAR 0 5
61908: PUSH
61909: LD_INT 1
61911: MINUS
61912: ST_TO_ADDR
// end ;
61913: GO 61715
61915: POP
61916: POP
// for i in tmp do
61917: LD_ADDR_VAR 0 5
61921: PUSH
61922: LD_VAR 0 7
61926: PUSH
61927: FOR_IN
61928: IFFALSE 61966
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61930: LD_VAR 0 1
61934: PPUSH
61935: LD_VAR 0 5
61939: PUSH
61940: LD_INT 1
61942: ARRAY
61943: PPUSH
61944: LD_VAR 0 5
61948: PUSH
61949: LD_INT 2
61951: ARRAY
61952: PPUSH
61953: CALL 60959 0 3
61957: NOT
61958: IFFALSE 61964
// exit ;
61960: POP
61961: POP
61962: GO 61968
61964: GO 61927
61966: POP
61967: POP
// end ;
61968: LD_VAR 0 4
61972: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61973: LD_INT 0
61975: PPUSH
61976: PPUSH
61977: PPUSH
61978: PPUSH
61979: PPUSH
61980: PPUSH
61981: PPUSH
61982: PPUSH
61983: PPUSH
// if GetClass ( unit ) <> class_sniper then
61984: LD_VAR 0 1
61988: PPUSH
61989: CALL_OW 257
61993: PUSH
61994: LD_INT 5
61996: NONEQUAL
61997: IFFALSE 62001
// exit ;
61999: GO 62471
// dist := 8 ;
62001: LD_ADDR_VAR 0 5
62005: PUSH
62006: LD_INT 8
62008: ST_TO_ADDR
// viewRange := 12 ;
62009: LD_ADDR_VAR 0 8
62013: PUSH
62014: LD_INT 12
62016: ST_TO_ADDR
// side := GetSide ( unit ) ;
62017: LD_ADDR_VAR 0 6
62021: PUSH
62022: LD_VAR 0 1
62026: PPUSH
62027: CALL_OW 255
62031: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62032: LD_INT 61
62034: PPUSH
62035: LD_VAR 0 6
62039: PPUSH
62040: CALL_OW 321
62044: PUSH
62045: LD_INT 2
62047: EQUAL
62048: IFFALSE 62058
// viewRange := 16 ;
62050: LD_ADDR_VAR 0 8
62054: PUSH
62055: LD_INT 16
62057: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62058: LD_VAR 0 1
62062: PPUSH
62063: LD_VAR 0 2
62067: PPUSH
62068: LD_VAR 0 3
62072: PPUSH
62073: CALL_OW 297
62077: PUSH
62078: LD_VAR 0 5
62082: GREATER
62083: IFFALSE 62162
// begin ComMoveXY ( unit , x , y ) ;
62085: LD_VAR 0 1
62089: PPUSH
62090: LD_VAR 0 2
62094: PPUSH
62095: LD_VAR 0 3
62099: PPUSH
62100: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62104: LD_INT 35
62106: PPUSH
62107: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62111: LD_VAR 0 1
62115: PPUSH
62116: LD_VAR 0 2
62120: PPUSH
62121: LD_VAR 0 3
62125: PPUSH
62126: CALL 39865 0 3
62130: NOT
62131: IFFALSE 62135
// exit ;
62133: GO 62471
// until GetDistUnitXY ( unit , x , y ) < dist ;
62135: LD_VAR 0 1
62139: PPUSH
62140: LD_VAR 0 2
62144: PPUSH
62145: LD_VAR 0 3
62149: PPUSH
62150: CALL_OW 297
62154: PUSH
62155: LD_VAR 0 5
62159: LESS
62160: IFFALSE 62104
// end ; ComTurnXY ( unit , x , y ) ;
62162: LD_VAR 0 1
62166: PPUSH
62167: LD_VAR 0 2
62171: PPUSH
62172: LD_VAR 0 3
62176: PPUSH
62177: CALL_OW 118
// repeat if Multiplayer then
62181: LD_OWVAR 4
62185: IFFALSE 62196
// wait ( 35 ) else
62187: LD_INT 35
62189: PPUSH
62190: CALL_OW 67
62194: GO 62203
// wait ( 5 ) ;
62196: LD_INT 5
62198: PPUSH
62199: CALL_OW 67
// _d := GetDir ( unit ) ;
62203: LD_ADDR_VAR 0 11
62207: PUSH
62208: LD_VAR 0 1
62212: PPUSH
62213: CALL_OW 254
62217: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62218: LD_ADDR_VAR 0 7
62222: PUSH
62223: LD_VAR 0 1
62227: PPUSH
62228: CALL_OW 250
62232: PPUSH
62233: LD_VAR 0 1
62237: PPUSH
62238: CALL_OW 251
62242: PPUSH
62243: LD_VAR 0 2
62247: PPUSH
62248: LD_VAR 0 3
62252: PPUSH
62253: CALL 42501 0 4
62257: ST_TO_ADDR
// until dir = _d ;
62258: LD_VAR 0 7
62262: PUSH
62263: LD_VAR 0 11
62267: EQUAL
62268: IFFALSE 62181
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62270: LD_ADDR_VAR 0 9
62274: PUSH
62275: LD_VAR 0 1
62279: PPUSH
62280: CALL_OW 250
62284: PPUSH
62285: LD_VAR 0 7
62289: PPUSH
62290: LD_VAR 0 5
62294: PPUSH
62295: CALL_OW 272
62299: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62300: LD_ADDR_VAR 0 10
62304: PUSH
62305: LD_VAR 0 1
62309: PPUSH
62310: CALL_OW 251
62314: PPUSH
62315: LD_VAR 0 7
62319: PPUSH
62320: LD_VAR 0 5
62324: PPUSH
62325: CALL_OW 273
62329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62330: LD_VAR 0 9
62334: PPUSH
62335: LD_VAR 0 10
62339: PPUSH
62340: CALL_OW 488
62344: NOT
62345: IFFALSE 62349
// exit ;
62347: GO 62471
// ComAnimCustom ( unit , 1 ) ;
62349: LD_VAR 0 1
62353: PPUSH
62354: LD_INT 1
62356: PPUSH
62357: CALL_OW 592
// p := 0 ;
62361: LD_ADDR_VAR 0 12
62365: PUSH
62366: LD_INT 0
62368: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62369: LD_VAR 0 9
62373: PPUSH
62374: LD_VAR 0 10
62378: PPUSH
62379: LD_VAR 0 6
62383: PPUSH
62384: LD_VAR 0 8
62388: PPUSH
62389: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62393: LD_INT 35
62395: PPUSH
62396: CALL_OW 67
// p := Inc ( p ) ;
62400: LD_ADDR_VAR 0 12
62404: PUSH
62405: LD_VAR 0 12
62409: PPUSH
62410: CALL 42457 0 1
62414: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62415: LD_VAR 0 12
62419: PUSH
62420: LD_INT 3
62422: EQUAL
62423: IFTRUE 62437
62425: PUSH
62426: LD_VAR 0 1
62430: PPUSH
62431: CALL_OW 302
62435: NOT
62436: OR
62437: IFTRUE 62450
62439: PUSH
62440: LD_VAR 0 1
62444: PPUSH
62445: CALL_OW 301
62449: OR
62450: IFFALSE 62393
// RemoveSeeing ( _x , _y , side ) ;
62452: LD_VAR 0 9
62456: PPUSH
62457: LD_VAR 0 10
62461: PPUSH
62462: LD_VAR 0 6
62466: PPUSH
62467: CALL_OW 331
// end ;
62471: LD_VAR 0 4
62475: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62476: LD_INT 0
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
62482: PPUSH
62483: PPUSH
62484: PPUSH
62485: PPUSH
62486: PPUSH
62487: PPUSH
62488: PPUSH
// if not unit then
62489: LD_VAR 0 1
62493: NOT
62494: IFFALSE 62498
// exit ;
62496: GO 62769
// side := GetSide ( unit ) ;
62498: LD_ADDR_VAR 0 3
62502: PUSH
62503: LD_VAR 0 1
62507: PPUSH
62508: CALL_OW 255
62512: ST_TO_ADDR
// x := GetX ( unit ) ;
62513: LD_ADDR_VAR 0 5
62517: PUSH
62518: LD_VAR 0 1
62522: PPUSH
62523: CALL_OW 250
62527: ST_TO_ADDR
// y := GetY ( unit ) ;
62528: LD_ADDR_VAR 0 6
62532: PUSH
62533: LD_VAR 0 1
62537: PPUSH
62538: CALL_OW 251
62542: ST_TO_ADDR
// r := 8 ;
62543: LD_ADDR_VAR 0 4
62547: PUSH
62548: LD_INT 8
62550: ST_TO_ADDR
// if x - r < 0 then
62551: LD_VAR 0 5
62555: PUSH
62556: LD_VAR 0 4
62560: MINUS
62561: PUSH
62562: LD_INT 0
62564: LESS
62565: IFFALSE 62577
// min_x := 0 else
62567: LD_ADDR_VAR 0 7
62571: PUSH
62572: LD_INT 0
62574: ST_TO_ADDR
62575: GO 62593
// min_x := x - r ;
62577: LD_ADDR_VAR 0 7
62581: PUSH
62582: LD_VAR 0 5
62586: PUSH
62587: LD_VAR 0 4
62591: MINUS
62592: ST_TO_ADDR
// if y - r < 0 then
62593: LD_VAR 0 6
62597: PUSH
62598: LD_VAR 0 4
62602: MINUS
62603: PUSH
62604: LD_INT 0
62606: LESS
62607: IFFALSE 62619
// min_y := 0 else
62609: LD_ADDR_VAR 0 8
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
62617: GO 62635
// min_y := y - r ;
62619: LD_ADDR_VAR 0 8
62623: PUSH
62624: LD_VAR 0 6
62628: PUSH
62629: LD_VAR 0 4
62633: MINUS
62634: ST_TO_ADDR
// max_x := x + r ;
62635: LD_ADDR_VAR 0 9
62639: PUSH
62640: LD_VAR 0 5
62644: PUSH
62645: LD_VAR 0 4
62649: PLUS
62650: ST_TO_ADDR
// max_y := y + r ;
62651: LD_ADDR_VAR 0 10
62655: PUSH
62656: LD_VAR 0 6
62660: PUSH
62661: LD_VAR 0 4
62665: PLUS
62666: ST_TO_ADDR
// for _x = min_x to max_x do
62667: LD_ADDR_VAR 0 11
62671: PUSH
62672: DOUBLE
62673: LD_VAR 0 7
62677: DEC
62678: ST_TO_ADDR
62679: LD_VAR 0 9
62683: PUSH
62684: FOR_TO
62685: IFFALSE 62767
// for _y = min_y to max_y do
62687: LD_ADDR_VAR 0 12
62691: PUSH
62692: DOUBLE
62693: LD_VAR 0 8
62697: DEC
62698: ST_TO_ADDR
62699: LD_VAR 0 10
62703: PUSH
62704: FOR_TO
62705: IFFALSE 62763
// begin if not ValidHex ( _x , _y ) then
62707: LD_VAR 0 11
62711: PPUSH
62712: LD_VAR 0 12
62716: PPUSH
62717: CALL_OW 488
62721: NOT
62722: IFFALSE 62726
// continue ;
62724: GO 62704
// if MineAtPos ( _x , _y ) then
62726: LD_VAR 0 11
62730: PPUSH
62731: LD_VAR 0 12
62735: PPUSH
62736: CALL_OW 458
62740: IFFALSE 62761
// ViewMineAtPos ( _x , _y , side ) ;
62742: LD_VAR 0 11
62746: PPUSH
62747: LD_VAR 0 12
62751: PPUSH
62752: LD_VAR 0 3
62756: PPUSH
62757: CALL_OW 457
// end ;
62761: GO 62704
62763: POP
62764: POP
62765: GO 62684
62767: POP
62768: POP
// end ;
62769: LD_VAR 0 2
62773: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
62774: LD_INT 0
62776: PPUSH
62777: PPUSH
62778: PPUSH
62779: PPUSH
62780: PPUSH
62781: PPUSH
62782: PPUSH
// if not units then
62783: LD_VAR 0 1
62787: NOT
62788: IFFALSE 62792
// exit ;
62790: GO 63256
// scaners := [ ] ;
62792: LD_ADDR_VAR 0 6
62796: PUSH
62797: EMPTY
62798: ST_TO_ADDR
// for i in units do
62799: LD_ADDR_VAR 0 3
62803: PUSH
62804: LD_VAR 0 1
62808: PUSH
62809: FOR_IN
62810: IFFALSE 62967
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62812: LD_VAR 0 3
62816: PPUSH
62817: CALL_OW 264
62821: PUSH
62822: LD_INT 11
62824: NONEQUAL
62825: IFTRUE 62839
62827: PUSH
62828: LD_VAR 0 3
62832: PPUSH
62833: CALL_OW 302
62837: NOT
62838: OR
62839: IFTRUE 62856
62841: PUSH
62842: LD_VAR 0 3
62846: PPUSH
62847: CALL_OW 110
62851: PUSH
62852: LD_INT 502
62854: EQUAL
62855: OR
62856: IFFALSE 62860
// continue ;
62858: GO 62809
// ComStop ( i ) ;
62860: LD_VAR 0 3
62864: PPUSH
62865: CALL_OW 141
// x := GetX ( i ) ;
62869: LD_ADDR_VAR 0 4
62873: PUSH
62874: LD_VAR 0 3
62878: PPUSH
62879: CALL_OW 250
62883: ST_TO_ADDR
// y := GetY ( i ) ;
62884: LD_ADDR_VAR 0 5
62888: PUSH
62889: LD_VAR 0 3
62893: PPUSH
62894: CALL_OW 251
62898: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62899: LD_VAR 0 3
62903: PPUSH
62904: CALL_OW 255
62908: PUSH
62909: LD_OWVAR 2
62913: EQUAL
62914: IFFALSE 62933
// PlaySoundXY ( x , y , mineDetector ) ;
62916: LD_VAR 0 4
62920: PPUSH
62921: LD_VAR 0 5
62925: PPUSH
62926: LD_STRING mineDetector
62928: PPUSH
62929: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62933: LD_ADDR_VAR 0 6
62937: PUSH
62938: LD_VAR 0 6
62942: PPUSH
62943: LD_VAR 0 3
62947: PPUSH
62948: CALL 41084 0 2
62952: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62953: LD_VAR 0 3
62957: PPUSH
62958: LD_INT 502
62960: PPUSH
62961: CALL_OW 109
// end ;
62965: GO 62809
62967: POP
62968: POP
// if not scaners then
62969: LD_VAR 0 6
62973: NOT
62974: IFFALSE 62978
// exit ;
62976: GO 63256
// wait ( 3 ) ;
62978: LD_INT 3
62980: PPUSH
62981: CALL_OW 67
// timer := 6 ;
62985: LD_ADDR_VAR 0 7
62989: PUSH
62990: LD_INT 6
62992: ST_TO_ADDR
// repeat for i in scaners do
62993: LD_ADDR_VAR 0 3
62997: PUSH
62998: LD_VAR 0 6
63002: PUSH
63003: FOR_IN
63004: IFFALSE 63154
// begin side := GetSide ( i ) ;
63006: LD_ADDR_VAR 0 8
63010: PUSH
63011: LD_VAR 0 3
63015: PPUSH
63016: CALL_OW 255
63020: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63021: LD_VAR 0 3
63025: PPUSH
63026: CALL_OW 302
63030: NOT
63031: IFTRUE 63044
63033: PUSH
63034: LD_VAR 0 3
63038: PPUSH
63039: CALL_OW 314
63043: OR
63044: IFTRUE 63075
63046: PUSH
63047: LD_VAR 0 3
63051: PPUSH
63052: CALL_OW 263
63056: PUSH
63057: LD_INT 1
63059: EQUAL
63060: IFFALSE 63074
63062: PUSH
63063: LD_VAR 0 3
63067: PPUSH
63068: CALL_OW 311
63072: NOT
63073: AND
63074: OR
63075: IFFALSE 63119
// begin SetUnitDisplayNumber ( i , 0 ) ;
63077: LD_VAR 0 3
63081: PPUSH
63082: LD_INT 0
63084: PPUSH
63085: CALL_OW 505
// SetTag ( i , 0 ) ;
63089: LD_VAR 0 3
63093: PPUSH
63094: LD_INT 0
63096: PPUSH
63097: CALL_OW 109
// scaners := scaners diff i ;
63101: LD_ADDR_VAR 0 6
63105: PUSH
63106: LD_VAR 0 6
63110: PUSH
63111: LD_VAR 0 3
63115: DIFF
63116: ST_TO_ADDR
// continue ;
63117: GO 63003
// end ; if side in [ your_side , 9 ] then
63119: LD_VAR 0 8
63123: PUSH
63124: LD_OWVAR 2
63128: PUSH
63129: LD_INT 9
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: IN
63136: IFFALSE 63152
// SetUnitDisplayNumber ( i , timer ) ;
63138: LD_VAR 0 3
63142: PPUSH
63143: LD_VAR 0 7
63147: PPUSH
63148: CALL_OW 505
// end ;
63152: GO 63003
63154: POP
63155: POP
// if not scaners then
63156: LD_VAR 0 6
63160: NOT
63161: IFFALSE 63165
// exit ;
63163: GO 63256
// timer := Dec ( timer ) ;
63165: LD_ADDR_VAR 0 7
63169: PUSH
63170: LD_VAR 0 7
63174: PPUSH
63175: CALL 42479 0 1
63179: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63180: LD_INT 35
63182: PPUSH
63183: CALL_OW 67
// until timer = 0 ;
63187: LD_VAR 0 7
63191: PUSH
63192: LD_INT 0
63194: EQUAL
63195: IFFALSE 62993
// if not scaners then
63197: LD_VAR 0 6
63201: NOT
63202: IFFALSE 63206
// exit ;
63204: GO 63256
// for i in scaners do
63206: LD_ADDR_VAR 0 3
63210: PUSH
63211: LD_VAR 0 6
63215: PUSH
63216: FOR_IN
63217: IFFALSE 63254
// begin SetUnitDisplayNumber ( i , 0 ) ;
63219: LD_VAR 0 3
63223: PPUSH
63224: LD_INT 0
63226: PPUSH
63227: CALL_OW 505
// SetTag ( i , 0 ) ;
63231: LD_VAR 0 3
63235: PPUSH
63236: LD_INT 0
63238: PPUSH
63239: CALL_OW 109
// RevealDetectorMine ( i ) ;
63243: LD_VAR 0 3
63247: PPUSH
63248: CALL 62476 0 1
// end ;
63252: GO 63216
63254: POP
63255: POP
// end ;
63256: LD_VAR 0 2
63260: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63261: LD_INT 0
63263: PPUSH
// if p1 = mine_detector_mode then
63264: LD_VAR 0 2
63268: PUSH
63269: LD_INT 103
63271: EQUAL
63272: IFFALSE 63283
// DetectMine ( units ) ;
63274: LD_VAR 0 1
63278: PPUSH
63279: CALL 62774 0 1
// end ; end_of_file
63283: LD_VAR 0 7
63287: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63288: PPOPN 6
63290: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63291: LD_INT 0
63293: PPUSH
// begin if not units then
63294: LD_VAR 0 1
63298: NOT
63299: IFFALSE 63303
// exit ;
63301: GO 63337
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63303: LD_VAR 0 1
63307: PPUSH
63308: LD_VAR 0 2
63312: PPUSH
63313: LD_VAR 0 3
63317: PPUSH
63318: LD_VAR 0 4
63322: PPUSH
63323: LD_VAR 0 5
63327: PPUSH
63328: LD_VAR 0 6
63332: PPUSH
63333: CALL 63261 0 6
// end ;
63337: PPOPN 7
63339: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63340: LD_EXP 1
63344: PUSH
63345: LD_INT 4
63347: EQUAL
63348: IFFALSE 63384
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63350: LD_STRING setGameDifficulty(
63352: PUSH
63353: LD_OWVAR 67
63357: STR
63358: PUSH
63359: LD_STRING )
63361: STR
63362: PPUSH
63363: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63367: LD_STRING displayDifficulty(
63369: PUSH
63370: LD_OWVAR 67
63374: STR
63375: PUSH
63376: LD_STRING )
63378: STR
63379: PPUSH
63380: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63384: CALL 63413 0 0
// end ; end_of_file
63388: PPOPN 1
63390: END
// every 0 0$1 do
63391: GO 63393
63393: DISABLE
// begin enable ;
63394: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63395: LD_STRING updateTimer(
63397: PUSH
63398: LD_OWVAR 1
63402: STR
63403: PUSH
63404: LD_STRING );
63406: STR
63407: PPUSH
63408: CALL_OW 559
// end ;
63412: END
// export function SOS_MapStart ( ) ; begin
63413: LD_INT 0
63415: PPUSH
// UpdateFactoryWaypoints ( ) ;
63416: CALL 64347 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63420: CALL 64599 0 0
// ParseMultiDataToLua ( ) ;
63424: CALL 64746 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63428: LD_STRING setSpecLogoNumber(
63430: PUSH
63431: LD_INT 2
63433: STR
63434: PUSH
63435: LD_STRING ,
63437: STR
63438: PUSH
63439: LD_INT 1
63441: STR
63442: PUSH
63443: LD_STRING )
63445: STR
63446: PPUSH
63447: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63451: LD_STRING setSpecLogoNumber(
63453: PUSH
63454: LD_INT 3
63456: STR
63457: PUSH
63458: LD_STRING ,
63460: STR
63461: PUSH
63462: LD_INT 2
63464: STR
63465: PUSH
63466: LD_STRING )
63468: STR
63469: PPUSH
63470: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63474: LD_STRING setSpecLogoNumber(
63476: PUSH
63477: LD_INT 4
63479: STR
63480: PUSH
63481: LD_STRING ,
63483: STR
63484: PUSH
63485: LD_INT 3
63487: STR
63488: PUSH
63489: LD_STRING )
63491: STR
63492: PPUSH
63493: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63497: LD_STRING setSpecLogoNumber(
63499: PUSH
63500: LD_INT 5
63502: STR
63503: PUSH
63504: LD_STRING ,
63506: STR
63507: PUSH
63508: LD_INT 4
63510: STR
63511: PUSH
63512: LD_STRING )
63514: STR
63515: PPUSH
63516: CALL_OW 559
// end ;
63520: LD_VAR 0 1
63524: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63525: LD_INT 0
63527: PPUSH
63528: PPUSH
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
63534: PPUSH
63535: PPUSH
// for i := 1 to 8 do
63536: LD_ADDR_VAR 0 2
63540: PUSH
63541: DOUBLE
63542: LD_INT 1
63544: DEC
63545: ST_TO_ADDR
63546: LD_INT 8
63548: PUSH
63549: FOR_TO
63550: IFFALSE 63935
// begin if mpSidePositions [ i ] then
63552: LD_EXP 5
63556: PUSH
63557: LD_VAR 0 2
63561: ARRAY
63562: IFFALSE 63933
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63564: LD_ADDR_VAR 0 7
63568: PUSH
63569: LD_INT 22
63571: PUSH
63572: LD_VAR 0 2
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 21
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PPUSH
63595: CALL_OW 69
63599: PPUSH
63600: CALL 5108 0 1
63604: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63605: LD_ADDR_VAR 0 9
63609: PUSH
63610: LD_INT 22
63612: PUSH
63613: LD_VAR 0 2
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: LD_INT 30
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 30
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PPUSH
63654: CALL_OW 69
63658: ST_TO_ADDR
// crates := 0 ;
63659: LD_ADDR_VAR 0 4
63663: PUSH
63664: LD_INT 0
63666: ST_TO_ADDR
// oil := 0 ;
63667: LD_ADDR_VAR 0 5
63671: PUSH
63672: LD_INT 0
63674: ST_TO_ADDR
// sib := 0 ;
63675: LD_ADDR_VAR 0 6
63679: PUSH
63680: LD_INT 0
63682: ST_TO_ADDR
// if bases then
63683: LD_VAR 0 9
63687: IFFALSE 63793
// begin for j in bases do
63689: LD_ADDR_VAR 0 3
63693: PUSH
63694: LD_VAR 0 9
63698: PUSH
63699: FOR_IN
63700: IFFALSE 63791
// begin base := GetBase ( j ) ;
63702: LD_ADDR_VAR 0 8
63706: PUSH
63707: LD_VAR 0 3
63711: PPUSH
63712: CALL_OW 274
63716: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63717: LD_ADDR_VAR 0 4
63721: PUSH
63722: LD_VAR 0 4
63726: PUSH
63727: LD_VAR 0 8
63731: PPUSH
63732: LD_INT 1
63734: PPUSH
63735: CALL_OW 275
63739: PLUS
63740: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63741: LD_ADDR_VAR 0 5
63745: PUSH
63746: LD_VAR 0 5
63750: PUSH
63751: LD_VAR 0 8
63755: PPUSH
63756: LD_INT 2
63758: PPUSH
63759: CALL_OW 275
63763: PLUS
63764: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63765: LD_ADDR_VAR 0 6
63769: PUSH
63770: LD_VAR 0 6
63774: PUSH
63775: LD_VAR 0 8
63779: PPUSH
63780: LD_INT 3
63782: PPUSH
63783: CALL_OW 275
63787: PLUS
63788: ST_TO_ADDR
// end ;
63789: GO 63699
63791: POP
63792: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63793: LD_STRING setSpecText(
63795: PUSH
63796: LD_VAR 0 2
63800: STR
63801: PUSH
63802: LD_STRING ,
63804: STR
63805: PUSH
63806: LD_INT 2
63808: STR
63809: PUSH
63810: LD_STRING ,
63812: STR
63813: PUSH
63814: LD_VAR 0 4
63818: STR
63819: PUSH
63820: LD_STRING )
63822: STR
63823: PPUSH
63824: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63828: LD_STRING setSpecText(
63830: PUSH
63831: LD_VAR 0 2
63835: STR
63836: PUSH
63837: LD_STRING ,
63839: STR
63840: PUSH
63841: LD_INT 3
63843: STR
63844: PUSH
63845: LD_STRING ,
63847: STR
63848: PUSH
63849: LD_VAR 0 5
63853: STR
63854: PUSH
63855: LD_STRING )
63857: STR
63858: PPUSH
63859: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63863: LD_STRING setSpecText(
63865: PUSH
63866: LD_VAR 0 2
63870: STR
63871: PUSH
63872: LD_STRING ,
63874: STR
63875: PUSH
63876: LD_INT 4
63878: STR
63879: PUSH
63880: LD_STRING ,
63882: STR
63883: PUSH
63884: LD_VAR 0 6
63888: STR
63889: PUSH
63890: LD_STRING )
63892: STR
63893: PPUSH
63894: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63898: LD_STRING setSpecText(
63900: PUSH
63901: LD_VAR 0 2
63905: STR
63906: PUSH
63907: LD_STRING ,
63909: STR
63910: PUSH
63911: LD_INT 5
63913: STR
63914: PUSH
63915: LD_STRING ,
63917: STR
63918: PUSH
63919: LD_VAR 0 7
63923: STR
63924: PUSH
63925: LD_STRING )
63927: STR
63928: PPUSH
63929: CALL_OW 559
// end ; end ;
63933: GO 63549
63935: POP
63936: POP
// end ;
63937: LD_VAR 0 1
63941: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63942: LD_INT 2
63944: PUSH
63945: LD_INT 30
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 30
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: PPUSH
63970: CALL_OW 69
63974: IFFALSE 63984
63976: GO 63978
63978: DISABLE
// begin enable ;
63979: ENABLE
// UpdateSpectatorBar ;
63980: CALL 63525 0 0
// end ;
63984: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63985: LD_INT 0
63987: PPUSH
// end ;
63988: LD_VAR 0 12
63992: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63993: LD_INT 0
63995: PPUSH
63996: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63997: LD_VAR 0 1
64001: NOT
64002: IFTRUE 64021
64004: PUSH
64005: LD_VAR 0 2
64009: PPUSH
64010: LD_VAR 0 3
64014: PPUSH
64015: CALL_OW 488
64019: NOT
64020: OR
64021: IFTRUE 64056
64023: PUSH
64024: LD_VAR 0 1
64028: PPUSH
64029: CALL_OW 266
64033: PUSH
64034: LD_INT 3
64036: NONEQUAL
64037: IFFALSE 64055
64039: PUSH
64040: LD_VAR 0 1
64044: PPUSH
64045: CALL_OW 247
64049: PUSH
64050: LD_INT 1
64052: EQUAL
64053: NOT
64054: AND
64055: OR
64056: IFFALSE 64060
// exit ;
64058: GO 64342
// if GetType ( factory ) = unit_human then
64060: LD_VAR 0 1
64064: PPUSH
64065: CALL_OW 247
64069: PUSH
64070: LD_INT 1
64072: EQUAL
64073: IFFALSE 64090
// factory := IsInUnit ( factory ) ;
64075: LD_ADDR_VAR 0 1
64079: PUSH
64080: LD_VAR 0 1
64084: PPUSH
64085: CALL_OW 310
64089: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64090: LD_VAR 0 1
64094: PPUSH
64095: CALL_OW 266
64099: PUSH
64100: LD_INT 3
64102: NONEQUAL
64103: IFFALSE 64107
// exit ;
64105: GO 64342
// for i := 1 to Count ( factoryWaypoints ) do
64107: LD_ADDR_VAR 0 5
64111: PUSH
64112: DOUBLE
64113: LD_INT 1
64115: DEC
64116: ST_TO_ADDR
64117: LD_EXP 59
64121: PPUSH
64122: CALL 5108 0 1
64126: PUSH
64127: FOR_TO
64128: IFFALSE 64290
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64130: LD_VAR 0 2
64134: PPUSH
64135: LD_VAR 0 3
64139: PPUSH
64140: CALL_OW 428
64144: PUSH
64145: LD_EXP 59
64149: PUSH
64150: LD_VAR 0 5
64154: ARRAY
64155: PUSH
64156: LD_INT 2
64158: ARRAY
64159: EQUAL
64160: IFFALSE 64192
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64162: LD_ADDR_EXP 59
64166: PUSH
64167: LD_EXP 59
64171: PPUSH
64172: LD_VAR 0 5
64176: PPUSH
64177: CALL_OW 3
64181: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64182: CALL 64347 0 0
// exit ;
64186: POP
64187: POP
64188: GO 64342
// end else
64190: GO 64288
// if factory = factoryWaypoints [ i ] [ 2 ] then
64192: LD_VAR 0 1
64196: PUSH
64197: LD_EXP 59
64201: PUSH
64202: LD_VAR 0 5
64206: ARRAY
64207: PUSH
64208: LD_INT 2
64210: ARRAY
64211: EQUAL
64212: IFFALSE 64288
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64214: LD_ADDR_EXP 59
64218: PUSH
64219: LD_EXP 59
64223: PPUSH
64224: LD_VAR 0 5
64228: PPUSH
64229: CALL_OW 3
64233: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64234: LD_ADDR_EXP 59
64238: PUSH
64239: LD_EXP 59
64243: PPUSH
64244: LD_VAR 0 1
64248: PPUSH
64249: CALL_OW 255
64253: PUSH
64254: LD_VAR 0 1
64258: PUSH
64259: LD_VAR 0 2
64263: PUSH
64264: LD_VAR 0 3
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: PPUSH
64275: CALL 41084 0 2
64279: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64280: CALL 64347 0 0
// exit ;
64284: POP
64285: POP
64286: GO 64342
// end ; end ;
64288: GO 64127
64290: POP
64291: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64292: LD_ADDR_EXP 59
64296: PUSH
64297: LD_EXP 59
64301: PPUSH
64302: LD_VAR 0 1
64306: PPUSH
64307: CALL_OW 255
64311: PUSH
64312: LD_VAR 0 1
64316: PUSH
64317: LD_VAR 0 2
64321: PUSH
64322: LD_VAR 0 3
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: PPUSH
64333: CALL 41084 0 2
64337: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64338: CALL 64347 0 0
// end ;
64342: LD_VAR 0 4
64346: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64347: LD_INT 0
64349: PPUSH
64350: PPUSH
64351: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64352: LD_STRING resetFactoryWaypoint();
64354: PPUSH
64355: CALL_OW 559
// if factoryWaypoints then
64359: LD_EXP 59
64363: IFFALSE 64484
// begin list := factoryWaypoints ;
64365: LD_ADDR_VAR 0 3
64369: PUSH
64370: LD_EXP 59
64374: ST_TO_ADDR
// for i := 1 to list do
64375: LD_ADDR_VAR 0 2
64379: PUSH
64380: DOUBLE
64381: LD_INT 1
64383: DEC
64384: ST_TO_ADDR
64385: LD_VAR 0 3
64389: PUSH
64390: FOR_TO
64391: IFFALSE 64482
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64393: LD_STRING setFactoryWaypointXY(
64395: PUSH
64396: LD_VAR 0 3
64400: PUSH
64401: LD_VAR 0 2
64405: ARRAY
64406: PUSH
64407: LD_INT 1
64409: ARRAY
64410: STR
64411: PUSH
64412: LD_STRING ,
64414: STR
64415: PUSH
64416: LD_VAR 0 3
64420: PUSH
64421: LD_VAR 0 2
64425: ARRAY
64426: PUSH
64427: LD_INT 2
64429: ARRAY
64430: STR
64431: PUSH
64432: LD_STRING ,
64434: STR
64435: PUSH
64436: LD_VAR 0 3
64440: PUSH
64441: LD_VAR 0 2
64445: ARRAY
64446: PUSH
64447: LD_INT 3
64449: ARRAY
64450: STR
64451: PUSH
64452: LD_STRING ,
64454: STR
64455: PUSH
64456: LD_VAR 0 3
64460: PUSH
64461: LD_VAR 0 2
64465: ARRAY
64466: PUSH
64467: LD_INT 4
64469: ARRAY
64470: STR
64471: PUSH
64472: LD_STRING )
64474: STR
64475: PPUSH
64476: CALL_OW 559
64480: GO 64390
64482: POP
64483: POP
// end ; end ;
64484: LD_VAR 0 1
64488: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64489: LD_INT 0
64491: PPUSH
// if HexInfo ( x , y ) = warehouse then
64492: LD_VAR 0 2
64496: PPUSH
64497: LD_VAR 0 3
64501: PPUSH
64502: CALL_OW 428
64506: PUSH
64507: LD_VAR 0 1
64511: EQUAL
64512: IFFALSE 64539
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64514: LD_ADDR_EXP 61
64518: PUSH
64519: LD_EXP 61
64523: PPUSH
64524: LD_VAR 0 1
64528: PPUSH
64529: LD_INT 0
64531: PPUSH
64532: CALL_OW 1
64536: ST_TO_ADDR
64537: GO 64590
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64539: LD_ADDR_EXP 61
64543: PUSH
64544: LD_EXP 61
64548: PPUSH
64549: LD_VAR 0 1
64553: PPUSH
64554: LD_VAR 0 1
64558: PPUSH
64559: CALL_OW 255
64563: PUSH
64564: LD_VAR 0 1
64568: PUSH
64569: LD_VAR 0 2
64573: PUSH
64574: LD_VAR 0 3
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: PPUSH
64585: CALL_OW 1
64589: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64590: CALL 64599 0 0
// end ;
64594: LD_VAR 0 4
64598: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64599: LD_INT 0
64601: PPUSH
64602: PPUSH
64603: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64604: LD_STRING resetWarehouseGatheringPoints();
64606: PPUSH
64607: CALL_OW 559
// if warehouseGatheringPoints then
64611: LD_EXP 61
64615: IFFALSE 64741
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64617: LD_ADDR_VAR 0 3
64621: PUSH
64622: LD_EXP 61
64626: PPUSH
64627: CALL 45018 0 1
64631: ST_TO_ADDR
// for i := 1 to list do
64632: LD_ADDR_VAR 0 2
64636: PUSH
64637: DOUBLE
64638: LD_INT 1
64640: DEC
64641: ST_TO_ADDR
64642: LD_VAR 0 3
64646: PUSH
64647: FOR_TO
64648: IFFALSE 64739
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64650: LD_STRING setWarehouseGatheringPointXY(
64652: PUSH
64653: LD_VAR 0 3
64657: PUSH
64658: LD_VAR 0 2
64662: ARRAY
64663: PUSH
64664: LD_INT 1
64666: ARRAY
64667: STR
64668: PUSH
64669: LD_STRING ,
64671: STR
64672: PUSH
64673: LD_VAR 0 3
64677: PUSH
64678: LD_VAR 0 2
64682: ARRAY
64683: PUSH
64684: LD_INT 2
64686: ARRAY
64687: STR
64688: PUSH
64689: LD_STRING ,
64691: STR
64692: PUSH
64693: LD_VAR 0 3
64697: PUSH
64698: LD_VAR 0 2
64702: ARRAY
64703: PUSH
64704: LD_INT 3
64706: ARRAY
64707: STR
64708: PUSH
64709: LD_STRING ,
64711: STR
64712: PUSH
64713: LD_VAR 0 3
64717: PUSH
64718: LD_VAR 0 2
64722: ARRAY
64723: PUSH
64724: LD_INT 4
64726: ARRAY
64727: STR
64728: PUSH
64729: LD_STRING )
64731: STR
64732: PPUSH
64733: CALL_OW 559
64737: GO 64647
64739: POP
64740: POP
// end ; end ;
64741: LD_VAR 0 1
64745: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64746: LD_INT 0
64748: PPUSH
64749: PPUSH
// if not mpSidePositions then
64750: LD_EXP 5
64754: NOT
64755: IFFALSE 64759
// exit ;
64757: GO 64830
// result :=  ;
64759: LD_ADDR_VAR 0 1
64763: PUSH
64764: LD_STRING 
64766: ST_TO_ADDR
// for i := 1 to 8 do
64767: LD_ADDR_VAR 0 2
64771: PUSH
64772: DOUBLE
64773: LD_INT 1
64775: DEC
64776: ST_TO_ADDR
64777: LD_INT 8
64779: PUSH
64780: FOR_TO
64781: IFFALSE 64811
// begin result := result & mpSidePositions [ i ] & ; ;
64783: LD_ADDR_VAR 0 1
64787: PUSH
64788: LD_VAR 0 1
64792: PUSH
64793: LD_EXP 5
64797: PUSH
64798: LD_VAR 0 2
64802: ARRAY
64803: STR
64804: PUSH
64805: LD_STRING ;
64807: STR
64808: ST_TO_ADDR
// end ;
64809: GO 64780
64811: POP
64812: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64813: LD_STRING setMultiplayerRealPosition("
64815: PUSH
64816: LD_VAR 0 1
64820: STR
64821: PUSH
64822: LD_STRING ");
64824: STR
64825: PPUSH
64826: CALL_OW 559
// end ;
64830: LD_VAR 0 1
64834: RET
