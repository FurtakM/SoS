// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46411 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46795 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// if gameType = GameTypeKing then
1009: LD_VAR 0 1
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1057
// begin mpKingArea := kingArea ;
1019: LD_ADDR_EXP 32
1023: PUSH
1024: LD_INT 16
1026: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1027: LD_ADDR_EXP 33
1031: PUSH
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 8
1039: ARRAY
1040: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1041: LD_ADDR_EXP 35
1045: PUSH
1046: LD_EXP 4
1050: PUSH
1051: LD_INT 10
1053: ARRAY
1054: ST_TO_ADDR
// end else
1055: GO 1081
// begin mpKingArea := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// mpPoints := 0 ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_INT 0
1072: ST_TO_ADDR
// mpEmissions := 0 ;
1073: LD_ADDR_EXP 35
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1081: LD_EXP 4
1085: PUSH
1086: LD_INT 9
1088: ARRAY
1089: IFFALSE 1221
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1091: LD_ADDR_EXP 34
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 12
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 24
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 12
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 23
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 21
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 42
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 21
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 42
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_EXP 4
1230: PUSH
1231: LD_INT 11
1233: ARRAY
1234: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1235: LD_ADDR_EXP 20
1239: PUSH
1240: LD_EXP 4
1244: PUSH
1245: LD_INT 12
1247: ARRAY
1248: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1249: LD_ADDR_EXP 24
1253: PUSH
1254: LD_EXP 4
1258: PUSH
1259: LD_INT 13
1261: ARRAY
1262: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1263: LD_ADDR_EXP 31
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: LD_INT 14
1275: ARRAY
1276: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_EXP 4
1286: PUSH
1287: LD_INT 15
1289: ARRAY
1290: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1291: LD_ADDR_EXP 26
1295: PUSH
1296: LD_EXP 4
1300: PUSH
1301: LD_INT 18
1303: ARRAY
1304: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1305: LD_ADDR_EXP 18
1309: PUSH
1310: LD_EXP 4
1314: PUSH
1315: LD_INT 21
1317: ARRAY
1318: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1319: LD_ADDR_EXP 29
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 4
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 5
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1350: LD_ADDR_VAR 0 8
1354: PUSH
1355: LD_INT 18
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: CALL 45776 0 2
1365: PUSH
1366: LD_INT 19
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 45776 0 2
1376: PUSH
1377: LD_INT 20
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL 45776 0 2
1387: PUSH
1388: LD_INT 21
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL 45776 0 2
1398: PUSH
1399: LD_INT 22
1401: PPUSH
1402: LD_INT 4
1404: PPUSH
1405: CALL 45776 0 2
1409: PUSH
1410: LD_INT 23
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: CALL 45776 0 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1429: LD_ADDR_VAR 0 3
1433: PUSH
1434: DOUBLE
1435: LD_INT 1
1437: DEC
1438: ST_TO_ADDR
1439: LD_VAR 0 8
1443: PPUSH
1444: CALL 5091 0 1
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1554
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1452: LD_ADDR_EXP 19
1456: PUSH
1457: LD_EXP 19
1461: PPUSH
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_VAR 0 8
1471: PUSH
1472: LD_VAR 0 3
1476: ARRAY
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: LD_VAR 0 8
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PUSH
1493: LD_INT 3
1495: ARRAY
1496: PPUSH
1497: LD_INT 10
1499: PPUSH
1500: CALL_OW 272
1504: PUSH
1505: LD_VAR 0 8
1509: PUSH
1510: LD_VAR 0 3
1514: ARRAY
1515: PUSH
1516: LD_INT 2
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 3
1533: ARRAY
1534: PPUSH
1535: LD_INT 10
1537: PPUSH
1538: CALL_OW 273
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PPUSH
1547: CALL_OW 1
1551: ST_TO_ADDR
1552: GO 1449
1554: POP
1555: POP
// if hasOil then
1556: LD_VAR 0 5
1560: IFFALSE 1671
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 6
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: EQUAL
1579: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1580: LD_ADDR_EXP 10
1584: PUSH
1585: LD_INT 24
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: CALL 45609 0 2
1597: PUSH
1598: LD_INT 26
1600: PPUSH
1601: LD_VAR 0 4
1605: PPUSH
1606: CALL 45609 0 2
1610: PUSH
1611: LD_INT 28
1613: PPUSH
1614: LD_VAR 0 4
1618: PPUSH
1619: CALL 45609 0 2
1623: PUSH
1624: LD_INT 30
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL 45609 0 2
1636: PUSH
1637: LD_INT 32
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: CALL 45609 0 2
1649: PUSH
1650: LD_INT 34
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL 45609 0 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// end ; if hasSib then
1671: LD_VAR 0 6
1675: IFFALSE 1786
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_EXP 4
1686: PUSH
1687: LD_INT 7
1689: ARRAY
1690: PUSH
1691: LD_INT 2
1693: EQUAL
1694: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1695: LD_ADDR_EXP 11
1699: PUSH
1700: LD_INT 25
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL 45609 0 2
1712: PUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_VAR 0 4
1720: PPUSH
1721: CALL 45609 0 2
1725: PUSH
1726: LD_INT 29
1728: PPUSH
1729: LD_VAR 0 4
1733: PPUSH
1734: CALL 45609 0 2
1738: PUSH
1739: LD_INT 31
1741: PPUSH
1742: LD_VAR 0 4
1746: PPUSH
1747: CALL 45609 0 2
1751: PUSH
1752: LD_INT 33
1754: PPUSH
1755: LD_VAR 0 4
1759: PPUSH
1760: CALL 45609 0 2
1764: PUSH
1765: LD_INT 35
1767: PPUSH
1768: LD_VAR 0 4
1772: PPUSH
1773: CALL 45609 0 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1786: LD_VAR 0 7
1790: PUSH
1791: LD_INT 1
1793: GREATEREQUAL
1794: IFFALSE 1806
// mpDepots := startPos ;
1796: LD_ADDR_EXP 12
1800: PUSH
1801: LD_VAR 0 8
1805: ST_TO_ADDR
// if baseLevel >= 2 then
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 2
1813: GREATEREQUAL
1814: IFFALSE 2129
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1816: LD_ADDR_EXP 15
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 36
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: CALL 45776 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 37
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: CALL 45776 0 2
1849: ADD
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: LD_INT 38
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL 45776 0 2
1864: ADD
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 31
1873: PUSH
1874: LD_INT 39
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: CALL 45776 0 2
1884: ADD
1885: PUSH
1886: LD_INT 31
1888: PUSH
1889: LD_INT 40
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL 45776 0 2
1899: ADD
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: LD_INT 41
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: CALL 45776 0 2
1914: ADD
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 31
1923: PUSH
1924: LD_INT 42
1926: PPUSH
1927: LD_INT 3
1929: PPUSH
1930: CALL 45776 0 2
1934: ADD
1935: PUSH
1936: LD_INT 31
1938: PUSH
1939: LD_INT 43
1941: PPUSH
1942: LD_INT 4
1944: PPUSH
1945: CALL 45776 0 2
1949: ADD
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 44
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: CALL 45776 0 2
1964: ADD
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 31
1973: PUSH
1974: LD_INT 45
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 45776 0 2
1984: ADD
1985: PUSH
1986: LD_INT 31
1988: PUSH
1989: LD_INT 46
1991: PPUSH
1992: LD_INT 5
1994: PPUSH
1995: CALL 45776 0 2
1999: ADD
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 47
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL 45776 0 2
2014: ADD
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 31
2023: PUSH
2024: LD_INT 48
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: CALL 45776 0 2
2034: ADD
2035: PUSH
2036: LD_INT 31
2038: PUSH
2039: LD_INT 49
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL 45776 0 2
2049: ADD
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 50
2056: PPUSH
2057: LD_INT 1
2059: PPUSH
2060: CALL 45776 0 2
2064: ADD
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 31
2073: PUSH
2074: LD_INT 51
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 45776 0 2
2084: ADD
2085: PUSH
2086: LD_INT 31
2088: PUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 45776 0 2
2099: ADD
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 53
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL 45776 0 2
2114: ADD
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// end ; end ;
2129: LD_VAR 0 2
2133: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2134: GO 2136
2136: DISABLE
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
// begin if not mpShipments then
2147: LD_EXP 25
2151: NOT
2152: IFFALSE 2156
// exit ;
2154: GO 2721
// case mpShipments of 1 :
2156: LD_EXP 25
2160: PUSH
2161: LD_INT 1
2163: DOUBLE
2164: EQUAL
2165: IFTRUE 2169
2167: GO 2204
2169: POP
// begin time := 0 0$30 ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_INT 1050
2177: ST_TO_ADDR
// normalTime := 0 0$30 ;
2178: LD_ADDR_VAR 0 6
2182: PUSH
2183: LD_INT 1050
2185: ST_TO_ADDR
// maxTime := 1 1$20 ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_INT 2800
2193: ST_TO_ADDR
// delayTime := 0 0$5 ;
2194: LD_ADDR_VAR 0 7
2198: PUSH
2199: LD_INT 175
2201: ST_TO_ADDR
// end ; 2 :
2202: GO 2334
2204: LD_INT 2
2206: DOUBLE
2207: EQUAL
2208: IFTRUE 2212
2210: GO 2247
2212: POP
// begin time := 0 0$25 ;
2213: LD_ADDR_VAR 0 4
2217: PUSH
2218: LD_INT 875
2220: ST_TO_ADDR
// normalTime := 0 0$25 ;
2221: LD_ADDR_VAR 0 6
2225: PUSH
2226: LD_INT 875
2228: ST_TO_ADDR
// maxTime := 1 1$10 ;
2229: LD_ADDR_VAR 0 8
2233: PUSH
2234: LD_INT 2450
2236: ST_TO_ADDR
// delayTime := 0 0$4 ;
2237: LD_ADDR_VAR 0 7
2241: PUSH
2242: LD_INT 140
2244: ST_TO_ADDR
// end ; 3 :
2245: GO 2334
2247: LD_INT 3
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2290
2255: POP
// begin time := 0 0$20 ;
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_INT 700
2263: ST_TO_ADDR
// normalTime := 0 0$20 ;
2264: LD_ADDR_VAR 0 6
2268: PUSH
2269: LD_INT 700
2271: ST_TO_ADDR
// maxTime := 1 1$00 ;
2272: LD_ADDR_VAR 0 8
2276: PUSH
2277: LD_INT 2100
2279: ST_TO_ADDR
// delayTime := 0 0$3 ;
2280: LD_ADDR_VAR 0 7
2284: PUSH
2285: LD_INT 105
2287: ST_TO_ADDR
// end ; 4 :
2288: GO 2334
2290: LD_INT 4
2292: DOUBLE
2293: EQUAL
2294: IFTRUE 2298
2296: GO 2333
2298: POP
// begin time := 0 0$15 ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_INT 525
2306: ST_TO_ADDR
// normalTime := 0 0$15 ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_INT 525
2314: ST_TO_ADDR
// maxTime := 0 0$55 ;
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: LD_INT 1925
2322: ST_TO_ADDR
// delayTime := 0 0$2 ;
2323: LD_ADDR_VAR 0 7
2327: PUSH
2328: LD_INT 70
2330: ST_TO_ADDR
// end ; end ;
2331: GO 2334
2333: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 7
2341: PUSH
2342: LD_INT 8
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 11
2353: PUSH
2354: LD_INT 12
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// areas := [ ] ;
2365: LD_ADDR_VAR 0 5
2369: PUSH
2370: EMPTY
2371: ST_TO_ADDR
// for i := 1 to 8 do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_INT 8
2384: PUSH
2385: FOR_TO
2386: IFFALSE 2433
// begin if not mpSidePositions [ i ] then
2388: LD_EXP 5
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2385
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_VAR 0 3
2417: PUSH
2418: LD_EXP 5
2422: PUSH
2423: LD_VAR 0 1
2427: ARRAY
2428: ARRAY
2429: ADD
2430: ST_TO_ADDR
// end ;
2431: GO 2385
2433: POP
2434: POP
// x := 1 ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// repeat wait ( time ) ;
2443: LD_VAR 0 4
2447: PPUSH
2448: CALL_OW 67
// x := Inc ( x ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_VAR 0 2
2461: PPUSH
2462: CALL 42430 0 1
2466: ST_TO_ADDR
// if x > 5 then
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 5
2474: GREATER
2475: IFFALSE 2485
// x := 1 ;
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for i in areas do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_VAR 0 5
2494: PUSH
2495: FOR_IN
2496: IFFALSE 2535
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2498: LD_VAR 0 1
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 287
2510: PUSH
2511: LD_INT 20
2513: LESS
2514: IFFALSE 2533
// begin CreateCratesArea ( x , i , true ) ;
2516: LD_VAR 0 2
2520: PPUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ; end ;
2533: GO 2495
2535: POP
2536: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 287
2547: PUSH
2548: LD_INT 100
2550: LESS
2551: IFFALSE 2595
// for i := 1 to Count ( areas ) do
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: DOUBLE
2559: LD_INT 1
2561: DEC
2562: ST_TO_ADDR
2563: LD_VAR 0 5
2567: PPUSH
2568: CALL 5091 0 1
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2593
// CreateCratesArea ( x , MZBaseArea , true ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 14
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 55
2591: GO 2573
2593: POP
2594: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2595: LD_INT 15
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 287
2605: PUSH
2606: LD_INT 0
2608: EQUAL
2609: IFFALSE 2648
// begin for i := 1 to 3 do
2611: LD_ADDR_VAR 0 1
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_INT 3
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2644
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2627: LD_VAR 0 2
2631: PPUSH
2632: LD_INT 15
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 55
2642: GO 2624
2644: POP
2645: POP
// end else
2646: GO 2679
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2648: LD_INT 15
2650: PPUSH
2651: LD_INT 1
2653: PPUSH
2654: CALL_OW 287
2658: PUSH
2659: LD_INT 30
2661: LESS
2662: IFFALSE 2679
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_INT 15
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: CALL_OW 55
// time := time + delayTime ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 7
2693: PLUS
2694: ST_TO_ADDR
// if time > maxTime then
2695: LD_VAR 0 4
2699: PUSH
2700: LD_VAR 0 8
2704: GREATER
2705: IFFALSE 2717
// time := normalTime ;
2707: LD_ADDR_VAR 0 4
2711: PUSH
2712: LD_VAR 0 6
2716: ST_TO_ADDR
// until false ;
2717: LD_INT 0
2719: IFFALSE 2443
// end ; end_of_file
2721: PPOPN 8
2723: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL 56136 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: CALL 51697 0 1
// end ;
2742: PPOPN 1
2744: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL 56153 0 1
// end ;
2754: PPOPN 1
2756: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 52404 0 1
2766: PPOPN 1
2768: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 56194 0 2
2783: PPOPN 2
2785: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_VAR 0 3
2800: PPUSH
2801: CALL 52457 0 3
2805: PPOPN 3
2807: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2808: LD_VAR 0 1
2812: PPUSH
2813: LD_VAR 0 2
2817: PPUSH
2818: LD_VAR 0 3
2822: PPUSH
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_VAR 0 5
2832: PPUSH
2833: CALL 53096 0 5
2837: PPOPN 5
2839: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2840: LD_VAR 0 1
2844: PPUSH
2845: LD_VAR 0 2
2849: PPUSH
2850: LD_VAR 0 3
2854: PPUSH
2855: LD_VAR 0 4
2859: PPUSH
2860: CALL 53199 0 4
2864: PPOPN 4
2866: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2867: LD_INT 0
2869: PPUSH
2870: PPUSH
// if exist_mode then
2871: LD_VAR 0 2
2875: IFFALSE 2921
// begin unit := CreateCharacter ( prefix & ident ) ;
2877: LD_ADDR_VAR 0 5
2881: PUSH
2882: LD_VAR 0 3
2886: PUSH
2887: LD_VAR 0 1
2891: STR
2892: PPUSH
2893: CALL_OW 34
2897: ST_TO_ADDR
// if unit then
2898: LD_VAR 0 5
2902: IFFALSE 2919
// DeleteCharacters ( prefix & ident ) ;
2904: LD_VAR 0 3
2908: PUSH
2909: LD_VAR 0 1
2913: STR
2914: PPUSH
2915: CALL_OW 40
// end else
2919: GO 2936
// unit := NewCharacter ( ident ) ;
2921: LD_ADDR_VAR 0 5
2925: PUSH
2926: LD_VAR 0 1
2930: PPUSH
2931: CALL_OW 25
2935: ST_TO_ADDR
// result := unit ;
2936: LD_ADDR_VAR 0 4
2940: PUSH
2941: LD_VAR 0 5
2945: ST_TO_ADDR
// end ;
2946: LD_VAR 0 4
2950: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2951: LD_INT 0
2953: PPUSH
2954: PPUSH
// if exist_mode then
2955: LD_VAR 0 2
2959: IFFALSE 2984
// unit := CreateCharacter ( prefix & ident ) else
2961: LD_ADDR_VAR 0 5
2965: PUSH
2966: LD_VAR 0 3
2970: PUSH
2971: LD_VAR 0 1
2975: STR
2976: PPUSH
2977: CALL_OW 34
2981: ST_TO_ADDR
2982: GO 2999
// unit := NewCharacter ( ident ) ;
2984: LD_ADDR_VAR 0 5
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 25
2998: ST_TO_ADDR
// result := unit ;
2999: LD_ADDR_VAR 0 4
3003: PUSH
3004: LD_VAR 0 5
3008: ST_TO_ADDR
// end ;
3009: LD_VAR 0 4
3013: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3014: LD_INT 0
3016: PPUSH
3017: PPUSH
// if not side or not nation then
3018: LD_VAR 0 1
3022: NOT
3023: IFTRUE 3032
3025: PUSH
3026: LD_VAR 0 2
3030: NOT
3031: OR
3032: IFFALSE 3036
// exit ;
3034: GO 3830
// case nation of nation_american :
3036: LD_VAR 0 2
3040: PUSH
3041: LD_INT 1
3043: DOUBLE
3044: EQUAL
3045: IFTRUE 3049
3047: GO 3271
3049: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: LD_INT 35
3057: PUSH
3058: LD_INT 45
3060: PUSH
3061: LD_INT 46
3063: PUSH
3064: LD_INT 47
3066: PUSH
3067: LD_INT 82
3069: PUSH
3070: LD_INT 83
3072: PUSH
3073: LD_INT 84
3075: PUSH
3076: LD_INT 85
3078: PUSH
3079: LD_INT 86
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: LD_INT 2
3087: PUSH
3088: LD_INT 6
3090: PUSH
3091: LD_INT 15
3093: PUSH
3094: LD_INT 16
3096: PUSH
3097: LD_INT 7
3099: PUSH
3100: LD_INT 12
3102: PUSH
3103: LD_INT 13
3105: PUSH
3106: LD_INT 10
3108: PUSH
3109: LD_INT 14
3111: PUSH
3112: LD_INT 20
3114: PUSH
3115: LD_INT 21
3117: PUSH
3118: LD_INT 22
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 32
3126: PUSH
3127: LD_INT 27
3129: PUSH
3130: LD_INT 36
3132: PUSH
3133: LD_INT 69
3135: PUSH
3136: LD_INT 39
3138: PUSH
3139: LD_INT 34
3141: PUSH
3142: LD_INT 40
3144: PUSH
3145: LD_INT 48
3147: PUSH
3148: LD_INT 49
3150: PUSH
3151: LD_INT 50
3153: PUSH
3154: LD_INT 51
3156: PUSH
3157: LD_INT 52
3159: PUSH
3160: LD_INT 53
3162: PUSH
3163: LD_INT 54
3165: PUSH
3166: LD_INT 55
3168: PUSH
3169: LD_INT 56
3171: PUSH
3172: LD_INT 57
3174: PUSH
3175: LD_INT 58
3177: PUSH
3178: LD_INT 59
3180: PUSH
3181: LD_INT 60
3183: PUSH
3184: LD_INT 61
3186: PUSH
3187: LD_INT 62
3189: PUSH
3190: LD_INT 80
3192: PUSH
3193: LD_INT 82
3195: PUSH
3196: LD_INT 83
3198: PUSH
3199: LD_INT 84
3201: PUSH
3202: LD_INT 85
3204: PUSH
3205: LD_INT 86
3207: PUSH
3208: LD_INT 90
3210: PUSH
3211: LD_INT 93
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: ST_TO_ADDR
3269: GO 3752
3271: LD_INT 2
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3513
3279: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3280: LD_ADDR_VAR 0 4
3284: PUSH
3285: LD_INT 35
3287: PUSH
3288: LD_INT 45
3290: PUSH
3291: LD_INT 46
3293: PUSH
3294: LD_INT 47
3296: PUSH
3297: LD_INT 82
3299: PUSH
3300: LD_INT 83
3302: PUSH
3303: LD_INT 84
3305: PUSH
3306: LD_INT 85
3308: PUSH
3309: LD_INT 87
3311: PUSH
3312: LD_INT 70
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: LD_INT 11
3320: PUSH
3321: LD_INT 3
3323: PUSH
3324: LD_INT 4
3326: PUSH
3327: LD_INT 5
3329: PUSH
3330: LD_INT 6
3332: PUSH
3333: LD_INT 15
3335: PUSH
3336: LD_INT 18
3338: PUSH
3339: LD_INT 7
3341: PUSH
3342: LD_INT 17
3344: PUSH
3345: LD_INT 8
3347: PUSH
3348: LD_INT 20
3350: PUSH
3351: LD_INT 21
3353: PUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 72
3359: PUSH
3360: LD_INT 26
3362: PUSH
3363: LD_INT 69
3365: PUSH
3366: LD_INT 39
3368: PUSH
3369: LD_INT 40
3371: PUSH
3372: LD_INT 41
3374: PUSH
3375: LD_INT 42
3377: PUSH
3378: LD_INT 43
3380: PUSH
3381: LD_INT 48
3383: PUSH
3384: LD_INT 49
3386: PUSH
3387: LD_INT 50
3389: PUSH
3390: LD_INT 51
3392: PUSH
3393: LD_INT 52
3395: PUSH
3396: LD_INT 53
3398: PUSH
3399: LD_INT 54
3401: PUSH
3402: LD_INT 55
3404: PUSH
3405: LD_INT 56
3407: PUSH
3408: LD_INT 60
3410: PUSH
3411: LD_INT 61
3413: PUSH
3414: LD_INT 62
3416: PUSH
3417: LD_INT 66
3419: PUSH
3420: LD_INT 67
3422: PUSH
3423: LD_INT 68
3425: PUSH
3426: LD_INT 81
3428: PUSH
3429: LD_INT 82
3431: PUSH
3432: LD_INT 83
3434: PUSH
3435: LD_INT 84
3437: PUSH
3438: LD_INT 85
3440: PUSH
3441: LD_INT 87
3443: PUSH
3444: LD_INT 88
3446: PUSH
3447: LD_INT 92
3449: PUSH
3450: LD_INT 94
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: ST_TO_ADDR
3511: GO 3752
3513: LD_INT 3
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3751
3521: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3522: LD_ADDR_VAR 0 4
3526: PUSH
3527: LD_INT 46
3529: PUSH
3530: LD_INT 47
3532: PUSH
3533: LD_INT 1
3535: PUSH
3536: LD_INT 2
3538: PUSH
3539: LD_INT 82
3541: PUSH
3542: LD_INT 83
3544: PUSH
3545: LD_INT 84
3547: PUSH
3548: LD_INT 85
3550: PUSH
3551: LD_INT 86
3553: PUSH
3554: LD_INT 11
3556: PUSH
3557: LD_INT 9
3559: PUSH
3560: LD_INT 20
3562: PUSH
3563: LD_INT 19
3565: PUSH
3566: LD_INT 21
3568: PUSH
3569: LD_INT 24
3571: PUSH
3572: LD_INT 22
3574: PUSH
3575: LD_INT 25
3577: PUSH
3578: LD_INT 28
3580: PUSH
3581: LD_INT 29
3583: PUSH
3584: LD_INT 30
3586: PUSH
3587: LD_INT 31
3589: PUSH
3590: LD_INT 37
3592: PUSH
3593: LD_INT 38
3595: PUSH
3596: LD_INT 32
3598: PUSH
3599: LD_INT 27
3601: PUSH
3602: LD_INT 33
3604: PUSH
3605: LD_INT 69
3607: PUSH
3608: LD_INT 39
3610: PUSH
3611: LD_INT 34
3613: PUSH
3614: LD_INT 40
3616: PUSH
3617: LD_INT 71
3619: PUSH
3620: LD_INT 23
3622: PUSH
3623: LD_INT 44
3625: PUSH
3626: LD_INT 48
3628: PUSH
3629: LD_INT 49
3631: PUSH
3632: LD_INT 50
3634: PUSH
3635: LD_INT 51
3637: PUSH
3638: LD_INT 52
3640: PUSH
3641: LD_INT 53
3643: PUSH
3644: LD_INT 54
3646: PUSH
3647: LD_INT 55
3649: PUSH
3650: LD_INT 56
3652: PUSH
3653: LD_INT 57
3655: PUSH
3656: LD_INT 58
3658: PUSH
3659: LD_INT 59
3661: PUSH
3662: LD_INT 63
3664: PUSH
3665: LD_INT 64
3667: PUSH
3668: LD_INT 65
3670: PUSH
3671: LD_INT 82
3673: PUSH
3674: LD_INT 83
3676: PUSH
3677: LD_INT 84
3679: PUSH
3680: LD_INT 85
3682: PUSH
3683: LD_INT 86
3685: PUSH
3686: LD_INT 89
3688: PUSH
3689: LD_INT 91
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: ST_TO_ADDR
3749: GO 3752
3751: POP
// if state > - 1 and state < 3 then
3752: LD_VAR 0 3
3756: PUSH
3757: LD_INT 1
3759: NEG
3760: GREATER
3761: IFFALSE 3773
3763: PUSH
3764: LD_VAR 0 3
3768: PUSH
3769: LD_INT 3
3771: LESS
3772: AND
3773: IFFALSE 3830
// for i in result do
3775: LD_ADDR_VAR 0 5
3779: PUSH
3780: LD_VAR 0 4
3784: PUSH
3785: FOR_IN
3786: IFFALSE 3828
// if GetTech ( i , side ) <> state then
3788: LD_VAR 0 5
3792: PPUSH
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 321
3802: PUSH
3803: LD_VAR 0 3
3807: NONEQUAL
3808: IFFALSE 3826
// result := result diff i ;
3810: LD_ADDR_VAR 0 4
3814: PUSH
3815: LD_VAR 0 4
3819: PUSH
3820: LD_VAR 0 5
3824: DIFF
3825: ST_TO_ADDR
3826: GO 3785
3828: POP
3829: POP
// end ;
3830: LD_VAR 0 4
3834: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3835: LD_INT 0
3837: PPUSH
3838: PPUSH
3839: PPUSH
// result := true ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: LD_VAR 0 2
3857: PPUSH
3858: CALL_OW 480
3862: ST_TO_ADDR
// if not tmp then
3863: LD_VAR 0 5
3867: NOT
3868: IFFALSE 3872
// exit ;
3870: GO 3921
// for i in tmp do
3872: LD_ADDR_VAR 0 4
3876: PUSH
3877: LD_VAR 0 5
3881: PUSH
3882: FOR_IN
3883: IFFALSE 3919
// if GetTech ( i , side ) <> state_researched then
3885: LD_VAR 0 4
3889: PPUSH
3890: LD_VAR 0 1
3894: PPUSH
3895: CALL_OW 321
3899: PUSH
3900: LD_INT 2
3902: NONEQUAL
3903: IFFALSE 3917
// begin result := false ;
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: LD_INT 0
3912: ST_TO_ADDR
// exit ;
3913: POP
3914: POP
3915: GO 3921
// end ;
3917: GO 3882
3919: POP
3920: POP
// end ;
3921: LD_VAR 0 3
3925: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3926: LD_INT 0
3928: PPUSH
3929: PPUSH
3930: PPUSH
3931: PPUSH
3932: PPUSH
3933: PPUSH
3934: PPUSH
3935: PPUSH
3936: PPUSH
3937: PPUSH
3938: PPUSH
3939: PPUSH
3940: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3941: LD_VAR 0 1
3945: NOT
3946: IFTRUE 3963
3948: PUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: CALL_OW 257
3958: PUSH
3959: LD_INT 9
3961: NONEQUAL
3962: OR
3963: IFFALSE 3967
// exit ;
3965: GO 4546
// side := GetSide ( unit ) ;
3967: LD_ADDR_VAR 0 9
3971: PUSH
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 255
3981: ST_TO_ADDR
// tech_space := tech_spacanom ;
3982: LD_ADDR_VAR 0 12
3986: PUSH
3987: LD_INT 29
3989: ST_TO_ADDR
// tech_time := tech_taurad ;
3990: LD_ADDR_VAR 0 13
3994: PUSH
3995: LD_INT 28
3997: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3998: LD_ADDR_VAR 0 11
4002: PUSH
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 310
4012: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4013: LD_VAR 0 11
4017: PPUSH
4018: CALL_OW 247
4022: PUSH
4023: LD_INT 2
4025: EQUAL
4026: IFFALSE 4030
// exit ;
4028: GO 4546
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4030: LD_ADDR_VAR 0 8
4034: PUSH
4035: LD_INT 81
4037: PUSH
4038: LD_VAR 0 9
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: LD_INT 3
4049: PUSH
4050: LD_INT 21
4052: PUSH
4053: LD_INT 3
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: ST_TO_ADDR
// if not tmp then
4073: LD_VAR 0 8
4077: NOT
4078: IFFALSE 4082
// exit ;
4080: GO 4546
// if in_unit then
4082: LD_VAR 0 11
4086: IFFALSE 4110
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4088: LD_ADDR_VAR 0 10
4092: PUSH
4093: LD_VAR 0 8
4097: PPUSH
4098: LD_VAR 0 11
4102: PPUSH
4103: CALL_OW 74
4107: ST_TO_ADDR
4108: GO 4130
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4110: LD_ADDR_VAR 0 10
4114: PUSH
4115: LD_VAR 0 8
4119: PPUSH
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 74
4129: ST_TO_ADDR
// if not enemy then
4130: LD_VAR 0 10
4134: NOT
4135: IFFALSE 4139
// exit ;
4137: GO 4546
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4139: LD_VAR 0 11
4143: IFFALSE 4165
4145: PUSH
4146: LD_VAR 0 11
4150: PPUSH
4151: LD_VAR 0 10
4155: PPUSH
4156: CALL_OW 296
4160: PUSH
4161: LD_INT 13
4163: GREATER
4164: AND
4165: IFTRUE 4187
4167: PUSH
4168: LD_VAR 0 1
4172: PPUSH
4173: LD_VAR 0 10
4177: PPUSH
4178: CALL_OW 296
4182: PUSH
4183: LD_INT 12
4185: GREATER
4186: OR
4187: IFFALSE 4191
// exit ;
4189: GO 4546
// missile := [ 1 ] ;
4191: LD_ADDR_VAR 0 14
4195: PUSH
4196: LD_INT 1
4198: PUSH
4199: EMPTY
4200: LIST
4201: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4202: LD_VAR 0 9
4206: PPUSH
4207: LD_VAR 0 12
4211: PPUSH
4212: CALL_OW 325
4216: IFFALSE 4245
// missile := Replace ( missile , missile + 1 , 2 ) ;
4218: LD_ADDR_VAR 0 14
4222: PUSH
4223: LD_VAR 0 14
4227: PPUSH
4228: LD_VAR 0 14
4232: PUSH
4233: LD_INT 1
4235: PLUS
4236: PPUSH
4237: LD_INT 2
4239: PPUSH
4240: CALL_OW 1
4244: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4245: LD_VAR 0 9
4249: PPUSH
4250: LD_VAR 0 13
4254: PPUSH
4255: CALL_OW 325
4259: IFFALSE 4283
4261: PUSH
4262: LD_VAR 0 10
4266: PPUSH
4267: CALL_OW 255
4271: PPUSH
4272: LD_VAR 0 13
4276: PPUSH
4277: CALL_OW 325
4281: NOT
4282: AND
4283: IFFALSE 4312
// missile := Replace ( missile , missile + 1 , 3 ) ;
4285: LD_ADDR_VAR 0 14
4289: PUSH
4290: LD_VAR 0 14
4294: PPUSH
4295: LD_VAR 0 14
4299: PUSH
4300: LD_INT 1
4302: PLUS
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 1
4311: ST_TO_ADDR
// if missile < 2 then
4312: LD_VAR 0 14
4316: PUSH
4317: LD_INT 2
4319: LESS
4320: IFFALSE 4324
// exit ;
4322: GO 4546
// x := GetX ( enemy ) ;
4324: LD_ADDR_VAR 0 4
4328: PUSH
4329: LD_VAR 0 10
4333: PPUSH
4334: CALL_OW 250
4338: ST_TO_ADDR
// y := GetY ( enemy ) ;
4339: LD_ADDR_VAR 0 5
4343: PUSH
4344: LD_VAR 0 10
4348: PPUSH
4349: CALL_OW 251
4353: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4354: LD_ADDR_VAR 0 6
4358: PUSH
4359: LD_VAR 0 4
4363: PUSH
4364: LD_INT 1
4366: NEG
4367: PPUSH
4368: LD_INT 1
4370: PPUSH
4371: CALL_OW 12
4375: PLUS
4376: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4377: LD_ADDR_VAR 0 7
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_INT 1
4389: NEG
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL_OW 12
4398: PLUS
4399: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4400: LD_VAR 0 6
4404: PPUSH
4405: LD_VAR 0 7
4409: PPUSH
4410: CALL_OW 488
4414: NOT
4415: IFFALSE 4437
// begin _x := x ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_VAR 0 4
4426: ST_TO_ADDR
// _y := y ;
4427: LD_ADDR_VAR 0 7
4431: PUSH
4432: LD_VAR 0 5
4436: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: LD_INT 1
4444: PPUSH
4445: LD_VAR 0 14
4449: PPUSH
4450: CALL_OW 12
4454: ST_TO_ADDR
// case i of 1 :
4455: LD_VAR 0 3
4459: PUSH
4460: LD_INT 1
4462: DOUBLE
4463: EQUAL
4464: IFTRUE 4468
4466: GO 4485
4468: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4469: LD_VAR 0 1
4473: PPUSH
4474: LD_VAR 0 10
4478: PPUSH
4479: CALL_OW 115
4483: GO 4546
4485: LD_INT 2
4487: DOUBLE
4488: EQUAL
4489: IFTRUE 4493
4491: GO 4515
4493: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4494: LD_VAR 0 1
4498: PPUSH
4499: LD_VAR 0 6
4503: PPUSH
4504: LD_VAR 0 7
4508: PPUSH
4509: CALL_OW 153
4513: GO 4546
4515: LD_INT 3
4517: DOUBLE
4518: EQUAL
4519: IFTRUE 4523
4521: GO 4545
4523: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4524: LD_VAR 0 1
4528: PPUSH
4529: LD_VAR 0 6
4533: PPUSH
4534: LD_VAR 0 7
4538: PPUSH
4539: CALL_OW 154
4543: GO 4546
4545: POP
// end ;
4546: LD_VAR 0 2
4550: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// if not unit or not building then
4559: LD_VAR 0 1
4563: NOT
4564: IFTRUE 4573
4566: PUSH
4567: LD_VAR 0 2
4571: NOT
4572: OR
4573: IFFALSE 4577
// exit ;
4575: GO 4735
// x := GetX ( building ) ;
4577: LD_ADDR_VAR 0 5
4581: PUSH
4582: LD_VAR 0 2
4586: PPUSH
4587: CALL_OW 250
4591: ST_TO_ADDR
// y := GetY ( building ) ;
4592: LD_ADDR_VAR 0 6
4596: PUSH
4597: LD_VAR 0 2
4601: PPUSH
4602: CALL_OW 251
4606: ST_TO_ADDR
// for i := 0 to 5 do
4607: LD_ADDR_VAR 0 4
4611: PUSH
4612: DOUBLE
4613: LD_INT 0
4615: DEC
4616: ST_TO_ADDR
4617: LD_INT 5
4619: PUSH
4620: FOR_TO
4621: IFFALSE 4733
// begin _x := ShiftX ( x , i , 3 ) ;
4623: LD_ADDR_VAR 0 7
4627: PUSH
4628: LD_VAR 0 5
4632: PPUSH
4633: LD_VAR 0 4
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 272
4645: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4646: LD_ADDR_VAR 0 8
4650: PUSH
4651: LD_VAR 0 6
4655: PPUSH
4656: LD_VAR 0 4
4660: PPUSH
4661: LD_INT 3
4663: PPUSH
4664: CALL_OW 273
4668: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4669: LD_VAR 0 7
4673: PPUSH
4674: LD_VAR 0 8
4678: PPUSH
4679: CALL_OW 488
4683: NOT
4684: IFFALSE 4688
// continue ;
4686: GO 4620
// if HexInfo ( _x , _y ) = 0 then
4688: LD_VAR 0 7
4692: PPUSH
4693: LD_VAR 0 8
4697: PPUSH
4698: CALL_OW 428
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: IFFALSE 4731
// begin ComMoveXY ( unit , _x , _y ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_VAR 0 7
4717: PPUSH
4718: LD_VAR 0 8
4722: PPUSH
4723: CALL_OW 111
// exit ;
4727: POP
4728: POP
4729: GO 4735
// end ; end ;
4731: GO 4620
4733: POP
4734: POP
// end ;
4735: LD_VAR 0 3
4739: RET
// export function ScanBase ( side , base_area ) ; begin
4740: LD_INT 0
4742: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4743: LD_ADDR_VAR 0 3
4747: PUSH
4748: LD_VAR 0 2
4752: PPUSH
4753: LD_INT 81
4755: PUSH
4756: LD_VAR 0 1
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PPUSH
4765: CALL_OW 70
4769: ST_TO_ADDR
// end ;
4770: LD_VAR 0 3
4774: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4775: LD_INT 0
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// result := false ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_INT 0
4788: ST_TO_ADDR
// side := GetSide ( unit ) ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 255
4803: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4804: LD_ADDR_VAR 0 4
4808: PUSH
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 248
4818: ST_TO_ADDR
// case nat of 1 :
4819: LD_VAR 0 4
4823: PUSH
4824: LD_INT 1
4826: DOUBLE
4827: EQUAL
4828: IFTRUE 4832
4830: GO 4843
4832: POP
// tech := tech_lassight ; 2 :
4833: LD_ADDR_VAR 0 5
4837: PUSH
4838: LD_INT 12
4840: ST_TO_ADDR
4841: GO 4882
4843: LD_INT 2
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4851
4849: GO 4862
4851: POP
// tech := tech_mortar ; 3 :
4852: LD_ADDR_VAR 0 5
4856: PUSH
4857: LD_INT 41
4859: ST_TO_ADDR
4860: GO 4882
4862: LD_INT 3
4864: DOUBLE
4865: EQUAL
4866: IFTRUE 4870
4868: GO 4881
4870: POP
// tech := tech_bazooka ; end ;
4871: LD_ADDR_VAR 0 5
4875: PUSH
4876: LD_INT 44
4878: ST_TO_ADDR
4879: GO 4882
4881: POP
// if Researched ( side , tech ) then
4882: LD_VAR 0 3
4886: PPUSH
4887: LD_VAR 0 5
4891: PPUSH
4892: CALL_OW 325
4896: IFFALSE 4923
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4898: LD_ADDR_VAR 0 2
4902: PUSH
4903: LD_INT 5
4905: PUSH
4906: LD_INT 8
4908: PUSH
4909: LD_INT 9
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_VAR 0 4
4921: ARRAY
4922: ST_TO_ADDR
// end ;
4923: LD_VAR 0 2
4927: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4928: LD_INT 0
4930: PPUSH
4931: PPUSH
4932: PPUSH
// if not mines then
4933: LD_VAR 0 2
4937: NOT
4938: IFFALSE 4942
// exit ;
4940: GO 5086
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4942: LD_ADDR_VAR 0 5
4946: PUSH
4947: LD_INT 81
4949: PUSH
4950: LD_VAR 0 1
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 21
4964: PUSH
4965: LD_INT 3
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: ST_TO_ADDR
// for i in mines do
4985: LD_ADDR_VAR 0 4
4989: PUSH
4990: LD_VAR 0 2
4994: PUSH
4995: FOR_IN
4996: IFFALSE 5084
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4998: LD_VAR 0 4
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: LD_VAR 0 4
5011: PUSH
5012: LD_INT 2
5014: ARRAY
5015: PPUSH
5016: CALL_OW 458
5020: NOT
5021: IFFALSE 5025
// continue ;
5023: GO 4995
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5025: LD_VAR 0 4
5029: PUSH
5030: LD_INT 1
5032: ARRAY
5033: PPUSH
5034: LD_VAR 0 4
5038: PUSH
5039: LD_INT 2
5041: ARRAY
5042: PPUSH
5043: CALL_OW 428
5047: PUSH
5048: LD_VAR 0 5
5052: IN
5053: IFFALSE 5082
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5055: LD_VAR 0 4
5059: PUSH
5060: LD_INT 1
5062: ARRAY
5063: PPUSH
5064: LD_VAR 0 4
5068: PUSH
5069: LD_INT 2
5071: ARRAY
5072: PPUSH
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 456
// end ;
5082: GO 4995
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 3
5090: RET
// export function Count ( array ) ; begin
5091: LD_INT 0
5093: PPUSH
// result := array + 0 ;
5094: LD_ADDR_VAR 0 2
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 0
5106: PLUS
5107: ST_TO_ADDR
// end ;
5108: LD_VAR 0 2
5112: RET
// export function IsEmpty ( building ) ; begin
5113: LD_INT 0
5115: PPUSH
// if not building then
5116: LD_VAR 0 1
5120: NOT
5121: IFFALSE 5125
// exit ;
5123: GO 5168
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 1
5134: PUSH
5135: LD_INT 22
5137: PUSH
5138: LD_VAR 0 1
5142: PPUSH
5143: CALL_OW 255
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 58
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PPUSH
5162: CALL_OW 69
5166: IN
5167: ST_TO_ADDR
// end ;
5168: LD_VAR 0 2
5172: RET
// export function IsNotFull ( building ) ; var places ; begin
5173: LD_INT 0
5175: PPUSH
5176: PPUSH
// if not building then
5177: LD_VAR 0 1
5181: NOT
5182: IFFALSE 5186
// exit ;
5184: GO 5214
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5186: LD_ADDR_VAR 0 2
5190: PUSH
5191: LD_VAR 0 1
5195: PPUSH
5196: LD_INT 3
5198: PUSH
5199: LD_INT 62
5201: PUSH
5202: EMPTY
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 72
5213: ST_TO_ADDR
// end ;
5214: LD_VAR 0 2
5218: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
// tmp := [ ] ;
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: EMPTY
5231: ST_TO_ADDR
// list := [ ] ;
5232: LD_ADDR_VAR 0 5
5236: PUSH
5237: EMPTY
5238: ST_TO_ADDR
// for i = 16 to 25 do
5239: LD_ADDR_VAR 0 4
5243: PUSH
5244: DOUBLE
5245: LD_INT 16
5247: DEC
5248: ST_TO_ADDR
5249: LD_INT 25
5251: PUSH
5252: FOR_TO
5253: IFFALSE 5326
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5255: LD_ADDR_VAR 0 3
5259: PUSH
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_VAR 0 1
5272: PPUSH
5273: CALL_OW 255
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 91
5284: PUSH
5285: LD_VAR 0 1
5289: PUSH
5290: LD_INT 6
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 30
5300: PUSH
5301: LD_VAR 0 4
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: PPUSH
5318: CALL_OW 69
5322: ADD
5323: ST_TO_ADDR
5324: GO 5252
5326: POP
5327: POP
// for i = 1 to tmp do
5328: LD_ADDR_VAR 0 4
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_VAR 0 3
5342: PUSH
5343: FOR_TO
5344: IFFALSE 5432
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5346: LD_ADDR_VAR 0 5
5350: PUSH
5351: LD_VAR 0 5
5355: PUSH
5356: LD_VAR 0 3
5360: PUSH
5361: LD_VAR 0 4
5365: ARRAY
5366: PPUSH
5367: CALL_OW 266
5371: PUSH
5372: LD_VAR 0 3
5376: PUSH
5377: LD_VAR 0 4
5381: ARRAY
5382: PPUSH
5383: CALL_OW 250
5387: PUSH
5388: LD_VAR 0 3
5392: PUSH
5393: LD_VAR 0 4
5397: ARRAY
5398: PPUSH
5399: CALL_OW 251
5403: PUSH
5404: LD_VAR 0 3
5408: PUSH
5409: LD_VAR 0 4
5413: ARRAY
5414: PPUSH
5415: CALL_OW 254
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: ADD
5429: ST_TO_ADDR
5430: GO 5343
5432: POP
5433: POP
// result := list ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: LD_VAR 0 5
5443: ST_TO_ADDR
// end ;
5444: LD_VAR 0 2
5448: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5449: LD_INT 0
5451: PPUSH
5452: PPUSH
5453: PPUSH
5454: PPUSH
5455: PPUSH
5456: PPUSH
5457: PPUSH
// if not factory then
5458: LD_VAR 0 1
5462: NOT
5463: IFFALSE 5467
// exit ;
5465: GO 6070
// if control = control_apeman then
5467: LD_VAR 0 4
5471: PUSH
5472: LD_INT 5
5474: EQUAL
5475: IFFALSE 5584
// begin tmp := UnitsInside ( factory ) ;
5477: LD_ADDR_VAR 0 8
5481: PUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL_OW 313
5491: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5492: LD_VAR 0 8
5496: PPUSH
5497: LD_INT 25
5499: PUSH
5500: LD_INT 12
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 72
5511: NOT
5512: IFFALSE 5522
// control := control_manual ;
5514: LD_ADDR_VAR 0 4
5518: PUSH
5519: LD_INT 1
5521: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5522: LD_ADDR_VAR 0 8
5526: PUSH
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL 5219 0 1
5536: ST_TO_ADDR
// if tmp then
5537: LD_VAR 0 8
5541: IFFALSE 5584
// begin for i in tmp do
5543: LD_ADDR_VAR 0 7
5547: PUSH
5548: LD_VAR 0 8
5552: PUSH
5553: FOR_IN
5554: IFFALSE 5582
// if i [ 1 ] = b_ext_radio then
5556: LD_VAR 0 7
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PUSH
5565: LD_INT 22
5567: EQUAL
5568: IFFALSE 5580
// begin control := control_remote ;
5570: LD_ADDR_VAR 0 4
5574: PUSH
5575: LD_INT 2
5577: ST_TO_ADDR
// break ;
5578: GO 5582
// end ;
5580: GO 5553
5582: POP
5583: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5584: LD_VAR 0 1
5588: PPUSH
5589: LD_VAR 0 2
5593: PPUSH
5594: LD_VAR 0 3
5598: PPUSH
5599: LD_VAR 0 4
5603: PPUSH
5604: LD_VAR 0 5
5608: PPUSH
5609: CALL_OW 448
5613: IFFALSE 5648
// begin result := [ chassis , engine , control , weapon ] ;
5615: LD_ADDR_VAR 0 6
5619: PUSH
5620: LD_VAR 0 2
5624: PUSH
5625: LD_VAR 0 3
5629: PUSH
5630: LD_VAR 0 4
5634: PUSH
5635: LD_VAR 0 5
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: ST_TO_ADDR
// exit ;
5646: GO 6070
// end ; _chassis := AvailableChassisList ( factory ) ;
5648: LD_ADDR_VAR 0 9
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: CALL_OW 475
5662: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5663: LD_ADDR_VAR 0 11
5667: PUSH
5668: LD_VAR 0 1
5672: PPUSH
5673: CALL_OW 476
5677: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5678: LD_ADDR_VAR 0 12
5682: PUSH
5683: LD_VAR 0 1
5687: PPUSH
5688: CALL_OW 477
5692: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5693: LD_ADDR_VAR 0 10
5697: PUSH
5698: LD_VAR 0 1
5702: PPUSH
5703: CALL_OW 478
5707: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5708: LD_VAR 0 9
5712: NOT
5713: IFTRUE 5722
5715: PUSH
5716: LD_VAR 0 11
5720: NOT
5721: OR
5722: IFTRUE 5731
5724: PUSH
5725: LD_VAR 0 12
5729: NOT
5730: OR
5731: IFTRUE 5740
5733: PUSH
5734: LD_VAR 0 10
5738: NOT
5739: OR
5740: IFFALSE 5775
// begin result := [ chassis , engine , control , weapon ] ;
5742: LD_ADDR_VAR 0 6
5746: PUSH
5747: LD_VAR 0 2
5751: PUSH
5752: LD_VAR 0 3
5756: PUSH
5757: LD_VAR 0 4
5761: PUSH
5762: LD_VAR 0 5
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: ST_TO_ADDR
// exit ;
5773: GO 6070
// end ; if not chassis in _chassis then
5775: LD_VAR 0 2
5779: PUSH
5780: LD_VAR 0 9
5784: IN
5785: NOT
5786: IFFALSE 5812
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_VAR 0 9
5797: PUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_VAR 0 9
5805: PPUSH
5806: CALL_OW 12
5810: ARRAY
5811: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5812: LD_VAR 0 2
5816: PPUSH
5817: LD_VAR 0 3
5821: PPUSH
5822: CALL 6075 0 2
5826: NOT
5827: IFFALSE 5888
// repeat engine := _engine [ 1 ] ;
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_VAR 0 11
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5843: LD_ADDR_VAR 0 11
5847: PUSH
5848: LD_VAR 0 11
5852: PPUSH
5853: LD_INT 1
5855: PPUSH
5856: CALL_OW 3
5860: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5861: LD_VAR 0 2
5865: PPUSH
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL 6075 0 2
5875: IFTRUE 5886
5877: PUSH
5878: LD_VAR 0 11
5882: PUSH
5883: EMPTY
5884: EQUAL
5885: OR
5886: IFFALSE 5829
// if not control in _control then
5888: LD_VAR 0 4
5892: PUSH
5893: LD_VAR 0 12
5897: IN
5898: NOT
5899: IFFALSE 5925
// control := _control [ rand ( 1 , _control ) ] ;
5901: LD_ADDR_VAR 0 4
5905: PUSH
5906: LD_VAR 0 12
5910: PUSH
5911: LD_INT 1
5913: PPUSH
5914: LD_VAR 0 12
5918: PPUSH
5919: CALL_OW 12
5923: ARRAY
5924: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5925: LD_VAR 0 2
5929: PPUSH
5930: LD_VAR 0 5
5934: PPUSH
5935: CALL 6297 0 2
5939: NOT
5940: IFFALSE 6001
// repeat weapon := _weapon [ 1 ] ;
5942: LD_ADDR_VAR 0 5
5946: PUSH
5947: LD_VAR 0 10
5951: PUSH
5952: LD_INT 1
5954: ARRAY
5955: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5956: LD_ADDR_VAR 0 10
5960: PUSH
5961: LD_VAR 0 10
5965: PPUSH
5966: LD_INT 1
5968: PPUSH
5969: CALL_OW 3
5973: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5974: LD_VAR 0 2
5978: PPUSH
5979: LD_VAR 0 5
5983: PPUSH
5984: CALL 6297 0 2
5988: IFTRUE 5999
5990: PUSH
5991: LD_VAR 0 10
5995: PUSH
5996: EMPTY
5997: EQUAL
5998: OR
5999: IFFALSE 5942
// result := [ ] ;
6001: LD_ADDR_VAR 0 6
6005: PUSH
6006: EMPTY
6007: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_VAR 0 2
6017: PPUSH
6018: LD_VAR 0 3
6022: PPUSH
6023: LD_VAR 0 4
6027: PPUSH
6028: LD_VAR 0 5
6032: PPUSH
6033: CALL_OW 448
6037: IFFALSE 6070
// result := [ chassis , engine , control , weapon ] ;
6039: LD_ADDR_VAR 0 6
6043: PUSH
6044: LD_VAR 0 2
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: LD_VAR 0 4
6058: PUSH
6059: LD_VAR 0 5
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: ST_TO_ADDR
// end ;
6070: LD_VAR 0 6
6074: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6075: LD_INT 0
6077: PPUSH
// if not chassis or not engine then
6078: LD_VAR 0 1
6082: NOT
6083: IFTRUE 6092
6085: PUSH
6086: LD_VAR 0 2
6090: NOT
6091: OR
6092: IFFALSE 6096
// exit ;
6094: GO 6292
// case engine of engine_solar :
6096: LD_VAR 0 2
6100: PUSH
6101: LD_INT 2
6103: DOUBLE
6104: EQUAL
6105: IFTRUE 6109
6107: GO 6147
6109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6110: LD_ADDR_VAR 0 3
6114: PUSH
6115: LD_INT 11
6117: PUSH
6118: LD_INT 12
6120: PUSH
6121: LD_INT 13
6123: PUSH
6124: LD_INT 14
6126: PUSH
6127: LD_INT 1
6129: PUSH
6130: LD_INT 2
6132: PUSH
6133: LD_INT 3
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: ST_TO_ADDR
6145: GO 6276
6147: LD_INT 1
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6217
6155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6156: LD_ADDR_VAR 0 3
6160: PUSH
6161: LD_INT 11
6163: PUSH
6164: LD_INT 12
6166: PUSH
6167: LD_INT 13
6169: PUSH
6170: LD_INT 14
6172: PUSH
6173: LD_INT 1
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 4
6184: PUSH
6185: LD_INT 5
6187: PUSH
6188: LD_INT 21
6190: PUSH
6191: LD_INT 23
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 24
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: ST_TO_ADDR
6215: GO 6276
6217: LD_INT 3
6219: DOUBLE
6220: EQUAL
6221: IFTRUE 6225
6223: GO 6275
6225: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6226: LD_ADDR_VAR 0 3
6230: PUSH
6231: LD_INT 13
6233: PUSH
6234: LD_INT 14
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: LD_INT 4
6245: PUSH
6246: LD_INT 5
6248: PUSH
6249: LD_INT 21
6251: PUSH
6252: LD_INT 22
6254: PUSH
6255: LD_INT 23
6257: PUSH
6258: LD_INT 24
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: ST_TO_ADDR
6273: GO 6276
6275: POP
// result := ( chassis in result ) ;
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_VAR 0 1
6285: PUSH
6286: LD_VAR 0 3
6290: IN
6291: ST_TO_ADDR
// end ;
6292: LD_VAR 0 3
6296: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6297: LD_INT 0
6299: PPUSH
// if not chassis or not weapon then
6300: LD_VAR 0 1
6304: NOT
6305: IFTRUE 6314
6307: PUSH
6308: LD_VAR 0 2
6312: NOT
6313: OR
6314: IFFALSE 6318
// exit ;
6316: GO 7412
// case weapon of us_machine_gun :
6318: LD_VAR 0 2
6322: PUSH
6323: LD_INT 2
6325: DOUBLE
6326: EQUAL
6327: IFTRUE 6331
6329: GO 6361
6331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6332: LD_ADDR_VAR 0 3
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: LD_INT 2
6342: PUSH
6343: LD_INT 3
6345: PUSH
6346: LD_INT 4
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: ST_TO_ADDR
6359: GO 7396
6361: LD_INT 3
6363: DOUBLE
6364: EQUAL
6365: IFTRUE 6369
6367: GO 6399
6369: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 3
6383: PUSH
6384: LD_INT 4
6386: PUSH
6387: LD_INT 5
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: ST_TO_ADDR
6397: GO 7396
6399: LD_INT 11
6401: DOUBLE
6402: EQUAL
6403: IFTRUE 6407
6405: GO 6437
6407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 1
6415: PUSH
6416: LD_INT 2
6418: PUSH
6419: LD_INT 3
6421: PUSH
6422: LD_INT 4
6424: PUSH
6425: LD_INT 5
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: ST_TO_ADDR
6435: GO 7396
6437: LD_INT 4
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6471
6445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6446: LD_ADDR_VAR 0 3
6450: PUSH
6451: LD_INT 2
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: LD_INT 4
6459: PUSH
6460: LD_INT 5
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: ST_TO_ADDR
6469: GO 7396
6471: LD_INT 5
6473: DOUBLE
6474: EQUAL
6475: IFTRUE 6479
6477: GO 6505
6479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6480: LD_ADDR_VAR 0 3
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: LD_INT 3
6490: PUSH
6491: LD_INT 4
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: ST_TO_ADDR
6503: GO 7396
6505: LD_INT 9
6507: DOUBLE
6508: EQUAL
6509: IFTRUE 6513
6511: GO 6539
6513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6514: LD_ADDR_VAR 0 3
6518: PUSH
6519: LD_INT 2
6521: PUSH
6522: LD_INT 3
6524: PUSH
6525: LD_INT 4
6527: PUSH
6528: LD_INT 5
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: ST_TO_ADDR
6537: GO 7396
6539: LD_INT 7
6541: DOUBLE
6542: EQUAL
6543: IFTRUE 6547
6545: GO 6573
6547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6548: LD_ADDR_VAR 0 3
6552: PUSH
6553: LD_INT 2
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: LD_INT 4
6561: PUSH
6562: LD_INT 5
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
6571: GO 7396
6573: LD_INT 12
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6607
6581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: LD_INT 4
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: ST_TO_ADDR
6605: GO 7396
6607: LD_INT 13
6609: DOUBLE
6610: EQUAL
6611: IFTRUE 6615
6613: GO 6641
6615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6616: LD_ADDR_VAR 0 3
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: LD_INT 3
6626: PUSH
6627: LD_INT 4
6629: PUSH
6630: LD_INT 5
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: ST_TO_ADDR
6639: GO 7396
6641: LD_INT 14
6643: DOUBLE
6644: EQUAL
6645: IFTRUE 6649
6647: GO 6667
6649: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6650: LD_ADDR_VAR 0 3
6654: PUSH
6655: LD_INT 4
6657: PUSH
6658: LD_INT 5
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: ST_TO_ADDR
6665: GO 7396
6667: LD_INT 6
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6675
6673: GO 6693
6675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_INT 4
6683: PUSH
6684: LD_INT 5
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: ST_TO_ADDR
6691: GO 7396
6693: LD_INT 10
6695: DOUBLE
6696: EQUAL
6697: IFTRUE 6701
6699: GO 6719
6701: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6702: LD_ADDR_VAR 0 3
6706: PUSH
6707: LD_INT 4
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: ST_TO_ADDR
6717: GO 7396
6719: LD_INT 22
6721: DOUBLE
6722: EQUAL
6723: IFTRUE 6727
6725: GO 6753
6727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: LD_INT 11
6735: PUSH
6736: LD_INT 12
6738: PUSH
6739: LD_INT 13
6741: PUSH
6742: LD_INT 14
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: ST_TO_ADDR
6751: GO 7396
6753: LD_INT 23
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6787
6761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6762: LD_ADDR_VAR 0 3
6766: PUSH
6767: LD_INT 11
6769: PUSH
6770: LD_INT 12
6772: PUSH
6773: LD_INT 13
6775: PUSH
6776: LD_INT 14
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: ST_TO_ADDR
6785: GO 7396
6787: LD_INT 24
6789: DOUBLE
6790: EQUAL
6791: IFTRUE 6795
6793: GO 6821
6795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6796: LD_ADDR_VAR 0 3
6800: PUSH
6801: LD_INT 11
6803: PUSH
6804: LD_INT 12
6806: PUSH
6807: LD_INT 13
6809: PUSH
6810: LD_INT 14
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: ST_TO_ADDR
6819: GO 7396
6821: LD_INT 30
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6855
6829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6830: LD_ADDR_VAR 0 3
6834: PUSH
6835: LD_INT 11
6837: PUSH
6838: LD_INT 12
6840: PUSH
6841: LD_INT 13
6843: PUSH
6844: LD_INT 14
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: ST_TO_ADDR
6853: GO 7396
6855: LD_INT 25
6857: DOUBLE
6858: EQUAL
6859: IFTRUE 6863
6861: GO 6881
6863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6864: LD_ADDR_VAR 0 3
6868: PUSH
6869: LD_INT 13
6871: PUSH
6872: LD_INT 14
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: ST_TO_ADDR
6879: GO 7396
6881: LD_INT 27
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6889
6887: GO 6907
6889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 13
6897: PUSH
6898: LD_INT 14
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: ST_TO_ADDR
6905: GO 7396
6907: LD_INT 92
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 6941
6915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: LD_INT 11
6923: PUSH
6924: LD_INT 12
6926: PUSH
6927: LD_INT 13
6929: PUSH
6930: LD_INT 14
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: ST_TO_ADDR
6939: GO 7396
6941: LD_INT 28
6943: DOUBLE
6944: EQUAL
6945: IFTRUE 6949
6947: GO 6967
6949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_INT 13
6957: PUSH
6958: LD_INT 14
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: ST_TO_ADDR
6965: GO 7396
6967: LD_INT 29
6969: DOUBLE
6970: EQUAL
6971: IFTRUE 6975
6973: GO 6993
6975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_INT 13
6983: PUSH
6984: LD_INT 14
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
6991: GO 7396
6993: LD_INT 31
6995: DOUBLE
6996: EQUAL
6997: IFTRUE 7001
6999: GO 7019
7001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7002: LD_ADDR_VAR 0 3
7006: PUSH
7007: LD_INT 13
7009: PUSH
7010: LD_INT 14
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: ST_TO_ADDR
7017: GO 7396
7019: LD_INT 26
7021: DOUBLE
7022: EQUAL
7023: IFTRUE 7027
7025: GO 7045
7027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7028: LD_ADDR_VAR 0 3
7032: PUSH
7033: LD_INT 13
7035: PUSH
7036: LD_INT 14
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: ST_TO_ADDR
7043: GO 7396
7045: LD_INT 42
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7079
7053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7054: LD_ADDR_VAR 0 3
7058: PUSH
7059: LD_INT 21
7061: PUSH
7062: LD_INT 22
7064: PUSH
7065: LD_INT 23
7067: PUSH
7068: LD_INT 24
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: ST_TO_ADDR
7077: GO 7396
7079: LD_INT 43
7081: DOUBLE
7082: EQUAL
7083: IFTRUE 7087
7085: GO 7113
7087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7088: LD_ADDR_VAR 0 3
7092: PUSH
7093: LD_INT 21
7095: PUSH
7096: LD_INT 22
7098: PUSH
7099: LD_INT 23
7101: PUSH
7102: LD_INT 24
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: ST_TO_ADDR
7111: GO 7396
7113: LD_INT 44
7115: DOUBLE
7116: EQUAL
7117: IFTRUE 7121
7119: GO 7147
7121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: LD_INT 21
7129: PUSH
7130: LD_INT 22
7132: PUSH
7133: LD_INT 23
7135: PUSH
7136: LD_INT 24
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: ST_TO_ADDR
7145: GO 7396
7147: LD_INT 45
7149: DOUBLE
7150: EQUAL
7151: IFTRUE 7155
7153: GO 7181
7155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7156: LD_ADDR_VAR 0 3
7160: PUSH
7161: LD_INT 21
7163: PUSH
7164: LD_INT 22
7166: PUSH
7167: LD_INT 23
7169: PUSH
7170: LD_INT 24
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
7179: GO 7396
7181: LD_INT 49
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7215
7189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 22
7200: PUSH
7201: LD_INT 23
7203: PUSH
7204: LD_INT 24
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: ST_TO_ADDR
7213: GO 7396
7215: LD_INT 51
7217: DOUBLE
7218: EQUAL
7219: IFTRUE 7223
7221: GO 7249
7223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7224: LD_ADDR_VAR 0 3
7228: PUSH
7229: LD_INT 21
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 23
7237: PUSH
7238: LD_INT 24
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: ST_TO_ADDR
7247: GO 7396
7249: LD_INT 52
7251: DOUBLE
7252: EQUAL
7253: IFTRUE 7257
7255: GO 7283
7257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7258: LD_ADDR_VAR 0 3
7262: PUSH
7263: LD_INT 21
7265: PUSH
7266: LD_INT 22
7268: PUSH
7269: LD_INT 23
7271: PUSH
7272: LD_INT 24
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: ST_TO_ADDR
7281: GO 7396
7283: LD_INT 53
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7309
7291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7292: LD_ADDR_VAR 0 3
7296: PUSH
7297: LD_INT 23
7299: PUSH
7300: LD_INT 24
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: ST_TO_ADDR
7307: GO 7396
7309: LD_INT 46
7311: DOUBLE
7312: EQUAL
7313: IFTRUE 7317
7315: GO 7335
7317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_INT 23
7325: PUSH
7326: LD_INT 24
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: ST_TO_ADDR
7333: GO 7396
7335: LD_INT 47
7337: DOUBLE
7338: EQUAL
7339: IFTRUE 7343
7341: GO 7361
7343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7344: LD_ADDR_VAR 0 3
7348: PUSH
7349: LD_INT 23
7351: PUSH
7352: LD_INT 24
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: ST_TO_ADDR
7359: GO 7396
7361: LD_INT 98
7363: DOUBLE
7364: EQUAL
7365: IFTRUE 7369
7367: GO 7395
7369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7370: LD_ADDR_VAR 0 3
7374: PUSH
7375: LD_INT 21
7377: PUSH
7378: LD_INT 22
7380: PUSH
7381: LD_INT 23
7383: PUSH
7384: LD_INT 24
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: ST_TO_ADDR
7393: GO 7396
7395: POP
// result := ( chassis in result ) ;
7396: LD_ADDR_VAR 0 3
7400: PUSH
7401: LD_VAR 0 1
7405: PUSH
7406: LD_VAR 0 3
7410: IN
7411: ST_TO_ADDR
// end ;
7412: LD_VAR 0 3
7416: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
7425: PPUSH
// result := array ;
7426: LD_ADDR_VAR 0 5
7430: PUSH
7431: LD_VAR 0 1
7435: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7436: LD_VAR 0 1
7440: NOT
7441: IFTRUE 7450
7443: PUSH
7444: LD_VAR 0 2
7448: NOT
7449: OR
7450: IFTRUE 7459
7452: PUSH
7453: LD_VAR 0 3
7457: NOT
7458: OR
7459: IFTRUE 7473
7461: PUSH
7462: LD_VAR 0 2
7466: PUSH
7467: LD_VAR 0 1
7471: GREATER
7472: OR
7473: IFTRUE 7487
7475: PUSH
7476: LD_VAR 0 3
7480: PUSH
7481: LD_VAR 0 1
7485: GREATER
7486: OR
7487: IFFALSE 7491
// exit ;
7489: GO 7787
// if direction then
7491: LD_VAR 0 4
7495: IFFALSE 7559
// begin d := 1 ;
7497: LD_ADDR_VAR 0 9
7501: PUSH
7502: LD_INT 1
7504: ST_TO_ADDR
// if i_from > i_to then
7505: LD_VAR 0 2
7509: PUSH
7510: LD_VAR 0 3
7514: GREATER
7515: IFFALSE 7541
// length := ( array - i_from ) + i_to else
7517: LD_ADDR_VAR 0 11
7521: PUSH
7522: LD_VAR 0 1
7526: PUSH
7527: LD_VAR 0 2
7531: MINUS
7532: PUSH
7533: LD_VAR 0 3
7537: PLUS
7538: ST_TO_ADDR
7539: GO 7557
// length := i_to - i_from ;
7541: LD_ADDR_VAR 0 11
7545: PUSH
7546: LD_VAR 0 3
7550: PUSH
7551: LD_VAR 0 2
7555: MINUS
7556: ST_TO_ADDR
// end else
7557: GO 7620
// begin d := - 1 ;
7559: LD_ADDR_VAR 0 9
7563: PUSH
7564: LD_INT 1
7566: NEG
7567: ST_TO_ADDR
// if i_from > i_to then
7568: LD_VAR 0 2
7572: PUSH
7573: LD_VAR 0 3
7577: GREATER
7578: IFFALSE 7598
// length := i_from - i_to else
7580: LD_ADDR_VAR 0 11
7584: PUSH
7585: LD_VAR 0 2
7589: PUSH
7590: LD_VAR 0 3
7594: MINUS
7595: ST_TO_ADDR
7596: GO 7620
// length := ( array - i_to ) + i_from ;
7598: LD_ADDR_VAR 0 11
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_VAR 0 3
7612: MINUS
7613: PUSH
7614: LD_VAR 0 2
7618: PLUS
7619: ST_TO_ADDR
// end ; if not length then
7620: LD_VAR 0 11
7624: NOT
7625: IFFALSE 7629
// exit ;
7627: GO 7787
// tmp := array ;
7629: LD_ADDR_VAR 0 10
7633: PUSH
7634: LD_VAR 0 1
7638: ST_TO_ADDR
// for i = 1 to length do
7639: LD_ADDR_VAR 0 6
7643: PUSH
7644: DOUBLE
7645: LD_INT 1
7647: DEC
7648: ST_TO_ADDR
7649: LD_VAR 0 11
7653: PUSH
7654: FOR_TO
7655: IFFALSE 7775
// begin for j = 1 to array do
7657: LD_ADDR_VAR 0 7
7661: PUSH
7662: DOUBLE
7663: LD_INT 1
7665: DEC
7666: ST_TO_ADDR
7667: LD_VAR 0 1
7671: PUSH
7672: FOR_TO
7673: IFFALSE 7761
// begin k := j + d ;
7675: LD_ADDR_VAR 0 8
7679: PUSH
7680: LD_VAR 0 7
7684: PUSH
7685: LD_VAR 0 9
7689: PLUS
7690: ST_TO_ADDR
// if k > array then
7691: LD_VAR 0 8
7695: PUSH
7696: LD_VAR 0 1
7700: GREATER
7701: IFFALSE 7711
// k := 1 ;
7703: LD_ADDR_VAR 0 8
7707: PUSH
7708: LD_INT 1
7710: ST_TO_ADDR
// if not k then
7711: LD_VAR 0 8
7715: NOT
7716: IFFALSE 7728
// k := array ;
7718: LD_ADDR_VAR 0 8
7722: PUSH
7723: LD_VAR 0 1
7727: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7728: LD_ADDR_VAR 0 10
7732: PUSH
7733: LD_VAR 0 10
7737: PPUSH
7738: LD_VAR 0 8
7742: PPUSH
7743: LD_VAR 0 1
7747: PUSH
7748: LD_VAR 0 7
7752: ARRAY
7753: PPUSH
7754: CALL_OW 1
7758: ST_TO_ADDR
// end ;
7759: GO 7672
7761: POP
7762: POP
// array := tmp ;
7763: LD_ADDR_VAR 0 1
7767: PUSH
7768: LD_VAR 0 10
7772: ST_TO_ADDR
// end ;
7773: GO 7654
7775: POP
7776: POP
// result := array ;
7777: LD_ADDR_VAR 0 5
7781: PUSH
7782: LD_VAR 0 1
7786: ST_TO_ADDR
// end ;
7787: LD_VAR 0 5
7791: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7792: LD_INT 0
7794: PPUSH
7795: PPUSH
// result := 0 ;
7796: LD_ADDR_VAR 0 3
7800: PUSH
7801: LD_INT 0
7803: ST_TO_ADDR
// if not array or not value in array then
7804: LD_VAR 0 1
7808: NOT
7809: IFTRUE 7824
7811: PUSH
7812: LD_VAR 0 2
7816: PUSH
7817: LD_VAR 0 1
7821: IN
7822: NOT
7823: OR
7824: IFFALSE 7828
// exit ;
7826: GO 7882
// for i = 1 to array do
7828: LD_ADDR_VAR 0 4
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_VAR 0 1
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7880
// if value = array [ i ] then
7846: LD_VAR 0 2
7850: PUSH
7851: LD_VAR 0 1
7855: PUSH
7856: LD_VAR 0 4
7860: ARRAY
7861: EQUAL
7862: IFFALSE 7878
// begin result := i ;
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: LD_VAR 0 4
7873: ST_TO_ADDR
// exit ;
7874: POP
7875: POP
7876: GO 7882
// end ;
7878: GO 7843
7880: POP
7881: POP
// end ;
7882: LD_VAR 0 3
7886: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7887: LD_INT 0
7889: PPUSH
// vc_chassis := chassis ;
7890: LD_ADDR_OWVAR 37
7894: PUSH
7895: LD_VAR 0 1
7899: ST_TO_ADDR
// vc_engine := engine ;
7900: LD_ADDR_OWVAR 39
7904: PUSH
7905: LD_VAR 0 2
7909: ST_TO_ADDR
// vc_control := control ;
7910: LD_ADDR_OWVAR 38
7914: PUSH
7915: LD_VAR 0 3
7919: ST_TO_ADDR
// vc_weapon := weapon ;
7920: LD_ADDR_OWVAR 40
7924: PUSH
7925: LD_VAR 0 4
7929: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7930: LD_ADDR_OWVAR 41
7934: PUSH
7935: LD_VAR 0 5
7939: ST_TO_ADDR
// end ;
7940: LD_VAR 0 6
7944: RET
// export function WantPlant ( unit ) ; var task ; begin
7945: LD_INT 0
7947: PPUSH
7948: PPUSH
// result := false ;
7949: LD_ADDR_VAR 0 2
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7957: LD_ADDR_VAR 0 3
7961: PUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 437
7971: ST_TO_ADDR
// if task then
7972: LD_VAR 0 3
7976: IFFALSE 8004
// if task [ 1 ] [ 1 ] = p then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_STRING p
7993: EQUAL
7994: IFFALSE 8004
// result := true ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// end ;
8004: LD_VAR 0 2
8008: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8009: LD_INT 0
8011: PPUSH
8012: PPUSH
8013: PPUSH
8014: PPUSH
// if pos < 1 then
8015: LD_VAR 0 2
8019: PUSH
8020: LD_INT 1
8022: LESS
8023: IFFALSE 8027
// exit ;
8025: GO 8330
// if pos = 1 then
8027: LD_VAR 0 2
8031: PUSH
8032: LD_INT 1
8034: EQUAL
8035: IFFALSE 8068
// result := Replace ( arr , pos [ 1 ] , value ) else
8037: LD_ADDR_VAR 0 4
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: LD_VAR 0 2
8051: PUSH
8052: LD_INT 1
8054: ARRAY
8055: PPUSH
8056: LD_VAR 0 3
8060: PPUSH
8061: CALL_OW 1
8065: ST_TO_ADDR
8066: GO 8330
// begin tmp := arr ;
8068: LD_ADDR_VAR 0 6
8072: PUSH
8073: LD_VAR 0 1
8077: ST_TO_ADDR
// s_arr := [ tmp ] ;
8078: LD_ADDR_VAR 0 7
8082: PUSH
8083: LD_VAR 0 6
8087: PUSH
8088: EMPTY
8089: LIST
8090: ST_TO_ADDR
// for i = 1 to pos - 1 do
8091: LD_ADDR_VAR 0 5
8095: PUSH
8096: DOUBLE
8097: LD_INT 1
8099: DEC
8100: ST_TO_ADDR
8101: LD_VAR 0 2
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: PUSH
8110: FOR_TO
8111: IFFALSE 8156
// begin tmp := tmp [ pos [ i ] ] ;
8113: LD_ADDR_VAR 0 6
8117: PUSH
8118: LD_VAR 0 6
8122: PUSH
8123: LD_VAR 0 2
8127: PUSH
8128: LD_VAR 0 5
8132: ARRAY
8133: ARRAY
8134: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8135: LD_ADDR_VAR 0 7
8139: PUSH
8140: LD_VAR 0 7
8144: PUSH
8145: LD_VAR 0 6
8149: PUSH
8150: EMPTY
8151: LIST
8152: ADD
8153: ST_TO_ADDR
// end ;
8154: GO 8110
8156: POP
8157: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8158: LD_ADDR_VAR 0 6
8162: PUSH
8163: LD_VAR 0 6
8167: PPUSH
8168: LD_VAR 0 2
8172: PUSH
8173: LD_VAR 0 2
8177: ARRAY
8178: PPUSH
8179: LD_VAR 0 3
8183: PPUSH
8184: CALL_OW 1
8188: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8189: LD_ADDR_VAR 0 7
8193: PUSH
8194: LD_VAR 0 7
8198: PPUSH
8199: LD_VAR 0 7
8203: PPUSH
8204: LD_VAR 0 6
8208: PPUSH
8209: CALL_OW 1
8213: ST_TO_ADDR
// for i = s_arr downto 2 do
8214: LD_ADDR_VAR 0 5
8218: PUSH
8219: DOUBLE
8220: LD_VAR 0 7
8224: INC
8225: ST_TO_ADDR
8226: LD_INT 2
8228: PUSH
8229: FOR_DOWNTO
8230: IFFALSE 8314
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_VAR 0 7
8241: PUSH
8242: LD_VAR 0 5
8246: PUSH
8247: LD_INT 1
8249: MINUS
8250: ARRAY
8251: PPUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_VAR 0 5
8261: PUSH
8262: LD_INT 1
8264: MINUS
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 7
8271: PUSH
8272: LD_VAR 0 5
8276: ARRAY
8277: PPUSH
8278: CALL_OW 1
8282: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8283: LD_ADDR_VAR 0 7
8287: PUSH
8288: LD_VAR 0 7
8292: PPUSH
8293: LD_VAR 0 5
8297: PUSH
8298: LD_INT 1
8300: MINUS
8301: PPUSH
8302: LD_VAR 0 6
8306: PPUSH
8307: CALL_OW 1
8311: ST_TO_ADDR
// end ;
8312: GO 8229
8314: POP
8315: POP
// result := s_arr [ 1 ] ;
8316: LD_ADDR_VAR 0 4
8320: PUSH
8321: LD_VAR 0 7
8325: PUSH
8326: LD_INT 1
8328: ARRAY
8329: ST_TO_ADDR
// end ; end ;
8330: LD_VAR 0 4
8334: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8335: LD_INT 0
8337: PPUSH
8338: PPUSH
// if not list then
8339: LD_VAR 0 1
8343: NOT
8344: IFFALSE 8348
// exit ;
8346: GO 8439
// i := list [ pos1 ] ;
8348: LD_ADDR_VAR 0 5
8352: PUSH
8353: LD_VAR 0 1
8357: PUSH
8358: LD_VAR 0 2
8362: ARRAY
8363: ST_TO_ADDR
// if not i then
8364: LD_VAR 0 5
8368: NOT
8369: IFFALSE 8373
// exit ;
8371: GO 8439
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8373: LD_ADDR_VAR 0 1
8377: PUSH
8378: LD_VAR 0 1
8382: PPUSH
8383: LD_VAR 0 2
8387: PPUSH
8388: LD_VAR 0 1
8392: PUSH
8393: LD_VAR 0 3
8397: ARRAY
8398: PPUSH
8399: CALL_OW 1
8403: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8404: LD_ADDR_VAR 0 1
8408: PUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: LD_VAR 0 3
8418: PPUSH
8419: LD_VAR 0 5
8423: PPUSH
8424: CALL_OW 1
8428: ST_TO_ADDR
// result := list ;
8429: LD_ADDR_VAR 0 4
8433: PUSH
8434: LD_VAR 0 1
8438: ST_TO_ADDR
// end ;
8439: LD_VAR 0 4
8443: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8444: LD_INT 0
8446: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8447: LD_ADDR_VAR 0 5
8451: PUSH
8452: LD_VAR 0 1
8456: PPUSH
8457: CALL_OW 250
8461: PPUSH
8462: LD_VAR 0 1
8466: PPUSH
8467: CALL_OW 251
8471: PPUSH
8472: LD_VAR 0 2
8476: PPUSH
8477: LD_VAR 0 3
8481: PPUSH
8482: LD_VAR 0 4
8486: PPUSH
8487: CALL 8869 0 5
8491: ST_TO_ADDR
// end ;
8492: LD_VAR 0 5
8496: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
// if not list or not unit then
8503: LD_VAR 0 2
8507: NOT
8508: IFTRUE 8517
8510: PUSH
8511: LD_VAR 0 1
8515: NOT
8516: OR
8517: IFFALSE 8521
// exit ;
8519: GO 8864
// result := [ ] ;
8521: LD_ADDR_VAR 0 5
8525: PUSH
8526: EMPTY
8527: ST_TO_ADDR
// for i in list do
8528: LD_ADDR_VAR 0 6
8532: PUSH
8533: LD_VAR 0 2
8537: PUSH
8538: FOR_IN
8539: IFFALSE 8757
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8541: LD_ADDR_VAR 0 8
8545: PUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: LD_VAR 0 6
8555: PUSH
8556: LD_INT 1
8558: ARRAY
8559: PPUSH
8560: LD_VAR 0 6
8564: PUSH
8565: LD_INT 2
8567: ARRAY
8568: PPUSH
8569: CALL_OW 297
8573: ST_TO_ADDR
// if not Count ( result ) then
8574: LD_VAR 0 5
8578: PPUSH
8579: CALL 5091 0 1
8583: NOT
8584: IFFALSE 8617
// begin result := Join ( result , [ i , tmp ] ) ;
8586: LD_ADDR_VAR 0 5
8590: PUSH
8591: LD_VAR 0 5
8595: PPUSH
8596: LD_VAR 0 6
8600: PUSH
8601: LD_VAR 0 8
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL 41057 0 2
8614: ST_TO_ADDR
// continue ;
8615: GO 8538
// end ; if result [ result ] [ 2 ] <= tmp then
8617: LD_VAR 0 5
8621: PUSH
8622: LD_VAR 0 5
8626: ARRAY
8627: PUSH
8628: LD_INT 2
8630: ARRAY
8631: PUSH
8632: LD_VAR 0 8
8636: LESSEQUAL
8637: IFFALSE 8670
// result := Join ( result , [ i , tmp ] ) else
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_VAR 0 5
8648: PPUSH
8649: LD_VAR 0 6
8653: PUSH
8654: LD_VAR 0 8
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL 41057 0 2
8667: ST_TO_ADDR
8668: GO 8755
// begin for j := 1 to Count ( result ) do
8670: LD_ADDR_VAR 0 7
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 5
8684: PPUSH
8685: CALL 5091 0 1
8689: PUSH
8690: FOR_TO
8691: IFFALSE 8753
// begin if tmp < result [ j ] [ 2 ] then
8693: LD_VAR 0 8
8697: PUSH
8698: LD_VAR 0 5
8702: PUSH
8703: LD_VAR 0 7
8707: ARRAY
8708: PUSH
8709: LD_INT 2
8711: ARRAY
8712: LESS
8713: IFFALSE 8751
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8715: LD_ADDR_VAR 0 5
8719: PUSH
8720: LD_VAR 0 5
8724: PPUSH
8725: LD_VAR 0 7
8729: PPUSH
8730: LD_VAR 0 6
8734: PUSH
8735: LD_VAR 0 8
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 2
8748: ST_TO_ADDR
// break ;
8749: GO 8753
// end ; end ;
8751: GO 8690
8753: POP
8754: POP
// end ; end ;
8755: GO 8538
8757: POP
8758: POP
// if result and not asc then
8759: LD_VAR 0 5
8763: IFFALSE 8772
8765: PUSH
8766: LD_VAR 0 3
8770: NOT
8771: AND
8772: IFFALSE 8789
// result := ReverseArray ( result ) ;
8774: LD_ADDR_VAR 0 5
8778: PUSH
8779: LD_VAR 0 5
8783: PPUSH
8784: CALL 36147 0 1
8788: ST_TO_ADDR
// tmp := [ ] ;
8789: LD_ADDR_VAR 0 8
8793: PUSH
8794: EMPTY
8795: ST_TO_ADDR
// if mode then
8796: LD_VAR 0 4
8800: IFFALSE 8864
// begin for i := 1 to result do
8802: LD_ADDR_VAR 0 6
8806: PUSH
8807: DOUBLE
8808: LD_INT 1
8810: DEC
8811: ST_TO_ADDR
8812: LD_VAR 0 5
8816: PUSH
8817: FOR_TO
8818: IFFALSE 8852
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8820: LD_ADDR_VAR 0 8
8824: PUSH
8825: LD_VAR 0 8
8829: PPUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_VAR 0 6
8839: ARRAY
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: CALL 41057 0 2
8849: ST_TO_ADDR
8850: GO 8817
8852: POP
8853: POP
// result := tmp ;
8854: LD_ADDR_VAR 0 5
8858: PUSH
8859: LD_VAR 0 8
8863: ST_TO_ADDR
// end ; end ;
8864: LD_VAR 0 5
8868: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8869: LD_INT 0
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// if not list then
8875: LD_VAR 0 3
8879: NOT
8880: IFFALSE 8884
// exit ;
8882: GO 9274
// result := [ ] ;
8884: LD_ADDR_VAR 0 6
8888: PUSH
8889: EMPTY
8890: ST_TO_ADDR
// for i in list do
8891: LD_ADDR_VAR 0 7
8895: PUSH
8896: LD_VAR 0 3
8900: PUSH
8901: FOR_IN
8902: IFFALSE 9104
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8904: LD_ADDR_VAR 0 9
8908: PUSH
8909: LD_VAR 0 7
8913: PPUSH
8914: LD_VAR 0 1
8918: PPUSH
8919: LD_VAR 0 2
8923: PPUSH
8924: CALL_OW 297
8928: ST_TO_ADDR
// if not result then
8929: LD_VAR 0 6
8933: NOT
8934: IFFALSE 8960
// result := [ [ i , tmp ] ] else
8936: LD_ADDR_VAR 0 6
8940: PUSH
8941: LD_VAR 0 7
8945: PUSH
8946: LD_VAR 0 9
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: ST_TO_ADDR
8958: GO 9102
// begin if result [ result ] [ 2 ] <= tmp then
8960: LD_VAR 0 6
8964: PUSH
8965: LD_VAR 0 6
8969: ARRAY
8970: PUSH
8971: LD_INT 2
8973: ARRAY
8974: PUSH
8975: LD_VAR 0 9
8979: LESSEQUAL
8980: IFFALSE 9022
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8982: LD_ADDR_VAR 0 6
8986: PUSH
8987: LD_VAR 0 6
8991: PPUSH
8992: LD_VAR 0 6
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: PPUSH
9001: LD_VAR 0 7
9005: PUSH
9006: LD_VAR 0 9
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PPUSH
9015: CALL_OW 2
9019: ST_TO_ADDR
9020: GO 9102
// for j := 1 to result do
9022: LD_ADDR_VAR 0 8
9026: PUSH
9027: DOUBLE
9028: LD_INT 1
9030: DEC
9031: ST_TO_ADDR
9032: LD_VAR 0 6
9036: PUSH
9037: FOR_TO
9038: IFFALSE 9100
// begin if tmp < result [ j ] [ 2 ] then
9040: LD_VAR 0 9
9044: PUSH
9045: LD_VAR 0 6
9049: PUSH
9050: LD_VAR 0 8
9054: ARRAY
9055: PUSH
9056: LD_INT 2
9058: ARRAY
9059: LESS
9060: IFFALSE 9098
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9062: LD_ADDR_VAR 0 6
9066: PUSH
9067: LD_VAR 0 6
9071: PPUSH
9072: LD_VAR 0 8
9076: PPUSH
9077: LD_VAR 0 7
9081: PUSH
9082: LD_VAR 0 9
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 2
9095: ST_TO_ADDR
// break ;
9096: GO 9100
// end ; end ;
9098: GO 9037
9100: POP
9101: POP
// end ; end ;
9102: GO 8901
9104: POP
9105: POP
// if result and not asc then
9106: LD_VAR 0 6
9110: IFFALSE 9119
9112: PUSH
9113: LD_VAR 0 4
9117: NOT
9118: AND
9119: IFFALSE 9194
// begin tmp := result ;
9121: LD_ADDR_VAR 0 9
9125: PUSH
9126: LD_VAR 0 6
9130: ST_TO_ADDR
// for i = tmp downto 1 do
9131: LD_ADDR_VAR 0 7
9135: PUSH
9136: DOUBLE
9137: LD_VAR 0 9
9141: INC
9142: ST_TO_ADDR
9143: LD_INT 1
9145: PUSH
9146: FOR_DOWNTO
9147: IFFALSE 9192
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9149: LD_ADDR_VAR 0 6
9153: PUSH
9154: LD_VAR 0 6
9158: PPUSH
9159: LD_VAR 0 9
9163: PUSH
9164: LD_VAR 0 7
9168: MINUS
9169: PUSH
9170: LD_INT 1
9172: PLUS
9173: PPUSH
9174: LD_VAR 0 9
9178: PUSH
9179: LD_VAR 0 7
9183: ARRAY
9184: PPUSH
9185: CALL_OW 1
9189: ST_TO_ADDR
9190: GO 9146
9192: POP
9193: POP
// end ; tmp := [ ] ;
9194: LD_ADDR_VAR 0 9
9198: PUSH
9199: EMPTY
9200: ST_TO_ADDR
// if mode then
9201: LD_VAR 0 5
9205: IFFALSE 9274
// begin for i = 1 to result do
9207: LD_ADDR_VAR 0 7
9211: PUSH
9212: DOUBLE
9213: LD_INT 1
9215: DEC
9216: ST_TO_ADDR
9217: LD_VAR 0 6
9221: PUSH
9222: FOR_TO
9223: IFFALSE 9262
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9225: LD_ADDR_VAR 0 9
9229: PUSH
9230: LD_VAR 0 9
9234: PPUSH
9235: LD_VAR 0 7
9239: PPUSH
9240: LD_VAR 0 6
9244: PUSH
9245: LD_VAR 0 7
9249: ARRAY
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: CALL_OW 1
9259: ST_TO_ADDR
9260: GO 9222
9262: POP
9263: POP
// result := tmp ;
9264: LD_ADDR_VAR 0 6
9268: PUSH
9269: LD_VAR 0 9
9273: ST_TO_ADDR
// end ; end ;
9274: LD_VAR 0 6
9278: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9279: LD_INT 0
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9287: LD_ADDR_VAR 0 5
9291: PUSH
9292: LD_INT 0
9294: PUSH
9295: LD_INT 0
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: EMPTY
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: ST_TO_ADDR
// if not x or not y then
9309: LD_VAR 0 2
9313: NOT
9314: IFTRUE 9323
9316: PUSH
9317: LD_VAR 0 3
9321: NOT
9322: OR
9323: IFFALSE 9327
// exit ;
9325: GO 10983
// if not range then
9327: LD_VAR 0 4
9331: NOT
9332: IFFALSE 9342
// range := 10 ;
9334: LD_ADDR_VAR 0 4
9338: PUSH
9339: LD_INT 10
9341: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9342: LD_ADDR_VAR 0 8
9346: PUSH
9347: LD_INT 81
9349: PUSH
9350: LD_VAR 0 1
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 92
9361: PUSH
9362: LD_VAR 0 2
9366: PUSH
9367: LD_VAR 0 3
9371: PUSH
9372: LD_VAR 0 4
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: PUSH
9383: LD_INT 3
9385: PUSH
9386: LD_INT 21
9388: PUSH
9389: LD_INT 3
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 69
9409: ST_TO_ADDR
// if not tmp then
9410: LD_VAR 0 8
9414: NOT
9415: IFFALSE 9419
// exit ;
9417: GO 10983
// for i in tmp do
9419: LD_ADDR_VAR 0 6
9423: PUSH
9424: LD_VAR 0 8
9428: PUSH
9429: FOR_IN
9430: IFFALSE 10958
// begin points := [ 0 , 0 , 0 ] ;
9432: LD_ADDR_VAR 0 9
9436: PUSH
9437: LD_INT 0
9439: PUSH
9440: LD_INT 0
9442: PUSH
9443: LD_INT 0
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: ST_TO_ADDR
// bpoints := 1 ;
9451: LD_ADDR_VAR 0 10
9455: PUSH
9456: LD_INT 1
9458: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9459: LD_VAR 0 6
9463: PPUSH
9464: CALL_OW 247
9468: PUSH
9469: LD_INT 1
9471: DOUBLE
9472: EQUAL
9473: IFTRUE 9477
9475: GO 10059
9477: POP
// begin if GetClass ( i ) = 1 then
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 257
9487: PUSH
9488: LD_INT 1
9490: EQUAL
9491: IFFALSE 9512
// points := [ 10 , 5 , 3 ] ;
9493: LD_ADDR_VAR 0 9
9497: PUSH
9498: LD_INT 10
9500: PUSH
9501: LD_INT 5
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9512: LD_VAR 0 6
9516: PPUSH
9517: CALL_OW 257
9521: PUSH
9522: LD_INT 2
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 4
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: IN
9536: IFFALSE 9557
// points := [ 3 , 2 , 1 ] ;
9538: LD_ADDR_VAR 0 9
9542: PUSH
9543: LD_INT 3
9545: PUSH
9546: LD_INT 2
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9557: LD_VAR 0 6
9561: PPUSH
9562: CALL_OW 257
9566: PUSH
9567: LD_INT 5
9569: EQUAL
9570: IFFALSE 9591
// points := [ 130 , 5 , 2 ] ;
9572: LD_ADDR_VAR 0 9
9576: PUSH
9577: LD_INT 130
9579: PUSH
9580: LD_INT 5
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9591: LD_VAR 0 6
9595: PPUSH
9596: CALL_OW 257
9600: PUSH
9601: LD_INT 8
9603: EQUAL
9604: IFFALSE 9625
// points := [ 35 , 35 , 30 ] ;
9606: LD_ADDR_VAR 0 9
9610: PUSH
9611: LD_INT 35
9613: PUSH
9614: LD_INT 35
9616: PUSH
9617: LD_INT 30
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9625: LD_VAR 0 6
9629: PPUSH
9630: CALL_OW 257
9634: PUSH
9635: LD_INT 9
9637: EQUAL
9638: IFFALSE 9659
// points := [ 20 , 55 , 40 ] ;
9640: LD_ADDR_VAR 0 9
9644: PUSH
9645: LD_INT 20
9647: PUSH
9648: LD_INT 55
9650: PUSH
9651: LD_INT 40
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9659: LD_VAR 0 6
9663: PPUSH
9664: CALL_OW 257
9668: PUSH
9669: LD_INT 12
9671: PUSH
9672: LD_INT 16
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: IN
9679: IFFALSE 9700
// points := [ 5 , 3 , 2 ] ;
9681: LD_ADDR_VAR 0 9
9685: PUSH
9686: LD_INT 5
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9700: LD_VAR 0 6
9704: PPUSH
9705: CALL_OW 257
9709: PUSH
9710: LD_INT 17
9712: EQUAL
9713: IFFALSE 9734
// points := [ 100 , 50 , 75 ] ;
9715: LD_ADDR_VAR 0 9
9719: PUSH
9720: LD_INT 100
9722: PUSH
9723: LD_INT 50
9725: PUSH
9726: LD_INT 75
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9734: LD_VAR 0 6
9738: PPUSH
9739: CALL_OW 257
9743: PUSH
9744: LD_INT 15
9746: EQUAL
9747: IFFALSE 9768
// points := [ 10 , 5 , 3 ] ;
9749: LD_ADDR_VAR 0 9
9753: PUSH
9754: LD_INT 10
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9768: LD_VAR 0 6
9772: PPUSH
9773: CALL_OW 257
9777: PUSH
9778: LD_INT 14
9780: EQUAL
9781: IFFALSE 9802
// points := [ 10 , 0 , 0 ] ;
9783: LD_ADDR_VAR 0 9
9787: PUSH
9788: LD_INT 10
9790: PUSH
9791: LD_INT 0
9793: PUSH
9794: LD_INT 0
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9802: LD_VAR 0 6
9806: PPUSH
9807: CALL_OW 257
9811: PUSH
9812: LD_INT 11
9814: EQUAL
9815: IFFALSE 9836
// points := [ 30 , 10 , 5 ] ;
9817: LD_ADDR_VAR 0 9
9821: PUSH
9822: LD_INT 30
9824: PUSH
9825: LD_INT 10
9827: PUSH
9828: LD_INT 5
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9836: LD_VAR 0 1
9840: PPUSH
9841: LD_INT 5
9843: PPUSH
9844: CALL_OW 321
9848: PUSH
9849: LD_INT 2
9851: EQUAL
9852: IFFALSE 9869
// bpoints := bpoints * 1.8 ;
9854: LD_ADDR_VAR 0 10
9858: PUSH
9859: LD_VAR 0 10
9863: PUSH
9864: LD_REAL  1.80000000000000E+0000
9867: MUL
9868: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 257
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: LD_INT 2
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: LD_INT 4
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: IN
9897: IFFALSE 9917
9899: PUSH
9900: LD_VAR 0 1
9904: PPUSH
9905: LD_INT 51
9907: PPUSH
9908: CALL_OW 321
9912: PUSH
9913: LD_INT 2
9915: EQUAL
9916: AND
9917: IFFALSE 9934
// bpoints := bpoints * 1.2 ;
9919: LD_ADDR_VAR 0 10
9923: PUSH
9924: LD_VAR 0 10
9928: PUSH
9929: LD_REAL  1.20000000000000E+0000
9932: MUL
9933: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9934: LD_VAR 0 6
9938: PPUSH
9939: CALL_OW 257
9943: PUSH
9944: LD_INT 5
9946: PUSH
9947: LD_INT 7
9949: PUSH
9950: LD_INT 9
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: IN
9958: IFFALSE 9978
9960: PUSH
9961: LD_VAR 0 1
9965: PPUSH
9966: LD_INT 52
9968: PPUSH
9969: CALL_OW 321
9973: PUSH
9974: LD_INT 2
9976: EQUAL
9977: AND
9978: IFFALSE 9995
// bpoints := bpoints * 1.5 ;
9980: LD_ADDR_VAR 0 10
9984: PUSH
9985: LD_VAR 0 10
9989: PUSH
9990: LD_REAL  1.50000000000000E+0000
9993: MUL
9994: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9995: LD_VAR 0 1
9999: PPUSH
10000: LD_INT 66
10002: PPUSH
10003: CALL_OW 321
10007: PUSH
10008: LD_INT 2
10010: EQUAL
10011: IFFALSE 10028
// bpoints := bpoints * 1.1 ;
10013: LD_ADDR_VAR 0 10
10017: PUSH
10018: LD_VAR 0 10
10022: PUSH
10023: LD_REAL  1.10000000000000E+0000
10026: MUL
10027: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10028: LD_ADDR_VAR 0 10
10032: PUSH
10033: LD_VAR 0 10
10037: PUSH
10038: LD_VAR 0 6
10042: PPUSH
10043: LD_INT 1
10045: PPUSH
10046: CALL_OW 259
10050: PUSH
10051: LD_REAL  1.15000000000000E+0000
10054: MUL
10055: MUL
10056: ST_TO_ADDR
// end ; unit_vehicle :
10057: GO 10887
10059: LD_INT 2
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10875
10067: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10068: LD_VAR 0 6
10072: PPUSH
10073: CALL_OW 264
10077: PUSH
10078: LD_INT 2
10080: PUSH
10081: LD_INT 42
10083: PUSH
10084: LD_INT 24
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: IN
10092: IFFALSE 10113
// points := [ 25 , 5 , 3 ] ;
10094: LD_ADDR_VAR 0 9
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 5
10104: PUSH
10105: LD_INT 3
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10113: LD_VAR 0 6
10117: PPUSH
10118: CALL_OW 264
10122: PUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 43
10128: PUSH
10129: LD_INT 25
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: IN
10137: IFFALSE 10158
// points := [ 40 , 15 , 5 ] ;
10139: LD_ADDR_VAR 0 9
10143: PUSH
10144: LD_INT 40
10146: PUSH
10147: LD_INT 15
10149: PUSH
10150: LD_INT 5
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10158: LD_VAR 0 6
10162: PPUSH
10163: CALL_OW 264
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 23
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: IN
10178: IFFALSE 10199
// points := [ 7 , 25 , 8 ] ;
10180: LD_ADDR_VAR 0 9
10184: PUSH
10185: LD_INT 7
10187: PUSH
10188: LD_INT 25
10190: PUSH
10191: LD_INT 8
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10199: LD_VAR 0 6
10203: PPUSH
10204: CALL_OW 264
10208: PUSH
10209: LD_INT 5
10211: PUSH
10212: LD_INT 27
10214: PUSH
10215: LD_INT 44
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: LIST
10222: IN
10223: IFFALSE 10244
// points := [ 14 , 50 , 16 ] ;
10225: LD_ADDR_VAR 0 9
10229: PUSH
10230: LD_INT 14
10232: PUSH
10233: LD_INT 50
10235: PUSH
10236: LD_INT 16
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10244: LD_VAR 0 6
10248: PPUSH
10249: CALL_OW 264
10253: PUSH
10254: LD_INT 6
10256: PUSH
10257: LD_INT 46
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: IN
10264: IFFALSE 10285
// points := [ 32 , 120 , 70 ] ;
10266: LD_ADDR_VAR 0 9
10270: PUSH
10271: LD_INT 32
10273: PUSH
10274: LD_INT 120
10276: PUSH
10277: LD_INT 70
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10285: LD_VAR 0 6
10289: PPUSH
10290: CALL_OW 264
10294: PUSH
10295: LD_INT 7
10297: PUSH
10298: LD_INT 28
10300: PUSH
10301: LD_INT 45
10303: PUSH
10304: LD_INT 92
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: IN
10313: IFFALSE 10334
// points := [ 35 , 20 , 45 ] ;
10315: LD_ADDR_VAR 0 9
10319: PUSH
10320: LD_INT 35
10322: PUSH
10323: LD_INT 20
10325: PUSH
10326: LD_INT 45
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10334: LD_VAR 0 6
10338: PPUSH
10339: CALL_OW 264
10343: PUSH
10344: LD_INT 47
10346: PUSH
10347: EMPTY
10348: LIST
10349: IN
10350: IFFALSE 10371
// points := [ 67 , 45 , 75 ] ;
10352: LD_ADDR_VAR 0 9
10356: PUSH
10357: LD_INT 67
10359: PUSH
10360: LD_INT 45
10362: PUSH
10363: LD_INT 75
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10371: LD_VAR 0 6
10375: PPUSH
10376: CALL_OW 264
10380: PUSH
10381: LD_INT 26
10383: PUSH
10384: EMPTY
10385: LIST
10386: IN
10387: IFFALSE 10408
// points := [ 120 , 30 , 80 ] ;
10389: LD_ADDR_VAR 0 9
10393: PUSH
10394: LD_INT 120
10396: PUSH
10397: LD_INT 30
10399: PUSH
10400: LD_INT 80
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10408: LD_VAR 0 6
10412: PPUSH
10413: CALL_OW 264
10417: PUSH
10418: LD_INT 22
10420: PUSH
10421: EMPTY
10422: LIST
10423: IN
10424: IFFALSE 10445
// points := [ 40 , 1 , 1 ] ;
10426: LD_ADDR_VAR 0 9
10430: PUSH
10431: LD_INT 40
10433: PUSH
10434: LD_INT 1
10436: PUSH
10437: LD_INT 1
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10445: LD_VAR 0 6
10449: PPUSH
10450: CALL_OW 264
10454: PUSH
10455: LD_INT 29
10457: PUSH
10458: EMPTY
10459: LIST
10460: IN
10461: IFFALSE 10482
// points := [ 70 , 200 , 400 ] ;
10463: LD_ADDR_VAR 0 9
10467: PUSH
10468: LD_INT 70
10470: PUSH
10471: LD_INT 200
10473: PUSH
10474: LD_INT 400
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10482: LD_VAR 0 6
10486: PPUSH
10487: CALL_OW 264
10491: PUSH
10492: LD_INT 14
10494: PUSH
10495: LD_INT 53
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: IN
10502: IFFALSE 10523
// points := [ 40 , 10 , 20 ] ;
10504: LD_ADDR_VAR 0 9
10508: PUSH
10509: LD_INT 40
10511: PUSH
10512: LD_INT 10
10514: PUSH
10515: LD_INT 20
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 264
10532: PUSH
10533: LD_INT 9
10535: PUSH
10536: EMPTY
10537: LIST
10538: IN
10539: IFFALSE 10560
// points := [ 5 , 70 , 20 ] ;
10541: LD_ADDR_VAR 0 9
10545: PUSH
10546: LD_INT 5
10548: PUSH
10549: LD_INT 70
10551: PUSH
10552: LD_INT 20
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10560: LD_VAR 0 6
10564: PPUSH
10565: CALL_OW 264
10569: PUSH
10570: LD_INT 10
10572: PUSH
10573: EMPTY
10574: LIST
10575: IN
10576: IFFALSE 10597
// points := [ 35 , 110 , 70 ] ;
10578: LD_ADDR_VAR 0 9
10582: PUSH
10583: LD_INT 35
10585: PUSH
10586: LD_INT 110
10588: PUSH
10589: LD_INT 70
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10597: LD_VAR 0 6
10601: PPUSH
10602: CALL_OW 265
10606: PUSH
10607: LD_INT 25
10609: EQUAL
10610: IFFALSE 10631
// points := [ 80 , 65 , 100 ] ;
10612: LD_ADDR_VAR 0 9
10616: PUSH
10617: LD_INT 80
10619: PUSH
10620: LD_INT 65
10622: PUSH
10623: LD_INT 100
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10631: LD_VAR 0 6
10635: PPUSH
10636: CALL_OW 263
10640: PUSH
10641: LD_INT 1
10643: EQUAL
10644: IFFALSE 10679
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10646: LD_ADDR_VAR 0 10
10650: PUSH
10651: LD_VAR 0 10
10655: PUSH
10656: LD_VAR 0 6
10660: PPUSH
10661: CALL_OW 311
10665: PPUSH
10666: LD_INT 3
10668: PPUSH
10669: CALL_OW 259
10673: PUSH
10674: LD_INT 4
10676: MUL
10677: MUL
10678: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10679: LD_VAR 0 6
10683: PPUSH
10684: CALL_OW 263
10688: PUSH
10689: LD_INT 2
10691: EQUAL
10692: IFFALSE 10743
// begin j := IsControledBy ( i ) ;
10694: LD_ADDR_VAR 0 7
10698: PUSH
10699: LD_VAR 0 6
10703: PPUSH
10704: CALL_OW 312
10708: ST_TO_ADDR
// if j then
10709: LD_VAR 0 7
10713: IFFALSE 10743
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10715: LD_ADDR_VAR 0 10
10719: PUSH
10720: LD_VAR 0 10
10724: PUSH
10725: LD_VAR 0 7
10729: PPUSH
10730: LD_INT 3
10732: PPUSH
10733: CALL_OW 259
10737: PUSH
10738: LD_INT 3
10740: MUL
10741: MUL
10742: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10743: LD_VAR 0 6
10747: PPUSH
10748: CALL_OW 264
10752: PUSH
10753: LD_INT 5
10755: PUSH
10756: LD_INT 6
10758: PUSH
10759: LD_INT 46
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: LD_INT 47
10767: PUSH
10768: LD_INT 45
10770: PUSH
10771: LD_INT 28
10773: PUSH
10774: LD_INT 7
10776: PUSH
10777: LD_INT 27
10779: PUSH
10780: LD_INT 29
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: IN
10795: IFFALSE 10815
10797: PUSH
10798: LD_VAR 0 1
10802: PPUSH
10803: LD_INT 52
10805: PPUSH
10806: CALL_OW 321
10810: PUSH
10811: LD_INT 2
10813: EQUAL
10814: AND
10815: IFFALSE 10832
// bpoints := bpoints * 1.2 ;
10817: LD_ADDR_VAR 0 10
10821: PUSH
10822: LD_VAR 0 10
10826: PUSH
10827: LD_REAL  1.20000000000000E+0000
10830: MUL
10831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10832: LD_VAR 0 6
10836: PPUSH
10837: CALL_OW 264
10841: PUSH
10842: LD_INT 6
10844: PUSH
10845: LD_INT 46
10847: PUSH
10848: LD_INT 47
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: IN
10856: IFFALSE 10873
// bpoints := bpoints * 1.2 ;
10858: LD_ADDR_VAR 0 10
10862: PUSH
10863: LD_VAR 0 10
10867: PUSH
10868: LD_REAL  1.20000000000000E+0000
10871: MUL
10872: ST_TO_ADDR
// end ; unit_building :
10873: GO 10887
10875: LD_INT 3
10877: DOUBLE
10878: EQUAL
10879: IFTRUE 10883
10881: GO 10886
10883: POP
// ; end ;
10884: GO 10887
10886: POP
// for j = 1 to 3 do
10887: LD_ADDR_VAR 0 7
10891: PUSH
10892: DOUBLE
10893: LD_INT 1
10895: DEC
10896: ST_TO_ADDR
10897: LD_INT 3
10899: PUSH
10900: FOR_TO
10901: IFFALSE 10954
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10903: LD_ADDR_VAR 0 5
10907: PUSH
10908: LD_VAR 0 5
10912: PPUSH
10913: LD_VAR 0 7
10917: PPUSH
10918: LD_VAR 0 5
10922: PUSH
10923: LD_VAR 0 7
10927: ARRAY
10928: PUSH
10929: LD_VAR 0 9
10933: PUSH
10934: LD_VAR 0 7
10938: ARRAY
10939: PUSH
10940: LD_VAR 0 10
10944: MUL
10945: PLUS
10946: PPUSH
10947: CALL_OW 1
10951: ST_TO_ADDR
10952: GO 10900
10954: POP
10955: POP
// end ;
10956: GO 9429
10958: POP
10959: POP
// result := Replace ( result , 4 , tmp ) ;
10960: LD_ADDR_VAR 0 5
10964: PUSH
10965: LD_VAR 0 5
10969: PPUSH
10970: LD_INT 4
10972: PPUSH
10973: LD_VAR 0 8
10977: PPUSH
10978: CALL_OW 1
10982: ST_TO_ADDR
// end ;
10983: LD_VAR 0 5
10987: RET
// export function DangerAtRange ( unit , range ) ; begin
10988: LD_INT 0
10990: PPUSH
// if not unit then
10991: LD_VAR 0 1
10995: NOT
10996: IFFALSE 11000
// exit ;
10998: GO 11045
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 1
11009: PPUSH
11010: CALL_OW 255
11014: PPUSH
11015: LD_VAR 0 1
11019: PPUSH
11020: CALL_OW 250
11024: PPUSH
11025: LD_VAR 0 1
11029: PPUSH
11030: CALL_OW 251
11034: PPUSH
11035: LD_VAR 0 2
11039: PPUSH
11040: CALL 9279 0 4
11044: ST_TO_ADDR
// end ;
11045: LD_VAR 0 3
11049: RET
// export function DangerInArea ( side , area ) ; begin
11050: LD_INT 0
11052: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11053: LD_ADDR_VAR 0 3
11057: PUSH
11058: LD_VAR 0 2
11062: PPUSH
11063: LD_INT 81
11065: PUSH
11066: LD_VAR 0 1
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PPUSH
11075: CALL_OW 70
11079: ST_TO_ADDR
// end ;
11080: LD_VAR 0 3
11084: RET
// export function IsExtension ( b ) ; begin
11085: LD_INT 0
11087: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: LD_VAR 0 1
11097: PUSH
11098: LD_INT 23
11100: PUSH
11101: LD_INT 20
11103: PUSH
11104: LD_INT 22
11106: PUSH
11107: LD_INT 17
11109: PUSH
11110: LD_INT 24
11112: PUSH
11113: LD_INT 21
11115: PUSH
11116: LD_INT 19
11118: PUSH
11119: LD_INT 16
11121: PUSH
11122: LD_INT 25
11124: PUSH
11125: LD_INT 18
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: IN
11140: ST_TO_ADDR
// end ;
11141: LD_VAR 0 2
11145: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11146: LD_INT 0
11148: PPUSH
11149: PPUSH
11150: PPUSH
// result := [ ] ;
11151: LD_ADDR_VAR 0 4
11155: PUSH
11156: EMPTY
11157: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11158: LD_ADDR_VAR 0 5
11162: PUSH
11163: LD_VAR 0 2
11167: PPUSH
11168: LD_INT 21
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 70
11182: ST_TO_ADDR
// if not tmp then
11183: LD_VAR 0 5
11187: NOT
11188: IFFALSE 11192
// exit ;
11190: GO 11256
// if checkLink then
11192: LD_VAR 0 3
11196: IFFALSE 11246
// begin for i in tmp do
11198: LD_ADDR_VAR 0 6
11202: PUSH
11203: LD_VAR 0 5
11207: PUSH
11208: FOR_IN
11209: IFFALSE 11244
// if GetBase ( i ) <> base then
11211: LD_VAR 0 6
11215: PPUSH
11216: CALL_OW 274
11220: PUSH
11221: LD_VAR 0 1
11225: NONEQUAL
11226: IFFALSE 11242
// ComLinkToBase ( base , i ) ;
11228: LD_VAR 0 1
11232: PPUSH
11233: LD_VAR 0 6
11237: PPUSH
11238: CALL_OW 169
11242: GO 11208
11244: POP
11245: POP
// end ; result := tmp ;
11246: LD_ADDR_VAR 0 4
11250: PUSH
11251: LD_VAR 0 5
11255: ST_TO_ADDR
// end ;
11256: LD_VAR 0 4
11260: RET
// export function ComComplete ( units , b ) ; var i ; begin
11261: LD_INT 0
11263: PPUSH
11264: PPUSH
// if not units then
11265: LD_VAR 0 1
11269: NOT
11270: IFFALSE 11274
// exit ;
11272: GO 11364
// for i in units do
11274: LD_ADDR_VAR 0 4
11278: PUSH
11279: LD_VAR 0 1
11283: PUSH
11284: FOR_IN
11285: IFFALSE 11362
// if BuildingStatus ( b ) = bs_build then
11287: LD_VAR 0 2
11291: PPUSH
11292: CALL_OW 461
11296: PUSH
11297: LD_INT 1
11299: EQUAL
11300: IFFALSE 11360
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11302: LD_VAR 0 4
11306: PPUSH
11307: LD_STRING h
11309: PUSH
11310: LD_VAR 0 2
11314: PPUSH
11315: CALL_OW 250
11319: PUSH
11320: LD_VAR 0 2
11324: PPUSH
11325: CALL_OW 251
11329: PUSH
11330: LD_VAR 0 2
11334: PUSH
11335: LD_INT 0
11337: PUSH
11338: LD_INT 0
11340: PUSH
11341: LD_INT 0
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: PPUSH
11356: CALL_OW 446
11360: GO 11284
11362: POP
11363: POP
// end ;
11364: LD_VAR 0 3
11368: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11369: LD_INT 0
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
11376: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11377: LD_VAR 0 1
11381: NOT
11382: IFTRUE 11399
11384: PUSH
11385: LD_VAR 0 1
11389: PPUSH
11390: CALL_OW 263
11394: PUSH
11395: LD_INT 2
11397: NONEQUAL
11398: OR
11399: IFFALSE 11403
// exit ;
11401: GO 11719
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11403: LD_ADDR_VAR 0 6
11407: PUSH
11408: LD_INT 22
11410: PUSH
11411: LD_VAR 0 1
11415: PPUSH
11416: CALL_OW 255
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 2
11427: PUSH
11428: LD_INT 30
11430: PUSH
11431: LD_INT 36
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 34
11440: PUSH
11441: LD_INT 31
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PPUSH
11457: CALL_OW 69
11461: ST_TO_ADDR
// if not tmp then
11462: LD_VAR 0 6
11466: NOT
11467: IFFALSE 11471
// exit ;
11469: GO 11719
// result := [ ] ;
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: EMPTY
11477: ST_TO_ADDR
// for i in tmp do
11478: LD_ADDR_VAR 0 3
11482: PUSH
11483: LD_VAR 0 6
11487: PUSH
11488: FOR_IN
11489: IFFALSE 11560
// begin t := UnitsInside ( i ) ;
11491: LD_ADDR_VAR 0 4
11495: PUSH
11496: LD_VAR 0 3
11500: PPUSH
11501: CALL_OW 313
11505: ST_TO_ADDR
// if t then
11506: LD_VAR 0 4
11510: IFFALSE 11558
// for j in t do
11512: LD_ADDR_VAR 0 7
11516: PUSH
11517: LD_VAR 0 4
11521: PUSH
11522: FOR_IN
11523: IFFALSE 11556
// result := Replace ( result , result + 1 , j ) ;
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: LD_VAR 0 2
11534: PPUSH
11535: LD_VAR 0 2
11539: PUSH
11540: LD_INT 1
11542: PLUS
11543: PPUSH
11544: LD_VAR 0 7
11548: PPUSH
11549: CALL_OW 1
11553: ST_TO_ADDR
11554: GO 11522
11556: POP
11557: POP
// end ;
11558: GO 11488
11560: POP
11561: POP
// if not result then
11562: LD_VAR 0 2
11566: NOT
11567: IFFALSE 11571
// exit ;
11569: GO 11719
// mech := result [ 1 ] ;
11571: LD_ADDR_VAR 0 5
11575: PUSH
11576: LD_VAR 0 2
11580: PUSH
11581: LD_INT 1
11583: ARRAY
11584: ST_TO_ADDR
// if result > 1 then
11585: LD_VAR 0 2
11589: PUSH
11590: LD_INT 1
11592: GREATER
11593: IFFALSE 11705
// begin for i = 2 to result do
11595: LD_ADDR_VAR 0 3
11599: PUSH
11600: DOUBLE
11601: LD_INT 2
11603: DEC
11604: ST_TO_ADDR
11605: LD_VAR 0 2
11609: PUSH
11610: FOR_TO
11611: IFFALSE 11703
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11613: LD_ADDR_VAR 0 4
11617: PUSH
11618: LD_VAR 0 2
11622: PUSH
11623: LD_VAR 0 3
11627: ARRAY
11628: PPUSH
11629: LD_INT 3
11631: PPUSH
11632: CALL_OW 259
11636: PUSH
11637: LD_VAR 0 2
11641: PUSH
11642: LD_VAR 0 3
11646: ARRAY
11647: PPUSH
11648: CALL_OW 432
11652: MINUS
11653: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11654: LD_VAR 0 4
11658: PUSH
11659: LD_VAR 0 5
11663: PPUSH
11664: LD_INT 3
11666: PPUSH
11667: CALL_OW 259
11671: PUSH
11672: LD_VAR 0 5
11676: PPUSH
11677: CALL_OW 432
11681: MINUS
11682: GREATEREQUAL
11683: IFFALSE 11701
// mech := result [ i ] ;
11685: LD_ADDR_VAR 0 5
11689: PUSH
11690: LD_VAR 0 2
11694: PUSH
11695: LD_VAR 0 3
11699: ARRAY
11700: ST_TO_ADDR
// end ;
11701: GO 11610
11703: POP
11704: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11705: LD_VAR 0 1
11709: PPUSH
11710: LD_VAR 0 5
11714: PPUSH
11715: CALL_OW 135
// end ;
11719: LD_VAR 0 2
11723: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
// result := [ ] ;
11739: LD_ADDR_VAR 0 7
11743: PUSH
11744: EMPTY
11745: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11746: LD_VAR 0 1
11750: PPUSH
11751: CALL_OW 266
11755: PUSH
11756: LD_INT 0
11758: PUSH
11759: LD_INT 1
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: IN
11766: NOT
11767: IFFALSE 11771
// exit ;
11769: GO 13411
// if name then
11771: LD_VAR 0 3
11775: IFFALSE 11791
// SetBName ( base_dep , name ) ;
11777: LD_VAR 0 1
11781: PPUSH
11782: LD_VAR 0 3
11786: PPUSH
11787: CALL_OW 500
// base := GetBase ( base_dep ) ;
11791: LD_ADDR_VAR 0 15
11795: PUSH
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 274
11805: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11806: LD_ADDR_VAR 0 16
11810: PUSH
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL_OW 255
11820: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11821: LD_ADDR_VAR 0 17
11825: PUSH
11826: LD_VAR 0 1
11830: PPUSH
11831: CALL_OW 248
11835: ST_TO_ADDR
// if sources then
11836: LD_VAR 0 5
11840: IFFALSE 11887
// for i = 1 to 3 do
11842: LD_ADDR_VAR 0 8
11846: PUSH
11847: DOUBLE
11848: LD_INT 1
11850: DEC
11851: ST_TO_ADDR
11852: LD_INT 3
11854: PUSH
11855: FOR_TO
11856: IFFALSE 11885
// AddResourceType ( base , i , sources [ i ] ) ;
11858: LD_VAR 0 15
11862: PPUSH
11863: LD_VAR 0 8
11867: PPUSH
11868: LD_VAR 0 5
11872: PUSH
11873: LD_VAR 0 8
11877: ARRAY
11878: PPUSH
11879: CALL_OW 276
11883: GO 11855
11885: POP
11886: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11887: LD_ADDR_VAR 0 18
11891: PUSH
11892: LD_VAR 0 15
11896: PPUSH
11897: LD_VAR 0 2
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL 11146 0 3
11909: ST_TO_ADDR
// InitHc ;
11910: CALL_OW 19
// InitUc ;
11914: CALL_OW 18
// uc_side := side ;
11918: LD_ADDR_OWVAR 20
11922: PUSH
11923: LD_VAR 0 16
11927: ST_TO_ADDR
// uc_nation := nation ;
11928: LD_ADDR_OWVAR 21
11932: PUSH
11933: LD_VAR 0 17
11937: ST_TO_ADDR
// if buildings then
11938: LD_VAR 0 18
11942: IFFALSE 13270
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11944: LD_ADDR_VAR 0 19
11948: PUSH
11949: LD_VAR 0 18
11953: PPUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 29
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 72
11986: ST_TO_ADDR
// if tmp then
11987: LD_VAR 0 19
11991: IFFALSE 12039
// for i in tmp do
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_VAR 0 19
12002: PUSH
12003: FOR_IN
12004: IFFALSE 12037
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12006: LD_VAR 0 8
12010: PPUSH
12011: CALL_OW 250
12015: PPUSH
12016: LD_VAR 0 8
12020: PPUSH
12021: CALL_OW 251
12025: PPUSH
12026: LD_VAR 0 16
12030: PPUSH
12031: CALL_OW 441
12035: GO 12003
12037: POP
12038: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12039: LD_VAR 0 18
12043: PPUSH
12044: LD_INT 2
12046: PUSH
12047: LD_INT 30
12049: PUSH
12050: LD_INT 32
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 30
12059: PUSH
12060: LD_INT 33
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 72
12076: IFFALSE 12164
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12078: LD_ADDR_VAR 0 8
12082: PUSH
12083: LD_VAR 0 18
12087: PPUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 30
12093: PUSH
12094: LD_INT 32
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 30
12103: PUSH
12104: LD_INT 33
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 72
12120: PUSH
12121: FOR_IN
12122: IFFALSE 12162
// begin if not GetBWeapon ( i ) then
12124: LD_VAR 0 8
12128: PPUSH
12129: CALL_OW 269
12133: NOT
12134: IFFALSE 12160
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12136: LD_VAR 0 8
12140: PPUSH
12141: LD_VAR 0 8
12145: PPUSH
12146: LD_VAR 0 2
12150: PPUSH
12151: CALL 13416 0 2
12155: PPUSH
12156: CALL_OW 431
// end ;
12160: GO 12121
12162: POP
12163: POP
// end ; for i = 1 to personel do
12164: LD_ADDR_VAR 0 8
12168: PUSH
12169: DOUBLE
12170: LD_INT 1
12172: DEC
12173: ST_TO_ADDR
12174: LD_VAR 0 6
12178: PUSH
12179: FOR_TO
12180: IFFALSE 13250
// begin if i > 4 then
12182: LD_VAR 0 8
12186: PUSH
12187: LD_INT 4
12189: GREATER
12190: IFFALSE 12194
// break ;
12192: GO 13250
// case i of 1 :
12194: LD_VAR 0 8
12198: PUSH
12199: LD_INT 1
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12287
12207: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12208: LD_ADDR_VAR 0 12
12212: PUSH
12213: LD_VAR 0 18
12217: PPUSH
12218: LD_INT 22
12220: PUSH
12221: LD_VAR 0 16
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 58
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: LD_INT 2
12238: PUSH
12239: LD_INT 30
12241: PUSH
12242: LD_INT 32
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 30
12251: PUSH
12252: LD_INT 4
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 30
12261: PUSH
12262: LD_INT 5
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: PPUSH
12280: CALL_OW 72
12284: ST_TO_ADDR
12285: GO 12509
12287: LD_INT 2
12289: DOUBLE
12290: EQUAL
12291: IFTRUE 12295
12293: GO 12357
12295: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12296: LD_ADDR_VAR 0 12
12300: PUSH
12301: LD_VAR 0 18
12305: PPUSH
12306: LD_INT 22
12308: PUSH
12309: LD_VAR 0 16
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: LD_INT 30
12323: PUSH
12324: LD_INT 0
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 30
12333: PUSH
12334: LD_INT 1
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: ST_TO_ADDR
12355: GO 12509
12357: LD_INT 3
12359: DOUBLE
12360: EQUAL
12361: IFTRUE 12365
12363: GO 12427
12365: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12366: LD_ADDR_VAR 0 12
12370: PUSH
12371: LD_VAR 0 18
12375: PPUSH
12376: LD_INT 22
12378: PUSH
12379: LD_VAR 0 16
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: LD_INT 30
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 30
12403: PUSH
12404: LD_INT 3
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PPUSH
12420: CALL_OW 72
12424: ST_TO_ADDR
12425: GO 12509
12427: LD_INT 4
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12435
12433: GO 12508
12435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12436: LD_ADDR_VAR 0 12
12440: PUSH
12441: LD_VAR 0 18
12445: PPUSH
12446: LD_INT 22
12448: PUSH
12449: LD_VAR 0 16
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: LD_INT 30
12463: PUSH
12464: LD_INT 6
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 30
12473: PUSH
12474: LD_INT 7
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 30
12483: PUSH
12484: LD_INT 8
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 72
12505: ST_TO_ADDR
12506: GO 12509
12508: POP
// if i = 1 then
12509: LD_VAR 0 8
12513: PUSH
12514: LD_INT 1
12516: EQUAL
12517: IFFALSE 12628
// begin tmp := [ ] ;
12519: LD_ADDR_VAR 0 19
12523: PUSH
12524: EMPTY
12525: ST_TO_ADDR
// for j in f do
12526: LD_ADDR_VAR 0 9
12530: PUSH
12531: LD_VAR 0 12
12535: PUSH
12536: FOR_IN
12537: IFFALSE 12610
// if GetBType ( j ) = b_bunker then
12539: LD_VAR 0 9
12543: PPUSH
12544: CALL_OW 266
12548: PUSH
12549: LD_INT 32
12551: EQUAL
12552: IFFALSE 12579
// tmp := Insert ( tmp , 1 , j ) else
12554: LD_ADDR_VAR 0 19
12558: PUSH
12559: LD_VAR 0 19
12563: PPUSH
12564: LD_INT 1
12566: PPUSH
12567: LD_VAR 0 9
12571: PPUSH
12572: CALL_OW 2
12576: ST_TO_ADDR
12577: GO 12608
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12579: LD_ADDR_VAR 0 19
12583: PUSH
12584: LD_VAR 0 19
12588: PPUSH
12589: LD_VAR 0 19
12593: PUSH
12594: LD_INT 1
12596: PLUS
12597: PPUSH
12598: LD_VAR 0 9
12602: PPUSH
12603: CALL_OW 2
12607: ST_TO_ADDR
12608: GO 12536
12610: POP
12611: POP
// if tmp then
12612: LD_VAR 0 19
12616: IFFALSE 12628
// f := tmp ;
12618: LD_ADDR_VAR 0 12
12622: PUSH
12623: LD_VAR 0 19
12627: ST_TO_ADDR
// end ; x := personel [ i ] ;
12628: LD_ADDR_VAR 0 13
12632: PUSH
12633: LD_VAR 0 6
12637: PUSH
12638: LD_VAR 0 8
12642: ARRAY
12643: ST_TO_ADDR
// if x = - 1 then
12644: LD_VAR 0 13
12648: PUSH
12649: LD_INT 1
12651: NEG
12652: EQUAL
12653: IFFALSE 12864
// begin for j in f do
12655: LD_ADDR_VAR 0 9
12659: PUSH
12660: LD_VAR 0 12
12664: PUSH
12665: FOR_IN
12666: IFFALSE 12860
// repeat InitHc ;
12668: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12672: LD_VAR 0 9
12676: PPUSH
12677: CALL_OW 266
12681: PUSH
12682: LD_INT 5
12684: EQUAL
12685: IFFALSE 12755
// begin if UnitsInside ( j ) < 3 then
12687: LD_VAR 0 9
12691: PPUSH
12692: CALL_OW 313
12696: PUSH
12697: LD_INT 3
12699: LESS
12700: IFFALSE 12736
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12702: LD_INT 0
12704: PPUSH
12705: LD_INT 5
12707: PUSH
12708: LD_INT 8
12710: PUSH
12711: LD_INT 9
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: PUSH
12719: LD_VAR 0 17
12723: ARRAY
12724: PPUSH
12725: LD_VAR 0 4
12729: PPUSH
12730: CALL_OW 380
12734: GO 12753
// PrepareHuman ( false , i , skill ) ;
12736: LD_INT 0
12738: PPUSH
12739: LD_VAR 0 8
12743: PPUSH
12744: LD_VAR 0 4
12748: PPUSH
12749: CALL_OW 380
// end else
12753: GO 12772
// PrepareHuman ( false , i , skill ) ;
12755: LD_INT 0
12757: PPUSH
12758: LD_VAR 0 8
12762: PPUSH
12763: LD_VAR 0 4
12767: PPUSH
12768: CALL_OW 380
// un := CreateHuman ;
12772: LD_ADDR_VAR 0 14
12776: PUSH
12777: CALL_OW 44
12781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12782: LD_ADDR_VAR 0 7
12786: PUSH
12787: LD_VAR 0 7
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: LD_VAR 0 14
12799: PPUSH
12800: CALL_OW 2
12804: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12805: LD_VAR 0 14
12809: PPUSH
12810: LD_VAR 0 9
12814: PPUSH
12815: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12819: LD_VAR 0 9
12823: PPUSH
12824: CALL_OW 313
12828: PUSH
12829: LD_INT 6
12831: EQUAL
12832: IFTRUE 12856
12834: PUSH
12835: LD_VAR 0 9
12839: PPUSH
12840: CALL_OW 266
12844: PUSH
12845: LD_INT 32
12847: PUSH
12848: LD_INT 31
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: IN
12855: OR
12856: IFFALSE 12668
12858: GO 12665
12860: POP
12861: POP
// end else
12862: GO 13248
// for j = 1 to x do
12864: LD_ADDR_VAR 0 9
12868: PUSH
12869: DOUBLE
12870: LD_INT 1
12872: DEC
12873: ST_TO_ADDR
12874: LD_VAR 0 13
12878: PUSH
12879: FOR_TO
12880: IFFALSE 13246
// begin InitHc ;
12882: CALL_OW 19
// if not f then
12886: LD_VAR 0 12
12890: NOT
12891: IFFALSE 12980
// begin PrepareHuman ( false , i , skill ) ;
12893: LD_INT 0
12895: PPUSH
12896: LD_VAR 0 8
12900: PPUSH
12901: LD_VAR 0 4
12905: PPUSH
12906: CALL_OW 380
// un := CreateHuman ;
12910: LD_ADDR_VAR 0 14
12914: PUSH
12915: CALL_OW 44
12919: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12920: LD_ADDR_VAR 0 7
12924: PUSH
12925: LD_VAR 0 7
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: LD_VAR 0 14
12937: PPUSH
12938: CALL_OW 2
12942: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12943: LD_VAR 0 14
12947: PPUSH
12948: LD_VAR 0 1
12952: PPUSH
12953: CALL_OW 250
12957: PPUSH
12958: LD_VAR 0 1
12962: PPUSH
12963: CALL_OW 251
12967: PPUSH
12968: LD_INT 10
12970: PPUSH
12971: LD_INT 0
12973: PPUSH
12974: CALL_OW 50
// continue ;
12978: GO 12879
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12980: LD_VAR 0 12
12984: PUSH
12985: LD_INT 1
12987: ARRAY
12988: PPUSH
12989: CALL_OW 313
12993: IFFALSE 13021
12995: PUSH
12996: LD_VAR 0 12
13000: PUSH
13001: LD_INT 1
13003: ARRAY
13004: PPUSH
13005: CALL_OW 266
13009: PUSH
13010: LD_INT 32
13012: PUSH
13013: LD_INT 31
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: IN
13020: AND
13021: IFTRUE 13042
13023: PUSH
13024: LD_VAR 0 12
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: CALL_OW 313
13037: PUSH
13038: LD_INT 6
13040: EQUAL
13041: OR
13042: IFFALSE 13062
// f := Delete ( f , 1 ) ;
13044: LD_ADDR_VAR 0 12
13048: PUSH
13049: LD_VAR 0 12
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: CALL_OW 3
13061: ST_TO_ADDR
// if not f then
13062: LD_VAR 0 12
13066: NOT
13067: IFFALSE 13085
// begin x := x + 2 ;
13069: LD_ADDR_VAR 0 13
13073: PUSH
13074: LD_VAR 0 13
13078: PUSH
13079: LD_INT 2
13081: PLUS
13082: ST_TO_ADDR
// continue ;
13083: GO 12879
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13085: LD_VAR 0 12
13089: PUSH
13090: LD_INT 1
13092: ARRAY
13093: PPUSH
13094: CALL_OW 266
13098: PUSH
13099: LD_INT 5
13101: EQUAL
13102: IFFALSE 13176
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13104: LD_VAR 0 12
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: CALL_OW 313
13117: PUSH
13118: LD_INT 3
13120: LESS
13121: IFFALSE 13157
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13123: LD_INT 0
13125: PPUSH
13126: LD_INT 5
13128: PUSH
13129: LD_INT 8
13131: PUSH
13132: LD_INT 9
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: LD_VAR 0 17
13144: ARRAY
13145: PPUSH
13146: LD_VAR 0 4
13150: PPUSH
13151: CALL_OW 380
13155: GO 13174
// PrepareHuman ( false , i , skill ) ;
13157: LD_INT 0
13159: PPUSH
13160: LD_VAR 0 8
13164: PPUSH
13165: LD_VAR 0 4
13169: PPUSH
13170: CALL_OW 380
// end else
13174: GO 13193
// PrepareHuman ( false , i , skill ) ;
13176: LD_INT 0
13178: PPUSH
13179: LD_VAR 0 8
13183: PPUSH
13184: LD_VAR 0 4
13188: PPUSH
13189: CALL_OW 380
// un := CreateHuman ;
13193: LD_ADDR_VAR 0 14
13197: PUSH
13198: CALL_OW 44
13202: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13203: LD_ADDR_VAR 0 7
13207: PUSH
13208: LD_VAR 0 7
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: LD_VAR 0 14
13220: PPUSH
13221: CALL_OW 2
13225: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13226: LD_VAR 0 14
13230: PPUSH
13231: LD_VAR 0 12
13235: PUSH
13236: LD_INT 1
13238: ARRAY
13239: PPUSH
13240: CALL_OW 52
// end ;
13244: GO 12879
13246: POP
13247: POP
// end ;
13248: GO 12179
13250: POP
13251: POP
// result := result ^ buildings ;
13252: LD_ADDR_VAR 0 7
13256: PUSH
13257: LD_VAR 0 7
13261: PUSH
13262: LD_VAR 0 18
13266: ADD
13267: ST_TO_ADDR
// end else
13268: GO 13411
// begin for i = 1 to personel do
13270: LD_ADDR_VAR 0 8
13274: PUSH
13275: DOUBLE
13276: LD_INT 1
13278: DEC
13279: ST_TO_ADDR
13280: LD_VAR 0 6
13284: PUSH
13285: FOR_TO
13286: IFFALSE 13409
// begin if i > 4 then
13288: LD_VAR 0 8
13292: PUSH
13293: LD_INT 4
13295: GREATER
13296: IFFALSE 13300
// break ;
13298: GO 13409
// x := personel [ i ] ;
13300: LD_ADDR_VAR 0 13
13304: PUSH
13305: LD_VAR 0 6
13309: PUSH
13310: LD_VAR 0 8
13314: ARRAY
13315: ST_TO_ADDR
// if x = - 1 then
13316: LD_VAR 0 13
13320: PUSH
13321: LD_INT 1
13323: NEG
13324: EQUAL
13325: IFFALSE 13329
// continue ;
13327: GO 13285
// PrepareHuman ( false , i , skill ) ;
13329: LD_INT 0
13331: PPUSH
13332: LD_VAR 0 8
13336: PPUSH
13337: LD_VAR 0 4
13341: PPUSH
13342: CALL_OW 380
// un := CreateHuman ;
13346: LD_ADDR_VAR 0 14
13350: PUSH
13351: CALL_OW 44
13355: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13356: LD_VAR 0 14
13360: PPUSH
13361: LD_VAR 0 1
13365: PPUSH
13366: CALL_OW 250
13370: PPUSH
13371: LD_VAR 0 1
13375: PPUSH
13376: CALL_OW 251
13380: PPUSH
13381: LD_INT 10
13383: PPUSH
13384: LD_INT 0
13386: PPUSH
13387: CALL_OW 50
// result := result ^ un ;
13391: LD_ADDR_VAR 0 7
13395: PUSH
13396: LD_VAR 0 7
13400: PUSH
13401: LD_VAR 0 14
13405: ADD
13406: ST_TO_ADDR
// end ;
13407: GO 13285
13409: POP
13410: POP
// end ; end ;
13411: LD_VAR 0 7
13415: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13416: LD_INT 0
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
13423: PPUSH
13424: PPUSH
13425: PPUSH
13426: PPUSH
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
// result := false ;
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_INT 0
13441: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13442: LD_VAR 0 1
13446: NOT
13447: IFTRUE 13472
13449: PUSH
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 266
13459: PUSH
13460: LD_INT 32
13462: PUSH
13463: LD_INT 33
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: IN
13470: NOT
13471: OR
13472: IFFALSE 13476
// exit ;
13474: GO 14611
// nat := GetNation ( tower ) ;
13476: LD_ADDR_VAR 0 12
13480: PUSH
13481: LD_VAR 0 1
13485: PPUSH
13486: CALL_OW 248
13490: ST_TO_ADDR
// side := GetSide ( tower ) ;
13491: LD_ADDR_VAR 0 16
13495: PUSH
13496: LD_VAR 0 1
13500: PPUSH
13501: CALL_OW 255
13505: ST_TO_ADDR
// x := GetX ( tower ) ;
13506: LD_ADDR_VAR 0 10
13510: PUSH
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 250
13520: ST_TO_ADDR
// y := GetY ( tower ) ;
13521: LD_ADDR_VAR 0 11
13525: PUSH
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 251
13535: ST_TO_ADDR
// if not x or not y then
13536: LD_VAR 0 10
13540: NOT
13541: IFTRUE 13550
13543: PUSH
13544: LD_VAR 0 11
13548: NOT
13549: OR
13550: IFFALSE 13554
// exit ;
13552: GO 14611
// weapon := 0 ;
13554: LD_ADDR_VAR 0 18
13558: PUSH
13559: LD_INT 0
13561: ST_TO_ADDR
// fac_list := [ ] ;
13562: LD_ADDR_VAR 0 17
13566: PUSH
13567: EMPTY
13568: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13569: LD_ADDR_VAR 0 6
13573: PUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: CALL_OW 274
13583: PPUSH
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 0
13591: PPUSH
13592: CALL 11146 0 3
13596: PPUSH
13597: LD_INT 30
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 72
13611: ST_TO_ADDR
// if not factories then
13612: LD_VAR 0 6
13616: NOT
13617: IFFALSE 13621
// exit ;
13619: GO 14611
// for i in factories do
13621: LD_ADDR_VAR 0 8
13625: PUSH
13626: LD_VAR 0 6
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13657
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13634: LD_ADDR_VAR 0 17
13638: PUSH
13639: LD_VAR 0 17
13643: PUSH
13644: LD_VAR 0 8
13648: PPUSH
13649: CALL_OW 478
13653: UNION
13654: ST_TO_ADDR
13655: GO 13631
13657: POP
13658: POP
// if not fac_list then
13659: LD_VAR 0 17
13663: NOT
13664: IFFALSE 13668
// exit ;
13666: GO 14611
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13668: LD_ADDR_VAR 0 5
13672: PUSH
13673: LD_INT 4
13675: PUSH
13676: LD_INT 5
13678: PUSH
13679: LD_INT 9
13681: PUSH
13682: LD_INT 10
13684: PUSH
13685: LD_INT 6
13687: PUSH
13688: LD_INT 7
13690: PUSH
13691: LD_INT 11
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 27
13705: PUSH
13706: LD_INT 28
13708: PUSH
13709: LD_INT 26
13711: PUSH
13712: LD_INT 30
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 43
13723: PUSH
13724: LD_INT 44
13726: PUSH
13727: LD_INT 46
13729: PUSH
13730: LD_INT 45
13732: PUSH
13733: LD_INT 47
13735: PUSH
13736: LD_INT 49
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_VAR 0 12
13756: ARRAY
13757: ST_TO_ADDR
// list := list isect fac_list ;
13758: LD_ADDR_VAR 0 5
13762: PUSH
13763: LD_VAR 0 5
13767: PUSH
13768: LD_VAR 0 17
13772: ISECT
13773: ST_TO_ADDR
// if not list then
13774: LD_VAR 0 5
13778: NOT
13779: IFFALSE 13783
// exit ;
13781: GO 14611
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13783: LD_VAR 0 12
13787: PUSH
13788: LD_INT 3
13790: EQUAL
13791: IFFALSE 13803
13793: PUSH
13794: LD_INT 49
13796: PUSH
13797: LD_VAR 0 5
13801: IN
13802: AND
13803: IFFALSE 13823
13805: PUSH
13806: LD_INT 31
13808: PPUSH
13809: LD_VAR 0 16
13813: PPUSH
13814: CALL_OW 321
13818: PUSH
13819: LD_INT 2
13821: EQUAL
13822: AND
13823: IFFALSE 13883
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13825: LD_INT 22
13827: PUSH
13828: LD_VAR 0 16
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 35
13839: PUSH
13840: LD_INT 49
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 91
13849: PUSH
13850: LD_VAR 0 1
13854: PUSH
13855: LD_INT 10
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 69
13872: NOT
13873: IFFALSE 13883
// weapon := ru_time_lapser ;
13875: LD_ADDR_VAR 0 18
13879: PUSH
13880: LD_INT 49
13882: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13883: LD_VAR 0 12
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: IN
13898: IFFALSE 13922
13900: PUSH
13901: LD_INT 11
13903: PUSH
13904: LD_VAR 0 5
13908: IN
13909: IFTRUE 13921
13911: PUSH
13912: LD_INT 30
13914: PUSH
13915: LD_VAR 0 5
13919: IN
13920: OR
13921: AND
13922: IFFALSE 13942
13924: PUSH
13925: LD_INT 6
13927: PPUSH
13928: LD_VAR 0 16
13932: PPUSH
13933: CALL_OW 321
13937: PUSH
13938: LD_INT 2
13940: EQUAL
13941: AND
13942: IFFALSE 14109
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13944: LD_INT 22
13946: PUSH
13947: LD_VAR 0 16
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 35
13961: PUSH
13962: LD_INT 11
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 35
13971: PUSH
13972: LD_INT 30
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 91
13986: PUSH
13987: LD_VAR 0 1
13991: PUSH
13992: LD_INT 18
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PPUSH
14005: CALL_OW 69
14009: NOT
14010: IFFALSE 14086
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_VAR 0 16
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: LD_INT 30
14030: PUSH
14031: LD_INT 32
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 30
14040: PUSH
14041: LD_INT 33
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 91
14055: PUSH
14056: LD_VAR 0 1
14060: PUSH
14061: LD_INT 12
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: PPUSH
14077: CALL_OW 69
14081: PUSH
14082: LD_INT 2
14084: GREATER
14085: AND
14086: IFFALSE 14109
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14088: LD_ADDR_VAR 0 18
14092: PUSH
14093: LD_INT 11
14095: PUSH
14096: LD_INT 30
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_VAR 0 12
14107: ARRAY
14108: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14109: LD_VAR 0 18
14113: NOT
14114: IFFALSE 14134
14116: PUSH
14117: LD_INT 40
14119: PPUSH
14120: LD_VAR 0 16
14124: PPUSH
14125: CALL_OW 321
14129: PUSH
14130: LD_INT 2
14132: EQUAL
14133: AND
14134: IFFALSE 14170
14136: PUSH
14137: LD_INT 7
14139: PUSH
14140: LD_VAR 0 5
14144: IN
14145: IFTRUE 14157
14147: PUSH
14148: LD_INT 28
14150: PUSH
14151: LD_VAR 0 5
14155: IN
14156: OR
14157: IFTRUE 14169
14159: PUSH
14160: LD_INT 45
14162: PUSH
14163: LD_VAR 0 5
14167: IN
14168: OR
14169: AND
14170: IFFALSE 14424
// begin hex := GetHexInfo ( x , y ) ;
14172: LD_ADDR_VAR 0 4
14176: PUSH
14177: LD_VAR 0 10
14181: PPUSH
14182: LD_VAR 0 11
14186: PPUSH
14187: CALL_OW 546
14191: ST_TO_ADDR
// if hex [ 1 ] then
14192: LD_VAR 0 4
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: IFFALSE 14204
// exit ;
14202: GO 14611
// height := hex [ 2 ] ;
14204: LD_ADDR_VAR 0 15
14208: PUSH
14209: LD_VAR 0 4
14213: PUSH
14214: LD_INT 2
14216: ARRAY
14217: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14218: LD_ADDR_VAR 0 14
14222: PUSH
14223: LD_INT 0
14225: PUSH
14226: LD_INT 2
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: LD_INT 5
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: ST_TO_ADDR
// for i in tmp do
14241: LD_ADDR_VAR 0 8
14245: PUSH
14246: LD_VAR 0 14
14250: PUSH
14251: FOR_IN
14252: IFFALSE 14422
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14254: LD_ADDR_VAR 0 9
14258: PUSH
14259: LD_VAR 0 10
14263: PPUSH
14264: LD_VAR 0 8
14268: PPUSH
14269: LD_INT 5
14271: PPUSH
14272: CALL_OW 272
14276: PUSH
14277: LD_VAR 0 11
14281: PPUSH
14282: LD_VAR 0 8
14286: PPUSH
14287: LD_INT 5
14289: PPUSH
14290: CALL_OW 273
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14299: LD_VAR 0 9
14303: PUSH
14304: LD_INT 1
14306: ARRAY
14307: PPUSH
14308: LD_VAR 0 9
14312: PUSH
14313: LD_INT 2
14315: ARRAY
14316: PPUSH
14317: CALL_OW 488
14321: IFFALSE 14420
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14323: LD_ADDR_VAR 0 4
14327: PUSH
14328: LD_VAR 0 9
14332: PUSH
14333: LD_INT 1
14335: ARRAY
14336: PPUSH
14337: LD_VAR 0 9
14341: PUSH
14342: LD_INT 2
14344: ARRAY
14345: PPUSH
14346: CALL_OW 546
14350: ST_TO_ADDR
// if hex [ 1 ] then
14351: LD_VAR 0 4
14355: PUSH
14356: LD_INT 1
14358: ARRAY
14359: IFFALSE 14363
// continue ;
14361: GO 14251
// h := hex [ 2 ] ;
14363: LD_ADDR_VAR 0 13
14367: PUSH
14368: LD_VAR 0 4
14372: PUSH
14373: LD_INT 2
14375: ARRAY
14376: ST_TO_ADDR
// if h + 7 < height then
14377: LD_VAR 0 13
14381: PUSH
14382: LD_INT 7
14384: PLUS
14385: PUSH
14386: LD_VAR 0 15
14390: LESS
14391: IFFALSE 14420
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14393: LD_ADDR_VAR 0 18
14397: PUSH
14398: LD_INT 7
14400: PUSH
14401: LD_INT 28
14403: PUSH
14404: LD_INT 45
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: PUSH
14412: LD_VAR 0 12
14416: ARRAY
14417: ST_TO_ADDR
// break ;
14418: GO 14422
// end ; end ; end ;
14420: GO 14251
14422: POP
14423: POP
// end ; if not weapon then
14424: LD_VAR 0 18
14428: NOT
14429: IFFALSE 14489
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14431: LD_ADDR_VAR 0 5
14435: PUSH
14436: LD_VAR 0 5
14440: PUSH
14441: LD_INT 11
14443: PUSH
14444: LD_INT 30
14446: PUSH
14447: LD_INT 49
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: DIFF
14455: ST_TO_ADDR
// if not list then
14456: LD_VAR 0 5
14460: NOT
14461: IFFALSE 14465
// exit ;
14463: GO 14611
// weapon := list [ rand ( 1 , list ) ] ;
14465: LD_ADDR_VAR 0 18
14469: PUSH
14470: LD_VAR 0 5
14474: PUSH
14475: LD_INT 1
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: CALL_OW 12
14487: ARRAY
14488: ST_TO_ADDR
// end ; if weapon then
14489: LD_VAR 0 18
14493: IFFALSE 14611
// begin tmp := CostOfWeapon ( weapon ) ;
14495: LD_ADDR_VAR 0 14
14499: PUSH
14500: LD_VAR 0 18
14504: PPUSH
14505: CALL_OW 451
14509: ST_TO_ADDR
// j := GetBase ( tower ) ;
14510: LD_ADDR_VAR 0 9
14514: PUSH
14515: LD_VAR 0 1
14519: PPUSH
14520: CALL_OW 274
14524: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14525: LD_VAR 0 9
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 275
14537: PUSH
14538: LD_VAR 0 14
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: GREATEREQUAL
14547: IFFALSE 14573
14549: PUSH
14550: LD_VAR 0 9
14554: PPUSH
14555: LD_INT 2
14557: PPUSH
14558: CALL_OW 275
14562: PUSH
14563: LD_VAR 0 14
14567: PUSH
14568: LD_INT 2
14570: ARRAY
14571: GREATEREQUAL
14572: AND
14573: IFFALSE 14599
14575: PUSH
14576: LD_VAR 0 9
14580: PPUSH
14581: LD_INT 3
14583: PPUSH
14584: CALL_OW 275
14588: PUSH
14589: LD_VAR 0 14
14593: PUSH
14594: LD_INT 3
14596: ARRAY
14597: GREATEREQUAL
14598: AND
14599: IFFALSE 14611
// result := weapon ;
14601: LD_ADDR_VAR 0 3
14605: PUSH
14606: LD_VAR 0 18
14610: ST_TO_ADDR
// end ; end ;
14611: LD_VAR 0 3
14615: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14616: LD_INT 0
14618: PPUSH
14619: PPUSH
// result := true ;
14620: LD_ADDR_VAR 0 3
14624: PUSH
14625: LD_INT 1
14627: ST_TO_ADDR
// if array1 = array2 then
14628: LD_VAR 0 1
14632: PUSH
14633: LD_VAR 0 2
14637: EQUAL
14638: IFFALSE 14698
// begin for i = 1 to array1 do
14640: LD_ADDR_VAR 0 4
14644: PUSH
14645: DOUBLE
14646: LD_INT 1
14648: DEC
14649: ST_TO_ADDR
14650: LD_VAR 0 1
14654: PUSH
14655: FOR_TO
14656: IFFALSE 14694
// if array1 [ i ] <> array2 [ i ] then
14658: LD_VAR 0 1
14662: PUSH
14663: LD_VAR 0 4
14667: ARRAY
14668: PUSH
14669: LD_VAR 0 2
14673: PUSH
14674: LD_VAR 0 4
14678: ARRAY
14679: NONEQUAL
14680: IFFALSE 14692
// begin result := false ;
14682: LD_ADDR_VAR 0 3
14686: PUSH
14687: LD_INT 0
14689: ST_TO_ADDR
// break ;
14690: GO 14694
// end ;
14692: GO 14655
14694: POP
14695: POP
// end else
14696: GO 14706
// result := false ;
14698: LD_ADDR_VAR 0 3
14702: PUSH
14703: LD_INT 0
14705: ST_TO_ADDR
// end ;
14706: LD_VAR 0 3
14710: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14711: LD_INT 0
14713: PPUSH
14714: PPUSH
// if not array1 or not array2 then
14715: LD_VAR 0 1
14719: NOT
14720: IFTRUE 14729
14722: PUSH
14723: LD_VAR 0 2
14727: NOT
14728: OR
14729: IFFALSE 14733
// exit ;
14731: GO 14797
// result := true ;
14733: LD_ADDR_VAR 0 3
14737: PUSH
14738: LD_INT 1
14740: ST_TO_ADDR
// for i = 1 to array1 do
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: DOUBLE
14747: LD_INT 1
14749: DEC
14750: ST_TO_ADDR
14751: LD_VAR 0 1
14755: PUSH
14756: FOR_TO
14757: IFFALSE 14795
// if array1 [ i ] <> array2 [ i ] then
14759: LD_VAR 0 1
14763: PUSH
14764: LD_VAR 0 4
14768: ARRAY
14769: PUSH
14770: LD_VAR 0 2
14774: PUSH
14775: LD_VAR 0 4
14779: ARRAY
14780: NONEQUAL
14781: IFFALSE 14793
// begin result := false ;
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: LD_INT 0
14790: ST_TO_ADDR
// break ;
14791: GO 14795
// end ;
14793: GO 14756
14795: POP
14796: POP
// end ;
14797: LD_VAR 0 3
14801: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14802: LD_INT 0
14804: PPUSH
14805: PPUSH
14806: PPUSH
// pom := GetBase ( fac ) ;
14807: LD_ADDR_VAR 0 5
14811: PUSH
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 274
14821: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14822: LD_ADDR_VAR 0 4
14826: PUSH
14827: LD_VAR 0 2
14831: PUSH
14832: LD_INT 1
14834: ARRAY
14835: PPUSH
14836: LD_VAR 0 2
14840: PUSH
14841: LD_INT 2
14843: ARRAY
14844: PPUSH
14845: LD_VAR 0 2
14849: PUSH
14850: LD_INT 3
14852: ARRAY
14853: PPUSH
14854: LD_VAR 0 2
14858: PUSH
14859: LD_INT 4
14861: ARRAY
14862: PPUSH
14863: CALL_OW 449
14867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14868: LD_ADDR_VAR 0 3
14872: PUSH
14873: LD_VAR 0 5
14877: PPUSH
14878: LD_INT 1
14880: PPUSH
14881: CALL_OW 275
14885: PUSH
14886: LD_VAR 0 4
14890: PUSH
14891: LD_INT 1
14893: ARRAY
14894: GREATEREQUAL
14895: IFFALSE 14921
14897: PUSH
14898: LD_VAR 0 5
14902: PPUSH
14903: LD_INT 2
14905: PPUSH
14906: CALL_OW 275
14910: PUSH
14911: LD_VAR 0 4
14915: PUSH
14916: LD_INT 2
14918: ARRAY
14919: GREATEREQUAL
14920: AND
14921: IFFALSE 14947
14923: PUSH
14924: LD_VAR 0 5
14928: PPUSH
14929: LD_INT 3
14931: PPUSH
14932: CALL_OW 275
14936: PUSH
14937: LD_VAR 0 4
14941: PUSH
14942: LD_INT 3
14944: ARRAY
14945: GREATEREQUAL
14946: AND
14947: ST_TO_ADDR
// end ;
14948: LD_VAR 0 3
14952: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14953: LD_INT 0
14955: PPUSH
14956: PPUSH
14957: PPUSH
14958: PPUSH
// pom := GetBase ( building ) ;
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 274
14973: ST_TO_ADDR
// if not pom then
14974: LD_VAR 0 3
14978: NOT
14979: IFFALSE 14983
// exit ;
14981: GO 15157
// btype := GetBType ( building ) ;
14983: LD_ADDR_VAR 0 5
14987: PUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL_OW 266
14997: ST_TO_ADDR
// if btype = b_armoury then
14998: LD_VAR 0 5
15002: PUSH
15003: LD_INT 4
15005: EQUAL
15006: IFFALSE 15016
// btype := b_barracks ;
15008: LD_ADDR_VAR 0 5
15012: PUSH
15013: LD_INT 5
15015: ST_TO_ADDR
// if btype = b_depot then
15016: LD_VAR 0 5
15020: PUSH
15021: LD_INT 0
15023: EQUAL
15024: IFFALSE 15034
// btype := b_warehouse ;
15026: LD_ADDR_VAR 0 5
15030: PUSH
15031: LD_INT 1
15033: ST_TO_ADDR
// if btype = b_workshop then
15034: LD_VAR 0 5
15038: PUSH
15039: LD_INT 2
15041: EQUAL
15042: IFFALSE 15052
// btype := b_factory ;
15044: LD_ADDR_VAR 0 5
15048: PUSH
15049: LD_INT 3
15051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15052: LD_ADDR_VAR 0 4
15056: PUSH
15057: LD_VAR 0 5
15061: PPUSH
15062: LD_VAR 0 1
15066: PPUSH
15067: CALL_OW 248
15071: PPUSH
15072: CALL_OW 450
15076: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15077: LD_ADDR_VAR 0 2
15081: PUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 275
15094: PUSH
15095: LD_VAR 0 4
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: GREATEREQUAL
15104: IFFALSE 15130
15106: PUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 2
15114: PPUSH
15115: CALL_OW 275
15119: PUSH
15120: LD_VAR 0 4
15124: PUSH
15125: LD_INT 2
15127: ARRAY
15128: GREATEREQUAL
15129: AND
15130: IFFALSE 15156
15132: PUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: LD_INT 3
15140: PPUSH
15141: CALL_OW 275
15145: PUSH
15146: LD_VAR 0 4
15150: PUSH
15151: LD_INT 3
15153: ARRAY
15154: GREATEREQUAL
15155: AND
15156: ST_TO_ADDR
// end ;
15157: LD_VAR 0 2
15161: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15162: LD_INT 0
15164: PPUSH
15165: PPUSH
15166: PPUSH
// pom := GetBase ( building ) ;
15167: LD_ADDR_VAR 0 4
15171: PUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 274
15181: ST_TO_ADDR
// if not pom then
15182: LD_VAR 0 4
15186: NOT
15187: IFFALSE 15191
// exit ;
15189: GO 15296
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15191: LD_ADDR_VAR 0 5
15195: PUSH
15196: LD_VAR 0 2
15200: PPUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 248
15210: PPUSH
15211: CALL_OW 450
15215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15216: LD_ADDR_VAR 0 3
15220: PUSH
15221: LD_VAR 0 4
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 275
15233: PUSH
15234: LD_VAR 0 5
15238: PUSH
15239: LD_INT 1
15241: ARRAY
15242: GREATEREQUAL
15243: IFFALSE 15269
15245: PUSH
15246: LD_VAR 0 4
15250: PPUSH
15251: LD_INT 2
15253: PPUSH
15254: CALL_OW 275
15258: PUSH
15259: LD_VAR 0 5
15263: PUSH
15264: LD_INT 2
15266: ARRAY
15267: GREATEREQUAL
15268: AND
15269: IFFALSE 15295
15271: PUSH
15272: LD_VAR 0 4
15276: PPUSH
15277: LD_INT 3
15279: PPUSH
15280: CALL_OW 275
15284: PUSH
15285: LD_VAR 0 5
15289: PUSH
15290: LD_INT 3
15292: ARRAY
15293: GREATEREQUAL
15294: AND
15295: ST_TO_ADDR
// end ;
15296: LD_VAR 0 3
15300: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15301: LD_INT 0
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
// result := false ;
15314: LD_ADDR_VAR 0 8
15318: PUSH
15319: LD_INT 0
15321: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15322: LD_VAR 0 5
15326: NOT
15327: IFTRUE 15336
15329: PUSH
15330: LD_VAR 0 1
15334: NOT
15335: OR
15336: IFTRUE 15345
15338: PUSH
15339: LD_VAR 0 2
15343: NOT
15344: OR
15345: IFTRUE 15354
15347: PUSH
15348: LD_VAR 0 3
15352: NOT
15353: OR
15354: IFFALSE 15358
// exit ;
15356: GO 16184
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15358: LD_ADDR_VAR 0 14
15362: PUSH
15363: LD_VAR 0 1
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: LD_VAR 0 3
15377: PPUSH
15378: LD_VAR 0 4
15382: PPUSH
15383: LD_VAR 0 5
15387: PUSH
15388: LD_INT 1
15390: ARRAY
15391: PPUSH
15392: CALL_OW 248
15396: PPUSH
15397: LD_INT 0
15399: PPUSH
15400: CALL 17465 0 6
15404: ST_TO_ADDR
// if not hexes then
15405: LD_VAR 0 14
15409: NOT
15410: IFFALSE 15414
// exit ;
15412: GO 16184
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15414: LD_ADDR_VAR 0 17
15418: PUSH
15419: LD_VAR 0 5
15423: PPUSH
15424: LD_INT 22
15426: PUSH
15427: LD_VAR 0 13
15431: PPUSH
15432: CALL_OW 255
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 30
15446: PUSH
15447: LD_INT 0
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 30
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PPUSH
15473: CALL_OW 72
15477: ST_TO_ADDR
// for i = 1 to hexes do
15478: LD_ADDR_VAR 0 9
15482: PUSH
15483: DOUBLE
15484: LD_INT 1
15486: DEC
15487: ST_TO_ADDR
15488: LD_VAR 0 14
15492: PUSH
15493: FOR_TO
15494: IFFALSE 16182
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15496: LD_ADDR_VAR 0 13
15500: PUSH
15501: LD_VAR 0 14
15505: PUSH
15506: LD_VAR 0 9
15510: ARRAY
15511: PUSH
15512: LD_INT 1
15514: ARRAY
15515: PPUSH
15516: LD_VAR 0 14
15520: PUSH
15521: LD_VAR 0 9
15525: ARRAY
15526: PUSH
15527: LD_INT 2
15529: ARRAY
15530: PPUSH
15531: CALL_OW 428
15535: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15536: LD_VAR 0 14
15540: PUSH
15541: LD_VAR 0 9
15545: ARRAY
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: LD_VAR 0 14
15555: PUSH
15556: LD_VAR 0 9
15560: ARRAY
15561: PUSH
15562: LD_INT 2
15564: ARRAY
15565: PPUSH
15566: CALL_OW 351
15570: IFTRUE 15609
15572: PUSH
15573: LD_VAR 0 14
15577: PUSH
15578: LD_VAR 0 9
15582: ARRAY
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PPUSH
15588: LD_VAR 0 14
15592: PUSH
15593: LD_VAR 0 9
15597: ARRAY
15598: PUSH
15599: LD_INT 2
15601: ARRAY
15602: PPUSH
15603: CALL_OW 488
15607: NOT
15608: OR
15609: IFTRUE 15626
15611: PUSH
15612: LD_VAR 0 13
15616: PPUSH
15617: CALL_OW 247
15621: PUSH
15622: LD_INT 3
15624: EQUAL
15625: OR
15626: IFFALSE 15632
// exit ;
15628: POP
15629: POP
15630: GO 16184
// if not tmp then
15632: LD_VAR 0 13
15636: NOT
15637: IFFALSE 15641
// continue ;
15639: GO 15493
// result := true ;
15641: LD_ADDR_VAR 0 8
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15649: LD_VAR 0 6
15653: IFFALSE 15670
15655: PUSH
15656: LD_VAR 0 13
15660: PPUSH
15661: CALL_OW 247
15665: PUSH
15666: LD_INT 2
15668: EQUAL
15669: AND
15670: IFFALSE 15687
15672: PUSH
15673: LD_VAR 0 13
15677: PPUSH
15678: CALL_OW 263
15682: PUSH
15683: LD_INT 1
15685: EQUAL
15686: AND
15687: IFFALSE 15851
// begin if IsDrivenBy ( tmp ) then
15689: LD_VAR 0 13
15693: PPUSH
15694: CALL_OW 311
15698: IFFALSE 15702
// continue ;
15700: GO 15493
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15702: LD_VAR 0 6
15706: PPUSH
15707: LD_INT 3
15709: PUSH
15710: LD_INT 60
15712: PUSH
15713: EMPTY
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 3
15722: PUSH
15723: LD_INT 55
15725: PUSH
15726: EMPTY
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PPUSH
15737: CALL_OW 72
15741: IFFALSE 15849
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15743: LD_ADDR_VAR 0 18
15747: PUSH
15748: LD_VAR 0 6
15752: PPUSH
15753: LD_INT 3
15755: PUSH
15756: LD_INT 60
15758: PUSH
15759: EMPTY
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: LD_INT 55
15771: PUSH
15772: EMPTY
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 72
15787: PUSH
15788: LD_INT 1
15790: ARRAY
15791: ST_TO_ADDR
// if IsInUnit ( driver ) then
15792: LD_VAR 0 18
15796: PPUSH
15797: CALL_OW 310
15801: IFFALSE 15812
// ComExit ( driver ) ;
15803: LD_VAR 0 18
15807: PPUSH
15808: CALL 41455 0 1
// AddComEnterUnit ( driver , tmp ) ;
15812: LD_VAR 0 18
15816: PPUSH
15817: LD_VAR 0 13
15821: PPUSH
15822: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15826: LD_VAR 0 18
15830: PPUSH
15831: LD_VAR 0 7
15835: PPUSH
15836: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15840: LD_VAR 0 18
15844: PPUSH
15845: CALL_OW 181
// end ; continue ;
15849: GO 15493
// end ; if not cleaners or not tmp in cleaners then
15851: LD_VAR 0 6
15855: NOT
15856: IFTRUE 15871
15858: PUSH
15859: LD_VAR 0 13
15863: PUSH
15864: LD_VAR 0 6
15868: IN
15869: NOT
15870: OR
15871: IFFALSE 16180
// begin if dep then
15873: LD_VAR 0 17
15877: IFFALSE 16013
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15879: LD_ADDR_VAR 0 16
15883: PUSH
15884: LD_VAR 0 17
15888: PUSH
15889: LD_INT 1
15891: ARRAY
15892: PPUSH
15893: CALL_OW 250
15897: PPUSH
15898: LD_VAR 0 17
15902: PUSH
15903: LD_INT 1
15905: ARRAY
15906: PPUSH
15907: CALL_OW 254
15911: PPUSH
15912: LD_INT 5
15914: PPUSH
15915: CALL_OW 272
15919: PUSH
15920: LD_VAR 0 17
15924: PUSH
15925: LD_INT 1
15927: ARRAY
15928: PPUSH
15929: CALL_OW 251
15933: PPUSH
15934: LD_VAR 0 17
15938: PUSH
15939: LD_INT 1
15941: ARRAY
15942: PPUSH
15943: CALL_OW 254
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: CALL_OW 273
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15960: LD_VAR 0 16
15964: PUSH
15965: LD_INT 1
15967: ARRAY
15968: PPUSH
15969: LD_VAR 0 16
15973: PUSH
15974: LD_INT 2
15976: ARRAY
15977: PPUSH
15978: CALL_OW 488
15982: IFFALSE 16013
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15984: LD_VAR 0 13
15988: PPUSH
15989: LD_VAR 0 16
15993: PUSH
15994: LD_INT 1
15996: ARRAY
15997: PPUSH
15998: LD_VAR 0 16
16002: PUSH
16003: LD_INT 2
16005: ARRAY
16006: PPUSH
16007: CALL_OW 111
// continue ;
16011: GO 15493
// end ; end ; r := GetDir ( tmp ) ;
16013: LD_ADDR_VAR 0 15
16017: PUSH
16018: LD_VAR 0 13
16022: PPUSH
16023: CALL_OW 254
16027: ST_TO_ADDR
// if r = 5 then
16028: LD_VAR 0 15
16032: PUSH
16033: LD_INT 5
16035: EQUAL
16036: IFFALSE 16046
// r := 0 ;
16038: LD_ADDR_VAR 0 15
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
// for j = r to 5 do
16046: LD_ADDR_VAR 0 10
16050: PUSH
16051: DOUBLE
16052: LD_VAR 0 15
16056: DEC
16057: ST_TO_ADDR
16058: LD_INT 5
16060: PUSH
16061: FOR_TO
16062: IFFALSE 16178
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16064: LD_ADDR_VAR 0 11
16068: PUSH
16069: LD_VAR 0 13
16073: PPUSH
16074: CALL_OW 250
16078: PPUSH
16079: LD_VAR 0 10
16083: PPUSH
16084: LD_INT 2
16086: PPUSH
16087: CALL_OW 272
16091: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16092: LD_ADDR_VAR 0 12
16096: PUSH
16097: LD_VAR 0 13
16101: PPUSH
16102: CALL_OW 251
16106: PPUSH
16107: LD_VAR 0 10
16111: PPUSH
16112: LD_INT 2
16114: PPUSH
16115: CALL_OW 273
16119: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16120: LD_VAR 0 11
16124: PPUSH
16125: LD_VAR 0 12
16129: PPUSH
16130: CALL_OW 488
16134: IFFALSE 16153
16136: PUSH
16137: LD_VAR 0 11
16141: PPUSH
16142: LD_VAR 0 12
16146: PPUSH
16147: CALL_OW 428
16151: NOT
16152: AND
16153: IFFALSE 16176
// begin ComMoveXY ( tmp , _x , _y ) ;
16155: LD_VAR 0 13
16159: PPUSH
16160: LD_VAR 0 11
16164: PPUSH
16165: LD_VAR 0 12
16169: PPUSH
16170: CALL_OW 111
// break ;
16174: GO 16178
// end ; end ;
16176: GO 16061
16178: POP
16179: POP
// end ; end ;
16180: GO 15493
16182: POP
16183: POP
// end ;
16184: LD_VAR 0 8
16188: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16189: LD_INT 0
16191: PPUSH
// result := true ;
16192: LD_ADDR_VAR 0 3
16196: PUSH
16197: LD_INT 1
16199: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16200: LD_VAR 0 2
16204: PUSH
16205: LD_INT 24
16207: DOUBLE
16208: EQUAL
16209: IFTRUE 16219
16211: LD_INT 33
16213: DOUBLE
16214: EQUAL
16215: IFTRUE 16219
16217: GO 16244
16219: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16220: LD_ADDR_VAR 0 3
16224: PUSH
16225: LD_INT 32
16227: PPUSH
16228: LD_VAR 0 1
16232: PPUSH
16233: CALL_OW 321
16237: PUSH
16238: LD_INT 2
16240: EQUAL
16241: ST_TO_ADDR
16242: GO 16560
16244: LD_INT 20
16246: DOUBLE
16247: EQUAL
16248: IFTRUE 16252
16250: GO 16277
16252: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_INT 6
16260: PPUSH
16261: LD_VAR 0 1
16265: PPUSH
16266: CALL_OW 321
16270: PUSH
16271: LD_INT 2
16273: EQUAL
16274: ST_TO_ADDR
16275: GO 16560
16277: LD_INT 22
16279: DOUBLE
16280: EQUAL
16281: IFTRUE 16291
16283: LD_INT 36
16285: DOUBLE
16286: EQUAL
16287: IFTRUE 16291
16289: GO 16316
16291: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16292: LD_ADDR_VAR 0 3
16296: PUSH
16297: LD_INT 15
16299: PPUSH
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 321
16309: PUSH
16310: LD_INT 2
16312: EQUAL
16313: ST_TO_ADDR
16314: GO 16560
16316: LD_INT 30
16318: DOUBLE
16319: EQUAL
16320: IFTRUE 16324
16322: GO 16349
16324: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16325: LD_ADDR_VAR 0 3
16329: PUSH
16330: LD_INT 20
16332: PPUSH
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 321
16342: PUSH
16343: LD_INT 2
16345: EQUAL
16346: ST_TO_ADDR
16347: GO 16560
16349: LD_INT 28
16351: DOUBLE
16352: EQUAL
16353: IFTRUE 16363
16355: LD_INT 21
16357: DOUBLE
16358: EQUAL
16359: IFTRUE 16363
16361: GO 16388
16363: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16364: LD_ADDR_VAR 0 3
16368: PUSH
16369: LD_INT 21
16371: PPUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 321
16381: PUSH
16382: LD_INT 2
16384: EQUAL
16385: ST_TO_ADDR
16386: GO 16560
16388: LD_INT 16
16390: DOUBLE
16391: EQUAL
16392: IFTRUE 16396
16394: GO 16421
16396: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16397: LD_ADDR_VAR 0 3
16401: PUSH
16402: LD_INT 84
16404: PPUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 321
16414: PUSH
16415: LD_INT 2
16417: EQUAL
16418: ST_TO_ADDR
16419: GO 16560
16421: LD_INT 19
16423: DOUBLE
16424: EQUAL
16425: IFTRUE 16435
16427: LD_INT 23
16429: DOUBLE
16430: EQUAL
16431: IFTRUE 16435
16433: GO 16460
16435: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_INT 83
16443: PPUSH
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 321
16453: PUSH
16454: LD_INT 2
16456: EQUAL
16457: ST_TO_ADDR
16458: GO 16560
16460: LD_INT 17
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16493
16468: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_INT 39
16476: PPUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 321
16486: PUSH
16487: LD_INT 2
16489: EQUAL
16490: ST_TO_ADDR
16491: GO 16560
16493: LD_INT 18
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16526
16501: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_INT 40
16509: PPUSH
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 321
16519: PUSH
16520: LD_INT 2
16522: EQUAL
16523: ST_TO_ADDR
16524: GO 16560
16526: LD_INT 27
16528: DOUBLE
16529: EQUAL
16530: IFTRUE 16534
16532: GO 16559
16534: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16535: LD_ADDR_VAR 0 3
16539: PUSH
16540: LD_INT 35
16542: PPUSH
16543: LD_VAR 0 1
16547: PPUSH
16548: CALL_OW 321
16552: PUSH
16553: LD_INT 2
16555: EQUAL
16556: ST_TO_ADDR
16557: GO 16560
16559: POP
// end ;
16560: LD_VAR 0 3
16564: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16565: LD_INT 0
16567: PPUSH
16568: PPUSH
16569: PPUSH
16570: PPUSH
16571: PPUSH
16572: PPUSH
16573: PPUSH
16574: PPUSH
16575: PPUSH
16576: PPUSH
16577: PPUSH
// result := false ;
16578: LD_ADDR_VAR 0 6
16582: PUSH
16583: LD_INT 0
16585: ST_TO_ADDR
// if btype = b_depot then
16586: LD_VAR 0 2
16590: PUSH
16591: LD_INT 0
16593: EQUAL
16594: IFFALSE 16606
// begin result := true ;
16596: LD_ADDR_VAR 0 6
16600: PUSH
16601: LD_INT 1
16603: ST_TO_ADDR
// exit ;
16604: GO 17460
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16606: LD_VAR 0 1
16610: NOT
16611: IFTRUE 16636
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: PUSH
16624: LD_INT 0
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: IN
16634: NOT
16635: OR
16636: IFTRUE 16645
16638: PUSH
16639: LD_VAR 0 2
16643: NOT
16644: OR
16645: IFTRUE 16681
16647: PUSH
16648: LD_VAR 0 5
16652: PUSH
16653: LD_INT 0
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: LD_INT 3
16664: PUSH
16665: LD_INT 4
16667: PUSH
16668: LD_INT 5
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: IN
16679: NOT
16680: OR
16681: IFTRUE 16700
16683: PUSH
16684: LD_VAR 0 3
16688: PPUSH
16689: LD_VAR 0 4
16693: PPUSH
16694: CALL_OW 488
16698: NOT
16699: OR
16700: IFFALSE 16704
// exit ;
16702: GO 17460
// side := GetSide ( depot ) ;
16704: LD_ADDR_VAR 0 9
16708: PUSH
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 255
16718: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16719: LD_VAR 0 9
16723: PPUSH
16724: LD_VAR 0 2
16728: PPUSH
16729: CALL 16189 0 2
16733: NOT
16734: IFFALSE 16738
// exit ;
16736: GO 17460
// pom := GetBase ( depot ) ;
16738: LD_ADDR_VAR 0 10
16742: PUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 274
16752: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16753: LD_ADDR_VAR 0 11
16757: PUSH
16758: LD_VAR 0 2
16762: PPUSH
16763: LD_VAR 0 1
16767: PPUSH
16768: CALL_OW 248
16772: PPUSH
16773: CALL_OW 450
16777: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16778: LD_VAR 0 10
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 275
16790: PUSH
16791: LD_VAR 0 11
16795: PUSH
16796: LD_INT 1
16798: ARRAY
16799: GREATEREQUAL
16800: IFFALSE 16826
16802: PUSH
16803: LD_VAR 0 10
16807: PPUSH
16808: LD_INT 2
16810: PPUSH
16811: CALL_OW 275
16815: PUSH
16816: LD_VAR 0 11
16820: PUSH
16821: LD_INT 2
16823: ARRAY
16824: GREATEREQUAL
16825: AND
16826: IFFALSE 16852
16828: PUSH
16829: LD_VAR 0 10
16833: PPUSH
16834: LD_INT 3
16836: PPUSH
16837: CALL_OW 275
16841: PUSH
16842: LD_VAR 0 11
16846: PUSH
16847: LD_INT 3
16849: ARRAY
16850: GREATEREQUAL
16851: AND
16852: NOT
16853: IFFALSE 16857
// exit ;
16855: GO 17460
// if GetBType ( depot ) = b_depot then
16857: LD_VAR 0 1
16861: PPUSH
16862: CALL_OW 266
16866: PUSH
16867: LD_INT 0
16869: EQUAL
16870: IFFALSE 16882
// dist := 28 else
16872: LD_ADDR_VAR 0 14
16876: PUSH
16877: LD_INT 28
16879: ST_TO_ADDR
16880: GO 16890
// dist := 36 ;
16882: LD_ADDR_VAR 0 14
16886: PUSH
16887: LD_INT 36
16889: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16890: LD_VAR 0 1
16894: PPUSH
16895: LD_VAR 0 3
16899: PPUSH
16900: LD_VAR 0 4
16904: PPUSH
16905: CALL_OW 297
16909: PUSH
16910: LD_VAR 0 14
16914: GREATER
16915: IFFALSE 16919
// exit ;
16917: GO 17460
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16919: LD_ADDR_VAR 0 12
16923: PUSH
16924: LD_VAR 0 2
16928: PPUSH
16929: LD_VAR 0 3
16933: PPUSH
16934: LD_VAR 0 4
16938: PPUSH
16939: LD_VAR 0 5
16943: PPUSH
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 248
16953: PPUSH
16954: LD_INT 0
16956: PPUSH
16957: CALL 17465 0 6
16961: ST_TO_ADDR
// if not hexes then
16962: LD_VAR 0 12
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17460
// hex := GetHexInfo ( x , y ) ;
16971: LD_ADDR_VAR 0 15
16975: PUSH
16976: LD_VAR 0 3
16980: PPUSH
16981: LD_VAR 0 4
16985: PPUSH
16986: CALL_OW 546
16990: ST_TO_ADDR
// if hex [ 1 ] then
16991: LD_VAR 0 15
16995: PUSH
16996: LD_INT 1
16998: ARRAY
16999: IFFALSE 17003
// exit ;
17001: GO 17460
// height := hex [ 2 ] ;
17003: LD_ADDR_VAR 0 13
17007: PUSH
17008: LD_VAR 0 15
17012: PUSH
17013: LD_INT 2
17015: ARRAY
17016: ST_TO_ADDR
// for i = 1 to hexes do
17017: LD_ADDR_VAR 0 7
17021: PUSH
17022: DOUBLE
17023: LD_INT 1
17025: DEC
17026: ST_TO_ADDR
17027: LD_VAR 0 12
17031: PUSH
17032: FOR_TO
17033: IFFALSE 17377
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17035: LD_VAR 0 12
17039: PUSH
17040: LD_VAR 0 7
17044: ARRAY
17045: PUSH
17046: LD_INT 1
17048: ARRAY
17049: PPUSH
17050: LD_VAR 0 12
17054: PUSH
17055: LD_VAR 0 7
17059: ARRAY
17060: PUSH
17061: LD_INT 2
17063: ARRAY
17064: PPUSH
17065: CALL_OW 488
17069: NOT
17070: IFTRUE 17112
17072: PUSH
17073: LD_VAR 0 12
17077: PUSH
17078: LD_VAR 0 7
17082: ARRAY
17083: PUSH
17084: LD_INT 1
17086: ARRAY
17087: PPUSH
17088: LD_VAR 0 12
17092: PUSH
17093: LD_VAR 0 7
17097: ARRAY
17098: PUSH
17099: LD_INT 2
17101: ARRAY
17102: PPUSH
17103: CALL_OW 428
17107: PUSH
17108: LD_INT 0
17110: GREATER
17111: OR
17112: IFTRUE 17150
17114: PUSH
17115: LD_VAR 0 12
17119: PUSH
17120: LD_VAR 0 7
17124: ARRAY
17125: PUSH
17126: LD_INT 1
17128: ARRAY
17129: PPUSH
17130: LD_VAR 0 12
17134: PUSH
17135: LD_VAR 0 7
17139: ARRAY
17140: PUSH
17141: LD_INT 2
17143: ARRAY
17144: PPUSH
17145: CALL_OW 351
17149: OR
17150: IFFALSE 17156
// exit ;
17152: POP
17153: POP
17154: GO 17460
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17156: LD_ADDR_VAR 0 8
17160: PUSH
17161: LD_VAR 0 12
17165: PUSH
17166: LD_VAR 0 7
17170: ARRAY
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PPUSH
17176: LD_VAR 0 12
17180: PUSH
17181: LD_VAR 0 7
17185: ARRAY
17186: PUSH
17187: LD_INT 2
17189: ARRAY
17190: PPUSH
17191: CALL_OW 546
17195: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17196: LD_VAR 0 8
17200: PUSH
17201: LD_INT 1
17203: ARRAY
17204: IFTRUE 17226
17206: PUSH
17207: LD_VAR 0 8
17211: PUSH
17212: LD_INT 2
17214: ARRAY
17215: PUSH
17216: LD_VAR 0 13
17220: PUSH
17221: LD_INT 2
17223: PLUS
17224: GREATER
17225: OR
17226: IFTRUE 17248
17228: PUSH
17229: LD_VAR 0 8
17233: PUSH
17234: LD_INT 2
17236: ARRAY
17237: PUSH
17238: LD_VAR 0 13
17242: PUSH
17243: LD_INT 2
17245: MINUS
17246: LESS
17247: OR
17248: IFTRUE 17316
17250: PUSH
17251: LD_VAR 0 8
17255: PUSH
17256: LD_INT 3
17258: ARRAY
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: LD_INT 8
17265: PUSH
17266: LD_INT 9
17268: PUSH
17269: LD_INT 10
17271: PUSH
17272: LD_INT 11
17274: PUSH
17275: LD_INT 12
17277: PUSH
17278: LD_INT 13
17280: PUSH
17281: LD_INT 16
17283: PUSH
17284: LD_INT 17
17286: PUSH
17287: LD_INT 18
17289: PUSH
17290: LD_INT 19
17292: PUSH
17293: LD_INT 20
17295: PUSH
17296: LD_INT 21
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: IN
17314: NOT
17315: OR
17316: IFTRUE 17329
17318: PUSH
17319: LD_VAR 0 8
17323: PUSH
17324: LD_INT 5
17326: ARRAY
17327: NOT
17328: OR
17329: IFTRUE 17369
17331: PUSH
17332: LD_VAR 0 8
17336: PUSH
17337: LD_INT 6
17339: ARRAY
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: LD_INT 2
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: LD_INT 9
17352: PUSH
17353: LD_INT 10
17355: PUSH
17356: LD_INT 11
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: IN
17367: NOT
17368: OR
17369: IFFALSE 17375
// exit ;
17371: POP
17372: POP
17373: GO 17460
// end ;
17375: GO 17032
17377: POP
17378: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17379: LD_VAR 0 9
17383: PPUSH
17384: LD_VAR 0 3
17388: PPUSH
17389: LD_VAR 0 4
17393: PPUSH
17394: LD_INT 20
17396: PPUSH
17397: CALL 9279 0 4
17401: PUSH
17402: LD_INT 4
17404: ARRAY
17405: IFFALSE 17409
// exit ;
17407: GO 17460
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 29
17416: PUSH
17417: LD_INT 30
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: IN
17424: IFFALSE 17448
17426: PUSH
17427: LD_VAR 0 3
17431: PPUSH
17432: LD_VAR 0 4
17436: PPUSH
17437: LD_VAR 0 9
17441: PPUSH
17442: CALL_OW 440
17446: NOT
17447: AND
17448: IFFALSE 17452
// exit ;
17450: GO 17460
// result := true ;
17452: LD_ADDR_VAR 0 6
17456: PUSH
17457: LD_INT 1
17459: ST_TO_ADDR
// end ;
17460: LD_VAR 0 6
17464: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17465: LD_INT 0
17467: PPUSH
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
// result = [ ] ;
17525: LD_ADDR_VAR 0 7
17529: PUSH
17530: EMPTY
17531: ST_TO_ADDR
// temp_list = [ ] ;
17532: LD_ADDR_VAR 0 9
17536: PUSH
17537: EMPTY
17538: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17539: LD_VAR 0 4
17543: PUSH
17544: LD_INT 0
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: LD_INT 3
17555: PUSH
17556: LD_INT 4
17558: PUSH
17559: LD_INT 5
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: IN
17570: NOT
17571: IFTRUE 17614
17573: PUSH
17574: LD_VAR 0 1
17578: PUSH
17579: LD_INT 0
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: IN
17589: IFFALSE 17613
17591: PUSH
17592: LD_VAR 0 5
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 3
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: IN
17611: NOT
17612: AND
17613: OR
17614: IFFALSE 17618
// exit ;
17616: GO 36017
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17618: LD_VAR 0 1
17622: PUSH
17623: LD_INT 6
17625: PUSH
17626: LD_INT 7
17628: PUSH
17629: LD_INT 8
17631: PUSH
17632: LD_INT 13
17634: PUSH
17635: LD_INT 12
17637: PUSH
17638: LD_INT 15
17640: PUSH
17641: LD_INT 11
17643: PUSH
17644: LD_INT 14
17646: PUSH
17647: LD_INT 10
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: IN
17661: IFFALSE 17671
// btype = b_lab ;
17663: LD_ADDR_VAR 0 1
17667: PUSH
17668: LD_INT 6
17670: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17671: LD_VAR 0 6
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: IN
17690: NOT
17691: IFTRUE 17759
17693: PUSH
17694: LD_VAR 0 1
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: LD_INT 6
17713: PUSH
17714: LD_INT 36
17716: PUSH
17717: LD_INT 4
17719: PUSH
17720: LD_INT 5
17722: PUSH
17723: LD_INT 31
17725: PUSH
17726: LD_INT 32
17728: PUSH
17729: LD_INT 33
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: IN
17745: NOT
17746: IFFALSE 17758
17748: PUSH
17749: LD_VAR 0 6
17753: PUSH
17754: LD_INT 1
17756: EQUAL
17757: AND
17758: OR
17759: IFTRUE 17791
17761: PUSH
17762: LD_VAR 0 1
17766: PUSH
17767: LD_INT 2
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: IN
17777: NOT
17778: IFFALSE 17790
17780: PUSH
17781: LD_VAR 0 6
17785: PUSH
17786: LD_INT 2
17788: EQUAL
17789: AND
17790: OR
17791: IFFALSE 17801
// mode = 0 ;
17793: LD_ADDR_VAR 0 6
17797: PUSH
17798: LD_INT 0
17800: ST_TO_ADDR
// case mode of 0 :
17801: LD_VAR 0 6
17805: PUSH
17806: LD_INT 0
17808: DOUBLE
17809: EQUAL
17810: IFTRUE 17814
17812: GO 29267
17814: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17815: LD_ADDR_VAR 0 11
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: LD_INT 0
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: LD_INT 1
17888: NEG
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: NEG
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: LD_INT 3
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: LD_INT 3
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18008: LD_ADDR_VAR 0 12
18012: PUSH
18013: LD_INT 0
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: NEG
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: LD_INT 1
18081: NEG
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 2
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 2
18142: NEG
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 3
18165: NEG
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 3
18176: NEG
18177: PUSH
18178: LD_INT 1
18180: NEG
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18204: LD_ADDR_VAR 0 13
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 1
18224: NEG
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: LD_INT 0
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: LD_INT 1
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: LD_INT 2
18289: NEG
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 2
18327: NEG
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 2
18339: NEG
18340: PUSH
18341: LD_INT 2
18343: NEG
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: NEG
18352: PUSH
18353: LD_INT 3
18355: NEG
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 3
18363: NEG
18364: PUSH
18365: LD_INT 2
18367: NEG
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 3
18375: NEG
18376: PUSH
18377: LD_INT 3
18379: NEG
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18403: LD_ADDR_VAR 0 14
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: LD_INT 1
18423: NEG
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: LD_INT 2
18488: NEG
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: LD_INT 2
18499: NEG
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: LD_INT 3
18553: NEG
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: LD_INT 3
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18599: LD_ADDR_VAR 0 15
18603: PUSH
18604: LD_INT 0
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 1
18657: NEG
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: PUSH
18681: LD_INT 1
18683: NEG
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 2
18722: NEG
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 2
18733: NEG
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 3
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18792: LD_ADDR_VAR 0 16
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 2
18915: NEG
18916: PUSH
18917: LD_INT 1
18919: NEG
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 2
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 3
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 3
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 3
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18985: LD_ADDR_VAR 0 17
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 2
19161: NEG
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: NEG
19173: PUSH
19174: LD_INT 1
19176: NEG
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 2
19184: NEG
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19215: LD_ADDR_VAR 0 18
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: NEG
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: NEG
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 2
19414: NEG
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19445: LD_ADDR_VAR 0 19
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: NEG
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19675: LD_ADDR_VAR 0 20
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: LD_INT 1
19695: NEG
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: NEG
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: LD_INT 2
19760: NEG
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: NEG
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19905: LD_ADDR_VAR 0 21
19909: PUSH
19910: LD_INT 0
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: LD_INT 0
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: LD_INT 2
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: LD_INT 1
20012: NEG
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 2
20104: NEG
20105: PUSH
20106: LD_INT 2
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20135: LD_ADDR_VAR 0 22
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 2
20322: NEG
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: NEG
20335: PUSH
20336: LD_INT 2
20338: NEG
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20365: LD_ADDR_VAR 0 23
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 2
20541: NEG
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: NEG
20565: PUSH
20566: LD_INT 2
20568: NEG
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 2
20576: NEG
20577: PUSH
20578: LD_INT 3
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 3
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 2
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20645: LD_ADDR_VAR 0 24
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 1
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: LD_INT 2
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 3
20888: PUSH
20889: LD_INT 2
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20921: LD_ADDR_VAR 0 25
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: NEG
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: NEG
21121: PUSH
21122: LD_INT 2
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 3
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21195: LD_ADDR_VAR 0 26
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: LD_INT 3
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: LD_INT 3
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: LD_INT 2
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 2
21437: NEG
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21471: LD_ADDR_VAR 0 27
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: NEG
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 2
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 2
21693: NEG
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 3
21704: NEG
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 3
21716: NEG
21717: PUSH
21718: LD_INT 2
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21751: LD_ADDR_VAR 0 28
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: LD_INT 0
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: LD_INT 2
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 2
21927: NEG
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: NEG
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 2
21950: NEG
21951: PUSH
21952: LD_INT 2
21954: NEG
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: LD_INT 3
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 3
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 3
21986: NEG
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 3
21998: NEG
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22033: LD_ADDR_VAR 0 29
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: LD_INT 2
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: LD_INT 2
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 2
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: NEG
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: LD_INT 2
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: LD_INT 3
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 3
22277: NEG
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22312: LD_ADDR_VAR 0 30
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: LD_INT 2
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 0
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: NEG
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 2
22489: NEG
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 3
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: LD_INT 2
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 3
22555: NEG
22556: PUSH
22557: LD_INT 1
22559: NEG
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22590: LD_ADDR_VAR 0 31
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: NEG
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 2
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 2
22767: NEG
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 2
22779: NEG
22780: PUSH
22781: LD_INT 3
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22868: LD_ADDR_VAR 0 32
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: NEG
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: LD_INT 1
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: LD_INT 2
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 2
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: NEG
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: LD_INT 3
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 2
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: NEG
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 3
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23146: LD_ADDR_VAR 0 33
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 1
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: LD_INT 0
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 1
23227: NEG
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: LD_INT 2
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: LD_INT 3
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 3
23390: NEG
23391: PUSH
23392: LD_INT 2
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23425: LD_ADDR_VAR 0 34
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 1
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 2
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 2
23581: NEG
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: NEG
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 2
23604: NEG
23605: PUSH
23606: LD_INT 2
23608: NEG
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: LD_INT 3
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 3
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23705: LD_ADDR_VAR 0 35
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 1
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: LD_INT 0
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23817: LD_ADDR_VAR 0 36
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: NEG
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: LD_INT 1
23890: NEG
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: LD_INT 2
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23929: LD_ADDR_VAR 0 37
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24041: LD_ADDR_VAR 0 38
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: NEG
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24153: LD_ADDR_VAR 0 39
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24265: LD_ADDR_VAR 0 40
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24377: LD_ADDR_VAR 0 41
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: LD_INT 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: LD_INT 3
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 2
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 3
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: LD_INT 3
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: LD_INT 3
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 3
24651: NEG
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 3
24662: NEG
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 3
24674: NEG
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 3
24686: NEG
24687: PUSH
24688: LD_INT 3
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24727: LD_ADDR_VAR 0 42
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: NEG
24918: PUSH
24919: LD_INT 3
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: LD_INT 3
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 3
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 2
24955: NEG
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: LD_INT 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: LD_INT 3
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 3
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 3
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 2
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 3
25024: NEG
25025: PUSH
25026: LD_INT 2
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 3
25036: NEG
25037: PUSH
25038: LD_INT 3
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25077: LD_ADDR_VAR 0 43
25081: PUSH
25082: LD_INT 0
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: NEG
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 3
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 3
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 3
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 3
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 3
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 2
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: NEG
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: NEG
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25425: LD_ADDR_VAR 0 44
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: NEG
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: LD_INT 2
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: LD_INT 3
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 3
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 3
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: LD_INT 3
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 3
25699: NEG
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 3
25710: NEG
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: NEG
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 3
25734: NEG
25735: PUSH
25736: LD_INT 3
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25775: LD_ADDR_VAR 0 45
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 2
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 2
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: LD_INT 3
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 3
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 3
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 3
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: NEG
26073: PUSH
26074: LD_INT 2
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 3
26084: NEG
26085: PUSH
26086: LD_INT 3
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26125: LD_ADDR_VAR 0 46
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 2
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: LD_INT 2
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 1
26232: NEG
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 3
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: LD_INT 3
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 3
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 3
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: LD_INT 3
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 3
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 3
26421: NEG
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 3
26432: NEG
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26473: LD_ADDR_VAR 0 47
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26624: LD_ADDR_VAR 0 48
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26771: LD_ADDR_VAR 0 49
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26915: LD_ADDR_VAR 0 50
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: LD_INT 2
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27059: LD_ADDR_VAR 0 51
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27206: LD_ADDR_VAR 0 52
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 2
27310: NEG
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27357: LD_ADDR_VAR 0 53
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 2
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 2
27544: NEG
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27587: LD_ADDR_VAR 0 54
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 2
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 2
27774: NEG
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: NEG
27787: PUSH
27788: LD_INT 2
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27817: LD_ADDR_VAR 0 55
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: LD_INT 2
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 2
27993: NEG
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: NEG
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28047: LD_ADDR_VAR 0 56
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: LD_INT 2
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: NEG
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28277: LD_ADDR_VAR 0 57
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 2
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: NEG
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: NEG
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28507: LD_ADDR_VAR 0 58
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: LD_INT 2
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: NEG
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28737: LD_ADDR_VAR 0 59
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28825: LD_ADDR_VAR 0 60
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28913: LD_ADDR_VAR 0 61
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29001: LD_ADDR_VAR 0 62
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29089: LD_ADDR_VAR 0 63
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29177: LD_ADDR_VAR 0 64
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: ST_TO_ADDR
// end ; 1 :
29265: GO 35162
29267: LD_INT 1
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 31898
29275: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29276: LD_ADDR_VAR 0 11
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 3
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 0
29295: PUSH
29296: LD_INT 3
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29320: LD_ADDR_VAR 0 12
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29361: LD_ADDR_VAR 0 13
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29401: LD_ADDR_VAR 0 14
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: LD_INT 3
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: NEG
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29442: LD_ADDR_VAR 0 15
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29486: LD_ADDR_VAR 0 16
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 3
29505: NEG
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 3
29517: NEG
29518: PUSH
29519: LD_INT 3
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29532: LD_ADDR_VAR 0 17
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 3
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 3
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29576: LD_ADDR_VAR 0 18
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29617: LD_ADDR_VAR 0 19
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 3
29634: PUSH
29635: LD_INT 3
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29657: LD_ADDR_VAR 0 20
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 0
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: LD_INT 2
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29698: LD_ADDR_VAR 0 21
29702: PUSH
29703: LD_INT 2
29705: NEG
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 3
29716: NEG
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 3
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29742: LD_ADDR_VAR 0 22
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 3
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 3
29761: NEG
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 3
29773: NEG
29774: PUSH
29775: LD_INT 3
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29788: LD_ADDR_VAR 0 23
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: LD_INT 3
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: LD_INT 4
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29832: LD_ADDR_VAR 0 24
29836: PUSH
29837: LD_INT 3
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29873: LD_ADDR_VAR 0 25
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 4
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 4
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29913: LD_ADDR_VAR 0 26
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 4
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29954: LD_ADDR_VAR 0 27
29958: PUSH
29959: LD_INT 3
29961: NEG
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 3
29972: NEG
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 4
29983: NEG
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29998: LD_ADDR_VAR 0 28
30002: PUSH
30003: LD_INT 3
30005: NEG
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 3
30017: NEG
30018: PUSH
30019: LD_INT 4
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 4
30029: NEG
30030: PUSH
30031: LD_INT 3
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30044: LD_ADDR_VAR 0 29
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: LD_INT 3
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 3
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 4
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 4
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 3
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 5
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: LD_INT 5
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: LD_INT 4
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: LD_INT 6
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 6
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 5
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30199: LD_ADDR_VAR 0 30
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 4
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 4
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 4
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 5
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 5
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 6
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 6
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30342: LD_ADDR_VAR 0 31
30346: PUSH
30347: LD_INT 3
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 4
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: LD_INT 4
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 5
30409: PUSH
30410: LD_INT 4
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 5
30419: PUSH
30420: LD_INT 5
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: PUSH
30430: LD_INT 5
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 6
30439: PUSH
30440: LD_INT 5
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 6
30449: PUSH
30450: LD_INT 6
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: LD_INT 6
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30481: LD_ADDR_VAR 0 32
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: LD_INT 3
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 4
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 4
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 5
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 5
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 6
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: LD_INT 6
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: LD_INT 5
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30624: LD_ADDR_VAR 0 33
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 3
30642: NEG
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 4
30676: NEG
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 4
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 4
30699: NEG
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 5
30710: NEG
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 5
30721: NEG
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 5
30733: NEG
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 6
30744: NEG
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 6
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30779: LD_ADDR_VAR 0 34
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: LD_INT 3
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: LD_INT 4
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 4
30834: NEG
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 4
30846: NEG
30847: PUSH
30848: LD_INT 4
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: LD_INT 5
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 5
30870: NEG
30871: PUSH
30872: LD_INT 4
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 5
30882: NEG
30883: PUSH
30884: LD_INT 5
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 5
30894: NEG
30895: PUSH
30896: LD_INT 6
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 6
30906: NEG
30907: PUSH
30908: LD_INT 5
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 6
30918: NEG
30919: PUSH
30920: LD_INT 6
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30942: LD_ADDR_VAR 0 41
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30986: LD_ADDR_VAR 0 42
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31027: LD_ADDR_VAR 0 43
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31067: LD_ADDR_VAR 0 44
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31108: LD_ADDR_VAR 0 45
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 3
31137: NEG
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31152: LD_ADDR_VAR 0 46
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: LD_INT 2
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31198: LD_ADDR_VAR 0 47
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: LD_INT 3
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31231: LD_ADDR_VAR 0 48
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31262: LD_ADDR_VAR 0 49
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31291: LD_ADDR_VAR 0 50
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 3
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31320: LD_ADDR_VAR 0 51
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31351: LD_ADDR_VAR 0 52
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31384: LD_ADDR_VAR 0 53
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 3
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 2
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31428: LD_ADDR_VAR 0 54
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: LD_INT 1
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: LIST
31468: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31469: LD_ADDR_VAR 0 55
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31509: LD_ADDR_VAR 0 56
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31550: LD_ADDR_VAR 0 57
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 3
31568: NEG
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 3
31579: NEG
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31594: LD_ADDR_VAR 0 58
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: LD_INT 3
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: LD_INT 2
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31640: LD_ADDR_VAR 0 59
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31684: LD_ADDR_VAR 0 60
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31725: LD_ADDR_VAR 0 61
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31765: LD_ADDR_VAR 0 62
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31806: LD_ADDR_VAR 0 63
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: NEG
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: NEG
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31850: LD_ADDR_VAR 0 64
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: LD_INT 2
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
// end ; 2 :
31896: GO 35162
31898: LD_INT 2
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 35161
31906: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31907: LD_ADDR_VAR 0 29
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 5
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 4
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 3
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 4
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 4
32037: PUSH
32038: LD_INT 4
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: LD_INT 4
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 4
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: LD_INT 4
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: LD_INT 5
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: LD_INT 5
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: LD_INT 4
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: PUSH
32160: LD_INT 3
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: LD_INT 5
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 3
32190: NEG
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: NEG
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 2
32213: NEG
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 4
32246: NEG
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 4
32257: NEG
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 4
32269: NEG
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: LD_INT 4
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 4
32304: NEG
32305: PUSH
32306: LD_INT 5
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: LD_INT 4
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 4
32340: NEG
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 5
32352: NEG
32353: PUSH
32354: LD_INT 4
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 5
32364: NEG
32365: PUSH
32366: LD_INT 5
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 3
32376: NEG
32377: PUSH
32378: LD_INT 5
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 5
32388: NEG
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32445: LD_ADDR_VAR 0 30
32449: PUSH
32450: LD_INT 4
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: LD_INT 3
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: LD_INT 4
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 5
32482: PUSH
32483: LD_INT 5
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: LD_INT 5
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: LD_INT 4
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 5
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 3
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: LD_INT 4
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 4
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 4
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 4
32635: NEG
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 4
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 3
32669: NEG
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 4
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 5
32691: NEG
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 5
32702: NEG
32703: PUSH
32704: LD_INT 1
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 5
32714: NEG
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 3
32726: NEG
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: NEG
32738: PUSH
32739: LD_INT 3
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: LD_INT 4
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: LD_INT 3
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 3
32785: NEG
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 4
32797: NEG
32798: PUSH
32799: LD_INT 3
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 4
32809: NEG
32810: PUSH
32811: LD_INT 4
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: LD_INT 4
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 4
32833: NEG
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: LD_INT 4
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 5
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 4
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 4
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: LD_INT 5
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 5
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32992: LD_ADDR_VAR 0 31
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 4
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 4
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 5
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 5
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 3
33092: NEG
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 3
33103: NEG
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 3
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 4
33148: NEG
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 4
33159: NEG
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 4
33171: NEG
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: LD_INT 4
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 4
33206: NEG
33207: PUSH
33208: LD_INT 5
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: NEG
33219: PUSH
33220: LD_INT 4
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 4
33242: NEG
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 5
33254: NEG
33255: PUSH
33256: LD_INT 4
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 5
33266: NEG
33267: PUSH
33268: LD_INT 5
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 3
33278: NEG
33279: PUSH
33280: LD_INT 5
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 5
33290: NEG
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 3
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 4
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: LD_INT 3
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 4
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: LD_INT 4
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 4
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 4
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 5
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 5
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 3
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 5
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33542: LD_ADDR_VAR 0 32
33546: PUSH
33547: LD_INT 4
33549: NEG
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 4
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 3
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 3
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: NEG
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 5
33605: NEG
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 5
33616: NEG
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 5
33628: NEG
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 3
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 3
33651: NEG
33652: PUSH
33653: LD_INT 3
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 3
33663: NEG
33664: PUSH
33665: LD_INT 4
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 3
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 3
33699: NEG
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 4
33711: NEG
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 4
33723: NEG
33724: PUSH
33725: LD_INT 4
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: LD_INT 4
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 4
33747: NEG
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 4
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 5
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 4
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: LD_INT 3
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 3
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 4
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 5
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: NEG
33850: PUSH
33851: LD_INT 5
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 4
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 4
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 4
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 4
33954: PUSH
33955: LD_INT 4
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 4
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 5
33974: PUSH
33975: LD_INT 4
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 5
33984: PUSH
33985: LD_INT 5
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: LD_INT 5
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 3
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 5
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: LD_INT 5
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34089: LD_ADDR_VAR 0 33
34093: PUSH
34094: LD_INT 4
34096: NEG
34097: PUSH
34098: LD_INT 4
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 4
34108: NEG
34109: PUSH
34110: LD_INT 5
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 3
34120: NEG
34121: PUSH
34122: LD_INT 4
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: LD_INT 3
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 4
34144: NEG
34145: PUSH
34146: LD_INT 3
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 5
34156: NEG
34157: PUSH
34158: LD_INT 4
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 5
34168: NEG
34169: PUSH
34170: LD_INT 5
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: LD_INT 5
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 5
34192: NEG
34193: PUSH
34194: LD_INT 3
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 3
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 4
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 1
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 3
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 4
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 2
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: LD_INT 4
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 4
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 4
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 5
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 4
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 3
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 5
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: LD_INT 3
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 4
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 4
34429: PUSH
34430: LD_INT 4
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: PUSH
34440: LD_INT 4
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 4
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: LD_INT 4
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 4
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 5
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: LD_INT 4
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34627: LD_ADDR_VAR 0 34
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 4
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 5
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 4
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 3
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 3
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 4
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 5
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: LD_INT 3
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 5
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 4
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 5
34849: PUSH
34850: LD_INT 4
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 5
34859: PUSH
34860: LD_INT 5
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 4
34869: PUSH
34870: LD_INT 5
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 4
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 3
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 5
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 4
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 4
35012: NEG
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 4
35023: NEG
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 3
35035: NEG
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: NEG
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 4
35057: NEG
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 5
35068: NEG
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 5
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 5
35091: NEG
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 3
35103: NEG
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
// end ; end ;
35159: GO 35162
35161: POP
// case btype of b_depot , b_warehouse :
35162: LD_VAR 0 1
35166: PUSH
35167: LD_INT 0
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35181
35173: LD_INT 1
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35382
35181: POP
// case nation of nation_american :
35182: LD_VAR 0 5
35186: PUSH
35187: LD_INT 1
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35195
35193: GO 35251
35195: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35196: LD_ADDR_VAR 0 9
35200: PUSH
35201: LD_VAR 0 11
35205: PUSH
35206: LD_VAR 0 12
35210: PUSH
35211: LD_VAR 0 13
35215: PUSH
35216: LD_VAR 0 14
35220: PUSH
35221: LD_VAR 0 15
35225: PUSH
35226: LD_VAR 0 16
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: PUSH
35239: LD_VAR 0 4
35243: PUSH
35244: LD_INT 1
35246: PLUS
35247: ARRAY
35248: ST_TO_ADDR
35249: GO 35380
35251: LD_INT 2
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35315
35259: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_VAR 0 17
35269: PUSH
35270: LD_VAR 0 18
35274: PUSH
35275: LD_VAR 0 19
35279: PUSH
35280: LD_VAR 0 20
35284: PUSH
35285: LD_VAR 0 21
35289: PUSH
35290: LD_VAR 0 22
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: PUSH
35303: LD_VAR 0 4
35307: PUSH
35308: LD_INT 1
35310: PLUS
35311: ARRAY
35312: ST_TO_ADDR
35313: GO 35380
35315: LD_INT 3
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35379
35323: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35324: LD_ADDR_VAR 0 9
35328: PUSH
35329: LD_VAR 0 23
35333: PUSH
35334: LD_VAR 0 24
35338: PUSH
35339: LD_VAR 0 25
35343: PUSH
35344: LD_VAR 0 26
35348: PUSH
35349: LD_VAR 0 27
35353: PUSH
35354: LD_VAR 0 28
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: PUSH
35367: LD_VAR 0 4
35371: PUSH
35372: LD_INT 1
35374: PLUS
35375: ARRAY
35376: ST_TO_ADDR
35377: GO 35380
35379: POP
35380: GO 35935
35382: LD_INT 2
35384: DOUBLE
35385: EQUAL
35386: IFTRUE 35396
35388: LD_INT 3
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 35452
35396: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35397: LD_ADDR_VAR 0 9
35401: PUSH
35402: LD_VAR 0 29
35406: PUSH
35407: LD_VAR 0 30
35411: PUSH
35412: LD_VAR 0 31
35416: PUSH
35417: LD_VAR 0 32
35421: PUSH
35422: LD_VAR 0 33
35426: PUSH
35427: LD_VAR 0 34
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: PUSH
35440: LD_VAR 0 4
35444: PUSH
35445: LD_INT 1
35447: PLUS
35448: ARRAY
35449: ST_TO_ADDR
35450: GO 35935
35452: LD_INT 16
35454: DOUBLE
35455: EQUAL
35456: IFTRUE 35514
35458: LD_INT 17
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35514
35464: LD_INT 18
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35514
35470: LD_INT 19
35472: DOUBLE
35473: EQUAL
35474: IFTRUE 35514
35476: LD_INT 22
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35514
35482: LD_INT 20
35484: DOUBLE
35485: EQUAL
35486: IFTRUE 35514
35488: LD_INT 21
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35514
35494: LD_INT 23
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35514
35500: LD_INT 24
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35514
35506: LD_INT 25
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35570
35514: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35515: LD_ADDR_VAR 0 9
35519: PUSH
35520: LD_VAR 0 35
35524: PUSH
35525: LD_VAR 0 36
35529: PUSH
35530: LD_VAR 0 37
35534: PUSH
35535: LD_VAR 0 38
35539: PUSH
35540: LD_VAR 0 39
35544: PUSH
35545: LD_VAR 0 40
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: PUSH
35558: LD_VAR 0 4
35562: PUSH
35563: LD_INT 1
35565: PLUS
35566: ARRAY
35567: ST_TO_ADDR
35568: GO 35935
35570: LD_INT 6
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35626
35576: LD_INT 7
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35626
35582: LD_INT 8
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35626
35588: LD_INT 13
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35626
35594: LD_INT 12
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35626
35600: LD_INT 15
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35626
35606: LD_INT 11
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35626
35612: LD_INT 14
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35626
35618: LD_INT 10
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35626
35624: GO 35682
35626: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35627: LD_ADDR_VAR 0 9
35631: PUSH
35632: LD_VAR 0 41
35636: PUSH
35637: LD_VAR 0 42
35641: PUSH
35642: LD_VAR 0 43
35646: PUSH
35647: LD_VAR 0 44
35651: PUSH
35652: LD_VAR 0 45
35656: PUSH
35657: LD_VAR 0 46
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: PUSH
35670: LD_VAR 0 4
35674: PUSH
35675: LD_INT 1
35677: PLUS
35678: ARRAY
35679: ST_TO_ADDR
35680: GO 35935
35682: LD_INT 36
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35746
35690: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35691: LD_ADDR_VAR 0 9
35695: PUSH
35696: LD_VAR 0 47
35700: PUSH
35701: LD_VAR 0 48
35705: PUSH
35706: LD_VAR 0 49
35710: PUSH
35711: LD_VAR 0 50
35715: PUSH
35716: LD_VAR 0 51
35720: PUSH
35721: LD_VAR 0 52
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: PUSH
35734: LD_VAR 0 4
35738: PUSH
35739: LD_INT 1
35741: PLUS
35742: ARRAY
35743: ST_TO_ADDR
35744: GO 35935
35746: LD_INT 4
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35772
35752: LD_INT 5
35754: DOUBLE
35755: EQUAL
35756: IFTRUE 35772
35758: LD_INT 34
35760: DOUBLE
35761: EQUAL
35762: IFTRUE 35772
35764: LD_INT 37
35766: DOUBLE
35767: EQUAL
35768: IFTRUE 35772
35770: GO 35828
35772: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35773: LD_ADDR_VAR 0 9
35777: PUSH
35778: LD_VAR 0 53
35782: PUSH
35783: LD_VAR 0 54
35787: PUSH
35788: LD_VAR 0 55
35792: PUSH
35793: LD_VAR 0 56
35797: PUSH
35798: LD_VAR 0 57
35802: PUSH
35803: LD_VAR 0 58
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: PUSH
35816: LD_VAR 0 4
35820: PUSH
35821: LD_INT 1
35823: PLUS
35824: ARRAY
35825: ST_TO_ADDR
35826: GO 35935
35828: LD_INT 31
35830: DOUBLE
35831: EQUAL
35832: IFTRUE 35878
35834: LD_INT 32
35836: DOUBLE
35837: EQUAL
35838: IFTRUE 35878
35840: LD_INT 33
35842: DOUBLE
35843: EQUAL
35844: IFTRUE 35878
35846: LD_INT 27
35848: DOUBLE
35849: EQUAL
35850: IFTRUE 35878
35852: LD_INT 26
35854: DOUBLE
35855: EQUAL
35856: IFTRUE 35878
35858: LD_INT 28
35860: DOUBLE
35861: EQUAL
35862: IFTRUE 35878
35864: LD_INT 29
35866: DOUBLE
35867: EQUAL
35868: IFTRUE 35878
35870: LD_INT 30
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35878
35876: GO 35934
35878: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35879: LD_ADDR_VAR 0 9
35883: PUSH
35884: LD_VAR 0 59
35888: PUSH
35889: LD_VAR 0 60
35893: PUSH
35894: LD_VAR 0 61
35898: PUSH
35899: LD_VAR 0 62
35903: PUSH
35904: LD_VAR 0 63
35908: PUSH
35909: LD_VAR 0 64
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: LD_VAR 0 4
35926: PUSH
35927: LD_INT 1
35929: PLUS
35930: ARRAY
35931: ST_TO_ADDR
35932: GO 35935
35934: POP
// temp_list2 = [ ] ;
35935: LD_ADDR_VAR 0 10
35939: PUSH
35940: EMPTY
35941: ST_TO_ADDR
// for i in temp_list do
35942: LD_ADDR_VAR 0 8
35946: PUSH
35947: LD_VAR 0 9
35951: PUSH
35952: FOR_IN
35953: IFFALSE 36005
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35955: LD_ADDR_VAR 0 10
35959: PUSH
35960: LD_VAR 0 10
35964: PUSH
35965: LD_VAR 0 8
35969: PUSH
35970: LD_INT 1
35972: ARRAY
35973: PUSH
35974: LD_VAR 0 2
35978: PLUS
35979: PUSH
35980: LD_VAR 0 8
35984: PUSH
35985: LD_INT 2
35987: ARRAY
35988: PUSH
35989: LD_VAR 0 3
35993: PLUS
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: ADD
36002: ST_TO_ADDR
36003: GO 35952
36005: POP
36006: POP
// result = temp_list2 ;
36007: LD_ADDR_VAR 0 7
36011: PUSH
36012: LD_VAR 0 10
36016: ST_TO_ADDR
// end ;
36017: LD_VAR 0 7
36021: RET
// export function EnemyInRange ( unit , dist ) ; begin
36022: LD_INT 0
36024: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL_OW 255
36039: PPUSH
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 250
36049: PPUSH
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 251
36059: PPUSH
36060: LD_VAR 0 2
36064: PPUSH
36065: CALL 9279 0 4
36069: PUSH
36070: LD_INT 4
36072: ARRAY
36073: ST_TO_ADDR
// end ;
36074: LD_VAR 0 3
36078: RET
// export function PlayerSeeMe ( unit ) ; begin
36079: LD_INT 0
36081: PPUSH
// result := See ( your_side , unit ) ;
36082: LD_ADDR_VAR 0 2
36086: PUSH
36087: LD_OWVAR 2
36091: PPUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 292
36101: ST_TO_ADDR
// end ;
36102: LD_VAR 0 2
36106: RET
// export function ReverseDir ( unit ) ; begin
36107: LD_INT 0
36109: PPUSH
// if not unit then
36110: LD_VAR 0 1
36114: NOT
36115: IFFALSE 36119
// exit ;
36117: GO 36142
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36119: LD_ADDR_VAR 0 2
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 254
36133: PUSH
36134: LD_INT 3
36136: PLUS
36137: PUSH
36138: LD_INT 6
36140: MOD
36141: ST_TO_ADDR
// end ;
36142: LD_VAR 0 2
36146: RET
// export function ReverseArray ( array ) ; var i ; begin
36147: LD_INT 0
36149: PPUSH
36150: PPUSH
// if not array then
36151: LD_VAR 0 1
36155: NOT
36156: IFFALSE 36160
// exit ;
36158: GO 36215
// result := [ ] ;
36160: LD_ADDR_VAR 0 2
36164: PUSH
36165: EMPTY
36166: ST_TO_ADDR
// for i := array downto 1 do
36167: LD_ADDR_VAR 0 3
36171: PUSH
36172: DOUBLE
36173: LD_VAR 0 1
36177: INC
36178: ST_TO_ADDR
36179: LD_INT 1
36181: PUSH
36182: FOR_DOWNTO
36183: IFFALSE 36213
// result := Join ( result , array [ i ] ) ;
36185: LD_ADDR_VAR 0 2
36189: PUSH
36190: LD_VAR 0 2
36194: PPUSH
36195: LD_VAR 0 1
36199: PUSH
36200: LD_VAR 0 3
36204: ARRAY
36205: PPUSH
36206: CALL 41057 0 2
36210: ST_TO_ADDR
36211: GO 36182
36213: POP
36214: POP
// end ;
36215: LD_VAR 0 2
36219: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36220: LD_INT 0
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
// if not unit or not hexes then
36228: LD_VAR 0 1
36232: NOT
36233: IFTRUE 36242
36235: PUSH
36236: LD_VAR 0 2
36240: NOT
36241: OR
36242: IFFALSE 36246
// exit ;
36244: GO 36369
// dist := 9999 ;
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: LD_INT 9999
36253: ST_TO_ADDR
// for i = 1 to hexes do
36254: LD_ADDR_VAR 0 4
36258: PUSH
36259: DOUBLE
36260: LD_INT 1
36262: DEC
36263: ST_TO_ADDR
36264: LD_VAR 0 2
36268: PUSH
36269: FOR_TO
36270: IFFALSE 36357
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36272: LD_ADDR_VAR 0 6
36276: PUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: LD_VAR 0 2
36286: PUSH
36287: LD_VAR 0 4
36291: ARRAY
36292: PUSH
36293: LD_INT 1
36295: ARRAY
36296: PPUSH
36297: LD_VAR 0 2
36301: PUSH
36302: LD_VAR 0 4
36306: ARRAY
36307: PUSH
36308: LD_INT 2
36310: ARRAY
36311: PPUSH
36312: CALL_OW 297
36316: ST_TO_ADDR
// if tdist < dist then
36317: LD_VAR 0 6
36321: PUSH
36322: LD_VAR 0 5
36326: LESS
36327: IFFALSE 36355
// begin hex := hexes [ i ] ;
36329: LD_ADDR_VAR 0 8
36333: PUSH
36334: LD_VAR 0 2
36338: PUSH
36339: LD_VAR 0 4
36343: ARRAY
36344: ST_TO_ADDR
// dist := tdist ;
36345: LD_ADDR_VAR 0 5
36349: PUSH
36350: LD_VAR 0 6
36354: ST_TO_ADDR
// end ; end ;
36355: GO 36269
36357: POP
36358: POP
// result := hex ;
36359: LD_ADDR_VAR 0 3
36363: PUSH
36364: LD_VAR 0 8
36368: ST_TO_ADDR
// end ;
36369: LD_VAR 0 3
36373: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36374: LD_INT 0
36376: PPUSH
36377: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36378: LD_VAR 0 1
36382: NOT
36383: IFTRUE 36422
36385: PUSH
36386: LD_VAR 0 1
36390: PUSH
36391: LD_INT 21
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 23
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PPUSH
36415: CALL_OW 69
36419: IN
36420: NOT
36421: OR
36422: IFFALSE 36426
// exit ;
36424: GO 36473
// for i = 1 to 3 do
36426: LD_ADDR_VAR 0 3
36430: PUSH
36431: DOUBLE
36432: LD_INT 1
36434: DEC
36435: ST_TO_ADDR
36436: LD_INT 3
36438: PUSH
36439: FOR_TO
36440: IFFALSE 36471
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36442: LD_VAR 0 1
36446: PPUSH
36447: CALL_OW 250
36451: PPUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 251
36461: PPUSH
36462: LD_INT 1
36464: PPUSH
36465: CALL_OW 453
36469: GO 36439
36471: POP
36472: POP
// end ;
36473: LD_VAR 0 2
36477: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36478: LD_INT 0
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
// if not unit or not enemy_unit then
36486: LD_VAR 0 1
36490: NOT
36491: IFTRUE 36500
36493: PUSH
36494: LD_VAR 0 2
36498: NOT
36499: OR
36500: IFFALSE 36504
// exit ;
36502: GO 36975
// if GetLives ( i ) < 250 then
36504: LD_VAR 0 4
36508: PPUSH
36509: CALL_OW 256
36513: PUSH
36514: LD_INT 250
36516: LESS
36517: IFFALSE 36530
// begin ComAutodestruct ( i ) ;
36519: LD_VAR 0 4
36523: PPUSH
36524: CALL 36374 0 1
// exit ;
36528: GO 36975
// end ; x := GetX ( enemy_unit ) ;
36530: LD_ADDR_VAR 0 7
36534: PUSH
36535: LD_VAR 0 2
36539: PPUSH
36540: CALL_OW 250
36544: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36545: LD_ADDR_VAR 0 8
36549: PUSH
36550: LD_VAR 0 2
36554: PPUSH
36555: CALL_OW 251
36559: ST_TO_ADDR
// if not x or not y then
36560: LD_VAR 0 7
36564: NOT
36565: IFTRUE 36574
36567: PUSH
36568: LD_VAR 0 8
36572: NOT
36573: OR
36574: IFFALSE 36578
// exit ;
36576: GO 36975
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36578: LD_ADDR_VAR 0 6
36582: PUSH
36583: LD_VAR 0 7
36587: PPUSH
36588: LD_INT 0
36590: PPUSH
36591: LD_INT 4
36593: PPUSH
36594: CALL_OW 272
36598: PUSH
36599: LD_VAR 0 8
36603: PPUSH
36604: LD_INT 0
36606: PPUSH
36607: LD_INT 4
36609: PPUSH
36610: CALL_OW 273
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_VAR 0 7
36623: PPUSH
36624: LD_INT 1
36626: PPUSH
36627: LD_INT 4
36629: PPUSH
36630: CALL_OW 272
36634: PUSH
36635: LD_VAR 0 8
36639: PPUSH
36640: LD_INT 1
36642: PPUSH
36643: LD_INT 4
36645: PPUSH
36646: CALL_OW 273
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_VAR 0 7
36659: PPUSH
36660: LD_INT 2
36662: PPUSH
36663: LD_INT 4
36665: PPUSH
36666: CALL_OW 272
36670: PUSH
36671: LD_VAR 0 8
36675: PPUSH
36676: LD_INT 2
36678: PPUSH
36679: LD_INT 4
36681: PPUSH
36682: CALL_OW 273
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_VAR 0 7
36695: PPUSH
36696: LD_INT 3
36698: PPUSH
36699: LD_INT 4
36701: PPUSH
36702: CALL_OW 272
36706: PUSH
36707: LD_VAR 0 8
36711: PPUSH
36712: LD_INT 3
36714: PPUSH
36715: LD_INT 4
36717: PPUSH
36718: CALL_OW 273
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_VAR 0 7
36731: PPUSH
36732: LD_INT 4
36734: PPUSH
36735: LD_INT 4
36737: PPUSH
36738: CALL_OW 272
36742: PUSH
36743: LD_VAR 0 8
36747: PPUSH
36748: LD_INT 4
36750: PPUSH
36751: LD_INT 4
36753: PPUSH
36754: CALL_OW 273
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_VAR 0 7
36767: PPUSH
36768: LD_INT 5
36770: PPUSH
36771: LD_INT 4
36773: PPUSH
36774: CALL_OW 272
36778: PUSH
36779: LD_VAR 0 8
36783: PPUSH
36784: LD_INT 5
36786: PPUSH
36787: LD_INT 4
36789: PPUSH
36790: CALL_OW 273
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: ST_TO_ADDR
// for i = tmp downto 1 do
36807: LD_ADDR_VAR 0 4
36811: PUSH
36812: DOUBLE
36813: LD_VAR 0 6
36817: INC
36818: ST_TO_ADDR
36819: LD_INT 1
36821: PUSH
36822: FOR_DOWNTO
36823: IFFALSE 36926
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36825: LD_VAR 0 6
36829: PUSH
36830: LD_VAR 0 4
36834: ARRAY
36835: PUSH
36836: LD_INT 1
36838: ARRAY
36839: PPUSH
36840: LD_VAR 0 6
36844: PUSH
36845: LD_VAR 0 4
36849: ARRAY
36850: PUSH
36851: LD_INT 2
36853: ARRAY
36854: PPUSH
36855: CALL_OW 488
36859: NOT
36860: IFTRUE 36902
36862: PUSH
36863: LD_VAR 0 6
36867: PUSH
36868: LD_VAR 0 4
36872: ARRAY
36873: PUSH
36874: LD_INT 1
36876: ARRAY
36877: PPUSH
36878: LD_VAR 0 6
36882: PUSH
36883: LD_VAR 0 4
36887: ARRAY
36888: PUSH
36889: LD_INT 2
36891: ARRAY
36892: PPUSH
36893: CALL_OW 428
36897: PUSH
36898: LD_INT 0
36900: NONEQUAL
36901: OR
36902: IFFALSE 36924
// tmp := Delete ( tmp , i ) ;
36904: LD_ADDR_VAR 0 6
36908: PUSH
36909: LD_VAR 0 6
36913: PPUSH
36914: LD_VAR 0 4
36918: PPUSH
36919: CALL_OW 3
36923: ST_TO_ADDR
36924: GO 36822
36926: POP
36927: POP
// j := GetClosestHex ( unit , tmp ) ;
36928: LD_ADDR_VAR 0 5
36932: PUSH
36933: LD_VAR 0 1
36937: PPUSH
36938: LD_VAR 0 6
36942: PPUSH
36943: CALL 36220 0 2
36947: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36948: LD_VAR 0 1
36952: PPUSH
36953: LD_VAR 0 5
36957: PUSH
36958: LD_INT 1
36960: ARRAY
36961: PPUSH
36962: LD_VAR 0 5
36966: PUSH
36967: LD_INT 2
36969: ARRAY
36970: PPUSH
36971: CALL_OW 111
// end ;
36975: LD_VAR 0 3
36979: RET
// export function PrepareApemanSoldier ( ) ; begin
36980: LD_INT 0
36982: PPUSH
// uc_nation := 0 ;
36983: LD_ADDR_OWVAR 21
36987: PUSH
36988: LD_INT 0
36990: ST_TO_ADDR
// hc_sex := sex_male ;
36991: LD_ADDR_OWVAR 27
36995: PUSH
36996: LD_INT 1
36998: ST_TO_ADDR
// hc_name :=  ;
36999: LD_ADDR_OWVAR 26
37003: PUSH
37004: LD_STRING 
37006: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37007: LD_ADDR_OWVAR 28
37011: PUSH
37012: LD_INT 15
37014: ST_TO_ADDR
// hc_gallery :=  ;
37015: LD_ADDR_OWVAR 33
37019: PUSH
37020: LD_STRING 
37022: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37023: LD_ADDR_OWVAR 31
37027: PUSH
37028: LD_INT 0
37030: PPUSH
37031: LD_INT 3
37033: PPUSH
37034: CALL_OW 12
37038: PUSH
37039: LD_INT 0
37041: PPUSH
37042: LD_INT 3
37044: PPUSH
37045: CALL_OW 12
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37062: LD_ADDR_OWVAR 29
37066: PUSH
37067: LD_INT 12
37069: PUSH
37070: LD_INT 12
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: ST_TO_ADDR
// end ;
37077: LD_VAR 0 1
37081: RET
// export function PrepareApemanEngineer ( ) ; begin
37082: LD_INT 0
37084: PPUSH
// uc_nation := 0 ;
37085: LD_ADDR_OWVAR 21
37089: PUSH
37090: LD_INT 0
37092: ST_TO_ADDR
// hc_sex := sex_male ;
37093: LD_ADDR_OWVAR 27
37097: PUSH
37098: LD_INT 1
37100: ST_TO_ADDR
// hc_name :=  ;
37101: LD_ADDR_OWVAR 26
37105: PUSH
37106: LD_STRING 
37108: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37109: LD_ADDR_OWVAR 28
37113: PUSH
37114: LD_INT 16
37116: ST_TO_ADDR
// hc_gallery :=  ;
37117: LD_ADDR_OWVAR 33
37121: PUSH
37122: LD_STRING 
37124: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37125: LD_ADDR_OWVAR 31
37129: PUSH
37130: LD_INT 0
37132: PPUSH
37133: LD_INT 3
37135: PPUSH
37136: CALL_OW 12
37140: PUSH
37141: LD_INT 0
37143: PPUSH
37144: LD_INT 3
37146: PPUSH
37147: CALL_OW 12
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37164: LD_ADDR_OWVAR 29
37168: PUSH
37169: LD_INT 12
37171: PUSH
37172: LD_INT 12
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// end ;
37179: LD_VAR 0 1
37183: RET
// export function PrepareApeman ( agressivity ) ; begin
37184: LD_INT 0
37186: PPUSH
// uc_side := 0 ;
37187: LD_ADDR_OWVAR 20
37191: PUSH
37192: LD_INT 0
37194: ST_TO_ADDR
// uc_nation := 0 ;
37195: LD_ADDR_OWVAR 21
37199: PUSH
37200: LD_INT 0
37202: ST_TO_ADDR
// hc_sex := sex_male ;
37203: LD_ADDR_OWVAR 27
37207: PUSH
37208: LD_INT 1
37210: ST_TO_ADDR
// hc_class := class_apeman ;
37211: LD_ADDR_OWVAR 28
37215: PUSH
37216: LD_INT 12
37218: ST_TO_ADDR
// hc_gallery :=  ;
37219: LD_ADDR_OWVAR 33
37223: PUSH
37224: LD_STRING 
37226: ST_TO_ADDR
// hc_name :=  ;
37227: LD_ADDR_OWVAR 26
37231: PUSH
37232: LD_STRING 
37234: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37235: LD_ADDR_OWVAR 29
37239: PUSH
37240: LD_INT 12
37242: PUSH
37243: LD_INT 12
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: ST_TO_ADDR
// if agressivity = 0 then
37250: LD_VAR 0 1
37254: PUSH
37255: LD_INT 0
37257: EQUAL
37258: IFFALSE 37270
// hc_agressivity := 0 else
37260: LD_ADDR_OWVAR 35
37264: PUSH
37265: LD_INT 0
37267: ST_TO_ADDR
37268: GO 37291
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37270: LD_ADDR_OWVAR 35
37274: PUSH
37275: LD_VAR 0 1
37279: NEG
37280: PPUSH
37281: LD_VAR 0 1
37285: PPUSH
37286: CALL_OW 12
37290: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37291: LD_ADDR_OWVAR 31
37295: PUSH
37296: LD_INT 0
37298: PPUSH
37299: LD_INT 3
37301: PPUSH
37302: CALL_OW 12
37306: PUSH
37307: LD_INT 0
37309: PPUSH
37310: LD_INT 3
37312: PPUSH
37313: CALL_OW 12
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// end ;
37330: LD_VAR 0 2
37334: RET
// export function PrepareTiger ( agressivity ) ; begin
37335: LD_INT 0
37337: PPUSH
// uc_side := 0 ;
37338: LD_ADDR_OWVAR 20
37342: PUSH
37343: LD_INT 0
37345: ST_TO_ADDR
// uc_nation := 0 ;
37346: LD_ADDR_OWVAR 21
37350: PUSH
37351: LD_INT 0
37353: ST_TO_ADDR
// InitHc ;
37354: CALL_OW 19
// hc_class := class_tiger ;
37358: LD_ADDR_OWVAR 28
37362: PUSH
37363: LD_INT 14
37365: ST_TO_ADDR
// hc_gallery :=  ;
37366: LD_ADDR_OWVAR 33
37370: PUSH
37371: LD_STRING 
37373: ST_TO_ADDR
// hc_name :=  ;
37374: LD_ADDR_OWVAR 26
37378: PUSH
37379: LD_STRING 
37381: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37382: LD_ADDR_OWVAR 35
37386: PUSH
37387: LD_VAR 0 1
37391: NEG
37392: PPUSH
37393: LD_VAR 0 1
37397: PPUSH
37398: CALL_OW 12
37402: ST_TO_ADDR
// end ;
37403: LD_VAR 0 2
37407: RET
// export function PrepareEnchidna ( ) ; begin
37408: LD_INT 0
37410: PPUSH
// uc_side := 0 ;
37411: LD_ADDR_OWVAR 20
37415: PUSH
37416: LD_INT 0
37418: ST_TO_ADDR
// uc_nation := 0 ;
37419: LD_ADDR_OWVAR 21
37423: PUSH
37424: LD_INT 0
37426: ST_TO_ADDR
// InitHc ;
37427: CALL_OW 19
// hc_class := class_baggie ;
37431: LD_ADDR_OWVAR 28
37435: PUSH
37436: LD_INT 13
37438: ST_TO_ADDR
// hc_gallery :=  ;
37439: LD_ADDR_OWVAR 33
37443: PUSH
37444: LD_STRING 
37446: ST_TO_ADDR
// hc_name :=  ;
37447: LD_ADDR_OWVAR 26
37451: PUSH
37452: LD_STRING 
37454: ST_TO_ADDR
// end ;
37455: LD_VAR 0 1
37459: RET
// export function PrepareFrog ( ) ; begin
37460: LD_INT 0
37462: PPUSH
// uc_side := 0 ;
37463: LD_ADDR_OWVAR 20
37467: PUSH
37468: LD_INT 0
37470: ST_TO_ADDR
// uc_nation := 0 ;
37471: LD_ADDR_OWVAR 21
37475: PUSH
37476: LD_INT 0
37478: ST_TO_ADDR
// InitHc ;
37479: CALL_OW 19
// hc_class := class_frog ;
37483: LD_ADDR_OWVAR 28
37487: PUSH
37488: LD_INT 19
37490: ST_TO_ADDR
// hc_gallery :=  ;
37491: LD_ADDR_OWVAR 33
37495: PUSH
37496: LD_STRING 
37498: ST_TO_ADDR
// hc_name :=  ;
37499: LD_ADDR_OWVAR 26
37503: PUSH
37504: LD_STRING 
37506: ST_TO_ADDR
// end ;
37507: LD_VAR 0 1
37511: RET
// export function PrepareFish ( ) ; begin
37512: LD_INT 0
37514: PPUSH
// uc_side := 0 ;
37515: LD_ADDR_OWVAR 20
37519: PUSH
37520: LD_INT 0
37522: ST_TO_ADDR
// uc_nation := 0 ;
37523: LD_ADDR_OWVAR 21
37527: PUSH
37528: LD_INT 0
37530: ST_TO_ADDR
// InitHc ;
37531: CALL_OW 19
// hc_class := class_fish ;
37535: LD_ADDR_OWVAR 28
37539: PUSH
37540: LD_INT 20
37542: ST_TO_ADDR
// hc_gallery :=  ;
37543: LD_ADDR_OWVAR 33
37547: PUSH
37548: LD_STRING 
37550: ST_TO_ADDR
// hc_name :=  ;
37551: LD_ADDR_OWVAR 26
37555: PUSH
37556: LD_STRING 
37558: ST_TO_ADDR
// end ;
37559: LD_VAR 0 1
37563: RET
// export function PrepareBird ( ) ; begin
37564: LD_INT 0
37566: PPUSH
// uc_side := 0 ;
37567: LD_ADDR_OWVAR 20
37571: PUSH
37572: LD_INT 0
37574: ST_TO_ADDR
// uc_nation := 0 ;
37575: LD_ADDR_OWVAR 21
37579: PUSH
37580: LD_INT 0
37582: ST_TO_ADDR
// InitHc ;
37583: CALL_OW 19
// hc_class := class_phororhacos ;
37587: LD_ADDR_OWVAR 28
37591: PUSH
37592: LD_INT 18
37594: ST_TO_ADDR
// hc_gallery :=  ;
37595: LD_ADDR_OWVAR 33
37599: PUSH
37600: LD_STRING 
37602: ST_TO_ADDR
// hc_name :=  ;
37603: LD_ADDR_OWVAR 26
37607: PUSH
37608: LD_STRING 
37610: ST_TO_ADDR
// end ;
37611: LD_VAR 0 1
37615: RET
// export function PrepareHorse ( ) ; begin
37616: LD_INT 0
37618: PPUSH
// uc_side := 0 ;
37619: LD_ADDR_OWVAR 20
37623: PUSH
37624: LD_INT 0
37626: ST_TO_ADDR
// uc_nation := 0 ;
37627: LD_ADDR_OWVAR 21
37631: PUSH
37632: LD_INT 0
37634: ST_TO_ADDR
// InitHc ;
37635: CALL_OW 19
// hc_class := class_horse ;
37639: LD_ADDR_OWVAR 28
37643: PUSH
37644: LD_INT 21
37646: ST_TO_ADDR
// hc_gallery :=  ;
37647: LD_ADDR_OWVAR 33
37651: PUSH
37652: LD_STRING 
37654: ST_TO_ADDR
// hc_name :=  ;
37655: LD_ADDR_OWVAR 26
37659: PUSH
37660: LD_STRING 
37662: ST_TO_ADDR
// end ;
37663: LD_VAR 0 1
37667: RET
// export function PrepareMastodont ( ) ; begin
37668: LD_INT 0
37670: PPUSH
// uc_side := 0 ;
37671: LD_ADDR_OWVAR 20
37675: PUSH
37676: LD_INT 0
37678: ST_TO_ADDR
// uc_nation := 0 ;
37679: LD_ADDR_OWVAR 21
37683: PUSH
37684: LD_INT 0
37686: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37687: LD_ADDR_OWVAR 37
37691: PUSH
37692: LD_INT 31
37694: ST_TO_ADDR
// vc_control := control_rider ;
37695: LD_ADDR_OWVAR 38
37699: PUSH
37700: LD_INT 4
37702: ST_TO_ADDR
// end ;
37703: LD_VAR 0 1
37707: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
37712: PPUSH
// uc_side = 0 ;
37713: LD_ADDR_OWVAR 20
37717: PUSH
37718: LD_INT 0
37720: ST_TO_ADDR
// uc_nation = 0 ;
37721: LD_ADDR_OWVAR 21
37725: PUSH
37726: LD_INT 0
37728: ST_TO_ADDR
// InitHc_All ( ) ;
37729: CALL_OW 584
// InitVc ;
37733: CALL_OW 20
// if mastodonts then
37737: LD_VAR 0 6
37741: IFFALSE 37808
// for i = 1 to mastodonts do
37743: LD_ADDR_VAR 0 11
37747: PUSH
37748: DOUBLE
37749: LD_INT 1
37751: DEC
37752: ST_TO_ADDR
37753: LD_VAR 0 6
37757: PUSH
37758: FOR_TO
37759: IFFALSE 37806
// begin vc_chassis := 31 ;
37761: LD_ADDR_OWVAR 37
37765: PUSH
37766: LD_INT 31
37768: ST_TO_ADDR
// vc_control := control_rider ;
37769: LD_ADDR_OWVAR 38
37773: PUSH
37774: LD_INT 4
37776: ST_TO_ADDR
// animal := CreateVehicle ;
37777: LD_ADDR_VAR 0 12
37781: PUSH
37782: CALL_OW 45
37786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37787: LD_VAR 0 12
37791: PPUSH
37792: LD_VAR 0 8
37796: PPUSH
37797: LD_INT 0
37799: PPUSH
37800: CALL 39950 0 3
// end ;
37804: GO 37758
37806: POP
37807: POP
// if horses then
37808: LD_VAR 0 5
37812: IFFALSE 37879
// for i = 1 to horses do
37814: LD_ADDR_VAR 0 11
37818: PUSH
37819: DOUBLE
37820: LD_INT 1
37822: DEC
37823: ST_TO_ADDR
37824: LD_VAR 0 5
37828: PUSH
37829: FOR_TO
37830: IFFALSE 37877
// begin hc_class := 21 ;
37832: LD_ADDR_OWVAR 28
37836: PUSH
37837: LD_INT 21
37839: ST_TO_ADDR
// hc_gallery :=  ;
37840: LD_ADDR_OWVAR 33
37844: PUSH
37845: LD_STRING 
37847: ST_TO_ADDR
// animal := CreateHuman ;
37848: LD_ADDR_VAR 0 12
37852: PUSH
37853: CALL_OW 44
37857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37858: LD_VAR 0 12
37862: PPUSH
37863: LD_VAR 0 8
37867: PPUSH
37868: LD_INT 0
37870: PPUSH
37871: CALL 39950 0 3
// end ;
37875: GO 37829
37877: POP
37878: POP
// if birds then
37879: LD_VAR 0 1
37883: IFFALSE 37950
// for i = 1 to birds do
37885: LD_ADDR_VAR 0 11
37889: PUSH
37890: DOUBLE
37891: LD_INT 1
37893: DEC
37894: ST_TO_ADDR
37895: LD_VAR 0 1
37899: PUSH
37900: FOR_TO
37901: IFFALSE 37948
// begin hc_class := 18 ;
37903: LD_ADDR_OWVAR 28
37907: PUSH
37908: LD_INT 18
37910: ST_TO_ADDR
// hc_gallery =  ;
37911: LD_ADDR_OWVAR 33
37915: PUSH
37916: LD_STRING 
37918: ST_TO_ADDR
// animal := CreateHuman ;
37919: LD_ADDR_VAR 0 12
37923: PUSH
37924: CALL_OW 44
37928: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37929: LD_VAR 0 12
37933: PPUSH
37934: LD_VAR 0 8
37938: PPUSH
37939: LD_INT 0
37941: PPUSH
37942: CALL 39950 0 3
// end ;
37946: GO 37900
37948: POP
37949: POP
// if tigers then
37950: LD_VAR 0 2
37954: IFFALSE 38038
// for i = 1 to tigers do
37956: LD_ADDR_VAR 0 11
37960: PUSH
37961: DOUBLE
37962: LD_INT 1
37964: DEC
37965: ST_TO_ADDR
37966: LD_VAR 0 2
37970: PUSH
37971: FOR_TO
37972: IFFALSE 38036
// begin hc_class = class_tiger ;
37974: LD_ADDR_OWVAR 28
37978: PUSH
37979: LD_INT 14
37981: ST_TO_ADDR
// hc_gallery =  ;
37982: LD_ADDR_OWVAR 33
37986: PUSH
37987: LD_STRING 
37989: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37990: LD_ADDR_OWVAR 35
37994: PUSH
37995: LD_INT 7
37997: NEG
37998: PPUSH
37999: LD_INT 7
38001: PPUSH
38002: CALL_OW 12
38006: ST_TO_ADDR
// animal := CreateHuman ;
38007: LD_ADDR_VAR 0 12
38011: PUSH
38012: CALL_OW 44
38016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38017: LD_VAR 0 12
38021: PPUSH
38022: LD_VAR 0 8
38026: PPUSH
38027: LD_INT 0
38029: PPUSH
38030: CALL 39950 0 3
// end ;
38034: GO 37971
38036: POP
38037: POP
// if apemans then
38038: LD_VAR 0 3
38042: IFFALSE 38165
// for i = 1 to apemans do
38044: LD_ADDR_VAR 0 11
38048: PUSH
38049: DOUBLE
38050: LD_INT 1
38052: DEC
38053: ST_TO_ADDR
38054: LD_VAR 0 3
38058: PUSH
38059: FOR_TO
38060: IFFALSE 38163
// begin hc_class = class_apeman ;
38062: LD_ADDR_OWVAR 28
38066: PUSH
38067: LD_INT 12
38069: ST_TO_ADDR
// hc_gallery =  ;
38070: LD_ADDR_OWVAR 33
38074: PUSH
38075: LD_STRING 
38077: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38078: LD_ADDR_OWVAR 35
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PPUSH
38087: LD_INT 2
38089: PPUSH
38090: CALL_OW 12
38094: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38095: LD_ADDR_OWVAR 31
38099: PUSH
38100: LD_INT 1
38102: PPUSH
38103: LD_INT 3
38105: PPUSH
38106: CALL_OW 12
38110: PUSH
38111: LD_INT 1
38113: PPUSH
38114: LD_INT 3
38116: PPUSH
38117: CALL_OW 12
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: ST_TO_ADDR
// animal := CreateHuman ;
38134: LD_ADDR_VAR 0 12
38138: PUSH
38139: CALL_OW 44
38143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38144: LD_VAR 0 12
38148: PPUSH
38149: LD_VAR 0 8
38153: PPUSH
38154: LD_INT 0
38156: PPUSH
38157: CALL 39950 0 3
// end ;
38161: GO 38059
38163: POP
38164: POP
// if enchidnas then
38165: LD_VAR 0 4
38169: IFFALSE 38236
// for i = 1 to enchidnas do
38171: LD_ADDR_VAR 0 11
38175: PUSH
38176: DOUBLE
38177: LD_INT 1
38179: DEC
38180: ST_TO_ADDR
38181: LD_VAR 0 4
38185: PUSH
38186: FOR_TO
38187: IFFALSE 38234
// begin hc_class = 13 ;
38189: LD_ADDR_OWVAR 28
38193: PUSH
38194: LD_INT 13
38196: ST_TO_ADDR
// hc_gallery =  ;
38197: LD_ADDR_OWVAR 33
38201: PUSH
38202: LD_STRING 
38204: ST_TO_ADDR
// animal := CreateHuman ;
38205: LD_ADDR_VAR 0 12
38209: PUSH
38210: CALL_OW 44
38214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38215: LD_VAR 0 12
38219: PPUSH
38220: LD_VAR 0 8
38224: PPUSH
38225: LD_INT 0
38227: PPUSH
38228: CALL 39950 0 3
// end ;
38232: GO 38186
38234: POP
38235: POP
// if fishes then
38236: LD_VAR 0 7
38240: IFFALSE 38307
// for i = 1 to fishes do
38242: LD_ADDR_VAR 0 11
38246: PUSH
38247: DOUBLE
38248: LD_INT 1
38250: DEC
38251: ST_TO_ADDR
38252: LD_VAR 0 7
38256: PUSH
38257: FOR_TO
38258: IFFALSE 38305
// begin hc_class = 20 ;
38260: LD_ADDR_OWVAR 28
38264: PUSH
38265: LD_INT 20
38267: ST_TO_ADDR
// hc_gallery =  ;
38268: LD_ADDR_OWVAR 33
38272: PUSH
38273: LD_STRING 
38275: ST_TO_ADDR
// animal := CreateHuman ;
38276: LD_ADDR_VAR 0 12
38280: PUSH
38281: CALL_OW 44
38285: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38286: LD_VAR 0 12
38290: PPUSH
38291: LD_VAR 0 9
38295: PPUSH
38296: LD_INT 0
38298: PPUSH
38299: CALL 39950 0 3
// end ;
38303: GO 38257
38305: POP
38306: POP
// end ;
38307: LD_VAR 0 10
38311: RET
// export function WantHeal ( sci , unit ) ; begin
38312: LD_INT 0
38314: PPUSH
// if GetTaskList ( sci ) > 0 then
38315: LD_VAR 0 1
38319: PPUSH
38320: CALL_OW 437
38324: PUSH
38325: LD_INT 0
38327: GREATER
38328: IFFALSE 38400
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38330: LD_VAR 0 1
38334: PPUSH
38335: CALL_OW 437
38339: PUSH
38340: LD_INT 1
38342: ARRAY
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: PUSH
38348: LD_STRING l
38350: EQUAL
38351: IFFALSE 38378
38353: PUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL_OW 437
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PUSH
38368: LD_INT 4
38370: ARRAY
38371: PUSH
38372: LD_VAR 0 2
38376: EQUAL
38377: AND
38378: IFFALSE 38390
// result := true else
38380: LD_ADDR_VAR 0 3
38384: PUSH
38385: LD_INT 1
38387: ST_TO_ADDR
38388: GO 38398
// result := false ;
38390: LD_ADDR_VAR 0 3
38394: PUSH
38395: LD_INT 0
38397: ST_TO_ADDR
// end else
38398: GO 38408
// result := false ;
38400: LD_ADDR_VAR 0 3
38404: PUSH
38405: LD_INT 0
38407: ST_TO_ADDR
// end ;
38408: LD_VAR 0 3
38412: RET
// export function HealTarget ( sci ) ; begin
38413: LD_INT 0
38415: PPUSH
// if not sci then
38416: LD_VAR 0 1
38420: NOT
38421: IFFALSE 38425
// exit ;
38423: GO 38490
// result := 0 ;
38425: LD_ADDR_VAR 0 2
38429: PUSH
38430: LD_INT 0
38432: ST_TO_ADDR
// if GetTaskList ( sci ) then
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 437
38442: IFFALSE 38490
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 437
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: PUSH
38458: LD_INT 1
38460: ARRAY
38461: PUSH
38462: LD_STRING l
38464: EQUAL
38465: IFFALSE 38490
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38467: LD_ADDR_VAR 0 2
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 437
38481: PUSH
38482: LD_INT 1
38484: ARRAY
38485: PUSH
38486: LD_INT 4
38488: ARRAY
38489: ST_TO_ADDR
// end ;
38490: LD_VAR 0 2
38494: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38495: LD_INT 0
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
// if not base_units then
38501: LD_VAR 0 1
38505: NOT
38506: IFFALSE 38510
// exit ;
38508: GO 38597
// result := false ;
38510: LD_ADDR_VAR 0 2
38514: PUSH
38515: LD_INT 0
38517: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: LD_VAR 0 1
38527: PPUSH
38528: LD_INT 21
38530: PUSH
38531: LD_INT 3
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PPUSH
38538: CALL_OW 72
38542: ST_TO_ADDR
// if not tmp then
38543: LD_VAR 0 5
38547: NOT
38548: IFFALSE 38552
// exit ;
38550: GO 38597
// for i in tmp do
38552: LD_ADDR_VAR 0 3
38556: PUSH
38557: LD_VAR 0 5
38561: PUSH
38562: FOR_IN
38563: IFFALSE 38595
// begin result := EnemyInRange ( i , 22 ) ;
38565: LD_ADDR_VAR 0 2
38569: PUSH
38570: LD_VAR 0 3
38574: PPUSH
38575: LD_INT 22
38577: PPUSH
38578: CALL 36022 0 2
38582: ST_TO_ADDR
// if result then
38583: LD_VAR 0 2
38587: IFFALSE 38593
// exit ;
38589: POP
38590: POP
38591: GO 38597
// end ;
38593: GO 38562
38595: POP
38596: POP
// end ;
38597: LD_VAR 0 2
38601: RET
// export function FilterByTag ( units , tag ) ; begin
38602: LD_INT 0
38604: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38605: LD_ADDR_VAR 0 3
38609: PUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: LD_INT 120
38617: PUSH
38618: LD_VAR 0 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PPUSH
38627: CALL_OW 72
38631: ST_TO_ADDR
// end ;
38632: LD_VAR 0 3
38636: RET
// export function IsDriver ( un ) ; begin
38637: LD_INT 0
38639: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38640: LD_ADDR_VAR 0 2
38644: PUSH
38645: LD_VAR 0 1
38649: PUSH
38650: LD_INT 55
38652: PUSH
38653: EMPTY
38654: LIST
38655: PPUSH
38656: CALL_OW 69
38660: IN
38661: ST_TO_ADDR
// end ;
38662: LD_VAR 0 2
38666: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
// list := [ ] ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: EMPTY
38677: ST_TO_ADDR
// case d of 0 :
38678: LD_VAR 0 3
38682: PUSH
38683: LD_INT 0
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38691
38689: GO 38824
38691: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38692: LD_ADDR_VAR 0 5
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 4
38704: MINUS
38705: PUSH
38706: LD_VAR 0 2
38710: PUSH
38711: LD_INT 4
38713: MINUS
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: PUSH
38723: LD_VAR 0 1
38727: PUSH
38728: LD_INT 3
38730: MINUS
38731: PUSH
38732: LD_VAR 0 2
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_VAR 0 1
38749: PUSH
38750: LD_INT 4
38752: PLUS
38753: PUSH
38754: LD_VAR 0 2
38758: PUSH
38759: LD_INT 4
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: LD_VAR 0 1
38771: PUSH
38772: LD_INT 3
38774: PLUS
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: LD_INT 3
38783: PLUS
38784: PUSH
38785: LD_INT 5
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: PUSH
38793: LD_VAR 0 1
38797: PUSH
38798: LD_VAR 0 2
38802: PUSH
38803: LD_INT 4
38805: PLUS
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: ST_TO_ADDR
// end ; 1 :
38822: GO 39522
38824: LD_INT 1
38826: DOUBLE
38827: EQUAL
38828: IFTRUE 38832
38830: GO 38965
38832: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38833: LD_ADDR_VAR 0 5
38837: PUSH
38838: LD_VAR 0 1
38842: PUSH
38843: LD_VAR 0 2
38847: PUSH
38848: LD_INT 4
38850: MINUS
38851: PUSH
38852: LD_INT 3
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: PUSH
38860: LD_VAR 0 1
38864: PUSH
38865: LD_INT 3
38867: MINUS
38868: PUSH
38869: LD_VAR 0 2
38873: PUSH
38874: LD_INT 3
38876: MINUS
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PUSH
38886: LD_VAR 0 1
38890: PUSH
38891: LD_INT 4
38893: MINUS
38894: PUSH
38895: LD_VAR 0 2
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_VAR 0 1
38912: PUSH
38913: LD_VAR 0 2
38917: PUSH
38918: LD_INT 3
38920: PLUS
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: PUSH
38930: LD_VAR 0 1
38934: PUSH
38935: LD_INT 4
38937: PLUS
38938: PUSH
38939: LD_VAR 0 2
38943: PUSH
38944: LD_INT 4
38946: PLUS
38947: PUSH
38948: LD_INT 5
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// end ; 2 :
38963: GO 39522
38965: LD_INT 2
38967: DOUBLE
38968: EQUAL
38969: IFTRUE 38973
38971: GO 39102
38973: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38974: LD_ADDR_VAR 0 5
38978: PUSH
38979: LD_VAR 0 1
38983: PUSH
38984: LD_VAR 0 2
38988: PUSH
38989: LD_INT 3
38991: MINUS
38992: PUSH
38993: LD_INT 3
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: PUSH
39001: LD_VAR 0 1
39005: PUSH
39006: LD_INT 4
39008: PLUS
39009: PUSH
39010: LD_VAR 0 2
39014: PUSH
39015: LD_INT 4
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: PUSH
39023: LD_VAR 0 1
39027: PUSH
39028: LD_VAR 0 2
39032: PUSH
39033: LD_INT 4
39035: PLUS
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: PUSH
39045: LD_VAR 0 1
39049: PUSH
39050: LD_INT 3
39052: MINUS
39053: PUSH
39054: LD_VAR 0 2
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: PUSH
39067: LD_VAR 0 1
39071: PUSH
39072: LD_INT 4
39074: MINUS
39075: PUSH
39076: LD_VAR 0 2
39080: PUSH
39081: LD_INT 4
39083: MINUS
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: ST_TO_ADDR
// end ; 3 :
39100: GO 39522
39102: LD_INT 3
39104: DOUBLE
39105: EQUAL
39106: IFTRUE 39110
39108: GO 39243
39110: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39111: LD_ADDR_VAR 0 5
39115: PUSH
39116: LD_VAR 0 1
39120: PUSH
39121: LD_INT 3
39123: PLUS
39124: PUSH
39125: LD_VAR 0 2
39129: PUSH
39130: LD_INT 4
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: LD_VAR 0 1
39142: PUSH
39143: LD_INT 4
39145: PLUS
39146: PUSH
39147: LD_VAR 0 2
39151: PUSH
39152: LD_INT 4
39154: PLUS
39155: PUSH
39156: LD_INT 5
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: PUSH
39164: LD_VAR 0 1
39168: PUSH
39169: LD_INT 4
39171: MINUS
39172: PUSH
39173: LD_VAR 0 2
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: PUSH
39186: LD_VAR 0 1
39190: PUSH
39191: LD_VAR 0 2
39195: PUSH
39196: LD_INT 4
39198: MINUS
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: PUSH
39208: LD_VAR 0 1
39212: PUSH
39213: LD_INT 3
39215: MINUS
39216: PUSH
39217: LD_VAR 0 2
39221: PUSH
39222: LD_INT 3
39224: MINUS
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: ST_TO_ADDR
// end ; 4 :
39241: GO 39522
39243: LD_INT 4
39245: DOUBLE
39246: EQUAL
39247: IFTRUE 39251
39249: GO 39384
39251: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39252: LD_ADDR_VAR 0 5
39256: PUSH
39257: LD_VAR 0 1
39261: PUSH
39262: LD_VAR 0 2
39266: PUSH
39267: LD_INT 4
39269: PLUS
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: PUSH
39279: LD_VAR 0 1
39283: PUSH
39284: LD_INT 3
39286: PLUS
39287: PUSH
39288: LD_VAR 0 2
39292: PUSH
39293: LD_INT 3
39295: PLUS
39296: PUSH
39297: LD_INT 5
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: LIST
39304: PUSH
39305: LD_VAR 0 1
39309: PUSH
39310: LD_INT 4
39312: PLUS
39313: PUSH
39314: LD_VAR 0 2
39318: PUSH
39319: LD_INT 4
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: PUSH
39327: LD_VAR 0 1
39331: PUSH
39332: LD_VAR 0 2
39336: PUSH
39337: LD_INT 3
39339: MINUS
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: LIST
39348: PUSH
39349: LD_VAR 0 1
39353: PUSH
39354: LD_INT 4
39356: MINUS
39357: PUSH
39358: LD_VAR 0 2
39362: PUSH
39363: LD_INT 4
39365: MINUS
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
// end ; 5 :
39382: GO 39522
39384: LD_INT 5
39386: DOUBLE
39387: EQUAL
39388: IFTRUE 39392
39390: GO 39521
39392: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39393: LD_ADDR_VAR 0 5
39397: PUSH
39398: LD_VAR 0 1
39402: PUSH
39403: LD_INT 4
39405: MINUS
39406: PUSH
39407: LD_VAR 0 2
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: LIST
39419: PUSH
39420: LD_VAR 0 1
39424: PUSH
39425: LD_VAR 0 2
39429: PUSH
39430: LD_INT 4
39432: MINUS
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: PUSH
39442: LD_VAR 0 1
39446: PUSH
39447: LD_INT 4
39449: PLUS
39450: PUSH
39451: LD_VAR 0 2
39455: PUSH
39456: LD_INT 4
39458: PLUS
39459: PUSH
39460: LD_INT 5
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: PUSH
39468: LD_VAR 0 1
39472: PUSH
39473: LD_INT 3
39475: PLUS
39476: PUSH
39477: LD_VAR 0 2
39481: PUSH
39482: LD_INT 4
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: PUSH
39490: LD_VAR 0 1
39494: PUSH
39495: LD_VAR 0 2
39499: PUSH
39500: LD_INT 3
39502: PLUS
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
// end ; end ;
39519: GO 39522
39521: POP
// result := list ;
39522: LD_ADDR_VAR 0 4
39526: PUSH
39527: LD_VAR 0 5
39531: ST_TO_ADDR
// end ;
39532: LD_VAR 0 4
39536: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39537: LD_INT 0
39539: PPUSH
39540: PPUSH
39541: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39542: LD_VAR 0 1
39546: NOT
39547: IFTRUE 39575
39549: PUSH
39550: LD_VAR 0 2
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: LD_INT 4
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: IN
39573: NOT
39574: OR
39575: IFFALSE 39579
// exit ;
39577: GO 39662
// tmp := [ ] ;
39579: LD_ADDR_VAR 0 5
39583: PUSH
39584: EMPTY
39585: ST_TO_ADDR
// for i in units do
39586: LD_ADDR_VAR 0 4
39590: PUSH
39591: LD_VAR 0 1
39595: PUSH
39596: FOR_IN
39597: IFFALSE 39631
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_VAR 0 5
39608: PPUSH
39609: LD_VAR 0 4
39613: PPUSH
39614: LD_VAR 0 2
39618: PPUSH
39619: CALL_OW 259
39623: PPUSH
39624: CALL 41057 0 2
39628: ST_TO_ADDR
39629: GO 39596
39631: POP
39632: POP
// if not tmp then
39633: LD_VAR 0 5
39637: NOT
39638: IFFALSE 39642
// exit ;
39640: GO 39662
// result := SortListByListDesc ( units , tmp ) ;
39642: LD_ADDR_VAR 0 3
39646: PUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: LD_VAR 0 5
39656: PPUSH
39657: CALL_OW 77
39661: ST_TO_ADDR
// end ;
39662: LD_VAR 0 3
39666: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39667: LD_INT 0
39669: PPUSH
39670: PPUSH
39671: PPUSH
// result := false ;
39672: LD_ADDR_VAR 0 3
39676: PUSH
39677: LD_INT 0
39679: ST_TO_ADDR
// if not building then
39680: LD_VAR 0 2
39684: NOT
39685: IFFALSE 39689
// exit ;
39687: GO 39833
// x := GetX ( building ) ;
39689: LD_ADDR_VAR 0 4
39693: PUSH
39694: LD_VAR 0 2
39698: PPUSH
39699: CALL_OW 250
39703: ST_TO_ADDR
// y := GetY ( building ) ;
39704: LD_ADDR_VAR 0 5
39708: PUSH
39709: LD_VAR 0 2
39713: PPUSH
39714: CALL_OW 251
39718: ST_TO_ADDR
// if not x or not y then
39719: LD_VAR 0 4
39723: NOT
39724: IFTRUE 39733
39726: PUSH
39727: LD_VAR 0 5
39731: NOT
39732: OR
39733: IFFALSE 39737
// exit ;
39735: GO 39833
// if GetTaskList ( unit ) then
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 437
39746: IFFALSE 39833
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39748: LD_STRING e
39750: PUSH
39751: LD_VAR 0 1
39755: PPUSH
39756: CALL_OW 437
39760: PUSH
39761: LD_INT 1
39763: ARRAY
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: EQUAL
39769: IFFALSE 39796
39771: PUSH
39772: LD_VAR 0 4
39776: PUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 437
39786: PUSH
39787: LD_INT 1
39789: ARRAY
39790: PUSH
39791: LD_INT 2
39793: ARRAY
39794: EQUAL
39795: AND
39796: IFFALSE 39823
39798: PUSH
39799: LD_VAR 0 5
39803: PUSH
39804: LD_VAR 0 1
39808: PPUSH
39809: CALL_OW 437
39813: PUSH
39814: LD_INT 1
39816: ARRAY
39817: PUSH
39818: LD_INT 3
39820: ARRAY
39821: EQUAL
39822: AND
39823: IFFALSE 39833
// result := true end ;
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_INT 1
39832: ST_TO_ADDR
// end ;
39833: LD_VAR 0 3
39837: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39838: LD_INT 0
39840: PPUSH
// result := false ;
39841: LD_ADDR_VAR 0 4
39845: PUSH
39846: LD_INT 0
39848: ST_TO_ADDR
// if GetTaskList ( unit ) then
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 437
39858: IFFALSE 39945
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39860: LD_STRING M
39862: PUSH
39863: LD_VAR 0 1
39867: PPUSH
39868: CALL_OW 437
39872: PUSH
39873: LD_INT 1
39875: ARRAY
39876: PUSH
39877: LD_INT 1
39879: ARRAY
39880: EQUAL
39881: IFFALSE 39908
39883: PUSH
39884: LD_VAR 0 2
39888: PUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 437
39898: PUSH
39899: LD_INT 1
39901: ARRAY
39902: PUSH
39903: LD_INT 2
39905: ARRAY
39906: EQUAL
39907: AND
39908: IFFALSE 39935
39910: PUSH
39911: LD_VAR 0 3
39915: PUSH
39916: LD_VAR 0 1
39920: PPUSH
39921: CALL_OW 437
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: PUSH
39930: LD_INT 3
39932: ARRAY
39933: EQUAL
39934: AND
39935: IFFALSE 39945
// result := true ;
39937: LD_ADDR_VAR 0 4
39941: PUSH
39942: LD_INT 1
39944: ST_TO_ADDR
// end ; end ;
39945: LD_VAR 0 4
39949: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39950: LD_INT 0
39952: PPUSH
39953: PPUSH
39954: PPUSH
39955: PPUSH
// if not unit or not area then
39956: LD_VAR 0 1
39960: NOT
39961: IFTRUE 39970
39963: PUSH
39964: LD_VAR 0 2
39968: NOT
39969: OR
39970: IFFALSE 39974
// exit ;
39972: GO 40150
// tmp := AreaToList ( area , i ) ;
39974: LD_ADDR_VAR 0 6
39978: PUSH
39979: LD_VAR 0 2
39983: PPUSH
39984: LD_VAR 0 5
39988: PPUSH
39989: CALL_OW 517
39993: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39994: LD_ADDR_VAR 0 5
39998: PUSH
39999: DOUBLE
40000: LD_INT 1
40002: DEC
40003: ST_TO_ADDR
40004: LD_VAR 0 6
40008: PUSH
40009: LD_INT 1
40011: ARRAY
40012: PUSH
40013: FOR_TO
40014: IFFALSE 40148
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40016: LD_ADDR_VAR 0 7
40020: PUSH
40021: LD_VAR 0 6
40025: PUSH
40026: LD_INT 1
40028: ARRAY
40029: PUSH
40030: LD_VAR 0 5
40034: ARRAY
40035: PUSH
40036: LD_VAR 0 6
40040: PUSH
40041: LD_INT 2
40043: ARRAY
40044: PUSH
40045: LD_VAR 0 5
40049: ARRAY
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40055: LD_INT 92
40057: PUSH
40058: LD_VAR 0 7
40062: PUSH
40063: LD_INT 1
40065: ARRAY
40066: PUSH
40067: LD_VAR 0 7
40071: PUSH
40072: LD_INT 2
40074: ARRAY
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: PPUSH
40085: CALL_OW 69
40089: PUSH
40090: LD_INT 0
40092: EQUAL
40093: IFFALSE 40146
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_VAR 0 7
40104: PUSH
40105: LD_INT 1
40107: ARRAY
40108: PPUSH
40109: LD_VAR 0 7
40113: PUSH
40114: LD_INT 2
40116: ARRAY
40117: PPUSH
40118: LD_VAR 0 3
40122: PPUSH
40123: CALL_OW 48
// result := IsPlaced ( unit ) ;
40127: LD_ADDR_VAR 0 4
40131: PUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 305
40141: ST_TO_ADDR
// exit ;
40142: POP
40143: POP
40144: GO 40150
// end ; end ;
40146: GO 40013
40148: POP
40149: POP
// end ;
40150: LD_VAR 0 4
40154: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40155: LD_INT 0
40157: PPUSH
40158: PPUSH
40159: PPUSH
// if not side or side > 8 then
40160: LD_VAR 0 1
40164: NOT
40165: IFTRUE 40177
40167: PUSH
40168: LD_VAR 0 1
40172: PUSH
40173: LD_INT 8
40175: GREATER
40176: OR
40177: IFFALSE 40181
// exit ;
40179: GO 40368
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40181: LD_ADDR_VAR 0 4
40185: PUSH
40186: LD_INT 22
40188: PUSH
40189: LD_VAR 0 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 21
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PPUSH
40212: CALL_OW 69
40216: ST_TO_ADDR
// if not tmp then
40217: LD_VAR 0 4
40221: NOT
40222: IFFALSE 40226
// exit ;
40224: GO 40368
// enable_addtolog := true ;
40226: LD_ADDR_OWVAR 81
40230: PUSH
40231: LD_INT 1
40233: ST_TO_ADDR
// AddToLog ( [ ) ;
40234: LD_STRING [
40236: PPUSH
40237: CALL_OW 561
// for i in tmp do
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_VAR 0 4
40250: PUSH
40251: FOR_IN
40252: IFFALSE 40359
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40254: LD_STRING [
40256: PUSH
40257: LD_VAR 0 3
40261: PPUSH
40262: CALL_OW 266
40266: STR
40267: PUSH
40268: LD_STRING , 
40270: STR
40271: PUSH
40272: LD_VAR 0 3
40276: PPUSH
40277: CALL_OW 250
40281: STR
40282: PUSH
40283: LD_STRING , 
40285: STR
40286: PUSH
40287: LD_VAR 0 3
40291: PPUSH
40292: CALL_OW 251
40296: STR
40297: PUSH
40298: LD_STRING , 
40300: STR
40301: PUSH
40302: LD_VAR 0 3
40306: PPUSH
40307: CALL_OW 254
40311: STR
40312: PUSH
40313: LD_STRING , 
40315: STR
40316: PUSH
40317: LD_VAR 0 3
40321: PPUSH
40322: LD_INT 1
40324: PPUSH
40325: CALL_OW 268
40329: STR
40330: PUSH
40331: LD_STRING , 
40333: STR
40334: PUSH
40335: LD_VAR 0 3
40339: PPUSH
40340: LD_INT 2
40342: PPUSH
40343: CALL_OW 268
40347: STR
40348: PUSH
40349: LD_STRING ],
40351: STR
40352: PPUSH
40353: CALL_OW 561
// end ;
40357: GO 40251
40359: POP
40360: POP
// AddToLog ( ]; ) ;
40361: LD_STRING ];
40363: PPUSH
40364: CALL_OW 561
// end ;
40368: LD_VAR 0 2
40372: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40373: LD_INT 0
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
// if not area or not rate or not max then
40380: LD_VAR 0 1
40384: NOT
40385: IFTRUE 40394
40387: PUSH
40388: LD_VAR 0 2
40392: NOT
40393: OR
40394: IFTRUE 40403
40396: PUSH
40397: LD_VAR 0 4
40401: NOT
40402: OR
40403: IFFALSE 40407
// exit ;
40405: GO 40596
// while 1 do
40407: LD_INT 1
40409: IFFALSE 40596
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40411: LD_ADDR_VAR 0 9
40415: PUSH
40416: LD_VAR 0 1
40420: PPUSH
40421: LD_INT 1
40423: PPUSH
40424: CALL_OW 287
40428: PUSH
40429: LD_INT 10
40431: MUL
40432: ST_TO_ADDR
// r := rate / 10 ;
40433: LD_ADDR_VAR 0 7
40437: PUSH
40438: LD_VAR 0 2
40442: PUSH
40443: LD_INT 10
40445: DIVREAL
40446: ST_TO_ADDR
// time := 1 1$00 ;
40447: LD_ADDR_VAR 0 8
40451: PUSH
40452: LD_INT 2100
40454: ST_TO_ADDR
// if amount < min then
40455: LD_VAR 0 9
40459: PUSH
40460: LD_VAR 0 3
40464: LESS
40465: IFFALSE 40483
// r := r * 2 else
40467: LD_ADDR_VAR 0 7
40471: PUSH
40472: LD_VAR 0 7
40476: PUSH
40477: LD_INT 2
40479: MUL
40480: ST_TO_ADDR
40481: GO 40509
// if amount > max then
40483: LD_VAR 0 9
40487: PUSH
40488: LD_VAR 0 4
40492: GREATER
40493: IFFALSE 40509
// r := r / 2 ;
40495: LD_ADDR_VAR 0 7
40499: PUSH
40500: LD_VAR 0 7
40504: PUSH
40505: LD_INT 2
40507: DIVREAL
40508: ST_TO_ADDR
// time := time / r ;
40509: LD_ADDR_VAR 0 8
40513: PUSH
40514: LD_VAR 0 8
40518: PUSH
40519: LD_VAR 0 7
40523: DIVREAL
40524: ST_TO_ADDR
// if time < 0 then
40525: LD_VAR 0 8
40529: PUSH
40530: LD_INT 0
40532: LESS
40533: IFFALSE 40550
// time := time * - 1 ;
40535: LD_ADDR_VAR 0 8
40539: PUSH
40540: LD_VAR 0 8
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: MUL
40549: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40550: LD_VAR 0 8
40554: PUSH
40555: LD_INT 35
40557: PPUSH
40558: LD_INT 875
40560: PPUSH
40561: CALL_OW 12
40565: PLUS
40566: PPUSH
40567: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40571: LD_INT 1
40573: PPUSH
40574: LD_INT 5
40576: PPUSH
40577: CALL_OW 12
40581: PPUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: LD_INT 1
40589: PPUSH
40590: CALL_OW 55
// end ;
40594: GO 40407
// end ;
40596: LD_VAR 0 5
40600: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40601: LD_INT 0
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
// if not turrets or not factories then
40611: LD_VAR 0 1
40615: NOT
40616: IFTRUE 40625
40618: PUSH
40619: LD_VAR 0 2
40623: NOT
40624: OR
40625: IFFALSE 40629
// exit ;
40627: GO 40936
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40629: LD_ADDR_VAR 0 10
40633: PUSH
40634: LD_INT 5
40636: PUSH
40637: LD_INT 6
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 4
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: LD_INT 5
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 24
40671: PUSH
40672: LD_INT 25
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 23
40681: PUSH
40682: LD_INT 27
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 42
40695: PUSH
40696: LD_INT 43
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 44
40705: PUSH
40706: LD_INT 46
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 45
40715: PUSH
40716: LD_INT 47
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: LIST
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: ST_TO_ADDR
// result := [ ] ;
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: EMPTY
40739: ST_TO_ADDR
// for i in turrets do
40740: LD_ADDR_VAR 0 4
40744: PUSH
40745: LD_VAR 0 1
40749: PUSH
40750: FOR_IN
40751: IFFALSE 40934
// begin nat := GetNation ( i ) ;
40753: LD_ADDR_VAR 0 7
40757: PUSH
40758: LD_VAR 0 4
40762: PPUSH
40763: CALL_OW 248
40767: ST_TO_ADDR
// weapon := 0 ;
40768: LD_ADDR_VAR 0 8
40772: PUSH
40773: LD_INT 0
40775: ST_TO_ADDR
// if not nat then
40776: LD_VAR 0 7
40780: NOT
40781: IFFALSE 40785
// continue ;
40783: GO 40750
// for j in list [ nat ] do
40785: LD_ADDR_VAR 0 5
40789: PUSH
40790: LD_VAR 0 10
40794: PUSH
40795: LD_VAR 0 7
40799: ARRAY
40800: PUSH
40801: FOR_IN
40802: IFFALSE 40843
// if GetBWeapon ( i ) = j [ 1 ] then
40804: LD_VAR 0 4
40808: PPUSH
40809: CALL_OW 269
40813: PUSH
40814: LD_VAR 0 5
40818: PUSH
40819: LD_INT 1
40821: ARRAY
40822: EQUAL
40823: IFFALSE 40841
// begin weapon := j [ 2 ] ;
40825: LD_ADDR_VAR 0 8
40829: PUSH
40830: LD_VAR 0 5
40834: PUSH
40835: LD_INT 2
40837: ARRAY
40838: ST_TO_ADDR
// break ;
40839: GO 40843
// end ;
40841: GO 40801
40843: POP
40844: POP
// if not weapon then
40845: LD_VAR 0 8
40849: NOT
40850: IFFALSE 40854
// continue ;
40852: GO 40750
// for k in factories do
40854: LD_ADDR_VAR 0 6
40858: PUSH
40859: LD_VAR 0 2
40863: PUSH
40864: FOR_IN
40865: IFFALSE 40930
// begin weapons := AvailableWeaponList ( k ) ;
40867: LD_ADDR_VAR 0 9
40871: PUSH
40872: LD_VAR 0 6
40876: PPUSH
40877: CALL_OW 478
40881: ST_TO_ADDR
// if not weapons then
40882: LD_VAR 0 9
40886: NOT
40887: IFFALSE 40891
// continue ;
40889: GO 40864
// if weapon in weapons then
40891: LD_VAR 0 8
40895: PUSH
40896: LD_VAR 0 9
40900: IN
40901: IFFALSE 40928
// begin result := [ i , weapon ] ;
40903: LD_ADDR_VAR 0 3
40907: PUSH
40908: LD_VAR 0 4
40912: PUSH
40913: LD_VAR 0 8
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// exit ;
40922: POP
40923: POP
40924: POP
40925: POP
40926: GO 40936
// end ; end ;
40928: GO 40864
40930: POP
40931: POP
// end ;
40932: GO 40750
40934: POP
40935: POP
// end ;
40936: LD_VAR 0 3
40940: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40941: LD_INT 0
40943: PPUSH
// if not side or side > 8 then
40944: LD_VAR 0 3
40948: NOT
40949: IFTRUE 40961
40951: PUSH
40952: LD_VAR 0 3
40956: PUSH
40957: LD_INT 8
40959: GREATER
40960: OR
40961: IFFALSE 40965
// exit ;
40963: GO 41024
// if not range then
40965: LD_VAR 0 4
40969: NOT
40970: IFFALSE 40981
// range := - 12 ;
40972: LD_ADDR_VAR 0 4
40976: PUSH
40977: LD_INT 12
40979: NEG
40980: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40981: LD_VAR 0 1
40985: PPUSH
40986: LD_VAR 0 2
40990: PPUSH
40991: LD_VAR 0 3
40995: PPUSH
40996: LD_VAR 0 4
41000: PPUSH
41001: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41005: LD_VAR 0 1
41009: PPUSH
41010: LD_VAR 0 2
41014: PPUSH
41015: LD_VAR 0 3
41019: PPUSH
41020: CALL_OW 331
// end ;
41024: LD_VAR 0 5
41028: RET
// export function Video ( mode ) ; begin
41029: LD_INT 0
41031: PPUSH
// ingame_video = mode ;
41032: LD_ADDR_OWVAR 52
41036: PUSH
41037: LD_VAR 0 1
41041: ST_TO_ADDR
// interface_hidden = mode ;
41042: LD_ADDR_OWVAR 54
41046: PUSH
41047: LD_VAR 0 1
41051: ST_TO_ADDR
// end ;
41052: LD_VAR 0 2
41056: RET
// export function Join ( array , element ) ; begin
41057: LD_INT 0
41059: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41060: LD_ADDR_VAR 0 3
41064: PUSH
41065: LD_VAR 0 1
41069: PPUSH
41070: LD_VAR 0 1
41074: PUSH
41075: LD_INT 1
41077: PLUS
41078: PPUSH
41079: LD_VAR 0 2
41083: PPUSH
41084: CALL_OW 1
41088: ST_TO_ADDR
// end ;
41089: LD_VAR 0 3
41093: RET
// export function JoinUnion ( array , element ) ; begin
41094: LD_INT 0
41096: PPUSH
// result := array union element ;
41097: LD_ADDR_VAR 0 3
41101: PUSH
41102: LD_VAR 0 1
41106: PUSH
41107: LD_VAR 0 2
41111: UNION
41112: ST_TO_ADDR
// end ;
41113: LD_VAR 0 3
41117: RET
// export function GetBehemoths ( side ) ; begin
41118: LD_INT 0
41120: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41121: LD_ADDR_VAR 0 2
41125: PUSH
41126: LD_INT 22
41128: PUSH
41129: LD_VAR 0 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 31
41140: PUSH
41141: LD_INT 25
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PPUSH
41152: CALL_OW 69
41156: ST_TO_ADDR
// end ;
41157: LD_VAR 0 2
41161: RET
// export function Shuffle ( array ) ; var i , index ; begin
41162: LD_INT 0
41164: PPUSH
41165: PPUSH
41166: PPUSH
// result := [ ] ;
41167: LD_ADDR_VAR 0 2
41171: PUSH
41172: EMPTY
41173: ST_TO_ADDR
// if not array then
41174: LD_VAR 0 1
41178: NOT
41179: IFFALSE 41183
// exit ;
41181: GO 41282
// Randomize ;
41183: CALL_OW 10
// for i = array downto 1 do
41187: LD_ADDR_VAR 0 3
41191: PUSH
41192: DOUBLE
41193: LD_VAR 0 1
41197: INC
41198: ST_TO_ADDR
41199: LD_INT 1
41201: PUSH
41202: FOR_DOWNTO
41203: IFFALSE 41280
// begin index := rand ( 1 , array ) ;
41205: LD_ADDR_VAR 0 4
41209: PUSH
41210: LD_INT 1
41212: PPUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 12
41222: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41223: LD_ADDR_VAR 0 2
41227: PUSH
41228: LD_VAR 0 2
41232: PPUSH
41233: LD_VAR 0 2
41237: PUSH
41238: LD_INT 1
41240: PLUS
41241: PPUSH
41242: LD_VAR 0 1
41246: PUSH
41247: LD_VAR 0 4
41251: ARRAY
41252: PPUSH
41253: CALL_OW 2
41257: ST_TO_ADDR
// array := Delete ( array , index ) ;
41258: LD_ADDR_VAR 0 1
41262: PUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: LD_VAR 0 4
41272: PPUSH
41273: CALL_OW 3
41277: ST_TO_ADDR
// end ;
41278: GO 41202
41280: POP
41281: POP
// end ;
41282: LD_VAR 0 2
41286: RET
// export function GetBaseMaterials ( base ) ; begin
41287: LD_INT 0
41289: PPUSH
// result := [ 0 , 0 , 0 ] ;
41290: LD_ADDR_VAR 0 2
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: ST_TO_ADDR
// if not base then
41309: LD_VAR 0 1
41313: NOT
41314: IFFALSE 41318
// exit ;
41316: GO 41367
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41318: LD_ADDR_VAR 0 2
41322: PUSH
41323: LD_VAR 0 1
41327: PPUSH
41328: LD_INT 1
41330: PPUSH
41331: CALL_OW 275
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: LD_INT 2
41343: PPUSH
41344: CALL_OW 275
41348: PUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: LD_INT 3
41356: PPUSH
41357: CALL_OW 275
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
// end ;
41367: LD_VAR 0 2
41371: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41372: LD_INT 0
41374: PPUSH
41375: PPUSH
// result := array ;
41376: LD_ADDR_VAR 0 3
41380: PUSH
41381: LD_VAR 0 1
41385: ST_TO_ADDR
// if size >= result then
41386: LD_VAR 0 2
41390: PUSH
41391: LD_VAR 0 3
41395: GREATEREQUAL
41396: IFFALSE 41400
// exit ;
41398: GO 41450
// if size then
41400: LD_VAR 0 2
41404: IFFALSE 41450
// for i := array downto size do
41406: LD_ADDR_VAR 0 4
41410: PUSH
41411: DOUBLE
41412: LD_VAR 0 1
41416: INC
41417: ST_TO_ADDR
41418: LD_VAR 0 2
41422: PUSH
41423: FOR_DOWNTO
41424: IFFALSE 41448
// result := Delete ( result , result ) ;
41426: LD_ADDR_VAR 0 3
41430: PUSH
41431: LD_VAR 0 3
41435: PPUSH
41436: LD_VAR 0 3
41440: PPUSH
41441: CALL_OW 3
41445: ST_TO_ADDR
41446: GO 41423
41448: POP
41449: POP
// end ;
41450: LD_VAR 0 3
41454: RET
// export function ComExit ( unit ) ; var tmp ; begin
41455: LD_INT 0
41457: PPUSH
41458: PPUSH
// if not IsInUnit ( unit ) then
41459: LD_VAR 0 1
41463: PPUSH
41464: CALL_OW 310
41468: NOT
41469: IFFALSE 41473
// exit ;
41471: GO 41533
// tmp := IsInUnit ( unit ) ;
41473: LD_ADDR_VAR 0 3
41477: PUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 310
41487: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41488: LD_VAR 0 3
41492: PPUSH
41493: CALL_OW 247
41497: PUSH
41498: LD_INT 2
41500: EQUAL
41501: IFFALSE 41514
// ComExitVehicle ( unit ) else
41503: LD_VAR 0 1
41507: PPUSH
41508: CALL_OW 121
41512: GO 41523
// ComExitBuilding ( unit ) ;
41514: LD_VAR 0 1
41518: PPUSH
41519: CALL_OW 122
// result := tmp ;
41523: LD_ADDR_VAR 0 2
41527: PUSH
41528: LD_VAR 0 3
41532: ST_TO_ADDR
// end ;
41533: LD_VAR 0 2
41537: RET
// export function ComExitAll ( units ) ; var i ; begin
41538: LD_INT 0
41540: PPUSH
41541: PPUSH
// if not units then
41542: LD_VAR 0 1
41546: NOT
41547: IFFALSE 41551
// exit ;
41549: GO 41577
// for i in units do
41551: LD_ADDR_VAR 0 3
41555: PUSH
41556: LD_VAR 0 1
41560: PUSH
41561: FOR_IN
41562: IFFALSE 41575
// ComExit ( i ) ;
41564: LD_VAR 0 3
41568: PPUSH
41569: CALL 41455 0 1
41573: GO 41561
41575: POP
41576: POP
// end ;
41577: LD_VAR 0 2
41581: RET
// export function ResetHc ; begin
41582: LD_INT 0
41584: PPUSH
// InitHc ;
41585: CALL_OW 19
// hc_importance := 0 ;
41589: LD_ADDR_OWVAR 32
41593: PUSH
41594: LD_INT 0
41596: ST_TO_ADDR
// end ;
41597: LD_VAR 0 1
41601: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41602: LD_INT 0
41604: PPUSH
41605: PPUSH
41606: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41607: LD_ADDR_VAR 0 6
41611: PUSH
41612: LD_VAR 0 1
41616: PUSH
41617: LD_VAR 0 3
41621: PLUS
41622: PUSH
41623: LD_INT 2
41625: DIV
41626: ST_TO_ADDR
// if _x < 0 then
41627: LD_VAR 0 6
41631: PUSH
41632: LD_INT 0
41634: LESS
41635: IFFALSE 41652
// _x := _x * - 1 ;
41637: LD_ADDR_VAR 0 6
41641: PUSH
41642: LD_VAR 0 6
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: MUL
41651: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41652: LD_ADDR_VAR 0 7
41656: PUSH
41657: LD_VAR 0 2
41661: PUSH
41662: LD_VAR 0 4
41666: PLUS
41667: PUSH
41668: LD_INT 2
41670: DIV
41671: ST_TO_ADDR
// if _y < 0 then
41672: LD_VAR 0 7
41676: PUSH
41677: LD_INT 0
41679: LESS
41680: IFFALSE 41697
// _y := _y * - 1 ;
41682: LD_ADDR_VAR 0 7
41686: PUSH
41687: LD_VAR 0 7
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: MUL
41696: ST_TO_ADDR
// result := [ _x , _y ] ;
41697: LD_ADDR_VAR 0 5
41701: PUSH
41702: LD_VAR 0 6
41706: PUSH
41707: LD_VAR 0 7
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: ST_TO_ADDR
// end ;
41716: LD_VAR 0 5
41720: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41721: LD_INT 0
41723: PPUSH
41724: PPUSH
41725: PPUSH
41726: PPUSH
// task := GetTaskList ( unit ) ;
41727: LD_ADDR_VAR 0 7
41731: PUSH
41732: LD_VAR 0 1
41736: PPUSH
41737: CALL_OW 437
41741: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41742: LD_VAR 0 7
41746: NOT
41747: IFFALSE 41766
41749: PUSH
41750: LD_VAR 0 1
41754: PPUSH
41755: LD_VAR 0 2
41759: PPUSH
41760: CALL_OW 308
41764: NOT
41765: AND
41766: IFFALSE 41770
// exit ;
41768: GO 41888
// if IsInArea ( unit , area ) then
41770: LD_VAR 0 1
41774: PPUSH
41775: LD_VAR 0 2
41779: PPUSH
41780: CALL_OW 308
41784: IFFALSE 41802
// begin ComMoveToArea ( unit , goAway ) ;
41786: LD_VAR 0 1
41790: PPUSH
41791: LD_VAR 0 3
41795: PPUSH
41796: CALL_OW 113
// exit ;
41800: GO 41888
// end ; if task [ 1 ] [ 1 ] <> M then
41802: LD_VAR 0 7
41806: PUSH
41807: LD_INT 1
41809: ARRAY
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: PUSH
41815: LD_STRING M
41817: NONEQUAL
41818: IFFALSE 41822
// exit ;
41820: GO 41888
// x := task [ 1 ] [ 2 ] ;
41822: LD_ADDR_VAR 0 5
41826: PUSH
41827: LD_VAR 0 7
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PUSH
41836: LD_INT 2
41838: ARRAY
41839: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41840: LD_ADDR_VAR 0 6
41844: PUSH
41845: LD_VAR 0 7
41849: PUSH
41850: LD_INT 1
41852: ARRAY
41853: PUSH
41854: LD_INT 3
41856: ARRAY
41857: ST_TO_ADDR
// if InArea ( x , y , area ) then
41858: LD_VAR 0 5
41862: PPUSH
41863: LD_VAR 0 6
41867: PPUSH
41868: LD_VAR 0 2
41872: PPUSH
41873: CALL_OW 309
41877: IFFALSE 41888
// ComStop ( unit ) ;
41879: LD_VAR 0 1
41883: PPUSH
41884: CALL_OW 141
// end ;
41888: LD_VAR 0 4
41892: RET
// export function Abs ( value ) ; begin
41893: LD_INT 0
41895: PPUSH
// result := value ;
41896: LD_ADDR_VAR 0 2
41900: PUSH
41901: LD_VAR 0 1
41905: ST_TO_ADDR
// if value < 0 then
41906: LD_VAR 0 1
41910: PUSH
41911: LD_INT 0
41913: LESS
41914: IFFALSE 41931
// result := value * - 1 ;
41916: LD_ADDR_VAR 0 2
41920: PUSH
41921: LD_VAR 0 1
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: MUL
41930: ST_TO_ADDR
// end ;
41931: LD_VAR 0 2
41935: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41936: LD_INT 0
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
// if not unit or not building then
41946: LD_VAR 0 1
41950: NOT
41951: IFTRUE 41960
41953: PUSH
41954: LD_VAR 0 2
41958: NOT
41959: OR
41960: IFFALSE 41964
// exit ;
41962: GO 42192
// x := GetX ( building ) ;
41964: LD_ADDR_VAR 0 4
41968: PUSH
41969: LD_VAR 0 2
41973: PPUSH
41974: CALL_OW 250
41978: ST_TO_ADDR
// y := GetY ( building ) ;
41979: LD_ADDR_VAR 0 6
41983: PUSH
41984: LD_VAR 0 2
41988: PPUSH
41989: CALL_OW 251
41993: ST_TO_ADDR
// d := GetDir ( building ) ;
41994: LD_ADDR_VAR 0 8
41998: PUSH
41999: LD_VAR 0 2
42003: PPUSH
42004: CALL_OW 254
42008: ST_TO_ADDR
// r := 4 ;
42009: LD_ADDR_VAR 0 9
42013: PUSH
42014: LD_INT 4
42016: ST_TO_ADDR
// for i := 1 to 5 do
42017: LD_ADDR_VAR 0 10
42021: PUSH
42022: DOUBLE
42023: LD_INT 1
42025: DEC
42026: ST_TO_ADDR
42027: LD_INT 5
42029: PUSH
42030: FOR_TO
42031: IFFALSE 42190
// begin _x := ShiftX ( x , d , r + i ) ;
42033: LD_ADDR_VAR 0 5
42037: PUSH
42038: LD_VAR 0 4
42042: PPUSH
42043: LD_VAR 0 8
42047: PPUSH
42048: LD_VAR 0 9
42052: PUSH
42053: LD_VAR 0 10
42057: PLUS
42058: PPUSH
42059: CALL_OW 272
42063: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42064: LD_ADDR_VAR 0 7
42068: PUSH
42069: LD_VAR 0 6
42073: PPUSH
42074: LD_VAR 0 8
42078: PPUSH
42079: LD_VAR 0 9
42083: PUSH
42084: LD_VAR 0 10
42088: PLUS
42089: PPUSH
42090: CALL_OW 273
42094: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42095: LD_VAR 0 5
42099: PPUSH
42100: LD_VAR 0 7
42104: PPUSH
42105: CALL_OW 488
42109: IFFALSE 42144
42111: PUSH
42112: LD_VAR 0 5
42116: PPUSH
42117: LD_VAR 0 7
42121: PPUSH
42122: CALL_OW 428
42126: PPUSH
42127: CALL_OW 247
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: IN
42142: NOT
42143: AND
42144: IFFALSE 42188
// begin ComMoveXY ( unit , _x , _y ) ;
42146: LD_VAR 0 1
42150: PPUSH
42151: LD_VAR 0 5
42155: PPUSH
42156: LD_VAR 0 7
42160: PPUSH
42161: CALL_OW 111
// result := [ _x , _y ] ;
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_VAR 0 5
42174: PUSH
42175: LD_VAR 0 7
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// exit ;
42184: POP
42185: POP
42186: GO 42192
// end ; end ;
42188: GO 42030
42190: POP
42191: POP
// end ;
42192: LD_VAR 0 3
42196: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42197: LD_INT 0
42199: PPUSH
42200: PPUSH
42201: PPUSH
// result := 0 ;
42202: LD_ADDR_VAR 0 3
42206: PUSH
42207: LD_INT 0
42209: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42210: LD_VAR 0 1
42214: PUSH
42215: LD_INT 0
42217: LESS
42218: IFTRUE 42230
42220: PUSH
42221: LD_VAR 0 1
42225: PUSH
42226: LD_INT 8
42228: GREATER
42229: OR
42230: IFTRUE 42242
42232: PUSH
42233: LD_VAR 0 2
42237: PUSH
42238: LD_INT 0
42240: LESS
42241: OR
42242: IFTRUE 42254
42244: PUSH
42245: LD_VAR 0 2
42249: PUSH
42250: LD_INT 8
42252: GREATER
42253: OR
42254: IFFALSE 42258
// exit ;
42256: GO 42333
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42258: LD_ADDR_VAR 0 4
42262: PUSH
42263: LD_INT 22
42265: PUSH
42266: LD_VAR 0 2
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PPUSH
42275: CALL_OW 69
42279: PUSH
42280: FOR_IN
42281: IFFALSE 42331
// begin un := UnitShoot ( i ) ;
42283: LD_ADDR_VAR 0 5
42287: PUSH
42288: LD_VAR 0 4
42292: PPUSH
42293: CALL_OW 504
42297: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42298: LD_VAR 0 5
42302: PPUSH
42303: CALL_OW 255
42307: PUSH
42308: LD_VAR 0 1
42312: EQUAL
42313: IFFALSE 42329
// begin result := un ;
42315: LD_ADDR_VAR 0 3
42319: PUSH
42320: LD_VAR 0 5
42324: ST_TO_ADDR
// exit ;
42325: POP
42326: POP
42327: GO 42333
// end ; end ;
42329: GO 42280
42331: POP
42332: POP
// end ;
42333: LD_VAR 0 3
42337: RET
// export function GetCargoBay ( units ) ; begin
42338: LD_INT 0
42340: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42341: LD_ADDR_VAR 0 2
42345: PUSH
42346: LD_VAR 0 1
42350: PPUSH
42351: LD_INT 2
42353: PUSH
42354: LD_INT 34
42356: PUSH
42357: LD_INT 12
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 34
42366: PUSH
42367: LD_INT 51
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 34
42376: PUSH
42377: LD_INT 32
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 34
42386: PUSH
42387: LD_INT 89
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: PPUSH
42401: CALL_OW 72
42405: ST_TO_ADDR
// end ;
42406: LD_VAR 0 2
42410: RET
// export function Negate ( value ) ; begin
42411: LD_INT 0
42413: PPUSH
// result := not value ;
42414: LD_ADDR_VAR 0 2
42418: PUSH
42419: LD_VAR 0 1
42423: NOT
42424: ST_TO_ADDR
// end ;
42425: LD_VAR 0 2
42429: RET
// export function Inc ( value ) ; begin
42430: LD_INT 0
42432: PPUSH
// result := value + 1 ;
42433: LD_ADDR_VAR 0 2
42437: PUSH
42438: LD_VAR 0 1
42442: PUSH
42443: LD_INT 1
42445: PLUS
42446: ST_TO_ADDR
// end ;
42447: LD_VAR 0 2
42451: RET
// export function Dec ( value ) ; begin
42452: LD_INT 0
42454: PPUSH
// result := value - 1 ;
42455: LD_ADDR_VAR 0 2
42459: PUSH
42460: LD_VAR 0 1
42464: PUSH
42465: LD_INT 1
42467: MINUS
42468: ST_TO_ADDR
// end ;
42469: LD_VAR 0 2
42473: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42474: LD_INT 0
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42484: LD_VAR 0 1
42488: PPUSH
42489: LD_VAR 0 2
42493: PPUSH
42494: CALL_OW 488
42498: NOT
42499: IFTRUE 42518
42501: PUSH
42502: LD_VAR 0 3
42506: PPUSH
42507: LD_VAR 0 4
42511: PPUSH
42512: CALL_OW 488
42516: NOT
42517: OR
42518: IFFALSE 42531
// begin result := - 1 ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: ST_TO_ADDR
// exit ;
42529: GO 42766
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42531: LD_ADDR_VAR 0 12
42535: PUSH
42536: LD_VAR 0 1
42540: PPUSH
42541: LD_VAR 0 2
42545: PPUSH
42546: LD_VAR 0 3
42550: PPUSH
42551: LD_VAR 0 4
42555: PPUSH
42556: CALL 41602 0 4
42560: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42561: LD_ADDR_VAR 0 11
42565: PUSH
42566: LD_VAR 0 1
42570: PPUSH
42571: LD_VAR 0 2
42575: PPUSH
42576: LD_VAR 0 12
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: PPUSH
42585: LD_VAR 0 12
42589: PUSH
42590: LD_INT 2
42592: ARRAY
42593: PPUSH
42594: CALL_OW 298
42598: ST_TO_ADDR
// distance := 9999 ;
42599: LD_ADDR_VAR 0 10
42603: PUSH
42604: LD_INT 9999
42606: ST_TO_ADDR
// for i := 0 to 5 do
42607: LD_ADDR_VAR 0 6
42611: PUSH
42612: DOUBLE
42613: LD_INT 0
42615: DEC
42616: ST_TO_ADDR
42617: LD_INT 5
42619: PUSH
42620: FOR_TO
42621: IFFALSE 42764
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42623: LD_ADDR_VAR 0 7
42627: PUSH
42628: LD_VAR 0 1
42632: PPUSH
42633: LD_VAR 0 6
42637: PPUSH
42638: LD_VAR 0 11
42642: PPUSH
42643: CALL_OW 272
42647: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42648: LD_ADDR_VAR 0 8
42652: PUSH
42653: LD_VAR 0 2
42657: PPUSH
42658: LD_VAR 0 6
42662: PPUSH
42663: LD_VAR 0 11
42667: PPUSH
42668: CALL_OW 273
42672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42673: LD_VAR 0 7
42677: PPUSH
42678: LD_VAR 0 8
42682: PPUSH
42683: CALL_OW 488
42687: NOT
42688: IFFALSE 42692
// continue ;
42690: GO 42620
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42692: LD_ADDR_VAR 0 9
42696: PUSH
42697: LD_VAR 0 12
42701: PUSH
42702: LD_INT 1
42704: ARRAY
42705: PPUSH
42706: LD_VAR 0 12
42710: PUSH
42711: LD_INT 2
42713: ARRAY
42714: PPUSH
42715: LD_VAR 0 7
42719: PPUSH
42720: LD_VAR 0 8
42724: PPUSH
42725: CALL_OW 298
42729: ST_TO_ADDR
// if tmp < distance then
42730: LD_VAR 0 9
42734: PUSH
42735: LD_VAR 0 10
42739: LESS
42740: IFFALSE 42762
// begin result := i ;
42742: LD_ADDR_VAR 0 5
42746: PUSH
42747: LD_VAR 0 6
42751: ST_TO_ADDR
// distance := tmp ;
42752: LD_ADDR_VAR 0 10
42756: PUSH
42757: LD_VAR 0 9
42761: ST_TO_ADDR
// end ; end ;
42762: GO 42620
42764: POP
42765: POP
// end ;
42766: LD_VAR 0 5
42770: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42771: LD_INT 0
42773: PPUSH
42774: PPUSH
// if not driver or not IsInUnit ( driver ) then
42775: LD_VAR 0 1
42779: NOT
42780: IFTRUE 42794
42782: PUSH
42783: LD_VAR 0 1
42787: PPUSH
42788: CALL_OW 310
42792: NOT
42793: OR
42794: IFFALSE 42798
// exit ;
42796: GO 42888
// vehicle := IsInUnit ( driver ) ;
42798: LD_ADDR_VAR 0 3
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 310
42812: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42813: LD_VAR 0 1
42817: PPUSH
42818: LD_STRING \
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: PUSH
42848: LD_STRING E
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_VAR 0 3
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PPUSH
42884: CALL_OW 446
// end ;
42888: LD_VAR 0 2
42892: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42893: LD_INT 0
42895: PPUSH
42896: PPUSH
// if not driver or not IsInUnit ( driver ) then
42897: LD_VAR 0 1
42901: NOT
42902: IFTRUE 42916
42904: PUSH
42905: LD_VAR 0 1
42909: PPUSH
42910: CALL_OW 310
42914: NOT
42915: OR
42916: IFFALSE 42920
// exit ;
42918: GO 43010
// vehicle := IsInUnit ( driver ) ;
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: CALL_OW 310
42934: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42935: LD_VAR 0 1
42939: PPUSH
42940: LD_STRING \
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: PUSH
42970: LD_STRING E
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_VAR 0 3
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PPUSH
43006: CALL_OW 447
// end ;
43010: LD_VAR 0 2
43014: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43015: LD_INT 0
43017: PPUSH
43018: PPUSH
43019: PPUSH
// tmp := [ ] ;
43020: LD_ADDR_VAR 0 5
43024: PUSH
43025: EMPTY
43026: ST_TO_ADDR
// for i in units do
43027: LD_ADDR_VAR 0 4
43031: PUSH
43032: LD_VAR 0 1
43036: PUSH
43037: FOR_IN
43038: IFFALSE 43076
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43040: LD_ADDR_VAR 0 5
43044: PUSH
43045: LD_VAR 0 5
43049: PPUSH
43050: LD_VAR 0 5
43054: PUSH
43055: LD_INT 1
43057: PLUS
43058: PPUSH
43059: LD_VAR 0 4
43063: PPUSH
43064: CALL_OW 256
43068: PPUSH
43069: CALL_OW 2
43073: ST_TO_ADDR
43074: GO 43037
43076: POP
43077: POP
// if not tmp then
43078: LD_VAR 0 5
43082: NOT
43083: IFFALSE 43087
// exit ;
43085: GO 43135
// if asc then
43087: LD_VAR 0 2
43091: IFFALSE 43115
// result := SortListByListAsc ( units , tmp ) else
43093: LD_ADDR_VAR 0 3
43097: PUSH
43098: LD_VAR 0 1
43102: PPUSH
43103: LD_VAR 0 5
43107: PPUSH
43108: CALL_OW 76
43112: ST_TO_ADDR
43113: GO 43135
// result := SortListByListDesc ( units , tmp ) ;
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: LD_VAR 0 5
43129: PPUSH
43130: CALL_OW 77
43134: ST_TO_ADDR
// end ;
43135: LD_VAR 0 3
43139: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43140: LD_INT 0
43142: PPUSH
43143: PPUSH
// task := GetTaskList ( mech ) ;
43144: LD_ADDR_VAR 0 4
43148: PUSH
43149: LD_VAR 0 1
43153: PPUSH
43154: CALL_OW 437
43158: ST_TO_ADDR
// if not task then
43159: LD_VAR 0 4
43163: NOT
43164: IFFALSE 43168
// exit ;
43166: GO 43212
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43168: LD_ADDR_VAR 0 3
43172: PUSH
43173: LD_VAR 0 4
43177: PUSH
43178: LD_INT 1
43180: ARRAY
43181: PUSH
43182: LD_INT 1
43184: ARRAY
43185: PUSH
43186: LD_STRING r
43188: EQUAL
43189: IFFALSE 43211
43191: PUSH
43192: LD_VAR 0 4
43196: PUSH
43197: LD_INT 1
43199: ARRAY
43200: PUSH
43201: LD_INT 4
43203: ARRAY
43204: PUSH
43205: LD_VAR 0 2
43209: EQUAL
43210: AND
43211: ST_TO_ADDR
// end ;
43212: LD_VAR 0 3
43216: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43217: LD_INT 0
43219: PPUSH
// SetDir ( unit , d ) ;
43220: LD_VAR 0 1
43224: PPUSH
43225: LD_VAR 0 4
43229: PPUSH
43230: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43234: LD_ADDR_VAR 0 6
43238: PUSH
43239: LD_VAR 0 1
43243: PPUSH
43244: LD_VAR 0 2
43248: PPUSH
43249: LD_VAR 0 3
43253: PPUSH
43254: LD_VAR 0 5
43258: PPUSH
43259: CALL_OW 48
43263: ST_TO_ADDR
// end ;
43264: LD_VAR 0 6
43268: RET
// export function ToNaturalNumber ( number ) ; begin
43269: LD_INT 0
43271: PPUSH
// result := number div 1 ;
43272: LD_ADDR_VAR 0 2
43276: PUSH
43277: LD_VAR 0 1
43281: PUSH
43282: LD_INT 1
43284: DIV
43285: ST_TO_ADDR
// if number < 0 then
43286: LD_VAR 0 1
43290: PUSH
43291: LD_INT 0
43293: LESS
43294: IFFALSE 43304
// result := 0 ;
43296: LD_ADDR_VAR 0 2
43300: PUSH
43301: LD_INT 0
43303: ST_TO_ADDR
// end ;
43304: LD_VAR 0 2
43308: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
43313: PPUSH
// if not buildings then
43314: LD_VAR 0 1
43318: NOT
43319: IFFALSE 43323
// exit ;
43321: GO 43438
// tmp := [ ] ;
43323: LD_ADDR_VAR 0 5
43327: PUSH
43328: EMPTY
43329: ST_TO_ADDR
// for b in buildings do
43330: LD_ADDR_VAR 0 4
43334: PUSH
43335: LD_VAR 0 1
43339: PUSH
43340: FOR_IN
43341: IFFALSE 43379
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43343: LD_ADDR_VAR 0 5
43347: PUSH
43348: LD_VAR 0 5
43352: PPUSH
43353: LD_VAR 0 5
43357: PUSH
43358: LD_INT 1
43360: PLUS
43361: PPUSH
43362: LD_VAR 0 4
43366: PPUSH
43367: CALL_OW 266
43371: PPUSH
43372: CALL_OW 1
43376: ST_TO_ADDR
43377: GO 43340
43379: POP
43380: POP
// if not tmp then
43381: LD_VAR 0 5
43385: NOT
43386: IFFALSE 43390
// exit ;
43388: GO 43438
// if asc then
43390: LD_VAR 0 2
43394: IFFALSE 43418
// result := SortListByListAsc ( buildings , tmp ) else
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: LD_VAR 0 1
43405: PPUSH
43406: LD_VAR 0 5
43410: PPUSH
43411: CALL_OW 76
43415: ST_TO_ADDR
43416: GO 43438
// result := SortListByListDesc ( buildings , tmp ) ;
43418: LD_ADDR_VAR 0 3
43422: PUSH
43423: LD_VAR 0 1
43427: PPUSH
43428: LD_VAR 0 5
43432: PPUSH
43433: CALL_OW 77
43437: ST_TO_ADDR
// end ;
43438: LD_VAR 0 3
43442: RET
// export function SortByClass ( units , class ) ; var un ; begin
43443: LD_INT 0
43445: PPUSH
43446: PPUSH
// if not units or not class then
43447: LD_VAR 0 1
43451: NOT
43452: IFTRUE 43461
43454: PUSH
43455: LD_VAR 0 2
43459: NOT
43460: OR
43461: IFFALSE 43465
// exit ;
43463: GO 43560
// result := [ ] ;
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: EMPTY
43471: ST_TO_ADDR
// for un in units do
43472: LD_ADDR_VAR 0 4
43476: PUSH
43477: LD_VAR 0 1
43481: PUSH
43482: FOR_IN
43483: IFFALSE 43558
// if GetClass ( un ) = class then
43485: LD_VAR 0 4
43489: PPUSH
43490: CALL_OW 257
43494: PUSH
43495: LD_VAR 0 2
43499: EQUAL
43500: IFFALSE 43527
// result := Insert ( result , 1 , un ) else
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_VAR 0 3
43511: PPUSH
43512: LD_INT 1
43514: PPUSH
43515: LD_VAR 0 4
43519: PPUSH
43520: CALL_OW 2
43524: ST_TO_ADDR
43525: GO 43556
// result := Replace ( result , result + 1 , un ) ;
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_VAR 0 3
43536: PPUSH
43537: LD_VAR 0 3
43541: PUSH
43542: LD_INT 1
43544: PLUS
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: CALL_OW 1
43555: ST_TO_ADDR
43556: GO 43482
43558: POP
43559: POP
// end ;
43560: LD_VAR 0 3
43564: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43565: LD_INT 0
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
// result := [ ] ;
43574: LD_ADDR_VAR 0 4
43578: PUSH
43579: EMPTY
43580: ST_TO_ADDR
// if x - r < 0 then
43581: LD_VAR 0 1
43585: PUSH
43586: LD_VAR 0 3
43590: MINUS
43591: PUSH
43592: LD_INT 0
43594: LESS
43595: IFFALSE 43607
// min_x := 0 else
43597: LD_ADDR_VAR 0 8
43601: PUSH
43602: LD_INT 0
43604: ST_TO_ADDR
43605: GO 43623
// min_x := x - r ;
43607: LD_ADDR_VAR 0 8
43611: PUSH
43612: LD_VAR 0 1
43616: PUSH
43617: LD_VAR 0 3
43621: MINUS
43622: ST_TO_ADDR
// if y - r < 0 then
43623: LD_VAR 0 2
43627: PUSH
43628: LD_VAR 0 3
43632: MINUS
43633: PUSH
43634: LD_INT 0
43636: LESS
43637: IFFALSE 43649
// min_y := 0 else
43639: LD_ADDR_VAR 0 7
43643: PUSH
43644: LD_INT 0
43646: ST_TO_ADDR
43647: GO 43665
// min_y := y - r ;
43649: LD_ADDR_VAR 0 7
43653: PUSH
43654: LD_VAR 0 2
43658: PUSH
43659: LD_VAR 0 3
43663: MINUS
43664: ST_TO_ADDR
// max_x := x + r ;
43665: LD_ADDR_VAR 0 9
43669: PUSH
43670: LD_VAR 0 1
43674: PUSH
43675: LD_VAR 0 3
43679: PLUS
43680: ST_TO_ADDR
// max_y := y + r ;
43681: LD_ADDR_VAR 0 10
43685: PUSH
43686: LD_VAR 0 2
43690: PUSH
43691: LD_VAR 0 3
43695: PLUS
43696: ST_TO_ADDR
// for _x = min_x to max_x do
43697: LD_ADDR_VAR 0 5
43701: PUSH
43702: DOUBLE
43703: LD_VAR 0 8
43707: DEC
43708: ST_TO_ADDR
43709: LD_VAR 0 9
43713: PUSH
43714: FOR_TO
43715: IFFALSE 43816
// for _y = min_y to max_y do
43717: LD_ADDR_VAR 0 6
43721: PUSH
43722: DOUBLE
43723: LD_VAR 0 7
43727: DEC
43728: ST_TO_ADDR
43729: LD_VAR 0 10
43733: PUSH
43734: FOR_TO
43735: IFFALSE 43812
// begin if not ValidHex ( _x , _y ) then
43737: LD_VAR 0 5
43741: PPUSH
43742: LD_VAR 0 6
43746: PPUSH
43747: CALL_OW 488
43751: NOT
43752: IFFALSE 43756
// continue ;
43754: GO 43734
// if GetResourceTypeXY ( _x , _y ) then
43756: LD_VAR 0 5
43760: PPUSH
43761: LD_VAR 0 6
43765: PPUSH
43766: CALL_OW 283
43770: IFFALSE 43810
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43772: LD_ADDR_VAR 0 4
43776: PUSH
43777: LD_VAR 0 4
43781: PPUSH
43782: LD_VAR 0 4
43786: PUSH
43787: LD_INT 1
43789: PLUS
43790: PPUSH
43791: LD_VAR 0 5
43795: PUSH
43796: LD_VAR 0 6
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PPUSH
43805: CALL_OW 1
43809: ST_TO_ADDR
// end ;
43810: GO 43734
43812: POP
43813: POP
43814: GO 43714
43816: POP
43817: POP
// end ;
43818: LD_VAR 0 4
43822: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43823: LD_INT 0
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
// if not units then
43833: LD_VAR 0 1
43837: NOT
43838: IFFALSE 43842
// exit ;
43840: GO 44374
// result := UnitFilter ( units , [ f_ok ] ) ;
43842: LD_ADDR_VAR 0 3
43846: PUSH
43847: LD_VAR 0 1
43851: PPUSH
43852: LD_INT 50
43854: PUSH
43855: EMPTY
43856: LIST
43857: PPUSH
43858: CALL_OW 72
43862: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43863: LD_ADDR_VAR 0 8
43867: PUSH
43868: LD_VAR 0 1
43872: PUSH
43873: LD_INT 1
43875: ARRAY
43876: PPUSH
43877: CALL_OW 255
43881: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43882: LD_ADDR_VAR 0 10
43886: PUSH
43887: LD_INT 29
43889: PUSH
43890: LD_INT 91
43892: PUSH
43893: LD_INT 49
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: ST_TO_ADDR
// if not result then
43901: LD_VAR 0 3
43905: NOT
43906: IFFALSE 43910
// exit ;
43908: GO 44374
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43910: LD_ADDR_VAR 0 5
43914: PUSH
43915: LD_INT 81
43917: PUSH
43918: LD_VAR 0 8
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PPUSH
43927: CALL_OW 69
43931: ST_TO_ADDR
// for i in result do
43932: LD_ADDR_VAR 0 4
43936: PUSH
43937: LD_VAR 0 3
43941: PUSH
43942: FOR_IN
43943: IFFALSE 44372
// begin tag := GetTag ( i ) + 1 ;
43945: LD_ADDR_VAR 0 9
43949: PUSH
43950: LD_VAR 0 4
43954: PPUSH
43955: CALL_OW 110
43959: PUSH
43960: LD_INT 1
43962: PLUS
43963: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43964: LD_ADDR_VAR 0 7
43968: PUSH
43969: LD_VAR 0 4
43973: PPUSH
43974: CALL_OW 250
43978: PPUSH
43979: LD_VAR 0 4
43983: PPUSH
43984: CALL_OW 251
43988: PPUSH
43989: LD_INT 4
43991: PPUSH
43992: CALL 43565 0 3
43996: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43997: LD_VAR 0 4
44001: PPUSH
44002: CALL_OW 247
44006: PUSH
44007: LD_INT 2
44009: EQUAL
44010: IFFALSE 44022
44012: PUSH
44013: LD_VAR 0 7
44017: PUSH
44018: LD_INT 2
44020: GREATER
44021: AND
44022: IFFALSE 44042
44024: PUSH
44025: LD_VAR 0 4
44029: PPUSH
44030: CALL_OW 264
44034: PUSH
44035: LD_VAR 0 10
44039: IN
44040: NOT
44041: AND
44042: IFFALSE 44081
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44044: LD_VAR 0 4
44048: PPUSH
44049: LD_VAR 0 7
44053: PUSH
44054: LD_INT 1
44056: ARRAY
44057: PUSH
44058: LD_INT 1
44060: ARRAY
44061: PPUSH
44062: LD_VAR 0 7
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: PPUSH
44075: CALL_OW 116
44079: GO 44370
// if path > tag then
44081: LD_VAR 0 2
44085: PUSH
44086: LD_VAR 0 9
44090: GREATER
44091: IFFALSE 44299
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44093: LD_ADDR_VAR 0 6
44097: PUSH
44098: LD_VAR 0 5
44102: PPUSH
44103: LD_INT 91
44105: PUSH
44106: LD_VAR 0 4
44110: PUSH
44111: LD_INT 8
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: PPUSH
44119: CALL_OW 72
44123: ST_TO_ADDR
// if nearEnemy then
44124: LD_VAR 0 6
44128: IFFALSE 44197
// begin if GetWeapon ( i ) = ru_time_lapser then
44130: LD_VAR 0 4
44134: PPUSH
44135: CALL_OW 264
44139: PUSH
44140: LD_INT 49
44142: EQUAL
44143: IFFALSE 44171
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44145: LD_VAR 0 4
44149: PPUSH
44150: LD_VAR 0 6
44154: PPUSH
44155: LD_VAR 0 4
44159: PPUSH
44160: CALL_OW 74
44164: PPUSH
44165: CALL_OW 112
44169: GO 44195
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44171: LD_VAR 0 4
44175: PPUSH
44176: LD_VAR 0 6
44180: PPUSH
44181: LD_VAR 0 4
44185: PPUSH
44186: CALL_OW 74
44190: PPUSH
44191: CALL 45455 0 2
// end else
44195: GO 44297
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44197: LD_VAR 0 4
44201: PPUSH
44202: LD_VAR 0 2
44206: PUSH
44207: LD_VAR 0 9
44211: ARRAY
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: PPUSH
44217: LD_VAR 0 2
44221: PUSH
44222: LD_VAR 0 9
44226: ARRAY
44227: PUSH
44228: LD_INT 2
44230: ARRAY
44231: PPUSH
44232: CALL_OW 297
44236: PUSH
44237: LD_INT 6
44239: GREATER
44240: IFFALSE 44283
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44242: LD_VAR 0 4
44246: PPUSH
44247: LD_VAR 0 2
44251: PUSH
44252: LD_VAR 0 9
44256: ARRAY
44257: PUSH
44258: LD_INT 1
44260: ARRAY
44261: PPUSH
44262: LD_VAR 0 2
44266: PUSH
44267: LD_VAR 0 9
44271: ARRAY
44272: PUSH
44273: LD_INT 2
44275: ARRAY
44276: PPUSH
44277: CALL_OW 114
44281: GO 44297
// SetTag ( i , tag ) ;
44283: LD_VAR 0 4
44287: PPUSH
44288: LD_VAR 0 9
44292: PPUSH
44293: CALL_OW 109
// end else
44297: GO 44370
// if enemy then
44299: LD_VAR 0 5
44303: IFFALSE 44370
// begin if GetWeapon ( i ) = ru_time_lapser then
44305: LD_VAR 0 4
44309: PPUSH
44310: CALL_OW 264
44314: PUSH
44315: LD_INT 49
44317: EQUAL
44318: IFFALSE 44346
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44320: LD_VAR 0 4
44324: PPUSH
44325: LD_VAR 0 5
44329: PPUSH
44330: LD_VAR 0 4
44334: PPUSH
44335: CALL_OW 74
44339: PPUSH
44340: CALL_OW 112
44344: GO 44370
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44346: LD_VAR 0 4
44350: PPUSH
44351: LD_VAR 0 5
44355: PPUSH
44356: LD_VAR 0 4
44360: PPUSH
44361: CALL_OW 74
44365: PPUSH
44366: CALL 45455 0 2
// end ; end ;
44370: GO 43942
44372: POP
44373: POP
// end ;
44374: LD_VAR 0 3
44378: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44379: LD_INT 0
44381: PPUSH
44382: PPUSH
44383: PPUSH
// if not unit or IsInUnit ( unit ) then
44384: LD_VAR 0 1
44388: NOT
44389: IFTRUE 44402
44391: PUSH
44392: LD_VAR 0 1
44396: PPUSH
44397: CALL_OW 310
44401: OR
44402: IFFALSE 44406
// exit ;
44404: GO 44497
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44406: LD_ADDR_VAR 0 4
44410: PUSH
44411: LD_VAR 0 1
44415: PPUSH
44416: CALL_OW 250
44420: PPUSH
44421: LD_VAR 0 2
44425: PPUSH
44426: LD_INT 1
44428: PPUSH
44429: CALL_OW 272
44433: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44434: LD_ADDR_VAR 0 5
44438: PUSH
44439: LD_VAR 0 1
44443: PPUSH
44444: CALL_OW 251
44448: PPUSH
44449: LD_VAR 0 2
44453: PPUSH
44454: LD_INT 1
44456: PPUSH
44457: CALL_OW 273
44461: ST_TO_ADDR
// if ValidHex ( x , y ) then
44462: LD_VAR 0 4
44466: PPUSH
44467: LD_VAR 0 5
44471: PPUSH
44472: CALL_OW 488
44476: IFFALSE 44497
// ComTurnXY ( unit , x , y ) ;
44478: LD_VAR 0 1
44482: PPUSH
44483: LD_VAR 0 4
44487: PPUSH
44488: LD_VAR 0 5
44492: PPUSH
44493: CALL_OW 118
// end ;
44497: LD_VAR 0 3
44501: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44502: LD_INT 0
44504: PPUSH
44505: PPUSH
// result := false ;
44506: LD_ADDR_VAR 0 3
44510: PUSH
44511: LD_INT 0
44513: ST_TO_ADDR
// if not units then
44514: LD_VAR 0 2
44518: NOT
44519: IFFALSE 44523
// exit ;
44521: GO 44568
// for i in units do
44523: LD_ADDR_VAR 0 4
44527: PUSH
44528: LD_VAR 0 2
44532: PUSH
44533: FOR_IN
44534: IFFALSE 44566
// if See ( side , i ) then
44536: LD_VAR 0 1
44540: PPUSH
44541: LD_VAR 0 4
44545: PPUSH
44546: CALL_OW 292
44550: IFFALSE 44564
// begin result := true ;
44552: LD_ADDR_VAR 0 3
44556: PUSH
44557: LD_INT 1
44559: ST_TO_ADDR
// exit ;
44560: POP
44561: POP
44562: GO 44568
// end ;
44564: GO 44533
44566: POP
44567: POP
// end ;
44568: LD_VAR 0 3
44572: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44573: LD_INT 0
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
// if not unit or not points then
44579: LD_VAR 0 1
44583: NOT
44584: IFTRUE 44593
44586: PUSH
44587: LD_VAR 0 2
44591: NOT
44592: OR
44593: IFFALSE 44597
// exit ;
44595: GO 44687
// dist := 99999 ;
44597: LD_ADDR_VAR 0 5
44601: PUSH
44602: LD_INT 99999
44604: ST_TO_ADDR
// for i in points do
44605: LD_ADDR_VAR 0 4
44609: PUSH
44610: LD_VAR 0 2
44614: PUSH
44615: FOR_IN
44616: IFFALSE 44685
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44618: LD_ADDR_VAR 0 6
44622: PUSH
44623: LD_VAR 0 1
44627: PPUSH
44628: LD_VAR 0 4
44632: PUSH
44633: LD_INT 1
44635: ARRAY
44636: PPUSH
44637: LD_VAR 0 4
44641: PUSH
44642: LD_INT 2
44644: ARRAY
44645: PPUSH
44646: CALL_OW 297
44650: ST_TO_ADDR
// if tmpDist < dist then
44651: LD_VAR 0 6
44655: PUSH
44656: LD_VAR 0 5
44660: LESS
44661: IFFALSE 44683
// begin result := i ;
44663: LD_ADDR_VAR 0 3
44667: PUSH
44668: LD_VAR 0 4
44672: ST_TO_ADDR
// dist := tmpDist ;
44673: LD_ADDR_VAR 0 5
44677: PUSH
44678: LD_VAR 0 6
44682: ST_TO_ADDR
// end ; end ;
44683: GO 44615
44685: POP
44686: POP
// end ;
44687: LD_VAR 0 3
44691: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44692: LD_INT 0
44694: PPUSH
// uc_side := side ;
44695: LD_ADDR_OWVAR 20
44699: PUSH
44700: LD_VAR 0 1
44704: ST_TO_ADDR
// uc_nation := 3 ;
44705: LD_ADDR_OWVAR 21
44709: PUSH
44710: LD_INT 3
44712: ST_TO_ADDR
// vc_chassis := 25 ;
44713: LD_ADDR_OWVAR 37
44717: PUSH
44718: LD_INT 25
44720: ST_TO_ADDR
// vc_engine := engine_siberite ;
44721: LD_ADDR_OWVAR 39
44725: PUSH
44726: LD_INT 3
44728: ST_TO_ADDR
// vc_control := control_computer ;
44729: LD_ADDR_OWVAR 38
44733: PUSH
44734: LD_INT 3
44736: ST_TO_ADDR
// vc_weapon := 59 ;
44737: LD_ADDR_OWVAR 40
44741: PUSH
44742: LD_INT 59
44744: ST_TO_ADDR
// result := CreateVehicle ;
44745: LD_ADDR_VAR 0 5
44749: PUSH
44750: CALL_OW 45
44754: ST_TO_ADDR
// SetDir ( result , d ) ;
44755: LD_VAR 0 5
44759: PPUSH
44760: LD_VAR 0 4
44764: PPUSH
44765: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44769: LD_VAR 0 5
44773: PPUSH
44774: LD_VAR 0 2
44778: PPUSH
44779: LD_VAR 0 3
44783: PPUSH
44784: LD_INT 0
44786: PPUSH
44787: CALL_OW 48
// end ;
44791: LD_VAR 0 5
44795: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44796: LD_INT 0
44798: PPUSH
44799: PPUSH
44800: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44801: LD_ADDR_VAR 0 2
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44824: LD_VAR 0 1
44828: NOT
44829: IFTRUE 44862
44831: PUSH
44832: LD_VAR 0 1
44836: PPUSH
44837: CALL_OW 264
44841: PUSH
44842: LD_INT 12
44844: PUSH
44845: LD_INT 51
44847: PUSH
44848: LD_INT 32
44850: PUSH
44851: LD_INT 89
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: IN
44860: NOT
44861: OR
44862: IFFALSE 44866
// exit ;
44864: GO 44964
// for i := 1 to 3 do
44866: LD_ADDR_VAR 0 3
44870: PUSH
44871: DOUBLE
44872: LD_INT 1
44874: DEC
44875: ST_TO_ADDR
44876: LD_INT 3
44878: PUSH
44879: FOR_TO
44880: IFFALSE 44962
// begin tmp := GetCargo ( cargo , i ) ;
44882: LD_ADDR_VAR 0 4
44886: PUSH
44887: LD_VAR 0 1
44891: PPUSH
44892: LD_VAR 0 3
44896: PPUSH
44897: CALL_OW 289
44901: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44902: LD_ADDR_VAR 0 2
44906: PUSH
44907: LD_VAR 0 2
44911: PPUSH
44912: LD_VAR 0 3
44916: PPUSH
44917: LD_VAR 0 4
44921: PPUSH
44922: CALL_OW 1
44926: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44927: LD_ADDR_VAR 0 2
44931: PUSH
44932: LD_VAR 0 2
44936: PPUSH
44937: LD_INT 4
44939: PPUSH
44940: LD_VAR 0 2
44944: PUSH
44945: LD_INT 4
44947: ARRAY
44948: PUSH
44949: LD_VAR 0 4
44953: PLUS
44954: PPUSH
44955: CALL_OW 1
44959: ST_TO_ADDR
// end ;
44960: GO 44879
44962: POP
44963: POP
// end ;
44964: LD_VAR 0 2
44968: RET
// export function Length ( array ) ; begin
44969: LD_INT 0
44971: PPUSH
// result := array + 0 ;
44972: LD_ADDR_VAR 0 2
44976: PUSH
44977: LD_VAR 0 1
44981: PUSH
44982: LD_INT 0
44984: PLUS
44985: ST_TO_ADDR
// end ;
44986: LD_VAR 0 2
44990: RET
// export function PrepareArray ( array ) ; begin
44991: LD_INT 0
44993: PPUSH
// result := array diff 0 ;
44994: LD_ADDR_VAR 0 2
44998: PUSH
44999: LD_VAR 0 1
45003: PUSH
45004: LD_INT 0
45006: DIFF
45007: ST_TO_ADDR
// if not result [ 1 ] then
45008: LD_VAR 0 2
45012: PUSH
45013: LD_INT 1
45015: ARRAY
45016: NOT
45017: IFFALSE 45037
// result := Delete ( result , 1 ) ;
45019: LD_ADDR_VAR 0 2
45023: PUSH
45024: LD_VAR 0 2
45028: PPUSH
45029: LD_INT 1
45031: PPUSH
45032: CALL_OW 3
45036: ST_TO_ADDR
// end ;
45037: LD_VAR 0 2
45041: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45042: LD_INT 0
45044: PPUSH
45045: PPUSH
45046: PPUSH
45047: PPUSH
// sibRocketRange := 25 ;
45048: LD_ADDR_VAR 0 6
45052: PUSH
45053: LD_INT 25
45055: ST_TO_ADDR
// result := false ;
45056: LD_ADDR_VAR 0 4
45060: PUSH
45061: LD_INT 0
45063: ST_TO_ADDR
// for i := 0 to 5 do
45064: LD_ADDR_VAR 0 5
45068: PUSH
45069: DOUBLE
45070: LD_INT 0
45072: DEC
45073: ST_TO_ADDR
45074: LD_INT 5
45076: PUSH
45077: FOR_TO
45078: IFFALSE 45145
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45080: LD_VAR 0 1
45084: PPUSH
45085: LD_VAR 0 5
45089: PPUSH
45090: LD_VAR 0 6
45094: PPUSH
45095: CALL_OW 272
45099: PPUSH
45100: LD_VAR 0 2
45104: PPUSH
45105: LD_VAR 0 5
45109: PPUSH
45110: LD_VAR 0 6
45114: PPUSH
45115: CALL_OW 273
45119: PPUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: CALL_OW 309
45129: IFFALSE 45143
// begin result := true ;
45131: LD_ADDR_VAR 0 4
45135: PUSH
45136: LD_INT 1
45138: ST_TO_ADDR
// exit ;
45139: POP
45140: POP
45141: GO 45147
// end ;
45143: GO 45077
45145: POP
45146: POP
// end ;
45147: LD_VAR 0 4
45151: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45152: LD_INT 0
45154: PPUSH
45155: PPUSH
45156: PPUSH
// if btype = b_depot then
45157: LD_VAR 0 2
45161: PUSH
45162: LD_INT 0
45164: EQUAL
45165: IFFALSE 45177
// begin result := true ;
45167: LD_ADDR_VAR 0 3
45171: PUSH
45172: LD_INT 1
45174: ST_TO_ADDR
// exit ;
45175: GO 45297
// end ; pom := GetBase ( depot ) ;
45177: LD_ADDR_VAR 0 4
45181: PUSH
45182: LD_VAR 0 1
45186: PPUSH
45187: CALL_OW 274
45191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45192: LD_ADDR_VAR 0 5
45196: PUSH
45197: LD_VAR 0 2
45201: PPUSH
45202: LD_VAR 0 1
45206: PPUSH
45207: CALL_OW 248
45211: PPUSH
45212: CALL_OW 450
45216: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45217: LD_ADDR_VAR 0 3
45221: PUSH
45222: LD_VAR 0 4
45226: PPUSH
45227: LD_INT 1
45229: PPUSH
45230: CALL_OW 275
45234: PUSH
45235: LD_VAR 0 5
45239: PUSH
45240: LD_INT 1
45242: ARRAY
45243: GREATEREQUAL
45244: IFFALSE 45270
45246: PUSH
45247: LD_VAR 0 4
45251: PPUSH
45252: LD_INT 2
45254: PPUSH
45255: CALL_OW 275
45259: PUSH
45260: LD_VAR 0 5
45264: PUSH
45265: LD_INT 2
45267: ARRAY
45268: GREATEREQUAL
45269: AND
45270: IFFALSE 45296
45272: PUSH
45273: LD_VAR 0 4
45277: PPUSH
45278: LD_INT 3
45280: PPUSH
45281: CALL_OW 275
45285: PUSH
45286: LD_VAR 0 5
45290: PUSH
45291: LD_INT 3
45293: ARRAY
45294: GREATEREQUAL
45295: AND
45296: ST_TO_ADDR
// end ;
45297: LD_VAR 0 3
45301: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45302: LD_INT 0
45304: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45305: LD_VAR 0 1
45309: PPUSH
45310: LD_VAR 0 2
45314: PPUSH
45315: LD_INT 0
45317: PPUSH
45318: LD_INT 0
45320: PPUSH
45321: LD_INT 1
45323: PPUSH
45324: LD_INT 0
45326: PPUSH
45327: CALL_OW 587
// end ;
45331: LD_VAR 0 3
45335: RET
// export function CenterOnNow ( unit ) ; begin
45336: LD_INT 0
45338: PPUSH
// result := IsInUnit ( unit ) ;
45339: LD_ADDR_VAR 0 2
45343: PUSH
45344: LD_VAR 0 1
45348: PPUSH
45349: CALL_OW 310
45353: ST_TO_ADDR
// if not result then
45354: LD_VAR 0 2
45358: NOT
45359: IFFALSE 45371
// result := unit ;
45361: LD_ADDR_VAR 0 2
45365: PUSH
45366: LD_VAR 0 1
45370: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45371: LD_VAR 0 1
45375: PPUSH
45376: CALL_OW 87
// end ;
45380: LD_VAR 0 2
45384: RET
// export function ComMoveHex ( unit , hex ) ; begin
45385: LD_INT 0
45387: PPUSH
// if not hex then
45388: LD_VAR 0 2
45392: NOT
45393: IFFALSE 45397
// exit ;
45395: GO 45450
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45397: LD_VAR 0 2
45401: PUSH
45402: LD_INT 1
45404: ARRAY
45405: PPUSH
45406: LD_VAR 0 2
45410: PUSH
45411: LD_INT 2
45413: ARRAY
45414: PPUSH
45415: CALL_OW 428
45419: IFFALSE 45423
// exit ;
45421: GO 45450
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45423: LD_VAR 0 1
45427: PPUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_INT 1
45435: ARRAY
45436: PPUSH
45437: LD_VAR 0 2
45441: PUSH
45442: LD_INT 2
45444: ARRAY
45445: PPUSH
45446: CALL_OW 111
// end ;
45450: LD_VAR 0 3
45454: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45455: LD_INT 0
45457: PPUSH
45458: PPUSH
45459: PPUSH
// if not unit or not enemy then
45460: LD_VAR 0 1
45464: NOT
45465: IFTRUE 45474
45467: PUSH
45468: LD_VAR 0 2
45472: NOT
45473: OR
45474: IFFALSE 45478
// exit ;
45476: GO 45604
// x := GetX ( enemy ) ;
45478: LD_ADDR_VAR 0 4
45482: PUSH
45483: LD_VAR 0 2
45487: PPUSH
45488: CALL_OW 250
45492: ST_TO_ADDR
// y := GetY ( enemy ) ;
45493: LD_ADDR_VAR 0 5
45497: PUSH
45498: LD_VAR 0 2
45502: PPUSH
45503: CALL_OW 251
45507: ST_TO_ADDR
// if ValidHex ( x , y ) then
45508: LD_VAR 0 4
45512: PPUSH
45513: LD_VAR 0 5
45517: PPUSH
45518: CALL_OW 488
45522: IFFALSE 45604
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45524: LD_VAR 0 2
45528: PPUSH
45529: CALL_OW 247
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: IN
45544: IFTRUE 45567
45546: PUSH
45547: LD_VAR 0 1
45551: PPUSH
45552: CALL_OW 255
45556: PPUSH
45557: LD_VAR 0 2
45561: PPUSH
45562: CALL_OW 292
45566: OR
45567: IFFALSE 45585
// ComAttackUnit ( unit , enemy ) else
45569: LD_VAR 0 1
45573: PPUSH
45574: LD_VAR 0 2
45578: PPUSH
45579: CALL_OW 115
45583: GO 45604
// ComAgressiveMove ( unit , x , y ) ;
45585: LD_VAR 0 1
45589: PPUSH
45590: LD_VAR 0 4
45594: PPUSH
45595: LD_VAR 0 5
45599: PPUSH
45600: CALL_OW 114
// end ;
45604: LD_VAR 0 3
45608: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45609: LD_INT 0
45611: PPUSH
45612: PPUSH
45613: PPUSH
// list := AreaToList ( area , 0 ) ;
45614: LD_ADDR_VAR 0 5
45618: PUSH
45619: LD_VAR 0 1
45623: PPUSH
45624: LD_INT 0
45626: PPUSH
45627: CALL_OW 517
45631: ST_TO_ADDR
// if not list then
45632: LD_VAR 0 5
45636: NOT
45637: IFFALSE 45641
// exit ;
45639: GO 45771
// if all then
45641: LD_VAR 0 2
45645: IFFALSE 45733
// begin for i := 1 to list [ 1 ] do
45647: LD_ADDR_VAR 0 4
45651: PUSH
45652: DOUBLE
45653: LD_INT 1
45655: DEC
45656: ST_TO_ADDR
45657: LD_VAR 0 5
45661: PUSH
45662: LD_INT 1
45664: ARRAY
45665: PUSH
45666: FOR_TO
45667: IFFALSE 45729
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45669: LD_ADDR_VAR 0 3
45673: PUSH
45674: LD_VAR 0 3
45678: PPUSH
45679: LD_VAR 0 3
45683: PUSH
45684: LD_INT 1
45686: PLUS
45687: PPUSH
45688: LD_VAR 0 5
45692: PUSH
45693: LD_INT 1
45695: ARRAY
45696: PUSH
45697: LD_VAR 0 4
45701: ARRAY
45702: PUSH
45703: LD_VAR 0 5
45707: PUSH
45708: LD_INT 2
45710: ARRAY
45711: PUSH
45712: LD_VAR 0 4
45716: ARRAY
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PPUSH
45722: CALL_OW 1
45726: ST_TO_ADDR
45727: GO 45666
45729: POP
45730: POP
// exit ;
45731: GO 45771
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45733: LD_ADDR_VAR 0 3
45737: PUSH
45738: LD_VAR 0 5
45742: PUSH
45743: LD_INT 1
45745: ARRAY
45746: PUSH
45747: LD_INT 1
45749: ARRAY
45750: PUSH
45751: LD_VAR 0 5
45755: PUSH
45756: LD_INT 2
45758: ARRAY
45759: PUSH
45760: LD_INT 1
45762: ARRAY
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: ST_TO_ADDR
// end ;
45771: LD_VAR 0 3
45775: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45776: LD_INT 0
45778: PPUSH
45779: PPUSH
// list := AreaToList ( area , 0 ) ;
45780: LD_ADDR_VAR 0 4
45784: PUSH
45785: LD_VAR 0 1
45789: PPUSH
45790: LD_INT 0
45792: PPUSH
45793: CALL_OW 517
45797: ST_TO_ADDR
// if not list then
45798: LD_VAR 0 4
45802: NOT
45803: IFFALSE 45807
// exit ;
45805: GO 45848
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45807: LD_ADDR_VAR 0 3
45811: PUSH
45812: LD_VAR 0 4
45816: PUSH
45817: LD_INT 1
45819: ARRAY
45820: PUSH
45821: LD_INT 1
45823: ARRAY
45824: PUSH
45825: LD_VAR 0 4
45829: PUSH
45830: LD_INT 2
45832: ARRAY
45833: PUSH
45834: LD_INT 1
45836: ARRAY
45837: PUSH
45838: LD_VAR 0 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: ST_TO_ADDR
// end ;
45848: LD_VAR 0 3
45852: RET
// export function First ( array ) ; begin
45853: LD_INT 0
45855: PPUSH
// if not array then
45856: LD_VAR 0 1
45860: NOT
45861: IFFALSE 45865
// exit ;
45863: GO 45879
// result := array [ 1 ] ;
45865: LD_ADDR_VAR 0 2
45869: PUSH
45870: LD_VAR 0 1
45874: PUSH
45875: LD_INT 1
45877: ARRAY
45878: ST_TO_ADDR
// end ;
45879: LD_VAR 0 2
45883: RET
// export function Last ( array ) ; begin
45884: LD_INT 0
45886: PPUSH
// if not array then
45887: LD_VAR 0 1
45891: NOT
45892: IFFALSE 45896
// exit ;
45894: GO 45912
// result := array [ array ] ;
45896: LD_ADDR_VAR 0 2
45900: PUSH
45901: LD_VAR 0 1
45905: PUSH
45906: LD_VAR 0 1
45910: ARRAY
45911: ST_TO_ADDR
// end ;
45912: LD_VAR 0 2
45916: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45917: LD_INT 0
45919: PPUSH
45920: PPUSH
// result := [ ] ;
45921: LD_ADDR_VAR 0 5
45925: PUSH
45926: EMPTY
45927: ST_TO_ADDR
// if not array then
45928: LD_VAR 0 1
45932: NOT
45933: IFFALSE 45937
// exit ;
45935: GO 46049
// for i := 1 to array do
45937: LD_ADDR_VAR 0 6
45941: PUSH
45942: DOUBLE
45943: LD_INT 1
45945: DEC
45946: ST_TO_ADDR
45947: LD_VAR 0 1
45951: PUSH
45952: FOR_TO
45953: IFFALSE 46047
// if array [ i ] [ index ] = value then
45955: LD_VAR 0 1
45959: PUSH
45960: LD_VAR 0 6
45964: ARRAY
45965: PUSH
45966: LD_VAR 0 2
45970: ARRAY
45971: PUSH
45972: LD_VAR 0 3
45976: EQUAL
45977: IFFALSE 46045
// begin if indexColumn then
45979: LD_VAR 0 4
45983: IFFALSE 46019
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45985: LD_ADDR_VAR 0 5
45989: PUSH
45990: LD_VAR 0 5
45994: PPUSH
45995: LD_VAR 0 1
45999: PUSH
46000: LD_VAR 0 6
46004: ARRAY
46005: PUSH
46006: LD_VAR 0 4
46010: ARRAY
46011: PPUSH
46012: CALL 41057 0 2
46016: ST_TO_ADDR
46017: GO 46045
// result := Join ( result , array [ i ] ) ;
46019: LD_ADDR_VAR 0 5
46023: PUSH
46024: LD_VAR 0 5
46028: PPUSH
46029: LD_VAR 0 1
46033: PUSH
46034: LD_VAR 0 6
46038: ARRAY
46039: PPUSH
46040: CALL 41057 0 2
46044: ST_TO_ADDR
// end ;
46045: GO 45952
46047: POP
46048: POP
// end ;
46049: LD_VAR 0 5
46053: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46054: LD_INT 0
46056: PPUSH
// if not vehicles or not parkingPoint then
46057: LD_VAR 0 1
46061: NOT
46062: IFTRUE 46071
46064: PUSH
46065: LD_VAR 0 2
46069: NOT
46070: OR
46071: IFFALSE 46075
// exit ;
46073: GO 46173
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46075: LD_ADDR_VAR 0 1
46079: PUSH
46080: LD_VAR 0 1
46084: PPUSH
46085: LD_INT 50
46087: PUSH
46088: EMPTY
46089: LIST
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: LD_INT 92
46096: PUSH
46097: LD_VAR 0 2
46101: PUSH
46102: LD_INT 1
46104: ARRAY
46105: PUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_INT 2
46113: ARRAY
46114: PUSH
46115: LD_INT 8
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PPUSH
46132: CALL_OW 72
46136: ST_TO_ADDR
// if not vehicles then
46137: LD_VAR 0 1
46141: NOT
46142: IFFALSE 46146
// exit ;
46144: GO 46173
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46146: LD_VAR 0 1
46150: PPUSH
46151: LD_VAR 0 2
46155: PUSH
46156: LD_INT 1
46158: ARRAY
46159: PPUSH
46160: LD_VAR 0 2
46164: PUSH
46165: LD_INT 2
46167: ARRAY
46168: PPUSH
46169: CALL_OW 111
// end ;
46173: LD_VAR 0 3
46177: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46178: LD_INT 0
46180: PPUSH
46181: PPUSH
46182: PPUSH
// if not side or not area then
46183: LD_VAR 0 1
46187: NOT
46188: IFTRUE 46197
46190: PUSH
46191: LD_VAR 0 2
46195: NOT
46196: OR
46197: IFFALSE 46201
// exit ;
46199: GO 46320
// tmp := AreaToList ( area , 0 ) ;
46201: LD_ADDR_VAR 0 5
46205: PUSH
46206: LD_VAR 0 2
46210: PPUSH
46211: LD_INT 0
46213: PPUSH
46214: CALL_OW 517
46218: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46219: LD_ADDR_VAR 0 4
46223: PUSH
46224: DOUBLE
46225: LD_INT 1
46227: DEC
46228: ST_TO_ADDR
46229: LD_VAR 0 5
46233: PUSH
46234: LD_INT 1
46236: ARRAY
46237: PUSH
46238: FOR_TO
46239: IFFALSE 46318
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46241: LD_VAR 0 5
46245: PUSH
46246: LD_INT 1
46248: ARRAY
46249: PUSH
46250: LD_VAR 0 4
46254: ARRAY
46255: PPUSH
46256: LD_VAR 0 5
46260: PUSH
46261: LD_INT 2
46263: ARRAY
46264: PUSH
46265: LD_VAR 0 4
46269: ARRAY
46270: PPUSH
46271: CALL_OW 351
46275: IFFALSE 46316
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46277: LD_VAR 0 5
46281: PUSH
46282: LD_INT 1
46284: ARRAY
46285: PUSH
46286: LD_VAR 0 4
46290: ARRAY
46291: PPUSH
46292: LD_VAR 0 5
46296: PUSH
46297: LD_INT 2
46299: ARRAY
46300: PUSH
46301: LD_VAR 0 4
46305: ARRAY
46306: PPUSH
46307: LD_VAR 0 1
46311: PPUSH
46312: CALL_OW 244
// end ;
46316: GO 46238
46318: POP
46319: POP
// end ;
46320: LD_VAR 0 3
46324: RET
// export function UniqueArray ( array ) ; var i ; begin
46325: LD_INT 0
46327: PPUSH
46328: PPUSH
// result := [ ] ;
46329: LD_ADDR_VAR 0 2
46333: PUSH
46334: EMPTY
46335: ST_TO_ADDR
// if not array then
46336: LD_VAR 0 1
46340: NOT
46341: IFFALSE 46345
// exit ;
46343: GO 46406
// for i := 1 to array do
46345: LD_ADDR_VAR 0 3
46349: PUSH
46350: DOUBLE
46351: LD_INT 1
46353: DEC
46354: ST_TO_ADDR
46355: LD_VAR 0 1
46359: PUSH
46360: FOR_TO
46361: IFFALSE 46404
// if not array [ i ] in result then
46363: LD_VAR 0 1
46367: PUSH
46368: LD_VAR 0 3
46372: ARRAY
46373: PUSH
46374: LD_VAR 0 2
46378: IN
46379: NOT
46380: IFFALSE 46402
// result := Join ( result , i ) ;
46382: LD_ADDR_VAR 0 2
46386: PUSH
46387: LD_VAR 0 2
46391: PPUSH
46392: LD_VAR 0 3
46396: PPUSH
46397: CALL 41057 0 2
46401: ST_TO_ADDR
46402: GO 46360
46404: POP
46405: POP
// end ; end_of_file
46406: LD_VAR 0 2
46410: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46411: LD_INT 0
46413: PPUSH
46414: PPUSH
// disable ( mpActive ) ;
46415: LD_INT 100
46417: DISABLE_MARKED
// disable ( mpWin ) ;
46418: LD_INT 101
46420: DISABLE_MARKED
// disable ( mpLose ) ;
46421: LD_INT 102
46423: DISABLE_MARKED
// mpGameType := 0 ;
46424: LD_ADDR_EXP 1
46428: PUSH
46429: LD_INT 0
46431: ST_TO_ADDR
// mpGameSettings := [ ] ;
46432: LD_ADDR_EXP 4
46436: PUSH
46437: EMPTY
46438: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46439: LD_ADDR_EXP 2
46443: PUSH
46444: EMPTY
46445: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46446: LD_ADDR_EXP 3
46450: PUSH
46451: EMPTY
46452: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46453: LD_ADDR_EXP 27
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46468: LD_ADDR_EXP 10
46472: PUSH
46473: EMPTY
46474: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46475: LD_ADDR_EXP 11
46479: PUSH
46480: EMPTY
46481: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46482: LD_ADDR_EXP 39
46486: PUSH
46487: EMPTY
46488: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46489: LD_ADDR_EXP 40
46493: PUSH
46494: EMPTY
46495: ST_TO_ADDR
// mpDepots := [ ] ;
46496: LD_ADDR_EXP 12
46500: PUSH
46501: EMPTY
46502: ST_TO_ADDR
// mpBuildings := [ ] ;
46503: LD_ADDR_EXP 15
46507: PUSH
46508: EMPTY
46509: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46510: LD_ADDR_EXP 16
46514: PUSH
46515: EMPTY
46516: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46517: LD_ADDR_EXP 17
46521: PUSH
46522: EMPTY
46523: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46524: LD_ADDR_EXP 18
46528: PUSH
46529: EMPTY
46530: ST_TO_ADDR
// mpStartingResources := [ ] ;
46531: LD_ADDR_EXP 13
46535: PUSH
46536: EMPTY
46537: ST_TO_ADDR
// mpStartPos := [ ] ;
46538: LD_ADDR_EXP 19
46542: PUSH
46543: EMPTY
46544: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46545: LD_ADDR_EXP 20
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46554: LD_ADDR_EXP 21
46558: PUSH
46559: EMPTY
46560: ST_TO_ADDR
// mpApemans := [ ] ;
46561: LD_ADDR_EXP 28
46565: PUSH
46566: EMPTY
46567: ST_TO_ADDR
// mpApemansArea := [ ] ;
46568: LD_ADDR_EXP 29
46572: PUSH
46573: EMPTY
46574: ST_TO_ADDR
// mpRespawn := [ ] ;
46575: LD_ADDR_EXP 31
46579: PUSH
46580: EMPTY
46581: ST_TO_ADDR
// mpKingArea := 0 ;
46582: LD_ADDR_EXP 32
46586: PUSH
46587: LD_INT 0
46589: ST_TO_ADDR
// mpPoints := [ ] ;
46590: LD_ADDR_EXP 33
46594: PUSH
46595: EMPTY
46596: ST_TO_ADDR
// mpVehicles := 0 ;
46597: LD_ADDR_EXP 34
46601: PUSH
46602: LD_INT 0
46604: ST_TO_ADDR
// mpShipments := 0 ;
46605: LD_ADDR_EXP 25
46609: PUSH
46610: LD_INT 0
46612: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46613: LD_ADDR_EXP 38
46617: PUSH
46618: EMPTY
46619: PUSH
46620: EMPTY
46621: PUSH
46622: EMPTY
46623: PUSH
46624: EMPTY
46625: PUSH
46626: EMPTY
46627: PUSH
46628: EMPTY
46629: PUSH
46630: EMPTY
46631: PUSH
46632: EMPTY
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46644: LD_ADDR_EXP 30
46648: PUSH
46649: EMPTY
46650: PUSH
46651: EMPTY
46652: PUSH
46653: EMPTY
46654: PUSH
46655: EMPTY
46656: PUSH
46657: EMPTY
46658: PUSH
46659: EMPTY
46660: PUSH
46661: EMPTY
46662: PUSH
46663: EMPTY
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// mpEmissions := 0 ;
46675: LD_ADDR_EXP 35
46679: PUSH
46680: LD_INT 0
46682: ST_TO_ADDR
// mpTeleports := 0 ;
46683: LD_ADDR_EXP 41
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// mpArtifacts := 0 ;
46691: LD_ADDR_EXP 42
46695: PUSH
46696: LD_INT 0
46698: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46699: LD_ADDR_EXP 43
46703: PUSH
46704: LD_INT 0
46706: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46707: LD_ADDR_EXP 23
46711: PUSH
46712: LD_INT 3
46714: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46715: LD_ADDR_EXP 22
46719: PUSH
46720: LD_INT 15
46722: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46723: LD_ADDR_EXP 36
46727: PUSH
46728: LD_INT 0
46730: ST_TO_ADDR
// mpGameActive := false ;
46731: LD_ADDR_EXP 37
46735: PUSH
46736: LD_INT 0
46738: ST_TO_ADDR
// mpBlockRespThread := false ;
46739: LD_ADDR_EXP 44
46743: PUSH
46744: LD_INT 0
46746: ST_TO_ADDR
// for i := 1 to 32 do
46747: LD_ADDR_VAR 0 2
46751: PUSH
46752: DOUBLE
46753: LD_INT 1
46755: DEC
46756: ST_TO_ADDR
46757: LD_INT 32
46759: PUSH
46760: FOR_TO
46761: IFFALSE 46788
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46763: LD_ADDR_EXP 4
46767: PUSH
46768: LD_EXP 4
46772: PPUSH
46773: LD_VAR 0 2
46777: PPUSH
46778: LD_INT 0
46780: PPUSH
46781: CALL_OW 1
46785: ST_TO_ADDR
46786: GO 46760
46788: POP
46789: POP
// end ;
46790: LD_VAR 0 1
46794: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46795: LD_INT 0
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
46811: LD_ADDR_VAR 0 14
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: LD_INT 5
46827: PUSH
46828: LD_INT 6
46830: PUSH
46831: LD_INT 7
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// for i in gameTypes do
46842: LD_ADDR_VAR 0 2
46846: PUSH
46847: LD_VAR 0 14
46851: PUSH
46852: FOR_IN
46853: IFFALSE 46862
// disable ( i ) ;
46855: LD_VAR 0 2
46859: DISABLE_MARKED
46860: GO 46852
46862: POP
46863: POP
// if Multiplayer then
46864: LD_OWVAR 4
46868: IFFALSE 47052
// begin mpGameType := mp_game_type ;
46870: LD_ADDR_EXP 1
46874: PUSH
46875: LD_OWVAR 6
46879: ST_TO_ADDR
// your_side := mp_player_side ;
46880: LD_ADDR_OWVAR 2
46884: PUSH
46885: LD_OWVAR 7
46889: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46890: LD_ADDR_EXP 5
46894: PUSH
46895: LD_OWVAR 17
46899: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46900: LD_ADDR_EXP 6
46904: PUSH
46905: LD_OWVAR 15
46909: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46910: LD_ADDR_EXP 7
46914: PUSH
46915: LD_OWVAR 16
46919: ST_TO_ADDR
// mpTeams := mp_teams ;
46920: LD_ADDR_EXP 8
46924: PUSH
46925: LD_OWVAR 12
46929: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46930: LD_ADDR_VAR 0 2
46934: PUSH
46935: DOUBLE
46936: LD_INT 1
46938: DEC
46939: ST_TO_ADDR
46940: LD_EXP 2
46944: PPUSH
46945: CALL 5091 0 1
46949: PUSH
46950: FOR_TO
46951: IFFALSE 47027
// begin setting := mpGameSettingsKeys [ i ] ;
46953: LD_ADDR_VAR 0 12
46957: PUSH
46958: LD_EXP 2
46962: PUSH
46963: LD_VAR 0 2
46967: ARRAY
46968: ST_TO_ADDR
// if setting then
46969: LD_VAR 0 12
46973: IFFALSE 47025
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46975: LD_ADDR_EXP 4
46979: PUSH
46980: LD_EXP 4
46984: PPUSH
46985: LD_VAR 0 2
46989: PPUSH
46990: LD_EXP 3
46994: PUSH
46995: LD_VAR 0 2
46999: ARRAY
47000: PUSH
47001: LD_VAR 0 2
47005: PUSH
47006: LD_INT 1
47008: MINUS
47009: PPUSH
47010: CALL_OW 426
47014: PUSH
47015: LD_INT 1
47017: PLUS
47018: ARRAY
47019: PPUSH
47020: CALL_OW 1
47024: ST_TO_ADDR
// end ;
47025: GO 46950
47027: POP
47028: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47029: LD_ADDR_EXP 9
47033: PUSH
47034: LD_EXP 6
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: DIFF
47045: PUSH
47046: LD_INT 1
47048: GREATER
47049: ST_TO_ADDR
// end else
47050: GO 47052
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47052: LD_EXP 1
47056: PPUSH
47057: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
47061: LD_EXP 16
47065: PPUSH
47066: CALL 5091 0 1
47070: IFFALSE 47101
// begin for i in mpMarkedAreas do
47072: LD_ADDR_VAR 0 2
47076: PUSH
47077: LD_EXP 16
47081: PUSH
47082: FOR_IN
47083: IFFALSE 47099
// SetAreaMapShow ( i , 0 ) ;
47085: LD_VAR 0 2
47089: PPUSH
47090: LD_INT 0
47092: PPUSH
47093: CALL_OW 424
47097: GO 47082
47099: POP
47100: POP
// end ; for i := 1 to 8 do
47101: LD_ADDR_VAR 0 2
47105: PUSH
47106: DOUBLE
47107: LD_INT 1
47109: DEC
47110: ST_TO_ADDR
47111: LD_INT 8
47113: PUSH
47114: FOR_TO
47115: IFFALSE 48550
// begin if not mpSidePositions [ i ] then
47117: LD_EXP 5
47121: PUSH
47122: LD_VAR 0 2
47126: ARRAY
47127: NOT
47128: IFFALSE 47132
// continue ;
47130: GO 47114
// side := i ;
47132: LD_ADDR_VAR 0 7
47136: PUSH
47137: LD_VAR 0 2
47141: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47142: LD_ADDR_VAR 0 9
47146: PUSH
47147: LD_EXP 7
47151: PUSH
47152: LD_VAR 0 2
47156: ARRAY
47157: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47158: LD_ADDR_VAR 0 8
47162: PUSH
47163: LD_EXP 5
47167: PUSH
47168: LD_VAR 0 2
47172: ARRAY
47173: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47174: LD_EXP 10
47178: PPUSH
47179: CALL 5091 0 1
47183: IFFALSE 47260
// begin for j in mpOilDeposits [ pos ] do
47185: LD_ADDR_VAR 0 3
47189: PUSH
47190: LD_EXP 10
47194: PUSH
47195: LD_VAR 0 8
47199: ARRAY
47200: PUSH
47201: FOR_IN
47202: IFFALSE 47258
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47204: LD_VAR 0 3
47208: PUSH
47209: LD_INT 1
47211: ARRAY
47212: PPUSH
47213: LD_VAR 0 3
47217: PUSH
47218: LD_INT 2
47220: ARRAY
47221: PPUSH
47222: LD_INT 2
47224: PPUSH
47225: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47229: LD_VAR 0 3
47233: PUSH
47234: LD_INT 1
47236: ARRAY
47237: PPUSH
47238: LD_VAR 0 3
47242: PUSH
47243: LD_INT 2
47245: ARRAY
47246: PPUSH
47247: LD_VAR 0 7
47251: PPUSH
47252: CALL_OW 441
// end ;
47256: GO 47201
47258: POP
47259: POP
// end ; if Count ( mpSibDeposits ) then
47260: LD_EXP 11
47264: PPUSH
47265: CALL 5091 0 1
47269: IFFALSE 47346
// begin for j in mpSibDeposits [ pos ] do
47271: LD_ADDR_VAR 0 3
47275: PUSH
47276: LD_EXP 11
47280: PUSH
47281: LD_VAR 0 8
47285: ARRAY
47286: PUSH
47287: FOR_IN
47288: IFFALSE 47344
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47290: LD_VAR 0 3
47294: PUSH
47295: LD_INT 1
47297: ARRAY
47298: PPUSH
47299: LD_VAR 0 3
47303: PUSH
47304: LD_INT 2
47306: ARRAY
47307: PPUSH
47308: LD_INT 3
47310: PPUSH
47311: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47315: LD_VAR 0 3
47319: PUSH
47320: LD_INT 1
47322: ARRAY
47323: PPUSH
47324: LD_VAR 0 3
47328: PUSH
47329: LD_INT 2
47331: ARRAY
47332: PPUSH
47333: LD_VAR 0 7
47337: PPUSH
47338: CALL_OW 441
// end ;
47342: GO 47287
47344: POP
47345: POP
// end ; InitBc ;
47346: CALL_OW 21
// InitUc ;
47350: CALL_OW 18
// uc_side := side ;
47354: LD_ADDR_OWVAR 20
47358: PUSH
47359: LD_VAR 0 7
47363: ST_TO_ADDR
// uc_nation := nation ;
47364: LD_ADDR_OWVAR 21
47368: PUSH
47369: LD_VAR 0 9
47373: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47374: LD_EXP 20
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: GREATER
47383: IFFALSE 47542
// begin x := mpStartPos [ pos ] [ 1 ] ;
47385: LD_ADDR_VAR 0 5
47389: PUSH
47390: LD_EXP 19
47394: PUSH
47395: LD_VAR 0 8
47399: ARRAY
47400: PUSH
47401: LD_INT 1
47403: ARRAY
47404: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47405: LD_ADDR_VAR 0 6
47409: PUSH
47410: LD_EXP 19
47414: PUSH
47415: LD_VAR 0 8
47419: ARRAY
47420: PUSH
47421: LD_INT 2
47423: ARRAY
47424: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47425: LD_VAR 0 5
47429: PPUSH
47430: LD_VAR 0 6
47434: PPUSH
47435: LD_INT 12
47437: PPUSH
47438: LD_INT 2
47440: PPUSH
47441: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47445: LD_ADDR_EXP 21
47449: PUSH
47450: LD_EXP 21
47454: PPUSH
47455: LD_VAR 0 7
47459: PPUSH
47460: LD_VAR 0 7
47464: PPUSH
47465: LD_VAR 0 5
47469: PPUSH
47470: LD_VAR 0 6
47474: PPUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 100
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: LD_INT 70
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: LD_INT 40
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 10
47507: PUSH
47508: LD_INT 25
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 20
47517: PUSH
47518: LD_INT 100
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: PPUSH
47532: CALL_OW 418
47536: PPUSH
47537: CALL_OW 1
47541: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47542: LD_EXP 12
47546: PPUSH
47547: CALL 5091 0 1
47551: IFFALSE 47746
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
47553: LD_EXP 1
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 6
47563: PUSH
47564: LD_INT 7
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: LIST
47571: IN
47572: IFFALSE 47592
// begin bc_level := 10 ;
47574: LD_ADDR_OWVAR 43
47578: PUSH
47579: LD_INT 10
47581: ST_TO_ADDR
// bc_type := b_warehouse ;
47582: LD_ADDR_OWVAR 42
47586: PUSH
47587: LD_INT 1
47589: ST_TO_ADDR
// end else
47590: GO 47608
// begin bc_level := 0 ;
47592: LD_ADDR_OWVAR 43
47596: PUSH
47597: LD_INT 0
47599: ST_TO_ADDR
// bc_type := b_depot ;
47600: LD_ADDR_OWVAR 42
47604: PUSH
47605: LD_INT 0
47607: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47608: LD_ADDR_VAR 0 4
47612: PUSH
47613: LD_EXP 12
47617: PUSH
47618: LD_VAR 0 8
47622: ARRAY
47623: PUSH
47624: LD_INT 1
47626: ARRAY
47627: PPUSH
47628: LD_EXP 12
47632: PUSH
47633: LD_VAR 0 8
47637: ARRAY
47638: PUSH
47639: LD_INT 2
47641: ARRAY
47642: PPUSH
47643: LD_EXP 12
47647: PUSH
47648: LD_VAR 0 8
47652: ARRAY
47653: PUSH
47654: LD_INT 3
47656: ARRAY
47657: PPUSH
47658: CALL_OW 47
47662: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47663: LD_VAR 0 4
47667: PPUSH
47668: LD_STRING @
47670: PUSH
47671: LD_VAR 0 7
47675: STR
47676: PPUSH
47677: CALL_OW 500
// if Count ( mpStartingResources ) then
47681: LD_EXP 13
47685: PPUSH
47686: CALL 5091 0 1
47690: IFFALSE 47744
// begin for j := 1 to mpStartingResources do
47692: LD_ADDR_VAR 0 3
47696: PUSH
47697: DOUBLE
47698: LD_INT 1
47700: DEC
47701: ST_TO_ADDR
47702: LD_EXP 13
47706: PUSH
47707: FOR_TO
47708: IFFALSE 47742
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47710: LD_VAR 0 4
47714: PPUSH
47715: CALL_OW 274
47719: PPUSH
47720: LD_VAR 0 3
47724: PPUSH
47725: LD_EXP 13
47729: PUSH
47730: LD_VAR 0 3
47734: ARRAY
47735: PPUSH
47736: CALL_OW 277
47740: GO 47707
47742: POP
47743: POP
// end ; end else
47744: GO 47953
// if Count ( mpStartingResources ) then
47746: LD_EXP 13
47750: PPUSH
47751: CALL 5091 0 1
47755: IFFALSE 47953
// begin x := mpStartPos [ pos ] [ 1 ] ;
47757: LD_ADDR_VAR 0 5
47761: PUSH
47762: LD_EXP 19
47766: PUSH
47767: LD_VAR 0 8
47771: ARRAY
47772: PUSH
47773: LD_INT 1
47775: ARRAY
47776: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47777: LD_ADDR_VAR 0 6
47781: PUSH
47782: LD_EXP 19
47786: PUSH
47787: LD_VAR 0 8
47791: ARRAY
47792: PUSH
47793: LD_INT 2
47795: ARRAY
47796: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47797: LD_ADDR_VAR 0 3
47801: PUSH
47802: DOUBLE
47803: LD_INT 1
47805: DEC
47806: ST_TO_ADDR
47807: LD_EXP 13
47811: PUSH
47812: FOR_TO
47813: IFFALSE 47951
// begin resources := mpStartingResources [ j ] ;
47815: LD_ADDR_VAR 0 13
47819: PUSH
47820: LD_EXP 13
47824: PUSH
47825: LD_VAR 0 3
47829: ARRAY
47830: ST_TO_ADDR
// if resources = 0 then
47831: LD_VAR 0 13
47835: PUSH
47836: LD_INT 0
47838: EQUAL
47839: IFFALSE 47843
// continue ;
47841: GO 47812
// repeat if resources >= 50 then
47843: LD_VAR 0 13
47847: PUSH
47848: LD_INT 50
47850: GREATEREQUAL
47851: IFFALSE 47897
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47853: LD_VAR 0 3
47857: PPUSH
47858: LD_INT 5
47860: PPUSH
47861: LD_VAR 0 5
47865: PPUSH
47866: LD_VAR 0 6
47870: PPUSH
47871: LD_INT 6
47873: PPUSH
47874: LD_INT 0
47876: PPUSH
47877: CALL_OW 60
// resources := resources - 50 ;
47881: LD_ADDR_VAR 0 13
47885: PUSH
47886: LD_VAR 0 13
47890: PUSH
47891: LD_INT 50
47893: MINUS
47894: ST_TO_ADDR
// end else
47895: GO 47939
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47897: LD_VAR 0 3
47901: PPUSH
47902: LD_VAR 0 13
47906: PUSH
47907: LD_INT 10
47909: DIV
47910: PPUSH
47911: LD_VAR 0 5
47915: PPUSH
47916: LD_VAR 0 6
47920: PPUSH
47921: LD_INT 6
47923: PPUSH
47924: LD_INT 0
47926: PPUSH
47927: CALL_OW 60
// resources := 0 ;
47931: LD_ADDR_VAR 0 13
47935: PUSH
47936: LD_INT 0
47938: ST_TO_ADDR
// end ; until resources <= 0 ;
47939: LD_VAR 0 13
47943: PUSH
47944: LD_INT 0
47946: LESSEQUAL
47947: IFFALSE 47843
// end ;
47949: GO 47812
47951: POP
47952: POP
// end ; if Count ( mpBuildings ) then
47953: LD_EXP 15
47957: PPUSH
47958: CALL 5091 0 1
47962: IFFALSE 48040
// begin for j in mpBuildings [ pos ] do
47964: LD_ADDR_VAR 0 3
47968: PUSH
47969: LD_EXP 15
47973: PUSH
47974: LD_VAR 0 8
47978: ARRAY
47979: PUSH
47980: FOR_IN
47981: IFFALSE 48038
// begin bc_level := 0 ;
47983: LD_ADDR_OWVAR 43
47987: PUSH
47988: LD_INT 0
47990: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47991: LD_ADDR_OWVAR 42
47995: PUSH
47996: LD_VAR 0 3
48000: PUSH
48001: LD_INT 1
48003: ARRAY
48004: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48005: LD_VAR 0 3
48009: PUSH
48010: LD_INT 2
48012: ARRAY
48013: PPUSH
48014: LD_VAR 0 3
48018: PUSH
48019: LD_INT 3
48021: ARRAY
48022: PPUSH
48023: LD_VAR 0 3
48027: PUSH
48028: LD_INT 4
48030: ARRAY
48031: PPUSH
48032: CALL_OW 47
// end ;
48036: GO 47980
48038: POP
48039: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48040: LD_EXP 24
48044: IFFALSE 48064
48046: PUSH
48047: LD_INT 20
48049: PPUSH
48050: LD_VAR 0 7
48054: PPUSH
48055: CALL_OW 321
48059: PUSH
48060: LD_INT 1
48062: EQUAL
48063: AND
48064: IFFALSE 48081
// SetTech ( tech_SibDet , side , state_researched ) ;
48066: LD_INT 20
48068: PPUSH
48069: LD_VAR 0 7
48073: PPUSH
48074: LD_INT 2
48076: PPUSH
48077: CALL_OW 322
// if not mpArtifacts then
48081: LD_EXP 42
48085: NOT
48086: IFFALSE 48103
// SetTech ( tech_artifact , side , state_disabled ) ;
48088: LD_INT 24
48090: PPUSH
48091: LD_VAR 0 7
48095: PPUSH
48096: LD_INT 0
48098: PPUSH
48099: CALL_OW 322
// if mpSibBomb = 1 then
48103: LD_EXP 26
48107: PUSH
48108: LD_INT 1
48110: EQUAL
48111: IFFALSE 48130
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48113: LD_INT 25
48115: PPUSH
48116: LD_VAR 0 7
48120: PPUSH
48121: LD_INT 1
48123: PPUSH
48124: CALL_OW 322
// end else
48128: GO 48145
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48130: LD_INT 25
48132: PPUSH
48133: LD_VAR 0 7
48137: PPUSH
48138: LD_INT 0
48140: PPUSH
48141: CALL_OW 322
// end ; if mpVehicles then
48145: LD_EXP 34
48149: IFFALSE 48248
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48151: LD_ADDR_VAR 0 3
48155: PUSH
48156: LD_VAR 0 7
48160: PPUSH
48161: LD_VAR 0 9
48165: PPUSH
48166: LD_EXP 34
48170: PPUSH
48171: CALL 49471 0 3
48175: PUSH
48176: FOR_IN
48177: IFFALSE 48246
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48179: LD_VAR 0 3
48183: PPUSH
48184: LD_INT 0
48186: PPUSH
48187: LD_INT 5
48189: PPUSH
48190: CALL_OW 12
48194: PPUSH
48195: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48199: LD_VAR 0 3
48203: PPUSH
48204: LD_EXP 19
48208: PUSH
48209: LD_VAR 0 8
48213: ARRAY
48214: PUSH
48215: LD_INT 1
48217: ARRAY
48218: PPUSH
48219: LD_EXP 19
48223: PUSH
48224: LD_VAR 0 8
48228: ARRAY
48229: PUSH
48230: LD_INT 2
48232: ARRAY
48233: PPUSH
48234: LD_INT 12
48236: PPUSH
48237: LD_INT 0
48239: PPUSH
48240: CALL_OW 50
// end ;
48244: GO 48176
48246: POP
48247: POP
// end ; uc_nation := nation ;
48248: LD_ADDR_OWVAR 21
48252: PUSH
48253: LD_VAR 0 9
48257: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48258: LD_EXP 1
48262: PUSH
48263: LD_INT 6
48265: PUSH
48266: LD_INT 7
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: IN
48273: IFFALSE 48298
48275: PUSH
48276: LD_EXP 5
48280: PUSH
48281: LD_VAR 0 2
48285: ARRAY
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: IN
48297: AND
48298: IFFALSE 48346
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48300: LD_ADDR_VAR 0 11
48304: PUSH
48305: LD_VAR 0 7
48309: PPUSH
48310: LD_VAR 0 9
48314: PPUSH
48315: LD_EXP 22
48319: PUSH
48320: LD_EXP 22
48324: PUSH
48325: LD_INT 2
48327: DIV
48328: PLUS
48329: PPUSH
48330: LD_EXP 23
48334: PUSH
48335: LD_INT 1
48337: PLUS
48338: PPUSH
48339: CALL 48962 0 4
48343: ST_TO_ADDR
48344: GO 48376
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48346: LD_ADDR_VAR 0 11
48350: PUSH
48351: LD_VAR 0 7
48355: PPUSH
48356: LD_VAR 0 9
48360: PPUSH
48361: LD_EXP 22
48365: PPUSH
48366: LD_EXP 23
48370: PPUSH
48371: CALL 48962 0 4
48375: ST_TO_ADDR
// for j in team do
48376: LD_ADDR_VAR 0 3
48380: PUSH
48381: LD_VAR 0 11
48385: PUSH
48386: FOR_IN
48387: IFFALSE 48436
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48389: LD_VAR 0 3
48393: PPUSH
48394: LD_EXP 19
48398: PUSH
48399: LD_VAR 0 8
48403: ARRAY
48404: PUSH
48405: LD_INT 1
48407: ARRAY
48408: PPUSH
48409: LD_EXP 19
48413: PUSH
48414: LD_VAR 0 8
48418: ARRAY
48419: PUSH
48420: LD_INT 2
48422: ARRAY
48423: PPUSH
48424: LD_INT 12
48426: PPUSH
48427: LD_INT 0
48429: PPUSH
48430: CALL_OW 50
48434: GO 48386
48436: POP
48437: POP
// if mpApemans then
48438: LD_EXP 28
48442: IFFALSE 48548
// begin for j := 1 to mpApemans do
48444: LD_ADDR_VAR 0 3
48448: PUSH
48449: DOUBLE
48450: LD_INT 1
48452: DEC
48453: ST_TO_ADDR
48454: LD_EXP 28
48458: PUSH
48459: FOR_TO
48460: IFFALSE 48546
// begin PrepareApeman ( - 5 ) ;
48462: LD_INT 5
48464: NEG
48465: PPUSH
48466: CALL 37184 0 1
// ape := CreateHuman ;
48470: LD_ADDR_VAR 0 10
48474: PUSH
48475: CALL_OW 44
48479: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48480: LD_ADDR_EXP 30
48484: PUSH
48485: LD_EXP 30
48489: PPUSH
48490: LD_VAR 0 8
48494: PPUSH
48495: LD_EXP 30
48499: PUSH
48500: LD_VAR 0 8
48504: ARRAY
48505: PPUSH
48506: LD_VAR 0 10
48510: PPUSH
48511: CALL 41057 0 2
48515: PPUSH
48516: CALL_OW 1
48520: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48521: LD_VAR 0 10
48525: PPUSH
48526: LD_EXP 29
48530: PUSH
48531: LD_VAR 0 8
48535: ARRAY
48536: PPUSH
48537: LD_INT 0
48539: PPUSH
48540: CALL_OW 49
// end ;
48544: GO 48459
48546: POP
48547: POP
// end ; end ;
48548: GO 47114
48550: POP
48551: POP
// if not mpTeamGame then
48552: LD_EXP 9
48556: NOT
48557: IFFALSE 48655
// begin for i := 1 to 8 do
48559: LD_ADDR_VAR 0 2
48563: PUSH
48564: DOUBLE
48565: LD_INT 1
48567: DEC
48568: ST_TO_ADDR
48569: LD_INT 8
48571: PUSH
48572: FOR_TO
48573: IFFALSE 48651
// for j := 1 to 8 do
48575: LD_ADDR_VAR 0 3
48579: PUSH
48580: DOUBLE
48581: LD_INT 1
48583: DEC
48584: ST_TO_ADDR
48585: LD_INT 8
48587: PUSH
48588: FOR_TO
48589: IFFALSE 48647
// if i <> j then
48591: LD_VAR 0 2
48595: PUSH
48596: LD_VAR 0 3
48600: NONEQUAL
48601: IFFALSE 48625
// SetAttitude ( i , j , att_neutral , true ) else
48603: LD_VAR 0 2
48607: PPUSH
48608: LD_VAR 0 3
48612: PPUSH
48613: LD_INT 0
48615: PPUSH
48616: LD_INT 1
48618: PPUSH
48619: CALL_OW 80
48623: GO 48645
// SetAttitude ( i , j , att_friend , true ) ;
48625: LD_VAR 0 2
48629: PPUSH
48630: LD_VAR 0 3
48634: PPUSH
48635: LD_INT 1
48637: PPUSH
48638: LD_INT 1
48640: PPUSH
48641: CALL_OW 80
48645: GO 48588
48647: POP
48648: POP
48649: GO 48572
48651: POP
48652: POP
// end else
48653: GO 48830
// begin if mpSharedVision then
48655: LD_EXP 14
48659: IFFALSE 48724
// begin for i in mpTeams do
48661: LD_ADDR_VAR 0 2
48665: PUSH
48666: LD_EXP 8
48670: PUSH
48671: FOR_IN
48672: IFFALSE 48722
// for j := 2 to i do
48674: LD_ADDR_VAR 0 3
48678: PUSH
48679: DOUBLE
48680: LD_INT 2
48682: DEC
48683: ST_TO_ADDR
48684: LD_VAR 0 2
48688: PUSH
48689: FOR_TO
48690: IFFALSE 48718
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48692: LD_VAR 0 2
48696: PUSH
48697: LD_VAR 0 3
48701: ARRAY
48702: PPUSH
48703: LD_VAR 0 2
48707: PUSH
48708: LD_INT 1
48710: ARRAY
48711: PPUSH
48712: CALL_OW 343
48716: GO 48689
48718: POP
48719: POP
48720: GO 48671
48722: POP
48723: POP
// end ; for i := 1 to 8 do
48724: LD_ADDR_VAR 0 2
48728: PUSH
48729: DOUBLE
48730: LD_INT 1
48732: DEC
48733: ST_TO_ADDR
48734: LD_INT 8
48736: PUSH
48737: FOR_TO
48738: IFFALSE 48828
// for j := 1 to 8 do
48740: LD_ADDR_VAR 0 3
48744: PUSH
48745: DOUBLE
48746: LD_INT 1
48748: DEC
48749: ST_TO_ADDR
48750: LD_INT 8
48752: PUSH
48753: FOR_TO
48754: IFFALSE 48824
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48756: LD_EXP 6
48760: PUSH
48761: LD_VAR 0 2
48765: ARRAY
48766: PUSH
48767: LD_EXP 6
48771: PUSH
48772: LD_VAR 0 3
48776: ARRAY
48777: EQUAL
48778: IFFALSE 48802
// SetAttitude ( i , j , att_friend , true ) else
48780: LD_VAR 0 2
48784: PPUSH
48785: LD_VAR 0 3
48789: PPUSH
48790: LD_INT 1
48792: PPUSH
48793: LD_INT 1
48795: PPUSH
48796: CALL_OW 80
48800: GO 48822
// SetAttitude ( i , j , att_enemy , true ) ;
48802: LD_VAR 0 2
48806: PPUSH
48807: LD_VAR 0 3
48811: PPUSH
48812: LD_INT 2
48814: PPUSH
48815: LD_INT 1
48817: PPUSH
48818: CALL_OW 80
48822: GO 48753
48824: POP
48825: POP
48826: GO 48737
48828: POP
48829: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48830: LD_ADDR_OWVAR 71
48834: PUSH
48835: LD_EXP 7
48839: PUSH
48840: LD_OWVAR 2
48844: ARRAY
48845: ST_TO_ADDR
// if IAmSpec then
48846: CALL_OW 531
48850: IFFALSE 48891
// begin FogOff ( true ) ;
48852: LD_INT 1
48854: PPUSH
48855: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48859: LD_EXP 27
48863: PUSH
48864: LD_INT 1
48866: ARRAY
48867: PUSH
48868: LD_INT 2
48870: DIV
48871: PPUSH
48872: LD_EXP 27
48876: PUSH
48877: LD_INT 2
48879: ARRAY
48880: PUSH
48881: LD_INT 2
48883: DIV
48884: PPUSH
48885: CALL_OW 86
// end else
48889: GO 48937
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48891: LD_EXP 19
48895: PUSH
48896: LD_EXP 5
48900: PUSH
48901: LD_OWVAR 2
48905: ARRAY
48906: ARRAY
48907: PUSH
48908: LD_INT 1
48910: ARRAY
48911: PPUSH
48912: LD_EXP 19
48916: PUSH
48917: LD_EXP 5
48921: PUSH
48922: LD_OWVAR 2
48926: ARRAY
48927: ARRAY
48928: PUSH
48929: LD_INT 2
48931: ARRAY
48932: PPUSH
48933: CALL_OW 86
// end ; BeginBuildUp ;
48937: CALL 50004 0 0
// enable ( mpActive ) ;
48941: LD_INT 100
48943: ENABLE_MARKED
// enable ( mpGameType ) ;
48944: LD_EXP 1
48948: ENABLE_MARKED
// mpGameActive := true ;
48949: LD_ADDR_EXP 37
48953: PUSH
48954: LD_INT 1
48956: ST_TO_ADDR
// end ;
48957: LD_VAR 0 1
48961: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48962: LD_INT 0
48964: PPUSH
48965: PPUSH
48966: PPUSH
48967: PPUSH
// result := [ ] ;
48968: LD_ADDR_VAR 0 5
48972: PUSH
48973: EMPTY
48974: ST_TO_ADDR
// class := class_soldier ;
48975: LD_ADDR_VAR 0 8
48979: PUSH
48980: LD_INT 1
48982: ST_TO_ADDR
// uc_side := side ;
48983: LD_ADDR_OWVAR 20
48987: PUSH
48988: LD_VAR 0 1
48992: ST_TO_ADDR
// uc_nation := nation ;
48993: LD_ADDR_OWVAR 21
48997: PUSH
48998: LD_VAR 0 2
49002: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49003: LD_ADDR_OWVAR 26
49007: PUSH
49008: LD_OWVAR 19
49012: PUSH
49013: LD_VAR 0 1
49017: ARRAY
49018: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49019: LD_INT 1
49021: PPUSH
49022: LD_INT 2
49024: PPUSH
49025: CALL_OW 12
49029: PPUSH
49030: LD_VAR 0 8
49034: PPUSH
49035: LD_VAR 0 4
49039: PUSH
49040: LD_INT 2
49042: PLUS
49043: PPUSH
49044: CALL_OW 380
// hc_importance := 105 ;
49048: LD_ADDR_OWVAR 32
49052: PUSH
49053: LD_INT 105
49055: ST_TO_ADDR
// if Multiplayer then
49056: LD_OWVAR 4
49060: IFFALSE 49100
// begin hc_gallery := MULTIAVATARS ;
49062: LD_ADDR_OWVAR 33
49066: PUSH
49067: LD_STRING MULTIAVATARS
49069: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49070: LD_ADDR_OWVAR 34
49074: PUSH
49075: LD_VAR 0 1
49079: PPUSH
49080: CALL_OW 525
49084: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49085: LD_ADDR_OWVAR 27
49089: PUSH
49090: LD_VAR 0 1
49094: PPUSH
49095: CALL_OW 526
49099: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49100: LD_ADDR_VAR 0 5
49104: PUSH
49105: LD_VAR 0 5
49109: PPUSH
49110: CALL_OW 44
49114: PPUSH
49115: CALL 41057 0 2
49119: ST_TO_ADDR
// if mpTeamPreset then
49120: LD_LOC 1
49124: IFFALSE 49220
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49126: LD_LOC 1
49130: PUSH
49131: LD_INT 1
49133: ARRAY
49134: PPUSH
49135: LD_VAR 0 5
49139: PUSH
49140: LD_VAR 0 5
49144: ARRAY
49145: PPUSH
49146: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49150: LD_VAR 0 5
49154: PUSH
49155: LD_VAR 0 5
49159: ARRAY
49160: PPUSH
49161: LD_INT 1
49163: PPUSH
49164: LD_LOC 1
49168: PUSH
49169: LD_INT 1
49171: ARRAY
49172: PPUSH
49173: LD_INT 1
49175: PPUSH
49176: CALL_OW 260
49180: PPUSH
49181: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49185: LD_VAR 0 5
49189: PUSH
49190: LD_VAR 0 5
49194: ARRAY
49195: PPUSH
49196: LD_INT 2
49198: PPUSH
49199: LD_LOC 1
49203: PUSH
49204: LD_INT 1
49206: ARRAY
49207: PPUSH
49208: LD_INT 2
49210: PPUSH
49211: CALL_OW 260
49215: PPUSH
49216: CALL_OW 239
// end ; InitHc_All ( ) ;
49220: CALL_OW 584
// class := 2 ;
49224: LD_ADDR_VAR 0 8
49228: PUSH
49229: LD_INT 2
49231: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49232: LD_ADDR_VAR 0 6
49236: PUSH
49237: DOUBLE
49238: LD_INT 1
49240: DEC
49241: ST_TO_ADDR
49242: LD_VAR 0 3
49246: PUSH
49247: LD_INT 1
49249: MINUS
49250: PUSH
49251: FOR_TO
49252: IFFALSE 49447
// begin PrepareHuman ( false , class , skill ) ;
49254: LD_INT 0
49256: PPUSH
49257: LD_VAR 0 8
49261: PPUSH
49262: LD_VAR 0 4
49266: PPUSH
49267: CALL_OW 380
// un := CreateHuman ;
49271: LD_ADDR_VAR 0 7
49275: PUSH
49276: CALL_OW 44
49280: ST_TO_ADDR
// result := Join ( result , un ) ;
49281: LD_ADDR_VAR 0 5
49285: PUSH
49286: LD_VAR 0 5
49290: PPUSH
49291: LD_VAR 0 7
49295: PPUSH
49296: CALL 41057 0 2
49300: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49301: LD_LOC 1
49305: PPUSH
49306: CALL 5091 0 1
49310: PUSH
49311: LD_VAR 0 3
49315: GREATEREQUAL
49316: IFFALSE 49412
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49318: LD_LOC 1
49322: PUSH
49323: LD_VAR 0 6
49327: PUSH
49328: LD_INT 1
49330: PLUS
49331: ARRAY
49332: PPUSH
49333: LD_VAR 0 7
49337: PPUSH
49338: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49342: LD_VAR 0 7
49346: PPUSH
49347: LD_INT 1
49349: PPUSH
49350: LD_LOC 1
49354: PUSH
49355: LD_VAR 0 6
49359: PUSH
49360: LD_INT 1
49362: PLUS
49363: ARRAY
49364: PPUSH
49365: LD_INT 1
49367: PPUSH
49368: CALL_OW 260
49372: PPUSH
49373: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49377: LD_VAR 0 7
49381: PPUSH
49382: LD_INT 2
49384: PPUSH
49385: LD_LOC 1
49389: PUSH
49390: LD_VAR 0 6
49394: PUSH
49395: LD_INT 1
49397: PLUS
49398: ARRAY
49399: PPUSH
49400: LD_INT 2
49402: PPUSH
49403: CALL_OW 260
49407: PPUSH
49408: CALL_OW 239
// end ; class := Inc ( class ) ;
49412: LD_ADDR_VAR 0 8
49416: PUSH
49417: LD_VAR 0 8
49421: PPUSH
49422: CALL 42430 0 1
49426: ST_TO_ADDR
// if class = 5 then
49427: LD_VAR 0 8
49431: PUSH
49432: LD_INT 5
49434: EQUAL
49435: IFFALSE 49445
// class := 1 ;
49437: LD_ADDR_VAR 0 8
49441: PUSH
49442: LD_INT 1
49444: ST_TO_ADDR
// end ;
49445: GO 49251
49447: POP
49448: POP
// if not mpTeamPreset then
49449: LD_LOC 1
49453: NOT
49454: IFFALSE 49466
// mpTeamPreset := result ;
49456: LD_ADDR_LOC 1
49460: PUSH
49461: LD_VAR 0 5
49465: ST_TO_ADDR
// end ;
49466: LD_VAR 0 5
49470: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49471: LD_INT 0
49473: PPUSH
49474: PPUSH
// result := [ ] ;
49475: LD_ADDR_VAR 0 4
49479: PUSH
49480: EMPTY
49481: ST_TO_ADDR
// if not vehicles then
49482: LD_VAR 0 3
49486: NOT
49487: IFFALSE 49491
// exit ;
49489: GO 49705
// for i := 1 to vehicles [ nation ] do
49491: LD_ADDR_VAR 0 5
49495: PUSH
49496: DOUBLE
49497: LD_INT 1
49499: DEC
49500: ST_TO_ADDR
49501: LD_VAR 0 3
49505: PUSH
49506: LD_VAR 0 2
49510: ARRAY
49511: PUSH
49512: FOR_TO
49513: IFFALSE 49703
// begin uc_side := side ;
49515: LD_ADDR_OWVAR 20
49519: PUSH
49520: LD_VAR 0 1
49524: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49525: LD_VAR 0 3
49529: PUSH
49530: LD_VAR 0 2
49534: ARRAY
49535: PUSH
49536: LD_VAR 0 5
49540: ARRAY
49541: PPUSH
49542: CALL 5091 0 1
49546: PUSH
49547: LD_INT 4
49549: GREATER
49550: IFFALSE 49580
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49552: LD_ADDR_OWVAR 21
49556: PUSH
49557: LD_VAR 0 3
49561: PUSH
49562: LD_VAR 0 2
49566: ARRAY
49567: PUSH
49568: LD_VAR 0 5
49572: ARRAY
49573: PUSH
49574: LD_INT 5
49576: ARRAY
49577: ST_TO_ADDR
49578: GO 49590
// uc_nation := nation ;
49580: LD_ADDR_OWVAR 21
49584: PUSH
49585: LD_VAR 0 2
49589: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49590: LD_VAR 0 3
49594: PUSH
49595: LD_VAR 0 2
49599: ARRAY
49600: PUSH
49601: LD_VAR 0 5
49605: ARRAY
49606: PUSH
49607: LD_INT 1
49609: ARRAY
49610: PPUSH
49611: LD_VAR 0 3
49615: PUSH
49616: LD_VAR 0 2
49620: ARRAY
49621: PUSH
49622: LD_VAR 0 5
49626: ARRAY
49627: PUSH
49628: LD_INT 2
49630: ARRAY
49631: PPUSH
49632: LD_VAR 0 3
49636: PUSH
49637: LD_VAR 0 2
49641: ARRAY
49642: PUSH
49643: LD_VAR 0 5
49647: ARRAY
49648: PUSH
49649: LD_INT 3
49651: ARRAY
49652: PPUSH
49653: LD_VAR 0 3
49657: PUSH
49658: LD_VAR 0 2
49662: ARRAY
49663: PUSH
49664: LD_VAR 0 5
49668: ARRAY
49669: PUSH
49670: LD_INT 4
49672: ARRAY
49673: PPUSH
49674: LD_INT 80
49676: PPUSH
49677: CALL 7887 0 5
// result := Join ( result , CreateVehicle ) ;
49681: LD_ADDR_VAR 0 4
49685: PUSH
49686: LD_VAR 0 4
49690: PPUSH
49691: CALL_OW 45
49695: PPUSH
49696: CALL 41057 0 2
49700: ST_TO_ADDR
// end ;
49701: GO 49512
49703: POP
49704: POP
// end ;
49705: LD_VAR 0 4
49709: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49710: LD_INT 0
49712: PPUSH
49713: PPUSH
// for i in mpBattleFlags do
49714: LD_ADDR_VAR 0 3
49718: PUSH
49719: LD_EXP 21
49723: PUSH
49724: FOR_IN
49725: IFFALSE 49802
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49727: LD_VAR 0 3
49731: PPUSH
49732: LD_INT 1
49734: PUSH
49735: LD_VAR 0 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: LD_VAR 0 1
49751: PUSH
49752: LD_REAL  7.00000000000000E-0001
49755: MUL
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_VAR 0 1
49768: PUSH
49769: LD_REAL  4.00000000000000E-0001
49772: MUL
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 20
49780: PUSH
49781: LD_VAR 0 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: PPUSH
49796: CALL_OW 423
49800: GO 49724
49802: POP
49803: POP
// end ;
49804: LD_VAR 0 2
49808: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49809: LD_INT 100
49811: IFFALSE 49906
49813: GO 49815
49815: DISABLE
49816: LD_INT 0
49818: PPUSH
49819: PPUSH
// begin if mpBattleFlag <= 0 then
49820: LD_EXP 20
49824: PUSH
49825: LD_INT 0
49827: LESSEQUAL
49828: IFFALSE 49832
// exit ;
49830: GO 49906
// strength := 100 ;
49832: LD_ADDR_VAR 0 2
49836: PUSH
49837: LD_INT 100
49839: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49840: LD_EXP 20
49844: PPUSH
49845: CALL_OW 67
// strength := Dec ( strength ) ;
49849: LD_ADDR_VAR 0 2
49853: PUSH
49854: LD_VAR 0 2
49858: PPUSH
49859: CALL 42452 0 1
49863: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49864: LD_VAR 0 2
49868: PPUSH
49869: CALL 49710 0 1
// until not strength ;
49873: LD_VAR 0 2
49877: NOT
49878: IFFALSE 49840
// for i in mpBattleFlags do
49880: LD_ADDR_VAR 0 1
49884: PUSH
49885: LD_EXP 21
49889: PUSH
49890: FOR_IN
49891: IFFALSE 49904
// KillBattleFlag ( i ) ;
49893: LD_VAR 0 1
49897: PPUSH
49898: CALL_OW 419
49902: GO 49890
49904: POP
49905: POP
// end ;
49906: PPOPN 2
49908: END
// every 0 0$1 marked mpActive do var side , tmp ;
49909: GO 49911
49911: DISABLE
49912: LD_INT 0
49914: PPUSH
49915: PPUSH
// begin if mpSibBomb <= 1 then
49916: LD_EXP 26
49920: PUSH
49921: LD_INT 1
49923: LESSEQUAL
49924: IFFALSE 49928
// exit ;
49926: GO 50001
// tmp := mpSibBomb ;
49928: LD_ADDR_VAR 0 2
49932: PUSH
49933: LD_EXP 26
49937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49938: LD_INT 35
49940: PPUSH
49941: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49945: LD_ADDR_VAR 0 2
49949: PUSH
49950: LD_VAR 0 2
49954: PUSH
49955: LD_INT 35
49957: MINUS
49958: ST_TO_ADDR
// until not tmp ;
49959: LD_VAR 0 2
49963: NOT
49964: IFFALSE 49938
// for side := 1 to 8 do
49966: LD_ADDR_VAR 0 1
49970: PUSH
49971: DOUBLE
49972: LD_INT 1
49974: DEC
49975: ST_TO_ADDR
49976: LD_INT 8
49978: PUSH
49979: FOR_TO
49980: IFFALSE 49999
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49982: LD_INT 25
49984: PPUSH
49985: LD_VAR 0 1
49989: PPUSH
49990: LD_INT 1
49992: PPUSH
49993: CALL_OW 322
49997: GO 49979
49999: POP
50000: POP
// end ;
50001: PPOPN 2
50003: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50004: LD_INT 0
50006: PPUSH
50007: PPUSH
50008: PPUSH
// mpBuildUpTimeDelay := 0 ;
50009: LD_ADDR_EXP 45
50013: PUSH
50014: LD_INT 0
50016: ST_TO_ADDR
// if not mpBuildUpTime then
50017: LD_EXP 18
50021: NOT
50022: IFFALSE 50026
// exit ;
50024: GO 50215
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50026: LD_ADDR_EXP 45
50030: PUSH
50031: LD_INT 8400
50033: PUSH
50034: LD_INT 2100
50036: PUSH
50037: LD_EXP 18
50041: MUL
50042: PLUS
50043: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50044: LD_ADDR_EXP 46
50048: PUSH
50049: LD_INT 1
50051: ST_TO_ADDR
// for i := 1 to 8 do
50052: LD_ADDR_VAR 0 2
50056: PUSH
50057: DOUBLE
50058: LD_INT 1
50060: DEC
50061: ST_TO_ADDR
50062: LD_INT 8
50064: PUSH
50065: FOR_TO
50066: IFFALSE 50213
// if mpSidePositions [ i ] then
50068: LD_EXP 5
50072: PUSH
50073: LD_VAR 0 2
50077: ARRAY
50078: IFFALSE 50211
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50080: LD_EXP 17
50084: PUSH
50085: LD_EXP 5
50089: PUSH
50090: LD_VAR 0 2
50094: ARRAY
50095: ARRAY
50096: PPUSH
50097: LD_INT 5
50099: PPUSH
50100: CALL_OW 424
// for j := 1 to 8 do
50104: LD_ADDR_VAR 0 3
50108: PUSH
50109: DOUBLE
50110: LD_INT 1
50112: DEC
50113: ST_TO_ADDR
50114: LD_INT 8
50116: PUSH
50117: FOR_TO
50118: IFFALSE 50209
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50120: LD_EXP 5
50124: PUSH
50125: LD_VAR 0 3
50129: ARRAY
50130: IFFALSE 50179
50132: PUSH
50133: LD_EXP 6
50137: PUSH
50138: LD_VAR 0 2
50142: ARRAY
50143: PUSH
50144: LD_EXP 6
50148: PUSH
50149: LD_VAR 0 3
50153: ARRAY
50154: NONEQUAL
50155: IFTRUE 50178
50157: PUSH
50158: LD_EXP 9
50162: NOT
50163: IFFALSE 50177
50165: PUSH
50166: LD_VAR 0 2
50170: PUSH
50171: LD_VAR 0 3
50175: NONEQUAL
50176: AND
50177: OR
50178: AND
50179: IFFALSE 50207
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50181: LD_VAR 0 3
50185: PPUSH
50186: LD_EXP 17
50190: PUSH
50191: LD_EXP 5
50195: PUSH
50196: LD_VAR 0 2
50200: ARRAY
50201: ARRAY
50202: PPUSH
50203: CALL_OW 333
50207: GO 50117
50209: POP
50210: POP
// end ;
50211: GO 50065
50213: POP
50214: POP
// end ;
50215: LD_VAR 0 1
50219: RET
// function EndBuildUp ; var i , j ; begin
50220: LD_INT 0
50222: PPUSH
50223: PPUSH
50224: PPUSH
// mpBuildUpTimeActive := false ;
50225: LD_ADDR_EXP 46
50229: PUSH
50230: LD_INT 0
50232: ST_TO_ADDR
// for i := 1 to 8 do
50233: LD_ADDR_VAR 0 2
50237: PUSH
50238: DOUBLE
50239: LD_INT 1
50241: DEC
50242: ST_TO_ADDR
50243: LD_INT 8
50245: PUSH
50246: FOR_TO
50247: IFFALSE 50394
// if mpSidePositions [ i ] then
50249: LD_EXP 5
50253: PUSH
50254: LD_VAR 0 2
50258: ARRAY
50259: IFFALSE 50392
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50261: LD_EXP 17
50265: PUSH
50266: LD_EXP 5
50270: PUSH
50271: LD_VAR 0 2
50275: ARRAY
50276: ARRAY
50277: PPUSH
50278: LD_INT 0
50280: PPUSH
50281: CALL_OW 424
// for j := 1 to 8 do
50285: LD_ADDR_VAR 0 3
50289: PUSH
50290: DOUBLE
50291: LD_INT 1
50293: DEC
50294: ST_TO_ADDR
50295: LD_INT 8
50297: PUSH
50298: FOR_TO
50299: IFFALSE 50390
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50301: LD_EXP 5
50305: PUSH
50306: LD_VAR 0 3
50310: ARRAY
50311: IFFALSE 50360
50313: PUSH
50314: LD_EXP 6
50318: PUSH
50319: LD_VAR 0 2
50323: ARRAY
50324: PUSH
50325: LD_EXP 6
50329: PUSH
50330: LD_VAR 0 3
50334: ARRAY
50335: NONEQUAL
50336: IFTRUE 50359
50338: PUSH
50339: LD_EXP 9
50343: NOT
50344: IFFALSE 50358
50346: PUSH
50347: LD_VAR 0 2
50351: PUSH
50352: LD_VAR 0 3
50356: NONEQUAL
50357: AND
50358: OR
50359: AND
50360: IFFALSE 50388
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50362: LD_VAR 0 3
50366: PPUSH
50367: LD_EXP 17
50371: PUSH
50372: LD_EXP 5
50376: PUSH
50377: LD_VAR 0 2
50381: ARRAY
50382: ARRAY
50383: PPUSH
50384: CALL_OW 334
50388: GO 50298
50390: POP
50391: POP
// end ;
50392: GO 50246
50394: POP
50395: POP
// end ;
50396: LD_VAR 0 1
50400: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50401: LD_EXP 46
50405: IFFALSE 50584
50407: GO 50409
50409: DISABLE
50410: LD_INT 0
50412: PPUSH
50413: PPUSH
// begin for i := 1 to 8 do
50414: LD_ADDR_VAR 0 1
50418: PUSH
50419: DOUBLE
50420: LD_INT 1
50422: DEC
50423: ST_TO_ADDR
50424: LD_INT 8
50426: PUSH
50427: FOR_TO
50428: IFFALSE 50581
// if mpSidePositions [ i ] then
50430: LD_EXP 5
50434: PUSH
50435: LD_VAR 0 1
50439: ARRAY
50440: IFFALSE 50579
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50442: LD_ADDR_VAR 0 2
50446: PUSH
50447: LD_EXP 17
50451: PUSH
50452: LD_EXP 5
50456: PUSH
50457: LD_VAR 0 1
50461: ARRAY
50462: ARRAY
50463: PPUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 21
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 21
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 22
50494: PUSH
50495: LD_OWVAR 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PPUSH
50508: CALL_OW 70
50512: PUSH
50513: FOR_IN
50514: IFFALSE 50577
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50516: LD_EXP 6
50520: PUSH
50521: LD_VAR 0 1
50525: ARRAY
50526: PUSH
50527: LD_EXP 6
50531: PUSH
50532: LD_OWVAR 2
50536: ARRAY
50537: NONEQUAL
50538: IFTRUE 50561
50540: PUSH
50541: LD_EXP 9
50545: NOT
50546: IFFALSE 50560
50548: PUSH
50549: LD_VAR 0 1
50553: PUSH
50554: LD_OWVAR 2
50558: NONEQUAL
50559: AND
50560: OR
50561: IFFALSE 50575
// ComMoveToArea ( un , BuildUpEscape ) ;
50563: LD_VAR 0 2
50567: PPUSH
50568: LD_INT 13
50570: PPUSH
50571: CALL_OW 113
50575: GO 50513
50577: POP
50578: POP
50579: GO 50427
50581: POP
50582: POP
// enable ;
50583: ENABLE
// end ;
50584: PPOPN 2
50586: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50587: LD_EXP 18
50591: IFFALSE 50641
50593: GO 50595
50595: DISABLE
50596: LD_INT 0
50598: PPUSH
// begin tmp := mpBuildUpTime ;
50599: LD_ADDR_VAR 0 1
50603: PUSH
50604: LD_EXP 18
50608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50609: LD_INT 35
50611: PPUSH
50612: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50616: LD_ADDR_VAR 0 1
50620: PUSH
50621: LD_VAR 0 1
50625: PUSH
50626: LD_INT 35
50628: MINUS
50629: ST_TO_ADDR
// until not tmp ;
50630: LD_VAR 0 1
50634: NOT
50635: IFFALSE 50609
// EndBuildUp ;
50637: CALL 50220 0 0
// end ;
50641: PPOPN 1
50643: END
// every 0 0$1 trigger mpActive marked mpWin do
50644: LD_INT 100
50646: IFFALSE 50680
50648: GO 50650
50650: DISABLE
// begin if IAmServer then
50651: CALL_OW 518
50655: IFFALSE 50664
// wait ( 0 0$3 ) ;
50657: LD_INT 105
50659: PPUSH
50660: CALL_OW 67
// if Multiplayer then
50664: LD_OWVAR 4
50668: IFFALSE 50676
// YouWinInMultiplayer else
50670: CALL_OW 106
50674: GO 50680
// YouWin ;
50676: CALL_OW 103
// end ;
50680: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50681: LD_INT 0
50683: PPUSH
// result := false ;
50684: LD_ADDR_VAR 0 3
50688: PUSH
50689: LD_INT 0
50691: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50692: LD_VAR 0 1
50696: PUSH
50697: LD_INT 1
50699: DOUBLE
50700: EQUAL
50701: IFTRUE 50723
50703: LD_INT 5
50705: DOUBLE
50706: EQUAL
50707: IFTRUE 50723
50709: LD_INT 6
50711: DOUBLE
50712: EQUAL
50713: IFTRUE 50723
50715: LD_INT 7
50717: DOUBLE
50718: EQUAL
50719: IFTRUE 50723
50721: GO 50796
50723: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50724: LD_ADDR_VAR 0 3
50728: PUSH
50729: LD_INT 22
50731: PUSH
50732: LD_VAR 0 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 21
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 33
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 33
50766: PUSH
50767: LD_INT 5
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PPUSH
50784: CALL_OW 69
50788: PPUSH
50789: CALL 5091 0 1
50793: ST_TO_ADDR
// end ; GameTypeSurvival :
50794: GO 51035
50796: LD_INT 2
50798: DOUBLE
50799: EQUAL
50800: IFTRUE 50804
50802: GO 50934
50804: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50805: LD_ADDR_VAR 0 3
50809: PUSH
50810: LD_INT 22
50812: PUSH
50813: LD_VAR 0 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 30
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 30
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PPUSH
50854: CALL_OW 69
50858: PPUSH
50859: CALL 5091 0 1
50863: IFFALSE 50931
50865: PUSH
50866: LD_INT 22
50868: PUSH
50869: LD_VAR 0 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 21
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 33
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 33
50903: PUSH
50904: LD_INT 5
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PPUSH
50921: CALL_OW 69
50925: PPUSH
50926: CALL 5091 0 1
50930: AND
50931: ST_TO_ADDR
// end ; GameTypeKing :
50932: GO 51035
50934: LD_INT 3
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 51034
50942: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50943: LD_ADDR_VAR 0 3
50947: PUSH
50948: LD_INT 22
50950: PUSH
50951: LD_VAR 0 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 21
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 33
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 33
50985: PUSH
50986: LD_INT 5
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PPUSH
51003: CALL_OW 69
51007: PPUSH
51008: CALL 5091 0 1
51012: IFFALSE 51031
51014: PUSH
51015: LD_VAR 0 2
51019: PPUSH
51020: CALL 55313 0 1
51024: PUSH
51025: LD_EXP 33
51029: LESS
51030: AND
51031: ST_TO_ADDR
// end ; end ;
51032: GO 51035
51034: POP
// end ;
51035: LD_VAR 0 3
51039: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51040: LD_INT 100
51042: IFFALSE 51272
51044: GO 51046
51046: DISABLE
51047: LD_INT 0
51049: PPUSH
51050: PPUSH
// begin if Multiplayer then
51051: LD_OWVAR 4
51055: IFFALSE 51063
// SetPlayerSpectator ( ) else
51057: CALL_OW 572
51061: GO 51072
// FogOff ( your_side ) ;
51063: LD_OWVAR 2
51067: PPUSH
51068: CALL_OW 344
// repeat gameIsOn := false ;
51072: LD_ADDR_VAR 0 1
51076: PUSH
51077: LD_INT 0
51079: ST_TO_ADDR
// for i := 1 to 8 do
51080: LD_ADDR_VAR 0 2
51084: PUSH
51085: DOUBLE
51086: LD_INT 1
51088: DEC
51089: ST_TO_ADDR
51090: LD_INT 8
51092: PUSH
51093: FOR_TO
51094: IFFALSE 51224
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51096: LD_EXP 5
51100: PUSH
51101: LD_VAR 0 2
51105: ARRAY
51106: IFFALSE 51119
51108: PUSH
51109: LD_VAR 0 2
51113: PPUSH
51114: CALL_OW 108
51118: AND
51119: IFFALSE 51133
51121: PUSH
51122: LD_VAR 0 2
51126: PUSH
51127: LD_OWVAR 2
51131: NONEQUAL
51132: AND
51133: IFFALSE 51222
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51135: LD_EXP 6
51139: PUSH
51140: LD_VAR 0 2
51144: ARRAY
51145: NOT
51146: IFTRUE 51194
51148: PUSH
51149: LD_EXP 6
51153: PUSH
51154: LD_VAR 0 2
51158: ARRAY
51159: PUSH
51160: LD_EXP 6
51164: PUSH
51165: LD_OWVAR 2
51169: ARRAY
51170: NONEQUAL
51171: IFFALSE 51193
51173: PUSH
51174: LD_OWVAR 2
51178: PPUSH
51179: LD_VAR 0 2
51183: PPUSH
51184: CALL_OW 81
51188: PUSH
51189: LD_INT 1
51191: NONEQUAL
51192: AND
51193: OR
51194: IFFALSE 51222
// if HasPowerByGameType ( mpGameType , i ) then
51196: LD_EXP 1
51200: PPUSH
51201: LD_VAR 0 2
51205: PPUSH
51206: CALL 50681 0 2
51210: IFFALSE 51222
// begin gameIsOn := true ;
51212: LD_ADDR_VAR 0 1
51216: PUSH
51217: LD_INT 1
51219: ST_TO_ADDR
// break ;
51220: GO 51224
// end ;
51222: GO 51093
51224: POP
51225: POP
// wait ( 100 ) ;
51226: LD_INT 100
51228: PPUSH
51229: CALL_OW 67
// until not gameIsOn ;
51233: LD_VAR 0 1
51237: NOT
51238: IFFALSE 51072
// if IAmServer then
51240: CALL_OW 518
51244: IFFALSE 51253
// wait ( 0 0$3 ) ;
51246: LD_INT 105
51248: PPUSH
51249: CALL_OW 67
// if Multiplayer then
51253: LD_OWVAR 4
51257: IFFALSE 51265
// YouLostInMultiplayer else
51259: CALL_OW 107
51263: GO 51272
// YouLost (  ) ;
51265: LD_STRING 
51267: PPUSH
51268: CALL_OW 104
// end ;
51272: PPOPN 2
51274: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51275: LD_EXP 31
51279: IFFALSE 51663
51281: GO 51283
51283: DISABLE
51284: LD_INT 0
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51291: LD_ADDR_VAR 0 5
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 5
51310: PUSH
51311: LD_INT 6
51313: PUSH
51314: LD_INT 7
51316: PUSH
51317: LD_INT 8
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51330: LD_INT 350
51332: PPUSH
51333: CALL_OW 67
// for i := 1 to 8 do
51337: LD_ADDR_VAR 0 1
51341: PUSH
51342: DOUBLE
51343: LD_INT 1
51345: DEC
51346: ST_TO_ADDR
51347: LD_INT 8
51349: PUSH
51350: FOR_TO
51351: IFFALSE 51633
// begin j := sides [ i ] ;
51353: LD_ADDR_VAR 0 2
51357: PUSH
51358: LD_VAR 0 5
51362: PUSH
51363: LD_VAR 0 1
51367: ARRAY
51368: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51369: LD_EXP 38
51373: PUSH
51374: LD_VAR 0 2
51378: ARRAY
51379: PPUSH
51380: CALL 5091 0 1
51384: IFFALSE 51397
51386: PUSH
51387: LD_VAR 0 2
51391: PPUSH
51392: CALL_OW 108
51396: AND
51397: IFFALSE 51415
51399: PUSH
51400: LD_EXP 1
51404: PPUSH
51405: LD_VAR 0 2
51409: PPUSH
51410: CALL 50681 0 2
51414: AND
51415: IFFALSE 51631
// begin wait ( mpRespawn div 2 ) ;
51417: LD_EXP 31
51421: PUSH
51422: LD_INT 2
51424: DIV
51425: PPUSH
51426: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51430: LD_ADDR_VAR 0 3
51434: PUSH
51435: LD_INT 22
51437: PUSH
51438: LD_VAR 0 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 50
51449: PUSH
51450: EMPTY
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 30
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 30
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: LIST
51485: PPUSH
51486: CALL_OW 69
51490: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51491: LD_VAR 0 3
51495: NOT
51496: IFTRUE 51510
51498: PUSH
51499: LD_VAR 0 2
51503: PPUSH
51504: CALL_OW 108
51508: NOT
51509: OR
51510: IFTRUE 51529
51512: PUSH
51513: LD_EXP 1
51517: PPUSH
51518: LD_VAR 0 2
51522: PPUSH
51523: CALL 50681 0 2
51527: NOT
51528: OR
51529: IFFALSE 51533
// continue ;
51531: GO 51350
// spawn := tmp [ 1 ] ;
51533: LD_ADDR_VAR 0 4
51537: PUSH
51538: LD_VAR 0 3
51542: PUSH
51543: LD_INT 1
51545: ARRAY
51546: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51547: LD_EXP 38
51551: PUSH
51552: LD_VAR 0 2
51556: ARRAY
51557: PUSH
51558: LD_INT 1
51560: ARRAY
51561: PPUSH
51562: LD_VAR 0 4
51566: PPUSH
51567: CALL_OW 250
51571: PPUSH
51572: LD_VAR 0 4
51576: PPUSH
51577: CALL_OW 251
51581: PPUSH
51582: LD_INT 32
51584: PPUSH
51585: LD_INT 1
51587: PPUSH
51588: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51592: LD_ADDR_EXP 38
51596: PUSH
51597: LD_EXP 38
51601: PPUSH
51602: LD_VAR 0 2
51606: PPUSH
51607: LD_EXP 38
51611: PUSH
51612: LD_VAR 0 2
51616: ARRAY
51617: PPUSH
51618: LD_INT 1
51620: PPUSH
51621: CALL_OW 3
51625: PPUSH
51626: CALL_OW 1
51630: ST_TO_ADDR
// end ; end ;
51631: GO 51350
51633: POP
51634: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51635: LD_ADDR_VAR 0 5
51639: PUSH
51640: LD_VAR 0 5
51644: PPUSH
51645: LD_INT 1
51647: PPUSH
51648: LD_INT 8
51650: PPUSH
51651: LD_INT 1
51653: PPUSH
51654: CALL 7417 0 4
51658: ST_TO_ADDR
// until false ;
51659: LD_INT 0
51661: IFFALSE 51330
// end ;
51663: PPOPN 5
51665: END
// every 0 0$1 marked mpActive do
51666: GO 51668
51668: DISABLE
// begin enable ;
51669: ENABLE
// if not mpDisplayStrings then
51670: LD_EXP 36
51674: NOT
51675: IFFALSE 51686
// begin display_strings := [ ] ;
51677: LD_ADDR_OWVAR 47
51681: PUSH
51682: EMPTY
51683: ST_TO_ADDR
// exit ;
51684: GO 51696
// end ; display_strings := mpDisplayStrings ;
51686: LD_ADDR_OWVAR 47
51690: PUSH
51691: LD_EXP 36
51695: ST_TO_ADDR
// end ; end_of_file
51696: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51697: LD_INT 0
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
51703: PPUSH
51704: PPUSH
51705: PPUSH
51706: PPUSH
51707: PPUSH
// if GetType ( un ) = unit_vehicle then
51708: LD_VAR 0 1
51712: PPUSH
51713: CALL_OW 247
51717: PUSH
51718: LD_INT 2
51720: EQUAL
51721: IFFALSE 51725
// exit ;
51723: GO 52399
// side := GetSide ( un ) ;
51725: LD_ADDR_VAR 0 9
51729: PUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 255
51739: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51740: LD_EXP 1
51744: PUSH
51745: LD_INT 2
51747: EQUAL
51748: IFFALSE 51842
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51750: LD_VAR 0 1
51754: PPUSH
51755: CALL_OW 266
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: IN
51770: IFFALSE 51842
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51772: LD_ADDR_VAR 0 3
51776: PUSH
51777: LD_INT 22
51779: PUSH
51780: LD_VAR 0 9
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 21
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 33
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PPUSH
51821: CALL_OW 69
51825: PUSH
51826: FOR_IN
51827: IFFALSE 51840
// KillUnit ( i ) ;
51829: LD_VAR 0 3
51833: PPUSH
51834: CALL_OW 66
51838: GO 51826
51840: POP
51841: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51842: LD_VAR 0 1
51846: PPUSH
51847: CALL_OW 257
51851: PUSH
51852: LD_INT 12
51854: PUSH
51855: LD_INT 17
51857: PUSH
51858: LD_INT 15
51860: PUSH
51861: LD_INT 16
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: IN
51870: IFTRUE 51887
51872: PUSH
51873: LD_VAR 0 1
51877: PPUSH
51878: CALL_OW 263
51882: PUSH
51883: LD_INT 5
51885: EQUAL
51886: OR
51887: IFFALSE 52124
// begin tag := 0 ;
51889: LD_ADDR_VAR 0 5
51893: PUSH
51894: LD_INT 0
51896: ST_TO_ADDR
// for i := 1 to 8 do
51897: LD_ADDR_VAR 0 3
51901: PUSH
51902: DOUBLE
51903: LD_INT 1
51905: DEC
51906: ST_TO_ADDR
51907: LD_INT 8
51909: PUSH
51910: FOR_TO
51911: IFFALSE 51945
// if un in mpApePosIndex [ i ] then
51913: LD_VAR 0 1
51917: PUSH
51918: LD_EXP 30
51922: PUSH
51923: LD_VAR 0 3
51927: ARRAY
51928: IN
51929: IFFALSE 51943
// begin tag := i ;
51931: LD_ADDR_VAR 0 5
51935: PUSH
51936: LD_VAR 0 3
51940: ST_TO_ADDR
// break ;
51941: GO 51945
// end ;
51943: GO 51910
51945: POP
51946: POP
// if not tag then
51947: LD_VAR 0 5
51951: NOT
51952: IFFALSE 51956
// exit ;
51954: GO 52399
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51956: LD_ADDR_VAR 0 7
51960: PUSH
51961: LD_EXP 29
51965: PUSH
51966: LD_EXP 5
51970: PUSH
51971: LD_VAR 0 5
51975: ARRAY
51976: ARRAY
51977: ST_TO_ADDR
// if not area then
51978: LD_VAR 0 7
51982: NOT
51983: IFFALSE 51987
// exit ;
51985: GO 52399
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
51987: LD_INT 14700
51989: PUSH
51990: LD_VAR 0 1
51994: PUSH
51995: LD_INT 5
51997: MOD
51998: PUSH
51999: LD_INT 1
52001: PLUS
52002: PUSH
52003: LD_INT 700
52005: MUL
52006: PLUS
52007: PPUSH
52008: CALL_OW 67
// repeat wait ( 10 ) ;
52012: LD_INT 10
52014: PPUSH
52015: CALL_OW 67
// until not mpBlockRespThread ;
52019: LD_EXP 44
52023: NOT
52024: IFFALSE 52012
// mpBlockRespThread := true ;
52026: LD_ADDR_EXP 44
52030: PUSH
52031: LD_INT 1
52033: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52034: LD_INT 0
52036: PPUSH
52037: CALL 37184 0 1
// ape := CreateHuman ;
52041: LD_ADDR_VAR 0 4
52045: PUSH
52046: CALL_OW 44
52050: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52051: LD_ADDR_EXP 30
52055: PUSH
52056: LD_EXP 30
52060: PPUSH
52061: LD_VAR 0 5
52065: PPUSH
52066: LD_EXP 30
52070: PUSH
52071: LD_VAR 0 5
52075: ARRAY
52076: PPUSH
52077: LD_VAR 0 4
52081: PPUSH
52082: CALL 41057 0 2
52086: PPUSH
52087: CALL_OW 1
52091: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52092: LD_VAR 0 4
52096: PPUSH
52097: LD_VAR 0 7
52101: PPUSH
52102: LD_INT 0
52104: PPUSH
52105: CALL_OW 49
// wait ( 10 ) ;
52109: LD_INT 10
52111: PPUSH
52112: CALL_OW 67
// mpBlockRespThread := false ;
52116: LD_ADDR_EXP 44
52120: PUSH
52121: LD_INT 0
52123: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52124: LD_VAR 0 1
52128: PPUSH
52129: CALL_OW 247
52133: PUSH
52134: LD_INT 1
52136: EQUAL
52137: IFFALSE 52154
52139: PUSH
52140: LD_VAR 0 1
52144: PPUSH
52145: CALL_OW 248
52149: PUSH
52150: LD_INT 0
52152: GREATER
52153: AND
52154: IFFALSE 52399
// begin if not mpRespawn then
52156: LD_EXP 31
52160: NOT
52161: IFFALSE 52165
// exit ;
52163: GO 52399
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52165: LD_VAR 0 9
52169: PPUSH
52170: CALL_OW 108
52174: NOT
52175: IFFALSE 52194
52177: PUSH
52178: LD_EXP 1
52182: PPUSH
52183: LD_VAR 0 9
52187: PPUSH
52188: CALL 50681 0 2
52192: NOT
52193: AND
52194: IFFALSE 52198
// exit ;
52196: GO 52399
// side := GetSide ( un ) ;
52198: LD_ADDR_VAR 0 9
52202: PUSH
52203: LD_VAR 0 1
52207: PPUSH
52208: CALL_OW 255
52212: ST_TO_ADDR
// nation := GetNation ( un ) ;
52213: LD_ADDR_VAR 0 8
52217: PUSH
52218: LD_VAR 0 1
52222: PPUSH
52223: CALL_OW 248
52227: ST_TO_ADDR
// class := GetClass ( un ) ;
52228: LD_ADDR_VAR 0 6
52232: PUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 257
52242: ST_TO_ADDR
// if class > 4 then
52243: LD_VAR 0 6
52247: PUSH
52248: LD_INT 4
52250: GREATER
52251: IFFALSE 52261
// class := 1 ;
52253: LD_ADDR_VAR 0 6
52257: PUSH
52258: LD_INT 1
52260: ST_TO_ADDR
// repeat wait ( 10 ) ;
52261: LD_INT 10
52263: PPUSH
52264: CALL_OW 67
// until not mpBlockRespThread ;
52268: LD_EXP 44
52272: NOT
52273: IFFALSE 52261
// mpBlockRespThread := true ;
52275: LD_ADDR_EXP 44
52279: PUSH
52280: LD_INT 1
52282: ST_TO_ADDR
// uc_side := side ;
52283: LD_ADDR_OWVAR 20
52287: PUSH
52288: LD_VAR 0 9
52292: ST_TO_ADDR
// uc_nation := nation ;
52293: LD_ADDR_OWVAR 21
52297: PUSH
52298: LD_VAR 0 8
52302: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52303: LD_INT 0
52305: PPUSH
52306: LD_VAR 0 6
52310: PPUSH
52311: LD_INT 2
52313: PPUSH
52314: CALL_OW 380
// un := CreateHuman ;
52318: LD_ADDR_VAR 0 1
52322: PUSH
52323: CALL_OW 44
52327: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52328: LD_ADDR_EXP 38
52332: PUSH
52333: LD_EXP 38
52337: PPUSH
52338: LD_VAR 0 9
52342: PPUSH
52343: LD_EXP 38
52347: PUSH
52348: LD_VAR 0 9
52352: ARRAY
52353: PPUSH
52354: LD_EXP 38
52358: PUSH
52359: LD_VAR 0 9
52363: ARRAY
52364: PUSH
52365: LD_INT 1
52367: PLUS
52368: PPUSH
52369: LD_VAR 0 1
52373: PPUSH
52374: CALL_OW 1
52378: PPUSH
52379: CALL_OW 1
52383: ST_TO_ADDR
// wait ( 10 ) ;
52384: LD_INT 10
52386: PPUSH
52387: CALL_OW 67
// mpBlockRespThread := false ;
52391: LD_ADDR_EXP 44
52395: PUSH
52396: LD_INT 0
52398: ST_TO_ADDR
// end ; end ;
52399: LD_VAR 0 2
52403: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52404: LD_INT 0
52406: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52407: LD_VAR 0 1
52411: PPUSH
52412: CALL_OW 266
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: IN
52427: IFFALSE 52452
// SetBName ( building , @ & GetSide ( building ) ) ;
52429: LD_VAR 0 1
52433: PPUSH
52434: LD_STRING @
52436: PUSH
52437: LD_VAR 0 1
52441: PPUSH
52442: CALL_OW 255
52446: STR
52447: PPUSH
52448: CALL_OW 500
// end ;
52452: LD_VAR 0 2
52456: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52457: LD_INT 0
52459: PPUSH
52460: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52461: LD_EXP 1
52465: PUSH
52466: LD_INT 2
52468: EQUAL
52469: IFFALSE 52493
52471: PUSH
52472: LD_VAR 0 1
52476: PPUSH
52477: CALL_OW 266
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: IN
52492: AND
52493: IFFALSE 52572
// begin SetSide ( building , oldSide ) ;
52495: LD_VAR 0 1
52499: PPUSH
52500: LD_VAR 0 2
52504: PPUSH
52505: CALL_OW 235
// KillUnit ( building ) ;
52509: LD_VAR 0 1
52513: PPUSH
52514: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52518: LD_ADDR_VAR 0 5
52522: PUSH
52523: LD_INT 22
52525: PUSH
52526: LD_VAR 0 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 21
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PPUSH
52549: CALL_OW 69
52553: PUSH
52554: FOR_IN
52555: IFFALSE 52568
// KillUnit ( i ) ;
52557: LD_VAR 0 5
52561: PPUSH
52562: CALL_OW 66
52566: GO 52554
52568: POP
52569: POP
// exit ;
52570: GO 52617
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52572: LD_VAR 0 1
52576: PPUSH
52577: CALL_OW 266
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: IN
52592: IFFALSE 52617
// SetBName ( building , @ & GetSide ( building ) ) ;
52594: LD_VAR 0 1
52598: PPUSH
52599: LD_STRING @
52601: PUSH
52602: LD_VAR 0 1
52606: PPUSH
52607: CALL_OW 255
52611: STR
52612: PPUSH
52613: CALL_OW 500
// end ;
52617: LD_VAR 0 4
52621: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52622: LD_INT 0
52624: PPUSH
52625: PPUSH
52626: PPUSH
// if mpGameType <> GameTypeFamine then
52627: LD_EXP 1
52631: PUSH
52632: LD_INT 5
52634: NONEQUAL
52635: IFFALSE 52639
// exit ;
52637: GO 52854
// for i := 1 to mpGlobalOilDeposits do
52639: LD_ADDR_VAR 0 6
52643: PUSH
52644: DOUBLE
52645: LD_INT 1
52647: DEC
52648: ST_TO_ADDR
52649: LD_EXP 39
52653: PUSH
52654: FOR_TO
52655: IFFALSE 52852
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52657: LD_EXP 39
52661: PUSH
52662: LD_VAR 0 6
52666: ARRAY
52667: PUSH
52668: LD_INT 1
52670: ARRAY
52671: PPUSH
52672: LD_EXP 39
52676: PUSH
52677: LD_VAR 0 6
52681: ARRAY
52682: PUSH
52683: LD_INT 2
52685: ARRAY
52686: PPUSH
52687: CALL_OW 428
52691: PUSH
52692: LD_VAR 0 1
52696: EQUAL
52697: IFFALSE 52850
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52699: LD_ADDR_VAR 0 7
52703: PUSH
52704: LD_EXP 39
52708: PUSH
52709: LD_VAR 0 6
52713: ARRAY
52714: PUSH
52715: LD_INT 3
52717: ARRAY
52718: ST_TO_ADDR
// value := value - amount ;
52719: LD_ADDR_VAR 0 7
52723: PUSH
52724: LD_VAR 0 7
52728: PUSH
52729: LD_VAR 0 4
52733: MINUS
52734: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52735: LD_ADDR_EXP 39
52739: PUSH
52740: LD_EXP 39
52744: PPUSH
52745: LD_VAR 0 6
52749: PPUSH
52750: LD_EXP 39
52754: PUSH
52755: LD_VAR 0 6
52759: ARRAY
52760: PPUSH
52761: LD_INT 3
52763: PPUSH
52764: LD_VAR 0 7
52768: PPUSH
52769: CALL_OW 1
52773: PPUSH
52774: CALL_OW 1
52778: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52779: LD_VAR 0 1
52783: PPUSH
52784: LD_VAR 0 7
52788: PPUSH
52789: CALL_OW 505
// if value <= 0 then
52793: LD_VAR 0 7
52797: PUSH
52798: LD_INT 0
52800: LESSEQUAL
52801: IFFALSE 52850
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52803: LD_EXP 39
52807: PUSH
52808: LD_VAR 0 6
52812: ARRAY
52813: PUSH
52814: LD_INT 1
52816: ARRAY
52817: PPUSH
52818: LD_EXP 39
52822: PUSH
52823: LD_VAR 0 6
52827: ARRAY
52828: PUSH
52829: LD_INT 2
52831: ARRAY
52832: PPUSH
52833: CALL_OW 63
// KillUnit ( building ) ;
52837: LD_VAR 0 1
52841: PPUSH
52842: CALL_OW 66
// exit ;
52846: POP
52847: POP
52848: GO 52854
// end ; end ; end ;
52850: GO 52654
52852: POP
52853: POP
// end ;
52854: LD_VAR 0 5
52858: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52859: LD_INT 0
52861: PPUSH
52862: PPUSH
52863: PPUSH
// if mpGameType <> GameTypeFamine then
52864: LD_EXP 1
52868: PUSH
52869: LD_INT 5
52871: NONEQUAL
52872: IFFALSE 52876
// exit ;
52874: GO 53091
// for i := 1 to mpGlobalSibDeposits do
52876: LD_ADDR_VAR 0 6
52880: PUSH
52881: DOUBLE
52882: LD_INT 1
52884: DEC
52885: ST_TO_ADDR
52886: LD_EXP 40
52890: PUSH
52891: FOR_TO
52892: IFFALSE 53089
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52894: LD_EXP 40
52898: PUSH
52899: LD_VAR 0 6
52903: ARRAY
52904: PUSH
52905: LD_INT 1
52907: ARRAY
52908: PPUSH
52909: LD_EXP 40
52913: PUSH
52914: LD_VAR 0 6
52918: ARRAY
52919: PUSH
52920: LD_INT 2
52922: ARRAY
52923: PPUSH
52924: CALL_OW 428
52928: PUSH
52929: LD_VAR 0 1
52933: EQUAL
52934: IFFALSE 53087
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52936: LD_ADDR_VAR 0 7
52940: PUSH
52941: LD_EXP 40
52945: PUSH
52946: LD_VAR 0 6
52950: ARRAY
52951: PUSH
52952: LD_INT 3
52954: ARRAY
52955: ST_TO_ADDR
// value := value - amount ;
52956: LD_ADDR_VAR 0 7
52960: PUSH
52961: LD_VAR 0 7
52965: PUSH
52966: LD_VAR 0 4
52970: MINUS
52971: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52972: LD_ADDR_EXP 40
52976: PUSH
52977: LD_EXP 40
52981: PPUSH
52982: LD_VAR 0 6
52986: PPUSH
52987: LD_EXP 40
52991: PUSH
52992: LD_VAR 0 6
52996: ARRAY
52997: PPUSH
52998: LD_INT 3
53000: PPUSH
53001: LD_VAR 0 7
53005: PPUSH
53006: CALL_OW 1
53010: PPUSH
53011: CALL_OW 1
53015: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53016: LD_VAR 0 1
53020: PPUSH
53021: LD_VAR 0 7
53025: PPUSH
53026: CALL_OW 505
// if value <= 0 then
53030: LD_VAR 0 7
53034: PUSH
53035: LD_INT 0
53037: LESSEQUAL
53038: IFFALSE 53087
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53040: LD_EXP 40
53044: PUSH
53045: LD_VAR 0 6
53049: ARRAY
53050: PUSH
53051: LD_INT 1
53053: ARRAY
53054: PPUSH
53055: LD_EXP 40
53059: PUSH
53060: LD_VAR 0 6
53064: ARRAY
53065: PUSH
53066: LD_INT 2
53068: ARRAY
53069: PPUSH
53070: CALL_OW 63
// KillUnit ( building ) ;
53074: LD_VAR 0 1
53078: PPUSH
53079: CALL_OW 66
// exit ;
53083: POP
53084: POP
53085: GO 53091
// end ; end ; end ;
53087: GO 52891
53089: POP
53090: POP
// end ;
53091: LD_VAR 0 5
53095: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53096: LD_INT 0
53098: PPUSH
53099: PPUSH
// side := GetSide ( factory ) ;
53100: LD_ADDR_VAR 0 7
53104: PUSH
53105: LD_VAR 0 1
53109: PPUSH
53110: CALL_OW 255
53114: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53115: LD_VAR 0 5
53119: PUSH
53120: LD_INT 81
53122: EQUAL
53123: IFFALSE 53161
53125: PUSH
53126: LD_INT 22
53128: PUSH
53129: LD_VAR 0 7
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 34
53140: PUSH
53141: LD_INT 81
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PPUSH
53152: CALL_OW 69
53156: PUSH
53157: LD_INT 0
53159: GREATER
53160: AND
53161: IFFALSE 53194
// begin ComCancel ( factory ) ;
53163: LD_VAR 0 1
53167: PPUSH
53168: CALL_OW 127
// if side = your_side then
53172: LD_VAR 0 7
53176: PUSH
53177: LD_OWVAR 2
53181: EQUAL
53182: IFFALSE 53194
// HintSpec ( VehLimit , 2 ) ;
53184: LD_STRING VehLimit
53186: PPUSH
53187: LD_INT 2
53189: PPUSH
53190: CALL_OW 338
// end ; end ;
53194: LD_VAR 0 6
53198: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53199: LD_INT 0
53201: PPUSH
53202: PPUSH
53203: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53204: LD_VAR 0 1
53208: PPUSH
53209: CALL_OW 264
53213: PUSH
53214: LD_INT 81
53216: EQUAL
53217: IFFALSE 53234
53219: PUSH
53220: LD_VAR 0 1
53224: PPUSH
53225: CALL_OW 263
53229: PUSH
53230: LD_INT 1
53232: EQUAL
53233: AND
53234: IFFALSE 53514
// begin for i := 1 to Count ( minersList ) do
53236: LD_ADDR_VAR 0 6
53240: PUSH
53241: DOUBLE
53242: LD_INT 1
53244: DEC
53245: ST_TO_ADDR
53246: LD_EXP 55
53250: PPUSH
53251: CALL 5091 0 1
53255: PUSH
53256: FOR_TO
53257: IFFALSE 53375
// begin if minersList [ i ] = oldId then
53259: LD_EXP 55
53263: PUSH
53264: LD_VAR 0 6
53268: ARRAY
53269: PUSH
53270: LD_VAR 0 2
53274: EQUAL
53275: IFFALSE 53373
// begin for j := 1 to minerMinesList [ i ] do
53277: LD_ADDR_VAR 0 7
53281: PUSH
53282: DOUBLE
53283: LD_INT 1
53285: DEC
53286: ST_TO_ADDR
53287: LD_EXP 56
53291: PUSH
53292: LD_VAR 0 6
53296: ARRAY
53297: PUSH
53298: FOR_TO
53299: IFFALSE 53349
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53301: LD_EXP 56
53305: PUSH
53306: LD_VAR 0 6
53310: ARRAY
53311: PUSH
53312: LD_VAR 0 7
53316: ARRAY
53317: PUSH
53318: LD_INT 1
53320: ARRAY
53321: PPUSH
53322: LD_EXP 56
53326: PUSH
53327: LD_VAR 0 6
53331: ARRAY
53332: PUSH
53333: LD_VAR 0 7
53337: ARRAY
53338: PUSH
53339: LD_INT 2
53341: ARRAY
53342: PPUSH
53343: CALL_OW 612
53347: GO 53298
53349: POP
53350: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53351: LD_ADDR_EXP 56
53355: PUSH
53356: LD_EXP 56
53360: PPUSH
53361: LD_VAR 0 6
53365: PPUSH
53366: CALL_OW 3
53370: ST_TO_ADDR
// break ;
53371: GO 53375
// end ; end ;
53373: GO 53256
53375: POP
53376: POP
// minersList := minersList diff oldId ;
53377: LD_ADDR_EXP 55
53381: PUSH
53382: LD_EXP 55
53386: PUSH
53387: LD_VAR 0 2
53391: DIFF
53392: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
53393: LD_INT 22
53395: PUSH
53396: LD_VAR 0 4
53400: PPUSH
53401: CALL_OW 255
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 34
53412: PUSH
53413: LD_INT 81
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PPUSH
53424: CALL_OW 69
53428: PUSH
53429: LD_INT 1
53431: GREATER
53432: IFFALSE 53459
// begin ComExit ( unit ) ;
53434: LD_VAR 0 4
53438: PPUSH
53439: CALL 41455 0 1
// SetSide ( newId , oldSide ) ;
53443: LD_VAR 0 1
53447: PPUSH
53448: LD_VAR 0 3
53452: PPUSH
53453: CALL_OW 235
// exit ;
53457: GO 53514
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
53459: LD_ADDR_EXP 55
53463: PUSH
53464: LD_EXP 55
53468: PPUSH
53469: LD_EXP 55
53473: PUSH
53474: LD_INT 1
53476: PLUS
53477: PPUSH
53478: LD_VAR 0 1
53482: PPUSH
53483: CALL_OW 1
53487: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53488: LD_ADDR_EXP 56
53492: PUSH
53493: LD_EXP 56
53497: PPUSH
53498: LD_EXP 56
53502: PUSH
53503: LD_INT 1
53505: PLUS
53506: PPUSH
53507: EMPTY
53508: PPUSH
53509: CALL_OW 1
53513: ST_TO_ADDR
// end ; end ; end_of_file
53514: LD_VAR 0 5
53518: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53519: LD_EXP 37
53523: IFFALSE 53531
53525: PUSH
53526: CALL 53741 0 0
53530: AND
53531: IFFALSE 53539
53533: PUSH
53534: LD_OWVAR 4
53538: AND
53539: IFFALSE 53738
53541: GO 53543
53543: DISABLE
53544: LD_INT 0
53546: PPUSH
53547: PPUSH
// begin canWin := false ;
53548: LD_ADDR_VAR 0 2
53552: PUSH
53553: LD_INT 0
53555: ST_TO_ADDR
// if not HasPower ( your_side ) then
53556: LD_OWVAR 2
53560: PPUSH
53561: CALL 53783 0 1
53565: NOT
53566: IFFALSE 53577
// begin Multiplayer_Loose_Message ;
53568: CALL_OW 521
// enable ( mpLose ) ;
53572: LD_INT 102
53574: ENABLE_MARKED
// end else
53575: GO 53738
// begin canWin := true ;
53577: LD_ADDR_VAR 0 2
53581: PUSH
53582: LD_INT 1
53584: ST_TO_ADDR
// for i := 1 to 8 do
53585: LD_ADDR_VAR 0 1
53589: PUSH
53590: DOUBLE
53591: LD_INT 1
53593: DEC
53594: ST_TO_ADDR
53595: LD_INT 8
53597: PUSH
53598: FOR_TO
53599: IFFALSE 53724
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53601: LD_EXP 5
53605: PUSH
53606: LD_VAR 0 1
53610: ARRAY
53611: IFFALSE 53624
53613: PUSH
53614: LD_VAR 0 1
53618: PPUSH
53619: CALL_OW 108
53623: AND
53624: IFFALSE 53638
53626: PUSH
53627: LD_VAR 0 1
53631: PUSH
53632: LD_OWVAR 2
53636: NONEQUAL
53637: AND
53638: IFFALSE 53722
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53640: LD_EXP 6
53644: PUSH
53645: LD_VAR 0 1
53649: ARRAY
53650: NOT
53651: IFTRUE 53699
53653: PUSH
53654: LD_EXP 6
53658: PUSH
53659: LD_VAR 0 1
53663: ARRAY
53664: PUSH
53665: LD_EXP 6
53669: PUSH
53670: LD_OWVAR 2
53674: ARRAY
53675: NONEQUAL
53676: IFFALSE 53698
53678: PUSH
53679: LD_OWVAR 2
53683: PPUSH
53684: LD_VAR 0 1
53688: PPUSH
53689: CALL_OW 81
53693: PUSH
53694: LD_INT 1
53696: NONEQUAL
53697: AND
53698: OR
53699: IFFALSE 53722
// if HasPower ( i ) then
53701: LD_VAR 0 1
53705: PPUSH
53706: CALL 53783 0 1
53710: IFFALSE 53722
// begin canWin := false ;
53712: LD_ADDR_VAR 0 2
53716: PUSH
53717: LD_INT 0
53719: ST_TO_ADDR
// break ;
53720: GO 53724
// end ;
53722: GO 53598
53724: POP
53725: POP
// if canWin then
53726: LD_VAR 0 2
53730: IFFALSE 53737
// enable ( mpWin ) else
53732: LD_INT 101
53734: ENABLE_MARKED
53735: GO 53738
// enable ;
53737: ENABLE
// end ; end ;
53738: PPOPN 2
53740: END
// function CanWinLoose ; begin
53741: LD_INT 0
53743: PPUSH
// result := true ;
53744: LD_ADDR_VAR 0 1
53748: PUSH
53749: LD_INT 1
53751: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53752: CALL_OW 531
53756: IFFALSE 53768
53758: PUSH
53759: CALL_OW 519
53763: PUSH
53764: LD_INT 1
53766: GREATER
53767: AND
53768: IFFALSE 53778
// result := false ;
53770: LD_ADDR_VAR 0 1
53774: PUSH
53775: LD_INT 0
53777: ST_TO_ADDR
// end ;
53778: LD_VAR 0 1
53782: RET
// function HasPower ( i ) ; begin
53783: LD_INT 0
53785: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53786: LD_ADDR_VAR 0 2
53790: PUSH
53791: LD_INT 22
53793: PUSH
53794: LD_VAR 0 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 21
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 33
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 33
53828: PUSH
53829: LD_INT 5
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PPUSH
53846: CALL_OW 69
53850: ST_TO_ADDR
// end ; end_of_file
53851: LD_VAR 0 2
53855: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53856: LD_EXP 37
53860: IFFALSE 53903
53862: GO 53864
53864: DISABLE
53865: LD_INT 0
53867: PPUSH
// begin for i := 1 to 8 do
53868: LD_ADDR_VAR 0 1
53872: PUSH
53873: DOUBLE
53874: LD_INT 1
53876: DEC
53877: ST_TO_ADDR
53878: LD_INT 8
53880: PUSH
53881: FOR_TO
53882: IFFALSE 53901
// SetRestrict ( b_depot , i , state_disabled ) ;
53884: LD_INT 0
53886: PPUSH
53887: LD_VAR 0 1
53891: PPUSH
53892: LD_INT 0
53894: PPUSH
53895: CALL_OW 324
53899: GO 53881
53901: POP
53902: POP
// end ;
53903: PPOPN 1
53905: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53906: LD_EXP 37
53910: IFFALSE 53918
53912: PUSH
53913: CALL 54128 0 0
53917: AND
53918: IFFALSE 53926
53920: PUSH
53921: LD_OWVAR 4
53925: AND
53926: IFFALSE 54125
53928: GO 53930
53930: DISABLE
53931: LD_INT 0
53933: PPUSH
53934: PPUSH
// begin canWin := false ;
53935: LD_ADDR_VAR 0 2
53939: PUSH
53940: LD_INT 0
53942: ST_TO_ADDR
// if not HasPower ( your_side ) then
53943: LD_OWVAR 2
53947: PPUSH
53948: CALL 54170 0 1
53952: NOT
53953: IFFALSE 53964
// begin Multiplayer_Loose_Message ;
53955: CALL_OW 521
// enable ( mpLose ) ;
53959: LD_INT 102
53961: ENABLE_MARKED
// end else
53962: GO 54125
// begin canWin := true ;
53964: LD_ADDR_VAR 0 2
53968: PUSH
53969: LD_INT 1
53971: ST_TO_ADDR
// for i := 1 to 8 do
53972: LD_ADDR_VAR 0 1
53976: PUSH
53977: DOUBLE
53978: LD_INT 1
53980: DEC
53981: ST_TO_ADDR
53982: LD_INT 8
53984: PUSH
53985: FOR_TO
53986: IFFALSE 54111
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53988: LD_EXP 5
53992: PUSH
53993: LD_VAR 0 1
53997: ARRAY
53998: IFFALSE 54011
54000: PUSH
54001: LD_VAR 0 1
54005: PPUSH
54006: CALL_OW 108
54010: AND
54011: IFFALSE 54025
54013: PUSH
54014: LD_VAR 0 1
54018: PUSH
54019: LD_OWVAR 2
54023: NONEQUAL
54024: AND
54025: IFFALSE 54109
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54027: LD_EXP 6
54031: PUSH
54032: LD_VAR 0 1
54036: ARRAY
54037: NOT
54038: IFTRUE 54086
54040: PUSH
54041: LD_EXP 6
54045: PUSH
54046: LD_VAR 0 1
54050: ARRAY
54051: PUSH
54052: LD_EXP 6
54056: PUSH
54057: LD_OWVAR 2
54061: ARRAY
54062: NONEQUAL
54063: IFFALSE 54085
54065: PUSH
54066: LD_OWVAR 2
54070: PPUSH
54071: LD_VAR 0 1
54075: PPUSH
54076: CALL_OW 81
54080: PUSH
54081: LD_INT 1
54083: NONEQUAL
54084: AND
54085: OR
54086: IFFALSE 54109
// if HasPower ( i ) then
54088: LD_VAR 0 1
54092: PPUSH
54093: CALL 54170 0 1
54097: IFFALSE 54109
// begin canWin := false ;
54099: LD_ADDR_VAR 0 2
54103: PUSH
54104: LD_INT 0
54106: ST_TO_ADDR
// break ;
54107: GO 54111
// end ;
54109: GO 53985
54111: POP
54112: POP
// if canWin then
54113: LD_VAR 0 2
54117: IFFALSE 54124
// enable ( mpWin ) else
54119: LD_INT 101
54121: ENABLE_MARKED
54122: GO 54125
// enable ;
54124: ENABLE
// end ; end ;
54125: PPOPN 2
54127: END
// function CanWinLoose ; begin
54128: LD_INT 0
54130: PPUSH
// result := true ;
54131: LD_ADDR_VAR 0 1
54135: PUSH
54136: LD_INT 1
54138: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54139: CALL_OW 531
54143: IFFALSE 54155
54145: PUSH
54146: CALL_OW 519
54150: PUSH
54151: LD_INT 1
54153: GREATER
54154: AND
54155: IFFALSE 54165
// result := false ;
54157: LD_ADDR_VAR 0 1
54161: PUSH
54162: LD_INT 0
54164: ST_TO_ADDR
// end ;
54165: LD_VAR 0 1
54169: RET
// function HasPower ( i ) ; begin
54170: LD_INT 0
54172: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54173: LD_INT 22
54175: PUSH
54176: LD_VAR 0 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 30
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 30
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PPUSH
54217: CALL_OW 69
54221: NOT
54222: IFFALSE 54226
// exit ;
54224: GO 54291
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54226: LD_ADDR_VAR 0 2
54230: PUSH
54231: LD_INT 22
54233: PUSH
54234: LD_VAR 0 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 21
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 33
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 33
54268: PUSH
54269: LD_INT 5
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PPUSH
54286: CALL_OW 69
54290: ST_TO_ADDR
// end ; end_of_file
54291: LD_VAR 0 2
54295: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54296: LD_EXP 37
54300: IFFALSE 54639
54302: GO 54304
54304: DISABLE
54305: LD_INT 0
54307: PPUSH
54308: PPUSH
54309: PPUSH
// begin mpKingPoints := [ ] ;
54310: LD_ADDR_EXP 47
54314: PUSH
54315: EMPTY
54316: ST_TO_ADDR
// if mpTeamGame then
54317: LD_EXP 9
54321: IFFALSE 54375
// begin for i := 1 to Count ( mpTeams ) do
54323: LD_ADDR_VAR 0 1
54327: PUSH
54328: DOUBLE
54329: LD_INT 1
54331: DEC
54332: ST_TO_ADDR
54333: LD_EXP 8
54337: PPUSH
54338: CALL 5091 0 1
54342: PUSH
54343: FOR_TO
54344: IFFALSE 54371
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54346: LD_ADDR_EXP 47
54350: PUSH
54351: LD_EXP 47
54355: PPUSH
54356: LD_VAR 0 1
54360: PPUSH
54361: LD_INT 0
54363: PPUSH
54364: CALL_OW 1
54368: ST_TO_ADDR
54369: GO 54343
54371: POP
54372: POP
// end else
54373: GO 54418
// begin for i := 1 to 8 do
54375: LD_ADDR_VAR 0 1
54379: PUSH
54380: DOUBLE
54381: LD_INT 1
54383: DEC
54384: ST_TO_ADDR
54385: LD_INT 8
54387: PUSH
54388: FOR_TO
54389: IFFALSE 54416
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54391: LD_ADDR_EXP 47
54395: PUSH
54396: LD_EXP 47
54400: PPUSH
54401: LD_VAR 0 1
54405: PPUSH
54406: LD_INT 0
54408: PPUSH
54409: CALL_OW 1
54413: ST_TO_ADDR
54414: GO 54388
54416: POP
54417: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54418: LD_ADDR_VAR 0 3
54422: PUSH
54423: LD_INT 17
54425: PPUSH
54426: LD_INT 0
54428: PPUSH
54429: CALL_OW 517
54433: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54434: LD_ADDR_VAR 0 1
54438: PUSH
54439: DOUBLE
54440: LD_INT 1
54442: DEC
54443: ST_TO_ADDR
54444: LD_VAR 0 3
54448: PUSH
54449: LD_INT 1
54451: ARRAY
54452: PUSH
54453: FOR_TO
54454: IFFALSE 54521
// for j := 1 to 8 do
54456: LD_ADDR_VAR 0 2
54460: PUSH
54461: DOUBLE
54462: LD_INT 1
54464: DEC
54465: ST_TO_ADDR
54466: LD_INT 8
54468: PUSH
54469: FOR_TO
54470: IFFALSE 54517
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54472: LD_VAR 0 3
54476: PUSH
54477: LD_INT 1
54479: ARRAY
54480: PUSH
54481: LD_VAR 0 1
54485: ARRAY
54486: PPUSH
54487: LD_VAR 0 3
54491: PUSH
54492: LD_INT 2
54494: ARRAY
54495: PUSH
54496: LD_VAR 0 1
54500: ARRAY
54501: PPUSH
54502: LD_VAR 0 2
54506: PPUSH
54507: LD_INT 12
54509: NEG
54510: PPUSH
54511: CALL_OW 330
54515: GO 54469
54517: POP
54518: POP
54519: GO 54453
54521: POP
54522: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54523: LD_EXP 32
54527: PPUSH
54528: LD_INT 1
54530: PPUSH
54531: CALL_OW 424
// UpdateCounter ;
54535: CALL 55143 0 0
// repeat wait ( 0 0$1 ) ;
54539: LD_INT 35
54541: PPUSH
54542: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54546: LD_ADDR_VAR 0 3
54550: PUSH
54551: LD_EXP 32
54555: PPUSH
54556: LD_INT 3
54558: PUSH
54559: LD_INT 57
54561: PUSH
54562: EMPTY
54563: LIST
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 50
54571: PUSH
54572: EMPTY
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: LD_INT 30
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 30
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: LIST
54607: PPUSH
54608: CALL_OW 70
54612: ST_TO_ADDR
// if not tmp then
54613: LD_VAR 0 3
54617: NOT
54618: IFFALSE 54622
// continue ;
54620: GO 54539
// AddPoints ( tmp ) ;
54622: LD_VAR 0 3
54626: PPUSH
54627: CALL 54821 0 1
// UpdateCounter ;
54631: CALL 55143 0 0
// until false ;
54635: LD_INT 0
54637: IFFALSE 54539
// end ;
54639: PPOPN 3
54641: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54642: LD_EXP 37
54646: IFFALSE 54654
54648: PUSH
54649: LD_EXP 35
54653: AND
54654: IFFALSE 54818
54656: GO 54658
54658: DISABLE
54659: LD_INT 0
54661: PPUSH
54662: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54663: LD_ADDR_VAR 0 2
54667: PUSH
54668: LD_INT 17
54670: PPUSH
54671: LD_INT 0
54673: PPUSH
54674: CALL_OW 517
54678: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54679: LD_ADDR_VAR 0 1
54683: PUSH
54684: DOUBLE
54685: LD_INT 1
54687: DEC
54688: ST_TO_ADDR
54689: LD_VAR 0 2
54693: PUSH
54694: LD_INT 1
54696: ARRAY
54697: PUSH
54698: FOR_TO
54699: IFFALSE 54740
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54701: LD_VAR 0 2
54705: PUSH
54706: LD_INT 1
54708: ARRAY
54709: PUSH
54710: LD_VAR 0 1
54714: ARRAY
54715: PPUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_INT 2
54723: ARRAY
54724: PUSH
54725: LD_VAR 0 1
54729: ARRAY
54730: PPUSH
54731: LD_INT 125
54733: PPUSH
54734: CALL_OW 495
54738: GO 54698
54740: POP
54741: POP
// repeat wait ( mpEmissions ) ;
54742: LD_EXP 35
54746: PPUSH
54747: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54751: LD_ADDR_VAR 0 1
54755: PUSH
54756: DOUBLE
54757: LD_INT 1
54759: DEC
54760: ST_TO_ADDR
54761: LD_VAR 0 2
54765: PUSH
54766: LD_INT 1
54768: ARRAY
54769: PUSH
54770: FOR_TO
54771: IFFALSE 54812
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54773: LD_VAR 0 2
54777: PUSH
54778: LD_INT 1
54780: ARRAY
54781: PUSH
54782: LD_VAR 0 1
54786: ARRAY
54787: PPUSH
54788: LD_VAR 0 2
54792: PUSH
54793: LD_INT 2
54795: ARRAY
54796: PUSH
54797: LD_VAR 0 1
54801: ARRAY
54802: PPUSH
54803: LD_INT 15
54805: PPUSH
54806: CALL_OW 495
54810: GO 54770
54812: POP
54813: POP
// until false ;
54814: LD_INT 0
54816: IFFALSE 54742
// end ;
54818: PPOPN 2
54820: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54821: LD_INT 0
54823: PPUSH
54824: PPUSH
54825: PPUSH
54826: PPUSH
54827: PPUSH
// if mpTeamGame then
54828: LD_EXP 9
54832: IFFALSE 55029
// begin first := depots [ 1 ] ;
54834: LD_ADDR_VAR 0 4
54838: PUSH
54839: LD_VAR 0 1
54843: PUSH
54844: LD_INT 1
54846: ARRAY
54847: ST_TO_ADDR
// side := GetSide ( first ) ;
54848: LD_ADDR_VAR 0 6
54852: PUSH
54853: LD_VAR 0 4
54857: PPUSH
54858: CALL_OW 255
54862: ST_TO_ADDR
// for i := 1 to mpTeams do
54863: LD_ADDR_VAR 0 3
54867: PUSH
54868: DOUBLE
54869: LD_INT 1
54871: DEC
54872: ST_TO_ADDR
54873: LD_EXP 8
54877: PUSH
54878: FOR_TO
54879: IFFALSE 54913
// if side in mpTeams [ i ] then
54881: LD_VAR 0 6
54885: PUSH
54886: LD_EXP 8
54890: PUSH
54891: LD_VAR 0 3
54895: ARRAY
54896: IN
54897: IFFALSE 54911
// begin team := i ;
54899: LD_ADDR_VAR 0 5
54903: PUSH
54904: LD_VAR 0 3
54908: ST_TO_ADDR
// break ;
54909: GO 54913
// end ;
54911: GO 54878
54913: POP
54914: POP
// if not team then
54915: LD_VAR 0 5
54919: NOT
54920: IFFALSE 54924
// exit ;
54922: GO 55138
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54924: LD_EXP 32
54928: PPUSH
54929: LD_INT 81
54931: PUSH
54932: LD_VAR 0 6
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PPUSH
54941: CALL_OW 70
54945: IFFALSE 54949
// exit ;
54947: GO 55138
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54949: LD_ADDR_EXP 47
54953: PUSH
54954: LD_EXP 47
54958: PPUSH
54959: LD_VAR 0 5
54963: PPUSH
54964: LD_EXP 47
54968: PUSH
54969: LD_VAR 0 5
54973: ARRAY
54974: PUSH
54975: LD_INT 1
54977: PLUS
54978: PPUSH
54979: CALL_OW 1
54983: ST_TO_ADDR
// for i in mpTeams [ team ] do
54984: LD_ADDR_VAR 0 3
54988: PUSH
54989: LD_EXP 8
54993: PUSH
54994: LD_VAR 0 5
54998: ARRAY
54999: PUSH
55000: FOR_IN
55001: IFFALSE 55025
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55003: LD_VAR 0 3
55007: PPUSH
55008: LD_EXP 47
55012: PUSH
55013: LD_VAR 0 5
55017: ARRAY
55018: PPUSH
55019: CALL_OW 506
55023: GO 55000
55025: POP
55026: POP
// end else
55027: GO 55138
// begin first := depots [ 1 ] ;
55029: LD_ADDR_VAR 0 4
55033: PUSH
55034: LD_VAR 0 1
55038: PUSH
55039: LD_INT 1
55041: ARRAY
55042: ST_TO_ADDR
// side := GetSide ( first ) ;
55043: LD_ADDR_VAR 0 6
55047: PUSH
55048: LD_VAR 0 4
55052: PPUSH
55053: CALL_OW 255
55057: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55058: LD_EXP 32
55062: PPUSH
55063: LD_INT 81
55065: PUSH
55066: LD_VAR 0 6
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PPUSH
55075: CALL_OW 70
55079: IFFALSE 55083
// exit ;
55081: GO 55138
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55083: LD_ADDR_EXP 47
55087: PUSH
55088: LD_EXP 47
55092: PPUSH
55093: LD_VAR 0 6
55097: PPUSH
55098: LD_EXP 47
55102: PUSH
55103: LD_VAR 0 6
55107: ARRAY
55108: PUSH
55109: LD_INT 1
55111: PLUS
55112: PPUSH
55113: CALL_OW 1
55117: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55118: LD_VAR 0 6
55122: PPUSH
55123: LD_EXP 47
55127: PUSH
55128: LD_VAR 0 6
55132: ARRAY
55133: PPUSH
55134: CALL_OW 506
// end ; end ;
55138: LD_VAR 0 2
55142: RET
// function UpdateCounter ; var i ; begin
55143: LD_INT 0
55145: PPUSH
55146: PPUSH
// result := [ ] ;
55147: LD_ADDR_VAR 0 1
55151: PUSH
55152: EMPTY
55153: ST_TO_ADDR
// if mpTeamGame then
55154: LD_EXP 9
55158: IFFALSE 55225
// begin for i := 1 to mpTeams do
55160: LD_ADDR_VAR 0 2
55164: PUSH
55165: DOUBLE
55166: LD_INT 1
55168: DEC
55169: ST_TO_ADDR
55170: LD_EXP 8
55174: PUSH
55175: FOR_TO
55176: IFFALSE 55221
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55178: LD_ADDR_VAR 0 1
55182: PUSH
55183: LD_VAR 0 1
55187: PUSH
55188: LD_STRING #KingoftheHill-Team
55190: PUSH
55191: LD_VAR 0 2
55195: PUSH
55196: LD_EXP 47
55200: PUSH
55201: LD_VAR 0 2
55205: ARRAY
55206: PUSH
55207: LD_EXP 33
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: ADD
55218: ST_TO_ADDR
55219: GO 55175
55221: POP
55222: POP
// end else
55223: GO 55298
// begin for i := 1 to 8 do
55225: LD_ADDR_VAR 0 2
55229: PUSH
55230: DOUBLE
55231: LD_INT 1
55233: DEC
55234: ST_TO_ADDR
55235: LD_INT 8
55237: PUSH
55238: FOR_TO
55239: IFFALSE 55296
// if mpSidePositions [ i ] then
55241: LD_EXP 5
55245: PUSH
55246: LD_VAR 0 2
55250: ARRAY
55251: IFFALSE 55294
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55253: LD_ADDR_VAR 0 1
55257: PUSH
55258: LD_VAR 0 1
55262: PUSH
55263: LD_STRING #KingoftheHill-Player
55265: PUSH
55266: LD_VAR 0 2
55270: PUSH
55271: LD_EXP 47
55275: PUSH
55276: LD_VAR 0 2
55280: ARRAY
55281: PUSH
55282: LD_EXP 33
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: ADD
55293: ST_TO_ADDR
55294: GO 55238
55296: POP
55297: POP
// end ; mpDisplayStrings := result ;
55298: LD_ADDR_EXP 36
55302: PUSH
55303: LD_VAR 0 1
55307: ST_TO_ADDR
// end ;
55308: LD_VAR 0 1
55312: RET
// export function HowMuchPointsKing ( side ) ; begin
55313: LD_INT 0
55315: PPUSH
// result := HowMuchPoints ( side ) ;
55316: LD_ADDR_VAR 0 2
55320: PUSH
55321: LD_VAR 0 1
55325: PPUSH
55326: CALL 55336 0 1
55330: ST_TO_ADDR
// end ;
55331: LD_VAR 0 2
55335: RET
// function HowMuchPoints ( side ) ; var i ; begin
55336: LD_INT 0
55338: PPUSH
55339: PPUSH
// if mpTeamGame then
55340: LD_EXP 9
55344: IFFALSE 55413
// begin for i := 1 to Count ( mpTeams ) do
55346: LD_ADDR_VAR 0 3
55350: PUSH
55351: DOUBLE
55352: LD_INT 1
55354: DEC
55355: ST_TO_ADDR
55356: LD_EXP 8
55360: PPUSH
55361: CALL 5091 0 1
55365: PUSH
55366: FOR_TO
55367: IFFALSE 55409
// begin if side in mpTeams [ i ] then
55369: LD_VAR 0 1
55373: PUSH
55374: LD_EXP 8
55378: PUSH
55379: LD_VAR 0 3
55383: ARRAY
55384: IN
55385: IFFALSE 55407
// begin result := mpKingPoints [ i ] ;
55387: LD_ADDR_VAR 0 2
55391: PUSH
55392: LD_EXP 47
55396: PUSH
55397: LD_VAR 0 3
55401: ARRAY
55402: ST_TO_ADDR
// exit ;
55403: POP
55404: POP
55405: GO 55429
// end ; end ;
55407: GO 55366
55409: POP
55410: POP
// end else
55411: GO 55429
// result := mpKingPoints [ side ] ;
55413: LD_ADDR_VAR 0 2
55417: PUSH
55418: LD_EXP 47
55422: PUSH
55423: LD_VAR 0 1
55427: ARRAY
55428: ST_TO_ADDR
// end ;
55429: LD_VAR 0 2
55433: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55434: LD_EXP 37
55438: IFFALSE 55446
55440: PUSH
55441: CALL 55858 0 0
55445: AND
55446: IFFALSE 55454
55448: PUSH
55449: LD_OWVAR 4
55453: AND
55454: IFFALSE 55707
55456: GO 55458
55458: DISABLE
55459: LD_INT 0
55461: PPUSH
55462: PPUSH
// begin canWin := false ;
55463: LD_ADDR_VAR 0 2
55467: PUSH
55468: LD_INT 0
55470: ST_TO_ADDR
// if not HasPower ( your_side ) then
55471: LD_OWVAR 2
55475: PPUSH
55476: CALL 55900 0 1
55480: NOT
55481: IFFALSE 55492
// begin Multiplayer_Loose_Message ;
55483: CALL_OW 521
// enable ( mpLose ) ;
55487: LD_INT 102
55489: ENABLE_MARKED
// end else
55490: GO 55707
// begin if not EnemiesInGame then
55492: CALL 55710 0 0
55496: NOT
55497: IFFALSE 55504
// begin enable ( mpWin ) ;
55499: LD_INT 101
55501: ENABLE_MARKED
// exit ;
55502: GO 55707
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55504: LD_ADDR_VAR 0 2
55508: PUSH
55509: LD_OWVAR 2
55513: PPUSH
55514: CALL 55336 0 1
55518: PUSH
55519: LD_EXP 33
55523: GREATEREQUAL
55524: IFFALSE 55537
55526: PUSH
55527: LD_OWVAR 2
55531: PPUSH
55532: CALL 55900 0 1
55536: AND
55537: ST_TO_ADDR
// for i := 1 to 8 do
55538: LD_ADDR_VAR 0 1
55542: PUSH
55543: DOUBLE
55544: LD_INT 1
55546: DEC
55547: ST_TO_ADDR
55548: LD_INT 8
55550: PUSH
55551: FOR_TO
55552: IFFALSE 55693
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55554: LD_EXP 5
55558: PUSH
55559: LD_VAR 0 1
55563: ARRAY
55564: IFFALSE 55577
55566: PUSH
55567: LD_VAR 0 1
55571: PPUSH
55572: CALL_OW 108
55576: AND
55577: IFFALSE 55591
55579: PUSH
55580: LD_VAR 0 1
55584: PUSH
55585: LD_OWVAR 2
55589: NONEQUAL
55590: AND
55591: IFFALSE 55691
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55593: LD_EXP 6
55597: PUSH
55598: LD_VAR 0 1
55602: ARRAY
55603: NOT
55604: IFTRUE 55652
55606: PUSH
55607: LD_EXP 6
55611: PUSH
55612: LD_VAR 0 1
55616: ARRAY
55617: PUSH
55618: LD_EXP 6
55622: PUSH
55623: LD_OWVAR 2
55627: ARRAY
55628: NONEQUAL
55629: IFFALSE 55651
55631: PUSH
55632: LD_OWVAR 2
55636: PPUSH
55637: LD_VAR 0 1
55641: PPUSH
55642: CALL_OW 81
55646: PUSH
55647: LD_INT 1
55649: NONEQUAL
55650: AND
55651: OR
55652: IFFALSE 55691
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL 55336 0 1
55663: PUSH
55664: LD_EXP 33
55668: GREATEREQUAL
55669: IFFALSE 55682
55671: PUSH
55672: LD_VAR 0 1
55676: PPUSH
55677: CALL 55900 0 1
55681: AND
55682: IFFALSE 55691
// begin enable ( mpLose ) ;
55684: LD_INT 102
55686: ENABLE_MARKED
// exit ;
55687: POP
55688: POP
55689: GO 55707
// end ;
55691: GO 55551
55693: POP
55694: POP
// if canWin then
55695: LD_VAR 0 2
55699: IFFALSE 55706
// enable ( mpWin ) else
55701: LD_INT 101
55703: ENABLE_MARKED
55704: GO 55707
// enable ;
55706: ENABLE
// end ; end ;
55707: PPOPN 2
55709: END
// function EnemiesInGame ; var i ; begin
55710: LD_INT 0
55712: PPUSH
55713: PPUSH
// result := false ;
55714: LD_ADDR_VAR 0 1
55718: PUSH
55719: LD_INT 0
55721: ST_TO_ADDR
// for i := 1 to 8 do
55722: LD_ADDR_VAR 0 2
55726: PUSH
55727: DOUBLE
55728: LD_INT 1
55730: DEC
55731: ST_TO_ADDR
55732: LD_INT 8
55734: PUSH
55735: FOR_TO
55736: IFFALSE 55851
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55738: LD_VAR 0 2
55742: PUSH
55743: LD_OWVAR 2
55747: NONEQUAL
55748: IFFALSE 55761
55750: PUSH
55751: LD_VAR 0 2
55755: PPUSH
55756: CALL 55900 0 1
55760: AND
55761: IFFALSE 55774
55763: PUSH
55764: LD_VAR 0 2
55768: PPUSH
55769: CALL_OW 108
55773: AND
55774: IFFALSE 55849
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55776: LD_EXP 6
55780: PUSH
55781: LD_VAR 0 2
55785: ARRAY
55786: NOT
55787: IFTRUE 55835
55789: PUSH
55790: LD_EXP 6
55794: PUSH
55795: LD_VAR 0 2
55799: ARRAY
55800: PUSH
55801: LD_EXP 6
55805: PUSH
55806: LD_OWVAR 2
55810: ARRAY
55811: NONEQUAL
55812: IFFALSE 55834
55814: PUSH
55815: LD_OWVAR 2
55819: PPUSH
55820: LD_VAR 0 2
55824: PPUSH
55825: CALL_OW 81
55829: PUSH
55830: LD_INT 1
55832: NONEQUAL
55833: AND
55834: OR
55835: IFFALSE 55849
// begin result := true ;
55837: LD_ADDR_VAR 0 1
55841: PUSH
55842: LD_INT 1
55844: ST_TO_ADDR
// exit ;
55845: POP
55846: POP
55847: GO 55853
// end ;
55849: GO 55735
55851: POP
55852: POP
// end ;
55853: LD_VAR 0 1
55857: RET
// function CanWinLoose ; begin
55858: LD_INT 0
55860: PPUSH
// result := true ;
55861: LD_ADDR_VAR 0 1
55865: PUSH
55866: LD_INT 1
55868: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55869: CALL_OW 531
55873: IFFALSE 55885
55875: PUSH
55876: CALL_OW 519
55880: PUSH
55881: LD_INT 1
55883: GREATER
55884: AND
55885: IFFALSE 55895
// result := false ;
55887: LD_ADDR_VAR 0 1
55891: PUSH
55892: LD_INT 0
55894: ST_TO_ADDR
// end ;
55895: LD_VAR 0 1
55899: RET
// function HasPower ( i ) ; begin
55900: LD_INT 0
55902: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55903: LD_ADDR_VAR 0 2
55907: PUSH
55908: LD_INT 22
55910: PUSH
55911: LD_VAR 0 1
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: LD_INT 21
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 33
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 33
55945: PUSH
55946: LD_INT 5
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PPUSH
55963: CALL_OW 69
55967: ST_TO_ADDR
// end ; end_of_file end_of_file
55968: LD_VAR 0 2
55972: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55973: LD_VAR 0 1
55977: PUSH
55978: LD_INT 200
55980: DOUBLE
55981: GREATEREQUAL
55982: IFFALSE 55990
55984: LD_INT 299
55986: DOUBLE
55987: LESSEQUAL
55988: IFTRUE 55992
55990: GO 56024
55992: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55993: LD_VAR 0 1
55997: PPUSH
55998: LD_VAR 0 2
56002: PPUSH
56003: LD_VAR 0 3
56007: PPUSH
56008: LD_VAR 0 4
56012: PPUSH
56013: LD_VAR 0 5
56017: PPUSH
56018: CALL 56886 0 5
56022: GO 56101
56024: LD_INT 300
56026: DOUBLE
56027: GREATEREQUAL
56028: IFFALSE 56036
56030: LD_INT 399
56032: DOUBLE
56033: LESSEQUAL
56034: IFTRUE 56038
56036: GO 56100
56038: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56039: LD_VAR 0 1
56043: PPUSH
56044: LD_VAR 0 2
56048: PPUSH
56049: LD_VAR 0 3
56053: PPUSH
56054: LD_VAR 0 4
56058: PPUSH
56059: LD_VAR 0 5
56063: PPUSH
56064: LD_VAR 0 6
56068: PPUSH
56069: LD_VAR 0 7
56073: PPUSH
56074: LD_VAR 0 8
56078: PPUSH
56079: LD_VAR 0 9
56083: PPUSH
56084: LD_VAR 0 10
56088: PPUSH
56089: LD_VAR 0 11
56093: PPUSH
56094: CALL 63207 0 11
56098: GO 56101
56100: POP
// end ;
56101: PPOPN 11
56103: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56104: LD_VAR 0 1
56108: PPUSH
56109: LD_VAR 0 2
56113: PPUSH
56114: LD_VAR 0 3
56118: PPUSH
56119: LD_VAR 0 4
56123: PPUSH
56124: LD_VAR 0 5
56128: PPUSH
56129: CALL 56186 0 5
// end ; end_of_file
56133: PPOPN 5
56135: END
// export function SOS_UnitDestroyed ( un ) ; begin
56136: LD_INT 0
56138: PPUSH
// ComRadiation ( un ) ;
56139: LD_VAR 0 1
56143: PPUSH
56144: CALL 57306 0 1
// end ;
56148: LD_VAR 0 2
56152: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56153: LD_INT 0
56155: PPUSH
// ComRadiation ( un ) ;
56156: LD_VAR 0 1
56160: PPUSH
56161: CALL 57306 0 1
// end ;
56165: LD_VAR 0 2
56169: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56170: LD_INT 0
56172: PPUSH
// end ;
56173: LD_VAR 0 4
56177: RET
// export function SOS_Command ( cmd ) ; begin
56178: LD_INT 0
56180: PPUSH
// end ;
56181: LD_VAR 0 2
56185: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56186: LD_INT 0
56188: PPUSH
// end ;
56189: LD_VAR 0 6
56193: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56194: LD_INT 0
56196: PPUSH
56197: PPUSH
56198: PPUSH
56199: PPUSH
56200: PPUSH
// if not vehicle or not factory then
56201: LD_VAR 0 1
56205: NOT
56206: IFTRUE 56215
56208: PUSH
56209: LD_VAR 0 2
56213: NOT
56214: OR
56215: IFFALSE 56219
// exit ;
56217: GO 56881
// weapon := GetWeapon ( vehicle ) ;
56219: LD_ADDR_VAR 0 7
56223: PUSH
56224: LD_VAR 0 1
56228: PPUSH
56229: CALL_OW 264
56233: ST_TO_ADDR
// if weapon = ar_miner then
56234: LD_VAR 0 7
56238: PUSH
56239: LD_INT 81
56241: EQUAL
56242: IFFALSE 56299
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56244: LD_ADDR_EXP 55
56248: PUSH
56249: LD_EXP 55
56253: PPUSH
56254: LD_EXP 55
56258: PUSH
56259: LD_INT 1
56261: PLUS
56262: PPUSH
56263: LD_VAR 0 1
56267: PPUSH
56268: CALL_OW 1
56272: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56273: LD_ADDR_EXP 56
56277: PUSH
56278: LD_EXP 56
56282: PPUSH
56283: LD_EXP 56
56287: PUSH
56288: LD_INT 1
56290: PLUS
56291: PPUSH
56292: EMPTY
56293: PPUSH
56294: CALL_OW 1
56298: ST_TO_ADDR
// end ; if not factoryWaypoints then
56299: LD_EXP 58
56303: NOT
56304: IFFALSE 56308
// exit ;
56306: GO 56881
// for i := 1 to Count ( factoryWaypoints ) do
56308: LD_ADDR_VAR 0 4
56312: PUSH
56313: DOUBLE
56314: LD_INT 1
56316: DEC
56317: ST_TO_ADDR
56318: LD_EXP 58
56322: PPUSH
56323: CALL 5091 0 1
56327: PUSH
56328: FOR_TO
56329: IFFALSE 56879
// if factoryWaypoints [ i ] [ 2 ] = factory then
56331: LD_EXP 58
56335: PUSH
56336: LD_VAR 0 4
56340: ARRAY
56341: PUSH
56342: LD_INT 2
56344: ARRAY
56345: PUSH
56346: LD_VAR 0 2
56350: EQUAL
56351: IFFALSE 56877
// begin if GetControl ( vehicle ) = control_manual then
56353: LD_VAR 0 1
56357: PPUSH
56358: CALL_OW 263
56362: PUSH
56363: LD_INT 1
56365: EQUAL
56366: IFFALSE 56730
// begin driver := IsDrivenBy ( vehicle ) ;
56368: LD_ADDR_VAR 0 5
56372: PUSH
56373: LD_VAR 0 1
56377: PPUSH
56378: CALL_OW 311
56382: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56383: LD_VAR 0 5
56387: PUSH
56388: LD_EXP 59
56392: IN
56393: IFTRUE 56407
56395: PUSH
56396: LD_VAR 0 1
56400: PUSH
56401: LD_EXP 59
56405: IN
56406: OR
56407: IFFALSE 56413
// exit ;
56409: POP
56410: POP
56411: GO 56881
// if not HasTask ( driver ) then
56413: LD_VAR 0 5
56417: PPUSH
56418: CALL_OW 314
56422: NOT
56423: IFFALSE 56728
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56425: LD_ADDR_EXP 59
56429: PUSH
56430: LD_EXP 59
56434: PPUSH
56435: LD_VAR 0 5
56439: PPUSH
56440: CALL 41057 0 2
56444: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56445: LD_ADDR_EXP 59
56449: PUSH
56450: LD_EXP 59
56454: PPUSH
56455: LD_VAR 0 1
56459: PPUSH
56460: CALL 41057 0 2
56464: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56465: LD_ADDR_VAR 0 6
56469: PUSH
56470: LD_EXP 58
56474: PUSH
56475: LD_VAR 0 4
56479: ARRAY
56480: PUSH
56481: LD_INT 3
56483: ARRAY
56484: PPUSH
56485: LD_EXP 58
56489: PUSH
56490: LD_VAR 0 4
56494: ARRAY
56495: PUSH
56496: LD_INT 4
56498: ARRAY
56499: PPUSH
56500: CALL_OW 428
56504: ST_TO_ADDR
// if hex then
56505: LD_VAR 0 6
56509: IFFALSE 56527
// ComMoveUnit ( driver , hex ) else
56511: LD_VAR 0 5
56515: PPUSH
56516: LD_VAR 0 6
56520: PPUSH
56521: CALL_OW 112
56525: GO 56611
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56527: LD_VAR 0 1
56531: PPUSH
56532: LD_EXP 58
56536: PUSH
56537: LD_VAR 0 4
56541: ARRAY
56542: PUSH
56543: LD_INT 3
56545: ARRAY
56546: PPUSH
56547: LD_EXP 58
56551: PUSH
56552: LD_VAR 0 4
56556: ARRAY
56557: PUSH
56558: LD_INT 4
56560: ARRAY
56561: PPUSH
56562: CALL_OW 297
56566: PUSH
56567: LD_INT 0
56569: GREATER
56570: IFFALSE 56611
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56572: LD_VAR 0 5
56576: PPUSH
56577: LD_EXP 58
56581: PUSH
56582: LD_VAR 0 4
56586: ARRAY
56587: PUSH
56588: LD_INT 3
56590: ARRAY
56591: PPUSH
56592: LD_EXP 58
56596: PUSH
56597: LD_VAR 0 4
56601: ARRAY
56602: PUSH
56603: LD_INT 4
56605: ARRAY
56606: PPUSH
56607: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56611: LD_VAR 0 5
56615: PPUSH
56616: CALL_OW 181
// if Multiplayer then
56620: LD_OWVAR 4
56624: IFFALSE 56673
// begin repeat wait ( 10 ) ;
56626: LD_INT 10
56628: PPUSH
56629: CALL_OW 67
// until not IsInUnit ( driver ) ;
56633: LD_VAR 0 5
56637: PPUSH
56638: CALL_OW 310
56642: NOT
56643: IFFALSE 56626
// if not HasTask ( driver ) then
56645: LD_VAR 0 5
56649: PPUSH
56650: CALL_OW 314
56654: NOT
56655: IFFALSE 56671
// ComEnterUnit ( driver , factory ) ;
56657: LD_VAR 0 5
56661: PPUSH
56662: LD_VAR 0 2
56666: PPUSH
56667: CALL_OW 120
// end else
56671: GO 56687
// AddComEnterUnit ( driver , factory ) ;
56673: LD_VAR 0 5
56677: PPUSH
56678: LD_VAR 0 2
56682: PPUSH
56683: CALL_OW 180
// wait ( 0 0$1 ) ;
56687: LD_INT 35
56689: PPUSH
56690: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56694: LD_ADDR_EXP 59
56698: PUSH
56699: LD_EXP 59
56703: PUSH
56704: LD_VAR 0 5
56708: DIFF
56709: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56710: LD_ADDR_EXP 59
56714: PUSH
56715: LD_EXP 59
56719: PUSH
56720: LD_VAR 0 1
56724: DIFF
56725: ST_TO_ADDR
// break ;
56726: GO 56879
// end ; end else
56728: GO 56877
// if GetControl ( vehicle ) = control_remote then
56730: LD_VAR 0 1
56734: PPUSH
56735: CALL_OW 263
56739: PUSH
56740: LD_INT 2
56742: EQUAL
56743: IFFALSE 56829
// begin wait ( 0 0$2 ) ;
56745: LD_INT 70
56747: PPUSH
56748: CALL_OW 67
// repeat wait ( 10 ) ;
56752: LD_INT 10
56754: PPUSH
56755: CALL_OW 67
// Connect ( vehicle ) ;
56759: LD_VAR 0 1
56763: PPUSH
56764: CALL 11369 0 1
// until IsControledBy ( vehicle ) ;
56768: LD_VAR 0 1
56772: PPUSH
56773: CALL_OW 312
56777: IFFALSE 56752
// wait ( 10 ) ;
56779: LD_INT 10
56781: PPUSH
56782: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56786: LD_VAR 0 1
56790: PPUSH
56791: LD_EXP 58
56795: PUSH
56796: LD_VAR 0 4
56800: ARRAY
56801: PUSH
56802: LD_INT 3
56804: ARRAY
56805: PPUSH
56806: LD_EXP 58
56810: PUSH
56811: LD_VAR 0 4
56815: ARRAY
56816: PUSH
56817: LD_INT 4
56819: ARRAY
56820: PPUSH
56821: CALL_OW 111
// break ;
56825: GO 56879
// end else
56827: GO 56877
// begin wait ( 0 0$3 ) ;
56829: LD_INT 105
56831: PPUSH
56832: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56836: LD_VAR 0 1
56840: PPUSH
56841: LD_EXP 58
56845: PUSH
56846: LD_VAR 0 4
56850: ARRAY
56851: PUSH
56852: LD_INT 3
56854: ARRAY
56855: PPUSH
56856: LD_EXP 58
56860: PUSH
56861: LD_VAR 0 4
56865: ARRAY
56866: PUSH
56867: LD_INT 4
56869: ARRAY
56870: PPUSH
56871: CALL_OW 111
// break ;
56875: GO 56879
// end ; end ;
56877: GO 56328
56879: POP
56880: POP
// end ;
56881: LD_VAR 0 3
56885: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56886: LD_INT 0
56888: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56889: LD_VAR 0 1
56893: PUSH
56894: LD_INT 250
56896: EQUAL
56897: IFFALSE 56914
56899: PUSH
56900: LD_VAR 0 2
56904: PPUSH
56905: CALL_OW 264
56909: PUSH
56910: LD_INT 81
56912: EQUAL
56913: AND
56914: IFFALSE 56935
// MinerPlaceMine ( unit , x , y ) ;
56916: LD_VAR 0 2
56920: PPUSH
56921: LD_VAR 0 4
56925: PPUSH
56926: LD_VAR 0 5
56930: PPUSH
56931: CALL 60216 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56935: LD_VAR 0 1
56939: PUSH
56940: LD_INT 251
56942: EQUAL
56943: IFFALSE 56960
56945: PUSH
56946: LD_VAR 0 2
56950: PPUSH
56951: CALL_OW 264
56955: PUSH
56956: LD_INT 81
56958: EQUAL
56959: AND
56960: IFFALSE 56981
// MinerDetonateMine ( unit , x , y ) ;
56962: LD_VAR 0 2
56966: PPUSH
56967: LD_VAR 0 4
56971: PPUSH
56972: LD_VAR 0 5
56976: PPUSH
56977: CALL 60623 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56981: LD_VAR 0 1
56985: PUSH
56986: LD_INT 252
56988: EQUAL
56989: IFFALSE 57006
56991: PUSH
56992: LD_VAR 0 2
56996: PPUSH
56997: CALL_OW 264
57001: PUSH
57002: LD_INT 81
57004: EQUAL
57005: AND
57006: IFFALSE 57027
// MinerCreateMinefield ( unit , x , y ) ;
57008: LD_VAR 0 2
57012: PPUSH
57013: LD_VAR 0 4
57017: PPUSH
57018: LD_VAR 0 5
57022: PPUSH
57023: CALL 60855 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57027: LD_VAR 0 1
57031: PUSH
57032: LD_INT 253
57034: EQUAL
57035: IFFALSE 57052
57037: PUSH
57038: LD_VAR 0 2
57042: PPUSH
57043: CALL_OW 257
57047: PUSH
57048: LD_INT 5
57050: EQUAL
57051: AND
57052: IFFALSE 57073
// ComBinocular ( unit , x , y ) ;
57054: LD_VAR 0 2
57058: PPUSH
57059: LD_VAR 0 4
57063: PPUSH
57064: LD_VAR 0 5
57068: PPUSH
57069: CALL 61230 0 3
// if selectedUnit then
57073: LD_VAR 0 3
57077: IFFALSE 57137
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57079: LD_VAR 0 1
57083: PUSH
57084: LD_INT 254
57086: EQUAL
57087: IFFALSE 57104
57089: PUSH
57090: LD_VAR 0 2
57094: PPUSH
57095: CALL_OW 264
57099: PUSH
57100: LD_INT 99
57102: EQUAL
57103: AND
57104: IFFALSE 57121
57106: PUSH
57107: LD_VAR 0 3
57111: PPUSH
57112: CALL_OW 263
57116: PUSH
57117: LD_INT 3
57119: EQUAL
57120: AND
57121: IFFALSE 57137
// HackDestroyVehicle ( unit , selectedUnit ) ;
57123: LD_VAR 0 2
57127: PPUSH
57128: LD_VAR 0 3
57132: PPUSH
57133: CALL 59427 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57137: LD_VAR 0 1
57141: PUSH
57142: LD_INT 255
57144: EQUAL
57145: IFFALSE 57169
57147: PUSH
57148: LD_VAR 0 2
57152: PPUSH
57153: CALL_OW 264
57157: PUSH
57158: LD_INT 14
57160: PUSH
57161: LD_INT 53
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: IN
57168: AND
57169: IFFALSE 57187
57171: PUSH
57172: LD_VAR 0 4
57176: PPUSH
57177: LD_VAR 0 5
57181: PPUSH
57182: CALL_OW 488
57186: AND
57187: IFFALSE 57211
// CutTreeXYR ( unit , x , y , 12 ) ;
57189: LD_VAR 0 2
57193: PPUSH
57194: LD_VAR 0 4
57198: PPUSH
57199: LD_VAR 0 5
57203: PPUSH
57204: LD_INT 12
57206: PPUSH
57207: CALL 57402 0 4
// if cmd = 256 then
57211: LD_VAR 0 1
57215: PUSH
57216: LD_INT 256
57218: EQUAL
57219: IFFALSE 57240
// SetFactoryWaypoint ( unit , x , y ) ;
57221: LD_VAR 0 2
57225: PPUSH
57226: LD_VAR 0 4
57230: PPUSH
57231: LD_VAR 0 5
57235: PPUSH
57236: CALL 63215 0 3
// if cmd = 257 then
57240: LD_VAR 0 1
57244: PUSH
57245: LD_INT 257
57247: EQUAL
57248: IFFALSE 57269
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57250: LD_VAR 0 2
57254: PPUSH
57255: LD_VAR 0 4
57259: PPUSH
57260: LD_VAR 0 5
57264: PPUSH
57265: CALL 63711 0 3
// if cmd = 258 then
57269: LD_VAR 0 1
57273: PUSH
57274: LD_INT 258
57276: EQUAL
57277: IFFALSE 57301
// BurnTreeXYR ( unit , x , y , 8 ) ;
57279: LD_VAR 0 2
57283: PPUSH
57284: LD_VAR 0 4
57288: PPUSH
57289: LD_VAR 0 5
57293: PPUSH
57294: LD_INT 8
57296: PPUSH
57297: CALL 57802 0 4
// end ;
57301: LD_VAR 0 6
57305: RET
// export function ComRadiation ( un ) ; var eff ; begin
57306: LD_INT 0
57308: PPUSH
57309: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57310: LD_VAR 0 1
57314: PPUSH
57315: CALL_OW 264
57319: PUSH
57320: LD_INT 91
57322: NONEQUAL
57323: IFFALSE 57327
// exit ;
57325: GO 57397
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57327: LD_INT 68
57329: PPUSH
57330: LD_VAR 0 1
57334: PPUSH
57335: CALL_OW 255
57339: PPUSH
57340: CALL_OW 321
57344: PUSH
57345: LD_INT 2
57347: EQUAL
57348: IFFALSE 57360
// eff := 50 else
57350: LD_ADDR_VAR 0 3
57354: PUSH
57355: LD_INT 50
57357: ST_TO_ADDR
57358: GO 57368
// eff := 25 ;
57360: LD_ADDR_VAR 0 3
57364: PUSH
57365: LD_INT 25
57367: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57368: LD_VAR 0 1
57372: PPUSH
57373: CALL_OW 250
57377: PPUSH
57378: LD_VAR 0 1
57382: PPUSH
57383: CALL_OW 251
57387: PPUSH
57388: LD_VAR 0 3
57392: PPUSH
57393: CALL_OW 495
// end ;
57397: LD_VAR 0 2
57401: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57402: LD_INT 0
57404: PPUSH
57405: PPUSH
57406: PPUSH
57407: PPUSH
57408: PPUSH
57409: PPUSH
57410: PPUSH
57411: PPUSH
57412: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57413: LD_VAR 0 1
57417: PPUSH
57418: CALL_OW 302
57422: NOT
57423: IFTRUE 57442
57425: PUSH
57426: LD_VAR 0 2
57430: PPUSH
57431: LD_VAR 0 3
57435: PPUSH
57436: CALL_OW 488
57440: NOT
57441: OR
57442: IFTRUE 57451
57444: PUSH
57445: LD_VAR 0 4
57449: NOT
57450: OR
57451: IFFALSE 57455
// exit ;
57453: GO 57797
// list := [ ] ;
57455: LD_ADDR_VAR 0 13
57459: PUSH
57460: EMPTY
57461: ST_TO_ADDR
// if x - r < 0 then
57462: LD_VAR 0 2
57466: PUSH
57467: LD_VAR 0 4
57471: MINUS
57472: PUSH
57473: LD_INT 0
57475: LESS
57476: IFFALSE 57488
// min_x := 0 else
57478: LD_ADDR_VAR 0 7
57482: PUSH
57483: LD_INT 0
57485: ST_TO_ADDR
57486: GO 57504
// min_x := x - r ;
57488: LD_ADDR_VAR 0 7
57492: PUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_VAR 0 4
57502: MINUS
57503: ST_TO_ADDR
// if y - r < 0 then
57504: LD_VAR 0 3
57508: PUSH
57509: LD_VAR 0 4
57513: MINUS
57514: PUSH
57515: LD_INT 0
57517: LESS
57518: IFFALSE 57530
// min_y := 0 else
57520: LD_ADDR_VAR 0 8
57524: PUSH
57525: LD_INT 0
57527: ST_TO_ADDR
57528: GO 57546
// min_y := y - r ;
57530: LD_ADDR_VAR 0 8
57534: PUSH
57535: LD_VAR 0 3
57539: PUSH
57540: LD_VAR 0 4
57544: MINUS
57545: ST_TO_ADDR
// max_x := x + r ;
57546: LD_ADDR_VAR 0 9
57550: PUSH
57551: LD_VAR 0 2
57555: PUSH
57556: LD_VAR 0 4
57560: PLUS
57561: ST_TO_ADDR
// max_y := y + r ;
57562: LD_ADDR_VAR 0 10
57566: PUSH
57567: LD_VAR 0 3
57571: PUSH
57572: LD_VAR 0 4
57576: PLUS
57577: ST_TO_ADDR
// for _x = min_x to max_x do
57578: LD_ADDR_VAR 0 11
57582: PUSH
57583: DOUBLE
57584: LD_VAR 0 7
57588: DEC
57589: ST_TO_ADDR
57590: LD_VAR 0 9
57594: PUSH
57595: FOR_TO
57596: IFFALSE 57715
// for _y = min_y to max_y do
57598: LD_ADDR_VAR 0 12
57602: PUSH
57603: DOUBLE
57604: LD_VAR 0 8
57608: DEC
57609: ST_TO_ADDR
57610: LD_VAR 0 10
57614: PUSH
57615: FOR_TO
57616: IFFALSE 57711
// begin if not ValidHex ( _x , _y ) then
57618: LD_VAR 0 11
57622: PPUSH
57623: LD_VAR 0 12
57627: PPUSH
57628: CALL_OW 488
57632: NOT
57633: IFFALSE 57637
// continue ;
57635: GO 57615
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57637: LD_VAR 0 11
57641: PPUSH
57642: LD_VAR 0 12
57646: PPUSH
57647: CALL_OW 351
57651: IFFALSE 57669
57653: PUSH
57654: LD_VAR 0 11
57658: PPUSH
57659: LD_VAR 0 12
57663: PPUSH
57664: CALL_OW 554
57668: AND
57669: IFFALSE 57709
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57671: LD_ADDR_VAR 0 13
57675: PUSH
57676: LD_VAR 0 13
57680: PPUSH
57681: LD_VAR 0 13
57685: PUSH
57686: LD_INT 1
57688: PLUS
57689: PPUSH
57690: LD_VAR 0 11
57694: PUSH
57695: LD_VAR 0 12
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PPUSH
57704: CALL_OW 2
57708: ST_TO_ADDR
// end ;
57709: GO 57615
57711: POP
57712: POP
57713: GO 57595
57715: POP
57716: POP
// if not list then
57717: LD_VAR 0 13
57721: NOT
57722: IFFALSE 57726
// exit ;
57724: GO 57797
// for i in list do
57726: LD_ADDR_VAR 0 6
57730: PUSH
57731: LD_VAR 0 13
57735: PUSH
57736: FOR_IN
57737: IFFALSE 57795
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57739: LD_VAR 0 1
57743: PPUSH
57744: LD_STRING M
57746: PUSH
57747: LD_VAR 0 6
57751: PUSH
57752: LD_INT 1
57754: ARRAY
57755: PUSH
57756: LD_VAR 0 6
57760: PUSH
57761: LD_INT 2
57763: ARRAY
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: PUSH
57786: EMPTY
57787: LIST
57788: PPUSH
57789: CALL_OW 447
57793: GO 57736
57795: POP
57796: POP
// end ;
57797: LD_VAR 0 5
57801: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57802: LD_INT 0
57804: PPUSH
57805: PPUSH
57806: PPUSH
57807: PPUSH
57808: PPUSH
57809: PPUSH
57810: PPUSH
57811: PPUSH
57812: PPUSH
57813: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57814: LD_VAR 0 1
57818: PPUSH
57819: CALL_OW 302
57823: NOT
57824: IFTRUE 57843
57826: PUSH
57827: LD_VAR 0 2
57831: PPUSH
57832: LD_VAR 0 3
57836: PPUSH
57837: CALL_OW 488
57841: NOT
57842: OR
57843: IFTRUE 57852
57845: PUSH
57846: LD_VAR 0 4
57850: NOT
57851: OR
57852: IFFALSE 57856
// exit ;
57854: GO 58373
// list := [ ] ;
57856: LD_ADDR_VAR 0 13
57860: PUSH
57861: EMPTY
57862: ST_TO_ADDR
// if x - r < 0 then
57863: LD_VAR 0 2
57867: PUSH
57868: LD_VAR 0 4
57872: MINUS
57873: PUSH
57874: LD_INT 0
57876: LESS
57877: IFFALSE 57889
// min_x := 0 else
57879: LD_ADDR_VAR 0 7
57883: PUSH
57884: LD_INT 0
57886: ST_TO_ADDR
57887: GO 57905
// min_x := x - r ;
57889: LD_ADDR_VAR 0 7
57893: PUSH
57894: LD_VAR 0 2
57898: PUSH
57899: LD_VAR 0 4
57903: MINUS
57904: ST_TO_ADDR
// if y - r < 0 then
57905: LD_VAR 0 3
57909: PUSH
57910: LD_VAR 0 4
57914: MINUS
57915: PUSH
57916: LD_INT 0
57918: LESS
57919: IFFALSE 57931
// min_y := 0 else
57921: LD_ADDR_VAR 0 8
57925: PUSH
57926: LD_INT 0
57928: ST_TO_ADDR
57929: GO 57947
// min_y := y - r ;
57931: LD_ADDR_VAR 0 8
57935: PUSH
57936: LD_VAR 0 3
57940: PUSH
57941: LD_VAR 0 4
57945: MINUS
57946: ST_TO_ADDR
// max_x := x + r ;
57947: LD_ADDR_VAR 0 9
57951: PUSH
57952: LD_VAR 0 2
57956: PUSH
57957: LD_VAR 0 4
57961: PLUS
57962: ST_TO_ADDR
// max_y := y + r ;
57963: LD_ADDR_VAR 0 10
57967: PUSH
57968: LD_VAR 0 3
57972: PUSH
57973: LD_VAR 0 4
57977: PLUS
57978: ST_TO_ADDR
// for _x = min_x to max_x do
57979: LD_ADDR_VAR 0 11
57983: PUSH
57984: DOUBLE
57985: LD_VAR 0 7
57989: DEC
57990: ST_TO_ADDR
57991: LD_VAR 0 9
57995: PUSH
57996: FOR_TO
57997: IFFALSE 58116
// for _y = min_y to max_y do
57999: LD_ADDR_VAR 0 12
58003: PUSH
58004: DOUBLE
58005: LD_VAR 0 8
58009: DEC
58010: ST_TO_ADDR
58011: LD_VAR 0 10
58015: PUSH
58016: FOR_TO
58017: IFFALSE 58112
// begin if not ValidHex ( _x , _y ) then
58019: LD_VAR 0 11
58023: PPUSH
58024: LD_VAR 0 12
58028: PPUSH
58029: CALL_OW 488
58033: NOT
58034: IFFALSE 58038
// continue ;
58036: GO 58016
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58038: LD_VAR 0 11
58042: PPUSH
58043: LD_VAR 0 12
58047: PPUSH
58048: CALL_OW 351
58052: IFFALSE 58070
58054: PUSH
58055: LD_VAR 0 11
58059: PPUSH
58060: LD_VAR 0 12
58064: PPUSH
58065: CALL_OW 554
58069: AND
58070: IFFALSE 58110
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58072: LD_ADDR_VAR 0 13
58076: PUSH
58077: LD_VAR 0 13
58081: PPUSH
58082: LD_VAR 0 13
58086: PUSH
58087: LD_INT 1
58089: PLUS
58090: PPUSH
58091: LD_VAR 0 11
58095: PUSH
58096: LD_VAR 0 12
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PPUSH
58105: CALL_OW 2
58109: ST_TO_ADDR
// end ;
58110: GO 58016
58112: POP
58113: POP
58114: GO 57996
58116: POP
58117: POP
// if not list then
58118: LD_VAR 0 13
58122: NOT
58123: IFFALSE 58127
// exit ;
58125: GO 58373
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58127: LD_ADDR_VAR 0 13
58131: PUSH
58132: LD_VAR 0 1
58136: PPUSH
58137: LD_VAR 0 13
58141: PPUSH
58142: LD_INT 1
58144: PPUSH
58145: LD_INT 1
58147: PPUSH
58148: CALL 8497 0 4
58152: ST_TO_ADDR
// ComStop ( flame ) ;
58153: LD_VAR 0 1
58157: PPUSH
58158: CALL_OW 141
// for i in list do
58162: LD_ADDR_VAR 0 6
58166: PUSH
58167: LD_VAR 0 13
58171: PUSH
58172: FOR_IN
58173: IFFALSE 58204
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58175: LD_VAR 0 1
58179: PPUSH
58180: LD_VAR 0 6
58184: PUSH
58185: LD_INT 1
58187: ARRAY
58188: PPUSH
58189: LD_VAR 0 6
58193: PUSH
58194: LD_INT 2
58196: ARRAY
58197: PPUSH
58198: CALL_OW 176
58202: GO 58172
58204: POP
58205: POP
// repeat wait ( 0 0$1 ) ;
58206: LD_INT 35
58208: PPUSH
58209: CALL_OW 67
// task := GetTaskList ( flame ) ;
58213: LD_ADDR_VAR 0 14
58217: PUSH
58218: LD_VAR 0 1
58222: PPUSH
58223: CALL_OW 437
58227: ST_TO_ADDR
// if not task then
58228: LD_VAR 0 14
58232: NOT
58233: IFFALSE 58237
// exit ;
58235: GO 58373
// if task [ 1 ] [ 1 ] <> | then
58237: LD_VAR 0 14
58241: PUSH
58242: LD_INT 1
58244: ARRAY
58245: PUSH
58246: LD_INT 1
58248: ARRAY
58249: PUSH
58250: LD_STRING |
58252: NONEQUAL
58253: IFFALSE 58257
// exit ;
58255: GO 58373
// _x := task [ 1 ] [ 2 ] ;
58257: LD_ADDR_VAR 0 11
58261: PUSH
58262: LD_VAR 0 14
58266: PUSH
58267: LD_INT 1
58269: ARRAY
58270: PUSH
58271: LD_INT 2
58273: ARRAY
58274: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58275: LD_ADDR_VAR 0 12
58279: PUSH
58280: LD_VAR 0 14
58284: PUSH
58285: LD_INT 1
58287: ARRAY
58288: PUSH
58289: LD_INT 3
58291: ARRAY
58292: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58293: LD_VAR 0 11
58297: PPUSH
58298: LD_VAR 0 12
58302: PPUSH
58303: CALL_OW 351
58307: NOT
58308: IFTRUE 58327
58310: PUSH
58311: LD_VAR 0 11
58315: PPUSH
58316: LD_VAR 0 12
58320: PPUSH
58321: CALL_OW 554
58325: NOT
58326: OR
58327: IFFALSE 58361
// begin task := Delete ( task , 1 ) ;
58329: LD_ADDR_VAR 0 14
58333: PUSH
58334: LD_VAR 0 14
58338: PPUSH
58339: LD_INT 1
58341: PPUSH
58342: CALL_OW 3
58346: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58347: LD_VAR 0 1
58351: PPUSH
58352: LD_VAR 0 14
58356: PPUSH
58357: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58361: LD_VAR 0 1
58365: PPUSH
58366: CALL_OW 314
58370: NOT
58371: IFFALSE 58206
// end ;
58373: LD_VAR 0 5
58377: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58378: LD_EXP 48
58382: NOT
58383: IFFALSE 58433
58385: GO 58387
58387: DISABLE
// begin initHack := true ;
58388: LD_ADDR_EXP 48
58392: PUSH
58393: LD_INT 1
58395: ST_TO_ADDR
// hackTanks := [ ] ;
58396: LD_ADDR_EXP 49
58400: PUSH
58401: EMPTY
58402: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58403: LD_ADDR_EXP 50
58407: PUSH
58408: EMPTY
58409: ST_TO_ADDR
// hackLimit := 3 ;
58410: LD_ADDR_EXP 51
58414: PUSH
58415: LD_INT 3
58417: ST_TO_ADDR
// hackDist := 12 ;
58418: LD_ADDR_EXP 52
58422: PUSH
58423: LD_INT 12
58425: ST_TO_ADDR
// hackCounter := [ ] ;
58426: LD_ADDR_EXP 53
58430: PUSH
58431: EMPTY
58432: ST_TO_ADDR
// end ;
58433: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58434: LD_EXP 48
58438: IFFALSE 58456
58440: PUSH
58441: LD_INT 34
58443: PUSH
58444: LD_INT 99
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PPUSH
58451: CALL_OW 69
58455: AND
58456: IFFALSE 58709
58458: GO 58460
58460: DISABLE
58461: LD_INT 0
58463: PPUSH
58464: PPUSH
// begin enable ;
58465: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58466: LD_ADDR_VAR 0 1
58470: PUSH
58471: LD_INT 34
58473: PUSH
58474: LD_INT 99
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PPUSH
58481: CALL_OW 69
58485: PUSH
58486: FOR_IN
58487: IFFALSE 58707
// begin if not i in hackTanks then
58489: LD_VAR 0 1
58493: PUSH
58494: LD_EXP 49
58498: IN
58499: NOT
58500: IFFALSE 58583
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58502: LD_ADDR_EXP 49
58506: PUSH
58507: LD_EXP 49
58511: PPUSH
58512: LD_EXP 49
58516: PUSH
58517: LD_INT 1
58519: PLUS
58520: PPUSH
58521: LD_VAR 0 1
58525: PPUSH
58526: CALL_OW 1
58530: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58531: LD_ADDR_EXP 50
58535: PUSH
58536: LD_EXP 50
58540: PPUSH
58541: LD_EXP 50
58545: PUSH
58546: LD_INT 1
58548: PLUS
58549: PPUSH
58550: EMPTY
58551: PPUSH
58552: CALL_OW 1
58556: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58557: LD_ADDR_EXP 53
58561: PUSH
58562: LD_EXP 53
58566: PPUSH
58567: LD_EXP 53
58571: PUSH
58572: LD_INT 1
58574: PLUS
58575: PPUSH
58576: EMPTY
58577: PPUSH
58578: CALL_OW 1
58582: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58583: LD_VAR 0 1
58587: PPUSH
58588: CALL_OW 302
58592: NOT
58593: IFFALSE 58606
// begin HackUnlinkAll ( i ) ;
58595: LD_VAR 0 1
58599: PPUSH
58600: CALL 58712 0 1
// continue ;
58604: GO 58486
// end ; HackCheckCapturedStatus ( i ) ;
58606: LD_VAR 0 1
58610: PPUSH
58611: CALL 59157 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58615: LD_ADDR_VAR 0 2
58619: PUSH
58620: LD_INT 81
58622: PUSH
58623: LD_VAR 0 1
58627: PPUSH
58628: CALL_OW 255
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 33
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 91
58649: PUSH
58650: LD_VAR 0 1
58654: PUSH
58655: LD_EXP 52
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 50
58667: PUSH
58668: EMPTY
58669: LIST
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: PPUSH
58677: CALL_OW 69
58681: ST_TO_ADDR
// if not tmp then
58682: LD_VAR 0 2
58686: NOT
58687: IFFALSE 58691
// continue ;
58689: GO 58486
// HackLink ( i , tmp ) ;
58691: LD_VAR 0 1
58695: PPUSH
58696: LD_VAR 0 2
58700: PPUSH
58701: CALL 58848 0 2
// end ;
58705: GO 58486
58707: POP
58708: POP
// end ;
58709: PPOPN 2
58711: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58712: LD_INT 0
58714: PPUSH
58715: PPUSH
58716: PPUSH
// if not hack in hackTanks then
58717: LD_VAR 0 1
58721: PUSH
58722: LD_EXP 49
58726: IN
58727: NOT
58728: IFFALSE 58732
// exit ;
58730: GO 58843
// index := GetElementIndex ( hackTanks , hack ) ;
58732: LD_ADDR_VAR 0 4
58736: PUSH
58737: LD_EXP 49
58741: PPUSH
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL 7792 0 2
58751: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58752: LD_EXP 50
58756: PUSH
58757: LD_VAR 0 4
58761: ARRAY
58762: IFFALSE 58843
// begin for i in hackTanksCaptured [ index ] do
58764: LD_ADDR_VAR 0 3
58768: PUSH
58769: LD_EXP 50
58773: PUSH
58774: LD_VAR 0 4
58778: ARRAY
58779: PUSH
58780: FOR_IN
58781: IFFALSE 58807
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58783: LD_VAR 0 3
58787: PUSH
58788: LD_INT 1
58790: ARRAY
58791: PPUSH
58792: LD_VAR 0 3
58796: PUSH
58797: LD_INT 2
58799: ARRAY
58800: PPUSH
58801: CALL_OW 235
58805: GO 58780
58807: POP
58808: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58809: LD_ADDR_EXP 50
58813: PUSH
58814: LD_EXP 50
58818: PPUSH
58819: LD_VAR 0 4
58823: PPUSH
58824: EMPTY
58825: PPUSH
58826: CALL_OW 1
58830: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58831: LD_VAR 0 1
58835: PPUSH
58836: LD_INT 0
58838: PPUSH
58839: CALL_OW 505
// end ; end ;
58843: LD_VAR 0 2
58847: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58848: LD_INT 0
58850: PPUSH
58851: PPUSH
58852: PPUSH
// if not hack in hackTanks or not vehicles then
58853: LD_VAR 0 1
58857: PUSH
58858: LD_EXP 49
58862: IN
58863: NOT
58864: IFTRUE 58873
58866: PUSH
58867: LD_VAR 0 2
58871: NOT
58872: OR
58873: IFFALSE 58877
// exit ;
58875: GO 59152
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58877: LD_ADDR_VAR 0 2
58881: PUSH
58882: LD_VAR 0 1
58886: PPUSH
58887: LD_VAR 0 2
58891: PPUSH
58892: LD_INT 1
58894: PPUSH
58895: LD_INT 1
58897: PPUSH
58898: CALL 8444 0 4
58902: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58903: LD_ADDR_VAR 0 5
58907: PUSH
58908: LD_EXP 49
58912: PPUSH
58913: LD_VAR 0 1
58917: PPUSH
58918: CALL 7792 0 2
58922: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58923: LD_EXP 50
58927: PUSH
58928: LD_VAR 0 5
58932: ARRAY
58933: PUSH
58934: LD_EXP 51
58938: LESS
58939: IFFALSE 59128
// begin for i := 1 to vehicles do
58941: LD_ADDR_VAR 0 4
58945: PUSH
58946: DOUBLE
58947: LD_INT 1
58949: DEC
58950: ST_TO_ADDR
58951: LD_VAR 0 2
58955: PUSH
58956: FOR_TO
58957: IFFALSE 59126
// begin if hackTanksCaptured [ index ] = hackLimit then
58959: LD_EXP 50
58963: PUSH
58964: LD_VAR 0 5
58968: ARRAY
58969: PUSH
58970: LD_EXP 51
58974: EQUAL
58975: IFFALSE 58979
// break ;
58977: GO 59126
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58979: LD_ADDR_EXP 53
58983: PUSH
58984: LD_EXP 53
58988: PPUSH
58989: LD_VAR 0 5
58993: PPUSH
58994: LD_EXP 53
58998: PUSH
58999: LD_VAR 0 5
59003: ARRAY
59004: PUSH
59005: LD_INT 1
59007: PLUS
59008: PPUSH
59009: CALL_OW 1
59013: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59014: LD_ADDR_EXP 50
59018: PUSH
59019: LD_EXP 50
59023: PPUSH
59024: LD_VAR 0 5
59028: PUSH
59029: LD_EXP 50
59033: PUSH
59034: LD_VAR 0 5
59038: ARRAY
59039: PUSH
59040: LD_INT 1
59042: PLUS
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PPUSH
59048: LD_VAR 0 2
59052: PUSH
59053: LD_VAR 0 4
59057: ARRAY
59058: PUSH
59059: LD_VAR 0 2
59063: PUSH
59064: LD_VAR 0 4
59068: ARRAY
59069: PPUSH
59070: CALL_OW 255
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PPUSH
59079: CALL 8009 0 3
59083: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59084: LD_VAR 0 2
59088: PUSH
59089: LD_VAR 0 4
59093: ARRAY
59094: PPUSH
59095: LD_VAR 0 1
59099: PPUSH
59100: CALL_OW 255
59104: PPUSH
59105: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59109: LD_VAR 0 2
59113: PUSH
59114: LD_VAR 0 4
59118: ARRAY
59119: PPUSH
59120: CALL_OW 141
// end ;
59124: GO 58956
59126: POP
59127: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59128: LD_VAR 0 1
59132: PPUSH
59133: LD_EXP 50
59137: PUSH
59138: LD_VAR 0 5
59142: ARRAY
59143: PUSH
59144: LD_INT 0
59146: PLUS
59147: PPUSH
59148: CALL_OW 505
// end ;
59152: LD_VAR 0 3
59156: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59157: LD_INT 0
59159: PPUSH
59160: PPUSH
59161: PPUSH
59162: PPUSH
// if not hack in hackTanks then
59163: LD_VAR 0 1
59167: PUSH
59168: LD_EXP 49
59172: IN
59173: NOT
59174: IFFALSE 59178
// exit ;
59176: GO 59422
// index := GetElementIndex ( hackTanks , hack ) ;
59178: LD_ADDR_VAR 0 4
59182: PUSH
59183: LD_EXP 49
59187: PPUSH
59188: LD_VAR 0 1
59192: PPUSH
59193: CALL 7792 0 2
59197: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59198: LD_ADDR_VAR 0 3
59202: PUSH
59203: DOUBLE
59204: LD_EXP 50
59208: PUSH
59209: LD_VAR 0 4
59213: ARRAY
59214: INC
59215: ST_TO_ADDR
59216: LD_INT 1
59218: PUSH
59219: FOR_DOWNTO
59220: IFFALSE 59396
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59222: LD_ADDR_VAR 0 5
59226: PUSH
59227: LD_EXP 50
59231: PUSH
59232: LD_VAR 0 4
59236: ARRAY
59237: PUSH
59238: LD_VAR 0 3
59242: ARRAY
59243: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59244: LD_VAR 0 5
59248: PUSH
59249: LD_INT 1
59251: ARRAY
59252: PPUSH
59253: CALL_OW 302
59257: NOT
59258: IFTRUE 59286
59260: PUSH
59261: LD_VAR 0 5
59265: PUSH
59266: LD_INT 1
59268: ARRAY
59269: PPUSH
59270: CALL_OW 255
59274: PUSH
59275: LD_VAR 0 1
59279: PPUSH
59280: CALL_OW 255
59284: NONEQUAL
59285: OR
59286: IFFALSE 59394
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59288: LD_VAR 0 5
59292: PUSH
59293: LD_INT 1
59295: ARRAY
59296: PPUSH
59297: CALL_OW 305
59301: IFFALSE 59329
59303: PUSH
59304: LD_VAR 0 5
59308: PUSH
59309: LD_INT 1
59311: ARRAY
59312: PPUSH
59313: CALL_OW 255
59317: PUSH
59318: LD_VAR 0 1
59322: PPUSH
59323: CALL_OW 255
59327: EQUAL
59328: AND
59329: IFFALSE 59353
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59331: LD_VAR 0 5
59335: PUSH
59336: LD_INT 1
59338: ARRAY
59339: PPUSH
59340: LD_VAR 0 5
59344: PUSH
59345: LD_INT 2
59347: ARRAY
59348: PPUSH
59349: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59353: LD_ADDR_EXP 50
59357: PUSH
59358: LD_EXP 50
59362: PPUSH
59363: LD_VAR 0 4
59367: PPUSH
59368: LD_EXP 50
59372: PUSH
59373: LD_VAR 0 4
59377: ARRAY
59378: PPUSH
59379: LD_VAR 0 3
59383: PPUSH
59384: CALL_OW 3
59388: PPUSH
59389: CALL_OW 1
59393: ST_TO_ADDR
// end ; end ;
59394: GO 59219
59396: POP
59397: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59398: LD_VAR 0 1
59402: PPUSH
59403: LD_EXP 50
59407: PUSH
59408: LD_VAR 0 4
59412: ARRAY
59413: PUSH
59414: LD_INT 0
59416: PLUS
59417: PPUSH
59418: CALL_OW 505
// end ;
59422: LD_VAR 0 2
59426: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59427: LD_INT 0
59429: PPUSH
59430: PPUSH
59431: PPUSH
59432: PPUSH
// if not hack in hackTanks then
59433: LD_VAR 0 1
59437: PUSH
59438: LD_EXP 49
59442: IN
59443: NOT
59444: IFFALSE 59448
// exit ;
59446: GO 59533
// index := GetElementIndex ( hackTanks , hack ) ;
59448: LD_ADDR_VAR 0 5
59452: PUSH
59453: LD_EXP 49
59457: PPUSH
59458: LD_VAR 0 1
59462: PPUSH
59463: CALL 7792 0 2
59467: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59468: LD_ADDR_VAR 0 4
59472: PUSH
59473: DOUBLE
59474: LD_INT 1
59476: DEC
59477: ST_TO_ADDR
59478: LD_EXP 50
59482: PUSH
59483: LD_VAR 0 5
59487: ARRAY
59488: PUSH
59489: FOR_TO
59490: IFFALSE 59531
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59492: LD_EXP 50
59496: PUSH
59497: LD_VAR 0 5
59501: ARRAY
59502: PUSH
59503: LD_VAR 0 4
59507: ARRAY
59508: PUSH
59509: LD_INT 1
59511: ARRAY
59512: PUSH
59513: LD_VAR 0 2
59517: EQUAL
59518: IFFALSE 59529
// KillUnit ( vehicle ) ;
59520: LD_VAR 0 2
59524: PPUSH
59525: CALL_OW 66
59529: GO 59489
59531: POP
59532: POP
// end ;
59533: LD_VAR 0 3
59537: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59538: LD_EXP 54
59542: NOT
59543: IFFALSE 59676
59545: GO 59547
59547: DISABLE
59548: LD_INT 0
59550: PPUSH
// begin initMiner := true ;
59551: LD_ADDR_EXP 54
59555: PUSH
59556: LD_INT 1
59558: ST_TO_ADDR
// minersList := [ ] ;
59559: LD_ADDR_EXP 55
59563: PUSH
59564: EMPTY
59565: ST_TO_ADDR
// minerMinesList := [ ] ;
59566: LD_ADDR_EXP 56
59570: PUSH
59571: EMPTY
59572: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59573: LD_ADDR_EXP 57
59577: PUSH
59578: LD_INT 6
59580: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59581: LD_ADDR_VAR 0 1
59585: PUSH
59586: LD_INT 34
59588: PUSH
59589: LD_INT 81
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PPUSH
59596: CALL_OW 69
59600: PUSH
59601: FOR_IN
59602: IFFALSE 59674
// begin if not i in minersList then
59604: LD_VAR 0 1
59608: PUSH
59609: LD_EXP 55
59613: IN
59614: NOT
59615: IFFALSE 59672
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59617: LD_ADDR_EXP 55
59621: PUSH
59622: LD_EXP 55
59626: PPUSH
59627: LD_EXP 55
59631: PUSH
59632: LD_INT 1
59634: PLUS
59635: PPUSH
59636: LD_VAR 0 1
59640: PPUSH
59641: CALL_OW 1
59645: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59646: LD_ADDR_EXP 56
59650: PUSH
59651: LD_EXP 56
59655: PPUSH
59656: LD_EXP 56
59660: PUSH
59661: LD_INT 1
59663: PLUS
59664: PPUSH
59665: EMPTY
59666: PPUSH
59667: CALL_OW 1
59671: ST_TO_ADDR
// end end ;
59672: GO 59601
59674: POP
59675: POP
// end ;
59676: PPOPN 1
59678: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
59679: LD_EXP 54
59683: IFFALSE 59714
59685: PUSH
59686: LD_EXP 56
59690: PPUSH
59691: CALL 5091 0 1
59695: IFTRUE 59713
59697: PUSH
59698: LD_INT 34
59700: PUSH
59701: LD_INT 81
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PPUSH
59708: CALL_OW 69
59712: OR
59713: AND
59714: IFFALSE 60213
59716: GO 59718
59718: DISABLE
59719: LD_INT 0
59721: PPUSH
59722: PPUSH
59723: PPUSH
59724: PPUSH
// begin enable ;
59725: ENABLE
// for i := minerMinesList downto 1 do
59726: LD_ADDR_VAR 0 1
59730: PUSH
59731: DOUBLE
59732: LD_EXP 56
59736: INC
59737: ST_TO_ADDR
59738: LD_INT 1
59740: PUSH
59741: FOR_DOWNTO
59742: IFFALSE 60211
// begin if IsLive ( minersList [ i ] ) then
59744: LD_EXP 55
59748: PUSH
59749: LD_VAR 0 1
59753: ARRAY
59754: PPUSH
59755: CALL_OW 300
59759: IFFALSE 59792
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59761: LD_EXP 55
59765: PUSH
59766: LD_VAR 0 1
59770: ARRAY
59771: PPUSH
59772: LD_EXP 56
59776: PUSH
59777: LD_VAR 0 1
59781: ARRAY
59782: PPUSH
59783: CALL 5091 0 1
59787: PPUSH
59788: CALL_OW 505
// if not minerMinesList [ i ] then
59792: LD_EXP 56
59796: PUSH
59797: LD_VAR 0 1
59801: ARRAY
59802: NOT
59803: IFFALSE 59807
// continue ;
59805: GO 59741
// for j := minerMinesList [ i ] downto 1 do
59807: LD_ADDR_VAR 0 2
59811: PUSH
59812: DOUBLE
59813: LD_EXP 56
59817: PUSH
59818: LD_VAR 0 1
59822: ARRAY
59823: INC
59824: ST_TO_ADDR
59825: LD_INT 1
59827: PUSH
59828: FOR_DOWNTO
59829: IFFALSE 60207
// begin side := GetSide ( minersList [ i ] ) ;
59831: LD_ADDR_VAR 0 3
59835: PUSH
59836: LD_EXP 55
59840: PUSH
59841: LD_VAR 0 1
59845: ARRAY
59846: PPUSH
59847: CALL_OW 255
59851: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59852: LD_EXP 55
59856: PUSH
59857: LD_VAR 0 1
59861: ARRAY
59862: PPUSH
59863: CALL_OW 301
59867: IFTRUE 59887
59869: PUSH
59870: LD_EXP 55
59874: PUSH
59875: LD_VAR 0 1
59879: ARRAY
59880: PPUSH
59881: CALL_OW 305
59885: NOT
59886: OR
59887: IFFALSE 59978
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59889: LD_EXP 56
59893: PUSH
59894: LD_VAR 0 1
59898: ARRAY
59899: PUSH
59900: LD_VAR 0 2
59904: ARRAY
59905: PUSH
59906: LD_INT 1
59908: ARRAY
59909: PPUSH
59910: LD_EXP 56
59914: PUSH
59915: LD_VAR 0 1
59919: ARRAY
59920: PUSH
59921: LD_VAR 0 2
59925: ARRAY
59926: PUSH
59927: LD_INT 2
59929: ARRAY
59930: PPUSH
59931: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59935: LD_ADDR_EXP 56
59939: PUSH
59940: LD_EXP 56
59944: PPUSH
59945: LD_VAR 0 1
59949: PPUSH
59950: LD_EXP 56
59954: PUSH
59955: LD_VAR 0 1
59959: ARRAY
59960: PPUSH
59961: LD_VAR 0 2
59965: PPUSH
59966: CALL_OW 3
59970: PPUSH
59971: CALL_OW 1
59975: ST_TO_ADDR
// continue ;
59976: GO 59828
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: LD_EXP 56
59987: PUSH
59988: LD_VAR 0 1
59992: ARRAY
59993: PUSH
59994: LD_VAR 0 2
59998: ARRAY
59999: PUSH
60000: LD_INT 1
60002: ARRAY
60003: PPUSH
60004: LD_EXP 56
60008: PUSH
60009: LD_VAR 0 1
60013: ARRAY
60014: PUSH
60015: LD_VAR 0 2
60019: ARRAY
60020: PUSH
60021: LD_INT 2
60023: ARRAY
60024: PPUSH
60025: CALL_OW 428
60029: ST_TO_ADDR
// if not tmp then
60030: LD_VAR 0 4
60034: NOT
60035: IFFALSE 60039
// continue ;
60037: GO 59828
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60039: LD_VAR 0 4
60043: PUSH
60044: LD_INT 81
60046: PUSH
60047: LD_VAR 0 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PPUSH
60056: CALL_OW 69
60060: IN
60061: IFFALSE 60111
60063: PUSH
60064: LD_EXP 56
60068: PUSH
60069: LD_VAR 0 1
60073: ARRAY
60074: PUSH
60075: LD_VAR 0 2
60079: ARRAY
60080: PUSH
60081: LD_INT 1
60083: ARRAY
60084: PPUSH
60085: LD_EXP 56
60089: PUSH
60090: LD_VAR 0 1
60094: ARRAY
60095: PUSH
60096: LD_VAR 0 2
60100: ARRAY
60101: PUSH
60102: LD_INT 2
60104: ARRAY
60105: PPUSH
60106: CALL_OW 458
60110: AND
60111: IFFALSE 60205
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60113: LD_EXP 56
60117: PUSH
60118: LD_VAR 0 1
60122: ARRAY
60123: PUSH
60124: LD_VAR 0 2
60128: ARRAY
60129: PUSH
60130: LD_INT 1
60132: ARRAY
60133: PPUSH
60134: LD_EXP 56
60138: PUSH
60139: LD_VAR 0 1
60143: ARRAY
60144: PUSH
60145: LD_VAR 0 2
60149: ARRAY
60150: PUSH
60151: LD_INT 2
60153: ARRAY
60154: PPUSH
60155: LD_VAR 0 3
60159: PPUSH
60160: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60164: LD_ADDR_EXP 56
60168: PUSH
60169: LD_EXP 56
60173: PPUSH
60174: LD_VAR 0 1
60178: PPUSH
60179: LD_EXP 56
60183: PUSH
60184: LD_VAR 0 1
60188: ARRAY
60189: PPUSH
60190: LD_VAR 0 2
60194: PPUSH
60195: CALL_OW 3
60199: PPUSH
60200: CALL_OW 1
60204: ST_TO_ADDR
// end ; end ;
60205: GO 59828
60207: POP
60208: POP
// end ;
60209: GO 59741
60211: POP
60212: POP
// end ;
60213: PPOPN 4
60215: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60216: LD_INT 0
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
// result := false ;
60222: LD_ADDR_VAR 0 4
60226: PUSH
60227: LD_INT 0
60229: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60230: LD_VAR 0 1
60234: PPUSH
60235: CALL_OW 264
60239: PUSH
60240: LD_INT 81
60242: EQUAL
60243: NOT
60244: IFFALSE 60248
// exit ;
60246: GO 60618
// side := GetSide ( unit ) ;
60248: LD_ADDR_VAR 0 6
60252: PUSH
60253: LD_VAR 0 1
60257: PPUSH
60258: CALL_OW 255
60262: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60263: LD_ADDR_VAR 0 5
60267: PUSH
60268: LD_EXP 55
60272: PPUSH
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL 7792 0 2
60282: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60283: LD_EXP 56
60287: PUSH
60288: LD_VAR 0 5
60292: ARRAY
60293: PUSH
60294: LD_EXP 57
60298: GREATEREQUAL
60299: IFFALSE 60303
// exit ;
60301: GO 60618
// ComMoveXY ( unit , x , y ) ;
60303: LD_VAR 0 1
60307: PPUSH
60308: LD_VAR 0 2
60312: PPUSH
60313: LD_VAR 0 3
60317: PPUSH
60318: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60322: LD_INT 35
60324: PPUSH
60325: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60329: LD_VAR 0 1
60333: PPUSH
60334: LD_VAR 0 2
60338: PPUSH
60339: LD_VAR 0 3
60343: PPUSH
60344: CALL 39838 0 3
60348: NOT
60349: IFFALSE 60362
60351: PUSH
60352: LD_VAR 0 1
60356: PPUSH
60357: CALL_OW 314
60361: AND
60362: IFFALSE 60366
// exit ;
60364: GO 60618
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60366: LD_VAR 0 2
60370: PPUSH
60371: LD_VAR 0 3
60375: PPUSH
60376: CALL_OW 428
60380: PUSH
60381: LD_VAR 0 1
60385: EQUAL
60386: IFFALSE 60400
60388: PUSH
60389: LD_VAR 0 1
60393: PPUSH
60394: CALL_OW 314
60398: NOT
60399: AND
60400: IFFALSE 60322
// if MineAtPos ( x , y ) then
60402: LD_VAR 0 2
60406: PPUSH
60407: LD_VAR 0 3
60411: PPUSH
60412: CALL_OW 458
60416: IFFALSE 60420
// exit ;
60418: GO 60618
// if your_side = side then
60420: LD_OWVAR 2
60424: PUSH
60425: LD_VAR 0 6
60429: EQUAL
60430: IFFALSE 60449
// PlaySoundXY ( x , y , PlantMine ) ;
60432: LD_VAR 0 2
60436: PPUSH
60437: LD_VAR 0 3
60441: PPUSH
60442: LD_STRING PlantMine
60444: PPUSH
60445: CALL_OW 366
// repeat wait ( 1 ) ;
60449: LD_INT 1
60451: PPUSH
60452: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60456: LD_VAR 0 2
60460: PPUSH
60461: LD_VAR 0 3
60465: PPUSH
60466: LD_VAR 0 6
60470: PPUSH
60471: LD_INT 0
60473: PPUSH
60474: CALL_OW 454
60478: IFFALSE 60449
// if MineAtPos ( x , y ) then
60480: LD_VAR 0 2
60484: PPUSH
60485: LD_VAR 0 3
60489: PPUSH
60490: CALL_OW 458
60494: IFFALSE 60610
// begin for i in minerMinesList [ index ] do
60496: LD_ADDR_VAR 0 7
60500: PUSH
60501: LD_EXP 56
60505: PUSH
60506: LD_VAR 0 5
60510: ARRAY
60511: PUSH
60512: FOR_IN
60513: IFFALSE 60555
// if i [ 1 ] = x and i [ 2 ] = y then
60515: LD_VAR 0 7
60519: PUSH
60520: LD_INT 1
60522: ARRAY
60523: PUSH
60524: LD_VAR 0 2
60528: EQUAL
60529: IFFALSE 60547
60531: PUSH
60532: LD_VAR 0 7
60536: PUSH
60537: LD_INT 2
60539: ARRAY
60540: PUSH
60541: LD_VAR 0 3
60545: EQUAL
60546: AND
60547: IFFALSE 60553
// exit ;
60549: POP
60550: POP
60551: GO 60618
60553: GO 60512
60555: POP
60556: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60557: LD_ADDR_EXP 56
60561: PUSH
60562: LD_EXP 56
60566: PPUSH
60567: LD_VAR 0 5
60571: PUSH
60572: LD_EXP 56
60576: PUSH
60577: LD_VAR 0 5
60581: ARRAY
60582: PUSH
60583: LD_INT 1
60585: PLUS
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PPUSH
60591: LD_VAR 0 2
60595: PUSH
60596: LD_VAR 0 3
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PPUSH
60605: CALL 8009 0 3
60609: ST_TO_ADDR
// end ; result := true ;
60610: LD_ADDR_VAR 0 4
60614: PUSH
60615: LD_INT 1
60617: ST_TO_ADDR
// end ;
60618: LD_VAR 0 4
60622: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60623: LD_INT 0
60625: PPUSH
60626: PPUSH
60627: PPUSH
// if not unit in minersList then
60628: LD_VAR 0 1
60632: PUSH
60633: LD_EXP 55
60637: IN
60638: NOT
60639: IFFALSE 60643
// exit ;
60641: GO 60850
// index := GetElementIndex ( minersList , unit ) ;
60643: LD_ADDR_VAR 0 6
60647: PUSH
60648: LD_EXP 55
60652: PPUSH
60653: LD_VAR 0 1
60657: PPUSH
60658: CALL 7792 0 2
60662: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60663: LD_ADDR_VAR 0 5
60667: PUSH
60668: DOUBLE
60669: LD_EXP 56
60673: PUSH
60674: LD_VAR 0 6
60678: ARRAY
60679: INC
60680: ST_TO_ADDR
60681: LD_INT 1
60683: PUSH
60684: FOR_DOWNTO
60685: IFFALSE 60848
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60687: LD_EXP 56
60691: PUSH
60692: LD_VAR 0 6
60696: ARRAY
60697: PUSH
60698: LD_VAR 0 5
60702: ARRAY
60703: PUSH
60704: LD_INT 1
60706: ARRAY
60707: PPUSH
60708: LD_EXP 56
60712: PUSH
60713: LD_VAR 0 6
60717: ARRAY
60718: PUSH
60719: LD_VAR 0 5
60723: ARRAY
60724: PUSH
60725: LD_INT 2
60727: ARRAY
60728: PPUSH
60729: LD_VAR 0 2
60733: PPUSH
60734: LD_VAR 0 3
60738: PPUSH
60739: CALL_OW 298
60743: PUSH
60744: LD_INT 6
60746: LESS
60747: IFFALSE 60846
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60749: LD_EXP 56
60753: PUSH
60754: LD_VAR 0 6
60758: ARRAY
60759: PUSH
60760: LD_VAR 0 5
60764: ARRAY
60765: PUSH
60766: LD_INT 1
60768: ARRAY
60769: PPUSH
60770: LD_EXP 56
60774: PUSH
60775: LD_VAR 0 6
60779: ARRAY
60780: PUSH
60781: LD_VAR 0 5
60785: ARRAY
60786: PUSH
60787: LD_INT 2
60789: ARRAY
60790: PPUSH
60791: LD_VAR 0 1
60795: PPUSH
60796: CALL_OW 255
60800: PPUSH
60801: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60805: LD_ADDR_EXP 56
60809: PUSH
60810: LD_EXP 56
60814: PPUSH
60815: LD_VAR 0 6
60819: PPUSH
60820: LD_EXP 56
60824: PUSH
60825: LD_VAR 0 6
60829: ARRAY
60830: PPUSH
60831: LD_VAR 0 5
60835: PPUSH
60836: CALL_OW 3
60840: PPUSH
60841: CALL_OW 1
60845: ST_TO_ADDR
// end ; end ;
60846: GO 60684
60848: POP
60849: POP
// end ;
60850: LD_VAR 0 4
60854: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60855: LD_INT 0
60857: PPUSH
60858: PPUSH
60859: PPUSH
60860: PPUSH
60861: PPUSH
60862: PPUSH
60863: PPUSH
60864: PPUSH
60865: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60866: LD_VAR 0 1
60870: PPUSH
60871: CALL_OW 264
60875: PUSH
60876: LD_INT 81
60878: EQUAL
60879: NOT
60880: IFTRUE 60895
60882: PUSH
60883: LD_VAR 0 1
60887: PUSH
60888: LD_EXP 55
60892: IN
60893: NOT
60894: OR
60895: IFFALSE 60899
// exit ;
60897: GO 61225
// index := GetElementIndex ( minersList , unit ) ;
60899: LD_ADDR_VAR 0 6
60903: PUSH
60904: LD_EXP 55
60908: PPUSH
60909: LD_VAR 0 1
60913: PPUSH
60914: CALL 7792 0 2
60918: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60919: LD_ADDR_VAR 0 8
60923: PUSH
60924: LD_EXP 57
60928: PUSH
60929: LD_EXP 56
60933: PUSH
60934: LD_VAR 0 6
60938: ARRAY
60939: MINUS
60940: ST_TO_ADDR
// if not minesFreeAmount then
60941: LD_VAR 0 8
60945: NOT
60946: IFFALSE 60950
// exit ;
60948: GO 61225
// tmp := [ ] ;
60950: LD_ADDR_VAR 0 7
60954: PUSH
60955: EMPTY
60956: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60957: LD_ADDR_VAR 0 5
60961: PUSH
60962: DOUBLE
60963: LD_INT 1
60965: DEC
60966: ST_TO_ADDR
60967: LD_VAR 0 8
60971: PUSH
60972: FOR_TO
60973: IFFALSE 61172
// begin _d := rand ( 0 , 5 ) ;
60975: LD_ADDR_VAR 0 11
60979: PUSH
60980: LD_INT 0
60982: PPUSH
60983: LD_INT 5
60985: PPUSH
60986: CALL_OW 12
60990: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60991: LD_ADDR_VAR 0 12
60995: PUSH
60996: LD_INT 2
60998: PPUSH
60999: LD_INT 6
61001: PPUSH
61002: CALL_OW 12
61006: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61007: LD_ADDR_VAR 0 9
61011: PUSH
61012: LD_VAR 0 2
61016: PPUSH
61017: LD_VAR 0 11
61021: PPUSH
61022: LD_VAR 0 12
61026: PPUSH
61027: CALL_OW 272
61031: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61032: LD_ADDR_VAR 0 10
61036: PUSH
61037: LD_VAR 0 3
61041: PPUSH
61042: LD_VAR 0 11
61046: PPUSH
61047: LD_VAR 0 12
61051: PPUSH
61052: CALL_OW 273
61056: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61057: LD_VAR 0 9
61061: PPUSH
61062: LD_VAR 0 10
61066: PPUSH
61067: CALL_OW 488
61071: IFFALSE 61095
61073: PUSH
61074: LD_VAR 0 9
61078: PUSH
61079: LD_VAR 0 10
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_VAR 0 7
61092: IN
61093: NOT
61094: AND
61095: IFFALSE 61114
61097: PUSH
61098: LD_VAR 0 9
61102: PPUSH
61103: LD_VAR 0 10
61107: PPUSH
61108: CALL_OW 458
61112: NOT
61113: AND
61114: IFFALSE 61156
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61116: LD_ADDR_VAR 0 7
61120: PUSH
61121: LD_VAR 0 7
61125: PPUSH
61126: LD_VAR 0 7
61130: PUSH
61131: LD_INT 1
61133: PLUS
61134: PPUSH
61135: LD_VAR 0 9
61139: PUSH
61140: LD_VAR 0 10
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PPUSH
61149: CALL_OW 1
61153: ST_TO_ADDR
61154: GO 61170
// i := i - 1 ;
61156: LD_ADDR_VAR 0 5
61160: PUSH
61161: LD_VAR 0 5
61165: PUSH
61166: LD_INT 1
61168: MINUS
61169: ST_TO_ADDR
// end ;
61170: GO 60972
61172: POP
61173: POP
// for i in tmp do
61174: LD_ADDR_VAR 0 5
61178: PUSH
61179: LD_VAR 0 7
61183: PUSH
61184: FOR_IN
61185: IFFALSE 61223
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61187: LD_VAR 0 1
61191: PPUSH
61192: LD_VAR 0 5
61196: PUSH
61197: LD_INT 1
61199: ARRAY
61200: PPUSH
61201: LD_VAR 0 5
61205: PUSH
61206: LD_INT 2
61208: ARRAY
61209: PPUSH
61210: CALL 60216 0 3
61214: NOT
61215: IFFALSE 61221
// exit ;
61217: POP
61218: POP
61219: GO 61225
61221: GO 61184
61223: POP
61224: POP
// end ;
61225: LD_VAR 0 4
61229: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61230: LD_INT 0
61232: PPUSH
61233: PPUSH
61234: PPUSH
61235: PPUSH
61236: PPUSH
61237: PPUSH
61238: PPUSH
61239: PPUSH
61240: PPUSH
// if GetClass ( unit ) <> class_sniper then
61241: LD_VAR 0 1
61245: PPUSH
61246: CALL_OW 257
61250: PUSH
61251: LD_INT 5
61253: NONEQUAL
61254: IFFALSE 61258
// exit ;
61256: GO 61728
// dist := 8 ;
61258: LD_ADDR_VAR 0 5
61262: PUSH
61263: LD_INT 8
61265: ST_TO_ADDR
// viewRange := 12 ;
61266: LD_ADDR_VAR 0 8
61270: PUSH
61271: LD_INT 12
61273: ST_TO_ADDR
// side := GetSide ( unit ) ;
61274: LD_ADDR_VAR 0 6
61278: PUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: CALL_OW 255
61288: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61289: LD_INT 61
61291: PPUSH
61292: LD_VAR 0 6
61296: PPUSH
61297: CALL_OW 321
61301: PUSH
61302: LD_INT 2
61304: EQUAL
61305: IFFALSE 61315
// viewRange := 16 ;
61307: LD_ADDR_VAR 0 8
61311: PUSH
61312: LD_INT 16
61314: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61315: LD_VAR 0 1
61319: PPUSH
61320: LD_VAR 0 2
61324: PPUSH
61325: LD_VAR 0 3
61329: PPUSH
61330: CALL_OW 297
61334: PUSH
61335: LD_VAR 0 5
61339: GREATER
61340: IFFALSE 61419
// begin ComMoveXY ( unit , x , y ) ;
61342: LD_VAR 0 1
61346: PPUSH
61347: LD_VAR 0 2
61351: PPUSH
61352: LD_VAR 0 3
61356: PPUSH
61357: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61361: LD_INT 35
61363: PPUSH
61364: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61368: LD_VAR 0 1
61372: PPUSH
61373: LD_VAR 0 2
61377: PPUSH
61378: LD_VAR 0 3
61382: PPUSH
61383: CALL 39838 0 3
61387: NOT
61388: IFFALSE 61392
// exit ;
61390: GO 61728
// until GetDistUnitXY ( unit , x , y ) < dist ;
61392: LD_VAR 0 1
61396: PPUSH
61397: LD_VAR 0 2
61401: PPUSH
61402: LD_VAR 0 3
61406: PPUSH
61407: CALL_OW 297
61411: PUSH
61412: LD_VAR 0 5
61416: LESS
61417: IFFALSE 61361
// end ; ComTurnXY ( unit , x , y ) ;
61419: LD_VAR 0 1
61423: PPUSH
61424: LD_VAR 0 2
61428: PPUSH
61429: LD_VAR 0 3
61433: PPUSH
61434: CALL_OW 118
// repeat if Multiplayer then
61438: LD_OWVAR 4
61442: IFFALSE 61453
// wait ( 35 ) else
61444: LD_INT 35
61446: PPUSH
61447: CALL_OW 67
61451: GO 61460
// wait ( 5 ) ;
61453: LD_INT 5
61455: PPUSH
61456: CALL_OW 67
// _d := GetDir ( unit ) ;
61460: LD_ADDR_VAR 0 11
61464: PUSH
61465: LD_VAR 0 1
61469: PPUSH
61470: CALL_OW 254
61474: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61475: LD_ADDR_VAR 0 7
61479: PUSH
61480: LD_VAR 0 1
61484: PPUSH
61485: CALL_OW 250
61489: PPUSH
61490: LD_VAR 0 1
61494: PPUSH
61495: CALL_OW 251
61499: PPUSH
61500: LD_VAR 0 2
61504: PPUSH
61505: LD_VAR 0 3
61509: PPUSH
61510: CALL 42474 0 4
61514: ST_TO_ADDR
// until dir = _d ;
61515: LD_VAR 0 7
61519: PUSH
61520: LD_VAR 0 11
61524: EQUAL
61525: IFFALSE 61438
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61527: LD_ADDR_VAR 0 9
61531: PUSH
61532: LD_VAR 0 1
61536: PPUSH
61537: CALL_OW 250
61541: PPUSH
61542: LD_VAR 0 7
61546: PPUSH
61547: LD_VAR 0 5
61551: PPUSH
61552: CALL_OW 272
61556: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61557: LD_ADDR_VAR 0 10
61561: PUSH
61562: LD_VAR 0 1
61566: PPUSH
61567: CALL_OW 251
61571: PPUSH
61572: LD_VAR 0 7
61576: PPUSH
61577: LD_VAR 0 5
61581: PPUSH
61582: CALL_OW 273
61586: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61587: LD_VAR 0 9
61591: PPUSH
61592: LD_VAR 0 10
61596: PPUSH
61597: CALL_OW 488
61601: NOT
61602: IFFALSE 61606
// exit ;
61604: GO 61728
// ComAnimCustom ( unit , 1 ) ;
61606: LD_VAR 0 1
61610: PPUSH
61611: LD_INT 1
61613: PPUSH
61614: CALL_OW 592
// p := 0 ;
61618: LD_ADDR_VAR 0 12
61622: PUSH
61623: LD_INT 0
61625: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61626: LD_VAR 0 9
61630: PPUSH
61631: LD_VAR 0 10
61635: PPUSH
61636: LD_VAR 0 6
61640: PPUSH
61641: LD_VAR 0 8
61645: PPUSH
61646: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61650: LD_INT 35
61652: PPUSH
61653: CALL_OW 67
// p := Inc ( p ) ;
61657: LD_ADDR_VAR 0 12
61661: PUSH
61662: LD_VAR 0 12
61666: PPUSH
61667: CALL 42430 0 1
61671: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61672: LD_VAR 0 12
61676: PUSH
61677: LD_INT 3
61679: EQUAL
61680: IFTRUE 61694
61682: PUSH
61683: LD_VAR 0 1
61687: PPUSH
61688: CALL_OW 302
61692: NOT
61693: OR
61694: IFTRUE 61707
61696: PUSH
61697: LD_VAR 0 1
61701: PPUSH
61702: CALL_OW 301
61706: OR
61707: IFFALSE 61650
// RemoveSeeing ( _x , _y , side ) ;
61709: LD_VAR 0 9
61713: PPUSH
61714: LD_VAR 0 10
61718: PPUSH
61719: LD_VAR 0 6
61723: PPUSH
61724: CALL_OW 331
// end ;
61728: LD_VAR 0 4
61732: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
61733: LD_INT 0
61735: PPUSH
61736: PPUSH
61737: PPUSH
61738: PPUSH
61739: PPUSH
61740: PPUSH
61741: PPUSH
61742: PPUSH
61743: PPUSH
61744: PPUSH
61745: PPUSH
// if not unit then
61746: LD_VAR 0 1
61750: NOT
61751: IFFALSE 61755
// exit ;
61753: GO 62026
// side := GetSide ( unit ) ;
61755: LD_ADDR_VAR 0 3
61759: PUSH
61760: LD_VAR 0 1
61764: PPUSH
61765: CALL_OW 255
61769: ST_TO_ADDR
// x := GetX ( unit ) ;
61770: LD_ADDR_VAR 0 5
61774: PUSH
61775: LD_VAR 0 1
61779: PPUSH
61780: CALL_OW 250
61784: ST_TO_ADDR
// y := GetY ( unit ) ;
61785: LD_ADDR_VAR 0 6
61789: PUSH
61790: LD_VAR 0 1
61794: PPUSH
61795: CALL_OW 251
61799: ST_TO_ADDR
// r := 8 ;
61800: LD_ADDR_VAR 0 4
61804: PUSH
61805: LD_INT 8
61807: ST_TO_ADDR
// if x - r < 0 then
61808: LD_VAR 0 5
61812: PUSH
61813: LD_VAR 0 4
61817: MINUS
61818: PUSH
61819: LD_INT 0
61821: LESS
61822: IFFALSE 61834
// min_x := 0 else
61824: LD_ADDR_VAR 0 7
61828: PUSH
61829: LD_INT 0
61831: ST_TO_ADDR
61832: GO 61850
// min_x := x - r ;
61834: LD_ADDR_VAR 0 7
61838: PUSH
61839: LD_VAR 0 5
61843: PUSH
61844: LD_VAR 0 4
61848: MINUS
61849: ST_TO_ADDR
// if y - r < 0 then
61850: LD_VAR 0 6
61854: PUSH
61855: LD_VAR 0 4
61859: MINUS
61860: PUSH
61861: LD_INT 0
61863: LESS
61864: IFFALSE 61876
// min_y := 0 else
61866: LD_ADDR_VAR 0 8
61870: PUSH
61871: LD_INT 0
61873: ST_TO_ADDR
61874: GO 61892
// min_y := y - r ;
61876: LD_ADDR_VAR 0 8
61880: PUSH
61881: LD_VAR 0 6
61885: PUSH
61886: LD_VAR 0 4
61890: MINUS
61891: ST_TO_ADDR
// max_x := x + r ;
61892: LD_ADDR_VAR 0 9
61896: PUSH
61897: LD_VAR 0 5
61901: PUSH
61902: LD_VAR 0 4
61906: PLUS
61907: ST_TO_ADDR
// max_y := y + r ;
61908: LD_ADDR_VAR 0 10
61912: PUSH
61913: LD_VAR 0 6
61917: PUSH
61918: LD_VAR 0 4
61922: PLUS
61923: ST_TO_ADDR
// for _x = min_x to max_x do
61924: LD_ADDR_VAR 0 11
61928: PUSH
61929: DOUBLE
61930: LD_VAR 0 7
61934: DEC
61935: ST_TO_ADDR
61936: LD_VAR 0 9
61940: PUSH
61941: FOR_TO
61942: IFFALSE 62024
// for _y = min_y to max_y do
61944: LD_ADDR_VAR 0 12
61948: PUSH
61949: DOUBLE
61950: LD_VAR 0 8
61954: DEC
61955: ST_TO_ADDR
61956: LD_VAR 0 10
61960: PUSH
61961: FOR_TO
61962: IFFALSE 62020
// begin if not ValidHex ( _x , _y ) then
61964: LD_VAR 0 11
61968: PPUSH
61969: LD_VAR 0 12
61973: PPUSH
61974: CALL_OW 488
61978: NOT
61979: IFFALSE 61983
// continue ;
61981: GO 61961
// if MineAtPos ( _x , _y ) then
61983: LD_VAR 0 11
61987: PPUSH
61988: LD_VAR 0 12
61992: PPUSH
61993: CALL_OW 458
61997: IFFALSE 62018
// ViewMineAtPos ( _x , _y , side ) ;
61999: LD_VAR 0 11
62003: PPUSH
62004: LD_VAR 0 12
62008: PPUSH
62009: LD_VAR 0 3
62013: PPUSH
62014: CALL_OW 457
// end ;
62018: GO 61961
62020: POP
62021: POP
62022: GO 61941
62024: POP
62025: POP
// end ;
62026: LD_VAR 0 2
62030: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62031: LD_INT 0
62033: PPUSH
62034: PPUSH
62035: PPUSH
62036: PPUSH
62037: PPUSH
62038: PPUSH
// if not units then
62039: LD_VAR 0 1
62043: NOT
62044: IFFALSE 62048
// exit ;
62046: GO 62478
// scaners := [ ] ;
62048: LD_ADDR_VAR 0 6
62052: PUSH
62053: EMPTY
62054: ST_TO_ADDR
// for i in units do
62055: LD_ADDR_VAR 0 3
62059: PUSH
62060: LD_VAR 0 1
62064: PUSH
62065: FOR_IN
62066: IFFALSE 62223
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62068: LD_VAR 0 3
62072: PPUSH
62073: CALL_OW 264
62077: PUSH
62078: LD_INT 11
62080: NONEQUAL
62081: IFTRUE 62095
62083: PUSH
62084: LD_VAR 0 3
62088: PPUSH
62089: CALL_OW 302
62093: NOT
62094: OR
62095: IFTRUE 62112
62097: PUSH
62098: LD_VAR 0 3
62102: PPUSH
62103: CALL_OW 110
62107: PUSH
62108: LD_INT 502
62110: EQUAL
62111: OR
62112: IFFALSE 62116
// continue ;
62114: GO 62065
// ComStop ( i ) ;
62116: LD_VAR 0 3
62120: PPUSH
62121: CALL_OW 141
// x := GetX ( i ) ;
62125: LD_ADDR_VAR 0 4
62129: PUSH
62130: LD_VAR 0 3
62134: PPUSH
62135: CALL_OW 250
62139: ST_TO_ADDR
// y := GetY ( i ) ;
62140: LD_ADDR_VAR 0 5
62144: PUSH
62145: LD_VAR 0 3
62149: PPUSH
62150: CALL_OW 251
62154: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62155: LD_VAR 0 3
62159: PPUSH
62160: CALL_OW 255
62164: PUSH
62165: LD_OWVAR 2
62169: EQUAL
62170: IFFALSE 62189
// PlaySoundXY ( x , y , mineDetector ) ;
62172: LD_VAR 0 4
62176: PPUSH
62177: LD_VAR 0 5
62181: PPUSH
62182: LD_STRING mineDetector
62184: PPUSH
62185: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62189: LD_ADDR_VAR 0 6
62193: PUSH
62194: LD_VAR 0 6
62198: PPUSH
62199: LD_VAR 0 3
62203: PPUSH
62204: CALL 41057 0 2
62208: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62209: LD_VAR 0 3
62213: PPUSH
62214: LD_INT 502
62216: PPUSH
62217: CALL_OW 109
// end ;
62221: GO 62065
62223: POP
62224: POP
// if not scaners then
62225: LD_VAR 0 6
62229: NOT
62230: IFFALSE 62234
// exit ;
62232: GO 62478
// wait ( 3 ) ;
62234: LD_INT 3
62236: PPUSH
62237: CALL_OW 67
// timer := 6 ;
62241: LD_ADDR_VAR 0 7
62245: PUSH
62246: LD_INT 6
62248: ST_TO_ADDR
// repeat for i in scaners do
62249: LD_ADDR_VAR 0 3
62253: PUSH
62254: LD_VAR 0 6
62258: PUSH
62259: FOR_IN
62260: IFFALSE 62376
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62262: LD_VAR 0 3
62266: PPUSH
62267: CALL_OW 302
62271: NOT
62272: IFTRUE 62285
62274: PUSH
62275: LD_VAR 0 3
62279: PPUSH
62280: CALL_OW 314
62284: OR
62285: IFTRUE 62316
62287: PUSH
62288: LD_VAR 0 3
62292: PPUSH
62293: CALL_OW 263
62297: PUSH
62298: LD_INT 1
62300: EQUAL
62301: IFFALSE 62315
62303: PUSH
62304: LD_VAR 0 3
62308: PPUSH
62309: CALL_OW 311
62313: NOT
62314: AND
62315: OR
62316: IFFALSE 62360
// begin SetUnitDisplayNumber ( i , 0 ) ;
62318: LD_VAR 0 3
62322: PPUSH
62323: LD_INT 0
62325: PPUSH
62326: CALL_OW 505
// SetTag ( i , 0 ) ;
62330: LD_VAR 0 3
62334: PPUSH
62335: LD_INT 0
62337: PPUSH
62338: CALL_OW 109
// scaners := scaners diff i ;
62342: LD_ADDR_VAR 0 6
62346: PUSH
62347: LD_VAR 0 6
62351: PUSH
62352: LD_VAR 0 3
62356: DIFF
62357: ST_TO_ADDR
// continue ;
62358: GO 62259
// end ; SetUnitDisplayNumber ( i , timer ) ;
62360: LD_VAR 0 3
62364: PPUSH
62365: LD_VAR 0 7
62369: PPUSH
62370: CALL_OW 505
// end ;
62374: GO 62259
62376: POP
62377: POP
// if not scaners then
62378: LD_VAR 0 6
62382: NOT
62383: IFFALSE 62387
// exit ;
62385: GO 62478
// timer := Dec ( timer ) ;
62387: LD_ADDR_VAR 0 7
62391: PUSH
62392: LD_VAR 0 7
62396: PPUSH
62397: CALL 42452 0 1
62401: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62402: LD_INT 35
62404: PPUSH
62405: CALL_OW 67
// until timer = 0 ;
62409: LD_VAR 0 7
62413: PUSH
62414: LD_INT 0
62416: EQUAL
62417: IFFALSE 62249
// if not scaners then
62419: LD_VAR 0 6
62423: NOT
62424: IFFALSE 62428
// exit ;
62426: GO 62478
// for i in scaners do
62428: LD_ADDR_VAR 0 3
62432: PUSH
62433: LD_VAR 0 6
62437: PUSH
62438: FOR_IN
62439: IFFALSE 62476
// begin SetUnitDisplayNumber ( i , 0 ) ;
62441: LD_VAR 0 3
62445: PPUSH
62446: LD_INT 0
62448: PPUSH
62449: CALL_OW 505
// SetTag ( i , 0 ) ;
62453: LD_VAR 0 3
62457: PPUSH
62458: LD_INT 0
62460: PPUSH
62461: CALL_OW 109
// RevealDetectorMine ( i ) ;
62465: LD_VAR 0 3
62469: PPUSH
62470: CALL 61733 0 1
// end ;
62474: GO 62438
62476: POP
62477: POP
// end ;
62478: LD_VAR 0 2
62482: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62483: LD_INT 0
62485: PPUSH
// if p1 = mine_detector_mode then
62486: LD_VAR 0 2
62490: PUSH
62491: LD_INT 103
62493: EQUAL
62494: IFFALSE 62505
// DetectMine ( units ) ;
62496: LD_VAR 0 1
62500: PPUSH
62501: CALL 62031 0 1
// end ; end_of_file
62505: LD_VAR 0 7
62509: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62510: PPOPN 6
62512: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62513: LD_INT 0
62515: PPUSH
// begin if not units then
62516: LD_VAR 0 1
62520: NOT
62521: IFFALSE 62525
// exit ;
62523: GO 62559
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62525: LD_VAR 0 1
62529: PPUSH
62530: LD_VAR 0 2
62534: PPUSH
62535: LD_VAR 0 3
62539: PPUSH
62540: LD_VAR 0 4
62544: PPUSH
62545: LD_VAR 0 5
62549: PPUSH
62550: LD_VAR 0 6
62554: PPUSH
62555: CALL 62483 0 6
// end ;
62559: PPOPN 7
62561: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62562: LD_EXP 1
62566: PUSH
62567: LD_INT 4
62569: EQUAL
62570: IFFALSE 62606
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62572: LD_STRING setGameDifficulty(
62574: PUSH
62575: LD_OWVAR 67
62579: STR
62580: PUSH
62581: LD_STRING )
62583: STR
62584: PPUSH
62585: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62589: LD_STRING displayDifficulty(
62591: PUSH
62592: LD_OWVAR 67
62596: STR
62597: PUSH
62598: LD_STRING )
62600: STR
62601: PPUSH
62602: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62606: CALL 62635 0 0
// end ; end_of_file
62610: PPOPN 1
62612: END
// every 0 0$1 do
62613: GO 62615
62615: DISABLE
// begin enable ;
62616: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62617: LD_STRING updateTimer(
62619: PUSH
62620: LD_OWVAR 1
62624: STR
62625: PUSH
62626: LD_STRING );
62628: STR
62629: PPUSH
62630: CALL_OW 559
// end ;
62634: END
// export function SOS_MapStart ( ) ; begin
62635: LD_INT 0
62637: PPUSH
// UpdateFactoryWaypoints ( ) ;
62638: CALL 63569 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62642: CALL 63821 0 0
// ParseMultiDataToLua ( ) ;
62646: CALL 63968 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62650: LD_STRING setSpecLogoNumber(
62652: PUSH
62653: LD_INT 2
62655: STR
62656: PUSH
62657: LD_STRING ,
62659: STR
62660: PUSH
62661: LD_INT 1
62663: STR
62664: PUSH
62665: LD_STRING )
62667: STR
62668: PPUSH
62669: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62673: LD_STRING setSpecLogoNumber(
62675: PUSH
62676: LD_INT 3
62678: STR
62679: PUSH
62680: LD_STRING ,
62682: STR
62683: PUSH
62684: LD_INT 2
62686: STR
62687: PUSH
62688: LD_STRING )
62690: STR
62691: PPUSH
62692: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62696: LD_STRING setSpecLogoNumber(
62698: PUSH
62699: LD_INT 4
62701: STR
62702: PUSH
62703: LD_STRING ,
62705: STR
62706: PUSH
62707: LD_INT 3
62709: STR
62710: PUSH
62711: LD_STRING )
62713: STR
62714: PPUSH
62715: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62719: LD_STRING setSpecLogoNumber(
62721: PUSH
62722: LD_INT 5
62724: STR
62725: PUSH
62726: LD_STRING ,
62728: STR
62729: PUSH
62730: LD_INT 4
62732: STR
62733: PUSH
62734: LD_STRING )
62736: STR
62737: PPUSH
62738: CALL_OW 559
// end ;
62742: LD_VAR 0 1
62746: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62747: LD_INT 0
62749: PPUSH
62750: PPUSH
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
62755: PPUSH
62756: PPUSH
62757: PPUSH
// for i := 1 to 8 do
62758: LD_ADDR_VAR 0 2
62762: PUSH
62763: DOUBLE
62764: LD_INT 1
62766: DEC
62767: ST_TO_ADDR
62768: LD_INT 8
62770: PUSH
62771: FOR_TO
62772: IFFALSE 63157
// begin if mpSidePositions [ i ] then
62774: LD_EXP 5
62778: PUSH
62779: LD_VAR 0 2
62783: ARRAY
62784: IFFALSE 63155
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62786: LD_ADDR_VAR 0 7
62790: PUSH
62791: LD_INT 22
62793: PUSH
62794: LD_VAR 0 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 21
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PPUSH
62817: CALL_OW 69
62821: PPUSH
62822: CALL 5091 0 1
62826: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62827: LD_ADDR_VAR 0 9
62831: PUSH
62832: LD_INT 22
62834: PUSH
62835: LD_VAR 0 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: PUSH
62847: LD_INT 30
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 30
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PPUSH
62876: CALL_OW 69
62880: ST_TO_ADDR
// crates := 0 ;
62881: LD_ADDR_VAR 0 4
62885: PUSH
62886: LD_INT 0
62888: ST_TO_ADDR
// oil := 0 ;
62889: LD_ADDR_VAR 0 5
62893: PUSH
62894: LD_INT 0
62896: ST_TO_ADDR
// sib := 0 ;
62897: LD_ADDR_VAR 0 6
62901: PUSH
62902: LD_INT 0
62904: ST_TO_ADDR
// if bases then
62905: LD_VAR 0 9
62909: IFFALSE 63015
// begin for j in bases do
62911: LD_ADDR_VAR 0 3
62915: PUSH
62916: LD_VAR 0 9
62920: PUSH
62921: FOR_IN
62922: IFFALSE 63013
// begin base := GetBase ( j ) ;
62924: LD_ADDR_VAR 0 8
62928: PUSH
62929: LD_VAR 0 3
62933: PPUSH
62934: CALL_OW 274
62938: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62939: LD_ADDR_VAR 0 4
62943: PUSH
62944: LD_VAR 0 4
62948: PUSH
62949: LD_VAR 0 8
62953: PPUSH
62954: LD_INT 1
62956: PPUSH
62957: CALL_OW 275
62961: PLUS
62962: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62963: LD_ADDR_VAR 0 5
62967: PUSH
62968: LD_VAR 0 5
62972: PUSH
62973: LD_VAR 0 8
62977: PPUSH
62978: LD_INT 2
62980: PPUSH
62981: CALL_OW 275
62985: PLUS
62986: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62987: LD_ADDR_VAR 0 6
62991: PUSH
62992: LD_VAR 0 6
62996: PUSH
62997: LD_VAR 0 8
63001: PPUSH
63002: LD_INT 3
63004: PPUSH
63005: CALL_OW 275
63009: PLUS
63010: ST_TO_ADDR
// end ;
63011: GO 62921
63013: POP
63014: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63015: LD_STRING setSpecText(
63017: PUSH
63018: LD_VAR 0 2
63022: STR
63023: PUSH
63024: LD_STRING ,
63026: STR
63027: PUSH
63028: LD_INT 2
63030: STR
63031: PUSH
63032: LD_STRING ,
63034: STR
63035: PUSH
63036: LD_VAR 0 4
63040: STR
63041: PUSH
63042: LD_STRING )
63044: STR
63045: PPUSH
63046: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63050: LD_STRING setSpecText(
63052: PUSH
63053: LD_VAR 0 2
63057: STR
63058: PUSH
63059: LD_STRING ,
63061: STR
63062: PUSH
63063: LD_INT 3
63065: STR
63066: PUSH
63067: LD_STRING ,
63069: STR
63070: PUSH
63071: LD_VAR 0 5
63075: STR
63076: PUSH
63077: LD_STRING )
63079: STR
63080: PPUSH
63081: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63085: LD_STRING setSpecText(
63087: PUSH
63088: LD_VAR 0 2
63092: STR
63093: PUSH
63094: LD_STRING ,
63096: STR
63097: PUSH
63098: LD_INT 4
63100: STR
63101: PUSH
63102: LD_STRING ,
63104: STR
63105: PUSH
63106: LD_VAR 0 6
63110: STR
63111: PUSH
63112: LD_STRING )
63114: STR
63115: PPUSH
63116: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63120: LD_STRING setSpecText(
63122: PUSH
63123: LD_VAR 0 2
63127: STR
63128: PUSH
63129: LD_STRING ,
63131: STR
63132: PUSH
63133: LD_INT 5
63135: STR
63136: PUSH
63137: LD_STRING ,
63139: STR
63140: PUSH
63141: LD_VAR 0 7
63145: STR
63146: PUSH
63147: LD_STRING )
63149: STR
63150: PPUSH
63151: CALL_OW 559
// end ; end ;
63155: GO 62771
63157: POP
63158: POP
// end ;
63159: LD_VAR 0 1
63163: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63164: LD_INT 2
63166: PUSH
63167: LD_INT 30
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 30
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: PPUSH
63192: CALL_OW 69
63196: IFFALSE 63206
63198: GO 63200
63200: DISABLE
// begin enable ;
63201: ENABLE
// UpdateSpectatorBar ;
63202: CALL 62747 0 0
// end ;
63206: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63207: LD_INT 0
63209: PPUSH
// end ;
63210: LD_VAR 0 12
63214: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63215: LD_INT 0
63217: PPUSH
63218: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63219: LD_VAR 0 1
63223: NOT
63224: IFTRUE 63243
63226: PUSH
63227: LD_VAR 0 2
63231: PPUSH
63232: LD_VAR 0 3
63236: PPUSH
63237: CALL_OW 488
63241: NOT
63242: OR
63243: IFTRUE 63278
63245: PUSH
63246: LD_VAR 0 1
63250: PPUSH
63251: CALL_OW 266
63255: PUSH
63256: LD_INT 3
63258: NONEQUAL
63259: IFFALSE 63277
63261: PUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: CALL_OW 247
63271: PUSH
63272: LD_INT 1
63274: EQUAL
63275: NOT
63276: AND
63277: OR
63278: IFFALSE 63282
// exit ;
63280: GO 63564
// if GetType ( factory ) = unit_human then
63282: LD_VAR 0 1
63286: PPUSH
63287: CALL_OW 247
63291: PUSH
63292: LD_INT 1
63294: EQUAL
63295: IFFALSE 63312
// factory := IsInUnit ( factory ) ;
63297: LD_ADDR_VAR 0 1
63301: PUSH
63302: LD_VAR 0 1
63306: PPUSH
63307: CALL_OW 310
63311: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63312: LD_VAR 0 1
63316: PPUSH
63317: CALL_OW 266
63321: PUSH
63322: LD_INT 3
63324: NONEQUAL
63325: IFFALSE 63329
// exit ;
63327: GO 63564
// for i := 1 to Count ( factoryWaypoints ) do
63329: LD_ADDR_VAR 0 5
63333: PUSH
63334: DOUBLE
63335: LD_INT 1
63337: DEC
63338: ST_TO_ADDR
63339: LD_EXP 58
63343: PPUSH
63344: CALL 5091 0 1
63348: PUSH
63349: FOR_TO
63350: IFFALSE 63512
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63352: LD_VAR 0 2
63356: PPUSH
63357: LD_VAR 0 3
63361: PPUSH
63362: CALL_OW 428
63366: PUSH
63367: LD_EXP 58
63371: PUSH
63372: LD_VAR 0 5
63376: ARRAY
63377: PUSH
63378: LD_INT 2
63380: ARRAY
63381: EQUAL
63382: IFFALSE 63414
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63384: LD_ADDR_EXP 58
63388: PUSH
63389: LD_EXP 58
63393: PPUSH
63394: LD_VAR 0 5
63398: PPUSH
63399: CALL_OW 3
63403: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63404: CALL 63569 0 0
// exit ;
63408: POP
63409: POP
63410: GO 63564
// end else
63412: GO 63510
// if factory = factoryWaypoints [ i ] [ 2 ] then
63414: LD_VAR 0 1
63418: PUSH
63419: LD_EXP 58
63423: PUSH
63424: LD_VAR 0 5
63428: ARRAY
63429: PUSH
63430: LD_INT 2
63432: ARRAY
63433: EQUAL
63434: IFFALSE 63510
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63436: LD_ADDR_EXP 58
63440: PUSH
63441: LD_EXP 58
63445: PPUSH
63446: LD_VAR 0 5
63450: PPUSH
63451: CALL_OW 3
63455: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63456: LD_ADDR_EXP 58
63460: PUSH
63461: LD_EXP 58
63465: PPUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: CALL_OW 255
63475: PUSH
63476: LD_VAR 0 1
63480: PUSH
63481: LD_VAR 0 2
63485: PUSH
63486: LD_VAR 0 3
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: PPUSH
63497: CALL 41057 0 2
63501: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63502: CALL 63569 0 0
// exit ;
63506: POP
63507: POP
63508: GO 63564
// end ; end ;
63510: GO 63349
63512: POP
63513: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63514: LD_ADDR_EXP 58
63518: PUSH
63519: LD_EXP 58
63523: PPUSH
63524: LD_VAR 0 1
63528: PPUSH
63529: CALL_OW 255
63533: PUSH
63534: LD_VAR 0 1
63538: PUSH
63539: LD_VAR 0 2
63543: PUSH
63544: LD_VAR 0 3
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: PPUSH
63555: CALL 41057 0 2
63559: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63560: CALL 63569 0 0
// end ;
63564: LD_VAR 0 4
63568: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63569: LD_INT 0
63571: PPUSH
63572: PPUSH
63573: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63574: LD_STRING resetFactoryWaypoint();
63576: PPUSH
63577: CALL_OW 559
// if factoryWaypoints then
63581: LD_EXP 58
63585: IFFALSE 63706
// begin list := factoryWaypoints ;
63587: LD_ADDR_VAR 0 3
63591: PUSH
63592: LD_EXP 58
63596: ST_TO_ADDR
// for i := 1 to list do
63597: LD_ADDR_VAR 0 2
63601: PUSH
63602: DOUBLE
63603: LD_INT 1
63605: DEC
63606: ST_TO_ADDR
63607: LD_VAR 0 3
63611: PUSH
63612: FOR_TO
63613: IFFALSE 63704
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63615: LD_STRING setFactoryWaypointXY(
63617: PUSH
63618: LD_VAR 0 3
63622: PUSH
63623: LD_VAR 0 2
63627: ARRAY
63628: PUSH
63629: LD_INT 1
63631: ARRAY
63632: STR
63633: PUSH
63634: LD_STRING ,
63636: STR
63637: PUSH
63638: LD_VAR 0 3
63642: PUSH
63643: LD_VAR 0 2
63647: ARRAY
63648: PUSH
63649: LD_INT 2
63651: ARRAY
63652: STR
63653: PUSH
63654: LD_STRING ,
63656: STR
63657: PUSH
63658: LD_VAR 0 3
63662: PUSH
63663: LD_VAR 0 2
63667: ARRAY
63668: PUSH
63669: LD_INT 3
63671: ARRAY
63672: STR
63673: PUSH
63674: LD_STRING ,
63676: STR
63677: PUSH
63678: LD_VAR 0 3
63682: PUSH
63683: LD_VAR 0 2
63687: ARRAY
63688: PUSH
63689: LD_INT 4
63691: ARRAY
63692: STR
63693: PUSH
63694: LD_STRING )
63696: STR
63697: PPUSH
63698: CALL_OW 559
63702: GO 63612
63704: POP
63705: POP
// end ; end ;
63706: LD_VAR 0 1
63710: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63711: LD_INT 0
63713: PPUSH
// if HexInfo ( x , y ) = warehouse then
63714: LD_VAR 0 2
63718: PPUSH
63719: LD_VAR 0 3
63723: PPUSH
63724: CALL_OW 428
63728: PUSH
63729: LD_VAR 0 1
63733: EQUAL
63734: IFFALSE 63761
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63736: LD_ADDR_EXP 60
63740: PUSH
63741: LD_EXP 60
63745: PPUSH
63746: LD_VAR 0 1
63750: PPUSH
63751: LD_INT 0
63753: PPUSH
63754: CALL_OW 1
63758: ST_TO_ADDR
63759: GO 63812
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63761: LD_ADDR_EXP 60
63765: PUSH
63766: LD_EXP 60
63770: PPUSH
63771: LD_VAR 0 1
63775: PPUSH
63776: LD_VAR 0 1
63780: PPUSH
63781: CALL_OW 255
63785: PUSH
63786: LD_VAR 0 1
63790: PUSH
63791: LD_VAR 0 2
63795: PUSH
63796: LD_VAR 0 3
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: PPUSH
63807: CALL_OW 1
63811: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63812: CALL 63821 0 0
// end ;
63816: LD_VAR 0 4
63820: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63821: LD_INT 0
63823: PPUSH
63824: PPUSH
63825: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63826: LD_STRING resetWarehouseGatheringPoints();
63828: PPUSH
63829: CALL_OW 559
// if warehouseGatheringPoints then
63833: LD_EXP 60
63837: IFFALSE 63963
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63839: LD_ADDR_VAR 0 3
63843: PUSH
63844: LD_EXP 60
63848: PPUSH
63849: CALL 44991 0 1
63853: ST_TO_ADDR
// for i := 1 to list do
63854: LD_ADDR_VAR 0 2
63858: PUSH
63859: DOUBLE
63860: LD_INT 1
63862: DEC
63863: ST_TO_ADDR
63864: LD_VAR 0 3
63868: PUSH
63869: FOR_TO
63870: IFFALSE 63961
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63872: LD_STRING setWarehouseGatheringPointXY(
63874: PUSH
63875: LD_VAR 0 3
63879: PUSH
63880: LD_VAR 0 2
63884: ARRAY
63885: PUSH
63886: LD_INT 1
63888: ARRAY
63889: STR
63890: PUSH
63891: LD_STRING ,
63893: STR
63894: PUSH
63895: LD_VAR 0 3
63899: PUSH
63900: LD_VAR 0 2
63904: ARRAY
63905: PUSH
63906: LD_INT 2
63908: ARRAY
63909: STR
63910: PUSH
63911: LD_STRING ,
63913: STR
63914: PUSH
63915: LD_VAR 0 3
63919: PUSH
63920: LD_VAR 0 2
63924: ARRAY
63925: PUSH
63926: LD_INT 3
63928: ARRAY
63929: STR
63930: PUSH
63931: LD_STRING ,
63933: STR
63934: PUSH
63935: LD_VAR 0 3
63939: PUSH
63940: LD_VAR 0 2
63944: ARRAY
63945: PUSH
63946: LD_INT 4
63948: ARRAY
63949: STR
63950: PUSH
63951: LD_STRING )
63953: STR
63954: PPUSH
63955: CALL_OW 559
63959: GO 63869
63961: POP
63962: POP
// end ; end ;
63963: LD_VAR 0 1
63967: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63968: LD_INT 0
63970: PPUSH
63971: PPUSH
// if not mpSidePositions then
63972: LD_EXP 5
63976: NOT
63977: IFFALSE 63981
// exit ;
63979: GO 64052
// result :=  ;
63981: LD_ADDR_VAR 0 1
63985: PUSH
63986: LD_STRING 
63988: ST_TO_ADDR
// for i := 1 to 8 do
63989: LD_ADDR_VAR 0 2
63993: PUSH
63994: DOUBLE
63995: LD_INT 1
63997: DEC
63998: ST_TO_ADDR
63999: LD_INT 8
64001: PUSH
64002: FOR_TO
64003: IFFALSE 64033
// begin result := result & mpSidePositions [ i ] & ; ;
64005: LD_ADDR_VAR 0 1
64009: PUSH
64010: LD_VAR 0 1
64014: PUSH
64015: LD_EXP 5
64019: PUSH
64020: LD_VAR 0 2
64024: ARRAY
64025: STR
64026: PUSH
64027: LD_STRING ;
64029: STR
64030: ST_TO_ADDR
// end ;
64031: GO 64002
64033: POP
64034: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64035: LD_STRING setMultiplayerRealPosition("
64037: PUSH
64038: LD_VAR 0 1
64042: STR
64043: PUSH
64044: LD_STRING ");
64046: STR
64047: PPUSH
64048: CALL_OW 559
// end ;
64052: LD_VAR 0 1
64056: RET
